{"cell_type":{"90d02ff6":"code","edbe6c6c":"code","73dfa794":"code","367b4a67":"code","4d23bad2":"code","300740f5":"code","2f3dd3f8":"code","032ab952":"code","aee3fd10":"code","13de8c85":"code","5fa2eb1a":"code","c0f835d6":"code","378c3810":"code","67fc9864":"code","fb3719f0":"code","063306ae":"code","d776e4d5":"code","5b9dcd5e":"code","a3d5b96a":"code","dc693e72":"code","c0fee5a4":"code","f17736b4":"code","33125352":"code","24a23e42":"code","afeaaa83":"code","eb8b006f":"code","9654611b":"code","3ce15af7":"code","3eebce6a":"markdown","ee369a5e":"markdown","11bea0aa":"markdown","a881514e":"markdown","5b5c5b2f":"markdown","0a498656":"markdown","f0d47fdd":"markdown","fa55ab72":"markdown","a9e59dfb":"markdown","cc6f7b3a":"markdown","ce771458":"markdown","6a674d7d":"markdown","b276801b":"markdown","8199d4a5":"markdown"},"source":{"90d02ff6":"#!pip install --upgrade seaborn #Upgrade","edbe6c6c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\n\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\nTrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nTrain = Train.set_index('Id')\nTest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nTest = Test.set_index('Id')\n\npreprocessing_path = '..\/input\/house-price-eda'\n\ntrain_scale = pd.read_csv(f'{preprocessing_path}\/train_scaled.csv')\ntrain_scale = train_scale.set_index('Id')\ntest_scale = pd.read_csv(f'{preprocessing_path}\/test_scaled.csv')\ntry:\n    test_scale = test_scale.rename(columns={'Unnamed: 0':'Id'})\nexcept:\n    pass\ntest_scale = test_scale.set_index('Id')\n\nTrain  = Train.loc[train_scale.index]\n\nimport glob\n\nlisting = glob.glob(f'{preprocessing_path}\/*_one_hot_pickle')\n\nimport pickle\n#Preprocess train data\nfor model_file in listing:\n    col = model_file.split('_one_')[0]\n\n    col = col.split('\/')[-1]\n    enc = pickle.load(open(model_file, 'rb'))\n    new_cols = pd.DataFrame(enc.transform(Train[[col]]).toarray(),\n                    columns=f'{col}_' + enc.categories_[0])\n    new_cols.index = Train.index\n    Train = pd.concat([Train, new_cols], axis = 1)\n    Train = Train.drop(col, axis = 1)\n    \nfor log_col in train_scale.columns[train_scale.columns.str.endswith('log')]:\n    col = log_col.split('_log')[0]\n    Train[log_col] = np.log(Train[col])\n    Train = Train.drop(col, axis = 1)\n    \nTrain = Train[train_scale.columns]\n\n#Preprocess test data\nfor model_file in listing:\n    col = model_file.split('_one_')[0]\n\n    col = col.split('\/')[-1]\n    enc = pickle.load(open(model_file, 'rb'))\n    new_cols = pd.DataFrame(enc.transform(Test[[col]]).toarray(),\n                    columns=f'{col}_' + enc.categories_[0])\n    \n    new_cols.index = Test.index\n    Test = pd.concat([Test, new_cols], axis = 1)\n    Test = Test.drop(col, axis = 1)\n    \nfor log_col in test_scale.columns[test_scale.columns.str.endswith('log')]:\n    col = log_col.split('_log')[0]\n    Test[log_col] = np.log(Test[col])\n    Test = Test.drop(col, axis = 1)\n    \nTest = Test[test_scale.columns]","73dfa794":"# for col in Test.columns:\n#     if len(set(Train[col])) > 2 and '_log' not in col:\n#         Train[f'{col}_log'] = np.log(Train[col] + 1)\n#         Train = Train.drop(col, axis = 1)\n        \n#         Test[f'{col}_log'] = np.log(Test[col] + 1)\n#         Test = Test.drop(col, axis = 1)","367b4a67":"# Train['GrLivArea_log_square'] = Train['GrLivArea_log']**2\n# Test['GrLivArea_log_square'] = Test['GrLivArea_log']**2\n# for col in Train.columns:\n#     if '_log' in col and col != 'SalePrice_log':\n#         Train[col + '_square'] = Train[col] **2\n\n# for col in Test.columns:\n#     if '_log' in col and col != 'SalePrice_log':\n#         Test[col + '_square'] = Test[col] **2","4d23bad2":"def getFoldValidation(length, K = 4):\n    diff = int(length\/K)\n    fraction = length % K\n    batchValidation = [[k*diff, (k + 1)*diff] for k in range(K)]\n    batchValidation[-1][1] = batchValidation[-1][1] + fraction - 1\n    return batchValidation\nbatchValidation = np.array(getFoldValidation(len(Train)))","300740f5":"def getTrainTestBatch():\n    fold = 0\n    while fold < batchValidation.shape[0]:\n        train_batch = pd.concat([Train.iloc[batchValidation[i][0]:batchValidation[i][1]]\n             for i in range(batchValidation.shape[0]) if i !=  fold])\n        test_batch = Train.iloc[batchValidation[fold][0]:batchValidation[fold][1]]\n        yield train_batch, test_batch, fold\n        fold += 1\ntrain_batch, test_batch, fold = next(getTrainTestBatch())     \n                                ","2f3dd3f8":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","032ab952":"import keras.backend as K\n\ndef mse_loss(y_true, y_pred):\n    return K.sqrt(K.mean((y_true - y_pred)**2))\ndef e_loss(y_true, y_pred):\n    return K.sqrt(K.mean((np.e**y_true - np.e**y_pred)**2))\n","aee3fd10":"from sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.svm import SVR\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers import Input\nfrom tensorflow.keras.layers.experimental import preprocessing\nfrom tensorflow_addons.layers import WeightNormalization\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import metrics\n\nfrom keras.layers import Dropout\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.isotonic import IsotonicRegression\n\ngenarator =  getTrainTestBatch()\n\n\n","13de8c85":"lasso = make_pipeline(RobustScaler() #Scaler for make the model more robust to outlier\n                      ,Lasso(alpha =0.0005, random_state=1))","5fa2eb1a":"ENet = make_pipeline(RobustScaler(),\n                     ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","c0f835d6":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","378c3810":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","67fc9864":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","fb3719f0":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","063306ae":"Train","d776e4d5":"X_Train = Train.drop('SalePrice_log', axis = 1)\nX_Train","5b9dcd5e":"#Validation function\n\n\ndef rmsle_cv(model, n_folds = 5):\n    X_Train = Train.drop('SalePrice_log', axis = 1).values\n    Y_Train = Train[['SalePrice_log']].values\n    kf = (KFold(n_folds, shuffle=True,\n                random_state=42\n               ).\n              get_n_splits(X_Train))\n    rmse= np.sqrt(-cross_val_score(model, X_Train, Y_Train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)\nscore = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\n# score = rmsle_cv(GBoost)\n# print(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\n# score = rmsle_cv(model_xgb)\n# print(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\n# score = rmsle_cv(model_lgb)\n# print(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","a3d5b96a":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)\n\naveraged_models = AveragingModels(models = [ENet, GBoost, KRR, lasso])\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","dc693e72":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                \n                instance = clone(model)\n                \n                self.base_models_[i].append(instance)\n                \n                instance.fit(X[train_index], y[train_index])\n                \n                y_pred = instance.predict(X[holdout_index])\n                \n                out_of_fold_predictions[holdout_index, i] = y_pred.flatten()\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)\n    \nstacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = LinearRegression())\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","c0fee5a4":"X_Train = Train.drop('SalePrice_log', axis = 1)\nY_Train = Train[['SalePrice_log']]\n\nstacked_averaged_models.fit(X_Train.values, Y_Train.values)","f17736b4":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","33125352":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","24a23e42":"stacked_averaged_models.fit(Train.drop('SalePrice_log', axis = 1).values, Train[['SalePrice_log']].values)\nstacked_train_pred = stacked_averaged_models.predict(Train.drop('SalePrice_log', axis = 1).values)","afeaaa83":"print(rmsle(Train[['SalePrice_log']].values, stacked_train_pred))","eb8b006f":"predict = stacked_averaged_models.predict(Test.values)","9654611b":"predict = pd.DataFrame(predict)\npredict.index = Test.index\npredict.columns = ['SalePrice_log']\npredict['SalePrice'] = np.e**(predict['SalePrice_log'])\npredict = predict.drop('SalePrice_log', axis = 1)\npredict","3ce15af7":"predict.to_csv(\"submission.csv\")","3eebce6a":"## Stacking models\n\n### Averaging base models","ee369a5e":"## Base model\n\n### Lasso","11bea0aa":"### XGBoost","a881514e":"### Elastic Net Regression","5b5c5b2f":"### Kernel Ridge Regression ","0a498656":"# Batch fold spliter","f0d47fdd":"### LightGBM","fa55ab72":"### Add meta model ","a9e59dfb":"# Postprocessing","cc6f7b3a":"# Stack Model\n\n* based on https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard#Modelling","ce771458":"# Data Preparation","6a674d7d":"## import modules","b276801b":"### Gradient Boosting Regressor","8199d4a5":"### Validation function"}}