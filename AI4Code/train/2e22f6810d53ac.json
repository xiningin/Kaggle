{"cell_type":{"a6d7e434":"code","28fb8cb0":"code","2ed23d84":"code","6298fed1":"code","e1d8f3a5":"code","8ba59fd7":"code","73e56aa1":"code","ec059e2f":"code","10dbe805":"code","939f1691":"code","c1a66971":"code","c2d4f1ba":"code","b41ebaf5":"code","ab02743c":"code","ca762340":"code","e963dace":"markdown","55cdc3cf":"markdown","ca57ea97":"markdown","26e68521":"markdown","4c448cc6":"markdown","020c96fa":"markdown","46a61ec2":"markdown","03c49671":"markdown","944f0881":"markdown","81009c25":"markdown","cf6090e0":"markdown","e7a7323e":"markdown","4234003e":"markdown"},"source":{"a6d7e434":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n\n# matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","28fb8cb0":"df_Happiness2019 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndf_Happiness2018 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2018.csv\")\ndf_Happiness2017 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2017.csv\")","2ed23d84":"df_Happiness2019.info()","6298fed1":"df_Happiness2019.head(10)","e1d8f3a5":"df_Happiness2018.head()","8ba59fd7":"df_Happiness2019_100 = df_Happiness2019.iloc[:100,:] \n\nplt.figure(figsize=(20,10))\nsns.barplot(x=df_Happiness2019_100[\"Country or region\"], y=df_Happiness2019_100['Score'])\nplt.xticks(rotation= 90)\nplt.xlabel('Country or Region')\nplt.ylabel('Score')\nplt.title('Country or Region vs Score')","73e56aa1":"df_Happiness2019_3 = df_Happiness2019.iloc[:3,:]\ndf_Happiness2018_3 = df_Happiness2018.iloc[:3,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df_Happiness2019_3[\"Country or region\"],\n                y = df_Happiness2019_3[\"Score\"],\n                name = \"Score for 2019\",\n                marker = dict(color = 'rgba(220, 150, 175, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_Happiness2019_3[\"Overall rank\"])\n# create trace2 \ntrace2 = go.Bar(\n                x = df_Happiness2018_3[\"Country or region\"],\n                y = df_Happiness2018_3[\"Score\"],\n                name = \"Score for 2018\",\n                marker = dict(color = 'rgba(50, 40, 30, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_Happiness2018_3[\"Overall rank\"])\ntrace3 = go.Bar(\n                x = df_Happiness2018_3[\"Country or region\"],\n                y = df_Happiness2018_3[\"Score\"],\n                name = \"Score for 2018\",\n                marker = dict(color = 'rgba(120, 98, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df_Happiness2018_3[\"Overall rank\"])\ndata = [trace1, trace2,trace3]\nlayout = go.Layout(title = 'Score and Ranking for first 3 country for 2017,2018 and 2019',\n    barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ec059e2f":"data = go.Scatter(\n                    x = df_Happiness2019_100[\"Overall rank\"],\n                    y = df_Happiness2019_100[\"Social support\"],\n                    mode = \"lines\",\n                    name = \"Social Sport\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df_Happiness2019_100[\"Country or region\"])\nlayout = dict(title = \"Social Sport\",\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data =data , layout = layout)\niplot(fig)","10dbe805":"plt.figure(figsize=(9,15))\nsns.barplot(x=df_Happiness2019_100[\"Perceptions of corruption\"],y=df_Happiness2019_100[\"Country or region\"] ,color='green',alpha = 0.5,label='Yellow' )","939f1691":"plt.figure(figsize=(9,15))\nsns.barplot(x=df_Happiness2019_100[\"Generosity\"],y=df_Happiness2019_100[\"Country or region\"] ,color='red',alpha = 0.5,label='Yellow' )","c1a66971":"df_Happiness2018_100 = df_Happiness2018.iloc[:100,:]\ntrace1 =go.Scatter(\n                    x = df_Happiness2019_100[\"Overall rank\"],\n                    y = df_Happiness2019_100[\"GDP per capita\"],\n                    mode = \"markers\",\n                    name = \"2019 GDP per Capita\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_Happiness2019_100[\"Country or region\"])\ntrace2 =go.Scatter(\n                    x = df_Happiness2018_100[\"Overall rank\"],\n                    y = df_Happiness2018_100[\"GDP per capita\"],\n                    mode = \"markers\",\n                    name = \"2018 GDP per Capita\",\n                    marker = dict(color = 'rgba(0, 255, 10, 0.8)'),\n                    text= df_Happiness2018_100[\"Country or region\"])\n                   \ndata = [trace1, trace2]\nlayout = dict(title = 'GDP per capita with 2019 and 2018',\n              xaxis= dict(title= 'Overall Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= \"GDP per Capita\",ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","c2d4f1ba":"# data preparation\n\nnum_size  = df_Happiness2019_100[\"Score\"]*5\ninternational_color = df_Happiness2019_100[\"Freedom to make life choices\"]\ndata = [\n    {\n        'y': df_Happiness2019_100[\"Generosity\"],\n        'x': df_Happiness2019_100[\"Overall rank\"],\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_size,\n            'showscale': True\n        },\n        \"text\" :  df_Happiness2019_100[\"Country or region\"]    \n    }\n]\niplot(data)","b41ebaf5":"\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x=df_Happiness2019_100[\"Country or region\"],y=df_Happiness2019_100[\"GDP per capita\"],color='lime',alpha=0.8)\nsns.pointplot(x=df_Happiness2019_100[\"Country or region\"],y=df_Happiness2019_100[\"Social support\"],color='red',alpha=0.8)\nplt.text(40,0.6,'GDP per capita',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'Social Support',color='lime',fontsize = 18,style = 'italic')\nplt.xticks(rotation= 90)\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('GDP per Capita  VS  Social Support',fontsize = 20,color='blue')\nplt.grid()","ab02743c":"trace1 = go.Scatter(\n                    x = df_Happiness2019_100[\"Overall rank\"],\n                    y = df_Happiness2019_100[\"Healthy life expectancy\"],\n                    mode = \"lines\",\n                    name = \"Social Sport\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df_Happiness2019_100[\"Country or region\"])\ntrace2 = go.Scatter(\n                    x = df_Happiness2019_100[\"Overall rank\"],\n                    y = df_Happiness2019_100[\"Freedom to make life choices\"],\n                    mode = \"lines\",\n                    name = \"Social Sport\",\n                    marker = dict(color = 'rgba(180, 3, 240, 0.8)'),\n                    text= df_Happiness2019_100[\"Country or region\"])\nlayout = dict(title = \"Health Life Expectancy and Freedom to Make Life Choices\",\n              xaxis= dict(title= 'Overall Rank',ticklen= 5,zeroline= False)\n             )\ndata=[trace1,trace2]\nfig = dict(data =data , layout = layout)\niplot(fig)","ca762340":"# data preparation\n\n\ntrace0 = go.Box(\n    y=df_Happiness2019_100[\"Score\"],\n    name = 'total score in 2019',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df_Happiness2018_100[\"Score\"],\n    name = 'total score in 2018',\n    marker = dict(\n        color = 'rgb(90, 250, 2)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","e963dace":"<a id=\"1\"><\/a><br>\n# Load and Check Data","55cdc3cf":"<a id=\"6\"><\/a><br>\n\n## Perceptions of corruption","ca57ea97":" 1. [Load and Check Data](#1)\n 2. [Graphs](#2)\n- [Total Score in 2019](#3)\n- [Score Comparison in 2017,2018 and 2019 for First 3 Country](#4)\n- [Social Sport](#5)\n- [Perceptions of Corruption](#6)\n- [Generosity](#7)\n- [GDP per capita in 2019 and 2018](#8)\n- [Generosity and Freedom to Make Life Choices](#9)\n- [GDP per Capita  VS  Social Support](#10)\n- [Health Life Expectancy and Freedom to Make Life Choices](#11)\n- [Box Plot For Score in 2019 and 2018](#12)\n\n","26e68521":"<a id=\"12\"><\/a><br>\n\n## Box Plot For Score in 2019 and 2018","4c448cc6":"<a id=\"9\"><\/a><br>\n\n## Generosity and Freedom to Make Life Choices","020c96fa":"<a id=\"10\"><\/a><br>\n\n## GDP per Capita  VS  Social Support","46a61ec2":"<a id=\"4\"><\/a><br>\n\n## Score Comparison in 2017,2018 and 2019 for First 3 Country","03c49671":"<a id=\"8\"><\/a><br>\n\n## GDP per capita in 2018 and 2019","944f0881":"<a id=\"3\"><\/a><br>\n\n## Total Score in 2019","81009c25":"<a id=\"5\"><\/a><br>\n\n## Social Sport","cf6090e0":"<a id=\"2\"><\/a><br>\n\n# Graphs","e7a7323e":"<a id=\"11\"><\/a><br>\n\n## Health Life Expectancy and Freedom to Make Life Choices","4234003e":"<a id=\"7\"><\/a><br>\n\n## Generosity"}}