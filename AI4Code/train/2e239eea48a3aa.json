{"cell_type":{"772f56a2":"code","e68f4e3b":"code","95248672":"code","2a67d378":"code","a5f06fdd":"code","885f8ee0":"code","7168ff5e":"code","2dfca850":"code","38e682b2":"code","20297753":"code","69e798b2":"code","8f3f1612":"code","92ab469a":"code","3bd4da95":"code","8d201d98":"code","fe4c55f0":"code","91a5f7fe":"code","842af45c":"markdown","6e2ad4a4":"markdown","21f77ce6":"markdown","d962707b":"markdown","3fff27f7":"markdown","452ddf66":"markdown","a7a5af53":"markdown","0f2f7109":"markdown"},"source":{"772f56a2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport seaborn as sns","e68f4e3b":"df = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ndf.head()","95248672":"dataset_dummies = pd.get_dummies(data=df, columns=['Gender', 'Driving_License', 'Region_Code', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage'],drop_first=True)\ndataset_dummies.head(10)","2a67d378":"df = dataset_dummies.drop('id', 1)","a5f06fdd":"df = df.drop('Policy_Sales_Channel',1)","885f8ee0":"df.head()","7168ff5e":"y = df.loc[:, [\"Response\"]].values\ndf.drop([\"Response\"], axis=1, inplace=True)\nX = df.iloc[:, 1:].values","2dfca850":"\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n","38e682b2":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X)\ny_train = y\nX_test = sc.transform(X_test)","20297753":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0, class_weight='balanced')\nclassifier.fit(X_train, y_train)","69e798b2":"accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","8f3f1612":"y_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","92ab469a":"from sklearn.model_selection import GridSearchCV\nparameters = [{'C': [0.25, 0.5, 0.75, 1], 'class_weight': ['balanced']}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)","3bd4da95":"classifier_cv = LogisticRegression(random_state = 0, C=0.25, class_weight='balanced')\nclassifier_cv.fit(X_train, y_train)\ny_pred = classifier_cv.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","8d201d98":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)*100","fe4c55f0":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix\")\nprint(cm)\nprint (\"Accuracy on Test Set: {:.2f} %\".format(accuracy_score(y_test, y_pred)*100))","91a5f7fe":"\nfrom lightgbm import LGBMClassifier\nclassifier = LGBMClassifier(n_jobs=-1)\nclassifier.fit(X_train, y_train);\n\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix\")\nprint(cm)\nprint (\"Accuracy on Test Set: {:.2f} %\".format(accuracy_score(y_test, y_pred)*100))","842af45c":"### Grid Search CV","6e2ad4a4":"### Simple Logistic Regression","21f77ce6":"# Light GBM","d962707b":"# Random Frost","3fff27f7":"# Imports and Data Preperations","452ddf66":"### K-Fold Analysis","a7a5af53":"# Decision Tree","0f2f7109":"# Logistic Regression"}}