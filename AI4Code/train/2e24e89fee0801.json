{"cell_type":{"da997c16":"code","accac372":"code","a146a602":"code","8ef99fbf":"code","ea7c6795":"code","bd93fe74":"code","ef38c85c":"code","5402c71c":"code","d69e9354":"code","1da6c650":"code","fca367af":"code","8dd1d2f2":"code","9f0d28f6":"code","36eca61b":"code","18902956":"code","7d09b796":"code","2c1c998f":"code","3e9ad05d":"code","b16295a4":"code","d6ad41f5":"code","bbcac68d":"code","8c347bba":"code","8fbafeee":"code","b0ab8a78":"code","4e833db8":"markdown","791e46fa":"markdown","e7401ecf":"markdown","eec66855":"markdown","746d8452":"markdown","faa0dce1":"markdown","28c6444d":"markdown","5893f087":"markdown","710c421c":"markdown","b94f0f54":"markdown","f657a9b3":"markdown","d4b2b327":"markdown","e5b8cc0b":"markdown","823fc52c":"markdown","7e2a6d8b":"markdown","676f912b":"markdown","9d1ae3e7":"markdown","cd3f2bed":"markdown","bd76e86e":"markdown","78c2ba52":"markdown","8389f38c":"markdown","38d5dec5":"markdown","3d38032a":"markdown","16558326":"markdown","9bb80238":"markdown"},"source":{"da997c16":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport geopandas\nfrom wordcloud import WordCloud\nimport ipywidgets as widgets\nfrom ipywidgets import interactive\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","accac372":"!pip install openpyxl","a146a602":"def downcastMemoryUsage(dataFrame):\n    startMemoryOptimization = dataFrame.memory_usage().sum() \/ 1024 ** 2\n    print('Memory usage of dataframe is: {:.2f} MB'.format(startMemoryOptimization))\n    subTypeInt = ['uint8','uint16','uint32','uint64','int8','int16','int32','int64']\n    subTypeFloat = ['float16','float32','float64']\n    for column in dataFrame.columns:\n        columnType = str(dataFrame[column].dtypes)\n        maximumColumn = dataFrame[column].max()\n        minimumColumn = dataFrame[column].min()\n        if 'int' in columnType:\n            for element in subTypeInt:\n                if minimumColumn > np.iinfo(element).min and maximumColumn < np.iinfo(element).max:\n                    dataFrame[column] = dataFrame[column].astype(element)\n                    break\n        elif 'float' in columnType:\n            for element in subTypeFloat:\n                if minimumColumn > np.finfo(element).min and maximumColumn < np.finfo(element).max:\n                    dataFrame[column] = dataFrame[column].astype(element)\n                    break\n        elif 'object' in columnType:\n            if column =='date':\n                dataFrame['date'] = pd.to_datetime(dataFrame['date'],format='%Y-%m-%d')\n            else:\n                numberOfUnique = len(dataFrame[column].unique())\n                numberOfTotal = len(dataFrame[column])\n                if numberOfUnique \/ numberOfTotal < 0.5:\n                    dataFrame[column] = dataFrame[column].astype('category')\n    endMemoryOptimization = dataFrame.memory_usage().sum() \/ 1024 ** 2\n    print('Memory usage after optimization is: {:.2f} MB'.format(endMemoryOptimization))\n    print('Compressed by: {:.2f} %'.format(100*(startMemoryOptimization - endMemoryOptimization) \/ startMemoryOptimization))\n    \n    return dataFrame","8ef99fbf":"def basicSummary(dataFrameForSummary):\n    print(f'Shape : {dataFrameForSummary.shape}')\n    summary = pd.DataFrame(dataFrameForSummary.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of Nulls'] = dataFrameForSummary.isnull().sum().values\n    summary['Num of Unique'] = dataFrameForSummary.nunique().values\n    summary['First Value'] = dataFrameForSummary.loc[0].values\n    summary['Second Value'] = dataFrameForSummary.loc[1].values\n    summary['Third Value'] = dataFrameForSummary.loc[2].values\n    summary['Fourth Value'] = dataFrameForSummary.loc[3].values\n    summary['Fifth Value'] = dataFrameForSummary.loc[4].values\n    return summary","ea7c6795":"medalsData = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Medals.xlsx')\ndowncastMemoryUsage(medalsData)\nbasicSummary(medalsData)","bd93fe74":"medalsByTop10CountryDataFrame = pd.DataFrame(medalsData.value_counts(), columns=['count'])\nmedalsByTop10CountryDataFrame.reset_index(inplace=True)\n\n\n# Total Medals\nmedalsByTop10Country = medalsByTop10CountryDataFrame.sort_values(by=['Total'],ascending=False)\nmedalsByTop10CountryTop10 = medalsByTop10Country.head(10)\n\n\nmedalsForEveryCountry = medalsData\nseriesMedalsForEveryCountry = medalsForEveryCountry.groupby('Team\/NOC')['Total'].sum().sort_values(ascending=False)\n\ncountryLabels = []\ncountryValues = []\ntop10CountryCount = 10\notherCountryCount = 0\nfor c in seriesMedalsForEveryCountry.index:\n    if top10CountryCount > 0:\n        countryLabels.append(c)\n        countryValues.append(seriesMedalsForEveryCountry[c])\n        top10CountryCount -= 1\n    else:\n        otherCountryCount += seriesMedalsForEveryCountry[c]\ncountryLabels.append(\"Other\")\ncountryValues.append(otherCountryCount)\n\n# Gold Medals\nmedalsByTop10CountryGold = medalsByTop10CountryDataFrame.sort_values(by=['Gold'],ascending=False)\nmedalsByTop10CountryTop10Glod = medalsByTop10CountryGold.head(10)\n\nseriesMedalsForEveryCountryGold = medalsForEveryCountry.groupby('Team\/NOC')['Gold'].sum().sort_values(ascending=False)\n\ncountryLabelsGold = []\ncountryValuesGold = []\ntop10CountryCountGold = 10\notherCountryCountGold = 0\nfor c in seriesMedalsForEveryCountryGold.index:\n    if top10CountryCountGold > 0:\n        countryLabelsGold.append(c)\n        countryValuesGold.append(seriesMedalsForEveryCountryGold[c])\n        top10CountryCountGold -= 1\n    else:\n        otherCountryCountGold += seriesMedalsForEveryCountryGold[c]\ncountryLabelsGold.append(\"Other\")\ncountryValuesGold.append(otherCountryCountGold)\n\n\n# Silver Medals\nmedalsByTop10CountrySilver = medalsByTop10CountryDataFrame.sort_values(by=['Silver'],ascending=False)\nmedalsByTop10CountryTop10Silver = medalsByTop10CountrySilver.head(10)\n\nseriesMedalsForEveryCountrySilver = medalsForEveryCountry.groupby('Team\/NOC')['Silver'].sum().sort_values(ascending=False)\n\ncountryLabelsSilver = []\ncountryValuesSilver = []\ntop10CountryCountSilver = 10\notherCountryCountSilver = 0\nfor c in seriesMedalsForEveryCountrySilver.index:\n    if top10CountryCountSilver > 0:\n        countryLabelsSilver.append(c)\n        countryValuesSilver.append(seriesMedalsForEveryCountrySilver[c])\n        top10CountryCountSilver -= 1\n    else:\n        otherCountryCountSilver += seriesMedalsForEveryCountrySilver[c]\ncountryLabelsSilver.append(\"Other\")\ncountryValuesSilver.append(otherCountryCountSilver)\n\n\n# Bronze Medals\nmedalsByTop10CountryBronze = medalsByTop10CountryDataFrame.sort_values(by=['Bronze'],ascending=False)\nmedalsByTop10CountryTop10Bronze = medalsByTop10CountryBronze.head(10)\n\nseriesMedalsForEveryCountryBronze = medalsForEveryCountry.groupby('Team\/NOC')['Bronze'].sum().sort_values(ascending=False)\n\ncountryLabelsBronze = []\ncountryValuesBronze = []\ntop10CountryCountBronze = 10\notherCountryCountBronze = 0\nfor c in seriesMedalsForEveryCountryBronze.index:\n    if top10CountryCountBronze > 0:\n        countryLabelsBronze.append(c)\n        countryValuesBronze.append(seriesMedalsForEveryCountryBronze[c])\n        top10CountryCountBronze -= 1\n    else:\n        otherCountryCountBronze += seriesMedalsForEveryCountryBronze[c]\ncountryLabelsBronze.append(\"Other\")\ncountryValuesBronze.append(otherCountryCountBronze)\n\n# Map Plotting\nnewMedalsData=pd.Series(medalsData['Total'].values,medalsData['Team\/NOC'].values)\n\n\n\nidx={\n    \"ROC\": \"Russia\",\n    \"People's Republic of China\": \"China\",\n    \"Islamic Republic of Iran\":\"Iran\",\n    \"United Republic of Tanzania\":\"Tanzania\"\n}\n\nnewMedalsData=newMedalsData.rename(index=idx)","ef38c85c":"sns.set_style(\"darkgrid\")\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 3, box.height * 2])\np1 = plt.bar(medalsByTop10CountryTop10['Team\/NOC'],medalsByTop10CountryTop10['Gold'],color='#FFD700',edgecolor='black')\np2 = plt.bar(medalsByTop10CountryTop10['Team\/NOC'],medalsByTop10CountryTop10['Silver'], bottom=medalsByTop10CountryTop10['Gold'],color='#C0C0C0',edgecolor='black')\np3 = plt.bar(medalsByTop10CountryTop10['Team\/NOC'],medalsByTop10CountryTop10['Bronze'], bottom=medalsByTop10CountryTop10['Gold']+medalsByTop10CountryTop10['Silver'],color='#b08d57',edgecolor='black')\nplt.legend([\"Gold\",\"Silver\",\"Bronze\"])\nlenth=range(len(medalsByTop10CountryTop10))\nplt.xticks(lenth,medalsByTop10CountryTop10['Team\/NOC'], fontsize=16,rotation=90)\nplt.title(\"Top 10 countries by number of medals\", fontsize=16)\nfor r1,r2,r3 in zip(p1,p2,p3):\n    h1 = r1.get_height()\n    h2 = r2.get_height()\n    h3 = r3.get_height()\n    plt.text(r1.get_x()+r1.get_width()\/2., h1+h2+h3, '%s'% (h1+h2+h3), ha = 'center', va='bottom',color='black', size=15)\nfor r1 in p1:\n    h1 = r1.get_height()\n    plt.text(r1.get_x()+r1.get_width()\/2,h1\/2, '%s'% (h1), ha = 'center',color='black',va='top', size=15)\nplt.show()","5402c71c":"# Plot Bar graph for Top-10 \nsns.set_style(\"dark\")\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 3, box.height * 2])\ncolors = sns.color_palette('pastel')\nsns.barplot(x='Team\/NOC', y='Total', data=medalsByTop10CountryTop10,\n            order=medalsByTop10CountryTop10['Team\/NOC'].value_counts().index[::1], lw=2, ec='black', hatch='\/',\n            ax=ax,palette=colors)\nplt.xticks(rotation = 90, fontsize=18)\nplt.title(\"Countries with the most Medals in Olympics 2021 (Top- 10)\"\n          ,fontweight=\"bold\", fontsize=22, pad=21)\nfor p in ax.patches:\n    ax.annotate(f'\\n{p.get_height():,.0f}', (p.get_x() + 0.4, p.get_height() + 1), ha='center', color='black', size=15)\nplt.show()","d69e9354":"#create pie chart\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 5, box.height * 3])\ncolors = sns.color_palette('pastel')\nexplode = (0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)\nplt.pie(countryValues,labels=countryLabels, colors = colors, autopct='%.0f%%',\n        explode = explode, shadow=True,startangle=10, textprops={'fontweight': 'semibold', 'fontsize': 15},\n        wedgeprops={'linewidth': 2, 'edgecolor': 'k'}, labeldistance=1.1)\nplt.title(\"Countires Achieving Total Medals in 2021 Olympics.\"\n          ,fontweight=\"bold\", fontsize=30, pad=21)\nplt.axis('equal')\nplt.show()","1da6c650":"# Plot Bar graph for Top-10 \nsns.set_style(\"dark\")\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 3, box.height * 2])\ncolors = sns.color_palette('pastel')\nsns.barplot(x='Team\/NOC', y='Gold', data=medalsByTop10CountryTop10Glod,\n            order=medalsByTop10CountryTop10Glod['Team\/NOC'].value_counts().index[::1], lw=2, ec='black', hatch='\/',\n            ax=ax,palette=colors)\nplt.xticks(rotation = 90, fontsize=18)\nplt.title(\"Countries with the Most  Gold Medals in Olympics 2021 (Top- 10)\"\n          ,fontweight=\"bold\", fontsize=22, pad=21)\nfor p in ax.patches:\n    ax.annotate(f'\\n{p.get_height():,.0f}', (p.get_x() + 0.4, p.get_height() + 0.5), ha='center', color='black', size=15)\nplt.show()","fca367af":"#create pie chart\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 5, box.height * 3])\ncolors = sns.color_palette('pastel')\nexplode = (0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)\nplt.pie(countryValuesGold,labels=countryLabelsGold, colors = colors, autopct='%.0f%%',\n        explode = explode, shadow=True,startangle=10, textprops={'fontweight': 'semibold', 'fontsize': 15},\n        wedgeprops={'linewidth': 2, 'edgecolor': 'k'}, labeldistance=1.1)\nplt.title(\"Countires Achieving Total Gold Medals in 2021 Olympics.\"\n          ,fontweight=\"bold\", fontsize=30, pad=21)\nplt.axis('equal')\nplt.show()","8dd1d2f2":"# Plot Bar graph for Top-10\nsns.set_style(\"dark\")\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 3, box.height * 2])\ncolors = sns.color_palette('pastel')\nsns.barplot(x='Team\/NOC', y='Silver', data=medalsByTop10CountryTop10Silver,\n            order=medalsByTop10CountryTop10Silver['Team\/NOC'].value_counts().index[::1], lw=2, ec='black', hatch='\/',\n            ax=ax,palette=colors)\nplt.xticks(rotation = 90, fontsize=18)\nplt.title(\"Countries with the Most  Silver Medals in Olympics 2021 (Top- 10)\"\n          ,fontweight=\"bold\", fontsize=22, pad=21)\nfor p in ax.patches:\n    ax.annotate(f'\\n{p.get_height():,.0f}', (p.get_x() + 0.4, p.get_height() + 0.5), ha='center', color='black', size=15)\nplt.show()","9f0d28f6":"#create pie chart\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 5, box.height * 3])\ncolors = sns.color_palette('pastel')\nexplode = (0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)\nplt.pie(countryValuesSilver,labels=countryLabelsSilver, colors = colors, autopct='%.0f%%',\n        explode = explode, shadow=True,startangle=10, textprops={'fontweight': 'semibold', 'fontsize': 15},\n        wedgeprops={'linewidth': 2, 'edgecolor': 'k'}, labeldistance=1.1)\nplt.title(\"Countires Achieving Total Silver Medals in 2021 Olympics.\"\n          ,fontweight=\"bold\", fontsize=30, pad=21)\nplt.axis('equal')\nplt.show()","36eca61b":"# Plot Bar graph for Top-10 \nsns.set_style(\"dark\")\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 3, box.height * 2])\ncolors = sns.color_palette('pastel')\nsns.barplot(x='Team\/NOC', y='Bronze', data=medalsByTop10CountryTop10Bronze,\n            order=medalsByTop10CountryTop10Bronze['Team\/NOC'].value_counts().index[::1], lw=2, ec='black', hatch='\/',\n            ax=ax,palette=colors)\nplt.xticks(rotation = 90, fontsize=18)\nplt.title(\"Countries with the Most  Bronze Medals in Olympics 2021 (Top- 10)\"\n          ,fontweight=\"bold\", fontsize=22, pad=21)\nfor p in ax.patches:\n    ax.annotate(f'\\n{p.get_height():,.0f}', (p.get_x() + 0.4, p.get_height() + 0.5), ha='center', color='black', size=15)\nplt.show()","18902956":"#create pie chart\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 5, box.height * 3])\ncolors = sns.color_palette('pastel')\nexplode = (0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)\nplt.pie(countryValuesBronze,labels=countryLabelsBronze, colors = colors, autopct='%.0f%%',\n        explode = explode, shadow=True,startangle=10, textprops={'fontweight': 'semibold', 'fontsize': 15},\n        wedgeprops={'linewidth': 2, 'edgecolor': 'k'}, labeldistance=1.1)\nplt.title(\"Countires Achieving Total Bronze Medals in 2021 Olympics.\"\n          ,fontweight=\"bold\", fontsize=30, pad=21)\nplt.axis('equal')\nplt.show()","7d09b796":"worldMap = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\nworldMap = worldMap[worldMap.name!=\"Antarctica\"]\nworldMap['medals']=0\n\nfor i,j in newMedalsData.items():\n    worldMap.loc[worldMap.name==i,'medals']=j\n    \nsns.set_style(\"dark\")    \nfig, ax = plt.subplots(figsize=(22,10))\nworldMap.plot(column='medals',ax=ax, legend=True,\n                            edgecolor=\"black\", legend_kwds={\"label\":\"Athletes Represnting Respective Countries\"},\n                            cmap='Pastel2',missing_kwds={\"color\":\"white\"})\nplt.title(\"Medals Won By Respective Country\", fontweight=\"bold\",fontsize = 30,pad=21)\nplt.tick_params(left=False, labelleft=False, which='both', bottom=False, top=False, labelbottom=False)","2c1c998f":"medalDataFrameInteractive = medalsData[\n    ['Rank', 'Team\/NOC', 'Gold', 'Silver', 'Bronze', 'Total']]\nmedals = medalDataFrameInteractive.groupby(['Team\/NOC']).groups.keys()\nmedals = list(medals)\n\nmedalDataFrameInteractive.loc[medalDataFrameInteractive['Team\/NOC'] == medals[0]].sort_values(by='Rank', ascending=False)[\n    ['Rank', 'Team\/NOC', 'Gold', 'Silver', 'Bronze', 'Total']]\n\nmedals_dropdown = widgets.Dropdown(\n    options=medals,\n    value=medals[1],\n    description='Team\/NOC:',\n    disabled=False,\n)\nmedals_columns_dropdown = widgets.Dropdown(\n    options=medalDataFrameInteractive.columns,\n    value=medalDataFrameInteractive.columns[0],\n    description='Sort Column:',\n    disabled=False,\n)\nmedals_sort_checkbox = widgets.Checkbox(\n    value=False,\n    description='Ascending?',\n    disabled=False\n)\nmedals_columns_selectmultiple = widgets.SelectMultiple(\n    options=medalDataFrameInteractive.columns,\n    value=['Rank','Team\/NOC', 'Gold', 'Silver', 'Bronze', 'Total'],\n    rows=6,\n    description='Show:',\n    disabled=False\n)\n\nout = widgets.Output(layout={'border': '1px solid black'})\n\nbox = widgets.VBox([medals_dropdown, medals_columns_dropdown, medals_sort_checkbox, medals_columns_selectmultiple])\n\nseason_report_output = widgets.Output()\npd.set_option(\"max_rows\", None)\ndisplay(season_report_output)\n\n\ndef game_filter_function(medal, sort_column, sort_ascending, view_columns):\n    filtered = medalDataFrameInteractive.loc[medalDataFrameInteractive['Team\/NOC'] == medal].sort_values(by=sort_column,\n                                                                                                       ascending=sort_ascending)[\n        list(view_columns)]\n    with season_report_output:\n        season_report_output.clear_output()\n        display(filtered)\n\n\ninteractive(game_filter_function, medal=medals_dropdown, sort_column=medals_columns_dropdown,\n            sort_ascending=medals_sort_checkbox, view_columns=medals_columns_selectmultiple)","3e9ad05d":"athleteData = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Athletes.xlsx')\ndowncastMemoryUsage(athleteData)\nbasicSummary(athleteData)","b16295a4":"athleteData['Name'] = athleteData['Name'].str.lower()\nathleteData.drop_duplicates(subset=['Name'],keep='first',inplace=True)\nremovedDuplicatesAthleteData = pd.DataFrame(athleteData.value_counts(), columns=['count'])\nremovedDuplicatesAthleteData.reset_index(inplace=True)\nbasicSummary(removedDuplicatesAthleteData)","d6ad41f5":"athletesByCountries = removedDuplicatesAthleteData.groupby(\"NOC\").count().reset_index()\nathletesByCountries = athletesByCountries.rename(columns = {\"Name\":\"No. Athletes\"}).sort_values(by = 'No. Athletes', ascending = False)\nathletesByCountries.drop(columns = ['Discipline','count'], inplace=True)\n\n# Change some contries names for Map Ploting\nathletesByCountries['NOC'] = athletesByCountries['NOC'].replace('ROC', 'Russia')\nathletesByCountries['NOC'] = athletesByCountries['NOC'].replace(\"People's Republic of China\", 'China')\nathletesByCountries['NOC'] = athletesByCountries['NOC'].replace('Islamic Republic of Iran', 'Iran')\nathletesByCountries['NOC'] = athletesByCountries['NOC'].replace('United Republic of Tanzania', 'Tanzania')\n\n\ndisciplineForEveryCountry = removedDuplicatesAthleteData\nseriesDisciplineForEveryCountry = disciplineForEveryCountry.groupby('NOC')['count'].sum().sort_values(ascending=False)\n\ndisciplineLabels = []\ndisciplineValues = []\ntop10DisciplineCount = 10\notherDisciplineCount = 0\nfor d in seriesDisciplineForEveryCountry.index:\n    if top10DisciplineCount > 0:\n        disciplineLabels.append(d)\n        disciplineValues.append(seriesDisciplineForEveryCountry[d])\n        top10DisciplineCount -= 1\n    else:\n        otherDisciplineCount += seriesDisciplineForEveryCountry[d]\ndisciplineLabels.append(\"Other\")\ndisciplineValues.append(otherCountryCount)","bbcac68d":"worldMap = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\nworldMap = worldMap[worldMap.name!=\"Antarctica\"]\nathletesCountryPlot = worldMap.merge(athletesByCountries, how = 'left', left_on=['name'], right_on=['NOC'])\nsns.set_style(\"dark\")\nathletesCountryPlot.plot(\"No. Athletes\", figsize=(22,10), legend=True,\n                            edgecolor=\"black\", legend_kwds={\"label\":\"Athletes Represnting Respective Countries\"},\n                            cmap='Pastel2',missing_kwds={\"color\":\"white\"})\nplt.title(\"Athletes Represnting Respective Country\", fontweight=\"bold\",fontsize = 30,pad=21)\nplt.tick_params(left=False, labelleft=False, which='both', bottom=False, top=False, labelbottom=False) ","8c347bba":"#create pie chart\nfig = plt.figure()\nax = plt.gca()\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 5, box.height * 3])\ncolors = sns.color_palette('pastel')\nexplode = (0.3,0.1,0.2,0.1,0.2,0.1,0.0,0.1,0.0,0.1,0.0)\nplt.pie(disciplineValues,labels=disciplineLabels, colors = colors, autopct='%.0f%%',\n        explode = explode, shadow=True,startangle=90, textprops={'fontweight': 'semibold', 'fontsize': 15},\n        wedgeprops={'linewidth': 2, 'edgecolor': 'k'}, labeldistance=1.1)\nplt.title(\"Athletes Represented their Countries in 2021 Olympics.\"\n          ,fontweight=\"bold\", fontsize=30, pad=21)\nplt.axis('equal')\nplt.show()","8fbafeee":"count = removedDuplicatesAthleteData.groupby(by = ['NOC','Discipline']).count()\ncount.drop(columns=['Name'],inplace=True)\n#count.rename(columns = {'Name':'count'}, inplace = True)\ncount.reset_index(inplace=True)\nbasicSummary(count)","b0ab8a78":"countryAndTheirSportsDataFrame = count\ncountryAndTheirSports = countryAndTheirSportsDataFrame.groupby(['NOC']).groups.keys()\ncountryAndTheirSports = list(countryAndTheirSports)\n\ncountryAndTheirSportsDataFrame.loc[countryAndTheirSportsDataFrame['NOC'] == countryAndTheirSports[0]].sort_values(by='count', ascending=False)[['NOC', 'Discipline', 'count']]\n\ncountry_dropdown = widgets.Dropdown(\n    options=countryAndTheirSports,\n    value=countryAndTheirSports[0],\n    description='Country Name:',\n    disabled=False,\n)\ncolumns_dropdown = widgets.Dropdown(\n    options=countryAndTheirSportsDataFrame.columns,\n    value=countryAndTheirSportsDataFrame.columns[2],\n    description='Sort Column:',\n    disabled=False,\n)\nsort_checkbox = widgets.Checkbox(\n    value=False,\n    description='Ascending?',\n    disabled=False\n)\ncolumns_selectmultiple = widgets.SelectMultiple(\n    options=countryAndTheirSportsDataFrame.columns,\n    value=['NOC', 'Discipline', 'count'],\n    rows=3,\n    description='Show:',\n    disabled=False\n)\nbutton = widgets.Button(\n    description='Run',\n    disabled=False,\n    button_style='',\n    tooltip='Run report',\n    icon='check'\n)\n\nout = widgets.Output(layout={'border': '1px solid black'})\n\nbox = widgets.VBox([country_dropdown, columns_dropdown, sort_checkbox, columns_selectmultiple, button])\n\nreport_output = widgets.Output()\npd.set_option(\"max_rows\", None)\ndisplay(report_output)\n\n\ndef filter_function(country, sort_column, sort_ascending, view_columns):\n    filtered = countryAndTheirSportsDataFrame.loc[countryAndTheirSportsDataFrame['NOC'] == country].sort_values(by=sort_column, ascending=sort_ascending)[list(view_columns)]\n    with report_output:\n        report_output.clear_output()\n        display(filtered)\n\n\ninteractive(filter_function, country=country_dropdown, sort_column=columns_dropdown,\n            sort_ascending=sort_checkbox, view_columns=columns_selectmultiple)","4e833db8":"<a id=\"0\"><\/a> <br>\n# Importing Libraries","791e46fa":"<a id=\"18\"><\/a><br>\n# Interactive GUI For Athletes","e7401ecf":"<a id=\"9\"><\/a><br>\n# Countries By Gold Medals","eec66855":"<a id=\"7\"><\/a><br>\n# Countries By Total Medals","746d8452":"<a id=\"5\"><\/a><br>\n# Data Preparation","faa0dce1":"<a id=\"8\"><\/a><br>\n# Top 10 Countries By Gold Medals","28c6444d":"<a id=\"11\"><\/a><br>\n# Countries By Silver Medals","5893f087":"<a id=\"6\"><\/a><br>\n# Top 10 Countries By Total Medals","710c421c":"<a id=\"AthletesData\"><\/a> <br>\n# <center>Athletes Data<\/center>\n\n**<p id=\"14\"><li>Importing and Reading Athletes Data<\/li><\/p>**","b94f0f54":"<a id=\"17\"><\/a><br>\n# Athletes By Countries","f657a9b3":"<a id=\"1\"><\/a> <br>\n# Python Library for Reading and Writing Excel Files","d4b2b327":"<a id=\"3\"><\/a><br>\n# Universal Basic Summary Function for Dataframes","e5b8cc0b":"<a id=\"10\"><\/a><br>\n# Top 10 Countries By Silver Medals","823fc52c":"<a id=\"20\"><\/a><br>\n# Medal Summary of Top-10 Country","7e2a6d8b":"<a id=\"TOC\"><\/a> <br>\n# <center>Table of Contents<\/center>\n\n* [Importing Libraries](#0)\n* [Python Library for Reading and Writing Excel Files](#1)\n* [Universal Downcasting Function for Dataframes](#2)\n* [Universal Basic Summary Function for Dataframes](#3)\n\n<h4>Medal Data<\/h4>\n\n* [Importing and Reading Medal Data](#4)\n* [Data Preparation](#5)\n* [Medal Summary of Top-10 Country](#20)\n* [Top 10 Countries by Total Medals](#6)\n* [Country by Total Medals](#7)\n* [Top 10 Countries by Gold Medals](#8)\n* [Country by Gold Medals](#9)\n* [Top 10 Countries by Silver Medals](#10)\n* [Country by Silver Medals](#11)\n* [Top 10 Countries by Bronze Medals](#12)\n* [Country by Bronze Medals](#13)\n* [Medals On Map](#21)\n* [Interactive Medal GUI](#22)\n\n<h4>Athletes Data<\/h4>\n\n* [Importing and Reading Athletes Data](#14)\n* [Remove Duplicates](#15)\n* [Data Preparation](#16)\n* [Athletes on Map](#19)\n* [Athletes By Countries](#17)\n* [Interactive GUI For Athletes](#18)\n\n<h4>To be Continued....<\/h4>","676f912b":"<a id=\"22\"><\/a><br>\n# Interactive Medal GUI","9d1ae3e7":"<a id=\"19\"><\/a><br>\n# Athletes On Map","cd3f2bed":"<a id=\"16\"><\/a> <br>\n# Data Preparation","bd76e86e":"<a id=\"12\"><\/a><br>\n# Top 10 Countries By Bronze Medals","78c2ba52":"<a id=\"21\"><\/a><br>\n# Medals On Map","8389f38c":"**<p id=\"15\"><li>Remove Duplicates<\/li><\/p>**\n* Example: **ALI Mohamed**, **Bahrain**, **Handball** has **2** Entries","38d5dec5":"<a id=\"2\"><\/a> <br>\n# Universal Downcasting Function for Dataframes\n\n<p><li>For Memory Optimizaton and Utilization.<\/li><\/p>","3d38032a":"# **<center>2021 Tokyo-Olympics-Medals & Athlete-EDA<\/center>**","16558326":"<a id=\"MedalsData\"><\/a> <br>\n# <center>Medals Data<\/center>\n\n**<p id=\"4\"><li>Importing and Reading Medals Data<\/li><\/p>**","9bb80238":"<a id=\"13\"><\/a><br>\n# Countries By Bronze Medals"}}