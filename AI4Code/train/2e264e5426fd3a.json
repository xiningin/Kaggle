{"cell_type":{"d19ac6c6":"code","dd28c196":"code","c5a8667a":"code","a32a2b71":"code","b931da6e":"code","0c72eaad":"code","3ae8a624":"code","f72ab22c":"code","d7c04d0b":"code","08776422":"code","870b7b5c":"code","c9bab60c":"code","ee29cbcf":"code","814697c0":"code","a526503b":"code","2b67e364":"code","9386e9a8":"code","34b5ec53":"code","ac07f956":"code","07a9e626":"code","0e3bff5c":"code","5aa2b3e0":"code","9deb6def":"code","ab203e10":"code","2dec0697":"code","8cf21abe":"code","09e1a128":"markdown","99d8ac20":"markdown","c550e2ae":"markdown","239f7f01":"markdown","8c0163bf":"markdown","d78979fa":"markdown","b05d8469":"markdown","1095411d":"markdown","e033cb81":"markdown","d45e1a08":"markdown","80730a39":"markdown","e6a792e8":"markdown","c27638ee":"markdown","0f3b67e0":"markdown","550ec2d7":"markdown"},"source":{"d19ac6c6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator\n\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","dd28c196":"zomato_data = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')\nzomato_data.head().T","c5a8667a":"print('Number of rows    =',zomato_data.shape[0])\nprint('Number of columns =',zomato_data.shape[1])\n","a32a2b71":"print(\"Checking the info:\\n\")\nprint(zomato_data.info())","b931da6e":"print(\"How many null values are there?\\n\",zomato_data.isnull().sum())","0c72eaad":"print(\"Dropping all the null value data\")\nzomato_data.dropna(how='any',inplace=True)","3ae8a624":"print(\"Checking unique values in the data\\n\")\nprint(zomato_data.nunique())","f72ab22c":"print(\"Changing columns to more meaningful name\")\nzomato_data.columns = ['url', 'address', 'name', 'online_order','book_table', 'rate', 'votes',\n       'phone', 'location', 'rest_type', 'dish_liked', 'cuisines',\n       'avg_cost', 'reviews_list', 'menu_item',\n       'type', 'locality']","d7c04d0b":"print(\"Some columns are uneccessary for us like url,location,phone,menu_item\")\nzomato_data.drop(['url','location','phone',\n                          'menu_item'],inplace=True,axis=1)","08776422":"#changing number  line 1,200 to 1200 for computing\nzomato_data['avg_cost'] = zomato_data['avg_cost'].str.replace(',', '').astype(float)#\n\n#Removing whitespaces\nzomato_data['name'] = zomato_data['name'].str.strip()\nzomato_data['locality'] = zomato_data['locality'].str.strip()\nzomato_data['type'] = zomato_data['type'].str.strip()\nzomato_data['cuisines'] = zomato_data['cuisines'].str.strip()","870b7b5c":"bg_color = (0.25, 0.25, 0.25)\nsns.set(rc={\"font.style\":\"normal\",\n            \"axes.facecolor\":bg_color,\n            \"figure.facecolor\":bg_color,\n            \"text.color\":\"white\",\n            \"xtick.color\":\"white\",\n            \"ytick.color\":\"white\",\n            \"axes.labelcolor\":\"white\",\n            \"axes.grid\":False,\n            'axes.labelsize':25,\n            'figure.figsize':(15.0,15.0),\n            'xtick.labelsize':15,\n            'ytick.labelsize':15})    ","c9bab60c":"cost_for_two = pd.cut(zomato_data['avg_cost'],bins = [0, 200, 500, 1000, 5000, 8000],labels = ['<=200', '<=500', '<=1000', '<=3000', '<=5000',])\nax = sns.countplot(cost_for_two, palette = sns.color_palette('magma', 5))\nplt.title(\"Average Cost for 2 people\",fontsize=15,fontweight='bold')\nplt.yticks([])\nplt.ylabel(\"\")\nplt.xlabel('Cost',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x()+0.25,p.get_height()))","ee29cbcf":"\nsns.countplot(zomato_data['locality'].sort_values(),palette='muted')\nplt.title('Number of Resturants based on locality',fontsize=15,fontweight='bold')\nplt.xticks(rotation=90,fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold')\nplt.xlabel('Locality',fontsize=10,fontweight='bold')\nplt.ylabel('Number of Resturants',fontsize=10,fontweight='bold');\n","814697c0":"sns.countplot(zomato_data['type'].sort_values(),palette='cubehelix')\nplt.title('Restuarant Type',fontsize=15,fontweight='bold')\nplt.xticks(rotation=45,ha='right',fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold')\nplt.ylabel('Number of Resturants',fontsize=10,fontweight='bold')\nplt.xlabel('Restuarant Type',fontsize=10,fontweight='bold');","a526503b":"ax = sns.countplot(x=zomato_data['online_order'],hue=zomato_data['online_order'],palette='Set1')\nplt.title('Online Orders')\n\nplt.ylabel('')\nplt.yticks([])\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + 0.15,p.get_height()),fontsize=10,fontweight='bold')\n\nax.set_xticklabels(['Yes                                 ','                          No']);","2b67e364":"X = zomato_data\nX['rate'] = X['rate'].astype(str)\nX['rate'] = X['rate'].str.strip()\nX['rate'] = X['rate'].apply(lambda x: x.replace('\/5',''))\nX['rate'] = X['rate'].apply(lambda x: x.replace('NEW','0'))\nX['rate'] = X['rate'].astype(float)","9386e9a8":"x = pd.crosstab(zomato_data['rate'],zomato_data['book_table'])\nx.plot(kind='bar',stacked=True)\n\nplt.title('Table Booking - Rating',fontsize=15,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold')\nplt.ylabel('Number of Table Bookings',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold');","34b5ec53":"x = pd.crosstab(zomato_data['rate'],zomato_data['online_order'])\nx.plot(kind='bar',stacked=True);\nplt.title('Online Order - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Number of Online Orders',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');","ac07f956":"x = pd.crosstab(zomato_data['rate'],cost_for_two)\nx.plot(kind='bar',stacked=True);\nplt.title('Avg cost - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Average Cost',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');","07a9e626":"my_mask = np.array(Image.open(\"..\/input\/mymask\/f.jpg\"))\nmy_words=''\n\nmy_dishes = zomato_data[zomato_data['rate']>4]\nfor dishes in my_dishes['dish_liked'].unique():\n    val = str(dishes)\n    tokens = val.split()\n    \n    for words in tokens:\n        my_words = my_words + words +' '\n    \nwc = WordCloud(background_color=\"white\", max_words=100, mask=my_mask,\n               contour_width=3, contour_color='steelblue')\n\nwc.generate(my_words)\nplt.figure()\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","0e3bff5c":"stop_words=set(STOPWORDS)\nmy_words=''\n\nmy_cuisines = zomato_data[zomato_data['rate']>4]\nfor cuisines in my_cuisines['cuisines'].unique():\n    val = str(cuisines)\n    tokens = val.split()\n    \n    for words in tokens:\n        my_words = my_words + words +' '\n\nplt.title(\"Popular Cuisines\",fontsize=35)\n\nwordcloud = WordCloud(width=800,height=800,max_words=50,collocations=False,background_color='white',\n        stopwords= stop_words,contour_width=3, colormap='magma',min_font_size=10).generate(my_words)\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","5aa2b3e0":"my_list = ['North Indian', 'Mughlai', 'Chinese','Thai','Mexican', 'Italian','South Indian','Continental','Rajasthani','BBQ','Afghani','Mediterranean','Konkan','Vietnamese','Hyderabadi','European']         \n\nmy_data = zomato_data.drop(columns=['address','online_order', 'votes','book_table',\n       'rest_type', 'dish_liked', 'avg_cost', 'reviews_list',\n       'type'],axis=1)\n\nmy_data.drop_duplicates(keep='last',inplace=True)\n\nfor l in my_list:\n    print(\"\\nCuisine Type:\\t\",l)\n    \n    temp_data = my_data[(my_data['cuisines'].str.contains(l)) & (my_data['rate'] > 4)]\n    \n    print(temp_data.drop(columns=['cuisines','rate'],axis=1).head(10))","9deb6def":"zomato_data.drop(['address','name','rest_type','dish_liked','cuisines','reviews_list'],axis=1,inplace=True)","ab203e10":"bin_edges = [0.0, 3.0, 4.0, 5.0]\nbin_names = [1, 2, 3]\n\nzomato_data['rest_class'] = pd.cut(zomato_data['rate'], bins=bin_edges, labels=bin_names,include_lowest=True)\n\ny = zomato_data.loc[:,'rest_class']\nX = zomato_data.drop(['rest_class','rate'],axis=1)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nX_train.shape,y_train.shape,X_test.shape,y_test.shape","2dec0697":"from sklearn.preprocessing import LabelEncoder,StandardScaler,OneHotEncoder\n\nsc = StandardScaler()\nle = LabelEncoder()\nohe = OneHotEncoder()\n\ncategorical_col = ['online_order','book_table' ,'type','locality']\ncontinuous_col = ['votes','avg_cost']\n\nscaled_col  =   sc.fit_transform(X_train[continuous_col])\nencoded_col = X_train[categorical_col].apply(le.fit_transform)\n\nX_train_processed    =   np.concatenate([scaled_col,encoded_col],axis=1)\n\nscaled_col  =   sc.fit_transform(X_test[continuous_col])\nencoded_col =  X_test[categorical_col].apply(le.fit_transform)\nX_test_processed     =   np.concatenate([scaled_col,encoded_col],axis=1)\n\ny_train = y_train.values\ny_test = y_test.values\n","8cf21abe":"classifiers = {\n    'Logistic Regression': LogisticRegression(),\n    'Decision Tree': DecisionTreeClassifier(),\n    'Random Forest': RandomForestClassifier(),\n    'Support Vector Classifier': SVC(),\n}\n\nprint(\"Accuracy of different models\\n\")\nfor key, model in classifiers.items():\n    model.fit(X_train_processed, y_train)\n    \n    y_pred_test = model.predict(X_test_processed)\n    acc_test = round(accuracy_score(y_test, y_pred_test) * 100,2)\n    \n    print(str(key) + ' : ' + str(acc_test) + '%')\n","09e1a128":"* More Table Bookings are made for high rated resturant","99d8ac20":"**Plotting Rating Vs Online Ordering**","c550e2ae":"Looks like online order is more for rating between 3.5 to 4.5","239f7f01":"**Loading required libraries**","8c0163bf":"**Classification of resturants with various cuisines and ratings greater than 4 **","d78979fa":"**Plotting Table Booking against Rating**","b05d8469":"**There are more resturants with Delivery options**","1095411d":"**Some data cleaning for rate column**","e033cb81":"**Cleaning up data**","d45e1a08":"**Cloud of popular dishes**","80730a39":"**Cloud of popular cuisines**","e6a792e8":"**Feature Engineering**","c27638ee":"* **Setting up the seaborn plot**","0f3b67e0":"Reading Data","550ec2d7":"**Plotting Rate against Average Cost**"}}