{"cell_type":{"5a7022d6":"code","c3bbfc80":"code","3909c879":"code","d19fd148":"code","f44a1f8b":"code","0b35b007":"code","3376eaca":"code","c1c8bd44":"code","63f347d3":"code","e57fc49c":"code","3a2f0b83":"code","10fa4627":"code","e8bd2146":"code","567cda43":"code","26a2de57":"code","82761d60":"markdown","6fad40f7":"markdown","699660bc":"markdown","798c5003":"markdown","6ebc3a07":"markdown","94c4efa8":"markdown","1e7456e1":"markdown","68d017eb":"markdown","b04e3963":"markdown","371564ed":"markdown","f4808877":"markdown","824653ad":"markdown","8d60cd05":"markdown"},"source":{"5a7022d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3bbfc80":"df = pd.read_csv('\/kaggle\/input\/apple-aapl-historical-stock-data\/HistoricalQuotes.csv')\ndf.Date = pd.to_datetime(df.Date, format='%m\/%d\/%Y')\ndf = df.set_index('Date')\ndf = df.sort_index()\ndf","3909c879":"df.columns","d19fd148":"df['Open'] = df[' Open'].str.replace('$','')\ndf['High'] = df[' High'].str.replace('$','')\ndf['Low'] = df[' Low'].str.replace('$','')\ndf['Close'] = df[' Close\/Last'].str.replace('$','')\ndf['Volume'] = df[' Volume']\ndf = df[['Close','Volume','Open','High','Low']]\ndf","f44a1f8b":"df['Change'] = df.Close.astype('float32').diff()\ndf","0b35b007":"df['RollingMean'] = df.Close.astype('float32').rolling(20).mean()\ndf['RollingDeviation'] = df.Close.astype('float32').rolling(20).std()","3376eaca":"df = df.dropna()\ndf['Upper'] = df.RollingMean + 2 * df.RollingDeviation\ndf['Lower'] = df.RollingMean - 2 * df.RollingDeviation\ndf","c1c8bd44":"df2 = df.loc[(df.index >= '2014-01-01') & (df.index <= '2014-07-01')]\ndf2","63f347d3":"df2.dtypes\ndf2.Close = df2.Close.astype('float32')\ndf2.Open = df2.Open.astype('float32')\ndf2.High = df2.High.astype('float32')\ndf2.Low = df2.Low.astype('float32')\ndf2.dtypes\n","e57fc49c":"plt.plot(df2.Close)\nplt.plot(df2.RollingMean)\nplt.plot(df2.Upper)\nplt.plot(df2.Lower)\nplt.title('Stock Graph')\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.legend(['Close', 'Roling Mean', 'Upper Band', 'Lower Band'])\nplt.fill_between(df2.index, y1 = df2.Lower, y2 = df2.Upper, alpha = 0.1)\nplt.show()","3a2f0b83":"df2['Buy'] = (df2.Close < df2.Lower)\ndf2['Sell'] = (df2.Close > df2.Upper)\ndf2","10fa4627":"df2.loc[df2.Buy == True]","e8bd2146":"df2.loc[df2.Sell == True]","567cda43":"df2.tail(1).Close","26a2de57":"# df2 = df.loc[(df.index >= '2014-01-01') & (df.index <= '2014-07-01')]\n# startDate = '2014-01-01'\n# df.loc[df.index<='2014-01-01'].tail(1).Close\ndf.loc[df.index>='2014-07-01'].head(1).Close","82761d60":"a) You would have made $6687.15","6fad40f7":"b) There are only a few times where there is \"optimal oppurtunity to buy\" so you don't make as much. You buy early, sell two months later, and never buy again. You would only make $290.","699660bc":"(9) Display all of the rows where Sell is true.","798c5003":"(2) Get rid of the $ sign and make each column a number.  \nWe many not use each column for this particular task, but it would be useful in a future ML exercise for prediction.  \nDisplay the df.","6ebc3a07":"(7) One theory of stocks is to buy when the current value is below the lower Bollinger band  \nand sell when the current value is above the upper Bollinger band.  \nThis does get a bit trickier because it is potentially better to buy or sell after the moment  \nthe stock rebounds inside the Bollinger bands, that way you do not buy or sell a stock that is in  \na gigantic freefall or a huge spike, but we will ignore that.  \nCreate a new column called Buy that is true each time the current closing value is lower than the lower band  \nand another column for Sell that is true each time the current closing value is higher than the upper band.  \nDisplay your df.","94c4efa8":"(3) Add a new column representing the daily increase or decrease in the closing value of the stock.  \nFor instance, on the second date, the stock went down by -0.0200.  \nOn the third date, the stock went up by 0.0686.  \nDisplay the df.","1e7456e1":"(8) Display all of the rows where Buy is true.","68d017eb":"(5) Add two new columns, one for the upper and one for the lower Bollinger bands.  \nThe typical Bollinger bands are calculated by adding two standard deviations away from the mean for the upper,  \nand subtracting two standard deviations away from the mean for the lower.  \nRemove all the NaN rows now.  \nDisplay the df.","b04e3963":"(10) Display the final closing value of the last day.","371564ed":"(11) You can calculate this by hand or you can think through the code to automate this task.  \nAutomating the task is ideal, but for this small enough set it will take a lot more time  \nto figure out the logic.  \n  \nHow much money would you have gained or lost in the following two situations:\n\na) You bought 500 shares of Apple on January 1st of 2014 and sold it on July 1st of 2014.\n\nb) You bought 500 shares of Apple the first day your 'buy' column told you to. \nYou sold the 500 shares the next date after that when your 'sell' column told you to. \nYou keep repeating this process, either buying 500 shares or selling the 500 shares you own. \nIn this exercise, you may never have more than 500 shares or less than 0.  \nIf you have 500 shares on July 1st, you will sell it for its closing cost.  \n(Not realistic, just an exercise).","f4808877":"(1)\nRead the data.  \nChange your index to the date column.  \nSort the df by indices. \nDrop the old date column.  \nRename any column you want to make things easier later.  \nDisplay the df.","824653ad":"(4) Add a new column with the rolling mean, use a 20 day window.  \nAlso add a column for the rolling standard deviation with the same 20 day window.  \nDisplay the df.","8d60cd05":"(6) Create a smaller dataframe using only data over a 6 month period from Jan 1, 2014 to July 1, 2014.  \nUse matplotlib to plot the following: Closing Value, Rolling Mean, Upper Bollinger, Lower Bollinger.   \nUse a different color for each plot.  \nUse the function fill_between to color between the Upper\/Lower bands with a green color using alpha of 0.1 so it is see through.  \nShow your plot."}}