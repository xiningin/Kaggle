{"cell_type":{"ade917a7":"code","dc4089db":"code","c00373e7":"code","a02bf1c1":"code","0db5fb87":"code","f56792df":"code","b3dbcd66":"code","2b8fafc0":"code","aa7514e2":"code","02289a89":"code","f01fcfdd":"code","5c75ce9b":"code","5698dae2":"code","7d4fa246":"code","5e54e5f3":"code","fae723f5":"code","2bb1842d":"code","04a17635":"code","291d5f62":"code","077d25a9":"code","1113595a":"code","6f4e9eca":"code","ac69d6a8":"markdown","2fc144bc":"markdown","d087b0ad":"markdown","c45c6539":"markdown","d8566a46":"markdown","77264108":"markdown","ff610cbd":"markdown","8d843991":"markdown","c178461c":"markdown","6b5ac41a":"markdown","cd1d9147":"markdown","2c855e9b":"markdown","6558da7c":"markdown","fd2b18bf":"markdown","8ab35a02":"markdown","05c1ac55":"markdown","bc6e5bb8":"markdown","5396b9d0":"markdown","dba4bcd5":"markdown","70fc9938":"markdown","2d2c51e0":"markdown","13d27a29":"markdown"},"source":{"ade917a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\nimport warnings\nwarnings.simplefilter(\"ignore\")\nfrom scipy.special import boxcox\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly\nimport plotly.plotly as py\nimport plotly.offline as offline\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nfrom plotly.graph_objs import Scatter, Figure, Layout\nfrom plotly import tools\n\n# Any results you write to the current directory are saved as output.","dc4089db":"DIVIDER = '\\n------------------------------------------\\n'\nimport os\nprint(os.listdir(\"..\/input\"))\n","c00373e7":"for csv in os.listdir(\"..\/input\"):\n    df = pd.read_csv('..\/input\/'+csv)\n    print(DIVIDER + csv)\n    df.info()","a02bf1c1":"df_payment = pd.read_csv('..\/input\/olist_public_dataset_v2_payments.csv')\nprint(\"Total unique ID : {}\".format(df_payment.shape[0]-len(df_payment['order_id'].unique())))\n\nprint(DIVIDER)\nduplicates = df_payment.groupby('order_id').count().sort_values(by='installments',ascending=False)['installments']\nprint(\"Top duplicate ID : {}\".format(duplicates.head()))\n\ndf_payment = df_payment.drop_duplicates('order_id',False)","0db5fb87":"df_public = pd.read_csv('..\/input\/olist_public_dataset_v2.csv')\ndf_payment = pd.read_csv('..\/input\/olist_public_dataset_v2_payments.csv')\ndf_translate = pd.read_csv('..\/input\/product_category_name_translation.csv')\n\ndf = pd.merge(df_public,\n                 df_payment[['order_id', 'installments', 'sequential', 'payment_type', 'value']],\n                 on='order_id')\n\ndf = pd.merge(df,\n                 df_translate[['product_category_name', 'product_category_name_english']],\n                 on='product_category_name')\n\nmissing_df = df.isnull().sum()\nfor i in range(len(missing_df)):\n    print(\"Missing rows in {} : {}\".format(missing_df.index[i], missing_df.values[i]))\n\ndf.head()","f56792df":"geo = pd.read_csv(\"..\/input\/geolocation_olist_public_dataset.csv\").sample(n=5000)\n\ndata = [go.Scattermapbox(\n    lon = geo['lng'],\n    lat = geo['lat'],\n    marker = dict(\n        size = 5,\n        color = 'green',\n    ))]\n\nlayout = dict(\n        title = 'Brazilian E-Commerce Geolocation',\n        mapbox = dict(\n            accesstoken = 'pk.eyJ1IjoiaG9vbmtlbmc5MyIsImEiOiJjam43cGhpNng2ZmpxM3JxY3Z4ODl2NWo3In0.SGRvJlToMtgRxw9ZWzPFrA',\n            center= dict(lat=-22,lon=-43),\n            bearing=10,\n            pitch=0,\n            zoom=2,\n        )\n    )\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False)","b3dbcd66":"df_geo = pd.read_csv('..\/input\/geolocation_olist_public_dataset.csv')\n\ndf['customer_state'] = df['customer_state'].apply(lambda x : x.lower())\ndf['customer_city'] = df['customer_city'].apply(lambda x : x.lower())\ngeo_state = df_geo.groupby('state')['lat','lng'].mean().reset_index()\ngeo_state['state'] = geo_state['state'].apply(lambda x : x.lower())\ngeo_city = df_geo.groupby('city')['lat','lng'].mean().reset_index()\ngeo_city['city'] = geo_city['city'].apply(lambda x : x.lower())\ngeo_city.rename(columns={'lat': 'c_lat','lng':'c_lng'}, inplace=True)\n\nmissing_geo = geo_state.isnull().sum()\nfor i in range(len(missing_geo)):\n    print(\"Missing rows in {} : {}\".format(missing_geo.index[i], missing_geo.values[i]))\n\ndf = pd.merge(df, geo_state, how='left', left_on='customer_state',right_on='state')\ndf = pd.merge(df, geo_city,how='left',left_on='customer_city',right_on='city')\n\ndf.head()    ","2b8fafc0":"data = [go.Scattermapbox(\n    lon = geo_state['lng'],\n    lat = geo_state['lat'],\n    text = geo_state['state'],\n    marker = dict(\n        size = 20,\n        color = 'Tomato',\n    ))]\n\nlayout = dict(\n        title = 'Brazil State Recalculate Coordinate',\n        mapbox = dict(\n            accesstoken = 'pk.eyJ1IjoiaG9vbmtlbmc5MyIsImEiOiJjam43cGhpNng2ZmpxM3JxY3Z4ODl2NWo3In0.SGRvJlToMtgRxw9ZWzPFrA',\n            center= dict(lat=-22,lon=-43),\n            bearing=10,\n            pitch=0,\n            zoom=2,\n        )\n    )\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False)","aa7514e2":"data = [go.Scattermapbox(\n    lon = geo_city['c_lng'],\n    lat = geo_city['c_lat'],\n    text = geo_city['city'],\n    marker = dict(\n        size = 2,\n        color = 'Green',\n    ))]\n\nlayout = dict(\n        title = 'Brazil Cities Recalculate Coordinate',\n        mapbox = dict(\n            accesstoken = 'pk.eyJ1IjoiaG9vbmtlbmc5MyIsImEiOiJjam43cGhpNng2ZmpxM3JxY3Z4ODl2NWo3In0.SGRvJlToMtgRxw9ZWzPFrA',\n            center= dict(lat=-22,lon=-43),\n            bearing=10,\n            pitch=0,\n            zoom=2,\n        )\n    )\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False)","02289a89":"df['fare']=df['value']-df['order_products_value']\ndf['extra']=df['fare']-df['order_freight_value']\nprint(\"Orders that paying extra : {}\".format(df[df['extra']>0.1].count()['order_id']))\nprint(\"Orders that paying less : {}\".format(df[df['extra']< -0.1].count()['order_id']))\n","f01fcfdd":"#print(DIVIDER)\noverpaid = df.sort_values(by='extra',ascending=False)[['order_id','extra']].head(30)\n#print(\"Top overpaid orders :\\n {}\".format(overpaid.head()))\n\n#print(DIVIDER)\nunderpaid = df.sort_values(by='extra',ascending=True)[['order_id','extra']].head(30)\n#print(\"Top under orders :\\n {}\".format(underpaid.head()))\n\ntrace0 = go.Bar(\n    y=overpaid['order_id'],\n    x=overpaid['extra'],\n    name='Overpaid amount',\n    marker=dict(color='rgb(49,130,189)'),\n    orientation = 'h'\n)\ntrace1 = go.Bar(\n    y=underpaid['order_id'],\n    x=underpaid['extra'],\n    name='Underpaid amount',\n    marker=dict(color='rgb(204,204,204)'),\n    orientation = 'h'\n)\nfig = tools.make_subplots(rows=2, cols=1, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 2, 1)\n\nfig['layout'].update(height=800, width=1000, title='Number of installments',\n                     legend=dict(orientation=\"h\"))\niplot(fig)","5c75ce9b":"sns.set(style=\"whitegrid\")\nfig = plt.figure(figsize=(5,5))\nsns.boxplot(y=\"extra\", data=df)","5698dae2":"def limit_extra(x):\n    if x>1000:\n        return 1000\n    elif x< -1000:\n        return -1000\n    else:\n        return x\n    \ndf['extra'] = df['extra'].apply(limit_extra)\nsns.boxplot(y=\"extra\", data=df)","7d4fa246":"city_spend = df.groupby(['customer_city','c_lng','c_lat'])['order_products_value'].sum().to_frame().reset_index()\ncity_freight = df.groupby(['customer_city','c_lng','c_lat'])['order_freight_value'].mean().reset_index()\nstate_spend = df.groupby(['customer_state','lng','lat'])['order_products_value'].sum().to_frame().reset_index()\nstate_freight = df.groupby(['customer_state','lng','lat'])['order_freight_value'].mean().reset_index()\nstate_freight['text'] = 'state :' + state_freight['customer_state'] + ' | Freight: ' + state_freight['order_freight_value'].astype(str)\n\ndata = [go.Scattergeo(\n    lon = state_spend['lng'],\n    lat = state_spend['lat'],\n    text = state_freight['text'],\n    marker = dict(\n        size = state_spend['order_products_value']\/3000,\n        sizemin = 5,\n        color= state_freight['order_freight_value'],\n        colorscale= 'Reds',\n        cmin = 20,\n        cmax = 50,\n        line = dict(width=0.1, color='rgb(40,40,40)'),\n        sizemode = 'area'\n    ),\n    name = 'State'),\n    go.Scattergeo(\n    lon = city_spend['c_lng'],\n    lat = city_spend['c_lat'],\n    text = city_freight['order_freight_value'],\n    marker = dict(\n        size = city_spend['order_products_value']\/1000,\n        sizemin = 2,\n        color= city_freight['order_freight_value'],\n        colorscale= 'Blues',\n        reversescale=True,\n        cmin = 0,\n        cmax = 80,\n        #colorscale = 'RdBu',\n        line = dict(width=0.1, color='rgb(40,40,40)'),\n        sizemode = 'area'\n    ),\n    name = 'City')]\n\nlayout = dict(\n        title = 'Brazilian E-commerce Order and Freight Values (Click legend to toggle traces)',\n        showlegend = True,\n        autosize=True,\n        width = 900,\n        height = 600,\n        geo = dict(\n            scope = \"south america\",\n            projection = dict(type='winkel tripel', scale = 1.6),\n            center = dict(lon=-47,lat=-22),\n            showland = True,\n            showcountries= True,\n            showsubunits=True,\n            landcolor = 'rgb(155, 155, 155)',\n            subunitwidth=1,\n            countrywidth=1,\n            subunitcolor=\"rgb(255, 255, 255)\",\n            countrycolor=\"rgb(255, 255, 255)\"\n        )\n    )\n\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False)","5e54e5f3":"df['order_purchase_timestamp'] = pd.to_datetime(df['order_purchase_timestamp'])\ndf['order_aproved_at'] = pd.to_datetime(df['order_aproved_at'])\ndf['order_estimated_delivery_date'] = pd.to_datetime(df['order_estimated_delivery_date'])\ndf['order_delivered_customer_date'] = pd.to_datetime(df['order_delivered_customer_date'])\ndf['delay'] = (df['order_delivered_customer_date'] - df['order_estimated_delivery_date']).dt.total_seconds() \/ (3600 * 24)\ndf['deliver'] = (df['order_delivered_customer_date'] - df['order_aproved_at']).dt.total_seconds() \/ (3600 * 24)\ndf['delay'] = df['delay'].fillna(0)\ndf['deliver'] = df['deliver'].fillna(0)\nprint(df['delay'].sort_values(ascending=False).head())\nsns.kdeplot(df['delay'])\nsns.kdeplot(df['deliver'])","fae723f5":"fig = plt.figure(figsize=(20,10))\nsns.boxplot(x=\"customer_state\", y=\"deliver\", data=df, palette=\"Set3\")","2bb1842d":"fig = plt.figure(figsize=(20,10))\nsns.boxplot(x=\"customer_state\", y=\"delay\", data=df, palette=\"Set3\")","04a17635":"def lim_deliver(x):\n    if x>120:\n        return 120\n    else:\n        return x\ndef lim_delay(x):\n    if x>100:\n        return 100\n    elif x < -100:\n        return -100\n    else:\n        return x\ndf['deliver']=df['deliver'].apply(lambda x :lim_deliver(x))\ndf['delay']=df['delay'].apply(lambda x :lim_delay(x))\n","291d5f62":"fig = plt.figure(figsize=(20,10))\nsns.boxplot(x=\"state\", y=\"delay\", data=df, palette=\"Set3\")\nsns.boxplot(x=\"state\", y=\"deliver\", data=df, palette=\"Set3\")\n","077d25a9":"city_deliver = df.groupby(['city','c_lng','c_lat'])['deliver'].mean().reset_index()\ncity_delay = df.groupby(['city','c_lng','c_lat'])['delay'].mean().reset_index()\nstate_deliver = df.groupby(['state','lng','lat'])['deliver'].mean().reset_index()\nstate_delay = df.groupby(['state','lng','lat'])['delay'].mean().reset_index()\nstate_deliver['text'] = 'Deliver duration: ' + state_deliver['deliver'].astype(str) + '| Delay:' + state_delay['delay'].astype(str)\ncity_deliver['text'] = 'Deliver duration: ' + city_deliver['deliver'].astype(str) + '| Delay:' + city_delay['delay'].astype(str)\n\ndata = [go.Scattergeo(\n    lon = state_deliver['lng'],\n    lat = state_deliver['lat'],\n    text = state_deliver['text'],\n    marker = dict(\n        size = state_deliver['deliver']*20,\n        sizemin = 1,\n        color= state_delay['delay'],\n        colorscale= 'Reds',\n        cmin = -30,\n        cmax = 0,\n        line = dict(width=0.1, color='rgb(40,40,40)'),\n        sizemode = 'area'\n    ),\n    name = 'state'),\n    go.Scattergeo(\n    lon = city_deliver['c_lng'],\n    lat = city_deliver['c_lat'],\n    text = city_deliver['text'],\n    marker = dict(\n        size = (city_deliver['deliver']+3),\n        sizemin = 2,\n        color= city_delay['delay'],\n        colorscale= 'Blues',\n        reversescale=True,\n        cmin = -50,\n        cmax = 50,\n        line = dict(width=0.1, color='rgb(40,40,40)'),\n        sizemode = 'area'\n    ),\n    name = 'city')]\n\nlayout = dict(\n        title = 'Brazilian E-commerce Delivery and Delay (Click legend to toggle traces)',\n        showlegend = True,\n        autosize=True,\n        width = 900,\n        height = 600,\n        geo = dict(\n            scope = \"south america\",\n            projection = dict(type='winkel tripel', scale = 1.6),\n            center = dict(lon=-47,lat=-22),\n            showland = True,\n            showcountries= True,\n            showsubunits=True,\n            landcolor = 'rgb(155, 155, 155)',\n            subunitwidth=1,\n            countrywidth=1,\n            subunitcolor=\"rgb(255, 255, 255)\",\n            countrycolor=\"rgb(255, 255, 255)\"\n        )\n    )\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False)","1113595a":"city_score = df.groupby(['city','c_lng','c_lat'])['review_score'].mean().reset_index()\nstate_score = df.groupby(['state','lng','lat'])['review_score'].mean().apply(lambda x: x-3).reset_index()\nstate_delay = df.groupby(['state','lng','lat'])['delay'].mean().abs().apply(lambda x: x-6).reset_index()\n#print(state_score)\n\nfig,ax = plt.subplots(1,2,figsize=(16,9))\nsns.barplot(x=\"state\", y=\"review_score\", data=state_score, ax=ax[0])\nsns.barplot(x=\"state\", y=\"delay\", data=state_delay, ax=ax[1])\nax[0].set(xlabel='state code', ylabel='(review_score - 3)')\nax[1].set(xlabel='state code', ylabel='(in_advance - 6)')\nfig.show()\n","6f4e9eca":"category_installments = df.groupby('product_category_name_english')['installments'].mean().sort_values(ascending=False).reset_index()\n#print(category_installments)\ntrace1 = go.Bar(\n    y=category_installments['product_category_name_english'],\n    x=category_installments['installments'],\n    name='Underpaid amount',\n    marker=dict(color='rgb(204,204,204)'),\n    orientation = 'h'\n)\nfig = dict(data=[trace1])\niplot(fig)","ac69d6a8":"We successfully merge Public and Payment dataset and there is no missing values for payments columns. \n\nPerfect!!!  Bravo!!!\n\nNext, we going to merge in Geolocation dataset. Before that, let's see how it looks like.","2fc144bc":"## Overview\nCheck the info in all csv files.","d087b0ad":"![Brazil](https:\/\/ak1.picdn.net\/shutterstock\/videos\/6454391\/thumb\/3.jpg)","c45c6539":"# Hi, Welcome to my kernel.\n\n## Introduction\nThis is a Brazilian E-commerce dataset provided by Olist. It contains 5 dataset which include geolocation, public, classified, payments and customers. In this kernel, we will focus on 3 dataset which are **geolocation, public and payments** and we will analyze them geographically.  \n\n### Let's get started!!!","d8566a46":"## Datasets","77264108":" Now, it's time to see which states and which cities purchase the most and pay for higher freight charge. \n ### You can click on legend (States\/City) to toggle the traces","ff610cbd":"Here's the result. We can see that they took 0 to 30 days to deliver parcel. Hmm... it's very slow delivery compare to other countries. But, one good thing is they used to delivered the order in advanced (negative numbers) of estimated date, which is a good strategy to give good impression on delivery service. Maybe we could remove the outliers too. Let's see.","8d843991":"## 4. Delivery and Review Score\nFrom the results we get just now, I'm now curious about the review score in different area of Brazil. Will the rural area give better score due to less delay? \n\nLet's check it out.","c178461c":"## 3. Delivery and Delay\nIn this section, we going to evaluate how e-commerce delivery service in Brazil geographically. First of all, let's see how long they use to deliver for customer order and normally how long they used to delay for it.","6b5ac41a":"### Discuss\nWe can see that the urban area which near the east coast and south of Brazil has more order in total and they pay less in freight. In contrast, rural area which focus on north, middle and west of Brazil having less order and they have to pay more for freight.\n\nMaybe... high freight charge rate is cause of low orders amount or inverse. Again, another chicken and egg situation.","cd1d9147":"Again, I'm suprised when I saw this number.\n\nSomeone overpaid more than 2000? and someone underpaid more than 3000? That's something wrong but most of the data (~80%) is normal. Maybe we can ignore it or we should remove this outliers?","2c855e9b":"## Merging Public, Geolocation and Payment dataset\n* Step 1: **Remove Duplicates order_id**\n* Step 2: **Merge**\n* Step 3 : **Verify** ","6558da7c":"We remove outliers for amount larger than 1000 or lower than -1000.","fd2b18bf":"Yes! We did it. We have merge all there Public, Payments and Geolocation dataset!\n\n## 2. Payment\nWe will start with payments. In this merge dataset there are three payments related values, **order_values, freight_value and value(payment)**. We assume that the total amount of payment should be equal to sum of order_value and freight_value. Let's verify...","8ab35a02":"### WHAT?!!!\nThere are total 14514 orders that overpaid? 8298 orders that underpaid? It just doesn't make sense.\n\nLet's look at the amount of overpaid and underpaid.","05c1ac55":"## 1. Overview & Preprocessing","bc6e5bb8":"### Discussion\n* As expected, urban area such as east coast and south used much lesser time for deliver. However, they did not get their delivery in advanced much compare to rural area.\n* Suprisingly, although rural area take longer time to deliver, but they do get their order in advanced compare to urban area.","5396b9d0":"Seems like most of the customer spread on east coast of Brazil especially at south areas.\n\nHere's come a problem. How we merge this geolocation data into our Public + Payment dataset? There is no order_id here BUT there are ** states and cities ** which we could also find in Public + Payment dataset. \n\nLet's find a location in longtitude and latitude for each state and city!\n\n","dba4bcd5":"# To be continued.... \n# If you like it, please give a thumb up! Thanks for support!","70fc9938":"Wow! It's true. Customer really giving better review score as they get their order in advanced! If we compare two graph above we can easily see the relation between them!","2d2c51e0":"Done. Let's continue with **MAP**! \n\nAgain, click the legend to toggle in between states and cities analysis.","13d27a29":"Why we focus only on** Public, Geolocation and Payment?** Because they are highy correlated and all of them have same column **order_id**. Seems like we can merge them together. Let's do it."}}