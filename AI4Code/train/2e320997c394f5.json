{"cell_type":{"0a9dfadd":"code","bbe4a2ef":"code","c24bf740":"code","7159e193":"code","6cb04690":"code","1ed75455":"code","a738ec65":"code","da342805":"code","1d82eb03":"code","68f75897":"code","29411059":"code","d3ee0770":"code","ec0d802e":"code","7617fca6":"code","13c72745":"code","40bd4456":"code","0b0b2dcf":"code","74f26cd9":"code","f94927f9":"code","4901e701":"code","d9c5f9f3":"code","1f655a38":"code","3d70cbe9":"code","9b37f611":"code","daaddb1f":"code","b4a9107a":"code","e5d78bce":"code","74ed9f9b":"code","605fa1f6":"code","9c88cb8c":"code","72278882":"code","d5473b95":"code","7f32037c":"code","d072ceea":"code","493cb83d":"markdown","1d717d84":"markdown","4709d591":"markdown","3a617d0c":"markdown","1013b878":"markdown"},"source":{"0a9dfadd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder","bbe4a2ef":"train_data = pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv')\ntest_data = pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv')\ntest_data.head()","c24bf740":"drop_columns = ['tracking_id','datetime']\nsubmission = test_data[drop_columns]\ntrain_data.drop(drop_columns,inplace=True,axis=1)\ntest_data.drop(drop_columns,inplace=True,axis=1)","7159e193":"train_data.isna().sum() \/ len(train_data) * 100","6cb04690":"train_data.dtypes","1ed75455":"train_data.loc[:,train_data.dtypes == 'object'].nunique()","a738ec65":"print(train_data['turbine_status'].value_counts(),'\\n'*3,\ntrain_data['cloud_level'].value_counts())","da342805":"continous_cols = train_data.dtypes[train_data.dtypes != 'object'].index\ncontinous_cols_test = test_data.dtypes[test_data.dtypes != 'object'].index\n(continous_cols)","1d82eb03":"for col in continous_cols:\n    train_data[col] = train_data[col].fillna(train_data[col].mean())\nfor col in continous_cols_test:\n    test_data[col] = test_data[col].fillna(test_data[col].mean())","68f75897":"train_data['cloud_level'].value_counts()\ntrain_data['cloud_level'].fillna('Low',inplace = True)","29411059":"train_data['turbine_status'].value_counts()\ntrain_data['turbine_status'].fillna('BB',inplace = True)\n","d3ee0770":"test_data['cloud_level'].value_counts()\ntest_data['cloud_level'].fillna('Low',inplace = True)","ec0d802e":"test_data['turbine_status'].value_counts()\ntest_data['turbine_status'].fillna('BB',inplace = True)\n","7617fca6":"test_data.isna().sum() \/ len(test_data) * 100","13c72745":"train_data.describe()","40bd4456":"test_data.describe()","0b0b2dcf":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nfor col in continous_cols:\n    train_data[col] = sc.fit_transform(train_data[col].values.reshape(-1,1))\n    if(col == 'windmill_generated_power(kW\/h)'):\n        continue\n    test_data[col] = sc.transform(test_data[col].values.reshape(-1,1))","74f26cd9":"train_data.describe()","f94927f9":"test_data.describe()","4901e701":"label_enc = LabelEncoder()\ntrain_data['cloud_level'] = label_enc.fit_transform(train_data['cloud_level'])\ntrain_data['cloud_level'].value_counts()\ntest_data['cloud_level'] = label_enc.fit_transform(test_data['cloud_level'])\ntest_data['cloud_level'].value_counts()","d9c5f9f3":"train_data['cloud_level'] = train_data['cloud_level'].apply(lambda x:  x + 1)\ntest_data['cloud_level'] = test_data['cloud_level'].apply(lambda x:  x + 1)\ntrain_data['cloud_level']\ntrain_data['cloud_level'].value_counts()","1f655a38":"enc = pd.get_dummies(train_data['turbine_status'])\ntrain_data.drop('turbine_status',axis = 1,inplace = True)\ntrain_data = train_data.join(enc)","3d70cbe9":"enc = pd.get_dummies(test_data['turbine_status'])\ntest_data.drop('turbine_status',axis = 1,inplace = True)\ntest_data = test_data.join(enc)","9b37f611":"x = train_data.drop(['windmill_generated_power(kW\/h)'],axis = 1)\ny = train_data['windmill_generated_power(kW\/h)']","daaddb1f":"from sklearn.model_selection import cross_val_score,ShuffleSplit,GridSearchCV\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor,StackingRegressor,AdaBoostRegressor,GradientBoostingRegressor,BaggingRegressor,VotingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.neural_network import MLPRegressor","b4a9107a":"def cross_val_calc(x,y,model):\n    cv = ShuffleSplit(n_splits = 10, random_state= 42)\n    return cross_val_score(model,x,y,scoring='r2',cv = cv,n_jobs = -1,error_score='raise')","e5d78bce":"models = [\nLinearRegression(),\nRidge(),\nLasso(),\nDecisionTreeRegressor(),\nLinearSVR(),\nVotingRegressor(estimators=[('dtree', DecisionTreeRegressor()), ('lr', LinearRegression()),('svr',LinearSVR())]),\nStackingRegressor(estimators = [('dtree', DecisionTreeRegressor()),('lr',LinearRegression())],final_estimator = LinearSVR(),cv = 10),\nBaggingRegressor(LinearSVR(),random_state = 42),\nRandomForestRegressor(),\nAdaBoostRegressor(),\nGradientBoostingRegressor(),\nXGBRegressor(), \nMLPRegressor()\n] #we can add more models here\n\n\nbest_score = -(10e7+8)\nbest_model = models[0]\n\nfor model in models:\n    score = (cross_val_calc(x,y,model).mean() * 100)\n    print('Model: %s \\nScore: %f \\n' % (model, score))\n    if(score > best_score):\n        best_score = score\n        best_model = model","74ed9f9b":"print('Best Model: %s \\n\\nBest Score: %f \\n' % (best_model, best_score))","605fa1f6":"# param_grid = {\n#     'n_estimators': [100,200,300], \n#     'max_depth': [9, 11, 13],    \n#     'criterion': ['mse','mae']\n# }\n# gscv = GridSearchCV(RandomForestRegressor(random_state = 0),param_grid = param_grid, cv = 7,scoring = 'r2')\n# gscv.fit(x,y)\n# gscv.best_params_","9c88cb8c":"best_model = RandomForestRegressor(n_estimators = 20,max_depth = 9,criterion = 'mse',random_state = 42)\nbest_model.fit(x,y)","72278882":"predictions = best_model.predict(test_data)\npredictions","d5473b95":"r2_score(y,best_model.predict(x)) * 100","7f32037c":"submission = submission.join(pd.DataFrame(predictions))\ntarget = 'windmill_generated_power(kW\/h)'\nsubmission[target] = submission[0]\nsubmission.drop([0],inplace = True,axis = 1)\nsubmission","d072ceea":"submission.to_csv('submission.csv',header = True,index = False)","493cb83d":"### Predictive Modeling","1d717d84":"#### Standardizing the data","4709d591":"### Hyper-parameter tuning","3a617d0c":"### Data Pre-processing","1013b878":"### Creating the submission file"}}