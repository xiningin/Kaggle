{"cell_type":{"e8017706":"code","5a08a386":"code","e37634f3":"code","f35a7ab5":"code","4e52843b":"code","f7fb0c02":"code","3259d46a":"code","de8a0192":"code","c781a832":"code","ed3f56ab":"code","def9bba6":"code","568cc0e0":"code","b643ef32":"code","e8f0bf3b":"code","fd5f7e08":"code","9110028f":"code","0543253d":"code","268d62e4":"code","36eec1b0":"code","95770bf7":"code","f3dfd39e":"code","1ae10904":"code","bad1d48e":"code","5baafea5":"code","445ac0b1":"code","3208fded":"code","cdae0b42":"code","7e4f5d34":"code","3c1b6ea5":"code","1d7a0266":"code","8a4cdf05":"code","dee4eb55":"code","3e40ed53":"code","8175ff82":"code","d3b00789":"code","a6701b77":"code","d2497d51":"code","347028ed":"code","2c19f1f7":"code","363da651":"code","055f3a04":"code","5af67ad8":"code","eae3a76d":"code","8f90f9b1":"code","6cc2ab45":"code","212d8e53":"code","0d28b806":"code","be80f61f":"code","94f1f4b2":"code","99ad1c58":"code","9e0ba8d5":"code","e8f41b4b":"code","bb34fa97":"code","e79f4a58":"code","2f4c8ffd":"code","3d375a1f":"code","24693834":"code","a1328eb8":"markdown","260122db":"markdown","63b15c67":"markdown","ab176ec3":"markdown","81f305d9":"markdown","4b6dee91":"markdown","58995af4":"markdown","3f4b1c0c":"markdown","1f84c949":"markdown","cf324d23":"markdown","6786b0ec":"markdown","7afcc129":"markdown","e8019f90":"markdown"},"source":{"e8017706":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a08a386":"df = pd.read_csv('\/kaggle\/input\/cev-eurovolley-womens-player-stats\/all_data.csv', header=[0, 1], index_col=0)\ndf.head(10)","e37634f3":"setters = df[df['Role']['Unnamed: 1_level_1'] == 'Setter']\nsetters.head(5)","f35a7ab5":"# get the setters played at least 20 sets\nsetters = setters[setters['Played']['Sets'] >= 20]\nsetters","4e52843b":"setters['Attack', 'Points Per Set'] = setters['Attack', 'Total Points'] \/ setters['Played', 'Sets']","f7fb0c02":"# these have the highest attack points per set!\nsetters['Attack'].sort_values(by='Points Per Set', ascending=False).head(5)","3259d46a":"# these have the highest block points per set!\nsetters['Block'].sort_values(by='Points per Set', ascending=False).head(5)","de8a0192":"# get these setters names\ntop_attackers = setters['Attack'].sort_values(by='Points Per Set', ascending=False).head(5).index","c781a832":"setters.loc[top_attackers]","ed3f56ab":"import matplotlib.pyplot as plt","def9bba6":"# lets see if theres a relationship between ace per set and attack points per set\n# in order to do this first plot these 2 column as graph\nace_per_set = setters['Serve', 'Ace per Set']\nattack_points_per_set = setters['Attack', 'Points Per Set']\n\nfig , ax1 = plt.subplots(figsize=(12, 6))\n\nax2 = ax1.twinx()\nax1.bar(ace_per_set.index, ace_per_set.values)\nax2.plot(attack_points_per_set.index, attack_points_per_set.values, color='red')\n\nax1.set_xlabel('Player Name')\nax1.set_ylabel('Ace Per Set', color='blue')\nax2.set_ylabel('Attack Points Per Set', color='red')\nax1.set_xticklabels(ace_per_set.index, rotation='vertical')\nfig.show()\n","568cc0e0":"# lets try to see correlation\nnp.corrcoef(ace_per_set.values, attack_points_per_set.values)[0][1]","b643ef32":"block_points_per_set = setters['Block', 'Points per Set']\nattack_points_per_set = setters['Attack', 'Points Per Set']\n\nfig , ax1 = plt.subplots(figsize=(12, 6))\n\nax2 = ax1.twinx()\nax1.bar(block_points_per_set.index, block_points_per_set.values)\nax2.plot(attack_points_per_set.index, attack_points_per_set.values, color='red')\n\nax1.set_xlabel('Player Name')\nax1.set_ylabel('block Points Per Set', color='blue')\nax2.set_ylabel('Attack Points Per Set', color='red')\nax1.set_xticklabels(block_points_per_set.index, rotation='vertical')\nfig.show()","e8f0bf3b":"np.corrcoef(block_points_per_set.values, attack_points_per_set.values)[0][1]","fd5f7e08":"# lets see all the correlations\nsetters[['Serve', 'Attack', 'Block']].corr()","9110028f":"outsides = df[df['Role', 'Unnamed: 1_level_1'] == 'Outside Hitter']\noutsides.head(5)","0543253d":"outsides = outsides[outsides['Played', 'Sets'] >= 20]\noutsides.shape[0] # there are 55 players who played at least 20 sets ","268d62e4":"def convert_to_percentage(str_percentage):\n    return float(str_percentage.split('%')[0]) \/ 100","36eec1b0":"outsides['Attack', 'Excellent %'] = outsides['Attack', 'Excellent %'].apply(convert_to_percentage)","95770bf7":"outsides['Attack'].sort_values(by='Excellent %', ascending=False)","f3dfd39e":"outsides['Attack', 'Points per Set'] = outsides['Attack', 'Total Points'] \/ outsides['Played', 'Sets']\noutsides['Attack'].sort_values(by='Excellent %', ascending=False)","1ae10904":"outsides['Attack', 'Lost Points'] = outsides['Attack', 'Error'] + outsides['Attack', 'Blocked']\noutsides['Attack']","bad1d48e":"outsides['Attack', 'Lost Points \/ Total'] = outsides['Attack', 'Lost Points'] \/ outsides['Attack', 'Total Points']\noutsides['Attack']","5baafea5":"outsides['Attack'].sort_values(by='Lost Points \/ Total')","445ac0b1":"outsides['Attack'].corr()","3208fded":"# drop NaN\noutsides['Reception'].dropna(inplace=True)","cdae0b42":"outsides['Reception', 'Error\/Total'] = outsides['Reception', 'Error'] \/ outsides['Reception', 'Total']\noutsides['Reception']","7e4f5d34":"reception = outsides['Reception'].dropna()\nreception","3c1b6ea5":"reception = reception[reception['Total'] > 100] \nreception.sort_values(by='Error\/Total')","1d7a0266":"reception['Excellent %'] = reception['Excellent %'].apply(convert_to_percentage)","8a4cdf05":"reception['Efficiency'] = reception['Efficiency'].apply(convert_to_percentage)","dee4eb55":"reception.sort_values(by='Excellent %', ascending=False)","3e40ed53":"reception['Negative\/Total'] = reception['Negative'] \/ reception['Total']","8175ff82":"reception['My Efficiency'] = reception['Excellent %'] \/ (1.2 * reception['Error\/Total'] + 0.4 * reception['Negative\/Total'])\nreception.sort_values(by='My Efficiency', ascending=False)","d3b00789":"reception.corr()","a6701b77":"outsides['Attack', 'Efficiency'] = outsides['Attack', 'Efficiency'].apply(convert_to_percentage)","d2497d51":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","347028ed":"outsides['Attack', 'My Efficiency'] = (100 * outsides['Attack', 'Excellent %'] + outsides['Attack', 'Points per Set']) \/ (0.25 + outsides['Attack', 'Lost Points \/ Total']) \/ 50\n\noutsides['Attack'].sort_values(by='My Efficiency', ascending=False)","2c19f1f7":"outsides['Attack'].corr()","363da651":"outsides['Attack'].head()","055f3a04":"outsides['Block'].sort_values(by='Points per Set', ascending=False).head(10)\n# theres not much of a information in Block section.\n# numbers are too small to get a meaning from them","5af67ad8":"outsides['Reception', 'My Efficiency'] = 0\noutsides['Reception'] = reception\noutsides['Reception']","eae3a76d":"outsides.dropna(inplace=True)\noutsides","8f90f9b1":"dfx = outsides[['Attack', 'Reception']] # we only need these columns now\ndfx.head()","6cc2ab45":"dfx['Reception'].head()","212d8e53":"dfx['Attack'].head()","0d28b806":"np.corrcoef(dfx['Attack', 'My Efficiency'], dfx['Reception', 'My Efficiency'])[0][1]\n# little bit","be80f61f":"import matplotlib.pyplot as plt","94f1f4b2":"# in order to do this we can use 2 My Efficiency values that we created for each Attack and Reception\nattack_efficiency = dfx['Attack', 'My Efficiency']\nreception_efficiency = dfx['Reception', 'My Efficiency']\n\nfig , ax1 = plt.subplots(figsize=(12, 6))\n\nax2 = ax1.twinx()\nax1.bar(attack_efficiency.index, attack_efficiency.values)\nax2.plot(reception_efficiency.index, reception_efficiency.values, color='red')\n\nax1.set_xlabel('Player Name')\nax1.set_ylabel('Ace Per Set', color='blue')\nax2.set_ylabel('Attack Points Per Set', color='red')\nax1.set_xticklabels(attack_efficiency.index, rotation='vertical')\nfig.show()","99ad1c58":"dfx['Attack', 'My Efficiency']","9e0ba8d5":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndfx['Attack', 'My Efficiency'] = scaler.fit_transform(dfx['Attack', 'My Efficiency'].values.reshape(-1, 1))\ndfx['Reception', 'My Efficiency'] = scaler.fit_transform(dfx['Reception', 'My Efficiency'].values.reshape(-1, 1))\ndfx.head()","e8f41b4b":"# Best attack players\ndfx['Attack'].sort_values(by='My Efficiency', ascending=False).head(10)","bb34fa97":"# Best defense players\ndfx['Reception'].sort_values(by='My Efficiency', ascending=False).head(10)","e79f4a58":"dfx['Score', 'With Attack Priority'] = 2 * dfx['Attack', 'My Efficiency'] + dfx['Reception', 'My Efficiency']\ndfx['Score', 'With Defense Priority'] = dfx['Attack', 'My Efficiency'] + 2 * dfx['Reception', 'My Efficiency']\ndfx['Score', 'With No Priority'] = 1.5 * dfx['Attack', 'My Efficiency'] + 1.5 * dfx['Reception', 'My Efficiency']","2f4c8ffd":"dfx.sort_values(by=('Score', 'With Attack Priority'), ascending=False).head()","3d375a1f":"dfx.sort_values(by=('Score', 'With Defense Priority'), ascending=False).head()","24693834":"dfx.sort_values(by=('Score', 'With No Priority'), ascending=False).head()","a1328eb8":"### we have 42 players now","260122db":"# Setters","63b15c67":"# Outside Hitters","ab176ec3":"#### These players are the bests according to data.\n#### Elena PIETRINI is top 3 in all of them and first at 2 of them, I guess she was the best in this tournament :)\n#### Shes Outside Hitter for Italian National Team and Italy is one of the best teams in Women's Volleyball, so it makes sense.","81f305d9":"### so it seems we can't understand anything from this","4b6dee91":"### Lets say we calculate the general goodness of a player with this 3 different formulas:\n\n### player_score = 2 * attack_score + reception_score for attack first consideration\n#### We consider attack is 2 times important than defense\n\n### player_score = attack_score + 2 * reception_score for defense first consideration\n#### We consider defense is 2 times important than attack\n\n### player_score = 1.5 * attack_score + 1.5 * reception_score for balanced consideration\n#### Attack and defense is equally important on this one\n\n### NOTE: score means 'My Efficiency' column","58995af4":"### does the player with good attacks have good defense too?","3f4b1c0c":"### lets scale the 'my efficiency'columns to (0,1)","1f84c949":"### our outside hitters data includes some opposite players.\n### they are actually playing opposite, opposites usually don't receive a ball, their [Reception, Error\/Total] values are NaN\n### so we will drop NaN values.\n### we will drop these players","cf324d23":"## Now it is time to analyze some Middle Blockers!","6786b0ec":"### so it seems there's a correlation between attack points and block points","7afcc129":"### lets find the best players in offense and defense combined","e8019f90":"### it seems theres not that much a correlation between being agressive in attack and serving"}}