{"cell_type":{"9c495f40":"code","9abb7864":"code","b22edadf":"code","55f2e011":"code","7e2d63b9":"code","b5b06fc7":"code","59a6cdd0":"code","f7dceb34":"code","3a7c0f4e":"code","7b0c3428":"code","6ab5b81c":"code","5656a18e":"code","3ca299d6":"code","b72f98ae":"code","96605404":"code","abf12d04":"code","afae1594":"code","c66bc94e":"code","2300d34a":"code","6cac7386":"code","4123ca07":"code","1f422645":"code","fdf87af5":"code","ddda6f8e":"code","351e9a49":"code","588bcfde":"code","0ebce8f6":"markdown","8fb88c19":"markdown","327d98ab":"markdown","3ee5efa3":"markdown","b1f03fbd":"markdown","4b122758":"markdown","f6715353":"markdown","0a1dea38":"markdown","e5e4b40f":"markdown","05b79b87":"markdown","f15cb857":"markdown","b217efcb":"markdown"},"source":{"9c495f40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9abb7864":"import time\nimport random\nfrom math import *\nimport operator\nimport pandas as pd\nimport numpy as np\n\n# import plotting libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n#from pandas.plotting import scatter_matrix\n%matplotlib inline\n#plt.style.use(['fivethirtyeight'])\n#mpl.rcParams['lines.linewidth'] = 2\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12,7)})\nsns.set(style='white')\n","b22edadf":"patient = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/patient.csv')\nroute = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/route.csv')\ntime_series = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/time.csv')","55f2e011":"patient.head()","7e2d63b9":"patient.info()","b5b06fc7":"column = ['sex', 'country', 'region', 'group',\n       'infection_reason', 'infection_order', \n       'state']\nfor col in column:\n    print(patient[col].value_counts())\n    print('\\n')","59a6cdd0":"plt.figure(figsize=(12,7))\narea = list(patient['region'].value_counts().sort_values(ascending=False).index)\nregion_data = patient.region.value_counts().rename_axis('region').reset_index(name='count')\nsns.barplot(x='count', y='region', order=area, data=region_data, palette='gist_gray')\nplt.title('Regionwise confirmed cases', fontsize=15)\nplt.show()","f7dceb34":"plt.figure(figsize=(12,7))\nsns.countplot(patient.state, palette='gist_gray')\nplt.yscale('log')\nplt.title('condition of reported cases', fontsize=15)\nplt.show()","3a7c0f4e":"plt.figure(figsize=(12,7))\nsns.countplot(patient.sex, palette='gist_gray',hue=patient.state)\n#plt.yscale('log')\nplt.title('Regionwise confirmed cases by gender', fontsize=15)\nplt.show()","7b0c3428":"plt.figure(figsize=(12,7))\nreason_list = list(patient.infection_reason.value_counts().sort_values(ascending=False).index)\nreason_data = patient.infection_reason.value_counts().rename_axis('reason').reset_index(name='count')\nsns.barplot(x='count', y='reason', order=reason_list, data=reason_data, palette='gist_gray')\nplt.title('Reason of Infection', fontsize=15)\nplt.show()","6ab5b81c":"patient['age'] = 2020 - patient.birth_year","5656a18e":"def age_grp(age):\n    if age > 0:\n        if age%10 != 0:\n            lower = int(floor(age\/10)*10)\n            upper = int(ceil(age\/10)*10)-1\n            return '{}-{}'.format(lower, upper)\n        else:\n            lower = int(age)\n            upper = int(age)+9\n            return '{}-{}'.format(lower,upper)\n    else:\n        return np.nan","3ca299d6":"patient['age_group'] = patient.age.apply(age_grp)","b72f98ae":"# Plotting age of affected peaple\nsns.set(rc={'figure.figsize':(20,7)})\nsns.set(style='white')\nsns.countplot(patient.age.dropna().astype('int64'), orient='h', palette='viridis')\nplt.title('Confirmed cases by age', fontsize=15)\nplt.show()","96605404":"# Plotting age of affected peaple\nsns.set(rc={'figure.figsize':(20,7)})\nsns.set(style='white')\nsns.countplot(patient.age_group.dropna().sort_values(ascending=True), orient='h', palette='viridis')\nplt.title('Confirmed cases by age group', fontsize=15)\nplt.show()","abf12d04":"# Parsing dates\nimport datetime as dt\npatient.confirmed_date = pd.to_datetime(patient.confirmed_date)\npatient.released_date = pd.to_datetime(patient.released_date)\npatient.deceased_date = pd.to_datetime(patient.deceased_date)","afae1594":"# Extracting days to recovery and days to death\npatient['days_to_recovery'] =  abs((patient.released_date - patient.confirmed_date).dt.days)\npatient['days_to_death'] =  abs((patient.deceased_date - patient.confirmed_date).dt.days)","c66bc94e":"# Seperate dataframes for recovery and death data\ndata_recovery = patient.days_to_recovery.value_counts().sort_index().rename_axis('days_to_recovery').reset_index(name='Count')\ndata_death = patient.days_to_death.value_counts().sort_index().rename_axis('days_to_death').reset_index(name='Count')","2300d34a":"# Changing the datatype of number of days to recovery and death\ndata_recovery.days_to_recovery = data_recovery.days_to_recovery.astype('int64').astype('object')\ndata_death.days_to_death = data_death.days_to_death.astype('int64').astype('object')","6cac7386":"# Plotting the frequency of days to death\nsns.barplot(x='days_to_recovery', y='Count', data = data_recovery, palette='viridis', orient='v')\nplt.title('frequency of days taken for recovery', fontsize=15)\nplt.show()","4123ca07":"# Plotting the frequency of days to death\nsns.barplot(x='days_to_death', y='Count', data = data_death, palette='viridis', orient='v')\nplt.title('frequency of days until death', fontsize=15)\nplt.show()","1f422645":"recovery_data = patient.groupby(['age_group', 'sex'])['days_to_recovery'].mean().dropna().reset_index().rename_axis()\nax = sns.lineplot(x='age_group', y='days_to_recovery',hue='sex',style='sex', data=recovery_data, palette='gist_gray_r')\nplt.title('Days taken for recovery by age group', fontsize=15)\nplt.show()","fdf87af5":"death_data = patient.groupby(['age_group', 'sex'])['days_to_death'].mean().dropna().reset_index().rename_axis()\nax = sns.lineplot(x='age_group', y='days_to_death',hue='sex',style='sex', data=death_data, palette='gist_gray_r')\nplt.title('Days until death by age group', fontsize=15)\nplt.show()","ddda6f8e":"time_series = time_series.set_index('date')\ntime_series.head()","351e9a49":"#mpl.style.use('fivethirtyeight')\nsns.set(style='whitegrid')\nfig, ax = plt.subplots(figsize=(16,7))\nax.plot(time_series['acc_test'], label='test', linestyle='dashed', color='#FFC300', linewidth=3, markersize=6)\nax.plot(time_series['acc_negative'], label='negative', linestyle='dotted', color='#B6FF33', linewidth=3, markersize=6)\nax.plot(time_series['acc_confirmed'], label='confirmed', color='#FF5733', linewidth=4, markersize=6)\nplt.title(\"Cases over time\", fontsize=16)\n#ax.set_xticks()\n#plt.yscale('log')\nax.set_xticklabels(time_series.index, rotation=45)\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Number of Cases', fontsize=16)\nplt.legend(loc='upper left', fontsize=15, fancybox=True, ncol=3, shadow=True)\nplt.show()","588bcfde":"import folium\nsouthkorea_map = folium.Map(location=[36.55,126.983333 ], zoom_start=7,tiles='cartodbpositron')\n\nfor lat, lon,city in zip(route['latitude'], route['longitude'], route['city']):\n    folium.CircleMarker([lat, lon],\n                        radius=4,\n                        color='black',\n                      popup =('City: ' + str(city) + '<br>'),\n                        fill_color='black',\n                        fill_opacity= 0.2).add_to(southkorea_map)\nsouthkorea_map","0ebce8f6":"#### Days until recovery and death","8fb88c19":"#### Reason of Infection","327d98ab":"#### Condition based on Gender and Age","3ee5efa3":"#### Importing the modules and Reading the data","b1f03fbd":"#### Plotting condition of known patients","4b122758":"## Upvote if you like my notebook, Your support and encouragement are greatly appreciated!!!\n## Suggestions and Criticisms are welcomed !!\n### Thank you!","f6715353":"#### Analyzing the Time-Series data","0a1dea38":"#### Plotting the number of cases over time","e5e4b40f":"#### Confirmed cases and regions","05b79b87":"#### Distribution of Age","f15cb857":"#### Geospatial tagging","b217efcb":"#### Item counts in Categorical features"}}