{"cell_type":{"9af15203":"code","91e1aa78":"code","195385d8":"code","2a43a009":"code","0ab18f4d":"code","891b0a39":"code","9eee20c8":"code","448d42a4":"code","1bcaef20":"code","58163dce":"code","935ebf94":"code","b1adce17":"code","17c8a3d2":"code","2a55333b":"code","0b798c7f":"code","b8fe101d":"code","2b4c5bb4":"code","35deed80":"code","f34bdd61":"code","7048c4bb":"code","229622cf":"code","0807ad00":"code","faae6d0f":"code","f8a41b56":"code","97e63bd3":"code","1963f7f5":"code","307f9a04":"code","dea2c797":"code","cb74abfc":"code","41c0ab59":"code","1464b692":"code","2642bd12":"code","b1bc6e9f":"code","cdfec9d9":"code","335b8a34":"code","bf75451b":"code","30558b3f":"code","7078264a":"markdown","233af49a":"markdown","42d628fc":"markdown","790cec2e":"markdown","9e5246a7":"markdown","2acec66d":"markdown","1b9a4b33":"markdown","86db2f91":"markdown","17107771":"markdown","718669a4":"markdown","ce8f7c21":"markdown","8553999e":"markdown","89a09e0b":"markdown","2fdccc13":"markdown","6cc20633":"markdown","c9f48c08":"markdown","c0f7401e":"markdown"},"source":{"9af15203":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","91e1aa78":"#import the required packages for solving \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix,mean_squared_error,accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split","195385d8":"train = pd.read_csv('..\/input\/Train_sample.csv')\ntest = pd.read_csv('..\/input\/Test_sample.csv')\ntrain.head()","2a43a009":"train.tail()","0ab18f4d":"test.head()","891b0a39":"test.tail()","9eee20c8":"X_train = train.iloc[:,1:]\ny_train = train.iloc[:,0]\n\nprint(X_train.shape)\nprint(y_train.shape)","448d42a4":"X_test = test.iloc[:,1:]\ny_test = test.iloc[:,0]\n\nprint(X_test.shape)\nprint(y_test.shape)","1bcaef20":"x1 = X_train.iloc[0,:].values.reshape(28,28)\nx1[x1> 0] =1\nx1 = pd.DataFrame(x1)\nx1.to_csv(\"one.csv\")","58163dce":"train_sample = np.random.choice(range(0,X_train.shape[0]),replace=False, size=5)\ntest_sample = np.random.choice(range(0,X_test.shape[0]),replace = False, size =5)","935ebf94":"train_sample","b1adce17":"test_sample","17c8a3d2":"plt.figure(figsize=(10,5))\nfor i,j in enumerate(train_sample):\n    plt.subplot(2,5,i+1)\n    plt.imshow(X_train.iloc[j,:].values.reshape(28,28))\n    plt.title(\"Digit:\" +str(y_train[j]))\n    plt.gray()","2a55333b":"plt.figure(figsize=(10,5))\nfor i,j in enumerate(test_sample):\n    plt.subplot(2,5,i+1)\n    plt.imshow(X_test.iloc[j,:].values.reshape(28,28))\n    plt.title(\"Digit:\"+str(y_test[j]))\n    plt.gray()","0b798c7f":"knn_classifier = KNeighborsClassifier(n_neighbors=3, weights='distance', algorithm='brute')\nknn_classifier.fit(X_train, y_train)","b8fe101d":"pred_train = knn_classifier.predict(X_train)\npred_test = knn_classifier.predict(X_test)","2b4c5bb4":"cm_test = confusion_matrix(y_pred=pred_test, y_true=y_test)\n\nprint(cm_test)","35deed80":"#Accuracy:\nsum(np.diag(cm_test))\/np.sum(cm_test)\n\n#np.trace(cm_test)\/np.sum(cm_test)","f34bdd61":"print(\"Accuracy on train is:\" , accuracy_score(y_train,pred_train))\nprint(\"Accuracy on test is:\", accuracy_score(y_test,pred_test))","7048c4bb":"misclassified = y_test[pred_test != y_test]","229622cf":"##First 5 misclassified ponts\nmisclassified.index[:5]","0807ad00":"plt.figure(figsize=(10,5))\nfor i,j in enumerate(misclassified.index[:5]):\n    plt.subplot(2,5,i+1)\n    plt.imshow(X_test.iloc[j,:].values.reshape(28,28))\n    plt.title(\"Digit:\"+str(y_test[j])+\" \"+\"Pred:\"+str(pred_test[j]))\n    plt.gray()","faae6d0f":"knn_classifier = KNeighborsClassifier(algorithm= 'brute', weights='distance')","f8a41b56":"params = {\"n_neighbors\": [1,3,5],\"metric\": [\"euclidean\", \"cityblock\"]}\n#params = {\"n_neighbors\": [1],\"metric\": [\"euclidean\", \"cityblock\"]}\n\ngrid = GridSearchCV(knn_classifier,param_grid=params,scoring=\"accuracy\",cv=10)","97e63bd3":"grid.fit(X_train, y_train)\nprint(grid.best_score_)\nprint(grid.best_params_)","1963f7f5":"best_knn = grid.best_estimator_\npred_train = best_knn.predict(X_train)\npred_test = best_knn.predict(X_test)\nprint(\"Accuracy o train is:\", accuracy_score(y_train,pred_train))\nprint(\"Accuracy on test is:\", accuracy_score(y_test,pred_test))","307f9a04":"##Randomly generate some data\n\ndata  = pd.DataFrame(np.random.randint(low = 2,high = 100,size = (1000, 4)),\n                     columns=[\"Target\",\"A\",\"B\",\"C\"])\ndata.head()","dea2c797":"train_x,test_x,train_y,test_y = train_test_split(data.iloc[:,1:],data.Target,test_size = 0.2)\nprint(train_x.shape, test_x.shape)","cb74abfc":"scaler = MinMaxScaler(feature_range=(0,1))\n\nscaler.fit(train_x)","41c0ab59":"scaled_train_x = pd.DataFrame(scaler.transform(train_x),columns=['A','B','C'])\nscaled_test_x = pd.DataFrame(scaler.transform(test_x),columns=[\"A\",\"B\",\"C\"])","1464b692":"knn_regressor = KNeighborsRegressor(n_neighbors=3,algorithm=\"brute\",weights=\"distance\")\nknn_regressor.fit(scaled_train_x, train_y)","2642bd12":"train_pred = knn_regressor.predict(scaled_train_x)\ntest_pred = knn_regressor.predict(scaled_test_x)","b1bc6e9f":"print(mean_squared_error(train_y,train_pred))\nprint(mean_squared_error(test_y,test_pred))","cdfec9d9":"knn_regressor = KNeighborsRegressor(algorithm=\"brute\",weights=\"distance\")\nparams = {\"n_neighbors\": [1,3,5],\"metric\": [\"euclidean\", \"cityblock\"]}\ngrid = GridSearchCV(knn_regressor,param_grid=params,scoring=\"neg_mean_squared_error\",cv=5)","335b8a34":"grid.fit(scaled_train_x, train_y)\nprint(grid.best_params_)\nprint(grid.best_score_)","bf75451b":"best_knn = grid.best_estimator_\ntrain_pred = best_knn.predict(scaled_train_x)\ntest_pred = best_knn.predict(scaled_test_x)","30558b3f":"print(mean_squared_error(train_y,train_pred))\nprint(mean_squared_error(test_y,test_pred))","7078264a":"## K Nearest Neighbor Regression","233af49a":"3. **Try to visually look at the data by writing one of the records to csv**","42d628fc":"7. **Use grid search for model building and check the model performance**","790cec2e":"5. **Build knn model with k =3. Check the model performace**","9e5246a7":"4. **Look at 5 sample records from train and test**","2acec66d":"1. Read the data\n2. Split the x and y variables from train and test.\n3. Try to see how the data looks like by writing one record to csv\n4. Looking at 5 samples from train and test.\n5. Build knn model with k=3. Check the model performance.\n6. look at the sample misclassified points.\n7. Use grid search for model building and check the model performance.","1b9a4b33":"6. **Look at the sample misclassified points**","86db2f91":"2. **Split the x and y from train and test**","17107771":"## K Nearest Neighbour Classification","718669a4":"2. **Split the data into train and Test**","ce8f7c21":"Build confusion matrix and find the accuracy of the model","8553999e":"5. **Use grid search for model building and check the model performance**","89a09e0b":"3. **Scale the variables using minmax scaler**","2fdccc13":"1. Create random data with 3 variables and 1 target\n2. Split the data into train and test\n3. Scale the variables using minmax scaler\n4. Build knn model with k = 3. Check the model performance\n5. Use grid search for model building and check the model performance\n\n","6cc20633":"1. **Craete random dat with 3 variables and 1 target**","c9f48c08":"4. **Build knn model with k = 3 . Checck the model performance**","c0f7401e":"1. **Read the data(both from train and test)**"}}