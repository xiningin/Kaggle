{"cell_type":{"7e04d774":"code","42869325":"code","9e2df366":"code","ec4eab8b":"code","33566fc5":"code","09fed596":"code","4e946eae":"code","0710c9d3":"code","ea4f54ec":"code","974acc22":"code","3ba81523":"code","baf9183b":"code","20179f15":"code","3fc8d470":"code","b0f1b71d":"code","cc858a3c":"code","c99ec046":"code","044d2b25":"code","a5c2bff7":"code","c5865800":"code","f15c5ef2":"code","c8c97920":"code","d35bb3eb":"code","a08790c6":"code","388650f3":"code","f7bc79b2":"code","f121d310":"code","36cf93a6":"code","7d52a1cf":"code","69d565fa":"code","697ad2a2":"code","57837ecd":"code","78007418":"code","209ed28d":"code","410eaa13":"code","27c39173":"code","f3bdab71":"code","fd832f3e":"code","7e602a7f":"code","d15d0a4f":"code","8c1d020d":"code","73a15ce4":"code","22a2fa91":"code","7fb1f467":"code","43bef5ff":"code","bc098a3d":"code","64f6c223":"code","a9661b03":"code","ed4201e6":"code","01a4f406":"code","60203a24":"code","26cd7ef7":"code","a0a62720":"code","cb68bfd2":"code","b4dc4cb5":"code","d51afef9":"markdown","70b1a27b":"markdown","d64a34bf":"markdown","1072adba":"markdown"},"source":{"7e04d774":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42869325":"train = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/train.csv')\nmeal = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/meal_info.csv')\ncenter = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/fulfilment_center_info.csv')","9e2df366":"train.head()","ec4eab8b":"data = train.merge(meal, on='meal_id')","33566fc5":"data = data.merge(center, on='center_id')","09fed596":"data.head()","4e946eae":"data.nunique()","0710c9d3":"corr = data.corr()\nimport seaborn as sns\nsns.heatmap(corr)","ea4f54ec":"center_id = 61\nmeal_id = 1885","974acc22":"train_df = data[data['center_id']==center_id]\ntrain_df = train_df[train_df['meal_id']==meal_id]\n\n\n# data = train[train['center_id']==55]","3ba81523":"train_df['Date'] = pd.date_range('2015-01-01', periods=145, freq='W')\n","baf9183b":"train_df","20179f15":"train_df['Day'] = train_df['Date'].dt.day\ntrain_df['Month'] = train_df['Date'].dt.month\ntrain_df['Year'] = train_df['Date'].dt.year\ntrain_df['Quarter'] = train_df['Date'].dt.quarter","3fc8d470":"train_df.head()","b0f1b71d":"xb_data = train_df.drop(columns=['id','center_id','meal_id','category','cuisine','center_type'])\n\nxb_data = xb_data.set_index(['Date'])","cc858a3c":"x_train = xb_data.drop(columns='num_orders')\ny_train = xb_data['num_orders']\ny_train = np.log1p(y_train)\n\nX_train = x_train.iloc[:130,:]\nX_test = x_train.iloc[130:,:]\nY_train =  y_train.iloc[:130]\nY_test = y_train.iloc[130:]","c99ec046":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test)","044d2b25":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate = 0.01,\n eval_metric ='rmse',\n    n_estimators = 50000,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5\n  \n  \n )\n#model.fit(X_train, y_train)\nmodel_2.fit(X_train, Y_train, eval_metric='rmse', \n          eval_set=[(X_test, Y_test)], early_stopping_rounds=500, verbose=100)","a5c2bff7":"a = (model_2.get_booster().best_iteration)\na","c5865800":"xgb_model = XGBRegressor(\n     \n     learning_rate = 0.01,\n   \n    n_estimators = a,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5\n  \n  \n \n )","f15c5ef2":"xgb_model.fit(X_train, Y_train)","c8c97920":"xgb_preds = xgb_model.predict(X_test)","d35bb3eb":"xgb_preds = np.exp(xgb_preds)","a08790c6":"train_df.tail()","388650f3":"xgb_preds = pd.DataFrame(xgb_preds)\nxgb_preds.index = Y_test.index","f7bc79b2":"xgb_preds","f121d310":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)\n","36cf93a6":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test)\nplt.plot(xgb_preds, color='cyan')","7d52a1cf":"from lightgbm import LGBMRegressor\nlgb_fit_params={\"early_stopping_rounds\":500, \n            \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(X_test,Y_test)],\n            'eval_names': ['valid'],\n            'verbose':100\n           }\n\nlgb_params = {'boosting_type': 'gbdt',\n 'objective': 'regression',\n 'metric': 'rmse',\n 'verbose': 0,\n 'bagging_fraction': 0.8,\n 'bagging_freq': 1,\n 'lambda_l1': 0.01,\n 'lambda_l2': 0.01,\n 'learning_rate': 0.001,\n 'max_bin': 255,\n 'max_depth': 6,\n 'min_data_in_bin': 1,\n 'min_data_in_leaf': 1,\n 'num_leaves': 31}\n\nY_train = np.log1p(Y_train)\nY_test = np.log1p(Y_test)\n","69d565fa":"clf_lgb = LGBMRegressor(n_estimators=10000, **lgb_params, random_state=123456789, n_jobs=-1)\nclf_lgb.fit(X_train, Y_train, **lgb_fit_params)","697ad2a2":"lgb_model = LGBMRegressor(bagging_fraction=0.8, bagging_freq=1, lambda_l1=0.01,\n              lambda_l2=0.01, learning_rate=0.01, max_bin=255, max_depth=6,\n              metric='rmse', min_data_in_bin=1, min_data_in_leaf=1,\n              n_estimators=10000, objective='regression',\n              random_state=123456789, verbose=0)","57837ecd":"lgb_model.fit(X_train,Y_train)","78007418":"lgm_preds = lgb_model.predict(X_test)\nlgm_preds = np.exp(lgm_preds)","209ed28d":"lgm_preds = pd.DataFrame(lgm_preds)\nlgm_preds.index = Y_test.index","410eaa13":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)\n","27c39173":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.legend(loc='best')","f3bdab71":"from catboost import CatBoostRegressor\nY_train = np.log1p(Y_train)\nY_test = np.log1p(Y_test)\n\ncat_model=CatBoostRegressor()\ncat_model.fit(X_train, Y_train)","fd832f3e":"cat_preds = cat_model.predict(X_test)\ncat_preds = np.exp(cat_preds)","7e602a7f":"cat_preds","d15d0a4f":"cat_preds = pd.DataFrame(cat_preds)\ncat_preds.index = Y_test.index\nY_train = np.exp(Y_train)\nY_test = np.exp(Y_test)","8c1d020d":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(cat_preds, color='green', label='cat_prediction')\nplt.legend(loc='best')","73a15ce4":"train_df","22a2fa91":"prophet_data = train_df[['Date','num_orders']]\nprophet_data.index = xb_data.index\nprophet_data = prophet_data.iloc[:130,:]","7fb1f467":"# prophet_data['num_orders'] = np.log1p(prophet_data['num_orders'])","43bef5ff":"prophet_data =prophet_data.rename(columns={'Date':'ds',\n                             'num_orders':'y'})\nprophet_data.head()","bc098a3d":"from fbprophet import Prophet\nm = Prophet(growth='linear',\n            seasonality_mode='multiplicative',\n#            changepoint_prior_scale = 30,\n           seasonality_prior_scale = 35,\n           holidays_prior_scale = 10,\n           daily_seasonality = True,\n           weekly_seasonality = False,\n           yearly_seasonality= False,\n           ).add_seasonality(\n                name='monthly',\n                period=30.5,\n                fourier_order=30\n            \n            ).add_seasonality(\n                name='weekly',\n                period=7,\n                fourier_order=55\n            ).add_seasonality(\n                name='yearly',\n                period=365.25,\n                fourier_order=20\n            )\n        \nm.fit(prophet_data)","64f6c223":"future = m.make_future_dataframe(periods=15, freq='W')","a9661b03":"forecast = m.predict(future)\n# forecast['yhat'] = np.exp(forecast['yhat'])\n# forecast['yhat_lower'] = np.exp(forecast['yhat_lower'])\n# forecast['yhat_upper'] = np.exp(forecast['yhat_upper'])\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","ed4201e6":"\nprophet_preds = forecast['yhat'].iloc[130:]\nprophet_preds.index = Y_test.index","01a4f406":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.legend(loc='best')\n","60203a24":"plt.figure(figsize=(20,5))\n# plt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.legend(loc='best')","26cd7ef7":"a = np.array(prophet_preds)\nb = np.array(lgm_preds)\nc = np.array(xgb_preds)\nfinal_preds = (a*0.6) + (b*0.2) + (c*0.2)","a0a62720":"final_preds","cb68bfd2":"final_preds = pd.DataFrame(final_preds[6])\nfinal_preds.index = Y_test.index","b4dc4cb5":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='orange', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.plot(prophet_preds, color='red',linestyle='--', label='final_prediction')\nplt.legend(loc='best')","d51afef9":"# XGB boost","70b1a27b":"# Cat_Regressor","d64a34bf":"# Prophet model","1072adba":"# light lgb Model"}}