{"cell_type":{"c2196b0e":"code","9eccbe4d":"code","1451855d":"code","025b0890":"code","02d7def8":"code","48d9de3e":"code","def3ccfb":"code","9e49261d":"code","5cea6c1e":"code","2ae43972":"code","68b43f5d":"code","d69e810d":"code","b4bf3464":"code","e765b782":"code","71193c2f":"code","ca13f002":"code","b873475e":"code","aed02294":"code","8e6aa64b":"code","3236887e":"code","63d8260a":"code","03ca39eb":"code","e3857197":"code","603b6a8c":"code","9bd22798":"code","77af20f7":"code","36aa2651":"code","17efae32":"code","8cbd7a8d":"code","559bcf4f":"code","0d551a09":"code","c3088234":"code","b8710a55":"code","cf493eb5":"code","1e941d21":"code","4162a75c":"code","eba6cc5a":"code","203ae689":"code","d49fd870":"code","d8355381":"code","cb35332f":"code","9082ee22":"code","ad2ee9e3":"code","aaabf766":"code","dbb8ab6c":"code","b21860f9":"code","93c8b6ae":"code","2083a907":"code","503870f7":"code","9d511a68":"code","b3a3dd81":"code","22d52e6e":"code","3b4d90a2":"code","11f32ccb":"code","940e1328":"code","9679d8ac":"code","30e0cccc":"code","8adb0c67":"code","48c746fa":"code","52d8ce28":"markdown","f09fe9df":"markdown","2a456930":"markdown","c87488c0":"markdown","185e17b2":"markdown","9e04dae8":"markdown","2c9d8fbc":"markdown","8d271dc7":"markdown","a529ecd1":"markdown","6951ee73":"markdown","ca62c1f0":"markdown","339b7f7c":"markdown","ae518439":"markdown","8df7fd4e":"markdown","ce9527d8":"markdown","f3a29e32":"markdown","a45b4af1":"markdown","c9769155":"markdown","5b6819f4":"markdown","1beab5bf":"markdown","aabdc193":"markdown","ed12cc10":"markdown","d9344d73":"markdown","8a7410aa":"markdown","cd4520a1":"markdown","9c2f1edc":"markdown","7e42bf33":"markdown","3755d80e":"markdown","58b59f14":"markdown","367d361e":"markdown","e096a09c":"markdown","e7579b22":"markdown","45560f2b":"markdown","fbc6bb60":"markdown","121a5e7c":"markdown","5e13ce48":"markdown","0d4a675f":"markdown","77d74020":"markdown","fa481071":"markdown","70e2ef5d":"markdown","d7ef36a5":"markdown","0a30496b":"markdown","db4ff42e":"markdown","b83199eb":"markdown","ea322cb0":"markdown","995ea161":"markdown","ed374bcd":"markdown","c0674b97":"markdown","0bf41090":"markdown","6e88fb63":"markdown","fc703229":"markdown","fb3fc988":"markdown","189db074":"markdown"},"source":{"c2196b0e":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, accuracy_score\nimport xgboost as XGB\nimport warnings\nwarnings.filterwarnings('ignore')\n\npkmn_type_colors = ['#78C850',  # Grass\n                    '#F08030',  # Fire\n                    '#6890F0',  # Water\n                    '#A8B820',  # Bug\n                    '#A8A878',  # Normal\n                    '#A040A0',  # Poison\n                    '#F8D030',  # Electric\n                    '#E0C068',  # Ground\n                    '#EE99AC',  # Fairy\n                    '#C03028',  # Fighting\n                    '#F85888',  # Psychic\n                    '#B8A038',  # Rock\n                    '#705898',  # Ghost\n                    '#98D8D8',  # Ice\n                    '#7038F8',  # Dragon\n                   ]","9eccbe4d":"data = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","1451855d":"data.head(20)","025b0890":"data.info()","02d7def8":"data.dropna(inplace=True)","48d9de3e":"data.columns","def3ccfb":"use_cols = ['CarName', 'fueltype', 'aspiration', 'doornumber',\n       'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength',\n       'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber',\n       'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio',\n       'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price']","9e49261d":"categorical_cols = [cname for cname in data.columns\n                   if data[cname].dtype == \"object\"]","5cea6c1e":"numerical_cols = [cname for cname in data.columns\n                 if data[cname].dtype in [\"int64\", \"float64\"]]","2ae43972":"obj_cols = categorical_cols[1:10]","68b43f5d":"for column in categorical_cols:\n    print(\"{} unique:\".format(column), data[column].unique())\n    print(\"--------------------------------------\")","d69e810d":"data[\"Brand\"] = data[\"CarName\"].str.split(' ', n=1, expand=True)[0]\ndata[\"Model\"] = data[\"CarName\"].str.split(' ', n=1, expand=True)[1]","b4bf3464":"data.Brand.unique()","e765b782":"data[\"Brand\"] = data[\"Brand\"].replace({'maxda':'mazda',\n                                      'Nissan':'nissan',\n                                      'porcshce':'porsche',\n                                      'toyouta':'toyota',\n                                      'vokswagen':'volkswagen',\n                                      'vw':'volkswagen'})","71193c2f":"data.Model.unique()","ca13f002":"data.describe()","b873475e":"dataframe =pd.DataFrame(data['Brand'].value_counts()).reset_index().rename(columns={'index':'car_name','Brand':'count'})","aed02294":"plot = sns.barplot(y='car_name',x='count',data=dataframe)\nplot=plt.setp(plot.get_xticklabels(), rotation=90)","8e6aa64b":"sns.pairplot(data)","3236887e":"f, axes = plt.subplots(3,3, figsize=(15,15))\naxe = axes.ravel()\nfor i, col in enumerate(obj_cols):\n    df = pd.DataFrame(data[col].value_counts())\n    df.plot.pie(y=col, ax=axe[i])\n    \nplt.show();","63d8260a":"plt.figure(figsize=(15,20))\n\nfor i, c in enumerate(list(obj_cols), 1):\n    plt.subplot(3,3,i)\n    g = sns.boxplot(x=c, y=\"price\", data=data)","03ca39eb":"sns.distplot(data['price'],kde=True);","e3857197":"sns.scatterplot(x=\"wheelbase\", y=\"price\", data=data);","603b6a8c":"sns.pairplot(data[data.columns[2:]], hue='price', height=2.5);","9bd22798":"sns.lmplot(x='enginesize', y='price', data=data,\n           fit_reg=False,\n           hue='fueltype')","77af20f7":"for i, col in enumerate(list(numerical_cols[2:-1]), 1):\n    g = sns.jointplot(x=col, y=\"price\", data=data, kind=\"kde\", color=\"purple\")\n    g.plot_joint(plt.scatter, c=\"w\", s=30, linewidth=1, marker=\"+\")\n    g.ax_joint.collections[0].set_alpha(0)","36aa2651":"plt.figure(figsize=(15,20))\n\nfor i, col in enumerate(list(numerical_cols[2:-1]), 1):\n    plt.subplot(5,3,i)\n    sns.scatterplot(x=col, y=\"price\", data=data[data.columns[2:-1]])","17efae32":"plt.figure(figsize=(20,20))\n\nfor i, col in enumerate(list(obj_cols), 1):\n    plt.subplot(3,3,i)\n    sns.barplot(x=col,y='price',data=data)","8cbd7a8d":"plt.figure(figsize=(20,20))\n\nfor i, col in enumerate(list(numerical_cols[2:-1]), 1):\n    sns.lmplot(x=col, y='price', data=data,\n           fit_reg=False,\n           hue='fueltype')","559bcf4f":"plt.figure(figsize=(20,20))\n\nfor i, col in enumerate(list(obj_cols), 1):\n    plt.subplot(3,3,i)\n    sns.swarmplot(x=col,y='price',data=data, \n              palette=pkmn_type_colors)","0d551a09":"fig=plt.figure(figsize=(10,5))\nsns.swarmplot(x=\"fueltype\", y=\"price\",hue=\"carbody\", data=data)\nplt.show()","c3088234":"\nfor i, col in enumerate(list(obj_cols), 1):\n    fig=plt.figure(figsize=(20,5))\n    sns.violinplot(x=col,y='price',data=data)\n    plt.show()","b8710a55":"data[numerical_cols].corr()","cf493eb5":"sns.pairplot(data[numerical_cols]);","1e941d21":"sns.heatmap(data[numerical_cols].corr());","4162a75c":"col=['wheelbase','carlength','carwidth','curbweight','price']","eba6cc5a":"sns.pairplot(data[col]);","203ae689":"sns.heatmap(data[col].corr())","d49fd870":"sns.heatmap(data[data.columns[2:]].corr());","d8355381":"fig, axes = plt.subplots(4,4, figsize=(18,15))\nfor i, col in enumerate(numerical_cols[2:len(numerical_cols)-1]):\n    x,y = i\/\/4, i%4\n    sns.regplot(x=col, y=\"price\", data=data, ax=axes[x][y], color=\"b\")","cb35332f":"OH_encoder = OneHotEncoder(sparse=False)","9082ee22":"OH_cols = OH_encoder.fit(data[obj_cols])","ad2ee9e3":"OH_cols = pd.DataFrame(OH_encoder.fit_transform(data[obj_cols]))","aaabf766":"OH_encoder.get_feature_names()\nOH_cols.columns = OH_encoder.get_feature_names(obj_cols)","dbb8ab6c":"oth_cols = [cname for cname in data.columns\nif cname not in obj_cols]","b21860f9":"data[oth_cols].index = OH_cols.index","93c8b6ae":"df = pd.concat([data[oth_cols].reset_index(drop=True),\n                OH_cols.reset_index(drop=True)], axis=1)\ndf","2083a907":"df.describe()","503870f7":"numerical_cols = [cname for cname in df.columns\n                 if df[cname].dtype in [\"int64\", \"float64\"]]","9d511a68":"X = df[numerical_cols].drop(\"price\", axis=1)\ny = df[\"price\"]","b3a3dd81":"RForestR = RandomForestRegressor()\nrfe = RFE(estimator=RForestR, n_features_to_select=15, step=1)\nrfe = rfe.fit(X,y)","22d52e6e":"features = list(X.columns[rfe.support_])","3b4d90a2":"X = X[features]\ny = df.price\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)","11f32ccb":"Linear = LinearRegression()\nLinear.fit(X_train, y_train)\ny_train_pred = Linear.predict(X_train)\ny_valid_pred = Linear.predict(X_valid)\nLinear.score(X_valid, y_valid)","940e1328":"DecisionTR = DecisionTreeRegressor(random_state=0)\nDecisionTR.fit(X_train, y_train)\ny_train_pred = DecisionTR.predict(X_train)\ny_valid_pred = DecisionTR.predict(X_valid)\nDecisionTR.score(X_valid, y_valid)","9679d8ac":"RForest = RandomForestRegressor(n_estimators=15,\n                               criterion=\"mse\",\n                               random_state=20,\n                               n_jobs=1)\n\nRForest.fit(X_train, y_train)\ny_train_pred = RForest.predict(X_train)\ny_valid_pred = RForest.predict(X_valid)\nRForest.score(X_valid, y_valid)","30e0cccc":"r2_score(y_valid, y_valid_pred)","8adb0c67":"my_model = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\n\nmy_model.fit(X_train, y_train)","48c746fa":"my_model.score(X_valid, y_valid)","52d8ce28":"It looks fine.","f09fe9df":"Unique values for categorical columns","2a456930":"Let's choose categorical columns.","c87488c0":"For this, we first determine our other columns in our dataset.","185e17b2":"### Decision Tree Regressor","9e04dae8":"Let's look at the distribution of engineize by price","2c9d8fbc":"Density diagram of the price column","8d271dc7":"### eXtreme Gradient Boosting","a529ecd1":"Now it's time to combine our transformed columns with the remaining numeric columns in our dataset.","6951ee73":"#### Thanks for viewing my notebook :)\nI'm waiting for your feedback and I would be very happy if you vote.","ca62c1f0":"### Recursive Feature Elimination","339b7f7c":"### Feature Selection","ae518439":"### Read Data","8df7fd4e":"Which brand vehicles are more","ce9527d8":"Let's look at the distribution of the selected object columns according to the price value.","f3a29e32":"### Data Cleaning and Grouping","a45b4af1":"Let's look at the statistical summary of our dataset again","c9769155":"As expected, *XGradient Boosting* was the algorithm with the highest score. Of course we know why.","5b6819f4":"- wheelbase has high positive correlation with carlength,carwidth and curbweight\n- carlength has high postive correlation with curbweight\n- carlength has negative correlation with highwaympg\n- carwidth has high postive correlation with curbweight and engine size\n- enginesize has high positive correlation with horsepower\n- curbweight has high positive correlation with engine size and horse power, negative correlation with highwaympg\n- horsepower has negative correlation with citympg and highwaympg\n- citympg and highwaympg are highly correlated","1beab5bf":"| Column Name  | Type  | Description  | \n|:---------|:--------|:----------------------|\n|  Car_ID | Interger | Unique id of each observation |  |  Symboling | Categorical |  Its assigned insurance risk rating, A value of +3 indicates that the auto is risky, -3 that it is probably pretty safe. | \n| carName | Categorical | Name of car company | \n| fueltype | Categorical | Car fuel type i.e gas or diesel | \n| aspiration | Categorical | Aspiration used in a car | \n| doornumber | Categorical | Number of doors in a car | \n| carbody | Categorical | Body of car | \n| drivewheel | Categorical | Type of drive wheel | \n| enginelocation | Categorical | Location of car engine | \n| wheelbase | Numeric | Weelbase of car | \n| carlength | Numeric | Length of car | \n| carwidth | Numeric | Width of car | \n| carheight | Numeric | Height of car | \n| curbweight | Numeric | The weight of a car without |  occupants or baggage. | \n| enginetype | Categorical | Type of engine. | \n| cylindernumber | Categorical | Cylinder placed in the car |\n| enginesize | Numeric | Size of car | \n| fuelsystem | Categorical | Fuel system of car | \n| boreratio | Numeric | Boreratio of car | \n| stroke | Numeric | Stroke or volume inside the engine | \n| compressionratio | Numeric | Compression ratio of car | \n| horsepower | Numeric | Horsepower | \n| peakrpm | Numeric | Car peak rpm | \n| citympg | Numeric | Mileage in city | \n| highwaympg | Numeric | Mileage on highway | \n| price | Numeric | Price of car |","aabdc193":"### Random Forest Regressor","ed12cc10":"In order for our algorithms to give more accurate results, it must read our data correctly. Therefore, we have to convert our categorical values \u200b\u200binto numerical values. We will do this with the One Hot Encoding transformer.","d9344d73":"Let's look at the distribution of numeric columns by price value.","8a7410aa":"Let's look at the distribution of numerical columns with each other.","cd4520a1":"<a id=\"Data Info\"><\/a>\n### Data Info","9c2f1edc":"### Linear Regression","7e42bf33":"Let's choose numerical columns","3755d80e":"Let's fix the wrongly written data in the brand column.","58b59f14":"### Conclusion","367d361e":"Let's take a look at the distribution of our data relative to each other.","e096a09c":"Let's look at the distribution of the numerical columns according to the price value by classifying them according to the fuel type.","e7579b22":"Now let's look at the distribution of the object column values according to the price value.","45560f2b":"The *CarName* column contains both the brand and model information of the vehicles. Let's create two separate columns as *Brand* and *Model* using this column.","fbc6bb60":"Let's examine our columns in positive correlation. For this, we first define our columns.","121a5e7c":"Let's see how wheelbase values affect price","5e13ce48":"Let's look at the distribution of numeric columns by price value.","0d4a675f":"<a id=\"Import Required Modules\"><\/a>\n### Import Required Modules","77d74020":"For our model to work with high accuracy, our attributes must be meaningful. For this, we'll use a method that assigns weights to attributes based on their meaning. The purpose of this method is to eliminate the weakest feature (or attributes) until the specified number of features that fit a model is reached.\nNow we will do feature elimination.","fa481071":"Let's create a Random Forest Regressor model and look at its score","70e2ef5d":"### Correlation Matrix","d7ef36a5":"Let's create a eXtreme Gradient Boosting model and look at its score","0a30496b":"Let's look at the distribution of fueltype value classified according to carbody values \u200b\u200baccording to price value.","db4ff42e":"Let's create a Linear Regression model and look at its score","b83199eb":"Let's create a Decision Tree Regressor model and look at its score","ea322cb0":"Everything looks fine for now in the model column.","995ea161":"in the same way, let's look at the distribution of the values \u200b\u200bin the categorical columns according to the price value.;","ed374bcd":"There are 2 missing data in the model column. We can remove rows for this data as it is a very small amount relative to the dataset.","c0674b97":"Let's look at the distribution of the columns we have chosen with each other.","0bf41090":"In our merge process, we need to synchronize our indexes so that there is no shift between our rows. If we do not do this, the existing rows in our dataset and the rows we transform may not match correctly. this causes each row in our dataset to now display incorrect values.","6e88fb63":"### Data Visualization","fc703229":"Let's look at the correlation of numerical columns","fb3fc988":"### Categorical Data Converting","189db074":"Let's look at the weights of the values in the categorical columns"}}