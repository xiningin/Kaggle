{"cell_type":{"c1a5fadd":"code","c3f177bc":"code","22410ebf":"code","e62d64f9":"code","9d8f985a":"code","1ee577a2":"code","01bd0514":"code","7c89815d":"code","b2ad06a0":"code","256a8f5a":"code","068437d6":"code","2111ba6a":"code","c828cacf":"markdown","f664f65e":"markdown"},"source":{"c1a5fadd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3f177bc":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\n\nall_data = pd.concat([train,test], sort=False)","22410ebf":"print(train.shape)\npd.set_option('display.max_columns', 100) # display max 100 columns \ntrain.head()\n","e62d64f9":"print(test.shape)\ntest.head()","9d8f985a":"all_data.info()","1ee577a2":"all_data.dtypes.sort_values()","01bd0514":"# All data type int\nall_data.select_dtypes(include='int').head()","7c89815d":"# All data type float\nall_data.select_dtypes(include='float').head()","b2ad06a0":"# All data type object\nall_data.select_dtypes(include='object').head()","256a8f5a":"# All columns with columns with one null or more\nmissingPercent = (all_data.isnull().sum()[all_data.isnull().sum() > 0]\/all_data.shape[0]*100).round(decimals=2) # missing count to %\nmissingPercentSorted = missingPercent.sort_values(ascending=False)\nmissingPercentSorted","068437d6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(25,8))\nplt.title('Number of missing rows')\nmissing_count = pd.DataFrame(missingPercent, columns=['percent']).sort_values(by=['percent'],ascending=False).head(20).reset_index()\nmissing_count.columns = ['features','percent']\nsns.set_style(\"whitegrid\")\nsns.barplot(x='features',y='percent', data = missing_count)","2111ba6a":"# The features with most missing values\nmissingPercentSorted[missingPercentSorted>10]","c828cacf":"# 1.1 - Load data","f664f65e":"# 1.2 - Data types"}}