{"cell_type":{"2b4274f2":"code","b234d2ba":"code","b52e34fb":"code","7363c8a6":"code","482d703c":"code","eb74996e":"code","45ce7fb1":"code","411fd80e":"code","1fae1049":"code","895ed55f":"code","9d187cbd":"code","10117799":"code","9db4f868":"code","24fba95a":"code","e63fca27":"code","45977a46":"code","0765d6b1":"code","848006b1":"code","9fd75b37":"code","53a9f02a":"markdown","3bfcc832":"markdown","85091e3f":"markdown","5fb3bb38":"markdown","8a45f8f8":"markdown","f946cca7":"markdown","64e64698":"markdown","6d18af18":"markdown","bfcf51f3":"markdown","9cbe9438":"markdown","8f2cc6f3":"markdown","3adda159":"markdown","967cf476":"markdown","00bd2675":"markdown","ae4500b2":"markdown","a760d80d":"markdown","4329f9d7":"markdown","dc1ba0d1":"markdown","f50ffc1d":"markdown","6ca0cc58":"markdown","7a415ab7":"markdown","9cfce568":"markdown","7aa0aca3":"markdown","9374da4a":"markdown","e13a526c":"markdown","46c76ca2":"markdown"},"source":{"2b4274f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\"\"\"\nData Manipulating\n\"\"\"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\"\"\"\nNLTK (Natural Language Tool Kit) | RE (Regular Expressions) | Count Vectorizer (SKLearn)\n\"\"\"\nimport nltk\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b234d2ba":"data = pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv',encoding=\"latin1\")","b52e34fb":"data.head()","7363c8a6":"data.info()","482d703c":"data.isnull().sum()","eb74996e":"x = data.drop(\"v1\",axis=1)\ny = data.v1","45ce7fb1":"for ftr in x:  # Each iterable is a feature name\n    if ftr != \"v2\":\n        \n        x.drop(ftr,axis=1,inplace=True)\n        \nx.info()","411fd80e":"y = [1 if each == \"ham\" else 0 for each in y]\ny[:5]","1fae1049":"lemma = nltk.WordNetLemmatizer()","895ed55f":"new_x = []\npattern = \"[^a-zA-Z]\"\nfor txt in x[\"v2\"]:\n    \n    txt = re.sub(pattern,\" \",txt) #Cleaning\n    txt = txt.lower() # Lowering\n    txt = nltk.word_tokenize(txt) #Tokenizing\n    txt = [lemma.lemmatize(each) for each in txt] # Lemmatizing\n    txt = \" \".join(txt) # Joining\n    new_x.append(txt) # Appending \n    ","9d187cbd":"new_x[:5]","10117799":"CV = CountVectorizer(stop_words='english')\nsparce_matrix = CV.fit_transform(new_x).toarray()","9db4f868":"x = sparce_matrix","24fba95a":"from sklearn.model_selection import train_test_split #Splitter\nfrom sklearn.naive_bayes import GaussianNB # Naive Bayes\nfrom sklearn.ensemble import RandomForestClassifier # Random Forest\nfrom sklearn.tree import DecisionTreeClassifier # Decision Tree\nfrom sklearn.linear_model import LogisticRegression # Logistic Regression\n","e63fca27":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1)\nprint(\"x_train len is \",len(x_train))\nprint(\"x_test len is\",len(x_test))\nprint(\"y_train len is\",len(y_train))\nprint(\"y_test len is\",len(y_test))","45977a46":"gnb = GaussianNB()\ngnb.fit(x_train,y_train)\ngnb.score(x_test,y_test)","0765d6b1":"rfc = RandomForestClassifier(n_estimators=50,random_state=1)\nrfc.fit(x_train,y_train)\nrfc.score(x_test,y_test)","848006b1":"dtc = DecisionTreeClassifier(random_state=1)\ndtc.fit(x_train,y_train)\ndtc.score(x_test,y_test)","9fd75b37":"logreg = LogisticRegression(random_state=1)\nlogreg.fit(x_train,y_train)\nlogreg.score(x_test,y_test)","53a9f02a":"And now I am going to convert y axis to int. In order to do this I am going to use list comprehension","3bfcc832":"## Random Forest Classification\nIn this section I am going to train a RFC model.","85091e3f":"What did we do in this operation:\n* We've used RE library's sub method. This method drops characters except for A-Z.\n* We've lowered texts, because in programming LIKE and like are different.\n* We've splitted texts into words.\n* We've lemmatized each words in a text\n* And finally we've joined them in a string\n","5fb3bb38":"# Result\nLet's take a look at our scores.\n\nNaive Bayes: %87\nRandom Forest: %98.3\nDecision Tree: %98\nLogistic Regression : %98.6\n\nSo, we can use Logistic Regression and Random Forest Classifier for spam text classification","8a45f8f8":"Our Random Forest Classification result is %98. It is better than NB","f946cca7":"Our score is %87 for Naive Bayes. It's great!","64e64698":"# Data Overview\n\nIn this section I am going to examine data. In order to do this I am going to use head(),info() and isnull() methods.","6d18af18":"# Introduction\n\nHello people, welcome to this kernel! In this kernel I am going to classify texts. Before the starting let's take a look at our schedule.\n\n# Schedule\n1. Importing Libraries and Data\n1. Data Overview\n1. Preprocessing\n    * Dropping Unnamed Features\n    * Converting Y Axis to Int64\n    * Preparing Texts for Count Vectorizer (Bag of Words)\n1. Bag of Words\n1. Text Classification\n    * Importing Classifers\n    * Train Test Split\n    * Naive Bayes Classification\n    * Random Forest Classification\n    * Decision Tree Classification\n    * Logistic Regression    \n1. Result\n1. Conclusion","bfcf51f3":"And now I am going to drop Unnamed Features","9cbe9438":"# Bag Of Words\n\nIn this section I am going to create bag of words. In order to do this I am going to use CountVectorizer method that I imported previously.","8f2cc6f3":"## Train Test Splitting\n\nIn this section I am going to splitd dataframe into train and test. In order to do this I am going to use train_test_split method from sklearn library.","3adda159":"# Conclusion\n\nThanks for your attention. If you upvote this kernel I would be glad. \n\nAnd if you have any question you can ask me, I am going to answer them as much as I can.\n","967cf476":"* As we can see there is no missing values in important features, the other ones have missing values but this is not important.","00bd2675":"* At the beginning I've wanted to separete these two axis because I am not going to apply those to y axis.","ae4500b2":"And our best score came from logistic regression. ","a760d80d":"# Preprocessing\n\nIn this section I am going to prepare dataset for count vectorizer in order to do this I am going to use a for loop.","4329f9d7":"## Naive Bayes Classification\n\nIn this sub-section I am going to create a naive bayes classifier","dc1ba0d1":"## Decision Tree Classification\nIn this section I am going to train a DTC model.","f50ffc1d":"## Importing Algorithms","6ca0cc58":"Our score is very similar with RFC score.","7a415ab7":"* There are unrellevant features in our dataset. In the future we will drop them.","9cfce568":"# Text Classification\nIn this section I am going to use our sparce matrix for classification. In order to do this I am going to use different algorithms from SKLearn library. \n\nIn this kernel I am going to use these classification algorithms:\n* Naive Bayes Classification\n* Random Forest Classification\n* Decision Tree Classification\n* Logistic Regression    \n\nIn the beginning of this section I am going to import libraries that I need","7aa0aca3":"* I've created a lemma object that helps us in lemmatizing words. In order to do this I've used nltk library's WordNetLemmatizer","9374da4a":"## Logistic Regression Classification\n\nIn this section I am going to train a LogReg model.","e13a526c":"What did we do in this operation:\n* In the beginning, we've created an count vectorizer object\n* And ,we said drop stop_words in English\n* And at the beginning we've sent x our x axis to our object\n\n### What is Sparce Matrix\nIt is the other name of bag of words\n\n\n### What is Stopwords?\nStopwords are words that unrellevant for text classification. Therefore we have to drop them. For instance in english *and*,*or* are stopwords.","46c76ca2":"# Importing Libraries and The Data\n\nIn this section I am going to import libraries that I will use However I am not going to import classification algorithms because I am going to import them when I need."}}