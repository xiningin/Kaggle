{"cell_type":{"a246611c":"code","136d2d0e":"code","3c9e665f":"code","8d6ecfab":"code","1ecd51aa":"code","c143e8b3":"code","922ce40d":"code","fe5b5fe9":"code","cbc3e1c7":"code","617ad4ea":"code","126c461e":"code","75256220":"code","1180d0c5":"code","0fb3be0a":"code","ab75aba6":"code","7358d58d":"code","e3608fab":"code","325015f6":"code","a663838d":"code","587635b9":"code","06cfcad7":"code","35473ece":"code","264b3a5c":"code","ca505f76":"code","57a1cb8c":"code","63ac59df":"code","1c796ec1":"code","63d0e523":"code","e1ce6a5a":"code","4327e6e9":"code","1a07e7f4":"code","a939d716":"code","3554f86b":"code","ea02eb69":"code","28548380":"code","3692265c":"code","c1ed6c68":"code","415b07c5":"code","fb4698f2":"code","bd6ee045":"code","9f655333":"code","24494b50":"code","d7681ae0":"code","9b97ff32":"code","d63d5802":"code","b0c2d66c":"code","5084f7c2":"code","4f7377cd":"code","292bb121":"code","aa1362da":"code","b91a7ac7":"code","85a2bdf2":"code","e34fb873":"code","438068f3":"code","ee1fb7c8":"code","ca6f3fa3":"code","7fac92e1":"code","9d766a00":"code","4df5ebe3":"code","eed21761":"code","732a0697":"code","ef34ab5f":"code","34a11ea3":"code","7db91496":"code","1092c88e":"code","e4b997d3":"code","f506c9e0":"code","a7f9b4aa":"code","c4117249":"code","838043f9":"code","9446ae90":"code","faeac718":"code","9bf43ef3":"code","ef50a0e7":"code","d5a7e665":"code","b926e559":"code","b90c1baf":"code","51825abc":"code","ee5f5f95":"code","2642abb5":"code","a89a74cc":"code","32d1adfa":"code","914b17a4":"code","8f2ef0a1":"code","a2e00009":"code","70d0a1f8":"code","07552530":"code","620c33f7":"code","6cb87332":"markdown","93dda0f8":"markdown","7f445c57":"markdown","d0cb7e70":"markdown","d74b2633":"markdown","68385442":"markdown","849bee13":"markdown","5ae8c652":"markdown","c9f2e863":"markdown","b1a815b6":"markdown","d384c34e":"markdown","cec53e20":"markdown","c7b20081":"markdown","3ff06622":"markdown","012fa52f":"markdown","bf6bca13":"markdown","4103a28d":"markdown","d69a8658":"markdown","951e0c67":"markdown","ad13214b":"markdown","0bf5b6ce":"markdown","600edd0b":"markdown","2412e7d6":"markdown","ca981413":"markdown","6416b5b9":"markdown","832d3e78":"markdown","3944964b":"markdown","02beab70":"markdown","56692a8b":"markdown","4ec4e727":"markdown","774701b7":"markdown","77fdee58":"markdown","17273ff6":"markdown","960e251f":"markdown","87727dc4":"markdown","19d50381":"markdown","99e31c54":"markdown","7cf49d0f":"markdown","8125f9b8":"markdown","0c3a7f87":"markdown","c2b6a622":"markdown","6cd6c07c":"markdown","0956f9b4":"markdown","458b5985":"markdown","dbbfa542":"markdown","a4ffea1a":"markdown"},"source":{"a246611c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-dark')\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","136d2d0e":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_passengerid = test_df['PassengerId']","3c9e665f":"train_df.columns","8d6ecfab":"train_df.head()","1ecd51aa":"train_df.describe()","c143e8b3":"train_df.info()","922ce40d":"def bar_plot(variable):\n    \n    var = train_df[variable]\n    varValue = var.value_counts()\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n {}\".format(variable,varValue))","fe5b5fe9":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","cbc3e1c7":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","617ad4ea":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","126c461e":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","75256220":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","1180d0c5":"train_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",  ascending = False)","0fb3be0a":"train_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",  ascending = False)","ab75aba6":"train_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",  ascending = False)","7358d58d":"train_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",  ascending = False)","e3608fab":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        \n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier step\n        outlier_step = IQR * 1.5\n        \n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","325015f6":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","a663838d":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","587635b9":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)\n","06cfcad7":"train_df.head()","35473ece":"train_df.columns[train_df.isnull().any()]","264b3a5c":"train_df.isnull().sum()","ca505f76":"train_df[train_df[\"Embarked\"].isnull()]","57a1cb8c":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","63ac59df":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","1c796ec1":"train_df[train_df[\"Fare\"].isnull()]","63d0e523":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","e1ce6a5a":"train_df[train_df[\"Fare\"].isnull()]","4327e6e9":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","1a07e7f4":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a939d716":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","3554f86b":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ea02eb69":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","28548380":"g = sns.FacetGrid(train_df,col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","3692265c":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","c1ed6c68":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","415b07c5":"train_df[train_df[\"Age\"].isnull()]","fb4698f2":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","bd6ee045":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","9f655333":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","24494b50":"train_df[\"Sex\"] = [1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]","d7681ae0":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","9b97ff32":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_prediction = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_prediction):\n        train_df[\"Age\"].iloc[i] = age_prediction\n    else:\n        train_df[\"Age\"].iloc[i] = age_med\n        ","d63d5802":"train_df[train_df[\"Age\"].isnull()]","b0c2d66c":"train_df[\"Name\"].head(10)","5084f7c2":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","4f7377cd":"train_df[\"Title\"].head(10)","292bb121":"sns.countplot(x = \"Title\",data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","aa1362da":"# convert to categorical\n\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i ==\"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","b91a7ac7":"sns.countplot(x = \"Title\",data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","85a2bdf2":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","e34fb873":"train_df.drop(labels = [\"Name\"],axis = 1,inplace = True)\n","438068f3":"train_df.head()","ee1fb7c8":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","ca6f3fa3":"train_df.head()","7fac92e1":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1\n","9d766a00":"train_df.head()","4df5ebe3":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","eed21761":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","732a0697":"train_df.head(10)","ef34ab5f":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","34a11ea3":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","7db91496":"train_df = pd.get_dummies(train_df,columns = [\"family_size\"])\ntrain_df.head()","1092c88e":"train_df[\"Embarked\"].head()","e4b997d3":"sns.countplot(x = \"Embarked\",data = train_df)\nplt.show()","f506c9e0":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","a7f9b4aa":"train_df[\"Ticket\"].head(20)","c4117249":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","838043f9":"train_df[\"Ticket\"].head(20)","9446ae90":"train_df.head()","faeac718":"train_df = pd.get_dummies(train_df,columns = [\"Ticket\"],prefix = \"T\")\ntrain_df.head(10)","9bf43ef3":"sns.countplot(x = \"Pclass\",data = train_df)\nplt.show()","ef50a0e7":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])\ntrain_df.head()","d5a7e665":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","b926e559":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"],axis = 1, inplace = True)","b90c1baf":"train_df.columns","51825abc":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","ee5f5f95":"train_df_len","2642abb5":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1,inplace = True)","a89a74cc":"test.head()","32d1adfa":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\",axis = 1)\ny_train = train[\"Survived\"]\nX_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","914b17a4":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)*100,2)\nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","8f2ef0a1":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\" : [0.001,0.01,0.1,1],\n                 \"C\" : [1,10,50,100,200,300,1000]}\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\" : [2,3,10],\n                \"min_samples_leaf\" : [1,3,10],\n                \"bootstrap\" : [False],\n                \"n_estimators\" : [100,300],\n                \"criterion\" : [\"gini\"]}\nlogreg_param_grid = {\"C\": np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid = {\"n_neighbors\" : np.linspace(1,19,10,dtype = int).tolist(),\n                 \"weights\" : [\"uniform\",\"distance\"],\n                 \"metric\": [\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","a2e00009":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid=classifier_param[i],cv = StratifiedKFold(n_splits = 10),scoring = \"accuracy\",n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","70d0a1f8":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\",\"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\",\"ML Models\",data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","07552530":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\",n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","620c33f7":"test_survived = pd.Series(votingC.predict(test),name = \"Survived\").astype(int)\ntest_PassengerId = pd.Series(votingC.predict(test),name = \"PassengerId\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","6cb87332":"<a id = \"25\"><\/a><br>\n## Ticket","93dda0f8":"<a id = \"11\"><\/a><br>\n# Visualization","7f445c57":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small families have more chances than middle and large families to survive","d0cb7e70":"<a id = \"7\"><\/a><br>\n# Outlier Detection","d74b2633":"* Age distribution looks like same. So sex is not informative for age.","68385442":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nCompare 5 Machine Learning Classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","849bee13":"* float64(2) : Fare and Age\n\n* int64(5) : Pclass, sibsp, parch, passengerId and survived\n\n* object(5) : Cabin, embarked, name, sex, ticket","5ae8c652":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","c9f2e863":"<a id = \"4\"><\/a><br>\n## Categorical Variable","b1a815b6":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","d384c34e":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","cec53e20":"<a id = \"22\"><\/a><br>\n## Name -- Title","c7b20081":"* Age is not correlated with sex. However it is correlated with Parch, SibSp and Pclass.","3ff06622":"<a id = \"26\"><\/a><br>\n## Pcalss","012fa52f":"<a id = \"27\"><\/a><br>\n## Sex","bf6bca13":"* Has less chance to survive when SibSp increase.\n* if SibSp < 3 then it has more chance to survive\n* Considering a new feature to describe Categories.","4103a28d":"<a id=\"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","d69a8658":"* Who pays the higher Fare have better survival rate.\n* Fare can be used for training.","951e0c67":"* age <=10 has a high survival rate\n* Oldest passengers over 70 years old has survived.\n* Most of the passengers between 20 to 35 years old has not survived.\n* Average ages are in 15 - 35 years old.","ad13214b":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","0bf5b6ce":"# Introduction\nThe Titanic, a luxury steamship, sank in the early hours of April 15, 1912, off the coast of Newfoundland in the North Atlantic after sideswiping an iceberg during its maiden voyage. Of the 2,240 passengers and crew on board, more than 1,500 lost their lives in the disaster\n<font color = 'blue'>\n    \nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numeriacal Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n    \n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","600edd0b":"<a id=\"14\"><\/a><br>\n## Parch -- Survived","2412e7d6":"<a id = \"2\"><\/a><br>\n# Variable Description\n1.PassengerId : unique id number to each passenger.\n\n2.Survived : passenger survive(1) or died(0) \n\n3.Pclass : passenger class.\n\n4.Name : name\n\n5.Sex : gender of passenger\n\n6.Age : age of passenger\n\n7.SibSp : number of siblings\/suppose\n\n8.Parch : number of parents\/children\n\n9.Ticket : ticket number\n\n10.Fare : amount of money spent on ticket\n\n11.Cabin : cabin category\n\n12.Embarked : port where passenger embarked(C = Cherboug, Q = Queenstown, S = Southampton)","ca981413":"Small families have more chance to survive than large families","6416b5b9":"<a id = \"29\"><\/a><br>\n# Modeling","832d3e78":"<a id = \"21\"><\/a><br>\n# Feature Engineering\n","3944964b":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable : Age, Passenger ID and Fare","02beab70":"<a id=\"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","56692a8b":"<a id=\"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","4ec4e727":"<a id = \"1\"><\/a><br>\n# Load and Check Data","774701b7":"<a id = \"5\"><\/a><br>\n## Numerical Variable","77fdee58":"<a id = \"24\"><\/a><br>\n## Embarked","17273ff6":"* Female passengers has more survived rate than male passengers.\n* Male passengers have better survival rate in Pclass 3 in Embarked = C.","960e251f":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","87727dc4":"Fare feature have correlation with survive feature(0.26)","19d50381":"<a id = \"23\"><\/a><br>\n## Family Size","99e31c54":"<a id=\"20\"><\/a><br>\n## Fill Missing: Age Feature","7cf49d0f":"<a id = \"9\"><\/a><br>\n## Find Missing Value\n","8125f9b8":"<a id = \"30\"><\/a><br>\n## Train - Test Split","0c3a7f87":"<a id = \"31\"><a\/><br>\n## Simple Logistic Regression","c2b6a622":"<a id=\"13\"><\/a><br>\n## SibSp -- Survived","6cd6c07c":"<a id=\"17\"><\/a><br>\n## Pclass -- Survived -- Age","0956f9b4":"* Passengers age in the 1st class is older than 2nd and 2nd is older than 3rd class. ","458b5985":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","dbbfa542":"<a id=\"15\"><\/a><br>\n## Pclass -- Survived","a4ffea1a":"<a id=\"16\"><\/a><br>\n## Age -- Survived"}}