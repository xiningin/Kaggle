{"cell_type":{"3ac1ac1f":"code","996f6f9c":"code","898c71e5":"code","99d47681":"code","73ce30fa":"code","390d06b2":"code","3879e6c1":"code","ded35078":"code","68359b9d":"code","7d71d64f":"markdown","a7d6e182":"markdown","507b47fe":"markdown","876fe6af":"markdown"},"source":{"3ac1ac1f":"# generate data\n# list of points \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\n\nN=10\nX, y = datasets.make_blobs(n_samples=2*N, centers=2, n_features=2, center_box=(0, 15))\n#Code g\u1ed1c t\u1ea1o d\u1eef li\u1ec7u kh\u00e1 kh\u00f3 hi\u1ec3u n\u00ean m\u00ecnh chuy\u1ec3n sang code n\u00e0y. N\u1ebfu c\u1ea7n linearly seperable th\u00ec mn c\u00f3 th\u1ec3 thu nh\u1ecf \n# center_box = (0,5)\nplt.plot(X[:, 0][y == 0], X[:, 1][y == 0], 'ro', label = 'negative')\nplt.plot(X[:, 0][y == 1], X[:, 1][y == 1], 'bs', label = 'positive')\nplt.axis('equal')\nplt.legend()\nplt.show()\n\nX0 = X[y == 1].T # X0 = [[x],[y]]: x,y l\u00e0 t\u1ecda \u0111\u1ed9 \u0111i\u1ec3m\nX1 = X[y == 0].T\nprint ('\\nX0',X0)\nprint ('\\nX1',X1)","996f6f9c":"X = np.concatenate((X0, X1), axis = 1)\nprint ('X',X) #X = [x1,x2,y1,y2]\ny = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1) # T\u1ea1o nh\u00e3n cho d\u1eef li\u1ec7u neg v\u00e0 pos\nprint ('\\ny',y)\n# Xbar \nX = np.concatenate((np.ones((1, 2*N)), X), axis = 0) #1 l\u00e0 \u0111\u1ec3 cho w0\nprint ('\\nx.', X)\n","898c71e5":"def h(w, x):    \n    return np.sign(np.dot(w.T, x)) #T\u00ednh \u0111\u1ea7u ra ma tr\u1eadn xT v\u00e0 x xem neg hay pos\n\ndef has_converged(X, y, w):\n    return np.array_equal(h(w, X), y) #True if h(w, X) == y else False\n\ndef perceptron(X, y, w_init):\n    w = [w_init]\n    N = X.shape[1]\n    mis_points = []\n    e = 0\n    epochs = 5 #VD data kh\u00f4ng linearly seperabel th\u00ec s\u1ebd stop sau s\u1ed1 TG c\u00f3 h\u1ea1n\n    while True:\n        # mix data \n        mix_id = np.random.permutation(N)\n        for i in range(N):\n            xi = X[:, mix_id[i]].reshape(3, 1) # INPUT: Vector (1,x,y)\n            yi = y[0, mix_id[i]] # OUTPUT\n            if h(w[-1], xi)[0] != yi: #W[-1] l\u00e0 input weight vector (w0,w1,w2)\n                mis_points.append(mix_id[i])\n                w_new = w[-1] + yi*xi \n                w.append(w_new) # L\u00e0 b\u1ea3ng weight c\u1ee7a 20 data\n                \n        e = e+1\n        print ('e',e)\n        if has_converged(X, y, w[-1]) or e == epochs:\n            break\n    return (w, mis_points)\n# w ch\u1ec9 ph\u1ee5c v\u1ee5 cho vi\u1ec7c l\u1eadp GIF, c\u00f2n l\u00fac v\u1ebd ch\u1ec9 c\u1ea7n array w cu\u1ed1i c\u00f9ng l\u00e0 \u0111\u1ee7\n\nd = X.shape[0] #S\u1ed1 chi\u1ec1u d\u1eef li\u1ec7u\nw_init = np.random.randn(d, 1) #Kh\u1edfi t\u1ea1o w b\u1ea5t k\u00ec\n(w, m) = perceptron(X, y, w_init)\nprint(m)\nprint(w)\n# print(len(w))\n","99d47681":"def draw_line(w):\n    w0, w1, w2 = w[0], w[1], w[2]\n    if w2 != 0:\n        x11, x12 = -15, 15\n        return plt.plot([x11, x12], [-(w1*x11 + w0)\/w2, -(w1*x12 + w0)\/w2], 'k')\n    else:\n        x10 = -w0\/w1\n        return plt.plot([x10, x10], [-15, 15], 'k')\n\n## GD example\nimport matplotlib.animation as animation\nfrom matplotlib.animation import FuncAnimation \ndef viz_alg_1d_2(w):\n    it = len(w)    \n    fig, ax = plt.subplots(figsize=(5, 5))  \n    def update(i):\n        plt.cla()\n        #points\n        plt.plot(X0[0, :], X0[1, :], 'b^', markersize = 8, alpha = .8, label = 'positive')\n        plt.plot(X1[0, :], X1[1, :], 'ro', markersize = 8, alpha = .8, label = 'negative')\n        #plt.axis([-5 , 17, -2, 12]) #xmin, xmax, ymin, ymax \n        plt.legend()\n        if i < it:\n            i2 =  i\n        else: \n            i2 = it-1\n        ani = draw_line(w[i2])\n        if i < it-1:\n            # print(X[1, m[i]], X[2, ])\n            circle = plt.Circle((X[1, m[i]], X[2, m[i]]), 0.15, color='k', fill = False)\n            ax.add_artist(circle)\n       \n\n        label = 'PLA: iter %d\/%d' %(i2, it-1)\n        ax.set_xlabel(label)\n        return ani, ax \n        \n    anim = FuncAnimation(fig, update, frames=np.arange(0, it + 2), interval=10000)\n    anim.save('pla_vis.gif', dpi = 100, writer = 'imagemagick')\n    plt.show()\n#\u1ede Kaggle kh\u00f4ng hi\u1ec7n GIF m\u00e0 ch\u1ec9 hi\u1ec7n KQ cu\u1ed1i th\u00f4i\n    \n# x = np.asarray(x)\nviz_alg_1d_2(w)","73ce30fa":"import numpy as np \nimport matplotlib.pyplot as plt\nfrom scipy.spatial.distance import cdist\nnp.random.seed(22)\n\nmeans = [[2, 2], [4, 2]]\ncov = [[.3, .2], [.2, .3]]\nN = 10\nX0 = np.random.multivariate_normal(means[0], cov, N).T\nX1 = np.random.multivariate_normal(means[1], cov, N).T   \n                                   \nX0 = np.concatenate((X0, np.random.randint(2, 5, N) * (np.ones((1, N)))), axis = 0)\nX1 = np.concatenate((X1, np.random.randint(0, 3, N) * (np.ones((1, N)))), axis = 0) \n\n#X0, X1 l\u00e0 d\u1eef li\u1ec7u 3 chi\u1ec1u ch\u1ee9a t\u1ecda \u0111\u1ed9 (x,y,z)\nprint ('\\nx0.', X0)\nprint ('\\nx0.', X1)\n\nprint(y.shape)\n\nplt.plot(X0[0, :], X0[1, :], 'bs', markersize = 8, alpha = .8, label = 'positive')\nplt.plot(X1[0, :], X1[1, :], 'ro', markersize = 8, alpha = .8, label = 'negative')\nplt.axis('equal')\nplt.legend()\nplt.xlabel('X', fontsize = 20)\nplt.ylabel('Y', fontsize = 20)\nplt.title('Plane x,y')\nplt.show()\n\nplt.plot(X0[0, :], X0[2, :], 'bs', markersize = 8, alpha = .8, label = 'positive')\nplt.plot(X1[0, :], X1[2, :], 'ro', markersize = 8, alpha = .8, label = 'negative')\nplt.axis('equal')\nplt.legend()\nplt.xlabel('X', fontsize = 20)\nplt.ylabel('Z', fontsize = 20)\nplt.title('Plane x,z')\nplt.show()\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.set_title('Data 3d')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nax.scatter(X0[0, :], X0[1, :], X0[2, :], c= 'b', label = 'positive')\nax.scatter(X1[0, :], X1[1, :], X1[1, :], c ='r', label = 'negative')\nplt.legend()\nplt.show()","390d06b2":"X = np.concatenate((X0, X1), axis = 1)\nprint ('X',X) #X = [x1,x2,y1,y2,z1,z2]\ny = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1) # T\u1ea1o nh\u00e3n neg v\u00e0 pos\nprint ('\\ny',y)\nX = np.concatenate((np.ones((1, 2*N)), X), axis = 0) #1 l\u00e0 \u0111\u1ec3 cho w0\nprint ('\\nx.', X)","3879e6c1":"def h(w, x):    \n    return np.sign(np.dot(w.T, x))\n\ndef has_converged(X, y, w):\n    return np.array_equal(h(w, X), y) #True if h(w, X) == y else False\n\ndef perceptron(X, y, w_init):\n    w = [w_init]\n    N = X.shape[1]\n    mis_points = []\n    e = 0\n    epochs = 5 #VD data khoong lenearly seperabel th\u00ec s\u1ebd stop sau s\u1ed1 TG c\u00f3 h\u1ea1n\n    while True:\n        # mix data \n        mix_id = np.random.permutation(N)\n        for i in range(N):\n            xi = X[:, mix_id[i]].reshape(4, 1) # INPUT: Vector (1,x,y)\n            yi = y[0, mix_id[i]] # OUTPUT\n            if h(w[-1], xi)[0] != yi: #W[-1] l\u00e0 input weight vector (w0,w1,w2)\n                mis_points.append(mix_id[i])\n                w_new = w[-1] + yi*xi \n\n                w.append(w_new) # L\u00e0 b\u1ea3ng weight c\u1ee7a 20 data\n        e = e+1\n        print ('e',e)\n        if has_converged(X, y, w[-1]) or e == epochs:\n            break\n    return (w, w_new,mis_points)\n\nd = X.shape[0]\nw_init = np.random.randn(d, 1)\n#print ('winit',w_init)\n(w,w_new, m) = perceptron(X, y, w_init)\nprint(m)\nprint('w',w)\nprint ('w_new',w_new) #C\u00e1i n\u00e0y thu\u1eadn ti\u1ec7n cho vi\u1ec7c show KQ th\u00f4i","ded35078":"def draw_plane(w):\n    w0, w1, w2, w3 = w[0], w[1], w[2], w[3]\n    XX = np.arange(2, 7, 0.1)\n    YY = np.arange(-5, 5, 0.1)\n    XX, YY = np.meshgrid(XX, YY)\n    Z = -(w1*XX + w2*YY + w0)\/w3\n    #print ('Z',Z)\n    return ax.plot_surface(XX, YY, Z, alpha=0.6)\n    \nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.set_title('Data 3d')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nax.scatter(X0[0, :], X0[1, :], X0[2, :], label = 'positive')\nax.scatter(X1[0, :], X1[1, :], X1[1, :], label = 'negative')\ndraw_plane(w_new)\nplt.legend()\nplt.show()","68359b9d":"x,y,z = 2,4,3 #input point\nprint ('w_new',w_new)\nw0, w1, w2, w3 = w_new[0], w_new[1], w_new[2], w_new[3]\nif w1*x + w2*y + w3*z +w0 >= 0:\n    print ('This is possitive')\nelse:\n    print ('This is negative')\n    \nfig = plt.figure()\nax = plt.axes(projection='3d')\nax.set_title('Data 3d')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nax.scatter(X0[0, :], X0[1, :], X0[2, :], label = 'positive')\nax.scatter(X1[0, :], X1[1, :], X1[1, :], label = 'negative')\nax.scatter(x, y, z,c='g', label = 'input')\ndraw_plane(w_new)\nplt.legend()\nplt.show()","7d71d64f":"# **Perceptron 3D**\n\nPh\u1ea7n n\u00e0y c\u00f3 tham kh\u1ea3o th\u00eam c\u00e1ch v\u1ebd 3d \nhttps:\/\/github.com\/netofigueira\/algorithms-sharing\/blob\/main\/PerceptronClass.ipynb","a7d6e182":"# **Test**","507b47fe":"# **PERCEPTRON**\n\u0110\u00e2y l\u00e0 code t\u1ed5ng h\u1ee3p t\u1ea1o ra d\u1eef li\u1ec7u linearly seperable dataset v\u00e0 g\u1eafn n\u00f3 tr\u00ean m\u00f4 h\u00ecnh 2d v\u00e0 3d\n","876fe6af":"# **Perceptron 2d**\nMn c\u00f3 th\u1ec3 tham kh\u1ea3o ngu\u1ed3n: https:\/\/github.com\/tiepvupsu\/tiepvupsu.github.io\/blob\/master\/assets\/pla\/PLA%20visualization.ipynb"}}