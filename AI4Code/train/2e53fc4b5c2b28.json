{"cell_type":{"7d505c68":"code","410a9693":"code","df819665":"code","c5156e41":"code","973e5068":"code","b4401d27":"code","f220eea5":"code","52aa16c0":"code","bb99978b":"code","bef3eef5":"code","403b69a2":"code","252c56ea":"code","eaeac3fc":"code","1c96b351":"code","b6d10178":"code","1f121fe5":"code","123bc233":"code","cef17a6e":"code","490e7c66":"code","caac2773":"code","48507fac":"code","c332efa6":"markdown","22fd0610":"markdown","d501f334":"markdown","bf5bd3cd":"markdown"},"source":{"7d505c68":"#importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix ","410a9693":"#import Dataset\ndata= pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","df819665":"data.head()","c5156e41":"data.isnull().sum()","973e5068":"data.describe()","b4401d27":"## Get the Fraud and the normal dataset \nfraud = data[data['Class']==1]\nnormal = data[data['Class']==0]","f220eea5":"# The classes are heavily skewed we need to solve this issue later.\nprint('Number of No Frauds Transactions :', round(data['Class'].value_counts()[0]))\nprint('Number of Frauds Transactions :', round(data['Class'].value_counts()[1]))","52aa16c0":"LABELS = [\"Normal\", \"Fraud\"]","bb99978b":"count_classes = pd.value_counts(data['Class'], sort = True)\ncount_classes.plot(kind = 'bar', rot=0)\nplt.title(\"Transaction Class Distribution\")\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")","bef3eef5":"#distribution of transaction amount and transaction time\nplt.figure(figsize=(9,4))\nsns.distplot(data['Amount'])\nplt.title('Distribution of Transaction Amount', fontsize=14)\n\nplt.figure(figsize=(9,4))\nsns.distplot(data['Time'])\nplt.title('Distribution of Transaction Time', fontsize=14)\n","403b69a2":"plt.figure(figsize=(12,7))\nplt.scatter( data['Time'],data['Amount'])\nplt.title('Time and Amount Scatter Plot', fontsize=14)\nplt.xlabel('Time')\nplt.ylabel('Amount')","252c56ea":"# We Will check Do fraudulent transactions occur more often during certain time frame ? Let us find out with a visual representation.\n\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True , figsize=(15,8)) \nf.suptitle('Time of transaction vs Amount by class')\nax1.scatter(fraud.Time, fraud.Amount)\nax1.set_title('Fraud')\n\n\nax2.scatter(normal.Time, normal.Amount)\nax2.set_title('Normal')\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Amount')\nplt.show()","eaeac3fc":"## Take some sample of the data\n\nsample_data = data.sample(frac = 0.1,random_state=1)\n\nsample_data.shape","1c96b351":"data.shape","b6d10178":"# The classes are heavily skewed we need to solve this issue later.\nprint('Number of No Frauds Transactions in sample :', round(sample_data['Class'].value_counts()[0]))\nprint('Number of Frauds Transactions in sample :', round(sample_data['Class'].value_counts()[1]))","1f121fe5":"## Correlation\nimport seaborn as sns\n#get correlations of each features in dataset\ncorrmat = sample_data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","123bc233":"#Create independent and Dependent Features\ncolumns = sample_data.columns.tolist()\n# Filter the columns to remove data we do not want \ncolumns = [c for c in columns if c not in [\"Class\"]]\n# Store the variable we are predicting \ntarget = \"Class\"\n# Define a random state \nstate = np.random.RandomState(42)\nX = sample_data[columns]\ny = sample_data[target]\nX_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))\n# Print the shapes of X & Y\nprint(X.shape)\nprint(y.shape)","cef17a6e":"#Determine the number of fraud and valid transactions in the dataset\n\nFraud = sample_data[sample_data['Class']==1]\n\nValid = sample_data[sample_data['Class']==0]\n\noutlier_fraction = len(Fraud)\/float(len(Valid))","490e7c66":"# Isolation Forest ----\n# training the model\nclf = IsolationForest(n_estimators=100, max_samples=len(X), \n                                       contamination=outlier_fraction,random_state=state, verbose=0)\nclf.fit(X)\n\n# predictions\ny_pred= clf.predict(X)\ny_pred_outliers = clf.predict(X_outliers)","caac2773":"#Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nn_errors = (y_pred != y).sum()\n\n# Run Classification Metrics\nprint(n_errors)\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y,y_pred))","48507fac":"#Making the Confusion Matrix\ncm_knn = confusion_matrix(y,y_pred)\n\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(cm_knn, annot=True, annot_kws={\"size\": 16}) # font size\n\nplt.show()","c332efa6":"## Credit Card Kaggle Anamoly Detection with Isolation-Forest ","22fd0610":"### Exploratory Data Analysis","d501f334":"## Model Prediction","bf5bd3cd":"#### Context\nIt is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase.\n\n#### Content\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\n#### Inspiration\nIdentify fraudulent credit card transactions.\n\nGiven the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.\n\n#### Acknowledgements\nThe dataset has been collected and analysed during a research collaboration of Worldline and the Machine Learning Group (http:\/\/mlg.ulb.ac.be) of ULB (Universit\u00e9 Libre de Bruxelles) on big data mining and fraud detection. More details on current and past projects on related topics are available on https:\/\/www.researchgate.net\/project\/Fraud-detection-5 and the page of the DefeatFraud project"}}