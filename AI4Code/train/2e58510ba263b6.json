{"cell_type":{"4e1396bb":"code","413bdfb9":"code","6aa6ce3b":"code","c01e1150":"code","0151726f":"code","b0f27077":"code","b5bf536d":"code","f7d7e1e1":"code","bd3a8810":"code","7903a8a0":"code","14a89744":"markdown","cda0488f":"markdown"},"source":{"4e1396bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","413bdfb9":"import matplotlib.pyplot as plt\nimport seaborn","6aa6ce3b":"df=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","c01e1150":"df.columns","0151726f":"(df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']]==0).sum()","b0f27077":"df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI']]=df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI']].replace(0,np.nan)","b5bf536d":"(df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']]==0).sum()","f7d7e1e1":"df.shape","bd3a8810":"X=df.drop(['Outcome'],axis=1)\ny=df['Outcome']\nprint(X.shape)\nprint(y.shape)","7903a8a0":"from sklearn.impute import KNNImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nimputer=KNNImputer(n_neighbors=5)\nmodel=RandomForestClassifier()\npipeline=Pipeline(steps=[('i',imputer),('m',model)])\npipeline.fit(X,y)\nraw_data=[1,78,66,15,94,28.1,0.137,11]\ny_hat=pipeline.predict([raw_data])\nprint(y_hat)","14a89744":"## Imputation","cda0488f":"## There's value containing zeros let's replace it with Nan"}}