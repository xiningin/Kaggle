{"cell_type":{"04115fff":"code","739233f7":"code","bfd73ba1":"code","f3ea7bcd":"code","2a687413":"code","7f200697":"code","6a209f0a":"code","792375e0":"code","420fa0b3":"code","bd92589b":"code","5ff77314":"code","95d4969d":"code","cdecf471":"code","a2fbbaa3":"code","7bbbb954":"code","19e7887a":"code","9d033077":"code","3509c897":"code","8e1e6e0d":"code","b728fe98":"code","4d32fed6":"code","90460939":"code","085a0780":"code","7dba298e":"code","bdb68bb7":"code","85499e0d":"code","ee3c21b0":"code","ca2b052a":"code","77623a80":"code","a5f3c11e":"code","87757559":"code","505da495":"code","980f47be":"code","917cd868":"code","4271f8c0":"code","e018db62":"code","5be7a167":"code","9e535036":"code","c865a359":"code","a99d067a":"code","e74d1709":"code","88fe338e":"code","8e7cbfde":"code","9de32b04":"code","060d9b49":"code","3464cb94":"code","499a8b2a":"code","5da1e851":"code","c486a54a":"code","4f37f583":"code","29736fbb":"code","59044a11":"code","65983667":"code","36f6d91d":"code","2a73e4d0":"code","e6fe6392":"code","dc00ffed":"code","178715bb":"code","ccaf0710":"code","8da130ad":"code","330172a4":"markdown","376715b4":"markdown","43e4db56":"markdown","8a3b880f":"markdown","df9f0cd6":"markdown","04de150c":"markdown","422505c8":"markdown","4a057400":"markdown","06ae5ee0":"markdown","87903309":"markdown","99f4b7ad":"markdown","a336c17c":"markdown","91bbc684":"markdown","c13df655":"markdown","60f6cea7":"markdown"},"source":{"04115fff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","739233f7":"data = pd.read_csv(\"\/kaggle\/input\/police\/police.csv\")","bfd73ba1":"data.head()","f3ea7bcd":"data.shape","2a687413":"data.dtypes","7f200697":"data.isnull().sum()","6a209f0a":"data.drop(\"county_name\",axis = 1,inplace = True)","792375e0":"data.columns","420fa0b3":"# alternative method\ndata.dropna(axis = \"columns\", how = \"all\")","bd92589b":"data[data.violation == \"Speeding\"].driver_gender.value_counts(normalize=True)","5ff77314":"data[data.driver_gender == \"M\"].violation.value_counts(normalize = True)","95d4969d":"data[data.driver_gender == \"F\"].violation.value_counts(normalize = True)","cdecf471":"data.groupby(\"driver_gender\").violation.value_counts(normalize = True)","a2fbbaa3":"data.search_conducted.value_counts(normalize = True)","7bbbb954":"data.search_conducted.mean()","19e7887a":"data.groupby(\"driver_gender\").search_conducted.mean()","9d033077":"data.groupby([\"violation\",\"driver_gender\"]).search_conducted.mean()","3509c897":"data.isnull().sum()","8e1e6e0d":"data.search_conducted.value_counts()","b728fe98":"data.search_type.value_counts(dropna = False)","4d32fed6":"data[\"frisk\"] = data.search_type.str.contains(\"Protective Frisk\")","90460939":"data.frisk.value_counts(dropna = False)","085a0780":"data.frisk.sum()","7dba298e":"data.frisk.mean()","bdb68bb7":"data.stop_date.str.slice(0, 4).value_counts()","85499e0d":"combined =data.stop_date.str.cat(data.stop_time, sep = \" \")\ndata[\"stop_datetime\"] = pd.to_datetime(combined)","ee3c21b0":"data.stop_datetime.dt.year.value_counts()","ca2b052a":"data.drugs_related_stop.dtype","77623a80":"# line plot by default (for a Series)\ndata.groupby(data.stop_datetime.dt.hour).drugs_related_stop.mean().plot()","a5f3c11e":"# alternative: count drug-related stops by hour\ndata.groupby(data.stop_datetime.dt.hour).drugs_related_stop.sum().plot()","87757559":"data.stop_datetime.dt.hour.value_counts().plot()","505da495":"data.stop_datetime.dt.hour.value_counts().sort_index().plot()","980f47be":"data.stop_duration.value_counts(dropna = False)","917cd868":"data[(data.stop_duration == \"1\")|(data.stop_duration == \"2\")].stop_duration = \"Nan\"","4271f8c0":"# assignment statement did not work\ndata.stop_duration.value_counts()","e018db62":"# solves SettingWithCopyWarning USE .loc\ndata.loc[(data.stop_duration == '1') | (data.stop_duration == '2'), 'stop_duration'] = 'NaN'","5be7a167":"# confusing\ndata.stop_duration.value_counts(dropna=False)","9e535036":"# replace 'NaN' string with actual NaN value\nimport numpy as np\ndata.loc[data.stop_duration == 'NaN', 'stop_duration'] = np.nan","c865a359":"data.stop_duration.value_counts(dropna=False)","a99d067a":"# alternative method\ndata.stop_duration.replace(['1', '2'], value=np.nan, inplace=True)","e74d1709":"mapping = {'0-15 Min':8, '16-30 Min':23, '30+ Min':45}\ndata['stop_minutes'] = data.stop_duration.map(mapping)","88fe338e":"# matches value_counts for stop_duration\ndata.stop_minutes.value_counts()","8e7cbfde":"data.groupby('violation_raw').stop_minutes.mean()","9de32b04":"data.groupby('violation_raw').stop_minutes.agg(['mean', 'count'])","060d9b49":"data.groupby('violation_raw').stop_minutes.mean().plot()","3464cb94":"data.groupby('violation_raw').stop_minutes.mean().plot(kind='bar')","499a8b2a":"data.groupby('violation_raw').stop_minutes.mean().sort_values().plot(kind='barh')","5da1e851":"data.groupby('violation').driver_age.describe()","c486a54a":"data.driver_age.plot(kind='hist')","4f37f583":"data.driver_age.value_counts().sort_index().plot()","29736fbb":"data.hist('driver_age', by='violation')\nplt.show()","59044a11":"data.hist('driver_age', by='violation', sharex=True)\nplt.show()","65983667":"# this better then upside\ndata.hist('driver_age', by='violation', sharex=True, sharey=True)\nplt.show()","36f6d91d":"data['new_age'] = data.stop_datetime.dt.year - data.driver_age_raw\ndata[['driver_age', 'new_age']].hist()\nplt.show()","2a73e4d0":"data[['driver_age', 'new_age']].describe()","e6fe6392":"data[(data.new_age < 15) | (data.new_age > 99)].shape","dc00ffed":"data.driver_age_raw.isnull().sum()","178715bb":"5621-5327","ccaf0710":"# driver_age_raw NOT MISSING, driver_age MISSING\ndata[(data.driver_age_raw.notnull()) & (data.driver_age.isnull())].head()","8da130ad":"# set the ages outside that range as missing\ndata.loc[(data.new_age < 15) | (data.new_age > 99), 'new_age'] = np.nan\ndata.new_age.equals(data.driver_age)","330172a4":"## Does gender affect who gets searched during a stop?   \n### Lenssons:\n* Causation is difficult to conclude, so focus on relationship\n* Include all relevant factors when studying a relationship","376715b4":"## During a search, how often is the driver frisked?\n### Lessons:\n* Use string methods to find partial matches\n* Use the correct denominator when calculating rates\n* pandas calculations ignore missing values\n* Apply the \"smell test\" to your results","43e4db56":"# Stanford Open Policing Project","8a3b880f":"## Why is search_type missing so often?\n### Lessons:\n* Verify your assumptions about your data\n* pandas functions ignore missing values by default","df9f0cd6":"## How does drug activity change by time of day?\n### Lessons:\n* Use plots to help you understand trends\n* Create exploratory plots using pandas one-liners","04de150c":"## Which year had the least number of stops?\n### Lessons:\n* Consider removing chunks of data that may be biased\n* Use the datetime data type for dates and times","422505c8":"## Remove the column that only contains missing values\n### Lessons:\n* Pay attention to default arguments\n* Check your work\n* There is more than one way to do everything in pandas","4a057400":"## Plot the results of the first groupby from the previous exercise\n### Lessons:\n* Don't use a line plot to compare categories\n* Be conscious of sorting and orientation when plotting","06ae5ee0":"## Do most stops occur at night?\n### Lesson:\n*  Be conscious of sorting when plotting","87903309":"## Compare the age distributions for each violation\n### Lessons: \n* Use histograms to show distributions\n* Be conscious of axes when using grouped plots","99f4b7ad":"## Do men or women speed more often?  \n### Lessons: There is more than one way to understand a question","a336c17c":"## What is the mean stop_duration for each violation_raw?\n### Lessons:\n* Convert strings to numbers for analysis\n* Approximate when necessary\n* Use count with mean to looking for meaningless means","91bbc684":"## Find the bad data in the stop_duration column and fix it\n ### Lessons:\n*  Ambiguous data should be marked as missing\n*  Don't ignore the SettingWithCopyWarning\n*  NaN is not a string","c13df655":"# Introduction\n### We need to ask the right questions for analyze well\n### And we need to use the pandas library well\n### This kernel about correct questions, pandas functions and easy plot","60f6cea7":"## Pretend you don't have the driver_age column, and create it from driver_age_raw (and call it new_age)\n### Lessons:\n* Don't assume that the head and tail are representative of the data\n* Columns with missing values may still have bad data (driver_age_raw)\n* Data cleaning sometimes involves guessing (driver_age)\n* Use histograms for a sanity check"}}