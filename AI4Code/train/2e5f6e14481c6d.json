{"cell_type":{"258c7b78":"code","a259c2f1":"code","2bc202bf":"code","c23bba0c":"code","efcef45c":"code","902ff3a3":"code","a409a98e":"code","cf27ec01":"code","aafa5beb":"code","16055afe":"code","4af952f0":"code","a7c59ef4":"code","2dad989b":"code","30e770b0":"code","32fbc0bd":"code","ce0e7312":"code","1d7bd59f":"code","892be75c":"code","7213f059":"code","cecfb5f5":"code","1b9c2ad1":"code","bfcc9ebf":"code","45fb05ec":"code","ee903042":"code","f61674fd":"code","b54f3ae8":"code","fbf744b2":"code","da077ce8":"code","0ad55811":"code","376cbef9":"code","f1745468":"code","7e7993a9":"code","e973a363":"code","45eef4dc":"code","c04b8e69":"code","ca82d987":"code","f61b0eeb":"code","5b56d0ef":"code","5fbd17c7":"code","7b37b63e":"code","9fffefc9":"code","15703ba3":"code","642bb64f":"code","4cda5333":"code","3fb2e9a0":"code","e6590c8d":"code","f1ebaa4f":"code","5b7a725c":"code","f066ba44":"code","c3913348":"markdown"},"source":{"258c7b78":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')\nimport random","a259c2f1":"df =pd.read_csv(\"..\/input\/heart-failure\/heart_failure.csv\")\nprint (\"Size of Dataframe:\",df.size)\nprint (\"Shape of columns:\",df.shape[1])\nprint (\"Shape of Row:\",df.shape[0])\ndf.head(5)","2bc202bf":"print (\"Missing Values \\n\",df.isnull().sum().sort_values(ascending=False))\nsns.heatmap(df.isnull())","c23bba0c":"df.describe()","efcef45c":"df['age'] = df['age'].astype(int)","902ff3a3":"df.head()","a409a98e":"df.rename(columns={'DEATH_EVENT': 'death event'},inplace=True)","cf27ec01":"df.head(2)","aafa5beb":"df['age'].value_counts().sort_index(ascending=True)","16055afe":"Bins = [36,54,78,95]\nLabels = [\"36-53\",\"54-77\",\"78-95\"]\ndf['age'] = pd.cut(df['age'],labels=Labels,bins=Bins)","4af952f0":"heart_failure_analysis = df.copy()","a7c59ef4":"heart_failure_analysis['death event'] = heart_failure_analysis['death event'].apply(lambda x:\"Death\" if x == 1 else \"Not Death\")\nheart_failure_analysis['smoking'] = heart_failure_analysis['smoking'].apply(lambda x:\"Smoking\" if x == 1 else \"Not Smoking\")\nheart_failure_analysis['sex'] = heart_failure_analysis['sex'].apply(lambda x:\"Male\" if x == 1 else \"Female\")\nheart_failure_analysis['high_blood_pressure'] = heart_failure_analysis['high_blood_pressure'].apply(lambda x:'High blood Pressure' if x == 1 else 'Not High Blood Pressure')\nheart_failure_analysis['diabetes'] =heart_failure_analysis['diabetes'].apply(lambda x:'Diabetes' if x == 1 else 'No Diabetes')\nheart_failure_analysis['anaemia'] = heart_failure_analysis['anaemia'].apply(lambda x:'Anaemia' if x ==1 else \"Not Anaemia\")","2dad989b":"heart_failure_analysis.head()","30e770b0":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['age'],palette='gnuplot2')\nplt.xlabel('Age')\nplt.ylabel('Age Count')\nplt.title(\"Age Distribution\",fontsize =16)","32fbc0bd":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['anaemia'],palette='gnuplot2')\nplt.xlabel('Anaemia')\nplt.ylabel('Anaemia Count')\nplt.title(\"Anaemia Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","ce0e7312":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['diabetes'],palette='gnuplot2')\nplt.xlabel('diabetes')\nplt.ylabel('diabetes Count')\nplt.title(\"Diabetes Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","1d7bd59f":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['high_blood_pressure'],palette='gnuplot2')\nplt.xlabel('blood pressure')\nplt.ylabel('blood pressure Count')\nplt.title(\"blood pressure Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","892be75c":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['smoking'],palette='gnuplot2')\nplt.xlabel('smoking')\nplt.ylabel('smoking Count')\nplt.title(\"smoking Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","7213f059":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['sex'],palette='gnuplot2')\nplt.xlabel('sex')\nplt.ylabel('Sex Count')\nplt.title(\"Sex Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","cecfb5f5":"plt.figure(figsize=(8,5))\nsns.countplot(heart_failure_analysis['smoking'],hue=heart_failure_analysis['sex'],palette='hot')\nplt.xlabel('smoking')\nplt.ylabel('smoking Count')\nplt.title(\"smoking Distribution\",fontsize = 16)\nplt.tight_layout(pad=0.4)","1b9c2ad1":"import plotly.express as px\nimport plotly.graph_objects as go","bfcc9ebf":"px.pie(heart_failure_analysis,names='smoking',hole=0.4,title=\"Smoking vs Not Smoking\")","45fb05ec":"px.pie(heart_failure_analysis,names='diabetes',hole=0.4,title=\"diabetes vs No diabetes\")","ee903042":"heart_failure_analysis[:2]","f61674fd":"print (\"anaemia:\\n \\n\",heart_failure_analysis['anaemia'].value_counts())\nprint('\\n')\nprint (\"diabetes:\\n \\n\",heart_failure_analysis['diabetes'].value_counts())\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.countplot(heart_failure_analysis['age'],hue=heart_failure_analysis['anaemia'],palette='gnuplot')\nplt.xlabel('anaemia')\nplt.ylabel('Count By Age')\nplt.subplot(1,2,2)\nsns.countplot(heart_failure_analysis['age'],hue=heart_failure_analysis['diabetes'],palette='gnuplot')\nplt.xlabel('diabetes')\nplt.ylabel('Count By Age')\nplt.tight_layout(pad=0.4)","b54f3ae8":"px.pie(heart_failure_analysis,names='age',hole=0.4,title='Age Bifurcation')","fbf744b2":"plt.figure(figsize=(10,9))\nsns.lmplot(x='time',y='platelets',data=heart_failure_analysis)\n\nplt.tight_layout(pad=0.4)","da077ce8":"plt.figure(figsize=(10,5))\nsns.lmplot(x='time',y='creatinine_phosphokinase',data=heart_failure_analysis)\nplt.show()\nplt.tight_layout(pad=0.4)","0ad55811":"plt.figure(figsize=(10,5))\nsns.lmplot(x='time',y='ejection_fraction',data=heart_failure_analysis)\nplt.show()\nplt.tight_layout(pad=0.4)","376cbef9":"plt.figure(figsize=(10,5))\nsns.lmplot(x='time',y='serum_creatinine',data=heart_failure_analysis)\nplt.show()\nplt.tight_layout(pad=0.4)","f1745468":"plt.figure(figsize=(10,5))\nsns.lmplot(x='time',y='serum_sodium',data=heart_failure_analysis)\n\nplt.show()\nplt.tight_layout(pad=0.4)","7e7993a9":"heart_failure_analysis.head(5)","e973a363":"plt.figure(figsize=(12,5))\n\nplt.suptitle(\"Plot With Outliears\")\n\nplt.subplot(3,2,1)\nsns.boxplot(data=df,x='creatinine_phosphokinase')\nplt.subplot(3,2,2)\nsns.boxplot(data=df,x='ejection_fraction')\nplt.subplot(3,2,3)\nsns.boxplot(data=df,x='platelets')\nplt.subplot(3,2,4)\nsns.boxplot(data=df,x='serum_creatinine')\nplt.subplot(3,2,5)\nsns.boxplot(data=df,x='serum_sodium')\nplt.subplot(3,2,6)\nsns.boxplot(data=df,x='time')\n\nplt.tight_layout(pad=0.4)","45eef4dc":"plt.figure(figsize=(12,5))\n\nplt.suptitle(\"Plot Without Outliears\")\n\nplt.subplot(3,2,1)\ndf =df[(df['creatinine_phosphokinase']<1000)]\nsns.boxplot(df['creatinine_phosphokinase'])\nplt.subplot(3,2,2)\ndf =df[(df['ejection_fraction']<50) & (df[\"ejection_fraction\"]>20)]\nsns.boxplot(df['ejection_fraction'])\nplt.subplot(3,2,3)\ndf = df[(df['platelets']>150000) & (df['platelets']<400000)]\nsns.boxplot(df['platelets'])\nplt.subplot(3,2,4)\ndf = df[(df['serum_creatinine']<1.6)]\nsns.boxplot(df['serum_creatinine'])\nplt.subplot(3,2,5)\ndf = df[(df[\"serum_sodium\"]>130)]\nsns.boxplot(df['serum_sodium'])\nplt.subplot(3,2,6)\nsns.boxplot(df['time'])\n\nplt.tight_layout(pad=0.4)","c04b8e69":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.utils import resample\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score  ","ca82d987":"df.head()","f61b0eeb":"encoder =LabelEncoder()","5b56d0ef":"columns = ['age','anaemia','diabetes','high_blood_pressure','sex','smoking','death event']","5fbd17c7":"for i in columns:\n    df[i] = encoder.fit_transform(df[i])","7b37b63e":"df.head()","9fffefc9":"majority = df[df['death event']==0]\nminority = df[df['death event']==1]","15703ba3":"unsample =resample(minority,replace=True,n_samples=len(majority))","642bb64f":"heart_failure_analysis = pd.concat([majority,unsample])\nheart_failure_analysis = heart_failure_analysis.sample(frac=1).reset_index(drop=True)","4cda5333":"heart_failure_analysis.head()","3fb2e9a0":"X = heart_failure_analysis.drop(columns=['death event'],axis=1)\ny = heart_failure_analysis['death event']","e6590c8d":"DataModels = pd.DataFrame()","f1ebaa4f":"def TrainandTestwithMinMaxScalar (X,y,algorithm,modelname):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=52)\n    norm =MinMaxScaler().fit(X_train)\n    X_train =norm.transform(X_train)\n    X_test = norm.transform(X_test)\n    model = algorithm\n    model.fit(X_train,y_train)\n    predection = model.predict(X_test)\n    score = round((accuracy_score(y_test, predection)*100),2)\n    print (\"\\nModel Score:\",score,\"%\")\n    print (\"precision_score:\",precision_score(y_test,predection))\n    print(\"Recall\",recall_score(y_test,predection))\n    print (\"F1 Score:\",f1_score(y_test,predection))\n    print (\"ROC AUC Score:\",roc_auc_score(y_test,predection))\n    print(\"Confusion Matrix:\",confusion_matrix(y_test,predection))\n    print()\n    \n    model = {}\n    \n    model['Algorithm'] = modelname\n    model['Model Score'] = str(score) + \"%\"\n    model['Precision'] = round(precision_score(y_test, predection),2)\n    model['Recall'] = round(recall_score(y_test, predection),2)\n    model['F1 score'] = round(f1_score(y_test, predection),2)\n    model['ROC-AUC score'] = round(roc_auc_score(y_test, predection),2)\n    \n    return model","5b7a725c":"algorithms = {\"Random Forest\":RandomForestClassifier(),\"Decesion Tree\":DecisionTreeClassifier(),\"Logistic Regression\":LogisticRegression(),\n            \"K-Nearest- Neghobour\":KNeighborsClassifier(n_neighbors=3),\"Supportive Vector Classifier\":SVC()}\n\nfor i,j in algorithms.items():\n    print(\"Algorithm Performance: {}\".format(i))\n    model= TrainandTestwithMinMaxScalar(X,y,j,i)\n    DataModels =DataModels.append(model,ignore_index=True)\n    print()","f066ba44":"DataModels.sort_values(by=\"F1 score\",ascending=False)","c3913348":"# Modeling"}}