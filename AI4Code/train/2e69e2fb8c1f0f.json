{"cell_type":{"c288642f":"code","8036019f":"code","e7a3f53a":"code","7a65e965":"code","1391dc55":"code","b94faa6c":"code","651e7da9":"code","d848442e":"code","1f768cac":"code","633382e1":"code","22621bdd":"code","ba9240c4":"code","c467891d":"code","bf4690e1":"code","2c316cc4":"code","63ac2cd6":"code","60de802a":"code","d5c7f209":"code","661377aa":"code","74ce2a7a":"markdown","c31d74d7":"markdown","3dcd5f97":"markdown","0e4157cf":"markdown","2adfc9bc":"markdown","95121d8d":"markdown","7772a39e":"markdown","209b0298":"markdown","a077b42b":"markdown","925eeb74":"markdown","dd6f33bb":"markdown","cc686740":"markdown","2f33a310":"markdown","844a2fe0":"markdown","e04280e3":"markdown","ba80e9d9":"markdown","0bac76c7":"markdown"},"source":{"c288642f":"# Importing core libraries\nimport numpy as np\nimport pandas as pd\nfrom time import time\nimport pprint\nimport joblib\n\n# Suppressing warnings because of skopt verbosity\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Classifiers\nimport lightgbm as lgb\n\n# Model selection\nfrom sklearn.model_selection import StratifiedKFold\n\n# Metrics\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import make_scorer\n\n# Skopt functions\nfrom skopt import BayesSearchCV\nfrom skopt.callbacks import DeadlineStopper, DeltaYStopper\nfrom skopt.space import Real, Categorical, Integer\n\n# Plotting functions\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n#sns.set(style='whitegrid')","8036019f":"# Loading data \nX = pd.read_csv(\"..\/input\/amazon-employee-access-challenge\/train.csv\")\nX_test = pd.read_csv(\"..\/input\/amazon-employee-access-challenge\/test.csv\")\n\n# Separating the target from the predictors\ny = X[\"ACTION\"]\nX.drop([\"ACTION\"], axis=\"columns\", inplace=True)\n\n# Separating the identifier from the test data\nids = X_test[\"id\"]\nX_test.drop(\"id\", axis=\"columns\", inplace=True)\n\n# Converting all integer variables to categorical\ninteger_cols = X.select_dtypes(include=['int']).columns\nX[integer_cols] = X[integer_cols].astype('category', copy=False)\nX_test[integer_cols] = X_test[integer_cols].astype('category', copy=False)","e7a3f53a":"print(\"Unique values\")\n(pd.concat([X.apply(lambda x: len(x.unique())), \n            X_test.apply(lambda x: len(x.unique()))\n           ], axis=\"columns\")\n .rename(columns={0: \"train\", 1:\"test\"}))","7a65e965":"print(\"Values in test but not in train\")\nfor col in integer_cols:\n    mismatched_codes = len(np.setdiff1d(X[col].unique(), X_test[col].unique()))\n    print(f\"{col:20} {mismatched_codes:4}\")","1391dc55":"print(\"Missing cases\")\n(pd.concat([X.isna().sum(), \n           X_test.isna().sum()\n           ], axis=\"columns\")\n .rename(columns={0: \"train\", 1:\"test\"}))","b94faa6c":"# label distribution\nfig, ax = plt.subplots(1, 1, figsize=(10, 6))\nsns.histplot(y, ax=ax)\nplt.show()","651e7da9":"# Distribution of values of variables\n_ = X.astype(int).hist(bins='auto', figsize=(24, 22), layout=(5, 2))","d848442e":"for col in integer_cols:\n    unique_values = sorted(X[col].unique())\n    print(col, \":\", unique_values[:5],'...', unique_values[-5:])\n    conversion_dict = dict(zip(unique_values, range(len(unique_values))))\n    # When working with the Categorical\u2019s codes, missing values will always have a code of -1.\n    X[col] = X[col].map(conversion_dict, na_action=-1).astype('category', copy=False)\n    X_test[col] = X_test[col].map(conversion_dict, na_action=-1).astype('category', copy=False)","1f768cac":"print(\"Missing cases\")\npd.concat([X.isna().sum(), X_test.isna().sum()], axis=\"columns\").rename(columns={0: \"train\", 1:\"test\"})","633382e1":"# Reporting util for different optimizers\ndef report_perf(optimizer, X, y, title=\"model\", callbacks=None):\n    \"\"\"\n    A wrapper for measuring time and performances of different optmizers\n    \n    optimizer = a sklearn or a skopt optimizer\n    X = the training set \n    y = our target\n    title = a string label for the experiment\n    \"\"\"\n    start = time()\n    \n    if callbacks is not None:\n        optimizer.fit(X, y, callback=callbacks)\n    else:\n        optimizer.fit(X, y)\n        \n    d=pd.DataFrame(optimizer.cv_results_)\n    best_score = optimizer.best_score_\n    best_score_std = d.iloc[optimizer.best_index_].std_test_score\n    best_params = optimizer.best_params_\n    \n    print((title + \" took %.2f seconds,  candidates checked: %d, best CV score: %.3f \"\n           + u\"\\u00B1\"+\" %.3f\") % (time() - start, \n                                   len(optimizer.cv_results_['params']),\n                                   best_score,\n                                   best_score_std))    \n    print('Best parameters:')\n    pprint.pprint(best_params)\n    print()\n    return best_params","22621bdd":"# Converting average precision score into a scorer suitable for model selection\nroc_auc = make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True)","ba9240c4":"# Setting a 5-fold stratified cross-validation (note: shuffle=True)\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)","c467891d":"clf = lgb.LGBMClassifier(boosting_type='gbdt',\n                         metric='auc',\n                         objective='binary',\n                         n_jobs=1, \n                         verbose=-1,\n                         random_state=0)","bf4690e1":"search_spaces = {\n    'learning_rate': Real(0.01, 1.0, 'log-uniform'),     # Boosting learning rate\n    'n_estimators': Integer(30, 5000),                   # Number of boosted trees to fit\n    'num_leaves': Integer(2, 512),                       # Maximum tree leaves for base learners\n    'max_depth': Integer(-1, 256),                       # Maximum tree depth for base learners, <=0 means no limit\n    'min_child_samples': Integer(1, 256),                # Minimal number of data in one leaf\n    'max_bin': Integer(100, 1000),                       # Max number of bins that feature values will be bucketed\n    'subsample': Real(0.01, 1.0, 'uniform'),             # Subsample ratio of the training instance\n    'subsample_freq': Integer(0, 10),                    # Frequency of subsample, <=0 means no enable\n    'colsample_bytree': Real(0.01, 1.0, 'uniform'),      # Subsample ratio of columns when constructing each tree\n    'min_child_weight': Real(0.01, 10.0, 'uniform'),     # Minimum sum of instance weight (hessian) needed in a child (leaf)\n    'reg_lambda': Real(1e-9, 100.0, 'log-uniform'),      # L2 regularization\n    'reg_alpha': Real(1e-9, 100.0, 'log-uniform'),       # L1 regularization\n    'scale_pos_weight': Real(1.0, 500.0, 'uniform'),     # Weighting of the minority class (Only for binary classification)\n        }","2c316cc4":"opt = BayesSearchCV(estimator=clf,                                    \n                    search_spaces=search_spaces,                      \n                    scoring=roc_auc,                                  \n                    cv=skf,                                           \n                    n_iter=3000,                                      # max number of trials\n                    n_points=3,                                       # number of hyperparameter sets evaluated at the same time\n                    n_jobs=-1,                                        # number of jobs\n                    iid=False,                                        # if not iid it optimizes on the cv score\n                    return_train_score=False,                         \n                    refit=False,                                      \n                    optimizer_kwargs={'base_estimator': 'GP'},        # optmizer parameters: we use Gaussian Process (GP)\n                    random_state=0)                                   # random state for replicability","63ac2cd6":"overdone_control = DeltaYStopper(delta=0.0001)               # We stop if the gain of the optimization becomes too small\ntime_limit_control = DeadlineStopper(total_time=60 * 45)     # We impose a time limit (45 minutes)\n\nbest_params = report_perf(opt, X, y,'LightGBM', \n                          callbacks=[overdone_control, time_limit_control])","60de802a":"clf = lgb.LGBMClassifier(boosting_type='gbdt',\n                         metric='auc',\n                         objective='binary',\n                         n_jobs=1, \n                         verbose=-1,\n                         random_state=0,\n                         **best_params)","d5c7f209":"clf.fit(X, y)","661377aa":"submission = pd.DataFrame({'Id':ids, 'ACTION': clf.predict_proba(X_test)[:, 1].ravel()})\nsubmission.to_csv(\"submission.csv\", index = False)","74ce2a7a":"# 4. Setting up optimization","c31d74d7":"We define a search space, expliciting the key hyper-parameters to optimize and the range where to look for the best values.","3dcd5f97":"We then define the Bayesian optimization engine, providing to it our LightGBM, the search spaces, the evaluation metric, the cross-validation. We set a large number of possible experiments and some parallelism in the search operations.","0e4157cf":"From the EDA we can get a few hints about what to do:\n* the target classes are unbalanced, we should consider re-balancing the data\n* all the categorical features have a different number of values ranging from 70 to up to over 7000 (high cardinality features)\n* there are no missing values but many categorical values appear just in test, not in train (this especially affects the RESOURCE feature)\n* the categorical values are sparse","2adfc9bc":"At this point we have a look at the training and test data in order to figure out how we can process the data.","95121d8d":"Finally we runt the optimizer and wait for the results. We have set some limits to its operations: we required it to stop if it cannot get consistent improvements from the search (DeltaYStopper) and time dealine set in seconds (we decided for 45 minutes).","7772a39e":"# 2. EDA","209b0298":"Having got the best hyperparameters for the data at hand, we instantiate a lightGBM using such values and train our model on all the available examples.\n<P>After having trained the model, we predict on the test set and we save the results on a csv file.","a077b42b":"We set up a stratified 5-fold cross validation: stratification helps us to obtain representative folds of the data and the target, though the target is unbalanced.","925eeb74":"# 5. Prediction on test data","dd6f33bb":"# 3. Feature engineering","cc686740":"As first steps: \n* we load the train and test data from disk\n* we separate the target from the training data\n* we separate the ids from the test data (thus train and test data have the same structure)\n* we convert integer variables to categories (thus our machine learning algorithm can pick them as categorical variables and not standard numeric one)","2f33a310":"First, we create a wrapper function to deal with running the optimizer and reporting back its best results.","844a2fe0":"We then define the evaluation metric, using the Scikit-learn function make_scorer allows us to convert the optimization into a minimization problem, as required by Scikit-optimize.","e04280e3":"We set up a generic LightGBM classifier.","ba80e9d9":"As the categorical features are sparsed and mismatched, we replace the original values with contiguous values, substituing with the value -1 in the test set for values that are not present in the train set. This operation should permit the LightGBM ","0bac76c7":"## 1. First steps"}}