{"cell_type":{"7e7372d0":"code","6047c749":"code","fefdd94b":"code","06dc2ac7":"code","7d67127b":"code","10637e9a":"code","ae5e16e1":"code","06f4224c":"markdown","930323ef":"markdown","de323874":"markdown","166f142a":"markdown","d8b81a7e":"markdown","e31378ee":"markdown"},"source":{"7e7372d0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6047c749":"heart = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart.head(5)","fefdd94b":"X_age_0 = [heart['age'][i] for i in range(len(heart)) if heart['DEATH_EVENT'][i]==0]\nX_age_1 = [heart['age'][i] for i in range(len(heart)) if heart['DEATH_EVENT'][i]==1]\n\ny_diabetes_0 = [heart['platelets'][i] for i in range(len(heart)) if heart['DEATH_EVENT'][i]==0]\ny_diabetes_1 = [heart['platelets'][i] for i in range(len(heart)) if heart['DEATH_EVENT'][i]==1]\n\nplt.scatter(X_age_0, y_diabetes_0, color='blue')\nplt.scatter(X_age_1, y_diabetes_1, color='red')\nplt.xlabel('Age')\nplt.ylabel('Platelets')\nplt.legend(['Class 0', 'Class 1'])\nplt.show()","06dc2ac7":"X = np.array([heart.loc[i][:-1] for i in range(len(heart))])\ny = np.array(heart['DEATH_EVENT'])\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\nprint(f\"Train Score : {clf.score(X_train, y_train)} \\t Validation Score : {clf.score(X_test, y_test)}\")\nprint(clf.get_params())","7d67127b":"y_pred = clf.predict(X_test)\ny_pred_prob = clf.predict_proba(X_test)\nprint(f\"Predictions : {y_pred[:10]}\\nPred Prob : {y_pred_prob[:10]}\")","10637e9a":"from sklearn.metrics import roc_auc_score, roc_curve\nfpr0, tpr0, _ = roc_curve(y_test, y_pred_prob[:,1])\n\nplt.plot(fpr0, tpr0)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()\n\nprint(f\"AUC Score : {roc_auc_score(y_test, y_pred_prob[:,1])}\")","ae5e16e1":"diabetes_death = 0\ndiabetes_notdeath = 0\nnotdiabetes_death = 0\n\nfor i in range(len(heart)):\n    if heart['diabetes'][i]==1 and y[i]==1:\n        diabetes_death += 1\n    elif heart['diabetes'][i]==1 and y[i]==0:\n        diabetes_notdeath += 1\n    elif heart['diabetes'][i]==0 and y[i]==1:\n        notdiabetes_death += 1\n\nprint(f\"Patients deceased having diabetes : {diabetes_death}\\nPatients deceased not having Diabetes : {notdiabetes_death}\\nPatients survived with diabetes : {diabetes_notdeath}\")","06f4224c":"# Splitting Dataset and applying Random Forest Classifier\n\nIn this step, the dataset is split into Train set and Validation set. $70%$ of the instances have been used for Training and rest $30%$ have been used in Validation of the model. You can further split the Validation Set into Test Set and Validation Set.\n\nAfter that, ```RandomForestClassifier```, an ensemble of Decision Trees is applied on the dataset. I have used ```Scikits-learn```'s inbuilt ```RandomForestClassifier``` here. For simplicity, Default parameters have been kept. Deault parameter values can be obtained by the ```get_params()``` method of ```RandomForestClassifier``` class.","930323ef":"# Finding correlation between Diabetes and Death Event\n\nThis is an additional task you can do to find a correlation between any of the feature and the Death Event due to Heart failure. I have chosen the attribute Diabetes i.e. trying to find if Diabetes has a major impact on death due to heart disease or not.\n\nFrom the dataset, the analysis shows that number of Patients with diabetes survived is more than the number of patients deceased without diabetes.","de323874":"# Probability of Predicted Classes\n\nWe can get the probabilities of predictions for each class. At a high level, we get the classification as the class having highest predicted probability. For example, in the first instance below, the model has predicted Class $0$ to be $0.92$ and Class $1$ to be $0.08$, therefore the Class prediction is $0$. I have used the inbuilt ```predict_proba()``` function to get the class prediction probabilities.","166f142a":"# **Visualization of 2 features**\n\nYou can visualize by taking any two features and plotting them along with the axes. As the target takes binary values, I have used 2 different colours to represent the values, Red for Deceased (1) and Blue for Not Deceased (0). Here I have taken **Age** and **Number of Platelets** along with Horizontal and Vertical axes respectively.","d8b81a7e":"### **Follow me on Github : [```ayan-cs```](https:\/\/github.com\/ayan-cs)**\n\n# **Import Dataset**\n\nThe dataset contains information if a patient has been deceased or not, based on some features\/symptoms observed in them. The features are as follows,\n\n- **Age** : $\\in \\mathbb{R}$\n- **Anaemia** : $\\in \\{0,1\\}$, Decrease of red blood cells or hemoglobin\n- **Creatinine Phosphokinase** : $\\in \\mathbb{Z}$, Level of the CPK enzyme in the blood (mcg\/L)\n- **Diabetes** : $\\in \\{0, 1\\}$, If the patient has diabetes\n- **Ejection Fraction** : $\\in [0, 100]$, Percentage of blood leaving the heart at each contraction\n- **High Blood Pressure** : $\\in \\{0, 1\\}$, If the patient has hypertension\n- **Platelets** : $\\in \\mathbb{Z}$, Platelets in the blood (kiloplatelets\/mL)\n- **Serum Creatinine** : $\\in \\mathbb{R}$, Level of serum creatinine in the blood (mg\/dL)\n- **Serum Sodium** : $\\in \\mathbb{Z}$, Level of serum sodium in the blood (mEq\/L)\n- **Sex** : $\\in \\{0,1\\}$, Woman or man\n- **Smoking** : $\\in \\{0,1\\}$, If the patient smokes or not\n- **Time** : $\\in \\mathbb{Z}$, Follow-up period (in days)\n\nBased on the feature values, it is given if the patient deceased during the follow-up period or not. This is given in column **DEATH_EVENT**, which takes values $\\in \\{0,1\\}$.","e31378ee":"# Computing ROC Curve and AUC Score\n\n**ROC** stands **Receiver Operator Characteristics** for and **AUC** means **Area Under the Curve**. Higher value of AUC means our binary classifier can efficiently distinguish between Class $0$ and Class $1$. You can check out some good explanations [here](https:\/\/www.analyticsvidhya.com\/blog\/2020\/06\/auc-roc-curve-machine-learning\/), [here](https:\/\/towardsdatascience.com\/understanding-auc-roc-curve-68b2303cc9c5).\n\nUsing ```Scikits-learn```'s inbuilt methods, you can obtain these easily."}}