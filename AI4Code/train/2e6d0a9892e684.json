{"cell_type":{"8bbb9187":"code","c1d5e977":"code","4bf60367":"markdown"},"source":{"8bbb9187":"%%writefile basiccount.py\nimport operator\nimport numpy as np\nfrom typing import List\nfrom collections import namedtuple\nimport traceback\nimport sys\n\n\nHistMatchResult = namedtuple(\"HistMatchResult\", \"idx length\")\n\n\ndef find_all_longest(seq, max_len=None) -> List[HistMatchResult]:\n    \"\"\"\n    Find all indices where end of `seq` matches some past.\n    \"\"\"\n    result = []\n\n    i_search_start = len(seq) - 2\n\n    while i_search_start > 0:\n        i_sub = -1\n        i_search = i_search_start\n        length = 0\n\n        while i_search >= 0 and seq[i_sub] == seq[i_search]:\n            length += 1\n            i_sub -= 1\n            i_search -= 1\n\n            if max_len is not None and length > max_len:\n                break\n\n        if length > 0:\n            result.append(HistMatchResult(i_search_start + 1, length))\n\n        i_search_start -= 1\n\n    result = sorted(result, key=operator.attrgetter(\"length\"), reverse=True)\n\n    return result\n\n\nclass Pred:\n    def __init__(self, *, alpha):\n        self.offset_probs = np.full(fill_value=1\/3, shape=3)\n        self.alpha = alpha\n        self.last_feat = None\n\n    def train(self, target):\n        if self.last_feat is not None:\n            offset = (target - self.last_feat) % 3\n\n            self.offset_probs *= (1 - self.alpha)  # technically you should better decay towards the mean instead?\n            self.offset_probs[offset] += self.alpha\n\n    def predict(self, feat):\n        result = np.roll(self.offset_probs, shift=feat)\n        self.last_feat = feat\n        return result\n    \n    \nclass BaseAgent:\n    def __init__(self):\n        self.my_hist = []\n        self.opp_hist = []\n        self.my_opp_hist = []\n        self.outcome_hist = []\n        self.step = None\n\n    def __call__(self, obs, conf):\n        try:\n            if obs.step == 0:\n                action = np.random.choice(3)\n                self.my_hist.append(action)\n                return action\n\n            self.step = obs.step\n\n            opp = int(obs.lastOpponentAction)\n            my = self.my_hist[-1]\n\n            self.my_opp_hist.append((my, opp))\n            self.opp_hist.append(opp)\n\n            outcome = {0: 0, 1: 1, 2: -1}[(my - opp) % 3]\n            self.outcome_hist.append(outcome)\n\n            action = self.action()\n\n            self.my_hist.append(action)\n\n            return action\n        except Exception:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    def action(self):\n        \"\"\"\n        This has to be implemented to return the action\n        \"\"\"\n        pass\n\n\nclass Agent(BaseAgent):\n    def __init__(self, alpha=0.01):\n        super().__init__()\n        self.predictor = Pred(alpha=alpha)\n\n    def action(self):\n        self.train()\n        probs = self.preds()\n        return np.random.choice(3, p=probs)\n\n    def train(self):\n        last_beat_opp = (self.opp_hist[-1] + 1) % 3\n        self.predictor.train(last_beat_opp)\n\n    def preds(self):\n        hist_match = find_all_longest(self.my_opp_hist, max_len=20)\n\n        if not hist_match:\n             return [1\/3,1\/3,1\/3]\n\n        feat = self.opp_hist[hist_match[0].idx]\n        pred = self.predictor.predict(feat)\n        return pred\n    \n    \nagent = Agent()\n\n\ndef call_agent(obs, conf):\n    return agent(obs, conf)","c1d5e977":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"rps\")\nenv.reset()\nenv.run([\"basiccount.py\", \"statistical\"]);\nenv.render(mode=\"ipython\", width=600, height=450)","4bf60367":"This is a simplified version of the [CountBot](https:\/\/www.kaggle.com\/superant\/rps-geometry-silver-rank-by-minimal-logic) without complex numbers. I removed the complex number for if you plan to leave all the steps discrete.\n\nIt could serve as a baseline to test if you have found a meaningful improvement upon the core initial step of a history matcher bot."}}