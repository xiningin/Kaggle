{"cell_type":{"e79265dc":"code","7ac26969":"code","d4edaf9f":"code","879a15f5":"code","4d1639e1":"code","b5040093":"code","ec5c27f5":"code","998d5e46":"code","1fc0f570":"code","ba244d62":"code","72fa8314":"code","eb499820":"code","c83486b3":"code","cff9e486":"code","f89d2137":"code","a49cca98":"code","ec164489":"code","82c64ac0":"code","09ca6fc2":"code","117ae2c3":"code","580b023b":"code","c0259ba6":"code","1a1467f3":"code","477bf805":"code","288a584c":"code","eda2620d":"code","e610bd2c":"code","1ef02e6f":"code","caa8a8e8":"code","b4adc57b":"code","0a643b4d":"code","8970decd":"code","9b3f4575":"code","3eb08adf":"code","76510792":"code","fb539268":"code","22bc13c7":"code","c48cea5a":"code","bb646f98":"code","329b4652":"code","03034ba3":"code","0423c884":"markdown","29d22e0b":"markdown","791e76f7":"markdown","09d55788":"markdown","5e5ddba1":"markdown","d6851923":"markdown","f9eab617":"markdown","40bb8011":"markdown","19f0c556":"markdown","c98ac0b2":"markdown","0f1374fe":"markdown","6708798b":"markdown","a2546f91":"markdown","d125c2a0":"markdown","84091129":"markdown","ccb140bb":"markdown","4b404a69":"markdown","a9154333":"markdown","08aba27e":"markdown","00c24d5d":"markdown","6d7a066b":"markdown","5c1eaa29":"markdown","bf91b8e6":"markdown","7af09da7":"markdown"},"source":{"e79265dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n","7ac26969":"df_full = pd.read_excel(\"..\/input\/Data_Train.xlsx\")\ndf_test = pd.read_excel(\"..\/input\/Data_Test.xlsx\")\ndf_full.head(10)","d4edaf9f":"df_full.shape","879a15f5":"df_full.info()\ndf_full.isnull().sum()","4d1639e1":"df_full['Name'] = df_full.Name.str.split().str.get(0)\ndf_test['Name'] = df_test.Name.str.split().str.get(0)\ndf_full.head()","b5040093":"df_full['Name'].value_counts().sum()","ec5c27f5":"# Get names of columns with missing values\ncols_with_missing = [col for col in df_full.columns\n                     if df_full[col].isnull().any()]\nprint(\"Columns with missing values:\")\nprint(cols_with_missing)","998d5e46":"# Let's deal with them one by one.\n\ndf_full['Seats'].fillna(df_full['Seats'].mean(),inplace=True)\ndf_test['Seats'].fillna(df_test['Seats'].mean(),inplace=True)","1fc0f570":"data = pd.concat([df_full,df_test], sort=False)","ba244d62":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,5))\ndata['Mileage'].value_counts().head(100).plot.bar()\nplt.show()","72fa8314":"df_full['Mileage'] = df_full['Mileage'].fillna('17.0 kmpl')\ndf_test['Mileage'] = df_test['Mileage'].fillna('17.0 kmpl')\n\n#I noticed the 14th entry (and others) have 0.0 kmpl. Let's replace that too.\n\ndf_full['Mileage'] = df_full['Mileage'].replace(\"0.0 kmpl\", \"17.0 kmpl\")\ndf_test['Mileage'] = df_test['Mileage'].replace(\"0.0 kmpl\", \"17.0 kmpl\")","eb499820":"plt.figure(figsize=(20,5))\ndata['Engine'].value_counts().head(100).plot.bar()\nplt.show()","c83486b3":"df_full['Engine'] = df_full['Engine'].fillna('1197 CC')\ndf_test['Engine'] = df_test['Engine'].fillna('1197 CC')","cff9e486":"plt.figure(figsize=(20,5))\ndata['Power'].value_counts().head(100).plot.bar()\nplt.show()","f89d2137":"df_full['Power'] = df_full['Power'].fillna('74 bhp')\ndf_test['Power'] = df_test['Power'].fillna('74 bhp')\n\n#I noticed the 76th entry (and others) have null bhp. Let's replace that too. \n#This was creating problems during LabelEncoding.\n\ndf_full['Power'] = df_full['Power'].replace(\"null bhp\", \"74 bhp\")\ndf_test['Power'] = df_test['Power'].replace(\"null bhp\", \"74 bhp\")","a49cca98":"plt.figure(figsize=(20,5))\ndata['New_Price'].value_counts().head(100).plot.bar()\nplt.show()","ec164489":"# # I'll select 4.78 cuz the others are way too high.\n\n# df_full['New_Price'] = df_full['New_Price'].fillna('4.78 Lakh')\n# df_test['New_Price'] = df_test['New_Price'].fillna('4.78 Lakh')\n\n# # Run the method get_number() defined below first.\n# # Converting it to float.\n\n# df_full['New_Price'] = df_full['New_Price'].apply(get_number).astype('float')\n# df_test['New_Price'] = df_test['New_Price'].apply(get_number).astype('float')","82c64ac0":"# Method to extract 'float' from 'object' \n\nimport re\n\ndef get_number(name):\n    title_search = re.search('([\\d+\\.+\\d]+\\W)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","09ca6fc2":"data['New_Price'] = data['New_Price'].fillna('0.0 Lakh') # dealt with missing values.\n\ndata['New_Price'] = data['New_Price'].apply(get_number).astype('float') #converted to float\n\ntotal = data['New_Price'].groupby(data['Name'])\nprint(total.mean().round(2))","117ae2c3":"df_full['New_Price'] = df_full['New_Price'].fillna('0.0 Lakh') # dealt with missing values.\ndf_full['New_Price'] = df_full['New_Price'].apply(get_number).astype('float') #converted to float","580b023b":"df_full.loc[df_full['Name']==\"Audi\", 'New_Price'] = df_full.loc[df_full['Name']==\"Audi\", 'New_Price'].replace(0.0,5.02)\ndf_full.loc[df_full['Name']==\"BMW\", 'New_Price'] = df_full.loc[df_full['Name']==\"BMW\", 'New_Price'].replace(0.0,11.14)\ndf_full.loc[df_full['Name']==\"Bentley\", 'New_Price'] = df_full.loc[df_full['Name']==\"Bentley\", 'New_Price'].replace(0.0,1.88)\ndf_full.loc[df_full['Name']==\"Datsun\", 'New_Price'] = df_full.loc[df_full['Name']==\"Datsun\", 'New_Price'].replace(0.0,3.14)\ndf_full.loc[df_full['Name']==\"Fiat\", 'New_Price'] = df_full.loc[df_full['Name']==\"Fiat\", 'New_Price'].replace(0.0,0.95)\n\ndf_full.loc[df_full['Name']==\"Ford\", 'New_Price'] = df_full.loc[df_full['Name']==\"Ford\", 'New_Price'].replace(0.0,1.16)\ndf_full.loc[df_full['Name']==\"Honda\", 'New_Price'] = df_full.loc[df_full['Name']==\"Honda\", 'New_Price'].replace(0.0,1.30)\ndf_full.loc[df_full['Name']==\"Hyundai\", 'New_Price'] = df_full.loc[df_full['Name']==\"Hyundai\", 'New_Price'].replace(0.0,1.03)\ndf_full.loc[df_full['Name']==\"Isuzu\", 'New_Price'] = df_full.loc[df_full['Name']==\"Isuzu\", 'New_Price'].replace(0.0,16.84)\ndf_full.loc[df_full['Name']==\"ISUZU\", 'New_Price'] = df_full.loc[df_full['Name']==\"ISUZU\", 'New_Price'].replace(0.0,16.84)\n\ndf_full.loc[df_full['Name']==\"Jaguar\", 'New_Price'] = df_full.loc[df_full['Name']==\"Jaguar\", 'New_Price'].replace(0.0,8.52)\ndf_full.loc[df_full['Name']==\"Jeep\", 'New_Price'] = df_full.loc[df_full['Name']==\"Jeep\", 'New_Price'].replace(0.0,22.75)\ndf_full.loc[df_full['Name']==\"Land\", 'New_Price'] = df_full.loc[df_full['Name']==\"Land\", 'New_Price'].replace(0.0,4.39)\ndf_full.loc[df_full['Name']==\"Mahindra\", 'New_Price'] = df_full.loc[df_full['Name']==\"Mahindra\", 'New_Price'].replace(0.0,1.20)\ndf_full.loc[df_full['Name']==\"Maruti\", 'New_Price'] = df_full.loc[df_full['Name']==\"Maruti\", 'New_Price'].replace(0.0,1.29)\n\ndf_full.loc[df_full['Name']==\"Mercedes-Benz\", 'New_Price'] = df_full.loc[df_full['Name']==\"Mercedes-Benz\", 'New_Price'].replace(0.0,7.97)\ndf_full.loc[df_full['Name']==\"Mini\", 'New_Price'] = df_full.loc[df_full['Name']==\"Mini\", 'New_Price'].replace(0.0,25.06)\ndf_full.loc[df_full['Name']==\"Mitsubishi\", 'New_Price'] = df_full.loc[df_full['Name']==\"Mitsubishi\", 'New_Price'].replace(0.0,12.03)\ndf_full.loc[df_full['Name']==\"Nissan\", 'New_Price'] = df_full.loc[df_full['Name']==\"Nissan\", 'New_Price'].replace(0.0,1.89)\ndf_full.loc[df_full['Name']==\"Porsche\", 'New_Price'] = df_full.loc[df_full['Name']==\"Porsche\", 'New_Price'].replace(0.0,0.07)\n\ndf_full.loc[df_full['Name']==\"Renault\", 'New_Price'] = df_full.loc[df_full['Name']==\"Renault\", 'New_Price'].replace(0.0,1.49)\ndf_full.loc[df_full['Name']==\"Skoda\", 'New_Price'] = df_full.loc[df_full['Name']==\"Skoda\", 'New_Price'].replace(0.0,3.63)\ndf_full.loc[df_full['Name']==\"Tata\", 'New_Price'] = df_full.loc[df_full['Name']==\"Tata\", 'New_Price'].replace(0.0,2.00)\ndf_full.loc[df_full['Name']==\"Toyota\", 'New_Price'] = df_full.loc[df_full['Name']==\"Toyota\", 'New_Price'].replace(0.0,4.38)\ndf_full.loc[df_full['Name']==\"Volksvagen\", 'New_Price'] = df_full.loc[df_full['Name']==\"Volksvagen\", 'New_Price'].replace(0.0,1.53)\ndf_full.loc[df_full['Name']==\"Volvo\", 'New_Price'] = df_full.loc[df_full['Name']==\"Volvo\", 'New_Price'].replace(0.0,4.62)","c0259ba6":"df_test['New_Price'] = df_test['New_Price'].fillna('0.0 Lakh') # dealt with missing values.\ndf_test['New_Price'] = df_test['New_Price'].apply(get_number).astype('float') #converted to float","1a1467f3":"# Modify df_test too...\n\ndf_test.loc[df_full['Name']==\"Audi\", 'New_Price'] = df_test.loc[df_test['Name']==\"Audi\", 'New_Price'].replace(0.0,5.02)\ndf_test.loc[df_full['Name']==\"BMW\", 'New_Price'] = df_test.loc[df_test['Name']==\"BMW\", 'New_Price'].replace(0.0,11.14)\ndf_test.loc[df_full['Name']==\"Bentley\", 'New_Price'] = df_test.loc[df_test['Name']==\"Bentley\", 'New_Price'].replace(0.0,1.88)\ndf_test.loc[df_full['Name']==\"Datsun\", 'New_Price'] = df_test.loc[df_test['Name']==\"Datsun\", 'New_Price'].replace(0.0,3.14)\ndf_test.loc[df_full['Name']==\"Fiat\", 'New_Price'] = df_test.loc[df_test['Name']==\"Fiat\", 'New_Price'].replace(0.0,0.95)\n\ndf_test.loc[df_full['Name']==\"Ford\", 'New_Price'] = df_test.loc[df_test['Name']==\"Ford\", 'New_Price'].replace(0.0,1.16)\ndf_test.loc[df_full['Name']==\"Honda\", 'New_Price'] = df_test.loc[df_test['Name']==\"Honda\", 'New_Price'].replace(0.0,1.30)\ndf_test.loc[df_full['Name']==\"Hyundai\", 'New_Price'] = df_test.loc[df_test['Name']==\"Hyundai\", 'New_Price'].replace(0.0,1.03)\ndf_test.loc[df_full['Name']==\"Isuzu\", 'New_Price'] = df_test.loc[df_test['Name']==\"Isuzu\", 'New_Price'].replace(0.0,16.84)\ndf_test.loc[df_full['Name']==\"ISUZU\", 'New_Price'] = df_test.loc[df_test['Name']==\"ISUZU\", 'New_Price'].replace(0.0,16.84)\n\ndf_test.loc[df_full['Name']==\"Jaguar\", 'New_Price'] = df_test.loc[df_test['Name']==\"Jaguar\", 'New_Price'].replace(0.0,8.52)\ndf_test.loc[df_full['Name']==\"Jeep\", 'New_Price'] = df_test.loc[df_test['Name']==\"Jeep\", 'New_Price'].replace(0.0,22.75)\ndf_test.loc[df_full['Name']==\"Land\", 'New_Price'] = df_test.loc[df_test['Name']==\"Land\", 'New_Price'].replace(0.0,4.39)\ndf_test.loc[df_full['Name']==\"Mahindra\", 'New_Price'] = df_test.loc[df_test['Name']==\"Mahindra\", 'New_Price'].replace(0.0,1.20)\ndf_test.loc[df_full['Name']==\"Maruti\", 'New_Price'] = df_test.loc[df_test['Name']==\"Maruti\", 'New_Price'].replace(0.0,1.29)\n\ndf_test.loc[df_full['Name']==\"Mercedes-Benz\", 'New_Price'] = df_test.loc[df_test['Name']==\"Mercedes-Benz\", 'New_Price'].replace(0.0,7.97)\ndf_test.loc[df_full['Name']==\"Mini\", 'New_Price'] = df_test.loc[df_test['Name']==\"Mini\", 'New_Price'].replace(0.0,25.06)\ndf_test.loc[df_full['Name']==\"Mitsubishi\", 'New_Price'] = df_test.loc[df_test['Name']==\"Mitsubishi\", 'New_Price'].replace(0.0,12.03)\ndf_test.loc[df_full['Name']==\"Nissan\", 'New_Price'] = df_test.loc[df_test['Name']==\"Nissan\", 'New_Price'].replace(0.0,1.89)\ndf_test.loc[df_full['Name']==\"Porsche\", 'New_Price'] = df_test.loc[df_test['Name']==\"Porsche\", 'New_Price'].replace(0.0,0.07)\n\ndf_test.loc[df_full['Name']==\"Renault\", 'New_Price'] = df_test.loc[df_test['Name']==\"Renault\", 'New_Price'].replace(0.0,1.49)\ndf_test.loc[df_full['Name']==\"Skoda\", 'New_Price'] = df_test.loc[df_test['Name']==\"Skoda\", 'New_Price'].replace(0.0,3.63)\ndf_test.loc[df_full['Name']==\"Tata\", 'New_Price'] = df_test.loc[df_test['Name']==\"Tata\", 'New_Price'].replace(0.0,2.00)\ndf_test.loc[df_full['Name']==\"Toyota\", 'New_Price'] = df_test.loc[df_test['Name']==\"Toyota\", 'New_Price'].replace(0.0,4.38)\ndf_test.loc[df_full['Name']==\"Volksvagen\", 'New_Price'] = df_test.loc[df_test['Name']==\"Volksvagen\", 'New_Price'].replace(0.0,1.53)\ndf_test.loc[df_full['Name']==\"Volvo\", 'New_Price'] = df_test.loc[df_test['Name']==\"Volvo\", 'New_Price'].replace(0.0,4.62)","477bf805":"plt.figure(figsize=(20,5))\ndf_full['New_Price'].value_counts().head(100).plot.bar()\nplt.show()\n\nplt.figure(figsize=(20,5))\ndf_test['New_Price'].value_counts().head(100).plot.bar()\nplt.show()","288a584c":"df_full.loc[df_full['Name']==\"Ambassador\", 'New_Price'] = df_full.loc[df_full['Name']==\"Ambassador\", 'New_Price'].replace(0.0,1.29)\ndf_full.loc[df_full['Name']==\"Chevrolet\", 'New_Price'] = df_full.loc[df_full['Name']==\"Chevrolet\", 'New_Price'].replace(0.0,1.29)\ndf_full.loc[df_full['Name']==\"Force\", 'New_Price'] = df_full.loc[df_full['Name']==\"Force\", 'New_Price'].replace(0.0,1.29)\ndf_full.loc[df_full['Name']==\"Lamborghini\", 'New_Price'] = df_full.loc[df_full['Name']==\"Lamborghini\", 'New_Price'].replace(0.0,1.29)\ndf_full.loc[df_full['Name']==\"OpelCorsa\", 'New_Price'] = df_full.loc[df_full['Name']==\"OpelCorsa\", 'New_Price'].replace(0.0,1.29)\n\ndf_test.loc[df_full['Name']==\"Ambassador\", 'New_Price'] = df_test.loc[df_test['Name']==\"Ambassador\", 'New_Price'].replace(0.0,1.29)\ndf_test.loc[df_full['Name']==\"Chevrolet\", 'New_Price'] = df_test.loc[df_test['Name']==\"Chevrolet\", 'New_Price'].replace(0.0,1.29)\ndf_test.loc[df_full['Name']==\"Force\", 'New_Price'] = df_test.loc[df_test['Name']==\"Force\", 'New_Price'].replace(0.0,1.29)\ndf_test.loc[df_full['Name']==\"Lamborghini\", 'New_Price'] = df_test.loc[df_test['Name']==\"Lamborghini\", 'New_Price'].replace(0.0,1.29)\ndf_test.loc[df_full['Name']==\"OpelCorsa\", 'New_Price'] = df_test.loc[df_test['Name']==\"OpelCorsa\", 'New_Price'].replace(0.0,1.29)","eda2620d":"# pd.pivot_table(data, index = 'Name', values='New_Price',\n#                                    aggfunc=lambda x: x.mode().iat[0])\n\n# # IndexError: index 0 is out of bounds for axis 0 with size 0\n","e610bd2c":"df_full.isnull().sum()","1ef02e6f":"df_full.head(10)","caa8a8e8":"df_full.info()","b4adc57b":"#Using the above defined method get_number()\n\ndf_full['Mileage'] = df_full['Mileage'].apply(get_number).astype('float')\ndf_full['Engine'] = df_full['Engine'].apply(get_number).astype('int')\ndf_full['Power'] = df_full['Power'].apply(get_number).astype('float')\n\ndf_test['Mileage'] = df_test['Mileage'].apply(get_number).astype('float')\ndf_test['Engine'] = df_test['Engine'].apply(get_number).astype('int')\ndf_test['Power'] = df_test['Power'].apply(get_number).astype('float')\n\ndf_full.info()","0a643b4d":"help(re) # This baby was realy helpful!","8970decd":"df_test.info()","9b3f4575":"df_full.head()","3eb08adf":"from sklearn.model_selection import train_test_split\n\ny = np.log1p(df_full.Price)  # Made a HUGE difference. MAE went down from 1.8 to 0.1!! Thanks to Rishi - @littleraj30 for pointing it out.\nX = df_full.drop(['Price'],axis=1)\n# df_test = df_test.drop('New_Price',axis=1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X,y,train_size=0.82,test_size=0.18,random_state=0)","76510792":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\n# X_train[object_cols] = label_encoder.fit_transform(X_train[object_cols])\n# X_valid[object_cols] = label_encoder.transform(X_valid[object_cols])\n# df_test[object_cols] = label_encoder.fit_transform(df_test[object_cols])\n\n# ValueError: bad input shape (4815, 5)\n# That's why I did it manually.\n\nX_train['Name'] = label_encoder.fit_transform(X_train['Name'])\nX_valid['Name'] = label_encoder.transform(X_valid['Name'])\ndf_test['Name'] = label_encoder.fit_transform(df_test['Name'])\n\nX_train['Location'] = label_encoder.fit_transform(X_train['Location'])\nX_valid['Location'] = label_encoder.transform(X_valid['Location'])\ndf_test['Location'] = label_encoder.fit_transform(df_test['Location'])\n\nX_train['Fuel_Type'] = label_encoder.fit_transform(X_train['Fuel_Type'])\nX_valid['Fuel_Type'] = label_encoder.transform(X_valid['Fuel_Type'])\ndf_test['Fuel_Type'] = label_encoder.fit_transform(df_test['Fuel_Type'])\n\nX_train['Transmission'] = label_encoder.fit_transform(X_train['Transmission'])\nX_valid['Transmission'] = label_encoder.transform(X_valid['Transmission'])\ndf_test['Transmission'] = label_encoder.fit_transform(df_test['Transmission'])\n\nX_train['Owner_Type'] = label_encoder.fit_transform(X_train['Owner_Type'])\nX_valid['Owner_Type'] = label_encoder.transform(X_valid['Owner_Type'])\ndf_test['Owner_Type'] = label_encoder.fit_transform(df_test['Owner_Type'])\n","fb539268":"X_train.head()","22bc13c7":"X_train.info()","c48cea5a":"# # Let's try scaling too.\n\n# from sklearn.preprocessing import StandardScaler\n# scaler = StandardScaler().fit(X_train)\n# rescaled_X_train = scaler.transform(X_train)\n\n# scaler = StandardScaler().fit(X_valid)\n# rescaled_X_valid = scaler.transform(X_valid)\n\n# scaler = StandardScaler().fit(df_test)\n# rescaled_df_test = scaler.transform(df_test)\n\n# from xgboost import XGBRegressor\n# from sklearn.metrics import mean_absolute_error,mean_squared_error,mean_squared_log_error\n\n# my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\n# my_model.fit(rescaled_X_train, y_train, \n#              early_stopping_rounds=5, \n#              eval_set=[(rescaled_X_valid, y_valid)], \n#              verbose=False)\n\n# predictions = my_model.predict(rescaled_X_valid)\n# print(\"MAE: \" + str(mean_absolute_error(predictions, y_valid)))\n# print(\"MSE: \" + str(mean_squared_error(predictions, y_valid)))\n# print(\"MSLE: \" + str(mean_squared_log_error(predictions, y_valid)))\n\n# # MAE: 2.115451765105513\n# # MSE: 17.56415019000094\n# # MSLE: 0.058881434868999126","bb646f98":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,mean_squared_log_error\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_valid, y_valid)], \n             verbose=False)\n\npredictions = my_model.predict(X_valid)\nprint(\"MAE: \" + str(mean_absolute_error(predictions, y_valid)))\nprint(\"MSE: \" + str(mean_squared_error(predictions, y_valid)))\nprint(\"MSLE: \" + str(mean_squared_log_error(predictions, y_valid)))","329b4652":"preds_test = my_model.predict(df_test)\npreds_test = np.exp(preds_test)-1 #converting target to original state\nprint(preds_test)\n\n# The Price is in the format xx.xx So let's round off and submit.\n\npreds_test = preds_test.round(2)\nprint(preds_test)","03034ba3":"output = pd.DataFrame({'Price': preds_test})\noutput.to_excel('submission.xlsx', index=False)","0423c884":"df_full.shape = (6019,13). So I guess all rows have been modified.","29d22e0b":"Now let's deal with 'New_Price'.","791e76f7":"I got the code for the above step from [here](https:\/\/www.kaggle.com\/funxexcel\/titanic-basic-solution-with-logistic-regression) and modified it.","09d55788":"I must have filled most of the missing values. Now let's use a bar chart to get the most occurring values and fill the rest of them.","5e5ddba1":"# 2. Data Preparation\n\n","d6851923":"NOTE: To get more accurate values, we need more data. So I'll combine df_train and df_test data.","f9eab617":"**Approach 3: ** I'll try using mode() which gives the most occurring values.","40bb8011":"# 4. Predictions","19f0c556":"Now let's convert 'Mileage', 'Engine' and 'Power' into numbers.","c98ac0b2":"**Approach 2:** Group by Brand names and get the mean of the available values for 'New_Price'. Use these to fill the missing values for the respective brands.\n\nFirst of all I'll have to convert it into numeric data (or else mean() won't work). For that, I'll have to first deal with missing values. So! Here's what we're gonna do:\n\nFirst fill it with 0.0 Lakh, convert the column into float, group and mean, then finally replace all 0.0 values with their respective values. Capiche?\n\n**NOTE: TURNS OUT THIS WAS A COMPLETE AND UTTER WASTE OF MY TIME AND EFFORT. <\/3**","0f1374fe":"Looks good!!","6708798b":"Project No.: 3\n\nTime Taken: 3 days\n\nDifficulty: Intermediate.\n\n\nThis is the toughest dataset I've worked with. Learnt a lot. Still a long way to go...\n\nWould love it if you left a comment with advice on where I could have improved, what you liked\/disliked about my work, or any thing else. And if you like it, please give it an upvote!","a2546f91":"# 1. The Problem\n\n**What is the problem?**\n\nTask(T): Predicting the cost of a used car in India.\n\nExperience(E): Data collected from various sources and distributed across various locations in India.\n\nPerformance(P): Mean Absolute Error\n\n**My plan of action:**\n\n* Clean the data (missing values and categorical variables).'.\n* Build the model and check the MAE.\n* Try to improve the model.\n\n\n* Brand matters too! I could select the brand name of the car and treat them as categorical data.\n* Filling the missing values in New_Price might help. I should get all the available values for each brand, get their avg, and fill that brand's missing values. For example, I could get all the available New_Price values for Honda, take their average and use that number for other Honda cars whose New_Price is missing.\n* Try converting Engine, Power and New_Price to numbers.\n* I'll try scaling in the end. Although, I don't think it has much effect on xgboost.","d125c2a0":"We got avg 'New_Price' values for more than half the brands. There are still 6 Brands whose values are not given. For that, another plan!\n\nFirst of all, deal with the brands that we have values for. After that, use a bar chart to get the value of the most occurring 'New_Price' value. Use that to fill the rest of them.","84091129":"Mileage contains kmp\/kg and kmpl, Engine contains CC, Power contains bhp and New_Price contains Lakh. By removing them I can convert them from 'object' to 'int'\/'float'.","ccb140bb":"# 3. Model\n\nI will use XGBRegressor to build the model and MAE to check the performance. I will also check out mean_squared_error and mean_squared_log_error.","4b404a69":"Ah finally!! After 3 days!","a9154333":"Quickly tried scaling too. Not a cool move.","08aba27e":"# 2.2 Categorical Variables","00c24d5d":"# Notes\n\n* Treating 'Mileage' and the others as categorical variables was a mistake. Eg.: Mileage went up from 23.6 to around 338! Converting it to numbers fixed it.\n\n* LabelEncoder won't work if there are missing values.\n\n* ValueError: y contains previously unseen label 'Bentley'. Fixed it by increasing training_size in train_test_split.\n\n* Scaling all the columns made the model worse (as expected).\n\n* With 'New_Price' (33.36L) -\n\nMAE: 1.841521016220765\n\nMSE: 14.468386600963221\n\nMSLE: 0.05295155300850892\n\n* With 'New_Price' (4.78L) -\n\nMAE: 1.9925125514537205\n\nMSE: 15.974590365346188\n\nMSLE: 0.0599331113483451\n\n\n* Without 'New_Price' - \n\nMAE: 1.7999142406259514\n\nMSE: 12.915820113678437\n\nMSLE: 0.05128357937155652\n\n* After manually modifying 'New_Price'\n\nMAE: 1.8252445468636458   Higher! Ugh!\n\nMSE: 13.293730579850678\n\nMSLE: 0.048714052000441106  This is less though...\n\n* Log of Price (included manually modified New_Price)\n\nMAE: 0.11102728844859673\n\nMSE: 0.02730218355048974\n\nMSLE: 0.0029628935715083657\n\n* Log of Price (dropped New_Price)\n\nMAE: 0.1212102695263272\n\nMSE: 0.033602847666441636\n\nMSLE: 0.00360543118798742\n\n","6d7a066b":"Now I gotta modify 'Mileage', 'Power', 'Engine' and 'New_Price'. But first, I have to deal with missing values.","5c1eaa29":"Let's first modify the 'Name' of the car and extract just the brand name.","bf91b8e6":"# 2.1 Missing Values","7af09da7":"**Appoach 1:** Fill the missing values with the value which occurs the most."}}