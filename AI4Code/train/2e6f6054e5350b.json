{"cell_type":{"1e2d75af":"code","fb3c9d80":"code","e7c26166":"code","58849461":"code","5c35c273":"code","8eefafd6":"code","54637ae1":"code","eb5cbad1":"code","56a5d4df":"code","9c62fd08":"code","05f3bf70":"code","0103c5a5":"code","5238fe0a":"code","dde76741":"code","843193b8":"code","460cabc5":"code","4186b066":"code","0837b0b6":"code","4949d368":"code","88bb601a":"code","e21bb5f1":"code","0df8f1d5":"code","c6447963":"code","e42fe6d1":"code","f61657d0":"code","f8f52498":"code","8cb1e516":"code","68a589c8":"code","37c12fb6":"code","fa3b85be":"code","4993568d":"code","915b3d4d":"code","224145f6":"code","13845dbe":"code","cec8a3a5":"code","e9968394":"code","a51db5e2":"code","292d2533":"markdown","650b2d7a":"markdown","716565d8":"markdown","885bf51e":"markdown","02b035e5":"markdown","19f1112c":"markdown","a2a91a3f":"markdown","69e66d96":"markdown","ffff9d18":"markdown","0557808f":"markdown","e65f7780":"markdown"},"source":{"1e2d75af":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport sklearn\nimport warnings\nwarnings.simplefilter(action='ignore')\npd.options.mode.chained_assignment = None  # default='warn'","fb3c9d80":"Data=pd.read_csv('..\/input\/employee-future-prediction\/Employee.csv')\nData.head()\n#predict='LeaveOrNot' = WHETHER EMPLOYEE LEAVES THE COMPANY IN NEXT 2 YEARS\n#PaymentTier= Like customers rank for business PAYMENT TIER: 1: HIGHEST 2: MID LEVEL 3:LOWEST\n#EverBenched= EVER KEPT OUT OF PROJECTS FOR 1 MONTH OR MORE 'Yes - No'\n#ExperienceInCurrentDomain = EXPERIENCE IN CURRENT FIELD","e7c26166":"Data.info()","58849461":"Data.isna().sum()","5c35c273":"#Education\nprint(Data.Education.unique())\nsns.countplot(Data.Education);","8eefafd6":"#JoiningYear\nsns.countplot(Data.JoiningYear);","54637ae1":"#City\nprint(Data.City.unique())\nsns.countplot(Data.City);","eb5cbad1":"#PaymentTier\nfig, (ax0, ax1) = plt.subplots(1, 2)\nsns.countplot(Data.PaymentTier,ax=ax0).set_title('Before change rank of Payment')\n#reverse jop rank\nData['PaymentTier'][Data['PaymentTier']==3]=0\nData['PaymentTier'][Data['PaymentTier']==1]=3\nData['PaymentTier'][Data['PaymentTier']==2]=1\nData['PaymentTier'][Data['PaymentTier']==3]=2\nsns.countplot(Data.PaymentTier,ax=ax1).set_title('After change rank of Payment')\nplt.subplots_adjust(left=0,right=1.5,top=1)\nfig.show()","56a5d4df":"#Age\nprint('Age Mean:',int(Data.Age.mean()))\nsns.countplot(Data.Age);","9c62fd08":"#Gender\nsns.countplot(Data.Gender);","05f3bf70":"#EverBenched\nsns.countplot(Data.EverBenched);","0103c5a5":"#\tExperienceInCurrentDomain\nsns.countplot(Data.ExperienceInCurrentDomain);","5238fe0a":"#LeaveOrNot\nsns.countplot(Data.LeaveOrNot);","dde76741":"data_education=pd.get_dummies(Data.Education,drop_first=True)\ndata_city=pd.get_dummies(Data.City,drop_first=True)\ndata_gender=pd.get_dummies(Data.Gender,drop_first=True)\ndata_everbenched=pd.get_dummies(Data.EverBenched,drop_first=True)\nData=Data.drop(columns=['Education','City','Gender','EverBenched'])","843193b8":"new_data=pd.concat([data_education,Data.JoiningYear,data_city,Data.PaymentTier,Data.Age,data_gender,data_everbenched,Data.ExperienceInCurrentDomain,Data.LeaveOrNot],axis=1)\nnew_data.head()","460cabc5":"new_data.isna().sum()","4186b066":"new_data.info()","0837b0b6":"new_data.describe().T","4949d368":"plt.figure(figsize=(15,8))\nsns.heatmap(new_data.corr(),annot=True)\nplt.show()","88bb601a":"new_data","e21bb5f1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(new_data.iloc[:,:-1].values, new_data.LeaveOrNot.values, test_size=0.33, random_state=42)","0df8f1d5":"print('Train_x:',x_train.shape)\nprint('Train_y:',y_train.shape)\nprint('Test_x:',x_test.shape)\nprint('Test_y:',y_test.shape)","c6447963":"from sklearn.preprocessing import StandardScaler\nobje_ss=StandardScaler()\n\nx_train_ss=obje_ss.fit_transform(x_train)\nx_test_ss=obje_ss.fit_transform(x_test)","e42fe6d1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nmodel_le=LogisticRegression(random_state=42,max_iter=10000)\nmodel_le.fit(x_train,y_train)\nparameters = {'C':[0.8,0.9,1,1.1,1.2]}\nmodel_le_grid = GridSearchCV(model_le, parameters,cv=10,verbose=1,n_jobs=-1).fit(x_train,y_train)\nprint(model_le_grid.best_params_)\n\nprint('Logistic Regression Train score:',model_le.score(x_train,y_train)*100)\nprint('Logistic Regression Cros validation score:',model_le_grid.best_score_*100)","f61657d0":"model_le=LogisticRegression(random_state=42,C=1)\nmodel_le.fit(x_train,y_train)\nprint('Logistic Regression Train score:',model_le.score(x_train,y_train)*100)","f8f52498":"from sklearn import svm\n\nmodel_svc=svm.SVC(random_state=42)\nparameters = {'kernel':('linear', 'rbf','poly'), 'C':[0.8,0.9,1,1.1,1.2],'degree':[3,4,5,6]}\nmodel_svc_grid = GridSearchCV(model_svc, parameters,cv=10,verbose=1,n_jobs=-1).fit(x_train_ss,y_train)\nprint(model_svc_grid.best_params_)\n\n\nprint('Support Vecktor Classification Cros validation score:',model_svc_grid.best_score_*100)","8cb1e516":"model_svc=svm.SVC(random_state=42,max_iter=10000,C=1.1,degree=3,kernel='rbf')\nmodel_svc.fit(x_train_ss,y_train)\nprint('Support Vecktor Classification Train score:',model_svc.score(x_train_ss,y_train)*100)","68a589c8":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rfc=RandomForestClassifier(n_jobs=-1)\nparameters = {'n_estimators':[50,100,200,300,400],'max_depth':[3,4,5,6]}\nmodel_rfc_grid = GridSearchCV(model_rfc, parameters,cv=10,verbose=1,n_jobs=-1).fit(x_train,y_train)\nprint(model_rfc_grid.best_params_)\n\nprint('Random Forest Classifier Cros validation score:',model_rfc_grid.best_score_*100)","37c12fb6":"model_rfc=RandomForestClassifier(n_jobs=-1,n_estimators=300,max_depth=6)\nmodel_rfc.fit(x_train,y_train)\nprint('Random Forest Classifier Train score:',model_rfc.score(x_train,y_train)*100)","fa3b85be":"from xgboost import XGBClassifier\n\nmodel_xgb=XGBClassifier(n_jobs=-1,random_state=42,eval_metric='logloss')\nparameters = {'n_estimators':[50,100,200],'max_depth':[5,6],'learning_rate':[0.1,0.01]}\nmodel_xgb_grid = GridSearchCV(model_xgb, parameters,cv=10,verbose=1).fit(x_train,y_train)\nprint(model_xgb_grid.best_params_)\n\nprint('XGB Classifier Cros validation score:',model_xgb_grid.best_score_*100)","4993568d":"model_xgb=XGBClassifier(n_jobs=-1,random_state=42,n_estimators=50,max_depth=5,learning_rate=0.1,eval_metric='logloss')\nmodel_xgb.fit(x_train,y_train)\nprint('XGB Classifier Classifier Train score:',model_xgb.score(x_train,y_train)*100)","915b3d4d":"model_dnn=tf.keras.Sequential()\n\nmodel_dnn.add(tf.keras.layers.Dense(30,activation='relu',input_dim=10))\nmodel_dnn.add(tf.keras.layers.Dropout(0.3))\nmodel_dnn.add(tf.keras.layers.Dense(15,activation='relu'))\nmodel_dnn.add(tf.keras.layers.Dropout(0.3))\nmodel_dnn.add(tf.keras.layers.Dense(1,activation='sigmoid'))\nmodel_dnn.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),loss=\"binary_crossentropy\",metrics=['accuracy'])","224145f6":"model_dnn.summary()","13845dbe":"epoch=300\nhistory=model_dnn.fit(x_train_ss,y_train,epochs=epoch,verbose=0)   ","cec8a3a5":"print('Loss:',history.history['loss'][-1])\nprint('Accuracy: %',history.history['accuracy'][-1]*100)","e9968394":"plt.plot(history.history['loss'], label='loss')\nplt.xlim([0,epoch])\nplt.xlabel('Epoch')\nplt.ylabel('Error')\nplt.legend()\nplt.grid(True)","a51db5e2":"from sklearn.metrics import classification_report\n\ndef test_score(model_name):\n  for i in model_name: \n    print(f'{i.__class__} \\n{classification_report(y_test,i.predict(x_test))}')\n\ndef test_score_ss(model_name):\n  for i in model_name:\n    print(f'{i.__class__} \\n{classification_report(y_test,i.predict(x_test_ss))}') \n\nliste_test=[model_le,model_rfc,model_xgb]\nliste_test_ss=[model_svc]\n\ntest_score(liste_test)\ntest_score_ss(liste_test_ss)\n\nliste_dnn=[]\nfor i in model_dnn.predict(x_test_ss):\n  if i<0.5:\n    liste_dnn.append(0)\n  else:\n    liste_dnn.append(1)\nprint(f'{model_dnn.__class__} \\n{classification_report(y_test,liste_dnn)}')","292d2533":"## Data visualization and Regularization","650b2d7a":"###Logistic Regression","716565d8":"## Test","885bf51e":"### XGboost","02b035e5":"## Train Test Split and Standart Scale","19f1112c":"### Support Vector Classication","a2a91a3f":"### DNN","69e66d96":"## Data Upload","ffff9d18":"#Employee Future Prediction\n**Predict Employee Future In Company**,\nhttps:\/\/www.kaggle.com\/tejashvi14\/employee-future-prediction\n\nA company's HR department wants to predict whether some customers would leave the company in next 2 years. Your job is to build a predictive model that predicts the prospects of future and present employee.\nPerform EDA and bring out insights\nDummy Data Used For A Private Hackathon\nImage Credits-Unsplash","0557808f":"##Models","e65f7780":"### Tree Algoritms"}}