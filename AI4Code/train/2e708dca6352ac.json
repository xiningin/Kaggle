{"cell_type":{"d7e434e6":"code","210a21a2":"code","4b6c6244":"code","02c2f49b":"code","5b61e6cb":"code","68c8bc1b":"code","f4e49832":"code","550c4c3d":"code","afa5708d":"code","352fe2c6":"code","0f8d84ce":"code","3ecfe2e8":"code","d2f418ad":"code","18ea69d8":"code","cb2ae000":"code","5d24095b":"code","24282a3b":"code","963136ab":"code","fa652d44":"code","173780ba":"code","92e45ca7":"code","91965b4a":"code","f6af4644":"code","5a6b7f2b":"code","346e5e62":"code","6fd1cd32":"code","45cb93bb":"code","a61f8f0d":"code","42f891f4":"markdown","3ac9e0d7":"markdown","1add13b8":"markdown","d7582107":"markdown","38c4a5b4":"markdown","d56bd136":"markdown","c894cc86":"markdown","ea43d739":"markdown","c6481fe1":"markdown","e96f12d4":"markdown","0665ddd3":"markdown","dcbf928b":"markdown"},"source":{"d7e434e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","210a21a2":"import torch","4b6c6244":"torch.__version__","02c2f49b":"list=[3,4,5,6]","5b61e6cb":"arr=np.array(list)","68c8bc1b":"type(arr)","f4e49832":"tensors=torch.from_numpy(arr)\n\ntensors","550c4c3d":"tensors.dtype","afa5708d":"type(tensors)","352fe2c6":"tensors[:3]","0f8d84ce":"tensors[:-1]","3ecfe2e8":"tensors[3]=10","d2f418ad":"tensors","18ea69d8":"arr","cb2ae000":"ten_arr=torch.tensor(arr)","5d24095b":"ten_arr[3]=50\n\nprint(ten_arr)\n\nprint(arr)","24282a3b":"torch.zeros(2,3,dtype=torch.float32)","963136ab":"a=torch.tensor([1,2,3],dtype=torch.float32)\n\nb=torch.tensor([5,6,7],dtype=torch.float32)\n\nprint(a+b)","fa652d44":"torch.add(a,b)","173780ba":"c=torch.zeros(3)","92e45ca7":"torch.add(a,b,out=c)","91965b4a":"c","f6af4644":"torch.add(a,b).sum()","5a6b7f2b":"print(a)\n\nprint(b)\n\na.mul(b)","346e5e62":"a.dot(b)       #1.5 + 2.6 + 3.7","6fd1cd32":"a=torch.tensor([[4,5,6],[7,2,8]],dtype=torch.float)\n\nb=torch.tensor([[3,2,1],[7,1,5],[1,2,3]],dtype=torch.float)\n\ntorch.matmul(a,b)","45cb93bb":"a@b","a61f8f0d":"torch.mm(a,b)","42f891f4":"**We can see the changes made in tensors is reflected to np array too as they refer to the same memory location**","3ac9e0d7":"**Storing in a variable**","1add13b8":"# Numpy to pytorch tensors","d7582107":"# Dot product and multiplication operation","38c4a5b4":"# Arithmetic operation","d56bd136":"# Tensors in torch","c894cc86":"**It creates a another copy of arr to ten_arr**","ea43d739":"# Matrix multiplicaiton","c6481fe1":"**In order to avoid this,we can use tensor method instead of from_numpy**","e96f12d4":"**Tensors are replace numpy to use the power of gpu**","0665ddd3":"**Multiplication**","dcbf928b":"# Using torch.tensor"}}