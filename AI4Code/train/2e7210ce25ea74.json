{"cell_type":{"04a8f350":"code","d39f6550":"code","04bfcf6c":"code","5f3fe046":"code","16ff5ab6":"code","bf3c86af":"code","cb556a2c":"code","b24a5748":"code","0ee946cf":"code","6710105b":"code","f64074e3":"code","1805fe1f":"code","714dbd55":"code","eabf823a":"code","af50ca8d":"code","721171af":"code","7b31e336":"code","50d69fc4":"code","5c8acaf8":"code","0c69fe6c":"code","41dae922":"code","f8f7dba8":"code","536c34d6":"code","959c9fc6":"code","a809e312":"code","e56cf81f":"code","bdf18cd4":"code","b191955b":"code","cd05d37e":"code","e86c1f44":"code","4815742b":"code","3f772067":"code","4d276be7":"code","66d77768":"code","7743fffe":"code","9e50666a":"code","03240ff0":"code","a8b2fe54":"code","969b5b93":"code","ad6c4e04":"code","5ce961ae":"code","2ccc5cf2":"code","57b8d5d4":"code","042ccd26":"code","0edee8ea":"code","c6d3f2e1":"code","c8b0d528":"code","f79a43ab":"code","bb3b70f5":"code","6b5a4f7f":"code","b68d4f4c":"code","b88f9391":"code","41a0edc9":"code","e3bca78f":"code","c2a50ba7":"code","7ae33d6a":"code","407e60a0":"code","29a0fb76":"code","942f6ee6":"markdown","5cb794aa":"markdown","eeef9998":"markdown","81d493bf":"markdown","af153868":"markdown","a7d484be":"markdown","5f657ba7":"markdown","f39fc63f":"markdown","b92ff685":"markdown","a9dc691c":"markdown","623000cf":"markdown","868c0f2c":"markdown","9cd844e5":"markdown","a4db0ba7":"markdown","f8ac9491":"markdown","8609ab9a":"markdown","d7bbd586":"markdown","1f98ec44":"markdown","b1d96138":"markdown","3b555270":"markdown","eba00b79":"markdown","50e1008a":"markdown","aeb1bb87":"markdown","b068191e":"markdown","43123b28":"markdown","228c377e":"markdown","26808c0e":"markdown","99ba8673":"markdown","43db549f":"markdown","82bc776c":"markdown","c08dc60d":"markdown","c94df070":"markdown","0cb6d56d":"markdown","cc2a16f6":"markdown","02aadfb5":"markdown","cbd74841":"markdown","55330d2b":"markdown","a4781868":"markdown","e972b579":"markdown","e25bcae5":"markdown","b4415993":"markdown","96416b5d":"markdown","2ce81f86":"markdown","48e16f48":"markdown","c11e6749":"markdown","fc81229a":"markdown","e6cf9280":"markdown","f5d4d483":"markdown","480141ae":"markdown","155f4312":"markdown"},"source":{"04a8f350":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm.auto import tqdm \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d39f6550":"def plot_bid(bid):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['pressure'], 'r-', label='pressure')\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax2.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax1.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n\n    ax1.set_ylim(0, 100)\n    \n    ax1.legend(loc=(1.1, 0.8))\n    ax2.legend(loc=(1.1, 0.7))\n    plt.show()","04bfcf6c":"def plot_uin(bid):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    #ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax1.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n\n    ax1.set_ylim(0, 100)\n    \n    plt.show()","5f3fe046":"def plot_time_step(bid):\n    plt.figure()\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    plt.title(f'breath_id:{bid}, R:{R}, C:{C}')\n    plt.ylabel('Timestep')\n    plt.xlabel('Row No.')\n\n    plt.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n    plt.show()","16ff5ab6":"'''\ndef plot_double_bid(bid):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax1.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n    ax1.set_ylabel('Timestep')\n    ax1.set_xlabel('Row No.')\n\n    ax1.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'r-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax2.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n\n    ax2.set_ylim(0, 100)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()\n'''","bf3c86af":"oj = os.path.join\npath = '..\/input\/ventilator-pressure-prediction'\ntrain = pd.read_csv(oj(path, 'train.csv'))\ntest  = pd.read_csv(oj(path, 'test.csv'))\nsub   = pd.read_csv(oj(path, 'sample_submission.csv'))","cb556a2c":"%%time\ntrain['time_delta'] = train.groupby('breath_id')['time_step'].diff()","b24a5748":"bid_list = list(train['breath_id'].unique())","0ee946cf":"def plot_uin_list(bid_list, ylim=100, u_low=0, u_high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        a = max(1.0\/len(bid_list), 0.01)\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['u_in'][pos]\n        if (u >= u_low) and (u <= u_high):  \n            ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()","6710105b":"%%time\n#train['R_C'] = [f'{r:02}_{c:02}' for r, c in zip(train['R'], train['C'])]\ntrain['R_C'] = [f'{r:02}_{c}' for r, c in zip(train['R'], train['C'])]\n#RCorder = ['05_10', '05_20', '05_50', '20_10', '20_20', '20_50', '50_10', '50_20', '50_50']\nRCorder =  sorted(train['R_C'].unique())\nRCorder","f64074e3":"for bid in bid_list[:3]:\n    plot_uin(bid)","1805fe1f":"sns.countplot(x=\"R_C\", data=train, order=RCorder)","714dbd55":"plot_uin_list(bid_list[:1000])","eabf823a":"plot_uin_list(bid_list[:1000], ylim=7)","af50ca8d":"last_df = train.loc[79::80,:]\nlast_df","721171af":"plt.hist(last_df['u_in'], bins=20)\nplt.show()","7b31e336":"ymin=0\nymax=500\nplt.hist(last_df['u_in'], bins=100)\nplt.vlines([0.0, 0.75, 1.75, 2.1, 4.8, 5.1], ymin, ymax, \"red\", linestyles='dashed')\nplt.ylim(ymin,ymax)\nplt.show()","50d69fc4":"ymin=0\nymax=5\nplt.hist(last_df['u_in'], bins=100)\nplt.vlines([0.0, 0.75, 1.75, 2.1, 3, 4.8, 5.1], ymin, ymax, \"red\", linestyles='dashed')\nplt.ylim(ymin, ymax)\nplt.xlim(4,)\nplt.show()","5c8acaf8":"close_up_u_in = [u for u in last_df['u_in'] if u > 4.6]\nplt.hist(close_up_u_in, bins=1000)\nplt.xlim(4.96, 5.0)\nplt.show()","0c69fe6c":"def plot_double_bid(bid, time_delta=False):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    ts = []\n    td = []\n    if time_delta:\n        outlier = tmp.loc[tmp['time_delta'] > 0.15]\n        rw = list(outlier['id'])\n        ts = list(outlier['time_step'])\n        td = list(outlier['time_delta'])\n        \n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax1.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n    ax1.set_ylabel('Timestep')\n    ax1.set_xlabel('Row No.')\n\n    ymax = 3.0\n    ax1.set_ylim(0, ymax)\n\n    if time_delta:\n        rows = []\n        for a in rw:\n            aa = a % 80 - 2\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n            aa = a % 80 - 1\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n        ax1.vlines(rows, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n\n    \n    ax1.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    ax2.set_title(f'breath_id:{bid}, R:{R}, C:{C}')\n\n    ymax = 100\n    ax2.set_ylim(0, ymax)\n    \n    if time_delta:\n        lines = []\n        for a, b in zip(ts, td):\n            lines.append(a-b)\n            lines.append(a)\n        ax2.vlines(lines, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()\n","41dae922":"def df_from_to(df, f=0.0, t=6.0):\n    # \u300c0.0\u306e\u307f\u300d\u3068\u300c0.0\u3088\u308a\u5927\u304d\u304f1\u4ee5\u4e0b\u300d\u3092\u5b9f\u73fe\u3057\u305f\u3044\u306e\u3067\u3001\u3053\u306e\u4e0d\u7b49\u53f7\u306e\u5f62\n    bid_list = df.loc[(df['u_in'] > f)&(df['u_in'] <= t)]['breath_id'].tolist()\n    return bid_list   ","f8f7dba8":"def plot_uin_stats(list, indiv=3, df=last_df, alpha=False, time_step=False):\n    tmpdf= df[df['breath_id'].isin(list)]\n    bid_list = tmpdf['breath_id']\n    print('Number of plots:', len(bid_list))\n    \n    if indiv:\n        for bid in bid_list[:indiv]: # \u6700\u59273\u500b\u3001\u500b\u5225\u8868\u793a\n            if time_step:\n                plot_double_bid(bid, time_delta=True)\n            else:\n                plot_bid(bid)\n            \n    #plt.hist(tmpdf['R_C'], bins=17) # \u68d2\u30b0\u30e9\u30d5\u306e\u9806\u756a\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u898b\u306b\u304f\u3044\n    sns.countplot(x=\"R_C\", data=tmpdf, order=RCorder)\n    plt.show()\n    \n    plot_uin_list(bid_list, alpha=alpha)","536c34d6":"plot_uin_stats(df_from_to(last_df, 5, 5.4))","959c9fc6":"plot_uin_stats(df_from_to(last_df, 4.8, 5.0))","a809e312":"plot_uin_list(df_from_to(last_df[:1000], 4.8, 5.0))","e56cf81f":"no_prop_list = list(train.loc[train['time_delta']>0.15]['breath_id'].unique())\nprint(len(no_prop_list))","bdf18cd4":"plot_uin_stats(no_prop_list, indiv=10, time_step=True)","b191955b":"plot_uin_stats(df_from_to(last_df, 2.1, 4.8))","cd05d37e":"plot_uin_stats(df_from_to(last_df, 1.75, 2.1))","e86c1f44":"plot_uin_stats(df_from_to(last_df, 0.75, 1.75))","4815742b":"plot_uin_stats(df_from_to(last_df, 0.0, 0.75))","3f772067":"plot_uin_stats(df_from_to(last_df, -1, 0.0))# \uff10\u306e\u307f","4d276be7":"first_df = train.loc[0::80,:]\nfirst_df","66d77768":"plt.hist(first_df['u_in'], bins=100)\nplt.show()","7743fffe":"plt.hist(first_df['u_in'], bins=100)\nplt.ylim(0, 3000)\nplt.show()","9e50666a":"plt.hist(first_df['u_in'], bins=100)\nplt.ylim(0, 200)\nplt.show()","03240ff0":"first100_list = first_df[first_df['u_in']==100]['breath_id'].tolist()\nplot_uin_stats(first100_list)","a8b2fe54":"# u_in last : Main mode\nlastM_list = last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]['breath_id'].tolist()\nprint(len(lastM_list))","969b5b93":"%%time\nplot_uin_stats(lastM_list, indiv=False)","ad6c4e04":"first100_set = set(first100_list)\nlastM_set = set(lastM_list)","5ce961ae":"first100_lastM_set = first100_set & lastM_set\nlen(first100_lastM_set)\nplot_uin_stats(first100_lastM_set, indiv=5)","2ccc5cf2":"plot_uin_stats(first100_set - first100_lastM_set)","57b8d5d4":"first0_list = first_df[first_df['u_in']==0]['breath_id'].tolist()\nplot_uin_stats(first0_list)","042ccd26":"first0_set = set(first0_list)\nfirst0_lastM_set = first0_set & lastM_set","0edee8ea":"plot_uin_stats(first0_lastM_set)","c6d3f2e1":"plot_uin_stats(first0_set - lastM_set, alpha=0.1)","c8b0d528":"#train = pd.read_csv(oj(path, 'train.csv'))\n#train['R_C'] = [f'{r}_{c}' for r, c in zip(train['R'], train['C'])]\n#RCorder = ['5_10', '5_20', '5_50', '20_10', '20_20', '20_50', '50_10', '50_20', '50_50']\n#train['R_C'].unique()","f79a43ab":"#%%time\n#train['time_delta'] = train.groupby('breath_id')['time_step'].diff()\n#train.fillna(0, inplace=True)\n#train['delta'] = train['time_delta'] * train['u_in']\n#train['area'] = train.groupby('breath_id')['delta'].cumsum()","bb3b70f5":"%%time\ntrain['time_delta'] = train['time_step'].diff()\ntrain['time_delta'].fillna(0, inplace=True)\ntrain['time_delta'].mask(train['time_delta'] < 0, 0, inplace=True)\ntrain['delta'] = train['time_delta'] * train['u_in']\ntrain['area'] = train.groupby('breath_id')['delta'].cumsum()","6b5a4f7f":"train","b68d4f4c":"# u_out1_timing\n# generate empty df\n#df = pd.DataFrame(columns=['id', 'breath_id', 'R', 'C', 'time_step', 'u_in', 'u_out', 'pressure',\n#                           'R_C', 'time_delta', 'delta', 'area'])\n#for i in tqdm(bid_list):\n#    breath_one = train[train['breath_id']==i].reset_index(drop = True)\n#    tmp_df=breath_one[breath_one['u_out']==1].head(1)\n#    df = df.append(tmp_df)\n\n#uout1_df = df\n#uout1_df","b88f9391":"%%time\n# u_out1_timing : speed up\n# \u9ad8\u901f\u7248 uout1_df \u4f5c\u6210\ntrain['u_out_diff'] = train['u_out'].diff()\ntrain['u_out_diff'].fillna(0, inplace=True)\ntrain['u_out_diff'].replace(-1, 0, inplace=True)\nuout1_df = train[train['u_out_diff']==1]","41a0edc9":"fig, ax1 = plt.subplots(figsize = (6, 4)) \n\ntmp = uout1_df\nfor rc in RCorder:\n    t = tmp[tmp['R_C']==rc]\n    if len(t) == 0:\n        continue\n    ax1.hist(t['pressure'], bins=100, label=rc, alpha=0.5)\n\nax1.legend()\nplt.show()","e3bca78f":"uout1_list =  uout1_df['breath_id'].tolist()\nuout1_set = set(uout1_list)\nuout1_notM = uout1_set - lastM_set\nuout1_Main = uout1_set - uout1_notM","c2a50ba7":"print(len(uout1_notM))\nprint(len(uout1_Main))","7ae33d6a":"uout1_notM_df = uout1_df[uout1_df['breath_id'].isin(uout1_notM)]\nuout1_Main_df = uout1_df[uout1_df['breath_id'].isin(uout1_Main)]","407e60a0":"fig, ax1 = plt.subplots(figsize = (6, 4)) \n\ntmp = uout1_notM_df\n\nfor rc in RCorder:\n    t = tmp[tmp['R_C']==rc]\n    if len(t) == 0:\n        continue\n    ax1.scatter(t['area'], t['pressure'], label=rc, alpha=0.1)\n\nax1.set_ylabel('pressure')\nax1.set_xlabel('area')\n\nax1.set_title('Other than Main mode')\n\nax1.legend(loc=(1.1, 0.8))\nplt.show()","29a0fb76":"%%time\nfig = plt.figure(figsize = (12, 4))\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2)\n\ntmp = uout1_Main_df\n\nfor rc in RCorder:\n    t = tmp[tmp['R_C']==rc]\n    if len(t) == 0:\n        continue\n    ax1.scatter(t['area'], t['pressure'], label=rc, alpha=1)\nax1.set_ylabel('pressure')\nax1.set_xlabel('area')\nax1.set_title('Main mode: alpha=1')\nax1.legend()\n\nfor rc in RCorder:\n    t = tmp[tmp['R_C']==rc]\n    if len(t) == 0:\n        continue\n    ax2.scatter(t['area'], t['pressure'], label=rc, alpha=0.01)\nax2.set_ylabel('pressure')\nax2.set_xlabel('area')\nax2.set_title('Main mode: alpha=0.01')\nax2.legend()\n\nplt.show()","942f6ee6":"'R_C' is only 50_10. The u_in graph also looks like it has returned to its vibrating shape.","5cb794aa":"'R_C' is only 50_10. The u_in graph seems to have more hill shapes than vibration shapes.","eeef9998":"# Import","81d493bf":"# Main mode with 100 at the beginning","af153868":"# The Main mode : u_in ends 4.8 - 5.0","a7d484be":"# Other than the Main mode: u_in ends 2.1 - 4.8","5f657ba7":"'R_C' is only 50_10. Is the vibration shape of the u_in graph increasing again?","f39fc63f":"This also seems to have a main mode and other modes. Let's separate.","b92ff685":"# Check the area of the point where u_out rises","a9dc691c":"# Functions","623000cf":"'R_C' is only 50_10. The u_in graph looks like a vibrating shape in much the same way.","868c0f2c":"# The starting point value is 100 and other than main mode","9cd844e5":"**Note: I made a mistake in calculating the area of u_in and time_delta. I was multiplying by time_step (which means real time in this competition) instead of time_delta. Fixed. October 3rd.**\n\nThis notebook is a continuation of [EDA about time_step and u_out](https:\/\/www.kaggle.com\/marutama\/eda-about-time-step-and-u-out). If you find it useful, please upvote it as well.\u3002\n\nChart Plot referred to [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models). \n\nFor the R_C distribution part, I referred to [Ventilator Pressure simple EDA](https:\/\/www.kaggle.com\/currypurin\/ventilator-pressure-simple-eda).\n\nThank you very much.\n\nThe importance of the features introduced in the \"EDA about\" series below:\n- [EDA about: LSTM Feature Importance](https:\/\/www.kaggle.com\/marutama\/eda-about-lstm-feature-importance)\n\nAnd [finetune of Tensorflow Bi-LSTM EDA about](https:\/\/www.kaggle.com\/marutama\/finetune-of-tensorflow-bi-lstm-eda-about) is for Modeling.\n\n","a4db0ba7":"# Load CSV","f8ac9491":"The pressure correlates with Area (the sum of the products of u_in and time_step up to that point) and R_C.","8609ab9a":"# Other than the Main mode: 0.0 - 0.75","d7bbd586":"# Other than the Main mode: 0.0 only","1f98ec44":"# The Main mode","b1d96138":"Most seem to be the main mode, but there seem to be other modes as well. Let's separate.","3b555270":"If you expand it, there is only one data for 5 or more.","eba00b79":"# EDA with u_in starting point value of 100","50e1008a":"Plot the u_in chart for the first 3","aeb1bb87":"# Add features","b068191e":"# Other than the Main mode: u_in ends 1.75 - 2.1","43123b28":"# u_in start point value EDA","228c377e":"# The starting point value is 0 u_in EDA","26808c0e":"Graphs with u_in starting at 0, excluding the main mode, are unique and have a distinctly different shape from other graphs. R_C is only 50_10.","99ba8673":"# Let's calculate the area from u_in","43db549f":"I will stack the first 1000 pieces and plot","82bc776c":"Only one. 'R_C' is '50_10'.","c08dc60d":"speed up for area calculation","c94df070":"# Other than the Main mode: u_in ends 5.0 - 5.4","0cb6d56d":"speed up version","cc2a16f6":"If you plot only 1000 pieces, you can see the graph shape between 0 seconds and 1 second like a pattern. \n\nSo far, only in the Main mode, there are some 'time_steps' that are severely broken.","02aadfb5":"# Overview","cbd74841":"Approximately 70,000 u_ins end in 5 hits. Let's increase bins and expand.","55330d2b":"It seems that there are many graphs where 1.0 to 1.5 is 0, and it starts from 1.5 and gradually becomes about 5 at the end. Let's call this graph the main mode of u_in.","a4781868":"Further close-up around 5.0, there are three peaks in the final u_in value in main mode, which is between 4.965-4.995 in detail.","e972b579":"4.8-5.1 is the main mode and there are many. From 1.0 second to 1.5 seconds, u_in = 0.0, and from 1.5 seconds, it starts up with the same shape and the final value is 4.965-4.995.\nThe R_C distribution clearly has a decrease of '50_10' compared to the overall distribution. It seems that the ratio of '50_10' is high except for 4.8-5.1.","e25bcae5":"The main mode, which starts with 100, seems to have a vibrating graph, a slide-like descending graph, and a combination graph. The R_C distribution is also biased.","b4415993":"There are 70018 main modes. It's 70018\/75450=92%. Use a set operation to separate the other modes.","96416b5d":"Let's divide it into this zone. Around 5.0 is the final value of u_in main mode.","2ce81f86":"There are only 23 graphs other than the main mode, where u_in starts with 100, and they have the same graph shape. R_C is also only 50_10.","48e16f48":"'R_C' is only 50_10. The u_in graph seems to have a vibration shape and a hilly shape.","c11e6749":"Combination distribution of R and C","fc81229a":"# This EDA specializes in u_in","e6cf9280":"Let's expand the y-axis further.","f5d4d483":"# u_in End point value EDA","480141ae":"# TL;DR\n- About half of u_in starts at 0. The next most common is u_in, which starts from 100.\n- u_in has a main mode that accounts for 70018\/75450=92%. It is 0 for 1 to 1.5 seconds and ends near 5 (4.965-4.995).\n- All R_Cs other than the main mode are 50_10.\n- The pressure correlates with Area (the sum of the products of u_in and time_step up to that point) and R_C.","155f4312":"# Other than the Main mode: u_in ends 0.75 - 1.75"}}