{"cell_type":{"8ecca0d7":"code","ab678d1d":"code","e11d7210":"code","a7f1e1b2":"code","71dac896":"code","86bf8911":"code","734d8fe7":"code","ab971bff":"code","c7946b5f":"code","1b6c44ac":"code","44c27891":"code","c4efa048":"code","a303aa23":"code","5ac15f6f":"code","09335754":"code","3feb6180":"code","f4cfcd19":"code","ca083e60":"code","fa3eebce":"code","ec0d4b4a":"code","7b08c3eb":"code","d988872f":"code","a53593a1":"code","1286da8e":"code","ad6f01ed":"code","f3ff0813":"code","8a4cbf92":"code","f4c082e5":"code","12244d76":"code","14252850":"code","30b222a1":"code","67bcd527":"code","cfd1cf13":"code","515ff4f6":"code","2615bbe2":"code","1b60d283":"code","396ddbad":"code","d394a8be":"code","53be3d52":"code","5e95d152":"code","d8dc060d":"code","3b98a81c":"code","81683b1f":"code","49f02870":"code","5478e426":"code","fba385eb":"code","df4671f6":"code","a815627a":"code","fd02e423":"code","820e07ab":"code","ca446209":"code","857f2f81":"code","4c878432":"code","24fb5cba":"code","7e92e629":"code","daad0d9c":"code","8928dfba":"code","bfd9fa2a":"code","0b081ff1":"code","f95e957a":"code","c5c1f282":"code","3ad3101a":"code","31fb26c1":"code","cd9a1703":"code","f2c1db83":"code","ec6a0069":"code","b9fbf972":"code","8a40a73f":"code","9ad99098":"code","e1cf002e":"code","b659432d":"code","6169647b":"code","080a7153":"code","3e2432e1":"markdown","d14d5003":"markdown","52fa01dd":"markdown","f5470ce7":"markdown","3ad9c561":"markdown","81d5fba9":"markdown","4e9c2035":"markdown","c8cdfb7b":"markdown","0e99ee79":"markdown","c9161279":"markdown","edcf3933":"markdown","c15d8fa7":"markdown","20f87f7e":"markdown","634fdac0":"markdown","13b82302":"markdown","39ddd9f7":"markdown","54625a66":"markdown","93dff329":"markdown","13af9280":"markdown","749de291":"markdown","3c63c1cf":"markdown"},"source":{"8ecca0d7":"import time\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport warnings\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\nwarnings.filterwarnings('ignore')","ab678d1d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e11d7210":"# Train Dat\npd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/train.csv\")","a7f1e1b2":"train = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/train.csv\", parse_dates=['date'])\ntest = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/test.csv\", parse_dates=['date'])","71dac896":"train.shape","86bf8911":"test.shape","734d8fe7":"sample_sub = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/sample_submission.csv\")\nsample_sub.head()","ab971bff":"# Concating Train data and Test data\ndf = pd.concat([train, test], sort=False)\ndf.head()","c7946b5f":"df.shape","1b6c44ac":"df.isnull().sum()","44c27891":"df['date'].min() ,df['date'].max()","c4efa048":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","a303aa23":"check_df(train)","5ac15f6f":"check_df(test)","09335754":"check_df(sample_sub)","3feb6180":"check_df(df)","f4cfcd19":"df[\"sales\"].describe([0.10, 0.30, 0.50, 0.70, 0.80, 0.90, 0.95, 0.99])","ca083e60":"df[[\"store\"]].nunique()","fa3eebce":"df[[\"item\"]].nunique()","ec0d4b4a":"df.groupby([\"store\"])[\"item\"].nunique()","7b08c3eb":"df.groupby([\"store\", \"item\"]).agg({\"sales\": [\"sum\"]})","d988872f":"df.groupby([\"store\", \"item\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","a53593a1":"df['date'].head()","1286da8e":"def create_date_features(df):\n    df['month'] = df.date.dt.month\n    df['quarter'] = df.date.dt.quarter\n    df['is_q_end'] = df.date.dt.is_quarter_end.astype(int)\n    df['is_q_start'] = df.date.dt.is_quarter_start.astype(int)\n    df['days_in_month'] = df.date.dt.days_in_month\n    df['day_of_month'] = df.date.dt.day\n    df['day_of_year'] = df.date.dt.dayofyear\n    df['week_of_year'] = df.date.dt.weekofyear\n    df['day_of_week'] = df.date.dt.dayofweek\n    df['year'] = df.date.dt.year\n    df[\"is_wknd\"] = df.date.dt.weekday \/\/ 4\n    df['is_month_start'] = df.date.dt.is_month_start.astype(int)\n    df['is_month_end'] = df.date.dt.is_month_end.astype(int)\n    return df","ad6f01ed":"df = create_date_features(df)\ndf.head()","f3ff0813":"# Checking Sales iteams\ndf.groupby([\"store\", \"item\", \"year\",\"month\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","8a4cbf92":"# we can see the sales statistics in the store-item-quarter breakdown, where there is month information\ndf.groupby([\"store\", \"item\", \"year\",\"quarter\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","f4c082e5":"def random_noise(dataframe):\n    return np.random.normal(scale=1.6, size=(len(dataframe),))","12244d76":"df.sort_values(by=['store', 'item', 'date'], axis=0, inplace=True)","14252850":"check_df(df)","30b222a1":"df[\"sales\"].head(10)","67bcd527":"# First delay\ndf[\"sales\"].shift(1).values[0:10]","cfd1cf13":"# Second Delay\ndf[\"sales\"].shift(2).values[0:10]","515ff4f6":"# Third delay\ndf[\"sales\"].shift(3).values[0:10]","2615bbe2":"# Lets check to replace in df\npd.DataFrame({\"sales\": df[\"sales\"].values[0:10],\n              \"lag1\": df[\"sales\"].shift(1).values[0:10],\n              \"lag2\": df[\"sales\"].shift(2).values[0:10],\n              \"lag3\": df[\"sales\"].shift(3).values[0:10],\n              \"lag4\": df[\"sales\"].shift(4).values[0:10]})","1b60d283":"df.groupby([\"store\", \"item\"])['sales'].head()","396ddbad":"df.groupby([\"store\", \"item\"])['sales'].transform(lambda x: x.shift(1))","d394a8be":"def lag_features(dataframe, lags):\n    for lag in lags:\n        dataframe['sales_lag_' + str(lag)] = dataframe.groupby([\"store\", \"item\"])['sales'].transform(\n            lambda x: x.shift(lag)) + random_noise(dataframe)\n    return dataframe","53be3d52":"df = lag_features(df, [91, 98, 105, 112, 119, 126, 182, 364, 456,546, 728,821])\ncheck_df(df)","5e95d152":"# Checking Null values in sales data\ndf[df[\"sales\"].isnull()]","d8dc060d":"df[\"sales\"].head(10)","3b98a81c":"df[\"sales\"].rolling(window=2).mean().values[0:10]","81683b1f":"df[\"sales\"].rolling(window=3).mean().values[0:10]","49f02870":"df[\"sales\"].rolling(window=5).mean().values[0:10]","5478e426":"pd.DataFrame({\"sales\": df[\"sales\"].values[0:10],\n              \"roll2\": df[\"sales\"].rolling(window=2).mean().values[0:10],\n              \"roll3\": df[\"sales\"].rolling(window=3).mean().values[0:10],\n              \"roll5\": df[\"sales\"].rolling(window=5).mean().values[0:10]})","fba385eb":"def roll_mean_features(dataframe, windows):\n    for window in windows:\n        dataframe['sales_roll_mean_' + str(window)] = dataframe.groupby([\"store\", \"item\"])['sales']. \\\n                                                          transform(\n            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n            dataframe)\n    return dataframe","df4671f6":"df = roll_mean_features(df, [365, 456,546])","a815627a":"pd.DataFrame({\"sales\": df[\"sales\"].values[0:10],\n              \"roll2\": df[\"sales\"].shift(1).rolling(window=2).mean().values[0:10],\n              \"ewm099\": df[\"sales\"].shift(1).ewm(alpha=0.99).mean().values[0:10],\n              \"ewm095\": df[\"sales\"].shift(1).ewm(alpha=0.95).mean().values[0:10],\n              \"ewm07\": df[\"sales\"].shift(1).ewm(alpha=0.7).mean().values[0:10],\n              \"ewm02\": df[\"sales\"].shift(1).ewm(alpha=0.1).mean().values[0:10]})","fd02e423":"def ewm_features(dataframe, alphas, lags):\n    for alpha in alphas:\n        for lag in lags:\n            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n                dataframe.groupby([\"store\", \"item\"])['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n    return dataframe","820e07ab":"alphas = [0.95, 0.9, 0.8, 0.7, 0.5]\nlags = [91, 98, 105, 112, 180, 270, 365,456,546, 728,821]","ca446209":"df = ewm_features(df, alphas, lags)\ncheck_df(df)","857f2f81":"df = pd.get_dummies(df, columns=['store', 'item', 'day_of_week', 'month'])","4c878432":"df['sales'] = np.log1p(df[\"sales\"].values)\ncheck_df(df)","24fb5cba":"def smape(preds, target):\n    n = len(preds)\n    masked_arr = ~((preds == 0) & (target == 0))\n    preds, target = preds[masked_arr], target[masked_arr]\n    num = np.abs(preds - target)\n    denom = np.abs(preds) + np.abs(target)\n    smape_val = (200 * np.sum(num \/ denom)) \/ n\n    return smape_val\n\ndef lgbm_smape(preds, train_data):\n    labels = train_data.get_label()\n    smape_val = smape(np.expm1(preds), np.expm1(labels))\n    return 'SMAPE', smape_val, False","7e92e629":"#  Train set the beginning of 2017 (until the end of 2016)\ntrain = df.loc[(df[\"date\"] < \"2017-01-01\"), :]","daad0d9c":"# First 3 months of 2017 validation kit\nval = df.loc[(df[\"date\"] >= \"2017-01-01\") & (df[\"date\"] < \"2017-04-01\"), :]\nval.head()","8928dfba":"cols = [col for col in train.columns if col not in ['date', 'id', \"sales\", \"year\"]]","bfd9fa2a":"Y_train = train['sales']\nX_train = train[cols]\n\nY_val = val['sales']\nX_val = val[cols]","0b081ff1":"# Control\nY_train.shape, X_train.shape, Y_val.shape, X_val.shape","f95e957a":"lgb_params =  { 'metric': 'mae',\n                'num_leaves' : 12,\n                'max_depth': 10,\n                'min_child_samples': 5,\n                'learning_rate': 0.03,\n                'colsample_bytree': 0.5,\n                'verbose': 0,\n                'num_boost_round': 2000,\n                'early_stopping_rounds': 200,\n                'min_child_weight' : 0.1,\n                'nthread': -1}","c5c1f282":"lgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\nlgbval = lgb.Dataset(data=X_val, label=Y_val, reference=lgbtrain, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain,\n                  valid_sets=[lgbtrain, lgbval],\n                  num_boost_round=lgb_params['num_boost_round'],\n                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n                  feval=lgbm_smape,\n                  verbose_eval=100)\ny_pred_val = model.predict(X_val, num_iteration=model.best_iteration)","3ad3101a":"smape(np.expm1(y_pred_val), np.expm1(Y_val))","31fb26c1":"def plot_lgb_importances(model, plot=False, num=10):\n\n    gain = model.feature_importance('gain')\n    feat_imp = pd.DataFrame({'feature': model.feature_name(),\n                             'split': model.feature_importance('split'),\n                             'gain': 100 * gain \/ gain.sum()}).sort_values('gain', ascending=False)\n    if plot:\n        plt.figure(figsize=(10, 10))\n        sns.set(font_scale=1)\n        sns.barplot(x=\"gain\", y=\"feature\", data=feat_imp[0:25])\n        plt.title('feature')\n        plt.tight_layout()\n        plt.show()\n    else:\n        print(feat_imp.head(num))","cd9a1703":"plot_lgb_importances(model, num=30, plot=True)","f2c1db83":"lgb.plot_importance(model, max_num_features=20, figsize=(10, 10), importance_type=\"gain\")\nplt.show()","ec6a0069":"train = df.loc[~df.sales.isna()]\nY_train = train['sales']\nX_train = train[cols]\n\ntest = df.loc[df.sales.isna()]\nX_test = test[cols]","b9fbf972":"lgb_params = { 'metric': 'mae',\n                'num_leaves' : 12,\n                'max_depth': 10,\n                'min_child_samples': 5,\n                'learning_rate': 0.03,\n                'colsample_bytree': 0.5,\n                'verbose': 0,\n                'min_child_weight' : 0.1,\n                'nthread': -1,\n              \"num_boost_round\": 2000}","8a40a73f":"lgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)","9ad99098":"model = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)","e1cf002e":"test_preds = model.predict(X_test, num_iteration=model.best_iteration)","b659432d":"smape(np.expm1(y_pred_val), np.expm1(Y_val))","6169647b":"submission_df = test.loc[:, ['id', 'sales']]\nsubmission_df['sales'] = np.expm1(test_preds)\nsubmission_df['id'] = submission_df.id.astype(int)\nsubmission_df.to_csv('submission.csv', index=False)","080a7153":"submission_df.head(20)","3e2432e1":"# Converting sales to log(1+sales)","d14d5003":"* Checking Unique values","52fa01dd":"# Model Deployment","f5470ce7":"# Exponentially Weighted Mean Features","3ad9c561":"# Feature Engineering","81d5fba9":"# Model Submission","4e9c2035":"# Creating Data Frame","c8cdfb7b":"# Checking top-10 observations","0e99ee79":"* metric mae: l1, absolute loss, mean_absolute_error, regression_l1\n* l2, square loss, mean_squared_error, mse, regression_l2, regression\n* rmse, root square loss, root_mean_squared_error, l2_root\n* mape, MAPE loss, mean_absolute_percentage_error","c9161279":"# Date Features","edcf3933":"# One-Hot-Encoding","c15d8fa7":"# Time-Based Validation Sets","20f87f7e":"# Model\n* Custom Cost Function\n* MAE: mean absolute error\n* MAPE: mean absolute percentage error\n* SMAPE: Symmetric mean absolute percentage error (adjusted MAPE)","634fdac0":"# Variable severity levels","13b82302":"# Rolling Mean Features","39ddd9f7":"# Importing Modules","54625a66":"# Random Noise","93dff329":"# EDA","13af9280":"# Lag\/Shifted Features","749de291":"# Loading Data","3c63c1cf":"# LightBGM Model"}}