{"cell_type":{"ecf5c443":"code","502fc707":"code","5de0cc1f":"code","36c90b68":"code","7c81b1a5":"code","a20e47c0":"code","f5aa4865":"code","08afc009":"code","f68a59c0":"code","1f5c6f80":"code","42b06ad2":"code","57b5162c":"code","fc3c88c6":"code","9947f5d9":"code","c69edb58":"code","7e1dde8b":"code","a9e993af":"code","e21562a4":"code","76ad56da":"code","33ce7f41":"code","76eec8f9":"code","a8942ed0":"markdown","8a5992e2":"markdown","5632af2a":"markdown","30fb0d11":"markdown","7b1e1791":"markdown","65304af1":"markdown","3abb4804":"markdown","7309e976":"markdown","3ffe2fce":"markdown","db14e929":"markdown","c7a88097":"markdown","0aba653e":"markdown","add44360":"markdown","7d2d1192":"markdown","01827d09":"markdown"},"source":{"ecf5c443":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom os import listdir\nfrom os.path import isfile, join\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nroot = '..\/input\/'\n# Any results you write to the current directory are saved as output.","502fc707":"csv_files = [f for f in listdir(root) if isfile(join(root, f)) and '.csv' in f ]\ndataframes = {}\nfor file in csv_files:\n    dataframes[os.path.splitext(file)[0]] = pd.read_csv(root+file)\nfor i,file in enumerate(csv_files,1):\n    print(i,'file name      :',file)\n    print('  dataframe shape:',dataframes[os.path.splitext(file)[0]].shape)\n    print('  data columns   : ',end='')\n    print(*dataframes[os.path.splitext(file)[0]].columns ,sep=', ',end='\\n\\n')","5de0cc1f":"print(dataframes['train']['molecule_name'].equals(dataframes['scalar_coupling_contributions']['molecule_name']),end=' ')\nprint(dataframes['train']['atom_index_0'].equals(dataframes['scalar_coupling_contributions']['atom_index_0']),end=' ')\nprint(dataframes['train']['atom_index_1'].equals(dataframes['scalar_coupling_contributions']['atom_index_1']),end=' ')\nprint(dataframes['train']['type'].equals(dataframes['scalar_coupling_contributions']['type']))      \nprint('train.csv and scalar_coupling_contributions.csv have aligned columns',end='\\n\\n')\n\nprint(dataframes['potential_energy']['molecule_name'].equals(dataframes['dipole_moments']['molecule_name']))      \nprint('potential_energy.csv and dipole_moments.csv have aligned columns',end='\\n\\n')\n\nprint(dataframes['test']['id'].equals(dataframes['sample_submission']['id']))      \nprint('test.csv and sample_submission.csv have aligned columns',end='\\n\\n')\n\nprint(dataframes['mulliken_charges']['molecule_name'].equals(dataframes['magnetic_shielding_tensors']['molecule_name']),end=' ')      \nprint(dataframes['mulliken_charges']['atom_index'].equals(dataframes['magnetic_shielding_tensors']['atom_index']))      \nprint('mulliken_charges.csv and magnetic_shielding_tensors.csv have aligned columns',end='\\n\\n')","36c90b68":"print(np.array_equal(dataframes['train']['molecule_name'].unique(), dataframes['dipole_moments']['molecule_name'].unique()),end=' ')\nprint(np.array_equal(dataframes['train']['molecule_name'].unique(), dataframes['mulliken_charges']['molecule_name'].unique()),end=' ')\nprint(np.array_equal(dataframes['train']['molecule_name'].unique(), dataframes['magnetic_shielding_tensors']['molecule_name'].unique()))\nprint('All molecules present in train.csv have their additional data present')","7c81b1a5":"train = dataframes['train']\ntrain.head()","a20e47c0":"type_list = train['type'].unique().tolist()\nprint('Total {} different coupling types are present in train.csv'.format(len(type_list)))\nprint(*type_list, sep = \", \")\ntest_type_list = dataframes['test']['type'].unique().tolist()\nprint('Total {} different coupling types are present in test.csv'.format(len(test_type_list)))\nprint(*test_type_list, sep = \", \")","f5aa4865":"plt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nplt.title('Distribution of type for train')\nplt.ylabel('frequency')\nplt.xlabel('type')\ntrain['type'].value_counts().plot.bar()\n\nplt.subplot(1, 2, 2)\nplt.title('Distribution of type for test')\nplt.ylabel('frequency')\nplt.xlabel('type')\ndataframes['test']['type'].value_counts().plot.bar()\nplt.tight_layout()\nplt.show()","08afc009":"plt.figure(figsize=(14,5))\nplt.subplot(1, 3, 1)\nplt.title('Distribution of atom_index_0')\nplt.ylabel('frequency')\nplt.xlabel('index')\ntrain['atom_index_0'].hist(bins=20)\n\nplt.subplot(1, 3, 2)\nplt.title('Distribution of atom_index_1')\nplt.ylabel('frequency')\nplt.xlabel('index')\ntrain['atom_index_1'].hist(bins=20)\n\nplt.subplot(1, 3, 3)\nplt.title('Distribution of atom_index')\nplt.ylabel('frequency')\nplt.xlabel('index')\nplt.hist(train[['atom_index_0','atom_index_1']].values,bins=20)\n\nplt.tight_layout()\nplt.show()","f68a59c0":"plt.figure(figsize=(14,5))\nplt.subplot(1, 3, 1)\nplt.title('Distribution of atom_index_0')\nplt.ylabel('frequency')\nplt.xlabel('index')\ndataframes['test']['atom_index_0'].hist(bins=20)\n\nplt.subplot(1, 3, 2)\nplt.title('Distribution of atom_index_1')\nplt.ylabel('frequency')\nplt.xlabel('index')\ndataframes['test']['atom_index_1'].hist(bins=20)\n\nplt.subplot(1, 3, 3)\nplt.title('Distribution of atom_index')\nplt.ylabel('frequency')\nplt.xlabel('index')\nplt.hist(dataframes['test'][['atom_index_0','atom_index_1']].values,bins=20)\n\nplt.tight_layout()\nplt.show()","1f5c6f80":"plt.figure(figsize=(8,5))\nplt.title('Distribution of scalar_coupling_constant')\nplt.ylabel('Frequency')\nplt.xlabel('scalar_coupling_constant')\nplt.hist(train['scalar_coupling_constant'].values,bins=100,color='orange')\nplt.show()","42b06ad2":"df = train[['type','scalar_coupling_constant']]\nplt.figure(figsize=(15,15))\n\nfor i,type_ in enumerate(type_list,1):\n    plt.subplot(3, 3, i)\n    plt.title('Distribution for '+ type_)\n    plt.ylabel('frequency')\n    plt.xlabel('scalar_coupling_constant')\n    plt.hist(df.loc[df['type'] == type_]['scalar_coupling_constant'].values,bins=500)\n    #df.loc[df['type'] == type_]['scalar_coupling_constant'].hist(bins=25)\nplt.subplot(3, 3, 9)\nplt.title('Distribution for All')\nplt.ylabel('frequency')\nplt.xlabel('scalar_coupling_constant')\nplt.hist(df['scalar_coupling_constant'].values,bins=500,color='orange')\nplt.tight_layout()\nplt.show()","57b5162c":"df = train[['type','scalar_coupling_constant']]\nplt.figure(figsize=(15,15))\nfor i,type_ in enumerate(type_list,1):\n    plt.subplot(3, 3, i)\n    plt.title('Distribution for '+ type_)\n    plt.ylabel('frequency')\n    plt.xlabel('scalar_coupling_constant')\n    plt.hist(df.loc[df['type'] == type_]['scalar_coupling_constant'].values,bins=500,range=(-30,200))\n    #df.loc[df['type'] == type_]['scalar_coupling_constant'].hist(bins=25)\nplt.subplot(3, 3, 9)\nplt.title('Distribution for All')\nplt.ylabel('frequency')\nplt.xlabel('scalar_coupling_constant')\nplt.hist(df['scalar_coupling_constant'].values,bins=500,range=(-30,200),color='orange')\nplt.tight_layout()\nplt.show()","fc3c88c6":"plt.figure(figsize=(12,8))\nplt.subplot(2, 2, 1)\nplt.title('Distribution of Dipole moment in X')\nplt.ylabel('frequency')\nplt.xlabel('moment')\nplt.hist(dataframes['dipole_moments']['X'].values,bins=50)\n\nplt.subplot(2, 2, 2)\nplt.title('Distribution of Dipole moment in Y')\nplt.ylabel('frequency')\nplt.xlabel('moment')\nplt.hist(dataframes['dipole_moments']['Y'].values,bins=50)\n\nplt.subplot(2, 2, 3)\nplt.title('Distribution of Dipole moment in Z')\nplt.ylabel('frequency')\nplt.xlabel('moment')\nplt.hist(dataframes['dipole_moments']['Z'].values,bins=50)\n\nplt.subplot(2, 2, 4)\nplt.title('Distribution of Dipole moment')\nplt.ylabel('frequency')\nplt.xlabel('moment')\nplt.hist(dataframes['dipole_moments'][['X','Y','Z']].values.reshape(-1),bins=50,color='orange')\n\nplt.tight_layout()\nplt.show()","9947f5d9":"plt.figure(figsize=(8,5))\nplt.title('Distribution of potential energy')\nplt.ylabel('Frequency')\nplt.xlabel('potential energy')\nplt.hist(dataframes['potential_energy']['potential_energy'].values,bins=50)\nplt.show()","c69edb58":"plt.figure(figsize=(8,5))\nplt.title('Distribution of mulliken_charges')\nplt.ylabel('Frequency')\nplt.xlabel('mulliken_charges')\nplt.hist(dataframes['mulliken_charges']['mulliken_charge'].values,bins=200)\nplt.show()","7e1dde8b":"df = dataframes['magnetic_shielding_tensors']\naxis_list = ['XX', 'YX', 'ZX', 'XY', 'YY', 'ZY', 'XZ', 'YZ', 'ZZ']\nplt.figure(figsize=(13,13))\nfor i,type_ in enumerate(axis_list,1):\n    plt.subplot(3, 3, i)\n    plt.title('Distribution for '+ type_)\n    plt.ylabel('frequency')\n    plt.xlabel('magnetic_shielding_tensors')\n    plt.hist(df[type_].values,bins=50)\n\nplt.tight_layout()\nplt.show()","a9e993af":"df = dataframes['scalar_coupling_contributions']\naxis_list = ['fc', 'sd', 'pso', 'dso']\nplt.figure(figsize=(8,8))\nfor i,type_ in enumerate(axis_list,1):\n    plt.subplot(2, 2, i)\n    plt.title('Distribution for '+ type_)\n    plt.ylabel('frequency')\n    plt.xlabel('value')\n    plt.hist(df[type_].values,bins=50)\n\nplt.tight_layout()\nplt.show()","e21562a4":"a = dataframes['structures']['atom'].value_counts()\nplt.figure(figsize=(7,7))\na.plot.bar()\nplt.title('Distribution for types of atoms ')\nplt.ylabel('frequency')\nplt.xlabel('atom type')\nfor i in range(a.shape[0]):\n    plt.text(x=-0.25+i,y=a[i]+10000,s=str(a[i]), fontsize=10)\nplt.show()","76ad56da":"l = []\nfor i,f in enumerate(listdir(root+'structures\/')):\n    path = root+'structures\/'+ f\n    file = open(path,'r')\n    l.append(int(file.readline()))\n    file.close()\n    if i == 20000: break ## take small sample\nl = np.array(l)\nplt.figure(figsize=(8,5))\nplt.title('Distribution of number of atoms in molecule')\nplt.ylabel('Number of molecules')\nplt.xlabel('number of atoms')\nplt.hist(l,bins=10)\nplt.show()","33ce7f41":"print('minimum number atoms in a molecule for our sample is {}'.format(l.min()))\nprint('maximum number atoms in a molecule for our sample is {}'.format(l.max()))\nprint('average number atoms in a molecule for our sample is {}'.format(int(l.mean())))","76eec8f9":"plt.figure(figsize=(15,5))\nplt.subplot(1, 3, 1)\nplt.title('Distribution of coordinate x')\nplt.ylabel('frequency')\nplt.xlabel('x')\nplt.hist(dataframes['structures']['x'].values,bins=200)\n\nplt.subplot(1, 3, 2)\nplt.title('Distribution of coordinate y')\nplt.ylabel('frequency')\nplt.xlabel('y')\nplt.hist(dataframes['structures']['y'].values,bins=200)\n\nplt.subplot(1, 3, 3)\nplt.title('Distribution of coordinate z')\nplt.ylabel('frequency')\nplt.xlabel('z')\nplt.hist(dataframes['structures']['z'].values,bins=200)\n\nplt.tight_layout()\nplt.show()","a8942ed0":"### Does test set have a similar distribution ?","8a5992e2":"## dipole Moment","5632af2a":"## scalar coupling constant","30fb0d11":"## potential Energy","7b1e1791":"## scalar coupling contributions","65304af1":"## Coordinates","3abb4804":"## magnetic_shielding_tensors","7309e976":"## Number of atoms in molecule","3ffe2fce":"## check for aligned columns ","db14e929":"## Types of atoms","c7a88097":"## Analyse CSV files and their columns","0aba653e":"## types","add44360":"## mulliken charges","7d2d1192":"## atom index","01827d09":"### With Fixed X axis "}}