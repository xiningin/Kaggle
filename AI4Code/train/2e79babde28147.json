{"cell_type":{"0d3332c1":"code","f7ab0cbf":"code","94928281":"code","fc0692bb":"code","207f1cd3":"code","5c8b3fc8":"code","c4545aa9":"code","1be930d1":"code","6a1d30dd":"code","5ba17465":"code","b5b27261":"code","8d3fe08f":"code","af7addc1":"code","3a446e00":"code","12854ffd":"code","cc8629a8":"code","925db91f":"code","82239e08":"code","343ebb8a":"code","b69326f8":"code","4cd84afa":"code","c3e1909e":"code","4949f7e9":"code","7c433d9c":"markdown","f618d871":"markdown","f3d1de75":"markdown","9309cfae":"markdown","12896547":"markdown","a172e627":"markdown"},"source":{"0d3332c1":"#import library\nimport math\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nimport pickle","f7ab0cbf":"df = pd.read_csv('..\/input\/fraudulent-claim-on-cars-physical-damage\/training data\/training data.csv')","94928281":"df.shape","fc0692bb":"df.head()","207f1cd3":"df.describe()","5c8b3fc8":"df.info()","c4545aa9":"#handling missing value\ndf.dropna(inplace = True)","1be930d1":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(df.corr(), vmax = 0.9, cmap = 'OrRd')\nplt.title(\"Pearson Correlation\")\nplt.show()","6a1d30dd":"#transform marital status, witness present ind, age of vehicle and fraud\ndf['marital_status'] = df['marital_status'].astype(int)\ndf['witness_present_ind'] = df['witness_present_ind'].astype(int)\ndf['age_of_vehicle'] = df['age_of_vehicle'].astype(int)\ndf.fraud[df['fraud'] == 0] = 'False'\ndf.fraud[df['fraud'] == 1] = 'True'\ndf.head()","5ba17465":"#group gender and fraud\ngender_fraud = df.groupby(['gender', 'fraud']).size().reset_index(name = 'Count')\n\n#visualize gender ~ fraud\nplt.figure(figsize = (8,6))\nsns.barplot(data = gender_fraud, x = 'gender', y = 'Count', hue = 'fraud')\nplt.title(\"Gender of Cars Fraudulent Claim ~ Fraud Status\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Count\")\nplt.show()","b5b27261":"#group living status and fraud\nliving_fraud = df.groupby(['living_status', 'fraud']).size().reset_index(name = 'Count')\n\n#visualize living status ~ fraud\nplt.figure(figsize = (8,6))\nsns.barplot(data = living_fraud, x = 'living_status', y = 'Count', hue = 'fraud', palette = 'Set1')\nplt.title(\"Living Status of Cars Fraudulent Claim ~ Fraud Status\")\nplt.xlabel(\"Living Status\")\nplt.ylabel(\"Count\")\nplt.show()","8d3fe08f":"#group accident site and fraud\naccident_fraud = df.groupby(['accident_site', 'fraud']).size().reset_index(name = 'Count')\n\n#visualize accident site ~ fraud\nplt.figure(figsize = (8,6))\nsns.barplot(data = accident_fraud, x = 'accident_site', y = 'Count', hue = 'fraud', palette = 'Set2')\nplt.title(\"Accident Site of Cars Fraudulent Claim ~ Fraud Status\")\nplt.xlabel(\"Accident Site\")\nplt.ylabel(\"Count\")\nplt.show()","af7addc1":"#group channel and fraud\nchannel_fraud = df.groupby(['channel', 'fraud']).size().reset_index(name = 'Count')\n\n#visualize channel ~ fraud\nplt.figure(figsize = (8,6))\nsns.barplot(data = channel_fraud, x = 'channel', y = 'Count', hue = 'fraud')\nplt.title(\"Channel of Cars Fraudulent Claim ~ Fraud Status\")\nplt.xlabel(\"Channel\")\nplt.ylabel(\"Count\")\nplt.show()","3a446e00":"#handling categorical data\nfor i in df.columns.tolist():\n    df[i] = df[i].astype('category').cat.codes\n\ndf.head()","12854ffd":"#split data\nX = df.drop('fraud', axis = 1)\ny = df['fraud']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","cc8629a8":"#build model\nrf = RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n%time rf.fit(X_train, y_train)\nrf.score(X_test, y_test)","925db91f":"#prediction\ny_pred = rf.predict(X_test)\nprint(y_pred)","82239e08":"#check MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","343ebb8a":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = \".0f\", cmap = 'Blues')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","b69326f8":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","4cd84afa":"#defining of feature\nfeature = pd.Series(rf.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","c3e1909e":"#visualize feature\nplt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()","4949f7e9":"#deploying the model\nrf.fit(X, y)\npickle.dump(rf, open('random_forest.pkl', 'wb'))","7c433d9c":"# Random Forest Model ","f618d871":"# Data Extraction","f3d1de75":"# Deployment","9309cfae":"# Check Feature Importance","12896547":"# Identifying First-Party Physical Damage Fraudulence","a172e627":"# Visualization"}}