{"cell_type":{"e15068db":"code","1ddf9d45":"code","b81863e3":"code","736639e4":"code","282b8370":"code","c1d49807":"code","d5639eda":"code","bf76da6f":"code","166535e3":"code","405750bc":"code","a76df0b0":"code","3877fbc7":"code","2481687d":"code","b0e962f1":"code","78aadf6e":"code","e546d83e":"code","112c164c":"code","c8733cfb":"code","ccab6073":"code","5acdbd57":"code","29254c94":"code","6df26e9b":"code","f8f5c795":"code","92e68989":"code","f18023ff":"code","796778a3":"code","8d068680":"code","b0a469a3":"code","d1392784":"code","4ef96331":"code","17cf8173":"code","ddae0426":"code","065afb8e":"code","6108b84c":"code","a5c11aa0":"code","4404df48":"code","1b4b2719":"code","bb4eed46":"code","2a5e27be":"markdown","a12daa14":"markdown","b7a4c081":"markdown","b6d8a0e9":"markdown","885ceea0":"markdown","ae352cba":"markdown","ad9e6aed":"markdown","c5357af1":"markdown","0c6e3ece":"markdown","e86bdde8":"markdown","04d2696e":"markdown","2aec4034":"markdown","c3084318":"markdown","0df87154":"markdown","65f4b5c4":"markdown","4fccb9c0":"markdown","d8f60b88":"markdown","fe9bc8b0":"markdown","a89757cf":"markdown","b5fbf5b3":"markdown","f6b81c1d":"markdown","9bb42323":"markdown","3e68d76e":"markdown"},"source":{"e15068db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ddf9d45":"#\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\ndf = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')\ndf.head()","b81863e3":"df.keys()","736639e4":"#df.info()","282b8370":"import seaborn as sns\nsns.catplot(x = \"deposit\", kind = \"count\", palette = \"ch:.25\", data = df)","c1d49807":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\ndf['deposit'].value_counts(normalize=True)","d5639eda":"# print(df['deposit'].shape) # \u0412\u0441\u0435\u0433\u043e 11162 \u0441\u0442\u0440\u043e\u043a\ndf['deposit']","bf76da6f":"from sklearn. preprocessing import LabelEncoder\n\nle = LabelEncoder()\nle.fit(df.default)\ndf['default_le'] = le.transform(df.default)\n\n# \u0440\u0443\u0447\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430\n#dct = {'no': 0, 'yes': 1} # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \n#df['default_le'] = df['default'].map(dct)\n\nle_1 = LabelEncoder()\nle_1.fit(df.housing)\ndf['housing_le'] = le_1.transform(df.housing)\n\nle_2 = LabelEncoder()\nle_2.fit(df.housing)\ndf['loan_le'] = le_2.transform(df.loan)\n\nle_3 = LabelEncoder()\nle_3.fit(df.housing)\ndf['deposit_le'] = le_3.transform(df.deposit)\n\ndct_1 = {'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6, 'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec':12}\ndf['month_le'] = df['month'].map(dct_1)\n\n#dct_2 = {'married': 1, 'single': 2, 'divorced': 3}\n#df['marital_le'] = df['marital'].map(dct_2)\n\n#dct_3 = {'secondary': 1, 'tertiary': 2, 'primary': 3, 'unknown': 4}\n#df['education_le'] = df['education'].map(dct_3)\n\n#dct_4 = {'unknown': 0, 'cellular': 1, 'telephone': 2}\n#df['contact_le'] = df['contact'].map(dct_4)\n\n#dct_5 = {'unknown': 0, 'other': 1, 'failure': 2, 'success': 3}\n#df['poutcome_le'] = df['poutcome'].map(dct_5)\n\ndf.head().T","166535e3":"df_1 = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')\ndf_1['default'] = df['default_le']\ndf_1['housing'] = df['housing_le']\ndf_1['loan'] = df['loan_le']\ndf_1['deposit'] = df['deposit_le']\ndf_1['month'] = df['month_le']\n\n#df_1['marital'] = df['marital_le']\n#df_1['education'] = df['education_le']\n#df_1['contact'] = df['contact_le']\n#df_1['poutcome'] = df['poutcome_le']\n\n# get_dummies\ndf_1 = pd.get_dummies(df_1, columns=['marital', 'education', 'contact', 'poutcome'])\n\ndf_1.head().T","405750bc":"#df_1.info()","a76df0b0":"#df_2 = df_1.drop(['job'], axis = 1)\ndf_2 = pd.get_dummies(df_1, columns=['job']) \n\ndf_2.head().T","3877fbc7":"#df_2.info()","2481687d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 X - \u0432\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0435\u0437 target (deposit), \u0430 y - target (deposit).\n\ny = df_2['deposit']\ndf_3 = df_2.drop('deposit', axis = 1)\n\nX = df_3\n\nX_new = scaler.fit_transform(X)\nX_new","b0e962f1":"# \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, \n                                                      y, \n                                                      test_size=0.25, \n                                                      random_state=20) \n\n#random_state. Controls the shuffling applied to the data before applying the split. ","78aadf6e":"print(X_train.shape, y_train.shape)\nprint( X_valid.shape, y_valid.shape)","e546d83e":"#\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u0437\u0430\u0434\u0430\u0451\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)","112c164c":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nknn.fit(X_train, y_train)","c8733cfb":"# \u0421\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\ny_pred = knn.predict(X_valid)\ny_pred","ccab6073":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f mean_squared_error \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443, \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u0440\u0438\u0441\u043a\u0430, \n#\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043b\u0438 \u0443\u0431\u044b\u0442\u043a\u0430.\n\nfrom sklearn.metrics import mean_squared_error\nmean_squared_error(y_valid, y_pred)","5acdbd57":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0443\nknn.score(X_valid, y_valid)","29254c94":"# \u0415\u0449\u0451 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_valid, y_pred))","6df26e9b":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_valid, y_pred))","f8f5c795":"from sklearn.model_selection import KFold, cross_val_score\nkf = KFold(n_splits = 5, shuffle = True, random_state = 42)\n\nscores = cross_val_score(knn, X, y, cv = kf, scoring = 'accuracy')\nscores.mean()","92e68989":"scores = cross_val_score(knn, X, y, cv = kf, scoring = 'f1')\nscores.mean()","f18023ff":"from sklearn.model_selection import GridSearchCV\nknn_params = {'n_neighbors': np.arange(1, 51)}\nknn_grid = GridSearchCV(knn, \n                        knn_params, \n                        scoring='f1',\n                        cv = kf)\nknn_grid.fit(X_train, y_train)","796778a3":"print(\"Best_estimator: \", knn_grid.best_estimator_)\nprint(\"Cross-validated score of the best_estimator: \", knn_grid.best_score_)\nprint( \"Best_index_ while the best_score_ attribute will not be available: \", knn_grid.best_params_)","8d068680":"cv_results = pd.DataFrame(knn_grid.cv_results_)\ncv_results.T","b0a469a3":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\ny_pred = knn_grid.predict(X_valid)\naccuracy_score(y_valid, y_pred)","d1392784":"best_knn = KNeighborsClassifier(n_neighbors=13)\ny_pred = best_knn.fit(X_train, y_train).predict(X_valid)\naccuracy_score(y_valid, y_pred)","4ef96331":"import matplotlib.pyplot as plt\nplt.plot(cv_results[\"param_n_neighbors\"],cv_results[\"mean_test_score\"])\n\nplt.xlabel('Number of neighbors')\nplt.ylabel('Test accuracy')\nplt.title('F1 score')\nplt.show()","17cf8173":"knn_params = {\"p\": np.linspace(1,10, 200)}\n\nknn = KNeighborsClassifier(n_neighbors = 13, weights = \"distance\", n_jobs = -1)\nknn.fit(X_train, y_train)\n\ncv = GridSearchCV(knn, knn_params, cv = kf, scoring=\"f1\")\ncv.fit(X_train, y_train)","ddae0426":"\nprint(\"\u041b\u0443\u0447\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:\", cv.best_score_)\nprint(cv.best_estimator_)","065afb8e":"cv_result = pd.DataFrame(cv.cv_results_)\ncv_result","6108b84c":"plt.plot(cv_result[\"param_p\"],cv_result[\"mean_test_score\"])","a5c11aa0":"from sklearn.neighbors import NearestCentroid\nclf = NearestCentroid()\nclf.fit(X_train, y_train)\nNearestCentroid()\n\ny_pred_nc = clf.predict(X_valid)\ny_pred_nc","4404df48":"mean_squared_error(y_valid, y_pred_nc)","1b4b2719":"print(accuracy_score(y_valid, y_pred_nc))","bb4eed46":"print(confusion_matrix(y_valid, y_pred_nc))","2a5e27be":" \u041f\u0440\u0438 k = 13 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c.","a12daa14":"*5. \u0420\u0430\u0437\u0431\u0435\u0439\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e (\u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e) \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 train_test_split.*","b7a4c081":"\u041c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n1. \u041c\u0435\u0442\u043e\u0434\u044b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n2. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN\n3. \u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN\n4. \u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","b6d8a0e9":"# \u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","885ceea0":"*2. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043f\u0440\u0438 \u043a\u0430\u043a\u043e\u043c p \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e cross_val_score \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e \u0431\u043b\u043e\u043a\u0430\u043c; \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u044d\u0442\u0438\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439.*","ae352cba":"*2. \u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438 \u0447\u0438\u0441\u043b\u0435 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 k \u2208 [1;50]. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 GridSearchCV . \u041f\u0440\u0438 \u043a\u0430\u043a\u043e\u043c k \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c? \u0427\u0435\u043c\u0443 \u0440\u0430\u0432\u043d\u0430 \u044d\u0442\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430? \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 k (matplotlib.pyplot.plot()).*","ad9e6aed":"*2. \u0418\u0437\u0432\u043b\u0435\u043a\u0438\u0442\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (target). \u041a\u0430\u043a\u0430\u044f \u0438\u0437 \u0437\u0430\u0434\u0430\u0447 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u2013\u2013 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f?*\n\n\u0426\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c (target) \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f 'deposit', \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \"yes\" \u0438 \"no\", \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u0434\u0435\u043f\u043e\u0437\u0438\u0442 \u0438\u043b\u0438 \u043d\u0435\u0442. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f - \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u0438\u043f \u0437\u0430\u0434\u0430\u0447\u0438 - \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f (\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430).\n","c5357af1":"# \u041c\u0435\u0442\u043e\u0434\u044b \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","0c6e3ece":"# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN","e86bdde8":"\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430,\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0451 F1 score. The F1 score is the harmonic mean of the precision and recall. The highest possible value of F1 is 1, indicating perfect precision and recall, and the lowest possible value is 0, if either the precision or the recall is zero.","04d2696e":"*1. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u0441\u044c \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Kaggle: \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3: Bank marketing.*","2aec4034":"*3. \u041a\u0430\u043a\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 target-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439? \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.*","c3084318":"*1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0431\u043b\u043e\u043a\u043e\u0432 ( shuffle=True ). \u0427\u0438\u0441\u043b\u043e \u0431\u043b\u043e\u043a\u043e\u0432 n_splits \u0440\u0430\u0432\u043d\u043e 5. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 random_state \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: kf = KFold(n_splits=5, shuffle=True, random_state=42).*\n\n*\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 kNN \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435, \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0439 \u043c\u0435\u0440\u044b (\u043c\u0435\u0442\u0440\u0438\u043a\u0438) \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435? \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.*","0df87154":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e \u043a \u0435\u0434\u0438\u043d\u0438\u0446\u0435,\u043d\u043e \u0445\u0443\u0436\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f.","65f4b5c4":"\u0418\u043c\u0435\u0435\u043c ~52,6% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0432 \u0438 ~47,4% \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 c \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u043c.\n\n\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u044b 'no' \u0438 'yes' \u043f\u043e\u0447\u0442\u0438 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b.","4fccb9c0":"\u041c\u0435\u0442\u043e\u0434 NearestCentroid \u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 kNN \u0434\u0430\u0451\u0442 \u0445\u0443\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0431\u043b\u0438\u0437\u043a\u0430 \u043a score.","d8f60b88":"\n# \u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN","fe9bc8b0":"*1. \u041f\u0435\u0440\u0435\u0431\u0435\u0440\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 p \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043e\u0442 1 \u0434\u043e 10 \u0441 \u0442\u0430\u043a\u0438\u043c \u0448\u0430\u0433\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435\u0433\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e 200 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 (\u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e numpy.linspace ). \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 KNeighborsClassifier \u0438\u043b\u0438 KNeighborsRegressor \u0441 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c n_neighbors , \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u0440\u0430\u043d\u0435\u0435. \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u043e\u043f\u0446\u0438\u044e weights='distance' \u2013 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0432\u0435\u0441\u0430, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0435 \u043e\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043d\u043e\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 accuracy . \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0439\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u043e 5 \u0431\u043b\u043e\u043a\u0430\u043c.*","a89757cf":"*\u041f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 Scikit-learn:*\n1. RadiusNeighborsClassifier;\n2. RadiusNeighborsRegressor;\n3. NearestCentroid","b5fbf5b3":"*6. \u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 kNeighborsClassifier \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 KNeighborsRegressor . \u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e*\n1. accuracy_score \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438;\n2. mean_squared_error \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.\n\n*\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0432\u044b\u0432\u043e\u0434\u044b.*","f6b81c1d":"\u0412 \u043b\u0443\u0447\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 (\u043b\u0443\u0447\u0448\u0435\u0435 - 1). \u0418\u043c\u0435\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e\u0435 \u043a 1-\u0435, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438\u0435 \u044d\u0442\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \n\u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u043e. ","9bb42323":"*4. \u041f\u0440\u043e\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 (preprocessing). \u0414\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Pandas:*\n1. map() \u2013 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438; \n2. get_dummies() \u2013 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e. \n\n*\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (scaling). \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u043c StandardScaler \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Scikit-learn.*","3e68d76e":"C\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043c\u0430\u043b\u0430, \u0430 score \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435, \u043e\u0442\u043a\u0443\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e  \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439.\n\n\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0438 'no' \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c 'yes', \u0447\u0442\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0432\u0435\u0434\u044c \u043d\u043e\u0431\u043e\u0440\u043e\u0432 'no' \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435. "}}