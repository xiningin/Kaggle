{"cell_type":{"05529295":"code","7e924834":"code","24a0f7dd":"code","cf3b3a25":"code","dce478ae":"code","ee4f300e":"code","32a21767":"code","23ca0fcf":"code","a213efe9":"code","db75b097":"code","b73ee09a":"code","0df7bb2a":"code","2e14e60f":"code","56b84c9d":"code","5de365a8":"code","1e0603d8":"code","71497c1f":"code","3d1fc038":"code","d0b41292":"code","6accc8b6":"code","e03b1ef1":"code","f2c7a213":"code","030be86f":"code","8f022205":"code","b19461d4":"code","d246b322":"code","04af3b44":"code","4413d6d8":"code","ddb3a6c9":"code","ce22714b":"code","580d6011":"code","c92aebf6":"code","e467dd2f":"code","6ab39275":"code","43253d30":"code","7878689d":"code","ce3b5a6f":"code","d7842d70":"code","3ac49cbe":"markdown","e3a87356":"markdown","1c56868e":"markdown","07edd15b":"markdown","24369518":"markdown","22e4b290":"markdown","aa4171b9":"markdown","57799a92":"markdown","501e831c":"markdown","dcc3e056":"markdown","a02a22a5":"markdown","04064a91":"markdown"},"source":{"05529295":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor\nfrom sklearn.linear_model import LinearRegression\nimport xgboost as xgb\nimport lightgbm as lgbm\nfrom catboost import CatBoostRegressor\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7e924834":"import warnings\nwarnings.filterwarnings('ignore')","24a0f7dd":"matplotlib.rcParams.update({'font.size': 14})","cf3b3a25":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 (R2, \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430)\ndef evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","dce478ae":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\nprint('Train shape:', train_df.shape)\nprint('Test shape:', test_df.shape)","ee4f300e":"train_df.dtypes","32a21767":"train_df.describe()","23ca0fcf":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","a213efe9":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","db75b097":"train_df.select_dtypes(include='object').columns.tolist()","b73ee09a":"df_num_features = train_df.select_dtypes(include=['float64', 'int64'])\ndf_num_features.drop('Price', axis=1, inplace=True)","0df7bb2a":"df_num_features.hist(figsize=(16,16), bins=40, grid=False);","2e14e60f":"# \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 (\u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445) \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 train\ntrain_df[(train_df['Rooms'] == 0) | (train_df['Rooms'] > 7)\\\n        | (train_df[['Square', 'LifeSquare']].min(axis=1) < 10)\\\n        | (train_df[['Square', 'LifeSquare', 'KitchenSquare']].max(axis=1) > 250)\\\n        | (train_df['LifeSquare'] > train_df['Square'])\\\n        | (train_df['KitchenSquare'] > train_df['Square'])\\\n        | (train_df['Floor'] > train_df['HouseFloor'])\\\n        | (train_df['Price'] < train_df['Price'].quantile(0.05))\\\n        ].Id.count()","56b84c9d":"train_df.head()","5de365a8":"class TrainSquareDrop:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.Square_min = None\n        self.Square_max = None\n        self.Rooms_min = None\n        self.Rooms_max = None\n        self.Price_min = None\n        self.Price_max = None\n        self.Floor = None\n        self.HouseFloor = None\n        \n    def fit(self, X, y):\n        \"\"\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\"\"\"\n        self.Square_min = 10\n        self.Square_max = 250\n        self.Rooms_min = 0\n        self.Rooms_max = 8\n        self.Price_min = 0.05\n        self.Price_max = 0.95\n        self.Floor = 30\n        self.HouseFloor = 40\n    \n    def transform(self, X, y):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        X_y = pd.concat([X.reset_index(drop=True), pd.DataFrame(y, columns = ['Price']).reset_index(drop=True)], axis=1)\n        \n        #\u041f\u043b\u043e\u0449\u0430\u0434\u044c\n        condition = (X_y['Square'] < X_y['LifeSquare'])\n        X_y.loc[condition, 'Square'] = X_y.loc[condition, 'LifeSquare']\n        X_y = X_y[(X_y['Square'] > self.Square_min) & (X_y['Square'] < self.Square_max)]\n        X_y = X_y[train_df[['Square', 'LifeSquare', 'KitchenSquare']].max(axis=1) < self.Square_max]\n        #X_y = X_y[train_df['LifeSquare'] <= train_df['Square']]\n        X_y = X_y[train_df['KitchenSquare'] <= train_df['Square']]\n        \n        #\u041a\u043e\u043c\u043d\u0430\u0442\u044b\n        #X_y = X_y[(X_y['Rooms'] > self.Rooms_min) & (X_y['Square'] < self.Square_max)]\n        \n        #\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\n        X_y = X_y[(X_y['Price'] > train_df['Price'].quantile(self.Price_min))]\n        #X_y = X_y[(X_y['Price'] < self.Price_max)]\n        \n        #\u042d\u0442\u0430\u0436\n        X_y = X_y[(X_y['Floor'] < self.Floor)]\n        #X_y = X_y[(X_y['HouseFloor'] < self.HouseFloor)]        \n        #X_y = X_y[(train_df['Floor'] <= train_df['HouseFloor'])]\n        \n        #\u042d\u043a\u043e\u043b\u043e\u0433\u0438\u044f\n        #X_y = X_y[X_y['Ecology_1'] > 0]\n        \n        X = X_y.drop(columns='Price')\n        y = X_y.Price\n        return X, y","1e0603d8":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.RoomSquare_mean = None\n        self.KitchenSquare_share = None\n        self.medians = None\n        self.kitchen_square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"\n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b (\u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u0442 1 \u0434\u043e 5)\n        # \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 Room\n        t = X[(X['Rooms'] > 0) & (X['Rooms'] < 6)][['Rooms', 'Square']]\n        t['RoomSquare'] = t['Square'] \/ t['Rooms']\n        self.RoomSquare_mean = t['RoomSquare'].mean()\n        \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        \n        # \u0420\u0430\u0441\u0447\u0435\u0442, \u043a\u0430\u043a\u0443\u044e \u0434\u043e\u043b\u044e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u0443\u0445\u043d\u044f\n        k = X[(~X['KitchenSquare'].isna()) & (X['KitchenSquare'] < self.kitchen_square_quantile)]\n        k['KitchenShare'] = k['KitchenSquare'] \/ k['Square']\n        self.KitchenSquare_share = k['KitchenShare'].mean()\n        \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Square\n        condition = (X['Square'] < X['LifeSquare'])\n        X.loc[condition, 'Square'] = X.loc[condition, 'LifeSquare']\n        \n        # Rooms\n        condition = (X['Rooms'] == 0) | (X['Rooms'] >= 6) & (~X['Square'].isna())\n        X['Rooms_outlier'] = 0\n        X.loc[condition, 'Rooms_outlier'] = 1\n        \n        X.loc[condition, 'Rooms'] = round(X.loc[condition, 'Square'] \/ self.RoomSquare_mean)\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n               \n        # KitchenSquare\n        condition = (X['KitchenSquare'].isna()) | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        X['Kitchen_outlier'] = 0\n        X.loc[condition, 'Kitchen_outlier'] = 1\n        \n        X.loc[condition, 'KitchenSquare'] = self.KitchenSquare_share * X.loc[condition, 'Square']\n\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = self.KitchenSquare_share * X.loc[X['KitchenSquare'] < 3, 'Square']\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n            \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","71497c1f":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        self.med_price_by_square = None\n        self.med_price_by_square_year = None\n        self.mean_priceR = None\n        self.mean_priceHF = None\n        self.mean_priceHY = None\n        self.Eco_max = None\n        self.Soc_max = None\n        self.Soc2_max = None\n        self.Soc3_max = None\n        self.mean_price_eco = None\n        self.mean_price_soc = None\n        self.mean_price_soc2 = None\n        self.mean_price_soc3 = None\n        self.sq_max = None\n        self.med_sq_price1 = None\n        self.med_sq_price2 = None\n        self.med_sq_price3 = None\n        self.med_sq_price4 = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                        \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## Floor, Year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n        ## Ecology\n        if y is not None:\n            self.Eco_max = df['Ecology_1'].max()            \n            df['Price'] = y.values\n            df = self.eco_to_cat(df)\n            self.mean_price_eco = df.groupby(['DistrictId', 'eco_cat'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceEco'})\n            self.mean_price_eco_mean = self.mean_price_eco['MeanPriceEco'].mean()\n        \n        ## Social\n        if y is not None:\n            self.Soc_max = df['Social_1'].max()            \n            df['Price'] = y.values\n            df = self.soc_to_cat(df)\n            self.mean_price_soc = df.groupby(['DistrictId', 'soc_cat'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceSoc'})\n            self.mean_price_soc_mean = self.mean_price_soc['MeanPriceSoc'].mean()\n        \n        if y is not None:\n            self.Soc2_max = df['Social_2'].max()            \n            df['Price'] = y.values\n            df = self.soc2_to_cat(df)\n            self.mean_price_soc2 = df.groupby(['DistrictId', 'soc2_cat'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceSoc2'})\n            self.mean_price_soc2_mean = self.mean_price_soc2['MeanPriceSoc2'].mean()\n        \n        if y is not None:\n            self.Soc3_max = df['Social_3'].max()            \n            df['Price'] = y.values\n            df = self.soc3_to_cat(df)\n            self.mean_price_soc3 = df.groupby(['DistrictId', 'soc3_cat'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceSoc3'})\n            self.mean_price_soc3_mean = self.mean_price_soc3['MeanPriceSoc3'].mean()\n            \n        # Square\n        if y is not None:\n            self.sq_max = df['Square'].max()\n            df['Price'] = y.values\n            df = self.sq_to_cat(df)\n            self.med_sq_price1 = df.groupby(['sq_cat'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'med_sq_price1'})\n            self.med_sq_price1_med = self.med_sq_price1['med_sq_price1'].median()\n            \n            self.med_sq_price2 = df.groupby(['sq_cat', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'med_sq_price2'})\n            self.med_sq_price2_med = self.med_sq_price2['med_sq_price2'].median()\n            \n            self.med_sq_price3 = df.groupby(['sq_cat', 'Floor'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'med_sq_price3'})\n            self.med_sq_price3_med = self.med_sq_price3['med_sq_price3'].median()\n            \n            self.med_sq_price4 = df.groupby(['sq_cat', 'DistrictId'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'med_sq_price4'})\n            self.med_sq_price4_med = self.med_sq_price4['med_sq_price4'].median()\n            \n                   \n        ## Square, District\n        if y is not None:\n            df['Price'] = y.values\n            \n            df['Price_by_square'] = df['Price'] \/ df['Square']\n            self.med_price_by_square = df.groupby(['DistrictId'], as_index=False).agg({'Price_by_square':'median'})\\\n                                            .rename(columns={'Price_by_square':'MedPriceBySquare'})\n            self.mean_price_by_square = df.groupby(['DistrictId'], as_index=False).agg({'Price_by_square':'mean'})\\\n                                            .rename(columns={'Price_by_square':'MeanPriceBySquare'})\n            self.min_price_by_square = df.groupby(['DistrictId'], as_index=False).agg({'Price_by_square':'min'})\\\n                                            .rename(columns={'Price_by_square':'MinPriceBySquare'})\n            self.max_price_by_square = df.groupby(['DistrictId'], as_index=False).agg({'Price_by_square':'max'})\\\n                                            .rename(columns={'Price_by_square':'MaxPriceBySquare'})\n            self.med_price_by_square_median = self.med_price_by_square['MedPriceBySquare'].median()\n            self.mean_price_by_square_mean = self.mean_price_by_square['MeanPriceBySquare'].mean()\n            self.min_price_by_square_min = self.min_price_by_square['MinPriceBySquare'].min()\n            self.max_price_by_square_max = self.max_price_by_square['MaxPriceBySquare'].max()\n        \n        ## District\n        if y is not None:\n            df['Price'] = y.values\n                        \n            self.med_price_by_d = df.groupby(['DistrictId'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByD'})\n            self.mean_price_by_d = df.groupby(['DistrictId'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceByD'})\n            self.min_price_by_d = df.groupby(['DistrictId'], as_index=False).agg({'Price':'min'})\\\n                                            .rename(columns={'Price':'MinPriceByD'})\n            self.max_price_by_d = df.groupby(['DistrictId'], as_index=False).agg({'Price':'max'})\\\n                                            .rename(columns={'Price':'MaxPriceByD'})\n            self.med_price_by_d_median = self.med_price_by_d['MedPriceByD'].median()\n            self.mean_price_by_d_mean = self.mean_price_by_d['MeanPriceByD'].mean()\n            self.min_price_by_d_min = self.min_price_by_d['MinPriceByD'].min()\n            self.max_price_by_d_max = self.max_price_by_d['MaxPriceByD'].max()\n        \n        ## Square, District, Year\n        if y is not None:\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df['Price_by_square'] = df['Price'] \/ df['Square']\n            df = self.year_to_cat(df)\n            self.med_price_by_square_year = df.groupby(['DistrictId', 'year_cat'], as_index=False).agg({'Price_by_square':'median'})\\\n                                            .rename(columns={'Price_by_square':'MedPriceBySquareYear'})\n            self.med_price_by_square_year_median = self.med_price_by_square_year['MedPriceBySquareYear'].median()\n       \n        ## District, Rooms\n        if y is not None:\n            df = self.param_round(df)\n            self.mean_priceR = df.groupby(['DistrictId', 'Rooms_round'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceR'})\n            self.mean_priceR_mean = self.mean_priceR['MeanPriceR'].mean()\n        \n        ## District, HouseFloor\n        if y is not None:\n            df = self.param_round(df)\n            self.mean_priceHF = df.groupby(['DistrictId', 'HouseFloor_round'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceHF'})\n            self.mean_priceHF_mean = self.mean_priceHF['MeanPriceHF'].mean()\n            \n        ## District, HouseYear\n        if y is not None:\n            df = self.param_round(df)\n            self.mean_priceHY = df.groupby(['DistrictId', 'HouseYear_round'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'MeanPriceHY'})\n            self.mean_priceHY_mean = self.mean_priceHY['MeanPriceHY'].mean()\n    \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge, Square, Ecology, Social, Healthcare, Shops\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        X['Life_Kitchen_Square'] = X['LifeSquare'].fillna(0) + X['KitchenSquare']\n        X['Square_1'] = X['LifeSquare'] - X['LifeSquare'].fillna(0) - X['KitchenSquare']\n        \n        X['Facilities'] = X['Ecology_1'] + X['Social_1'] + X['Social_2'] + X['Social_3']\\\n                            + X['Helthcare_2'] + X['Shops_1']\n        \n        X = self.param_round(X)\n        \n        # First and last floor\n        X['First_floor'] = (X['Floor'] == 1).astype(int)\n        X['Last_floor'] = (X['Floor'] == X['HouseFloor']).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        X = self.eco_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 eco_cat\n        X = self.soc_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 soc_cat\n        X = self.soc2_to_cat(X)\n        X = self.soc3_to_cat(X)\n        X = self.sq_to_cat(X)\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_d is not None:\n            X = X.merge(self.med_price_by_d, on=['DistrictId'], how='left')\n            X['MedPriceByD'].fillna(self.med_price_by_d_median, inplace=True)\n            \n        if self.mean_price_by_d is not None:\n            X = X.merge(self.mean_price_by_d, on=['DistrictId'], how='left')\n            X['MeanPriceByD'].fillna(self.mean_price_by_d_mean, inplace=True)\n            \n        if self.min_price_by_d is not None:\n            X = X.merge(self.min_price_by_d, on=['DistrictId'], how='left')\n            X['MinPriceByD'].fillna(self.min_price_by_d_min, inplace=True)\n            \n        if self.max_price_by_d is not None:\n            X = X.merge(self.max_price_by_d, on=['DistrictId'], how='left')\n            X['MaxPriceByD'].fillna(self.max_price_by_d_max, inplace=True)            \n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n            \n        if self.med_price_by_square is not None:\n            X = X.merge(self.med_price_by_square, on=['DistrictId'], how='left')\n            X['MedPriceBySquare'].fillna(self.med_price_by_square_median, inplace=True)\n            \n        if self.mean_price_by_square is not None:\n            X = X.merge(self.mean_price_by_square, on=['DistrictId'], how='left')\n            X['MeanPriceBySquare'].fillna(self.mean_price_by_square_mean, inplace=True)\n            \n        if self.min_price_by_square is not None:\n            X = X.merge(self.min_price_by_square, on=['DistrictId'], how='left')\n            X['MinPriceBySquare'].fillna(self.min_price_by_square_min, inplace=True)\n            \n        if self.max_price_by_square is not None:\n            X = X.merge(self.max_price_by_square, on=['DistrictId'], how='left')\n            X['MaxPriceBySquare'].fillna(self.max_price_by_square_max, inplace=True)\n        \n        if self.med_price_by_square_year is not None:\n            X = X.merge(self.med_price_by_square_year, on=['DistrictId', 'year_cat'], how='left')\n            X['MedPriceBySquareYear'].fillna(self.med_price_by_square_year_median, inplace=True)\n        \n        if self.mean_priceR is not None:\n            X = X.merge(self.mean_priceR, on=['DistrictId', 'Rooms_round'], how='left')\n            X['MeanPriceR'].fillna(self.mean_priceR_mean, inplace=True)\n    \n        if self.mean_priceHF is not None:\n            X = X.merge(self.mean_priceHF, on=['DistrictId', 'HouseFloor_round'], how='left')\n            X['MeanPriceHF'].fillna(self.mean_priceHF_mean, inplace=True)\n        \n        if self.mean_priceHY is not None:\n            X = X.merge(self.mean_priceHY, on=['DistrictId', 'HouseYear_round'], how='left')\n            X['MeanPriceHY'].fillna(self.mean_priceHY_mean, inplace=True)\n        \n        if self.mean_price_eco is not None:\n            X = X.merge(self.mean_price_eco, on=['DistrictId', 'eco_cat'], how='left')\n            X['MeanPriceEco'].fillna(self.mean_price_eco_mean, inplace=True)\n        \n        if self.mean_price_soc is not None:\n            X = X.merge(self.mean_price_soc, on=['DistrictId', 'soc_cat'], how='left')\n            X['MeanPriceSoc'].fillna(self.mean_price_soc_mean, inplace=True)\n        \n        if self.mean_price_soc2 is not None:\n            X = X.merge(self.mean_price_soc2, on=['DistrictId', 'soc2_cat'], how='left')\n            X['MeanPriceSoc2'].fillna(self.mean_price_soc2_mean, inplace=True)\n        \n        if self.mean_price_soc3 is not None:\n            X = X.merge(self.mean_price_soc3, on=['DistrictId', 'soc3_cat'], how='left')\n            X['MeanPriceSoc3'].fillna(self.mean_price_soc3_mean, inplace=True)\n        \n        if self.med_sq_price1 is not None:\n            X = X.merge(self.med_sq_price1, on=['sq_cat'], how='left')\n            X['med_sq_price1'].fillna(self.med_sq_price1_med, inplace=True)\n        \n        if self.med_sq_price2 is not None:\n            X = X.merge(self.med_sq_price2, on=['sq_cat', 'Rooms'], how='left')\n            X['med_sq_price2'].fillna(self.med_sq_price2_med, inplace=True)\n        \n        if self.med_sq_price3 is not None:\n            X = X.merge(self.med_sq_price3, on=['sq_cat', 'Floor'], how='left')\n            X['med_sq_price3'].fillna(self.med_sq_price3_med, inplace=True)\n        \n        if self.med_sq_price4 is not None:\n            X = X.merge(self.med_sq_price4, on=['sq_cat', 'DistrictId'], how='left')\n            X['med_sq_price4'].fillna(self.med_sq_price4_med, inplace=True)\n                \n        \n        \n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [0, 2, 4, 8, 12, 16, 20, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1960, 1970, 1980, 1990, 2000, 2005, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def eco_to_cat(self, X):\n        bins = [0, 0.1, 0.2, 0.3, 0.4, X['Ecology_1'].max()]\n        X['eco_cat'] = pd.cut(X['Ecology_1'], bins=bins, labels=False)\n\n        X['eco_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def soc_to_cat(self, X):\n        bins = [0, 10, 20, 30, 40, 50, 60, X['Social_1'].max()]\n        X['soc_cat'] = pd.cut(X['Social_1'], bins=bins, labels=False)\n\n        X['soc_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def soc2_to_cat(self, X):\n        bins = [0, 1000, 5000, 10000, X['Social_2'].max()]\n        X['soc2_cat'] = pd.cut(X['Social_2'], bins=bins, labels=False)\n\n        X['soc2_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def soc3_to_cat(self, X):\n        bins = [0, 10, 30, 50, 70, 100, 130, X['Social_3'].max()]\n        X['soc3_cat'] = pd.cut(X['Social_3'], bins=bins, labels=False)\n\n        X['soc3_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def sq_to_cat(self, X):\n        bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 100, 130, 150, 200, X['Square'].max()]\n        X['sq_cat'] = pd.cut(X['Square'], bins=bins, labels=False)\n\n        X['sq_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def param_round(self, X):\n        X['Square_round'] = round(X['Square'])\n        X['HouseFloor_round'] = round(X['HouseFloor'])\n        X['Rooms_round'] = round(X['Rooms'])\n        X['KitchenSquare_round'] = round(X['KitchenSquare'])\n        X['Floor_round'] = round(X['Floor'])\n        X['HouseYear_round'] = round(X['HouseYear'])\n        \n        X['Square_round'].fillna(-1, inplace=True)\n        X['HouseFloor_round'].fillna(-1, inplace=True)\n        X['Rooms_round'].fillna(-1, inplace=True)\n        X['KitchenSquare_round'].fillna(-1, inplace=True)\n        X['Floor_round'].fillna(-1, inplace=True)\n        X['HouseYear_round'].fillna(-1, inplace=True)\n        return X\n            ","3d1fc038":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor',\n                 'HouseFloor', 'HouseYear', 'Ecology_1', 'Ecology_2', 'Ecology_3',\n                 'Social_1', 'Social_2', 'Social_3', 'Helthcare_2', 'Shops_1', 'Shops_2']\nnew_feature_names = ['Rooms_outlier', 'Kitchen_outlier', 'HouseFloor_outlier',\n                     'HouseYear_outlier', 'LifeSquare_nan', 'DistrictSize', 'new_district',\n                     'IsDistrictLarge', 'floor_cat', 'year_cat']\ntarget_name = 'Price'","d0b41292":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)","6accc8b6":"X = train_df.drop(columns=target_name)\ny = train_df[target_name]","e03b1ef1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","f2c7a213":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f train\ntr_squaredrop = TrainSquareDrop()\ntr_squaredrop.fit(X_train, y_train)\nX_train, y_train = tr_squaredrop.transform(X_train, y_train)","030be86f":"# \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c\npreprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","8f022205":"# \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfeatures_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","b19461d4":"X_train_0 = X_train[feature_names + new_feature_names]\nX_valid_0 = X_valid[feature_names + new_feature_names]\ntest_df_0 = test_df[feature_names + new_feature_names]","d246b322":"X_train_0.isna().sum().sum(), X_valid_0.isna().sum().sum(), test_df_0.isna().sum().sum()","04af3b44":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nrfr = RandomForestRegressor(random_state=42)\nlr = LinearRegression()\ngbr = GradientBoostingRegressor(random_state=42)\nxgbr = xgb.XGBRegressor(random_state=42)\nlgbmr = lgbm.LGBMRegressor(random_state=42)\ncbr = CatBoostRegressor(random_state=42)\nstack = StackingRegressor([('lgbmr', lgbmr), ('xgbr', xgbr)], final_estimator=lgbmr)\n\nmodels = [rfr, gbr, xgbr, lgbmr, cbr]","4413d6d8":"for mod in models:\n    mod.fit(X_train_0, y_train)\n    y_train_preds = mod.predict(X_train_0)\n    y_test_preds = mod.predict(X_valid_0)\n    print(mod)\n    evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","ddb3a6c9":"# \u0412\u043e\u0437\u044c\u043c\u0435\u043c CatBoostRegressor (cbr), \u0443 \u043d\u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0435 R2\n# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\nfeature_importances = pd.DataFrame(zip(X_train_0.columns, cbr.feature_importances_), \n                                   columns=['feature_name', 'importance'])\nfi_cbr = feature_importances.sort_values(by='importance', ascending=False)\n\nprint('cbr:')\nprint(fi_cbr)","ce22714b":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (\u0441 \u0432\u0435\u0441\u043e\u043c 0)\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\nold_features = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor',\n                'HouseFloor', 'HouseYear', 'Ecology_1', 'Ecology_3',\n                'Social_1', 'Social_2', 'Social_3', 'Helthcare_2', 'Shops_1', 'Shops_2',\n                'Kitchen_outlier', 'HouseFloor_outlier',\n                'LifeSquare_nan', 'DistrictSize', 'Rooms_outlier',\n                'IsDistrictLarge', 'floor_cat', 'year_cat',                       \n                #'Ecology_2', 'HouseYear_outlier', 'new_district'\n               ]\nnew_features = ['Life_Kitchen_Square', 'Facilities', 'soc_cat', 'soc2_cat',\n                'MinPriceBySquare', 'med_sq_price3'\n                #'Square_1','Square_round', 'HouseFloor_round', 'Rooms_round',\n                #'KitchenSquare_round', 'Floor_round', 'HouseYear_round', 'First_floor',\n                #'Last_floor', 'eco_cat', 'soc3_cat', 'sq_cat', 'MedPriceByDistrict',\n                #'MedPriceByD', 'MeanPriceByD', 'MinPriceByD', 'MaxPriceByD',\n                #'MedPriceByFloorYear', 'MedPriceBySquare', 'MeanPriceBySquare',\n                #'MaxPriceBySquare', 'MedPriceBySquareYear', 'MeanPriceR', 'MeanPriceHF',\n                #'MeanPriceHY', 'MeanPriceEco', 'MeanPriceSoc', 'MeanPriceSoc2',\n                #'MeanPriceSoc3', 'med_sq_price1', 'med_sq_price2', 'med_sq_price4'\n               ]\n\nfinal_feature_names = old_features + new_features","580d6011":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ncbr = CatBoostRegressor(random_state=42, eval_metric='R2')\n\nX_train_1 = X_train[final_feature_names]\nX_valid_1 = X_valid[final_feature_names]\ntest_df_1 = test_df[final_feature_names]\n\ncbr.fit(X_train_1, y_train)\n\ny_train_preds = cbr.predict(X_train_1)\ny_test_preds = cbr.predict(X_valid_1)\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","c92aebf6":"# \u0418\u0449\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 cross val R2\n'''\nparameters = {\n    'depth': [2, 3, 4, 5, 6],\n    'n_estimators': [130, 135, 140, 145, 150],\n    'num_leaves': [14, 15, 16, 17, 18]\n}\n\ngs_cbr = GridSearchCV(\n    estimator=CatBoostRegressor(random_state=42),\n    param_grid=parameters,\n    scoring='r2',\n    cv=3,\n    n_jobs=-1\n)\n\ngs_cbr.fit(X_train_1, y_train)\nprint('gs_cbr: ', gs_cbr.best_params_, gs_cbr.best_score_)\n'''","e467dd2f":"# CatBoostRegressor (cbr), \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n'''\ncbr = CatBoostRegressor(random_state=42,\n                        max_depth=4,\n                        n_estimators=140,\n                        num_leaves=16\n                    )\n\ncbr.fit(X_train_1, y_train)\n\ncv_score = cross_val_score(cbr, X_train_1, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=42))\nprint('cv_score: ', cv_score)\nprint('cv_score_mean', cv_score.mean())\n'''","6ab39275":"test_df_1.shape","43253d30":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","7878689d":"predictions = cbr.predict(test_df_1)\npredictions","ce3b5a6f":"submit['Price'] = predictions\nsubmit.head()","d7842d70":"submit.to_csv('rf_submit_4.csv', index=False)","3ac49cbe":"## \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","e3a87356":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (\u0441 \u0432\u0435\u0441\u043e\u043c 0)\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n\nold_features = ['Square', 'KitchenSquare', 'HouseFloor', 'LifeSquare', 'HouseYear',\n                'Floor', 'Ecology_1', 'Rooms', 'Social_1', 'Social_2', 'Social_3', 'Shops_1'                \n               ]\nnew_features = ['MeanPriceR', 'MedPriceBySquareYear', 'med_sq_price1', 'MedPriceByDistrict',\n                'med_sq_price2', 'Square_1', 'MedPriceByFloorYear', 'MeanPriceEco', 'Life_Kitchen_Square',\n                'MeanPriceSoc', 'MedPriceBySquare', 'MeanPriceSoc2', 'MaxPriceByD', 'MeanPriceByD',\n                'DistrictSize', 'MaxPriceBySquare', 'MedPriceByD', 'Facilities', 'MinPriceBySquare',\n                'MeanPriceBySquare', 'floor_cat', 'Last_floor', 'HouseFloor_outlier', 'IsDistrictLarge',\n                'Helthcare_2', 'year_cat', 'soc_cat', 'Kitchen_outlier', 'MinPriceByD', 'soc2_cat',\n                'eco_cat', 'soc3_cat'\n               ]\n\nfinal_feature_names = old_features + new_features","1c56868e":"### \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043d\u043e \u0432 \u0438\u0442\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0435 \u0432\u0441\u0435):\n1. \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 1 \u043a\u0432.\u043c. \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443.\n2. \u041c\u0435\u0434\u0438\u0430\u043d\u0430, \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 1 \u043a\u0432.\u043c. \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438.\n3. \u041c\u0435\u0434\u0438\u0430\u043d\u0430, \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e \u0446\u0435\u043d\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443.\n4. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u0442\u0430\u0436\u0435\u0439.\n5. \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u043e\u0438\u043c\u0441\u043e\u0442\u044c \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443 \u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c.\n6. \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0438, \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c.","07edd15b":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 train, valid, test","24369518":"### \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f  \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\u0422\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u0430\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0436\u0438\u043b\u0430\u044f. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0440\u0430\u0432\u043d\u043e\u0439 \u0436\u0438\u043b\u043e\u0439. \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438, \u0433\u0434\u0435 \u0432 \u0438\u0442\u043e\u0433\u0435 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u0435\u0435 10 \u043c2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 250 \u043c2. \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","22e4b290":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u044b\u0431\u043e\u0440 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","aa4171b9":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","57799a92":"### \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e:\n1. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 Room (0 \u0438\u043b\u0438 >=6\u043c2) \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b (\u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u0442 1 \u0434\u043e 5). \u0414\u0430\u043b\u0435\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u043d\u043e\u0432\u0430 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u043e\u043d\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n2. \u0415\u0441\u043b\u0438 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0436\u0438\u043b\u043e\u0439, \u0442\u043e \u043e\u043d\u0430 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0436\u0438\u043b\u0443\u044e.\n3. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043a\u0443\u0445\u043d\u0438 (<3\u043c2 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f 0.975) \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0434\u043e\u043b\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0434\u043b\u044f \"\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0445\" \u043a\u0432\u0430\u0440\u0442\u0438\u0440.","501e831c":"## EDA","dcc3e056":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","a02a22a5":"## \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","04064a91":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438"}}