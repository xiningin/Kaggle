{"cell_type":{"77f942b4":"code","5ec1739c":"code","6d4d1325":"code","1ccc5875":"code","5581dff8":"code","d618932c":"code","5397e086":"code","55df0479":"code","a0c173de":"code","9e88b93b":"markdown","bc51f473":"markdown","a92fb049":"markdown","6b2abe85":"markdown","c38f79ec":"markdown","249d7687":"markdown","c4a47893":"markdown"},"source":{"77f942b4":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n# from control import *\nfrom  clean import *\nfrom  graphs import *\nfrom jengineer import *\nfrom python_expansion import *","5ec1739c":"data = pd.read_csv(\"\/kaggle\/input\/build-characteristics-corona-patients-part-a\/Characteristics_Corona_patients - 2 06122020.csv\",\n                   parse_dates=['confirmed_date', 'deceased_date',\"released_date\",\"return_date\", \"date_onset_symptoms\"])","6d4d1325":"data.shape","1ccc5875":"data.columns","5581dff8":"%%time\n# 2min 44s\nfor j in data.columns:\n    data[j] = data[j].apply(lambda x: x if x==x else np.nan)","d618932c":"%%time\nfor j in ['confirmed_date', 'deceased_date',\"released_date\",\"return_date\", \"date_onset_symptoms\"]:\n    name = j+\"_D\"\n    zero = '1.1.2019'\n    JEngineer.interval_date_datetime_col(data, j, zero , name )","5397e086":"%%time\nJEngineer.interval_datatime_cols(data,\"confirmed_date\",\"return_date\", \"return_date_until_confirmed_date\")\nprint(3)\nJEngineer.interval_datatime_cols(data, \"confirmed_date\", \"date_onset_symptoms\", \"date_onset_symptoms_until_confirmed_date\")\nprint(3)\nJEngineer.interval_datatime_cols(data,\"released_date\",\"confirmed_date\", \"confirmed_date_until_released_date\")\nprint(3)\nJEngineer.interval_datatime_cols(data,\"deceased_date\",\"confirmed_date\", \"confirmed_date_until_deceased_date\")\nprint(3)\n ","55df0479":"%%time\n# 6min 30s\n# togther Wall time: 10min 14s\nindexs = data.index[data.infected_by.notnull()]\n\ndata[\"len_people_infected_by_patient\"] =  0 \ndata[\"severity_illness_infectious_person\"] = np.nan\n\nfor indx in indexs:\n    i  = data.infected_by[indx]\n    i = i.split(\",\")\n    i = [x.strip() for x in i]\n    i = Clean.remove_from_ls(i , \"\")\n    \n    for x in i:\n        ind = float(x)\n        data.loc[ind, \"len_people_infected_by_patient\"] =  data.loc[ind, \"len_people_infected_by_patient\"] +1 \n    \n    if len(i) == 1:\n        ind = float(i[0])\n        data.loc[indx, \"severity_illness_infectious_person\"] =  data.severity_illness[ind]\n    \n    elif len(i) > 1:\n        pass\n    \n    \n# make 0 to np.nan\ndata.loc[data[\"len_people_infected_by_patient\"] ==0, \"len_people_infected_by_patient\"] = np.nan","a0c173de":"data.to_csv(\"Characteristics_Corona_patients version 06122020.csv\", index = False)\ndata.to_csv()","9e88b93b":"Turn all date data into numbers\n(Measuring distance from 1.1.19)\n","bc51f473":"make interval datatime_cols cols","a92fb049":"severity_illness_infectious_person & len_people_infected_by_patient","6b2abe85":"# Feature Engineering","c38f79ec":"# Features engineering and visual exploration of the data","249d7687":"data.shape","c4a47893":"![](http:\/\/)"}}