{"cell_type":{"8fda2371":"code","dbe5b7fe":"code","e7e485fc":"code","f1fbbedb":"code","dbceab7d":"code","735e114c":"code","7db1e9cf":"code","174a35b4":"code","8d5bf74a":"code","d8a1887d":"code","2d6f5d4a":"code","7e0b1cd7":"code","c3c0b196":"code","30dfb4ec":"code","29d5bfc0":"code","42a23360":"code","169b5c7e":"code","e7c0703b":"code","4922c52a":"code","4154afa4":"markdown","a177d017":"markdown","0c572034":"markdown","e6eea2bf":"markdown","c796181b":"markdown","9b564a3a":"markdown","19c959e3":"markdown","772acfcc":"markdown","3549fc86":"markdown","4689de70":"markdown","5da60615":"markdown","b1850995":"markdown","70b8e4cd":"markdown","673cf4c1":"markdown","27d40785":"markdown","5d16bdcf":"markdown","fa4ca8c7":"markdown","246f980b":"markdown","efbdd9e0":"markdown"},"source":{"8fda2371":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dbe5b7fe":"dataset1 = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\ndataset1[dataset1.columns[0:32]].isnull().sum()\/len(dataset1)*100\n","e7e485fc":"dataset2 = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')\ndataset2.isnull().sum()\/len(dataset2)*100\n","f1fbbedb":"covid = dataset2.copy()\ndf= pd.DataFrame(covid['symptom_onset'])\ndf.fillna(0)\ndf['month']=0\ndf['day'] = 0\nfor x in range(0,len(df)):\n\n    if type(df['symptom_onset'][x]) == float :\n        df['month'][x]=0\n        df['day'][x]=0\n        \n    else:\n        slash= (df['symptom_onset'][x]).find('\/')\n        second_slash= df['symptom_onset'][x][slash+1:].find('\/')\n        df['month'][x]= int(df['symptom_onset'][x][0:slash].strip()) \n        df['day'][x]=int(df['symptom_onset'][x][slash+1:slash+second_slash+1].strip())\n        \ndf\n    ","dbceab7d":"dataset2= pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')","735e114c":"mask = ((dataset2['symptom_onset_date'].notnull() | dataset2['confirmed_date'].notnull()) & (dataset2['released_date'].notnull() | dataset2['deceased_date'].notnull()) & (dataset2['birth_year'].notnull() | dataset2['age'].notnull()))\ndataset2.loc[mask, 'age'].notnull().sum()","7db1e9cf":"column_names=['birth_year','age','symptom_onset_date','confirmed_date','released_date','deceased_date','sex','state']\nnewdf = dataset2.loc[mask,column_names].copy()\nnewdf.head()","174a35b4":"date_columns = ['symptom_onset_date','confirmed_date','released_date','deceased_date']\nfor column_name in date_columns:\n    newdf[column_name] = pd.to_datetime(newdf[column_name], format=\"%Y-%m-%d\")\nprint()\nprint(newdf.dtypes)","8d5bf74a":"newdf['is_male'] = pd.get_dummies(newdf.sex)['male']\nnewdf['is_female'] = pd.get_dummies(newdf.sex)['female']\nprint(newdf[['is_male','is_female']].head(10))\nprint(newdf.dtypes)\nprint(newdf.isnull().sum()\/len(newdf)*100)\n","d8a1887d":"newdf['recovery_time']=0\nfor i in range(0,1035):\n    if newdf['state'].iloc[i]=='deceased':\n        newdf['recovery_time'].iloc[i]=newdf.iloc[i]['deceased_date'] - newdf.iloc[i]['confirmed_date']\n    elif newdf['state'].iloc[i]=='released':\n        newdf['recovery_time'].iloc[i]= newdf.iloc[i]['released_date']- newdf.iloc[i]['confirmed_date']\n        \nnewdf","2d6f5d4a":"print(newdf.isnull().sum()\/len(newdf)*100)","7e0b1cd7":"dayss= newdf['recovery_time'].astype('timedelta64[D]')\nnewdf['timelength']= dayss \/ np.timedelta64(1,'D')","c3c0b196":"alive = newdf[newdf['state']!='deceased']\nalive.state.unique()\n","30dfb4ec":"x=alive.age.unique()\nx.sort()\ny=[]\navgtime=0\nfor age in x:\n    t_avg= alive[alive['age']==age]['timelength'].mean()\n    y.append(t_avg)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(x,y)\nplt.show()\n","29d5bfc0":"import seaborn as sns\ndensity= sns.kdeplot(alive['timelength'],bw=5)\n\nplt.title ('recovery time density plot')\nplt.xlabel('Recovery time')\nplt.ylabel('density')\n\nplt.show()","42a23360":"alive['acc_age']=2020- alive['birth_year']\nalive['agegroup']= 0\nfor i in range(len(alive)):\n    s= alive['age'].iloc[i].find('s')\n    alive['agegroup'].iloc[i]= int((alive['age'].iloc[i])[:s])\n    ","169b5c7e":"Y= alive['agegroup']\nplt.scatter(alive['acc_age'], alive['timelength'], c=Y.values.ravel())\n\nplt.title('scatter plot for age against recovery time')\nplt.xlabel('age')\nplt.ylabel('recovery time')\n\nplt.show()\n\n","e7c0703b":"plt.scatter(alive['agegroup'], alive['timelength'])\n\nplt.title('scatter plot for agegroup against recovery time')\nplt.xlabel('age group')\nplt.ylabel('recovery time')\n\nplt.show()","4922c52a":"plt.violinplot([alive['timelength']], showextrema=True, showmedians=True)\n\nplt.title('Recovery time')\nplt.ylabel('time(days)')\n\nplt.show()","4154afa4":"In our refined dataset newdf, we have a released or deceased date for every case, a confirmation date for every case, and a sex for every case. Essentially we want to consolidate the dates into one column that gives the length in time from confirmation to release\/death, in days. We could create secondary visualization(s) using birth_year and symptom_onset_date, or using sex.","a177d017":"We've narrowed down our samples to those with values we can use to potentially answer our question.","0c572034":"This shows us that the one dataset provided will not be able to answer our question, since almost 100% of cases did not have an outcome listed. Fortunately, data is spread across multiple csv files, so we can dive into a few others and search for this info.","e6eea2bf":"NOTE: at this point, we realized the dataset we originally sourced from wasn't fit to answer the question we came in with. So we found another, more recent one.","c796181b":"As seen here, our new column does not contain any null values. Now, we can turn this into a numeric type and work with that result directly.","9b564a3a":"This is a scatter plot of the recovery time versus ages. We differentiate different age groups with different colors so the distinctions between different ages are clearer.","19c959e3":"I'm thinking that this plot is kind of redundant and it's not as nice as the one before so we might as well jsut delete it. What do you think?","772acfcc":"This violinplot shows both the median and the probability density. We have a clear view of the entire distribution of the data and we can see that there're two peaks in this dataset.","3549fc86":"We also create a graph for the density of the recovery time in general regardless of the ages in order to get a sense of how long in general does ut take for symptoms to go away.","4689de70":"We create another column that give us the integer value only for the recovery time. Next step is to separate the deceased from the recovered and then calculate average timelength.","5da60615":"https:\/\/www.kaggle.com\/bradysites\/info-1998-project","b1850995":"We essentially created two columns that represent the age group and ages in integer respectively to visualize the data even better.","70b8e4cd":"This file has complete information on recovery status, with varying amounts of data on symptoms, exposure, and report dates.\nThus, we see it fit to use for analysis.","673cf4c1":"# INFO 1998 Project: COVID-19\nNames: Ashley Jiang (yj387), Brady Sites (bas339)\n\nFor this project, we chose to analyze data surrounding COVID-19 statistics. The question we asked ourselves was, \"What was the average recovery period for different age groups?\" The motivation for this inquiry is the general trend of deteriorating health with age, so we wanted to see if age generally correlated to recovery time.","27d40785":"We converted all relevant dates to datetime64 type so we can perform calculations on them easier later.","5d16bdcf":"Since the dates in the sympotom_onset column are string inputs, we first cut out the individual month and date of each date then convert them to int.","fa4ca8c7":"We calculate the average recovery time based on their groups. And we created a histogram of the average time length versus the age groups.","246f980b":"We just created a column with the value of main interest: recovery time! In order to do so, we divide our dataset into two groups: the released ones and the deceased ones. And we use the respective dates to calculate the time span.","efbdd9e0":"# Closing inferences and remarks:\n<p>The scatter plot makes it look like there is no correlation between age and recovery time. We obviously can't conclude that, because of inconsistencies in data that might lead to the large amount of variation. The bar graph indicates that the oldest age group did take longer to recover, but our data does not give a strong enough indication for us to accept the hypothesis.<\/p>"}}