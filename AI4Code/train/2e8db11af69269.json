{"cell_type":{"026f7c6c":"code","558432f8":"code","e6b08081":"code","3f8a1256":"code","f4e4fea5":"code","da33570a":"code","3c6b5fe9":"code","f3f95bb9":"code","4f9b8404":"code","3e96c09d":"code","e82dc240":"code","119bf1b4":"code","b5f13a07":"code","72417f7f":"code","2b885e44":"code","81fcb7bb":"code","016ac760":"code","d5fa94a4":"code","5077f03f":"code","b0cc22d3":"code","c95fae37":"code","94ba2104":"code","a0cde1f7":"code","13c4e373":"code","24df8b59":"code","ff6cdc61":"code","777d5462":"code","3acebcb2":"code","816bd2f7":"code","dd54bc11":"code","15d1d509":"code","ec094133":"code","38aa3197":"code","a06339b3":"code","5b006e5a":"code","f6485edd":"code","fb6b88f3":"code","64facab0":"code","4e3264e7":"code","0dcba8fe":"code","2cabfc6b":"code","aecb41a3":"code","3718b930":"code","03d67d96":"code","e5367d01":"code","5581e707":"code","206ac4da":"code","1cf78290":"code","cfa4f4cf":"code","74badb3d":"code","7a3b0b4e":"code","23b929ba":"code","0ca4f9f2":"code","ca7a3ac2":"code","53df10fd":"code","ecc23a54":"code","065d106f":"code","2c9aee94":"code","0b3a25fe":"code","531abee2":"code","4c6a0bd0":"code","63ace909":"code","ee66c278":"code","355a63cd":"code","a258b2ac":"code","b9f2df60":"code","0db793bc":"code","fdc13e6b":"code","d907c20a":"code","a5f3b67a":"code","ce8900b3":"code","23f63d95":"code","9d3d68a4":"code","1276a2f0":"code","d1ff6b60":"code","eeb3eee0":"markdown","f4df1b85":"markdown","cbd133ce":"markdown","fbd39476":"markdown","4d83e5ff":"markdown","b055de6b":"markdown","5384e45b":"markdown","437148be":"markdown","822f6d7d":"markdown","228c523b":"markdown","704739d9":"markdown","b8e7d573":"markdown","3c3959fd":"markdown","781faf36":"markdown","b5ca1674":"markdown","11925944":"markdown","bdca33c5":"markdown","e70b5cc2":"markdown","10caa1a8":"markdown","f0d497eb":"markdown","3a69fa2a":"markdown","4a8a4d69":"markdown","aba9e9ce":"markdown","3cfe534f":"markdown"},"source":{"026f7c6c":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder #import LabelEncoder\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set()","558432f8":"df=pd.read_csv(\"..\/input\/kidney-disease-dataset\/kidney_disease.csv\")","e6b08081":"df.describe()","3f8a1256":"df.head()","f4e4fea5":"df.isnull().sum()","da33570a":"df.dtypes","3c6b5fe9":"# As age has 9 missing values with total of 400 values which is 2.25% of total data.\n# so we remove these values\nindexNames = df[ (df['age'].isnull())].index\ndf.drop(indexNames , inplace=True)\ndf","f3f95bb9":"#similarly we drop bp column\nindexNames = df[ (df['bp'].isnull())].index\ndf.drop(indexNames , inplace=True)\ndf.isnull().sum()","4f9b8404":"#sg has 47 null values which is more than 11%\n#so we will not drop the column\n# value has very low s.d and mean\n#mean=1.017408\n#50%=1.02\n#so we replace value with mean+50%\/2\nnewvalue=(1.017408+1.02)\/2\nnewvalue\ndf[\"sg\"].fillna(newvalue, inplace=True)\ndf.isnull().sum()","3e96c09d":"#al has 41 missing values so we will not delete it\n#mean\n#min=0.0\n#50%=0.0\n#mean=1.016949\n#max=5.0\n#std around 1\nnewvalue=(5+0)\/2\nnewvalue=(newvalue+1.016949)\/2\ndf[\"al\"].fillna(newvalue, inplace=True)\ndf.isnull().sum()","e82dc240":"df[\"su\"].mode()","119bf1b4":"(df[\"su\"]==0).sum()","b5f13a07":"# as most frequent value is 0 equal to 276 out of 356\n#so replace nan with 0\ndf[\"su\"].fillna(0, inplace=True)\ndf.isnull().sum()","72417f7f":"#missing value=142\ndf[\"rbc\"].unique()","2b885e44":"#rbc has two values normal, abnormal\n(df[\"rbc\"]=='normal').sum()","81fcb7bb":"(df[\"rbc\"]=='abnormal').sum()","016ac760":"#normal has 194 and abnormal has 43 values\n#so we replace nan with normal\ndf[\"rbc\"].fillna('normal', inplace=True)","d5fa94a4":"df[\"rbc\"].unique()","5077f03f":"print(df[\"pc\"].unique())\n(df[\"pc\"]=='normal').sum()","b0cc22d3":"#normal has 251 and abnormal has 72 values so replace nan with normal\ndf[\"pc\"].fillna('normal', inplace=True)","c95fae37":"# as pcc and ba has only 3 nan values so we delete these rows\n#same with all above described names\nindexNames = df[ (df['pcc'].isnull())].index\ndf.drop(indexNames , inplace=True)\nindexNames = df[ (df['ba'].isnull())].index\ndf.drop(indexNames , inplace=True)\nindexNames = df[ (df['bu'].isnull())].index\ndf.drop(indexNames , inplace=True)\nindexNames = df[ (df['bgr'].isnull())].index\ndf.drop(indexNames , inplace=True)\nindexNames = df[ (df['sc'].isnull())].index\ndf.drop(indexNames , inplace=True)","94ba2104":"df.isnull().sum()","a0cde1f7":"#sod has mean 137 and 50% 138 and mode 135\n#so we replace 138 with nan\ndf[\"sod\"].fillna(138, inplace=True)\ndf.isnull().sum()","13c4e373":"df","24df8b59":"#max=47, min 4.6, 50% 3.8, mean 3.37\n#we will find mode\n#mode 5(28 times)\n#replace with 5 nan\ndf[\"pot\"].fillna(5, inplace=True)\ndf.isnull().sum()","ff6cdc61":"#replace with mean 12.53\ndf[\"hemo\"].fillna(5, inplace=True)\ndf.isnull().sum()","777d5462":"df[\"pcv\"].fillna(44, inplace=True)#mode 44\ndf['wc'].fillna(6700, inplace=True)#mode 6700\ndf['rc'].fillna(5.2, inplace=True)#mode 5.2","3acebcb2":"df.isnull().sum()","816bd2f7":"df.dropna(inplace=True)","dd54bc11":"df.isnull().sum()","15d1d509":"df\n","ec094133":"df.columns","38aa3197":"df.reset_index(drop=True, inplace=True) ","a06339b3":"df.drop(\"id\",axis=1,inplace=True)","5b006e5a":"df.index.names = ['']","f6485edd":"df[\"pcv\"].unique()\n","fb6b88f3":"df[\"pcv\"].replace('?',44) #most frequent value","64facab0":"df.to_csv(\"missingremoved_kidney1.csv\")","4e3264e7":"\ndf1=pd.read_csv(\"..\/input\/kidney\/missingremoved_kidney.csv\")\n\n#some values are cleaned directly in csv(2 to 3 values)\n\n# Mapping the text to 1\/0 and cleaning the dataset \n","0dcba8fe":"def catconversion(df1):\n    df1[['htn','dm','cad','pe','ane']] = df1[['htn','dm','cad','pe','ane']].replace(to_replace={'yes':1,'no':0})\n    df1[['rbc','pc']] = df1[['rbc','pc']].replace(to_replace={'abnormal':1,'normal':0})\n    df1[['pcc','ba']] = df1[['pcc','ba']].replace(to_replace={'present':1,'notpresent':0})\n    df1[['appet']] = df1[['appet']].replace(to_replace={'good':1,'poor':0,'no':np.nan})\n    df1['pe'] = df1['pe'].replace(to_replace='good',value=0) # Not having pedal edema is good\n    df1['appet'] = df1['appet'].replace(to_replace='no',value=0)\n    df1['cad'] = df1['cad'].replace(to_replace='\\tno',value=0)\n   \ndf1['dm'] = df1['dm'].replace(to_replace={'\\tno':0,'\\tyes':1,' yes':1, '':np.nan})\ndf1['classification'] = df1['classification'].replace(to_replace={'ckd':1.0,'ckd\\t':1.0,'notckd':0.0,'no':0.0})\ndf1.rename(columns={'classification':'class'},inplace=True)\n\ncatconversion(df1)\n\n\n    ","2cabfc6b":"df1.head()","aecb41a3":"df1.describe()","3718b930":"\ndf1[\"age\"].hist()","03d67d96":"#from diagram its clear that there are outliers both at lower and upper point\n#use min max scaler\ndf1[\"age\"]=(df1[\"age\"]-df1[\"age\"].min())\/(df1[\"age\"].max()-df1[\"age\"].min())\ndf1[\"age\"].describe()\n","e5367d01":"plt.plot(df1[\"bp\"])","5581e707":"df1[\"bp\"]=(df1[\"bp\"]-df1[\"bp\"].min())\/(df1[\"bp\"].max()-df1[\"bp\"].min())\ndf1[\"bp\"].describe()","206ac4da":"plt.plot(df1[\"bp\"])","1cf78290":"plt.plot(df1[\"sg\"])","cfa4f4cf":"df1[\"sg\"]=(df1[\"sg\"]-df1[\"sg\"].min())\/(df1[\"sg\"].max()-df1[\"sg\"].min())\ndf1[\"sg\"].describe()","74badb3d":"plt.plot(df1[\"sg\"])","7a3b0b4e":"plt.plot(df1[\"al\"])","23b929ba":"df[\"al\"].hist()","0ca4f9f2":"df1[\"al\"]=(df1[\"al\"]-df1[\"al\"].min())\/(df1[\"al\"].max())\ndf1[\"al\"].describe()","ca7a3ac2":"df1[\"al\"].hist()\n","53df10fd":"pd.set_option('display.max_columns', None)\ndf1.head()","ecc23a54":"df1[\"su\"]=(df1[\"su\"]-df1[\"su\"].min())\/(df1[\"su\"].max())\ndf1[\"su\"].describe()\ndf1.describe()","065d106f":"df1[\"bgr\"].hist()","2c9aee94":"df1[\"bgr\"]=(df1[\"bgr\"]-df1[\"bgr\"].min())\/(df1[\"bgr\"].max()-df1[\"bgr\"].min())\ndf1[\"bgr\"].describe()","0b3a25fe":"df1[\"bu\"]=(df1[\"bu\"]-df1[\"bu\"].min())\/(df1[\"bu\"].max()-df1[\"bu\"].min())\ndf1[\"bu\"].describe()","531abee2":"df1[\"sc\"]=(df1[\"sc\"]-df1[\"sc\"].min())\/(df1[\"sc\"].max()-df1[\"sc\"].min())\ndf1[\"sc\"].describe()","4c6a0bd0":"df1[\"sod\"]=(df1[\"sod\"]-df1[\"sod\"].min())\/(df1[\"sod\"].max()-df1[\"sod\"].min())\ndf1[\"sod\"].describe()","63ace909":"df1[\"pot\"]=(df1[\"pot\"]-df1[\"pot\"].min())\/(df1[\"pot\"].max()-df1[\"pot\"].min())\ndf1[\"hemo\"]=(df1[\"hemo\"]-df1[\"hemo\"].min())\/(df1[\"hemo\"].max()-df1[\"hemo\"].min())\ndf1[\"wc\"]=(df1[\"wc\"]-df1[\"wc\"].min())\/(df1[\"wc\"].max()-df1[\"wc\"].min())\ndf1[\"pcv\"]=(df1[\"pcv\"]-df1[\"pcv\"].min())\/(df1[\"pcv\"].max()-df1[\"pcv\"].min())\ndf1[\"rc\"]=(df1[\"rc\"]-df1[\"rc\"].min())\/(df1[\"rc\"].max()-df1[\"rc\"].min())\n\ndf1.head(5)","ee66c278":"df1.max()","355a63cd":"df1.to_csv(\"wranglingdone_kidney1.csv\")","a258b2ac":"df[\"pcv\"]\n","b9f2df60":"df1[\"sc\"]","0db793bc":"df[\"sc\"].hist()\ndf3=pd.read_csv(\"missingremoved_kidney.csv\")\ndef noncatcanv(dfnew):\n    dfnew[\"pot\"]=(dfnew[\"pot\"]-df3[\"pot\"].min())\/(df3[\"pot\"].max()-df3[\"pot\"].min())\n    dfnew[\"hemo\"]=(dfnew[\"hemo\"]-df3[\"hemo\"].min())\/(df3[\"hemo\"].max()-df3[\"hemo\"].min())\n    dfnew[\"wc\"]=(dfnew[\"wc\"]-df3[\"wc\"].min())\/(df3[\"wc\"].max()-df3[\"wc\"].min())\n    dfnew[\"pcv\"]=(dfnew[\"pcv\"]-df3[\"pcv\"].min())\/(df3[\"pcv\"].max()-df3[\"pcv\"].min())\n    dfnew[\"rc\"]=(dfnew[\"rc\"]-df3[\"rc\"].min())\/(df3[\"rc\"].max()-df3[\"rc\"].min())\n    dfnew[\"sod\"]=(dfnew[\"sod\"]-df3[\"sod\"].min())\/(df3[\"sod\"].max()-df3[\"sod\"].min())\n    dfnew[\"sc\"]=(dfnew[\"sc\"]-df3[\"sc\"].min())\/(df3[\"sc\"].max()-df3[\"sc\"].min())\n    dfnew[\"bu\"]=(dfnew[\"bu\"]-df3[\"bu\"].min())\/(df3[\"bu\"].max()-df3[\"bu\"].min())\n    dfnew[\"al\"]=(dfnew[\"al\"]-df3[\"al\"].min())\/(df3[\"al\"].max())\n    dfnew[\"sg\"]=(dfnew[\"sg\"]-df3[\"sg\"].min())\/(df3[\"sg\"].max()-df3[\"sg\"].min())\n    dfnew[\"bp\"]=(dfnew[\"bp\"]-df3[\"bp\"].min())\/(df3[\"bp\"].max()-df3[\"bp\"].min())\n    dfnew[\"su\"]=(dfnew[\"su\"]-df3[\"su\"].min())\/(df3[\"su\"].max())\n    dfnew[\"age\"]=(dfnew[\"age\"]-df3[\"age\"].min())\/(df3[\"age\"].max()-df3[\"age\"].min())\n    dfnew[\"bgr\"]=(dfnew[\"bgr\"]-df3[\"bgr\"].min())\/(df3[\"bgr\"].max()-df3[\"bgr\"].min())\n","fdc13e6b":"len(df1.columns)\ndf1","d907c20a":"#split data into x and y\nX = df1.iloc[:, 1:-1].values\ny = df1.iloc[:, 25].values\ny=y.astype('int')\n# train and test data set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n#knn\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=2)\nclassifier.fit(X,y)","a5f3b67a":"y_pred = classifier.predict(X_test)\n#classification report\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","ce8900b3":"#abc=[\"0.440476\",\"0.076923\",\"1.0000\",\"0.000000\",0.0\t0\t0\t0\t0\t0.202991\t0.111682\t0.006289\t0.627119\t0.042697\t0.673469\t1.000000\t0.214876\t0.559322\t0\t0\t0\t1\t0\t0\t0]\ny_pred = classifier.predict(X_test)\ny_pred","23f63d95":"abc=[[0.40476190476190477, 0.23076923076923078, 0.7500000000000056,\n        0.0, 0, 0, 0, 0, 0, 3.2, 0.03465982028241335,\n        0.0062893081761006275, 0.7796610169491526, 0.05393258426966293,\n        0.12925170068027209, 0.7777777777777778, 0.1859504132231405,\n        0.5254237288135593, 0, 0, 0, 1, 0, 0]]\ncde=[[0.40476190476190477, 0.23076923076923078, 0.7500000000000056,\n        0.0, 0.0, 0, 0, 0, 0, 0.20726495726495728, 0.03465982028241335,\n        0.0062893081761006275, 0.7796610169491526, 0.05393258426966293,\n        0.12925170068027209, 0.7777777777777778, 0.1859504132231405,\n        0.5254237288135593, 0, 0, 0, 1, 0, 0]]\nprint(classifier.predict(abc))\nprint(classifier.predict(cde))\ndef result(dfnew):\n    catconversion(dfnew)\n    noncatcanv(dfnew)\n    news=[];\n    out=classifier.predict(dfnew)\n    for i in out:\n        if(out[i-1]==1):\n            news.append(\"bad news you have ckd\")\n        else:\n            news.append(\"no ckd\")\n    return news\ndfnew=pd.read_csv(\"missingremoved_kidney.csv\")\n\nresult(dfnew.iloc[67:70,1:-1])\n\n","9d3d68a4":"dfnew","1276a2f0":"error = []\n\n# Calculating error for K values between 1 and 40\nfor i in range(1, 40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))","d1ff6b60":"plt.figure(figsize=(12, 6))\nplt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',\n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')\nplt.xlabel('K Value')\nplt.ylabel('Mean Error')","eeb3eee0":"# hemo","f4df1b85":"# sod column","cbd133ce":"# pc column","fbd39476":"# al column","4d83e5ff":"# Reading csv","b055de6b":"# pcc and ba,bu,bgr and sc column","5384e45b":"Now we are going to apply knn algorithm to predict wether person has ckd or not","437148be":"# pcv ,wc,rc","822f6d7d":"# clean data to csv","228c523b":"# bp column","704739d9":"# error predication","b8e7d573":"# Su columns\n","3c3959fd":"# categorical variables","781faf36":"# rbc column","b5ca1674":"# understanding data and its features","11925944":"# htn dm cad appet pe  ane ","bdca33c5":"# Pot columns","e70b5cc2":"# cleaning data","10caa1a8":"# Age column ","f0d497eb":"# Data wrangling","3a69fa2a":"# Knn algorithm applying","4a8a4d69":"# other variables(scale)","aba9e9ce":"# importing libraries","3cfe534f":"# sg column"}}