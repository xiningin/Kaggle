{"cell_type":{"4ffa455e":"code","a015e544":"code","8db9ff5c":"code","e458ed79":"code","e9e39ed6":"code","ea011a2b":"code","f65a4421":"code","f2026097":"code","54af8d9a":"code","ddab1f46":"code","67f99f39":"code","9414fe44":"code","39471803":"code","b0c80833":"code","e7c8b5e8":"code","129752bd":"code","ab268ff8":"code","167d459e":"code","6093a4ca":"code","a1210c57":"code","7d951f00":"code","a3435fd5":"markdown","8cd99594":"markdown","87069f7d":"markdown","45d525b6":"markdown","230f18ee":"markdown","567e5016":"markdown","a2f628d2":"markdown","49971377":"markdown","ee525616":"markdown","0edc59af":"markdown","687c9828":"markdown"},"source":{"4ffa455e":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models\nfrom torchvision.utils import make_grid\n\nfrom PIL import Image\nfrom IPython.display import display\nimport cv2\nfrom PIL import ImageFile\nimport torchvision.transforms as transforms\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\nimport glob\nimport os\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","a015e544":"def seed_everything(seed=1234):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(42)","8db9ff5c":"#Read the dataset \nPATH = '..\/input\/dog-breed-identification\/'\nlabels = pd.read_csv(PATH+'labels.csv')\nlabelnames = pd.read_csv(PATH + 'sample_submission.csv').keys()[1:]\nprint(\"Train folder has \", len(os.listdir(PATH+'train')),'images which matches with label\\'s', len(labels),'images')","e458ed79":"codes = range(len(labelnames))\nbreed_to_code = dict(zip(labelnames, codes))\ncode_to_breed = dict(zip(codes, labelnames))\nlabels['target'] =  [breed_to_code[x] for x in labels.breed]\nlabels['rank'] = labels.groupby('breed').rank()['id']\nlabels_pivot = labels.pivot('id', 'breed', 'target').reset_index().fillna(0)\n\ntrain = labels_pivot.sample(frac=0.85)\nvalid = labels_pivot[~labels_pivot['id'].isin(train['id'])]\nprint(train.shape, valid.shape)","e9e39ed6":"labels.head(5)","ea011a2b":" # Image transformations\nimg_transform = {\n    'valid':transforms.Compose([\n        transforms.Resize(size = 256),\n        transforms.CenterCrop(size = 224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n    ]),\n    'train':transforms.Compose([\n        transforms.RandomResizedCrop(size = 256),\n        transforms.RandomRotation(degrees = 30),\n        transforms.ColorJitter(),\n        transforms.RandomHorizontalFlip(),\n        transforms.CenterCrop(size=224),  \n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])  \n    ]),\n    'test':transforms.Compose([\n        transforms.Resize(size = 256),\n        transforms.CenterCrop(size = 224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n    ]),\n}","f65a4421":"class DogBreedDataset(torch.utils.data.Dataset):\n    'Characterizes a dataset for PyTorch'\n    def __init__(self, img_dir, label, transform):\n        'Initialization'\n        self.img_dir = img_dir\n        self.transform = transform\n        self.label = label\n\n    def __len__(self):\n        'Denotes the total number of samples'\n        return len(self.label)\n\n    def __getitem__(self, index):\n        if self.label is not None:\n            img_name = '{}.jpg'.format(self.label.iloc[index, 0])\n            fullname = self.img_dir + img_name\n            image = Image.open(fullname)\n            label = self.label.iloc[index, 1:].astype('float').to_numpy()\n            label = np.argmax(label)\n            if self.transform:\n                image = self.transform(image)\n            return [image, label]\n        ","f2026097":"batch_size = 12\nnum_workers = 4\ntrain_img = DogBreedDataset(PATH+'train\/', train, transform = img_transform['train'])\nvalid_img = DogBreedDataset(PATH+'train\/', valid, transform = img_transform['valid'])\n\n\ndataloaders={\n    'train':torch.utils.data.DataLoader(train_img, batch_size, num_workers = num_workers, shuffle=True),\n    'valid':torch.utils.data.DataLoader(valid_img, batch_size, num_workers = num_workers, shuffle=False)\n}\n","54af8d9a":"use_cuda = torch.cuda.is_available()\n","ddab1f46":"def imshow(axis, inp):\n    \"\"\"Denormalize and show\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    axis.imshow(inp)","67f99f39":"from mpl_toolkits.axes_grid1 import ImageGrid\nimg, label = next(iter(dataloaders['train']))\nprint(img.size(), label.size())\nfig = plt.figure(1, figsize=(16, 12))\ngrid = ImageGrid(fig, 111, nrows_ncols=(3, 4), axes_pad=0.05)    \nfor i in range(img.size()[0]):\n    ax = grid[i]\n    imshow(ax, img[i])","9414fe44":"import torch.nn as nn\nimport torch.nn.functional as F\n\n# define the CNN architecture\nclass Net(nn.Module):\n    ### TODO: choose an architecture, and complete the class\n    def __init__(self):\n        super(Net, self).__init__()\n        ## Define layers of a CNN\n    \n        # Convolution layers\n        self.conv1 = nn.Conv2d(3, 32, 3, padding = 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, padding = 1)\n        self.conv3 = nn.Conv2d(64, 128, 3, padding = 1)\n        \n        # Max pooling layer (divides image size by 2)\n        self.pool = nn.MaxPool2d(2, 2)\n        \n        # Fully connected layers\n        self.fc1 = nn.Linear(128 * 28 * 28, 500)\n        self.fc2 = nn.Linear(500, 120)\n        \n        # Dropout\n        self.dropout = nn.Dropout(0.3)\n        \n        \n    def forward(self, x):\n        ## Define forward behavior\n        \n        # Sequence of convolutional and max pooling layers\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = self.pool(F.relu(self.conv3(x)))\n        # Flatten image input\n        x = x.view(-1, 128 * 28 * 28)\n        # Dropout layer\n        x = self.dropout(x)\n        # 1st hidden layer, with relu activation function\n        x = F.relu(self.fc1(x))\n        # Dropout layer\n        x = self.dropout(x)\n        # 2nd hidden layer\n        x = self.fc2(x)\n        return x\n\n# instantiate the CNN\nmodel_scratch = Net()\n\n# move tensors to GPU if CUDA is available\nif use_cuda:\n    model_scratch.cuda()","39471803":"!pip install torchsummary","b0c80833":"#let's see the model\nfrom torchsummary import summary\nsummary(model_scratch, input_size=(3, 224, 224))","e7c8b5e8":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model_scratch.parameters(), lr=0.01, momentum = 0.9)","129752bd":"def train(n_epochs, loaders, model, optimizer, criterion, use_cuda, save_path):\n    \"\"\"returns trained model\"\"\"\n    # initialize tracker for minimum validation loss\n    valid_loss_min = np.Inf \n    \n    for epoch in range(1, n_epochs+1):\n        # initialize variables to monitor training and validation loss\n        train_loss = 0.0\n        valid_loss = 0.0\n        \n        ###################\n        # train the model #\n        ###################\n        model.train()\n        for batch_idx, (data, target) in enumerate(loaders['train']):\n            # move to GPU\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            ## find the loss and update the model parameters accordingly\n            ## record the average training loss, using something like\n            \n            optimizer.zero_grad()\n            output = model(data)\n            loss = criterion(output, target)\n            loss.backward()\n            optimizer.step()\n            train_loss = train_loss + ((1 \/ (batch_idx + 1)) * (loss.data - train_loss))\n            \n            if batch_idx % 100 == 0:\n                print('Epoch: %d \\tBatch: %d \\tTraining Loss: %.6f' %(epoch, batch_idx + 1, train_loss))\n        ######################    \n        # validate the model #\n        ######################\n        model.eval()\n        for batch_idx, (data, target) in enumerate(loaders['valid']):\n            # move to GPU\n            if use_cuda:\n                data, target = data.cuda(), target.cuda()\n            ## update the average validation loss\n            output = model(data)\n            loss = criterion(output, target)\n            valid_loss = valid_loss + ((1 \/ (batch_idx + 1)) * (loss.data - valid_loss))\n            \n        # print training\/validation statistics \n        print('Epoch: {} \\tTraining Loss: {:.4f} \\tValidation Loss: {:.4f}'.format(\n            epoch, \n            train_loss,\n            valid_loss\n            ))\n        \n        ## TODO: save the model if validation loss has decreased\n        if valid_loss < valid_loss_min:\n            torch.save(model.state_dict(), save_path)\n            print('BOOM! Validation loss decreased ({:.4f} --> {:.4f}).  Saving model...'.format(valid_loss_min,valid_loss))\n            valid_loss_min = valid_loss    \n\n    # return trained model\n    return model\n# train the model\nmodel_scratch = train(10, dataloaders, model_scratch, optimizer, \n                      criterion, use_cuda, 'model_scratch.pt')\n\n# load the model that got the best validation accuracy\nmodel_scratch.load_state_dict(torch.load('model_scratch.pt'))","ab268ff8":"resnet50 = models.resnet50(pretrained=True)\n","167d459e":"##  Specify model architecture \nmodel_transfer = models.resnet50(pretrained=True)\n\n# Freeze training for all \"features\" layers\nfor param in model_transfer.parameters():\n    param.requires_grad = False\n    \n# replace the last fully connected layer with a Linnear layer 133 output\nin_features = model_transfer.fc.in_features\nmodel_transfer.fc = nn.Linear(in_features, 120)\n\nif use_cuda:\n    model_transfer = model_transfer.cuda()","6093a4ca":"criterion_transfer = nn.CrossEntropyLoss()\nmodel_transfer_grad_paramaters = filter(lambda p: p.requires_grad, model_transfer.parameters())\noptimizer_transfer = torch.optim.SGD(model_transfer_grad_paramaters, lr=0.01)","a1210c57":"n_epochs = 10\n# train the model\nmodel_transfer =  train(n_epochs, dataloaders, model_transfer, optimizer_transfer, criterion_transfer, use_cuda, 'model_transfer.pt')\n","7d951f00":"submission = pd.read_csv(PATH+'\/sample_submission.csv')\noutput = pd.DataFrame(index=submission.index, columns=submission.keys() )\noutput['id'] = submission['id']\nsubmission['target'] =  [0] * len(submission)\n\n#will do this part later :3 ","a3435fd5":"Using the code cell below to write three separate [data loaders](http:\/\/pytorch.org\/docs\/stable\/data.html#torch.utils.data.DataLoader) for the training, validation, and test datasets of dog images (located at `dog_images\/train`, `dog_images\/valid`, and `dog_images\/test`, respectively).  You may find [this documentation on custom datasets](https:\/\/pytorch.org\/vision\/stable\/datasets.html) to be a useful resource.  If you are interested in augmenting your training and\/or validation data, check out the wide variety of [transforms](https:\/\/pytorch.org\/vision\/stable\/transforms.html)!","8cd99594":"# SubmissionAdam","87069f7d":"the next code cell to specify a [loss function](http:\/\/pytorch.org\/docs\/stable\/nn.html#loss-functions) and [optimizer](http:\/\/pytorch.org\/docs\/stable\/optim.html).  ","45d525b6":"Have you wondered about why they use 42? Do you want to know about the reason behind 42? Look [Here ](https:\/\/en.wikipedia.org\/wiki\/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe_and_Everything_.2842.29):p\n\n","230f18ee":"# CNN Model from scratch","567e5016":"Let's break the notebook into separate steps. Feel free to navigate the notebook and comment if you have any suggestions.\n\nStep 0: Import Datasets \\\nStep 1: Detect Dogs\\\nStep 2: Create a CNN to Classify Dog Breeds (from Scratch)\\\nStep 3: Create a CNN to Classify Dog Breeds (using Transfer Learning)\\\nStep 4: Test","a2f628d2":"We will be using this function mostly everywhere to run our experiments deterministically. Random functions of Numpy and Pandas will behave deterministically after this. To learn more about Deterministic Neural Networks please check out [this notebook](https:\/\/www.kaggle.com\/bminixhofer\/deterministic-neural-networks-using-pytorch)","49971377":"I resized the pictures to 256256 and then cropped the image into 224224 randomly to avoid squashed images and normalized it using Imagenet's mean and standard deviation after converting to tensor. for train, test and valid set.\n\nFor training images, I used data augmentation which includes random rotation of 30 degrees and horizontal flip.","ee525616":"I used three convolutional layers with relu activations which are followed by maxpool layers. Also, used two fully connected layers. Between fully connected layers, dropout technique with probability = 0.25 is used to avoid the overfitting.","0edc59af":"as you can see it has a pretty big loss value. Training a model from scratch and getting good loss can be hard with epochs like 10. So let's move to transfer learning models which are pretrained. ","687c9828":"# Initializations\nAt first we need to import the libraries. It is considered as standard imports.\n"}}