{"cell_type":{"c4d7bda1":"code","892d8525":"code","c001ba63":"code","8ea599f0":"code","50aac046":"code","abfd9b6f":"code","1df8dd14":"code","f4d520e1":"code","b120eaa7":"code","62477141":"code","ef63b02f":"code","9943255f":"code","e0f75f92":"markdown","736ee3f8":"markdown","33863977":"markdown","9611f290":"markdown","c5e25b9d":"markdown","f9b6d12b":"markdown","35cd665b":"markdown","ff75bde7":"markdown","2cd5e37e":"markdown","c9cd3759":"markdown","6d613078":"markdown","b26ddfb9":"markdown","009de352":"markdown","822c04dd":"markdown","c21bfb84":"markdown"},"source":{"c4d7bda1":"\nimport pandas as pd\nimport geopandas as gpd\nimport math","892d8525":"import folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","c001ba63":"# Create a map\nm_1 = folium.Map(location=[42.32,-71.0589], tiles='openstreetmap', zoom_start=10)\n\n# Display the map\nm_1","8ea599f0":"\n# Load the data\ncrimes = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/crimes-in-boston\/crimes-in-boston\/crime.csv\", encoding='latin-1')\n\n# Drop rows with missing locations\ncrimes.dropna(subset=['Lat', 'Long', 'DISTRICT'], inplace=True)\n\n# Focus on major crimes in 2018\ncrimes = crimes[crimes.OFFENSE_CODE_GROUP.isin([\n    'Larceny', 'Auto Theft', 'Robbery', 'Larceny From Motor Vehicle', 'Residential Burglary',\n    'Simple Assault', 'Harassment', 'Ballistics', 'Aggravated Assault', 'Other Burglary', \n    'Arson', 'Commercial Burglary', 'HOME INVASION', 'Homicide', 'Criminal Harassment', \n    'Manslaughter'])]\ncrimes = crimes[crimes.YEAR>=2018]\n\n# Print the first five rows of the table\ncrimes.head()","50aac046":"daytime_robberies = crimes[((crimes.OFFENSE_CODE_GROUP == 'Robbery') & \\\n                            (crimes.HOUR.isin(range(9,18))))]","abfd9b6f":"# Create a map\nm_2 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=13)\n\n# Add points to the map\nfor idx, row in daytime_robberies.iterrows():\n    Marker([row['Lat'], row['Long']]).add_to(m_2)\n\n# Display the map\nm_2","1df8dd14":"# Create the map\nm_3 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=13)\n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in daytime_robberies.iterrows():\n    if not math.isnan(row['Long']) and not math.isnan(row['Lat']):\n        mc.add_child(Marker([row['Lat'], row['Long']]))\nm_3.add_child(mc)\n\n# Display the map\nm_3","f4d520e1":"# Create a base map\nm_4 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=13)\n\ndef color_producer(val):\n    if val <= 12:\n        return 'forestgreen'\n    else:\n        return 'darkred'\n\n# Add a bubble map to the base map\nfor i in range(0,len(daytime_robberies)):\n    Circle(\n        location=[daytime_robberies.iloc[i]['Lat'], daytime_robberies.iloc[i]['Long']],\n        radius=20,\n        color=color_producer(daytime_robberies.iloc[i]['HOUR'])).add_to(m_4)\n\n# Display the map\nm_4","b120eaa7":"# Create a base map\nm_5 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=12)\n\n# Add a heatmap to the base map\nHeatMap(data=crimes[['Lat', 'Long']], radius=10).add_to(m_5)\n\n# Display the map\nm_5","62477141":"# GeoDataFrame with geographical boundaries of Boston police districts\ndistricts_full = gpd.read_file('..\/input\/geospatial-learn-course-data\/Police_Districts\/Police_Districts\/Police_Districts.shp')\ndistricts = districts_full[[\"DISTRICT\", \"geometry\"]].set_index(\"DISTRICT\")\ndistricts.head()","ef63b02f":"# Number of crimes in each police district\nplot_dict = crimes.DISTRICT.value_counts()\nplot_dict.head()","9943255f":"# Create a base map\nm_6 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=12)\n\n# Add a choropleth map to the base map\nChoropleth(geo_data=districts.__geo_interface__, \n           data=plot_dict, \n           key_on=\"feature.id\", \n           fill_color='YlGnBu', \n           legend_name='Major criminal incidents (Jan-Aug 2018)'\n          ).add_to(m_6)\n\n# Display the map\nm_6","e0f75f92":"# Bubble maps\n\nA **bubble map** uses circles instead of markers.  By varying the size and color of each circle, we can also show the relationship between location and two other variables.\n\nWe create a bubble map by using `folium.Circle()` to iteratively add circles.  In the code cell below, robberies that occurred in hours 9-12 are plotted in green, whereas robberies from hours 13-17 are plotted in red.","736ee3f8":"# Choropleth maps\n\nTo understand how crime varies by police district, we'll create a choropleth map.\n\nAs a first step, we create a GeoDataFrame where each district is assigned a different row, and the \"geometry\" column contains the geographical boundaries.","33863977":"Note that `folium.Circle()` takes several arguments:\n- `location` is a list containing the center of the circle, in latitude and longitude.\n- `radius` sets the radius of the circle.  \n - Note that in a traditional bubble map, the radius of each circle is allowed to vary.  We can implement this by defining a function similar to the `color_producer()` function that is used to vary the color of each circle.\n- `color` sets the color of each circle.\n - The `color_producer()` function is used to visualize the effect of the hour on robbery location.","9611f290":"# Heatmaps\n\nTo create a heatmap, we use [`folium.plugins.HeatMap()`](https:\/\/python-visualization.github.io\/folium\/plugins.html#folium.plugins.HeatMap).  This shows the density of crime in different areas of the city, where red areas have relatively more criminal incidents.\n\nAs we'd expect for a big city, most of the crime happens near the center.","c5e25b9d":"## folium.Marker\n\nWe add markers to the map with `folium.Marker()`.  Each marker below corresponds to a different robbery.","f9b6d12b":"# Plotting points\n\nTo reduce the amount of data we need to fit on the map, we'll (temporarily) confine our attention to daytime robberies.","35cd665b":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https:\/\/www.kaggle.com\/learn\/geospatial-analysis\/discussion) to chat with other learners.*","ff75bde7":"# Introduction\n\nIn this tutorial, you'll learn how to create interactive maps with the **folium** package.  Along the way, you'll apply your new skills to visualize Boston crime data.","2cd5e37e":"## folium.plugins.MarkerCluster\n\nIf we have a lot of markers to add, `folium.plugins.MarkerCluster()` can help to declutter the map.  Each marker is added to a `MarkerCluster` object.","c9cd3759":"As you can see in the code cell above, `folium.plugins.HeatMap()` takes a couple of arguments:\n- `data` is a DataFrame containing the locations that we'd like to plot.  \n- `radius` controls the smoothness of the heatmap.  Higher values make the heatmap look smoother (i.e., with fewer gaps).","6d613078":"Note that `folium.Choropleth()` takes several arguments:\n- `geo_data` is a GeoJSON FeatureCollection containing the boundaries of each geographical area.\n - In the code above, we convert the `districts` GeoDataFrame to a [GeoJSON FeatureCollection](https:\/\/en.wikipedia.org\/wiki\/GeoJSON) with the `__geo_interface__` attribute.\n- `data` is a Pandas Series containing the values that will be used to color-code each geographical area.  \n- `key_on` will always be set to `feature.id`.  \n - This refers to the fact that the GeoDataFrame used for `geo_data` and the Pandas Series provided in `data` have the same index.  To understand the details, we'd have to look more closely at the structure of a GeoJSON Feature Collection (where the value corresponding to the \"features\" key is a list, wherein each entry is a dictionary containing an \"id\" key).\n- `fill_color` sets the color scale. \n- `legend_name` labels the legend in the top right corner of the map.\n\n# Your turn\n\n**[Design your own maps](https:\/\/www.kaggle.com\/kernels\/fork\/5832145)** to determine which areas of Japan need extra earthquake reinforcement.","b26ddfb9":"We also create a Pandas Series called `plot_dict` that shows the number of crimes in each district.","009de352":"It's very important that `plot_dict` has the same index as `districts` - this is how the code knows how to match the geographical boundaries with appropriate colors.\n\nUsing the `folium.Choropleth()` class, we can create a choropleth map.  If the map below does not render for you, try viewing the page in a [different web browser](https:\/\/github.com\/python-visualization\/folium\/issues\/812).","822c04dd":"# Your first interactive map\n\nWe begin by creating a relatively simple map with `folium.Map()`.","c21bfb84":"Several arguments customize the appearance of the map:\n- `location` sets the initial center of the map. We use the latitude (42.32&deg; N) and longitude (-71.0589&deg; E) of the city of Boston.  \n- `tiles` changes the styling of the map; in this case, we choose the [OpenStreetMap](https:\/\/www.openstreetmap.org\/#map=10\/42.32\/-71.0589) style.  If you're curious, you can find the other options listed [here](https:\/\/github.com\/python-visualization\/folium\/tree\/master\/folium\/templates\/tiles).\n- `zoom_start` sets the initial level of zoom of the map, where higher values zoom in closer to the map.\n\nTake the time now to explore by zooming in and out, or by dragging the map in different directions.\n\n# The data\n\nNow, we'll add some crime data to the map! \n\nWe won't focus on the data loading step. Instead, you can imagine you are at a point where you already have the data in a pandas DataFrame `crimes`.  The first five rows of the data are shown below."}}