{"cell_type":{"7b92a065":"code","08c0048c":"code","f3bc2cfb":"code","785cddfd":"code","a4384ba8":"code","b5221c71":"code","2f9c3640":"code","ebfbd2af":"code","b48ff356":"code","570a5f1f":"code","6bfb1888":"code","c2523283":"code","b42e3e69":"code","f236024a":"code","bb95f015":"code","f8732d65":"code","b45c78f2":"code","2121c47d":"code","3f71e650":"code","2d0af36a":"code","54859ebc":"code","28594214":"code","53bc1307":"code","edba9da3":"code","81682b0b":"code","f0ed02af":"code","194c67de":"code","06ae21af":"code","874c74f5":"code","9bb74de9":"code","88f357a3":"code","912b5657":"code","ac3d1657":"code","01883f21":"code","33a169d0":"code","d2790275":"code","6a95bc8d":"code","e6781888":"code","3c219231":"code","ceb8d353":"code","c47616dc":"code","0ec5602f":"code","dc8a53c6":"code","589e322e":"code","b4d171e1":"code","99f64027":"code","480fa0dd":"code","edda3f71":"code","f13a4db0":"code","a279b11d":"code","0f33c994":"code","6c2f6c0e":"code","74942763":"code","c0be5fe9":"code","f60dd305":"code","e0d31add":"markdown","4507c292":"markdown","dd8d9d13":"markdown","534bc8e5":"markdown","89906f17":"markdown","6a9d3596":"markdown","8d109619":"markdown","e4f3d80a":"markdown","ecf666c3":"markdown","98ac2440":"markdown","e5cd9d5a":"markdown","71dcf1f9":"markdown","3253ed1e":"markdown","89fb130b":"markdown","3cba9a18":"markdown","3f172c25":"markdown","b87468a7":"markdown","da4f8356":"markdown","7e4516c6":"markdown","7b935ef8":"markdown","88af408f":"markdown","ed7c43db":"markdown","cff01a4d":"markdown","71a54521":"markdown","78a90650":"markdown","6608ee7a":"markdown","6d9dafcd":"markdown","783a87b6":"markdown","f0fb957f":"markdown","a5a54834":"markdown","c985efd3":"markdown","ea70341a":"markdown"},"source":{"7b92a065":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf_trn = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv\")\ndf_tst = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08c0048c":"df_trn","f3bc2cfb":"df_tst","785cddfd":"print (df_trn[\"product\"].unique())\nprint (df_trn[\"country\"].unique())","a4384ba8":"df_trn[\"country\"].unique()","b5221c71":"len(df_trn)","2f9c3640":"store_list=df_trn[\"store\"].unique()\nproduct_list=df_trn[\"product\"].unique()\ncountry_list=df_trn[\"country\"].unique()\n","ebfbd2af":"df_trn.groupby(\"country\").num_sold.sum()\n","b48ff356":"def getGroupedDataFrames(df, columnName):\n    grouped_df=list(df.groupby(columnName))\n    df_dictionary={}\n    for i in range(len(grouped_df)):\n        df_dictionary[grouped_df[i][0]] = grouped_df[i][1]\n    return df_dictionary","570a5f1f":"df_grp_store = getGroupedDataFrames(df_trn,\"store\")\ndf_country={}\nfor istore in store_list:\n    df_country[istore] = getGroupedDataFrames(df_grp_store[istore],\"country\")\n\n","6bfb1888":"for istore in store_list:\n    for icountry in country_list:\n        print (istore, icountry)\n        print (df_country[istore][icountry].groupby(\"product\").num_sold.sum())\n        print (\"------\")","c2523283":"import seaborn as sns\nsns.set(rc = {'figure.figsize':(20,8)})","b42e3e69":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleMart\"][\"Sweden\"],\n#            ci=None)","f236024a":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleMart\"][\"Finland\"],ci=None)","bb95f015":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleMart\"][\"Norway\"], ci=None)","f8732d65":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleRama\"][\"Sweden\"],ci=None)","b45c78f2":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleRama\"][\"Finland\"],ci=None)","2121c47d":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_country[\"KaggleRama\"][\"Norway\"],ci=None)","3f71e650":"#sns.lineplot(x=\"date\", y=\"num_sold\",hue=\"product\",\n#             data=df_grp_store[\"KaggleRama\"],ci=None)\n","2d0af36a":"df=df_country[\"KaggleRama\"][\"Sweden\"]\ndf[\"year\"] = pd.to_datetime(df.date).dt.year\ndf[\"day\"] = pd.to_datetime(df.date).dt.day_of_year\ndf[\"day\"]\n\n#df[\"year\"]\n","54859ebc":"sns.lineplot(data=df, \n             x='day', \n             y='num_sold', \n             hue='year', \n             style=\"product\",\n             legend='full',ci=None)\n","28594214":"## get the kaggle Hat dataframe instead of all 3 product. \ndf_kaggle_hat = df[(df[\"product\"]==\"Kaggle Hat\")]\ndf_kaggle_hat","53bc1307":"df_kaggle_hat[\"avg5\"] = df_kaggle_hat.num_sold.rolling(5).mean()\ndf_kaggle_hat[\"avg7\"] = df_kaggle_hat.num_sold.rolling(7).mean()\ndf_kaggle_hat[\"avg8\"] = df_kaggle_hat.num_sold.rolling(8).mean()\ndf_kaggle_hat","edba9da3":"sns.lineplot(data=df_kaggle_hat, \n             x='day', \n             y='avg7', \n             hue='year', \n             legend='full',ci=None)\n\n","81682b0b":"sns.lineplot(data=df_kaggle_hat, \n             x='day', \n             y='avg5', \n             hue='year', \n             legend='full',ci=None)\n\n","f0ed02af":"sns.lineplot(data=df_kaggle_hat, \n             x='day', \n             y='avg8', \n             hue='year', \n             legend='full',ci=None)\n\n","194c67de":"country_map={\"Finland\":0,\n             \"Norway\":1,\n             \"Sweden\":2}\n\nproduct_map={\"Kaggle Mug\":0,\n             \"Kaggle Hat\":1,\n             \"Kaggle Sticker\":2}\nstore_map={\"KaggleRama\":0,\n           \"KaggleMart\":1}\n\ndef CategorialToQuantitative(df):\n    df.replace(country_map,inplace=True)\n    df.replace(store_map,inplace=True)\n    df.replace(product_map,inplace=True)\n    return df\n","06ae21af":"df_trn = CategorialToQuantitative(df_trn)\ndf_tst = CategorialToQuantitative(df_tst)","874c74f5":"def gettimeFeatures(df):\n    df[\"day_of_year\"]=pd.to_datetime(df.date).dt.day_of_year\n    df[\"day_of_month\"] = pd.to_datetime(df.date).dt.day\n    df[\"week\"]=pd.to_datetime(df.date).dt.isocalendar().week\n    df[\"quarter\"]=pd.to_datetime(df.date).dt.quarter\n    df[\"month\"]=pd.to_datetime(df.date).dt.month\n    df[\"year\"]=pd.to_datetime(df.date).dt.year\n    df[\"weekd\"]=pd.to_datetime(df.date).dt.weekday\n    df[\"weekend\"]=(pd.to_datetime(df.date).dt.weekday>4).astype(int) ## weekday range from 0 to 6. \n    \n    ## Easter \n    #2015: 5 April: 95\n    #2016: 27 March: 88\n    #2017: 16 April: 106\n    #2018: 1 April: 91\n    #2019: 21 April: 111 \n    ## I still look for an easier way to do this, instead of hardcoding it \n    df.loc[df.month>-1,\"easter\"]=0 ## setting default \n    df.loc[ ( ( (df.year==2018) & ( abs(df.day_of_year-91)<10) ) | \n              ( (df.year==2017) & ( abs(df.day_of_year-106)<10)) | \n              ( (df.year==2016) & ( abs(df.day_of_year-88)<10) ) |\n              ( (df.year==2018) & ( abs(df.day_of_year-95)<10) ) |\n              ( (df.year==2019) & ( abs(df.day_of_year-111)<10) )\n            ),\"easter\"]=1\n\n    ## Year End \n    df.loc[df.month>0,\"year_end\"]=0 ## setting default\n    df.loc[ ( (  (df.month==12) & (df.day_of_month>22) ) |\n                 (  (df.month==1) &  (df.day_of_month <8) ) ),\"year_end\"]=1\n\n    ## Summer \n    df.loc[df.day_of_year>-1,\"summer\"]=0 ## ## setting default\n    df.loc[ ( (df.day_of_year>125) & (df.day_of_year<190) ),\"summer\"] =1\n\n\n\n    ## we don't need date anymore \n    df.drop([\"date\"],axis=1,inplace=True)\n    return df ","9bb74de9":"df_trn = gettimeFeatures(df_trn)\ndf_tst = gettimeFeatures(df_tst)\ndf_tst","88f357a3":"def SMAPE(y_true, y_pred):\n    diff = np.abs(y_true - y_pred) \/ (y_true + np.abs(y_pred)) * 200\n    return diff.mean()\n","912b5657":"df_grp_store = getGroupedDataFrames(df_trn,\"store\")\ndf_country={}\nfor istore in df_trn.store.unique():\n    df_country[istore] = getGroupedDataFrames(df_grp_store[istore],\"country\")\n\ndf_mean = pd.DataFrame()\ndf_mean_tmp = pd.DataFrame()\nfor istore in range (0,2):\n    for icountry in range (0,3):\n        df_mean_tmp = pd.DataFrame((df_country[istore][icountry].groupby(\"product\").mean()[\"num_sold\"]))\n        df_mean_tmp[\"country\"]=icountry\n        df_mean_tmp[\"store\"]=istore\n        #print (df_mean_tmp)\n        df_mean = pd.concat([df_mean,df_mean_tmp])\n\ndf_mean\ndf_mean.reset_index().rename({'product':'product'}, axis = 'columns')\ndf_out = df_tst.merge(df_mean,on=['product','country','store'])\ndf_out.drop([\"country\",\"store\",\"product\", \"day_of_year\", \"week\", \"quarter\", \"month\", \"year\", \"weekd\", \"weekend\"],axis=1,inplace=True)\n#df_out.to_csv(\"submission.csv\",index=False)\n#df_out.shape\n\n","ac3d1657":"df_tst.columns","01883f21":"from sklearn.ensemble import RandomForestRegressor\nclf = RandomForestRegressor()\nvars=['country', 'store', 'product', 'day_of_year', 'week',\n       'quarter', 'month', 'year', 'weekd', 'weekend', 'day_of_month',\n       'easter', 'year_end', 'summer']\nX = df_trn[vars]\nY = df_trn['num_sold']\nclf.fit(X,Y)\nX_tst = df_tst[vars]\nY_tst=clf.predict(X_tst)\n","33a169d0":"df_tst[\"num_sold\"] = Y_tst\ndf_out = df_tst.drop([\"country\",\"store\",\"product\", \"day_of_year\", \"week\", \"quarter\", \"month\", \"year\", \"weekd\", \"weekend\",'day_of_month', 'easter', 'year_end', 'summer'],axis=1)","d2790275":"df_out.to_csv(\"submission.csv\",index=False)\ndf_out.shape\n\n","6a95bc8d":"df_train = df_trn[df_trn.year<2018]\ndf_test  = df_trn[df_trn.year==2018]\n\nX_Train, Y_Train = df_train[vars], df_train[\"num_sold\"]\nX_Test, Y_True          = df_test[vars], df_test[\"num_sold\"]\n\nclf.fit(X_Train,Y_Train)\nY_Test=clf.predict(X_Test)\n\n","e6781888":"SMAPE(Y_True,Y_Test)","3c219231":"import keras\nimport matplotlib.pyplot as plt\nfrom keras.layers import Dense,Dropout,LSTM\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler \n\n","ceb8d353":"X_Train = X_Train.astype(float)\nX_Test = X_Test.astype(float)\nY_Train = Y_Train.astype(float)\nY_True = Y_True.astype(float)\n\n#scaler  = StandardScaler()\n#scaler = scaler.fit(X_Train)\n#X_Train_scaled = scaler.transform(X_Train)\n#X_Train_scaled.shape, type(X_Train_scaled)\n\n#scaler1  = StandardScaler()\n#scaler1 = scaler1.fit(X_Test)\n#X_Test_scaled = scaler1.transform(X_Test)\n#X_Test_scaled.shape\n\n","c47616dc":"X_Train_scaled = np.array(X_Train)\nX_Test_scaled = np.array(X_Test)\n\n","0ec5602f":"'''\nX_Train_LSTM = []\nY_Train_LSTM = [] \nX_Test_LSTM = []\nY_True_LSTM = [] \n\n\nn_future = 1 \nn_past = 365\nfor i in range (n_past, len(X_Train_scaled)-n_future+1):\n    X_Train_LSTM.append(X_Train_scaled[i-n_past:i, 0:X_Train_scaled.shape[1] ])\n    Y_Train_LSTM.append(X_Train_scaled[i+n_future-1:i+n_future,0])\n\nfor i in range (n_past, len(X_Test_scaled)-n_future+1):\n    X_Test_LSTM.append(X_Test_scaled[i-n_past:i, 0:X_Test_scaled.shape[1] ])\n    Y_True_LSTM.append(X_Test_scaled[i+n_future-1:i+n_future,0])\n\n\nX_Train_LSTM, Y_Train_LSTM = np.array(X_Train_LSTM), np.array(Y_Train_LSTM)\nX_Test_LSTM, Y_True_LSTM = np.array(X_Test_LSTM), np.array(Y_True_LSTM)\n'''","dc8a53c6":"X_Train_LSTM = X_Train_scaled.reshape(X_Train_scaled.shape[0],X_Train_scaled.shape[1],1)\nY_Train_LSTM = np.array(Y_Train)\nX_Test_LSTM = X_Test_scaled.reshape(X_Test_scaled.shape[0],X_Test_scaled.shape[1],1)\n#Y_True_LSTM = \n#X_Test_LSTM.shape\nY_Train_LSTM.shape, X_Train_LSTM.shape, Y_Train_LSTM","589e322e":"model = Sequential()\nmodel.add(LSTM(units = 50 , return_sequences=True , input_shape = (X_Train_LSTM.shape[1], 1 )))\n\nmodel.add(Dropout(0.2))\n# Second LSTM layer\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n# Third LSTM layer\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n# Fourth LSTM layer\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n# The output layer\nmodel.add(Dense(units=1))\nmodel.compile(optimizer='adam',loss='mean_squared_error')\n","b4d171e1":"model.summary()","99f64027":"history = model.fit(X_Train_LSTM,Y_Train_LSTM,batch_size=32 , epochs=5)","480fa0dd":"forecast = model.predict(X_Test_LSTM)\nforecast = pd.Series(forecast.reshape(forecast.shape[0]))","edda3f71":"y_true = np.array(Y_True)\ny_true.reshape(y_true.shape[0])\nSMAPE(y_true,forecast)\n\n\n","f13a4db0":"from pandas.plotting import autocorrelation_plot, lag_plot\ndf_sel = df_train[ ( (df_train.country==0) & (df_train.store==0) & (df_train[\"product\"]==0) )]\nseries  = df_sel.num_sold\nlag_plot(series, lag=1)\n","a279b11d":"autocorrelation_plot(series)","0f33c994":"'''\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\nfig, axes = plt.subplots(3, 2, sharex=True)\n\naxes[0, 0].plot(series); axes[0, 0].set_title('Original Series')\nplot_acf(series, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(series.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(series.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(series.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(series.diff().diff().dropna(), ax=axes[2, 1])\n'''\n","6c2f6c0e":"from statsmodels.tsa.arima.model import ARIMA\nfrom matplotlib import pyplot\nmodel = ARIMA(series, order=(5,1,1))\nmodel_fit = model.fit()\nresiduals = pd.DataFrame(model_fit.resid)\nresiduals.plot()\npyplot.show()\n# density plot of residuals\nresiduals.plot(kind='kde')\npyplot.show()\n","74942763":"series_test = df_test[ ( (df_test.country==0) & (df_test.store==0) & (df_test[\"product\"]==0) )].num_sold\nseries_out = model_fit.forecast(365, alpha=0.05)  # 95% conf","c0be5fe9":"series_out = series_out.reset_index().drop(\"index\",axis=1)\nseries_test = series_test.reset_index().drop(\"index\",axis=1)","f60dd305":"SMAPE(series_test.num_sold,series_out.predicted_mean","e0d31add":"## Categorical data \nThere are a few features which are given in categorical form, e.g. country, product, store. It will make the like easy if I use some encoding for these variables and make them quantitative variables. ","4507c292":"* This function group the dataframe based on the columns passes as an argument and return a dictionary. The dictionary contain the value of column as \"key\" and the dataframe as the dictionary value. ","dd8d9d13":"# Features Extraction<a class=\"anchor\" id=\"FE\"><\/a>\n\n","534bc8e5":"## Features in the seasonal plot: \nAs can be seen in timing data plot, for 4 years, that there is some seasonality present in the data. We can clearly see those features from seasonal plot. Note that the distribution here is only for KaggleRama::Sweden\n1. There are TWO major periods (and one minor\/long range) when sales of the product have increased, or should say exploded. \n - First is around new year, \n - Second, somewhere in the April, that is the time close to Easter, celebrated in the EU. \n - Third, A wide increase in sales from May-June, this is likely due the begining of the summer and summer vacation. \n2. In addition to the festival sales peak there is one more feature to be seen in sales of each product.\n - There features are visible by small speaks occuring after regular interval, from first look this seems to be weekly. The number of peaks are roughly 50-55, so they seems to correspond to weekend. And why not, people do enjoy shopping with family over the weekend. \n \n \n When we want to predict the sales of these product, we need to keep in mind following information: \n 1. End of year \/ New year sales explosion \n 2. Easter blast \n 3. Summer leisure \n 4. Weekend fun with family and friends \n 5. Three products have completely different sales in each country, and rise in sales is also different. This implies we must treat them as independent when making prediction. And same is true for each country. \n  - One all the prediction for each product and country is made, we must sum them to predict the total number, instead of predicting everything in one i.e. total sales. \n  \n ","89906f17":"Let's try to understand the dataset provided for this competetion. The test dataset here has ~26K entries and 6 features. \n* date: give the date on which a given product is sold. \n* country: in which country this product was sold. \n* store: which store sold a given product. \n* product: what exactly is the product. \n* num_sold: how many pieces of a given product are sold on a given day, in a given country by a given store. ","6a9d3596":"## Rolling Average \nLet's check the rolling average using dataframe.rolling function. I am trying rolling average with various window, say 5,7 and 8 days to see the feature in the time series data. Let's start with the Kaggle hat data.\n\n* The 5 day and 8 day rolling average does not show any smoothening properties, \n* However 7 day rolling average does indicate that the distribution is now much more smooth and the weekly fluctuations are now gone. \n* Similar situation for remaining product and countries and stores. \n\nLet's see how can we use all these information. ","8d109619":"* It can be seen clearly that ARIMA is not able to pick the seasonality of data, therefore, It will make sense to use SARIMA instead of ARIMA. In addition to just the series, I would like to use other information available. So the natural choice is SARIMAX. Let's take a look. \n","e4f3d80a":"1. mean \n2. random forest regressor \n3. LSTM \n\nFrom initial investigations RFR seems to be the best with the present set of features, \n\nIn the next version I plan to test, ARIMA, SARIMA, and SARIMAX and a hybrid more with Prophet. ","ecf666c3":"I am going to try some of the trivial methods to forcast the sales for next year and compare them. \n1. The first method being tried is average method: This assumes that the future values of the sales will equal to the average of the collected time series data. Quite straightforward!! ","98ac2440":"\n # Introduction <a class=\"anchor\" id=\"Introduction\"><\/a>\n * This notebook aims to perform a EDA of the provided dataset find out the features in the data provided to make a decision about the next Kaggle store. \n* If you find it useful, please upvote to keep me motivated for more additions to it. \n\n\n","e5cd9d5a":"### Results of LSTM \n* As can be seen the primitive LSTM method does not work well. The score is 53, However the Random Forest gives much better results. ","71dcf1f9":"## The test dataset is as follows:\n* We have 6569 entries in the test dataset. \n* If you notice the num_sold column is missing, this is the number we need to predict. \n\n### Plan of action:\n* I am going to use a couple of basic models in the begining to mark as a reference and then use the advanced more to see how much I manage to improve in terms of prediction of the total sales. ","3253ed1e":"# EDA<a class=\"anchor\" id=\"EDA\"><\/a>\n\n","89fb130b":"# LSTM to predict th## LSTM <a class=\"anchor\" id=\"LSTM\"><\/a>\n\ne sales ","3cba9a18":"## Metric for submission ","3f172c25":"### Result with mean: \n\n* When sales set to the mean of past data,  per store, per product and country the scrore omn test data is: 13.04\n* I will skip the naive, snaive and other trivial methods and try to use simple methods to compare the results. \nLet's try to use the engeniered variables in a random forest Regressor and XGBoose to see the improvement,  see the response. ","b87468a7":"#### As a next step let's check the distribution of these sales per year and their comparision per product, per country, per store. \n* This will give insight about the sesonality in the data. \n* Basically I plot the data in the seasonal form. As can be seen from previous timing plots that there are overall trend is similar in each year. ","da4f8356":"# Prediction Algorithms<a class=\"anchor\" id=\"PM\"><\/a>\n## Mean <a class=\"anchor\" id=\"mean\"><\/a>\n\n","7e4516c6":"### Result of Random Forest Regressor \n* The first iteration of result with RFR give a huge improvement w.r.t mean, score is 7.249 ","7b935ef8":"## SARIMAX <a class=\"anchor\" id=\"SARIMAX\"><\/a>\nComing soon\n\n\n","88af408f":"### Let's explore the training dataset, \n1. There are three unique product, ['Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker']\n2. As said, there are two ","ed7c43db":"* The residual error plot shows that there are features in the data which are not picked well by the model with defined parameter set (5,1,0). \n* The density plot of the erros show that the errors are almost normal \/ Gaussian distributed, but the mean is slightly shifted to lower values, i.e. slightly smaller than 0, with an width of about 200. Recall this is not a proper gaussian, it has a slow fall on the right. ","cff01a4d":"### For forecasting ","71a54521":"* Let's seprate the dataframe for each store and each country, so in total we now have 2x3=6 dataframes, saved in a single object. ","78a90650":"* Let's check the overall sale from each store in each country for each of the product. \n* this is not very helpful to see the evolution but do tell which store sold more product and in which category. ","6608ee7a":"## Random Forest <a class=\"anchor\" id=\"RandomForest\"><\/a>\n\n","6d9dafcd":"## ARIMA <a class=\"anchor\" id=\"ARIMA\"><\/a>\n* ARIMA stands for Auto Regression Integrated Moving Average. It was fun reading this book to understand about the TSA and prediction, https:\/\/otexts.com\/fpp3\/arima.html \n* ","783a87b6":"* In order to see better the evolution of sales of these products in each store in each country, we need to see the time evolution plots\/time series distribution of these these sales. \n* Let's check them for each of them using seaborn. ","f0fb957f":"# Table of Content \n1. [Introduction](#Intrduction)\n2. [Data Loading And Utilities](#Utils)\n3. [EDA](#EDA)\n4. [Features Extraction](#FE)\n5. [Prediction Methods](#PM)\n\n    5.1 [Mean](#mean)\n    \n    5.2 [Random Forest Regressor](#RandomForest)\n    \n    5.3 [LSTM](#LSTM)\n\n    5.4 [ARIMA](#ARIMA)\n    \n    5.5 [SARIMAX](#SARIMAX)\n\n\n\n\n\n\n\n\n","a5a54834":"# DATA access and other utilities<a class=\"anchor\" id=\"Utils\"><\/a>","c985efd3":"## Extract time information from provided date ","ea70341a":"## Splitting the data \n* Let's seprate train data into two parts, first 3 years as training and remaining one year as test, so that  I can get the score without submitting the prediction. "}}