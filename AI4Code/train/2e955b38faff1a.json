{"cell_type":{"e12c0637":"code","e227cce3":"code","2818d55b":"code","714aae2d":"code","9e6e502c":"code","e3e12f4b":"code","9ca7881d":"code","2c50099b":"code","ccf87225":"code","7a9b2c94":"markdown","83418c79":"markdown"},"source":{"e12c0637":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline","e227cce3":"PATH_DATA = '..\/input\/covid19-global-forecasting-week-5\/'\nRANDOM_STATE = 0","2818d55b":"def MakeDataFrame(file, Path = PATH_DATA):\n    df = (pd.read_csv(f'{PATH_DATA}{file}.csv'\n                      , sep = ','\n                      , header = 0)\n         )\n    \n    df.Date = pd.to_datetime(df.Date).dt.strftime(\"%Y%m%d\").astype(int)\n    df.Country_Region = df.apply(lambda x: x.Country_Region if pd.isnull(x.Province_State) else x.Province_State, axis=1)\n    \n    return df\n\ndf = MakeDataFrame('train')\n\ndf.head()","714aae2d":"XE, XT, ye, yt = train_test_split(df.iloc[:, 3:-1]\n                                  , df['TargetValue']\n                                  , test_size = 0.2\n                                  , random_state = RANDOM_STATE)\n\nXE.head()","9e6e502c":"Nums = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'median')), \n        ('scaler' , StandardScaler())\n    ])\n\nText = Pipeline(\n    steps = [\n        ('imputer', SimpleImputer(strategy = 'constant', fill_value = 'missing')), \n        ('onehot' , OneHotEncoder(handle_unknown = 'ignore'))\n    ])\n\nTransformer = ColumnTransformer(\n    n_jobs = -1\n    , transformers = [\n        ('num', Nums, XE.select_dtypes(include = ['int64','float64']).columns)\n        , ('cat', Text, XE.select_dtypes(include = ['object']).columns)\n    ])\n\nModel = Pipeline(\n    steps = [\n        ('Prepo', Transformer)\n        , ('Clf', RandomForestRegressor(n_jobs = -1\n                                        , random_state = RANDOM_STATE)) \n    ])\n\nModel.fit(XE, ye)\n\nModel.score(XT, yt)","e3e12f4b":"df = MakeDataFrame('test')\n\ndf.head()","9ca7881d":"pred = Model.predict(df[XE.columns.tolist()])\n\ndf = pd.DataFrame({'Id': df.index, 'TargetValue': pred.tolist()})","2c50099b":"q = ['0.05', '0.5', '0.95']\ndfq = None\n\nfor i in q:\n    k = (df.groupby(['Id'])['TargetValue'].quantile(q=float(i)).reset_index()\n         .rename(columns = {'TargetValue':i})\n        )\n    if dfq is None:\n        dfq = k\n    else:\n        dfq = pd.concat([dfq, k[i]], 1)\n        \ndfq.Id = dfq.Id + 1\n\ndfq.head()","ccf87225":"df = (pd.melt(dfq, id_vars = ['Id'], value_vars = q)\n      .rename(columns = {'value':'TargetValue'})\n     )\n\ndf['ForecastId_Quantile'] = df['Id'].astype(str) + '_' + df['variable']\n\ndf[['ForecastId_Quantile','TargetValue']].to_csv('submission.csv', index = False)","7a9b2c94":"## Make Pipeline\n\n* `StandardScaler`to standardize numericals features.\n* `OneHotEncoder` to make dummies in categorical features.\n* `ColumnTransformer` to run previus two steps.\n* The estimator `RandomForestRegressor`.","83418c79":"## Make Submission"}}