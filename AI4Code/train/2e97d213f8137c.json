{"cell_type":{"856d51ef":"code","4a00dd22":"code","04fdfe8f":"code","7d96cfeb":"code","33a163de":"code","6a93a625":"code","7a056d64":"code","d56f6373":"code","e13acd44":"code","66f44c74":"code","a5d5e259":"code","5525dc3b":"code","db43ce42":"code","ea79d701":"code","ba9d8092":"code","7e4e076f":"code","00faa8cc":"code","5d410f30":"code","ba88f363":"code","4bd68c63":"code","e080dcff":"code","a30a5c27":"code","b0dafa0b":"code","dbaff9be":"code","37301c76":"code","4ea389eb":"code","36fff28c":"code","15c693d5":"code","6fd60f62":"code","fb985c05":"code","e336693c":"code","0f28d50e":"code","f3763f02":"code","8b3ad3a7":"code","1df86b99":"code","ff6c4341":"code","b6f20862":"code","a539d4a3":"code","606c7665":"code","ed2b2eb2":"code","e2ec165f":"code","1869d820":"code","2fe88d5e":"code","70736399":"code","487e3d3b":"code","6018d9a2":"code","119b8683":"markdown","cd370590":"markdown","2befdaff":"markdown","6962e3cf":"markdown","0aaa9345":"markdown"},"source":{"856d51ef":"idle = np.load(\"..\/input\/eeg8chanel\/data8\/idle\/1608706768.npy\")\nkanan = np.load(\"..\/input\/eeg8chanel\/data8\/kanan\/1608707012.npy\")\nkiri = np.load(\"..\/input\/eeg8chanel\/data8\/kiri\/1608707050.npy\")\nmaju = np.load(\"..\/input\/eeg8chanel\/data8\/maju\/1608706976.npy\")\n\nkelas1=idle[0][16]\nkelas2=maju[0][16]\nkelas3=kanan[0][16]\nkelas4=kiri[0][16]\n\nkelas1a=idle[249]\nkelas2a=maju[249]\nkelas3a=kanan[249]\nkelas4a=kiri[249]\n\n\n\nf1, t1,Sxx= signal.spectrogram(kelas1,fs=60, window=('tukey', 0.25),\n                             nperseg=2,\n                             noverlap=1,\n                             nfft=None, \n                             detrend='constant',\n                             return_onesided=True, \n                             scaling='density', \n                             axis=-1,\n                             mode='psd',\n                            )\ndbs1 = 10*np.log10(Sxx)\nf2, t2,Sxx= signal.spectrogram(kelas2,fs=120, window=('tukey', 0.25),\n                             nperseg=2,\n                             noverlap=1,\n                             nfft=None, \n                             detrend='constant',\n                             return_onesided=True, \n                             scaling='density', \n                             axis=-1,\n                             mode='psd',\n                            )\ndbs2 = 10*np.log10(Sxx)\nf3, t3,Sxx= signal.spectrogram(kelas3,fs=120, window=('tukey', 0.25),\n                             nperseg=2,\n                             noverlap=1,\n                             nfft=None, \n                             detrend='constant',\n                             return_onesided=True, \n                             scaling='density', \n                             axis=-1,\n                             mode='psd'\n                            )\ndbs3 = 10*np.log10(Sxx)\nf4, t4,Sxx= signal.spectrogram(kelas4,fs=120, window=('tukey', 0.25),\n                             nperseg=2,\n                             noverlap=1,\n                             nfft=None, \n                             detrend='constant',\n                             return_onesided=True, \n                             scaling='density', \n                             axis=-1,\n                             mode='psd'\n                            )  \ndbs4 = 10*np.log10(Sxx)\n\nfig, axs = plt.subplots(nrows=4, ncols=4,figsize=(20,10))\naxs = axs.flatten()\n\naxs[0].set_title(\"siggle\")\naxs[0].plot(kelas1)\n\naxs[1].set_title(\"global\")\naxs[1].plot(kelas1a)\n\naxs[2].set_title(\"Spectogram\")\naxs[2].pcolormesh(t1, f1,dbs1,  \n                  shading='gouraud',\n                  cmap='nipy_spectral')\n\ncwt1 = signal.cwt(kelas1,signal.ricker,widths=np.arange(1,60))\ncwt2 = signal.cwt(kelas2,signal.ricker,widths=np.arange(1,50))\ncwt3 = signal.cwt(kelas3,signal.ricker,widths=np.arange(1,50))\ncwt4 = signal.cwt(kelas4,signal.ricker,widths=np.arange(1,50))\naxs[3].set_title(\"wavelet\")\naxs[3].imshow(cwt1,extent=[0,16,0,60],cmap='jet',aspect='auto',vmax=abs(cwt1).max(),vmin=-abs(cwt1).max())\n\naxs[4].plot(kelas2)\naxs[5].plot(kelas2a)\naxs[6].pcolormesh(t2, f2,dbs2,  \n                  shading='gouraud',\n                  cmap='nipy_spectral')\naxs[7].imshow(cwt2,extent=[0,16,0,60],cmap='jet',aspect='auto',vmax=abs(cwt2).max(),vmin=-abs(cwt2).max())\n\naxs[8].plot(kelas3)\naxs[9].plot(kelas3a)\naxs[10].pcolormesh(t3, f3,dbs3,  \n                  shading='gouraud',\n                  cmap='nipy_spectral')\naxs[11].imshow(cwt3,extent=[0,16,0,60],cmap='jet',aspect='auto',vmax=abs(cwt3).max(),vmin=-abs(cwt3).max())\n\naxs[12].plot(kelas4)\naxs[13].plot(kelas4a)\naxs[14].pcolormesh(t4, f4,dbs4,  \n                  shading='gouraud',\n                  cmap='viridis')\naxs[15].imshow(cwt4,extent=[0,16,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt4).max(),vmin=-abs(cwt4).max())\nplt.show()\n","4a00dd22":"import pandas as pd \nimport numpy as np \n  \n\nD1 = pd.DataFrame(idle[249]) \nD1.to_csv('idle.csv')\nD1 = pd.read_csv('idle.csv')\nD1=pd.DataFrame(D1.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD1.loc[D1['label'] >-1, 'label'] = '1'\nD1.to_csv('idle.csv')\n","04fdfe8f":"D2 = pd.DataFrame(kanan[249]) \nD2.to_csv('kanan.csv')\nD2 = pd.read_csv('kanan.csv')\nD2=pd.DataFrame(D2.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD2.loc[D2['label'] >-1, 'label'] = '2'\nD2.to_csv('kanan.csv')\n\n","7d96cfeb":"D1 = pd.read_csv('idle.csv')\nD2 = pd.read_csv('kanan.csv')\n\n#sns.lineplot(data=data1['ch1'], label=\"ch1\")\nsns.lineplot(data=D1['ch2'], label=\"ch2\")\n#sns.lineplot(data=data1['ch2'], label=\"ch3\")\n#sns.lineplot(data=data1['ch4'], label=\"ch4\")\n#sns.lineplot(data=data1['ch5'], label=\"ch5\")\n#sns.lineplot(data=data1['ch6'], label=\"ch6\")\n#sns.lineplot(data=data1['ch7'], label=\"ch7\")\n#sns.lineplot(data=data1['ch8'], label=\"ch8\")\n","33a163de":"sns.lineplot(data=D2['ch2'], label=\"ch2\")","6a93a625":"from __future__ import division\nimport numpy as np\nfrom scipy import *\nfrom matplotlib import pyplot as gplt\nfrom scipy import fftpack\nfrom matplotlib.colors import LightSource\n\ndef f(Y,x, N):\n    total = 0\n    for ctr in range(len(Y)):\n        total += Y[ctr] * (np.cos(x*ctr*2*np.pi\/N) + 1j*np.sin(x*ctr*2*np.pi\/N))\n    return real(total)\n\ntempdata = np.load(\"..\/input\/eeg8chanel\/data8\/idle\/1608706768.npy\")\n\nyear=tempdata[:,0]\nwolfer=tempdata[:,1]\n\nY=fft(wolfer)\nN=len(Y)\nprint(N)\n\nxs = range(N)\ngplt.plot(xs, [f(Y, x, N) for x in xs])\ngplt.show()","7a056d64":"#year.shape\na= pd.DataFrame(fft(wolfer))\na#.to_csv('ffft.csv')\n","d56f6373":"\nN=len(Y)\nprint(N)\nxs = range(N)\n\nfig, axs = plt.subplots(nrows=4, ncols=2,figsize=(20,20))\naxs = axs.flatten()\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',\n          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\nfor i in range(8):\n    axs[i].plot(xs, [f( (fft(a[i])), x, N) for x in xs],color=colors[i])\n    ","e13acd44":"fs = 250\nN = 250\n\ntime = np.arange(N) \/ float(fs)\namp = 2 * np.sqrt(2)\nmod = 500*np.cos(2*np.pi*0.25*time)\n\nnoise_power = 0.01 * fs \/ 2\nnoise = np.random.normal(scale=np.sqrt(noise_power), size=time.shape)\nnoise *= np.exp(-time\/5)\nx =  amp * a[2] + noise\n\nf, t, Sxx = signal.spectrogram(x,fs,nperseg=10,noverlap=5 )\n\nplt.pcolormesh(t, f, Sxx, shading='gouraud')\nplt.ylabel('Frequency [Hz]')\nplt.xlabel('Time [sec]')\nplt.show()\n","66f44c74":"#sns.lineplot(data=data1['ch1'], label=\"ch1\")\nsns.lineplot(data=D1['ch2'], label=\"ch2\")\nsns.lineplot(data=D1['ch2'], label=\"ch3\")\nsns.lineplot(data=D1['ch4'], label=\"ch4\")\nsns.lineplot(data=D1['ch5'], label=\"ch5\")\nsns.lineplot(data=D1['ch6'], label=\"ch6\")\n#sns.lineplot(data=data1['ch7'], label=\"ch7\")\n#sns.lineplot(data=data1['ch8'], label=\"ch8\")\n","a5d5e259":"#sns.lineplot(data=data2['ch1'], label=\"ch1\")\nsns.lineplot(data=D2['ch2'], label=\"ch2\")\nsns.lineplot(data=D2['ch2'], label=\"ch3\")\nsns.lineplot(data=D2['ch4'], label=\"ch4\")\nsns.lineplot(data=D2['ch5'], label=\"ch5\")\nsns.lineplot(data=D2['ch6'], label=\"ch6\")\n#sns.lineplot(data=data2['ch7'], label=\"ch7\")\n#sns.lineplot(data=data2['ch8'], label=\"ch8\")","5525dc3b":"dat1=D1['ch2']\ndat2=D1['ch3']\ndat3=D1['ch4']\ndat4=D1['ch5']\ndat5=D1['ch6']\n#data.shape,data\nat1=D2['ch2']\nat2=D2['ch3']\nat3=D2['ch4']\nat4=D2['ch5']\nat5=D2['ch6']\n","db43ce42":"fs = 10e3\nN = 60\n\ntime = np.arange(N) \/ float(fs)\namp = 2 * np.sqrt(2)\nnoise_power = 0.01 * fs \/ 2\n\nmod = 500*np.cos(2*np.pi*0.25*time)\ncarrier = amp * dat1\nnoise = np.random.normal(scale=np.sqrt(noise_power), size=time.shape)\nnoise *= np.exp(-time\/5)\nx = carrier + noise\n\nf, t, Sxx = signal.spectrogram(x,fs,nperseg=6,noverlap=5 )\n\nplt.pcolormesh(t, f, Sxx, shading='gouraud')\nplt.ylabel('Frequency [Hz]')\nplt.xlabel('Time [sec]')\nplt.show()\n\n\n\nf, t, Sxx = signal.spectrogram(dat1, fs, nperseg=6,noverlap=5,)\n\nplt.pcolormesh(t, f, Sxx, shading='gouraud')\nplt.ylabel('Frequency [Hz]')\nplt.xlabel('Time [sec]')\nplt.show()","ea79d701":"\nfig, axs = plt.subplots(nrows=1, ncols=5,figsize=(20,5))\naxs = axs.flatten()\n\ncwt1 = signal.cwt(dat1,signal.ricker,widths=np.arange(1,61))\ncwt2 = signal.cwt(dat2,signal.ricker,widths=np.arange(1,61))\ncwt3 = signal.cwt(dat3,signal.ricker,widths=np.arange(1,61))\ncwt4 = signal.cwt(dat4,signal.ricker,widths=np.arange(1,61))\ncwt5 = signal.cwt(dat5,signal.ricker,widths=np.arange(1,61))\n\naxs[0].imshow(cwt1,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt1).max(),vmin=-abs(cwt1).max())\n\naxs[1].imshow(cwt2,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt2).max(),vmin=-abs(cwt2).max())\n\naxs[2].imshow(cwt3,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt3).max(),vmin=-abs(cwt3).max())\n\naxs[3].imshow(cwt4,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt4).max(),vmin=-abs(cwt4).max())\n\naxs[4].imshow(cwt5,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt5).max(),vmin=-abs(cwt5).max())\n\n\n\n\n","ba9d8092":"fig, axs = plt.subplots(nrows=1, ncols=5,figsize=(20,5))\naxs = axs.flatten()\n\n\ncwt1 = signal.cwt(at1,signal.ricker,widths=np.arange(1,61))\ncwt2 = signal.cwt(at2,signal.ricker,widths=np.arange(1,61))\ncwt3 = signal.cwt(at3,signal.ricker,widths=np.arange(1,61))\ncwt4 = signal.cwt(at4,signal.ricker,widths=np.arange(1,61))\ncwt5 = signal.cwt(at5,signal.ricker,widths=np.arange(1,61))\n\naxs[0].imshow(cwt1,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt1).max(),vmin=-abs(cwt1).max())\n\naxs[1].imshow(cwt2,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt2).max(),vmin=-abs(cwt2).max())\n\naxs[2].imshow(cwt3,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt3).max(),vmin=-abs(cwt3).max())\n\naxs[3].imshow(cwt4,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt4).max(),vmin=-abs(cwt4).max())\n\naxs[4].imshow(cwt5,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt5).max(),vmin=-abs(cwt5).max())\n","7e4e076f":"\ncwt1 = signal.cwt(dat1,signal.ricker,widths=np.arange(1,61))\nplt.imshow(cwt1,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt1).max(),vmin=-abs(cwt1).max())\n","00faa8cc":"cwt2 = signal.cwt(at1,signal.ricker,widths=np.arange(1,61))\nplt.imshow(cwt2,extent=[0,60,0,60],cmap='jet',aspect='auto',\n               vmax=abs(cwt2).max(),vmin=-abs(cwt2).max())","5d410f30":"import pandas as pd \nimport numpy as np \n  \n\nD1 = pd.DataFrame(idle[249]) \nD1.to_csv('idle.csv')\nD1 = pd.read_csv('idle.csv')\nD1=pd.DataFrame(D1.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD1.loc[D1['label'] >-1, 'label'] = '1'\nD1.to_csv('idle.csv')\nD1\n","ba88f363":"D2 = pd.DataFrame(kanan[249]) \nD2.to_csv('kanan.csv')\nD2 = pd.read_csv('kanan.csv')\nD2=pd.DataFrame(D2.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD2.loc[D2['label'] >-1, 'label'] = '2'\nD2.to_csv('kanan.csv')\nD2\n","4bd68c63":"D3 = pd.DataFrame(kiri[249]) \nD3.to_csv('kiri.csv')\nD3 = pd.read_csv('kiri.csv')\nD3=pd.DataFrame(D3.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD3.loc[D3['label'] >-1, 'label'] = '3'\nD3.to_csv('kiri.csv')\nD3","e080dcff":"D4 = pd.DataFrame(maju[249]) \nD4.to_csv('maju.csv')\nD4 = pd.read_csv('maju.csv')\nD4=pd.DataFrame(D4.values, columns = [\"label\", \"ch1\", \"ch2\", \"ch3\", \n                                          \"ch4\",\"ch5\",\"ch6\",\"ch7\",\"ch8\"])\nD4.loc[D4['label'] >-1, 'label'] = '4'\nD4.to_csv('maju.csv')\nD4","a30a5c27":"a = pd.read_csv(\".\/idle.csv\")\nb = pd.read_csv(\".\/kiri.csv\")\nc = pd.read_csv(\".\/maju.csv\")\nd = pd.read_csv(\".\/kanan.csv\")\ntot= pd.concat([a,b,c,d])\ntot.to_csv('total.csv')\ntot\n","b0dafa0b":"tot.head()","dbaff9be":"tot.tail()","37301c76":"list(tot.columns)","4ea389eb":"df = pd.read_csv('total.csv')\ndf.drop(['Unnamed: 0', 'Unnamed: 0.1'], axis=1, inplace=True)\n\ndf","36fff28c":"df_train= pd.read_csv('total.csv')","15c693d5":"df.describe()","6fd60f62":"df.info()","fb985c05":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\n\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split","e336693c":"dataframe = pd.read_csv('total.csv')\ndataframe.drop(['Unnamed: 0', 'Unnamed: 0.1'], axis=1, inplace=True)","0f28d50e":"dataframe","f3763f02":"dataframe['label'] = np.where(dataframe['ch2']==4, 0, 1)","8b3ad3a7":"dataframe['label']","1df86b99":"train, test = train_test_split(dataframe, test_size=0.2)\ntrain, val = train_test_split(train, test_size=0.2)\nprint(len(train), 'train examples')\nprint(len(val), 'validation examples')\nprint(len(test), 'test examples')","ff6c4341":"train.shape","b6f20862":"def df_to_dataset(dataframe, shuffle=True, batch_size=32):\n    dataframe = dataframe.copy()\n    labels = dataframe.pop('label')\n    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n    if shuffle:\n        ds = ds.shuffle(buffer_size=len(dataframe))\n    ds = ds.batch(batch_size)\n    return ds","a539d4a3":"batch_size = 5 # A small batch sized is used for demonstration purposes\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","606c7665":"for feature_batch, label_batch in train_ds.take(1):\n    print('Every feature:', list(feature_batch.keys()))\n    print('A batch of ch2:', feature_batch['ch2'])\n    print('A batch of targets:', label_batch )","ed2b2eb2":"# We will use this batch to demonstrate several types of feature columns\nexample_batch = next(iter(train_ds))[0]\n#example_batch","e2ec165f":"def demo(feature_column):\n    feature_layer = layers.DenseFeatures(feature_column)\n    print(feature_layer(example_batch).numpy())\nfeature_column","1869d820":"feature_columns = []\n\n# numeric cols\nfor header in ['ch2', 'ch3', 'ch4','ch5','ch6']:\n    feature_columns.append(feature_column.numeric_column(header))\n\nfeature_columns","2fe88d5e":"# bucketized cols\nch2 = feature_column.numeric_column('ch2')\nch2_buckets = feature_column.bucketized_column(ch2, boundaries=[1, 2, 3, 4, 5])\nfeature_columns.append(ch2_buckets)\nch2","70736399":"feature_layer = tf.keras.layers.DenseFeatures(feature_columns)\nbatch_size = 32\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","487e3d3b":"model = tf.keras.Sequential([\n  feature_layer,\n  layers.Dense(128, activation='relu'),\n  layers.Dense(128, activation='relu'),\n  layers.Dropout(.1),\n  layers.Dense(1)\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.fit(train_ds,\n          validation_data=val_ds,\n          epochs=10)","6018d9a2":"loss, accuracy = model.evaluate(test_ds)\nprint(\"Accuracy\", accuracy)","119b8683":"# DATA","cd370590":"#CWT","2befdaff":"#FFT","6962e3cf":"#DNN","0aaa9345":"#Spectogram"}}