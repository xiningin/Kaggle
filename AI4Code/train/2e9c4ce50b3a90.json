{"cell_type":{"3aa7ff8c":"code","7ec3740b":"code","af62f2e2":"code","106e52dc":"code","e80ac9ff":"code","0b0fb01a":"code","e66639da":"code","4fa14294":"code","c1571f73":"code","cb98505a":"code","3ba4aeaa":"code","bac24ecf":"code","08b9ddde":"code","f9c509ef":"code","843f17d4":"code","0bfb10c2":"code","7d263f74":"code","13150dda":"code","9fc241cd":"code","5bd77ec3":"markdown","d4aaacd1":"markdown","67b8a2d4":"markdown","4876db34":"markdown","0b989e71":"markdown","c4b50e35":"markdown","a3b47d88":"markdown","ab09d061":"markdown","d13758f1":"markdown","8e1bef42":"markdown","2efa2a8d":"markdown","82c72c6a":"markdown","81b7825e":"markdown","0bad83cc":"markdown"},"source":{"3aa7ff8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ec3740b":"#Libraries\nfrom matplotlib import pyplot as plt\nimport pandas as pd\n\ndata_url = '..\/input\/titanic\/train.csv'\n\ndf = pd.read_csv(data_url, index_col=0) #index_col=0 means first column will become index, otherwise specify with column name 'example name'\n\n\nprint (df.head())\nprint (df.dtypes)\nprint (df.shape)\nprint (df.columns)","af62f2e2":"df=pd.get_dummies(df, columns=['Sex'])\ndf.head()","106e52dc":"corr = df.corr()\nprint(corr)\n\nimport statsmodels.api as sm\nsm.graphics.plot_corr(corr, xnames=list(corr.columns))\nplt.show()","e80ac9ff":"df_2 = df [['Pclass','Fare','Survived','Sex_female','Sex_male']]\ndf_2.isna().sum()","0b0fb01a":"X = df_2[['Pclass','Fare','Sex_female','Sex_male']].values\ny = df_2['Survived'].values","e66639da":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=7) \nkf.get_n_splits(X)\nprint(kf)\nprint (kf.split(X))\n\nfor train_index, test_index in kf.split(X):\n print('TRAIN:', train_index, 'TEST:', test_index)\n X_train, X_test = X[train_index], X[test_index]\n y_train, y_test = y[train_index], y[test_index]","4fa14294":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\nknn.fit(X_train, y_train)","c1571f73":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(knn, X_train, y_train)\nprint(\"Cross-validation scores: {}\".format(scores))","cb98505a":"y_predict=knn.predict(X_test)\n\n#print(len(X_test))\n#print(y_test[1])\n#fig = plt.figure()\n#ax = fig.add_subplot(111) #a new axes is created at the first position (1) on a grid of 2 rows and 3 columns\n#ax = fig.add_subplot(233)\n#ax = fig.add_axes([2,2,2,2]) \n#ax = fig.add_axes([1,1,2,2]) #[x0, y0, width, height], x0 and y0 = lower left point of graph\n#i=0\n#for i in range (0,len(X_test)-1):\n#    ax.bar(i + 0.00, y_test[i], color = 'b', width = 0.25)\n#    ax.bar(i + 0.25, y_predict[i], color = 'g', width = 0.25)\n#plt.show()\n\n#tabulate = pd.DataFrame({'predict':y_predict, 'actual':y_test})\n#temp2=tabulate.head(21)\n#print (temp2)\n#temp2.plot(kind='bar',figsize=(10,8))\n#plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\n#plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\n#plt.show()","3ba4aeaa":"count=0\nfor i in range (0,len(y_test)):\n    if y_test[i] == y_predict[i]:\n        count=count+1\n    else:\n        pass\n\naccuracy = (count\/len(y_predict))*100\nprint (\"Model accuracy = \", accuracy)\n","bac24ecf":"#Libraries\nfrom matplotlib import pyplot as plt\nimport pandas as pd\n\ndata_url = '..\/input\/titanic\/test.csv'\n\ndf = pd.read_csv(data_url, index_col=0) #index_col=0 means first column will become index, otherwise specify with column name 'example name'\n\nind = df.index\nprint (df.head())\nprint (df.dtypes)\nprint (df.shape)\nprint (df.columns)\nprint (df.index)","08b9ddde":"df.describe()","f9c509ef":"df.isna().sum()","843f17d4":"median = df['Fare'].median()\ndf['Fare'].fillna(median, inplace=True)","0bfb10c2":"df.isna().sum()","7d263f74":"df=pd.get_dummies(df, columns=['Sex'])\ndf.head()","13150dda":"X = df[['Pclass','Fare','Sex_female','Sex_male']].values\ny_predict = knn.predict(X)","9fc241cd":"df_save = pd.DataFrame({'PassengerId':ind,'Survived':y_predict})\ndf_save.to_csv(\"predict1.csv\") ","5bd77ec3":"Read test datasets and preview its details. ","d4aaacd1":"Read train datasets and preview its details. ","67b8a2d4":"Study accucary of the model","4876db34":"Check Kfold score","0b989e71":"Find and fill in NA ","c4b50e35":"Train a model using KNN","a3b47d88":"Select the features same as trained model and make prediction","ab09d061":"Choose features with significant correlation with target ","d13758f1":"Save the result as csv","8e1bef42":"Implement Kfold","2efa2a8d":"Encode categorical data ['Sex']","82c72c6a":"Make prediction","81b7825e":"Encode categorical data ['Sex']","0bad83cc":"Study the correlationship between target ('Survived') and other features."}}