{"cell_type":{"fa3fc9b0":"code","ec7e2829":"code","a469d73d":"code","a2aceb8c":"code","04269e97":"code","133ec7d6":"code","4b53ec1a":"code","25091afe":"code","ee7b9e19":"code","1bb19509":"markdown","70a4bf5d":"markdown","4526d821":"markdown","e8d41ad6":"markdown","2ce1edc1":"markdown"},"source":{"fa3fc9b0":"import pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import datasets, linear_model\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ec7e2829":"DF=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\nDF","a469d73d":"x = DF.iloc[:, [0, 1, 2, 3]].values\nx","a2aceb8c":"wcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)\n    \n#Plotting the results onto a line graph, allowing us to observe 'The elbow'\nplt.plot(range(1, 11), wcss)\nplt.title('The elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS') #within cluster sum of squares\nplt.show()","04269e97":"kmeans = KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(x)\nprint(y_kmeans)","133ec7d6":"plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'red', label = '0')\nplt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s = 100, c = 'blue', label = '1 ')\nplt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s = 100, c = 'green', label = '2 ')\n#plt.scatter(x[y_kmeans == 3, 0], x[y_kmeans == 3, 1], s = 100, c = 'red', label = '3 ')\n#plt.scatter(x[y_kmeans == 4, 0], x[y_kmeans == 4, 1], s = 100, c = 'blue', label = '4 ')\n#plt.scatter(x[y_kmeans == 5, 0], x[y_kmeans == 5, 1], s = 100, c = 'green', label = '5 ')\n#plt.scatter(x[y_kmeans == 6, 0], x[y_kmeans == 6, 1], s = 100, c = 'blue', label =  ' 6')\n#plt.scatter(x[y_kmeans == 7, 0], x[y_kmeans == 7, 1], s = 100, c = 'green', label = ' 7')\n#plt.scatter(x[y_kmeans == 8, 0], x[y_kmeans == 8, 1], s = 100, c = 'green', label = '8 ')\n#plt.scatter(x[y_kmeans == 8, 0], x[y_kmeans == 8, 1], s = 100, c = 'green', label = 's6 ')\n\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')\n\nplt.legend()","4b53ec1a":"plt.scatter(x[y_kmeans == 0, 2], x[y_kmeans == 0, 3], s = 100, c = 'red', label = '0')\nplt.scatter(x[y_kmeans == 1, 2], x[y_kmeans == 1, 3], s = 100, c = 'blue', label = '1')\nplt.scatter(x[y_kmeans == 2, 2], x[y_kmeans == 2, 3], s = 100, c = 'green', label = '2')\n#plt.scatter(x[y_kmeans == 3, 2], x[y_kmeans == 3, 3], s = 100, c = 'yellow', label = '3')\n#plt.scatter(x[y_kmeans == 4, 2], x[y_kmeans == 4, 3], s = 100, c = 'black', label = '4')\n#plt.scatter(x[y_kmeans == 5, 2], x[y_kmeans == 5, 3], s = 100, c = 'orange', label = '5')\n#plt.scatter(x[y_kmeans == 6, 2], x[y_kmeans == 6, 3], s = 100, c = 'aqua', label = '6')\n#plt.scatter(x[y_kmeans == 7, 2], x[y_kmeans == 7, 3], s = 100, c = 'blue', label = '7')\n#plt.scatter(x[y_kmeans == 8, 2], x[y_kmeans == 8, 3], s = 100, c = 'red', label = '8')\n\nplt.scatter(kmeans.cluster_centers_[:, 2], kmeans.cluster_centers_[:,3], s = 100, c = 'yellow', label = 'Centroids')\n\nplt.legend()","25091afe":"sns.pairplot(DF)","ee7b9e19":"g = sns.PairGrid(DF, corner=True)\ng.map_lower(sns.kdeplot, hue=None, levels=5, color=\".2\")\ng.map_lower(sns.scatterplot, marker=\"+\")\ng.map_diag(sns.histplot, element=\"step\", linewidth=0, kde=True)\ng.add_legend(frameon=True)\ng.legend.set_bbox_to_anchor((.61, .6))","1bb19509":"# Evaluate the quality of clusters formed by k-means","70a4bf5d":"# Implement Pre-processing functions\n- check for NULL values in the dataset. If any NULL value is present then treat it \naccordingly.\n- extract only feature columns from the dataset","4526d821":"# Determine the number of clusters using Elbow method","e8d41ad6":"# Apply k-means clustering using the value of k determined in Above step.","2ce1edc1":"# Form the clusters."}}