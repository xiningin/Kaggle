{"cell_type":{"4855db92":"code","47eae906":"code","13a84115":"code","06ef9b93":"code","5799901d":"code","823887c2":"code","50181890":"code","bae1f2d6":"code","e1ddc0d0":"code","9b23042f":"code","bf7d1cc4":"code","25c4673e":"code","78854dc3":"code","72ee4ce0":"code","b75d623a":"code","2430c710":"code","bcdb56ab":"markdown"},"source":{"4855db92":"import os\nimport random\nimport torch\nimport numpy as np\nimport cv2 as cv\nimport warnings\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom detectron2.utils.visualizer import ColorMode\nfrom detectron2.structures import BoxMode\nfrom detectron2.data import MetadataCatalog, DatasetCatalog\nfrom detectron2 import model_zoo\nfrom detectron2.config import get_cfg\nfrom detectron2.engine import DefaultTrainer\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.engine import DefaultPredictor\nwarnings.filterwarnings(\"ignore\")\n\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\n\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)","47eae906":"DAY_TRAIN_PATH = '\/kaggle\/input\/lisa-traffic-light-dataset\/Annotations\/Annotations\/dayTrain\/'\nNIGHT_TRAIN_PATH = '\/kaggle\/input\/lisa-traffic-light-dataset\/Annotations\/Annotations\/nightTrain\/'","13a84115":"# Compile all annotation files in one data frame\ntotal_day_df = []\nfor dayClip in tqdm([x for x in Path(DAY_TRAIN_PATH).glob('**\/*') if x.is_dir()]):\n    path = os.path.join(dayClip, \"frameAnnotationsBOX.csv\")\n    total_day_df.append(pd.read_csv(path, sep=\";\"))\n\ntdf_day = pd.concat(total_day_df)\ntdf_day[\"day\"] = 1\n\n\ntotal_night_df = []\nfor nightClip in tqdm([x for x in Path(NIGHT_TRAIN_PATH).glob('**\/*') if x.is_dir()]):\n    path = os.path.join(nightClip, \"frameAnnotationsBOX.csv\")\n    total_night_df.append(pd.read_csv(path, sep=\";\"))\n\ntdf_night = pd.concat(total_night_df)\ntdf_night[\"day\"] = 0\n\n\n\ndf = pd.concat([tdf_day, tdf_night])\n\nprint(df.shape)","06ef9b93":"# Drop unused columns and rename remaining\n\ndf = df.drop([\"Origin file\", \"Origin track\", \"Origin track frame number\", \"Origin frame number\"], axis=1)\n\ndf = df.rename({\"Filename\": \"file_name\", \"Annotation tag\"\"\": \"signal\",\n                 \"Upper left corner X\": \"l_x\", \"Upper left corner Y\": \"l_y\",\n                 \"Lower right corner X\": \"r_x\", \"Lower right corner Y\": \"r_y\"}, axis=1)\n\nprint(df.head())","5799901d":"unique_types = df[\"signal\"].unique()\namount_of_unique_types = len(unique_types)\n\ntypes_after_replace = dict(zip(unique_types, range(amount_of_unique_types)))\nprint(\"After replace:\"+str(types_after_replace))","823887c2":"\ndf[\"signal\"] = [types_after_replace[value] for value in df[\"signal\"]]\nprint(df.head())","50181890":"def correct_path(x):\n\n    splitted = x.file_name.split(\"\/\")[1]\n    day_clip = splitted.split(\"-\")[0]\n\n    if \"dayTraining\" in x.file_name:\n\n        return x.file_name.replace(\"dayTraining\",   \"\/kaggle\/input\/lisa-traffic-light-dataset\/dayTrain\/dayTrain\/{}\/frames\".format(day_clip))\n    else:\n        return x.file_name.replace(\"nightTraining\", \"\/kaggle\/input\/lisa-traffic-light-dataset\/nightTrain\/nightTrain\/{}\/frames\".format(day_clip))","bae1f2d6":"# We need to change path to jpg files, because current is not correct\ndf[\"file_name\"] = df.apply(correct_path, axis=1)\n\nprint(df.head())","e1ddc0d0":"fig, ax = plt.subplots(10, 1, figsize=(15, 10 * 10))\n\nfor index, val in enumerate(df.sample(n=10).values.tolist()):\n    img = cv.imread(val[0])\n    img = cv.cvtColor(img,cv.COLOR_BGR2RGB)\n    \n    cv.rectangle(img, (val[2], val[3]), (val[4], val[5]), (255, 0, 0), 2)\n\n    ax[index].set_title(unique_types[val[1]])\n    ax[index].set_axis_off()\n    ax[index].imshow(img)\n    ","9b23042f":"def get_traffic_light_dicts(df):\n\n    files = df[\"file_name\"].unique()\n\n    dataset_dicts = []\n    for idx, file_name in tqdm(enumerate(files)):\n        record = {}\n\n        height, width = cv.imread(file_name).shape[:2]\n\n        record[\"file_name\"] = file_name\n        record[\"image_id\"] = idx\n\n        record[\"height\"] = height\n        record[\"width\"] = width\n\n        annos = df[file_name == df[\"file_name\"]]\n\n        objs = []\n        for index, anno in annos.iterrows():\n            obj = {\n                \"bbox\": [anno[\"l_x\"], anno[\"l_y\"], anno[\"r_x\"], anno[\"r_y\"]],\n                \"bbox_mode\": BoxMode.XYXY_ABS,\n                \"category_id\": int(anno[\"signal\"]),\n            }\n            objs.append(obj)\n        record[\"annotations\"] = objs\n        dataset_dicts.append(record)\n    return dataset_dicts","bf7d1cc4":"for label, df in zip([\"train\", \"val\"], [train_df, test_df]):\n    DatasetCatalog.register(\"traffic_\" + label, lambda df=df: get_traffic_light_dicts(df))\n    MetadataCatalog.get(\"traffic_\" + label).set(thing_classes=unique_types.tolist())\n\ntraffic_metadata = MetadataCatalog.get(\"traffic_train\")","25c4673e":"dataset_dicts = get_traffic_light_dicts(train_df)\nfor d in dataset_dicts:\n    img = cv.imread(d[\"file_name\"])\n    visualizer = Visualizer(img[:, :, ::-1], metadata=traffic_metadata, scale=0.5)\n    out = visualizer.draw_dataset_dict(d)\n    cv.imshow(str(d[\"image_id\"]), out.get_image()[:, :, ::-1])\n","78854dc3":"cfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_50_FPN_3x.yaml\"))\ncfg.DATASETS.TRAIN = (\"traffic_train\",)\ncfg.DATASETS.TEST = ()\ncfg.DATALOADER.NUM_WORKERS =4\ncfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-Detection\/faster_rcnn_R_50_FPN_3x.yaml\")\ncfg.SOLVER.IMS_PER_BATCH = 1\ncfg.SOLVER.BASE_LR = 0.001\ncfg.SOLVER.MAX_ITER = 200\ncfg.SOLVER.STEPS = []\ncfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 30\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = amount_of_unique_types\n\n# I use cpu of server to train \ncfg.MODEL.DEVICE = \"cpu\"\n","72ee4ce0":"os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\ntrainer = DefaultTrainer(cfg)\ntrainer.resume_or_load(resume=False)\ntrainer.train()","b75d623a":"cfg.MODEL.WEIGHTS = os.path.join(\"model_final.pth\")  \ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7  \npredictor = DefaultPredictor(cfg)","2430c710":"dataset_dicts = get_traffic_light_dicts(test_df)\n\nfor d in random.sample(dataset_dicts, 10):\n    im = cv.imread(d[\"file_name\"])\n    outputs = predictor(im)\n    v = Visualizer(im[:, :, ::-1],\n                   metadata=traffic_metadata,\n                   scale=0.5,\n                   instance_mode=ColorMode.IMAGE_BW\n    )\n\n    out = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    cv.imshow(str(d[\"image_id\"]), out.get_image()[:, :, ::-1])","bcdb56ab":" I don't know how to launch detectron2 on kaggle platform, so it doesn't work here(("}}