{"cell_type":{"4e3fe510":"code","e84358be":"code","e97fe760":"code","318027b2":"code","c8026ffe":"code","9320879a":"code","6a8567e4":"code","88d22927":"code","009a39e4":"code","8153543f":"markdown","f7fd47af":"markdown","e115e5d7":"markdown","6e73affc":"markdown","fd7b40c7":"markdown","114b79ae":"markdown","e67fd29f":"markdown"},"source":{"4e3fe510":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e84358be":"a1D = np.array([1, 2, 3, 4])\nprint(a1D)\na2D = np.array([[1, 2], [3, 4]])\nprint(a2D)","e97fe760":"a = np.array([2, 3, 4], dtype = np.uint32)\nb = np.array([5, 6, 7], dtype = np.uint32)\nc = a - b\nprint('c:', c, c.dtype)","318027b2":"print(np.arange(10))\nprint(np.linspace(1, 4, 6))","c8026ffe":"print('eye matrix: \\n',np.eye(3))\n\nprint('diagonal: \\n',np.diag([1, 2, 3]))\n\nprint('Vandermonde matrix: \\n',np.vander([1, 2, 3, 4], 2))","9320879a":"print('zeros: \\n',np.zeros((2, 3)))\n\nprint('ones: \\n',np.ones((2, 3)))","6a8567e4":"import numpy.random\n#randn is used for the normal distribution\nnp.random.randn(4,4)","88d22927":"a = np.array([1, 2, 3, 4, 5, 6])\nb = a[:2]\nc =b+1\nprint('a =', a, '; b =', b,';c=',c)","009a39e4":"a = np.array([1, 2, 3, 4])\nb = a.copy()\nprint('a = ', a, 'b = ', b)","8153543f":"# copying, joining, or slicing numpy arrays","f7fd47af":"# numpy.linspace and numpy.arange \nthe functions generally need at least two inputs, start and stop.\n\nnumpy.arange creates arrays with regularly incrementing values.\n\nnumpy.linspace will create arrays with a specified number of elements, and spaced equally between the specified beginning and end values. For example:","e115e5d7":"# 2D array creation\n\n1. np.eye(n, m): defines a 2D identity matrix.\n2. np.diag can define either a square 2D array with given values along the diagonal or if given a 2D array returns a 1D array that is only the diagonal elements.\n3. vander(x, n) defines a Vandermonde matrix as a 2D NumPy array. Each column of the Vandermonde matrix is a decreasing power of the input 1D array or list or tuple, x where the highest polynomial order is n-1. This array creation routine is helpful in generating linear least squares models.\n","6e73affc":"The random method will create an array filled with random values between 0 and 1. It is included with the numpy.random library.","fd7b40c7":"# ndarray creation ","114b79ae":"# array creation","e67fd29f":"**copying the numpy array**"}}