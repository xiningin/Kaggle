{"cell_type":{"660fd223":"code","1d7ed92c":"code","f4b0d44c":"code","22e6b8a6":"code","3ef08d10":"code","492213cc":"code","fa9e9781":"code","f2f9b0ac":"code","e042475d":"code","cbe4802b":"code","65f5d52a":"code","a1a3a030":"code","38763743":"code","c6dc95f8":"code","c44bc66d":"code","56f58e38":"code","e83bcf39":"code","403591f2":"code","55844804":"code","1de78786":"code","c25c87cf":"code","13191599":"code","83146911":"code","fdc59e52":"code","4455253e":"code","858417ca":"code","6d93c03a":"code","4f132bc1":"code","adee84e2":"code","8f61438c":"code","3aacf4f4":"markdown"},"source":{"660fd223":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d7ed92c":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f4b0d44c":"df = pd.read_csv('\/kaggle\/input\/homicide-reports\/database.csv')\ndf.head()","22e6b8a6":"df.shape","3ef08d10":"df.info()","492213cc":"df.isna().sum()","fa9e9781":"df.columns = df.columns.str.replace('\\s+', '_') ","f2f9b0ac":"print('Year with most cases of homicide is: ', df['Year'].value_counts().idxmax())\nprint('Month with most cases of homicide is: ', df['Month'].value_counts().idxmax())\nprint('City with most cases of homicide is: ', df['City'].value_counts().idxmax())\nprint('State with most cases of homicide is: ', df['State'].value_counts().idxmax())\nprint('Weapon used the most in homicide cases is: ', df['Weapon'].value_counts().idxmax())\nprint('Most homicide cases are : ', df['Crime_Solved'].value_counts().idxmax())","e042475d":"solved = df['Crime_Solved'].value_counts()\n\nfig = px.bar(y=solved.index,\n            x=solved,\n            text=(solved\/len(df['Crime_Solved'])*100),\n            title='Solved VS UnSolved Homicide Cases Count',\n            orientation='h',\n             height=400,\n            width=800)\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.3s}%', marker=dict(color=solved, colorscale='twilight'))\nfig.show()","cbe4802b":"agency_type = df['Agency_Type'].value_counts()\n\nfig = px.pie(names=agency_type.index,\n            values =agency_type,\n            height=500,\n            title='Agency Type')\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Pastel2))\nfig.show()","65f5d52a":"year = df['Year'].value_counts()\n\nfig = px.bar(x=year.index,\n            y=year,\n            text=year,\n            title='Count Of Homicide Cases Over The Years')\n\nfig.update_traces(textposition='outside', marker=dict(color=year, colorscale='earth'))\nfig.show()","a1a3a030":"month = df['Month'].value_counts()\n\nfig = px.bar(x=month.index,\n            y=month,\n            text=month,\n            title='Count Of Homicide Cases Over The Months')\n\nfig.update_traces(textposition='outside', marker=dict(color=month, colorscale='oranges'))\nfig.show()","38763743":"df['City'].nunique()","c6dc95f8":"from wordcloud import WordCloud\nfrom scipy import signal\n\ncities = df['City']\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(background_color = 'black',\n                     width = 512,\n                     height = 384).generate(' '.join(cities))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()\n","c44bc66d":"cities = df['City'].value_counts().head(10)\n\nfig = px.bar(x=cities.index,\n            y=cities,\n            text=(cities\/len(df['City'])*100),\n            title='Top 10 Cities With Most Homicide Cases',\n            width=900)\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.2s}%', marker=dict(color=cities, colorscale='tealrose'))\nfig.show()","56f58e38":"df['State'].nunique()","e83bcf39":"states = df['State']\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(background_color = 'white',\n                     width = 512,\n                     height = 384).generate(' '.join(states))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","403591f2":"states = df['State'].value_counts().head(10)\n\nfig = px.bar(x=states.index,\n            y=states,\n            text=(states\/len(df['State'])*100),\n            title='Top 10 States With Most Homicide Cases',\n            width=900)\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.2s}%', marker=dict(color=states, colorscale='tealrose'))\nfig.show()","55844804":"weapon = df['Weapon'].value_counts()\n\nfig = px.bar(x=weapon.index,\n            y=weapon,\n            text=(weapon\/len(df['Weapon'])*100),\n            title='Weapon Used In Homicides')\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.3s}%', marker=dict(color=weapon, colorscale='tealrose'))\nfig.show()","1de78786":"victim_count = df['Victim_Count'].value_counts()\n\nfig = px.pie(names=victim_count.index,\n            values=victim_count,\n            title='Homicide Victim Count',)\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Pastel))\nfig.show()","c25c87cf":"weapon_count = df.groupby('Weapon')['Victim_Count'].sum().reset_index().sort_values(by='Victim_Count', ascending=False)\n\nfig = px.bar(x=weapon_count['Weapon'],\n            y=weapon_count['Victim_Count'],\n            text=weapon_count['Victim_Count'],\n            title='Victim Count Of Weapons Used In Homicide')\nfig.update_traces(textposition='outside', marker=dict(color=weapon_count['Victim_Count'], colorscale='rdylbu'))\nfig.show()","13191599":"crime_type = df['Crime_Type'].value_counts()\n\nfig = px.pie(names=crime_type.index,\n            values=crime_type,\n            title='Crime Type')\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.T10))\nfig.show()","83146911":"plt.figure(figsize=(18,5))\nsns.countplot(x=df['Relationship'])\nplt.xlabel('Relationship', fontsize=12)\nplt.xticks(rotation=60)\nplt.title('Relationship Of Perpetrator With Victims', fontsize=15)\nplt.show()","fdc59e52":"perp_eth = df['Perpetrator_Ethnicity'].value_counts()\n\nfig = px.pie(names=perp_eth.index,\n            values=perp_eth,\n            title='Perpetrator Ethnicity')\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Set1))\nfig.show()","4455253e":"vic_eth = df['Victim_Ethnicity'].value_counts()\n\nfig = px.pie(names=vic_eth.index,\n            values=vic_eth,\n            title='Victim Ethnicity')\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Set2))\nfig.show()","858417ca":"prep_sex = df['Perpetrator_Sex'].value_counts()\nvic_sex = df['Victim_Sex'].value_counts()\n\nfig = px.pie(names=prep_sex.index,\n            values=prep_sex,\n            title=\"Perpetrator Sex\")\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Set2))\nfig.show()\n\nfig = px.pie(names=vic_sex.index,\n            values=vic_sex,\n            title=\"Victim's Sex\")\n\nfig.update_traces(textinfo='percent',\n            insidetextorientation='radial',\n            legendgroup='show', \n            marker = dict(colors=px.colors.qualitative.Set2))\n\nfig.show()","6d93c03a":"weapons = df.groupby('Perpetrator_Sex')['Weapon'].value_counts().reset_index(name='count')\n\nfig = px.bar(x=weapons['Perpetrator_Sex'],\n                  y=weapons['count'],\n                  color=weapons['Weapon'],\n                  barmode='stack',\n                  text=weapons['count'],\n                  height=600,\n                  width=900)\nfig.update_traces(textposition='outside')\nfig.show()","4f132bc1":"record = df['Record_Source'].value_counts()\n\nfig = px.bar(y=record.index,\n            x=record,\n            text=(record\/len(df['Record_Source'])*100),\n            title='Crime Record Sources',\n            orientation='h',\n            height=400,\n            width=700)\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.3s}%', \n                 marker=dict(color=record, colorscale='fall'))\nfig.show()","adee84e2":"unsolved_crime = df[df['Crime_Solved']=='No']\n\nunsolved_year = unsolved_crime['Year'].value_counts()\n\nfig = px.bar(x=unsolved_year.index,\n            y=unsolved_year,\n            text=(unsolved_year\/len(unsolved_crime['Year'])*100),\n            title='Unsolved Crimes Over The Years')\n\nfig.update_traces(textposition='outside',texttemplate='%{text:.3s}%', \n                 marker=dict(color=unsolved_year, colorscale='viridis'))\nfig.show()","8f61438c":"unsolved_crime['Record_Source'].value_counts().plot.bar()","3aacf4f4":"**Unsolved Homicide Cases**"}}