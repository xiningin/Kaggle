{"cell_type":{"0dba05b5":"code","98263bb9":"code","fc56788a":"code","c3e873d2":"code","1c667afe":"code","34b8afbe":"code","3bdac829":"code","40bfed52":"code","29ceebc2":"code","a4251d3e":"code","f262b85c":"code","05f3ae90":"code","26a855c2":"code","ca732c83":"code","ba05a755":"code","cdf5514b":"code","bce1174d":"code","07a6c9dd":"code","bc228d3b":"code","def2a266":"code","a6bc09ae":"code","5ead4fe9":"code","6a29b839":"code","bf6c35eb":"code","27921720":"code","a200d3cf":"code","c51d4355":"code","6ecff675":"code","547282df":"code","59bc982a":"code","b0bb8c07":"code","e3c995d9":"code","ae5dfc5a":"code","f5763eec":"code","aa1da934":"code","060f193c":"code","9fe8842c":"code","a494230b":"code","85b30d7c":"code","b56659c5":"code","34540c33":"markdown","80db2081":"markdown","a18c88bc":"markdown"},"source":{"0dba05b5":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","98263bb9":"#read dataset\ndf = pd.read_csv('..\/input\/kaggle-competitions-ranking\/Kaggle Competitions Ranking.csv', error_bad_lines = False, encoding = 'latin-1', sep = ';')","fc56788a":"#show head of dataset\ndf.head()","c3e873d2":"#check all columns\ndf.columns","1c667afe":"#check rows and columns of dataset\ndf.shape","34b8afbe":"#check dataset type\ndf.dtypes","3bdac829":"#check missing value of dataset\ndf.isnull().sum()","40bfed52":"#handling missing value\ndf.dropna(inplace = True)\ndf.isnull().sum()","29ceebc2":"#check correlation of each variable\ndf.corr()","a4251d3e":"#visualize correlation of each variable using pearson correlation\nsns.heatmap(df.corr(), vmax = 0.9, linewidths = 0.8, cmap = 'flare')\nplt.title('Pearson Correlation', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.show()","f262b85c":"#check unique of rank column\ndf['Rank'].unique()","05f3ae90":"#check unique of tier column\ndf['Tier'].unique()","26a855c2":"#check number of tier column\ndf['Tier'].value_counts()","ca732c83":"#check unique of username column\ndf['Username'].unique()","ba05a755":"#check number of username column\ndf['Username'].value_counts()","cdf5514b":"#remove spesific value in username column\ndf = df.drop(df[df.Username.isin(['?', '??', '???', '????', '?????', '??????', '???????'])].index)\ndf['Username'].value_counts()","bce1174d":"#check unique of join date column\ndf['Join Date'].unique()","07a6c9dd":"#check number of join date column\ndf['Join Date'].value_counts()","bc228d3b":"#visualize the outlier of each variable\ndf.boxplot(column = ['Bronze Medals', 'Silver Medals', 'Gold Medals', 'Points'])\nplt.ylabel('Count', fontsize = 12)\nplt.show()\n\nprint('Maximum of bronze medals :', df['Bronze Medals'].max())\nprint('Minimum of bronze medals :', df['Bronze Medals'].min())\nprint('Median of bronze medals :', df['Bronze Medals'].median())\nprint('Average of bronze medals :', df['Bronze Medals'].mean())\nprint('Total of bronze medals :', df['Bronze Medals'].sum())\nprint('\\n')\nprint('Maximum of silver medals :', df['Silver Medals'].max())\nprint('Minimum of silver medals :', df['Silver Medals'].min())\nprint('Median of silver medals :', df['Silver Medals'].median())\nprint('Average of silver medals :', df['Silver Medals'].mean())\nprint('Total of silver medals :', df['Silver Medals'].sum())\nprint('\\n')\nprint('Maximum of gold medals :', df['Gold Medals'].max())\nprint('Minimum of gold medals :', df['Gold Medals'].min())\nprint('Median of gold medals :', df['Gold Medals'].median())\nprint('Average of gold medals :', df['Gold Medals'].mean())\nprint('Total of gold medals :', df['Gold Medals'].sum())\nprint('\\n')\nprint('Maximum of points :', df['Points'].max())\nprint('Minimum of points :', df['Points'].min())\nprint('Median of points :', df['Points'].median())\nprint('Average of points :', df['Points'].mean())\nprint('Total of points :', df['Points'].sum())","def2a266":"#analyze of bronze medals under 1.0 based on rank, join date, tier and username\ndf[df['Bronze Medals'] < 1.0][['Rank', 'Join Date', 'Tier', 'Username', 'Bronze Medals']]","a6bc09ae":"#analyze of bronze medals over 1.0 based on rank, join date, tier and username\ndf[df['Bronze Medals'] > 1.0][['Rank', 'Join Date', 'Tier', 'Username', 'Bronze Medals']]","5ead4fe9":"#analyze of silver medals under 2.0 based on rank, join date, tier and username\ndf[df['Silver Medals'] < 2.0][['Rank', 'Join Date', 'Tier', 'Username', 'Silver Medals']]","6a29b839":"#analyze of silver medals over 2.0 based on rank, join date, tier and username\ndf[df['Silver Medals'] > 2.0][['Rank', 'Join Date', 'Tier', 'Username', 'Silver Medals']]","bf6c35eb":"#analyze of gold medals over 0.0 based on rank, join date, tier and username\ndf[df['Gold Medals'] > 0.0][['Rank', 'Join Date', 'Tier', 'Username', 'Gold Medals']]","27921720":"#analyze of points under 3418.0.0 based on rank, join date, tier and username\ndf[df['Points'] < 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]","a200d3cf":"#remove question mark attribute in username column\ndf['Username'] = [str(i).replace('?', '') for i in df['Username']]\n\n#show again \ndf[df['Points'] < 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]","c51d4355":"#analyze of points over 3418.0.0 based on rank, join date, tier and username\ndf[df['Points'] > 3418.0][['Rank', 'Join Date', 'Tier', 'Username', 'Points']]","6ecff675":"#analyze average of bronze medals based on tier, join date, rank and username\nbronze_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Bronze Medals',\n              aggfunc = {'Bronze Medals' : np.sum}).sort_values('Bronze Medals', ascending = False)\nbronze_medal.head(20)","547282df":"#analyze total of silver medals based on tier, join date, rank and username\nsilver_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Silver Medals',\n              aggfunc = {'Silver Medals' : np.sum}).sort_values('Silver Medals', ascending = False)\nsilver_medal.head(20)","59bc982a":"#analyze total of gold medals based on tier, join date, rank and username\ngold_medal = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Gold Medals',\n              aggfunc = {'Gold Medals' : np.mean}).sort_values('Gold Medals', ascending = False)\ngold_medal.head(20)","b0bb8c07":"#analyze total of points based on tier, join date, rank and username\npoint = pd.pivot_table(df, index = ['Tier', 'Join Date', 'Rank', 'Username'], values = 'Points',\n              aggfunc = {'Points' : np.mean}).sort_values('Points', ascending = False)\npoint.head(20)","e3c995d9":"#visualize number of tier\nplt.figure(figsize = (6,5))\nsector = [np.count_nonzero(df[df['Tier'] == 'grandmaster']),\n          np.count_nonzero(df[df['Tier'] == 'master']),\n          np.count_nonzero(df[df['Tier'] == 'expert'])]\nactivities = ['Grandmaster', 'Master', 'Expert']\nplt.pie(sector, labels = activities, autopct = '%1.f%%')\nplt.title('Number of Tiers', fontsize = 15, fontweight = 'bold')\nplt.show()","ae5dfc5a":"#visualize total bronze medals based on tier\nchart = df.groupby('Tier')['Bronze Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'lightseagreen')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Bronze Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Bronze Medals', fontsize = 12)\nplt.show()","f5763eec":"#visualize total silver medals based on tier\nchart = df.groupby('Tier')['Silver Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'dodgerblue')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Silver Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Silver Medals', fontsize = 12)\nplt.show()","aa1da934":"#visualize total silver medals based on tier\nchart = df.groupby('Tier')['Gold Medals'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'salmon')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Gold Medals based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Gold Medals', fontsize = 12)\nplt.show()","060f193c":"#visualize total point medals based on tier\nchart = df.groupby('Tier')['Points'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'magenta')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Points based on Tier', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Tier', fontsize = 12)\nplt.ylabel('Total Points Medals', fontsize = 12)\nplt.show()","9fe8842c":"#visualize correlation of total points and total bronze medals\nplt.scatter(df['Points'], df['Bronze Medals'], marker = 'o', color = 'darkorange')\nplt.title('Total Points ~ Total Bronze Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Bronze Medals', fontsize = 12)\nplt.show()","a494230b":"#visualize correlation of total points and total silver medals\nplt.scatter(df['Points'], df['Silver Medals'], marker = '+', color = 'maroon')\nplt.title('Total Points ~ Total Silver Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Silver Medals', fontsize = 12)\nplt.show()","85b30d7c":"#visualize correlation of total points and total gold medals\nplt.scatter(df['Points'], df['Gold Medals'], marker = '^', color = 'forestgreen')\nplt.title('Total Points ~ Total Gold Medals', fontsize = 15, pad = 12, fontweight = 'bold')\nplt.xlabel('Total Points', fontsize = 12)\nplt.ylabel('Total Gold Medals', fontsize = 12)\nplt.show()","b56659c5":"#visualize distribution of each variables\ndf.hist(figsize = (8,9))\nplt.show()","34540c33":"# Exploratory Data Analysis (EDA)","80db2081":"# Data Extraction","a18c88bc":"# Top 5000 Kaggle Competitions Ranking "}}