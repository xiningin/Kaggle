{"cell_type":{"fe70f79a":"code","1d7b8168":"code","f67da009":"code","d88ed642":"code","b593912e":"code","459292c3":"code","f5679780":"code","774bee00":"code","0c89c258":"code","42bf3143":"code","8a699942":"code","ff18325f":"code","d7c0af50":"code","dfd7f537":"code","0d060077":"code","e2b70598":"code","b4e69d97":"code","60e7243d":"code","1c481349":"code","7d2f65f1":"code","2fd959b9":"code","888f44b2":"code","a27f9f21":"code","3dbf48b5":"code","6c75c83a":"code","a47725a4":"code","9b3e5254":"code","59f6b2de":"code","f11540f7":"code","6fdaa115":"code","42d629cf":"code","3a7f3cd8":"code","6ce07e17":"code","dac256ab":"code","cfa1e8c8":"code","c070b3ef":"code","44cc8dcf":"code","672ee3c1":"code","8c2f4984":"code","e2862d43":"code","f490f7fb":"markdown","f101a8ce":"markdown","9d5a990b":"markdown","827462ef":"markdown","cd24576a":"markdown","d093af70":"markdown","45538b73":"markdown","68fbb33c":"markdown","af01a77b":"markdown","2ff0f0ee":"markdown","42027d53":"markdown","c386ae4e":"markdown","706895a7":"markdown","8d7cf16a":"markdown","360ff1ff":"markdown","9b5fb931":"markdown","8ef3bdf0":"markdown","f87d27f2":"markdown","b8a5e892":"markdown","f6a9182c":"markdown","c8670975":"markdown","d90eda7b":"markdown","f701f799":"markdown","1e7ac758":"markdown","5c01ae32":"markdown","7fe56a14":"markdown","13d516f9":"markdown","6a6f8dcd":"markdown","d85f32cc":"markdown","1cc979e7":"markdown","54b89215":"markdown","eb1eb4f1":"markdown","dea6ae7c":"markdown","3b97e9bf":"markdown","4857132d":"markdown","bf18ad74":"markdown","e7635e26":"markdown","45a2e9d1":"markdown"},"source":{"fe70f79a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1d7b8168":"# Change the style of the figure to the \"dark\" theme\nsns.set_style(\"dark\")\n","f67da009":"# Path of the file to read\nspotify_filepath = \"..\/input\/data-for-datavis\/spotify.csv\"\n\n# Read the file into a variable spotify_data\nspotify_data = pd.read_csv(spotify_filepath, index_col=\"Date\", parse_dates=True)","d88ed642":"spotify_data.sample(10)","b593912e":"# Line chart \nplt.figure(figsize=(12,6))\nsns.lineplot(data=spotify_data)\n","459292c3":"# Path of the file to read\nign_filepath = \"..\/input\/data-for-datavis\/ign_scores.csv\"\n\n# Fill in the line below to read the file into a variable ign_data\nign_data = pd.read_csv(ign_filepath, index_col=\"Platform\")\n\nign_data.head(10)","f5679780":"ign_data.columns","774bee00":"# Set the width and height of the figure\nplt.figure(figsize=(8, 6))\n\n# Bar chart showing average score for racing games by platform\nsns.barplot(x=ign_data['Racing'], y=ign_data.index)\n\n# Add label for horizontal axis\nplt.xlabel(\"\")\n\n# Add label for vertical axis\nplt.title(\"Average Score for Racing Games, by Platform\")\n","0c89c258":"fig, ax = plt.subplots(figsize=(15,7))\nsns.lineplot(x=ign_data.index, y='Racing',data=ign_data,ax=ax)\nsns.lineplot(x=ign_data.index, y='Action',data=ign_data,ax=ax)\nplt.xticks(rotation=90)","42bf3143":"plt.figure(figsize=(15, 7))\n# Heatmap showing average game score by platform and genre\nsns.heatmap(data=ign_data, annot=True) # Your code here :-\n","8a699942":"# Path of the file to read\nins_filepath = \"..\/input\/data-for-datavis\/insurance.csv\"\n\n# Fill in the line below to read the file into a variable\ninsurance_data = pd.read_csv(ins_filepath)\n","ff18325f":"plt.figure(figsize=(12, 7))\nsns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'])","d7c0af50":"# Path of the file to read\ncandy_filepath = \"..\/input\/data-for-datavis\/candy.csv\"\n\n# Fill in the line below to read the file into a variable ign_data\ncandy_data = pd.read_csv(candy_filepath)\n\n# Analyzing Data\ncandy_data","dfd7f537":"plt.figure(figsize=(12, 7))\n# Scatter plot showing the relationship between 'sugarpercent' and 'winpercent'\nsns.scatterplot(x=candy_data['sugarpercent'],y=candy_data['winpercent'])\n","0d060077":"plt.figure(figsize=(12, 7))\n\n# Scatter plot w\/ regression line showing the relationship between 'sugarpercent' and 'winpercent'\nsns.regplot(x='sugarpercent',y='winpercent', data = candy_data)\n","e2b70598":"plt.figure(figsize=(12, 7))\n\n# Scatter plot showing the relationship between 'chocolate' and 'winpercent'\nsns.swarmplot(x=candy_data['chocolate'], y=candy_data['winpercent'])\n","b4e69d97":"# Color-coded scatter plot w\/ regression lines\nsns.lmplot(x='pricepercent', y='winpercent', hue= 'chocolate', data=candy_data, height=7, aspect=1.3)\n","60e7243d":"plt.figure(figsize=(12, 7))\n\nsns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'], hue=insurance_data['smoker'])\n","1c481349":"#fig,ax=plt.subplots(figsize=(12, 7))\n\nsns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", data=insurance_data, height=7, aspect=1.3)","7d2f65f1":"plt.figure(figsize=(12, 7))\n\nsns.swarmplot(x=insurance_data['smoker'], y=insurance_data['charges'])","2fd959b9":"# Import pandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Read 'gapminder.csv' into a DataFrame: df\ndf = pd.read_csv('..\/input\/gm2008\/gm_2008_region.csv')\n# Print the columns of df\nprint(df.columns)\n\n","888f44b2":"df","a27f9f21":"# Create a boxplot of life expectancy per region\ndf.boxplot('life', 'Region', rot=60,figsize=(12,8))\n# Show the plot\nplt.show()\n","3dbf48b5":"# Path of the file to read\niris_filepath = \"..\/input\/data-for-datavis\/iris.csv\"\n\n# Fill in the line below to read the file into a variable\niris_data = pd.read_csv(iris_filepath)\n\niris_data","6c75c83a":"plt.figure(figsize=(9, 5))\n# KDE plot \n\nplt.hist(iris_data['Species'])\n","a47725a4":"plt.figure(figsize=(12, 7))\n# Histogram \nsns.distplot(a=iris_data['Petal Length (cm)'], kde=False)\n","9b3e5254":"plt.figure(figsize=(12, 7))\n# KDE plot \n\nsns.kdeplot(data=iris_data['Petal Length (cm)'], shade=True)\nplt.legend()\nplt.title(\"Distribution of Petal Length in Iris Species\")\nplt.ylabel('Frequency')\nplt.xlabel('Petal Length (cm)')","59f6b2de":"#plt.figure(figsize=(12, 7))\n# 2D KDE plot\nsns.jointplot(x=iris_data['Petal Length (cm)'], y=iris_data['Sepal Width (cm)'], kind=\"kde\")\n","f11540f7":"# Paths of the files to read\niris_set_filepath = \"..\/input\/data-for-datavis\/iris_setosa.csv\"\niris_ver_filepath = \"..\/input\/data-for-datavis\/iris_versicolor.csv\"\niris_vir_filepath = \"..\/input\/data-for-datavis\/iris_virginica.csv\"\n\n# Read the files into variables \niris_set_data = pd.read_csv(iris_set_filepath, index_col=\"Id\")\niris_ver_data = pd.read_csv(iris_ver_filepath, index_col=\"Id\")\niris_vir_data = pd.read_csv(iris_vir_filepath, index_col=\"Id\")\n\n# Print the first 5 rows of the Iris versicolor data\niris_ver_data.head()\n\n","6fdaa115":"plt.figure(figsize=(12, 7))\n# Histograms for each species\nsns.distplot(a=iris_set_data['Petal Length (cm)'], label=\"Iris-setosa\", kde=False)\nsns.distplot(a=iris_ver_data['Petal Length (cm)'], label=\"Iris-versicolor\", kde=False)\nsns.distplot(a=iris_vir_data['Petal Length (cm)'], label=\"Iris-virginica\", kde=False)\n\n# Add title\nplt.title(\"Histogram of Petal Lengths, by Species\")\n\n# Force legend to appear\nplt.legend()\n","42d629cf":"iris_data","3a7f3cd8":"df = iris_data\n\nplt.subplots(figsize=(7,6), dpi=100)\nsns.distplot( df.loc[df.Species=='Iris-setosa', \"Sepal Length (cm)\"] , color=\"dodgerblue\", label=\"Setosa\")\nsns.distplot( df.loc[df.Species=='Iris-virginica', \"Sepal Length (cm)\"] , color=\"orange\", label=\"Virginica\")\nsns.distplot( df.loc[df.Species=='Iris-versicolor', \"Sepal Length (cm)\"] , color=\"deeppink\", label=\"Versicolor\")\n\nplt.title('Histogram of Sepal Lengths, by Species')\nplt.legend();","6ce07e17":"plt.subplots(figsize=(7,6), dpi=100)\n\n# Change line width\nsns.violinplot( x=df[\"Species\"], y=df[\"Sepal Length (cm)\"], linewidth=5)\n#sns.plt.show()\n \n# Change width\nsns.violinplot( x=df[\"Species\"], y=df[\"Sepal Length (cm)\"], width=0.3)\n","dac256ab":"plt.figure(figsize=(12, 7))\n\n# KDE plots for each species\nsns.kdeplot(data=iris_set_data['Petal Length (cm)'], label=\"Iris-setosa\", shade=True)\nsns.kdeplot(data=iris_ver_data['Petal Length (cm)'], label=\"Iris-versicolor\", shade=True)\nsns.kdeplot(data=iris_vir_data['Petal Length (cm)'], label=\"Iris-virginica\", shade=True)\n\n# Add title\nplt.title(\"Distribution of Petal Lengths, by Species\")\n\n# Force legend to appear\nplt.legend()\n","cfa1e8c8":"iris=iris_data.drop(['Id'], axis=1)\nsns.pairplot(iris, hue=\"Species\");","c070b3ef":"import missingno as msno \nvc = pd.read_csv('..\/input\/vehicle-collisions\/database.csv')\n","44cc8dcf":"vc.describe()","672ee3c1":"msno.bar(vc)","8c2f4984":"\nmsno.heatmap(vc)","e2862d43":"msno.dendrogram(vc)","f490f7fb":"The dendrogram uses a hierarchical clustering algorithm (courtesy of scipy) to bin variables against one another by their nullity correlation (measured in terms of binary distance). At each step of the tree the variables are split up based on which combination minimizes the distance of the remaining clusters. The more monotone the set of variables, the closer their total distance is to zero, and the closer their average distance (the y-axis) is to zero.\n\nTo interpret this graph, read it from a top-down perspective. Cluster leaves which linked together at a distance of zero fully predict one another's presence\u2014one variable might always be empty when another is filled, or they might always both be filled or both empty, and so on. In this specific example the dendrogram glues together the variables which are required and therefore present in every record.\n\nCluster leaves which split close to zero, but not at it, predict one another very well, but still imperfectly. If your own interpretation of the dataset is that these columns actually are or ought to be match each other in nullity (for example, as CONTRIBUTING FACTOR VEHICLE 2 and VEHICLE TYPE CODE 2 ought to), then the height of the cluster leaf tells you, in absolute terms, how often the records are \"mismatched\" or incorrectly filed\u2014that is, how many values you would have to fill in or drop, if you are so inclined.\n\nReference : https:\/\/github.com\/ResidentMario\/missingno\n","f101a8ce":"# Analyzing Spotify Trends with Multi-Category Graph\n\nMulticategory line graphs are immensely useful for finding trends by comparing different categories along a common axis usually time axis. ","9d5a990b":"# Using Scatter Plots for Trend Analysis\n\nTo create a simple scatter plot, we use the sns.scatterplot command and specify the values for:\n\n- Horizontal x-axis (x=insurance_data['bmi']), and\n- Vertical y-axis (y=insurance_data['charges']).\n\n","827462ef":"Histogram above now clearly shows differences of the three species using Petal length. \n\nLets create a KDE plot for each species by using\u00a0sns.kdeplot. Again,\u00a0label=\u00a0is used to set the values in the legend.\n","cd24576a":"### How to Check Class Distributions or Imbalance ?","d093af70":"## How can we Understand Relationship between BMI and Insurance Charges ?\n\n","45538b73":"This scatter plot clearly shows that while non-smokers to tend to pay slightly more with increasing BMI, smokers pay MUCH more as compared to non-smokers.\n","68fbb33c":"## References\n\nhttps:\/\/www.kaggle.com\/alenavorushilova\/data-analysis-and-data-visualization-seaborn\n","af01a77b":"## How can we understand Three-Way Relationship involving One Categorical Feature ?\n\nWe can use scatter plots to display the relationships between (not two, but...) three variables! One way of doing this is by color-coding the points.\n\n","2ff0f0ee":"In this example, it seems that reports which are filed with an OFF STREET NAME variable are less likely to have complete geographic data.\n\nNullity correlation ranges from -1 (if one variable appears the other definitely does not) to 0 (variables appearing or not appearing have no effect on one another) to 1 (if one variable appears the other definitely also does).\n\nVariables that are always full or always empty have no meaningful correlation, and so are silently removed from the visualization\u2014in this case for instance the datetime and injury number columns, which are completely filled, are not included.\n\nEntries marked <1 or >-1 are have a correlation that is close to being exactingly negative or positive, but is still not quite perfectly so. This points to a small number of records in the dataset which are erroneous. For example, in this dataset the correlation between VEHICLE CODE TYPE 3 and CONTRIBUTING FACTOR VEHICLE 3 is <1, indicating that, contrary to our expectation, there are a few records which have one or the other, but not both. These cases will require special attention.\n","42027d53":"## Violin Plot\n\nViolin plots are similar to box plots, except that they also show the probability density of the data at different values. These plots include a marker for the median of the data and a box indicating the interquartile range, as in the standard box plots. Overlaid on this box plot is a kernel density estimation. Like box plots, violin plots are used to represent comparison of a variable distribution (or sample distribution) across different \"categories\".","c386ae4e":"## Understanding Insurance Costs versus Smoking with Regression Lines\n\nTo further emphasize this fact(smokers pay higher insurance), we can use the\u00a0sns.lmplot\u00a0command to add two regression lines, corresponding to smokers and nonsmokers. (You'll notice that the regression line for smokers has a much steeper slope, relative to the line for nonsmokers!)\n","706895a7":"## Heatmap Showing Average Game Score by Platform","8d7cf16a":"# Visualizing Missing Values\n\nThe missingno correlation heatmap measures nullity correlation: how strongly the presence or absence of one variable affects the presence of another:\n","360ff1ff":"## Color-Coded Plots\n\n### What are key differences between the species ?\n### How does Petal Length varies across Species ?\n\nThe analysis done so far is not enough to clearly understand differences between species of Iris flower. \nTo answer this question, we begin by breaking the dataset into three separate files, with one for each of the species.\n","9b5fb931":"According to the plot above, there is a slight correlation between 'winpercent' and 'sugarpercent'.\n","8ef3bdf0":"## Introduction\n\nData visualization in data science is not a work of art, it must always have specific purpose and goals. The goals of data visualization in data science can be one of the following :-  \n\n1. To answer tricky questions \n2. To illustrate trends \n3. To show data anomalies \n4. To show outliers\n5. To show class imbalance\n6. To understand data distribution\n7. To understand relationships between various features and target variables\n\nor any other well defined purpose or goal.\n\nIt is the art of asking questions, finding right questions to answer, and then using effective visualization for desired goals that is the most important skill needed in a data scientist. If a data scientist is unable to ask questions, and be able to find answers to those questions through visualization and other data science techniques than they need to polish these skills.\n\nIf a beautiful visualization is not doing any of the above, then it may be work of art but not useful for data science.\n\nIn this notebook, I illustrate how you can do effective data analysis with the help of powerful data visualization techniques and help answer relevant questions.\n![VisualizationPurpose.png](attachment:VisualizationPurpose.png)","f87d27f2":"## Is there a Relationship between Chocolate and WinPercent ?\n\nGraph clearly shows that people prefer chocolate over simple candies.","b8a5e892":"# Distributions","f6a9182c":"### Pairplots\n\nTo plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This creates a matrix of axes and shows the relationship for each pair of columns in a DataFrame. By default, it also draws the univariate distribution of each variable on the diagonal Axes.\n\nReference :- https:\/\/seaborn.pydata.org\/tutorial\/distributions.html","c8670975":"## How Petal Length varies in Iris Flowers ?\n\nWe can answer this question by plotting a histogram with the sns.distplot command.","d90eda7b":"## How Smoking Affects the Relationship between BMI and Insurance Costs ?\n\nWe can answer this question by color-coding the points by\u00a0'smoker', and plot the other two columns ('bmi',\u00a0'charges') on the axes.","f701f799":"### Heatmap\n\nThe missingno correlation heatmap measures nullity correlation: how strongly the presence or absence of one variable affects the presence of another:","1e7ac758":"## Finding Region-Wise Life Expectancy Using Boxplot","5c01ae32":"## Analysis and Conclusions\n\nWe'll begin with the regression line for chocolate candies. Since this line has a slightly positive slope, we can say that more expensive chocolate candies tend to be more popular (than relatively cheaper chocolate candies). Likewise, since the regression line for candies without chocolate has a negative slope, we can say that if candies don't contain chocolate, they tend to be more popular when they are cheaper. One important note, however, is that the dataset is quite small -- so we shouldn't invest too much trust in these patterns! To inspire more confidence in the results, we should add more candies to the dataset.","7fe56a14":"Above graph clearly shows feature combinations which can separate the three species.","13d516f9":"## Do People Tend to Prefer Candies with Higher Sugar Content ?\n","6a6f8dcd":"## Categorical Scatter Plot\n\nFinally, there's one more plot that you'll learn about, that might look slightly different from how you're used to seeing scatter plots. Usually, we use scatter plots to highlight the relationship between two continuous variables (like\u00a0\"bmi\"\u00a0and\u00a0\"charges\"). However, we can adapt the design of the scatter plot to feature a categorical variable (like\u00a0\"smoker\") on one of the main axes. \n\n\nWe'll refer to this plot type as a\u00a0categorical scatter plot, and we build it with the\u00a0sns.swarmplot\u00a0command.\n\n","d85f32cc":"Now we can see that Petal length has two clusters; one has length of 1-2 cm and other has length of 4 cm  to 7 cm. \n\nkde=False is something we'll always provide when creating a histogram, as leaving it out will create a slightly different plot.\n","1cc979e7":"### Bar Chart\nmsno.bar is a simple visualization of nullity by column:","54b89215":"## Setting Style","eb1eb4f1":"To answer the question, we will create a different histogram for each species by using the sns.distplot command (as above) three times. We use label= to set how each histogram will appear in the legend.","dea6ae7c":"### Do Certain Regions have higher Life-Expectancy than Others ?","3b97e9bf":"## 2D KDE Plots\n\nWe're not restricted to a single column when creating a KDE plot. We can create a two-dimensional (2D) KDE plot with the sns.jointplot command.\n\nIn the plot below, the color-coding shows us how likely we are to see different combinations of sepal width and petal length, where darker parts of the figure are more likely.\n","4857132d":"## Please Upvote,Comment, Fork and Share to Help me with my efforts to help the community.","bf18ad74":"The scatter plot does not show a strong correlation between the two variables. Since there is no clear relationship between the two variables, this tells us that sugar content does not play a strong role in candy popularity.\n","e7635e26":"## What Conclusions can you Draw about the Effects of Chocolate and Price on popularity of Candy?\n","45a2e9d1":"## Kernel Density Plots(KDE)\n\nThe next type of plot is a kernel density estimate (KDE) plot. In case you're not familiar with KDE plots, you can think of it as a smoothed histogram.\n\nTo make a KDE plot, we use the sns.kdeplot command. Setting shade=True colors the area below the curve (and data= has identical functionality as when we made the histogram above).\n"}}