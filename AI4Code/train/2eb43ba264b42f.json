{"cell_type":{"77aec929":"code","bbdefb12":"code","0908629c":"code","71b3ea55":"code","33d2a4fd":"code","5a141a10":"code","67ea41da":"code","cb5c1db3":"code","e8a978c1":"code","c3e2375a":"code","12b3c3c4":"code","0faec74a":"code","52e2570a":"code","875009a7":"code","cf3aa0f7":"code","ad44d5b6":"code","030bf67e":"code","3464c291":"code","4f9d4d9e":"code","97bd18ae":"code","7227617c":"code","e7b4b83f":"code","f89a5a6f":"code","c2bd609c":"markdown","86169e18":"markdown","9622a5bc":"markdown","3549922f":"markdown","7b14e9f7":"markdown"},"source":{"77aec929":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk import bigrams\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nfrom collections import Counter\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bbdefb12":"df = pd.read_csv('..\/input\/joe-biden-2020-dnc-speech\/joe_biden_dnc_2020.csv')\ndf.shape","0908629c":"df","71b3ea55":"# combine rows and show full text\ntext = \" \".join(xx for xx in df.TEXT)\ntext","33d2a4fd":"# show wordcloud of speech\nstopwords_cloud = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords_cloud, max_font_size=50, max_words=250,\n                      width = 600, height = 400,\n                      background_color=\"black\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","5a141a10":"# standard stopwords\nmy_stopwords = set(nltk.corpus.stopwords.words('english'))\n# additional stopwords\nmy_stopwords = my_stopwords.union({\"'s\",\"'ll\",\"'re\",\"n't\",\"'ve\",\"'m\"})","67ea41da":"# lower case\ntext = text.lower()","cb5c1db3":"# tokenize text\nwords = nltk.word_tokenize(text)","e8a978c1":"print('Number of tokens: ', len(words))","c3e2375a":"# remove single characters\nwords = [word for word in words if len(word) > 1]\n\n# remove stopwords\nwords = [word for word in words if word not in my_stopwords]","12b3c3c4":"print('Number of tokens after cleaning: ', len(words))","0faec74a":"# count word frequencies\nword_freqs = nltk.FreqDist(words)","52e2570a":"# plot word frequencies\nplt.rcParams['figure.figsize'] = [12, 6]\nword_freqs.plot(50)","875009a7":"# show counts for top 25\ntop_words = dict(word_freqs.most_common(50))\ntop_words","cf3aa0f7":"my_bigrams = bigrams(words)\ncounts = Counter(my_bigrams)\ncounts = dict(counts)","ad44d5b6":"# convert dictionary to data frame\ndcounts = pd.DataFrame.from_dict(counts, orient='index', columns=['frequency'])","030bf67e":"# select only bigrams occuring at least twice\ndcounts = dcounts[dcounts.frequency>=2]\n# and sort descending\ndcounts = dcounts.sort_values(by='frequency', ascending=False)","3464c291":"plt.rcParams['figure.figsize'] = [12, 12]\nplt.barh(list(map(str, dcounts.index)), dcounts.frequency)\nplt.title('Most frequent bigrams')\nplt.grid()\nplt.show()","4f9d4d9e":"sia = SentimentIntensityAnalyzer()","97bd18ae":"# evaluate sentiment by paragraph (= row)\nsent_stats_pos = list()\nsent_stats_neg = list()\nsent_stats_total = list()\nfor i in range(18+1):\n    txt = df.TEXT[i]\n    print(txt)\n    sent = sia.polarity_scores(txt)\n    print('Sentiment \u00a7', i, ': ', sent)\n    print('\\n')\n    sent_stats_pos.append(sent['pos'])\n    sent_stats_neg.append(sent['neg'])\n    sent_stats_total.append(sent['compound'])","7227617c":"# proportion of text that has positive sentiment\nplt.rcParams['figure.figsize'] = [8, 6]\nplt.bar(x=range(19), height=sent_stats_pos, color='darkgreen')\nplt.grid()\nplt.title('Development of positive proportion')\nplt.xticks(np.arange(18+1))\nplt.show()","e7b4b83f":"# proportion of text that has negative sentiment\nplt.rcParams['figure.figsize'] = [8, 6]\nplt.bar(x=range(19), height=sent_stats_neg, color='red')\nplt.grid()\nplt.title('Development of negative proportion')\nplt.xticks(np.arange(18+1))\nplt.show()","f89a5a6f":"# overall score: +1 extremely positive, -1 extremely negative\nplt.rcParams['figure.figsize'] = [8, 6]\nplt.bar(x=range(19), height=sent_stats_total, color='blue')\nplt.grid()\nplt.title('Development of overall sentiment score')\nplt.xticks(np.arange(18+1))\nplt.show()","c2bd609c":"# Try a few NLP techniques on Joe Biden's 2020 DNC speech","86169e18":"# Bigrams","9622a5bc":"# Wordcloud","3549922f":"# Sentiment","7b14e9f7":"# Most frequent words"}}