{"cell_type":{"fd5b31ec":"code","6f8be837":"code","59b0c43e":"code","61cfbb79":"code","14242495":"code","459b99e4":"code","f9169b76":"code","80ed9783":"code","37d24d19":"code","5edbcad0":"code","7a06afd1":"code","1c4bc38b":"code","53b4e2d9":"code","8996946a":"code","6fb0a0e5":"code","6c026bbe":"code","14b82e19":"code","90864a26":"code","5fc88642":"code","bbde6bb9":"code","695b2e9b":"code","7203c2dd":"code","5e5d5f4d":"markdown","b42b7260":"markdown","fabdf6b4":"markdown","dafbd79a":"markdown","5321918b":"markdown","acd5a73e":"markdown","d7cb76f3":"markdown","1b0c768d":"markdown","5cb8fc02":"markdown"},"source":{"fd5b31ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib .pyplot as plt\nfrom sklearn import preprocessing\nimport itertools\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6f8be837":"\ndef normalize(data):\n    headers = ['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research', 'Chance_of_Admit']\n    x = data.values\n    min_max_scaler = preprocessing.MinMaxScaler()\n    x_scaled = min_max_scaler.fit_transform(x)\n    data = pd.DataFrame(x_scaled)\n    data.columns = headers\n    \n    return(data)","59b0c43e":"def visualize(data):\n    data.hist()\n    plt.show()\n    #input(\"Enter to view density plot: \")\n    data.plot(kind='density', subplots=True, layout=(3,3), sharex=False)\n    plt.show()\n    #input(\"Press enter to view correlation plot: \")\n    \n    corr = data.corr()\n    names = list(data)\n    fig = plt.figure(figsize=(12,12))\n    ax = fig.add_subplot(111)\n    cax = ax.matshow(corr, vmin=-1, vmax=1)\n    fig.colorbar(cax)\n    ticks = np.arange(0,8,1)\n    ax.set_xticks(ticks)\n    ax.set_yticks(ticks)\n    ax.set_xticklabels(names)\n    ax.set_yticklabels(names)\n    plt.show()","61cfbb79":"def split_data(data):\n    msk = np.random.rand(len(data)) < 0.8\n    train_data=data[msk] \n    test_data =data[~msk]    \n    \n    return (train_data, test_data)","14242495":"def get_input_fn(data_set, num_epochs=None, n_batch = 128, shuffle=True):    \n         return tf.estimator.inputs.pandas_input_fn(       \n         x=pd.DataFrame({k: data_set[k].values for k in FEATURES}),       \n         y = pd.Series(data_set[LABEL].values),       \n         batch_size=n_batch,          \n         num_epochs=num_epochs,       \n         shuffle=shuffle)","459b99e4":"df = pd. read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")\ndata = df.drop(columns=\"Serial No.\")\nvisualize(data)","f9169b76":"data","80ed9783":"data = normalize(data)","37d24d19":"data.columns","5edbcad0":"train, test = split_data(data)\nprint(train.shape, test.shape)\ncol_names = list(data.columns)\nLABEL = col_names.pop()\nFEATURES = col_names\nprint(FEATURES, LABEL)","7a06afd1":"feature_cols = [tf.feature_column.numeric_column(k) for k in FEATURES]","1c4bc38b":"estimator = tf.estimator.LinearRegressor(feature_columns=feature_cols, model_dir=\"train\")","53b4e2d9":"estimator.train(input_fn=get_input_fn(train,                                       \n                                           num_epochs=None,                                      \n                                           n_batch = 128,                                      \n                                           shuffle=False),                                      \n                                           steps=10000)","8996946a":"ev = estimator.evaluate(    \n          input_fn=get_input_fn(test,                          \n          num_epochs=1,                          \n          n_batch = 128,                          \n          shuffle=False))","6fb0a0e5":"train[\"Chance_of_Admit\"].describe()","6c026bbe":"y = estimator.predict(    \n         input_fn=get_input_fn(test,                          \n         num_epochs=1,                          \n         n_batch = 100,                          \n         shuffle=False))","14b82e19":"predictions = list(p[\"predictions\"] for p in itertools.islice(y, len(test[\"Chance_of_Admit\"])))\nprint(\"Predictions: {}\".format(str(predictions)))","90864a26":"predict = np.array(predictions[:])\npredict.shape\nshaped = np.reshape(predict, (len(test[\"Chance_of_Admit\"]),))\nprint(len(shaped))\nprint(len(test[\"Chance_of_Admit\"]))","5fc88642":"rmse = (np.square(test[\"Chance_of_Admit\"] - shaped)).mean(axis=None)\nprint(rmse)","bbde6bb9":"plt.scatter(test[\"Chance_of_Admit\"], shaped)","695b2e9b":"error = test[\"Chance_of_Admit\"].values - shaped\nerror","7203c2dd":"plt.hist(error, bins=20)","5e5d5f4d":"**Training model**","b42b7260":"**Split Data**","fabdf6b4":"**Normalize data**","dafbd79a":"This is my first upload to Kaggle, I am new to data science.\nPlease do let me know if any improvements can be made to the model.\n\n\nAny suggestions will be helpful.\n:)","5321918b":"**Input_fn**","acd5a73e":"**----------------------------------------------------------------------------------------------------------------------------------------------------------------------------**","d7cb76f3":"**Split data **","1b0c768d":"**Creating Model**","5cb8fc02":"**Visualize data**"}}