{"cell_type":{"9ebeb89d":"code","ffe63219":"code","38696fe1":"code","07a549f3":"code","ea22e746":"code","97f0eaea":"code","c611c10a":"code","fdeb5099":"code","b9d7d1ac":"code","c0c2e4c5":"code","4f39bc51":"code","a002a007":"code","0be2db97":"code","96438086":"code","dc782741":"code","05868635":"code","1e52e4de":"code","0f751402":"code","119f00ed":"code","76fe2ed4":"code","8852cd95":"code","9c3a444f":"code","2dc63403":"code","8205e1ca":"code","0f0de016":"code","7a80bac6":"code","da7f0f99":"code","51d8fda4":"code","3f768d7c":"code","f1b288f4":"code","93b22387":"code","3e45b3f3":"code","e58ec0e0":"code","f26732e9":"code","675c214e":"code","6cc597d6":"code","36d924da":"code","f8bd0f95":"code","6fe30fc0":"code","3214aed5":"code","2ac820bd":"code","b2f85661":"code","4031e6fe":"code","43b54813":"code","363256cf":"code","744a6a34":"code","d9d03f6f":"code","08bc2383":"code","58c43b92":"code","45d2a74b":"code","84cbd664":"code","fd931060":"code","493a484d":"code","7ee78e93":"code","21a7d392":"code","8c7a7e0d":"code","e9acecf2":"code","ace35720":"code","f85dce7c":"code","61060b05":"code","788cf2cd":"code","4ca5703f":"markdown","4ab56450":"markdown","dcfd36dc":"markdown","6363aa33":"markdown","0dcc2c1a":"markdown","37365163":"markdown","ac357868":"markdown","ebdfa3b7":"markdown","7f4e1f0c":"markdown","4648e4da":"markdown","4279dd34":"markdown","969663a4":"markdown","2b3375d6":"markdown","5dd59da2":"markdown","e30578cb":"markdown","4915d454":"markdown","facd8c60":"markdown","9b7b66f5":"markdown","73f7f21e":"markdown","4a0db03b":"markdown","8a265fd0":"markdown","f2f56637":"markdown","49fe6501":"markdown","6c3b5bc3":"markdown","a256dd1d":"markdown","5ea85bd9":"markdown","72f779ee":"markdown","97753d86":"markdown"},"source":{"9ebeb89d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nimport pandas_profiling\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport statistics","ffe63219":"df=pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf=df.iloc[:,:-2]","38696fe1":"df.head()","07a549f3":"df.shape","ea22e746":"df.columns","97f0eaea":"df.describe()","c611c10a":"df.info()","fdeb5099":"pandas_profiling.ProfileReport(df)","b9d7d1ac":"#Let's have a look at age distribution of existing customers and churned ones\nsns.displot(data=df,x='Customer_Age',hue='Attrition_Flag',kind='hist',palette='tab10')\nplt.title('Age hist for existing and churned customers',fontsize=15);","c0c2e4c5":"#Mode of age distribution\nprint('Mode of Age distribution is ',statistics.mode(df['Customer_Age']))","4f39bc51":"#Maybe number of dependents is the reason of churn?..\nsns.catplot(x='Dependent_count',col='Attrition_Flag',data=df,kind='count',palette='summer');","a002a007":"fig=go.Figure()\nfig.add_trace(go.Histogram(x=df.loc[df['Attrition_Flag']=='Existing Customer']['Education_Level'],\n                           histnorm='probability density',marker=dict(color='crimson'),\n                           opacity=0.75,name='Education level of existing customers'))\nfig.add_trace(go.Histogram(x=df.loc[df['Attrition_Flag']=='Attrited Customer']['Education_Level'],\n                           histnorm='probability density',marker=dict(color='dodgerblue'),\n                           opacity=0.75,name='Education level of churned customers'))\nfig.update_layout(title='Education level',legend=dict(x=0.5,xanchor='center',orientation='h'),margin=dict(l=0,r=0,t=30,b=0))\nfig.show()","0be2db97":"df.groupby(['Card_Category','Income_Category'])['Income_Category'].agg(['count']).sort_values(by='count',ascending=False)","96438086":"fig,axes=plt.subplots(nrows=1,ncols=2,figsize=(15,7))\ndf_cards_ex=df.loc[df['Attrition_Flag']=='Existing Customer'].groupby('Card_Category').size()\ndf_cards_ch=df.loc[df['Attrition_Flag']=='Attrited Customer'].groupby('Card_Category').size()\ndf_cards_ex.plot(kind='pie',ax=axes[0],title='Card Category of existing customers (left) and churned ones (right)',\n                 subplots=True,colormap='cividis')\ndf_cards_ch.plot(kind='pie',ax=axes[1],subplots=True,colormap='cividis')\naxes[0].set_ylabel('')\naxes[1].set_ylabel('');","dc782741":"df_exist=df.loc[df['Attrition_Flag']=='Existing Customer']\ndf_churn=df.loc[df['Attrition_Flag']=='Attrited Customer']\n\ncolors=['rgb(0,0,100)','rgb(0,200,200)']\nfig=ff.create_distplot([df_exist['Months_on_book'],df_churn['Months_on_book']],['Existing Customer','Attrited Customer'],\n                       colors=colors,show_hist=False)\nfig.update(layout_title_text='Hist plot of Months of Relationship')","05868635":"fig=go.Figure()\nfig.add_trace(go.Histogram(x=df_exist['Total_Relationship_Count'],name='Products held by existing customers',\n                           marker_color='#EB89B5',opacity=0.75))\nfig.add_trace(go.Histogram(x=df_churn['Total_Relationship_Count'],name='Products held by churned customers',\n                           marker_color='#330C73',opacity=0.75))\nfig.update_layout(title_text='Hist of total number of products held by two categories of customers',\n                  xaxis_title_text='Number of products',bargap=0.2,bargroupgap=0.1)\nfig.show()","1e52e4de":"numerical_cols=['Customer_Age','Months_on_book','Total_Relationship_Count', 'Months_Inactive_12_mon','Contacts_Count_12_mon', \n                'Credit_Limit', 'Total_Revolving_Bal','Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n                'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']","0f751402":"#Let's have a look at some numerical columns\ng=sns.pairplot(df[['Attrition_Flag','Credit_Limit','Total_Revolving_Bal','Avg_Open_To_Buy','Total_Trans_Amt',\n                   'Total_Ct_Chng_Q4_Q1','Avg_Utilization_Ratio']],hue='Attrition_Flag',diag_kind='hist')\ng.fig.set_size_inches(15,15);","119f00ed":"fig,axes=plt.subplots(2,2,figsize=(20,15))\nlist_of_columns=['Credit_Limit','Total_Revolving_Bal','Total_Ct_Chng_Q4_Q1','Avg_Utilization_Ratio']\nfor i in list_of_columns:           \n    sns.histplot(data=df,x=i,hue='Attrition_Flag',ax=axes[int(list_of_columns.index(i)\/2),int(list_of_columns.index(i)%2)],\n                palette='ocean');","76fe2ed4":"fig=px.histogram(df,x='Total_Trans_Amt',color='Card_Category')\nfig.show()","8852cd95":"fig=px.histogram(df,x='Total_Trans_Amt',color='Attrition_Flag',marginal='rug')\nfig.show()","9c3a444f":"df['Contacts_Count_12_mon'].unique()","2dc63403":"sns.catplot(x='Contacts_Count_12_mon',col='Attrition_Flag',data=df,kind='count',ci=None,saturation=5,palette='spring');","8205e1ca":"df_target=df.loc[df['Attrition_Flag']=='Attrited Customer']","0f0de016":"fig,axes=plt.subplots(4,3,figsize=(25,20))\nlist_of_columns=['Education_Level','Marital_Status','Income_Category','Card_Category','Months_on_book', \n                 'Months_Inactive_12_mon', 'Credit_Limit', 'Total_Revolving_Bal','Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n                 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1']\nfor i in list_of_columns:           \n    sns.histplot(data=df_target,x=i,ax=axes[int(list_of_columns.index(i)\/3),int(list_of_columns.index(i)%3)],color='green');","7a80bac6":"df.drop(['Gender','Dependent_count','Months_on_book','Marital_Status'],axis=1,inplace=True)","da7f0f99":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction import DictVectorizer as DV\n\ncat_cols=['Education_Level','Income_Category', 'Card_Category']\nencoder = DV(sparse = False)\ndf_cat=df[cat_cols]\ndf_cat = encoder.fit_transform(df_cat.T.to_dict().values())","51d8fda4":"df_cat_encoded=pd.DataFrame(df_cat,columns=encoder.get_feature_names())\ndf_cat_encoded.head()","3f768d7c":"#Encode target variable\ntarget_variable=pd.get_dummies(df['Attrition_Flag'])","f1b288f4":"target_variable.tail()","93b22387":"del numerical_cols[1]","3e45b3f3":"#Normalize numerical variables\nfrom sklearn.preprocessing import StandardScaler\n\n\nnum_variables=df[numerical_cols]\n#numerical columns without correlated columns:\nnum_variables.drop(['Avg_Open_To_Buy', 'Avg_Utilization_Ratio'],axis=1,inplace=True)\n\nscaler=StandardScaler()\nnormalize_num_variables=scaler.fit_transform(num_variables)\nnormalize_num_variables=pd.DataFrame(normalize_num_variables,columns=num_variables.columns)","e58ec0e0":"normalize_num_variables.head()","f26732e9":"from pandas.plotting import scatter_matrix\n\nlist_cols = ['Customer_Age', 'Credit_Limit', 'Total_Revolving_Bal','Total_Amt_Chng_Q4_Q1', \n             'Total_Trans_Amt','Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1']\nscatter_matrix(normalize_num_variables[list_cols], figsize=(20, 20))\nplt.show()","675c214e":"X=pd.concat([target_variable['Attrited Customer'],normalize_num_variables,df_cat_encoded],axis=1)\nX.head()","6cc597d6":"X.columns","36d924da":"y=X['Attrited Customer']\nX.drop(['Attrited Customer'],axis=1,inplace=True)","f8bd0f95":"from sklearn.model_selection import train_test_split\n\n(X_train, X_test,y_train, y_test) = train_test_split(X, y,stratify=y,test_size=0.3, random_state=0)","6fe30fc0":"print(X_train.shape)\nprint(X_test.shape)","3214aed5":"print(y_train.shape)\nprint(y_test.shape)","2ac820bd":"from sklearn.metrics import accuracy_score, recall_score, roc_curve, roc_auc_score, precision_score, confusion_matrix","b2f85661":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid={'C':np.linspace(0.1,10,20)}\ncv=5\n\nestimator=LogisticRegression(penalty='l1',class_weight='balanced',fit_intercept=True,max_iter=100,solver='liblinear')\ngrid_balanced=GridSearchCV(estimator,param_grid,cv=cv)\ngrid_balanced.fit(X_train,y_train)","4031e6fe":"grid_balanced.best_estimator_","43b54813":"grid_balanced.best_estimator_.coef_","363256cf":"y_pred=grid_balanced.best_estimator_.predict(X_test)","744a6a34":"y_pred_proba=grid_balanced.best_estimator_.predict_proba(X_test)[:,1]\nroc_auc_score(y_test,y_pred_proba)","d9d03f6f":"accuracy_score(y_test,y_pred)","08bc2383":"recall_score(y_test,y_pred)","58c43b92":"precision_score(y_test,y_pred)","45d2a74b":"confusion_matrix(y_test,y_pred)","84cbd664":"def roc_auc_curve_with_thr(y_test,y_pred_proba):  \n    fpr,tpr,treshold=roc_curve(y_test,y_pred_proba)\n    fpr,tpr=fpr.reshape(len(fpr),1),tpr.reshape(len(tpr),1)\n\n    plt.figure(figsize=(8,6))\n    plt.plot(fpr, tpr)\n    plt.title('ROC curve')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate') \n    return plt.show()","fd931060":"roc_auc_curve_with_thr(y_test,y_pred_proba)","493a484d":"import xgboost as xgb","7ee78e93":"for i in np.linspace(10,100,10):\n    clf=xgb.XGBClassifier(verbosity=0,use_label_encoder=False,scale_pos_weight=i)\n    clf.fit(X_train,y_train)\n    y_pred_clf=clf.predict(X_test)\n    y_pred_proba_clf=clf.predict_proba(X_test)[:,1]\n    print('Scale weights: ',i,'Recall score: ',recall_score(y_test,y_pred_clf),'Precision score: ',\n          precision_score(y_test,y_pred_clf),'Roc auc score: ',roc_auc_score(y_test,y_pred_clf))","21a7d392":"#Train the best model\nclf=xgb.XGBClassifier(verbosity=0,use_label_encoder=False,scale_pos_weight=60)\nclf.fit(X_train,y_train)\ny_pred_clf=clf.predict(X_test)\ny_pred_proba_clf=clf.predict_proba(X_test)[:,1]","8c7a7e0d":"recall_score(y_test,y_pred_clf)","e9acecf2":"precision_score(y_test,y_pred_clf)","ace35720":"roc_auc_score(y_test,y_pred_clf)","f85dce7c":"confusion_matrix(y_test,y_pred_clf)","61060b05":"roc_auc_curve_with_thr(y_test,y_pred_proba_clf)","788cf2cd":"#Feature importances\nfrom xgboost import plot_importance\nfig, ax = plt.subplots(figsize=(12, 15))\nplot_importance(clf,ax=ax);","4ca5703f":"### XGBoost","4ab56450":"[Description of columns is here](https:\/\/www.kaggle.com\/sakshigoyal7\/credit-card-customers)","dcfd36dc":"The task is to predict churned customers","6363aa33":"### What are the people who churned?  ","0dcc2c1a":"### Train\/Test split ","37365163":"### Logistic Regression","ac357868":"We will remove the columns that don't affect a target variable ","ebdfa3b7":"### Months of relationship ","7f4e1f0c":"Churn probability doesn't depend on education level","4648e4da":"## Credit Card Churners ","4279dd34":"### Feature Engineering ","969663a4":"### Contacts count","2b3375d6":"### Education level","5dd59da2":"### EDA","e30578cb":"Results: \n1. Dataset is unbalanced   \n2. The largest count of clients have an age of approximately 50 years\n3. The number of men and women is almost equal (~50% of each group)\n4. Customers often have 2-3 dependents\n5. Many clients are graduated from the universities or from a high school. So there is 'unknown' education in the dataset  \n6. The prevailing number of clients have Blue card\n7. Many customers have income less than $40K\n8. Credit limit is highly correlated with Average Utilization Ratio and Average Open to Buy a Credit Line is correlated with Credit Line \n9. Clients leave after 3 years of relationship","4915d454":"### Total number of products held","facd8c60":"No missing values are found","9b7b66f5":"### Card category and income level","73f7f21e":"So, this feature isn't very predictive. But the tails of existing customers have more values. Aged people don't tend to leave","4a0db03b":"### Age","8a265fd0":"In each card category there are all income levels","f2f56637":"#### More accurate histograms","49fe6501":"### Total Transaction Amount (last 12 months)","6c3b5bc3":"### All numerical features ","a256dd1d":"### Dependent count","5ea85bd9":"The distribution of cards between existing and churned customers is equal","72f779ee":"### Transformation of categorical features ","97753d86":"Results:\n1. When credit limit is high, clients tend to remain\n2. The more client spends, the more likely that he\/she will remain\n3. If a person does not keep a lot of money in the account the probability of his\/her leave will increase "}}