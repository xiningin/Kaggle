{"cell_type":{"ebf37ebf":"code","a465a49c":"code","8ea4c616":"code","48b6360b":"code","fcee3d47":"code","3d7219ea":"code","b7edd185":"code","cd74d6dc":"code","9eb133c5":"code","9135ec66":"code","228aef20":"code","6d08080a":"code","02e68c0d":"code","4bd327bb":"code","a4f0e6d0":"code","387d1862":"code","030ff769":"code","7e4dd567":"markdown"},"source":{"ebf37ebf":"%matplotlib inline\nimport datetime\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\nimport lightgbm as lgb\nfrom sklearn.neighbors import NearestNeighbors\n\ndef root_mean_squared_error(t,p):\n    return np.sqrt(mean_squared_error(t,p))","a465a49c":"train_raw = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"Date\"])\ntrain_raw.set_index(\"Date\", inplace=True)\n\ntest = pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"Date\"])\ntest.set_index(\"Date\", inplace=True)\n\nn_hexagons = 319","8ea4c616":"def get_date_features(df):\n    \"\"\"Add new features to dataframe\"\"\"\n    \n    df['dayofweek'] = df.index.map(lambda x: x.dayofweek) \n    df['is_weekend'] = df.index.map(lambda x: x.dayofweek \/\/ 5)\n    df['day'] = df.index.map(lambda x: x.day)\n    df['week'] = df.index.map(lambda x: x.week)\n    df['hour'] = df.index.map(lambda x: x.hour)\n\n    return df\n\ndef get_holidays(df):\n    holidays = pd.read_csv('..\/input\/public_holidays.csv', parse_dates=['date']).date\n    df['is_holiday'] = np.isin(df.index.date, holidays.dt.date)\n    \n    return df","48b6360b":"data = pd.concat([train_raw, test])\n\nlags = [31, 60, 90, 180, 360]\ncolumns = [x for x in data.columns if 'hex' in x]\nfeatures = []\n\nfor lag in tqdm(lags):\n    feat = data[columns].rolling(window=(lag * 3)).mean().shift(lag * 3 + 1)\n    feat.rename(columns={x: x + f'_lag_{lag}' for x in columns}, inplace=True)\n    features.append(feat)\nfeatures = pd.concat(features, axis=1)\n","fcee3d47":"train_raw = train_raw.reset_index()\ntrain_raw = pd.melt(train_raw, id_vars=['Date'])\ntrain_raw.rename(columns={'variable': 'hex', 'value': 'target'}, inplace=True)\ntrain_raw['hex'] = train_raw.hex.map(lambda x: int(x[4:]))\ntrain_raw.set_index('Date', inplace=True)\n\ntest = test.reset_index()\ntest = pd.melt(test, id_vars=['Date'])\ntest.rename(columns={'variable': 'hex', 'value': 'target'}, inplace=True)\ntest['hex'] = test.hex.map(lambda x: int(x[4:]))\ntest.set_index('Date', inplace=True)","3d7219ea":"train_raw = get_date_features(train_raw)\ntrain_raw = get_holidays(train_raw)\n\ntest = get_date_features(test)\ntest = get_holidays(test)","b7edd185":"reduced_train = []\nreduced_test = []\n\nknn_data = pd.read_csv('..\/input\/hexagon_centers.csv')\nnbrs = NearestNeighbors(n_neighbors=7, algorithm='ball_tree').fit(knn_data[['latitude', 'longitude']].values)  # 1 (hex itself) + 6 (neighobors)\ndistances, indices = nbrs.kneighbors(knn_data[['latitude', 'longitude']].values)\n\ndef reduce_n_regions(df, i):\n    # Get relvelant features for 7 nearest hexagons\n    cols = [x for x in df.columns if not x.startswith('hex_') or int(x[4:7]) in indices[i]] \n    df = hex_df[cols].copy()\n    \n    # Rename features: ord_0 (1st neasrest hex), ord_1 (2nd neasrest hex), ...\n    df.rename(columns={x: f'ord_{np.where(indices[i] == int(x[4:7]))[0][0]}' + x[7:] \n                       for x in df.columns if x.startswith('hex_')}, inplace=True)\n    \n    return df\n\nfor i in tqdm(range(n_hexagons)):\n    hex_df = train_raw[train_raw['hex'] == i].join(features)\n    reduced_train.append(reduce_n_regions(hex_df, i))\n    \n    hex_df = test[test['hex'] == i].join(features)\n    reduced_test.append(reduce_n_regions(hex_df, i))\n\ndel train_raw, test","cd74d6dc":"import gc\ngc.collect()","9eb133c5":"train_raw = pd.concat(reduced_train, sort=True)\ntest = pd.concat(reduced_test, sort=True)","9135ec66":"start = datetime.datetime(2017,1, 1)\nsplit_date = datetime.datetime(2018,10, 31)\n\nval_true = train_raw[train_raw.index >= split_date]\ntrain = train_raw[(train_raw.index >= start) & (train_raw.index < split_date)]","228aef20":"features = [x for x in train.columns if x not in ['target']]\ntrn_data = lgb.Dataset(train[features], label=train['target'])\nval_data = lgb.Dataset(val_true[features], label=val_true['target'])\n\n\nparams = {\n    'objective': 'regression',\n    'metric': 'rmse',\n    'seed': 0xCAFFE,\n    \n    'boosting': 'gbdt',\n    'num_iterations': 1000,\n    'early_stopping_round': 50,\n    \n    'max_depth': -1,\n    'num_leaves': 31,\n    \n    'verbosity': 50,\n}\n\nclf = lgb.train(\n    params, trn_data,\n    valid_sets=[trn_data, val_data],\n    verbose_eval=1,\n)","6d08080a":"predictions = clf.predict(test[features], num_iteration=clf.best_iteration)","02e68c0d":"submission  = pd.DataFrame({\n    'hex': test.hex,\n    'Incidents': predictions\n}).reset_index()","4bd327bb":"submission.head()","a4f0e6d0":"final = []\nfor i, row in tqdm(submission.iterrows(), total=submission.shape[0]):\n    final.append({\n        'id': row.Date.strftime(\"%Y-%m-%d %X\") + '_hex_%03d' % row.hex,\n        'Incidents': row.Incidents,\n    })\nfinal = pd.DataFrame.from_dict(final)","387d1862":"final.head()","030ff769":"final.to_csv(\"submission.csv\", index=False)","7e4dd567":"Cluster all hexagons. Get features for 7 nearest hexagons to reduce memory footprint. "}}