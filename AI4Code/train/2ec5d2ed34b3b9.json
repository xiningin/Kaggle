{"cell_type":{"8ba609e7":"code","4bac28cf":"code","c787cf6c":"code","cf9aa5d7":"code","9430853d":"code","d4957ea8":"code","1eb21dad":"code","62b14cff":"code","fdfc8888":"code","31bf1aa8":"code","561d1891":"code","a13b6e49":"code","8baf9536":"code","a935e436":"code","1749edc3":"code","b0de803b":"code","6b6ed772":"code","8b23c1bd":"code","3eb33687":"code","fe141743":"code","35467ab4":"code","59698b3b":"code","f3a0d1e9":"code","d501a382":"code","a834df5c":"code","fd77aaa3":"code","75349885":"code","920e52be":"code","0b7fc83a":"code","c8eed853":"code","b19c8f2a":"code","f064b351":"code","7533dfb8":"markdown","56de3d13":"markdown","430601a7":"markdown","84a2b4f1":"markdown","37ce7810":"markdown","f173a943":"markdown","b43d554c":"markdown","295cdb85":"markdown","4d278fa1":"markdown","eeb6812d":"markdown","50b9a06d":"markdown","18b57ebd":"markdown","4394731f":"markdown","a1a16b3d":"markdown","0a607c7a":"markdown","47945cf7":"markdown","45cd0b62":"markdown","610dbea2":"markdown","8d287cfd":"markdown","2ad73cf9":"markdown"},"source":{"8ba609e7":"import datetime\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npd.options.display.float_format = '{:,.2f}'.format","4bac28cf":"df_general = pd.read_csv(\"..\/input\/olist_public_dataset.csv\")\ndf_general.columns","c787cf6c":"# Count order_aproved_at\ndf_general.groupby(\"order_aproved_at\").size().reset_index(name='count').sort_values(\"count\", ascending=False)","cf9aa5d7":"df_general[df_general[\"order_aproved_at\"] == \"2017-01-27 03:05:27.454387\"]\\\n[[\"order_aproved_at\", \"order_delivered_customer_date\"]]","9430853d":"# Now I will remove the duplicate orders\n\ndf_general.drop_duplicates(subset=\"order_aproved_at\", inplace=True)\ndf_general.count()","d4957ea8":"# Select columns\n\ndf = df_general[[\"order_purchase_timestamp\", \n         \"order_estimated_delivery_date\",\n         \"order_delivered_customer_date\",\n         \"customer_state\"]]\n\ndf.head()","1eb21dad":"# Removing rows with null values\n\ndf.dropna(inplace=True)\ndf.info()","62b14cff":"df['date_purchase'] = pd.to_datetime(df[\"order_purchase_timestamp\"])\ndf['date_estimated'] = pd.to_datetime(df['order_estimated_delivery_date'])\ndf['date_delivered'] = pd.to_datetime(df['order_delivered_customer_date'])\ndf.info()","fdfc8888":"# days to be delivered\ndf['delta_purch_delivered'] = (df['date_delivered'] - df['date_purchase']).dt.days\n# estimated delivery days\ndf['delta_est_delivered'] = (df['date_estimated'] - df['date_purchase']).dt.days\n\ndf.head()","31bf1aa8":"# Histogram - estimated delivery days\ndf['delta_est_delivered'].plot.hist(grid=True, bins=df['delta_est_delivered'].max(), figsize = (8,8))\nplt.title('Histogram - days estimated to deliver')\nplt.xlabel('Days')\nplt.ylabel('Cases')\nplt.grid(axis='y')\navg = df['delta_est_delivered'].mean()\nstd = df['delta_est_delivered'].std()\nplt.text(100, 6000, r'$\\mu={:,.2f}, \\sigma={:,.2f}$'.format(avg, std))\nplt.show()\n\n# Histogram - days to deliver\ndf['delta_purch_delivered'].plot.hist(grid=True, bins=df['delta_purch_delivered'].max(), color='#ff0000', figsize = (8, 8))\nplt.title('Histogram - days to deliver')\nplt.xlabel('Days')\nplt.ylabel('Cases')\navg = df['delta_purch_delivered'].mean()\nstd = df['delta_purch_delivered'].std()\nplt.text(150, 6000, r'$\\mu={:,.2f}, \\sigma={:,.2f}$'.format(avg, std))\nplt.grid(axis='y')\nplt.show()","561d1891":"df.boxplot(column=['delta_est_delivered', 'delta_purch_delivered'], by='customer_state', figsize = (25,10), showfliers=False)\nplt.show()","a13b6e49":"# zoom in RJ\ndf[df[\"customer_state\"] == \"RJ\"].boxplot(column=['delta_est_delivered', 'delta_purch_delivered'], by='customer_state', figsize = (25,10), showfliers=False)\nplt.show()","8baf9536":"df[\"delayed\"] = (df['date_estimated'] - df['date_delivered']).dt.days\n\ndf_count_delay = df[df[\"delayed\"] < 0].groupby(['customer_state'], as_index=False)[\"delayed\"].count()\ndf_total = df.groupby(['customer_state'], as_index=False)[\"delayed\"].count()\n\ndf_total = df_count_delay.merge(df_total, on='customer_state')\ndf_total.rename(columns={'delayed_y': 'total_orders'}, inplace=True)\n\ndf_total[\"%\"] = (df_total[\"delayed_x\"] \/ df_total[\"total_orders\"]) * 100\ndf_total.sort_values(by=\"%\", ascending=False)","a935e436":"# Statistics measures\n\ndf_state = df[[\"delta_purch_delivered\", \"delta_est_delivered\", \"customer_state\"]]\ndf_measures = df_state.groupby(['customer_state'], as_index=False).agg(['mean','std', 'var'])\n\ndf_measures.head()","1749edc3":"# The value in 2 standard deviations\ndf_measures['2std'] = df_measures[\"delta_purch_delivered\"][\"mean\"] + (df_measures[\"delta_purch_delivered\"][\"std\"]*2)\n\n# The difference between the 2 standard deviations and the mean of estimated days delivered\ndf_measures['delta_std_mean_estimated'] = df_measures['2std'] -  df_measures[\"delta_est_delivered\"][\"mean\"]","b0de803b":"df_measures.sort_values(\"delta_std_mean_estimated\", ascending=False)","6b6ed772":"df_merge = df_measures[\"2std\"].reset_index(level=0) \\\n.merge(df_measures[\"delta_std_mean_estimated\"].reset_index(level=0), on=\"customer_state\")\\\n.merge(df_total, on=\"customer_state\").sort_values(\"%\", ascending=False)\n\ndf_merge","8b23c1bd":"# Show the behavior of delayed orders in each state\n\nfig, ax = plt.subplots(figsize=(15,7))\ndf[(df[\"delayed\"] < 0) & (df[\"customer_state\"] == \"RJ\")].groupby([df.date_purchase.dt.year, df.date_purchase.dt.month])[\"delayed\"].count().plot(ax=ax)\nplt.title('Quantity orders delayed - RJ')\nplt.show()\n\nfig, ax = plt.subplots(figsize=(15,7))\ndf[(df[\"delayed\"] < 0) & (df[\"customer_state\"] == \"MA\")].groupby([df.date_purchase.dt.year, df.date_purchase.dt.month])[\"delayed\"].count().plot(ax=ax)\nplt.title('Quantity orders delayed - MA')\nplt.show()\n\nfig, ax = plt.subplots(figsize=(15,7))\ndf[(df[\"delayed\"] < 0) & (df[\"customer_state\"] == \"BA\")].groupby([df.date_purchase.dt.year, df.date_purchase.dt.month])[\"delayed\"].count().plot(ax=ax)\nplt.title('Quantity orders delayed - BA')\nplt.show()\n\n","3eb33687":"# I will add others variables to create a new dataset \n\ndf = df_general[[\"order_purchase_timestamp\", \n         \"order_estimated_delivery_date\",\n         \"order_delivered_customer_date\",\n         \"customer_state\",\n         \"review_comment_message\",\n        \"review_score\",\n        \"product_category_name\",\n        \"order_freight_value\"]]\n\ndf.dropna(inplace=True)\n\ndf['date_purchase'] = pd.to_datetime(df[\"order_purchase_timestamp\"])\ndf['date_estimated'] = pd.to_datetime(df['order_estimated_delivery_date'])\ndf['date_delivered'] = pd.to_datetime(df['order_delivered_customer_date'])\n\ndf = df[(df[\"customer_state\"] == \"RJ\") | \\\n         (df[\"customer_state\"] == \"MA\") | \\\n         (df[\"customer_state\"] == \"BA\")]\n\ndf['delta_purch_delivered'] = (df['date_delivered'] - df['date_purchase']).dt.days\ndf['delta_est_delivered'] = (df['date_estimated'] - df['date_purchase']).dt.days\ndf[\"delayed\"] = (df['date_estimated'] - df['date_delivered']).dt.days \n\ndf.head()","fe141743":"serie_march18 = df[(df[\"date_delivered\"] >= datetime.date(2018,3,1)) \\\n                & (df[\"date_delivered\"] <= datetime.date(2018,3,31))][\"review_score\"]\n\nserie_march17 = df[(df[\"date_delivered\"] >= datetime.date(2017,3,1)) \\\n                & (df[\"date_delivered\"] <= datetime.date(2017,3,31))][\"review_score\"]","35467ab4":"plt.title('Histogram - Review Score March 2017')\nserie_march17.plot.hist(grid=True, figsize = (8,8))\nplt.xlabel('Review Score')\navg = serie_march17.mean()\nstd = serie_march17.std()\nplt.text(3, 150, r'$\\mu={:,.2f},\\ \\sigma={:,.2f}$'.format(avg, std))\nplt.show()\n\nplt.title('Histogram - Review Score March 2018')\nserie_march18.plot.hist(grid=True, figsize = (8,8))\nplt.xlabel('Review Score')\navg = serie_march18.mean()\nstd = serie_march18.std()\nplt.text(3, 150, r'$\\mu={:,.2f},\\ \\sigma={:,.2f}$'.format(avg, std))\nplt.show()","59698b3b":"df.loc[df.customer_state == 'RJ', '2std'] = df[\"date_purchase\"]+datetime.timedelta(38)\ndf.loc[df.customer_state == 'MA', '2std'] = df[\"date_purchase\"]+datetime.timedelta(41)\ndf.loc[df.customer_state == 'BA', '2std'] = df[\"date_purchase\"]+datetime.timedelta(42)\n\ndf[\"2std\"] = pd.to_datetime(df[\"2std\"])","f3a0d1e9":"df[\"delayed_estimated\"] = (df['2std'] - df['date_delivered']).dt.days","d501a382":"# Amount of delayed orders with real estimate\n\ndf[df[\"delayed\"] < 0]\\\n                .groupby(['customer_state'], as_index=False)[\"delayed\"]\\\n                .count().sort_values(by=\"delayed\", ascending=False)","a834df5c":"# Amount of delayed orders with new estimate\n\ndf[df[\"delayed_estimated\"] < 0]\\\n                .groupby(['customer_state'], as_index=False)[\"delayed_estimated\"]\\\n                .count().sort_values(by=\"delayed_estimated\", ascending=False)","fd77aaa3":"# Comparing\n\nfig, ax = plt.subplots(figsize=(15,7))\ndf[(df[\"delayed_estimated\"] < 0) & (df[\"customer_state\"] == \"RJ\")].groupby([df.date_purchase.dt.year, df.date_purchase.dt.month])[\"delayed_estimated\"].count().plot(ax=ax, linestyle='--', label=\"Estimated 2std\")\ndf[(df[\"delayed\"] < 0) & (df[\"customer_state\"] == \"RJ\")].groupby([df.date_purchase.dt.year, df.date_purchase.dt.month])[\"delayed\"].count().plot(ax=ax, label=\"Real\")\nplt.title('Quantity orders delayed - RJ')\nplt.legend()\n\nplt.show()","75349885":"# Amount of delayed orders with real estimate in march\/2018\n\ndf[(df[\"delayed\"] < 0) & (df[\"date_purchase\"] >= datetime.date(2018,3,1)) \\\n                & (df[\"date_purchase\"] <= datetime.date(2018,3,31))] \\\n                .groupby(['customer_state'], as_index=False)[\"delayed\"]\\\n                .count().sort_values(by=\"delayed\", ascending=False)","920e52be":"# Amount of delayed orders with new estimate in march\/2018\n\ndf[(df[\"delayed_estimated\"] < 0) & (df[\"date_purchase\"] >= datetime.date(2018,3,1)) \\\n                & (df[\"date_purchase\"] <= datetime.date(2018,3,31))] \\\n                .groupby(['customer_state'], as_index=False)[\"delayed_estimated\"]\\\n                .count().sort_values(by=\"delayed_estimated\", ascending=False)","0b7fc83a":"text = \"Reduced in march 2018 {:,.2f}% in {}\"\n\nprint(text.format(((201-116)\/201)*100, \"RJ\"))\nprint(text.format(((56-10)\/56)*100, \"BA\"))\nprint(text.format(((19-4)\/19)*100, \"MA\"))","c8eed853":"df[(df[\"delayed\"] < 0) & (df[\"date_purchase\"] >= datetime.date(2018,3,1)) \\\n                & (df[\"date_purchase\"] <= datetime.date(2018,3,31))] \\\n                .groupby(['customer_state'], as_index=False)[\"order_freight_value\"]\\\n                .sum().sort_values(by=\"order_freight_value\", ascending=False)","b19c8f2a":"# Appling new estimate method\n\ndf[(df[\"delayed_estimated\"] < 0) & (df[\"date_purchase\"] >= datetime.date(2018,3,1)) \\\n                & (df[\"date_purchase\"] <= datetime.date(2018,3,31))] \\\n                .groupby(['customer_state'], as_index=False)[\"order_freight_value\"]\\\n                .sum().sort_values(by=\"order_freight_value\", ascending=False)","f064b351":"print(\"The company would not have lost R$ {} in RJ, MA and BA\".format((5029 + 1901 + 681) - (3147+301+184)))","7533dfb8":"If the company refund the freight cost in march\/2018:","56de3d13":"Get a sample to confirm, and notice that the date of order delivered is the same for 9 rows, that means, it is just an order","430601a7":"Calculate if the order it's delayed with the new estimate","84a2b4f1":"Show the columns in dataset","37ce7810":"There is only one line,** worked!**","f173a943":"Note that some states boxplots intersect","b43d554c":"Increasing the estimate day to deliver with 2 standard deviations","295cdb85":" Some orders can be delayed in RJ, we will check this by counting how many orders were delayed by state","4d278fa1":"Assuming the distribution will be normal, we will check if estimated time can be improved using statiscs measures","eeb6812d":"There are difference between the two histograns, in general the estimated days seens larger than days to deliver.\n<br>Create boxplot by state without outliers to check the behavior in each state","50b9a06d":"<h1>A simple analysis of delayed orders<\/h1>\nSchedule:\n<br>1 - Clear the date removing duplicate orders\n<br>2 - Compare estimated days to deliver and real days to deliver\n<br>3 - Analysis for each state\n<br>4 - Estimate the mean, standard deviation and variance\n<br>5 - Check the critical states\n<br>6 - Check the behavior in months\n<br>7 - Using the std, analysis with new estimated days\n<br>8 - Conclusion","18b57ebd":"<h3>**Conclusion:** these estimated days can be used when the company knows that there will be some problems like in March \/ 2018 to avoid some losses and frustrations on their customers.<h3>","4394731f":"For the next steps I chose RJ, MA and BA because the percentage of delay it's high and the variance indicate\nthat there are not much dispersion in data.","a1a16b3d":"Transform into date variables in datetimes type","0a607c7a":"<h3>Analysing the critical states<\/h3>","47945cf7":"Calculate the difference between the variables in days","45cd0b62":"First thing to do is **remove duplicates lines** to the same purchase; \nI will do this assuming that the order_aproved_at it's the same for the same orders, let's check if it's true:\n","610dbea2":"Compare march\/2018 with march\/2017","8d287cfd":"There is evidence that in March \/ 2018 and November \/ 2017 something happened affected the deliveries RJ, MA and BA","2ad73cf9":"Merging table df_total with df_mesures to identify which are the **critical** states with delayed"}}