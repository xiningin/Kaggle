{"cell_type":{"23b72245":"code","aacb6f04":"code","9e92d20a":"code","58a59b6f":"code","5808e7ff":"code","7e14b8d3":"code","03f20e2d":"code","06eb8a5a":"code","894dd81d":"code","014b9f4a":"code","2a18cb31":"code","7f203aa3":"code","a57febf5":"code","d949a5a3":"code","0a21c771":"code","8cb2eb43":"code","00bd9194":"code","c7196019":"code","44be459c":"code","88efd79e":"code","b1f3269a":"code","4df25bca":"code","6c3e4acc":"code","781309fa":"code","34f7ef04":"code","c37b74ed":"code","c858d035":"markdown","5e65f04d":"markdown"},"source":{"23b72245":"from PIL import Image\nfrom skimage.io import imread\nfrom skimage.transform import rescale, resize\nimport os\nimport glob\nimport string\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import applications\nimport keras\nfrom tensorflow.keras.layers import Dense, Activation, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn\nimport shutil\nimport random\nimport cv2","aacb6f04":"#Creation of a CNN . Sequential Model\n\nmodel = Sequential()\n#input_shape matches our input image\nmodel.add(Conv2D(64, (3,3), input_shape=(224, 224, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Dense(4)) #data of four types\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss= keras.losses.categorical_crossentropy, \n              optimizer= Adam(),metrics=['accuracy'])","9e92d20a":"model.summary()","58a59b6f":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n        \n        rotation_range=90, \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1,  \n        horizontal_flip=True,  \n        vertical_flip=True,\n        rescale = 1.\/255,\n        validation_split = 0.2\n        )  \n","5808e7ff":"\ntest_datagen = ImageDataGenerator(rescale = 1.\/255 )","7e14b8d3":"# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","03f20e2d":"train_path = '\/kaggle\/input\/mechanical-parts-data\/dataset\/training'\ntest_path = '\/kaggle\/input\/mechanical-parts-data\/dataset\/testing'","06eb8a5a":"# # Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory(train_path,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical',\n                                            subset = 'training',\n                                            shuffle = True)","894dd81d":"val_set = train_datagen.flow_from_directory(train_path,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical',\n                                            subset = 'validation',\n                                            shuffle = True)","014b9f4a":"test_set = test_datagen.flow_from_directory(test_path,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical',\n                                            shuffle = True)","2a18cb31":"history = model.fit(\n  training_set,\n  validation_data= test_set,\n  epochs= 3,\n  shuffle = True,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set)\n  \n)","7f203aa3":"model.evaluate(test_set)","a57febf5":"model.save('mech2.h5')","d949a5a3":"#history.history","0a21c771":"loss_train = history.history['loss']\nloss_val = history.history['val_loss']\n#epochs = range(1,no_epochs+1)\nplt.plot( loss_train, 'g', label='Training loss')\nplt.plot( loss_val, 'b', label='validation loss')\nplt.title('Training and Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nplt.savefig('train-val loss')","8cb2eb43":"loss_train = history.history['accuracy']\nloss_val = history.history['val_accuracy']\n#epochs = range(1,no_epochs+1)\nplt.plot( loss_train, 'g', label='Training Accuracy')\nplt.plot( loss_val, 'b', label='validation Accuracy')\nplt.title('Training and Validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\nplt.savefig('train-val-accuracy')","00bd9194":"#Load the model \n\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.preprocessing import image\nimport numpy as np\n\n#Loading our Model\nmodel = load_model('.\/mech2.h5')","c7196019":"import os \nimport random \nimport cv2\nimport matplotlib.pyplot as plt\nimport glob\n%matplotlib inline \n\ntest_path = '\/kaggle\/input\/mechanical-parts-data\/dataset\/testing'\n\nlist = glob.glob(test_path +'\/*')\n\npath =  random.choice(list) \npic = random.choice(glob.glob(path + '\/*'))\n\npict =  cv2.imread(pic)\nplt.imshow(pict)\nplt.title(pic)","44be459c":"img=image.load_img(pic,target_size=(224,224))\nx=image.img_to_array(img)\nx","88efd79e":"x=x\/255\nprint(x)","b1f3269a":"x.shape","4df25bca":"\nx=np.expand_dims(x,axis=0)\nx.shape","6c3e4acc":"model.predict(x)","781309fa":"a=np.argmax(model.predict(x))","34f7ef04":"a","c37b74ed":"if(a==0):\n    plt.imshow(img)\n    plt.title('Bolt')\nelif(a == 1):\n    plt.imshow(img)\n    plt.title('Locating Pin')\n    \nelif(a==2):\n    plt.imshow(img)\n    plt.title('Nut')\n\nelif(a==3):\n    plt.imshow(img)\n    plt.title('Washer')","c858d035":"# Sequential","5e65f04d":"Prediction\n"}}