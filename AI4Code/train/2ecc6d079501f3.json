{"cell_type":{"623010b4":"code","f2d2a009":"code","5220f125":"code","333ea3ff":"code","d536cfcb":"code","c6b4147c":"code","60dabf62":"code","ca4e985f":"code","308fcab3":"code","6fb92afd":"code","7fdba336":"code","22d989b6":"code","aa627c55":"code","e90bbb32":"code","adc90fa4":"code","81db1f53":"code","81af3d38":"code","898b48b4":"code","9bbbc455":"code","01287876":"code","ea0519ea":"code","cff3b9fa":"code","1b1bee75":"code","1e8721b7":"code","30b3aada":"code","ba9b85f4":"code","653583b9":"code","2bce39e3":"code","f08b06cc":"code","125f1dae":"code","63d9b66c":"code","2dcee9d6":"code","6e383857":"code","73fe84c0":"code","92594901":"code","ce29d38d":"code","e719c607":"code","7839c811":"markdown","c156a3fc":"markdown","47b5c736":"markdown","beac7271":"markdown","53d7b14a":"markdown","a0377efe":"markdown","f911cfbe":"markdown","aefeaa37":"markdown","1a76da0a":"markdown"},"source":{"623010b4":"import pandas as pd\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","f2d2a009":"dataset = load_iris()\ndf = pd.DataFrame(dataset.data, columns=dataset.feature_names)\ndf","5220f125":"df['target'] = dataset.target\ndf.target = df.target.map({0:'setosa',1:'versicolor',2:'virginica'})\ndf.head()","333ea3ff":"setosa_df = df[df.target == 'setosa']\nversicolor_df = df[df.target == 'versicolor']\nvirginica_df = df[df.target == 'virginica']","d536cfcb":"ax = setosa_df['sepal length (cm)'].plot(kind='hist')\nsetosa_df['sepal length (cm)'].plot(kind='kde',ax=ax,\n                                   secondary_y = True,\n                                   title='setosa sepal length (cm) distribution',\n                                   figsize = (8,4))\n","c6b4147c":"ax = versicolor_df['sepal length (cm)'].plot(kind='hist')\nversicolor_df['sepal length (cm)'].plot(kind='kde',ax=ax,\n                                   secondary_y = True,\n                                   title='versicolor sepal length (cm) distribution',\n                                   figsize = (8,4))\n","60dabf62":"ax = virginica_df['sepal length (cm)'].plot(kind='hist')\nvirginica_df['sepal length (cm)'].plot(kind='kde',ax=ax,\n                                   secondary_y = True,\n                                   title='virginica sepal length (cm) distribution',\n                                   figsize = (8,4))","ca4e985f":"X_train,X_test,y_train,y_test = train_test_split(dataset.data,dataset.target,test_size=0.2)","308fcab3":"model = GaussianNB()\nmodel.fit (X_train,y_train)","6fb92afd":"expected = y_test\npredicted = model.predict(X_test)\nprint(metrics.classification_report(y_test,predicted))","7fdba336":"accuracy_score(y_test,predicted)","22d989b6":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.metrics import accuracy_score","aa627c55":"email_list = [\n                {'email title': 'free game only today', 'spam': True},\n                {'email title': 'cheapest flight deal', 'spam': True},\n                {'email title': 'limited time offer only today only today', 'spam': True},\n                {'email title': 'today meeting schedule', 'spam': False},\n                {'email title': 'your flight schedule attached', 'spam': False},\n                {'email title': 'your credit card statement', 'spam': False}\n             ]\ndf = pd.DataFrame(email_list)","e90bbb32":"df","adc90fa4":"df['label'] = df['spam'].map({True:1,False:0})","81db1f53":"df","81af3d38":"df_x = df['email title']\ndf_y = df['label']","898b48b4":"# CountVectorizer change to fixing vector from all words in specific data\ncv = CountVectorizer(binary = True)\nx_traincv = cv.fit_transform(df_x)\n","9bbbc455":"encoded_input = x_traincv.toarray()\nencoded_input","01287876":"# if you want to check which words in vector\ncv.inverse_transform(encoded_input[0])","ea0519ea":"cv.get_feature_names()","cff3b9fa":"bnb = BernoulliNB()\ny_train = df_y.astype('int')\nbnb.fit(x_traincv,y_train)","1b1bee75":"# make data for test\ntest_email_list = [\n                {'email title': 'free flight offer', 'spam': True},\n                {'email title': 'hey traveler free flight deal', 'spam': True},\n                {'email title': 'limited free game offer', 'spam': True},\n                {'email title': 'today flight schedule', 'spam': False},\n                {'email title': 'your credit card attached', 'spam': False},\n                {'email title': 'free credit card offer only today', 'spam': False}\n             ]\ntest_df = pd.DataFrame(test_email_list)\ntest_df['label'] = test_df['spam'].map({True:1,False:0})\ntest_x=test_df[\"email title\"]\ntest_y=test_df[\"label\"]\nx_testcv=cv.transform(test_x)","1e8721b7":"predictions=bnb.predict(x_testcv)","30b3aada":"accuracy_score(test_y, predictions)","ba9b85f4":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score","653583b9":"review_list = [\n                {'movie_review': 'this is great great movie. I will watch again', 'type': 'positive'},\n                {'movie_review': 'I like this movie', 'type': 'positive'},\n                {'movie_review': 'amazing movie in this year', 'type': 'positive'},\n                {'movie_review': 'cool my boyfriend also said the movie is cool', 'type': 'positive'},\n                {'movie_review': 'awesome of the awesome movie ever', 'type': 'positive'},\n                {'movie_review': 'shame I wasted money and time', 'type': 'negative'},\n                {'movie_review': 'regret on this move. I will never never what movie from this director', 'type': 'negative'},\n                {'movie_review': 'I do not like this movie', 'type': 'negative'},\n                {'movie_review': 'I do not like actors in this movie', 'type': 'negative'},\n                {'movie_review': 'boring boring sleeping movie', 'type': 'negative'}\n             ]\ndf = pd.DataFrame(review_list)\ndf","2bce39e3":"\ndf['label'] = df['type'].map({\"positive\":1,\"negative\":0})\ndf","f08b06cc":"\ndf_x=df[\"movie_review\"]\ndf_y=df[\"label\"]","125f1dae":"cv = CountVectorizer()\nx_traincv=cv.fit_transform(df_x)\nencoded_input=x_traincv.toarray()","63d9b66c":"\nencoded_input","2dcee9d6":"cv.inverse_transform(encoded_input[0])","6e383857":"cv.get_feature_names()","73fe84c0":"mnb = MultinomialNB()\ny_train=df_y.astype('int')\nmnb.fit(x_traincv,y_train)","92594901":"# for test\ntest_feedback_list = [\n                {'movie_review': 'great great great movie ever', 'type': 'positive'},\n                {'movie_review': 'I like this amazing movie', 'type': 'positive'},\n                {'movie_review': 'my boyfriend said great movie ever', 'type': 'positive'},\n                {'movie_review': 'cool cool cool', 'type': 'positive'},\n                {'movie_review': 'awesome boyfriend said cool movie ever', 'type': 'positive'},\n                {'movie_review': 'shame shame shame', 'type': 'negative'},\n                {'movie_review': 'awesome director shame movie boring movie', 'type': 'negative'},\n                {'movie_review': 'do not like this movie', 'type': 'negative'},\n                {'movie_review': 'I do not like this boring movie', 'type': 'negative'},\n                {'movie_review': 'aweful terrible boring movie', 'type': 'negative'}\n             ]\ntest_df = pd.DataFrame(test_feedback_list)\ntest_df['label'] = test_df['type'].map({\"positive\":1,\"negative\":0})\ntest_x=test_df[\"movie_review\"]\ntest_y=test_df[\"label\"]","ce29d38d":"x_testcv=cv.transform(test_x)\npredictions=mnb.predict(x_testcv)","e719c607":"accuracy_score(test_y, predictions)","7839c811":"<a id=\"three\"><\/a>\n\n# 3. Multinorminal Naive Bayes\n<hr>","c156a3fc":"Bernoulli Naive Bayes's input data should be fixing vecotr","47b5c736":"## Content\n\n1. [Gaussian Naive Bayes Model](#one)\n2. [Bernoulli Naive Bayes Model](#two)\n3. [Multinorminal Naive Bayes](#three)\n\n<hr>\n","beac7271":"Let's check difference","53d7b14a":"# Naive Bayes\n![1211.PNG](attachment:1211.PNG)\n\n* Supervised learning\n* Independence assumptions between the features\n\n","a0377efe":"<a id=\"two\"><\/a>\n\n# 2. Bernoulli Naive Bayes Model\n\n<hr>","f911cfbe":"## Reference\n\n[My first machine-learning\/deep-learning by Minsuk Heo](https:\/\/github.com\/wikibook\/machine-learning\/tree\/master\/data)\n\n","aefeaa37":"We can find out sepal length feature follows Gaussian distribution\n\nWe will skip other features, other features follow Gaussian distribution as well\n\nSo, we will use Gaussian Naive classifier","1a76da0a":"<a id=\"one\"><\/a>\n\n# 1. Gaussian Naive Bayes Model\n\n<hr>"}}