{"cell_type":{"6b2a1963":"code","b15fc850":"code","cb4d9989":"code","1eb69217":"code","c9e40532":"code","89fda81e":"code","67962069":"code","90b9a261":"code","d37a7bb9":"code","41d2d58b":"code","e3e45228":"code","7e5509e8":"code","1ea29e97":"code","26536ef5":"code","b6bdfefb":"code","e6e7e6e5":"code","2e971009":"code","b9918161":"code","d6c36b9a":"code","66ea11d2":"code","c85f1d0c":"code","32150c26":"code","1638bcc5":"code","71c36a93":"markdown","090572e6":"markdown","9a027dbf":"markdown"},"source":{"6b2a1963":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b15fc850":"df = pd.read_csv('..\/input\/covid-ctscans\/metadata.csv', encoding='ISO-8859-2')\ndf.head()","cb4d9989":"import missingno as msno\n\np=msno.bar(df)","1eb69217":"from colorama import Fore, Style\n\ndef count(string: str, color=Fore.RED):\n    \"\"\"\n    Saves some work \ud83d\ude05\n    \"\"\"\n    print(color+string+Style.RESET_ALL)","c9e40532":"def statistics(dataframe, column):\n    count(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.RED)\n    count(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.BLUE)\n    count(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.YELLOW)\n    count(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.GREEN)\n    count(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    count(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.MAGENTA)","89fda81e":"# Print Offset Column Statistics\nstatistics(df, 'offset')","67962069":"# Let's plot the age column too\nplt.style.use(\"classic\")\nsns.distplot(df['offset'], color='blue')\nplt.title(f\"Offset Distribution [\\u03BC : {df['offset'].mean():.2f} conditions | \\u03C3 : {df['offset'].std():.2f} conditions]\")\nplt.xlabel(\"Offset\")\nplt.ylabel(\"Count\")\nplt.show()","90b9a261":"# Print Age Column Statistics\nstatistics(df, 'age')","d37a7bb9":"# Let's plot the age column too\nplt.style.use(\"classic\")\nsns.distplot(df['age'], color='red')\nplt.title(f\"age Distribution [\\u03BC : {df['age'].mean():.2f} old | \\u03C3 : {df['age'].std():.2f} old]\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()","41d2d58b":"# Dist plot of Resting Blood Pressure\nplt.style.use(\"classic\")\nsns.distplot(df['lymphocyte_count'], color='green')\nplt.title(f\"Lymphocyte Count [\\u03BC : {df['lymphocyte_count'].mean():.2f} increase | \\u03C3 : {df['lymphocyte_count'].std():.2f} increase]\")\nplt.xlabel(\"Lymphocyte Ccount\")\nplt.ylabel(\"Count\")\nplt.show()","e3e45228":"# Print  Column Statistics\nstatistics(df, 'lymphocyte_count')","7e5509e8":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('pO2_saturation').size()\/df['needed_supplemental_O2'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","1ea29e97":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('age').size()\/df['went_icu'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","26536ef5":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(18, 9))\nsns.boxplot(df['offset'], df['age'])\nplt.title(\"Age & Offset\")\nplt.xlabel(\"Offset\")\nplt.ylabel(\"Age\")\nplt.xticks(rotation=45)\nplt.show()","b6bdfefb":"plt.figure(figsize=(8, 4))\nsns.set(style='ticks')\nscatter_df = df[[\"age\", \"pO2_saturation\", \"leukocyte_count\", \"neutrophil_count\"]]\nsns.pairplot(scatter_df)\nplt.show()","e6e7e6e5":"plt.figure(figsize=(8,4))\nsns.countplot(x= 'sex', data = df, palette=\"cool\",edgecolor=\"black\")\nplt.title('Sex Distribution')\nplt.show()","2e971009":"sns.countplot(y=df.modality ,data=df)\nplt.xlabel(\"count\")\nplt.ylabel(\"Exam Modality\")\nplt.show()","b9918161":"import plotly.express as px\n\n# Grouping it by job title and country\nplot_data = df.groupby(['sex', 'intubated'], as_index=False).offset.sum()\n\nfig = px.bar(plot_data, x='sex', y='offset', color='intubated', title='Intubated Patients by Sex')\nfig.show()","d6c36b9a":"from plotly.subplots import make_subplots\n\n\nfig= make_subplots(rows= 2,cols=2, \n                    specs=[[{'secondary_y': True},{'secondary_y': True}],[{'secondary_y': True},{'secondary_y': True}]],\n                    subplot_titles=(\"pO2_saturation\",\"leukocyte_count\",\"temperature\",\"lymphocyte_count\")\n                   )\nfig.add_trace(go.Bar(x=df['age'],y=df['pO2_saturation'],\n                    marker=dict(color=df['pO2_saturation'],coloraxis='coloraxis')),1,1)\n\nfig.add_trace(go.Bar(x=df['age'],y=df['leukocyte_count'],\n                    marker=dict(color=df['leukocyte_count'],coloraxis='coloraxis1')),1,2)\n\nfig.add_trace(go.Bar(x=df['age'],y=df['temperature'],\n                    marker=dict(color=df['temperature'],coloraxis='coloraxis2')),2,1)\n\nfig.add_trace(go.Bar(x=df['age'],y=df['lymphocyte_count'],\n                    marker=dict(color=df['lymphocyte_count'],coloraxis='coloraxis3')),2,2)","66ea11d2":"ax = sns.countplot(x = 'location',data=df,order=['Cho Ray Hospital, Ho Chi Minh City, Vietnam', 'Changhua Christian Hospital, Changhua City, Ta...', 'Wuhan Jinyintan Hospital, Wuhan, Hubei Provinc..', 'Mount Sinai Hospital, Toronto, Ontario, Canada'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45)        ","c85f1d0c":"ax = sns.countplot(x = 'location',data=df,order=['Melbourne, Australia','Adelaide, Australia', 'Hungary', 'Calgary,Canada'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45)        ","32150c26":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.clinical_notes)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","1638bcc5":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.other_notes)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","71c36a93":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","090572e6":"#To avoid clumsy plotting. Pick some and order them.\n\n#Code from Sayantan Sadhu https:\/\/www.kaggle.com\/sayantansadhu\/beginner-s-approach-to-data-visualization","9a027dbf":"![](https:\/\/www.optum.com\/content\/optum3\/en\/business\/resources\/library\/notes-improve-care\/jcr:content\/article-in-page-nav\/article-content-section-1\/adaptiveimage.img.full.high.png\/1564507342297.png)https:\/\/www.optum.com\/business\/resources\/library\/notes-improve-care.html#"}}