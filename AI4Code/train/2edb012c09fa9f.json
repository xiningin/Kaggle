{"cell_type":{"672bd46f":"code","dcc44d78":"code","b0456128":"code","e5c9ce9c":"code","f4fd1aec":"code","e9b7bc11":"code","ffeae2ea":"code","b785cf80":"code","908069cd":"code","1f805f82":"code","cbe3a9db":"code","b0e2fa96":"code","caaf1b7a":"code","b9137c3b":"code","756d8642":"code","5d1dfea8":"code","62734f07":"code","888b2bab":"code","4beb42de":"code","2751962d":"code","9121bf4b":"code","a3655888":"code","eb5c2f8e":"code","df2e8776":"code","825914bb":"markdown","387dca42":"markdown","b39766e2":"markdown","5c6a1379":"markdown","d8b53908":"markdown","62112193":"markdown","ae0bd688":"markdown","3a87f9d9":"markdown"},"source":{"672bd46f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dcc44d78":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import OneHotEncoder,MinMaxScaler,StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\n\n%matplotlib inline\n\nsns.set_style('darkgrid')\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout","b0456128":"train=pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntestfin=pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsubm=pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","e5c9ce9c":"testfin","f4fd1aec":"train","e9b7bc11":"train.columns[train.dtypes=='object']","ffeae2ea":"for i in train.columns[train.dtypes=='object']:\n    print(train[i].value_counts())","b785cf80":"oh=ColumnTransformer([('encoder',\n                       OneHotEncoder(sparse=False,drop='first'),\n                       ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8','cat9'],\n                      )],\n                    remainder='passthrough')","908069cd":"train=train.drop(['id'],axis=1)\nX=train.drop(['target'],axis=1)\ny=train['target']","1f805f82":"X","cbe3a9db":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\nx_train,x_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.2,random_state=42)","b0e2fa96":"x_train","caaf1b7a":"x_train=oh.fit_transform(x_train)\nx_val=oh.transform(x_val)\nx_test=oh.transform(x_test)","b9137c3b":"x_train","756d8642":"x_train[0]","5d1dfea8":"testfin=testfin.drop(['id'],axis=1)\ntest_fin=oh.transform(testfin)","62734f07":"lr=LinearRegression()\nlr.fit(x_train,y_train)\n\npred1=lr.predict(x_test)\n\nprint(f\"RMSE :{mean_squared_error(y_test,pred1)}\")\n# print(F\"mae:{mean_absolute_error(y_test,pred1)}\")\n\nplt.figure(figsize=(10,10))\n\nplt.plot(pred1,y_test)\n\n","888b2bab":"lr1=SGDRegressor(verbose=1)\nlr1.fit(x_train,y_train)\n\npred2=lr1.predict(x_test)\n\nprint(f\"RMSE :{mean_squared_error(y_test,pred2)}\")\n\n# print(F\"MAE:{mean_absolute_error(y_test,pred2)}\")\n\nplt.figure(figsize=(10,10))\n\nplt.plot(pred2,y_test)\n","4beb42de":"model=Sequential()\n\nmodel.add(Dense(x_train.shape[1],activation='relu'))\n# model.add(Dropout(0.25))\nmodel.add(Dense(2*x_train.shape[1],activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(2*x_train.shape[1],activation='relu'))\n# model.add(Dropout(0.25))\nmodel.add(Dense(x_train.shape[1],activation='relu'))\n\nmodel.add(Dense(1,activation='relu'))\n\nmodel.compile(optimizer='RMSprop',loss='mse',metrics=[tf.keras.metrics.RootMeanSquaredError()])","2751962d":"from tensorflow.keras.callbacks import EarlyStopping\ne1=EarlyStopping(verbose=1)","9121bf4b":"history=model.fit(x=x_train,y=y_train,epochs=50,callbacks=[e1],workers=5,validation_data=(x_val,y_val))\npred3=model.predict(x_test)","a3655888":"d1=pd.DataFrame(history.history)\n# d1.iloc[:,[1,3]]\nd1.iloc[:,[1,3]].plot(figsize=(8,8))","eb5c2f8e":"print(f\"RMSE :{mean_squared_error(y_test,pred3,squared=False)}\")\nmodel.summary()","df2e8776":"prediction=lr.predict(test_fin)\nsubm['target']=prediction\nsubm.to_csv(f'lr1.csv',index=False)","825914bb":"# **Tensorflow Model**","387dca42":"# Train Test Split","b39766e2":"# Getting data","5c6a1379":"# Encoding (One Hot Encoding)","d8b53908":"# Analysis","62112193":"# **Output**","ae0bd688":"# **Linear Regression**","3a87f9d9":"# **SGD Regression**"}}