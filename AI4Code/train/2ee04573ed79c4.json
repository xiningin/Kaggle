{"cell_type":{"c7d00c04":"code","1a8ec44f":"code","c30ee66c":"code","babef28d":"code","dddbfdd1":"code","e547333d":"code","acdb092b":"code","b81d1dc9":"code","e711b3b1":"code","2d0664e0":"code","34266fb7":"code","b64580be":"code","51287ac2":"code","3bff6423":"code","1d7a96f8":"code","ad55376d":"markdown","f5324ff0":"markdown","4dab0088":"markdown","d50afaef":"markdown","49717679":"markdown","65876c63":"markdown","c1a93339":"markdown","ea5a00ed":"markdown","d0b02304":"markdown"},"source":{"c7d00c04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a8ec44f":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n\ntry:\n    import apyori\nexcept:\n    !pip install apyori\n\nfrom apyori import apriori","c30ee66c":"df = pd.read_csv('..\/input\/groceries-dataset\/Groceries_dataset.csv', parse_dates=['Date'])\ndf.head()","babef28d":"df.isnull().any()","dddbfdd1":"all_products = df['itemDescription'].unique()\nprint(\"Total products: {}\".format(len(all_products)))","e547333d":"def ditribution_plot(x,y,name=None,xaxis=None,yaxis=None):\n    fig = go.Figure([\n        go.Bar(x=x, y=y)\n    ])\n\n    fig.update_layout(\n        title_text=name,\n        xaxis_title=xaxis,\n        yaxis_title=yaxis\n    )\n    fig.show()","acdb092b":"x = df['itemDescription'].value_counts()\nx = x.sort_values(ascending = False) \nx = x[:10]\n\nditribution_plot(x=x.index, y=x.values, yaxis=\"Count\", xaxis=\"Products\")","b81d1dc9":"one_hot = pd.get_dummies(df['itemDescription'])\ndf.drop('itemDescription', inplace=True, axis=1)\ndf = df.join(one_hot)\ndf.head()","e711b3b1":"records = df.groupby([\"Member_number\",\"Date\"])[all_products[:]].apply(sum)\nrecords = records.reset_index()[all_products]","2d0664e0":"## Replacing non-zero values with product names\ndef get_Pnames(x):\n    for product in all_products:\n        if x[product] > 0:\n            x[product] = product\n    return x\n\nrecords = records.apply(get_Pnames, axis=1)\nrecords.head()","34266fb7":"print(\"total transactions: {}\".format(len(records)))","b64580be":"## Removing zeros\nx = records.values\nx = [sub[~(sub == 0)].tolist() for sub in x if sub[sub != 0].tolist()]\ntransactions = x","51287ac2":"transactions[0:10]","3bff6423":"rules = apriori(transactions,min_support=0.00030,min_confidance=0.05,min_lift=3,min_length=2,target=\"rules\")\nassociation_results = list(rules)","1d7a96f8":"for item in association_results:\n\n    pair = item[0] \n    items = [x for x in pair]\n    print(\"Rule: \" + items[0] + \" -> \" + items[1])\n\n    print(\"Support: \" + str(item[1]))\n\n    print(\"Confidence: \" + str(item[2][0][2]))\n    print(\"Lift: \" + str(item[2][0][3]))\n    print(\"=====================================\")","ad55376d":"## Importing libraries","f5324ff0":"## Transactions\nNote: if a customer bought multiple products on same day, We will consider it one transaction ","4dab0088":"### Example transactions","d50afaef":"### Any null values","49717679":"## Loading Dataset","65876c63":"## Association Rules","c1a93339":"## Top 10 frequently sold products","ea5a00ed":"### One-hot representation of products purchased","d0b02304":"### Total Products"}}