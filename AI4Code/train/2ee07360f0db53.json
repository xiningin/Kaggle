{"cell_type":{"92f0521b":"code","2b18a06e":"code","cd83dbd4":"code","0b1f80f6":"code","54d54e03":"code","ad2c670a":"code","c20812aa":"code","1475241a":"code","147c90c4":"code","271a605c":"markdown","1731055f":"markdown","bda263f4":"markdown","8ebb3f2a":"markdown","637f076f":"markdown"},"source":{"92f0521b":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2b18a06e":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-prediction-dataset\/Breast_cancer_data.csv')","cd83dbd4":"df.info()","0b1f80f6":"df.hist(figsize=(12, 10))\nplt.show()","54d54e03":"# import machine larning models metrics and model_selection\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier","ad2c670a":"\ny = df['diagnosis']\ndf.drop(columns=['diagnosis'], inplace=True)\nx_train, x_test, y_train, y_test = train_test_split(df, y, train_size=0.80, random_state=0)","c20812aa":"lr = LogisticRegression(solver='liblinear')\nsvc = SVC(random_state=0, probability=True)\ndecision_tree = DecisionTreeClassifier(max_leaf_nodes=20, max_depth=6, random_state=0)\nmlp = MLPClassifier(random_state=0)\nxgboost_classifier = XGBClassifier(random_state=0)\nrandom_forest = RandomForestClassifier(max_leaf_nodes=20, max_depth=5, n_estimators=150, random_state=0)\nada_boost = AdaBoostClassifier(random_state=0, base_estimator=lr, n_estimators=150)","1475241a":"models = [('Logistic Regression', lr), ('SVM', svc), ('Decision Tree', decision_tree),\n          ('xgboost', xgboost_classifier), ('Random Forest', random_forest),\n          ('Ada Boost', ada_boost)]","147c90c4":"def run_models():\n    colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink']\n    for index, run_model in enumerate(models):\n        model_name = run_model[0]\n        model = run_model[1]\n        model.fit(x_train, y_train)\n        y_predict = model.predict(x_test)\n        y_probably = model.predict_proba(x_test)[::, 1]\n        print(model_name)\n        print(f'acc: {accuracy_score(y_test, y_predict)}\\n'\n              f'f1_score: {f1_score(y_test, y_predict)}\\n'\n              f'recall: {recall_score(y_test, y_predict)}\\n'\n              f'precision: {precision_score(y_test, y_predict)}\\n')\n        fpr, tpr, threshold = metrics.roc_curve(y_test, y_probably)\n        auc = metrics.roc_auc_score(y_test, y_probably)\n        plt.title('Roc Curve')\n        plt.plot(fpr, tpr, colors[index], label=f'{model_name} auc: {auc}')\n        plt.plot([0, 1], [0, 1], 'k--')\n        plt.legend(loc=4)\n\n\nrun_models()\nplt.show()","271a605c":"# Show Hist of Features","1731055f":"# Train Test Split","bda263f4":"# Create List of Models","8ebb3f2a":"# Create Machine Learning Objects","637f076f":"# Run Models"}}