{"cell_type":{"8a50d90d":"code","760ebff0":"code","7d78b219":"code","9450d2e8":"code","1b03727e":"code","04675d68":"code","2e3a73de":"code","a33b3859":"code","90db2c50":"code","160e7c57":"code","19c48f84":"code","288835ad":"code","ab5f2ace":"code","bea1072f":"code","5a6f7bb7":"code","d05bdbd7":"code","174b4c1b":"code","ba759446":"code","1508d3d8":"code","e5368294":"code","5e0cc40a":"code","4cbc2218":"code","69c3e104":"code","f7f13638":"code","e6eb7b2a":"code","e77b3232":"code","1eddda60":"code","5063cff3":"code","88af7a8d":"code","d667e175":"code","655f9be2":"code","c4ddac4f":"code","355fe446":"code","6ee95553":"code","6b675b3b":"code","2e130e26":"code","317688b7":"code","83aacb73":"code","b6d531b1":"code","15014c93":"code","0472a55a":"markdown","d258d3ff":"markdown","7346f3ac":"markdown","1307d6b5":"markdown","066e06b4":"markdown","0abfb5cc":"markdown","4e1ed91c":"markdown","7cb28e15":"markdown","7274c76b":"markdown","42aaee68":"markdown","96ee003d":"markdown","ce8f2a8d":"markdown","19f1f5b9":"markdown","d28f55d2":"markdown","ee493ee0":"markdown","2a24fd66":"markdown","8b080443":"markdown","02afa4ba":"markdown","c2a6efb7":"markdown","8e39dc73":"markdown","9a4e84b4":"markdown","cd469444":"markdown","39ed5f9a":"markdown","6d4c10e3":"markdown","bf49ee7c":"markdown","950aae06":"markdown","95a678c9":"markdown","f987f93a":"markdown","ec1a09c4":"markdown","1883cacf":"markdown","9aa5daef":"markdown","33ea56c2":"markdown","1738f87a":"markdown"},"source":{"8a50d90d":"import numpy as np\nimport pandas as pd\n\nimport time\nimport math\n\n# Visualiazation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Import and suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","760ebff0":"def SecondsToStr(time_taken):\n    ''' Function return hours, minutes, seconds '''\n    ''' from the time in string format. '''\n\n    hours, rest = divmod(time_taken, 3600)\n    minutes, seconds = divmod(rest, 60)\n    h_ = str(math.trunc(hours))\n    m_ = str(math.trunc(minutes))\n    s_ = str(round(seconds, 2))\n    time_taken_str = ':'.join([h_, m_, s_])\n\n    # return hours, minutes, seconds from the time taken\n    return time_taken_str","7d78b219":"def df_eda(df_, with_stat_=False):\n    \n    # Columns of the DataFrame\n    print('columns:')\n    print(df_.columns.to_list())\n    # Shape (number of columns, rows)\n    print('\\nshape:')\n    print(df_.shape)\n    # Types of the columns\n    print('\\ntypes:')\n    print(df_.dtypes)\n    if with_stat_:\n        # Statistic for numerical columns\n        print('\\nstat:')\n        print(df_.describe())\n        \ndef column_info(df_, col_):\n    print(col_)\n    print('')\n    desc_ = df_[col_].describe()\n    print(round(desc_.drop(['count']), 2))\n    \ndef column_visualizatin(df_, col_, target_, koef_, with_target_=False):\n    fig, ax = plt.subplots() \n    ax.hist(df_[col_], color='g', alpha=0.5, normed=True, label=col_) \n    \n    if with_target_:\n        df_grouped_ = df_[[col_, target_]].groupby([col_]).mean().reset_index()\n        df_grouped_[target_] = df_grouped_[target_].astype('float')\/koef_\n        ax.plot(df_grouped_[col_], df_grouped_[target_], color='r', label=target_)\n\n    ax.set(title=col_)\n    ax.legend(loc='best')\n    plt.show()\n    \ndef value_distribution(df_, col_, n_):\n    \n    ''' Check the share '''\n\n    print(round(df_[col_].value_counts(normalize=True)*100, 2)[:n_])\n    sns.countplot(x=col_, data=df_)\n    plt.xticks(rotation=90)\n    \ndef share_of_missing_per_column(df_, df_name_):\n    \n    print('')\n    print(df_name_)\n    print('Share of missing per column:\\n')\n    data = []\n\n    for col in df_.columns.to_list():\n        if (df_[col].isnull().sum() > 0):\n            data.append([col, '{}%'.format(round(100*df_[col].isnull().sum()\/df_[col].shape[0], 2))])\n    return pd.DataFrame.from_records(data, columns=['Column', 'Missing_share'])","9450d2e8":"# import train Dataset\nstart_time = time.time()\n\ntrain = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\nbuilding_metadata = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')\nweather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\n\nprint('Total time: {}'.format(SecondsToStr(time.time() - start_time)))","1b03727e":"# import test Dataset\nstart_time = time.time()\n\ntest = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')\nweather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\nsample_submission = pd.read_csv('..\/input\/ashrae-energy-prediction\/sample_submission.csv')\n\nprint('Total time: {}'.format(SecondsToStr(time.time() - start_time)))","04675d68":"# merge Datasets\nstart_time = time.time()\n\n# Temporary merge for EDA\ntrain_df = (train.merge(building_metadata, on='building_id', how='left')).merge(weather_train, on=['site_id', 'timestamp'], how='left')\ntest_df = (test.merge(building_metadata, on='building_id', how='left')).merge(weather_test, on=['site_id', 'timestamp'], how='left')\n\n# Temporary merge for EDA\nweather_df = weather_train.append(weather_test, ignore_index=True)\nweather_columns = weather_df.columns.to_list()\n\nprint('Total time: {}'.format(SecondsToStr(time.time() - start_time)))","2e3a73de":"# df_eda(train_df, False)\n# df_eda(test_df, False)\n\ncat_cols, num_cols = [], []\n\nfor col in train_df.columns:\n    if train_df[col].dtype == object:\n        cat_cols.append(col)\n    else:\n        num_cols.append(col)\nprint('Numerical columns {}, categorical columns {}'.format(len(num_cols), len(cat_cols)))","a33b3859":"print('Train shape:', train.shape)\nprint('Train TimeBorder:', train['timestamp'].min(), ':', train['timestamp'].max())\nprint('Train timestamp. Number of missing values:', train['timestamp'].isnull().sum())\ntrain.head(2)","90db2c50":"share_of_missing_per_column(train, 'Train')","160e7c57":"target = 'meter_reading'","19c48f84":"# print(round(train[target].value_counts(normalize=True)*100, 2))\ncolumn_info(train, target)\ntrain[target].plot()\nplt.show()","288835ad":"# Check the share of meter\nvalue_distribution(train, 'meter', 4)","ab5f2ace":"print('Test shape:', test.shape)\nprint('Test TimeBorder:', test['timestamp'].min(), ':', test['timestamp'].max())\nprint('Test timestamp. Number of missing values:', test['timestamp'].isnull().sum())\ntest.head(2)","bea1072f":"share_of_missing_per_column(test, 'Test')","5a6f7bb7":"data = []\n\nlst = train_df.columns.to_list()\nlst.pop(lst.index(target))\n\nfor col in lst:\n    if col in num_cols:\n        eql_median = False\n\n        if train_df[col].median() == test_df[col].median():\n            eql_median = True\n\n        data.append([col, \n                     train_df[col].median(),\n                     test_df[col].median(),\n                     eql_median,\n                     train_df[col].mean(),\n                     test_df[col].mean(),\n                     train_df[col].var(),\n                     test_df[col].var()\n                     ])\npd.DataFrame.from_records(data, columns=['Column', \n                                         'Train_median', 'Test_median', \n                                         'Equal_medians',\n                                         'Train_mean', 'Test_mean', \n                                         'Train_var', 'Test_var', \n                                        ])","d05bdbd7":"print('Weather shape:', weather_df.shape)\nprint('Weather TimeBorder:', weather_df['timestamp'].min(), ':', weather_df['timestamp'].max())\nprint('Weather timestamp. Number of missing values:', weather_df['timestamp'].isnull().sum())\n\nweather_df.head(2)","174b4c1b":"weather_df.columns","ba759446":"weather_df.dtypes","1508d3d8":"weather_df.describe()","e5368294":"plt.figure(figsize=(8, 8))\nsns.heatmap(weather_df.corr(), square=True, annot=True)","5e0cc40a":"share_of_missing_per_column(weather_df, 'Weather')","4cbc2218":"# Check the share of site_id\nvalue_distribution(weather_df, 'site_id', 3)","69c3e104":"column_visualizatin(train_df, 'air_temperature', target, 100000, True)","f7f13638":"weather_df['air_temperature'].hist(color='salmon', alpha=0.5) ","e6eb7b2a":"column_visualizatin(train_df, 'cloud_coverage', target, 100000, True)","e77b3232":"column_visualizatin(train_df, 'dew_temperature', target, 100000, True)","1eddda60":"weather_df['dew_temperature'].hist(color='salmon', alpha=0.5) ","5063cff3":"column_visualizatin(train_df, 'precip_depth_1_hr', target, 1000000, True)","88af7a8d":"column_visualizatin(train_df, 'sea_level_pressure', target, 100000, True)","d667e175":"column_visualizatin(train_df, 'wind_direction', target, 1000000, True)","655f9be2":"column_visualizatin(train_df, 'wind_speed', target, 100000, True)","c4ddac4f":"print(building_metadata.shape)\nbuilding_metadata.head(2)","355fe446":"building_metadata.dtypes","6ee95553":"building_metadata.describe()","6b675b3b":"plt.figure(figsize=(8, 8))\nsns.heatmap(building_metadata.corr(), square=True, annot=True)","2e130e26":"share_of_missing_per_column(building_metadata, 'Buildings')","317688b7":"# Check the share of site_id\nvalue_distribution(building_metadata, 'site_id', 3)","83aacb73":"# Check the share of primary_use\nvalue_distribution(building_metadata, 'primary_use', 10)","b6d531b1":"column_visualizatin(train_df, 'year_built', target, 100000, True)","15014c93":"column_visualizatin(train_df, 'floor_count', target, 10000, True)","0472a55a":"### Overview <a class=\"anchor\" id=\"OverviewBuildings\"><\/a>\n[Table of contents](#contents)","d258d3ff":"### precip_depth_1_hr numerical column <a class=\"anchor\" id=\"precip_depth_1_hr\"><\/a>\n[Table of contents](#contents)","7346f3ac":"### Missing <a class=\"anchor\" id=\"MissingBuildings\"><\/a>\n[Table of contents](#contents)","1307d6b5":"### Meter column <a class=\"anchor\" id=\"Meter\"><\/a>\n[Table of contents](#contents)","066e06b4":"### primary_use categorical column <a class=\"anchor\" id=\"primary_use\"><\/a>\n[Table of contents](#contents)","0abfb5cc":"### Overview <a class=\"anchor\" id=\"OverviewTest\"><\/a>\n[Table of contents](#contents)","4e1ed91c":"### Overview <a class=\"anchor\" id=\"OverviewWeather\"><\/a>\n[Table of contents](#contents)","7cb28e15":"### dew_temperature numerical column <a class=\"anchor\" id=\"dew_temperature\"><\/a>\n[Table of contents](#contents)","7274c76b":"# EDA for ASHRAE - Great Energy Predictor III Kaggle competition\nhttps:\/\/www.kaggle.com\/c\/ashrae-energy-prediction","42aaee68":"## Table of contents: <a class=\"anchor\" id=\"contents\"><\/a>\n* [Data Import](#DataImport)\n    * [Import](#Import)\n    * [Merge](#Merge)\n        \n* [EDA](#EDA)\n    * [Train](#Train)\n        * [Overview](#OverviewTrain)   \n        * [Missing](#MissingTrain) \n        * [meter_reading - target column](#meter_reading) \n        * [meter column](#meter) \n    * [Test](#Test)\n        * [Overview](#OverviewTest)   \n        * [Missing](#MissingTest) \n    * [Train VS Test](#TrainTestNum)\n    * [Weather](#Weather)\n        * [Overview](#OverviewWeather)   \n        * [Missing](#MissingWeather) \n        * [site_id key column](#site_idWeather) \n        * [air_temperature column](#air_temperature) \n        * [cloud_coverage column](#cloud_coverage) \n        * [dew_temperature column](#dew_temperature) \n        * [precip_depth_1_hr column](#precip_depth_1_hr)\n        * [sea_level_pressure column](#sea_level_pressure) \n        * [wind_direction column](#wind_direction) \n        * [wind_speed column](#wind_speed)\n    * [Buildings](#Buildings)\n        * [Overview](#OverviewBuildings)   \n        * [Missing](#MissingBuildings) \n        * [site_id key column](#site_idBuildings) \n        * [primary_use categorical column](#primary_use) \n        * [year_built column](#year_built) \n        * [floor_count column](#floor_count) ","96ee003d":"## Buildings <a class=\"anchor\" id=\"Buildings\"><\/a>\n[Table of contents](#contents)","ce8f2a8d":"### meter_reading target numerical column <a class=\"anchor\" id=\"meter_reading\"><\/a>\n[Table of contents](#contents)","19f1f5b9":"### wind_direction numerical column <a class=\"anchor\" id=\"wind_direction\"><\/a>\n[Table of contents](#contents)","d28f55d2":"## Test <a class=\"anchor\" id=\"Test\"><\/a>\n[Table of contents](#contents)","ee493ee0":"## Weather <a class=\"anchor\" id=\"Weather\"><\/a>\n[Table of contents](#contents)","2a24fd66":"## Train <a class=\"anchor\" id=\"Train\"><\/a>\n[Table of contents](#contents)","8b080443":"# Data Import <a class=\"anchor\" id=\"DataImport\"><\/a>\n[Table of contents](#contents)\n\nhttps:\/\/www.kaggle.com\/c\/ashrae-energy-prediction\/data","02afa4ba":"### Missing <a class=\"anchor\" id=\"MissingTrain\"><\/a>\n[Table of contents](#contents)","c2a6efb7":"### air_temperature numerical column <a class=\"anchor\" id=\"air_temperature\"><\/a>\n[Table of contents](#contents)","8e39dc73":"### Overview <a class=\"anchor\" id=\"OverviewTrain\"><\/a>\n[Table of contents](#contents)","9a4e84b4":"### Missing <a class=\"anchor\" id=\"MissingTest\"><\/a>\n[Table of contents](#contents)","cd469444":"### wind_speed numerical column <a class=\"anchor\" id=\"wind_speed\"><\/a>\n[Table of contents](#contents)","39ed5f9a":"### site_id key column <a class=\"anchor\" id=\"site_idWeather\"><\/a>\n[Table of contents](#contents)","6d4c10e3":"## Import <a class=\"anchor\" id=\"Import\"><\/a>\n[Table of contents](#contents)\n","bf49ee7c":"### Missing <a class=\"anchor\" id=\"MissingWeather\"><\/a>\n[Table of contents](#contents)","950aae06":"### cloud_coverage numerical column <a class=\"anchor\" id=\"cloud_coverage\"><\/a>\n[Table of contents](#contents)","95a678c9":"## Merge <a class=\"anchor\" id=\"Merge\"><\/a>\n[Table of contents](#contents)","f987f93a":"### sea_level_pressure numerical column <a class=\"anchor\" id=\"sea_level_pressure\"><\/a>\n[Table of contents](#contents)","ec1a09c4":"### site_id numerical column <a class=\"anchor\" id=\"site_idBuildings\"><\/a>\n[Table of contents](#contents)","1883cacf":"### floor_count numerical column <a class=\"anchor\" id=\"floor_count\"><\/a>\n[Table of contents](#contents)","9aa5daef":"## Train VS Test (numerical statistic per column) <a class=\"anchor\" id=\"TrainTestNum\"><\/a>\n[Table of contents](#contents)","33ea56c2":"# EDA <a class=\"anchor\" id=\"EDA\"><\/a>\n[Table of contents](#contents)","1738f87a":"### year_built numerical column <a class=\"anchor\" id=\"year_built\"><\/a>\n[Table of contents](#contents)"}}