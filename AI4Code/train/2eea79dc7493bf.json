{"cell_type":{"534e18b1":"code","913600c6":"code","b7fc8ade":"code","535ce864":"code","61e9bf8e":"code","3b503fcc":"code","28c47aa0":"code","d98c645b":"code","344388fb":"code","83999205":"code","363f0492":"code","5d455b94":"code","83d4e266":"code","51c7ca24":"code","8a3c4128":"code","a6f16e79":"code","4e778953":"code","8f9b6041":"code","7562795c":"code","fdaa14fe":"code","7a24d633":"code","d537d80c":"code","cba60e2a":"code","13ba5424":"code","8f1f00f4":"code","6fc12b18":"code","6af0b1b9":"code","eb259d54":"code","3254ba76":"code","5e2ad94a":"markdown","f642b1fe":"markdown","f965f4fd":"markdown","ab61e581":"markdown","bfa9401d":"markdown","1eec29e4":"markdown","e3d4c3aa":"markdown","bd6af047":"markdown"},"source":{"534e18b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","913600c6":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","b7fc8ade":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","535ce864":"data.describe()      #description of dataset ","61e9bf8e":"data.info()","3b503fcc":"data.shape       #569 rows and 33 columns","28c47aa0":"data.columns     #displaying the columns of dataset","d98c645b":"data.value_counts","344388fb":"data.dtypes","83999205":"data.isnull().sum()","363f0492":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","5d455b94":"data","83d4e266":"data.corr()","51c7ca24":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","8a3c4128":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","a6f16e79":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","4e778953":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","8f9b6041":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","7562795c":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","fdaa14fe":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","7a24d633":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","d537d80c":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","cba60e2a":"print(len(x_train))\n","13ba5424":"print(len(x_test))","8f1f00f4":"print(len(y_train))","6fc12b18":"print(len(y_test))","6af0b1b9":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\n","eb259d54":"y_pred=gbc.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",gbc.score(x_train,y_train)*100)\nprint(gbc.score(x_test,y_test))\n","3254ba76":"print(accuracy_score(y_test,y_pred)*100)","5e2ad94a":"# IMPORTING THE LIBRARIES","f642b1fe":"# LOADING THE DATASET","f965f4fd":"# VISUALIZING THE DATA","ab61e581":"# MODELS","bfa9401d":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**","1eec29e4":"**So we get a accuracy score of 95.61 % using GradientBoostingClassifier**","e3d4c3aa":"#  Gradient Boosting Classifier","bd6af047":"# TRAINING AND TESTING DATA"}}