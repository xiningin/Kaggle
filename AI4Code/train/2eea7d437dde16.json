{"cell_type":{"9e9007f7":"code","96e40154":"code","22030bd5":"code","f915ec1a":"code","00676fcc":"code","d8fe44db":"code","74f9f1d3":"code","30195869":"code","bf10c94e":"code","96f34ae2":"code","9ecf38b8":"code","94381c8f":"code","4527b4c5":"code","b3dfef1a":"code","98bd224d":"code","0cc6965b":"code","84e67af6":"code","10230d96":"code","0d58a137":"code","f3c822a1":"code","fd9f9be6":"code","61b5d16f":"code","904e841c":"code","78e34b5c":"code","3b93fb86":"code","95174059":"code","57f35ebc":"code","a72336c2":"code","a153cc61":"code","0b6255c4":"code","e54a155d":"code","f3241727":"code","895bcbb5":"code","0a541a26":"code","c33f14a0":"code","768dd1b8":"code","976c5d08":"code","1f3e2e68":"code","69485c7f":"code","b69c023c":"code","1d902fc5":"code","94784464":"code","12f02e63":"code","d40d22e6":"code","001904b7":"code","95160c35":"code","2e751874":"code","d870119f":"code","2a7325b7":"code","b320a1c2":"code","415a73b3":"code","ccdf741d":"code","8eb23cbf":"code","ffc36128":"code","80ab2c90":"code","8c178af8":"code","1c6ed56e":"code","6e697b64":"code","d5da5ccd":"code","1591c348":"code","a6225090":"code","52ac82d4":"code","2e425ae1":"markdown","a5a44c8f":"markdown","75e7489d":"markdown","00a47e52":"markdown","6c12a0c1":"markdown","1a648dc4":"markdown","ff842001":"markdown","deb8a2ae":"markdown","19ee5d75":"markdown","a802e7f8":"markdown","9615bd1e":"markdown","88680dcb":"markdown","929d6a70":"markdown","82d43a9d":"markdown","4e5466e4":"markdown","8bd67014":"markdown","5771a987":"markdown","c554d98b":"markdown","4f8f6713":"markdown","28b3c028":"markdown","9fc6f199":"markdown","8acd123e":"markdown"},"source":{"9e9007f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom scipy.stats import shapiro\nfrom scipy.stats import probplot\nfrom scipy.stats import mannwhitneyu\nfrom scipy.stats import chi2_contingency\nimport warnings\nwarnings.simplefilter('ignore')\n","96e40154":"TRAIN_DATASET_PATH = '\/kaggle\/input\/credit-default\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/credit-default\/test.csv'\ndf_train = pd.read_csv(TRAIN_DATASET_PATH) # \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c df_train\ndf_test = pd.read_csv(TEST_DATASET_PATH) # \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c df_test","22030bd5":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = df_train.columns.drop(TARGET_NAME).tolist()\n#NEW_FEATURE_NAMES = ['']\nNUMB_FEATURE_NAMES = ['Annual Income','Tax Liens','Number of Open Accounts','Years of Credit History',\n                     'Maximum Open Credit','Number of Credit Problems','Months since last delinquent',\n                     'Bankruptcies','Current Loan Amount','Current Credit Balance','Monthly Debt','Credit Score']\nCAT_FEATURE_NAMES = ['Years in current job','Home Ownership','Purpose','Term']","f915ec1a":"# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ny = df_train[[TARGET_NAME]]\ny.info()","00676fcc":"plt.figure(figsize=(8, 5))\n\nsns.countplot(x=TARGET_NAME, data=df_train)\n\nplt.title('Target variable distribution')\nplt.show()","d8fe44db":"df_train.head(10)","74f9f1d3":"corr_with_target = df_train.corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","30195869":"plt.figure(figsize=(10, 8))\n\nsns.countplot(x=\"Years in current job\", hue=TARGET_NAME, data=df_train)\nplt.title('\\\"Years in current job\\\" grouped by target variable')\nplt.legend(title='Target', loc='upper right')\n\nplt.show()","bf10c94e":"# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndf_train.isna().sum()","96f34ae2":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \"\u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0443\" \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 1\ndf_train['has_delay'] = 1\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u044e NaN \u043d\u0430 0 \u0432 'Months since last delinquent'\ndf_train['Months since last delinquent'].fillna(0, inplace=True)\n\n# \u0423 \u043a\u043e\u0433\u043e \u043d\u0435\u0442 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 - \u0441\u0442\u0430\u0432\u0438\u043c 0 \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndf_train.loc[(df_train['Months since last delinquent'] == 0), 'has_delay'] = 0","9ecf38b8":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \u043e\u0431 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435 \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 0\ndf_train['unknown_income'] = 0\n\n# \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e annual_income_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043c\u0435\u043b\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\nannual_income_median = df_train['Annual Income'].median()\n\n# \u0412\u0441\u0435\u043c, \u0443 \u043a\u043e\u0433\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \"1\" \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 unknown_income\ndf_train.loc[(df_train['Annual Income'].isnull()), 'unknown_income'] = 1\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u0440\u043f\u043b\u0430\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_train['Annual Income'].fillna(annual_income_median, inplace=True)\n","94381c8f":"df_train.isnull().sum()\ndf_train\n","4527b4c5":"NEW_FEATURE_NAMES = ['has_delay','unknown_income']","b3dfef1a":"corr_with_target = df_train[BASE_FEATURE_NAMES + \n                            NEW_FEATURE_NAMES + \n                            [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","98bd224d":"# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439, \u0432 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u043f\u043e \u0441\u0442\u0430\u0436\u0443 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\n\ng = sns.catplot(\"Credit Default\", col=\"Years in current job\", col_wrap=5,\n                data=df_train,\n                kind=\"count\", height=3.5, aspect=.8, \n                palette='tab20')\n\n#fig.suptitle('sf')\nplt.show()\n","0cc6965b":"plt.figure(figsize = (10, 3))\n\ndf_train['Credit Score'].hist(bins=30, )\nplt.ylabel('Count')\nplt.xlabel('Credit Score')\n\nplt.title('bla bla')\nplt.show()","84e67af6":"df_train.isnull().sum()","10230d96":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \u043e\u0431 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c Credit Score \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 0\ndf_train['unknown_credit_score'] = 0\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score']\n\n# \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e credit_score_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\ncredit_score_median = df_train['Credit Score'].median()\n\n# \u0412\u0441\u0435\u043c, \u0443 \u043a\u043e\u0433\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \"1\" \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 unknown_credit_score\ndf_train.loc[(df_train['Credit Score'].isnull()), 'unknown_credit_score'] = 1\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_train['Credit Score'].fillna(credit_score_median, inplace=True)\n","0d58a137":"import random\n\n# \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f Years in current job\nunique_years_in_current_job = df_train['Years in current job'].unique()\n\n# \u0421\u0440\u0435\u0437, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c NaN\nvar_experiance = unique_years_in_current_job[1:]\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c NaN \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u043e\u043f\u044b\u0442\ndf_train['Years in current job'].fillna(random.choice(var_experiance), inplace=True)","f3c822a1":"df_train.isnull().sum()","fd9f9be6":"df_train","61b5d16f":"# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 99999999.0 \u043f\u043e\u043b\u044f Current Loan Amount \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435\nmedian_current_loan_amount = df_train['Current Loan Amount'].median()\ndf_train.loc[(df_train['Current Loan Amount'] == 99999999.0), 'Current Loan Amount'] = median_current_loan_amount","904e841c":"df_train.Bankruptcies.value_counts()","78e34b5c":"#mode_bankruptcies = df_train['Bankruptcies'].mode()\ndf_train['Bankruptcies'].fillna(0 , inplace=True)","3b93fb86":"df_train.Bankruptcies.value_counts()","95174059":"df_train.isnull().sum()","57f35ebc":"for cat_colname in df_train.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(df_train[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","a72336c2":"#for cat_colname in df_train.select_dtypes(include='object').columns[1:]:\n#    df = pd.concat([df_train, pd.get_dummies(df_train[cat_colname], prefix=cat_colname)], axis=1)","a153cc61":"df_train['term_binary'] = df_train['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(int)\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score','term_binary']","0b6255c4":"df_train.select_dtypes(include='object').columns[1:]","e54a155d":"#df_train[\"Home Ownership\"] = df_train[\"Home Ownership\"].astype(\"category\")\n#df_train = pd.get_dummies(df_train)\n#df_train.head()\n\n#df['IS_MALE'] = df['SEX'].map({'1':'1', '2':'0'}).astype(int)\n#df_train = ","f3241727":"corr_with_target = df_train[BASE_FEATURE_NAMES + \n                            NEW_FEATURE_NAMES + \n                            [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","895bcbb5":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.model_selection import KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb","0a541a26":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))","c33f14a0":"def balance_df_by_target(df, target_name):\n\n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n\n    for i in range(disbalance_coeff):\n        sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n        df = df.append(sample, ignore_index=True)\n\n    return df.sample(frac=1) ","768dd1b8":"df_train","976c5d08":"NEW_FEATURE_NAMES","1f3e2e68":"SELECTED_FEATURE_NAMES = NUMB_FEATURE_NAMES + NEW_FEATURE_NAMES\n\n\nX = df_train[SELECTED_FEATURE_NAMES]\ny = df_train[TARGET_NAME]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.30, random_state=11)","69485c7f":"scaler = StandardScaler()\n\ndf_norm = df_train.copy()\ndf_norm[NUMB_FEATURE_NAMES] = scaler.fit_transform(df_norm[NUMB_FEATURE_NAMES])\n\ndf_train = df_norm.copy()","b69c023c":"df_for_balancing = pd.concat([X_train, y_train], axis=1)\ndf_balanced = balance_df_by_target(df_for_balancing, TARGET_NAME)\n    \ndf_balanced[TARGET_NAME].value_counts()","1d902fc5":"X_train = df_balanced.drop(columns=TARGET_NAME)\ny_train = df_balanced[TARGET_NAME]","94784464":"model_lr = LogisticRegression()\nmodel_lr.fit(X_train, y_train)\n\ny_train_pred = model_lr.predict(X_train)\ny_test_pred = model_lr.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","12f02e63":"model_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train, y_train)\n\ny_train_pred = model_knn.predict(X_train)\ny_test_pred = model_knn.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","d40d22e6":"model_xgb = xgb.XGBClassifier(random_state=11)\nmodel_xgb.fit(X_train, y_train)\n\ny_train_pred = model_xgb.predict(X_train)\ny_test_pred = model_xgb.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","001904b7":"model_lgbm = lgbm.LGBMClassifier(random_state=11)\nmodel_lgbm.fit(X_train, y_train)\n\ny_train_pred = model_lgbm.predict(X_train)\ny_test_pred = model_lgbm.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","95160c35":"model_catb = catb.CatBoostClassifier(silent=True, random_state=11)\nmodel_catb.fit(X_train, y_train)\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","2e751874":"model_catb = catb.CatBoostClassifier(class_weights=[1, 3.5], silent=True, random_state=11)","d870119f":"params = {'n_estimators':[50, 100, 200, 500, 700, 1000, 1200, 1500],\n          'max_depth':[3, 5, 7]}","2a7325b7":"cv=KFold(n_splits=3, random_state=11, shuffle=True)","b320a1c2":"%%time\n\nrs = RandomizedSearchCV(model_catb, params, scoring='f1', cv=cv, n_jobs=-1)\nrs.fit(X, y)","415a73b3":"rs.best_params_","ccdf741d":"rs.best_score_","8eb23cbf":"%%time\n\nfinal_model = catb.CatBoostClassifier(n_estimators=1500, max_depth=3,\n                                      silent=True, random_state=11)\nfinal_model.fit(X_train, y_train)\n\ny_train_pred = final_model.predict(X_train)\ny_test_pred = final_model.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","ffc36128":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \"\u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0443\" \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 1\ndf_test['has_delay'] = 1\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u044e NaN \u043d\u0430 0 \u0432 'Months since last delinquent'\ndf_test['Months since last delinquent'].fillna(0, inplace=True)\n\n# \u0423 \u043a\u043e\u0433\u043e \u043d\u0435\u0442 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 - \u0441\u0442\u0430\u0432\u0438\u043c 0 \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndf_test.loc[(df_test['Months since last delinquent'] == 0), 'has_delay'] = 0\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \u043e\u0431 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435 \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 0\ndf_test['unknown_income'] = 0\n\n# \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e annual_income_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043c\u0435\u043b\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\nannual_income_median = df_test['Annual Income'].median()\n\n# \u0412\u0441\u0435\u043c, \u0443 \u043a\u043e\u0433\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \"1\" \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 unknown_income\ndf_test.loc[(df_test['Annual Income'].isnull()), 'unknown_income'] = 1\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u0440\u043f\u043b\u0430\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_test['Annual Income'].fillna(annual_income_median, inplace=True)\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u0444\u0438\u0447\u0443 \u043e\u0431 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c Credit Score \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c 0\ndf_test['unknown_credit_score'] = 0\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score']\n\n# \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e credit_score_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\ncredit_score_median = df_test['Credit Score'].median()\n\n# \u0412\u0441\u0435\u043c, \u0443 \u043a\u043e\u0433\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \"1\" \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 unknown_credit_score\ndf_test.loc[(df_test['Credit Score'].isnull()), 'unknown_credit_score'] = 1\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_test['Credit Score'].fillna(credit_score_median, inplace=True)\n\n# \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f Years in current job\nunique_years_in_current_job = df_test['Years in current job'].unique()\n\n# \u0421\u0440\u0435\u0437, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c NaN\nvar_experiance = unique_years_in_current_job[1:]\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c NaN \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u043e\u043f\u044b\u0442\ndf_test['Years in current job'].fillna(random.choice(var_experiance), inplace=True)\n\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 99999999.0 \u043f\u043e\u043b\u044f Current Loan Amount \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435\nmedian_current_loan_amount = df_test['Current Loan Amount'].median()\ndf_test.loc[(df_test['Current Loan Amount'] == 99999999.0), 'Current Loan Amount'] = median_current_loan_amount\n\ndf_test['term_binary'] = df_test['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(int)","80ab2c90":"df_for_model = df_test[SELECTED_FEATURE_NAMES]\ndf_for_model","8c178af8":"y_pred_output = final_model.predict(df_for_model)","1c6ed56e":"y_pred_output.shape","6e697b64":"SAMPLE = '\/kaggle\/input\/credit-default\/sample_submission.csv'\ndf_sample = pd.read_csv(SAMPLE)\ndf_sample","d5da5ccd":"predictions = pd.DataFrame(index = df_sample['Id'])\n\n# predictions = df_sample(index = df_sample['Id'])\n# predictions = df_sample.drop(columns=TARGET_NAME)\n# predictions.index = predictions['Id']\n#predictions = pd.DataFrame(index = df_test.index)\npredictions\n# X_test.isnull().sum()","1591c348":"predictions[TARGET_NAME] = y_pred_output\npredictions","a6225090":"predictions.to_csv('out_credit_3.csv', sep=',')","52ac82d4":"#!kaggle competitions submit -c credit-default -m \"ILYA Shubenko\" -f try_test_1.csv","2e425ae1":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Bankruptcies","a5a44c8f":"## \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430","75e7489d":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044f 'Credit Score'","00a47e52":"## LogisticRegression","6c12a0c1":"## \u0411\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b: LightGBM","1a648dc4":"#### \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","ff842001":"## k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439","deb8a2ae":"\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","19ee5d75":"# \u041c\u041e\u0414\u0415\u041b\u042c","a802e7f8":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044f 'Years in current job'","9615bd1e":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044f 'Current Loan Amount'","88680dcb":"\u041e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u044d\u043c\u043f\u043b\u044b \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","929d6a70":"### get_dummies","82d43a9d":"## \u0411\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b : CatBoost****","4e5466e4":"## \u0412\u044b\u0431\u043e\u0440 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","8bd67014":"## \u0424\u0438\u043d\u0430\u043b\u043a\u0430","5771a987":"## \u0411\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b: XGBoost","c554d98b":"### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Term","4f8f6713":"## TEST DATASET","28b3c028":"## \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","9fc6f199":"+ \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0444\u0438\u0447\u0435 \"Months since last delinquent\" \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435\u0442 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u043e \u0435\u0441\u0442\u044c Nan \u044d\u0442\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u0440\u0430\u0439\u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c. \u043c\u0435\u043d\u044f\u0435\u043c NaN \u043d\u0430 0 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043e\u0441\u0442\u044c\/\u043d\u0435\u0442 (1\/0)\n\n+ \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0444\u0438\u0447\u0438 \"Annual Income\" \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0441 \u0432 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043e \u0434\u043e\u0445\u043e\u0434\u0435.\n  \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443, \u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0438\u0447\u0443 \u0441 \u043f\u043e\u043c\u0435\u0442\u043a\u043e\u0439 \u043e \"\u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435\"\n\n+ \u0411\u0440\u043e\u0441\u0430\u0435\u0442\u0441\u044f \u0432 \u0433\u043b\u0430\u0437\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 99999999 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"Current Loan Amount\". \u042d\u0442\u043e \u044f\u0432\u043d\u043e \u0431\u044b\u0440\u043e\u0441.\n\n- \u041a\u0430\u043a \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0438\u0447\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\/\u0434\u043e\u043b\u0433 \u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439_\u0434\u043e\u043b\u0433\/\u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439_\u043a\u0440\u0435\u0434\u0438\u0442\n\n- Bankruptcies \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438","8acd123e":"### \u0444\u0438\u0447\u0438\n    Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n    Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n    Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n    Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n    Years of Credit History - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n    Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\n    Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n    Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n    Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n    Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n    Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n    Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n    Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n    Credit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)\n"}}