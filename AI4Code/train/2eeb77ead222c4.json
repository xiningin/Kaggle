{"cell_type":{"98242cce":"code","9d59969b":"code","72cc57b3":"code","843ae423":"code","d20252be":"code","f0828488":"code","ef18b3e2":"code","89b36430":"code","ba418eef":"code","95b82dfe":"code","505d008a":"code","21b70cd3":"code","e7130023":"code","51242d49":"code","bd680ef1":"code","2c0cae52":"code","7d65d7c9":"code","9c03edca":"code","1f683f50":"code","ad64f09d":"code","4394a3cb":"code","49cb3631":"code","f1a9bd38":"code","cf55d29a":"code","a66daf7b":"code","38fa31e5":"code","8254e486":"code","9cd32911":"code","c603a057":"code","b9e22d94":"code","0e020cc8":"code","92bf5c4f":"code","805e2ffa":"code","a3ea5ae1":"code","26399c06":"code","b76c2d35":"code","8ace504f":"code","e93460f0":"code","2dac7823":"code","0524885f":"code","278ca9e8":"code","e46f13dd":"code","3b9a7af9":"code","21797519":"code","98ba2d5d":"code","b872636e":"code","0406dd62":"code","eb24be42":"code","ca804738":"code","afccdf63":"code","c5c90f8c":"code","0eaff2e7":"code","8b4e796a":"code","37b11fab":"code","d1ce0efc":"code","af998714":"code","27b1a15c":"code","2462dafe":"code","3f51422a":"code","09b489fe":"markdown","c48d5351":"markdown","19719e54":"markdown","4e8465fd":"markdown","3b1b5829":"markdown","edcee4d5":"markdown","fdc70aad":"markdown","5d5f44ab":"markdown","81d69528":"markdown","7d72bc7f":"markdown","aee25342":"markdown","7e49cdab":"markdown"},"source":{"98242cce":"# User defined function to get square of number\ndef fn_sq(x):\n    return(x ** 2)","9d59969b":"# Above equivalent funtion via Lambda\nlambda x: x ** 2","72cc57b3":"# Lambda funtion for summation of two numbers\nlambda x, y: x + y","843ae423":"# Map funtion applies a lambda funtion to all the items in an iterable \nl1 = [2,3,4]\nmap(lambda x: x ** 2, l1)","d20252be":"list(map(lambda x: x ** 2, l1))","f0828488":"# filtering the data using 'map' (it prints boolean)\nl1 = [-1, -3, 4, 0, 5, -6, 6]\npositive_nums = list(map(lambda x: x > 0, l1))\npositive_nums","ef18b3e2":"# filtering the data using 'Filter'  (it prints values)\npositive_nums = list(filter(lambda x: x > 0, l1))\npositive_nums","89b36430":"# importing numpy library\nimport numpy as np","ba418eef":"# Create one dimensional array\n# array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)\na1 = np.array([23, 44, 33, 66, 77, 88, 99, 12])\na1","95b82dfe":"type (a1)","505d008a":"# Create a two dimensional array\na2 = np.array([[23, 44, 33, 66], [77, 88, 99, 12]])\na2","21b70cd3":"a1 = np.zeros((4,3))  # Create an array of all zeros\na1","e7130023":"np.ones((3, 3))\n","51242d49":"np.empty((3, 3), str)","bd680ef1":"np.identity(3)","2c0cae52":"np.random.random((3, 4))","7d65d7c9":"np.random.randint(50, 100, size = (2, 3))","9c03edca":"np.arange(10)","1f683f50":"a1 = np.array([1,5,4,3,5,4,3,2,7,6,5,4])\na1","ad64f09d":"a2 = a1.reshape(3, 4)\na2","4394a3cb":"a2.transpose()","49cb3631":"# Create a numpy array\na = np.arange(1, 21).reshape(5, 4)\na","f1a9bd38":"# Get the size of the array\na.size","cf55d29a":"# Get the shape of the array\na.shape","a66daf7b":"# No of dimensions of the array\na.ndim","38fa31e5":"# Get the data type of the elements in the array\na.dtype","8254e486":"# Bytes consumed by array elements\na.nbytes","9cd32911":"a1 = np.arange(21)\na1","c603a057":"# a1[low, high - 1]\na1[4]","b9e22d94":"a1[6:12]","0e020cc8":"a1[12: 6:-1]","92bf5c4f":"# Create a numpy array\na1 = np.arange(1, 21).reshape(5, 4)\na1","805e2ffa":"a1[2,2]","a3ea5ae1":"a1[2:4, 1:3]","26399c06":"# get the third row\na1[2]","b76c2d35":"# Get 1 and 2 row\na1[0:2]","8ace504f":"# Boolean indexing\na1 >= 9","e93460f0":"# Index the data  \na1[a1 >= 9]","2dac7823":"a1 = np.random.randint(50, 100, size = (4, 6))\na1","0524885f":"a1[1,1] = 0\na1","278ca9e8":"a1 > 85","e46f13dd":"a1[a1 > 85] = 85\na1","3b9a7af9":"a = a1.mean()\nb = a1.sum()\nc = a1.min()\nd = a1.max()\nprint(a)\nprint(b)\nprint(c)\nprint(d)","21797519":"# update the values in the array by the mean where the values are <= 60\na1 [a1 <= 60] = a1.mean()\na1","98ba2d5d":"a1[(a1 <= 60) | (a1 >= 90)] = a1.mean()\na1","b872636e":"x = np.random.randint( 10, size = (6,9))\ny = np.random.randint( 100, size = (6,2))","0406dd62":"x","eb24be42":"y","ca804738":"# combine the data\nnp.hstack([x, y])","afccdf63":"# Addition, Substraction, Multiplication and other matrix operations","c5c90f8c":"x = np.random.randint( 100, size = (3,3) )\ny = np.random.randint( 100, size = (3,1) )","0eaff2e7":"x","8b4e796a":"y","37b11fab":"# Addition\nx + y","d1ce0efc":"# Subtraction\nx - y","af998714":"# Multiply\nx * y","27b1a15c":"x = np.random.randint( 10, size = (4,4) )\nx","2462dafe":"# Get the sum, mean and median\nprint(x.sum(), x.mean(), x.std())","3f51422a":"# To get summary row wise, use axis = 1\nnp.sum(x, axis = 1)","09b489fe":"* From python default data structures","c48d5351":"# Slicing and Indexing","19719e54":"# Mathematical calculations on numpy arrays","4e8465fd":"# Numpy Overview\n \n* Importing numpy library\n* Creating arrays and initializing\n* Special initializing functions\n* Slicing and indexing\n* reshaping arrays\n* Numpy Maths\n* Combining arrays\n* Basic algebraic operations using numpy arrays","3b1b5829":"*  From random data, or all zeros or all ones etc","edcee4d5":"# Combine data from arrays","fdc70aad":"# Updating array","5d5f44ab":"# Lamda function\n* Usually short functions, useful for simple calc and we don't have to create UDF\n* Disadvantage - Unlike UDF, can not be used multiple time","81d69528":"# Reshape of arrays","7d72bc7f":"# Inspection of numpy arrays","aee25342":"# Creating arrays and initializing","7e49cdab":"**This Notebook covers**\n\n* Lambda Function\n* Numpy"}}