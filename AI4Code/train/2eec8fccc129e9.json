{"cell_type":{"29132622":"code","8f44af84":"code","14b9d473":"code","0816ad72":"code","d1e4e7c3":"code","41f8d303":"code","48ea233c":"code","c18f4c9c":"code","9f057c49":"code","1ae338d8":"code","1fca87ff":"code","67783ae5":"code","b937ef89":"code","504f472b":"code","399274aa":"code","c210d571":"markdown","635fe68e":"markdown","2eea6950":"markdown","d7953b79":"markdown","a0a3255a":"markdown","d2680897":"markdown","67c55572":"markdown","ef4a5563":"markdown","30aed9b9":"markdown","4ce56c2c":"markdown","5bc89b88":"markdown"},"source":{"29132622":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\nimport os\nimport pandas as pd\nimport numpy as np","8f44af84":"dfTrain = pd.read_csv('..\/input\/train.csv')   #Training Dataset\ndf_Features=dfTrain.iloc[:,1:785]\ndf_Label=dfTrain.iloc[:,0:1]\nx_train=df_Features.values\ny_train=df_Label.values\nx_train=x_train.reshape(x_train.shape[0], 28,28)\n\nprint(\"Training Data\",x_train.shape,y_train.shape)\ndfTest = pd.read_csv('..\/input\/test.csv')   #Training Dataset\ndf_Features=dfTest.iloc[:,0:784]\ndf_Label=dfTest.iloc[:,0:1]*-1\nx_test=df_Features.values\ny_test=df_Label.values\nx_test=x_test.reshape(x_test.shape[0], 28,28)\nprint(\"Test Data\",x_test.shape,y_test.shape)\n\n\n","14b9d473":"image_index = 7777 \nprint(\"Actual Label=\",y_train[image_index]) \nplt.axis('off')\nplt.imshow(x_train[image_index], cmap='Greys')\nplt.show()","0816ad72":"plt.figure(figsize=(12,4))\nplt.subplot('121')\nY_histogram=keras.utils.to_categorical(y_train, 10)   \nY_histogram=Y_histogram.sum(axis=0)\nplt.bar(range(10),Y_histogram)\nplt.xticks(range(10),rotation=90)\nplt.xlabel(Y_histogram)\nplt.title(\"Training Data\")\n\n\nplt.subplot('122')\nY_histogram=keras.utils.to_categorical(y_test, 10)   \nY_histogram=Y_histogram.sum(axis=0)\nplt.bar(range(10),Y_histogram)\nplt.xticks(range(10),rotation=90)\nplt.xlabel(Y_histogram)\nplt.title(\"Test Data\")\nplt.show()","d1e4e7c3":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n\ninput_shape = (28, 28, 1)\n\n# Making sure that the values are float so that we can get decimal points after division\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\n# Normalizing the RGB codes by dividing it to the max RGB value.\nx_train \/= 255\nx_test \/= 255\n\nprint('x_train shape:', x_train.shape)\nprint('Number of images in x_train', x_train.shape[0])\nprint('Number of images in x_test', x_test.shape[0])","41f8d303":"model = Sequential()\nmodel.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten()) # Flattening the 2D arrays for fully connected layers\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])","48ea233c":"model.fit(x=x_train,y=y_train, epochs=10)","c18f4c9c":"model.evaluate(x_train, y_train)","9f057c49":"image_index = 4444\nplt.axis('off')\nplt.imshow(x_train[image_index].reshape(28, 28),cmap='Greys')\npred = model.predict(x_train[image_index].reshape(1, 28, 28, 1))\n\nprint(\"Predicted Value=\",pred.argmax())","1ae338d8":"def getConfusionMatrix(Y_True,Y_Pred):\n    classCount=Y_True.shape[1]\n    #in case Y is in term of probablities\n    Y_Pred=keras.utils.to_categorical(Y_Pred.argmax(axis = 1), classCount) \n    cnfMtrx=np.zeros((classCount,classCount))\n    for i in range(classCount):\n        cnfMtrx[i,:]=Y_Pred[np.where(Y_True[:,i]==1)].sum(axis=0)\n    return cnfMtrx","1fca87ff":"Y_pred = model.predict(x_train.reshape(x_train.shape[0], 28, 28, 1))\nY_true = keras.utils.to_categorical(y_train,10)\nconfusion_mtx = getConfusionMatrix(Y_true, Y_pred)","67783ae5":"def plot_confusion_matrix(cm, classes):\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Oranges)\n    plt.title('Confusion matrix')\n    \n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes,rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    for i in range(cm.shape[0]):\n        for j in (range(cm.shape[1])):\n            if cm[i, j] > cm.max() \/ 2:\n                txtclr=\"white\"\n            else:\n                txtclr=\"black\"\n            plt.text(j, i, cm[i, j],horizontalalignment=\"center\",color=txtclr)\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n       \n\n    plt.colorbar()\n    plt.show()\n","b937ef89":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","504f472b":"Y_pred = model.predict(x_test.reshape(x_test.shape[0], 28, 28, 1))\nY_New=Y_pred.argmax(axis=1)\n\n","399274aa":"dfs = pd.read_csv('..\/input\/sample_submission.csv')   #Training Dataset\ndfs['Label']=np.round(Y_New,0).astype(int)\ndfs.head()\n#dfs.to_csv('..\/input\/manmohan291_minst_submission.csv',index=False)","c210d571":"# Split Distribution","635fe68e":"# Load Data","2eea6950":"# Predict","d7953b79":"# Create Confusion Matrix","a0a3255a":"# Evaluate ","d2680897":"# Train","67c55572":"# Plot Confusion Matrix","ef4a5563":"# Model","30aed9b9":"# Input Transformations","4ce56c2c":"# Preview Sample","5bc89b88":"# Image Classification with MNIST Dataset"}}