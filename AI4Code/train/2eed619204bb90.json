{"cell_type":{"625b3a9c":"code","7d0130e9":"code","bad1ee27":"code","73b88adf":"code","43f30896":"code","cf8218c7":"code","dcfc2891":"code","35737c05":"code","e136dd0d":"code","a18933aa":"code","9208f8fe":"markdown","922c8414":"markdown","a42992e7":"markdown","16e0813c":"markdown","2d2e2d0e":"markdown","c6664511":"markdown","89ee01d2":"markdown","5022eac6":"markdown","95ae470c":"markdown"},"source":{"625b3a9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d0130e9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Flatten, Dense\nfrom keras.layers.normalization import BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam","bad1ee27":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","73b88adf":"x_train = train_data.drop(['label'], axis=1)\n\ny_train = train_data['label']\nsns.countplot(y_train)\n\nx_test = test_data","43f30896":"x_train = x_train \/ 255\nx_train = x_train.values.reshape(-1,28,28,1)\ny_train = to_categorical(y_train)\n\nx_test = x_test \/ 255\nx_test = x_test.values.reshape(-1,28,28,1)\n\nprint(x_train.shape, y_train.shape, x_test.shape)","cf8218c7":"del train_data\ndel test_data","dcfc2891":"model = Sequential([\n        \n        Conv2D(32,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        Conv2D(32,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        MaxPool2D(),\n        BatchNormalization(axis=1),\n    \n        Conv2D(64,(3,3), activation='relu'),        \n        BatchNormalization(axis=1),\n        Conv2D(64,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        MaxPool2D(),\n        BatchNormalization(axis=1),\n            \n        Flatten(),\n        \n        Dense(256, activation='relu'),\n        BatchNormalization(axis=1),\n            \n        Dense(10, activation='softmax')\n        ])","35737c05":"model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x_train, y_train, epochs = 4, validation_split=0.1)","e136dd0d":"predictions = model.predict_classes(x_test)","a18933aa":"imageid = list(range(1,len(predictions)+1))\nresult = pd.DataFrame({\"ImageId\": imageid, \"Label\": predictions})\nresult.to_csv('DigitRecognizerPredictions.csv', index=False, header=True)","9208f8fe":"# **Import training & test data**","922c8414":"# **Specify Kears CNN Model**","a42992e7":"# **Prepre x_train, y_train, x_test data**","16e0813c":"# **Import Libraris**","2d2e2d0e":"# **Compile & Fit the keras model**","c6664511":"# **Make predictions on the test data**","89ee01d2":"# **Scale x_train, x_test data and reshape it to 28x28x1. Convert y_train to categorical representation of the same**","5022eac6":"# **Export the predictions to .csv file**","95ae470c":"# **Freeup Memory & Reshape x_train, y_train**"}}