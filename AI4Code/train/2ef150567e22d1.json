{"cell_type":{"9706b9fa":"code","4b2c91b7":"code","ae4137fa":"code","73b754b4":"code","1cb50e84":"code","608e64c9":"code","38ab005d":"code","6e047230":"code","9c19e4ae":"code","37e9c8e3":"code","d062e84a":"code","54127be0":"code","9b91dfd8":"code","a46b27be":"code","cf12ade1":"code","93c7e361":"code","52cd20c3":"code","fe585175":"code","eef912db":"code","69633dcd":"code","a5677cbd":"code","f4fbc0ca":"code","bf04db28":"code","88ec3eb5":"code","d673e2ed":"code","ce20c921":"code","d875b661":"code","87d31588":"code","dfb6804a":"code","11550fff":"code","580d42ce":"code","7247f893":"code","5370a335":"code","15bc7cf2":"code","310c2a81":"code","0393fe81":"code","5c00f1bb":"code","48dd9f1f":"code","feae9156":"code","02bfcd74":"code","990dc75d":"code","e33ecf2b":"code","3ee8e2b0":"code","4b699dad":"code","d2840b5a":"code","423dfc08":"code","c33bf0ef":"markdown","02ce974a":"markdown","2bc1a77a":"markdown","add1c6eb":"markdown","779c477a":"markdown","d72f13b8":"markdown","c6405750":"markdown","8a33e367":"markdown","8ce6e027":"markdown","e5963424":"markdown","8f929331":"markdown","6c724ceb":"markdown","20b45113":"markdown","af872d89":"markdown","5be93651":"markdown","b14eea8c":"markdown","31f2da98":"markdown","34dea869":"markdown","246735c9":"markdown","269ac5e1":"markdown","353436fe":"markdown","f171fd3c":"markdown","1ea0e20b":"markdown","968b3b76":"markdown","830dd32e":"markdown","2b7e7a5c":"markdown","e2389ba7":"markdown","7ed3c1d3":"markdown","b4c2e3ae":"markdown","2837d689":"markdown","f657f39d":"markdown","11697b8b":"markdown","a37cd927":"markdown","1abbbcac":"markdown","f9384e4d":"markdown","591817fc":"markdown","3a2a1950":"markdown","d35e6367":"markdown","c1aec932":"markdown","7a9c3c90":"markdown","bb3b69b2":"markdown"},"source":{"9706b9fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re # regex python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom transformers import BertTokenizer\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-cased\")\n\nfrom nltk.tokenize import word_tokenize\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b2c91b7":"filename = '\/kaggle\/input\/enron-email-dataset\/emails.csv'\nn = 50  # every 100th line = read 1% of the emails (total emails = 517400)\ndf = pd.read_csv(filename, header=0, skiprows=lambda i: i % n != 0)\n\n# df = pd.read_csv(filename)\nprint(\"shape of the dataset:\",df.shape)\ndf.head()","ae4137fa":"# for i in range(20):\n#     print(\"################################################ EMAIL CONTENT NUMBER:\",i,\"############################################################################\")\n#     print(df.message[i])","73b754b4":"# Dropping the file column:\ndf = df.drop(['file'], axis=1)","1cb50e84":"# Splitting:\ndf['pre_info']= df.message.map(lambda r: r.split('\\n\\n', 1)[0])\ndf['content']= df.message.map(lambda r: r.split('\\n\\n', 1)[1])\ndf = df.drop(['message'], axis=1)\ndf.head()","608e64c9":"# Check the pre-info part:\nprint(df.pre_info[0])\n# Keep the message id for indexing later on:\n# df['message_id'] = df.pre_info.map(lambda r: r.split('\\n')[0].split('Message-ID: ')[1])\n# df = df.drop(['pre_info'], axis=1)","38ab005d":"# #Investigating the content first:\n# for i in range(25):\n#     print(\"################################################ EMAIL CONTENT NUMBER:\",i,\"############################################################################\")\n#     print(df.content[i])","6e047230":"df.content.str.contains('[- ]*Forwarded by').value_counts()","9c19e4ae":"# Test the deal with one sample email:\nemail = df.content[df.content.str.contains('[- ]*Forwarded by')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '[- ]*Forwarded by[\\S\\s]*Subject:[\\S\\t ]*'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all the others:\ndef deal_forwarded(row):\n    condition = '[- ]*Forwarded by[\\S\\s]*Subject:[\\S\\t ]*'\n    return re.sub(condition, '', row).strip()\ndf['content1'] = df.content.map(deal_forwarded)","37e9c8e3":"print(df.content1.str.contains('[- ]*Forwarded by').value_counts())","d062e84a":"# for email in df.content1[df.content1.str.contains('[- ]*Forwarded by')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","54127be0":"# Test for one email:\nemail = df.content1[df.content1.str.contains('[- ]*Forwarded by')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '[- ]*Forwarded by[\\S\\s]*---[-]+' \nprint(re.sub(condition, '', email).strip())\n\n# DO it for all the others:\ndef deal_forwarded_patternless(row):\n    condition = '[- ]*Forwarded by[\\S\\s]*[-]+'\n    return re.sub(condition, '', row).strip()\ndf['content2'] = df.content1.map(deal_forwarded_patternless)","9b91dfd8":"print(df.content2.str.contains('[- ]Forwarded by').value_counts())","a46b27be":"# for i in range(10,50):\n#     print(\"################################################ EMAIL CONTENT NUMBER:\",i,\"############################################################################\")\n#     print(df.content2[i])","cf12ade1":"df.content2.str.contains('[- ]Original Message').value_counts()","93c7e361":"# Test the deal with one sample email:\nemail = df.content2[df.content2.str.contains('[- ]Original Message')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '[- ]*Original Message[\\S\\s]*Subject:[\\S\\t ]*'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all emails:\ndef deal_originals(row):\n    condition = '[- ]*Original Message[\\S\\s]*Subject:[\\S\\t ]*'\n    return re.sub(condition, '', str(row)).strip()\ndf['content3'] = df.content2.map(deal_originals)","52cd20c3":"df.content3.str.contains('[- ]*Original Message').value_counts()","fe585175":"# for email in df.content3[df.content3.str.contains('[- ]*Original Message')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","eef912db":"# Test the deal with one sample email:\nemail = df.content3[df.content3.str.contains('[- ]*Original Message')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '[- ]*Original Message[\\S\\s]*(Sent:[\\S\\t ]*|Date:[\\S\\t ]*)'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all emails:\ndef deal_originals_new(row):\n    condition = '[- ]*Original Message[\\S\\s]*(Sent:[\\S\\t ]*|Date:[\\S\\t ]*)'\n    return re.sub(condition, '', str(row)).strip()\ndf['content4'] = df.content3.map(deal_originals_new)","69633dcd":"# Check again:\n# print(df.content4.str.contains('[- ]*Original Message').value_counts())\n# for email in df.content4[df.content4.str.contains('[- ]*Original Message')]:\n#     print(email)\n#     print('############################################## END OF EMAIL ###############################################')","a5677cbd":"# for i in range(50,90):\n#     print(\"################################################ EMAIL CONTENT NUMBER:\",i,\"############################################################################\")\n#     print(df.content4[i])","f4fbc0ca":"# emails containing the pattern:\ndf.content4.str.contains('From:[\\S\\s]*Subject:[\\S \\t]*').value_counts()","bf04db28":"# Test the deal with one sample email:\nemail = df.content4[df.content4.str.contains('From:[\\S\\s]*Subject:[\\S \\t]*')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = 'From:[\\S\\s]*Subject:[\\S \\t]*'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all emails:\ndef deal_from(row):\n    condition = 'From:[\\S\\s]*Subject:[\\S \\t]*'\n    return re.sub(condition, '', str(row)).strip()\ndf['content5'] = df.content4.map(deal_from)","88ec3eb5":"df.content5.str.contains('From:').value_counts()","d673e2ed":"# for email in df.content5.loc[df.content5.str.contains('From:')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","ce20c921":"# emails containing `To`:\ndf.content5.str.contains('To:[\\S\\s]*Subject:[\\S\\t ]*').value_counts()","d875b661":"# emails containing `To` on a new line:\ndf.content5.str.contains('\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S\\t ]*').value_counts()","87d31588":"# emails containing zero or one line before `To`:\ndf.content5.str.contains('\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S\\t ]*').value_counts()","dfb6804a":"# emails containing zero or one or two lines before `To`:\ndf.content5.str.contains('\\n[\\S \\t]*\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S\\t ]*').value_counts()","11550fff":"# # Investigate +_+\n# for email in df.content5.loc[df.content5.str.contains('\\n[\\S \\t]*\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S\\t ]*')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","580d42ce":"# Test the deal with one sample email:\nemail = df.content5.loc[df.content5.str.contains('\\n[\\S \\t]*\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S\\t ]*')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '\\n[\\S \\t]*\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S \\t]*'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all emails:\ndef deal_to(row):\n    condition = '\\n[\\S \\t]*\\n[\\S \\t]*\\n[\\S \\t]*To:[\\S\\s]*Subject:[\\S \\t]*'\n    return re.sub(condition, '', str(row)).strip()\ndf['content6'] = df.content5.map(deal_to)","7247f893":"df.content6.str.contains('To:[\\S\\s]*Subject:[\\S\\t ]*').value_counts()","5370a335":"# for email in df.content6.loc[df.content6.str.contains('To:[\\S\\s]*Subject:[\\S\\t ]*')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","15bc7cf2":"# Test the deal with one sample email:\nemail = df.content6.loc[df.content6.str.contains('To:[\\S\\s]*Subject:[\\S\\t ]*')].iloc[0]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\ncondition = '[\\S\\t ]*\\nTo:[\\S\\s]*Subject:[\\S \\t]*'\nprint(re.sub(condition, '', email).strip())\n\n# Do it for all emails:\ndef deal_to_new(row):\n    condition = '[\\S\\t ]*\\nTo:[\\S\\s]*Subject:[\\S \\t]*'\n    return re.sub(condition, '', str(row)).strip()\ndf['content7'] = df.content6.map(deal_to_new)","310c2a81":"df.content7.str.contains('To:').value_counts()","0393fe81":"# for email in df.content7.loc[df.content7.str.contains('To:')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","5c00f1bb":"print(df.content7.str.contains('=20').value_counts())\nprint(df.content7.str.contains('=20|=10|=09|=01').value_counts())\nprint(df.content7.str.contains('=\\d\\d').value_counts())","48dd9f1f":"# for email in df.content7.loc[df.content7.str.contains('=20|=10|=09|=01')]:\n#     print(email)\n#     print(\"############################ END OF EMAIL ################################################################\")","feae9156":"# Test the deal with one email:\nemail = df.content7.loc[df.content7.str.contains('=20|=10|=09|=01')].iloc[1]\nprint(email)\nprint(\"############################ END OF EMAIL ################################################################\")\n# condition = '[=]+[\\n\\t =]*\\d\\d'\n# |[=\\n]*[=10]|[=\\n]*[=01]|[=\\n]*[=09]'\n# [\\w]=[\\w]'\ncondition1 = '[=]+\\d\\d'\ncondition2 = '[=]+[ \\n]+'\nemail = re.sub(condition1, '', email)\nprint(\"############################## AFTER COND 1 ###############################################################\")\nprint(re.sub(condition, '', email).strip())\nemail = re.sub(condition2, '', email)\nprint(\"############################## AFTER COND 2 ###############################################################\")\nprint(re.sub(condition, '', email).strip())\n\n\n# Do this for all emails:\ndef deal_equalsto(row):\n    condition1 = '[=]+\\d\\d'\n    condition2 = '[=]+[ \\n]+'\n    row = re.sub(condition1, '', str(row))\n    return re.sub(condition2, '', str(row)).strip()\ndf['content8'] = df.content7.map(deal_equalsto)","02bfcd74":"print(df.content8.str.contains('=20').value_counts())\nprint(df.content8.str.contains('=20|=10|=09|=01').value_counts())\n# print(df.content8.str.contains('=\\d\\d').value_counts())","990dc75d":"for i in range(1000, 1050):\n    print(\"################################################ EMAIL CONTENT NUMBER:\",i,\"############################################################################\")\n    print(df.content8[i])","e33ecf2b":"# Getting the final content8 out:\ndf_nlp = df[['pre_info', 'content8']]\n# Removing the emails that are empty:\ndf_nlp = df_nlp.loc[~(df_nlp.content8=='')]\ndf_nlp = df_nlp.rename(columns={'content8':'content'}).reset_index(drop=True)\nprint(df_nlp.shape)\ndf_nlp.head()","3ee8e2b0":"# # Tokenize using your fav tokenizer:\n# # This step is quite time consuming: \ndf_nlp['bert_tokens'] = df_nlp['content'].map(lambda r: tokenizer.tokenize(r))\ndf_nlp['nltk_tokens'] = df_nlp['content'].map(lambda r: word_tokenize(r))","4b699dad":"df_nlp.to_csv('enron-pre-processed-nlp.csv')","d2840b5a":"# Saving a file for BERT transformer models:\ndf_out_final = df_nlp.content.loc[df_nlp['bert_tokens'].map(lambda r: (len(r)>10 and len(r)<512))].reset_index(drop=True)\nprint(df_out_final.shape)\n# Save the final contents:\ndf_out_final.to_csv('enron-processed.tsv',sep='\\t')","423dfc08":"token_list = [token for row in df_nlp['nltk_tokens'] for token in row]\n# token_list = [token for row in df_nlp['bert_tokens'] for token in row]\ntoken_series = pd.Series(token_list)\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n    print(token_series.value_counts())","c33bf0ef":"Almost. So let's look at the pattern for these emails:","02ce974a":"# 1. Loading data in splits:","2bc1a77a":"Looking at above emails, there's no clear pattern that can detected to remove from these emails. But we can just remove the `----- Forwarded by .. -----` alone.","add1c6eb":"#### Various patters to deal with here, so brace yourselves!!!\n```\n\"Mark Sagel\" <msagel@home.com> on 05\/13\/2001 09:23:02 PM\nTo: \"John Arnold\" <jarnold@enron.com>\ncc:  \nSubject: Natural gas update\n```\n```\nIna Rangel\n05\/10\/2001 05:47 PM\nTo:\tJohn Arnold\/HOU\/ECT@ECT\ncc:\t \nSubject:\tQuestion?\n```\n```\nKristin Gandy@ENRON\n09\/11\/2000 09:30 AM\nTo: Mark Koenig\/Corp\/Enron@ENRON, Kevin Garland\/Enron Communications@Enron \nCommunications, Jonathan Davis\/HOU\/ECT@ECT, Jian \nMiao\/ENRON_DEVELOPMENT@ENRON_DEVELOPMENT, Ed Wood\/HOU\/ECT@ECT, Jun Wang\/Enron \nCommunications@Enron Communications, Miguel Vasquez\/HOU\/ECT@ECT, Lee \nJackson\/HOU\/ECT@ECT, Amber Hamby\/Corp\/Enron@Enron, Jay Hawthorn\/Enron \nCommunications@Enron Communications, Joe Gordon\/Corp\/Enron@Enron, Susan \nEdison\/Enron Communications@Enron Communications, Vikas \nDwivedi\/NA\/Enron@Enron, Mark Courtney\/HOU\/ECT@ECT, Monica Rodriguez\/Enron \nCommunications@enron communications\ncc: Seung-Taek Oh\/NA\/Enron@ENRON, John Arnold\/HOU\/ECT@ECT, Andy \nZipper\/Corp\/Enron@Enron, George McClellan\/HOU\/ECT@ECT, David \nOxley\/HOU\/ECT@ECT \nSubject: Vanderbilt Presentation and Golf Tournament\n```\n```\nDate: Thu, 23 May 2002 11:03:58 -0500\nMessage-ID: <C4F6659E22D8194B925933CC808802540FC15D@server4.zilkha.com>\nX-MS-Has-Attach:\nX-MS-TNEF-Correlator:\nThread-Topic: Mill Run & Somerset Monthly reports\nThread-Index: AcICc2zvlTjbDznqRMKWdw4R6bKDng==\nFrom: \"Gary Verkleeren\" <GVerkleeren@zilkha.com>\nTo: <kurt.anderson@ps.ge.com>\nCc: \"Rick Winsor\" <rwinsor@zilkha.com>, \"Mark Haller\" <mhaller@zilkha.com>, \n<joseph.thorpe@ps.ge.com>\n```","779c477a":"Checking content once again","d72f13b8":"Investigating Content again:","c6405750":"Processing for NLP requires us to tokenize and select emails that confirm to certain expectations that we set","8a33e367":"Let's leave at this for now, because there are no recognizable patterns here.","8ce6e027":"Let's deal with them first. How? Looking at the forwarded texts, they are accompanied by a `To, From and Subject` texts. We are interested in the body of the email that comes after the `Subject`.","e5963424":"# 8. Other patterns or problems that creep in:","8f929331":"Has it worked successfully?","6c724ceb":"# 2. Split the content and pre-info in message:","20b45113":"Not yet, so what do we have here?","af872d89":"Let's see what individual messages looks like. They all have a set of pre-info containing various features and a body separated by two newline characters.","5be93651":"This is what you've been looking for!!","b14eea8c":" Consider only emails that have more than 10 tokens and less than 512 tokens for BERT processing purposes:","31f2da98":"# 4. Dealing with *Original Message*:","34dea869":"Almost. So let's look at the failures:","246735c9":"We find html links sometimes:\n\n```\nPlanned subsidies would distort competition \n\nOct. 23, 2001 (Helsingin Sanomat) -- The Finnish forest industry has severely criticised the financing arrangements of the new pulp ...\n( Story... <http:\/\/www.forestweb.com\/digest\/news.control.taf?_section=liststories&_function=detail&FORESTWEBNEWS_uid1612&_UserReference=9BACFC3BFDBDF3C13BD590B2>) \n\n \t\ntop of page <http:\/\/www.forestweb.com\/digest\/news.control.taf?_section=view&_function=detail&EDITION_ID96&_UserReference=9BACFC3BFDBDF3C13BD590B2#top> \t\n  _____  \n```\nOr it has characters like these: `>`, which are mostly forwards from other email services like Yahoo!\n```\nCECECOMCOM@aol.com <mailto:CECECOMCOM@aol.com> wrote: \n\n> ATTACHMENT part 2 message\/rfc822 Date: Thu, 13 Dec 2001 11:48:47 -0800 (PST)\n> FYI\n> \n> Roadside Assistance: Something all Texas women should know... especially\n> since this has received very little publicity.\n> \n> Your Texas drivers license has a phone number in small print on the\n> back,\n> just above the bar code: 1-800-525-5555\n```\nBut these are found once every hundred emails, hence it's safe to ignore them.","269ac5e1":"From the above samples it is clear that there are a whole lot of messages that have `---------------------- Forwarded by ...` in them.\nExactly how many? Let's see:","353436fe":"Looks like they contain patterns like this that end with `Sent:` or `Date:` instead of `Subject:`\n```\n----- Original Message -----\nFrom: <Eric.Bass@enron.com>\nTo: <daphneco64@bigplanet.com>\nSent: Monday, December 18, 2000 1:41 PM\n```","f171fd3c":"Sweet, we've eliminated all the Forwards! ","1ea0e20b":"# 3. Pre-processing for NLP: ","968b3b76":"From the above samples, we can see that there are quite a few entries with this pattern with the `From:` entry:\n```\nFrom: John J Lavorato\/ENRON@enronXgate on 02\/19\/2001 10:19 AM\nTo: John Arnold\/HOU\/ECT@ECT\ncc:  \nSubject: \n```\nSo let's deal with them.","830dd32e":"Honestly, this one is such a nuisance! I believe this character comes due to some read error\/ incompatible character set (probably not UTF-8) that Enron was using","2b7e7a5c":"# 5. Dealing with *From*:","e2389ba7":"## Viola! Your emails are ready for Large scale language models like BERT! Check the output directory :)","7ed3c1d3":"Alright then the same thing applies here as well. Looking at the forwarded texts, they are accompanied by a `To, From and Subject` texts. \nWe are interested in the body of the email that comes after the `Subject`.","b4c2e3ae":"The above few emails have varied patterns as they have different use cases of Original message. So leaving them here.","2837d689":"Is the task complete?","f657f39d":"Sweet! All intended pre-procesing has been done!!! Let's take a look at the final data :)","11697b8b":"The regex below simply says: \n* `[- ]*` means zero or more number of `-` and `:space:` characters, because of wildcard `*`\n* `\\s` means all whitespace characters including newline and tabs\n* `\\S` means complimentary set of all the whitespace characters, basically all the alphanumeric and special characters\n* Together `[\\S\\s]*` means zero or more characters (everything) \n* `[\\S\\t ]*` means zero or more characters except for a newline","a37cd927":"Has it worked successfully?","1abbbcac":"Nope, so what went wrong?","f9384e4d":"# 6. Dealing with *To*:","591817fc":"# 7. The '*=20*' problem:","3a2a1950":"All of these weren't detected because they don't have new line characters in the begenning. But they are easy to remove now!","d35e6367":"Looks like emails contain `-----Original Message-----` in them a lot. Exactly how many?","c1aec932":"# 3. Dealing with *Forwarded by*:","7a9c3c90":"See if we have eliminated all `To:` to `Subject:` as well:","bb3b69b2":"Looking above, there's no clear pattern emerging. Hence, let's keep them in tab while we look at other problems."}}