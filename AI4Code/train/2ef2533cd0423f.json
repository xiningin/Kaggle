{"cell_type":{"21b98a79":"code","e1ce19e1":"code","e9f9f29c":"code","f6c3b100":"code","34b14e16":"code","6e602c0c":"code","414b61f3":"code","abbe8a42":"code","183ba964":"code","f09a699e":"code","a43b94ac":"code","27995ef7":"code","306c2bfe":"code","7d779c2a":"code","2fa9d922":"code","7ff1d250":"code","3df16537":"code","7152a2a7":"code","e58c4f2e":"code","247b1dd7":"code","932159c5":"code","f80e37f8":"code","9fb9654e":"code","ea92e97d":"code","213ac75f":"code","674ef267":"code","fc87e3f7":"code","5d15be64":"markdown","058bf7f8":"markdown","71426bcc":"markdown","593b9c86":"markdown","d6d0a2f7":"markdown","0535cd29":"markdown","171c5733":"markdown","322f79fa":"markdown","25676ab8":"markdown","e742fc7e":"markdown","05cf50a1":"markdown","e4ea9551":"markdown","e703a9d8":"markdown","4b2dd7d1":"markdown"},"source":{"21b98a79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1ce19e1":"path = \"..\/input\/real-estate-data\/1. Real_Estate_data.xlsx - in.csv\"\ndf = pd.read_csv(path)","e9f9f29c":"df.head()","f6c3b100":"df.select_dtypes(\"object\")","34b14e16":"df.isnull().sum()","6e602c0c":"from sklearn.model_selection import train_test_split","414b61f3":"Y = df.pop(\"SalePrice\")\nX = df","abbe8a42":"X_train, X_test, y_train, y_test = train_test_split(\nX, Y, test_size=0.33, random_state=42)","183ba964":"X_train","f09a699e":"dummies = np.array(['HallwayType','HeatingType',\"HeatingType\",'AptManageType','SubwayStation'])\nlabel = np.array(['TimeToBusStop','TimeToSubway'])","a43b94ac":"from sklearn.preprocessing import OneHotEncoder\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)","27995ef7":"OH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[dummies]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test[dummies]))","306c2bfe":"OH_cols_train.index = X_train.index\nOH_cols_test.index = X_test.index","7d779c2a":"OHencoded_X_train = X_train.drop(dummies, axis=1)\nOHencoded_X_test = X_test.drop(dummies, axis=1)","2fa9d922":"OHencoded_X_train = pd.concat([OHencoded_X_train, OH_cols_train], axis=1)\nOHencoded_X_test = pd.concat([OHencoded_X_test, OH_cols_test], axis=1)","7ff1d250":"OHencoded_X_train.select_dtypes(\"object\")","3df16537":"from sklearn.preprocessing import OrdinalEncoder\n\nlabel_X_train = OHencoded_X_train.copy()\nlabel_X_test = OHencoded_X_test.copy()\n\nordinal_encoder = OrdinalEncoder()\nlabel_X_train[label] = ordinal_encoder.fit_transform(label_X_train[label])\nlabel_X_test[label] = ordinal_encoder.transform(label_X_test[label])","7152a2a7":"label_X_train.sample(5)","e58c4f2e":"label_X_train.drop(\"MonthSold\",inplace=True,axis=1)\nlabel_X_test.drop(\"MonthSold\",inplace=True,axis=1)","247b1dd7":"label_X_train[\"age\"] = label_X_train[\"YrSold\"] - label_X_train[\"YearBuilt\"] \nlabel_X_test[\"age\"] = label_X_test[\"YrSold\"] - label_X_test[\"YearBuilt\"] ","932159c5":"label_X_train.sample(5)","f80e37f8":"label_X_train.drop(\"YearBuilt\",axis=1,inplace=True)\nlabel_X_train.drop(\"YrSold\",axis=1,inplace=True)\nlabel_X_test.drop(\"YearBuilt\",axis=1,inplace=True)\nlabel_X_test.drop(\"YrSold\",axis=1,inplace=True)","9fb9654e":"final_X_train = label_X_train\t\nfinal_X_test = label_X_test","ea92e97d":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=2000)\nmy_model.fit(final_X_train, y_train,early_stopping_rounds=5,eval_set=[(final_X_test, y_test)],\n             verbose=False)","213ac75f":"from sklearn.metrics import mean_absolute_error\npredictions = my_model.predict(final_X_test)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_test)))","674ef267":"predicted_df = label_X_test.copy()\npredicted_df[\"SalePrice\"] = predictions ","fc87e3f7":"output_path =\".\/SalePrice_Prediction.csv\"\npredicted_df.to_csv(output_path)","5d15be64":"Feature engineering","058bf7f8":"Ki\u1ebfm tra gi\u00e1 tr\u1ecb null","71426bcc":"\u0110\u1ecdc data t\u1eeb t\u1ec7p csv","593b9c86":" Lo\u1ea1i b\u1ecf c\u1ed9t Monthsold v\u00ec kh\u00f4ng d\u1eef li\u1ec7u n\u00e0y kh\u00f4ng quan tr\u1ecdng ","d6d0a2f7":"\u0110\u01b0a ra d\u1ef1 \u0111o\u00e1n v\u00e0 output ra file CSV","0535cd29":"Check categorical values.","171c5733":"Label endcoding \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u thu\u1ed9c d\u1ea1ng Ordinal data","322f79fa":"Chu\u1ea9n b\u1ecb data cho ti\u1ec1n x\u1eed l\u00fd","25676ab8":"Fit model s\u1eed d\u1ee5ng Gradient Boosting","e742fc7e":"S\u1eed dung tu\u1ed5i c\u1ee7a nh\u00e0 thay cho Yearbuild v\u00e0 YearSold","05cf50a1":"Encode categorical data","e4ea9551":"T\u00ednh MAE","e703a9d8":"T\u1ea1o data cu\u1ed1i c\u00f9ng","4b2dd7d1":"One hot encoding \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u kh\u00f4ng thu\u1ed9c d\u1ea1ng Ordinal"}}