{"cell_type":{"d7bc819a":"code","3e0a2e8b":"code","7fb9e022":"code","b1013174":"code","a41d3904":"code","4dc872b8":"code","9a626b60":"code","afa4b3ed":"code","804fa78c":"code","ea7ba370":"code","2bc1e40d":"code","d92221a0":"code","ba43b7e3":"code","9abdd56a":"code","299395d7":"code","e004dbf0":"code","9cdd99db":"code","94ccbf3b":"code","9146355c":"code","9b8f6559":"code","f80a40ae":"code","0bdd589e":"code","f45e54a7":"code","aef6215b":"code","45ddb91c":"code","cb2b6730":"code","ad3a2c17":"code","a71e0ceb":"code","a2698a34":"code","27c74d19":"code","da7eb76d":"code","e870c9a6":"code","b17f8ce9":"code","83c8e1d8":"code","0ee52f09":"code","c0e8c0fc":"code","3c15a96f":"code","6d45c091":"code","57869146":"code","5a45e7b0":"code","234ff4df":"code","94229033":"code","70304b26":"code","f6570fa3":"code","e2b7f7b6":"code","df98034e":"code","107ff66f":"code","364c5546":"markdown","de4ad632":"markdown","d726156b":"markdown","c4decaa2":"markdown","72cfb2a2":"markdown","8e8d05ad":"markdown","631822e5":"markdown","c26edefe":"markdown","593c201a":"markdown","8bc2bbd3":"markdown","28cc7740":"markdown","66d560f2":"markdown","363bfd39":"markdown","2f854646":"markdown","bbd28a81":"markdown","601bbaa6":"markdown","2bbbf1e6":"markdown","0139be53":"markdown","c87980c6":"markdown","8a382d25":"markdown","a8013b77":"markdown","d56aa012":"markdown","72fd78e8":"markdown","f5902aa2":"markdown","4141838d":"markdown","f2c12e54":"markdown","902b613b":"markdown","51567654":"markdown","865b1d8b":"markdown","220657d9":"markdown","14abcd9f":"markdown","03081258":"markdown","4a7d4100":"markdown","f60a092f":"markdown","0e7bf0c6":"markdown","dfa05838":"markdown","989f8288":"markdown","114f7928":"markdown","41709e0f":"markdown","a978a33c":"markdown","49f52767":"markdown","82feaa53":"markdown","8c362583":"markdown","b8c523e4":"markdown","dce0e7bd":"markdown","ab3f52cb":"markdown","0f509f13":"markdown","f9a30ab4":"markdown","b4bfd4c8":"markdown","46f83f75":"markdown","eacd36ca":"markdown","97708ab3":"markdown","0ab30871":"markdown","8aaaa348":"markdown","cd595de0":"markdown","7973215f":"markdown","610cfcb4":"markdown","ad3824a6":"markdown","40ef0c19":"markdown","0d3fbb3b":"markdown","3e592dbf":"markdown","4a63db1f":"markdown","b6a93998":"markdown","add6d94b":"markdown","1ec3e309":"markdown","39284a47":"markdown","f7ac0ef7":"markdown","866e16ea":"markdown","93091a85":"markdown"},"source":{"d7bc819a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3e0a2e8b":"d1=pd.read_csv('\/kaggle\/input\/book1.csv')","7fb9e022":"print(d1.shape)","b1013174":"#Printing head\nd1.head()","a41d3904":"print(d1['Type'].unique())","4dc872b8":"print(d1['Target'].value_counts())","9a626b60":"# Importing modules\nimport networkx as nx\n\n# Creating an empty graph object\nb1 = nx.Graph()","afa4b3ed":"for _, edge in d1[:50].iterrows():\n    b1.add_edge(edge['Source'], edge['Target'], weight=edge['weight'])","804fa78c":"print(\"Total number of nodes: \", int(b1.number_of_nodes())) ","ea7ba370":"print(\"Total number of edges: \", int(b1.number_of_edges())) ","2bc1e40d":"print(\"List of all nodes: \", list(b1.nodes())) ","d92221a0":"print(\"List of all edges: \", list(b1.edges(data = True))) \n","ba43b7e3":"print(\"Degree for all nodes: \", dict(b1.degree())) ","9abdd56a":"  \nprint(\"List of all nodes we can go to in a single step from node of Jaime-Lannister\t: \", \n                                                 list(b1.neighbors('Jaime-Lannister'))) ","299395d7":"# fixing the size of the figure \nplt.figure(figsize =(20, 20)) \npos = nx.fruchterman_reingold_layout(b1) \nnode_color = [b1.degree(v) for v in b1] \n# node colour is a list of degrees of nodes \n\nnode_size = 100\n# size of node \nedge_width = [0.15 * b1[u][v]['weight'] for u, v in b1.edges()] \n# width of edge is a list of weight of edges \n\nnx.draw_networkx(b1,pos, node_size = node_size, \n                node_color = 'green', alpha = 0.7, \n                with_labels = True, width = edge_width, \n                edge_color ='.4', cmap = plt.cm.Blues) \n\nplt.axis('off') \nplt.tight_layout(); \n","e004dbf0":"# fixing the size of the figure \nplt.figure(figsize =(20, 20)) \npos = nx.shell_layout(b1) \nnode_color = [b1.degree(v) for v in b1] \n# node colour is a list of degrees of nodes \n\nnode_size = 100\n# size of node \nedge_width = [0.15 * b1[u][v]['weight'] for u, v in b1.edges()] \n# width of edge is a list of weight of edges \n\nnx.draw_networkx(b1,pos, node_size = node_size, \n                node_color = 'green', alpha = 0.7, \n                with_labels = True, width = edge_width, \n                edge_color ='.4', cmap = plt.cm.Blues) \n\nplt.axis('off') \nplt.tight_layout(); \n","9cdd99db":"# fixing the size of the figure \nplt.figure(figsize =(20, 20)) \npos = nx.kamada_kawai_layout(b1) \nnode_color = [b1.degree(v) for v in b1] \n# node colour is a list of degrees of nodes \n\nnode_size = 100\n# size of node \nedge_width = [0.15 * b1[u][v]['weight'] for u, v in b1.edges()] \n# width of edge is a list of weight of edges \n\nnx.draw_networkx(b1,pos, node_size = node_size, \n                node_color = 'green', alpha = 0.7, \n                with_labels = True, width = edge_width, \n                edge_color ='.4', cmap = plt.cm.Blues) \n\nplt.axis('off') \nplt.tight_layout(); \n","94ccbf3b":"# fixing the size of the figure \nplt.figure(figsize =(20, 20)) \npos = nx.spring_layout(b1) \nnode_color = [b1.degree(v) for v in b1] \n# node colour is a list of degrees of nodes \n\nnode_size = 100\n# size of node \nedge_width = [0.15 * b1[u][v]['weight'] for u, v in b1.edges()] \n# width of edge is a list of weight of edges \n\nnx.draw_networkx(b1,pos, node_size = node_size, \n                node_color = 'green', alpha = 0.7, \n                with_labels = True, width = edge_width, \n                edge_color ='.4', cmap = plt.cm.Blues) \n\nplt.axis('off') \nplt.tight_layout(); \n","9146355c":"# Creating a list of networks for all the books\nbooks = [b1]","9b8f6559":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[0])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book1 =  sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 10 of book1 and book5\nfor i in range(len(sorted_deg_cen_book1)):\n    print(sorted_deg_cen_book1[i][0])# Printing out the top 5 of book1","f80a40ae":"book_fnames = ['\/kaggle\/input\/book2.csv','\/kaggle\/input\/book3.csv','\/kaggle\/input\/book4.csv','\/kaggle\/input\/book5.csv']\nfor book_fname in book_fnames:\n    book = pd.read_csv(book_fname)\n    G_book = nx.Graph()\n    for _, edge in book.iterrows():\n        G_book.add_edge(edge['Source'], edge['Target'], weight=edge['weight'])\n    books.append(G_book)","0bdd589e":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[1])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book1 =  sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book1 and book5\nfor i in range(len(sorted_deg_cen_book1)):\n    print(sorted_deg_cen_book1[i][0])# Printing out the top 5 of book1","f45e54a7":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[2])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book1 =  sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book1 and book5\nfor i in range(len(sorted_deg_cen_book1)):\n    print(sorted_deg_cen_book1[i][0])# Printing out the top 5 of book1","aef6215b":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[3])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book1 =  sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book1 and book5\nfor i in range(len(sorted_deg_cen_book1)):\n    print(sorted_deg_cen_book1[i][0])# Printing out the top 5 of book1","45ddb91c":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[4])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book1 =  sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book1 and book5\nfor i in range(len(sorted_deg_cen_book1)):\n    print(sorted_deg_cen_book1[i][0])# Printing out the top 5 of book1","cb2b6730":"closeness=nx.closeness_centrality(b1)\nsorted_clo_cen_book1=sorted(closeness.items(), key=lambda item: item[1],reverse=True)[:5]\n\n# Printing out the top 5 of book1 \nfor i in range(len(sorted_clo_cen_book1)):\n    print(sorted_clo_cen_book1[i][0])# Printing out the top 5 of book1","ad3a2c17":"# Calculating the degree centrality of book 2\ndeg_cen_book2 = nx.closeness_centrality(books[1])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book2 =  sorted(deg_cen_book2.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book2\nfor i in range(len(sorted_deg_cen_book2)):\n    print(sorted_deg_cen_book2[i][0])# Printing out the top 5 of book2","a71e0ceb":"# Calculating the degree centrality of book 3\ndeg_cen_book3 = nx.closeness_centrality(books[2])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book3 =  sorted(deg_cen_book3.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book3\nfor i in range(len(sorted_deg_cen_book3)):\n    print(sorted_deg_cen_book3[i][0])# Printing out the top 5 of book3","a2698a34":"# Calculating the degree centrality of book 4\ndeg_cen_book4 = nx.closeness_centrality(books[3])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book4 =  sorted(deg_cen_book4.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of book4\nfor i in range(len(sorted_deg_cen_book4)):\n    print(sorted_deg_cen_book4[i][0])# Printing out the top 5 of book4","27c74d19":"# Calculating the degree centrality of book 5\ndeg_cen_book5 = nx.closeness_centrality(books[4])\n\n# Sorting the dictionaries according to their degree centrality and storing the top 5\nsorted_deg_cen_book5 =  sorted(deg_cen_book5.items(), key=lambda x:x[1], reverse=True)[0:5]\n\n# Printing out the top 5 of  book5\nfor i in range(len(sorted_deg_cen_book5)):\n    print(sorted_deg_cen_book5[i][0])# Printing out the top 5 of book5","da7eb76d":"# print('ECENTRICITY')\n# data=nx.eccentricity(books[0])\n# book_ec=pd.DataFrame(data.items(),columns=['Characters','Shortest_Path'])\n# book_ec.head(10)","e870c9a6":"print('ECENTRICITY')\ndata=nx.eccentricity(books[1])\nbook1_ec=pd.DataFrame(data.items(),columns=['Characters','Shortest_Path'])\nbook1_ec.head(10)","b17f8ce9":"print(\"Diameter: \", nx.diameter(books[1])) \nprint(\"Radius: \", nx.radius(books[1])) \nprint(\"Preiphery: \", list(nx.periphery(books[1]))) \nprint(\"Center: \", list(nx.center(books[1]))) ","83c8e1d8":"print('ECENTRICITY')\ndata=nx.eccentricity(books[2])\nbook_ec=pd.DataFrame(data.items(),columns=['Characters','Shortest_Path'])\nbook_ec.head(10)","0ee52f09":"print(\"Diameter: \", nx.diameter(books[2])) \nprint(\"Radius: \", nx.radius(books[2])) \nprint(\"Preiphery: \", list(nx.periphery(books[2]))) \nprint(\"Center: \", list(nx.center(books[2]))) ","c0e8c0fc":"print('ECENTRICITY')\ndata=nx.eccentricity(books[3])\nbook_ec=pd.DataFrame(data.items(),columns=['Characters','Shortest_Path'])\nbook_ec.head(10)","3c15a96f":"print(\"Diameter: \", nx.diameter(books[3])) \nprint(\"Radius: \", nx.radius(books[3])) \nprint(\"Preiphery: \", list(nx.periphery(books[3]))) \nprint(\"Center: \", list(nx.center(books[3]))) ","6d45c091":"print('ECENTRICITY')\ndata=nx.eccentricity(books[4])\nbook_ec=pd.DataFrame(data.items(),columns=['Characters','Shortest_Path'])\nbook_ec.head(10)","57869146":"print(\"Diameter: \", nx.diameter(books[4])) \nprint(\"Radius: \", nx.radius(books[4])) \nprint(\"Preiphery: \", list(nx.periphery(books[4]))) \nprint(\"Center: \", list(nx.center(books[4]))) ","5a45e7b0":"%matplotlib inline\n\n# Creating a list of closeness centrality of all the books\nevolution = [nx.closeness_centrality(book) for book in books]\n \n# Creating a DataFrame from the list of degree centralities in all the books\ndegree_evol_df = pd.DataFrame.from_records(evolution)\n\n# Plotting the closeness centrality evolution\ndegree_evol_df[['Aegon-I-Targaryen', 'Tyrion-Lannister', 'Jon-Snow','Daenerys-Targaryen','Aemon-Targaryen-(Maester-Aemon)']].plot()","234ff4df":"# Creating a list of pagerank of all the characters in all the books\nevolution_pagerank = [nx.pagerank(book) for book in books]\n\n# Making a DataFrame from the list\npagerank_evol_df = pd.DataFrame.from_records(evolution_pagerank)\n\n# Finding the top 4 characters in every book\nset_of_char = set()\nfor i in range(5):\n    set_of_char |= set(list(pagerank_evol_df.T[i].sort_values(ascending=False)[0:5].index))\nlist_of_char = list(set_of_char)\n\n# Plotting the top characters\npagerank_evol_df[list_of_char].plot(figsize=(20, 13))","94229033":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the fifth book.\nimport seaborn  as sns\nmeasures = [nx.pagerank(books[4]), \n            nx.closeness_centrality(books[4]), \n            nx.degree_centrality(books[4])]\n\n# Creating the correlation DataFrame\ncor5 = pd.DataFrame.from_records(measures)\n\n# Calculating the correlation\ncorr5=cor5.T.corr()\nprint(corr5)\nax = sns.heatmap(\n    corr5, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=256),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=360,\n    horizontalalignment='right'\n);","70304b26":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the fifth book.\nimport seaborn  as sns\nmeasures = [nx.pagerank(books[0]), \n            nx.closeness_centrality(books[0]), \n            nx.degree_centrality(books[0])]\n\n# Creating the correlation DataFrame\ncor1 = pd.DataFrame.from_records(measures)\n\n\n# Finding the most important character in the fifth book,  \n# according to degree centrality, betweenness centrality and pagerank.\np_rank, c_cent, d_cent = cor1.idxmax(axis=1)\n\n# Printing out the top character accoding to the Page Rank\nprint(p_rank)","f6570fa3":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the fifth book.\nimport seaborn  as sns\nmeasures = [nx.pagerank(books[1]), \n            nx.closeness_centrality(books[1]), \n            nx.degree_centrality(books[1])]\n\n# Creating the correlation DataFrame\ncor1 = pd.DataFrame.from_records(measures)\n\n\n# Finding the most important character in the fifth book,  \n# according to degree centrality, betweenness centrality and pagerank.\np_rank, c_cent, d_cent = cor1.idxmax(axis=1)\n\n# Printing out the top character accoding to the Page Rank\nprint(p_rank)","e2b7f7b6":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the fifth book.\nimport seaborn  as sns\nmeasures = [nx.pagerank(books[2]), \n            nx.closeness_centrality(books[2]), \n            nx.degree_centrality(books[2])]\n\n# Creating the correlation DataFrame\ncor1 = pd.DataFrame.from_records(measures)\n\n\n# Finding the most important character in the fifth book,  \n# according to degree centrality, betweenness centrality and pagerank.\np_rank, c_cent, d_cent = cor1.idxmax(axis=1)\n\n# Printing out the top character accoding to the Page Rank\nprint(p_rank)","df98034e":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the fifth book.\nimport seaborn  as sns\nmeasures = [nx.pagerank(books[3]), \n            nx.closeness_centrality(books[3]), \n            nx.degree_centrality(books[3])]\n\n# Creating the correlation DataFrame\ncor1 = pd.DataFrame.from_records(measures)\n\n\n# Finding the most important character in the fifth book,  \n# according to degree centrality, betweenness centrality and pagerank.\np_rank, c_cent, d_cent = cor1.idxmax(axis=1)\n\n# Printing out the top character accoding to the Page Rank\nprint(p_rank)","107ff66f":"# Finding the most important character in the fifth book,  \n# according to degree centrality, betweenness centrality and pagerank.\np_rank, c_cent, d_cent = cor5.idxmax(axis=1)\n\n# Printing out the top character accoding to the Page Rank\nprint(p_rank)","364c5546":"#### BOOK4","de4ad632":"#### 5.Degree Of ALL NODES\nDegree= Number of Edges Connected from A Node","d726156b":"# 7. Correlation between different <font color='red'>Metrics<\/font>","c4decaa2":"### BOOK5","72cfb2a2":"### BOOK3","8e8d05ad":"### BOOK1","631822e5":"#### 2. Shell Layout","c26edefe":"#### 4. List of ALL Edges","593c201a":"## Measuring Importance Of <font color='red'>Characters<\/font> in Each Book using <font color='red'>Degree of Centrality<\/font>","8bc2bbd3":"<font  color='red'>Jon-Snow<\/font>\n![](https:\/\/hips.hearstapps.com\/hmg-prod.s3.amazonaws.com\/images\/jon-snow-rhaegar-targaryen-1554321615.jpg?crop=0.482xw:0.962xh;0,0&resize=720:*)","28cc7740":"#### 3. List of ALL Nodes","66d560f2":"**This is based on the assumption that important nodes are close to other nodes. It is calculated as the sum of the path lengths from the given node to all other nodes. But for a node which cannot reach all other nodes, closeness centrality is measured using the following formula :**\n\n![](https:\/\/www.geeksforgeeks.org\/wp-content\/ql-cache\/quicklatex.com-45d682e6f2e3eed50c0409bc0003582c_l3.svg)\n\nwhere, R(v) is the set of all nodes v can reach.\n\n\n### Example of Closeness Centrality\n\n![](https:\/\/www.cdn.geeksforgeeks.org\/wp-content\/uploads\/closeness-centrality.png)\n\n\n","363bfd39":"**Centrality** Measures allows us to pinpoint the most important nodes of a Graph. This essentially helps us to identify :\n\n * Influential nodes in a Social Network.\n * Nodes that disseminate information to many nodes\n * Hubs in a transportation network\n * Important pages in the Web\n * Nodes that prevent the Network from breaking up","2f854646":"#### 1. Total Number Of Nodes","bbd28a81":"<font color='red'>ARYA-STARK<\/font>\n![](https:\/\/cdn.pinkvilla.com\/files\/styles\/contentpreview\/public\/arya%20starkk%20main%20image.png?itok=HGJ12kmO)","601bbaa6":"## <font color='green'>Book3<\/font>","2bbbf1e6":"we will use Networkx for the Network analysis\npresent [here](https:\/\/networkx.github.io\/documentation\/networkx-1.10\/tutorial\/tutorial.html)","0139be53":"#### BOOK5","c87980c6":"From Above analysis of **Closeness** and **Degree** Centrality we can clearly see that importance of Character has changed Drastically in Each Book.\n### Example is <font color='red'>Aegon-I-Targaryen<\/font> and <font color='red'>Daenerys-Targaryen<\/font> were only Till <font color='red'>Book3<\/font> and were ABSENT in <font color='red'>Book4<\/font> and <font color='red'>Book5<\/font>","8a382d25":"#### BOOK3","a8013b77":"# <font color='red'>Error Reason for Book1<\/font>\n### The reason was because we saw that all the Edges are Undirected for BOOK1","d56aa012":"#### 1. Fruchterman ReinGold Layout","72fd78e8":"## Most Important Characters acc. to Closeness Centrality\n## From <font color='red'>Book1<\/font> to <font color='green'>Book5<\/font>","f5902aa2":"## <font color='Dark'>Yes<\/font>\n### 1.Degree Centrality\n\nThis is based on the assumption that important nodes have many connections.\n\n![](https:\/\/www.geeksforgeeks.org\/wp-content\/ql-cache\/quicklatex.com-e0199c94895ce7620ebc12054740cc5d_l3.svg)\n\nwhere **d_v** is the **Degree of node** **v** and **N** is the **set of all nodes** of the Graph.","4141838d":"# 4. The Most Important Character In Each <font color='red'>Book<\/font>","f2c12e54":"# 6. Page Rank is <font color='red'> Heart<\/font> of Google <font color='red'>Web Search<\/font>.","902b613b":"# 3. PreRequisite Knowledge:-","51567654":"We will Find **Corelation** Between **Page Rank** and **Closeness centrality**,**Degree centrality** for Each Book. Because according to Each metric **Different** Chracters are Important\nIn Each Book","865b1d8b":"### Trying Different Layouts ","220657d9":"#### BOOK2","14abcd9f":"**Page Rank** Algorithm was developed by **Google** founders to measure the importance of webpages from the hyperlink network structure. **Page Rank** assigns a score of importance to each node. Important nodes are those with many inlinks from important pages. It mainly works for **Directed Networks**.","03081258":"##  <font color='green'>Book1<\/font>","4a7d4100":"# We Will Decide The Most Important Characters in each Book according to <font color='Blue'>PAGE RANK<\/font>\n\nYou can choose other metrics\n","f60a092f":"#### 2. Total Number of Edges","0e7bf0c6":"<font color='red'>Tyrion-Lannister<\/font>\n![](https:\/\/i.insider.com\/59289152519a491c008b45ef?width=1136&format=jpeg)","dfa05838":"### <font color='blue'>Book2<\/font>","989f8288":"## <font color='green'>Book2<\/font>","114f7928":"<font color='green'> Hope you liked my work<\/font>","41709e0f":"## <font color='green'>Book4<\/font>","a978a33c":"## Uncomment the above cell to see the Error","49f52767":"## Few important characteristics of a Graph :\u2013\n\n* **Eccentricity**: For a node n in a graph G, the eccentricity of n is the largest possible shortest path distance between n and all other nodes.\n* **Diameter** : The maximum shortest distance between a pair of nodes in a graph G is its Diamater. It is the largest possible eccentricity value of a node.\n* **Radius** : It is the minimum eccentricity value of a node.\n* **Periphery** : It is the set of nodes that have their eccentricity equal to their Diameter.\n* **Center** : Center of a Graph is the set of nodes whose eccentricity is equal to the radius of the Graph.","82feaa53":" <font  color='red'>Jon Snow<\/font>","8c362583":"### <font color='blue'>Book4<\/font>","b8c523e4":"### BOOK2","dce0e7bd":"For this Task, we will analyze the co-occurrence network of the characters in the GOT books. \nThis dataset constitutes a network and is given as a text file describing the edges between characters, with some attributes attached to each edge. Let's start by loading in the data for the first book A Game of Thrones and inspect it.","ab3f52cb":"## What we Understood\n1. The Datset has 5 columns **Source,Target,Type,Weight,Book**.\n2. Source and target are the two nodes that are linked by an edge.\n3. **Type** Represents the Edges a Network Can have. In The Book1 we have all the **Undirected** Edges.\n4. The **weight** attribute of every edge tells us the number of interactions that the characters have had over the book","0f509f13":"## Some Early Analysis","f9a30ab4":"# 8. WHO MADE THE MARK IN EACH <font color='red'>BOOK<\/font>\n**\nNow we will find which is the Most Important Character In each Book**","b4bfd4c8":"# 3. Filling The Graph This is where Story <font color='red'>Begins<\/font>","46f83f75":"## Adding Nodes\n> 1. G.add_nodes_from([1,2,3,4,7,9])\n \n![here](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/creatingNodes.jpg)\n## CreatingEdges\n> 2. G.add_edge(1,2)\n\nsimilarly other edges can be added . we  After adding edges **(1,2), (3,1), (2,4), (4,1), (9,1), (1,7), (2,9)**\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/creatingEdges.jpg)\n","eacd36ca":"# Ok Can you Tell Me What Is Centrality?\n","97708ab3":"# Getting More Information from <font color='red'>Graph<\/font> ","0ab30871":"For complete Tutorial refer [here](https:\/\/www.geeksforgeeks.org\/networkx-python-software-package-study-complex-networks\/)","8aaaa348":"# 2. Building the <font color='Red'>Nexus<\/font>","cd595de0":"## <font color='green'>Book5<\/font>","7973215f":"#### 6. <font color='red'>An Example<\/font> to find Direct Edges from A Node","610cfcb4":"### BOOK4","ad3824a6":"### <font color='blue'>Book1<\/font>","40ef0c19":"#### 3. kamada_kawai_layout","0d3fbb3b":"<font  color='red'>Cersei-Lannister<\/font>\n![](https:\/\/media.glamour.com\/photos\/5cb469eeb079812e17ada5f1\/16:9\/w_2560%2Cc_limit\/5f8f248d9a5dfbefe114c63092d035e6b3392d40130c5e87aa865f91eb78f50b.jpg)","3e592dbf":"# 1. Loading The Game","4a63db1f":"#### Here we will find correlation for Book 5 only you can use the same technique for all other 4 books","b6a93998":"### <font color='blue'>Book3<\/font>","add6d94b":"# 5. How Importance of <font color='red'>CHARACTERS<\/font> Has Changed Gradually","1ec3e309":"#### BOOK1","39284a47":"![](https:\/\/hips.hearstapps.com\/hmg-prod.s3.amazonaws.com\/images\/jon-snow-rhaegar-targaryen-1554321615.jpg?crop=0.482xw:0.962xh;0,0&resize=1080:*)","f7ac0ef7":"## 2. <font color='red'>Closeness Centrality<\/font>","866e16ea":"#### 4. spring_layout","93091a85":"### <font color='blue'>Book5<\/font>"}}