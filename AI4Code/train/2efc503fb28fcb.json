{"cell_type":{"71450d1c":"code","77fed762":"code","f0edc02e":"code","cd774832":"code","3c02ebfe":"code","b86b5166":"code","63e62e8d":"code","37a5c5f5":"code","15c38e36":"code","aa2f49c9":"code","7b2e0191":"code","d64e495b":"code","ce8a8cf8":"code","76a828f4":"code","f91094ba":"code","99270d55":"code","eb186991":"code","f14bb12f":"code","54928457":"code","4d7e1fe9":"code","c36f91bb":"code","174cf897":"code","4f6f37f6":"code","dcbc1538":"code","4e87dd1e":"markdown","379ab5a1":"markdown","49b5e205":"markdown","dc0bb927":"markdown","eb6afb76":"markdown","489a449e":"markdown","28c90a9d":"markdown","e6faeb8d":"markdown","44911d13":"markdown","ae28df50":"markdown","c0007b8b":"markdown","e31ac133":"markdown"},"source":{"71450d1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as p # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math as mt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77fed762":"p.__version__ #Which Version Pandas we use\n","f0edc02e":"np.__version__\n","cd774832":"sns.__version__","3c02ebfe":"df=p.read_csv(\"..\/input\/adult.csv\")#Import Adult Data","b86b5166":"df.info()       # memory footprint and datatypes","63e62e8d":"df.all()","37a5c5f5":"df.head()       # first five rows","15c38e36":"df.tail()       # last five rows","aa2f49c9":"df.describe()   # calculates measures of central tendency","7b2e0191":"df.sample(5)    # random sample of rows","d64e495b":"df.shape        # number of rows\/columns in a tuple","ce8a8cf8":"Male=(df[df.sex==\" Male\"]) # Filter By sex columns for Male","76a828f4":"Male.sex.unique()","f91094ba":"Female=(df[df.sex==\" Female\"]) # Filter By sex columns for Female","99270d55":"Female.sex.unique()","eb186991":"df.sex.unique()","f14bb12f":"df.columns","54928457":"df.groupby('race').count() # group by race all data ","4d7e1fe9":"fig = plt.figure(figsize=(20,15))\ncols = 5\nrows = mt.ceil(float(df.shape[1]) \/ cols)\nfor i, column in enumerate(df.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if df.dtypes[column] == np.object:\n        df[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        df[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","c36f91bb":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndf.capital_gain.plot(kind = 'line', color = 'g',label = 'capital_gain',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndf.capital_loss.plot(color = 'r',label = 'hours_per_week',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()\n","174cf897":"# Scatter Plot \n# x = capital_gain, y = hours_per_week\ndf.plot(kind='scatter', x='capital_gain', y='hours_per_week',alpha = 0.5,color = 'red')\nplt.xlabel('capital_gain')              # label = name of label\nplt.ylabel('hours_per_week')\nplt.title('capital_gain-hours_per_week Scatter Plot')            # title = title of plot\nplt.show()","4f6f37f6":"\n#correlation map\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(Female.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","dcbc1538":"# Histogram\n# bins = number of bar in figure\ndf.age.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","4e87dd1e":"When we want to examine the data in our dataset by age, a chart like the one below is born.","379ab5a1":"Then we load our data set","49b5e205":"**Analysis of the Adult data set from Pyton**\n\nThis data set is a dual class classification to estimate that one's income does not exceed 50,000 per year based on some census data.\nOur goal here is to keep and improve the knowledge I have learned in Data scientist courses.","dc0bb927":"We assess weekly earnings visually differently.","eb6afb76":"At first we are evaluating weekly earnings visually.","489a449e":"First we check the library versions we have used","28c90a9d":"We then check our data set (record, info, column based)","e6faeb8d":"We can begin visual analysis of our Data Set","44911d13":"We first cycle through the data coming from the columns of our data set and look at the different data.","ae28df50":"We are looking at the links of the fields of female data ","c0007b8b":"We separate our  data gender-based  and  checks data again","e31ac133":"**Attribute Information:**\n\nListing of attributes:\n\n>50K, <=50K.\n\n    age: continuous.\n    workclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.\n    fnlwgt: continuous.\n    education: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.\n    education-num: continuous.\n    marital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.\n    occupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.\n    relationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.\n    race: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.\n    sex: Female, Male.\n    capital-gain: continuous.\n    capital-loss: continuous.\n    hours-per-week: continuous.\n    native-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands."}}