{"cell_type":{"4161afbc":"code","a7b20b8f":"code","d66a40f5":"code","b12b7186":"code","92ab305f":"code","09975b5f":"code","0187cab9":"code","1695b882":"code","a24491fd":"code","1396d229":"code","a582914c":"code","97092245":"code","c424e6f1":"code","7a248b40":"code","a2ba398d":"code","c6af7f7d":"code","1e5f9698":"code","68f50894":"code","041175fe":"code","f6eaf717":"code","194d40d7":"code","aa987a16":"code","3a458ee3":"code","d8240278":"code","b608d820":"code","fdbcb199":"code","9e52a369":"code","5c1c6c57":"code","9894c38e":"code","d993f18a":"markdown","2a9387b5":"markdown","2df3e759":"markdown","1e04765a":"markdown","7e6d1160":"markdown"},"source":{"4161afbc":"# Data Libraries\nimport pandas as pd\nimport numpy as np\n\n# Visualization Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nsns.set(style=\"darkgrid\")\n\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","a7b20b8f":"# Read in the data\nf = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')","d66a40f5":"# Basic info of Data set\nf.info()","b12b7186":"# List of Columns\nf.columns\nf.rename({'Chance of Admit ': 'Chance of Admit', 'LOR ':'LOR'}, axis=1, inplace=True)\nf.columns","92ab305f":"# Basic Statistics on numeric columns\nf.describe()","09975b5f":"# Read first 5 values using head()\nf.head()","0187cab9":"# Correlation Heatmap\nf = f.drop('Serial No.',axis = 1)\nsns.heatmap(f.corr())","1695b882":"# Finding which parameter has the strong correlation with 'Chance of Admit'\nf.corr()['Chance of Admit'].sort_values()","a24491fd":"# Distribution of CGPA\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['CGPA'], marker_color='white'))\n\nfig.update_layout(title='Distribution of CGPA',bargap=0.05,\n                  xaxis = dict(title = 'CGPA'),\n                  yaxis = dict(title = 'Number of Students')\n                 )\nfig.show()","1396d229":"# Distribution of GRE Scores\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['GRE Score'], marker_color='white'))\n\nfig.update_layout(title='Distribution of GRE Score',bargap=0.05,\n                  xaxis = dict(title = 'GRE Score'),\n                  yaxis = dict(title = 'Number of Students')\n                 )\nfig.show()","a582914c":"# Distribution of TOEFL Scores\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['TOEFL Score'], marker_color='white'))\n\nfig.update_layout(title='Distribution of TOEFL Score',bargap=0.05,\n                  xaxis = dict(title = 'TOEFL Score'),\n                  yaxis = dict(title = 'Number of Students')\n                 )\nfig.show()","97092245":"# CGPA Analysis\n\nbins = [6, 7.01, 8.01, 9.01]\nnames = ['6 to 7', '7.01 to 8', '8.01 to 9','9+']\nd = dict(enumerate(names, 1))\nf['CGPA_Category'] = np.vectorize(d.get)(np.digitize(f['CGPA'], bins))\n\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['CGPA_Category'], marker_color='#5852a8'))\n\nfig.update_layout(title='Number of Students Categorised by CGPA',\n                  xaxis = dict(title = 'CGPA_Category'),\n                  yaxis = dict(title = 'Number of Students'),\n                  bargap=0.05\n                 )\nfig.show()","c424e6f1":"# Admit chances as per CGPA Category\n\nfig = px.box(f,x = f['CGPA_Category'], y = f['Chance of Admit'],\n             color= 'Research', title=\"Box plot of Chance of Admit for Each CGPA Category (Categorised by Research & No-Research Students)\"\n             )\nfig.show()","7a248b40":"# GRE Score Analysis\n\nbins = [290, 301, 311, 321, 331]\nnames = ['<=300', '301 - 310', '311 - 320','321 - 330','330+']\nd = dict(enumerate(names, 1))\nf['GRE_Category'] = np.vectorize(d.get)(np.digitize(f['GRE Score'], bins))\n\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['GRE_Category'], marker_color='#5852a8'))\n\nfig.update_layout(title='Number of Students Categorised by GRE',\n                  xaxis = dict(title = 'GRE_Category'),\n                  yaxis = dict(title = 'Number of Students'),\n                  bargap=0.05\n                 )\nfig.show()","a2ba398d":"# Admit chances as per GRE Score Category\n\nfig = px.box(f,x = f['GRE_Category'], y = f['Chance of Admit'],\n             color= 'Research', title=\"Box plot of Chance of Admit for Each GRE Score Category (Categorised by Research & No-Research Students)\"\n             )\nfig.show()","c6af7f7d":"# TOEFL Score Analysis\n\nbins = [91, 101, 111]\nnames = ['91 - 100','101 - 110','110+']\nd = dict(enumerate(names, 1))\nf['TOEFL_Category'] = np.vectorize(d.get)(np.digitize(f['TOEFL Score'], bins))\n\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(x = f['TOEFL_Category'], marker_color='#5852a8'))\n\nfig.update_layout(title='Number of Students Categorised by TOEFL',\n                  xaxis = dict(title = 'TOEFL_Category'),\n                  yaxis = dict(title = 'Number of Students'),\n                  bargap=0.05\n                 )\nfig.show()","1e5f9698":"# Admit chances as per TOEFL Score Category\n\nfig = px.box(f,x = f['TOEFL_Category'], y = f['Chance of Admit'],\n             color= 'Research', title=\"Box plot of Chance of Admit for Each TOEFL Score Category (Categorised by Research & No-Research Students)\"\n             )\nfig.show()","68f50894":"# Admit chances as per GRE Score and TOEFL Score Category\n\nfig = px.box(f,x = f['GRE_Category'], y = f['Chance of Admit'],\n             color= 'TOEFL_Category', title=\"Box plot of Chance of Admit for Each GRE Score Category (Categorised by TOEFL Score)\"\n             )\nfig.show()","041175fe":"# Admit chances as per GRE Score and SOP Rating Category\n\nfig = px.box(f,x = f['SOP'], y = f['Chance of Admit'],\n             color= 'GRE_Category', title=\"Box plot of Chance of Admit for Each SOP Rating Category (Categorised by GRE Score)\"\n             )\nfig.show()","f6eaf717":"# Admit chances as per GRE Score and LOR Rating Category\n\nfig = px.box(f,x = f['LOR'], y = f['Chance of Admit'],\n             color= 'GRE_Category', title=\"Box plot of Chance of Admit for Each LOR Rating Category (Categorised by GRE Score)\"\n             )\nfig.show()","194d40d7":"# Admit chances as per SOP and LOR Rating Category\n\nfig = px.box(f,x = f['LOR'], y = f['Chance of Admit'],\n             color= 'SOP', title=\"Box plot of Chance of Admit for Each LOR Rating Category (Categorised by SOP Rating)\"\n             )\nfig.show()","aa987a16":"# Admit chances as per GRE_Category and CGPA_Category\n\nfig = px.box(f,x = f['GRE_Category'], y = f['Chance of Admit'],\n             color= 'CGPA_Category', title=\"Box plot of Chance of Admit for Each GRE Score Category (Categorised by CGPA Category)\"\n             )\nfig.show()","3a458ee3":"# Admit chances as per GRE_Category and University Rating\n\nfig = px.box(f,x = f['GRE_Category'], y = f['Chance of Admit'],\n             color= 'University Rating', title=\"Box plot of Chance of Admit for Each GRE Score Category (Categorised by University Rating)\"\n             )\nfig.show()","d8240278":"# Admit chances as per CGPA_Category and University Rating\n\nfig = px.box(f,x = f['CGPA_Category'], y = f['Chance of Admit'],\n             color= 'University Rating', title=\"Box plot of Chance of Admit for Each CGPA Category (Categorised by University Rating)\"\n             )\nfig.show()","b608d820":"from sklearn.model_selection import train_test_split\n\nX = f.drop(['Chance of Admit','CGPA_Category','GRE_Category','TOEFL_Category'], axis=1)\ny = f['Chance of Admit']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.1, random_state=0)","fdbcb199":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\n\nplr = lr.fit(X_train, y_train)\npredictions = lr.predict(X_test)","9e52a369":"# Let's grab predictions off our test set and see how well it did!\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=y_test,\n                y=predictions,\n                marker_color='white',\n                mode='markers'\n                ))\nfig.update_layout(title='Predicted Chance of Admit vs Actual Chance of Admit',\n                  xaxis = dict(title = 'Actual Chance of Admit'),\n                  yaxis = dict(title = 'Predicted Chance of Admit')\n                  )\nfig.show()","5c1c6c57":"from sklearn import metrics\n\nprint(\"Results...\")\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","9894c38e":"# Feature Importance using random forest regressor\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor()\nrfr.fit(X,y)\nfeature_names = X.columns\nimp_f = pd.DataFrame()\nimp_f['Parameters'] = X.columns\nimp_f['Parameters_Importance'] = rfr.feature_importances_\nimp_f = imp_f.sort_values(by=['Parameters_Importance'], ascending=0)\nimp_f['Parameters_Importance'] = round(imp_f['Parameters_Importance'],3)\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x = imp_f['Parameters'],\n                     y = imp_f['Parameters_Importance'],\n                     textposition = \"outside\",\n                     text = imp_f['Parameters_Importance']))\n\nfig.update_layout(title='Parameters Importance for High Chance of Admit',\n                  xaxis = dict(title = 'Parameters'),\n                  yaxis = dict(title = 'Parameters_Importance')\n                  )\n\nfig.show()","d993f18a":"### Import Libraries","2a9387b5":"# Exploratory Data Analysis\n\n#### Let's create some simple plots to check out the data!","2df3e759":"# Statistical Data Analysis Technique - Linear Regression","1e04765a":"### Check out the data","7e6d1160":"# Parameters Importance for High Chance of Admit"}}