{"cell_type":{"68249449":"code","658e42e5":"code","81b291c2":"code","736f3373":"code","5c188454":"code","075903bb":"code","7e88c8c8":"code","dda2b5f6":"code","c185becf":"code","d35ee1a6":"markdown","6c1f5a21":"markdown","c62889bd":"markdown","a3b5f410":"markdown","815f572d":"markdown","cf861e25":"markdown","f0bba407":"markdown","d6fc20de":"markdown","71242bb1":"markdown","32ae351f":"markdown"},"source":{"68249449":"def should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    return False","658e42e5":"# SETUP. You don't need to worry for now about what this code does or how it works. \n# If you're curious about the code, it's available under an open source license at https:\/\/github.com\/Kaggle\/learntools\/\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import q7 as blackjack\n# Returns a message \"Sorry, no auto-checking available for this question.\" (You can ignore.)\nblackjack.check()\nprint('Setup complete.')","81b291c2":"blackjack.simulate_one_game()\n","736f3373":"blackjack.simulate(n_games=50000)","5c188454":"# Load Matrices Files\n# Those pandas contains the \"Hit\" and \"Stand\" decision matrix\nimport pandas as pd\nhard_total = pd.read_csv(\"..\/input\/blackjack-decisions-matrices-from-wikipedia\/hard_total.csv\")\nsoft_total = pd.read_csv(\"..\/input\/blackjack-decisions-matrices-from-wikipedia\/soft_total.csv\")\n","075903bb":"### LIST OF PRINT FUNCTION VALUES \n### THEY WERE BUILT SO I HAVE ALL THE PRINT IN A CONVENIENT PLACE\n### Easier to comment the print I don't want that way -> less clutter in output\n### I need to do a version which uses an object later on\n### This would allow a simplified version of the verbose parameter \n### (i.e.: if output should be displayed and how much)\n\n# Function to output if we are in a \"Hard total\" case -> I.e: no aces in player's hand\ndef in_hard_total(verbose=0):\n    if(verbose == 0):\n        return False\n    else:\n        print(\"IN HARD TOTAL!!\")\n        return True\n# Function to output if we are in a \"Soft total\" case -> I.e: ONE ace in player's hand\n# Note for later: Figure out how to deal with dual aces cases -> hard total, soft total or an entire new matrix?\ndef in_soft_total(verbose=0):\n    if(verbose == 0):\n        return False\n    else:\n        print(\"IN HARD TOTAL!!\")\n        return True\n# Print function to check what values are currently being used\n# Mainly used for debugging and trying to figure where wrong decisions are being made\ndef check_values(player_total,dealer_card_val,player_aces,verbose=0):\n\n    if(verbose == 0):\n        return False\n        \n    print(\"************ NEW HAND*********\")\n    print(\"Player total : \" + str(player_total))\n    print(\"Dealer Card : \" + str(dealer_card_val))\n    print(\"player_aces : \" + str(player_aces))\n    \n    if (dealer_card_val == '1'):\n        print(\"\\n\\n\")\n        print(\"ACE for dealer? DAMMIT!!\")\n        print(\"\\n\\n\")\n    elif(dealer_card_val == '11'):\n        print(\"\\n\\n\")\n        print(\"Ace are apparently labeled as 11?!!\")\n        print(\"WAGGGGHHHHHHHHHHHHHHH !!! * angry frustrated ork warcry!!\")\n\n# Print function to check whether the player goes for a \"hit!\" or a \"!stand\"\ndef check_decision(decision,verbose=0):\n    \n    if(verbose == 0):\n        return False\n    \n    if decision:\n        print (\"HIT!\")\n    else:\n        print (\"STAND!\")\n    return True","7e88c8c8":"#FUNCTIONS TO ACCESS DECISION MATRICES\n\n\n#This function access the \"hard total\" matrix -> No aces\ndef hard_total_matrix(player_total,dealer_card_val,player_aces):\n    # Print functions to check value during code execution\n    # Reminder: Verbose=0 by default, meaning no printed output\n    in_hard_total()\n    check_values(player_total,dealer_card_val,player_aces)\n    \n    # Retrieve the corresponding row for decision\n    temp_row = hard_total.loc[(hard_total.Player == player_total)]\n    \n    #Retrieve the corresponding cell \n    #convert dealer_card_val to a str for retrieval\n    dealer_card = str(dealer_card_val)\n    list_value = temp_row[dealer_card]\n    final_value = list_value.iloc[0]\n        \n    #Return true or false based on the value of decision\n    # S for \"Stand\" (False)\n    # Else go for \"HIT\" (True) (or 'H')\n    if(final_value == 'S'):\n        decision = \"STAND\"\n        check_decision(decision)\n        return False\n    else:\n        decision= \" HIT!!\"\n        check_decision(decision)\n        return True\n\n#This function access the \"soft total\" matrix -> One ace\ndef soft_total_matrix(player_total,dealer_card_val,player_aces):\n    # Print functions to check value during code execution\n    # Reminder: Verbose=0 by default, meaning no printed output    \n    in_soft_total()\n    check_values(player_total,dealer_card_val,player_aces)\n\n    # Retrieve the corresponding row for decision\n    temp_row = soft_total.loc[(hard_total.Player == player_total)]\n    \n    #Retrieve the corresponding cell \n    #convert dealer_card_val to a str for retrieval\n    dealer_card = str(dealer_card_val)\n    list_value = temp_row[dealer_card]\n    final_value = list_value.iloc[0]\n    \n    #Return true or false based on the value of decision\n    # S for \"Stand\" (False)\n    # Else go for \"HIT\" (True) (or 'H')   \n    if(final_value == 'S'):\n        decision = \"STAND\"\n        check_decision(decision)\n        return False\n    else:\n        decision= \" HIT!!\"\n        check_decision(decision)\n        return True","dda2b5f6":"def should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    if(player_total == 21):\n        return False\n    elif(player_aces == 0):\n        return hard_total_matrix(player_total,dealer_card_val,player_aces)\n    elif(player_aces == 1):\n        return soft_total_matrix(player_total,dealer_card_val,player_aces)\n    else:\n        # What to do when we got two aces??\n        # Hard total, soft total or a entire new matrix and function?\n        # For the moment, we go for the \"soft total\" matrix but need to deal with it later on\n        return soft_total_matrix(player_total,dealer_card_val,player_aces)\n        return True\n    \n# import pandas as pd\n# hard_total = pd.read_csv(\"hard_total.csv\")\n# # print(\"Hardtotal matrix\")\n# # print(hard_total)\n# soft_total = pd.read_csv(\"soft_total.csv\")\n\nblackjack.simulate(n_games=50000)\n# print(\"\\n Unsure Total : \" + str(unsure))","c185becf":"# This is the 'lab' from my 'crazy experiments'\n# ie : this section is used for pratice and is not part of the main code :)\n\n\n# DRAFT VERSION USING PANDAS\n\nimport pandas as pd\nhard_total = pd.read_csv(\"hard_total.csv\")\nprint(\"Hardtotal matrix\")\nprint(hard_total)\nprint(\"\\Softotal Matrix\")\nsoft_total = pd.read_csv(\"soft_total.csv\")\n# print(\"\\nSoftotal matrix\")\nprint(soft_total)\n\n\nplayer_card = 21\ndealer_card = \"A\"\n\n# columns = hard_total.\ntemp_row = soft_total.loc[(hard_total.Player == player_card)]\n\n# temp_column = hard_total[dealer_card]\n# # value = temp.iloc[player_card][dealer_card]\n# # print(\"\\n Select Column\")\n# # print(temp_column)\n# print(\"\\n Select row\")\n# print(temp_row)\n# print(\"Selected value\")\n\n# \nlist_value = temp_row[dealer_card]\nprint(\"Type of dealer_card\")\nprint(type(dealer_card))\nprint(\"list value is : \" )\nprint(list_value)\nfinal_value = list_value.iloc[0]\nprint(\"\\n Final Value is : \" + str(final_value))\n# print(value)\n\n\n# # \"IMPORT SECTION \"  --> Area reserved to copy and paste code\n# temp_row = hard_total.loc[(hard_total.Player == player_card)]\n# list_value = temp_row[dealer_card]\n# final_value = list_value.iloc[0]\n\n### VERY FIRST DRAFT USING IF THEN ELSE\n  \n    \n#     #This decision matrix is being currently translated 'verbatim' from the following wikipedia page\n#     #https:\/\/en.wikipedia.org\/wiki\/Blackjack#Blackjack_strategy -\n#     # 'Basic Strategy' implementation\n    \n#     #Check the 'decision table' to be used (hard total, soft total etc ...)\n    \n#     #Check for 'Hard total' -> No ace\n#     if (players_aces == 0)\n#         return hard_total(player_total,dealer_card_val)\n#     else:\n#         return hard_total(player_total,dealer_card_val)\n    \n# #     if (player_total == 20 & player_aces == 1):\n# #         return False\n# #     if (player_total == 19 & player_aces == 1):\n# #         return False\n    \n    \n# #     if (player_total == 15):\n# #         if(dealer_card_val <= 6):\n# #             return False\n# #         else:\n# #             return True\n        \n# #     if player_total == 11:\n# #         return True\n# #     if player_total == 10:\n# #         return True\n    \n# #     if player_total <10:\n# #         return True\n# #     if player_total < dealer_card_val:\n        \n# #         if player_aces is True:\n# #             return True\n#     return True","d35ee1a6":"You can see how your player does in a sample of 50,000 games with the following command:","6c1f5a21":"We'll simulate games between your player agent and our own dealer agent by calling your function. So it must use the name `should_hit`.","c62889bd":"---\n**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n\n*How high can you get your win rate?  Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/58735) to discuss your results.*","a3b5f410":"**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n---\n","815f572d":"# Your Turn\n\nWrite your own `should_hit` function in the cell below. Then run the cell and see how your agent did in repeated play.","cf861e25":"Once you have run the set-up code, you can see the action for a single game of blackjack with the following line:","f0bba407":"# Blackjack Rules\n\nWe'll use a slightly simplified version of blackjack (aka twenty-one). In this version, there is one player (who you'll control) and a dealer. Play proceeds as follows:\n\n- The player is dealt two face-up cards. The dealer is dealt one face-up card.\n- The player may ask to be dealt another card ('hit') as many times as they wish. If the sum of their cards exceeds 21, they lose the round immediately.\n- The dealer then deals additional cards to himself until either:\n    - The sum of the dealer's cards exceeds 21, in which case the player wins the round, or\n    - The sum of the dealer's cards is greater than or equal to 17. If the player's total is greater than the dealer's, the player wins. Otherwise, the dealer wins (even in case of a tie).\n\nWhen calculating the sum of cards, Jack, Queen, and King count for 10. Aces can count as 1 or 11. (When referring to a player's \"total\" above, we mean the largest total that can be made without exceeding 21. So A+8 = 19, A+8+8 = 17.)\n\n# The Blackjack Player\nYou'll write a function representing the player's decision-making strategy. Here is a simple (though unintelligent) example.\n\n**Run this code cell** so you can see simulation results below using the logic of never taking a new card.","d6fc20de":"# Intro\n\nReady for a quick test of your logic and programming skills?\n\nIn today's micro-challenge, you will write the logic for a blackjack playing program.  Our dealer will test your program by playing 50,000 hands of blackjack. You'll see how frequently your program won, and you can discuss how your approach stacks up against others in the challenge.\n\n![Blackjack](http:\/\/www.hightechgambling.com\/sites\/default\/files\/styles\/large\/public\/casino\/table_games\/blackjack.jpg)","71242bb1":"# The Blackjack Simulator\n\nRun the cell below to set up our simulator environment:","32ae351f":"# Acknowledgements and Thank you\nThank you to the following people and organizations:\n\n- To google for the colab, playground, machine learning courses they provide for free (not just the crash course).\n- To Kaggle for providing these learning tools and environements as well as opportunities to practice\n- And most of all a big thank you to \"Uncle Frank\". I followed his courses on skillshare and this guy is really the\n\"Batman\" of teaching Machine learning, especially to total newbies like me.\n\nYou can find Frank Kane's courses here:\n1) Skillshare : https:\/\/www.skillshare.com\/user\/fkane\n2) Udemy : https:\/\/www.udemy.com\/user\/frank-kane-2\/\n3) Facebook : https:\/\/www.facebook.com\/groups\/142114343040195\/about\/\n4) Official sundog site : https:\/\/sundog-education.com\/\n\n\nThis is my (newbie) attempt at the micro blackjack challenge. \nAs I am very new to machine learning and python in general, this felt like very good practice.\n\n# 1. Analysis of the problem:\nSince Blackjack is a pretty well known game, the first thing I did was to check out the wiki page. As it turns out,\nthere are \"decisions matrices\" which tells the optimal strategy depending on player's total, face up card by the dealer,\nand whether the player has an ace or not.\nThey also have a matrix for \"splitting up\" double, but since this version of blackjack here does not have that, this was obviously\nnot included.\n\nThere are also indication of how to use proper card counting as well as a few pointers on the exact player's hand composition.\nBut, since the initial code provided only gives the players TOTAL amount and says nothing (at least directly) about the presence or\nabsence of certain cards, this was not implemented.\n\nSpeaking of double, there is the \"outlier\" case of having two aces. This can be detected without \"players_aces\" since this can be\ninferred from the player's total (a total of 2 necessarly implies TOW aces).\n\nNot sure currently how to deal with that particular problem, but, as of now, the code treats that the same as a \"sof total\"\ncase -> I.E: having at least one ace.\n    \nFinally, the current version does not include card counting strategies yet as this will require me to check the provided\n\"blackjack\" functions, but I intend to at least look upon it later on.\n\n# 2. Choice of implementation and reasons for the choice:\nInitially, I started using if, elif, else statements. But this was dropped as I thought using Pandas might be quicker, clearer\nand easier to implement.\n\nAnd boy, was I wrong as it turned out to be a frustring experience ! :P \n    \nIt showcased that I still need a lot of practices since I am very new to Pandas, Machine learning, and python in general.\n\nDespite the frustration though, I still managed to finish a first working version with what I feel like are \"acceptable\" win rates.\n(around 41-42%). I was also happy to finally manage to do that.\n\nBut most important of all, I feel like doing it this way was a superb practice experience for a newbie like me.\na) it was a perfect opportunity to learn using pandas without a \"helping hand\" (though, with that being said, Than you\n\"Uncle Frank\" for the course, very much appreciated ;) ).\nb) and second, it did drove the point that handling and cleaning your data ... that can be pretty important here ... even though\nthis version did not use any machine learnign concept so far ;)\n\n# 3. To do list\n\nCreate a \"card counting\" version.\nCheck out reinforced learning or other possibly applicable machine learning technique to apply here, as both a way to improve\nthe current version but, most of all, to gain valuable experience by practising.\n\nSide note: maybe Q 'Pac man\/Taxi Man' techniques could be used here as well, I need to check it out."}}