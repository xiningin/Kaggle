{"cell_type":{"e1a106f1":"code","e42b51b9":"code","8da56d9f":"code","dde99432":"markdown","07d738b1":"markdown","37347098":"markdown","64fc4a35":"markdown","aa3aa988":"markdown","42d917ca":"markdown"},"source":{"e1a106f1":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.subplots as subplots\n\nimport plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)  \n\nfrom datetime import datetime, timedelta\n\nline_color = ['#96508e','#4fcb93','#f86e35','#20beff','#ddaa18']\nfiftyone_states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California','Colorado', 'Connecticut', 'Delaware', 'District of Columbia','Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana','Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland','Massachusetts', 'Michigan', 'Minnesota', 'Mississippi','Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire','New Jersey', 'New Mexico', 'New York', 'North Carolina','North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania','Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee','Texas', 'Utah', 'Vermont', 'Virginia', 'Washington','West Virginia', 'Wisconsin', 'Wyoming']\n\n\ndef evaluate_models(model_list,df_benchmark_panel,common_51=True,metric='RMSLE'):\n\n    df_benchmarks = pd.DataFrame(columns=[model_list],index=pd.date_range(start='2\/1\/2020', end='12\/31\/2020'))\n\n        \n    for model in model_list:\n        for col_name in [m for m in df_benchmark_panel.columns if model in m]:\n            \n            forecast_criteria = ((df_benchmark_panel[col_name].notna()) & (df_benchmark_panel['Date'] > col_name[-10:]) & (datetime.strptime(col_name[-10:],'%Y-%m-%d') >= (pd.DatetimeIndex(df_benchmark_panel['Date']) - pd.DateOffset(28))))\n        \n            if common_51 == True:\n                fiftyone_states_mask = (df_benchmark_panel['Location_Lowest_Level'].isin(fiftyone_states))\n                forecast_criteria = forecast_criteria & fiftyone_states_mask\n    \n                       \n            \n            df_eval = df_benchmark_panel[forecast_criteria] \n            \n            mean_population = df_eval['Population'].unique().mean()\n            \n            if metric == 'RMSLE':\n                score = np.sqrt(((np.log(1+df_eval[col_name])-np.log(1+df_eval[\"Fatalities\"]))**2).mean())\n            elif metric == 'RMSE_pop_norm':\n                score = np.sqrt( ( mean_population*((df_eval[col_name]-(df_eval[\"Fatalities\"]))\/df_eval['Population'])**2).mean()) \n                \n            df_benchmarks.loc[col_name[-10:],model] = np.round(score,3)\n            df_benchmarks.loc[col_name[-10:],'{}_forecasts'.format(model)] = int(len(df_eval))\n    \n    df_benchmarks = df_benchmarks.dropna(how='all')\n    return df_benchmarks\n\ndef order_state_list(fiftyone_states):\n    latest_observation = df_benchmark_panel[df_benchmark_panel['Fatalities'].notnull()]['Date'].max()\n    fiftyone_states = df_benchmark_panel[(df_benchmark_panel['Date'] == latest_observation) & (df_benchmark_panel['Province_State'].isin(fiftyone_states) ) ][['Province_State','Fatalities']].sort_values(by='Fatalities',ascending=False)['Province_State'].to_list()\n    return fiftyone_states\n\ndf_benchmark_panel = pd.read_csv('\/kaggle\/input\/covid19-benchmark-panels\/benchmark_panel.csv',index_col=0,low_memory=False)\n\nus_models = ['ihme','lanl','cu80','kaggle_previous_winner','cu60','cu_nointer']\n\ndf_us_benchmark_rmsle = evaluate_models(us_models,df_benchmark_panel,True,'RMSLE')\ndf_us_benchmark_rmsle = df_us_benchmark_rmsle[df_us_benchmark_rmsle.index >= '2020-04-01']\n\ndf_us_benchmark_rmse_pop_norm = evaluate_models(us_models,df_benchmark_panel,True,'RMSE_pop_norm')\ndf_us_benchmark_rmse_pop_norm = df_us_benchmark_rmse_pop_norm[df_us_benchmark_rmse_pop_norm.index >= '2020-04-01']\n\nfiftyone_states = order_state_list(fiftyone_states)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmse_pop_norm.index.astype(str)), y=np.array(df_us_benchmark_rmse_pop_norm[['ihme']]).flatten(),connectgaps=True,visible=True,mode='lines+markers',name='IHME',line=dict(color=line_color[1], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmse_pop_norm.index.astype(str)), y=np.array(df_us_benchmark_rmse_pop_norm[['lanl']]).flatten(),connectgaps=True,visible=True,mode='lines+markers',name='LANL',line=dict(color=line_color[2], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmse_pop_norm.index.astype(str)), y=np.array(df_us_benchmark_rmse_pop_norm[['cu80']]).flatten(),connectgaps=True,visible=True,mode='lines+markers',name='CU 80',line=dict(color=line_color[3], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmse_pop_norm.index.astype(str)), y=np.array(df_us_benchmark_rmse_pop_norm[['kaggle_previous_winner']]).flatten(),connectgaps=True,visible=True,mode='lines+markers',name='Kaggle Leader',line=dict(color=line_color[4], width=3)))\n\n\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmsle.index.astype(str)), y=np.array(df_us_benchmark_rmsle[['ihme']]).flatten(),connectgaps=True, visible=False, mode='lines+markers',name='IHME',line=dict(color=line_color[1], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmsle.index.astype(str)), y=np.array(df_us_benchmark_rmsle[['lanl']]).flatten(),connectgaps=True, visible=False, mode='lines+markers',name='LANL',line=dict(color=line_color[2], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmsle.index.astype(str)), y=np.array(df_us_benchmark_rmsle[['cu80']]).flatten(),connectgaps=True,visible=False, mode='lines+markers',name='CU 80',line=dict(color=line_color[3], width=3)))\nfig.add_trace(go.Scatter(x=np.array(df_us_benchmark_rmsle.index.astype(str)), y=np.array(df_us_benchmark_rmsle[['kaggle_previous_winner']]).flatten(),connectgaps=True, visible=False, mode='lines+markers',name='Kaggle Previous Week Winner',line=dict(color=line_color[4], width=3)))\n\n\n\n#fig['layout']['yaxis'].update(title='RMSLE')\nfig['layout']['xaxis'].update(title='Forecast Date')\n\nfig.update_layout(autosize=False,width=760,height=500,title=\"Benchmarking Model Performance\",annotations=[dict(x=-.014,y=1.12,text='State level forecasts covering 51 US states; forecast evaluated over subsequent 29 days',showarrow = False,xref='paper', yref='paper')],\n                 \n                    updatemenus = [\n                        go.layout.Updatemenu(\n                                direction = \"down\", showactive=True, x = 1.13, y = 1.23,\n                                buttons = list([\n                                    dict(\n                                        label = \"RMSE normalized for population\", method = \"update\",\n                                        #args = [{\"visible\": [True, True, True, False, False, False,]}]                                       \n                                        args = [{\"visible\": [True, True, True, True, False, False, False, False,]}]\n                                    ),\n                                    dict(\n                                        label = \"RMSLE\", method = \"update\",\n                                        args = [{\"visible\": [False, False, False, False, True, True, True, True]}]\n                                        #args = [{\"visible\": [False, False, False, True, True, True]}]\n\n                                    )\n                                ]\n                            )\n                        )\n                    ]\n\n                 )\n\npy.offline.iplot(fig)\n\n\n","e42b51b9":"model_display_list = us_models[0:3] #can only be four models\nmodel_dict = dict()\n\nfor model in model_display_list:\n    \n\n    model_dict[model] = dict()\n        \n    \n    for column in df_benchmark_panel.columns:\n        if model == column[:len(model)]:\n            if (model_dict[model] == {}):\n                model_dict[model]['date'] = datetime.strptime(column[-10:],\"%Y-%m-%d\")\n                model_dict[model]['date_str'] = column[-10:]\n            elif (model_dict[model]['date'] < datetime.strptime(column[-10:],\"%Y-%m-%d\")):\n                model_dict[model]['date'] = datetime.strptime(column[-10:],\"%Y-%m-%d\")\n                model_dict[model]['date_str'] = column[-10:]\n\n\nfig = go.Figure()\n\ndf_us_panel = df_benchmark_panel[df_benchmark_panel['Province_State'].isin(fiftyone_states)]\ndf_us_panel = df_us_panel.groupby('Date').sum()\ndf_us_panel[df_us_panel == 0] = None\n\n\n\nmask = (pd.to_datetime(df_us_panel.index) > datetime.strptime('2020-03-15','%Y-%m-%d'))\n\nvisible_flag=True\n\ni=0\nfor model in model_dict:\n    i +=1\n    fig.add_trace(go.Scatter(x=np.array(df_us_panel[mask].index.astype(str)), y=np.array(df_us_panel[mask]['{}_{}'.format(model,model_dict[model]['date_str'])]),connectgaps=True,visible=visible_flag,mode='lines',name=model,line=dict(color=line_color[i], width=3)))\n    \nfig.add_trace(go.Scatter(x=np.array(df_us_panel[mask].index.astype(str)), y=np.array(df_us_panel[mask]['Fatalities']),connectgaps=True,visible=visible_flag,mode='lines',name='Fatalities (Actual)',line=dict(color=line_color[0], width=3)))\n\nfig.update_layout(title='US forecasts',autosize=False,width=760,height=500,)\n\npy.offline.iplot(fig)\n\n    ","8da56d9f":"fig = go.Figure()\n\ndefault_state = 'New York'\n\nbutton_list = []\n\n\nfor state in fiftyone_states:\n\n    mask = (pd.to_datetime(df_benchmark_panel['Date']) > datetime.strptime('2020-03-15','%Y-%m-%d')) & (df_benchmark_panel['Province_State'] == state)\n\n    if state == default_state:\n        visible_flag = True\n    else:\n        visible_flag = False\n              \n    i = 0\n    for model in model_dict:\n        i +=1\n        fig.add_trace(go.Scatter(x=np.array(df_benchmark_panel[mask]['Date'].astype(str)), y=np.array(df_benchmark_panel[mask]['{}_{}'.format(model,model_dict[model]['date_str'])]),connectgaps=True,visible=visible_flag,mode='lines',name=model,line=dict(color=line_color[i], width=3)))\n    \n    fig.add_trace(go.Scatter(x=np.array(df_benchmark_panel[mask]['Date'].astype(str)), y=np.array(df_benchmark_panel[mask]['Fatalities']),connectgaps=True,visible=visible_flag,mode='lines',name='Fatalities (Actual)',line=dict(color=line_color[0], width=3)))\n\n    button_list.append(dict(label = state, method = \"update\",args = [{\"visible\": np.array([[state==s]*4 for s in fiftyone_states]).flatten()}]))\n\nfig.update_layout(autosize=False,width=760,height=500,updatemenus=[{\"buttons\": button_list, \"direction\": \"down\", \"active\": fiftyone_states.index(default_state), \"showactive\": True, \"x\": 0.3, \"y\": 1.12}],title=\"Latest State Forecasts\")\n\npy.offline.iplot(fig)\n\n","dde99432":"### Looking at their latest forecasts for the US[](http:\/\/)\n","07d738b1":"# To do\n\n- show forecast vs actual by forecast date for US\n- clean up code (e.g. use loops for benchmarking section)\n- loss function that looks at changes rather than cumsum\n- add other models\n- add more Kaggle models and ensembles","37347098":"# Summary\n\nThis notebook shows plots that benchmark COVID-19 forecasting model performance since early April. Of the models I benchmarked, Los Alamos National Labs (LANL) has consistently been the strongest model. IHME, which has gained a large following and has a really nice dashboard, is meaningfully less accurate. ","64fc4a35":"## Benchmarking the professional epidemiological models\n\nAs mentioned above, LANL model consistently performs best (lower is better). The y-axis show model accuracy. The x-axis shows forecast date. ","aa3aa988":"### Looking at their latest forecasts on a state level\nOrdering states by highest fatality states","42d917ca":"\n### Benchmark setup\n\nEach model forecasts slightly different things. So this evaluation was done on the common elements of what each model forecasts. That includes:\n- Cumulative number of fatalities\n- State level forecasts for 51 US states\n- Evaluates forecasts for up to 29 days ahead\n\nI benchmark against two loss functions: \n1. RMSE normalized by population size\n2. RMSLE \n\nI put most weight on RMSE normalized by population size. Normalizing for population size is important since 50K cases in NYC is very different from 50K cases in Wyoming. \n"}}