{"cell_type":{"e9eabefc":"code","6a791058":"code","85e205c8":"code","814beb94":"code","cb36b583":"code","d4447c7f":"code","42a818c9":"code","2924ae3d":"code","b4937ab9":"code","de058e2e":"code","2ffc5e0f":"code","df25c9ed":"code","191f6632":"code","a7d3cbda":"code","4ceb8ac8":"code","120d41db":"code","f51ea439":"code","660c0527":"code","12a7ee05":"code","003d749a":"code","2cadbfd5":"code","c4d73ced":"code","debe7e0d":"code","a43dbd26":"markdown","10a60f75":"markdown","ab72a28e":"markdown","d99acfed":"markdown","e412cb81":"markdown","739a6ba0":"markdown","f30bebe8":"markdown","35a67e41":"markdown","eb828feb":"markdown"},"source":{"e9eabefc":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport cv2\nimport pandas as pd\nimport seaborn as sns","6a791058":"df=pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")\ndf","85e205c8":"plt.figure(figsize=(25,10))\nplt.xlabel(\"labels\",fontsize=15)\nplt.xticks(rotation=15,fontsize = 12,fontweight = \"bold\")\nplt.ylabel(\"count\",fontsize=15)\nplt.yticks(fontsize=15)\nsns.barplot(data=df,x=df.value_counts(\"labels\").index,y=df.value_counts(\"labels\").values)","814beb94":"train_path=\"..\/input\/plant-pathology-2021-fgvc8\/train_images\"\nplt.figure(figsize=(20,40))\ni=1\nfor idx,s in df.head(9).iterrows():\n    img_path = os.path.join(train_path,s['image'])\n    img=cv2.imread(img_path)\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    \n    fig=plt.subplot(9,3,i)\n    fig.imshow(img)\n    fig.set_title(s['labels'])\n    i+=1","cb36b583":"df['labels'].unique()\n# 1.healthy\n# 2.scab\n# 3.complex\n# 4.rust\n# 5.fog_eye_leaf_spot\n# 6.powdery_mildew","d4447c7f":"df['labels']=df['labels'].apply( lambda string: string.split(' ') )\ndf.head()","42a818c9":"from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nhot_labels = mlb.fit_transform(df['labels'])\nprint(mlb.classes_)\nprint(hot_labels)","2924ae3d":"df_labels = pd.DataFrame(hot_labels,columns=mlb.classes_,index=df.index)\ndf_labels","b4937ab9":"plt.figure(figsize=(25,10))\nsns.barplot(x=df_labels.columns,y=df_labels.sum().values)","de058e2e":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1\/255.0,\n                            rotation_range=5,\n                            zoom_range=0.1,\n                            shear_range=0.05,\n                            horizontal_flip=True,\n                            validation_split=0.2)\n\ntrain_generator = datagen.flow_from_dataframe(\n    df,\n    directory='..\/input\/resized-plant2021\/img_sz_256',\n    subset='training',\n    x_col='image',\n    y_col='labels',\n    target_size=(224,224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=444\n    )\n#'..\/input\/plant-pathology-2021-fgvc8\/train_images'\nvalid_generator = datagen.flow_from_dataframe(\n    df,\n    directory='..\/input\/resized-plant2021\/img_sz_256',\n    subset='validation',\n    x_col='image',\n    y_col='labels',\n    target_size=(224,224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=444\n    )","2ffc5e0f":"from keras.applications import InceptionResNetV2\nfrom keras.applications import MobileNetV2\nfrom keras.applications import DenseNet121\nfrom keras.applications import DenseNet169\n\nimport keras\nfrom keras.layers import Dense,Dropout,Flatten\nfrom tensorflow.keras.layers import GlobalAveragePooling2D\nfrom keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport tensorflow_addons as tfa\n\nweight_path='..\/input\/tf-keras-pretrained-model-weights\/No Top\/densenet169_weights_tf_dim_ordering_tf_kernels_notop.h5'\nbase_model=DenseNet169(weights=weight_path,include_top=False, input_shape=(224,224,3))\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(128,activation='relu')(x)\nx=Dropout(0.2)(x)\nx=Dense(64,activation='relu')(x)\npredictions=Dense(6,activation='sigmoid')(x)\n\nmodel=Model(inputs=base_model.input,outputs=predictions)\n\nfor layer in base_model.layers:\n    layer.trainable=False\n","df25c9ed":"f1 = tfa.metrics.F1Score(num_classes=6,average='macro')\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy',f1])\nes=EarlyStopping(patience=4,monitor=f1,mode='max',restore_best_weights=True)\nhist = model.fit_generator(generator=train_generator,\n                    validation_data=valid_generator,\n                    epochs=20,\n                    steps_per_epoch=train_generator.samples\/\/128,\n                    validation_steps=valid_generator.samples\/\/128,\n                    callbacks=[es])","191f6632":"#the third dense block:\n# model.layers[143:595]","a7d3cbda":"model.layers[595:]","4ceb8ac8":"for layer in model.layers[:595]:\n    layer.trainable=False\n\nfor layer in model.layers[143:]:\n    layer.trainable=True\n\nfor layer in model.layers[595:]:\n    layer.trainable=False\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy',f1])\nhistory = model.fit_generator(generator=train_generator,\n                    validation_data=valid_generator,\n                    epochs=15,\n                    steps_per_epoch=train_generator.samples\/\/128,\n                    validation_steps=valid_generator.samples\/\/128,\n                    callbacks=[es])","120d41db":"# accuracy\nplt.figure(figsize=(15,6))\nepoch_list = list(range(1, len(history.history['accuracy']) + 1))\nplt.plot(epoch_list, history.history['accuracy'],label='accuracy')\nplt.plot(epoch_list, history.history['val_accuracy'],label='val_accuracy')\nplt.legend()\nplt.show()","f51ea439":"# f1  score\nplt.figure(figsize=(15,6))\nepoch__list = list(range(1,len(history.history['f1_score'])+1))\nplt.plot(epoch__list, history.history['f1_score'],label='f1_score')\nplt.plot(epoch__list, history.history['val_f1_score'],label='val_f1_score')\nplt.xlabel('epoches')\nplt.ylabel('f1')\nplt.legend()\nplt.show()","660c0527":"#model.save('plant_incepresnetv2.h5')","12a7ee05":"test_path=\"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\"\ntest = pd.read_csv(test_path)\ntest","003d749a":"test_data = datagen.flow_from_dataframe(\n    test,\n    directory='..\/input\/plant-pathology-2021-fgvc8\/test_images',\n    x_col='image',\n    y_col=None,\n    color_mode='rgb',\n    target_size=(224,224),\n    class_mode=None,\n    shuffle=False\n)\npredictions = model.predict(test_data)\nprint(predictions)\n\nclass_idx=[]\nfor pred in predictions:\n    pred=list(pred)\n    temp=[]\n    for i in pred:\n        if (i>0.4):\n            temp.append(pred.index(i))\n    if (temp!=[]):\n        class_idx.append(temp)\n    else:\n        temp.append(np.argmax(pred))\n        class_idx.append(temp)\nprint(class_idx)","2cadbfd5":"class_dict = train_generator.class_indices\ndef get_key(val):\n    for key,value in class_dict.items():\n        if (val==value):\n            return key\nprint(class_dict)\n\nsub_pred=[]\nfor img_ in class_idx:\n    img_pred=[]\n    for i in img_:\n        img_pred.append(get_key(i))\n    sub_pred.append( ' '.join(img_pred))\nprint(sub_pred)","c4d73ced":"sub = test[['image']]\nsub['labels']=sub_pred\nsub","debe7e0d":"sub.to_csv('submission.csv',index=False)","a43dbd26":"# *Transfer Learning: DenseNet 169*","10a60f75":"freeze the trained layers, then train the second and the third dense block in DenseNet169","ab72a28e":"# *Data Augmentation*","d99acfed":"# *Data Visualization*","e412cb81":"Since each leaves may have more than one disease(e.g.the second leaf in the above image is *scab,frog_eye_leaf_spot,complex*), so it can be a ***multilabel classification***.","739a6ba0":"trian the last few layers and the ouput layers first","f30bebe8":"# *Submission*","35a67e41":"# **Plant Pathology Analysis with transfer learning(DenseNet 169)**\n* *Data Visualization*\n* *Data Augmentation*\n* *Model training: DenseNet 169*\n* *Prediction*\n* *Submission*","eb828feb":"# *Prediction*"}}