{"cell_type":{"08d74814":"code","200ca306":"code","6384497d":"code","05d02619":"code","009e1bed":"code","59c02747":"code","88e970cb":"code","66942206":"code","29449769":"code","ad6dd6ef":"code","d4df2ba7":"code","93f481e9":"code","2015a930":"code","83512e02":"code","5341d810":"code","ae1b6c1f":"code","50c4f68b":"code","b7554ba5":"code","1d90ba1f":"code","2329de13":"code","ffe3f3f4":"code","b6eb1e55":"code","3493efdf":"markdown","e85ead5b":"markdown"},"source":{"08d74814":"# import the libraries\nimport pandas as pd\nimport numpy as np\nimport xgboost as xgb\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","200ca306":"#Load the dataset\ndf = pd.read_csv(r'..\/input\/ntt-data-global-ai-challenge-06-2020\/COVID-19_and_Price_dataset.csv')","6384497d":"#get the shape of the data\ndf.shape","05d02619":"#get information about the dataframe\ndf.info()","009e1bed":"df['Date'] = pd.to_datetime(df['Date'])","59c02747":"#Visuvalize the relation between oil pirce and Worlt total cases\nx=df['Price']\ny=df['World_total_cases']\nplt.figure(figsize = (20,10));\nplt.plot(x,y,'g--')\nplt.title('Oil Price  Vs  World_total_cases')\nplt.xlabel('Oil Price')\nplt.ylabel('Covid_total_cases')","88e970cb":"#get the location of the World_total_cases\ndf.columns.get_loc(\"World_total_cases\")\n\n#selecting the last 5 columns from dataframe\ncorr_df=df[df.columns[[841,842,843,844,849]]]","66942206":"# Explore the top 5 rows of the dataset\ncorr_df.head()","29449769":"#Finding the coorelation\ncorrelation=corr_df.corr()","ad6dd6ef":"import seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(correlation,vmin=0, vmax=1, annot=True, fmt=\"g\", cmap='coolwarm')","d4df2ba7":"cols = [0,841,842,843,844,849]\ndata= df[df.columns[cols]]","93f481e9":"#Print the top 5 rows\ndata.head()","2015a930":"data=data.set_index('Date')","83512e02":"#Separate the target variable and rest of the variables using .iloc to subset the data.\nX = data.iloc[:,:-1]\ny=data.iloc[:,-1]","5341d810":"#convert the dataset into an optimized data structure called Dmatrix that XGBoost supports\ndata_dmatrix = xgb.DMatrix(data=X,label=y)\n#create the train and test set for cross-validation\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","ae1b6c1f":"# instantiate an XGBoost regressor object by calling the XGBRegressor()\nxg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 10, n_estimators = 10)","50c4f68b":"#Fit the regressor to the training set and make predictions on the test set\nxg_reg.fit(X_train,y_train)\npreds = xg_reg.predict(X_test)","b7554ba5":"#Compute the rmse by invoking the mean_sqaured_error function from sklearn's metrics module.\nrmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse))","1d90ba1f":"#k-fold Cross Validation using XGBoost\nparams = {\"objective\":\"reg:linear\",'colsample_bytree': 0.3,'learning_rate': 0.1,'max_depth': 5, 'alpha': 10}\ncv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","2329de13":"\ncv_results.head()","ffe3f3f4":"print((cv_results[\"test-rmse-mean\"]).tail(1))","b6eb1e55":"#Visualize Feature Importance (features are ordered according to how many times they appear)\nimport matplotlib.pyplot as plt\nxgb.plot_importance(xg_reg)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","3493efdf":"# **RMSE for the price prediction has reduced as compared to last time and came out to be around 0.993286**","e85ead5b":"RMSE for the price prediction came out to be around 17.16645"}}