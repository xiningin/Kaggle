{"cell_type":{"55d6dd85":"code","a78338c7":"code","0c99ac55":"code","6f589223":"code","681ab7e2":"code","62c5f359":"code","2a0ce26c":"code","5db5b7cd":"code","91b58823":"code","7e0052a1":"code","be50a4d7":"code","9673b420":"code","5d83a171":"code","4902dbd9":"code","33146d7a":"code","f08cc1a2":"code","2e503507":"code","1d49a6fb":"code","857e7aac":"code","461717a2":"code","38fbecde":"code","97ff782e":"code","db737ecb":"code","dc4aab9c":"code","d1033bbe":"code","8f6a81d0":"code","77772e8b":"code","f6f673f0":"code","b6a18f15":"code","ca877349":"code","c58fab2c":"code","2f47412f":"code","579b4870":"code","a9a64187":"code","1f0cf5d9":"code","0d1830cc":"code","c56ca91a":"code","608c8990":"code","9af16c7a":"code","71860759":"code","26903c86":"code","caa70d17":"code","0e7bc7d5":"code","694401b8":"code","4c6782b0":"code","892fb24a":"code","d609ac05":"code","272ee36f":"code","b67e794c":"code","7c5632d2":"code","79cf0fae":"code","612393de":"code","42788041":"code","13f48a00":"code","d0d19844":"code","89f7b34c":"code","9a852c09":"code","242c2cad":"code","949aba00":"code","74e427e3":"code","64374adb":"code","82f61a4e":"code","8e9f35ee":"code","d7e10e60":"code","8693cf44":"code","4578c7e1":"code","628e4bcb":"code","0e4a5418":"code","11830879":"code","87090de6":"code","f7f87e59":"code","5d931f58":"code","4bf69228":"code","a28310a8":"code","566f2f9c":"code","6f287f44":"code","1bed67db":"code","fdc92464":"code","db0657d4":"code","252d6ae4":"code","2d8a002e":"code","6db5e36b":"code","a03b30cc":"code","e3afcf4e":"code","41d4fa4b":"code","52d484f6":"code","ed8e46d8":"code","d1226a10":"code","e14a4991":"code","5fbb2687":"code","da4f5546":"code","4d3abc24":"code","81538cac":"code","46371841":"code","623f64db":"code","1a74bd33":"code","4b6dde6c":"code","dd5ba531":"code","add98341":"code","e68a0a8c":"code","c78cba42":"code","6cfc11ef":"code","c2fd5a96":"code","ea35af70":"code","f4f154e9":"code","2e8296bd":"code","acf293e7":"code","cfe44d79":"code","54baac67":"code","41394a79":"code","4e195f07":"code","064befaf":"code","82428cda":"code","75be93fb":"code","b023e1ab":"code","bfe657a8":"code","ad5e10b7":"code","8fb74d76":"code","833c85fb":"code","bf18879e":"code","e65d709a":"code","cfb63f6f":"code","e837da78":"code","42957184":"code","0c15b307":"code","d33c722c":"code","78f87b41":"markdown","0d84ebf7":"markdown","92ac26f5":"markdown","57272f0d":"markdown","3ce838c0":"markdown","ff3eda8c":"markdown","edf349cd":"markdown","b7445402":"markdown","58bf4f16":"markdown","620d4b1c":"markdown","261465e3":"markdown","ce0082f4":"markdown","67a66b91":"markdown","08fcee7a":"markdown","8bdf1c5e":"markdown","153510c6":"markdown","6368f6b5":"markdown","fcb45a90":"markdown","a71df81e":"markdown","52560c74":"markdown","77f52d7d":"markdown","848b26bd":"markdown","3d0046c7":"markdown","a43d1e85":"markdown","bf2f3367":"markdown","f525decd":"markdown","34d2f6da":"markdown","fd3517ce":"markdown","ce0d011c":"markdown","6b9cb944":"markdown","5789942b":"markdown","af2dc54d":"markdown","1887a9b9":"markdown","6a716d73":"markdown","8642dac3":"markdown","9ed93e3d":"markdown","a927edf8":"markdown","11645a24":"markdown","2faba1ec":"markdown","7bae7580":"markdown","2d4e8848":"markdown","a9a173b6":"markdown","7ab3b3e1":"markdown","dd02a47d":"markdown","8e146838":"markdown"},"source":{"55d6dd85":"#Start by executing the assignment:\n#s = '0123456789'\n#Now write expressions using string s and the indexing operator that evaluate to:\n#(a) '234'\n#(b) '78'\n#(c) '1234567'\n#(d) '0123'\n#(e) '789'","a78338c7":"s= '0123456789'","0c99ac55":"s[2:5]","6f589223":"s[7:9]","681ab7e2":"s[1:8]","62c5f359":"s[0:4]","2a0ce26c":"s[-3:]","5db5b7cd":"#Assuming that variable forecast has been assigned string\n#     'It will be a sunny day today'\n#write Python statements corresponding to these assignments:\n#(a) To variable count, the number of occurrences of string 'day' in string forecast.\n#(b) To variable weather, the index where substring 'sunny' starts.\n#(c) To variable change, a copy of forecast in which every occurrence of substring\n#    'sunny' is replaced by 'cloudy'.","91b58823":"s= 'It will be a sunny day today'","7e0052a1":"s.count('day')","be50a4d7":"s.find('sunny')","9673b420":"s.replace('sunny','cloudy')","5d83a171":"#Write a statement that prints the values of variables last, first, and middle in one line,\n# by a horizontal tab character. (The Python escape sequence for the horizontal tab\n#character is \\t.) If the variables are assigned like this:\n#   >>> last = 'Smith'\n#   >>> first = 'John'\n#   >>> middle = 'Paul'\n#  the output should be:\n#   Smith John Paul","4902dbd9":"last = \"Smith\"","33146d7a":"first = \"John\"","f08cc1a2":"middle = \"Paul\"","2e503507":"print(last, first, middle, sep = '\\t')","1d49a6fb":"#Write function even() that takes a positive integer n as input and prints on the screen all\n#numbers between, and including, 2 and n divisible by 2 or by 3, using this output format:\n#   >>> even(17)\n#       2, 3, 4, 6, 8, 9, 10, 12, 14, 15, 16,","857e7aac":"def even(n):\n    for i in range(2,n+1):\n        if i%2==0 or i%3==0:\n            print(i,end=\",\")\neven(17)","461717a2":"#Assume variables first, last, street, number, city, state, zipcode have already\n#been assigned. Write a print statement that creates a mailing label:\n#John Doe\n#123 Main Street\n#AnyCity, AS 09876\n#assuming that:\n# >>> first = 'John'\n# >>> last = 'Doe'\n# >>> street = 'Main Street'\n# >>> number = 123\n# >>> city = 'AnyCity'\n# >>> state = 'AS'\n# >>> zipcode = '09876'","38fbecde":"first = \"John\"","97ff782e":"last = \"Doe\"","db737ecb":"street = 'Main Street'","dc4aab9c":"number = 123","d1033bbe":"city = 'Anycity'","8f6a81d0":"state = 'AS'","77772e8b":"zipcode = '09876'","f6f673f0":"fstring = '{} {}\\n{} {}\\n{} , {} {}'","b6a18f15":"print(fstring.format(first,last,number,street,city,state,zipcode))","ca877349":"#Implement function roster() that takes a list containing student information and prints\n#out a roster, as shown below. The student information, consisting of the student\u2019s last name,\n#first name, class, and average course grade, will be stored in that order in a list. Therefore,\n#the input list is a list of lists. Make sure the roster printed out has 10 slots for every string\n#value and 8 for the grade, including 2 slots for the decimal part.\n# >>> students = []\n# >>> students.append(['DeMoines', 'Jim', 'Sophomore', 3.45])\n# >>> students.append(['Pierre', 'Sophie', 'Sophomore', 4.0])\n# >>> students.append(['Columbus', 'Maria', 'Senior', 2.5])\n# >>> students.append(['Phoenix', 'River', 'Junior', 2.45])\n# >>> students.append(['Olympis', 'Edgar', 'Junior', 3.99])\n# >>> roster(students)\n#Last First Class Average Grade\n#DeMoines Jim Sophomore 3.45\n#Pierre Sophie Sophomore 4.00\n#Columbus Maria Senior 2.50\n#Phoenix River Junior 2.45\n#Olympia Edgar Junior 3.99","c58fab2c":"students = []","2f47412f":"students.append(['DeMoines', 'Jim', 'Sophomore', 3.45])","579b4870":"students.append(['Pierre', 'Sophie', 'Sophomore', 4.0])","a9a64187":"students.append(['Columbus', 'Maria', 'Senior', 2.5])","1f0cf5d9":"students.append(['Phoenix', 'River', 'Junior', 2.45])","0d1830cc":"def roster(students):\n    'prints average grade for a roster of students'\n    print('Last''       ''First''      ''Class''       ''Average Grade')\n    for student in students:\n        print('{:10} {:10} {:10} {:8.2f} '.format(student[0], student[1], student[2], student[3]))\nroster(students)","c56ca91a":"#Start by setting t to be the local time 1, 500, 000, 000 seconds from the start of January 1,\n#1970 UTC:\n#   >>> import time\n#   >>> t = time.localtime(1500000000)\n#Construct the next strings by using the string time format function strftime():\n#  (a) 'Thursday, July 13 2017'\n#  (b) '09:40 PM Central Daylight Time on 07\/13\/2017'\n#  (c) 'I will meet you on Thu July 13 at 09:40 PM.'","608c8990":"import time","9af16c7a":"time.gmtime(0)","71860759":"t = time.localtime(1500000000)","26903c86":"time.strftime('%A, %B %d %Y', t)","caa70d17":"time.strftime('%I:%M %p %Z Central Daylight Time on %m\/%d\/%Y',t)","0e7bc7d5":"time.strftime('I will meet you on %a %B %d at %I:%M %p.', t)","694401b8":"#Write function stringCount() that takes two string inputs\u2014a file name and a target string\u2014\n#and returns the number of occurrences of the target string in the file.","4c6782b0":"infile = open('example.txt')","892fb24a":"def stringCount(filename,target):\n    'returns the number of occurrences of target in file filename'\n    infile = open(filename)\n    content = infile.read()\n    infile.close()\n    return content.count(target)","d609ac05":"stringCount('example.txt', 'line')","272ee36f":"#Write function words() that takes one input argument\u2014a file name\u2014and returns the list\n#of actual words (without punctuation symbols !,.:;?) in the file.","b67e794c":"def myGrep(filename, target):\n    'prints every line of file filename containing string target '\n    infile = open(filename)\n    for line in infile:\n        if target in line:\n            print(line, end='')\nmyGrep('example.txt','line')","7c5632d2":"#Explain what causes the syntax error in each statement just listed. Then write a correct\n#version of each Python statement.","79cf0fae":"#(a) The left parenthesis and the right bracket do not match. The intended expression is\n#probably either (3+4) (evaluating to integer 7) or [3+4] (evaluating to a list containing integer 7).","612393de":"a = (3+4)\nb = [3+4]\nprint(a,b)","42788041":"#(b) The column is missing; the correct expression is if x == 5:","13f48a00":"if x==5:","d0d19844":"#(c) print() is a function and thus must be called with parentheses and with arguments,\n#if any, inside them.","89f7b34c":"print('hello')","9a852c09":"#(d) The objects in a list are separated by commas","242c2cad":"list =[1,2,3]\nprint(list)","949aba00":"#(e) The statement(s) in the body of a for loop must be indented.","74e427e3":"for i in range (5):\n    print(i)","64374adb":"#Start by running, in the interactive shell, this assignment statement:\n#   >>> s = 'abcdefghijklmnopqrstuvwxyz'\n#Now write expressions using string s and the indexing operator that evaluate to 'bcd',\n#   'abc', 'defghijklmnopqrstuvwx', 'wxy', and 'wxyz'.","82f61a4e":"s = 'abcdefghijklmnopqrstuvwxyz'","8e9f35ee":"s[0:3]","d7e10e60":"s[3:24]","8693cf44":"s[-4:-1]","4578c7e1":"s[-4:]","628e4bcb":"#Let string s be defined as:\n#   s = 'abcdefghijklmnopqrstuvwxyz'\n#Write Python Boolean expressions that correspond to these propositions:\n#   (a) The slice consisting of the second and third character of s is 'bc'.\n#   (b) The slice consisting of the first 14 characters of s is 'abcdefghijklmn'.\n#   (c) The slice of s excluding the first 14 characters is 'opqrstuvwxyz'.\n#   (d) The slice of s excluding the first and last characters is 'bcdefghijklmnopqrstuvw'.","0e4a5418":"s = 'abcdefghijklmnopqrstuvwxyz'","11830879":"s[1:3] == 'bc'","87090de6":"s[:14] == 'abcdefghijklmn'","f7f87e59":"s[14:] == 'opqrstuvwxyz'","5d931f58":"s[1:25] == 'bcdefghijklmnopqrstuvw'","4bf69228":"#Translate each part into a Python statement:","a28310a8":"#(a) Assign to variable log the next string, which happens to be a fragment of a log of a\n#    request for a text file from a web server:\n#    128.0.0.1 - - [12\/Feb\/2011:10:31:08 -0600] \"GET \/docs\/test.txt HTTP\/1.0\"","566f2f9c":"log = '128.0.0.1 - - [12\/Feb\/2011:10:31:08 -0600] \"GET \/docs\/test.txt HTTP\/1.0\"'","6f287f44":"#(b) Assign to variable address the substring of log that ends before the first blank space\n#    in log, using the string method split() and the indexing operator.","1bed67db":"address = log.split(' ')[0]\naddress","fdc92464":"#(c) Assign to variable date the splice of string log containing the date (12\/Feb ...-6000), \n#    using the indexing operator on string log.","db0657d4":"date = log[log.index('['):log.index(']')+1]\ndate","252d6ae4":"#For each of the below string values of s, write the expression involving s and the string\n#methods split() that evaluates to list:\n#    ['10', '20', '30', '40', '50', '60']\n# (a) s = '10 20 30 40 50 60'\n# (b) s = '10,20,30,40,50,60'\n# (c) s = '10&20&30&40&50&60'\n# (d) s = '10 - 20 - 30 - 40 - 50 - 60'","2d8a002e":"s = '10 20 30 40 50 60'","6db5e36b":"s.split()","a03b30cc":"s = '10,20,30,40,50,60'","e3afcf4e":"s.split(',')","41d4fa4b":"s = '10&20&30&40&50&60'","52d484f6":"s.split('&')","ed8e46d8":"s = '10 - 20 - 30 - 40 - 50 - 60'","d1226a10":"s.split(' - ')","e14a4991":"#Implement a program that requests three words (strings) from the user. Your program\n#should print Boolean value True if the words were entered in dictionary order; otherwise\n#nothing is printed.","5fbb2687":"first= 'bass'\nsecond= 'salmon'\nthird= 'whitefish'\nif first<second<third:\n    print('true')","da4f5546":"#Translate each part into a Python statement using appropriate string methods:","4d3abc24":"#(a) Assign to variable message the string 'The secret of this message is thatit is secret.'","81538cac":"message = 'The secret of this message is that it is secret.'","46371841":"#(b) Assign to variable length the length of string message","623f64db":"length = len(message)\nprint(length)","1a74bd33":"#(c) Assign to variable count the number of times the substring 'secret' appears in string message","4b6dde6c":"count = message.count('secret')\nprint(count)","dd5ba531":"#(d) Assign to variable censored a copy of string message with every occurrence of\n#substring 'secret' replaced by #'xxxxxx'","add98341":"censored = message.replace('secret','xxxxxx')\nprint(censored)","e68a0a8c":"#Suppose variable s has been assigned in this way:\n#   s = '''It was the best of times, it was the worst of times; it\n#was the age of wisdom, it was the age of foolishness; it was the\n#epoch of belief, it was the epoch of incredulity; it was ... '''\n#(The beginning of A Tale of Two Cities by Charles Dickens.) Then do the following, in order:\n\n#(a) Write a sequence of statements that produce a copy of s, named newS, in which \n#   characters ., ,, ;, and \\n have been replaced by blank spaces.\n#(b) Remove leading and trailing blank spaces in newS (and name the new string newS).\n#(c) Make all the characters in newS lowercase (and name the new string newS).\n#(d) Compute the number of occurrences in newS of string 'it was'.\n#(e) Change every occurrence of was to is (and name the new string newS).\n#(f) Split newS into a list of words and name the list listS.","c78cba42":"s = '''It was the best of times, it was the worst of times; it\nwas the age of wisdom, it was the age of foolishness; it was the\nepoch of belief, it was the epoch of incredulity; it was ... '''","6cfc11ef":"table = str.maketrans('.,;\/n','     ')\nnew = s.translate(table)\nprint(new)","c2fd5a96":"newS = new.replace('   ','')\nprint(newS)","ea35af70":"newS=newS.lower()\nprint(newS)","f4f154e9":"newS.count('it was')","2e8296bd":"newS.replace('was','is')","acf293e7":"listS=newS.split()\nprint(listS)","cfe44d79":"#Write Python statements that print the next formatted outputs using the already as-\n#signed variables first, middle, and last:\n\n#  >>> first = 'Marlena'\n#  >>> last = 'Sigel'\n#  >>> middle = 'Mae'\n#(a) Sigel, Marlena Mae\n#(b) Sigel, Marlena M.\n#(c) Marlena M. Sigel\n#(d) M. M. Sigel\n#(e) Sigel, M.","54baac67":"first = 'Marlena'\nlast = 'Sigel'\nmiddle = 'Mae'","41394a79":"\"{},{} {}\".format(last,first,middle)","4e195f07":"'{},{} M.'.format(last,first)","064befaf":"'{} M. {}'.format(first,last)","82428cda":"'M. M. {}'.format(last)","75be93fb":"'{}, M'.format(last)","b023e1ab":"#Given string values for the sender, recipient, and subject of an email, write a string\n#format expression that uses variables sender, recipient, and subject and that prints as\n#shown here:\n#  >>> sender = 'tim@abc.com'\n#  >>> recipient = 'tom@xyz.org'\n#  >>> subject = 'Hello!'\n#  >>> print(???) # fill in\n#From: tim@abc.com\n#To: tom@xyz.org\n#Subject: Hello!","bfe657a8":"sender = 'tim@abc.com'\nrecipient = 'tom@xyz.org'\nsubject = 'Hello!'\nprint('From: {}\\nTo: {}\\nSubject: {}'.format(sender,recipient,subject))","ad5e10b7":"#Write Python statements that print the values of \u03c0 and the Euler constant e in the shown formats:","8fb74d76":"#(a) pi = 3.1, e = 2.7","833c85fb":"import math","bf18879e":"pi= '{:1.1f}'.format(math.pi)\ne= '{:1.1f}'.format(math.e)\nprint('pi=',pi)\nprint('e=',e)","e65d709a":"#(b) pi = 3.14, e = 2.72","cfb63f6f":"pi= '{:1.2f}'.format(math.pi)\ne='{:1.2f}'.format(math.e)\nprint('pi=' ,pi)\nprint('e=' ,e)","e837da78":"#(c) pi = 3.141593e+00, e = 2.718282e+00","42957184":"pi= '{:e}'.format(math.pi)\ne= '{:e}'.format(math.pi)\nprint('pi=' ,pi)\nprint('e=' ,e)","0c15b307":"#(d) pi = 3.14159, e = 2.71828","d33c722c":"pi= '{:1.5f}'.format(math.pi)\ne='{:1.5f}'.format(math.e)\nprint('pi=' ,pi)\nprint('e=' ,e)","78f87b41":"(c) Make all the characters in newS lowercase (and name the new string newS).","0d84ebf7":"Q.10","92ac26f5":"c) 'I will meet you on Thu July 13 at 09:40 PM.'","57272f0d":"(f) Split newS into a list of words and name the list listS.","3ce838c0":"(a) Write a sequence of statements that produce a copy of s, named newS, in which char-\nacters ., ,, ;, and \\n have been replaced by blank spaces.","ff3eda8c":"(d) Compute the number of occurrences in newS of string 'it was'.","edf349cd":"Q.1","b7445402":"(c) Marlena M. Sigel","58bf4f16":"a) 'Thursday, July 13 2017'","620d4b1c":"b) The slice consisting of the first 14 characters of s is 'abcdefghijklmn'.","261465e3":"b) To variable weather, the index where substring 'sunny' starts.","ce0082f4":"c) To variable change, a copy of forecast in which every occurrence of substring\n'sunny' is replaced by 'cloudy'.","67a66b91":"Q.21","08fcee7a":"Q.12","8bdf1c5e":"(b) Remove leading and trailing blank spaces in newS (and name the new string newS).","153510c6":"## Some sample problems on text data, files and exceptions in python.","6368f6b5":"Q.19","fcb45a90":"Q.5","a71df81e":"Q.8","52560c74":"b) '09:40 PM Central Daylight Time on 07\/13\/2017'","77f52d7d":"(a) Sigel, Marlena Mae","848b26bd":"Implement function myGrep() that takes as input two strings, a file name and a target string,\nand prints every line of the file that contains the target string as a substring.","3d0046c7":"Q.9","a43d1e85":"Q.11","bf2f3367":"# **Text data, files and exceptions.**","f525decd":"Q.7","34d2f6da":"Q.2","fd3517ce":"(e) Sigel, M.","ce0d011c":"(d) M. M. Sigel","6b9cb944":"Q.15","5789942b":"Q.14","af2dc54d":"Q.13","1887a9b9":"Q.16","6a716d73":"Q.17","8642dac3":"Q.3","9ed93e3d":"(e) Change every occurrence of was to is (and name the new string newS).","a927edf8":"a)To variable count, the number if occurence of string 'day' in string forecast.","11645a24":"a) The slice consisting of the second and third character of s is 'bc'.","2faba1ec":"Q.18","7bae7580":"Q.4","2d4e8848":"Q.6","a9a173b6":"(b) Sigel, Marlena M.","7ab3b3e1":"c) The slice of s excluding the first 14 characters is 'opqrstuvwxyz'.","dd02a47d":"d) The slice of s excluding the first and last characters is 'bcdefghijklmnopqrstuvw'.","8e146838":"Q.20"}}