{"cell_type":{"0134bcb0":"code","cf770279":"code","f43cf386":"code","f15768e3":"code","82856c2a":"code","9ae584dd":"code","9a557890":"code","0b2bd990":"code","5e27e33c":"code","d1c421c2":"code","4033d085":"code","6e5099d3":"code","430bf96e":"code","d2cf2fb9":"code","243645ac":"code","6a1a9dba":"code","ccb44172":"code","c84943f0":"code","df7c65d4":"code","70521ab8":"code","9f4c12ad":"code","84871f6a":"code","c8547510":"code","e150223e":"code","6d144256":"code","32fac22a":"code","7971afb8":"code","95f4e57a":"code","874f4086":"code","555803ac":"code","5defddab":"code","a64bf1d9":"code","5ed0336d":"code","d8213370":"code","d1ffa53a":"code","ea9d4987":"code","9acfbe16":"code","ae78954b":"code","3992a7c5":"code","e1ba3890":"code","519eeb42":"code","e763376e":"code","8e1e3813":"code","c8824d2a":"code","c6d5c5da":"code","d42ea6fa":"code","d4611f2e":"code","a1c0fed9":"code","8a4ebbe2":"code","c24a7819":"code","730e02b6":"code","549f32be":"code","fcc9b956":"code","294c02cd":"code","56d7b05f":"code","7aae4194":"code","956e7aa7":"code","1981c161":"code","18a94145":"code","68ac7993":"code","a3b0273a":"code","d17cb696":"code","bcb7a406":"code","0ba0663a":"code","36a07ef0":"code","a073ead0":"code","b3bfd497":"code","a4e915d9":"code","8aa25398":"code","44f147ca":"code","7fc8de34":"code","83e9991e":"code","c394ab72":"code","1151d4ed":"code","504531ca":"code","d1c1db79":"code","2290ef6b":"code","42cae176":"code","feb0ec7b":"code","eb8197e3":"code","2ea3ac11":"code","728a1bc2":"code","5ad10358":"markdown","fa8c52e9":"markdown","2dba71a6":"markdown","a04a6679":"markdown","439d4d84":"markdown","85e383cb":"markdown","0c78f866":"markdown","57cd5d97":"markdown","67b32b0e":"markdown","6ca407a8":"markdown","53c6d8da":"markdown"},"source":{"0134bcb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf770279":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","f43cf386":"pd.pandas.set_option('display.max_columns',None)","f15768e3":"df = pd.read_csv('..\/input\/advance-house-price-predicitons\/train.csv')","82856c2a":"df.shape","9ae584dd":"df.head()","9a557890":"features_with_na_values = [features for features in df.columns if df[features].isnull().sum()>1]","0b2bd990":"for feature in features_with_na_values:\n    print(feature , np.round(df[feature].isnull().mean() , 4), '% missing values')","5e27e33c":"for feature in features_with_na_values:\n    data = df.copy()\n    \n    data[feature]=np.where(data[feature].isnull(),1,0)\n    \n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","d1c421c2":"print('Id {}'.format(len(df.Id)))","4033d085":"numerical_features = [feature for feature in df.columns if df[feature].dtypes != 'O']","6e5099d3":"df[numerical_features].head()","430bf96e":"year_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]","d2cf2fb9":"year_feature","243645ac":"for feature in year_feature:\n    print(feature, df[feature].unique())","6a1a9dba":"df.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title(\"House Price vs YearSold\")","ccb44172":"year_feature","c84943f0":"for feature in year_feature:\n    if feature!='YrSold':\n        data=df.copy()\n        data[feature]=data['YrSold']-data[feature]\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","df7c65d4":"discrete_feature=[feature for feature in numerical_features if len(df[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))","70521ab8":"discrete_feature","9f4c12ad":"df[discrete_feature].head()","84871f6a":"for feature in discrete_feature:\n    data=df.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","c8547510":"continuous_feature=[feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]","e150223e":"print(\"Continuous feature Count {}\".format(len(continuous_feature)))","6d144256":"for feature in continuous_feature:\n    data=df.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","32fac22a":"# logarithmic transformation:\nfor feature in continuous_feature:\n    data=df.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data['SalePrice']=np.log(data['SalePrice'])\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()","7971afb8":"for feature in continuous_feature:\n    data = df.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","95f4e57a":"categorical_features=[feature for feature in df.columns if data[feature].dtypes=='O']","874f4086":"categorical_features","555803ac":"df[categorical_features].head()","5defddab":"for feature in categorical_features:\n    print('Feature name {} and number of categories present {}'.format(feature,len(df[feature].unique())))","a64bf1d9":"for feature in categorical_features:\n    data=df.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","5ed0336d":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","d8213370":"pd.pandas.set_option('display.max_columns', None)","d1ffa53a":"dataset = pd.read_csv('..\/input\/advance-house-price-predicitons\/train.csv')","ea9d4987":"dataset.head()","9acfbe16":"#chance of data leakage\nfrom sklearn.model_selection import train_test_split","ae78954b":"X_train,X_test,y_train,y_test=train_test_split(dataset,dataset['SalePrice'],test_size=0.1,random_state=0)","3992a7c5":"X_train.shape, X_test.shape","e1ba3890":"features_nan_values=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes=='O']","519eeb42":"for feature in features_nan_values:\n    print(\"{}: {}% missing values\".format(feature,np.round(dataset[feature].isnull().mean(),4)))","e763376e":"def replace_cat_feature(df,features_nan_values):\n    data=dataset.copy()\n    data[features_nan_values]=data[features_nan_values].fillna('Missing')\n    return data\n\ndataset=replace_cat_feature(dataset,features_nan_values)\n\ndataset[features_nan_values].isnull().sum()","8e1e3813":"dataset.head()","c8824d2a":"numerical_with_nan=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes!='O']","c6d5c5da":"for feature in numerical_with_nan:\n    print(\"{}: {}% missing value\".format(feature,np.around(dataset[feature].isnull().mean(),4)))","d42ea6fa":"for feature in numerical_with_nan:\n    median_value=dataset[feature].median()\n    dataset[feature+'nan']=np.where(dataset[feature].isnull(),1,0)\n    dataset[feature].fillna(median_value,inplace=True)\n    \ndataset[numerical_with_nan].isnull().sum()","d4611f2e":"dataset.head()","a1c0fed9":"for feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    dataset[feature]=dataset['YrSold']-dataset[feature]","8a4ebbe2":"dataset.head()","c24a7819":"for feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n       \n    dataset[feature]=dataset['YrSold']-dataset[feature]","730e02b6":"dataset.head()","549f32be":"dataset[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","fcc9b956":"import numpy as np\nnum_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor feature in num_features:\n    dataset[feature]=np.log(dataset[feature])","294c02cd":"dataset.head()","56d7b05f":"categorical_features=[feature for feature in dataset.columns if dataset[feature].dtype=='O']","7aae4194":"categorical_features","956e7aa7":"for feature in categorical_features:\n    temp=dataset.groupby(feature)['SalePrice'].count()\/len(dataset)\n    temp_df=temp[temp>0.01].index\n    dataset[feature]=np.where(dataset[feature].isin(temp_df),dataset[feature],'Rare_var')","1981c161":"dataset.head(100)","18a94145":"for feature in categorical_features:\n    labels_ordered=dataset.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    dataset[feature]=dataset[feature].map(labels_ordered)","68ac7993":"dataset.head(10)","a3b0273a":"scaling_feature=[feature for feature in dataset.columns if feature not in ['Id','SalePerice'] ]","d17cb696":"len(scaling_feature)","bcb7a406":"scaling_feature","0ba0663a":"dataset.head()","36a07ef0":"feature_scale=[feature for feature in dataset.columns if feature not in ['Id','SalePrice']]","a073ead0":"from sklearn.preprocessing import MinMaxScaler","b3bfd497":"scaler=MinMaxScaler()\nscaler.fit(dataset[feature_scale])","a4e915d9":"scaler.transform(dataset[feature_scale])","8aa25398":"data = pd.concat([dataset[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(dataset[feature_scale]), columns=feature_scale)],\n                    axis=1)","44f147ca":"data.head()","7fc8de34":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nimport matplotlib.pyplot as plt\n%matplotlib inline","83e9991e":"pd.pandas.set_option('display.max_columns', None)","c394ab72":"y_train = data[['SalePrice']]","1151d4ed":"X_train = data.drop(['Id','SalePrice'],axis=1)","504531ca":"feature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0))","d1c1db79":"feature_sel_model.fit(X_train, y_train)","2290ef6b":"feature_sel_model.get_support()","42cae176":"selected_feat = X_train.columns[(feature_sel_model.get_support())]","feb0ec7b":"print('total features: {}'.format((X_train.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\n","eb8197e3":"selected_feat","2ea3ac11":"X_train=X_train[selected_feat]","728a1bc2":"X_train.head()","5ad10358":"# FEATURE SELECTION:","fa8c52e9":"### OUTLIERS:","2dba71a6":"### TEMPORAL VARIABLES:","a04a6679":"### CATEGORICAL VARIABLE:","439d4d84":"## FEATURE SCALING:","85e383cb":"# EXPLORATORY DATA ANALYSIS:","0c78f866":"## HANDLING RARE CATEGORICAL FEATURE:","57cd5d97":"# FEATURE ENGINEERING:","67b32b0e":"### NUMERICAL VARIABLE:","6ca407a8":"### MISSING VALUES:","53c6d8da":"## NUMERICAL VARIABLE:"}}