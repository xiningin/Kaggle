{"cell_type":{"9a52c455":"code","c5a8aea4":"code","8a06b5c4":"code","d7f38fe1":"code","5cc50713":"code","562f38cc":"code","2db2444f":"code","4e75a34c":"code","2d1379c5":"code","eeec22b2":"code","8e7c43aa":"markdown","049010e7":"markdown","3cd72e1c":"markdown","44eea4a9":"markdown","ad3efbc1":"markdown","11195dad":"markdown","aa638dfd":"markdown","1fed521e":"markdown"},"source":{"9a52c455":"import os\n\nimport numpy as np\nimport pandas as pd\nimport pydicom\n\nfrom skimage.measure import label,regionprops\nfrom skimage.segmentation import clear_border\nfrom tqdm.notebook import tqdm \nfrom multiprocessing import Pool\n\nimport matplotlib.pyplot as plt","c5a8aea4":"class Detector:\n    def __call__(self, x):\n        raise NotImplementedError('Abstract') \n        \nclass ThrDetector(Detector):\n    def __init__(self, thr=-400):\n        self.thr = thr\n        \n    def __call__(self, x):\n        try:\n            x = pydicom.dcmread(x)\n            img = x.pixel_array\n            img = (img + x.RescaleIntercept) \/ x.RescaleSlope\n            img = img < self.thr\n            \n            img = clear_border(img)\n            img = label(img)\n            areas = [r.area for r in regionprops(img)]\n            areas.sort()\n            if len(areas) > 2:\n                for region in regionprops(img):\n                    if region.area < areas[-2]:\n                        for coordinates in region.coords:                \n                            img[coordinates[0], coordinates[1]] = 0\n                            \n            area = (img > 0).sum() * x.PixelSpacing[0] * x.PixelSpacing[1] # scale the detected lung area according the the pixel spacing value\n            \n        except:\n            area = np.nan\n\n        try:\n            loc = x.ImagePositionPatient[2]\n        except:\n            loc = np.nan\n\n        return area, loc\n  \nclass Integral:\n    def __init__(self, detector: Detector):\n        self.detector = detector\n    \n    def __call__(self, xs):\n        raise NotImplementedError('Abstract')\n        \n\nclass AreaIntegral(Integral):\n    def __call__(self, xs):\n        \n        with Pool(4) as p:\n            areas, locs = map(list, zip(*p.map(self.detector, xs) ))\n        \n        filt = (~np.isnan(locs)) & (~np.isnan(areas))\n        areas = np.array(areas)[filt]\n        locs = np.array(locs)[filt]\n        seq_idx = np.argsort(locs)\n\n        return np.trapz(y=areas[seq_idx], x=locs[seq_idx])\/1000","8a06b5c4":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntrain_data = {}\nfor p in train.Patient.values:\n    train_data[p] = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')","d7f38fe1":"keys = list(train_data.keys()) #[k for k in list(train_data.keys()) if k not in ['ID00011637202177653955184', 'ID00052637202186188008618']]","5cc50713":"integral = AreaIntegral(ThrDetector()) ","562f38cc":"volume = {}\nfor k in tqdm(keys, total=len(keys)):\n    x = []\n    for i in train_data[k]:\n        x.append(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{k}\/{i}') \n    volume[k] = integral(x)","2db2444f":"for k in tqdm(train.Patient.values):\n    #if k in ['ID00011637202177653955184', 'ID00052637202186188008618']:\n    #    continue\n    train.loc[train.Patient == k,'v'] = volume[k]","4e75a34c":"plt.figure(figsize=(10, 10))\nplt.xlabel('v')\nplt.ylabel('FVC')\nplt.plot(train.v, train.FVC, '.')","2d1379c5":"train[['v', 'FVC']].corr('spearman')","eeec22b2":"pd.to_pickle(volume, 'patient_lung_volume.pkl') # for readers to integrate with their modeling :D","8e7c43aa":"### In our case, the x-axis is the slice location (ImagePositionPatient[2] from dcm meta information), y-axis is the lung-area, applying trapezoidal method give as an approximate of lung volume","049010e7":"# In this kernel, I'm showing how to approximate lung volume with trapezoidal rule and threshold-based per-slice lung area detection (inspired from https:\/\/www.kaggle.com\/miklgr500\/lung-volume-feature)","3cd72e1c":"\n![440px-Trapezoidal_rule_illustration.svg.png](attachment:440px-Trapezoidal_rule_illustration.svg.png)","44eea4a9":"## Lung Volume Calculus","ad3efbc1":"## What is Trapezoidal Rule ?\n\n### Trapezoidal rule is a technique for approximating the definite integral.","11195dad":"![ff1e6d438c8e663ed8ab18d19b011371c24b3ac7.svg](attachment:ff1e6d438c8e663ed8ab18d19b011371c24b3ac7.svg)","aa638dfd":"1. As we could see, most of time, when lung volume increases, the FVC increases as well (High spearman\\ranking correlations)\n2. For **straight lines**, they are from the same patient, but the FVC is taken at different timing\n3. However, there are some outliers need to be further investigated","1fed521e":"## Some Observations and Conclusions"}}