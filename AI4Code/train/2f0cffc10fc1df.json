{"cell_type":{"2be16baf":"code","97798326":"code","44189f42":"code","b727cb32":"code","75c17152":"code","a1833e20":"code","c9a9a05e":"code","3774b003":"code","be51e72b":"code","90ba834b":"code","38910e34":"code","1ff0e25f":"code","f89b8e53":"code","f4d8bef8":"code","9cb679d2":"code","a789f7a1":"code","a3d486d5":"code","cbf56354":"code","de1b3aeb":"code","7320b2d6":"code","65be6964":"code","83c6c28a":"code","dce227cb":"code","9d460098":"code","25d01f07":"code","db8641ab":"code","93bfd731":"markdown","291a8c2e":"markdown","f4050930":"markdown","684b19b1":"markdown","eeb85cd8":"markdown","aea6c1e6":"markdown","34bb43cc":"markdown","ba1d7ea9":"markdown","239ae80a":"markdown","84db9b6e":"markdown","1c3f7fdd":"markdown","3516416d":"markdown","f7801953":"markdown","9876f693":"markdown","75c2f269":"markdown","998b3803":"markdown","cbb6e503":"markdown","1dd8372e":"markdown","48d66907":"markdown","b3021ac3":"markdown","0731d684":"markdown","0909b7f9":"markdown","24d0af71":"markdown","ba58e6d3":"markdown","a4b68a72":"markdown"},"source":{"2be16baf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","97798326":"cities = [\"barcelona\", \"madrid\", \"istanbul\", \"paris\"]","44189f42":"i = 0\n\nfor city in cities:\n    print(i, city)\n    i+=1","b727cb32":"for i, city in enumerate(cities):\n    print(i, city)","75c17152":"x_list = [1,2,3]\ny_list = [2,4,6]","a1833e20":"for i in range(len(x_list)):\n    x = x_list[i]\n    y = y_list[i]\n    print(x, y)","c9a9a05e":"for x,y in zip(x_list, y_list):\n    print(x, y)","3774b003":"x = 10\ny = -10","be51e72b":"print(\"Before : x = %d, y = %d\" %(x,y))","90ba834b":"tmp = y\ny = x\nx = tmp","38910e34":"print(\"After : x = %d, y = %d\" %(x,y))","1ff0e25f":"print(\"Before : x = %d, y = %d\" %(x,y))","f89b8e53":"x, y = y, x","f4d8bef8":"print(\"After : x = %d, y = %d\" %(x,y))","9cb679d2":"ages = {\n    \"Mary\" : 31,\n    \"Jonathan\" : 28\n}","a789f7a1":"# age = ages[\"Dick\"] this code has error, because dictionary has'nt \"Dick\" key.","a3d486d5":"if \"Dick\" in ages:\n    age = ages[\"Dick\"]\nelse: \n    age = \"unknown\"\n    \nprint(\"Dick is %s years old.\"%age)","cbf56354":"age = ages.get(\"Dick\", \"unknown\")\nprint(\"Dick is %s years old.\"%age)","de1b3aeb":"needle = \"e\"\nhaystack = [\"a\", \"b\", \"c\",\"d\"]","7320b2d6":"found = False\n\nfor letter in haystack:\n    if needle == letter:\n        print(\"Found!\")\n        found = True\n        break\n        \nif not found:\n        print(\"Not found!\")","65be6964":"for letter in haystack:\n    if needle == letter:\n        print(\"Found!\")\n        break\nelse: # if no break occured.\n    print(\"Not found!\")","83c6c28a":"f = open(\"\/kaggle\/input\/text-simple\/text.txt\")\ntext = f.read()\nfor line in text.split(\"\\n\"):\n    print(line)\n    \nf.close()","dce227cb":"f = open(\"\/kaggle\/input\/text-simple\/text.txt\")\n\nfor line in f:\n    print(line)\n\nf.close()","9d460098":"with open(\"\/kaggle\/input\/text-simple\/text.txt\") as f:\n    for line in f:\n        print(line)","25d01f07":"print(\"Converting!\")\nprint(int(\"1\"))\nprint(\"Done\")","db8641ab":"print(\"Converting!\")\n\ntry:\n    int(\"x\")\nexcept:\n    print(\"Conversion failed!\")\nelse:\n    print(\"Conversion successful!\")\nfinally:\n    print(\"Done\")","93bfd731":"## 6 - Use \"with\".","291a8c2e":"## 2 - Use \"zip\".","f4050930":"### - Bad Way","684b19b1":"### - Bad Way","eeb85cd8":"### - Bad Way","aea6c1e6":"## 4 - Use \"get\".","34bb43cc":"### + Good Way","ba1d7ea9":"### + Good Way","239ae80a":"### + Good Way","84db9b6e":"### + Good Way","1c3f7fdd":"## 5 - Use \"else\" after for loop.","3516416d":"### + Good Way","f7801953":"## 7 - Use \"try - catch\"","9876f693":"### + Good Way","75c2f269":"### - Bad Way","998b3803":"### - Bad Way","cbb6e503":"### + Best Way","1dd8372e":"## 1 - Use \"enumerate\".","48d66907":"### - Bad Way","b3021ac3":"### - Bad Way","0731d684":"# 7 Tricks to Write Better Python Code","0909b7f9":"**Source created by  Sebastiaan Math\u00f4t Youtube Channel.**","24d0af71":"### + Good Way","ba58e6d3":"## 3 - Use \"swap\".","a4b68a72":"**Source : https:\/\/www.youtube.com\/watch?v=pQmKDXUh2I8**"}}