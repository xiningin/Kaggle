{"cell_type":{"e8aec154":"code","f1aa8acb":"code","c765e099":"code","58d1e815":"code","ca947dab":"code","3910a1db":"code","4cd021da":"code","127aa2d1":"code","53a85c1e":"code","7e99bad2":"code","73bd528a":"code","79861c9a":"code","aa1ec91e":"code","e9903629":"code","fcbc5fc7":"code","09bed635":"code","4e8a9373":"code","ab79ffc2":"code","9320d556":"code","d86c9c8e":"code","4931c817":"code","bd363e4a":"code","0529a518":"code","4dd4e549":"code","10086225":"code","177e0ba6":"code","07476eae":"code","4a475110":"code","d9f88af8":"code","14ce7d0a":"code","e6898079":"code","45ae5b5a":"code","233b39a3":"code","8aa4fa5c":"code","ad2ad5c6":"markdown","90b51c8c":"markdown","fce32bb9":"markdown","17eda97d":"markdown","2bb0b007":"markdown","d2d81a58":"markdown","03b0945e":"markdown","d15acc8a":"markdown","e2d86cd3":"markdown","adfcd0f0":"markdown","af7c7244":"markdown","bdd90686":"markdown"},"source":{"e8aec154":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1aa8acb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pyecharts.charts import Map,Geo\nfrom pyecharts import options as opts\nfrom pyecharts.globals import ThemeType","c765e099":"!pip install pyecharts","58d1e815":"def ReadData(year):\n    return pd.read_csv(f\"\/kaggle\/input\/world-happiness\/{year}.csv\")","ca947dab":"df2015 = ReadData(2015)\ndf2016 = ReadData(2016)\ndf2017 = ReadData(2017)\ndf2018 = ReadData(2018)\ndf2019 = ReadData(2019)","3910a1db":"datasets =((\"2015\",df2015),(\"2016\",df2016),(\"2017\",df2017),(\"2018\",df2018),(\"2019\",df2019))\nfor year,data in datasets:\n    print(f\"shape of the {year} data: {data.shape}\\n\")","4cd021da":"#check nan values\nfor year,data in datasets:\n    print(f\"Nan values in {year}:\\n{data.isna().sum()}\\n\")","127aa2d1":"# we have null values in 2018 data\n#we're going to drop that\ndf2018.dropna(axis=0,inplace=True)","53a85c1e":"#Now we can merge the data on Country columns to make easier to analyze. In order to see which feature belongs to which country, I will add a suffix at the end of the features that says which year it belongs to.\ndf2015.columns = df2015.columns.map(lambda x: str(x) + '_2015')\ndf2016.columns = df2016.columns.map(lambda x: str(x) + '_2016')\ndf2017.columns = df2017.columns.map(lambda x: str(x) + '_2017')\ndf2018.columns = df2018.columns.map(lambda x: str(x) + '_2018')\ndf2019.columns = df2019.columns.map(lambda x: str(x) + '_2019')","7e99bad2":"df= df2015.merge(df2016,how =\"inner\", left_on =\"Country_2015\",right_on =\"Country_2016\")\ndf = df.merge(df2017, how = \"left\", left_on = \"Country_2015\", right_on = \"Country_2017\")\ndf = df.merge(df2018, how = \"left\", left_on = \"Country_2015\", right_on = \"Country or region_2018\")\ndf = df.merge(df2019, how = \"left\", left_on = \"Country_2015\",right_on = \"Country or region_2019\")","73bd528a":"df.drop(['Country_2016','Region_2016','Country_2017','Country or region_2018','Country or region_2019'],axis =1, inplace=True)","79861c9a":"df.isna().sum()","aa1ec91e":"df.dropna(axis = 0, inplace = True)","e9903629":"df.isna().sum()","fcbc5fc7":"sub_data = pd.concat([df[\"Country_2015\"],df[\"Happiness Score_2015\"],df[\"Happiness Score_2016\"],df[\"Happiness.Score_2017\"], df[\"Score_2018\"] ,df[\"Score_2019\"]], axis = 1)","09bed635":"sub_data = pd.melt(sub_data,id_vars = [\"Country_2015\"], value_vars = [\"Happiness Score_2015\",\"Happiness Score_2016\",\"Happiness.Score_2017\",\"Score_2018\",\"Score_2019\"], var_name = \"Years\",value_name = \"Happiness Score\")","4e8a9373":"sub_data[\"Years\"][sub_data[\"Years\"]== \"Happiness Score_2015\"]=2015\nsub_data[\"Years\"][sub_data[\"Years\"]== \"Happiness Score_2016\"]=2016\nsub_data[\"Years\"][sub_data[\"Years\"]== \"Happiness Score_2017\"]=2017\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Score_2018\"] = 2018\nsub_data[\"Years\"][sub_data[\"Years\"] == \"Score_2019\"] = 2019\n","ab79ffc2":"plt.figure(figsize = (30,40))\nsns.barplot(x = \"Years\",y= \"Happiness Score\", data = sub_data, hue = \"Country_2015\", palette = \"viridis\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Happiness Score\")\nplt.title(\"Happiness Scores by Years\")\nplt.show()","9320d556":"df_economy = pd.concat([df[\"Economy (GDP per Capita)_2015\"],df[\"Economy (GDP per Capita)_2016\"],df[\"Economy..GDP.per.Capita._2017\"],df[\"GDP per capita_2018\"], df[\"GDP per capita_2019\"] ,df[\"Country_2015\"]], axis = 1)","d86c9c8e":"df_economy = pd.melt(df_economy,id_vars = [\"Country_2015\"], value_vars = [\"Economy (GDP per Capita)_2015\",\"Economy (GDP per Capita)_2016\",\"Economy..GDP.per.Capita._2017\",\"GDP per capita_2018\",\"GDP per capita_2019\"], var_name = \"Years\",value_name = \"Economy(GDP per Capita)\")","4931c817":"df_economy[\"Years\"][df_economy[\"Years\"] == \"Economy (GDP per Capita)_2015\"] = 2015\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"Economy (GDP per Capita)_2016\"] = 2016\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"Economy..GDP.per.Capita._2017\"] = 2017\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"GDP per capita_2018\"] = 2018\ndf_economy[\"Years\"][df_economy[\"Years\"] == \"GDP per capita_2019\"] = 2019","bd363e4a":"plt.figure(figsize = (30,42))\nsns.lineplot(x= \"Years\", y=\"Economy(GDP per Capita)\",\n             data= df_economy,hue=\"Country_2015\", palette = \"viridis\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Economy(GDP per Capita)\")\nplt.title(\"Mean GDP per Capita by Years\")\nplt.show()","0529a518":"#I found the highest scoring and lowest scoring countries according to the scores of the countries and compared some fetaurs. These characteristics were health, freedom, and social support scores. The reason I looked at these was because I wanted to see if these traits affect the happiness score.\nsub_data = df[[\"Country_2015\",\"Score_2019\",\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"]]","4dd4e549":"df_largest_score = sub_data.nlargest(5,\"Score_2019\")\ndf_lowest_score = sub_data.nsmallest(5,\"Score_2019\")","10086225":"df_largest_score = df_largest_score.drop([\"Score_2019\"], axis = 1)","177e0ba6":"df_largest_score = pd.melt(df_largest_score,id_vars= ['Country_2015'] ,value_vars=[\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"])\ndf_largest_score = df_largest_score.reset_index()","07476eae":"df_lowest_score = df_lowest_score.drop([\"Score_2019\"], axis = 1)\n","4a475110":"df_lowest_score = pd.melt(df_lowest_score,id_vars= ['Country_2015'] ,value_vars=[\"Freedom to make life choices_2019\",\"Healthy life expectancy_2019\",\"Social support_2019\"])\ndf_lowest_score = df_lowest_score.reset_index()","d9f88af8":"plt.figure(figsize = (25,10))\nplt.subplot(1,2,1)\nplt.ylim((0,2))\nsns.barplot(x='Country_2015', y='value', hue='variable', data=df_largest_score ,palette = 'viridis')\nplt.title(\"Countries That Have Best Scores\")\n\n\n\nplt.subplot(1,2,2)\nplt.ylim((0,2))\nsns.barplot(x='Country_2015', y='value', hue='variable', data= df_lowest_score,palette = 'viridis')\nplt.title(\"Countries That Have Worst Scores\")\nplt.show()","14ce7d0a":"df[\"Score_difference\"] = 0\nfor i in range(len(df)):\n    df[\"Score_difference\"].iloc[i] = df[\"Score_2019\"].iloc[i] - df[\"Happiness Score_2015\"].iloc[i] \n","e6898079":"score_difference_top5 = df.nlargest(5,\"Score_difference\")\nscore_difference_bottom5 = df.nsmallest(5,\"Score_difference\")","45ae5b5a":"plt.figure(figsize = (25,10))\nplt.subplot(1,2,1)\nsns.barplot(x = \"Country_2015\", y = \"Score_difference\", data = score_difference_top5, palette = \"viridis\")\nplt.ylabel(\"Score Difference\")\nplt.xlabel(\"Country\")\nplt.title(\"Top 5 Happiness Score Increase\")\n\nplt.subplot(1,2,2)\nsns.barplot(x = \"Country_2015\", y = \"Score_difference\", data = score_difference_bottom5, palette = \"viridis\")\nplt.ylabel(\"Score Difference\")\nplt.xlabel(\"Country\")\nplt.title(\"Top 5 Happiness Score Decrease\")\nplt.show()","233b39a3":"score_data = pd.concat([df[\"Country_2015\"],df[\"Happiness Score_2015\"],df[\"Happiness Score_2016\"],df[\"Happiness.Score_2017\"], df[\"Score_2018\"] ,df[\"Score_2019\"]], axis = 1)\nscore_data[\"Score_difference\"] = 0\nfor i in range(len(sub_data)):\n    score_data[\"Score_difference\"].iloc[i] = score_data[\"Score_2019\"].iloc[i] - score_data[\"Happiness Score_2015\"].iloc[i] ","8aa4fa5c":"scoresGroupByCountry = score_data.groupby([\"Country_2015\",\"Score_difference\"]).sum().reset_index()\ncountry = list(scoresGroupByCountry[\"Country_2015\"])\ndiff = list(scoresGroupByCountry[\"Score_difference\"])\nlist1 = [[country[i],diff[i]] for i in range(scoresGroupByCountry.shape[0])] \nmap_1 = Map(init_opts=opts.InitOpts(width='1000px', height='460px',theme=ThemeType.ROMANTIC)) \nmap_1.add('Rank Difference', \n list1, \n maptype='world',\n is_map_symbol_show=False) \nmap_1.set_series_opts(label_opts=opts.LabelOpts(is_show=False)) \nmap_1.set_global_opts(visualmap_opts=opts.VisualMapOpts(max_=611,is_piecewise=True,pieces=[\n {\"max\": -3},\n {\"max\": -2, \"max\":-1},\n {\"max\": -1, \"max\": 0},\n {\"max\": 0, \"max\": 1},\n {\"max\": 1, \"max\": 2},\n {\"max\": 2, \"max\": 3}]),\n  title_opts=opts.TitleOpts(\n title='Happiness Score Difference By Countries',\n pos_left='center',\n padding=0,\n item_gap=2,\n title_textstyle_opts= opts.TextStyleOpts(color='Black',\n font_weight='bold',\n font_family='Courier New',\n font_size=30), \n subtitle_textstyle_opts= opts.TextStyleOpts(color='grey',\n font_weight='bold',\n font_family='Courier New',\n font_size=13)), \n legend_opts=opts.LegendOpts(is_show=False))\nmap_1.render_notebook()","ad2ad5c6":"Countries With the Highest Increase and Decrease**Countries With the Highest Increase and Decrease**","90b51c8c":"While doing this, I first determined the countries I wanted by using the nlargest() and nsmallest() functions. The reason I don't use the max() and min() functions is because they only return a number as output. In these functions, we can directly see the data with the values we want.","fce32bb9":"**Happiness Scores Top and Bottom Countries In 2019**","17eda97d":"**Happiness Score vs Year by Country**","2bb0b007":"In this part, I first wanted to look at the changes in the happiness score of countries from 2015 to 2019. So I added a feature that gives the score differences to the data by creating a for loop. After that, I got the countries with the highest increase and the highest decrease. Then I visualized it using barplot.","d2d81a58":"**data marge**","03b0945e":"**Economy vs Year by Countries**","d15acc8a":"**data analyze**","e2d86cd3":"In this section, first I created a sub-data to look at the change in happiness scores over the years. For this sub data, I concatenate the score values of the years in the table. Then I melted the dataset by years.","adfcd0f0":"Since the year column names appear as rows when I melt, I edited and replaced the column name with the year corresponding to each column name. Then I used the lineplot function in Seaborn library and made a graphic that shows us each years happiness scores by country.","af7c7244":"**importing libraries**","bdd90686":"**Happiness Score Difference By Countries**"}}