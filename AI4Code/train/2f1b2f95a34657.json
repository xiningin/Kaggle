{"cell_type":{"1ab1d5ba":"code","7043e5f4":"code","5c76397a":"code","45e28018":"code","4491cdeb":"code","2faab476":"code","bd23c5a6":"code","29469971":"code","3105401b":"code","4de3558a":"code","4c5a6ea8":"code","69110e5c":"code","c1f1013b":"code","07d529fc":"code","6f176d61":"code","513575d7":"code","3529aae7":"code","88a8dfa6":"code","d0078cb7":"code","78b711d9":"code","988c21d3":"code","6cb37428":"code","437ab1c8":"code","087fa39f":"code","989efb2e":"code","84614b14":"code","beaa1daa":"code","eadfe931":"code","6da0b549":"code","ae93e3c3":"code","3e812fba":"code","26dbbb9d":"code","9266ede1":"code","5c067277":"code","fdf65504":"code","8381062b":"code","ad271504":"code","0c35bbf3":"code","4a1ff64f":"code","8e7f1d3f":"code","154ad664":"code","e9cf335b":"code","1f9aff82":"code","29ee940c":"code","07ec854c":"code","783dfaf2":"code","82d54edd":"code","8f047df9":"code","9e68db2a":"code","3f037d0e":"code","9b94fbf0":"code","eced4add":"code","a3d3a033":"code","dba5b17e":"code","06d36f6c":"code","e27e1f0a":"code","c5c9eaa2":"code","c59fe708":"code","5176f99e":"code","d88debdc":"code","1a139e45":"code","c39d1370":"code","82f696cc":"code","240d8044":"code","a32fcf2b":"markdown","b8eab2d1":"markdown","02728288":"markdown","c24886cd":"markdown","05690a7c":"markdown","8c79f602":"markdown","c078bf89":"markdown","afa8970b":"markdown","beb1ca44":"markdown","03dc0d3a":"markdown","5cc722d2":"markdown","9316ced1":"markdown","d8050a16":"markdown","9905f748":"markdown","ee2e3245":"markdown","d711f67e":"markdown","d232fefb":"markdown","50bc8637":"markdown","f04ddf6d":"markdown","6e034b37":"markdown"},"source":{"1ab1d5ba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","7043e5f4":"data=pd.read_csv('..\/input\/country-data-test-2020\/Country-data.csv')","5c76397a":"data.head()","45e28018":"pd.options.display.max_columns=None\npd.options.display.max_rows=None\nnp.set_printoptions(suppress=True)\n","4491cdeb":"data","2faab476":"print(\"The data consist of\",data.shape[0],\"rows and\",data.shape[1],\"columns\")","bd23c5a6":"print(\"The categorical columns in the dataset are : \")\nfor i in data.select_dtypes(include=\"object\").columns:\n    print(i)","29469971":"print(\"The numerical columns in the dataset are : \")\nfor i in data.select_dtypes(exclude=\"object\").columns:\n    print(i,end='\\n')","3105401b":"print(\"Column name   :   Data Type\")\nfor i in data.columns:\n    print(i,\"    \",data[i].dtype)","4de3558a":"data.select_dtypes(exclude=\"object\").describe()","4c5a6ea8":"for i in data.select_dtypes(exclude=\"object\").columns:\n    print('\\n',i)\n    print(\"1st quantile:\",data[i].quantile(0.25),\"\\nThird quantile:\",data[i].quantile(0.75),\"\\nMedian:\",data[i].quantile(0.5),\"\\nIQR:\",data[i].quantile(0.75)-data[i].quantile(0.25),'\\nUpper Whisker:',data[i].quantile(0.75)+1.5*(data[i].quantile(0.75)-data[i].quantile(0.25)),'\\nLower Whisker:',data[i].quantile(0.25)-1.5*(data[i].quantile(0.75)-data[i].quantile(0.25)))","69110e5c":"data.cov()","c1f1013b":"data.corr()","07d529fc":"plt.subplots(figsize=(8,8))\nsns.heatmap(data.corr(),annot=True)","6f176d61":"sns.pairplot(data)","513575d7":"data.set_index('country',inplace=True)","3529aae7":"data.head()","88a8dfa6":"data_log=np.log(data)","d0078cb7":"data_log=np.log(data.drop('inflation',axis=1))","78b711d9":"data_log.head()","988c21d3":"data_log_new=pd.concat((data_log,data['inflation']),axis=1)","6cb37428":"data_log_new","437ab1c8":"plt.figure(figsize=(20, 15))\nfor i, x_var in enumerate(data_log_new.columns):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(x = x_var, data = data_log_new, orient = 'h')","087fa39f":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","989efb2e":"data_scaled = pd.DataFrame(sc.fit_transform(data_log_new),columns=data_log_new.columns,index=data_log_new.index)","84614b14":"data_scaled.head()","beaa1daa":"from sklearn.decomposition import PCA\npca = PCA(n_components=4)\ndata_pca=pca.fit(data_scaled)\n\nX_pca = pca.transform(data_scaled)\nX_pca.shape\n","eadfe931":"pca.components_\n","6da0b549":"pca.explained_variance_\n","ae93e3c3":"pca.explained_variance_ratio_","3e812fba":"sum(pca.explained_variance_ratio_)","26dbbb9d":"pca2=PCA(0.9)","9266ede1":"data_pca = pca2.fit_transform(data_scaled)","5c067277":"data_pca","fdf65504":"data_pca_df=pd.DataFrame(data_pca,columns=['PC1', 'PC2', 'PC3', 'PC4',],index=data_scaled.index)","8381062b":"data_pca_df","ad271504":"sns.heatmap(data_pca_df.corr(),annot=True)","0c35bbf3":"data_pca_df.corr()","4a1ff64f":"sns.pairplot(data_pca_df)","8e7f1d3f":"plt.figure(figsize=(10, 8))\nfor i, x_var in enumerate(data_pca_df.columns):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(x = x_var, data = data_pca_df, orient = 'v')","154ad664":"q1=data_pca_df['PC2'].quantile(0.25)\nq3=data_pca_df['PC2'].quantile(0.75)\niqr=q3-q1\ndata_pca_df_without_outliers=data_pca_df[((data_pca_df['PC2']>(q1-1.5*iqr))&(data_pca_df['PC2']<(q3+1.5*iqr)))]\nsns.boxplot(data_pca_df_without_outliers['PC2'])","e9cf335b":"plt.figure(figsize=(10, 8))\nfor i, x_var in enumerate(data_pca_df_without_outliers.columns):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(x = x_var, data = data_pca_df_without_outliers, orient = 'v')","1f9aff82":"q1=data_pca_df_without_outliers['PC3'].quantile(0.25)\nq3=data_pca_df_without_outliers['PC3'].quantile(0.75)\niqr=q3-q1\ndata_pca_df_without_outliers_1=data_pca_df_without_outliers[((data_pca_df_without_outliers['PC3']>(q1-1.5*iqr))&(data_pca_df_without_outliers['PC3']<(q3+1.5*iqr)))]\n","29ee940c":"plt.figure(figsize=(10, 8))\nfor i, x_var in enumerate(data_pca_df_without_outliers_1.columns):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(x = x_var, data = data_pca_df_without_outliers_1, orient = 'v')","07ec854c":"from sklearn.cluster import KMeans\n\ncluster_range = range( 1, 15 )\ncluster_errors = []\nfor num_clusters in cluster_range:\n  clusters = KMeans( num_clusters,n_init = 15, random_state=2)\n  clusters.fit(data_pca_df_without_outliers_1)\n  labels = clusters.labels_\n  centroids = clusters.cluster_centers_\n  cluster_errors.append( clusters.inertia_ )\nclusters_df = pd.DataFrame( { \"num_clusters\":cluster_range, \"cluster_errors\": cluster_errors } )\nclusters_df[0:15]","783dfaf2":"plt.figure(figsize=(12,6))\nplt.plot( clusters_df.num_clusters, clusters_df.cluster_errors, marker = \"o\" )\n\nkmeans = KMeans(n_clusters=3, n_init = 15, random_state=2)\nkmeans.fit(data_pca_df_without_outliers_1)\ncentroids=kmeans.cluster_centers_\ncentroid_df = pd.DataFrame(centroids, columns = list(data_pca_df_without_outliers_1) )\ncentroid_df","82d54edd":"# data_clustered_group=data_clustered.groupby('Group')\n# df0=data_clustered_group.get_group(0)\n# df1=data_clustered_group.get_group(1)\n# df2=data_clustered_group.get_group(2)\n# final = pd.concat([df0,df1,df2])\n# final.head()\n","8f047df9":"kmeans.inertia_","9e68db2a":"# Silhouotte : \nfrom __future__ import print_function\n%matplotlib inline\n\n\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\nprint(__doc__)\n\n# Generating the sample data from make_blobs\n# This particular setting has one distinct cluster and 3 clusters placed close\n# together.\nX=data_pca_df_without_outliers_1.values\n\nrange_n_clusters = [2, 3, 4, 5, 6]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters,n_init=15, random_state=2)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.Spectral(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.Spectral(cluster_labels.astype(float) \/ n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\n    plt.show()","3f037d0e":"K_means_3 = KMeans(n_clusters=3,max_iter=50)\nK_means_3.fit(data_pca_df_without_outliers_1)","9b94fbf0":"data_pca_with_initial = data_pca_df_without_outliers_1.merge(data, on = 'country')","eced4add":"Cluster_labels = pd.Series(K_means_3.labels_, index = data_pca_df_without_outliers_1.index)","a3d3a033":"data_clustered = pd.concat([data_pca_df_without_outliers_1, Cluster_labels], axis = 1)","dba5b17e":"data_clustered.head()","06d36f6c":"data_clustered.rename(columns={0:'Group'},inplace=True)","e27e1f0a":"data_clustered","c5c9eaa2":"data_clustered['Group'].value_counts()","c59fe708":"color = [\"#ff0000\", \"#0000ff\", \"#00ff00\"]\nplt.figure(figsize = (12,8))\nsns.scatterplot(x = 'PC1', y = 'PC2', hue = 'Group', data = data_clustered,palette=color)","5176f99e":"group_mean_df=data_clustered.groupby('Group').mean()","d88debdc":"group_mean_df.drop(PCA_col,axis=1)","1a139e45":"PCA_col=['PC1','PC2','PC3','PC4']","c39d1370":"PCA_columns=['PC1','PC2','PC3','PC4','Group']","82f696cc":"plt.figure(figsize=(20, 15))\nfor i, x_var in enumerate(data_clustered.drop(PCA_columns,axis=1).columns):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(x = x_var, data = data_clustered.drop(PCA_columns,axis=1).groupby(data_clustered['Group']).mean(), orient = 'v')","240d8044":"group_mean_df.drop(PCA_col,axis=1)","a32fcf2b":"Clustering the countries into three different groups as 0,1 and 2,\nwhere 0 are worsely affected countries,2 needs improvement and 1 is a better performing country","b8eab2d1":"**The categorical variable in the datset is country and it has unique values equal to the number of instances in the dataset(167). Hence there are 167 categories in the colum 'Country'**","02728288":"Here in our dataset we observe more multicollinearity between variables. This will cause our model to under perform and clustering cant be done appropriately.\n\nHence we choose PCA to eliminate multicollinearity among the varibles.","c24886cd":"The Groups which are in need of financial aid are Group 0 and Group2,Since Child mortality rate is very high for 0, and slightly high for 2","05690a7c":"From the above table, Child mortality rate is high for group 0","8c79f602":"We have removed the outliers which were affecting our analysis from two components.","c078bf89":"The above Plot Significantly shows there are few outliers in the principal components. Though we will use a boxplot to check","afa8970b":"**Now the data is transformed, cleaned,scaled and ready for model building.**","beb1ca44":"### Use the cluster labels from the best method above and interpret the clusters formed.","03dc0d3a":"**The above correlation matrix gives us a clear observation that correlation does not exist between any of the components.\nHence we have eliminated multicollinearity in our dataset and also reduced the number of dimensions.**","5cc722d2":"### 3. Dimensionality Reduction","9316ced1":"We are getting a warning for log transformation, since there are negative values in the column 'inflation'. Hence we will drop the column inflation and proceed with the transformations","d8050a16":"The business Organization should concentrate on upbringing the group 0, Improvise the group2 and maintain the condition of the countries in grou 1.","9905f748":"### 2. Data Preparation ","ee2e3245":"### Clustering: Use PCA dimensions to cluster the data. Apply K-means and Agglomerative clustering.","d711f67e":"#### Applying PCA","d232fefb":"Some countries which fall into category 2 maybe categorised as 1 or 0. which will totally change the persp","50bc8637":"Here, the inertia value is 336 for 3 clusters, where the data points are almost densely packed and it is easy to cluster into three groups.\nAlso, the silhoutte score fro 3 clusters is 0.34 which suggests the good fit to be considered.","f04ddf6d":"### Summarize as follows","6e034b37":"After doing log transformation, we have reduced the skewness in our data and the data shows normal distribution."}}