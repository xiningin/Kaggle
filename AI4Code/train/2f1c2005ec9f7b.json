{"cell_type":{"9fe8e5ff":"code","3ab659f5":"code","86b35637":"code","4faa3564":"code","71b725a5":"code","c2cad50b":"code","9db4fc29":"code","9c2b8c48":"code","9211146b":"code","234f090e":"code","6d96f4ce":"code","f751e3d2":"code","d803521c":"code","bdd0410b":"code","93a39d20":"code","302ae763":"code","62ba49ce":"code","49cddb5e":"markdown","d40bc3b1":"markdown","feb97027":"markdown","10204f6a":"markdown","dc986481":"markdown","f07429a9":"markdown","9ecb0fb1":"markdown","735b5e4f":"markdown","0b3642f1":"markdown","1473ad36":"markdown","9518ec7e":"markdown","0ee56e1a":"markdown","cd6289da":"markdown","9cce5ff8":"markdown","af060426":"markdown"},"source":{"9fe8e5ff":"# Import packages\nimport os\nimport warnings \nimport gc\nfrom pprint import pprint\nfrom datetime import datetime \n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport plotly.express as px \nimport plotly.graph_objects as go\nimport seaborn as sns\n\n# Configurations\n# warnings.simplefilter(\"ignore\")\npd.set_option('max_columns', 100)   # Enable complete display if the column number of dataframe is less than 100","3ab659f5":"# Variable definitions\nDATA_PATH = \"..\/input\/mlb-player-digital-engagement-forecasting\" \nDATA_FILES = [\"players.csv\", \"teams.csv\", \"seasons.csv\", \n              \"awards.csv\", \"train.csv\"]","86b35637":"# Utility functions \ndef describe(df, stats):\n    '''Describe the basic information of the raw dataframe.\n    \n    Parameters:\n        df: pd.DataFrame, raw dataframe to be analyzed\n        stats: boolean, whether to get descriptive statistics \n    \n    Return:\n        None\n    '''\n    df_ = df.copy(deep=True)   # Copy of the raw dataframe\n    n_features = df_.shape[1]\n    if n_features > pd.get_option(\"max_columns\"):\n        # If the feature (column) number is greater than max number of columns displayed\n        warnings.warn(\"Please reset the display-related options max_columns \\\n                      to enable the complete display.\", \n                      UserWarning) \n    print(\"=====Basic information=====\")\n    display(df_.info())\n    get_nan_ratios(df_)\n    if stats:\n        print(\"=====Description=====\")\n        numeric_col_num = df_.select_dtypes(include=np.number).shape[1]   # Number of cols in numeric type\n        if numeric_col_num != 0:\n            display(df_.describe())\n        else:\n            print(\"There's no description of numeric data to display!\")\n    del df_\n    gc.collect()\n\ndef get_nan_ratios(df):\n    '''Get NaN ratios of columns with NaN values.\n    \n    Parameters:\n        df: pd.DataFrame, raw dataframe to be analyzed\n        \n    Return:\n        None\n    '''\n    df_ = df.copy()   # Copy of the raw dataframe\n    nan_ratios = df_.isnull().sum() \/ df_.shape[0] * 100   # Ratios of value nan in each column\n    nan_ratios = pd.DataFrame([df_.columns, nan_ratios]).T   # Take transpose \n    nan_ratios.columns = [\"Columns\", \"NaN ratios\"]\n    nan_ratios = nan_ratios[nan_ratios[\"NaN ratios\"] != 0.0]\n    print(\"=====NaN ratios of columns with NaN values=====\")\n    if len(nan_ratios) == 0:\n        print(\"There isn't any NaN value in the dataset!\")\n    else:\n        display(nan_ratios)\n    del df_\n    gc.collect() ","4faa3564":"# Get basic information about train.csv \ntrain = pd.read_csv(os.path.join(DATA_PATH, \"train.csv\"))\ntrain['date'] = pd.to_datetime(train['date'], format=\"%Y%m%d\")\ndescribe(train, True)","71b725a5":"# Get basic information about static files\nsup_files = DATA_FILES[:-1]\nfor file in sup_files:\n    sup_df = pd.read_csv(os.path.join(DATA_PATH, file))\n    print(f\"====={file[:-4]}=====\")\n    display(sup_df.head())\n    print(f\"Shape: {sup_df.shape}\")\n    describe(sup_df, False)\n    globals()[file[:-4]] = sup_df   # Assign supplementary dataframe into globally accessible dict","c2cad50b":"# Utility functions\ndef unpack_json(json_str):\n    '''Convert json string found in daily dataframe to pandas object.\n    \n    Parameters:\n        json_str: str, data entry in \"train\" dataframe in the format of json string\n    \n    Return:\n        json_obj: np.nan or pandas object, nan if the entry is originally nan; or, the converted pandas object is returned \n    '''\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)","9db4fc29":"# Create mapping relationship between column names of train dataframe and the \"unpacked\" table\ndaily_unpacked_dfs = pd.DataFrame(train.columns[1:], columns=[\"dfName\"])\ndaily_unpacked_dfs[\"df\"] = [pd.DataFrame() for _ in range(len(daily_unpacked_dfs))]\ndaily_unpacked_dfs","9c2b8c48":"# Unpack each table residing in train dataframe\nfor df_idx, sub_df in daily_unpacked_dfs.iterrows():\n    table_name = sub_df[\"dfName\"]\n    table = train.loc[:, [\"date\", table_name]]\n    table = (table[~pd.isna(table[table_name])].reset_index(drop=True))   # Get samples having no nan entries \n    \n    daily_unpacked_samples = [] \n    for daily_idx, daily_sample in table.iterrows():\n        daily_unpacked_sample = unpack_json(daily_sample[table_name])\n        daily_unpacked_sample[\"dailyDataDate\"] = daily_sample[\"date\"]\n        daily_unpacked_samples = daily_unpacked_samples + [daily_unpacked_sample]\n    unpacked_table = pd.concat(daily_unpacked_samples, ignore_index=True).set_index(\"dailyDataDate\").reset_index()\n\n    globals()[table_name] = unpacked_table   # Assign unpacked table into globally accessible dict\n    daily_unpacked_dfs[\"df\"][df_idx] = unpacked_table   # Assign unpacked table to create the mapping relationship \n                                                        # (dfName (table name) <--> unpacked table)\n\n# Free up the memory\ndel train, table, daily_unpacked_samples\ngc.collect()","9211146b":"# Dump dataframe to csv\ndaily_unpacked_dfs.to_csv(\".\/daily_unpacked_dfs.csv\", index=False)","234f090e":"# Check unpacked table by showing one single sample from each table \nfor table_name in daily_unpacked_dfs[\"dfName\"]:\n    print(f\"=====Table: {table_name}=====\")\n    table = globals()[table_name]\n    display(table.head(1))\n    print(f\"Shape: {table.shape}\\n\")","6d96f4ce":"dates = pd.DataFrame(nextDayPlayerEngagement['dailyDataDate'].unique(), columns=['dailyDataDate'])\ndates['date'] = pd.to_datetime(dates['dailyDataDate'].astype(str))\ndates['year'] = dates['date'].dt.year\ndates['month'] = dates['date'].dt.month\ndates['weekday'] = dates['date'].apply(lambda date: date.weekday())   # Retrieve weekday for each date\n\nprint(\"=====DataFrame: dates=====\")\ndisplay(dates.head())","f751e3d2":"dates_with_seasons = pd.merge(dates, seasons, left_on='year', right_on='seasonId')   # Join two dfs with key 'seasonId' (i.e. year)\n\n# Determine whether the date is in season or not\ndates_with_seasons['inSeason'] = dates_with_seasons['date'].between(\n    dates_with_seasons['regularSeasonStartDate'],\n    dates_with_seasons['postSeasonEndDate'],\n    inclusive=True   # Include boudaries\n)   \n\n# Categorize different game seasons\ndates_with_seasons['seasonPart'] = np.select(\n    [\n        dates_with_seasons['date'] < dates_with_seasons['preSeasonStartDate'], \n        dates_with_seasons['date'] < dates_with_seasons['regularSeasonStartDate'],\n        dates_with_seasons['date'] <= dates_with_seasons['lastDate1stHalf'],\n        dates_with_seasons['date'] < dates_with_seasons['firstDate2ndHalf'],\n        dates_with_seasons['date'] <= dates_with_seasons['regularSeasonEndDate'],\n        dates_with_seasons['date'] < dates_with_seasons['postSeasonStartDate'],\n        dates_with_seasons['date'] <= dates_with_seasons['postSeasonEndDate'],\n        dates_with_seasons['date'] > dates_with_seasons['postSeasonEndDate']\n    ], \n    [\n        'Offseason',\n        'Preseason',\n        'Reg Season 1st Half',\n        'All-Star Break',\n        'Reg Season 2nd Half',\n        'Between Reg and Postseason',\n        'Postseason',\n        'Offseason'\n    ], \n    default=np.nan\n)    \n\nprint(\"=====DataFrame: dates_with_seasons=====\")\ndisplay(dates_with_seasons.head())\n\n# Plot bar chart of season categories\nseason_counts = dates_with_seasons['seasonPart'].value_counts()\nfig = go.Figure()\nfig.add_trace(go.Pie(\n    labels=season_counts.index,\n    values=season_counts\n))\nfig.update_layout(\n    title='Pie Chart of Season Categories'\n)\nfig.show()","d803521c":"# Rename columns to enhance recognizability, indicating these columns aren't come from 'roster'\nplayer_game_stats = playerBoxScores.copy().rename(\n    columns={\n        'teamId': 'gameTeamId', \n        'teamName': 'gameTeamName'\n    }\n)\n\n# Add in fractional representation of inningsPitched\nplayer_game_stats['inningsPitchedAsFrac'] = np.where(\n    pd.isna(player_game_stats['inningsPitched']),\n    np.nan,   \n    (np.floor(player_game_stats['inningsPitched']) +\n    (player_game_stats['inningsPitched'] -\n    np.floor(player_game_stats['inningsPitched'])) * 10\/3)\n)\n\n# Add in Tom Tango pitching game score \nplayer_game_stats['pitchingGameScore'] = (\n    40 + \n    2 * player_game_stats['outsPitching'] +   # Game total outs recorderd \n    1 * player_game_stats['strikeOutsPitching'] -\n    2 * player_game_stats['baseOnBallsPitching'] -\n    2 * player_game_stats['hitsPitching'] -\n    3 * player_game_stats['runsPitching'] -\n    6 * player_game_stats['homeRunsPitching']\n)\n\n# Add in criteria for no-hitter game completed by a single pitcher \nplayer_game_stats['noHitter'] = np.where(\n    (player_game_stats['gamesStartedPitching'] == 1) &\n    (player_game_stats['inningsPitched'] >= 9) &\n    (player_game_stats['hitsPitching'] == 0),\n    1, \n    0\n)\n\nprint(\"=====DataFrame: player_game_stats=====\")\ndisplay(player_game_stats.head())","bdd0410b":"# Apply aggregate functions on specific features\nplayer_date_stats_agg = pd.merge(\n    player_game_stats.groupby(['dailyDataDate', 'playerId'], as_index=False).agg(\n        numGames=('gamePk', 'nunique'),  \n        numTeams=('gameTeamId', 'nunique'),\n        gameTeamId=('gameTeamId', 'min')   # Take min to simplify the extraction \n    ), \n    player_game_stats.groupby(['dailyDataDate', 'playerId'], as_index = False)[\n        ['runsScored', 'homeRuns', 'strikeOuts', 'baseOnBalls', \n         'hits', 'hitByPitch', 'atBats', 'caughtStealing', \n         'stolenBases', 'groundIntoDoublePlay', 'groundIntoTriplePlay', 'plateAppearances',\n         'totalBases', 'rbi', 'leftOnBase', 'sacBunts', \n         'sacFlies', 'gamesStartedPitching', 'runsPitching', 'homeRunsPitching', \n         'strikeOutsPitching', 'baseOnBallsPitching', 'hitsPitching', 'inningsPitchedAsFrac', \n         'earnedRuns', 'battersFaced', 'saves', 'blownSaves', \n         'pitchingGameScore', 'noHitter'\n        ]\n    ].sum(),   \n    on=['dailyDataDate', 'playerId'],\n    how='inner'\n)\n\nprint(\"=====DataFrame: player_date_stats_agg=====\")\ndisplay(player_date_stats_agg.head())","93a39d20":"# Extract games played in regular or post-season with valid scores (those without NaN)\ngames_for_stats = games[\n    np.isin(games['gameType'], ['R', 'F', 'D', 'L', 'W', 'C', 'P']) &\n    ~pd.isna(games['homeScore']) &\n    ~pd.isna(games['awayScore'])\n]\n\n# Get games table from home team perspective\ngames_home_perspective = games_for_stats.copy()\ngames_home_perspective.columns = [\n    col_value.replace('home', 'team').replace('away', 'opp') for \n    col_value in games_home_perspective.columns.values\n]   # Change column names so that \"team\" is \"home\", \"opp\" is \"away\"\ngames_home_perspective['isHomeTeam'] = 1\n\n# Get games table from away team perspective\ngames_away_perspective = games_for_stats.copy()\ngames_away_perspective.columns = [\n    col_value.replace('home', 'opp').replace('away', 'team') for \n    col_value in games_away_perspective.columns.values\n]   # Change column names so that \"opp\" is \"home\", \"team\" is \"away\"\ngames_away_perspective['isHomeTeam'] = 0\n\n# Put together games tables from home\/away perspective\nteam_games = (pd.concat(\n    [\n        games_home_perspective,\n        games_away_perspective\n    ],\n    ignore_index=True)\n)\n\nprint(\"=====DataFrame: team_games=====\")\ndisplay(team_games.head())","302ae763":"# Copy over team box scores data (team-game level)\nteam_game_stats = teamBoxScores.copy()\n\n# Add suffix 'Team' to column names to reflect these stats are at team-game level,\n# helping differentiate from individual player stats (player-game level) when joining\nteam_game_stats.columns = [\n    (col_value + 'Team') \n    if (col_value not in ['dailyDataDate', 'home', 'teamId', \n                          'gamePk','gameDate', 'gameTimeUTC'])\n    else col_value for \n    col_value in team_game_stats.columns.values\n]\n\n# Merge games table with team_game_stats table\nteam_games_with_stats = pd.merge(\n    team_games,\n    # Drop columns already present in team_games table\n    team_game_stats.drop(['home', 'gameDate', 'gameTimeUTC'], axis = 1),\n    on = ['dailyDataDate', 'gamePk', 'teamId'],\n    # Doing this as 'inner' join excludes spring training games, postponed games,\n    # etc. from original games table, but this may be fine for purposes here \n    how = 'inner'\n)\n\nprint(\"=====DataFrame: team_games_with_stats=====\")\ndisplay(team_games_with_stats.head())\n\n# Apply aggregate functions on specific features\nteam_date_stats_agg = (\n    team_games_with_stats.groupby(['dailyDataDate', 'teamId', 'gameType', \n                                   'oppId', 'oppName'], as_index = False).agg(\n        numGamesTeam = ('gamePk', 'nunique'),\n        winsTeam = ('teamWinner', 'sum'),\n        lossesTeam = ('oppWinner', 'sum'),\n        runsScoredTeam = ('teamScore', 'sum'),\n        runsAllowedTeam = ('oppScore', 'sum')\n    )\n)\n\nprint(\"=====DataFrame: team_date_stats_agg=====\")\ndisplay(team_date_stats_agg.head())","62ba49ce":"# Select features of interest from 'standings' table\nstandings_selected_fields = (\n    standings[['dailyDataDate', 'teamId', 'streakCode', \n               'divisionRank', 'leagueRank', 'wildCardRank', \n               'pct']].rename(columns = {'pct': 'winPct'})\n)\n\n# Add suffix 'Team' to column names to reflect these features are at team level,\n# helping differentiate from those at player level when joining\nstandings_selected_fields.columns = [\n    (col_value + 'Team') \n    if (col_value not in ['dailyDataDate', 'teamId'])\n    else col_value for \n    col_value in standings_selected_fields.columns.values\n]\n\n# Process the streak (win\/lose) information\n# Add fields to separate winning and losing streak from streak code\nstandings_selected_fields['streakLengthTeam'] = (\n    standings_selected_fields['streakCodeTeam'].\n    str.replace('W', '').\n    str.replace('L', '').\n    astype(float)\n)   # Extract magnitude of streak\n\n# Process scenario of winning \nstandings_selected_fields['winStreakTeam'] = np.where(\n    standings_selected_fields['streakCodeTeam'].str[0] == 'W',\n    standings_selected_fields['streakLengthTeam'],\n    np.nan\n)\n\n# Process scenario of losing \nstandings_selected_fields['lossStreakTeam'] = np.where(\n    standings_selected_fields['streakCodeTeam'].str[0] == 'L',\n    standings_selected_fields['streakLengthTeam'],\n    np.nan\n)\n\nstandings_for_digital_engagement_merge = (\n    pd.merge(\n        standings_selected_fields,\n        dates_with_seasons[['dailyDataDate', 'inSeason']],\n        on=['dailyDataDate'],\n        how='left'\n    ).\n    # Limit down standings to only in season version\n    query(\"inSeason\").\n    # Drop fields (features) no longer necessary\n    drop(['streakCodeTeam', 'streakLengthTeam', 'inSeason'], axis=1).\n    reset_index(drop=True)\n)\n\nprint(\"=====DataFrame: standings_for_digital_engagement_merge=====\")\ndisplay(standings_for_digital_engagement_merge.head())","49cddb5e":"## *3.2 Feature Extraction for Game Stats at **Player Game** Level*\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <p>\u4ee5\u4e0b\u70ba <code>playerBoxScores<\/code> table\u4e2d\u6240\u6709features\u7684\u4e2d\u6587\u89e3\u91cb\uff0c\u8acb\u9ede\u64ca\u4e0b\u65b9\u5c55\u958bcell<i class=\"fas fa-arrow-circle-down\"><\/i><\/p>\n<\/div>","d40bc3b1":"### 3.1.2 Features related to `seasons`:\n* Whether the date is in season or not\n* Season categories\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <ul>\n        <li><code>Offseason<\/code> - \u4f11\u8cfd\u5b63<\/li>\n        <li><code>Preseason<\/code> - \u71b1\u8eab\u8cfd<\/li>\n        <li><code>Reg Season 1st Half<\/code> - \u660e\u661f\u8cfd\u524d\u7684\u4f8b\u884c\u8cfd<\/li>\n        <li><code>All-Star Break<\/code> - \u660e\u661f\u8cfd<\/li>\n        <li><code>Reg Season 2nd Half<\/code> - \u660e\u661f\u8cfd\u5f8c\u7684\u4f8b\u884c\u8cfd<\/li>\n        <li><code>Between Reg and Postseason<\/code> - \u4f8b\u884c\u8cfd\u7d50\u675f\u5230\u5b63\u5f8c\u8cfd\u958b\u59cb\u524d\u7684\u904e\u6e21\u671f<\/li>\n        <li><code>Postseason<\/code> - \u5b63\u5f8c\u8cfd<\/li>\n        <li><code>Offseason<\/code> - \u4f11\u8cfd\u5b63<\/li>\n    <\/ul>\n<\/div>","feb97027":"<div class=\"alert alert-block alert-info\" style=\"font-size:15px; font-family: DFKai-sb;\">\n    <ul>\n        <li><code>home<\/code> - \u662f\u5426\u70ba\u4e3b\u968a<\/li>\n        <li><code>gamePk<\/code> - \u6bd4\u8cfd\u8b58\u5225\u78bc<\/li>\n        <li><code>gameDate<\/code> - \u6bd4\u8cfd\u65e5\u671f<\/li>\n        <li><code>gameTimeUTC<\/code> - \u6295\u624b\u6295\u51fa\u7b2c\u4e00\u7403\u7684\u6642\u9593\u9ede (UTC)<\/li>\n        <li><code>teamId<\/code> - \u968a\u4f0d\u8b58\u5225\u78bc<\/li>\n        <li><code>teamName<\/code> - \u968a\u4f0d\u540d\u7a31<\/li>\n        <li><code>playerId<\/code> - \u7403\u54e1\u8b58\u5225\u78bc<\/li>\n        <li><code>playerName<\/code> - \u7403\u54e1\u540d\u7a31<\/li>\n        <li><code>jerseyNum<\/code> - \u7403\u54e1\u80cc\u865f<\/li>\n        <li><code>positionCode<\/code> - \u653b\u5b88\u4f4d\u7f6e\u4ee3\u78bc<\/li>\n        <li><code>positionName<\/code> - \u653b\u5b88\u4f4d\u7f6e\u540d\u7a31<\/li>\n        <li><code>positionType<\/code> - \u653b\u5b88\u4f4d\u7f6e\u7a2e\u985e<\/li>\n        <li><code>battingOrder<\/code> - \u6253\u64ca\u9806\u5e8f\uff0c\u7b2c\u4e00\u500b\u6578\u5b57\u70ba\u68d2\u6b21\u3001\u5f8c\u5169\u500b\u6578\u5b57\u70ba\u6b64\u7403\u54e1\u5728\u672c\u5834\u6bd4\u8cfd\u7b2c\u5e7e\u6b21\u4e0a\u5834\u6253\u64ca\u3002\u4f8b\u5982:301\u8868\u793a\u6253\u8005\u70ba\u7b2c\u4e09\u68d2\uff0c\u4e14\u6b64\u6253\u8005\u5728\u672c\u5834\u6bd4\u8cfd\u7684\u7b2c\u4e8c\u6b21\u6253\u64ca\u3002<\/li>\n        <li><code>gamesPlayedBatting<\/code> - 1\u8868\u793a\u6b64\u7403\u54e1\u767b\u8a18\u70ba\u6253\u8005\u3001\u8dd1\u58d8\u54e1\u6216\u91ce\u624b<\/li>\n        <li><code>flyOuts<\/code> - \u906d\u63a5\u6bba\u6b21\u6578<\/li>\n        <li><code>groundOuts<\/code> - \u6efe\u5730\u7403\u51fa\u5c40\u6b21\u6578<\/li>\n        <li><code>runsScored<\/code> - \u5f97\u5206<\/li>\n        <li><code>doubles<\/code> - \u4e8c\u58d8\u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>triples<\/code> - \u4e09\u58d8\u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>homeRuns<\/code> - \u5168\u58d8\u6253\u6b21\u6578<\/li>\n        <li><code>strikeOuts<\/code> - \u906d\u4e09\u632f\u6b21\u6578<\/li>\n        <li><code>baseOnBalls<\/code> - \u88ab\u4fdd\u9001\u6b21\u6578<\/li>\n        <li><code>intentionalWalks<\/code> - \u88ab\u6545\u610f\u56db\u58de\u4fdd\u9001\u6b21\u6578<\/li>\n        <li><code>hits<\/code> - \u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>hitByPitch<\/code> - \u88ab\u89f8\u8eab\u7403\u64ca\u4e2d\u6b21\u6578<\/li>\n        <li><code>atBats<\/code> - <a href=\"https:\/\/zh.wikipedia.org\/wiki\/%E6%89%93%E6%95%B8\">\u6253\u6578<\/a><\/li>\n        <li><code>caughtStealing<\/code> - \u76dc\u58d8\u5931\u6557\u6b21\u6578<\/li>\n        <li><code>stolenBases<\/code> - \u76dc\u58d8\u6b21\u6578<\/li>\n        <li><code>groundIntoDoublePlay<\/code> - \u96d9\u6bba\u6253\u6b21\u6578<\/li>\n        <li><code>groundIntoTriplePlay<\/code> - \u4e09\u6bba\u6253\u6b21\u6578<\/li>\n        <li><code>plateAppearances<\/code> - <a href=\"https:\/\/zh.wikipedia.org\/wiki\/%E6%89%93%E5%B8%AD%E6%95%B8\">\u6253\u5e2d\u6578<a\/><\/li>\n        <li><code>totalBases<\/code> - <a href=\"http:\/\/twbsball.dils.tku.edu.tw\/wiki\/index.php\/%E5%A3%98%E6%89%93%E6%95%B8\">\u58d8\u6253\u6578<\/a><\/li>\n        <li><code>rbi<\/code> - <a href=\"https:\/\/zh.wikipedia.org\/wiki\/%E6%89%93%E9%BB%9E\">\u6253\u9ede<\/a><\/li>\n        <li><code>leftOnBase<\/code> - \u6b98\u58d8<\/li>\n        <li><code>sacBunts<\/code> - \u72a7\u7272\u89f8\u64ca\u6b21\u6578<\/li>\n        <li><code>sacFlies<\/code> - \u9ad8\u98db\u72a7\u7272\u6253\u6b21\u6578<\/li>\n        <li><code>catchersInterference<\/code> - \u6355\u624b\u59a8\u7919\u6253\u64ca\u6b21\u6578<\/li>\n        <li><code>pickoffs<\/code> - \u727d\u5236\u6b21\u6578<\/li>\n        <li><code>gamesPlayedPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u7403\u54e1\u662f\u5426\u767b\u8a18\u70ba\u6295\u624b\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>gamesStartedPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u7403\u54e1\u662f\u5426\u70ba\u5148\u767c\u6295\u624b\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>completeGamesPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u5b8c\u6295\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>shutoutsPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u5b8c\u5c01\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>winsPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u70ba\u52dd\u6295\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>lossesPitching<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u70ba\u6557\u6295\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>flyOutsPitching<\/code> - \u6295\u7403\u9020\u6210\u5916\u91ce\u98db\u7403\u51fa\u5c40\u6b21\u6578<\/li>\n        <li><code>airOutsPitching<\/code> - \u6295\u7403\u9020\u6210\u98db\u7403\u51fa\u5c40 (\u5916\u91ce+\u5167\u91ce)\u6b21\u6578<\/li>\n        <li><code>groundOutsPitching<\/code> - \u6295\u7403\u9020\u6210\u6efe\u7403\u51fa\u5c40\u6b21\u6578<\/li>\n        <li><code>runsPitching<\/code> - \u7e3d\u5931\u5206<\/li>\n        <li><code>doublesPitching<\/code> - \u88ab\u64ca\u51fa\u4e8c\u58d8\u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>triplesPitching<\/code> - \u88ab\u64ca\u51fa\u4e09\u58d8\u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>homeRunsPitching<\/code> - \u88ab\u64ca\u51fa\u5168\u58d8\u6253\u6b21\u6578<\/li>\n        <li><code>strikeOutsPitching<\/code> - \u4e09\u632f\u6578<\/li>\n        <li><code>baseOnBallsPitching<\/code> - \u56db\u58de\u7403\u4fdd\u9001\u6b21\u6578<\/li>\n        <li><code>intentionalWalksPitching<\/code> - \u6545\u610f\u56db\u58de\u7403\u4fdd\u9001\u6b21\u6578<\/li>\n        <li><code>hitsPitching<\/code> - \u88ab\u64ca\u51fa\u5b89\u6253\u6b21\u6578<\/li>\n        <li><code>hitByPitchPitching<\/code> - \u6295\u51fa\u89f8\u8eab\u7403\u6b21\u6578<\/li>\n        <li><code>atBatsPitching<\/code> - \u6295\u624b\u5275\u9020\u7684\u6253\u6578<\/li>\n        <li><code>caughtStealingPitching<\/code> - \u727d\u5236\u6210\u529f\u6b21\u6578<\/li>\n        <li><code>stolenBasesPitching<\/code> - \u88ab\u76dc\u58d8\u6b21\u6578<\/li>\n        <li><code>inningsPitched<\/code> - \u6295\u7403\u5c40\u6578<\/li>\n        <li><code>saveOpportunities<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u662f\u5426\u6709\u6551\u63f4\u6a5f\u6703\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>earnedRuns<\/code> - \u8cac\u4efb\u5931\u5206<\/li>\n        <li><code>battersFaced<\/code> - \u6295\u624b\u9762\u5c0d\u7684\u6253\u8005\u4eba\u6578\uff0c\u4e5f\u5c31\u662f\u6295\u7403\u4eba\u6b21<\/li>\n        <li><code>outsPitching<\/code> - \u6295\u624b\u5275\u9020\u7684\u51fa\u5c40\u6578<\/li>\n        <li><code>pitchesThrown<\/code> - \u6295\u7403\u6578<\/li>\n        <li><code>balls<\/code> - \u58de\u7403\u7e3d\u6578<\/li>\n        <li><code>strikes<\/code> - \u597d\u7403\u7e3d\u6578<\/li>\n        <li><code>hitBatsmen<\/code> - \u88ab\u6295\u624b\u89f8\u8eab\u7403\u64ca\u4e2d\u7684\u6253\u8005\u7e3d\u6578<\/li>\n        <li><code>balks<\/code> - \u6295\u624b\u72af\u898f\u6b21\u6578<\/li>\n        <li><code>wildPitches<\/code> - \u66b4\u6295\u6b21\u6578<\/li>\n        <li><code>pickoffsPitching<\/code> - \u727d\u5236\u6b21\u6578<\/li>\n        <li><code>rbiPitching<\/code> - \u6295\u624b\u9020\u6210\u7684\u7e3d\u6253\u9ede<\/li>\n        <li><code>inheritedRunners<\/code> - \u6551\u63f4\u6295\u624b\u4e0a\u5834\u6642\u5df2\u5728\u58d8\u4e0a\u7684\u8dd1\u8005\u6578<\/li>\n        <li><code>inheritedRunnersScored<\/code> - <a href=\"http:\/\/twbsball.dils.tku.edu.tw\/wiki\/index.php\/Inherited_runners-scored\">\u7e7c\u627f\u8dd1\u8005\u5f97\u5206<\/a><\/li>\n        <li><code>catchersInterferencePitching<\/code> - \u6295\u6355\u642d\u6a94\u9020\u6210\u7684\u6355\u624b\u59a8\u7919\u6253\u64ca\u6b21\u6578<\/li>\n        <li><code>sacBuntsPitching<\/code> - \u6295\u624b\u9020\u6210\u7684\u72a7\u7272\u89f8\u64ca\u6b21\u6578<\/li>\n        <li><code>sacFliesPitching<\/code> - \u6295\u624b\u9020\u6210\u7684\u9ad8\u98db\u72a7\u7272\u6253\u6b21\u6578<\/li>\n        <li><code>saves<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u6551\u63f4\u6210\u529f\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>holds<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u4e2d\u7e7c\u6210\u529f\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <li><code>blownSaves<\/code> - \u4e8c\u9032\u4f4d\u503c\uff0c\u6295\u624b\u662f\u5426\u6551\u63f4\u5931\u6557\uff0c\u82e5\u662f\u5247\u70ba1<\/li>\n        <br>\n        <p>\u4ee5\u4e0b\u540d\u8a5e\u8a73\u7d30\u89e3\u91cb\u8acb\u53c3\u8003<a href=\"http:\/\/twbsball.dils.tku.edu.tw\/wiki\/index.php\/%E5%AE%88%E5%82%99%E6%A9%9F%E6%9C%83\">\u5b88\u5099\u6a5f\u6703<\/a><\/p>\n        <li><code>assists<\/code> - \u52a9\u653b<\/li>\n        <li><code>putOuts<\/code> - \u523a\u6bba<\/li>\n        <li><code>errors<\/code> - \u5931\u8aa4<\/li>\n        <li><code>chances<\/code> - \u5b88\u5099\u6a5f\u6703<\/li>\n    <\/ul>\n<\/div>","10204f6a":"### 3.2.2 Features related to results of applying aggregate functions on `game stats` \nAll the aggregate functions are applied at **date-player** level, meaning that the groupings are done by compound key **(dailyDataDate, playerId)**.\n* Number of games per player per day\n* Number of teams per player per day \nThis should be **one team per player per day**, but playerId **518617 (Jake Diekman)** had 2 games for different teams marked as played on 5\/19\/19, due to resumption of game after he was traded.\n* Team identifier for (dailyDataDate, playerId) pair\nThis should be only **one team for almost all (dailyDataDate, playerId) pairs**. \n* Sum of some player game stats ","dc986481":"<div class=\"alert alert-block alert-info\" style=\"font-size:15px; font-family: DFKai-sb;\">\n    <ul>\n        <li><code>gamePk<\/code> - \u6bd4\u8cfd\u8b58\u5225\u78bc<\/li>\n        <li><code>gameType<\/code> - \u6bd4\u8cfd\u985e\u578b (\u5305\u542b\u985e\u8eab\u8cfd\u3001\u4f8b\u884c\u8cfd\u7b49\u7b49)\uff0c\u9019\u6b04\u7684\u503c\u5176\u5be6\u5c31\u662f\u4e0b\u65b9seriesDescription\u7684\u7e2e\u5beb\u3002<\/li>\n        <li><code>season<\/code> - \u8cfd\u5b63 (\u4ee5\u5e74\u8868\u793a)<\/li>\n        <li><code>gameDate<\/code> - \u6bd4\u8cfd\u65e5\u671f<\/li>\n        <li><code>gameTimeUTC<\/code> - \u6295\u624b\u6295\u51fa\u7b2c\u4e00\u7403\u7684\u6642\u9593\u9ede (UTC)<\/li>\n        <li><code>resumeDate<\/code> - \u88ab\u6c92\u6536\u7684\u6bd4\u8cfd\u7684\u91cd\u8cfd\u6642\u9593 (\u82e5\u6c92\u6709\u88ab\u6c92\u6536\uff0c\u5247\u70banull)<\/li>\n        <li><code>resumedFrom<\/code> - \u88ab\u6c92\u6536\u7684\u90a3\u5834\u6bd4\u8cfd\u7684\u6642\u9593 (\u82e5\u6c92\u6709\u88ab\u6c92\u6536\uff0c\u5247\u70banull)\u3002\u89c0\u5bdf\u767c\u73fe\uff0c\u82e5\u9019\u6b04\u6709\u503c\uff0c\u5176\u5be6\u5c31\u6703\u8ddfgameTimeUTC\u76f8\u7b49\u3002<\/li>\n        <li><code>codedGameState<\/code> - \u6bd4\u8cfd\u72c0\u614b\u4ee3\u78bc<\/li>\n        <li><code>detailedGameState<\/code> - \u6bd4\u8cfd\u72c0\u614b\u63cf\u8ff0<\/li>\n        <li><code>isTie<\/code> - \u5e03\u6797\u503c\uff0c\u82e5\u6bd4\u8cfd\u7d50\u679c\u70ba\u5e73\u624b<\/li>\n        <li><code>gameNumber<\/code> - \u5e6b\u52a9\u8fa8\u8b58<a href=\"http:\/\/twbsball.dils.tku.edu.tw\/wiki\/index.php\/%E9%9B%99%E9%87%8D%E8%B3%BD\">\u96d9\u91cd\u8cfd<\/a>\u7684\u6a19\u5e5f\uff0c\u5176\u503c\u70ba1\u62162\u3002<\/li>\n        <li><code>doubleHeader<\/code> - Y\u70ba\u96d9\u91cd\u8cfd\u3001N\u70ba\u55ae\u5834\u6bd4\u8cfd\u3001S\u70ba<font style=\"color: red;\">split-ticket<\/font><\/li>\n        <li><code>dayNight<\/code> - \u6bd4\u8cfd\u958b\u59cb\u6642\u9593\u70ba\u767d\u5929\u6216\u665a\u4e0a<\/li>\n        <li><code>scheduledInnings<\/code> - \u9810\u5b9a\u7403\u8cfd\u5c40\u6578<\/li>\n        <li><code>gamesInSeries<\/code> - \u5728\u76ee\u524d\u7cfb\u5217\u8cfd\u7684\u7b2c\u5e7e\u5834\u6bd4\u8cfd<\/li>\n        <li><code>seriesDescription<\/code> - \u7cfb\u5217\u8cfd\u985e\u578b (\u5305\u542b\u985e\u8eab\u8cfd\u3001\u4f8b\u884c\u8cfd\u7b49\u7b49)\uff0c\u9019\u6b04\u7684\u503c\u5176\u5be6\u5c31\u662f\u4e0a\u65b9gameType\u7684\u5168\u540d\u3002<\/li>\n        <li><code>homeId<\/code> - \u4e3b\u968a\u8b58\u5225\u78bc<\/li>\n        <li><code>homeName<\/code> - \u4e3b\u968a\u540d\u7a31<\/li>\n        <li><code>homeAbbrev<\/code> - \u4e3b\u968a\u540d\u7a31\u7e2e\u5beb<\/li>\n        <li><code>homeWins<\/code> - \u4e3b\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u52dd\u5834\u6578<\/li>\n        <li><code>homeLosses<\/code> - \u4e3b\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u6557\u5834\u6578<\/li>\n        <li><code>homeWinPct<\/code> - \u4e3b\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u52dd\u7387<\/li>\n        <li><code>homeWinner<\/code> - \u5e03\u6797\u503c\uff0c\u82e5\u4e3b\u968a\u5728\u9019\u5834\u6bd4\u8cfd\u4e2d\u7372\u52dd\u5247\u70batrue\u3002<\/li>\n        <li><code>homeScore<\/code> - \u4e3b\u968a\u5f97\u5206\u6578<\/li>\n        <li><code>awayId<\/code> - \u5ba2\u968a\u8b58\u5225\u78bc<\/li>\n        <li><code>awayName<\/code> - \u5ba2\u968a\u540d\u7a31<\/li>\n        <li><code>awayAbbrev<\/code> - \u5ba2\u968a\u540d\u7a31\u7e2e\u5beb<\/li>\n        <li><code>awayWins<\/code> - \u5ba2\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u52dd\u5834\u6578<\/li>\n        <li><code>awayLosses<\/code> - \u5ba2\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u6557\u5834\u6578<\/li>\n        <li><code>awayWinPct<\/code> - \u5ba2\u968a\u5728\u672c\u5b63\u5230\u76ee\u524d\u70ba\u6b62\u7684\u52dd\u7387<\/li>\n        <li><code>awayWinner <\/code> - \u5e03\u6797\u503c\uff0c\u82e5\u5ba2\u968a\u5728\u9019\u5834\u6bd4\u8cfd\u4e2d\u7372\u52dd\u5247\u70batrue\u3002<\/li>\n        <li><code>awayScore <\/code> - \u5ba2\u968a\u5f97\u5206\u6578<\/li>\n    <\/ul>\n<\/div>","f07429a9":"# **2. Train DataFrame Unpacking**\nNow, let's unpack `train.csv` to enable the further analysis.","9ecb0fb1":"## *3.4 Feature Extraction for `Standings`*\nIn this part, only certain features of interest are picked from `standings` table.\n### 3.4.1 Features related to `streakCode`\n* Number of streak win\n* Number of streak loss","735b5e4f":"# MLB Digital Engagement Forecasting \n### Introduction \nInspired by the amazing startup notebook [Getting Started with MLB Player Digital Engagement Forecasting](https:\/\/www.kaggle.com\/ryanholbrook\/getting-started-with-mlb-player-digital-engagement), I intend to reconstruct some cells and add some new ideas. Furthermore, there are some explanations written in Chinese **(blue blocks)**, making chinese native speakers easier to get the meanings of the specific features.\n\nHowever, I'm not very familiar with the terminologies used in baseball. If there's any mistake I make in this notebook, please feel free to correct me and discuss together!\n\n### Competition Goal \nForecast four measures of fan engagement (`target1`-`target4`) for the next day (i.e. for `date` d, you're going to predict the engagement for `day` d+1).\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <h3>\u6bd4\u8cfd\u76ee\u7684<\/h3>\n    <p>\u5229\u7528\u7403\u54e1\u3001\u6bd4\u8cfd\u8a18\u9304\u3001\u7372\u734e\u8a18\u9304\u7b49\u8cc7\u6599\u53ca\u53c3\u8cfd\u8005\u81ea\u884c\u63d0\u53d6\u4e4b\u7279\u5fb5\uff0c\u9810\u6e2c\u4e0b\u4e00\u500b\u6642\u9593\u9ede\u7684\u7c89\u7d72\u53c3\u8207\u5ea6 (target1 - target4)\uff0c\u6578\u503c\u4ecb\u65bc0~100\uff1b\u5176\u4e2d\uff0c\u6642\u9593\u5e8f\u5217\u8cc7\u6599\u4ee5\u5929\u70ba\u55ae\u4f4d\u3002<\/p>\n<\/div>\n\n### Data\n#### Static\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <h4>\u975c\u614b\u8cc7\u6599<\/h4>\n    <ul>\n        <li><code>players.csv<\/code> - MLB\u7403\u54e1\u8cc7\u6599<\/li>\n        <li><code>teams.csv<\/code> - MLB\u968a\u4f0d\u8cc7\u6599<\/li>\n        <li><code>seasons.csv<\/code> - \u5404\u8cfd\u5b63\u8d77\u8a16\u65e5\u8a18\u9304<\/li>\n        <li><code>awards.csv<\/code> - 2018\u524d\u7684\u7403\u54e1\u7372\u734e\u8a18\u9304<\/li>\n    <\/ul>\n<\/div>\n\n#### Time-dependent (Daily)\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <h4>\u6642\u9593\u5e8f\u5217\u8cc7\u6821<\/h4>\n    <ul>\n        <li><code>train.csv<\/code> - \u4ee5\u65e5\u70ba\u55ae\u4f4d\u7684\u6642\u9593\u5e8f\u5217\u8cc7\u6599 (\u8a73\u7d30\u8aaa\u660e\u8acb\u53c3\u8003\u5f8c\u7e8c\u5206\u6790)<\/li>\n    <\/ul>\n<\/div>","0b3642f1":"## *3.3 Feature Extraction for Game Stats at **Team Game** Level*\n<div class=\"alert alert-block alert-info\" style=\"font-size: 15px; font-family: DFKai-sb;\">\n    <p>\u7531\u65bc <code>teamBoxScores<\/code> \u4e2d\u7684features\u53ef\u4ee5\u8ddf\u4e0a\u9762 <code>playerBoxScores<\/code> \u4f5c\u5c0d\u7167\uff0c\u6545\u4e0d\u53e6\u5916\u4f5c\u7ffb\u8b6f\u3002\u5169\u8005\u7684\u5dee\u7570\u5728\u65bc\u7d71\u8a08\u6578\u64da\u7684\u5c64\u6b21\u4e0d\u540c\uff0c<code>playerBoxScores<\/code> \u662f\u4ee5\u55ae\u500b\u7403\u54e1\u7684\u8868\u73fe\u8a08\u7b97\uff0c<code>teamBoxScores<\/code> \u5247\u7d71\u8a08\u6574\u500b\u7403\u968a\u7684\u6bd4\u8cfd\u8868\u73fe\u3002<\/p>\n    <p>\u4ee5\u4e0b\u70ba <code>games<\/code> \u4e2d\u6240\u6709features\u7684\u4e2d\u6587\u89e3\u91cb\uff0c\u8acb\u9ede\u64ca\u4e0b\u65b9\u5c55\u958bcell<i class=\"fas fa-arrow-circle-down\"><\/i><\/p>\n<\/div>","1473ad36":"# **1. Basic Description of Data**\nLet's take a peek at the data files used in this competition! ","9518ec7e":"<div class=\"alert alert-blocks alert-info\" style=\"text-align: center\">\n    <h3>Work in Progress...<\/h3>\n    <h3>\u66f4\u591a\u4e2d\u6587\u7ffb\u8b6f\u53ca\u89e3\u91cb\u5373\u5c07\u91cb\u51fa~<i class=\"fas fa-baseball-ball\"><\/i>~<i class=\"fas fa-baseball-ball\"><\/i><\/h3>\n    <h3>Thanks for your attention!!<\/h3>\n<\/div>\n\n\n\n","0ee56e1a":"### 3.3.2 Features related to results of applying aggregate functions on `game stats`\nFirst, modification of column names is done on `team_game_stats` (`teamBoxScores`) table; then, we merge `team` table with `team_game_stats` table. The final extracted features are as follows:\n* Number of games per team per day\n* Number of winning games per team per day\n* Number of losing games per team per day\n* Total runs scored per team per day\n* Total runs allowd per team per day","cd6289da":"### 3.2.1 Features related to `game states`\n* Fractional representation of innings a pitcher pitches in a game \n    <div class=\"alert alert-block alert-info\" style=\"font-size:15px; font-family: DFKai-sb;\">\n        <ul>\n            <li><code>inningsPitched<\/code> - Game total innings pitched. &rArr; \u7e3d\u6295\u7403\u5c40\u6578<\/li>\n        <\/ul>\n    <\/div>\n* [Tom Tango pitching game score](https:\/\/www.mlb.com\/glossary\/advanced-stats\/game-score) \n* Whether it's a no-hitter game or not\n<div class=\"alert alert-block alert-info\" style=\"font-size:15px; font-family: DFKai-sb;\">\n    <ul>\n        <li><code>noHitter<\/code> - When a pitcher allows no hits during the entire course of a game, consisting of at least nine innings. &rArr; \u7121\u5b89\u6253\u6bd4\u8cfd <\/li>\n    <\/ul> \n<\/div>\n\n    * Because the feature is at **player game** level, no-hitter game discussed here is completed by **a single pitcher**.","9cce5ff8":"# **3. Data Merging**\nIn this part, we are going to dig deeper into each table unpacked above and try to understand the basic meaning of each feature. Also, there will be some **feature extracting processes** aiming at finding potentially useful features.\n\n## *3.1 Feature Extraction for Dates and Seasons*\n### 3.1.1 Features related to `dates`\n* Decompositions of the date (e.g. year and month)\n* Weekday of the date ","af060426":"### 3.3.1 Games table reconstruction\nTo convert the `games` table into the format of **one row per team-game**, the following processing is done:\n* Extract specific game types and ensure the validity of scores.\n* Recreate two games tables from different perspectives (**home team** and **away team**).\n* Concatenate two games tables into final one."}}