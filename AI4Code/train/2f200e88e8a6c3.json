{"cell_type":{"1a8ea83f":"code","68769cf9":"code","25cef69e":"code","0b35b35c":"code","35f1c593":"code","7dbef854":"code","1227c4d3":"code","661964a8":"code","646e19ff":"code","7b38c528":"code","dee5d060":"code","df5c858c":"code","4bcfe87a":"code","d966abc6":"code","5dff6243":"code","bf2e3aa3":"code","60b5c73e":"code","f8ca524a":"code","7fb59dbf":"code","0d899a38":"code","ef6b4cbb":"code","92323ee7":"code","bbb19157":"code","b7ae1f53":"code","b0c6e5e4":"code","36cd5d75":"code","2b32da3e":"code","95bd1ea9":"code","cf673842":"code","4bc937cb":"code","be0569de":"code","e015adb0":"code","de53989b":"code","54e0a69b":"code","1453f443":"code","ee900817":"code","9b9dad0d":"code","642591ec":"code","884ada2a":"code","9c7810df":"code","7487d696":"code","217c71ca":"code","43c925e5":"code","12ff626b":"code","3cdb89d6":"code","e08a6cc4":"code","845e4ace":"code","ec49e5a8":"code","33061010":"code","c75326b6":"code","f26cfea0":"code","784772d1":"code","a6fe92d6":"code","747658bd":"code","2dea2510":"code","014e9043":"code","47645b9c":"code","6ba6e05f":"code","032ea002":"code","0c5338ab":"code","9cc8f030":"code","8ebcbce2":"code","3c4b3d70":"code","c04a318e":"code","03648a94":"code","da412950":"code","9302b713":"code","8c21cd7b":"code","ee07d696":"code","3bb955ae":"code","65f9dd8e":"code","d46dca6c":"code","30b2f872":"markdown"},"source":{"1a8ea83f":"# 1. abs() - This function returns the absolute value of a number.\n# syntax = abs(number)\ninp = input(\"Please enter a number: \")\ny = abs(int(inp))\nprint(\"The absolute value of\", inp, \"is\", y)","68769cf9":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 1\nL1 = [0,1,1]\nx= all(L1) # Here the given list has 0 which is false. Since there is one false, output is false.\nprint(x)","25cef69e":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 2\ntup1 = (1,1,1)\nx=all(tup1) # Here for the given tuple has all 1's which are true. Hence output is True.\nprint(x)","0b35b35c":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 3\nset1 = {True,False,True}\nx= all(set1) # Here for the given set, one element is false. Hence output is false\nprint(x)","35f1c593":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 4\ndict1 = {0:\"Apple\",1:\"Orange\"}\nx=all(dict1) # Here in the given dictionary, the first key is 0 which is false. Hence the output is false.\nprint(x)","7dbef854":"#3. any() - This function returns true if any item in an iterable object is true\n# syntax = any(iterable)\nL1 = [0,0,1]\nx = any(L1)\nprint(x)","1227c4d3":"#4. ascii() - This function returns a readable version of any object (Lists, Tuples,strings etc.). All non ascii characters will be replaced by \\xe5.\n# You can refer the list of non-ascii characters from the link https:\/\/terpconnect.umd.edu\/~zben\/Web\/CharSet\/htmlchars.html\n# syntax = ascii(object)\nx = \"My n\u00e5me is R\u00e5vitej\u00e5\" # Here \u00e5 is the non ascii character.\ny = ascii(x)\nprint(y)","661964a8":"#5. bin() - This function returns the binary version of a number. The output has always prefix of \"0b\".\n# syntax = bin(number)\nx = bin(24) \nprint(x)","646e19ff":"#6. bool() - This function returns the boolean value of the specified object. \n# This function returns false for objects like [],{},(), False, 0, None. For other values the function returns true.\n# syntax = bool(object)\nx = bool(\"Ravi\")\nprint(x)","7b38c528":"#7. bytearray() - This function returns an array of bytes.\n# The output always has prefix of b. Output will be in an array.\n# syntax = bytearray(x,encoding,error). If x is an integer,an empty bytearray object of specified size will be created. If it is a string, we need to specify the encoding of source.\nx = bytearray(5)\nprint(x)","dee5d060":"#8. bytes() - This function returns a bytes object.\n# The output always has prefix of b.\n# syntax = bytes(x,encoding,error). If x is an integer,an empty bytearray object of specified size will be created. If it is a string, we need to specify the encoding of source.\nx = bytes(4)\nprint(x)","df5c858c":"#9. callable() - This function returns True if it is callable else false.\n# syntax = callable(object)\n# Example 1\ndef x():\n    i = 5\nprint(callable(x))","4bcfe87a":"#9. callable() - This function returns True if it is callable else false.\n# syntax = callable(object)\n# Example 2\ni = 5\nprint(callable(i))","d966abc6":"#10. chr() - This function returs a character from the specified unicode code.\n# Unicode characters table can be referred from the link https:\/\/www.rapidtables.com\/code\/text\/unicode-characters.html\n# syntax = chr(number)\nx = chr(98)\nprint(x)","5dff6243":"#11. classmethod() - This function converts a method into class method.\n# syntax = classmethod(function)\nclass Person:\n    age = 25\n    def printAge(cls):\n        print('The age is:', cls.age)\n\n# create printAge class method\nPerson.printAge = classmethod(Person.printAge)\nPerson.printAge()","bf2e3aa3":"#12. compile() - This function returns the specified source as an object and ready to be executed.\n# Its format is compile(source,filename, mode, flag, dont_inherit, optimize). Flag, dont_inherit and optimize are optional.\n# Legal values of mode are : eval - if the source is single expression ; exec - if the source is a block of statements; single - if the source is a single interactive statement.\n# syntax = compile(source,filename,mode)\n# Example 1\nx = compile(\"print(5)\", \"test\",\"eval\")\nexec(x)","60b5c73e":"#12. compile() - This function returns the specified source as an object and ready to be executed.\n# Its format is compile(source,filename, mode, flag, dont_inherit, optimize). Flag, dont_inherit and optimize are optional.\n# Legal values of mode are : eval - if the source is single expression ; exec - if the source is a block of statements; single - if the source is a single interactive statement.\n# syntax = compile(source,filename,mode)\n# Example 2\nx = compile(\"print(5)\\nprint(9)\",\"test\",\"exec\")\nexec(x)","f8ca524a":"#13. complex() - This functions returns a complex number\n# Here j is the imaginary part indicator.\n# syntax = comple(real,imaginary)\nx = complex(2,4)\nprint(x)","7fb59dbf":"#14. delattr() - This function deletes the specified attribute (property or method) from the specified object.\n# syntax = delattr(object,attribute)\nclass Person: # Creating a class\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\ndelattr(Person,\"age\") # Removing age attribute from the class Person.\nprint(Person.age) # Since age attribute is removed, hence we print it, it will show error.","0d899a38":"#15. dict() - This function returns a dictionary (Array)\n# dict() function creates a dictionary.\n# syntax = dict(Key word arguments)\nx = dict(Name = \"Ravi\", Age = 25, Country = \"India\")\nprint(x)","ef6b4cbb":"#16. dir() - This function returns a list of specified object's properties and methods without the values.\n# syntax = dir(object)\nclass Person:\n  name = \"Ravi\"\n  age = 25\n  country = \"India\"\nprint(dir(Person))","92323ee7":"#17. divmod() - This function returns the quotient and remainder when argument 1 is divided by argument 2.\n# syntax = divmod(dividend,divisor)\na = input(\"Please enter the first number: \")\nb = input(\"Please enter the second number: \")\ndivmod(int(a),int(b))","bbb19157":"#18. enumerate() - This function converts the tuple into enumerate object i.e. complete ordered listing of all the items in the collection.\n# Here numbering starts from 0.\n# syntax = enumerate(iterable,start)\nx = (\"Ravi\",\"teja\",\"Raviteja\")\ny = enumerate(x)\nprint(list(y))","b7ae1f53":"#19. eval() - This function evaluates the specified expression and if it is a legal python statement, it will be executed.\n# The initial parameter must be a string.\n# syntax = eval(expression)\nx = \"print(55)\"\neval(x)","b0c6e5e4":"#20. exec() - This function executes a specified python code.\n# syntax = exec(object)\nname = \"Ravi\"\nprint(name)\nexec(name)","36cd5d75":"#21. filter() - This function is used to filter items in an iterable object.\n# syntax = filter(function, array)\nage = [12,14,32,18,6,45]\ndef adult(x): # Defining a function named adult which gives true if age is greater than or equal to 18 and false if age is less than 18.\n    if x < 18:\n        return False\n    else:\n        return True\nadults = filter(adult,age)\nfor x in adults: # This will print the age which is greater than or equal to 18.\n    print(x)","2b32da3e":"#22. float() - This function converts the value into floating point number.\n# syntax = float(value)\ninp = input(\"Please enter the number: \")\nx = float(inp) # The input will be stored in form of string. This function will convert it from string to float.\nprint(x)","95bd1ea9":"#23 format() - This function converts the given value into a specified format.\n# syntax = format(value,format)\nx = format(0.15,\"%\") # Converting the number into % format.\nprint(x)","cf673842":"#24. frozenset() - This function returns an unchangeable frozen set.\n# syntax = frozenset(iterable object)\n# If we try to change the value of frozenset item, it will show error.\nx = [\"Ravi\", \"teja\", \"Krishna\"]\ny = frozenset(x)\nprint(y)","4bc937cb":"#25. getattr() - This function returns the value of specified attribute.\n# syntax = getattr(object,attribute)\nclass Student:\n    Name = \"Ravi\"\n    Age = 25\n    Country = \"India\"\nx = getattr(Student,\"Age\") # Returns the value of attribute age.\nprint(x)\n","be0569de":"#26. globals() - This function returns the global symbol table as a dictionary.\n#syntax = globals()\nx = globals()\nprint(x)","e015adb0":"#27. hasattr() - This function returns true if the specified object has specified attribute.\n# syntax = hasattr(object,attribute)\nclass Student:\n    Name = \"Ravi\"\n    Age = 25\n    Country = \"India\"\nx = hasattr(Student,\"Age\") # Since age attribute is present in the object Student. Hence this returns true.\nprint(x)","de53989b":"#28. hash() - This function returns the hash value of the specified object.\n# syntax = hash(object)\nx = hash(\"Ravi\")\nprint(x)","54e0a69b":"#29. help() - This function is used to display the documentation of modules, functions, classes, keywords etc.\n# syntax = help(object)\nx = help(print)\nprint(x)","1453f443":"#30. hex() - This function converts a value into hexadecimal value\n# syntax = hex(number)\nx = hex(27)\nprint(x)","ee900817":"#31. id() - This function returns the unique id of the object. Id will be different for the same program executing multiple times.\n# syntax = id(object)\nx = [20,22,46]\ny = id(x)\nprint(y)","9b9dad0d":"#32. input() - This function allows user input.\n# syntax = input(prompt)\ninp = input(\"Please enter your name: \")\nprint(\"Hello,\", inp)","642591ec":"#33. int() - This function converts the given number into integer. The input is always stored as string.\n# syntax = int(object)\ninp = input(\"Please enter the number: \")\nx = int(inp)\nprint(x)","884ada2a":"#34. isinstance() - This function returns true if the specified object is of specified type.\n# syntax = isinstance(object,type)\nx = isinstance(\"Ravi\", str) # Ravi is a string. Hence the output is true.\nprint(x)","9c7810df":"#35. issubclass() - This function returns true if the specified object is the subclass of the specified object.\n# syntax = issubclass(object,subclass)\nclass MyAge:\n    age = 25\nclass Student(MyAge): #MyAge is the subclass of Student. Hence output is True.\n    name = \"Ravi\"\n    age = MyAge\nx = issubclass(Student,MyAge)\nprint(x)\n    ","7487d696":"#36. iter() - This function returns an iterator object.\n# syntax = iter(object)\nx = iter([\"Mango\",\"Banana\",\"Apple\"])\nprint(next(x)) # This will print first item in the list\nprint(next(x)) # This will print second item in the list\nprint(next(x)) # This will print third item in the list","217c71ca":"#37. len() - This function returns the length of the object.\n# syntax = len(object)\nL1 = [2,4,55,31,9]\nlen(L1)","43c925e5":"#38. list() - This function creates a list object.\n# syntax = list(iterable)\nx = (\"Ravi\",\"Teja\",\"Raviteja\")\ny = list(x)\nprint(y)","12ff626b":"#39. locals() - This function returns the local symbol table as dictionary.\n# syntax = locals()\nx = locals()\nprint(x)","3cdb89d6":"#40. map() - This function executes a specified function for each item in an iterable.\n#syntax = map(function,iterables)\ndef length(n):\n    return len(n)\ny = map(length,(\"Apple\",\"banana\",\"orange\")) # \nprint(list(y))","e08a6cc4":"#41. max() - This function returns the largest item in an iterable.\n# syntax = max(x1,x2,x3,...)\nx = max(45,48)\nprint(x)","845e4ace":"#42. memoryview() - This function returns memory view object from a specified object.\n#syntax = memoryview(object)\nx = memoryview(b\"Hello\")\nprint(x)\nprint(x[0]) #return the Unicode of the first character\nprint(x[1])#return the Unicode of the second character","ec49e5a8":"#43. min() - This function returns the smallest item in an iterable.\n# syntax = min(n1,n2,n3,...)\nx = min(10,20)\nprint(x)","33061010":"#44. next() - This function returns the next item in an iterable.\n# syntax = next(iterable)\nL1 = iter([\"Mango\",\"Apple\",\"Banana\"]) #Creating iterable\nx = next(L1)\nprint(x)\nx = next(L1)\nprint(x)\nx = next(L1)\nprint(x)","c75326b6":"#45. object() - This function returns a new empty object.\n# syntax = object()\nx = object()","f26cfea0":"#46. oct() - This function converts a number into an octal value\n# syntax = oct(int)\nx = 12\ny = oct(x)\nprint(y)","784772d1":"#47. open() - This function opens a file and returns it as a file object.\n# syntax(file,mode)\n# In mode r = read ; a = append; w = write; x = create\nf = open(\"demofile.txt\", \"r\")\nprint(f.read()) # This will open the demofile.txt and it will read.","a6fe92d6":"#48. ord() - This function returns the number representing the unicode of a specified character.\n# syntax = ord(character)\nx = ord(\"h\")\nprint(x)","747658bd":"#49. pow() - This function returns the value of x to the power of y (x^y)\n#syntax = pow(x,y)\nx = pow(2,3)\nprint(x)","2dea2510":"#50. print() - This function prints the message to the screen.\n# syntax = print(objects)\nprint(\"Hello World\")","014e9043":"#51. property() - This function creates property of a class.\n# syntax = property(class1,class2)\nclass Person:\n    def init(self, name):\n        self._name = name\n\n    def get_name(self):\n        print('Getting name')\n        return self._name\n\n    def set_name(self, value):\n        print('Setting name to ' + value)\n        self._name = value\n\n    def del_name(self):\n        print('Deleting name')\n        del self._name\n\n    # Set property to use get_name, set_name\n    # and del_name methods\n    name = property(get_name, set_name, del_name, 'Name property')\n\np = Person('Adam')\nprint(p.name)\np.name = 'John'\ndel p.name","47645b9c":"#52. range() - This function returns sequence of numbers starting with 0 and increments by 1 and stops before a specified number.\n# syntax = range(stop)\n# Bydefault it starts with 0 and ends with (stop value-1).\nx = range(8)\nfor y in x:\n    print(y,end=\" \")","6ba6e05f":"#53. repr() - This function returns a printable representation of the given object.\n# syntax = repr(object)\nx = \"Ravi\"\ny = repr(x)\nprint(y)","032ea002":"#54. reversed() - This function returns a reversed iterator object.\n# syntax = reversed(object)\nx = [\"Apple\",\"Mango\",\"Banana\"]\ny = reversed(x)\nfor z in y:\n    print(z,end=\" \")","0c5338ab":"#55. round() - This function returns a floating point number which is rounded to the specific number of decimals.\n# syntax = round(number,digits)\nx = 4.28567\ny = round(x,2) # Here x is rounded to 2 decimals. \nprint(y)","9cc8f030":"#56. set() - This function creates a set object.\n# syntax = set(iterable)\nx = set((\"Apple\",\"Banana\",\"Orange\"))\nprint(x)","8ebcbce2":"#57. setattr() - This function sets the value of specified attribute of the specified object.\n# syntax = setattr(object,attribute,value)\nclass Student:\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\nsetattr(Student,\"age\",35) # This will set the age from 25 to 35.\nx = getattr(Student,\"age\") # This will return the set value.\nprint(x)","3c4b3d70":"#58. slice() - This function is used to specify how to slice a sequence. We can specify start,end of the slice.\n#syntax = slice(start,end,step)\n# Start and step are optional. By default start is 0 and step is 1.\nx = (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")\ny = slice(2,5,1)\nprint(x[y])","c04a318e":"#59. sorted() - This function returns a sorted list of specified iterable object.\n# syntax = sorted(iterable)\nx = (5,3,6,8,4,2)\ny = sorted(x)\nprint(y)","03648a94":"#60. staticmethod() - This function returns a static method for teh function.\n# syntax = staticmethod(function)\nclass Mathematics:\n    def addNumbers(x, y):\n        return x + y\n\n# create addNumbers static method\nMathematics.addNumbers = staticmethod(Mathematics.addNumbers)\n\nprint('The sum is:', Mathematics.addNumbers(5, 10))","da412950":"#61. str() - This function converts a specified value to string.\n# syntax = str(object)\nx = str(5) # Converted type from int to str.\nprint(x)\ntype(x)","9302b713":"#62. sum() - This function returns the sum of all items in an iterable.\n# syntax = sum(iterable)\nx = (1,2,3,4,5)\ny = sum(x)\nprint(y)","8c21cd7b":"#63. super() - This function returns an object that will reflect the parent class.\n# syntax = super()\nclass Parent:\n  def __init__(self, txt):\n    self.message = txt\n\n  def printmessage(self):\n    print(self.message)\n\nclass Child(Parent):\n  def __init__(self, txt):\n    super().__init__(txt)\n\nx = Child(\"Hello, and welcome!\")\n\nx.printmessage()","ee07d696":"#64. tuple() - This function creates a tuple object.\n# syntax = tuple(iterable)\nx = (\"Apple\",\"Banana\",\"Orange\")\ny = tuple(x)\nprint(y)","3bb955ae":"#65. type() - This function will return the type of specified object.\n# syntax = type(object)\nx = \"ravi\"\ntype(x)","65f9dd8e":"#66. vars() - This function returns the dict attribute of the object.\n# syntax = vars(object)\nclass Student:\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\nx = vars(Student)\nprint(x)","d46dca6c":"#67. zip() - This function returns a zip object which is an iterator of tuples. \n# If the passed iterators have different lengths, the iterator with least items decide the length of new iterator.\n# syntax = zip(iterator 1, iterator 2, iterator 3,...)\na = (\"Ravi\", \"sagar\", \"rama\")\nb = (\"Teja\", \"sachin\", \"Krishna\", \"Venky\")\nx = zip(a,b)\nprint(tuple(x)) # In output, Venky is neglected since a has length 3 and b has length 4.","30b2f872":"**Notebook - 1 : Built In functions of Python for beginners**\nThis notebook consists of Built in functions in Python along with syntax and example which is very useful to beginners. "}}