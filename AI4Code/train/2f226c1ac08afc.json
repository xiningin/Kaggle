{"cell_type":{"a6257159":"code","4fdcdbe4":"code","0a618cb9":"code","62c8c066":"code","1c5087a0":"code","4fdb6008":"code","0a6fb66c":"code","31b26356":"code","e9fcc483":"code","f2f0778d":"code","dbb8218c":"code","97f5ea89":"code","173b69f2":"code","7778eb01":"code","39f9ff26":"code","f97698d3":"code","709578d2":"code","d6745b75":"code","48377813":"code","4832ece9":"code","d4147343":"markdown","5b9def4f":"markdown","8506a49e":"markdown","57a762b8":"markdown","4994f1b0":"markdown","a2e6f274":"markdown","e8b09e26":"markdown","76510fed":"markdown","1a2228fc":"markdown","a0445512":"markdown"},"source":{"a6257159":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fdcdbe4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","0a618cb9":"df=pd.read_csv(\"\/kaggle\/input\/social-network-ads\/Social_Network_Ads.csv\")\ndf.head()","62c8c066":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","1c5087a0":"print(X)","4fdb6008":"print(y)","0a6fb66c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","31b26356":"print(X_train)","e9fcc483":"print(y_train)","f2f0778d":"print(X_test)","dbb8218c":"print(y_test)","97f5ea89":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","173b69f2":"print(X_train)","7778eb01":"print(X_test)","39f9ff26":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","f97698d3":"print(classifier.predict(sc.transform([[30,87000]])))","709578d2":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","d6745b75":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","48377813":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","4832ece9":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","d4147343":"**TRAINING THE LOGISTIC REGRESSION MODEL ON THE DATASET**","5b9def4f":"**PERFORMING FEATURE SCALING**","8506a49e":"**CONFUSION MATRIX**","57a762b8":"**SPLITTING DATASET INTO TRAIN AND TEST SET**","4994f1b0":"**PREDICTING A NEW RESULT**","a2e6f274":"**IMPORTING LIBRARIES**","e8b09e26":"**IMPORTING DATASETS**","76510fed":"**VISUALISING THE TRAINING SET RESULTS**","1a2228fc":"**PREDICTING TEST SET RESULTS**","a0445512":"**VISUALISING TEST SET RESULTS**"}}