{"cell_type":{"1124481a":"code","87a2bc6f":"code","4356e7da":"code","31d5dc10":"code","11f6a222":"code","80499e36":"code","3394e63a":"code","5d301d1e":"code","8617c48b":"code","ba20ea06":"code","7abbbdd9":"code","95458d6a":"code","7f3b96cb":"code","2293fee8":"code","fda1f8ba":"code","83f3eab7":"code","45cc8988":"code","0493efd6":"code","e90d632a":"code","aa888435":"code","64ae8bbe":"code","4b7e1aa8":"code","4a0621ed":"code","4153212d":"markdown","0c1e35a5":"markdown","f3f68366":"markdown","677fd302":"markdown","70662349":"markdown","3e0161e1":"markdown","19b0cf06":"markdown","0de3ea45":"markdown","296293e9":"markdown","8e6c0e29":"markdown","386b0d21":"markdown","586d0600":"markdown","54dcb31e":"markdown","f8b38657":"markdown","50d00d4c":"markdown","3a8feeec":"markdown","cf7b68f9":"markdown","53b19f52":"markdown","1f436be6":"markdown","4421f33e":"markdown","0c4028eb":"markdown"},"source":{"1124481a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87a2bc6f":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","4356e7da":"data.head()","31d5dc10":"data.shape","11f6a222":"data.type.unique()","80499e36":"type(data.iloc[7,6])","3394e63a":"data['year_added'] = data['date_added'].str[-4:]\ndata.head()","5d301d1e":"data['year_added'] = pd.to_numeric(data['year_added'])","8617c48b":"data.head()","ba20ea06":"type(data.iloc[15,12])","7abbbdd9":"data['year_added'] = data['year_added'].astype(int)","95458d6a":"data['year_added'].isnull().values.sum()","7f3b96cb":"data.dropna(subset=['year_added'])","2293fee8":"data['year_added'].isnull().sum()","fda1f8ba":"data['year_added'] = data['year_added'].astype(int)","83f3eab7":"data.head()","45cc8988":"type(data.iloc[15,12])","0493efd6":"Movie_Filter = data['type']=='Movie'\nMovie_Data = data[Movie_Filter]\nMovie_Data.head()","e90d632a":"Movie_Data.type.unique()","aa888435":"Show_Filter = data['type']==\"TV Show\"\nShow_Data = data[Show_Filter]","64ae8bbe":"Show_Data.head()","4b7e1aa8":"Show_Data.type.unique()","4a0621ed":"plt.figure(figsize=(10,4))\nplt.hist(Movie_Data['year_added'],bins=25, alpha=.5, label=\"Movies\")\nplt.hist(Show_Data['year_added'],bins=25,  alpha=.5, label=\"Shows\")\n\nplt.xlabel(\"Data\", size=14)\nplt.ylabel(\"Count\", size=14)\nplt.title(\"Distributions of Year Added - Movies vs. Shows (overlapped)\", size=20)\nplt.legend(loc='upper left')\n\n#hist = Movie_Data['year_added'].hist(label='my label')\n#hist2 = Show_Data['year_added'].hist(label='my label')","4153212d":"Yup, that's a string, and I only want the year, not the whole date.\nFirst, let me extract the year out of that column.","0c1e35a5":"Looks like that worked....","f3f68366":"Thanks for reading my first notebook! Let me know what you think, or and constructive feedback you may have.","677fd302":"Let's see how that worked.","70662349":"Let's see what the data looks like...","3e0161e1":"# Hello! Welcome to my first Kaggle Notebook. \n\nI thought I'd do a simple analysis to help visualize some data regarding Netflix shows and movies.","19b0cf06":"Double checking...","0de3ea45":"Now for the fun stuff! I want to divide this into two data frames - Movies, and TV Shows.\nWe'll make filters for that.","296293e9":"So I was right - there's only two unique values in that column, \"TV Show,\" and \"Movie.\"\n\nIt would be interesting to see when Netflix had its heaviest hand in adding new media, and to see if there was a difference in movies and shows. \n\nWhat I'm noticing, though, is that the \"Date Added Column\" is a string. Lets confirm that.","8e6c0e29":"And how much of it there is...","386b0d21":"Ok, now we should be able to turn that column into integers:","586d0600":"It looks like the heavier years of adding media were 2019 and 2020 for both movies and shows. Movies peaked in 2019, and tv shows peaked in 2020.\nThe volume of movies added is substantially larger than of tv shows added - Netflix seems to favor movies.","54dcb31e":"Error?\nAh... there must be nulls. Should have checked that first!","f8b38657":"I want to divide the data up based on the type of media. I think the \"type\" column is probably just two types: shows and movies. But I want to make sure, in case they have different designations for things like \"docuseries,\" for example.","50d00d4c":"Perfect! Let's do the same thing for TV Shows","3a8feeec":"Let's get rid of the nulls in our \"year_added\" column.","cf7b68f9":"Double checking our work again...","53b19f52":"Now let's put together a stacked histogram by the \"Year Added\" colum we so carefully created.\nI'm going to make this an \"overlapping\" histogram instead of a stacked one, so we can compare movies to shows.","1f436be6":"Let's just make sure that worked properly by looking up the unique values in the \"type\" column.","4421f33e":"I'd prefer if it were an integer. So let's make that quick fix.","0c4028eb":"But that doesn't solve the issue of it being a string. We'll have to do some more conversion there."}}