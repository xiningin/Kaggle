{"cell_type":{"331cee76":"code","0c5a34da":"code","00296d3d":"code","df1c2828":"code","18379b55":"code","b5d74522":"code","1d101a7c":"code","1503bc80":"code","8979144b":"code","318d8187":"code","0ace3b2e":"code","118dc521":"code","cef03995":"code","5473c5af":"code","df83575a":"code","792a3da9":"code","a5c37944":"code","ee5ba9de":"code","269750fd":"code","54bc1441":"code","0d714e9c":"code","a22049b8":"code","3dd11f0d":"code","8e4c2afc":"code","df434a96":"code","3f5be239":"code","e5a7f6c3":"code","c7a3aeca":"code","6c8d55b9":"code","e203b190":"code","d72161fb":"code","1e952105":"code","4bf4ec9a":"code","7b1b8dfa":"code","e686fd62":"code","1e8f0efa":"code","792daba6":"markdown","61f20ec0":"markdown","b25a18e9":"markdown","0221bb43":"markdown","d36ee80e":"markdown","99c4543c":"markdown","0b5d9216":"markdown","820ee5c0":"markdown","a09b69a8":"markdown","aaed98bc":"markdown","e8fcaa23":"markdown","b8ff2c19":"markdown","d68571ac":"markdown","07851ff7":"markdown","0aa2f29a":"markdown","798322c7":"markdown","7d9276b6":"markdown"},"source":{"331cee76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0c5a34da":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/yenilenebilirenerjikaynaklarituketimi.csv\")\nyenilenebilirenerjituketimi_metadata = pd.read_csv(\"..\/input\/yenilenebilirenerjituketimi_metadata.csv\")","00296d3d":"data.head()","df1c2828":"# Satir Sayisi\nprint(\"Sat\u0131r Say\u0131s\u0131:\\n\",data.shape[0:])\n\n# Sutun Adlari\nprint(\"S\u00fctun Adlari:\\n\",data.columns.tolist())\n\n# Veri Tipleri\nprint(\"Veri Tipleri:\\n\",data.dtypes)\n","18379b55":"# Eksik veri say\u0131lar\u0131 ve veri setindeki oranlar\u0131 \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(8,8))\nsns.heatmap(pd.isnull(data.T), cbar=False)\n\npd.concat([data.isnull().sum(), 100 * data.isnull().sum()\/len(data)], \n              axis=1).rename(columns={0:'Missing Records', 1:'Percentage (%)'})","b5d74522":"# 1998 y\u0131l\u0131 haricindekiler kategorik de\u011fi\u015fkenden s\u00fcrekli de\u011fi\u015fkene d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc.\ndt=['YRbir','YRiki','YRuc','YRdort','YRbes','YRalti','YRyedi','YRdokuz','YRon','YRonbir','YRoniki','YRonuc','YRondort','YRonbes','YRonalti','YRonyedi','YRonsekiz','YRondokuz','YRyirmi','YRyirmibir','YRyirmiiki','YRyirmiuc','YRyirmidort', 'YRyirmibes','YRyirmialti' ]\nfor i in  dt:\n  data[i] = pd.to_numeric(data[i], errors = 'coerce')\ndata.info()","1d101a7c":"data['YRbir']","1503bc80":"data_a=data.copy()\ny = (data_a['Country Name'] == 'Turkey').astype(int)\nfields = list(data_a.columns[:-1])  # everything except \"country name\"\ncorrelations = data_a[fields].corrwith(y)\ncorrelations.sort_values(inplace=True)\ncorrelations\n","8979144b":"ax = correlations.plot(kind='bar')\nax.set(ylim=[-1, 1], ylabel='turkey correlation');","318d8187":"# S\u00fcrekli de\u011fi\u015fken s\u00fctunlar\u0131ndaki bo\u015f alanlar ortalama de\u011ferler ile dolduruldu.\ncols = ['YRbir','YRiki','YRuc','YRdort','YRbes','YRalti','YRyedi' ,'YRdokuz','YRon','YRonbir','YRoniki','YRonuc','YRondort','YRonbes','YRonalti','YRonyedi','YRonsekiz','YRondokuz','YRyirmi','YRyirmibir','YRyirmiiki','YRyirmiuc','YRyirmidort', 'YRyirmibes','YRyirmialti']\nfor i in cols:\n   data[i].fillna(data[i].mean(),inplace=True)","0ace3b2e":"#Yaln\u0131zca kategorik de\u011fi\u015fkenlerde ve YRsekizde bo\u015f alanlar kalm\u0131\u015ft\u0131r. \nfor i in data:\n  df=data[i].isnull().values.sum()\n  print(df)","118dc521":"# Se\u00e7ilmi\u015f olan y\u0131llarla yeni bir dataframe olu\u015fturuldu.\ndf1=pd.Series(data['Country Name'],name=\"CountryName\")\ndf2=pd.Series(data['YRbir'],name=\"YRbir\")\ndf3=pd.Series(data['YRalti'],name=\"YRalti\")\ndf4=pd.Series(data['YRonbir'],name=\"YRonbir\")\ndf5=pd.Series(data['YRonalti'],name=\"YRonalti\")\ndf6=pd.Series(data['YRyirmibir'],name=\"YRyirmibir\")\ndf7=pd.Series(data['YRyirmialti'],name=\"YRyirmialti\")\ndf=pd.concat([df1, df2,df3, df4,df5, df6,df7], axis=1)","cef03995":"df.describe().T","5473c5af":"# Ayk\u0131r\u0131 de\u011ferleri g\u00f6zlemleyebilmek i\u00e7in box plot kullan\u0131ld\u0131\nplt.figure()\ndf.boxplot(column=['YRbir','YRalti','YRonbir','YRonalti','YRyirmibir','YRyirmialti'])\n\nfig,axs=plt.subplots(2,3) \naxs[0, 0].boxplot(df['YRbir'])\naxs[0, 0].set_title('YRbir')\n\naxs[0, 1].boxplot(df['YRalti'])\naxs[0, 1].set_title('YRalti')\n\naxs[0, 2].boxplot(df['YRonbir'])\naxs[0, 2].set_title('YRonbir')\n\naxs[1, 0].boxplot(df['YRonalti'])\naxs[1, 0].set_title('YRonalti')\n\naxs[1, 1].boxplot(df['YRyirmibir'])\naxs[1, 1].set_title('YRyirmibir')\n\naxs[1, 2].boxplot(df['YRyirmialti'])\naxs[1, 2].set_title('YRyirmialti')","df83575a":"# Histogram grafi\u011fi\nfrom matplotlib import pyplot\ndf.hist()\npyplot.show()","792a3da9":"# Scatter Plot Matrix\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(df)\npyplot.show()\n","a5c37944":"import numpy as np\nfrom sklearn    import metrics, svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import  linear_model\narray = df.values\nX = array[:,1:6]\ny = array[:,6]\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.25, random_state=1, shuffle=True)\nprint(\"Dataframe boyutu: \",df.shape)\nprint(\"E\u011fitim verisi boyutu: \",X_train.shape, Y_train.shape)\nprint(\"Test verisi boyutu: \",X_validation.shape, Y_validation.shape)\n","ee5ba9de":"# type error i\u00e7in target types\u0131 \"Label Encoder\" ile  multiclassa \u00e7evirdim.(Target=Y_train)\nfrom sklearn import preprocessing\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\nencoded = lab_enc.fit_transform(y)\nprint(utils.multiclass.type_of_target(y))\nprint(utils.multiclass.type_of_target(Y_train.astype('int')))\nprint(utils.multiclass.type_of_target(encoded))\n\nlab_enc = preprocessing.LabelEncoder()\nY_train = lab_enc.fit_transform(Y_train)\nprint(utils.multiclass.type_of_target(Y_train))","269750fd":"# Modeller\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n# modellerin s\u0131ras\u0131yla de\u011ferlendirilmeleri\nresults = []\nnames = []\nfor name, model in models:\n\tkfold = StratifiedKFold(n_splits=10, random_state=1)\n\tcv_results = cross_val_score(model, X, encoded, cv=kfold, scoring='accuracy')\n\tresults.append(cv_results)\n\tnames.append(name)\n\tprint('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))\n# Algoritmalr\u0131n boxplot \u00fczerinde kar\u015f\u0131la\u015ft\u0131r\u0131l\u0131p ayk\u0131r\u0131 de\u011fer tespiti yap\u0131lmas\u0131\npyplot.boxplot(results, labels=names)\npyplot.title('Algorithm Comparison')\npyplot.show()","54bc1441":"# Her bir modelin do\u011fruluk de\u011feri ,s\u0131n\u0131fland\u0131rma raporu , kar\u0131\u015f\u0131kl\u0131k matrisi ve MSE(Ortalama Kare Hata Regresyon Oran\u0131) de\u011ferlerini hesaplamak i\u00e7in import edildi.\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error","0d714e9c":"# Lineer Regresyon\nprint(\"\\nLineer Regresyon\")\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X_train, Y_train)\ny_true1 , y_pred1 =Y_validation,lm.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred1)\nplt.scatter(y_true1, y_pred1,c='orange')\nplt.scatter(y_true1, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","a22049b8":"#Lineer Regresyon\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v = lab_enc.fit_transform(y_true1)\nutils.multiclass.type_of_target(y_true1.astype('int'))\nypred1= lab_enc.fit_transform(y_pred1)\nutils.multiclass.type_of_target(ypred1.astype('int'))\nconf=confusion_matrix(encoded_v, ypred1)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n#Lineer Regresyon\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v, ypred1))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v, ypred1))\nprint(\"MSE:\",mean_squared_error(encoded_v, ypred1))","3dd11f0d":"# SVR(Support Vector Regressions)\nprint(\"SVR(Support Vector Regressions)\")\nclf = svm.SVR(gamma=\"auto\")\n# modelimizi e\u011fitim verilerimiz ve buna kar\u015f\u0131l\u0131k gelen Y_train(target ) de\u011ferleri ile e\u011fittik\nclf.fit(X_train, Y_train)\n# test de\u011ferlerimize kar\u015f\u0131l\u0131k gelecek olan tahmin de\u011ferlerimizi olu\u015fturduk\ny_true2 , y_pred2 =Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred2)\nplt.scatter(y_true2, y_pred2,c='black')\nplt.scatter(y_true2, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")\n","8e4c2afc":"#SVR\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v1 = lab_enc.fit_transform(y_true2)\nutils.multiclass.type_of_target(y_true2.astype('int'))\nypred2= lab_enc.fit_transform(y_pred2)\nutils.multiclass.type_of_target(ypred2.astype('int'))\nconf=confusion_matrix(encoded_v1, ypred2)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v1, ypred2))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v1, ypred2))\nprint(\"MSE:\",mean_squared_error(encoded_v1, ypred2))","df434a96":"# SVC\nprint(\"SVC\")\nclf = SVC(gamma=\"auto\")\nclf.fit(X_train, Y_train)\ny_true3 , y_pred3 =Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred3)\nplt.scatter(y_true3, y_pred3,c='yellow')\nplt.scatter(y_true3, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","3f5be239":"#SVC\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v2 = lab_enc.fit_transform(y_true3)\nutils.multiclass.type_of_target(y_true3.astype('int'))\nypred3= lab_enc.fit_transform(y_pred3)\nutils.multiclass.type_of_target(ypred3.astype('int'))\nconf=confusion_matrix(encoded_v2, ypred3)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v2, ypred3))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v2, ypred3))\nprint(\"MSE:\",mean_squared_error(encoded_v2, ypred3))","e5a7f6c3":"# GaussianNB\nprint(\"GaussianNB\")\nclf = GaussianNB()\nclf.fit(X_train, Y_train)\ny_true4 , y_pred4=Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred4)\nplt.scatter(y_true4, y_pred4,c='grey')\nplt.scatter(y_true4, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")\n","c7a3aeca":"# GaussianNB\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v3 = lab_enc.fit_transform(y_true4)\nutils.multiclass.type_of_target(y_true4.astype('int'))\nypred4= lab_enc.fit_transform(y_pred4)\nutils.multiclass.type_of_target(ypred4.astype('int'))\nconf=confusion_matrix(encoded_v3, ypred4)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v3, ypred4))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v3, ypred4))\nprint(\"MSE:\",mean_squared_error(encoded_v3, ypred4))","6c8d55b9":"# Decision Tree Classifier\nprint(\"Decision Tree Classifier\")\nclf = DecisionTreeClassifier()\nclf.fit(X_train, Y_train)\ny_true5 , y_pred5=Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred5)\nplt.scatter(y_true5, y_pred5,c='brown')\nplt.scatter(y_true5, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","e203b190":"# Decision Tree Classifier\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v4 = lab_enc.fit_transform(y_true5)\nutils.multiclass.type_of_target(y_true5.astype('int'))\nypred5= lab_enc.fit_transform(y_pred5)\nutils.multiclass.type_of_target(ypred5.astype('int'))\nconf=confusion_matrix(encoded_v4, ypred5)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v4, ypred5))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v4, ypred5))\nprint(\"MSE:\",mean_squared_error(encoded_v4, ypred5))","d72161fb":"# Logistic Regresyon\nfrom sklearn.linear_model import LogisticRegression\nprint(\"Logistic Regression\")\nclf = LogisticRegression(multi_class=\"auto\")\nclf.fit(X_train, Y_train)\ny_true6 , y_pred6=Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred6)\nplt.scatter(y_true6, y_pred6,c='purple')\nplt.scatter(y_true6, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")\n","1e952105":"# Logistic Regresyon\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v5 = lab_enc.fit_transform(y_true6)\nutils.multiclass.type_of_target(y_true6.astype('int'))\nypred6= lab_enc.fit_transform(y_pred6)\nutils.multiclass.type_of_target(ypred6.astype('int'))\nconf=confusion_matrix(encoded_v5, ypred6)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v5, ypred6))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v5, ypred6))\nprint(\"MSE:\",mean_squared_error(encoded_v5, ypred6))","4bf4ec9a":"# KNeighborsClassifier\nprint(\"KNeighbors Classifier\")\nclf = KNeighborsClassifier()\nclf.fit(X_train, Y_train)\ny_true7 , y_pred7=Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred7)\nplt.scatter(y_true7, y_pred7,c='blue')\nplt.scatter(y_true7, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")","7b1b8dfa":"# KNeighborsClassifier\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v6 = lab_enc.fit_transform(y_true7)\nutils.multiclass.type_of_target(y_true7.astype('int'))\nypred7= lab_enc.fit_transform(y_pred7)\nutils.multiclass.type_of_target(ypred7.astype('int'))\nconf=confusion_matrix(encoded_v6, ypred7)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v6, ypred7))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v6, ypred7))\nprint(\"MSE:\",mean_squared_error(encoded_v6, ypred7))","e686fd62":"# Linear Discriminant Analysis\nprint(\"Linear Discriminant Analysis\")\nclf = LinearDiscriminantAnalysis()\nclf.fit(X_train, Y_train)\ny_true8 , y_pred8=Y_validation,clf.predict(X_validation)\nprint(\"\\nTahmin de\u011ferleri: \",y_pred8)\nplt.scatter(y_true8, y_pred8,c='red')\nplt.scatter(y_true8, Y_validation,c='green')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predictions\")\n\n","1e8f0efa":"# Linear Discriminant Analysis\n#predictions multiclass oldu\u011fundan y_validation da multiclassa d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\nencoded_v7 = lab_enc.fit_transform(y_true8)\nutils.multiclass.type_of_target(y_true8.astype('int'))\nypred8= lab_enc.fit_transform(y_pred8)\nutils.multiclass.type_of_target(ypred8.astype('int'))\nconf=confusion_matrix(encoded_v7, ypred8)\nprint(\"\\nConfusion matrix :\\n\",conf)\nsns.heatmap(conf, cmap=\"Blues\")\n\n\nprint(\"Accuracy score(Do\u011fruluk de\u011feri):\\n\",accuracy_score(encoded_v7, ypred8))\nprint(\"\\nClassification Report:\\n\",classification_report(encoded_v7, ypred8))\nprint(\"MSE:\",mean_squared_error(encoded_v7, ypred8))","792daba6":"**Eksik de\u011fer analizi, veri seti i\u00e7erisindeki gerek g\u00f6zlem gerekse kay\u0131t s\u0131ras\u0131nda ortaya \u00e7\u0131kan sorunlar nedeniyle eksik kalan verilerin ortaya \u00e7\u0131kartt\u0131\u011f\u0131 sorunlar\u0131 \u00e7\u00f6zmeye \u00e7al\u0131\u015f\u0131r.\n Makine \u00f6\u011frenmesi modellerinin verisetine uygulanabilmesi i\u00e7in verisetindeki eksik alanlar\u0131n belirli metodlara g\u00f6re i\u015flenmesi gereklidir.**","61f20ec0":"**Karar a\u011fa\u00e7lar\u0131 genellikle kategorik veriler i\u00e7in uygundur. Bu verisetinde s\u00fcrekli veriler \u00fczerinden tahmin y\u00fcr\u00fct\u00fcld\u00fc\u011f\u00fc i\u00e7in bu model ba\u015far\u0131l\u0131 sonu\u00e7 vermemi\u015ftir.**","b25a18e9":"** T\u00fcrkiye i\u00e7in datasetteki t\u00fcm y\u0131llar\u0131n korelasyon matrisi olu\u015fturulup bir bar plot ile g\u00f6rselle\u015ftirildi.\nBar plot T\u00fcrkiye i\u00e7in y\u0131llar(\u00f6zellikler) aras\u0131 ili\u015fkiyi g\u00f6stermektedir.**\n\n**Y\u0131llar birbiri ile ba\u011f\u0131ml\u0131 \u00f6zellikler olmad\u0131\u011f\u0131 i\u00e7in de korelasyon de\u011ferlerinin d\u00fc\u015f\u00fck oldu\u011funu g\u00f6zlemleyebiliyoruz.**","0221bb43":"* **Se\u00e7ilmi\u015f olan t\u00fcm modeller i\u00e7erisinde de\u011ferlendirme \u00f6l\u00e7\u00fct\u00fc olarak confusion matrix (kar\u0131\u015f\u0131kl\u0131k matrisi) , classification report(s\u0131n\u0131fland\u0131rma raporlar\u0131) ve MSE kullan\u0131ld\u0131.**\n \n \n* ** F1 Score precision ve recall un ortalamas\u0131 denebilir. Se\u00e7ilmi\u015f olan modeller i\u00e7in g\u00f6zlemlenen macro ve weighted ortalamalar\u0131n\u0131n f1 scorlar\u0131 da olduk\u00e7a d\u00fc\u015f\u00fck(F1 score i\u00e7i iyi durum 1 , k\u00f6t\u00fc durum 0 olmas\u0131d\u0131r.) .**\n \n* **Verisetindeki de\u011ferler s\u00fcrekli olduklar\u0131 i\u00e7in tahmin sonu\u00e7lar\u0131na g\u00f6re regresyon modellerinde s\u0131n\u0131fland\u0131rma modellerinden daha ba\u015far\u0131l\u0131 sonu\u00e7lar al\u0131nm\u0131\u015ft\u0131r.**\n \n* **Ayn\u0131 zamanda \u00e7o\u011fu model i\u00e7in de (kendi i\u00e7erisinde) tahmin de\u011ferlerinin birbirine fazlas\u0131yla yak\u0131nl\u0131k g\u00f6sterdi\u011fini g\u00f6zlemleyebiliyoruz.\u00d6zellikle her bir model i\u00e7in g\u00f6rselle\u015ftirilmi\u015f olan heatmap lerde bu a\u00e7\u0131k\u00e7a g\u00f6r\u00fclmektedir.**\n \n* **T\u00fcm modeller aras\u0131nda en ba\u015far\u0131l\u0131 sonucu  lineer regresyon vermi\u015ftir .Yine de sonu\u00e7lar k\u0131yasland\u0131\u011f\u0131nda ger\u00e7e\u011fe uzak varsay\u0131ld\u0131\u011f\u0131 i\u00e7in de\u011ferlerin yorumlanmas\u0131yla do\u011fru yarg\u0131lar elde edilemez. **","d36ee80e":"**\nYRbir(1990),\nYRalti(1995),\nYRonbir(2000),\nYRonalti(2005),\nYRyirmibir(2010),\nYRyirmialti(2015)\nifade etmektedir.**","99c4543c":"**Eksik veri analizi yap\u0131ld\u0131ktan sonra ya bo\u015f alanlar silinir ya da tamamlan\u0131r. Yap\u0131lan her i\u015flem t\u00fcm veri setini etkiledi\u011fi i\u00e7in uygun olan y\u00f6ntem tercih edilmelidir.\n\u00d6ncelikli olarak eksik de\u011ferler tamamlanabiliyorsa tamamlanmal\u0131d\u0131r.**\n\n**Bu \u00e7al\u0131\u015fma i\u00e7in y\u00f6ntem olarak Mean Substitution (yerine ortalamay\u0131 koyma) se\u00e7ilmi\u015ftir.\nVerisetindeki de\u011ferler aras\u0131nda \u00e7ok b\u00fcy\u00fck farklar olmad\u0131\u011f\u0131 i\u00e7in eksik alanlar s\u00fctun baz\u0131nda ortalama de\u011fer ile doldurulmu\u015ftur.**\n\n\n(ya bir atama yap\u0131yoruz , ya da inplace kullan\u0131yoruz)","0b5d9216":"D\u00fcnya Kalk\u0131nma G\u00f6stergeleri (WDI), resmi olarak tan\u0131nan uluslararas\u0131 kaynaklardan derlenen, D\u00fcnya Bankas\u0131'n\u0131n temel kalk\u0131nma g\u00f6stergeleri koleksiyonudur. Mevcut en g\u00fcncel ve do\u011fru k\u00fcresel kalk\u0131nma verilerini sunar ve ulusal, b\u00f6lgesel ve k\u00fcresel tahminleri i\u00e7erir.\nBu \u00e7al\u0131\u015fmada ise WDI veri taban\u0131 i\u00e7erisindeki kategorilerden biri olan \u201cYenilenebilir Enerji Kaynaklar\u0131 T\u00fcketimi Oran\u0131\u201d  ile ilgili veri madencili\u011fi teknikleri kullan\u0131larak 1990 ve 2015 y\u0131llar\u0131 aras\u0131 i\u00e7in  analizler yap\u0131l\u0131p sonu\u00e7lar\u0131 veri madencili\u011fi k\u00fct\u00fcphanelerinden olan seaborn , mathplotlib-pyplot, numpy ve pandas kullan\u0131larak g\u00f6rselle\u015ftirildi.\nGelecek be\u015f y\u0131l sonras\u0131 , 2020 , i\u00e7in de veri madencili\u011fi modelleri kullan\u0131larak d\u00fcnya \u00fclkelerinin yenilenebilir enerji kaynaklar\u0131 t\u00fcketim oran\u0131 hakk\u0131nda tahminde bulunulmu\u015ftur.\n\n( Tahmin de\u011ferleri i\u00e7in be\u015f y\u0131l sonras\u0131n\u0131n se\u00e7ilme sebebi ise yenilenebilir enerji kaynaklar\u0131n\u0131 enerji \u00fcretip kullanabilmenin pahal\u0131 olmas\u0131ndan dolay\u0131 k\u0131sa s\u00fcre i\u00e7erisinde \u00e7ok b\u00fcy\u00fck de\u011fi\u015fiklikler g\u00f6zlemlenemiyor olmas\u0131d\u0131r. )\n","820ee5c0":"**Y\u0131llar\u0131n yenilenebilir enerji kaynaklar\u0131 t\u00fcketim oranlar\u0131n\u0131n ortalamalar\u0131na bak\u0131ld\u0131\u011f\u0131nda genel olarak bir azalma g\u00f6zlemlenmi\u015ftir.Bunun sebepleri aras\u0131nda ;**\n\n\n**  yenilenebilir enerji kaynaklar\u0131n\u0131n kullan\u0131labilir hale getirilmesindeki ekonomik yetersizlikler,\n  nuf\u00fcs art\u0131\u015f\u0131n\u0131n ve gelir art\u0131\u015f\u0131n\u0131n do\u011fru orant\u0131l\u0131 artmamas\u0131 ,\n  yeterli kaynak bulunanamamas\u0131 **\n\n**yer al\u0131r.**\n","a09b69a8":"**Verisetinin niteli\u011fine g\u00f6re modellerin ne kadar iyi \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 g\u00f6rebilmek i\u00e7in cross validation ile accuracy(do\u011fruluk de\u011feri) de\u011ferleri bulundu.**","aaed98bc":"# Yenilenebilir Enerji Kaynaklar\u0131 T\u00fcketim Oran\u0131","e8fcaa23":"**Verisetine ait her bir s\u00fctun i\u00e7in histogram grafikleri ve ayk\u0131r\u0131 de\u011ferleri g\u00f6zlemleyebilmek ad\u0131na box plotlar olu\u015fturuldu. \nBu boxplotlar\u0131 ve histogram grafiklerini inceledi\u011fimizde **\n\n    1990 ve 1995 y\u0131llar\u0131 de\u011ferlerinin ,\n    2000 ve 2005 y\u0131llar\u0131 de\u011ferlerinin ,\n    2005 ve 2010 y\u0131llar\u0131 de\u011ferlerinin ,\n    \n**birbirleri ile benzerlik g\u00f6sterdi\u011fi g\u00f6r\u00fclmektedir.\nBunu ayn\u0131 zamanda verisetinden describe metodu ile olu\u015fturdu\u011fumuz tablodaki ortalama (mean) de\u011ferler ile de    g\u00f6rebiliriz.**\n","b8ff2c19":"**Verisetinden tahmin de\u011ferleri olu\u015fturabilmek i\u00e7in \u00f6ncelikli olarak veriseti e\u011fitim ve test verisi olarak ayr\u0131ld\u0131.**\n\n**Bu oran ;\ntest verisi (0.25)\ne\u011fitim verisi (0.75) \u015feklindedir.\nTest boyutunu art\u0131rd\u0131k\u00e7a tahmin de\u011ferleri i\u00e7in ba\u015far\u0131 \u00f6l\u00e7\u00fcm metriklerinde d\u00fc\u015f\u00fc\u015f g\u00f6zlemlendi.**\n\n**Tahmin de\u011ferleri i\u00e7in de baz\u0131 modeller belirlendi.**\n\n**Veriler \u00fczerinde normalizasyon ve standartla\u015ft\u0131rma i\u015flemleri de denendi ancak ba\u015far\u0131 sonu\u00e7lar\u0131nda bir etki g\u00f6stermedi.Bu i\u015flemler denenirken kullna\u0131lan iki metot MinMaxScaler() ve StandartScaler() metotlar\u0131yd\u0131.**","d68571ac":"**Modellerin do\u011fruluk de\u011ferlerinin olduk\u00e7a d\u00fc\u015f\u00fck oldu\u011funu g\u00f6zlemliyoruz. Bu \u00fclke say\u0131s\u0131n\u0131n ya da y\u0131llar\u0131n \u00e7oklu\u011fundan kaynaklan\u0131yor olabilir. Bir tek do\u011fruluk de\u011ferlerine bakarak ideal modele karar vermek bu veriseti i\u00e7in zor olaca\u011f\u0131ndan \nkar\u0131\u015f\u0131kl\u0131k matrisi ve s\u0131n\u0131fland\u0131rma raporlamas\u0131na da bakmak da fayda vard\u0131r.**\n\n**< En y\u00fcksek do\u011fruluk de\u011feri  CART ve SVM'indir. >**","07851ff7":"**Bu \u00e7al\u0131\u015fma ile d\u00fcnya \u00fclkelerinin 1990 ,1995, 2000, 2005, 2010, 2015 y\u0131llar\u0131ndaki yenilenebilir enerji kaynaklar\u0131 t\u00fcketim oranlar\u0131na bak\u0131larak 2020 y\u0131l\u0131 i\u00e7in tahmin de\u011ferlerini bulunabilmesi hedeflenmi\u015ftir.**","0aa2f29a":"**Naive Bayes  bir olas\u0131l\u0131ksal yakla\u015f\u0131m modelidir. Bu model data tipine g\u00f6re farkl\u0131 bi\u00e7imlerde uygulan\u0131r. Bu versetindeki veriler s\u00fcrekli veriler oldu\u011fu i\u00e7in Gaussian se\u00e7ilmi\u015ftir.**","798322c7":"**  Veriseti i\u00e7erisinden \u00e7al\u0131\u015fma i\u00e7in kullan\u0131lacak de\u011ferler se\u00e7ilip yeni bir veriseti olu\u015fturulmu\u015ftur.**","7d9276b6":"**Makine \u00f6\u011frenmesi algoritmalar\u0131 do\u011frudan kategorik veriler \u00fczerinde \u00e7al\u0131\u015fmamaktad\u0131r. Bu nedenle veriler s\u00fcrekli de\u011fi\u015fkenlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmelidir.\nBu \u00e7al\u0131\u015fmadaki veriler numeric de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.**"}}