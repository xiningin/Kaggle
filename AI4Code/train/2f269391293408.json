{"cell_type":{"05154e30":"code","a9cec422":"code","4cb14654":"code","0c458550":"code","a5293377":"code","d6822e3e":"code","34f9c9d1":"code","99c75f3c":"code","f35319ba":"code","5cd522aa":"code","cd3461a0":"code","749adf29":"code","69e8cbc2":"code","799990d0":"code","edb91ea8":"code","d72673ba":"code","8f89e05e":"code","51e825ba":"code","594b3b96":"code","3809a14f":"code","5ed4a781":"code","045fbe88":"code","13082442":"code","1d0e110d":"code","351d492b":"code","64ac26b5":"code","08db68e4":"code","71c584ea":"code","c1885de4":"code","9adbe480":"code","799c48cc":"code","787081f3":"code","7470f898":"code","22544fe7":"code","f7990043":"code","b404ff51":"code","f9d10838":"code","46e667b3":"code","46f38ff5":"code","3ab4ec51":"code","ab681653":"code","94a773a2":"code","f6d3a96d":"code","da7672d4":"code","86515c82":"code","bd785d04":"code","cc101a5f":"code","e08a6c68":"code","5c644f70":"code","47ea370f":"code","e0069438":"code","532d24a7":"code","702c6c92":"code","84a226f4":"code","dd255697":"code","f0691aa5":"code","fdff7d54":"code","1390ffae":"code","5e8391f6":"code","c9d9de24":"code","39ad9977":"code","528e0d8d":"code","451efaee":"code","bbdda81a":"code","c51c1654":"code","2c51edbe":"code","c4ba64d3":"code","729a67db":"code","c69fc7b6":"code","627058bd":"code","f6730bd3":"code","ba7a4ea9":"code","d266fc5b":"code","346dce6a":"code","4f9cda70":"code","0ce482cb":"code","959a2f57":"code","0e94841f":"code","42af14ee":"code","6a196220":"code","53a17813":"code","eae49dbd":"code","d8795b46":"code","f69d0e8c":"code","8c268b34":"code","f61519ad":"code","765d66fb":"code","122522e5":"code","4193bfc6":"code","e9eb8bf8":"code","b81008a5":"code","42c9df1b":"code","7813a720":"code","dd42605f":"markdown","7d168407":"markdown","08f179e9":"markdown","5cd894c8":"markdown","74a8cfbc":"markdown","aa61887a":"markdown","5ad74e34":"markdown","510c6f54":"markdown","d0e84dfe":"markdown","958b9485":"markdown","49d5c281":"markdown"},"source":{"05154e30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9cec422":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', -1)","4cb14654":"#importing data to python notebook\nhousing = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\nhousing_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","0c458550":"housing.head()","a5293377":"#shape of the data\nhousing.shape","d6822e3e":"housing_test.head()","34f9c9d1":"housing_test.shape","99c75f3c":"#information of the data\nhousing.info()","f35319ba":"housing.describe()","5cd522aa":"housing_test.isnull().sum()","cd3461a0":"housing.isnull().sum()","749adf29":"#handling na values which are not actually NA\nhousing['Alley'].fillna('No alley access', inplace = True)\n\nhousing['FireplaceQu'].fillna('No Fireplace', inplace = True)\n\nhousing['PoolQC'].fillna('No Pool', inplace = True)\n\nhousing['Fence'].fillna('No Fence', inplace = True)\n\nhousing['GarageFinish'].fillna('No Garage', inplace = True)\n\nhousing['GarageType'].fillna('No Garage',inplace = True)\n\nhousing['GarageCond'].fillna('No Garage',inplace = True)\n\nhousing['GarageQual'].fillna('No Garage',inplace = True)\n\nhousing['BsmtExposure'].fillna('No Basement',inplace = True)\n\nhousing['BsmtFinType2'].fillna('No Basement',inplace = True)\n\nhousing['BsmtFinType1'].fillna('No Basement',inplace = True)\n\nhousing['BsmtCond'].fillna('No Basement',inplace = True)\n\nhousing['BsmtQual'].fillna('No Basement',inplace = True)\n\nhousing['MasVnrType'].fillna('None',inplace = True) ","69e8cbc2":"housing['LotFrontage'] = housing['LotFrontage'].fillna(housing['LotFrontage'].median())\nhousing['MasVnrArea'] = housing['MasVnrArea'].fillna(housing['MasVnrArea'].median())\nhousing['GarageYrBlt'] = housing['GarageYrBlt'].fillna(housing['GarageYrBlt'].median())\nhousing['Electrical'] = housing['Electrical'].fillna(housing['Electrical'].mode()[0])","799990d0":"# changing to no.of years from the action taken in an year\nhousing['YearBuilt']=2020-housing['YearBuilt']\n\nhousing['YearRemodAdd']=2020-housing['YearRemodAdd']\n\nhousing['GarageYrBlt']=2020-housing['GarageYrBlt']\n\nhousing['YrSold']=2020-housing['YrSold']","edb91ea8":"#handling na values which are not actually NA\n    \n\nhousing_test['FireplaceQu'].fillna('No Fireplace', inplace = True)\n\nhousing_test['BsmtCond'].fillna('No Basement',inplace = True)\n\nhousing_test['Fence'].fillna('No Fence', inplace = True)\n\nhousing_test['GarageFinish'].fillna('No Garage', inplace = True)\n\nhousing_test['GarageType'].fillna('No Garage',inplace = True)\n\nhousing_test['GarageCond'].fillna('No Garage',inplace = True)\n\nhousing_test['GarageQual'].fillna('No Garage',inplace = True)\n\nhousing_test['BsmtExposure'].fillna('No Basement',inplace = True)\n\nhousing_test['BsmtFinType2'].fillna('No Basement',inplace = True)\n\nhousing_test['BsmtFinType1'].fillna('No Basement',inplace = True)\n\nhousing_test['BsmtQual'].fillna('No Basement',inplace = True)\n\nhousing_test['MasVnrType'].fillna('None',inplace = True)\n\nhousing_test['Alley'].fillna('No alley access', inplace = True)","d72673ba":"# Filling missing Continuous variables :\n\nhousing_test['LotFrontage'] = housing_test['LotFrontage'].fillna(housing_test['LotFrontage'].median())\n\nhousing_test['MasVnrArea'] = housing_test['MasVnrArea'].fillna(housing_test['MasVnrArea'].median())\n\nhousing_test['GarageYrBlt'] = housing_test['GarageYrBlt'].fillna(housing_test['GarageYrBlt'].median())\n\nhousing_test['BsmtFinSF2'] = housing_test['BsmtFinSF2'].fillna(housing_test['BsmtFinSF2'].median())\n\nhousing_test['BsmtFullBath'] = housing_test['BsmtFullBath'].fillna(housing_test['BsmtFullBath'].median())\n\nhousing_test['TotalBsmtSF'] = housing_test['TotalBsmtSF'].fillna(housing_test['TotalBsmtSF'].median())\n\nhousing_test['GarageCars'] = housing_test['GarageCars'].fillna(housing_test['GarageCars'].median())\n\nhousing_test['GarageArea'] = housing_test['GarageArea'].fillna(housing_test['GarageArea'].median())\n\nhousing_test['BsmtUnfSF'] = housing_test['BsmtUnfSF'].fillna(housing_test['BsmtUnfSF'].median())\n\nhousing_test['BsmtFinSF1'] = housing_test['BsmtFinSF1'].fillna(housing_test['BsmtFinSF1'].median())\n\nhousing_test['Functional'] = housing_test['Functional'].fillna(housing_test['Functional'].mode()[0])\n\nhousing_test['BsmtHalfBath']=housing_test['BsmtHalfBath'].fillna(housing_test['BsmtHalfBath'].mode()[0])\n\nhousing_test['MSZoning'] = housing_test['MSZoning'].fillna(housing_test['MSZoning'].mode()[0])\n\nhousing_test['Utilities']=housing_test['Utilities'].fillna(housing_test['Utilities'].mode()[0])\n\nhousing_test['Exterior1st'] = housing_test['Exterior1st'].fillna(housing_test['Exterior1st'].mode()[0])\n\nhousing_test['KitchenQual'] = housing_test['KitchenQual'].fillna(housing_test['KitchenQual'].mode()[0])\n\nhousing_test['Exterior2nd'] = housing_test['Exterior2nd'].fillna(housing_test['Exterior2nd'].mode()[0])\n\nhousing_test['SaleType'] = housing_test['SaleType'].fillna(housing_test['SaleType'].mode()[0])\n\nhousing_test['Exterior1st']=housing_test['Exterior1st'].fillna(housing_test['Exterior1st'].mode()[0])\n\nhousing_test['Exterior2nd']=housing_test['Exterior2nd'].fillna(housing_test['Exterior2nd'].mode()[0])\n\nhousing_test['KitchenQual']=housing_test['KitchenQual'].fillna(housing_test['KitchenQual'].mode()[0])\n\nhousing_test['Functional']=housing_test['Functional'].fillna(housing_test['Functional'].mode()[0])\n\nhousing_test['SaleType']=housing_test['SaleType'].fillna(housing_test['SaleType'].mode()[0])","8f89e05e":"# changing to no.of years from the action taken in an year\nhousing_test['YearBuilt']=2020-housing_test['YearBuilt']\n\nhousing_test['YearRemodAdd']=2020-housing_test['YearRemodAdd']\n\nhousing_test['GarageYrBlt']=2020-housing_test['GarageYrBlt']\n\nhousing_test['YrSold']=2020-housing_test['YrSold']\n","51e825ba":"housing.drop(['MiscFeature'],inplace=True,axis=1)","594b3b96":"housing_test.drop(['MiscFeature'],inplace=True,axis=1)","3809a14f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"darkgrid\")\nfig, axs = plt.subplots(6,5, figsize = (30,18))\nplt1 = sns.countplot(housing['Alley'], ax = axs[0,0])\nplt2 = sns.countplot(housing['FireplaceQu'], ax = axs[0,1])\nplt3 = sns.countplot(housing['PoolQC'], ax = axs[0,2])\nplt4 = sns.countplot(housing['GarageFinish'], ax = axs[0,3])\nplt5 = sns.countplot(housing['GarageType'], ax = axs[0,4])\nplt6 = sns.countplot(housing['GarageCond'], ax = axs[1,0])\nplt7 = sns.countplot(housing['GarageQual'], ax = axs[1,1])\nplt8 = sns.countplot(housing['BsmtExposure'], ax = axs[1,2])\nplt9 = sns.countplot(housing['BsmtFinType2'], ax = axs[1,3])\nplt10 = sns.countplot(housing['BsmtFinType1'], ax = axs[1,4])\nplt11 = sns.countplot(housing['BsmtCond'], ax = axs[2,0])\nplt12 = sns.countplot(housing['BsmtQual'], ax = axs[2,1])\nplt13 = sns.countplot(housing['MasVnrType'], ax = axs[2,2])\nplt14 = sns.countplot(housing['Street'], ax = axs[2,3])\n\nplt15 = sns.countplot(housing['LotShape'], ax = axs[2,4])\nplt16 = sns.countplot(housing['LandContour'], ax = axs[3,0])\nplt17 = sns.countplot(housing['Utilities'], ax = axs[3,1])\nplt18 = sns.countplot(housing['LandSlope'], ax = axs[3,2])\nplt19 = sns.countplot(housing['CentralAir'], ax = axs[3,2])\nplt20 = sns.countplot(housing['BsmtFullBath'], ax = axs[3,4])\nplt21 = sns.countplot(housing['FullBath'], ax = axs[4,0])\nplt22 = sns.countplot(housing['BsmtHalfBath'], ax = axs[4,1])\nplt23 = sns.countplot(housing['HalfBath'], ax = axs[4,2])\nplt24= sns.countplot(housing['KitchenAbvGr'], ax = axs[4,3])\nplt25 = sns.countplot(housing['KitchenQual'], ax = axs[4,4])\nplt26 = sns.countplot(housing['Fireplaces'], ax = axs[5,0])\nplt27 = sns.countplot(housing['FireplaceQu'], ax = axs[5,1])\n\nplt.tight_layout()","5ed4a781":"# Dropping skewed columns which are observed from the plots:\nhousing.drop(['Street','Alley','LandContour','Utilities','LandSlope','BsmtCond','CentralAir','BsmtHalfBath','KitchenAbvGr','PavedDrive','PoolQC','Id'],inplace=True,axis=1)","045fbe88":"housing.isnull().sum()","13082442":"# Dropping in test set as well\nhousing_test.drop(['Street','Alley','LandContour','Utilities','LandSlope','BsmtCond','CentralAir','BsmtHalfBath','KitchenAbvGr','PavedDrive','PoolQC','Id'],inplace=True,axis=1)","1d0e110d":"housing_test.isnull().sum()","351d492b":"housing.shape","64ac26b5":"housing_test.shape","08db68e4":"#scatter plot GrLivArea vs SalePrice\ndata = pd.concat([housing['SalePrice'], housing['GrLivArea']], axis=1)\ndata.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800000));","71c584ea":"housing['GrLivArea'] = np.where(housing['GrLivArea'] >4000, 4000,housing['GrLivArea'])\n\nhousing['SalePrice'] = np.where(housing['SalePrice'] >600000, 600000,housing['SalePrice'])\n","c1885de4":"data = pd.concat([housing['SalePrice'], housing['GrLivArea']], axis=1)\ndata.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800000));","9adbe480":"#scatter plot LotFrontage vs SalePrice\nfig, ax = plt.subplots()\nax.scatter(x = housing['LotFrontage'], y = housing['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('LotFrontage', fontsize=13)\nplt.show()","799c48cc":"housing['LotFrontage'] = np.where(housing['LotFrontage'] >200, 200,housing['LotFrontage'])\n","787081f3":"#scatter plot LotFrontage vs SalePrice\nfig, ax = plt.subplots()\nax.scatter(x = housing['LotFrontage'], y = housing['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('LotFrontage', fontsize=13)\nplt.show()","7470f898":"#GarageCars vs SalePrice \nf, ax = plt.subplots(figsize=(5, 5))\nsns.boxplot(x=housing['GarageCars'], y = housing['SalePrice'])","22544fe7":"fig, ax = plt.subplots()\nax.scatter(x = housing['GarageArea'], y = housing['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageArea', fontsize=13)\nplt.show()","f7990043":"fig, ax = plt.subplots()\nax.scatter(x = housing['TotalBsmtSF'], y = housing['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()","b404ff51":"housing['TotalBsmtSF'] = np.where(housing['TotalBsmtSF'] >3200, 3200,housing['TotalBsmtSF'])","f9d10838":"fig, ax = plt.subplots()\nax.scatter(x = housing['TotalBsmtSF'], y = housing['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()","46e667b3":"#barplot of overallqual vs SalePrice \nsns.barplot(housing.OverallQual,housing.SalePrice)","46f38ff5":"#barplot of GarageCars vs SalePrice\nsns.barplot(housing.GarageCars,housing.SalePrice)","3ab4ec51":"#barplot of GarageCars vs GarageArea\nsns.barplot(housing.GarageCars,housing.GarageArea)","ab681653":"#year of sold vs SalePrice\nsns.boxplot(x=\"YrSold\",y=\"SalePrice\",data=housing);","94a773a2":"plt.figure(figsize=(15,5))\nsns.boxplot(x=\"YearRemodAdd\",y=\"SalePrice\",data=housing, notch = True)","f6d3a96d":"plt.figure(figsize=(35,7))\nsns.boxplot(x=\"YearBuilt\",y=\"SalePrice\",data=housing,notch = True)","da7672d4":"#check SalePrice distribution\nplt.figure(figsize=(10,5));\nplt.xlabel('xlabel', fontsize=16);\nplt.rc('xtick', labelsize=14); \nplt.rc('ytick', labelsize=14); \n\n\nsns.distplot(housing['SalePrice']);\nprint(\"Skewness: %f\" % housing['SalePrice'].skew())","86515c82":"from scipy import stats\nfig = plt.figure()\nres = stats.probplot(housing['SalePrice'], plot=plt)\nplt.show()","bd785d04":"#check SalePrice distribution after log transformation\nplt.figure(figsize=(10,5));\nplt.xlabel('xlabel', fontsize=16);\nplt.rc('xtick', labelsize=14); \nplt.rc('ytick', labelsize=14); \n\nhousing[\"SalePrice\"] = np.log1p(housing[\"SalePrice\"])\nsns.distplot(housing.SalePrice)\nfig = plt.figure()\n","cc101a5f":"#probability plot for saleprice\nfrom scipy import stats\nfig = plt.figure()\nres = stats.probplot(np.log1p(housing['SalePrice']), plot=plt)\nplt.show()","e08a6c68":"#correlation matrix\nhousing.corr()","5c644f70":"#correlation plot\ncorrmat = housing.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","47ea370f":"# features which are highly correlated to the SalePrice\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(housing[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","e0069438":"#scatterplot of highcorrelated features\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(housing[cols], size = 2.5)\nplt.show();","532d24a7":"#concating the test and train datasets\ndf=pd.concat([housing,housing_test],axis=0)","702c6c92":"df = df.reset_index(drop = True)","84a226f4":"df.shape","dd255697":"#df","f0691aa5":"dummy = pd.get_dummies(df[['MSZoning','LotShape','LotConfig','Neighborhood', 'Condition1',\n       'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond',\n       'Foundation', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1',\n       'BsmtFinType2', 'Heating', 'HeatingQC', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'Fence', 'SaleType', 'SaleCondition']],drop_first=True)","fdff7d54":"df = pd.concat([df,dummy],axis=1)\ndf.shape","1390ffae":"df = df.drop(['MSZoning','LotShape','LotConfig','Neighborhood', 'Condition1',\n       'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond',\n       'Foundation', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1',\n       'BsmtFinType2', 'Heating', 'HeatingQC', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'Fence', 'SaleType', 'SaleCondition'],axis = 1)","5e8391f6":"df.shape","c9d9de24":"df_final=df.iloc[:1460,:]\ndf_Test=df.iloc[1460:,:]","39ad9977":"df_Test.drop(['SalePrice'],axis=1,inplace=True)","528e0d8d":"#splitting the main data frame to X(independent variables) and y(target variable) \nX = df_final.drop(['SalePrice'], axis=1)\ny = df_final['SalePrice']","451efaee":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)","bbdda81a":"# split into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    train_size=0.7,\n                                                    test_size = 0.3, random_state=100)","c51c1654":"from sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom sklearn.model_selection import GridSearchCV\n","2c51edbe":"params = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train, y_train) \n","c4ba64d3":"#checking the value of optimum number of parameters\nprint(model_cv.best_params_)\nprint(model_cv.best_score_)","729a67db":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=200]\ncv_results.head()","c69fc7b6":"# plotting mean test and train scores with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","627058bd":"alpha = 100\nridge = Ridge(alpha=alpha)\n\nridge.fit(X_train, y_train)\nridge.coef_","f6730bd3":"#predict:\nfrom sklearn.metrics import r2_score\ny_train_pred = ridge.predict(X_train)\nprint('R2 score of Training Data:',r2_score(y_true=y_train,y_pred=y_train_pred) )\ny_test_pred = ridge.predict(X_test)\nprint('R2 score of Testing Data:',r2_score(y_true=y_test,y_pred=y_test_pred))","ba7a4ea9":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_test, y_test_pred))\nprint(rms)","d266fc5b":"lasso = Lasso()\n\n# cross validation\nmodel_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv.fit(X_train, y_train)","346dce6a":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","4f9cda70":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\n\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","0ce482cb":"#checking the value of optimum number of parameters\nprint(model_cv.best_params_)\nprint(model_cv.best_score_)","959a2f57":"alpha =0.0001\n\nlasso = Lasso(alpha=alpha)\n        \nlasso.fit(X_train, y_train) ","0e94841f":"lasso.coef_","42af14ee":"from sklearn.metrics import r2_score\ny_train_pred = lasso.predict(X_train)\nprint('R2 score of Training Data:',r2_score(y_true=y_train,y_pred=y_train_pred) )\ny_test_pred = lasso.predict(X_test)\nprint('R2 score of Testing Data:',r2_score(y_true=y_test,y_pred=y_test_pred) )","6a196220":"rms = sqrt(mean_squared_error(y_test, y_test_pred))\nprint(rms)","53a17813":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\n# random forest - the class weight is used to handle class imbalance - it adjusts the cost function\nforest = RandomForestRegressor( n_jobs = -1)\n\n# hyperparameter space\nparams = {\"criterion\": ['mse','mae'], \"max_features\": ['auto', 'sqrt', 'log2']}\n\n# create gridsearch object\nmodel = GridSearchCV(estimator=forest,param_grid=params, n_jobs=-1, verbose=1)","eae49dbd":"model.fit(X_train, y_train)","d8795b46":"# print best hyperparameters\nfrom sklearn.model_selection import GridSearchCV\nprint(\"Best hyperparameters: \", model.best_params_)","f69d0e8c":"# run a random forest model on train data\nrf_model = RandomForestRegressor(n_estimators=100, max_features='auto',criterion = 'mse', random_state=4, verbose=1)","8c268b34":"rf_model.fit(X_train,y_train)","f61519ad":"y_train_pred = rf_model.predict(X_train)\nprint('R2 score of Training Data:',r2_score(y_true=y_train,y_pred=y_train_pred) )\ny_test_pred = rf_model.predict(X_test)\nprint('R2 score of Testing Data:',r2_score(y_true=y_test,y_pred=y_test_pred))","765d66fb":"rms = sqrt(mean_squared_error(y_test, y_test_pred))\nprint(rms)","122522e5":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor()\nmy_model.fit(X_train, y_train, verbose=False)","4193bfc6":"y_train_pred = my_model.predict(X_train)\nprint('R2 score of Training Data:',r2_score(y_true=y_train,y_pred=y_train_pred) )\ny_test_pred = my_model.predict(X_test)\nprint('R2 score of Testing Data:',r2_score(y_true=y_test,y_pred=y_test_pred))","e9eb8bf8":"rms = sqrt(mean_squared_error(y_test, y_test_pred))\nprint(rms)","b81008a5":"#found ridge regression is performing well\ny_pred = ridge.predict(df_Test)","42c9df1b":"##Create Sample Submission file and Submit using ANN\npred=pd.DataFrame(y_pred)\nsub_df=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('sample_submission.csv',index=False)","7813a720":"sub_df.head()","dd42605f":"## **XGBoost**","7d168407":"dropping MiscFeature from both test and train as we can see so many missing values in that column","08f179e9":"## **Random forest**","5cd894c8":"### Data analysis","74a8cfbc":"### **Ridge regression**","aa61887a":"following are the steps involved in predicting the housing price based on the data set given:\n    - Data exploration\n    - Visualization\n    - Missing values imputaion\n    - Capping outliers\n    - Using the test set and splitted in to test train set to check the RMSE values (this will reduce the learning)\n    - Applying Ridge, Lasso, Random forest and XGBoost regression models","5ad74e34":"## lasso","510c6f54":"**checking and dropping highly skewed data**","d0e84dfe":"- As the remodeled building age increases the saleprice is decreasing which shows negative correlation ","958b9485":"cleaning the test data ","49d5c281":"**filling NA values in both test and train data**"}}