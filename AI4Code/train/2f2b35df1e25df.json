{"cell_type":{"a9b40bdc":"code","53f834b6":"code","f71ce95a":"code","5bb5b1c4":"code","cdb2675e":"code","54627528":"code","a7643b12":"code","0b1e781e":"markdown","bcd3baf8":"markdown","491c9615":"markdown","91fc2c53":"markdown","aeb05423":"markdown","c9aa5de4":"markdown"},"source":{"a9b40bdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n#********************************\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn import svm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import make_gaussian_quantiles\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import make_gaussian_quantiles\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","53f834b6":"\ndef loadData (Xpaths):\n    data = pd.read_csv(Xpaths) \n    return data\n","f71ce95a":"def preprocessing (Xtra):\n    train_X = Xtra.iloc[:,:-1]\n    train_y = Xtra.iloc[:,-1]\n    #Scaler\n    #scaler = StandardScaler()\n    #scaler.fit(train_X)\n    #train_X = scaler.transform(train_X)\n    \n    # PCA\n    pca = PCA()\n    pca.fit(train_X)\n    train_X = pca.transform(train_X)\n    print(train_X)\n    return Xtra\n","5bb5b1c4":"def trainModel (Xtra):\n    # Training classifiers\n    classifier1 = DecisionTreeClassifier(max_depth=6,splitter='random',min_samples_leaf=3)\n    classifier2 = KNeighborsClassifier(n_neighbors=7)\n    classifier3 = SVC(kernel='linear', probability=True)\n    classifier4 = AdaBoostClassifier(n_estimators=75,algorithm='SAMME.R')\n    classifier5 = LogisticRegression(solver='lbfgs')\n    model = VotingClassifier(estimators=[('dt', classifier1), ('knn', classifier2),\n                                        ('svc', classifier3),('abdt', classifier4),('sd',classifier5),],\n                            voting='soft',weights=[2,2,2,2,2])\n    train_X = Xtra[Xtra.columns[:-1]]\n    train_y = Xtra[Xtra.columns[-1]]  \n    model.fit(train_X, train_y.ravel())\n    return model\n","cdb2675e":"def predict(model,Xtst):\n    predicted = model.predict(Xtst)\n    predicted = np.around(predicted)\n    predicted = predicted.astype(dtype=int)\n    writeOutput(predicted)","54627528":"def writeOutput(predicted):\n    with open('submission.csv','w') as file:\n        file.write('ID,Predicted\\n')\n        for i in range(len(predicted)):\n            file.write('{},{}\\n'.format(i+1,predicted[i]))\n","a7643b12":"def result():\n    Xpaths = \"..\/input\/train.csv\"\n    Xtra = loadData(Xpaths)\n    Xpaths = \"..\/input\/test.csv\"\n    Xtst = loadData(Xpaths)\n    Xtra = preprocessing (Xtra)\n    model = trainModel (Xtra)\n    predict(model,Xtst)\n\nresult()   ","0b1e781e":"****Results****","bcd3baf8":"****Load Data****","491c9615":"****PCA****","91fc2c53":"**Prediction Part**","aeb05423":"****Output****","c9aa5de4":"****Train Model****"}}