{"cell_type":{"22db5d3a":"code","34841a92":"code","6b9ba42d":"code","8dbe5045":"code","f5120939":"code","66687100":"code","305337c5":"code","7cc5d80e":"code","bba7168d":"code","0bbf11bd":"code","291b8fcf":"code","ea9406ce":"code","3ecea545":"code","a480264c":"code","cf246791":"code","6c48b241":"code","28cb552e":"code","770ffb4e":"code","ecb0902b":"code","f38151d9":"code","6a0cbe2c":"code","8e10bc62":"code","1f8a26fc":"code","2ad971fa":"markdown","643de57f":"markdown","93b0fe73":"markdown","3a409660":"markdown","692371dd":"markdown","301e8d57":"markdown","95beecc2":"markdown","dbd6d9e7":"markdown","14630c30":"markdown","2a6520d4":"markdown","a4f81654":"markdown","c610689e":"markdown","e3d82bea":"markdown","c4e2230f":"markdown","90e79d5f":"markdown","b82da4bd":"markdown","025b6eac":"markdown","276ecde4":"markdown","84c7246c":"markdown","cdd2550a":"markdown","d393a796":"markdown","8fac72cc":"markdown","b85f4696":"markdown","9c2c02c2":"markdown","3ec51294":"markdown","63cdb968":"markdown","67bf499d":"markdown"},"source":{"22db5d3a":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport datetime\nimport json\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nmatches = pd.read_csv('..\/input\/epl-2019-2020-match-data\/match_infos_EPL_1920.csv',index_col = 'Unnamed: 0')\nrosters = pd.read_csv('..\/input\/epl-2019-2020-match-data\/rosters_EPL_1920.csv',index_col = 'Unnamed: 0')\nplays = pd.read_csv('..\/input\/epl-2019-2020-match-data\/shots_EPL_1920.csv',index_col = 'Unnamed: 0')\nfpl_player_history = pd.read_csv('..\/input\/fantasy-epl-new-season-research-2020-2021\/player_history_2020_21.csv')\nfpl2020_file = open('..\/input\/fantasy-epl-new-season-research-2020-2021\/FPL_2019_20_season_stats.jscsrc')\nfpl2020 = fpl2020_file.read()\nfpl2020 = json.loads(fpl2020)\n\nfpl_gws = pd.DataFrame(fpl2020['events'])\nfpl_teams = pd.DataFrame(fpl2020['teams'])\nfpl_players = pd.DataFrame(fpl2020['elements'])\nfpl_teams = fpl_teams.rename(columns={'code': 'team_code'})\n\n#formatting dates\nfor df in [matches,plays]:\n    df['date'] = pd.to_datetime(df['date'],infer_datetime_format=True)\nfpl_gws['deadline_time'] = pd.to_datetime(fpl_gws['deadline_time'],infer_datetime_format = True)\n\n#Removing gwks where the league was suspeded due to covid\nfpl_gws = pd.concat([fpl_gws, fpl_gws['top_element_info'].apply(lambda x: pd.Series({'top_element_info_id':x['id'],'top_element_info_points':x['points']}))], axis = 1)\nfpl_gws = fpl_gws[fpl_gws['top_element_info_points']!=0].copy()\nfpl_gws.index = list(range(1,39))\nfpl_gws.reset_index().drop(['index'],axis = 1)\n\n\n# Creating a fantasy gw column in epl matches by finding the closest deadline date which is lesser than match date. \nmatches['fpl_gw_deadline'] = matches['date'].apply(lambda x: (x + max([date - x for date in fpl_gws['deadline_time'] if x > date])))\n\n# Outputs the fantasy gw as the index value of the gameweek deadline which is less than the match date, and closest to the match date. \nmatches['fpl_gw_id'] = matches['fpl_gw_deadline'].apply(lambda x: fpl_gws['deadline_time'][fpl_gws['deadline_time'] == x].index.values[0])\n\n#Create teams table from epl data\nepl_teams_1920 = matches[['a','team_a']].drop_duplicates(subset=['a'], keep='first', inplace=False, ignore_index=True)\nepl_teams_1920.columns = ['team_id','epl_team_name']\n\n#Create players table from rosters data\nepl_players_1920 = rosters[['player_id','player','team_id']].drop_duplicates(subset=['player_id'], keep='last', inplace=False, ignore_index=True)\n\n#Create teams table from fpl data and match them on fullnames of teams\nteam_fullnames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton & Hove Albion', 'Burnley',\n       'Chelsea', 'Crystal Palace', 'Everton', 'Leicester', 'Liverpool',\n       'Manchester City', 'Manchester United', 'Newcastle United', 'Norwich', 'Sheffield United',\n       'Southampton', 'Tottenham Hotspurs', 'Watford', 'West Ham United', 'Wolverhampton Wanderers']\n\nfullnames_df = pd.DataFrame(data = [fpl_teams.name.values,team_fullnames])\nfullnames_df = fullnames_df.transpose()\nfullnames_df.columns = ['name','full_club_name']\nfpl_teams = fpl_teams.merge(fullnames_df,on = ['name'])\n\n\n#Create a table that matches team names using fuzzy wuzzy\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\nepl_teams_1920['matched_full_name'] = epl_teams_1920['epl_team_name'].apply(lambda x: process.extractOne(str(x),team_fullnames)[0])\nfpl_teams['matched_full_name'] = fpl_teams['name'].apply(lambda x: process.extractOne(str(x),team_fullnames)[0])\n# Get fpl team id for matched table\nmatched_teams = epl_teams_1920.merge(fpl_teams[['name','matched_full_name','team_code']],on = ['matched_full_name'])\nepl_players_1920_teamcodes_merged = epl_players_1920.merge(matched_teams,how = 'left', on = ['team_id'])\n\n# We are going to match the player_id key in the epl players table and the code key in the fpl table using the player names. \n# To do that we will match the name of a player in the fpl table all the players in the same club in the fpl table. This allows us to reduce our error rate and processing time. \n# A downside is that the players who switched clubs in the EPL itself will face a problem. We will make a list of such players to rework the matching.\n\n\n# Use the fpl team_code in matched_epl players table to get the list of all names of players at that club and use fuzzywuzzy to match with epl player name\nfpl_players['fullname'] = fpl_players['first_name']+' '+ fpl_players['second_name']\nepl_players_1920_teamcodes_merged[['fpl_name','match_confidence']] = epl_players_1920_teamcodes_merged.apply(lambda row: pd.Series(process.extractOne(str(row['player']), fpl_players[fpl_players['team_code']==row['team_code']]['fullname'].tolist())),axis = 1)\n# We are going to retain the confidence level of the match unlike the earlier club names matching. This is beacause matching is a lot lot harder with about 500 player names that with 20 club names. \n\n# We are going to rework on the players that did not get 100% match confidence\nmatched_correctly = epl_players_1920_teamcodes_merged[epl_players_1920_teamcodes_merged['match_confidence']>=90]\nrework_name_matching = epl_players_1920_teamcodes_merged[epl_players_1920_teamcodes_merged['match_confidence']<90]\nmatched_correctly_merged = matched_correctly.merge(fpl_players[['fullname','code']], how = 'left',left_on = 'fpl_name',right_on='fullname')\n\n#Filter the fpl dataset for unmatched players\nremaining_fpl_players = fpl_players[~fpl_players.code.isin(matched_correctly_merged.code.unique().tolist())]\n\n#Rerun the matching using the unmatched databases only, this time we use web_name from the fpl table, instead of full_name\nremaining_fpl_players = fpl_players[~fpl_players.code.isin(matched_correctly_merged.code.unique().tolist())]\nrework_name_matching = rework_name_matching.drop(['fpl_name','match_confidence'],axis = 1)\nrework_name_matching[['fpl_name','match_confidence']] = rework_name_matching.apply(lambda row: pd.Series(process.extractOne(str(row['player']), remaining_fpl_players[remaining_fpl_players['team_code']==row['team_code']]['fullname'].tolist())),axis = 1)\n\n# Another run at name matching to get the rest of the names \nmatched_correctly_merged_1 = rework_name_matching[rework_name_matching['match_confidence']>85]\n# join by web_name to get fpl code\nmatched_correctly_merged_1 = matched_correctly_merged_1.merge(fpl_players[['fullname','code']], how = 'left',left_on = 'fpl_name',right_on='fullname')\n\n\n#Another round of matching\n\nremaining_fpl_players_2 = remaining_fpl_players[~remaining_fpl_players['code'].isin(matched_correctly_merged_1.code.unique().tolist())]\nrework_name_matching_2 = rework_name_matching[rework_name_matching['match_confidence']<=85]\nrework_name_matching_2 = rework_name_matching_2.drop(['fpl_name','match_confidence'],axis = 1)\nrework_name_matching_2[['fpl_name','match_confidence']] = rework_name_matching_2.apply(lambda row: pd.Series(process.extractOne(str(row['player']), remaining_fpl_players_2[remaining_fpl_players_2['team_code']==row['team_code']]['fullname'].tolist() , scorer=fuzz.token_sort_ratio)),axis = 1)\n\nmatched_correctly_merged_2 = rework_name_matching_2[rework_name_matching_2['match_confidence']>80]\nmatched_correctly_merged_2 = matched_correctly_merged_2.merge(fpl_players[['fullname','code']], how = 'left',left_on = 'fpl_name',right_on='fullname')\n\n# If we look at the unmatched players, they are mostly because the epl table has their name as a short name. So we will do another round of matching using the web_name\n# However this approach may result duplicates as limited information is used to make an approximate guess. \n\nremaining_fpl_players_3 = remaining_fpl_players[~remaining_fpl_players['code'].isin(matched_correctly_merged_2.code.unique().tolist())]\nrework_name_matching_3 = rework_name_matching_2[rework_name_matching_2['match_confidence']<=85]\nrework_name_matching_3 = rework_name_matching_3.drop(['fpl_name','match_confidence'],axis = 1)\nrework_name_matching_3[['fpl_name','match_confidence']] = rework_name_matching_3.apply(lambda row: pd.Series(process.extractOne(str(row['player']), remaining_fpl_players_2[remaining_fpl_players_2['team_code']==row['team_code']]['web_name'].tolist() , scorer=fuzz.token_sort_ratio)),axis = 1)\nmatched_correctly_merged_3 = rework_name_matching_3[rework_name_matching_3['match_confidence']>85]\nmatched_correctly_merged_3 = matched_correctly_merged_3.merge(fpl_players[['web_name','code']], how = 'left',left_on = 'fpl_name',right_on='web_name')\n\n# Replace web_name by the full name to preserve the commonality\nmatched_correctly_merged_3['fpl_name'] = matched_correctly_merged_3.apply(lambda row: fpl_players[fpl_players['code']==row['code']]['fullname'].values[0],axis = 1)\nmatched_correctly_merged_3.columns = matched_correctly_merged.columns\n\nepl_fpl_players_matched = pd.concat([matched_correctly_merged,matched_correctly_merged_1,matched_correctly_merged_2,matched_correctly_merged_3],axis = 0)\nremaining = epl_players_1920[~epl_players_1920['player_id'].isin(epl_fpl_players_matched['player_id'].tolist())]\n\n# Just Cenk Tosun, and Solly March are not matched. We will just fix that manually in the interest of time.  \n\nremaining_matched = remaining.drop(['team_id'],axis = 1)\nremaining_matched['fullname'] = [fpl_players[fpl_players['web_name']=='Tosun']['fullname'].values[0],fpl_players[fpl_players['web_name']=='March']['fullname'].values[0]]\nremaining_matched['code'] = [fpl_players[fpl_players['web_name']=='Tosun']['code'].values[0],fpl_players[fpl_players['web_name']=='March']['code'].values[0]]\n\nepl_fpl_players_matched_2 = pd.concat([epl_fpl_players_matched,remaining_matched])\n\n# Also a quick check for dups will reveal some duplicates and we will need to delete the duplicate entries. \n# We have just 1 duplicate entry\ncounts = epl_fpl_players_matched_2.groupby(by=['player_id']).count()\ndups = counts[counts['player']>1].index.tolist()\ndups_df = epl_fpl_players_matched_2[epl_fpl_players_matched_2['player_id'].isin(dups)]\n\n# We need to delete the duplicate entry for Jota that has player_id as 2132 and cpde as 89274, Again this is a bit manual and not ideal\nepl_fpl_players_matched_final = epl_fpl_players_matched_2[~((epl_fpl_players_matched_2['player_id']==2132) & (epl_fpl_players_matched_2['code']==89274))]\n\n\n# As a final item, we are going to add a category for the team that season based on where they finished. And short club names from FPL\nclub_id_mapping = matched_teams[['team_id', 'matched_full_name', 'team_code']]\nclub_category = pd.Series(['relg_fight','top4','top_half','top_half','top_half','midtable','relg_fight','top6_cont','top6_cont','top4','top_half','relg_fight','midtable','relg_fight','midtable','top4','top6_cont','midtable','top6_cont','top4'],name = 'category')\nclub_id_mapping = pd.concat([club_id_mapping,club_category],axis = 1)\nclub_category_rankings = {'relg_fight':5, 'top4':1, 'top_half':3, 'midtable':4, 'top6_cont':2}\nclub_id_mapping['club_category_rank'] = club_id_mapping['category'].apply(lambda x: club_category_rankings[x] )\nclub_id_mapping = club_id_mapping.merge(fpl_teams[['short_name','team_code','position']], how = 'left', on = 'team_code')\n# After all that heavy lifting we finally have two mapping tables for OPTA teams to FPL teams and OPTA players to FPL Players\n\nplayer_id_mapping = epl_fpl_players_matched_final[['player_id','player','fullname','code']]","34841a92":"#assign points to every match\nmatches['winner'] = matches.apply(lambda row: 'h' if row['h_goals'] > row['a_goals'] else 'd' if row['h_goals'] == row['a_goals'] else 'a',axis = 1) \nmatches['h_points'] = matches['winner'].apply(lambda x: 3 if x == 'h' else 1 if x == 'd' else 0) \nmatches['a_points'] = matches['winner'].apply(lambda x: 0 if x == 'h' else 1 if x == 'd' else 3) \n\n#build season stats at club level \nseasonstats = pd.DataFrame(club_id_mapping['team_id'])\nfor stat in ['a_deep', 'a_goals', 'a_ppda', 'a_shot', 'a_shotOnTarget', 'a_xg', 'h_deep', 'h_goals', 'h_ppda','h_shot','h_shotOnTarget', 'h_xg', 'h_points', 'a_points']:\n    if stat.split('_')[0]=='h':\n        stat = matches.groupby(by=['h'])[stat].sum().reset_index()\n        stat = stat.rename(columns = {'h':'team_id'})\n    else:\n        stat = matches.groupby(by=['a'])[stat].sum().reset_index()\n        stat = stat.rename(columns = {'a':'team_id'})\n    seasonstats = seasonstats.merge(stat, on = 'team_id')\n\nseasonstats = seasonstats.merge(club_id_mapping[['team_id','short_name','team_code']], how = 'left', on = 'team_id')\nseasonstats = seasonstats.merge(fpl_teams[['team_code','position']], how = 'left', on = 'team_code')\nseasonstats = seasonstats.sort_values('position')\nseasonstats['total_points'] = seasonstats['h_points']+seasonstats['a_points']\n\npoints_chart = seasonstats[['short_name','h_points','a_points']]\npoints_chart.columns = ['Club','Home Points','Away Points']\nfig = px.bar(points_chart, x='Club', y=['Home Points', 'Away Points'], title='Total Points - Home vs Away')\nfig.update_layout(\n    yaxis_title=\"Points\",\n    legend_title=\"Turf\",\n)\nfig.show()","6b9ba42d":"#Create table of home points and away points by club category of the opposition\n# Merge home and away categories for home and away teams and relabel the columns\nmatches = matches.merge(club_id_mapping[['team_id','category','club_category_rank']],how = 'left', left_on = 'h', right_on = 'team_id')\nmatches = matches.rename(columns = {'team_id':'h_team_id','category':'h_club_category','club_category_rank':'h_club_category_rank'})\nmatches = matches.merge(club_id_mapping[['team_id','category','club_category_rank']],how = 'left', left_on = 'a', right_on = 'team_id')\nmatches = matches.rename(columns = {'team_id':'a_team_id','category':'a_club_category','club_category_rank':'a_club_category_rank'})\n\n#Group the matches for home teams by opposition category\nhome_opp_category_points = matches.groupby(by = ['h','a_club_category_rank'],as_index = False)['h_points'].agg({'points_vs_oppcat': 'sum', 'games_vs_opp_cat': 'count'})\nhome_opp_category_points['turf'] = 'h'\nhome_opp_category_points = home_opp_category_points.rename(columns = {'h':'team_id','a_club_category_rank':'opp_club_category_rank'})\n#Group the matches for away teams by opposition category\naway_opp_category_points = matches.groupby(by = ['a','h_club_category_rank'],as_index = False)['a_points'].agg({'points_vs_oppcat': 'sum', 'games_vs_opp_cat': 'count'})\naway_opp_category_points['turf'] = 'a'\naway_opp_category_points = away_opp_category_points.rename(columns = {'a':'team_id','h_club_category_rank':'opp_club_category_rank'})\n\n# Combine home and away and create points per game\npoints_vs_opp_cat = pd.concat([home_opp_category_points,away_opp_category_points])\npoints_vs_opp_cat['points_per_game'] = round(points_vs_opp_cat['points_vs_oppcat']\/points_vs_opp_cat['games_vs_opp_cat'],2)\npoints_vs_opp_cat = points_vs_opp_cat.merge(club_id_mapping[['team_id','category','team_code']], how = 'left', on = 'team_id')\npoints_vs_opp_cat = points_vs_opp_cat.merge(fpl_teams[['position','team_code','short_name']], how = 'left', on = 'team_code')\npoints_vs_opp_cat = points_vs_opp_cat.sort_values(['position','opp_club_category_rank'])\npoints_vs_opp_cat['opp_category_name'] = points_vs_opp_cat['opp_club_category_rank'].apply(lambda x: club_id_mapping[club_id_mapping['club_category_rank']==x]['category'].values[0])\n\n# Group by turf to get \npoints_vs_opp_cat_combined = points_vs_opp_cat.groupby(['team_id','opp_category_name'], as_index = False)['points_per_game'].mean()\npoints_vs_opp_cat_combined = points_vs_opp_cat_combined.merge(points_vs_opp_cat[['team_id','position', 'short_name']], how = 'left', on = 'team_id')\n\npoints_vs_opp_cat_combined['opp_club_category_rank'] = points_vs_opp_cat_combined['opp_category_name'].apply(lambda x : club_id_mapping[club_id_mapping['category']==x]['club_category_rank'].values[0])\npoints_vs_opp_cat_combined = points_vs_opp_cat_combined.sort_values(['position','opp_club_category_rank'])\n\nfig = px.scatter(points_vs_opp_cat_combined, x='short_name', y='opp_category_name', color='opp_category_name',size='points_per_game', hover_data=['points_per_game'])\nfig.update_layout(\n    title = 'Points per game split by Opposition Strength',\n    xaxis_title='Club',\n    yaxis_title='Opposition Strength',\n    legend_title='Opposition Strength',\n)\nfig.show()","8dbe5045":"# points earned vs team category home vs away \n\nfig = px.scatter(points_vs_opp_cat, x='short_name', y='opp_category_name', color='opp_category_name',size='points_per_game', hover_data=['points_per_game'], facet_col = 'turf')\nfig.update_layout(\n    title = 'Points per game split by Opposition Strength',\n    yaxis_title='Opposition Strength',\n    legend_title='Opposition Strength',\n)\nfig.for_each_annotation(lambda a: a.update(text = ('Home' if a.text.split(\"=\")[-1]=='h' else 'Away')))\n\nfig.show()","f5120939":"team_match_stats = pd.DataFrame()\nfor team_id in matches['a'].unique():        \n    team_matches_home = matches[matches['h_team_id']==team_id]\n    team_matches_home = team_matches_home.rename(lambda x: 'opp_' + x.split('_')[-1] if all([x.split('_')[0]=='a', len(x)>2]) else x, axis=1)\n    team_matches_home = team_matches_home.rename(lambda x: 'self_' + x.split('_')[-1] if all([x.split('_')[0]=='h', len(x)>2]) else x, axis=1)\n    team_matches_home['turf'] = 'h'\n    team_matches_away = matches[matches['a_team_id']==team_id]\n    team_matches_away = team_matches_away.rename(lambda x: 'opp_' + x.split('_')[-1] if x.split('_')[0]=='h' else x, axis=1)\n    team_matches_away = team_matches_away.rename(lambda x: 'self_' + x.split('_')[-1] if x.split('_')[0]=='a' else x, axis=1)\n    team_matches_away['turf'] = 'a'\n    team_stats = pd.concat([team_matches_home, team_matches_away], axis = 0)\n    team_stats['team_id'] = team_id\n    team_stats = team_stats.dropna(axis = 1)\n    team_match_stats = pd.concat([team_match_stats,team_stats],axis = 0)\n\nteam_match_stats = team_match_stats.merge(club_id_mapping[['team_id','category','club_category_rank','short_name','position']],how = 'left', on = 'team_id')\n\nteam_season_stats = team_match_stats.groupby('team_id', as_index = False).sum()\nteam_season_stats = team_season_stats.drop(['fid', 'id', 'fpl_gw_id','self_id', 'self_rank','opp_id', 'opp_rank', 'club_category_rank',],axis = 1)\nfor column in [ 'league_id', 'season', 'position']:\n    team_season_stats[column] = team_season_stats[column].apply( lambda x: int(x\/38))\n    \nteam_season_stats = team_season_stats.merge(club_id_mapping[['team_id','category','club_category_rank','short_name']],how = 'left', on = 'team_id')\n\nteam_season_stats = team_season_stats.sort_values('position')\nfig = px.bar(team_season_stats, x='short_name', y='opp_points',hover_data=['self_points'], title='Points Conceded')\nfig.update_layout(\n    xaxis_title=\"Club\",\n    yaxis_title=\"Points\",\n)\nfig.show()","66687100":"team_season_stats = team_season_stats.sort_values('position')\nfig = px.bar(team_season_stats, x='short_name', y='self_ppda',hover_data=['opp_goals'], title='Park the Bus Score')\nfig.update_layout(\n    xaxis_title=\"Club\",\n    yaxis_title=\"Passes allowed per defensive action\",\n)\nfig.show()","305337c5":"plays_goals = plays[plays['result']=='Goal']\nplays_goals_players = plays_goals.groupby(['player_id','situation'],as_index = False)['result'].count()\nplays_goals_players = plays_goals_players.merge(epl_fpl_players_matched_final[['team_id', 'player_id']],how = 'left', on = 'player_id')\nplays_goals_teams = plays_goals_players.groupby(['team_id','situation'],as_index = False)['result'].sum()\nplays_goals_teams = plays_goals_teams.merge(club_id_mapping[['team_id', 'short_name','position']],how = 'left', on = 'team_id')\n\nplays_goals_teams_pvt = plays_goals_teams.pivot(index = 'team_id',columns = 'situation', values = 'result' ).reset_index()\nplays_goals_teams_pvt = plays_goals_teams_pvt.merge(club_id_mapping[['team_id', 'short_name','position']],how = 'left', on = 'team_id')\nplays_goals_teams_pvt = plays_goals_teams_pvt.sort_values(['position'])\nfig = px.bar(plays_goals_teams_pvt, x='short_name', y=['DirectFreekick','FromCorner','OpenPlay','Penalty','SetPiece'], title='Goals scored from')\nfig.update_layout(\n    xaxis_title='Clubs',\n    yaxis_title='Goals',\n    legend_title='Situation Type',\n)\nfig.show()","7cc5d80e":"player_season_stats = rosters.groupby(['team_id','player_id'],as_index = False)[['goals','assists','shots','key_passes','xG','xA','xGBuildup', 'xGChain']].sum()\nplayer_season_stats = player_season_stats.merge(club_id_mapping[['team_id', 'category','club_category_rank', 'short_name']],how = 'left',on = 'team_id')\nplayer_season_stats = player_season_stats.merge(player_id_mapping[['player_id', 'code']],how = 'left', on = 'player_id')\nplayer_season_stats = player_season_stats.merge(fpl_players[['code','total_points', 'element_type','points_per_game','minutes','assists','clean_sheets','goals_conceded','bonus','web_name']],how = 'left', on = 'code',suffixes=['_epl','_fpl'])\nplayer_season_stats = player_season_stats.sort_values(['team_id','total_points'],ascending = False)\nplayer_season_stats_top5 = player_season_stats.groupby(['team_id','player_id'], as_index = False).apply(lambda df: df[0:5]).reset_index()\np_s_s_top5_scaled = player_season_stats_top5.copy()\nattrs =  ['goals', 'assists_epl', 'shots', 'key_passes','xG', 'xA', 'xGBuildup', 'xGChain','assists_fpl']\np_s_s_top5_scaled[attrs] = p_s_s_top5_scaled[attrs] \/ p_s_s_top5_scaled[attrs].max() \np_s_s_top5_scaled_stats = p_s_s_top5_scaled[['team_id','player_id', 'goals', 'assists_epl','shots', 'key_passes']]\np_s_s_top5_scaled_stats_melted = p_s_s_top5_scaled_stats.melt(id_vars = ['team_id','player_id'],value_vars = [ 'goals', 'assists_epl','shots', 'key_passes'])\np_s_s_top5_scaled_stats_melted = p_s_s_top5_scaled_stats_melted.merge(player_season_stats[['player_id','total_points','short_name','web_name']], how = 'left', on = 'player_id')\np_s_s_top5_scaled_stats_melted = p_s_s_top5_scaled_stats_melted.sort_values(['total_points','variable'], ascending = False)\n\np_s_s_top5_scaled = p_s_s_top5_scaled.sort_values('total_points',ascending = False)\n\nradar_cols = ['goals', 'assists_fpl', 'shots', 'key_passes']\nfig = go.Figure()\nfor i in range(2):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled[radar_cols].iloc[i],\n          theta=radar_cols,\n          fill='toself',\n          name=p_s_s_top5_scaled['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = 'De Bruyne vs Salah')\n\nfig.show()","bba7168d":"fig = go.Figure()\nfor i in range(5):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled[radar_cols].iloc[i],\n          theta=radar_cols,\n          fill='toself',\n          name=p_s_s_top5_scaled['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Top 5 FPL players\")\n\nfig.show()","0bbf11bd":"p_s_s_top5_scaled_fwds = p_s_s_top5_scaled[p_s_s_top5_scaled['element_type'] == 4] \nfig = go.Figure()\nfor i in range(5):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled_fwds[radar_cols].iloc[i],\n          theta=radar_cols,\n          fill='toself',\n          name=p_s_s_top5_scaled_fwds['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Top 5 Forwards\")\n\nfig.show()","291b8fcf":"p_s_s_top5_scaled_fwds = p_s_s_top5_scaled[p_s_s_top5_scaled['element_type'] == 3] \nfig = go.Figure()\nfor i in range(5):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled_fwds[radar_cols].iloc[i],\n          theta=radar_cols,\n          fill='toself',\n          name=p_s_s_top5_scaled_fwds['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Top 5 Midfielders\")\n\nfig.show()","ea9406ce":"\np_s_s_top5_scaled_fwds = p_s_s_top5_scaled[p_s_s_top5_scaled['element_type'] == 4] \n\nradar_cols_underlying = ['key_passes', 'xG', 'xA', 'xGBuildup', 'xGChain']\nfig = go.Figure()\nfor i in range(5):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled_fwds[radar_cols_underlying].iloc[i],\n          theta=radar_cols_underlying,\n          fill='toself',\n          name=p_s_s_top5_scaled_fwds['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Underlying Stats: Top 5 Forwards\")\n\nfig.show()","3ecea545":"\np_s_s_top5_scaled_mids = p_s_s_top5_scaled[(p_s_s_top5_scaled['element_type'] == 3)|(p_s_s_top5_scaled['code']==169187)] \n\nradar_cols_underlying = ['key_passes', 'xG', 'xA', 'xGBuildup', 'xGChain']\nfig = go.Figure()\nfor i in range(6):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled_mids[radar_cols_underlying].iloc[i],\n          theta=radar_cols_underlying,\n          fill='toself',\n          name=p_s_s_top5_scaled_mids['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Underlying Stats: Top 5 Midfielders\")\n\nfig.show()","a480264c":"\np_s_s_top5_scaled_defs = p_s_s_top5_scaled[(p_s_s_top5_scaled['element_type'] == 2)] \n\nradar_cols_underlying = ['key_passes', 'xG', 'xA', 'xGBuildup', 'xGChain']\nfig = go.Figure()\nfor i in range(5):\n    fig.add_trace(go.Scatterpolar(\n          r=p_s_s_top5_scaled_defs[radar_cols_underlying].iloc[i],\n          theta=radar_cols_underlying,\n          fill='toself',\n          name=p_s_s_top5_scaled_defs['web_name'].iloc[i]))\n\n\nfig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[0, 1])),showlegend=True, title = \"Underlying Stats: Top 5 Defenders\")\n\nfig.show()","cf246791":"plays['field_x'] = 7-plays['Y']*7\nplays['field_y'] = plays['X']*10\n\ndef create_full_field(fig):\n    # Set axes properties\n    fig.update_xaxes(range=[-1, 8], showgrid=False)\n    fig.update_yaxes(range=[-1, 11])\n\n    # Add shapes\n    fig.add_shape(type=\"rect\",x0=-0.5, y0=-0.5, x1=7.5, y1=10.5,\n                  line=dict(color=\"white\",width=2),fillcolor=\"green\", layer = 'below') # full pitch\n\n    fig.add_shape(type=\"rect\",x0=0, y0=0, x1=7, y1=10,\n                  line=dict(color=\"white\",width=5), layer = 'below')# full playing area\n\n    fig.add_shape(type=\"rect\",x0=0, y0=0, x1=7, y1=5,\n                  line=dict(color=\"white\",width=4),layer = 'below')# home half\n    \n    fig.add_shape(type=\"circle\",fillcolor=\"green\",x0=3.5-0.915,y0=1.1-0.915,x1=3.5+0.915,y1=1.1+0.915,\n                  line=dict(color=\"white\",width=2),layer = 'below')# home penalty arc\n    \n    fig.add_shape(type=\"rect\",x0=1.5, y0=0, x1=5.5, y1=1.65,\n                  line=dict(color=\"white\",width=3),fillcolor=\"green\",layer = 'below')# home penalty box\n    \n    fig.add_shape(type=\"rect\",x0=1.5+1.65-.55, y0=0, x1=5.5-1.65+.55, y1=0.55,\n                  line=dict(color=\"white\",width=3),layer = 'below')# home inner penalty box\n    \n    fig.add_shape(type=\"rect\",x0=1.5+1.65, y0=-0.15, x1=5.5-1.65, y1=0,\n                  line=dict(color=\"grey\",width=1),fillcolor=\"white\",layer = 'below'\n                 )# home goal\n    fig.add_trace(go.Scatter(x=[3.5],y=[1.1],mode=\"markers\",\n                             marker=dict(color='white',size=5,),showlegend = False))#home penalty spot\n\n    fig.add_shape(type=\"circle\",fillcolor=\"green\",x0=3.5-0.915,y0=10-(1.1-0.915),x1=3.5+0.915,y1=10-(1.1+0.915),\n                line=dict(color=\"white\",width=2),layer = 'below')# away penalty arc\n    \n    fig.add_shape(type=\"rect\",x0=1.5, y0=10, x1=5.5, y1=10-1.65,\n                line=dict(color=\"white\",width=3),fillcolor=\"green\",layer = 'below')# away penalty box\n\n    fig.add_shape(type=\"rect\",x0=1.5+1.65-.55, y0=10-0.55, x1=5.5-1.65+.55, y1=10,\n                line=dict(color=\"white\",width=3),layer = 'below')# away inner penalty box\n    \n    fig.add_shape(type=\"rect\",x0=1.5+1.65, y0=10+0.15, x1=5.5-1.65, y1=10,\n                line=dict(color=\"grey\",width=1),fillcolor=\"white\",layer = 'below')# away goal\n    \n    fig.add_trace(go.Scatter(x=[3.5],y=[10-1.1],mode=\"markers\",\n                             marker=dict(color='white',size=5),showlegend = False)) #away penalty spot\n\n    fig.add_trace(go.Scatter( x=[3.5],y=[5],mode=\"markers\",\n                             marker=dict(color='white',size=10),showlegend = False))#centre spot\n\n    fig.add_shape(type=\"circle\",x0=3.5-0.915,y0=5-0.915,x1=3.5+0.915,y1=5+0.915,\n                  line=dict(color=\"white\",width=2),layer = 'below')# centre circle\n\n    fig.update_xaxes(showticklabels=False,showgrid=False,zeroline=False,title='',)#hide x-axis\n    fig.update_yaxes(showticklabels=False,showgrid=False,zeroline=False,title='',)#hide y-axis\n    fig.update_layout(autosize=False,width=700,height=700,paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)') #fix size\n    return fig\n\nsalah_shots_field = px.scatter(plays[plays['player_id']==1250].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation','shotType','player_assisted'], title = 'Salah Shots Heat Map' )   \n\nsalah_shots_field = create_full_field(salah_shots_field)                 \nsalah_shots_field.show()\n","6c48b241":"mane_shots_field = px.scatter(plays[plays['player_id']==838].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Mane Shots Heat Map')      \n\nmane_shots_field = create_full_field(mane_shots_field)                 \nmane_shots_field.show()\n","28cb552e":"kdb_shots_field = px.scatter(plays[plays['player_id']==750].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Kevin DeBruyne Shots Heat Map')      \n\nkdb_shots_field = create_full_field(kdb_shots_field)                 \nkdb_shots_field.show()","770ffb4e":"auba_shots_field = px.scatter(plays[plays['player_id']==318].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Aubamayeng Shots Heat Map')      \n\nauba_shots_field = create_full_field(auba_shots_field)                 \nauba_shots_field.show()","ecb0902b":"sterling_shots_field = px.scatter(plays[plays['player_id']==618].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Sterling Shots Heat Map')      \n\nsterling_shots_field = create_full_field(sterling_shots_field)                 \nsterling_shots_field.show()","f38151d9":"ings_shots_field = px.scatter(plays[plays['player_id']==986].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Ings Shots Heat Map')      \n\nings_shots_field = create_full_field(ings_shots_field)                 \nings_shots_field.show() ","6a0cbe2c":"fernandes_shots_field = px.scatter(plays[plays['player_id']==1228].sort_values('result'), x=\"field_x\", y=\"field_y\", color=\"result\",\n                 size='xG', hover_data=['situation'], title = 'Bruno Fernandes Shots Heat Map')      \n\nfernandes_shots_field = create_full_field(fernandes_shots_field)                 \nfernandes_shots_field.show()","8e10bc62":"goals_sankey = plays.groupby(['situation','shotType'],as_index = False)['player_id'].count()\nenconding = {'DirectFreekick':0,'FromCorner':1,'OpenPlay':2,'Penalty':3,'SetPiece':4,'LeftFoot':5,'RightFoot':6,'Head':7,'OtherBodyPart':8,'BlockedShot':9,'Goal':10,'MissedShots':11,'SavedShot':12,'ShotOnPost':13,'OwnGoal':14}\ngoals_sankey = goals_sankey.replace(enconding)\ngoals_sankey_result = plays.groupby(['shotType','result'],as_index = False)['player_id'].count()\ngoals_sankey_result = goals_sankey_result.replace(enconding)\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"grey\", width = 0.5),\n      label = list(enconding),\n      color = \"green\"\n    ),\n    link = dict(\n      source = goals_sankey['situation'].append(goals_sankey_result['shotType']), # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = goals_sankey['shotType'].append(goals_sankey_result['result']),\n      value = goals_sankey['player_id'].append(goals_sankey_result['player_id'])\n  ))])\n\nfig.update_layout(title_text=\"All the shots from last season.\", font_size=10)\nfig.show()","1f8a26fc":"reel = plays[plays['match_id']==11643]\nreel = reel.sort_values('minute')\nreel['field_x'] = 7-plays['Y']*7\nreel['field_y'] = reel.apply(lambda row: row['X']*10 if row['h_a']=='h' else 10 - row['X']*10, axis = 1)\nreel['play_text'] = reel.apply(lambda row: str(row['minute']) + ' minute: ' + row['player'] + ' ' + row['result'], axis = 1)\n\nreel_trail =  px.scatter(reel, x='field_x', y='field_y', animation_frame=\"minute\",text = 'play_text',\n           size=\"xG\", color=\"result\", hover_name=\"player\", size_max=55, range_x=[0,11], range_y=[0,11],\n                        labels = 'result')\n\nreel_trail = create_full_field(reel_trail)\nreel_trail.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 2500\nreel_trail.update_traces(textposition='top center',textfont_color='black',textfont_size=15)\nreel_trail.update_layout(showlegend = False)\n\nreel_trail.show()","2ad971fa":"Sterling is also a shot monster and at times quite frivilous in front of goal with a lot of >0.5 xG shots wasted. He likes to be close to the goal and is positionally not very rigid. ","643de57f":"The density and spread of this heat map says it all. Salah leads the shots chart with a mind boggling 132 shots with a rather goal conversion. The size of the bubbles shows the xG of the shot and the legend to the right shows the outcome. As always you can click on the legend to filter the data. If you hover over the shots heat map, you can see other relevant data - the assist provider, shot type, xG number. \n\nAlso interestingly Salah takes his shots from all over the penalty box, often allowed by Firmino's (much underappreciated) hard work off the ball running into channels. The shot pattern is almost that of a out and out striker. None of Salah's 19 goals came from outside the box. ","93b0fe73":"The forwards are more homogenous in their player profile. Reclassifying Auba and Rashford will have a significant impact on their ouputs as they will now earn an extra point on their goals and another for a cleansheet. \n\nJiminez seems much more involved in the buildup play than any other forward and we can expect more assits from him if the other Wolves player step up their finishing game. ","3a409660":"Danny Ings is another player that I am optimistic about for the coming season. The sheer amount of high xG chances he gets are very tempting and will offer value even at the severely inflated price of 8.5. Another positive factor is the number of chances that he missed are fairly low compared to the chances that forced a save and that makes for a good read. ","692371dd":"xGChain records the involvment of all players leading up to a shot or attempt on goal (also includes goal scorers and assists)  \nxGBuildup removes the goals or assists and focusses only on build-up play. i.e you have to be involved in the buildup and not just deliver the assist or the goal. \n\nThe underlying stats paint a very different picture. Rashford slightly edges Vardy to the xGolden boot. Jiminez's contribution to the offensive play at Wolves is on display. Aubamayeng and Ings seem to be not as strong in terms of the underlying numbers. ","301e8d57":"The chart helps provide some insight into how each team scores goals. Note that own goals are not included in this and hence the total goals are lesser than the actual total goals reported as EPL stats. \n\nLooking at the chart from the base to the tip, City converts their freekicks at a much higher rate than anyone else. Sheffield and Burnley have barely scored any freekicks. Liverpool, and surprisingly West Ham score a lot from corners. Open play is obviously the key to score goals, but interestingly City scored 1 less goal from Open play than all non-penalty goals from Liverpool. Just shows their dominance on the ball. \n\n","95beecc2":"## Club stats","dbd6d9e7":"This chart is also interactive like the last one, and all others in the notebook. If you hover over the data you can see the actual value for points per game. You can click on the legend to select\/deselect types of opposition. The categories and clubs are listed here: \n\n\n| Code | Clubs   | Rationale | \n|------|------|------|\n|   top4  | LIV, MCI, CHE, MUN| Top 4| \n|   top6_cont  | LEI, WOL, ARS, TOT| Top 6 Contenders|\n|   midtable  | EVE, SOU, SHU, BUR |Top Half Contenders  |\n|   relg_fight  | NOR, AVL, WAT, BOU|Relegation Fighters|\n\n<br\/>\n\nWe can immediately notice the waning size as we go to the top right side of the chart. Clubs in the lower half barely picked up any points vs the top teams. Not a suprise as such. Between Liverpool and City, their performance against the top 4 and top 6 contenders is what set them apart. City were noticably weaker. \n\nIdeally we would expect a chart that has waning bubbles from the bottom to top, much like that a Man City and then the bubbles to grow smaller sequentially along the X axis. Any anomaly should tickle the fantasy sixth sense like Everton and Newcastle's miserable performance against the relegation figthers. The anomalies in this chart are the reasons why fixture difficulties should be considered with a pinch of salt. ","14630c30":"You can filter the chart by clicking or double clicking on the legend in the top right corner. \n\nDe Bruyne was the league leader in both assists and key passes. It makes sense given that he's truely a force on nature in terms of creativity. \n\nSalah leads the league in terms of shots but conversion seems to be low. We will dig into both these factors at a later stage. For now let's get comfortable with the look and feel of these charts. ","2a6520d4":"This is obviously dedicated to Mourinho and shows how teams defend - pressing\/highline vs defending deep. \n\nTeams that press intensivly or keep a high line often concede less passes per each defensive action. It is interesting to see that Southampton are on par with Liverpool, but have concede almost twice as many goals. It should not come as a surprise that they signed two defenders this transfer windown - Kyle Walkers Peters, and Mohammed Salisu - both fast high-pressing players which fit the mould of football Ralph Hasenhuttl played at Leipzig.\n\n","a4f81654":"It is worth-while to also look at the points conceded by a team. Often this stat is overlooked in favor of points scored. Hovering on the bar will show both points acquired and conceded. \n\nNotice that United conceded fewer points than Chelsea although they both finished on 66 points. Wolves outdid Spurs. These will be the potential candidates for improvement in the next season.","c610689e":"# EPL 2019 - 2020 analysis using OPTA stats\n\nThis notebook will aim to do a pro-level analysis of the previous EPL season (2019-2020). The data has been collected by me personally by web-scraping the OPTA stats for the 2019-20 season. Please leave your thoughts, comments, suggestions on this notebook. \n\n","e3d82bea":"## Understanding the data\n\n* \/epl-2019-2020-match-data\/match_infos_EPL_1920.csv: \n    * Summary level info for every EPL fixture\n* \/epl-2019-2020-match-data\/rosters_EPL_1920.csv: \n    * Player level data for every EPL fixture\n* \/epl-2019-2020-match-data\/shots_EPL_1920.csv: \n    * Play by play info for every EPL fixture\n* \/fantasy-epl-new-season-research-2020-2021\/FPL_2019_20_season_stats.jscsrc: \n    * FPL dump with player and team info \n\nThere is a fair bit of preprocessing involved before we get to the ideal stage. The steps required are categorizing EPL matches into FPL gameweeks, creating a mapping table that has corresponding ids for clubs in FPL database and the EPL database, a similar look up for the players in both database. I have retained that code in the workbook but feel free to dive directly into the analysis. ","c4e2230f":"We can see that the gap between Liverpool and City widened due to the lacklustre away performance. Away form is also an issue for Arsenal and the prime reason that it is not competing with the top 4. Southampton is the only club to have a better form on the road than at home. In the relegation battle, the gap between home and away points is also wide. \n\nThis is an interactive graph and you can hover on the chart to get the values. Even more cool is that you can click on the legend to filter by the element, in this case, the turf. ","90e79d5f":"A Sankey diagram shows the flow of values in between nodes. If you hover over the threads coming out from the Head node (middle bottom), you can read the values: 215 were blocked, 859 were missed, 347 were saved, 139 scored, 33 hit the woodwork and 4 were own goals. Comparing this to the missed shots from other parts of the body tells us that shots from the head are most likely to end up being missed. ","b82da4bd":"In terms of underlying stats, RobbO and TAA are very much in the same league. TAA does have an added benefit of Salah playing on his wing. \n\nWe can see that VVD's exploits this season are very sparingly representated in the underlying charts. Most of his goals came from headers and xG sees headed goals in a very dim view. \n\nDoherty depended on scoring goals to earn points, and it remains to be seen if that will translate to the Spurs style of play. \n\nNot going to waste too much time on Lundstram, since his transition to a midfielder and lack of regular game time. Let's get up close and personal with some of these players. ","025b6eac":"The earlier chart is further split into Home and Away charts. \n\n","276ecde4":"Without waxing lyrical about De Bruyne again, we can see that Mane, Salah are way ahead of Martial and Sterling both in terms of key passes and shots. Surprisingly Martial produced more assists than Sterling even though his key passes score was much lesser. This can be attributed to the FPL scoring system assigning assists to penalties won where Martial benefitted the most.  ","84c7246c":"Despite setting the Theatre of Dreams on fire after his arrival in the Winter transfer window last season, the underlying stats for Fernandes show a rather grim picture. Besides the many penalties (United won 10 of those last season, highest in the league), assists will have to be the main source of points for Bruno. A plethora of low xG in the long run will often lose out to a more clinical player.\n\nHis price tag is kinder than the other midfielders for a reason, and as long as United can keeping winning penalties and Fernandes can take precedence over Rashford, he should be in a good shape. The moment the magic fountain runs dry, it will be hard to justify his price over the cheaper Son, or even Dele Alli who in my opinion has all the elements to shine this season. Mourinho is a big fan of Alli. If you get a chance check out the documentary ([All or Nothing: Tottenham Hotspur ](https:\/\/www.imdb.com\/title\/tt11188556\/)) on Prime Video to get an insight into Mou's plan to revitalize Spurs.\n\nThis marks the end of our analysis for this notebook. Feel free to reach out to me with any thoughts \/ insights, and watch out for more content in the coming season. It would be great if you could upvote the datasets [EPL 2019 2020 match data](https:\/\/www.kaggle.com\/scientistdat\/epl-2019-2020-match-data) and [Fantasy EPL: New season research 2020 2021](https:\/\/www.kaggle.com\/scientistdat\/fantasy-epl-new-season-research-2020-2021) along with this notebook. \n\nAn couple of cool items are show below just for the sake of the coolness quotient and nothing else. ","cdd2550a":"To analyze the players, I am going to use a radar chart. This should be familiar to those who play FIFA. Also the charts are normalized by the highest value in the dataframe to put them in the same frame. This puts all the values on a scale of 0-1 with 1 being the highest in each category. \nTo illustrate this let's look at the top 2 players in the EPL and compare their performance. ","d393a796":"Mane is along in terms of being close to the goal, but he is a bit more rigidly limited to the left of the field. The volume of shots is much lesser, but he is better at converting low xG shots. This trait can be termed as luck or genius based on reader discretion. But from an FPL perspective it is not something that you can bank on. ","8fac72cc":"A similar chart for the midfielders and TAA shows the how eerily similar TAA and DeBruyne are in their contributions. We can also see that Salah and Sterling both out do Mane and Martial by some distance. \n\nIt would also be good to look at a similar chart for defenders to understand their attacking contributions. \n","b85f4696":"After adding the next three players, we can see the differences in forwards and midfielders and TAA. \n\nBefore we dive into a positional analysis, double-click on the legend for De Bruyne and TAA. We can see that TAA is a mini De Bruyne with the added bonus of cleansheets which is not captured here. This feature of his gameplay makes him absolutely special and a fantastic prospect in terms of FPL. \n\nAlready there are three distinct categories of players, the playmaker (no. 10), the poacher (no. 9) and the trequartista (no.7) perfected by Salah and Mane.\n\nLet's look at a few players by position in FPL and see where they fall. \n","9c2c02c2":"Another pet project that I am working with is a highlight reel of all the shots in the match in the match. ","3ec51294":"## Player analysis\n\n","63cdb968":"De Bruyne looks more a midfielder than the ones above. With 4 goals from outside the box, and all but 3 goals with an xG of less than 15%, De Bruyne has a penchant for making a mockery of the xG metric. His laser precision is not accounted for in the xG model. Slighly skewed towards the right, to exploit the famous Guardiolan half-spaces, he has tremendous potential to excel for another season and is in the prime of his career. ","67bf499d":"Aubamayeng's heat map matches that of an out-and-out striker as he likes to get close in the box which is also where he is the most clicnical. A lot of shots from range from the left side of the pitch are characteristic of his high energy displays at Arsenal. "}}