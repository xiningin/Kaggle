{"cell_type":{"c9b0fcd9":"code","80fe80a8":"code","a8beefe6":"code","9ad82998":"code","eeb46d0e":"code","3dcf987f":"code","900f8427":"code","7052bc44":"code","4a3963de":"code","24a8792d":"code","2e10afdf":"code","c5addbd8":"code","295d866b":"code","9f1f7f55":"code","27b9ed17":"code","fa0c0603":"code","bb59740d":"code","fed80019":"code","305754be":"code","58056cac":"code","f8be8c10":"code","5ea212ba":"code","af3fec56":"code","2728fbbb":"code","df417435":"code","309dc2f3":"code","4c6adc81":"code","65caa935":"code","7bd4e456":"code","12ae0782":"code","7db89d31":"code","5bcc6dd3":"code","b37bc684":"markdown","7ed2ff65":"markdown","2ca20d12":"markdown","02689dd1":"markdown","68222e07":"markdown","494e3b23":"markdown","ce6301b4":"markdown","6b09c7dd":"markdown","b6a2579b":"markdown","70224bc0":"markdown","744e7e16":"markdown","97a181d8":"markdown","4c387d64":"markdown","7cfc519d":"markdown","1eda2b36":"markdown","efea28af":"markdown","344be069":"markdown","abe9b77e":"markdown","0a78c9ef":"markdown","425bf93e":"markdown","fe425993":"markdown","8f1d1542":"markdown","1baa09a8":"markdown","0b0e4a48":"markdown","9a1e387d":"markdown","773c04b1":"markdown","69d2dc20":"markdown","a233688f":"markdown","29fe6ec3":"markdown"},"source":{"c9b0fcd9":"import numpy as np\nimport pandas as pd\n\n# What do we say to python warnings? NOT TODAY\nimport warnings\nwarnings.filterwarnings(\"ignore\")","80fe80a8":"dtypes_ts = {\"space_id\":\"category\",\n\"building_name\":\"str\",\n\"air_vel\":\"category\",\n\"body_presence\":\"bool\",\n\"change\":\"category\",\n\"clothing\":\"category\",\n\"comfort\":\"category\",\n\"indoor\/outdoor\":\"category\",\n\"met\":\"category\",\n\"thermal\":\"category\",\n\"user_id\":\"str\"}\n\ndtypes_md={\"user_id\":\"str\",\n\"yob\":\"int\",\n\"sex\":\"category\",\n\"height\":\"int\",\n\"weight\":\"float\",\n\"shoulder_circumference\":\"int\",\n\"years_here\":\"int\",\n\"satisfaction_weather\":\"category\",\n\"sweating\":\"category\",\n\"outdoor_hr_weekday\":\"int\",\n\"outdoor_hr_weekend\":\"int\",\n\"hsps\":\"float\",\n\"swls\":\"int\",\n\"extraversion\":\"float\",\n\"agreeableness\":\"float\",\n\"conscientiousness\":\"float\",\n\"emotional_stability\":\"float\",\n\"openness_to_experiences\":\"float\"}","a8beefe6":"ts = pd.read_csv(\"\/kaggle\/input\/longitudinal-personal-thermal-comfort-preferences\/enth_tabular_merged.csv\", dtype=dtypes_ts)\nmd = pd.read_csv(\"\/kaggle\/input\/longitudinal-personal-thermal-comfort-preferences\/enth_surveys_renamed.csv\", dtype=dtypes_md)","9ad82998":"# Thermal\nts.thermal.cat.rename_categories({'9.0': 'Warmer', '10.0': 'No Change', '11.0': 'Cooler'}, inplace=True)\nts.thermal.cat.reorder_categories([\"Cooler\",\"No Change\",\"Warmer\"], inplace=True)\n\n# Clothing\nts.clothing.cat.rename_categories({'8.0':'Very Light','9.0': 'Light', '10.0': 'Medium', '11.0': 'Heavy'}, inplace=True)\nts.clothing.cat.reorder_categories([\"Very Light\",\"Light\",\"Medium\",\"Heavy\"], inplace=True)\n\n# Air vel\nts.air_vel.cat.rename_categories({ \"10.0\": \"Not Perceived\", \"11.0\": \"Perceived\"}, inplace=True)\nts.air_vel.cat.reorder_categories([\"Not Perceived\",\"Perceived\"], inplace=True)\n\n# Change\nts.change.cat.rename_categories({\"11.0\": \"Yes Change\", \"10.0\": \"No Change\"}, inplace=True)\nts.change.cat.reorder_categories([\"Yes Change\",\"No Change\"], inplace=True)\n\n# indoor outdoor\nts[\"indoor\/outdoor\"].cat.rename_categories({'9.0': \"Outdoor\", \"11.0\": \"Indoor\"}, inplace=True)\nts[\"indoor\/outdoor\"].cat.reorder_categories([\"Indoor\",\"Outdoor\"], inplace=True)\n\n# met\nts.met.cat.rename_categories({\"8.0\": \"resting\", \"9.0\": \"sitting\", \"10.0\": \"standing\", \"11.0\": \"exercising\"}, inplace=True)\nts.met.cat.reorder_categories([\"resting\",\"sitting\",\"standing\", \"exercising\"], inplace=True)","eeb46d0e":"df = pd.merge(ts, md, how=\"left\", on=\"user_id\")","3dcf987f":"df.info()","900f8427":"df.head()","7052bc44":"import folium","4a3963de":"# Base map\nmy_map = folium.Map(location=[1.296825, 103.77047], zoom_start=10)\nmy_map","24a8792d":"my_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)\nmy_map","2e10afdf":"my_map = folium.Map(width=500,height=500,location=[1.296825, 103.77047], zoom_start=20)\nmy_map","c5addbd8":"df = df[(df.indoor_latitude.isna()==False) & (df.indoor_longitude.isna()==False)]","295d866b":"base_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)","9f1f7f55":"marker = folium.Marker(location=[1.296825, 103.77047])","27b9ed17":"marker.add_to(base_map)","fa0c0603":"base_map","bb59740d":"# Create base map\nbase_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)\n\n# Add marker\nmarker = folium.CircleMarker(location=[1.296825, 103.77047], radius=20)\n\n# Add it to map\nmarker.add_to(base_map)\n\n# Plot\nbase_map","fed80019":"base_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)\n\n# \"i\" is the index, \"row\" is a series\nfor i, row in df.iterrows():\n    \n    # Data for the points\n    lat = row.indoor_latitude\n    long = row.indoor_longitude\n    user_id = row.user_id\n    \n    # The points\n    marker = folium.CircleMarker(\n        location=[lat, long],\n        radius=2, # small radius so they look lile points\n        popup=user_id) # a pop up when you click the point\n    \n    # Add it to the base map\n    marker.add_to(base_map)","305754be":"base_map","58056cac":"from matplotlib.patches import Rectangle\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n\ndef plot_colortable(colors, title, sort_colors=True, emptycols=0):\n\n    cell_width = 212\n    cell_height = 22\n    swatch_width = 48\n    margin = 12\n    topmargin = 40\n\n    # Sort colors by hue, saturation, value and name.\n    if sort_colors is True:\n        by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(color))),\n                         name)\n                        for name, color in colors.items())\n        names = [name for hsv, name in by_hsv]\n    else:\n        names = list(colors)\n\n    n = len(names)\n    ncols = 4 - emptycols\n    nrows = n \/\/ ncols + int(n % ncols > 0)\n\n    width = cell_width * 4 + 2 * margin\n    height = cell_height * nrows + margin + topmargin\n    dpi = 72\n\n    fig, ax = plt.subplots(figsize=(width \/ dpi, height \/ dpi), dpi=dpi)\n    fig.subplots_adjust(margin\/width, margin\/height,\n                        (width-margin)\/width, (height-topmargin)\/height)\n    ax.set_xlim(0, cell_width * 4)\n    ax.set_ylim(cell_height * (nrows-0.5), -cell_height\/2.)\n    ax.yaxis.set_visible(False)\n    ax.xaxis.set_visible(False)\n    ax.set_axis_off()\n    ax.set_title(title, fontsize=24, loc=\"left\", pad=10)\n\n    for i, name in enumerate(names):\n        row = i % nrows\n        col = i \/\/ nrows\n        y = row * cell_height\n\n        swatch_start_x = cell_width * col\n        text_pos_x = cell_width * col + swatch_width + 7\n\n        ax.text(text_pos_x, y, name, fontsize=14,\n                horizontalalignment='left',\n                verticalalignment='center')\n\n        ax.add_patch(\n            Rectangle(xy=(swatch_start_x, y-9), width=swatch_width,\n                      height=18, facecolor=colors[name], edgecolor='0.7')\n        )\n\n    return fig\n\nplot_colortable(mcolors.BASE_COLORS, \"Base Colors\",\n                sort_colors=False, emptycols=1)\nplot_colortable(mcolors.TABLEAU_COLORS, \"Tableau Palette\",\n                sort_colors=False, emptycols=2)\n\nplot_colortable(mcolors.CSS4_COLORS, \"CSS Colors\")\n\n# Optionally plot the XKCD colors (Caution: will produce large figure)\n# xkcd_fig = plot_colortable(mcolors.XKCD_COLORS, \"XKCD Colors\")\n# xkcd_fig.savefig(\"XKCD_Colors.png\")\n\nplt.show()","f8be8c10":"# List of selected colors, you can use the ones you want\ncolors = [\"firebrick\", \"sandybrown\", \"gold\", \"yellowgreen\", \"seagreen\", \"deepskyblue\", \"rebeccapurple\"]","5ea212ba":"def color_by_thermal(thermal):\n    if thermal == \"Cooler\":\n        return colors[5]\n    if thermal == \"No Change\":\n        return colors[2]\n    if thermal == \"Warmer\":\n        return colors[0]","af3fec56":"base_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)\n\nfor i, row in df.iterrows():\n    \n    # Data for the points\n    lat = row.indoor_latitude\n    long = row.indoor_longitude\n    thermal = row.thermal\n    user_id = row.user_id\n    \n    # The points\n    marker = folium.CircleMarker(\n        location=[lat, long],\n        radius=2,\n        color= color_by_thermal(thermal), # this is the function we wrote\n        popup=user_id)\n    \n    # Add it to the base map\n    marker.add_to(base_map)\n\nbase_map","2728fbbb":"sitting = folium.FeatureGroup(name='Sitting')\nstanding = folium.FeatureGroup(name='Standing')\nresting = folium.FeatureGroup(name='Resting')\nexercising = folium.FeatureGroup(name='Exercising')","df417435":"def color_by_metabolism(metabolism):\n    if metabolism == \"sitting\":\n        return colors[0]\n    if metabolism == \"standing\":\n        return colors[1]\n    if metabolism == \"resting\":\n        return colors[2]\n    if metabolism == \"exercising\":\n        return colors[3]","309dc2f3":"df = df[df.met.isna()==False]","4c6adc81":"# Create the base map\nbase_map = folium.Map(location=[1.296825, 103.77047], zoom_start=20)\n\nfor i, row in df.iterrows():\n    \n    # Data for the points\n    lat = row.indoor_latitude\n    long = row.indoor_longitude\n    met = row.met\n    user_id = row.user_id\n       \n    # The points\n    marker = folium.CircleMarker(\n        location=[lat, long],\n        radius=2,\n        color= color_by_metabolism(met), #our function\n        popup=user_id)\n\n    # Add them to each feature group\n    if met == \"sitting\":\n        marker.add_to(sitting)\n    if met == \"standing\":\n        marker.add_to(standing)\n    if met == \"resting\":\n        marker.add_to(resting)\n    if met == \"exercising\":\n        marker.add_to(exercising)\n    \n    # As the FeatureGroup have the same names as the categories, instead of those four \"if\"\n    # you could use only one line: marker.add_to(eval(met))\n    \n# Add feature group to map\nbase_map.add_child(sitting)\nbase_map.add_child(standing)\nbase_map.add_child(resting)\nbase_map.add_child(exercising)\n\n# turn on layer control\nbase_map.add_child(folium.map.LayerControl())\n\n# Check it put\nbase_map","65caa935":"from folium.plugins import MarkerCluster","7bd4e456":"# Create the base map\nbase_map = folium.Map(location=[1.296825, 103.77047], zoom_start=10)\n\n# Create the clusters\nmc = MarkerCluster()\n\n# And iterate as before\nfor i, row in df.iterrows():\n    \n    # Data for the points\n    lat = row.indoor_latitude\n    long = row.indoor_longitude\n    thermal = row.thermal\n    user_id = row.user_id\n    \n    # The points\n    marker = folium.CircleMarker(\n        location=[lat, long],\n        radius=2,\n        color= color_by_thermal(thermal),\n        popup=user_id)\n    \n    #Add the marker to the cluster\n    mc.add_child(marker)\n    \n# Add the cluster to the base map\nbase_map.add_child(mc)\n\n# Check it out\nbase_map","12ae0782":"from folium.plugins import HeatMap","7db89d31":"heat_data = [[row['indoor_latitude'],row['indoor_longitude']] for index, row in df.iterrows()]\nheat_data[:5]","5bcc6dd3":"#Create the base map\nbase_map = folium.Map(location=[1.296825, 103.77047], zoom_start=15)\n\n# Create the heatmap\nhm = HeatMap(heat_data)\n\n# Add it to the base map\nhm.add_to(base_map)\n\n# Check it out\nbase_map","b37bc684":"And finally, let's merge both datasets, the time series with the users metadata. This way we have all in only one data frame to plot the feature we want.","7ed2ff65":"And you can resize your map:","2ca20d12":"And with the layers button on top-right you can turn on\/off the layer you want.","02689dd1":"The code is similar as before, but whe are adding the parameter `color` to the marker:","68222e07":"And finally, you add it to your base map:","494e3b23":"Using *iterrows* is pretty easy. And for plotting is super easy:","ce6301b4":"And here it is:","6b09c7dd":"For this plot you will need all your points (latitude, longitude) as a list of lists. Like this:","b6a2579b":"# *Enth* geospatial exploratory data analysis\nIn this notebook we are going to explore the *Enth* metadata from the geospatial point of view. Basic python knowledge is needed and being familiar with pandas and data visualization will help a lot. I suggest to check these courses first:\n\n- [Python](https:\/\/www.kaggle.com\/learn\/python)\n- [Pandas](https:\/\/www.kaggle.com\/learn\/pandas)\n- [Data visualization](https:\/\/www.kaggle.com\/learn\/data-visualization)\n\nWe are going to use [Folium](http:\/\/python-visualization.github.io\/folium\/), a library to create interactive maps. [This class](https:\/\/www.kaggle.com\/alexisbcook\/interactive-maps) from the [Geospatial Analysis Course](https:\/\/www.kaggle.com\/learn\/geospatial-analysis) is a great introduction to this library.\n\n# Content\n\n- [Load data](#Load-data)\n- [Creating a base map with folium library](#Creating-a-base-map-with-folium-library)\n- [Adding data to map](#Adding-data-to-map)\n  - [Points](#Points)\n  - [Clusters](#Clusters)\n  - [Layers](#Layers)\n  - [Heatmap](#Heatmap)","70224bc0":"## Clusters\nAnother pretty easy option is to cluster all the points based on proximity. As soon as you zomm they split and locate nearer to it's location.","744e7e16":"Now is time to add all the points we have. We are not going to write a line for each marker, that's what for loops are for. We are going to use pandas' method [iterrows](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.iterrows.html) that allows you to loop over each of the row of your dataframe and access easily to each of the values.","97a181d8":"Second, you have to create a *Marker*:","4c387d64":"Let's ignore the missing values in `met`:","7cfc519d":"And a simple function for the colors:","1eda2b36":"Ok, but what if we want to color the points by any of the many features we have? we need to write a function to assign the colors. These are the available colors (ignore the code):","efea28af":"You have to set a `location`, which is the point on which the map will be centered, and a `zoom_start`, which is how zoomed in will be. Check it out:","344be069":"And let's rename and reorder the categories with the methods [*rename_categories*](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.Series.cat.rename_categories.html) and [*reorder_categories*](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.CategoricalIndex.reorder_categories.html). This is just to show the labels (and not the numbers) in the plots with the order we want.","abe9b77e":"# Creating a base map with *folium* library\nFirst step to create an interactive map in *Folium* is to create the base map: this is a detailed world map that you can zoom in and out. On top of that you can plot your data.","0a78c9ef":"## Layers\nLooks nice but there are a lot of points together and the zoome is maxed, kind of difficult to visualize. Fortunately, *Folium* has an option to plot by layers. Let's try to plot our data colored and layered by the feature `met`. We have to create the layers we want first with the method *FeatureGroup*:","425bf93e":"And a simple function will do the work:","fe425993":"Let's center it on the campus where the data was collected:","8f1d1542":"# Content","1baa09a8":"# Adding data to map\nOk, time to add our data to the base map. Firs't thing to keep in mind is that geospatial data can not contains missing values. In our case, these are the columns `indoor_latitude` and `indoor_longitude`. Let's filter out the missing values:","0b0e4a48":"# Load data\nAs you probably have seen in the data set description, there is also a [GitHub a repository](https:\/\/github.com\/buds-lab\/longitudinal-personal-thermal-comfort). There you can find a table with the data type of each column.\n\nHere we are creating dictionaries with some of the columns and the correct data type. In general when reading a file, category features are not recognized as categorical data (if you are lucky you'll get an integer). But you can pass a parameter when reading the file with those data types. This step is not mandatory, you can always convert the data types after reading the file (if is needed). ","9a1e387d":"## Points\nLet's add only one point to understand how it works. First step is to create the base map:","773c04b1":"## Heatmap\nFinally, heatmaps is another possibility with this librarie. This heatmap is based on the number of points (will colored reginos by densitiy) and will interactively change when you zoom.","69d2dc20":"Try clicking on the points to see the pop up","a233688f":"# Import libraries","29fe6ec3":"You can also use a *CircleMarkle*, where you have to specify the radius:"}}