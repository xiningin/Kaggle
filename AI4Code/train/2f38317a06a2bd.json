{"cell_type":{"7004fae2":"code","9556edaf":"code","dc3033a3":"code","b6111c55":"code","62d23f5c":"code","fa2c537b":"code","4fa069c7":"code","b813bb28":"code","a6ba1fd9":"code","735e35b2":"code","a3e93692":"code","9c993ad6":"code","87dd98d2":"markdown","fc4905eb":"markdown","92a5cbbe":"markdown","c4c5abcd":"markdown","eb71f2c8":"markdown"},"source":{"7004fae2":"\nimport pandas as pd\nimport numpy as np\nimport dask.dataframe as dd\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn import preprocessing, metrics\nimport gc\nimport joblib\nimport warnings\nwarnings.filterwarnings('ignore')","9556edaf":"INPUT_DIR_PATH = '..\/input\/m5-forecasting-accuracy\/'","dc3033a3":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics: \n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\n\ndef read_data():\n    sell_prices_df = pd.read_csv(INPUT_DIR_PATH + 'sell_prices.csv')\n    sell_prices_df = reduce_mem_usage(sell_prices_df)\n    print('Sell prices has {} rows and {} columns'.format(sell_prices_df.shape[0], sell_prices_df.shape[1]))\n\n    calendar_df = pd.read_csv(INPUT_DIR_PATH + 'calendar.csv')\n    calendar_df = reduce_mem_usage(calendar_df)\n    print('Calendar has {} rows and {} columns'.format(calendar_df.shape[0], calendar_df.shape[1]))\n\n    sales_train_validation_df = pd.read_csv(INPUT_DIR_PATH + 'sales_train_validation.csv')\n    print('Sales train validation has {} rows and {} columns'.format(sales_train_validation_df.shape[0], sales_train_validation_df.shape[1]))\n\n    submission_df = pd.read_csv(INPUT_DIR_PATH + 'sample_submission.csv')\n    return sell_prices_df, calendar_df, sales_train_validation_df, submission_df\n    ","b6111c55":"sell_prices_df, calendar_df, sales_train_validation_df, submission_df = read_data()","62d23f5c":"NUM_ITEMS = sales_train_validation_df.shape[0]  # 30490\nDAYS_PRED = 28\nnrows = 365 * 2 * NUM_ITEMS","fa2c537b":"def encode_categorical(df, cols):\n    for col in cols:\n        # Leave NaN as it is.\n        le = preprocessing.LabelEncoder()\n        not_null = df[col][df[col].notnull()]\n        df[col] = pd.Series(le.fit_transform(not_null), index=not_null.index)\n\n    return df\n\n\ncalendar_df = encode_categorical(calendar_df, [\"event_name_1\", \"event_type_1\", \"event_name_2\", \"event_type_2\"]).pipe(reduce_mem_usage)\nsales_train_validation_df = encode_categorical(sales_train_validation_df, [\"item_id\", \"dept_id\", \"cat_id\", \"store_id\", \"state_id\"]).pipe(reduce_mem_usage)\nsell_prices_df = encode_categorical(sell_prices_df, [\"item_id\", \"store_id\"]).pipe(reduce_mem_usage)","4fa069c7":"# function to read the data and merge it\n\ndef melt_and_merge(calendar, sell_prices, sales_train_validation, submission, nrows = 55000000, merge = False):\n    \n    # melt sales data, get it ready for training\n    sales_train_validation = pd.melt(sales_train_validation, id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name = 'day', value_name = 'demand')\n    print('Melted sales train validation has {} rows and {} columns'.format(sales_train_validation.shape[0], sales_train_validation.shape[1]))\n    sales_train_validation = reduce_mem_usage(sales_train_validation)\n    \n    sales_train_validation = sales_train_validation.iloc[-nrows:,:]\n    \n    \n    # seperate test dataframes\n    test1_rows = [row for row in submission['id'] if 'validation' in row]\n    test2_rows = [row for row in submission['id'] if 'evaluation' in row]\n    test1 = submission[submission['id'].isin(test1_rows)]\n    test2 = submission[submission['id'].isin(test2_rows)]\n    \n    # change column names\n    test1.columns = ['id', 'd_1914', 'd_1915', 'd_1916', 'd_1917', 'd_1918', 'd_1919', 'd_1920', 'd_1921', 'd_1922', 'd_1923', 'd_1924', 'd_1925', 'd_1926', 'd_1927', 'd_1928', 'd_1929', 'd_1930', 'd_1931', \n                      'd_1932', 'd_1933', 'd_1934', 'd_1935', 'd_1936', 'd_1937', 'd_1938', 'd_1939', 'd_1940', 'd_1941']\n    test2.columns = ['id', 'd_1942', 'd_1943', 'd_1944', 'd_1945', 'd_1946', 'd_1947', 'd_1948', 'd_1949', 'd_1950', 'd_1951', 'd_1952', 'd_1953', 'd_1954', 'd_1955', 'd_1956', 'd_1957', 'd_1958', 'd_1959', \n                      'd_1960', 'd_1961', 'd_1962', 'd_1963', 'd_1964', 'd_1965', 'd_1966', 'd_1967', 'd_1968', 'd_1969']\n    \n    # get product table\n    product = sales_train_validation[['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id']].drop_duplicates()\n    \n    # merge with product table\n    test2['id'] = test2['id'].str.replace('_evaluation','_validation')\n    test1 = test1.merge(product, how = 'left', on = 'id')\n    test2 = test2.merge(product, how = 'left', on = 'id')\n    test2['id'] = test2['id'].str.replace('_validation','_evaluation')\n    \n    # \n    test1 = pd.melt(test1, id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name = 'day', value_name = 'demand')\n    test2 = pd.melt(test2, id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name = 'day', value_name = 'demand')\n    \n    sales_train_validation['part'] = 'train'\n    test1['part'] = 'test1'\n    test2['part'] = 'test2'\n    \n    data = pd.concat([sales_train_validation, test1, test2], axis = 0)\n    \n    del sales_train_validation, test1, test2\n    \n    print(data.shape)\n    \n    # get only a sample for fst training\n#     data = data.loc[nrows:]\n    \n    # drop some calendar features\n    calendar.drop(['weekday', 'wday', 'month', 'year'], inplace = True, axis = 1)\n    \n    # delete test2 for now\n    data = data[data['part'] != 'test2']\n    \n    if merge:\n        # notebook crash with the entire dataset (maybee use tensorflow, dask, pyspark xD)\n        data = pd.merge(data, calendar, how = 'left', left_on = ['day'], right_on = ['d'])\n        data.drop(['d', 'day'], inplace = True, axis = 1)\n        # get the sell price data (this feature should be very important)\n        data = data.merge(sell_prices, on = ['store_id', 'item_id', 'wm_yr_wk'], how = 'left')\n        print('Our final dataset to train has {} rows and {} columns'.format(data.shape[0], data.shape[1]))\n    else: \n        pass\n    \n    gc.collect()\n    \n    return data","b813bb28":"# nrows = 365 * 2 * NUM_ITEMS\n\nnrows = 27500000\ndata = melt_and_merge(calendar_df, sell_prices_df, sales_train_validation_df, submission_df, nrows = nrows, merge = True)\n# nrows = 27500000","a6ba1fd9":"def transform(data):\n    nan_features = ['event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n    for feature in nan_features:\n        data[feature].fillna('unknown', inplace = True)\n        \n    cat = ['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id', 'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n    for feature in cat:\n        encoder = preprocessing.LabelEncoder()\n        data[feature] = encoder.fit_transform(data[feature])\n    return data\n\n\ndef simple_fe(data):\n    \n    # rolling demand features\n    \n    for val in [28, 29, 30]:\n        data[f\"shift_t{val}\"] = data.groupby([\"id\"])[\"demand\"].transform(lambda x: x.shift(val))\n    for val in [7, 30, 60, 90, 180]:\n        data[f\"rolling_std_t{val}\"] = data.groupby([\"id\"])[\"demand\"].transform(lambda x: x.shift(28).rolling(val).std())\n    for val in [7, 30, 60, 90, 180]:\n        data[f\"rolling_mean_t{val}\"] = data.groupby([\"id\"])[\"demand\"].transform(lambda x: x.shift(28).rolling(val).mean())\n\n    data[\"rolling_skew_t30\"] = data.groupby([\"id\"])[\"demand\"].transform( lambda x: x.shift(28).rolling(30).skew())\n    data[\"rolling_kurt_t30\"] = data.groupby([\"id\"])[\"demand\"].transform(lambda x: x.shift(28).rolling(30).kurt())\n    \n    # price features\n    data['lag_price_t1'] = data.groupby(['id'])['sell_price'].transform(lambda x: x.shift(1))\n    data['price_change_t1'] = (data['lag_price_t1'] - data['sell_price']) \/ (data['lag_price_t1'])\n    data['rolling_price_max_t365'] = data.groupby(['id'])['sell_price'].transform(lambda x: x.shift(1).rolling(365).max())\n    data['price_change_t365'] = (data['rolling_price_max_t365'] - data['sell_price']) \/ (data['rolling_price_max_t365'])\n    data['rolling_price_std_t7'] = data.groupby(['id'])['sell_price'].transform(lambda x: x.rolling(7).std())\n    data['rolling_price_std_t30'] = data.groupby(['id'])['sell_price'].transform(lambda x: x.rolling(30).std())\n    data.drop(['rolling_price_max_t365', 'lag_price_t1'], inplace = True, axis = 1)\n    \n#     # time features\n    data['date'] = pd.to_datetime(data['date'])\n    attrs = [\"year\", \"quarter\", \"month\", \"week\", \"day\", \"dayofweek\", \"is_year_end\", \"is_year_start\", \"is_quarter_end\", \\\n        \"is_quarter_start\", \"is_month_end\",\"is_month_start\",\n    ]\n\n    for attr in attrs:\n        dtype = np.int16 if attr == \"year\" else np.int8\n        data[attr] = getattr(data['date'].dt, attr).astype(dtype)\n    data[\"is_weekend\"] = data[\"dayofweek\"].isin([5, 6]).astype(np.int8)\n    \n    return data\n\n","735e35b2":"features = [\n    \"item_id\", \"dept_id\", \"cat_id\", \"store_id\", \"state_id\", \"event_name_1\", \"event_type_1\", \"snap_CA\", \"snap_TX\", \\\n    \"snap_WI\", \"sell_price\", \\\n    # demand features.\n    \"shift_t28\", \"rolling_std_t7\", \"rolling_std_t30\", \"rolling_std_t90\", \"rolling_std_t180\", \\\n    \"rolling_mean_t7\", \"rolling_mean_t30\", \"rolling_mean_t60\", \\\n    # price features\n    \"price_change_t1\", \"price_change_t365\", \"rolling_price_std_t7\",\n    # time features.\n    \"year\", \"month\", \"dayofweek\",\n]\n\n\n(\"wday\", \"month\", \"year\", \n       \"event_name_1\", \"event_type_1\", #\"event_name_2\", \"event_type_2\", \n       \"snap_CA\", \"snap_TX\", \"snap_WI\",\n       \"sell_price\", \"sell_price_rel_diff\", \"sell_price_cumrel\", \"sell_price_roll_sd7\",\n       \"lag_t28\", \"rolling_mean_t7\", \"rolling_mean_t30\", \"rolling_mean_t60\", \n       \"rolling_mean_t90\", \"rolling_mean_t180\", \"rolling_sd_t7\", \"rolling_sd_t30\",\n       \"item_id\", \"dept_id\", \"cat_id\", \"store_id\", \"state_id\")","a3e93692":"def run_lgb(data):\n    \n    # going to evaluate with the last 28 days\n    x_train = data[data['date'] <= '2016-03-27']\n    y_train = x_train['demand']\n    x_val = data[(data['date'] > '2016-03-27') & (data['date'] <= '2016-04-24')]\n    y_val = x_val['demand']\n    test = data[(data['date'] > '2016-04-24')]\n    del data\n    gc.collect()\n    \n    params = {\n#         'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'poisson',\n        'n_jobs': -1,\n        'seed': 20,\n        'learning_rate': 0.1,\n        'alpha': 0.1,\n        'lambda': 0.1,\n        'bagging_fraction': 0.66,\n        'bagging_freq': 2, \n        'colsample_bytree': 0.77}\n\n    train_set = lgb.Dataset(x_train[features], y_train)\n    val_set = lgb.Dataset(x_val[features], y_val)\n    \n    del x_train, y_train\n    \n    \n    model = lgb.train(params, train_set, num_boost_round = 2000, early_stopping_rounds = 200, valid_sets = [train_set, val_set], verbose_eval = 100)\n    joblib.dump(model, 'lgbm_0.sav')\n    \n    val_pred = model.predict(x_val[features], num_iteration=model.best_iteration)\n    val_score = np.sqrt(metrics.mean_squared_error(val_pred, y_val))\n    print(f'Our val rmse score is {val_score}')\n    y_pred = model.predict(test[features], num_iteration=model.best_iteration)\n    test['demand'] = y_pred\n    return test\n\n\ndef predict(test, submission):\n    predictions = test[['id', 'date', 'demand']]\n    predictions = pd.pivot(predictions, index = 'id', columns = 'date', values = 'demand').reset_index()\n    predictions.columns = ['id'] + ['F' + str(i + 1) for i in range(28)]\n\n    evaluation_rows = [row for row in submission['id'] if 'evaluation' in row] \n    evaluation = submission[submission['id'].isin(evaluation_rows)]\n\n    validation = submission[['id']].merge(predictions, on = 'id')\n    final = pd.concat([validation, evaluation])\n    final.to_csv('submission.csv', index = False)\n    \n\n\ndef transform_train_and_eval(data):\n#     data = transform(data)\n    data = simple_fe(data)\n    # reduce memory for new features so we can train\n    data = reduce_mem_usage(data)\n    test = run_lgb(data)\n    predict(test, submission_df)\n    \n","9c993ad6":"transform_train_and_eval(data)","87dd98d2":"For EDA please visit https:\/\/www.kaggle.com\/rohitsingh9990\/m5-forecasting-eda-feature-engineering","fc4905eb":"## 2. Merging dataframes","92a5cbbe":"version3: LB: 0.60869\n\nversion5: LB: ??","c4c5abcd":"## 1. Loading Data","eb71f2c8":"### Help taken from these kernels\n\n1. https:\/\/www.kaggle.com\/ragnar123\/very-fst-model\n\n\n\n> Note: If you like my work, please, upvote \u263a"}}