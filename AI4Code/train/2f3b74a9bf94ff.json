{"cell_type":{"56a9db5a":"code","14f65949":"code","c4487cbd":"code","4b6501d7":"code","6d059d6c":"code","4f531656":"code","1804da36":"code","81eafafb":"code","92b5f278":"code","dfa5350d":"code","f8a68edc":"code","aba9b389":"code","23c91ff3":"code","e12a4d7f":"code","da331946":"code","4403cc57":"code","db51943f":"code","c25c9c6f":"code","c23748f1":"code","11a334b7":"code","81e3f359":"code","f0c4ff9e":"code","d1f665f4":"code","dfd4b0c7":"code","306f9b91":"code","ab5639ec":"code","1a87cd77":"code","e642eb92":"code","cf442b9a":"code","4ac4f3b3":"code","89607fbc":"code","e084320b":"code","eb74b08a":"markdown"},"source":{"56a9db5a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","14f65949":"train_dataset = pd.read_csv('..\/input\/train.csv')","c4487cbd":"train_dataset.head(10)","4b6501d7":"scalar_coupling_contributions = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')","6d059d6c":"train_dataset = pd.concat([train_dataset, scalar_coupling_contributions[['fc', 'sd', 'pso', 'dso']]], axis=1)","4f531656":"train_dataset.head(10)","1804da36":"structures = pd.read_csv('..\/input\/structures.csv')","81eafafb":"train_dataset_0 = train_dataset.merge(structures, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_1'])\ntrain_dataset = train_dataset_0.merge(structures, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_0'], \n                                     suffixes=('_atom_1', '_atom_0'))","92b5f278":"train_dataset.drop(['atom_index_atom_0',  'atom_index_atom_1'], axis=1, inplace=True)","dfa5350d":"train_arranged_columns = ['id', 'molecule_name', 'type',\n           'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0', \n           'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1',\n           'fc', 'sd', 'pso', 'dso', 'scalar_coupling_constant']","f8a68edc":"train_dataset = train_dataset[train_arranged_columns]\ntrain_dataset.head(20)","aba9b389":"test_dataset = pd.read_csv('..\/input\/test.csv')","23c91ff3":"test_dataset_0 = test_dataset.merge(structures, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_1'])\ntest_dataset = test_dataset_0.merge(structures, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_0'], \n                                     suffixes=('_atom_1', '_atom_0'))\n\ntest_dataset.drop(['atom_index_atom_0',  'atom_index_atom_1'], axis=1, inplace=True)","e12a4d7f":"test_arranged_columns = ['id', 'molecule_name', 'type',\n           'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0', \n           'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1']","da331946":"test_dataset = test_dataset[test_arranged_columns]\ntest_dataset.head(20)","4403cc57":"magnetic_shielding_tensors = pd.read_csv('..\/input\/magnetic_shielding_tensors.csv')","db51943f":"train_dataset_0 = train_dataset.merge(magnetic_shielding_tensors, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_1'])\ntrain_dataset = train_dataset_0.merge(magnetic_shielding_tensors, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_0'], \n                                     suffixes=('_atom_1', '_atom_0'))\ntrain_dataset.drop(['atom_index_atom_0',  'atom_index_atom_1'], axis=1, inplace=True)","c25c9c6f":"train_arranged_columns = ['id', 'molecule_name', 'type', \n                          'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0',  \n                          'XX_atom_0', 'YX_atom_0', 'ZX_atom_0', 'XY_atom_0', 'YY_atom_0', 'ZY_atom_0', 'XZ_atom_0', 'YZ_atom_0', 'ZZ_atom_0',\n                          'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1', \n                          'XX_atom_1', 'YX_atom_1', 'ZX_atom_1', 'XY_atom_1', 'YY_atom_1', 'ZY_atom_1', 'XZ_atom_1', 'YZ_atom_1', 'ZZ_atom_1',\n                          'fc', 'sd', 'pso', 'dso', 'scalar_coupling_constant']","c23748f1":"train_dataset = train_dataset[train_arranged_columns]\ntrain_dataset.head(20)","11a334b7":"mulliken_charges = pd.read_csv('..\/input\/mulliken_charges.csv')","81e3f359":"train_dataset_0 = train_dataset.merge(mulliken_charges, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_1'])\ntrain_dataset = train_dataset_0.merge(mulliken_charges, \n                                    right_on=['molecule_name', 'atom_index'], \n                                    left_on=['molecule_name', 'atom_index_0'], \n                                     suffixes=('_atom_1', '_atom_0'))\ntrain_dataset.drop(['atom_index_atom_0',  'atom_index_atom_1'], axis=1, inplace=True)","f0c4ff9e":"train_arranged_columns = ['id', 'molecule_name', 'type', \n                          'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0',  \n                          'XX_atom_0', 'YX_atom_0', 'ZX_atom_0', 'XY_atom_0', 'YY_atom_0', 'ZY_atom_0', 'XZ_atom_0', 'YZ_atom_0', 'ZZ_atom_0',\n                          'mulliken_charge_atom_0',\n                          'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1', \n                          'XX_atom_1', 'YX_atom_1', 'ZX_atom_1', 'XY_atom_1', 'YY_atom_1', 'ZY_atom_1', 'XZ_atom_1', 'YZ_atom_1', 'ZZ_atom_1',\n                          'mulliken_charge_atom_1',\n                          'fc', 'sd', 'pso', 'dso', 'scalar_coupling_constant']","d1f665f4":"train_dataset = train_dataset[train_arranged_columns]\ntrain_dataset.head(20)","dfd4b0c7":"dipole_moments = pd.read_csv('..\/input\/dipole_moments.csv')","306f9b91":"train_dataset = train_dataset.merge(dipole_moments, \n                                    right_on='molecule_name', \n                                    left_on='molecule_name')","ab5639ec":"train_arranged_columns = ['id', 'molecule_name', 'type', 'X', 'Y', 'Z',\n                          'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0',  \n                          'XX_atom_0', 'YX_atom_0', 'ZX_atom_0', 'XY_atom_0', 'YY_atom_0', 'ZY_atom_0', 'XZ_atom_0', 'YZ_atom_0', 'ZZ_atom_0',\n                          'mulliken_charge_atom_0',\n                          'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1', \n                          'XX_atom_1', 'YX_atom_1', 'ZX_atom_1', 'XY_atom_1', 'YY_atom_1', 'ZY_atom_1', 'XZ_atom_1', 'YZ_atom_1', 'ZZ_atom_1',\n                          'mulliken_charge_atom_1',\n                          'fc', 'sd', 'pso', 'dso', 'scalar_coupling_constant']","1a87cd77":"train_dataset = train_dataset[train_arranged_columns]\ntrain_dataset.head(20)","e642eb92":"potential_energy = pd.read_csv('..\/input\/potential_energy.csv')","cf442b9a":"train_dataset = train_dataset.merge(potential_energy, \n                                    right_on='molecule_name', \n                                    left_on='molecule_name')","4ac4f3b3":"train_arranged_columns = ['id', 'molecule_name', 'type', 'X', 'Y', 'Z', 'potential_energy',\n                          'atom_index_0', 'atom_atom_0', 'x_atom_0', 'y_atom_0', 'z_atom_0',  \n                          'XX_atom_0', 'YX_atom_0', 'ZX_atom_0', 'XY_atom_0', 'YY_atom_0', 'ZY_atom_0', 'XZ_atom_0', 'YZ_atom_0', 'ZZ_atom_0',\n                          'mulliken_charge_atom_0',\n                          'atom_index_1', 'atom_atom_1', 'x_atom_1', 'y_atom_1', 'z_atom_1', \n                          'XX_atom_1', 'YX_atom_1', 'ZX_atom_1', 'XY_atom_1', 'YY_atom_1', 'ZY_atom_1', 'XZ_atom_1', 'YZ_atom_1', 'ZZ_atom_1',\n                          'mulliken_charge_atom_1',\n                          'fc', 'sd', 'pso', 'dso', 'scalar_coupling_constant']","89607fbc":"train_dataset = train_dataset[train_arranged_columns]\ntrain_dataset.head(20)","e084320b":"train_dataset.to_csv('train.csv', index=False)\ntest_dataset.to_csv('test.csv', index=False)","eb74b08a":"**Merging data**\n\nAim of this this kernel to merge all available data into single dataframe.\nData from all files are merged to single file for train and test.\nFinal **train.csv** and **test.csv** are available under output.\nThese files can be directly used further feature engineering.\n\n>  **File_name-------------------------------Data_frequency-------------------Data_coverage**\n> 1. potential_energy.csv----------------------per molecule---------------------Only train data\n> 1. dipole_moments.csv------------------------per modecule---------------------Only train data\n> 1. mulliken_charges.csv----------------------per atom-------------------------Only train data\n> 1. magnetic_shielding_tensors.csv------------per atom-------------------------Only train data\n> 1. structures.csv----------------------------per atom-------------------------both train + test data\n> 1. scalar_coupling_contributions.csv---------per atom pair--------------------Only train data\n> 1. train.csv---------------------------------per atom pair--------------------\n> 1. test.csv----------------------------------per atom pair--------------------"}}