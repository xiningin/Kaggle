{"cell_type":{"ccbf92c1":"code","45c66b85":"code","8a756504":"code","eca3438f":"code","006a5a41":"code","a32f9dac":"code","3934f25c":"code","1f281533":"code","9c81ec8b":"code","58028fb1":"code","340898b9":"code","cdb92546":"code","b8413a0a":"code","806167bd":"code","aa50426b":"code","18e4e87b":"code","e66fe19e":"code","8f3897e6":"code","b447feb7":"code","ea26dc23":"code","7aa943f1":"code","9e1a533e":"code","eda6dec2":"markdown","fc5b0239":"markdown","a5ebe29b":"markdown","a6af0a12":"markdown","6fcd0b08":"markdown","94e26e37":"markdown","a6ee337a":"markdown","4db47991":"markdown","416c0f06":"markdown","07ecd134":"markdown","55750a82":"markdown","9ed7a089":"markdown","16bcd972":"markdown","f42ef72f":"markdown","a63a9b37":"markdown","ff15af73":"markdown"},"source":{"ccbf92c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45c66b85":"data = pd.read_csv(r\"\/kaggle\/input\/bank-marketing\/bank-full.csv\")","8a756504":"data.head()","eca3438f":"data[\"y\"].unique()","006a5a41":"len(data)","a32f9dac":"data = data.drop_duplicates(keep=\"first\")\nlen(data)","3934f25c":"data.isnull().sum()","1f281533":"# Importing the matplotlib library\nimport matplotlib.pyplot as plt\n\ntarget_counter = len(data[data[\"y\"]==\"no\"]),len(data[data[\"y\"]==\"yes\"])\n\nplt.bar(data[\"y\"].unique(), target_counter,color=\"pink\")# Displaying the bar plot","9c81ec8b":"target = \"y\"\nsample_size = data[target].value_counts().min()","58028fb1":"balanced_data = data.groupby('y',as_index=False, group_keys=False).apply(lambda x: x.sample(sample_size))\nbalanced_data = balanced_data.reset_index(drop = True)\n\nimport seaborn as sns\n\nsns.countplot(x=\"y\",data=balanced_data)\nbalanced_data.y.value_counts()","340898b9":"balanced_data.head()","cdb92546":"#list of variables with 2 categories:\nbi_list = balanced_data.nunique()[balanced_data.nunique()==2].index.tolist()\nprint(bi_list)\nfor col in bi_list:\n    balanced_data[col] = balanced_data[col].replace(balanced_data[col].unique().tolist(),[0,1])\nbalanced_data.head(10)","b8413a0a":"#SPLITTING TARGET VALUE:\ny = balanced_data.y.reset_index(drop=True)\nX = balanced_data.drop(['y'],axis=1,inplace=False).reset_index(drop=True)\nprint(\"data:\\n\",X)\nprint(\"target:\\n\",y)","806167bd":"X = pd.get_dummies(X, drop_first=False)\nX.head(10)","aa50426b":"X.columns","18e4e87b":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25, random_state=42)\nX_train,X_test,y_train,y_test = X_train.reset_index(drop=True),X_test.reset_index(drop=True),y_train.reset_index(drop=True),y_test.reset_index(drop=True)","e66fe19e":"from sklearn.preprocessing import StandardScaler\n\n#Scaling columns that have values greater than 1\nto_scale = [col for col in X.columns if X[col].max()>1]\n\nsc = StandardScaler()\n\nscaled_train = sc.fit_transform(X_train[to_scale])\nscaled_train = pd.DataFrame(scaled_train,columns=to_scale)\n\nscaled_test = sc.fit_transform(X_test[to_scale])\nscaled_test = pd.DataFrame(scaled_test,columns=to_scale)\n\n#Replace the original columns with the scaled ones\nfor col in scaled_train:\n    X_train[col] = scaled_train[col]\n    X_test[col] = scaled_test[col]","8f3897e6":"\"\"\"\nPCA\nOften creating dummy variables increases the number of features significantly, slowing down our model training. \nIn such cases, we can apply Principle Component Analysis to remove less significant features.\"\"\"\n\nprint(\"Initial dimension:\\nTrain data:{}\\nTest data:{}\".format(X_train.shape,X_test.shape))\nprint()\n\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=\"mle\",svd_solver=\"full\")\n\nX_train = pca.fit_transform(X_train)\nprint(\"Explained variance ratio for train data:\\n\",pca.explained_variance_ratio_)\nprint()\nX_test = pca.fit_transform(X_test)\nprint(\"Explained variance ratio for test data:\\n\",pca.explained_variance_ratio_)\nprint()\nprint(\"Dimension after PCA:\\nTrain data:{}\\nTest data:{}\".format(X_train.shape,X_test.shape))\n\n","b447feb7":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=0)\nlr.fit(X_train,y_train)\nprint(\"Train accuracy=\",lr.score(X_train,y_train))\ny_pred_lr = lr.predict(X_test)\n","ea26dc23":"from sklearn.metrics import classification_report, accuracy_score\n\n# classification report\nprint(classification_report(y_test, y_pred_lr, digits=3, zero_division = 1))\nprint(\"ACCURACY:\",accuracy_score(y_test, y_pred_lr))","7aa943f1":"from sklearn.linear_model import Perceptron\npr = Perceptron(tol=1e-4, random_state=0)\npr.fit(X_train,y_train)\ny_pred_pr = pr.predict(X_test)\nprint(\"Train accuracy:\",pr.score(X_train,y_train))\n","9e1a533e":"# classification report\nprint(classification_report(y_test, y_pred_pr, digits=3, zero_division = 1))\nprint(\"ACCURACY:\",accuracy_score(y_test, y_pred_pr))","eda6dec2":"### Perceptron\n\nA perceptron is nothing but a single layered neural network.","fc5b0239":"# Data Preprocessing","a5ebe29b":"No duplicate values!","a6af0a12":"## Train-Test-Split ","6fcd0b08":"## Dimensionality Reduction(Optional) ","94e26e37":"### Logistic Regression \n\nSince our target variable has two unique (binary) values, we can apply logistic regression to build a classifier on our data.\n![image.png](attachment:9a7ef536-81c1-401d-9107-36db1a49a90c.png)","a6ee337a":"The data Bank Marketing is related with direct marketing campaigns of a Portuguese banking institution.\nThe marketing campaigns were based on phone calls. Often, more than one contact to the same client was required,\nin order to access if the product (bank term deposit) would be (or not) subscribed. \n\nLet us build various classifiers and compare their accuracy.","4db47991":"# Data Exploration","416c0f06":"![image.png](https:\/\/miro.medium.com\/max\/1838\/1*uzm-62Wq3J1JF1HwTMY4mg.png)","07ecd134":"No null values too!","55750a82":"## Converting object type attributes ","9ed7a089":"## Modeling ","16bcd972":"## Taking balanced sample of data ","f42ef72f":"We now compare different types of classifiers:\n\n* Logistic Regression\n* Perceptron.\n* Naive Bayes.\n* Decision Tree.\n* Logistic Regression.\n* K-Nearest Neighbor.\n* Artificial Neural Networks\/Deep Learning.\n* Support Vector Machine.\n\nThen there are the ensemble methods: \n\n* Random Forest\n* Bagging\n* AdaBoost\n","a63a9b37":"The data is clearly imbalanced. Hence we will use equal samples of it to train our classifiers. \n\nOther methods include using SMOTE: SYNTHETIC MINORITY OVER-SAMPLING TECHNIQUE which is a type of data augmentation that synthesizes new samples from existing ones. [link to SMOTE implementation on the same dataset: https:\/\/www.kaggle.com\/nabamitachakraborty\/smote]","ff15af73":"## Feature scaling "}}