{"cell_type":{"fa691141":"code","e41e3974":"code","d69ae6db":"code","5eca1914":"code","1faad3b1":"code","8566b26c":"code","3494f268":"code","bed83f19":"code","1f58a11a":"markdown"},"source":{"fa691141":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport nltk\n#downloading some nltk packages\nnltk.download('punkt')\nnltk.download('wordnet')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport re\nimport string\nimport random\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport warnings\nwarnings.filterwarnings('ignore')","e41e3974":"#read the data from a text file\nf = open('..\/input\/minibot-a-starting-beginners-approach-toward-nlp\/data_information.txt','r',errors = 'ignore')\nraw = f.read()\nraw=raw.lower()\n#read the data for video\nf2=open('..\/input\/minibot-a-starting-beginners-approach-toward-nlp\/video_data.txt','r',errors = 'ignore')\nraw_video = f2.read()\nraw_video = raw_video.lower()","d69ae6db":"#generate tokens for both of them\n\nsent_tokens = nltk.sent_tokenize(raw)\nword_tokens = nltk.word_tokenize(raw)\nsent_tokens_for_video = nltk.sent_tokenize(raw_video)\nword_tokens_for_video = nltk.word_tokenize(raw_video)","5eca1914":"#defining function for preprocessing of text\n\nlemmer = WordNetLemmatizer()\ndef lemmatize_tokens(tokens):\n  return [lemmer.lemmatize(token) for token in tokens]\n\n#remove all the puntuation from string\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\n\ndef Lemnormalize(sent):\n  return lemmatize_tokens(nltk.word_tokenize(sent.lower().translate(remove_punct_dict)))","1faad3b1":"#creating a greeting input\n\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\ndef greeting(sentence):\n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)","8566b26c":"#defining small set of link of videos\nvideo_links = ['https:\/\/youtu.be\/xC-c7E5PK0Y','https:\/\/youtu.be\/k2P_pHQDlp0','https:\/\/youtu.be\/csG_qfOTvxw','https:\/\/youtu.be\/_XbttSk3ALs']","3494f268":"\n#defining function for generating response from main text data\ndef response(user_response):\n  robo_response = ''\n  sent_tokens.append(user_response)\n  tfidfVec = TfidfVectorizer(tokenizer = Lemnormalize , stop_words = 'english')\n  tfidf = tfidfVec.fit_transform(sent_tokens)\n  val = cosine_similarity(tfidf[-1],tfidf)\n  idx = val.argsort()[0][-2]\n  flat=val.flatten()\n  flat.sort()\n  req_tfidf = flat[-2]\n  if req_tfidf == 0:\n    return robo_response+\" I'm sorry don't know about will definately improve in future \"\n  else:\n    robo_response+=sent_tokens[idx]\n    return robo_response\n\n#generating response for video link\ndef response_for_video(user_response):\n  robo_response = ''\n  sent_tokens_for_video.append(user_response)\n  tfidfVec = TfidfVectorizer(tokenizer = Lemnormalize , stop_words = 'english')\n  tfidf_for_video = tfidfVec.fit_transform(sent_tokens_for_video)\n  val_for_video = cosine_similarity(tfidf_for_video[-1],tfidf_for_video)\n  idx_video = val_for_video.argsort()[0][-2]\n  flat_video = val_for_video.flatten()\n  flat_video.sort()\n  req_tfidf_video = flat_video[-2]\n\n  if req_tfidf_video > 0.5:\n     robo_response+='link for video is: '\n     robo_response+=str(video_links[idx_video])\n     return robo_response\n  else:\n    return robo_response+'sorry currently we are not with a video for this, We promise to improve our video library'\n\n","bed83f19":"#program for making chat bot communicate\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"ROBO: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"ROBO: \"+greeting(user_response))\n            else:\n                print(\"ROBO: \",end=\"\")\n                print(response(user_response))\n                print('ROBO: ',end='')\n                print(response_for_video(user_response))\n                sent_tokens.remove(user_response)\n                sent_tokens_for_video.remove(user_response)\n    else:\n        flag=False\n        print(\"ROBO: Bye! take care..\")","1f58a11a":"# Don't show it just use it\n\n- This is a very simple approach which will make you familiar with nlp if you have never studied NLP before.\n- one advice just read some of the vlogs on nlp with nltk or watch some videos since here only code is present.\n- just read these codes if you don't understand any term just google it, if you will google it than you will become familiar with google searching whenecer you find some unknown thing in code.\n- Just run it one time and feel the technology:)\n- if this give you trip than just upvote it."}}