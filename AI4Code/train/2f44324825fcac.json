{"cell_type":{"0aebfa0a":"code","29b79100":"code","d2a8dd36":"code","81f9274f":"code","3db9883b":"code","c0e7cc19":"code","70731b04":"code","e0d9638c":"code","f073e1c8":"code","8dbacdd0":"code","eeaa9f51":"code","3e332a0d":"code","1223665a":"code","9704030f":"markdown","ed9e791e":"markdown","67ffa312":"markdown","e2f175f5":"markdown","25ca1a60":"markdown","3d70c6e7":"markdown","ad9e1fd0":"markdown","c9c7f822":"markdown","981a4317":"markdown","5e8a8044":"markdown"},"source":{"0aebfa0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport re\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.layers import Dense, Input, Dropout\nfrom keras import Sequential\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os, re\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","29b79100":"!nvidia-smi","d2a8dd36":"data = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")","81f9274f":"data.head()","3db9883b":"data.shape","c0e7cc19":"data.groupby('sentiment').review.nunique()","70731b04":"def remove_punct(text): \n  \n    # punctuation marks \n    punctuations = '''!()-[]{};:'\"\\,<>.\/?@#$%^&*_~'''\n  \n    for x in text.lower(): \n        if x in punctuations: \n            text = text.replace(x, \"\") \n  \n    return text\n\ndef remove_urls(text):\n  \n    #Remove HyperText Links\n    text = re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n    text = re.sub(r'^http?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n    text = re.sub(r'^ftp?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n    \n    return text\n\ndef remove_html_tags(text):\n    clean = re.compile('<.*?>')\n    return re.sub(clean, '', text)","e0d9638c":"# Clean Text\ndata[\"review\"] = data.review.map(str) \\\n                            .map(lambda x: x.lower()) \\\n                            .map(lambda x: x.strip()) \\\n                            .map(lambda x: re.sub(r'\\d+', '', x)) \\\n                            .map(remove_punct) \\\n                            .map(remove_urls) \\\n                            .map(remove_html_tags)\n\n# Convert sentiment to int\nsentiment_map = {\"positive\": 1, \"negative\": -1}\ndata[\"sentiment\"] = data.sentiment.map(lambda x: sentiment_map[x])","f073e1c8":"def create_model(optimizer=\"adam\", dropout=0.1, init='uniform', nbr_features=500, dense_nparams=256):\n    model = Sequential()\n    model.add(Dense(dense_nparams, activation='relu', input_shape=(nbr_features,), kernel_initializer=init,)) \n    model.add(Dropout(dropout), )\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=optimizer,metrics=[\"accuracy\"])\n    return model","8dbacdd0":"kears_estimator = KerasClassifier(build_fn=create_model, verbose=1)","eeaa9f51":"estimator = Pipeline([(\"tfidf\", TfidfVectorizer(analyzer =\"word\", \n                                                max_features=500, \n\n                                                )), \n                       ('ss', StandardScaler(with_mean=False,)), \n                       (\"kc\", KerasClassifier(build_fn=create_model, verbose=1))])","3e332a0d":"# define the grid search parameters\nparam_grid = {\n    'tfidf__ngram_range': [(1,1), (1,2)],\n    'kc__epochs': [10, 20],\n    'kc__dense_nparams': [32, 256,],\n    'kc__init': [ 'uniform', 'normal', ], \n    'kc__batch_size':[32, 128],\n    'kc__optimizer':['RMSprop', 'Adam', 'sgd'],\n    'kc__dropout': [0.4, 0.2, 0.1]\n}","1223665a":"X = data.review\ny = data.sentiment\nkfold_splits = 3\ngrid = GridSearchCV(estimator=estimator,  \n                    n_jobs=-1, \n                    verbose=1,\n                    return_train_score=True,\n                    cv=kfold_splits,  #StratifiedKFold(n_splits=kfold_splits, shuffle=True)\n                    param_grid=param_grid,)\n\ngrid_result = grid.fit(X, y, ) \n\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","9704030f":"## Import Some Usefull Libs","ed9e791e":"## Defining Hyperparamers Space","67ffa312":"## Loading Data using pandas","e2f175f5":"### Check if class balanced","25ca1a60":"## Create Sklearn Pipeline","3d70c6e7":"## Create sklearn like estimator ","ad9e1fd0":"This is a companion Notebook to my Post On Medium: https:\/\/medium.com\/@am.benatmane\/keras-hyperparameter-tuning-using-sklearn-pipelines-grid-search-with-cross-validation-ccfc74b0ce9f\n\n# Keras Hyperparameter Tuning using Sklearn Pipelines & Grid Search with Cross Validation\n\nTraining a Deep Neural Network that can generalize well to new data is a very challenging problem. Furthermore, Deep learning models are full of hyper-parameters and finding the optimal ones can be a tedious process !\n\nFortunately, Keras provide Wrappers for the Scikit-Learn API, so we can perform Grid Search with Keras Models !\n\nIn this notebook, we show how to combine Sklearn Pipeline, GridSearch and these Keras Wrappers to fine-tune some of the hyperparameters of TfidfVectorizer and Sequential keras model on the IMDB movie reviews dataset.","c9c7f822":"## Implement Keras Model creator function","981a4317":"## Performing Grid Search with KFold Cross Validation","5e8a8044":"## Do some text preprocessing"}}