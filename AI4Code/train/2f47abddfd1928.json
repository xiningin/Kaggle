{"cell_type":{"cbdc9ef6":"code","97958732":"code","db2c0728":"code","3a91f8c5":"code","427f3f1f":"code","b7c2e73a":"code","8dc78d80":"code","c8c288cd":"code","d3626b98":"code","35e0e11d":"code","f12bc844":"code","3d9a7b4d":"code","226049cf":"code","7f024a49":"code","f851d4e9":"code","f533a4b9":"code","8d0b0aef":"code","9135a175":"code","04df96ea":"code","d119e6f0":"code","be9a2508":"code","28b9f41d":"code","914db3cf":"code","b1dc2dfa":"code","8d5ce339":"code","18e5ec71":"code","d46c875b":"code","2ea7ddc2":"code","87a01843":"code","f1aa80f6":"code","8e29a2b9":"code","bb3a2cf8":"code","c2a75b30":"code","a118d31c":"code","7b753e44":"code","781c0f04":"code","a180bef1":"code","b059ed67":"code","70a94447":"code","9e192d08":"code","5dfed89f":"code","1def830d":"code","89d3a5a0":"code","804c5d8b":"code","87f40929":"code","1f88d42a":"code","23a3aacd":"code","9aac8de9":"code","acd6ed21":"code","5aaca7b8":"code","ab738d72":"code","ed3c23e1":"code","29ee7e2d":"code","7f98f311":"code","3bdd3347":"code","41abdda1":"code","282a2b5f":"code","f9d551ca":"markdown","f0dde482":"markdown","617b9d50":"markdown","951285a8":"markdown","3848058c":"markdown","6b88d9f5":"markdown","5d1bcd86":"markdown","7a60d1c8":"markdown","85ab92ee":"markdown","fae2117a":"markdown","6d1b1095":"markdown","7ee3c4fe":"markdown","0a62b11f":"markdown","5004a7df":"markdown","f358d83a":"markdown","d0aedbc0":"markdown","a035df31":"markdown","60d2c17e":"markdown","2978a495":"markdown","db6f5774":"markdown","58f28174":"markdown","434ea8ec":"markdown","dabc48b5":"markdown","204943bd":"markdown","3e7fbc81":"markdown","0faa484b":"markdown","818113df":"markdown","2e4ba084":"markdown","be88edeb":"markdown","16946161":"markdown","a1b5f525":"markdown","1d947ca7":"markdown","4a7a3517":"markdown","7486e954":"markdown","6acf3570":"markdown","ce9808c9":"markdown","0869b2d2":"markdown","2ed4a903":"markdown","72752f78":"markdown","b2a48260":"markdown","92cfac9a":"markdown","d418f46d":"markdown","dd41d392":"markdown","69001c39":"markdown","c676fe8d":"markdown","f8b06b94":"markdown","93526419":"markdown","0d3adc34":"markdown","584f0c00":"markdown","b2b2d1fc":"markdown","a1575c58":"markdown","142bff00":"markdown","296076e4":"markdown","9ba57ffd":"markdown","2fd2dbb0":"markdown","adab8812":"markdown","0c136a25":"markdown","19571091":"markdown","67db5fdd":"markdown","62a9702e":"markdown","4e396060":"markdown","c26133d5":"markdown","58601252":"markdown","251f98b1":"markdown"},"source":{"cbdc9ef6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.patches as mpatches\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_curve, auc\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_validate, cross_val_predict\nimport warnings","97958732":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","db2c0728":"df_train.head(10)","3a91f8c5":"df_test.head(10)","427f3f1f":"idx_train = df_train['PassengerId']\nidx_test = df_test['PassengerId']\ndf_all = pd.concat([df_train, df_test],\n                  axis = 0, sort = False)\ndf_all.set_index('PassengerId',\n                drop = True,\n                inplace = True)","b7c2e73a":"df_all.info()","8dc78d80":"df_all.describe(include = 'all')","c8c288cd":"sex_dict = {'male': 0, 'female': 1}\ndf_all['Sex'] = df_all['Sex'].map(sex_dict)","d3626b98":"embarked_dict = {'S': 0, 'C': 1, 'Q': 2}\ndf_all['Embarked'] = df_all['Embarked'].map(embarked_dict)","35e0e11d":"df_all['Fare'].fillna(df_all.groupby('Pclass')['Fare'].transform('median'),\n                     inplace = True)","f12bc844":"# First we delete the useless feateatures, name and ticket because the can't \n# be used to group age and also cabin a survive features because they have missing values.\n\ndf_age_corr = df_all.drop(['Name', 'Ticket','Cabin','Survived'],\n                         axis = 1)\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nsns.heatmap(df_age_corr.corr(),\n           vmin = -1,\n           vmax = 1,\n           annot = True)\n\nplt.title('Correlation Heatmap',\n         fontdict = {'fontsize': 25})","3d9a7b4d":"df_age_corr['Fare_bin'] = pd.cut(df_age_corr['Fare'],\n                                 5,\n                                 labels = [0,1,2,3,4])\n\ndf_all['Age'].fillna(df_age_corr.groupby(['Pclass','SibSp','Parch','Fare_bin'])['Age'].transform('median'),\n                     inplace = True)","226049cf":"df_all.info()","7f024a49":"df_all[df_all['Age'].isnull()]","f851d4e9":"df_all['Age'].fillna(df_age_corr.groupby(['Pclass','Fare_bin'])['Age'].transform('median'),\n                     inplace = True)\ndf_all.info()","f533a4b9":"df_all[df_all['Embarked'].isnull()]","8d0b0aef":"df_all['Embarked'].fillna(0, inplace = True)","9135a175":"df_all['Cabin'].fillna('Other', inplace = True)\ndf_all['Cabin_Letter'] = df_all['Cabin'].str[0]","04df96ea":"df_all_cabin_count = df_all.groupby(['Cabin_Letter']).count()\ndf_all_cabin_count = df_all_cabin_count['Cabin'].apply(lambda x: 100*x\/df_all.shape[0])\n\ndf_all_cabin_count.index\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('% of People per Cabin Area',\n         fontdict = {'fontsize': 25})\n\nsns.barplot(x = df_all_cabin_count.index,\n           y = df_all_cabin_count)","d119e6f0":"df_all_cabin_Pclass_count = df_all.groupby(['Cabin_Letter','Pclass']).count()\ndf_all_cabin_Pclass_count.reset_index(inplace = True)\n\nPclass_perc = []\nfor index, row in df_all_cabin_Pclass_count.iterrows():\n    Pclass_perc.append(100*(row['Cabin']\/df_all[df_all['Cabin_Letter'] == row['Cabin_Letter']]['Cabin_Letter'].count()))\n\ndf_all_cabin_Pclass_count['Cabin_Perc'] = Pclass_perc\n    \n\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Class Distribution per Cabin',\n         fontdict = {'fontsize': 25})\n\nax = sns.histplot(df_all_cabin_Pclass_count,\n                 x = 'Cabin_Letter',\n                 weights = 'Cabin_Perc',\n                 hue = 'Pclass',\n                 multiple = 'stack',\n                 edgecolor = 'white')","be9a2508":"df_all_cabin_Survived_count = df_all.groupby(['Cabin_Letter','Survived']).count()\ndf_all_cabin_Survived_count.reset_index(inplace = True)\n\nSurvived_perc = []\nfor index, row in df_all_cabin_Survived_count.iterrows():\n    Survived_perc.append(100*(row['Cabin']\/df_all_cabin_Survived_count[df_all_cabin_Survived_count['Cabin_Letter'] == row['Cabin_Letter']]['Cabin'].sum()))\n\ndf_all_cabin_Survived_count['Cabin_Perc'] = Survived_perc\n    \n\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution per Cabin',\n         fontdict = {'fontsize': 25})\n\nsns.histplot(df_all_cabin_Survived_count,\n                 x = 'Cabin_Letter',\n                 weights = 'Cabin_Perc',\n                 hue = 'Survived',\n                 multiple = 'stack',\n                 edgecolor = 'white')","28b9f41d":"cabin_dict = {'A': 0, 'B': 1, 'C': 2,'D': 3, 'E': 4, 'F': 5,'G': 6, 'O': 7, 'T': 7}\ndf_all['Cabin_Letter'] = df_all['Cabin_Letter'].map(cabin_dict)\ndf_all.info()","914db3cf":"df_age_corr = df_all.drop(['Name', 'Ticket','Cabin'],\n                         axis = 1)\n\nplt.figure(figsize = (12,10))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nsns.heatmap(df_age_corr.corr(),\n           vmin = -1,\n           vmax = 1,\n           annot = True)","b1dc2dfa":"plt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution per Passenger Class',\n         fontdict = {'fontsize': 25})\n\nsns.countplot(data = df_all,\n             x = 'Pclass',\n             hue = 'Survived',\n             palette = 'Paired')","8d5ce339":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all,\n            x = 'Age',\n            hue = 'Pclass',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all,\n            x = 'Pclass',\n            y = 'Age',\n            palette = 'Paired')\n\nfig.suptitle('Age Distribution per Passenger Class',\n         fontdict = {'fontsize': 25})","18e5ec71":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all,\n            x = 'Fare',\n            hue = 'Pclass',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all,\n            x = 'Pclass',\n            y = 'Fare',\n            palette = 'Paired')\n\nfig.suptitle('Fare Distribution per Passenger Class',\n         fontdict = {'fontsize': 25})","d46c875b":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.countplot(data = df_all.drop(df_all[df_all['Cabin_Letter'] == 7].index, axis = 0),\n             x = 'Pclass',\n             hue = 'Cabin_Letter',\n             palette = 'Paired',\n             ax = ax1)\n\nax2 = sns.countplot(data = df_all.drop(df_all[df_all['Cabin_Letter'] != 7].index, axis = 0),\n             x = 'Pclass',\n             hue = 'Cabin_Letter',\n             palette = 'Paired',\n             ax = ax2)\n\nfig.suptitle('Cabin Distribution per Passenger Class',\n         fontdict = {'fontsize': 25})","2ea7ddc2":"plt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution per Passenger Sex',\n         fontdict = {'fontsize': 25})\n\nsns.countplot(data = df_all,\n             x = 'Sex',\n             hue = 'Survived',\n             palette = 'Paired')","87a01843":"plt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Parent and children Distribution per Passenger Sex',\n         fontdict = {'fontsize': 25})\n\nsns.violinplot(data=df_all, x=\"Sex\", y=\"Parch\",\n               split=True, inner=\"quart\", linewidth=1)","f1aa80f6":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all,\n            x = 'Fare',\n            hue = 'Sex',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all,\n            x = 'Sex',\n            y = 'Fare',\n            palette = 'Paired')\n\nfig.suptitle('Fare Distribution per Passenger Sex',\n         fontdict = {'fontsize': 25})","8e29a2b9":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all[df_all['SibSp'] < 5],\n            x = 'Age',\n            hue = 'SibSp',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all[df_all['SibSp'] < 5],\n            x = 'SibSp',\n            y = 'Age',\n            palette = 'Paired')\n\nfig.suptitle('SibSp Distribution per Passenger Age',\n         fontdict = {'fontsize': 25})","bb3a2cf8":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all[df_all['Parch'] < 4],\n            x = 'Age',\n            hue = 'Parch',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all[df_all['Parch'] < 4],\n            x = 'Parch',\n            y = 'Age',\n            palette = 'Paired')\n\nfig.suptitle('Parch Distribution per Passenger Age',\n         fontdict = {'fontsize': 25})","c2a75b30":"plt.figure(figsize = (18,12))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nsns.jointplot(data = df_all[(df_all['Age'] < 70) & (df_all['Fare'] < 100)],\n            x = 'Age',\n            y = 'Fare',\n            palette = 'Paired',\n             height = 8,\n             kind = 'reg')","a118d31c":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all[df_all['Cabin_Letter'] != 7],\n            x = 'Age',\n            hue = 'Cabin_Letter',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all[df_all['Cabin_Letter'] != 7],\n            x = 'Cabin_Letter',\n            y = 'Age',\n            palette = 'Paired')\n\nfig.suptitle('Cabin Distribution per Passenger Age',\n         fontdict = {'fontsize': 25})","7b753e44":"plt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Sibling\/Spouse number per Passenger Parent\/Children',\n         fontdict = {'fontsize': 20})\n\nsns.countplot(data = df_all,\n             x = 'SibSp',\n             hue = 'Parch',\n             palette = 'Paired')\nplt.legend(loc = 'upper right', title = 'Parch')","781c0f04":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all[df_all['Parch'] < 4],\n            x = 'Fare',\n            hue = 'Parch',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all[df_all['Parch'] < 4],\n            x = 'Parch',\n            y = 'Fare',\n            palette = 'Paired')\n\nfig.suptitle('Parch Distribution per Passenger Fare',\n         fontdict = {'fontsize': 25})","a180bef1":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.kdeplot(data = df_all[df_all['Cabin_Letter'] != 7],\n            x = 'Fare',\n            hue = 'Cabin_Letter',\n            palette = 'Paired',\n            shade = True,\n            ax = ax1)\n\nax2 = sns.boxplot(data = df_all[df_all['Cabin_Letter'] != 7],\n            x = 'Cabin_Letter',\n            y = 'Fare',\n            palette = 'Paired')\n\nfig.suptitle('Cabin Distribution per Passenger Fare',\n         fontdict = {'fontsize': 25})","b059ed67":"fig, (ax1, ax2) = plt.subplots(1,2)\nfig.set_size_inches(16, 6)\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\n\nax1 = sns.countplot(data = df_all.drop(df_all[df_all['Cabin_Letter'] == 7].index, axis = 0),\n             x = 'Survived',\n             hue = 'Cabin_Letter',\n             palette = 'Paired',\n             ax = ax1)\n\nax1.legend(loc = 'upper center', title = 'Cabin Letter')\n\nax2 = sns.countplot(data = df_all.drop(df_all[df_all['Cabin_Letter'] != 7].index, axis = 0),\n             x = 'Survived',\n             hue = 'Cabin_Letter',\n             palette = 'Paired',\n             ax = ax2)\n\nfig.suptitle('Survived Distribution per Passenger Cabin',\n         fontdict = {'fontsize': 25})","70a94447":"df_all['Title'] = df_all['Name'].str.extract(', ([A-Za-z]+).')\ndf_all.groupby('Title')['Title'].count()","9e192d08":"map_dict = {'Capt':'Soldier','Col':'Soldier','Don':'Mr','Dona':'Mrs','Dr':'Upper','Jonkheer':'Upper',\n           'Lady':'Upper','Major':'Soldier','Mlle':'Miss','Mme':'Mrs','Ms':'Mrs','Rev':'Upper',\n           'Sir':'Upper','the':'Mr','Master':'Master','Miss':'Miss','Mr':'Mr','Mrs':'Mrs'}\ndf_all['Title'] = df_all['Title'].map(map_dict)\ndf_all.groupby('Title')['Title'].count()","5dfed89f":"df_all_title_Survived_count = df_all.groupby(['Title','Survived']).count().reset_index()\nSurvived_perc = []\nfor index, row in df_all_title_Survived_count.iterrows():\n    Survived_perc.append(100*(row['Pclass']\/df_all_title_Survived_count[df_all_title_Survived_count['Title'] == row['Title']]['Pclass'].sum()))\n\ndf_all_title_Survived_count['title_Perc'] = Survived_perc\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution per Title',\n         fontdict = {'fontsize': 25})\n\nsns.histplot(df_all_title_Survived_count,\n                 x = 'Title',\n                 weights = 'title_Perc',\n                 hue = 'Survived',\n                 multiple = 'stack',\n                 edgecolor = 'white')","1def830d":"df_all['Surname'] = df_all['Name'].str.split(',')\ndf_all['Surname'] = df_all['Surname'].apply(lambda x: x[0])\ndf_all","89d3a5a0":"def find_male_survived(surname):\n    data = df_all[(df_all['Surname'] == surname) & (df_all['Sex'] == 0) & (df_all['Age'] > 14)]\n    if data.shape[0] > 1:\n        if data['Survived'].sum() > 0:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n\ndf_all['Family_male_survived'] = df_all['Surname'].apply(lambda x: find_male_survived(x))\ndf_all[df_all['Family_male_survived'] == 1].head(10)","804c5d8b":"df_all_male_Survived_count = df_all.groupby(['Family_male_survived','Survived']).count().reset_index()\nSurvived_perc = []\nfor index, row in df_all_male_Survived_count.iterrows():\n    Survived_perc.append(100*(row['Pclass']\/df_all_male_Survived_count[df_all_male_Survived_count['Family_male_survived'] == row['Family_male_survived']]['Pclass'].sum()))\n\ndf_all_male_Survived_count['male_surv_Perc'] = Survived_perc\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution per Male Survived in the Family',\n         fontdict = {'fontsize': 25})\n\nsns.histplot(df_all_male_Survived_count,\n                 x = 'Family_male_survived',\n                 weights = 'male_surv_Perc',\n                 hue = 'Survived',\n                 multiple = 'stack',\n                 edgecolor = 'white',\n                 bins = 2)\nplt.xticks([0,1])","87f40929":"def find_female_child_died(surname):\n    data = df_all[((df_all['Surname'] == surname) & (df_all['Sex'] == 1) & (df_all['Age'] > 14)) | ((df_all['Surname'] == surname) & (df_all['Age'] < 14))]\n    woman_child_survive = 0\n    i = 0\n    if data.shape[0] > 1:\n        while ((i <= data.shape[0]-1) & (woman_child_survive == 0)):\n            if data['Survived'].iloc[i] == np.nan:\n                continue\n            elif data['Survived'].iloc[i] == 0:\n                woman_child_survive = 1\n            i += 1\n    else:\n        return 0\n    return woman_child_survive\n\ndf_all['Family_woman_child_died'] = df_all['Surname'].apply(lambda x: find_female_child_died(x))\ndf_all[df_all['Family_woman_child_died'] == 1].head(10)","1f88d42a":"df_all_female_die_count = df_all.groupby(['Family_woman_child_died','Survived']).count().reset_index()\nSurvived_perc = []\nfor index, row in df_all_female_die_count.iterrows():\n    Survived_perc.append(100*(row['Pclass']\/df_all_female_die_count[df_all_female_die_count['Family_woman_child_died'] == row['Family_woman_child_died']]['Pclass'].sum()))\n\ndf_all_female_die_count['female_died_Perc'] = Survived_perc\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Survived Distribution being Female and having a dead child',\n         fontdict = {'fontsize': 25})\n\nsns.histplot(df_all_female_die_count,\n                 x = 'Family_woman_child_died',\n                 weights = 'female_died_Perc',\n                 hue = 'Survived',\n                 multiple = 'stack',\n                 edgecolor = 'white',\n                 bins = 2)\nplt.xticks([0,1])","23a3aacd":"df_all['Family_size'] = df_all.apply(lambda x: x['SibSp']+x['Parch']+1,\n                                    axis = 1)\ndf_all['Alone'] = df_all['Family_size'].apply(lambda x: 1 if x == 1 else 0)\ndf_all","9aac8de9":"df_all.drop(['Name','Ticket','Cabin','Surname'],\n           axis = 1,\n           inplace = True)\n\ndf_all = pd.get_dummies(df_all, \n                        columns = ['Pclass','Embarked','Cabin_Letter','Title'], \n                        prefix = ['Pclass','Embarked','Cabin_Letter','Title'])\n\ndf_all_without_survived = df_all.drop(['Survived','Sex','Pclass_1','Pclass_2','Pclass_3','Embarked_0.0',\n                                  'Embarked_1.0','Embarked_2.0','Cabin_Letter_0','Cabin_Letter_1',\n                                  'Cabin_Letter_2','Cabin_Letter_3','Cabin_Letter_4','Cabin_Letter_5',\n                                  'Cabin_Letter_6','Cabin_Letter_7','Alone','Title_Master','Title_Miss',\n                                  'Title_Mr','Title_Mrs','Title_Soldier','Title_Upper','Family_male_survived',\n                                  'Family_woman_child_died'],\n                                 axis = 1)\ndf_all_scaled_without_survived = preprocessing.scale(df_all_without_survived)\n\ndf_all_without_survived = pd.DataFrame(df_all_scaled_without_survived,\n                                      columns = df_all_without_survived.columns,\n                                      index = df_all.index)\n\ndf_all_with_dummy = df_all.loc[:,['Survived','Sex','Pclass_1','Pclass_2','Pclass_3','Embarked_0.0',\n                                  'Embarked_1.0','Embarked_2.0','Cabin_Letter_0','Cabin_Letter_1',\n                                  'Cabin_Letter_2','Cabin_Letter_3','Cabin_Letter_4','Cabin_Letter_5',\n                                  'Cabin_Letter_6','Cabin_Letter_7','Alone','Title_Master','Title_Miss',\n                                  'Title_Mr','Title_Mrs','Title_Soldier','Title_Upper','Family_male_survived',\n                                  'Family_woman_child_died']]\n\ndf_all_scaled = pd.concat([df_all_with_dummy,df_all_without_survived], axis = 1)\n\ndf_all_scaled","acd6ed21":"df_train = df_all_scaled[df_all_scaled.index.isin(idx_train)]\ndf_test = df_all_scaled[df_all_scaled.index.isin(idx_test)].drop('Survived', axis = 1)","5aaca7b8":"X_train = df_train.drop('Survived', axis = 1)\nY_train = df_train['Survived']","ab738d72":"#define the model\nmodel = XGBClassifier()\n\n#define the parameters to search\nn_estimators = [200]#[100,500,1000,1500] Validated\nlearning_rate = [0.1]#[0.0001,0.001,0.01,0.1,1,10,100]\nmax_depth = [1]#range(1,10)#[3,8,12] Validated\nmin_child_weight = [1]#range(1,15)\ngamma = [0.8]#np.arange(0,2,0.1)\nsubsample = [0.6]#np.arange(0,2,0.1)\ncolsample_bytree = [0.9]#np.arange(0,2,0.1)\nscale_pos_weight = [0.9]#np.arange(0,2,0.1)\nreg_alpha = [0.00001]#[0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000,10000]\n\n#define grid search\ngrid = dict(n_estimators = n_estimators,\n           learning_rate = learning_rate,\n           max_depth = max_depth,\n           min_child_weight = min_child_weight,\n           gamma = gamma,\n           subsample = subsample,\n           colsample_bytree = colsample_bytree,\n            scale_pos_weight = scale_pos_weight,\n            reg_alpha = reg_alpha,\n           use_label_encoder=[False])\ncv = RepeatedStratifiedKFold(n_splits = 10, \n                             n_repeats = 3, \n                             random_state = 1)\ngrid_search = GridSearchCV(estimator = model,\n                          param_grid = grid,\n                          n_jobs = -1,\n                          cv = cv,\n                          scoring = 'accuracy',\n                          error_score = 0,\n                          verbose = 2)\ngrid_result = grid_search.fit(X_train, Y_train)\n\n#summarize results\nprint('Best: %f using %s' % (grid_result.best_score_,\n                            grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nresults_dict = dict(means = means,\n                  stds = stds,\n                  params = params)","ed3c23e1":"warnings.filterwarnings(action='ignore', category=UserWarning)\nmodel = XGBClassifier(n_estimators = 200,\n                       learning_rate = 0.1,\n                       max_depth = 1,\n                       min_child_weight = 1,\n                       gamma = 0.8,\n                       subsample = 0.6,\n                       colsample_bytree = 0.9,\n                       scale_pos_weight = 0.9,\n                       reg_alpha = 0.00001,\n                       eval_metric = 'logloss',\n                       use_label_encoder=False).fit(X_train, Y_train)\nmodel_result = cross_validate(model, X_train, Y_train, cv = 10,\n                             scoring = ('accuracy', 'recall', 'f1','roc_auc'))\ny_pred = cross_val_predict(model, X_train, Y_train, cv = 10)\npd.DataFrame(confusion_matrix(Y_train, y_pred))","29ee7e2d":"Y_test = model.predict(df_test)\ndf_test_result = pd.concat([df_test.reset_index()['PassengerId'],pd.DataFrame(Y_test)],\n                           axis = 1)\ndf_test_result.columns = ['PassengerId','Survived']\ndf_test_result","7f98f311":"feature_names = pd.DataFrame(df_test.columns)\nfeature_importances_val = pd.DataFrame(model.feature_importances_)\nfeature_importances = pd.concat([feature_names, feature_importances_val], axis = 1)\nfeature_importances.columns = ['Feature', 'Importance']\nfeature_importances.sort_values('Importance',\n                               inplace = True,\n                               ascending = False)\n\nplt.figure(figsize = (10,14))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('Feature Importances',\n         fontdict = {'fontsize': 20})\n\nsns.barplot(data = feature_importances,\n             y = 'Feature',\n             x = 'Importance',\n             palette = 'Paired')","3bdd3347":"df_correct_result = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf_result_check = pd.concat([df_test_result,df_correct_result],\n                           join='inner',\n                           axis = 1,\n                           ignore_index=True)\ndf_result_check.drop(2, axis = 1, inplace = True)\ndf_result_check.columns = ['PassengerId','Prediction','Real']\ndf_result_check","41abdda1":"df_result_check['Right'] = df_result_check.apply(lambda x: x['Prediction'] == x['Real'], axis = 1)\naccuracy = df_result_check['Right'].sum()\/df_result_check['Right'].count()\nprint('Model Accuracy: {}'.format(accuracy))","282a2b5f":"submit = df_test_result\nsubmit.to_csv(\"submissionDiego_Quintana_Esteve.csv\",index = False)","f9d551ca":"## 3.2. Sex\n\nSeems that Sex feature has a good correlation with survived, Parch and fare.\n\nLets inspect these relations.","f0dde482":"## 3.6. Fare\n\nSeems that Fare has a good correlation with survived, Pclass, Sex, age, SibSp, Parch and Cabin_Letter.\n\nLets inspect these relations.","617b9d50":"Now age feature shows no more missing values.","951285a8":"With .info() method we can identify each feature type and also if there are NaN values.","3848058c":"## 3.7. Cabin\n\nSeems that Cabin_Letter has a good correlation with survived, Pclass, age and fare.\n\nLets inspect these relations.","6b88d9f5":"We can clearly see that socio-economic position matters in order to survive.\n\n1st class shows higher percentage of survived passenger, 2nd class is balanced but 3rd class shows a big difference being quite likely to die if you where in 3rd class.","5d1bcd86":"# Titanic Survival Kaggle Dataset\n\nTo import all necessary libraries for each stage.","7a60d1c8":"Again we confirm our expectations. This feature shows that being a female if in your family there is a dead child you will very likely not survive.","85ab92ee":"The first step is to visually inspect both datasets.","fae2117a":"We should confirm that all the missing values have been filled.","6d1b1095":"As last step let's compare with the correct values to see the accuracy of the model.'PassengerId'df_result_check","7ee3c4fe":"To be able to analyse the data as a whole and also to deal with NaN values I join both datasets.\n\nWe need to record any identification to be able to separate later both datasets, in this case PassengerId will work.","0a62b11f":"### 2.2. Embarked\n\nEmbarked shows similar problem, so we can change a string feature to a numerical feature.\n\n- S --> 0\n- C --> 1\n- Q --> 2","5004a7df":"# 3. Data Exploration\n\nIn this step we will try to get a better understanding of each feature and its relation with Survived mainly but also between each other.\n\nFirst we can start by plotting a similar heatmap as before to identify strong correlations to study.","f358d83a":"We can see that most of the people are under the common titles (Master, Miss, Mr, Mrs). I will try to pack the uncommon ones in less categories.\n\n- Capt, Col and Majo --> Military Rank\n- Don --> Mr\n- Dona --> Mrs\n- Dr, Jonkheer, Lady, Sir, rev --> High class\n- Mlle --> Miss\n- Mme --> Mrs\n- Ms --> Mrsdf_all_title_Survived_count\n- the --> Mr","d0aedbc0":"We can identify that the features that shows some correlation with Age are:\n- Pclass, strong inverse relation (the higher (1st, 2nd and 3rd) the class the higher the age.\n- SibSp, it looks like that travel with spouse (SibSp = 1) might mean that you middle age or more. But if SibSp is higher than one usually you are child traveling with siblings.\n- Parch, similar reasoning applies to Parch, just 1 or 2 means you are a child traveling with parents but more means that you have children. Both combined should be quite meaningful.\n- Fare, this is very related to Pclass as the higher the class the higher the fare. To be able to group using fare we will need to bin the feature first.","a035df31":"We can identify how A, B and C and partially D and F are 1st class cabins, and then F and part of the unknown cabins are 2nd class. G is full 3rd class as well as the unknown part of cabin feature.\n\nThe most likely is that the 3rd class passengers were assigned to very crowded cabin areas with lack of registration.\n\nSo far we can find some value in cabin feature as it helps to distribute the passengers per class in the ship.","60d2c17e":"Just from this table we can extract some initial information:\n\n- Survived is not completelly balanced, less than 40% of the people that we have data did survive.\n- Pclass seems to have more of its values of 3rd class.\n- There are 1307 unique names, composed by name, surname and title.\n- The most frequent sex is male.\n- The distribution of age seems quite normal, being the mean and median similar.\n- Although there are people traveling with 8 siblings\/spouse, the most common is to travel alone and after that to travel with just one sibling\/spouse.\n- Also it is very strange to travel with parents\/children.\n- Even though it is not as unique as Name feature, Ticket shows 929 unique values.\n- Fare feature seems to be quite skewed to the left with a long tail to the right.\n- Cabin feature is probably one of the most difficult to deal with because it is mostly filled with NaN values and unique values.\n- Embarked seems to be quite unbalanced, where most of the people embarked at Southampton.","2978a495":"We can see how the median of the first class is the highest with most of the people (25%-75%) between 30 and 50 years old. Not many outlayers, although the extreme quartiles covers almost the range because there are some children and elder people.\n\nSecond class is similar but with main body of the box slightly younger and the extremes not so spread.\n\nThe 3rd class as expected is the youngest one, but without children and babies and just elder people as outliers. Also the age range that covers is quite smaller.\n\nAll 3 follow a kind of normal distribution, being by far the 3rd class the most common one.\n\nAs summary, we can clearly see the relation between Age and Pclass.","db6f5774":"### 2.1. Sex\n\nThe feature sex does not have NaN values, but as they are strings it would be difficult to deal with it.\n\nTherefore what we can do is convert it to a binary feature. 0 --> Male | 1 --> Female.","58f28174":"As we have been commenting so far, most of the people travels alone. But it is interesting to see how as the amount of parents\/children increases, so does the fare.\n\nAnd not only in amount but also in spread. This might be because children's tickets are paid by their parents or because the people that travel with family can usually afford better tickets. I expect the workers to travel alone.","434ea8ec":"#### 2.1.5. Embarked\n\nThere are just two missing values in embarked feature, initially I would use a similar approach as with Age, but being just two, let's inspect the lines to see if we can do it better.","dabc48b5":"## 3.4. SibSp\n\nSeems that SibSp has a good correlation with age, fare and Parch.\n\nLets inspect these relations.","204943bd":"The confusion matrix shows 502 classified as dead and 47 classified as dead when they are actualy alive.\n\nIn the case of passengers that are actually alive, the model found 266 correctly alive, but 76 that are actualy dead were found as survivors.\n\nThe false positives are probably our worst performance.\n\nLet's see now the result in the test set:","3e7fbc81":"The correlation factor calculated before is a bit misleading because the cabin named as \"Other\" has a big weight and it is mostly 3rd class.\n\nBut we still can see, as commented before, some relation of Pclass with the allocated cabin.\n\n1st class had allocated mainly cabins from 0 to 2, being 3 and 4 mixed with 2nd class. The 3rd class was concentrated in cabin 5 and 6 and probably in the unknown ones.","0faa484b":"## 2. Data Cleaning","818113df":"## 3.3. Age\n\nSeems that Pclass has a good correlation with Pclass (already covered), SibSp, Parch, Fare and Cabin_Letter.\n\nLets inspect these relations.","2e4ba084":"## 4.2. Surname\n\nFrom name feature we can also extract the surname.\n\nIt will not be used on the prediction model, but it will be useful to get more powerful features.","be88edeb":"The age of this two passengers are not filled because there is no more passengers with its combination of Pclass, SibSp, Parch and Fare. Therefore I will fill them just using Pclass and Fare to group and extract the data.","16946161":"# 5. Model Evaluation\n\nI have already run through many iterations using some of the most common classification algorithm and I have got consistently the best result using XGBoost Classifier.\n\nIn this case I will use RepeatedStratifiedKFold to select the hyperparameters of the model.","a1b5f525":"### 2.3. Fare\n\nAs in this numerical continuous feature we have just one missing value, we can fill it with the meadian value.\n\nTo be a bit more accurate we can aggregate the values by Pclass as it is of key importance for ticket cost.","1d947ca7":"In this case I have removed Parch values under 4 because of the same reason as before.\n\nAgain, most of the people travels alone, and they are mostly between 25 and 35 years old.\n\nThe passengers traveling with just one parent or children covers a huge range, from less than 10 to more than 40. It means that there is a mix of single parents traveling with their child or viceversa.\n\nThe case of passengers traveling with 2 parents or children are most likely to be children with their parents or young people with children.\n\n3 or more parents\/children means mainly parents traveling with their children because the age range is mostly between 20 to 50.","4a7a3517":"## 3.5. Parch\n\nSeems that Parch has a good correlation with Sex, age, fare and SibSp.\n\nLets inspect these relations.","7486e954":"There are still two missing values. Let's inspect them one by one to understand why.","6acf3570":"There is not much insight in this feature correlation, basically shows a high value because of the massive amount of people traveling alone.\n\nAlso that the families tend to be smal, a part from the passengers traveling alone, most of the passengers travel with a family size of 1-2.","ce9808c9":"We can quickly see how some cabins are more likely to survive, possibly because it was easier to get to the deck or because they were far from the first sinking part of the boat.\n\nAlso seems that there is some correlation between Survived-Pclass-Cabin, which makes sense.\n\nLooking to these results, we can leave the missing values as other as it still provides some useful information.\n\nTo work better with this feature I will map it to convert it to numerical feature.","0869b2d2":"In this case 1st class shows the biggest range by far, 1st class tickets are the most expensive ones as expected. And also the most variable as they are luxury tickets I suppose they could be more customizable.\n\nThe second class shows to be cheaper than 1st and also more concentrated in lower cost with just some tickets falling in 1st class usual values.\n\nThe 3rd class is the closest to zero in terms of cost as expected.\n\nAll three classess shows quite skewed distribution, being the 3rd one with high skewness very close to zero.\n\nAgain we can confirm the correlation between Pclass and fare looking to the distribution.","2ed4a903":"We can identify how A, B and C and partially D and F are 1st class cabins, and then F and part of the unknown cabins are 2nd class. G is full 3rd class as well as the unknown part of cabin feature.\n\nThe most likely is that the 3rd class passengers were assigned to very crowded cabin areas with lack of registration.\n\nSo far we can find some value in cabin feature as it helps to distribute the passengers per class in the ship.As expected most of the passenger are in the missing cabin letter, almost none in G and T and then the other categories are more balanced. Although B and C are very predominant.\n\nThe fact that we have so little known values in general and also specifically for some of the categories that are less than 5 makes very difficult to fill the missing values with meaningful data.\n\nFrom now I will keep the other category and check if cabin letter still provides some meaningful information.","72752f78":"I have removed the values of Other in Cabin because it makes difficult to read the graph and also it won't give us value as it comes from missing values.\n\nAs expected, the cabins occupied of first and second class are mainly of middle age passengers (30-50 approx.).\n\nAnd the cabins expected to be for 3rd class shows younger passengers (workers) more concentrated between 20 to 30 years old.\n\nWe can see how almost all features give us socio-economic insights and are theoretically related one with each other.","b2a48260":"Now we can use the method .describe() to get some statistical values for each feature.","92cfac9a":"I have removed some outliers, mainly in fare feature to get a better visualization. Otherwise a few points makes difficult to see actual distribution.\n\nComparing Age and fare it is quite difficult to find some insight.\n\nWe can appreciate a tendency of the increase of fare with the age. Which makes sense because the older the \"higher\" you can get social-economically.\n\nThe age feature follows a normal distribution centered in around 25-30 which also is logical and confirms previous comments.","d418f46d":"To finalize let's check each feature importance to see which ones were more determinant.","dd41d392":"## 3.1. Pclass\n\nSeems that Pclass has a good correlation with survived, age, fare and Cabin_Letter.\n\nLets inspect these relations.","69001c39":"#### 2.1.6. Cabin\n\nThe next feature to correct is embarked but it shows a 77% of missing values. First we should identify if it is worth to spend time on it.\n\nI will start substituting NaN values with Other.\n\nAlso the cabin is compound by a letter and a number. The letter is likely to show the area in the boat and then the number should say specifically the room.\n\nThey area where you have the room seems that can be important to survive. Depends on how close it is from the deck or if it is closer to the sinking part of the boat, etc.df_all_cabin_count = df_all.groupby(['Cabin_Letter']).count()\ndf_all_cabin_count = df_all_cabin_count['Cabin'].apply(lambda x: 100*x\/df_all.shape[0])\n\ndf_all_cabin_count.index\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('% of People per Cabin Area',\n         fontdict = {'fontsize': 25})\n\nsns.barplot(x = df_all_cabin_count.index,\n           y = df_all_cabin_count)df_all_cabin_count = df_all.groupby(['Cabin_Letter']).count()\ndf_all_cabin_count = df_all_cabin_count['Cabin'].apply(lambda x: 100*x\/df_all.shape[0])\n\ndf_all_cabin_count.index\n\nplt.figure(figsize = (10,8))\nsns.set(font_scale = 1.2)\nsns.set_style('ticks')\nplt.title('% of People per Cabin Area',\n         fontdict = {'fontsize': 25})\n\nsns.barplot(x = df_all_cabin_count.index,\n           y = df_all_cabin_count)","c676fe8d":"Now we can see how all the columns, but Survived, have no missing values.\n\nThe next step is to procceed to the exploration analysis.","f8b06b94":"The correlation between Sex and Survived is very strong.\n\nThe males survived in a very small percentaje, almost 5 times more died than survived.\n\nIn the case of females, it is just the opposite, more than double females survived than died.","93526419":"Looking to the distribution of survived passengers per title, we can clearly see that there is a different proportion of survived depending on your title, therefore this feature will help us.\n\nWe can see that Mr title, that are the male over that are not children anymore, have a very high death rate.\n\nBut on the other hand, the titles for young people (Master and Miss) show a higher survival rate, similar to married women (Mrs).\n\nOpposite to what we could expect, soldier and upper class does not show a high survival rate, although the popuplation on these groups is small.","0d3adc34":"Both sex travel mostly alone, with less frequency they travel with 1 or 2 parents\/children and less frequently but mostly women travel with more than 2 parents\/childre.\n\nWe can translate this information into:\n\n- People traveling with 1-2 parents\/children are a mix of adults with children and children with their parents. Although I guess more of the second option.\n- In the case of more than 2, it is likely that are couples with children or a women with its children. Being more frequent the second option.","584f0c00":"Now we can identify and describe each feature:\n\n- Categorical features:\n    - Pclass: Ordinal feature that shows the class of the ticket. 1: 1st Class, 2: 2nd Class, 3: 3rd Class\n    - Sex: Categorical feature that identifies the genre.\n    - Embarked: Categorical feature that identifies the port in which the passenger embarked.\n    - Survived: Categorical feature that shows whether the passenger survived or not.\n\n- Numerical features:\n    - Age: Continuous numerical feature of the age of the passenger.\n    - Fare: Continuous numerical feature of the cost of the ticket.\n    - SibSp: Discrete numerical feature showing the amount of siblings and spouse in the boat.\n    - Parch: Discrete numerical feature showing the amount of parents and children in the boat.\n\n- Other features:\n    - Name: Name of the passenger, we will use this feature to derive others features more useful.\n    - Ticket: Ticket number of the passenger, we might use this feature to derive passengers that bought the ticket together.","b2b2d1fc":"## 4.3. Male Survived\n\nWe have seen during the exploration that males have less survival rate than females.\n\nWe can combine sex feature with surname and survived features to create a new feature that shows if within the family there is any male that survived.\n\nIf the male in a family survived, it is more likely that the women or children survive.","a1575c58":"To get a better visualization I have remove the values of SibSp over 4, as they are very little.\n\nSimilarly as Parch, most of the passenger travels alone and they are middle age, mostly between 25-35.\n\nThe next biggest group is passenger traveling with 1 SibSp, and we can understand that in this case they are mainly couples covering a bigger range than the people traveling alone. Although they are also middle age, 20-40. In this case there are some children traveling with just one sibling.\n\nThe passengers traveling with more than 1 Sibling\/Spouse are younger, basically the higher the Sib\/Sp the younger the passenger. Basically this groups are children and some young people traveling in family.","142bff00":"This relationship confirms what we were expecting, the cabins 5 and 6 that are composed of 3rd class mainly cost a fare very close to 0 in a highly skewed distribution.\n\nThe rest of Cabins of 1st and 2nd class show more variable fare cost not following an initial tendency. I suppose it is related with some extra items of each cabin, even though all are 1st class there are always addons to purchase.","296076e4":"The most important classes are quite expected:\n\n- We saw that having \"Mr\" as title had very low chances to survive.\n- Being of 3rd class was bad for your survival chances.\n- Woman in a family with dead children has shown to be very useful, although it was kind of expected just looking to the graph.\n- The rest of created features have been important enough to be worth to use them.\n- Alone has not been used, so probable we could keep just the family size feature and get the same result. Probably if we were using other algorithm this \"duplicated\" feature may have helped further.","9ba57ffd":"We can see that the next variables have NaN values that we will need some action:\n- Age = 263 NaN values.\n- Fare = 1 NaN value.\n- Cabin = 1014 NaN values.\n- Embarked = 2 NaN values.","2fd2dbb0":"As we have been seen previously first and second class have much better survival rate and this is translated to the cabins 0 to 4 that are mainly occupaid by those passenger classes.\n\nIt is interesting the case of the cabin 0 that shows a different tendecy, maybe even though it is full of 1st class passengers, it was not in the optimum location to survive.# 4. Feature Engineering\n\n## 4.1 Title\n\nThe first feature we can create is a title feature.\n\nFrom name feature we can extract the title and workout different groups that can add socio-economic insights.\n\nIt is also interesting to see that the 3rd class cabins 5-6 have a kind of balanced survival rate, it means (and we can confirm) that most of the non-survival passengers from 3rd class had unknown cabin details.","adab8812":"The fare feature per sex shows a quite skewed distribution for both sex.\n\nAs expected male is much closer to zero as most of the males traveling where workers and poor people. Although there are high cost tickets for males but its percentage is very low.\n\nFemale passengers, even though it is skewed towards zero as well, it covers a higher range of ticket costs.","0c136a25":"They happen to have the same ticket number, therefore they should have embarked from the same place. Looking for the names in internet, they did from Southampton, therefore I can replace NaN with a 0.","19571091":"## 4.5. Family Size\n\nIt might be also useful for the model to have a combind feature of Parch + SibSp + 1 to represent the total size of the family.","67db5fdd":"## 4.6. Scale and Dummy Variables\n\nNow that we created all the features we should scale the continuous variables and encode the categorical ones.\n\nThe model will work better, faster as minimum, and probably will give us a better result.","62a9702e":"Again we can identify insight in this new feature. Basically as it was expected, it translates in that if in your family there is a male that survived, your chances to survive are higher.","4e396060":"Before to start this Notebook, I would like to add a quick introductory note.\n\nThis is my first Notebook and also my first coding mini-project. I am using the notebook to put in action what I have learnt so far.\n\nBefore starting the notebook I have read many Titanic Notebooks to learn coding and machine learning best practicies and also to take ideas to start. Therefore I would like to thank to all the community that shares their Notebooks as it is helping a lot to beginners like me.\n\nAlso, I made this Notebook based on many iterations of feature engineering and model selection. Anyone can also check that \"pre-work\" in the next link:\n\nhttps:\/\/github.com\/diequies\/Titanic_Kaggle\n\nNow let's start with the actual Notebook and please do not hesitate to comment anything that can help my learning.","c26133d5":"### 2.4. Age\n\nAge feature also have missing values but in this case 263, it means that we need to do it with more care if we don't want to lose accuracy.\n\nThe appropriate method is to use the median and again aggregating the age in meaningful groups.\n\nTo find which features are appropriate to group the age we can use a heatmap with the correlation for each feature with the rest.","58601252":"## 1. Data Reading","251f98b1":"def find_female_child_died(surname):\n    data = df_all[((df_all['Surname'] == surname) & (df_all['Sex'] == 1) & (df_all['Age'] > 14)) | ((df_all['Surname'] == surname) & (df_all['Age'] < 14))]\n    woman_child_survive = 0\n    i = 0\n    if data.shape[0] > 1:\n        while ((i <= data.shape[0]-1) & (woman_child_survive == 0)):\n            if data['Survived'].iloc[i] == np.nan:\n                continue\n            elif data['Survived'].iloc[i] == 0:\n                woman_child_survive = 1\n            i += 1\n    else:\n        return 0\n    return woman_child_survive\n\ndf_all['Family_woman_child_died'] = df_all['Surname'].apply(lambda x: find_female_child_died(x))\ndf_all[df_all['Family_woman_child_died'] == 1]## 4.4. Female with died child\n\nIn the same way we can compute which women passenger have in their family a died children.\n\nAt that time the women were the major responsible of taking care of the children, therefore if a woman have a children dead in his family it will be more likely for her to be dead."}}