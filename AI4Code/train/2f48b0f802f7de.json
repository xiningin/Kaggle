{"cell_type":{"a2d18d2d":"code","9cea91c1":"code","f1d99fcb":"code","87ce9529":"code","1bcde837":"code","9fb11ecd":"code","2cfc01b5":"code","48aa668f":"code","e4761818":"code","1589115d":"code","a76d0a70":"code","6b0f0a00":"code","0e32f09a":"code","2a87e976":"code","0f7fd035":"code","7f55bd9d":"code","e333e439":"code","d7955d41":"code","c15ea1c8":"code","b7226014":"code","dad7bf7d":"code","84119b9b":"code","3c515484":"code","f3c53457":"code","adf8ea9a":"code","df5b5f6d":"code","2f85cdf4":"code","aee64d5a":"code","e40b0e91":"code","c1a416d6":"code","e6aad13e":"code","c62459d3":"markdown","8cd4c75b":"markdown","ce82a9f5":"markdown","5b5716da":"markdown","f2935377":"markdown","02d6eb8d":"markdown","155cfee0":"markdown","453b8cd3":"markdown","577e5d61":"markdown","d4e494bd":"markdown","aba27103":"markdown","163b3699":"markdown","9316aab6":"markdown"},"source":{"a2d18d2d":"#import modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nfrom sklearn.preprocessing import MinMaxScaler","9cea91c1":"import pandas_datareader as web\ndf = web.DataReader('AAPL', data_source = 'yahoo', start = '2010-01-01', end = '2020-09-09')\n#df.head(5)\ndf.tail(12)\n#df.shape","f1d99fcb":"df = web.DataReader('AAPL', data_source = 'yahoo', start = '2010-01-01', end = '2020-08-31')\n#df.head(5)\ndf.tail(5)\n#df.shape","87ce9529":"df.columns.tolist()","1bcde837":"#check null values\ndf.isnull().sum().sort_values(ascending = False)","9fb11ecd":"#data visulization\nwith plt.style.context('dark_background'):\n    plt.figure(figsize = (20,10))\n    plt.title('Price History of Yahoo stock', fontsize = 22)\n\n    plt.xlabel('Date', fontsize = 22)\n    plt.ylabel('Close Price $', fontsize = 22)\n    plt.plot(df['Close'])\nplt.show()","2cfc01b5":"#target column\ndf_target = df.filter(['Close']).values\ndf_target.shape","48aa668f":"df_train_len = int((df_target.shape[0]-60)* 0.8 + 60) #since we will use each 60 days of data\ndf_train_len","e4761818":"#scale the data\nscaler = MinMaxScaler(feature_range = (0,1))\ndf_target_scaled = scaler.fit_transform(df_target)","1589115d":"#split train and test data\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\ntrain_data = df_target_scaled[0:df_train_len, :]\ntest_data = df_target_scaled[df_train_len - 60:, :]\n\n#create new X and y training datasets\nX_train = []\ny_train = []\nfor i in range (60, len(train_data)):\n    X_train.append(train_data[i-60:i, ]) #each X represent 60 days previous data\n    y_train.append(train_data[i, 0])\n\n#create new X and y testing datasets\nX_test = []\ny_test = df_target_scaled[df_train_len:, :] #actual data\nfor i in range (60, len(test_data)):\n    X_test.append(test_data[i-60:i, ]) #each X represent 60 days previous data\n    #y_train.append(test_data[i, 0])\n","a76d0a70":"X_train, y_train, X_test = np.array(X_train), np.array(y_train), np.array(X_test)\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train.shape","6b0f0a00":"X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\nX_test.shape","0e32f09a":"#import unsupervised learning models\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM","2a87e976":"#build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences = False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","0f7fd035":"#compile model\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')","7f55bd9d":"#train model\nmodel.fit(X_train, y_train, batch_size = 1, epochs = 1)","e333e439":"#predict model\npredictions = model.predict(X_test)\npredictions = scaler.inverse_transform(predictions)","d7955d41":"y_test = scaler.inverse_transform(y_test)\nrmse = np.sqrt(np.mean(predictions - y_test) ** 2)\nrmse","c15ea1c8":"#Plot the data\ntrain = df.filter(['Close'])[:df_train_len]\nvalid = df.filter(['Close'])[df_train_len:]\nvalid['Predictions'] = predictions\n\nwith plt.style.context('bmh'):\n    plt.figure(figsize = (20,10))\n    plt.title('Model of Yahoo stock Price', fontsize = 22)\n\n    plt.xlabel('Date', fontsize = 22)\n    plt.ylabel('Close Price $', fontsize = 22)\n    plt.plot(train['Close'])\n    plt.plot(valid[['Close', 'Predictions']])\n    plt.legend(['Train', 'Val', 'Predictions'], loc = 'upper right')\nplt.show()","b7226014":"X_test_lastday = []\nX_test_lastday.append(scaler.transform(df.filter(['Close'])[-60:].values))\nX_test_lastday = np.array(X_test_lastday)\nX_test_lastday = np.reshape(X_test_lastday, (X_test_lastday.shape[0], X_test_lastday.shape[1], 1))\npred_price = model.predict(X_test_lastday)# using previous model","dad7bf7d":"print('Our predict 09\/01\/2020 stock price is: {}$'.format(scaler.inverse_transform(pred_price)[0][0]))","84119b9b":"df_today = web.DataReader('AAPL', data_source = 'yahoo', start = '2020-09-01', end = '2020-09-01')\nprint('09\/01\/2020 stock price is: {}$'.format(df_today['Close'][0]))","3c515484":"from sklearn.neighbors import KNeighborsRegressor","f3c53457":"#by original dataset\ndf_scaled = pd.DataFrame(df_target_scaled, columns = ['Close Price'])\ndf_scaled['Prediction'] = df_scaled[['Close Price']].shift(-60)\ndf_scaled","adf8ea9a":"X = np.array(df_scaled.drop(['Prediction'],1))[: -60]\ny = np.array(df_scaled.drop(['Close Price'],1))[: -60]\nX_last_60days = np.array(df_scaled.drop(['Prediction'],1))[-60:]","df5b5f6d":"X_train, y_train, X_test, y_test = X[:df_train_len], y[:df_train_len], X[df_train_len:], y[df_train_len:]","2f85cdf4":"model = KNeighborsRegressor(n_neighbors = 60)\n#if we need to find the best parameter, we can use GridSearchCV","aee64d5a":"from sklearn.model_selection import GridSearchCV","e40b0e91":"parameters = {'n_neighbors': list(range(11)) + [20,40,60],\n             'weights': ['uniform', 'distance'],\n             'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']}\ngrid = GridSearchCV(model, parameters)\ngrid.fit(X_train, y_train)\npredictions = grid.predict(X_test)\npredictions = scaler.inverse_transform(predictions)","c1a416d6":"y_test = scaler.inverse_transform(y_test)\nrmse = np.sqrt(np.mean(predictions - y_test) ** 2)\nrmse","e6aad13e":"train = df.filter(['Close'])[:df_train_len]\nvalid = df.filter(['Close'])[df_train_len:-60]\nvalid['Predictions'] = predictions\nwith plt.style.context('bmh'):\n    plt.figure(figsize = (20,10))\n    plt.title('Model of Yahoo stock Price KNN', fontsize = 22)\n\n    plt.xlabel('Date', fontsize = 22)\n    plt.ylabel('Close Price $', fontsize = 22)\n    plt.plot(train['Close'])\n    plt.plot(valid[['Close', 'Predictions']])\n    plt.legend(['Train', 'Val', 'Prediction'], loc = 'upper right')\nplt.show()","c62459d3":"### Predict model","8cd4c75b":"test the result to find 09\/01\/2020's stock price","ce82a9f5":"# Data preprocessing\n### Definitions of columns:\n\nHigh: highest stock price of the day\n\nlow: lowest stock price of the day\n\nOpen: Opening price of the stock\n\nClose: Closing price of the stock\n\nVolume: Volume of the stock\n\n","5b5716da":"### Feature engineering","f2935377":"A good model should have rmse less than 180, great.\n\nhttps:\/\/www.includehelp.com\/ml-ai\/root-mean-square%20error-rmse.aspx","02d6eb8d":"No null values","155cfee0":"2. KNeighborsRegressor\n\nSince in Keras, we are using 60 days' cloest data to approximate the close price, KNeighborsRegressor is regression based on k-nearest neighbors. It might be a good choice.","453b8cd3":"Data source and tutorial: https:\/\/www.youtube.com\/watch?v=QIUxPv5PJOY&t=2399s","577e5d61":"Split train and test datasets","d4e494bd":"Since for last 60 days, we have no data to check them, remove them.","aba27103":"# Load the data","163b3699":"1. Keras\n\nI'm using 60 day's closing price before, to predit the next day's closing price","9316aab6":"### Explore data"}}