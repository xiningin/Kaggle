{"cell_type":{"688aa656":"code","1c3519a5":"code","c98092b0":"code","211de27e":"code","2ef230b8":"code","35508ae0":"code","a0a77466":"code","ea7287a2":"code","dcd3e3b7":"code","8852fb4f":"code","af4152bc":"code","f7ebf1f0":"code","5c654bc2":"code","9826bc6d":"code","82c76725":"code","744434ef":"code","4c3d9dcd":"code","c1085136":"code","e470a871":"code","3f8c8d4a":"code","fa823333":"code","bdc15b24":"code","06fb4244":"code","2677bdb8":"code","635f3f94":"code","7dd1cf2b":"code","860a4a13":"code","5a71c01c":"code","efb4ac06":"code","4987e476":"code","0c52e9bb":"markdown","2a1bc9d4":"markdown","58d785a1":"markdown","b489f458":"markdown","86dd8f77":"markdown","ece5ab46":"markdown","b6e793bf":"markdown","7bd1d15a":"markdown","9539b20c":"markdown","cfb07979":"markdown","bd4319c4":"markdown","420e228a":"markdown","9911de2e":"markdown","31e6cf66":"markdown","52e23321":"markdown","ccdb7769":"markdown"},"source":{"688aa656":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt # data visualization\nfrom sklearn.cluster import KMeans # Import Sklearn KMeans clustering \nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c3519a5":"df = pd.read_csv('..\/input\/mall-customers\/Mall_Customers.csv')\n# check first five rows\ndf.head()","c98092b0":"df.describe()","211de27e":"df.isnull().sum()","2ef230b8":"df.dtypes","35508ae0":"# Count Genre \ndf.Genre.value_counts()","a0a77466":"# Groupby Genre visualization\n# df.groupby('Genre').Genre.value_counts().unstack().plot.bar()\nsns.countplot(x='Genre', data=df)\nplt.title('Customer gender density')\nplt.show()","ea7287a2":"totalgenre = df.Genre.value_counts()\ngenrelabel = ['Female', 'Male']","dcd3e3b7":"plt.axis('equal') # For perfect circle\nplt.pie(totalgenre, labels=genrelabel, radius=1.5, autopct='%0.2f%%', shadow=True, explode=[0, 0], startangle=45)\n# radius increase the size, autopct for show percentage two decimal point\nplt.title('Pie Chart Depicting Ratio of Female & Male')\nplt.show() \n#remove extra text","8852fb4f":"df['Age'].describe()","af4152bc":"my_bins=10\n# Histogram used by deafult 10 bins . bins like range.\narr=plt.hist(df['Age'],bins=my_bins, rwidth=0.95) \nplt.xlabel('Age Class')\nplt.ylabel('Frequency')\nplt.title('Histogram to Show of Age Class')\nfor i in range(my_bins):\n    plt.text(arr[1][i],arr[0][i],str(arr[0][i]))","f7ebf1f0":"plt.boxplot(df[\"Age\"])\nplt.title('Boxplot for Descriptive Analysis of Age')\nplt.show()","5c654bc2":"df['Annual Income (k$)'].describe()","9826bc6d":"my_bins=10\n# Histogram used by deafult 10 bins . bins like range.\narr=plt.hist(df['Annual Income (k$)'],bins=my_bins, rwidth=0.95) \nplt.xlabel('Age Class')\nplt.ylabel('Frequency')\nplt.title('Histogram to Show of Age Class')\nfor i in range(my_bins):\n    plt.text(arr[1][i],arr[0][i],str(arr[0][i]))","82c76725":"# Density Plot and Histogram of all arrival delays\nsns.distplot(df['Annual Income (k$)'], hist=True, kde=True, \n            color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","744434ef":"# Check the summary of Spending Score of the Customers\ndf['Spending Score (1-100)'].describe()","4c3d9dcd":"my_bins=10\n# Histogram used by deafult 10 bins . bins like range.\narr=plt.hist(df['Spending Score (1-100)'],bins=my_bins, rwidth=0.95) \nplt.xlabel('Spending Score Class')\nplt.ylabel('Frequency')\nplt.title('Histogram for Spending Score')\nfor i in range(my_bins):\n    plt.text(arr[1][i],arr[0][i],str(arr[0][i]))","c1085136":"plt.boxplot(df[\"Spending Score (1-100)\"])\nplt.title('Boxplot for Descriptive Analysis of Spending Score')\nplt.show()","e470a871":"km = KMeans(n_clusters=3)\nkm","3f8c8d4a":"y_predicted = km.fit_predict(df[['Annual Income (k$)', 'Spending Score (1-100)']])\n# clustering\ny_predicted","fa823333":"df['cluster'] = y_predicted\ndf.head()","bdc15b24":"#check centroid\nkm.cluster_centers_","06fb4244":"df0 = df[df.cluster == 0]\ndf1 = df[df.cluster == 1]\ndf2 = df[df.cluster == 2]","2677bdb8":"plt.scatter(df0['Annual Income (k$)'], df0['Spending Score (1-100)'], color='green')\nplt.scatter(df1['Annual Income (k$)'], df1['Spending Score (1-100)'], color='red')\nplt.scatter(df2['Annual Income (k$)'], df2['Spending Score (1-100)'], color='black')\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:,1], color='yellow', marker='o', label='centroid', s=200)\nplt.xlabel('Anual Income')\nplt.ylabel('Spending Score')\nplt.legend(['Cluster1', 'Cluster2', 'Cluster3', 'centroid'])","635f3f94":"k_rng = range(1, 10)\nsse = []\nfor k in k_rng:\n    km = KMeans(n_clusters=k)\n    km.fit(df[['Annual Income (k$)', 'Spending Score (1-100)']])\n    sse.append(km.inertia_)\nsse","7dd1cf2b":"plt.xlabel('K')\nplt.ylabel('Sum of Square Error(SSE)')\nplt.plot(k_rng, sse)","860a4a13":"km = KMeans(n_clusters=5)\ny_predicted = km.fit_predict(df[['Annual Income (k$)', 'Spending Score (1-100)']])\n# clustering\ny_predicted","5a71c01c":"df['cluster'] = y_predicted\ndf.head()","efb4ac06":"km.cluster_centers_","4987e476":"df0 = df[df.cluster == 0]\ndf1 = df[df.cluster == 1]\ndf2 = df[df.cluster == 2]\ndf3 = df[df.cluster == 3]\ndf4 = df[df.cluster == 4]\nplt.scatter(df0['Annual Income (k$)'], df0['Spending Score (1-100)'], color='green')\nplt.scatter(df1['Annual Income (k$)'], df1['Spending Score (1-100)'], color='red')\nplt.scatter(df2['Annual Income (k$)'], df2['Spending Score (1-100)'], color='blue')\nplt.scatter(df3['Annual Income (k$)'], df3['Spending Score (1-100)'], color='cyan')\nplt.scatter(df4['Annual Income (k$)'], df4['Spending Score (1-100)'], color='magenta')\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:,1], color='yellow', marker='o', label='centroid', s=150)\nplt.xlabel('Anual Income')\nplt.ylabel('Spending Score')\nplt.legend(['Cluster1', 'Cluster2', 'Cluster3', 'Cluster4', 'Cluster5', 'centroid'])","0c52e9bb":"# K-Means Algorithm\nK-means clustering is one of the simplest and popular unsupervised machine learning algorithms.\n\nEvery data point is allocated to each of the clusters through reducing the in-cluster sum of squares. In other words, the K-means algorithm identifies k number of centroids, and then allocates every data point to the nearest cluster, while keeping the centroids as small as possible. In here we used elbow Method.\n\n**Elbow Method**\n\nThe KElbowVisualizer implements the \u201celbow\u201d method to help data scientists select the optimal number of clusters by fitting the model with a range of values for K. If the line chart resembles an arm, then the \u201celbow\u201d (the point of inflection on the curve) is a good indication that the underlying model fits best at that point. In the visualizer \u201celbow\u201d will be annotated with a dashed line.","2a1bc9d4":"# Implement Customer Segmentation\n\n","58d785a1":"**Check elbow and SSE**","b489f458":"**Read Datasets with pandas**","86dd8f77":"**Check null values & datatypes**","ece5ab46":"*From the above graph, we conclude that the percentage of females is 56%, whereas the percentage of male in the customer dataset is 44%.*\n\n# Visualization of Age Distribution with Histogram\n\nLet us plot a histogram to view the distribution to plot the frequency of customer ages. We will first proceed by taking summary of the Age variable.","b6e793bf":"**Check means, std ... with pandas describe method**","7bd1d15a":"From the above barplot, we observe that the number of females is higher than the males. Now, let us visualize a pie chart to observe the ratio of male and female distribution.\n\n**Create pie chart**","9539b20c":"The minimum spending score is 1, maximum is 99 and the average is 50.20. We can see Descriptive Analysis of Spending Score is that Min is 1, Max is 99 and avg. is 50.20. From the histogram, we conclude that customers between class 40 and 50 have the highest spending score among all the classes.","cfb07979":"# Analysis of the Annual Income of the Customers\n\nwe will create visualizations to analyze the annual income of the customers. We will plot a histogram and then we will proceed to examine this data using a density plot.","bd4319c4":"From the above descriptive analysis, we conclude that the minimum annual income of the customers is 15 and the maximum income is 137. People earning an average income of 70 have the highest frequency count in our histogram distribution. The average salary of all the customers is 60.56. ","420e228a":"# Analyzing Spending Score of the Customers\n","9911de2e":"# Customer Gender Visualization\n\nIn this, we will create a barplot and a piechart to show the gender distribution across our customer_data dataset.","31e6cf66":"From the above two visualizations, we conclude that the maximum customer ages are between 30 and 35. The minimum age of customers is 18, whereas, the maximum age is 70.","52e23321":"# About\n\n\n**About Mall Datasets**\n\nThis dataset contains information about people visiting the mall. The dataset has gender, customer id, age, annual income, and spending score.\n\n**What is Customer Segmentation?**\n\nCustomer Segmentation is the process of division of customer base into several groups of individuals that share a similarity in different ways that are relevant to marketing such as gender, age, interests, and miscellaneous spending habits.\n\n**Environment setup & import neccesary library**","ccdb7769":"In figure elbow checking k = 5 is good point."}}