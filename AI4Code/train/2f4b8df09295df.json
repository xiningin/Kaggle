{"cell_type":{"7fe17b81":"code","5960426b":"code","a0948a22":"code","e88e66e2":"code","c0df77d7":"code","36818100":"code","d2b6b331":"code","946b6d27":"code","55af27ae":"code","92c46f02":"code","9fc2f31e":"code","24d30884":"code","eeb937bd":"code","14f6d0c4":"code","76e79471":"code","61bb5cee":"code","db903b74":"code","7b9049ca":"code","619c8289":"code","6febff91":"code","c753991f":"code","ca1ae10e":"code","8bc9cdb2":"code","bf897a1e":"code","e14aa62c":"code","17dfa1f9":"code","5577e827":"code","aed66198":"code","fb5249d1":"code","fc6d998d":"code","9644b60d":"code","42ea7c9b":"code","fef8820f":"code","b65e9422":"code","bd720f4c":"code","26db2ce0":"code","1beb91e5":"code","bcb2fb23":"code","7877fcfe":"code","7dd1a840":"code","ed005849":"code","034f71ab":"code","b611fb4e":"code","71e472e9":"code","82718a36":"code","e646853b":"code","00191071":"code","a86dcae4":"code","d6dc6031":"code","7bede9de":"code","0572d432":"code","044059c7":"code","1848b2ed":"code","6df9c70b":"code","6ed558f2":"code","da1185a6":"code","a00adcb8":"code","906ba4e9":"code","8bf5ffab":"code","ff9a1520":"code","a5ecf221":"code","80eed3f1":"code","869f22fc":"code","4f6f85ff":"code","842afa1a":"code","3cc20509":"code","b8b25bfb":"code","28af5330":"code","e5de6631":"code","9982c8ee":"code","1e73e0d9":"code","ff9e6630":"code","867f31b2":"code","84a8d5d8":"code","baf4d9aa":"code","152d48f3":"code","8b415d49":"code","99fcd5b7":"code","952739ad":"code","e91d69da":"code","eee13ca7":"code","a2583fde":"code","1b0eeff3":"code","1984e312":"code","7dc77da8":"code","a98f9f1c":"code","d98d4460":"code","cf15e07e":"code","5a2a4dbb":"code","a81e2ef3":"code","dc6c1ea4":"code","a89718cd":"code","533b37c6":"markdown","53b6f000":"markdown","acf95897":"markdown","07b4f17a":"markdown","a3b4fbd9":"markdown","3c26dfd1":"markdown","a0f2c858":"markdown","098b1525":"markdown","e61d2cec":"markdown","0c0f3eef":"markdown","ffca0d8a":"markdown","0b8bc89d":"markdown"},"source":{"7fe17b81":"# import 'Pandas' \nimport pandas as pd \n\n# import 'Numpy' \nimport numpy as np\n\n# import subpackage of Matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\n# import 'Seaborn' \nimport seaborn as sns\n\n# to suppress warnings \nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\n# display all columns of the dataframe\npd.options.display.max_columns = None\n\n# display all rows of the dataframe\npd.options.display.max_rows = None\n \n# to display the float values upto 6 decimal places     \npd.options.display.float_format = '{:.6f}'.format\n\n# import train-test split \nfrom sklearn.model_selection import train_test_split\n\n# import StandardScaler to perform scaling\nfrom sklearn.preprocessing import StandardScaler \n\n# import various functions from sklearn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# import the XGBoost function for classification\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","5960426b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0948a22":"df = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')","e88e66e2":"df.head()","c0df77d7":"df.shape","36818100":"df.info()","d2b6b331":"df.describe()","946b6d27":"#missing values","55af27ae":"df.isnull().sum()","92c46f02":"#percentage of missing values","9fc2f31e":"df.isnull().sum()\/df.shape[0] *100","24d30884":"sns.heatmap(df.isnull(), cbar = False)","eeb937bd":"plt.rcParams['figure.figsize'] = [12,12]\ndf.hist()\nplt.show()","14f6d0c4":"j = []\nskew = []\nkurtosis = []\nfor i in df.columns[:9]:\n    j.append(i)\n    skew.append(df[i].skew())\n    kurtosis.append(df[i].kurt())\nskew_kurtosis = pd.DataFrame({'column name': j, 'skew':skew, 'kurtosis':kurtosis})\nskew_kurtosis","76e79471":"k = 1\nplt.figure(figsize = (30,30))\nfor i in df.columns[:9]:\n    plt.subplot(5,3,k)\n    sns.distplot(df[i])\n    k+=1","61bb5cee":"k = 1\nplt.figure(figsize =(20,20))\nfor i in df.columns[:9]:\n    if(df[i].dtypes != 'object'):\n        plt.subplot(4,4,k)\n        sns.boxplot(x=df[i])\n        k+=1","db903b74":"#since we have outliers we use median","7b9049ca":"#As the median value is not affected by the presence of outliers, replace the null values in the variables by median","619c8289":"df['ph'] = df['ph'].fillna(df['ph'].median())\ndf['Sulfate'] = df['Sulfate'].fillna(df['Sulfate'].median())\ndf['Trihalomethanes'] = df['Trihalomethanes'].fillna(df['Trihalomethanes'].median())","6febff91":"df.isnull().sum()","c753991f":"df.describe()","ca1ae10e":"plt.rcParams['figure.figsize'] = [12,12]\ndf.hist()\nplt.show()","8bc9cdb2":"df.nunique()","bf897a1e":"print(df['Potability'].value_counts())\n","e14aa62c":"sns.countplot(data=df, x='Potability')","17dfa1f9":"sns.pairplot(df)","5577e827":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),annot=True, cmap=\"YlGnBu\")","aed66198":"# harness and pH has high correlation\n#sulfate and solids has low correlation","fb5249d1":"X= df.drop('Potability',axis=1)\ny= df['Potability']","fc6d998d":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 20, test_size=0.3)","9644b60d":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","42ea7c9b":"lr= LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred_lr = lr.predict(X_test)\nprint(classification_report(y_test,y_pred_lr))","fef8820f":"y_act = y_test  # True o\/p\ny_pred = y_pred_lr # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","b65e9422":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","bd720f4c":"acc_log = (tn+tp)\/(tn+tp+fn+fp)\nacc_log","26db2ce0":"dt = DecisionTreeClassifier(random_state=1)\ndt.fit(X_train,y_train)\ny_pred_dt = dt.predict(X_test)\nprint(classification_report(y_test,y_pred_dt))","1beb91e5":"y_act = y_test  # True o\/p\ny_pred = y_pred_dt # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","bcb2fb23":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","7877fcfe":"acc_dec = (tn+tp)\/(tn+tp+fn+fp)\nacc_dec","7dd1a840":"rf= RandomForestClassifier(random_state=1)\nrf.fit(X_train,y_train)\ny_pred_rf = rf.predict(X_test)\nprint(classification_report(y_test,y_pred_rf))","ed005849":"y_act = y_test  # True o\/p\ny_pred = y_pred_rf # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","034f71ab":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","b611fb4e":"acc_ran = (tn+tp)\/(tn+tp+fn+fp)\nacc_ran","71e472e9":"xgb= XGBClassifier(random_state=1)\nxgb.fit(X_train,y_train)\ny_pred_xgb = xgb.predict(X_test)\nprint(classification_report(y_test,y_pred_xgb))","82718a36":"y_act = y_test  # True o\/p\ny_pred = y_pred_xgb # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","e646853b":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","00191071":"acc_XG = (tn+tp)\/(tn+tp+fn+fp)\nacc_XG","a86dcae4":"ada = AdaBoostClassifier(random_state = 1)\nada.fit(X_train,y_train)\ny_pred_ada = ada.predict(X_test)\nprint(classification_report(y_test,y_pred_ada))","d6dc6031":"y_act = y_test  # True o\/p\ny_pred = y_pred_ada # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","7bede9de":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","0572d432":"acc_Ada = (tn+tp)\/(tn+tp+fn+fp)\nacc_Ada","044059c7":"gra = GradientBoostingClassifier(random_state=1)\ngra.fit(X_train,y_train)\ny_pred_gra = gra.predict(X_test)\nprint(classification_report(y_test,y_pred_gra))","1848b2ed":"y_act = y_test  # True o\/p\ny_pred = y_pred_gra # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","6df9c70b":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","6ed558f2":"acc_GB = (tn+tp)\/(tn+tp+fn+fp)\nacc_GB","da1185a6":"#Random forest ranks first with accuracy of 0.6673448626653102","a00adcb8":"# lets work on the outliers treatment and very we go with models","906ba4e9":"def outlier_treatment(column):\n    q1 = df[column].quantile(0.25)\n    q3 = df[column].quantile(0.75)\n    iqr = q3-q1\n    ul = q3 +1.5*iqr\n    ll = q1 -1.5*iqr\n    return ll, ul","8bf5ffab":"for i in df.columns[:9]:\n    w_limit = outlier_treatment(i)\n    df = df[~((df[i] < w_limit[0]) | (df[i]>w_limit[1]))]","ff9a1520":"k = 1\nplt.figure(figsize =(20,20))\nfor i in df.columns[:9]:\n    if(df[i].dtypes != 'object'):\n        plt.subplot(4,4,k)\n        sns.boxplot(x=df[i])\n        k+=1","a5ecf221":"df.shape","80eed3f1":"df.describe()","869f22fc":"X= df.drop('Potability',axis=1)\ny= df['Potability']","4f6f85ff":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 20, test_size=0.3)","842afa1a":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","3cc20509":"lr= LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred_lr = lr.predict(X_test)\nprint(classification_report(y_test,y_pred_lr))","b8b25bfb":"y_act = y_test  # True o\/p\ny_pred = y_pred_lr # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","28af5330":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","e5de6631":"acc_log1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_log1","9982c8ee":"dt = DecisionTreeClassifier(random_state=1)\ndt.fit(X_train,y_train)\ny_pred_dt = dt.predict(X_test)\nprint(classification_report(y_test,y_pred_dt))","1e73e0d9":"y_act = y_test  # True o\/p\ny_pred = y_pred_dt # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","ff9e6630":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","867f31b2":"acc_dec1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_dec1","84a8d5d8":"rf= RandomForestClassifier(random_state=1)\nrf.fit(X_train,y_train)\ny_pred_rf = rf.predict(X_test)\nprint(classification_report(y_test,y_pred_rf))","baf4d9aa":"y_act = y_test  # True o\/p\ny_pred = y_pred_rf # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","152d48f3":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","8b415d49":"acc_ran1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_ran1","99fcd5b7":"xgb= XGBClassifier(random_state=1)\nxgb.fit(X_train,y_train)\ny_pred_xgb = xgb.predict(X_test)\nprint(classification_report(y_test,y_pred_xgb))","952739ad":"y_act = y_test  # True o\/p\ny_pred = y_pred_xgb # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","e91d69da":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","eee13ca7":"acc_XG1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_XG1","a2583fde":"ada = AdaBoostClassifier(random_state = 1)\nada.fit(X_train,y_train)\ny_pred_ada = ada.predict(X_test)\nprint(classification_report(y_test,y_pred_ada))","1b0eeff3":"y_act = y_test  # True o\/p\ny_pred = y_pred_ada # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","1984e312":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","7dc77da8":"acc_Ada1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_Ada1","a98f9f1c":"gra = GradientBoostingClassifier(random_state=1)\ngra.fit(X_train,y_train)\ny_pred_gra = gra.predict(X_test)\nprint(classification_report(y_test,y_pred_gra))","d98d4460":"y_act = y_test  # True o\/p\ny_pred = y_pred_gra # model o\/p\nsns.heatmap(confusion_matrix(y_act,y_pred),annot=True, linewidth = 0.1)","cf15e07e":"cnf_mat = confusion_matrix(y_act,y_pred)\ntn = cnf_mat[0,0]\ntp = cnf_mat[1,1]\nfp = cnf_mat[0,1]\nfn = cnf_mat[1,0]\ntn,tp,fp,fn","5a2a4dbb":"acc_GB1 = (tn+tp)\/(tn+tp+fn+fp)\nacc_GB1","a81e2ef3":"# again random forest has accuracy of 0.6353383458646616","dc6c1ea4":"models = pd.DataFrame({\n'Model': ['Logistic Regression','Decision Tree',\n              'Random Forest','ADA Boost','Gredient Boost','XG Boost'],\n    'Accuracy before outliers treatment': [acc_log,acc_dec,\n              acc_ran,acc_Ada,acc_GB,acc_XG],\n    'Accuracy after outliers treatment': [acc_log1,acc_dec1,\n              acc_ran1,acc_Ada1,acc_GB1,acc_XG1]})\nmodels.sort_values(by='Accuracy before outliers treatment', ascending=False)","a89718cd":"models.to_csv(\"svm_linear.csv\",index = False)","533b37c6":"#### ADA BOOST","53b6f000":"#### ADA BOOST","acf95897":"#### XG BOOST","07b4f17a":"#### Logistic regression","a3b4fbd9":"#### Random forest","3c26dfd1":"#### XG BOOST","a0f2c858":"#### Random forest","098b1525":"#### Logistic regression","e61d2cec":"#### GRADIENT BOOSTING","0c0f3eef":"#### Decision Tree ","ffca0d8a":"#### Decision Tree ","0b8bc89d":"#### GRADIENT BOOSTING"}}