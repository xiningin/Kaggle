{"cell_type":{"97dcb6a7":"code","e4cecf9a":"code","9899450c":"code","b7cd8cbe":"code","d2dba40c":"code","d5716377":"code","f09eba32":"code","5374262d":"code","699577c4":"code","19677d6d":"code","abc481b2":"code","d49ed13a":"code","bd2742f9":"code","afaf0280":"code","2cf04a4f":"code","1dbb4f0d":"markdown","a01456fd":"markdown","5d7a269c":"markdown","804aa9b7":"markdown","b50a466b":"markdown","287dfb78":"markdown","e8bded54":"markdown","7fa30760":"markdown","3ed8a4bc":"markdown","bbca0e0b":"markdown","b1745a40":"markdown","266dde9f":"markdown","f27ff681":"markdown","f270d3e3":"markdown","4cdb6701":"markdown","b27557eb":"markdown"},"source":{"97dcb6a7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport warnings\nwarnings.filterwarnings('ignore')","e4cecf9a":"df = pd.read_csv('..\/input\/openpowerlifting.csv')\ndf.head(2)","9899450c":"labels = ['Male','Female']\ncolors = ['#1e90ff', '#E1396C']\ngender = df['Sex'].value_counts()\nvalues = list(gender.values)\n\ntrace = go.Pie(labels=labels, values=values,hoverinfo='label+percent',marker=dict(colors=colors, \n                           line=dict(color='#000000', width=2)))\n\npy.iplot([trace], filename='gender_chart')","b7cd8cbe":"age = df['Age'].value_counts()\nx = age.index\ny = age.values\n\nlayout = go.Layout(\n    title='Age distribution of Powerlifters',\n    xaxis=dict(\n        title='Age',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Number of Powerlifters',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\n\ndata = [go.Bar(\n            x=x,\n            y=y\n    )]\npy.iplot(go.Figure(data=data, layout=layout))\n","d2dba40c":"val = df['BodyweightKg'].value_counts()\ntrace1 = go.Scatter(\n    x = val.index,\n    y = val.values,\n    mode='markers',\n    marker=dict(\n        size=16,\n        color = val.values, #set color equal to a variable\n        colorscale='Viridis',\n        showscale=True\n    )\n)\n\nlayout = go.Layout(\n    title='Weight distribution of Powerlifters',\n    xaxis=dict(\n        title='Weight in Kg',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=dict(\n        title='Number of Powerlifters',\n        titlefont=dict(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\n\ndata = [trace1]\n\npy.iplot(go.Figure(data=data, layout=layout))","d5716377":"classes = df['WeightClassKg'].value_counts()\ndiv = df['Division'].value_counts()\nclasses = classes[classes.values > 6260]\ndiv = div[div.values > 2000]","f09eba32":"fig = {\n  \"data\": [\n    {\n      \"values\": classes.values,\n      \"labels\": classes.index,\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"Weight Class in Kg\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\": div.values,\n      \"labels\": div.index,\n      \"text\":[\"CO2\"],\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"Division\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Weight Classes & Division Distribution of Powerlifters\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Classes\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"Division\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\npy.iplot(fig, filename='donut')\n\n\n\n      ","5374262d":"eq = df['Equipment'].value_counts()\nvalues = eq.values\nphases = eq.index\ncolors = ['rgb(32,155,160)', 'rgb(253,93,124)', 'rgb(28,119,139)', 'rgb(182,231,235)', 'rgb(35,154,160)']\nn_phase = len(phases)\nplot_width = 400\n\n# height of a section and difference between sections \nsection_h = 100\nsection_d = 10\n\n# multiplication factor to calculate the width of other sections\nunit_width = plot_width \/ max(values)\n\n# width of each funnel section relative to the plot width\nphase_w = [int(value * unit_width) for value in values]\n\n# plot height based on the number of sections and the gap in between them\nheight = section_h * n_phase + section_d * (n_phase - 1)\n\n# list containing all the plot shapes\nshapes = []\n\n# list containing the Y-axis location for each section's name and value text\nlabel_y = []\n\nfor i in range(n_phase):\n        if (i == n_phase-1):\n                points = [phase_w[i] \/ 2, height, phase_w[i] \/ 2, height - section_h]\n        else:\n                points = [phase_w[i] \/ 2, height, phase_w[i+1] \/ 2, height - section_h]\n\n        path = 'M {0} {1} L {2} {3} L -{2} {3} L -{0} {1} Z'.format(*points)\n\n        shape = {\n                'type': 'path',\n                'path': path,\n                'fillcolor': colors[i],\n                'line': {\n                    'width': 1,\n                    'color': colors[i]\n                }\n        }\n        shapes.append(shape)\n        \n        # Y-axis location for this section's details (text)\n        label_y.append(height - (section_h \/ 2))\n\n        height = height - (section_h + section_d)\n# For phase names\nlabel_trace = go.Scatter(\n    x=[-350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=phases,\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n \n# For phase values\nvalue_trace = go.Scatter(\n    x=[350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=values,\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata = [label_trace, value_trace]\n \nlayout = go.Layout(\n    title=\"<b>Equipments used by Powerlifters<\/b>\",\n    titlefont=dict(\n        size=20,\n        color='rgb(203,203,203)'\n    ),\n    shapes=shapes,\n    height=560,\n    width=900,\n    showlegend=False,\n    paper_bgcolor='rgba(44,58,71,1)',\n    plot_bgcolor='rgba(44,58,71,1)',\n    xaxis=dict(\n        showticklabels=False,\n        zeroline=False,\n    ),\n    yaxis=dict(\n        showticklabels=False,\n        zeroline=False\n    )\n)\n \nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n\n\n","699577c4":"ag = df.groupby(['Age']).mean()\nwt =  df.groupby(['BodyweightKg']).mean()","19677d6d":"data = [\n    {\n        'x': ag.index,\n        'y': ag['Wilks'],\n        'mode': 'lines+markers',\n        'name': 'Wilks-Coefficient',\n    }\n]\n\nlayout = dict(title = 'Wilks Coefficient Distribution with respect to the Age of Powerlifters',\n              yaxis = dict(title = 'Wilks Coefficient', zeroline = False),\n              xaxis = dict(title= 'Age',zeroline = False)\n             )\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='scat')","abc481b2":"above = wt[wt['Wilks'] > 300]\nbelow = wt[wt['Wilks'] < 300]\n\n\ntrace0 = go.Scatter(\n    x = above.index,\n    y = above['Wilks'],\n    name = 'Above 300',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(152, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)'\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = below.index,\n    y = below['Wilks'],\n    name = 'Below 300',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2,\n        )\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(title = 'Wilks Coefficient Distribution with respect to the Weight of Powerlifters',\n              yaxis = dict(title = 'Wilks Coefficient', zeroline = False),\n              xaxis = dict(title= 'Weight in Kg',zeroline = False)\n             )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='styled-scatter')","d49ed13a":"pl =  df.groupby(['Place']).mean()\ndata = [\n    {\n        'x': pl.index,\n        'y': pl['Wilks'],\n        'mode': 'markers',\n        'name': 'Wilks-Coefficient',\n    }\n]\n\nlayout = dict(title = 'Wilks Coefficient Distribution with respect to the Place of Powerlifters',\n              yaxis = dict(title = 'Wilks Coefficient', zeroline = False),\n              xaxis = dict(title= 'Place',zeroline = False)\n             )\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='scat')","bd2742f9":"data = [\n    {\n        'x': df['TotalKg'],\n        'y': df['Wilks'],\n        'mode': 'markers',\n        'name': 'Wilks-Coefficient',\n    }\n]\n\nlayout = dict(title = 'Wilks Coefficient Distribution with respect to the Place of Powerlifters',\n              yaxis = dict(title = 'Wilks Coefficient', zeroline = False),\n              xaxis = dict(title= 'Place',zeroline = False)\n             )\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='scat')","afaf0280":"from plotly import tools\ndeadlift = go.Scatter(\n    x = ag.index,\n    y = ag['BestDeadliftKg'],\n    mode='markers',\n    name='Deadlift'\n)\nSquat = go.Scatter(\n    x = ag.index,\n    y = ag['BestSquatKg'],\n    mode='markers',\n    name='Squat'\n\n)\nBench = go.Scatter(\n    x = ag.index,\n    y = ag['BestBenchKg'],\n    mode='markers',\n    name='Bench'\n)\n\nTotal = go.Scatter(\n    x = ag.index,\n    y = ag['TotalKg'],\n    mode='markers',\n    name='Total'\n \n)\n\nfig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Max Deadlift', 'Max Squat',\n                                                          'Max Benchpress','Total Kgs'))\n\nfig.append_trace(deadlift, 1, 1)\nfig.append_trace(Squat, 1, 2)\nfig.append_trace(Bench, 2, 1)\nfig.append_trace(Total, 2, 2)\n\n\nfig['layout'].update(height=800, width=1000, title='Age of Powerlifters' +\n                                                  ' with respect to parameters')\n\npy.iplot(fig, filename='sub')","2cf04a4f":"df[(df['Age'] == 93)]","1dbb4f0d":"## Take a bow Dan Mason","a01456fd":"** Distribution of Bodyweight of Powerlifters**","5d7a269c":"## The Equipments used by Powerlifters","804aa9b7":"**Male vs Female distribution in the dataset**","b50a466b":"The Wilks Coefficient increases as age increases(It peaks in their 20s and 30s) and decreases as powerlifters become old which is normal and predictable......But it also looks like there is a 93 year old powerlifter with a high wilks coefficient....young by mind and body....quite fascinating","287dfb78":"****Most of the powerlifters are in their 20s and 30s......Looks like there is a 90 year old powerlifter and also a  5 year old ****","e8bded54":"**Looks like Most of the powerlifters don't use equipments (RAW)**\n\n- Single-ply suits\/shirts have one layer of material.\n\n- Multiply suits\/shirts have multiple layers of material.\n- Powerlifters also use straps and wraps\n","7fa30760":"- **About 9.4 % of the powerlifters seem to belong to the 90kg category followed by 8.95% in the 100 kg category**\n-  **About 30% of the powerlifters belong to the Open Division followed by about 25% in the Boys Division**","3ed8a4bc":"#### Wilks: \n- 300 is good\n- 400 is great.\n- 500 is elite.\n\n","bbca0e0b":"### Wilks Coefficient:\n\nThe Wilks Coefficient or Wilks Formula is a coefficient that can be used to measure the strength of a powerlifter against other powerlifters despite the different weights of the lifters. Robert Wilks, CEO of Powerlifting Australia, is the author of the formula.\nIt is the total weight lifted (in kg) is multiplied by the Coefficient to find the standard amount lifted normalised across all body weights.\n","b1745a40":"***Woah Woah.....Looks like Place 1 Powerlifters have a low mean Wilks coefficient....Weird and interesting ***","266dde9f":"# Plotly Visualization of Powerlifters","f27ff681":"## Total of weights lifted vs Wilks of Powerlifters**","f270d3e3":"The Graphs seem to look very much similar.....but I couldnt help but notice an anamoly as the powerlifters get older\n\n### An Exceptionally Strong 93 year powerlifter.....Who could that be ?","4cdb6701":"### Total weight in kg and Wilks have an almost linear relationship......Makes Sense","b27557eb":"A lot of Powerlifters between of 60 - 180 kg seem to have an above average Wilks Coefficient whereas as the weight increases or decreases normal levels...wilks also decreases"}}