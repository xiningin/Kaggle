{"cell_type":{"7b401608":"code","4b088530":"code","7edd26f7":"code","3195e90c":"code","25018279":"code","bbfa6f5b":"code","81a35596":"code","35e86b43":"code","5cfb965d":"code","f79d092e":"code","bf1719c8":"code","f8446205":"code","349d9156":"code","f8d8e656":"code","4f4e36e0":"code","7ea57ef6":"code","29415306":"code","49389875":"code","59b3cdf9":"code","ed271733":"code","649bc654":"code","9fcbf62c":"code","f5dd4f68":"code","018a6a58":"code","2e5ddc9f":"code","2eac76f7":"code","3b6e766e":"code","ba6b1465":"code","e0b09614":"code","87d61cb8":"code","601e117c":"markdown","7867c918":"markdown","3cbd3e9e":"markdown","3b0f137a":"markdown","b305d61d":"markdown","43dcef98":"markdown","0720742b":"markdown","902d5480":"markdown","ebae4b89":"markdown","ad996a64":"markdown","dfea8d61":"markdown","3549b7f7":"markdown","f2ff27e1":"markdown","e8a04222":"markdown","8ade8265":"markdown","743f54ca":"markdown","880486da":"markdown","90bc9e0a":"markdown","1a195eaf":"markdown","39355e36":"markdown","96603659":"markdown","582c2d28":"markdown","59c4545a":"markdown","1eecce53":"markdown","72d1b0c3":"markdown","ad610b2f":"markdown"},"source":{"7b401608":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import plot_confusion_matrix, classification_report, f1_score\nfrom sklearn.model_selection import train_test_split ,GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\n\nfrom scipy.stats import norm\nfrom scipy import stats\n\n#Classification Models:\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, StackingClassifier\n\n#Supress Warnings:\nimport warnings\nwarnings.filterwarnings('ignore')","4b088530":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_df = train_df.set_index(\"PassengerId\")\ntrain_df.head()","7edd26f7":"train_df.shape","3195e90c":"train_df.columns.values","25018279":"train_df.info()","bbfa6f5b":"round(train_df.isnull().sum(axis=0)*100\/train_df.shape[0],2)","81a35596":"# Rows containing duplicate data\nduplicate_rows_df = train_df[train_df.duplicated()]\nprint(f'number of duplicate rows: {duplicate_rows_df.shape}')","35e86b43":"train_df.describe()","5cfb965d":"train_df.Survived.unique()","f79d092e":"train_df.Survived.value_counts()","bf1719c8":"fig, ax = plt.subplots(1, 2, figsize=(12,5))\ntrain_df[\"Sex\"].value_counts().plot(kind='bar',\n                                    title= \"Gender count in the training data\",\n                                    xlabel= 'Sex',\n                                    ylabel= 'Count',\n                                    ax=ax[0])\n\nax[1].set_title(\"Number of survivors per gender\")\nsns.countplot(data=train_df, \n              x=\"Sex\",\n              hue=\"Survived\",\n              ax=ax[1])\n\nplt.show()","f8446205":"sns.boxplot(x=train_df['Fare'])","349d9156":"sns.boxplot(x=train_df['Age'])","f8d8e656":"sns.displot(data=train_df,\n            x=\"Age\",\n            col=\"Sex\",\n            hue=\"Survived\");","4f4e36e0":"plt.figure(figsize=(20,10))\nc= train_df.corr()\nsns.heatmap(c,cmap='BrBG',annot=True)\nc","7ea57ef6":"type_category=['Sex', 'Cabin', 'Embarked', 'Ticket']","29415306":"for df in [train_df, test_df]:\n    for i in type_category:\n        df[i]=df[i].astype(\"category\")\n    df['Name']=df['Name'].astype(\"string\")","49389875":"train_df.dtypes","59b3cdf9":"train_df=train_df.fillna(train_df.mean())","ed271733":"test_df=test_df.fillna(test_df.mean())","649bc654":"train_df = train_df.fillna(train_df.mode().iloc[0]) ","9fcbf62c":"test_df = test_df.fillna(test_df.mode().iloc[0]) ","f5dd4f68":"round(train_df.isnull().sum(axis=0)*100\/train_df.shape[0],2)","018a6a58":"for df in [train_df, test_df]:\n    df[\"Sex\"] = df[\"Sex\"].map({\"male\":1, \"female\":0, 1:1, 0:0})\n    df[\"Embarked\"] = df[\"Embarked\"].map({\"Q\":0, \"C\":1 ,\"S\":2 ,2:2 ,1:1, 0:0})\n    \ntrain_df.head()","2e5ddc9f":"selected_features=[\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\",\"Fare\", 'Embarked']\n\nX_train, X_val, y_train, y_val = train_test_split(train_df[selected_features],\n                                                  train_df[\"Survived\"],\n                                                  test_size = 0.1,\n                                                  stratify = train_df[\"Survived\"],\n                                                  random_state=0)\n\nX_test = test_df[selected_features]\n\nX_train.head()","2eac76f7":"sc = StandardScaler()\nscaled_features = [\"Age\", \"Fare\"]\n\nsc.fit(X_train[scaled_features])\n\nfor df in [X_train, X_val, X_test]:\n    df[scaled_features] = sc.transform(df[scaled_features])\n    \nX_train.describe()","3b6e766e":"print(\"\\033[1mSupport Vector Machine Classifier:\\033[0m\")\n# model = RandomForestClassifier(n_estimators=100,\n#                                criterion=\"entropy\",\n#                                max_depth=4,\n#                                min_samples_split=4,\n#                                bootstrap=True,\n#                                max_samples=0.8,\n#                                oob_score=True,\n#                                n_jobs=-1,\n#                                random_state=0)\nmodel = SVC(C=11,\n            kernel=\"rbf\",\n            gamma=\"scale\",\n            break_ties=True,\n            random_state=0)\nmodel.fit(X_train, y_train)\ncross_val_score(model, X_train, y_train, cv=5).mean()","ba6b1465":"print(\"The accuracy of the classifier on the test set is \", (model.score(X_train, y_train)))\nprint(\"The accuracy of the classifier on the validation set is \", (model.score(X_val, y_val)))","e0b09614":"test_df[\"Survived\"] = model.predict(X_test)\nsubmission = test_df[[\"PassengerId\", \"Survived\"]]\nsubmission","87d61cb8":"submission.to_csv('submission.csv', index=False)","601e117c":"### Normalize \"Age\" and \"Fare\" features","7867c918":"* fill missing values for categorical columns (using its own most frequent value)","3cbd3e9e":"### To check Outliers","3b0f137a":"# Exploratory Data Analysis(EDA)","b305d61d":"# Load training and test sets","43dcef98":"* Label of each column","0720742b":"* convert labels from object to their correct type.","902d5480":"* There is missing values in Sex , Cabin, Embarked columns","ebae4b89":"# Test Data predictions","ad996a64":"* Males are more than females in the dataset\n* Females survived more than males","dfea8d61":"### To check correlation","3549b7f7":"# Clean Data","f2ff27e1":"### Fill null values","e8a04222":"### Split training data into training and validation sets","8ade8265":"* Natably large differnece in 75th %tile and max values of predictors 'Fare', 'Age'.","743f54ca":"### Summary Statistics","880486da":"* Data has only float and integer, and object values","90bc9e0a":"* fill missing values for numerical columns with mean","1a195eaf":"# Preprocessing:","39355e36":"### Understanding Target variable","96603659":"* dataset comprises of 891 observations and 11 chracteriestics","582c2d28":"# Model Testing","59c4545a":"# Importing Libraries","1eecce53":"# Data Visualization","72d1b0c3":"* There is no duplicate rows","ad610b2f":"### Encode \"Sex\" and \"Embarked\" features"}}