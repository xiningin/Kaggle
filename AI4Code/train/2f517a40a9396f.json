{"cell_type":{"35de21fe":"code","a0b2f2b6":"code","3a2f7b90":"code","8bd856c4":"code","cb787ee1":"code","4bab68a5":"code","c41b948d":"code","3ab1ca3e":"code","5d23472a":"code","3fd96daa":"code","ff6f1ecc":"code","021bb668":"code","2cd2f824":"code","7c2e78ab":"code","bd77af51":"markdown"},"source":{"35de21fe":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer","a0b2f2b6":"import os\nprint(os.listdir(\"..\/input\/t-academy-recommendation2\/movies\/\"))","3a2f7b90":"# \uacbd\ub85c\uc758 \uacbd\uc6b0 \uac01\uc790\uc758 \ud658\uacbd\uc5d0 \ub9de\uac8c \uc124\uc815\ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4. \npath = '..\/input\/t-academy-recommendation2\/movies\/'","8bd856c4":"data = pd.read_csv(path + 'movies_metadata.csv', low_memory=False)\ndata.head(2)","cb787ee1":"# overview\uc758 \ud56d\ubaa9 \ucd94\ucd9c \ndata.columns","4bab68a5":"# \uc804\ucc98\ub9ac \n# overview\uc758 \uacb0\uce21\uce58\uac00 \uc788\ub294 \ud56d\ubaa9\uc740 \ubaa8\ub450 \uc81c\uac70 \ndata = data[data['overview'].notnull()].reset_index(drop=True)\ndata.shape","c41b948d":"data = data.loc[0:20000].reset_index(drop=True)","3ab1ca3e":"# \ubd88\uc6a9\uc5b4 : \uc720\uc758\ubbf8\ud558\uc9c0 \uc54a\uc740 \ub2e8\uc5b4 \ud1a0\ud070\uc744 \uc81c\uac70 \n# https:\/\/wikidocs.net\/22530\ntfidf = TfidfVectorizer(stop_words='english')\n\n# overview\uc5d0 \ub300\ud574\uc11c tf-idf \uc218\ud589\ntfidf_matrix = tfidf.fit_transform(data['overview'])\nprint(tfidf_matrix.shape)","5d23472a":"from sklearn.metrics.pairwise import cosine_similarity\ncosine_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n\n# \ub9cc\uc77c \uc5ec\uae30\uc11c \uba54\ubaa8\ub9ac \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc2e0 \ubd84\uc740 TF-IDF\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uc218\uc815\ud574\uc918\uc11c \ub2e4\uc2dc \ub3cc\ub9ac\uba74 \ub429\ub2c8\ub2e4. \n# tfidf = TfidfVectorizer(stop_words='english', max_features=10000)\n\n# \uadf8\ub798\ub3c4, \uc548\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \ubb38\uc11c\uc758 \uc218\ub97c \uc870\uae08 \uc904\uc5ec\uc11c \uc2e4\ud589\ud574\ubcf4\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4. \n# data = data.loc[0:10000].reset_index(drop=True)","3fd96daa":"cosine_matrix.shape","ff6f1ecc":"np.round(cosine_matrix, 4)","021bb668":"# movie title\uc640 id\ub97c \ub9e4\ud551\ud560 dictionary\ub97c \uc0dd\uc131\ud574\uc90d\ub2c8\ub2e4. \nmovie2id = {}\nfor i, c in enumerate(data['title']): movie2id[i] = c\n\n# id\uc640 movie title\ub97c \ub9e4\ud551\ud560 dictionary\ub97c \uc0dd\uc131\ud574\uc90d\ub2c8\ub2e4. \nid2movie = {}\nfor i, c in movie2id.items(): id2movie[c] = i","2cd2f824":"# Toy Story\uc758 id \ucd94\ucd9c \nidx = id2movie['Toy Story'] # Toy Story : 0\ubc88 \uc778\ub371\uc2a4 \nsim_scores = [(i, c) for i, c in enumerate(cosine_matrix[idx]) if i != idx] # \uc790\uae30 \uc790\uc2e0\uc744 \uc81c\uc678\ud55c \uc601\ud654\ub4e4\uc758 \uc720\uc0ac\ub3c4 \ubc0f \uc778\ub371\uc2a4\ub97c \ucd94\ucd9c \nsim_scores = sorted(sim_scores, key = lambda x: x[1], reverse=True) # \uc720\uc0ac\ub3c4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc815\ub82c \nsim_scores[0:10] # \uc0c1\uc704 10\uac1c\uc758 \uc778\ub371\uc2a4\uc640 \uc720\uc0ac\ub3c4\ub97c \ucd94\ucd9c ","7c2e78ab":"sim_scores = [(movie2id[i], score) for i, score in sim_scores[0:10]]\nsim_scores","bd77af51":"## TF-IDF \uc54c\uace0\ub9ac\uc998\n- \uc608\uc81c : https:\/\/wikidocs.net\/24603"}}