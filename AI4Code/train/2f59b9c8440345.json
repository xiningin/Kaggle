{"cell_type":{"229218b3":"code","b5e9b6b7":"code","924c953b":"code","54e6b642":"code","7a4c4bfe":"code","faeed141":"code","2ac7991e":"code","1d53656f":"code","4ee15cf2":"code","4bb4c536":"code","dbc1cf0b":"code","71f4387a":"code","34574de8":"code","d1f7f35d":"code","46abeafe":"code","166400d6":"code","e5d534a4":"code","945370c6":"code","ea1e44e7":"code","68888d82":"code","ae24340b":"code","badb1295":"code","283f10c2":"code","7add3809":"code","3675d1f1":"code","b68ebcdb":"code","a276bf7d":"code","8304ce15":"code","ef144d05":"code","509f5a44":"code","d1a55820":"code","50efb6c9":"code","78b7c20f":"code","45a19b0f":"code","f4a44bca":"code","7d97036f":"code","1fe5cb56":"code","1d3bfec1":"code","84d8b811":"code","739efd2c":"code","69dad4ee":"code","ee9e1c2f":"code","7c09d15e":"code","862c3602":"markdown","2d3a8799":"markdown","f095f9e3":"markdown"},"source":{"229218b3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nimport lightgbm as lgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import tree\nfrom sklearn.metrics import confusion_matrix","b5e9b6b7":"train = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/test.csv')","924c953b":"train.head()","54e6b642":"train.shape","7a4c4bfe":"train.Cover_Type.unique()","faeed141":"train.Cover_Type.value_counts()","2ac7991e":"train.describe().T","1d53656f":"cont_feat = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology', \n             'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', \n             'Horizontal_Distance_To_Fire_Points']","4ee15cf2":"fig, axes = plt.subplots(5,2,figsize = (15,27))\nfor num, feat in enumerate(cont_feat):\n    sns.boxplot(data = train, x = 'Cover_Type', y = feat, ax = axes[math.floor(num\/2),num%2])\n    plt.title(feat)","4bb4c536":"pd.crosstab(train.Cover_Type, train.Wilderness_Area1), pd.crosstab(train.Cover_Type, train.Wilderness_Area2), \\\npd.crosstab(train.Cover_Type, train.Soil_Type1), pd.crosstab(train.Cover_Type, train.Soil_Type5)","dbc1cf0b":"ytrain = train[['Cover_Type']]\nxtrain = train.drop(['Cover_Type', 'Id'], axis =1)","71f4387a":"\nscaler = StandardScaler()\nxtrain_scaled = scaler.fit_transform(xtrain[['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points']])\nscaled_df = pd.DataFrame(xtrain_scaled, columns = ['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points'])\nxtrain_scalled =pd.concat([scaled_df, xtrain[['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3',\n       'Wilderness_Area4', 'Soil_Type1', 'Soil_Type2', 'Soil_Type3',\n       'Soil_Type4', 'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8',\n       'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12',\n       'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16',\n       'Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20',\n       'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24',\n       'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28',\n       'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32',\n       'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36',\n       'Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40']].reset_index()], axis = 1)","34574de8":"X_embedded = TSNE(n_components=2,learning_rate=2000, perplexity = 100).fit_transform(xtrain_scaled)\ndata_stack = np.hstack((X_embedded, ytrain.values))\ndata_stack = pd.DataFrame(data_stack, columns = ['first', 'second', 'target'])\nplt.figure(figsize = (15,15))\nsns.scatterplot(data = data_stack, x = 'first', y = 'second', hue = 'target', palette=\"deep\")","d1f7f35d":"X_train, X_test, y_train, y_test = train_test_split(xtrain, ytrain, test_size=0.3, random_state=1)","46abeafe":"tree_clf = DecisionTreeClassifier()\n'''params_tree = {'max_depth': [6, 10,15,20, 25, 30],\n              'criterion': ['gini', 'entropy'],\n              'splitter': ['best', 'random'],\n              'min_samples_leaf': [1,5,10,15]}'''\nparams_tree = {'max_depth': [30],\n              'criterion': ['entropy'],\n              'splitter': ['random'],\n              'min_samples_leaf': [1]}\nsearch_tree = GridSearchCV(tree_clf, params_tree, cv = 5)","166400d6":"search_tree.fit(X_train, y_train)","e5d534a4":"search_tree.best_score_","945370c6":"search_tree.best_params_\n#{'criterion': 'entropy', 'max_depth': 30, 'min_samples_leaf': 1, 'splitter': 'random'}","ea1e44e7":"best_tree = search_tree.best_estimator_","68888d82":"text_representation = tree.export_text(best_tree)\nprint(text_representation)","ae24340b":"'''import graphviz\ndot_graph = export_graphviz(best_tree, class_names=['1','2','3','4','5','6','7'],\n                feature_names=X_train.columns, impurity=False, filled=True)\ngraphviz.Source(dot_graph)'''","badb1295":"imp = best_tree.feature_importances_\nplt.figure(figsize = (15,5))\nplt.bar(X_train.columns, imp)\nplt.xticks(rotation=90);","283f10c2":"accuracy_score(best_tree.predict(X_test), y_test)","7add3809":"random_forest = RandomForestClassifier()\n'''params_forest = {'n_estimators': [100,300,500,1000],\n                 'max_depth': [5,7,10,15,20],\n                 'min_samples_leaf': [1,5,10,15,20]}'''\nparams_forest = {'n_estimators': [500],\n                 'max_depth': [20],\n                 'min_samples_leaf': [1]}","3675d1f1":"grid_forest = GridSearchCV(random_forest,params_forest,cv = 5)\ngrid_forest.fit(X_train, y_train.values.ravel())","b68ebcdb":"grid_forest.best_score_","a276bf7d":"grid_forest.best_params_\n#{'max_depth': 20, 'min_samples_leaf': 1, 'n_estimators': 500}","8304ce15":"best_forest = grid_forest.best_estimator_","ef144d05":"imp = best_forest.feature_importances_\nplt.figure(figsize = (15,5))\nplt.bar(X_train.columns, imp)\nplt.xticks(rotation=90);","509f5a44":"result_cv = []\nresult_std = []\nfor i in range(1,31):\n    random_forest = RandomForestClassifier(n_estimators = 500, max_depth = i)\n    res = cross_val_score(random_forest, X_train, y_train.values.ravel())\n    result_cv.append(res.mean())\n    result_std.append(res.std())\nplt.figure(figsize = (10,5))\nplt.errorbar(range(1,31), result_cv, yerr=result_std)","d1a55820":"accuracy_score(best_forest.predict(X_test), y_test)","50efb6c9":"'''lgb_train = lgb.LGBMClassifier(objective = 'multiclass')\nparam_lgb = {'num_leaves': [25, 40,70,100,130,160],\n             'n_estimators': [100,300,700]}'''\nlgb_train = lgb.LGBMClassifier(objective = 'multiclass')\nparam_lgb = {'num_leaves': [100],\n             'n_estimators': [700]}","78b7c20f":"search = GridSearchCV(lgb_train, param_lgb, cv = 5)","45a19b0f":"search.fit(X_train, y_train.values.ravel())","f4a44bca":"search.best_params_\n#{'num_leaves': 150, 'n_estimators': 300, 'learning_rate': 0.1}\n#{'max_depth': -1, 'n_estimators': 700, 'num_leaves': 25}\n#{'n_estimators': 700, 'num_leaves': 100}","7d97036f":"search.best_score_","1fe5cb56":"best_lgbm = search.best_estimator_","1d3bfec1":"plt.figure(figsize = (15,5))\nplt.bar(X_train.columns, best_lgbm.feature_importances_)\nplt.xticks(rotation=90);","84d8b811":"accuracy_score(best_lgbm.predict(X_test), y_test)","739efd2c":"confusion_matrix(y_test, best_lgbm.predict(X_test))","69dad4ee":"plt.figure(figsize = (15,10))\nsns.heatmap(confusion_matrix(y_test, best_lgbm.predict(X_test)), fmt='', annot=True)","ee9e1c2f":"predict = best_lgbm.predict(test.drop('Id', axis = 1))\nsubmission = pd.DataFrame({'Id': test['Id'], 'Cover_Type': predict}).set_index('Id')\nsubmission.to_csv('sub.csv')","7c09d15e":"submission.head()","862c3602":"# LightGBM","2d3a8799":"# Decision Tree","f095f9e3":"# Random Forest"}}