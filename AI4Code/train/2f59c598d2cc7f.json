{"cell_type":{"fa5d6286":"code","0ba4c69d":"code","d34b4ad1":"code","665b6f36":"code","ed981eb2":"code","11268cfc":"code","261ddc14":"code","d7abc962":"code","ec023102":"code","c49e5039":"code","e17e15fc":"code","71c3eda8":"code","73177c47":"code","e2638b8e":"code","73a5b119":"code","25e72124":"code","facb004b":"code","deb4cfe3":"code","216a38c6":"code","b733c428":"code","98d4ba50":"code","b12fc86c":"code","d7961180":"code","dfdeebf3":"code","7d32377b":"code","42b3473d":"code","8e474452":"code","2acd0296":"code","c1309e71":"code","3f8c641f":"code","60002dc9":"markdown","2a2a0bf4":"markdown","d1d15d75":"markdown","c2785173":"markdown","78b9310e":"markdown","98dfc778":"markdown","e45c5389":"markdown","59a46f8f":"markdown","e6e408a4":"markdown","88fd7367":"markdown","9eff1157":"markdown","cf1063b2":"markdown","2dac3235":"markdown","dc936f22":"markdown","f66c3af0":"markdown","fa46f090":"markdown","d6bb30fc":"markdown","8aa3c78e":"markdown","c867376a":"markdown"},"source":{"fa5d6286":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","0ba4c69d":"df = pd.read_csv('..\/input\/nifty50-stock-market-data\/IOC.csv')\ndf.head()","d34b4ad1":"fig, ax = plt.subplots(figsize=(10,10))  \ndataplot = sns.heatmap(df.corr(), cmap=\"YlGnBu\", annot=True)","665b6f36":"data = df[['Date','Open','High','Low','Volume','VWAP']]","ed981eb2":"df.set_index(\"Date\", drop=False, inplace=True)","11268cfc":"df.Close.plot(figsize=(14, 7))","261ddc14":"data.info()\n","d7abc962":"df.reset_index(drop=True, inplace=True)\nlag_features = [\"Open\",\"High\", \"Low\",\"VWAP\"]\nwindow1 = 3\nwindow2 = 7\n\ndf_rolled_3d = df[lag_features].rolling(window=window1, min_periods=0)\ndf_mean_3d = df_rolled_3d.mean().shift(1).reset_index().astype(np.float32)\n\ndf_rolled_7d = df[lag_features].rolling(window=window2, min_periods=0)\ndf_std_7d = df_rolled_7d.std().shift(1).reset_index().astype(np.float32)\n\nfor feature in lag_features:\n    df[f\"{feature}_mean_lag{window1}\"] = df_mean_3d[feature].astype('float32')\n    df[f\"{feature}_std_lag{window2}\"] = df_std_7d[feature].astype('float32')","ec023102":"df.fillna(df.mean(), inplace=True)","c49e5039":"df.set_index(\"Date\", drop=False, inplace=True)\ndf.head()","e17e15fc":"df.Date = pd.to_datetime(df.Date, format=\"%Y-%m-%d\")\ndf[\"month\"] = df.Date.dt.month\ndf[\"day\"] = df.Date.dt.day\ndf[\"day_of_week\"] = df.Date.dt.dayofweek\ndf.head()","71c3eda8":"df = df.drop(columns=['Symbol'])\ndf = df.drop(columns=['Series'])","73177c47":"df_train = df[df.Date < \"2018\"]\ndf_valid = df[df.Date >= \"2018\"]","e2638b8e":"df_valid.shape","73a5b119":"!pip install keras\nimport tensorflow\nfrom sklearn.preprocessing import MinMaxScaler","25e72124":"df_train.head().T","facb004b":"y_train = df_train[\"Close\"]\nscaler=MinMaxScaler(feature_range=(0,1))\ny_train1=scaler.fit_transform(np.array(df_train['Close']).reshape(-1,1))\ny_trainn = df_train[\"Close\"].to_numpy().reshape(-1,1)","deb4cfe3":"y_valid = df_valid[\"Close\"]\nscaler1=MinMaxScaler(feature_range=(0,1))\ny_valid1=scaler1.fit_transform(np.array(df_valid['Close']).reshape(-1,1))\ny_validn = df_valid[\"Close\"].to_numpy().reshape(-1,1)","216a38c6":"X_train = df_train.drop(columns=[\"Close\"])\nX_train1 = X_train.drop(\"Date\", axis=1)\nX_train1 = (X_train1-X_train1.min())\/(X_train1.max()-X_train1.min())\nX_train2 = pd.concat((X_train1, X_train.Date), 1)","b733c428":"X_valid = df_valid.drop(columns=[\"Close\"])\nX_valid1 = X_valid.drop(\"Date\", axis=1)\nX_valid1 = (X_valid1-X_valid1.min())\/(X_valid1.max()-X_valid1.min())\nX_valid2 = pd.concat((X_valid1, X_valid.Date), 1)","98d4ba50":"X_train3 = X_train2.drop(columns=['Date']).to_numpy()\nX_valid3 = X_valid2.drop(columns=['Date']).to_numpy()\n","b12fc86c":"y_train1 = y_train1.reshape(-1,1)\ny_valid1 = y_valid1.reshape(-1,1)","d7961180":"!pip install xgboost\nimport xgboost as xgb\nimport sklearn\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance","dfdeebf3":"xgb = XGBRegressor(n_estimators=1000,learning_rate=0.01)\nxgb\n\nxgb.fit(X_train3,y_train1,eval_set=[(X_train3,y_train1),(X_valid3,y_valid1)],early_stopping_rounds=100,verbose=True) # Change verbose to True if you want to see it train","7d32377b":"plt.figure(figsize=(12,8))\nfeature_importance = plot_importance(xgb, height=0.9)\nfeature_importance","42b3473d":"predicted_results_v = xgb.predict(X_valid3)\npredicted_results_t = xgb.predict(X_train3)\npredicted_results_v= predicted_results_v.reshape(-1, 1)\npredicted_results_t= predicted_results_t.reshape(-1, 1)\npredicted_results_v = scaler1.inverse_transform(predicted_results_v)\npredicted_results_t = scaler.inverse_transform(predicted_results_t)","8e474452":"plt.figure(figsize=(20,15))\nplt.plot(X_train2.index,list(y_trainn),label=\"actual Price train\",color='b')\nplt.plot(X_train2.index,list(predicted_results_t),label=\"predicted Price train\",color='r')\nplt.plot(X_valid2.index,list(y_validn),label=\"actual Price valid\",color='m')\nplt.plot(X_valid2.index,list(predicted_results_v),label=\"predicted Price valid\",color='g')\n\nplt.xlabel('Date')\nplt.ylabel('Nifty 50 Closing Price')\nplt.legend()\nplt.show()","2acd0296":"xgb = XGBRegressor(n_estimators=1000,learning_rate=0.0099,max_depth=15)\nxgb\n\nxgb.fit(X_train3,y_train1,\n        eval_set=[(X_train3,y_train1),(X_valid3,y_valid1)],\n        early_stopping_rounds=100,\n        verbose=True) # Change verbose to True if you want to see it train","c1309e71":"predicted_results_v = xgb.predict(X_valid3)\npredicted_results_t = xgb.predict(X_train3)\npredicted_results_v= predicted_results_v.reshape(-1, 1)\npredicted_results_t= predicted_results_t.reshape(-1, 1)\npredicted_results_v = scaler1.inverse_transform(predicted_results_v)\npredicted_results_t = scaler.inverse_transform(predicted_results_t)","3f8c641f":"plt.figure(figsize=(20,15))\nplt.plot(X_train2.index,list(y_trainn),label=\"actual Price train\",color='b')\nplt.plot(X_train2.index,list(predicted_results_t),label=\"predicted Price train\",color='r')\nplt.plot(X_valid2.index,list(y_validn),label=\"actual Price valid\",color='m')\nplt.plot(X_valid2.index,list(predicted_results_v),label=\"predicted Price valid\",color='g')\n\nplt.xlabel('Date')\nplt.ylabel('Nifty 50 Closing Price')\nplt.legend()\nplt.show()","60002dc9":"Splitting Dataset into Training and Testing Data","2a2a0bf4":"Visual Representation of Closing Price","d1d15d75":"Setting Index as Date","c2785173":"Plotting Results of the Model","78b9310e":"Setting Date as Index and viewing Dataset","98dfc778":"Plotting Results of the Model","e45c5389":"### Importing XGBoost library","59a46f8f":"XGBoost Tuning","e6e408a4":"Extracting Date Time Features from the dataset \n","88fd7367":"Scaling Data and Transforming it for Training","9eff1157":"Training Model Again ","cf1063b2":"Plotting a Correlation Heatmap","2dac3235":"Generating New Features based on Important features","dc936f22":"### Importing Important Libraries \n\n\n*   Numpy- Used for Linear Algebra\n*   Pandas - Used for data processing \/ reading dataset\n*   Seaborn and Matplotlib - Used for graphical representation\n\n","f66c3af0":"Setting All Null\/NaN values of a feature as mean of that feature","fa46f090":"Removing Unneccesary features","d6bb30fc":"XGBoost has a few parameters that can dramatically affect your model's accuracy and training speed.\n\nWe will go through some of them in this session\n\n```\nxgb = XGBRegressor(n_estimators=1000)\n```\n\n*   n_estimators specifies how many times to go through the modeling cycle described above.\n*   Too low a value causes underfitting, which is inaccurate predictions on both training data and new data.\n*    Too large a value causes overfitting, which is accurate predictions on training data, but inaccurate predictions on new data (which is what we care about).\n*    You can experiment with your dataset to find the ideal. Typical values range from 100-1000, though this depends a lot on the learning rate.\n\n![index.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAXAAAACJCAMAAAACLZNoAAABcVBMVEX\/\/\/\/\/igAAAACbm5vq6ur09PS9vb3m5ubPz89gYGD5+fnHx8ff398XFxcrKyv\/gQD\/hgD\/fgDKysqwsLD4\/vq3t7d5eXnv7+\/V1dX\/\/fn\/9+06OjrAwMAoKCj+\/v\/7\/\/x8fHxBQUGpqany8fyGhob29f3d9uFoaGhLRcm06rrv+\/FTU1OPj4+YmJijo6P\/uHr\/8+X\/17Ll5Pf\/4scAAL4wy0LOzPBNTU1ZWVn\/x5b\/q17\/6dT\/wYz\/sWwAwQDQ8tRa02bZ1\/SL35QTExP\/o1D\/nT\/\/0Ki8uerFw+ySjt2rqOT\/lyxBOsd924dJ0FeLh9omHMOa46K77MFr2Hf\/kSN2cdU1LcVpZdCwreYSyC1R0V\/F78tm1nJZU82n56+F3Y+bmN9TTcuAe9dvadJR21I3PNTXlXx7O4X\/oy\/\/yYf\/tV1gW84KAMarnNAAYnqB05ktDKaCw6rLt9CbicW3rtilX3b\/oCclJRoAACQAAFMNDRwUBXvWAAAcf0lEQVR4nO1d+UMiu5YOCCJFKYvIJhYqgoI7CLYroiLggqKCu406b+bdy+xv5s3y10+SWqlKrWD37Td+P9BYQJ3ky8nJWZJqAL7whS984Qtf+MIXflVEhgeDsCXplGV5tMX+OkNDg0TIabYBS2HHIECPW+o+PWFRfHhZ586MyvXwsKWGqsG8og0NRrDTIuEBqwJ12s2oaV54wqpEIia+CGfhdFHkD\/7GCVeb2Dw+jXDa4yB\/8IMIVxlu8NmEO9UFY3wa4eMrKrb6xxDOOFQ7zjfc6YA\/DSONdAC4kIXhBfQj+NYJL8MLeKlyOODHDFQeBgkKOwRxKoS7VPSMh0A4EgMoLAwJYmBLwtgMOxiA7oH+Rn2gHExvu8lwhELT5E84wpEmUE7gdOK3YdxXKJ6Vz76lKCfFdRp2FC4KVBj\/BjVW6LcK4eGIase5hs\/OhDaXwDykjZ4B9lBoFsy45yedTvh2mB5zhkL26bmlkB12ww4i9nFALwIwtxhanOVuQybc6QloGxWOcMYNhUXA0FhojF4JjbrnKfiXfQZ+Mm4PQIkALNIuewj+u2yne9qtguHNzRmy48gRPg0bPrsMFqcoEPKAMff8TBx47NOhCOzxYgjE4VvX7HQktDgZGkedH4q4wZLdAcaXQNjtDm1GuNupEB4Yj6s1jW24C3VqJgLvCpbGmSnE0iQN3MPUGGJlEr6gNwxkGXZ\/ZHOGcrnB7DwQbRWZ8MjQkLaKc4QvLcHvzoChZTABbxqiUVuAfR72yu32YMLdLtfMJOzcVCgibbcaQlNjo+Q5xxE+hwgfAvPfZkEoACZdgB6jPKhDTtjRUWccvZ2dBsCzhL4NCYjMg6V5NxhfBu5xSb9VCF+em1OzKWzDZ9F9l5fBVBgcAWo0QlNgZjY+GXZO0TSFCGemUGM2KUz49NCyw41GxBNwcbchE74Smtd2eznCp+BtqMkwJHwcdhJxiggPhEBkek4gfHF5BUwsGyKcmhwdtbuJH\/US\/i0yxkwHUFfAt5HAoosGzlHPMtTwbw4aEx5fwrfDhM8FJumJZeckFfYEeK+TTLjL7V6MkD4QGr6ygt4ugaVZ2g0o+\/Q0DWbmvs0BJ3qrIDzETI64wZELEhribkMknPm2OTOtRQxPuB02m5lxrEzOz4RFwsEYE6J5wmnXpmsTjFHzRgin7Ud2+xHRmklNCiQcDvIcS7g7EJiam6acR0NjARCfgiqqIDwemRleDk8yrpVJ3mKQCZ+YnBxTayB7Pf4NdSoOIu6lOKAQuagRdso5xrAmpZdwML45D+Zhm0c0CadHx6YmNWNfjvBF+I9jkhmacyKSBMLnhhbBNEv4JjQp4NsKlGqE8BU7wgjpI47wZdj4oRXwzQGm3CzhYw7epEQWgWBSeggfBvPuITAGvzynTXhodPRoRqVtXMOnliNLi7C3k7B3lN0zQoOxCOwwdQT5oqFZY0ZRY2Yw4QHYmslFELbPRqY1CZ+1jx7Z1aYWBkf4iN0T2BwHy9hgYk7RoglXlnEQioPlb5FlNxr2AFxB3YZMitMDlYVoRTnCaXsgPuYAiy4wDG86Nh6YnwOemUgg7Bx1QkrjyB6twM7F59DtIAFwSkPCw3a4zEwNj0x6uNsRCadmjuAMU\/HQ+YaPL+OWjECby8wOwT\/Gw8ABX+EghBGZyB2hJij0A0ccJUHgn7NDE5qLphvp2ZIWM7xbSA8NQSIjrE7G4UILpcOWjTuBB5r3+PI4ZoqZFZMXOn74iF3lA94Pdy2vQDETUJ\/gvxNDQ1C0Y2VomWZgj0ciLqTBEQ\/XQAqKdwyDAFTtYdhMemWI55tMeARPMJXV6zMDn\/n5qUm3IcLNo1\/CBwSyhrtoe8SlYks\/N9KcX9H+2U8g\/IdkC512VXd4yeEaBCJkwt16KQ\/iwmYEVgn\/Mflwp91FvA5Bxz2DQJw80nqEO+as9lQnO6lK+I+BBuGfCz3CPw1fhP9giIRH11e3YorPYyerJ1Hlz5RftIb\/x4RHj70+r21H9vHaLbxakdO7Xrmt5Aci\/o9A+M4a4fM1ORODgkD4ltdms\/kqso+3ffCqd7X34rrfZ\/N5B8K4SHhstbKn6Hl0q7Kt7PkgyBAI3znzeo\/lGhXd9npvFR0kmgCzEAjH1Np8sj7f+gjDUMEXj\/uWDSSEr\/kgvDImoxWvz+dfl1089vttfY82T3jUBzvjVegZ1D6fV8bFsd\/n9fU91gLhq1jDb2X2muV2u\/cicRSsQSB8jyTohNQmIhmmwRO+7kd6Jrtd1IsvbvVcxN\/sv9cC4TForX1emTaBHS\/SPNmw4rHx7vYrGkEg\/Jg0iLu447aeebyGZ6L3pE\/BRgjvlbGKBdsIHoQpiF4KNKLbypm6s1dZlWsTXF+93r1+JWMIhOMlRL5Y5L1K27WGu63QDLMQTAqarl7ZzAKrcBh8vQNtUcNTqWRv9tuaH76zPqBFXCAcLVPeY\/kg7sKLZ7LxXkVL9m2\/q5ewaK5t225XFYvm6q3tWN5F5Mb5TCweTK56elrNpQZB+MAgcQvzJ4TO7JysK2bS7q1tu18TLnULY6TBiyklRE9Wd43LzXVa9Voupbj+xyHcOKIDCLs+N\/Bhaq3LInlbwK9I+CDwmYSX693TpNqHZMJ38iQlWjs56Xsqy\/A3SHh14bKo8TGJ8LWK12tTugFbcAXz9esdyPCphCfLxVqtVr2vVmvVWrlX54iEk23VWt6Emp2enyrtthQkwlG0o4j6wA52i2yD1XES4eR4Pgr9YBOuf\/L0ZWNjodtqtS7r9c5pUe4sEAiP7nn9Z0rB236\/f1VxlYzT9qneVwiE77Buv7x3J+zlwSSteBAIj1b8yngeagEU798zeNtyd+OyqKlpBMJxCOuTK\/ku0jNlc0ionuvSTSbcRwhsodvGxmREB3zr1rZqKRAiEE6M59kYyGYslVF8O6\/pbUdWEh7zE0PYMxsh50BCsnWpJxSBZFLwUCttB8okeYk6tgdjEe+ZAWkKEAhn43m5pmkQHl3fkk673N15TV+wYcIrpHwpi63jY\/Hb1QWtpVIEifDoHoynCVZ0t1KRqz3GGibD2LSTgUB4npgnjtnQwlIh1ULO\/JJEQ6rTvjciWM2k2OQmJY8CW+JA7yHTx40E8\/5uRL2BmltIiLM0kCfrhhGQFk0Uz98qGpA\/83orpGbtoQHyc8KL55eqHnAPiIsmUc\/yx2eENVxY6vBH5beqIalgMIEP1j6b30p6hegWkuJ5yMfODnGZwMksH9a03N1b2aBgolsYixElkFenvOBEpN5bOYNiBxRp5m1QKYnWRg8D8MNxYhdJZ96vDFkTjP4DnzVUukAmqLhgYM0QMJjQPmY1Bh0A4TvQlHpvY6C2UTdoRhEGEGmu+\/x+Xx5ctrQjHRkkhEfz64MqxmNk0UtQ+zuDiDTXVo93o8nuufFpDQYT2sfWoel7MeB7SyESnvdpR+7pNHzJptk\/dnZ3lSa7dAhfnpr8nxcXkO\/9tKZ4KeHENCmPVLl6+v5x11FR4tqGcWuCISF8\/cR6cj\/XljmDQaRmiaz6L8QSG175NGqF6f0syD484fdbyCNSBtrPh+CpIAq7+J590OZbQvhaxe\/dVqOcudxYaNWrxeJ7C393XRbvVtvJbAa18Ym7kHiEgkvP6oLFAsSt36sVul\/jlwR+v7O617tJ5x5Oq+YrfHPA9zqNetzIqN9PIDxPquP1AN6rwHZoTS3ovLlpSAf3Qke\/pRWfW1L1nMd7q\/R3sKeNa4AWqC2v3y\/dK5O6hP1ONF5BulASGltIlwoaiiYQjtdcjRji8BlpDn6bhybALyn45bp1+Bp8zIADYVpDlrKPr+pyRcI5t1Ireintc3daVxuc0n5T8le28XyocTsEgfC8V2UMEZLnSXBdQD0D5XYVu\/1iGTJ1f87G1AfNhmR804WGBt8i4T5i4kiC5sV3rhdnvWNz+sKuGonnhpThdA8HCog2\/NiLVEzpc8b4nUnZwmuB7dGOn5zHgvbkRqQY6dvNhZZwBeEquRJEOLhmhzv5p7\/HnjdX1Ux2zluc753dlw5vutHQml4C4SyLWkFbo8D+G+0Zm1y3w3\/hoiA1IQc8S2RI9hau3t7uKY3oic3rw4FzFtqTNHevVT8prZJGc\/hGGO0msj8XBhfN6Bkab8LmojU43ClE+ONhA7s81X\/AQ3OG2pTstOt8ZJl9KD2LmgbtSVqr4wLhedSVM4WeRfP8Unpx2Lxh31UkGn7a5Z2ixHMz8SgwjqahpmCpH05yE9j5ixaVElo+StyqdLK9rdzjqblCM1QqmUzJnQzJorntsynHew2aWLiUvtSCcCFiF+Ty3Z+5\/VjMabsu+MBofU4cCIzfwD6nNaaX6KXs7G3vKuTGKjCUw0spst8c4zswvmMzxMk70edvQguSEMxXumftJkAv8GF3wFnblcCkkrlcuVy777y3ui93l9VyUp1wqFRKc8Yupceg1sYduUZrYu6q\/Nuff4fmrNZ+T4Fyp16v15C2Ia0KapntHuj44WyCBikzXoa5tTh2wuYlc+cSZzBhVCSLTyA8mSvW7uutl\/Orq42Njaur87ePy05VUXPB0Al8BMveehcvlhfarctOfaGby91ttOunp53u1Ubr3ljSioc24VE2QaNS76i1zcnqgR7h2KTolphSuTIkuXPZuoM0Q5LP31r1+1qxnINGRDPeNko405am45K16v19Odm9qjIgV0bqnbtvbXTNhJo6Gs5mwcm+S+fFhBwFdHMp6zAg+g2\/Y1LQCieT0EhgFFGFFpL83m1v\/CMm+eO93rlHqmxcvA7h4ka03IZcqzowuKy9bSzcnV+xE\/x048045TqEo6VUmRvHeL80LIQEFcKpVC7HMlus\/VP9vfu20N7gccWi3T5fWOi2\/rl+Wiv\/C6fGMaHAzQZoOpkU\/VwKXDRZHwl02j1FyuJCKwWKbewRls858fcbxqouQD+XsrNdUWyAw\/jooNeE8GIWHOGpWq3auVtoI0Ay\/xWifY6w8NZ975xWWfOQSjmdcvU9PIBrNOcV7cIQcDvKXwbNA90mkQmPrYnr5xrf7epCu1uvsjpQbaEyGtP+N+QOHGYXMO9r6zvlK\/wORR5ZjfAaqBBOTsT34APnqhLIx7\/mvMW1Lf5UDk4mNTVcFCAQnrx8r99DTiFSKXaDKsFuY32Tj3vz5oDr27rgQuLLrxqpDB5Ewld93ltSxJv897+0XhbgtLprddDfpy0UG1xcgOodwKPt\/f0\/0Dt0KaiVzwBkwneh1yffOoogKZp26uy\/0NV+4lzBHZ8Q8CcuDnW1jGRSdomHIdDajZ00uRI8NLg3xz07qA8eDEw5YonNT9oWg4psNtvv0hRKOwd5xaFt95Rd3X17f8Jm\/Pv352ttwQTC2TsoYy+0L4qL8mpd3gVIFxqcvTyWhqoXBzfacomEr6oQvk7KWSUa17wqcy4kS3jzpqknG5D3pbAHLBQTLOaT7eS+R5nDi300g1MLNbbRZ6fYf0zsH+gIJhDObRdQGBXRJy+\/CQb16ZHLHEQlJT4AXh\/0skckwrEzRgizWcL9vSkUlEdosoyjArfNz5ba0KWmvk0hEX5GJpzNmIlqwCDLffE9iDOYtRZ3KCy3AHUwUXg61EniEAg\/8ZM2xEAF4H3ynFjjuG4E+QBequGwxxcajKPpQfRSTnx+\/7HSmMW8PmWLcBDG5Q7Wz7w2rrSZQfYkY8lL2fITD\/Gwwy0SjqhtXqAcTxqlt2I2rw0G\/LkFqIQFaE++azNOqtqfEY5wAb5ougtybYHv4A2032k2aSux4U8H8OVGZfGgwjR6uphI+M7e8RbPZSxPTNvlbX7S7jtJmwnhuQoYgE7fExfNLZuXIAWvIJLNbrk3aUh1Xoyt3h7nASYcj79KAskJXOh3IuGxHX5diO6SDt2w6S1btHyl4uXHtlYNbcmhI+i5ewLh615i1qwXUfJAWIHLiZ7XIBK+a\/OpFnxYxI57tnP2El7eYGuL1Q8dueEwfjCHQDhybnQC6Z29ym40uWGqVkwAJDxOC4SzS5W1vQ6WQHlAJCwSjo8xKeynFnoJB6mPK+iaq6qhCA+DnqrDE44Nt2Y6nLv9hqkaNQGUI0JPUALh7Gk8tXTNJ8AZcTo8AuEWzqbh5VGK8kv7TV7TJch1RcCwSLjRQ74vZvaeEEHBWR1xihqOfQNC1Sy\/u6W55QR5ItnvrMuNY6xS7+dqzriDCkzQIuFqpy\/VF4UU9BnwohwURCTL+tM+DCIej0j4NulALpK71mPfOr0JlIQ0aWsuzBeLyHCxVQY1cKpDr19L8V4b0E\/gogxUwhQjrTR696rhJVGU5GAs3pytGNqtyhk5pQHReQevN5yXAnGRRSPP+0VpFAam1b0knvA8+bkBJ7fenvXiXDabUNWYcwCzj1m2CsGiCWUmNKqaopeytrunLOKw0Rc5bcYhc\/AoZA9umtJ4vnkAh0N76AXCY9s+wuMEcCmPtGUWIXVehM5flq\/Ulx6yknj+GgbeWmV7scRWua0oFCovs+x3ckuVeH7lS8sg00i8ivH86yOQFvEV0EnPslG+SjGdRVAI7YFYcOWENw40797jFq4p92pyhkbt0EUVRpXf9wUTVmocSOL568cnrbK96BZGCTs42ZP\/wo733JviG4mHA1FUQRpTvz7faJXtdQiXh3dKBAulzCM\/vs2bnkDrtXBA+IUU2ulZ7iyGmkUrfkDpF2KA03iQMtzU3BSjnZ7d6z35f9pRfOPiUKyWvzYepfO48KB1a70CRIW8x0oE2ouFphECtCFAsk8CXn5tkH\/FQycfjo93qQ538SP7UALfefUqXKclNqTUeG1oBLrahLNJCsGkKAsbqJe84YC9vi6Ioh5fr7U6rUd4dKtyrOmsZYUXNg8NXnnZJTTuTe0IW4fw2BneoKqC4kcG2ZMmq8mNa7Q5QhAOtf3aiA0nI3\/rtwl8J9\/kzk\/imn9BvgF8yQhq9tgEmmr2Rz+JvKNxaq68oP5ZCXH9ZJnwnl345Tud70qhlVZA+KMTron3tuVwxMx25Y7JHcma+CUJTyVz5RzyjIsL7bq1kNsM4V2j51iMYLCEZ5HVzBgoPPCwQDhTa3U\/3i9bXbxXPNdpf3CUJ5AdTWvtXJXABOGpBZ1tKNdo7booaX+JhzXCpYcbeo5JPhWyGeQcZFEslNUupyKYJzzZ5XSaOUXhNgzBq\/y+nMMbdsNyELUsqJ2LN0F4uUu6uiOewE88N\/HpA5BG3qHODm1rhKNulR5xl9Zue57HVCrgyyja16vjIpgn\/KOYRYn\/EtTkbgrkz3y234SUbPMG7cMHTw20qVJb40wQfs\/nUdDW++AjVrbYsdfrE1OrN4+4GIHKTNcF5R2ksKjhDyW+wlTp3e6babAtyjYyB\/p8mye8WgfI8y4h6ZfFNVSD8v7WFTYss4mFzGPwUUe4CcLf+U1fWXhTTonYOqcws78\/sD754fdrLecfwaINzxY4vtkHoAlp3UwjwWUwsvvfDdzHNOH4ROQhe9Ai94IzD76\/1qtco9Jc4TqzrzfYxglPiZXM4DOXpmMrx8JWOGhPnlnGb\/b10oYWCU8XGtyUZUVzNZMssidPyJwFG6+POjsVEEwT\/oHsdXqfDac6\/4lH+68dTHgCHa9hi8ePFwc69zFOuLSGdMATjgvLfLkmg2QeoAXr+kCveK1P+Mn2njL2SO9ns9x5nxN8Fl0efWcLGRAs6DOuR7j8AGjyDksPHrKafI63EfzGaXiQe0lA4ZpxPdAlPLq1x28a\/xB8fbTDrMH2ie21PImaKSTETIMK9Ag\/RrkUReENWY0sa6zB+hnhIWtZ1K7+vZQ8XJB7pLeKaAGBgtnk6P1f\/ur17YLL3vjnCbmGmX4WzSh6xjGrRcy54BR+R3aqoNFrvJfy1fzOKwn0s4X9QZtwrtAqJoereKeZpMTSTqHk6ov54EebcLwniK0DaeUPrKD\/fHhfMJSeFVwgZV66eF4rFz\/q5gVrEy7ZQ3Zq4eZaMKLh2hWfvqBNeMzWW4B4UZaIy5etdysJFW3Ct\/C2VOx6ffRdPe6F7pETtF2l3yfrqkPHhp+gvVDCToKy3p4TE9Cx4cfCM1vMHeHXh\/4JiL1VowbFwi51PS8lv7cnjvbpAJVNz0tZXz3B0zp3pfeICmlBwACs+eHPcDkOXsgdr4trIfQ1ClN+eIe1KEJo3wMUdycO9I6aCzDqh0u98CZyvQ5k\/UugHMK1ga3wHKwR\/lRIBBuKvBxyvA3kT6QwRXidM+E4tFeMK2yP5iH3XhglvC7JhWehE65MGcD4Vjeel8BipPnUIGVKggcFc3ybI1x4xOjhDal49mxGuFHCW9LTc+T+ZQuPxuVazoeTS9OPD\/qxTg8sabgQ2suEfwbh3R7H6JnUv6eG5uF6GSwSXsiUCsppBHtsIJyXwpKGp\/cThAAaCldaOVUYJfxcWu2B9qSgYPy6gJKnhgVbzIdnkB3HjONyRwbr1nMG5TFMjLZZwlkvhQ3t2ewcyhqWMPnsc2IGvmhKd+MeonWZNWZ4lcT5quANqrfopaxEWCMc94szo49NkDGxaPTCFOFl7ghwUHgBpYeg5nNoVGGUcMV5XA6HN4lnzeeiqGEANc3nG\/3zmGowl55tKzfHlrSfQ6MKg4QzaoSD5oNx+yXFAAjP7FsTjWCOcMLRbp0H\/6jCMOFqG6AvHo2bESn6JzzTyFqbXAjmCH9R7FcoPWQ\/1aSkVAgPwi5Dq2JBcN+Eo4ptwkj5koh+CUfq\/WRiW4YAg4QnN8jX8cMCD437JiL6JhxvR9B6UJ8mzBHeJR8osaJoBgnPXVm4tyZ+qZ1X92Y2+Wnji3AjYIw8it0Yvgg3hPJVv4cleXwRbgyXLwNi\/Itwg6gvDIZxo4SreCnW8asRDuovJp4Srg7Dof2AK2y\/HuHg7l3\/O\/owSvhlf48UU+LXIzz1NggOjBKe6\/uZBjL8eoSD1PkAGDe8t\/DF8P9fYgy\/IOEg1e70Ldgw4VXlodi+8CsSDpIbfQdAhglP6T8QxBR+ScJBeaPTp2Dj25X7fBKnHL8m4SD3tqHz\/1YKCBOvGic8uWHNilMO4uUfQrhjVo1W6+c0i29XxohYHJ0eVpJu5lCV2f9BhYXDPjYXVwr+IYTTdijcIxfOMBQVtrsoa4hGq+dJA99j5u32o5klT5iRiKWo+SHKaRDR8tWl0e+KoFxTdvvo4vIIJ5ihnGGHi3ZN2F30p8MD+zy1GZqgKZ5sKkzHh0KLk2P2qTGrmDT2tSP76NhmaMXjcjKo17RnBcqdsh+NGsZ\/\/ff\/\/K\/xbwuAIia\/zY2POChIOeN0BVZCm3AQfgyORscWp2dHUKf58XbQkZFA3D4R8HwqAouY8NkIq2kMFYaCI5HFucjIpyLiGUWdnhumnbyKQx0Ph+N2p+OzER7BGr7kcVBABspOXtMGiHn71PwsLZc8v\/LZcp2j9pm5uEOe+Yn8GBs+Fhp3KdgGiHDyWq4Kh8NJm\/vFRMBJuBqaNXcX4AERUgfU4RxXjDJC5MikYOCIgwmTP3FGSH1GoGZMarhzdtzkEJExZ7YPwyNmh4gMesb0T2bHB\/d\/0VMhtaFQw0gcBAYgeMVj9hdzwGFybhHhCpn+iWMFeMzSpAZmxdw8hVNyBAyi3\/GIyR84aJoZxNwKm58oETrsGBThIGCScOjghgchnDZLngs4qEEIxo\/cNQUoFnuWg4FrYHcyh4GMmhVQg7PHlvDT+m3WlA0KzM\/qMS\/\/Z8n9WYJ\/Wo+\/8IUvfOELX\/iCEfwfXDLNTDj2YhcAAAAASUVORK5CYII=)\n\nExample- [1](https:\/\/miro.medium.com\/max\/1838\/1*4LnmIbcIiHM0g8q_XJrD7A.gif), [2](https:\/\/machinelearningknowledge.ai\/wp-content\/uploads\/2019\/05\/Overfitting-and-Underfitting-Animation.gif)\n\n```\nxgb = XGBRegressor(learning_rate=0.01)\n```\n\n*   Learning Rate helps us in deciding the rate at which we want the parameters of model to change.\n*   With a High Learning Rate a model can miss minimum loss.\n*   For a low learning rate the process can be too slow.\n\n\n\n```\nxgb = XGBRegressor(max_depth=5)\n```\n\n*   It represents the depth of each tree, which is the maximum number of different features used in each tree. \n*   It's recommended going from a low max_depth (3 for instance) and then increasing it incrementally by 1, and stopping when there\u2019s no performance gain of increasing it. \n*   This will help simplify your model and avoid overfitting\n\n```\nxgb.fit(X_train3,y_train1,eval_set=[(X_train3,y_train1),(X_valid3,y_valid1)],early_stopping_rounds=100,verbose=True)\n```\n\n*   Training Set\n*   Evaluation Set\n*   Verbose\n*   Early Stopping \n\n```\nxgb.fit(early_stopping_rounds='____')\n```\n\n*   The argument early_stopping_rounds offers a way to automatically find the ideal value.\n*   Early stopping causes the model to stop iterating when the validation score stops improving, even if we aren't at the hard stop for n_estimators.\n\n\n*   Since random chance sometimes causes a single round where validation scores don't improve, you need to specify a number for how many rounds of straight deterioration to allow before stopping. \n*   early_stopping_rounds = 10 is a reasonable value. Thus we stop after 5 straight rounds of deteriorating validation scores.\n*   It's smart to set a high value for n_estimators and then use early_stopping_rounds to find the optimal time to stop iterating.\n\nXGBoost has a multitude of other parameters, but these will go a very long way in helping you fine-tune your XGBoost model for optimal performance.","8aa3c78e":"Generating New Features - Lag and Window Features for features related to Closing Price","c867376a":"Reading and Viewing the dataset using Pandas"}}