{"cell_type":{"3585e38d":"code","425ea6fd":"code","2f5245d4":"code","5eeef93b":"code","4acb038e":"code","8689691a":"code","c8f6fbb5":"code","dcc21938":"code","b364d637":"code","de892b10":"code","96868f66":"code","13835381":"code","f2055eb8":"markdown","4cbe9539":"markdown"},"source":{"3585e38d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport pandas as pd\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfTransformer","425ea6fd":"df_train=pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv\")\ndf_test=pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv\")\n\ndf_train.head()","2f5245d4":"df_train[\"text\"]=df_train[\"TITLE\"]+df_train[\"ABSTRACT\"]\ndf_test[\"text\"]=df_test[\"TITLE\"]+df_test[\"ABSTRACT\"]\ndel df_train[\"TITLE\"]\ndel df_train[\"ABSTRACT\"]\ndel df_train[\"ID\"]\nmain_test_ids=df_test[\"ID\"]\nmain_test_title=df_test[\"TITLE\"]\nmain_test_abstract=df_test[\"ABSTRACT\"]\ndel df_test[\"TITLE\"]\ndel df_test[\"ABSTRACT\"]\ndel df_test[\"ID\"]\n\ndf_train.head()","5eeef93b":"df_train[\"text\"][1]\ndf_train_classes=df_train.drop(\"text\",axis=1)\ndf_train_classes.head()","4acb038e":"import re\ndef preprocess_text(sen):\n    sentence = re.sub('[^a-zA-Z]', ' ', sen)\n    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n    sentence = re.sub(r'\\s+', ' ', sentence)\n\n    return sentence","8689691a":"X = []\nsentences = list(df_train[\"text\"])\nfor sen in sentences:\n    X.append(preprocess_text(sen))\ndf_train[\"text\"]=X\nX=[]\nsentences = list(df_test[\"text\"])\nfor sen in sentences:\n    X.append(preprocess_text(sen))\ndf_test[\"text\"]=X","c8f6fbb5":"X_train, X_test, y_train, y_test = train_test_split(df_train[\"text\"],df_train_classes, test_size=0.2, random_state=42)","dcc21938":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nlabels = ['Computer Science', 'Physics', 'Mathematics','Statistics','Quantitative Biology', 'Quantitative Finance']\nlabel_predict=[]\nfor label in labels:\n    text_clf = Pipeline([('tfidf', TfidfVectorizer(min_df=True,smooth_idf=True,sublinear_tf=True,analyzer='char',strip_accents='ascii', ngram_range=(4,8))),\n                         ('clf',LinearSVC(loss=\"hinge\",fit_intercept=False ,class_weight='balanced')),\n    ])\n# LinearSVC(loss=\"hinge\",fit_intercept=False,tol=1e-3)\n    text_clf.fit(X_train, y_train[label])  \n# min_df=True,smooth_idf=True,sublinear_tf=True,analyzer='char',strip_accents='ascii',token_pattern=r'(?ui)\\\\b\\\\w*[a-z]+\\\\w*\\\\b', ngram_range=(4,8)\n    predictions = text_clf.predict(X_test)\n\n#     naive_bayes = MultinomialNB()\n#     naive_bayes.fit(X_train_cv, y_train[label])\n#     predictions = naive_bayes.predict(X_test_cv)\n    \n    print(\"Accuracy score: \", accuracy_score(y_test[label], predictions))\n    print(\"Precision score: \", precision_score(y_test[label], predictions))\n    print(\"Recall score: \", recall_score(y_test[label], predictions))\n    \n    final_predict= text_clf.predict(df_test[\"text\"])\n    print(final_predict)\n    label_predict.append(np.array(final_predict))\n\n","b364d637":"label_predict.append(np.array(main_test_ids))\nfor x in label_predict:\n    print(len(x))","de892b10":"dataset = pd.DataFrame({'ID':label_predict[6],'Computer Science': label_predict[0],'Physics': label_predict[1],'Mathematics': label_predict[2],'Statistics': label_predict[3],'Quantitative Biology': label_predict[4],'Quantitative Finance': label_predict[5]})","96868f66":"dataset.head()","13835381":"dataset.to_csv(r'submission.csv', index = False)","f2055eb8":"Models Applied :-\n\n<br>\n\n---\n\n\n1.   Deep Learning<br>\n  *   One Layer CNN Model with GloVe ( 0.8029 ) and without GloVe ( 0.7973 ) \n  *   One Layer BiLSTM Model with GloVe ( 0.8083 ) without GloVe ( 0.7974 )\n  *   One Layer BiGRU Model with GloVe ( 0.7924 )\n\n  I could not get past this accuracy with Multiple trials and different hyperparameters. Saw an immense jump of models from around 75% to 80% with text cleaning (Helped convergence of loss of the training set and prevent overfitting) \n\n---\n\n2.   Machine Learning\n  *   Naive Bayes with CountVectorization ( 0.8028 )\n  *   Logistic Regression with TFIDF( Word Level ) ( 0.7989 )\n  *   Linear SVC with TFIDF and fit_intercept_False ( 0.808 ) \n  *   Linear SVC with TFIDF and fit_intercept_False with hinge loss! ( 0.8190 )\n  *   Linear SVC with TFIDF and fit_intercept_False with hinge loss word level n gram! ( 0.8356 ) \n\nSomehow, I got accuracy a bit less when i cleaned the text separately. Although, TFIDF takes care of that. \n\n---\n\n","4cbe9539":"# JANATA-HACK INDEPENDENCE DAY ML HACKATHON"}}