{"cell_type":{"8d6cd258":"code","8c5f8732":"code","4014db6f":"code","d289324e":"code","80730895":"code","76cd9bbe":"code","e626a8ba":"code","becde9f0":"code","725feb54":"code","f6407209":"code","e02067aa":"code","a69c01ed":"code","eb712334":"code","acfb0953":"code","40454f77":"code","7454e36c":"code","071be05f":"code","d4c56e6b":"code","d6b0829d":"code","f28f9d8a":"code","e9ef44ed":"code","191e36e3":"code","69e4e86d":"code","3c0031c6":"code","5ec1420e":"code","30eb0edd":"code","fca53833":"code","44df5a4b":"code","decea362":"code","ea8adafc":"code","b26d2338":"code","023170c6":"code","4b39b4d6":"code","36e03d2a":"code","b44c2be4":"code","76126ab8":"code","216ddbe4":"code","53fcf0af":"code","246dfd1b":"code","b3a472b4":"code","600dc6bc":"code","8191e926":"code","296fca07":"code","71e9c41b":"code","ddffdedf":"code","d26fa7e8":"code","f5c2e27e":"code","0f2dffe2":"code","11c9a66c":"code","c130e0e8":"code","1720ffd7":"code","9ec4e6b1":"code","5fc424a9":"code","c4f5aef7":"code","e741020a":"code","536db244":"code","9a395352":"code","3829ea80":"code","2b013fd7":"code","f5ed9ce5":"code","93ae3a66":"code","3b1b4838":"code","62066e24":"code","6b649120":"code","5fb7abe0":"code","b1013f54":"code","c67a67c2":"code","c1213107":"code","11769125":"code","e5939387":"markdown","dde4f364":"markdown","b6e62310":"markdown","d3bb6c96":"markdown","038b282c":"markdown","5b575ffa":"markdown","e957dd0d":"markdown","ea2c1325":"markdown","8a1d06bf":"markdown","2d1fc4b2":"markdown","6b0b9a92":"markdown","f562e9ea":"markdown","76839529":"markdown","f0b7deec":"markdown","166d2bd3":"markdown","87540028":"markdown","7245d606":"markdown","b5363860":"markdown","9cb50fc4":"markdown","77f6d34f":"markdown","a688f4d0":"markdown","f014f99d":"markdown","94c50ba6":"markdown","095e814a":"markdown","5ab144b1":"markdown","92eb35b3":"markdown","73c46988":"markdown","e66567aa":"markdown","a118c840":"markdown","2cbecdae":"markdown","eb4650ce":"markdown","5bfa2854":"markdown","c19f4b90":"markdown","f9d7110c":"markdown","5c022afa":"markdown","00ea5eac":"markdown","bba6f341":"markdown","c29ac332":"markdown","dd5078b3":"markdown","9a8d112f":"markdown","6b3ad5f7":"markdown","231fc2f1":"markdown","6416ea67":"markdown","c3075f45":"markdown","e8339bbf":"markdown","e5d45eff":"markdown","7bedeadd":"markdown","38713902":"markdown","f42f448c":"markdown","54624b06":"markdown"},"source":{"8d6cd258":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","8c5f8732":"import sys\n!curl -s https:\/\/course.fast.ai\/setup\/colab | bash\n!git clone https:\/\/github.com\/yabhi0807\/libml1.git \/kaggle\/tmp\/fastai # This is my repo with all the fastai(updated) libraries \nsys.path.append('\/kaggle\/tmp\/fastai')\n!mkdir \/kaggle\/tmp\/data\/\n!ln -s \/kaggle\/tmp\/* \/kaggle\/working\/","4014db6f":"!wget http:\/\/files.fast.ai\/data\/dogscats.zip\n!unzip dogscats.zip > \/dev\/null\n!mv dogscats \/kaggle\/tmp\/data\/\n!rm -rf dogscats.zip dogscats\n!ls \/kaggle\/tmp\/data\/","d289324e":"from fastai.imports import *","80730895":"from fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","76cd9bbe":"PATH = \"\/kaggle\/tmp\/data\/dogscats\/\"\nsz=224","e626a8ba":"torch.cuda.is_available()","becde9f0":"torch.backends.cudnn.enabled","725feb54":"os.listdir(PATH)","f6407209":"os.listdir(f'{PATH}valid')","e02067aa":"files = os.listdir(f'{PATH}valid\/cats')[:5]\nfiles","a69c01ed":"img = plt.imread(f'{PATH}valid\/cats\/{files[0]}')\nplt.imshow(img);","eb712334":"img.shape","acfb0953":"img[:4,:4]","40454f77":"# Uncomment the below if you need to reset your precomputed activations\n# shutil.rmtree(f'{PATH}tmp', ignore_errors=True)","7454e36c":"arch=resnet34\ndata = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(arch, sz))\nlearn = ConvLearner.pretrained(arch, data, precompute=True)\nlearn.fit(0.01, 2)","071be05f":"# This is the label for a val data\ndata.val_y","d4c56e6b":"# from here we know that 'cats' is label 0 and 'dogs' is label 1.\ndata.classes","d6b0829d":"# this gives prediction for validation set. Predictions are in log scale\nlog_preds = learn.predict()\nlog_preds.shape","f28f9d8a":"log_preds[:10] # cat, dog","e9ef44ed":"preds = np.argmax(log_preds, axis=1)  # from log probabilities to 0 or 1\nprobs = np.exp(log_preds[:,1])        # pr(dog)","191e36e3":"preds","69e4e86d":"probs # for dogs","3c0031c6":"def rand_by_mask(mask): return np.random.choice(np.where(mask)[0], min(len(preds), 4), replace=False)\ndef rand_by_correct(is_correct): return rand_by_mask((preds == data.val_y)==is_correct)","5ec1420e":"def plots(ims, figsize=(12,6), rows=1, titles=None):\n    f = plt.figure(figsize=figsize)\n    for i in range(len(ims)):\n        sp = f.add_subplot(rows, len(ims)\/\/rows, i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        plt.imshow(ims[i])","30eb0edd":"def load_img_id(ds, idx): return np.array(PIL.Image.open(PATH+ds.fnames[idx]))\n\ndef plot_val_with_title(idxs, title):\n    imgs = [load_img_id(data.val_ds,x) for x in idxs]\n    title_probs = [probs[x] for x in idxs]\n    print(title)\n    return plots(imgs, rows=1, titles=title_probs, figsize=(16,8)) if len(imgs)>0 else print('Not Found.')","fca53833":"# 1. A few correct labels at random\nplot_val_with_title(rand_by_correct(True), \"Correctly classified\")","44df5a4b":"# 2. A few incorrect labels at random\nplot_val_with_title(rand_by_correct(False), \"Incorrectly classified\")","decea362":"def most_by_mask(mask, mult):\n    idxs = np.where(mask)[0]\n    return idxs[np.argsort(mult * probs[idxs])[:4]]\n\ndef most_by_correct(y, is_correct): \n    mult = -1 if (y==1)==is_correct else 1\n    return most_by_mask(((preds == data.val_y)==is_correct) & (data.val_y == y), mult)","ea8adafc":"plot_val_with_title(most_by_correct(0, True), \"Most correct cats\")","b26d2338":"plot_val_with_title(most_by_correct(1, True), \"Most correct dogs\")","023170c6":"plot_val_with_title(most_by_correct(0, False), \"Most incorrect cats\")","4b39b4d6":"plot_val_with_title(most_by_correct(1, False), \"Most incorrect dogs\")","36e03d2a":"most_uncertain = np.argsort(np.abs(probs -0.5))[:4]\nplot_val_with_title(most_uncertain, \"Most uncertain predictions\")","b44c2be4":"learn = ConvLearner.pretrained(arch, data, precompute=True)","76126ab8":"lrf=learn.lr_find()","216ddbe4":"learn.sched.plot_lr()","53fcf0af":"learn.sched.plot()","246dfd1b":"tfms = tfms_from_model(resnet34, sz, aug_tfms=transforms_side_on, max_zoom=1.1)","b3a472b4":"def get_augs():\n    data = ImageClassifierData.from_paths(PATH, bs=5, tfms=tfms, num_workers=1)\n    x,_ = next(iter(data.aug_dl))\n    return data.trn_ds.denorm(x)[1] # n_th+k photo in bs","600dc6bc":"ims = np.stack([get_augs() for i in range(6)])","8191e926":"plots(ims, rows=2)","296fca07":"data = ImageClassifierData.from_paths(PATH, tfms=tfms)\nlearn = ConvLearner.pretrained(arch, data, precompute=True)","71e9c41b":"learn.fit(1e-2, 1)","ddffdedf":"learn.precompute=False","d26fa7e8":"learn.fit(1e-2, 3, cycle_len=1)","f5c2e27e":"learn.sched.plot_lr()","0f2dffe2":"learn.save('224_lastlayer')","11c9a66c":"learn.load('224_lastlayer')","c130e0e8":"!ls \/kaggle\/tmp\/data\/dogscats\/models\/","1720ffd7":"learn.unfreeze()","9ec4e6b1":"lr=np.array([1e-4,1e-3,1e-2])","5fc424a9":"learn.fit(lr, 3, cycle_len=1, cycle_mult=2)","c4f5aef7":"learn.sched.plot_lr()","e741020a":"learn.save('224_all')","536db244":"learn.load('224_all')","9a395352":"log_preds,y = learn.TTA()\nprobs = np.mean(np.exp(log_preds),0)","3829ea80":"accuracy_np(probs, y)","2b013fd7":"preds = np.argmax(probs, axis=1)\nprobs = probs[:,1]","f5ed9ce5":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, preds)","93ae3a66":"plot_confusion_matrix(cm, data.classes)","3b1b4838":"plot_val_with_title(most_by_correct(0, False), \"Most incorrect cats\")","62066e24":"plot_val_with_title(most_by_correct(1, False), \"Most incorrect dogs\")","6b649120":"tfms = tfms_from_model(resnet34, sz)","5fb7abe0":"data = ImageClassifierData.from_paths(PATH, tfms=tfms)","b1013f54":"learn = ConvLearner.pretrained(resnet34, data, precompute=True)","c67a67c2":"learn.fit(1e-2, 1)","c1213107":"def binary_loss(y, p):\n    return np.mean(-(y * np.log(p) + (1-y)*np.log(1-p)))","11769125":"acts = np.array([1, 0, 0, 1])\npreds = np.array([0.9, 0.1, 0.2, 0.8])\nbinary_loss(acts, preds)","e5939387":"*Parameters*  are learned by fitting a model to the data. *Hyperparameters* are another kind of parameter, that cannot be directly learned from the regular training process. These parameters express \u201chigher-level\u201d properties of the model such as its complexity or how fast it should learn. Two examples of hyperparameters are the *learning rate* and the *number of epochs*.\n\nDuring iterative training of a neural network, a *batch* or *mini-batch* is a subset of training samples used in one iteration of Stochastic Gradient Descent (SGD). An *epoch* is a single pass through the entire training set which consists of multiple iterations of SGD.\n\nWe can now *fit* the model; that is, use *gradient descent* to find the best parameters for the fully connected layer we added, that can separate cat pictures from dog pictures. We need to pass two hyperparameters: the *learning rate* (generally 1e-2 or 1e-3 is a good starting point, we'll look more at this next) and the *number of epochs* (you can pass in a higher number and just stop training when you see it's no longer improving, then re-run it with the number of epochs you found works well.)","dde4f364":"1. precompute=True\n1. Use `lr_find()` to find highest learning rate where loss is still clearly improving\n1. Train last layer from precomputed activations for 1-2 epochs\n1. Train last layer with data augmentation (i.e. precompute=False) for 2-3 epochs with cycle_len=1\n1. Unfreeze all layers\n1. Set earlier layers to 3x-10x lower learning rate than next higher layer\n1. Use `lr_find()` again\n1. Train full network with cycle_mult=2 until over-fitting","b6e62310":"Here is how the raw data looks like","d3bb6c96":"## Choosing a learning rate","038b282c":"Let's create a new `data` object that includes this augmentation in the transforms.","5b575ffa":"The loss is still clearly improving at lr=1e-2 (0.01), so that's what we use. Note that the optimal learning rate can change as we train the model, so you may want to re-run this function from time to time.","e957dd0d":"How good is this model? Well, as we mentioned, prior to this competition, the state of the art was 80% accuracy. But the competition resulted in a huge jump to 98.9% accuracy, with the author of a popular deep learning library winning the competition. Extraordinarily, less than 4 years later, we can now beat that result in seconds! Even last year in this same course, our initial model had 98.3% accuracy, which is nearly double the error we're getting just a year later, and that took around 10 minutes to compute.","ea2c1325":"## Analyzing results: loss and accuracy","8a1d06bf":"## Our first model: quick start","2d1fc4b2":"Our validation loss isn't improving much, so there's probably no point further training the last layer on its own.","6b0b9a92":"We can just print out the confusion matrix, or we can show a graphical view (which is mainly useful for dependents with a larger number of categories).","f562e9ea":"We're going to use a <b>pre-trained<\/b> model, that is, a model created by some one else to solve a different problem. Instead of building a model from scratch to solve a similar problem, we'll use a model trained on ImageNet (1.2 million images and 1000 classes) as a starting point. The model is a Convolutional Neural Network (CNN), a type of Neural Network that builds state-of-the-art models for computer vision. We'll be learning all about CNNs during this course.\n\nWe will be using the <b>resnet34<\/b> model. resnet34 is a version of the model that won the 2015 ImageNet competition. Here is more info on [resnet models](https:\/\/github.com\/KaimingHe\/deep-residual-networks). We'll be studying them in depth later, but for now we'll focus on using them effectively.\n\nHere's how to train and evalulate a *dogs vs cats* model in 3 lines of code, and under 20 seconds:","76839529":"### Confusion matrix ","f0b7deec":"I generally see about a 10-20% reduction in error on this dataset when using TTA at this point, which is an amazing result for such a quick and easy technique!","166d2bd3":"We're going to try to create a model to enter the Dogs vs Cats competition at Kaggle. There are 25,000 labelled dog and cat photos available for training, and 12,500 in the test set that we have to try to label for this competition. According to the Kaggle web-site, when this competition was launched (end of 2013): \"State of the art: The current literature suggests machine classifiers can score above 80% accuracy on this task\". So if we can beat 80%, then we will be at the cutting edge as of 2013!","87540028":"### Looking at pictures again","7245d606":"## Improving our model","b5363860":"## Analyzing results","9cb50fc4":"Here we import the libraries we need. We'll learn about what each does during the course.","77f6d34f":"Welcome to the first week of the second deep learning certificate! We're going to use convolutional neural networks (CNNs) to allow our computer to see - something that is only possible thanks to deep learning.","a688f4d0":"Our `learn` object contains an attribute `sched` that contains our learning rate scheduler, and has some convenient plotting functionality including this one:","f014f99d":"Since we've got a pretty good model at this point, we might want to save it so we can load it again later without training it from scratch.","94c50ba6":"### Fine-tuning and differential learning rate annealing","095e814a":"`PATH` is the path to your data - if you use the recommended setup approaches from the lesson, you won't need to change this. `sz` is the size that the images will be resized to in order to ensure that the training runs quickly. We'll be talking about this parameter a lot during the course. Leave it at `224` for now.","5ab144b1":"There is something else we can do with data augmentation: use it at *inference* time (also known as *test* time). Not surprisingly, this is known as *test time augmentation*, or just *TTA*.\n\nTTA simply makes predictions not just on the images in your validation set, but also makes predictions on a number of randomly augmented versions of them too (by default, it uses the original image along with 4 randomly augmented versions). It then takes the average prediction from these images, and uses that. To use TTA on the validation set, we can use the learner's `TTA()` method.","92eb35b3":"In addition, NVidia provides special accelerated functions for deep learning in a package called CuDNN. Although not strictly necessary, it will improve training performance significantly, and is included by default in all supported fastai configurations. Therefore, if the following does not return `True`, you may want to look into why.","73c46988":"## Image classification with Convolutional Neural Networks","e66567aa":"We need a <b>path<\/b> that points to the dataset. In this path we will also store temporary data and final results. `ImageClassifierData.from_paths` reads data from a provided path and creates a dataset ready for training.","a118c840":"`ConvLearner.pretrained` builds *learner* that contains a pre-trained model. The last layer of the model needs to be replaced with the layer of the right dimensions. The pre-trained model was trained for 1000 classes therfore the final layer predicts a vector of 1000 probabilities. The model for cats and dogs needs to output a two dimensional vector. The diagram below shows in an example how this was done in one of the earliest successful CNNs. The layer \"FC8\" here would get replaced with a new layer with 2 outputs.","2cbecdae":"## Review: easy steps to train a world-class image classifier","eb4650ce":"By default when we create a learner, it sets all but the last layer to *frozen*. That means that it's still only updating the weights in the last layer when we call `fit`.","5bfa2854":"What is that `cycle_len` parameter? What we've done here is used a technique called *stochastic gradient descent with restarts (SGDR)*, a variant of *learning rate annealing*, which gradually decreases the learning rate as training progresses. This is helpful because as we get closer to the optimal weights, we want to take smaller steps.\n\nHowever, we may find ourselves in a part of the weight space that isn't very resilient - that is, small changes to the weights may result in big changes to the loss. We want to encourage our model to find parts of the weight space that are both accurate and stable. Therefore, from time to time we increase the learning rate (this is the 'restarts' in 'SGDR'), which will force the model to jump to a different part of the weight space if the current area is \"spikey\". Here's a picture of how that might look if we reset the learning rates 3 times (in this paper they call it a \"cyclic LR schedule\"):\n\n\nThe number of epochs between resetting the learning rate is set by `cycle_len`, and the number of times this happens is refered to as the *number of cycles*, and is what we're actually passing as the 2nd parameter to `fit()`. So here's what our actual learning rates looked like:","c19f4b90":"Note that the other layers have *already* been trained to recognize imagenet photos (whereas our final layers where randomly initialized), so we want to be careful of not destroying the carefully tuned weights that are already there.\n\nGenerally speaking, the earlier layers (as we've seen) have more general-purpose features. Therefore we would expect them to need less fine-tuning for new datasets. For this reason we will use different learning rates for different layers: the first few layers will be at 1e-4, the middle layers at 1e-3, and our FC layers we'll leave at 1e-2 as before. We refer to this as *differential learning rates*, although there's no standard name for this techique in the literature that we're aware of.","f9d7110c":"## Analyzing results: looking at pictures","5c022afa":"Now that we have a good final layer trained, we can try fine-tuning the other layers. To tell the learner that we want to unfreeze the remaining layers, just call (surprise surprise!) `unfreeze()`.","00ea5eac":"Our library will assume that you have *train* and *valid* directories. It also assumes that each dir will have subdirs for each class you wish to recognize (in this case, 'cats' and 'dogs').","bba6f341":"A common way to analyze the result of a classification model is to use a [confusion matrix](http:\/\/www.dataschool.io\/simple-guide-to-confusion-matrix-terminology\/). Scikit-learn has a convenient function we can use for this purpose:","c29ac332":"Note that what's being plotted above is the learning rate of the *final layers*. The learning rates of the earlier layers are fixed at the same multiples of the final layer rates as we initially requested (i.e. the first layers have 100x smaller, and middle layers 10x smaller learning rates, since we set `lr=np.array([1e-4,1e-3,1e-2])`.","dd5078b3":"Another trick we've used here is adding the `cycle_mult` parameter. Take a look at the following chart, and see if you can figure out what the parameter is doing:","9a8d112f":"As well as looking at the overall metrics, it's also a good idea to look at examples of each of:\n1. A few correct labels at random\n2. A few incorrect labels at random\n3. The most correct labels of each class (i.e. those with highest probability that are correct)\n4. The most incorrect labels of each class (i.e. those with highest probability that are incorrect)\n5. The most uncertain labels (i.e. those with probability closest to 0.5).","6b3ad5f7":"When we run `learn.fit` we print 3 performance values (see above.) Here 0.03 is the value of the **loss** in the training set, 0.0226 is the value of the loss in the validation set and 0.9927 is the validation accuracy. What is the loss? What is accuracy? Why not to just show accuracy?\n\n**Accuracy** is the ratio of correct prediction to the total number of predictions.\n\nIn machine learning the **loss** function or cost function is representing the price paid for inaccuracy of predictions.\n\nThe loss associated with one example in binary classification is given by:\n`-(y * log(p) + (1-y) * log (1-p))`\nwhere `y` is the true label of `x` and `p` is the probability predicted by our model that the label is 1.","231fc2f1":"If you try training for more epochs, you'll notice that we start to *overfit*, which means that our model is learning to recognize the specific images in the training set, rather than generalizing such that we also get good results on the validation set. One way to fix this is to effectively create more data, through *data augmentation*. This refers to randomly changing the images in ways that shouldn't impact their interpretation, such as horizontal flipping, zooming, and rotating.\n\nWe can do this by passing `aug_tfms` (*augmentation transforms*) to `tfms_from_model`, with a list of functions to apply that randomly change the image however we wish. For photos that are largely taken from the side (e.g. most photos of dogs and cats, as opposed to photos taken from the top down, such as satellite imagery) we can use the pre-defined list of functions `transforms_side_on`. We can also specify random zooming of images up to specified scale by adding the `max_zoom` parameter.","6416ea67":"## Introduction to our first task: 'Dogs vs Cats'","c3075f45":"The dataset is available at http:\/\/files.fast.ai\/data\/dogscats.zip. You can download it directly on your server by running the following line in your terminal. `wget http:\/\/files.fast.ai\/data\/dogscats.zip`. You should put the data in a subdirectory of this notebook's directory, called `data\/`. Note that this data is already available in Crestle and the Paperspace fast.ai template.","e8339bbf":"## Understanding the code for our first model","e5d45eff":"Let's look at the Dogs v Cats code line by line.\n\n**tfms** stands for *transformations*. `tfms_from_model` takes care of resizing, image cropping, initial normalization (creating data with (mean,stdev) of (0,1)), and more.","7bedeadd":"The *learning rate* determines how quickly or how slowly you want to update the *weights* (or *parameters*). Learning rate is one of the most difficult parameters to set, because it significantly affects model performance.\n\nThe method `learn.lr_find()` helps you find an optimal learning rate. It uses the technique developed in the 2015 paper [Cyclical Learning Rates for Training Neural Networks](http:\/\/arxiv.org\/abs\/1506.01186), where we simply keep increasing the learning rate from a very small value, until the loss stops decreasing. We can plot the learning rate across batches to see what this looks like.\n\nWe first create a new learner, since we want to know how to set the learning rate for a new (untrained) model.","38713902":"### Data augmentation","f42f448c":"## First look at cat pictures","54624b06":"Note that in the previous plot *iteration* is one iteration (or *minibatch*) of SGD. In one epoch there are \n(num_train_samples\/batch_size) iterations of SGD.\n\nWe can see the plot of loss versus learning rate to see where our loss stops decreasing:"}}