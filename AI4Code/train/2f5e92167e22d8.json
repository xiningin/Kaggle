{"cell_type":{"3de13805":"code","7a943448":"code","d2f297a5":"code","4017f512":"code","cb8613a1":"code","bd355e45":"code","c78da32b":"code","26a38d90":"code","f6d98c88":"code","c4abc1e2":"code","335dc831":"code","537bb1ba":"code","e19e14af":"code","0b0916d3":"code","e561258d":"code","693a82e8":"code","6c0f5aeb":"code","d0feff17":"code","a13a0437":"code","09525c87":"code","30452f21":"code","a4784b47":"code","882d65a4":"code","3e8d52f0":"code","6c013593":"code","bf199fb7":"code","6730b275":"code","7ff1bf5c":"code","4834f261":"code","3160e878":"code","b952302f":"code","5ae436a3":"code","4855326d":"code","34467fd8":"code","dafb88db":"code","0f9400db":"code","d624f9c5":"code","efbe8def":"code","59de96ca":"code","e39c88fe":"code","aa31877a":"code","77e6fc2d":"code","ac8ca6a0":"code","e6a8b3dd":"code","dd07bb96":"code","13c3ab20":"code","2e195b13":"code","aaa6174d":"code","713a6c74":"code","9d025e92":"code","0c0fae8d":"code","63b9b588":"code","0524d8c4":"code","692e1f9f":"code","16e029b3":"code","af6a8636":"code","c6b75422":"code","d2d7f93a":"code","a3cbae75":"code","23265989":"code","ef2fd641":"code","4541877a":"code","9fcc8d85":"code","7fac1e78":"code","d330f6f7":"code","86a21bb4":"code","b4594dc0":"code","af41ff13":"code","380bedf1":"code","0813d27a":"code","4565da30":"code","5ee236c9":"code","7df65515":"code","aabc3ce5":"code","90e0cdfb":"code","27b37f54":"code","ee0af6f4":"code","dcf9c882":"code","9e97c840":"code","089048ac":"code","82031e38":"code","010551d0":"code","bc2877d2":"code","d33be7ed":"code","86fc2ebd":"code","65fe3049":"code","fd0ca535":"markdown","d4d7b979":"markdown","0ec7b0d2":"markdown","a42f98f9":"markdown","709741ab":"markdown","49adc675":"markdown","d33d2031":"markdown","6d58836e":"markdown","3ea6af47":"markdown","4be8ad35":"markdown","9dc7b6c9":"markdown","82f35a87":"markdown","ee5734d6":"markdown","64695079":"markdown","137ebb55":"markdown","899eff2b":"markdown","a905f6fa":"markdown","7795b2b2":"markdown","32c6939d":"markdown","7a44ce70":"markdown"},"source":{"3de13805":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a943448":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import Libraries to read the data\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","d2f297a5":"# Read the train data\ndf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","4017f512":"# Inspection Code (to understand the data)\ndf.shape\ndf.info()","cb8613a1":"df.describe()","bd355e45":"# changing datatyppe of numeric columns \ndf['MSSubClass']=df['MSSubClass'].astype('object')\ndf['OverallQual']=df['OverallQual'].astype('object')\ndf['OverallCond']=df['OverallCond'].astype('object')\ndf['BsmtFullBath']=df['BsmtFullBath'].astype('object')\ndf['BsmtHalfBath']=df['BsmtHalfBath'].astype('object')\ndf['FullBath']=df['FullBath'].astype('object')\ndf['HalfBath']=df['HalfBath'].astype('object')\ndf['BedroomAbvGr']=df['BedroomAbvGr'].astype('object')\ndf['KitchenAbvGr']=df['KitchenAbvGr'].astype('object')\ndf['TotRmsAbvGrd']=df['TotRmsAbvGrd'].astype('object')\ndf['Fireplaces']=df['Fireplaces'].astype('object')\ndf['GarageCars']=df['GarageCars'].astype('object')","c78da32b":"df.info()","26a38d90":"# Null percentage\nround(100*df.isnull().sum()\/len(df.index),4)","f6d98c88":"# Drop columns with null percentage greater than 45%\ndf = df[df.columns[df.isnull().mean() < 0.45]]\ndf.head()","c4abc1e2":"df.shape","335dc831":"#Extracting the categorical data to know the value counts\ncategorical=df[['MSSubClass', 'MSZoning','Street',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond','RoofStyle','RoofMatl', 'Exterior1st', \n        'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1','BsmtFinType2', 'Heating', 'HeatingQC',\n         'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr',\n         'KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageCars',\n       'CentralAir', 'Electrical','KitchenQual','Functional','GarageType','GarageYrBlt'\n        ,'GarageFinish','GarageQual','GarageCond','PavedDrive','SaleType','SaleCondition']].copy()","537bb1ba":"def val_cnt(x):\n    print('\\n')\n    print(x.value_counts(normalize=True,dropna=False))\ncategorical.apply(val_cnt)","e19e14af":"df.drop(['Street','LandContour','Utilities','LandSlope','Condition1','Condition2',\n         'BldgType','RoofMatl','ExterCond','BsmtCond','BsmtFinType2','Heating',\n         'CentralAir','Electrical','Functional','GarageQual','GarageCond',\n         'PavedDrive','SaleType','SaleCondition','BsmtHalfBath','KitchenAbvGr'],axis=1,inplace=True)","0b0916d3":"# Drop columns which are extra with respect to business\ndf.drop(['Id'],axis=1,inplace=True)\ndf.drop(['MiscVal'],axis=1,inplace=True)\ndf.drop(['MoSold'],axis=1,inplace=True)","e561258d":"df.shape","693a82e8":"# Box plot analysis for numerical columns\nplt.figure(figsize=(15,12))\nplt.subplot(3,3,1)\nsns.boxplot(y='LotFrontage',data=df)\nplt.subplot(3,3,2)\nsns.boxplot(y='MasVnrArea',data=df)\nplt.subplot(3,3,3)\nsns.boxplot(y='GarageYrBlt',data=df)\nplt.show()","6c0f5aeb":"# Impute null values with mean and median\ndf['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mean())","d0feff17":"# Impute null values in 'MasVnrType' with mode\ndf['MasVnrType'] = df['MasVnrType'].fillna('None')\ndf['BsmtQual'] = df['BsmtQual'].fillna('TA')\ndf['BsmtExposure'] = df['BsmtExposure'].fillna('NA')\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna('Unf')\ndf['GarageType'] = df['GarageType'].fillna('NA')\ndf['GarageFinish'] = df['GarageFinish'].fillna('Unf')\n\nfrom datetime import date\npresent_year=date.today()\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(present_year.year)","a13a0437":"# Check null value percentage\nround(100*df.isnull().sum()\/len(df.index),4)","09525c87":"# Datatype correction\ndf['GarageYrBlt']=df['GarageYrBlt'].astype('int64')\ndf.info()","30452f21":"# Combining rows in categorical columns to make the analysis more predictable\n\n# Neighborhood\ndf['Neighborhood']=df['Neighborhood'].replace(['ClearCr','StoneBr','SWISU','Blmngtn',\n                                               'MeadowV','BrDale','Veenker','NPkVill','Blueste'],'Others')\n\n# HouseStyle\ndf['HouseStyle']=df['HouseStyle'].replace(['SLvl','SFoyer','1.5Unf','2.5Unf','2.5Fin'],'Others')\n\n# OverallQual\ndf['OverallQual']=df['OverallQual'].replace([9,3,10,2,1],'Others')\n\n# OverallCond\ndf['OverallCond']=df['OverallCond'].replace([9,2,1],'Others')\n\n# RoofStyle\ndf['RoofStyle']=df['RoofStyle'].replace(['Flat','Gambrel','Mansard','Shed'],'Others')\n\n# Exterior1st\ndf['Exterior1st']=df['Exterior1st'].replace(['WdShing','Stucco','AsbShng','Stone','BrkComm','AsphShn','CBlock','ImStucc'],'Others')\n\n# Exterior2nd\ndf['Exterior2nd']=df['Exterior2nd'].replace(['Wd Shng','Stucco','BrkFace','AsbShng','ImStucc','Brk Cmn','Stone','AsphShn','CBlock ','Other'],'Others')\n\n# ExterQual\ndf['ExterQual']=df['ExterQual'].replace(['Ex','Fa'],'Others')\n\n# Foundation\ndf['Foundation']=df['Foundation'].replace(['Slab','Stone','Wood'],'Others')\n\n# HeatingQC\ndf['HeatingQC']=df['HeatingQC'].replace(['Fa','Po'],'Others')\n\n# KitchenQual\ndf['KitchenQual']=df['KitchenQual'].replace(['Ex','Fa'],'Others')\n\n# GarageType\ndf['GarageType']=df['GarageType'].replace(['Basment','CarPort','2Types'],'Others')\n\n# BedroomAbvGr\ndf['BedroomAbvGr']=df['BedroomAbvGr'].replace([1,5,6,0,8],'Others')\n\n# TotRmsAbvGrd\ndf['TotRmsAbvGrd']=df['TotRmsAbvGrd'].replace([10,11,3,12,14,2],'Others')\n\n# Fireplaces\ndf['Fireplaces']=df['Fireplaces'].replace([2,3],'Others')\n\n# GarageCars\ndf['GarageCars']=df['GarageCars'].replace([0,4],'Others')","a4784b47":"sns.distplot(df['SalePrice'], hist=True)\nplt.xticks(rotation = 20)\nplt.show()","882d65a4":"print('Skewness before transformation : %f'%df['SalePrice'].skew())","3e8d52f0":"# Log Transformation to remove skewness in traget variable\ndf['SalePrice'] = np.log(df['SalePrice'])\nprint('Skewness after transformation : %f'%df['SalePrice'].skew())","6c013593":"sns.distplot(df['SalePrice'], hist=True)\nplt.show()","bf199fb7":"# create dummy variable for MSSubClass\n\nMSSubClass = pd.get_dummies(df.MSSubClass,drop_first=True)\nMSSubClass.rename(columns = {30:'MSSubClass30',40:'MSSubClass40',45:'MSSubClass45',\n                             50:'MSSubClass50',60:'MSSubClass60',70:'MSSubClass70',\n                             75:'MSSubClass75',80:'MSSubClass80',85:'MSSubClass85',\n                             90:'MSSubClass90',120:'MSSubClass120',160:'MSSubClass160'\n                            ,180:'MSSubClass180',190:'MSSubClass190'}, inplace=True)\nMSSubClass.head()","6730b275":"# create dummy variable for MSZoning\nMSZoning = pd.get_dummies(df.MSZoning,drop_first=True)\nMSZoning.rename(columns = {'FV':'MSZoningFV','RH':'MSZoningRH','RL':'MSZoningRL',\n                           'RM':'MSZoningRM'}, inplace=True)\nMSZoning.head()","7ff1bf5c":"# create dummy variable for LotShape\nLotShape = pd.get_dummies(df.LotShape,drop_first=True)\nLotShape.rename(columns={'IR2':'LotShapeIR2','IR3':'LotShapeIR3','Reg':'LotShapeReg'},inplace=True)\nLotShape.head()","4834f261":"# create dummy variable for LotConfig\nLotConfig = pd.get_dummies(df.LotConfig,drop_first=True)\nLotConfig.rename(columns={'CulDSac':'LotConfigCulDSac','FR2':'LotConfigFR2','FR3':'LotConfigFR3',\n                         'Inside':'LotConfigInside'},inplace=True)\nLotConfig.head()","3160e878":"# create dummy variable for Neighborhood\nNeighborhood = pd.get_dummies(df.Neighborhood,drop_first=True)\nNeighborhood.rename(columns={'NAmes':'NeighborhoodNames','Others':'NeighborhoodOthers',\n                            'CollgCr':'NeighborhoodCollgCr','OldTown':'NeighborhoodOldTown',\n                             'Edwards':'NeighborhoodEdwards','Somerst':'NeighborhoodSomerst',\n                             'Gilbert':'NeighborhoodGilbert','NridgHt':'NeighborhoodNridgHt',\n                             'Sawyer':'NeighborhoodSawyer','NWAmes':'NeighborhoodNWAmes',\n                             'SawyerW':'NeighborhoodSawyerW','BrkSide':'NeighborhoodBrkSide',\n                             'Crawfor':'NeighborhoodCrawfor','Mitchel':'NeighborhoodMitchel',\n                             'NoRidge':'NeighborhoodNoRidge','Timber':'NeighborhoodTimber',\n                             'IDOTRR':'NeighborhoodIDOTRR'}, inplace=True)\nNeighborhood.head()","b952302f":"# create dummy variable for HouseStyle\nHouseStyle=pd.get_dummies(df.HouseStyle,drop_first=True)\nHouseStyle.rename(columns={'1Story':'HouseStyle_1Story','2Story':'HouseStyle_2Story',\n                           'Others':'HouseStyle_Others'},inplace=True)\nHouseStyle.head()","5ae436a3":"# create dummies for OverallQual\nOverallQual=pd.get_dummies(df.OverallQual,drop_first=True)\nOverallQual.rename(columns={5:'OverallQual_5',6:'OverallQual_6',7:'OverallQual_7'\n                           ,8:'OverallQual_8','Others':'OverallQual_Others'}, inplace=True)\nOverallQual.head()","4855326d":"# create dummies for OverallCond\nOverallCond=pd.get_dummies(df.OverallCond,drop_first=True)\nOverallCond.rename(columns={4:'OverallCond_4',5:'OverallCond_5',6:'OverallCond_6',7:'OverallCond_7',\n                           8:'OverallCond_8','Others':'OverallCond_Others'},inplace=True)\nOverallCond.head()","34467fd8":"# create dummies for RoofStyle\nRoofStyle=pd.get_dummies(df.RoofStyle,drop_first=True)\nRoofStyle.rename(columns={'Hip':'RoofStyleHip','Others':'RoofStyleOthers'},inplace=True)\nRoofStyle.head()","dafb88db":"# create dummies for Exterior1st\nExterior1st=pd.get_dummies(df.Exterior1st,drop_first=True)\nExterior1st.rename(columns={'CemntBd':'Exterior1stCemntBd', 'HdBoard': 'Exterior1stHdBoard', \n                            'MetalSd': 'Exterior1stMetalSd', 'Others': 'Exterior1stOthers', \n                            'Plywood': 'Exterior1stPlywood', 'VinylSd': 'Exterior1stVinylSd',\n                            'Wd Sdng':'Exterior1stWd Sdng'},inplace=True)\nExterior1st.head()","0f9400db":"# create dummies for Exterior2nd\nExterior2nd=pd.get_dummies(df.Exterior2nd,drop_first=True)\nExterior2nd.rename(columns={'CmentBd':'Exterior2ndCmentBd', 'HdBoard': 'Exterior2ndHdBoard',\n                            'MetalSd': 'Exterior2ndMetalSd', 'Others': 'Exterior2ndOthers',\n                            'Plywood': 'Exterior2ndPlywood', 'VinylSd': 'Exterior2ndVinylSd',\n                            'Wd Sdng':'Exterior2ndWd Sdng'},inplace=True)\nExterior2nd.head()","d624f9c5":"# create dummies for MasVnrType\nMasVnrType=pd.get_dummies(df.MasVnrType,drop_first=True)\nMasVnrType.rename(columns={'BrkFace':'MasVnrTypeBrkFace','None':'MasVnrTypeNone',\n                           'Stone':'MasVnrTypeStone'},inplace=True)\nMasVnrType.head()","efbe8def":"# create dummies for ExterQual\nExterQual=pd.get_dummies(df.ExterQual,drop_first=True)\nExterQual.rename(columns={'Others':'ExterQualOthers','TA':'ExterQualTA'},inplace=True)\nExterQual.head()","59de96ca":"# create dummies for Foundation\nFoundation=pd.get_dummies(df.Foundation,drop_first=True)\nFoundation.rename(columns={'CBlock':'FoundationCBlock','Others':'FoundationOthers',\n                           'PConc':'FoundationPConc'},inplace=True)\nFoundation.head()","e39c88fe":"# create dummies for BsmtQual\nBsmtQual=pd.get_dummies(df.BsmtQual,drop_first=True)\nBsmtQual.rename(columns={'Fa':'BsmtQualFa','Gd':'BsmtQualGd','TA':'BsmtQualTA'},inplace=True)\nBsmtQual.head()","aa31877a":"# create dummies for BsmtExposure\nBsmtExposure=pd.get_dummies(df.BsmtExposure,drop_first=True)\nBsmtExposure.rename(columns={'Gd':'BsmtExposureGd','Mn':'BsmtExposureMn','NA':'BsmtExposureNA',\n                            'No':'BsmtExposureNo'},inplace=True)\nBsmtExposure.head()","77e6fc2d":"# create dummies for BsmtFinType1\nBsmtFinType1 = pd.get_dummies(df.BsmtFinType1,drop_first=True)\nBsmtFinType1.rename(columns={'BLQ':'BsmtFinType1BLQ','GLQ':'BsmtFinType1GLQ',\n                             'LwQ':'BsmtFinType1LwQ','Rec':'BsmtFinType1Rec',\n                            'Unf':'BsmtFinType1Unf'},inplace=True)\nBsmtFinType1.head()","ac8ca6a0":"# create dummies for HeatingQC\nHeatingQC=pd.get_dummies(df.HeatingQC,drop_first=True)\nHeatingQC.rename(columns={'Gd':'HeatingQCGd','Others':'HeatingQCOthers','TA':'HeatingQCTA'},inplace=True)\nHeatingQC.head()","e6a8b3dd":"# create dummies for BsmtFullBath\nBsmtFullBath=pd.get_dummies(df.BsmtFullBath,drop_first=True)\nBsmtFullBath.rename(columns={1:'BsmtFullBath_1',2:'BsmtFullBath_2',3:'BsmtFullBath_3'},inplace=True)\nBsmtFullBath.head()","dd07bb96":"# create dummies for FullBath\nFullBath=pd.get_dummies(df.FullBath,drop_first=True)\nFullBath.rename(columns={1:'FullBath_1',2:'FullBath_2',3:'FullBath_3'},inplace=True)\nFullBath.head()","13c3ab20":"# create dummies for HalfBath\nHalfBath=pd.get_dummies(df.HalfBath,drop_first=True)\nHalfBath.rename(columns={1:'HalfBath_1',2:'HalfBath_2'},inplace=True)\nHalfBath.head()","2e195b13":"# create dummies for BedroomAbvGr\nBedroomAbvGr=pd.get_dummies(df.BedroomAbvGr,drop_first=True)\nBedroomAbvGr.rename(columns={3:'BedroomAbvGr_3',4:'BedroomAbvGr_4',\n                             'Others':'BedroomAbvGr_Others'},inplace=True)\nBedroomAbvGr.head()","aaa6174d":"# create dummies for KitchenQual\nKitchenQual=pd.get_dummies(df.KitchenQual,drop_first=True)\nKitchenQual.rename(columns={'Others':'KitchenQualOthers','TA':'KitchenQualTA'},inplace=True)\nKitchenQual.head()","713a6c74":"# create dummies for TotRmsAbvGrd\nTotRmsAbvGrd=pd.get_dummies(df.TotRmsAbvGrd,drop_first=True)\nTotRmsAbvGrd.rename(columns={5:'TotRmsAbvGrd_5',6:'TotRmsAbvGrd_6',7:'TotRmsAbvGrd_7',\n                            8:'TotRmsAbvGrd_8',9:'TotRmsAbvGrd_9','Others':'TotRmsAbvGrdOthers'},inplace=True)\nTotRmsAbvGrd.head()","9d025e92":"# create dummies for Fireplaces\nFireplaces=pd.get_dummies(df.Fireplaces,drop_first=True)\nFireplaces.rename(columns={1:'Fireplaces_1','Others':'FireplacesOthers'},inplace=True)\nFireplaces.head()","0c0fae8d":"# create dummies for GarageType\nGarageType=pd.get_dummies(df.GarageType,drop_first=True)\nGarageType.rename(columns={'BuiltIn':'GarageTypeBuiltIn','Detchd':'GarageTypeDetchd','NA':'GarageTypeNA',\n                          'Others':'GarageTypeOthers'},inplace=True)\nGarageType.head()","63b9b588":"# create dummies for GarageFinish\nGarageFinish=pd.get_dummies(df.GarageFinish,drop_first=True)\nGarageFinish.rename(columns={'RFn':'GarageFinishRFn','Unf':'GarageFinishUnf'},inplace=True)\nGarageFinish.head()","0524d8c4":"#create dummies for GarageCars\nGarageCars=pd.get_dummies(df.GarageCars,drop_first=True)\nGarageCars.rename(columns={2:'GarageCars_2',3:'GarageCars_3','Others':'GarageCarsOthers'},inplace=True)\nGarageCars.head()","692e1f9f":"# Concat all dummy variables in the original dataframe\ndf = pd.concat([df,MSSubClass,MSZoning,LotShape,LotConfig,Neighborhood,HouseStyle,OverallQual,\n                OverallCond,RoofStyle,Exterior1st,Exterior2nd,MasVnrType,ExterQual,Foundation,\n                BsmtQual,BsmtExposure,BsmtFinType1,HeatingQC,BsmtFullBath,FullBath,HalfBath,\n                BedroomAbvGr,KitchenQual,TotRmsAbvGrd,Fireplaces,GarageType,GarageFinish,\n                GarageCars], axis = 1)\ndf.head()","16e029b3":"df.shape","af6a8636":"# Drop the columns whose dummy variables are created and added in the original dataframe\ndf.drop(['MSSubClass','MSZoning','LotShape','LotConfig','Neighborhood','HouseStyle','OverallQual',\n         'OverallCond','RoofStyle','Exterior1st','Exterior2nd','MasVnrType','ExterQual',\n         'Foundation','BsmtQual','BsmtExposure','BsmtFinType1','HeatingQC','BsmtFullBath',\n         'FullBath','HalfBath','BedroomAbvGr','KitchenQual','TotRmsAbvGrd','Fireplaces',\n         'GarageType','GarageFinish','GarageCars'], axis = 1, inplace = True)\ndf.head()","c6b75422":"df.shape","d2d7f93a":"# Subtract the year present in columns to present year (2020)\nfrom datetime import date\npresent_year=date.today()\ndf['YearBuilt']=df['YearBuilt'].apply(lambda x:present_year.year-x)\ndf['YearRemodAdd']=df['YearRemodAdd'].apply(lambda x:present_year.year-x)\ndf['GarageYrBlt']=df['GarageYrBlt'].apply(lambda x:present_year.year-x)\ndf['YrSold']=df['YrSold'].apply(lambda x:present_year.year-x)","a3cbae75":"from sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(df, train_size = 0.7, test_size = 0.3, \n                                               random_state = 100)","23265989":"# min-max scaling - train data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ny_train = df.loc[:, 'SalePrice']\nX_train = df.loc[:, df.columns != 'SalePrice']\n\n# Apply scaler()\nscaler.fit(X)\n","ef2fd641":"X.head()","4541877a":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.3, random_state = 1)","9fcc8d85":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn import linear_model, metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV","7fac1e78":"# Running RFE with the output number of the variable equal to 50\nridge=Ridge()\nrfe = RFE(ridge, 50)\nrfe = rfe.fit(X_train, y_train)","d330f6f7":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","86a21bb4":"# Top 50 features selected using RFE\ncol = X_train.columns[rfe.support_]\ncol","b4594dc0":"# Features which are not included in top 50\nX_train.columns[~rfe.support_]","af41ff13":"# Creating X_train dataframe with RFE selected variables\nX_train_1 = X_train[col]\nX_train_1.head()","380bedf1":"X_train_1.shape","0813d27a":"# Creating Test X_test dataframe with RFE selected variables\nX_test_1 = X_test[col]\nX_test_1.head()","4565da30":"X_test_1.shape","5ee236c9":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv.fit(X_train_1, y_train) ","7df65515":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=200]\ncv_results.head()","aabc3ce5":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('Negative Mean Absolute Error')\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","90e0cdfb":"print(model_cv.best_params_)\nprint(model_cv.best_score_)","27b37f54":"# model with optimal alpha\n# Ridge regression\nlm1 = Ridge(alpha=0.4)\nlm1.fit(X_train_1, y_train)\n\n# predict\ny_train_pred = lm1.predict(X_train_1)\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))\ny_test_pred = lm1.predict(X_test_1)\nprint(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))\nprint(metrics.mean_squared_error(y_test,y_test_pred))","ee0af6f4":"# ridge model parameters\nmodel_parameters = list(lm1.coef_)\nmodel_parameters.insert(0, lm1.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X_train_1.columns\ncols = cols.insert(0, \"constant\")\nsorted(list(zip( model_parameters,cols)),reverse=True)\n","dcf9c882":"# RFE\nlasso=Lasso()\nrfe_lasso = RFE(lasso,50)\nrfe_lasso=rfe.fit(X_train,y_train)","9e97c840":"list(zip(X_train.columns,rfe_lasso.support_,rfe_lasso.ranking_))","089048ac":"col_lasso = X_train.columns[rfe_lasso.support_]\ncol_lasso","82031e38":"# list of alpha to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\n# cross validation\nmodel_lasso = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_lasso.fit(X_train[col_lasso], y_train) ","010551d0":"cv_results = pd.DataFrame(model_lasso.cv_results_)\ncv_results.head()","bc2877d2":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.xscale('log')\nplt.ylabel('Negative Mean Absolute Error')\n\nplt.title(\"Negative Mean Absolute Error and alpha\")\nplt.legend(['train score', 'test score'], loc='upper right')\nplt.show()","d33be7ed":"print(model_lasso.best_params_)\nprint(model_lasso.best_score_)","86fc2ebd":"# model with optimal alpha\n# lasso regression\nlm = Lasso(alpha=0.0001)\nlm.fit(X_train[col_lasso], y_train)\n\n# predict\ny_train_pred = lm.predict(X_train[col_lasso])\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))\ny_test_pred = lm.predict(X_test[col_lasso])\nprint(metrics.r2_score(y_true=y_test, y_pred=y_test_pred))\nprint(metrics.mean_squared_error(y_test,y_test_pred))","65fe3049":"# lasso model parameters\nmodel_parameters = list(lm.coef_)\nmodel_parameters.insert(0, lm.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X_train[col_lasso].columns\ncols = cols.insert(0, \"constant\")\nsorted(list(zip(model_parameters,cols)),reverse=True)","fd0ca535":"# Ridge Regression","d4d7b979":"##### Following columns are highly skewed (greater than 0.8) and hence are dropped\n- Street\n- LandContour\n- Utilities\n- LandSlope\n- Condition1\n- Condition2\n- BldgType\n- RoofMatl\n- ExterCond\n- BsmtCond\n- BsmtFinType2\n- Heating\n- CentralAir\n- Electrical\n- Functional\n- GarageQual\n- GarageCond\n- PavedDrive\n- SaleType\n- SaleCondition\n- BsmtHalfBath\n- KitchenAbvGr","0ec7b0d2":"## Year columns\nYearBuilt, YearRemodAdd, GarageYrBlt, YrSold are columns with year. Lets convert them into number of years to get better insights.","a42f98f9":"## Data Imputation","709741ab":"# Conclusion \n\n### For Ridge - \n    - Alpha = 0.4\n    - R2_score for train data = 85.82\n    - R2_score for test data = 81.24\n    - MSE = 0.0354 \n    \n    \n### For Lasso - \n    - Alpha = 0.0001\n    - R2_score for train data = 85.82\n    - R2_score for test data = 81.28\n    - MSE = 0.03543\n    \n ### Top 10 features are - \n     1. GarageCarsOthers = Size of garage in terms of car capacity should be zero or greater than 3\n     2. OverallCond_7 = preferred overall condition of the house is good\n     3. OverallCond_8 = preferred overall condition of the house is very good\n     4. OverallCond_Others = preferred overall condition of the house is excellent\n     5. GarageCars_3 = Size of garage in car in terms of car capacity should be 3\n     6. FullBath_3 = Full bathrooms above grade 3\n     7. OverallCond_6 = the overall condition of the house which are above average\n     8. FireplacesOthers = Number of fireplaces should be greater than one\n     9. MSSubClass75 = preferred type of dwelling involved in the sale is 2-1\/2 STORY ALL AGES\n    10. OverallCond_5 = the overall condition of the house which are average","49adc675":"Target variable 'SalePrice' is normally distributed.\n## Create dummy variables for categorical columns","d33d2031":"## Scaling on continous variable of training data\nWe are performing Min-Max Scaling","6d58836e":"## Optimal Aplha and MSE","3ea6af47":"## Problem Statement :\nA US-based housing company named Surprise Housing has decided to enter the Australian market.\nThe company uses data analytics to purchase houses at a price below their actual values and flip them\nat a higher price. For the same purpose, the company has collected a data set from the sale of houses\nin Australia.The company is looking at prospective properties to buy to enter the market.\n\nBuild a regression model using regularisation in order to predict the actual value of the prospective properties and decide whether to invest in them or not. In addition, the company wants to know:\n- Which variables are significant in predicting the price of a house, and\n- How well those variables describe the price of a house","4be8ad35":"## Data Cleaning\n\n#### Datatype correction","9dc7b6c9":"## Optimal Alpha and MSE","82f35a87":"##  Data Preparation\n\n### Check tagregt variable is normally distrubuted or not \ntarget variable is 'Sales price'","ee5734d6":"# Lasso Regression","64695079":"# Train-Test","137ebb55":"# Dividing into x and y for model building","899eff2b":"# Model Building\nRFE Approach to select top 50 features","a905f6fa":"## Data Imputation for Categorical Columns","7795b2b2":"#### Drop Columns with null percentage greater than 45%","32c6939d":"# Drop highly skewed columns","7a44ce70":"## Binning "}}