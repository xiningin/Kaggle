{"cell_type":{"5dd8d77f":"code","c99c029b":"code","5ec55ae0":"code","5ab86fd8":"code","c9d1be1c":"code","0bbdedf3":"code","3d12862b":"code","39c0be1b":"code","3fcdbcbd":"code","38f3a305":"code","299a1ff9":"code","6921fc3f":"code","3bbfeb33":"code","7a46bf98":"code","a94e1791":"code","620c265a":"code","3639cdd7":"code","3c060b90":"code","2b73075d":"code","f48ae690":"code","738a4907":"code","9fda9930":"code","3522cbe6":"code","ec70cdc6":"code","a97a10ab":"code","ceefb68e":"code","54d022c8":"code","fd2b5583":"code","28110d4b":"code","8bee3597":"code","3125d5e1":"code","880dcc76":"code","0eee642e":"code","67e4df99":"code","ea5c092a":"code","b282de93":"code","f4e66793":"code","ca58e023":"code","492b7d05":"code","ec92f7a5":"code","1ebad86c":"code","5adbb477":"code","1d5c36c1":"code","1845105c":"code","adf309fc":"code","21d63e7f":"code","f5dd58d7":"code","9b49e84b":"code","2e22ab84":"code","a5d187b6":"code","49133d28":"code","6e84e901":"code","6b072609":"markdown","4da6e90d":"markdown","185ce31f":"markdown","127f88f3":"markdown","f674abec":"markdown","992a8838":"markdown","79a983ff":"markdown","0a2a22f5":"markdown"},"source":{"5dd8d77f":"import matplotlib.pyplot as plt \nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport os \nimport plotly\nimport plotly.plotly as py\nimport math\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\n","c99c029b":"df = pd.read_csv(\"..\/input\/googleplaystore.csv\")","5ec55ae0":"df.head()","5ab86fd8":"df.info()","c9d1be1c":"sum(df.duplicated(\"App\"))","0bbdedf3":"df.drop_duplicates(subset='App', inplace=True)","3d12862b":"df.isna().sum()","39c0be1b":"df.dropna(subset = [\"Type\" , \"Content Rating\" , \"Current Ver\" , \"Android Ver\"]  , inplace = True)","3fcdbcbd":"df.isna().sum()","38f3a305":"df[\"Rating\"] = df[\"Rating\"].apply(lambda x: np.nan if math.isnan(x) else x)","299a1ff9":"for i in np.unique(df[\"Category\"]):\n    for l in np.unique(df[\"Type\"]):\n        df.loc[(df.Category == i) & (df.Type == l) & (df.Rating.isnull()), \"Rating\"] = np.random.normal(\n            np.mean(df.loc[(df.loc[:,\"Category\"] == i) & (df.loc[:,\"Type\"] == l)].loc[:,\"Rating\"]) , np.std(df.loc[(df.loc[:,\"Category\"] == i) & (df.loc[:,\"Type\"] == l)].loc[:,\"Rating\"]) , \n        size = len(df.loc[(df.Category == i) & (df.Type == l) & (df.Rating.isnull()), \"Rating\"]))                                                                                           ","6921fc3f":"df[\"Rating\"] = df[\"Rating\"].apply(lambda x: 5 if x>5 else x)\ndf[\"Rating\"] = df[\"Rating\"].apply(lambda x: 1 if x<1 else x)\ndf[\"Rating\"]\ndf.dropna(inplace = True)","3bbfeb33":"df.loc[:,'Installs'] = df.loc[:,'Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf.loc[:,\"Installs\"]=df.loc[:,\"Installs\"].apply(lambda x: x.replace(\",\",\"\") if \",\" in str(x) else x)\ndf.loc[:,\"Installs\"] = df.loc[:,\"Installs\"].apply(lambda x: int(x))","7a46bf98":"df.loc[:,'Price'] = df.loc[:,'Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndf.loc[:,'Price'] = df.loc[:,'Price'].apply(lambda x: float(x))\n","a94e1791":"df.loc[:,\"Reviews\"] = df.loc[:,\"Reviews\"].apply( lambda x : float(x))","620c265a":"df.loc[:,\"Size\"]\ndf.loc[:,\"Size\"] = df.loc[:,\"Size\"].apply(lambda x : x.replace(\"M\",\"\") if \"M\" in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\ndf.loc[:,\"Size\"] = df.loc[:,'Size'].apply( lambda x : float(x) if x != \"Varies with device\" else x)","3639cdd7":"df.columns","3c060b90":"#heat map\nbg_color = 'white'\nsns.set(rc={\"font.style\":\"normal\",\n            \"axes.facecolor\":bg_color,\n            \"figure.facecolor\":bg_color,\n            \"text.color\":\"black\",\n            \"xtick.color\":\"black\",\n            \"ytick.color\":\"black\",\n            \"axes.labelcolor\":\"black\",\n            \"axes.grid\":False,\n            'axes.labelsize':15,\n            'figure.figsize':(20.0, 10.0),\n            'xtick.labelsize':15,\n            'font.size':15,\n            'ytick.labelsize':15})\ndf_cor = df.loc[:,[\"Rating\",\"Reviews\",\"Installs\",\"Price\"]]\ndf_cor = (df_cor - np.mean(df_cor))\/np.std(df_cor)\ncor = df_cor.corr()\nmask = np.zeros_like(cor, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(cor , cmap = cmap , mask = mask , annot = True)","2b73075d":"earning={}\nfor i in np.unique(df[\"Category\"]):\n        earning[i] = np.mean(df.loc[(df.Category == i) & (df.Type == \"Paid\") , \"Price\"])*np.median(df.loc[(df.Category == i) & (df.Type == \"Paid\")  , \"Installs\"]) \n","f48ae690":"#how much paid app had earned(median)\na = sns.barplot(y = list(earning.keys()) , x = list(earning.values()) ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","738a4907":"#mean of price of each category \na = sns.barplot(y = df.loc[(df.Type == \"Paid\") , \"Category\"]  ,\n                x = df.loc[(df.Type == \"Paid\") , \"Price\"] , ci = None ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","9fda9930":"\n#rating of each category\na = sns.barplot(y = df[\"Category\"] , x = df[\"Rating\"] ,ci=None , \n                saturation=1 , \n                data = df , \n                palette = \"RdBu\",\n                hue = df[\"Type\"] ,\n                order = df.groupby(\"Category\").mean().sort_values(\"Rating\" ,\n                                                                       ascending = False).index[:16])","3522cbe6":"#rating of each category\na = sns.barplot(y = df[\"Category\"] , x = df[\"Rating\"] ,ci=None , \n                saturation=1 , \n                data = df , \n                palette = \"RdBu\",\n                hue = df[\"Type\"] ,\n                order = df.groupby(\"Category\").mean().sort_values(\"Rating\" ,\n                                                                       ascending = False).index[16:])","ec70cdc6":"#number of app of each category\n\np = sns.countplot(data=df,\n                  y = 'Category',\n                  saturation=1 , \n                  palette = \"RdBu\",\n                  hue = df[\"Type\"] ,\n                  order = df['Category'].value_counts().index[:16])\n\n\n","a97a10ab":"#number of app of each category\n\np = sns.countplot(data=df,\n                  y = 'Category',\n                  saturation=1 , \n                  palette = \"RdBu\",\n                  hue = df[\"Type\"] ,\n                  order = df['Category'].value_counts().index[16:])\n\n","ceefb68e":"#groups = df_free.groupby('Category').filter(lambda x: len(x) > 258).reset_index()\n#array = groups['Rating'].hist(by=groups['Category'], sharex=True, figsize=(20,20))","54d022c8":"#groups = df_paid.groupby('Category').filter(lambda x: len(x) > 25).reset_index()\n#array = groups['Rating'].hist(by=groups['Category'], sharex=True, figsize=(20,20))","fd2b5583":"#installs of each category\na = sns.barplot(y = df[\"Category\"] , x = df[\"Installs\"] , ci=None , \n                hue = df[\"Type\"] ,\n                saturation=1 , \n                palette = \"RdBu\",\n                data = df , \n                order = df.groupby(\"Category\").mean().sort_values(\"Installs\" ,\n                                                                ascending = False).index[:16])","28110d4b":"#installs of each category\na = sns.barplot(y = df[\"Category\"] , x = df[\"Installs\"] , ci=None , \n                hue = df[\"Type\"] ,\n                saturation=1 , \n                palette = \"RdBu\",\n                data = df , \n                order = df.groupby(\"Category\").mean().sort_values(\"Installs\" ,\n                                                                ascending = False).index[16:])","8bee3597":"earning={}\nfor i in np.unique(df[\"Content Rating\"]):\n        earning[i] = np.mean(df.loc[(df[\"Content Rating\"] == i) & (df.Type == \"Paid\") , \"Price\"])*np.mean(df.loc[(df[\"Content Rating\"] == i) & (df.Type == \"Paid\")  , \"Installs\"]) \nearning","3125d5e1":"#how much paid app had earned(mean)\na = sns.barplot(y = list(earning.keys()) , x = list(earning.values()) ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","880dcc76":"earning={}\nfor i in np.unique(df[\"Content Rating\"]):\n        earning[i] = np.mean(df.loc[(df[\"Content Rating\"] == i) & (df.Type == \"Paid\") , \"Price\"])*np.median(df.loc[(df[\"Content Rating\"] == i) & (df.Type == \"Paid\")  , \"Installs\"]) \nearning","0eee642e":"#how much paid app had earned(median)\na = sns.barplot(y = list(earning.keys()) , x = list(earning.values()) ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","67e4df99":"#mean of price of each category \na = sns.barplot(y = df.loc[(df.Type == \"Paid\") , \"Content Rating\"]  ,\n                x = df.loc[(df.Type == \"Paid\") , \"Price\"] , ci = None ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","ea5c092a":"#numbers of app of each content rating\na = sns.countplot(y = df[\"Content Rating\"] ,\n                data = df , \n                hue = df[\"Type\"] ,\n                saturation=1 , \n                palette = \"RdBu\",\n                order = df[\"Content Rating\"].value_counts().index)","b282de93":"#rating of each content rating\na = sns.barplot(y = df[\"Content Rating\"], x = df[\"Rating\"] ,\n                saturation=1 , \n                hue = df[\"Type\"] ,\n                palette = \"RdBu\",\n                data = df)","f4e66793":"#installs of each content rating\na = sns.barplot(y = df[\"Content Rating\"], x = df[\"Installs\"] ,\n                saturation=1 , \n                hue = df[\"Type\"] ,\n                palette = \"RdBu\",\n                data = df, ci=None)","ca58e023":"#pie chart of free app\nnumber_of_apps_in_category_free = df.loc[df['Type']==\"Free\"][\"Category\"].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_apps_in_category_free.index,\n        values = number_of_apps_in_category_free.values,\n        hoverinfo = 'label+value'\n    \n)]\n\nplotly.offline.iplot(data, filename='active_category')","492b7d05":"#pie chart of paid app\nnumber_of_apps_in_category_paid = df.loc[df['Type']==\"Paid\"][\"Category\"].value_counts().sort_values(ascending=True)\n\ndata = [go.Pie(\n        labels = number_of_apps_in_category_paid.index,\n        values = number_of_apps_in_category_paid.values,\n        hoverinfo = 'label+value'\n    \n)]\n\nplotly.offline.iplot(data, filename='active_category')","ec92f7a5":"#overall rating distribution of paid apps\ndata = [go.Histogram(\n        x = df.loc[df['Type']==\"Paid\"].Rating,\n        xbins = {'start': 1, 'size': 0.1, 'end' :5}\n)]\n\nprint('Average app rating = ', np.mean(df.loc[df['Type']==\"Paid\"].Rating))\nplotly.offline.iplot(data, filename='overall_rating_distribution')","1ebad86c":"#overall rating distribution of free apps\ndata = [go.Histogram(\n        x = df.loc[df['Type']==\"Free\"].Rating,\n        xbins = {'start': 1, 'size': 0.1, 'end' :5}\n)]\n\nprint('Average app rating = ', np.mean(df.loc[df['Type']==\"Free\"].Rating))\nplotly.offline.iplot(data, filename='overall_rating_distribution')","5adbb477":"df[\"Size\"] = df[\"Size\"].apply(lambda x : float(x) if x != \"Varies with device\" else False)","1d5c36c1":"df = df.loc[df[\"Size\"] != False].dropna()\n","1845105c":"#heat map\ndf_cor = df.loc[:,[\"Rating\",\"Reviews\",\"Installs\",\"Price\",\"Size\"]]\ndf_cor = (df_cor - np.mean(df_cor))\/np.std(df_cor)\ncor = df_cor.corr()\nmask = np.zeros_like(cor, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(cor , cmap = cmap , mask = mask , annot = True)","adf309fc":"df[\"size\"] = pd.qcut(df[\"Size\"] , 4)","21d63e7f":"earning={}\n\nfor i in np.unique(df[\"size\"]):\n        \n        earning[i] = np.mean(df.loc[(df[\"size\"] == i) & (df.Type == \"Paid\") , \"Price\"])*np.mean(df.loc[(df[\"size\"] == i) & (df.Type == \"Paid\")  , \"Installs\"]) \nearning","f5dd58d7":"#how much paid app had earned(mean)\na = sns.barplot(x = list(earning.keys()) , y = list(earning.values()) ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","9b49e84b":"earning={}\nfor i in np.unique(df[\"size\"]):\n        earning[i] = np.mean(df.loc[(df[\"size\"] == i) & (df.Type == \"Paid\") , \"Price\"])*np.median(df.loc[(df[\"size\"] == i) & (df.Type == \"Paid\")  , \"Installs\"]) \nearning","2e22ab84":"#how much paid app had earned(median)\na = sns.barplot(x = list(earning.keys()) , y = list(earning.values()) ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n               )","a5d187b6":"#mean of price of each category \na = sns.barplot(x = df.loc[(df.Type == \"Paid\") , \"size\"]   ,\n                y = df.loc[(df.Type == \"Paid\") , \"Price\"] , ci = None ,\n                saturation=1 , \n                palette = \"GnBu_d\", \n                data = df\n               )","49133d28":"# rating of apps with different size \na = sns.barplot(y = df[\"size\"] , x = df[\"Rating\"],\n                hue = df[\"Type\"] ,\n                palette = \"RdBu\",\n                data = df )\nprint(np.unique(df[\"size\"]))\nplt.yticks([0,1,2,3],[\"0\",\"1\",\"2\",\"3\"])\n","6e84e901":"# installs of apps with different size \na = sns.barplot(y = df[\"size\"] , x = df[\"Installs\"],ci = None ,\n                hue = df[\"Type\"] ,\n                palette = \"RdBu\",\n                data = df )\nplt.yticks([0,1,2,3],[\"0\",\"1\",\"2\",\"3\"])","6b072609":"Read data","4da6e90d":"Remove some missing data.","185ce31f":"First, I import some packages.","127f88f3":"This dataset contains some duplicated data.","f674abec":"Than doing data preprocessing","992a8838":"Fit a normal distribution to impute missing values of rating by different type(free or paid) and category.","79a983ff":"> Thanks to [All that you need to know about the Android market](https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market) and I did some futher extensions.\n\n\nThanks for your reading . ","0a2a22f5":"Analyze"}}