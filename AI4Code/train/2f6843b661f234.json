{"cell_type":{"3fa76bdb":"code","9bac5481":"code","a2f53be5":"code","134fe7e0":"code","e9d998d6":"code","ec7cdfdc":"code","fbfc1169":"code","dd6fa11b":"code","92d867c3":"code","470f41db":"markdown","b095526d":"markdown","d042db6c":"markdown","c6e17c43":"markdown","ee4fb3d2":"markdown"},"source":{"3fa76bdb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","9bac5481":"data = pd.read_csv(r'..\/input\/income\/income.csv')\ndata.head()","a2f53be5":"def create_df(df_x,df_y):\n  df_x = pd.DataFrame(df_x,columns=['Age'])\n  df_y = pd.DataFrame(df_y,columns=['Income'])\n  df_x = df_x.join(df_y)\n  return df_x","134fe7e0":"plt.scatter(data['Age'],data['Income($)'])\nplt.xlabel('Age')\nplt.ylabel(\"Income\")\nplt.title(\"Income v\/s Age\")","e9d998d6":"#preprocessing data\nX = data[['Age']].values\ny = data[['Income($)']].values\nX = StandardScaler().fit(X).transform(X.astype(float))\ny = StandardScaler().fit(y).transform(y.astype(float))\n\n#spliting data into train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\nX_train_ = create_df(X_train,y_train)\nX_test_ = create_df(X_test,y_test)\nX_ = create_df(X,y)\n\n#KMeans clusterring\nKMean=KMeans(n_clusters=3,random_state=42).fit(X_train_)\ncenter = KMean.cluster_centers_\nprint(\"Centroids of clusters\")\ncenter\n","ec7cdfdc":"X_ = X_.join(pd.DataFrame(KMean.predict(X_),columns=['class']))\nX_train_ = X_train_.join(pd.DataFrame(KMean.predict(X_train_),columns=['class']))\nX_test_ = X_test_.join(pd.DataFrame(KMean.predict(X_test_),columns=['class']))\nX_test_.to_csv(\"Test_result_norm.csv\")","fbfc1169":"def plots(X_):\n    groups = X_.groupby(\"class\")\n    t=0\n    for name, group in groups:\n        plt.scatter(group[\"Age\"], group[\"Income\"],label='{}-Train'.format(t))\n        t+=1\n    plt.legend()\n    plt.xlabel('Age Normalized')\n    plt.ylabel(\"Income Normalized\")\n    plt.title(\"Income v\/s Age Normalized\")","dd6fa11b":"plots(X_train_)\nfor i in range(0,3):\n  t=i+1\n  color = ['red','black','#00008b']\n  plt.scatter(center[i][0],center[i][1],marker='^',color=color[i],s=60,label='{}-centroid'.format(t))\n  plt.legend()\nprint(\"Training Data Classification\")\nplt.show()","92d867c3":"plots(X_train_)\ngroups = X_test_.groupby(\"class\")\ncolor = ['blue','orange','green']\nt=0\nfor name, group in groups:\n    plt.scatter(group[\"Age\"], group[\"Income\"],marker='s',s=50,label='{}-Test'.format(t),color=color[t])\n    t+=1\nplt.legend()\nprint(\"Test data (square box) and Training data (circles) classification\")\nplt.show()","470f41db":"#### creating datframe of income","b095526d":"#### From the above graph we see 3 clusters are forming, So we will take `n_clusters = 3`","d042db6c":"#### Merging normalized datsets with there corresponding class","c6e17c43":"#### Plotting income dataset between Age and Income column","ee4fb3d2":"#### Function to create dataframe and join two different dataframes of same length"}}