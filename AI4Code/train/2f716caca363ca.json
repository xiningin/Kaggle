{"cell_type":{"a0f4a9c0":"code","2865d694":"code","c325d329":"code","8694b252":"code","0a286763":"code","e197daae":"code","cb4217b4":"code","54468c2a":"code","f5aa3f2b":"code","642171c2":"code","0052ba6f":"code","8a5cdbff":"code","61749d00":"code","42054ef7":"code","e75defd4":"code","c813baed":"code","c4325b5d":"code","7518cdcc":"code","569f1d25":"code","fb3f109c":"code","3508c685":"code","dadd8484":"code","00ae87e9":"code","13ac0495":"code","576a7a3e":"code","ad335013":"code","91102d24":"code","70fa8bf4":"markdown","29a56208":"markdown","a41856ea":"markdown","27cbc8d8":"markdown","2ea12c55":"markdown","c83b46b2":"markdown","c6826b16":"markdown","c8b5b709":"markdown","4ffe70b8":"markdown","5b509c8a":"markdown","1cca66d3":"markdown","d1fb4a80":"markdown","58878e30":"markdown"},"source":{"a0f4a9c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2865d694":"data = pd.read_csv(\"\/kaggle\/input\/groceries\/Groceries.csv\")\ndata.tail()","c325d329":"unique = pd.DataFrame(data[\"Item\"].unique(),columns=[\"Itemsets\"])\nprint(\"Number of unique itemsets is\",len(data[\"Item\"].unique()))","8694b252":"lis = []\nfor i in unique.Itemsets:\n    lis.append(data[data.Item == i].count()[1])\n    ","0a286763":"unique[\"Count\"] = lis\nunique.head()","e197daae":"len(data[\"Customer\"].unique())","cb4217b4":"item_list = data.groupby(\"Customer\").Item.apply(list).values.tolist()\n","54468c2a":"x = []\nfor i in item_list:\n    x.append(len(i))\nplt.hist(x,range = (0,32))\nplt.title(\"Histogram of number of unique items\")\nplt.xlabel(\"Number of items in basket\")\nplt.ylabel(\"Count\")\nplt.savefig(\"Histogram.png\")","f5aa3f2b":"df_ = pd.DataFrame(x)\ndf_.describe()","642171c2":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nfrom mlxtend.preprocessing import TransactionEncoder\n# Find the frequent itemsets\ntrans_en = TransactionEncoder()\nte_ary = trans_en.fit(item_list).transform(item_list)\nItemIndicator = pd.DataFrame(te_ary, columns=trans_en.columns_)\n\n# Calculate the frequency table\nfrequent_itemsets = apriori(ItemIndicator, min_support = 75\/9835, use_colnames = True)","0052ba6f":"frequent_itemsets","8a5cdbff":"y = []\nfor i in range(0,len(frequent_itemsets[\"itemsets\"])):\n    y.append(len(frequent_itemsets[\"itemsets\"][i]))\nprint(\"Largest k value among the itemset is\",max(y))","61749d00":"assoc_rules = association_rules(frequent_itemsets, metric = \"confidence\", min_threshold = 0.01)\nprint(\"The total number of association rules are\",len(assoc_rules),\"with minimum confidence of 1%\")","42054ef7":"import matplotlib.pyplot as plt\nplt.figure(figsize=(6,4))\nplt.scatter(assoc_rules['confidence'], assoc_rules['support'], s = assoc_rules['lift'])\n\nplt.xlabel(\"Confidence\")\nplt.ylabel(\"Support\")\nplt.show()\n","e75defd4":"assoc_rules_60 = association_rules(frequent_itemsets, metric = \"confidence\", min_threshold = 0.6)\nassoc_rules_60","c813baed":"df = pd.read_csv(\"\/kaggle\/input\/spiral\/Spiral.csv\")\ndf.head()","c4325b5d":"sns.scatterplot(df.x,df.y)\nplt.title(\"ScatterPlot for X vs Y\")","7518cdcc":"from sklearn.cluster import KMeans\ntraining_data = df[['x','y']]\nkmeans = KMeans(n_clusters=2,random_state=60616).fit(training_data)\n\ncentroids = kmeans.cluster_centers_\ndf[\"Labels\"] = kmeans.labels_","569f1d25":"sns.scatterplot(df.x,df.y,hue=df.Labels)\nplt.title(\"Scatterplot specifying 2 clusters\")","fb3f109c":"import math\nimport sklearn.neighbors\n\n# Three nearest neighbors\nkNNSpec = sklearn.neighbors.NearestNeighbors(n_neighbors = 3, algorithm = 'brute', metric = 'euclidean')\nnbrs = kNNSpec.fit(training_data)\nd3, i3 = nbrs.kneighbors(training_data)","3508c685":"# Retrieve the distances among the observations\ndistObject = sklearn.neighbors.DistanceMetric.get_metric('euclidean')\ndistances = distObject.pairwise(training_data)","dadd8484":"# Create the Adjacency and the Degree matrices\nnObs = df.shape[0]\nAdjacency = np.zeros((nObs, nObs))\nDegree = np.zeros((nObs, nObs))","00ae87e9":"for i in range(nObs):\n    for j in i3[i]:\n        if (i <= j):\n            Adjacency[i,j] = math.exp(- distances[i][j])\n            Adjacency[j,i] = Adjacency[i,j]\n\nfor i in range(nObs):\n    sum = 0\n    for j in range(nObs):\n        sum += Adjacency[i,j]\n    Degree[i,i] = sum\n        \nLmatrix = Degree - Adjacency\n\nfrom numpy import linalg as LA\nevals, evecs = LA.eigh(Lmatrix)\n","13ac0495":"# Series plot of the smallest ten eigenvalues to determine the number of clusters\nplt.scatter(np.arange(0,9,1), evals[0:9,])\nplt.xlabel('Sequence')\nplt.ylabel('Eigen value')\nplt.title(\"Eigen Value Plot\")\nplt.show()","576a7a3e":"Z = evecs[:,[0,1]]\n\nplt.scatter(Z[[0]], Z[[1]])\nplt.xlabel('X - Axis')\nplt.ylabel('Y - Axis')\nplt.title(\"Eigen Vectors Plot\")\nplt.show()","ad335013":"#print(\"The means and standard deviation of the eigenvectors are as follows :\",\"\\n\\nMeans\\t\\t   \",round(Z[[0]].mean(),10) , round(Z[[1]].mean(),10) ,\"\\n\\nStandard Deviations\", round(Z[[0]].std(),10) , round(Z[[1]].std(),10))\npd.DataFrame([[Z[[0]],0.0707106781,0.0707106781],[Z[[1]],-0.0707106781,0.0707106781]],columns=[\"EigenVectors\",\"Mean\",\"Standard Deviation\"])","91102d24":"kmeans_spectral = KMeans(n_clusters=2, random_state=0).fit(Z)\n\ndf['Labels'] = kmeans_spectral.labels_\n\n#plt.scatter(df['x'], df['y'], c = df['SpectralCluster'])\nsns.scatterplot(df['x'], df['y'],hue = df['Labels'])\nplt.xlabel('X - axis')\nplt.ylabel('Y - axis')\nplt.title(\"Spectral Clusters\")\nplt.legend(loc=0)\nplt.show()","70fa8bf4":"(b) Apply the K-mean algorithm directly using your number of clusters that you think in (a). Regenerate the scatterplot using the K-mean cluster identifier to control the color scheme?","29a56208":"(b) If you are interested in the k-itemsets which can be found in the market baskets of at least seventy five (75) customers.  How many itemsets can you find?  Also, what is the largest k value among your itemsets?","a41856ea":"(c) Find out the association rules whose Confidence metrics are at least 1%.  How many association rules have you found?  Please be reminded that a rule must have a non-empty antecedent and a non-empty consequent.  Also, you do not need to show those rules.","27cbc8d8":"# Machine Learning Assignment 02","2ea12c55":"(e) Apply the K-mean algorithm on your first two eigenvectors that correspond to the first two smallest eigenvalues. Regenerate the scatterplot using the K-mean cluster identifier to control the color scheme?","c83b46b2":"#### Number of unique itemsets","c6826b16":"(d) Graph the Support metrics on the vertical axis against the Confidence metrics on the horizontal axis for the rules you found in (c).  Please use the Lift metrics to indicate the size of the marker. ","c8b5b709":"(a)Generate a scatterplot of y (vertical axis) versus x (horizontal axis).  How many clusters will you say by visual inspection?","4ffe70b8":"## Question 2","5b509c8a":"(d) Retrieve the first two eigenvectors that correspond to the first two smallest eigenvalues.  Display up to ten decimal places the means and the standard deviation of these two eigenvectors.  Also, plot the first eigenvector on the horizontal axis and the second eigenvector on the vertical axis.","1cca66d3":"(c) Apply the nearest neighbor algorithm using the Euclidean distance.  How many nearest neighbors will you use?  Remember that you may need to try a couple of values first and use the eigenvalue plot to validate your choice.","d1fb4a80":"### Question 1\n(a) Create a dataset which contains the number of distinct items in each customer\u2019s market basket. Draw a histogram of the number of unique items.  What are the median, the 25th percentile and the 75th percentile in this histogram?","58878e30":"(e)List the rules whose Confidence metrics are at least 60%.  Please include their Support and Lift metrics."}}