{"cell_type":{"eaa446c1":"code","fe630dee":"code","8d104f57":"code","5b9e57b9":"code","07f06fda":"code","de80e507":"code","d9732128":"code","aae61b3b":"code","bed499eb":"code","de175db3":"code","8c4f7c34":"code","a6a25776":"code","aceeb34b":"code","eff3a080":"code","a3bcb188":"code","df1283dc":"code","7200a2f3":"code","812fddf2":"code","bdb56e33":"code","ba38e68e":"code","c77dc71e":"code","02c8e20c":"code","4c0b75b4":"code","4d06d4b1":"code","62f85b36":"markdown","7f0fe49b":"markdown","4dc47ef1":"markdown","c21776f1":"markdown","809bbef7":"markdown","1b159470":"markdown","2fb712d8":"markdown","8214fce5":"markdown","216549a8":"markdown","4f4abf8c":"markdown","cde5e6be":"markdown"},"source":{"eaa446c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fe630dee":"df = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","8d104f57":"df.columns","5b9e57b9":"df.info()","07f06fda":"df.head(10)","de80e507":"df.describe()","d9732128":"df.info()","aae61b3b":"def bar_plot(variable):\n    varCount = df[variable].value_counts()\n    \n    plt.figure(figsize = (10,10))\n    plt.bar(varCount.index, varCount)\n    plt.xticks(varCount.index, varCount.index.values,rotation=90, horizontalalignment='right',fontweight='light',fontsize='large')\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()","bed499eb":"category1 = [ \"Platform\", \"Genre\",\"Year\"] # I didn't do plt bar other categorical variables like name and publisher for it not show correct visual\nfor c in category1:\n    bar_plot(c)","de175db3":"category2 = [\"Name\",\"Publisher\"]\nfor c in category2:\n    print(df[c].value_counts())","8c4f7c34":"def plot_hist(variable):\n    plt.figure(figsize = (5,5))\n    plt.hist(df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.show()","a6a25776":"numericVar = [ \"EU_Sales\", \"JP_Sales\", \"Other_Sales\", \"Global_Sales\"]\nfor n in numericVar:\n       plot_hist(n)","aceeb34b":"# Genre vs Global_Sales \ndf[[\"Genre\",\"Global_Sales\"]].groupby([\"Genre\"], as_index = False).mean().sort_values(by=\"Global_Sales\",ascending = False)","eff3a080":"# Platform vs Global_Sales\ndf[[\"Platform\",\"Global_Sales\"]].groupby([\"Platform\"], as_index = False).mean().sort_values(by=\"Global_Sales\",ascending = False)","a3bcb188":"# Year vs Global_Sales\ndf[[\"Year\",\"Global_Sales\"]].groupby([\"Year\"], as_index = False).mean().sort_values(by=\"Global_Sales\",ascending = False)","df1283dc":"# Publisher vs Global_Sales\np = df[[\"Publisher\",\"Global_Sales\"]].groupby([\"Publisher\"], as_index = False).mean().sort_values(by=\"Global_Sales\",ascending = False)\np.head(15)   \n    ","7200a2f3":"df[\"Publisher\"].unique()","812fddf2":"# outlier detection(IQR-Quantile) get reference from publisher \n\nfor column in df.columns[6:]: # selected only sales columns\n    for p in df[\"Publisher\"].unique():\n        selected_p = df[df[\"Publisher\"] == p]\n        selected_column = selected_p[column]\n        \n        q1 = selected_column.quantile(0.25)\n        q3 = selected_column.quantile(0.75)\n        \n        iqr = q3 - q1\n        \n        minimum = q1 - (1.5 * iqr)\n        maximum = q3 + (1.5 * iqr)\n        \n        print(column,p,\"| min=\",minimum,\"max=\",maximum)\n        \n        \n        max_idxs = df[(df[\"Publisher\"] == p) & (df[column] > maximum)].index  \n        print(max_idxs)\n        min_idxs = df[(df[\"Publisher\"] == p) & (df[column] < minimum)].index  \n        print(min_idxs)\n        \n        df.drop(index= max_idxs,inplace= True)\n        df.drop(index= min_idxs,inplace= True)\n        ","bdb56e33":"df.info()","ba38e68e":"df.isna().sum() # find missing values","c77dc71e":"# filling missing values with mode\ndf[\"Year\"].fillna(df[\"Year\"].mode()[0], inplace=True)\ndf[\"Publisher\"].fillna(df[\"Publisher\"].mode()[0], inplace=True)\n\ndf.isna().sum()","02c8e20c":"plt.figure(figsize = (8,8))\nax = sns.heatmap(df.corr(), linewidths=.5)","4c0b75b4":"for column in df.columns[6:]:\n    sns.relplot(x=\"Year\", y=column, kind=\"line\",data=df)\n    plt.show()","4d06d4b1":"genre_val = df.Genre.value_counts().values\nlabels = df.Genre.value_counts().index\nplt.figure(figsize=(10,10))\nplt.pie(genre_val, labels=labels)\n\nplt.show()","62f85b36":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Genre - Global_Sales\n* Platform - Global_Sales\n* Year - Global_Sales\n* Publisher - Global_Sales","7f0fe49b":"<a id = \"4\"><\/a><br>\n## Categorical Variable","4dc47ef1":"<a id = \"8\"><\/a><br>\n# Missing Values","c21776f1":"<a id = \"7\"><\/a><br>\n# Outlier Detection","809bbef7":"* float64(6): Year, Na_Sales, EU_Sales, JP_Sales, Other_Sales and Global_Sales\n* int64(1): Rank\n* object(4): Name, Platform, Genre and Publisher","1b159470":"<a id = \"9\"><\/a><br>\n# Visualization","2fb712d8":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Platform, Genre, Name, Publisher and Year\n* Numerical Variable: Rank, Na_Sales, EU_Sales, JP_Sales, Other_Sales and Global_Sales","8214fce5":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. Rank: Ranking of overall sales\n1. Name: The games name\n1. Platform:  Platform of the games release (i.e. PC,PS4, etc.)\n1. Year: Year of the game's release\n1. Genre: Genre of the game  \n1. Publisher: Publisher of the game\n1. NA_Sales: Sales in North America (in millions)\t\n1. EU_Sales: Sales in Europe (in millions)\n1. JP_Sales: Sales in Japan (in millions)\n1. Other_Sales: Sales in the rest of the world (in millions)\t\n1. Global_Sales: Total worldwide sales.\n","216549a8":"<a id = \"1\"><\/a><br>\n# Load and Check Data","4f4abf8c":"<a id = \"5\"><\/a><br>\n## Numeric Variable","cde5e6be":"<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)   \n1. [Visualization](#9)       "}}