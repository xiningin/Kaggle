{"cell_type":{"afc79982":"code","68bfbf68":"code","6e7b9a05":"code","a444d589":"code","f2836883":"code","704751d9":"code","efb886af":"code","4f93545f":"code","8756c9bc":"code","36d16be3":"code","f9710de8":"code","06609a47":"code","1195791b":"code","edd63604":"code","05affdbf":"code","f14ad9fc":"code","d8c5ddb8":"code","c6e21fdb":"code","d689f8bc":"code","eb3eba2d":"code","9590d345":"code","2ee19e87":"code","197bfb0f":"code","fe6acd62":"code","f1e600b0":"code","6012f0dd":"code","f36e7fd7":"code","4fa8e69e":"code","10b7e134":"code","e95de878":"markdown","da3d5921":"markdown","9b52f319":"markdown","c58f9f66":"markdown","f3beec70":"markdown","a57339b8":"markdown"},"source":{"afc79982":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68bfbf68":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6e7b9a05":"#read CSV file for df\ndf1 = pd.read_csv('\/kaggle\/input\/loan-data\/loan_data.csv')","a444d589":"#ascertain number of rows and columns\ndf1.shape","f2836883":"#ascertain column names, no. of values, dtypes and identify missing values.\ndf1.info()","704751d9":"#Initiate a list for categoricals\ncateg_list = ['purpose']\n#create new df with dummy variables\ndf2 = pd.get_dummies(df1, columns = categ_list, drop_first=True)\n#print info to confirm successful and check dtypes\ndf2.info()","efb886af":"#understand the loication and range of values for each variable\ndf2.describe()","4f93545f":"#calculate Pearson correlation coefficients for all variables in df\ndf2.corr()","8756c9bc":"#create conditions for subsetting\ndefault = df2['not.fully.paid']==1","36d16be3":"#plot installment value according to default\ndf2[default==True]['installment'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['installment'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Installment')\nplt.ylabel('Frequency')\nplt.legend()","f9710de8":"#plot interest rate according to default\ndf2[default==True]['int.rate'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['int.rate'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Interest Rate')\nplt.ylabel('Frequency')\nplt.legend()","06609a47":"#plot log of annual income according to default\ndf2[default==True]['log.annual.inc'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['log.annual.inc'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Log of Annual Income')\nplt.ylabel('Frequency')\nplt.legend()","1195791b":"#plot debt-to-income ratio according to default\ndf2[default==True]['dti'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['dti'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Debt-to-Income Ratio')\nplt.ylabel('Frequency')\nplt.legend()","edd63604":"#plot FICO score according to default\ndf2[default==True]['fico'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['fico'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('FICO Score')\nplt.ylabel('Frequency')\nplt.legend()","05affdbf":"#plot Days with Credit Line according to default\ndf2[default==True]['days.with.cr.line'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['days.with.cr.line'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Days with Credit Line')\nplt.ylabel('Frequency')\nplt.legend()","f14ad9fc":"#plot Revolving Balance Utilisation Rate according to default\ndf2[default==True]['revol.util'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['revol.util'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('Revolving Balance Utilisation Rate')\nplt.ylabel('Frequency')\nplt.legend()","d8c5ddb8":"#plot No. of credit enquires in last 6 months according to default\ndf2[default==True]['inq.last.6mths'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['inq.last.6mths'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('No. of credit enquires in last 6 months')\nplt.ylabel('Frequency')\nplt.legend()","c6e21fdb":"#plot No. of defaults in past 2 years according to default\ndf2[default==True]['delinq.2yrs'].hist(alpha=0.65, color='red', bins=5, label = 'Defaulted')\ndf2[default==False]['delinq.2yrs'].hist(alpha=0.65, color='green', bins=5, label = 'Performing')\nplt.xlabel('No. of defaults in past 2 years')\nplt.ylabel('Frequency')\nplt.legend()","d689f8bc":"#plot No. of derogatory public records according to default\ndf2[default==True]['pub.rec'].hist(alpha=0.65, color='red', bins=25, label = 'Defaulted')\ndf2[default==False]['pub.rec'].hist(alpha=0.65, color='green', bins=25, label = 'Performing')\nplt.xlabel('No. of derogatory public records')\nplt.ylabel('Frequency')\nplt.legend()","eb3eba2d":"df1.groupby('purpose')[\"not.fully.paid\"].sum().plot(kind='bar', color='red', alpha=0.65, label = 'Defaulted')\ndf1.groupby('purpose')[\"not.fully.paid\"].count().plot(kind='bar', color='blue', alpha=0.65, label = 'All')\nplt.xlabel('Loan Purposes')\nplt.ylabel('Frequency')\nplt.legend()","9590d345":"#Import modelling packages\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","2ee19e87":"#define X and y\nX = df2.drop([\"not.fully.paid\"], axis=1)\ny = df2[\"not.fully.paid\"]\n\n#split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=66, stratify=y)","197bfb0f":"#Instantiate logistic regression\nlogreg = LogisticRegression()\n\n#train\/fit the model\nlogreg.fit(X_train, y_train)\n\n#generate predictions\ny_pred = logreg.predict(X_test)","fe6acd62":"#Evaluate\nlogreg.score(X_test, y_test)","f1e600b0":"print(confusion_matrix(y_test, y_pred))","6012f0dd":"print(classification_report(y_test, y_pred))","f36e7fd7":"y_pred_prob = logreg.predict_proba(X_test)[:,1]\nroc_auc_score(y_test, y_pred_prob)","4fa8e69e":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)","10b7e134":"plt.plot(fpr, tpr, label = \"Logistic Regression\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"LogReg ROC Curve\")\nplt.show()","e95de878":"Import the data to a Pandas DataFrame","da3d5921":"Explore DataFrame","9b52f319":"Explore final dataset before deciding best approach for modelling.","c58f9f66":"Plot variables with histograms based on meeting default condition","f3beec70":"No apparent missing values. All data types appear appropriate given variable descriptions. Purpose column must be encoded as k-1 dummy variables to avoid introducing multicollinearity.","a57339b8":"Import basic libraries for exploratory data analysis, visualization and cleaning."}}