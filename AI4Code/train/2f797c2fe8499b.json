{"cell_type":{"6359ebd4":"code","51f724de":"code","be899a09":"code","70a42c32":"code","e9d5783f":"code","54dc0460":"code","f9ea6341":"code","d25dec15":"code","a6fed572":"code","1bfe933a":"code","6d956df4":"code","0f55222e":"code","f3585f77":"markdown","3bf5bbce":"markdown","ff466690":"markdown","7b2628c8":"markdown","cc585581":"markdown","90ea63fd":"markdown","d6b4bc56":"markdown","f148ebd5":"markdown"},"source":{"6359ebd4":"import bokeh.sampledata\nbokeh.sampledata.download() # In case you do not have this\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import gmap\nfrom bokeh.tile_providers import CARTODBPOSITRON\nfrom bokeh.models import WMTSTileSource, LinearColorMapper, LogColorMapper,ColumnDataSource, HoverTool, CustomJS, Slider, ColorBar, FixedTicker\nfrom bokeh.sampledata.us_counties import data as counties\nfrom bokeh.palettes import Viridis256,Viridis6, Greys256, Spectral5\nfrom bokeh.transform import linear_cmap, factor_cmap\nfrom bokeh.layouts import row, column, widgetbox\nfrom matplotlib import colors as mcolors\nfrom bokeh.sampledata.us_states import data as states","51f724de":"output_notebook()","be899a09":"#wage = pd.read_excel(\"Minimum_Wage_Data.xlsx\", sheet_name = \"Minimum_Wage_Data\")\nwage = pd.read_csv(\"..\/input\/Minimum Wage Data.csv\", encoding = \"Windows-1252\" )\nwage.head()","70a42c32":"wage.info()","e9d5783f":"number_of_states = np.unique(wage['State']).tolist()\nprint (\"The states in the data are: \", number_of_states)\nprint (\"\\nTotal number of states: \", len(number_of_states))","54dc0460":"state = pd.DataFrame(states)\nstate.head()","f9ea6341":"dic = dict(zip(state.columns.tolist(),(state.iloc[2,:]).tolist())) # dictionary like {'NV':'Nevada','AZ':'Arizona'...}\nstate = state.rename(columns=dic) # the 'rename' function requires dictionary to change the column names\nstate = state.reindex(sorted(state.columns),axis=1) # now I can reorder the columns to fit the 'wage' dataset\nstate.head()","d25dec15":"print (\"The states in the 'state' dataset are: \", list(set(state.iloc[2,:].tolist()).intersection(number_of_states)))\nprint (\"\\nNumber of states in the 'state' dataset: \",len((list(set(state.iloc[2,:].tolist()).intersection(number_of_states)))))","a6fed572":"wage = wage[-wage[\"State\"].isin(['Guam','U.S. Virgin Islands','Puerto Rico','Federal (FLSA)'])]\nwage = wage.reset_index()\n\nwage1968 = wage[wage['Year']==1968]\nwage1968.index = range(len(wage1968)) # as I removed four rows, I have to shift up the indices","1bfe933a":"url = 'http:\/\/a.basemaps.cartocdn.com\/rastertiles\/voyager\/{Z}\/{X}\/{Y}.png'\nattribution = \"Tiles by Carto, under CC BY 3.0. Data by OSM, under ODbL\"\nUSA = x_range,y_range = ((-13884029,-7453304), (2698291,6455972))\ndef wgs84_to_web_mercator(df, lon=\"lon\", lat=\"lat\"):\n    \"\"\"Converts decimal longitude\/latitude to Web Mercator format\"\"\"\n    k = 6378137\n    df[\"x\"] = df[lon] * (k * np.pi\/180.0)\n    df[\"y\"] = np.log(np.tan((90 + df[lat]) * np.pi\/360.0)) * k\n    return df\n\nnumber_of_unique_states = len(np.unique(wage['State']).tolist())\nfor i in range(0,number_of_unique_states):\n    new = wgs84_to_web_mercator(pd.DataFrame(dict(lon=state.iloc[1,i], lat=state.iloc[0,i])))\n    state.iloc[0,i] = new['y'].tolist()\n    state.iloc[1,i] = new['x'].tolist()\n    \nstate_xs = [i for i in state.loc[\"lons\",:].tolist()]\nstate_ys = [i for i in state.loc[\"lats\",:].tolist()]\nstatename = wage1968[\"State\"]\n\nnd = dict(x = state_xs, y = state_ys, name = statename)\n\ntotal_years = np.unique(wage['Year'])\nnumber_of_total_years = len(total_years)\nfor i in range(0,number_of_total_years): \n    nd[str(np.unique(wage['Year'])[i])] = wage[wage['Year']==np.unique(wage['Year'])[i]][\"High.2018\"].tolist()\n    \nnd['used'] = nd['1968']\nsource = ColumnDataSource(nd)","6d956df4":"TOOLS = \"pan,wheel_zoom,reset,hover,save\"\ncolor_mapper = LogColorMapper(palette=Greys256,low=0, high=15)\nGreys256.reverse()\np = figure(x_range=x_range, y_range=y_range, x_axis_type=\"mercator\", y_axis_type=\"mercator\", tools = TOOLS, \n        tooltips=[(\"State\",\"@name\"),(\"Salary\",\"@used\")])\np.add_tile(WMTSTileSource(url=url, attribution=attribution))        \nrenderer = p.patches('x', 'y', source=source, fill_color={'field': 'used', 'transform': color_mapper})     \np.hover.point_policy = \"follow_mouse\"\n  \ncallback = CustomJS(args=dict(source=source,plot=p,color_mapper = color_mapper,renderer = renderer), code=\"\"\"\n    var data = source.data;\n    var year = year.value;\n    used = data['used']\n    should_be = data[String(year)]\n    for (i = 0; i < should_be.length; i++) {\n    used[i] = should_be[i];\n    } \n    source.change.emit()\n\"\"\")\n\nyear_slider = Slider(start=1968, end=2017, value=1968, step=1, title=\"year\")\ncallback.args['year'] = year_slider\nyear_slider.js_on_change('value', callback)\nlayout = column(year_slider,p)\n\nticker = FixedTicker(ticks = [0,3,6,9,12,15])\ncolor_bar = ColorBar(color_mapper=color_mapper, label_standoff=12, ticker = ticker, major_label_text_font_size='10pt', border_line_color=None, location=(0,0))\n\np.add_layout(color_bar, 'right')\n\nshow(layout)","0f55222e":"colors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)\n\nlisty = []\nfor item in colors.keys():\n    listy.append(item)\nl = listy[0:number_of_unique_states]\n\nlist_of_years = [np.unique(wage.Year).tolist()]*number_of_unique_states\nsalary_list = []\nfor i in range(number_of_unique_states): \n    salary_list.append(wage[wage.State==np.unique(wage.State)[i]][\"High.2018\"].tolist())\n\nwage_d = dict(Years = list_of_years, Salary = salary_list, State = np.unique(wage.State).tolist(),c = l)\nsource2 = ColumnDataSource(wage_d)\n\np = figure(plot_width=800, plot_height=600, tools = TOOLS, tooltips=[(\"State\",\"@State\")])\np.multi_line(xs = 'Years',ys ='Salary',source=source2, line_width  = 2, line_color = 'c')\n\np.xaxis.axis_label = 'Year'\np.xaxis.axis_label_text_font_size = \"12pt\" \np.xaxis.major_label_text_font_size = \"12pt\"\np.xaxis.axis_label_text_font_style = \"normal\"         \np.yaxis.axis_label = \"Minimal salary adjusted to CPI 2018\"\np.yaxis.major_label_text_font_size = \"12pt\"\np.yaxis.axis_label_text_font_style = \"normal\"  \np.yaxis.axis_label_text_font_size = \"12pt\" \np.title.text = \"Minimal salary adjusted to CPI 2018 in US states\"\np.title.text_font_size = \"12pt\"\np.title.text_font_style = \"bold\"  \n\nshow(p)","f3585f77":"# INTERACTIVE MAP OF US MINIMAL WAGES 1968-2017\n### Introduction\n-  In this kernel I will be using bokeh to present an interactive map of the data. \n-  I will be using 'High.2018' column, because from the economic point of view non-adjusted wages (\"High.Value\" column) are not informative. \n-  I will use addtional data avaliable from **bokeh.sampledata.us_states** to draw the map of the US. \n-  More comments about the data are at the end. \n-  The work is prepared in a way that first you read what I intend to do and then, after the code is run, the results are interpreted. ","3bf5bbce":"## Plotting the map. \nI partially used the scripts from __https:\/\/bokeh.pydata.org\/en\/latest\/docs\/gallery\/texas.html__  and __https:\/\/stackoverflow.com\/questions\/47489804\/changing-colors-on-bokeh-patches-plot-real-time__","ff466690":"## Preparing the map data\n-  Now I will the **wgs84_to_web_mercator** function taken from __https:\/\/www.geodose.com\/2019\/01\/realtime-flight-tracking-pandas-bokeh-python.html__  to convert to mercator coordinates. \n-  From the 'state' dataset I will create the x and y parameters to the US map. \n![](http:\/\/)-  I will create a dictionary (called 'nd') that is required to be used with **ColumnDataSource** in bokeh","7b2628c8":"1. ## I will check how many states are in the data:","cc585581":"## I will not remove the 'Guam','U.S. Virgin Islands','Puerto Rico','Federal (FLSA)' from the dataset in order to match it to the 'state' dataset that comprises 50 US states + DC. I will also make the 1968 to a base year.  ","90ea63fd":"## The dataframe above shows that there are 51 columns. Close look reveals that these are 50 states + DC. The columns, i.e. the names of the states are not organised according to the alphabetical order like the 'wage' dataframe, so first I will arrange this. This is required in order to match between the two dataframes. ","d6b4bc56":"## Discussion: \n-  First it is possible to see that the inflation-adjusted salary did not go up in these years, although it became more uniform among the sates\n-  The steady decrease in the 80s is probably due to fixed federal wage of 3.35 USD, which was eroded by the inflation. \n-  According to the wikipedia article the inflation-adjusted salary should be around 19 USD, because the productivity did go up in those years. But this added value was never transferred back to the workers...","f148ebd5":"###  Apparently, there are 55. In addition to the 50 US states there are:\n-  District of Columbia\n-  Federal (FLSA)\n-  Guam\n-  Puerto Rico\n-  US Virgin Islands\n\n## Now I will import the data to draw the map from **bokeh.sampledata.us_states**"}}