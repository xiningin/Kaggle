{"cell_type":{"3db529a6":"code","d172939a":"code","baebc58f":"code","af8d3711":"code","05c8b7c8":"code","2547e89a":"code","a13d8fe8":"code","c95f95a4":"code","e7a0e2fa":"code","f5b44af8":"code","70707662":"code","3f4e64a0":"code","92e9d0c9":"code","45682fe4":"code","e0140a7b":"code","c4bbba82":"code","f917c156":"code","26f6b6b2":"code","89acb189":"code","bcf7ad92":"code","662d7bdb":"code","f11b5975":"code","40be38cf":"code","e8a0b135":"code","d0c79500":"code","387046b9":"code","947d2c0a":"code","4c892a80":"code","f08a2b8f":"code","4396ffcd":"code","f78c72ed":"code","48475a12":"code","6ae5e92e":"code","7a950af6":"code","ed890d40":"code","92f16903":"code","43b94acd":"code","497ce914":"code","e607ecce":"code","ce47077a":"code","2a8e0c53":"code","51e73ad4":"code","a75339e8":"code","797398f6":"code","2aa6c9cd":"code","0709b2ec":"code","56695d22":"code","5bb02bad":"code","f3be2dbe":"code","71a73185":"code","1210e118":"code","242a0425":"code","87d104f2":"code","525df1bb":"code","1c28b2f2":"code","8f3e20de":"code","1842cd5f":"code","afa00d86":"code","68cab216":"code","f39382e1":"code","1711bec3":"code","1aeebda5":"code","6fa20c74":"code","035c427e":"code","cdcbdb37":"markdown","0129ce73":"markdown"},"source":{"3db529a6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d172939a":"test = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')\ntrain = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')","baebc58f":"train.shape\n","af8d3711":"test.shape","05c8b7c8":"train.head(10)","2547e89a":"train['Total_income'] = train['ApplicantIncome'] + train['CoapplicantIncome']\ntest['Total_income'] = test['ApplicantIncome'] + test['CoapplicantIncome']\ntrain.head()","a13d8fe8":"train.info()","c95f95a4":"train.describe()","e7a0e2fa":"train.isnull().sum()","f5b44af8":"test.isnull().sum()","70707662":"train['LoanAmount'] = train['LoanAmount'].fillna(train['LoanAmount'].mean())\ntest['LoanAmount'] = test['LoanAmount'].fillna(test['LoanAmount'].mean())","3f4e64a0":"train['Loan_Amount_Term'] =train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mean())\ntest['Loan_Amount_Term'] =test['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].mean())","92e9d0c9":"train['Gender'] = train['Gender'].fillna(train['Gender'].mode()[0])\ntest['Gender'] = test['Gender'].fillna(test['Gender'].mode()[0])","45682fe4":"train['Credit_History'] = train['Credit_History'].fillna(train['Credit_History'].mean())\ntest['Credit_History'] = test['Credit_History'].fillna(test['Credit_History'].mean())","e0140a7b":"train['Dependents'] = train['Dependents'].fillna(train['Dependents'].mode()[0])\ntest['Dependents'] = test['Dependents'].fillna(test['Dependents'].mode()[0])","c4bbba82":"train['Self_Employed'] = train['Self_Employed'].fillna(train['Self_Employed'].mode()[0])\ntest['Self_Employed'] = test['Self_Employed'].fillna(test['Self_Employed'].mode()[0])","f917c156":"train['Married'] = train['Married'].fillna(train['Married'].mode()[0])","26f6b6b2":"train.isnull().sum()","89acb189":"test.isnull().sum()","bcf7ad92":"sns.countplot(train['Gender'])","662d7bdb":"sns.countplot(train['Married'])","f11b5975":"sns.countplot(train['Dependents'])","40be38cf":"sns.countplot(train['Education'])","e8a0b135":"sns.countplot(train['Self_Employed'])","d0c79500":"sns.countplot(train['Loan_Status'])","387046b9":"sns.distplot(train['ApplicantIncome'])","947d2c0a":"#applying log transformation to the above attribute as it is left skewed so we have to convert it into bell curve\ntrain['ApplicantIncome'] = np.log(train['ApplicantIncome'])","4c892a80":"sns.distplot(train['ApplicantIncome'])","f08a2b8f":"sns.distplot(train['CoapplicantIncome'])","4396ffcd":"train['CoapplicantIncome'] = np.log(train['CoapplicantIncome'])","f78c72ed":"sns.distplot(train['CoapplicantIncome'])","48475a12":"sns.distplot(train['LoanAmount'])","6ae5e92e":"train['LoanAmount'] = np.log(train['LoanAmount'])\nsns.distplot(train['LoanAmount'])","7a950af6":"sns.distplot(train['Loan_Amount_Term'])","ed890d40":"train['Loan_Amount_Term'] = np.log(train['Loan_Amount_Term'])\nsns.distplot(train['Loan_Amount_Term'])","92f16903":"sns.distplot(train['Total_income'])","43b94acd":"train['Total_income'] = np.log(train['Total_income'])\nsns.distplot(train['Total_income'])","497ce914":"\n# apply log transformation to the attribute\ntest['ApplicantIncomeLog'] = np.log(test['ApplicantIncome']+1)\ntrain['ApplicantIncomeLog'] = np.log(train['ApplicantIncome']+1)\nsns.distplot(train[\"ApplicantIncomeLog\"])","e607ecce":"test['CoapplicantIncomeLog'] = np.log(test['CoapplicantIncome']+1)\ntrain['CoapplicantIncomeLog'] = np.log(train['CoapplicantIncome']+1)\nsns.distplot(train[\"CoapplicantIncomeLog\"])","ce47077a":"test['LoanAmountLog'] = np.log(test['LoanAmount']+1)\ntrain['LoanAmountLog'] = np.log(train['LoanAmount']+1)\nsns.distplot(train[\"LoanAmountLog\"])","2a8e0c53":"test['Loan_Amount_Term_Log'] = np.log(test['Loan_Amount_Term']+1)\ntrain['Loan_Amount_Term_Log'] = np.log(train['Loan_Amount_Term']+1)\nsns.distplot(train[\"Loan_Amount_Term_Log\"])","51e73ad4":"train['Total_Income_Log'] = np.log(train['Total_income']+1)\ntest['Total_Income_Log'] = np.log(test['Total_income']+1)\nsns.distplot(train[\"Total_Income_Log\"])","a75339e8":"corr = train.corr()\nplt.figure(figsize=(12,10))\nsns.heatmap(corr,annot=True,cmap='BuPu')","797398f6":"train.columns","2aa6c9cd":"# drop unnecessary columns\ncols = ['ApplicantIncome', 'CoapplicantIncome', \"LoanAmount\",\"Loan_ID\" ,\"Loan_Amount_Term\", \"Total_income\", 'CoapplicantIncomeLog']\ntrain = train.drop(columns=cols, axis=1)\ntest = test.drop(columns=cols, axis=1)\ntrain.head()","0709b2ec":"from sklearn.preprocessing import LabelEncoder\ncols = ['Gender',\"Married\",\"Education\",'Self_Employed',\"Property_Area\",\"Loan_Status\",\"Dependents\"]\nle = LabelEncoder()\nfor col in cols:\n    train[col] = le.fit_transform(train[col])","56695d22":"cols = ['Gender',\"Married\",\"Education\",'Self_Employed',\"Property_Area\",\"Dependents\"]\nle = LabelEncoder()\nfor col in cols:\n    test[col] = le.fit_transform(test[col])","5bb02bad":"train.head()","f3be2dbe":"# specify input and output attributes\nx = train.drop(columns=['Loan_Status'], axis=1)\ny = train['Loan_Status']\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","71a73185":"# classify function\nfrom sklearn.model_selection import cross_val_score\ndef classify(model, x, y):\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)\n    model.fit(x_train, y_train)\n    print(\"Accuracy is\", model.score(x_test, y_test)*100)\n    # cross validation - it is used for better validation of model\n    # eg: cv-5, train-4, test-1\n    score = cross_val_score(model, x, y, cv=5)\n    print(\"Cross validation is\",np.mean(score)*100)","1210e118":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nclassify(model, x, y)","242a0425":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nclassify(model, x, y)","87d104f2":"from sklearn.metrics import accuracy_score \nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(x_train , y_train)\npred_l = logmodel.predict(x_test)\nacc_l = accuracy_score(y_test , pred_l)*100\nacc_l","525df1bb":"from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier\nmodel = RandomForestClassifier()\nclassify(model, x, y)\n","1c28b2f2":"model = ExtraTreesClassifier()\nclassify(model, x, y)","8f3e20de":"model = RandomForestClassifier(n_estimators=100, min_samples_split=25, max_depth=7, max_features=1)\nclassify(model, x, y)","1842cd5f":"model = RandomForestClassifier()\nmodel.fit(x_train, y_train)","afa00d86":"from sklearn.metrics import confusion_matrix\ny_pred = model.predict(x_test)\ncm = confusion_matrix(y_test, y_pred)\ncm","68cab216":"sns.heatmap(cm, annot=True)","f39382e1":"ans = model.predict(test)","1711bec3":"ans","1aeebda5":"p_log = logmodel.predict(test)","6fa20c74":"predict_combine = np.zeros((test.shape[0]))\n\nfor i in range(0, test.shape[0]):\n    temp = p_log[i] + ans[i]\n    if temp>=2:\n        predict_combine[i] = 1\npredict_combine = predict_combine.astype('int')","035c427e":"test = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')\n#print(test['Loan_ID'])\n#print(pd.DataFrame(predict_combine))\nsubmission = pd.DataFrame({\n        \"Loan_ID\": test['Loan_ID'],\n        \"Loan_Status\": predict_combine\n    })\n\nsubmission.to_csv(\"results.csv\", encoding='utf-8', index=False)","cdcbdb37":"# Label encoding","0129ce73":"# Hyperparameter tuning"}}