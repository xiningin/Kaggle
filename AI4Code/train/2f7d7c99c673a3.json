{"cell_type":{"05f30a48":"code","43ae7437":"code","9437cdd0":"code","b9053f46":"code","e4c6c3c8":"code","80ffd3d9":"code","6e03465f":"code","17237912":"code","5435ca27":"code","6e052fb6":"code","8ed3aeb0":"code","b1be28dc":"code","2616fba2":"code","8330e3b0":"code","6105be25":"code","04de78fd":"code","e425b5cc":"markdown","231f548d":"markdown","82f46d81":"markdown","4bfddbcf":"markdown","5d113bed":"markdown","3f293431":"markdown","b186ef9c":"markdown","b1e86b4f":"markdown","26dfcb5b":"markdown","6d9ac91e":"markdown","db874a53":"markdown","f9aa3b87":"markdown","20c69ca4":"markdown","3f4d74c6":"markdown","8909a2f4":"markdown"},"source":{"05f30a48":"import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pandas_datareader import data","43ae7437":"ibm = data.DataReader('IBM', 'yahoo',start='1\/1\/2000')","9437cdd0":"time_elapsed = (ibm.index[-1] - ibm.index[0]).days","b9053f46":"price_ratio = (ibm['Adj Close'][-1] \/ ibm['Adj Close'][1])\ninverse_number_of_years = 365.0 \/ time_elapsed\ncagr = price_ratio ** inverse_number_of_years - 1\nprint(cagr)","e4c6c3c8":"vol = ibm['Adj Close'].pct_change().std()","80ffd3d9":"number_of_trading_days = 252\nvol = vol * math.sqrt(number_of_trading_days)","6e03465f":"print (\"cagr (mean returns) : \", str(round(cagr,4)))\nprint (\"vol (standard deviation of return : )\", str(round(vol,4)))","17237912":"daily_return_percentages = np.random.normal(cagr\/number_of_trading_days, vol\/math.sqrt(number_of_trading_days),number_of_trading_days)+1","5435ca27":"price_series = [ibm['Adj Close'][-1]]\n\nfor drp in daily_return_percentages:\n    price_series.append(price_series[-1] * drp)","6e052fb6":"plt.plot(price_series)\nplt.show()","8ed3aeb0":"number_of_trials = 1000\nfor i in range(number_of_trials):\n    daily_return_percentages = np.random.normal(cagr\/number_of_trading_days, vol\/math.sqrt(number_of_trading_days),number_of_trading_days)+1\n    price_series = [ibm['Adj Close'][-1]]\n\n    for drp in daily_return_percentages:\n        price_series.append(price_series[-1] * drp)\n    \n    plt.plot(price_series)\nplt.show()","b1be28dc":"ending_price_points = []\nlarger_number_of_trials = 9001 \nfor i in range(larger_number_of_trials):\n    daily_return_percentages = np.random.normal(cagr\/number_of_trading_days, vol\/math.sqrt(number_of_trading_days),number_of_trading_days)+1\n    price_series = [ibm['Adj Close'][-1]]\n\n    for drp in daily_return_percentages:\n        price_series.append(price_series[-1] * drp)\n    \n    plt.plot(price_series)\n    \n    ending_price_points.append(price_series[-1])\n\nplt.show()\n\nplt.hist(ending_price_points,bins=50)\nplt.show()","2616fba2":"expected_ending_price_point = round(np.mean(ending_price_points),2)\nprint(\"Expected Ending Price Point : \", str(expected_ending_price_point))","8330e3b0":"population_mean = (cagr+1) * ibm['Adj Close'][-1]\nprint (\"Sample Mean : \", str(expected_ending_price_point))\nprint (\"Population Mean: \", str(round(population_mean,2)));\nprint (\"Percent Difference : \", str(round((population_mean - expected_ending_price_point)\/population_mean * 100,2)), \"%\")","6105be25":"top_ten = np.percentile(ending_price_points,100-10)\nbottom_ten = np.percentile(ending_price_points,10);\nprint (\"Top 10% : \", str(round(top_ten,2)))\nprint (\"Bottom 10% : \", str(round(bottom_ten,2)))","04de78fd":"plt.hist(ending_price_points,bins=100)\nplt.axvline(top_ten,color='r',linestyle='dashed',linewidth=2)\nplt.axvline(bottom_ten,color='r',linestyle='dashed',linewidth=2)\nplt.axhline(ibm['Adj Close'][-1],color='g', linestyle='dashed',linewidth=2)\nplt.show()","e425b5cc":"### 4. Results Analysis","231f548d":"![monte-carlo_monaco.jpg](attachment:monte-carlo_monaco.jpg)","82f46d81":"### 1. Model Creation","4bfddbcf":"![1.png](attachment:1.png)","5d113bed":"## $$ R_k(0,1) = {r_k \\over m}$$","3f293431":"- \u00b5 - mathematical expectation of a change in the price of paper\n- \u03c3 - security volatility\n- \u2206t - time change\n- \u03b5 - random value for modeling volatility\n- S - share price","b186ef9c":"### 3. Application on a large number of attempts","b1e86b4f":"# Monte Carlo Method for IBM Stock Price Prediction","26dfcb5b":"![pic2.png](attachment:pic2.png)","6d9ac91e":"## $$ r_k = (a * r_{k-1} + c)mod(m) $$\n<center> where a,c,m - certain constants: $$  r_0 <= m, 0 <=a < m, 0 <= c < m, m <= 2 $$ <\/center>","db874a53":"### 2. Random Value Generation","f9aa3b87":"![3.png](attachment:3.png)","20c69ca4":"![2.png](attachment:2.png)","3f4d74c6":"## Theoretical Foundation","8909a2f4":"![4.png](attachment:4.png)"}}