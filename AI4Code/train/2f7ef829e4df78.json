{"cell_type":{"d04cd422":"code","03ee1fe7":"code","1bc74a0f":"code","4a10b957":"code","f0fb5cc5":"code","e20969c5":"code","b3371fbe":"code","c96b93b3":"code","b31c8374":"code","eb3189e9":"code","250cb9fc":"code","5709deb5":"code","6a788c9a":"code","378d57bb":"code","8b837402":"code","62e614b4":"code","78044650":"code","cb8b93ce":"code","fd9fb0a7":"code","9f21b930":"code","65b6cd9e":"code","f7d37d77":"code","fa3d6519":"code","92708c36":"code","c6568d27":"code","0cf57d9e":"code","7673414e":"code","846c67a3":"code","9affb498":"code","7deda609":"code","e60dd020":"code","7abaf104":"code","82f4e634":"code","6f750ea4":"code","d645947e":"code","fea796c3":"code","728daa6b":"code","efdc8e7e":"code","d0470f89":"code","750345d3":"code","ebb0edbb":"code","6cfb19be":"code","e8b5c10a":"code","923fdf1d":"code","329a20af":"code","1b077d11":"code","7186e536":"code","f4a1e53c":"code","a05c33df":"code","812a5b8f":"code","6dd06e46":"code","5883d7df":"code","dc103c80":"code","3c29e283":"code","49be3457":"code","77c0c273":"code","309a7021":"code","d7a2703f":"code","02024ab9":"code","7778c488":"code","95be79fd":"code","959098c2":"code","2151fd35":"code","e98179ac":"code","5d442388":"code","8f22f1ac":"code","0b79e9e2":"markdown","0d4ea0a4":"markdown"},"source":{"d04cd422":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom collections import Counter\nfrom pprint import pprint\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nimport lightgbm as lgb\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\npd.set_option('display.width', 100)\n","03ee1fe7":"train = pd.read_csv('..\/input\/train_V2.csv')\ntest = pd.read_csv('..\/input\/test_V2.csv')\nsample_submission = pd.read_csv('..\/input\/sample_submission_V2.csv')","1bc74a0f":"train.shape","4a10b957":"test.shape","f0fb5cc5":"train.head()","e20969c5":"test.head()","b3371fbe":"#Check for null values\ntrain.isnull().any().values","c96b93b3":"train = train.dropna()","b31c8374":"test.isnull().any().values","eb3189e9":"train.winPlacePerc.plot(kind='hist')","250cb9fc":"train[train.killStreaks > 7].shape","5709deb5":"#82 players were killed more than 7 enimies in a short time","6a788c9a":"#players with more headshotkills\ntrain.headshotKills.value_counts()","378d57bb":"#Lets add some more features\ntrain['total_dist'] = train['swimDistance'] + train['walkDistance'] + train['rideDistance']","8b837402":"test['total_dist'] = test['swimDistance'] + test['walkDistance'] + test['rideDistance']","62e614b4":"train['kills_with_assist'] = train['kills'] + train['assists']","78044650":"test['kills_with_assist'] = test['kills'] + test['assists']","cb8b93ce":"print(\"Average distance travelled by player is \",train['total_dist'].mean())","fd9fb0a7":"train.DBNOs.value_counts().head(10).plot(kind='bar')","9f21b930":"plt.scatter(train['rideDistance'],train['roadKills'])","65b6cd9e":"train['headshot_over_kills'] = train['headshotKills'] \/ train['kills']\ntrain['headshot_over_kills'].fillna(0, inplace=True)","f7d37d77":"test['headshot_over_kills'] = test['headshotKills'] \/ test['kills']\ntest['headshot_over_kills'].fillna(0, inplace=True)","fa3d6519":"train['headshot_over_kills'].value_counts().head(5)","92708c36":"train.head(2)","c6568d27":"train = train.drop(['Id','groupId','matchId'],axis=1)","0cf57d9e":"train.shape","7673414e":"matchtype = train.matchType.unique()\n","846c67a3":"matchtype.__len__()","9affb498":"match_dict = {}\nfor i,each in enumerate(matchtype):\n    match_dict[each] = i","7deda609":"match_dict","e60dd020":"train.matchType = train.matchType.map(match_dict)\n","7abaf104":"matchtype_test = test.matchType.unique()\nmatch_dict_test = {}\nfor i,each in enumerate(matchtype_test):\n    match_dict_test[each] = i\ntest.matchType = test.matchType.map(match_dict_test)","82f4e634":"y = train['winPlacePerc']","6f750ea4":"X = train.drop(['winPlacePerc'],axis=1)","d645947e":"X.shape,y.shape","fea796c3":"y[:2]","728daa6b":"X[:2]","efdc8e7e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","d0470f89":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","750345d3":"#Lets Normalize the train data\nsc_X = StandardScaler()\nX_trainsc = sc_X.fit_transform(X_train)\nX_testsc = sc_X.transform(X_test)\n","ebb0edbb":"lr = LinearRegression()\nlr.fit(X_trainsc, y_train)","6cfb19be":"y_pred = lr.predict(X_testsc)","e8b5c10a":"y_pred[:10]","923fdf1d":"rmse = sqrt(mean_squared_error(y_test, y_pred))\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test,y_pred)","329a20af":"print(\"RMSE = >\",rmse)\nprint(\"MSE = >\",mse)\nprint(\"R Squared = >\",r2)","1b077d11":"res = pd.DataFrame()\nres['Actual'] = y_test\nres['Predicted'] = y_pred\nres['Difference'] = abs(y_test-y_pred)","7186e536":"res.head(10)","f4a1e53c":"#Decision Tree Regressor\ndt = DecisionTreeRegressor()\ndt.fit(X_trainsc,y_train)","a05c33df":"y_pred_dt = dt.predict(X_testsc)","812a5b8f":"rmse = sqrt(mean_squared_error(y_test, y_pred_dt))\nmse = mean_squared_error(y_test, y_pred_dt)\nr2 = r2_score(y_test,y_pred_dt)","6dd06e46":"print(\"RMSE = >\",rmse)\nprint(\"MSE = >\",mse)\nprint(\"R Squared = >\",r2)","5883d7df":"dt = pd.DataFrame()\ndt['Actual'] = y_test\ndt['Predicted'] = y_pred_dt\ndt['Difference'] = abs(y_test-y_pred_dt)","dc103c80":"dt.head(10)","3c29e283":"parameters = {\n                'max_depth': 1,'min_data_in_leaf': 85,'feature_fraction': 0.80,'bagging_fraction':0.8,'boosting_type':'gbdt',\n                'learning_rate': 0.1, 'num_leaves': 30,'subsample': 0.8,'lambda_l2': 4,'objective': 'regression_l2',\n                'application':'regression','num_boost_round':5000,'zero_as_missing': True,\n                'early_stopping_rounds':100,'metric': 'mae','seed': 2\n             }","49be3457":"train_data = lgb.Dataset(X_trainsc, y_train, silent=False)\ntest_data = lgb.Dataset(X_testsc, y_test, silent=False)\nmodel = lgb.train(parameters, train_set = train_data,verbose_eval=500, valid_sets=test_data)","77c0c273":"test = test.drop(['Id','groupId','matchId'],axis=1)","309a7021":"#Lets check the prediction with x_testsc \npred_lgb_samp_sc = model.predict(X_testsc, num_iteration = model.best_iteration)","d7a2703f":"lgb_res= pd.DataFrame()\nlgb_res['Actual'] = y_test\nlgb_res['Predicted_sc'] = pred_lgb_samp_sc\nlgb_res['Difference'] = abs(y_test-pred_lgb_samp_sc)","02024ab9":"lgb_res.head(10)","7778c488":"# We'll normalize the test data aswell for better prediction\n\nsc_test = StandardScaler()\ntest_sc = sc_test.fit_transform(test)","95be79fd":"# prediction\npred_lgb_sc = model.predict(test_sc, num_iteration = model.best_iteration)","959098c2":"pred_lgb_sc[:10]","2151fd35":"# Replace the prediction which is greator than 1 by 1 and less than 0 by 0\n\npred_lgb_sc[pred_lgb_sc > 1] = 1\npred_lgb_sc[pred_lgb_sc < 0] = 0","e98179ac":"pred_lgb_sc.__len__()","5d442388":"sample_submission['winPlacePerc'] = pred_lgb_sc","8f22f1ac":"sample_submission.to_csv('sample_submission.csv',index=False)","0b79e9e2":"### Linear Regression","0d4ea0a4":"### LightGBM"}}