{"cell_type":{"fc04f99d":"code","f5c0a4e2":"code","79c385aa":"code","ea61fd5b":"code","88e84163":"code","3061ad6e":"code","e1325b51":"code","99ebdf5f":"code","7dc254d7":"code","5dda3503":"code","6c55834b":"code","b9773a3d":"code","e6a793b6":"code","b88f2326":"code","e297dd5f":"code","6abbc01a":"code","9d63c72f":"code","7383657d":"markdown","79488c43":"markdown","e979cab5":"markdown","7b02a95f":"markdown"},"source":{"fc04f99d":"from catboost import CatBoostRegressor\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit\nimport random\nimport os","f5c0a4e2":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)","79c385aa":"SEED = 42\n\nseed_everything(SEED)","ea61fd5b":"train_path = \"..\/input\/tabular-playground-series-jan-2022\/train.csv\"\ntrain_df = pd.read_csv(train_path)\ntrain_ids = train_df.pop(\"row_id\")","88e84163":"train_df[\"date\"] = pd.to_datetime(train_df[\"date\"])\ntrain_df[\"day\"] = train_df[\"date\"].dt.day\ntrain_df[\"month\"] = train_df[\"date\"].dt.month\ntrain_df[\"year\"] = train_df[\"date\"].dt.year\ntrain_df = train_df.drop(\"date\", axis=1)\ntrain_df = pd.get_dummies(train_df, prefix=None)","3061ad6e":"targets = train_df.pop(\"num_sold\")","e1325b51":"train_data, validation_data, train_targets, validation_targets = train_test_split(train_df, targets, shuffle=False, test_size=0.5, random_state=SEED)","99ebdf5f":"model_parameters = {\n    \"learning_rate\": 1e-3,\n    \"iterations\": 1000,\n    \"verbose\": 250,\n    \"early_stopping_rounds\": 100,\n    \"random_state\": SEED,\n    \"eval_metric\": \"SMAPE\",\n}\nmodel = CatBoostRegressor(**model_parameters).fit(train_data, \n                                                  train_targets, \n                                                  eval_set=(validation_data, validation_targets))","7dc254d7":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","5dda3503":"test_path = \"..\/input\/tabular-playground-series-jan-2022\/test.csv\"\ntest_df = pd.read_csv(test_path)\ntest_ids = test_df.pop(\"row_id\")","6c55834b":"test_df[\"date\"] = pd.to_datetime(test_df[\"date\"])\ntest_df[\"day\"] = test_df[\"date\"].dt.day\ntest_df[\"month\"] = test_df[\"date\"].dt.month\ntest_df[\"year\"] = test_df[\"date\"].dt.year\ntest_df = test_df.drop(\"date\", axis=1)\ntest_df = pd.get_dummies(test_df, prefix=None)","b9773a3d":"test_predictions = model.predict(test_df)","e6a793b6":"def make_submission(ids, predictions, path=\"submission.csv\"):\n    assert len(ids) == len(predictions), f\"Lengths of `ids` ({len(ids)}) and `predictions` ({len(predictions)}) aren't the same.\"\n    df = pd.DataFrame({\n        \"row_id\": ids,\n        \"num_sold\": predictions,\n    })\n    \n    df.to_csv(path, index=False)\n    \n    return df","b88f2326":"make_submission(test_ids, test_predictions, path=\"submission_05.csv\")","e297dd5f":"n_folds = 10\nstrategy = TimeSeriesSplit(n_splits=n_folds)\nfolds = strategy.split(train_df, targets)\n\nscores = []\nfor i, (train_indexes, validation_indexes) in enumerate(folds):\n    if isinstance(train_df, pd.DataFrame):\n        train_data = train_df.iloc[train_indexes]\n        validation_data = train_df.iloc[validation_indexes]\n    else:\n        train_data = train_df[train_indexes]\n        validation_data = train_df[validation_indexes]\n        \n    train_targets = targets[train_indexes]\n    validation_targets = targets[validation_indexes]\n    \n    model_parameters = {\n        \"learning_rate\": 1e-3,\n        \"iterations\": 1000,\n        \"verbose\": 250,\n        \"early_stopping_rounds\": 100,\n        \"random_state\": SEED,\n        \"eval_metric\": \"SMAPE\",\n    }\n    \n    model = CatBoostRegressor(**model_parameters).fit(train_data, \n                                                      train_targets, \n                                                      eval_set=(validation_data, validation_targets))\n    \n    validation_predictions = model.predict(validation_data)\n    validation_score = SMAPE(validation_targets, validation_predictions)\n    scores.append(validation_score)\n    \n    \n    \n    oof_predictions = model.predict(test_df)\n    if i == 0:\n        test_predictions = oof_predictions\n    else:\n        test_predictions += oof_predictions\n        \ntest_predictions \/= n_folds\n\nscores = np.array(scores)","6abbc01a":"scores.mean()","9d63c72f":"make_submission(test_ids, test_predictions, path=\"submission_10folds.csv\")","7383657d":"<h1>Inferencing<\/h1>","79488c43":"<h1>Modeling & Training<\/h1>","e979cab5":"<h1>Train & Validation Split<\/h1>","7b02a95f":"<h1>Feature Engineering<\/h1>"}}