{"cell_type":{"4b5bea21":"code","55afe3ee":"code","daafb84a":"code","09079cd5":"code","40a72fbf":"code","94aef74c":"code","7e60c3b5":"code","5e836bf0":"code","5dc52f36":"code","52ca49d7":"code","4df7848c":"code","e19a0599":"code","368f298c":"code","7ed5ee67":"code","99ba8684":"code","5f5cf615":"code","0603399a":"code","7d0e3a6b":"code","f00975b8":"code","a9068d6a":"code","8f18d9cf":"code","7f392f32":"code","45c23953":"markdown","dc21c678":"markdown","fff8c44d":"markdown","bfd97b1c":"markdown","0f7acb60":"markdown","9e3b26ee":"markdown","2ed2f2b2":"markdown","91a13255":"markdown","449c13de":"markdown","0fefdd60":"markdown","d24fc656":"markdown","5895e894":"markdown"},"source":{"4b5bea21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","55afe3ee":"df1= pd.read_csv('..\/input\/craigslistVehiclesFull.csv')","daafb84a":"df1.head()","09079cd5":"initshape = df1.shape","40a72fbf":"print(\"The max and min respectively\")\nprint(df1['price'].max())\nprint(df1['price'].min())\n","94aef74c":"print(df1.describe()['price'])\nprint(df1.quantile(q=[0.01,0.05,0.8,0.85,0.90,0.95,0.99])['price'])","7e60c3b5":"df1 = df1.drop(df1[df1.price > 75000].index)\nsecondshape = df1.shape\nprint(\"Listings removed >75000 :\")\nprint(initshape[0] - df1.shape[0])\n","5e836bf0":"df1 = df1.drop(df1[df1.price < 250].index)\nprint(\"Listings removed == 0 :\")\nprint(secondshape[0] - df1.shape[0])\n\n","5dc52f36":"plt.figure(figsize=(9,9))\nsns.heatmap(df1.isnull(),cmap=\"Pastel1\");","52ca49d7":"del df1['condition']\ndel df1['odometer']\ndel df1['cylinders']\ndel df1['vin']\ndel df1['drive']\ndel df1['size']\ndel df1['type']\ndel df1['paint_color']","4df7848c":"plt.figure(figsize=(24,6))\nax = sns.countplot(x='manufacturer',data=df1,order=df1['manufacturer'].value_counts().index[:30])\nlocs, labels = plt.xticks();\nplt.setp(labels, rotation=45);\nax.set_title(\"Listing Count per Manufacturer - top 30\");\n\n\n","e19a0599":"x = df1.price\n\nf, (ax_hist, ax_box) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.75, .25)},figsize=(25,8))\nsns.distplot(x,bins=75,ax=ax_hist)\nsns.boxplot(x,ax= ax_box,fliersize = 0)\nax_hist.set(title=\"Price distribution of car listings\",xlabel = '');\n","368f298c":"print('Unique years in dataset')\nprint(df1.year.unique())\ndf1.drop(df1[df1.year.isnull()].index, inplace = True)\ndf1.drop(df1[df1.year < 1960].index, inplace = True)","7ed5ee67":"plt.figure(figsize=(24,10))\nax3 = sns.distplot(df1.year)\nax3.set(title=\"Distribution of Year in car listings\");","99ba8684":"print(\"Top 10 model years of listings\")\nprint(df1.year.value_counts().iloc[:10])","5f5cf615":"statecount = df1.state_code.value_counts()","0603399a":"datamap = dict(type='choropleth',\n            colorscale = 'Reds',\n            locations = statecount.index,\n            z = statecount,\n            locationmode = 'USA-states',\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 2)),\n            colorbar = {'title':\"Cars listed per State\"}\n            ) ","7d0e3a6b":"layout = dict(title = 'Cars listed per State',\n              geo = dict(scope='usa',\n                         showlakes = True,\n                         lakecolor = 'rgb(85,173,240)')\n             )","f00975b8":"choromap = go.Figure(data = [datamap],layout = layout)\niplot(choromap)","a9068d6a":"medpriceXX = df1.groupby('state_code')['price'].median()","8f18d9cf":"datamap2 = dict(type='choropleth',\n            colorscale = 'Portland',\n            locations = medpriceXX.index,\n            z = medpriceXX,\n            locationmode = 'USA-states',\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 2)),\n            colorbar = {'title':\"Median Car Price per State\"}\n            ) \nlayout2 = dict(title = 'Median Car Price per State',\n              geo = dict(scope='usa',\n                         showlakes = True,\n                         lakecolor = 'rgb(85,173,240)')\n             )","7f392f32":"choromap2 = go.Figure(data = [datamap2],layout = layout2)\niplot(choromap2)","45c23953":"Looking at the above chart we find that the distribution is left-skewed and the boxplot presents itself neater than a list of quantiles.","dc21c678":"It's a good idea to remove any column that has too many null values, so it is done here:","fff8c44d":"A few things I want to begin looking at off the top of my head:\n\nWhat are the most popular manufacturers?\nWhats the distribution of the sale prices?","bfd97b1c":"I want to see how much luxury cars are driving up the average price, so I check the quartiles:\n\nI see the standard deviation is large (in the millions) and that 75% of cars are below ~17 000$.\n\nStill, the max price is too high, so I check for where to omit this by looking at further quantiles.","0f7acb60":"That about completes it for my first EDA on Kaggle. \n\nThis dataset was fun to visualize and while I wanted to attempt price prediction, I think other datasets would be more worthy.","9e3b26ee":"First things first, I check the head to get a general idea of the dataframe","2ed2f2b2":"Out of curiosity, I'd like to see the listing count per state.","91a13255":"We find out that the top 3 states for car listings on craigslist in decreasing order were: California, Florida and Texas.\n\nWhat about the median car price?\n","449c13de":"I begin by looking for any **NaN** values across the dataset. \n\nI spot the following categoricals in the heatmap to disregard:\ncondition, cylinders, VIN, drive, size, paint_color","0fefdd60":"To me it seems like a good cutoff point for my cars would be at least 52000, but perhaps removing cars with a value over 75k would be better.\nNotice we only shave off 5255 listings out of ~547 000.\n\nIt's also a good idea at this point to remove any cars with low prices. I'd wager no car is worth less than 250 dollars given scrap value.","d24fc656":"We find that WA and HI to be the highest in median car price. ","5895e894":"What about the distribution of manufacturing years?\n\nFirst we have to remove a few listings which have no year or a year prior to 1960."}}