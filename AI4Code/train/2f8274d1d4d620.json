{"cell_type":{"70af4684":"code","2efc0313":"code","860c9b1b":"code","55390872":"code","e52d5d57":"code","4ea0eec9":"code","77fd733f":"code","b3b1ffb3":"code","71a3457b":"code","f8f5c4d1":"code","b789d194":"code","9c561f26":"code","f49523c9":"code","a73a31d4":"code","873cbaed":"code","1e9997a8":"code","74a64f87":"code","5a31a758":"code","371411d4":"code","d76136e0":"code","ec6d5d27":"code","e29a27cc":"code","2da5c413":"code","927b4136":"code","48440ef9":"code","17819d01":"markdown","6a3fd99f":"markdown","75435e33":"markdown","6d623ab3":"markdown","0f23ae1b":"markdown","368f4c74":"markdown","9a2a9167":"markdown","f7ceeb8a":"markdown","a2791a3b":"markdown","201388c5":"markdown","c7014e30":"markdown","97046335":"markdown","669c27fb":"markdown","c64e5a20":"markdown","74d99ca1":"markdown"},"source":{"70af4684":"!pip install -U scikit-image","2efc0313":"import skimage\nfrom skimage import io\nfrom skimage import data, img_as_float\n\nimport numpy as np\nimport math\n\nimport matplotlib\nimport matplotlib.pyplot as plt","860c9b1b":"random_image = np.random.random([500, 500])","55390872":"random_image","e52d5d57":"plt.figure(figsize = (10, 10))\nplt.imshow(random_image)\nplt.colorbar();","4ea0eec9":"plt.figure(figsize = (10, 10))\nplt.imshow(random_image, cmap='gray')\nplt.axis('off')\nplt.colorbar();","77fd733f":"from skimage import data","b3b1ffb3":"camera = data.camera()","71a3457b":"camera","f8f5c4d1":"print('Type:', type(camera))\nprint('dtype:', camera.dtype)\nprint('shape:', camera.shape)\nprint('size:', camera.size)\n\nplt.figure(figsize = (10, 10))\nplt.imshow(camera, cmap='gray');","b789d194":"#chessboard = io.imread('datasets\/images\/chessboard.jpg')\nchessboard =io.imread('..\/input\/chessboard-jpeg\/chessboard.jpg')","9c561f26":"print('Type:', type(chessboard))\nprint('dtype:', chessboard.dtype)\nprint('shape:', chessboard.shape)\nprint('size:', chessboard.size)\n\nplt.figure(figsize = (10, 10))\nplt.imshow(chessboard, cmap='gray');","f49523c9":"chessboard[:, 250:510] = [0, 255, 0]\nchessboard[1290:1530, 1020:1310, :] = [255, 255, 255]\n\nplt.figure(figsize = (10, 10))\nplt.imshow(chessboard)\nplt.show()","a73a31d4":"sample_1 = np.linspace(0, 1, 1600).reshape((40, 40))\nsample_2 = np.linspace(0, 255, 1600).reshape((40, 40)).astype(np.uint8)","873cbaed":"print(\"sample_1:\", sample_1.dtype, sample_1.min(), sample_1.max())\nprint(\"sample_2:\", sample_2.dtype, sample_2.min(), sample_2.max())","1e9997a8":"sample_1[:2]","74a64f87":"sample_2[:2]","5a31a758":"fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(11, 11))\nax0.imshow(sample_1, cmap='gray')\nax1.imshow(sample_2, cmap='gray');","371411d4":"from skimage import img_as_float, img_as_ubyte","d76136e0":"image = data.coffee()\nplt.figure(figsize = (10, 10))\nplt.imshow(image);","ec6d5d27":"image_ubyte = img_as_ubyte(image)\nimage_float = img_as_float(image)","e29a27cc":"print(\"type, min, max:\", image_ubyte.dtype, image_ubyte.min(), image_ubyte.max())\nprint(\"type, min, max:\", image_float.dtype, image_float.min(), image_float.max())\nprint()\nprint(\"255\/255 =\", 255\/255.)","2da5c413":"from skimage import color, img_as_float \nimg_as_float = io.imread('..\/input\/chessboard-jpeg\/machu_pichho_peru.jpg')","927b4136":"r = image[:, :, 0]\ng = image[:, :, 1]\nb = image[:, :, 2]","48440ef9":"f, axes = plt.subplots(1, 4, figsize=(16, 5))\n\nfor ax in axes:\n    ax.axis('off')\n\n(ax_r, ax_g, ax_b, ax_color) = axes\n    \nax_r.imshow(r, cmap='gray')\nax_r.set_title('red channel')\n\nax_g.imshow(g, cmap='gray')\nax_g.set_title('green channel')\n\nax_b.imshow(b, cmap='gray')\nax_b.set_title('blue channel')\n\nax_color.imshow(np.stack([r, g, b], axis=2))\nax_color.set_title('all channels');","17819d01":"### Displaying the image and r, g, b channels","6a3fd99f":"Purpose: \n\n1-See how single-channel grayscale images, multichannel color images may be represented as arrays. \n\n2-Examine operations that you typically associate with matrices or arrays can be applied to images.","75435e33":"#### These are just numpy arrays, by standard array slicing we can get a desired verticle line or a square box\n","6d623ab3":"https:\/\/www.pexels.com\/photo\/2388912\/","0f23ae1b":"You can convert images between different representations by using ``img_as_float``, ``img_as_ubyte``, etc.:","368f4c74":"## Data types and image values\n\nIn literature, one finds different conventions for representing image values:\n\n```\n  0 - 255   where  0 is black, 255 is white\n  0 - 1     where  0 is black, 1 is white\n```\n\n``scikit-image`` supports both conventions--the choice is determined by the\ndata-type of the array.","9a2a9167":"### Asigning each color channel to a different variable","f7ceeb8a":"## Images are numpy arrays\nImages are represented in scikit-image using standard numpy arrays. ","a2791a3b":"#End of Code","201388c5":"### Reading the images","c7014e30":"### Loading a gray scale image from ``scikit-image.data module``","97046335":"## Reading images","669c27fb":"#### Building a grayscale image as a 2D array","c64e5a20":"The library is designed in such a way that any data-type is allowed as input,\nas long as the range is correct (0-1 for floating point images, 0-255 for unsigned bytes,\n0-65535 for unsigned 16-bit integers).","74d99ca1":"## Visualizing RGB channels<\/span>\n\nDisplaying the different color channels of the image along (each as a gray-scale image)."}}