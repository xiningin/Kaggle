{"cell_type":{"f5816505":"code","fc9a6af7":"code","7cd7c441":"code","ef0fb23a":"code","a3811d7a":"code","f1678b14":"code","8dc08e08":"code","0f141360":"code","e157381e":"code","591e0860":"code","ba46754a":"code","01edd8bf":"code","e77c6cc2":"code","558c76c3":"code","39af282e":"code","b9fa38c7":"code","879d0afe":"code","aa5ac2fc":"code","388c9c17":"code","547551a0":"code","acd52830":"code","cfc24c0a":"code","bb871f1d":"code","8ed13a1f":"code","722bb67c":"code","4a890fa5":"code","dd0625ec":"code","90a6a447":"code","a39af6ff":"code","fb0662de":"code","c68970e6":"code","221ede15":"code","07e5f81d":"code","26adb3f8":"code","036cc22f":"code","099f248e":"code","207df687":"code","93b27d3e":"code","8379ad81":"code","9056eb2b":"code","8e6cfed3":"code","95d22241":"code","e31e99ca":"code","e3460834":"code","420c67fe":"code","a9b64acf":"code","ceb1218c":"code","8d02d5de":"code","653de6d4":"code","417e3a84":"code","064d80a1":"code","9e787be6":"code","71eb72cb":"code","dbfb0157":"code","9b12b5a7":"code","46ad3004":"code","dee07c49":"code","8d365d1c":"code","f14b7692":"code","2aec6941":"code","a9f0c180":"code","47336b81":"code","da5cdd4a":"code","487ec51c":"code","b931bd84":"code","be7c6c74":"code","94a6961f":"code","bbbd8534":"code","64235ab6":"code","d39f9220":"code","0a0e6ebd":"code","777031e2":"code","323ae593":"code","fa15dacd":"code","4d02945d":"code","f7980f58":"code","2f779aba":"code","bdcc240d":"code","7e9a2ec3":"code","2f27d7ff":"code","5db59bda":"code","3063d824":"code","1d2062cd":"code","7029f41d":"code","de36aa3a":"code","e1c783b4":"code","cf778642":"code","0c0fc416":"code","3f80bd78":"code","147b0432":"code","03b74ac3":"code","bc4f91f6":"code","70f8328f":"code","32ff71dc":"code","40c974a3":"code","fab2e48e":"code","12ca8cf4":"code","5e36c7a1":"code","f002ea0c":"code","7c232cd4":"code","36e7c590":"code","e07d5106":"code","8cb9c973":"code","85efa75a":"code","da9da93e":"code","b77a0505":"code","7422d7b7":"markdown"},"source":{"f5816505":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fc9a6af7":"df_train = pd.read_csv('..\/input\/big-mart-sales-prediction\/Train.csv')\ndf_test = pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv')","7cd7c441":"df_train.head()","ef0fb23a":"df_test.head()","a3811d7a":"df1 = df_train","f1678b14":"df1.describe()","8dc08e08":"#columns with null values\ndf1.isnull().sum()","0f141360":"df1.columns","e157381e":"categorical = []\nfor i in df1.dtypes.index:\n    if (df1.dtypes[i] == 'object'):\n        categorical.append(i)\nprint(categorical)","591e0860":"df1.dtypes['Item_Visibility'] == 'object'","ba46754a":"print(len(df1['Item_Identifier'].unique()))\nprint(len(df1))","01edd8bf":"weight_mean = pd.DataFrame(df1.groupby('Item_Identifier')['Item_Weight'].mean())\nweight_mean","e77c6cc2":"missing = df1['Item_Weight'].isnull()\nmissing","558c76c3":"#for item in df1['Item_Identifier']:\n    #print(item)","39af282e":"#for i,item in enumerate(df1['Item_Identifier']):\n    #print(i,item)","b9fa38c7":"for i,item in enumerate(df1['Item_Identifier']):\n    if (missing[i] == True):\n        if item is weight_mean:\n            df1['Item_Weight'][i] = weight_mean.loc['Item_Identifier']['Item_Weight']\n        else:\n            df1['Item_Weight'][i] = np.mean(df1['Item_Weight'])","879d0afe":"#for i in df1['Item_Identifier']:\n    #print(i)\ndf1['Item_Weight'].isnull().sum()","aa5ac2fc":"df1['Outlet_Type'].unique()","388c9c17":"df1['Outlet_Size'].unique()","547551a0":"size_mode = df1.pivot_table(values = 'Outlet_Size' , columns = 'Outlet_Type' , \n                            aggfunc = (lambda x:x.mode()))\nsize_mode","acd52830":"size_mode['Grocery Store']","cfc24c0a":"miss_size = df1['Outlet_Size'].isnull()\nmiss_size","bb871f1d":"def Outlet_size_replace(x):\n    return size_mode[x]","8ed13a1f":"Outlet_size_replace('Supermarket Type2')[0]","722bb67c":"#df1['Outlet_Type'].apply(Outlet_size_replace)","4a890fa5":"#.apply() : to apply a function in a data column\n#df1.loc[miss_size]['Outlet_Type'].apply(Outlet_size_replace)","dd0625ec":"mvd = df1.loc[miss_size]\nnvd = df1.loc[miss_size != True]","90a6a447":"mvd['Outlet_Size'] = mvd['Outlet_Type'].apply(Outlet_size_replace)","a39af6ff":"df2 = pd.concat((mvd,nvd),ignore_index=True)","fb0662de":"df2.isnull().sum()","c68970e6":"df2.head()","221ede15":"df2[df2['Item_Visibility'] == 0]","07e5f81d":"df2['Item_Visibility'].mean()","26adb3f8":"df2['Item_Visibility'] = df2['Item_Visibility'].replace(0,df2['Item_Visibility'].mean())","036cc22f":"df2[df2['Item_Visibility'] == 0]","099f248e":"df2.head()","207df687":"#value_counts()\ndf2['Item_Fat_Content'].value_counts()","93b27d3e":"df2['Item_Fat_Content'] = df2['Item_Fat_Content'].replace({'LF' : 'Low Fat' , \n                                                           'low fat' : 'Low Fat' , \n                                                           'reg' : 'Regular'})","8379ad81":"df2['Item_Fat_Content'].value_counts()","9056eb2b":"df2.head()","8e6cfed3":"len(df2['Item_Identifier'].unique())","95d22241":"k = 'FDU28'\nk[:2]","e31e99ca":"def identifyItem(x):\n    return (x[:2])\n\nidentifyItem('NCD06')","e3460834":"df2['Item_Identifier'] = df2['Item_Identifier'].apply(identifyItem)","420c67fe":"df2.head()","a9b64acf":"len(df2['Item_Identifier'].unique())","ceb1218c":"df2['Item_Identifier'].unique()","8d02d5de":"df2['Item_Identifier'] = df2['Item_Identifier'].replace({'FD':'Food', \n                                                         'NC':'Non-Consumable', \n                                                         'DR':'Drink'})","653de6d4":"df2.head()","417e3a84":"df2.loc[df2['Item_Identifier'] == 'Non-Consumable' , 'Item_Fat_Content']","064d80a1":"df2.loc[df2['Item_Identifier'] == 'Non-Consumable' , 'Item_Fat_Content'] = 'Non-Edible'","9e787be6":"df2['Item_Fat_Content'].value_counts()","71eb72cb":"df2.head()","dbfb0157":"df2['Years'] = 2020 - df2['Outlet_Establishment_Year']\ndf2.head()","9b12b5a7":"#Data Analysis by plotting","46ad3004":"sns.distplot(df2['Item_Weight'])","dee07c49":"sns.distplot(df2['Item_Visibility'])","8d365d1c":"sns.distplot(df2['Item_MRP'])","f14b7692":"sns.distplot(df2['Item_Outlet_Sales'])","2aec6941":"df2['Item_Outlet_Sales'] = np.log(1+df2['Item_Outlet_Sales'])","a9f0c180":"sns.distplot(df2['Item_Outlet_Sales'])","47336b81":"sns.countplot(df2['Item_Fat_Content'])","da5cdd4a":"df2['Item_Type'].unique()","487ec51c":"myplot = sns.countplot(df2['Item_Type'])\nmyplot.set_xticklabels(labels = df2['Item_Type'].unique() , rotation=90)","b931bd84":"sns.countplot(df2['Outlet_Establishment_Year'])","be7c6c74":"sns.countplot(df2['Outlet_Size'])","94a6961f":"sns.countplot(df2['Outlet_Location_Type'])","bbbd8534":"myplot = sns.countplot(df2['Outlet_Type'])\nmyplot.set_xticklabels(labels = df2['Outlet_Type'].unique() , rotation=90)","64235ab6":"df2.head()","d39f9220":"categorical = []\nfor i in df1.dtypes.index:\n    if (df1.dtypes[i] == 'object'):\n        categorical.append(i)\nprint(categorical)","0a0e6ebd":"len(df2['Item_Fat_Content'].unique())","777031e2":"for i in categorical:\n    print(i , len(df2[i].unique()))","323ae593":"Item_count = df2['Item_Type'].value_counts()\nItem_count_less = Item_count[Item_count <= 251]\nItem_count_less","fa15dacd":"'Breakfast' in Item_count_less","4d02945d":"def createOthers(x):\n    if x in Item_count_less:\n        return 'Others'\n    else:\n        return x","f7980f58":"createOthers('Seafood')","2f779aba":"df2['Item_Type'] = df2['Item_Type'].apply(createOthers)","bdcc240d":"df2['Item_Type'].value_counts()","7e9a2ec3":"for i in categorical:\n    print(i , len(df2[i].unique()))","2f27d7ff":"df2.head()\ndf3 = df2.drop(['Outlet_Identifier','Outlet_Establishment_Year'],axis=1)","5db59bda":"df3.head()","3063d824":"df3.dtypes","1d2062cd":"df3['Item_Identifier'].unique()","7029f41d":"#Food-0,Non-Consumable-1,Drink-2\n#Food -           1 0 0\n#Non-Consumable - 0 1 0\n#Drink -          0 0 1","de36aa3a":"df_item_identifier = pd.get_dummies(df3['Item_Identifier'])\ndf_fat = pd.get_dummies(df3['Item_Fat_Content'])\ndf_outlet_size = pd.get_dummies(df3['Outlet_Size'])\ndf_outlet_location = pd.get_dummies(df3['Outlet_Location_Type'])\ndf_outlet_type = pd.get_dummies(df3['Outlet_Type'])\ndf_item_type = pd.get_dummies(df3['Item_Type'])","e1c783b4":"df4 = pd.concat([df3,df_fat,df_outlet_size,df_outlet_location,\n                 df_outlet_type,df_item_type,df_item_identifier],axis='columns')","cf778642":"df4.head()","0c0fc416":"df5 = df4.drop(['Item_Identifier','Item_Fat_Content','Item_Type','Outlet_Size','Outlet_Location_Type','Outlet_Type'],axis=1)","3f80bd78":"df5.head()","147b0432":"df5.dtypes","03b74ac3":"X = df5.drop('Item_Outlet_Sales' , axis=1)\nY = df5['Item_Outlet_Sales']","bc4f91f6":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8)","70f8328f":"from sklearn.linear_model import LinearRegression\nlmodel = LinearRegression(normalize=True)","32ff71dc":"lmodel.fit(xtrain,ytrain)","40c974a3":"ypred_train = lmodel.predict(xtrain)\nypred_test = lmodel.predict(xtest)","fab2e48e":"from sklearn.metrics import mean_absolute_error,mean_squared_error\nprint(\"Training Mean Absolute Error\",mean_absolute_error(ytrain,ypred_train))\nprint(\"Testing Mean Absolute Error\",mean_absolute_error(ytest,ypred_test))\n      ","12ca8cf4":"Y.min()\nY.max()","5e36c7a1":"coef = pd.Series(lmodel.coef_,xtrain.columns).sort_values()\ncoef.plot(kind='bar' , title=\"Model Coefficients\")","f002ea0c":"print(xtrain.columns)","7c232cd4":"xtrain.shape[1]","36e7c590":"df3.columns","e07d5106":"np.where(xtrain.columns == 'Non-Edible')[0][0]","8cb9c973":"def predict_sales(Item_Weight,Item_Visibility,Item_MRP,Years,Item_Fat_Content,Item_Type,\n                 Outlet_Size,Outlet_Location_Type,Outlet_Type,Item_Identifier):\n\n    uv = np.zeros(xtrain.shape[1])\n    uv[0] = Item_Weight\n    uv[1] = Item_Visibility\n    uv[2] = Item_MRP\n    uv[3] = Years\n\n    uv[np.where(xtrain.columns == Item_Fat_Content)[0][0]] = 1\n    uv[np.where(xtrain.columns == Item_Type)[0][0]] = 1\n    uv[np.where(xtrain.columns == Outlet_Size)[0][0]] = 1\n    uv[np.where(xtrain.columns == Outlet_Location_Type)[0][0]] = 1\n    uv[np.where(xtrain.columns == Outlet_Type)[0][0]] = 1\n    uv[np.where(xtrain.columns == Item_Identifier)[0][0]] = 1\n\n    return lmodel.predict([uv])","85efa75a":"print(predict_sales(9.30,0.03,250.20,20,\n                    'Low Fat','Dairy','Medium','Tier 1','Supermarket Type2','Food'))","da9da93e":"#pickle\nimport pickle\nwith open('sales_value.pickle','wb') as f:\n    pickle.dump(lmodel,f)","b77a0505":"import json\ncolumns = {'data_columns' : [col.lower() for col in xtrain.columns]}\n\nwith open('columns.json','w') as k:\n    k.write(json.dumps(columns))","7422d7b7":"#One-hot encoding"}}