{"cell_type":{"29fbd991":"code","677da146":"code","ebb7236e":"code","43456888":"code","afc74f65":"code","d1400758":"code","2050b8b3":"code","17f55b6e":"code","fb3a155b":"code","0d57bb71":"code","6e7c9c64":"code","c8970584":"code","31413ae0":"code","bca77f69":"code","782307a4":"code","edf62663":"code","c16cb5c2":"code","9e984606":"code","d6d05926":"code","e780e530":"code","800e2ddf":"code","1251244d":"code","162458a7":"code","fcd76746":"code","5df9231d":"code","bb63dbd5":"code","91b9fe3c":"code","f3b78312":"code","b5cba70e":"code","47ae758c":"code","bb264809":"code","02cb0672":"code","291cc44a":"code","b8182ca4":"code","c08bbabd":"code","cc01cc6e":"code","013d6d8f":"code","9c9d103c":"code","15969270":"code","817f2633":"code","6ce385e3":"code","c4ea399b":"code","e765ac40":"code","ad40f1a0":"code","aecfb072":"code","19b7bbdf":"code","9e73f121":"code","7fbc3e3a":"code","cedea1bc":"code","5e8e629a":"code","9fa906fd":"code","0883c158":"code","2687d8c8":"code","456b2798":"code","a8751fde":"code","302e6442":"code","eeb12330":"code","17e548e2":"markdown","51fc8c43":"markdown","f72430b6":"markdown","c9457167":"markdown","05e53b62":"markdown","5ddd3ceb":"markdown","7f499f18":"markdown","186831c2":"markdown","df958f82":"markdown","131dde82":"markdown","9cc0e964":"markdown","864048ca":"markdown","344ade5d":"markdown","9eef8d47":"markdown","64e45664":"markdown","48467607":"markdown","7539b677":"markdown","5c51429a":"markdown","1f764314":"markdown","503e7250":"markdown","bef286b4":"markdown","0af2fbb4":"markdown","f28dfcbc":"markdown","8afe88b5":"markdown","29376b62":"markdown","6217172e":"markdown","22fb1a47":"markdown","76353344":"markdown","bd0b7347":"markdown","c2e2235e":"markdown","00250423":"markdown","c76659a4":"markdown","b20e8eed":"markdown","6b87c2e6":"markdown","48c54a60":"markdown","2ce6c0dd":"markdown","d54dbb76":"markdown","cbc0d2a3":"markdown","d9097526":"markdown","035ab8c6":"markdown","ce20bef3":"markdown","4e1151d2":"markdown","b1021fcf":"markdown","96c5a551":"markdown","5fe030a5":"markdown"},"source":{"29fbd991":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport time  # monitoring time\nimport os # accessing directory structure \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt # plotting using matplotlib\nimport seaborn as sns # plotting using seaborn\n%matplotlib inline\nsns.set_style('darkgrid')\n\nfrom sklearn.preprocessing import StandardScaler # scaling the data\nfrom sklearn.model_selection import train_test_split # train test split\nfrom sklearn.preprocessing import OrdinalEncoder # ordinal encoding of categorical columns\nfrom sklearn.linear_model import LinearRegression # LLinear Regression\nfrom sklearn.tree import DecisionTreeRegressor # Decision Treee Regression\nfrom sklearn.svm import SVR # Support Vector Regression\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","677da146":"# Convert dytpes of object columns to float\ndef convert_col_dtype(col):    \n    col = col.apply(lambda x: x.strip('$'))\n    col = col.apply(lambda x: x.replace(',', \"\"))\n    col = col.apply(pd.to_numeric, errors='coerce')\n    print(col.dtype)\n    return col","ebb7236e":"#Identifying Outliers in Numeric columns using IQR (Inter Quartile Range) and Q1 (25% Quantile), Q3(75% Quantile).\ndef identify_outliers(col):    \n    q1 = df[col].quantile(0.25)\n    q3 = df[col].quantile(0.75)\n    iqr = q3 - q1\n    lower_limit = q1 - 1.5*iqr\n    upper_limit = q3 + 1.5*iqr\n    return(col, q1, q3, iqr, lower_limit, upper_limit)","43456888":"def fit_lr(X_train, y_train, X_test, y_test):\n    model = LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=None)\n    model.fit(X_train, y_train)\n    print('Model score on Train data:', model.score(X_train, y_train))\n    print('Model score on Test data:', model.score(X_test, y_test))\n    return model","afc74f65":"def fit_dtr(X_train, y_train, X_test, y_test):\n    model = DecisionTreeRegressor(criterion='mse', splitter='best', max_depth=5, min_samples_split=2, min_samples_leaf=1, \n                                  random_state=7, max_features=None, max_leaf_nodes=None)\n    model.fit(X_train, y_train)\n    print('Model score on Train data:', model.score(X_train, y_train))\n    print('Model score on Test data:', model.score(X_test, y_test))\n    return model","d1400758":"def fit_svr(X_train, y_train, X_test, y_test):\n    model = SVR(C=1.0, kernel='rbf', epsilon=0.1)\n    model.fit(X_train, y_train)\n    print('Model score on Train data:', model.score(X_train, y_train))\n    print('Model score on Test data:', model.score(X_test, y_test))\n    return model","2050b8b3":"def predict_values(model, X_test):\n    y_pred = model.predict(X_test)\n    print(\"Predicted values:\")\n    print(y_pred[0:5])\n    return y_pred","17f55b6e":"def performance_metrics(y_test, y_pred):\n    # r2_score\n    print(\"R2: \",r2_score(y_test, y_pred))\n    # mse\n    print(\"MSE: \",mean_squared_error(y_test, y_pred))\n    # rmse\n    print(\"RMSE: \",np.sqrt(mean_squared_error(y_test, y_pred)))\n    # mean_absolute error\n    print(\"MAE: \",mean_absolute_error(y_test, y_pred))","fb3a155b":"# Medicare_Provider_Charge_Inpatient_DRGALL_FY2016.csv has 197283 rows\ndf = pd.read_csv('\/kaggle\/input\/medicare-provider-inpatient\/Medicare_Provider_Charge_Inpatient_DRGALL_FY2016.csv', low_memory=False)","0d57bb71":"# rows and columns in dataframe\nprint(df.shape)","6e7c9c64":"# Check top 5 rows of dataframe\ndf.head()","c8970584":"# Check last 5 rows of dataframe\ndf.tail()","31413ae0":"#Check if there are any null values\ndf.isna().sum()","bca77f69":"# Check duplicate rows\ndf.duplicated().sum()","782307a4":"# Replace spaces in columns to _\nprint(df.columns)\ndf.columns = df.columns.str.replace(' ','_')\nprint(df.columns)","edf62663":"# Check datatypes of columns\ndf.dtypes","c16cb5c2":"# Column list after converting spaces to _\ndf.columns","9e984606":"# Convert dytpes of object columns to float\ndf['Total_Discharges'] = convert_col_dtype(df['Total_Discharges'])\ndf['Average_Covered_Charges'] = convert_col_dtype(df['Average_Covered_Charges'])\ndf['Average_Total_Payments'] = convert_col_dtype(df['Average_Total_Payments'])\ndf['Average_Medicare_Payments'] = convert_col_dtype(df['Average_Medicare_Payments'])","d6d05926":"# Check datatypes of columns\ndf.dtypes","e780e530":"# Numeric columns\nnum_columns = ['Provider_Id', 'Provider_Zip_Code','Total_Discharges', 'Average_Covered_Charges', 'Average_Total_Payments','Average_Medicare_Payments']","800e2ddf":"# Categorical columns\ncat_columns = ['DRG_Definition', 'Provider_Name', 'Provider_Street_Address', 'Provider_City', 'Provider_State','Hospital_Referral_Region_(HRR)_Description']","1251244d":"df.describe().T","162458a7":"# Plot 5 point summary\ndf.describe().drop('count',axis=0).plot(figsize=(10,5))\nplt.show()","fcd76746":"#Checking for Outliers and identifying them by calling identify_outliers() function.\n#observations below Q1- 1.5*IQR, or those above Q3 + 1.5*IQR  are defined as outliers.\n\nfor col in num_columns :\n    col, q1, q3, iqr, lower_limit, upper_limit = identify_outliers(col)\n    print(\"\\nColumn name : {}\\n Q1 = {} \\n Q3 = {}\\n IQR = {}\".format(col, q1, q3, iqr))\n    print(\" Lower limit = {}\\n Upper limit = {}\\n\".format(lower_limit, upper_limit))\n    outlier_count = len(df.loc[(df[col] < lower_limit) | (df[col] > upper_limit)])\n    if outlier_count != 0 :\n        print(outlier_count, \"OUTLIERS ARE PRESENT in {} column.\".format(col))\n        print(\"Outlier datapoints in {} column are:\".format(col))\n        print(np.array(df.loc[(df[col] < lower_limit) | (df[col] > upper_limit)][col]))\n    else:\n        print(\"OUTLIERS ARE NOT PRESENT in {} column\\n\".format(col))","5df9231d":"#Visualizing Outliers in dataset using boxplot\n\nfig, ax = plt.subplots(2,3,figsize=(20, 10))\nfor col,subplot in zip(num_columns,ax.flatten()) :\n    sns.boxplot(x=df[[col]], width=0.5, color='orange', ax=subplot)\n    subplot.set_title('Boxplot for {}'.format(col))\n    subplot.set_xlabel(col)    \nplt.show()","bb63dbd5":"plt.xticks(rotation = 30, fontsize=10)\nplt.yticks(fontsize=10)\nplt.plot(df[num_columns].var(), color='green', marker='s',linewidth=2, markersize=5)\nplt.yscale('log')\nplt.show()","91b9fe3c":"# Distribution of columns using dist plots\nfig, ax = plt.subplots(2,3,figsize=(20, 10))\nfor col,subplot in zip(num_columns,ax.flatten()) :\n    ax =sns.distplot(df[col], ax=subplot, hist_kws={'color':'red','alpha':1}, kde_kws={'color':'black', 'lw':2})","f3b78312":"# Exponential Distribution of columns using dist plots\nfig, ax = plt.subplots(2,3,figsize=(20, 10))\nfor col,subplot in zip(num_columns,ax.flatten()) :\n    ax =sns.distplot(np.log(df[col]), ax=subplot, hist_kws={'color':'g','alpha':1}, kde_kws={'color':'black', 'lw':2})","b5cba70e":"for col in cat_columns :\n    print(col,':', len(df[col].unique()))","47ae758c":"plt.figure(figsize=(35, 10))\nsns.countplot(df['Provider_State'])\nplt.show()\nplt.figure(figsize=(35, 10))\nsns.countplot(df['Provider_State'], order = df['Provider_State'].value_counts().index, palette=sns.color_palette(\"plasma\"))\nplt.show()","bb264809":"sns.pairplot(vars=np.log(df[num_columns]).columns,data=df, diag_kind='kde')\nplt.show()","02cb0672":"corr = df[num_columns].corr()\ncorr.style.background_gradient(cmap='YlGnBu')","291cc44a":"sns.heatmap(corr, annot=True)\nplt.show()","b8182ca4":"# fit transform columns in df\nfor col in cat_columns:\n    col_enc = col+'_enc'\n    print(col, col_enc, len(df[col].unique()))\n    d={}\n    for i in range(0, len(df[col].unique())):\n        #print(col)\n        #print(col, df[col].value_counts().index[i], df[col].value_counts()[i], i+1)\n        d[df[col].value_counts().index[i]] = i+1\n    print(\"col dict:\", col,d)\n    df.replace({col:d}, inplace=True)\nprint(df.columns)","c08bbabd":"X = df.drop('Average_Medicare_Payments', axis=1)\ny = df['Average_Medicare_Payments']","cc01cc6e":"print('Shape of Feture-set : ', X.shape)\nprint('Shape of Target-set : ', y.shape)","013d6d8f":"(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.30, random_state=7)","9c9d103c":"print(\"Training Set Shape:\\nFeatures : {0}  Target : {1}\\n\".format(X_train.shape, y_train.shape))\nprint(\"Test Set Shape:\\nFeatures : {0}  Target : {1}\".format(X_test.shape, y_test.shape))","15969270":"scaler = StandardScaler()\nscaler.fit(X_train)","817f2633":"X_train_scl = scaler.transform(X_train)\nX_test_scl = scaler.transform(X_test)","6ce385e3":"# fit and score model\nlr_model_medicare = fit_lr(X_train_scl, y_train, X_test_scl, y_test)","c4ea399b":"# predict values\ny_pred_lr_med =  predict_values(lr_model_medicare, X_test_scl)","e765ac40":"# Evaluate model performance\nperformance_metrics(y_test, y_pred_lr_med)","ad40f1a0":"# Regression Plot for Avg Medicare Payments with LR model\nsns.regplot(y_test, y_pred_lr_med)\nplt.show()","aecfb072":"# fit and score model\ndtr_model_medicare = fit_dtr(X_train_scl, y_train, X_test_scl, y_test)","19b7bbdf":"# predict values\ny_pred_dtr_med =  predict_values(dtr_model_medicare, X_test_scl)","9e73f121":"# Evaluate model performance\nperformance_metrics(y_test, y_pred_dtr_med)","7fbc3e3a":"# Regression Plot for Avg Medicare Payments with LR model\nsns.regplot(y_test, y_pred_dtr_med)\nplt.show()","cedea1bc":"# fit and score model\nsvr_model_medicare = fit_svr(X_train_scl, y_train, X_test_scl, y_test)","5e8e629a":"# predict values\ny_pred_svr_med =  predict_values(svr_model_medicare, X_test_scl)","9fa906fd":"# Evaluate model performance\nperformance_metrics(y_test, y_pred_svr_med)","0883c158":"# Regression Plot for Avg Medicare Payments with LR model\nsns.regplot(y_test, y_pred_svr_med)\nplt.show()","2687d8c8":"X = df.drop('Average_Total_Payments', axis=1)\ny = df['Average_Total_Payments']\n\nprint('Shape of Feture-set : ', X.shape)\nprint('Shape of Target-set : ', y.shape)","456b2798":"(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.30, random_state=7)\n\nprint(\"Training Set Shape:\\nFeatures : {0}  Target : {1}\\n\".format(X_train.shape, y_train.shape))\nprint(\"Test Set Shape:\\nFeatures : {0}  Target : {1}\".format(X_test.shape, y_test.shape))","a8751fde":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train_scl = scaler.transform(X_train)\nX_test_scl = scaler.transform(X_test)","302e6442":"# fit and score model\nlr_model_total = fit_lr(X_train_scl, y_train, X_test_scl, y_test)\n\n# predict values\ny_pred_lr_tot =  predict_values(lr_model_total, X_test_scl)\n\n# Evaluate model performance\nperformance_metrics(y_test, y_pred_lr_tot)\n\n# Regression Plot for Avg Medicare Payments with LR model\nsns.regplot(y_test, y_pred_lr_tot)\nplt.show()","eeb12330":"# fit and score model\ndtr_model_total = fit_dtr(X_train_scl, y_train, X_test_scl, y_test)\n\n# predict values\ny_pred_dtr_tot =  predict_values(dtr_model_total, X_test_scl)\n\n# Evaluate model performance\nperformance_metrics(y_test, y_pred_dtr_tot)\n\n# Regression Plot for Avg Medicare Payments with LR model\nsns.regplot(y_test, y_pred_dtr_tot)\nplt.show()","17e548e2":"### Manual Integer encoding of Categorical variables","51fc8c43":"### Build Support Vector Regressor for Medicare Payments, fit, predit and evaluate the model","f72430b6":"## User Defined Functions","c9457167":"### Split dataset int train and test","05e53b62":"### Create Features and Target","5ddd3ceb":"### Visualizing Correlation between numerical columns through Heat map","7f499f18":"## Exploratory Data Analysis","186831c2":"#### Observations on variance of numerical columns\n- Variance in all the numerical columns vary exponentially\n- Total_Discharges column has very less","df958f82":"#### Observations:\n- Mean is higher than median for all the columns, so none of the columns are symmetric and are right skewed\n- Average_Covered_Charges is extremely right skewed and as lot of outliers","131dde82":"### Convert datatype of columns","9cc0e964":"### Build Decision Tree Regressor for Total Payments, fit, predit and evaluate the model","864048ca":"### Identify Outliers","344ade5d":"### Univariate Analysis\n### Visualizing Distribution of numerical columns through distplots","9eef8d47":"### Visualizing value counts of categorical columns through countplot","64e45664":"### Visualizing Outliers in dataset using boxplot","48467607":"### Performance Metrics","7539b677":"- There are no duplicate rows in the dataset","5c51429a":"## Data Pre-processing","1f764314":"### Linear Regression model","503e7250":"#### Observations:\n- Florida, California, Texas, Illinois and New York have the highest counts (because they have a large population)\n- Vermont, Arkansas, Hawaii and Wyoming have the least counts","bef286b4":"### Scale data using Standard Scalar","0af2fbb4":"## Regression Analysis on Total Payments","f28dfcbc":"#### Observations:\n- The data is normally distributed for columns with outliers after converting to logarthmic values and taking an Exponential Distribution\n- We need to use Z-score scaling, standard or MinMax scaling to regress the data","8afe88b5":"#### Obsevations:\n- There is a good positive correlation between Average_Total_Payments and Average_Medicare_Payments columns\n- There is slight correlation for Average_Covered_Charges with Average_Total_Payments and Average_Medicare_Payments columns\n- Atleast seven good clusters  can be formed from the dataset\n","29376b62":"- There are no null values in the dataset","6217172e":"## Regression Analysis on Medicare Payments","22fb1a47":"### Prediction","76353344":"### Scale data using Standard Scalar","bd0b7347":"## Read data into dataframe","c2e2235e":"## Observations:\n- LinearRegression model is giving r2 (Coefficient of Determination) of 97%, DecisionTree Regressor is giving an r2 of 96.5%, but Support Vector Regressor is not givenig any good r2\n- Proportion of variation explained through SVR is only 15%.So, this model can be discarded\n- The Regression plots for the three models shows that Best fit line given by Linear Regression shows very less residual errors and good homoscedasticity in the dataset, but the Best fit line given by DecisionTree model shows large residual errors.\n- So, DecisionTree Regressor can also be discarded.\n- **The best solution is given by Linear Regression model**","00250423":"#### Observations on Correlation between numerical columns:\n- Average_Total_Payments and Average_Medicare_Payments columns are the fetaures which show a strong correlation of 0.98\n- Average_Covered_Charges has a stronge correlation of 0.83 with Average_Total_Payments and 0.82 with Average_Medicare_Payments\n- All other columns have a weak correlation","c76659a4":"### Build Decision Tree Regressor for Medicare Payments, fit, predit and evaluate the model","b20e8eed":"### DecisionTree Regression model","6b87c2e6":"## Observations:\n- LinearRegression model is giving r2 (Coefficient of Determination) of 97%, DecisionTree Regressor is giving an r2 of 96%\n- SVR model was not used, because it was not giving good performance with Medicare payments\n- The Regression plots for the three models shows that Best fit line given by Linear Regression shows very less residual errors and good homoscedasticity in the dataset, but the Best fit line given by DecisionTree model shows large residual errors.\n- So, DecisionTree Regressor can be discarded.\n- **The best solution is given by Linear Regression model**","48c54a60":"### Correlation between numerical columns","2ce6c0dd":"### Suppor Vector Regression model","d54dbb76":"### Split dataset int train and test","cbc0d2a3":"### Outliers analysis of numerical columns","d9097526":"### 5 point summary of numerical attributes","035ab8c6":"#### Observations on univariate analysis of numerical columns:\n- Distplots for all the columns show that the columns Total_Discharges, Average_Covered_Charges, Average_Total_Payments, Average_Medicare_Payments   extremely right skewed with long tails to the right side of the distribution.For all these columns, the mean is greater than the median\n- Provider_Id and Provider_Zip_Code have multiple clusters in the distribution\n- We need to check if the distribution changes exponentially","ce20bef3":"### Create Features and Target","4e1151d2":"### Build Linear Regressor for Medicare Payments, fit, predit and evaluate the model","b1021fcf":"### Build Linear Regressor for Total Payments, fit, predit and evaluate the model","96c5a551":"### Bivariate Analysis\n### Pairplot of numerical columns","5fe030a5":"#### Observations:\n- There are huge number of outliers in Total Payments, Average_Covered_Charges, Average_Total_Payments, Average_Medicare_Payments columns\n- All these outliers are more than the maximum value and so, Q3 is also greater than maximum value\n- The datset is highly right skewed with all outliers having very high values"}}