{"cell_type":{"f3b80054":"code","a3dd0d34":"code","ea2c42f9":"code","651e7447":"code","f05a5a81":"code","43036146":"code","969018d2":"code","a2ae70b8":"code","4cedd36f":"code","eab6c17d":"code","4e317f0c":"code","ab560c1c":"code","e5ef8533":"code","114184b1":"code","37cc8638":"code","580ce720":"code","b9fd1259":"code","dfeeb18d":"code","3198a054":"code","073251a8":"code","cd2e7ed3":"code","4b3163db":"code","09ed67b5":"code","a58b1e7f":"code","adb022e1":"code","473e214c":"code","7a980c77":"code","b99724c1":"code","ff7e7662":"code","41593609":"code","d8565343":"markdown","ce9efcc4":"markdown","0ce2a1d0":"markdown","e6e52024":"markdown","b8f74fb1":"markdown","7fbd6918":"markdown","fb151f11":"markdown","3a2de4b1":"markdown","411f395f":"markdown","93fce998":"markdown","1591a20c":"markdown","f8b51887":"markdown","76a9e996":"markdown","8c99d7d7":"markdown","2abd27f3":"markdown","84c83347":"markdown","411b7740":"markdown","029ab088":"markdown","79aa45fa":"markdown","ef7d13d8":"markdown","43a272ef":"markdown","396f2268":"markdown","1d5bec5b":"markdown"},"source":{"f3b80054":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential,layers\nfrom tensorflow.keras.metrics import RootMeanSquaredError\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport warnings\nwarnings.filterwarnings('ignore')","a3dd0d34":"df = pd.read_csv('..\/input\/monthly-gold-prices\/1979-2021.csv',parse_dates=['Date'])\ndf","ea2c42f9":"df.describe()","651e7447":"df.isnull().sum()","f05a5a81":"df_india = df[['Date','India(INR)']].set_index('Date')\ndf_india","43036146":"fig = px.line(df_india,title='Monthly Average Gold Price, India',labels={'Date':'Months','value':'Average Gold Price'})\nfig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\nfig.show() ","969018d2":"from statsmodels.tsa.stattools import acf\n# Auto-Correlation Plot useful to analyze and visualize Correlation of data with its lags.\nacf_df = pd.DataFrame({'ACF':acf(df_india,nlags=df.shape[0])})\nacf_df['Upper Level'] = 1.96 \/ 1.96 \/ (df.shape[0] ** 0.5 )\nacf_df['Lower Level'] = - 1.96 \/ 1.96 \/ (df.shape[0] ** 0.5 )\nfig = px.line(acf_df,title='Autocorrelation Plot',labels={'index':'Lags','value':'Correlation'})\nfig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\nfig.show()","a2ae70b8":"# This function will generate an Interactive Scatter Plot to show lags with Previous data\ndef lag_plot(lags=1): \n    x = df_india['India(INR)']\n    y = df['India(INR)'].shift(lags)\n    title = 'Lag Plot of lag ' + str(lags)\n    fig = px.scatter(x=x,y=y,trendline='ols',trendline_color_override='red', title = title, \n                      labels={'x':'Gold Prices','y':'lag of {} on Gold Prices'.format(lags)})\n    fig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\n    fig.show() ","4cedd36f":"lag_plot(1)","eab6c17d":"from statsmodels.tsa.seasonal import seasonal_decompose\ndecom_df = seasonal_decompose(df_india,period=12)\nfig = px.line(decom_df.trend,title='Trend')\nfig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\nfig.show()\nfig = px.line(decom_df.seasonal,title='Seasonality')\nfig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\nfig.show()\nfig = px.line(decom_df.resid,title='Residuals')\nfig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})\nfig.show()","4e317f0c":"px.bar(df_india.groupby(df_india.index.month).mean(),color=df_india.groupby(df_india.index.month).mean()['India(INR)'])","ab560c1c":"from statsmodels.tsa.stattools import adfuller, kpss\ndef test_stationarity(data):\n    res = adfuller(data.dropna())\n    print('\\nADF Test P Value :',round(res[1],5))\n    if res[1] > 0.05 :\n        print('This data is not Stationary as per ADF Test')\n    else :\n        print('This data is Stationary as per ADF Test')\n    res = kpss(data.dropna())\n    print('\\nKPSS Test P Value :',round(res[1],5))\n    if res[1] < 0.05 :\n        print('This data is not Stationary as per KPSS Test')\n    else :\n        print('This data is Stationary as per KPSS Test')","e5ef8533":"test_stationarity(df_india)","114184b1":"test_stationarity(df_india.diff())","37cc8638":"test_stationarity(df_india.diff().diff())","580ce720":"px.line(df_india.diff().diff())","b9fd1259":"def prepare_data(data,time_span=12):\n    x,y = [],[]\n    for i in range(data.shape[0]-time_span):\n        x.append(list(data[i:i+time_span]))\n        y.append(data[i+time_span])\n    return np.array(x),np.array(y)","dfeeb18d":"x,y = prepare_data(np.array(df_india['India(INR)'].dropna()))\nsplit_index = int(x.shape[0] * 0.8)\nxtrain , xtest, ytrain, ytest = x[:split_index], x[split_index:], y[:split_index], y[split_index:]\nxtrain.shape, xtest.shape, ytrain.shape, ytest.shape ","3198a054":"ann = Sequential(\n                    [\n                        layers.Dense(512,activation='relu',input_shape=(12,)),\n                        layers.Dense(1028,activation='relu'),\n                        layers.Dense(1,activation='relu')\n                    ]\n                )\n\nann.summary()\nann.compile(loss='mean_squared_error',optimizer='adam',metrics=[RootMeanSquaredError()])\ntraining = ann.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=100)","073251a8":"px.line(training.history)","cd2e7ed3":"ypred = ann.predict(xtest).reshape(ytest.shape[0],)\npx.line({'True':ytest,'Pred':ypred})","4b3163db":"rmse = mean_squared_error(ytest,ypred) ** 0.5\nr2 = r2_score(ytest,ypred)\nprint('RMSE :',rmse)\nprint('R2 Score :',r2)","09ed67b5":"rnn = Sequential(\n                    [\n                        layers.LSTM(10,activation='relu',return_sequences=True,input_shape=(12,1)),\n                        layers.LSTM(20,activation='relu',return_sequences=True),\n                        layers.Flatten(),\n                        layers.Dense(32,activation='relu'),\n                        layers.Dense(16,activation='relu'),\n                        layers.Dense(1)\n                    ]\n                )\n\nrnn.summary()\nrnn.compile(loss='mean_squared_error',optimizer='adam',metrics=[RootMeanSquaredError()])\ntraining = rnn.fit(xtrain.reshape(xtrain.shape[0],12,1),ytrain,validation_data=(xtest.reshape(xtest.shape[0],12,1),ytest),epochs=100)","a58b1e7f":"px.line(training.history)","adb022e1":"ypred = rnn.predict(xtest.reshape(xtest.shape[0],12,1)).reshape(ytest.shape[0],)\npx.line({'True':ytest,'Pred':ypred})","473e214c":"rmse = mean_squared_error(ytest,ypred) ** 0.5\nr2 = r2_score(ytest,ypred)\nprint('RMSE :',round(rmse,5))\nprint('R2 Score :',round(r2,5))","7a980c77":"def forecast(x,n_months=12,algo='ann'):\n    \n    x = list(x)\n    forecasted = []\n    \n    if algo == 'ann' :\n        for i in range(n_months):\n            forcast = ann.predict(np.array([x[-12:]]))[0][0]\n            forecasted.append(forcast)\n            x.append(forcast)\n    \n    elif algo == 'rnn' :\n        for i in range(n_months):\n            forcast = rnn.predict(np.array([x[-12:]]).reshape(1,12,1))[0][0]\n            forecasted.append(forcast)\n            x.append(forcast)\n            \n    return np.array(forecasted)","b99724c1":"ann_forcast = forecast(xtest[-1],100, 'ann')\nann_forcast","ff7e7662":"rnn_forcast = forecast(xtest[0],100, 'rnn')\nrnn_forcast","41593609":"px.line({'ANN Forecast':ann_forcast,'RNN Forecast':rnn_forcast})","d8565343":"### Forecasted Results of ANN Model","ce9efcc4":"### Load Dataset","0ce2a1d0":"### Checking Null Values in the Dataset","e6e52024":"### ANN Model Performance Analysis","b8f74fb1":"### Visualize the Forecasted Results","7fbd6918":"### RNN Model Performance Analysis","fb151f11":"### Forcast Generating Function","3a2de4b1":"### Prepare Data for Training","411f395f":"### Statistical Description","93fce998":"# <center> **Thank You**","1591a20c":"### Monthly Seasonal Bar Plot","f8b51887":"### Recurrent Neural Network Model","76a9e996":"### Stationarity Check","8c99d7d7":"### Visualize the Autocorrelation ","2abd27f3":" ![image.png](attachment:49aa9b28-0286-4bad-bfc7-bd9d52d816d4.png)","84c83347":"### Visualize the Data","411b7740":"## <center>**Monthly Average Gold Price Prediction of India**","029ab088":"### Forecasted Results of RNN Model","79aa45fa":"### Artificial Neural Network Model","ef7d13d8":"### Fuction to Visualize Lag Plot","43a272ef":"### Create a Separate Dataframe for Indian Gold Price","396f2268":"### Import All Libraries\n","1d5bec5b":"### Visualize Lag Plot"}}