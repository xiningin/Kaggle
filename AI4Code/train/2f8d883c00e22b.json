{"cell_type":{"b4e8efc1":"code","fabfd8ba":"code","e5598145":"code","7475f1ad":"code","8a34b51c":"code","af355440":"code","aa95a715":"code","6483b7b3":"code","d0e6cb73":"code","a36307b9":"code","ee0c7908":"code","880c5314":"code","3e466b34":"code","ee2891eb":"code","6e23b8d3":"code","4d93b186":"code","eb6e61f8":"markdown","c6cf2613":"markdown","917237ca":"markdown","1f5ac4be":"markdown","071b6740":"markdown","f42cea12":"markdown","290eb405":"markdown","6851a173":"markdown","4b2d96bd":"markdown"},"source":{"b4e8efc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fabfd8ba":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom scipy import stats\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","e5598145":"country_wise_df = pd.read_csv(\"..\/input\/corona-virus-report\/country_wise_latest.csv\")\nworldometer_data_df = pd.read_csv(\"..\/input\/corona-virus-report\/worldometer_data.csv\")\nday_wise_df = pd.read_csv(\"..\/input\/corona-virus-report\/day_wise.csv\")\nfull_grouped_df = pd.read_csv(\"..\/input\/corona-virus-report\/full_grouped.csv\")\nusa_county_wise_df = pd.read_csv(\"..\/input\/corona-virus-report\/usa_county_wise.csv\")\ncovid_19_df = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")","7475f1ad":"country_wise_df.info()\ncountry_wise_df.head(5)\n#day_wise_df.describe()","8a34b51c":"country_wise_df.describe()","af355440":"def Visualize_first_10(df, catagory):\n    # dislay confirmed in first 10 countries \n    df = df.sort_values(catagory, ascending = False)\n    fig = px.bar(df.head(10), y = catagory, x = \"Country\/Region\",\n            text = catagory, color = \"Country\/Region\")\n    #total values bar with 2 precision values\n    fig.update_traces(texttemplate = \"%{text:.2s}\", textposition = \"outside\")\n    # set fontsize and uniformText\n    fig.update_layout(uniformtext_minsize = 8)\n    fig.update_layout(legend_title_text=f'{catagory} (Covid-19)')\n    fig.update_layout(title_text=f'Top 10 {catagory} cases in the world')\n    return fig\n","aa95a715":"Visualize_first_10(country_wise_df, 'Confirmed')","6483b7b3":"Visualize_first_10(country_wise_df, 'Deaths')","d0e6cb73":"Visualize_first_10(country_wise_df, 'Recovered')","a36307b9":"worldometer_data_df.info()\nworldometer_data_df.head(5)\n","ee0c7908":"\nprint('---------------------------------------------------------------')\nday_wise_df.info()\nday_wise_df.head(5)\n","880c5314":"with plt.style.context('bmh'):\n    plt.figure(figsize=(9, 10))\n    plt.plot(day_wise_df.Confirmed, '-r', label = 'Confirmed')\n    plt.plot(day_wise_df.Deaths, 'b', label = 'Deaths')\n    plt.plot(day_wise_df.Recovered, 'y', label = 'Recovered')\n    plt.plot(day_wise_df['New cases'], 'c', label = 'New cases')\n    plt.plot(day_wise_df['New deaths'], 'k', label = 'New deaths')\n    plt.title('Visualized')\n    plt.xlabel('Day', fontsize=14)\n    plt.ylabel('Cases', fontsize=14)\n    plt.legend()","3e466b34":"print(f'D\u1eef li\u1ec7u t\u1eeb ng\u00e0y {day_wise_df.iloc[0].Date} \u0111\u1ebfn ng\u00e0y {day_wise_df.iloc[-1].Date}') # Xem ngay bat dau den ngay cuoi cua du lieu","ee2891eb":"usa_county_wise_df.info()\nusa_county_wise_df.head(5)\n\n# Kh\u00f4ng c\u00f3 nhi\u1ec1u \u00fd ngh\u0129a th\u1ed1ng k\u00ea !!","6e23b8d3":"covid_19_df.info()\ncovid_19_df.sort_values('Confirmed', ascending = False).head(5)","4d93b186":"print(covid_19_df['Province\/State'].dropna(), sep = ' ')","eb6e61f8":"### Data frame n\u00e0y c\u00f3 c\u1ea3 d\u00e2n s\u1ed1 , ca nhi\u1ec5m , v\u00e0 m\u1ed9t s\u1ed1 feature kh\u00e1c, c\u1ea7n nghi\u00ean c\u1ee9u ! ","c6cf2613":"## Worldometer data","917237ca":"# COVID 19 ","1f5ac4be":"## 3 features n\u00e0y kh\u00f4ng c\u1ea7n ph\u1ea3i gi\u1eef \n> NewCases          4 non-null      float64\n\n> NewDeaths         3 non-null\n\n> NewRecovered      3 non-null\n\n### Data kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u --> n\u00ean \u0111\u01b0\u1ee3c l\u1ecdc dropnull","071b6740":"## C\u00e1c feature c\u00f3 th\u1ec3 nghi\u00ean c\u1ee9u\n* New cases\t\n* New deaths\t\n* New recovered\t\n* Deaths \/ 100 Cases\t\n* Recovered \/ 100 Cases\t\n* Deaths \/ 100 Recovered\t\n* No. of countries","f42cea12":"## D\u1eef li\u1ec7u chi ti\u1ebft v\u00e0 t\u1ed5ng th\u1ec3 c\u1ee7a t\u00ecnh h\u00ecnh d\u1ecbch COVID-19","290eb405":"## USA County Wise \n\n> T\u00ecnh h\u00ecnh d\u1ecbch b\u1ec7nh c\u1ee7a n\u01b0\u1edbc M\u1ef9","6851a173":"## Country Wise ","4b2d96bd":"# Day wise \n\n> T\u00ecnh h\u00ecnh d\u1ecbch b\u1ec7nh theo ng\u00e0y"}}