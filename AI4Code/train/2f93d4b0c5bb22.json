{"cell_type":{"33c0c728":"code","52b26a7f":"code","baa37af5":"code","8ca28ff7":"code","d85be81a":"code","340ca711":"code","cba2e027":"code","246671e0":"code","c9ad4b95":"code","011a3e8e":"code","92bcc764":"code","fc1e3166":"code","0c3bf39c":"markdown","663db698":"markdown","51070091":"markdown","872d6c89":"markdown","6d1d6f6b":"markdown","b35ebcf4":"markdown","aa6264c5":"markdown","20b9a9ff":"markdown","889f589b":"markdown","b875103d":"markdown","1cc49123":"markdown","2b446226":"markdown","79afabe2":"markdown","4a46a10c":"markdown","ecdf8667":"markdown","45ad7bf5":"markdown","d8a05d9c":"markdown"},"source":{"33c0c728":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nimport cv2\n\nimport keras\nfrom keras import models, layers\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split\n\n# This function is show max value briefly\ndef highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]","52b26a7f":"images = glob.glob('..\/input\/the-car-connection-picture-dataset\/*.jpg')\n\ndata = pd.DataFrame(images, columns=['src'])\n\ndata['brand'] = data['src'].apply(lambda x : x.split('_')[0].split('\/')[-1])\n\ndata['brand'].value_counts().head(3)","baa37af5":"data = data[(data['brand']=='Chevrolet') |(data['brand']=='Toyota')|(data['brand']=='Ford')].reset_index(drop=True)\nX= []\ny= []\nfor i in range(len(data)):\n    src = data.loc[i,'src']\n    src = cv2.imread(src, cv2.IMREAD_COLOR)\n    dst = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\n    X.append(cv2.resize(dst, dsize=(200, 300), interpolation=cv2.INTER_AREA))\n    y.append(data.loc[i,'brand'])\n    \nfig, axes = plt.subplots(1,10,figsize=(25,10))\nfor i in range(0,10):\n    axes[i].imshow(X[i])","8ca28ff7":"y[:10]","d85be81a":"X = np.array(X)\nX = X.astype('float32')\nX = X \/255.0\nX = X.reshape(-1,300,200,1)\ny= np.array(pd.get_dummies(pd.DataFrame(y),columns=[0]))\n\nX.shape, y.shape","340ca711":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.3,random_state=100)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","cba2e027":"input_shape = X_train.shape[1:]\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = X_train.shape[1:]))\nmodel.add(layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(layers.Dropout(0.25))\n\n\nmodel.add(layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(layers.Dropout(0.25))\n\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation = \"relu\"))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(3, activation = \"softmax\"))\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer='rmsprop', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size = 256, epochs = 12, shuffle=True, validation_data=(X_test,y_test),verbose = 0)\n","246671e0":"model.evaluate(X_test, y_test)","c9ad4b95":"fig,axes = plt.subplots(1,2, figsize=(15,8))\nfig.suptitle(\"The model 's evaluation \",fontsize=20)\naxes[0].plot(history.history['loss'])\naxes[0].plot(history.history['val_loss'])\naxes[0].set_title('Model Loss')\naxes[0].set_ylabel('Loss')\naxes[0].set_xlabel('Epoch')\naxes[0].legend(['Train','Test'])\n\n\naxes[1].plot(history.history['accuracy'])\naxes[1].plot(history.history['val_accuracy'])\naxes[1].set_title('Model Accuracy')\naxes[1].set_ylabel('Accuracy')\naxes[1].set_xlabel('Epoch')\naxes[1].legend(['Train','Test'])\nplt.show()","011a3e8e":"fig, axes = plt.subplots(1,10,figsize=(25,10))\nfor i in range(0,10):\n    axes[i].imshow(X_test[i])","92bcc764":"pred = model.predict(X_test[:10])\npred = pd.DataFrame(pred).T.style.apply(highlight_max)\npred","fc1e3166":"Real = pd.DataFrame(y_test[:10]).T\n\nReal['brand'] =[\"Chevrolet\",'Toyota','Ford']\n\nReal.set_index('brand').style.apply(highlight_max)","0c3bf39c":"## Real data","663db698":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> Thank you<\/p>\n\n### If you have more good idea, Plz give me some comments ! ","51070091":"### And split the Data, X_train, X_test, y_train, y_test by using sklearn's train_test_split func","872d6c89":"### To make model, I refer [Yassine Ghouzam's Notebook](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6). \n### It very helpful for me. Thank you Yassine Ghouzam","6d1d6f6b":"## Test data's img","b35ebcf4":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> Make CNN model<\/p>","aa6264c5":"### I will try to predict the car brand using CNN model in keras.\n### [Last work](https:\/\/www.kaggle.com\/jeongbinpark\/predict-the-car-brand-using-cnn), I fail to predict the car brand. \n### The last CNN model had 0.33 accuracy that to predict the 3 brand. \n### It's like only predict one brand.\n### I think it occured that had little data. So, I will try predict the car brand with more data\n---","20b9a9ff":"## Changed the data to make model\n1. Change the list to numpy array\n2. Change the type int to float\n3. Change the range 0 ~ 255 to 0 ~ 1\n4. Change the shape (300,200) -> (300,200,1) to make model\n5. Change the y data to categorical data","889f589b":"### I use gray color img. Because in last work, I realize that the color is not useful to predict car brand.\n### And If use color img, It take so many times","b875103d":"![](https:\/\/cdn.luxe.digital\/media\/2020\/12\/15110747\/fastest-cars-world-2021-luxe-digital%402x.jpg)\n\nimg url : https:\/\/luxe.digital\/lifestyle\/cars\/fastest-cars\/\n\nThis car, so awesome...","1cc49123":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> Import Libraries and Load dataset<\/p>","2b446226":"## Predict data","79afabe2":"### This dataset have so many data, I tried to use all data, but It had some trouble that excess memory. \n### So, I will use only 3 brand Chevrolet, Toyota, Ford. They had most data","4a46a10c":"### This model showed about 0.76 accuracy in test data","ecdf8667":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> Evaluate the model<\/p>","45ad7bf5":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"> Feature engineering<\/p>","d8a05d9c":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Predict Car brand ! \ud83d\ude97<\/p>"}}