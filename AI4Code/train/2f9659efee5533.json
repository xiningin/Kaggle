{"cell_type":{"d38bcbcd":"code","37216c93":"code","e81bf5f5":"code","fa6425a6":"code","57de47a8":"code","7ddd7054":"code","8e9a0f9d":"code","e1337fdc":"code","19f1a6ba":"code","526fda7a":"code","9d888677":"code","529cebc8":"code","b2730627":"code","8720bb45":"code","8c3c3bdb":"code","a8a04f2d":"code","cbdb924c":"code","cc98ede6":"code","25914bb6":"code","17634eb9":"code","f541ad79":"code","9af71fa0":"code","4ef1b26b":"code","246196bf":"code","9fb7ca3e":"code","8490e93b":"code","97747487":"code","7cb4e383":"code","da2172e5":"code","002bbfb5":"code","2ee3a45b":"code","e3ec7515":"code","bfa64d9c":"code","fc00f778":"code","8a0dfcb6":"code","1c77d089":"code","f1a2cc60":"code","1840ca7c":"code","87f63db1":"code","4729198a":"code","0d9deec5":"code","ac43ecf6":"code","4e333767":"code","072b673c":"code","91df3ffa":"code","d6aa1c42":"code","c38f3358":"code","e181573c":"code","5c9abcb8":"code","5b3fa849":"code","6dd12c79":"code","b3a096f6":"code","e68ae3e4":"code","9d52cc3e":"code","42d43cec":"code","6652bfbe":"code","825f25dd":"code","2e5ae221":"code","82264b4f":"code","d1bc72d1":"code","e4d6acdd":"code","d2a1bf08":"code","57ca35c4":"code","bd935bd2":"code","ddc30ecc":"code","b6cf5a09":"code","78a82309":"code","520f8852":"code","ed3caaeb":"code","808519ac":"code","5fa263b8":"code","235a964a":"code","bd171015":"code","48ad8e16":"code","b211a7d9":"code","c5775ed7":"code","69e4ce48":"code","7c1ab2ad":"code","c394e630":"code","80139edb":"code","bf3731bd":"code","06fba0d7":"code","7a3e8228":"code","2292f216":"code","7b18df1f":"code","ae173b28":"code","98703338":"code","5c4cc749":"code","27410824":"code","34ca724e":"code","4c8858c2":"code","ff680934":"code","46a83465":"code","a2433a2e":"code","c45d893a":"code","11a2512e":"code","c474e9f7":"markdown","1efdb3d1":"markdown","c1a72a38":"markdown","1cdfc7b6":"markdown","311b85be":"markdown","ec643a14":"markdown","e49d7d57":"markdown","5a4f645d":"markdown","7c6ec47c":"markdown","90fd6880":"markdown","e9f820ae":"markdown","a080ce61":"markdown","3c22781e":"markdown","8bcec0dd":"markdown","9c232dec":"markdown","808e77c3":"markdown","835b4661":"markdown","661b5cb5":"markdown","566fd83f":"markdown","2fcde228":"markdown","9c0883c5":"markdown","b237c46f":"markdown","a8ce5e3c":"markdown","a1abddd6":"markdown","fc6e934d":"markdown","d6ef9874":"markdown","a1cd762b":"markdown","4697b86f":"markdown","85aa1f33":"markdown","4d70bee1":"markdown","943fd6d3":"markdown","5fbbd532":"markdown","adbaaab2":"markdown","d3d46e90":"markdown","e4418e3f":"markdown","287eec6b":"markdown","407eb93a":"markdown","4b3cf2b5":"markdown","4b6db770":"markdown","7e994db1":"markdown","d13cf992":"markdown","7b07294b":"markdown","2615ed79":"markdown","bbbe3d24":"markdown","c7ec402d":"markdown","0f431bed":"markdown","e8c3932e":"markdown","2f899744":"markdown","b5463c77":"markdown","484ef3c7":"markdown","e9d98861":"markdown","3809b2b7":"markdown","21e14165":"markdown","6505c10f":"markdown","64a7c2dd":"markdown","ad552529":"markdown","7e540909":"markdown","2b8ada49":"markdown","b037aa6c":"markdown","b803ea94":"markdown","3fa2cae7":"markdown","98c73b7d":"markdown","d71eb4f7":"markdown","201cb67c":"markdown","b1d3c41b":"markdown","3471fdf6":"markdown","1eebe90b":"markdown","da273d28":"markdown","b74fe744":"markdown","58ea0745":"markdown","5dba4a03":"markdown","b498cf48":"markdown","94aa8dfc":"markdown","543ad745":"markdown","a97728d5":"markdown","8de88c89":"markdown","c8c9b6d2":"markdown","35fb0dcd":"markdown","2ca33eb5":"markdown"},"source":{"d38bcbcd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport seaborn as sns\nsns.set()","37216c93":"cabdata= pd.read_csv('..\/input\/us-cab-datasets\/Cab_Data.csv')\ncity =pd.read_csv('..\/input\/cabs-fare-data\/City.csv')\ncustomerid=pd.read_csv('..\/input\/cabs-fare-data\/Customer_ID.csv')\ntransid=pd.read_csv('..\/input\/cabs-fare-data\/Transaction_ID.csv')","e81bf5f5":"print('Filas =',cabdata.shape[0], '  y   Columnas = ', cabdata.shape[1])\ncabdata.head()","fa6425a6":"from datetime import datetime, timedelta","57de47a8":"def to_date_format(n):\n    date_str =(datetime(1899,12,30) + timedelta(n-1)).strftime(\"%d-%m-%Y\")\n    date_date =  datetime.strptime(date_str, \"%d-%m-%Y\")\n    return date_date","7ddd7054":"cabdata['Date of Travel']=cabdata['Date of Travel'].apply(lambda x:to_date_format(x))","8e9a0f9d":"cabdata=cabdata.sort_values(by=['Date of Travel'])\ncabdata=cabdata.reset_index(drop= True )\n\nprint('Filas =',cabdata.shape[0], '  y   Columnas = ', cabdata.shape[1])\ncabdata.head(10)","e1337fdc":"round(cabdata.describe(include='all'),2)","19f1a6ba":"cabdata.dtypes","526fda7a":"print(city.shape)\ncity.head(20)\n","9d888677":"city.dtypes","529cebc8":"city['Population'] = [x.replace(',','') for x in city['Population']]\ncity['Users'] = [x.replace(',','') for x in city['Users']]\ncity['Population'] = city['Population'].astype(float)\ncity['Users'] = city['Users'].astype(float)\ncity.dtypes","b2730627":"print(customerid.shape)\ncustomerid.head()","8720bb45":"customerid.dtypes","8c3c3bdb":"print(transid.shape)\ntransid.head()","a8a04f2d":"transid.dtypes","cbdb924c":"cabdata.head(1)","cc98ede6":"city.head(1)","25914bb6":"transid.head(1)","17634eb9":"customerid.head(1)","f541ad79":"masterdata = cabdata.merge(transid, on= 'Transaction ID').merge(customerid, on ='Customer ID').merge(city, on = 'City')","9af71fa0":"print(masterdata.shape)\nmasterdata.head()","4ef1b26b":"round(masterdata.describe(include='all'),2)","246196bf":"plt.figure(figsize=(17,9))\nax=sns.histplot(data=masterdata, x=\"KM Travelled\",bins=40, color= 'g')\nplt.title('Km Travelled Distribution', fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Km Travelled')","9fb7ca3e":"plt.figure(figsize=(17,9))\nsns.histplot(data=masterdata, x=\"Price Charged\",bins=40 , color= 'y')\nplt.title('Price Charged Distribution', fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Price Charged')","8490e93b":"plt.figure(figsize=(17,9))\nsns.histplot(data= masterdata,x=\"Cost of Trip\",bins=40 , color= 'red')\nplt.title('Cost of Trip Distribution', fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Cost of Trip')","97747487":"plt.figure(figsize=(17,9))\nsns.histplot(data=masterdata, x='Age', bins=47)\nplt.title('Age Distribution', fontsize=25)\nplt.ylabel('Frequency')\nplt.xlabel('Age')\n","7cb4e383":"plt.figure(figsize=(17,9))\nsns.lineplot(data=masterdata, x=\"KM Travelled\",y='Cost of Trip', color= 'red')\nplt.title('Cost of Trip \/ KM Travelled', fontsize=20)\nplt.xlabel('Travelled')\nplt.ylabel('Cost of Trip')\nplt.show()","da2172e5":"plt.figure(figsize=(17,9))\nsns.countplot(data=masterdata, x=\"Payment_Mode\", palette='rocket')\nplt.title(\"Payment's Countplot\", fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Payment Mode')","002bbfb5":"plt.figure(figsize=(17,9))\nsns.countplot(data=masterdata, x=\"Gender\", palette='rocket')\nplt.title(\"Gender's Countplot\", fontsize=20)\nplt.ylabel('Frequency')\nplt.xlabel('Gender')","2ee3a45b":"masterdata.corr()","e3ec7515":"masterdata.dtypes","bfa64d9c":"masterdata['Income (USD\/Month)'] = masterdata['Income (USD\/Month)'].astype(float)\nmasterdata['Population'] = masterdata['Population'].astype(int)\nmasterdata['Users'] = masterdata['Users'].astype(int)\nmasterdata.dtypes","fc00f778":"masterdata.apply(lambda x: sum(x.isnull()),axis=0)","8a0dfcb6":"duplicated_rows = masterdata[masterdata.duplicated()]\nprint('The number of duplicated rows', duplicated_rows.shape[0])","1c77d089":"plt.figure(figsize=(17,9))\n\nplt.subplot(1,2,1)\nsns.boxplot(data = masterdata, y = 'Company', x = \"Price Charged\", dodge=False)\n\nplt.subplot(1,2,2)\nsns.boxplot(data = masterdata, y = 'Gender', x = \"Income (USD\/Month)\", dodge=False)\n\nplt.tight_layout()\nplt.show()","f1a2cc60":"masterdata['Year of Travel'] = masterdata['Date of Travel'].dt.year\nmasterdata['Month of Travel'] = masterdata['Date of Travel'].dt.month\nmasterdata['Day of Travel'] = masterdata['Date of Travel'].dt.day\nmasterdata['Profit'] = masterdata['Price Charged'] -masterdata['Cost of Trip']\n","1840ca7c":"masterdata_st=masterdata.set_index('Date of Travel')","87f63db1":"masterdata_st.sort_values('Date of Travel').head()","4729198a":"yellowcabst= masterdata_st[masterdata_st.Company.isin(['Yellow Cab'])]\nprint(yellowcabst.shape)\nyellowcabst.head()\nyellowcab= masterdata[masterdata.Company.isin(['Yellow Cab'])]\nprint(yellowcab.shape)\nyellowcab.head()","0d9deec5":"pinkcabst= masterdata_st[masterdata_st.Company.isin(['Pink Cab'])]\nprint(pinkcabst.shape)\npinkcabst.head()\npinkcab= masterdata[masterdata.Company.isin(['Pink Cab'])]\nprint(pinkcab.shape)\npinkcab.head()","ac43ecf6":"q=masterdata.groupby(['Company', 'Year of Travel']).Profit.sum().to_frame('Profit')\nq.head()","4e333767":"w=masterdata.groupby(['Company', 'Year of Travel'])['Price Charged'].sum().to_frame('Price')","072b673c":"w.head()","91df3ffa":"w['%Profit'] =(q['Profit']*100) \/w['Price']","d6aa1c42":"w.head(6)","c38f3358":"y=yellowcabst.Profit.resample('Y').sum()\nypy= pd.DataFrame(y)\np=pinkcabst.Profit.resample('Y').sum()\nppy= pd.DataFrame(p)\nprint(ypy)\nprint(ppy)\ny=yellowcabst.Profit.resample('m').sum()\nypm= pd.DataFrame(y)\np=pinkcabst.Profit.resample('m').sum()\nppm= pd.DataFrame(p)\n","e181573c":"ypy['ProfitORides']= ypy['Profit']\/yellowcab['Date of Travel'].value_counts().resample('Y').sum()\nppy['ProfitORides']= ppy['Profit']\/pinkcab['Date of Travel'].value_counts().resample('Y').sum()\nypm['ProfitORides']= ypm['Profit']\/yellowcab['Date of Travel'].value_counts().resample('m').sum()\nppm['ProfitORides']= ppm['Profit']\/pinkcab['Date of Travel'].value_counts().resample('m').sum()\nypy['ProfitOKM']= ypy['Profit']\/yellowcabst['KM Travelled'].resample('Y').sum()\nppy['ProfitOKM']= ppy['Profit']\/pinkcabst['KM Travelled'].resample('Y').sum()\nypm['ProfitOKM']= ypm['Profit']\/yellowcabst['KM Travelled'].resample('m').sum()\nppm['ProfitOKM']= ppm['Profit']\/pinkcabst['KM Travelled'].resample('m').sum()","5c9abcb8":"def add_value_labels(ax, spacing=5):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes\n            of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"${:.0f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va, fontsize=12)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax)","5b3fa849":"plt.figure(figsize=(33,9))\n\nfig= yellowcabst.Profit.resample('Y').sum().plot.line(color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3, marker='o')\nfig=pinkcabst.Profit.resample('Y').sum().plot.line(color = 'coral',label='Pink Cab Company',linewidth=3, marker='o')\nplt.ylabel('Profit [Millions]', fontsize=16)\nplt.title('Annual Profits',fontsize=20)\nplt.xlabel('Year')\n\nplt.legend(loc='best', shadow=True)\n","6dd12c79":"round(masterdata.groupby(['Company']).Profit.sum().to_frame('Total Profit'),0)","b3a096f6":"plt.figure(figsize=(33,9))\n\nfig= yellowcabst.Profit.resample('m').sum().plot.line(color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3, marker ='o')\nfig=pinkcabst.Profit.resample('m').sum().plot.line(color = 'coral',label='Pink Cab Company',linewidth=3, marker='o')\nplt.ylabel('Profit [Millions]')\nplt.title('Monthly Profits',fontsize=20)\nplt.xlabel('Month')\nplt.legend(loc='best', shadow=True)\n","e68ae3e4":"dpm=masterdata.groupby(['Company','Month of Travel'])['Profit'].sum().to_frame('Profit')\ndpm=dpm.reset_index(level='Month of Travel', col_level=1)\ndpm=dpm.reset_index(level='Company', col_level=1)","9d52cc3e":"y=yellowcabst.Profit.resample('m').sum().to_frame('Profit')\np=pinkcabst.Profit.resample('m').sum().to_frame('Profit')","42d43cec":"print('YellowCab Company mean monthly profit = ', round(y.Profit.mean(),1),\"  and it's std deviation is = \",round(y.Profit.std(),2), 'so, the percentage of the deviation is', round((y.Profit.std() \/y.Profit.mean())*100,2),'%')\nprint('PinkCab Company mean monthly profit = ', round(p.Profit.mean(),1),\"  and it's std deviation is = \",round(p.Profit.std(),2), 'so, the percentage of the deviation is', round((p.Profit.std() \/p.Profit.mean())*100,2),'%')","6652bfbe":"plt.figure(figsize=(33,9))\n\nplt.subplot(1,2,2)\nx1= ypy.ProfitORides.resample('Y').sum()\nx2= ppy.ProfitORides.resample('Y').sum()\nplt.bar(x= x1.index.strftime('%Y'), height='ProfitORides', data = ypy,color = 'mediumvioletred',edgecolor = 'black',label='Yellow Cab Company')\nplt.bar(x= x2.index.strftime('%Y'), height='ProfitORides', data = ppy, color = 'coral',edgecolor = 'black',label='Pink Cab Company')\nplt.xticks(rotation=0)\nplt.title('Annual Profits over Rides',fontsize=20)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')\nplt.legend(loc='upper right', shadow=True)\n\nplt.subplot(1,2,1)\nx1= ypy.ProfitORides.resample('Y').sum()\nx2= ppy.ProfitORides.resample('Y').sum()\nplt.plot(x1.index.strftime('%Y'),'ProfitORides', data = ypy,color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3, marker = 'o')\nplt.plot(x2.index.strftime('%Y'),'ProfitORides', data = ppy, color = 'coral',label='Pink Cab Company',linewidth=3, marker='o')\nplt.xticks(rotation=0)\nplt.title('Annual Profits over Rides',fontsize=20)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')\nplt.legend(loc='upper right', shadow=True)\n","825f25dd":"g=sns.catplot(ypy.index,'ProfitORides',data=ypy,kind='bar',palette = 'rocket')\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.125, \n            p.get_height() * 1.02, \n            \"${:.2f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\na\u00f1os = ['2016','2017','2018']\nmapeado = range(len(a\u00f1os))\nplt.xticks(mapeado, a\u00f1os, rotation =0)\nplt.title('Yearly PoR YellowCab Company',fontsize=15)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')","2e5ae221":"g=sns.catplot(ppy.index,'ProfitORides',data=ppy,kind='bar',palette = 'mako')\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.125, \n            p.get_height() * 1.02, \n            \"${:.2f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\na\u00f1os = ['2016','2017','2018']\nmapeado = range(len(a\u00f1os))\nplt.xticks(mapeado, a\u00f1os, rotation =0)\nplt.title('Yearly PoR PinkCab Company',fontsize=15)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Year')","82264b4f":"lista=[1,2,3,4,5,6,7,8,9,10,11,12]\nlista=lista*3","d1bc72d1":"plt.figure(figsize=(33,9))\n\nx1= ypm.ProfitORides.resample('m').sum()\nx2= ppm.ProfitORides.resample('m').sum()\nplt.plot(x1.index,'ProfitORides', data = ypm,color = 'mediumvioletred', linewidth = 3,label='Yellow Cab Company', marker='o')\nplt.plot(x2.index,'ProfitORides', data = ppm, color = 'coral',linewidth = 3,label='Pink Cab Company', marker='o')\nplt.xticks(rotation=0)\nplt.title('Monthly Profits over Rides',fontsize=20)\nplt.ylabel('Profit \/ Rides [USD]')\nplt.xlabel('Month')\nplt.legend(loc='upper right', shadow=True)\n","e4d6acdd":"plt.figure(figsize=(33,9))\n\nplt.subplot(1,2,2)\nx1= ypy.ProfitOKM.resample('Y').sum()\nx2= ppy.ProfitOKM.resample('Y').sum()\nplt.bar(x= x1.index.strftime('%Y'), height='ProfitOKM', data = ypy,color = 'mediumvioletred',edgecolor = 'black',label='Yellow Cab Company',linewidth=3)\nplt.bar(x= x2.index.strftime('%Y'), height='ProfitOKM', data = ppy, color = 'coral',edgecolor = 'black',label='Pink Cab Company',linewidth=3)\nplt.xticks(rotation=0)\nplt.title('Annual Profits over KM',fontsize=20)\nplt.ylabel('Profit \/ KM [USD]')\nplt.xlabel('Year')\nplt.legend(loc='upper right', shadow=True)\n\nplt.subplot(1,2,1)\nx1= ypy.ProfitOKM.resample('Y').sum()\nx2= ppy.ProfitOKM.resample('Y').sum()\nplt.ylabel('Profit \/ KM [USD]', fontsize=16)\nplt.plot(x1.index.strftime('%Y'),'ProfitOKM', data = ypy,color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3,marker='o')\nplt.plot(x2.index.strftime('%Y'),'ProfitOKM', data = ppy, color = 'coral',label='Pink Cab Company',linewidth=3,marker='o')\nplt.title('Annual Profits over KM',fontsize=20)\nplt.ylabel('Profit \/ KM [USD]')\nplt.xlabel('Year')\nplt.legend(loc='upper right', shadow=True)","d2a1bf08":"plt.figure(figsize=(33,9))\n\nx1= ypm.ProfitOKM.resample('m').sum()\nx2= ppm.ProfitOKM.resample('m').sum()\nplt.ylabel('Profit \/ KM [USD]', fontsize=16)\nplt.plot(x1.index,'ProfitOKM', data = ypm,color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3, marker='o')\nplt.plot(x2.index,'ProfitOKM', data = ppm, color = 'coral',label='Pink Cab Company',linewidth=3,marker='o')\nplt.xticks(rotation=0)\nplt.title('Monthly Profits over KM',fontsize=20)\nplt.ylabel('Profit \/ KM [USD]')\nplt.xlabel('Month')\nplt.legend(loc='upper right', shadow=True)\n","57ca35c4":"ppc= yellowcab.groupby('City').Profit.sum()\nppc= pd.DataFrame(ppc)\nppc = ppc.sort_values(by='Profit', ascending= False )\nppc.head()\n\nplt.figure(figsize=(22,11))\nfig= ppc.Profit.plot.bar(color = 'mediumvioletred',edgecolor='black',linewidth=1.5)\nplt.xticks(rotation=45)\n\nplt.ylabel('Profits [Millions of USD]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Yellow Cab Profits over City',fontsize=20)\nadd_value_labels(fig)","bd935bd2":"ppc= pinkcab.groupby('City').Profit.sum()\nppc= pd.DataFrame(ppc)\nppc = ppc.sort_values(by='Profit', ascending= False )\nppc.head()\n\nplt.figure(figsize=(22,11))\nfig= ppc.Profit.plot.bar(color = 'coral',edgecolor='black',linewidth=1.5)\nplt.xticks(rotation=45)\n\nplt.ylabel('Profits [Millions of USD]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Pink Cab Profits over City',fontsize=20)\nadd_value_labels(fig)","ddc30ecc":"h=masterdata.groupby(['Company','City']).Profit.sum().to_frame('Profit Over City')\nh=h.reset_index(level='City', col_level=1)\nh=h.reset_index(level='Company', col_level=1)\nh = h.sort_values(by='Profit Over City', ascending= False )","b6cf5a09":"h=h.drop([28,9],axis=0)\nh.head()","78a82309":"g=sns.catplot('City','Profit Over City',data=h,kind='bar',palette = 'rocket',col='Company', height=8.27, aspect=18\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.ylabel('Profits [Millions of USD]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Yellow Cab Profits over City',fontsize=20)\nplt.xticks(rotation=45)\nax = g.facet_axis(0,1)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.ylabel('Profits [Millions of USD]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Pink Cab Profits over City',fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","520f8852":"yellowcabnp=yellowcab[(yellowcab['Profit']<0)]\nyellowcabnp= yellowcabnp.City.value_counts()\nyellowcabnp=pd.DataFrame(yellowcabnp)\nyellowcabnp.columns=['q']\npinkcabnp=pinkcab[(pinkcab['Profit']<0)]\npinkcabnp= pinkcabnp.City.value_counts()\npinkcabnp=pd.DataFrame(pinkcabnp)\npinkcabnp.columns=['q']","ed3caaeb":"yellowcabnp['Q']= yellowcab.City.value_counts() - yellowcabnp['q']\nyellowcabnp['per']= ((1- (yellowcabnp['q'] \/ (yellowcabnp['q']+yellowcabnp['Q'])))*100)\nyellowcabnp= yellowcabnp[['Q','q','per']]\nyellowcabnp['Q']= yellowcabnp['Q'].astype(int)\nyellowcabnp = yellowcabnp.sort_values(by='per', ascending= False )\nyellowcabnp.head(30)\nyellowcabnp.shape\npinkcabnp['Q']= pinkcab.City.value_counts() - pinkcabnp['q']\npinkcabnp['per']= ((1- (pinkcabnp['q'] \/ (pinkcabnp['q']+pinkcabnp['Q'])))*100)\npinkcabnp= pinkcabnp[['Q','q','per']]\npinkcabnp['Q']= pinkcabnp['Q'].astype(int)\npinkcabnp = pinkcabnp.sort_values(by='per', ascending= False )\npinkcabnp.head(30)\npinkcabnp.shape","808519ac":"plt.figure(figsize=(22,11))\nplt.bar(x= yellowcabnp.index, height='per', data = yellowcabnp,edgecolor = 'black',color = 'mediumvioletred',linewidth=3,label='Yellow Cab',)\nplt.bar(x= pinkcabnp.index, height='per', data = pinkcabnp,edgecolor = 'black',color = 'coral',linewidth=3,label='Pink Cab',)\nplt.xticks(rotation=45)\nplt.ylabel('Profitable Rides  [%]', fontsize=20)\nplt.title('Citywise Profitable rides percentage ', fontsize = 25)\nplt.legend(loc='upper right', shadow=True)\nplt.xlabel('Cities', fontsize=20)","5fa263b8":"pinkcabnp=pinkcabnp.reset_index()\nyellowcabnp=yellowcabnp.reset_index()","235a964a":"pinkcabnp.columns=['City','Q','q','per']\nyellowcabnp.columns=['City','Q','q','per']\npinkcabnp.head()","bd171015":"g=sns.catplot('City','per',data=yellowcabnp,kind='bar',palette = 'rocket', height=8.27, aspect=18\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.195, \n            p.get_height() * 1.02, \n            \"{:.0f}%\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.ylabel('Profitable [ % ]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Yellow Cab Profitable Rides %',fontsize=20)\nplt.xticks(rotation=45)\n\nplt.show()","48ad8e16":"g=sns.catplot('City','per',data=pinkcabnp,kind='bar',palette = 'rocket', height=8.27, aspect=18\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.195, \n            p.get_height() * 1.02, \n            \"{:.0f}%\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.ylabel('Profitable [ % ]', fontsize=16)\nplt.xlabel('Cities', fontsize=16)\nplt.title('Pink Cab Profitable Rides %',fontsize=20)\nplt.xticks(rotation=45)\nplt.show()","b211a7d9":"def add_value_labels1(ax, spacing=5):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes\n            of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va, fontsize=12)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels1(ax)","c5775ed7":"plt.figure(figsize=(33,9))\n\nyellowcab['Date of Travel'].value_counts().resample('Y').sum().plot.line(color = 'mediumvioletred',linewidth =3,marker='o')\npinkcab['Date of Travel'].value_counts().resample('Y').sum().plot.line(color = 'coral',linewidth =3,marker='o')\nplt.legend(['Yellow Cab', 'Pink Cab'])\nplt.title('Yearly Demand by each Compny',fontsize=20)\nplt.ylabel('Demand [N\u00ba of Trips required]')\nplt.xlabel('Year')\n\nplt.show()\n            ","69e4ce48":"plt.figure(figsize=(33,9))\n\nyellowcab['Date of Travel'].value_counts().resample('m').sum().plot.line(color = 'mediumvioletred',label='Yellow Cab Company',linewidth=3, marker='o')\npinkcab['Date of Travel'].value_counts().resample('m').sum().plot.line(color = 'coral',label='Pink Cab Company',linewidth=3,marker='o')\nplt.legend(['Yellow Cab', 'Pink Cab'])\nplt.title('Monthly historical demand by each Compny',fontsize=20)\nplt.ylabel('Demand [N\u00ba of Trips required]')\nplt.xlabel('Month')\nplt.show()","7c1ab2ad":"dpm=masterdata.groupby(['Company','Month of Travel'])['Transaction ID'].agg(['count'])\ndpm=dpm.reset_index(level='Month of Travel', col_level=1)\ndpm=dpm.reset_index(level='Company', col_level=1)\ndpm = dpm.sort_values(by='count', ascending= False )","c394e630":"g=sns.catplot('Month of Travel','count',data=dpm,kind='bar',hue='Company',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='medium')\nplt.title('Monthly average demand by each Compny',fontsize=20)\nplt.ylabel('Demand [N\u00ba of Trips required]')\nplt.xlabel('Month')\nplt.show()","80139edb":"a1=masterdata[(masterdata['Age']>18) & (masterdata['Age']<25)]\na2=masterdata[(masterdata['Age']>26) & (masterdata['Age']<40)]\na3=masterdata[(masterdata['Age']>41) & (masterdata['Age']<60)]\na4=masterdata[(masterdata['Age']>60)]\n\na11= a1.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na11.columns=['Total Customers']\na11=a11.reset_index(level='Year of Travel', col_level=1)\na11=a11.reset_index(level='Company', col_level=1)\na11['Class']= '18-25'\na22= a2.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na22.columns=['Total Customers']\na22=a22.reset_index(level='Year of Travel', col_level=1)\na22=a22.reset_index(level='Company', col_level=1)\na22['Class']= '26-40'\na33= a3.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na33.columns=['Total Customers']\na33=a33.reset_index(level='Year of Travel', col_level=1)\na33=a33.reset_index(level='Company', col_level=1)\na33['Class']= '40-60'\na44= a4.groupby(['Company','Year of Travel'])['Customer ID'].agg(['count'])\na44.columns=['Total Customers']\na44=a44.reset_index(level='Year of Travel', col_level=1)\na44=a44.reset_index(level='Company', col_level=1)\na44['Class']= '60+'\n\nagegroup=a11\nagegroup=pd.concat([agegroup,a22,a33,a44])\nagegroup['Total Customers']=agegroup['Total Customers'].astype(int)\nagegroup.head(5)","bf3731bd":"g=sns.catplot('Year of Travel','Total Customers',data=agegroup,col= 'Company',kind='bar',hue='Class',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nax = g.facet_axis(0,1)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.015, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.show()","06fba0d7":"a=agegroup.groupby(['Company', 'Year of Travel'])['Total Customers'].sum().to_frame('Total')","7a3e8228":"a.head(6)","2292f216":"years=[2016,2017,2018]\nc10r_y=[]\nc10r_p=[]\nfor year in years:\n  yellow_year=masterdata[(masterdata['Year of Travel']==year) & (masterdata['Company']=='Yellow Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  yellow_year.reset_index(inplace=True)\n  yellow_year[yellow_year['count']>=10]\n  c10r_y.append(len(yellow_year))\n  pink_year=masterdata[(masterdata['Year of Travel']==year) & (masterdata['Company']=='Pink Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  pink_year.reset_index(inplace=True)\n  pink_year[pink_year['count']>=10]\n  c10r_p.append(len(pink_year))\n\nplt.figure(figsize=(17,9))\nX = np.arange(3)\nplt.bar(X+0.00,c10r_y,color='mediumvioletred', label='Yellow Cab', width= 0.25,edgecolor='black')\nplt.bar(X+0.25,c10r_p,color='coral',label='Pink Cab',width = 0.25,edgecolor='black')\nplt.xticks(X+0.15,['2016','2017','2018'])\nleg=plt.gca().legend(loc='center left',bbox_to_anchor = (1,0.5))\nplt.setp(leg.get_texts(), color='black')\nplt.title('Customers who took more than 10 rides yearly',fontsize=20)\nplt.ylabel('N\u00ba of Clients')\nplt.xlabel('Year')\nplt.show()","7b18df1f":"months=[1,2,3,4,5,6,7,8,9,10,11,12]\nc10r_ym=[]\nc10r_pm=[]\nfor month in months:\n  yellow_year=masterdata[(masterdata['Month of Travel']==month) & (masterdata['Company']=='Yellow Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  yellow_year.reset_index(inplace=True)\n  yellow_year[yellow_year['count']>=10]\n  c10r_ym.append(len(yellow_year))\n  pink_year=masterdata[(masterdata['Month of Travel']==month) & (masterdata['Company']=='Pink Cab')].groupby('Customer ID')['Company'].agg(['count'])\n  pink_year.reset_index(inplace=True)\n  pink_year[pink_year['count']>=10]\n  c10r_pm.append(len(pink_year))\n\nplt.figure(figsize=(17,9))\nX = np.arange(12)\nplt.bar(X+0.00,c10r_ym,color='mediumvioletred', label='Yellow Cab', width= 0.25,edgecolor='black')\nplt.bar(X+0.25,c10r_pm,color='coral',label='Pink Cab',width = 0.25,edgecolor='black')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nleg=plt.gca().legend(loc='center left',bbox_to_anchor = (1,0.5))\nplt.setp(leg.get_texts(), color='black')\nplt.title('Customers who took more than 10 rides monthly',fontsize=20)\nplt.ylabel('N\u00ba of Clients')\nplt.xlabel('Year')\nplt.show()","ae173b28":"c10r_ym=pd.DataFrame(c10r_ym)\nc10r_pm=pd.DataFrame(c10r_pm)","98703338":"c10r_pm.columns=c10r_pm.columns=['High Loyalty Clients']\nc10r_ym.columns=c10r_ym.columns=['High Loyalty Clients']","5c4cc749":"c10r_ym.head()","27410824":"g=sns.catplot(c10r_ym.index,'High Loyalty Clients',data=c10r_ym,kind='bar',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.title(\"YellowCab's High Loyalty Clients\",fontsize=20)\nplt.ylabel('N\u00ba of Clients')\nplt.xlabel('Month')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nplt.show()","34ca724e":"g=sns.catplot(c10r_pm.index,'High Loyalty Clients',data=c10r_pm,kind='bar',palette = 'rocket', height=8.27, aspect=11.7\/8.27)\n\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.0f}\".format(p.get_height()), \n            color='black', rotation='horizontal', size='large')\nplt.title(\"PinkCab's High Loyalty Clients\",fontsize=20)\nplt.ylabel('N\u00ba of Clients')\nplt.xlabel('Month')\nplt.xticks(X+0.15,['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'])\nplt.show()","4c8858c2":"u=masterdata.groupby(['Year of Travel'])['Transaction ID'].agg(['count'])\nu.columns = ['RidesPerYear']\nu=u.reset_index(level='Year of Travel', col_level=1)\npayment=masterdata.groupby(['Year of Travel','Payment_Mode'])['Transaction ID'].agg(['count'])\npayment=payment.reset_index(level='Year of Travel', col_level=1)\npayment=payment.reset_index(level='Payment_Mode', col_level=1)\npayment=payment.merge(u,on= 'Year of Travel')\npayment.head()\npayment1=payment\npayment1['per']=payment1['count']\/payment1['RidesPerYear']\npayment.head()","ff680934":"g=sns.catplot('Year of Travel','per',data=payment1,kind='bar',hue='Payment_Mode',palette=\"rocket\", height=8.27, aspect=11.7\/8.27)\nplt.title('Percentage of Payment Mode Yearly',fontsize=20)\nplt.xlabel('Year')\nplt.ylabel('Percentage')\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.115, \n            p.get_height() * 1.02, \n            \"{:.2f}%\".format(p.get_height()*100), \n            color='black', rotation='horizontal', size='large')\nplt.show()","46a83465":"payment2=masterdata.groupby(['Year of Travel','Payment_Mode','City'])['Transaction ID'].agg(['count'])\npayment2=payment2.reset_index(level='Year of Travel', col_level=1)\npayment2=payment2.reset_index(level='Payment_Mode', col_level=1)\npayment2=payment2.reset_index(level='City', col_level=1)\npayment2 = payment2.sort_values(by='count', ascending= False )\npayment2.head()","a2433a2e":"fig, ax = plt.subplots(figsize = (17, 10))\n\nsns.barplot('City','count',data=payment2,hue='Payment_Mode',palette=\"rocket\")\nplt.title('N\u00ba of Payments citywise',fontsize=20)\nplt.xlabel('City')\nplt.ylabel('N\u00ba of Transactions')\nplt.xticks(rotation=45)\nplt.show()","c45d893a":"a1=masterdata[(masterdata['Age']>18) & (masterdata['Age']<25)]\na2=masterdata[(masterdata['Age']>26) & (masterdata['Age']<40)]\na3=masterdata[(masterdata['Age']>41) & (masterdata['Age']<60)]\na4=masterdata[(masterdata['Age']>60)]\n\na11= a1.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na11.columns=['Total Customers']\na11=a11.reset_index(level='Payment_Mode', col_level=1)\na11['Class']= '18-25'\n\n\na22= a2.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na22.columns=['Total Customers']\na22=a22.reset_index(level='Payment_Mode', col_level=1)\na22['Class']= '26-40'\n\n\na33= a3.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na33.columns=['Total Customers']\na33=a33.reset_index(level='Payment_Mode', col_level=1)\na33['Class']= '40-60'\n\n\na44= a4.groupby(['Payment_Mode'])['Customer ID'].agg(['count'])\na44.columns=['Total Customers']\na44=a44.reset_index(level='Payment_Mode', col_level=1)\na44['Class']= '60+'\n\npayage=a11\npayage=pd.concat([payage,a22,a33,a44])\npayage.head()\n\nx=payage.groupby('Class').sum()\nx.columns=['Q']\nx=x.reset_index(level='Class', col_level=1)\nx.head()\n\npayage=payage.merge(x,on='Class')\npayage['per'] = payage['Total Customers']\/payage['Q']\npayage.head()","11a2512e":"plt.figure(figsize=(35,15))\ng=sns.catplot('Payment_Mode','per',data=payage,kind='bar',hue='Class', palette='rocket', height=8.27, aspect=11.7\/8.27)\nax = g.facet_axis(0,0)\nfor p in ax.patches:\n    ax.text(p.get_x() + 0.035, \n            p.get_height() * 1.02, \n            \"{:.2f}%\".format(p.get_height()*100), \n            color='black', rotation='horizontal', size='large')\nplt.title('Percentage of Payment Mode Agewise',fontsize=20)\nplt.xlabel('Year')\nplt.ylabel('Percentage')\nplt.show()","c474e9f7":"1. Is there any seasonality ? \n\n2. Does the demand of the cab industry tends to increase over time?\n\n3. The percentage of profitable trips change by city.\n\n4. How the demand varies according to agewise?\n\n5. Loyalty Rates.\n\n6. Does the payment method fluctuate yearwise? Agewise? Citywise?\n","1efdb3d1":"We can conclude thay YellowCab Company is doing far better in Profits per Ride.","c1a72a38":"### **Payment Mode Distribution Yearly**","1cdfc7b6":"**COST per KM**\n","311b85be":"### **Yearly Demand**","ec643a14":"## **Profitable Rides % Citywise**","e49d7d57":"# **Data Analysis for Cab Investment**","5a4f645d":"### **YELLOW CAB VS PINK CAB**","7c6ec47c":"### **Monthly profit over KM**","90fd6880":"# **Clients analysis**","e9f820ae":"# **EDA**","a080ce61":"### **Payment Mode Distribution agewise**","3c22781e":"# **Conclution**","8bcec0dd":"## **Payment Mode Distribution**","9c232dec":"# **Demand Analysis**","808e77c3":"## **Profits**","835b4661":"### Check Data Type","661b5cb5":"**Price**","566fd83f":"We define the function to target the bars in terms of just numbers (not in $ as in Profit section)","2fcde228":"**Payment Mode**\n","9c0883c5":"As expected, YellowCab Company has a little more than triple the demand of PinkCab Company\n","b237c46f":"### Description of our Dataset\n","a8ce5e3c":"**YellowCab's profits over the last 3 years are eight times higher than PinkCab's Company**","a1abddd6":"### **OUTLIERS**","fc6e934d":"**Data types conversions**","d6ef9874":"## **Average profits per City**","a1cd762b":"**Time Analysis - unit conversion**","4697b86f":"Understand the market of the taxi's industries before investing","85aa1f33":"### **CAB DATASET**","4d70bee1":"There are not missing values","943fd6d3":"### CITY DATASET","5fbbd532":"# **Profit Analysis**","adbaaab2":"## **Average profits over Rides**","d3d46e90":"## **Loyalty Rates**","e4418e3f":"### **Monthly Demand**\n","287eec6b":"Minimal deviations in the payment method are observed over time","407eb93a":"### Features Analysis","4b3cf2b5":"### **Monthly profits over Rides**","4b6db770":"Finally I want to have datsets from each company: Pink and Yellow Cab Company","7e994db1":"### **Annual Profits Over Rides**","d13cf992":"### **Annual profits over KM**","7b07294b":"Before starting to plot, I retrive a function from **www.it-swarm-es.com**, so as to label bars easy","2615ed79":"### Missing Values","bbbe3d24":"**Monthly Average Demand**\n","c7ec402d":"To analyze the Loyalty rates I define 2 classes:\n\n\n*   **Medium Loyalty Customers:** Customers who took more than 10 rides yearly\n*   **High Loyalty Customers:** Customers who took more than 10 rides monthly\n\n","0f431bed":"**Yearly PoR per Company**","e8c3932e":"**GENDER**","2f899744":"## **Average profits over KM**","b5463c77":"We can see that over the months, YellowCab Company's earnings are more stable, with fluctuations of 23,08%, while those of the PinkCab Company's vary in the order of 61,22%","484ef3c7":"Now, every feature is in an appropiate data type.","e9d98861":"Let's see each company in detail...","3809b2b7":"Outliers are present in the `Price Charged `feature, but as we do not have any further information of the components that made the \"Price Charged\", I will not treat it as an outlier","21e14165":"### **Annual Profits**","6505c10f":"# **Data Intake**\n","64a7c2dd":"YellowCab Company is doing better in both classes of Loyalty Rates","ad552529":"Now, we can answer the third hypothesis. Profitable Rides change by cities, and of course, according to the Company we can see some differences. Assuming that at a profitable drive rate of 80% the operation performs well; we can see that ...\n\n\n*  YellowCab has a high performance acording to it\u2019s operations, mantaining a high level of Profitable Rides in every City. \n\n\n*   Pink Cab has a great too, except in Seattle to Pittsburgh.\nMoreover, Pittsburgh and Dallas performance are not Good at all, with a percentage of 61%. This means that in those cities, every 10 rides, almost 4 rides are not profitables\u2026\n\n\n\n\n","7e540909":"Every data type is correct","2b8ada49":"Minimal deviations of the payment method are observed with respect to the ages of the clients","b037aa6c":"# **What is the business problem?**\n\n\n\n","b803ea94":"## **Demand Agewise**","3fa2cae7":"### CUSTOMERS DATASET","98c73b7d":"Here I want to create a new dataset that will be the same as Master Datset, but the feature 'Date of Travel' will be it's index so as to work properly Time Series Visualizations","d71eb4f7":"I have evaluated both the cab companies on following points and found Yellow cab better than Pink cab:\n\n\n**1.  Profit Analysis**\n\n\n**Profits:** Higher Profits over the time and less fluctuations monthly\n\n\n**Profits over Rides:** Better PoR rate among time. Yellow Cab has 2.5 more Profits over Ride\n\n\n**Profits Citywise**: Yellow Cab has greater market share in every City.\n\n\n**Profitable Rides:** Assuming that over a rate of 80% PR, the company performs well. Yellow Cab has a high performance among every city. In contrast, Pink Cab does not perform well in 8 cities.\n\n\n**2. Demand Analysis**\n\n\n**Demand:** Yellow Cab has more than triple the demand of Pink Cab Company\n\n\n**Demand Agewise**: Both companies present the same distribution of Demand Agewise\n\n\n**3. Client Analysis**\n\n\n**Loyalty Rates:** Assuming both classes, Yellow Cab has a higher High Loyalty Rate and Medium Loyalty Rate\n\n\n**Payment Mode Distributions:** Both companies present the same distribution of Payment Mode over time, citywise and agewise.\n\n\n*On the basis of above point , I will recommend Yellow cab for investment.*\n","201cb67c":"Minimal deviations of the payment method are observed in each city ","b1d3c41b":"Profit per Ride is an indicator that measures how efficent the company is, in terms of operational costs.\n\n\n> **Profit per Ride**\n\n(*Total Profits over a certain Period of Time*) \/ ( *N\u00ba of Rides over that period of Time*)\n\n\n\n","3471fdf6":"Finally, I will work on this \"Master Dataset\", a result from the merge of the 4 datasets provided to this assignment","1eebe90b":"### **Monthly Profits**","da273d28":"**KM TRAVELLED**","b74fe744":"### TRANSACTION ID DATASET","58ea0745":"## **HYPOTHESIS**\n","5dba4a03":"In this picture New York has been removed from both companies to get a better sight of the Profits over the other cities.\n\nWe can conclude that YellowCab has greater marketshare in every City","b498cf48":"\n### **Time Series**","94aa8dfc":"**CORRELATIONS**","543ad745":"**Cost of Trip**","a97728d5":"### MASTER DATA","8de88c89":"### Check Duplicates","c8c9b6d2":"### **Payment Mode Distribution citywise**","35fb0dcd":"## **Demand**","2ca33eb5":"Both companies shows the same beahviour;decrease over time. So... tends to decrease this efficiency"}}