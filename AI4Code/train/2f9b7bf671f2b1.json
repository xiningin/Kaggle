{"cell_type":{"0c7b057a":"code","780f6e89":"code","26536df0":"code","0ed18dc7":"code","38e89450":"code","d26be7ca":"code","3840d735":"code","a8698941":"code","4b7816ee":"code","505297c7":"markdown","785e01d5":"markdown","cce09f77":"markdown","a55070e1":"markdown"},"source":{"0c7b057a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nINPUT_BASE = '\/kaggle\/input\/tweet-sentiment-extraction\/'\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","780f6e89":"import time\nimport random\nimport datetime","26536df0":"train_data = pd.read_csv('{}train.csv'.format(INPUT_BASE))","0ed18dc7":"train_data = train_data.dropna()\ntrain_data.reset_index(inplace=True)\ntrain_data.head()","38e89450":"train_data['text'] = train_data.apply(lambda row: str(row.text).strip(), axis=1)","d26be7ca":"starts = []\nends = []\nfor idx, _ in enumerate(train_data.text):\n    text = train_data.text[idx]\n    selected = train_data.selected_text[idx]\n    \n    words = text.split()\n    selected_words = selected.split()\n    \n    for idx, word in enumerate(words):\n        if selected_words[0] in word:\n            start = idx\n            break\n    for idx, word in enumerate(words):\n        if selected_words[-1] in word:\n            end = idx\n            break\n    starts.append(start)\n    ends.append(end)\n\ntrain_data['start_idx'] = starts\ntrain_data['end_idx'] = ends\n","3840d735":"from IPython.core.display import display, HTML\n\ndef visualize_text_segment(words, gt, pred=None, bg_color='rgba(255,255,0,0.5)', text_color='black', pred_bg_color='rgba(0,0,255,0.3)', pred_text_color='red'):\n    start, end = gt\n    if pred is not None:\n        start_, end_ = pred\n    \n    \"\"\"both index are inclusive\"\"\"\n    html = ''\n    for idx, word in enumerate(words):\n        if idx == start:\n            html += \"<span style='background:{};color:{}'>\".format(bg_color, text_color)\n        if pred is not None and idx == start_:\n                html += \"<span style='background:{};color:{}'>\".format(pred_bg_color, pred_text_color)\n            \n        html += word + ' '\n        \n        if pred is not None and idx == end_:\n                html += '<\/span>'\n        if idx == end:\n            html += '<\/span>'\n        \n    display(HTML(html))","a8698941":"import random\n\nfor idx, _ in enumerate(train_data.text):\n    if idx > 30:\n        break\n    words = train_data.text[idx].split()\n    start = train_data.start_idx[idx]\n    end = train_data.end_idx[idx]\n    \n    gt = (start, end)\n    if start > end:\n        gt = (end, start)\n    \n    pred = (random.randint(gt[0], gt[1]), random.randint(gt[0], gt[1])) # random guess\n    \n    if pred[0] > pred[1]:\n        pred = (pred[1], pred[0])\n    \n    visualize_text_segment(words, gt, pred)","4b7816ee":"import random\n\nfor idx, _ in enumerate(train_data.text):\n    if idx > 30:\n        break\n    words = train_data.text[idx].split()\n    start = train_data.start_idx[idx]\n    end = train_data.end_idx[idx]\n    \n    gt = (start, end)\n    if start > end:\n        gt = (end, start)\n    \n    visualize_text_segment(words, gt)","505297c7":"## Text Segment Visualization using HTML\n- Colorize the answer's text span\n- Better readability!!\n- Debugging","785e01d5":"# Example 2 (Single text Segment)","cce09f77":"## Function for visualizing GT & Predicted Span of Text\n- Input\n    - **words** ; list of words\n    - **gt** ; (start_index, end_index) tuple\n    - **pred** ; (start_index, end_index) tuple\n    - **bg_color** ; bg color for GT\n    - **text_color** ; text color for GT\n    - **pred_bg_color** ; bg color for prediction\n    - **pred_text_color** ; text color for prediction","a55070e1":"# Example 1 (Comparison of two text segments)\n- [!] start,end idx can be wrong in this examples\n- yellow ; Ground Truth\n- skyblue ; Prediction (Random Guess)"}}