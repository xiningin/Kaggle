{"cell_type":{"2dc7c880":"code","7c1eebb5":"code","622575e0":"code","08bab274":"code","65f0e2f0":"code","54fd7331":"code","84433a49":"markdown"},"source":{"2dc7c880":"# Importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Importing the data file from \"..\/input\/\" directory.\ndata = pd.read_csv('..\/input\/Breast_cancer_data.csv')\ndata.info()\nX = data.iloc[:,0:5].values\ny = data.iloc[:,5].values\n","7c1eebb5":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","622575e0":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","08bab274":"#Import Keras\nfrom keras.wrappers.scikit_learn import KerasClassifier\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.model_selection import GridSearchCV\n","65f0e2f0":"# build classifier function \ndef build_classifier_best(optimizer):\n    classifier = Sequential()\n    classifier.add(Dense(units = 3, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))\n    classifier.add(Dense(units = 3, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\n","54fd7331":"# find the best parameters \nclassifier = KerasClassifier(build_fn = build_classifier_best)\nparameters = {'batch_size':[25,32],\n              'epochs':[100,500],\n              'optimizer':['adam','rmsprop']}\n\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10)\ngrid_search = grid_search.fit(X_train, y_train)\nbest_parameters = grid_search.best_params_\nbest_accuracy = grid_search.best_score_\n","84433a49":"**The final outcome for the tuning parameters were :**  \n**best_accuracy = .938**  \n**best parameters = {'batch_size':32, 'epochs':500,'optimizer':'adam'}**  "}}