{"cell_type":{"4d6ae14d":"code","9dd828f5":"code","880615f3":"code","1f5d925b":"code","6bef915f":"code","8c6f373d":"code","b7ba2460":"code","602404fe":"code","4b62ff6b":"code","7ed0ac5f":"code","6f8111b7":"code","afe9ad11":"code","fadc8fae":"code","24e82654":"code","b8de0650":"code","f6a8b5bb":"code","ca885054":"code","5a1bf394":"code","91298399":"code","23a49a1b":"code","944ca774":"code","5941d404":"code","e5a7da81":"code","ca60dd89":"code","369d3223":"code","ee7c3c94":"code","213127af":"code","1d3434d2":"code","690681cc":"code","9af4c8ca":"code","67e06044":"code","3f99c2f7":"code","3ecdae3d":"code","df02adf2":"code","ffcbdb7f":"code","1c831236":"code","7ded15f2":"code","e1a5b257":"code","c42d616c":"code","b35fb492":"code","cd36058a":"code","c3796e0d":"code","8341d845":"code","141f75dc":"code","883a579a":"code","4703f0d2":"code","734d8978":"code","ed031456":"code","b7b511d2":"code","aa338679":"markdown","9b4dea06":"markdown","773f3aa8":"markdown","98a47471":"markdown","e18caa53":"markdown","b7e295d0":"markdown","0f7a9976":"markdown","20ec05b9":"markdown","11c3300d":"markdown"},"source":{"4d6ae14d":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9dd828f5":"df= pd.read_csv(\"\/kaggle\/input\/titanic-compitition-datasets\/train.csv\")\ndf.head(7)","880615f3":"df.count()","1f5d925b":"df.drop(['PassengerId','Cabin','Ticket','Fare','Name'], axis=1, inplace= True)","6bef915f":"print(df.describe())\nprint(df.isna().sum())","8c6f373d":"df['Age'].fillna(df['Age'].mean(), inplace= True)","b7ba2460":"df['Survived'].groupby([df['Sex'],df['Survived']]).count()","602404fe":"from sklearn.preprocessing import LabelEncoder","4b62ff6b":"print(df['Embarked'].unique())\ndf['Embarked'].fillna('Q', inplace= True)","7ed0ac5f":"le= LabelEncoder()\ndf['Sex']= le.fit_transform(df['Sex'])\ndf['Embarked']= le.fit_transform(df['Embarked'])\ndf.head()","6f8111b7":"df.isna().sum()","afe9ad11":"df.info()","fadc8fae":"df.groupby([df.Survived]).count().plot(kind='pie', y='Sex', \n                                      figsize= (5,7), \n                                      autopct='%1.1f%%')","24e82654":"import seaborn as sns","b8de0650":"sns.countplot(x='Survived',data= df)","f6a8b5bb":"sns.boxplot(x='Survived', y='Age', data= df)","ca885054":"survived= df.loc[df[\"Survived\"]==1]\ndead= df.loc[df['Survived']== 0]","5a1bf394":"sns.kdeplot(survived['Age'],color='g', shade= True, \n            label= 'Survived')\nsns.kdeplot(dead['Age'],color='r', shade= True, \n            label= 'Dead')","91298399":"sns.kdeplot(survived['Pclass'],color='g', shade= True, \n            label= 'Survived')\nsns.kdeplot(dead['Pclass'],color='r', shade= True, \n            label= 'Dead')","23a49a1b":"from sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, confusion_matrix\nfrom sklearn import metrics","944ca774":"X= df.drop(['Survived'], axis=1)\ny= df['Survived']\nX_train,X_test,y_train,y_test= train_test_split(X,y, test_size= 0.33, random_state=10)","5941d404":"SVM_model= svm.SVC(kernel ='linear')\nmy_model_1= SVM_model.fit(X_train,y_train)","e5a7da81":"predictions_1= my_model_1.predict(X_test)\npredictions_1","ca60dd89":"print(\"Accuracy of SVM model is: \",accuracy_score(y_test,predictions_1,\"\\n\"))\nprint(\"SVM Classification report: \",\"\\n\", metrics.classification_report(y_test,predictions_1))\nprint(\"Confusion matrix for SVM:\",\"\\n\",confusion_matrix(y_test,predictions_1))","369d3223":"Bagging_Decision_tree_model= BaggingClassifier(DecisionTreeClassifier(random_state= 20), \n                                               n_estimators= 500, max_samples= 100,\n                                               bootstrap=True, n_jobs=-1)\nmy_model_2= Bagging_Decision_tree_model.fit(X_train,y_train)","ee7c3c94":"predictions_2= my_model_2.predict(X_test)\npredictions_2","213127af":"print(\"Accuracy of BaggingClassifier model is: \",accuracy_score(y_test,predictions_2,\"\\n\"))\nprint(\"BaggingClassifier Classification report: \",\"\\n\", metrics.classification_report(y_test,predictions_2))\nprint(\"Confusion matrix for BaggingClassifier:\",\"\\n\",confusion_matrix(y_test,predictions_2))","1d3434d2":"AdaBoost_model= AdaBoostClassifier(random_state=100,n_estimators=50,\n                         learning_rate=1)\nmy_model_3= AdaBoost_model.fit(X_train,y_train)","690681cc":"predictions_3= my_model_3.predict(X_test)\npredictions_3","9af4c8ca":"print(\"Accuracy of AdaBoost model is: \",accuracy_score(y_test,predictions_3,\"\\n\"))\nprint(\"AdaBoost Classification report: \",\"\\n\", metrics.classification_report(y_test,predictions_3))\nprint(\"Confusion matrix for AdaBoost:\",\"\\n\",confusion_matrix(y_test,predictions_3))","67e06044":"LogisticR_model= LogisticRegression(solver= 'liblinear')\nmy_model_4= LogisticR_model.fit(X_train,y_train)","3f99c2f7":"predictions_4= my_model_4.predict(X_test)\npredictions_4","3ecdae3d":"print(\"Accuracy of Logistic Regression model is: \",accuracy_score(y_test,predictions_4,\"\\n\"))\nprint(\"Logistic Regression Classification report: \",\"\\n\", metrics.classification_report(y_test,predictions_4))\nprint(\"Confusion matrix for Logistic Regression:\",\"\\n\",confusion_matrix(y_test,predictions_4))","df02adf2":"df2= pd.read_csv(\"\/kaggle\/input\/titanic-compitition-datasets\/test.csv\")\ndf2.head()","ffcbdb7f":"df2.count()","1c831236":"df2.drop(['PassengerId','Cabin','Ticket','Fare','Name'], axis=1, inplace= True)","7ded15f2":"print(df2.describe())\nprint(df2.isna().sum())","e1a5b257":"df2['Age'].fillna(df2['Age'].mean(), inplace= True)","c42d616c":"le= LabelEncoder()\ndf2['Sex']= le.fit_transform(df2['Sex'])\ndf2['Embarked']= le.fit_transform(df2['Embarked'])\ndf2.head()","b35fb492":"print(df2.isna().sum())\nprint(df2.info())","cd36058a":"submission= pd.read_csv(\"\/kaggle\/input\/titanic-compitition-datasets\/gender_submission.csv\")\nsubmission.head()","c3796e0d":"submission.drop(['PassengerId'], axis=1, inplace=True)\nsubmission.head()","8341d845":"test_predictions_1= my_model_1.predict(df2)\ntest_predictions_2= my_model_2.predict(df2)\ntest_predictions_3= my_model_3.predict(df2)\ntest_predictions_4= my_model_4.predict(df2)","141f75dc":"print(\"Accuracy of SVM model on test.csv is: \",accuracy_score(submission,test_predictions_1,\"\\n\"))\nprint(\"Accuracy of BaggingClassifier model on test.csv is: \",accuracy_score(submission,test_predictions_2,\"\\n\"))\nprint(\"Accuracy of AdaBoost model on on test.csv is: \",accuracy_score(submission,test_predictions_3,\"\\n\"))\nprint(\"Accuracy of Logistic Regression model on on test.csv is: \",accuracy_score(submission,test_predictions_4,\"\\n\"))","883a579a":"print(\"Accuracy of SVM model on train.csv is: \",accuracy_score(y_test,predictions_1,\"\\n\"))\nprint(\"Accuracy of SVM model on test.csv is: \",accuracy_score(submission,test_predictions_1,\"\\n\"))\nprint(\"SVM Classification report: \",\"\\n\", metrics.classification_report(submission,test_predictions_1))\nprint(\"Confusion matrix for SVM model\",\"\\n\",confusion_matrix(submission,test_predictions_1))\ntest_predictions_1","4703f0d2":"temp= pd.DataFrame(test_predictions_4, columns= ['Survived'])","734d8978":"test_for_sub= pd.read_csv(\"\/kaggle\/input\/titanic-compitition-datasets\/test.csv\")\nfinal_submission= pd.DataFrame()\nfinal_submission['PassengerId']= test_for_sub['PassengerId']\nfinal_submission['Survived']= temp\nfinal_submission.head()","ed031456":"final_submission.count()","b7b511d2":"final_submission.to_csv(\".\/B:\\Machine learning\\Portfolio\\Titanic compitition\\final.csv\", index= False)","aa338679":"# Data Cleaning and Preprocessing on \"test.csv\"","9b4dea06":"# Classification using BaggingClassifier","773f3aa8":"# Predctions on \"test.csv\" using:\n1. SVM\n2. BaggingClassifier\n3. AdaBoost\n4. Logistic Regression","98a47471":"# Data Cleaning and Preprocessing on \"train.csv\"","e18caa53":"# EDA on train.csv","b7e295d0":"# Classification using SVM","0f7a9976":"# Classification using Logistic Regression","20ec05b9":"# **SVM** model has the highest accuracy of 1.0","11c3300d":"# Classification using AdaBoost"}}