{"cell_type":{"f1cf29fe":"code","4f747ab6":"code","a5553311":"code","cbce39d7":"code","ddfd2bb8":"code","45974187":"code","8da81ea6":"code","5a26ef36":"code","435baa2c":"code","c3f170e3":"code","737ff34e":"code","0eccbc0f":"code","0795bc8c":"code","af94ed5f":"code","1df3cd8b":"code","80adc789":"code","288945b0":"code","149c271e":"code","09eab98e":"code","c322133e":"code","be771e69":"markdown","dc876af8":"markdown","5e0fbe36":"markdown","3d6c951c":"markdown","6fdae65a":"markdown","b2dfa5ea":"markdown","fa3d0be8":"markdown","d0562ce0":"markdown","b1c2bf85":"markdown","cc3f2241":"markdown","61714994":"markdown","7422bf97":"markdown","5fddff63":"markdown","03d525c4":"markdown","d78c00d3":"markdown","475f8b85":"markdown","2fffc5d0":"markdown"},"source":{"f1cf29fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f747ab6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a5553311":"df = pd.read_csv('\/kaggle\/input\/kyphosis-data-decision-treesrandom-forests\/kyphosis.csv')","cbce39d7":"df.head(8)","ddfd2bb8":"df.info()","45974187":"sns.pairplot(df,hue='Kyphosis',palette='Set1')","8da81ea6":"from sklearn.model_selection import train_test_split","5a26ef36":"X = df.drop('Kyphosis',axis=1)\ny = df['Kyphosis']","435baa2c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","c3f170e3":"from sklearn.tree import DecisionTreeClassifier","737ff34e":"dtree = DecisionTreeClassifier()","0eccbc0f":"dtree.fit(X_train,y_train)","0795bc8c":"predictions = dtree.predict(X_test)","af94ed5f":"from sklearn.metrics import classification_report,confusion_matrix","1df3cd8b":"print(classification_report(y_test,predictions))","80adc789":"print(confusion_matrix(y_test,predictions))","288945b0":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","149c271e":"rfc_pred = rfc.predict(X_test)","09eab98e":"print(confusion_matrix(y_test,rfc_pred))","c322133e":"print(classification_report(y_test,rfc_pred))","be771e69":"# Random Forests\nNow let's compare the decision tree model to a random forest.","dc876af8":"So some aspects we are mislabelling about eight (5+3) of these from the test set which gives us about 65% precision 68% recall 67% f1- score.","5e0fbe36":"# Great Job!","3d6c951c":"So it's a little hard to tell which performed better because it really depends on what you value whether you're valuing precision \n\nor recall. But again it really depends on the situation and the patient itself and what costs are associated with those decisions.\n\nBut it's also useful to compare is the confusion matrix here.\n\nSo overall it looks like the random forest data a little better. And you'll notice that as data sets gets larger and larger the \n\nrandom forest will pretty much always do better than a single decision tree here because they just that's so small the random \n\nforest wasn't able to outshine the decision tree by as much.\n\nSo keep that in mind as you're comparing decision tree in this case versus a random forest classifier But overall and pretty much \n\nmost cases of larger data sets a random forest classifier will outshine a single decision tree.","6fdae65a":"You notice it is actually just 81 entries so quite a small dataset meaning I could just call sns pair plots.","b2dfa5ea":"# Prediction and Evaluation\n\nWe'll go ahead and evaluate how well our decision tree was able to predict based off of these columns.","fa3d0be8":"Go ahead and instantiate it.","d0562ce0":"We want to set  X data to everything but the target. So the target is Kyphosis because basically we're \n\ntrying to predict whether patient after a certain number of months after their surgery are they healed or not. Is the condition \n\nstill present. And we are going to go ahead and say Axis 1 and then we'll go ahead and say the target is the first column.","b1c2bf85":"# Train Test Split\nLet's split up the data into a training set and a test set!","cc3f2241":"Just looking at the results here we get about 83% precision 56% recall 50% f1- score.","61714994":"# Decision Trees\nWe'll start just by training a single decision tree.","7422bf97":"We say from S-K learn that metrics imports and we'll go and import classification report and the confusion matrix and then we'll go ahead and just print those out.","5fddff63":"# Simple Desicion Tree & Random Forest With Healthcare Dataset\n\nThis notebook will show you how to use sklearn in Python to create the desicion tree model and random forest model.\n\nThis dataset essentially represents a number of patients who had Kyphosis which is a spinal condition and then they had ano \n\nperation and the operation was a corrective spinal surgery and the state of frame basically represents whether or not the Kyphosis \n\ncondition was absent or present after the operation.\n\nAge: The age is the age of the person in months. So this is data on children.\n\nNumber: The number is a number of vertebrae involved in the operation and the start was the number of the first or top most or \n\nvertebrae that was operated on.\n\n# Let's go ahead and walk through this notebook.","03d525c4":"#  Get the Data","d78c00d3":"# Import Libraries","475f8b85":"# If you find this notebook helpful, please don't forget comment and upvoting :). Thanks ","2fffc5d0":"# Lets check out the pairplot in this simple dataset"}}