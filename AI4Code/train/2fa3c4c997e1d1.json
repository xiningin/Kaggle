{"cell_type":{"79b32d5e":"code","cb699fd2":"code","9f87186f":"code","2fcdeedf":"code","dc2158e2":"code","2a6e1159":"code","bbaa1384":"code","5c519aa3":"code","1c42dbd1":"code","d52944d9":"code","f2a906c6":"code","cff16e09":"markdown","c8648846":"markdown","f8c8c680":"markdown","2c527861":"markdown","df40cc17":"markdown","df79150d":"markdown","e752cb02":"markdown","da72def6":"markdown","fc058a52":"markdown","771582a9":"markdown","855a1ce8":"markdown","beb20d89":"markdown","c9518d23":"markdown","a8688e8d":"markdown","2abf454d":"markdown","e0769a65":"markdown","b517965d":"markdown","a8bce006":"markdown","0cd37fbf":"markdown","0f8c59a6":"markdown","96a6f6df":"markdown","44280a92":"markdown","cc13d528":"markdown","9432920a":"markdown","b2e05073":"markdown","a4938d37":"markdown","41cac302":"markdown","71eae959":"markdown","6d57736f":"markdown","39d7665b":"markdown","7492a955":"markdown","0c985485":"markdown","aedd7565":"markdown","f54b8c0e":"markdown","e172157d":"markdown","15be4045":"markdown","f4a41dbe":"markdown","dca64978":"markdown","3919bd9a":"markdown","cd690309":"markdown","1468264b":"markdown","485ecbae":"markdown","c3b81f0c":"markdown","bae7d7ac":"markdown","64ffa9e7":"markdown","5e5ffcb5":"markdown","8c1c0e0a":"markdown","c29c18a8":"markdown","ca9c2a19":"markdown","af50eb49":"markdown","451aa846":"markdown","e4ad0a07":"markdown","2770c4e2":"markdown","b299f9ff":"markdown","4953d21c":"markdown","384f6b0f":"markdown","ddc0aa29":"markdown","8032ad08":"markdown","5058336d":"markdown"},"source":{"79b32d5e":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers.experimental import preprocessing\n\ndata = np.array([[0.1, 0.2, 0.3], [0.8, 0.9, 1.0], [1.5, 1.6, 1.7],])\nlayer = preprocessing.Normalization()\nlayer.adapt(data)\nnormalized_data = layer(data)\n\nprint(\"Features mean: %.2f\" % (normalized_data.numpy().mean()))\nprint(\"Features std: %.2f\" % (normalized_data.numpy().std()))","cb699fd2":"data = [\n    \"\u03be\u03b5\u1fd6\u03bd\u1fbd, \u1f26 \u03c4\u03bf\u03b9 \u03bc\u1f72\u03bd \u1f44\u03bd\u03b5\u03b9\u03c1\u03bf\u03b9 \u1f00\u03bc\u03ae\u03c7\u03b1\u03bd\u03bf\u03b9 \u1f00\u03ba\u03c1\u03b9\u03c4\u03cc\u03bc\u03c5\u03b8\u03bf\u03b9\",\n    \"\u03b3\u03af\u03b3\u03bd\u03bf\u03bd\u03c4\u1fbd, \u03bf\u1f50\u03b4\u03ad \u03c4\u03b9 \u03c0\u03ac\u03bd\u03c4\u03b1 \u03c4\u03b5\u03bb\u03b5\u03af\u03b5\u03c4\u03b1\u03b9 \u1f00\u03bd\u03b8\u03c1\u03ce\u03c0\u03bf\u03b9\u03c3\u03b9.\",\n    \"\u03b4\u03bf\u03b9\u03b1\u1f76 \u03b3\u03ac\u03c1 \u03c4\u03b5 \u03c0\u03cd\u03bb\u03b1\u03b9 \u1f00\u03bc\u03b5\u03bd\u03b7\u03bd\u1ff6\u03bd \u03b5\u1f30\u03c3\u1f76\u03bd \u1f40\u03bd\u03b5\u03af\u03c1\u03c9\u03bd:\",\n    \"\u03b1\u1f31 \u03bc\u1f72\u03bd \u03b3\u1f70\u03c1 \u03ba\u03b5\u03c1\u03ac\u03b5\u03c3\u03c3\u03b9 \u03c4\u03b5\u03c4\u03b5\u03cd\u03c7\u03b1\u03c4\u03b1\u03b9, \u03b1\u1f31 \u03b4\u1fbd \u1f10\u03bb\u03ad\u03c6\u03b1\u03bd\u03c4\u03b9:\",\n    \"\u03c4\u1ff6\u03bd \u03bf\u1f33 \u03bc\u03ad\u03bd \u03ba\u1fbd \u1f14\u03bb\u03b8\u03c9\u03c3\u03b9 \u03b4\u03b9\u1f70 \u03c0\u03c1\u03b9\u03c3\u03c4\u03bf\u1fe6 \u1f10\u03bb\u03ad\u03c6\u03b1\u03bd\u03c4\u03bf\u03c2,\",\n    \"\u03bf\u1f35 \u1fe5\u1fbd \u1f10\u03bb\u03b5\u03c6\u03b1\u03af\u03c1\u03bf\u03bd\u03c4\u03b1\u03b9, \u1f14\u03c0\u03b5\u1fbd \u1f00\u03ba\u03c1\u03ac\u03b1\u03bd\u03c4\u03b1 \u03c6\u03ad\u03c1\u03bf\u03bd\u03c4\u03b5\u03c2:\",\n    \"\u03bf\u1f31 \u03b4\u1f72 \u03b4\u03b9\u1f70 \u03be\u03b5\u03c3\u03c4\u1ff6\u03bd \u03ba\u03b5\u03c1\u03ac\u03c9\u03bd \u1f14\u03bb\u03b8\u03c9\u03c3\u03b9 \u03b8\u03cd\u03c1\u03b1\u03b6\u03b5,\",\n    \"\u03bf\u1f35 \u1fe5\u1fbd \u1f14\u03c4\u03c5\u03bc\u03b1 \u03ba\u03c1\u03b1\u03af\u03bd\u03bf\u03c5\u03c3\u03b9, \u03b2\u03c1\u03bf\u03c4\u1ff6\u03bd \u1f45\u03c4\u03b5 \u03ba\u03ad\u03bd \u03c4\u03b9\u03c2 \u1f34\u03b4\u03b7\u03c4\u03b1\u03b9.\",\n]\nlayer = preprocessing.TextVectorization()\nlayer.adapt(data)\nvectorized_text = layer(data)\nprint(vectorized_text)","9f87186f":"vocab = [\"a\", \"b\", \"c\", \"d\"]\ndata = tf.constant([[\"a\", \"c\", \"d\"], [\"d\", \"z\", \"b\"]])\nlayer = preprocessing.StringLookup(vocabulary=vocab)\nvectorized_data = layer(data)\nprint(vectorized_data)","2fcdeedf":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# \uc218\ud3c9 \ub4a4\uc9d1\uae30, \ud68c\uc804, \ud655\ub300\ub85c \ub370\uc774\ud130 \uc99d\uac15 \ub2e8\uacc4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4\ndata_augmentation = keras.Sequential(\n    [\n        preprocessing.RandomFlip(\"horizontal\"),\n        preprocessing.RandomRotation(0.1),\n        preprocessing.RandomZoom(0.1),\n    ]\n)\n\n# \uc99d\uac15 \ub2e8\uacc4\ub97c \ud3ec\ud568\ud558\ub294 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninput_shape = (32, 32, 3)\nclasses = 10\ninputs = keras.Input(shape=input_shape)\n# \uc774\ubbf8\uc9c0\ub97c \uc99d\uac15\ud569\ub2c8\ub2e4\nx = data_augmentation(inputs)\n# \uc774\ubbf8\uc9c0 \uac12\ub4e4\uc744 [0, 1]\ub85c \uc7ac\uc870\uc815\ud569\ub2c8\ub2e4\nx = preprocessing.Rescaling(1.0 \/ 255)(x)\n# \ubaa8\ub378\uc758 \ub098\uba38\uc9c0\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4\noutputs = keras.applications.ResNet50(\n    weights=None, input_shape=input_shape, classes=classes\n)(x)\nmodel = keras.Model(inputs, outputs)","dc2158e2":"# \uba87\uac1c\uc758 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4\n(x_train, y_train), _ = keras.datasets.cifar10.load_data()\nx_train = x_train.reshape((len(x_train), -1))\ninput_shape = x_train.shape[1:]\nclasses = 10\n\n# \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \uc815\uaddc\ud654 \uce35\uacfc \uadf8 \ub0b4\ubd80 \uc0c1\ud0dc\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4\nnormalizer = preprocessing.Normalization()\nnormalizer.adapt(x_train)\n\n# \uc815\uaddc\ud654 \uce35\uc744 \ud3ec\ud568\ud558\ub294 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninputs = keras.Input(shape=input_shape)\nx = normalizer(inputs)\noutputs = layers.Dense(classes, activation=\"softmax\")(x)\nmodel = keras.Model(inputs, outputs)\n\n# \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\")\nmodel.fit(x_train, y_train)","2a6e1159":"# \uba87\uac00\uc9c0 \uc5f0\uc2b5\uc6a9 \ub370\uc774\ud130\ub97c \uc815\uc758\ud569\ub2c8\ub2e4\ndata = tf.constant([\"a\", \"b\", \"c\", \"b\", \"c\", \"a\"])\n\n# \ud2b9\uc9d5\uac12\ub4e4\uc758 \uc0c9\uc778\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 StringLookup\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nindexer = preprocessing.StringLookup()\nindexer.adapt(data)\n\n# \uc815\uc218\ud615 \uc0c9\uc778\ub4e4\uc744 one-hot \ubca1\ud130\ub85c \uc778\ucf54\ub529\ud558\uae30 \uc704\ud574 CategoryEncoding\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nencoder = preprocessing.CategoryEncoding(output_mode=\"binary\")\nencoder.adapt(indexer(data))\n\n# (\uc54c \uc218 \uc5c6\ub294 \ud2b9\uc9d5\uac12\uc744 \ud3ec\ud568\ud558\ub294) \uc0c8\ub85c\uc6b4 \ud3c9\uac00 \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud569\ub2c8\ub2e4\ntest_data = tf.constant([\"a\", \"b\", \"c\", \"d\", \"e\", \"\"])\nencoded_data = encoder(indexer(test_data))\nprint(encoded_data)","bbaa1384":"# \uba87\uac00\uc9c0 \uc5f0\uc2b5\uc6a9 \ub370\uc774\ud130\ub97c \uc815\uc758\ud569\ub2c8\ub2e4\ndata = tf.constant([10, 20, 20, 10, 30, 0])\n\n# \ud2b9\uc9d5\uac12\ub4e4\uc758 \uc0c9\uc778\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 IntegerLookup\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nindexer = preprocessing.IntegerLookup()\nindexer.adapt(data)\n\n# \uc815\uc218\ud615 \uc0c9\uc778\ub4e4\uc744 one-hot \ubca1\ud130\ub85c \uc778\ucf54\ub529\ud558\uae30 \uc704\ud574 CategoryEncoding\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nencoder = preprocessing.CategoryEncoding(output_mode=\"binary\")\nencoder.adapt(indexer(data))\n\n# (\uc54c \uc218 \uc5c6\ub294 \ud2b9\uc9d5\uac12\uc744 \ud3ec\ud568\ud558\ub294) \uc0c8\ub85c\uc6b4 \ud3c9\uac00 \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud569\ub2c8\ub2e4\ntest_data = tf.constant([10, 10, 20, 50, 60, 0])\nencoded_data = encoder(indexer(test_data))\nprint(encoded_data)","5c519aa3":"# \ud45c\ubcf8 \ub370\uc774\ud130: 0\uacfc 100,000 \uc0ac\uc774\uc758 10,000\uac1c\uc758 \ubb34\uc791\uc704 \uc815\uc218\ndata = np.random.randint(0, 100000, size=(10000, 1))\n\n# [0, 64] \ubc94\uc704\ub85c \uac12\ub4e4\uc744 \ud574\uc2f1\ud558\uae30 \uc704\ud574 Hashing \uce35\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nhasher = preprocessing.Hashing(num_bins=64, salt=1337)\n\n# \ud574\uc2f1\ub41c \uac12\ub4e4\uc744 one-hot \uc778\ucf54\ub529\ud558\uae30 \uc704\ud574 CategoryEncoding \uce35\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4\nencoder = preprocessing.CategoryEncoding(max_tokens=64, output_mode=\"binary\")\nencoded_data = encoder(hasher(data))\nprint(encoded_data.shape)","1c42dbd1":"# \uce35\uc5d0 adapt\ud558\uae30 \uc704\ud55c \uba87\uac00\uc9c0 \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc815\uc758\ud569\ub2c8\ub2e4\ndata = tf.constant(\n    [\n        \"The Brain is wider than the Sky\",\n        \"For put them side by side\",\n        \"The one the other will contain\",\n        \"With ease and You beside\",\n    ]\n)\n# \"\uc815\uc218\" \ucd9c\ub825 \ubc29\uc2dd\uc73c\ub85c TextVectorization\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ntext_vectorizer = preprocessing.TextVectorization(output_mode=\"int\")\n# `adapt()`\ub97c \ud1b5\ud574 \uc0ac\uc804\uc744 \uc0c9\uc778\ud569\ub2c8\ub2e4\ntext_vectorizer.adapt(data)\n\n# get_vocabulary()\ub97c \ud1b5\ud574 \uc0c9\uc778\ud55c \uc0ac\uc804\uc744 \ubc1b\uc544\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4\nvocab = text_vectorizer.get_vocabulary()\nprint(\"Vocabulary:\", vocab)\n\n# Embedding + LSTM \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninputs = keras.Input(shape=(1,), dtype=\"string\")\nx = text_vectorizer(inputs)\nx = layers.Embedding(input_dim=len(vocab), output_dim=64)(x)\noutputs = layers.LSTM(1)(x)\nmodel = keras.Model(inputs, outputs)\n\n# (\uc54c \uc218 \uc5c6\ub294 \ud1a0\ud070\uc744 \ud3ec\ud568\ud558\ub294) \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4\ntest_data = tf.constant([\"The Brain is deeper than the sea\"])\ntest_output = model(test_data)","d52944d9":"# \uce35\uc5d0 adapt\ud558\uae30 \uc704\ud55c \uba87\uac00\uc9c0 \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc815\uc758\ud569\ub2c8\ub2e4\ndata = tf.constant(\n    [\n        \"The Brain is wider than the Sky\",\n        \"For put them side by side\",\n        \"The one the other will contain\",\n        \"With ease and You beside\",\n    ]\n)\n# \"binary\" \ucd9c\ub825 \ubc29\uc2dd(multi-hot)\uacfc ngram=2(\ubaa8\ub4e0 bigram \uc0c9\uc778)\uc73c\ub85c\n# TextVectorization\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ntext_vectorizer = preprocessing.TextVectorization(output_mode=\"binary\", ngrams=2)\n# `adapt()`\ub97c \ud1b5\ud574 bigram\ub4e4\uc744 \uc0c9\uc778\ud569\ub2c8\ub2e4\ntext_vectorizer.adapt(data)\n\nprint(\n    \"Encoded text:\\n\",\n    text_vectorizer([\"The Brain is deeper than the sea\"]).numpy(),\n    \"\\n\",\n)\n\n# Dense \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninputs = keras.Input(shape=(1,), dtype=\"string\")\nx = text_vectorizer(inputs)\noutputs = layers.Dense(1)(x)\nmodel = keras.Model(inputs, outputs)\n\n# (\uc54c \uc218 \uc5c6\ub294 \ud1a0\ud070\uc744 \ud3ec\ud568\ud558\ub294) \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4\ntest_data = tf.constant([\"The Brain is deeper than the sea\"])\ntest_output = model(test_data)\n\nprint(\"Model output:\", test_output)","f2a906c6":"# \uce35\uc5d0 adapt\ud558\uae30 \uc704\ud55c \uba87\uac00\uc9c0 \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc815\uc758\ud569\ub2c8\ub2e4\ndata = tf.constant(\n    [\n        \"The Brain is wider than the Sky\",\n        \"For put them side by side\",\n        \"The one the other will contain\",\n        \"With ease and You beside\",\n    ]\n)\n# \"tf-idf\" \ucd9c\ub825 \ubc29\uc2dd(TF-IDF \uac00\uc911\uce58\ub97c \uc0ac\uc6a9\ud558\ub294 multi-hot)\uacfc ngram=2(\ubaa8\ub4e0 bigram \uc0c9\uc778)\uc73c\ub85c\n# TextVectorization\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ntext_vectorizer = preprocessing.TextVectorization(output_mode=\"tf-idf\", ngrams=2)\n# `adapt()`\ub97c \ud1b5\ud574 bigram\ub4e4\uc744 \uc0c9\uc778\ud569\ub2c8\ub2e4\ntext_vectorizer.adapt(data)\n\nprint(\n    \"Encoded text:\\n\",\n    text_vectorizer([\"The Brain is deeper than the sea\"]).numpy(),\n    \"\\n\",\n)\n\n# Dense \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4\ninputs = keras.Input(shape=(1,), dtype=\"string\")\nx = text_vectorizer(inputs)\noutputs = layers.Dense(1)(x)\nmodel = keras.Model(inputs, outputs)\n\n# (\uc54c \uc218 \uc5c6\ub294 \ud1a0\ud070\uc744 \ud3ec\ud568\ud558\ub294) \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud638\ucd9c\ud569\ub2c8\ub2e4\ntest_data = tf.constant([\"The Brain is deeper than the sea\"])\ntest_output = model(test_data)\n\nprint(\"Model output:\", test_output)","cff16e09":"\uc774\ub7f0 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c\uc5d0\ub294, \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \uc704\ud574, (\uc704\uc758 \ud14d\uc2a4\ud2b8 \ubd84\ub958 \uc608\uc81c\uc5d0\uc11c \ud588\ub358 \uac83\uc778) \uc785\ub825 \ud30c\uc774\ud504\ub77c\uc778\uc758 \ubd80\ubd84\uc73c\ub85c `TextVectorization` \uce35\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.","c8648846":"### TF-IDF \uac00\uc911\uce58\ub85c ngram\uc758 \ubc00\uc9d1 \ud589\ub82c\ub85c\uc368 \ud14d\uc2a4\ud2b8 \uc778\ucf54\ub529","f8c8c680":"### \ud575\uc2ec \uc804\ucc98\ub9ac \uce35","2c527861":"* `CategoryEncoding` \uce35: \uc815\uc218\ud615 \ubc94\uc8fc\ud615 \ud2b9\uc9d5\ub4e4\uc744 one-hot, multi-hot, \ub610\ub294 TF-IDF \ubc00\uc9d1 \ud45c\ud604\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* `Hashing` \uce35: \"\ud574\uc2f1 \uae30\ubc95\"\uc73c\ub85c\ub3c4 \uc54c\ub824\uc9c4, \ubc94\uc8fc\ud615 \ud2b9\uc9d5 \ud574\uc2f1\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n* `Discretization` \uce35: \uc5f0\uc18d\ud615 \uc218\uce58\ud615 \ud2b9\uc9d5\ub4e4\uc744 \uc815\uc218\ud615 \ubc94\uc8fc\ud615 \ud2b9\uc9d5\ub4e4\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* `StringLookup` \uce35: \ubb38\uc790\uc5f4 \ubc94\uc8fc\ud615 \uac12\ub4e4\uc744 \uc815\uc218\ud615 \uc0c9\uc778\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* `IntegerLookup` \uce35: \uc815\uc218\ud615 \ubc94\uc8fc\ud615 \uac12\ub4e4\uc744 \uc815\uc218\ud615 \uc0c9\uc778\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* `CategoryCrossing` \uce35: \ubc94\uc8fc\ud615 \ud2b9\uc9d5\ub4e4\uc744 \ub3d9\uc2dc \ubc1c\ud604 \ud2b9\uc9d5\ub4e4\ub85c \uacb0\ud569\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9cc\uc57d \ud2b9\uc9d5 \uac12 \"a\"\uc640 \"b\"\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uacb0\ud569 \ud2b9\uc9d5 \"a\uc640 b\uac00 \ub3d9\uc2dc\uc5d0 \uc874\uc7ac\ud55c\ub2e4\"\ub97c \uacf5\uae09\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","df40cc17":"* `RandomCrop` \uce35\n* `RandomFlip` \uce35\n* `RandomTranslation` \uce35\n* `RandomRotation` \uce35\n* `RandomZoom` \uce35\n* `RandomHeight` \uce35\n* `RandomWidth` \uce35","df79150d":"\uc120\ud0dd\uc9c0 2\ub97c \uc0ac\uc6a9\ud574 \uc9c4\ud589\ud55c\ub2e4\uace0 \ud574\ub3c4, \ucd94\ud6c4\uc5d0 \uc804\ucc98\ub9ac \uce35\ub4e4\uc744 \ud3ec\ud568\ud560 \ucd94\ub860\ub9cc \uc218\ud589\ud558\ub294 \uc885\ub2e8 \uac04 \ubaa8\ub378\uc744 \ub0b4\ubcf4\ub0b4\uace0 \uc2f6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 \uc218\ud589\ud558\ub294 \ud575\uc2ec \uc7a5\uc810\uc740 **\ubaa8\ub378\uc744 \ud734\ub300 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e0\ub2e4**\ub294 \uac83\uacfc **[\ud559\uc2b5\/\uc81c\uacf5 \uc65c\uace1](https:\/\/developers.google.com\/machine-learning\/guides\/rules-of-ml#training-serving_skew)\uc744 \uc904\uc774\uac8c \ub3c4\uc640\uc900\ub2e4**\ub294 \uac83\uc785\ub2c8\ub2e4.","e752cb02":"\ub9cc\uc57d \ucd08\uae30\uc5d0 \uc804\ucc98\ub9ac \uce35\ub4e4\uc744 [`tf.data`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data) \ud30c\uc774\ud504\ub77c\uc778\uc5d0 \ub123\uc5c8\ub2e4\uba74, \uc804\ucc98\ub9ac\ub97c \ubb36\ub294 \ucd94\ub860 \ubaa8\ub378\uc744 \ub0b4\ubcf4\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \uc804\ucc98\ub9ac \uce35\ub4e4\uacfc \ud559\uc2b5 \ubaa8\ub378\uc744 \uc787\ub294 \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4:","da72def6":"[\ubc14\ub2e5\uc5d0\uc11c \ubd80\ud130 \ud14d\uc2a4\ud2b8 \ubd84\ub958](https:\/\/keras.io\/examples\/nlp\/text_classification_from_scratch\/) \uc608\uc81c\uc5d0\uc11c `Embedding` \ubc29\uc2dd\uacfc \uacb0\ud569\ub41c `TextVectorization` \uce35\uc744 \ub3d9\uc791 \uc18d\uc5d0\uc11c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","fc058a52":"\uc774 \uce35\ub4e4\uc740 \uc774\ubbf8\uc9c0 \ubaa8\ub378\uc758 \uc785\ub825\ub4e4\uc744 \ud45c\uc900\ud654\ud558\uae30 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4.","771582a9":"\uc774\uac83\uc740 `Dense` \uce35\uc5d0 \uc804\ub2ec\ub418\ub294 \ud14d\uc2a4\ud2b8\ub97c \uc804\ucc98\ub9ac\ud574\uc57c \ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.","855a1ce8":"\ubaa8\ub4e0 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uac00 \ubaa8\ub378\uc758 \uc77c\ubd80\ub77c\uba74, \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc740 \uac01 \ud2b9\uc9d5\ub4e4\uc774 \uc5b4\ub5bb\uac8c \uc778\ucf54\ub529 & \ud45c\uc900\ud654\ub418\uae30\ub97c \uae30\ub300\ud558\ub294\uc9c0\uc5d0 \ub300\ud574 \uc54c\uace0 \uc788\uc9c0 \uc54a\uc544\ub3c4 \ubaa8\ub378\uc744 \ubd88\ub7ec\uc624\uace0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ucd94\ub860 \ubaa8\ub378\uc740 \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\ub098 \uc6d0\ubcf8 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc744 \uac83\uc774\uace0, \ubaa8\ub378\uc758 \uc0ac\uc6a9\uc790\ub4e4\uc774 \ud14d\uc2a4\ud2b8\uc5d0 \ub300\ud574 \uc0ac\uc6a9\ub41c \ud1a0\ud070\ud654 \uacc4\ud68d, \ubc94\uc8fc\ud615 \ud2b9\uc9d5\ub4e4\uc5d0 \ub300\ud574 \uc0ac\uc6a9\ub41c \uc0c9\uc778 \uacc4\ud68d, \uc774\ubbf8\uc9c0 \ud53d\uc140\uac12\ub4e4\uc774 `[-1, +1]`\uc774\ub098 `[0, 1]`\ub85c \ud45c\uc900\ud654\ub418\uc5c8\ub294\uc9c0 \uc5ec\ubd80 \ub4f1 \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \uc54c\ub3c4\ub85d \uc694\uad6c\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 TensorFlow.js\uc640 \uac19\uc740 \ub2e4\ub978 \ub7f0\ud0c0\uc784\uc5d0 \ubaa8\ub378\uc744 \ub0b4\ubcf4\ub0bc \ub54c \ud2b9\ubcc4\ud558\uac8c \uac15\ub825\ud569\ub2c8\ub2e4: JavaScript\uc5d0\uc11c \uc804\ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc7ac\uad6c\ud615\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4.","beb20d89":"`adapt()` \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \ud559\uc2b5 \ub370\uc774\ud130\uc5d0 \uc804\ucc98\ub9ac \uce35\uc744 \ub178\ucd9c\uc2dc\ud0b4\uc73c\ub85c\uc368 \uc0c1\ud0dc\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","c9518d23":"### \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \uc99d\uac15 \uce35","a8688e8d":"\uc774\uac83\uc740 `Dense` \uce35\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ub118\uae30\uae30 \uc804\uc5d0 \uc804\ucc98\ub9ac\ud558\ub294 \ub610\ub2e4\ub978 \ubc29\ubc95\uc785\ub2c8\ub2e4.","2abf454d":"### \uc815\uc218\ud615 \ubc94\uc8fc\ud615 \ud2b9\uc9d5\uc5d0 \ud574\uc2f1 \uae30\ubc95 \uc801\uc6a9","e0769a65":"[\ubc14\ub2e5\uc5d0\uc11c \ubd80\ud130 \uc774\ubbf8\uc9c0 \ubd84\ub958](https:\/\/keras.io\/examples\/vision\/image_classification_from_scratch\/) \uc608\uc81c\uc5d0\uc11c \ube44\uc2b7\ud55c \uc124\uc815 \ud65c\ub3d9\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","b517965d":"\uba87\uac1c\uc758 \uc804\ucc98\ub9ac \uce35\ub4e4\uc740 \ud559\uc2b5 \ub370\uc774\ud130\uc758 \ud45c\ubcf8\uc744 \uae30\ubc18\uc73c\ub85c \uacc4\uc0b0\ub418\uc57c \ud558\ub294 \ub0b4\ubd80 \uc0c1\ud0dc\ub97c \uac00\uc9d1\ub2c8\ub2e4. \uc0c1\ud0dc\ub97c \uac00\uc9c0\ub294 \uc804\ucc98\ub9ac \uce35\ub4e4\uc758 \ubaa9\ub85d\uc740:","a8bce006":"### multi-hot \uc778\ucf54\ub529\uc73c\ub85c ngram\uc758 \ubc00\uc9d1 \ud589\ub82c\ub85c\uc368 \ud14d\uc2a4\ud2b8 \uc778\ucf54\ub529","0cd37fbf":"Keras \uc804\ucc98\ub9ac \uce35 API\ub294 \uac1c\ubc1c\uc790\ub4e4\uc774 Keras \uace0\uc720\uc758 \uc785\ub825 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub9cc\ub4e4 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \uc774 \uc785\ub825 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ub4e4\uc740 Keras\uac00 \uc544\ub2cc \uc791\uc5c5 \ud750\ub984 \uc548\uc5d0\uc11c \ub3c5\ub9bd\uc801\uc778 \uc0ac\uc804 \ucc98\ub9ac \ucf54\ub4dc\ub85c\uc368 \uc0ac\uc6a9\ub418\uace0, \uc9c1\uc811\uc801\uc73c\ub85c Keras \ubaa8\ub378\ub4e4\uacfc \uacb0\ud569\ub418\uace0, Keras SavedModel\uc758 \uc77c\ubd80\ub85c\uc368 \uc218\ucd9c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","0f8c59a6":"## Keras \uc804\ucc98\ub9ac \uce35","96a6f6df":"\uc774 \ubc29\ubc95\uc73c\ub85c\ub294, \uc804\ucc98\ub9ac\uac00 \uae30\uae30 \uc704\uc5d0\uc11c, \ub098\uba38\uc9c0 \ubaa8\ub378 \uc2e4\ud589\uacfc \ub3d9\uae30\ud654\ub418\uc5b4 \uc77c\uc5b4\ub0a0 \uac83\uc774\uba70, \uc774\ub294 GPU \uac00\uc18d\uc5d0 \uc774\uc775\uc774 \ub420 \uac83\uc774\ub77c\ub294 \ub73b\uc785\ub2c8\ub2e4. GPU \uc704\uc5d0\uc11c \ud559\uc2b5\uc2dc\ud0a4\uace0 \uc788\ub2e4\uba74, \uc774\uac83\uc740 `Normalization` \uce35\uc5d0 \ub300\ud574, \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac\uc640 \ub370\uc774\ud130 \uc99d\uac15 \uce35\ub4e4\uc5d0 \ub300\ud574 \ucd5c\uc120\uc758 \uc120\ud0dd\uc785\ub2c8\ub2e4.","44280a92":"[\ubc14\ub2e5\uc5d0\uc11c \ubd80\ud130 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130 \ubd84\ub958](https:\/\/keras.io\/examples\/structured_data\/structured_data_classification_from_scratch\/) \uc608\uc81c\uc5d0\uc11c `IntegerLookup`\uacfc `CategoryEncoding` \uce35\ub4e4\uc744 \uc791\ub3d9\ud558\ub294 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","cc13d528":"## `adapt()` \uba54\uc18c\ub4dc","9432920a":"## \ucd94\ub860 \uae30\uac04\uc5d0 \ubaa8\ub378 \uc548\uc5d0\uc11c \uc804\ucc98\ub9ac \uc218\ud589\uc758 \uc7a5\uc810","b2e05073":"### \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \uc99d\uac15 (\uae30\uae30 \uc704\uc5d0\uc11c)","a4938d37":"`adapt()` \uba54\uc18c\ub4dc\ub294 Numpy \ubc30\uc5f4\uc774\ub098 [`tf.data.Dataset`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset) \uac1d\uccb4 \ubaa8\ub450 \ubc1b\uc2b5\ub2c8\ub2e4. `StringLookup`\uacfc `TextVectorization`\uc758 \uacbd\uc6b0\uc5d0, \ubb38\uc790\uc5f4\ub4e4\uc758 \ubaa9\ub85d\uc744 \ub118\uaca8\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","41cac302":"Keras \uc804\ucc98\ub9ac \uce35\uc73c\ub85c, \uc644\uc804\ud788 \uc885\ub2e8\ud558\ub294 \ubaa8\ub378\ub4e4(\uac00\uacf5\ub418\uc9c0 \uc54a\uc740 \uc774\ubbf8\uc9c0\ub098 \uac00\uacf5\ub418\uc9c0 \uc54a\uc740 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc73c\uba70, \uc790\uccb4\uc801\uc778 \ud2b9\uc9d5 \ud45c\uc900\ud654\ub098 \ud2b9\uc9d5 \uac12 \uc0c9\uc778\uc744 \ub2e4\ub8e8\ub294 \ubaa8\ub378\ub4e4)\uc744 \ub9cc\ub4e4\uace0 \uc218\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","71eae959":"```python\ninputs = keras.Input(shape=input_shape)\nx = preprocessing_layer(inputs)\noutputs = training_model(x)\ninference_model = keras.Model(inputs, outputs)\n```","6d57736f":"* `Resizing` \uce35: \uc774\ubbf8\uc9c0 \ubb36\uc74c\uc744 \ubaa9\ud45c \ud06c\uae30\ub85c \uc870\uc808\ud569\ub2c8\ub2e4.\n* `Rescaling` \uce35: \uc774\ubbf8\uc9c0 \ubb36\uc74c\uc758 \uac12\uc744 \uc7ac\uc870\uc815\ud558\uace0 \uc62e\uae41\ub2c8\ub2e4(\uc608\ub97c \ub4e4\uc5b4, `[0, 255]` \ubc94\uc704\uc758 \uc785\ub825\uc5d0\uc11c `[0, 1]` \ubc94\uc704\uc758 \uc785\ub825\uc73c\ub85c \uac11\ub2c8\ub2e4).\n* `CentorCrop` \uce35: \uc774\ubbf8\uc9c0 \ubb36\uc74c\uc758 \uc911\uc2ec \uc870\uac01\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.","39d7665b":"* `TextVectorization` \uce35: \uac00\uacf5\ub418\uc9c0 \uc54a\uc740 \ubb38\uc790\uc5f4\uc744 `Embedding` \uce35\uc774\ub098 `Dense` \uce35\uc5d0 \uc758\ud574 \uc77d\ud790 \uc218 \uc788\ub294 \uc778\ucf54\ub529\ub41c \ud45c\ud604\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* `Normalization` \uce35: \uc785\ub825 \ud2b9\uc9d5\ub4e4\uc758 \ud2b9\uc9d5\ubcc4 \ud45c\uc900\ud654\ub97c \uc218\ud589\ud569\ub2c8\ub2e4.","7492a955":"\uc774\ubbf8\uc9c0 \uc99d\uac15 \uce35\ub4e4\uc740 \ud559\uc2b5 \ub3d9\uc548\uc5d0\ub9cc (`Dropout` \uce35\uacfc \uc720\uc0ac\ud558\uac8c) \ud65c\uc131\ud654\ub41c\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","0c985485":"\uc804\ucc98\ub9ac \uce35\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:","aedd7565":"0\ubc88\uc9f8 \uc0c9\uc778\uc740 (\ube48 \ubb38\uc790\uc5f4 `\"\"`\ub85c\uc368 \ud2b9\uc815\ud574\uc57c \ud558\ub294)\uacb0\uce21\uac12\ub4e4\uc744 \uc704\ud574 \ubcf4\uc874\ub418\uba70, 1\ubc88\uc9f8 \uc0c9\uc778\uc740 \uc0ac\uc804 \uc678 \uac12\ub4e4(`adapt()` \ub3d9\uc548 \ubcf4\uc774\uc9c0 \uc54a\uc740 \uac12\ub4e4)\uc744 \uc704\ud574 \ubcf4\uc874\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 `IntegerLookup`\uc758 `mask_value`\uc640 `oov_value` \uc0dd\uc131\uc790 \uc778\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f54b8c0e":"\uacb0\uc815\uc801\uc73c\ub85c, \uc774 \uce35\ub4e4\uc740 **\ud559\uc2b5 \ubd88\uac00\ub2a5**\ud569\ub2c8\ub2e4. \uc774\ub4e4\uc758 \uc0c1\ud0dc\ub294 \ud559\uc2b5 \ub3d9\uc548 \uc124\uc815\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4; **\ud559\uc2b5 \uc774\uc804\uc5d0** \uc124\uc815\ub418\uc5b4\uc57c \ud558\uba70, \uc774 \ub2e8\uacc4\ub294 \"\uc801\uc751\"\uc774\ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4.","e172157d":"\uc774\uac83\uc740 `TextVectorization`\uacfc \ubaa8\ub4e0 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uce35\ub4e4\uc5d0 \ub300\ud574 \ucd5c\uc120\uc758 \uc120\ud0dd\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 CPU \uc704\uc5d0\uc11c \ud559\uc2b5\uc744 \uc2dc\ud0a4\uace0 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac \uce35\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uc88b\uc740 \uc120\ud0dd\uc9c0\uc785\ub2c8\ub2e4.","15be4045":"**\uc120\ud0dd\uc9c0 1**: \ub2e4\uc74c\uacfc \uac19\uc774, \ubaa8\ub378\uc758 \uc77c\ubd80\ub85c \ub9cc\ub4ed\ub2c8\ub2e4:","f4a41dbe":"[\ubc14\ub2e5\uc5d0\uc11c \ubd80\ud130 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130 \ubd84\ub958](https:\/\/keras.io\/examples\/structured_data\/structured_data_classification_from_scratch\/) \uc608\uc81c\uc5d0\uc11c `StringLookup`\uacfc `CategoryEncoding` \uce35\ub4e4\uc744 \uc791\ub3d9\ud558\ub294 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","dca64978":"\ub9cc\uc57d \uac01 \uac12\uc774 \ub370\uc774\ud130\uc5d0\uc11c \uc624\uc9c1 \uba87\ubc88\ub9cc \ub098\ud0c0\ub098\ub294 \ub9ce\uc740 \ub2e4\ub978 \uac12\ub4e4(\ub300\ub7b5 10e3 \uc774\uc0c1)\uc744 \uac00\uc9c8 \uc218 \uc788\ub294 \ubc94\uc8fc\ud615 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ud2b9\uc9d5\uac12\ub4e4\uc744 \uc0c9\uc778\ud558\uace0 one-hot \uc778\ucf54\ub529\uc744 \ud558\ub294 \uac83\uc740 \ube44\uc2e4\uc6a9\uc801\uc774\uace0 \ube44\ud6a8\uc728\uc801\uc774\uac8c \ub429\ub2c8\ub2e4. \ub300\uc2e0, \"\ud574\uc2f1 \uae30\ubc95\"\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc740 \ubc1c\uc0c1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uac12\uc744 \uace0\uc815\ub41c \ud06c\uae30\uc758 \ubca1\ud130\ub85c \ud574\uc2f1\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ud2b9\uc9d5 \uacf5\uac04\uc758 \ud06c\uae30\ub97c \uad00\ub9ac\ud560 \uc218 \uc788\uac8c \uc720\uc9c0\ud558\uace0 \uba85\ubc31\ud55c \uc0c9\uc778\uc5d0 \ub300\ud55c \ud544\uc694\uc131\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4.","3919bd9a":"### \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uce35","cd690309":"## \ube60\ub978 \uc0ac\uc6a9\ubc95","1468264b":"### \ud14d\uc2a4\ud2b8\ub97c \ud1a0\ud070 \uc0c9\uc778\ub4e4\uc758 \uc21c\uc5f4\ub85c \uc778\ucf54\ub529","485ecbae":"\uc774 \uce35\ub4e4\uc740 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130 \uc778\ucf54\ub529\uacfc \ud2b9\uc9d5 \uacf5\ud559\uc744 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4.","c3b81f0c":"* `TextVectorization`: \ubb38\uc790\uc5f4 \ud1a0\ud070\uacfc \uc815\uc218\ud615 \uc0c9\uc778 \uc0ac\uc774\uc758 \ub300\uc751\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* `Normalization`: \ud2b9\uc9d5\uc758 \ud3c9\uade0\uacfc \ud45c\uc900 \ud3b8\ucc28\ub97c \uac00\uc9d1\ub2c8\ub2e4.\n* `StringLookup`\uacfc `IntegerLookup`: \uc785\ub825 \uac12\uacfc \ucd9c\ub825 \uc0c9\uc778 \uc0ac\uc774\uc758 \ub300\uc751\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* `CategoryEncoding`: \uc785\ub825 \uac12\uc758 \uc0c9\uc778\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* `Discretization`: \ubc14\uad6c\ub2c8 \uacbd\uacc4 \uac12\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uac00\uc9d1\ub2c8\ub2e4.","bae7d7ac":"## \ubaa8\ub378 \uc774\uc804 \ud639\uc740 \uc548\uc5d0\uc11c \ub370\uc774\ud130 \uc804\ucc98\ub9ac","64ffa9e7":"\uc774\uac83\uc740 `Embedding` \uce35\uc5d0 \ub118\uaca8\uc9c0\ub294 \ud14d\uc2a4\ud2b8\ub97c \uc5b4\ub5bb\uac8c \uc804\ucc98\ub9ac\ud574\uc57c \ud558\ub294\uc9c0 \uc785\ub2c8\ub2e4.","5e5ffcb5":"### one-hot \uc778\ucf54\ub529\uc744 \ud1b5\ud55c \uc815\uc218\ud615 \ubc94\uc8fc\ud615 \ud2b9\uc9d5 \uc778\ucf54\ub529","8c1c0e0a":"### \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac \uce35","c29c18a8":"### \uc218\uce58\ud615 \ud2b9\uc9d5 \uc815\uaddc\ud654","ca9c2a19":"\uc774 \uce35\ub4e4\uc740 \uc774\ubbf8\uc9c0 \ubb36\uc74c\uc5d0 \ubb34\uc791\uc704 \uc99d\uac15 \ubcc0\ud658\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4. \uc624\uc9c1 \ud559\uc2b5 \ub3d9\uc548\uc5d0\ub9cc \ud65c\uc131\ud654\ub429\ub2c8\ub2e4.","af50eb49":"\uc5ec\uae30 \uc0ac\uc804 \uacc4\uc0b0\ub41c \uc0ac\uc804\uc73c\ub85c `StringLookup` \uce35\uc744 \uc0dd\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4:","451aa846":"\uc774 \ubc29\ubc95\uc73c\ub85c\ub294, \uc804\ucc98\ub9ac\uac00 CPU \uc704\uc5d0\uc11c, \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc77c\uc5b4\ub0a0 \uac83\uc774\uba70, \ubaa8\ub378\uc5d0 \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc784\uc2dc \uc800\uc7a5\ub420 \uac83\uc785\ub2c8\ub2e4.","e4ad0a07":"**\uc120\ud0dd\uc9c0 2**: \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\uc758 \ubb36\uc74c\uc744 \ub0b4\ub193\uc744 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc5bb\uae30 \uc704\ud558\uc5ec, \ub2e4\uc74c\uacfc \uac19\uc774, [`tf.data.Dataset`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset)\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4:","2770c4e2":"## \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc804\ucc98\ub9ac \uce35","b299f9ff":"# \uc804\ucc98\ub9ac \uce35 \ub2e4\ub8e8\uae30","4953d21c":"```python\ndataset = dataset.map(\n    lambda x, y: (preprocessing_layer(x), y))\n```","384f6b0f":"### one-hot \uc778\ucf54\ub529\uc744 \ud1b5\ud55c \ubb38\uc790\uc5f4 \ubc94\uc8fc\ud615 \ud2b9\uc9d5 \uc778\ucf54\ub529","ddc0aa29":"0\ubc88\uc9f8 \uc0c9\uc778\uc740 (\ube48 \ubb38\uc790\uc5f4 `\"\"`\ub85c\uc368 \ud2b9\uc815\ud574\uc57c \ud558\ub294)\uacb0\uce21\uac12\ub4e4\uc744 \uc704\ud574 \ubcf4\uc874\ub418\uba70, 1\ubc88\uc9f8 \uc0c9\uc778\uc740 \uc0ac\uc804 \uc678 \uac12\ub4e4(`adapt()` \ub3d9\uc548 \ubcf4\uc774\uc9c0 \uc54a\uc740 \uac12\ub4e4)\uc744 \uc704\ud574 \ubcf4\uc874\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 `StringLookup`\uc758 `mask_token`\uacfc `oov_token` \uc0dd\uc131\uc790 \uc778\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","8032ad08":"\ucd94\uac00\uc801\uc73c\ub85c, \uc801\uc751 \uac00\ub2a5\ud55c \uce35\ub4e4\uc740 \uc0dd\uc131\uc790 \uc778\uc790\ub098 \uac00\uc911\uce58 \ub300\uc785\uc744 \ud1b5\ud574 \uc0c1\ud0dc\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\ub294 \uc120\ud0dd\uc9c0\ub97c \ud56d\uc0c1 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ub9cc\uc57d \ub300\uc0c1 \uc0c1\ud0dc\uac12\uc774 \uce35 \uc0dd\uc131 \uae30\uac04\uc5d0 \uc54c\ub824\uc838 \uc788\uac70\ub098, `adapt()` \ud638\ucd9c\uc758 \ubc16\uc5d0\uc11c \uacc4\uc0b0\ub41c\ub2e4\uba74, \uadf8\ub4e4\uc740 \uce35\uc758 \ub0b4\ubd80 \uacc4\uc0b0\uc5d0 \uae30\ub300\uc9c0 \uc54a\uace0 \uc124\uc815\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `TextVectorization`, `StringLookup`, \ub610\ub294 `IntegerLookup` \uce35\ub4e4\uc5d0 \ub300\ud55c \uc678\ubd80 \uc0ac\uc804 \ud30c\uc77c\ub4e4\uc774 \uc774\ubbf8 \uc874\uc7ac\ud55c\ub2e4\uba74, \uadf8\uac83\ub4e4\uc740 \uce35\uc758 \uc0dd\uc131\uc790 \uc778\uc790\uc5d0 \uc0ac\uc804 \ud30c\uc77c\uc5d0 \ub300\ud55c \uacbd\ub85c\ub97c \ub118\uaca8\uc90c\uc73c\ub85c\uc368 \uac80\uc0c9\ud45c\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \ubd88\ub7ec\uc640\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","5058336d":"```python\ninputs = keras.Input(shape=input_shape)\nx = preprocessing_layer(inputs)\noutputs = rest_of_the_model(x)\nmodel = keras.Model(inputs, outputs)\n```"}}