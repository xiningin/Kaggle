{"cell_type":{"f14883b6":"code","c69ac630":"code","a93d22ab":"code","54e51bba":"code","b4c10bb3":"code","a4e3bc20":"code","d52aa311":"code","43d9d05e":"code","818c8be6":"code","0cea309f":"code","1e1cdcf4":"code","b1d415aa":"code","08bc1d5f":"code","0dae5d47":"code","d31ede46":"code","c13f007e":"code","09439f40":"code","373db1cb":"code","22c5dbe1":"code","6901ff6a":"code","b4d2e99e":"code","d836efd0":"code","333bf1e0":"code","685bd552":"code","fdcfe771":"code","0425f9c9":"code","950115a1":"code","57a0c43a":"code","b35ee8d8":"code","0ff119ab":"code","1a647e17":"code","b8394b10":"code","c3f03d00":"code","5004769f":"code","a897bdfa":"code","7d0854d3":"code","12aee370":"code","d7958cc9":"code","c1a4d79e":"code","bf44f13f":"code","417123f5":"code","9514d393":"code","5844f786":"code","3139b98b":"code","cca52ed9":"code","11b15bc7":"code","918940a8":"code","9d3ec23b":"code","45134d52":"code","470d62ef":"code","5bbbab41":"code","89fbde69":"code","a19c41d8":"code","61a4d616":"code","ca515e1f":"code","1ff44af1":"code","404304ce":"code","f88e4301":"code","e5dcc7cb":"code","697e9169":"code","5970fb0b":"code","9fedc1d6":"code","d107a93c":"code","6e1f30bc":"code","afb4e5b6":"code","9ee3e708":"code","441ddc4f":"code","1d871f68":"code","859a1b26":"code","d887a03c":"code","0229e92a":"code","2781f030":"code","bed0cd91":"code","800d16e3":"code","b3bcb155":"code","3cc4119b":"code","314e64e6":"code","9a176131":"code","ba8c4ad5":"code","74096468":"code","cfcc33f6":"code","845373de":"markdown","e27b5071":"markdown","6691d094":"markdown","1bdffff0":"markdown","12eb37d8":"markdown","d5523cd1":"markdown","787d9e18":"markdown","cfda0210":"markdown","77d5b2ba":"markdown","66982c01":"markdown","016432b5":"markdown","4bb1fbb6":"markdown","a936b1c2":"markdown","afdc71d9":"markdown","6835d2bd":"markdown","b0ac5793":"markdown","346079f8":"markdown","3aa6079c":"markdown","d89ec634":"markdown","7b642460":"markdown","1b901261":"markdown","2341b946":"markdown","159edb26":"markdown","b5221b46":"markdown","a456c55e":"markdown"},"source":{"f14883b6":"import matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib\nimport re\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom IPython.display import Markdown, display\nimport random","c69ac630":"%config Completer.use_jedi = False\nsns.set(rc={'figure.figsize':(18,10)})\nsns.set_style({'axes.facecolor':'white', 'grid.color': '.8', 'font.family':'Times New Roman'})\n\n# Colors\ncyan = '#00FFD1'\nred = '#FF007D'\nprussian = '#0075FF'\ngreen = '#EEF622'\nyellow = '#FFF338'\nviolet = '#9B65FF'\norange = '#FFA500'\nblue = '#00EBFF'\nvermillion = '#FF6900'\nred2 = '#FF2626'\nseagreen = '#28FFBF'\ngreen2 = '#FAFF00'\nnavyblue = '#04009A'\ndarkgreen = '#206A5D'\nlightgreen = '#CCF6C8'\npink = '#F35588'\nmauve = '#BAABDA'\nlightblue = '#1CC5DC'\nmustard = '#FDB827'\ndeeppurple = '#723881'\n\ncolor_list = [cyan,red,prussian,green,violet,orange,yellow,blue,vermillion,red2,seagreen,green2,navyblue,darkgreen,lightgreen,pink,mauve,lightblue,mustard,deeppurple]\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=color_list)","a93d22ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54e51bba":"def printmd(string):\n    display(Markdown(string))","b4c10bb3":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","a4e3bc20":"train.head()","d52aa311":"test.head()","43d9d05e":"train.shape, test.shape","818c8be6":"# To analyse presence of any disparities and\/or major factors\nsurvived_df = train[train['Survived']==1]\ndeceased_df = train[train['Survived']==0]","0cea309f":"train.isnull().sum()","1e1cdcf4":"test.isnull().sum()","b1d415aa":"# train = train.drop(['Cabin'],axis=1)\n# test = test.drop(['Cabin'],axis=1)","08bc1d5f":"# 20% Age values are missing\ntrain['Age'].isnull().sum() ","0dae5d47":"sns.displot(data=train['Age'],kde=True,height=6.5,color=random.choice(color_list));","d31ede46":"plt.figure(figsize=(12,7))\nsns.kdeplot(survived_df['Age'],label = 'Survived', shade = True, color=cyan)\nsns.kdeplot(deceased_df['Age'],label = 'Deceased', shade = True, color=red)\nplt.title('Age')\nplt.xlabel('Age of Passengers')","c13f007e":"train['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(train['Age'].mean())","09439f40":"# 0.2% Embarked values are missing\ntrain['Embarked'].isnull().sum()","373db1cb":"train['Embarked'].value_counts()","22c5dbe1":"train['Embarked'] = train['Embarked'].fillna('S')","6901ff6a":"train.describe()","b4d2e99e":"sns.displot(train['Fare'],bins=20,color=random.choice(color_list));","d836efd0":"plt.figure(figsize=(12,7))\nsns.kdeplot(survived_df['Fare'],label = 'Survived', shade = True, color=cyan)\nsns.kdeplot(deceased_df['Fare'],label = 'Deceased', shade = True, color=red)\nplt.title('Fare')\nplt.xlabel('Fare of Passengers')","333bf1e0":"test['Fare'] = test['Fare'].fillna(train['Fare'].mode()[0])","685bd552":"train.isnull().sum()","fdcfe771":"test.isnull().sum()","0425f9c9":"train['Cabin'].isnull().sum()","950115a1":"nonNullCabin = train[~train['Cabin'].isnull()] # non null Cabin values","57a0c43a":" # Non null cabin values that Survived\nlen(nonNullCabin[nonNullCabin['Survived']==1])","b35ee8d8":" # Non null cabin values that didn't  # Non null cabin values that Survive\nlen(nonNullCabin[nonNullCabin['Survived']==0])","0ff119ab":"survived_cabins = list(nonNullCabin[nonNullCabin['Survived']==1]['Cabin'].value_counts().index)\ndeceased_cabins = list(nonNullCabin[nonNullCabin['Survived']==0]['Cabin'].value_counts().index)","1a647e17":"# Common Cabins\nc=0\nfor x in survived_cabins:\n    if(x in deceased_cabins):\n        c=c+1\nprint(c)","b8394b10":"print(survived_cabins)","c3f03d00":"print(deceased_cabins)","5004769f":"train['Family'] = train['SibSp']+train['Parch']\ntest['Family'] = test['SibSp']+test['Parch']\n# train=train.drop(['SibSp','Parch'],axis=1)\n# test=test.drop(['SibSp','Parch'],axis=1)","a897bdfa":"train.head()","7d0854d3":"Ticket_temp_train = train['Ticket'].value_counts()\nTicket_temp_test = test['Ticket'].value_counts()","12aee370":"Ticket_temp_train_df = pd.DataFrame({'ticket':Ticket_temp_train.index,'freq':Ticket_temp_train.values})\nTicket_temp_test_df = pd.DataFrame({'ticket':Ticket_temp_test.index,'freq':Ticket_temp_test.values})","d7958cc9":"Ticket_temp_train_df.head(8)","c1a4d79e":"train.set_index('PassengerId',inplace=True)","bf44f13f":"train.columns","417123f5":"train = train[['Survived','Name','Sex','Ticket','Age','Fare','Pclass','Embarked','Cabin','Family','SibSp', 'Parch']]","9514d393":"# This function creates a mechanism for us to parse different ranges of frequency (from the 'freq' column of the above\n# newly created DataFrames) and obatin individual Tables for Analysis\n\n\ndef analyse_tickets(freq_to_stop_at,dataframe):\n    flag = 'none'\n    for i in range(0,len(Ticket_temp_train_df.iloc[:,:])): # iterating a number range\n        \n        ticket_name = Ticket_temp_train_df.iloc[i,0]\n        ticket_freq = Ticket_temp_train_df.iloc[i,1]\n\n        if(flag != ticket_freq and ticket_freq != freq_to_stop_at-1):\n            flag=ticket_freq\n            printmd('---')\n            printmd('### **Ticket frequency:** **%d**'%(ticket_freq))\n            print('\\n')\n            \n    \n        if (ticket_freq!=freq_to_stop_at-1):\n            printmd(' #### *Ticket Name:* **%s**'%(ticket_name))\n            display(dataframe.loc[dataframe['Ticket']==ticket_name])\n            print('\\n\\n')# End of one group\n        \n        else:\n            break\nprint('\\n')\nprintmd('---')","5844f786":"analyse_tickets(2,train) ## Enter frequency to stop at and dataframe to work with. For ex: (6,train)","3139b98b":"train.loc[1,'Ticket']","cca52ed9":"train","11b15bc7":"# c = -1\n# tick_1 = {}\n# for i in range(0,len(train['Ticket'])):\n#     c=c+1\n#     match = re.search('^[a-zA-Z]+',train.iloc[i,3])\n#     if (match):\n#         tick_1[c] = match.group()","918940a8":"# tick1_s = pd.Series(tick_1)\n# tick1_s.head()","9d3ec23b":"tick_prefix_train = []\nfor i in range(0,len(train['Ticket'])):\n    match = re.search('^[a-zA-Z]+',train.iloc[i,3])\n    if (match):\n        tick_prefix_train.append(match.group())\n    else:\n        tick_prefix_train.append('Null')\n        \n        \ntick_prefix_test = []\nfor i in range(0,len(test['Ticket'])):\n    match = re.search('^[a-zA-Z]+',test.iloc[i,7])\n    if (match):\n        tick_prefix_test.append(match.group())\n    else:\n        tick_prefix_test.append('Null')","45134d52":"train['Ticket_prefix'] = tick_prefix_train\ntest['Ticket_prefix'] = tick_prefix_test","470d62ef":"train.head()","5bbbab41":"Ticket_pre_df = pd.DataFrame({'prefix':train['Ticket_prefix'].value_counts().index, 'freq':train['Ticket_prefix'].value_counts().values})\nTicket_pre_df.head(15)","89fbde69":"def analyse_prefix(freq_to_stop_at,dataframe):\n    # booll - enter True if you want null too\n    flag = 'none'\n    for i in range(1,len(Ticket_pre_df)): # iterating a number range\n        ticket_name = Ticket_pre_df.iloc[i,0]\n        ticket_freq = Ticket_pre_df.iloc[i,1]\n\n        if(flag != ticket_freq):\n            flag=ticket_freq\n            printmd('---')\n            printmd('### Ticket frequency: **%d**'%(int(ticket_freq)))\n            \n    \n        if (ticket_freq!=freq_to_stop_at-1):\n            printmd(' #### *Ticket Name:* **%s**'%(ticket_name))\n            display(dataframe.loc[dataframe['Ticket_prefix']==ticket_name])\n            print('\\n\\n')# End of one number\n        \n        else:\n            break","a19c41d8":"analyse_prefix(11,train) # first arg doesn't work here ##change","61a4d616":"for i in range(0,len(Ticket_temp_train_df.iloc[:,:])):\n    if (Ticket_temp_train_df.loc[i,'freq'] == 1):\n        train['Ticket'] = train['Ticket'].replace([ Ticket_temp_train_df.loc[i,'ticket'] ],'UniqueTicketPrefix')\n        \nfor i in range(0,len(Ticket_temp_test_df.iloc[:,:])):\n    if (Ticket_temp_test_df.loc[i,'freq'] == 1):\n        test['Ticket'] = test['Ticket'].replace([ Ticket_temp_test_df.loc[i,'ticket'] ],'UniqueTicketPrefix')","ca515e1f":"train.head()","1ff44af1":"train['Ticket'].value_counts()","404304ce":"name_titles_train = []\nfor i in range(0,len(train['Name'])):\n    title = (train.iloc[i,1].split(', ')[1]).split(' ')[0]\n    name_titles_train.append(title)\n\n\nname_titles_test = []\nfor i in range(0,len(test['Name'])):\n    title = (test.iloc[i,2].split(', ')[1]).split(' ')[0]\n    name_titles_test.append(title)","f88e4301":"train['Title'] = name_titles_train\ntest['Title'] = name_titles_test","e5dcc7cb":"train = train.drop(['Name'],axis=1)\ntest = test.drop(['Name'],axis=1)","697e9169":"train.head()","5970fb0b":"train['Title'].value_counts()","9fedc1d6":"plt.figure(figsize=(25,17))\nsns.countplot(x='Title',hue='Survived',data=train)","d107a93c":"train.head(7)","6e1f30bc":"# Categories\n\nfor i in (1,2,5,6,7,11,12):\n    c = train.columns[i]\n    printmd('### %s'%(c))\n    display(train[c].value_counts())\n    print(' ')","afb4e5b6":"def Mean_Encoding(column_name):\n    new_smooth_name = column_name+'_smean_encod'\n    \n    mean = train['Survived'].mean()\n    agg= train.groupby(column_name)['Survived'].agg(['count','mean'])\n    counts = agg['count']\n    means = agg['mean']\n    weight = 100\n    smooth = (counts*means + weight*mean)\/(counts+weight)\n    \n    train.loc[:,new_smooth_name] = train[column_name].map(smooth)\n    test.loc[:,new_smooth_name] = test[column_name].map(smooth)    \n    ","9ee3e708":"Mean_Encoding('Ticket')","441ddc4f":"Mean_Encoding('Ticket_prefix')","1d871f68":"Mean_Encoding('Title')","859a1b26":"test.isnull().sum()","d887a03c":"sns.displot(data=train['Ticket_smean_encod'],kde=True,height=6.5,color=random.choice(color_list));","0229e92a":"sns.displot(data=train['Ticket_prefix_smean_encod'],kde=True,height=6.5,color=random.choice(color_list));","2781f030":"sns.displot(data=train['Title_smean_encod'],kde=True,height=6.5,color=random.choice(color_list));","bed0cd91":"test['Ticket_smean_encod'] = test['Ticket_smean_encod'].fillna(train['Ticket_smean_encod'].mean())\ntest['Ticket_prefix_smean_encod'] = test['Ticket_prefix_smean_encod'].fillna(train['Ticket_prefix_smean_encod'].mean())\ntest['Title_smean_encod'] = test['Title_smean_encod'].fillna(train['Title_smean_encod'].mean())","800d16e3":"test.isnull().sum()","b3bcb155":"# Sex\n\ntrain['Sex_female'] = pd.get_dummies(train.Sex, prefix='Sex')['Sex_female']\ntrain['Sex_male'] = pd.get_dummies(train.Sex, prefix='Sex')['Sex_male']\ntest['Sex_female'] = pd.get_dummies(test.Sex, prefix='Sex')['Sex_female']\ntest['Sex_male'] = pd.get_dummies(test.Sex, prefix='Sex')['Sex_male']","3cc4119b":"# Pclass\n\ntrain['Pclass_1'] = pd.get_dummies(train.Pclass, prefix='Pclass')['Pclass_1']\ntrain['Pclass_2'] = pd.get_dummies(train.Pclass, prefix='Pclass')['Pclass_2']\ntrain['Pclass_3'] = pd.get_dummies(train.Pclass, prefix='Pclass')['Pclass_3']\n\ntest['Pclass_1'] = pd.get_dummies(test.Pclass, prefix='Pclass')['Pclass_1']\ntest['Pclass_2'] = pd.get_dummies(test.Pclass, prefix='Pclass')['Pclass_2']\ntest['Pclass_3'] = pd.get_dummies(test.Pclass, prefix='Pclass')['Pclass_3']","314e64e6":"# Embarked\n\ntrain['Embarked_C'] = pd.get_dummies(train.Embarked, prefix='Embarked')['Embarked_C']\ntrain['Embarked_Q'] = pd.get_dummies(train.Embarked, prefix='Embarked')['Embarked_Q']\ntrain['Embarked_S'] = pd.get_dummies(train.Embarked, prefix='Embarked')['Embarked_S']\n\ntest['Embarked_C'] = pd.get_dummies(test.Embarked, prefix='Embarked')['Embarked_C']\ntest['Embarked_Q'] = pd.get_dummies(test.Embarked, prefix='Embarked')['Embarked_Q']\ntest['Embarked_S'] = pd.get_dummies(test.Embarked, prefix='Embarked')['Embarked_S']","9a176131":"train.columns","ba8c4ad5":"df_train = train[['Age','Fare','Ticket_prefix_smean_encod','Sex_female','Pclass_1','Pclass_2','Embarked_C',\n       'Embarked_Q','Survived']] # omitted extra dummy variables\ndf_test = test[['Age','Fare','Ticket_prefix_smean_encod','Sex_female','Pclass_1','Pclass_2','Embarked_C',\n       'Embarked_Q']] # omitted extra dummy variables","74096468":"fig, ax = plt.subplots(figsize=(18,16)) \nmy_c = sns.diverging_palette(20, 220, as_cmap=True)\nmask = np.triu(df_train.corr())\nsns.heatmap(df_train.corr(),cmap='BrBG',linewidths=1.5,ax=ax,annot=True,center=0,square=True,mask=mask)\nplt.title('Correlation',fontsize=30);","cfcc33f6":"train.head()","845373de":"### Fare","e27b5071":"This means, there are new uniue values in the test dataset which weren't mapped to the smooth values we have here","6691d094":"### Cabin","1bdffff0":"**Grouping all unique tickets to a common value**","12eb37d8":"# Data Preprocessing","d5523cd1":"## **Ticket**","787d9e18":"### Embarked","cfda0210":"# Correlation","77d5b2ba":"## Mean Encoding for **Ticket**, **Ticket_prefix** and **Title** columns","66982c01":"# Categorical Encoding","016432b5":"#### **Among the following Table groups below, Please pay attention to:**\n* How many **survived** in a group?\n* Whether they're in the same family via **Family**and **Name**? (For details on family demographic, see **SipSp** and **ParCh**)\n* The port they **Embarked** from\n* Their **Age** demographic\n* Whether they're in the same **cabin**. ","4bb1fbb6":"## One Hot Encoding for **Sex**, **Embarked** and **Pclass** columns","a936b1c2":"# Inputting & Importing","afdc71d9":"### Missing values after mean Encoding","6835d2bd":"### SibSp and Parch","b0ac5793":"### Cabin","346079f8":"- 20% **Age** values are missing in *Train Data*, 20% in *Test Data* as well\n- 0.2% **Embarked** values are missing \n- 77% **Cabin** values are missing in *Train Data* -> ***might delete later but keeping for EDA insight***\n- **Fare** has just 1 missing value in *Test Data*","3aa6079c":"## Missing Values","d89ec634":"Here, I'll be creating new Dataframes (Test and Train each) to analyse the frequent occuring Ticket types and analayse each of those ticket groups individually","7b642460":"#### Getting Ticket prefix values","1b901261":"### Name","2341b946":"### Age","159edb26":"#### **Observations**\n* Some people have more than one **cabin**. Almost all of these people belong to the 1st **Class**.\n* Some people not from the same **family** are in the same **cabin**.\n* Should I **age** categorize?\n* There are hardly any **cabin** names for both 2nd and 3rd **Class** passengers.\n* 3rd **class** passengers usually have **cabins** in F and G (for the data that is present).\n* Passengers on the same **ticket** are mostly in the same **cabin** and belong to the same **class**.\n* Among couples (in the same cabin) from all **classes**, it was common to see **only women** surviving in a lot of cases.\n\nInteresting read for the side: Berth numbers were given for some passengers. Odd for lower berths and even for upper berths. [source](https:\/\/www.encyclopedia-titanica.org\/cabins.html)","b5221b46":"# **Exploratory Data Analysis**","a456c55e":"* **S** or *Southampton* is the **Mode**"}}