{"cell_type":{"7f74c7f1":"code","7fa89d1e":"code","b733e777":"code","2a75704c":"code","60dbc4ab":"code","12a0b900":"code","02a58200":"code","620e2b98":"code","804e5c35":"code","d8d2a759":"code","a0a3beff":"code","43da9b9e":"code","434217a4":"code","e98b4488":"code","083fc344":"code","e15e5059":"code","18fa54fc":"markdown","41d7fccf":"markdown","dcf6d41a":"markdown"},"source":{"7f74c7f1":"# Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","7fa89d1e":"# The dataset has had PCA applied to the features to provide customer anonymity. 28 Columns (V1-V28) are the resulting principal components.\ndata = pd.read_csv('..\/input\/creditcard.csv')\ndata","b733e777":"import numpy as np\nimport seaborn as sns\nfig = plt.figure(figsize=(15,10))\nplt.tight_layout()\ndata2 = data[data.Class==0]\ndata3 = data[data.Class==1]\nsns.set_style('whitegrid')\nfor i in range(1,5):\n    plt.subplot(2,2,i)\n    plt.tight_layout()\n    sns.kdeplot(np.array(data2['V'+str(i)].values), bw=0.5,label='Not Fraud')\n    sns.kdeplot(np.array(data3['V'+str(i)].values), bw=0.5,label='Fraud')\n    plt.title('V'+str(i))\n    plt.ylabel('Probability Density')\n    plt.xlabel('Value')","2a75704c":"class_size = data.groupby('Class').size().values\nfraud_proportion = class_size\/class_size.sum()\nfraud_proportion = [str(round(100*f,2))+'%' for f in fraud_proportion]\n\nlabels = 'Not Fraud: '+fraud_proportion[0],'Fraud: '+fraud_proportion[1]\nplt.pie(class_size,labels=labels)\ncentre = plt.Circle( (0,0), 0.6, color='white')\np=plt.gcf()\np.gca().add_artist(centre)\nplt.axis('equal')\nplt.title('Transaction Class')\nplt.show()","60dbc4ab":"plt.rcParams['axes.facecolor'] = 'whitesmoke'\nplt.figure(figsize = (12,12))\n\nplt.subplot(4,1,1)\nplt.hist(data[data.Class==0].Time.values,bins = 50,color='cornflowerblue')\nplt.title('Time - Nonfraudulent transactions')\nplt.ylabel('Transactions')\n\nplt.subplot(4,1,2)\nplt.hist(data[data.Class==1].Time.values,bins = 50,color='lightcoral')\nplt.title('Time - Fraudulent transactions')\nplt.ylabel('Transactions')\nplt.xlabel('Time')\n\nplt.subplot(4,1,3)\nplt.hist(data[data.Class==0].Amount.values,bins = 50,color='cornflowerblue')\nplt.title('Transaction Amount - Nonfraudulent transactions')\nplt.ylabel('Transactions')\nplt.xlabel('Transaction Amount')\n\nplt.subplot(4,1,4)\nplt.hist(data[data.Class==1].Amount.values,bins = 50,color='lightcoral')\nplt.title('Transaction Amount - Fraudulent transactions')\nplt.ylabel('Transactions')\nplt.xlabel('Transaction Amount')\n\nplt.tight_layout()\nplt.show()","12a0b900":"# Independent and dependent variables.\nX = data.drop(columns=['Class']).values\ny = data.Class.values\n\n# Training and Test sets\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)","02a58200":"# Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrfc_model = RandomForestClassifier(n_estimators=100)\nrfc_model.fit(X_train,y_train)\ny_pred = rfc_model.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\ncm = confusion_matrix(y_test,y_pred)","620e2b98":"roc_auc_score(y_test,y_pred)","804e5c35":"fig = plt.figure(figsize=(12,6),)\nfig.suptitle(\"Random Forest Fraud Detection\", fontsize=\"large\")\nplt.subplot(121)\nplt.bar(['Undetected','Detected'],cm[1,:]\/np.sum(cm[1,:]),edgecolor='k',linewidth=2.0,color='lightcoral')\nplt.ylim([0,1])\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Fraud: '+str(round(cm[1,1]\/(cm[1,0]+cm[1,1])*100,1))+'% success')\nplt.subplot(122)\nplt.bar(['Not Classified','Falsely Classifed'],cm[0,:]\/np.sum(cm[0,:]),edgecolor='k',linewidth=2.0,color='cornflowerblue')\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Not fraud: '+str(round(cm[0,0]\/(cm[0,0]+cm[0,1])*100,2))+'% success')\nplt.show()","d8d2a759":"# Feature Scaling for the remaining methods\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)","a0a3beff":"# Logistic Regression Classifier\nfrom sklearn.linear_model import LogisticRegression\nlr_model = LogisticRegression(solver='lbfgs')\nlr_model.fit(X_train,y_train)\n\ny_pred = lr_model.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)","43da9b9e":"roc_auc_score(y_test,y_pred)","434217a4":"fig = plt.figure(figsize=(12,6),)\nfig.suptitle(\"Logistic Regression Fraud Detection\", fontsize=\"large\")\nplt.subplot(121)\nplt.bar(['Undetected','Detected'],cm[1,:]\/np.sum(cm[1,:]),edgecolor='k',linewidth=2.0,color='lightcoral')\nplt.ylim([0,1])\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Fraud: '+str(round(cm[1,1]\/(cm[1,0]+cm[1,1])*100,1))+'% success')\nplt.subplot(122)\nplt.bar(['Not Classified','Falsely Classifed'],cm[0,:]\/np.sum(cm[0,:]),edgecolor='k',linewidth=2.0,color='cornflowerblue')\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Not fraud: '+str(round(cm[0,0]\/(cm[0,0]+cm[0,1])*100,2))+'% success')\nplt.show()","e98b4488":"# ANN Classifier\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nann_model = Sequential()\nann_model.add(Dense(activation=\"relu\", input_dim=30, units=15, kernel_initializer=\"uniform\"))\nann_model.add(Dense(activation=\"sigmoid\", units=1, kernel_initializer=\"uniform\"))\nann_model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nann_model.fit(X_train,y_train,batch_size=10,epochs=4)\n\ny_pred = ann_model.predict(X_test) > 0.5\ncm = confusion_matrix(y_test,y_pred)","083fc344":"roc_auc_score(y_test,y_pred)","e15e5059":"fig = plt.figure(figsize=(12,6),)\nfig.suptitle(\"ANN Fraud Detection\", fontsize=\"large\")\nplt.subplot(121)\nplt.bar(['Undetected','Detected'],cm[1,:]\/np.sum(cm[1,:]),edgecolor='k',linewidth=2.0,color='lightcoral')\nplt.ylim([0,1])\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Fraud: '+str(round(cm[1,1]\/(cm[1,0]+cm[1,1])*100,1))+'% success')\nplt.subplot(122)\nplt.bar(['Not Classified','Falsely Classifed'],cm[0,:]\/np.sum(cm[0,:]),edgecolor='k',linewidth=2.0,color='cornflowerblue')\nplt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()])\nplt.title('Not fraud: '+str(round(cm[0,0]\/(cm[0,0]+cm[0,1])*100,2))+'% success')\nplt.show()","18fa54fc":"Probability distributions for some of the modified columns. Fradulent values appear to be less localised. ","41d7fccf":"__Fraud Detection on a real data set__\n\nExploratory analysis and comparisons of different predictive ML methods to fraud detection.","dcf6d41a":"There are a very small number of fraudulent transactions in the dataset: 0.17% of the total."}}