{"cell_type":{"a0c767b1":"code","31c12e1b":"code","50bb420c":"code","6541e9b6":"code","0e6df56f":"code","ce146fa9":"code","2c18cb2b":"code","e3440498":"code","667d9e8b":"code","f228520d":"code","4f7a8621":"code","1f326455":"code","d211d22c":"code","2834da12":"code","abec566b":"code","f8b48ae1":"code","8fae53c1":"code","c6a6f862":"code","b1c1675a":"code","c7449bdb":"code","b83f1937":"code","6cf0e66e":"code","52ad27f3":"markdown","6a73d860":"markdown","76bab81d":"markdown","f1e829d5":"markdown","c7a2c8fe":"markdown","1fd30a49":"markdown"},"source":{"a0c767b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31c12e1b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set()\nfrom sklearn.cluster import KMeans\nfrom scipy import stats","50bb420c":"data = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")","6541e9b6":"data.head()","0e6df56f":"data.describe(include = \"all\")","ce146fa9":"data.isnull().sum().to_frame()","2c18cb2b":"data.info()","e3440498":"sns.boxplot(y = \"Annual Income (k$)\",data = data)","667d9e8b":"sns.distplot(data[\"Annual Income (k$)\"])","f228520d":"Q1 = data['Annual Income (k$)'].quantile(0.25)\nQ3 = data['Annual Income (k$)'].quantile(0.75)\nIQR = Q3 - Q1","4f7a8621":"# As we know that we can take value upyo range of (Q1-1.5*QPR, Q3+1.5*QPR)\nlower_limit = Q1 - 1.5 * IQR\nupper_limit = Q3 + 1.5 * IQR\nprint('lower limit is', lower_limit)\nprint('upper limit is', upper_limit)","1f326455":"outliers_detected = []\nfor x in data['Annual Income (k$)']:\n    if ((x> upper_limit) or (x<lower_limit)):\n         outliers_detected.append(x)\nprint(' outlier in the dataset is', outliers_detected)","d211d22c":"# replacing it with the median value \ndata.loc[data['Annual Income (k$)'] >= 137, 'Annual Income (k$)'] = data[\"Annual Income (k$)\"].median()","2834da12":"sns.boxplot(y = \"Annual Income (k$)\",data = data)","abec566b":"#similarly checking for others variables\nsns.boxplot(y = \"Spending Score (1-100)\",data = data)","f8b48ae1":"plt.scatter(data[\"Annual Income (k$)\"],y = data[\"Spending Score (1-100)\"])","8fae53c1":"data_for_clustering = data.iloc[:,[3,4]].values","c6a6f862":"wcss = []\nfor i in range(1,11):\n    kmeans = KMeans(i)\n    kmeans.fit(data_for_clustering)\n    wcss.append(kmeans.inertia_)\n","b1c1675a":"plt.plot(range(1,11),wcss)\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"WCSS\")","c7449bdb":"kmeans = KMeans(5)","b83f1937":"y = kmeans.fit_predict(data_for_clustering)","6cf0e66e":"plt.scatter(data[\"Annual Income (k$)\"],y = data[\"Spending Score (1-100)\"],c = y,cmap = \"rainbow\")","52ad27f3":"# For finding number of Clusters we Will Use Elbow Method","6a73d860":"So it looks like at 5 there is break so number of cluster can be five so we will plot the graph using number of cluster as 5","76bab81d":"# Visualisation between Annual Income and Spending Score (1-100)","f1e829d5":"# As you can see all five cluster are differentiated properly so we can say that choosing number of clusters as 5 is the correct choice and hence we can divide the given data into five clusters as shown above","c7a2c8fe":"Checking for Outliers ","1fd30a49":"For finding number of Clusters we Will Use Elbow Method"}}