{"cell_type":{"63a5fc3a":"code","1f1cc6d9":"markdown"},"source":{"63a5fc3a":"import pandas as pd\n\n(pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', \n             low_memory=False, skiprows=1) # read questions with multiple choices\n   .filter(regex='^((?! - Text).)*$') # remove useless free text columns\n   .filter(regex='^(?!Duration)') # remove duration column\n   .melt(var_name='question', value_name='answer') # transform data from wide to long data format\n   .dropna(subset=['answer']) # remove any lines that don't contain any answer\n   .assign(question_type = lambda x: x['question'].str.split('-', 1) \n                                                  .str[0]\n                                                  .str.split('(:|\\?)')\n                                                  .str[0]\n                                                  .str.strip()) # get shared question part (for grouping further)\n   .groupby('question_type')['answer'] # group by shared question parts (question type)\n   .value_counts() # calculate counts of every value for specific question type\n   .rename('count') # rename series\n   .reset_index() # reset index for getting access to index fields for following steps\n   .groupby('question_type', as_index=False) # group by question type for plotting\n   .apply(lambda data: data.sort_values('count', ascending=True)\n                           .tail(20)\n                           .plot.barh(y='count', x='answer', \n                                      title=data['question_type'][0], \n                                      figsize=(10, 0.7 * len(data.tail(20))))) # plot data for each question type\n);","1f1cc6d9":"Yesterday I read this notebook:  \nhttps:\/\/www.kaggle.com\/paultimothymooney\/how-to-explore-the-2019-kaggle-survey-data  \n  \nThis notebook originally was written using R by @seshadrikolluri and adapted by @paultimothymooney for this competition.  \nThere are less than 15 lines of code to plot all bar plots for all columns.\n\nI've decided to implement it with similar functionality using Python - bar plots for all questions, and for readability show horizontal bar plots with top 20 values by frequency for each plot (of course it can be formatted further).  \n  \nAnd using method chaining, it can be implemented using only 2 lines of code, without any intermediate variables created.\n\nFor convenience, I've commented lines to describe separate steps.\n  \nEnjoy :)"}}