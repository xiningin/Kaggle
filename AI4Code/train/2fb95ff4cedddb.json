{"cell_type":{"5f531d62":"code","e5659dc5":"code","5e4c0f2e":"code","f4892531":"code","18c0ae07":"code","d156c687":"code","eb4f50f4":"code","4e8e6b61":"code","25193e1e":"code","07371a02":"code","ebb6e229":"code","56a4dfc9":"code","45f9b6ad":"code","d0dd7812":"code","4f6942b1":"code","cca88a4d":"code","a2291713":"code","ca0845a9":"code","4f6e9985":"code","b6973e6f":"code","bf0d0228":"code","60b58e6b":"code","92f11907":"code","f8fe92e3":"code","06c59fe7":"code","10b6064e":"code","c69d05ae":"code","99990f85":"code","ba02f3f6":"code","4759a68c":"code","4c6bd6d9":"code","ce3fd17c":"code","06c8f99c":"code","cef06517":"code","ded85e52":"code","30d34ef0":"code","9f7cb0a8":"code","d4e6354c":"code","da811d65":"code","7caa1b03":"code","c29a173e":"code","d4888838":"code","7a2a7995":"code","af36f7a7":"code","a5622f3b":"code","df4634bd":"code","e95bc8a3":"code","5f5c761a":"code","0b98ad46":"code","12122006":"code","3a11bba9":"code","59f52100":"code","1cb8c258":"code","927f3b1a":"markdown","7daff38c":"markdown","d054213a":"markdown","fe619204":"markdown","b9d55374":"markdown","0d6e42cc":"markdown","101a1eab":"markdown","22a7a77e":"markdown","deacf277":"markdown","a1b94526":"markdown","684841ab":"markdown","139a680a":"markdown","c2e39709":"markdown","3297e832":"markdown","d67d554f":"markdown","0bb1314b":"markdown","09fe25fc":"markdown","30fd8500":"markdown","2a26e3fa":"markdown","0deaee7c":"markdown","67602348":"markdown","f61a6bcf":"markdown","3e32d178":"markdown","378f7d19":"markdown","cf75c8ef":"markdown","c952d41f":"markdown","858d8126":"markdown","5e39d99d":"markdown","a9c401fc":"markdown","578b0d68":"markdown","65d4a6f6":"markdown","406283c4":"markdown"},"source":{"5f531d62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport os\n\n# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input di\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5659dc5":"import cv2\n# \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u062a\u0627\u0644\u064a \u0647\u0648 \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0631\u0626\u064a\u0633 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u062c\u0645\u064a\u0639\u0647\u0627 \npath='\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/'\n# \u0639\u0646\u062f \u0637\u0628\u0627\u0639\u0647 \u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641 \u0628\u0627\u0633\u0645 \u0641\u0627\u064a\u0644 \u0646\u0644\u0627\u062d\u0638 \u0627\u0644\u0643\u0645 \u0627\u0644\u0647\u0627\u0626\u0644 \u0644\u0644\u0635\u0648\u0631 \/ \u0627\u0633\u0645\u0627\u0621 \u0627\u0644\u0635\u0648\u0631 \u0641\u0642\u0637 \n# \u0648\u0644\u0643\u0646 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0646\u0627 \u0647\u064a \u0635\u0648\u0631 \u0645\u062e\u062a\u0644\u0637\u0647 \u0641\u064a\u0645\u0627 \u0628\u064a\u0646\u0647\u0627 \u0644\u0630\u0644\u0643 \u0646\u062d\u0646 \u0628\u062d\u0627\u062c\u0647 \u0627\u0644\u064a \u0641\u0635\u0644 \u062a\u0644\u0643 \u0627\u0644\u0635\u0648\u0631 \nfile=os.listdir('\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/')\n# \u0647\u0646\u0627 \u0646\u0628\u062f\u0627 \u0641\u064a \u0639\u0645\u0644\u064a\u0647 \u0627\u0644\u0641\u0635\u0644 \u0644\u0644\u0635\u0648\u0631 \nfeatures=[] #to store images\nlabels=[] #to store labels\n# \u0647\u0646\u0627 \u0646\u0642\u0645 \u0628\u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \u064a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0645\u0646 \u0635\u0648\u0631\u0647 \u0627\u0644\u064a \u0627\u062e\u0631\u064a \nfor img in file:\n    # label=int(img) \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0648\u0644 3 \u0627\u0631\u0642\u0627\u0645 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \/ \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \n    #\u0648\u0627\u0644\u062f\u0644\u064a\u0644 \u0639\u0644\u064a \u0630\u0644\u0643 \u0647\u0648 \u0647\u0627 \u0627\u0644\u062a\u0633\u0644\u0633\u0644 '0020155.png', '0090177.png', '0090201.png', '0100038.png'\n    # \u0627\u0630\u0627 \u0642\u0645\u062a \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0644\u0627\u0628\u0644 \u0633\u062a\u0644\u0627\u062d\u0638 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u062b\u0627\u0644\u062b \u0645\u0646 \u0627\u0644\u062a\u0633\u0644\u0633\u0644 \u0627\u0648 \u0631\u0642\u0645 10 \u0643\u0627\u0645\u0644 \n    label=int(img[:3]) #extracting labels from the image\n    # \u0647\u0646\u0627 \u062a\u0645 \u0627\u064a\u062f\u0627\u0639 \u062a\u0644\u0643 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c\u0647\u0627 \u0641\u064a \u0641\u0627\u0626\u0645\u0647 \u0645\u0646\u0641\u0635\u0644\u0647\n    labels.append(label)\n    # \u0627\u0644\u0646\u0627\u062a\u062c \u0645\u0646 \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u0647\u0648 \u0633\u0644\u0633\u0644\u0647 \u0636\u062e\u0645\u0647 \u0645\u0646 \u0627\u0644\u0642\u0648\u0627\u0626\u0645 \n    img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_COLOR)\n    # \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u062d\u062f\u062b \u062f\u0645\u062c \u0628\u064a\u0646 \u0627\u062b\u0646\u064a\u0646 \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \u0648\u0644\u0648 \u0642\u0645\u062a \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627 \u0633\u062a\u062c\u062f \u0627\u0646\u0647\u0627 \u0639\u0628\u0627\u0631\u0647 \u0639\u0646 \u0645\u0635\u0641\u0648\u0641\u0647 \u0645\u0646 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0627\u0644\u0645\u062a\u0635\u0644\u0647 \u0628\u0627\u0644\u0635\u0648\u0631\u0647 \u0636\u062e\u0645\u0647  \n    img_array=cv2.resize(img_array,(220,220))\n    # \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u062d\u062f\u062b \u0627\u0639\u0627\u062f\u0647 \u0635\u064a\u0627\u063a\u0647 \u0644\u0627\u0634\u0643\u0627\u0644\/ \u0627\u062d\u062c\u0627\u0645 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \/ \u0627\u0644\u0635\u0648\u0631\u0647 \u062d\u062a\u064a \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u0627\u062d\u062c\u0627\u0645 \u0644\u0644\u0635\u0648\u0631 \u0645\u062a\u062d\u062f\u0647 \n    features.append(img_array)\n    # \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u062d\u062f\u062b \u062a\u0639\u0628\\\u0647 \u0644\u0644\u0635\u0648\u0631 \u062e\u0627\u0631\u062c \u0627\u0644\u0644\u0627\u0628\u0644 \n    # \u0648\u0644\u0627 \u0627\u0646\u0635\u062d\u0643 \u0627\u0646 \u062a\u0642\u0648\u0645 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0645\u062e\u0632\u0646 \u062d\u062a\u064a \u0644\u0627 \u062a\u062a\u0648\u0642\u0641 \u0627\u0644\u0643\u064a\u0631\u0646\u0644 \u0639\u0646 \u0627\u0644\u0639\u0645\u0644 \n\n       ","5e4c0f2e":"# \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u0627\u0631 \u064a\u0642\u0648\u062f \u0627\u0644\u064a 10 \u0645\u0644\u0641\u0627\u062a \u0646\u0635\u064a\u0647 \u0628\u0647\u0627 \u0648\u0635\u0641 \u0644\u0643\u0644 \u0646\u0648\u0639 \u0645\u0646 \u0627\u0646\u0648\u0627\u0639 \u0627\u0644\u0641\u0631\u0627\u0634\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a\u0647\u0627 \ndescrid_path='..\/input\/butterfly-dataset\/leedsbutterfly\/descriptions'\ndescrid=os.listdir('..\/input\/butterfly-dataset\/leedsbutterfly\/descriptions')\ndescrid","f4892531":"# \u0642\u0628\u0644 \u0643\u062a\u0627\u0628\u0647 \u0647\u0630\u0627 \u0627\u0644\u0633\u0637\u0631 \u0646\u0631\u062c\u0639 \u0627\u0644\u064a \u0645\u0644\u0641 \u0627\u0644\u0648\u0635\u0641 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u062c\u0644 \u0627\u0646 \u0646\u0639\u0631\u0641 \u0641\u0626\u0627\u062a \u0627\u0644\u0641\u0631\u0627\u0634\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a \u0645\u0631\u0642\u0645\u0647 \u0645\u0646 1 \u0627\u0644\u064a 10 \ndict_1={'001': 'Danaus_plexippus', '002': 'Heliconius_charitonius', '003': 'Heliconius_erato', '004': 'Junonia_coenia', '005': 'Lycaena_phlaeas', '006': 'Nymphalis_antiopa', '007': 'Papilio_cresphontes', '008': 'Pieris_rapae', '009': 'Vanessa_atalanta', '0010': 'Vanessa_cardui'} ","18c0ae07":"# \u0634\u064a\u0626 \u0645\u062a\u0648\u0642\u0639 \n# \u062a\u0645 \u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u0645\u062e\u0632\u0646 \u0628\u0647 \u0627\u0644\u0641\u0626\u0627\u062a \u0627\u0644\u0639\u0634\u0631\u0647 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0647 \u0639\u0644\u064a \u0634\u0643\u0644 \u0645\u062c\u0645\u0648\u0639\u0647 \u0648\u0647\u064a \u0644\u0627 \u062a\u0642\u0628\u0644 \u0627\u0644\u062a\u0643\u0631\u0627\u0631 \u0648\u0647\u0630\u0627 \u064a\u0630\u0643\u0631\u0646\u064a \u0628\u0645\u062c\u0645\u0648\u0639\u0647 \u0645\u0646 \u0627\u0644\u0627\u0644\u0641\u062a\u0631\u0627\u062a \u0627\u0644\u0636\u062e\u0645\u0647 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0646\u0634\u0627\u0626\u0647\u0627 \u0643\u0641\u0626\u0627\u062a \u0644\u0643\u0644 \u0635\u0648\u0631\u0647 \u0648\u0645\u0639 \u0627\u0644\u062f\u0645\u062c \u0627\u062b\u0646\u0627\u0621 \u0627\u0644\u062f\u0648\u0631\u0627\u0646 \nprint(set(labels))\n# \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0647\u0646\u0627 \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0641\u0626\u0627\u062a \u0627\u0644\u0639\u0634\u0631\u0647 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0647 \u0648\u0639\u0631\u0636\u0647\u0627 \u0643\u062f\u0644\u0627\u0644\u0647 ","d156c687":"# \u0647\u0646\u0627 \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0641\u062a\u0631\u0647 \u062c\u062f\u064a\u062f\u0647 \nlist_labels=[]\n# \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \u0644\u0644\u062f\u0648\u0631\u0627\u0646 \u062d\u0648\u0644 \u0643\u0644 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u0628\u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062b\u0627\u0644\u062b \u0641\u064a \u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u0627\u0633\u0645\u0627\u0621 \u0644\u0643\u0644 \u0635\u0648\u0631\u0647 \nfor i in labels:\n    # \u0647\u0646\u0627 \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0642\u0627\u0626\u0645\u0647 \u062c\u062f\u064a\u062f\u0647 \u0645\u0646 \u0627\u0644\u0644\u0627\u0628\u0644\u0632 \u062a\u062d\u0645\u0644 \u0627\u0648\u0644 \u0642\u064a\u0645\u062a\u064a\u0646 \u0648\u0647\u0645\u0627 \u0627\u0644 00 \u062b\u0627\u0628\u062a\u062a\u064a\u0646 \u0648\u0628\u0639\u062f\u0647 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0636\u0645 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u062b\u0627\u0644\u062b \u0627\u0644\u0645\u062e\u0632\u0646 \u0645\u0633\u0628\u0642\u0627 \n    new_label=dict_1['00'+str(i)]\n    # \u0647\u0646\u0627 \u062a\u0645 \u0627\u064a\u062f\u0627\u0639 \u062a\u0644\u0643 \u0627\u0644\u0644\u0627\u0628\u0644\u0632 \u0627\u0644\u062c\u062f\u064a\u062f\u0647 \u0641\u064a \u0627\u0644\u0641\u062a\u0631\u0647 \u0627\u0644\u062c\u062f\u064a\u062f\u0647 \n    list_labels.append(new_label)\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0639\u0631\u0636 10 \u0641\u0626\u0627\u062a \u062b\u0627\u0628\u062a\u0647 \u0648\u063a\u064a\u0631 \u0645\u0643\u0631\u0631\u0647     \nprint(list_labels[:10])    ","eb4f50f4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0645\u062e\u0637\u0637 \u0645\u0646 10 \u0627\u0645\u0627\u0643\u0646 \nfig,ax=plt.subplots(5,2)\n# \u062a\u0645 \u062a\u062d\u062f\u064a\u062f \u062d\u062c\u0645 \u0643\u0644 \u0635\u0648\u0631\u0647\nfig.set_size_inches(15,15)\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u0646\u0634\u0627\u0621 2 \u0644\u0648\u0628 \u0645\u0646 \u0627\u062c\u0644 \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0639\u0645\u0648\u062f\u064a \u0639\u0644\u064a \u062c\u0632\u0626\u064a\u0646\nfor i in range(5):\n    for j in range (2):\n        # \u0647\u0646\u0627 \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0645\u062e\u0632\u0646 \u064a\u062d\u0645\u0644 \u0627\u0631\u0642\u0627\u0645\u0627 \u0644\u0635\u0648\u0631\u0627 \u0639\u0634\u0648\u0627\u0626\u064a\u0647 \u0645\u0646 \u0627\u0644\u0631\u0642\u0645 0 \u0627\u0644\u064a 832\n        # \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0634\u0627\u0631 \u0627\u0644\u064a\u0647 \u0648\u0647\u0648 832 \u0647\u0648 \u0627\u062e\u0631 \u062d\u062f \u0644\u0646\u0627 \u0641\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0647\u0630\u0627 \u064a\u0641\u0633\u0631 \u0627\u0630\u0627 \u0642\u0645\u062a \u0628\u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0627\u0648\u0644 \u0648\u0647\u0648 \u0627\u0644 0 \u0627\u0644\u064a \u0627\u064a \u0631\u0642\u0645 \u0627\u062e\u0631 \u0645\u0627\u0632\u0627\u0644 \u0627\u0644\u0643\u0648\u062f \u0633\u064a\u0639\u0645\u0644 \n        # \u0627\u0646\u062a \u0641\u0642\u0637 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u062d\u0635\u0631 \u0639\u062f\u062f \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u062a\u0642\u0648\u0645 \u0627\u0644\u062f\u0627\u0644\u0647 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a\u0647 \u0628\u0627\u062e\u062a\u064a\u0627\u0631\u0647\u0627 \n        # \u0639\u0644\u064a \u0628\u064a\u0644 \u0627\u0644\u0645\u062b\u0627\u0644 \u0627\u0646 \u0648\u0636\u0639\u062a \u0631\u0642\u0645 833 \u0633\u064a\u062d\u062f\u062b \u062e\u0637\u0627 \u0628\u0627\u0644\u062a\u0627\u0643\u064a\u062f\n        l=np.random.randint(0,len(labels))\n        #print(l)\n        # \u0647\u0646\u0627 \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0645\u062d\u0627\u0648\u0631 \u0627\u0644\u062a\u064a \u0633\u064a\u062a\u0645 \u0648\u0636\u0639 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631\u0647\u0627 \u0641\u064a\u0647\u0627 \n        ax[i,j].imshow(features[l])\n        # \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u0639\u0637\u0627\u0621 \u0627\u0644\u0645\u0648\u0642\u0639 \u0627\u0644\u0630\u064a \u062a\u0645 \u062a\u062d\u062f\u064a\u062f\u0647 \u0627\u0644\u0635\u0641\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0647 \u0628\u0647\n        ax[i,j].set_title( \"Butterfly: \" +str(list_labels[l]))\n        #print()\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u0646\u0647\u0627\u0621 \u0627\u0644\u0645\u062e\u0637\u0637 \u0639\u0646 \u0637\u0631\u064a\u0642 \u0627\u0638\u0627\u0641\u0647 \u0628\u0639\u0636 \u0627\u0644\u062d\u062f\u0648\u062f \u0648\u0627\u0644\u0641\u0648\u0627\u0635\u0644 \u0628\u064a\u0646 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u0633\u062a\u0638\u0647\u0631 \u0648\u0647\u0630\u0627 \u064a\u0639\u0637\u064a \u0634\u0643\u0644\u0627 \u062c\u0645\u0627\u0644\u064a\u0627 \u0648\u0644\u0643\u0646\u0647 \u0647\u0627\u0645\u0627 \u0628\u0627\u0644\u062a\u0627\u0643\u064a\u062f  \nplt.axis('off')        \nplt.tight_layout()\n","4e8e6b61":"print(len(labels))","25193e1e":"# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u0639\u0638\u0627\u0621 \u0627\u0644\u0637\u0627\u0628\u0639 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u062a\u064a \u0633\u064a\u0638\u0647\u0631 \u064a\u0645\u0643\u0646\u0646\u0627 \u0627\u062e\u062a\u064a\u0627\u0631 \u0637\u0627\u0628\u0639 \u0627\u062e\u0631 \u0628\u0627\u0644\u062a\u0627\u0643\u064a\u062f \nsns.set_style('whitegrid')\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062f \u062d\u062c\u0645 \u0627\u0644\u0634\u0643\u0644 \/ \u0627\u0644\u0645\u062e\u0637\u0637\nplt.figure(figsize=(20,12))\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u062e\u062a\u064a\u0627\u0631 \u0646\u0648\u0639 \u0627\u0644\u0645\u062e\u0637\u0637 \u0627\u0644\u0646\u0627\u062a\u062c \u0648\u0627\u0639\u0637\u0627\u0621\u0647 \u0627\u0644\u0641\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u0633\u062a\u0638\u0647\u0631 \u0641\u064a \u0627\u0644\u0645\u062e\u0637\u0637 \u0648\u0627\u064a\u0636\u0627 \u0627\u0644\u062d\u062c\u0645 \u0627\u0644\u0639\u0627\u0645 \u0644\u0643\u0644 \u0639\u0645\u0648\u062f\nfig=sns.countplot(list_labels)\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u0639\u0637\u0627\u0621 \u0627\u0633\u0645 \u0627\u0644\u0645\u062d\u0648\u0631 \u0627\u0644\u0627\u0641\u0642\u064a\nplt.xlabel('BUTTERFLY SPECIES')\n# \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0646\u0647\u0627\u0626\u064a \nplt.show()","07371a02":"# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0627\u0644\u062a\u062d\u0648\u064a\u0644  \u0644\u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u062e\u0632\u0646\u0647 \u0627\u0644\u064a \u0645\u0635\u0641\u0648\u0641\u0627\u062a \nfeatures=np.array(features)\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0642\u0633\u0645\u0647 \u0643\u0644 \u0631\u0642\u0645 \u0645\u0646 \u0627\u0631\u0642\u0627\u0645 \u0643\u0644 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0627\u062a \u0627\u0644\u0646\u0627\u062a\u062c\u0647 \u0639\u0644\u064a \u0627\u0644\u0631\u0642\u0645 255 \u062d\u062d\u062a\u064a \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u0635\u0648\u0631 \u0645\u0646\u062e\u0641\u0636\u0647 \u0627\u0644\u062c\u0648\u062f\u0647 \u0627\u064a \u062a\u0645 \u0639\u0645\u0644 \u062a\u0646\u0639\u064a\u0645 \u0644\u0644\u0635\u0648\u0631\u0647 \u062d\u062a\u064a \u064a\u0633\u0647\u0644 \u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \nfeatures=features\/255.0","ebb6e229":"# \u0627\u0639\u0627\u062f\u0647 \u062a\u0634\u0643\u0644 \u0636\u0631\u0648\u0631\u064a\u0647 \u062d\u062a\u064a \u0644\u0627 \u064a\u062d\u062f\u062b \u062a\u0636\u0627\u0631\u0628 \u0628\u0633\u0628\u0628 \u0639\u0645\u0644\u064a\u0647 \u0627\u0644\u062a\u0646\u0639\u064a\u0645 \u0627\u0644\u062e\u0627\u0635\u0647 \u0641\u064a \u0627\u0644\u062e\u0644\u064a\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \nfeatures=features.reshape(-1,220,220,3)","56a4dfc9":"# \u062a\u0644\u0643 \u0627\u0644\u0639\u0645\u0644\u064a\u0647 \u0647\u064a \u0639\u0645\u0644\u064a\u0647 \u0645\u0634\u0647\u0648\u0631 \u0646\u0642\u0648\u0645 \u0628\u0647\u0627 \u062d\u062a\u064a \u064a\u0643\u0648\u0646 \u0645\u0646 \u0627\u0644\u0633\u0647\u0644 \u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0648\u0627\u0638\u0647\u0627\u0631 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0644\u0627\u0628\u0644\u0632 \u0641\u064a \u0635\u0648\u0631\u0647 \u0627\u0628\u0639\u0627\u062f \nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nle=LabelEncoder()\ny=le.fit_transform(list_labels)","45f9b6ad":"from tensorflow.keras.utils import to_categorical\ny=to_categorical(y)","d0dd7812":"y.shape","4f6942b1":"# \u0648\u0628\u0627\u0644\u0646\u0633\u0628\u0647 \u0627\u0644\u064a \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0628\u0627\u0642\u064a\u0647 \u0644\u064a\u0633\u062a \u0628\u062d\u0627\u062c\u0647 \u0627\u0644\u064a \u0639\u0645\u0644 \u0630\u0644\u0643 \u0644\u0647\u0627 \u0644\u0627\u0646 \u0644\u0647\u0627 \u0627\u0628\u0639\u0627\u062f \u0642\u0645\u0646\u0627 \u0628\u062a\u0642\u0648\u064a\u0645\u0647\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0645\u062b\u0644 \u0647\u0630\u0627 \n# (832, 220, 220, 3)\n# \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0627\u0648\u0644 \u0647\u0648 \u0639\u062f\u062f \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u062b\u0627\u0646\u064a \u0648\u0627\u0644\u062b\u0627\u0644\u062b \u0647\u0648 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0631\u0627\u0628\u0639 \u0647\u0648 \u0639\u062f\u062f \u0642\u0646\u0648\u0627\u062a \u0627\u0644\u0635\u0648\u0631\u0647 \nprint(features.shape)","cca88a4d":"# \u0647\u0646\u0627 \u062a\u0642\u0633\u064a\u0645 \u0639\u0627\u062f\u064a \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(features,y,random_state=11,test_size=0.2)","a2291713":"# \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0627\u0628\u0639\u0627\u062f\nprint(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","ca0845a9":"# \u0645\u0644\u0627\u062d\u0638\u0647 \u0645\u0628\u062f\u0627\u0626\u0647 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \u0643\u0627\u0646\u062a \u0646\u062a\u0627\u0626\u062c \u0633\u064a\u0626\u0647 \u0644\u0630\u0644\u0643 \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0639\u062f\u064a\u0644 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0627\u0635\u0644\u064a\u0647 \u0645\u0646 \u0627\u062c\u0644 \u0631\u0641\u0639 \u0627\u0644\u0643\u0641\u0627\u0621\u0647 \u0642\u0644\u064a\u0644\u0627 \n# \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0643\u0627\u0646\u062a :\n# Epoch 100\/100\n#45\/45 [==============================] - 1s 17ms\/step - loss: 0.0269 - accuracy: 0.9914 - val_loss: 1.4048 - val_accuracy: 0.7444\n\n# \u0628\u0639\u062f \u0627\u062c\u0631\u0627\u0621 \u0628\u0639\u0636 \u0627\u0644\u062a\u0639\u062f\u064a\u0644\u0627\u062a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a \u062a\u0644\u0643 \u0627\u0644\u062f\u0642\u0647 \u0641\u064a \u0627\u062e\u0631 \u0645\u0631\u062d\u0644\u0647 :\n# Epoch 100\/100\n#45\/45 [==============================] - 1s 12ms\/step - loss: 0.1035 - accuracy: 0.9964 - val_loss: 0.7105 - val_accuracy: 0.8947\n# \u0648\u062a\u0644\u0643 \u0642\u064a\u0645\u0647 \u0627\u0639\u0644\u064a \u0628\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0642\u064a\u0645\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647\n# \u0628\u062f\u0621 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0627\u0648\u0644\u064a\u0647\nfrom tensorflow.keras.layers import Dense,MaxPooling2D,Conv2D,Dropout,Flatten\nfrom tensorflow.keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.regularizers import l2,l1\n# \u0627\u0646\u0634\u0627\u0621 \u0647\u064a\u0643\u0644 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0641\u064a \u0627\u0644\u0628\u062f\u0627\u064a\u0647 \u0648\u0628\u0639\u062f\u0647\u0627 \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u0636\u0627\u0641\u0647 \u0627\u0644\u0637\u0628\u0642\u0627\u062a \u0627\u0644\u062f\u0627\u062e\u0644\u064a\u0647 \u0641\u064a \u062e\u0637\u0648\u0627\u062a \u0644\u0627\u062d\u0642\u0647\nmodel = Sequential()\n# \u0627\u0644\u064a\u0643 \u0628\u0646\u0627\u0621 \u0627\u0644\u0637\u0628\u0642\u0647 \u0627\u0644\u0627\u0648\u0644\u064a \u0648\u0647\u064a \u0643\u0627\u0644\u062a\u0627\u0644\u064a 32, (5,5) \u0631\u0642\u0645 32 \u064a\u0639\u0646\u064a \u0639\u062f\u062f \u0627\u0644\u0641\u0644\u0627\u062a\u0631 \u0627\u0644\u062a\u064a \u064a\u0645\u0643\u0646 \u0627\u0646\u0634\u0627\u0626\u0647\u0627 \u0639\u0644\u064a \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u0648\u0627\u062d\u062f\u0647 \u0628\u0627\u0628\u0639\u0627\u062f \u062a\u0635\u0644 \u0627\u0644\u064a 5 \u0641\u064a 5 \n# \u0646\u0642\u0648\u0645 \u0628\u0639\u062f\u0647\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u062f\u0627\u0644\u0647 \u0627\u0644\u062a\u0646\u0634\u064a\u0637 \u0627\u0648 \u0627\u0644\u062a\u0641\u0639\u064a\u0644 \u0645\u0646 \u0646\u0648\u0639 \u0631\u064a\u0644\u064a\u0648 \u0648\u0644\u0634\u0631\u062d \u0633\u0628\u0628 \u0627\u0633\u062a\u062e\u062f\u0627\u0645\u0647\u0627 \u0646\u062d\u062a\u0627\u062c \u0627\u0644\u064a \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0631\u064a\u0627\u0636\u064a\u0627\u062a \u0648\u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0635\u0641\u062d\u0627\u062a \n# \u0628\u0639\u062f\u0647\u0627 \u0646\u0636\u0639 \u0627\u0644\u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0645\u0648\u062d\u062f\u0647 \u0644\u0644\u0635\u0648\u0631\u0647\nmodel.add(Conv2D(32, (3,3), padding=\"same\", activation = 'relu', kernel_regularizer=l2(0.0002) , input_shape=(220,220,3)))\n# \u0627\u0646\u0634\u0627\u0621 \u0627\u0644\u0641\u0644\u062a\u0631 \u0627\u0644\u0627\u0648\u0644\u064a \u0628\u0627\u0628\u0639\u0627\u062f 2 \u0641\u064a 2 \u0648\u0627\u0636\u0627\u0641\u062a\u0647 \u0627\u0644\u064a \u0627\u0644\u0637\u0628\u0642\u0647 \u0627\u0644\u0627\u0648\u0644\u064a \nmodel.add(MaxPooling2D((3,3)))\n\nmodel.add(Conv2D(32, (5, 5), activation='relu', kernel_regularizer=l1(0.0002))) \nmodel.add(MaxPooling2D((3,3)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu' , kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n# \u0648\u0647\u0643\u0630\u0627 \u0627\u0644\u0627\u0645\u0631 \u0645\u0639 \u0627\u0644\u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u0646\u0642\u0633 \u0627\u0644\u0634\u064a\u0621 \u0648\u0644\u0643\u0646 \u0627\u0644\u0627\u0628\u0639\u0627\u062f \u0642\u062f \u062a\u062e\u062a\u0644\u0641 \u0648\u0642\u062f \u062a\u062a\u0634\u0627\u0628\u0647 \n# \u0627\u0644\u0637\u0631\u064a\u0642\u0647 \u0627\u0644\u0627\u0645\u062b\u0644 \u0644\u062a\u062d\u062f\u064a\u062f \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0641\u0644\u062a\u0631 \u0648\u0627\u0628\u0639\u0627\u062f \u062c\u0632\u0621 \u0627\u0644\u0627\u0644\u062a\u0641\u0627\u0641 \u0648\u063a\u064a\u0631\u0647\u0627 \u0645\u0646 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0627\u0644\u0648\u0631\u0627\u062f\u0647 \u0628\u0627\u0644\u0627\u0639\u0644\u064a \u0627\u0644\u0637\u0631\u064a\u0642\u0647 \u0627\u0644\u0627\u0645\u062b\u0644 \u0644\u062a\u062d\u062f\u064a\u062f\u0647\u0627 \u0628\u062f\u0642\u0647 \u0647\u0648 \u0627\u0644\u0627\u0639\u062a\u0645\u0627\u062f \u0639\u0644\u064a \u0627\u0644\u062e\u0628\u0631\u0647 \u0648\u0628\u062a\u062c\u0631\u0628\u0647 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u0634\u0643\u0644\u0627\u062a \u0648\u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0627\u0637\u0631\u0642 \n# \u0637\u0628\u0642\u0647 \u0627\u0644\u0641\u0644\u0627\u062a\u0646 \u0647\u064a \u0637\u0628\u0642\u0647 \u0645\u0647\u0645\u0647 \u0641\u064a \u0627\u0639\u0627\u062f\u0647 \u062a\u0634\u0643\u064a\u0644 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \u0648\u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0627\u0628\u0639\u0627\u062f\u0647\u0627 \nmodel.add(Flatten())\n# \u062a\u0644\u0643 \u0627\u0644\u0637\u0628\u0642\u0647 \u062a\u0633\u062a\u0639\u0645\u0644 \u062a\u062c\u0646\u0628 \u0645\u0634\u0643\u0644\u0647 \u0641\u0631\u0637 \u0627\u0644\u062a\u062c\u0647\u064a\u0632 \u0648\u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0644\u0627\u0633\u0642\u0627\u0637 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \u0644\u0644\u062e\u0644\u0627\u064a\u0627 \u0628\u0627\u0644\u0646\u0633\u0628\u0647 \u0627\u0644\u0645\u062d\u062f\u062f\u0647 \u0641\u064a \u0643\u0644 \u0645\u0631\u0647 \nmodel.add(Dropout(0.3))\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0637\u0628\u0642\u0647 \u0643\u062b\u064a\u0641\u0647 \u0645\u0646 \u0627\u0644\u062e\u0644\u0627\u064a\u0627 \u0648\u0639\u062f\u062f\u0647\u0627 256 \u062e\u0644\u064a\u0647 \u0641\u064a \u0627\u0644\u0637\u0628\u0642\u0647 \nmodel.add(Dense(100, activation='relu'))\n\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0628\u0646\u0627\u0621 \u0637\u0628\u0642\u0647 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0647\u064a \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u064a 10 \u062e\u0644\u0627\u064a\u0627 \u0643\u0644 \u062e\u0644\u064a\u0647 \u062a\u0645\u062b\u0644 \u0627\u062d\u062f \u0627\u0644\u0641\u0626\u0627\u062a \u0627\u0644\u062a\u064a \u0644\u062f\u064a\u0646\u0627 \nmodel.add(Dense(10, activation='softmax'))","4f6e9985":"# \u0647\u0646\u0627 \u0642\u0646\u0627 \u0628\u0639\u0645\u0644 \u0645\u0627 \u0627\u0633\u0645\u064a\u0647 \u0628\u0627\u0644\u062a\u062c\u0645\u064a\u0639 \u0645\u0639 \u0648\u0636\u0639 \u0645\u0639\u0627\u062f\u0644\u0647 \u0627\u0644\u062a\u0641\u0639\u064a\u0644 \u0648\u0628\u0639\u0636 \u0627\u0644\u0647\u0627\u064a\u0628\u0631 \u0628\u0627\u0631\u0627\u0645\u062a\u0631 \u0627\u0644\u0647\u0627\u0645\u0647 \nmodel.compile(optimizer='adam'\n              ,metrics=['accuracy'],loss='categorical_crossentropy')","b6973e6f":"# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0639\u0631\u0636 \u0645\u0644\u062e\u0635 \u0644\u0644\u0634\u0628\u0643\u0647 \u0628\u0627\u0644\u0643\u0627\u0645\u0644 \u0648\u062a\u062d\u062f\u064a\u062f\u0627 \u0644\u0643\u0644 \u0637\u0628\u0642\u0647 \u0645\u0646 \u0627\u0644\u0637\u0628\u0642\u0627\u062a \nmodel.summary()","bf0d0228":"# \u0647\u0646\u0627 \u0646\u0628\u062f\u0627 \u0628\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u062e\u0627\u0635 \u0628\u0646\u0627 \n# \u0645\u0644\u0627\u062d\u0638\u0647 \u0647\u0627\u0645\u0647 \u062a\u0645 \u0627\u0633\u062a\u062e\u0644\u0627\u0635 20 \u0628\u0627\u0644\u0645\u0627\u0626\u0647 \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u0642\u064a\u064a\u0645 \u0645\u0646 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0647\u0630\u0627 \u0627\u062e\u062a\u0635\u0627\u0631\u0627 \u0644\u062e\u0637\u0648\u0647 \u062a\u0642\u0633\u064a\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u064a \u062a\u062f\u0631\u064a\u0628 \u0648\u062a\u0642\u064a\u064a\u0645 \u0648\u0627\u062e\u062a\u0628\u0627\u0631 \nhistory=model.fit(x_train,y_train,batch_size=12,epochs=50,validation_split=0.2)","60b58e6b":"# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0631\u0633\u0645 \u0645\u0646\u062d\u0646\u064a \u0627\u0644\u062f\u0642\u0647 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0645\u0648\u062f\u064a\u0644 \nsns.set_style('whitegrid')\nplt.figure(figsize=(12,8))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy score')\nplt.title('Model Accuracy')\nplt.legend(['Train','Test'])\nplt.show()","92f11907":"# \u0647\u0646\u0627 \u0627\u0642\u0648\u0645 \u0628\u0631\u0633\u0645 \u062a\u062f\u0631\u062c \u062f\u0627\u0644\u0647 \u0627\u0644\u062e\u0633\u0627\u0631\u0647 \u0644\u0644\u0645\u0648\u062f\u064a\u0644 \nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Model Loss')\nplt.legend(['Train','Test'])\nplt.show()","f8fe92e3":"# \u0647\u0630\u0627 \u0644\u062d\u0633\u0627\u0628 \u0627\u0644\u062f\u0642\u0647 \u0641\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u0644\u062a\u064a \u0647\u064a \u0628\u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0647 \u0646\u0633\u0628\u0647 \u062c\u064a\u062f\u0647 \u0627\u0644\u064a \u062d\u062f \u0645\u0627 \nloss,accuracy=model.evaluate(x_test,y_test)","06c59fe7":"# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \nprint(loss)\nprint(accuracy)","10b6064e":"# \u0647\u0646\u0627 \u0627\u0642\u0648\u0645 \u0628\u0627\u0644\u062a\u0646\u0628\u0624 \u0644\u0628\u064a\u0627\u0646\u0627\u062a\u0627 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \npreds=model.predict(x_test)","c69d05ae":"print(preds)","99990f85":"# \u0647\u0646\u0627 \u0627\u0642\u0648\u0645 \u0628\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0644\u062a\u0646\u0628\u0624 \u0628\u0647\u0627 \u0648\u0639\u0631\u0636\u0647\u0627\n# \u0645\u0646 \u0627\u062c\u0644 \u0641\u0647\u0645 \u0646\u0627\u062a\u062c \u062a\u0644\u0643 \u0627\u0644\u062f\u0627\u0644\u0647 \u0639\u0644\u064a\u0643 \u0628\u0627\u0644\u0646\u0638\u0631 \u0627\u0644\u064a \u0627\u0644\u062e\u0644\u064a\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647\npredictions=np.argmax(preds,axis=1)\nprint(predictions)\nprint('-------------------------------')\n# \u0648\u0647\u0630\u0627 \u0645\u0633\u0627\u0648\u064a\u0627 \u0644\u0639\u062f\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\nprint(len(predictions))","ba02f3f6":"# \u0647\u0646\u0627 \u0627\u0628\u062f\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0642\u0627\u0626\u0645\u062a\u064a\u0646 \u0627\u062d\u062f\u0647\u0627 \u062a\u062d\u0645\u0644 \u0627\u0644\u0635\u062d\u064a\u062d \u0648\u0627\u0644\u0627\u062e\u0631\u064a \u062a\u062d\u0645\u0644 \u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u062e\u0637\u0627\ncorrect_labels=[] # for storing the correct predictions\nincorrect_labels=[] # for storing the incorrect predictions\n\n\n#for testing which predictions went wrong\n# \u0647\u0646\u0627 \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \u064a\u062f\u0648\u0631 \u0639\u0644\u064a \u0643\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u0648\u0642\u0639 \n# \u0648\u0645\u0646 \u062e\u0644\u0627\u0644 \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0643\u0648\u062f \u0646\u0641\u0647\u0645 \u0627\u0644\u0627\u0645\u0631 \n# \u0648\u0644\u0643\u0646 \u0647\u0630\u0627 \u0645\u0646 \u0627\u062c\u0644 \u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u062e\u0637\u0627 \nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])!=predictions[i]):\n        incorrect_labels.append(i)\n    if len(incorrect_labels)==10:\n        break","4759a68c":"# for testing which predictions are accurate\n# \u0647\u0630\u0627 \u0645\u0646 \u0627\u062c\u0644 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0647\n# \u0627\u0643\u0645\u0644 \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u062e\u0644\u064a \u0648\u0633\u064a\u0643\u0648\u0646 \u0643\u0644 \u0634\u064a\u0621 \u0628\u062e\u064a\u0631\nfor i in range(len(y_test)):\n    if (np.argmax(y_test[i])==predictions[i]):\n        correct_labels.append(i)\n    if len(correct_labels)==10:\n        break","4c6bd6d9":"# \u0633\u0646\u0642\u0648\u0645 \u0627\u0644\u0627\u0646 \u0628\u062a\u0635\u0648\u0631 \/\/ \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u0635\u062d\u064a\u062d\u0647\n# \u0627\u0648\u0644\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0639\u062f\u0627\u062f \u0628\u0642\u064a\u0645\u0647 \u0627\u0628\u062a\u062f\u0627\u0626\u064a\u0647 \u0635\u0641\u0631 \ncount=0\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0645\u062e\u0637\u0637 \u064a\u062d\u0645\u0644 10 \u0635\u0648\u0631 \u0645\u062b\u0644 \u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0633\u0627\u0628\u0642 \nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range (5):\n    for j in range (2):\n        ax[i,j].imshow(x_test[correct_labels[count]])\n        ax[i,j].set_title(\"Predicted butterfly : \"+ list_labels[predictions[correct_labels[count]]] +\"\\n\"+\"Actual butterfly : \"+ list_labels[np.argmax(y_test[correct_labels[count]])])\n        plt.tight_layout()\n        count+=1","ce3fd17c":"count=0\nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range(2):\n        ax[i,j].imshow(x_test[incorrect_labels[count]])\n        ax[i,j].set_title(\"Predicted butterfly : \" + list_labels[predictions[incorrect_labels[count]]] + \"\\n\"+\"Actual butterfly : \" +list_labels[np.argmax(y_test[incorrect_labels[count]])])\n        plt.tight_layout()\n        count+=1","06c8f99c":"# \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0627\u0644\u0645\u062f\u0631\u0628\u0647 \u0645\u0633\u0628\u0642\u0627 \u0648\u0647\u064a \u0645\u0648\u0628\u0627\u064a\u0644\u0646\u062a \u0627\u0644\u0627\u0635\u062f\u0627\u0631 \u0627\u0644\u062b\u0627\u0646\u064a \nimport tensorflow\n# \u0628\u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0647 \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0627\u0644\u0645\u062f\u0631\u0628\u0647 \u0647\u064a \u0645\u0648\u0636\u0648\u0639 \u0634\u064a\u0642 \u062c\u062f\u0627 \u0639\u0644\u064a\u0643 \u062f\u0631\u0627\u0633\u062a\u0647 \n# \u062a\u0644\u0643 \u0627\u0644\u0634\u0628\u0643\u0647 \u0644\u0647\u0627 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0647\u0627\u064a\u0628\u0631 \u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a \u0639\u0644\u064a\u0643 \u0636\u0628\u0637\u0647\u0627 \u0627\u0648\u0644\u0627 \n# \u0627\u0648\u0644 \u0647\u0627\u064a\u0628\u0631 \u0628\u0627\u0631\u0627\u0645\u062a\u0631 \u0647\u0648 \u064a\u0639\u0637\u064a\u0643 \u0627\u0644\u062d\u0631\u064a\u0647 \u0645\u0646 \u0627\u062c\u0644 \u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u062f\u062e\u0627\u0644 \u0627\u0644\u0637\u0628\u0642\u0647 \u0627\u0644\u0643\u062b\u064a\u0641\u0647 \u0627\u0644\u0646\u0647\u0627\u0626\u064a\u0647 \u0645\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0648 \u0627\u0644\u063a\u0627\u0621\u0647\u0627 \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u062d\u0627\u0644\u0647 \u062a\u0645 \u0627\u0644\u063a\u0627\u0621\u0647\u0627 \nmnet = tensorflow.keras.applications.mobilenet_v2.MobileNetV2(include_top=False, \n                                                      input_shape=(220, 220, 3),#same as of custom model\n                                                      pooling='avg',\n                                                      weights='imagenet')\n\nmnet.summary()","cef06517":"# \u0647\u0646\u0627 \u0646\u0628\u062f\u0627 \u0641\u064a \u0636\u0628\u0637 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0648\u062a\u062c\u0645\u064a\u0639\u0647 \u0648\u0627\u0636\u0627\u0641\u0647 \u0628\u0639\u0636 \u0627\u0644\u0637\u0628\u0642\u0627\u062a \u0627\u0644\u0627\u062e\u0631\u064a \n# \u0645\u0646 \u0627\u0644\u0627\u0636\u0627\u0641\u0627\u062a \u0647\u0648 \u0627\u0644\u0627\u0633\u0642\u0627\u0637 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \u0644\u0644\u062e\u0644\u0627\u064a\u0627 \u0627\u062b\u0646\u0627\u0621 \u0639\u0645\u0644\u064a\u0647 \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \n# \u0648\u0628\u0639\u062f\u0647\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0636\u0627\u0641\u0647 \u0627\u0644\u0637\u0628\u0642\u0647 \u0627\u0644\u0627\u062e\u064a\u0631\u0647 \u0648\u0647\u064a \u0637\u0628\u0642\u0647 \u0627\u0644\u0645\u062e\u0631\u062c\u0627\u062a \u0648\u0628\u0647\u0627 10 \u062e\u0644\u0627\u064a\u0627\nmodel2=Sequential([\n    mnet,\n    Dropout(0.25),\n    Dense(10,activation='softmax') # here we use 10 layers because we have to predict bewtween 10 classes\n])","ded85e52":"# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u062a\u062c\u0645\u064a\u062f \u062c\u0632\u0621 \u0645\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0648\u0647\u0648 \u0627\u0644\u062c\u0632\u0621 \u0627\u0644\u0645\u062a\u062e\u0635\u0635 \u0641\u064a \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0645\u0639\u0644\u0645\u0627\u062a \/ \u0627\u0644\u062a\u0639\u0644\u0645 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631 \nmodel2.layers[0].trainable = False\nmodel2.summary()","30d34ef0":"# \u0647\u0646\u0627 \u0627\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0645\u0631\u064a\u0631 \u0645\u0639\u0627\u062f\u0644\u0647 \u0627\u0644\u062e\u0633\u0627\u0631\u0647 \u0628\u0627\u0644\u0627\u0636\u0627\u0641\u0647 \u0627\u0644\u064a \u062a\u0645\u0631\u064a\u0631 \u0645\u0639\u0627\u062f\u0644\u0647 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u064a\u0636\u0627 \n# \u0645\u0644\u0627\u062d\u0638\u0647 \u0645\u0639\u0627\u062f\u0644\u0647 \u0627\u0644\u062a\u062d\u0633\u064a\u0646 \u0648\u0627\u0644\u062e\u0633\u0627\u0631\u0647 \u0647\u064a \u0627\u0645\u0631 \u0634\u064a\u0642 \u062c\u062f\u0627 \u0641\u064a \u0645\u0643\u062a\u0628\u0647 pytorch \n# \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062c\u0645\u064a\u0639 \u0627\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u062a\u0645\u0647\u064a\u062f\u0627 \u0644\u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u062c\u0632\u0621 \u0627\u0644\u0627\u062e\u064a\u0631 \u0645\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u062a\u064a \u0642\u0645\u0646\u0627 \u0628\u0627\u0636\u0627\u0641\u062a\u0647\u0627 \u0645\u0633\u0628\u0642\u0627\nmodel2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])","9f7cb0a8":"# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062f\u0631\u064a\u0628 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u062e\u0627\u0635 \u0628\u0646\u0627 \nhistory2=model2.fit(x_train,y_train,batch_size=12, epochs=10,validation_split=0.3)","d4e6354c":"# \u0647\u0646\u0627 \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u0628\u0639\u0636 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \nloss,accuracy=model2.evaluate(x_test,y_test)","da811d65":"# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0631\u0633\u0645 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \n# \u0648\u0630\u0644\u0643 \u0628\u0627\u0644\u0646\u0633\u0628\u0647 \u0627\u0644\u064a \u0627\u0644\u062f\u0642\u0647 \u0627\u0644\u062a\u064a \u0648\u0635\u0644\u0646\u0627 \u0627\u0644\u064a\u0647\u0627 \nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nplt.plot(history2.history['acc'])\nplt.plot(history2.history['val_acc'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy score')\nplt.title('Model Accuracy')\nplt.legend(['Train','Test'])\nplt.show()","7caa1b03":"# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0631\u0633\u0645 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0644\u0645\u0639\u0627\u062f\u0644\u0647 \u0627\u0644\u062e\u0633\u0627\u0631\u0647 \nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nplt.plot(history2.history['loss'])\nplt.plot(history2.history['val_loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Model Loss')\nplt.legend(['Train','Test'])\nplt.show()","c29a173e":"# \u0647\u0646\u0627 \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u0627\u0644\u062a\u0648\u0642\u0627\u062a \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062e\u0627\u0635\u0647 \u0628\u0646\u0627 \npreds2=model2.predict(x_test)","d4888838":"predictions2=np.argmax(preds2,axis=1)\nprint(predictions2)","7a2a7995":"test_data=np.argmax(y_test,axis=1)\nprint(test_data)\nprint('-------------------------------------------------------------------')\nprint(y_test[0:1])\nprint(y_test[1:2])\nprint(y_test[2:3])\nprint(y_test[3:4])\n# \u0628\u0639\u062f \u062a\u0644\u0643 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0642\u062f \u062a\u0643\u0648\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0635\u0628\u062d\u062a \u0648\u0627\u0636\u062d\u0647 \u0627\u0643\u062b\u0631 \n# \u0644\u062f\u064a\u0646\u0627 5 \u0646\u062a\u0627\u0626\u062c \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a\u0647\u0627 \u0648\u0644\u0643\u0644 \u0646\u0627\u062a\u062c \u064a\u0638\u0647\u0631 \u0631\u0642\u0645 1 \u0641\u064a \u0645\u0643\u0627\u0646 \u0645\u062e\u062a\u0644\u0641 \u0627\u0646 \u0642\u0645\u0646\u0627 \u0628\u062d\u0633\u0627\u0628 \u0645\u0648\u0642\u0639 \u0631\u0642\u0645 1 \u0641\u064a \u0643\u0644 \u0646\u0627\u062a\u062c \u0645\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \n# \u0633\u0646\u0644\u0627\u062d\u0638 \u0627\u0646 \u0627\u0644\u0631\u0642\u0645 \u0645\u062a\u0648\u0627\u0641\u0642 \u0648\u064a\u062f\u0644 \u0639\u0644\u064a \u0627\u0644\u0646\u0627\u062a\u062c ","af36f7a7":"# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u0646\u0634\u0627\u0621 \u0646\u0641\u0633 \u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0648\u0646\u0641\u0633 \u0627\u0644\u0634\u063a\u0644 \u0627\u0644\u0633\u0627\u0628\u0642 \u0645\u0646 \u0627\u062c\u0644 \u0641\u0635\u0644 \u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u062d\u0642\u064a\u0642\u064a\u0647 \u0628\u0627\u0644\u062a\u0648\u0642\u0639\u0627\u062a \u0627\u0644\u062e\u0627\u0637\u0626\u0647 \n# \u0648\u0630\u0644\u0643 \u062a\u0645\u0647\u064a\u062f\u0627 \u0644\u0639\u0631\u0636 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0635\u062d\u064a\u062d\u0647 \u0648\u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062e\u0627\u0637\u0626\u0647 \ncorrect_preds=[] #to store correct predictions\nincorrect_preds=[] # to store incorrect predictions\n\n# for testing incorrect predictions\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])!=predictions2[i]):\n        incorrect_preds.append(i)\n    if len(incorrect_preds)==10:\n        break","a5622f3b":"print(len(incorrect_preds))","df4634bd":"\n#for correct predictions\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==predictions2[i]):\n        correct_preds.append(i)\n    if len(correct_preds)==10:\n        break","e95bc8a3":"count=0\nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range (5):\n    for j in range (2):\n        ax[i,j].imshow(x_test[correct_preds[count]])\n        ax[i,j].set_title(\"Predicted butterfly : \"+ list_labels[predictions2[correct_preds[count]]] +\"\\n\"+\"Actual butterfly : \"+ list_labels[np.argmax(y_test[correct_preds[count]])])\n        plt.tight_layout()\n        count+=1","5f5c761a":"count=0\nfig,ax=plt.subplots(2,2)\nfig.set_size_inches(10,10)\nfor i in range(2):\n    for j in range(2):\n        ax[i,j].imshow(x_test[incorrect_preds[count]])\n        ax[i,j].set_title(\"Predicted butterfly : \" + list_labels[predictions2[incorrect_preds[count]]] + \"\\n\"+\"Actual butterfly : \" +list_labels[np.argmax(y_test[incorrect_preds[count]])])\n        plt.tight_layout()\n        count+=1","0b98ad46":"# \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0628\u0639\u0636 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0647\u0627\u0645\u0647\nimport requests # for generating http requests\nfrom PIL import Image\nfrom io import BytesIO\n# \u0646\u0628\u062f\u0627 \u0628\u062f\u0627\u0644\u0647 \u0627\u0633\u0627\u0633\u064a\u0647 \ndef process_image(url):\n    # \u0646\u062d\u0635\u0644 \u0639\u0644\u064a \u0627\u0644\u0631\u0627\u0628\u0637\n    response=requests.get(url)\n    # \u0628\u062d\u062b \u0627\u0644\u0645\u062d\u062a\u0648\u064a \n    img=Image.open(BytesIO(response.content))\n    # \u0627\u0633\u0627\u0633 \u0631\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647\n    fix,ax=plt.subplots(1,3,figsize=(15,20))\n    # \u0631\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \n    ax[0].imshow(img)\n    # \u0648\u0636\u0639 \u0639\u0646\u0648\u0627\u062a \u0644\u0644\u0645\u062e\u0637\u0637 \u0627\u0644\u0630\u064a \u064a\u062d\u0645\u0644 \u0627\u0644\u0635\u0648\u0631\u0647 \n    ax[0].set_title('image')\n    \n    #grayscale and normalization\n    # \u0647\u0646\u0627 \u0646\u0628\u062f\u0627 \u0628\u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0635\u0648\u0631\u0647 \u0648\u0627\u062e\u0636\u0627\u0639\u0647\u0627 \u0627\u0644\u064a \u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0639\u0627\u0645 \u0627\u0644\u0630\u064a \u064a\u0642\u0628\u0644\u0647 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \n    # \u0646\u0639\u0645\u0644 \u0627\u0648\u0644\u0627 \u0644\u062a\u062d\u0648\u064a\u0644\u0647\u0627 \u0627\u0644\u064a \u0645\u0635\u0641\u0648\u0641\u0647\n    img=np.array(img)\n    # \u0628\u0639\u062f\u0647\u0627 \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u064a \u0635\u0648\u0631\u0647 \u0645\u0644\u0648\u0646\u0647 \n    img=cv2.cvtColor(img,cv2.IMREAD_COLOR)\n    # \u0646\u0642\u0648\u0645 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631\u0647 \n    print(img.shape)\n    # \u0646\u0642\u0648\u0645 \u0628\u0642\u0633\u0645\u0647 \u0643\u0644 \u0628\u0643\u0633\u0644 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \u0639\u0644\u064a \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0648\u062d\u062f \u0645\u0646 \u0627\u062c\u0644 \u062a\u0628\u0633\u064a\u0637\u0647\u0627\n    img=img\/255.0\n    # \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631\u0647 \n    ax[1].imshow(img)\n    # \u0648\u0636\u0639 \u0639\u0646\u0648\u0627\u0646 \u0644\u0647\u0627 \n    ax[1].set_title('color image')\n    \n    #resizing\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0639\u062f\u064a\u0644 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u064a \u0627\u0644\u0634\u0643\u0644 \u0627\u0644\u0639\u0627\u0645 \n    img=cv2.resize(img,(220,220))\n    # \u0637\u0628\u0627\u0639\u0647 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631\u0647 \n    print(img.shape)\n    # \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631\u0647\n    ax[2].imshow(img)\n    # \u0648\u0636\u0639 \u0639\u0646\u0648\u0627\u0646 \u0644\u0647\u0627 \n    ax[2].set_title('predicted image')\n    # \u062a\u0644\u0643 \u062a\u0639\u0644\u064a\u0645\u0647 \u0647\u0627\u0645\u0647 \u0641\u0647\u064a \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0639\u062f\u064a\u0644 \u0645\u0648\u0642\u0639 \u0627\u0644\u0645\u062d\u0627\u0648\u0631 \u0628\u0627\u0644\u0646\u0633\u0628\u0647 \u0644\u0644\u0645\u062e\u0637\u0637\u0627\u062a \u0627\u0644\u0641\u0631\u0639\u064a\u0647 \u0648\u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u062a\u0641\u0639\u0644 \u0630\u0644\u0643 \u0628\u0634\u0643\u0644 \u0641\u0648\u0631\u064a \u0641\u0648\u0631 \u0627\u0633\u062a\u062f\u0639\u0627\u0626\u0647\u0627 \n    plt.tight_layout()\n    img=np.expand_dims(img,axis=0)\n    #making it model ready\n    print(img.shape)\n    return img","12122006":"#predictions\n# \u0647\u0646\u0627 \u062f\u0627\u0644\u0647 \u0627\u062e\u0631\u064a \u062a\u062d\u0645\u064a\u0644 \u0646\u0641\u0633 \u0627\u0644\u0645\u062a\u063a\u064a\u0631 \u0644\u0644\u062f\u0627\u0644\u0647 \u0627\u0644\u0627\u0648\u0644\u064a \u0648\u0627\u0644\u0647\u062f\u0641 \u0647\u0648 \u0627\u0644\u062a\u0645\u0631\u064a\u0631 \u0628\u064a\u0646\u0647\u0645 \ndef predict(url):\n    # \u0647\u0646\u0627 \u0643\u0644 \u0627\u0644\u062a\u063a\u064a\u0631\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062a\u0645 \u0639\u0644\u064a \u0627\u0644\u0635\u0648\u0631\u0647 \u0641\u064a \u0627\u0644\u062f\u0627\u0644\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \u064a\u062d\u062f\u062b \u0644\u0647\u0627 \u062a\u062e\u0632\u064a\u0646 \u0639\u0644\u064a \u0647\u0630\u0627 \u0627\u0644\u0645\u062a\u063a\u064a\u0631 \n    img=process_image(url)\n    # \u0647\u0646\u0627 \u064a\u062d\u062f\u062b \u0627\u0644\u062a\u0628\u0626\u0648 \u0628\u0641\u0626\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u0645\u0645\u0631\u0647 \u0627\u0644\u064a \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \n    label=model.predict(img)\n    # \u0647\u0646\u0627 \u062c\u0627\u0631 \u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0646\u0641\u0633 \u0627\u0644\u0631\u0642\u0645 \n    final_1=np.argmax(label,axis=1)[0]\n    # \u0647\u0646\u0627 \u0627\u0644\u0628\u0646\u0627\u0621 \u0639\u0644\u064a \u0645\u062d\u0648\u0631 \u0627\u0643\u0633 \n    plt.xlabel(list_labels[final_1])\n    return list_labels[final_1]","3a11bba9":"predict('https:\/\/media1.picsearch.com\/is?qxlz1LhMfQh73j377t9Yu40tRz2PO0Zm_KZ08yMEnLY&height=248')","59f52100":"predict('https:\/\/media5.picsearch.com\/is?pljEx0l_3lB284vBBE4XXxioAfoTjCDQWfUqy5wnMWY&height=272')","1cb8c258":"predict('https:\/\/th.bing.com\/th\/id\/R.9e38353c3451011c9574f98e0bbcd0db?rik=%2fJ9ebpOQoUW03w&pid=ImgRaw&r=0')","927f3b1a":"#### mapping the labels with their species","7daff38c":"### OneHotEncoding:To deal with categorical values we need to preprocess it using onehot ecnoding","d054213a":"### visualizing the incorrect predictions , here one thing we can observe that our model predicts 'Papilo cresphontes' in three cases ,which leads to conclude that our model is little prone to overfitting because 'Papilo cresphontes' is the class with second largest frequency count","fe619204":"Well this is for experiment and have fun with the model you have built.You can load images from the internet and predict using the code written below\n\n","b9d55374":"### visualizing the correct predictions","0d6e42cc":"**\u0633\u0646\u0628\u062f\u0627 \u0627\u0644\u0627\u0646 \u0645\u0646  \u0641\u064a \u0631\u062d\u0644\u0647 \u0628\u0646\u0627\u0621 \u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u062a\u0639\u0644\u0645 \u0627\u0644\u0639\u0645\u064a\u0642 \u0648\u0644\u0643\u0646\u0646\u0627 \u0633\u0646\u0628\u062f\u0627 \u0628\u0634\u064a\u0621 \u0628\u0633\u064a\u0637 \u0627\u0648\u0644\u0627 \u0648\u0647\u0648 \u0628\u0646\u0627\u0621 \u0645\u0648\u062f\u064a\u0644 \u0645\u0646 \u0635\u0646\u0639\u0646\u0627 \u0642\u0628\u0644 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0627\u0644\u0645\u062f\u0631\u064a\u0628\u0647 \u0645\u0633\u0628\u0642\u0627**","101a1eab":"####  \u0647\u0646\u0627 \u0646\u0644\u0627\u062d\u0638 \u0627\u0646 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u062e\u0627\u0635 \u0628\u0646\u0627 \u0642\u062f \u062d\u0635\u0644 \u0639\u0644\u064a \u0646\u062a\u0627\u0626\u062c \u0639\u0627\u0644\u064a\u0647 \u0628\u0639\u062f \u062a\u0637\u0628\u064a\u0642 \u0628\u0639\u0636 \u0627\u0644\u062a\u0639\u062f\u064a\u0644\u0627\u062a \u0639\u0644\u064a\u0647 \u0645\u0642\u0627\u0631\u0646\u0647 \u0628\u0627\u0644\u0646\u0633\u062e\u0647 \u0627\u0644\u0627\u0635\u0644\u064a\u0647 \u0644\u0644\u0645\u0648\u062f\u064a\u0644 \u0641\u0642\u062f \u0648\u0635\u0644 \u0645\u0633\u062a\u0648\u064a \u0627\u0644\u062f\u0642\u0647 \u0627\u0644\u064a 0.996 \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628  \u0648\u0646\u0633\u0628\u0647 \u0648\u0635\u0644\u062a \u0627\u0644\u064a 0.8947 \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u0642\u0648\u064a\u0645  ","22a7a77e":"## Experiment and fun","deacf277":"### lets analyse the predictions generated by our custom model, here we are testing our model on 10 images","a1b94526":"**\u0627\u0644\u0627\u0646 \u0633\u0646\u0646\u062a\u0642\u0644 \u0627\u0644\u064a \u062e\u0637\u0648\u0647 \u0627\u062e\u0631\u064a \u0648\u0647\u064a \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0634\u0628\u0643\u0627\u062a \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0627\u0644\u0645\u062f\u0631\u0628\u0647 \u0645\u0633\u0628\u0642\u0627**","684841ab":"### To avoid overfitting and increasing the model performance we are using the technique known as transfer learning, where we can use the pre trained models for predictions,in our case we are using mobilenet","139a680a":"The image we want to predict is also needed to be preprocessed according to the requirements of the model.You need to take care of resizing like we did below to resize it in (220,220) dimensions","c2e39709":"\n<h1 align=\"center\"> Activation Equations<\/h1>\n<center><img src=\"https:\/\/pyimagesearch.com\/wp-content\/uploads\/2018\/12\/keras_conv2d_activation_functions.png?_ga=2.67571540.496225751.1633023372-1939758846.1629290539\" width=\"60%\" >\n\n","3297e832":"### after preprocessing the data we can visualize our dataset ,here we selected 10 random images from the dataset and plotted with their appropriate labels","d67d554f":"**\u062a\u0645 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0639\u0635\u0628\u064a\u0647 \u0648\u0644\u0643\u0646 \u0644\u0645 \u0646\u0642\u0645 \u0628\u062e\u0637\u0648\u0647 \u0647\u0627\u0645\u0647 \u0639\u0644\u064a\u0647\u0627 \u0648\u0647\u064a \u0627\u0644\u062a\u062c\u0645\u064a\u062f \u0644\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0639\u0635\u0628\u064a\u0647**","0bb1314b":"### visualizing the incorrect predictions of model2 ","09fe25fc":"**\u0647\u0646\u0627 \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0634\u0631\u062d \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0627\u0644\u0645\u0628\u0646\u064a \u0628\u0647\u062f\u0641 \u0627\u0644\u062a\u0646\u0628\u0624 \u0628 10 \u0627\u0646\u0648\u0627\u0639 \u0645\u0646 \u0627\u0646\u0648\u0627\u0639 \u0627\u0644\u0641\u0631\u0627\u0634\u0627\u062a \u0627\u0644\u062c\u0645\u064a\u0644\u0647 \u0648\u0627\u0644\u062a\u0641\u0631\u064a\u0642 \u0628\u064a\u0646\u0647\u0645**","30fd8500":"**\u0641\u064a \u0627\u0644\u0633\u0637\u0648\u0631 \u0627\u0644\u0642\u0644\u064a\u0644\u0647 \u0627\u0644\u0642\u0627\u062f\u0645\u0647 \u0627\u0642\u062f\u0645 \u0627\u0644\u064a\u0643 \u0634\u0631\u062d\u0627 \u0628\u0633\u064a\u0637\u0647 \u0644\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0647 \u0627\u0644\u0648\u0627\u0631\u062f\u0647 \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0635\u0641\u062d\u0647  \u0648\u0630\u0644\u0643 \u0628\u0627\u0644\u0644\u063a\u0647 \u0627\u0644\u0639\u0631\u0628\u064a\u0647 , \u064a\u0645\u0643\u0646 \u0627\u0646 \u062a\u062c\u062f \u0628\u0639\u0636 \u0627\u0644\u0627\u062e\u0637\u0627\u0621 \u0627\u0644\u0627\u0645\u0644\u0627\u0626\u064a\u0647 \u0627\u0646 \u0643\u0627\u0646\u062a \u0645\u0624\u062b\u0631\u0647 \u0641\u064a \u0648\u0635\u0648\u0644 \u0627\u0644\u0645\u0639\u0646\u064a \u0641\u0627\u062e\u0628\u0631\u0646\u064a \u0628\u0647\u0627 \u0648\u0627\u0644\u0627 \u0641\u062a\u062c\u0627\u0647\u0644\u0647\u0627 \u0627\u0648 \u064a\u0645\u0643\u0646\u0643 \u062a\u0639\u062f\u064a\u0644 \u0627\u0644\u0635\u0641\u062d\u0647 \u0648\u062a\u0635\u062d\u064a\u062d \u0627\u0644\u062e\u0637\u0627 \u0648\u0633\u0627\u0639\u062f \u0641\u064a \u0627\u0644\u0646\u0634\u0631 \u0645\u0646 \u0627\u062c\u0644 \u062a\u0645\u0643\u064a\u0646 \u062c\u064a\u0644 \u062c\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0646\u0627\u0637\u0642\u064a\u0646 \u0628\u0627\u0644\u0639\u0631\u0628\u064a\u0647 \u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u0645\u062c\u0627\u0644 \u0627\u0644\u0648\u0627\u0633\u0639**","2a26e3fa":"## Model Building:here we are going to two models -custom model and pre trained model.\n### Lets begin with the custom model","0deaee7c":"### here are actual labels with their coresponding species of butterflies ","67602348":"### lets first begin with importing the data from directories and converting images to array and labels","f61a6bcf":"### so we are done with all the preprocessing ,now we have to split our data into train and test set  ","3e32d178":"**\u0627\u0644\u0639\u0645\u0644\u064a\u0647 \u0627\u0644\u062a\u064a \u0633\u0646\u0642\u0648\u0645 \u0628\u0647\u0627 \u0647\u064a \u0639\u0645\u0644\u064a\u0647 \u062c\u0645\u064a\u0644\u0647 \u0648\u0645\u0645\u062a\u0639\u0647 \u0639\u0644\u064a\u0643 \u0627\u0644\u0627\u0633\u062a\u0645\u062a\u0627\u0639 \u0628\u0647\u0627 \u0644\u0627\u0646 \u0628\u0647\u0627 \u0627\u0644\u0643\u062b\u064a\u0631 \u0644\u062a\u0639\u0644\u0645\u0647 \u0633\u0646\u0642\u0648\u0645 \u0628\u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0635\u0648\u0631 \u0648\u0645\u0639\u0627\u0644\u062c\u062a\u0647\u0627 \u062d\u062a\u064a \u062a\u062a\u0648\u0627\u0641\u0642 \u0645\u0646 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u0630\u064a \u062a\u0645 \u0627\u0646\u0634\u0627\u0621\u0647 \u0648\u0647\u0630\u0627 \u0627\u0644\u0627\u0645\u0631 \u0647\u0627\u0645\u0627 \u062c\u062f\u0627 , \u0628\u0639\u062f\u0647\u0627 \u0633\u0646\u0642\u0648\u0645 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \u0639\u0644\u064a 3 \u0627\u0634\u0643\u0627\u0644**","378f7d19":"### here we can observe our new model is performing quite well as compare to our custom model","cf75c8ef":"### we have to reshape our image array in oreder to meet keras expectations for fitting into model for training","c952d41f":"### Thats all kagglers .I hope that you liked this notebook , if you want to ask anything or want to give any suggestion feel free to write in the comment section.\n## \u0634\u0643\u0631\u0627 \u062c\u0632\u064a\u0644\u0627 \u0639\u0644\u064a \u0627\u0644\u0645\u062a\u0627\u0628\u0639\u0647 , \u0627\u062a\u0645\u0646\u064a \u0627\u0646 \u064a\u0643\u0648\u0646 \u0627\u0644\u0627\u0645\u0631 \u0627\u0635\u0628\u062d \u0627\u0643\u062b\u0631 \u0633\u0647\u0648\u0644\u0647 \u0628\u0627\u0644\u0646\u0633\u0628\u0647 \u0627\u0644\u064a\u0643 \n## \u0648\u0641\u064a \u0627\u0644\u0646\u0647\u0627\u064a\u0647 , \u0627\u0634\u0643\u0631 \u0627\u0644\u0645\u0624\u0644\u0641 \u0627\u0644\u0627\u0633\u0627\u0633\u064a \u0644\u062a\u0644\u0643 \u0627\u0644\u0635\u0641\u062d\u0647 \u0627\u0644\u0628\u0631\u0645\u062c\u064a\u0647 \u0639\u0644\u064a \u0627\u0644\u0645\u062c\u0647\u0648\u062f \u0627\u0644\u0630\u064a \u0628\u0630\u0644\u0647 , \u0644\u0642\u062f \u062a\u0639\u0644\u0645\u0646\u0627 \u0627\u0644\u0643\u062b\u064a\u0631 \n## Thank You","858d8126":"**\u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u062f \u062a\u0645 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0627\u062f\u0648\u0627\u062a \u0648\u0627\u0644\u062a\u0642\u0646\u0628\u0627\u062a \u0627\u0644\u062c\u0645\u064a\u0644\u0647 \u0641\u064a \u0628\u0646\u0627\u0621 \u0645\u0648\u062f\u064a\u0644 \u0642\u0648\u064a \u0648\u0630\u0643\u064a \u0648\u0630\u0627 \u0643\u0641\u0627\u0621\u0647 \u0639\u0627\u0644\u064a\u0647 , \u062d\u064a\u062b \u0627\u0646\u0647 \u0641\u064a \u0627\u0644\u0628\u062f\u0627\u064a\u0647 \u062a\u0645 \u0628\u0646\u0627\u0621 \u0634\u0628\u0643\u0647 \u0639\u0635\u0628\u064a\u0647 \u0639\u0627\u062f\u064a\u0647 \u0648\u0628\u0639\u062f\u0647\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0634\u0628\u0643\u0647 \u0639\u0635\u0628\u064a\u0647 \u0645\u062f\u0631\u0628\u0647 \u0645\u0633\u0628\u0642\u0627 \u0645\u0646 \u0627\u062c\u0644 \u0631\u0641\u0639 \u0627\u0644\u0643\u0641\u0627\u0621\u0647 \u0648\u0627\u0644\u062a\u062e\u0644\u0635 \u0645\u0646 \u0645\u0634\u0643\u0644\u0647 \u0641\u0631\u0637 \u0627\u0644\u062a\u062c\u0647\u064a\u0632, \u0633\u0646\u0633\u064a\u0631 \u0645\u0639\u0627 \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0631\u062d\u0644\u0647 \u0628\u062f\u0627\u064a\u0647 \u0645\u0646 \u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0635\u0648\u0644\u0627 \u0627\u0644\u064a \u062a\u0648\u0642\u0639 \u0635\u0648\u0631\u0627 \u0639\u0634\u0648\u0627\u0626\u064a\u0647 \u0644\u0644\u0641\u0631\u0627\u0634\u0627\u062a, \u0627\u0633\u062a\u0645\u062a\u0631 \u0628\u062a\u0644\u0643 \u0627\u0644\u0631\u062d\u0644\u0647 \u062d\u062a\u064a \u062a\u062a\u0639\u0644\u0645**","5e39d99d":"### visualizing the distribution of classes, here we can observe that class Nymphalis_antiopa has highest frequency and Pieris_rapae has lowest","a9c401fc":"### visualizing the correct predictions of model2","578b0d68":"### now we have to convert images into numpy array format,and then normalize it","65d4a6f6":"**\u0644\u0642\u062f \u062d\u0635\u0644\u0646\u0627 \u0639\u0644\u064a \u0646\u062a\u0627\u0626\u062c \u0645\u0645\u062a\u0627\u0632\u0647 \u0648\u0627\u064a\u0636\u0627 \u0639\u0645\u0644\u0646\u0627 \u0639\u0644\u064a \u062a\u0642\u0644\u064a\u0644 \u0641\u0631\u0637 \u0627\u0644\u062a\u062c\u0647\u064a\u0632 \u0648\u0647\u064a \u0627\u0644\u0645\u0634\u0643\u0644\u0647 \u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u0644\u062f\u064a\u0646\u0627 \u0641\u064a \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0644\u0633\u0627\u0628\u0642\u0647**","406283c4":"### below you can see that the no of incorrect predictions in only just 5 ,shows the model is performing quite well"}}