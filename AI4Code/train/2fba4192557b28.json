{"cell_type":{"82fea38a":"code","fa8d90c6":"code","19ea6ad5":"code","000ae87a":"code","4393223e":"code","56eb6132":"code","b821deb1":"code","d228e6b9":"code","86896298":"code","89fa5872":"markdown","9cc3f7bf":"markdown","4807d3f1":"markdown","51dafe96":"markdown","0fa63448":"markdown"},"source":{"82fea38a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport os\n","fa8d90c6":"from kaggle_environments import make, utils, evaluate\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import renderer\n\nenv = make(\"hungry_geese\", debug=True)\n\n# 2 Geeses ['greedy', 'random', 'greedy', 'random']\n# if you want 3 Geeses use ['greedy', 'random', 'greedy', 'random', 'greedy', 'random']\nbot_list = ['greedy', 'random', 'greedy', 'random']\n","19ea6ad5":"states = env.run(bot_list)\ngame_len = len(states)\nenv.render(mode=\"ipython\", width=500, height=350)","000ae87a":"from kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\ndef agent(obs_dict, config_dict):\n    \"\"\"This agent always moves to observation.food[0] \"\"\"\n    print(config_dict)\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n    food = observation.food[0]\n    food_row, food_column = row_col(food, configuration.columns)\n\n    if food_row > player_row:\n        return Action.SOUTH.name\n    if food_row < player_row:\n        return Action.NORTH.name\n    if food_column > player_column:\n        return Action.EAST.name\n    return Action.WEST.name","4393223e":"# Setup a hungry_geese environment.\nenv = make(\"hungry_geese\")","56eb6132":"env.run([agent, \"random\"])\nenv.render(mode=\"ipython\", width=500, height=350)","b821deb1":"env.run([agent, agent])\nenv.render(mode=\"ipython\", width=500, height=350)","d228e6b9":"def mean_reward(rewards):\n    return sum(r[0] for r in rewards) \/ float(len(rewards))\n\n# Run multiple episodes to estimate its performance.\nprint(\"Greedy vs Random Agent:\", mean_reward(evaluate(\"hungry_geese\", [agent, \"random\"], num_episodes=10)))\nprint(\"Greedy vs Greedy:\", mean_reward(evaluate(\"hungry_geese\", [agent, agent], num_episodes=10)))","86896298":"%%writefile agent.py\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\ndef agent(obs_dict, config_dict):\n    \n    print(config_dict)\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n    food = observation.food[0]\n    food_row, food_column = row_col(food, configuration.columns)\n\n    if food_row > player_row:\n        return Action.SOUTH.name\n    if food_row < player_row:\n        return Action.NORTH.name\n    if food_column > player_column:\n        return Action.EAST.name\n    return Action.WEST.name","89fa5872":"# **Hungry Geese competition let's go**\n\nHungry Geese competition belong brand-new type of ML competition called Simulations. \n\nit is a grid-based game \/ grid-based simulations\n\nReferances:\n\n\n[Connect X](https:\/\/www.kaggle.com\/c\/connectx) (Getting Started Simulation Competitio)\n\n[Kaggle Simulations](https:\/\/www.kaggle.com\/simulations)\n\n[Game AI and Reinforcement Learning](https:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning)\n\n","9cc3f7bf":"**Greedy - Random**","4807d3f1":"Please consider upvoting if you found this useful to you.\n\nThanks.","51dafe96":"# Create Submission File","0fa63448":"**Greedy - Greedy**"}}