{"cell_type":{"ef971081":"code","c96c9333":"code","839300f5":"code","bb9e2bba":"code","6035062d":"code","737af1fc":"code","bde5a2c9":"code","4c46c6c8":"code","bb913f80":"code","a621212c":"code","e36f54ec":"code","5c2b1bcd":"code","f9945667":"code","180ba394":"code","10ad2961":"code","17ad2c3c":"code","657f4257":"code","3873e82e":"code","74dd52c7":"markdown","87834d68":"markdown","0f5f230c":"markdown","5bef8bd3":"markdown","38c7ac73":"markdown","a0f86325":"markdown"},"source":{"ef971081":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n        \n%config InlineBackend.figure_format = 'retina'\nplt.rcParams['figure.dpi'] = 100","c96c9333":"job_code = pd.read_excel('\/kaggle\/input\/korea-income-and-welfare\/job_code_translated.xlsx')\ndf = pd.read_csv('\/kaggle\/input\/korea-income-and-welfare\/Korea Income and Welfare.csv')\ndf","839300f5":"# fill with previous values\njob_code.fillna(method='pad', inplace=True)","bb9e2bba":"# Merge job_code, df\ndf['occupation'] = df['occupation'].replace({' ': 0}).astype(int)\ndf = pd.merge(df, job_code, left_on='occupation',\n              right_on='job_code',  how='left')","6035062d":"# Creating & Editing Features\n\n# Creating\n# getting job\ndf['job_code'] = df['job_code'].fillna(0)\ndf['getting job'] = df['job_code'].map(lambda x: 1 if x != 0 else x)\ndf['age'] = np.round(2021 - df['year_born'])\n\n# Editing\n# Family member\ndf['family_member'] = df['family_member'].map(lambda x: x\n                                              if x in [1, 2, 3, 4] else '5+')","737af1fc":"# region\ndf.loc[:, 'region'] = df['region'].replace({\n    1: 'Seoul',\n    2: 'Kyeong-gi',\n    3: 'Kyoung-nam',\n    4: 'Kyoung-buk',\n    5: 'Chung-nam',\n    6: 'Gang-won\/Chung-buk',\n    7: 'Jeolla\/Jeju'\n})\n# gender\ndf.loc[:, 'gender'] = df['gender'].replace({1: 'male', 2: 'female'})\n\n# education_level\ndf.loc[:, 'education_level'] = df['education_level'].replace({\n    1:\n    'no education(<7)',\n    2:\n    'no education(>=7)',\n    3:\n    'elementary',\n    4:\n    'middle school',\n    5:\n    'high school',\n    6:\n    'college',\n    7:\n    'university degree',\n    8:\n    'MA',\n    9:\n    'doctoral degree'\n})\n# marriage\ndf.loc[:, 'marriage'] = df['marriage'].replace({\n    1: 'not applicable(<18)',\n    2: 'married',\n    3: 'separated by death',\n    4: 'separated',\n    5: 'not married yet',\n    6: 'others'\n})\n\n# religion\ndf.loc[:, 'religion'] = df['religion'].replace({\n    1: 'have religion',\n    2: 'do not have'\n})\n\ndf.loc[:, 'reason_none_worker'] = df['reason_none_worker'].replace({\n    '1':\n    'no capable',\n    '2':\n    'in military service',\n    '3':\n    'studying in school',\n    '4':\n    'prepare for school',\n    '5':\n    'prepare to apply job',\n    '6':\n    'house worker',\n    '7':\n    'caring kids at home',\n    '8':\n    'nursing',\n    '9':\n    'giving-up economic activities',\n    '10':\n    'no intention to work',\n    '11':\n    'others'\n})\n\ndf['Main_category'] = df['\ub300\ubd84\ub958'].replace({\n    '1 \uad00\ub9ac\uc790': 'Manager',\n    '2 \uc804\ubb38\uac00 \ubc0f \uad00\ub828 \uc885\uc0ac\uc790': 'Expert and related worker',\n    '3 \uc0ac\ubb34 \uc885\uc0ac\uc790': 'Office worker',\n    '4 \uc11c\ube44\uc2a4 \uc885\uc0ac\uc790': 'Service worker',\n    '5 \ud310\ub9e4 \uc885\uc0ac\uc790': 'Sales worker',\n    '6 \ub18d\ub9bc\uc5b4\uc5c5 \uc219\ub828 \uc885\uc0ac\uc790': 'Skilled worker in agriculture, forestry and fisheries',\n    '7 \uae30\ub2a5\uc6d0 \ubc0f \uad00\ub828 \uae30\ub2a5 \uc885\uc0ac\uc790': 'Craftsmen and related skilled workers',\n    '8 \uc7a5\uce58\u318d\uae30\uacc4 \uc870\uc791 \ubc0f \uc870\ub9bd \uc885\uc0ac\uc790':\n    'Equipment and machine operation and assembly workers',\n    '9 \ub2e8\uc21c\ub178\ubb34 \uc885\uc0ac\uc790': 'Simple labor worker',\n    'A \uad70\uc778': 'Soldier'\n})\n\n# df['reason_none_worker'] = df['reason_none_worker'].replace({' ' : np.nan, '99' : np.nan, '0' : np.nan})","bde5a2c9":"# 3-years data(2005, 2012, 2018)\n\nregion_order = ['Seoul', 'Kyeong-gi', 'Kyoung-nam', 'Kyoung-buk',\n                'Chung-nam', 'Gang-won\/Chung-buk', 'Jeolla\/Jeju']\n\n\ndef plot_gender(in_df, region_order, ax):\n\n    region_man = in_df[in_df['gender'] == 'male']['region'].value_counts()[\n        region_order]\n    region_woman = in_df[in_df['gender'] == 'female']['region'].value_counts()[\n        region_order]\n\n    ax.bar(region_man.index, region_man, width=0.7,\n           edgecolor='black', color='#337882', alpha=0.5, label='man')\n    ax.bar(region_woman.index, -region_woman, width=0.7,\n           edgecolor='black', color='#e85255', alpha=0.5, label='woman')\n\n    # Annotation\n\n    for idx in region_man.index:\n        # Man\n        ax.annotate(f\"{region_man[idx]}\",\n                    xy=(idx, region_man[idx] + 100),\n                    va='center',\n                    ha='center',\n                    fontweight='light',\n                    fontsize=9)\n        # Woman\n        ax.annotate(f\"{region_woman[idx]}\",\n                    xy=(idx, -region_woman[idx] - 100),\n                    va='center',\n                    ha='center',\n                    fontweight='light',\n                    fontsize=9)\n\n        ax.set_ylim(-max(region_woman) - 150, max(region_man) + 150)\n        ax.set_yticks([])\n        ax.set_xticklabels(region_man.index, rotation=90)\n\n        # remove guide line\n        for s in ['top', 'bottom', 'left', 'right']:\n            ax.spines[s].set_visible(False)\n\n\ndf_2005 = df[df['year'] == 2005]\ndf_2012 = df[df['year'] == 2012]\ndf_2018 = df[df['year'] == 2018]\n\ndata = [df_2005, df_2012, df_2018]\n\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\ni = 0\nfor d in data:\n    plot_gender(d, region_order, axes[i])\n    i += 1\n\naxes[2].legend(bbox_to_anchor=(1, 1.05))\naxes[0].set_ylabel('2005')\naxes[1].set_ylabel('2012')\naxes[2].set_ylabel('2018')\n\nfig.suptitle('Number of gender by region', fontsize=12, fontweight='bold')\nplt.show()","4c46c6c8":"# Age distribution by region\n\n\ndef plot_age(indf, region_order, ax, color):\n    i = 0\n    for idx in region_order:\n        val = indf[indf['region'] == idx]['age']\n        sns.distplot(val, hist=False, color=color, ax=axes[i], label= ' ')\n\n        axes[i].set_xlabel(idx, fontsize=11, fontweight='light')\n        axes[i].set_yticks([])\n#         axes[i].set_ylabel(idx, fontsize = 10)\n        \n        axes[i].set_xlim(0, 110)\n        axes[i].set_ylim(0, 0.035)\n        axes[i].set_xticks([0, 20, 40, 60, 80, 100])\n        axes[i].xaxis.set_label_position('top')\n        \n        for s in ['top', 'left', 'right']:\n            axes[i].spines[s].set_visible(False)\n\n#         axes[i].axvline(x = val.mean(), ymin = 0, ymax = 0.8, ls = '--', lw = 0.5, color = color)\n#         axes[i].annotate(f\"{int(np.round(val.mean()))}\",\n#                         xy = (val.mean(), 0.03),\n#                         va = 'center',\n#                         ha = 'center')\n\n        i += 1\n\ncolors = ['#fe88a0', '#74c9c6', '#c2e88d']\n\nfig, axes = plt.subplots(1, 7, figsize=(16, 3))\n\ni = 0\nfor d, c in zip(data, colors):\n    plot_age(d, region_order, axes, c)\n    i += 1\n    \n# Remove legend\nfor i in range(6):\n    plt.setp(axes[i].legend(), visible=False)\n    \nfig.text(0.4,1, 'Age distribution by region(density)', fontsize = 14, fontweight = 'bold')\nplt.legend(['2005', '2012', '2018'], bbox_to_anchor = (1, 1))\nplt.show()\n","bb913f80":"# Education level by region\ned_order = ['no education(<7)', 'no education(>=7)', 'elementary',\n            'middle school', 'high school', 'college',\n            'university degree', 'MA', 'doctoral degree']\n\n\ndef plot_ed_lv(indf, region_order, ax):\n\n    region_ed = indf.groupby(['region', 'education_level'])[\n        'education_level'].count().unstack().reindex(region_order)\n\n    # find missing columns\n    if len(set(ed_order) - set(region_ed.columns)) != 0:\n        not_include = list(set(ed_order) - set(region_ed.columns))\n        region_ed[not_include] = 0\n\n    region_ed_ratio = (region_ed.T \/ region_ed.sum(axis=1)).T\n\n    # Draw stacked bar plot\n\n    colors = sns.color_palette('hls', n_colors=len(ed_order))\n\n    i = 0\n    for idx, color in zip(ed_order, colors):\n        ax.bar(region_ed_ratio.index,\n               region_ed_ratio[idx], width=0.7, edgecolor='black', bottom=i, label=idx, color=color)\n\n        # annotation part of ed_order\n        for ro in region_order:\n            if idx in ['no education(>=7)', 'elementary', 'middle school', 'high school', 'college', 'university degree']:\n\n                ax.annotate(f\"{region_ed_ratio[idx][ro] * 100 :.1f}%\",\n                            xy=(ro, region_ed_ratio[idx][ro]\/2 + i[ro]),\n                            va='center',\n                            ha='center',\n                            color='white',\n                            fontsize=8)\n        i += region_ed_ratio[idx]\n\n    ax.set_yticks([])\n    ax.set_xticklabels(region_ed_ratio.index, rotation=90)\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax.spines[s].set_visible(False)\n\nfig, axes = plt.subplots(1, 3, figsize=(16, 4))\ni = 0\nfor d in data:\n    plot_ed_lv(d, region_order, axes[i])\n    i += 1\naxes[2].legend(bbox_to_anchor=(1, 0.98))\naxes[0].set_ylabel('2005')\naxes[1].set_ylabel('2012')\naxes[2].set_ylabel('2018')\n\nfig.suptitle('Education level by region', fontsize=12, fontweight='bold')\nplt.show()","a621212c":"# Family member\ndef plot_family(indf, region_order, ax):\n\n    region_family = indf.groupby(['region', 'family_member'])[\n        'family_member'].count().unstack().reindex(region_order)[::-1]\n    region_family_ratio = (region_family.T \/ region_family.sum(axis=1)).T\n\n    # Draw stacked bar plot\n    colors = sns.color_palette('hls', n_colors=len(region_family.columns))\n\n    #i = 0\n    i = pd.Series(data=[0 for _ in range(len(region_order))],\n                  index=region_order[::-1])\n\n    for col, color in zip(region_family_ratio.columns, colors):\n        ax.barh(region_family_ratio.index,\n                region_family_ratio[col], height=0.7, edgecolor='black', left=i, label=col, color=color)\n        for ro in region_order:\n            ax.annotate(f\"{region_family_ratio[col][ro] * 100:.1f}%\",\n                        xy=(i[ro] + region_family_ratio[col][ro] \/ 2, ro),\n                        va='center',\n                        ha='center',\n                        fontsize=8,\n                        color='white')\n        i += region_family_ratio[col]\n        \n    ax.set_xticks([])\n    ax.set_yticklabels(region_family_ratio.index)\n    ax.xaxis.set_label_position('top')\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax.spines[s].set_visible(False)\n\nfig, axes = plt.subplots(1, 3, figsize=(16, 5))\ni = 0\nfor d in data:\n    plot_family(d, region_order, axes[i])\n    i += 1\n\naxes[1].legend(loc='lower center', bbox_to_anchor=(0.45, -0.1), ncol=5)\naxes[0].set_xlabel('2005', fontweight='bold', fontsize=12)\naxes[1].set_xlabel('2012', fontweight='bold', fontsize=12)\naxes[2].set_xlabel('2018', fontweight='bold', fontsize=12)\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\n\nfig.suptitle('Family members by region', fontsize=14, fontweight='bold')\nplt.show()","e36f54ec":"# average yearly income\n\ndef plot_income(indf, region_order, ax):\n    # not include income < 0\n    # It means Null or doubt\n    region_income = indf[indf['income'] > 0].groupby(['region', 'family_member'])[\n        'income'].mean().unstack().reindex(region_order).astype(int)\n    sns.heatmap(region_income, vmin=0, vmax=8000, annot=True,\n                fmt='d', ax=ax, cmap='jet', cbar=False, lw=2)\n    ax.xaxis.set_label_position('top')\n\nfig, axes = plt.subplots(1, 3, figsize=(16, 5))\n\ni = 0\nfor d in data:\n    plot_income(d, region_order, axes[i])\n    i += 1\n\naxes[0].set_xlabel('2005', fontweight='bold', fontsize=12)\naxes[1].set_xlabel('2012', fontweight='bold', fontsize=12)\naxes[2].set_xlabel('2018', fontweight='bold', fontsize=12)\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\naxes[1].set_ylabel('')\naxes[2].set_ylabel('')\n\nfig.text(0.42, 1, 'Household income by region', fontsize=14, fontweight='bold')\nplt.show()","5c2b1bcd":"# average yearly income per person for family member\n\ndef plot_income_per_person(indf, region_order, ax):\n    region_income = indf[indf['income'] > 0].groupby(['region', 'family_member'])[\n        'income'].mean().unstack().reindex(region_order)\n\n    z = 1\n    for col in region_income.columns:\n        region_income.loc[:, col] = (region_income[col] \/ z).astype(int)\n        z += 1\n\n    sns.heatmap(region_income, vmin=0, vmax=2500, annot=True,\n                fmt='d', ax=ax, cmap='jet', cbar=False, lw=2)\n    ax.xaxis.set_label_position('top')\n\n\nfig, axes = plt.subplots(1, 3, figsize=(16, 5))\ni = 0\nfor d in data:\n    plot_income_per_person(d, region_order, axes[i])\n    i += 1\n\naxes[0].set_xlabel('2005', fontweight='bold', fontsize=12)\naxes[1].set_xlabel('2012', fontweight='bold', fontsize=12)\naxes[2].set_xlabel('2018', fontweight='bold', fontsize=12)\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\naxes[1].set_ylabel('')\naxes[2].set_ylabel('')\n\nfig.text(0.32, 1, 'Household income per person for family member by region',\n         fontsize=14, fontweight='bold')\nplt.show()","f9945667":"# Getting job\n\n\ndef plot_getting_job(indf, region_order, ax):\n\n    region_job = indf.groupby(['region', 'getting job'])[\n        'getting job'].count().unstack().reindex(region_order)[::-1]\n    region_ratio = (region_job.T \/ region_job.sum(axis=1)).T\n\n    ax.barh(region_ratio.index,\n            region_ratio[1], label='Have job', edgecolor='black', color='#337882', alpha=0.5)\n    ax.barh(region_ratio.index, region_ratio[0], left=region_ratio[1],\n            label='Don\\'t have job', edgecolor='black', color='#e85255', alpha=0.5)\n\n    for ro in region_order[::-1]:\n        ax.annotate(f\"{region_ratio[1][ro] * 100 : .1f}%\",\n                    xy=(region_ratio[1][ro]\/2, ro),\n                    va='center',\n                    ha='center',\n                    fontsize=9,\n                    color='white')\n        ax.annotate(f\"{region_ratio[0][ro] * 100 : .1f}%\",\n                    xy=(region_ratio[1][ro] + region_ratio[0][ro]\/2, ro),\n                    va='center',\n                    ha='center',\n                    fontsize=9,\n                    color='white')\n\n        for s in ['top', 'bottom', 'left', 'right']:\n            ax.spines[s].set_visible(False)\n\n        ax.set_xticks([])\n        ax.xaxis.set_label_position('top')\n\n\nfig, axes = plt.subplots(1, 3, figsize=(16, 5))\ni = 0\nfor d in data:\n    plot_getting_job(d, region_order, axes[i])\n    i += 1\n\naxes[1].legend(loc='lower center', bbox_to_anchor=(0.45, -0.1), ncol=5)\naxes[0].set_xlabel('2005', fontsize=12, fontweight='bold')\naxes[1].set_xlabel('2012', fontsize=12, fontweight='bold')\naxes[2].set_xlabel('2018', fontsize=12, fontweight='bold')\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\n\nfig.text(0.40, 1, 'Ratio of getting job by region',\n         fontsize=14, fontweight='bold')\nplt.show()","180ba394":"category_order = ['Manager', 'Expert and related worker', 'Office worker',\n                  'Service worker', 'Sales worker',\n                  'Skilled worker in agriculture, forestry and fisheries',\n                  'Craftsmen and related skilled workers',\n                  'Equipment and machine operation and assembly workers',\n                  'Simple labor worker']    # except for soldier\n\n\ndef plot_job(indf, region_order, ax):\n    region_job = indf.groupby(['region', 'Main_category'])['Main_category'].count(\n    ).unstack().fillna(0)[category_order].reindex(region_order).astype(int).T\n\n#     diff = list(set(reason_order) - set(region_reason.columns))\n#     if len(diff) != 0:\n#         region_reason[diff] = 0\n\n    sns.heatmap(region_job, vmin=0, vmax=150, annot=True, fmt='d',\n                ax=ax, cmap='Oranges', cbar=False, lw=2, alpha=0.7)\n    ax.xaxis.set_label_position('top')\n\n\nfig, axes = plt.subplots(1, 3, figsize=(18, 5))\n\ni = 0\nfor d in data:\n    plot_job(d, region_order, axes[i])\n    i += 1\n\naxes[0].set_xlabel('2005', fontweight='bold', fontsize=12)\naxes[1].set_xlabel('2012', fontweight='bold', fontsize=12)\naxes[2].set_xlabel('2018', fontweight='bold', fontsize=12)\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\n\naxes[0].set_ylabel('')\naxes[1].set_ylabel('')\naxes[2].set_ylabel('')\n\nfig.text(0.42, 1, 'Job category per year', fontweight='bold', fontsize=14)\n\nplt.show()","10ad2961":"# scatter plot of average yearly income of job category by region\nfig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(7, 7)\n\n# Design plot\nax_scatter = fig.add_subplot(gs[2:-1, :5])\nax_barx = fig.add_subplot(gs[0:2, :5], sharex=ax_scatter)\nax_bary = fig.add_subplot(gs[2:-1, 5:], sharey=ax_scatter)\n\ncolors = sns.color_palette('hls', n_colors=len(category_order))\n\n# plot ax_scatter\nregion_income = df_2005[df_2005['income'] > 0].groupby(\n    ['region', 'Main_category'])['income'].mean().unstack().fillna(0).stack()\n\nfor i in region_order:\n    c_idx = 0\n    for j in category_order[::-1]:\n        ax_scatter.scatter(i, j, region_income[i][j] \/ 12, c=colors[c_idx])\n\n        c_idx += 1\n\n        ax_scatter.annotate(f\"{region_income[i][j] \/ 1000 : .1f}\",\n                            xy=(i, j),\n                            va='center',\n                            ha='center',\n                            color='black')\n\n# plot ax_barx\nregion_job = df_2005.groupby(['region', 'Main_category'])[\n    'Main_category'].count().unstack().fillna(0)[category_order][::-1]\nregion_job_ratio = (region_job.T\/region_job.sum(axis=1)\n                    ).T.reindex(region_order)\n\nc_idx = 0\ni = pd.Series(data=[0 for _ in range(len(region_order))], index=region_order)\nfor col in region_job_ratio.columns[::-1]:\n    ax_barx.bar(region_job_ratio.index,\n                region_job_ratio[col], bottom=i, edgecolor='black', label=col, color=colors[c_idx])\n\n    for ro in region_order:\n        ax_barx.annotate(f\"{region_job_ratio[col][ro] * 100 :.1f}\",\n                         xy=(ro, region_job_ratio[col][ro]\/2 + i[ro]),\n                         va='center',\n                         ha='center',\n                         fontsize=9,\n                         color='white')\n    i += region_job_ratio[col]\n    c_idx += 1\n\n\n# plot ax_bary\n\njob = df_2005['Main_category'].value_counts()[category_order][::-1]\n\nax_bary.barh(job.index, job, edgecolor='black',\n             color=sns.light_palette('purple', len(job)))\nax_bary.plot(job, job.index, color='purple', ls='--', alpha=0.3, lw=0.7)\n\nfor idx in job.index:\n    ax_bary.annotate(f\"{job[idx] \/job.sum() * 100 :.1f}%\",\n                     xy=(job[idx] + 100, idx),\n                     va='center',\n                     ha='center',\n                     fontsize=9,\n                     color='black')\n\n# set graph\n\nfor s in ['top', 'right', 'left', 'bottom']:\n    ax_scatter.spines[s].set_visible(False)\n    ax_barx.spines[s].set_visible(False)\n    ax_bary.spines[s].set_visible(False)\n\n# ax_scatter\nax_scatter.grid('--', lw=0.2)\nax_scatter.set_xticklabels(region_order, rotation=30)\n\n# ax_barx\nax_barx.set_yticks([])\n\n# ax_bary\nax_bary.grid(axis='x', ls='--')\nax_bary.set_xlim(0, job.max() + 150)\n\nplt.setp(ax_barx.get_xticklabels(), visible=False)\nplt.setp(ax_bary.get_yticklabels(), visible=False)\n\nfig.text(0.13, 0.9, 'Yearly income scatter plot(2005, circle value : M KRW \/ 1000)',\n         fontsize=14, fontweight='bold')\nplt.show()","17ad2c3c":"fig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(7, 7)\n\n# Design plot\nax_scatter = fig.add_subplot(gs[2:-1, :5])\nax_barx = fig.add_subplot(gs[0:2, :5], sharex=ax_scatter)\nax_bary = fig.add_subplot(gs[2:-1, 5:], sharey=ax_scatter)\n\ncolors = sns.color_palette('hls', n_colors=len(category_order))\n\n# plot ax_scatter\nregion_income = df_2012[df_2012['income'] > 0].groupby(\n    ['region', 'Main_category'])['income'].mean().unstack().fillna(0).stack()\n\nfor i in region_order:\n    c_idx = 0\n    for j in category_order[::-1]:\n        ax_scatter.scatter(i, j, region_income[i][j] \/ 12, c=colors[c_idx])\n\n        c_idx += 1\n\n        ax_scatter.annotate(f\"{region_income[i][j] \/ 1000 : .1f}\",\n                            xy=(i, j),\n                            va='center',\n                            ha='center',\n                            color='black')\n\n# plot ax_barx\nregion_job = df_2012.groupby(['region', 'Main_category'])[\n    'Main_category'].count().unstack().fillna(0)[category_order][::-1]\nregion_job_ratio = (region_job.T\/region_job.sum(axis=1)\n                    ).T.reindex(region_order)\n\nc_idx = 0\ni = pd.Series(data=[0 for _ in range(len(region_order))], index=region_order)\nfor col in region_job_ratio.columns[::-1]:\n    ax_barx.bar(region_job_ratio.index,\n                region_job_ratio[col], bottom=i, edgecolor='black', label=col, color=colors[c_idx])\n\n    for ro in region_order:\n        ax_barx.annotate(f\"{region_job_ratio[col][ro] * 100 :.1f}\",\n                         xy=(ro, region_job_ratio[col][ro]\/2 + i[ro]),\n                         va='center',\n                         ha='center',\n                         fontsize=9,\n                         color='white')\n    i += region_job_ratio[col]\n    c_idx += 1\n\n# plot ax_bary\n\njob = df_2018['Main_category'].value_counts()[category_order][::-1]\n\nax_bary.barh(job.index, job, edgecolor='black',\n             color=sns.light_palette('purple', len(job)))\nax_bary.plot(job, job.index, color='purple', ls='--', alpha=0.3, lw=0.7)\n\nfor idx in job.index:\n    ax_bary.annotate(f\"{job[idx] \/job.sum() * 100 :.1f}%\",\n                     xy=(job[idx] + 100, idx),\n                     va='center',\n                     ha='center',\n                     fontsize=9,\n                     color='black')\n\n\n# set graph\n\nfor s in ['top', 'right', 'left', 'bottom']:\n    ax_scatter.spines[s].set_visible(False)\n    ax_barx.spines[s].set_visible(False)\n    ax_bary.spines[s].set_visible(False)\n\n# ax_scatter\nax_scatter.grid('--', lw=0.2)\nax_scatter.set_xticklabels(region_order, rotation=30)\n\n# ax_barx\nax_barx.set_yticks([])\n\n# ax_bary\nax_bary.grid(axis='x', ls='--')\nax_bary.set_xlim(0, job.max() + 150)\n\nplt.setp(ax_barx.get_xticklabels(), visible=False)\nplt.setp(ax_bary.get_yticklabels(), visible=False)\n\nfig.text(0.13, 0.9, 'Yearly income scatter plot(2012, circle value : M KRW \/ 1000)',\n         fontsize=14, fontweight='bold')\nplt.show()","657f4257":"fig = plt.figure(figsize=(12, 10))\ngs = fig.add_gridspec(7, 7)\n\n# Design plot\nax_scatter = fig.add_subplot(gs[2:-1, :5])\nax_barx = fig.add_subplot(gs[0:2, :5], sharex=ax_scatter)\nax_bary = fig.add_subplot(gs[2:-1, 5:], sharey=ax_scatter)\n\ncolors = sns.color_palette('hls', n_colors=len(category_order))\n\n# plot ax_scatter\nregion_income = df_2018[df_2018['income'] > 0].groupby(\n    ['region', 'Main_category'])['income'].mean().unstack().fillna(0).stack()\n\nfor i in region_order:\n    c_idx = 0\n    for j in category_order[::-1]:\n        ax_scatter.scatter(i, j, region_income[i][j] \/ 12, c=colors[c_idx])\n\n        c_idx += 1\n\n        ax_scatter.annotate(f\"{region_income[i][j] \/ 1000 : .1f}\",\n                            xy=(i, j),\n                            va='center',\n                            ha='center',\n                            color='black')\n\n# plot ax_barx\nregion_job = df_2018.groupby(['region', 'Main_category'])[\n    'Main_category'].count().unstack().fillna(0)[category_order][::-1]\nregion_job_ratio = (region_job.T\/region_job.sum(axis=1)\n                    ).T.reindex(region_order)\n\nc_idx = 0\ni = pd.Series(data=[0 for _ in range(len(region_order))], index=region_order)\nfor col in region_job_ratio.columns[::-1]:\n    ax_barx.bar(region_job_ratio.index,\n                region_job_ratio[col], bottom=i, edgecolor='black', label=col, color=colors[c_idx])\n\n    for ro in region_order:\n        ax_barx.annotate(f\"{region_job_ratio[col][ro] * 100 :.1f}\",\n                         xy=(ro, region_job_ratio[col][ro]\/2 + i[ro]),\n                         va='center',\n                         ha='center',\n                         fontsize=9,\n                         color='white')\n    i += region_job_ratio[col]\n    c_idx += 1\n\n\n# plot ax_bary\n\njob = df_2018['Main_category'].value_counts()[category_order][::-1]\n\nax_bary.barh(job.index, job, edgecolor='black',\n             color=sns.light_palette('purple', len(job)))\nax_bary.plot(job, job.index, color='purple', ls='--', alpha=0.3, lw=0.7)\n\nfor idx in job.index:\n    ax_bary.annotate(f\"{job[idx] \/job.sum() * 100 :.1f}%\",\n                     xy=(job[idx] + 100, idx),\n                     va='center',\n                     ha='center',\n                     fontsize=9,\n                     color='black')\n\n\n# set graph\n\nfor s in ['top', 'right', 'left', 'bottom']:\n    ax_scatter.spines[s].set_visible(False)\n    ax_barx.spines[s].set_visible(False)\n    ax_bary.spines[s].set_visible(False)\n\n# ax_scatter\nax_scatter.grid('--', lw=0.2)\nax_scatter.set_xticklabels(region_order, rotation=30)\n\n# ax_barx\nax_barx.set_yticks([])\n\n# ax_bary\nax_bary.grid(axis='x', ls='--')\nax_bary.set_xlim(0, job.max() + 150)\n\nplt.setp(ax_barx.get_xticklabels(), visible=False)\nplt.setp(ax_bary.get_yticklabels(), visible=False)\n\nfig.text(0.13, 0.9, 'Yearly income scatter plot(2018, circle value : M KRW \/ 1000)',\n         fontsize=14, fontweight='bold')\nplt.show()","3873e82e":"# Reason for no job\n\n# reason_order = ['giving-up economic activities','no intention to work', 'no capable', 'in military service', 'studying in school',\n#                 'prepare for school','prepare to apply job', 'house worker','caring kids at home', 'nursing', 'others']\n\nreason_order = ['giving-up economic activities', 'no intention to work', 'no capable', 'studying in school',\n                'prepare to apply job', 'house worker', 'caring kids at home', 'nursing']\n\n\ndef plot_reason(indf, region_order, ax):\n    region_reason = indf.groupby(['region', 'reason_none_worker'])[\n        'reason_none_worker'].count().unstack().fillna(0).reindex(region_order).astype(int)\n\n    diff = list(set(reason_order) - set(region_reason.columns))\n    if len(diff) != 0:\n        region_reason[diff] = 0\n\n    sns.heatmap(region_reason[reason_order].T, vmin=0, vmax=30, annot=True,\n                fmt='d', ax=ax, cmap='Oranges', cbar=False, lw=2, alpha=0.7)\n    ax.xaxis.set_label_position('top')\n\n\nfig, axes = plt.subplots(1, 3, figsize=(18, 5))\ni = 0\nfor d in data:\n    plot_reason(d, region_order, axes[i])\n    i += 1\n\naxes[0].set_xlabel('2005', fontweight='bold', fontsize=12)\naxes[1].set_xlabel('2012', fontweight='bold', fontsize=12)\naxes[2].set_xlabel('2018', fontweight='bold', fontsize=12)\n\n\naxes[1].set_yticks([])\naxes[2].set_yticks([])\n\naxes[0].set_ylabel('')\naxes[1].set_ylabel('')\naxes[2].set_ylabel('')\n\nfig.text(0.42, 1, 'Reason for no job by year', fontweight='bold', fontsize=14)\n\nplt.show()","74dd52c7":"# EDA for Korea income and welfare  \n\nLet's have a look 3-years data(2005, 2012, 2018) to observe changes for few year.  \nI focused on regional differences because of centralization of the metropolitan area, especially Seoul.  \n","87834d68":"- no education<7 and no education(>=) ratio are decreasing.\n- ratio of over university is high in metropolitan area and Chung-nam.\n- There is Sejong city, Multifunctional Administrative City in Chung-nam. I think it is one of reason that education level is increasing.","0f5f230c":"To understand instance meanings, let's change number to meaning. ","5bef8bd3":"# About Visualization\n\nThere are many way and tools to visualize data, such as Seaborn, Plotly and so on.   \nEspecially, Seaborn is very commom, useful and easy way to draw plot.  \n\n\nBut I personally prefer to draw plot manually although this way takes more time to visualize than tools like seaborn surely.  \nBecause it helps me to understand data structure and I can show customizing graph.\n\n\n","38c7ac73":"- In other regions except for metropolitan area(Seoul, Kyeong-gi), ration of the elder is incresing.  \n- In general, ratio of young people(under 40s) is deceasing.\n","a0f86325":"- ratio of single-person households have increased in all regions.\n- But ratio of multi-family members of 3 or more have decreased."}}