{"cell_type":{"47e09be0":"code","0e062c5f":"code","6d7279cc":"code","a258797a":"code","614fd062":"code","3720908a":"code","d8e5749c":"code","9730334d":"code","8a1dd137":"code","acbb05aa":"code","e75d36d0":"code","397b2c74":"code","e3489d6d":"code","34aa3c44":"code","6de80c31":"code","1f84b2e9":"code","289c2359":"code","6c3a3277":"code","36eb95f8":"code","0ec5a179":"code","ff960cd0":"code","72645a49":"code","75b988de":"code","0aa8b26a":"code","fcdee356":"code","33a2b949":"code","5f9efc81":"code","268235ed":"code","f99b14a0":"code","bff463e9":"markdown","139df478":"markdown","0fead5f5":"markdown","c808d217":"markdown","cb9e5643":"markdown","4dcad0a6":"markdown","ea426964":"markdown","a5e33523":"markdown","17ce65a6":"markdown","2e986b16":"markdown","17ce1c83":"markdown","7726cda7":"markdown","4bfc0aeb":"markdown","432fb9da":"markdown","8c743299":"markdown","0de7b3ac":"markdown"},"source":{"47e09be0":"import os\nimport openslide\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","0e062c5f":"!ls \/kaggle\/input\/prostate-cancer-grade-assessment","6d7279cc":"BASE_DIR = '\/kaggle\/input\/prostate-cancer-grade-assessment'","a258797a":"%%time\ntrain_df = pd.read_csv(os.path.join(BASE_DIR, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(BASE_DIR, 'test.csv'))\nsample_sub_df = pd.read_csv(os.path.join(BASE_DIR, 'sample_submission.csv'))","614fd062":"print(f'Number of training images: {len(os.listdir(os.path.join(BASE_DIR, \"train_images\")))}')\nprint(f'Number of segmentation masks for training: {len(os.listdir(os.path.join(BASE_DIR, \"train_label_masks\")))}')","3720908a":"train_df.head()","d8e5749c":"test_df.head()","9730334d":"sample_sub_df.head()","8a1dd137":"print(f'Size of train_df: {train_df.shape}')\nprint(f'Size of test_df: {test_df.shape}')\nprint(f'Size of sample_sub_df: {sample_sub_df.shape}')","acbb05aa":"sns.set(rc={'figure.figsize':(11,8)})\nsns.set(style=\"whitegrid\")","e75d36d0":"np.sort(pd.unique(train_df['isup_grade']))","397b2c74":"ax = sns.barplot(np.sort(pd.unique(train_df['isup_grade'])), train_df['isup_grade'].value_counts().sort_values(ascending=False))\nax.set(xlabel='ISUP Grades', ylabel='# of records', title='ISUP Grades vs. # of records')\nplt.show()","e3489d6d":"train_df['data_provider'].value_counts()","34aa3c44":"ax = sns.barplot(np.sort(pd.unique(train_df['data_provider'])), train_df['data_provider'].value_counts().sort_values(ascending=False))\nax.set(xlabel='Data Providers', ylabel='# of records', title='Data Providers vs. # of records')\nplt.show()","6de80c31":"counts_karolinska = train_df[train_df['data_provider'] == 'karolinska']['isup_grade'].value_counts(ascending=False)\ncounts_radboud = train_df[~(train_df['data_provider'] == 'karolinska')]['isup_grade'].value_counts()\n\nkarolinska_df = pd.DataFrame({\n    '# of records': counts_karolinska,\n    'isup_grades': np.sort(pd.unique(train_df[train_df['data_provider'] == 'karolinska']['isup_grade'])),\n    'data_provider': 'karolinska'\n})\nradboud_df = pd.DataFrame({\n    '# of records': counts_radboud,\n    'isup_grades': np.sort(pd.unique(train_df[~(train_df['data_provider'] == 'karolinska')]['isup_grade'])),\n    'data_provider': 'radboud'\n})\nsns.factorplot(x='isup_grades', y='# of records', hue='data_provider', data=pd.concat([karolinska_df, radboud_df], ignore_index=True), kind='bar', height=7, aspect=1.5)\nplt.show()","1f84b2e9":"# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=3, ncols=4, figsize=(20, 20))\ncount=0\nfor row in ax:\n    for col in row:\n        img = os.path.join(BASE_DIR, 'train_images', f'{train_df[\"image_id\"].iloc[count]}.tiff')\n        img = openslide.OpenSlide(img)\n        patch = img.read_region((0, 0), 2, img.level_dimensions[-1])\n        col.title.set_text(f'Source: {train_df[\"data_provider\"].iloc[count]} \\n ISUP grade: {train_df[\"isup_grade\"].iloc[count]} \\n gleason score: {train_df[\"gleason_score\"].iloc[count]}')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        col.imshow(patch)\n        count += 1\nplt.show()","289c2359":"def print_mask_details(slide, center='radboud', show_thumbnail=True, max_size=(400,400)):\n    \"\"\"Print some basic information about a slide\"\"\"\n\n    if center not in ['radboud', 'karolinska']:\n        raise Exception(\"Unsupported palette, should be one of [radboud, karolinska].\")\n\n    # Generate a small image thumbnail\n    if show_thumbnail:\n        # Read in the mask data from the highest level\n        # We cannot use thumbnail() here because we need to load the raw label data.\n        mask_data = slide.read_region((0,0), slide.level_count - 1, slide.level_dimensions[-1])\n        # Mask data is present in the R channel\n        mask_data = mask_data.split()[0]\n\n        # To show the masks we map the raw label values to RGB values\n        preview_palette = np.zeros(shape=768, dtype=int)\n        if center == 'radboud':\n            # Mapping: {0: background, 1: stroma, 2: benign epithelium, 3: Gleason 3, 4: Gleason 4, 5: Gleason 5}\n            preview_palette[0:18] = (np.array([0, 0, 0, 0.5, 0.5, 0.5, 0, 1, 0, 1, 1, 0.7, 1, 0.5, 0, 1, 0, 0]) * 255).astype(int)\n        elif center == 'karolinska':\n            # Mapping: {0: background, 1: benign, 2: cancer}\n            preview_palette[0:9] = (np.array([0, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0]) * 255).astype(int)\n        mask_data.putpalette(data=preview_palette.tolist())\n        mask_data = mask_data.convert(mode='RGB')\n        mask_data.thumbnail(size=max_size, resample=0)\n        return mask_data","6c3a3277":"fig, ax = plt.subplots(nrows=3, ncols=4, figsize=(20, 20))\ncount=0\nfor row in ax:\n    for col in row:\n        mask = os.path.join(BASE_DIR, 'train_label_masks', f'{train_df[\"image_id\"].iloc[count]}_mask.tiff')\n        mask = openslide.OpenSlide(mask)\n        mask = print_mask_details(mask, center='radboud')\n        col.imshow(mask)\n        col.title.set_text(f'Source: {train_df[\"data_provider\"].iloc[count]} \\n ISUP grade: {train_df[\"isup_grade\"].iloc[count]} \\n gleason score: {train_df[\"gleason_score\"].iloc[count]}')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        mask.close()\n        count += 1\nplt.show()","36eb95f8":"def plot_patch(img, x, y, level=0, width=512, height=512):\n    biopsy = openslide.OpenSlide(os.path.join(BASE_DIR, 'train_images', img))\n    region = biopsy.read_region((x, y), level, (width, height))\n    display(region)","0ec5a179":"plot_patch('00928370e2dfeb8a507667ef1d4efcbb.tiff', 5150, 21000)","ff960cd0":"plot_patch('0005f7aaab2800f6170c399693a96917.tiff', 6000, 18000)","72645a49":"plot_patch('0018ae58b01bdadc8e347995b69f99aa.tiff', 1500, 6000)","75b988de":"def plot_biopsy_grid(df):\n    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 20))\n    count=0\n    for row in ax:\n        for col in row:\n            img = os.path.join(BASE_DIR, 'train_images', f'{df[\"image_id\"].iloc[count]}.tiff')\n            img = openslide.OpenSlide(img)\n            patch = img.read_region((0, 0), 2, img.level_dimensions[-1])\n            col.title.set_text(f'Source: {df[\"data_provider\"].iloc[count]} \\n ISUP grade: {df[\"isup_grade\"].iloc[count]} \\n gleason score: {df[\"gleason_score\"].iloc[count]}')\n            col.grid(False)\n            col.set_xticks([])\n            col.set_yticks([])\n            col.imshow(patch)\n            count += 1\n    plt.show()","0aa8b26a":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 0][:4])","fcdee356":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 1][:4])","33a2b949":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 2][:4])","5f9efc81":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 3][:4])","268235ed":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 4][:4])","f99b14a0":"plot_biopsy_grid(train_df[train_df['isup_grade'] == 5][:4])","bff463e9":"## Distribution of target variable","139df478":"## Glimpse of the dataset","0fead5f5":"## ISUP Grade 5: (Risk Group: High)","c808d217":"## ISUP Grade 1: (Risk Group: Low)","cb9e5643":"## Visualizing some of the image patches from training dataset","4dcad0a6":"## Stay Tuned (In Progress)","ea426964":"## Target variable distribution based on data providers","a5e33523":"### ISUP Grade: 0 (Risk Group: Healthy)","17ce65a6":"Segmentation mask is given for almost all the training images.","2e986b16":"## ISUP Grade 4: (Risk Group: High)","17ce1c83":"## ISUP Grade 2: (Risk Group: Intermediate Favorable)","7726cda7":"## Segmentation masks for above images","4bfc0aeb":"## ISUP Grade 3: (Risk Group: Intermediate Unfavorable)","432fb9da":"## Visualizing biopsies having different ISUP grandes (Cancer Severitirs)","8c743299":"## Distribution of Data Providers","0de7b3ac":"## Visualizing a few training images"}}