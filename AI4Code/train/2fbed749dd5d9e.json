{"cell_type":{"1dfc29cf":"code","e1760909":"code","1df30b9f":"code","8488e76e":"code","f8823b0c":"code","c7911466":"markdown"},"source":{"1dfc29cf":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n","e1760909":"def score_event_fast(truth, submission):\n    truth = truth[['hit_id', 'particle_id', 'weight']].merge(submission, how='left', on='hit_id')\n    df = truth.groupby(['track_id', 'particle_id']).hit_id.count().to_frame('count_both').reset_index()\n    truth = truth.merge(df, how='left', on=['track_id', 'particle_id'])\n    \n    df1 = df.groupby(['particle_id']).count_both.sum().to_frame('count_particle').reset_index()\n    truth = truth.merge(df1, how='left', on='particle_id')\n    df1 = df.groupby(['track_id']).count_both.sum().to_frame('count_track').reset_index()\n    truth = truth.merge(df1, how='left', on='track_id')\n    truth.count_both *= 2\n    score = truth[(truth.count_both > truth.count_particle) & (truth.count_both > truth.count_track)].weight.sum()\n    return score\n\ndef create_one_event_submission(event_id, hits, labels):\n    sub_data = np.column_stack(([event_id]*len(hits), hits.hit_id.values, labels))\n    submission = pd.DataFrame(data=sub_data, columns=[\"event_id\", \"hit_id\", \"track_id\"]).astype(int)\n    return submission","1df30b9f":"path_to_train = \"..\/input\/train_1\"\nevent_prefix = \"event000001000\"\n\nevent_id = 0\nhits = pd.read_csv('..\/input\/train_1\/event00000100%d-hits.csv' % event_id)\nparticles = pd.read_csv('..\/input\/train_1\/event00000100%d-particles.csv' % event_id)\ntruth = pd.read_csv('..\/input\/train_1\/event00000100%d-truth.csv' % event_id)\ncell = pd.read_csv('..\/input\/train_1\/event00000100%d-cells.csv' % event_id)","8488e76e":"hits = hits.merge(truth,on='hit_id')\nprint(hits.shape)\nhits = hits.merge(particles,on='particle_id',how='left')\nprint(hits.shape)\nhits['target'] = np.sqrt(hits.px**2+hits.py**2)\nhits = hits.fillna(0)","f8823b0c":"le = LabelEncoder()\nsubmission = create_one_event_submission(0, hits, le.fit_transform(hits.target))\nscore = score_event_fast(truth, submission)\nscore","c7911466":"I have been struggling with this competition to find an angle to use traditional machine learning techniques rather than using kalman filters and hough transforms\n\nThe following shows that one *could***** do this challenge by grouping predictions by  the angular momentum along the z axis\n\nI noticed the track ml stuff is broken - nice one Kaggle ;(\n\nThanks to CPMP for providing alternative functions"}}