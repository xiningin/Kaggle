{"cell_type":{"c7efd93b":"code","110017cf":"code","00903e62":"code","77cb50cb":"code","c2213fc3":"code","42757173":"code","496d1d93":"code","e1a0936c":"code","8a50a329":"code","6c468ed9":"code","fc75d853":"code","7a91d776":"code","812d9b74":"code","f89b632b":"code","2c206e75":"code","1e170340":"code","4998e837":"code","93896b19":"code","bb6f70aa":"code","bc52ff28":"code","2608a81d":"code","4d886d80":"code","6d5cc929":"markdown","921133e5":"markdown","9640d357":"markdown","0e5c4563":"markdown","97306814":"markdown","52992ac8":"markdown","54875b70":"markdown","d4faaa21":"markdown","32b027df":"markdown"},"source":{"c7efd93b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom tensorflow import keras # model definition and training \nimport matplotlib.pyplot as plt # for visualisation\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","110017cf":"df = pd.read_csv('..\/input\/train.csv')\n# df.head() # the data was loaded successfully","00903e62":"labeldf = df.pop('label')\ndigitsdf = df","77cb50cb":"digitsdf.describe()","c2213fc3":"digitsdf = digitsdf \/ 255.0","42757173":"def plot_image(digit_data,labels,img_idx, cb=False):\n    plt.figure()\n    plt.imshow(digit_data.iloc[img_idx].values.reshape(28,28),cmap='binary')\n    plt.xlabel(\"{}\".format(labels.iloc[img_idx]))\n    plt.xticks([])\n    plt.yticks([])\n    if cb: plt.colorbar()\n    return plt","496d1d93":"plot_image(digitsdf,labeldf,0,cb=True).show()","e1a0936c":"# sanity check\nprint(digitsdf.shape, labeldf.shape)","8a50a329":"from sklearn.model_selection import train_test_split  # to split data\nX_train, X_test,Y_train, Y_test = train_test_split(digitsdf,labeldf)","6c468ed9":"# sanity check\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)","fc75d853":"from keras.models import Sequential\nfrom keras.layers import Dense","7a91d776":"model = Sequential()\nmodel.add(Dense(128,activation='relu',input_shape=(784,)))\nmodel.add(Dense(10,activation='softmax'))","812d9b74":"model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","f89b632b":"model.fit(X_train,Y_train,epochs=2,batch_size=32,validation_data=(X_test,Y_test))","2c206e75":"def predict_image(img_data,labels_data,img_idx):\n    img = img_data.iloc[img_idx]\n    img = np.expand_dims(img,axis=0)\n    prediction = model.predict(img)\n    plabel = np.argmax(prediction)\n    c='g' if plabel == labels_data.iloc[img_idx] else 'r'\n       \n    plt = plot_image(img_data,labels_data,img_idx)\n    plt.xlabel(\"Prediction:{}, Was:{}\".format(plabel,labels_data.iloc[img_idx]),color=c)\n    return plt\n    ","1e170340":"predict_image(X_test,Y_test,2311).show()","4998e837":"testdata = pd.read_csv('..\/input\/test.csv')","93896b19":"testdata.shape","bb6f70aa":"predictions=model.predict(testdata)","bc52ff28":"pred=[np.argmax(predictions[i]) for i in range(len(predictions))] ","2608a81d":"resultdf = pd.DataFrame.from_dict(data={\"ImageId\":range(1,28001),\"Label\":pred},dtype='int64')","4d886d80":"resultdf.to_csv('ashish_agrawal_mnist_submission.csv',index=False)","6d5cc929":"## Introduction\nIn this notebook, we will see how to classify digits from the MNIST digit recognition using fully-connected networks or Dense layers.","921133e5":"### Gather data\nFirst, the data is loaded into a dataframe.","9640d357":"### Visualising the data\nWe may want to look how the images of numbers look. This provides us with a sense of how the numbers are represented in images.","0e5c4563":"### Prediction\nSee how model performs.","97306814":"By observing the values, and to our knowledge that these are the pixel values of an image, we know these values range between 0-255.  \nWe will rescale the values such that all of them lie between 0-1.","52992ac8":"### Explore Data\nSplitting the training data and training labels","54875b70":"Splitting data into training and validation","d4faaa21":"### Modeling","32b027df":"### Prediction on test data for Kaggle Submission"}}