{"cell_type":{"b0f6ad2c":"code","9664fac2":"code","9aa4925d":"code","0c771ec1":"code","90ddae2f":"code","59298abf":"code","0e49cc3e":"code","a00ad432":"code","33076c8d":"code","f0ecba0c":"code","dcd6f9d2":"code","f35cb95d":"code","e18dc513":"code","6b30ebf8":"code","0df484de":"code","2662c387":"code","47c9be9e":"code","16de5617":"code","e3f13c05":"code","2eb76d6d":"code","930642eb":"code","4acc7117":"code","f530df30":"code","aa5722d2":"code","b1181192":"code","291e05c6":"code","0510c81b":"code","67603965":"code","99941247":"code","c53ed8ca":"code","2904cde1":"code","bce8f4db":"markdown","f300de45":"markdown","da7c6309":"markdown","3459f91a":"markdown","b27b8485":"markdown","4ed31b47":"markdown","a2225c0f":"markdown","2537a2a8":"markdown","bd0fcb83":"markdown","5f2c91bf":"markdown","ae6e119e":"markdown","eb4aa77d":"markdown","2f15a268":"markdown","d4af3ae4":"markdown","bcddf625":"markdown","0bbd10be":"markdown","6ebff128":"markdown","2aebdc1c":"markdown","ae00a275":"markdown","cdd69fe9":"markdown","c47f73cb":"markdown","20237ee3":"markdown"},"source":{"b0f6ad2c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","9664fac2":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data =  pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9aa4925d":"train_data.head()","0c771ec1":"test_data.head()","90ddae2f":"train_data.drop(['Id'],axis = 1, inplace=True)\ntest_data.drop(['Id'],axis = 1, inplace=True)","59298abf":"train_data.info()","0e49cc3e":"train_data.describe()","a00ad432":"sns.distplot(train_data['SalePrice']);\n","33076c8d":"df = train_data[['LotFrontage','SalePrice']]\n\nsns.scatterplot(x='LotFrontage',y=\"SalePrice\",data=df)","f0ecba0c":"df = train_data[['LotArea','SalePrice']]\n\nsns.scatterplot(x='LotArea',y=\"SalePrice\",data=df)","dcd6f9d2":"var = 'OverallQual'\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","f35cb95d":"var = 'YearBuilt'\ndata = pd.concat([train_data['SalePrice'], train_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","e18dc513":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_data[cols], height = 2.5)\nplt.show();","6b30ebf8":"train_copy = train_data.copy()\n\nmask = np.zeros_like(train_copy.corr(),dtype=bool)\nmask[np.triu_indices_from(mask)] = True\n\n## Heatmap visualization\nplt.figure(figsize=(30,20))\nsns.heatmap(train_copy.corr(),\n            annot=True,\n            fmt=\".3f\",\n            annot_kws = {\"size\":10},\n            cmap=sns.cubehelix_palette(),\n            mask=mask)","0df484de":"k = 10 #number of variables for heatmap\ncols = train_data.corr().nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","2662c387":"total = train_data.isnull().sum().sort_values(ascending=False)\npercent = (train_data.isnull().sum()\/train_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","47c9be9e":"train_data = train_data.drop((missing_data[missing_data['Total'] > 1]).index,1)\ntrain_data.isnull().sum().max()\n\ntest_data = test_data.drop((missing_data[missing_data['Total'] >= 1]).index,1)\ntest_data.isnull().sum().max()","16de5617":"total = test_data.isnull().sum().sort_values(ascending=False)\npercent = (test_data.isnull().sum()\/test_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n\ntest_data = test_data.drop((missing_data[missing_data['Total'] >= 1]).index,1)\ntrain_data = train_data.drop((missing_data[missing_data['Total'] > 1]).index,1)","e3f13c05":"train_data = pd.get_dummies(train_data)\n","2eb76d6d":"test_data = pd.get_dummies(test_data)","930642eb":"y = train_data['SalePrice'] \ntrain_data.drop(['SalePrice'],axis=1,inplace=True)\nx = train_data\n\n","4acc7117":"for col in x:\n    col = str(col)\n    if col not in test_data.columns:\n        train_data.drop([col],axis=1,inplace=True)","f530df30":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","aa5722d2":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","b1181192":"def rmse(actual, pred):\n    return mean_squared_error(actual,pred)\n\nn_folds = 5\n\ndef rmse_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(x_train.values)\n    rmse= np.sqrt(-cross_val_score(model, x_train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","291e05c6":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n\n\nscore = rmse_cv(lasso)\n\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","0510c81b":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\nscore = rmse_cv(ENet)\n\nprint(\"\\ENet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","67603965":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\n\nscore = rmse_cv(KRR)\n\nprint(\"\\KRR score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","99941247":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n\nscore = rmse_cv(GBoost)\n\nprint(\"\\GBoost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c53ed8ca":"xgb_model = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640,reg_lambda=0.8571,\n                             subsample=0.5213,random_state =7, nthread = -1)\n\nscore = rmse_cv(xgb_model)\n\nprint(\"xgb_model score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","2904cde1":"from sklearn.ensemble import StackingRegressor\n\nestimators = [\n    ('lr',lasso),\n    ('xgb',xgb_model)\n]\nsr = StackingRegressor(estimators = estimators, final_estimator = GBoost)\n\n\nscore = rmse_cv(sr)\n\nprint(\"Stacking Regressor score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","bce8f4db":"# Stacking Regressors","f300de45":"LotArea - House Price","da7c6309":"# Missing Values","3459f91a":"# Regression Models","b27b8485":"# Conclusion","4ed31b47":"# Remove Missing Data","a2225c0f":"# Price Distrubition","2537a2a8":"# Most Efficient Columns","bd0fcb83":"# Kernel Ridge","5f2c91bf":"# Elastic Net","ae6e119e":"# Correlation Matrix","eb4aa77d":"*LotFrontage - House Price*","2f15a268":"**Stacking Regression Models can increase the accuracy. **","d4af3ae4":"# Train Test Split","bcddf625":"# One Hot Encoding","0bbd10be":"# XGBOOST","6ebff128":"# Lasso Regression (L1 Regularization)","2aebdc1c":"# Gradient Boosting","ae00a275":"# Score Functions","cdd69fe9":"YearBuilt - House Price","c47f73cb":"OverallQual - House Price","20237ee3":"# Relationships between independent variables and house prices"}}