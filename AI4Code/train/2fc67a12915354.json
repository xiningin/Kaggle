{"cell_type":{"25cad31f":"code","b41b2373":"code","51c103f1":"code","f746ef81":"code","8602cfab":"code","1c4dd616":"code","21074cef":"code","3b4e527c":"code","2a6bccde":"code","9a387da9":"code","e904a52c":"code","ac71b036":"code","005a3843":"code","64228262":"code","20ea3a57":"code","e33e3b53":"code","2615da52":"code","602e5633":"code","589caf86":"code","d653dabc":"code","64ea2178":"code","dcb87313":"markdown","c06acfa4":"markdown","0b7d448f":"markdown","92356b47":"markdown","4289359d":"markdown","f4cfd4ad":"markdown","6b942f85":"markdown","9a2e8b81":"markdown"},"source":{"25cad31f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b41b2373":"pip install fuzzy_c_means ","51c103f1":"import numpy as np \nimport pandas as pd\nimport matplotlib .pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom fcmeans import FCM\nfrom sklearn.preprocessing import StandardScaler","f746ef81":"data = pd.read_csv('..\/input\/clustering\/Clustering.csv')","8602cfab":"data.shape","1c4dd616":"data.head()","21074cef":"data.describe()","3b4e527c":"data.info()","2a6bccde":"data = pd.DataFrame(data,columns=['x','y'])","9a387da9":"data.head()","e904a52c":"columns = data.columns\ncolumns","ac71b036":"X = data[\"x\"]\nprint(X.shape)\n##..............................\ny = data['y']\nprint(y.shape)","005a3843":"plt.scatter(X,y,alpha = 1)","64228262":"#X_train = data.iloc[:150,:]\n#X_test = data.iloc[150:,:]\n#print(X_train.shape)\n#print(X_test.shape)","20ea3a57":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr( ),annot=True)\n","e33e3b53":"scalarModel = StandardScaler()\n#X_train = scalarModel.fit_transform(X_train)\n#X_test = scalarModel.fit_transform(X_test)\ndata = scalarModel.fit_transform(data)","2615da52":"data = pd.DataFrame(data , columns = columns )\ndata","602e5633":"data = data.values\ndata","589caf86":"fcmModel = FCM(n_clusters = 4)\nfcmModel.fit(data)\ncenter = fcmModel.centers\ncenter","d653dabc":"#Calculating Prediction\npred = fcmModel.predict(data)\nprint('Predicted Value for fcmModel is : ' , pred)\npred.shape","64ea2178":"# Visualising the clusters\nplt.scatter(data[pred == 0, 0], data[pred == 0, 1], s = 10, c = 'r')\nplt.scatter(data[pred == 1, 0], data[pred == 1, 1], s = 10, c = 'b' )\nplt.scatter(data[pred == 2, 0], data[pred == 2, 1], s = 10, c = 'g' )\nplt.scatter(data[pred == 3, 0], data[pred == 3, 1], s = 10, c = 'y' )\nplt.scatter(center[:, 0], center[:, 1], s = 300, c = 'black',marker = '+')\nplt.title('Clusters of customers')\nplt.xlabel('X_label ')\nplt.ylabel('y_label ')\nplt.legend()\nplt.show()","dcb87313":"# ****Correlation","c06acfa4":"# ****Draw the original Data","0b7d448f":"# ****Draw the Data and centers","92356b47":"# ****Read Data","4289359d":"# ****Apply the algorithm Fuzzy c Means","f4cfd4ad":"# ****Scaling Data","6b942f85":"# ****Import library","9a2e8b81":"# ****Spliting Data To X_train and X-test"}}