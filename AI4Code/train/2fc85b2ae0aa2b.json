{"cell_type":{"d778e086":"code","7de164b2":"code","48a1830b":"code","6b97f561":"code","aa0fe165":"code","15fca1a8":"code","01e0656b":"code","e906cd80":"code","b6793e83":"code","9bd81064":"code","ede10226":"code","9099f284":"code","5e246d1a":"code","9f738c47":"code","70092a0f":"code","f10264b4":"code","f6851f8b":"code","a0a90414":"code","6fa8e112":"code","9085a330":"code","f8fbfffa":"code","32302578":"code","ad010056":"code","14e59085":"code","5cc1056e":"code","d47eef67":"code","1721c147":"code","4b32e654":"code","f68c0209":"code","f806eedb":"code","55a03fac":"code","7e45417e":"code","fca690ab":"code","6ced39ea":"code","dafcfed2":"code","619460a9":"markdown","e0801a26":"markdown","46fc4a00":"markdown","28dfa5c4":"markdown","f942d952":"markdown","30e4fe90":"markdown","bb47cb84":"markdown","6d7a45e3":"markdown","418cc142":"markdown","36866562":"markdown","ddb60b64":"markdown","8b2d5f8a":"markdown","a179dbd2":"markdown","73c268e9":"markdown","0a84a97e":"markdown","545281e1":"markdown","a518d2d5":"markdown","7489ae8c":"markdown","30aabe58":"markdown","7952dcf0":"markdown","b3cd43ca":"markdown","0adb4400":"markdown","c38767f1":"markdown","3b2467f6":"markdown","6892c9e3":"markdown","396cbb4a":"markdown","c6b5307f":"markdown","ec0d8d39":"markdown","57026c6a":"markdown","7c17eaf8":"markdown","517a98cf":"markdown","29030ced":"markdown","465d9983":"markdown","f1b4db0e":"markdown","229eaf19":"markdown","1bd155c5":"markdown","b0566adf":"markdown","49f009c1":"markdown","2b795a2f":"markdown","55fa2b86":"markdown","d3ba3fc0":"markdown","8a70468a":"markdown","5e429b65":"markdown","b8c6736b":"markdown","6915de55":"markdown","2423be9d":"markdown","b1a84687":"markdown"},"source":{"d778e086":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom datetime import datetime\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6\nfrom kaggle.competitions import twosigmanews","7de164b2":"env = twosigmanews.make_env()","48a1830b":"market_data = env.get_training_data()[0]","6b97f561":"fig,axes = plt.subplots(1,1,figsize=(15,10))\naxes.set_title(\"Time Distro\")\naxes.set_ylabel(\"# of records\")\naxes.set_xlabel(\"date\")\naxes.plot(market_data.time.dt.date.value_counts().sort_index().index, market_data.time.dt.date.value_counts().sort_index().values)","aa0fe165":"market_data.head()","15fca1a8":"time_series_df = market_data[[\"time\"]].groupby(by=[\"time\"]).size()","01e0656b":"time_series_df.index","e906cd80":"time_series_df.index = pd.to_datetime(time_series_df.index)","b6793e83":"time_series_df.index","9bd81064":"time_series_df[\"2007-02-01\"]","ede10226":"time_series_df[\"2007-02-01\" : \"2007-02-10\"]","9099f284":"time_series_df[\"2007-02\"]","5e246d1a":"fig,axes = plt.subplots(1,1,figsize=(15,10))\naxes.set_title(\"Time Distro\")\naxes.set_ylabel(\"# of records\")\naxes.set_xlabel(\"date\")\naxes.plot(time_series_df[\"2007\" : \"2008-9\"])","9f738c47":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n#     rolmean = pd.rolling_mean(timeseries, window=12)\n#     rolstd = pd.rolling_std(timeseries, window=12)\n    \n    rolmean = timeseries.rolling(window=120).mean()\n    rolstd = timeseries.rolling(window=120).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(20,10))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","70092a0f":"time_series_df = time_series_df[\"2007\" : \"2008-9\"]\ntest_stationarity(time_series_df)","f10264b4":"fig,axes = plt.subplots(1,1,figsize=(15,10))\naxes.set_title(\"Time Distro\")\naxes.set_ylabel(\"LOG(# of records)\")\naxes.set_xlabel(\"date\")\naxes.plot(time_series_df)\nts_log = np.log(time_series_df)\naxes.plot(ts_log)","f6851f8b":"fig,axes = plt.subplots(1,1,figsize=(15,10))\naxes.set_title(\"Time Distro\")\naxes.set_ylabel(\"LOG(# of records)\")\naxes.set_xlabel(\"date\")\n\nmoving_avg = ts_log.rolling(6).mean()\naxes.plot(ts_log)\naxes.plot(moving_avg, color='red')","a0a90414":"ts_log_moving_avg_diff = ts_log - moving_avg\nts_log_moving_avg_diff.head(6)","6fa8e112":"ts_log_moving_avg_diff.dropna(inplace=True)\ntest_stationarity(ts_log_moving_avg_diff)","9085a330":"# # expwighted_avg = pd.ewma(ts_log, halflife=12)\n# expwighted_avg = pd.DataFrame(ts_log).ewm(halflife=12).mean()\nfig,axes = plt.subplots(1,1,figsize=(15,10))\naxes.set_title(\"Expolatiornay Moving Average\")\naxes.set_ylabel(\"LOG(# of records)\")\naxes.set_xlabel(\"date\")\nexpwighted_avg = ts_log.ewm(halflife=6).mean()\nplt.plot(ts_log)\nplt.plot(expwighted_avg, color='red')","f8fbfffa":"ts_log_ewma_diff = ts_log - expwighted_avg\ntest_stationarity(ts_log_ewma_diff)","32302578":"fig, axes = plt.subplots(1,1,figsize=(20,10))\nts_log_diff = ts_log - ts_log.shift()\nplt.plot(ts_log_diff)","ad010056":"ts_log_diff.dropna(inplace=True)\ntest_stationarity(ts_log_diff)","14e59085":"test_stationarity((ts_log - ts_log.shift(10)).dropna())","5cc1056e":"from statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(ts_log,freq=10)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nfig,ax = plt.subplots(figsize=(15,20))\nplt.subplot(411)\nplt.plot(ts_log, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","d47eef67":"ts_log_decompose = residual\nts_log_decompose.dropna(inplace=True)\ntest_stationarity(ts_log_decompose)","1721c147":"#ACF and PACF plots:\nfrom statsmodels.tsa.stattools import acf, pacf\nlag_acf = acf(ts_log_diff, nlags=20)\nlag_pacf = pacf(ts_log_diff, nlags=20, method='ols')\n#Plot ACF: \nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n\n#Plot PACF:\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","4b32e654":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(ts_log, order=(2, 1, 0))  \nresults_AR = model.fit(disp=-1)  \nfig,axes = plt.subplots(1,1,figsize=(20,10))\nplt.plot(ts_log_diff)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues-ts_log_diff)**2))","f68c0209":"model = ARIMA(ts_log, order=(0, 1, 2))  \nresults_MA = model.fit(disp=-1)  \nfig,axes = plt.subplots(1,1,figsize=(20,10))\nplt.plot(ts_log_diff)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_MA.fittedvalues-ts_log_diff)**2))","f806eedb":"model = ARIMA(ts_log, order=(2, 1, 2))  \nresults_ARIMA = model.fit(disp=-1)  \nfig,axes = plt.subplots(1,1,figsize=(20,10))\nplt.plot(ts_log_diff)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-ts_log_diff)**2))","55a03fac":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_diff.head())","7e45417e":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum.head())","fca690ab":"predictions_ARIMA_log = pd.Series(ts_log.ix[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()","6ced39ea":"pd.concat([ts_log.head(100), predictions_ARIMA_log.head(100)],axis=1)","dafcfed2":"fig,axes = plt.subplots(1,1,figsize=(15,10))\npredictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(ts_log)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'% np.sqrt(sum((predictions_ARIMA-ts_log)**2)\/len(ts_log)))","619460a9":"<a id=\"3\"><\/a> <br>\n**C. IMPORTS AND LOADING DATA**","e0801a26":"<a id=\"20\"><\/a> <br>\n4. AR MODEL\n\nThe p,d,q values can be specified using the order argument of ARIMA which take a tuple (p,d,q). Let model the 3 cases:","46fc4a00":"This looks like a much better series. The rolling values appear to be varying slightly but there is no specific trend. Also, the test statistic is smaller than the 1% critical values so we can say with 99% confidence that this is a stationary series.","28dfa5c4":"<a id=\"23\"><\/a> <br>\n**J. TAKING IT BACK TO ORIGINAL SCALE**\n\nSince the combined model gave best result, lets scale it back to the original values and see how well it performs there. First step would be to store the predicted results as a separate series and observe it.\n","f942d952":"<a id=\"0\"><\/a> <br>\n#  1-Introduction and RoadMap","30e4fe90":"<a id=\"1\"><\/a> <br>\n**A. WHAT MAKES TIME SERIES**\n\nAs the name suggests, TS is a collection of data points collected at constant time intervals. These are analyzed to determine the long term trend so as to forecast the future or perform some other form of analysis. But what makes a TS different from say a regular regression problem? There are 2 things:\n\n1. It is time dependent. So the basic assumption of a linear regression model that the observations are independent doesn\u2019t hold in this case.\n2. Along with an increasing or decreasing trend, most TS have some form of seasonality trends, i.e. variations specific to a particular time frame. For example, if you see the sales of a woolen jacket over time, you will invariably find higher sales in winter seasons.","bb47cb84":"Our journey would go through the following steps:\n * What makes Time Series Special?\n * Loading and Handling Time Series in Pandas\n * How to Check Stationarity of a Time Series?\n * How to make a Time Series Stationary?\n * Forecasting a Time Series\n\nI have used [This Tutorial](https:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/time-series-forecasting-codes-python\/) as a main idea for this kernel.  You can find more details there if you are motivated. ","6d7a45e3":"Note that here the parameter \u2018halflife\u2019 is used to define the amount of exponential decay. This is just an assumption here and would depend largely on the business domain. Other parameters like span and center of mass can also be used to define decay which are discussed in the link shared above. Now, let\u2019s remove this from series and check stationarity:","418cc142":"The red line shows the rolling mean. Lets subtract this from the original series. Note that since we are taking average of last 6 values, rolling mean is not defined for first 5 values. This can be observed as:","36866562":"Here we can see that the trend, seasonality are separated out from data and we can model the residuals. Lets check stationarity of residuals:","ddb60b64":"<a id=\"100\"><\/a> <br>\n#  3-References\n\n[1. A comprehensive beginner\u2019s guide to create a Time Series Forecast (with Codes in Python).](https:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/time-series-forecasting-codes-python\/)\n\n[2. My Kernel on Kaggle Feature Engineering in TwoSigma Competition.](https:\/\/www.kaggle.com\/smasar\/eda-preprocessing-processing-evaluation)\n\n3. Personal Experieces in Similar Projects.\n\n","8b2d5f8a":"<a id=\"10\"><\/a> <br>\n**E. ESTIMATING AND ELIMINATING TREND**\n\nOne of the first tricks to reduce trend can be transformation. For example, in this case we can clearly see that the there is a significant positive trend. So we can apply transformation which penalize higher values more than smaller values. These can be taking a log, square root, cube root, etc. Lets take a log transform here for simplicity:\n\n(ingore the interval that there is a no data)","a179dbd2":"<a id=\"16\"><\/a> <br>\n**I. Forecasting TimeSeries**\n\nWe saw different techniques and all of them worked reasonably well for making the TS stationary. Lets make model on the TS after differencing as it is a very popular technique. Also, its relatively easier to add noise and seasonality back into predicted residuals in this case. Having performed the trend and seasonality estimation techniques, there can be two situations:\n\n1. A strictly stationary series with no dependence among the values. This is the easy case wherein we can model the residuals as white noise. But this is very rare.\n2. A series with significant dependence among values. In this case we need to use some statistical models like ARIMA to forecast the data.\n\nLet me give you a brief introduction to ARIMA. I won\u2019t go into the technical details but you should understand these concepts in detail if you wish to apply them more effectively. ARIMA stands for Auto-Regressive Integrated Moving Averages. The ARIMA forecasting for a stationary time series is nothing but a linear (like a linear regression) equation. The predictors depend on the parameters (p,d,q) of the ARIMA model:\n\n<a id=\"17\"><\/a> <br>\n1. INTRODUCTION TO ARIMA\n\nNumber of AR (Auto-Regressive) terms (p): AR terms are just lags of dependent variable. For instance if p is 5, the predictors for x(t) will be x(t-1)\u2026.x(t-5).\n\nNumber of MA (Moving Average) terms (q): MA terms are lagged forecast errors in prediction equation. For instance if q is 5, the predictors for x(t) will be e(t-1)\u2026.e(t-5) where e(i) is the difference between the moving average at ith instant and actual value.\n\nNumber of Differences (d): These are the number of nonseasonal differences, i.e. in this case we took the first order difference. So either we can pass that variable and put d=0 or pass the original variable and put d=1. Both will generate same results.\n\nAn importance concern here is how to determine the value of \u2018p\u2019 and \u2018q\u2019. We use two plots to determine these numbers. Lets discuss them first.\n\n<a id=\"18\"><\/a> <br>\n2. AUTOCORRELATION FUNCTION(ACF)\n\nIt is a measure of the correlation between the the TS with a lagged version of itself. For instance at lag 5, ACF would compare series at time instant \u2018t1\u2019\u2026\u2019t2\u2019 with series at instant \u2018t1-5\u2019\u2026\u2019t2-5\u2019 (t1-5 and t2 being end points). Partial \n\n<a id=\"19\"><\/a> <br>\n3. PARTIAL AUTOCORRELATION FUNCTION (PACF)\n\nThis measures the correlation between the TS with a lagged version of itself but after eliminating the variations already explained by the intervening comparisons. Eg at lag 5, it will check the correlation but remove the effects already explained by lags 1 to 4.\n","73c268e9":"Though the variation in standard deviation is small, mean is clearly increasing with time and this is not a stationary series. Also, the test statistic is way more than the critical values. Note that the signed values should be compared and not the absolute values.\n\nNext, we\u2019ll discuss the techniques that can be used to take this TS towards stationarity.","0a84a97e":"<a id=\"9\"><\/a> <br>\n**D. MAKE A TIME SERIE STATIONARY** ","545281e1":"<a id=\"11\"><\/a> <br>\n**F. Moving average**\n\nIn this approach, we take average of \u2018k\u2019 consecutive values depending on the frequency of time series. Here we can take the average over the past 1 year, i.e. last 12 values. Pandas has specific functions defined for determining rolling statistics.\n","a518d2d5":"There is also possible to do a range query.","7489ae8c":"Now, Lets do a comparison beween our estimation and main data.","30aabe58":"In this plot, the two dotted lines on either sides of 0 are the confidence interevals. These can be used to determine the \u2018p\u2019 and \u2018q\u2019 values as:\n\n1. p \u2013 The lag value where the PACF chart crosses the upper confidence interval for the first time. If you notice closely, in this case p=1.5\n2. q \u2013 The lag value where the ACF chart crosses the upper confidence interval for the first time. If you notice closely, in this case q=1.25.\n\nNow, lets make 3 different ARIMA models considering individual as well as combined effects. I will also print the RSS for each. Please note that here RSS is for the values of residuals and not actual series.\n\nWe need to load the ARIMA model first","7952dcf0":"Here we can see that the AR and MA models have almost the same RSS but combined is significantly better. Now, we are left with 1 last step, i.e. taking these values back to the original scale.","b3cd43ca":"Finally we have a forecast at the original scale. Not a very good forecast I would say but you got the idea right? Now, I leave it upto you to refine the methodology further and make a better solution.\n","0adb4400":"Here the first element is base number itself and from there on the values cumulatively added. Last step is to take the exponent and compare with the original series.","c38767f1":"You can quickly do some back of mind calculations using previous output to check if these are correct. Next we\u2019ve to add them to base number. For this lets create a series with all values as base number and add the differences to it. This can be done as:","3b2467f6":"<a id=\"12\"><\/a> <br>\n**G. WEIGHTED MOVING AVERAGE**\n\nHowever, a drawback in this particular approach is that the time-period has to be strictly defined. In this case we can take 6 month averages but in complex situations like forecasting a stock price, its difficult to come up with a number. So we take a \u2018weighted moving average\u2019 where more recent values are given a higher weight. There can be many technique for assigning weights. A popular one is exponentially weighted moving average where weights are assigned to all the previous values with a decay factor.  This can be implemented in Pandas as:","6892c9e3":"<a id=\"4\"><\/a> <br>\n**D. SIMPLE FUNCTIONALITIES OF TIME SERIES **","396cbb4a":"As you can see, the index format is 'Index'. Lets change it to datetime index to being capable of using TimeSeries package facilities.","c6b5307f":"<a id=\"0\"><\/a> <br>\n## Kernel Headlines\n1. [Introduction and RoadMap](#1)\n    1. [What makes Time Series Special](#2)\n\t2. [Be Careful about Our Approach](#3)\n\t3. [Imports and Loading Data](#3)\n\t4. [Simple Functionalities of Time Series](#4)\n\t\n2. [Stationary in Time Series](#5)\n    1. [What does stationary means in time series](#6)\n\t2. [Stationary Parameters](#7)\n\t3. [Dickey Fuller Test](#8)\n\t4. [Make a Time Serie Stationary](#9)\n\t5. [Estimating and Eliminating Trend](#10)\n\t6. [Moving Average](#11)\n\t7. [Weighted Moving Average](#12)\n\t8. [Eliminating Trend and Seasonality](#13)\n\t    1. [Differencing](#14)\n\t\t2. [Decomposition](#15)\n    9. [Forecasting TimeSeries](#16)\n       1. [Introduction To ARIMA](#17)\n\t   2. [Autocorrelation Function](#18)\n\t   3. [Partial Autocorrelation Function(PACF)](#19)\n\t   4. [AR model](#20)\n\t   5. [MA model](#21)\n\t   6. [Combined Model](#22)\n\t10. [Taking It Back to Original Scale](#23)\n\t\n\n\n5. [References](#100)","ec0d8d39":"Or also customized date range queries.","57026c6a":"\n**In progress ...**\n\n**Be in touch to get last commits ...**\n\n**I'll try to complete it as soon as possible**\n","7c17eaf8":"<a id=\"2\"><\/a> <br>\n**B. BE CAREFUL ABOUT OUR APPROACH**\n\nPlease note that we dont want to evaluate the process to get competition answer. Main goal of this kernel is providing tutorial to represnet how TimeSeries can be modeled evaluated and also can be used in production datasets.\n\nPlease note that the aim of this kernel is to familiarize you with the various techniques used for TS in general. Our main focus is analyzing the problem with TimeSeries approches. So, the results may be a little ambiguous. Dont hesitate to share your idea in comments. Any hint will be appreciated.\n\n","517a98cf":"In this simpler case, it is easy to see a forward trend in the data. But its not very intuitive in presence of noise. So we can use some techniques to estimate or model this trend and then remove it from the series. There can be many ways of doing it and some of most commonly used are:\n\n1. Aggregation \u2013 taking average for a time period like monthly\/weekly averages\n2. Smoothing \u2013 taking rolling averages\n3. Polynomial Fitting \u2013 fit a regression model\n\nI will discuss smoothing here and you should try other techniques as well which might work out for other problems. Smoothing refers to taking rolling estimates, i.e. considering the past few instances. There are can be various ways but I will discuss two of those here.","29030ced":"Ignore the missing values we have in end period of 2015. The increasing treatment can be observed. In the other words, it is overall increasing trend.\nHowever, it might not always be possible to make such visual inferences (we\u2019ll see such cases later). So, more formally, we can check stationarity using the following:\nPlotting Rolling Statistics:\nWe can plot the moving average or moving variance and see if it varies with time. By moving average\/variance I mean that at any instant \u2018t\u2019, we\u2019ll take the average\/variance of the last year, i.e. last 12 months. But again this is more of a visual technique.\n\n<a id=\"8\"><\/a> <br>\n**C. DICKEY-FULLER TEST**\n\nThis is one of the statistical tests for checking stationarity. Here the null hypothesis is that the TS is non-stationary. The test results comprise of a Test Statistic and some Critical Values for difference confidence levels. If the \u2018Test Statistic\u2019 is less than the \u2018Critical Value\u2019, we can reject the null hypothesis and say that the series is stationary","465d9983":"As you can see, with 10 period Defferencing the data will be stationary with more than 99% confidentialy.\n\nNow, lets move on to Decomposing\n\n<a id=\"15\"><\/a> <br>\n2. Decomposition\n\nIn this approach, both trend and seasonality are modeled separately and the remaining part of the series is returned.","f1b4db0e":"Notice the first 6 being Nan. Lets drop these NaN values and check the plots to test stationarity.","229eaf19":"<a id=\"22\"><\/a> <br>\n6. COMBINED MODEL","1bd155c5":"As you can compare this result with previous ones, the moving average method had a better result in comparison to our method. Another point could be mentioned is this comparasion has been revealed that the assumption of seasonality is not correct for this data shift.\n\nWe can see that the mean and std variations have small variations with time. Also, the Dickey-Fuller test statistic is less than the 5% critical value, thus the TS is stationary with 95% confidence. We can also take second or third order differences which might get even better results in certain applications. \n\nLets check the same procedure for shifting with 10 preiod.","b0566adf":"<a id=\"5\"><\/a> <br>\n#  2-Stationary in Time Series\n\n\n<a id=\"6\"><\/a> <br>\n**A. WHAT DOES STATIONARY MEANS IN TIME SERIES**\n\nA TS is said to be stationary if its statistical properties such as mean, variance remain constant over time.  **If the data is stationary we can anticipate that the treatment of users in the future will be similar to the old records.** It is completely obvious that analyzing the stationary data is easier than non-stationary one.\n\nReturn back to the time plot we had in previous section. Is the data stationary ?!\n\n<a id=\"7\"><\/a> <br>\n**B. STATIONARY PARAMETERS**\n\nStationarity is defined using very strict criterion. However, for practical purposes we can assume the series to be stationary if it has constant statistical properties over time, ie. the following:\n\n 1. constant mean\n 2. constant variance\n 3. An autocovariance that does not depend on time.\n","49f009c1":"**As mentioned before the main purpose of the kernel is learning, so we will use part of data which is completely compatible with TimeSeries approaches. As it is obvious the range of 2007 to 2009 have periodic treatment could be analyzed with TimeSeries approaches.**","2b795a2f":"The Dickey-Fuller test statistic is significantly lower than the 1% critical value. So this TS is very close to stationary. You can try advanced decomposition techniques as well which can generate better results. Also, you should note that converting the residuals into original values for future data in not very intuitive in this case.","55fa2b86":"As you can see in the following code, we have plotted original data, mean and standar deviation of it in one figure.\nNow, lets check is our data stationary ?!","d3ba3fc0":"Though stationarity assumption is taken in many TS models, almost none of practical time series are stationary. So statisticians have figured out ways to make series stationary, which we\u2019ll discuss now. Actually, its almost impossible to make a series perfectly stationary, but we try to take it as close as possible.\n\nLets understand what is making a TS non-stationary. There are 2 major reasons behind non-stationaruty of a TS:\n1. Trend \u2013 varying mean over time. For eg, in this case we saw that on average, the number of passengers was growing over time.\n2. Seasonality \u2013 variations at specific time-frames. eg people might have a tendency to buy cars in a particular month because of pay increment or festivals.\n\nThe underlying principle is to model or estimate the trend and seasonality in the series and remove those from the series to get a stationary series. Then statistical forecasting techniques can be implemented on this series. The final step would be to convert the forecasted values into the original scale by applying trend and seasonality constraints back.\n\nNote: I\u2019ll be discussing a number of methods. Some might work well in this case and others might not. But the idea is to get a hang of all the methods and not focus on just the problem at hand.\n\nLet\u2019s start by working on the trend part.","8a70468a":"Notice that these start from \u20182007-02-02\u2019 and not the first month. Why? This is because we took a lag by 1 and first element doesn\u2019t have anything before it to subtract from. The way to convert the differencing to log scale is to add these differences consecutively to the base number. An easy way to do it is to first determine the cumulative sum at index and then add it to the base number. The cumulative sum can be found as:","5e429b65":"<a id=\"13\"><\/a> <br>\n**H. Eliminating Trend and Seasonality**\n\nThe simple trend reduction techniques discussed before don\u2019t work in all cases, particularly the ones with high seasonality. Lets discuss two ways of removing trend and seasonality:\n\n1. Differencing \u2013 taking the differece with a particular time lag\n2. Decomposition \u2013 modeling both trend and seasonality and removing them from the model.\n\n\n<a id=\"14\"><\/a> <br>\n1. Differencing\n\nOne of the most common methods of dealing with both trend and seasonality is differencing. In this technique, we take the difference of the observation at a particular instant with that at the previous instant. This mostly works well in improving stationarity. First order differencing can be done in Pandas as:\n","b8c6736b":"Now, its type is 'DatetimeIndex. Lets move on and continue ;-)'\n\nNow you can easily access to the values by the date you want in more easily way","6915de55":"This TS has even lesser variations in mean and standard deviation in magnitude. Also, the test statistic is smaller than the 1% critical value, which is better than the previous case. Note that in this case there will be no missing values as all values from starting are given weights. So it\u2019ll work even with no previous values.\n\nThe simple moving average we have done in previous section return TestStatistic -3.80 but Exploationary Moving Average returns -3.94 for TestStatic. Which is compeltely better than former.","2423be9d":"<a id=\"21\"><\/a> <br>\n5. MA MODEL\n","b1a84687":"This appears to have reduced trend considerably. Lets verify our method using test_stationary procedure we have done in earlier sections."}}