{"cell_type":{"44a87200":"code","67ff89f8":"code","5d764369":"code","5f7c3b3b":"code","4b4095d8":"code","67f9eaa6":"code","96617582":"code","4243c7f1":"code","d63583f6":"code","6f489578":"code","7e2a783e":"code","d5c59be2":"code","3738a274":"code","eb7c4bff":"code","78d2aa90":"code","f58ccc6c":"code","5eac10e9":"code","7affb5da":"code","925de8ea":"code","dd97c261":"code","eeede9af":"code","9045a5c4":"markdown","ce0946f4":"markdown","27f3efa8":"markdown","f454bc5d":"markdown","f7218b04":"markdown","20b66b54":"markdown","92354f30":"markdown"},"source":{"44a87200":"import spacy\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","67ff89f8":"nlp = spacy.load('en_core_web_sm')\n\ndoc = nlp(\"The 22-year-old recently won ATP Challenger tournament.\")\n\nfor tok in doc:\n    print(tok.text, \"...\", tok.dep_)","5d764369":"!pip install beautifulsoup4","5f7c3b3b":"import re\nimport pandas as pd\nimport bs4\nimport requests\nimport spacy\nfrom spacy import displacy\nnlp = spacy.load('en_core_web_sm')\n\nfrom spacy.matcher import Matcher \nfrom spacy.tokens import Span \n\nimport networkx as nx\n\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\npd.set_option('display.max_colwidth', 200)\n%matplotlib inline","4b4095d8":"\n# import wikipedia sentences\ncandidate_sentences = pd.read_csv(\"..\/input\/wiki-sentences\/wiki_sentences_v2.csv\")\ncandidate_sentences.shape","67f9eaa6":"candidate_sentences","96617582":"doc = nlp(\"confused and frustrated, connie decides to leave on her own.\")\n\nfor tok in doc:\n    print(tok.text, \"...\", tok.dep_)","4243c7f1":"def get_entities(sent):\n    ## chunk 1\n    ent1 = \"\"\n    ent2 = \"\"\n\n    prv_tok_dep = \"\"  # dependency tag of previous token in the sentence\n    prv_tok_text = \"\"  # previous token in the sentence\n\n    prefix = \"\"\n    modifier = \"\"\n\n    #############################################################\n\n    for tok in nlp(sent):\n        ## chunk 2\n        # if token is a punctuation mark then move on to the next token\n        if tok.dep_ != \"punct\":\n            # check: token is a compound word or not\n            if tok.dep_ == \"compound\":\n                prefix = tok.text\n                # if the previous word was also a 'compound' then add the current word to it\n                if prv_tok_dep == \"compound\":\n                    prefix = prv_tok_text + \" \" + tok.text\n\n            # check: token is a modifier or not\n            if tok.dep_.endswith(\"mod\") == True:\n                modifier = tok.text\n                # if the previous word was also a 'compound' then add the current word to it\n                if prv_tok_dep == \"compound\":\n                    modifier = prv_tok_text + \" \" + tok.text\n\n            ## chunk 3\n            if tok.dep_.find(\"subj\") == True:\n                ent1 = modifier + \" \" + prefix + \" \" + tok.text\n                prefix = \"\"\n                modifier = \"\"\n                prv_tok_dep = \"\"\n                prv_tok_text = \"\"\n\n                ## chunk 4\n            if tok.dep_.find(\"obj\") == True:\n                ent2 = modifier + \" \" + prefix + \" \" + tok.text\n\n            ## chunk 5  \n            # update variables\n            prv_tok_dep = tok.dep_\n            prv_tok_text = tok.text\n    #############################################################\n\n    return [ent1.strip(), ent2.strip()]","d63583f6":"get_entities(\"the film had 200 patents\")","6f489578":"entity_pairs = []\n\nfor i in tqdm(candidate_sentences[\"sentence\"]):\n    entity_pairs.append(get_entities(i))","7e2a783e":"entity_pairs[10:20]","d5c59be2":"def get_relation(sent):\n\n    doc = nlp(sent)\n\n    # Matcher class object \n    matcher = Matcher(nlp.vocab)\n\n    #define the pattern \n    pattern = [{'DEP':'ROOT'},\n            {'DEP':'prep','OP':\"?\"},\n            {'DEP':'agent','OP':\"?\"},  \n            {'POS':'ADJ','OP':\"?\"}] \n\n    matcher.add(\"matching_1\", None, pattern) \n\n    matches = matcher(doc)\n    k = len(matches) - 1\n\n    span = doc[matches[k][1]:matches[k][2]] \n\n    return(span.text)","3738a274":"get_relation(\"John completed the task\")\n","eb7c4bff":"relations = [get_relation(i) for i in tqdm(candidate_sentences['sentence'])]","78d2aa90":"pd.Series(relations).value_counts()[:50]\n","f58ccc6c":"# extract subject\nsource = [i[0] for i in entity_pairs]\n\n# extract object\ntarget = [i[1] for i in entity_pairs]\n\nkg_df = pd.DataFrame({'source':source, 'target':target, 'edge':relations})\nkg_df","5eac10e9":"# create a directed-graph from a dataframe\nG=nx.from_pandas_edgelist(kg_df, \"source\", \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())","7affb5da":"plt.figure(figsize=(12,12))\n\npos = nx.spring_layout(G)\nnx.draw(G, with_labels=True, node_color='red', edge_cmap=plt.cm.Blues, pos = pos)\nplt.show()","925de8ea":"G=nx.from_pandas_edgelist(kg_df[kg_df['edge']==\"composed by\"], \"source\", \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())\n\nplt.figure(figsize=(12,12))\npos = nx.spring_layout(G, k = 0.5) # k regulates the distance between nodes\nnx.draw(G, with_labels=True, node_color='red', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos, font_weight='bold')\nplt.show()","dd97c261":"G=nx.from_pandas_edgelist(kg_df[kg_df['edge']==\"written by\"], \"source\", \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())\n\nplt.figure(figsize=(12,12))\npos = nx.spring_layout(G, k = 0.5)\nnx.draw(G, with_labels=True, node_color='red', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos)\nplt.show()","eeede9af":"G=nx.from_pandas_edgelist(kg_df[kg_df['edge']==\"released in\"], \"source\", \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())\n\nplt.figure(figsize=(12,12))\npos = nx.spring_layout(G, k = 0.5)\nnx.draw(G, with_labels=True, node_color='red', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos)\nplt.show()","9045a5c4":"Let\u2019s see the knowledge graph of another important predicate, i.e., the \u201creleased in\u201d:\n\n","ce0946f4":"Since writing is an important role in any movie, I would like to visualize the graph for the \u201cwritten by\u201d relation:\n\n","27f3efa8":"### Relation \/ Predicate Extraction\n","f454bc5d":"## What is a Knowledge Graph\n\nA Knowledge Graph is a set of data points connected by relations that describe a domain, for instance, a business, an organization, or a field of study. It is a powerful way of representing data because Knowledge Graphs can be built automatically and can then be explored to reveal new insights about the domain.\n\nThe concept of Knowledge Graphs borrows from the Graph Theory. In this particular representation, we store data as:\n\n![0_ntSr1qbO-9nq20JD.png](attachment:0_ntSr1qbO-9nq20JD.png)\n\nEntity 1 and Entity 2 are called nodes and the Relationship is called an edge. Of course, in a real-world knowledge graph, there are lots of entities and relationships and there is more than one way to arrive at one entity starting from another.\n\nUsually, these types of graphs is modeled with triples, which are sets of three items like (subject, verb, object), with the verb being the relationship between the subject and the object\u200a-\u200afor example (London, is_capital, England).","f7218b04":"### Entity Pairs Extraction\n\nTo build a knowledge graph, the most important things are the nodes and the edges between them.","20b66b54":"Well, this is not exactly what we were hoping for (still looks quite a sight though!).\n\nIt turns out that we have created a graph with all the relations that we had. It becomes really hard to visualize a graph with these many relations or predicates.\n\nSo, it\u2019s advisable to use only a few important relations to visualize a graph. I will take one relation at a time. Let\u2019s start with the relation \u201ccomposed by\u201d:","92354f30":"### Build a Knowledge Graph\n"}}