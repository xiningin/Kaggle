{"cell_type":{"6fefa373":"code","2a70232a":"code","3c283a9d":"code","37b7db4a":"code","7498139e":"code","538578bd":"code","c8813b59":"code","0a1514f4":"code","a5679ca3":"code","1b8baa64":"code","9ae79667":"code","c0587e0b":"code","cd3b2b1b":"code","8993b0c1":"code","369550e7":"code","b3210c5a":"code","2604f14c":"code","3107a59f":"code","39ad9974":"code","7120e4e0":"code","6fb52c21":"code","db863c7b":"code","c27326cd":"code","f78ef799":"code","f9e3bd7d":"code","6728d0a4":"code","e15b2de3":"code","0f944d74":"code","6266b57f":"code","0a473ce0":"code","237adb5c":"code","c3d8807e":"code","173ffff6":"code","5b2dbee2":"code","cbbf62d0":"code","5f5c73a2":"code","a4af6692":"code","82d94e90":"code","47990050":"code","fbcf0e12":"code","30e02140":"code","f96ad7ac":"code","5444070c":"code","1fa4e275":"markdown","e1f69b40":"markdown","658e593c":"markdown","ddd1b275":"markdown","195d1511":"markdown","52fbef39":"markdown","ad09ad1a":"markdown","cad7fdb1":"markdown","bec49e20":"markdown","8939770f":"markdown"},"source":{"6fefa373":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a70232a":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error,accuracy_score\nimport math\nimport seaborn as sns","3c283a9d":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain.head()","37b7db4a":"print(train.shape)\nprint(test.shape)","7498139e":"comp_data = pd.concat((train,test))\ncomp_data_1 = comp_data\ncomp_data.shape","538578bd":"train.info()","c8813b59":"plt.figure(figsize=(16,9))\nsns.heatmap(train.isnull())","0a1514f4":"missing = train.isnull().sum() \/ len(train)\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing","a5679ca3":"## So from the above heatmap let us start the work of filling Missing Values:\ntrain['LotFrontage'] = train['LotFrontage'] .fillna(train['LotFrontage'].mean())","1b8baa64":"## The alley feature has maximum missing values so lets drop it:\ntrain.drop(['Alley'],axis=1,inplace=True)","9ae79667":"## Now let us handle Bsmt features:\ntrain['BsmtCond'] = train['BsmtCond'].fillna(train['BsmtCond'].mode()[0])\ntrain['BsmtQual'] = train['BsmtQual'].fillna(train['BsmtQual'].mode()[0])\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0])\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0])","c0587e0b":"train['FireplaceQu'] = train['FireplaceQu'].fillna(train['FireplaceQu'].mode()[0])\ntrain['GarageType'] = train['GarageType'].fillna(train['GarageType'].mode()[0])","cd3b2b1b":"## Let us work now all Garage features at once:\ntrain.drop(['GarageYrBlt'],axis=1,inplace=True)\ntrain['GarageFinish'] = train['GarageFinish'].fillna(train['GarageFinish'].mode()[0])\ntrain['GarageQual'] = train['GarageQual'].fillna(train['GarageQual'].mode()[0])\ntrain['GarageCond'] = train['GarageCond'].fillna(train['GarageCond'].mode()[0])","8993b0c1":"## Now let us drop all the highly missing values Columns:\ntrain.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","369550e7":"train.shape","b3210c5a":"train.drop(['Id'],axis=1,inplace=True)","2604f14c":"train.isnull().sum()","3107a59f":"## There are some missing values left:\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0])\ntrain['MasVnrType'] = train['MasVnrType'].fillna(train['MasVnrType'].mode()[0])","39ad9974":"plt.figure(figsize=(16,9))\nsns.heatmap(train.isnull())","7120e4e0":"# Lets drop the leftover na values\ntrain.dropna(inplace=True)","6fb52c21":"sns.heatmap(train.isnull())","db863c7b":"# cat_val = train.select_dtypes(exclude=[np.number])\n# cat_val.columns\ncat_val = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities','LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2','BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st','Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual','Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition']\nlen(cat_val)","c27326cd":"## With the help of OneHot Multivalues Encoding lets encode the data:\ndef onehot_encod(multcols):\n  train_1 = train_2\n  i = 0\n  for cols in multcols:\n    print(cols)\n    train_3 = pd.get_dummies(train_2[cols],drop_first=True)\n    train_2.drop([cols],axis=1,inplace=True)\n    if i==0:\n      train_1 = train_3.copy()\n    else:\n      train_1 = pd.concat((train_1,train_3))\n    i+=1\n  train_1 = pd.concat((train_2,train_1))\n  return train_1","f78ef799":"# Creating a copy of the cleaned data:\ncopy_train = train.copy()","f9e3bd7d":"test.isnull().sum()","6728d0a4":"plt.figure(figsize=(16,9))\nsns.heatmap(test.isnull())","e15b2de3":"test['LotFrontage'] = test['LotFrontage'] .fillna(test['LotFrontage'].mean())\ntest['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])\ntest.drop(['Alley'],axis=1,inplace=True)\ntest['BsmtCond'] = test['BsmtCond'].fillna(test['BsmtCond'].mode()[0])\ntest['BsmtQual'] = test['BsmtQual'].fillna(test['BsmtQual'].mode()[0])\ntest['BsmtExposure'] = test['BsmtExposure'].fillna(test['BsmtExposure'].mode()[0])\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna(test['BsmtFinType2'].mode()[0])\ntest['FireplaceQu'] = test['FireplaceQu'].fillna(test['FireplaceQu'].mode()[0])\ntest['GarageType'] = test['GarageType'].fillna(test['GarageType'].mode()[0])\ntest.drop(['GarageYrBlt'],axis=1,inplace=True)\ntest['GarageFinish'] = test['GarageFinish'].fillna(test['GarageFinish'].mode()[0])\ntest['GarageQual'] = test['GarageQual'].fillna(test['GarageQual'].mode()[0])\ntest['GarageCond'] = test['GarageCond'].fillna(test['GarageCond'].mode()[0])\ntest.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0])\ntest['MasVnrType'] = test['MasVnrType'].fillna(test['MasVnrType'].mode()[0])\ntest.drop(['Id'],axis=1,inplace=True)","0f944d74":"plt.figure(figsize=(16,9))\nsns.heatmap(test.isnull())","6266b57f":"## Lets check for some null values if any:\ntest.loc[:,test.isnull().any()].head()","0a473ce0":"test['Utilities'] = test['Utilities'].fillna(test['Utilities'].mode()[0])\ntest['Exterior1st'] = test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['Exterior2nd'] = test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna(test['BsmtFinType1'].mode()[0])\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mean())\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0])\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0])\ntest['KitchenQual'] = test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Functional'] = test['Functional'].fillna(test['Functional'].mode()[0])\ntest['GarageCars'] = test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].mode()[0])","237adb5c":"test.shape","c3d8807e":"# Concatenating the clean csv:\ntrain_2 = pd.concat((train,test))","173ffff6":"train_2['SalePrice']","5b2dbee2":"train_2.shape","cbbf62d0":"# Now lets send it to OnehotEncoding:\ntrain_2 = onehot_encod(cat_val)","5f5c73a2":"train_2.shape","a4af6692":"## Now by deleting all the duplicate values:\ntrain_2.drop_duplicates(inplace=True)\ntrain_2.shape","82d94e90":"train = train_2.iloc[:1422,:]\ntest = train_2.iloc[1422:2881,:]\nprint(train.shape)\ntest.shape","47990050":"test.drop(['SalePrice'],axis=1,inplace=True)","fbcf0e12":"X_train = train.drop(['SalePrice'],axis=1)\ny_train = train['SalePrice']","30e02140":"test.tail()","f96ad7ac":"import xgboost as xgb\nregressor = xgb.XGBRegressor(n_estimators=1000,learning_rate=0.01,early_stopping_rounds=10)\nregressor.fit(X_train,y_train)\ny_pred = regressor.predict(test)","5444070c":"pred = pd.DataFrame(y_pred)\nsub_file = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nxg_pred = pd.concat([sub_file['Id'],pred],axis=1)\nxg_pred.columns=['Id','SalePrice']\nxg_pred.to_csv('.\/xgbnono_O_2.csv',index=False)","1fa4e275":"# Importing Data:","e1f69b40":"## XGBoost:","658e593c":"# Importing the required libraries:","ddd1b275":"# Applying Algorithm and Predictions:","195d1511":"# --------------------------------------------------------------------------","52fbef39":"# Training Data Missing Values Handling","ad09ad1a":"## Training data Cleaning:","cad7fdb1":"# Data Analysis:","bec49e20":"## Encoding:","8939770f":"## Handle Categorical Values:"}}