{"cell_type":{"90433ffa":"code","8840f961":"code","fea698bb":"code","5ac8a4e9":"code","bfbcd433":"code","90bd81c3":"code","7b173b6d":"code","b852cc99":"code","06fc2c24":"code","2ccf4989":"code","70722cdd":"code","a67b4788":"code","a5598b3e":"code","87d04bac":"code","f3179e15":"code","5d0bb415":"code","d70fe6c3":"code","30da89c9":"code","bd164ea6":"code","c67c3a9b":"markdown","0815058c":"markdown","daf89a61":"markdown","d60a4fc9":"markdown","15d7f820":"markdown","cd1837ec":"markdown","5fbb3332":"markdown","f7d0c613":"markdown","b1e6d073":"markdown"},"source":{"90433ffa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8840f961":"df_credit = pd.read_csv(\"\/kaggle\/input\/iba-ml1-mid-project\/train.csv\")\ndf_credit.drop(\"Id\",axis=1,inplace=True)\ndf_credit","fea698bb":"df_credit.info()","5ac8a4e9":"df_credit.credit_line_utilization = df_credit.credit_line_utilization.str.replace(',','').astype(float)","bfbcd433":"df_credit[\"defaulted_on_loan\"].value_counts()","90bd81c3":"y=df_credit[[\"defaulted_on_loan\"]]\nfrom sklearn.model_selection import train_test_split\ntrain_df, test_df = train_test_split(df_credit, test_size = 0.1,\n                                     stratify = df_credit[[\"defaulted_on_loan\"]])","7b173b6d":"train_df.corr()","b852cc99":"loan_true = train_df[train_df[\"defaulted_on_loan\"]==1]\nloan_false = train_df[train_df[\"defaulted_on_loan\"]==0]\npd.DataFrame({\"n_missing_target_0\":loan_false.isna().sum().sort_values(ascending = False),\n              \"n_missing_target_1\":loan_true.isna().sum().sort_values(ascending = False)})","06fc2c24":"X_train = train_df[[\"age\", \"number_dependent_family_members\",\"monthly_income\",\n                            \"number_of_credit_lines\",\"real_estate_loans\",\"ratio_debt_payment_to_income\",\n                            \"credit_line_utilization\",\"number_of_previous_late_payments_up_to_59_days\",\n                   \"number_of_previous_late_payments_up_to_89_days\",\n                   \"number_of_previous_late_payments_90_days_or_more\"]]\ny_train = train_df[[\"defaulted_on_loan\"]]\n\nX_test = test_df[[\"age\", \"number_dependent_family_members\",\"monthly_income\",\n                            \"number_of_credit_lines\",\"real_estate_loans\",\"ratio_debt_payment_to_income\",\n                            \"credit_line_utilization\",\"number_of_previous_late_payments_up_to_59_days\",\n                 \"number_of_previous_late_payments_up_to_89_days\",\n                   \"number_of_previous_late_payments_90_days_or_more\"]]\ny_test = test_df[[\"defaulted_on_loan\"]]","2ccf4989":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler,RobustScaler\nfrom sklearn.impute import KNNImputer, SimpleImputer\nimport xgboost as xgb\nimport catboost as cb\nimport lightgbm as lgb","70722cdd":"import optuna\nfrom sklearn.metrics import roc_auc_score, make_scorer\nfrom sklearn.model_selection import cross_val_score\n\ndef make_model(l2_leaf_reg, learning_rate, imp_strategy):\n    model = Pipeline(steps = [(\"preprocessing\", Pipeline(steps = [\n            (\"imputer\",SimpleImputer(strategy = imp_strategy)),\n            (\"scaler\",RobustScaler())\n             ])),\n    (\"model\", cb.CatBoostClassifier(depth = 8, l2_leaf_reg = l2_leaf_reg,\n                                    learning_rate=learning_rate, silent = True))])\n    return model\n\ndef objective(trial):\n    imp_strategy = trial.suggest_categorical('imp_strategy', [\n        'median', 'mean', 'most_frequent'])\n    l2_leaf_reg = trial.suggest_float('l2_leaf_reg', 1, 15)\n    learning_rate = trial.suggest_float('learning_rate',0.1e-4, 0.3)\n    \n    model = make_model(l2_leaf_reg, learning_rate, \n                       imp_strategy)\n    return cross_val_score(model, X_train, y_train, cv=3, scoring=make_scorer(roc_auc_score)).mean()","a67b4788":"study = optuna.create_study(direction='maximize')","a5598b3e":"study.optimize(objective, n_trials=50)","87d04bac":"study.best_params","f3179e15":"#l2_lef_reg was tested with several values\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = Pipeline(steps = [\n    (\"preprocessing\", Pipeline(steps = [\n        (\"imputer\",SimpleImputer(strategy = \"most_frequent\")),\n        (\"scaler\",RobustScaler()),\n    ])),\n    (\"model\", cb.CatBoostClassifier(depth=8, l2_leaf_reg = 1500,\n                                    learning_rate = 0.24633990433839367,silent=True))\n])\nmodel.fit(X_train,y_train.values.ravel())","5d0bb415":"from sklearn.metrics import accuracy_score, f1_score, recall_score, roc_auc_score\n\nprint(\"Accuracy score: \", accuracy_score(model.predict(X_train),y_train))\nprint(\"Recall score: \", recall_score(model.predict(X_train),y_train))\nprint(\"F1 score: \", f1_score(model.predict(X_train),y_train))\nprint(\"Roc_auc score: \", roc_auc_score(model.predict(X_train),y_train))\nprint(\"__________________________________\")\nprint(\"Accuracy score: \", accuracy_score(model.predict(X_test),y_test))\nprint(\"Recall score: \", recall_score(model.predict(X_test),y_test))\nprint(\"F1 score: \", f1_score(model.predict(X_test),y_test))\nprint(\"Roc_auc score: \", roc_auc_score(model.predict(X_test),y_test))","d70fe6c3":"from eli5.sklearn import PermutationImportance\nfrom eli5 import show_weights\n\nperm = PermutationImportance(model).fit(X_test,y_test)\n\nshow_weights(perm, feature_names = list(X_test.columns))","30da89c9":"test_csv = pd.read_csv(\"\/kaggle\/input\/iba-ml1-mid-project\/test.csv\")\ntest_csv.drop([\"Id\"],axis=1, inplace=True)\ntest_csv.credit_line_utilization = test_csv.credit_line_utilization.str.replace(',','').astype(float)\ndf_answer = pd.DataFrame({\"Id\":range(1,48109),\"Predicted\":model.predict_proba(test_csv)[:,1]})\ndf_answer","bd164ea6":"df_answer.to_csv(\"test_submission_csv.\",index = False)","c67c3a9b":"## Model","0815058c":"As you can see this is target value is imbalanced, we will use ensemble technique against this.","daf89a61":"## EDA","d60a4fc9":"Now let's split our model to train_df and test_df with stratifying with target value","15d7f820":"General information about our dataframe","cd1837ec":"Now let's see examine values of target column","5fbb3332":"Loading dataframe, and removing Id column","f7d0c613":"credit_line_utilization seems like float, but its type in dataframe is object, let's change type of this column. And also when we examine data we see that there are some values which float as shown with coma, that is why it is hard to change the type of series that easily. First let's solve this problem and after change the type of series.","b1e6d073":"We can see that there is multicollinarity with last 3 variables (59 days, 89 days and 90 days). But multicollinarity will not affect to xgboost, that is why we can keep them"}}