{"cell_type":{"7c750d3e":"code","38f729ac":"code","e4719133":"code","4e02edd7":"code","5b5b3671":"code","934cb5de":"code","f42f886b":"code","8d52e6b7":"code","228ab04d":"code","4d35557f":"code","7ccdf778":"code","4856ccd8":"code","38d2ec4d":"code","49c0b0a3":"markdown","131da895":"markdown","55edde99":"markdown","1d292078":"markdown","13da566f":"markdown","7ab89482":"markdown","0c200ac8":"markdown","e6093f60":"markdown","7a570237":"markdown","20f89e8e":"markdown"},"source":{"7c750d3e":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom lightgbm import LGBMClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\n\nfrom tqdm.notebook import tqdm_notebook\n\nimport warnings\nwarnings.filterwarnings('ignore')","38f729ac":"pd.set_option('display.max_rows', 100)","e4719133":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4e02edd7":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\")\nss = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")","5b5b3671":"print(f'Shape of Train dataset is : {train.shape}')\nprint(f'Shape of Test dataset is : {test.shape}')\nprint(f'Shape of Sample Submission dataset is : {ss.shape}')","934cb5de":"def check_NAN_columns(df, df_name):\n    if len(df.columns[df.isnull().any()]) == 0:\n        print(f'No missing data in {df_name} dataset')\n    else:\n        print(f'The following columns are having missing data in {df_name} dataset:')\n        print(df.columns[df.isnull().any()])","f42f886b":"datasets = {\n    'Train': train,\n    'Test': test,\n    'Sample Submission': ss,\n}\nfor df_name, df in datasets.items():\n    check_NAN_columns(df, df_name)","8d52e6b7":"train.drop(columns=['id']).describe().T","228ab04d":"test.drop(columns=['id']).describe().T","4d35557f":"fig, ax = plt.subplots(figsize=(12, 6))\nsns.countplot(x='target', data=train)\nax.set_title('Target Distribution')","7ccdf778":"X = train.drop([\"id\",\"target\"], axis=1)\ny = train.target\nX_test = test.drop(\"id\", axis=1)","4856ccd8":"iterations = 100\nlgbm_pred = 0\nlogloss = []\nfor i in tqdm_notebook(range(iterations)):\n    random_state = np.random.randint(0,2000)\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y , test_size=0.2, stratify=y, random_state=random_state)\n    lgbm = LGBMClassifier(random_state=random_state)\n    lgbm.fit(X_train,y_train)\n    valid_preds = lgbm.predict_proba(X_valid)\n    lgbm_pred += lgbm.predict_proba(X_test)\/iterations\n    logloss.append(log_loss(y_valid,valid_preds))\n    print(f'Iteration {i} : Random State = {random_state}, Log Loss = {log_loss(y_valid,valid_preds)}')\nprint(f'Average Log Loss = {sum(logloss)\/len(logloss)}')","38d2ec4d":"ss[\"Class_1\"] = lgbm_pred[:,0]\nss[\"Class_2\"] = lgbm_pred[:,1]\nss[\"Class_3\"] = lgbm_pred[:,2]\nss[\"Class_4\"] = lgbm_pred[:,3]\nss[\"Class_5\"] = lgbm_pred[:,4]\nss[\"Class_6\"] = lgbm_pred[:,5]\nss[\"Class_7\"] = lgbm_pred[:,6]\nss[\"Class_8\"] = lgbm_pred[:,7]\nss[\"Class_9\"] = lgbm_pred[:,8]\nss.to_csv(\"\/kaggle\/working\/lgbm_100_ensemble_sub.csv\", index=False)","49c0b0a3":"# \u2705 Importing Required Libraries","131da895":"# \u2705Reading the Data","55edde99":"# \ud83d\udd0dBasic Data Checks","1d292078":"# Approach","13da566f":"# LGBMClassifier model","7ab89482":"<div class=\"alert alert-block alert-info\"><p style='color:black;'>\n    1. Import libraries<br>\n    2. Read the data<br>\n    3. Check for missing values and target distribution<br>\n    4. Train different LGBMClassifiers and predict for test data<br>\n    5. Take the average of the predictions<br>\n    6. Create submission files<br>\n<\/p>\n<\/div>","0c200ac8":"# \ud83d\udcc1 Submission file","e6093f60":"<div class=\"alert alert-block alert-info\"><p style='color:black;'>We are gonna create <b>100 different instances of LGBMClassifier with different random states<\/b> and then take the average of the predictions.<\/p><\/div>","7a570237":"<br>\n<h1 style=\"color:pink; text-align:center; font-size:30px; font-family:Arial Black; border-radius:30px 30px; background-color:black; line-height: 50px; padding: 15px 15px 15px 2.5%;\">\ud83d\udca5LightBGM Ensemble\ud83d\udca5<\/h1>\n<br>","20f89e8e":"# Kindly Upvote, if you like this notebook."}}