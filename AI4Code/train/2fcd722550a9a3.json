{"cell_type":{"2116e957":"code","cf950093":"code","722b01e3":"code","2a9f2968":"code","607c46d6":"code","0688c379":"code","481ea043":"code","82de5d2b":"code","480669fb":"code","f51d269e":"code","fb02a3b6":"code","0e7d6587":"code","1b78ffee":"code","09e9c9c5":"code","5cd2a0de":"code","5fc25c8d":"code","b6ee6e7d":"code","e09764cf":"code","f0008c9d":"code","1a08892c":"code","5b6d9038":"code","9316f599":"code","faa4f196":"code","0a531ef8":"code","db2328cd":"code","17dfaff3":"code","5404b938":"code","408af1de":"code","5577567c":"markdown","ca884785":"markdown","3e58fb66":"markdown","d3e1175c":"markdown","f4428e93":"markdown","b1a6f5c6":"markdown","9acf40de":"markdown"},"source":{"2116e957":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf950093":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split as tts\n\nfrom sklearn.linear_model import LinearRegression","722b01e3":"df = pd.read_csv('..\/input\/student-alcohol-consumption\/student-mat.csv')","2a9f2968":"df.head()","607c46d6":"plt.figure(figsize=(14,12))\nsns.heatmap(df.corr(),annot = True)\nplt.show()","0688c379":"df.isnull().sum()","481ea043":"df.dtypes","82de5d2b":"nonnumeric_columns = [df.columns[index] for index,dtype in enumerate(df.dtypes) if dtype == 'object']","480669fb":"nonnumeric_columns","f51d269e":"for column in nonnumeric_columns:\n    print(f\"{column}:     {df[column].unique()}\")","fb02a3b6":"df['Mjob'] = df['Mjob'].apply(lambda x : \"m_\"+x)\ndf['Fjob'] = df['Fjob'].apply(lambda x : \"f_\"+x)\ndf['reason'] = df['reason'].apply(lambda x : \"r_\"+x)\ndf['guardian'] = df['guardian'].apply(lambda x : \"g_\"+x)","0e7d6587":"df","1b78ffee":"dummies_df = pd.concat([pd.get_dummies(df['Mjob']),pd.get_dummies(df['Fjob']),pd.get_dummies(df['reason']),pd.get_dummies(df['guardian'])],axis = 1)","09e9c9c5":"df = pd.concat([df,dummies_df],axis = 1)","5cd2a0de":"df = df.drop(['Mjob','Fjob','reason','guardian'],axis=1)","5fc25c8d":"df","b6ee6e7d":"nonnumeric_columns = [df.columns[index] for index,dtype in enumerate(df.dtypes) if dtype == 'object']\nfor column in nonnumeric_columns:\n    print(f\"{column}:  {df[column].unique()}\")","e09764cf":"encoder = LabelEncoder()\nfor column in nonnumeric_columns:\n    df[column] = encoder.fit_transform(df[column])","f0008c9d":"Y = df['G3']\nX = df.drop('G3',axis=1)","1a08892c":"X","5b6d9038":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X),columns=X.columns)","9316f599":"X","faa4f196":"x_train,x_test,y_train,y_test = tts(X,Y,train_size = 0.7)","0a531ef8":"model = LinearRegression()\nmodel.fit(x_train,y_train)","db2328cd":"import sklearn","17dfaff3":"model.score(x_test,y_test)","5404b938":"y_pred = model.predict(x_test)","408af1de":"print(f'Explained variance regression score : {sklearn.metrics.explained_variance_score(y_test, y_pred)}')\nprint(f'maximum residual error : {sklearn.metrics.max_error(y_test, y_pred)}')\nprint(f'Mean absolute error : {sklearn.metrics.mean_absolute_error(y_test, y_pred)}')\nprint(f'Mean squared error : {sklearn.metrics.mean_squared_error(y_test, y_pred)}')\nprint(f'r2 score : {sklearn.metrics.r2_score(y_test, y_pred)}')\n","5577567c":"# Data Visualization","ca884785":"### Checking For Missing values","3e58fb66":"# Performance\n","d3e1175c":"### Encoding","f4428e93":"# Preprocessing","b1a6f5c6":"### Scaling","9acf40de":"# Training"}}