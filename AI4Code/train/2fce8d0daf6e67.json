{"cell_type":{"1ef501b3":"code","de93f1db":"code","ae43f361":"code","0f77d1ec":"code","a888646d":"code","14fb393b":"code","3544165a":"code","c809c0f0":"code","39f27e7b":"code","0c59e453":"code","ba5b1218":"code","a1259274":"code","76690342":"code","e9084565":"code","adb838e5":"code","e738607b":"code","ae923986":"code","33c8bec1":"markdown","4aa5c485":"markdown","c48ea410":"markdown","184ce5e1":"markdown","9679e5ec":"markdown","594052a7":"markdown","89888376":"markdown","e259ac6f":"markdown","7fe5fb87":"markdown","aed5a1e6":"markdown","ca3611a7":"markdown","66af05cd":"markdown","0ac92c44":"markdown","092a6280":"markdown","de9e904a":"markdown","52d24d13":"markdown","7ec72d3e":"markdown"},"source":{"1ef501b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","de93f1db":"import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\n\nf=open('21-04-2020.csv','w',newline='')\nwriter=csv.writer(f)\n\nsoup=BeautifulSoup(urllib.request.urlopen(\"https:\/\/www.mohfw.gov.in\/\").read(),'lxml')\n\n\n\ntbody=soup('table',{\"class\":\"table table-striped\"})[0].find_all(\"tr\")\nfor rows in tbody:\n    cols=rows.findChildren(recursive=False)\n    cols=[ele.text.strip() for ele in cols]\n    writer.writerow(cols)\n    print(cols)","ae43f361":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","0f77d1ec":"data=pd.read_csv('..\/input\/dynamiccovid19india-statewise\/21-04-2020.csv')\ndf=data[:-3]\ndf.head()","a888646d":"mapping = {df.columns[2]: 'Confirmed', df.columns[3]:'cured'}\ndf=df.rename(columns=mapping) ","14fb393b":"df2=df.groupby('Name of State \/ UT')[['Confirmed','cured','Death']].sum()\ndf.head()","3544165a":"df.info()","c809c0f0":"import matplotlib.pyplot as plt\nperc=[]\nfor i in df2.Confirmed:\n    per=i\/len(df2)\n    perc.append(i)\nplt.figure(figsize=(25,15))    \nplt.title('states with confirmed cases (Percentage distribution)',fontsize=40,color=\"yellow\")\nplt.pie(perc,autopct='%1.1f%%',)\nplt.legend(df2.index,loc='upper left')","39f27e7b":"plt.figure(figsize=(40,35))\n\nplt.suptitle('Comparing cases of indian Confirmed and Cured and death',fontsize=40)\n\nplt.subplot(221)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.barh(df2.index,df2.Confirmed,color='darkmagenta',edgecolor='black',linewidth=3)\n\n\nplt.subplot(222)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.barh(df2.index,df2.cured,color='blue',edgecolor='black',linewidth=3)\n\n\n\nplt.subplot(223)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.barh(df2.index,df2.Death,color='yellow',edgecolor='black',linewidth=3)","0c59e453":"import seaborn as sns\ndf2=df2.nlargest(10,'Confirmed')\ndf2['Name of State \/ UT']=df2.index\nsns.pairplot(df2,hue='Name of State \/ UT')","ba5b1218":"df2=df2.nlargest(20,'Confirmed')\nplt.figure(figsize=(15,10))\nplt.title('top 20 states with confirmed cases',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('State',fontsize=20)\nplt.ylabel('Cases',fontsize=20)\nplt.plot(df2.index,df2.Confirmed,marker='o',mfc='black',label='Confirmed',markersize=10,linewidth=5)\nplt.plot(df2.index,df2.Death,marker='o',mfc='black',label='Deaths',markersize=10,linewidth=5)\nplt.plot(df2.index,df2.cured,marker='o',mfc='black',label='Cured',markersize=10,linewidth=5,color='green')\nplt.legend(fontsize=20)","a1259274":"lbl=LabelEncoder()\ndf2['Name of State \/ UT']=lbl.fit_transform(df2['Name of State \/ UT'])","76690342":"tree=DecisionTreeRegressor()\nlinear=LinearRegression()\nlogistic=LogisticRegression()\nnb=GaussianNB()\nforest=RandomForestClassifier()","e9084565":"x=df2[['Name of State \/ UT','Confirmed','cured','Death']]\ny=df2['Confirmed']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)\n\n","adb838e5":"tree.fit(x_train,y_train)\nlinear.fit(x_train,y_train)\nlogistic.fit(x_train,y_train)\nnb.fit(x_train,y_train)\nforest.fit(x_train,y_train)","e738607b":"from sklearn.metrics import r2_score\n\nprediction1=logistic.predict(x_test)\nscore1=r2_score(y_test,prediction1)\n\nprediction2=linear.predict(x_test)\nscore2=r2_score(y_test,prediction2)\n\n\nprediction3=forest.predict(x_test)\nscore3=r2_score(y_test,prediction3)\n\nprediction4=nb.predict(x_test)\nscore4=r2_score(y_test,prediction4)\n\nprediction5=tree.predict(x_test)\nscore5=r2_score(y_test,prediction5)","ae923986":"scores=[score1,score2,score3,score4,score5]\nmodels=['logistic','Linear regression','Random forest','GaussianNB','DecisionTreeRegressor']\nplt.figure(figsize=(30,15))\nplt.title('Comparing Accuracy of different models',fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('models',fontsize=30)\nplt.ylabel('Accuracy',fontsize=30)\nplt.bar(models,scores,color=['cyan','blue','green'],alpha=0.5,linewidth=3,edgecolor='black')\n\nfor i,v in enumerate(scores):\n    plt.text(i-.15,v+.03,format(scores[i],'.2f'),fontsize=20)","33c8bec1":"Predicting of certain models","4aa5c485":"Fetching the latest data from website and storing it to Latest_covid.csv","c48ea410":"importing required libraries","184ce5e1":"Pie chart (Each state percentage of confirmed cases over the total cases confirmed**)**","9679e5ec":"Labelling attribute names","594052a7":"renaming of column names.........................","89888376":"****axisgrid and pairgrid plot of top 10 states affected****","e259ac6f":"Models for prediction","7fe5fb87":"****Comparing cases of indian Confirmed and Cured and death","aed5a1e6":"******Plotting models with score","ca3611a7":"Training,testing of the model","66af05cd":"viewinf info of the dataset","0ac92c44":"**Can view the accuracy of different models****","092a6280":"importing data  and viewing first 5 records","de9e904a":"****Plots of top affected countries","52d24d13":"**Analysis and Visualizations**","7ec72d3e":"viewing dataset   and performing sum of all values(cases)  and using groupby func"}}