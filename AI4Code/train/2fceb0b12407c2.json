{"cell_type":{"7cb29d69":"code","78a64102":"code","224e6354":"code","b5edc973":"code","2584bb99":"code","4bf71ab7":"code","22761aa5":"code","9b082d49":"code","a3ca0498":"code","8e331df7":"code","7ea89adc":"code","c667deea":"code","0cbdd7aa":"code","4bde384d":"code","f0c7b493":"code","9d6e2bea":"code","fb03d67a":"code","acb9b303":"code","18158e3b":"code","80de1edf":"code","b9376db3":"code","8c0d65b3":"code","3e2166ac":"code","984e4bac":"code","cb7ff68a":"code","027c543d":"code","57d054ac":"code","d4f578f6":"markdown","ceffb5eb":"markdown","9d61d67b":"markdown","4117c8e0":"markdown"},"source":{"7cb29d69":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression, LogisticRegression","78a64102":"df=pd.read_csv('\/kaggle\/input\/loanapproval\/loan.csv')","224e6354":"df.keys()  #shows the column names","b5edc973":"df #will display the whole dataset","2584bb99":"df=df.dropna()  #to drop all null values","4bf71ab7":"df\n","22761aa5":"x=df[[\"FICO.Score\",\"Loan.Amount\"]].values\ny=df[\"Interest.Rate\"].values","9b082d49":"model=LinearRegression()\nmodel.fit(x,y)","a3ca0498":"y_pred=model.predict(x)","8e331df7":"exp=np.exp(-y_pred)+1\nlog=1\/exp","7ea89adc":"y_con = y<17    #store the condition where interest rate is less than 17","c667deea":"df[\"TF\"]=df[\"Interest.Rate\"] <17   #store boolean values in TF where interest rate is less than 17\ndf","0cbdd7aa":"df.TF.value_counts()     # no of types of values, ","4bde384d":"log_reg=LogisticRegression()    #to use logistic regression","f0c7b493":"log_reg.fit(x,y_con)   #y_con is where interest rate i.e. y is < 17","9d6e2bea":"log_reg.predict([[10,20000]])","fb03d67a":"dat=log_reg.predict_proba([[1000,20000]])   #this prints the probability :(false,true)\ndat","acb9b303":"dat[0][1]>0.8","18158e3b":"y_pred = log_reg.predict(x)","80de1edf":"df[\"Predict\"] = y_pred\ndf.Predict","b9376db3":"df.Predict.value_counts()  #predicted data\n","8c0d65b3":"#real data\n\ndf.TF.value_counts()","3e2166ac":"from sklearn.metrics import confusion_matrix, accuracy_score","984e4bac":"cm = confusion_matrix(df.TF.values, df.Predict.values)","cb7ff68a":"cm","027c543d":"df.shape","57d054ac":"accuracy_score(df.TF.values, df.Predict.values)","d4f578f6":"# Logistic Regression","ceffb5eb":"## ","9d61d67b":"### * A supervised learning method for classification\n \n### * Predicts the probability of an outcome that can have two values","4117c8e0":"signmoid function:\ng= 1 \/ ( 1 + e^(-v))\n\nLinear output -> Sigmoid function -> 1 \/ ( 1 + e^(-output))\n\nrange: 0 to 1"}}