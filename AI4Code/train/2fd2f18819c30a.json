{"cell_type":{"8725a1ae":"code","57c5a9bf":"code","dad4ca07":"code","37f56a5d":"code","1b4409fc":"code","b224276b":"code","55930a28":"code","88fe1615":"code","5831495b":"code","afd15512":"code","ac68db84":"code","edb822c6":"code","c239f3b4":"code","4c59cd25":"code","6a56c788":"code","40ed0190":"code","5161409a":"code","4e932390":"code","396920ee":"code","19741812":"code","3a650693":"code","0b8725bd":"code","e6dfd604":"markdown"},"source":{"8725a1ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57c5a9bf":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(\"talk\",\"whitegrid\",font_scale=1,font=\"sans-serif\",color_codes=True)\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, learning_curve\nfrom sklearn.neural_network import MLPClassifier\nfrom pylab import rcParams\nplt.rcParams[\"figure.figsize\"] = [10,10]\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndf = pd.read_csv(r\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","dad4ca07":"sns.heatmap(df.isnull())\nplt.title(\"Detect Missing Values\")\nplt.show()","37f56a5d":"dfcorr = df.corr()\nsns.heatmap(dfcorr, annot=True, annot_kws={\"size\":12}, cmap=\"coolwarm\")\nplt.title(\"Correlation Matrix\")\nplt.show()","1b4409fc":"dfcov = df.cov()\nsns.heatmap(dfcov, annot=True, annot_kws={\"size\":12}, cmap=\"coolwarm\")\nplt.title(\"Covariance Matrix\")\nplt.show()","b224276b":"x = df[[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]]\ny = df.iloc[::,-1]","55930a28":"x_trainMLP, x_testMLP, y_trainMLP, y_testMLP = train_test_split(x,y,test_size=0.2,random_state=0)\nscalerMLP = StandardScaler()\nx_trainMLP = scalerMLP.fit_transform(x_trainMLP)\nx_testMLP = scalerMLP.transform(x_testMLP)\nMLP = MLPClassifier()\nMLP.fit(x_trainMLP,y_trainMLP)","88fe1615":"y_predMLP = MLP.predict(x_testMLP)\npd.DataFrame({\"Actual\":y_testMLP, \"Predicted\":y_predMLP})","5831495b":"y_testMLP.mean()","afd15512":"1 - y_testMLP.mean()","ac68db84":"classificationreportMLP = pd.DataFrame(metrics.classification_report(y_testMLP,y_predMLP,output_dict=True)).transpose()\nclassificationreportMLP","edb822c6":"cmatMLP = pd.DataFrame(metrics.confusion_matrix(y_testMLP,y_predMLP),columns =(\"Positive\",\"Negative\"),index=[\"Positive\",\"Negative\"])\ncmatMLP","c239f3b4":"y_predMLP_proba = MLP.predict_proba(x_testMLP)[::,1]\nfprMLP,tprMLP,_ = metrics.roc_curve(y_testMLP,y_predMLP_proba)\naucMLP = metrics.roc_auc_score(y_testMLP,y_predMLP_proba)\nplt.plot(fprMLP,tprMLP,label=\"MLP Neural Network , auc \" +str(aucMLP),color=\"black\")\nplt.plot([0,1],[0,1],color=\"red\")\nplt.xlim([0.00,1.01])\nplt.ylim([0.00,1.01])\nplt.xlabel(\"Specificty\")\nplt.ylabel(\"Sensitivity\")\nplt.title(\"Validation ROC Curve - Multi-Layer Percepron Neural Networks\")\nplt.legend(loc=4)\nplt.show()","4c59cd25":"precisionMLP, recallMLP, thresholdMLP = metrics.precision_recall_curve(y_testMLP,y_predMLP)\napsMLP = metrics.average_precision_score(y_testMLP,y_predMLP)\nplt.plot(precisionMLP, recallMLP,label=\"MLP Neural Network , aps \" +str(apsMLP),color=\"black\")\nplt.axhline(y=0.5,color=\"red\")\nplt.xlabel(\"Precision\")\nplt.ylabel(\"Recall\")\nplt.title(\"Precision-Recall - Multi-Layer Percepron Neural Networks\")\nplt.legend(loc=4)\nplt.show()","6a56c788":"trainsizeMLP, trainscoreMLP, testscoreMLP = learning_curve(MLPClassifier(),x,y,cv=10, n_jobs=-1,scoring=\"accuracy\",train_sizes=np.linspace(0.1,1.0,50))\ntrainscoreMLP_mean = np.mean(trainscoreMLP,axis=1)\ntrainscoreMLP_std = np.std(trainscoreMLP,axis=1)\ntestscoreMLP_mean = np.mean(testscoreMLP,axis=1)\ntestscoreMLP_std = np.std(testscoreMLP,axis=1)\nplt.plot(trainsizeMLP,trainscoreMLP_mean, color=\"red\", label=\"Training score\")\nplt.plot(trainsizeMLP,testscoreMLP_mean, color=\"black\", label=\"Cross-Validation score\")\nplt.xlabel(\"Training Size Set\")\nplt.ylabel(\"Accuracy Score\")\nplt.title(\"Learning Curve - Multi-Layer Percepron Neural Networks\")\nplt.show()","40ed0190":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import BernoulliRBM\nfrom sklearn.pipeline import Pipeline\nx_trainRBM, x_testRBM, y_trainRBM, y_testRBM = train_test_split(x,y,test_size=0.2,random_state=0)\nscalerRBM = StandardScaler()\nx_trainRBM = scalerRBM.fit_transform(x_trainRBM)\nx_testRBM = scalerRBM.transform(x_testRBM)\nlogreg = LogisticRegression()\nRBM = BernoulliRBM()\nclassifier = Pipeline(steps=([(\"rbm\",RBM),(\"logreg\",logreg)]))\nclassifier.fit(x_trainRBM,y_trainRBM)","5161409a":"y_predRBM = classifier.predict(x_testRBM)\npd.DataFrame({\"Actual\":y_testRBM, \"Predicted\":y_predRBM})","4e932390":"y_testRBM.mean()","396920ee":"1 - y_testRBM.mean()","19741812":"cmatRBM = pd.DataFrame(metrics.confusion_matrix(y_testRBM,y_predRBM),columns =(\"Positive\",\"Negative\"),index=[\"Positive\",\"Negative\"])\ncmatRBM\n","3a650693":"y_predRBM_proba = classifier.predict_proba(x_testRBM)[::,1]\nfprRBM,tprRBM,_ = metrics.roc_curve(y_testRBM,y_predRBM_proba)\naucRBM = metrics.roc_auc_score(y_testRBM,y_predRBM_proba)\nplt.plot(fprRBM,tprRBM,label=\"Bernoulli RBM Neural Network , auc \" +str(aucRBM),color=\"gray\")\nplt.plot([0,1],[0,1],color=\"red\")\nplt.xlim([0.00,1.01])\nplt.ylim([0.00,1.01])\nplt.xlabel(\"Specificty\")\nplt.ylabel(\"Sensitivity\")\nplt.title(\"Validation ROC Curve - Bernoulli Restricted Boltzman\")\nplt.legend(loc=4)\nplt.show()","0b8725bd":"precisionRBM, recallRBM, thresholdRBM = metrics.precision_recall_curve(y_testRBM,y_predRBM)\napsRBM = metrics.average_precision_score(y_testRBM,y_predRBM)\nplt.plot(precisionRBM, recallRBM,label=\"Bernoulli RBM Neural Network, aps \" +str(apsRBM),color=\"gray\")\nplt.axhline(y=0.5,color=\"red\")\nplt.xlabel(\"Precision\")\nplt.ylabel(\"Recall\")\nplt.title(\"Precision-Recall - Bernoulli Restricted Boltzman\")\nplt.legend(loc=4)\nplt.show()","e6dfd604":"## Bernoulli Restricted Boltzman"}}