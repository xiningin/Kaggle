{"cell_type":{"bd3fa036":"code","d3ac14dd":"code","dc22df73":"code","dafde7b6":"code","b7ee52b1":"code","56b64ad8":"code","7a75b48a":"code","c9041668":"code","afae430b":"code","5f11d303":"code","82100f1c":"code","78f27a40":"code","084fa74f":"code","938b54cd":"code","e491c16f":"code","9a4cdec4":"code","187d719c":"code","c74b8517":"code","a1ee3ff0":"code","c49d57ad":"code","9645c21b":"code","90edf582":"code","087e10b3":"code","57d78182":"code","7e448868":"code","c3fc0283":"code","bffd9304":"code","99d913fd":"code","9d00696c":"code","62182ad5":"code","6d36a86e":"code","0e719d6a":"code","41b80eb0":"code","a16edddb":"code","27b9f817":"code","7cdeabf9":"code","537f9e8b":"code","129d6617":"code","143f45c9":"code","41c8c206":"code","996aa536":"code","4d7e9c76":"code","768ef6a9":"code","440bda9a":"code","caede5d1":"code","e008ff51":"code","11fc10c5":"code","04e33a49":"code","bd4073ba":"code","8f1f6a1e":"code","21106a06":"code","34db551d":"code","ba66c23d":"code","7dec980b":"code","f5e53c68":"code","91706eca":"code","583ef02a":"code","3f38cc13":"code","5cced358":"code","2674c734":"code","07202cfd":"code","e7b42802":"code","5282fe9e":"code","dcbe8f5e":"code","e953a482":"code","93efa855":"code","de565c98":"code","fa515740":"code","6498af26":"code","d468a621":"code","96ee27cd":"code","cf3e9118":"code","51d22a55":"code","0a2f67d0":"markdown","8e6362f1":"markdown","fed20fc8":"markdown","56c2d84d":"markdown","e0b63ff3":"markdown","e547a899":"markdown","064fe5a8":"markdown","3cf78742":"markdown","b08705cf":"markdown","28e1b54c":"markdown","7d25b9f8":"markdown","f4af42df":"markdown","07162fcb":"markdown","755dadc1":"markdown","5deb29a5":"markdown","3fe206fe":"markdown","53fc82aa":"markdown","e050fe9e":"markdown"},"source":{"bd3fa036":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d3ac14dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly as plotly\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport geopandas as gpd\n%matplotlib inline","dc22df73":"from plotly import __version__\nimport plotly.offline as py \nfrom plotly.offline import init_notebook_mode, plot\ninit_notebook_mode(connected=True)\nfrom plotly import tools\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport folium\nfrom folium.plugins import MarkerCluster\nfrom folium import plugins\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder","dafde7b6":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","b7ee52b1":"df1=df.sort_values(by=['number_of_reviews'],ascending=False).head(1000)","56b64ad8":"df2=df.sort_values(by=['price'],ascending=False).head(1000)","7a75b48a":"print('Rooms with the most number of reviews')\nLong=-73.80\nLat=40.80\nmapdf1=folium.Map([Lat,Long],zoom_start=10,)\n\nmapdf1_rooms_map=plugins.MarkerCluster().add_to(mapdf1)\n\nfor lat,lon,label in zip(df1.latitude,df1.longitude,df1.name):\n    folium.Marker(location=[lat,lon],icon=folium.Icon(icon='home'),popup=label).add_to(mapdf1_rooms_map)\nmapdf1.add_child(mapdf1_rooms_map)\n\nmapdf1","c9041668":"print('Most Expensive rooms')\nLong=-73.80\nLat=40.80\nmapdf1=folium.Map([Lat,Long],zoom_start=10,)\n\nmapdf1_rooms_map=plugins.MarkerCluster().add_to(mapdf1)\n\nfor lat,lon,label in zip(df2.latitude,df2.longitude,df2.name):\n    folium.Marker(location=[lat,lon],icon=folium.Icon(icon='home'),popup=label).add_to(mapdf1_rooms_map)\nmapdf1.add_child(mapdf1_rooms_map)\n\nmapdf1","afae430b":"plt.figure(figsize=(10,10))\nsns.scatterplot(x='longitude', y='latitude', hue='neighbourhood_group',s=20, data=df)\nplt.show()","5f11d303":"df3=df.groupby(['neighbourhood_group']).mean()","82100f1c":"df3.drop(['latitude', 'longitude','host_id','id'],axis=1)","78f27a40":"df4=df.groupby(['neighbourhood_group','neighbourhood']).mean()","084fa74f":"r1=df4.loc['Bronx'].number_of_reviews.sum().round()\nr2=df4.loc['Brooklyn'].number_of_reviews.sum().round()\nr3=df4.loc['Manhattan'].number_of_reviews.sum().round()\nr4=df4.loc['Queens'].number_of_reviews.sum().round()\nr5=df4.loc['Staten Island'].number_of_reviews.sum().round()","938b54cd":"abcd=df['neighbourhood_group'].value_counts()\ndfabcd=pd.DataFrame(abcd)\ndfabcd.reset_index(inplace=True)\n","e491c16f":"reviews = [r1,r2,r3,r4,r5]\nreview = pd.DataFrame(data=reviews,index=dfabcd['index'],columns=['values'],)\nreview.reset_index(inplace=True)\n\n\n\ntrace10 = go.Bar(x=review['index'],y=review['values'],marker=dict(color=['Blue','Red','Green','Black','Purple']),width=0.4)\n\ndata=[trace10]\nlayout = go.Layout(title='Number of reviews by Neighbourhood',height=400,width=800)\nfig= go.Figure(data=data,layout=layout)\npy.iplot(fig)\n","9a4cdec4":"r1=df4.loc['Bronx'].reviews_per_month.mean()\nr2=df4.loc['Brooklyn'].reviews_per_month.mean()\nr3=df4.loc['Manhattan'].reviews_per_month.mean()\nr4=df4.loc['Queens'].reviews_per_month.mean()\nr5=df4.loc['Staten Island'].reviews_per_month.mean()\n\nrev = [r1,r2,r3,r4,r5]\n\nrev_per_month = pd.DataFrame(data=rev,columns=['values'],index=dfabcd['index'])\n\nrev_per_month.reset_index(inplace=True)\n\n\ntrace2 = go.Scatter(x=rev_per_month['index'],y=rev_per_month['values'],marker=dict(color=['Blue','Red','Green','Black','Purple']))\ndata=[trace2]\nlayout = go.Layout(title='Average Reviews per month per place by Neighbourhood',height=400,width=800)\nfig= go.Figure(data=data,layout=layout,)\npy.iplot(fig)\n","187d719c":"df['room_type'].value_counts()","c74b8517":"df5 = df.groupby(['neighbourhood_group','room_type']).mean()","a1ee3ff0":"room_types_neighbourhoods=df5.drop(['id','host_id','latitude','longitude','number_of_reviews','reviews_per_month'],axis=1)","c49d57ad":"room_types_neighbourhoods","9645c21b":"fig = px.scatter_matrix(room_types_neighbourhoods,height=1000,width=900,color=\"minimum_nights\")\nfig.update_traces(diagonal_visible=False)\nfig.show()\n","90edf582":"df6 = df.groupby(['room_type']).mean()\nroom_types =df6.drop(['id','host_id','latitude','longitude','number_of_reviews','reviews_per_month'],axis=1)","087e10b3":"room_types","57d78182":"df7 = df.groupby(['neighbourhood_group','room_type'])['id'].agg('count')","7e448868":"rmtng = pd.DataFrame(df7)","c3fc0283":"rmtng.reset_index(inplace=True)","bffd9304":"Bronx = rmtng[rmtng['neighbourhood_group']=='Bronx']\nBrooklyn = rmtng[rmtng['neighbourhood_group']=='Brooklyn']\nManhattan = rmtng[rmtng['neighbourhood_group']=='Manhattan']\nQueens = rmtng[rmtng['neighbourhood_group']=='Queens']\nStatenIsland = rmtng[rmtng['neighbourhood_group']=='Staten Island']\n\ndf8 = df.groupby(['room_type']).count()\nrooms = df8.drop(['host_name','name','host_id','latitude','longitude','number_of_reviews','reviews_per_month','neighbourhood_group','neighbourhood','price','minimum_nights','calculated_host_listings_count','availability_365','last_review'],axis=1)\nrooms.reset_index(inplace=True)\n","99d913fd":"trace1=go.Bar(x=Bronx['room_type'],y=Bronx['id'],name='Bronx')\ntrace2=go.Bar(x=Brooklyn['room_type'],y=Brooklyn['id'],name='Brooklyn')\ntrace3=go.Bar(x=Manhattan['room_type'],y=Manhattan['id'],name='Manhattan')\ntrace4=go.Bar(x=Queens['room_type'],y=Queens['id'],name='Queens')\ntrace5=go.Bar(x=StatenIsland['room_type'],y=StatenIsland['id'],name='StatenIsland')\ntrace6=go.Bar(x=rooms['room_type'],y=rooms['id'],name='Total')\n\ntitles=['Room types - Bronx',\n        'Room types - Brooklyn',\n        'Room types - Manhattan',\n        'Room types - Queens',\n        'Room types - StatenIsland',\n        'Room types - All Neighbourhoods']\n\nfig=plotly.subplots.make_subplots(rows=2,cols=3,subplot_titles=titles,)\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,1,3)\nfig.append_trace(trace4,2,1)\nfig.append_trace(trace5,2,2)\nfig.append_trace(trace6,2,3)\nfig['layout'].update(height=1000,width=1000,paper_bgcolor='white')\npy.iplot(fig,filename='rmtypeplot')","9d00696c":"rmtng2 = df.groupby(['neighbourhood_group','neighbourhood'])['price'].agg('mean')","62182ad5":"rmtng1 = pd.DataFrame(rmtng2)\n","6d36a86e":"rmtng1.reset_index(inplace=True)","0e719d6a":"Bronx = rmtng1[rmtng1['neighbourhood_group']=='Bronx']\nBrooklyn = rmtng1[rmtng1['neighbourhood_group']=='Brooklyn']\nManhattan = rmtng1[rmtng1['neighbourhood_group']=='Manhattan']\nQueens = rmtng1[rmtng1['neighbourhood_group']=='Queens']\nStatenIsland = rmtng1[rmtng1['neighbourhood_group']=='Staten Island']","41b80eb0":"Bronx1=Bronx.sort_values(by=['price'],ascending=False).head(10)\nBrooklyn1=Brooklyn.sort_values(by=['price'],ascending=False).head(10)\nManhattan1=Manhattan.sort_values(by=['price'],ascending=False).head(10)\nQueens1=Queens.sort_values(by=['price'],ascending=False).head(10)\nStatenIsland1=StatenIsland.sort_values(by=['price'],ascending=False).head(10)","a16edddb":"trace1=go.Scatter(x=Bronx1['neighbourhood'],y=Bronx1['price'],marker=dict(color=\"crimson\", size=12),mode=\"markers\",name=\"Bronx\",)\n\ntrace2=go.Scatter(x=Brooklyn1['neighbourhood'],y=Brooklyn1['price'],marker=dict(color=\"blue\", size=12),mode=\"markers\",name=\"Brooklyn\",)\n\ntrace3=go.Scatter(x=Manhattan1['neighbourhood'],y=Manhattan1['price'],marker=dict(color=\"purple\", size=12),mode=\"markers\",name=\"Manhattan\",)\n\ntrace4=go.Scatter(x=Queens1['neighbourhood'],y=Queens1['price'],marker=dict(color=\"black\", size=12),mode=\"markers\",name=\"Queens\",)\n\ntrace5=go.Scatter(x=StatenIsland1['neighbourhood'],y=StatenIsland1['price'],marker=dict(color=\"red\", size=12),mode=\"markers\",name=\"StatenIsland\",)\n\ndata = [trace1,trace2,trace3,trace4,trace5]\n\ntitles=['Most Pricey neighbourhoods-Bronx',\n        'Most Pricey neighbourhoods-Brooklyn',\n        'Most Pricey neighbourhoods-Manhattan',\n        'Most Pricey neighbourhoods-Queens',\n        'Most Pricey neighbourhoods-StatenIsland']\n\nfig =plotly.subplots.make_subplots(rows=3,cols=2,subplot_titles=titles)\n\n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\nfig.append_trace(trace4,2,2)\nfig.append_trace(trace5,3,1)\n\n\nfig['layout'].update(height=1200,width=1000,paper_bgcolor='white')\n\npy.iplot(fig,filename='pricetypeplot')","27b9f817":"pnd2 =df.groupby(['neighbourhood','neighbourhood_group']).agg('count')\npnd2.reset_index(inplace=True)\npnd2.set_index(['neighbourhood_group'],inplace=True)\npnd2.sort_index(inplace=True)\npnd2.drop(['name',\n           'host_id',\n           'host_name',\n           'latitude','longitude',\n           'room_type','price','minimum_nights',\n           'number_of_reviews','last_review','reviews_per_month',\n           'calculated_host_listings_count','availability_365'],\n            axis=1,inplace=True)\n","7cdeabf9":"Bronx = pnd2[pnd2.index=='Bronx']\nBrooklyn = pnd2[pnd2.index=='Brooklyn']\nManhattan = pnd2[pnd2.index=='Manhattan']\nQueens = pnd2[pnd2.index=='Queens']\nStatenIsland = pnd2[pnd2.index=='Staten Island']","537f9e8b":"Bronx2=Bronx.sort_values(by='id',ascending=False).head(10)\nBrooklyn2=Brooklyn.sort_values(by='id',ascending=False).head(10)\nManhattan2=Manhattan.sort_values(by='id',ascending=False).head(10)\nQueens2=Queens.sort_values(by='id',ascending=False).head(10)\nStatenIsland2=StatenIsland.sort_values(by='id',ascending=False).head(10)","129d6617":"trace1=go.Pie(labels=Bronx2['neighbourhood'], values=Bronx2['id'], name=\"Bronx Neighbourhoods\",showlegend=False)\ntrace2=go.Pie(labels=Brooklyn2['neighbourhood'], values=Brooklyn2['id'], name=\"Brooklyn Neighbourhoods\",showlegend=False)\ntrace3=go.Pie(labels=Manhattan2['neighbourhood'], values=Manhattan2['id'], name=\"Manhattan Neighbourhoods\",showlegend=False)\ntrace4=go.Pie(labels=Queens2['neighbourhood'], values=Queens2['id'], name=\"Queens Neighbourhoods\",showlegend=False)\ntrace5=go.Pie(labels=StatenIsland2['neighbourhood'], values=StatenIsland2['id'], name=\"StatenIsland Neighbourhoods\",showlegend=False)\n\n\ntitles=['Popular neighbourhoods-Bronx',\n        'Popular neighbourhoods-Brooklyn',\n        'Popular neighbourhoods-Manhattan',\n        'Popular neighbourhoods-Queens',\n        'Popular neighbourhoods-StatenIsland']\n\n\n\nfig =plotly.subplots.make_subplots(rows=3,cols=2,subplot_titles=titles,specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                                                             [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                                                             [{\"type\": \"domain\"}, {\"type\": \"domain\"}]])\n                                                                     \n\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,2)\nfig.append_trace(trace3,2,1)\nfig.append_trace(trace4,2,2)\nfig.append_trace(trace5,3,1)\n\n\nfig['layout'].update(height=1000,width=800,paper_bgcolor='white')\n\npy.iplot(fig,filename='pricetypeplot')","143f45c9":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf1 = df\n\ndf1.drop(['name','id','host_name','last_review'],axis=1,inplace=True)\ndf1['reviews_per_month']=df1['reviews_per_month'].replace(np.nan, 0)\n\nle = preprocessing.LabelEncoder()\nle.fit(df1['neighbourhood_group'])    \ndf1['neighbourhood_group']=le.transform(df1['neighbourhood_group'])\n\nle = preprocessing.LabelEncoder()\nle.fit(df1['neighbourhood'])\ndf1['neighbourhood']=le.transform(df1['neighbourhood'])\n\nle = preprocessing.LabelEncoder()\nle.fit(df1['room_type'])\ndf1['room_type']=le.transform(df1['room_type'])\n\ndf1.sort_values(by='price',ascending=True,inplace=True)\n\ndf1.head()","41c8c206":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,LogisticRegression","996aa536":"lm = LinearRegression()","4d7e9c76":"X = df1[['host_id','neighbourhood_group','neighbourhood','latitude','longitude','room_type','minimum_nights','number_of_reviews','reviews_per_month','calculated_host_listings_count','availability_365']]\ny = df1['price']","768ef6a9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","440bda9a":"lm.fit(X_train,y_train)","caede5d1":"predicts = lm.predict(X_test)","e008ff51":"from sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error","11fc10c5":"print(\"Root mean squared error is:\")\nnp.sqrt(metrics.mean_squared_error(y_test,predicts))","04e33a49":"print('r2 score is:')\nr2 = r2_score(y_test,predicts)\nr2*100","bd4073ba":"print(\"Mean absolute error is:\")\nmean_absolute_error(y_test,predicts)","8f1f6a1e":"error_diff = pd.DataFrame({'Actual Values': np.array(y_test).flatten(), 'Predicted Values': predicts.flatten()})\nerror_diff1 = error_diff.head(20)","21106a06":"error_diff1.head(5)","34db551d":"title=['Pred vs Actual']\nfig = go.Figure(data=[\n    go.Bar(name='Predicted', x=error_diff1.index, y=error_diff1['Predicted Values']),\n    go.Bar(name='Actual', x=error_diff1.index, y=error_diff1['Actual Values'])\n])\n\nfig.update_layout(barmode='group')\nfig.show()","ba66c23d":"plt.figure(figsize=(16,8))\nsns.regplot(predicts,y_test)\nplt.xlabel('Predictions')\nplt.ylabel('Actual')\nplt.title(\"Linear Model Predictions\")\nplt.show()","7dec980b":"from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor","f5e53c68":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.01)","91706eca":"GBoost.fit(X_train,y_train)","583ef02a":"predict = GBoost.predict(X_test)","3f38cc13":"print(\"Root mean squared error is:\")\nnp.sqrt(metrics.mean_squared_error(y_test,predict))","5cced358":"print('r2 score is:')\nr2 = r2_score(y_test,predict)\nr2*100","2674c734":"print(\"Mean absolute error is:\")\nmean_absolute_error(y_test,predict)","07202cfd":"error_diff = pd.DataFrame({'Actual Values': np.array(y_test).flatten(), 'Predicted Values': predict.flatten()})\nerror_diff1 = error_diff.head(20)","e7b42802":"error_diff1.head()","5282fe9e":"title='Pred vs Actual'\nfig = go.Figure(data=[\n    go.Bar(name='Predicted', x=error_diff1.index, y=error_diff1['Predicted Values']),\n    go.Bar(name='Actual', x=error_diff1.index, y=error_diff1['Actual Values'])\n])\nfig.update_layout(barmode='group')\nfig.show()","dcbe8f5e":"plt.figure(figsize=(16,8))\nsns.regplot(predict,y_test)\nplt.xlabel('Predictions')\nplt.ylabel('Actual')\nplt.title(\"Gradient Boosted Regressor model Predictions\")\nplt.show()","e953a482":"import xgboost\nimport warnings \nwarnings.simplefilter(action='ignore')","93efa855":"xgb = xgboost.XGBRegressor(n_estimators=310,learning_rate=0.1,objective='reg:squarederror')\nxgb.fit(X_train, y_train)\nxgb_pred = xgb.predict(X_test)","de565c98":"print(\"Root mean squared error is:\")\nnp.sqrt(metrics.mean_squared_error(y_test,xgb_pred))","fa515740":"print('r2 score is:')\nr2 = r2_score(y_test,xgb_pred)\nr2*100","6498af26":"print(\"Mean absolute error is:\")\nmean_absolute_error(y_test,xgb_pred)","d468a621":"error_diff = pd.DataFrame({'Actual Values': np.array(y_test).flatten(), 'Predicted Values': xgb_pred.flatten()})\nerror_diff1 = error_diff.head(20)","96ee27cd":"error_diff1.head()","cf3e9118":"title='Pred vs Actual'\nfig = go.Figure(data=[\n    go.Bar(name='Predicted', x=error_diff1.index, y=error_diff1['Predicted Values']),\n    go.Bar(name='Actual', x=error_diff1.index, y=error_diff1['Actual Values'])\n])\nfig.update_layout(barmode='group')\nfig.show()","51d22a55":"plt.figure(figsize=(16,8))\nsns.regplot(xgb_pred,y_test)\nplt.xlabel('Predictions')\nplt.ylabel('Actual')\nplt.title(\"Xgboost Regressor Predictions\")\nplt.show()\n\n","0a2f67d0":"Actual values vs Predicted values","8e6362f1":"![acs_hhform.png](attachment:acs_hhform.png)","fed20fc8":"Work in progress , any suggestions guys!?","56c2d84d":"> * [About Airbnb](#section-one)\n\n **1.Data Exploration and Analysis**\n> * [Importing neccessary Libraries](#section-two)\n> * [Reading and Visualising data from the csv file](#section-three)\n> * [Maps that can be used as reference for the visualisations](#section-eight)\n> * [Preprocessing and preparing Data for prediction](#section-four)\n\n**2.Model Creation and predictions**\n> * [Linear Regression Model](#section-five)\n> * [Gradient Boosted Regressor model](#section-six)\n> * [Xgboost Regressor model](#section-seven)","e0b63ff3":"<a id=\"section-seven\"><\/a>\n**Xgboost Regressor model**","e547a899":"Actual values vs Predicted values","064fe5a8":"<a id=\"section-four\"><\/a>\n**Preprocessing and preparing Data for prediction**","3cf78742":"Actual values vs Predicted values","b08705cf":"<a id=\"section-one\"><\/a>\n**About Airbnb**","28e1b54c":"<a id=\"section-two\"><\/a>\n**Importing neccessary Libraries**","7d25b9f8":"![airbnb_logo_detail.jpg](attachment:airbnb_logo_detail.jpg)\n\nA\u200ci\u200cr\u200cb\u200cn\u200cb\u200c,\u200c \u200cI\u200cn\u200cc\u200c.\u200c is an online marketplace for arranging or offering lodging, primarily homestays, or tourism experiences. The company does not own any of the real estate listings, nor does it host events; it acts as a broker, receiving commissions from each booking.The company is based in San Francisco, California, United States.\n\nThe company was conceived after its founders put an air mattress in their living room, effectively turning their apartment into a bed and breakfast, in order to offset the high cost of rent in San Francisco; Airbnb is a shortened version of its original name, AirBedandBreakfast.com.\n\nInstead of copying travel sites like Expedia and Travelocity, Airbnb takes a unique approach toward lodging. Part of the \u201csharing economy,\u201d Airbnb offers you someone\u2019s home as a place to stay instead of a hotel. On Airbnb, you can find places to crash on your backpacking trip through Europe, or you can find a place to stay for a month during your internship in Los Angeles. Also, if you want to rent out extra space in your own home, you can host through Airbnb and make money for allowing a guest to stay the night.","f4af42df":"Gradient Boosted Regressor model Predictions","07162fcb":"<a id=\"section-three\"><\/a>\n**Reading and Visualising data from the csv file**","755dadc1":"<a id=\"section-five\"><\/a>\n**Linear Regression Model**","5deb29a5":"<a id=\"section-eight\"><\/a>\n**Maps that can be used as reference for the visualisations**","3fe206fe":"Xgboost Regressor Predictions","53fc82aa":"Linear Model Predictions","e050fe9e":"<a id=\"section-six\"><\/a>\n**Gradient Boosted Regressor model**"}}