{"cell_type":{"933c9ea6":"code","f75a64fb":"code","bb8e8098":"code","95d56e56":"code","a35e816d":"code","cd8a59df":"code","0ede4ec3":"code","dec8a298":"code","78a26444":"code","facd94ad":"markdown","1fa12c39":"markdown"},"source":{"933c9ea6":"from tqdm import tqdm\nimport numpy as np\n\nfrom collections import defaultdict\nimport itertools\nfrom functools import lru_cache\n\nimport pickle\n\nimport warnings\nwarnings.filterwarnings('ignore')","f75a64fb":"np.random.seed(42)","bb8e8098":"def cost(photo1, photo2):\n    intersect = len(photo1.intersection(photo2))\n    return min(len(photo1) - intersect, len(photo2) - intersect, intersect)\n\ndef sequence_cost(sequence):\n    total_cost = 0\n    for i in range(len(sequence) - 1):\n        if sequence[i + 1] == -1:\n            break\n            \n        if isinstance(sequence[i], tuple):\n            old_tags = photos[sequence[i][0]][1].union(photos[sequence[i][1]][1])\n        else:\n            old_tags = photos[sequence[i]][1]\n            \n        if isinstance(sequence[i + 1], tuple):\n            new_tags = photos[sequence[i + 1][0]][1].union(photos[sequence[i + 1][1]][1])\n        else:\n            new_tags = photos[sequence[i + 1]][1]\n            \n        total_cost += cost(old_tags, new_tags)\n    return total_cost\n\n# Read our input\nwith open('..\/input\/hashcode-photo-slideshow\/d_pet_pictures.txt', 'r') as ifp:\n    lines = ifp.readlines()\n\nphotos = []\nall_tags = list()\nphotos_per_tag = defaultdict(list)\nfor i, line in enumerate(lines[1:]):\n    orient, _, *tags = line.strip().split()\n    photos.append((orient, set(tags)))\n    for tag in tags:\n        photos_per_tag[tag].append(i)\n\n# Create some variables to store the solution in\nsequence = [-1] * len(photos)\ntotal_cost = 0\n\n# Sample our first slide (must be horizontal)\nsequence[0] = np.random.choice([i for i in range(len(photos)) if photos[i][0] == 'H'])\ntags = photos[sequence[0]][1]\nfor tag in photos[sequence[0]][1]:\n    photos_per_tag[tag].remove(sequence[0])\n    \nremaining_pics = list(set(range(len(photos))) - set(sequence))\nremaining_horizontal_pics = [p for p in remaining_pics if photos[p][0] == 'H']\nremaining_vertical_pics = [p for p in remaining_pics if photos[p][0] == 'V']\n\n# Iteratively add a slide to the sequence\nfor i in tqdm(range(1, len(sequence))):\n    # Fallback: In case we do not find any candidates, we just take 1 random horizontal or 2 random vertical pics\n    if len(remaining_horizontal_pics) > 0:\n        best_j = np.random.choice(remaining_horizontal_pics)\n    elif len(remaining_vertical_pics) > 1:\n        best_j = tuple(np.random.choice(remaining_vertical_pics, size=2, replace=False))\n    else:\n        break\n        \n    best_cost = total_cost\n    \n    # Get a list of K possible good candidates\n    K = 2500\n    k = 0.5\n    vertical_candidates = set()\n    horizontal_candidates = set()\n    in_common_tags = defaultdict(int)\n    for tag in tags:\n        for p in photos_per_tag[tag]:\n            in_common_tags[p] += 1\n            \n    if len(in_common_tags) > 0:\n            \n        max_tags = max(in_common_tags.values())\n        for p in in_common_tags:\n            if in_common_tags[p] == max_tags:\n                if photos[p][0] == 'H':\n                    horizontal_candidates.add(p)\n                else:\n                    vertical_candidates.add(p)\n                    \n        for p in in_common_tags:\n            if len(horizontal_candidates) + len(vertical_candidates) > K:\n                break\n\n            if in_common_tags[p] >= k * max_tags:\n                if photos[p][0] == 'H':\n                    horizontal_candidates.add(p)\n                else:\n                    vertical_candidates.add(p)\n\n        # Candidates consist of all possible horizontal candidates and all combinations of 2 vertical candidates\n        candidates = list(horizontal_candidates) + list(itertools.combinations(vertical_candidates, 2))\n\n        # Iterate over candidates and pick the one that increases the score the most.\n        curr_best = 0\n        old_cost = best_cost\n        for j in candidates:\n            if isinstance(j, tuple):\n                new_tags = photos[j[0]][1].union(photos[j[1]][1])\n            else:\n                new_tags = photos[j][1]\n\n            if len(new_tags) <= 2*curr_best:\n                continue\n\n            new_cost = total_cost + cost(tags, new_tags)\n\n            if new_cost >= best_cost:\n                best_cost = new_cost\n                curr_best = new_cost - old_cost\n                best_j = j\n\n    # Assign a new picture to the next slide\n    total_cost = best_cost\n    sequence[i] = best_j\n    \n    if isinstance(best_j, tuple):\n        tags = photos[sequence[i][0]][1].union(photos[sequence[i][1]][1])\n        remaining_pics.remove(best_j[0])\n        remaining_vertical_pics.remove(best_j[0])\n        for tag in photos[sequence[i][0]][1]:\n            photos_per_tag[tag].remove(sequence[i][0])\n        remaining_pics.remove(best_j[1])\n        remaining_vertical_pics.remove(best_j[1])\n        for tag in photos[sequence[i][1]][1]:\n            photos_per_tag[tag].remove(sequence[i][1])\n    else:\n        remaining_horizontal_pics.remove(best_j)\n        remaining_pics.remove(best_j)\n        tags = photos[sequence[i]][1]\n        for tag in photos[sequence[i]][1]:\n            photos_per_tag[tag].remove(sequence[i])","95d56e56":"print('Score = {}'.format(sequence_cost(sequence)))","a35e816d":"with open('submission.txt', 'w+') as ofp:\n    ofp.write('{}\\n'.format(sum(np.array(sequence) != -1)))\n    for p in sequence:\n        if p == -1:\n            break\n            \n        if isinstance(p, tuple):\n            ofp.write('{} {}\\n'.format(p[0], p[1]))\n        else:\n            ofp.write('{}\\n'.format(p))","cd8a59df":"# CHECKS:\n# 1) We dont want duplicates\n# 2) We want vertical pictures to always be paired with another vertical picture\n# 3) We don't want horizontal pictures to be paired\n# 4) Preferably, we assign all of the pictures to slides\n# 5) We cannot assign a picture to two different slides\ndone = set()\nfor i, p in enumerate(sequence):\n    if p == -1:\n        break\n    if isinstance(p, tuple):\n        assert p[0] != p[1]\n        assert p[0] not in done\n        assert photos[p[0]][0] == 'V'\n        done.add(p[0])\n        \n        assert p[1] not in done\n        assert photos[p[1]][0] == 'V'\n        done.add(p[1])\n    else:\n        assert p not in done\n        assert photos[p][0] == 'H'\n        done.add(p)\nprint(i, len(done))\nprint(done - set(range(len(photos))))","0ede4ec3":"!wc -l submission.txt","dec8a298":"!tail submission.txt","78a26444":"!head submission.txt","facd94ad":"# Sanity checks of our submission","1fa12c39":"# Greedy solution to the Hashcode problem\n\nI fell in love with optimization thanks to the Kaggle Christmas competitions. As a result, I participated in the Google Hashcode for the first time this year. As a preparation, I also solved the one of 2019, which is exactly this problem! Here is my greedy solution.\n\nNote that this can be improved A LOT by integer programming (it's basically a Traveling Salesman Problem but with the extra challenge of having vertical and horizontal photos)! I.e., you basically want to visit all the photos (cities) and maximize a score.\n\nThe gist of what we do is the following:\n\n* In each iteration, we try to assign either 1 horizontal or 2 vertical photos such that the gain in score is maximized.\n* Brute-forcing all options (all possible horizontal & combinations of 2 out of the vertical photos) would take way too long (and would still not give     you the optimal solution). As such, we create a list of 100 candidates (candidate = 1 horizontal or 2 vertical photos) in each iteration.\n* The candidates are chosen such that they have as many tags in common with the previously assigned slide, as this heuristically improved the score.\n"}}