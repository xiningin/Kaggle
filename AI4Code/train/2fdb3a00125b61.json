{"cell_type":{"400dc521":"code","76c18172":"code","6b71d88b":"code","f7ae4c4c":"code","d3369c9f":"code","00a1cbe0":"code","504fe900":"code","1fa6bc2c":"code","08109448":"code","7bf1e824":"code","3af02ef3":"code","5014fad2":"code","f924ed72":"code","8b516077":"code","37d4bcb0":"code","61f57be5":"code","7458cb34":"code","297f5923":"code","c8082c35":"code","14ea1436":"code","21897d93":"code","b58d5f73":"code","9042db5e":"code","d7379331":"code","85611dea":"code","d4b1e7b9":"code","85663e45":"code","65daee39":"code","80871a51":"code","c4e2f60a":"code","364cd865":"code","9f07fdd3":"code","cd8e81e0":"code","2ef9ccc7":"code","d1cce48d":"code","ad34fc42":"code","fc21b6e9":"code","85bcd8f3":"code","85401c2c":"code","1b053d12":"code","70a01749":"code","1b23b000":"code","84a99144":"code","2526609d":"code","6054f5a0":"code","f69fa80e":"code","e3bfa9eb":"code","d7296754":"code","d6fffdba":"code","d96507d5":"code","92262719":"code","bc6a5e2e":"code","605c6214":"code","99b99256":"code","86f7cd21":"code","bd54a640":"code","252daac2":"code","79406136":"code","4e63f69a":"code","8e660859":"code","ce24bf1c":"code","485970a4":"code","45f8033d":"code","ef22e0bc":"code","d0857c1f":"code","f6bb16b1":"code","c5155a3d":"code","77bcf0f9":"code","4b8a9d3e":"code","fde80dd4":"code","af612264":"code","81c7640b":"code","88579313":"code","98b80913":"code","4084fe12":"code","198ba914":"code","c7c74293":"code","34bb0d4a":"code","ab593674":"code","4223748d":"code","1cb37520":"code","ebdc0df6":"code","104166c3":"code","ced7917a":"code","bc35cb37":"code","6d9c6c69":"code","110c8cf6":"code","52f01d97":"code","003b9990":"code","7f354958":"code","27cf4864":"code","30d2ed3a":"code","8c206346":"code","a8b44b9e":"code","b7782cfe":"code","0e54a3ef":"code","c24cc129":"code","aef75f05":"code","9ed26490":"code","1a11d7ea":"code","3a93adb2":"code","3d10802b":"code","0b00f835":"code","4ceb0b69":"code","04298578":"code","ed5531b1":"code","0763db3d":"code","7cc4a0b4":"code","265546bc":"code","57c7d1c7":"code","3d81bf9b":"markdown","564125d8":"markdown","995b7fd3":"markdown"},"source":{"400dc521":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","76c18172":"df=pd.read_csv('..\/input\/hotel-bookings\/hotel_bookings.csv')","6b71d88b":"df.head()","f7ae4c4c":"df.tail()","d3369c9f":"df.shape","00a1cbe0":"df.isna().sum()","504fe900":"def data_clean(df):\n    df.fillna(0,inplace=True)\n    print(df.isna().sum())","1fa6bc2c":"data_clean(df)","08109448":"# lets check unique values in adults,children and babies\nlist=['adults','children','babies']\nfor i in list:\n    print('{} has unique values as {}'.format(i,df[i].unique()))","7bf1e824":"pd.set_option('display.max_columns',32)","3af02ef3":"# 0 cannot come here\n# so lets create a filter \nfilter=(df['children']==0) & (df['adults']==0) & (df['babies']==0)\ndf[filter]","5014fad2":"df=df[~filter]\ndf","f924ed72":"# now lets check the data type of all features\ndf.dtypes","8b516077":"pd.set_option('display.max_rows',32)","37d4bcb0":"# where do the guest come from\ndf[df['is_canceled']==0]['country'].value_counts()","61f57be5":"# where do the guest come from\ncountry_wise_data=df[df['is_canceled']==0]['country'].value_counts().reset_index()","7458cb34":"country_wise_data.columns=['country','No of guests']\ncountry_wise_data","297f5923":"!pip install folium","c8082c35":"import folium\nfrom folium.plugins import HeatMap","14ea1436":"basemap=folium.Map()","21897d93":"!pip install plotly","b58d5f73":"# lets do some visualizations using plotly modules\n# heatmap and choropleth are very important for spatial analysis\nimport plotly.express as px\n","9042db5e":"guest_map=px.choropleth(country_wise_data,locations=country_wise_data['country'],color=country_wise_data['No of guests'],\n             hover_name=country_wise_data['country'],title='home country of guests')","d7379331":"guest_map.show()","85611dea":"# how much do guests pay for a night\n# now again\ndf1=df[df['is_canceled']==0]","d4b1e7b9":"import seaborn as sns\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"reserved_room_type\",\n            y=\"adr\",\n            hue=\"hotel\",\n            data=df1)\nplt.title('price of room types per night per person',fontsize=16)\nplt.xlabel(\"Room type\", fontsize=16)\nplt.ylabel(\"Price [EUR]\", fontsize=16)\nplt.legend(loc=\"upper right\")\nplt.ylim(0, 600)\nplt.show()        ","85663e45":"#for city hotels people pay more for g room type and for resort hotel people pay more for h room type","65daee39":"#how does the price per night vary over the years\ndf.columns","80871a51":"#### This figure shows the average price per room,\n# depending on its type and the standard deviation. Note that due to data anonymization rooms with the \n# same type letter may not necessarily be the same across hotels.","c4e2f60a":"data_resort = df[(df[\"hotel\"] == \"Resort Hotel\") & (df[\"is_canceled\"] == 0)]\ndata_city = df[(df[\"hotel\"] == \"City Hotel\") & (df[\"is_canceled\"] == 0)]","364cd865":"data_resort.head()","9f07fdd3":"# lets first do it for all the resort hotels\nresort_hotel=data_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()","cd8e81e0":"resort_hotel","2ef9ccc7":"\ncity_hotel=data_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()","d1cce48d":"city_hotel","ad34fc42":"final=resort_hotel.merge(city_hotel,on='arrival_date_month')\nfinal.columns=['month','price_for_resort','price_for_city_hotel']\nfinal","fc21b6e9":"#### now we will observe over here is month column is not in order, & if we will visualise we will get improper conclusion\n#### so very first we have to provide right hierarchy to the month column","85bcd8f3":"# lets sort the month colum\n## !pip install sort-dataframeby-monthorweek\n\n## Dependency package needs to be installed\n!pip install sorted-months-weekdays","85401c2c":"!pip install sort-dataframeby-monthorweek","1b053d12":"import sort_dataframeby_monthorweek as sd","70a01749":"def sort_data(df,colname):\n    return sd.Sort_Dataframeby_Month(df,colname)","1b23b000":"final=sort_data(final,'month')\nfinal","84a99144":"px.line(final, x='month', y=['price_for_resort','price_for_city_hotel'], title='Room price per night over the Months')","2526609d":"# Conclusion,This clearly shows that the prices in the Resort hotel are much higher during the summer (no surprise here).,\n# The price of the city hotel varies less and is most expensive\n# during spring and autumn.","6054f5a0":"# now lets analyse in what months the guests are the highest \n","f69fa80e":"rush_resort=data_resort['arrival_date_month'].value_counts().reset_index()\nrush_resort.columns=['month','no of guests']\nrush_resort","e3bfa9eb":"rush_city=data_city['arrival_date_month'].value_counts().reset_index()\nrush_city.columns=['month','no of guests']\nrush_city","d7296754":"final_rush=rush_resort.merge(rush_city,on='month')\nfinal_rush.columns=['month','no of guests in resort','no of guest in city hotel']\nfinal_rush","d6fffdba":"final_rush=sort_data(final_rush,'month')\nfinal_rush","d96507d5":"final_rush.columns","92262719":"px.line(data_frame=final_rush, x='month', y=['no of guests in resort','no of guest in city hotel'], title='Total no of guests per Months')","bc6a5e2e":"### Conclusion\n#      The City hotel has more guests during spring and autumn, when the prices are also highest.\n#     In July and August there are less visitors, although prices are lower.\n\n#     Guest numbers for the Resort hotel go down slighty from June to September, which is also when the prices are highest.\n#     Both hotels have the fewest guests during the winter.","605c6214":"df.corr()","99b99256":"corr=df.corr()['is_canceled']\ncorr","86f7cd21":"# now lets sort it according to the absoute values\ncorr.abs().sort_values(ascending=False)","bd54a640":"# the one having higher correlations are very important\ndf.dtypes","252daac2":"df.groupby(\"is_canceled\")[\"reservation_status\"].value_counts()","79406136":"list_not=['days_in_waiting_list','arrival_date_year']","4e63f69a":"numerical=[col for col in df.columns if df[col].dtype!='O' and col not in list_not]\nnumerical","8e660859":"# lets look at the categorical columns which are not to be included","ce24bf1c":"cat_not=['arrival_date_year', 'assigned_room_type', 'booking_changes', 'reservation_status', 'country','days_in_waiting_list']","485970a4":"categorical=[col for col in df.columns if df[col].dtype =='O' and col not in cat_not]\ncategorical","45f8033d":"df_cat=df[categorical]\ndf_cat","ef22e0bc":"df_cat.dtypes","d0857c1f":"import warnings\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","f6bb16b1":"# lets convert reservation status date into datetime format \ndf_cat['reservation_status_date']=pd.to_datetime(df_cat['reservation_status_date'])","c5155a3d":"df_cat['year']=df_cat['reservation_status_date'].dt.year\ndf_cat['month']=df_cat['reservation_status_date'].dt.month\ndf_cat['day']=df_cat['reservation_status_date'].dt.day","77bcf0f9":"df_cat.head()","4b8a9d3e":"# lets remove the date column as we have separate entries now\ndf_cat.drop('reservation_status_date',axis=1,inplace=True)","fde80dd4":"df_cat.head()","af612264":"df_cat['cancellation']=df['is_canceled']","81c7640b":"df_cat.head()","88579313":"# now we have so many columns having categorical data ,lets convert them to numerical data using encoding techniques\n# lets perform some feature encoding","98b80913":"df_cat['market_segment'].unique()\n#so what will be the value of market segment wrt to the cancellation ,we will replace that particular category with the mean","4084fe12":"cols=df_cat.columns[0:8]\ncols","198ba914":"# lets take an example of hotel column ,applying mean encoding on it\ndf_cat.groupby(['hotel'])['cancellation'].mean()","c7c74293":"#similarly we will do for all the columns\nfor col in cols:\n    print(df_cat.groupby([col])['cancellation'].mean())\n    print('\\n')","34bb0d4a":"# lets convert it into key value pair using to_dict\nfor col in cols:\n    dict=df_cat.groupby([col])['cancellation'].mean().to_dict()\n    df_cat[col]=df_cat[col].map(dict)\n    ","ab593674":"df_cat.head()","4223748d":"df_cat.tail()","1cb37520":"#now lets concatenate numerical as well as encoded categorical values\nentiredf=pd.concat([df_cat,df[numerical]],axis=1)\nentiredf","ebdc0df6":"entiredf.drop('cancellation',axis=1,inplace=True)","104166c3":"entiredf.shape","ced7917a":"#now lets try removing outliers from the data \nsns.distplot(entiredf['lead_time'])","bc35cb37":"#we can see the plot is right skewed \n#lets try removing the outliers \nimport numpy as np\n\ndef handle_outlier(col):\n    entiredf[col]=np.log1p(entiredf[col])\n\n","6d9c6c69":"handle_outlier('lead_time')","110c8cf6":"sns.distplot(entiredf['lead_time'])","52f01d97":"sns.distplot(entiredf['adr'])","003b9990":"#here also we can observe the outliers\nhandle_outlier('adr')","7f354958":"sns.distplot(entiredf['adr'])","27cf4864":"handle_outlier('market_segment')","30d2ed3a":"sns.distplot(entiredf['market_segment'])","8c206346":"entiredf.isna().sum()","a8b44b9e":"entiredf.dropna(axis=1,inplace=True)","b7782cfe":"# Applying feature importance to our data to select most important features \n#to build our machine learning model\n#first lets assign dependent and independent features\nX=entiredf.drop('is_canceled',axis=1)\ny=entiredf['is_canceled']\n\n\n","0e54a3ef":"\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n","c24cc129":"# select a suitable alpha (equivalent of penalty).\n# The bigger the alpha the less features that will be selected.\n\nfeature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0)) \nfeature_sel_model.fit(X,y)","aef75f05":"feature_sel_model.get_params()","9ed26490":"feature_sel_model.get_support()","1a11d7ea":"cols=X.columns","3a93adb2":"selected_feat=cols[(feature_sel_model.get_support())]","3d10802b":"selected_feat","0b00f835":"# let's print some stats\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\n","4ceb0b69":"# so we can clearly observe that our features got reduced from 27 to 16\nX=X[selected_feat]","04298578":"y.value_counts()","ed5531b1":"# now lets split our dataset into traning and test set\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.75,random_state=0)","0763db3d":"#fit naive bayes\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score","7cc4a0b4":"### classifier models\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('Naive Bayes',GaussianNB()))\nmodels.append(('RandomForest', RandomForestClassifier()))\nmodels.append(('Decision Tree', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))","265546bc":"for name, model in models:\n    print(name)\n    model.fit(X_train, y_train)\n    #Checking the cross_val_score\n    score=cross_val_score(model,X,y,cv=10)\n    print(score.mean())\n    \n    \n    # Make predictions.\n    predictions = model.predict(X_test)\n    # Compute the error.\n    from sklearn.metrics import confusion_matrix\n    print(confusion_matrix(predictions, y_test))\n    print('\\n')\n    from sklearn.metrics import accuracy_score\n    print(accuracy_score(predictions,y_test))\n    print('\\n')","57c7d1c7":"#we can see that random forest gives the best accuracy among all the algorithms","3d81bf9b":"![](https:\/\/3.imimg.com\/data3\/HJ\/LU\/MY-14611198\/hotel-bookings-services-500x500.jpg)","564125d8":"# **Hotel booking\nContent:\n**1. EDA\nThe dataset contains data from two different hotels. One Resort hotel and one City hotel.\n\nFrom the publication (https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2352340918315191) we know that both hotels are located in Portugal (southern Europe) (\"H1 at the resort region of Algarve and H2 at the city of Lisbon\"). The distance between these two locations is ca. 280 km by car and both locations border on the north atlantic.\n\nThe data contains \"bookings due to arrive between the 1st of July of 2015 and the 31st of August 2017\".\nNote: For most questions I will only use bookings that were not canceled, to get acutal guest numbers. As you will see, this is quite a big difference.\n\n**Topics covered and questions to answer from the data:\n\n**Where do the guests come from?\nHow much do guests pay for a room per night?\nHow does the price per night vary over the year?\nWhich are the most busy month?\nHow long do people stay at the hotels?\nBookings by market segment\nHow many bookings were canceled?\nWhich month have the highest number of cancellations?**","995b7fd3":"# ****End user Goal for Hotel Booking Demand is!\nBy utilizing the predictive model, hotels will able to identify the issue why customer canceling their booking and reason behind and which period of time more cancelation happening. It would be greatful to identify root cause and bettter startegy for hotel management team.\n\nHere we are going to extract the insight about most of the customer prefer resort or city hotel...\n\nBy using EDA(Exploratory Data Analysis) we are analysing and visualising the different prospective. Which gives us different insights like ( 1. Customer visits on mostly which month, 2. days in months, 3. most cancelation month, etc).\n\nLets visualise the more insights while performing Exploratory Data Analysis.\n\nwe are helping hotels to get ready with necessary arrangements on heavy and low tourist visit periods."}}