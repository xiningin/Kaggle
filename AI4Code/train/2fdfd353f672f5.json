{"cell_type":{"d2e9e315":"code","19ad0a18":"code","04cc050c":"code","169123a4":"code","49ae42f2":"code","0cdd3615":"code","3ccb56d2":"code","72110be6":"code","4e67273c":"code","24142bb2":"code","b841bc10":"code","d21a672f":"code","35a48c92":"code","517efd83":"code","eacb5cdc":"code","85c2d5a2":"code","7e29ca5e":"code","e7ed3146":"code","8babaa2e":"code","9454a3c5":"code","67cbaa73":"code","8210b96f":"code","0d603ea4":"code","074766bb":"code","71de7612":"code","2d39a270":"code","03c428b4":"code","d07804fc":"code","c37ffa73":"code","6327d6a2":"code","14d36a2d":"code","dde7dc9f":"code","ad50277a":"code","b5491044":"code","1546fad5":"code","9cc7e6bf":"code","57918edb":"code","c2ab31e3":"code","0cb6bbf9":"code","96c551bb":"code","93705841":"code","27e7391e":"code","6a923487":"code","760b0066":"code","c0ea007e":"code","a0ae160f":"code","954338c6":"code","fd012f73":"code","31236c3a":"code","b0cb8a56":"code","3219f6f8":"code","f89fb8c0":"code","899e8e3d":"code","ebd8f14f":"code","183d6102":"code","9f4a78c5":"code","38af154a":"code","4721d796":"code","1819eeca":"code","9de77011":"code","b91ff2b0":"code","3e49f9ab":"code","5c8d1923":"code","1ae815d1":"code","feb37ab2":"code","84142551":"code","639a6993":"code","506ff565":"code","3136ff4d":"code","27f23b2b":"code","0d904eb1":"code","42105220":"code","35164626":"code","b99e1c28":"code","ea40dc1c":"code","36eac4a0":"code","4ce3d65e":"code","f5e06a33":"markdown","1af0a566":"markdown","d7f1431f":"markdown","2d6c661e":"markdown","02fa38d3":"markdown","6b472f70":"markdown","e9a420c6":"markdown","b01d2448":"markdown","2710b907":"markdown","d10880c4":"markdown","50f51d9f":"markdown","8b337a83":"markdown","be0a0276":"markdown","4c61c974":"markdown","2bfb90d0":"markdown","efe42e68":"markdown","8d198d24":"markdown","5a1f4701":"markdown","fb784d96":"markdown","76209f5f":"markdown","ba6e19d0":"markdown","1d7e26d1":"markdown","bf636a51":"markdown","e3f815dd":"markdown","ce05afe6":"markdown","c9bdcfb4":"markdown","d8feb00a":"markdown","0bde0ce3":"markdown"},"source":{"d2e9e315":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","19ad0a18":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","04cc050c":"df_train.head()","169123a4":"df_train.describe()","49ae42f2":"for col in df_train.columns:\n    msg = 'column : {:>10}\\t Percent of NaN value:{:2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","0cdd3615":"for col in df_test.columns:\n    msg = 'column : {:>10}\\t Percent of NaN value:{:2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","3ccb56d2":"msno.matrix(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8, 0.5, 0.2))","72110be6":"msno.bar(df=df_train.iloc[:,:], figsize=(8,8), color=(0.8,0.5,0.2))","4e67273c":"msno.bar(df=df_test.iloc[:,:], figsize=(8,8), color=(0.8,0.5,0.2))","24142bb2":"f, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\n\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\n\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()","b841bc10":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","d21a672f":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","35a48c92":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","517efd83":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","eacb5cdc":"y_position = 1.02\n\nf, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\n\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass : Survived vs Dead', y=y_position)\nplt.show()","85c2d5a2":"f, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\n\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","7e29ca5e":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().sort_values(by='Survived', ascending=False)","e7ed3146":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","8babaa2e":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","9454a3c5":"sns.factorplot(x='Sex', y='Survived', col='Pclass', data=df_train, satureation=5, size=9, aspect=1)","67cbaa73":"print('Age Max : {:.1f} Years'.format(df_train['Age'].max()))\nprint('Age Min : {:.1f} Years'.format(df_train['Age'].min()))\nprint('Age Mean : {:.1f} Years'.format(df_train['Age'].mean()))","8210b96f":"fig, ax = plt.subplots(1,1, figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","0d603ea4":"cummulate_survival_ratio = []\nfor i in range(1,80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n        \nplt.figure(figsize=(7,7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survived rate change depending on range of Age', y=1.02)\nplt.ylabel('Survived rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","074766bb":"f, ax = plt.subplots(1,2, figsize=(18,8))\n\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","71de7612":"f, ax = plt.subplots(1, 1, figsize=(7,7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","2d39a270":"f, ax = plt.subplots(2,2, figsize=(20,15))\n\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embark vs Pclass')\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","03c428b4":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1","d07804fc":"print(\"Maximun size of Family:\", df_train['FamilySize'].max())\nprint(\"Minimum size of Family:\", df_train['FamilySize'].min())","c37ffa73":"f, ax = plt.subplots(1,3, figsize=(40,10))\n\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) NO Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived Countplot depending on Family Size', y=1.02)\n\ndf_train[['FamilySize','Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","6327d6a2":"fig, ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","14d36a2d":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i : np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i : np.log(i) if i > 0 else 0)","dde7dc9f":"fig, ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","ad50277a":"df_train.head()","b5491044":"df_train['Cabin'].isnull().count()","1546fad5":"df_train['Ticket'].value_counts()","9cc7e6bf":"df_train['Initial'] = df_train.Name.str.extract('([A-Za-z]+)\\.')\ndf_test['Initial'] = df_test.Name.str.extract('([A-Za-z]+)\\.')","57918edb":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","c2ab31e3":"df_train['Initial'].replace(['Mlle', 'Mme','Ms', 'Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n                           ['Miss','Miss','Miss','Mr','Mr','Mrs', 'Mrs', 'Other', 'Other', 'Other', 'Mr', 'Mr','Mr','Mr'],inplace=True)\ndf_test['Initial'].replace(['Mlle', 'Mme','Ms', 'Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n                           ['Miss','Miss','Miss','Mr','Mr','Mrs', 'Mrs', 'Other', 'Other', 'Other', 'Mr', 'Mr','Mr','Mr'],inplace=True)","0cb6bbf9":"df_train.groupby('Initial').mean()","96c551bb":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","93705841":"df_train.groupby('Initial').mean()","27e7391e":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","6a923487":"print('Embarked has', sum(df_train['Embarked'].isnull()),'Null balues')","760b0066":"df_train['Embarked'].fillna('S', inplace=True)","c0ea007e":"df_train.head()","a0ae160f":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","954338c6":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)","fd012f73":"print((df_train['Age_cat'] == df_train['Age_cat_2']).all())","31236c3a":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","b0cb8a56":"df_test.head()","3219f6f8":"df_train.head()","f89fb8c0":"df_train['Initial'] = df_train['Initial'].map({'Master' : 0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Other':4})\ndf_test['Initial'] = df_test['Initial'].map({'Master' : 0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Other':4})","899e8e3d":"df_train['Embarked'].unique()","ebd8f14f":"df_train['Embarked'].value_counts()","183d6102":"df_train['Embarked'] = df_train['Embarked'].map({'C':0, 'Q':1, 'S':2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C':0, 'Q':1, 'S':2})","9f4a78c5":"df_train['Embarked'].isnull().any()","38af154a":"df_train['Sex'] = df_train['Sex'].map({'female':0, 'male':1})\ndf_test['Sex'] = df_test['Sex'].map({'female':0, 'male':1})","4721d796":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']]\n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Person Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\":16})\n\ndel heatmap_data","1819eeca":"df_test.head()","9de77011":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","b91ff2b0":"df_train.head()","3e49f9ab":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","5c8d1923":"df_train.head()","1ae815d1":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","feb37ab2":"df_train.head()","84142551":"df_test.head()","639a6993":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","506ff565":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","3136ff4d":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2021)","27f23b2b":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","0d904eb1":"print('count : {}, Accuracy : {:2f}%'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","42105220":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","35164626":"plt.figure(figsize=(8,8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature improtance')\nplt.ylabel('Feature')\nplt.show()","b99e1c28":"submission= pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ea40dc1c":"submission.head()","36eac4a0":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","4ce3d65e":"submission.to_csv('.\/titanic_tutorial_for_beginner.csv', index=False)","f5e06a33":"## 1.2 Target label","1af0a566":"## 2.3 Both Sex and Pclass","d7f1431f":"## 4.3 Feature importance","2d6c661e":"1. Dataset check\n2. Exploartory Data Analysis (EDA)\n3. Feature engineering\n4. Model\n5. Train & Prediction\n6. Evaluation","02fa38d3":"# 4. Building machine learning model and prediction using the trained model","6b472f70":"## 2.5 Pclass, Sex, Age","e9a420c6":"# 2.Exploratory data analysis","b01d2448":"## 2.4 Age","2710b907":"## 3.2 Change Age(continuous to categorical)","d10880c4":"## 2.6 Embarked","50f51d9f":"### 3.1.2 Fill Null in Embarked","8b337a83":"## 4.2 Model generation and prefiction","be0a0276":"## 2.2 Sex","4c61c974":"## 3.3 Change Initial, Embarked and Sex(string to numerical)","2bfb90d0":"## 2.9 Cabin","efe42e68":"### 3.1.1 Fill Null in Age using title","8d198d24":"## 2.1 Pclass","5a1f4701":"## 3.5 Drop columns","fb784d96":"## 3.1 Fill Null","76209f5f":"## 2.8 Fare","ba6e19d0":"## 2.7 Family - SibSp + Parch","1d7e26d1":"# 3. Feature engineering ","bf636a51":"## 4.1 Preparation - Split dataset into train, valid, test set","e3f815dd":"## 4.4 Prediction on Test set","ce05afe6":"## 2.10 Ticket","c9bdcfb4":"## 1.1 Null data check","d8feb00a":"## 3.4 One-hot encoding on Initial and Embarked","0bde0ce3":"# 1. Dataset check"}}