{"cell_type":{"6e26ba47":"code","82d687c2":"code","37f10e82":"code","51f97698":"code","25bb2a32":"code","5899892e":"code","d0a92a67":"code","36a0ba53":"code","d7a47a48":"code","cb1fd3ad":"code","5050109d":"code","3b07a2cc":"code","a1d7b829":"code","f97de3d8":"markdown","708b0a46":"markdown","086a45d4":"markdown","a40d6a03":"markdown","67080646":"markdown","9e3cf86a":"markdown","a3105914":"markdown","25267d6a":"markdown","72f44cf5":"markdown","48b3fb75":"markdown","8f249f25":"markdown"},"source":{"6e26ba47":"import pandas as pd \nimport numpy as np\nimport sys\nimport codecs\nimport nltk\nimport re\nimport math\nimport string\nfrom collections import Counter\nimport seaborn as sns\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\nfrom skimage import io\nfrom skimage import feature\n\nimport matplotlib.pyplot as plt","82d687c2":"dataset = pd.read_csv('..\/input\/covid19-tweet-indonesia-positif-dan-negatif\/tweet_covid_19_text_processing_new.csv')\n\ndataset.head()","37f10e82":"#Delete Kolom Yang Tidak Perlu\ndel dataset['Unnamed: 0']\ndel dataset['Tweet']\ndel dataset['text_remove_hashtag_and_mentions']\ndel dataset['text_remove_url']\ndel dataset['text_remove_punc']\ndel dataset['text_remove_emojis']\ndel dataset['text_remove_emoticons']\ndel dataset['cleansing_tweets']\ndel dataset['case_folding_tweets']\ndel dataset['tweet_tokens']\ndel dataset['tweet_normalized']\n\nPUNCT_TO_REMOVE = string.punctuation\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n\ndataset[\"tweet_final\"] = dataset[\"tweet_tokens_stemmed\"].apply(lambda text: remove_punctuation(text))\ndataset.head(6)\n","51f97698":"dataset.head(1000)","25bb2a32":"freq = pd.Series(' '.join(dataset['Label']).split()).value_counts()[:10000]\nfreq","5899892e":"#Unigram\n\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import RegexpTokenizer\n\n\ntoken= RegexpTokenizer(r'[a-zA-Z0-9]+')\ncv = CountVectorizer(ngram_range=(1,1), tokenizer = token.tokenize)\ntext_count = cv.fit_transform(dataset['tweet_final'])\nfrequencies = sum(text_count).toarray()[0]\ndf = pd.DataFrame(frequencies, index=cv.get_feature_names(), columns=['frequency'])\ndf = df.reindex(sorted(df.columns), axis=1)\n\ndf.sort_values(by='frequency', ascending=False)","d0a92a67":"# #Bigram\n\n# nltk.download('stopwords')\n# from nltk.corpus import stopwords\n# from sklearn.feature_extraction.text import CountVectorizer\n# from nltk.tokenize import RegexpTokenizer\n\n\n# token= RegexpTokenizer(r'[a-zA-Z0-9]+')\n# cv = CountVectorizer(ngram_range=(2,2), tokenizer = token.tokenize)\n# text_count = cv.fit_transform(dataset['tweet_final'])\n# frequencies = sum(text_count).toarray()[0]\n# df = pd.DataFrame(frequencies, index=cv.get_feature_names(), columns=['frequency'])\n# df = df.reindex(sorted(df.columns), axis=1)\n\n# df.sort_values(by='frequency', ascending=False)","36a0ba53":"# #Trigram\n\n# nltk.download('stopwords')\n# from nltk.corpus import stopwords\n# from sklearn.feature_extraction.text import CountVectorizer\n# from nltk.tokenize import RegexpTokenizer\n\n\n# token= RegexpTokenizer(r'[a-zA-Z0-9]+')\n# cv = CountVectorizer(ngram_range=(3,3), tokenizer = token.tokenize)\n# text_count = cv.fit_transform(dataset['tweet_final'])\n# frequencies = sum(text_count).toarray()[0]\n# df = pd.DataFrame(frequencies, index=cv.get_feature_names(), columns=['frequency'])\n# df = df.reindex(sorted(df.columns), axis=1)\n\n# df.sort_values(by='frequency', ascending=False)","d7a47a48":"from sklearn.model_selection import train_test_split\n\nX_train, x_test, Y_train, y_test = train_test_split(text_count, dataset['Label'], test_size = 0.3, random_state = 5)\n\nprint(X_train.shape, x_test.shape, Y_train.shape, y_test.shape)","cb1fd3ad":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\nMNB = MultinomialNB()\nMNB = MNB.fit(X_train, Y_train)\nMNB_prediction = MNB.predict(x_test)\n\nprint('Akurasi = ', accuracy_score(y_test, MNB_prediction))\nprint(classification_report(y_test, MNB_prediction))\n\ncm_matrix = pd.DataFrame(data=confusion_matrix(y_test, MNB_prediction), columns=['Actual Positive:1', 'Actual Negative:0'], \n                                 index=['Predict Positive:1', 'Predict Negative:0'])\nsns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu');","5050109d":"kfold=KFold(n_splits=5, shuffle=True, random_state=0)\n\naccuracy = cross_val_score(MNB,X_train,Y_train, cv=kfold, scoring='accuracy')\nprecision = cross_val_score(MNB,X_train,Y_train, cv=kfold, scoring='precision_weighted')\nrecall = cross_val_score(MNB,X_train,Y_train, cv=kfold, scoring='recall_weighted')\nf1 = cross_val_score(MNB,X_train,Y_train, cv=kfold, scoring='f1_weighted')\nprint('accuray',  accuracy.mean())\nprint('precision' , precision.mean())\nprint('recall' ,recall.mean())\nprint('F1-Measure' , f1.mean())","3b07a2cc":"#BOXPLOT VISUALIZATION\n\nfig1, ax1 = plt.subplots(figsize=(10,5))\n\n#green_diamond = dict(markerfacecolor='g', marker='D')\nred_square = dict(markerfacecolor='r', marker='s')\n\n\n# grouping\nall_data = [accuracy,precision,recall,f1]\nax1.set_title('performance - boxplot')\n\n# plot box plot\nax1.boxplot(all_data,notch=False,flierprops=red_square)\n\n\n\n\n#adding horizontal grid lines\nax1.yaxis.grid(True)\nax1.set_xticks([y +1 for y in range(len(all_data))])\nax1.set_xlabel('performa')\nax1.set_ylabel('score')\n\n#add x-tick labels\nplt.setp(ax1, xticks=[y+1 for y in range(len(all_data))],\n         xticklabels=[ 'accuracy','precision','recall','f1_score'])\nplt.show()","a1d7b829":"plt.figure(figsize=(10,7))\nxx = [\"cv1\", \"cv2\", \"cv3\", \"cv4\", \"cv5\"] #, \"cv6\", \"cv7\", \"cv8\", \"cv9\", \"cv10\"\nplt.plot(xx, accuracy, '--')\nplt.plot(xx, precision, '--')\nplt.plot(xx, recall, '--')\nplt.plot(xx, f1, '--')\nplt.title(\"comparison of each crossvalidation - NBC\")\nplt.xlabel(\"Crossvaldiation\")\nplt.ylabel(\"score\")\nplt.legend([\"accuracy\",\"precision\", \"recall\", \"f1-score\"])\nplt.grid()\nplt.show()","f97de3d8":"# Visualisasi Cross Validation dan Performa","708b0a46":"# Penerapan Cross Validation Dengan Metode Naive Bayes Classifier","086a45d4":"# Melihat Seberapa Banyak Nilai Positif dan Negatif Tweet Pada Dataset","a40d6a03":"# Menampilkan Hasil Dari Hasil Ekseskusi Sebelumnya #Tweet_Final","67080646":"# Membaca Dataset Yang Sudah Dilakukan Text Processing","9e3cf86a":"# Membuat Data Training dan Data Testing (Validation Data)","a3105914":"# Penerapan Dengan Metode Naive Bayes Classifier","25267d6a":"# Menghapus Beberapa Kolom Yang Tidak Dibutuhkan","72f44cf5":"# Visualisasi Box Plot","48b3fb75":"# Fungsi Unigram, Bigram dan Trigram\n1. Unigram\n2. Bigram\n3. Trigram","8f249f25":"# Import Semua Library Yang Dibutuhkan"}}