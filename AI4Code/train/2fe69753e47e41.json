{"cell_type":{"2b7696aa":"code","fe64574a":"code","1f170815":"code","581dbcd6":"code","90c145f4":"code","e0e8fe25":"code","4ffed06d":"code","a70319ac":"code","f0fbe3cc":"code","bf3bfee1":"code","b8d59d76":"code","e1b920cc":"code","cec782f1":"code","dc39795c":"code","f77c1a04":"code","4507e482":"code","f471f43e":"code","8676daa0":"code","2ac8bda8":"code","83bfaf36":"code","84d5bc7e":"code","c544b9d0":"code","8895f2a8":"code","f3c8f6c5":"code","8314a3fb":"code","d1d14094":"code","3857b672":"code","b970258f":"code","d9d471bd":"code","6b00c567":"code","bddcd549":"code","ac7acb0b":"code","30be7060":"code","8f78faef":"code","4fb92227":"code","e3649117":"code","77760627":"code","98a67e7b":"code","dc2a6247":"code","00925bfc":"code","ece18e21":"code","66558e25":"code","b0d9f152":"code","43c19fb8":"code","d32d0dad":"code","9ec2bd47":"code","d2858cd5":"code","65212fcb":"code","dad607d0":"code","a6c067bd":"code","4b032eb3":"code","ff8c28ff":"code","fc72673f":"code","b1401394":"code","d8c2b0ef":"code","4aafac56":"code","7a1ed0b2":"code","b6d49737":"code","3870e192":"code","72396993":"code","d6449b41":"code","28f7d1a1":"code","9ddd8d24":"code","e23d72d1":"code","eaaf874e":"code","ae14ada0":"code","ce6b2b73":"code","a6321d87":"code","c79372ee":"code","3e4a3dc8":"code","7804d29f":"markdown","499968ec":"markdown","bd6795e8":"markdown","be9e8315":"markdown","54ebd923":"markdown","56b605cc":"markdown","bc39a054":"markdown","62081fcc":"markdown","da4ddbd1":"markdown","c9ea6a45":"markdown","133398c5":"markdown","db63e4a1":"markdown","8c17e1a6":"markdown","938e4bef":"markdown","de751506":"markdown","b808e1ba":"markdown","a7be3504":"markdown","e7eb6e09":"markdown","7e7a1340":"markdown","1ffbfd4c":"markdown","e3d93dd3":"markdown","c80e44f4":"markdown","76ec302e":"markdown","a2808ffa":"markdown","cab8bf31":"markdown"},"source":{"2b7696aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe64574a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style('whitegrid')","1f170815":"dftrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndftest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","581dbcd6":"dftrain.head()","90c145f4":"#shape of train dataset\ndftrain.shape","e0e8fe25":"dftrain.describe().transpose()\n#average SalePrice is $180,921","4ffed06d":"dftrain.info()\n#mixture of int, obj and some float","a70319ac":"#shape of test dataset\ndftest.shape","f0fbe3cc":"#see distribution of SalesPrice\nplt.figure(figsize=(10,6))\nsns.histplot(dftrain['SalePrice'])\n#most houses are around $100,000 to $200,000\n#seem like outlier starts at >450,000","bf3bfee1":"dftrain.corr()['SalePrice'].sort_values(ascending=False)\n#corr >=0.5 ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd']\n#corr (-) ['KitchenAbvGr', 'EnclosedPorch', 'MSSubClass', 'OverallCond', 'YrSold', 'LowQualFinSF', 'MiscVal', 'BsmtHalfBath', BsmtFinSF2]","b8d59d76":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='OverallQual', y='SalePrice', data=dftrain)\n#house with higher overall material and finish quality has higher sales price","e1b920cc":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='GrLivArea', y='SalePrice', data=dftrain)\n#strong linear regression shown in the graph\n#should cut out houses that has above ground living area over 4,500 sqrft because its outlier will make the model less accurate","cec782f1":"dftrain = dftrain.drop(dftrain[dftrain['SalePrice']>600000].index)\ndftrain = dftrain.drop(dftrain[dftrain['GrLivArea']>4000].index)","dc39795c":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='TotalBsmtSF', y='SalePrice', data=dftrain)","f77c1a04":"#some linear relationship but should cut out the outliers too (>3000)\ndftrain = dftrain.drop(dftrain[dftrain['TotalBsmtSF']>3000].index)","4507e482":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='GarageArea', y='SalePrice', data=dftrain)","f471f43e":"#cut out outliers\ndftrain = dftrain.drop(dftrain[dftrain['GarageArea']>1200].index)","8676daa0":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='GarageCars', y='SalePrice', data=dftrain)","2ac8bda8":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='1stFlrSF', y='SalePrice', data=dftrain)","83bfaf36":"dftrain = dftrain.drop(['Id'], axis=1)\n\nxy_train = dftrain\n\ntest_id = dftest['Id']\n\nx_test = dftest.drop(['Id'], axis=1)","84d5bc7e":"#created ttdf to do feature engineer on both train and test df at the same time\nttdf = pd.concat([xy_train, x_test], axis=0)","c544b9d0":"len(ttdf)","8895f2a8":"#create table to see null values\nnull_values = pd.DataFrame(ttdf.isnull().sum().sort_values(ascending=False), columns=['Sum_null'])\nnull_values = null_values[null_values['Sum_null']>0]\nnull_values['Percent'] = (null_values['Sum_null']\/2906)*100\nnull_values['Features'] = null_values.index\n\nnull_values","f3c8f6c5":"plt.figure(figsize=(10,10))\nsns.heatmap(ttdf.isnull(), yticklabels=False, cbar=False, cmap='PuBu')","8314a3fb":"ttdf = ttdf.drop((null_values[(null_values['Sum_null']>100)&(null_values['Sum_null']<1420)]).index, axis=1)","d1d14094":"ttdf = ttdf.drop(null_values[null_values['Sum_null']>2000].index, axis=1)","3857b672":"ttdf = ttdf.drop(['OverallCond'], axis=1)","b970258f":"ttdf = ttdf.drop(['BsmtCond'], axis=1)","d9d471bd":"ttdf = ttdf.drop(['LandSlope'], axis=1)","6b00c567":"ttdf = ttdf.drop(['1stFlrSF'], axis=1)\nttdf = ttdf.drop(['2ndFlrSF'], axis=1)","bddcd549":"ttdf = ttdf.drop(['HouseStyle'], axis=1)","ac7acb0b":"ttdf = ttdf.drop(['RoofMatl'], axis=1)","30be7060":"ttdf = ttdf.drop(['YearBuilt'], axis=1)","8f78faef":"ttdf = ttdf.drop(['YearRemodAdd'], axis=1)","4fb92227":"ttdf['MasVnrType'] = ttdf['MasVnrType'].fillna('none')\nttdf['BsmtExposure'] = ttdf['BsmtExposure'].fillna('no_bsmt')\nttdf['BsmtFinType1'] = ttdf['BsmtFinType1'].fillna('no_bsmt')\nttdf['BsmtFinType2'] = ttdf['BsmtFinType2'].fillna('no_bsmt')\nttdf['BsmtQual'] = ttdf['BsmtQual'].fillna('no_bsmt')","e3649117":"ttdf['MasVnrArea'] = ttdf['MasVnrArea'].fillna(value=ttdf['MasVnrArea'].mean())","77760627":"ttdf['Bathrooms_total'] = (ttdf['FullBath'] + ttdf['BsmtFullBath'] + (0.5* (ttdf['HalfBath']+ttdf['BsmtHalfBath'])))\n\nttdf.drop(['FullBath'], axis=1, inplace=True)\nttdf.drop(['BsmtFullBath'], axis=1, inplace=True)\nttdf.drop(['HalfBath'], axis=1, inplace=True)\nttdf.drop(['BsmtHalfBath'], axis=1, inplace=True)","98a67e7b":"ttdf['PorchTotalSF'] = (ttdf['OpenPorchSF'] + ttdf['EnclosedPorch'] + ttdf['3SsnPorch'] + ttdf['ScreenPorch'])\n\nttdf.drop(['OpenPorchSF'], axis=1, inplace=True)\nttdf.drop(['EnclosedPorch'], axis=1, inplace=True)\nttdf.drop(['3SsnPorch'], axis=1, inplace=True)\nttdf.drop(['ScreenPorch'], axis=1, inplace=True)","dc2a6247":"ttdf.info()","00925bfc":"ttdf.shape","ece18e21":"ttdf.select_dtypes(include='object').columns","66558e25":"mszoning = pd.get_dummies(ttdf['MSZoning'], drop_first=True)\nstreet = pd.get_dummies(ttdf['Street'], drop_first=True)\nlotshape = pd.get_dummies(ttdf['LotShape'], drop_first=True)\nlandcontour = pd.get_dummies(ttdf['LandContour'], drop_first=True)\nutilities = pd.get_dummies(ttdf['Utilities'], drop_first=True)\nlotconfig = pd.get_dummies(ttdf['LotConfig'], drop_first=True)\nneighborhood = pd.get_dummies(ttdf['Neighborhood'], drop_first=True)\ncondition1 = pd.get_dummies(ttdf['Condition1'], drop_first=True)\ncondition2 = pd.get_dummies(ttdf['Condition2'], drop_first=True)\nbldgtype = pd.get_dummies(ttdf['BldgType'], drop_first=True)\nroofstyle = pd.get_dummies(ttdf['RoofStyle'], drop_first=True)\nexterior1st = pd.get_dummies(ttdf['Exterior1st'], drop_first=True)\nexterior2nd = pd.get_dummies(ttdf['Exterior2nd'], drop_first=True)\nmasvnrtype = pd.get_dummies(ttdf['MasVnrType'], drop_first=True)\nexterqual = pd.get_dummies(ttdf['ExterQual'], drop_first=True)\nextercond = pd.get_dummies(ttdf['ExterCond'], drop_first=True)\nfoundation = pd.get_dummies(ttdf['Foundation'], drop_first=True)\nbsmtqual = pd.get_dummies(ttdf['BsmtQual'], drop_first=True)\nbsmtexposure = pd.get_dummies(ttdf['BsmtExposure'], drop_first=True)\nbsmtfintype1 = pd.get_dummies(ttdf['BsmtFinType1'], drop_first=True)\nbsmtfintype2 = pd.get_dummies(ttdf['BsmtFinType2'], drop_first=True)\nheating = pd.get_dummies(ttdf['Heating'], drop_first=True)\nheatingqc = pd.get_dummies(ttdf['HeatingQC'], drop_first=True)\ncentralair = pd.get_dummies(ttdf['CentralAir'], drop_first=True)\nelectrical = pd.get_dummies(ttdf['Electrical'], drop_first=True)\nkitchenqual = pd.get_dummies(ttdf['KitchenQual'], drop_first=True)\nfunctional = pd.get_dummies(ttdf['Functional'], drop_first=True)\npaveddrive = pd.get_dummies(ttdf['PavedDrive'], drop_first=True)\nsaletype = pd.get_dummies(ttdf['SaleType'], drop_first=True)\nsalecondition = pd.get_dummies(ttdf['SaleCondition'], drop_first=True)","b0d9f152":"ttdf = pd.concat([ttdf, mszoning, street, salecondition, saletype, paveddrive, functional, kitchenqual, electrical, centralair, heatingqc, heating, bsmtfintype2, bsmtfintype1, bsmtexposure, bsmtqual, foundation, extercond, exterqual, masvnrtype, exterior2nd, exterior1st, roofstyle, bldgtype, condition2, condition1, neighborhood, lotconfig, utilities, landcontour, lotshape], axis=1)","43c19fb8":"ttdf.drop(['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'RoofStyle', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'PavedDrive', 'SaleType', 'SaleCondition'], axis=1, inplace=True)","d32d0dad":"ttdf.info()\n#now all columns in numeric form","9ec2bd47":"ttdf.shape","d2858cd5":"ttdf.isnull().sum().sort_values()","65212fcb":"trainxy = ttdf[0:1447]","dad607d0":"trainxy.isnull().sum().sort_values()","a6c067bd":"trainxy = trainxy.dropna()","4b032eb3":"y_train = trainxy['SalePrice'].values","ff8c28ff":"x_train = trainxy.drop(\"SalePrice\",1).values","fc72673f":"x_test = ttdf[1447:].drop(\"SalePrice\", 1).values","b1401394":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","d8c2b0ef":"x_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","4aafac56":"x_train.shape","7a1ed0b2":"x_test.shape","b6d49737":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score","3870e192":"mse = mean_squared_error","72396993":"model = Sequential()\n\nmodel.add(Dense(190, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(90, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.fit(x=x_train, y=y_train, batch_size=180, epochs=750)","d6449b41":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss.plot()","28f7d1a1":"predictions = model.predict(x_test)","9ddd8d24":"Predictions = predictions.flatten()","e23d72d1":"Predictions = pd.Series(Predictions)","eaaf874e":"Predictions","ae14ada0":"Test_Id = pd.Series(test_id)","ce6b2b73":"submission = pd.DataFrame({'Id': Test_Id, 'SalePrice': Predictions})","a6321d87":"submission.tail(20)","c79372ee":"submission = submission.fillna(value=submission['SalePrice'].mean())","3e4a3dc8":"submission.to_csv('HPPredictSubmission.csv', index=False)","7804d29f":"**See Loss history**","499968ec":"**Combine features**","bd6795e8":"Garage Area (sqrft)","be9e8315":"Fill null with mean values","54ebd923":"First Floor sqrft","56b605cc":"Drop Year built info","bc39a054":"Drop duplicated info columns","62081fcc":"Overall Quality of Materials and finishes","da4ddbd1":"**Save Submission File**","c9ea6a45":"Seperate Features","133398c5":"Total Basement Area (sqrft)","db63e4a1":"# **Checkout Data Structures**","8c17e1a6":"Fill null with info got from description file","938e4bef":"**Work with Missing Values**","de751506":"Seperate train and test data","b808e1ba":"# **Create Model**","a7be3504":"**Model Creation (ANN)**","e7eb6e09":"Gound Living Area (sqrft)","7e7a1340":"Garage Car Capacity","1ffbfd4c":"**Convert Categorical Feature to Dummy Variables**","e3d93dd3":"# **Predictions**","c80e44f4":"# **Imports**","76ec302e":"# **Feature Engineering**","a2808ffa":"**Data Preprocessing** ","cab8bf31":"# **Exploratory Data Analysis**"}}