{"cell_type":{"08946518":"code","137c8534":"code","718e8911":"code","d8c5df52":"code","d9f046c9":"code","ceef1fa4":"code","ff27d4bc":"code","2971873c":"code","ccd457d4":"code","d13e547f":"code","066ddd6d":"code","9e90826d":"markdown","e122a0c4":"markdown","3119fbd8":"markdown","bad09015":"markdown","22978b06":"markdown","abfb1b3f":"markdown","c299573e":"markdown"},"source":{"08946518":"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# tratamento de dados\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\n\n# m\u00e9todos de regress\u00e3o\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.dummy import DummyRegressor\n\n# m\u00e9tricas de erro\nfrom sklearn.metrics import mean_absolute_error","137c8534":"df = pd.read_csv('..\/input\/imdb-5000-movie-dataset\/movie_metadata.csv')\ndf.shape","718e8911":"df.head()","d8c5df52":"df.dtypes","d9f046c9":"df2 = df.drop([\"actor_1_name\", \"actor_2_name\", \"actor_3_name\", \"genres\", \"movie_title\", \"plot_keywords\", \"movie_imdb_link\", \"language\", \"country\", \"director_name\"], axis=1)\ndf2 = pd.get_dummies(df2, columns=[\"content_rating\", \"color\"], drop_first=True)\ndf2.shape","ceef1fa4":"plt.hist(df[\"imdb_score\"])","ff27d4bc":"fig = plt.figure()\nax = plt.gca()\nax.scatter(df[\"budget\"], df[\"imdb_score\"], alpha=0.1, edgecolors='none')\nax.set_xscale('log')\nplt.xlabel(\"Budget\")\nplt.ylabel(\"IMDB\")","2971873c":"y = df2[\"imdb_score\"]\nX = df2.drop(\"imdb_score\", axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=10)\nprint(y_train.shape, y_test.shape)","ccd457d4":"reg = make_pipeline(SimpleImputer(strategy=\"most_frequent\"), StandardScaler(), RandomForestRegressor(n_estimators=200, random_state=10))\nreg.fit(X_train, y_train)\ny_train_pred = reg.predict(X_train)\n\nprint('Erro m\u00e9dio absoluto: ', mean_absolute_error(y_train, y_train_pred))","d13e547f":"y_test_pred = reg.predict(X_test)\nplt.scatter(y_test, y_test_pred, alpha=0.2, edgecolors='none')\nplt.xlabel(\"IMDB (real)\")\nplt.ylabel(\"IMDB (predi\u00e7\u00e3o)\")","066ddd6d":"print('Erro m\u00e9dio absoluto: ', mean_absolute_error(y_test, y_test_pred))\nerr = y_test_pred - y_test\n\nplt.hist(err)\nplt.xlabel(\"Erro\")\nplt.ylabel(\"Quantidade\")","9e90826d":"# Primeiros passos com aprendizagem de m\u00e1quina\n\n*Objetvo*: Treinar um modelo capaz de estimar qual ser\u00e1 a nota de um filme no IMDB (https:\/\/www.imdb.com\/).","e122a0c4":"## An\u00e1lise: Budget vs IMDB","3119fbd8":"## Treinamento\n\nUtilizaremos o conjunto reservado ao treinamento para ajustar o modelo. Idealmente, utilizar\u00edamos valida\u00e7\u00e3o cruzada para poder otimizar os par\u00e2metros do modelo, mas por simplicidade ser\u00e1 realizado um treinamento simplificado.","bad09015":"## Teste\n\nPara estimar o desempenho do modelo no mundo real, utilizaremos o conjunto de dados que foi reservado para teste.","22978b06":"## Separa\u00e7\u00e3o em treinamento e teste","abfb1b3f":"## \u00daltimos passos\n\nPara aplicar este modelo a casos reais, ter\u00edamos que salvar o modelo treinado (o pipeline completo) para um arquivo, para poder ser usado em outros programas.\nNo uso, os dados precisariam ser ajustados da mesma forma como foram aqui (no caso, removendo as colunas categ\u00f3ricas), sendo alimentados ao modelo pelo m\u00e9todo _predict_.","c299573e":"## An\u00e1lise: distribui\u00e7\u00e3o das notas do IMDB"}}