{"cell_type":{"9daa7ed7":"code","d4c0cec8":"code","5c14fbaf":"code","4d818593":"code","c6c09f6d":"code","3006e58c":"code","cc7a4086":"code","10a730c1":"code","60f2b311":"code","09fa2ae7":"code","a2d9e813":"code","f3242e06":"code","bb1eea6f":"code","a91636a6":"code","9e64b358":"code","ac00ff40":"code","5c80ad90":"code","c0a4b663":"code","a61079d3":"code","39e476ae":"code","17447aad":"code","b7347b4a":"code","4e1fe25b":"code","3d94c935":"code","1cfd869a":"code","f55e65a1":"code","a14bc88a":"code","237bdd2e":"code","74b7a5d4":"code","52c1e594":"code","2ce7fd88":"code","40fa2c91":"code","20ce3c17":"code","e428d08a":"code","400dd13e":"code","a50e2ad3":"code","61c09d03":"code","8de7017f":"markdown","1c6f3200":"markdown","4897efd6":"markdown","07425f0f":"markdown","937e68bd":"markdown","8911a55a":"markdown","42bbf61f":"markdown","871d8103":"markdown","1b623022":"markdown","5a267e6c":"markdown","74721b6a":"markdown","4cf3ba13":"markdown","5adbdd0e":"markdown","c12f3afc":"markdown","be4dcddc":"markdown"},"source":{"9daa7ed7":"#\u305d\u306e\u4ed6\u3082\u308d\u3082\u308d\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\n%matplotlib inline\n\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\n\n!pip install lightgbm\nimport datetime as dt\nimport lightgbm as lgbm\n\nimport sklearn\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\n\nimport io\nimport os\nimport gc","d4c0cec8":"#\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ntrain_data = pd.read_csv('..\/input\/train.csv', nrows=5000000)\n\n#\u30d7\u30ed\u30c3\u30c8\u7528\u306b\u4f5c\u3063\u3066\u304a\u304f\ntrain_data5k = pd.read_csv('..\/input\/train.csv', nrows=5000)","5c14fbaf":"#\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\ntrain_data.head()","4d818593":"#\u30c7\u30fc\u30bf\u306e\u30bf\u30a4\u30d7\u3082\u898b\u3066\u304a\u304f\ntrain_data.info()","c6c09f6d":"#\u6b20\u640d\u5024\u3092\u30ab\u30a6\u30f3\u30c8\ndef missing_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = 100 * df.isnull().sum() \/len(df)\n    mis_val_table = pd.concat([mis_val, mis_val_percent], axis = 1)\n    mis_val_table_ren_columns = mis_val_table.rename(columns={0:'Missing Values', 1:'% of Total Values'})\n    #\u6b20\u640d\u5024\u306e\u5272\u5408\n    mis_val_table_ren_columns=mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:,1]!=\n                                                        0].sort_values('% of Total Values',ascending=False).round(1)\n    #\u30ab\u30e9\u30e0\u6570\u3092\u8868\u793a\n    print(\"You selected dataframe has\" + str(df.shape[1]) + \"columns.\\n\"\n         \"There are\" + str(mis_val_table_ren_columns.shape[0]) + \n         \"columns that have missing values.\")\n    \n    #dataframe\u4e2d\u306e\u6b20\u640d\u5024\u306e\u60c5\u5831\n    return mis_val_table_ren_columns","3006e58c":"missing = missing_values_table(train_data)\nmissing","cc7a4086":"#376\u500b\u305a\u3064\u3042\u308b. \u5168\u4f53\u306e\u884c\u6570\u306b\u5bfe\u3057\u3066\u306f0%\u306e\u5272\u5408\u306a\u306e\u3067\u5f71\u97ff\u306f\u307b\u307c\u306a\u3044\u3068\u8003\u3048\u3089\u308c\u308b. #\u884c\u5358\u4f4d(axis=0)\u3067\u6d88\u3057\u3066\u304a\u304f\ntrain_data = train_data.dropna(how='any', axis=0)\n\n#NaN\u6570\u304c\u306a\u304f\u306a\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\nmissing = missing_values_table(train_data)\nmissing","10a730c1":"#datetime\u3092\u5206\u96e2\u3059\u308b\ntrain_data['pickup_datetime'] = pd.to_datetime(train_data['pickup_datetime'])\n\ntrain_data['pickup_datetime_month'] = train_data['pickup_datetime'].dt.month\ntrain_data['pickup_datetime_year'] = train_data['pickup_datetime'].dt.year\ntrain_data['pickup_datetime_day_of_week'] = train_data['pickup_datetime'].dt.weekday\ntrain_data['pickup_datetime_day_of_hour'] = train_data['pickup_datetime'].dt.hour","60f2b311":"correlation = np.corrcoef(train_data['fare_amount'], train_data['passenger_count'])\n\n#\u4e57\u5ba2\u6570\u306e\u5f71\u97ff\u306f\u3068\u3066\u3082\u5c0f\u3055\u3044\u306e\u3067\u6d88\u3059\ntrain_data = train_data.drop(['passenger_count'], axis = 1)\n\n#\u3064\u3044\u3067\u306b[key]\u306e\u60c5\u5831\u3082datetime\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u6d88\u3059\ntrain_data = train_data.drop(['pickup_datetime'], axis =1)\ntrain_data = train_data.drop(['key'], axis = 1)\n\ntrain_data.head()","09fa2ae7":"data = [go.Scattermapbox(\n            lat= train_data5k['pickup_latitude'] ,\n            lon= train_data5k['pickup_longitude'],\n            mode='markers',\n            marker=dict(\n                size= 4,\n                color = 'gold',\n                opacity = .8,\n            ),\n          )]\nlayout = go.Layout(autosize=False,\n                   mapbox= dict(accesstoken=\"pk.eyJ1Ijoic2hhejEzIiwiYSI6ImNqYXA3NjhmeDR4d3Iyd2w5M2phM3E2djQifQ.yyxsAzT94VGYYEEOhxy87w\",\n                                bearing=10,\n                                pitch=60,\n                                zoom=13,\n                                center= dict(\n                                         lat=40.721319,\n                                         lon=-73.987130),\n                                style= \"mapbox:\/\/styles\/shaz13\/cjiog1iqa1vkd2soeu5eocy4i\"),\n                    width=900,\n                    height=600, title = \"Pick up Locations in NewYork\")\n\nfig = dict(data=data, layout=layout)\noffline.iplot(fig)","a2d9e813":" data = [go.Scattermapbox(\n            lat= train_data5k['dropoff_latitude'] ,\n            lon= train_data5k['dropoff_longitude'],\n            mode='markers',\n            marker=dict(\n                size= 4,\n                color = 'cyan',\n                opacity = .8,\n            ),\n          )]\nlayout = go.Layout(autosize=False,\n                   mapbox= dict(accesstoken=\"pk.eyJ1Ijoic2hhejEzIiwiYSI6ImNqYXA3NjhmeDR4d3Iyd2w5M2phM3E2djQifQ.yyxsAzT94VGYYEEOhxy87w\",\n                                bearing=10,\n                                pitch=60,\n                                zoom=13,\n                                center= dict(\n                                         lat=40.721319,\n                                         lon=-73.987130),\n                                style= \"mapbox:\/\/styles\/shaz13\/cjk4wlc1s02bm2smsqd7qtjhs\"),\n                    width=900,\n                    height=600, title = \"Drop off locations in Newyork\")\nfig = dict(data=data, layout=layout)\noffline.iplot(fig)","f3242e06":"#longitude-75~-72, latitude39~43\ntrain_data = train_data[(train_data['pickup_longitude'] > -75 )& (train_data['pickup_longitude'] < -72)]\ntrain_data = train_data[(train_data['dropoff_longitude'] > -75 )& (train_data['dropoff_longitude'] < -72)]\ntrain_data = train_data[(train_data['pickup_latitude'] > 39 )& (train_data['pickup_latitude'] < 43)]\ntrain_data = train_data[(train_data['dropoff_latitude'] > 39 )& (train_data['dropoff_latitude'] < 43)]","bb1eea6f":"#landmark\ndef add_airport_dist(dataset):\n    \"\"\"\n    Return minumum distance from pickup or dropoff coordinates to each airport.\n    JFK: John F. Kennedy International Airport\n    EWR: Newark Liberty International Airport\n    LGA: LaGuardia Airport\n    SOL: Statue of Liberty \n    NYC: Newyork Central\n    \"\"\"\n    jfk_coord = (40.639722, -73.778889)\n    ewr_coord = (40.6925, -74.168611)\n    lga_coord = (40.77725, -73.872611)\n    sol_coord = (40.6892,-74.0445) # Statue of Liberty\n    nyc_coord = (40.7141667,-74.0063889) \n    \n    \n    pickup_lat = dataset['pickup_latitude']\n    dropoff_lat = dataset['dropoff_latitude']\n    pickup_lon = dataset['pickup_longitude']\n    dropoff_lon = dataset['dropoff_longitude']\n    \n    pickup_jfk = sphere_dist(pickup_lat, pickup_lon, jfk_coord[0], jfk_coord[1]) \n    dropoff_jfk = sphere_dist(jfk_coord[0], jfk_coord[1], dropoff_lat, dropoff_lon) \n    pickup_ewr = sphere_dist(pickup_lat, pickup_lon, ewr_coord[0], ewr_coord[1])\n    dropoff_ewr = sphere_dist(ewr_coord[0], ewr_coord[1], dropoff_lat, dropoff_lon) \n    pickup_lga = sphere_dist(pickup_lat, pickup_lon, lga_coord[0], lga_coord[1]) \n    dropoff_lga = sphere_dist(lga_coord[0], lga_coord[1], dropoff_lat, dropoff_lon)\n    pickup_sol = sphere_dist(pickup_lat, pickup_lon, sol_coord[0], sol_coord[1]) \n    dropoff_sol = sphere_dist(sol_coord[0], sol_coord[1], dropoff_lat, dropoff_lon)\n    pickup_nyc = sphere_dist(pickup_lat, pickup_lon, nyc_coord[0], nyc_coord[1]) \n    dropoff_nyc = sphere_dist(nyc_coord[0], nyc_coord[1], dropoff_lat, dropoff_lon)\n    \n    \n    \n    dataset['jfk_dist'] = pickup_jfk + dropoff_jfk\n    dataset['ewr_dist'] = pickup_ewr + dropoff_ewr\n    dataset['lga_dist'] = pickup_lga + dropoff_lga\n    dataset['sol_dist'] = pickup_sol + dropoff_sol\n    dataset['nyc_dist'] = pickup_nyc + dropoff_nyc\n    \n    return dataset\n\ndef sphere_dist(pickup_lat, pickup_lon, dropoff_lat, dropoff_lon):\n    \"\"\"\n    Return distance along great radius between pickup and dropoff coordinates.\n    \"\"\"\n    #Define earth radius (km)\n    R_earth = 6371\n    #Convert degrees to radians\n    pickup_lat, pickup_lon, dropoff_lat, dropoff_lon = map(np.radians,\n                                                             [pickup_lat, pickup_lon, \n                                                              dropoff_lat, dropoff_lon])\n    #Compute distances along lat, lon dimensions\n    dlat = dropoff_lat - pickup_lat\n    dlon = dropoff_lon - pickup_lon\n    \n    #Compute haversine distance\n    a = np.sin(dlat\/2.0)**2 + np.cos(pickup_lat) * np.cos(dropoff_lat) * np.sin(dlon\/2.0)**2\n    return 2 * R_earth * np.arcsin(np.sqrt(a))","a91636a6":"train_data['distance[km]'] = [sphere_dist(train_data.iloc[i,1], train_data.iloc[i,2], train_data.iloc[i,3], train_data.iloc[i,4]) for i in range(0, len(train_data['dropoff_latitude']))]\nadd_airport_dist(train_data)","9e64b358":"#\u79fb\u52d5\u8ddd\u96e2\u306b\u5bfe\u3059\u308b\u904b\u8cc3\u3092\u53ef\u8996\u5316\u3057\u3066\u304a\u304f\nplt.scatter(train_data['distance[km]'], train_data['fare_amount'])","ac00ff40":"train_data = train_data[(train_data['fare_amount'] > 0.01)]\ntrain_data = train_data[(train_data['distance[km]'] > 0.01)]","5c80ad90":"print(train_data.shape)\n#plt.xlim(0,10)\nplt.scatter(train_data['distance[km]'], train_data['fare_amount'])","c0a4b663":"train_data.head(15)","a61079d3":"#\u5024\u4e0a\u3052\u3057\u305f\u3053\u3068\u304c\u3088\u304f\u5206\u304b\u3063\u305f\nsns.barplot('pickup_datetime_month', 'fare_amount' ,hue ='pickup_datetime_year', data=train_data)","39e476ae":"train_data['raised'] = 0\ntrain_data.loc[train_data['pickup_datetime_year'] > 2012, 'raised'] = 1\ntrain_data.loc[(train_data['pickup_datetime_month'] >8) & (train_data['pickup_datetime_year'] == 2012), 'raised'] = 1","17447aad":"#\u66dc\u65e5\u306e\u4f9d\u5b58\u306f\u306a\u3044\uff1f\nsns.barplot('pickup_datetime_day_of_week', 'fare_amount', hue = 'pickup_datetime_month', data=train_data)","b7347b4a":"#\u671d\u306f\u9060\u304f\u304b\u3089\u6765\u308b\u4eba\u304c\u591a\u3044\nsns.barplot('pickup_datetime_day_of_hour', 'distance[km]', data=train_data)","4e1fe25b":"correlation_week = np.corrcoef(train_data['fare_amount'], train_data['pickup_datetime_day_of_week'])\ncorrelation_year= np.corrcoef(train_data['fare_amount'], train_data['pickup_datetime_year'])\ncorrelation_month = np.corrcoef(train_data['fare_amount'], train_data['pickup_datetime_month'])\ncorrelation_hour= np.corrcoef(train_data['fare_amount'], train_data['pickup_datetime_day_of_hour'])\n\nprint(\"\u66dc\u65e5\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u306f:\",correlation_week[0,1])\nprint(\"\u5e74\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u306f:\",correlation_year[0,1])\nprint(\"\u6708\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u306f:\",correlation_month[0,1])\nprint(\"\u6642\u9593\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u306f:\",correlation_hour[0,1])","3d94c935":"sns.pairplot(train_data,\n             x_vars=['pickup_datetime_month', 'pickup_datetime_year','pickup_datetime_day_of_week',\n                     'pickup_datetime_day_of_hour','jfk_dist','ewr_dist','lga_dist','sol_dist','distance[km]'],\n             y_vars=['fare_amount'])","1cfd869a":"train_data.head()","f55e65a1":"y = train_data['fare_amount']\nX = train_data.drop(['fare_amount'], axis=1)","a14bc88a":"#MinMaxScaler\u3067\u6a19\u6e96\u5316\u3057\u3066\u307f\u308b\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_scaler = scaler.fit(X)\nprint(\"max:{}, min:{}\".format(scaler.data_max_, scaler.data_min_))\nX_mms= scaler.transform(X)","237bdd2e":"x_train,x_test,y_train,y_test = train_test_split(X_mms,y,random_state=42,test_size=0.30)\n\ngc.collect()\n\nparams = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'nthread': 4,\n        'num_leaves': 31,\n        'learning_rate': 0.03,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': True,\n        'seed':0,\n        'num_rounds':50000\n    }\n    \ntrain_set = lgbm.Dataset(x_train, y_train, silent=False)\nvalid_set = lgbm.Dataset(x_test, y_test, silent=False)\nmodel = lgbm.train(params, train_set = train_set, num_boost_round=500,early_stopping_rounds=500,verbose_eval=500, valid_sets=valid_set)\ngc.collect()","74b7a5d4":"lgbm.plot_importance(model, figsize=(12, 10))\ntrain_data.head(1)","52c1e594":"#\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ntest_data = pd.read_csv('..\/input\/test.csv')\nprint(test_data.info())\ntest_data.head()","2ce7fd88":"missing = missing_values_table(test_data)\nmissing","40fa2c91":"#datetime\u3092\u5206\u96e2\u3059\u308b\ntest_data['pickup_datetime'] = pd.to_datetime(test_data['pickup_datetime'])\n\ntest_data['pickup_datetime_month'] = test_data['pickup_datetime'].dt.month\ntest_data['pickup_datetime_year'] = test_data['pickup_datetime'].dt.year\ntest_data['pickup_datetime_day_of_week'] = test_data['pickup_datetime'].dt.weekday\ntest_data['pickup_datetime_day_of_hour'] = test_data['pickup_datetime'].dt.hour\n\n#\u4e57\u5ba2\u6570\u306e\u5f71\u97ff\u306f\u3068\u3066\u3082\u5c0f\u3055\u3044\u306e\u3067\u6d88\u3059\ntest_data = test_data.drop(['passenger_count'], axis = 1)\n\n#\u3064\u3044\u3067\u306b[key]\u306e\u60c5\u5831\u3082datetime\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u6d88\u3059\ntest_data = test_data.drop(['pickup_datetime'], axis =1)\ntest_data = test_data.drop(['key'], axis = 1)\n\ntest_data['distance[km]'] = [sphere_dist(test_data.iloc[i,0], test_data.iloc[i,1], test_data.iloc[i,2], test_data.iloc[i,3]) for i in range(0, len(test_data['dropoff_latitude']))]\nadd_airport_dist(test_data)\n\n#\u5024\u4e0a\u3052\u524d\u8003\u616e\ntest_data['raised'] = 0\ntest_data.loc[test_data['pickup_datetime_year'] > 2012, 'raised'] = 1\ntest_data.loc[(test_data['pickup_datetime_month'] >8) & (test_data['pickup_datetime_year'] == 2012), 'raised'] = 1","20ce3c17":"test_data.head()","e428d08a":"#\u5927\u4f53NYC\u5185\u306b\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\nsns.pairplot(x_vars=['pickup_latitude','dropoff_latitude'], y_vars=['pickup_longitude', 'dropoff_longitude'], data = test_data)","400dd13e":"#train_data\u3068column\u306e\u9806\u304c\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\ntest_data = test_data.ix[:,['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','pickup_datetime_month','pickup_datetime_year','pickup_datetime_day_of_week','pickup_datetime_day_of_hour','distance[km]','jfk_dist','ewr_dist','lga_dist','sol_dist','nyc_dist','raised']]","a50e2ad3":"#\u6a19\u6e96\u5316\u3057\u3066\u304a\u304f\ntest_data = scaler.transform(test_data)","61c09d03":"#\u4e88\u6e2c\nsubmission = model.predict(test_data)\ntaxi_data = pd.read_csv('..\/input\/test.csv')\noutput = pd.DataFrame({'key':taxi_data.key, 'fare_amount':submission})\noutput.to_csv('taxi_prediction.csv', index=False)","8de7017f":"\u52a0\u3048\u3066, \u30bf\u30af\u30b7\u30fc\u904b\u8cc3\u306b\u95a2\u4fc2\u306e\u3042\u308b\u60c5\u5831\u3092\u30e1\u30e2\u3057\u3066\u304a\u3044\u305f.\n\n- \u521d\u4e57\u308a\u904b\u8cc3\u306f2.5\u30c9\u30eb\n- \u4e00\u822c\u6599\u91d1 : 1\/5\u30de\u30a4\u30eb(320m)\u30670.5\u30c9\u30eb\n- \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u7a7a\u6e2f   \n    * \u30e9\u30ac\u30fc\u30c7\u30a3\u30a2\u7a7a\u6e2f: \u4e00\u822c\n        40.6927796,-74.1838495\n    * JFK\u7a7a\u6e2f\uff1a\uff15\uff12\uff0bToll + 4.5(16~20\u6642)\n       40.6448435,-73.7818262\n    * JFK\u7a7a\u6e2f\u3068\u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u4ee5\u5916: \u4e00\u822c\u6599\u91d1\n    * \u30cb\u30e5\u30fc\u30a2\u30fc\u30af\u7a7a\u6e2f: \u4e00\u822c+ Toll \n        40.6876721,-74.177831\n- 2012.09\u3088\u308a17%\u5024\u4e0a\u3052","1c6f3200":"\u3053\u3053\u3067\u4e00\u5fdc\u4f5c\u3063\u3066\u304a\u3044\u305fcolumns\u5358\u4f4d\u3067NaN\u6570\u306e\u5272\u5408\u3092\u51fa\u3059\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b.   \n\u62fe\u3044\u7269\u3060\u304c, \u3053\u308c\u304c\u3042\u308b\u3068\u6b20\u640d\u5024\u306e\u6570\u304c\u591a\u3059\u304e\u308b\u30c7\u30fc\u30bf\u30ab\u30e9\u30e0\u3092\u6700\u521d\u304b\u3089drop\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u4eca\u306e\u3068\u3053\u308d\u4fbf\u5229\u3067\u3042\u308b.   ","4897efd6":"\u8a13\u7df4\u30c7\u30fc\u30bf\u91cf\u304c\u304b\u306a\u308a\u591a\u3044\u306e\u3067, nrows\u3067\u8aad\u307f\u8fbc\u3080\u91cf\u3092\u8abf\u7bc0\u3059\u308b.  \n\u305f\u3060\u904e\u5b66\u7fd2\u3092\u9632\u3050\u305f\u3081\u306b\u3082\u8a13\u7df4\u30c7\u30fc\u30bf\u91cf\u3092\u5897\u3084\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u3001\u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u6c7a\u307e\u308c\u3070PC\u304c\u8a31\u3059\u9650\u308a\u5897\u3084\u3057\u3066\u307f\u308b\u3079\u304d.   \n(\u79c1\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u5897\u3084\u3057\u3066\u3044\u304d\u307e\u3057\u305f\u3002\u30005000\u21d210000\u21d2\u30fb\u30fb\u30fb\u21d21000000)","07425f0f":"\u7e26\u8ef8\u306f\u904b\u8cc3\u3067\u3042\u308b\u304c, \u8ca0\u306e\u5024\u3092\u3068\u308b\u3082\u306e\u304c\u3042\u308b\u305f\u3081\u3053\u308c\u3082\u5916\u3057\u3066\u304a\u304f.    \n\u307e\u305f, \u79fb\u52d5\u8ddd\u96e2\u304c\u5c0f\u3055\u3059\u304e\u308b\u3082\u306e\u3082\u53d6\u308a\u9664\u3044\u3066\u304a\u304f.","937e68bd":"\u307e\u305f\u7d4c\u5ea6\u7def\u5ea6\u306f\u5730\u7403\u4e0a\u306e\u5ea7\u6a19\u60c5\u5831\u3067\u3042\u308b\u305f\u3081, \u4e57\u8eca\u4f4d\u7f6e\u30fb\u964d\u8eca\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u3067\u79fb\u52d5\u8ddd\u96e2\u304c\u5f97\u3089\u308c\u308b.   \n\u30bf\u30af\u30b7\u30fc\u306f\u79fb\u52d5\u8ddd\u96e2\u306b\u3088\u308a\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u79fb\u52d5\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\u3053\u3068\u306f\u5927\u5909\u91cd\u5927\u3067\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b.   \n\u3055\u3089\u306b\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b, \u7a7a\u6e2f\u304b\u3089\u4e57\u3063\u305f\u308a\u4e0b\u308a\u305f\u308a\u3059\u308b\u6642\u306e\u904b\u8cc3\u306f\u4e00\u822c\u6599\u91d1\u3068\u5225\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b. \n\u305d\u306e\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u305f\u3081\u306b\u4e00\u90e8\u306e\u30e9\u30f3\u30c9\u30de\u30fc\u30af\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u52a0\u3048\u3066\u304a\u304f.   \n\u4eca\u56de\u306f\u4e57\u8eca\u4f4d\u7f6e\uff5e\u30e9\u30f3\u30c9\u30de\u30fc\u30af\u306e\u4f4d\u7f6e\u306e\u8ddd\u96e2\u3068\u30e9\u30f3\u30c9\u30de\u30fc\u30af\u306e\u4f4d\u7f6e\uff5e\u964d\u8eca\u4f4d\u7f6e\u306e\u548c\u3092\u8003\u616e\u3057\u305f.  \n\u3059\u306a\u308f\u3061\u3042\u308b\u30e9\u30f3\u30c9\u30de\u30fc\u30afXXX\u304b\u3089\u4e57\u3063\u305f(\u307e\u305f\u306f\u964d\u308a\u305f)\u4eba\u306f, \u300cXXX_coord\u300d\u306e\u5024\u304c\u5c0f\u3055\u304f\u306a\u308b.  ","8911a55a":"latitude, longitude\u306f\u5ea7\u6a19\u60c5\u5831\u3067\u3082\u3042\u308b\u305f\u3081, \u30e9\u30a4\u30d6\u30e9\u30ea\u306eplotly\u3067NY\u5468\u8fba\u306e\u5730\u56f3\u4e0a\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u308b.   \n\u9ec4\u8272\u306e\u70b9\u304c\u4e57\u8eca\u4f4d\u7f6e\u3067, \u9752\u8272\u306e\u70b9\u304c\u964d\u8eca\u4f4d\u7f6e\u3067\u3042\u308b.   \n\n\n\u3053\u3053\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u3068\u3057\u3066\u306f\u660e\u3089\u304b\u306b\u30bf\u30af\u30b7\u30fc\u3067\u884c\u304f\u3053\u3068\u304c\u4e0d\u53ef\u80fd\u306a\u5834\u6240\u306b\u70b9\u304c\u5b58\u5728\u3059\u308b.   \n\u3053\u308c\u3089\u306f\u5916\u308c\u5024\u3068\u3057\u3066\u51e6\u7406\u3057\u3066\u304a\u304f.","42bbf61f":"\u30bf\u30af\u30b7\u30fc\u3067\u3044\u3051\u306a\u3044\u7bc4\u56f2\u306b\u5ea7\u6a19\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u304a\u304f.","871d8103":"# 0. \u521d\u3081\u306b\n\u4eca\u56de\u306fKaggle\u306ecompetition**New York City Taxi Fare Prediction**\u306b\u53c2\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u56de\u5e30\u4e88\u6e2c\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u611f\u899a\u3067\u3001\u30c7\u30fc\u30bf\u6570\u304c\u591a\u3044\u3053\u3068\u4ee5\u5916\u306f\u521d\u5fc3\u8005\u3067\u3082\u30b5\u30af\u30b5\u30af\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n    https:\/\/www.kaggle.com\/c\/new-york-city-taxi-fare-prediction\n\n\u4eca\u56de\u306f\u5148\u8f29\u65b9\u3084\u540c\u671f\u306e\u610f\u898b\u3092\u53c2\u8003\u306b\u3057\u305f\u308a\u3001\u521d\u5fc3\u8005\u306a\u308a\u306b\u307e\u3068\u3081\u305f\u3064\u3082\u308a\u306a\u306e\u3067\u6e29\u304b\u3044\u76ee\u3067\u898b\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u304b\u3064\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3082\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u671f\u5f85\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u3067\u306f\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\n\n\n# 1. \u524d\u51e6\u7406","1b623022":"\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3082\u8abf\u3079\u3066\u307f\u305f.   \n\u300craised\u300d\u306e\u5024\u304c\u5c0f\u3055\u3044\u304c, \u5148\u307b\u3069\u306e\u30d7\u30ed\u30c3\u30c8\u306b\u3088\u308a\u6709\u610f\u305d\u3046\u306a\u306e\u3067\u6d88\u3055\u306a\u3044\u3067\u304a\u304f.","5a267e6c":"# 3.\u63d0\u51fa\n\u3068\u308a\u3042\u3048\u305a\u884c\u3063\u305f\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u307b\u3046\u306b\u3082\u4e00\u901a\u308a\u884c\u3046.","74721b6a":"\u63a8\u7406\u3057\u305f\u60c5\u5831\u3092\u983c\u308a\u306b\u524d\u51e6\u7406\u306b\u3066\u610f\u5473\u306e\u3042\u308a\u305d\u3046\u306a\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u52a0\u5de5\u3059\u308b.    \n\u3068\u308a\u3042\u3048\u305a, \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u304cobject(\u6587\u5b57)\u306e\u3082\u306e\u306f\u6271\u3044\u305a\u3089\u3044\u306e\u3067\u52a0\u5de5\u3057\u3066\u304a\u304f.\n\n\u5e38\u8b58\u7684\u306b\u8003\u3048\u3066\u4e57\u5ba2\u6570\u306b\u904b\u8cc3\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u306e\u3067, \u300cpassenger_count\u300d\u306fdrop\u51fa\u6765\u305d\u3046.","4cf3ba13":"\u65e5\u6642\u306e\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u91cd\u8981\u5ea6\u306f**\u66dc\u65e5<\u5e74<\u6642\u9593=\u6708**\u306e\u9806\u306b\u4f4e\u3044\u3068\u4e88\u60f3\u3057\u305f   \n\u4e00\u5fdc\u76f8\u95a2\u4fc2\u6570\u3082\u898b\u3066\u304a\u304f","5adbdd0e":"\u6b20\u640d\u5024\u306f\u306a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u4e00\u5b89\u5fc3.","c12f3afc":"\u4eca\u56de\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306e\u76ee\u7684\u306f, \u30c7\u30fc\u30bf\u304b\u3089\u304a\u5ba2\u3055\u3093\u306e\u652f\u6255\u3063\u305f\u30bf\u30af\u30b7\u30fc\u306e\u904b\u8cc3\u3092\u4e88\u6e2c\u3059\u308b\u3068\u3044\u3063\u305f\u5185\u5bb9.   \n\u307e\u305a\u306f\u3056\u3063\u304f\u308a\u3068\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u60c5\u5831\u306e\u610f\u5473\u3092\u78ba\u8a8d\u3057\u305f.   \n### fare_amount:\u30bf\u30af\u30b7\u30fc\u306e\u904b\u8cc3\n### pickup_datetime:\u4e57\u5ba2\u3092\u4e57\u305b\u305f\u6642\u9593\n### pickup_longitude, picup_latitude: \u4e57\u5ba2\u3092\u4e57\u305b\u305f\u7d4c\u5ea6, \u7def\u5ea6\n### dropoff_longitude, dropoff_latitude: \u4e57\u5ba2\u3092\u304a\u308d\u3057\u305f\u7d4c\u5ea6, \u7def\u5ea6\n### passenger_count: \u4e57\u305b\u305f\u4e57\u5ba2\u6570\n","be4dcddc":"# 2. \u5b66\u7fd2\n\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u3067\u3082\u5f37\u304b\u3063\u305flight\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u3067\u5b66\u7fd2\u3092\u884c\u3063\u305f.   \n\u307e\u305f, \u30c7\u30fc\u30bf\u306e\u3070\u3089\u3064\u304d\u304c\u6b63\u898f\u5206\u5e03\u3063\u307d\u304f\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u6b63\u898f\u5316\u3067\u306f\u306a\u304f\u6a19\u6e96\u5316\u3082\u884c\u3063\u305f.    \n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u304b\u306a\u308a\u5927\u96d1\u628a\u306b\u6c7a\u3081\u305f\u3082\u306e\u3067\u3042\u308b. \u305d\u306e\u4e2d\u3067\u3082\u6642\u9593\u304c\u8a31\u3059\u9650\u308a\u306flgb\u306b\u304a\u3051\u308b\u5b66\u7fd2\u7387\u3092\u4e0b\u3052\u305f\u3044.   "}}