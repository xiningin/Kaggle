{"cell_type":{"d8934856":"code","aae21802":"code","7bdf04a7":"code","de72e695":"code","f1f6828a":"code","9a7b1006":"code","b9482db4":"code","88fcd2b9":"code","ea10e5da":"code","c13e4f0c":"code","d533ceee":"code","0ce6cc7c":"code","9fc5223e":"code","9e7c4f22":"code","ed6c1cc7":"code","61326a2b":"code","fb9ce35d":"code","0b2ccd7c":"code","026e5617":"code","1034585c":"code","a44b37ac":"code","61e5b70a":"code","15755a9f":"code","01ddadf8":"code","6b7c72c5":"code","9a3f9d93":"code","5e5938b8":"code","7dc9eb25":"code","0e2c3740":"code","8d3b5222":"code","d5175d16":"code","1c42a441":"code","0c1da752":"code","87a14539":"code","25e8d067":"code","71610477":"code","cb0b7ce8":"code","11e95f13":"code","298c5279":"code","2ed4211d":"code","f2f48c52":"code","d7283b2d":"code","7b59b63a":"code","296bc15e":"code","a722da3c":"code","ae7f659e":"code","578a3ce6":"code","bd8ce76a":"code","40c92991":"code","ef8dcfcc":"code","5cb70661":"code","fbd5f7e9":"code","cb844b6b":"code","d9256239":"markdown","0c9f04f2":"markdown","2d2fcbb5":"markdown","a45118ef":"markdown","bab1b30e":"markdown","39ff81c7":"markdown","c2ed6cb6":"markdown","6c729f45":"markdown","96f2d79f":"markdown","c1f4d565":"markdown"},"source":{"d8934856":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","aae21802":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport os # accessing directory structure\n\nimport numpy as np \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline\n","7bdf04a7":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n#     df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            plt.bar(columnDf.index,columnDf.values)\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","de72e695":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","f1f6828a":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","9a7b1006":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# time_series_covid19_confirmed_global.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'time_series_covid19_confirmed_global.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","b9482db4":"df2.head(5)","88fcd2b9":"## Distribution graphs (histogram\/bar graph) of sampled columns:\nplotPerColumnDistribution(df2.iloc[:,-4:], 4, 2)","ea10e5da":"## Correlation matrix:\nplotCorrelationMatrix(df2.iloc[:,4:], 15)","c13e4f0c":"## Scatter and density plots:\nplotScatterMatrix(df2.iloc[:,4:], 20, 10)","d533ceee":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# time_series_covid19_deaths_global.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_recovered_global.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'time_series_covid19_recovered_global.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","0ce6cc7c":"df3.head(5)","9fc5223e":"## Distribution graphs (histogram\/bar graph) of sampled columns:\nplotPerColumnDistribution(df3.iloc[:,-4:], 4, 2)","9e7c4f22":"## Correlation matrix:\nplotCorrelationMatrix(df3.iloc[:,4:], 15)","ed6c1cc7":"## Scatter and density plots:\nplotScatterMatrix(df3.iloc[:,4:], 20, 10)","61326a2b":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# time_series_covid19_deaths_global.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf4 = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_deaths_global.csv', delimiter=',', nrows = nRowsRead)\ndf4.dataframeName = 'time_series_covid19_deaths_global.csv'\nnRow, nCol = df4.shape\nprint(f'There are {nRow} rows and {nCol} columns')","fb9ce35d":"df4.head(5)","0b2ccd7c":"## Distribution graphs (histogram\/bar graph) of sampled columns:\nplotPerColumnDistribution(df4.iloc[:,-4:], 4, 2)","026e5617":"## Correlation matrix:\nplotCorrelationMatrix(df4.iloc[:,4:], 15)","1034585c":"## Scatter and density plots:\nplotScatterMatrix(df4.iloc[:,4:], 20, 10)","a44b37ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot\nimport seaborn as sns; sns.set()\n# Visualisation\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nimport missingno as msno\n\n\n\n# Configure visualisations\n%matplotlib inline\nmpl.style.use( 'ggplot' )\nplt.style.use('fivethirtyeight')\nsns.set(context=\"notebook\", palette=\"dark\", style = 'whitegrid' , color_codes=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# Any results you write to the current directory are saved as output.","61e5b70a":"filename = \"\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv\"\ndf = pd.read_csv(filename)\ndf.head()","15755a9f":"df.columns","01ddadf8":"\ndf.iloc[:,4:]\n","6b7c72c5":"countries=['Brazil', 'Canada', 'Germany']\ny=df.loc[df['Country\/Region']=='Italy'].iloc[0,4:]\ns = pd.DataFrame({'Italy':y})\nfor c in countries:    \n    #pyplot.plot(range(y.shape[0]),y,'r--')\n    s[c] = df.loc[df['Country\/Region']==c].iloc[0,4:]\n#pyplot.plot(range(y.shape[0]),y,'g-')\npyplot.plot(range(y.shape[0]), s)","9a3f9d93":"s.tail(10)","5e5938b8":"for r in df['Country\/Region']:\n    if r != 'China':\n        pyplot.plot(range(len(df.columns)-4), df.loc[df['Country\/Region']==r].iloc[0,4:])\n        pyplot.legend()\n","7dc9eb25":"columns = df2.keys()","0e2c3740":"confirmed = df2.loc[:, columns[4]:columns[-1]]\ndeaths = df4.loc[:, columns[4]:columns[-1]]\nrecoveries = df3.loc[:, columns[4]:columns[-1]]","8d3b5222":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","d5175d16":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","1c42a441":"days_in_future = 15\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-15]","0c1da752":"##Convert integer into datetime\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","87a14539":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.2, shuffle=False) ","25e8d067":"X_test_confirmed","71610477":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","cb0b7ce8":"svm_search.best_params_","11e95f13":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","298c5279":"# checking against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","2ed4211d":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","f2f48c52":"print(linear_model.coef_)\nprint(linear_model.intercept_)","d7283b2d":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_confirmed, y_train_confirmed)","7b59b63a":"bayesian_search.best_params_","296bc15e":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","a722da3c":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)","ae7f659e":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases, color='red')\nplt.bar(pd.DataFrame(world_cases).iloc[:,-1].index,pd.DataFrame(world_cases).iloc[:,-1].values)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=15)\nplt.show()","578a3ce6":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","bd8ce76a":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","40c92991":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","ef8dcfcc":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-15:], svm_pred[-15:]))","5cb70661":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-15:], bayesian_pred[-15:]))\n","fbd5f7e9":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-15:])","cb844b6b":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['Deaths', 'Recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.xticks(size=15)\nplt.show()","d9256239":"## Model for predicting number of confirmed cases by using support vector machine,linear regression and ridge regression.","0c9f04f2":"## Read in the data and use the plotting functions to visualize the data","2d2fcbb5":"## Confirmed Global Cases (File 2)","a45118ef":"## Predicting the future","bab1b30e":"## Basic Plotting Code ","39ff81c7":"## References:\n* https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n* https:\/\/www.kaggle.com\/therealcyberlord\/coronavirus-covid-19-visualization-prediction\n* https:\/\/scikit-learn.org\/stable\/modules\/svm.html\n* https:\/\/monkeylearn.com\/blog\/introduction-to-support-vector-machines-svm\/\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.BayesianRidge.html\n* https:\/\/ncss-wpengine.netdna-ssl.com\/wp-content\/themes\/ncss\/pdf\/Procedures\/NCSS\/Ridge_Regression.pdf\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html\n* https:\/\/en.wikipedia.org\/wiki\/Linear_regression","c2ed6cb6":"## Death and recoveries over time","6c729f45":"## Global Deaths (File 4)","96f2d79f":"# ECE 657A - Data and Knowledge Modeling and Analysis \n# Assignment 4 - Submitted by: Shannon Anthea Dsouza (20771338) and Xuhui Xie (20782765)\n## Task Submission: Predict Daily Global Confirmed Cases\n## Model for predicting number of confirmed cases by using Support Vector Machine, Linear Regression and Ridge Regression.","c1f4d565":"## Recovered Global Cases (File 3)"}}