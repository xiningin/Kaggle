{"cell_type":{"8394b2ad":"code","43d4a2d6":"code","68d50c46":"code","1b8c4bea":"code","6d5afb6d":"code","57c1e996":"code","566bfd19":"code","1db0714a":"code","5753d36e":"code","5d9998d2":"code","747ea308":"markdown"},"source":{"8394b2ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","43d4a2d6":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv')\ntest.describe()\nsample.describe()\ntrain.describe()\ntrain.tail()","68d50c46":"import gc\nimport time\nimport math\nfrom numba import jit\nfrom math import log, floor\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport seaborn as sns\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport pywt\nfrom statsmodels.robust import mad\n\nimport scipy\nfrom scipy import signal\nfrom scipy.signal import butter, deconvolve\n\nSAMPLE_RATE=25\nSIGNAL_LEN=1000","1b8c4bea":"plt.figure(figsize=(20, 10))\nplt.plot(train['time'],train['signal'],color='r')\nplt.title('signal data', fontsize=20)\nplt.xlabel('time', fontsize=12)\nplt.ylabel('signal', fontsize=12)\nplt.show()","6d5afb6d":"fig = make_subplots(rows=3,cols=1)\nx_1=train.loc[:100]['time']\ny_1=train.loc[:100]['signal']\nx_2=train.loc[100:200]['time']\ny_2=train.loc[100:200]['signal']\nx_3=train.loc[200:300]['time']\ny_3=train.loc[200:300]['signal']\nfig.add_trace(go.Scatter(x=x_1,y=y_1,showlegend=False,mode='lines+markers',name='first sample',marker=dict(color='dodgerblue')),row=1,col=1)\nfig.add_trace(go.Scatter(x=x_2,y=y_2,showlegend=False,mode='lines+markers',name='second sample',marker=dict(color='mediumseagreen')),row=1,col=1)\nfig.add_trace(go.Scatter(x=x_3,y=y_3,showlegend=False,mode='lines+markers',name='third sample',marker=dict(color='violet')),row=1,col=1)\nfig.update_layout(height=1200,width=800,title_text='sample signals')\nfig.show()","57c1e996":"def maddest(d, axis=None):\n    return np.mean(np.absolute(d - np.mean(d,axis)),axis)\ndef denoise_signal(x,wavelet='db4',level=1):\n    coeff=pywt.wavedec(x,wavelet,mode='per')\n    sigma=(1\/0.6745)*maddest(coeff[-level])\n    uthresh=sigma*np.sqrt(2*np.log(len(x)))\n    coeff[1:]=(pywt.threshold(i,value=uthresh,mode='hard') for i in coeff[1:])\n    return pywt.waverec(coeff,wavelet,mode='per')","566bfd19":"fig = make_subplots(rows=3,cols=1)\nx=train.loc[:100]['time']\ny_1=train.loc[:100]['signal']\ny_w1=denoise_signal(train.loc[:100]['signal'])\ny_2=train.loc[100:200]['signal']\ny_w2=denoise_signal(train.loc[100:200]['signal'])\ny_3=train.loc[200:300]['signal']\ny_w3=denoise_signal(train.loc[200:300]['signal'])\nfig.add_trace(go.Scatter(x=x,y=y_1,showlegend=False,mode='lines+markers',name='original sample',marker=dict(color='lightskyblue')),row=1,col=1)\nfig.add_trace(go.Scatter(x=x,y=y_w1,showlegend=False,mode='lines',name='denoised sample',marker=dict(color='navy')),row=1,col=1)\nfig.add_trace(go.Scatter(x=x,y=y_2,showlegend=False,mode='lines+markers',marker=dict(color='mediumaquamarine')),row=2,col=1)\nfig.add_trace(go.Scatter(x=x,y=y_w2,showlegend=False,mode='lines',marker=dict(color='mediumaquamarine')),row=2,col=1)\nfig.add_trace(go.Scatter(x=x,y=y_3,showlegend=False,mode='lines+markers',marker=dict(color='thistle')),row=3,col=1)\nfig.add_trace(go.Scatter(x=x,y=y_w3,showlegend=False,mode='lines',marker=dict(color='indigo')),row=3,col=1)\nfig.update_layout(height=1200,width=800,title_text='Original (pale) vs. denoised (dark) signals')\nfig.show()","1db0714a":"output = pd.DataFrame({'time': test.time, 'open_channels': sample.open_channels})\noutput.to_csv('submission.csv', index=False)\nprint('submission is saved')","5753d36e":"result = pd.read_csv('\/kaggle\/working\/submission.csv')\nresult.head()","5d9998d2":"x = train.loc[:100][\"time\"]\ny1 = train.loc[:100][\"signal\"]\ny_w1 = denoise_signal(train.loc[:100][\"signal\"])\ny2 = train.loc[100:200][\"signal\"]\ny_w2 = denoise_signal(train.loc[100:200][\"signal\"])\ny3 = train.loc[200:300][\"signal\"]\ny_w3 = denoise_signal(train.loc[200:300][\"signal\"])\n\nfig, ax = plt.subplots(nrows=3, ncols=2, figsize=(30, 20))\n\nax[0,0].plot(y1, color='seagreen', marker='o')\nax[0,0].set_title('Original Signal', fontsize=24)\nax[0,1].plot(y_w1, color='red', marker='.')\nax[0,1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[1,0].plot(y2, color='seagreen', marker='o')\nax[1,0].set_title('Original Signal', fontsize=24)\nax[1,1].plot(y_w2, color='red', marker='.')\nax[1,1].set_title('After Wavelet Denoising', fontsize=24)\n\nax[2,0].plot(y3, color='seagreen', marker='o')\nax[2,0].set_title('Original Signal', fontsize=24)\nax[2,1].plot(y_w3, color='red', marker='.')\nax[2,1].set_title('After Wavelet Denoising', fontsize=24)\n\nplt.show()","747ea308":"Wavelet \uc7a1\uc74c\uc81c\uac70\n\uc6e8\uc774\ube14\ub9bf \uc7a1\uc74c\uc81c\uac70\ub294 \uc2e0\ud638\uc5d0\uc11c \ubd88\ud544\uc694\ud55c \uc7a1\uc74c\uc744 \uc81c\uac70\ud558\ub294 \ubc29\ubc95\uc774\ub2e4.\n\uc774 \ubc29\ubc95\uc740 '\uc6e8\uc774\ube14\ub9bf \uacc4\uc218\ub4e4'\ub77c\ub294 coefficients\ub97c \uacc4\uc0b0\ud55c\ub2e4. \n\uc774\ub7f0 \uacc4\uc218\ub4e4\uc740 \uc2e0\ud638\uc778\uc9c0 \uc7a1\uc74c\uc778\uc9c0 \uc815\ubcf4\uc758 \uc870\uac01\uc744 \uacb0\uc815\ud55c\ub2e4.\nMAD \uac12(\ud3c9\uade0 \uc808\ub300 \ud3b8\ucc28)\ub97c \uc774\uc6a9\ud558\uc5ec \uc2e0\ud638\uc758 \ubb34\uc791\uc704\uc131\uc744 \uc774\ud574\ud558\uace0 \ub530\ub77c\uc11c \uc2dc\uacc4\uc5f4\uc758 \uc6e8\uc774\ube14\ub9bf \uacc4\uc218\uc5d0 \ub300\ud55c \ucd5c\uc18c \uc784\uacc4\uac12\uc744 \uacb0\uc815\ud55c\ub2e4.\n\uc6e8\uc774\ube14\ub9bf \uacc4\uc218\ub85c\ubd80\ud130 \ub0ae\uc740 \uacc4\uc218\ub97c \uac78\ub7ec\ub0b4\uace0 \ub098\uba38\uc9c0 \uacc4\uc218\ub4e4\ub85c\ubd80\ud130 \uc804\uae30 \uc2e0\ud638\ub97c \uc7ac\uad6c\uc131\ud55c\ub2e4. \uc131\uacf5\uc801\uc73c\ub85c \uc804\uae30 \uc2e0\ud638\ub85c\ubd80\ud130 \uc7a1\uc74c\uc744 \uc81c\uac70\ud55c\ub2e4."}}