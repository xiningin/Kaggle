{"cell_type":{"95395afe":"code","c0b05934":"code","5dfc9dce":"code","b30c147b":"code","44600f8d":"code","52ad9b14":"code","2c389e52":"code","dac8c95c":"code","ab9259e3":"code","efc5fd8b":"code","5d48976f":"code","e447ccf6":"code","2e4f737b":"code","11c64ec4":"code","bee5df07":"code","cf2afcca":"code","f7ea3534":"code","bd30bfca":"code","5377fde0":"code","3850f5e7":"code","c72d1537":"code","d706eb4d":"markdown","3de06f87":"markdown","6ba555de":"markdown","8bd3f1fd":"markdown","e534ca1b":"markdown","4427759e":"markdown"},"source":{"95395afe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","c0b05934":"data = pd.read_csv(\"..\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv\", header=None)","5dfc9dce":"data.head()\n","b30c147b":"data.columns = ['Month', 'Passengers']\ndata.Month = pd.to_datetime(data.Month, format='%Y-%m')\ndata.Passengers = data.Passengers.astype(\"float64\")\ndata = data.set_index('Month')","44600f8d":"data.head()\n","52ad9b14":"data.plot(figsize=(14,6))\nplt.title('Airline Passenger Traffic Data')\nplt.show(block=False)","2c389e52":"data['Passengers_Mean_Imputation'] = data.Passengers.fillna(data.Passengers.mean())","dac8c95c":"plt.figure(figsize=(16,4))\nplt.plot(data.Passengers_Mean_Imputation, label='Passengers_Mean_Imputation')\nplt.plot(data.Passengers, label='Passengers')\nplt.legend(loc='best')\nplt.title('Missing Value Treatment: Mean Imputation')\nplt.show(block=False)","ab9259e3":"data.head()","efc5fd8b":"data[\"Passengers\"]=data[\"Passengers_Mean_Imputation\"]\ndata.drop(columns=['Passengers_Mean_Imputation'],inplace=True)","5d48976f":"data.head()","e447ccf6":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = (14,8)\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive')\nfig = decomposition.plot()\nplt.show()","2e4f737b":"L=124\ntrain = data[0:L]\ndef create_method(title, func):\n    yhat = data[124 :].copy()\n    yhat[title] = func\n    return yhat","11c64ec4":"yavg = create_method('avg_forecast', train.Passengers.mean())","bee5df07":"def plot_method(yhat, title):\n    plt.figure(figsize=(12,4))\n    plt.plot(data[: 124].Passengers, label = 'Train')\n    plt.plot(data[124 :].Passengers, label = 'Test')\n    plt.plot(yhat, label = title + ' Forecast')\n    plt.legend(loc='best')\n    plt.title(title + ' Method')\n    plt.show()","cf2afcca":"plot_method(yavg.avg_forecast, 'Simple Average')","f7ea3534":"from sklearn.metrics import mean_squared_error\ndef error(yhat, title, prevResults, length):\n    rmse = np.sqrt(mean_squared_error(data[124 :].Passengers, yhat[length:])).round(2)\n    mape = np.round(np.mean(np.abs(data[124 :].Passengers-yhat[length:])\/data[124 :].Passengers)*100, 2)\n\n    result = pd.DataFrame({'Method':[title + ' Method'], 'RMSE':[rmse], 'MAPE':[mape]})\n    result = pd.concat([prevResults, result])\n    return result","bd30bfca":"result= error(yavg.avg_forecast, 'Simple Average', None, 0)\nresult","5377fde0":"ysma = data.copy()\nma_window = 12\nysma['sma_forecast'] = data.Passengers.rolling(ma_window).mean()\nysma.sma_forecast[L:] = ysma.sma_forecast[L-1]","3850f5e7":"plot_method(ysma.sma_forecast, 'Simple Moving Average')","c72d1537":"result = error(ysma.sma_forecast, 'Simple Moving Average', result, L)\nresult","d706eb4d":"__It is a method for inventory valuation or delivery cost calculation, where even if accepting inventory goods with different unit cost, the average unit cost is calculated by multiplying the total of these unit costs simply by the number of receiving__ ","3de06f87":"# Simple Moving Average Method","6ba555de":"__A simple moving average (SMA) is an arithmetic moving average calculated by adding recent prices and then dividing that figure by the number of time periods in the calculation average__","8bd3f1fd":"__Thankyou very much for reading__","e534ca1b":"# Simple Average Method","4427759e":"![](https:\/\/slideplayer.com\/slide\/6415346\/22\/images\/12\/Simple+Moving+Average+Formula.jpg)"}}