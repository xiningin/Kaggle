{"cell_type":{"e6d7b4d3":"code","4e40082f":"code","2c6cd7d8":"code","45ed0051":"code","07a43ea7":"code","ce2cfcfe":"code","fece4894":"code","8b08c613":"code","982649ab":"code","3c0dd97c":"code","195c92a5":"code","4269af89":"code","c35f2348":"code","de9ddd13":"code","976eadf3":"code","f2540fbf":"code","27fe93c1":"code","3d2e1b70":"code","1d07b31a":"code","0a03c8ae":"code","d0560980":"code","ae015ec8":"code","08b83162":"code","2e53441a":"code","6df46fc9":"code","906cc6b4":"code","52739bea":"code","1a23b730":"code","25843742":"code","6fa9f4fb":"code","d55fb0bc":"code","52956e6d":"code","0ca35195":"code","09e6b35b":"code","fec44c27":"code","637999aa":"code","a0beae5b":"code","8c86f200":"code","68d4512b":"code","3f350008":"code","02bd89a8":"code","a35d1f81":"code","1c3af1f2":"markdown","4a62aef8":"markdown","69913760":"markdown","66bcbf3a":"markdown","8278ecfb":"markdown","39247d74":"markdown","2cbbccaa":"markdown","233adb33":"markdown","632ac465":"markdown","8be3193a":"markdown","c147fa1e":"markdown","9ed96012":"markdown","0e340a7b":"markdown","1afa9b12":"markdown","7f515722":"markdown"},"source":{"e6d7b4d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e40082f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\ngames = pd.read_csv('\/kaggle\/input\/chess\/games.csv')\ngames.head()","2c6cd7d8":"games.info(),games.describe()","45ed0051":"games.isnull().sum()","07a43ea7":"games.corr()","ce2cfcfe":"# Lets Explore Categorial Features\ngames.select_dtypes(['object']).columns","fece4894":"games['id'].value_counts() # Which means that players didn't played a lot of games","8b08c613":"games['winner'].value_counts()","982649ab":"games['victory_status'].value_counts()","3c0dd97c":"sns.countplot(x='victory_status',data=games,hue='winner',palette='rainbow')\n# Clearly See that there is no connection between color of player to winning.","195c92a5":"sns.countplot(x='victory_status',data=games,hue='rated',palette='magma')\n# A Strong Connection between rated and resigning - which means that rated players are nobel.","4269af89":"# Replaceing true\/false with numeric\ngames.replace(False, 0, inplace=True)\ngames.replace(True, 1, inplace=True)\ngames.head()","c35f2348":"games['opening_name'].value_counts().sort_values(ascending=False).head(20)","de9ddd13":"games['turns'].value_counts().sort_values(ascending=False).head()","976eadf3":"games['turns'].mean()","f2540fbf":"# Lets try to understand what effects your possibility to win\nwinner_dummies = pd.get_dummies(games['winner'])\nwinner_dummies\n","27fe93c1":"games = pd.concat([games,winner_dummies],axis=1)\ngames.drop('winner',axis=1,inplace=True)\ngames.drop('draw',axis=1,inplace=True)\ngames.head()","3d2e1b70":"games.select_dtypes(['object']).columns","1d07b31a":"# Id columnm doesn't effect the data \ngames.drop('id',axis=1,inplace=True)\ngames.select_dtypes(['object']).columns","0a03c8ae":"# Getting dummies for victory status\nvictorystatus_dummies = pd.get_dummies(games['victory_status'],drop_first=True)\nvictorystatus_dummies","d0560980":"games.drop('victory_status',axis=1,inplace=True)\ngames = pd.concat([games,victorystatus_dummies],axis=1)\ngames.head()","ae015ec8":"# explore object types\ngames.select_dtypes(['object']).columns","08b83162":"# Lets Explore top players_move\ngames['two_moves'] = games['moves'].apply(lambda x: x[:6])\ngames['two_moves'].value_counts().head(5)","2e53441a":"# Removing unecessary columns\ngames.drop(['increment_code','white_id','black_id'],axis=1,inplace=True)","6df46fc9":"games.drop('moves',axis=1,inplace=True)\ngames.select_dtypes(['object']).columns","906cc6b4":"games['opening_eco'].value_counts().sort_values(ascending=False)\n# We can refer to the coding book in the explanation tab, currently can't use it for prediction","52739bea":"games.drop('opening_eco',axis=1,inplace=True)","1a23b730":"games.drop(['opening_name','two_moves'],axis=1,inplace=True)","25843742":"games.select_dtypes(['object']).columns","6fa9f4fb":"# View the database again\ngames.head()","d55fb0bc":"plt.figure(figsize=(12,8))\nsns.heatmap(games.corr(),annot=True,cmap='viridis')","52956e6d":"games.info()","0ca35195":"games['created_at']","09e6b35b":"games['created_at'] = pd.to_datetime(games['created_at'])\ngames['created_at'].head(5)","fec44c27":"games['last_move_at'] = pd.to_datetime(games['last_move_at'])\ngames['last_move_at'].head(5)","637999aa":"games.drop(['last_move_at','created_at'],axis=1,inplace=True)","a0beae5b":"games.info()","8c86f200":"X = games.drop('rated',axis=1)\ny = games['rated']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","68d4512b":"rfc = RandomForestClassifier(n_estimators=2000)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)\n\n","3f350008":"print(classification_report(pred_rfc, y_test))\nprint(confusion_matrix(pred_rfc, y_test))","02bd89a8":"player = games.drop('rated',axis=1).loc[6]\npred_player = rfc.predict(player.values.reshape(1,-1))\npred_player","a35d1f81":"games['rated'].loc[6]","1c3af1f2":"the player is rated indeed\nSo in that case we predicted correctly if the player was rated or not.\nconclusions - a better model ? \nincrease the number of estimators ?\nchoose another model predictions ? maybe deep learning neurons method?\nmaybe trying to understand better correlation between the variables?\nmaybe chess isn't that predictable?","4a62aef8":"making our data available to analyze and create a model.","69913760":"Average number of turns","66bcbf3a":"Checking correlation between variables","8278ecfb":"So Basically we see that our model doesn't know how to explain the data that good\nWe also saw that there isn't a good coorelation between our variables\nwe have a good accuracy in f1-score, but we truly miss the precision at some points\nsometimes chess may be unpredicatble.\nLets see if we can predict a single data observation","39247d74":"Looking for null data","2cbbccaa":"Checking timestamp columns to see if there is relevant data","233adb33":"Looking for top openings","632ac465":"Trying to predict wether a player is rated or not","8be3193a":"First look on the data","c147fa1e":"Which means that the player predicted as rated.","9ed96012":"Exploring the variables through data types","0e340a7b":"I'll use random forest classifier at the moment,\nlarge number of estimators relatively ","1afa9b12":"Evaluating the model","7f515722":"Looking for number of turns"}}