{"cell_type":{"fa19cb2d":"code","b3141646":"code","eaeeedf2":"code","ca382c0a":"code","dce1966e":"code","37d7e4a9":"code","f60b8dec":"markdown","74fdc39e":"markdown","63c05e73":"markdown"},"source":{"fa19cb2d":"import os\nimport gc\nimport time\nimport random\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import RobustScaler\n\nimport xgboost as xgb\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nSEED = 2021\nseed_everything(SEED)","b3141646":"class config:\n    paths = {\n        # train path\n        \"train_csv\"  : \"..\/input\/tabular-playground-series-oct-2021\/train.csv\",\n        \"test_csv\" : \"..\/input\/tabular-playground-series-oct-2021\/test.csv\",\n        \"ss\": \"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\",\n        \n        'xgb_paths': \".\/xgb\"\n    }\n\n    random_state = SEED\n\n    model_params = {\n        \"xgb\": {\n            \"subsample\": 0.65,\n            \"colsample_bytree\": 0.4,\n            \"max_depth\": 7,\n            \"learning_rate\": 0.01,\n            \"objective\": \"binary:logistic\",\n            'eval_metric': 'auc',\n            \"nthread\": -1,\n            'tree_method': 'gpu_hist',\n            \"max_bin\": 192, \n            'min_child_weight': 2,\n            'reg_lambda': 0.003,\n            'reg_alpha': 0.02, \n            'seed' : SEED,\n        }\n    }","eaeeedf2":"def get_cols(df):\n    binary_features = []\n    for idx, dt in enumerate(df.dtypes):\n        if dt==\"int64\":\n            col = df.columns[idx]\n            if col=='id' or col=='target':\n                continue\n\n            binary_features.append(col)\n\n    cont_features = []\n    for col in tqdm(df.columns):\n        if col not in binary_features and col!='id' and col!=\"target\":\n            cont_features.append(col)\n            \n    print(f\"No of binary features: {len(binary_features)} \\t No of continuous features: {len(cont_features)}\")\n    return binary_features, cont_features","ca382c0a":"class TrainFer:\n    def __init__(self, params_dict, n_splits, model_path, random_state):\n        self.params = params_dict\n        self.n_splits = n_splits\n        self.random_state = random_state\n        self.model_path = model_path\n        if not os.path.isdir(model_path):\n            os.makedirs(model_path)\n            \n    \n    def train(self, X, y):\n        oof_predictions = np.zeros(X.shape[0])\n        kfold = KFold(n_splits=self.n_splits, random_state=0, shuffle=True)\n        oof_scores = []\n\n        for fold, (train_idx, val_idx) in enumerate(kfold.split(X)):\n            print(f\"\\nFold - {fold}\\n\")\n            x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n            x_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n\n            dtrain = xgb.DMatrix(x_train, label=y_train, enable_categorical=True)\n            dval = xgb.DMatrix(x_val, label=y_val, enable_categorical=True)\n\n            model = xgb.train(params=self.params,\n                              dtrain=dtrain,\n                              num_boost_round=10000,\n                              evals=[(dtrain, \"dtrain\"), (dval, \"dval\")],\n                              verbose_eval=200,\n                              early_stopping_rounds=50)\n\n            fold_preds = model.predict(dval)\n            oof_score = roc_auc_score(y_val, fold_preds)\n            print(f\"\\nAUC_ROC of fold {fold}: {oof_score}\")\n            pickle.dump(model, open(os.path.join(self.model_path, f\"xgb_bl_{fold}_{oof_score}.pkl\"), \"wb\"))\n            \n            oof_scores.append(oof_score)\n            oof_predictions[val_idx] = fold_preds\n            \n            del x_train, x_val, y_train, y_val, model, fold_preds, dtrain, dval\n            _ = gc.collect()\n            \n            time.sleep(10)\n        \n        print(f\"\\nOOF Scores: {oof_scores}\\n\")\n        auc_roc_score = roc_auc_score(y, oof_predictions)\n        print(f\"OOF AUC_ROC: {auc_roc_score}\")","dce1966e":"def infer_xgb(test_data, model_dir):\n    print(\"\\n[INFO] XGB Inference...\")\n    \n    test_predictions = np.zeros(test_data.shape[0])\n    test_data = xgb.DMatrix(test_data, enable_categorical=True)\n    \n    for mpth in tqdm(os.listdir(model_dir)):\n        model = pickle.load(open(os.path.join(model_dir, mpth), \"rb\"))\n        test_predictions += model.predict(test_data)\/len(os.listdir(model_dir))\n    \n    return test_predictions\n    pass","37d7e4a9":"if __name__ == \"__main__\":\n    train_df = pd.read_csv(config.paths[\"train_csv\"])\n    \n    cat_feats, cont_feats = get_cols(train_df)\n    model = TrainFer(config.model_params[\"xgb\"], n_splits=5, model_path=config.paths[\"xgb_paths\"], random_state=config.random_state) \n\n    model.train(train_df[cat_feats+cont_feats], train_df[\"target\"])\n    del train_df, model\n    _ = gc.collect()\n    \n    test_df = pd.read_csv(config.paths[\"test_csv\"])\n    test_predictions = infer_xgb(test_df[cat_feats+cont_feats], \".\/xgb\")\n    test_df[\"target\"] = test_predictions\n    test_df[[\"id\", \"target\"]].to_csv(\"submission.csv\", index=False)\n    pass","f60b8dec":"EOF!","74fdc39e":"# Overview\n- Train: 10_00_000 rows, 286 features, binary target.\n- Test : 5_00_000 rows to test, metric: AUC_ROC.","63c05e73":"# CV 5-fold"}}