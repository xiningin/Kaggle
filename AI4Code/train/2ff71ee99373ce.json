{"cell_type":{"51663cc5":"code","d10faa8f":"code","9a807bae":"code","c1a0f6e4":"code","58c1135b":"code","300f09c3":"code","88e25a2b":"code","76d8e339":"code","2993b2a4":"code","0c381e67":"markdown"},"source":{"51663cc5":"import pandas as pd # Veri Manip\u00fclasyonu\nimport numpy as np # Matris \u0130\u015flemleri\nimport datetime as dt # Tarih Saat \u0130\u015flemleri\nimport plotly.express as px # G\u00f6rselle\u015ftirme \u0130\u015flemleri\nimport warnings # Uyar\u0131lar\n\n\nwarnings.filterwarnings(\"ignore\") # Uyar\u0131lar\u0131 g\u00f6rmezden geldik.\npd.set_option('display.expand_frame_repr', False)","d10faa8f":"def load_retail_data(pathname):\n    \"\"\"\n    Online Retail II veri setlerini almak i\u00e7in olu\u015fturulan fonksiyon.\n    \n    Parameters\n    -----------\n    pathname str, optional\n        Veri setinin dizini.\n    \n    Returns\n    -----------\n    pd.DataFrame\n        Dizine g\u00f6re d\u00f6nen veri seti.\n    \"\"\"\n    return pd.read_csv(pathname, sep=\";\")","9a807bae":"def data_prep_for_rfm(dataframe):\n    \"\"\"\n    RFM i\u00e7in Online Retail \u00f6zelinde veri \u00f6n i\u015fleme i\u015flemlerinin topland\u0131\u011f\u0131 fonksiyon\n    \n    Parameters\n    ------------\n    dataframe pd.DataFrame\n        RFM analizi i\u00e7in veri seti\n    \n    Returns\n    ------------\n    dataframe pd.DataFrame\n        RFM i\u00e7in haz\u0131rlanm\u0131\u015f veri seti\n    \n    \"\"\"\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~(dataframe[\"Invoice\"].str.contains(\"C\"))]\n    dataframe[\"Customer ID\"] = dataframe[\"Customer ID\"].astype(int).astype(str)\n    dataframe[\"InvoiceDate\"] = pd.to_datetime(dataframe[\"InvoiceDate\"])\n    dataframe[\"TotalPrice\"] = dataframe[\"Quantity\"] * dataframe[\"Price\"]\n    return dataframe","c1a0f6e4":"def create_rfm_table(dataframe:pd.DataFrame, dataframe_id:str, rfm_grid:dict, segment_list=False):\n    \"\"\"\n    RFM Analizi i\u00e7in tablonun olu\u015fturulmas\u0131n\u0131 sa\u011flayan fonksiyon.\n    Bu fonksiyon i\u015flemleri 4 ad\u0131mda tamamlamaktad\u0131r.\n        1. Ad\u0131m: RFM metriklerinin olu\u015fturulmas\u0131\n            RFM metriklerini olu\u015ftururken gruplanacak id de\u011ferini ve R-F-M de\u011ferlerini kullan\u0131c\u0131 kendi belirler.\n        2. Ad\u0131m: RFM skorlar\u0131n\u0131n olu\u015fturulmas\u0131.\n            RFM skorlar\u0131 olu\u015fturulurken metrik tablosundan yararlan\u0131l\u0131r. De\u011ferler 0-20, 21-40, 41-60, 61-80 ve 81-100 y\u00fczdeliklerine g\u00f6re 5 par\u00e7aya b\u00f6l\u00fcnm\u00fc\u015ft\u00fcr. \n            Frequency'de iki y\u00fczdelik aral\u0131\u011f\u0131 aras\u0131nda kalan de\u011ferlerin ilkine etiket atalamak ad\u0131na rank() metodu kullan\u0131lm\u0131\u015ft\u0131r.\n        3. Ad\u0131m: Segmentlerin olu\u015fturulmas\u0131.\n            R ve F skorlar\u0131na g\u00f6re RegEx yap\u0131s\u0131 kullan\u0131larak segmentler olu\u015fturulmu\u015ftur.\n            Referans al\u0131nan kaynak: https:\/\/guillaume-martin.github.io\/rfm-segmentation-with-python.html\n    \n    Parameters\n    -----------\n    dataframe pd.DataFrame\n        RFM tablosunun olu\u015fmas\u0131 i\u00e7in gereken veri yap\u0131s\u0131\n    dataframe_id str\n        Probleme ba\u011fl\u0131 olarak ele al\u0131nacak id s\u00fctunu\n    rfm_grid dict\n        Probleme ba\u011fl\u0131 olara kullan\u0131lacak toplula\u015ft\u0131rma s\u00f6zl\u00fc\u011f\u00fc\n    \n    Returns\n    -----------\n    rfm_table pd.DataFrame\n        Olu\u015fturulan RFM tablosu.\n    seg_map.values() list\n        Segment listesi. \n    \n    Examples\n    -----------\n    >>> ...\n    >>> analyse_date = dt.datetime(2011, 12, 11)\n    >>> agg_dict = {\"InvoiceDate\": lambda date: (today_date - date.max()).days,\n                    \"Invoice\": \"nunique\",\n                    \"TotalPrice\": \"sum\"}\n    >>> rfm = create_rfm_table(df, \"Customer ID\", agg_dict)\n    >>> rfm.head()\n         Customer ID  Recency  Frequency  Monetary recency_score frequency_score monetary_score RFM_SCORE       segment\n    0       12346      326          1  77183.60             1               1              5        11      hibernating\n    1       12347       40          7   4310.00             4               5              5        45  loyal_customers\n    2       12348       76          4   1797.24             3               4              4        34  loyal_customers\n    3       12349       19          1   1757.55             4               1              4        41        promising\n    4       12350      311          1    334.40             1               1              2        11      hibernating\n    \"\"\"\n    # Ad\u0131m 1: RFM Metriklerinin olu\u015fturulmas\u0131\n    rfm_table = dataframe.groupby(dataframe_id).agg(rfm_grid)\n    rfm_table.columns = [\"Recency\", \"Frequency\", \"Monetary\"]\n    rfm_table = rfm_table[rfm_table[\"Monetary\"] > 0]\n    rfm_table.reset_index(inplace=True)\n    \n    # Ad\u0131m 2: RFM Skorlar\u0131n\u0131n olu\u015fturulmas\u0131\n    rfm_table[\"recency_score\"] = pd.qcut(rfm_table['Recency'], 5, labels=[5, 4, 3, 2, 1])\n    rfm_table[\"frequency_score\"] = pd.qcut(rfm_table['Frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n    rfm_table[\"monetary_score\"] = pd.qcut(rfm_table['Monetary'], 5, labels=[1, 2, 3, 4, 5])\n    \n    # Ad\u0131m 3: Segmentlerin olu\u015fturulmas\u0131\n    rfm_table[\"RFM_SCORE\"] = (rfm_table['recency_score'].astype(str) + rfm_table['frequency_score'].astype(str))\n    seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n    }\n    rfm_table['segment'] = rfm_table['RFM_SCORE'].replace(seg_map, regex=True)\n    \n    \n    # Ad\u0131m 4: RFM tablosunun d\u00f6nd\u00fcr\u00fclmesi\n    if segment_list:        \n        return rfm_table, seg_map.values() \n    return rfm_table","58c1135b":"online_retail_2009_2010_df = load_retail_data(\"..\/input\/online-retail-ii-uci-two-peroid\/online_retail_II_2009_2010.csv\")\nonline_retail_2010_2011_df = load_retail_data(\"..\/input\/online-retail-ii-uci-two-peroid\/online_retail_II_2010_2011.csv\")","300f09c3":"online_retail_2009_2010_df = data_prep_for_rfm(online_retail_2009_2010_df)\nonline_retail_2010_2011_df = data_prep_for_rfm(online_retail_2010_2011_df)","88e25a2b":"analyse_date_2010 = dt.datetime(2010, 12, 13)\nagg_dict_2010 = {\"InvoiceDate\": lambda date: (analyse_date_2010 - date.max()).days,\n                 \"Invoice\": \"nunique\",\n                 \"TotalPrice\": \"sum\"}\nrfm_2009_2010 = create_rfm_table(online_retail_2009_2010_df, \"Customer ID\", agg_dict_2010)\nrfm_2009_2010[\"period\"] = \"2009_2010\"","76d8e339":"analyse_date_2011 = dt.datetime(2011, 12, 11)\nagg_dict_2011 = {\"InvoiceDate\": lambda date: (analyse_date_2011 - date.max()).days,\n                 \"Invoice\": \"nunique\",\n                 \"TotalPrice\": \"sum\"}\nrfm_2010_2011 = create_rfm_table(online_retail_2010_2011_df, \"Customer ID\", agg_dict_2011)\nrfm_2010_2011[\"period\"] = \"2010_2011\"","2993b2a4":"temp_df = pd.concat([rfm_2009_2010[[\"segment\", \"period\"]], rfm_2010_2011[[\"segment\", \"period\"]]], ignore_index=True)\nfig = px.treemap(temp_df, path=[\"segment\", \"period\"], title=\"RFM Segments 2009-2010 vs. 2010-2011\")\nfig.show()","0c381e67":"## RFM Analizi 2009-2010 vs. 2010-2011\n\nBu \u00e7al\u0131\u015fmada Online Retail II veri seti kullan\u0131larak [2009-2010](https:\/\/www.kaggle.com\/cemalcici\/rfm-analizi-ile-m-teri-segmentasyonu-2009-2010) ve [2010-2011](https:\/\/www.kaggle.com\/cemalcici\/rfm-analizi-ile-m-teri-segmentasyonu-2010-2011) d\u00f6nemlerinin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131 yap\u0131lm\u0131\u015ft\u0131r. Proje hakk\u0131nda bilgilere d\u00f6nemlere ba\u011fl\u0131 linklere t\u0131klayarak ula\u015fabilirsiniz."}}