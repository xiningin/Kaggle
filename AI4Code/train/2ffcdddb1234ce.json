{"cell_type":{"83e0fdeb":"code","b5faa546":"code","051d62a5":"code","3759e362":"code","ae23deb7":"code","44ef28b4":"code","fa19a017":"code","bc177e6f":"code","dff3a24f":"code","5a478c66":"code","dc55bd54":"code","2c498676":"code","75b3bd11":"code","99bfbd49":"code","e6ae85f4":"code","c1ef1ace":"code","4587499d":"code","798b3c13":"code","8aa06f90":"code","be968dc2":"code","417f8b54":"code","d6d541a2":"code","0106adcc":"code","862bf979":"code","50e7918f":"code","41949aef":"markdown","e89ee92e":"markdown","334724eb":"markdown","b7f55a83":"markdown","da121677":"markdown","11e04f81":"markdown","4cdc4444":"markdown","cf546a50":"markdown","568e87b4":"markdown"},"source":{"83e0fdeb":"! pip install pyspark","b5faa546":"! pip install tensorflow==2.0.0-alpha0\n","051d62a5":"import tensorflow as tf\nfrom tensorflow.keras import Sequential, Model\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","3759e362":"tf.__version__","ae23deb7":"\nspark = SparkSession.builder.getOrCreate()\nspark","44ef28b4":"sdf_shops = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv', inferSchema=True, header=True)\ncol_shops = ['shop_name', 'shop_id']\n\nsdf_item_categories = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv', inferSchema=True, header=True)\ncol_item_categories = ['item_category_name', 'item_category_id']\n\nsdf_sales_train = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv', inferSchema=True, header=True)\ncol_sales_train = ['date', 'date_block_num', 'shop_id', 'item_id', 'item_cnt_day']\n\nsdf_items = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv', inferSchema=True, header=True)\ncol_items = ['item_name', 'item_id', 'item_category_id']\n\nsdf_test = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv', inferSchema=True, header=True)\ncol_test = ['ID', 'shop_id', 'item_id']\n\nsdf_sample_submission = spark.read.csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv', inferSchema=True, header=True)\ncol_sample_submission = ['ID', 'item_cnt_month']\n\n# sdf_sample_submission.limit(5).toPandas().T","fa19a017":"# sdf_sales_train.withColumn('date', f.from_unixtime(f.unix_timestamp(sdf_sales_train['date'],'%d.%m.%Y')))\n# # sdf_sales_train.limit(10).toPandas().T\n# sales_data = sdf_sales_train.toPandas()\n# sales_data.dtypes","bc177e6f":"from pyspark.sql import functions as f","dff3a24f":"sdf_sales_train= sdf_sales_train.withColumn('item_cnt_day', \n                           f.when(sdf_sales_train['item_cnt_day'] < 0,0)\n                           .otherwise(sdf_sales_train['item_cnt_day']))","5a478c66":"sdf_sales_train = sdf_sales_train.withColumn('item_price',\n                                            f.when(sdf_sales_train['item_price'] < 0, 0)\n                                            .otherwise(sdf_sales_train['item_price']))","dc55bd54":"sdf_sales_train.where((sdf_sales_train['item_cnt_day'] < 0) | \n                     (sdf_sales_train['item_price'] < 0)).count()","2c498676":"sales_data = sdf_sales_train.toPandas()\nsales_data['date'] = pd.to_datetime(sales_data['date'],format = '%d.%m.%Y')\n","75b3bd11":"sales_data.dtypes\n# sales_data.T","99bfbd49":"dataset = sales_data.pivot_table(index = ['shop_id','item_id'],values = ['item_cnt_day'],columns = ['date_block_num'],fill_value = 0,aggfunc='sum')\n","e6ae85f4":"dataset.reset_index(inplace = True)\ndataset.head()","c1ef1ace":"test_data = sdf_test.toPandas()","4587499d":"dataset = pd.merge(test_data,dataset,on = ['item_id','shop_id'],how = 'left')","798b3c13":"dataset.fillna(0,inplace = True)\ndataset.head()","8aa06f90":"dataset.drop(['shop_id','item_id','ID'],inplace = True, axis = 1)\ndataset.head()","be968dc2":"# X we will keep all columns execpt the last one \nX_train = np.expand_dims(dataset.values[:,:-1],axis = 2)\n# the last column is our label\ny_train = dataset.values[:,-1:]\n\n# for test we keep all the columns execpt the first one\nX_test = np.expand_dims(dataset.values[:,1:],axis = 2)\n\n# lets have a look on the shape \nprint(X_train.shape,y_train.shape,X_test.shape)","417f8b54":"model  = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.LSTM(32,input_shape=X_train.shape[-2:]))\nmodel.add(tf.keras.layers.Dropout(0.4))\nmodel.add(tf.keras.layers.Dense(1,activation='relu'))\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(), loss='mae')\n# model.compile(loss = 'mse',optimizer = 'adam', metrics = ['mean_squared_error'])\n\nmodel.summary()\n","d6d541a2":"tf.keras.utils.plot_model(model,show_layer_names=True,show_shapes=True)","0106adcc":"model.fit(X_train,y_train,batch_size = 4096,epochs = 10)\n","862bf979":"# creating submission file \nsubmission_pfs = model.predict(X_test)\n# creating dataframe with required columns \nsubmission = pd.DataFrame({'ID':test_data['ID'],'item_cnt_month':submission_pfs.ravel()})\n# creating csv file from dataframe\nsubmission.T","50e7918f":"submission.to_csv('submission.csv',index = False)","41949aef":"# Train Test Split","e89ee92e":"# Type casting \/ data cleaning","334724eb":"# Use trained model for Prediction","b7f55a83":"# Train the model","da121677":"<div class=\"alert alert-block alert-info\">\n\n<b>Note:<\/b> This is a work in progress notebook!   \n\n<\/div>\n\n\n\n- Lot can be done in the feature engineering.\n- Also passing Spark dataframe to Tensorflow without converting it to pandas.","11e04f81":"# Read Inputs","4cdc4444":"# Negative Values ( Returns ) exclude or predict ?\nchange all of them to 0!","cf546a50":"Source:\n- https:\/\/www.kaggle.com\/karanjakhar\/simple-and-easy-aprroach-using-lstm","568e87b4":"# TF Model building"}}