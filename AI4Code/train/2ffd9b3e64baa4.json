{"cell_type":{"76d12a14":"code","afd6c264":"code","d4eb8f49":"code","9fb871c6":"code","47982cd2":"code","191dbc28":"code","7a810dc2":"code","bf6a34f1":"code","8b8c837f":"code","40355685":"code","f4477f90":"code","635b94f7":"code","7273771e":"code","1902a7d0":"code","ddbcace0":"code","1b199246":"code","48611637":"code","0fea08b7":"code","e114a86a":"code","385292a8":"code","bf663d18":"code","1f4385c3":"code","851f4f1d":"code","c62d0be8":"code","a3092a80":"code","f5292076":"code","8987f4ae":"code","daf33cbd":"code","94e37582":"code","0893379e":"code","0ff749b0":"code","8a8da758":"code","89a727cd":"code","7a25fc51":"code","28b837ab":"code","4007f49d":"code","ec554cd0":"code","0d02d1ea":"code","a31a118e":"code","40a09456":"code","4f8ac7af":"code","b696f075":"code","5af1aded":"code","0cfbd861":"code","42d0d557":"code","03729816":"code","2579a603":"code","e1d78d06":"code","ee0602e3":"code","3de6c80c":"code","81b951c7":"code","92d7788e":"code","ac91a5bf":"code","0814e4d6":"code","f84a5ee2":"code","824a4668":"code","63481b13":"code","70db7244":"code","ad86ecce":"code","0123a1e6":"markdown","c8d2f0d8":"markdown","ee1d3301":"markdown","64a2c559":"markdown","ecc88b02":"markdown","7377f2b9":"markdown","23bf2466":"markdown","e8b08f5f":"markdown","6501da03":"markdown","7ef05b12":"markdown","e1858f35":"markdown","3299c0a6":"markdown","8400f0d7":"markdown","827cc82d":"markdown","f8427dc6":"markdown","424a53fd":"markdown","9e097fe2":"markdown","9532765d":"markdown","28361e77":"markdown","8e8a6c0b":"markdown","cfa34abb":"markdown","4a0358dc":"markdown","cfd06c21":"markdown","63b32714":"markdown","ed66cb47":"markdown","b348cb81":"markdown"},"source":{"76d12a14":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report","afd6c264":"data = pd.DataFrame(pd.read_csv(\"..\/input\/covid19-refined-dataset\/Covid-19_dataset.csv\"))\ndata.head(2)","d4eb8f49":"data.columns = data.columns.str.strip().str.lower().str.replace(' ', '_')\ndata.head(2)","9fb871c6":"data.shape","47982cd2":"data.drop(data.columns[[0,1,3,8,9,10,11,12,17,18,19]], axis = 1, inplace = True)\ndata['reporting_date'] = pd.to_datetime(data.reporting_date)\n\ndata.head()","191dbc28":"data.shape","7a810dc2":"data.columns","bf6a34f1":"data.describe()","8b8c837f":"data.info()","40355685":"print('Number of Null values in Columns')\ndata.isnull().sum()","f4477f90":"refined_data = data.dropna(subset=['gender', 'age', 'from_wuhan'])","635b94f7":"print('Number of Null values in Columns')\nrefined_data.isnull().sum()","7273771e":"refined_data.head(5)","1902a7d0":"refined_data.shape","ddbcace0":"refined_data.columns","1b199246":"refined_data.describe()","48611637":"refined_data.info()","0fea08b7":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nrefined_data[refined_data.columns[1]] = labelencoder.fit_transform(refined_data[refined_data.columns[1]])","e114a86a":"labelencoder = LabelEncoder()\nrefined_data[refined_data.columns[2]] = labelencoder.fit_transform(refined_data[refined_data.columns[2]])","385292a8":"labelencoder = LabelEncoder()\nrefined_data[refined_data.columns[3]] = labelencoder.fit_transform(refined_data[refined_data.columns[3]])","bf663d18":"refined_data.head(5)","1f4385c3":"refined_data.info()","851f4f1d":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\nX = refined_data.iloc[:,1:7]  #independent columns\ny = refined_data.iloc[:,7]    #target column i.e Death","c62d0be8":"#apply SelectKBest class to extract top 5 best features\nbestfeatures = SelectKBest(score_func=chi2, k=5)\nfit = bestfeatures.fit(X,y)","a3092a80":"dfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)","f5292076":"#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nfeatureScores","8987f4ae":"print(featureScores.nlargest(6,'Score'))","daf33cbd":"labels = 'age', 'location', 'country', 'from_wuhan', 'visiting_wuhan', 'gender'\nsizes = [444.595027, 407.528544, 81.670406, 53.350788, 9.143794, 3.567871]\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=190)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","94e37582":"from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)","0893379e":"print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers","0ff749b0":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()","8a8da758":"refined_data.sample(5)","89a727cd":"refined_data.shape","7a25fc51":"y= refined_data[\"death\"]\ny","28b837ab":"x= refined_data[\"age\"]\ny= refined_data[\"death\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Died based on their age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.show()\n","4007f49d":"x= refined_data[\"age\"]\ny= refined_data[\"recovered\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Recovered based on their age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.show()","ec554cd0":"print(\"Current count of patients:\", refined_data.shape[0])\nprint(\"Recovered:\",len(refined_data[refined_data.recovered == 1]))\nprint(\"Dead:\",len(refined_data[refined_data.death == 1]))\nprint(\"Number of Patients receiving treatment:\", refined_data.shape[0] - len(refined_data[refined_data.recovered == 1]) \n      - len(refined_data[refined_data.death == 1]))\n\ny = np.array([len(refined_data[refined_data.recovered == 1]),len(refined_data[refined_data.death == 1])])\nx = [\"Recovered\",\"Dead\"]\nplt.bar(x,y)\nplt.title(\"Patient Status\")\nplt.xlabel(\"Patients\")\nplt.ylabel(\"Frequency\")\nplt.show()","0d02d1ea":"print(\"Male:\",len(refined_data[refined_data.gender == 1][refined_data.death == 1]))\nprint(\"Female:\",len(refined_data[refined_data.gender == 0][refined_data.death == 1]))\n\ny = np.array([len(refined_data[refined_data.gender == 1][refined_data.death == 1]),\n              len(refined_data[refined_data.gender == 0][refined_data.death == 1])])\nx = [\"Male\",\"Female\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Died\")\nplt.xlabel(\"Patients\")\nplt.ylabel(\"Frequency\")\nplt.show()","a31a118e":"print(\"Male:\",len(refined_data[refined_data.gender == 1][refined_data.recovered == 1]))\nprint(\"Female:\",len(refined_data[refined_data.gender == 0][refined_data.recovered == 1]))\n\ny = np.array([len(refined_data[refined_data.gender == 1][refined_data.recovered == 1]),\n              len(refined_data[refined_data.gender == 0][refined_data.recovered == 1])])\nx = [\"Male\",\"Female\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Recovered\")\nplt.xlabel(\"Patients\")\nplt.ylabel(\"Frequency\")\nplt.show()","40a09456":"print(\"From Wuhan :\",len(refined_data[refined_data.from_wuhan == 1][refined_data.death == 1]))\nprint(\"Not From Wuhan:\",len(refined_data[refined_data.from_wuhan == 0][refined_data.death == 1]))\n\ny = np.array([len(refined_data[refined_data.from_wuhan == 1][refined_data.death == 1]),\n              len(refined_data[refined_data.from_wuhan == 0][refined_data.death == 1])])\nx = [\"From Wuhan\",\"Not From Wuhan\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Died\")\nplt.xlabel(\"Patients\")\nplt.ylabel(\"Frequency\")\nplt.show()","4f8ac7af":"print(\"From Wuhan :\",len(refined_data[refined_data.from_wuhan == 1][refined_data.recovered == 1]))\nprint(\"Not From Wuhan:\",len(refined_data[refined_data.from_wuhan == 0][refined_data.recovered == 1]))\n\ny = np.array([len(refined_data[refined_data.from_wuhan == 1][refined_data.recovered == 1]),\n              len(refined_data[refined_data.from_wuhan == 0][refined_data.recovered == 1])])\nx = [\"From Wuhan\",\"Not From Wuhan\"]\nplt.bar(x,y)\nplt.title(\"Number of Patients Recovered\")\nplt.xlabel(\"Patients\")\nplt.ylabel(\"Frequency\")\nplt.show()","b696f075":"group = data.groupby('country').size()\ngroup.head()","5af1aded":"x= ['Afghanistan','Algeria','Australia','Austria','Bahrain','Belgium',\n'Cambodia','Canada','China','Croatia','Egypt','Finland','France',\n'Germany','Hong Kong','India','Iran','Israel','Italy','Japan',\n'Kuwait','Lebanon','Malaysia','Nepal','Philippines','Russia',\n'Singapore','South Korea','Spain','Sri Lanka','Sweden','Switzerland',\n'Taiwan','Thailand','UAE','UK','USA', 'Vietnam']\ny= group\n\nplt.title(\"Patients identified at different locations\")\nplt.xlabel(\"Location\")\nplt.ylabel(\"Number of Covid Patients\")\nplt.xticks(rotation=90)\nplt.bar(x,y)","0cfbd861":"# WORLD MAP SHOWING LOCATIONS WITH COVID-19 PATIENTS\nimport plotly.express as px\nfig = px.choropleth(data, locations=\"country\", locationmode='country names', \n                    hover_name=\"country\", title='PATIENTS IDENTIFIED AT DIFFERENT LOCATIONS', \n                    color_continuous_scale=px.colors.sequential.Magenta)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","42d0d557":"# Over the time\n\nfig = px.choropleth(data, locations=\"country\", locationmode='country names', \n                    hover_name=\"country\", animation_frame=data[\"reporting_date\"].dt.strftime('%Y-%m-%d'),\n                    title='OVER THE TIME PATIENTS IDENTIFIED BASED ON THEIR LOCATION', \n                    color_continuous_scale=px.colors.sequential.Magenta)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","03729816":"X = refined_data[refined_data.columns[1:7]] #(location, country, gender, age, visiting wuhan, from wuhan)\ny = refined_data[refined_data.columns[[7]]] #death","2579a603":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)\n\nreg=LogisticRegression()\nreg.fit(X_train,y_train)","e1d78d06":"reg.score(X_train,y_train)","ee0602e3":"pdt = reg.predict(X_test)\npdt","3de6c80c":"#CONFUSION MATRIX\ncm = metrics.confusion_matrix(y_test, pdt)\nprint(cm)","81b951c7":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_test,pdt))\nrms","92d7788e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, pdt))","ac91a5bf":"X = refined_data[refined_data.columns[1:7]] #(location, country, gender, age, visiting wuhan, from wuhan)\ny = refined_data[refined_data.columns[[8]]] #recovered","0814e4d6":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)\n\nreg=LogisticRegression()\nreg.fit(X_train,y_train)","f84a5ee2":"reg.score(X_train,y_train)","824a4668":"pdt = reg.predict(X_test)\npdt","63481b13":"#CONFUSION MATRIX\ncm = metrics.confusion_matrix(y_test, pdt)\nprint(cm)","70db7244":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_test,pdt))\nrms","ad86ecce":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, pdt))","0123a1e6":"## Obtaining Data","c8d2f0d8":"## Importing Libraries","ee1d3301":"#### COUNTRY","64a2c559":"Therefore we can conclude that Deaths are mostly effected by the 'Location' and 'Age' of the Patient as those features have the highest Feature Score.","ecc88b02":"## Prediction","7377f2b9":"## Visualization","23bf2466":"## Feature Selection","e8b08f5f":"We can conclude that Pateints with age more than 55 have high chance of death because of their weaker immune system.","6501da03":"Certain locations have more patients as compared to others.","7ef05b12":"Therefore patients from Wuhan have high chance of death then recovery as compared to patients not from Wuhan.","e1858f35":".\n","3299c0a6":"#### Predicting RECOVERY of a Patient","8400f0d7":"As more Males die as well as recover with comparison to Females, therefore this data is redundant and we can not predict pateint's health based on thier gender.","827cc82d":"## STAY SAFE! STAY AT HOME!","f8427dc6":"#### GENDER","424a53fd":"We can conclude that 'Gender' of the patient or Whether they have 'visited Wuhan' has very little impact on their chance of Death.","9e097fe2":"### Univariate Selection","9532765d":"### Deleting Rows with Null Values in Specific columns","28361e77":"#### SPECIFIC LOCATION IN A COUNTRY","8e8a6c0b":"## Encoding Data ","cfa34abb":"Patients with age below 55 have high chance of recovery.","4a0358dc":"The dataset used in this notebook (Covid-19_dataset.csv) is same as the COVID19_line_list_data.csv dataset taken from https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset, but the only difference is that in our dataset death and recovered features are encoded as (0 or 1) and not in form of dates as in the later dataset.","cfd06c21":"#### Predicting DEATH of a Patient","63b32714":"## Cleaning Data","ed66cb47":"## COVID-19 Analysis","b348cb81":"### Feature Importance"}}