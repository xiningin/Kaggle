{"cell_type":{"b734ea8b":"code","90e3c939":"code","e2937b3d":"code","3214ffee":"code","69ef374e":"code","509d82a8":"code","efd275dd":"code","eb65975f":"code","778907f1":"code","8e5f42fa":"code","7caf08ee":"code","3a06c108":"code","474151e7":"code","1e25ce7a":"code","ba880829":"code","c55bb742":"code","158b00e2":"code","5dc2ed59":"code","5fc0e206":"code","975df2d6":"code","2750a9bf":"code","cf489414":"code","0f0d4581":"code","c572601f":"code","037a8e9d":"code","e7843f1b":"code","14dc51e7":"code","f5dc8bc1":"code","914fe5cb":"code","ca26884e":"code","e208bbcc":"code","f10b3a60":"code","6a59c057":"code","971ce1f7":"code","5a262136":"code","42ff4d33":"code","c48eaa8e":"code","7b0a78da":"code","053f6e75":"code","8a640cbe":"code","0a5d26c9":"code","a9b05d9b":"code","b7b77a4e":"code","ddbfb29b":"code","94bfa466":"code","11bfd5d9":"code","bcaff006":"code","443c39f1":"code","c2797d58":"code","0aa34e5e":"code","92522655":"code","50ef35ba":"code","43c66216":"markdown","a20a1aa8":"markdown","cacda1d0":"markdown","4d877d00":"markdown","93618e2b":"markdown","858905c7":"markdown","e3a29df6":"markdown","7aa5902b":"markdown","faadab27":"markdown","889d436b":"markdown","128224cc":"markdown","0131f34f":"markdown","e84fe54b":"markdown"},"source":{"b734ea8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90e3c939":"import sklearn\ndf=pd.read_csv('\/kaggle\/input\/bank-loan-approval\/train.csv')","e2937b3d":"df","3214ffee":"df.info()","69ef374e":"df.isnull().sum()","509d82a8":"df.describe()","efd275dd":"df=df.drop(['Loan_ID'],axis=1)","eb65975f":"import seaborn as sns\nsns.countplot(df.Gender)","778907f1":"df['Gender'].fillna('Male',inplace=True)","8e5f42fa":"sns.countplot(df.Married)","7caf08ee":"df['Married'].fillna('Yes',inplace=True)","3a06c108":"sns.countplot(df.Dependents)","474151e7":"df['Dependents'].fillna('0',inplace=True)","1e25ce7a":"sns.countplot(df.Education)","ba880829":"sns.countplot(df.Self_Employed)","c55bb742":"df['Self_Employed'].fillna('No',inplace=True)","158b00e2":"df['Loan_Amount_Term'].fillna(360.0,inplace=True)","5dc2ed59":"df.dropna(subset=['Credit_History','LoanAmount'], inplace=True)","5fc0e206":"df.isnull().sum()","975df2d6":"def convert(x):\n    if x=='3+':\n        return int(x[0])\n    else:\n        return int(x)","2750a9bf":"df['Dependents']=df['Dependents'].map(convert)","cf489414":"df['EMI']=(df['LoanAmount']*0.09*(1.09**df['Loan_Amount_Term']))\/(1.09**(df['Loan_Amount_Term']-1))","0f0d4581":"sns.distplot(df.ApplicantIncome)","c572601f":"df['ApplicantIncome']=df['ApplicantIncome'].map(lambda x:float(x\/1000))\n","037a8e9d":"import numpy as np\ndf['Income_log']=np.log(df.ApplicantIncome)","e7843f1b":"sns.distplot(df.Income_log)","14dc51e7":"df.Income_log.describe()","f5dc8bc1":"sns.distplot(df['EMI'])","914fe5cb":"df.EMI.describe()","ca26884e":"df['EMI_log']=np.log(df['EMI'])","e208bbcc":"sns.distplot(df['EMI_log'])","f10b3a60":"df=df[df['EMI_log']>0]","6a59c057":"df=df[df['Income_log']>0]","971ce1f7":"from scipy.stats import chi2_contingency \ndef  calc_csqu(cate_data,d2):\n    res={}\n    for d1 in cate_data:\n        dataset_table=pd.crosstab(df[d1],df[d2])\n        data=dataset_table.values   \n        stat, p, dof, expected = chi2_contingency(data)\n        res[d1]=p\n    return res","5a262136":"cate_data=['Education','Gender','Self_Employed','Property_Area','Credit_History','Married']\nall_cate_p=calc_csqu(cate_data,'Loan_Status')\n\nfor key,value in all_cate_p.items():\n    print(key,'   :',value)","42ff4d33":"df.drop(['Gender','Self_Employed'],inplace=True,axis=1)","c48eaa8e":"from scipy.stats import f_oneway\ndef anova_test(nume_data):\n    yes=df[df.Loan_Status=='Y']\n    no=df[df.Loan_Status=='N']\n    res={}\n    for d1 in nume_data:\n        _,p=f_oneway(yes[d1],no[d1])\n        res[d1]=p\n    return res","7b0a78da":"df.head(3)","053f6e75":"nume_data=['Dependents','Income_log','EMI_log']\nres=anova_test(nume_data)\nfor key,values in res.items():\n    print(key)\n    print(values)","8a640cbe":"df.drop(['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','EMI'],inplace=True,axis=1)","0a5d26c9":"df.head(2)","a9b05d9b":"df=pd.get_dummies(df,drop_first=True)\n","b7b77a4e":"\ndf.head(2)","ddbfb29b":"y=df['Loan_Status_Y']\n","94bfa466":"df.drop(['Loan_Status_Y'],inplace=True,axis=1)\nX=df","11bfd5d9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","bcaff006":"from imblearn.over_sampling import SMOTE\nover=SMOTE(sampling_strategy=0.5826530612244898)#used GridSearchCV\nX_train,y_train=over.fit_resample(X_train,y_train)\nmodel=LogisticRegression(C=1,solver='liblinear')\nmodel.fit(X_train, y_train)","443c39f1":"y_pred=model.predict_proba(X_test)","c2797d58":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\ny_pred_1=pd.Series(y_pred[:,1])\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_1)\nimport matplotlib.pyplot as plt\ndef plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()\nplot_roc_curve(fpr, tpr)","0aa34e5e":"from sklearn.metrics import accuracy_score\naccuracy_ls = []\nfor thres in thresholds:\n    y_pred_2 = np.where(y_pred_1>thres,1,0)\n    accuracy_ls.append(accuracy_score(y_test, y_pred_2, normalize=True))\n    \naccuracy_ls = pd.concat([pd.Series(thresholds), pd.Series(accuracy_ls)],\n                        axis=1)\naccuracy_ls.columns = ['thresholds', 'accuracy']\naccuracy_ls.sort_values(by='accuracy', ascending=False, inplace=True)\na=accuracy_ls['thresholds'][30]\n","92522655":"y_pred_2 = np.where(y_pred_1>a,1,0)","50ef35ba":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred_2)","43c66216":"### From this we can clearly infer that there are some coloums which has the NaN value\n#### 1.fill the categorical column  with the mode\n#### 2.fill numerical column with median or mean of the data","a20a1aa8":"### If you got any problem regarding the kernal please leave your comment below.I do my best to answer those question","cacda1d0":"### As it is my first Kernal if you really like it please UPVOTE the same...\n#### Thank you","4d877d00":"#### From this we can infer that ApplicantIncome is right scewed so apply log on the data","93618e2b":"### Got the accuracy of 82% which is preety much good for this kind of problem","858905c7":"### Done with handing missing values.Now lets move on to modifying the column values...","e3a29df6":"#### There is no need of the column which has 'p' value greater than 0.05","7aa5902b":"#### Lets merge LoanAmount and Loan_Amount_Term together and form a new column EMI","faadab27":"#### Scenes the dependents is an variable convert it  into int or float and remove the '+' sign infront of the 3","889d436b":"### Lets remove all the unwanted columns too","128224cc":"### Lets move on to most crucial step i.e feature selection\n#### 1.Chi_squred test(if both columns are            categorical data)\n#### 2.ANOVA test(if one of 2 columns is categorial and other one is numerical)\n#### 3.Co-relation test(if both are numerical)","0131f34f":"## Analysing the data and filling the missing values","e84fe54b":"### Now let's build the model"}}