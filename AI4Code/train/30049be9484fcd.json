{"cell_type":{"e294c78f":"code","4c9f3ebe":"code","0ac531b7":"code","a9770871":"code","bf65fbc0":"code","dfe4da59":"code","bc2666c6":"code","9931be93":"code","61c323d1":"code","62161e57":"code","93c73fc8":"code","d9825ed6":"code","19f5d1a4":"code","01c3705b":"code","a9ad64e0":"code","50b105c6":"code","62c509cd":"code","645448e3":"code","9d132494":"code","3cb6313a":"code","0f2acd2f":"code","1f617af5":"code","6dac21f9":"code","3f09155e":"code","16e65d0e":"code","289575a6":"code","42d5125e":"code","07a37fa2":"code","f8079692":"code","d6156ede":"code","29034821":"markdown","9154a5db":"markdown","9758a7df":"markdown"},"source":{"e294c78f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c9f3ebe":"import io\nimport os\nimport re\nimport shutil\nimport string\nimport tensorflow as tf\n\nfrom datetime import datetime\nfrom tensorflow.keras import Model, Sequential\nfrom tensorflow.keras.layers import Activation, Dense, Embedding, GlobalAveragePooling1D\nfrom tensorflow.keras.layers.experimental.preprocessing import TextVectorization","0ac531b7":"!pip install beautifulsoup4","a9770871":"!pip install newspaper3k","bf65fbc0":"# importing basic libraries\nimport datetime as dt\n\n\n# importing libraries for scraping\n#from twitterscraper import query_tweets\nfrom urllib.request import urlopen\n#from selenium import webdriver\nfrom bs4 import BeautifulSoup\nfrom newspaper import Article\n#import scrapy\n#import praw","dfe4da59":"df = pd.read_csv(\"..\/input\/wikibooks-dataset\/\/italian-wikibooks\/it-books-dataset.csv\")\ndf.head()","bc2666c6":"#Second column, URL, 3th Row\n\ndf.iloc[2,1]","9931be93":"#A new article from TOI \nurl = \"https:\/\/it.wikibooks.org\/wiki\/Architettura_gotica\/Introduzione\"","61c323d1":"#For different language newspaper refer above table \ntoi_article = Article(url, language=\"it\") # it for Italian ","62161e57":"import nltk\nnltk.download('punkt')","93c73fc8":"#To download the article \ntoi_article.download() \n  \n#To parse the article \ntoi_article.parse() \n  \n#To perform natural language processing ie..nlp \ntoi_article.nlp()","d9825ed6":"#To extract title \nprint(\"Article's Title:\") \nprint(toi_article.title) \nprint(\"n\") \n  \n#To extract text \nprint(\"Article's Text:\") \nprint(toi_article.text) \nprint(\"n\") \n  \n#To extract summary \nprint(\"Article's Summary:\") \nprint(toi_article.summary) \nprint(\"n\") \n  \n#To extract keywords \nprint(\"Article's Keywords:\") \nprint(toi_article.keywords)","19f5d1a4":"from gensim.models import Word2Vec\nimport gensim","01c3705b":"corpus=['Il termine gotico si diffuse nel XV secolo e venne utilizzato dagli umanisti italiani per indicare, con un accezione dispregiativa, l architettura a loro contemporanea e quella dei secoli immediatamente precedenti. La parola richiama infatti i Goti, una popolazione barbara, ed era usata per rimarcare il giudizio negativo che veniva dato dell architettura medioevale: questa era infatti ritenuta \"barbara\" e di qualit\u00e0 artistica inferiore rispetto agli esempi provenienti dall antichit\u00e0 classica']","a9ad64e0":"stop_words = ['con',\n 'dalla',\n 'sto',\n 'nel',\n 'per',\n 'aveva',\n 'saremo',\n 'l',\n 'stavamo',\n 'stesso',\n 'gli',\n 'non', \n 'mai',\n 'si',\n 'in',\n 'a',\n 'o',\n 'il',\n 'si', \n 'nel',\n 'e',\n 'dagli',        \n 'con',\n'dei',\n'un',\n'la',\n'i', \n'ed',\n'che',\n'del'\n'di',\n'agli',\n'dall']","50b105c6":"def remove_stop_words(corpus):\n    results = []\n    for text in corpus:\n        tmp = text.split(' ')\n        for stop_word in stop_words:\n            if stop_word in tmp:\n                tmp.remove(stop_word)\n        results.append(\" \".join(tmp))\n        \n    return results","62c509cd":"corpus = remove_stop_words(corpus)","645448e3":"words = []\nfor text in corpus:\n    for word in text.split(' '):\n        words.append(word)\n        \nwords = set(words)","9d132494":"words","3cb6313a":"\"\"\"Data Generation\"\"\"\n\nword2int = {}\n\nfor i,word in enumerate(words):\n    word2int[word] = i\n    \nsentences = []\nfor sentence in corpus:\n    sentences.append(sentence.split())\n    \nWINDOW_SIZE = 2\n\ndata = []\nfor sentence in sentences:\n    for idx, word in enumerate(sentence):\n        for neighbor in sentence[max(idx - WINDOW_SIZE, 0): min(idx + WINDOW_SIZE, len(sentence) + 1)]:\n            if neighbor !=word:\n                data.append([word, neighbor])","0f2acd2f":"import pandas as pd\nfor text in corpus:\n    print(text)\n\ndf = pd.DataFrame(data, columns = ['input', 'label'])","1f617af5":"df.head(10)","6dac21f9":"word2int","3f09155e":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\nx = tf.placeholder(shape=[None, 2], dtype=tf.float32)","16e65d0e":"\"\"\"Define Tensorflow Graph\"\"\"\n\nONE_HOT_DIM = len(words)\n\n# function to convert numbers to one hot vectors\ndef to_one_hot_encoding(data_point_index):\n    one_hot_encoding = np.zeros(ONE_HOT_DIM)\n    one_hot_encoding[data_point_index] = 1\n    return one_hot_encoding\n\nX = [] # input word\nY = [] # target word\n\nfor x, y in zip(df['input'], df['label']):\n    X.append(to_one_hot_encoding(word2int[ x ]))\n    Y.append(to_one_hot_encoding(word2int[ y ]))\n\n# convert them to numpy arrays\nX_train = np.asarray(X)\nY_train = np.asarray(Y)\n\n# making placeholders for X_train and Y_train\nx = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\ny_label = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\n\n# word embedding will be 2 dimension for 2d visualization\nEMBEDDING_DIM = 2 \n\n# hidden layer: which represents word vector eventually\nW1 = tf.Variable(tf.random_normal([ONE_HOT_DIM, EMBEDDING_DIM]))\nb1 = tf.Variable(tf.random_normal([1])) #bias\nhidden_layer = tf.add(tf.matmul(x,W1), b1)\n\n# output layer\nW2 = tf.Variable(tf.random_normal([EMBEDDING_DIM, ONE_HOT_DIM]))\nb2 = tf.Variable(tf.random_normal([1]))\nprediction = tf.nn.softmax(tf.add( tf.matmul(hidden_layer, W2), b2))\n\n# loss function: cross entropy\nloss = tf.reduce_mean(-tf.reduce_sum(y_label * tf.log(prediction), axis=[1]))\n\n# training operation\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(loss)","289575a6":"\"\"\"Training\"\"\"\n\nsess = tf.Session()\ninit = tf.global_variables_initializer()\nsess.run(init) \n\niteration = 20000\nfor i in range(iteration):\n    # input is X_train which is one hot encoded word\n    # label is Y_train which is one hot encoded neighbor word\n    sess.run(train_op, feed_dict={x: X_train, y_label: Y_train})\n    if i % 3000 == 0:\n        print('iteration '+str(i)+' loss is : ', sess.run(loss, feed_dict={x: X_train, y_label: Y_train}))","42d5125e":"# Now the hidden layer (W1 + b1) is actually the word look up table\nvectors = sess.run(W1 + b1)\nprint(vectors)","07a37fa2":"\"\"\"Word Vector in Table\"\"\"\n\nw2v_df = pd.DataFrame(vectors, columns = ['x1', 'x2'])\nw2v_df['word'] = words\nw2v_df = w2v_df[['word', 'x1', 'x2']]\nw2v_df","f8079692":"\"\"\"Word Vector in 2D Chart\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nfor word, x1, x2 in zip(w2v_df['word'], w2v_df['x1'], w2v_df['x2']):\n    ax.annotate(word, (x1,x2 ))\n    \nPADDING = 1.0\nx_axis_min = np.amin(vectors, axis=0)[0] - PADDING\ny_axis_min = np.amin(vectors, axis=0)[1] - PADDING\nx_axis_max = np.amax(vectors, axis=0)[0] + PADDING\ny_axis_max = np.amax(vectors, axis=0)[1] + PADDING\n \nplt.xlim(x_axis_min,x_axis_max)\nplt.ylim(y_axis_min,y_axis_max)\nplt.rcParams[\"figure.figsize\"] = (20,20)\n\nplt.show()","d6156ede":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient, Mar\u00edlia Prata, @mpwolke was here' )","29034821":"#Codes by Anil Govind https:\/\/www.kaggle.com\/anilreddy8989\/stopwords-word2vector","9154a5db":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRuHgyyicCw81mubrVjVHKVZqPzWee1j7r9wg&usqp=CAU)mathematica.stackexchange.com","9758a7df":"![](https:\/\/image.slidesharecdn.com\/automatedproductcategorization-final1-190128154211\/95\/automated-product-categorization-26-638.jpg?cb=1548690442)slideshare.com"}}