{"cell_type":{"51eddf8e":"code","fe09c66b":"code","8c960a85":"code","6809298d":"code","0228197a":"code","94178c33":"code","6c849722":"code","e45528b1":"code","3a5939ca":"code","402c9b67":"markdown","3e2bc575":"markdown","7e5f7406":"markdown","4c64cdc5":"markdown","ec7fe00f":"markdown","b0844317":"markdown","c88a9378":"markdown","a0f51222":"markdown"},"source":{"51eddf8e":"import pandas as pd\nimport numpy as np\nimport math\nimport operator\nimport random","fe09c66b":"data=pd.read_csv(\"..\/input\/iris.csv\")\n\n#Removing the labeling coloum\ntestdata = data.iloc[:,0:4]\n\n#Converting the dataset into a list\ntestset = []\nfor i in range(len(testdata)):\n    testset.append(list(testdata.values[i]))","8c960a85":"def ED(x1, x2): \n    distance = 0\n    for x in range(len(x1)):\n        distance += np.square(x1[x] - x2[x])\n    return np.sqrt(distance)","6809298d":"def distance(testset,centroid):\n    dist1 = []\n    dist2 = []\n    dist3 = []\n    dist = []\n    \n    for i in range(len(testset)):\n        dist1.append(ED(centroid[0],testset[i]))\n        dist2.append(ED(centroid[1],testset[i]))\n        dist3.append(ED(centroid[2],testset[i]))\n    \n    dist.append(dist1)\n    dist.append(dist2)\n    dist.append(dist3)\n    return dist","0228197a":"def group(testset,distance):\n    g1 = []\n    g2 = []\n    g3 = []\n    g = []\n    for i in range(len(testset)):\n        mini = 0\n        for j in range(len(distance)):\n            if distance[mini][i] > distance[j][i]:\n                mini = j\n        if mini == 0:\n            g1.append(1)\n            g2.append(0)\n            g3.append(0)\n        elif mini == 1:\n            g1.append(0)\n            g2.append(1)\n            g3.append(0)\n        else:\n            g1.append(0)\n            g2.append(0)\n            g3.append(1)\n\n    g.append(g1)\n    g.append(g2)\n    g.append(g3)\n    return g","94178c33":"def centroid(testset,group):\n    cen1 = [0,0,0,0]\n    cen2 = [0,0,0,0]\n    cen3 = [0,0,0,0]\n    cen = []\n    \n    one1 = 0\n    one2 = 0\n    one3 = 0\n\n    for i in range(len(testset)):\n        if group[0][i] == 1:\n            one1 += 1\n            for j in range(4):\n                cen1[j] = cen1[j] + testset[i][j]\n        if group[1][i] == 1:\n            one2 += 1\n            for j in range(4):\n                cen2[j] = cen2[j] + testset[i][j]\n        if group[2][i] == 1:\n            one3 += 1\n            for j in range(4):\n                cen3[j] = cen3[j] + testset[i][j]\n\n    for j in range(4):\n        cen1[j] = cen1[j]\/one1\n        cen2[j] = cen2[j]\/one2\n        cen3[j] = cen3[j]\/one3\n    \n    cen.append(cen1)\n    cen.append(cen2)\n    cen.append(cen3)\n    return cen","6c849722":"def accuracy(grup):\n    \n    #devide the final group matrix depending on the label of the original dataset.\n    p1 = grup[0][0:50]\n    p2 = grup[1][50:101]\n    p3 = grup[2][101:152]\n    \n    pred=0\n    \n    for i in range(len(p1)):\n        if p1[i] == 1:\n            pred += 1\n    for i in range(len(p2)):\n        if p2[i] == 1:\n            pred += 1\n    for i in range(len(p3)):\n        if p3[i] == 1:\n            pred += 1\n    pred=(pred\/150)*100\n    \n    return pred","e45528b1":"def kmeans():\n    \n    #assuming 3 clusters\n    k = 3\n    \n    #randomly choose three index\n    clus_index = []\n    random.seed(42)\n    for i in range(k):\n        clus_index.append(random.randint(0,151))\n    \n    #initialize three centroids depending on the indices for the first iteration\n    c1 = testset[clus_index[0]]\n    c2 = testset[clus_index[1]]\n    c3 = testset[clus_index[2]]\n    centrd = []\n    centrd.append(c1)\n    centrd.append(c2)\n    centrd.append(c3)\n    \n    grp1 = []\n    \n    while True:\n        dist = distance(testset,centrd)\n        grp = group(testset,dist)\n        centrd = centroid(testset,grp)\n        \n        #checking that the last iteration group matrix and current iteration group matrix is equal or not\n        if grp == grp1:\n            break\n        else:\n            grp1 = grp\n    pred_acc = accuracy(grp)\n    print(f'Accuracy: {pred_acc}%')","3a5939ca":"kmeans()","402c9b67":"K-MEANS method","3e2bc575":"Eucladian Distance","7e5f7406":"Centroid calculation","4c64cdc5":"Load and reshape data ","ec7fe00f":"Group matrix calculation","b0844317":"Import libraries","c88a9378":"Distance between centroids and every pair of dataset","a0f51222":"Calculation of accuracy"}}