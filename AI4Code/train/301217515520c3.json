{"cell_type":{"6e999656":"code","c720dfdb":"code","8a5516e9":"code","5cd1d4fb":"code","0dde2dcb":"code","52cace0d":"code","510efeb5":"code","78528ab8":"code","4c0d8eb8":"code","8f44a1d3":"code","9c60d1df":"code","d5153f74":"code","8e20de2d":"code","d79f9383":"code","5fa57283":"code","42b68be2":"markdown","67ffba0a":"markdown","5bcff204":"markdown"},"source":{"6e999656":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c720dfdb":"import os\nimport time\nimport pickle\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom collections import namedtuple\nfrom sklearn.metrics import log_loss, roc_auc_score\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torch.nn import CrossEntropyLoss, MSELoss\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n\nimport warnings\nwarnings.filterwarnings (\"ignore\")\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nDATA_PATH = '..\/input\/jane-street-market-prediction\/'\n\nNFOLDS = 5\n\nTRAIN = False\nCACHE_PATH = '..\/input\/mlp012003weights'\n\ndef save_pickle(dic, save_path):\n    with open(save_path, 'wb') as f:\n    # with gzip.open(save_path, 'wb') as f:\n        pickle.dump(dic, f)\n\ndef load_pickle(load_path):\n    with open(load_path, 'rb') as f:\n    # with gzip.open(load_path, 'rb') as f:\n        message_dict = pickle.load(f)\n    return message_dict\n\nfeat_cols = [f'feature_{i}' for i in range(130)]\n\ntarget_cols = ['action', 'action_1', 'action_2', 'action_3', 'action_4']\n\nf_mean = np.load(f'{CACHE_PATH}\/f_mean_online.npy')\n\n\n##### Making features\nall_feat_cols = [col for col in feat_cols]\nall_feat_cols.extend(['cross_41_42_43', 'cross_1_2'])\n\n##### Model&Data fnc\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.batch_norm0 = nn.BatchNorm1d(len(all_feat_cols))\n        self.dropout0 = nn.Dropout(0.2)\n\n        dropout_rate = 0.2\n        hidden_size = 256\n        self.dense1 = nn.Linear(len(all_feat_cols), hidden_size)\n        self.batch_norm1 = nn.BatchNorm1d(hidden_size)\n        self.dropout1 = nn.Dropout(dropout_rate)\n\n        self.dense2 = nn.Linear(hidden_size+len(all_feat_cols), hidden_size)\n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(dropout_rate)\n\n        self.dense3 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(dropout_rate)\n\n        self.dense4 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm4 = nn.BatchNorm1d(hidden_size)\n        self.dropout4 = nn.Dropout(dropout_rate)\n\n        self.dense5 = nn.Linear(hidden_size+hidden_size, len(target_cols))\n\n        self.Relu = nn.ReLU(inplace=True)\n        self.PReLU = nn.PReLU()\n        self.LeakyReLU = nn.LeakyReLU(negative_slope=0.01, inplace=True)\n        # self.GeLU = nn.GELU()\n        self.RReLU = nn.RReLU()\n\n    def forward(self, x):\n        x = self.batch_norm0(x)\n        x = self.dropout0(x)\n\n        x1 = self.dense1(x)\n        x1 = self.batch_norm1(x1)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x1 = self.LeakyReLU(x1)\n        x1 = self.dropout1(x1)\n\n        x = torch.cat([x, x1], 1)\n\n        x2 = self.dense2(x)\n        x2 = self.batch_norm2(x2)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x2 = self.LeakyReLU(x2)\n        x2 = self.dropout2(x2)\n\n        x = torch.cat([x1, x2], 1)\n\n        x3 = self.dense3(x)\n        x3 = self.batch_norm3(x3)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x3 = self.LeakyReLU(x3)\n        x3 = self.dropout3(x3)\n\n        x = torch.cat([x2, x3], 1)\n\n        x4 = self.dense4(x)\n        x4 = self.batch_norm4(x4)\n        # x = F.relu(x)\n        # x = self.PReLU(x)\n        x4 = self.LeakyReLU(x4)\n        x4 = self.dropout4(x4)\n\n        x = torch.cat([x3, x4], 1)\n\n        x = self.dense5(x)\n\n        return x\n\nif True:\n    device = torch.device(\"cuda:0\")\n    \n    model_list = []\n    tmp = np.zeros(len(feat_cols))\n    for _fold in range(NFOLDS):\n        torch.cuda.empty_cache()\n        model = Model()\n        model.to(device)\n        model_weights = f\"{CACHE_PATH}\/online_model{_fold}.pth\"\n\n        model.load_state_dict(torch.load(model_weights, map_location=torch.device('cpu')))\n        model.eval()\n        model_list.append(model)","8a5516e9":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom random import choices\n\nSEED = 1111\n\ntf.random.set_seed(SEED)\nnp.random.seed(SEED)\n\n# train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\nX_train = np.load('..\/input\/lstm-final\/X_train.npy')\ny_train = np.load('..\/input\/lstm-final\/y_train.npy')","5cd1d4fb":"# train = train.query('date > 85').reset_index(drop = True)\n# train = train[train['weight'] != 0]\n\n# train['action'] = ((train['resp'].values) > 0).astype(int)\n# features = [c for c in train.columns if \"feature\" in c]\n# weights = train['weight']\n\n# train.fillna(0, inplace=True)\n# f_mean = np.mean(train[features[1:]].values,axis=1)\n\n# resp_cols = ['resp', 'resp_1', 'resp_2', 'resp_3', 'resp_4']\n\n# X_train = train.loc[:, train.columns.str.contains('feature')]\n# y_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","0dde2dcb":"def create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n\n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"acc\"),\n    )\n\n    return model","52cace0d":"epochs = 200\nbatch_size = 4096\nhidden_units = [160, 160, 160]\ndropout_rates = [0.2, 0.2, 0.2, 0.2]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\n\nmlp_model = create_mlp(130, 5, hidden_units, dropout_rates, label_smoothing, learning_rate)\n# mlp_model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1)\nmlp_model.load_weights('..\/input\/jane-street-market-prediction-clfmlp\/mlp.h5')\n\ntf_models = [mlp_model]","510efeb5":"def create_lstm(lookback, num_columns, num_labels, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate):\n    \n    assert (len(dropout_rates)==1 + len(head_hidden_units) + len(lstm_units)+ len(tail_hidden_units)), \"number of dropout_rates is not equal to number of layers!\"  \n    \n    inp = tf.keras.layers.Input(shape = (lookback,num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    \n    # implement hidden_layers before LSTMs\n    for i in range(len(head_hidden_units)): \n        x = tf.keras.layers.Dense(head_hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1])(x)\n    # implement LSTMs\n    for i in range(len(lstm_units)):\n        x = tf.keras.layers.LSTM(lstm_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1+len(head_hidden_units)])(x) \n        \n    # implement hidden_layers after LSTMs\n    for i in range(len(tail_hidden_units)): \n        x = tf.keras.layers.Dense(tail_hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1+len(head_hidden_units)+len(lstm_units)])(x)    \n        \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation('sigmoid')(x)\n    \n    model = tf.keras.models.Model(inputs = inp, outputs = out)\n    model.compile(optimizer = tf.optimizers.Adam(learning_rate=learning_rate),\n                  loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing), \n                  metrics = tf.keras.metrics.AUC(name = 'acc'), \n                 )\n    \n    return model","78528ab8":"lookback = 10\nbatch_size = 4096\nhead_hidden_units = [256]\nlstm_units = [5]\ntail_hidden_units = [512, 394]\ndropout_rates = [0.10143786981358652, 0.19720339053599725, 0.1123435323 ,0.23148340929571917, 0.2157768967777311]\n\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3","4c0d8eb8":"model = create_lstm(\n    lookback,\n    len(feat_cols),\n    5,\n    head_hidden_units,\n    lstm_units,\n    tail_hidden_units,\n    dropout_rates,\n    label_smoothing,\n    learning_rate\n)","8f44a1d3":"def prepare_dataset(X,y,window_length,batch_size, mode='train'):\n    x_ds = tf.data.Dataset.from_tensor_slices(X) \n    x_ds = x_ds.window(window_length,shift=1,drop_remainder=True)\n    x_ds = x_ds.flat_map(lambda window: window.batch(window_length))\n    \n    if mode=='train':\n        y_ds = tf.data.Dataset.from_tensor_slices(y[window_length-1:])\n        ds = tf.data.Dataset.zip((x_ds, y_ds))\n        ds = ds.shuffle(10000).batch(batch_size)\n    elif mode=='predict':\n        ds = x_ds\n        ds = ds.batch(batch_size)\n\n    ds = ds.prefetch(30)\n    return ds","9c60d1df":"dataset = prepare_dataset(X_train, y_train, lookback, batch_size, mode='train')","d5153f74":"clf = create_lstm(lookback, len(feat_cols), 5, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate)\n# hist = clf.fit(dataset, epochs=10, verbose=1)\nclf.load_weights('..\/input\/jane-street-market-prediction-clfmlp\/lstm.h5')","8e20de2d":"f_mean = np.load('..\/input\/mlp012003weights\/f_mean_online.npy')","d79f9383":"import janestreet\n\nenv = janestreet.make_env()\nenv_iter = env.iter_test()","5fa57283":"if True:\n    for (test_df, pred_df) in tqdm(env_iter):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, feat_cols].values\n            \n            if np.isnan(x_tt.sum()):\n                x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * f_mean\n\n            cross_41_42_43 = x_tt[:, 41] + x_tt[:, 42] + x_tt[:, 43]\n            cross_1_2 = x_tt[:, 1] \/ (x_tt[:, 2] + 1e-5)\n            \n            feature_inp = np.concatenate((\n                x_tt,\n                np.array(cross_41_42_43).reshape(x_tt.shape[0], 1),\n                np.array(cross_1_2).reshape(x_tt.shape[0], 1),\n            ), axis=1)\n\n            # torch_pred\n            torch_pred = np.zeros((1, len(target_cols)))\n            for model in model_list:\n                torch_pred += model(torch.tensor(feature_inp, dtype=torch.float).to(device)).sigmoid().detach().cpu().numpy() \/ NFOLDS\n            torch_pred = np.median(torch_pred)\n            \n            # tf_pred\n            tf_pred = np.median(np.mean([model(x_tt, training = False).numpy() for model in tf_models],axis=0))\n            \n            # lstm_pred\n            X = None\n            data = test_df.loc[:, feat_cols].values\n            if np.isnan(data.sum()):\n                data = np.nan_to_num(data) + np.isnan(data) * f_mean\n\n            if X is None:\n                X = np.concatenate([data for _ in range(lookback)],axis=0)\n            X = np.concatenate([X[1:],data] ,axis=0)\n\n            if test_df['weight'].item() > 0:\n                lstm_pred = 0.\n                lstm_pred = np.median(np.mean([clf(X[np.newaxis,:], training = False).numpy()], axis=0))\n                \n            # avg\n            pred_pr = torch_pred*0.2945 + tf_pred*0.4204 + lstm_pred*0.2851\n            pred_df.action = np.where (pred_pr >= 0.5013, 1, 0).astype (int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","42b68be2":"## Tensorflow MLP","67ffba0a":"## Pytorch","5bcff204":"### Tensorflow LSTM"}}