{"cell_type":{"867f9daa":"code","25e739e8":"code","15f56043":"code","896f3bdb":"code","c9f252cf":"code","b49cfc39":"code","c3b89a37":"code","3bfd05bc":"code","9669a0ad":"code","2ad1099b":"code","2fcfca09":"code","7fbde63e":"code","72482bd0":"code","4fb62146":"code","20e4e549":"markdown","0d9c74ab":"markdown","fd5e1dfb":"markdown","bc7dd27c":"markdown","4d5db03c":"markdown","d5a874d9":"markdown","a079e022":"markdown","d801df99":"markdown","ca81cbf6":"markdown","4ff3d2e1":"markdown","3883d244":"markdown","41f96c42":"markdown","4b7190f0":"markdown","c1629ccb":"markdown","4231c443":"markdown","47fdf131":"markdown","1fd876d7":"markdown"},"source":{"867f9daa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25e739e8":"df = pd.read_csv('\/kaggle\/input\/gender-classification\/Transformed Data Set - Sheet1.csv')\ndf.head()","15f56043":"df.columns = ['color', 'music','beverage','softdrink','label']\ndf.columns","896f3bdb":"df.count()","c9f252cf":"df.isnull().sum()","b49cfc39":"from sklearn.preprocessing import LabelEncoder\nle_color = LabelEncoder()\ndata = df\ndata['color'] = le_color.fit_transform(df.color.values)\nle_music = LabelEncoder()\ndata['music'] = le_music.fit_transform(df.music.values)\nle_beverage = LabelEncoder()\ndata['beverage'] = le_beverage.fit_transform(df.beverage.values)\nle_softdrink = LabelEncoder()\ndata['softdrink'] = le_softdrink.fit_transform(df.softdrink.values)\nle_label = LabelEncoder()\ndata['label'] = le_label.fit_transform(df.label.values)\ndata.head()","c3b89a37":"import seaborn as sns \nimport matplotlib.pyplot as plt\n\nsns.displot(data)\n\nplt.show()","3bfd05bc":"data['label'].value_counts()","9669a0ad":"from sklearn.model_selection import train_test_split\nY = data['label']\nX = data.drop(['label'],axis=1)\n#X.head()\nX_train, X_test,Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=42) # Split 20% test data","2ad1099b":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(random_state=42)\nmodel.fit(X_train, Y_train)","2fcfca09":"from sklearn.metrics import classification_report, confusion_matrix\np_train_pred = model.predict_proba(X_train)\ny_train_pred = model.predict(X_train)\n\nconf_m_train = confusion_matrix(Y_train, y_train_pred)\nreport_train = classification_report(Y_train, y_train_pred)\nprint(report_train)","7fbde63e":"p_test_pred = model.predict_proba(X_test)\ny_test_pred = model.predict(X_test)\n\nconf_m_train = confusion_matrix(Y_test, y_test_pred)\nreport_train = classification_report(Y_test, y_test_pred)\nprint(report_train)","72482bd0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=5,random_state=42)\nclf.fit(X_train, Y_train)\n\n\ny_pred=clf.predict(X_train)\nprint(\"Accuracy:\",metrics.accuracy_score(Y_train, y_pred))","4fb62146":"y_pred=clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))","20e4e549":"## Split Data into Train and Test","0d9c74ab":"## Try Random Forest Classifier ","fd5e1dfb":"## Rename Columns ","bc7dd27c":"**No missing Values**","4d5db03c":"**Balanced Data**","d5a874d9":"**Only 6 rows**","a079e022":"## Check Missing Values","d801df99":"## Evaluate on Test Data","ca81cbf6":"## Check on Training Data ","4ff3d2e1":"## Build Model ","3883d244":"# Notes\n1. The data is too small. Only 66 instances. \n2. The data is balance and no need many preprocessing steps.","41f96c42":"## Inspect the Data","4b7190f0":"## Read The Data","c1629ccb":"### Try RF on Test Data","4231c443":"### Logistic Regression","47fdf131":"## Encode the Data","1fd876d7":"### Features :\n- Fav Color\n- Fav Music genre\n- Fev Beverage\n- Fav Soft\n- Gender (label)"}}