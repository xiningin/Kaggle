{"cell_type":{"83b55979":"code","d77c17bd":"code","97283512":"code","0061dfb1":"code","b2360e55":"code","c258f21b":"code","530d95e3":"code","7f5063c2":"code","2e1d9eac":"code","c00bc8c5":"code","9a7f35bf":"code","789ceb44":"code","05161cad":"code","feef7794":"code","f30a64c0":"code","581683dd":"markdown","1ae3022f":"markdown","2abd776d":"markdown","2a1a3428":"markdown","f4655cbe":"markdown","24266f3d":"markdown","860e4d6b":"markdown"},"source":{"83b55979":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly_express as px\n\n# plt.style.use('default')\ncolor_pallete = ['#fc5185', '#3fc1c9', '#364f6b']\nsns.set_palette(color_pallete)\nsns.set_style(\"white\")\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score","d77c17bd":"df = pd.read_csv('..\/input\/Iris.csv')\ndf.head()","97283512":"df.info()","0061dfb1":"df.describe()","b2360e55":"df['Species'].value_counts().plot(kind='bar')","c258f21b":"df.drop(['Id'], inplace=True, axis=1)","530d95e3":"plt.figure(figsize=(8, 8))\nax = sns.pairplot(df, hue='Species')\nplt.show()","7f5063c2":"px.scatter_3d(df, x=\"PetalLengthCm\", y=\"PetalWidthCm\", z=\"SepalLengthCm\", size=\"SepalWidthCm\", \n              color=\"Species\", color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"violet\", \"Coderre\":\"pink\"})","2e1d9eac":"px.scatter_3d(df, x=\"PetalLengthCm\", y=\"PetalWidthCm\", z=\"SepalWidthCm\", size=\"SepalLengthCm\", \n              color=\"Species\", color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"violet\", \"Coderre\":\"pink\"})","c00bc8c5":"plt.figure() \nsns.heatmap(df.corr(),annot=True)\nplt.show()","9a7f35bf":"X = df.drop(['Species'], axis=1)\ny = df['Species']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","789ceb44":"from sklearn import svm\n\nsvc = svm.SVC()\nsvc.fit(X_train,y_train)\n\npred = svc.predict(X_test) \naccuracy_score(pred, y_test)","05161cad":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\n\npred = knn.predict(X_test) \nprint(accuracy_score(pred, y_test))","feef7794":"from sklearn.naive_bayes import GaussianNB\n\nnbc = GaussianNB()\nnbc.fit(X_train,y_train)\n\npred = nbc.predict(X_test) \nprint(accuracy_score(pred, y_test))","f30a64c0":"from sklearn.linear_model import LogisticRegression\n\nlrc = LogisticRegression()\nlrc.fit(X_train,y_train)\n\npred = lrc.predict(X_test) \nprint(accuracy_score(pred, y_test))","581683dd":"# Train Test Split","1ae3022f":"# Importing Library","2abd776d":"# 3D Scatter Plot using Plotly Express","2a1a3428":"# Correlational Matrix","f4655cbe":"# Iris flowers\n<img src=\"https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Machine+Learning+R\/iris-machinelearning.png\">","24266f3d":"# Predicting using Different Models","860e4d6b":"# Library"}}