{"cell_type":{"9e70c148":"code","ec2b4090":"code","76234be6":"code","db4fe81f":"code","e1579bd9":"code","34b12b5c":"code","6111c5d4":"code","006b347d":"code","bdd0fd5a":"code","b1b63be5":"code","bb429aee":"code","4429c300":"code","dd3c3645":"code","2391511f":"code","c3692b31":"code","a521a207":"code","4d9a7d6f":"code","62b73935":"code","5dafa46e":"code","9debf35a":"code","6879efb8":"code","abe656ed":"code","dd20b3e7":"code","11e3ae82":"code","3617986c":"code","8cbab956":"code","7a921402":"code","ec51ba2d":"code","2ec2f064":"code","21dc212e":"markdown","39a80b96":"markdown","dfd67391":"markdown","da422689":"markdown","15c6b3ae":"markdown","94fe6af5":"markdown","3059b7da":"markdown","500439f7":"markdown","76d89671":"markdown","8a7d4299":"markdown","e914a050":"markdown"},"source":{"9e70c148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fastai.text import * \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ec2b4090":"base_path=\"..\/output\"\ntext_columns=['text']\nlabel_columns=['target']\nBATCH_SIZE=128","76234be6":"train= pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest= pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntrain.head()","db4fe81f":"tweets = pd.concat([train[text_columns], test[text_columns]])\nprint(tweets.shape)","e1579bd9":"data_lm = (TextList.from_df(tweets)\n           #Inputs: all the text files in path\n            .split_by_rand_pct(0.15)\n           #We randomly split and keep 10% for validation\n            .label_for_lm()           \n           #We want to do a language model so we label accordingly\n            .databunch(bs=BATCH_SIZE))\ndata_lm.save('tmp_lm')","34b12b5c":"data_lm.show_batch()","6111c5d4":"learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.5)","006b347d":"print('Model Summary:')\nprint(learn.layer_groups)","bdd0fd5a":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","b1b63be5":"learn.fit_one_cycle(10, 1e-2)\nlearn.save('lm_fit_head')","bb429aee":"learn.load('lm_fit_head')\nlearn.unfreeze()\nlearn.fit_one_cycle(10, 1e-3)","4429c300":"learn.save_encoder('ft_enc')","dd3c3645":"data_clas = (TextList.from_df(train, cols=text_columns, vocab=data_lm.vocab)\n             .split_by_rand_pct(0.15)\n             .label_from_df('target')\n             .add_test(test[text_columns])\n             .databunch(bs=BATCH_SIZE))\n\ndata_clas.save('tmp_clas')","2391511f":"learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.5)","c3692b31":"learn.load_encoder('ft_enc')","a521a207":"learn.freeze_to(-1)\nlearn.summary()","4d9a7d6f":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","62b73935":"learn.fit_one_cycle(10, 1e-3)","5dafa46e":"learn.save('stage1')","9debf35a":"learn.load('stage1')\nlearn.freeze_to(-2)\nlearn.fit_one_cycle(5, slice(5e-3\/2., 5e-3))\nlearn.save('stage2')","6879efb8":"learn.load('stage2')\nlearn.unfreeze()\nlearn.fit_one_cycle(5, slice(2e-3\/100, 2e-3))","abe656ed":"learn.export()\nlearn.save('final')","dd20b3e7":"from fastai.vision import ClassificationInterpretation\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(6,6), dpi=60)","11e3ae82":"interp = TextClassificationInterpretation.from_learner(learn)\ninterp.show_top_losses(10)","3617986c":"learn.predict(test.loc[0,'text'])","8cbab956":"def get_preds_as_nparray(ds_type) -> np.ndarray:\n    \"\"\"\n    the get_preds method does not yield the elements in order by default\n    we borrow the code from the RNNLearner to resort the elements into their correct order\n    \"\"\"\n    preds = learn.get_preds(ds_type)[0].detach().cpu().numpy()\n    sampler = [i for i in learn.data.dl(ds_type).sampler]\n    reverse_sampler = np.argsort(sampler)\n    return preds[reverse_sampler, :]","7a921402":"test_preds = get_preds_as_nparray(DatasetType.Test)","ec51ba2d":"sample_submission = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\nsample_submission['target'] = np.argmax(test_preds, axis=1)\nsample_submission.to_csv(\"predictions.csv\", index=False, header=True)","2ec2f064":"sample_submission['target'].value_counts()","21dc212e":"## Loading the data","39a80b96":"Now that we have a language model trained, we can create a text classifier on it.","dfd67391":"Lets train our language model. First, we call lr_find to analyze and find an optimal learning rate for our problem, then we fit or train the model for a few epochs. Finally we unfreeze the model and runs it for a few more epochs. \nSo we have a encoder trained and ready to be used for our classifier and it is recorded on disk.","da422689":"Now we can create a language model based on the architecture AWD_LSTM (a detailed explanation can be found on the fastai website https:\/\/docs.fast.ai\/text.models.html#AWD_LSTM):","15c6b3ae":"## Predicting and creating a submission file\nNow we can predict on the test set and create the submission file requiered by the competition:","94fe6af5":"## Some analysis and interpretation of the results\nThere are some functions to explore the behaviour of our model. For example we can explore the confusion matrix and show the top losses of our classifier.","3059b7da":"## Building and training a text classifier","500439f7":"## Train a text language model\nCreate a databunch for a text language model to get the data ready for training a language model. The text will be processed, tokenized and numericalized by a default processor, if you want to apply a customized tokenizer or vocab, you just need to create them.","76d89671":"# An introduction to Fastai for NLP Text Classification\n\nThis notebook will describe the basic steps to create a text classifier with the library Fastai. It is very simple and is based on the example\/overview provided in the website of fastai. Some modifications have been included, but they are minor changes. I am not trying to get the best model, but with this guide you can improve the model performance applying some improvement (using some embeddings, optimizing the model, trying pretrained models,...) \n","8a7d4299":"Next step, to load the encoder previously trained (the language model).","e914a050":"Now, the training cycle is repeated: lr_find, freeze except last layer,..., unfreeze the model and saving the final trained model."}}