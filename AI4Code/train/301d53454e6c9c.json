{"cell_type":{"3b142142":"code","dde69455":"code","04f26bc4":"code","0321a4d7":"code","e54c04f4":"code","3c967092":"code","be91bc65":"code","32c4eccf":"code","a5837d75":"code","bca25fb6":"code","b3de567b":"code","f64dc369":"code","5407057c":"code","5e91e60d":"code","74ed99f4":"code","f711be62":"code","a94743a8":"code","c518b83a":"code","c9f597fa":"code","622cebb7":"code","8bd22beb":"code","d994566c":"code","02f1adec":"code","c08b86b0":"code","19348033":"code","1f0bfca4":"code","6af215dd":"markdown","560800b9":"markdown","2b609d63":"markdown","240ae164":"markdown","48925972":"markdown","d1981613":"markdown","5e4ae819":"markdown","b7bbc6ae":"markdown","38d0cfa0":"markdown","c84451c9":"markdown","c42c5ab5":"markdown","9808cb93":"markdown","f77ccf61":"markdown","a840c72f":"markdown","5b19c137":"markdown","c884a8db":"markdown","65ba0533":"markdown","0ffad172":"markdown","61a2033b":"markdown","b5f15d9b":"markdown","06aa4e73":"markdown","dee79a41":"markdown"},"source":{"3b142142":"import os\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow_addons as tfa\nfrom keras.utils import to_categorical, Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.applications import ResNet50\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","dde69455":"path = '\/kaggle\/input\/plant-pathology-2021-fgvc8\/'\nos.listdir(path)","04f26bc4":"train_data = pd.read_csv(path+'train.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","0321a4d7":"def plot_examples(label='healthy'):\n    fig, axs = plt.subplots(1, 5, figsize=(25, 12))\n    fig.subplots_adjust(hspace = .2, wspace=.2)\n    axs = axs.ravel()\n    for i in range(5):\n        idx = train_data[train_data['labels']==label].index[i]\n        img = cv2.imread(path+'train_images\/'+train_data.loc[idx, 'image'])\n        axs[i].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n        axs[i].set_title(label)\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])","e54c04f4":"print('Number of train samples:', len(train_data))\nprint('Number of train images:', len(os.listdir(path+'train_images\/')))","3c967092":"train_data.head()","be91bc65":"train_data['labels'].value_counts().plot.bar()","32c4eccf":"labels = list(train_data['labels'].value_counts().keys())\nfor label in labels:\n    plot_examples(label=label)","a5837d75":"labels_dict = dict(zip(labels, range(12)))\ntrain_data = train_data.replace({\"labels\": labels_dict})","bca25fb6":"train_data, val_data = train_test_split(train_data, test_size=0.3)\ntrain_data.index = range(len(train_data.index))\nval_data.index = range(len(val_data.index))","b3de567b":"print('Number of train samples', len(train_data))\nprint('Number of val samples', len(val_data))","f64dc369":"q_size = 128\nimg_channel = 3\nnum_classes = 12\nbatch_size = 64\nepochs = 2","5407057c":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, labels, batch_size, img_size, img_channel, num_classes):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_channel = img_channel\n        self.num_classes = num_classes\n        self.indexes = np.arange(len(self.list_IDs))\n\n        \n    def __len__(self):\n        len_ = int(len(self.list_IDs)\/self.batch_size)\n        if len_*self.batch_size < len(self.list_IDs):\n            len_ += 1\n        return len_\n    \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n            \n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.zeros((self.batch_size, self.img_size, self.img_size, self.img_channel))\n        y = np.zeros((self.batch_size, self.num_classes), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            img = cv2.imread(self.path+ID)\n            img = cv2.resize(img, (self.img_size, self.img_size))\n            X[i, ] = img\/255\n            y[i, ] = to_categorical(self.labels[i], num_classes=self.num_classes)\n        return X, y","5e91e60d":"number_samples = 500\n#train_data = train_data[0:number_samples]\n#val_data = val_data[0:number_samples]","74ed99f4":"train_generator = DataGenerator(path+'train_images\/', train_data['image'], train_data['labels'],\n                                batch_size, q_size, img_channel, num_classes)\nval_generator = DataGenerator(path+'train_images\/',val_data['image'], val_data['labels'],\n                                batch_size, q_size, img_channel, num_classes)","f711be62":"class_weight = dict(zip(train_data['labels'].value_counts().keys(),\n                        train_data['labels'].value_counts().values\/len(train_data)))","a94743a8":"metrics = [tfa.metrics.F1Score(name = 'f1_score', num_classes=num_classes)]","c518b83a":"weights='..\/input\/models\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nconv_base = ResNet50(weights=weights,\n                     include_top=False,\n                     input_shape=(q_size, q_size, img_channel))\nconv_base.trainable = True","c9f597fa":"model = Sequential()\nmodel.add(conv_base)\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(num_classes, activation='sigmoid'))\n\nmodel.compile(optimizer = RMSprop(lr=1e-4),\n              loss='binary_crossentropy',\n              metrics=metrics)\n\nmodel.summary()","622cebb7":"history = model.fit_generator(generator=train_generator,\n                              validation_data=val_generator,\n                              epochs = epochs,\n                              class_weight = class_weight)","8bd22beb":"fig, axs = plt.subplots(1, 2, figsize=(20, 6))\nfig.subplots_adjust(hspace = .2, wspace=.2)\naxs = axs.ravel()\nloss = history.history['loss']\nloss_val = history.history['val_loss']\nepochs = range(1, len(loss)+1)\naxs[0].plot(epochs, loss, 'bo', label='loss_train')\naxs[0].plot(epochs, loss_val, 'ro', label='loss_val')\naxs[0].set_title('Value of the loss function')\naxs[0].set_xlabel('epochs')\naxs[0].set_ylabel('value of the loss function')\naxs[0].legend()\naxs[0].grid()\nacc = history.history['f1_score']\nacc_val = history.history['val_f1_score']\naxs[1].plot(epochs, acc, 'bo', label='accuracy_train')\naxs[1].plot(epochs, acc_val, 'ro', label='accuracy_val')\naxs[1].set_title('Accuracy')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Value of accuracy')\n#axs[1].legend()\naxs[1].grid()\nplt.show()","d994566c":"test_data = pd.DataFrame()\nfiles = os.listdir(path+'test_images')\ntest_data['image'] = files\ntest_data['labels'] = 0\n\ntest_generator = DataGenerator(path+'test_images\/', test_data['image'], test_data['labels'],\n                                batch_size, q_size, img_channel, num_classes)","02f1adec":"predict = model.predict_generator(test_generator, verbose=1)","c08b86b0":"samp_subm.loc[0:len(files)-1, 'labels'] = predict.argmax(axis=1)[0:len(files)]\ndict_rename = {v : k for k, v in labels_dict.items()}\nsamp_subm = samp_subm.replace({\"labels\": dict_rename})","19348033":"samp_subm.to_csv('submission.csv', index=False)","1f0bfca4":"samp_subm","6af215dd":"# Class Weights\nBased on the distribution of the lables we define the class weights.","560800b9":"Label Encoding","2b609d63":"# Functions","240ae164":"Plot Examples","48925972":"# Define Metric\nTo make the score of the leaderboard the [f1 score](https:\/\/www.tensorflow.org\/addons\/api_docs\/python\/tfa\/metrics\/F1Score) is taken.","d1981613":"# Overview","5e4ae819":"# Predict Test Data","b7bbc6ae":"# Libraries","38d0cfa0":"# Train On Subset\nTo test the algorithms we work on a small subset.","c84451c9":"# Define Model","c42c5ab5":"# Export","9808cb93":"# Define Train, Val And Test Data","f77ccf61":"# Intro\nWelcome to the [Plant Pathology 2021 - FGVC8](https:\/\/www.kaggle.com\/c\/plant-pathology-2021-fgvc8\/data) compedition.\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25563\/logos\/header.png)\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","a840c72f":"Split Train Data","5b19c137":"# Load Data","c884a8db":"# Load Pretrained Model","65ba0533":"Data Generator Class","0ffad172":"# Path","61a2033b":"# Prepare Data For Data Generator","b5f15d9b":"# Data Generator\nParameter","06aa4e73":"# Analyse Training","dee79a41":"# EDA\nLabels"}}