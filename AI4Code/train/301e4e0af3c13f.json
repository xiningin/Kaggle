{"cell_type":{"501dad21":"code","38944c07":"code","c5193f25":"code","243d424e":"code","8650657a":"code","33813943":"code","f0fa1bd8":"code","31d04604":"code","aa33a2cc":"code","f749f3f0":"code","e28a2756":"code","e9b3c09f":"code","b6516a8c":"code","cad0cf21":"code","9ad7e62b":"code","7032b4ea":"code","317af478":"code","05aaec58":"code","3647401a":"code","65ff0146":"code","852e644b":"code","2f2a2121":"code","bff7e99b":"code","17db7836":"code","203c359e":"code","a69674cd":"code","73fc01a0":"code","67d3f771":"code","7c423cb6":"code","eebc8026":"code","3dfebea8":"code","f3fde975":"code","6eb3a778":"code","f0519027":"code","68e54afe":"code","9e12c29b":"code","561beb98":"code","758edac9":"code","29b707fe":"code","d390a4c2":"markdown"},"source":{"501dad21":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","38944c07":"import pandas as pd","c5193f25":"winequality = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","243d424e":"winequality.head()","8650657a":"winequality.info()","33813943":"winequality.describe()","f0fa1bd8":"%matplotlib\nimport matplotlib.pyplot as plt\nwinequality.hist(bins=50, figsize=(20,15))","31d04604":"from sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(winequality, test_size=0.2, random_state=42, stratify=winequality[\"quality\"])","aa33a2cc":"train_set","f749f3f0":"test_set","e28a2756":"corr_matrix = winequality.corr()","e9b3c09f":"corr_matrix[\"quality\"].sort_values(ascending=False)","b6516a8c":"wineql = train_set.drop(\"quality\", axis=1)\nwineql_labels = train_set[\"quality\"].copy()","cad0cf21":"from sklearn.preprocessing import StandardScaler","9ad7e62b":"scaler = StandardScaler()","7032b4ea":"wineql_prepared = scaler.fit_transform(wineql)","317af478":"wineql_prepared","05aaec58":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(wineql_prepared, wineql_labels)","3647401a":" from sklearn.metrics import mean_squared_error","65ff0146":"wineql_predictions = lin_reg.predict(wineql_prepared)","852e644b":"lin_mse = mean_squared_error(wineql_labels, wineql_predictions)","2f2a2121":"import numpy as np","bff7e99b":"lin_rmse = np.sqrt(lin_mse)","17db7836":"lin_rmse","203c359e":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(wineql_prepared, wineql_labels)","a69674cd":"wineql_predictions = tree_reg.predict(wineql_prepared)","73fc01a0":"lin_mse = mean_squared_error(wineql_labels, wineql_predictions)","67d3f771":"import numpy as np","7c423cb6":"lin_rmse = np.sqrt(lin_mse)","eebc8026":"lin_rmse","3dfebea8":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(tree_reg, wineql_prepared, wineql_labels,\nscoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)","f3fde975":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n    \ndisplay_scores(tree_rmse_scores)","6eb3a778":"from sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor()\nforest_reg.fit(wineql_prepared, wineql_labels)","f0519027":"scores = cross_val_score(forest_reg, wineql_prepared, wineql_labels,\nscoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-scores)","68e54afe":"display_scores(forest_rmse_scores)","9e12c29b":"from sklearn.model_selection import GridSearchCV\nparam_grid = [\n{'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n{'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n]\nforest_reg = RandomForestRegressor()\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring='neg_mean_squared_error', return_train_score=True)\ngrid_search.fit(wineql_prepared, wineql_labels)","561beb98":"grid_search.best_estimator_","758edac9":"final_model = grid_search.best_estimator_\nX_test = test_set.drop(\"quality\", axis=1)\ny_test = test_set[\"quality\"].copy()\n\nX_test_prepared = scaler.fit_transform(X_test)\n\nfinal_predictions = final_model.predict(X_test_prepared)\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)","29b707fe":"final_rmse","d390a4c2":"### Regression using Linear Regression, Decision Tree, Random Forest\n#### Random forest gave minimum rmse\n#### Random forest was fine tuned using Grid Search"}}