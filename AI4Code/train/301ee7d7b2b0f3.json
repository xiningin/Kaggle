{"cell_type":{"014d09c5":"code","158aad9e":"code","a85313aa":"code","27cc1ead":"code","36d293ac":"code","53d752a5":"code","d70369e2":"code","2b08885e":"code","5a166431":"code","c22ac38a":"code","010a8442":"code","e35fd3ba":"code","2bb87c19":"code","1994d75e":"code","47361a5e":"code","1d826df8":"code","ce51f11a":"code","54ceb59c":"code","8e7685ca":"code","40fa6069":"markdown","c3ced1c2":"markdown","0f390fb8":"markdown","5e14257f":"markdown","1b77310e":"markdown","696dbfc4":"markdown","7b4d0c44":"markdown","a853ccbf":"markdown","11fda4d0":"markdown","5b17c23b":"markdown","8ddfcc35":"markdown","b977a602":"markdown","cceb2e9d":"markdown","a7bc80b7":"markdown","a7218786":"markdown","01c97057":"markdown","1b854bea":"markdown","6c227fd2":"markdown","d09fab72":"markdown","4c91f3cf":"markdown","b3ff48f0":"markdown","e3b212e4":"markdown","7112c870":"markdown","6b2290f7":"markdown","0c6dd091":"markdown","d00a2f80":"markdown","06308aeb":"markdown","08f9af15":"markdown","ad29910a":"markdown","76833815":"markdown","06e39cb4":"markdown","fcb19f13":"markdown","a263a678":"markdown","d3de4b4d":"markdown","0874d779":"markdown","af2888ed":"markdown","a125146d":"markdown","0f5a02e1":"markdown","df80484d":"markdown","59c61c51":"markdown","b9f057a5":"markdown","ee2c9eff":"markdown","1cbb5ca7":"markdown","0953204e":"markdown","e71c60a1":"markdown","4cbc7741":"markdown","20312e31":"markdown","86b8dba5":"markdown"},"source":{"014d09c5":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom sklearn import preprocessing\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\n\n%matplotlib inline","158aad9e":"data_path = '..\/input\/seoul-bike-rental-ai-pro-iti'\ntrain_df = pd.read_csv(os.path.join(data_path, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(data_path, 'test.csv'))\ntrain_df.head()","a85313aa":"train_df.shape","27cc1ead":"train_df.dtypes","36d293ac":"train_df.info()","53d752a5":"train_df.describe()","d70369e2":"train_df.isna().sum()","2b08885e":"train_df[train_df.duplicated()].count()","5a166431":"visualization_df = train_df.drop(['ID'], axis=1)\nvisualization_df['Date'] = pd.to_datetime(visualization_df['Date'])\nvisualization_df = visualization_df.select_dtypes(exclude='object')\nvisualization_df['Week Days'] = visualization_df['Date'].apply(lambda x:x.dayofweek)\nvisualization_df['month']= visualization_df['Date'].apply(lambda x:x.month)\nvisualization_df.head()","c22ac38a":"corr = visualization_df.corr()\ncorr_mask = np.ones_like(corr)\ncorr_mask[np.tril_indices_from(corr_mask)] = False\n\nplt.subplots(figsize=(10,10))\nsns.heatmap(corr, mask=corr_mask, \n            cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, annot=True)\nplt.show()","010a8442":"r = 4\nc = 3\nfig, axs = plt.subplots(r, c, figsize=(20, 20))\n\ni = 0\nj = 0\nfor column in visualization_df.drop(['Date'], axis=1).columns:\n    sns.distplot(visualization_df[column], rug=True, bins=30, kde=True, hist=True, color='b', ax=axs[i, j])\n    if(j == c-1):\n        j = 0\n        i += 1\n    else:\n        j += 1","e35fd3ba":"i = 1\nplt.figure(figsize = [15, 15], tight_layout = 5)\nfor column in visualization_df.drop(['y'], axis=1).columns:\n    plt.subplot(5, 3, i)\n    plt.scatter(data = visualization_df, x = column, y = 'y', c='c', edgecolors='black')\n    plt.xlabel(column)\n    plt.ylabel('Bikes Count')\n    plt.title(column + ' VS ' + 'Bikes Count')\n    i += 1\nplt.show()","2bb87c19":"cols = visualization_df[[\n        'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)'\n        , 'Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)'\n        , 'Week Days'\n    ]].columns\n\nfor i in range(len(cols)):\n    plt.figure(figsize = [15, 10],  tight_layout = 5)\n    for j in range(i+1, len(cols)):\n        plt.subplot(3, 3, j+1)\n        plt.scatter(data = visualization_df, x = cols[i], y = cols[j], c = 'y', \n                    cmap = sns.diverging_palette(220, 10, as_cmap=True), marker='^')\n        plt.colorbar(label = 'Bikes Count')\n        plt.xlabel(cols[i])\n        plt.ylabel(cols[j])\n        plt.title(cols[i] + ' VS ' + cols[j])\nplt.show()","1994d75e":"# %matplotlib qt\n\nfig = plt.figure(figsize = (16, 9))\nax = plt.axes(projection =\"3d\")\n\nax.grid(b = True, color ='grey',\n        linestyle ='-.', linewidth = 0.3,\n        alpha = 0.2)\n\nmy_cmap = plt.get_cmap('hsv')\n \nsctt = ax.scatter3D(train_df['Hour'], train_df['Temperature(\ufffdC)'], train_df['y'],\n                    alpha = 0.8,\n                    c = (train_df['Hour']+ train_df['Temperature(\ufffdC)']+ train_df['y']),\n                    cmap = my_cmap,\n                    marker ='^')\n \nplt.title(\"3D Scatter Plot (Hour VS Temperature VS Bikes Count)\")\nax.set_xlabel('Hour', fontweight ='bold')\nax.set_ylabel('Temperature', fontweight ='bold')\nax.set_zlabel('Bikes Count', fontweight ='bold')\nfig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5)\nplt.show()","47361a5e":"visualization_df.plot(kind='box', title='Box Plot', sharex=False, sharey=False, figsize=(18,7), subplots=True, layout=(2, 6))","1d826df8":"i = 1\nprint(train_df['Hour'])\nplt.figure(figsize = [20, 10], tight_layout = 5)\nfor column in train_df[['Seasons', 'Holiday', 'Functioning Day', 'Hour']].columns:\n    plt.subplot(3, 2, i)\n    sns.boxplot(data=train_df, x=column, y='y')\n    plt.xlabel(column)\n    plt.ylabel('Bikes Count')\n    plt.title(column + ' VS ' + 'Bikes Count')\n    i += 1\n\nplt.subplot(3, 2, i)\nsns.boxplot(data=visualization_df, x='Week Days', y='y')\nplt.xlabel('Week Days')\nplt.ylabel('Bikes Count')\nplt.title('Week Days VS ' + 'Bikes Count')","ce51f11a":"# %matplotlib inline\n# %matplotlib qt\n\nvisualization_df['Season'] = train_df['Seasons']\nfor column in visualization_df[['Hour', 'Week Days']].columns:    \n    sns.catplot(data=visualization_df, x=column, y='y', hue='Season', kind='swarm', height=8, aspect=2.2)\n    plt.xlabel(column)\n    plt.ylabel('Bikes Count')\n    plt.title(column + ' VS ' + 'Bikes Count With Color Coding For Season')","54ceb59c":"def preprocess(df):\n    df['Holiday'].replace({\"Holiday\": 0, \"No Holiday\": 1}, inplace=True)\n    df['Functioning Day'].replace({\"Yes\": 0, \"No\": 1}, inplace=True)\n    df['Seasons'].replace({\"Autumn\": 1, \"Spring\": 2, \"Summer\": 3, \"Winter\": 4}, inplace=True)\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['year']= df['Date'].apply(lambda x:x.year)\n    df['month']= df['Date'].apply(lambda x:x.month)\n    df['Week Days'] = df['Date'].apply(lambda x:x.dayofweek)\n    df.drop(\"Date\",inplace=True,axis=1)\n        \n    # Normalization\n    min_max_scaler = preprocessing.MinMaxScaler()\n    x_scaled = min_max_scaler.fit_transform(df)\n    df = pd.DataFrame(x_scaled, columns=df.columns)\n    \n    return df","8e7685ca":"train_df = preprocess(train_df)\ntest_df = preprocess(test_df)\n\ntrain_df.describe()","40fa6069":"#### 2.2.2 Histogram With Rug Plot","c3ced1c2":"> In the above distribution plots, We'll notice that:\n>- Most of features have `continuous` distribution. EX: `Wind Speed, Temperature and Visibility`\n>- Just few that have `discrete(Categorical)` distribution. EX: `Week Days and Hour`\n>- There are some features need to be rescaled or normalized. EX: `Snowfall, Rainfall and Visibility`","0f390fb8":"#### Prepare data for visualization by: \n - Extracting `month` value and `day of week` from `Date` column to get more useful features than just `Date`.\n - Selecting non-object columns (Dropping String Valued Columns)","5e14257f":"## <a name=\"data_analysis\"><\/a> 2.1. Data Analysis And Data Quality Assessment\n> [Four metrics of data quality:](https:\/\/www.precisely.com\/blog\/data-quality\/does-your-data-measure-up-assess-data-quality)\n>- Completeness relates to whether all required information is present in the dataset.\n>- Validity: Data is characterized as valid if it matches the rules specified for it. Those rules typically include specifications such as format (number of digits, etc.), allowable types (integer, floating-point, string, etc.), and range (minimum and maximum values).\n>- Timeliness relates to whether the information is up to date for the intended use. In other words, is the correct information available when needed?\n>- Consistency: A data item is consistent if all representations of that item across data stores match.","1b77310e":"#### 2.1.6 Checking Duplicates","696dbfc4":"> **In the above scatter plots, We'll notice that:**\n>- In pairing features plots, We'll find that Bikes Count was added as a third dimention to distinguish between each joint distribution and its target label values:\n    - Where `Temperature <= 0` AND `Solar Radiation <= 0.0`, Bikes Count is `Minimum`\n    - Where `Rainfall > 0` AND `Snowfall > 0`, Bikes Count is `Minimum`\n    - Where `15 <= Temperature <= 30` AND `0.0 <= Solar Radiation <= 1.0`, Bikes Count is `Maximum`\n    - Where `15 <= Temperature <= 30` AND `40 <= Humidity <= 60`, Bikes Count is `Maximum`\n    - Where `15 <= Temperature <= 30` AND `40 <= Humidity <= 60`, Bikes Count is `Maximum`\n    - Where `2 <= Wind Speed < 4` AND `1000 <= Visibility <= 1250`, Bikes Count is `Maximum`\n>- Some of features pairs have **`Non-Linear`** relation:\n    - `y (Target Label)` and `Temperature`\n    - `y (Target Label)` and `Dew Point Temperature`\n    - `y (Target Label)` and `Wind Speed` -> Weak\n    - `y (Target Label)` and `Visibility`\n    - `y (Target Label)` and `Rainfall` -> Weak\n    - `Humidity` and `Dew Point Temperature` -> Weak\n    - `Humidity` and `Solar Radiation`\n    - `Wind Speed` and `Solar Radiation`\n    - `Solar Radiation` and `Temperature` -> Weak\n>- Just a few of them have **`Linear`** relation:\n    - `Temperature` and `Dew Point Temperature`","7b4d0c44":"<br><br>","a853ccbf":"***\n## <a name=\"data_visualization\"><\/a> 2.2. Data Visualization\n>- Correlation Heatmap\n>- 2D Scatter Plot\n>- 3D Scatter Plot\n>- Rug Plot\n>- Box Plot\n>- Swarm Plot","11fda4d0":"**3D Scatter Plotting For Some Numerical Features VS Bikes Count**","5b17c23b":"## __Initial Data Processing, Still In progress...__\n<br>","8ddfcc35":"> **Correlation Matrix** in most cases is not enough to get insights about features' hidden relationships. However in the figure above, We'll notice that:\n>- There are some **`Positive`** correlation between:\n    - `y (Target Lable)` and `Hour`\n    - `y (Target Lable)` and `Temperature`\n    - `y (Target Lable)` and `Dew Point Temperature`\n    - `Dew Point Temperature` and `Temperature` and `Humidity`\n>- There are some **`Negative`** correlation between:\n    - `y (Target Lable)` and `Humidity`\n    - `Humidity` and `Solar Radiation`\n    - `Humidity` and `Visibility`\n    - `Humidity` and `Wind speed`","b977a602":"![Getting Started!](https:\/\/bouncefitness.com.qa\/wp-content\/uploads\/2017\/11\/get-started-transparent-1.png \"Getting Started\")","cceb2e9d":"***\n## 5. Model Evaluation","a7bc80b7":"## <a name=\"import\"><\/a> Import Libraries","a7218786":"#### 2.1.3 Information","01c97057":"**Box Plot For Categorical Features At Each Unique Value VS y lable (Bikes Rental Count)**","1b854bea":"#### 2.1.2. Data Types","6c227fd2":"**Box Plot For Numerical Features**","d09fab72":"#### 2.2.3 Scatter Plot","4c91f3cf":"**Swarm Plot** is another way of plotting the distribution of an attribute or the joint distribution of a couple of attributes","b3ff48f0":"***\n## 4. Model Training","e3b212e4":"#### 2.2.1 Correlation Heatmap","7112c870":"> **In the above box plot, We'll notice that:**\n>- Most of features have points after outlier margins\n>- Most of features need to be rescaled or normalized","6b2290f7":"> **In the above swarm plot, We'll notice that:**\n>- In season `Winter` in all day hours, Bikes Count always is `Minimum`\n>- In season `Spring` and `Autumn` in all day hours, Bikes Count always is `Medium`\n>- In season `Summer` in all day hours, Bikes Count always is `Maximum`\n>- At 8 AM and from 4 PM to 11 PM, Bikes Count always `Increases`\n>- In all `days fo week`, Bikes Count is `most likely the same` regardless of season","0c6dd091":"> **In the above scatter 3D plot, We'll notice that:**\n>- Where ` 15 <= Temperature <= 30` AND `12 <= Day Hour <= 20`, Bikes Count is `Maximum`, represented in the upper  `blue` and `red` areas of the figure","d00a2f80":"**Plotting Numerical Features VS Bikes Count**","06308aeb":"***\n## 3. Feature Engineering","08f9af15":"***\n## 6. Model Submission","ad29910a":"***\n## <a name=\"eda\"><\/a> 2. Exploratory Data Analysis(EDA)\n> 1. [Analytically](#data_analysis \"Data Analysis\")\n> 2. [Visually](#data_visualization \"Data Visualization\")","76833815":"**Histogram, Rug And KDE Plotting** demonstrate how many of a certain type of variable occurs within a specific range (Density), So It provides more elaboration on data distribution and an approximation of Probability Density Function (PDF) for single feature","06e39cb4":"#### 2.1.4 Describtion","fcb19f13":"***\n## <a name=\"load_data\"><\/a> 1. Loading Dataset Into Dataframe","a263a678":"**Correlation Matrix** allows to have a global view of the more or less strong relationship between several variables **LINEARLY**.","d3de4b4d":"#  [Seoul Bike Rental Prediction](https:\/\/www.kaggle.com\/c\/seoul-bike-rental-ai-pro-iti\/overview)\n### Predict the demand for rental bikes given information about the weather and time of the day\n![Bikes Rental!](https:\/\/s26551.pcdn.co\/wp-content\/uploads\/2012\/02\/resize-va-sq-bikeshare.jpg \"Bikes Rental\")","0874d779":"> ## Data Set Information:\nCurrently Rental bikes are introduced in many urban cities for the enhancement of mobility comfort. It is important to make the rental bike available and accessible to the public at the right time as it lessens the waiting time. Eventually, providing the city with a stable supply of rental bikes becomes a major concern. The crucial part is the prediction of bike count required at each hour for the stable supply of rental bikes.\nThe dataset contains weather information (Temperature, Humidity, Windspeed, Visibility, Dewpoint, Solar radiation, Snowfall, Rainfall), the number of bikes rented per hour and date information.","af2888ed":"#### 2.2.5 Box Plot","a125146d":"**Scatter Plot** combine two or three columns of numerical data, with one variable on each axis, to look for a relationship between them and to show the **Joint Distribution** of these columns together. If the variables are correlated, the points will fall along a **line** or **curve**","0f5a02e1":"**Swarm Plot For Some Categorical Features VS Bikes Rental Count With Color Coding Represnts Season, To compare bikes count for example in specific (hour or week day) regarding to the season**","df80484d":"#### 2.1.5 Checking NAN Values","59c61c51":"***","b9f057a5":"> ### Data Description\nWe are provided hourly rental data along with weather data. For this competition, the training set is comprised of the first 20 days of each month, while the test set is the 21th to the end of the month. You must predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.","ee2c9eff":"#### 2.2.4 3D Scatter Plot","1cbb5ca7":"#### 2.1.1. Dimensions","0953204e":"**Plotting Features VS Each Other (Pair By Pair) With Color Coding Represents Bikes Count**","e71c60a1":"> ### File descriptions\n>- train.csv - the training set.\n>- test.csv - the test set.\n>- sample_submission.csv - a sample submission file in the correct format","4cbc7741":"### 2.2.6 Categorical Swarm Plot","20312e31":"> ### Data fields\n>- ID - an ID for this instance\n>- Date - year-month-day\n>- Hour - Hour of he day\n>- Temperature - Temperature in Celsius\n>- Humidity - %\n>- Windspeed - m\/s\n>- Visibility - 10m\n>- Dew point temperature - Celsius\n>- Solar radiation - MJ\/m2\n>- Rainfall - mm\n>- Snowfall - cm\n>- Seasons - Winter, Spring, Summer, Autumn\n>- Holiday - Holiday\/No holiday\n>- Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)\n>- y - Rented Bike count (Target), Count of bikes rented at each hour","86b8dba5":"**Box Plots** visually show the distribution of numerical data and skewness through displaying the data quartiles (or percentiles), whisker and averages to analyse numerical features distribution and detect outliers"}}