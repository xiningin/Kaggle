{"cell_type":{"ec1c6758":"code","8c84eb40":"code","6412cf88":"code","e5bb5129":"code","b7ee8294":"code","357104c6":"code","c6ea7620":"code","11bcb01f":"code","62836285":"code","1f0f6835":"code","1ab38b54":"code","624cccfd":"code","1b2053c6":"code","32792678":"code","198644c4":"code","5cfad2f1":"code","b7cfbb7b":"code","1f6f8d51":"code","c92835b9":"code","66d8354d":"code","1642f88e":"code","4dda7b1b":"code","5f41e3d5":"code","5da287d3":"code","af207fb4":"code","a04a722d":"code","d82b5796":"code","49f84590":"code","63c65359":"code","ef5200d9":"code","9d4cf1cf":"code","dd789d26":"code","f0c69aaf":"code","3a3d7bc6":"code","ec388f50":"code","a4d0462d":"code","3b3f03d0":"code","d284bc22":"code","8fcdbb52":"code","72d5d2d5":"code","dd288a68":"code","4b608a6a":"code","a512d730":"code","516a2edb":"code","86cad181":"code","40513c7b":"code","216f6552":"code","e3618f92":"code","024a703f":"code","3f4b9dd8":"code","e0675103":"code","30d3662f":"code","92300cc4":"code","72928ac3":"code","25f746fe":"code","4507ff92":"code","3270cb61":"code","af0d90c2":"code","b26dc35a":"code","c5bd7434":"code","a6434eed":"code","2cc96a9a":"code","a43b970a":"code","c9244514":"code","41c53ca8":"code","d75e708e":"code","3d7bbb04":"code","476b66f8":"code","cc9805e6":"code","530c7084":"markdown","6e475eb0":"markdown","679818d1":"markdown","a4a9b07e":"markdown","a966e6a1":"markdown","6b408b26":"markdown","c788a64b":"markdown","e2255b40":"markdown","2be2723f":"markdown","c83f4469":"markdown","73593394":"markdown","d537407f":"markdown","21cac5a9":"markdown","829fa874":"markdown","2406baa4":"markdown","808826fd":"markdown","bab84fc2":"markdown","16379ede":"markdown","ba493d46":"markdown","18790126":"markdown","cdaaf380":"markdown","ccf132cc":"markdown","6187e6fd":"markdown","7bae79e3":"markdown","488e1555":"markdown","e515d0bf":"markdown","a9f307da":"markdown","6ce68917":"markdown","b8f58197":"markdown","b991abf1":"markdown","67135a55":"markdown","da695ef3":"markdown","7f703fd0":"markdown","038f4733":"markdown","6694541d":"markdown"},"source":{"ec1c6758":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c84eb40":"import seaborn as sns\nimport matplotlib.pyplot as plt","6412cf88":"train = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/air_visit_data.csv\")\nweatherData = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/WeatherData.csv\")\ndate_info = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/date_info.csv\")","e5bb5129":"date_info = date_info.rename(columns={'calendar_date': \"visit_date\"})\ndate_info","b7ee8294":"train = train.merge(date_info, on=\"visit_date\",how=\"left\")\n# \u66dc\u65e5\u306f\u3042\u3068\u3067\u5225\u306e\u65b9\u6cd5\u3067\u52a0\u3048\u308b\u306e\u3067\u3001\u4e00\u65e6\u524a\u9664\ntrain = train.drop(columns=\"day_of_week\")\ntrain","357104c6":"train[\"set\"] = \"train\"\ntrain","c6ea7620":"train_x = train.drop(columns = \"visitors\")\ntrain_y = pd.DataFrame()\ntrain_y[\"visitors\"] = train[\"visitors\"]","11bcb01f":"# train_y\u306evisitors\u304c200\u3092\u8d85\u3048\u308b\u5834\u5408\u306f0\u306b\u3059\u308b\ntrain_y.loc[train_y[\"visitors\"] > 200, \"visitors\"] = 0\n# visitors\u3067\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\ntrain_y.sort_values(by='visitors', ascending=False)","62836285":"# 2017-04-18\t\ndef back_year(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    return txt_split[0]\n\ndef back_month(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    #04\u6708\u306e\u3088\u3046\u306a\u8a18\u8ff0\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001int\u578b\u3067\u8fd4\u3059\n    return int(txt_split[1])\n\ndef back_day(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    return int(txt_split[2])","1f0f6835":"# year\u5217\u3092\u65b0\u898f\u306b\u4f5c\u6210\u3059\u308b\u3002visit_date\u5217\u306e\u5024\u3092back_year\u95a2\u6570\u306b\u5165\u308c\u3066\u51e6\u7406\u3059\u308b\ntrain_x.loc[:,\"year\"] = train_x[\"visit_date\"].apply(back_year)\ntrain_x.loc[:,\"month\"] = train_x[\"visit_date\"].apply(back_month)\ntrain_x.loc[:,\"day\"] = train_x[\"visit_date\"].apply(back_day)\ntrain_x","1ab38b54":"import datetime\n#\u6708\u706b\u6c34\u6728\u91d1\u571f\u65e5\u2192[0,1,2,3,4,5,6]\u3067\u8fd4\u3059\ndef back_day_of_the_week(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    dt = datetime.datetime(int(txt_split[0]), int(txt_split[1]), int(txt_split[2]))\n    return dt.weekday()","624cccfd":"train_x.loc[:,\"day_of_the_week\"] = train_x[\"visit_date\"].apply(back_day_of_the_week)\n# visit_date\u306f\u524a\u9664\ntrain_x = train_x.drop(columns='visit_date')\ntrain_x","1b2053c6":"test = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/sample_submission.csv\")\ntest[\"set\"] = \"test\"\ntest_x = test.drop(columns=\"visitors\")\ntest_y = pd.DataFrame()\ntest_y[\"visitors\"] = test[\"visitors\"]\n# test_y\u306e\u6765\u5e97\u8005\u6570\u306f\u5168\u3066-1\u3067\u57cb\u3081\u308b(\u2192\u30e9\u30b0\u7279\u5fb4\u91cf\u8a08\u7b97\u3067\u30de\u30a4\u30ca\u30b9\u3092\u5e73\u5747\u306b\u52a0\u3048\u308b\u306e\u306f\u4e0d\u9069\u5207\u3068\u8003\u3048\u3084\u3081\u305f)\n# test_y[\"visitors\"] = -1\ntest_y","32792678":"def back_store_name(txt):\n    id = txt\n    #_\u533a\u5207\u308a\u3067\u53f3\u304b\u30891\u756a\u76ee\u306e\u6587\u5b57\u3092\u5207\u308a\u5206\u3051\u308b\n    txt_split = txt.rsplit(\"_\",1)\n    # \u5207\u308a\u5206\u3051\u305f\u6587\u5b57\u5217\u306e\u3046\u3061\u30010\u756a\u76ee\u3092\u8fd4\u3059\n    return txt_split[0]\n\ndef back_date_name(txt):\n    id = txt\n    txt_split = txt.rsplit(\"_\",1)\n    return txt_split[1]","198644c4":"#\u65b0\u3057\u3044\u5217\u306e\u540d\u524d = \u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u306b\u5165\u308c\u3066\u51e6\u7406\u3059\u308b\u5217\u306e\u540d\u524d\ntest_x.loc[:,\"air_store_id\"] = test_x[\"id\"].apply(back_store_name)\ntest_x.loc[:,\"visit_date\"] = test_x[\"id\"].apply(back_date_name)\n# \u795d\u65e5\u30d5\u30e9\u30b0\u3092\u8ffd\u52a0\ntest_x = test_x.merge(date_info, on=\"visit_date\",how=\"left\")\n# \u66dc\u65e5\u306f\u3042\u3068\u3067\u5225\u306e\u65b9\u6cd5\u3067\u52a0\u3048\u308b\u306e\u3067\u3001\u4e00\u65e6\u524a\u9664\ntest_x = test_x.drop(columns=\"day_of_week\")\ntrain","5cfad2f1":"# year\u5217\u3092\u65b0\u898f\u306b\u4f5c\u6210\u3059\u308b\u3002visit_date\u5217\u306e\u5024\u3092back_year\u95a2\u6570\u306b\u5165\u308c\u3066\u51e6\u7406\u3059\u308b\ntest_x.loc[:,\"year\"] = test_x[\"visit_date\"].apply(back_year)\ntest_x.loc[:,\"month\"] = test_x[\"visit_date\"].apply(back_month)\ntest_x.loc[:,\"day\"] = test_x[\"visit_date\"].apply(back_day)\ntest_x","b7cfbb7b":"test_x.loc[:,\"day_of_the_week\"] = test_x[\"visit_date\"].apply(back_day_of_the_week)\ntest_x","1f6f8d51":"# test_data\u306e5\/3-5\/5\u307e\u3067\u3092\u65e5\u66dc\u65e5\u306b\u5909\u66f4(\u65e5\u66dc\u65e5=6)\ntest_x.loc[(test_x['month'] == 5) & (test_x['day'] == 3), 'day_of_the_week'] = 5\ntest_x.loc[(test_x['month'] == 5) & (test_x['day'] == 4), 'day_of_the_week'] = 5\ntest_x.loc[(test_x['month'] == 5) & (test_x['day'] == 5), 'day_of_the_week'] = 5\ntest_x","c92835b9":"test_x = test_x.drop(columns='id')\ntest_x = test_x.drop(columns='visit_date')","66d8354d":"train_le = pd.DataFrame()\ntrain_le[\"air_store_id\"] = train_x.air_store_id\ntest_le = pd.DataFrame()\ntest_le[\"air_store_id\"] = test_x.air_store_id\ntest_le","1642f88e":"merge_data_le = pd.merge(train_le,test_le, how=\"outer\")\nmerge_data_le","4dda7b1b":"from sklearn.preprocessing import LabelEncoder #Library for LabelEncoding\n\nfor c in merge_data_le:\n    le = LabelEncoder()\n    le.fit(merge_data_le[c])\n    train_le[c] = le.transform(train_le[c])\n    test_le[c]= le.transform(test_le[c])","5f41e3d5":"# \u30a8\u30f3\u30b3\u30fc\u30c9\u524d\u5f8c\u306e\u5bfe\u5fdc\u78ba\u8a8d\u7528\u3001\u672c\u7b4b\u3068\u306f\u95a2\u4fc2\u306a\u3044\ntrain_x_enc = train_x.join(train_le, lsuffix='_enc')\ntest_x_enc = test_x.join(test_le, lsuffix='_enc')\n\n# \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3082\u306e\u3092\u5165\u308c\u308b\ntrain_x = train_x.drop(columns = \"air_store_id\")\ntrain_x = train_x.join(train_le)\ntest_x = test_x.drop(columns = \"air_store_id\")\ntest_x = test_x.join(test_le)","5da287d3":"train_x[\"year\"] = train_x.year.astype(\"int64\")\ntest_x[\"year\"] = test_x.year.astype(\"int64\")","af207fb4":"train_all = train_x.join(train_y)\ntrain_all","a04a722d":"test_all = test_x.join(test_y)\ntest_all_wid = test_x.join(test.id)\ntest_all","d82b5796":"merge_data = pd.concat([train_all,test_all])\nmerge_data","49f84590":"unique_stores = train_all['air_store_id'].unique()\nstores = pd.concat(\n    [\n        pd.DataFrame({\n            'air_store_id': unique_stores,\n            'day_of_the_week': [i] * len(unique_stores)\n        }) for i in range(7)\n    ],\n    axis=0,\n    ignore_index=True).reset_index(drop=True)","63c65359":"stores","ef5200d9":"#sure it can be compressed...\ntmp = train_all.groupby(\n    ['air_store_id', 'day_of_the_week'],\n    as_index=False)['visitors'].min().rename(columns={\n        'visitors': 'min_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_the_week'])\n\ntmp = train_all.groupby(\n    ['air_store_id', 'day_of_the_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'mean_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_the_week'])\n\ntmp = train_all.groupby(\n    ['air_store_id', 'day_of_the_week'],\n    as_index=False)['visitors'].median().rename(columns={\n        'visitors': 'median_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_the_week'])\n\ntmp = train_all.groupby(\n    ['air_store_id', 'day_of_the_week'],\n    as_index=False)['visitors'].max().rename(columns={\n        'visitors': 'max_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_the_week'])\n\ntmp = train_all.groupby(\n    ['air_store_id', 'day_of_the_week'],\n    as_index=False)['visitors'].count().rename(columns={\n        'visitors': 'count_observations'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_the_week'])\n\nstores","9d4cf1cf":"merge_data = pd.merge(merge_data, stores, how='left', on=['air_store_id', 'day_of_the_week'])\nmerge_data","dd789d26":"# 3\/15-4\/22\u3092miss\u30c7\u30fc\u30bf\u3068\u3059\u308b\nmerge_data.loc[(merge_data['year'] == 2017) & (merge_data['month'] == 3) & (merge_data['day'] >= 12), 'set'] = 'miss'\nmerge_data.loc[(merge_data['year'] == 2017) & (merge_data['month'] == 4) & (merge_data['day'] >= 1) & (merge_data['day'] <= 22), 'set'] = 'miss'\n\n# merge_data\u306e\u4e2d\u3067\u3001\u4e88\u6e2c\u3057\u305f\u3044\u65e5\u4ed8\u3092\u6307\u5b9a\u3059\u308b\nmerge_data.loc[(merge_data['year'] == 2017) & (merge_data['month'] == 3) & (merge_data['day'] >= 18) & (merge_data['day'] <= 18),'set'] = 'va'","f0c69aaf":"va_miss_visitors = merge_data.loc[(merge_data.set == \"va\") | (merge_data.set == \"miss\"),\"visitors\"]\n# set=va\u306b\u9078\u3093\u3060\u3082\u306e\u306evisitors\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\nva_visitors = merge_data.loc[(merge_data.set == \"va\"),\"visitors\"]\n\nmerge_data.loc[(merge_data.set == \"va\") | (merge_data.set == \"miss\"),\"visitors\"] = 0\nmerge_data.loc[(merge_data.set == \"va\") | (merge_data.set == \"miss\")]","3a3d7bc6":"air_store_info = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/air_store_info.csv\")\n\nstore_le = pd.DataFrame()\nstore_le[\"air_store_id\"] = air_store_info.air_store_id\ngenre_le = pd.DataFrame()\ngenre_le[\"air_genre_name\"] = air_store_info.air_genre_name\narea_le = pd.DataFrame()\narea_le[\"air_area_name\"] = air_store_info.air_area_name\n\narea_le","ec388f50":"# store_id\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nfor c in store_le:\n    store_le[c] = le.transform(store_le[c])\nstore_le\n\n# \u30b8\u30e3\u30f3\u30eb\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nfor c in genre_le:\n    le_g = LabelEncoder()\n    le_g.fit(genre_le[c])\n    genre_le[c] = le_g.transform(genre_le[c])\ngenre_le\n\nfor c in area_le:\n    le_a = LabelEncoder()\n    le_a.fit(area_le[c])\n    area_le[c] = le_a.transform(area_le[c])\narea_le","a4d0462d":"air_store_info = air_store_info.drop(columns = \"air_store_id\")\nair_store_info = air_store_info.join(store_le)\nair_store_info = air_store_info.drop(columns = \"air_genre_name\")\nair_store_info = air_store_info.join(genre_le)\nair_store_info = air_store_info.drop(columns = \"air_area_name\")\nair_store_info = air_store_info.join(area_le)\n# \u6700\u3082\u6765\u5e97\u8005\u306e\u591a\u3044\u66dc\u65e5\u60c5\u5831\u3068\u7d50\u5408\u3059\u308b\u305f\u3081\u306b\u30bd\u30fc\u30c8\u3057index\u3092\u3064\u3051\u306a\u304a\u3059\nair_store_info = air_store_info.sort_values(by='air_store_id')\n# index\u3092\u3064\u3051\u306a\u304a\u3059\nair_store_info = air_store_info.reset_index(drop=True)\nair_store_info","3b3f03d0":"store_visitors = train_all.groupby(['air_store_id']).visitors.agg([sum,len,max,min])\nstore_visitors[\"ave\"] = store_visitors[\"sum\"] \/\/ store_visitors[\"len\"]\n# \u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\u3067\u30bd\u30fc\u30c8\nstore_visitors.sort_values(by='ave', ascending=False)","d284bc22":"merge_data = merge_data.merge(air_store_info, on=\"air_store_id\",how=\"left\")\nmerge_data","8fcdbb52":"%%time\nstore_all_14_max = pd.DataFrame()\nstore_all_14 = pd.DataFrame()\nstore_all_21_max = pd.DataFrame()\nstore_all_21 = pd.DataFrame()\nstore_all_28_max = pd.DataFrame()\nstore_all_28 = pd.DataFrame()\nstore_all_35_max = pd.DataFrame()\nstore_all_35 = pd.DataFrame()\nstore_all_42_max = pd.DataFrame()\nstore_all_42 = pd.DataFrame()\n\nfor c in range(0,829,1):\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag14_max\"] = store[\"visitors\"].shift(8).rolling(window=7).max()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['max'][c]\n    store = store.fillna(ave)\n    store_all_14_max = pd.concat([store_all_14_max, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag14\"] = store[\"visitors\"].shift(8).rolling(window=7).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_14 = pd.concat([store_all_14, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag21_max\"] = store[\"visitors\"].shift(15).rolling(window=7).max()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['max'][c]\n    store = store.fillna(ave)\n    store_all_21_max = pd.concat([store_all_21_max, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 21\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag21\"] = store[\"visitors\"].shift(15).rolling(window=7).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_21 = pd.concat([store_all_21, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag28_max\"] = store[\"visitors\"].shift(22).rolling(window=7).max()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['max'][c]\n    store = store.fillna(ave)\n    store_all_28_max = pd.concat([store_all_28_max, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 21\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag28\"] = store[\"visitors\"].shift(22).rolling(window=7).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_28 = pd.concat([store_all_28, store])\n    \n        # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag35_max\"] = store[\"visitors\"].shift(29).rolling(window=7).max()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['max'][c]\n    store = store.fillna(ave)\n    store_all_35_max = pd.concat([store_all_35_max, store])\n        \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 21\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag35\"] = store[\"visitors\"].shift(29).rolling(window=7).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_35 = pd.concat([store_all_35, store])\n    \n        # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 14\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag42_max\"] = store[\"visitors\"].shift(36).rolling(window=7).max()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['max'][c]\n    store = store.fillna(ave)\n    store_all_42_max = pd.concat([store_all_42_max, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = merge_data.loc[merge_data.air_store_id == c]\n    # 21\u5468\u671f\u524d\u306elag\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag42\"] = store[\"visitors\"].shift(36).rolling(window=7).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_42= pd.concat([store_all_42, store])","72d5d2d5":"# id\u3067\u30bd\u30fc\u30c8\u3057\u306a\u304a\u3059\nstore_all_14 = store_all_14.sort_index()\nstore_all_21 = store_all_21.sort_index()\nstore_all_28 = store_all_28.sort_index()\nstore_all_35 = store_all_35.sort_index()\nstore_all_42 = store_all_42.sort_index()\nstore_all_14_max = store_all_14_max.sort_index()\nstore_all_21_max = store_all_21_max.sort_index()\nstore_all_28_max = store_all_28_max.sort_index()\nstore_all_35_max = store_all_35_max.sort_index()\nstore_all_42_max = store_all_42_max.sort_index()\n# \u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u7d50\u5408\u3057\u3066lag_all\nlag_all = pd.DataFrame()\nlag_all[\"lag14\"] = store_all_14.lag14\nlag_all[\"lag21\"] = store_all_21.lag21\nlag_all[\"lag28\"] = store_all_28.lag28\nlag_all[\"lag35\"] = store_all_35.lag35\nlag_all[\"lag42\"] = store_all_42.lag42\nlag_all[\"lag14_max\"] = store_all_14_max.lag14_max\nlag_all[\"lag21_max\"] = store_all_21_max.lag21_max\nlag_all[\"lag28_max\"] = store_all_28_max.lag28_max\nlag_all[\"lag35_max\"] = store_all_35_max.lag35_max\nlag_all[\"lag42_max\"] = store_all_42_max.lag42_max\nlag_all.head(30)","dd288a68":"merge_data = merge_data.join(lag_all)\nmerge_data","4b608a6a":"# \u30ea\u30fc\u30af\u3059\u308b\u5371\u967a\u304c\u3042\u308b\u306e\u3067\u304b\u5fc5\u305atoday\u3092drop\u3057\u3066\u6d88\u3059\n# merge_data = merge_data.drop(columns='today')\n# merge_data = merge_data.drop(columns='day_of_the_week_last')","a512d730":"for col in merge_data:\n    print(col)","516a2edb":"#\u671f\u9593\u77ed\u304f\u3059\u308b\u524d\u306emerge_data\u306f\u3001merge_data_all(\u5168\u671f\u9593\u306e\u30c7\u30fc\u30bf)\u3068\u3057\u3066\u6b8b\u3059\nmerge_data_all = merge_data\nmerge_data_all","86cad181":"# merge_data_all\u3078\u306f\u3053\u3053\u3067\u4fee\u5fa9\u3067\u304d\u308b\nmerge_data = merge_data_all\nmerge_data","40513c7b":"merge_data.loc[merge_data.month == 3].tail(20)","216f6552":"merge_data.loc[merge_data.set == \"va\"]","e3618f92":"merge_data.loc[merge_data.set == \"miss\"]","024a703f":"merge_data = merge_data.loc[(merge_data['year'] == 2017)]\nmerge_data","3f4b9dd8":"merge_data.loc[(merge_data['year'] == 2017) & (merge_data['month'] == 4) & (merge_data['day'] >= 24), 'set'] = 'test'\nmerge_data.loc[(merge_data['year'] == 2017) & (merge_data['month'] == 5) & (merge_data['day'] >= 1), 'set'] = 'test'\n\n# test\u306eid\u3092\u6b8b\u3057\u305f\u3044\ntest_all_wid.loc[(test_all_wid['year'] == 2017) & (test_all_wid['month'] == 4) & (test_all_wid['day'] >= 30), 'set'] = 'test'\ntest_all_wid.loc[(test_all_wid['year'] == 2017) & (test_all_wid['month'] == 5) & (test_all_wid['day'] >= 1), 'set'] = 'test'","e0675103":"# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = merge_data.loc[merge_data.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=\"visitors\")\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = merge_data.loc[merge_data.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n\ntest_id = pd.DataFrame()\ntest_id = test_all_wid.loc[test_all_wid.set == \"test\"]\n\nva_fit = pd.DataFrame()\nva_fit = merge_data.loc[merge_data.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=\"visitors\")\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\n","30d3662f":"from xgboost import XGBClassifier as XGB\nfrom sklearn.metrics import mean_squared_log_error\n\nModel = XGB(n_estimators=10, random_state=71,max_depth=10,colsample_bylevel=0.4,\n           gamma=0.0,alpha=0.0, min_child_weight=4,subsample=0.8,colsample_bytree=0.95\n           )","92300cc4":"# \u843d\u3068\u3059\u7279\u5fb4\u91cf\u3092\u9078\u3076\ndrop_columns = [\"lag14\",\"month\",\"day\",\"lag21\",\"lag28\",\"lag35\",\"lag42\",\"lag14_max\",\"lag21_max\",\"lag28_max\",\"lag35_max\",\"lag42_max\"]\ntrain_fit_x = train_fit_x.drop(columns=drop_columns)\ntest_fit_x = test_fit_x.drop(columns=drop_columns)\nva_fit_x = va_fit_x.drop(columns=drop_columns)","72928ac3":"va_fit_x","25f746fe":"train_fit_x.nunique()","4507ff92":"%%time\nModel.fit(train_fit_x, train_fit_y)","3270cb61":"# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = Model.predict(va_fit_x)\n\n# \u4e88\u6e2c\u5024\u304b\u3089RMSLE\u3092\u7b97\u51fa\u3059\u308b\nscore = np.sqrt(mean_squared_log_error(va_visitors, pred))\nprint(\"---------------RMSLE-score----------------\")\nscore","af0d90c2":"columns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\ncolumns = [\"visitors\"]\nva_fit_d = pd.DataFrame(data=va_visitors, columns = columns)\nva_fit_d = va_fit_d.reset_index(drop=True)\n\nsns.scatterplot(x=va_fit_d['visitors'], y=pred_d['pred_visitors'])\nsns.scatterplot(x=va_fit_d['visitors'], y=va_fit_d['visitors']) #perfect fitting line","b26dc35a":"va_fit_d[\"delta\"] = va_fit_d[\"visitors\"] - pred_d[\"pred_visitors\"]\nva_fit_d[\"RMSLE\"] = np.sqrt(np.log10(va_fit_d[\"visitors\"]+1) - np.log10(pred_d[\"pred_visitors\"]+1)**2)\nva_fit_x_reindex = va_fit_x.reset_index(drop=True)\nva_fit_d = va_fit_d.join(va_fit_x_reindex)\nva_fit_d = va_fit_d.join(pred_d)\nva_fit_d[\"delta_abs\"] = abs(va_fit_d[\"delta\"])\nva_fit_d = va_fit_d.sort_values(by='RMSLE', ascending=False)\n","c5bd7434":"# va_fit_d_watch= va_fit_d[[\"RMSLE\",\"delta_abs\",\"visitors\",\"pred_visitors\",\"year\",\"month\",\"day\",\"air_store_id\",\"day_of_the_week\"]]\n# va_fit_d_watch.head(50)","a6434eed":"sns.scatterplot(x=va_fit_d_watch['delta_abs'], y=va_fit_d_watch['RMSLE'])","2cc96a9a":"va_fit_d_bad = va_fit_d.sort_values(by='RMSLE', ascending=False).head(100)\nva_fit_d_watch_bad = va_fit_d_watch.sort_values(by='delta_abs', ascending=False).head(100)","a43b970a":"va_fit_d_watch_bad.sort_values(by='day_of_the_week', ascending=False).head(50)","c9244514":"sns.distplot(\n    va_fit_d_watch_bad['day_of_the_week'], bins=100, color='#123456', label='data',\n    kde=False,\n    rug=False\n)","41c53ca8":"# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = Model.predict(test_fit_x)\npred","d75e708e":"columns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\nsubmission_ck","3d7bbb04":"test_id = test_id.reset_index(drop=True)\ntest_id","476b66f8":"submission = pd.DataFrame()\nsubmission[\"id\"] = test_id.id\nsubmission[\"visitors\"] = submission_ck.visitors\nsubmission","cc9805e6":"submission.to_csv(\"submission_week1.csv\", index=False)","530c7084":"# \u65b0\u3057\u304f\u4f5c\u3063\u305f\u5909\u6570(air_store_id\u3068visit_date)\u3068\u795d\u65e5\u30d5\u30e9\u30b0\u3092\u3001test_x\u306b\u8ffd\u52a0\u3059\u308b","6e475eb0":"# \u4ee5\u4e0a\u3067\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306f\u7d42\u4e86\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3057\u3001\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n* va\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u3046\u65e5\u4ed8\u3092\u9078\u629e\u3059\u308b\n* \u30c7\u30fc\u30bf\u3092train_fit\u3068test_fit\u306b\u5206\u5272\u3059\u308b\n* xgboost\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a \n* xgboost\u3067\u5b66\u7fd2\u3055\u305b\u308b\n* va\u30c7\u30fc\u30bf\u3067RMSLE\u3092\u8a08\u7b97\u3059\u308b\n","679818d1":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\n\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b9a\u307e\u308a\u30014\/22\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066train\u3068\u3057\u3066\u4f7f\u3046\u8a2d\u5b9a\u306b\u3057\u305f\u5834\u5408\u306b\u884c\u3046","a4a9b07e":"# id\u3068visit_date\u884c\u306f\u524a\u9664\nid\u306f\u4e0d\u8981\u3002\u3053\u308c\u3067\u3001test_x\u3068train_x\u304c\u540c\u3058\u5f62\u5f0f\u3067\u53d6\u5f97\u3067\u304d\u305f<br>\nvisit_date\u3082\u3001month,day,year\u3067\u4ee3\u66ff\u3057\u3066\u3044\u308b\u306e\u3067\u524a\u9664","a966e6a1":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u304b\u3051\u308b\ntrain_all_le\u3068\u3044\u3046DataFrame\u306b\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u304b\u3051\u308b\u3002<br>\nair_store_id\u306b\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u304b\u3051\u3089\u308c\u3066\u6570\u5024\u306b\u5909\u63db\u3055\u308c\u308b<br>","6b408b26":"# \u5e97\u8217\u60c5\u5831\u3092\u5229\u7528\u3059\u308b","c788a64b":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u5e97\u8217\u306e\u30b8\u30e3\u30f3\u30eb\u3092\u5206\u3051\u308b\n\u30fbstore_id<br>\n\u30fb\u30b8\u30e3\u30f3\u30eb<br>\n\u30fb\u30a8\u30ea\u30a2<br>\n\u306b\u5bfe\u3057\u3066\u305d\u308c\u305e\u308c\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b","e2255b40":"# sample submission\u3092\u8aad\u307f\u8fbc\u307f\u3001test\u30c7\u30fc\u30bf\u306b\u4f7f\u3046","2be2723f":"# \u5168\u671f\u9593\u306e\u30c7\u30fc\u30bf\u3092merge_data_all\u3068\u3057\u3066\u6b8b\u3059","c83f4469":"# \u30e9\u30b0\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n 7,14,21\u65e5\u5468\u671f\u306e\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u7b97\u51fa\u3057\u3066lag_all\u306b\u6301\u305f\u305b\u308b<br>\n test\u30c7\u30fc\u30bf\u3067\u306f\u5f53\u65e5\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044\u306e\u3067<br>\n 1\u65e5\u30b7\u30d5\u30c8\u3055\u305b\u3066\u3001\u524d\u65e5\u304b\u3089\u306e1\u9031\u9593\u306e\u5e73\u5747\u3092\u53d6\u5f97\u3059\u308b","73593394":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u7279\u5fb4\u91cf\u3092\u7d50\u5408\n\u3053\u308c\u3067\u3001\u5e97\u8217ID\u3054\u3068\u306b\u5ea7\u6a19\u3001\u30a8\u30ea\u30a2\u3001\u30b8\u30e3\u30f3\u30eb\u304c\u5165\u3063\u305fDataframe\u300cair_store_info\u300d\u3092\u5f97\u3089\u308c\u308b","d537407f":"# \u30e9\u30b0\u7279\u5fb4\u91cf\u3092merge_data\u306b\u8ffd\u52a0","21cac5a9":"# train_all\u3092\u4f7f\u3063\u3066Store_id\u306e\u5165\u308c\u7269\u3092\u3064\u304f\u308b","829fa874":"# \u3010important\u3011validation\u30c7\u30fc\u30bf\u306e\u6307\u5b9a\n3\/15\u3092\u4e88\u6e2c\u3059\u308b\u3002<br>\n\u305d\u308c\u4ee5\u5916\u306e3\/15-4-22\u306e\u671f\u9593\u306fmiss\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u5b66\u7fd2\u306b\u5229\u7528\u3057\u306a\u3044","2406baa4":"# merge_data\u306b\u5e97\u8217\u60c5\u5831\u3092\u8ffd\u52a0\nvlookup\u307f\u305f\u3044\u306a\u64cd\u4f5c\u3092\u3059\u308b\u3002\u53c2\u7167\u3057\u3066\u8ffd\u52a0\u3059\u308b\u307f\u305f\u3044\u306a<br>\nmerge_data\u306b\u306f\u3001train\u3082test\u3082\u3001x\u3082y\u3082\u5168\u90e8\u542b\u307e\u308c\u308b<br>\nair_store_info\u306e\u5e97\u8217ID\u3054\u3068\u306e\u60c5\u5831\u3092\u3001\u5404\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u3059\u308b","808826fd":"# \u65e5\u4ed8\u60c5\u5831\u304b\u3089\u66dc\u65e5\u3092\u53d6\u5f97","bab84fc2":"# test_x\u306eid\u3092\u5207\u308a\u5206\u3051\u308b\ntest_x(sample_submit)\u306eid\u304c\u3001\u5e97\u8217\u540d\u3068\u65e5\u4ed8\u3067\u5225\u3005\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001<br>\ntrain_x(air_visit_data)\u3068\u540c\u3058\u5f62\u5f0f(air_store_id\u3068visit_date)\u306b\u306a\u308b\u3088\u3046\u306b<br>\n\u5207\u308a\u5206\u3051\u305f\u3044","16379ede":"# model1","ba493d46":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u6e1b\u3089\u3057\u3066\u5b66\u7fd2\u6642\u9593\u3092\u524a\u6e1b\u3059\u308b","18790126":"# Recruit Restaurant Visitor Forecasting\n\u8868\u984c\u306e\u30b3\u30f3\u30da\u306e\u30b3\u30fc\u30c9<br>\n\u51e6\u7406\u6642\u9593\u304a\u3088\u305d30min<br>\n* \u7279\u5fb4\u91cf\u3092\u4f5c\u6210(\u65e5\u4ed8\u3001\u5e97\u8217\u306e\u30d4\u30fc\u30af\u66dc\u65e5\u3001\u5ea7\u6a19\u3001\u30ab\u30c6\u30b4\u30ea)\n* \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5909\u63db(\u5e97\u8217ID\u3068\u5e97\u8217\u30ab\u30c6\u30b4\u30ea)\n* \u30e9\u30b0\u7279\u5fb4\u91cf(7,14,21\u65e5\u524d\u306e\u5e73\u5747\u3068\u3001\u76f4\u524d\u306e\u540c\u3058\u66dc\u65e5\u306e\u6765\u5e97\u8005\u6570)\n<br><br>\n\u3010\u30e2\u30c7\u30eb\u5b66\u7fd2\u65b9\u6cd5\u3011<br>\n* 3\/15-4\/22\u307e\u3067\u3092\u4e88\u6e2c\u3055\u305b\u308b\u305f\u3081\u306e\u30e2\u30c7\u30eb39\u500b\u306e\u3046\u3061\u306e1\u500b\u76ee\n* 1\u65e5\u524d\u307e\u3067\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3059\u308b","cdaaf380":"# \u4ee5\u4e0b\u3001\u4f55\u304c\u4e88\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u304b\u78ba\u8a8d","ccf132cc":"# merge_data\u306bmerge\u3059\u308b","6187e6fd":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5909\u63db\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092LabelEncoder\u3067\u5b9f\u65bd\u3059\u308b\u305f\u3081\u306b\u3001<br>\n\u5168\u3066\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570(\u3053\u3053\u3060\u3068\u5e97\u8217\u540d)\u3092\u53d6\u5f97\u3059\u308b<br>\n# \u307e\u305a\u3001air_store_id\u3060\u3051\u3092\u3082\u3064DataFrame\u3092\u5b9a\u7fa9\u3059\u308b","7bae79e3":"# test_y\u3068test_x\u3092\u7d50\u5408\u3057\u3066test_all\u306b\u3059\u308b","488e1555":"# train_x\u3068train_y\u3092\u7d50\u5408\u3057\u3066train_all\u306b\u3059\u308b","e515d0bf":"# train_all\u3068test_all\u3092\u30de\u30fc\u30b8\u3057merge_data\u3068\u3059\u308b\n\u3053\u308c\u3067\u3001train\u3068test\u304c\u540c\u3058\u5f62\u5f0f\u3067\u5f97\u3089\u308c\u305f\u3002\n\u4ee5\u964d\u306f\u3001train_all\u3068test_all\u3092\u30de\u30fc\u30b8\u3057\u3066merge_data\u306b\u3057\u3066\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u3001<br>\n\u6700\u7d42\u7684\u306b\u5207\u308a\u5206\u3051\u308b\u4e8b\u306b\u3059\u308b","a9f307da":"# test\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c","6ce68917":"# year,month,day\u306e\u5217\u3092\u4f5c\u6210","b8f58197":"# \u65e5\u4ed8\u60c5\u5831\u3092Year,Month,Day\u306b\u5909\u66f4","b991abf1":"# \u7279\u5fb4\u91cf\u3092\u843d\u3068\u3059","67135a55":"# \u5165\u308c\u7269\u306e\u4e2d\u8eab\u3092\u5165\u308c\u3066\u3044\u304f","da695ef3":"# \u65e5\u4ed8\u3092\u5207\u308a\u5206\u3051\u308b\n\u6bce\u6708\u3007\u65e5\u306f\u5b89\u3044\u3001\u3068\u304b\u3001\u3007\u6708\u306f\u30bb\u30fc\u30eb\uff01\u3068\u304b\u3042\u308a\u305d\u3046\u306a\u306e\u3067","7f703fd0":"# 2\u3064(train_le\u3068test_le)\u3092\u5408\u4f53\u3059\u308b","038f4733":"# test_x\u306eGW\u3092\u4f11\u65e5(\u571f\u66dc)\u306b\u5909\u66f4\ntest_x\u306b\u542b\u307e\u308c\u308bGW(5\/3-5\/5)\u306e\u66dc\u65e5\u3092\u5909\u66f4\u3059\u308b<br>\n\u6761\u4ef6\u306b\u3088\u308aday_of_the_week\u3092\u66f8\u304d\u63db\u3048\u308b<br>\n\u5f53\u521d\u65e5\u66dc\u65e5\u306b\u3057\u3066\u3044\u305f\u304c\u3001\u571f\u66dc\u65e5\u306e\u65b9\u304cave_visitors\u304c\u591a\u3044\u306e\u3067\u571f\u66dc\u306b\u5909\u3048\u305f","6694541d":"# year\u306e\u30c7\u30fc\u30bf\u578b\u3092int64\u306b\u5909\u66f4\nxgboost\u3067\u8aad\u3081\u308b\u578b\u306b\u5909\u66f4\u3059\u308b"}}