{"cell_type":{"f1b3eee0":"code","662e73ae":"code","6f7d1e1b":"code","a33b8032":"code","4aefbab7":"code","8525f055":"code","01101b11":"code","79ae0704":"code","545cbfa5":"code","8ce35ce3":"code","015d0479":"code","d38148bb":"code","d95f80d8":"code","940849b9":"code","162ad502":"code","b03191a5":"code","455cbfc3":"code","ed77c421":"code","446ff68e":"code","7785a641":"code","faaa1ea1":"code","47c3c97b":"code","af933c55":"code","a94bab27":"markdown","9e9fad6c":"markdown","a3be89b2":"markdown","7b824769":"markdown","7642983e":"markdown","979c92e2":"markdown","740a0058":"markdown","674a7fb3":"markdown","85ef8d2d":"markdown","c7297077":"markdown","d20a1409":"markdown","8c837e46":"markdown","4c702fda":"markdown","2256d134":"markdown","20ce2d42":"markdown"},"source":{"f1b3eee0":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom sklearn.preprocessing import LabelEncoder\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\npio.templates.default = \"none\"\n\ntemplate = 'ggplot2',#'plotly_dark', 'seaborn', 'simple_white', 'plotly'\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv', )\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv', )\nsubm = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","662e73ae":"print(\"Shape of train data is \", format(train.shape))\nprint(\"Shape of test data is \", format(test.shape))","6f7d1e1b":"train.head()","a33b8032":"train.info()","4aefbab7":"train.describe()","8525f055":"display('Unique values in train data')\nfor col in train.columns:\n    print('{} unique values in {}'.format(train[col].nunique(), col))\nprint('*x50')\ndisplay('Unique values in test data')\nfor col in test.columns:\n    print('{} unique values in {}'.format(test[col].nunique(), col))","01101b11":"# train_data missing values\nnull_values_train = []\nfor col in train.columns:\n    if train[col].isna().sum() != 0:\n        pct_na = np.round((100 * (train[col].isna().sum())\/len(train)), 2)            \n        dict1 ={\n            'Features' : col,\n            'NA_train (count)': train[col].isna().sum(),\n            'NA_trian (%)': '{}%'.format(pct_na)\n        }\n        null_values_train.append(dict1)\nDF1 = pd.DataFrame(null_values_train, index=None).sort_values(by='NA_train (count)',ascending=False)\n#print(DF1)\n\n\n# test_data missing values\nnull_values_test = []\nfor col in test.columns:\n    if test[col].isna().sum() != 0:\n        pct_na = np.round((100 * (test[col].isna().sum())\/len(test)), 2)            \n        dict2 ={\n            'Features' : col,\n            'NA_test (count)': test[col].isna().sum(),\n            'NA_test (%)': '{}%'.format(pct_na)\n        }\n        null_values_test.append(dict2)\nDF2 = pd.DataFrame(null_values_test, index=None).sort_values(by='NA_test (count)',ascending=False)\n#print(DF2)\n\n\n# barplots\nfig = go.Figure(data=[go.Bar(x=DF1['Features'],\n                             y=DF1[\"NA_train (count)\"], \n                             text=DF1['NA_trian (%)'], \n                             textposition='auto', name='Train', marker_color='lightseagreen'),        \n\n                go.Bar(x=DF2['Features'],\n                             y=DF2[\"NA_test (count)\"], \n                             text=DF2['NA_test (%)'], \n                             textposition='auto', name='Test', marker_color='lightsalmon')])\nfig.update_traces(marker_line_color='black', marker_line_width=1.5, opacity=1)\nfig.update_layout(title_text='Missing values', \n                  #template='plotly_dark',\n                  paper_bgcolor='rgb(230, 230, 230)',\n                  plot_bgcolor='rgb(230, 230, 230)',\n                  width=600, height=300,\n                  xaxis_title='Features', yaxis_title='Count',\n                  titlefont={'color':'black', 'size': 24, 'family': 'San-Serif'})\nfig.show()","79ae0704":"#colors = ['lightgray', 'Rebeccapurple','gold','royalblue','lightseagreen','lightsalmon']\n#colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen', 'black', 'Gray']\n\nfig = make_subplots(rows=3, cols=2,\n                    specs=[[{'type':'domain'}, {'type':'domain'}],\n                           [{'type':'domain'}, {'type':'domain'}], \n                           [{'type':'domain'}, {'type':'domain'}], \n                           ])\nfig.add_trace(\n    go.Pie(\n        labels=train['Sex'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Sex (train)',\n        titlefont={'color':'white', 'size': 24},         \n\n        ),\n    row=1,col=1\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon'], \n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.add_trace(\n    go.Pie(\n        labels=test['Sex'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Sex (test)',\n        titlefont={'color':'white', 'size': 24},\n        ),\n    row=1,col=2\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.add_trace(\n    go.Pie(\n        labels=train['Embarked'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Embarked (train)',\n        titlefont={'color':'white', 'size': 24},\n        ),\n    row=2,col=1\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon', 'gray'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.add_trace(\n    go.Pie(\n        labels=test['Embarked'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Embarked (test)',\n        titlefont={'color':'white', 'size': 24},\n        ),\n    row=2,col=2\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon', 'gray'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.add_trace(\n    go.Pie(\n        labels=train['Pclass'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Pclass (train)',\n        titlefont={'color':'white', 'size': 24},\n       ),\n    row=3,col=1\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon', 'gray'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\n\nfig.add_trace(\n    \n    \n    go.Pie(\n        labels=test['Pclass'],\n        values=None,#scalegroup='one',\n        hole=.4,\n        title='Pclass(test)',\n        titlefont={'color':'white', 'size': 24},\n       ),\n    row=3,col=2\n    )\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon', 'gray'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\nfig.layout.update(title=\"Features Distribution (train\/test data)\", showlegend=False, height=650, width=600, \n                  template='plotly_dark', titlefont={'color':'white', 'size': 24, 'family': 'San-Serif'}\n                 )\nfig.show()\n","545cbfa5":"fig = make_subplots(rows=2, cols=2)\n\ntrace0 = go.Histogram(x=train['Parch'],name='Parch (train)',\n                      histnorm='percent', marker_color='seagreen',                                          \n                     )\ntrace1 = go.Histogram(x=test['Parch'],name='Parch (test)',\n                      histnorm='percent',marker_color='lightseagreen', opacity=0.5,                     \n                      )\ntrace2 = go.Histogram(x=train['SibSp'],name='SibSp (train)',\n                      histnorm='percent',marker_color='salmon',                      \n                      )\ntrace3 = go.Histogram(x=test['SibSp'],name='SibSp (test)', \n                      histnorm='percent', marker_color='lightsalmon',opacity=0.5,   \n                      )\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\n\nfig.update_layout(title=\"Parch and SibSp distribution (train-test)\", \n                  bargap=0.2,\n                  titlefont={'size': 24},\n                  font_family ='San Serif',\n                  template='plotly_dark',\n                  width=600, height=450,\n                  legend=dict(\n                  orientation=\"v\", y=1.0, yanchor=\"top\", x=1.2, xanchor=\"right\",)                \n                  )\n\nfig['layout']['xaxis']['title']='Parch'\nfig['layout']['xaxis2']['title']='Parch'\nfig['layout']['xaxis3']['title']='SibSp'\nfig['layout']['xaxis4']['title']='SibSp'\nfig['layout']['yaxis']['title']='%'\nfig['layout']['yaxis2']['title']='%'\nfig['layout']['yaxis3']['title']='%'\nfig['layout']['yaxis4']['title']='%'\nfig.show()","8ce35ce3":"fig = go.Figure()\n\nfig.add_trace(go.Histogram(x=train['Age'],\n                           name='train', \n                           histnorm='probability density',\n                           xbins=dict(\n                               start=0,\n                               end=100,\n                               size=2\n                           ),\n                           marker_color='lightsalmon',\n                           opacity=0.75\n                          )\n             ) \nfig.add_trace(go.Histogram(x=test['Age'],\n                           name='test', \n                           histnorm='probability density',\n                           xbins=dict(\n                               start=0,\n                               end=100,\n                               size=2\n                           ),\n                           marker_color='lightseagreen',\n                           opacity=0.75\n                          )\n             ) \nfig.update_layout(title='Passengers Age Distribution (train-test)',\n                  xaxis_title='Age [years]', \n                  yaxis_title='Probability Density [-]',\n                  titlefont={'size': 24},\n                  font_family = 'San Serif',\n                  width=600,height=300,\n                  template=\"plotly_dark\",\n                  showlegend=True,\n                  font=dict(\n                      color ='white',\n                      ),\n                  legend=dict(\n                      orientation=\"v\",\n                      y=1, \n                      yanchor=\"top\", \n                      x=1.0, \n                      xanchor=\"right\",)   \n )\nfig.show()","015d0479":"fig = go.Figure()\n\nfig.add_trace(       \n    go.Pie(\n        labels=train['Survived'],\n        values=None,\n        hole=.4,\n        title='Survived',\n        titlefont={'color':'white', 'size': 24, 'family': 'San Serif'},\n       ))\n\nfig.update_traces(\n    hoverinfo='label+value',\n    textinfo='label+percent',\n    textfont_size=12,\n    marker=dict(\n        colors=['lightseagreen', 'lightsalmon'],\n        line=dict(color='#000000',\n                  width=2)\n        )\n    )\nfig.layout.update(title=\"Passengers Survival (train)\", showlegend=False, height=450, width=600,\n                  template='plotly_dark', titlefont={'color':'white', 'size': 24, 'family': 'San Serif'}\n                 )\nfig.show()\n","d38148bb":"train = train.copy()\ntest = test.copy()\n\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].mode().iloc[0])\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mode().iloc[0])\n\n\ngroup_labels = ['train', 'test']\n\nfig = ff.create_distplot([train['Fare'], test['Fare']],\n                         group_labels, \n                         show_hist=False, \n                         show_rug=False,\n                         )\n\nfig.update_layout(title='Fare Paid by Passengers',\n                  xaxis_title='Fare', \n                  yaxis_title='Density',\n                  titlefont={'size': 24},\n                  font_family = 'San Serif',\n                  width=700,height=400,\n                  template=\"plotly_dark\",\n                  showlegend=True,\n                  paper_bgcolor=\"black\",\n                  font=dict(\n                      color ='white',\n                      ),\n                  legend=dict(\n                      orientation=\"v\",\n                      y=1, \n                      yanchor=\"top\", \n                      x=1.0, \n                      xanchor=\"right\",)   \n )\nfig.show()","d95f80d8":"## I borrowred this code snippet from https:\/\/towardsdatascience.com\/the-search-for-categorical-correlation-a1cf7f1888c9\ndef cramers_v(x, y):\n    confusion_matrix = pd.crosstab(x,y)\n    chi2 = stats.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum().sum()\n    phi2 = chi2\/n\n    r,k = confusion_matrix.shape\n    phi2corr = max(0, phi2-((k-1)*(r-1))\/(n-1))\n    rcorr = r-((r-1)**2)\/(n-1)\n    kcorr = k-((k-1)**2)\/(n-1)\n    return np.sqrt(phi2corr\/min((kcorr-1),(rcorr-1)))\n\ncategoricals = ['Sex', 'Pclass', 'Embarked', 'SibSp', 'Parch']\nprint(\"Cramer's -V categorival features correlation with Survival \")\nprint('**********************************************************')\nfor cats in categoricals:\n    print('Correlation between {} and survival is {:.2f}'.format(cats, cramers_v(train[cats], train['Survived'])))\n    ","940849b9":"#Point  Biserial correlation for categorical-continuous features\n# first we need to impute the missig values in Age and Fare \n# (NA values are not accepted in the point_biserial function) \n\ntrain['Age'] = train['Age'].fillna(train['Age'].mode().iloc[0])\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].mode().iloc[0])\n\ndef point_biserial(cat):\n    a = train['Survived']\n    b = train[cat]\n    pb = stats.pointbiserialr(a, b)\n    return pb\n\npoint_biserial('Fare')[0]\ncontinuous =['Fare', 'Age', 'SibSp', 'Parch']\nprint(\"Point  Biserial correlation for categorical-continuous features\")\nprint('***************************************************************')\nfor conts in continuous:\n    print('Correlation between {} and Survival is {:.2f} '.format(conts, point_biserial(conts)[0] ))    ","162ad502":"data = train.copy()\ndata.drop(columns=['PassengerId', 'Ticket', 'Name', 'Sex', 'Pclass', 'Embarked', 'Cabin', 'Survived'], axis=1, inplace=True)\n\ncat_features = [col for col in data.columns if data[col].dtype=='object']\nnum_features = [col for col in data.columns if data[col].dtype=='float']\n\n# label encoding\n\nle = LabelEncoder()\n\nle_data = data.copy()\n\nfor col in cat_features:\n    le_data[col] = le.fit_transform(data[col])\ncorrdata = le_data\n\n## correlation \n\ncorr = corrdata.corr(method='pearson')\n\nmask1 = np.triu(np.ones_like(corr, dtype=bool))\nmask2 = np.tril(np.ones_like(corr, dtype=bool))\ncorr1=corr.mask(mask1)\ncorr2=corr.mask(mask2)\n\nfig = go.Figure(data= go.Heatmap(z=corr1,\n                  x=corr1.index.values,\n                  y=corr1.columns.values,       \n                  xgap=3, ygap=3,\n                  colorscale='emrld',\n                  colorbar_thickness=10,\n                  colorbar_ticklen=3,\n                   )\n                )\nfig.update_layout(title_text='Continuous Features Correlation', \n                title_x=0.5,\n                font_family=\"San Serif\",\n                titlefont={'size': 24},\n                width=500, height=500,\n                xaxis_showgrid=False,\n                yaxis_showgrid=False,\n                yaxis_autorange='reversed', \n                paper_bgcolor=None,\n                margin=dict(l=70, r=70, t=70, b=70, pad=1),\n                template=\"plotly_dark\"    )\nfig.show()\n","b03191a5":"df = train\nfig = px.histogram(df, x=\"Survived\", y=None, color=\"Sex\",\n                width=600,height=350,\n                histnorm='percent',\n                color_discrete_map={ \n                    \"male\": \"RebeccaPurple\", \"female\": \"lightsalmon\"\n                },\n                template=\"plotly_dark\"\n                )\n\nfig.update_layout(title=\"Survival by Gender\", \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  legend=dict(\n                  orientation=\"v\", y=1, yanchor=\"top\", x=1.0, xanchor=\"right\",)                 \n                  )\nfig.show()","455cbfc3":"Survived0 = train[train['Survived'] == 0]['Age']\nSurvived1 = train[train['Survived'] == 1]['Age']\n\nfig = go.Figure()\n\nfig.add_trace(go.Violin(x=Survived0, line_color='salmon', name='Survived = 0',))\nfig.add_trace(go.Violin(x=Survived1, line_color='gold', name= 'Survived = 1', ))\n\n\nfig.update_traces(orientation='h', side='positive', width=3, points=False, meanline_visible=True,)\nfig.update_layout(xaxis_showgrid=True, xaxis_zeroline=False)\n\nfig.update_layout(title='Survival-Age distn.',\n                  xaxis_title='Age',\n                  font_family=\"San Serif\",\n                  width=600,height=350,\n    template=\"plotly_dark\",\n    showlegend=False,\n    titlefont={'size': 24},\n    paper_bgcolor=\"black\",\n    font=dict(\n        color ='white', \n    )\n )\n\nfig.show()","ed77c421":"Survived0_fare = train[train['Survived'] == 0]['Fare']\nSurvived1_fare = train[train['Survived'] == 1]['Fare']\n\nfig = go.Figure()\nfig.add_trace(go.Violin(x=Survived0_fare, line_color='salmon', name='Non-Survivors'))\nfig.add_trace(go.Violin(x=Survived1_fare, line_color='seagreen', name='Survivors'))\n\n\nfig.update_traces(orientation='h', side='positive', width=3, points=False, meanline_visible=True)\nfig.update_layout(xaxis_showgrid=True, xaxis_zeroline=False)\n\nfig.update_layout(title=\"Survival-Fare distn.\",\n                  font_family=\"San Serif\",\n                  xaxis_title='Fare',\n                  width=600,\n                  height=300,\n                  template=\"plotly_dark\",\n                  titlefont={'size': 24},\n                  showlegend=False,\n                  paper_bgcolor=\"black\",\n                  font=dict(\n                      color ='white',\n                      )\n                  )\n\nfig.show()","446ff68e":"df = train\n\nfig = px.histogram(df, x=\"SibSp\", y=None, color=\"Survived\",\n                width=600,height=300,\n                histnorm='percent',\n                color_discrete_map={ \n                    1: \"RebeccaPurple\", 0: \"lightsalmon\"\n                },\n                template=\"plotly_dark\"\n                )\n\nfig.update_layout(title=\"SibSp-survival\", \n                  font_family=\"San Serif\",\n                  barmode='group',\n                  bargap=0.2,\n                  titlefont={'size': 24},\n                  legend=dict(\n                  orientation=\"v\", y=1, yanchor=\"top\", x=1.0, xanchor=\"right\" )                 \n                 )\nfig.show()\nfig = px.histogram(df, x=\"Parch\", y=None, color=\"Survived\",\n                width=600,height=300,\n                histnorm='percent',\n                color_discrete_map={ \n                    1: \"RebeccaPurple\", 0: \"lightsalmon\"\n                },\n                template=\"plotly_dark\"\n                )\n\nfig.update_layout(title=\"Parch-survival\", \n                  font_family=\"San Serif\",\n                  barmode='group',\n                  bargap=0.2,\n                  titlefont={'size': 24},\n                  legend=dict(\n                  orientation=\"v\", y=1, yanchor=\"top\", x=1.0, xanchor=\"right\" )                 \n                 )\nfig.show()\n","7785a641":"df = train\nfig = px.histogram(df, x=\"Embarked\",\n                   y=None, color=\"Survived\",                   \n                   width=600,height=300,\n                   histnorm='percent',\n                   color_discrete_map={\n                       1: \"RebeccaPurple\", 0: \"lightsalmon\"\n                       },\n                   template=\"plotly_dark\"\n                  )       \n\nfig.update_layout(title=\"Embarked-survival\", \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  legend=dict(\n                  orientation=\"v\", y=1, yanchor=\"top\", x=1.0, xanchor=\"right\" )                 \n                 )\nfig.show()\n\nfig = px.histogram(df, x=\"Pclass\", y=None, color=\"Survived\",\n                width=600,height=300,\n                histnorm='percent',\n                color_discrete_map={ \n                    1: \"RebeccaPurple\", 0: \"lightsalmon\"\n                },\n                template=\"plotly_dark\"\n                )\n\nfig.update_layout(title=\"Pclass-survival\", \n                  font_family=\"San Serif\",\n                  bargap=0.2,\n                  barmode='group',\n                  titlefont={'size': 24},\n                  legend=dict(\n                  orientation=\"v\", y=1, yanchor=\"top\", x=1.0, xanchor=\"right\" )                 \n                 )\nfig.show()","faaa1ea1":"female_age = train[train['Sex'] == 'female']['Age']\nmale_age = train[train['Sex'] == 'male']['Age']\n\nfemale_age_1 = train[(train['Sex'] == 'female') & (train['Survived'] == 1)]['Age']\nfemale_age_0 = train[(train['Sex'] == 'female') & (train['Survived'] == 0)]['Age']\n\nmale_age_1 = train[(train['Sex'] == 'male') & (train['Survived'] == 1)]['Age']\nmale_age_0 = train[(train['Sex'] == 'male') & (train['Survived'] == 0)]['Age']\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Box(x=male_age, line_color=\"RebeccaPurple\", name='male'))\nfig.add_trace(go.Box(x=male_age_1, line_color='darkturquoise', name= 'male_survived'))\nfig.add_trace(go.Box(x=male_age_0, line_color='darkgray', name= 'male_not_survived'))\nfig.add_trace(go.Box(x=female_age, line_color='salmon', name= 'female'))\nfig.add_trace(go.Box(x=female_age_1, line_color='lightsalmon', name= 'female_survived'))\nfig.add_trace(go.Box(x=female_age_0, line_color='gray', name= 'female_not_survived'))\n\nfig.update_layout(xaxis_showgrid=True, xaxis_zeroline=False)\n\nfig.update_layout(title='Gender-Age Survival',\n                  font_family=\"San Serif\",\n                  xaxis_title='Age',\n                  width=600,height=400,\n                  template=\"plotly_dark\",\n                  showlegend=False,\n                  titlefont={'size': 24},\n                  paper_bgcolor=\"black\",\n                  font=dict(\n                      color ='white',\n                      )\n                  )\nfig.show()","47c3c97b":"PClass1_1 = train[(train['Pclass'] == 1) &(train['Survived'] == 1)]['Age']\nPClass1_0 = train[(train['Pclass'] == 1) &(train['Survived'] == 0)]['Age']\nPClass2_1 = train[(train['Pclass'] == 2) &(train['Survived'] == 1)]['Age']\nPClass2_0 = train[(train['Pclass'] == 2) &(train['Survived'] == 0)]['Age']\nPClass3_1 = train[(train['Pclass'] == 3) &(train['Survived'] == 1)]['Age']\nPClass3_0 = train[(train['Pclass'] == 3) &(train['Survived'] == 0)]['Age']\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Violin(x=PClass1_1, line_color='salmon', name='PClass1_[1]', ))\nfig.add_trace(go.Violin(x=PClass1_0, line_color='lightsalmon', name= 'PClass1_[0]', ))\nfig.add_trace(go.Violin(x=PClass2_1, line_color='seagreen', name='PClass2_[1]', ))\nfig.add_trace(go.Violin(x=PClass2_0, line_color='lightseagreen', name='PClass2_[0]', ))\nfig.add_trace(go.Violin(x=PClass3_1, line_color='gold', name= 'PClass3_[1]', ))\nfig.add_trace(go.Violin(x=PClass3_0, line_color='silver', name='PClass3_[0]', ))\n\nfig.update_traces(orientation='h', side='positive', width=3,\n                  bandwidth = None, points=False, meanline_visible=True, scalemode='count')\nfig.update_layout(xaxis_showgrid=True, xaxis_zeroline=False)\n\nfig.update_layout(title='Pclass-Age Survival',\n                  font_family=\"San Serif\",\n                  xaxis_title='Age',\n                  width=600,height=400,\n                  template=\"plotly_dark\",\n                  showlegend=False,\n                  titlefont={'size': 24},\n                  paper_bgcolor=\"black\",\n                  font=dict(\n                      color ='white',\n                      )\n                  )\nfig.show()","af933c55":"PClass1_1 = train[(train['Pclass'] == 1) &(train['Survived'] == 1)]['Sex']\nPClass1_0 = train[(train['Pclass'] == 1) &(train['Survived'] == 0)]['Sex']\nPClass2_1 = train[(train['Pclass'] == 2) &(train['Survived'] == 1)]['Sex']\nPClass2_0 = train[(train['Pclass'] == 2) &(train['Survived'] == 0)]['Sex']\nPClass3_1 = train[(train['Pclass'] == 3) &(train['Survived'] == 1)]['Sex']\nPClass3_0 = train[(train['Pclass'] == 3) &(train['Survived'] == 0)]['Sex']\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Histogram(y=PClass1_1, marker_color='darkkhaki', histnorm='percent', name='PClass1_[1]', ))\nfig.add_trace(go.Histogram(y=PClass1_0, marker_color='paleturquoise', histnorm='percent',name= 'PClass1_[0]', ))\nfig.add_trace(go.Histogram(y=PClass2_1, marker_color='lightsalmon', histnorm='percent',name='PClass2_[1]', ))\nfig.add_trace(go.Histogram(y=PClass2_0, marker_color='salmon', histnorm='percent',name='PClass2_[0]', ))\nfig.add_trace(go.Histogram(y=PClass3_1, marker_color='lightseagreen', histnorm='percent',name= 'PClass3_[1]', ))\nfig.add_trace(go.Histogram(y=PClass3_0, marker_color='seagreen', histnorm='percent',name='PClass3_[0]', ))\n\nfig.update_traces(orientation='h')\nfig.update_layout(xaxis_showgrid=True, xaxis_zeroline=False)\n\nfig.update_layout(title='Pclass-Sex Survival',\n                  font_family=\"San Serif\",\n                  xaxis_title='Survival [%]',\n                  width=600,height=400,\n                  template=\"plotly_dark\",\n                  showlegend=True,\n                  titlefont={'size': 24},\n                  paper_bgcolor=\"black\",\n                  font=dict(\n                      color ='white',\n                      )\n                  )\nfig.show()","a94bab27":"### Features distribution\n\n- More passengers survived (57.2%) than not (42.8%). Note that this is present only in the train data!\n- **Pclass 3** has more passegers with (train:64%, test:41%) and Pclass 2 being the lowest with (train:29%, test:9%)\n- There are more **male** passengers than **females** (train: 56.1% vs 43.9% and test: 70% vs 30%)\n- More passengers **embarked** at port S (train:72%, test:69%) with Q being the lowest witht (train:5.4%, test:8.6%). Both train and test data have less that 1 % missing data.\n- Passengers with no **parent or child** (Parch 0) are the highest with in both train and test data (train:73.5%, test:71.5%). \n- Passengers who did not have **siblings or parents** are the majority with (train: 73.5%, test: 62%)\n- The average **Age** in train data is 38.3years  whereas in the test data it is 30.56years.\n- Average **Fare** in the train and test data is 43.9 and 45.4 respectively\n\n[back to contents](#Contents)","9e9fad6c":"### Unique cats and missing values\n#### Unique catagories\n- Of the common features in train and test data *Pclass, Sex, SibSp, Parch* and *Embarked* have the same unique values. In the rest of the features train and test data do not have the same unique values. But this can be expected as the features are of float (continuous-feature) data type. \n- Unique values in *name column*  is not equal to the number of passengers. This might be an indication that there could be duplicate names! Otherwise, in a rare case paggengers with identical names. This is true for both train and test data. To be checked later!\n\n#### Missing values\n- Four features (Cabin, Ticket, Age, Embarked and Fare) have missing data in them .\n- Cabin has the large amount of missing data in both train (67.8%) and test (70.1%) data followed by Ticket (train: 4.6%, test: 5.2%) and Age (train:3.3%, test:3.1%).\n\n[back to contents](#Contents)","a3be89b2":"### Survival by Age, Sex, Fare \n- More female passengers survived than male passengers. 71% of the females survived compared to that of males (only 29% survived).\n- Survivors tend to be older that those who did not.\n- On average survivors paid higher fare than non-survivors. On average survivors paid 59units whereas non-surviours paid 32.6units.","7b824769":"\nThank you so much for reading my notebook! If you have any feedback, please drop them in the comments. ","7642983e":"## Data Overview\n### View data table, stats summary\n#### Size of the data\n- Both train and test datasets have the same length (100k samples each) and 11 features excluding the target (survived) column of the train data. Survived in the test data is to be predicted (a target variable). ","979c92e2":"## Synthanic EDA + Visualization Using Plotly \n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26478\/logos\/header.png?t=2021-03-29-17-07-0)\n","740a0058":"### Feature correlation\n- **Cramer's V** correlation method is used to find correlation between the categorical features and the target variable (Survived).\n- Whereas for the continuous features **pearson's correlation** is used.\n- Correlation between continuous and target (categorical) features is calculated using **point-biserial correlation methode**.\n- **Sex, Embarked and Pclass** seem to have the highest correlation with survival.\n- **Name, Ticket, PassegerId and Cabin** are drop from the correlation analysis. These features need further feature engineering to be used for such analysis.\n\n[back to contents](#Contents)","674a7fb3":"[back to contents](#Contents)\n\n## References \n- @subinium did a great vizualization work by customizing the matplotlib library in [dark-theme](https:\/\/www.kaggle.com\/subinium\/dark-mode-visualization-apple-version\/comments) and I found it quite beautiful. As a result I wanted to try dark-theme myself. However this notebook is based on plotly's own dark-theme.\n\n- The code for Cramer's V correlation comes from [this](https:\/\/towardsdatascience.com\/the-search-for-categorical-correlation-a1cf7f1888c9) article.\n\n- I have adapted figures from my other [EDA notebook](https:\/\/www.kaggle.com\/desalegngeb\/students-performance-practice-eda-with-plotly), where I used plotly on students performance dataset.","85ef8d2d":" ### Survival by Embarked, Pclass\n- There are more male passanger in Pclass3, but more female passengers than male in Pclass1 and 2\n- More female passengers embarked at C and Q, but more male passengers embarked at S\n\n- More Pclass 3 (54%) passengers survived than Pclass 2 and Pclass 1\n- Passengers who embarked at S had the highest survival rate (85.7%).\n\n[back to contents](#Contents)","c7297077":"## Introduction\n\nStarting from January this year, the kaggle competition team is offering a month-long tabulary playground competitions. This series aims to bridge between inclass competition and featured competitions with a friendly and approachable datasets.\n\nFor April kaggle is offering a dataset which is synthetic but based on a real dataset and generated using a CTGAN. This time the features are not anonymized, they are based on the famous titanic dataset.\n\n\n#### Data Dictionary\n#### Variable: Definition (Key)\n- **survival**:\tSurvival(0 = No, 1 = Yes)\n- **pclass**:\tTicket class(1 = 1st, 2 = 2nd, 3 = 3rd)\n- **sex**: Sex (male, female)\t\n- **Age**: Age in years\t\n- **sibsp**:\tNumber of siblings \/ spouses aboard the Titanic\t\n- **parch**:\tNumber of parents \/ children aboard the Titanic\t\n- **ticket**:\tTicket number\t\n- **fare**:\tPassenger fare\t\n- **cabin**:\tCabin number\t\n- **embarked**:\tPort of Embarkation(C = Cherbourg, Q = Queenstown, S = Southampton)\n","d20a1409":"### Import libraries, load data","8c837e46":"### Survival by family (SibSP, Parch)\n","4c702fda":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Table of Content<\/h3>\n    \n* [Part-0: Introduction](#Introduction)\n    * [Import libraries, load data](#Import-libraries,-load-data)\n* [Part-1: Data Overview](#Data-Overview)\n    * [View data table, stats summary](#View-data-table,-stats-summary)\n    * [Unique cats and missing values](#Unique-cats-and-missing-values)\n    * [Features distribution](#Features-distribution)\n    * [Feature correlation](#Feature-correlation)\n* [Part-2.1: Survival by Features](#Survival-by-Features)\n    * [Survival by Age, Sex, Fare](#Survival-by-Age,-Sex,-Fare)\n    * [Survival by SibSP, Parch](#Survival-by-(SibSP,-Parch))\n    * [Survival by Embarked, Pclass](#Survival-by-Embarked,-Pclass)\n* [Part-2.2: Survival Features Interaction](#Survival-Features-Interaction)\n    * [Gender-Age survival](#Gender-Age-survival)\n    * [Pclass-Age Survival](#Pclass-Age-Survival)\n* [References](#References)","2256d134":"## Survival by Features","20ce2d42":"## Survival Features Interaction\n### Gender-Age survival \n- Male passengers had an average age of 37 years and females 42 years-old\n- Passengers who survived are slightly older than those who didn't\n\n### Pclass-Age Survival\n- Generally the age distribution is Pclass3 < Pclass2 < Pclass1. Except Pclass3 surviors tend to be younger than non-surviours.\n\n### Pclass-Sex Survival\n- As is the case with overall sex survival rate, in all Pclasses female passengers had the highest survival rate.\n\n[back to contents](#Contents)"}}