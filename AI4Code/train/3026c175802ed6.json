{"cell_type":{"7afc2896":"code","48964860":"code","c44b8ccb":"code","7df3aeda":"code","63ca234f":"code","c07ac43e":"code","956db047":"code","89fd511d":"code","22c90d7e":"code","474760ad":"code","44d53fe1":"code","f032f610":"code","55aef20c":"code","ccdd2884":"code","b43a9186":"code","a2447a13":"code","755c4a45":"code","bc2d0a15":"code","c6f8e566":"code","08fb9082":"code","5024270a":"code","77c61930":"code","0c5e8dd5":"code","f61d5125":"code","37b721a8":"code","c77c6f20":"code","9b89e1e9":"code","e8875f47":"code","701e7580":"code","86e1526c":"code","237d60f5":"markdown","449e437e":"markdown","167c9358":"markdown","c566fcf2":"markdown","f3c49b40":"markdown","8e195887":"markdown","55311559":"markdown","c9878526":"markdown","7ee85516":"markdown","59f1f17d":"markdown","3e0a939a":"markdown","0ec9d117":"markdown"},"source":{"7afc2896":"import pandas as pd\nimport numpy as np","48964860":"import pandas as pd\n#data=pd.read_csv('..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ndata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nprint(data.shape)\ndata.head()","c44b8ccb":"dataset = data.sample(frac=0.95, random_state=786).reset_index(drop=True)\ndata_unseen = data.drop(dataset.index).reset_index(drop=True)\n\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))","7df3aeda":"#target = 'default.payment.next.month'\ntarget = 'SalePrice'\ndataset.head(1)","63ca234f":"!pip install autoviml --upgrade","c07ac43e":"from autoviml.Auto_ViML import Auto_ViML","956db047":" m, feats, trainm, testm = Auto_ViML(dataset, target, data_unseen,\n                            sample_submission='',\n                            scoring_parameter='', KMeans_Featurizer=False,\n                            hyper_param='RS',feature_reduction=True,\n                             Boosting_Flag=True, Binning_Flag=False,\n                            Add_Poly=0, Stacking_Flag=False,Imbalanced_Flag=True,\n                            verbose=2)","89fd511d":"!pip install pycaret","22c90d7e":"#import regression and classification modules from pycaret\n#from pycaret.classification import *\nfrom pycaret.regression import *","474760ad":"help(setup)","44d53fe1":" reg = setup(data = data, target = target, train_size=0.8,\n                ignore_features=['Id'], session_id=21, imputation_type='iterative',\n                normalize=True, pca=True, pca_method='kernel', \n                transform_target=False, ignore_low_variance = True, \n                combine_rare_levels = True, remove_outliers=True)","f032f610":"compare_models()","55aef20c":"### we can remove a few models \nlr = compare_models(exclude = ['en','dt','omp', 'gbr','ada', 'par'], n_select=2)","ccdd2884":"lr","b43a9186":"lr[1]","a2447a13":"rf = create_model('rf')","755c4a45":"# Tune the Logistic regression model\ntuned_lr = tune_model('lr')","bc2d0a15":"# Tune the Decision Tree Classifier model\ntuned_dt = tune_model('dt')","c6f8e566":"# Tune the K Neighbors Classifier model\ntuned_knn = tune_model('knn')","08fb9082":"# Tune the Random Forest Classifier model\ntuned_rf = tune_model('rf')","5024270a":"#Plot LR model: ROC-AUC curve\nplot_model(lr)","77c61930":"#Plot LR model: ROC-AUC curve\nplot_model(tuned_lr)","0c5e8dd5":"#Plot Decision Tree model: ROC-AUC curve\nplot_model(dt)","f61d5125":"#Plot KNN model: ROC-AUC curve\nplot_model(knn)","37b721a8":"evaluate_model(lr)","c77c6f20":"#create a tree base model to interpret model and check feature importance\ndt = create_model('dt')\n#interpret a model\ninterpret_model(dt)","9b89e1e9":"#optimize threshold for trained LR model\noptimize_threshold(lr)","e8875f47":"!pip install autoviz","701e7580":"import pandas as pd\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","86e1526c":"sep = ','\ntarget = 'medv'\ndatapath = ''\nfilename = 'https:\/\/raw.githubusercontent.com\/vincentarelbundock\/Rdatasets\/master\/csv\/MASS\/Boston.csv'\ndft = AV.AutoViz(datapath+filename, sep=sep, depVar=target, dfte='', header=0, verbose=2,\n                            lowess=False,chart_format='svg',max_rows_analyzed=1500,max_cols_analyzed=30)","237d60f5":"## You have to just give the dataset, data_unseen and target variable. That's all!","449e437e":"# Conclusion <a id=\"8\"><\/a> <br>\n\nHence Automated ML tools is enabling data scientists to improve their productivity and realize their true potential quickly and time to market with quicker insights. I hope you find this kernel useful and will use the above tools to good effect in your day to day data science career path.\n\n# If you like this kernel greatly appreciate to <font color='red'>UPVOTE\u00a0","167c9358":"To analyze the performance of models is to use the **evaluate_model()** function which displays a user interface for all of the available plots for a given model. It internally uses the plot_model() function.","c566fcf2":"There you go created over 15 models using 10 fold stratified cross validation and evaluated the 6 most commonly used classification metrics (Accuracy, AUC, Recall, Precision, F1, Kappa). The score grid printed above highlights the highest performing metric for comparison purposes only. The grid by default is sorted using 'Accuracy' (highest to lowest) which can be changed by passing the sort parameter. For example **compare_models(sort = 'Recall')** will sort the grid by Recall instead of Accuracy. If you want to change the fold parameter from the default value of 10 to a different value then you can use the fold parameter. For example **compare_models(fold = 5)** will compare all models on 5 fold cross validation. Reducing the number of folds will improve the training time.\n## 4.3 Create model<a id=\"43\"><\/a> <br>\nWhile compare_models() is a powerful function and often a starting point in any experiment, it does not return any trained models. PyCaret's recommended experiment workflow is to use compare_models() right after setup to evaluate top performing models and finalize a few candidates for continued experimentation. As such, the function that actually allows to you create a model is unimaginatively called **create_model()**.\n\nThere are 18 classifiers available in the model library of PyCaret. \n\nFor illustration purposes only we will be considering the following Classifiers .\n\n* Logistic Regression('lr')\n* Decision Tree Classifier ('dt')\n* K Neighbors Classifier ('knn')\n* Random Forest Classifier ('rf')","f3c49b40":"## 4.1 Load Dataset<a id=\"41\"><\/a> <br>\n\nTo demonstrate the pycaret capability we will use a dataset from UCI called **Default of Credit Card Clients Dataset**. This dataset contains information on default payments, demographic factors, credit data, payment history, and billing statements of credit card clients in Taiwan from April 2005 to September 2005. There are 24,000 samples and 25 features. Short descriptions of each column are as follows:\n\n- **ID:** ID of each client\n- **LIMIT_BAL:** Amount of given credit in NT dollars (includes individual and family\/supplementary credit)\n- **SEX:** Gender (1=male, 2=female)\n- **EDUCATION:** (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n- **MARRIAGE:** Marital status (1=married, 2=single, 3=others)\n- **AGE:** Age in years\n- **PAY_0 to PAY_6:** Repayment status by n months ago (PAY_0 = last month ... PAY_6 = 6 months ago) (Labels: -1=pay duly, 1=payment delay for one month, 2=payment delay for two months, ... 8=payment delay for eight months, 9=payment delay for nine months and above)\n- **BILL_AMT1 to BILL_AMT6:** Amount of bill statement by n months ago ( BILL_AMT1 = last_month .. BILL_AMT6 = 6 months ago)\n- **PAY_AMT1 to PAY_AMT6:** Amount of payment by n months ago ( BILL_AMT1 = last_month .. BILL_AMT6 = 6 months ago)\n- **default.payment.next.month:** Default payment (1=yes, 0=no) `Target Column`","8e195887":"## Let's build a model using Auto_ViML first","55311559":"# We are going to use AutoViML and PyCaret to build better models for Housing Prices\n## Please turn on the GPU on this kernel to the right in Accelerator => GPU\n###  Please \n### This is a modified version of a fantastic original notebook here:\nhttps:\/\/www.kaggle.com\/pavansanagapati\/6-useful-automated-ml-tools-for-data-scientists\n","c9878526":"**Note:**\n\nNotice how the results after tuning have been improved:\n\n* Logistic Regression(Before: 0.7786 , After: 0.7786)\n* Decision Tree Classifier (Before: 0.7216 , After: 0.7413)\n* K Neighbors Classifier (Before: 0.7355 , After: 0.7772)\n* Random Forest Classifier (Before: 0.8015 , After: 0.8103)\n\n## 4.5 Plot Model<a id=\"45\"><\/a> <br>\n\nBefore model finalization, the `plot_model()` function can be used to analyze the performance across different aspects such as AUC, confusion_matrix, decision boundary etc. This function takes a trained model object and returns a plot based on the test \/ hold-out set. \n\nThere are 15 different plots available.","7ee85516":"Notice that the mean score of all models matches with the score printed in compare_models(). This is because the metrics printed in the compare_models() score grid are the average scores across all CV folds. Similar to compare_models(), if you want to change the fold parameter from the default value of 10 to a different value then you can use the fold parameter. For Example: create_model('dt', fold = 5) will create a Decision Tree Classifier using 5 fold stratified CV.\n## 4.4 Tune model<a id=\"44\"><\/a> <br>\nWhen a model is created using the create_model() function it uses the default hyperparameters. In order to tune hyperparameters, the tune_model() function is used. This function automatically tunes the hyperparameters of a model on a pre-defined search space and scores it using stratified cross validation. The output prints a score grid that shows Accuracy, AUC, Recall, Precision, F1 and Kappa by fold.\n\nNow let us tune the below models \n* Logistic Regression('lr')\n* Decision Tree Classifier ('dt')\n* K Neighbors Classifier ('knn')\n* Random Forest Classifier ('rf')","59f1f17d":"# Let's Compare it to PyCaret","3e0a939a":"# 6.AutoViz<a id=\"6\"><\/a> <br>\n![](https:\/\/github.com\/AutoViML\/AutoViz\/raw\/master\/logo.png)\nAutomatically Visualize any dataset, any size with a single line of code.\n\nAutoViz performs automatic visualization of any dataset with one line. Give any input file (CSV, txt or json) and AutoViz will visualize it.","0ec9d117":"In order to demonstrate the predict_model() function on unseen data, a sample of 1500 records has been withheld from the original dataset to be used for predictions. This should not be confused with a train\/test split as this particular split is performed to simulate a real life scenario. Another way to think about this is that these 1500 records are not available at the time when the machine learning experiment was performed."}}