{"cell_type":{"36467416":"code","6da5b8d8":"code","42b727c8":"code","f8ebd804":"code","632da566":"code","18416cba":"code","78152bf0":"code","e82c274d":"code","1ac38caa":"code","e1111e1e":"code","5ba81d24":"code","3960b533":"code","fcc3f5b8":"code","c96101c2":"code","09f7cc8c":"code","64dd28c5":"code","85e613a4":"code","b8976ad4":"code","037cff5a":"code","3e548848":"code","858a8f56":"code","895a7ff1":"code","ef23a1d8":"code","0f85b782":"code","dfb7be2e":"code","fcb4d6a9":"code","d6576446":"code","d4a0841f":"code","cd9ddf26":"code","0d39a61b":"code","c4b8d768":"code","56d35cec":"code","b479c3e7":"code","42cb1fa9":"code","d8c0dfcf":"code","3571f97b":"code","e4e5245a":"code","8ace3f1a":"code","b585418f":"code","5eae87f3":"code","7cf59581":"code","ffdc8635":"code","aeac165c":"code","57d7c851":"code","74a713d8":"code","74e5f6e8":"code","b28c6e34":"code","69277a51":"code","dff141c5":"code","87da78dd":"code","c741465b":"code","85fe38e8":"code","c97e9393":"code","ffaaebdd":"code","edd0bd86":"code","09c73a26":"code","29b4a243":"code","4afb5314":"code","bb80ead8":"code","0b8b785c":"code","88663f22":"code","f6796ef5":"code","488c2da8":"code","8dc36708":"code","1c21e540":"code","2bd743de":"code","c1e6e34a":"code","6e4cf607":"code","21202ba0":"code","ea9ea24c":"code","02945ee7":"code","109f8e9b":"code","08ad2f8e":"code","948d1d25":"markdown","427fa1b4":"markdown","db334553":"markdown","0f63296f":"markdown","6f698dc2":"markdown","c2b3d8f3":"markdown","e33784ef":"markdown","1431823f":"markdown","b72f1204":"markdown","c982d903":"markdown","1eb8d438":"markdown","9111ba2e":"markdown","74bb41c4":"markdown"},"source":{"36467416":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (15,8)","6da5b8d8":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head()","42b727c8":"data.shape","f8ebd804":"data.describe()","632da566":"data.isnull().sum() \/ len(data) *100","18416cba":"data.info()","78152bf0":"data.drop(['id', 'name', 'host_id', 'host_name'], axis = 1, inplace = True)","e82c274d":"data.head()","1ac38caa":"missing_values = [feature for feature in data.columns if data[feature].isnull().sum() > 0]\n\nfor feature in missing_values:\n    print('{}: {}% missing values'.format(feature, np.round(data[feature].isnull().mean(), 4)))","e1111e1e":"categorical_nan = [feature for feature in missing_values if data[feature].dtype == 'O']\nfor feature in categorical_nan:\n    print('{}: {}% missing values'.format(feature, np.round(data[feature].isnull().mean(), 4)))","5ba81d24":"data['last_review'].fillna(data['last_review'].mode()[0], inplace = True)","3960b533":"numerical_nan = [feature for feature in missing_values if data[feature].dtype != 'O']\nfor feature in numerical_nan:\n    print('{}: {}% missing values'.format(feature, np.round(data[feature].isnull().mean(), 4)))","fcc3f5b8":"data['reviews_per_month'].fillna(data['reviews_per_month'].median(), inplace = True)","c96101c2":"data.isnull().sum().sum()","09f7cc8c":"numerical_feature = [feature for feature in data.columns if data[feature].dtype != 'O']\ndata[numerical_feature].head()","64dd28c5":"discrete_feature = [feature for feature in numerical_feature if len(data[feature].unique()) < 25 and feature not in ['price']]\ndiscrete_feature","85e613a4":"continues_feature = [feature for feature in numerical_feature if feature not in discrete_feature and feature not in ['longitude']]\nlist(continues_feature)","b8976ad4":"for feature in continues_feature:\n    df = data.copy()\n    df[feature].hist(bins = 25)\n    plt.title('Distribution of '+feature)\n    plt.xlabel(feature)\n    plt.ylabel('Distribution')\n    plt.show()","037cff5a":"for feature in continues_feature:\n    df = data.copy()\n    if 0 in df[feature].unique():\n        pass\n    else:\n        df[feature] = np.log(df[feature])\n        df[feature].hist(bins = 25)\n        plt.title('Distribution of '+feature)\n        plt.xlabel(feature)\n        plt.ylabel('Distribution')\n        plt.show()","3e548848":"categorical_feature = [feature for feature in data.columns if data[feature].dtype == 'O']\ndata[categorical_feature].head()","858a8f56":"for feature in categorical_feature:\n    df = data.copy()\n    df.groupby(feature)['price'].median().plot.bar()\n    plt.title(feature+' vs price per night')\n    plt.xlabel(feature)\n    plt.ylabel('price -->')\n    plt.show()","895a7ff1":"data.shape","ef23a1d8":"data = data[~(data['price'] == 0)]","0f85b782":"data.shape","dfb7be2e":"data.head()","fcb4d6a9":"data.boxplot(column = 'price')","d6576446":"q1, q3 = np.percentile(data['price'], [25, 75])\nprint(q1, '<-->', q3)","d4a0841f":"iqr = q3 - q1\nprint('Interquartile:', iqr)","cd9ddf26":"lower = q1 - (1.5 * iqr)\nupper = q3 + (1.5 * iqr)","0d39a61b":"data[data['price'] < lower]","c4b8d768":"data = data[data['price'] < upper]","56d35cec":"data.shape","b479c3e7":"data.boxplot(column = 'price')","42cb1fa9":"data.head()","d8c0dfcf":"data['last_review'] = pd.to_datetime(data['last_review'])","3571f97b":"data['year_review'] = data['last_review'].apply(lambda x: x.year)\ndata['month_review'] = data['last_review'].apply(lambda x: x.month)\ndata['day_review'] = data['last_review'].apply(lambda x: x.day)","e4e5245a":"data.drop('last_review', axis = 1, inplace = True)","8ace3f1a":"data.head()","b585418f":"for feature in continues_feature:\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data[feature].hist(bins = 25)\n        plt.title(feature)\n        plt.xlabel(feature)\n        plt.show()","5eae87f3":"data.head()","7cf59581":"categorical_feature = [feature for feature in data.columns if data[feature].dtype == 'O']\ndata[categorical_feature].head()","ffdc8635":"for feature in categorical_feature:\n    temp = data[feature].value_counts() \/ len(data)*100\n    temp = temp[temp > 1].index\n    data[feature] = np.where(data[feature].isin(temp), data[feature], 'Rare_var')","aeac165c":"data.head(10)","57d7c851":"from sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\ndata[categorical_feature] = data[categorical_feature].apply(label.fit_transform)","74a713d8":"data.head()","74e5f6e8":"feature_scaler = [feature for feature in data.columns if feature not in ['price']]\ndata[feature_scaler].head()","b28c6e34":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(data[feature_scaler])","69277a51":"scaler.transform(data[feature_scaler])","dff141c5":"data = pd.concat([data['price'].reset_index(drop = True), pd.DataFrame(scaler.transform(data[feature_scaler]),\n                columns = feature_scaler)], axis = 1)","87da78dd":"data.head()","c741465b":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import Lasso","85fe38e8":"X = data.drop('price', axis = 1)\ny = data['price']","c97e9393":"feature_sel_model = SelectFromModel(Lasso(alpha = 0.005, random_state = 42))\nfeature_sel_model.fit(X, y)","ffaaebdd":"feature_sel_model.get_support()","edd0bd86":"selected_feat = X.columns[feature_sel_model.get_support()]","09c73a26":"X = X[selected_feat]","29b4a243":"from sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV, cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import make_scorer, r2_score, mean_squared_error\nimport math","4afb5314":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","bb80ead8":"def test_model(model, X_train = X_train, y_train = y_train):\n    cv = KFold(n_splits=3, shuffle=True, random_state=42)\n    score = cross_val_score(model, X_train, y_train, cv = cv, scoring=make_scorer(r2_score))\n    return print('Model Score:', score.mean())","0b8b785c":"linear = LinearRegression()\nlinear.fit(X, y)\ntest_model(linear)","88663f22":"linear_pred = linear.predict(X_test)\nprint('Linear Score:', r2_score(y_test, linear_pred))\nprint('Linear Error:', mean_squared_error(y_test, linear_pred))","f6796ef5":"random = RandomForestRegressor()\nrandom.fit(X, y)\ntest_model(random)","488c2da8":"random_pred = random.predict(X_test)\nprint('Random Score:', r2_score(y_test, random_pred))\nprint('Random Error:', mean_squared_error(y_test, random_pred))","8dc36708":"xgb = XGBRegressor()\nxgb.fit(X, y)\ntest_model(xgb)","1c21e540":"xgb_pred = xgb.predict(X_test)\nprint('XGBoost Score:', r2_score(y_test, xgb_pred))\nprint('XGBoost Error:', mean_squared_error(y_test, xgb_pred))","2bd743de":"np.exp(y_test)","c1e6e34a":"np.exp(random_pred)","6e4cf607":"np.exp(xgb_pred)","21202ba0":"n_estimators = [100, 200, 500, 700, 900, 1000, 1100, 1500]\nlearning_rate = [0.01, 0.05, 0.1, 0.15, 0.2, 0.25]\ngamma = [0.0, 0.1, 0.2, 0.3, 0.4]\nmax_depth = [1,3,5,7,15]\nmin_child_weight = [1,2,3,4,5]\nbooster = ['gbtree', 'gblinear']\nbase_score = [0.25, 0.5, 0.75, 1]\n\nhyper_parameter = {\n    'n_estimators': n_estimators,\n    'learning_rate': learning_rate,\n    'gamma': gamma,\n    'max_depth': max_depth,\n    'min_child_weight': min_child_weight,\n    'booster': booster,\n    'base_score': base_score\n}","ea9ea24c":"random_search = RandomizedSearchCV(xgb, param_distributions=hyper_parameter, n_iter=50,\n                                  cv= 5, n_jobs=-1, verbose = 3, return_train_score=True,\n                                 scoring=make_scorer(r2_score), random_state=42)\nrandom_search.fit(X_train, y_train)","02945ee7":"random_search.best_estimator_","109f8e9b":"xgb = XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0.2, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.05, max_delta_step=0, max_depth=7,\n             min_child_weight=4, missing=None, monotone_constraints='()',\n             n_estimators=700, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)\nxgb.fit(X, y)\ntest_model(xgb)","08ad2f8e":"xgb_pred = xgb.predict(X_test)\nprint('XGBoost Score:', r2_score(y_test, xgb_pred))\nprint('XGBoost MSE:', mean_squared_error(y_test, xgb_pred))","948d1d25":"2.Random Forest Regressor","427fa1b4":"## Numerical Feature\n~Discrete & Continues Feature","db334553":"## Feature Scaling","0f63296f":"## Data Cleansing","6f698dc2":"## Categorical Feature","c2b3d8f3":"## Handling Rare Values","e33784ef":"3.XGBoost Regressor","1431823f":"1.Linear Regression","b72f1204":"## Feature Selection","c982d903":"## Improve The Model","1eb8d438":"## Build The Model","9111ba2e":"## Label Encoder","74bb41c4":"Remove outliers"}}