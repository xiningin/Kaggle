{"cell_type":{"76d47227":"code","bd4fd859":"code","4f1d104a":"code","04b6e617":"code","b195c01f":"code","d8efbde4":"code","6bd7224c":"code","7dea2b41":"code","b53211d5":"code","30022ae7":"code","521d6d26":"code","6dd580db":"code","9fb56e90":"code","2da325fb":"code","0e2c17ab":"code","4d2a7d6e":"code","ebdc3fe9":"code","1099f0b8":"markdown","262d8c0a":"markdown","6b73adb7":"markdown","2027fcb5":"markdown","c5bdd808":"markdown"},"source":{"76d47227":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd4fd859":"df = pd.read_csv(\"..\/input\/company-bankruptcy-prediction\/data.csv\")","4f1d104a":"df.describe()","04b6e617":"(df.isnull().sum())\/len(df) * 100","b195c01f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.countplot(x='Bankrupt?',data=df)","d8efbde4":"print(df['Bankrupt?'].value_counts())","6bd7224c":"plt.figure(figsize=(20,10))\ndf.corr()['Bankrupt?'][:].sort_values().plot(kind='bar')","7dea2b41":"cor_target = abs(df.corr()['Bankrupt?'])\nset_features = cor_target[cor_target > 0.2]\nprint(set_features)","b53211d5":"df = df[set_features.index]\ndf.head()","30022ae7":"plt.figure(figsize=(12,8))\ndf.corr()['Bankrupt?'][:].sort_values().plot(kind='bar')","521d6d26":"#Pick up feature set and the labels\nX = df.drop('Bankrupt?',axis=1).values\ny = df['Bankrupt?'].values","6dd580db":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom collections import Counter\n\n#Split the dataset into 80:20\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\n\n#Do oversampling for the train set using SMOTE\nfrom imblearn.combine import SMOTEENN\n\nsmn = SMOTEENN()\n\n\nprint(\"Counts before SMOTE\")\nprint(Counter(y_train))\n\nX_res,y_res = smn.fit_resample(X_train,y_train)\nprint(\"Counts after SMOTE\")\nprint(Counter(y_res))\n\n","9fb56e90":"classifier = XGBClassifier(objective= 'binary:logistic', eval_metric='error', max_depth = 8,max_delta_step=1,\n                           learning_rate= 0.0003, n_estimators=6000,subsample=0.5,\n                           use_label_encoder=False)\n\nclassifier.fit(X_res, y_res)","2da325fb":"# evaluate predictions\nfrom sklearn.metrics import confusion_matrix, average_precision_score, roc_auc_score, roc_curve, classification_report, precision_recall_curve, f1_score\n    \ny_prob=classifier.predict_proba(X_test)\ny_pred = classifier.predict(X_test)\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\nroc_xgb = roc_auc_score(y_test, y_prob[:,1])\nprint('ROC-AUC', roc_xgb)\nprint('='*20)\nprint('Confusion Matrix')\ncm_xgb = confusion_matrix(y_test, y_pred)\nprint(cm_xgb)\nsns.heatmap(cm_xgb, annot=True, cmap='viridis')\ncl_xgb = classification_report(y_test,y_pred )\nprint(cl_xgb)","0e2c17ab":"from sklearn.linear_model import LogisticRegression\n","4d2a7d6e":"logmodel = LogisticRegression(C=3.0, max_iter=1000)\nlogmodel.fit(X_res,y_res)","ebdc3fe9":"predictions = logmodel.predict(X_test)\naccuracy = metrics.accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\ny_prob=logmodel.predict_proba(X_test)\n#print('ROC-AUC')\nroc_lin = roc_auc_score(y_test, y_prob[:,1])\nprint('ROC-AUC:', roc_lin)\nprint('='*20)\nprint(' Confusion Matrix')\ncm_lin = confusion_matrix(y_test, predictions)\nprint(cm_lin)\nsns.heatmap(cm_lin, annot=True, cmap='viridis')\ncl_lin = classification_report(y_test,predictions)\nprint(cl_lin)","1099f0b8":"#### Let's check the correlation of features to the Bankrup label.","262d8c0a":"### Heavily imbalanced data. Training set will be oversampled using SMOTEENN","6b73adb7":"#### The dataset is skewed, so oversample only the train data with SMOTE. Keep the test data separate to prevent any feature leakage.","2027fcb5":"#### There are too many features and need to filter out them. Let's use those with correlation > 0.2","c5bdd808":"## Logistic Regressions Model"}}