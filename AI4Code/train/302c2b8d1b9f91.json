{"cell_type":{"b6beab86":"code","04368c30":"code","205374ba":"markdown","114e8e95":"markdown","b7cf1c7b":"markdown"},"source":{"b6beab86":"import numpy as np \nimport pandas as pd\nimport os\nimport json\nfrom tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import load_img, img_to_array\nfrom IPython.display import Image, display","04368c30":"# adapted from https:\/\/www.kaggle.com\/dansbecker\/programming-in-tensorflow-and-keras\n\nimage_size = 224\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    output = preprocess_input(img_array)\n    return(output)\n\ndef decode_predictions(preds, top=5, class_list_path=None):\n    if len(preds.shape) != 2 or preds.shape[1] != 1000:\n        raise ValueError('`decode_predictions` expects '\n                     'a batch of predictions '\n                     '(i.e. a 2D array of shape (samples, 1000)). '\n                     'Found array with shape: ' + str(preds.shape))\n    CLASS_INDEX = json.load(open(class_list_path))\n    results = []\n    for pred in preds:\n        top_indices = pred.argsort()[-top:][::-1]\n        result = [tuple(CLASS_INDEX[str(i)]) + (pred[i],) for i in top_indices]\n        result.sort(key=lambda x: x[2], reverse=True)\n        results.append(result)\n    return results\n\nimage_paths = '..\/input\/sample-images-for-kaggle-demos'\nimage_paths = [os.path.join(image_paths,filename) for filename in os.listdir(image_paths)]\nimage_data = read_and_prep_images(image_paths)\nimg_paths = image_paths\nmy_model = ResNet50(weights='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels.h5')\ntest_data = read_and_prep_images(img_paths)\nmy_preds = my_model.predict(test_data)\npreds = my_preds\nmost_likely_labels = decode_predictions(preds, top=1, class_list_path='..\/input\/resnet50\/imagenet_class_index.json')\n\nfor i, img_path in enumerate(img_paths):\n    display(Image(img_path))\n    print(most_likely_labels[i])","205374ba":"![](https:\/\/i.imgur.com\/8PCLIKD.png)\n","114e8e95":"**The Kaggle community** has the three necessary ingredients for data science: data, code, and people.  \n\n* Explore discussion posts on advanced topics: ([Link #1](https:\/\/www.kaggle.com\/sudalairajkumar\/winning-solutions-of-kaggle-competitions))\n\nA **kernel** contains the data, the code, and the environment that is necessary to run that code.  With kernels you can reproduce a data science project with just one click.\n\n* Explore kernels on advanced topics: ([Link #2](https:\/\/www.kaggle.com\/shivamb\/data-science-glossary-on-kaggle\/))\n","b7cf1c7b":"![](https:\/\/i.imgur.com\/8PCLIKD.png)\n"}}