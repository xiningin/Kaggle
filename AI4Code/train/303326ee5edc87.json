{"cell_type":{"a5fecb7d":"code","0bf088a5":"code","855759fa":"code","5ee5e40b":"code","ad1b0211":"code","c6fda950":"code","86a0003c":"code","1d56fd8c":"code","89defe7d":"code","63f9aa44":"code","35aec3a8":"code","63f348ca":"code","de943875":"code","5b58afd2":"code","49ee3fa3":"markdown","dc604601":"markdown","cf5b112b":"markdown","4500cf95":"markdown","c94b8330":"markdown","826e5294":"markdown","56f4d0c0":"markdown","1ef48af9":"markdown","c7757833":"markdown","e7f8202c":"markdown","ac22925d":"markdown","8cd28580":"markdown","ac7e7e61":"markdown","3e5f80d5":"markdown"},"source":{"a5fecb7d":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nimport numpy as np","0bf088a5":"(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()","855759fa":"class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n               'dog', 'frog', 'horse', 'ship', 'truck']","5ee5e40b":"IMG_INDEX = 3\nplt.imshow(train_images[IMG_INDEX])\nplt.xlabel(class_names[train_labels[IMG_INDEX][0]])\nplt.show()","ad1b0211":"train_images, test_images = train_images \/ 255.0, test_images \/ 255.0","c6fda950":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","86a0003c":"model.summary()","1d56fd8c":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))\nmodel.summary()","89defe7d":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","63f9aa44":"model.fit(train_images, train_labels, validation_split = 0.1, epochs=6)","35aec3a8":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=1)\nprint(test_acc)","63f348ca":"predictions = model.predict(test_images)","de943875":"def show_prediction(img):\n    i=img\n    plt.figure()\n    plt.imshow(test_images[i])\n    plt.show()\n    print(\"the prediction is\",class_names[np.argmax(predictions[i])]+\" and real picture is of \",class_names[np.int(test_labels[i])]) ","5b58afd2":"show_prediction(2222)","49ee3fa3":"It is advisable to normalise the data before we move further for training the model.\n\nwe know that each pixal is represented by a number in a matrix in the range of 0-255; black-white. By dividing 255, we could transform it in the range of 0-1. This would save time while training and could improve the model performance","dc604601":"check the model performance on testing data","cf5b112b":"Hyper-parameter tuning for the nural network model to optimise our neural network use Adam; an algorithm for gradient-based optimization of stochastic objective function.It is computationally efficient and requires little memory. To calculate the loss in every new model use sparse_categorical_crossentropy; it is the categorical cross entropy. Sparse means that it does use all the possible classes but some of them. This is useful when you have more classes, where softmax would be a very slow function and imrovement we want is accuracy.","4500cf95":"check the results with model predition with the facts for desired picture number.","c94b8330":"Firstly import tensorflow and basic supporting libraries","826e5294":"After completeing the convolutional base exact the features.\nLayers\n1. first flatten the matrix and make data in a single data vector\n2. hidden layer with activation method Rectified Linear Unit\n3. output layer with activation method softmax (gives probability distribution of classes) \nhave a look at final Network","56f4d0c0":"Now have a look at the network we built","1ef48af9":"After normalising the data, start building the neural network.\nLayers\n1. The input shape  32, 32, 3 and we will process 32 filters of size 3x3 on input data with activation function relu to the output      of each convolution operation.\n2. This layer will perform the max pooling operation using 2x2 samples and a stride of 2; reducing our matrix by two stride shifts\n3. Again process 32 filters of size 3x3 on input data with activation function relu to the output of each convolution operation.\n4,5repeated the layers.\n","c7757833":"In this kernel, I have tried to explain the workflow of Convolutional Neural Network categorical computer vision problem with the help of tensorflow and keras in Python.\n\nPipeline\n\n1. Acquire training and testing data\n2. Normalizing data\n3. Convolutional Neural network Model building\n4. Convolutional Neural network hyper-parameter tuning\n5. Train the Convolutional Neural Network\n6. Result assessment\n7. Prediction\n8. Prediction check","e7f8202c":"prediction on test data","ac22925d":"The labels are in number, thus we need to assign the class name to each number 0-9. Total 10 classes","8cd28580":"using Matplotlib lets see the fourth image","ac7e7e61":"import dataset from keras and splitting the data into training and testing dataset\n60000 images of 10 different categories in training dataset, 10000 images in testing dataset","3e5f80d5":"train the model on training data with 6 iterations"}}