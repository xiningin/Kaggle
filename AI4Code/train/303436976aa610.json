{"cell_type":{"83d30bc9":"code","e3985ceb":"code","5575380d":"code","82abd9ce":"code","4af9eb12":"code","acf02122":"code","68308284":"code","ce3eabfb":"code","664a3b2b":"code","6628c188":"code","cb23c964":"code","b036013c":"code","31ad847e":"code","5efa1f56":"code","99532efa":"code","01321459":"code","982ffc4d":"markdown","72c502cc":"markdown","c1545f1e":"markdown","d56fbe45":"markdown","07b67441":"markdown","094c1781":"markdown","42b0327f":"markdown","00215cac":"markdown","c60f9af6":"markdown"},"source":{"83d30bc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3985ceb":"winequality = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\nwinequality.head()","5575380d":"X=winequality.drop(\"quality\",axis=1)\ny=winequality[\"quality\"]","82abd9ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","4af9eb12":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train,y_train)","acf02122":"model.score(X_test,y_test)","68308284":"y_preds = model.predict(X_test)\ny_preds[:20]","ce3eabfb":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nprint(classification_report(y_test,y_preds))","664a3b2b":"conf_matrix = confusion_matrix(y_test,y_preds)\nprint(conf_matrix)","6628c188":"accuracy_score(y_test,y_preds)","cb23c964":"model.predict_proba(X_test[:5])","b036013c":"np.random.seed(42)\nfrom sklearn.model_selection import cross_val_score\nfor est in range(10,200,10):\n    print(f\"Trying with {est} estimators:\")\n    model = RandomForestClassifier(n_estimators= est).fit(X_train,y_train)\n    score = model.score(X_test,y_test)*100\n    print(f\"Model Accuracy Score: {score}%\")\n    crossvalscore = np.mean(cross_val_score(model,X,y,cv=5)) *100\n    print(f\"Cross-Validation Score: {crossvalscore}%\\n\")","31ad847e":"from sklearn.model_selection import GridSearchCV\nparam_grid = {'n_estimators': [i for i in range(10,200,10)]}\ngrid = GridSearchCV(RandomForestClassifier(),\n                   param_grid,\n                   cv=5)\ngrid.fit(X,y)\n\ngrid.best_params_","5efa1f56":"model = grid.best_estimator_\nmodel = model.fit(X_train,y_train)\n\nmodel.score(X_test,y_test)","99532efa":"import pickle\npickle.dump(model,open(\"RedWineModel.pkl\",\"wb\"))","01321459":"loadmodel = pickle.load(open(\"RedWineModel.pkl\",\"rb\"))\nloadmodel.score(X_test,y_test)","982ffc4d":"#### 3. Splitting into Train and Test Data","72c502cc":"# Red Wine Quality Prediction using Random Forest\n### Loading Dataset and Preparing Dataset\n#### 1. Reading File","c1545f1e":"### Save Model and Reload Model","d56fbe45":"### Prediction","07b67441":"### Classification Report and Confusion Matrix","094c1781":"### Finding Best Estimator","42b0327f":"#### 2. Splitting into X and y","00215cac":"### Prediction Probability","c60f9af6":"### Fitting into Model"}}