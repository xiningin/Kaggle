{"cell_type":{"f0be4f84":"code","252aa979":"code","1bcc075e":"code","53850043":"code","271be383":"code","a571eddc":"code","cfe738f4":"code","30c50215":"markdown","bcddefa5":"markdown","8fe8a5ab":"markdown","28d00656":"markdown","3f1334f3":"markdown","11b06ca0":"markdown","78160ae5":"markdown"},"source":{"f0be4f84":"import fastai\nimport pandas as pd\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.vision.all import *\nfrom fastai.data.all import *","252aa979":"csv_path = \"\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv\"\nskin_df = pd.read_csv(csv_path)\nskin_df.sort_values(by=\"image_id\")","1bcc075e":"short_to_full_name_dict = {\n    \"akiec\" : \"Bowen's disease\", # very early form of skin cancer \n    \"bcc\" : \"basal cell carcinoma\" , # basal-cell cancer or white skin cancer\n    \"bkl\" : \"benign keratosis-like lesions\", # non-cancerous skin tumour\n    \"df\" : \"dermatofibroma\", # non-cancerous rounded bumps \n    \"mel\" : \"melanoma\", # black skin cancer\n    \"nv\" : \"melanocytic nevi\", # mole non-cancerous\n    \"vasc\" : \"vascular lesions\", # skin condition\n}","53850043":"img_to_class_dict = skin_df.loc[:, [\"image_id\", \"dx\"]] # returns only dx and image id column\nimg_to_class_dict = img_to_class_dict.to_dict('list')  # returns columns as lists in a dict\nimg_to_class_dict = {img_id : short_to_full_name_dict[disease] for img_id,disease in zip(img_to_class_dict['image_id'], img_to_class_dict['dx']) } # returns a dict mapping image id to disease name\n[x for x in img_to_class_dict.items()][:5]","271be383":"def get_label_from_dict(path):\n    return img_to_class_dict[path.stem] # path.stem returns the filename without suffix\n\nskin_db = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), # independent variable x is an image | dependent variabley is a category\n    item_tfms=[Resize(450), DihedralItem()], # DihedralItem all 4 90 deg roatations and for each: 2 horizonntal flips -> 8 orientations\n    batch_tfms=RandomResizedCrop(size=224, min_scale=0.75, max_scale=1.0), # Picks a random scaled crop of an image and resize it to size\n    get_items=get_image_files, # returns all images found in a folder and its subfolders\n    splitter=RandomSplitter(valid_pct=0.3, seed=42), # splits the the data in train and valid 70\/30 \n    get_y=get_label_from_dict, # specifies how to get the label of an image\n)\n\nimg_path = \"\/kaggle\/input\/skin-cancer-mnist-ham10000\"\n# skin_db.summary(img_path) # for debugging\ndls = skin_db.dataloaders(img_path) # create dataloader using img_path","a571eddc":"dls.show_batch(max_n=20, nrows=4) # show a batch of images with labels","cfe738f4":"learn = cnn_learner(dls, resnet18, metrics=accuracy, opt_func=ranger)\nlearn.fine_tune(epochs=30, freeze_epochs=3, base_lr=0.005, cbs=MixUp(0.5)) # use mixup with callbacks","30c50215":"### Create a function for getting the label.\n### Create a Datablock and specify Data Augmentation and 70\/30 train\/validation split.\n### Then create the dataloader itself that gets passed to the model\/learner.","bcddefa5":"### Read in metadata.","8fe8a5ab":"### Let's create a dictionary, mapping each image id to a disease.","28d00656":"# Here we are going to use Fastai to classify skin lesion. \n\n### For now let's rely only on the images for classification. \n\n### Let's start with basic imports.","3f1334f3":"### Translate shortcuts of diseases to english.","11b06ca0":"### Display some images with labels","78160ae5":"### Create learner with ResNet18 (pretrained), and specify optimizer as ranger.\n### Transfer learning with Mix up for 33 epochs.\n\nMix up is a very powerful technique that lets two images overlap and the corresponding one hot encoded label is no longer e.g. (0,0,0,1) it may be (0,0,0.5,0.5). \nSo maybe 50% cat and 50 % dog. \n\nThis is one of the most effective data augmentation techniques that is very good in stopping overfitting, but typically requires a lot of epochs to be worth it.\nEspecially for small datasets and top tier results mix up can be very helpful."}}