{"cell_type":{"3657f152":"code","acb499ff":"code","7038bd4a":"code","a5390854":"code","da9190ba":"code","d2f42f1b":"code","f29b1f22":"code","b2b51a05":"code","de8612d2":"code","f043346b":"code","8877ac75":"code","4550b8bd":"code","a1aa76a1":"code","263306e4":"code","1141dce4":"code","bea622a8":"code","a6ae7fb4":"code","62227bb6":"code","aa2c48dc":"code","3c33727b":"code","54bf8199":"code","e36d2bae":"markdown","c0051cca":"markdown"},"source":{"3657f152":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","acb499ff":"!pip install keras-tuner","7038bd4a":"import numpy as np","a5390854":"import tensorflow as tf\nfrom tensorflow import keras","da9190ba":"print(tf.__version__)","d2f42f1b":"fm=keras.datasets.fashion_mnist","f29b1f22":"(train_images,train_labels),(test_images,test_labels)=fm.load_data()","b2b51a05":"train_images","de8612d2":"train_images=train_images\/255.0","f043346b":"test_images=test_images\/255.0","8877ac75":"train_images[0].shape","4550b8bd":"len(train_images)","a1aa76a1":"train_images=train_images.reshape(len(train_images),28,28,1)","263306e4":"test_images=test_images.reshape(len(test_images),28,28,1)","1141dce4":"def build_model(hp):  \n  model = keras.Sequential([\n    keras.layers.Conv2D(\n        filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16),\n        kernel_size=hp.Choice('conv_1_kernel', values = [3,5]),\n        activation='relu',\n        input_shape=(28,28,1)\n    ),\n    keras.layers.Conv2D(\n        filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=16),\n        kernel_size=hp.Choice('conv_2_kernel', values = [3,5]),\n        activation='relu'\n    ),\n    keras.layers.Flatten(),\n    keras.layers.Dense(\n        units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16),\n        activation='relu'\n    ),\n    keras.layers.Dense(10, activation='softmax')\n  ])\n  \n  model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n  \n  return model","bea622a8":"from kerastuner import RandomSearch\nfrom kerastuner.engine.hyperparameters import HyperParameters","a6ae7fb4":"tuner_search=RandomSearch(build_model,objective='val_accuracy',max_trials=5,directory='output',project_name=\"Mnist Fashion\")","62227bb6":"tuner_search.search(train_images,train_labels,epochs=3,validation_split=0.1)","aa2c48dc":"model=tuner_search.get_best_models(num_models=1)[0]","3c33727b":"model.summary()","54bf8199":"model.fit(train_images, train_labels, epochs=10, validation_split=0.1, initial_epoch=3)","e36d2bae":"# Accuracy reached to 99.39% using Hyperparameter Optimisation..","c0051cca":"# We have to reshape it to (28,28,1) for the input in CNN"}}