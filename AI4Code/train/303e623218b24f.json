{"cell_type":{"62b1a8ee":"code","32e11815":"code","e50e1d42":"code","01b8d817":"code","064fd474":"code","f976285c":"code","1982ff30":"code","dfd66a35":"code","3c1e011e":"code","de54e09a":"code","2e46d2a8":"code","f94d611d":"code","b316f017":"code","37f58ab5":"code","f6001dda":"code","e3e4f7b3":"code","c4ac0612":"code","0c32bca1":"code","c50a7b2d":"code","f3cca9b0":"code","d716a0a4":"code","5b9e3bdb":"code","2ad239c9":"code","f2daa407":"code","5792465f":"code","ee6dade1":"code","46de9c76":"code","04ec7ab6":"code","500f0170":"code","28faf997":"code","139bcf1f":"code","a6d70332":"code","ca2af5b4":"code","ded7ac8a":"code","bedca8a1":"code","74b3fe38":"code","34ba8120":"code","56e3a04c":"markdown","6ac4befd":"markdown","66e79e32":"markdown","f5601091":"markdown","5fda7810":"markdown","b52d8458":"markdown","350f6a4c":"markdown","6720f27d":"markdown","bfcf918c":"markdown","188fceb7":"markdown","3f0ab74e":"markdown","60d02f87":"markdown"},"source":{"62b1a8ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\") #we close warnings\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32e11815":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","e50e1d42":"train_df.head()","01b8d817":"train_df.columns","064fd474":"train_df.describe()","f976285c":"passengerId= test_df['PassengerId']\n","1982ff30":"train_df.info()","dfd66a35":"train_df['Sex'].value_counts()","3c1e011e":"a= train_df['Sex'].index\na","de54e09a":"b= train_df['Sex'].index.values\nb","2e46d2a8":"varValue= train_df[\"Parch\"].value_counts()\nvarValue","f94d611d":"varValue= train_df[\"Parch\"].value_counts()\nvarValue\nplt.bar(varValue.index, varValue) \nplt.xticks(varValue.index, varValue.index.values)\n","b316f017":"varValue.index","37f58ab5":"def bar_plot(variable):\n    \"\"\"\n     input variable ex: sex, \n     output : bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable (value \/ sample)\n    varValue=var.value_counts()\n\n    #visialize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue) \n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    print(\"{}: \\n {}\".format(variable, varValue))","f6001dda":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","e3e4f7b3":"category2=[\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","c4ac0612":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","0c32bca1":"numericVar=[\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","c50a7b2d":"# Pclass vs Survived\ntrain_df[[\"Pclass\" , \"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False) ## we are trying to learn \"effect of Pclass\" to surviving\n","f3cca9b0":"train_df[[\"Sex\" , \"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)# we are trying to learn \"effect of Sex\" to surviving","d716a0a4":"train_df[[\"SibSp\" , \"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","5b9e3bdb":"train_df[[\"Parch\" , \"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","2ad239c9":"def detect_outliers(df, features): ##we are detecting outliers for numerical features\n    outlier_indices=[]\n    \n    for c in features:\n        #First Quartile\n        Q1 = np.percentile(df[c],25)\n        #Third Quartile\n        Q3= np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3-Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        #Detect Outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store outliers\n        outlier_indices.extend(outlier_list_col) # indexes of outliers are stored in outlier_indices\n    outlier_indices= Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2) # if data row has more that one outlier, remove it\n    \n    \n    return multiple_outliers\n\n\n\n","f2daa407":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","5792465f":"#drop outliers\ntrain_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis=0).reset_index(drop=True)","ee6dade1":"train_df_len = len(train_df)\ntrain_df= pd.concat([train_df, test_df], axis=0).reset_index(drop=True)\ntrain_df.head()","46de9c76":"train_df.columns[train_df.isnull().any()] # which columns has missing value","04ec7ab6":"train_df.isnull().sum()","500f0170":"train_df[train_df[\"Embarked\"].isnull()]","28faf997":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()\n# We see fare of embarked:C is close to 80. So we need to fill missing values with C","139bcf1f":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")","a6d70332":"train_df[train_df[\"Fare\"].isnull()]\n# Pclass can be related to fare bcz of that we will look at Pclass","ca2af5b4":"train_df[train_df[\"Pclass\"]==3]","ded7ac8a":"train_df[train_df[\"Pclass\"]==3][\"Fare\"]","bedca8a1":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","74b3fe38":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","34ba8120":"train_df[train_df[\"Fare\"].isnull()]","56e3a04c":"<a id='9'><\/a><br>\n\n # Find Missing Value","6ac4befd":"<a id='4'><\/a><br>\n# Categorical Variable","66e79e32":"<a id='5'><\/a><br>\n# Numerical Variable","f5601091":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwreck in the history. In 1912, during her voyage the titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color='blue'>\nContent: \n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n3. [Univariate Variable Analysis](#3)\n     * [Categorical Variable Analysis](#4)\n     * [Numerical Variable Analysis](#5)\n    \n4.[Basic Data Analysis](#6)\n    \n5.[Outlier Detection](#7)\n\n6.[Missing Value](#8)\n    *[Find Missing Value](#9)\n    *[Fill Missing Value](#10)\n","5fda7810":"<a id='1'><\/a><br>\n# 2. Variable Description\n\n1. PassengerId : unique id number to each passenger\n2. Survived : passenger survived(1) or died(0)\n3. Pclass : passenger class\n4. Name : name\n5. Sex : gender of passenger\n6. Age : age of passenger\n7. SibSp : number of siblings or spouses\n8. Parch : number of parent or children\n9. Ticket : amount of money spend of ticket\n10. Fare : fare of ticket\n11. Cabin : cabin category\n12. Embarked : port where passenger embarked(C= Cherbourg, S=Southampton Q\n","b52d8458":"* float64(2) : Fare ve age\n* int64(5) : PassengerId, Survived, Pclass, SibSp, Parch \n* object(5) : Name, Sex, Cabin, Embarked","350f6a4c":"<a id='6'><\/a><br>\n\n# 4. Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Sibsp - Survived\n* Parch - Survived","6720f27d":"<a id='10'><\/a><br>\n\n # Fill Missing Value\n * Embarked and fare has 2 missing value\n ","bfcf918c":"<a id='1'><\/a><br>\n# 1. Load and Check Data","188fceb7":"<a id='7'><\/a><br>\n# 5. Outlier Detection","3f0ab74e":"# 3. Univariate Variable Analysis\n * Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n * Numerical Variable : PassengerId, Age, Fare","60d02f87":"<a id='8'><\/a><br>\n# 6.Missing Value\n* Find Missing Value\n* Fill Missing Value\n"}}