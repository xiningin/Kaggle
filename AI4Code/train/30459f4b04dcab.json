{"cell_type":{"2855eae6":"code","b8bcf22e":"code","5d851734":"code","37584618":"code","389a7d5e":"code","e8c2c466":"code","57063cac":"code","be575f8c":"code","6b2a23e0":"code","1bbea200":"code","789b2a09":"code","d1b03f14":"code","132460ba":"code","3006558e":"code","72a6354e":"code","82c42cb1":"code","9768c752":"code","f2de8410":"code","54c78966":"code","7170cec1":"code","ee16a309":"code","76e5e8e6":"code","2afb1e60":"code","9f1e2d36":"code","1b995629":"code","6c617651":"code","b7d8fab3":"code","ec51d294":"code","398c6421":"code","45edb1a8":"code","cc1d4e91":"code","19b2fd94":"code","f84331a8":"code","5241bada":"code","6a51c108":"code","bdd413c4":"code","c5e8fd9d":"code","05e77ca4":"code","8699f1a0":"code","95c652fa":"code","3a4fcf1f":"code","c8edf5f3":"code","1a66dcb4":"code","74c86b16":"code","6661f69d":"code","ee106c8b":"code","fc43601e":"code","b0dffa95":"code","5278203c":"code","6d566f3b":"code","28278f57":"code","51ee88e6":"code","152f0ee0":"code","cfaca48e":"code","1f84160e":"code","94fc4da9":"code","d417ead7":"code","0af6cd14":"code","b88827a0":"code","d0ce0932":"code","20b8d823":"code","d029dc0d":"code","9f6a49b4":"markdown","a05fff6b":"markdown","b4e680f4":"markdown","5e7c475a":"markdown","56e33141":"markdown","bbcf43b9":"markdown","fc25ef47":"markdown","b4801eab":"markdown","d9945b0b":"markdown","6a794ae7":"markdown","5084a47c":"markdown","381d06f1":"markdown","96bb46d1":"markdown","35bfd22a":"markdown","d62d1720":"markdown","f959b7d5":"markdown","f9480b2d":"markdown","82926e43":"markdown","622bab14":"markdown","50e26fb6":"markdown","9973aed3":"markdown","5c3b791c":"markdown","31e5611e":"markdown","b89ae2cf":"markdown","620f8ded":"markdown","e13e09f6":"markdown","343800bc":"markdown","710cc603":"markdown","548edd79":"markdown","22fc82cd":"markdown"},"source":{"2855eae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b8bcf22e":"# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error, median_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.model_selection import GroupKFold, GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nimport lightgbm as lgb\n\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)","5d851734":"deliveries_df = pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')","37584618":"deliveries_df.head()","389a7d5e":"matches_df = pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')","e8c2c466":"matches_df.head()","57063cac":"matches_df.describe()","be575f8c":"matches_df.info()","6b2a23e0":"#Missing vlaues checking\nmatches_df.isnull().sum()","1bbea200":"# Get some basic stats on the data\nprint(\"Number of matches played so far in IPL : \", matches_df.shape[0])\nprint(\"Number of seasons in IPL : \", len(matches_df.season.unique()))\nprint(\"Number of Teams participated in IPL : \", len(matches_df.team1.unique()))\nprint(\"Number of Teams participated in IPL : \", len(matches_df.team2.unique()))","789b2a09":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', data=matches_df)\nplt.title('The total number of matches played in each year')\nplt.show()","d1b03f14":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=matches_df)\nplt.xticks(rotation='vertical')\nplt.show()","132460ba":"df = pd.melt(matches_df, id_vars=['id','season'], value_vars=['team1', 'team2'])\ndf.head()","3006558e":"df.columns = ['id', 'season', 'varaible', 'Team']","72a6354e":"df.head()","82c42cb1":"plt.figure(figsize=(12,6))\nsns.countplot(x='Team', data=df)\nplt.xticks(rotation='vertical')\nplt.show()","9768c752":"eden_df = matches_df[matches_df['venue'] == 'Eden Gardens']","f2de8410":"eden_df.head()","54c78966":"eden_df_1 = pd.melt(eden_df, id_vars=['id','season'], value_vars=['team1', 'team2'])\neden_df_1.head()","7170cec1":"eden_df_1.columns = ['id', 'season', 'varaible', 'Team']","ee16a309":"plt.figure(figsize=(12,6))\nsns.countplot(x='Team', data=eden_df_1)\nplt.xticks(rotation='vertical')\nplt.show()","76e5e8e6":"matches_df.isnull().sum()","2afb1e60":"deliveries_df.isnull().sum()","9f1e2d36":"deliveries_df.drop(['player_dismissed', 'dismissal_kind', 'fielder'],axis=1,inplace=True)","1b995629":"matches_df['date'] = pd.to_datetime(matches_df['date'])","6c617651":"matches_df[\"WeekDay\"] = matches_df[\"date\"].dt.weekday","b7d8fab3":"matches_df.head()","ec51d294":"df = matches_df[(matches_df['toss_decision'] == 'field') &  (matches_df['venue'] == 'Wankhede Stadium') &\n             (matches_df['season'] >= 2008) & (matches_df['season'] <= 2019)\n             ]","398c6421":"df.head()","45edb1a8":"df.shape","cc1d4e91":"print('The win percentage of a team batting second at Wankhede Stadium during 2008 to 2016 is {}%'.format((df[df['win_by_wickets']>0].shape[0])*100\/ df.shape[0]))","19b2fd94":"df[(df['win_by_wickets']>0)]['winner'].value_counts()","f84331a8":"df[df['win_by_wickets']>0]['winner'].value_counts().plot(kind='bar', color='Orange', figsize=(12,6))\nplt.xlabel(\"Team\")\nplt.ylabel(\"Count\")\nplt.title('Top Teams who win batting second are')\nplt.show()","5241bada":"plt.figure(figsize=(12,6))\n\nplt.title('Top Teams who win batting second are')\nsns.countplot(x='winner', data=df[df['win_by_wickets']>0])\nplt.xlabel(\"Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation='vertical')\nplt.show()","6a51c108":"df = matches_df[['id', 'WeekDay','winner']]\ndf = df[df['winner'] == 'Kolkata Knight Riders']","bdd413c4":"df.head()","c5e8fd9d":"df['WeekDay'].value_counts().plot(kind='bar', color='green', figsize=(12,6))\nplt.xlabel(\"Team\")\nplt.ylabel(\"Count\")\nplt.title('Kolkata Knight Riders winning on weekdays - where Monday is 0 and Sunday is 6')","05e77ca4":"df = matches_df.loc[matches_df.groupby('season').date.idxmax()]","8699f1a0":"df.head()","95c652fa":"plt.figure(figsize=(12,6))\n\nplt.title('Top winning teams in IPL history')\nsns.countplot(x='winner', data=df)\nplt.xlabel(\"Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation='vertical')\nplt.show()","3a4fcf1f":"# Let us take only the matches played in 2019 for this analysis #\nmatches_df_2019 = matches_df.ix[matches_df.season==2019,:]\nmatches_df_2019 = matches_df_2019.ix[matches_df_2019.dl_applied == 0,:]\nmatches_df_2019.head()","c8edf5f3":"train_df = matches_df[matches_df['season'] != 2019]","1a66dcb4":"test_df = matches_df[matches_df['season'] == 2019]","74c86b16":"train_df.columns","6661f69d":"train_df.head()","ee106c8b":"train_df = train_df[['city',  'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner',  'venue',\n        'WeekDay']]\ntest_df = test_df[['city',  'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner',  'venue',\n        'WeekDay']]","fc43601e":"train_df.head()","b0dffa95":"train_df.isnull().sum()","5278203c":"test_df.isnull().sum()","6d566f3b":"train_df= train_df.dropna()\ntest_df = test_df.dropna()","28278f57":"train_df.head()","51ee88e6":"train_df.dtypes","152f0ee0":"test_df.dtypes","cfaca48e":"# Importing LabelEncoder and initializing it\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n# Iterating over all the common columns in train and test\nfor col in train_df.columns.values:\n    # Encoding only categorical variables\n    if train_df[col].dtypes=='object':\n        print(col)\n        # Using whole data to form an exhaustive list of levels\n        data=train_df[col].append(test_df[col])\n        le.fit(data.values) \n        train_df[col]=le.transform(train_df[col])\n        test_df[col]=le.transform(test_df[col])","1f84160e":"X = train_df.drop(['winner'],axis=1)\ny = train_df['winner']\n\ntrain_X = X\ntrain_y = y\n\ntest_X = test_df.drop(['winner'],axis=1)\ny_test = test_df['winner']","94fc4da9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n\n# Split into training and test sets\nX_train, X_valid , y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=17)\n\nfrom sklearn import metrics\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\nprediction=model.predict(X_valid)\nprint('The accuracy of the Logistic Regression is', metrics.accuracy_score(prediction,y_valid))","d417ead7":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=500)\nrf.fit(X_train, y_train)\ny_valid_preds = rf.predict(X_valid)\nprint(\"The validation accuracy score is\", metrics.accuracy_score(y_valid, y_valid_preds))\n\nprint(\"The test accuarcy score is\", metrics.accuracy_score(y_test, rf.predict(test_X)))","0af6cd14":"coefs_df = pd.DataFrame()\n\ncoefs_df['Features'] = X_train.columns\ncoefs_df['Coefs'] = rf.feature_importances_\ncoefs_df.sort_values('Coefs', ascending=False).head(10)","b88827a0":"coefs_df.set_index('Features', inplace=True)\ncoefs_df.sort_values('Coefs', ascending=False).head(10).plot(kind='bar', color='green', figsize=(12,6))","d0ce0932":"def check_winner(a,b):\n    if (a == b):\n        return 1\n    else:\n        return 0\n\ntrain_df['win_toss_win_match'] = train_df.apply(lambda row: check_winner(row['toss_winner'],row['winner']),axis=1)\n","20b8d823":"train_df.head()","d029dc0d":"train_df['win_toss_win_match'].value_counts().plot(kind='bar', color='green')\n\nplt.title('Winning Toss and Winning Match')\nplt.xlabel(\"Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation='vertical')\nplt.show()","9f6a49b4":"Mumbai Indians is the team which won maximum number of times - Hence this is the best team","a05fff6b":"In this analysis, we are going to look at the matches played only during the latest season 2019. So let us subset the dataset to get only these rows.\n\nAlso some matches are affected by rain and hence Duckworth-Lewis method are used for these matches and so using these matches for training our model might cause some error in our training and so let us neglect those matches as well.","b4e680f4":"Maximum number of matches played at Eden Gardens. This is one of the famous ground in India - where some histroic matches are played","5e7c475a":"### Load packages","56e33141":"From the above important features - if we ignore team2 and team1, the important features are toss_winner and venue.\n\nSo can we assume that if a team wins the toss - is it going to win the match? Let us look at descriptive statistics of the team winning toss and winning the match combination","bbcf43b9":"**Q1: What is the win percentage of a team batting second at Wankhede Stadium during 2008 to 2019?**","fc25ef47":"### Answer Questions based on dataset","b4801eab":"Okay. Now that we are done with the pre-processing, let us create the variables that are needed for building our model.\n\nI will be considering only the fields from matches dataframe only.\n\nso let us start with these variables and I believe this will be a good starting point. As and when required we can add some more variables.","d9945b0b":"Best IPL team can be judged by the number of times it had won. To find which team won in each season - we will first identify the last match played in that year and we assume it should be finals. So Hence collect all the last matches played in each season.","6a794ae7":"KKR wins most of the matches on Wednesday(When compared to only weekdays)","5084a47c":"Q2: Which are the weekdays Kolkata Knight Riders wins the most?","381d06f1":"#### Which team played maximum number of matches at Eden Gardens","96bb46d1":"Here by just using the matches dataset fields we are able to predict the match outcome with a decent accuracy. We can build a robust model by applying more features from the deliveries dataset.","35bfd22a":"**Q4:  Predict the winner of the match by just using the matches fields?**","d62d1720":"Seems like Mumbai Indians and Royal challengers Bangalore are the most matches played teams . Deccan chargers and Sunrisers Hyderabad are from the same City - similarly Delhi Daredevils and Delhi Capitals are also representing the same city\n","f959b7d5":"##### Convert the date format into weekdays","f9480b2d":"I am a cricket player since my childhood - hence exploring this dataset is an immense fun which might help me to get to know some exciting insights on this game.\n\nI will focus on the bewlow question below:\n\nQ1: What is the win percentage of a team batting second at Wankhede Stadium during 2008 to 2019? \n\nQ2: Which are the weekdays Kolkata Knight Riders wins the most?\n\nQ3: Which is the best IPL team and how many times it had won in the past?  \n\nQ4: Predict the winner of the match by just using the matches dataset fields? - This is a classic binary classification problem\n\n\nLet us first import the necessary modules.!\n\n","82926e43":"### 2.Data Understanding","622bab14":"#### It seems obvious that Kolkata played lot many matches at Eden gardens - as this is a home ground for Kolkata","50e26fb6":"### 4.Modelling","9973aed3":"#### The CRISP-DM method will be applied here to keep track of the analysis process. I learned this method from the Udacity Nanodegree Datascientist Program. ","5c3b791c":"There are some necessary stpes to apply before continue exploring the dataset:\n\n1) Check for missing values - if available impute them or remove them from analysis\n\n2) There might be some teams with different names - we can club them if required\n","31e5611e":"### 3.Data Preparation","b89ae2cf":"Clearly from the above plot - we can see that if a team wins toss and wins match combination is high. Hence we proved the same from our model output accuracy.","620f8ded":"Let us remove the columns that have missing values in deliveries dataset","e13e09f6":"## 1. Business Understanding","343800bc":"**Q3: Which is the best IPL team and how many times it had won in the past? **","710cc603":"We are able to predict with a good start point accuracy with the randomforest model - but here we need to identify which of the features are important to predict the outcome. For this let us look at the feature importance.","548edd79":"#### Total number of matches played in each season","22fc82cd":"#### Number of matches in each venue"}}