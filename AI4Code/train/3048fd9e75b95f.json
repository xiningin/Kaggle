{"cell_type":{"41da1cd9":"code","8b18bb4c":"code","27b60dbb":"code","73a00f55":"code","0fb6fb9e":"code","00fb6413":"code","1666a7fb":"code","1a5b2ff7":"code","f7843059":"code","b652edbe":"code","b8fc86e6":"code","4f1693c2":"code","3b3eb797":"code","a481e5e2":"code","63eacb02":"code","8491d339":"code","d5a071ab":"markdown","1f7dfe30":"markdown","7cd7c533":"markdown","8a07dad8":"markdown","07abd330":"markdown","498ab158":"markdown"},"source":{"41da1cd9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8b18bb4c":"from pylab import rcParams\n\nrcParams['figure.figsize'] = 10,6","27b60dbb":"df = pd.read_csv('..\/input\/spambase\/realspambase.data', header=None)\ndf","73a00f55":"df.info()","0fb6fb9e":"df.describe()","00fb6413":"sns.heatmap(df.corr())","1666a7fb":"df.rename(columns={57:'is_spam'}, inplace=True)\nsns.countplot(df.is_spam)","1a5b2ff7":"y=df['is_spam']\nx=df.drop(['is_spam'],axis=1)","f7843059":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.3)","b652edbe":"from sklearn.metrics import accuracy_score","b8fc86e6":"%%time\nfrom xgboost import XGBClassifier\nxgb=XGBClassifier(n_estimators=200,\n                  eta = 0.4,\n                  gamma = 0.2,\n                  max_depth = 24,\n                  colsample_bytree = 0.75,\n                  eval_metric='error'\n                 )\nxgb.fit(x_train,y_train, eval_metric='auc', verbose=True, eval_set=[(x_test, y_test)], early_stopping_rounds=10)\n","4f1693c2":"%%time\npred_xgb=xgb.predict(x_test)\nscore_xgb=accuracy_score(y_test,pred_xgb)","3b3eb797":"print(score_xgb)","a481e5e2":"from sklearn.metrics import confusion_matrix\ncf_matrix = confusion_matrix(y_test,pred_xgb)\ncf_matrix","63eacb02":"group_names = ['True Neg','False Pos','False Neg','True Pos']\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cf_matrix.flatten()\/np.sum(cf_matrix)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nsns.heatmap(cf_matrix, annot=labels, fmt='', cmap='mako')\n\n#sns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, fmt='.2%', cmap='Blues')","8491d339":"from xgboost import plot_tree\nplot_tree(xgb)\nfig = plt.gcf()\nfig.set_size_inches(150, 100)","d5a071ab":"Confusion Matrix Visualization: https:\/\/medium.com\/@dtuk81\/confusion-matrix-visualization-fc31e3f30fea","1f7dfe30":"```\n| SPAM E-MAIL DATABASE ATTRIBUTES (in .names format)\n|\n| 48 continuous real [0,100] attributes of type word_freq_WORD \n| = percentage of words in the e-mail that match WORD,\n| i.e. 100 * (number of times the WORD appears in the e-mail) \/ \n| total number of words in e-mail.  A \"word\" in this case is any \n| string of alphanumeric characters bounded by non-alphanumeric \n| characters or end-of-string.\n|\n| 6 continuous real [0,100] attributes of type char_freq_CHAR\n| = percentage of characters in the e-mail that match CHAR,\n| i.e. 100 * (number of CHAR occurences) \/ total characters in e-mail\n|\n| 1 continuous real [1,...] attribute of type capital_run_length_average\n| = average length of uninterrupted sequences of capital letters\n|\n| 1 continuous integer [1,...] attribute of type capital_run_length_longest\n| = length of longest uninterrupted sequence of capital letters\n|\n| 1 continuous integer [1,...] attribute of type capital_run_length_total\n| = sum of length of uninterrupted sequences of capital letters\n| = total number of capital letters in the e-mail\n|\n| 1 nominal {0,1} class attribute of type spam\n| = denotes whether the e-mail was considered spam (1) or not (0), \n| i.e. unsolicited commercial e-mail.  \n|\n| For more information, see file 'spambase.DOCUMENTATION' at the\n| UCI Machine Learning Repository: http:\/\/www.ics.uci.edu\/~mlearn\/MLRepository.html\n\n\n1, 0.    | spam, non-spam classes\n\nword_freq_make:         continuous.\nword_freq_address:      continuous.\nword_freq_all:          continuous.\nword_freq_3d:           continuous.\nword_freq_our:          continuous.\nword_freq_over:         continuous.\nword_freq_remove:       continuous.\nword_freq_internet:     continuous.\nword_freq_order:        continuous.\nword_freq_mail:         continuous.\nword_freq_receive:      continuous.\nword_freq_will:         continuous.\nword_freq_people:       continuous.\nword_freq_report:       continuous.\nword_freq_addresses:    continuous.\nword_freq_free:         continuous.\nword_freq_business:     continuous.\nword_freq_email:        continuous.\nword_freq_you:          continuous.\nword_freq_credit:       continuous.\nword_freq_your:         continuous.\nword_freq_font:         continuous.\nword_freq_000:          continuous.\nword_freq_money:        continuous.\nword_freq_hp:           continuous.\nword_freq_hpl:          continuous.\nword_freq_george:       continuous.\nword_freq_650:          continuous.\nword_freq_lab:          continuous.\nword_freq_labs:         continuous.\nword_freq_telnet:       continuous.\nword_freq_857:          continuous.\nword_freq_data:         continuous.\nword_freq_415:          continuous.\nword_freq_85:           continuous.\nword_freq_technology:   continuous.\nword_freq_1999:         continuous.\nword_freq_parts:        continuous.\nword_freq_pm:           continuous.\nword_freq_direct:       continuous.\nword_freq_cs:           continuous.\nword_freq_meeting:      continuous.\nword_freq_original:     continuous.\nword_freq_project:      continuous.\nword_freq_re:           continuous.\nword_freq_edu:          continuous.\nword_freq_table:        continuous.\nword_freq_conference:   continuous.\nchar_freq_;:            continuous.\nchar_freq_(:            continuous.\nchar_freq_[:            continuous.\nchar_freq_!:            continuous.\nchar_freq_$:            continuous.\nchar_freq_#:            continuous.\ncapital_run_length_average: continuous.\ncapital_run_length_longest: continuous.\ncapital_run_length_total:   continuous.\n```\n","7cd7c533":"Implementing the code of this paper in Python environment:\n<br>\nEffective Email Spam Detection System using Extreme Gradient Boosting\n<br>\nPaper Abstract: https:\/\/arxiv.org\/abs\/2012.14430\n<br>\nPaper pdf: https:\/\/arxiv.org\/pdf\/2012.14430.pdf\n<br>","8a07dad8":"https:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html","07abd330":"Visualize Gradient Boosting Decision Trees With XGBoost: https:\/\/machinelearningmastery.com\/visualize-gradient-boosting-decision-trees-xgboost-python\/\n","498ab158":"Optimal combination of parameters for the proposed XGBoost-based Spam Detector\n<br>\nEta: 0.4\n<br>\ngamma: 0.2\n<br>\nmaximum depth: 24\n<br>\ncolumn sample: 0.75\n<br>\nNumber of rounds (early stopping after 10): 200\n<br>"}}