{"cell_type":{"8a527d25":"code","08d6d85a":"code","b3964e3f":"code","c8d31715":"code","512ca1d3":"code","c1977941":"code","09980334":"code","4a887fea":"code","4c23d25e":"code","384169b9":"code","7f300a9d":"code","d262baba":"code","886c8edb":"code","54c7bca3":"code","b2f37b0a":"code","0eecdd4e":"code","99a466c9":"code","6b61ca3f":"code","13669896":"code","ac261edd":"code","f12193e7":"code","79100ebb":"code","980c6a94":"code","de2f68a8":"code","f3a3182c":"code","480c8630":"code","00fdd73e":"code","d738a55b":"code","34176c60":"code","6882b432":"code","d16edafa":"code","768d9fc7":"code","1a41fb1a":"code","3419c83b":"code","72edc55e":"code","a13e241e":"code","a93ad642":"code","a3b624bb":"code","1c536b1f":"code","60340b3e":"code","33d1038f":"code","b8e91f87":"code","6a5879a7":"code","5fadeced":"code","840fbb7d":"code","004f3271":"markdown","ddcf7f5d":"markdown","d462d682":"markdown"},"source":{"8a527d25":"import pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import RMSprop, Adam, Nadam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import BatchNormalization, Flatten,Conv2D, Dropout, Dense, GlobalAveragePooling2D\nimport tensorflow as tf\nimport keras\nfrom numpy import expand_dims\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import pyplot","08d6d85a":"path = '..\/input\/lego-minifigures-classification\/'","b3964e3f":"pic=cv2.imread('..\/input\/lego-minifigures-classification\/marvel\/0007\/002.jpg')","c8d31715":"pic.shape","512ca1d3":"opened_dir = os.listdir(path)\nprint(opened_dir)","c1977941":"index = pd.read_csv(path + 'index.csv')","09980334":"index.tail()","4a887fea":"index.columns","4c23d25e":"index.drop('Unnamed: 0', axis=1, inplace=True)","384169b9":"metadata = pd.read_csv(path+'metadata.csv')","7f300a9d":"index['name']=None","d262baba":"index.head()","886c8edb":"metadata.head()","54c7bca3":"for i, name in zip(metadata['class_id'],metadata['minifigure_name']):\n    for sor, j in enumerate(index['class_id']):\n        if i==j:\n            index.iat[sor, 3]=name\n        ","b2f37b0a":"index.tail(10)","0eecdd4e":"valid = index.copy()","99a466c9":"filt = index['train-valid']=='train'\nindex.where(filt, inplace=True)\nfilt1 = valid['train-valid']=='valid'\nvalid.where(filt1, inplace=True)","6b61ca3f":"index.dropna(inplace=True, axis=0)\nvalid.dropna(inplace=True, axis=0)","13669896":"img = load_img('..\/input\/lego-minifigures-classification\/marvel\/0002\/003.jpg')\n\ndata = img_to_array(img)\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(width_shift_range=[-100,100])\nit = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n\tpyplot.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tpyplot.imshow(image)\npyplot.show()","ac261edd":"data = img_to_array(img)\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(height_shift_range=0.4)\nit = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n\tpyplot.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tpyplot.imshow(image)\npyplot.show()","f12193e7":"data = img_to_array(img)\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(rotation_range=90)\nit = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n\tpyplot.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tpyplot.imshow(image)\npyplot.show()","79100ebb":"data = img_to_array(img)\nsamples = expand_dims(data, 0)\ndatagen = ImageDataGenerator(brightness_range=[0.2,1.0])\nit = datagen.flow(samples, batch_size=1)\nfor i in range(9):\n\tpyplot.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tpyplot.imshow(image)\npyplot.show()","980c6a94":"batch= 15\nsize= 256\nnb_classes=30\nIN_SHAPE=(size,size,3)\nEpoch= 100","de2f68a8":"train_datagen = ImageDataGenerator(rescale=1.0\/255, rotation_range=20, width_shift_range=0.4, \n                                   height_shift_range=0.4,fill_mode=\"nearest\", zoom_range=0.4, vertical_flip=True, horizontal_flip=True, brightness_range=[0.2,1.0])\nvalid_datagen = ImageDataGenerator(rescale=1.0\/255)","f3a3182c":"train_generator = train_datagen.flow_from_dataframe(dataframe=index, directory=path,\n                                                   x_col='path', y_col='name', batch_size= batch,\n                                                   shuffle=True, target_size=(size,size))\nvalid_generator = valid_datagen.flow_from_dataframe(dataframe=valid, directory=path,\n                                                   x_col='path', y_col='name', batch_size= batch,\n                                                   shuffle=False, target_size=(size,size))","480c8630":"!pip install efficientnet\nimport efficientnet.tfkeras as efn","00fdd73e":"def get_model1():    \n    base_model =  efn.EfficientNetB6(input_shape=IN_SHAPE, weights='imagenet', include_top=False, pooling='avg')\n    x = base_model.output\n    #x = Dense(500,activation='relu')(x)\n    #x = Dropout(0.5)(x)\n    #x = Flatten()(x)\n    #x = Dense(150,activation='relu')(x)\n    #x = Dropout(0.2)(x)\n    predictions = Dense(nb_classes, activation=\"softmax\")(x)\n    return Model(inputs=base_model.input, outputs=predictions)","d738a55b":"model1 = get_model1()\n    \nmodel1.compile(optimizer='SGD', loss='categorical_crossentropy', metrics= 'accuracy')","34176c60":"history = model1.fit_generator(train_generator, epochs=Epoch, validation_data=valid_generator)","6882b432":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","d16edafa":"plt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","768d9fc7":"valid.head()","1a41fb1a":"from sklearn.model_selection import train_test_split","3419c83b":"test, _val = train_test_split(valid, test_size=0.5)","72edc55e":"test.head()","a13e241e":"test_datagen = ImageDataGenerator(rescale=1.0\/255)\ntest_generator = test_datagen.flow_from_dataframe(dataframe=test, directory=path, x_col='path', y_col='name', batch_size= 1,\n                                 shuffle=False, target_size=(size,size))","a93ad642":"model1.evaluate_generator(generator=valid_generator)","a3b624bb":"test_generator.reset()\npred=model1.predict_generator(test_generator,verbose=1)","1c536b1f":"predicted_classes=np.argmax(pred,axis=1)","60340b3e":"predicted_classes","33d1038f":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_classes]","b8e91f87":"labels","6a5879a7":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"Filename\":filenames,\n                      \"Predictions\":predictions})","5fadeced":"results.tail()","840fbb7d":"for pic, name in zip(results['Filename'], results['Predictions']): \n    img = load_img(path+pic)\n    plt.imshow(img)\n    print(name)   \n    plt.show()\n\n   ","004f3271":"# Testing the model","ddcf7f5d":"Opening csv files","d462d682":"# Efficient Net"}}