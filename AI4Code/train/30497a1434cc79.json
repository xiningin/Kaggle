{"cell_type":{"efdfa077":"code","633a3fb9":"code","b7a2c10a":"code","d716b7ce":"code","28c16550":"code","37895128":"code","061907e1":"code","3b8b3148":"code","5b9f6f9b":"code","99c807f6":"code","ff6e02a2":"code","359b6fa8":"code","47b3177f":"code","e76246ed":"code","57b7257c":"code","b951baad":"code","aa276be5":"code","cf8ed0c8":"code","70fb0f70":"code","bbbef82b":"code","11878ebb":"code","b8833aa1":"code","8dbbc399":"code","40e0eca1":"code","33427fa0":"code","9de553fc":"code","e29eee95":"code","1c3edf7a":"code","9b6d0e95":"code","f0fbb480":"code","ad36c1d1":"code","eb53bf7d":"code","b1926b60":"code","8df383de":"code","7fa4aa81":"code","b84ba593":"code","e27b01d3":"code","378079ca":"code","fdcaab81":"code","a072bd90":"code","4f9aa5c2":"code","946a84b6":"code","482baa5a":"code","4e0dca02":"code","f7cd97c1":"code","d3c00926":"code","15844f1c":"code","c6b514ee":"code","6220ca59":"code","54b863a5":"code","52240f7a":"code","9224e21b":"code","7b68aacd":"code","d011da62":"markdown","29513670":"markdown","29d85d77":"markdown","3d99c77e":"markdown","64d4628e":"markdown","872f2090":"markdown","058d5a58":"markdown","3b9b377f":"markdown","feecbbfd":"markdown","c5ca278f":"markdown","f0257755":"markdown","f5fe8fe8":"markdown","39cf1291":"markdown","072e85d7":"markdown","9c818dfb":"markdown","f6f84d8d":"markdown","699fa0be":"markdown","8e24bfc5":"markdown","8c9a00be":"markdown","8ec9c910":"markdown"},"source":{"efdfa077":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","633a3fb9":"data = pd.read_csv(\"\/kaggle\/input\/goodreadsbooks\/books.csv\", error_bad_lines = False)\ndata.head()","b7a2c10a":"data.isnull().sum()","d716b7ce":"top_books = data[data['ratings_count'] > 1000000]\ntop_books = top_books.sort_values(by='average_rating', ascending=False).head(20)\n# top_books","28c16550":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"average_rating\", y=\"title\", data=top_books, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.show()","37895128":"top_vote = data.sort_values(by='ratings_count', ascending=False).head(20)","061907e1":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"ratings_count\", y=\"title\", data=top_vote, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.show()","3b8b3148":"list(set(top_books['title'].values) - set(top_vote['title'].values))","5b9f6f9b":"list(set(top_vote['title'].values) - set(top_books['title'].values))","99c807f6":"ax = sns.relplot(data=data, x=\"ratings_count\", y=\"average_rating\", color = '#95a3c3', sizes=(100, 200), height=7, marker='o')","ff6e02a2":"data.head()","359b6fa8":"new_data = data.copy()","47b3177f":"def fun_only_author(text):\n    arlen = text.split('\/')\n    return arlen[0]","e76246ed":"new_data['only_author'] = new_data['authors'].apply(lambda x : fun_only_author(x))","57b7257c":"total_rating = new_data.drop_duplicates(subset=['only_author', 'title'], keep='first')\ntotal_rating = total_rating.groupby(by=['only_author']).agg({'average_rating': ['sum']})\ntotal_rating.columns = ['total_rating']\ntotal_rating.reset_index(inplace=True)\ntotal_rating = total_rating.sort_values(by=['total_rating'], ascending=False)\ntotal_rating","b951baad":"total_book = new_data.groupby(by=['only_author']).agg({'title': ['nunique']})\ntotal_book.columns = ['total_book']\ntotal_book.reset_index(inplace=True)\ntotal_book = total_book.sort_values(by=['total_book'], ascending=False)\ntotal_book","aa276be5":"avg_author = pd.merge(total_book, total_rating, on='only_author', how='outer')\navg_author['average_rating'] = round(avg_author['total_rating'] \/ avg_author['total_book'], 2)\navg_author = avg_author[avg_author['total_book'] > 26]\navg_author = avg_author.sort_values(by=['average_rating'], ascending=False)\navg_author","cf8ed0c8":"total_vote = new_data.drop_duplicates(subset=['only_author', 'title'], keep='first')\ntotal_vote.reset_index(inplace=True)\ntotal_vote = total_vote[['only_author', 'title', 'average_rating', 'ratings_count']]\ntotal_vote","70fb0f70":"C = total_vote.average_rating.mean()\nC","bbbef82b":"m = total_vote.ratings_count.quantile(0.9)\nm","11878ebb":"total_vote = total_vote[total_vote['ratings_count'] >= m]\ntotal_vote.head()","b8833aa1":"def weighted_rating(x, m=m, C=C):\n    v = x['ratings_count']\n    R = x['average_rating']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","8dbbc399":"total_vote['score'] = total_vote.apply(weighted_rating, axis=1)","40e0eca1":"total_vote = total_vote.sort_values(by='score', ascending=False).head(20)\ntotal_vote","33427fa0":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"score\", y=\"title\", data=total_vote, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.title(\"Top 20 Weighted Rating Books\")\nplt.show()","9de553fc":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"total_book\", y=\"only_author\", data=avg_author, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.show()","e29eee95":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"average_rating\", y=\"only_author\", data=avg_author, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.show()","1c3edf7a":"plt.figure(figsize=(15, 7))\nax = sns.countplot(x=data.language_code, data=data)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()-0.05, p.get_height()+100))","9b6d0e95":"top_pages = data.sort_values(by='  num_pages', ascending=False).head(20)","f0fbb480":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(10, 10))\n\ncolor = sns.color_palette(\"Set2\")\nax = sns.barplot(x=\"  num_pages\", y=\"title\", data=top_pages, palette=color)\n\nfor i in ax.patches:\n    ax.text(i.get_width() + .05, i.get_y() + 0.5, str(i.get_width()), fontsize = 10, color = 'k')\nplt.show()","ad36c1d1":"ax = sns.relplot(data=data, x=\"average_rating\", y=\"  num_pages\", color = '#95a3c3', sizes=(100, 200), height=7, marker='o')","eb53bf7d":"ax = sns.relplot(data=data, x=\"  num_pages\", y=\"ratings_count\", color = '#95a3c3', sizes=(100, 200), height=7, marker='o')","b1926b60":"title_value = data.title.unique()","8df383de":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","7fa4aa81":"plt.subplots(figsize=(15,15))\nwordcloud = WordCloud(\n                          background_color='#000',\n                          width=650,\n                          height=550,\n                          stopwords=STOPWORDS,\n                         ).generate(\" \".join(title_value))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.figtext(.5,.91,'Data cloud of All title', color='#062175', fontsize=25, ha='center')\nplt.show()","b84ba593":"len(new_data.only_author.unique())","e27b01d3":"new_data.loc[ (new_data['average_rating'] >= 0) & (new_data['average_rating'] <= 1), 'rating_between'] = \"between_0_to_1\"\nnew_data.loc[ (new_data['average_rating'] > 1) & (new_data['average_rating'] <= 2), 'rating_between'] = \"between_1_to_2\"\nnew_data.loc[ (new_data['average_rating'] > 2) & (new_data['average_rating'] <= 3), 'rating_between'] = \"between_2_to_3\"\nnew_data.loc[ (new_data['average_rating'] > 3) & (new_data['average_rating'] <= 4), 'rating_between'] = \"between_3_to_4\"\nnew_data.loc[ (new_data['average_rating'] > 4) & (new_data['average_rating'] <= 5), 'rating_between'] = \"between_4_to_5\"","378079ca":"new_data.head(2)","fdcaab81":"trial = new_data[['average_rating', 'ratings_count']]\ndata_model = np.asarray([np.asarray(trial['average_rating']), np.asarray(trial['ratings_count'])]).T\ndata_model","a072bd90":"from sklearn.cluster import KMeans","4f9aa5c2":"# Elbow Method\n\nscore = []\nx = data_model\nfor cluster in range(1,41):\n    kmeans = KMeans(n_clusters = cluster, init=\"k-means++\", random_state=40)\n    kmeans.fit(x)\n    score.append(kmeans.inertia_)","946a84b6":"# plotting the score\nplt.figure(figsize=(15, 10))\nplt.plot(range(1,41), score)\nplt.title('The Elbow Method')\n# plt.xlabel('no of clusters')\n# plt.ylabel('wcss')\nplt.show()","482baa5a":"rating_between_df = new_data['rating_between'].str.get_dummies(sep=\",\")\nrating_between_df.head()","4e0dca02":"lang_df = new_data['language_code'].str.get_dummies(sep=\",\")\nlang_df.head()","f7cd97c1":"engine_features = pd.concat([rating_between_df, lang_df, new_data['average_rating'], new_data['ratings_count']], axis=1)\nengine_features.head()","d3c00926":"from sklearn.preprocessing import MinMaxScaler","15844f1c":"min_max_scaler = MinMaxScaler()\nengine_features = min_max_scaler.fit_transform(engine_features)","c6b514ee":"from sklearn import neighbors","6220ca59":"engine_model = neighbors.NearestNeighbors(n_neighbors=6, algorithm='ball_tree')","54b863a5":"engine_model.fit(engine_features)","52240f7a":"dist, idlist = engine_model.kneighbors(engine_features)","9224e21b":"def book_recommendation_engine(book_name):\n    book_list_name = []\n    book_id = new_data[new_data['title'] == book_name].index\n    book_id = book_id[0]\n#     print('book_id', book_id)\n    for newid in idlist[book_id]:\n#         print(newid)\n        book_list_name.append(new_data.loc[newid].title)\n#         print(new_data.loc[newid].title)\n    return book_list_name","7b68aacd":"book_list_name = book_recommendation_engine('The Da Vinci Code (Robert Langdon  #2)')\nbook_list_name","d011da62":"For Recommendation taking too much knowledge from this notebook. [https:\/\/www.kaggle.com\/hoshi7\/goodreads-analysis-and-recommending-books](https:\/\/www.kaggle.com\/hoshi7\/goodreads-analysis-and-recommending-books)","29513670":"## Top voted but not in top rated","29d85d77":"## Language Distribution","3d99c77e":"<img src=\"https:\/\/miro.medium.com\/max\/736\/1*fGziZl2Do-VyQXSCPq_Y2Q.png\" \/>","64d4628e":"## Relationship between pages and ratings_count","872f2090":"## average rating of an author","058d5a58":"## Top 20 Top Voted Books","3b9b377f":"## Relationship between rating and pages","feecbbfd":"## create new feature","c5ca278f":"## Top rated but not in top voted","f0257755":"# Goodreads Books Analysis","f5fe8fe8":"## Top 20 Top Voted Books","39cf1291":"## Relationship between rating and vote","072e85d7":"## Data cloud of All title","9c818dfb":"## Top 20 Top Rated Books","f6f84d8d":"## Weighted Rating calculation","699fa0be":"# Recommendation Engine","8e24bfc5":"Columns Description:\n\n* **bookID** Contains the unique ID for each book\/series\n* **title** contains the titles of the books\n* **authors** contains the author of the particular book\n* **average_rating** the average rating of the books, as decided by the users\n* **ISBN** ISBN(10) number, tells the information about a book - such as edition and publisher\n* **ISBN 13** The new format for ISBN, implemented in 2007. 13 digits\n* **language_code** Tells the language for the books\n* **Num_pages** Contains the number of pages for the book\n* **Ratings_count** Contains the number of ratings given for the book\n* **text_reviews_count** Has the count of reviews left by users","8c9a00be":"#### Not too much but happy with this answer. I think we need book category to make it better. Try it yourself and let me know if you found the book of your choice.","8ec9c910":"## most books of an author"}}