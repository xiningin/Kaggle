{"cell_type":{"0fcf66b7":"code","34106422":"code","c0971041":"code","0213b524":"code","42591496":"code","97e486d7":"code","6126b583":"code","153c9d40":"code","892ea177":"code","df98baa3":"code","73781d65":"code","945170c4":"code","850fab9f":"code","b24fbdf7":"code","0dbd6c58":"code","bbb033f1":"code","8df0cb1a":"code","d215dce1":"code","dbc0d3bc":"code","4f289570":"code","a29ce65b":"code","47276f2f":"code","9ce57b61":"code","c72f63e1":"code","1a6f5809":"code","84286e74":"code","96aacf69":"code","c183a35c":"code","1bfe0265":"code","4c298038":"code","324b2b36":"code","3c53e249":"markdown","ab355cae":"markdown","ac120ae9":"markdown","faa37396":"markdown","24cb4f82":"markdown","5408c643":"markdown","11de6862":"markdown","d7d6372d":"markdown","28e2744d":"markdown","4dcf0cb3":"markdown","494e9dfe":"markdown","d7b7a3c2":"markdown","ca21092a":"markdown","8e8a5f8e":"markdown","95cd825c":"markdown","2592072a":"markdown","e4ab0a7e":"markdown","4bdf0f8d":"markdown","eb59c171":"markdown","5811c5c0":"markdown","57125a80":"markdown","14b4fb0b":"markdown","9f41e100":"markdown"},"source":{"0fcf66b7":"# Library for dataset\nimport pandas as pd\nimport numpy as np\nimport os\n\n# Library for data visualization\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# from sklearn.externals.six import StringIO  \nfrom sklearn.tree import export_graphviz\n# import pydotplus\nfrom IPython.display import Image  \n\n#Library for preprocessing data\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\n\n#Library for classification\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn import tree\n\n#Library for Evaluation\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom mlxtend.plotting import plot_confusion_matrix\n","34106422":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c0971041":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0213b524":"train.head()","42591496":"test.head()","97e486d7":"train.count()","6126b583":"from termcolor import colored, cprint\nfor index in train.columns:\n    cprint(index, 'blue', attrs=['bold'])\n    print('Unique value : ',train[index].nunique(),\n          ',Type data: ',train[index].dtypes,\n          ', Sum of Missing value: ',train[index].isnull().sum())","153c9d40":"test.count()","892ea177":"from termcolor import colored, cprint\n\nfor index in test.columns:\n    cprint(index, 'blue', attrs=['bold'])\n    print('Unique value : ',test[index].nunique(),\n          ',Type data: ',test[index].dtypes,\n          ', Sum of Missing value: ',test[index].isnull().sum())","df98baa3":"data_train = train.drop(columns = ['PassengerId','Ticket','Cabin','Name'])\ndata_test = test.drop(columns = ['PassengerId','Ticket','Cabin','Name'])","73781d65":"data_train.describe().transpose()","945170c4":"data_test.describe().transpose()","850fab9f":"fig, ax = plt.subplots(figsize=(15,5),dpi=100)\nsns.countplot(x='Survived', hue=\"Survived\", data=train, palette=\"Set3\")\nplt.title(\"Class Distribution\")","b24fbdf7":"px.histogram(data_frame=train[~train.Survived.isna()]\n             , x=\"Pclass\"\n             , color='Survived'\n             , barmode = 'group'\n             , title=\"Survived Distribution by Pclass\"\n             , template='plotly'\n            )","0dbd6c58":"px.histogram(data_frame=train[~train.Survived.isna()]\n             , x=\"Sex\"\n             , color='Survived'\n             , barmode = 'group'\n             , title=\"Survived Distribution by Gender\"\n             , template='plotly'\n            )","bbb033f1":"fig = px.scatter(train, x=\"Pclass\", y=\"Fare\",color=\"Survived\")\nfig.show()","8df0cb1a":"px.histogram(data_frame=train[~train.Survived.isna()]\n             , x=\"Embarked\"\n             , color='Survived'\n             , barmode = 'group'\n             , title=\"Survived Distribution by Embarkation\"\n             , template='plotly'\n            )","d215dce1":"fig = px.scatter_3d(train, x='Pclass', y='Age', z='Sex',color='Survived', size_max=18, opacity=0.7)\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","dbc0d3bc":"le = LabelEncoder()\ndata_train['Embarked'] = le.fit_transform(data_train['Embarked'] .astype(str))\ndata_train_encode = data_train.copy()\nfor i in data_train.columns:\n    if data_train.dtypes[i] == \"O\":\n        data_train_encode[i] = le.fit_transform(data_train[i])\ndata_train_encode.head()","4f289570":"le = LabelEncoder()\ndata_test['Embarked'] = le.fit_transform(data_test['Embarked'] .astype(str))\ndata_test_encode = data_test.copy()\nfor i in data_test.columns:\n    if data_test.dtypes[i] == \"O\":\n        data_test_encode[i] = le.fit_transform(data_test[i])\ndata_test_encode.head()","a29ce65b":"# heatmap columns correlation\nfig, ax = plt.subplots(figsize=(15,15)) \nsns.heatmap(data_train_encode.corr(), annot=True,cmap=\"YlGnBu\" )","47276f2f":"data_train_encode = data_train_encode.drop(columns = ['Fare'])\ndata_test_encode = data_test_encode.drop(columns = ['Fare'])","9ce57b61":"data_train_encode['Age'].fillna((data_train_encode['Age'].mean()), inplace=True)\ndata_test_encode['Age'].fillna((data_test_encode['Age'].mean()), inplace=True)","c72f63e1":"y = data_train_encode['Survived'].copy()\nx = data_train_encode.drop(columns = ['Survived','SibSp','Parch','Embarked'])\nx.head()","1a6f5809":"x_test = data_test_encode.drop(columns = ['SibSp','Parch','Embarked'])","84286e74":"n = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]\n\nrandom_grid = {'n_estimators': n}\n# Create a based model\nrf = RandomForestClassifier()\n\n# Instantiate the grid search model\nrf_randoms = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, \n                               cv = 6, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_randoms.fit(x, y)","96aacf69":"print(\"Jumlah Pohon Optimal:\") # print best parameter after tuning \nprint(rf_randoms.best_params_)\nprint(\"Parameter Lain yang Digunakan:\") # Print how our model looks after hyper-parameter tuning \nprint(rf_randoms.best_estimator_)","c183a35c":"#Modeling Random Forest\nrf = RandomForestClassifier(n_estimators=10, random_state=0)\nrf.fit(x, y)","1bfe0265":"y_pred_rf= rf.predict(x_test)\ny_pred_rf","4c298038":"y_pred_rf = y_pred_rf.astype(np.int16)\ny_pred_rf","324b2b36":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = y_pred_rf\nsubmission.to_csv('rf_submission.csv', index=False)","3c53e249":"Atribut class\/target bisa dibilang tidak seimbang. Jika dataset yang digunakan imbalance\/tidak seimbang maka perlu diperhatikan lebih lanjut. Hal ini penting untuk diingat saat melakukan klasifikasi dan evaluasi, karena Imbalanced data menyebabkan sulitnya mengembangkan model prediksi yang baik karena hanya fokus pada pengembangan model dengan salah satu target.","ab355cae":"##### **Test Info**","ac120ae9":"Dari barplot diatas, dapat disimpulkan bahwa lebih banyak penumpang perempuan yang selamat dari pada penumpang laki-laki","faa37396":"Dari deskripsi tabel diatas kita dapat melihat bahwa setiap atribut numerik memiliki interval yang berbeda. Maka dari itu data harus dinormalisasi atau distandardisasi agar menghindari ketergantunagan pada satuan pengukuran dan proses pembelajaran tidak bias. Proses normalisasi akan dilakukan pada tahap preprocessing data","24cb4f82":"## **Analysis with Python Code**","5408c643":"Dari deskripsi data dan visualisasi data diatas terdapat beberapa atribut yang akan dugunakan dalam pembangunan model seperti Pclass, Sex, Age, SibS, Parch, Embarked","11de6862":"> ### Modelling","d7d6372d":"#### **Checking Data Outliers**","28e2744d":"Dari barplot diatas, penumpang yang paling banyak tidak selamat berasal dari pelabuhan Southampton","4dcf0cb3":"##### **Train Info**","494e9dfe":"### **Import Library**","d7b7a3c2":"Dari barplot diatas dapat dilihat bahwa pclass 3 memiliki jumlah penumpang yang paling banyak daripada pclass 2 dan 1. Pclass 1 memiliki jumlah penumpang selamat lebih banyak daripada yang tidak selamat.","ca21092a":"Dari scatterplot diatas dapat dilihat bahwa pclass 1 memiliki tarif yang tinggi, dan jumlah penumpang yang selamat pun semakin tingi.","8e8a5f8e":"#### **Import data**","95cd825c":"#### **Data Information**","2592072a":"#### **Data Visualization**","e4ab0a7e":"#### Random Forest","4bdf0f8d":"Dari tabel korelasi diatas atribut fare dan Pclass memiliki korelasi yang cukup tinggi yang menandakan adanya redudansi atribut, oleh karena itu atribut yang akan digunakan adalah atribut Pclass saja sedangkan atribut fare akan di drop ","eb59c171":"### **Exploratory Data Analysis**","5811c5c0":"#### Fill Missing Value","57125a80":"Dari informasi seputar dataset diatas atribut PassengerId dan Name merupakan atribut unik dimana setiap objek data pasti memiliki nilai tersendiri maka dari itu kedua atribut tersebut tidak akan digunakan dalam pembangunan model. Selain itu, atribut cabin juga merupakan nomor cabin penumpang dimana,setiap penumpang memiliki nomor cabin tersendiri. Maka dari itu atribut cabin tidak akan digunakan pada pembangunan model","14b4fb0b":"Dataset ini merupakan data penumpang kapal Titanic. Data set yang digunakan memiliki 12 atribut. Berikut adalah penjelasan informasi atribut:\n\n1. **Survived** Label yang menandakan penumpang selamat atau tidak\n2. **Sex** merupakan jenis kelamin penumpang\n3. **Age** merupakan usia penumpang\n4. **Pclass** merupakan kelas tiket penumpang\n5. **Fare** merupakan tarif penumpang membeli tiket\n6. **PasseggerId** merupakan ID penumpang\n7. **Name** merupakan nama penumpang\n8. **Cabin** merupakan nomor kabin penumpang\n9. **Ticket** merupakan nomor ticket penumpang\n10. **Embarked** merupakan pelabuhan keberangkatan penumpang\n11. **SibSp** merupakan jumlah saudara\/pasangan penumpang yang berada di kapal\n12. **Parch** merupakan jumlah orang tua\/anak penumpang yang berada di kapal","9f41e100":"## **Dataset Description**"}}