{"cell_type":{"69fac680":"code","7fa1c352":"code","38537c3f":"code","c287bae1":"code","ca51e5cc":"code","83494ff3":"code","4e40f367":"code","7fcaa4e7":"code","4449e07b":"code","443a9c07":"code","9b3c8477":"code","25be43fa":"code","7f5b9cd6":"code","9e14116c":"code","d79be27d":"code","aa049875":"code","a69268b4":"code","464e6067":"code","6466d5cb":"code","3f0b8622":"code","784832db":"code","5c076a28":"code","d2d04ac1":"code","cd11144f":"code","1003c118":"code","7f28dea3":"code","9fcf0e73":"code","723c2ae4":"code","b54802fe":"code","99c8ab16":"code","f27dc093":"code","6c6eb3d4":"code","37e1a16b":"code","27c0eca7":"code","c8f75fce":"code","10893af9":"code","68b18b7f":"code","f0630b4d":"code","b842c0f2":"code","23bbcd8d":"code","bf3e8438":"markdown","9847f079":"markdown","a286c5c3":"markdown","e4233a66":"markdown","43280b67":"markdown","36ea7b9b":"markdown","f77fe2ea":"markdown","ab66228a":"markdown","33f9e69c":"markdown"},"source":{"69fac680":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fa1c352":"df=pd.read_csv(\"\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\ndf.head()","38537c3f":"df.info()","c287bae1":"df.describe()","ca51e5cc":"df.shape","83494ff3":"df.isnull().any()","4e40f367":"df.isnull().sum()","7fcaa4e7":"#fill the null values for numerical data\ndf['LoanAmount']=df['LoanAmount'].fillna(df['LoanAmount'].mean())\ndf['Loan_Amount_Term']=df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())\ndf['Credit_History']=df['Credit_History'].fillna(df['Credit_History'].mean())\n","4449e07b":"# fill the missing values for categorical terms - mode\ndf['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])\ndf['Married']=df['Married'].fillna(df['Married'].mode()[0])\ndf['Dependents']=df['Dependents'].fillna(df['Dependents'].mode()[0])\ndf['Self_Employed']=df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])","443a9c07":"df.isnull().sum()","9b3c8477":"import seaborn as sns\nsns.countplot(df['Gender'])\n\n","25be43fa":"sns.countplot(df['Dependents'])","7f5b9cd6":"sns.countplot(df['Education'])","9e14116c":"sns.countplot(df['Self_Employed'])","d79be27d":"sns.countplot(df['Property_Area'])","aa049875":"sns.countplot(df['Loan_Status'])","a69268b4":"sns.distplot(df['ApplicantIncome'])","464e6067":"sns.distplot(df['LoanAmount'])","6466d5cb":"sns.distplot(df['Loan_Amount_Term'])","3f0b8622":"sns.distplot(df['Credit_History'])","784832db":"# total income\ndf['Total_Income']=df['ApplicantIncome'] + df['CoapplicantIncome']\ndf.head()","5c076a28":"corr = df.corr()\nsns.heatmap(corr,annot=True, cmap='BuPu')","d2d04ac1":"df.head()","cd11144f":"# drop unnecessary columns\ncols = ['Loan_ID', 'CoapplicantIncome']\ndf=df.drop(columns=cols, axis=1)\ndf.head()","1003c118":"from sklearn.preprocessing import LabelEncoder\ncols=['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status', 'Dependents']\nle=LabelEncoder()\nfor col in cols:\n    df[col]=le.fit_transform(df[col])\n","7f28dea3":"df.head()","9fcf0e73":"# Specify input and output attributes\nX=df.drop(columns=['Loan_Status'],axis=1)\ny=df['Loan_Status']","723c2ae4":"from sklearn.model_selection import train_test_split\nX_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)\n","b54802fe":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()","99c8ab16":"model.fit(X_train,y_train)","f27dc093":"y_pred=model.predict(x_test)","6c6eb3d4":"model.score(x_test,y_test)","37e1a16b":"from sklearn.model_selection import cross_val_score\ncv_results=cross_val_score(model,X,y,cv=5)\nnp.mean(cv_results)","27c0eca7":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score","c8f75fce":"from sklearn.model_selection import train_test_split\nX_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y,random_state=1)","10893af9":"dt=DecisionTreeClassifier(max_depth=2,random_state=1)","68b18b7f":"dt.fit(X_train,y_train)","f0630b4d":"y_pred=dt.predict(x_test)","b842c0f2":"accuracy_score(y_test,y_pred)","23bbcd8d":"from sklearn.model_selection import cross_val_score\ncv_results=cross_val_score(dt,X,y,cv=5)\nnp.mean(cv_results)","bf3e8438":"## Loading The Dataset","9847f079":"## Preprocessing of DataSets","a286c5c3":"## Corr Matrix","e4233a66":"## Label Encoding","43280b67":"## Decision Tree Classifier ","36ea7b9b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","f77fe2ea":"## Number Atributes Visualization ","ab66228a":"## Algorithm Implementation ","33f9e69c":"## Exploratory Data Analysis "}}