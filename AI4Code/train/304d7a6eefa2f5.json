{"cell_type":{"a232e13d":"code","5bd105b2":"code","465927f1":"code","e1cc01d9":"code","6951fff3":"code","27f69e97":"code","f20d5cd6":"code","ae7aa0be":"code","a58c0b32":"code","6c08e42d":"code","a0568800":"code","45595c1a":"code","6472a64c":"code","68031798":"code","2cf4affe":"code","5a3776d6":"code","a6bcb5fc":"code","cbdccd8a":"code","7e4cea08":"code","5cd80289":"code","8c6efc92":"code","438c8b62":"code","1288325e":"code","4482faec":"code","c88e749d":"code","8ab673f6":"code","be758121":"code","b300fd3a":"code","565c04e6":"code","c01bef2b":"code","2b75c49e":"code","cb42ea9c":"code","28d4daa5":"markdown","a6510adc":"markdown","7bd1cbcb":"markdown","957eefa4":"markdown","a1bef7f9":"markdown","21437dc9":"markdown","fe7b3448":"markdown","fdfc1aec":"markdown","41fc19fc":"markdown","5be60b06":"markdown","62eac9ce":"markdown"},"source":{"a232e13d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5bd105b2":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","465927f1":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\ntest_ids = test.Id # Storing test Set ID for Final Submission File","e1cc01d9":"train.shape","6951fff3":"test.shape","27f69e97":"train.head()","f20d5cd6":"# Merging The Data for uniform preprocessing\nall_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","ae7aa0be":"all_null_columns = all_data.columns[all_data.isna().any()].tolist()\nall_categoric_cols = all_data.select_dtypes(include=['object']).columns.to_list()\nall_numeric_cols = all_data.select_dtypes(exclude=['object']).columns.to_list()\n\n# List of Numeric Columns with Null Values\nnull_numeric_columns = []\nfor col in all_numeric_cols:\n  if col in all_null_columns:\n    null_numeric_columns.append(col)\n\n# List of Categoric Columns with Null Values\nnull_categoric_columns = []\nfor col in all_categoric_cols:\n  if col in all_null_columns:\n    null_categoric_columns.append(col)","a58c0b32":"def fill_null_values(cols, fill_type):\n  for col in cols:\n    if fill_type == \"mode\":\n      all_data[col].fillna(all_data[col].mode()[0], inplace=True)\n    elif fill_type == \"median\":\n      all_data[col].fillna(all_data[col].median(), inplace=True)\n    elif fill_type == \"mean\":\n      all_data[col].fillna(all_data[col].mean(), inplace=True)","6c08e42d":"all_data[null_numeric_columns].head()","a0568800":"all_data[null_numeric_columns].describe()","45595c1a":"all_data[null_numeric_columns].isnull().sum()","6472a64c":"# Fill Null values by mode of the respective column\nfill_null_values(\n    cols =[\"BsmtFullBath\", \"BsmtHalfBath\"],\n    fill_type = \"mode\"\n)\n\n# Fill Null values by median of the respective column\nfill_null_values(\n    cols =[\"GarageCars\"],\n    fill_type = \"median\"\n)\n\n# Fill Null values by mean of the respective column\nfill_null_values(\n    cols = [\"LotFrontage\", \"MasVnrArea\", \"BsmtFinSF1\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"GarageYrBlt\", \"GarageArea\"], \n    fill_type = \"mean\")","68031798":"all_data[null_categoric_columns].head()","2cf4affe":"categoric_null_data = all_data[null_categoric_columns].isnull().sum()\ncategoric_null_data","5a3776d6":"all_data.drop(columns = categoric_null_data[categoric_null_data > 50].index, axis=1, inplace=True)","a6bcb5fc":"# This Gives the List of Remaining Columns with Null Values -- DataType of the Remaining Columns is Object i.e. Categorical\nall_null_columns = all_data.columns[all_data.isna().any()].tolist()\nall_null_columns","cbdccd8a":"# Filling the null values in Categorical Values with the mode of the respective columns\nfill_null_values(\n    cols = all_null_columns,\n    fill_type = \"mode\"\n)","7e4cea08":"# No Null Columns Left\nall_data.isna().any().sum()","5cd80289":"all_data = pd.get_dummies(all_data) # One Hot Encoding Categorical Columns\nall_categoric_cols = all_data.select_dtypes(include = ['object']).columns.to_list() # Droping Original Columns after encoding","8c6efc92":"print(\"Number of Columns : \", len(all_data.columns))","438c8b62":"X = all_data.iloc[:train.shape[0], :]\ny = train.iloc[:, -1].tolist()\n\ntest = all_data.iloc[train.shape[0]:, :]","1288325e":"# Setup cross validation folds\nfrom sklearn.model_selection import KFold, cross_val_score\nkf = KFold(n_splits=12, random_state=42, shuffle=True)","4482faec":"# Define error metrics\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)","c88e749d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","8ab673f6":"from lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.metrics import r2_score\n\nMLA = [\n      # Light Gradient Boosting Regressor\n      LGBMRegressor(objective='regression'),\n\n      # XGBoost Regressor\n      XGBRegressor(objective='reg:squarederror'),\n\n      # Gradient Boosting Regressor\n      GradientBoostingRegressor(),\n\n      # Random Forest Regressor\n      RandomForestRegressor(),\n       \n      # CatBoost Regressor\n      CatBoostRegressor()\n]","be758121":"row_index = 0\nMLA_compare = pd.DataFrame()\n\nfor classifier in MLA:\n  classifier.fit(X_train, y_train)\n\n  y_pred = classifier.predict(X_test)\n\n  MLA_name = classifier.__class__.__name__\n  MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n  MLA_compare.loc[row_index, 'R2 Score'] = r2_score(y_test, y_pred)\n\n  row_index+=1","b300fd3a":"MLA_compare = MLA_compare.sort_values(\"R2 Score\", ascending=False).reset_index(drop=True)\nMLA_compare","565c04e6":"gbr = GradientBoostingRegressor()\ngbr.fit(X_train, y_train)\n\ny_pred = gbr.predict(X_test)\nr2_score(y_test, y_pred)","c01bef2b":"# Using Cross Validation\naccuracies = cross_val_score(estimator = gbr, X = X_train, y = y_train, cv = 10, scoring=\"r2\")\nprint(f\"Cross Val R2 Score : {accuracies.mean()*100:.2f} %\")","2b75c49e":"test_data_pred = gbr.predict(test)","cb42ea9c":"output = pd.DataFrame({'Id': test_ids, 'SalePrice': test_data_pred})\noutput.to_csv('submission-gradientboosting.csv', index=False)","28d4daa5":"## Setup Models","a6510adc":"# GradientBoostingRegressor Model","7bd1cbcb":"## Handling Null Values in Numeric Columns","957eefa4":"# Preprocessing","a1bef7f9":"# Preparing Data for Model","21437dc9":"# Train the Model","fe7b3448":"# Saving Prediction for Submission","fdfc1aec":"## Encoding Categorical Columns","41fc19fc":"# Getting Data Ready","5be60b06":"# Importing Libraries","62eac9ce":"## Handling Null Values in Categoric Columns"}}