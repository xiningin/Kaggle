{"cell_type":{"ea274a09":"code","da263234":"code","6ecc6c27":"code","14773538":"code","64f6bfd3":"code","af7b292f":"code","14c31cef":"code","0f3628be":"code","af3b899e":"code","ba1f9e5b":"code","51bba016":"code","dfa9e1cd":"code","78650a11":"code","59b4770c":"code","57e183b6":"code","c143b02f":"code","d17b7be3":"code","91339363":"code","5bca0706":"code","9166d692":"code","7741556b":"code","7c767a8d":"code","bc772b08":"code","8b6fe623":"code","3210ea86":"code","454570a1":"code","b31b26c0":"code","8c589071":"code","239b20dd":"code","1fa781c6":"code","49ccf6b6":"code","2dc6add2":"code","e4228ebb":"code","ca597e7a":"code","a5407c30":"code","1c1c2620":"code","b177ce5a":"code","6a240df5":"code","15a4766a":"code","ada668d3":"code","48d4f8ad":"code","8f74ed47":"code","76491fb0":"code","008b44e4":"code","880d64a8":"code","0b58b1c1":"code","6a40f571":"code","a7eb4817":"code","84b290bd":"code","b85c8aae":"code","aa3c768e":"code","6b8288d6":"code","d29bcf2a":"code","a5857f49":"code","9f8f6e01":"code","9577786e":"code","6853e03a":"code","6f3495bb":"code","9bb284d2":"code","c29a89e1":"code","af38da4e":"markdown","dedc9eb4":"markdown","2821efad":"markdown","63ba2208":"markdown","592b1b0e":"markdown","340a29bf":"markdown","75d20820":"markdown","adfc2a81":"markdown","3b376483":"markdown","eb7027e6":"markdown","655430dc":"markdown","51d1c3c6":"markdown","d18cc10e":"markdown","4bdf8e67":"markdown","c4ee0e3f":"markdown","e10b24a4":"markdown","889aa5fb":"markdown","ce310823":"markdown","6831fb08":"markdown","c19095c1":"markdown","b88248b9":"markdown","f789e71f":"markdown","4658c69e":"markdown","1add5a31":"markdown","abd3aa70":"markdown","a0e14abf":"markdown","439a35a0":"markdown","9b1f8098":"markdown","e05da41f":"markdown","365bd68a":"markdown","a6e4a8a2":"markdown","d0c5acce":"markdown","76d64e4f":"markdown","fe6b77b1":"markdown","3989310e":"markdown","2cac91c6":"markdown","c69ba847":"markdown","1fd36452":"markdown","d1fe36f8":"markdown","d1ced68d":"markdown","ae454777":"markdown","8926989b":"markdown","8fe7d267":"markdown","011082c2":"markdown","df5e8a5f":"markdown","96c36c98":"markdown","fc1c2e6d":"markdown","39838986":"markdown","50e55a21":"markdown","1afce5e0":"markdown","9bbef63c":"markdown","ffe6d682":"markdown","52d0fd52":"markdown"},"source":{"ea274a09":"import pandas as pd\nimport numpy as np\n\nimport missingno as msno\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#import plotly.express as px\n#import plotly.graph_objects as go\nimport math\nimport warnings \nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', None) # to see all columns\n# pd.set_option('display.max_rows', None)\npd.set_option('display.max_rows', 200) \npd.set_option('display.max_colwidth',900) # to see full coontent of columns\n\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.patches as mpatches\nfrom plotly.subplots import make_subplots\n \nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\n\nimport squarify\n","da263234":"#netflix dataset\ndfnetflix=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\n#Imdb","6ecc6c27":"dfimdb_movies = pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv')\ndfimdb_movies = dfimdb_movies[['imdb_title_id', 'title', 'year']]\ndfimdb_ratings = pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb ratings.csv')\ndfimdb = pd.merge(dfimdb_movies, dfimdb_ratings, on='imdb_title_id')","14773538":"dfnetflix.head()","64f6bfd3":"dfimdb.head()","af7b292f":"dfnetflix.info()","14c31cef":"dfimdb.info()","0f3628be":"#get the size of dataframe\nprint (\"Rows     : \" , dfnetflix.shape[0])  #get number of rows\/observations\nprint (\"Columns  : \" , dfnetflix.shape[1]) #get number of columns\nprint (\"#\"*30,\"\\n\",\"Features : \\n\", dfnetflix.columns.tolist()) #get name of columns\/features\n","af3b899e":"#get the size of dataframe\nprint (\"Rows     : \" , dfimdb.shape[0])  #get number of rows\/observations\nprint (\"Columns  : \" , dfimdb.shape[1]) #get number of columns\nprint (\"#\"*30,\"\\n\",\"Features : \\n\", dfimdb.columns.tolist()) #get name of columns\/features\n","ba1f9e5b":"dfnetflix.describe().T","51bba016":"print (\"#\"*30,\"\\nMissing values :\\n\\n\", dfimdb.isnull().sum().sort_values(ascending=False)) # looking at columns with most Missing Values\n","dfa9e1cd":"print (\"#\"*30,\"\\nMissing values :\\n\\n\", dfnetflix.isnull().sum().sort_values(ascending=False)) # looking at columns with most Missing Values\nprint (\"#\"*30,\"\\nUnique values :  \\n\\n\", dfnetflix.nunique())  #  count of unique values\n","78650a11":"#Making a copy before changing the dataset\ncopy_dfnetflix= dfnetflix.copy()\ncopy_dfimdb=dfimdb.copy()","59b4770c":"#Process Ratings Columns\ndfnetflix.loc[dfnetflix[\"rating\"].isnull()]","57e183b6":"# found out the rating from internet for this shows and fixing it.\nrating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA'\n}\n\nfor id, rate in rating_replacements.items():\n    dfnetflix.iloc[id, 8] = rate #8  here is the rating columns\n    \ndfnetflix['rating'].isnull().sum()","c143b02f":"ratings_ages = {  'TV-Y' : 'Kids',\n            'TV-Y7' : 'Kids' ,\n            'TV-G'  : 'Kids',\n            'PG'    : 'Kids',\n            'TV-PG' : 'Kids',\n            'PG-13' : 'Teens',\n            'TV-14' : 'Teens',\n            'R'     : 'Adults',\n            'TV-MA' : 'Adults',\n            'NC-17' : 'Adults',\n            'NR': 'Adults',\n            'UR': 'Adults',\n            'TV-Y7-FV':'Kids',\n            'G': 'Kids'} ","d17b7be3":"dfnetflix['ratings_group'] = dfnetflix['rating'].replace(ratings_ages)\ndfnetflix['ratings_group'].unique()","91339363":"#Process Duration Columns\n# Result cols\ndf_duration = dfnetflix.copy()\ndur_cols = ['title', 'duration', 'duration_num','type']\n\n# Extracting numerical info for title duration\ndf_duration['duration_num'] = df_duration['duration'].apply(lambda x: int(x.split(' ')[0]))\n\n# Results\ndf_duration.head().loc[:, dur_cols]\n","5bca0706":"# handling missing values in netflix data set\ndfnetflix['director'] = dfnetflix['director'].fillna('NoDataAvailable')\ndfnetflix['country'] = dfnetflix['country'].fillna(dfnetflix['country'].mode()[0])\ndfnetflix['cast'] = dfnetflix['cast'].fillna('NoDataAvailable')\ndfnetflix['date_added'] = dfnetflix['date_added'].fillna(dfnetflix['date_added'].mode()[0])\nprint(dfnetflix.isna().sum())","9166d692":"dfnetflix.info()\n","7741556b":"# adding few columns to dataset by extracting existing columns\ndfnetflix['date_added'] = pd.to_datetime(dfnetflix.date_added)#convert to datetime\n#adding month and year columns\ndfnetflix['Month_Whenadded'] = dfnetflix['date_added'].dt.month\ndfnetflix['Year_Whenadded'] = dfnetflix['date_added'].dt.year\ndfnetflix['Month_name']= dfnetflix['date_added'].dt.month_name()\n\n#how old is the content\ndfnetflix['title_age_years'] = pd.datetime.now().year - dfnetflix['release_year']\n# get num and season\ndfnetflix['duration_num'] = dfnetflix['duration'].apply(lambda x: int(x.split(' ')[0]))\ndfnetflix['duration_scale'] = dfnetflix['duration'].apply(lambda x: x.split(' ')[-1].strip())\n\n# Fixing duration scale name season\/Min\ndfnetflix['duration_scale'] = dfnetflix['duration_scale'].apply(lambda x: 'Season' if x in ('Season', 'Seasons') else x)\n\n# Sfinding day and month since added , rather than cmputing adding it has feature\ndfnetflix['date_since_added'] = dfnetflix['date_added'].max()\n\n# Computing deltas\ndfnetflix['days_since_added'] = (dfnetflix['date_since_added'] - dfnetflix['date_added']).dt.days\ndfnetflix['months_since_added'] = (dfnetflix['days_since_added'] \/ 30)\ndfnetflix['years_since_added'] = (dfnetflix['days_since_added'] \/ 365)\n\ndfnetflix=dfnetflix.loc[dfnetflix['date_added'] < '2021-06-27']  #creating subset of data only till 27 june 2021\ndfnetflix.info()","7c767a8d":"# most of the missing values are rating so filling them with 0 as it\n#would just mean not popular , may not be correct approach in many scenarios\ndfimdb.fillna(0,inplace=True)","bc772b08":"dfimdb.isnull().sum()","8b6fe623":"dfnetflix.head()\n","3210ea86":"dfnetflix.describe(include = [np.object]).T\n","454570a1":"dfnetflix.describe(include = [np.number]).T\n","b31b26c0":"dfimdb.describe()","8c589071":"from datetime import datetime\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 4.5),dpi=70, constrained_layout=True)\nfig.patch.set_facecolor('black')\nax.set_facecolor('black')\nax.set_ylim(0, 1.75)\nax.set_xlim(-1, 9)\n\nax.axhline(1, xmin=0.1, xmax=0.9, c='#E50914', zorder=1,linewidth=40)# center line\n\ntl_sub_x = [0,2,4,6,8] \ntl_x = [1,3,5,7]\ntl_dates = [\n    \"1997\\nFounded\",\n    \"1998\\nLaunches Website\\n with 925 rentals\",\n    \"1999\\nLaunches Montly\\n subscription \",\n    \"2002\\nGoes Public \",\n    \"2003\\nReaches 1 million\\n subscribers\",\n    \"2007\\nIntroduces \\nstreaming service\",\n    \"2010\\nExpands internationally\\nstarting with Canada\",\n    \"2017\\n 20th anniversary\",\n    \"2021\\n 207 million subscribers\"\n]\nymin1=0.56\nymax1=0.49\nymax2=0.65\nytext1=0.6\nytext2=1.2\n#plot down\nfor i in tl_sub_x:\n    ax.scatter(i,1 , s=40, c='white', zorder=2,linewidths=5)\n    plt.axvline(x=i,ymin=ymin1,ymax=ymax1,color='white', linestyle='-') #vertical line\n    ax.text(i, ytext1, tl_dates[i], ha='center', \n              fontweight='bold',\n             color='white',fontsize=12)\n\n    #plot up\nfor i in tl_x:\n     ax.scatter(i,1 , s=40, c='white', zorder=2,linewidths=5)\n     plt.axvline(x=i,ymin=ymin1,ymax=ymax2,color='white', linestyle='-')  #vertical line\n     ax.text(i, ytext2, tl_dates[i], ha='center', \n               fontweight='bold',\n              color='white',fontsize=12)\n# # Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n     ax.spines[spine].set_visible(False)\n\n# # Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Netflix Timeline\", fontweight=\"bold\",  fontsize=29, color='#E50914')\nax.text(2.5,1.6,\"From DVD Rentals to Most Popular Streaming Service\",fontweight=\"bold\", fontsize=12, color='white')\n\nplt.show()\n","239b20dd":"#get countries column contained more than one values so using counter and split to get different countries\nfrom collections import Counter\ncol = \"country\"\ncountry = \", \".join(dfnetflix[col].fillna(\"\")).split(\", \")\ncountry_count_list = Counter(country).most_common(121)\ndf_country=pd.DataFrame(country_count_list,columns=['Country','content_count'])\nTotalcountries=df_country.Country.nunique()\n","1fa781c6":"#some of the columns had 2 or more directors column  so spliting them and getting all directors\nfrom collections import Counter\ncol = \"director\"\ndirector = \", \".join(dfnetflix[col].fillna(\"\")).split(\", \")\ndirector_count_list = Counter(director).most_common(4375)\n\ndf_director=pd.DataFrame(director_count_list,columns=['Director','content_count'])\nTotaldirector=df_director.Director.nunique()\n\n\n","49ccf6b6":"df_movie = dfnetflix[dfnetflix['type'] == 'Movie']\nmoviecount=df_movie['title'].nunique()\ndf_tv = dfnetflix[dfnetflix['type'] == 'TV Show']\ntvcount=df_tv['title'].nunique()\n","2dc6add2":"fig, ax = plt.subplots(nrows=1,ncols=4,figsize=(15, 3),dpi=70, constrained_layout=True)\nfig.patch.set_facecolor('black')\ncontent_list=[\"\\n   \"+ str(Totalcountries) + \"\\nCountries\",\n              \"\\n   \"+ str(Totaldirector )+ \"\\nDirectors\",\n              \"\\n  \"+ str(moviecount)+\"\\nMovies\",\n              \"\\n   \"+ str(tvcount)+\"\\nTv Shows\"]\ncolor_list=['#E50914', 'grey','#E50914', 'grey']\n#backcolor=['#E50914','grey']\nfor i in range(4):\n    ax[i].set_facecolor(color_list[i])\n    ax[i].grid(b=None,axis='both',which='both',color='black')\n    ax[i].axes.get_xaxis().set_visible(False)\n    ax[i].axes.get_yaxis().set_visible(False)\n    # # Spine\n    for spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n         ax[i].spines[spine].set_visible(False)\n    #title=\"\\n\"+ str(Totalcountries) + \"\\n Countries\" \n    #ax[i].set_title(content_list[i] ,{'font': 'Serif','fontsize': 30,'fontweight': 4,'color': 'white'})\n    ax[i].text(0.1,0.4,content_list[i] ,{'font': 'Serif','fontsize': 30,'fontweight': 4,'color': 'white'})\n","e4228ebb":"contenttype = dfnetflix['type'].value_counts()  #tv\/movie\ncontentfor=dfnetflix.ratings_group.value_counts() # kids\/adult\n","ca597e7a":"# plot\n\nfig, ax = plt.subplots(nrows=1,ncols=2,figsize = (15,4),dpi=90, constrained_layout=True)\n\nlabel=['Movies','TV Show']\nax[0].pie(contenttype.values,colors=('#b20710','grey'), shadow=True, startangle=90,\n          autopct='%1.1f%%',labels=label,textprops=dict(color=\"w\",fontsize=12),labeldistance=0.2,\n          wedgeprops=dict(edgecolor='white',linewidth=0))\nfig.patch.set_facecolor('black')\nax[0].set_facecolor('black')\nax[0].set_title('Does Netflix have more Movie or TV shows ?\\nNetflix has more Movie content,reason may be nowdays \\nMost of channel has there own streaming app',\n                {'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'} )\n\nlabel=['Adults','Teens','Kids']\nax[1].pie(contentfor.values,colors=('#b20710','#e50914','grey'), shadow=True, startangle=70,\n          autopct='%1.1f%%',labels=label,textprops=dict(color=\"w\",fontsize=12),labeldistance=0.3,\n          wedgeprops=dict(edgecolor='white',linewidth=0))\nfig.patch.set_facecolor('black')\nax[1].set_facecolor('black')\nax[1].set_title('Does Netflix have more contents for Adult ?\\n Netflix has more content for Adults,but these should  \\nchange as Disney started it streaming services',\n                {'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'} )\n\nfig.tight_layout()\nplt.show()\n","a5407c30":"top10=df_country.head(10)\nlabels=top10.Country\nvalues=top10.content_count\n","1c1c2620":"fig, ax = plt.subplots(figsize=(15, 10), dpi=80)\nfig.patch.set_facecolor('black')\nax.set_facecolor('black')\nax.grid(b=None,axis='both',which='both')\ny_pos = np.arange(len(labels))\n#colors = ['#b20710']\ncolors = ['#87050c','#b20710','#ba222a', '#ba222a','#c33e45','#c33e45','#cb595f','#d4757a','#dc9094','#e5acaf',]\nax.barh(y_pos, values, align='center',color=colors,alpha=0.9)\nax.set_yticks(y_pos)\nax.set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\nax.invert_yaxis()  # labels read top-to-bottom\nlabels_country=values.tolist()\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\n# Text on the top of each bar\ni=0\nfor p in ax.patches:\n       x = p.get_x() + p.get_width()+12\n       y = p.get_y() + p.get_height()-0.2\n       ax.text(x,y, '{}'.format(labels_country[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n       i=i+1 \n\nax.axes.grid(b=None,axis='both',which='both')\nax.set_title('Top 10 Countries where most content is released',fontweight=\"bold\",  fontsize=20, color='white')\nax.text(-88,10,'This visualization shows Top 10 countries .Vast content is released in US since Netflix was launched here',{'fontsize': 15,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})\n","b177ce5a":"top5=df_country.head(5)\ncountry_list=top5.Country\ndirector_list1=dfnetflix[dfnetflix['country'].isin([country_list[1]])]['director'].head(5)\n","6a240df5":"countries_list = df_country['Country'].head(6)\n\nfig, ax = plt.subplots(nrows=3,ncols=2,figsize=(15, 7), dpi=80)\nfig.patch.set_facecolor('black')\n\ncolors = ['#b20710', '#ba222a','#c33e45','#cb595f','#d4757a']\nj=0\nfor i,country in enumerate(countries_list):\n        country_df = dfnetflix[dfnetflix[\"country\"]==country]\n        director = \", \".join(country_df['director'].fillna(\"\")).split(\", \")\n        top5director_list = Counter(director).most_common(6)\n        df_director_top5= pd.DataFrame(top5director_list,columns=['Director','count_director'])\n        df_director_top5['country']=country\n        values=df_director_top5.loc[1:,'count_director']\n        labels=df_director_top5.loc[1:,'Director']\n        y_pos = np.arange(len(labels))\n        row=i\/\/2\n        col=i%2\n        \n        ax[row,col].set_title(country,fontweight=\"bold\",  fontsize=20, color='white')\n        ax[row,col].set_facecolor('black')\n        \n        ax[row,col].barh(y_pos, values, align='center',color=colors,alpha=0.9)\n        labels1=values.tolist()\n        i=0\n        for p in ax[row,col].patches:\n      #percentage = top25.content_count[p]\n            x = p.get_x() + p.get_width()\n            y = p.get_y() + p.get_height()\n            ax[row,col].text(x,y, '{}'.format(labels1[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n            i=i+1\n            \n        ax[row,col].set_yticks(y_pos)\n        ax[row,col].set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\n        ax[row,col].invert_yaxis()  # labels read top-to-bottom\n        plt.grid(b=None,which='both', axis='both')\n        ax[row,col].grid(b=None,axis='both',which='both')\n        ax[row,col].axes.get_xaxis().set_visible(False)\n        ax[row,col].axes.grid(b=None,axis='both',which='both')\n        #labels1=values.tolist()\n        for loc in ['left','right','top','bottom']:\n            ax[row,col].spines[loc].set_visible(False)\n      \n\nplt.suptitle('Director with the most content from Top 6 countries',fontweight=\"bold\",  fontsize=20, color='white')\nplt.tight_layout()\n\n#ax.set_title('Countries where most content are released',{'fontsize': 18,'fontweight': 9,'color': '#e50914','verticalalignment': 'baseline'})\nplt.text(-5,6.3,'This visualization shows Top 5 director with most content  from Top 6 countries .\\nMarcus Raboy has highest content in  USA,While David Dhawan highest content in India',{'fontsize': 16,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})\nplt.show()","15a4766a":"dfnetflix.loc[dfnetflix['director'].str.contains('Marcus Raboy'),'title']","ada668d3":"dfnetflix.loc[dfnetflix['director'].str.contains('David Dhawan'),'title']","48d4f8ad":"countries_list = df_country['Country'].head(6)\n\nfig, ax = plt.subplots(nrows=3,ncols=2,figsize=(15, 7), dpi=  80)\nfig.patch.set_facecolor('black')\n\n\n#colors = ['#b20710']\ncolors = ['#b20710', '#ba222a','#c33e45','#cb595f','#d4757a']\nj=0\nfor i,country in enumerate(countries_list):\n        country_df = dfnetflix[dfnetflix[\"country\"]==country]\n        genre = \", \".join(country_df['listed_in'].fillna(\"\")).split(\", \")\n        top3genre_list = Counter(genre).most_common(5)\n        df_genre_top3= pd.DataFrame(top3genre_list,columns=['Genre','count_genre'])\n        df_genre_top3['country']=country\n        values=df_genre_top3['count_genre']\n        labels=df_genre_top3['Genre']\n        y_pos = np.arange(len(labels))\n        row=i\/\/2\n        col=i%2\n        ax[row,col].set_title(country,fontweight=\"bold\",  fontsize=20, color='white')\n        ax[row,col].set_facecolor('black')\n       \n        ax[row,col].barh(y_pos, values, align='center',color=colors,alpha=0.9)\n        labels1=values.tolist()\n        i=0\n        for p in ax[row,col].patches:\n      #percentage = top25.content_count[p]\n            x = p.get_x() + p.get_width()\n            y = p.get_y() + p.get_height()\n            ax[row,col].text(x,y, '{}'.format(labels1[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n            i=i+1\n        ax[row,col].set_yticks(y_pos)\n        ax[row,col].set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\n        ax[row,col].invert_yaxis()  # labels read top-to-bottom\n\n        ax[row,col].grid(False)\n        #ax[row,col].axes.get_xaxis().set_visible(False)\n        # Turn off the display of all ticks.\n               \n        for loc in ['left','right','top','bottom']:\n            ax[row,col].spines[loc].set_visible(False)\n            \n       \nplt.suptitle('Genre with the most content  from Top 5 countries',fontweight=\"bold\",  fontsize=20, color='white')\nplt.tight_layout()\n\n#ax.set_title('Countries where most content are released',{'fontsize': 18,'fontweight': 9,'color': '#e50914','verticalalignment': 'baseline'})\nplt.text(-250,8.5,'This visualization shows Top 5 Genre content released from Top 5 countries .\\nThe content availability must be based on demand and supply.\\n Us has more of Dramas and comedies content whereas in India its International Movies', {'fontsize': 16,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})\n#plt.text(-250,7.5,'Canada like to watch more Comedies .',{'fontsize': 16,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})\nplt.show()","8f74ed47":"dfnetflix.info()","76491fb0":"# Top 5 newest show\ncolumns = ['title', 'country', 'date_added', 'release_year', 'duration']\ndf_tv.query('duration_num  == 1'). sort_values(by='days_since_added', ascending=True).head(10).loc[:, columns].style.set_properties(**{'background-color':'black',\n                                     'color': 'white',\n                                      'border-color':'red'})","008b44e4":"columns = ['title', 'country', 'date_added', 'release_year', 'duration']\ndf_movie. sort_values(by='days_since_added', ascending=True).head(10).loc[:, columns].style.set_properties(**{'background-color':'black',\n                                     'color': 'white',\n                                      'border-color':'white'})","880d64a8":"# Sorting movies\ntop10tv_seasons=dfnetflix.query(('type == \"TV Show\"')).sort_values(by='duration_num', ascending=False).head(10).loc[:,['title','duration_num']]\n\nvalues=top10tv_seasons.duration_num\nlabels=top10tv_seasons.title\n\nfig, ax = plt.subplots(figsize=(13, 10), dpi=70)\nfig.patch.set_facecolor('black')\nax.set_facecolor('black')\n\ny_pos = np.arange(len(labels))\ncolors = ['#87050c','#b20710','#ba222a', '#ba222a','#c33e45','#c33e45','#cb595f','#d4757a','#dc9094','#e5acaf']\nax.barh(y_pos, values, align='center',color=colors,alpha=0.9)\nax.set_yticks(y_pos)\nax.set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\nax.invert_yaxis()  # labels read top-to-bottom\nlabels_score=values.tolist()\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\n# Text on the top of each bar\ni=0\nfor p in ax.patches:\n       x = p.get_x() + p.get_width()\n       y = p.get_y() + p.get_height()\n       ax.text(x,y, '{}'.format(labels_score[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n       i=i+1 \nplt.grid(b=None,which='both', axis='both')\nax.grid(b=None,axis='both',which='both')\nax.axes.get_xaxis().set_visible(False)\nax.set_title('Top 10 TV shows with most seasons',fontweight=\"bold\",  fontsize=20, color='white')\nax.text(-2,10,'Few popular TV Shows run for a longer tenure.  Grey''s Anatomy has 16 seasons',{'fontsize': 15,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})","0b58b1c1":"dfimdb.describe()","6a40f571":"def weighted_averages(number_votes, avg_vote, row):\n    '''This function will calculate  the weighted avg'''\n    if row[number_votes] != 0.0:\n        weighted_rating = round(((row[number_votes]\/(row[number_votes]+1000))*row[avg_vote]) + ((1000\/(row[number_votes]+1000))*5.9),1)\n    else:\n        weighted_rating = 0\n    return weighted_rating","a7eb4817":"    \nweighted_allgenders_0age = []\nweighted_allgenders_18age = []\nweighted_allgenders_30age = []\nweighted_allgenders_45age = []\nweighted_males_allages = []\nweighted_males_0age = []\nweighted_males_18age = []\nweighted_males_30age = []\nweighted_males_45age = []\nweighted_females_allages = []\nweighted_females_0age = []\nweighted_females_18age = []\nweighted_females_30age = []\nweighted_females_45age = []\n\n#calling weighted average function  ( numberofvotes,agvotes,row)\n#( its takes longer to run coz of so many observation need to check if something can be improved)\nfor i in range(len(dfimdb)):\n    weighted_allgenders_0age.append(weighted_averages('allgenders_0age_votes', 'allgenders_0age_avg_vote', dfimdb.iloc[i]))\n    weighted_allgenders_18age.append(weighted_averages('allgenders_18age_votes', 'allgenders_18age_avg_vote', dfimdb.iloc[i]))\n    weighted_allgenders_30age.append(weighted_averages('allgenders_30age_votes', 'allgenders_30age_avg_vote', dfimdb.iloc[i]))\n    weighted_allgenders_45age.append(weighted_averages('allgenders_45age_votes', 'allgenders_45age_avg_vote', dfimdb.iloc[i]))\n    weighted_males_allages.append(weighted_averages('males_allages_votes', 'males_allages_avg_vote', dfimdb.iloc[i]))\n    weighted_males_0age.append(weighted_averages('males_0age_votes', 'males_0age_avg_vote', dfimdb.iloc[i]))\n    weighted_males_18age.append(weighted_averages('males_18age_votes', 'males_18age_avg_vote', dfimdb.iloc[i]))\n    weighted_males_30age.append(weighted_averages('males_30age_votes', 'males_30age_avg_vote', dfimdb.iloc[i]))\n    weighted_males_45age.append(weighted_averages('males_45age_votes', 'males_45age_avg_vote', dfimdb.iloc[i]))\n    weighted_females_allages.append(weighted_averages('females_allages_votes', 'females_allages_avg_vote', dfimdb.iloc[i]))\n    weighted_females_0age.append(weighted_averages('females_0age_votes', 'females_0age_avg_vote', dfimdb.iloc[i]))\n    weighted_females_18age.append(weighted_averages('females_18age_votes', 'females_18age_avg_vote', dfimdb.iloc[i]))\n    weighted_females_30age.append(weighted_averages('females_30age_votes', 'females_30age_avg_vote', dfimdb.iloc[i]))\n    weighted_females_45age.append(weighted_averages('females_45age_votes', 'females_45age_avg_vote', dfimdb.iloc[i]))\n    \ndfimdb['weighted_allgenders_0age'] = weighted_allgenders_0age\ndfimdb['weighted_allgenders_18age'] = weighted_allgenders_18age\ndfimdb['weighted_allgenders_30age'] = weighted_allgenders_30age\ndfimdb['weighted_allgenders_45age'] = weighted_allgenders_45age\ndfimdb['weighted_males_allages'] = weighted_males_allages\ndfimdb['weighted_males_0age'] = weighted_males_0age\ndfimdb['weighted_males_18age'] = weighted_males_18age\ndfimdb['weighted_males_30age'] = weighted_males_30age\ndfimdb['weighted_males_45age'] = weighted_males_45age\ndfimdb['weighted_females_allages'] = weighted_females_allages\ndfimdb['weighted_females_0age'] = weighted_females_0age\ndfimdb['weighted_females_18age'] = weighted_females_18age\ndfimdb['weighted_females_30age'] = weighted_females_30age\ndfimdb['weighted_females_45age'] = weighted_females_45age\n\ndfimdb = dfimdb[['title', 'year', 'weighted_average_vote', 'weighted_allgenders_0age', 'weighted_allgenders_18age', 'weighted_allgenders_30age', 'weighted_allgenders_45age',\n            'weighted_males_allages', 'weighted_males_0age', 'weighted_males_18age', 'weighted_males_30age', 'weighted_males_45age',\n            'weighted_females_allages', 'weighted_females_0age', 'weighted_females_18age', 'weighted_females_30age', 'weighted_females_45age']]","84b290bd":"dfimdb.head()","b85c8aae":"nf_movie = df_movie[['title', 'release_year', 'listed_in', 'country']]\nnf_movie = nf_movie.rename(columns={'release_year': 'year'}) # we need to for merge dataset\nnf_movie.head()","aa3c768e":"#merge netflix and imdb dataset based on title and year\ndf_netflix_imdb = nf_movie.merge(dfimdb, how=\"inner\", left_on=['title', 'year'], right_on=['title', 'year'])\ndf_netflix_imdb.head()","6b8288d6":"df_netflix_imdb.info()","d29bcf2a":"def top10(column, group):\n    titles = []\n    scores = []\n    top10=df_netflix_imdb[column].nlargest(10)\n    for i in range(len(top10)):\n        index = top10.index[i]\n        score = top10.iloc[i]\n        scores.append(score)\n        title = df_netflix_imdb['title'].iloc[index]\n        titles.append(title)\n        values=scores\n    labels=titles\n  \n    fig, ax = plt.subplots(figsize=(13, 10), dpi=80)\n    fig.patch.set_facecolor('black')\n    ax.set_facecolor('black')\n    \n    y_pos = np.arange(len(labels))\n    colors = ['#87050c','#b20710','#ba222a', '#ba222a','#c33e45','#c33e45','#cb595f','#d4757a','#dc9094','#e5acaf']\n    ax.barh(y_pos, values, align='center',color=colors,alpha=0.9)\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\n    ax.invert_yaxis()  # labels read top-to-bottom\n    labels_score=values\n    for loc in ['left','right','top','bottom']:\n        ax.spines[loc].set_visible(False)\n    # Text on the top of each bar\n    i=0\n    for p in ax.patches:\n           x = p.get_x() + p.get_width()\n           y = p.get_y() + p.get_height()\n           ax.text(x,y, '{}'.format(labels_score[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n           i=i+1 \n    plt.grid(b=None,which='both', axis='both')\n    ax.grid(b=None,axis='both',which='both')\n    ax.axes.get_xaxis().set_visible(False)\n    ax.set_title('Top 10 Movies Rated by '+ group ,fontweight=\"bold\",  fontsize=20, color='white')\n    #ax.text(-58,10,'This visualization shows Top 10 countries .Vast content is released in US since Netflix was launched here',{'fontsize': 15,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})","a5857f49":"top10('weighted_males_allages', ' Males')","9f8f6e01":"top10('weighted_females_allages', ' FeMales All Ages')","9577786e":"def find_plotgenres(genre_string, column, group):\n    titles = []\n    scores = []\n    genre = []\n    for i in range(len(df_netflix_imdb)):\n        row = df_netflix_imdb.iloc[i]\n        if genre_string in row['listed_in']:\n            genre.append(row)\n    genre = pd.DataFrame(genre)\n    top10=genre[column].nlargest(10)\n    for i in range(len(top10)):\n        index = top10.index[i]\n        score = top10.iloc[i]\n        scores.append(score)\n        title = df_netflix_imdb['title'].iloc[index]\n        titles.append(title)\n    values=scores\n    labels=titles\n    \n    fig, ax = plt.subplots(figsize=(13, 10), dpi=70)\n    fig.patch.set_facecolor('black')\n    ax.set_facecolor('black')\n    \n    y_pos = np.arange(len(labels))\n    colors = ['#87050c','#b20710','#ba222a', '#ba222a','#c33e45','#c33e45','#cb595f','#d4757a','#dc9094','#e5acaf']\n    ax.barh(y_pos, values, align='center',color=colors,alpha=0.9)\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\n    ax.invert_yaxis()  # labels read top-to-bottom\n    labels_score=values\n    for loc in ['left','right','top','bottom']:\n        ax.spines[loc].set_visible(False)\n    # Text on the top of each bar\n    i=0\n    for p in ax.patches:\n           x = p.get_x() + p.get_width()\n           y = p.get_y() + p.get_height()\n           ax.text(x,y, '{}'.format(labels_score[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n           i=i+1 \n    plt.grid(b=None,which='both', axis='both')\n    ax.grid(b=None,axis='both',which='both')\n    ax.axes.get_xaxis().set_visible(False)\n    ax.set_title('Top 10  Rated  '+ genre_string +\" by \" + group +\"Rating\" ,fontweight=\"bold\",  fontsize=20, color='white')\n    #ax.text(-58,10,'This visualization shows Top 10 countries .Vast content is released in US since Netflix was launched here',{'fontsize': 15,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})","6853e03a":"find_plotgenres('Thriller', 'weighted_average_vote', '')","6f3495bb":"def find_plot_yearwise(fromyear,toyear, column, group):\n    titles = []\n    scores = []\n    genre = []\n    \n    moviesfrom_to=df_netflix_imdb[(df_netflix_imdb['year']>fromyear) & (df_netflix_imdb['year']<=toyear)]\n    top10=moviesfrom_to[column].nlargest(10)\n    for i in range(len(top10)):\n        index = top10.index[i]\n        score = top10.iloc[i]\n        scores.append(score)\n        title = df_netflix_imdb['title'].iloc[index]\n        titles.append(title)\n    values=scores\n    labels=titles\n    \n    fig, ax = plt.subplots(figsize=(13, 10), dpi=70)\n    fig.patch.set_facecolor('black')\n    ax.set_facecolor('black')\n    \n    y_pos = np.arange(len(labels))\n    colors = ['#87050c','#b20710','#ba222a', '#ba222a','#c33e45','#c33e45','#cb595f','#d4757a','#dc9094','#e5acaf']\n    ax.barh(y_pos, values, align='center',color=colors,alpha=0.9)\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(labels,{'fontsize': 14,'fontweight': 4,'color': 'white','verticalalignment': 'baseline'})\n    ax.invert_yaxis()  # labels read top-to-bottom\n    labels_score=values\n    for loc in ['left','right','top','bottom']:\n        ax.spines[loc].set_visible(False)\n    # Text on the top of each bar\n    i=0\n    for p in ax.patches:\n           x = p.get_x() + p.get_width()\n           y = p.get_y() + p.get_height()\n           ax.text(x,y, '{}'.format(labels_score[i]),{'font': 'serif', 'weight': 'normal', 'color': 'white', 'fontsize': 14}, alpha = 0.8)\n           i=i+1 \n    plt.grid(b=None,which='both', axis='both')\n    ax.grid(b=None,axis='both',which='both')\n    ax.axes.get_xaxis().set_visible(False)\n    ax.set_title('Top 10  Rated  '+ 'from ' + str(fromyear) +' To '+  str(toyear) + \" by \" + group +\"Rating\" ,fontweight=\"bold\",  fontsize=20, color='white')\n    #ax.text(-58,10,'This visualization shows Top 10 countries .Vast content is released in US since Netflix was launched here',{'fontsize': 15,'fontweight': 9,'color': 'white','verticalalignment': 'baseline'})\n","9bb284d2":"find_plot_yearwise(2015,2021,'weighted_average_vote','')\n","c29a89e1":"find_plot_yearwise(2010,2015,'weighted_average_vote','')","af38da4e":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Netflix By Numbers<\/h2>\nNetflix content is released almost all our the world.Here I am trying to find  number of countries, number or directors, number of movies and TV shows that contribute to this dataset","dedc9eb4":"### What is Netflix ?\nNetflix is a streaming service that offers a wide variety of award-winning TV shows, movies, anime, documentaries, and more on thousands of internet-connected devices.You can watch as much as you want, whenever you want without a single commercial \u2013 all for one low monthly price. There's always something new to discover and new TV shows and movies are added every week!( Every body knows this , but i wanted some introduction\ud83d\ude0a)\n\n### What is IMDb ratings? \nIMDb registered users can cast a vote (from 1 to 10) on every released title in the database. Users can update their votes as often as they'd like, but any new vote on the same title will overwrite the previous one, so it is one vote per title per user.\nThey take all the individual ratings cast by IMDb registered users and use them to calculate a single rating. IMDb don't use the arithmetic mean (i.e. the sum of all votes divided by the number of votes), although they do display the mean and average votes on the votes breakdown page; instead the rating displayed on a title's page is a weighted average. \nThe IMDb weighted average does not change upon receipt of each new vote, but instead is updated numerous times per day.\n\nsource :https:\/\/help.imdb.com\/article\/imdb\/track-movies-tv\/ratings-faq\/G67Y87TFYYP6TWAV#","2821efad":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\"> Titles Directed by David Dhawan<\/h2>","63ba2208":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top Directors with most content countrywise<\/h2>","592b1b0e":"<br><h2 style=\"color:#E50914; font-weight:bold; font-family:TimesNewRoman\">How does IMDB calculate the weighted average?<\/h2>\n\nThe following formula is used to calculate the Top Rated 250 titles. This formula provides a true 'Bayesian estimate', \nwhich takes into account the number of votes each title has received, minimum votes required to be on the list, \nand the mean vote for all titles:\n\n\n\n$$weighted rating(wr)= \\frac{v}{v+m}R+\\frac{m}{v+m}C$$\n\nWhere:\n\nR = average for the movie (mean) = (rating)\n\nv = number of votes for the movie = (votes)\n\nm = minimum votes required to be listed in the Top Rated list (currently 25,000)\n\nC = the mean vote across the whole report\n\nsource :https:\/\/help.imdb.com\/article\/imdb\/track-movies-tv\/ratings-faq\/G67Y87TFYYP6TWAV#\n","340a29bf":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 Thriller Movies<\/h2>","75d20820":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 TV Shows with Most Season<\/h2>","adfc2a81":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">TV shows Recently added to Netflix<\/h2>","3b376483":"Wow! There is lot of differences between Males rating and Female ratings.`Pulp Fiction `which  has highest rating given by Males , its on 4 th rank in women's List.This clearly shows how both gender perceive things .","eb7027e6":"<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-116-114.1.nflxso.net\/art\/d13d0\/a505d080f512e82bc5d85b617d62e9e7b0fd13d0.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-1723-1722.1.nflxso.net\/dnm\/api\/v6\/XsrytRUxks8BtTRf9HNlZkW2tvY\/AAAABSN3BfbltbC0vc82rng0ydwXP4JVSE_fWNG1a7MKTYdL8HH3v6R-sfkVfIkSKB63MEopIGoEv17KjK2fhUbxqWtLrKVk8LKVu83aOs75Rga_q6UAz0g_.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-116-114.1.nflxso.net\/art\/0bd0f\/b0ed79ff7beaf1a9cd8a0cc8164c4e303b30bd0f.jpg\">\n<\/div>\n\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-116-114.1.nflxso.net\/art\/95e81\/91c7833e10ab0fad12ab324f8fdb8561fde95e81.jpg\">\n<\/div>","655430dc":" <p style = \"font-size : 25px ; color: #E50914\"><strong>Load Datasets..<\/strong><\/p>","51d1c3c6":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Introduction<\/h2>","d18cc10e":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\"> Titles Directed by Marcus Raboy<\/h2>","4bdf8e67":"**Observation:** \n- `~69.1%`  of the content on netflix are movies while the rest are TV Show.This may be because most of the Channels have there own streaming app.\n- `~46.6 %` of content released are for Adults and only `~23%` content is released for kids.\n- With increasing streaming channel and Disney's rising popularity , Netflix will have to bring in more kids contents to sustain and increase their customer base.\n","c4ee0e3f":"<br><h1 style=\"color:#E50914;font-family:TimesNewRoman;border-radius: 10px 10px\">Observations<\/h1>\n- Other than release columns all columns are of object datatypes.\n- 30 % of observations are missing in `Director`\n- 9 % in `Cast` column,\n- Since i will not be using  director and cast for my analysis dropping them would be ideal.\n- Need to further analyze `country` and way to fix it.\n- There are 10 missing values in `date_added` \n- `Rating` there are just a few cases, so lets try finding thir replacements on the internet\n- There are `7787` unique shows.\n- `Date_added`  column has to be changed from object to date\n- There are lot of missing values in Imbd dataset replacing null with zero to manage data ( not best method)\n","e10b24a4":"<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal;  text-align: center;\"> Netflix : So what are we watching today ? <\/h1>","889aa5fb":" <p style = \"font-size : 15px ; color: #E50914\"><strong>Preview the first 5 rows of train dataset<\/strong>","ce310823":"\n\nHere are my other notebooks....Do checkout if you find my work helpful, happy learning.\n\n1.[Predicting diabetes ](https:\/\/www.kaggle.com\/yogidsba\/diabetes-prediction-eda-model)\n\n2.[Predict if customer will buy Personsal Loan](https:\/\/www.kaggle.com\/yogidsba\/personal-loan-logistic-regression-decision-tree\/edit\/run\/65292079)\n\n3.[Insurance Claim Hypothesis Testing](http:\/\/www.kaggle.com\/yogidsba\/insurance-claims-eda-hypothesis-testing)\n\n4.[Basic EDA on Covid vaccination](http:\/\/www.kaggle.com\/yogidsba\/basic-eda-on-covid-vaccination)\n\n5.[Pandas Tutorial](http:\/\/www.kaggle.com\/yogidsba\/pandas-function-and-data-analysis)\n\n6.[Case study EDA on cardio good fitness](http:\/\/www.kaggle.com\/yogidsba\/casestudy-eda-for-cardio-good-fitness)\n\n7.[Predict Price of used cars using Linear Regression](https:\/\/www.kaggle.com\/yogidsba\/predict-used-car-prices-linearregression)\n\n8.[Rail Road Accident ](https:\/\/www.kaggle.com\/yogidsba\/rail-road-crossing-accident-in-progress)\n\n9.[Travel Package Prediction](https:\/\/www.kaggle.com\/yogidsba\/travelpackageprediction-ensemble-techniques)","6831fb08":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Type of Content and Audience<\/h2>","c19095c1":"### Lot can be done with these two datasets. But for now will leave it at this point and keep updating it as i can.I still have to study Content Based Recommendation System, once done i might get better insights and movie suggestions.\n","b88248b9":" It is difficult to understand the ratings associated with type of audiences as there are wide type so mapping rating in to 3 categories with help from Netflix site.  Not diving it in little kid and younger kid,as  I know both my kids in different age group watch same programmes together .And I assume same goes into many households, as we dont keep seperate TV for each kid.Teens contents are bit different so grouping as Kids,Teen,Adults. Ofcourse for more detailed analysis one can group them as Babies & Toddler, Little Kid, Tween,Teen,Adult.","f789e71f":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 Movies rated by Males<\/h2>","4658c69e":"### Conclusion:\n\nMy final list of movies I am going to checkout for now( few i have already watched) and may be revisit the dataset and get some more insights later :\n\n* Inception\n* City of God\n* American History X\n* American Beauty \n* Django Unchained \n* Gol Maal\n* Taxidriver\n* The Blue Elephant 2\n* Mystic River\n* Donnie Brasco\n* Gran Torino\n* Miracle in Cell No.7\n* The Help\n* Vanished\n\n\n\nThank you so much , Hope you enjoyed reading and have some movies to checkout.!","1add5a31":"<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:25.1%\" align=center src=\"https:\/\/m.media-amazon.com\/images\/M\/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:27.3%\" align=center src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/0\/08\/Oththa_Seruppu_Size_7.jpg\">\n<\/div>\n\n\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:24.6%\" align=center src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/3\/33\/Taxi_Driver_%281976_film_poster%29.jpg\">\n<\/div>\n","abd3aa70":"Three of my favorite shows are in this list. Without any surprise Grey's Anatomy has made to the list. It is a popular TV show and has 16 seasons. And guess what I have watched all the seasons. NCIS and Criminal Minds are my next favorite (yes!). Time to check out Supernatural.","a0e14abf":"* Marcus Raboy has 16 titles on Netflix USA.David Dhawan in India.Let explore what are they and check out some of them .\n","439a35a0":"Content released in this countries must  be based on demand - supply principle. Based on demand , specific genre  content must be released. I know how much Indians like to watch foriegn movies. Ofcourse how can i forget \"Dramas\" most bolloywood movies are in this genre .I guess same goes with Japan , France, and UK who watch International movies \/Shows","9b1f8098":"<h3 style = \"font-size : 25px ;font-weight:bold; color: #E50914\"> Some of Titles Directed by David Dhawan<\/h3>\nI had to do this, no movie analysis is compelete without  bolloywood movies","e05da41f":"<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-114-116.1.nflxso.net\/art\/d3cdf\/d070d2bfec72145e6f452414dbecd182a29d3cdf.jpg\">\n    <\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/occ-0-1722-1723.1.nflxso.net\/dnm\/api\/v6\/evlCitJPPCVCry0BZlEFb5-QjKc\/AAAABansYZZ3VSymcYUNOXeFmMvDLrNjqiMm34IvRzsYuzrS2g2K1dvLyeDX4P91lgv5vrNHMBz4r4m63BptmCnfN36tsQ5W.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23.7%\" align=center src=\"https:\/\/live.staticflickr.com\/3658\/3540295337_18d7540e98.jpg\">\n<\/div>\n\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23%\" align=center src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/0\/0a\/Maine_Pyaar_Kyun_Kiya.jpg\">\n<\/div>","365bd68a":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 Movies rated by Females<\/h2>","a6e4a8a2":" <p style = \"font-size : 25px ; color: #E50914\"><strong>Data Preprocessing<\/strong><\/p>","d0c5acce":" <p style = \"font-size : 15px ; color: #E50914\"><strong>Missing values & unique values<\/strong>","76d64e4f":"<br><h1 style=\"color:#E50914;font-family:TimesNewRoman\">Observations<\/h1>\n\n- 2549 content were produced from United States.\n- 2706 Matured content.\n- We have content released from 1942 to 2021\n- Our dataset contain contents that were  added to netflix since 2008. \n\n    ","fe6b77b1":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Countries with the most content<\/h2>","3989310e":"The Tamil Movie `Otha seruppu size 7` has higest rating  in movies from 2015 - 2021, followed by The Blue Elephant 2,and Article 15","2cac91c6":"Many mindblowing notebooks have been created on this dataset.I have been inspired by many such notebooks and contributing my share of analysis.\nNotebooks to check \n\n 1.https:\/\/www.kaggle.com\/thiagopanini\/insights-from-netflix-the-show-must-go-on by @thiagopanini\n \n 2.https:\/\/www.kaggle.com\/bhuvanchennoju\/netflix-is-awesome-why-see-here  by @bhuvanchennoju\n\n**Motivation :** \n* To understand and learn more about  Matplotlib.\nhttps:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips by @subinium\n\n* Almost every thing has been explored so doing some basic exploration and different exploration which were not covered( I maybe wrong , as i have not checked all notebeooks).\ud83d\ude00\n* Whenever I am free and want to watch something on netflix, atleast 30 mins of my time is wasted finding some good movie to watch, so hope i have some good collection of movies  after this analysis which i can look forward to.\n\nHiding cells in viewer visualization, to see insights better","c69ba847":"<p style = \"font-size : 30px ; color: #E50914\"><strong> Lets start with EDA<\/strong><\/p>","1fd36452":"\n\n<center><img  style=\"float:left; border:5px solid black; width:90%\"  src=\"https:\/\/www.shortlist.com\/media\/imager\/202104\/51892-posts.article_lg.jpg\"><\/center>\n\n\nsource=\"https:\/\/www.shortlist.com\/media\/imager\/202104\/51892-posts.article_lg.jpg\"","d1fe36f8":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 5 Genre  with most content country wise<\/h2>","d1ced68d":"<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:27.3%\" align=center src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/0\/08\/Oththa_Seruppu_Size_7.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:26.6%\" align=center src=\"https:\/\/occ-0-1722-1723.1.nflxso.net\/dnm\/api\/v6\/evlCitJPPCVCry0BZlEFb5-QjKc\/AAAABXmVaJkbDwA3aTHEkCh8hHFFgzZnX9Cx4zA1r9KyadqIaNkhuF7iKAEdu_Pi1GMyH8ujLlRMS4-6iQ9n2EbkNrwrgue_.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:25.7%\" align=center src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/1\/11\/Article_15_Poster.jpg\">\n<\/div>","ae454777":" <h3 style = \"font-size : 15px ; color: #E50914\"><strong>Libraries<\/strong><\/h3>","8926989b":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Table of Contents<\/h2>\n    \n- [Dataset](#Dataset)\n- [History & Evolution of Netflix](#History-and-Evolution-of-Netflix)\n- [Netflix By Numbers](#Netflix-By-Numbers)\n- [Type of content and Audience](#Type-of-content-and-Audience)\n- [Countries with the most content](#Countries-with-the-most-content)\n- [Top Directors with most content countrywise](#Top-Directors-with-most-content-countrywise)\n- [Top 5 Genre  with most content country wise](#Top-5-Genre-with-most-content-country-wise)\n- [TV Shows added to Netflix recently](#TV-shows-Recently-added-to-Netflix)\n- [Movies added to Netflix recently](#Movies-Recently-added-to-Netflix)\n- [Top 10 TV Shows with Most Season](#Top-10-TV-Shows-with-Most-Season)\n- [Top 10 Movies Rated by Males](#Top-10-Movies-rated-by-Males)\n- [Top 10 Movies Rated by FeMales](#Top-10-Movies-rated-by-Females)\n- [Top 10 Thriller Movies](#Top-10-Thriller-Movies)\n- [Top 10 Movies from year 2015 to 2021](#Top-10-Movies-from-year-2015-to-2021)\n- [Top 10 Movies from year 2010 to 2015](#Top-10-Movies-from-year-2010-to-2015)\n","8fe7d267":" <h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Dataset<\/h2>\n<br>\nnetflix_titles.csv: The csv file contains information about the various movies and the data related to them\n(since the dataset may change i will be creating a subset data till  27 june 2021)\n\n* Show ID - unique ID of that particular show\n* Type - type of the video - movie, TV Series etc.\n* Title - title of the video\n* Director - director name\n* Cast - cast members \n* Country - country where content was produced.\n* Data Added - date when it became live on NETFLIX\n* Release Year - year of release\n* Rating - user rating\n* Duration - duration of the movie, TV Series etc.\n* Listed in - Genre information\n* Description - concise plot of the series\n\n\nThere is lot of data in  IMDB movies.csv, IMDB rating.csv the tables this are final columns i will use.\n\n* title: official movie title\n* year: release year of the movie\n* weighted_average_vote - weighted mean rating by taking into account the total number of votes\n* allgenders_0age_avg_vote - mean rating for all users under 18\n* allgenders_0age_votes - number of votes by all users under 18\n* allgenders_18age_avg_vote - mean rating for all users aged 18-30\n* allgenders_18age_votes - number of votes by all users aged 18-30\n* allgenders_30age_avg_vote - mean rating for all users aged 30-45\n* allgenders_30age_votes - number of votes by all users aged 30-45\n* allgenders_45age_avg_vote - mean rating for all users over 45\n* allgenders_45age_votes - number of votes by all users over 45\n* males_allages_avg_vote - mean rating for all males\n* males_allages_votes - number of votes by all males\n* males_0age_avg_vote - mean rating for males under 18\n* males_0age_votes - number of votes by males under 18\n* males_18age_avg_vote -  mean rating for males aged 18-30\n* males_18age_votes - number of votes by males aged 18-30\n* males_30age_avg_vote - mean rating for males aged 30-45\n* males_30age_votes - number of votes by males aged 30-45\n* males_45age_avg_vote - mean rating for males over 45\n* males_45age_votes - number of votes by males over 45\n* females_allages_avg_vote- mean rating for all females\n* females_allages_votes - number of votes by all females\n* females_0age_avg_vote - mean rating for females under 18\n* females_0age_votes - number of votes by females under 18\n* females_18age_avg_vote - mean rating for females aged 18-30\n* females_18age_votes - number of votes by females aged 18-30\n* females_30age_avg_vote - mean rating for females aged 30-45\n* females_30age_votes - number of votes by females aged 30-45\n* females_45age_avg_vote - mean rating for females over 45\n* females_45age_votes - number of votes by females over 45\n\n\n\n","011082c2":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">History and Evolution of Netflix<\/h2>\nNetflix, Inc. is an American content platform and production company headquartered in Los Gatos, California.\nNetflix was founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California.Netflix's initial business model included DVD sales and rental by mail, but Hastings abandoned the sales about a year after the company's founding to focus on the initial DVD rental business.Netflix expanded its business in 2007 with the introduction of streaming media while retaining the DVD and Blu-ray rental business.The company expanded internationally in 2010 with streaming available in Canada,[15] followed by Latin America and the Caribbean. This is an abridged history of the formation and growth of Netflix, which grown to become the largest entertainment company in the United States in terms of market capitalization as of 2021.Let look at Timeline of Netflix from DVD rentals to becoming most popular streaming services.\n\nnote:The timeline is made in matplolib , and its not an image","df5e8a5f":"Wow! , what a timeline.The rise of Netflix has affected the way that we watch television content. No adds, No waiting till next week to know what happens next in our favorite series. Netflix has allowed content creators to deviate from traditional formats that force 30-minute or 60-minute time slots once a week. It has promoted lot of new talent and fresh contents with it producing  Original series.","96c36c98":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 Movies from year 2010 to 2015<\/h2>","fc1c2e6d":"**Observation:**\n* The vast majority of content on Netflix is from the United States (quite obvious).\n* Even though Netflix launched quite late in India ,it\u2019s already in the second position right after the US,followed by UK.\n* With Amazon and Disney's increasing popularity this might change in coming years.","39838986":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Movies Recently added to Netflix<\/h2>","50e55a21":"<h2 style = \"font-size : 25px ;font-weight:bold; color: #E50914\">Top 10 Movies from year 2015 to 2021<\/h2>","1afce5e0":"<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; \n                width:23%\" align=center \n         src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/7\/7e\/Grey%27s_Anatomy_S14_DVD_Cover_Art.jpg\/220px-Grey%27s_Anatomy_S14_DVD_Cover_Art.jpg\">\n    <\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:22.7%\" align=center src=\"https:\/\/m.media-amazon.com\/images\/M\/MV5BYjVlMjZhYzYtOGQxNC00OTQxLTk2NzEtMWFmMmNhODA4YjYzXkEyXkFqcGdeQXVyNjQ3MDgwNjY@._V1_.jpg\">\n<\/div>\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:17.9%\" align=center src=\"https:\/\/m.media-amazon.com\/images\/M\/MV5BNzRmZWJhNjUtY2ZkYy00N2MyLWJmNTktOTAwY2VkODVmOGY3XkEyXkFqcGdeQXVyMTkxNjUyNQ@@._V1_UY1200_CR85,0,630,1200_AL_.jpg\">\n<\/div>\n\n<div class=\"column\">\n    <img style=\"float:left; border:5px solid black; width:23.9%\" align=center src=\"https:\/\/www.onnetflix.ca\/media\/4\/comedians-of-the-world_81008236.jpg\">\n<\/div>\n\n\n","9bbef63c":"<h3 style = \"font-size : 25px ;font-weight:bold; color: #E50914\"> Some of Titles Directed by Marcus Raboy<\/h3>","ffe6d682":" <p style = \"font-size : 25px ; color: #E50914\"><strong>","52d0fd52":"`Inception` is highest rated movie. Surprisingly the second highest rated is a India-Tamil Movie.`Otha seruppu size 7`. Different Time period may have different movie with different ratings, lets  explore movies during different time periods."}}