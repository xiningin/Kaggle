{"cell_type":{"ed3728c7":"code","7e373633":"code","816213b8":"code","5bf6838f":"code","8acb5850":"code","9efe7753":"code","65688613":"code","4e465be2":"code","52d395b1":"code","ca51405e":"code","398f6b5f":"code","7d437c59":"markdown","bd99dd4d":"markdown","3501ff8b":"markdown","74dc25c9":"markdown","27cc2967":"markdown","c3fd6044":"markdown","6ee9e7b6":"markdown","0b9b0569":"markdown","b8adec7f":"markdown","a323171a":"markdown","dc802e69":"markdown"},"source":{"ed3728c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e373633":"all_df = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/train.csv')\nall_df.head()","816213b8":"asset_details = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_details.head()","5bf6838f":"all_df = all_df.join(asset_details.set_index('Asset_ID'), on='Asset_ID')\nall_df.head()","8acb5850":"len(all_df['Asset_ID'].unique()) == len(all_df['Asset_Name'].unique())","9efe7753":"asset_details","65688613":"bitcoin_cash_df = all_df.loc[all_df['Asset_ID']==2,:].reset_index(drop=True)\nbinance_coin_df = all_df.loc[all_df['Asset_ID']==0,:].reset_index(drop=True)\nbitcoin_df = all_df.loc[all_df['Asset_ID']==1,:].reset_index(drop=True)\neos_df = all_df.loc[all_df['Asset_ID']==5,:].reset_index(drop=True)\nethereum_classic_df = all_df.loc[all_df['Asset_ID']==7,:].reset_index(drop=True)\nethereum_df = all_df.loc[all_df['Asset_ID']==6,:].reset_index(drop=True)\nlitecoin_df = all_df.loc[all_df['Asset_ID']==9,:].reset_index(drop=True)\nmonero_df = all_df.loc[all_df['Asset_ID']==11,:].reset_index(drop=True)\ntron_df = all_df.loc[all_df['Asset_ID']==13,:].reset_index(drop=True)\nstellar_df = all_df.loc[all_df['Asset_ID']==12,:].reset_index(drop=True)\ncardano_df = all_df.loc[all_df['Asset_ID']==3,:].reset_index(drop=True)\niota_df = all_df.loc[all_df['Asset_ID']==8,:].reset_index(drop=True)\nmaker_df = all_df.loc[all_df['Asset_ID']==10,:].reset_index(drop=True)\ndogecoin_df = all_df.loc[all_df['Asset_ID']==4,:].reset_index(drop=True)","4e465be2":"len(bitcoin_cash_df) + len(binance_coin_df) + len(bitcoin_df) + len(eos_df) + len(ethereum_classic_df) + len(ethereum_df) + len(litecoin_df) + \\\nlen(monero_df) + len(tron_df) + len(stellar_df) + len(cardano_df) + len(iota_df) + len(maker_df) + len(dogecoin_df)","52d395b1":"len(all_df)","ca51405e":"!pwd","398f6b5f":"bitcoin_cash_df.to_csv(\".\/bitcoin_cash.csv\", index=False)\nbinance_coin_df.to_csv(\".\/binance_coin.csv\", index=False)\nbitcoin_df.to_csv(\".\/bitcoin.csv\", index=False)\neos_df.to_csv(\".\/eos.csv\", index=False)\nethereum_classic_df.to_csv(\".\/ethereum_classic.csv\", index=False)\nethereum_df.to_csv(\".\/ethereum.csv\", index=False)\nlitecoin_df.to_csv(\".\/litecoin.csv\", index=False)\nmonero_df.to_csv(\".\/monero.csv\", index=False)\ntron_df.to_csv(\".\/tron.csv\", index=False)\nstellar_df.to_csv(\".\/stellar.csv\", index=False)\ncardano_df.to_csv(\".\/cardano.csv\", index=False)\niota_df.to_csv(\".\/iota.csv\", index=False)\nmaker_df.to_csv(\".\/maker.csv\", index=False)\ndogecoin_df.to_csv(\".\/dogecoin.csv\", index=False)","7d437c59":"## 5. Save datasets","bd99dd4d":"## 4. Check the partitioned dataset","3501ff8b":"Check the length of the entire dataset and the partitioned dataset to make sure no assets are missing in the process","74dc25c9":"Check if the length of the dataset is the same before and after merging","27cc2967":"check the path to save data files","c3fd6044":"## 2. Merge datasets","6ee9e7b6":"Save data to that path","0b9b0569":"Split the data according to asset_id, Remove and re-create existing indexes so that indexes are organized in order along with data partitioning. In fact, we will save the data file without index, but for those who will continue to analyze in this kernel, the process is duplicated.","b8adec7f":"## 3. Split dataset(Partitioning)","a323171a":"## 1. Load datasets","dc802e69":"This kernel is designed to create partitioned datasets. You can modify it according to your needs and use it for various purposes. (Please check the data set rules of the competition)"}}