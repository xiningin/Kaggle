{"cell_type":{"f61e38b7":"code","d153490d":"code","650d7415":"code","ccc075d1":"code","a80566c7":"code","e5a03cda":"code","7e81d9f6":"code","6ab46339":"code","7ff61c17":"code","ccf1ffed":"code","a426c231":"code","1f40d974":"code","d3293474":"code","46ff34bb":"code","155efeab":"code","6a3d1353":"code","6b28e50c":"code","fc6557e5":"code","c1888947":"code","064f44f3":"code","106bc9e3":"code","8b09fecf":"code","67b25d84":"code","837154ca":"code","c3c53831":"markdown","a594d9f8":"markdown","d0844289":"markdown","8ed40170":"markdown","5116d8d3":"markdown","e98f783c":"markdown","5f6802c5":"markdown","cf2c183c":"markdown","7d5dca28":"markdown"},"source":{"f61e38b7":"!pip install seaborn==0.11","d153490d":"import numpy as np\nimport pandas as pd\nfrom sklearn.utils import shuffle\nfrom IPython.core.display import display, HTML, Javascript\nfrom string import Template\nimport json, random\nimport IPython.display\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport plotly as py\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec\n\nfrom matplotlib.offsetbox import AnchoredText\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(action='ignore')\nplt.rcParams['figure.dpi'] = 200","650d7415":"data = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nquestions = data.iloc[0,:].T\ndata = data.iloc[1:, :]","ccc075d1":"# Defining all our palette colours\n\nprimary_blue = '#496595'\nprimary_blue2 = '#85a1c1'\nprimary_blue3 = '3d4d63'\nprimary_grey = '#c6ccd8'\nprimary_black = '#202022'\nprimary_bgcolor = '#f4f0ea'\n\n# 'coffee palette turqoise-gold'\nf1 = '#a2885e'\nf2 = 'e9cf87'","a80566c7":"fig, ax = plt.subplots(1,1, figsize=(15, 6))\ndata_q1 = data['Q1'].value_counts().sort_index()\nax.bar(data_q1.index, data_q1, width = 0.55, edgecolor = 'darkgray', color = '#d4dddd', linewidth=0.7)\nfor i in data_q1.index:\n    ax.annotate(f\"{data_q1[i]}\",\n               xy = (i, data_q1[i] + 100),\n                va = 'center', ha='center', fontweight='light', fontfamily='serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_ylim(0, 4200)\nax.set_xticklabels(data_q1.index, fontfamily='serif')\nax.set_yticklabels(np.arange(0, 4001, 500), fontfamily='serif')\nfig.text(0.1, 0.95, 'Age Distribution', fontsize = 15, fontweight='bold', fontfamily='serif')\nax.grid(axis='y', linestyle='-', alpha=0.4)\nplt.show()","e5a03cda":"data['Q2'] = data['Q2'].apply(lambda x : 'ETC' if x not in ['Man', 'Woman'] else x)\ndata_q1q2 = data[data['Q2'] != 'ETC'].groupby(['Q2'])['Q1'].value_counts().unstack().sort_index()\nman = data_q1q2.loc['Man']\nwoman = -data_q1q2.loc['Woman']\n\nfig, ax = plt.subplots(1,1, figsize=(15,6))\nax.bar(man.index, man, width=0.55, color='#004c70', alpha=0.8, label = 'Male')\nax.bar(woman.index, woman, width=0.55, color = '#990000', alpha=0.8, label='Female')\nax.set_ylim(-1200, 3500)\n\nfor i in man.index:\n    ax.annotate(f\"{man[i]}\",\n               xy=(i, man[i] + 100),\n                va = 'center', ha = 'center', fontweight = 'light', fontfamily = 'serif', color = '#4a4a4a'\n               )\n    \nfor i in woman.index:\n    ax.annotate(f\"{-woman[i]}\",\n               xy=(i, woman[i]-100),\n                va= 'center', ha = 'center', fontweight='light', fontfamily='serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(data_q1q2.columns, fontfamily='serif')\nax.set_yticks([])\nax.legend()\nfig.text(0.16, 0.95, 'Age \/ Gender Distribution', fontsize=15, fontweight='bold', fontfamily='serif')\nplt.show()","7e81d9f6":"q3_order = data['Q3'].value_counts()[:11].drop('Other').index\ndata_q2q3 = data[['Q2', 'Q3']].groupby('Q3')['Q2'].value_counts().unstack().loc[q3_order]\ndata_q2q3['sum'] = data_q2q3.sum(axis = 1)\ndata_q2q3_ratio = (data_q2q3.T \/ data_q2q3['sum']).T[['Man', 'Woman', 'ETC']].rename(index={'United States of America': 'USA', 'The United Kingdom of Great Britain and Northern Ireland': 'UK'})[::-1]","6ab46339":"fig, ax = plt.subplots(1,1,figsize=(12, 6),)\n\nax.barh(data_q2q3_ratio.index, data_q2q3_ratio['Man'],\n       color='#004c70', alpha=0.7, label = 'Man'\n       )\nax.barh(data_q2q3_ratio.index, data_q2q3_ratio['Woman'], left=data_q2q3_ratio['Man'], color='#990000', alpha=0.7, label='Woman'\n       \n       )\nax.barh(data_q2q3_ratio.index, data_q2q3_ratio['ETC'], left=data_q2q3_ratio['Man'] + data_q2q3_ratio['Woman'],\n       color='#4a4a4a', alpha = 0.7, label = 'ETC'\n       )\n\nax.set_xlim(0,1)\nax.set_xticks([])\nax.set_yticklabels(data_q2q3_ratio.index, fontfamily='serif', fontsize=11)\n\n# male percentahe\nfor i in data_q2q3_ratio.index:\n    ax.annotate(f\"{data_q2q3_ratio['Man'][i]*100:.3}%\",\n               xy = (data_q2q3_ratio['Man'][i]\/2, i),\n                va = 'center', ha='center', fontsize=9, fontweight='light', fontfamily='serif',\n                color='white'\n               )\n    \nfor i in data_q2q3_ratio.index:\n    ax.annotate(f\"{data_q2q3_ratio['Woman'][i]*100:.3}%\",\n               xy = (data_q2q3_ratio['Man'][i]+data_q2q3_ratio['Woman'][i]\/2, i),\n               va = 'center', ha='center', fontsize = 9, fontweight='light', fontfamily='serif', color = 'white')\n    \nfig.text(0.13, 0.95, 'Top10 Country : Gender Distribution', fontsize=15, fontweight='bold', fontfamily = 'serif')\nfig.text(0.131, 0.91, 'Percent Stacked Bar Chart', fontsize=12, fontfamily='serif')\n\nfor s in ['top', 'left', 'right','bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\nplt.show()\n","7ff61c17":"q4_order = [\n    'No formal education past high school',\n    'Professional degree',\n    'Some college\/university study without earning a bachelor\u2019s degree',\n    'Bachelor\u2019s degree',\n    'Master\u2019s degree',\n    'Doctoral degree',\n    'I prefer not to answer'\n    ]\n\ndata_q4 = data['Q4'].value_counts()[q4_order]\n\nfig, ax = plt.subplots(1,1, figsize=(12,6))\nax.bar(data_q4.index,data_q4, width=0.55,\n      edgecolor='darkgray',color=sns.color_palette(\"crest\", 7),\n       linewidth=0.7\n      )\n\nfor i in data_q4.index:\n    ax.annotate(f\"{data_q4[i]}\",\n               xy = (i, data_q4[i] + 300),\n                va = 'center', ha = 'center', fontweight='light', fontfamily='serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(data_q4.index, fontfamily ='serif', rotation=90)\nfig.text(0.09, 0.95, 'Education Distribution', fontsize= 15, fontweight='bold', fontfamily = 'serif')\nax.grid(axis='y', linestyle='-', alpha=0.4)\nplt.show()","ccf1ffed":"q6_order = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years',]\n\ndata_q6 = data['Q6'].value_counts()[q6_order]\n\nfig, ax = plt.subplots(1,1, figsize=(12, 6))\nax.bar(data_q6.index, data_q6, width=0.55,\n      edgecolor = 'darkgray', color=sns.color_palette(\"crest\", 7), linewidth=0.6)\n\nfor i in data_q6.index:\n    ax.annotate(f\"{data_q6[i]}\",\n               xy = (i, data_q6[i] + 100),\n                va = 'center', ha = 'center', fontweight = 'light', fontfamily = 'serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(data_q6.index, fontfamily = 'serif', rotation = 90)\n\nfig.text(0.09, 0.95, 'Experience Distribution', fontsize= 15, fontweight='bold', fontfamily = 'serif')\nax.grid(axis='y', linestyle='-', alpha=0.4)\nplt.show()","a426c231":"data['count'] = 1\nfig, ax = plt.subplots(1,1, figsize=(12,12))\nsns.heatmap(pd.pivot_table(data, values='count', index=['Q6'], columns=['Q4'], aggfunc=np.sum).loc[q6_order, q4_order],\n           cmap = \"YlGnBu\",\n            square = True,\n            linewidth=2.5,\n            cbar = False,\n            ax=ax,\n            annot=True,\n            fmt=\"d\"\n           )\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.48, 1, 'Pivot Table : Education & Experience', fontweight='bold', fontfamily = 'serif', fontsize=15)\n\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\n\nax.set_xticklabels(ax.get_xticklabels(), fontfamily = 'serif', rotation= 90, fontsize= 11\n                   )\n\nplt.tight_layout()\nplt.show()","1f40d974":"data_q14 = data[[i for i in data.columns if 'Q14' in i]]\ndata_q14_count = pd.Series(dtype='int')\nfor i in data_q14.columns:\n    data_q14_count[data_q14[i].value_counts().index[0]] = data_q14[i].count()\n    \n# Q14\n\ncolors = ['lightgray'] * 15\ncolors[0] = colors[1] = colors[3] = '#02080F'\ncolors[2]= colors[4] = colors[6] = colors[7] = '#522e75'\ncolors[8] = colors[9] = '#714e3d'\n\nfig, ax = plt.subplots(1,1, figsize=(15, 6))\nax.bar(data_q14_count.index, data_q14_count, width = 0.55, \n      edgecolor='darkgray', color=colors,\n       linewidth=0.7\n      )\n\nfor i in data_q14_count.index:\n    ax.annotate(f\"{data_q14_count[i]}\",\n               xy = (i, data_q14_count[i] + 500),\n                va = 'center', ha = 'center', fontweight='light', fontfamily='serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(data_q14_count.index, fontfamily='serif', rotation = 40)\nfig.text(0.13, 0.95, 'Visualization Library', fontsize=15, fontweight='bold', fontfamily='serif')\nax.grid(axis='y', linestyle='-', alpha=0.4)\n\nstatic = mpatches.Patch(color='#02080F', label = 'static')\ninteractive = mpatches.Patch(color='#522e75', label = 'interactive')\ngeo = mpatches.Patch(color='#714e3d', label = 'geospatial')\n\nplt.legend(handles = [static, interactive, geo], fontsize=25)\nplt.show()","d3293474":"q5_order = ['Business Analyst', \n           'Data Analyst',\n            'Data Engineer',\n            'Data Scientist',\n            'DBA\/Database Engineer',\n            'Machine Learning Engineer',\n            'Product\/Project Manager',\n            'Research Scientist',\n            'Software Engineer',\n            'Statistician',\n            'Student',\n            'Currently not employed',\n            'Other',\n           ]\n\nq15_order = [\n    'I do not use machine learning methods',\n    'Under 1 year',\n    '1-2 years',\n    '2-3 years',\n    '3-4 years',\n    '4-5 years',\n    '5-10 years',\n    '10-20 years',\n    '20 or more years',\n    \n]\n\ndata_q5q15 = pd.pivot_table(data, values='count', index = ['Q5'], columns = ['Q15'], aggfunc=np.sum).fillna(0).astype(int).loc[q5_order, q15_order].stack()\n\ndata_q5q15_man = pd.pivot_table(data[data['Q2'] == 'Man'], values = 'count', index = ['Q5'], columns = ['Q15'], aggfunc=np.sum).fillna(0).astype(int).loc[q5_order, q15_order].stack()\n\ndata_q5q15_woman = pd.pivot_table(data[data['Q2'] == 'Woman'], values= 'count', index = ['Q5'], columns = ['Q15'], aggfunc=np.sum).fillna(0).astype(int).loc[q5_order, q15_order].stack()","46ff34bb":"def drawPieMarker(xs, ys, ratios, sizes, colors, ax):\n    markers = []\n    previous = 0\n    for color, ratio in zip(colors, ratios):\n        this = 2 * np.pi * ratio + previous\n        x = [0] + np.cos(np.linspace(previous, this, 30)).tolist() + [0]\n        y = [0] + np.sin(np.linspace(previous, this, 30)).tolist() + [0]\n        xy = np.column_stack([x, y])\n        previous = this\n        markers.append({'marker': xy, 's': np.abs(xy).max()**2*np.array(sizes), 'facecolor': color})\n        \n        # Scatter each of the pie charts to create pies\n        for marker in markers:\n            ax.scatter(xs, ys, **marker, alpha = 0.7)\n            \n","155efeab":"fig = plt.figure(figsize=(20, 23), dpi=200)\n\ngs = fig.add_gridspec(5, 5)\n\n\n\nax_plot = fig.add_subplot(gs[1:4, 0:4]) \nfor q5_idx in q5_order[::-1]:\n    for q15_idx in q15_order:\n        man = data_q5q15_man[q5_idx][q15_idx]\n        woman = data_q5q15_woman[q5_idx][q15_idx]\n        tot = data_q5q15[q5_idx][q15_idx]\n        drawPieMarker([q15_idx],[q5_idx], [man\/(man+woman), woman\/(man+woman)] ,[tot*2.5], ['#004c70', '#990000'], ax=ax_plot)\n\nax_plot.grid(linewidth=0.2, zorder=0)        \n\nax_plot.set_yticklabels(q5_idx, fontfamily='serif', fontsize=15)\nax_plot.set_xticklabels(q15_idx, fontfamily='serif', fontsize=15, rotation=90)\n\n# Pos\nax_pos = fig.add_subplot(gs[0, :4], sharex=ax_plot) \ndata_q15_woman = data[data['Q2']=='Woman']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_woman.index, data_q15_woman, width=0.45, alpha=0.7, color='#990000')\n\ndata_q15_man = data[data['Q2']=='Man']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_man.index, data_q15_man, bottom=data_q15_woman , width=0.45, alpha=0.7, color='#004c70')\n\nplt.setp(ax_pos.get_xticklabels(), visible=False)\n\n\n# Exp\nax_exp = fig.add_subplot(gs[1:4, 4], sharey=ax_plot) \n\ndata_q5_woman = data[data['Q2']=='Woman']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_woman.index[::-1], data_q5_woman[::-1], height=0.55, alpha=0.7, color='#990000')\n\ndata_q5_man = data[data['Q2']=='Man']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_man.index[::-1], data_q5_man[::-1], left= data_q5_man[::-1],height=0.55, alpha=0.7, color='#004c70')\n\nplt.setp(ax_exp.get_yticklabels(), visible=False)\n    \n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\n\n\nfig.text(0.8, 0.9, 'Gender & Position & ML Experience', fontweight='bold', fontfamily='serif', fontsize=35, ha='right') \nfig.text(0.8, 0.88, 'Stacked Bar Chart + Categorical Bubble Pie Chart', fontweight='light', fontfamily='serif', fontsize=20, ha='right')\n# plt.tight_layout()\nplt.show()","6a3d1353":"fig = plt.figure(figsize=(20, 23), dpi = 200)\ngs = fig.add_gridspec(5, 5)\n\nax_plot = fig.add_subplot(gs[1:4, 0:4])\nfor q5_idx in q5_order[::-1]:\n    for q15_idx in q15_order:\n        man = data_q5q15_man[q5_idx][q15_idx]\n        ax_plot.scatter(q15_idx, q5_idx, s=man*3, color = '#004c70')\n        \nax_plot.grid(linewidth=0.2, zorder=0)\n\nax_plot.set_yticklabels(q5_idx, fontfamily='serif', fontsize=15)\nax_plot.set_xticklabels(q15_idx, fontfamily='serif', fontsize=15, rotation = 90)\n\n# POS\nax_pos = fig.add_subplot(gs[0, :4], sharex=ax_plot)\ndata_q15_man = data[data['Q2'] == 'Man']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_man.index, data_q15_man, width=0.45, alpha=0.7, color='#004c70')\n\nplt.setp(ax_pos.get_xticklabels(), visible=False)\n\n# Exp\nax_exp = fig.add_subplot(gs[1:4, 4], sharey = ax_plot)\ndata_q5_man = data[data['Q2'] == 'Man']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_man.index[::-1], data_q5_man[::-1], height = 0.55, alpha=0.7, color='#004c70')\n\nplt.setp(ax_exp.get_yticklabels(), visible=False)\n\n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\n    \nfig.text(0.8, 0.9, '[Man] Position and ML experience', fontweight = 'bold', fontfamily = 'serif', fontsize=35, ha='right')\nfig.text(0.8,0.88, 'Stacked Bar Chart + Categorical Bubble Pie Chart', fontweight='light', fontfamily = 'serif', fontsize = 36, ha='right')\nplt.show()","6b28e50c":"fig = plt.figure(figsize=(20,24), dpi=200)\n\ngs = fig.add_gridspec(5,5)\n\nax_plot = fig.add_subplot(gs[1:4, 0:4])\nfor q5_idx in q5_order[::-1]:\n    for q15_idx in q15_order:\n        woman = data_q5q15_woman[q5_idx][q15_idx]\n        ax_plot.scatter(q15_idx, q5_idx, s=woman*3, color = '#990000')\n        \nax_plot.grid(linewidth=0.2, zorder=0)\n\nax_plot.set_yticklabels(q5_idx, fontfamily='serif', fontsize=15)\nax_plot.set_xticklabels(q15_idx, fontfamily='serif', fontsize=15, rotation = 90)\n\n#Pos\nax_pos = fig.add_subplot(gs[0, :4], sharex = ax_plot)\ndata_q15_woman = data[data['Q2']=='Woman']['Q15'].value_counts()[q15_order]\nax_pos.bar(data_q15_woman.index, data_q15_woman, width=0.45, alpha=0.7, color='#990000')\nplt.setp(ax_pos.get_xticklabels(), visible=False)\n\n#Exp\nax_exp = fig.add_subplot(gs[1:4, 4], sharey = ax_plot)\n\ndata_q5_woman = data[data['Q2']== 'Woman']['Q5'].value_counts()[q5_order]\nax_exp.barh(data_q5_woman.index[::-1], data_q5_woman[::-1], height=0.55, alpha=0.7, color='#990000')\n\nplt.setp(ax_exp.get_yticklabels(), visible=False)\n\n# Spines\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax_plot.spines[s].set_visible(False)\n    ax_pos.spines[s].set_visible(False)\n    ax_exp.spines[s].set_visible(False)\n    \nfig.text(0.8, 0.9, '[Woman] Position & ML Experience', fontweight= 'bold', fontfamily = 'serif', fontsize= 36, ha='right')\nfig.text(0.8, 0.88, 'Stacked Bar Chart + Categorical Bubble Pie Chart', fontweight = 'light', fontfamily = 'serif', fontsize= 20, ha='right')\n\nplt.show()","fc6557e5":"q24_order = ['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999',\n'10,000-14,999','15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999',\n'100,000-124,999', '125,000-149,999',  '150,000-199,999', '200,000-249,999',  '250,000-299,999', '300,000-500,000', '> $500,000']\n\ndata_q24 = data['Q24'].value_counts()[q24_order]","c1888947":"fig, ax = plt.subplots(1,1, figsize=(20,6), dpi = 200)\nax.bar(data_q24.index, data_q24, width=0.55, edgecolor='black', color=sns.light_palette(\"seagreen\", len(data_q24)), linewidth=0.6)\n\nax.plot(data_q24.index, data_q24, c='k', linewidth=0.6)\n\nfor i in data_q24.index:\n    ax.annotate(f\"{data_q24[i]\/data_q24.sum()*100:.2f}%\", xy = (i, data_q24[i] +100),\n               va = 'center', ha='center', fontweight='light', fontfamily = 'serif', color='#2a2a2a')\n    \nfor s in ['top', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(data_q24.index, fontfamily='serif', rotation = 90)\n\nfig.text(0.13, 0.97, 'Earn Distribution', fontsize=15, fontweight='bold', fontfamily='serif')\nax.grid(axis='y', linestyle='-', alpha=0.4)\nplt.show()","064f44f3":"# Q2 Analysis\n\nman = data[data['Q2'] == 'Man']['Q24'].value_counts()[q24_order]\nwoman = -data[data['Q2']=='Woman']['Q24'].value_counts()[q24_order]\n\nfig, ax = plt.subplots(1,1, figsize=(15,6))\nax.bar(man.index, man, width = 0.7, color = '#004c70', alpha = 0.8, label = 'Male')\nax.bar(woman.index, woman, width=0.7, color = '#990000', alpha = 0.8, label = 'Female')\nax.set_ylim(-700, 2000)\n\nfor i in man.index:\n    ax.annotate(f\"{man[i]}\",\n               xy = (i, man[i] + 100),\n                va = 'center', ha = 'center', fontweight = 'light', fontfamily = 'serif', color = '#4a4a4a'\n               )\n    \nfor i in woman.index:\n    ax.annotate(f\"{-woman[i]}\", xy = (i, woman[i]-100),\n               va = 'center', ha = 'center', fontweight='light', fontfamily = 'serif', color = '#4a4a4a'\n               )\n    \nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(q24_order, fontfamily='serif', rotation = 90)\nax.set_yticks([])\nax.legend()\nfig.text(0.16, 0.95, 'Earn & Gender Distribution', fontsize=15, fontweight='bold', fontfamily = 'serif')\nplt.show()","106bc9e3":"data_q5q24 = pd.pivot_table(data, values = 'count', index=['Q5'], columns = ['Q24'], aggfunc = np.sum).fillna(0).astype(int).loc[:,q24_order]\n\ndata_q5q24 = (data_q5q24.T \/ data_q5q24.sum(axis=1)).cumsum()","8b09fecf":"data_q5q24 = pd.pivot_table(data, values = 'count', index = ['Q5'], columns = ['Q24'], aggfunc=np.sum).fillna(0).astype(int).loc[:, q24_order]\ndata_q5q24 = (data_q5q24.T \/ data_q5q24.sum(axis = 1))\n\ncolors = sns.light_palette(\"seagreen\", len(data_q24))\nfig, ax = plt.subplots(6, 2, figsize=(15,22), sharex = True)\nfor idx, q5_idx in enumerate(data_q5q24.columns):\n    ax[idx%6][idx\/\/6].bar(data_q5q24[q5_idx].index, data_q5q24[q5_idx], color=colors, edgecolor='black', linewidth=0.4, width = 0.6)\n    ax[idx%6][idx\/\/6].set_yticks([])\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax[idx%6][idx\/\/6].spines[s].set_linewidth(0.5)\n        \n    divider = make_axes_locatable(ax[idx%6][idx\/\/6])\n    cax = divider.append_axes(\"top\", size=\"11%\", pad = 0)\n    cax.get_xaxis().set_visible(False)\n    cax.get_yaxis().set_visible(False)\n    cax.set_facecolor('black')\n    \n    at = AnchoredText(q5_idx, loc = 10, prop=dict(backgroundcolor='black',\n                                                 size = 12, color='white', weight = 'bold'))\n    \n    cax.add_artist(at)\n\nax[-1][0].set_xticklabels(q24_order, fontfamily='serif', rotation = 90)\nax[-1][1].set_xticklabels(q24_order, fontfamily='serif', rotation = 90)\n\nax[-1][-1].set_visible(False)\n\nfig.suptitle('Job & Earning Distribution', fontsize = 17, fontweight= 'bold', fontfamily = 'serif', y = 1.03)\n\nplt.show()","67b25d84":"data_q3q24 = pd.pivot_table(data, values = 'count', index = ['Q3'], columns = ['Q24'], aggfunc = np.sum).fillna(0).astype(int).loc[q3_order, q24_order]\ndata_q3q24 = (data_q3q24.T \/ data_q3q24.sum(axis=1)).rename(columns = {'United States of America' : 'USA', 'United Kingdom of Great Britain and Northern Ireland' : 'UK'})\n\nfig, ax = plt.subplots(5, 2, figsize=(15,22), sharex = True)\n\nfor idx, q3_idx in enumerate(data_q3q24.columns):\n    ax[idx%5][idx\/\/5].bar(data_q3q24[q3_idx].index, data_q3q24[q3_idx], color= colors, edgecolor = 'black', linewidth = 0.4, width = 0.6)\n    ax[idx%5][idx\/\/5].set_yticks([])\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax[idx%5][idx\/\/5].spines[s].set_linewidth(0.5)\n        \n    divider = make_axes_locatable(ax[idx%5][idx\/\/5])\n    cax = divider.append_axes(\"top\", size = \"11%\", pad = 0)\n    cax.get_xaxis().set_visible(False)\n    cax.get_yaxis().set_visible(False)\n    cax.set_facecolor('black')\n    \n    at = AnchoredText(q3_idx, loc = 10, \n                     prop = dict(backgroundcolor='black', size = 12, color = 'white', weight = 'bold')\n                     )\n    \n    cax.add_artist(at)\n    \nax[-1][0].set_xticklabels(q24_order, fontfamily = 'serif', rotation = 90)\nax[-1][1].set_xticklabels(q24_order, fontfamily = 'serif', rotation = 90)\n\nfig.suptitle('Country and Earning Distribution', fontsize = 21, fontweight = 'bold', fontfamily = 'serif', y = 1.03)\n\nplt.show()","837154ca":"data_q6q24 = pd.pivot_table(data, values = 'count', index = ['Q6'], columns = ['Q24'], aggfunc=np.sum).fillna(0).astype(int).loc[q6_order, q24_order]\ndata_q6q24 = (data_q6q24.T \/ data_q6q24.sum(axis = 1))\n\nfig, ax = plt.subplots(4, 2, figsize=(15, 10), sharex = True)\n\nfor idx, q6_idx in enumerate(data_q6q24.columns):\n    ax[idx%4][idx\/\/4].bar(data_q6q24[q6_idx].index, data_q6q24[q6_idx], color=colors, edgecolor='black', linewidth=0.4, width = 0.6)\n    ax[idx%4][idx\/\/4].set_yticks([])\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax[idx%4][idx\/\/4].spines[s].set_linewidth(0.5)\n        \n    divider = make_axes_locatable(ax[idx%4][idx\/\/4])\n    cax = divider.append_axes(\"top\", size = \"11%\", pad = 0)\n    cax.get_xaxis().set_visible(False)\n    cax.get_yaxis().set_visible(False)\n    cax.set_facecolor('black')\n    \n    at = AnchoredText(q6_idx, loc = 10, prop = dict(backgroundcolor='black', size = 12, color= 'white', weight = 'bold'))\n    \n    cax.add_artist(at)\n    \nax[-1][0].set_xticklabels(q24_order, fontfamily = 'serif', rotation = 90)\nax[-1][1].set_xticklabels(q24_order, fontfamily = 'serif', rotation = 90)\nax[-1][-1].set_visible(False)\n\nfig.suptitle('Experience and Earning Distribution', fontsize = 18, fontweight = 'bold', fontfamily = 'serif', y = 1.03)\nplt.show()","c3c53831":"# Q24 Compensation","a594d9f8":"# Q14 Visualization library","d0844289":"# Q1 and Q2 Age \/ Gender Distribution","8ed40170":"# Q4 and Q5 Degree \/ Experience","5116d8d3":"References -\n\nhttps:\/\/www.kaggle.com\/subinium\/kaggle-2020-visualization-analysis\n\nhttps:\/\/www.kaggle.com\/spitfire2nd\/enthusiast-to-data-professional-what-changes","e98f783c":"# Q2 and Q3 - Gender and Country","5f6802c5":"# Experience and Earning distribution","cf2c183c":"# Country and Earning Distribution","7d5dca28":"# Q2 & Q5 & Q15 - Gender, Position, ML Experience"}}