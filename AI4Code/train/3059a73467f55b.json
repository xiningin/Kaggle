{"cell_type":{"e1271c9a":"code","003c6df7":"code","a3c9d579":"code","4dd2dad9":"code","e0acc5bb":"code","6bc147b5":"code","832ebbfd":"code","1d43c6e3":"code","e34dcead":"code","aabadd7c":"code","c1721654":"code","5efabeca":"code","0b918e22":"code","8fdd6ae3":"code","8ca3d1ca":"code","637fe5af":"code","e0590f08":"code","d9424b65":"code","99c71cb1":"code","8e9fd1fd":"code","6b840d3c":"code","5fa076a1":"code","1331668f":"markdown","e6ee2a6f":"markdown","ad445968":"markdown","b6ab33c6":"markdown","41f06c10":"markdown","62728e92":"markdown","c8014575":"markdown","fb3c4c3d":"markdown","2d05079f":"markdown","cdfbeca1":"markdown","c8d72237":"markdown","25f00e3d":"markdown","493f891e":"markdown","d54ee68d":"markdown","53eb7033":"markdown"},"source":{"e1271c9a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","003c6df7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a3c9d579":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")","4dd2dad9":"train","e0acc5bb":"test","6bc147b5":"submission","832ebbfd":"short_train = train[: 250000]\nshort_train","1d43c6e3":"import seaborn as sns\n\nsns.histplot(short_train.target)","e34dcead":"target = short_train.target\n\ncombi = short_train.drop(['target'], axis=1).append(test)\ncombi","aabadd7c":"combi.info()","c1721654":"combi.isnull().sum().sum()","5efabeca":"y = target\nX = combi[: len(short_train)]\nX_test = combi[len(short_train):]","0b918e22":"X.shape, X_test.shape, y.shape","8fdd6ae3":"X = (X - X.min()) \/ (X.max() - X.min())\nX","8ca3d1ca":"from sklearn.feature_selection import SelectKBest, chi2\n\nselector = SelectKBest(chi2, k=50)\n\nX = selector.fit_transform(X, y)\nX_test = selector.transform(X_test)\ny.shape, X.shape, X_test.shape","637fe5af":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","e0590f08":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n\nmodel = HistGradientBoostingClassifier(max_iter=20000, random_state=1).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","d9424b65":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))","99c71cb1":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_val, y_pred))","8e9fd1fd":"prediction = model.predict(X_test)\n#prediction[prediction < 0] = 0\nprediction.shape","6b840d3c":"submission.target = prediction\nsubmission","5fa076a1":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","1331668f":"Split","e6ee2a6f":"Import","ad445968":"Normalise","b6ab33c6":"Check for null values","41f06c10":"Select Model","62728e92":"Load","c8014575":"Define X and y","fb3c4c3d":"Analyse combi","2d05079f":"Predict on test set","cdfbeca1":"The dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the biological response of molecules given various chemical properties. Although the features are anonymized, they have properties relating to real-world features.","c8d72237":"Predict validation set","25f00e3d":"Read","493f891e":"Shorten train","d54ee68d":"Analyse","53eb7033":"Combine"}}