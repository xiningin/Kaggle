{"cell_type":{"4f9d53c2":"code","673c724e":"code","2173e78f":"code","7c047d4d":"code","91875060":"code","60e70ae3":"code","a1644124":"code","f2d3f5c3":"code","1b421b98":"code","5701a46e":"code","9b0ec023":"code","9eb855fe":"code","0e9ffaf2":"code","d874feca":"code","f729357e":"code","2af98277":"code","f702ceef":"code","725df306":"code","c1252d06":"code","c6daf397":"code","46858dfb":"code","89cbf823":"code","40560b5e":"code","7f12773e":"code","8b35910f":"code","44506053":"code","fbccdf90":"code","08edc3c8":"code","b485e484":"code","95f030ab":"code","56ff613a":"code","231475a7":"markdown","058e0d51":"markdown","60e950a6":"markdown","4cae02ef":"markdown","9cb57f0c":"markdown","fef5af5a":"markdown","21a3fd9f":"markdown","53b0ef27":"markdown","027eeaec":"markdown","0123e421":"markdown","cf1f9b51":"markdown","0f9dde78":"markdown","e8baaf9d":"markdown","872bfdd5":"markdown","66093e57":"markdown","bbbce93f":"markdown","f133f3ce":"markdown","ce7bc594":"markdown","1545e639":"markdown","ecbaac1f":"markdown","483f54a1":"markdown","d5ef7559":"markdown","1a4842f4":"markdown","b79d18c8":"markdown","5260abb8":"markdown","a4d5b4be":"markdown","b4f0392c":"markdown","e406ff29":"markdown","6ae7e8be":"markdown","883336ca":"markdown","6ead996d":"markdown"},"source":{"4f9d53c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","673c724e":"import numpy as np \nimport pandas as pd\n\nfrom collections import defaultdict \n\nimport folium\n\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline","2173e78f":"df = pd.read_csv('..\/input\/indian-movie-theatres-dataset\/indian-movie-theatres.txt')","7c047d4d":"display(df.sample(5))","91875060":"df.shape","60e70ae3":"df.columns","a1644124":"df.info()","f2d3f5c3":"df.isna().sum()","1b421b98":"nans = df.isna().sum()\nft = list(nans.index)\nvalues = list(nans.values)","5701a46e":"plt.figure(figsize=(15,8))\nsns.set(style='whitegrid', color_codes = True)\nsns.barplot(x=ft, y=values)\nplt.xticks(rotation=90)\nplt.axhline(y=289,linewidth=1, color='k')\nplt.show()","9b0ec023":"df['city'].unique()","9eb855fe":"total_price = defaultdict(lambda: 0)\nlength = defaultdict(lambda: 0)\n#traversing through all the cities and calculating the sum and the length of non null values\nfor i in range(df.shape[0]):\n    if pd.isna(df['average_ticket_price'][i]) == False:\n        total_price[df['city'][i]] += df['average_ticket_price'][i]\n        length[df['city'][i]] += 1\n    \n#replacing null values with resultant answer from above formula\nfor i in range(df.shape[0]):\n    if pd.isna(df['average_ticket_price'][i]):\n        avg = total_price[df['city'][i]]\/length[df['city'][i]]\n        df.loc[i, 'average_ticket_price'] = avg","0e9ffaf2":"df.isna().sum()","d874feca":"df.drop('theatre_chain', axis=1, inplace=True)","f729357e":"df.drop('notes', axis=1, inplace=True)","2af98277":"plt.figure(figsize=(15, 10))\nsns.heatmap(df.corr(), annot=True)","f702ceef":"df.drop('calculated_seats', axis=1, inplace=True)\ndf.drop('calculated_ticket_prices', axis=1, inplace=True)\ndf.drop('calculated_screens', axis=1, inplace=True)\ndf.drop('average_2', axis=1, inplace=True)","725df306":"df['source_of_information'].value_counts()","c1252d06":"df.drop('source_of_information', axis=1, inplace=True)","c6daf397":"df.isna().sum()","46858dfb":"display(df.sample(5))","89cbf823":"num_features = ['total_seats', 'no_screens']\n\nfor i in num_features:\n    sns.lmplot(x=i, y='average_ticket_price', data=df)","40560b5e":"df['city'].unique()","7f12773e":"df['city'].value_counts()","8b35910f":"sns.set(rc = {'figure.figsize':(20,10)})\nsns.boxplot(x='city', y='average_ticket_price', data=df)","44506053":"df['type'].replace({'Single Screen':0, 'Multiplex':1}, inplace = True)","fbccdf90":"sns.set_style('whitegrid') \nplot=sns.lmplot(x ='type', y ='average_ticket_price', data = df,col='city', hue ='city',height=5,col_wrap=5) ","08edc3c8":"container = defaultdict(list)\n#locations dataframe for next section\nlocations = pd.DataFrame(columns=['theatre_name', 'average_ticket_price', 'lat', 'lon'])\n\nfor i in range(df.shape[0]):\n    dict1 = {}\n    city = df['city'][i]\n    theatre_name = df['theatre_name'][i]\n    average_ticket_price = df['average_ticket_price'][i]\n    lat = df['lat'][i]\n    lon = df['lon'][i]\n    dict1['theatre_name'] = theatre_name\n    dict1['average_ticket_price'] = average_ticket_price\n    dict1['lat'] = lat\n    dict1['lon'] = lon\n    \n    container[city].append(dict1)","b485e484":"    \ncities = list(df['city'].unique())\n\nfor i in cities:\n    newlist = sorted(container[i], key=lambda x: x['average_ticket_price'], reverse = True) \n    theatre_name = []\n    average_ticket_price = []\n    for j in range(0,10):\n        dict1 = newlist[j]\n        theatre_name.append(dict1['theatre_name'])\n        average_ticket_price.append(dict1['average_ticket_price'])\n        locations.loc[len(locations)] = (dict1)\n    plt.figure(figsize=(10,5))\n    sns.set(style='whitegrid', color_codes = True)\n    sns.barplot(x=theatre_name, y=average_ticket_price)\n    plt.suptitle(i)\n    plt.xticks(rotation=90)\n    plt.show()","95f030ab":"locations","56ff613a":"# Create a map object and center it to the avarage coordinates to map_obj\nmap_obj = folium.Map(location = locations[[\"lat\", \"lon\"]].mean().to_list(), zoom_start = 2)\n\nfor i in range(0,len(locations)):\n    folium.Marker([locations.iloc[i]['lat'], locations.iloc[i]['lon']]).add_to(map_obj)\n\nmap_obj","231475a7":"# Dealing With Null Values","058e0d51":"Viewing some random samples from the dataset","60e950a6":"Both the features - total seats and number of screens have strong influence on average ticket price. The average ticket price gradually decrease when the total seats are increased by a lot while average ticket price increases when the number of screens increases which is quite logical as well.","4cae02ef":"As we can observe that the count of null values in this column is greater than 50% of the data so there is no point in replacing null values with some technique like mean, median or mode because anyway the accuracy will drop. Hence it's better to drop the column.","9cb57f0c":"# Load and Analyse the Data","fef5af5a":"### Notes","21a3fd9f":"Let's visualize and locate the top ten theatre of each city on the map using folium library","53b0ef27":"# Import Libraries","027eeaec":"No null values left now so we are good to do some more interesting analysis on the data","0123e421":"Lets see how average ticket price varies with numerical features such as total seats in a theatre and number of screens in a theatre.","cf1f9b51":"The idea is to replace null values of a particular city with the average ticket price of the non null values present in the city.<br>\nFor example for city Mumbai:<br>\nNull Values(Mumbai) = Sum(Non-Null Values(Mumbai))\/Length(Non-Null Values(Mumbai))","0f9dde78":"Let's how Screen type affects the average ticket price in each city. Mapping data in column 'type', Single Screen to 0 and Multiplex to 1. ","e8baaf9d":"### Source Of Information","872bfdd5":"## Categorical Features","66093e57":"# Top Ten Theatres in each City having Highest Average Ticket Price","bbbce93f":"### Theatre Chain","f133f3ce":"### Screen Type","ce7bc594":"Now we are left with this data","1545e639":"Source of information doesnt assist in analysis of average ticket price of a theatre","ecbaac1f":"**I hope you liked the analysis on the dataset. Please upvote if you liked it!!**","483f54a1":"Similarly in this column as well null value percentage is greater 50% of the data so there is no point in replacing null values with some technique like mean, median or mode because anyway the accuracy will drop. Hence it's better to drop the column.","d5ef7559":"# Average Ticket Price","1a4842f4":"**I have analysed the Indian Movie Theatre dataset in this notebook. The dataset contains theatres from all over India and more specifically we will analyse all the features as to how they affect the average ticket price in a city. I have also done a lot of visualization in order to represent the work in a more better way. Lastly, I have plotted the theatres on a map using folium. <br>**\n#### If you like the work don't forget to upvote.","b79d18c8":"# Locating Top Ten Theatre of each city having highest average ticket price on the Map","5260abb8":"These columns specifically are repititions of other columns in the dataset.<br>\n**calculated_seats** = Similar to total seats. <br>\n**calculated_ticket_prices** = Similar to average_ticket_price column.<br>\n**calculated_screens** = Similar to no_screens column.<br>\n**average_2** = Similar to average_ticket_price column.<br>\nWe can see that the strength of the above mentioned pair columns is quite high. Hence is dropped.","a4d5b4be":"### Calculated Seats, Calculated Ticket Prices, Calculated Screens, Average_2","b4f0392c":"## Numerical Features","e406ff29":"### City","6ae7e8be":"### Average Ticket Price","883336ca":"Checking for null values in the dataset. We can see that there in all 7 columns which contain null values are supposed to be dealt with properly.","6ead996d":"The average ticket price variation from single screen theatres to Multiplex is quite visible in some cities like Bangalore, Delhi, Hyderabad, Kolkata and Mumbai. Whereas the variation is quite constant in cities like Ahmedabad, Chennai and Kochi."}}