{"cell_type":{"0e232bc7":"code","e57a4236":"code","e89f644c":"code","c512f380":"code","d761e9f9":"code","948e48e4":"code","20c2c929":"code","d6302535":"code","32d97004":"code","a46924ff":"code","571f65f8":"code","2752bc51":"code","7943b7e5":"code","bbec0e8b":"code","620a6841":"code","4ea0b162":"code","0a9583e1":"code","362c22ac":"code","7efd36e2":"code","9f108414":"code","8e3a4507":"code","c1a6e07c":"code","57e5e4d7":"code","48ca13d0":"code","292347b6":"code","3514eb8b":"code","c51f4e8d":"code","abd509a6":"code","8730dfb8":"code","c464c5d4":"markdown","bf72ea4c":"markdown","a6f42da5":"markdown","b23bbc73":"markdown"},"source":{"0e232bc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e57a4236":"# importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport nltk \nimport matplotlib.pyplot as plt","e89f644c":"datatrain = pd.read_csv(os.path.join(dirname, filenames[2]))\ndatatest = pd.read_csv(os.path.join(dirname, filenames[1]))","c512f380":"datatrain.head()","d761e9f9":"datatest.head()","948e48e4":"def basic_info(data):\n    print(data.shape)\n    print(data.columns)\n    print(data.info())","20c2c929":"basic_info(datatest)","d6302535":"basic_info(datatrain)","32d97004":"from nltk.stem import PorterStemmer\nps = PorterStemmer()","a46924ff":"import string\nimport re\nremove_hash = re.compile(\"#\")\nstopwords = nltk.corpus.stopwords.words('english')\ndef preprocessing_and_cleaining(x):\n    x = x.lower()\n    #print(x)\n    x = remove_hash.sub(\"\", x)\n    x = x.split(\" \")\n    x = [i for i in x if i not in stopwords]\n    #print(x)\n    x = [i for i in x if i not in string.punctuation]\n    #print(x)\n    x = \" \".join([ps.stem(i) for i in x])\n    #print(x)\n    return x","571f65f8":"#cleaning the train and test tweets\ndatatrain['Cleaned_tweet'] = datatrain['text'].apply(lambda x: preprocessing_and_cleaining(x))","2752bc51":"datatest['Cleaned_tweet'] = datatest['text'].apply(lambda x: preprocessing_and_cleaining(x))","7943b7e5":"datatrain.head()","bbec0e8b":"datatest.head()","620a6841":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","4ea0b162":"tfidf = TfidfVectorizer()\ntfidf.fit(datatrain['Cleaned_tweet'])","0a9583e1":"X = tfidf.transform(datatrain['Cleaned_tweet'])\nX_test = tfidf.transform(datatest['Cleaned_tweet'])","362c22ac":"X_train, X_val, y_train, y_val = train_test_split(X, datatrain['target'], train_size = 0.75, random_state = 0)","7efd36e2":"for c in [0.01, 0.05, 0.25, 0.5, 0.75, 1]:\n    lr = LogisticRegression(C=c)\n    lr.fit(X_train, y_train)\n    print(\"Accuracy for C = %s: %s\" % (c, accuracy_score(y_val, lr.predict(X_val))))","9f108414":"final_tfidf = LogisticRegression(C = 1, max_iter=5000)\nfinal_tfidf.fit(X, datatrain['target'])\n#print(\"Final Accuracy: %s\" %accuracy_score(datatrain['target'], final_tfidf.predict(X_test)))\nprediction_df = pd.DataFrame({\"id\": datatest['id'],\"target\": final_tfidf.predict(X_test)})","8e3a4507":"prediction_df","c1a6e07c":"from sklearn.ensemble import RandomForestClassifier","57e5e4d7":"rfc = RandomForestClassifier(random_state=0)","48ca13d0":"rfc.fit(X_train, y_train)","292347b6":"accuracy_score(y_val, lr.predict(X_val))","3514eb8b":"predictionrfr_df = pd.DataFrame({\"id\": datatest['id'],\"target\": rfc.predict(X_test)})","c51f4e8d":"predictionrfr_df","abd509a6":"prediction_df.to_csv(\"submission.csv\", index = False)","8730dfb8":"predictionrfr_df.to_csv(\"submission2.csv\", index = False)","c464c5d4":"taking C = 1","bf72ea4c":"# From both Logistic and Random Forest, I got the same score. So I will be uploading both of them","a6f42da5":"### Let's use TF-IDF for vectorization and make first out Logistic Regression","b23bbc73":"### Let's make a random forest classifier"}}