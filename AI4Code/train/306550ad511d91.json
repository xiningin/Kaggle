{"cell_type":{"f60ee4ae":"code","1462b27e":"code","3b389371":"code","a0cc3f75":"code","caec105d":"code","c66fc5cb":"code","e2097c10":"code","8c90c83d":"code","9930c2a5":"code","994b2fd6":"code","d6e11f6d":"code","8dca5801":"code","f118f074":"code","851e3e92":"code","230614c0":"code","1e36ce3c":"code","4ab28c39":"code","fc7d0391":"code","68f0ce2a":"code","71c74dce":"code","13b70f01":"code","4a94178a":"code","3ed55227":"code","b258fee1":"code","4d4c6ff1":"code","a350a018":"code","d9c1eb8f":"code","96c11b51":"code","74eb416d":"code","e1145820":"code","64d78c3e":"code","5a2d3bdf":"code","6dfe1fbf":"code","8507d574":"code","090a7f8a":"code","42875194":"code","7479ce4f":"code","21ef5a96":"code","298e0b37":"code","c5c7da2c":"code","74d89b27":"code","f480276f":"code","d5889646":"code","ca1bfc25":"code","7c792b5d":"code","b5411f84":"code","363fcd4d":"code","c9fe7bce":"code","b73151cd":"code","e33c3a82":"code","8ff760ed":"code","3803c554":"code","e360c983":"markdown","2fd0b985":"markdown","96548ae6":"markdown","c700cc95":"markdown","b820c6d4":"markdown","1af2881f":"markdown","fd82c33a":"markdown","3f43d77e":"markdown","321eef30":"markdown","1c17ecb2":"markdown","63a335a6":"markdown","274a2d2c":"markdown","de85fe95":"markdown","7e402490":"markdown","7a5b7458":"markdown","890b22e5":"markdown","58a36e17":"markdown","f422dd00":"markdown","de6e4c07":"markdown","b393a31b":"markdown","72ef8256":"markdown","66706f3e":"markdown","b814c717":"markdown","cb5b37ba":"markdown","bb88aab1":"markdown","a32f8b42":"markdown","312bb118":"markdown","c0e6b47f":"markdown","2ee96cf5":"markdown","39d720e2":"markdown","0de1ae88":"markdown","5540c77f":"markdown","ff1d7e3f":"markdown"},"source":{"f60ee4ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport plotly.graph_objects as go\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1462b27e":"data=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndata.head()","3b389371":"print('There are {} data points and {} features in the data'.format(data.shape[0],data.shape[1]))","a0cc3f75":"data.info()","caec105d":"data.describe()","c66fc5cb":"\nmsno.bar(data)\nplt.show()","e2097c10":"sns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8c90c83d":"plt.figure(figsize = (15, 8))\n\nsns.heatmap(data.corr(), annot = True, linewidths = 1)\nplt.show()","9930c2a5":"plt.figure(figsize = (16, 7))\nsns.distplot(data['age'])\nplt.title('Distribution Plot of Ages\\n', fontsize =  20)\nplt.show()","994b2fd6":"Age_18_25 = data.age[(data.age >= 18) & (data.age <= 25)]\nAge_26_35 = data.age[(data.age >= 26) & (data.age <= 35)]\nAge_36_45 = data.age[(data.age >= 36) & (data.age <= 45)]\nAge_46_55 = data.age[(data.age >= 46) & (data.age <= 55)]\nAge_56_65 = data.age[(data.age >= 56) & (data.age <= 65)]\nAge_66_75 = data.age[(data.age >= 66) & (data.age <= 75)]\nAge_75above = data.age[data.age >= 76]\nx_Age = [ '18-25','26-35', '36-45', '46-55', '56-65','66-75','75+']\ny_Age = [len(Age_18_25.values), len(Age_26_35.values), len(Age_36_45.values), len(Age_46_55.values), len(Age_56_65.values),\n         len(Age_66_75.values), len(Age_75above.values)]\n\npx.bar(data_frame = data, x = x_Age, y = y_Age, color = x_Age, template = 'plotly_dark',\n        labels={\n                     'x': \"Age\",\n                     'y': \"Number\",\n                     'color':'Age group'\n                     \n                 },\n       title = 'Number of patients per Age group')","d6e11f6d":"\npx.bar(data_frame = data, x = list(data.sex.value_counts().keys()), y = list(data.sex.value_counts()), \n       color = list(data.sex.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"Gender\",\n                     'y': \"Number\",\n                     'color':'Gender group'\n                     \n                 },\n       title = 'Number of patients per Gender group')\n","8dca5801":"# since we don't know 0 is male or female and vice versa we are assigning with the same label \ndata['sex'] = data['sex'].map({0:\"0_gender\", 1: \"1_gender\"}) \ndata.head()","f118f074":"\npx.bar(data_frame = data, x = list(data.cp.value_counts().keys()), y = list(data.cp.value_counts()), \n       color = list(data.cp.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"Chest Pain intnsity\",\n                     'y': \"Count\",\n                     'color':'Chest Pain intnsity'\n                     \n                 },\n       title = 'Number of patients per Chest Pain intnsity')\n","851e3e92":"\ncp_0_1 = data.cp[(data.cp == 0) & (data.output == 1)]\ncp_0_0 = data.cp[(data.cp == 0) & (data.output == 0)]\ncp_1_1 = data.cp[(data.cp == 1) & (data.output == 1)]\ncp_1_0 = data.cp[(data.cp == 1) & (data.output == 0)]\ncp_2_1 = data.cp[(data.cp == 2) & (data.output == 1)]\ncp_2_0 = data.cp[(data.cp == 2) & (data.output == 0)]\ncp_3_1 = data.cp[(data.cp == 3) & (data.output == 1)]\ncp_3_0 = data.cp[(data.cp == 3) & (data.output == 0)]\n\ny_cp_1 = [len(cp_0_1.values), len(cp_1_1.values), len(cp_2_1.values), len(cp_3_1.values)]\ny_cp_0 = [len(cp_0_0.values), len(cp_1_0.values), len(cp_2_0.values),len(cp_3_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1,2,3],\n    y=y_cp_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1,2,3],\n    y=y_cp_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","230614c0":"data['cp'] = data['cp'].map({0:\"Intensity_0\", 1: \"Intensity_1\", 2: 'Intensity_2',3:'Intensity_3'}) \ndata.head()","1e36ce3c":"plt.figure(figsize = (16, 7))\nsns.distplot(data['trtbps'])\nplt.title('Distribution Plot of Resting blood pressure (in mm Hg)\\n', fontsize =  20)\nplt.show()","4ab28c39":"px.box(x = 'trtbps', data_frame = data, template = 'plotly_dark')","fc7d0391":"plt.figure(figsize = (16, 7))\nsns.distplot(data['chol'])\nplt.title('Distribution Plot of cholestoral in mg\/dl\\n', fontsize =  20)\nplt.show()","68f0ce2a":"px.box(x = 'chol', data_frame = data, template = 'plotly_dark')","71c74dce":" data.chol[data.trtbps >= 171]","13b70f01":"\npx.bar(data_frame = data, x = list(data.fbs.value_counts().keys()), y = list(data.fbs.value_counts()), \n       color = list(data.fbs.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"fasting blood sugar > 120 mg\/dl\",\n                     'y': \"Count\",\n                     'color':'fasting blood sugar > 120 mg\/dl'\n                     \n                 },\n       title = 'Number of patients having fasting blood sugar > 120 mg\/dl')\n","4a94178a":"import plotly.graph_objects as go\n\nfbs_0_1 = data.fbs[(data.fbs == 0) & (data.output == 1)]\nfbs_0_0 = data.fbs[(data.fbs == 0) & (data.output == 0)]\nfbs_1_1 = data.fbs[(data.fbs == 1) & (data.output == 1)]\nfbs_1_0 = data.fbs[(data.fbs == 1) & (data.output == 0)]\n\ny_fbs_1 = [len(fbs_0_1.values), len(fbs_1_1.values)]\ny_fbs_0 = [len(fbs_0_0.values), len(fbs_1_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1],\n    y=y_fbs_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1],\n    y=y_fbs_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","3ed55227":"\npx.bar(data_frame = data, x = list(data.restecg.value_counts().keys()), y = list(data.restecg.value_counts()), \n       color = list(data.restecg.value_counts().keys()),\n        labels={\n                     'x': \"resting electrocardiographic results\",\n                     'y': \"Count\",\n                     'color':'resting electrocardiographic results'\n                     \n                 },\n       title = 'Number of patients per resting electrocardiographic results')\n","b258fee1":"import plotly.graph_objects as go\n\nrestecg_0_1 = data.restecg[(data.restecg == 0) & (data.output == 1)]\nrestecg_0_0 = data.restecg[(data.restecg == 0) & (data.output == 0)]\nrestecg_1_1 = data.restecg[(data.restecg == 1) & (data.output == 1)]\nrestecg_1_0 = data.restecg[(data.restecg == 1) & (data.output == 0)]\nrestecg_2_1 = data.restecg[(data.restecg == 2) & (data.output == 1)]\nrestecg_2_0 = data.restecg[(data.restecg == 2) & (data.output == 0)]\n\ny_restecg_1 = [len(restecg_0_1.values), len(restecg_1_1.values), len(restecg_2_1.values)]\ny_restecg_0 = [len(restecg_0_0.values), len(restecg_1_0.values), len(restecg_2_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1,2],\n    y=y_restecg_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1,2],\n    y=y_restecg_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","4d4c6ff1":"data['restecg'] = data['restecg'].map({0:\"restecg_0\", 1: \"restecg_1\", 2: 'restecg_2'}) \ndata.head()","a350a018":"plt.figure(figsize = (16, 7))\nsns.distplot(data['thalachh'])\nplt.title('Distribution Plot of maximum heart rate achieved\\n', fontsize =  20)\nplt.show()","d9c1eb8f":"thalachh_50_85 = data.thalachh[(data.thalachh >= 50) & (data.thalachh <= 85)]\nthalachh_86_110 = data.thalachh[(data.thalachh >= 86) & (data.thalachh <= 110)]\nthalachh_111_135 = data.thalachh[(data.thalachh >= 111) & (data.thalachh <= 135)]\nthalachh_136_160 = data.thalachh[(data.thalachh >= 136) & (data.thalachh <= 160)]\nthalachh_161_185 = data.thalachh[(data.thalachh >= 161) & (data.thalachh <= 185)]\nthalachh_185above = data.thalachh[data.thalachh >= 186]\nx_thalachh = [ '50-85','86-110', '111-135', '136-160', '161-185','185+']\ny_thalachh = [len(thalachh_50_85.values), len(thalachh_86_110.values), len(thalachh_111_135.values), len(thalachh_136_160.values)\n         , len(thalachh_161_185.values), len(thalachh_185above.values)]\n\npx.bar(data_frame = data, x = x_thalachh, y = y_thalachh, color = x_thalachh, template = 'plotly_dark',\n        labels={\n                     'x': \"maximum heart rate achieved\",\n                     'y': \"Count\",\n                     'color':'maximum heart rate achieved'\n                     \n                 })","96c11b51":"px.bar(data_frame = data, x = 'age', y = 'thalachh', color = 'age', template = 'plotly_dark',\n       labels={\n                     'x': \"Age\",\n                     'y': \"maximum heart beat\",\n                     'color':'Age'},\n       title = 'Age to maximum heart beat(sum)')","74eb416d":"px.box(x = 'thalachh', data_frame = data, template = 'plotly_dark')","e1145820":"\npx.bar(data_frame = data, x = list(data.exng.value_counts().keys()), y = list(data.exng.value_counts()), \n       color = list(data.exng.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"exercise induced angina\",\n                     'y': \"Count\",\n                     'color':'exercise induced angina'\n                     \n                 },\n       title = 'Number of patients having exercise induced angina')\n","64d78c3e":"import plotly.graph_objects as go\n\nexng_0_1 = data.exng[(data.exng == 0) & (data.output == 1)]\nexng_0_0 = data.exng[(data.exng == 0) & (data.output == 0)]\nexng_1_1 = data.exng[(data.exng == 1) & (data.output == 1)]\nexng_1_0 = data.exng[(data.exng == 1) & (data.output == 0)]\n\ny_exng_1 = [len(exng_0_1.values), len(exng_1_1.values)]\ny_exng_0 = [len(exng_0_0.values), len(exng_1_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1],\n    y=y_exng_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1],\n    y=y_exng_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","5a2d3bdf":"plt.figure(figsize = (16, 7))\nsns.distplot(data['oldpeak'])\nplt.title('Distribution Plot of Previous peak achieved\\n', fontsize =  20)\nplt.show()","6dfe1fbf":"px.box(x = 'oldpeak', data_frame = data, template = 'plotly_dark')","8507d574":"\npx.bar(data_frame = data, x = list(data.slp.value_counts().keys()), y = list(data.slp.value_counts()), \n       color = list(data.slp.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"slp\",\n                     'y': \"Count\",\n                     'color':'slp'\n                     \n                 },\n       title = 'slp plot')\n","090a7f8a":"import plotly.graph_objects as go\n\nslp_0_1 = data.slp[(data.slp == 0) & (data.output == 1)]\nslp_0_0 = data.slp[(data.slp == 0) & (data.output == 0)]\nslp_1_1 = data.slp[(data.slp == 1) & (data.output == 1)]\nslp_1_0 = data.slp[(data.slp == 1) & (data.output == 0)]\nslp_2_1 = data.slp[(data.slp == 2) & (data.output == 1)]\nslp_2_0 = data.slp[(data.slp == 2) & (data.output == 0)]\n\ny_slp_1 = [len(slp_0_1.values), len(slp_1_1.values), len(slp_2_1.values)]\ny_slp_0 = [len(slp_0_0.values), len(slp_1_0.values), len(slp_2_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1,2],\n    y=y_slp_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1,2],\n    y=y_slp_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","42875194":"data['slp'] = data['slp'].map({0:\"slp_0\", 1: \"slp_1\", 2: 'slp_2'}) \ndata.head()","7479ce4f":"\npx.bar(data_frame = data, x = list(data.caa.value_counts().keys()), y = list(data.caa.value_counts()), \n       color = list(data.caa.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"caa\",\n                     'y': \"Count\",\n                     'color':'caa'\n                     \n                 },\n       title = 'caa plot')\n","21ef5a96":"import plotly.graph_objects as go\n\ncaa_0_1 = data.caa[(data.caa == 0) & (data.output == 1)]\ncaa_0_0 = data.caa[(data.caa == 0) & (data.output == 0)]\ncaa_1_1 = data.caa[(data.caa == 1) & (data.output == 1)]\ncaa_1_0 = data.caa[(data.caa == 1) & (data.output == 0)]\ncaa_2_1 = data.caa[(data.caa == 2) & (data.output == 1)]\ncaa_2_0 = data.caa[(data.caa == 2) & (data.output == 0)]\n\ncaa_3_1 = data.caa[(data.caa == 3) & (data.output == 1)]\ncaa_3_0 = data.caa[(data.caa == 3) & (data.output == 0)]\n\ncaa_4_1 = data.caa[(data.caa == 4) & (data.output == 1)]\ncaa_4_0 = data.caa[(data.caa == 4) & (data.output == 0)]\n\ny_caa_1 = [len(caa_0_1.values), len(caa_1_1.values), len(caa_2_1.values), len(caa_3_1.values), len(caa_4_1.values)]\ny_caa_0 = [len(caa_0_0.values), len(caa_1_0.values), len(caa_2_0.values), len(caa_3_0.values), len(caa_4_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1,2,3,4],\n    y=y_caa_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1,2,3,4],\n    y=y_caa_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","298e0b37":"data['caa'] = data['caa'].map({0:\"caa_0\", 1: \"caa_1\", 2: 'caa_2', 3: 'caa_3', 4: 'caa_4'}) \ndata.head()","c5c7da2c":"\npx.bar(data_frame = data, x = list(data.thall.value_counts().keys()), y = list(data.thall.value_counts()), \n       color = list(data.thall.value_counts().keys()), template = 'plotly_dark',\n        labels={\n                     'x': \"thall\",\n                     'y': \"Count\",\n                     'color':'thall'\n                     \n                 },\n       title = 'caa plot',barmode='group')\n","74d89b27":"import plotly.graph_objects as go\n\nthall_0_1 = data.thall[(data.thall == 0) & (data.output == 1)]\nthall_0_0 = data.thall[(data.thall == 0) & (data.output == 0)]\nthall_1_1 = data.thall[(data.thall == 1) & (data.output == 1)]\nthall_1_0 = data.thall[(data.thall == 1) & (data.output == 0)]\nthall_2_1 = data.thall[(data.thall == 2) & (data.output == 1)]\nthall_2_0 = data.thall[(data.thall == 2) & (data.output == 0)]\nthall_3_1 = data.thall[(data.thall == 3) & (data.output == 1)]\nthall_3_0 = data.thall[(data.thall == 3) & (data.output == 0)]\n\ny_thall_1 = [len(thall_0_1.values), len(thall_1_1.values), len(thall_2_1.values), len(thall_3_1.values)]\ny_thall_0 = [len(thall_0_0.values), len(thall_1_0.values), len(thall_2_0.values), len(thall_3_0.values)]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=[0,1,2,3],\n    y=y_thall_1,\n    name='Heart Attack',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=[0,1,2,3],\n    y=y_thall_0,\n    name='Safe',\n    marker_color='lightsalmon'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","f480276f":"data['thall'] = data['thall'].map({0:\"thall_0\", 1: \"thall_1\", 2: 'thall_2', 3: 'thall_3'}) \ndata.head()","d5889646":"data.head()","ca1bfc25":"data=pd.get_dummies(data)\ndata.head()","7c792b5d":"X= data.drop(['output'],axis=1)\nY= data[\"output\"]","b5411f84":"from sklearn.model_selection import train_test_split\n# split the data to train and test set\nx_train,x_test,y_train,y_test = train_test_split(X,Y,train_size=0.85,random_state=42)\n\n\nprint(\"training data shape:- {} labels {} \".format(x_train.shape[0],x_train.shape[1]))\nprint(\"testing data shape:- {} labels {} \".format(x_test.shape[0],x_test.shape[1]))","363fcd4d":"from xgboost import XGBClassifier\nfrom sklearn.metrics import r2_score\n\nxgb = XGBClassifier(colsample_bylevel= 0.9,\n                    colsample_bytree = 0.8, \n                    gamma=0.99,\n                    max_depth= 5,\n                    min_child_weight= 1,\n                    n_estimators= 8,\n                    nthread= 5,\n                    random_state= 0,\n                    )\nxgb.fit(x_train,y_train)","c9fe7bce":"print('Accuracy of XGBoost classifier on training set: {:.2f}'\n     .format(xgb.score(x_train, y_train)))\nprint('Accuracy of XGBoost classifier on test set: {:.2f}'\n     .format(xgb.score(x_test, y_test)))","b73151cd":"from sklearn import metrics\n\ny_pred=xgb.predict(x_test)\nprint(\"Accuracy of XG Boost model is:\",\nmetrics.accuracy_score(y_test, y_pred)*100)","e33c3a82":"from sklearn.metrics import confusion_matrix\n\nconf_matrix = confusion_matrix(y_true=y_test, y_pred=y_pred)\nplt.figure(figsize = (15, 8))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(conf_matrix, annot=True, annot_kws={\"size\": 16},cbar=False, linewidths = 1) # font size\nplt.title(\"Test Confusion Matrix\")\nplt.xlabel(\"Predicted class\")\nplt.ylabel(\"Actual class\")\nplt.savefig('conf_test.png')\nplt.show()","8ff760ed":"from sklearn.metrics import confusion_matrix\ny_pred_t=xgb.predict(x_train)\nconf_matrix = confusion_matrix(y_true=y_train, y_pred=y_pred_t)\nplt.figure(figsize = (15, 8))\nsns.set(font_scale=1.4) # for label size\nsns.heatmap(conf_matrix, annot=True, annot_kws={\"size\": 16},cbar=False, linewidths = 1) # font size\nplt.title(\"Train Confusion Matrix\")\nplt.xlabel(\"Predicted class\")\nplt.ylabel(\"Actual class\")\nplt.show()","3803c554":"from sklearn.metrics import precision_score, recall_score, f1_score\nprint(\"For testing data\")\nprint('Precision: %.3f' % precision_score(y_test, y_pred,average='micro'))\nprint('Recall: %.3f' % recall_score(y_test, y_pred,average='micro'))\nprint('F1 Score: %.3f' % f1_score(y_test, y_pred,average='micro'))\n\nprint()\n\nprint(\"For training data\")\ny_pred_t=xgb.predict(x_train)\nprint('Precision: %.3f' % precision_score(y_train, y_pred_t,average='micro'))\nprint('Recall: %.3f' % recall_score(y_train, y_pred_t,average='micro'))\nprint('F1 Score: %.3f' % f1_score(y_train, y_pred_t,average='micro'))\n","e360c983":"### Age","2fd0b985":"## Reading the data","96548ae6":"### cp\nChest Pain type chest pain type","c700cc95":"### Gender","b820c6d4":"### oldpeak\nPrevious peak","1af2881f":"### caa","fd82c33a":"For fine tuning our main aim should be to reduce true negative","3f43d77e":"### exng\nexercise induced angina (1 = yes; 0 = no)","321eef30":"### Feature engineering","1c17ecb2":"### Checking correlation","63a335a6":"There are no missing values present in the dataset","274a2d2c":"### thall","de85fe95":"# Exploratory data Analysis","7e402490":"lets see trtbps and chol has similar outliers ","7a5b7458":"### trtbps\nresting blood pressure (in mm Hg)","890b22e5":"### checking for null values","58a36e17":"### restecg\nresting electrocardiographic results","f422dd00":"We can see that not getting exercise induced angina may have a greater chance of heart attack","de6e4c07":"### chol\ncholestoral in mg\/dl fetched via BMI sensor","b393a31b":"Assigning labels for one hot encoding","72ef8256":"Though Chest pain is represented as numeric data but it is categorical in nature. We can convert the data to categorical to get dummies. LabelEncoding will not work here as we can see that there is not such relation among the categories that resembles an ordinal relationship.","66706f3e":"### thalachh\nmaximum heart rate achieved","b814c717":"There are no correlated columns presebt in the data ","cb5b37ba":"### fbs\n(fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)","bb88aab1":"Variation in sugar level is not the sole cause of a heart attack","a32f8b42":"### Analysis of Features","312bb118":"### slp","c0e6b47f":"### One hot encoding","2ee96cf5":"We can see the cases are more of age group from 56 to 65","39d720e2":"### chol\ncholestoral in mg\/dl fetched via BMI sensor","0de1ae88":"the values of trtbps outliers are well in range of cholestrol level","5540c77f":"### Basic information about Data","ff1d7e3f":"We can see that if the result is 1 we have more chances of survival compared to 0 and 2 \nsince we have least data points which has category of '2' it the results for label 2 are ambiguous. Thus it is better we use one hot encoding for the feature"}}