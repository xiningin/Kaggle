{"cell_type":{"8a1c2aaf":"code","595ec092":"code","15a04611":"code","1f4339ce":"code","f3471966":"code","038b0234":"code","d0a0fd89":"code","60e7ec37":"code","a19f6181":"code","6f286016":"code","e4a22f83":"code","5ef82aa5":"code","c82032d1":"markdown","7118e3ac":"markdown","52813daf":"markdown"},"source":{"8a1c2aaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","595ec092":"\nimport pandas as pd\nimport numpy as np\nimport io\n\nhapi= pd.read_csv(r'..\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv')\n\n# clean the headers of the dataset\nhapi.columns = (hapi.columns.str.strip().str.upper()\n              .str.replace(' ', '_')\n              .str.replace('(', '')\n              .str.replace(')', ''))\ncol=hapi.columns\ncol","15a04611":"hapi=hapi[[col[0],col[1],col[2],col[6],col[7],col[8],col[9],col[10],col[11]]]\nhapi","1f4339ce":"hapi=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['East Asia','Southeast Asia','South Asia'])]\nhapi","f3471966":"! pip install geopandas","038b0234":"import geopandas as gpd\nwmap=gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nboth=pd.merge(wmap,hapi,left_on=\"name\",right_on='COUNTRY_NAME')\nboth=both.drop(['name'],axis=1)\nboth","d0a0fd89":"import matplotlib.pyplot as plt\nboth.plot(\"LADDER_SCORE\",\"Greens\",figsize=(30,15),legend=True,edgecolors=\"0.1\",legend_kwds={\"shrink\":0.3})\nplt.title('Happiness Index of Asian Countries',fontdict={'fontsize':20})\nplt.xticks([])\nplt.yticks([])","60e7ec37":"from numpy import *\ny=[]\nhapi_sea=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['Southeast Asia'])]\ny.append(round(hapi_sea['LADDER_SCORE'].mean(),2))\nhapi_sa=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['South Asia'])]\ny.append(        round(hapi_sa[\"LADDER_SCORE\"].mean(),2)         )\nhapi_ea=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['East Asia'])]\ny.append(         round(hapi_ea[\"LADDER_SCORE\"].mean(),2)    )\ny\n\nregion=[]\nhapi_sea=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['Southeast Asia'])]\nregion.append(hapi_sea['REGIONAL_INDICATOR'].unique())\nhapi_sa=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['South Asia'])]\nregion.append(hapi_sa['REGIONAL_INDICATOR'].unique())\nhapi_ea=hapi.loc[hapi['REGIONAL_INDICATOR'].isin(['East Asia'])]\nregion.append(hapi_ea['REGIONAL_INDICATOR'].unique())\n\nregion = [list(x) for x in region]\nregion\n\nnew_region=[]\nfor i in region:\n  new_region.extend(i)\nnew_region\n\nprint('y=',y,'\\nregion=',new_region)","a19f6181":"import matplotlib.pyplot as plt\nplt.bar(new_region,y,width=0.5)\nfor continent, ladder in enumerate(y):\n    plt.text(continent, ladder, str(ladder),horizontalalignment='center')\nplt.xlabel('Continents')\nplt.ylabel('Ladder_Score')\nplt.title('Happiness_Index of Asian Countries')\nplt.yticks([])\nplt.show()","6f286016":"############################ SOUTH ASIAN COUNTRIES ##################################\n\n#################### LADDER and SOCIAL_SUPPORT#################################\nx=[]\nfor i in hapi_sa['LADDER_SCORE']:\n  x.append(round(i,2))\n\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(9,3))\n\nax1.barh(hapi_sa['COUNTRY_NAME'],hapi_sa['LADDER_SCORE'],color=\"yellow\")\nfor continent, ladder in enumerate(x):\n    ax1.text(ladder, continent, str(ladder))\nax1.invert_yaxis()\nax1.set_title('South Asian countries in terms of Ladder_score')\nax1.axes.get_xaxis().set_visible(False)\n\n\nhapi_sa_social=hapi_sa.sort_values(by='SOCIAL_SUPPORT')\nsocial=[]\nfor i in hapi_sa_social[\"SOCIAL_SUPPORT\"]:\n  social.append(round(i,2))\n\nax2.barh(hapi_sa_social['COUNTRY_NAME'],hapi_sa_social[\"SOCIAL_SUPPORT\"],color=\"red\")\nfor continent, ladder in enumerate(social):\n    ax2.text(ladder, continent, str(ladder))\n\nax2.set_title('South Asian countries in terms of Social_support')\nax2.axes.get_xaxis().set_visible(False)\n\nfig.tight_layout()\nplt.show()\n###########################################################################\n\n######################################### GENEROSITY and CORRUPTION ################################\n\n\ngrp,(ax3,ax4)=plt.subplots(1,2,figsize=(9,3))\n\nhapi_sa_gen=hapi_sa.sort_values(by='GENEROSITY')\ngen=[]\nfor i in hapi_sa_gen[\"GENEROSITY\"]:\n  gen.append(round(i,2))\n\nax3.barh(hapi_sa_gen['COUNTRY_NAME'],hapi_sa_gen[\"GENEROSITY\"],color=\"pink\")\nfor continent, ladder in enumerate(gen):\n    ax3.text(ladder, continent, str(ladder))\n\nax3.set_title('South Asian countries in terms of Generosity')\nax3.axes.get_xaxis().set_visible(False)\n\nhapi_sa_cor=hapi_sa.sort_values(by='PERCEPTIONS_OF_CORRUPTION')\ncor=[]\nfor i in hapi_sa_cor[\"PERCEPTIONS_OF_CORRUPTION\"]:\n  cor.append(round(i,2))\n\nax4.barh(hapi_sa_cor['COUNTRY_NAME'],hapi_sa_cor[\"PERCEPTIONS_OF_CORRUPTION\"],color=\"black\")\nfor continent, ladder in enumerate(cor):\n    ax4.text(ladder, continent, str(ladder))\n\nax4.set_title('                  South Asian countries in terms of Perception of Corruption')\nax4.axes.get_xaxis().set_visible(False)\n\ngrp.tight_layout()\nplt.show()\n\n#####################################################################################\n###################################### GDP PER CAPITA and LIFE EXPEXTANCY #########################\n\nf,(ax5,ax6)=plt.subplots(1,2,figsize=(9,3))\n\nhapi_sa_gdp=hapi_sa.sort_values(by='LOGGED_GDP_PER_CAPITA')\ngdp=[]\nfor i in hapi_sa_gdp[\"LOGGED_GDP_PER_CAPITA\"]:\n  gdp.append(round(i,2))\n\nax5.barh(hapi_sa_gdp['COUNTRY_NAME'],hapi_sa_gdp[\"LOGGED_GDP_PER_CAPITA\"])\nfor continent, ladder in enumerate(gdp):\n    ax5.text(ladder, continent, str(ladder))\n\nax5.set_title('South Asian countries in terms of GDP      ')\nax5.axes.get_xaxis().set_visible(False)\n\nhapi_sa_lif=hapi_sa.sort_values(by='HEALTHY_LIFE_EXPECTANCY')\nlif=[]\nfor i in hapi_sa_lif[\"HEALTHY_LIFE_EXPECTANCY\"]:\n  lif.append(round(i,2))\n\nax6.barh(hapi_sa_lif['COUNTRY_NAME'],hapi_sa_lif[\"HEALTHY_LIFE_EXPECTANCY\"],color=\"grey\")\nfor continent, ladder in enumerate(lif):\n    ax6.text(ladder, continent, str(ladder))\n\nax6.set_title('South Asian countries in terms of Healthy life Expectancy')\nax6.axes.get_xaxis().set_visible(False)\n\nf.tight_layout()\nplt.show()\n\n##########################################################################\n############################################## FREEDOM_TO_MAKE_LIFE_CHOICES ###################################\n\ng,ax7=plt.subplots(figsize=(9,3))\n\nhapi_sa_fre=hapi_sa.sort_values(by='FREEDOM_TO_MAKE_LIFE_CHOICES')\nfre=[]\nfor i in hapi_sa_fre[\"FREEDOM_TO_MAKE_LIFE_CHOICES\"]:\n  fre.append(round(i,2))\n\nax7.barh(hapi_sa_fre['COUNTRY_NAME'],hapi_sa_fre[\"FREEDOM_TO_MAKE_LIFE_CHOICES\"],color=\"maroon\")\nfor continent, ladder in enumerate(fre):\n    ax7.text(ladder, continent, str(ladder))\n\nax7.set_title('South Asian countries in terms of Freedom to make life choices')\nax7.axes.get_xaxis().set_visible(False)\n\n#g.tight_layout()\nplt.show()\n####################################################################################","e4a22f83":"independent=hapi_sa.drop(['LADDER_SCORE',\"COUNTRY_NAME\",\"REGIONAL_INDICATOR\"],axis=1).values\ntarget=hapi_sa['LADDER_SCORE']\n","5ef82aa5":"from sklearn.linear_model import Lasso\n\ncolu=hapi_sa.drop(['LADDER_SCORE',\"COUNTRY_NAME\",\"REGIONAL_INDICATOR\"],axis=1).columns\n\nlasso=Lasso(alpha=0.1)\nlasso_c=lasso.fit(independent,target).coef_\n\n\nplt.plot(range(len(colu)),lasso_c,color=\"purple\")\nplt.xticks(range(len(colu)),colu,rotation=90)   \n\nplt.title(\"Important Factors\")","c82032d1":"Now I sleected the rows which is required for me, in this case it is Asian countries. So I madeuse of loc() and only selected rows which had \"Southeast asia\",\"east asia\"and \"south asia\"","7118e3ac":"As All the cells are not required for our job I only selected the columns required for the project and did not use the rest of the columns ","52813daf":"**Firstly I imported dataset which is available in Kaggle \"happiness index 2021\" and I have made use of only one data set\nNextly I cleaned the headers of the data set as I ran into a few problems while selecting specific cells **"}}