{"cell_type":{"17b4cc7f":"code","2471ec2d":"code","49a7a3aa":"code","f38b7fa7":"code","81cb2379":"code","a3344ce8":"code","fe021f65":"code","d99209b1":"code","ce63c373":"code","b9ae4f85":"code","286ace33":"code","1e3d4e5c":"code","55b58f59":"code","7a5d8b09":"code","4813ead7":"code","95cc3203":"code","c28b1215":"code","acda4a48":"code","e5f28492":"code","41bfedb7":"code","a31c2c64":"code","d4a8ba96":"code","0f285c47":"code","c3b165e9":"code","e7a2b88a":"code","32da187b":"code","77c52228":"code","31fcbaaa":"code","77d94b60":"code","c91165e6":"code","005bc61b":"code","2b4bf7b4":"code","bd0cad1e":"code","6d0d7c36":"code","1268a50b":"code","ecc029a8":"code","e2bec7c7":"code","6a705705":"code","ceb3fc33":"code","0c7abb99":"code","42e61b5d":"code","e7f936fd":"code","203f3aa0":"code","54fdc667":"code","6a5a6a7a":"code","079bc607":"code","eadd9de2":"code","16be5434":"code","03bc2d66":"code","80932527":"code","ad3f3c1c":"code","79be8049":"code","2e9626bc":"code","956c235e":"code","d3429183":"code","192a0681":"code","d4234bb4":"code","7bb06443":"code","b2fd3e95":"code","c517a394":"code","6ee3e15a":"code","f37617e7":"code","cd47ff0f":"code","fb40812f":"code","8e71cdf6":"code","883d1615":"code","d25b4b16":"code","6979fe55":"code","8e3b1494":"code","273066b0":"code","7aa98ea1":"code","1afbc260":"code","c7ad0cee":"code","701f4325":"code","2dbd1077":"code","2010b9f5":"code","4f49f061":"code","0bfbee53":"code","b5a80fde":"code","b0e669e6":"code","d846a079":"code","d897d19b":"code","67696410":"code","4e5cc6b6":"code","ca5ecef1":"code","514d8ecc":"code","392d4ba3":"code","1dba7266":"code","cff85117":"code","c781ddf0":"code","d49ed1a5":"code","8f53ac37":"code","25d9adb7":"code","43ffcd58":"code","1e051929":"code","8ca30708":"code","3e108022":"code","6426e02f":"code","4ababb7c":"code","f831263f":"code","caa45f6a":"code","81e42bfd":"code","e7189e70":"code","20c838a4":"code","8bf36842":"code","0449f198":"code","291f5e33":"code","f64731f3":"code","fa53f869":"code","1ab5df4b":"code","300a7b6f":"code","e970dd13":"code","9518ad46":"code","b8ce3583":"code","f449630b":"code","c9196706":"code","8c391867":"code","36ec83bd":"code","6a0d2c72":"code","1d54f0cb":"code","7da8f023":"code","9fb1e0c2":"code","5e827e3b":"code","ecdbb600":"code","56c25740":"code","4e18877e":"code","036af308":"code","0e56de40":"code","3cb213fe":"code","be853f3f":"code","43c1d81b":"code","d123784f":"code","9edaac80":"code","0c283485":"code","64ab9b20":"code","b3f1358b":"code","37d262a7":"code","0bdc89f2":"code","d6b7f28f":"code","99e59d8e":"code","82b294fd":"code","cec45ff5":"code","35f5a867":"code","7e7b3eb6":"code","2485c29e":"code","422801d2":"code","c20f5c88":"code","35e31a45":"code","643c9fdf":"code","8bef7b80":"code","9862dc4b":"code","53928889":"code","30ef9c3d":"code","4aea9802":"code","06dd6861":"code","f1810960":"code","67c9ca10":"code","4d720573":"code","fab672df":"code","e91fd7b1":"code","f212b9d8":"code","dc92aa65":"code","1483c941":"code","f1bc3f79":"code","10e83316":"code","bcf53fff":"code","147864b8":"code","d796213d":"code","4fd324b9":"code","800ce5e2":"code","ca0fd8a7":"code","43bd1dff":"code","b3561b18":"markdown","9e8c08e6":"markdown","0ba7ab34":"markdown","67768d48":"markdown","e9fb0ec4":"markdown","7c9e8a16":"markdown","2403dbf3":"markdown","31f153ba":"markdown","d01357ce":"markdown","4135afe4":"markdown","a3d6fadf":"markdown","49326ebc":"markdown","fe065f72":"markdown","2a4270cb":"markdown","9b0f7a89":"markdown","e988dfe1":"markdown","ff229ad9":"markdown","371707ce":"markdown","ce08dab3":"markdown","fa37a6ec":"markdown","ec0f9c5c":"markdown","1152a1e0":"markdown","449bbaaf":"markdown","84515896":"markdown","92c5b236":"markdown","8382ab26":"markdown","8ede5da8":"markdown","d43d7c17":"markdown","d6908153":"markdown","a9ce4695":"markdown","f591c0b0":"markdown","c82043d5":"markdown","5db9a8fe":"markdown","5a66490f":"markdown","dd8d533a":"markdown","1ccad27d":"markdown"},"source":{"17b4cc7f":"import pandas as pd\n\ntrain_dataframe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train.csv')\ntrain_dataframe.head()","2471ec2d":"import pandas as pd\n\ntest_dataframe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test.csv')\ntest_dataframe.head()","49a7a3aa":"train_dataframe.shape,test_dataframe.shape","f38b7fa7":"train_dataframe = train_dataframe.drop_duplicates()\ntrain_dataframe.shape","81cb2379":"train_dataframe.describe()","a3344ce8":"train_dataframe.corr()","fe021f65":"import pandas as pd\n\ntrain_dataframe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train.csv')\ntrain_dataframe.head()","d99209b1":"train_dataframe['pet_category'].unique(),train_dataframe['breed_category'].unique()","ce63c373":"train_dataframe.groupby(['pet_category']).count()['pet_id']*100\/train_dataframe.shape[0]","b9ae4f85":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\ntrain_dataframe['pet_category'].hist()\nplt.show()","286ace33":"train_dataframe.groupby(['breed_category']).count()['pet_id'] * 100 \/train_dataframe.shape[0]","1e3d4e5c":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\ntrain_dataframe['breed_category'].hist()\nplt.show()","55b58f59":"train_dataframe.shape[0],train_dataframe['pet_id'].apply( lambda x:x.split('_')[0] ).unique().shape,train_dataframe['pet_id'].apply( lambda x:x.split('_')[1] ).unique().shape","7a5d8b09":"train_dataframe['id'] = train_dataframe['pet_id'].apply( lambda x:int(x.split('_')[1]) )\ntrain_dataframe.corr('spearman')","4813ead7":"train_dataframe['height(cm)'].min(),train_dataframe['height(cm)'].max()","95cc3203":"for col in ['height(cm)','length(m)']:\n  for pet_category in train_dataframe['pet_category'].unique():\n    df = train_dataframe[train_dataframe.pet_category == pet_category]\n    print(col,\" \",pet_category,\" \",df[col].min(),\" \",df[col].max())","c28b1215":"train_dataframe_height = train_dataframe[train_dataframe.pet_category == 0]","acda4a48":"train_dataframe_height.shape","e5f28492":"# train_dataframe_height['height(cm)'].hist()\nimport matplotlib.pyplot as plt\nplt.scatter(train_dataframe_height['height(cm)'],train_dataframe_height['height(cm)'])","41bfedb7":"train_dataframe_height['length(m)'].hist()","a31c2c64":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.violinplot(x='pet_category',y='height(cm)', data=train_dataframe,hue='pet_category')\\\n    .set(yticks=np.arange(5,50,1),title='Box plot for height(cm)')\nplt.show()","d4a8ba96":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.violinplot(x='breed_category',y='height(cm)', data=train_dataframe,hue='breed_category')\\\n    .set(yticks=np.arange(5,50,1),title='Box plot for height(cm)')\nplt.show()","0f285c47":"train_dataframe['length(m)'].min(),train_dataframe['length(m)'].max()","c3b165e9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.violinplot(x='pet_category',y='length(m)', data=train_dataframe,hue='pet_category')\\\n    .set(title='Box plot for length(m)')\nplt.show()\n# yticks=np.arange(5,50,1),","e7a2b88a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.violinplot(x='breed_category',y='length(m)', data=train_dataframe,hue='breed_category')\\\n    .set(title='Box plot for length(m)')\nplt.show()","32da187b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X1', data=train_dataframe,hue='pet_category')\\\n    .set(title='Count plot for X1')\nplt.show()","77c52228":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X2', data=train_dataframe,hue='pet_category')\\\n    .set(title='Count plot for X2')\nplt.show()","31fcbaaa":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X1', data=train_dataframe,hue='breed_category')\\\n    .set(title='Count plot for X1')\nplt.show()","77d94b60":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X2', data=train_dataframe,hue='breed_category')\\\n    .set(title='Count plot for X2')\nplt.show()","c91165e6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X1', data=train_dataframe,hue='pet_category')\\\n    .set(title='Count plot for X1')\nplt.show()","005bc61b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(20, 10))\nsns.countplot(x='X2', data=train_dataframe,hue='pet_category')\\\n    .set(title='Count plot for X2')\nplt.show()","2b4bf7b4":"import matplotlib.pyplot as plt\n\ncondition_feature = train_dataframe['condition'].apply(str)\n\nplt.scatter(condition_feature,y_breed_category)\nplt.xlabel('condition')\nplt.ylabel('breed')\nplt.show()","bd0cad1e":"train_dataframe['condition'] = train_dataframe['condition'].apply(lambda x: 3.0 if np.isnan(x) else x )","6d0d7c36":"test_dataframe['condition'] = test_dataframe['condition'].apply(lambda x: 3.0 if np.isnan(x) else x )","1268a50b":"for col in X_train_breed.columns:\n  print(col,any(X_train_breed[col].isna()))\n  print(col,any(X_train_breed[col].isnull()))","ecc029a8":"import matplotlib.pyplot as plt\n\ncondition_feature = train_dataframe['condition'].apply(str)\nplt.scatter(condition_feature,y_pet_category)\nplt.xlabel('condition')\nplt.ylabel('pet')\nplt.show()","e2bec7c7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(40, 10))\nsns.countplot(x='color_type', data=train_dataframe,hue='pet_category')\\\n    .set(title='Count plot for color type')\nplt.show()","6a705705":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nplt.figure(figsize=(40, 10))\nsns.countplot(x='color_type', data=train_dataframe,hue='breed_category')\\\n    .set(title='Count plot for X1')\nplt.show()","ceb3fc33":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"pet_category\", size=8,palette=\"Set1\") \\\n   .map(plt.scatter, \"height(cm)\", \"length(m)\") \\\n   .set(title='height(cm) vs length(m)')\\\n   .add_legend();\nplt.show();","0c7abb99":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"breed_category\", size=8,palette=\"Set1\") \\\n   .map(plt.scatter, \"height(cm)\", \"length(m)\") \\\n   .set(title='height(cm) vs length(m)')\\\n   .add_legend();\nplt.show();","42e61b5d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"pet_category\", size=8,palette=\"Set1\") \\\n   .map(plt.scatter, \"condition\", \"color_type\") \\\n   .set(title='condition vs color_type')\\\n   .add_legend();\nplt.show();","e7f936fd":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"breed_category\", size=8,palette=\"Set1\") \\\n   .map(plt.scatter, \"condition\", \"color_type\") \\\n   .set(title='condition vs color_type')\\\n   .add_legend();\nplt.show();","203f3aa0":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"pet_category\", size=8,palette=['red','black','yellow','blue']) \\\n   .map(plt.scatter, \"X1\", \"X2\") \\\n   .set(title='X1 vs X2')\\\n   .add_legend();\nplt.show();","54fdc667":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(train_dataframe,hue=\"breed_category\", size=8,palette=['red','black','yellow']) \\\n   .map(plt.scatter, \"X1\", \"X2\") \\\n   .set(title='X1 vs X2')\\\n   .add_legend();\nplt.show();","6a5a6a7a":"import pandas as pd\n\ntrain_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train.csv')\ntrain_dataframe_fe.head()","079bc607":"import pandas as pd\n\ntest_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test.csv')\ntest_dataframe_fe.head()","eadd9de2":"y_train_breed = train_dataframe_fe['breed_category'].values\ny_train_pet = train_dataframe_fe['pet_category'].values\n# train_dataframe = train_dataframe.drop(columns=['breed_category','pet_category'])","16be5434":"train_dataframe_fe['X1'].unique(),train_dataframe_fe['X2'].unique()","03bc2d66":"import pandas as pd\n\ntrain_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train_fe.csv')\ntrain_dataframe_fe.head()","80932527":"train_dataframe['id'] = train_dataframe['pet_id'].apply(lambda x: int(x.split('_')[1]))","ad3f3c1c":"train_dataframe_fe['id'] = train_dataframe['id']","79be8049":"test_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test_fe.csv')","2e9626bc":"test_dataframe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test.csv')","956c235e":"test_dataframe_fe['id'] = test_dataframe['pet_id'].apply(lambda x: int(x.split('_')[1]))","d3429183":"train_dataframe_fe['color_type_1'] = train_dataframe_fe['color_type'].apply(lambda x:x.split()[0])\ntrain_dataframe_fe['color_type_2'] = train_dataframe_fe['color_type'].apply(lambda x: 'None' if len(x.split()) < 2 else x.split()[1] )","192a0681":"test_dataframe_fe['color_type_1'] = test_dataframe_fe['color_type'].apply(lambda x:x.split()[0])\ntest_dataframe_fe['color_type_2'] = test_dataframe_fe['color_type'].apply(lambda x: 'None' if len(x.split()) < 2 else x.split()[1] )","d4234bb4":"length_height_ratio = []\n\nfor i in range(train_dataframe_fe.shape[0]):\n  length = train_dataframe_fe['length(m)'][i]\n  height = train_dataframe_fe['height(cm)'][i] \/ 100\n  length_height_ratio.append(length\/height)\n\nlength_height_mul = []\n\nfor i in range(train_dataframe_fe.shape[0]):\n  length = train_dataframe_fe['length(m)'][i]\n  height = train_dataframe_fe['height(cm)'][i] \/ 100\n  length_height_mul.append(length*height)","7bb06443":"train_dataframe_fe['length_height_ratio'] = length_height_ratio\ntrain_dataframe_fe['length_height_mul'] = length_height_mul","b2fd3e95":"length_height_ratio = []\n\nfor i in range(test_dataframe_fe.shape[0]):\n  length = test_dataframe_fe['length(m)'][i]\n  height = test_dataframe_fe['height(cm)'][i] \/ 100\n  length_height_ratio.append(length\/height)\n\nlength_height_mul = []\n\nfor i in range(test_dataframe_fe.shape[0]):\n  length = test_dataframe_fe['length(m)'][i]\n  height = test_dataframe_fe['height(cm)'][i] \/ 100\n  length_height_mul.append(length*height)","c517a394":"test_dataframe_fe['length_height_ratio'] = length_height_ratio\ntest_dataframe_fe['length_height_mul'] = length_height_mul","6ee3e15a":"import numpy as np\n\ntrain_dataframe_fe['condition'] = train_dataframe_fe['condition'].apply(lambda x: 3 if np.isnan(x) else int(x))\ntrain_dataframe_fe = train_dataframe_fe.drop(columns = ['pet_id'])","f37617e7":"train_dataframe_fe['condition'].isna()","cd47ff0f":"train_dataframe_fe['condition'].unique()","fb40812f":"test_dataframe_fe['condition'] = test_dataframe_fe['condition'].apply(lambda x: 3 if np.isnan(x) else int(x))\ntest_dataframe_fe = test_dataframe_fe.drop(columns = ['pet_id'])","8e71cdf6":"# split date into year month and date \n\nissue_months = []\nissue_days = []\nissue_years = []\nfor i in range(train_dataframe_fe['issue_date'].shape[0]):\n  issue_date = train_dataframe_fe['issue_date'][i]\n  issue_month = int(issue_date.split()[0].split('-')[1])\n  issue_months.append(issue_month)\n\n  issue_day = int(issue_date.split()[0].split('-')[2])\n  issue_days.append(issue_day)\n\n  issue_year = int(issue_date.split()[0].split('-')[0])\n  issue_years.append(issue_year)\n","883d1615":"train_dataframe_fe['issue_year'] = issue_years\ntrain_dataframe_fe['issue_day'] = issue_days\ntrain_dataframe_fe['issue_month'] = issue_months","d25b4b16":"listing_months = []\nlisting_days = []\nlisting_years = []\nfor i in range(train_dataframe_fe['listing_date'].shape[0]):\n  listing_date = train_dataframe_fe['listing_date'][i]\n  listing_month = int(listing_date.split()[0].split('-')[1])\n  listing_months.append(listing_month)\n\n  listing_day = int(listing_date.split()[0].split('-')[2])\n  listing_days.append(listing_day)\n\n  listing_year = int(listing_date.split()[0].split('-')[0])\n  listing_years.append(listing_year)","6979fe55":"train_dataframe_fe['listing_year'] = listing_years\ntrain_dataframe_fe['listing_day'] = listing_days\ntrain_dataframe_fe['listing_month'] = listing_months","8e3b1494":"listing_months = []\nlisting_days = []\nlisting_years = []\nfor i in range(test_dataframe_fe['listing_date'].shape[0]):\n  listing_date = test_dataframe_fe['listing_date'][i]\n  listing_month = int(listing_date.split()[0].split('-')[1])\n  listing_months.append(listing_month)\n\n  listing_day = int(listing_date.split()[0].split('-')[2])\n  listing_days.append(listing_day)\n\n  listing_year = int(listing_date.split()[0].split('-')[0])\n  listing_years.append(listing_year)\n\nissue_months = []\nissue_days = []\nissue_years = []\nfor i in range(test_dataframe_fe['issue_date'].shape[0]):\n  issue_date = test_dataframe_fe['issue_date'][i]\n  issue_month = int(issue_date.split()[0].split('-')[1])\n  issue_months.append(issue_month)\n\n  issue_day = int(issue_date.split()[0].split('-')[2])\n  issue_days.append(issue_day)\n\n  issue_year = int(issue_date.split()[0].split('-')[0])\n  issue_years.append(issue_year)\n\ntest_dataframe_fe['listing_year'] = listing_years\ntest_dataframe_fe['listing_day'] = listing_days\ntest_dataframe_fe['listing_month'] = listing_months\n\ntest_dataframe_fe['issue_year'] = issue_years\ntest_dataframe_fe['issue_day'] = issue_days\ntest_dataframe_fe['issue_month'] = issue_months","273066b0":"#diff between dates\nfrom datetime import datetime\n\nissue_listing_day_diff = []\nissue_listing_seconds_diff = []\n\nfor i in range(train_dataframe_fe.shape[0]):\n  listing_date = datetime.strptime(train_dataframe_fe['listing_date'][i],'%Y-%m-%d %H:%M:%S')\n  issue_date   = datetime.strptime(train_dataframe_fe['issue_date'][i],'%Y-%m-%d %H:%M:%S')\n  diff_dates = listing_date - issue_date\n  issue_listing_day_diff.append(diff_dates.days)\n  issue_listing_seconds_diff.append(diff_dates.seconds)\n  \ntrain_dataframe_fe['issue_listing_day_diff'] = issue_listing_day_diff\ntrain_dataframe_fe['issue_listing_seconds_diff'] = issue_listing_seconds_diff","7aa98ea1":"from datetime import datetime\n\nissue_listing_day_diff = []\nissue_listing_seconds_diff = []\n\nfor i in range(test_dataframe_fe.shape[0]):\n  listing_date = datetime.strptime(test_dataframe_fe['listing_date'][i],'%Y-%m-%d %H:%M:%S')\n  issue_date   = datetime.strptime(test_dataframe_fe['issue_date'][i],'%Y-%m-%d %H:%M:%S')\n  diff_dates = listing_date - issue_date\n  issue_listing_day_diff.append(diff_dates.days)\n  issue_listing_seconds_diff.append(diff_dates.seconds)\n  \ntest_dataframe_fe['issue_listing_day_diff'] = issue_listing_day_diff\ntest_dataframe_fe['issue_listing_seconds_diff'] = issue_listing_seconds_diff","1afbc260":"from datetime import datetime\n#day of week\ntrain_dataframe_fe['issue_day_of_the_week'] = train_dataframe_fe['issue_date'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d %H:%M:%S').weekday() )\ntest_dataframe_fe['issue_day_of_the_week']  = test_dataframe_fe['issue_date'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d %H:%M:%S').weekday() )\n\ntrain_dataframe_fe['listing_day_of_the_week'] = train_dataframe_fe['listing_date'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d %H:%M:%S').weekday() )\ntest_dataframe_fe['listing_day_of_the_week']  = test_dataframe_fe['listing_date'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d %H:%M:%S').weekday() )","c7ad0cee":"train_dataframe_fe =  train_dataframe_fe.drop(columns=['issue_season_number','issue_season_number'])\ntest_dataframe_fe =  train_dataframe_fe.drop(columns=['issue_season_number','issue_season_number'])","701f4325":"#quarter of year \n#0,1,2\n#month\/\/3\n\ntrain_dataframe_fe['issue_quarter'] = train_dataframe_fe['issue_date'].apply(lambda x: (int(x.split()[0].split('-')[1])-1)\/\/3 )\ntest_dataframe_fe['issue_quarter'] = test_dataframe_fe['issue_date'].apply(lambda x: (int(x.split()[0].split('-')[1])-1)\/\/3 )\n\ntrain_dataframe_fe['listing_quarter'] = train_dataframe_fe['listing_date'].apply(lambda x: (int(x.split()[0].split('-')[1])-1)\/\/3 )\ntest_dataframe_fe['listing_quarter'] = test_dataframe_fe['listing_date'].apply(lambda x: (int(x.split()[0].split('-')[1])-1)\/\/3 )","2dbd1077":"#hour of the day\ntrain_dataframe_fe['listing_hour_of_the_day'] = train_dataframe_fe['listing_date'].apply(lambda x: int(x.split()[1].split(':')[0]))\ntest_dataframe_fe['listing_hour_of_the_day']  = test_dataframe_fe['listing_date'].apply(lambda x: int(x.split()[1].split(':')[0]))","2010b9f5":"train_dataframe_fe = train_dataframe_fe.drop(columns=['week_of_month'])","4f49f061":"#week of month\ntrain_dataframe_fe['listing_week_of_month'] = train_dataframe_fe['listing_day'].apply(lambda x: int(x)\/\/7)\ntest_dataframe_fe['listing_week_of_month']  = test_dataframe_fe['listing_day'].apply(lambda x: int(x)\/\/7)\n\ntrain_dataframe_fe['issue_week_of_month'] = train_dataframe_fe['issue_day'].apply(lambda x: int(x)\/\/7)\ntest_dataframe_fe['issue_week_of_month']  = test_dataframe_fe['issue_day'].apply(lambda x: int(x)\/\/7)","0bfbee53":"train_dataframe_fe['X1_X2'] = train_dataframe_fe['X1'].apply(str)+\" \"+train_dataframe_fe['X2'].apply(str)\ntest_dataframe_fe['X1_X2'] = test_dataframe_fe['X1'].apply(str)+\" \"+test_dataframe_fe['X2'].apply(str)","b5a80fde":"train_dataframe_fe['X1_X2'].unique().shape,test_dataframe_fe['X1_X2'].unique().shape","b0e669e6":"train_dataframe_fe['X1_freq'] = train_dataframe_fe['X1'].map(train_dataframe_fe.groupby(['X1']).count()['color_type'].to_dict())\ntrain_dataframe_fe['X2_freq'] = train_dataframe_fe['X2'].map(train_dataframe_fe.groupby(['X2']).count()['color_type'].to_dict())","d846a079":"test_dataframe_fe['X1_freq'] = test_dataframe_fe['X1'].map(test_dataframe_fe.groupby(['X1']).count()['color_type'].to_dict())\ntest_dataframe_fe['X2_freq'] = test_dataframe_fe['X2'].map(test_dataframe_fe.groupby(['X2']).count()['color_type'].to_dict())","d897d19b":"import matplotlib.pyplot as plt\n\nplt.scatter(train_dataframe_fe['X1_freq'],train_dataframe_fe['breed_category'])","67696410":"#condition and color type \ntrain_dataframe_fe['color_type_1_condition'] = train_dataframe_fe['color_type_1'] + \" \" +train_dataframe['condition'].apply(str)\ntrain_dataframe_fe['color_type_2_condition'] = train_dataframe_fe['color_type_2'] + \" \" +train_dataframe['condition'].apply(str)","4e5cc6b6":"test_dataframe_fe['color_type_1_condition'] = test_dataframe_fe['color_type_1'] + \" \" +test_dataframe['condition'].apply(str)\ntest_dataframe_fe['color_type_2_condition'] = test_dataframe_fe['color_type_2'] + \" \" +test_dataframe['condition'].apply(str)","ca5ecef1":"train_dataframe_fe['color_type_2_condition'].unique(),, test_dataframe_fe['color_type_2_condition'].unique()","514d8ecc":"#color type and x1 and x2\ntrain_dataframe_fe['color_type_1_X1'] = train_dataframe_fe['color_type_1'] + \" \" +train_dataframe_fe['X1'].apply(str)\ntrain_dataframe_fe['color_type_2_X1'] = train_dataframe_fe['color_type_2'] + \" \" +train_dataframe_fe['X1'].apply(str)\n\ntrain_dataframe_fe['color_type_1_X2'] = train_dataframe_fe['color_type_1'] + \" \" +train_dataframe_fe['X2'].apply(str)\ntrain_dataframe_fe['color_type_2_X2'] = train_dataframe_fe['color_type_2'] + \" \" +train_dataframe_fe['X2'].apply(str)","392d4ba3":"test_dataframe_fe['color_type_1_X1'] = test_dataframe_fe['color_type_1'] + \" \" +test_dataframe_fe['X1'].apply(str)\ntest_dataframe_fe['color_type_2_X1'] = test_dataframe_fe['color_type_2'] + \" \" +test_dataframe_fe['X1'].apply(str)\n\ntest_dataframe_fe['color_type_1_X2'] = test_dataframe_fe['color_type_1'] + \" \" +test_dataframe_fe['X2'].apply(str)\ntest_dataframe_fe['color_type_2_X2'] = test_dataframe_fe['color_type_2'] + \" \" +test_dataframe_fe['X2'].apply(str)","1dba7266":"# condition and X1,X2\ntrain_dataframe_fe['condition_X1'] = train_dataframe_fe['condition'].apply(str) + \" \" +train_dataframe_fe['X1'].apply(str)\ntrain_dataframe_fe['condition_X2'] = train_dataframe_fe['condition'].apply(str) + \" \" +train_dataframe_fe['X2'].apply(str)","cff85117":"test_dataframe_fe['condition_X1'] = test_dataframe_fe['condition'].apply(str) + \" \" +test_dataframe_fe['X1'].apply(str)\ntest_dataframe_fe['condition_X2'] = test_dataframe_fe['condition'].apply(str) + \" \" +test_dataframe_fe['X2'].apply(str)","c781ddf0":"#color type x1\/x2 condition\ntrain_dataframe_fe['color_type_1_X1_condition'] = train_dataframe_fe['color_type_1_X1'] +\" \"+train_dataframe_fe['condition'].apply(str)\ntest_dataframe_fe['color_type_1_X1_condition']  = test_dataframe_fe['color_type_1_X1'] +\" \"+test_dataframe_fe['condition'].apply(str)\n\ntrain_dataframe_fe['color_type_2_X1_condition'] = train_dataframe_fe['color_type_2_X1'] +\" \"+train_dataframe_fe['condition'].apply(str)\ntest_dataframe_fe['color_type_2_X1_condition']  = test_dataframe_fe['color_type_2_X1'] +\" \"+test_dataframe_fe['condition'].apply(str)\n\n\ntrain_dataframe_fe['color_type_1_X2_condition'] = train_dataframe_fe['color_type_1_X2'] +\" \"+train_dataframe_fe['condition'].apply(str)\ntest_dataframe_fe['color_type_1_X2_condition']  = test_dataframe_fe['color_type_1_X2'] +\" \"+test_dataframe_fe['condition'].apply(str)\n\ntrain_dataframe_fe['color_type_2_X2_condition'] = train_dataframe_fe['color_type_2_X2'] +\" \"+train_dataframe_fe['condition'].apply(str)\ntest_dataframe_fe['color_type_2_X2_condition']  = test_dataframe_fe['color_type_2_X2'] +\" \"+test_dataframe_fe['condition'].apply(str)","d49ed1a5":"train_dataframe_fe['color_type_X1'] = train_dataframe_fe['color_type']+\" \"+train_dataframe_fe['X1'].apply(str)\ntrain_dataframe_fe['color_type_X2'] = train_dataframe_fe['color_type']+\" \"+train_dataframe_fe['X2'].apply(str)\n\ntest_dataframe_fe['color_type_X1'] = test_dataframe_fe['color_type']+\" \"+test_dataframe_fe['X1'].apply(str)\ntest_dataframe_fe['color_type_X2'] = test_dataframe_fe['color_type']+\" \"+test_dataframe_fe['X2'].apply(str)","8f53ac37":"train_dataframe_fe.head()","25d9adb7":"train_dataframe_fe.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train_fe.csv',index = None)","43ffcd58":"test_dataframe_fe.head()","1e051929":"test_dataframe_fe.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test_fe.csv',index=None)","8ca30708":"import pandas as pd\n\ntrain_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train_fe.csv')\ntrain_dataframe_fe.head()","3e108022":"import pandas as pd\n\ntest_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test_fe.csv')\ntest_dataframe_fe.head()","6426e02f":"y_train_breed = train_dataframe_fe['breed_category'].values\ny_train_pet   = train_dataframe_fe['pet_category'].values","4ababb7c":"X_train = train_dataframe_fe.drop(columns=['breed_category','id','pet_category','issue_date','listing_date'])\nX_test  = test_dataframe_fe.drop(columns=['id','issue_date','listing_date'])","f831263f":"X_train.columns","caa45f6a":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\nX_train_encoded = enc.fit_transform(X_train[['condition', 'color_type', 'X1', 'X2',\n                                            'color_type_1', 'color_type_2', \n                                            'issue_year', 'issue_day', 'issue_month',\n                                            'listing_year', 'listing_day', 'listing_month', 'X1_X2',\n                                            'issue_day_of_the_week', 'listing_day_of_the_week',\n                                            'color_type_1_condition', 'color_type_2_condition', 'color_type_1_X1',\n                                            'color_type_2_X1', 'color_type_1_X2', 'color_type_2_X2', 'condition_X1',\n                                            'condition_X2',\n                                            'color_type_1_X1_condition', 'color_type_2_X1_condition',\n                                            'color_type_1_X2_condition', 'color_type_2_X2_condition',\n                                            'listing_hour_of_the_day', 'color_type_X1', 'color_type_X2']].values)\n\nX_test_encoded = enc.transform(X_test[['condition', 'color_type', 'X1', 'X2',\n                                            'color_type_1', 'color_type_2', \n                                            'issue_year', 'issue_day', 'issue_month',\n                                            'listing_year', 'listing_day', 'listing_month', 'X1_X2',\n                                            'issue_day_of_the_week', 'listing_day_of_the_week',\n                                            'color_type_1_condition', 'color_type_2_condition', 'color_type_1_X1',\n                                            'color_type_2_X1', 'color_type_1_X2', 'color_type_2_X2', 'condition_X1',\n                                            'condition_X2',\n                                            'color_type_1_X1_condition', 'color_type_2_X1_condition',\n                                            'color_type_1_X2_condition', 'color_type_2_X2_condition',\n                                            'listing_hour_of_the_day', 'color_type_X1', 'color_type_X2']].values)","81e42bfd":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train_numeric = scaler.fit_transform(X_train[['length(m)', 'height(cm)',\n                                                'length_height_ratio','length_height_mul',\n                                                 'issue_listing_day_diff', 'issue_listing_seconds_diff']].values)\n\nX_test_numeric = scaler.transform(X_test[['length(m)', 'height(cm)',\n                                           'length_height_ratio','length_height_mul',\n                                           'issue_listing_day_diff', 'issue_listing_seconds_diff']].values)","e7189e70":"import numpy as np\nX_train_final = np.hstack((X_train_encoded.toarray(),X_train_numeric))\nX_test_final  = np.hstack((X_test_encoded.toarray(),X_test_numeric))","20c838a4":"# import numpy as np\n\n# np.save('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_final.npy',X_train_final)\n# np.save('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_final.npy',X_test_final)","8bf36842":"import numpy as np\n\nX_train_final = np.load('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_final.npy')\nX_test_final  = np.load('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_final.npy')","0449f198":"categorical_columns = [ 'condition', 'color_type', 'X1', 'X2',\n                        'color_type_1', 'color_type_2', \n                        'issue_year', 'issue_day', 'issue_month',\n                        'listing_year', 'listing_day', 'listing_month', 'X1_X2',\n                        'issue_day_of_the_week', 'listing_day_of_the_week',\n                        'color_type_1_condition', 'color_type_2_condition', 'color_type_1_X1',\n                        'color_type_2_X1', 'color_type_1_X2', 'color_type_2_X2', 'condition_X1',\n                        'condition_X2', 'issue_season_number', 'listing_season_number',\n                        'color_type_1_X1_condition', 'color_type_2_X1_condition',\n                        'color_type_1_X2_condition', 'color_type_2_X2_condition',\n                        'listing_hour_of_the_day', 'color_type_X1', 'color_type_X2']","291f5e33":"X_train['breed_category'] = y_train_breed\nX_train_breed_mean_encoded = X_train.copy()\nX_test_breed_mean_encoded = X_test.copy()\nfor column in categorical_columns:\n  mean_encoded_object = X_train.groupby([column])['breed_category'].mean().to_dict() \n  X_train_breed_mean_encoded[column] =  X_train_breed_mean_encoded[column].map(mean_encoded_object) \n  X_test_breed_mean_encoded[column]  =  X_test_breed_mean_encoded[column].map(mean_encoded_object)\nX_train_breed_mean_encoded.head()","f64731f3":"X_train_breed_mean_encoded = X_train_breed_mean_encoded.drop(columns=['breed_category'])","fa53f869":"X_train_breed_mean_encoded.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_breed_mean_encoded.csv',index=None)","1ab5df4b":"X_test_breed_mean_encoded.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_breed_mean_encoded.csv',index=None)","300a7b6f":"X_test_breed_mean_encoded.head()","e970dd13":"X_train['pet_category'] = y_train_pet\nX_train_pet_mean_encoded = X_train.copy()\nX_train_pet_mean_encoded = X_train_pet_mean_encoded.drop(columns=['breed_category'])\nX_test_pet_mean_encoded = X_test.copy()\n\nfor column in categorical_columns:\n  mean_encoded_object = X_train.groupby([column])['pet_category'].mean().to_dict() \n  X_train_pet_mean_encoded[column] =  X_train_pet_mean_encoded[column].map(mean_encoded_object) \n  X_test_pet_mean_encoded[column]  =  X_test_pet_mean_encoded[column].map(mean_encoded_object)\n\nX_train_pet_mean_encoded.head()","9518ad46":"X_train_pet_mean_encoded = X_train_pet_mean_encoded.drop(columns=['breed_category','pet_category'])","b8ce3583":"X_train_pet_mean_encoded.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_pet_mean_encoded.csv',index=None)","f449630b":"import pandas as pd\nX_train_pet_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_pet_mean_encoded.csv')\nX_train_pet_mean_encoded.head()","c9196706":"X_test_pet_mean_encoded.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_pet_mean_encoded.csv',index=None)","8c391867":"!pip install  pycaret","36ec83bd":"import pandas as pd\n\ntrain_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train_fe.csv')\ntrain_dataframe_fe.head()","6a0d2c72":"import pandas as pd\n\ntest_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test_fe.csv')\ntest_dataframe_fe.head()","1d54f0cb":"train_dataframe_fe_pet = train_dataframe_fe.drop(columns=['breed_category','id'])","7da8f023":"y_train_pet = train_dataframe_fe['pet_category']","9fb1e0c2":"X_train_pet_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_pet_mean_encoded.csv')\nX_train_pet_mean_encoded['pet_category'] = y_train_pet","5e827e3b":"X_train_pet_mean_encoded.columns","ecdbb600":"from pycaret.classification import *\nexp_mclf101 = setup(data = train_dataframe_fe_pet,\n                    train_size = 0.9997, ordinal_features = ordinal_dict,\n                    normalize=False,normalize_method='minmax',transformation = False,fix_imbalance = False,\n                    polynomial_features=False,trigonometry_features=False,feature_selection = False,\n                    target = 'pet_category', session_id=123,remove_outliers = False,polynomial_degree = 2)\n\n\n# exp_mclf101 = setup(data = X_train_pet_mean_encoded[['condition', 'color_type', 'length(m)', 'height(cm)', 'X1', 'X2',\n#                                                       'color_type_1', 'color_type_2', 'length_height_ratio',\n#                                                       'length_height_mul', 'issue_year', 'issue_day', 'issue_month',\n#                                                       'listing_year', 'listing_day', 'listing_month', 'X1_X2',\n#                                                       'issue_day_of_the_week', 'listing_day_of_the_week',\n#                                                       'issue_listing_day_diff', 'issue_listing_seconds_diff','listing_hour_of_the_day', 'pet_category']],\n#                     train_size = 0.9997,\n#                     normalize=False,normalize_method='zscore',transformation = False,fix_imbalance = False,\n#                     polynomial_features=True,trigonometry_features=True,feature_selection = True,\n#                     target = 'pet_category', session_id=123,remove_outliers = True,polynomial_degree = 2)","56c25740":"import six\nimport sys\nsys.modules['sklearn.externals.six'] = six\ncompare_models(turbo=False,fold = 10,blacklist=['gpc','rbfsvm','nb','knn','qda','mlp','lda','dt','ada'],sort='F1')","4e18877e":"import six\nimport sys\nsys.modules['sklearn.externals.six'] = six\netc = create_model('lightgbm',fold=10)","036af308":"X_test_pet_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_pet_mean_encoded.csv')","0e56de40":"predicted_df = predict_model(data=test_dataframe_fe,estimator = etc)","3cb213fe":"y_test_pet_pred = predicted_df['Label'].values","be853f3f":"import pandas as pd\n\ntrain_dataframe_fe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/train_fe.csv')\ntrain_dataframe_fe.head()","43c1d81b":"train_dataframe_fe_breed = train_dataframe_fe.drop(columns=['pet_category','id'])","d123784f":"X_train_breed_mean_encoded.columns","9edaac80":"import pandas as pd\nX_train_breed_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_breed_mean_encoded.csv')\nX_train_breed_mean_encoded['breed_category'] = y_train_breed","0c283485":"from pycaret.classification import *\n# exp_mclf101 = setup(data = X_train_breed_mean_encoded[['condition', 'color_type', 'length(m)', 'height(cm)', 'X1', 'X2',\n#                                                       'color_type_1', 'color_type_2', 'length_height_ratio',\n#                                                       'length_height_mul', 'issue_year', 'issue_day', 'issue_month',\n#                                                       'listing_year', 'listing_day', 'listing_month', 'X1_X2',\n#                                                       'issue_day_of_the_week', 'listing_day_of_the_week',\n#                                                       'issue_listing_day_diff', 'issue_listing_seconds_diff','listing_hour_of_the_day', 'breed_category']],\n#                     train_size = 0.999,\n#                     normalize=True,normalize_method='zscore',transformation = False, fix_imbalance = False,\n#                     polynomial_features=False,trigonometry_features=False,feature_selection = False,\n#                     target = 'breed_category', session_id=123,remove_outliers = False,polynomial_degree = 2)\n\nfrom pycaret.classification import *\nexp_mclf101 = setup(data = train_dataframe_fe_breed[['condition','color_type',\n                                                     'X1','X2','breed_category',\n                                                     'issue_day_of_the_week', 'listing_day_of_the_week',\n                                                     'listing_year', 'listing_day', 'listing_month', \n                                                     'issue_year', 'issue_day', 'issue_month',\n                                                     'issue_listing_day_diff', 'issue_listing_seconds_diff','listing_hour_of_the_day',]],train_size = 0.9998,\n                    normalize=False,normalize_method='robust',transformation = False,\n                    polynomial_features=False,trigonometry_features=False,\n                    feature_selection = False,\n                    fix_imbalance = False, fix_imbalance_method = None,\n                    target = 'breed_category', session_id=123,remove_outliers = False,polynomial_degree = 2)","64ab9b20":"import six\nimport sys\nsys.modules['sklearn.externals.six'] = six\ncompare_models(turbo=False,fold = 10,blacklist=['gpc','rbfsvm','knn','qda','mlp','lda','nb','dt','ada'],sort='F1')","b3f1358b":"etc = create_model('lr',fold=10)","37d262a7":"X_test_breed_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_breed_mean_encoded.csv')","0bdc89f2":"breed_pred_df = predict_model(data = X_test_breed_mean_encoded ,estimator = etc)","d6b7f28f":"y_test_breed_pred = breed_pred_df['Label'].values","99e59d8e":"import pandas as pd\nX_train_pet_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_train_pet_mean_encoded.csv').values","82b294fd":"import pandas as pd\nX_test_pet_mean_encoded = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/X_test_pet_mean_encoded.csv').values","cec45ff5":"from sklearn.model_selection import train_test_split\nX_train_breed, X_val_breed, y_train_breed, y_val_breed = train_test_split(X_train_pet_mean_encoded, y_train_breed,\n                                                                          stratify=y_train_breed, \n                                                                          test_size=0.1)","35f5a867":"X_train_breed.shape,X_val_breed.shape","7e7b3eb6":"import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding,Dropout,Concatenate,Input,Dense,Flatten,LSTM\nfrom tensorflow.keras.models import Model\n\ntf.keras.backend.clear_session()\nkernal_initializer = tf.keras.initializers.he_uniform(seed = 13)\nbiasInitializer = tf.keras.initializers.RandomNormal(0,1)\n   \n\ninput_features = Input(shape=(38,), dtype='float32',name='input_features')\n\n\ndense_1_output = Dense(units = 1024,activation='relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(input_features)    \ndense_1_output = Dropout(0.5)(dense_1_output)    \n\ndense_2_output = Dense(units = 512,activation='relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(dense_1_output)    \ndense_2_output = Dropout(0.5)(dense_2_output)   \n\ndense_3_output = Dense(units = 256,activation = 'relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(dense_2_output)\n\noutput = Dense(units = 3,activation = 'softmax',name='output',bias_initializer=biasInitializer)(dense_3_output)\n\nmodel_breed = Model(inputs = [input_features],outputs = output)","2485c29e":"model_breed.summary()","422801d2":"from sklearn.metrics import f1_score\nimport tensorflow as tf\n# labels=None, pos_label=1, average='binary', sample_weight=None, zero_division='warn'\n# def f1_score_weighted(y_true,y_pred):\n#   return tf.py_function(f1_score,[y_true,y_pred,None,1,'weighted',None,'warn'],Tout=tf.float32)\n# f1_score_weighted\nmodel_breed.compile(loss=['categorical_crossentropy'],\n                optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), \n                metrics = ['accuracy',])","c20f5c88":"X_train_breed = X_train_breed.astype(float)","35e31a45":"import numpy as np\nnp.unique(y_train_breed)","643c9fdf":"import datetime\nimport numpy as np\n# !rm -rf \/content\/logs\/\n# log_dir=\"logs\/fit\/\" +'model_1'+datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_breed.h5', \n                                                      monitor='val_accuracy', verbose=1, save_best_only=True,\n                                                      save_weights_only=True, mode='auto', save_freq='epoch')\n# tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1, write_graph=True)\n\nmodel_breed.fit(X_train_breed, tf.keras.utils.to_categorical(y_train_breed),\n                validation_data = (X_val_breed,tf.keras.utils.to_categorical(y_val_breed)),\n                batch_size = 1024,\n                epochs = 50,\n                verbose = True,\n                callbacks = [model_checkpoint],\n                shuffle = True)","8bef7b80":"model_breed.load_weights('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_breed.h5')\ny_breed_pred = model_breed.predict(X_train_breed)\ny_breed_pred = np.argmax(y_breed_pred,axis = -1)\nf1_score(y_train_breed,y_breed_pred,average='weighted')","9862dc4b":"model_breed.load_weights('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_breed.h5')\ny_breed_pred = model_breed.predict(X_val_breed)\ny_breed_pred = np.argmax(y_breed_pred,axis = -1)\nf1_score(y_val_breed,y_breed_pred,average='weighted')","53928889":"y_test_breed_pred = model_breed.predict(X_test_final)\ny_test_breed_pred = np.argmax(y_test_breed_pred,axis = -1)","30ef9c3d":"from sklearn.model_selection import train_test_split\nX_train_pet, X_val_pet, y_train_pet, y_val_pet = train_test_split(X_train_final, y_train_pet,\n                                                                  stratify=y_train_pet, \n                                                                  test_size=0.1)","4aea9802":"X_train_pet.shape,X_val_pet.shape","06dd6861":"np.unique(y_train_pet)","f1810960":"import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding,Dropout,Concatenate,Input,Dense,Flatten,LSTM\nfrom tensorflow.keras.models import Model\n\ntf.keras.backend.clear_session()\nkernal_initializer = tf.keras.initializers.he_uniform(seed = 13)\nbiasInitializer = tf.keras.initializers.RandomNormal(0,1)\n\ninput_features = Input(shape=(2999,), dtype='float32',name='input_features')\n\n\ndense_1_output = Dense(units = 1024,activation='relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(input_features)    \ndense_1_output = Dropout(0.5)(dense_1_output)    \n\ndense_2_output = Dense(units = 512,activation='relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(dense_1_output)    \ndense_2_output = Dropout(0.5)(dense_2_output)   \n\ndense_3_output = Dense(units = 256,activation = 'relu',kernel_initializer=kernal_initializer,bias_initializer=biasInitializer)(dense_2_output)\n\noutput = Dense(units = 4,activation = 'softmax',name='output',bias_initializer=biasInitializer)(dense_3_output)\n\nmodel_pet = Model(inputs = [input_features],outputs = output)","67c9ca10":"model_pet.summary()","4d720573":"from sklearn.metrics import f1_score\nimport tensorflow as tf\n\nmodel_pet.compile(loss=['categorical_crossentropy'],\n                  optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), \n                  metrics = ['accuracy',])","fab672df":"X_train_pet = X_train_pet.astype(float)","e91fd7b1":"np.unique(y_train_pet),np.unique(y_val_pet)","f212b9d8":"\nfor i in range(y_train_pet.shape[0]):\n  if y_train_pet[i] == 4:\n    y_train_pet[i] = 3\n\nfor i in range(y_val_pet.shape[0]):\n  if y_val_pet[i] == 4:\n    y_val_pet[i] = 3","dc92aa65":"np.unique(y_train_pet),np.unique(y_val_pet)","1483c941":"import datetime\nimport numpy as np\n\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_pet.h5', \n                                                      monitor='val_accuracy', verbose=1, save_best_only=True,\n                                                      save_weights_only=True, mode='auto', save_freq='epoch')\n\nmodel_pet.fit(X_train_pet, tf.keras.utils.to_categorical(y_train_pet),\n                validation_data = (X_val_pet,tf.keras.utils.to_categorical(y_val_pet)),\n                batch_size = 1024,\n                epochs = 300,\n                verbose = True,\n                callbacks = [model_checkpoint],\n                shuffle = True)","f1bc3f79":"model_pet.load_weights('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_pet.h5')\ny_pet_pred = model_pet.predict(X_train_pet)\ny_pet_pred = np.argmax(y_pet_pred,axis = -1)\nf1_score(y_train_pet,y_pet_pred,average='weighted')","10e83316":"model_pet.load_weights('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/model_pet.h5')\ny_pet_pred = model_pet.predict(X_val_pet)\ny_pet_pred = np.argmax(y_pet_pred,axis = -1)\nf1_score(y_val_pet,y_pet_pred,average='weighted')","bcf53fff":"# y_test_breed_pred = model_breed.predict(X_test_final)\n# y_test_breed_pred = np.argmax(y_test_breed_pred,axis = -1)","147864b8":"y_test_pet_pred = model_pet.predict(X_test_final)\ny_test_pet_pred = np.argmax(y_test_pet_pred,axis = -1)\n# f1_score(y_pet_category,y_pet_pred,average='weighted')","d796213d":"for i in range(y_test_pet_pred.shape[0]):\n  if y_test_pet_pred[i] == 3:\n    y_test_pet_pred[i] = 4","4fd324b9":"test_dataframe = pd.read_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/Dataset\/test.csv')\ntest_dataframe.head()","800ce5e2":"y_test_breed_pred = y_test_breed_pred.astype(int)","ca0fd8a7":"import pandas as pd\nfinal_pred = pd.DataFrame(data = list(zip(test_dataframe['pet_id'].values,y_test_breed_pred,y_test_pet_pred)),columns=['pet_id','breed_category','pet_category'])\nfinal_pred.head()","43bd1dff":"final_pred.to_csv('\/content\/drive\/My Drive\/ML_challenges\/hackerearth_adopt_a_buddy\/pred_version_24.csv',index = None)","b3561b18":"## **PET**","9e8c08e6":"### **HEIGHT,LENGTH**","0ba7ab34":"**NAN values of condition feature are mapped to all pet categories**","67768d48":"## **ONE HOT ENCODING**","e9fb0ec4":"## **BREED**","7c9e8a16":"**Significant variation of color type for the various classes of pet and breed can be observed.**","2403dbf3":"### **PET_ID**","31f153ba":"## **MEAN ENCODING**","d01357ce":"### **PET**","4135afe4":"### **COLOR TYPE**","a3d6fadf":"## **BIVARIATE ANALYSIS**","49326ebc":"### **X1,X2**","fe065f72":"### **ISSUE DATE, LISTING DATE**","2a4270cb":"## **UNIVARIATE ANALYSIS**","9b0f7a89":"**X1 and X2 vary significantly across various classes of pet and breed.**","e988dfe1":"# **PREDICTION**","ff229ad9":"**All NAN values are mapping to breed category 2, so a new category 3 can be created for condition feature.**","371707ce":"# **FEATURE ENCODING**","ce08dab3":"# HackerEarth Machine Learning challenge: Adopt a buddy\nRank: 50 ( Top 1 % out of 5,000+ participants )\n\nLeaderboard: https:\/\/www.hackerearth.com\/challenges\/competitive\/hackerearth-machine-learning-challenge-pet-adoption\/leaderboard\/pet-adoption-9-5838c75b\/\n\nImportant steps performed in the challenge\n1. Exploratory Data Analysis (EDA)\n2. Feature Engineering \n3. Feature Encoding (OneHotEncoding, Mean Encoding)\n4. Handling Imbalance (SMOTE)\n5. Pycaret ( Comparing various models quickly )\n6. Keras ANN","fa37a6ec":"# **PyCaret**","ec0f9c5c":"**Height and Length do no vary significantly across each of the classes of pet and breed.**","1152a1e0":"# **DATA OVERVIEW**","449bbaaf":"### **BREED**","84515896":"### **CONDITION**","92c5b236":"# **EDA**","8382ab26":"# **KERAS**","8ede5da8":"**Color type and condition together can help in distinguishing the classes**","d43d7c17":"### **COLOR_TYPE**","d6908153":"**Class imbalance is present for both the pet and breed category.**","a9ce4695":"### **COMBINATION OF EXISTING FEATURES**","f591c0b0":"### **X1,X2**","c82043d5":"### **CONDITION**","5db9a8fe":"**Height and weight together are not able to distingush the classes.**","5a66490f":"### **FINAL DATAFRAME**","dd8d533a":"### **HEIGHT LENGTH**","1ccad27d":"# **FEATURE ENGINEERING**"}}