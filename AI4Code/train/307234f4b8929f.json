{"cell_type":{"7cf689f1":"code","5328fcc9":"code","670fe5c4":"code","e90f9401":"code","95aea1a3":"code","925f4fb8":"code","d2f75365":"code","5aafb9c8":"code","cbb66df7":"code","79744c88":"code","3d837ecf":"code","bbde9b30":"code","6e59c463":"code","b6fb889d":"code","413b2179":"code","4ea38714":"code","1eeb7e2e":"markdown","053dcefe":"markdown","e28e27ce":"markdown","e2ec9828":"markdown","98254177":"markdown"},"source":{"7cf689f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualisation and plotting\nimport matplotlib.pyplot as plt # data plotting\nimport warnings\n\n# Seaborn default configuration\nsns.set_style(\"darkgrid\")\n\n# set the custom size for my graphs\nsns.set(rc={'figure.figsize':(8.7,6.27)})\n\n# filter all warnings\nwarnings.filterwarnings('ignore') \n\n# set max column to 999 for displaying in pandas\npd.options.display.max_columns=999 \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","5328fcc9":"data = pd.read_csv('..\/input\/Iris.csv')","670fe5c4":"data.head()","e90f9401":"data.info()","95aea1a3":"data.describe()","925f4fb8":"data['Species'].value_counts()","d2f75365":"rows, col = data.shape\nprint(\"Rows : %s, column : %s\" % (rows, col))","5aafb9c8":"snsdata = data.drop(['Id'], axis=1)\ng = sns.pairplot(snsdata, hue='Species', markers='x')\ng = g.map_upper(plt.scatter)\ng = g.map_lower(sns.kdeplot)","cbb66df7":"sns.violinplot(x='SepalLengthCm', y='Species', data=data, inner='stick', palette='autumn')\nplt.show()\nsns.violinplot(x='SepalWidthCm', y='Species', data=data, inner='stick', palette='autumn')\nplt.show()\nsns.violinplot(x='PetalLengthCm', y='Species', data=data, inner='stick', palette='autumn')\nplt.show()\nsns.violinplot(x='PetalWidthCm', y='Species', data=data, inner='stick', palette='autumn')\nplt.show()","79744c88":"mapping = {\n    'Iris-setosa' : 1,\n    'Iris-versicolor' : 2,\n    'Iris-virginica' : 3\n}\n\nX = data.drop(['Id', 'Species'], axis=1).values # Input Feature Values\ny = data.Species.replace(mapping).values.reshape(rows,1) # Output values\n\nX = np.hstack(((np.ones((rows,1))), X))# Adding one more column for bias","3d837ecf":"np.random.seed(0) # Let's set the zero for time being\ntheta = np.random.randn(1,5) # Setting values of theta randomly\n\nprint(\"Theta : %s\" % (theta))","bbde9b30":"iteration = 10000\nlearning_rate = 0.003 # If you are going by formula, this is actually alpha.\nJ = np.zeros(iteration) # 1 x 10000 maxtix","6e59c463":"# Let's train our model to compute values of theta\nfor i in range(iteration):\n    J[i] = (1\/(2 * rows) * np.sum((np.dot(X, theta.T) - y) ** 2 ))\n    theta -= ((learning_rate\/rows) * np.dot((np.dot(X, theta.T) - y).reshape(1,rows), X))\n\nprediction = np.round(np.dot(X, theta.T))\n\nax = plt.subplot(111)\nax.plot(np.arange(iteration), J)\nax.set_ylim([0,0.15])\nplt.ylabel(\"Cost Values\", color=\"Green\")\nplt.xlabel(\"No. of Iterations\", color=\"Green\")\nplt.title(\"Mean Squared Error vs Iterations\")\nplt.show()","b6fb889d":"ax = sns.lineplot(x=np.arange(iteration), y=J)\nplt.show()","413b2179":"ax = plt.subplot(111)\n\nax.plot(np.arange(1, 151, 1), y, label='Orignal value', color='red')\nax.scatter(np.arange(1, 151, 1), prediction, label='Predicted Value')\n\nplt.xlabel(\"Dataset size\", color=\"Green\")\nplt.ylabel(\"Iris Flower (1-3)\", color=\"Green\")\nplt.title(\"Iris Flower (Iris-setosa = 1, Iris-versicolor = 2, Iris-virginica = 3)\")\n\nax.legend()\nplt.show()","4ea38714":"accuracy = (sum(prediction == y)\/float(len(y)) * 100)[0]\nprint(\"The model predicted values of Iris dataset with an overall accuracy of %s\" % (accuracy))","1eeb7e2e":"### Load Data","053dcefe":"### A simple implemention of Linear Regression on Iris Dataset (w\/o sicfy libraries)","e28e27ce":"## **Multivariate Linear Regression Model**","e2ec9828":"## **Preview of Dataset**","98254177":"## **Data Visualization**"}}