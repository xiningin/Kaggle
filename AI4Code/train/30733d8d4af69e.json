{"cell_type":{"34796c19":"code","a78099bd":"code","e2ebd617":"code","0c2d2474":"code","b7005bdb":"code","862a43e3":"code","883e0e32":"code","a557e0ea":"code","585e3b94":"code","f565d9bd":"code","45c30414":"code","0ffc029a":"code","7ea63812":"code","4fbf8584":"code","91c6aaa4":"code","5c123e98":"code","3f277d00":"code","caf78458":"code","89d9ac65":"code","796f4d06":"code","07119105":"code","806774a8":"code","a3348f35":"code","299ca9d5":"code","8b167596":"code","2331ef81":"code","6090b3d4":"code","d5aac58d":"code","adf9ed76":"code","2f02a68d":"code","1fb26e6b":"code","cff43b38":"code","3753783e":"code","84db94c9":"code","ba3d1c72":"code","232f9616":"code","59e8f795":"code","20b77026":"code","cf1f74f0":"code","05668164":"code","dffbdfb2":"code","ad8ac0d6":"code","8bb8b7c2":"markdown"},"source":{"34796c19":"# essentials\nimport pandas as pd\nimport numpy as np\n\n# models and training\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.cluster import AgglomerativeClustering\n\n# visualization\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom scipy.cluster.hierarchy import dendrogram\nimport plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n# metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import f1_score\n","a78099bd":"labels = pd.read_csv(\"..\/input\/dataset10\/labels.csv\")\nmelMFCC = pd.read_csv(\"..\/input\/dataset10\/melMFCC (3).csv\")\ncwt = pd.read_csv(\"..\/input\/dataset10\/cwt (1).csv\")\nspectrum = pd.read_csv(\"..\/input\/dataset10\/spectrum (3).csv\")\nzcrossRMS = pd.read_csv(\"..\/input\/dataset10\/zcrossRMS.csv\")\ndata = pd.concat([melMFCC, cwt, spectrum, zcrossRMS], axis=1)","e2ebd617":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy=\"mean\")\nimputer.fit(data)\ndata[:] = imputer.transform(data)","0c2d2474":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(data)\ndataset =  scaler.transform(data)","b7005bdb":"from sklearn.decomposition import PCA\npca_2d = PCA(n_components=2)","862a43e3":"model = AgglomerativeClustering(n_clusters=5, linkage=\"ward\")\ny_pred = model.fit_predict(data)\ndata[\"Cluster\"] = y_pred","883e0e32":"pd.DataFrame(y_pred)[:270].value_counts()\n# 1 == 4(3)","a557e0ea":"pd.DataFrame(y_pred)[270:550].value_counts()\n# 2 == 2(1)","585e3b94":"pd.DataFrame(y_pred)[550:838].value_counts()\n# 3 == 1(0)","f565d9bd":"pd.DataFrame(y_pred)[838:1113].value_counts()\n# 4 == 5(4)","45c30414":"pd.DataFrame(y_pred)[1113:].value_counts()\n# 5 == 3(2)","0ffc029a":"y_new = np.copy(y_pred)\ny_new[y_pred == 3] = 1\ny_new[y_pred == 1] = 2\ny_new[y_pred == 0] = 3\ny_new[y_pred == 4] = 4\ny_new[y_pred == 2] = 5","7ea63812":"from matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\ndf_cm = confusion_matrix(labels, y_new)\nfig, ax = plt.subplots(figsize = (10,8))\n\n\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 14},cmap=\"YlGnBu\", fmt='g');\nax.set_title(\"Confusion Matrix\")\nax.xaxis.set_ticklabels(['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']);\nax.yaxis.set_ticklabels(['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']);","4fbf8584":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy of K-Means\")\nprint(\"Accuracy: \", accuracy_score(labels, y_new))\nfrom sklearn.metrics import classification_report\nprint(classification_report(labels, y_new,  target_names= ['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']) )","91c6aaa4":"plotX = data","5c123e98":"from sklearn.decomposition import PCA\npca_2d = PCA(n_components=2)\n\nPCs_2d = pd.DataFrame(pca_2d.fit_transform(plotX.drop([\"Cluster\"], axis=1)))\nPCs_2d.columns = [\"PC1_2d\", \"PC2_2d\"]\n\nplotX[\"dummy\"] = 0\n\ncluster0 = plotX[plotX[\"Cluster\"] == 0]\ncluster1 = plotX[plotX[\"Cluster\"] == 1]\ncluster2 = plotX[plotX[\"Cluster\"] == 2]\ncluster3 = plotX[plotX[\"Cluster\"] == 3]\ncluster4 = plotX[plotX[\"Cluster\"] == 4]","3f277d00":"pca_2d = PCA(n_components=2)","caf78458":"PCs_2d = pd.DataFrame(pca_2d.fit_transform(plotX.drop([\"Cluster\"], axis=1)))","89d9ac65":"PCs_2d.columns = [\"PC1_2d\", \"PC2_2d\"]","796f4d06":"plotX = pd.concat([plotX,PCs_2d], axis=1, join='inner')","07119105":"plotX[\"dummy\"] = 0","806774a8":"cluster0 = plotX[plotX[\"Cluster\"] == 0]\ncluster1 = plotX[plotX[\"Cluster\"] == 1]\ncluster2 = plotX[plotX[\"Cluster\"] == 2]\ncluster3 = plotX[plotX[\"Cluster\"] == 3]\ncluster4 = plotX[plotX[\"Cluster\"] == 4]","a3348f35":"init_notebook_mode(connected=True)","299ca9d5":"trace1 = go.Scatter(\n                    x = cluster0[\"PC1_2d\"],\n                    y = cluster0[\"PC2_2d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 0\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text = None)\n\n#trace2 is for 'Cluster 1'\ntrace2 = go.Scatter(\n                    x = cluster1[\"PC1_2d\"],\n                    y = cluster1[\"PC2_2d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 1\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = None)\n\n#trace3 is for 'Cluster 2'\ntrace3 = go.Scatter(\n                    x = cluster2[\"PC1_2d\"],\n                    y = cluster2[\"PC2_2d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 2\",\n                    marker = dict(color = 'rgba(128, 128, 128, 0.8)'),\n                    text = None)\n\ntrace4 = go.Scatter(\n                    x = cluster3[\"PC1_2d\"],\n                    y = cluster3[\"PC2_2d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 3\",\n                    marker = dict(color = 'rgba(0, 255, 255, 0.8)'),\n                    text = None)\n\ntrace5 = go.Scatter(\n                    x = cluster4[\"PC1_2d\"],\n                    y = cluster4[\"PC2_2d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 4\",\n                    marker = dict(color = 'rgba(145, 30, 180, 0.4)'),\n                    text = None)\n\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = \"Visualizing Clusters in Two Dimensions Using PCA\"\n\nlayout = dict(title = title,\n              xaxis= dict(title= 'PC1',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'PC2',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","8b167596":"pca_3d = PCA(n_components=3)","2331ef81":"PCs_3d = pd.DataFrame(pca_3d.fit_transform(plotX.drop([\"Cluster\"], axis=1)))","6090b3d4":"PCs_3d.columns = [\"PC1_3d\", \"PC2_3d\", \"PC3_3d\"]","d5aac58d":"plotX = pd.concat([plotX, PCs_3d], axis=1, join='inner')","adf9ed76":"plotX[\"dummy\"] = 0","2f02a68d":"cluster0 = plotX[plotX[\"Cluster\"] == 0]\ncluster1 = plotX[plotX[\"Cluster\"] == 1]\ncluster2 = plotX[plotX[\"Cluster\"] == 2]\ncluster3 = plotX[plotX[\"Cluster\"] == 3]\ncluster4 = plotX[plotX[\"Cluster\"] == 4]","1fb26e6b":"#Instructions for building the 3-D plot\n\n#trace1 is for 'Cluster 0'\ntrace1 = go.Scatter3d(\n                    x = cluster0[\"PC1_3d\"],\n                    y = cluster0[\"PC2_3d\"],\n                    z = cluster0[\"PC3_3d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 0\",\n                    marker = dict(color = 'rgba(128, 128, 0, 0.8)'),\n                    text = None)\n\n#trace2 is for 'Cluster 1'\ntrace2 = go.Scatter3d(\n                    x = cluster1[\"PC1_3d\"],\n                    y = cluster1[\"PC2_3d\"],\n                    z = cluster1[\"PC3_3d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 1\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = None)\n\n#trace3 is for 'Cluster 2'\ntrace3 = go.Scatter3d(\n                    x = cluster2[\"PC1_3d\"],\n                    y = cluster2[\"PC2_3d\"],\n                    z = cluster2[\"PC3_3d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 2\",\n                    marker = dict(color = 'rgba(128, 128, 128, 0.8)'),\n                    text = None)\n\ntrace4 = go.Scatter3d(\n                    x = cluster3[\"PC1_3d\"],\n                    y = cluster3[\"PC2_3d\"],\n                    z = cluster3[\"PC3_3d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 3\",\n                    marker = dict(color = 'rgba(0, 255, 255, 0.8)'),\n                    text = None)\n\ntrace5 = go.Scatter3d(\n                    x = cluster4[\"PC1_3d\"],\n                    y = cluster4[\"PC2_3d\"],\n                    z = cluster4[\"PC3_3d\"],\n                    mode = \"markers\",\n                    name = \"Cluster 4\",\n                    marker = dict(color = 'rgba(145, 30, 180, 0.4)'),\n                    text = None)\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = \"Visualizing Clusters in Three Dimensions Using PCA\"\n\nlayout = dict(title = title,\n              xaxis= dict(title= 'PC1',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'PC2',ticklen= 5,zeroline= False)\n             )\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","cff43b38":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=5).fit(dataset)\ny_pred = kmeans.predict(dataset)","3753783e":"pd.DataFrame(y_pred)[:270].value_counts()\n# 1 = 2 == 1","84db94c9":"pd.DataFrame(y_pred)[270:550].value_counts()\n# 2 = 3 == 2","ba3d1c72":"pd.DataFrame(y_pred)[550:838].value_counts()\n# 4 = 5 == 3","232f9616":"pd.DataFrame(y_pred)[838:1113].value_counts()\n# 3 = 4 == 4","59e8f795":"pd.DataFrame(y_pred)[1113:].value_counts()\n# 0 = 1 == 5","20b77026":"pd.DataFrame(y_pred)[270:550].value_counts()\npd.DataFrame(y_pred)[550:838].value_counts()\npd.DataFrame(y_pred)[838:1113].value_counts()\npd.DataFrame(y_pred)[1113:].value_counts()","cf1f74f0":"y_new = np.copy(y_pred)\ny_new[y_pred == 1] = 1\ny_new[y_pred == 2] = 2\ny_new[y_pred == 4] = 3\ny_new[y_pred == 3] = 4\ny_new[y_pred == 0] = 5","05668164":"y_new = y_new.reshape(y_new.shape[0], 1)\nnp.sum(y_new == labels) \/ len(labels)","dffbdfb2":"from matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\ndf_cm = confusion_matrix(labels, y_new)\nfig, ax = plt.subplots(figsize = (10,8))\n\n\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 14},cmap=\"YlGnBu\", fmt='g');\nax.set_title(\"Confusion Matrix\")\nax.xaxis.set_ticklabels(['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']);\nax.yaxis.set_ticklabels(['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']);","ad8ac0d6":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy of K-Means\")\nprint(\"Accuracy: \", accuracy_score(labels, y_new))\nfrom sklearn.metrics import classification_report\nprint(classification_report(labels, y_new,  target_names= ['Lori', 'Kordi', 'Torki', 'Bandari', 'Gilaki']) )","8bb8b7c2":"it looks like neyman pearson criterion: almost all the data has been clustered in 3 clusters and the clustering algorithm is trying to minimize 1 specefic error type. it seems like lori and kordi are very similar to other classes of the data and the clustering algorithm does not spot a difference."}}