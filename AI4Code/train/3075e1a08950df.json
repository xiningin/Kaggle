{"cell_type":{"5f586418":"code","23d17b9f":"code","7f3300a9":"code","d4704c9a":"code","9c61716e":"code","f2e8c964":"code","b69af526":"code","3de780f2":"code","82edeb82":"code","365d7ef4":"code","636c1dca":"code","43150307":"code","42330a59":"code","2eab7fe8":"code","7c3f5aa6":"code","a40407ab":"code","926745c4":"code","b9ad55a9":"code","91a6709c":"code","742466f0":"markdown","13aa483e":"markdown"},"source":{"5f586418":"import pandas as pd\nimport numpy as np\n\nimport fastai\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\n\nfrom tqdm import tqdm\n\nfrom fastai.vision.all import *\nfrom fastai.callback.all import *\nimport torchvision.models as torch_models\n\nimport os\nimport sys\n","23d17b9f":"fastai.__version__","7f3300a9":"DEBUG = False\n\nif DEBUG:\n    N_SPLITS = 3\n    EPOCHS = 3\nelse:\n    N_SPLITS = 7\n    EPOCHS = 10\nSEEDS = [2021]","d4704c9a":"# load and shuffle\ntest = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')\n\ntrain = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\n\nif DEBUG:\n    train = train.head(500)\n","9c61716e":"train.head()","f2e8c964":"train['fold_crit'] = 0\ntrain['fold_crit'] = pd.qcut(train.Pawpularity, q=14, labels=False)\n\ntrain.fold_crit.hist()","b69af526":"target = 'Pawpularity'\nfold_crit = 'fold_crit'\nfeatures = list(set(train.columns)-set(['Id','Pawpularity','fold_crit']+[target]+['kfold_'+str(s) for s in SEEDS]))","3de780f2":"for seed in SEEDS:\n    # apply abhisheks splitting technique\n    skf = StratifiedKFold(n_splits = N_SPLITS, random_state = seed, shuffle = True)\n\n    train['kfold_'+str(seed)] = -1\n\n    for f, (train_idx, valid_idx) in enumerate(skf.split(X = train[features+[target]], y = train[fold_crit].values)):\n\n        train.loc[valid_idx,'kfold_'+str(seed)] = f\n\ntrain.groupby(f'kfold_{SEEDS[0]}')[target].count()","82edeb82":"train['image_id'] = 'train\/' + train['Id'] + '.jpg'\ntest['image_id'] = 'test\/' + test['Id'] + '.jpg'\ntrain.head()","365d7ef4":"train.Pawpularity=train.Pawpularity.astype('float')\ntrain.info()","636c1dca":"train.Pawpularity.hist(bins=20)","43150307":"def run_fold(fold = 4, seed = SEEDS[0], verbose = True):\n    print(f'Run with validation set = fold no. {fold}')\n    \n    # mark validation set\n    train['is_demo_valid'] = False\n    train.loc[train[f'kfold_{seed}'] == fold, 'is_demo_valid'] = True\n\n    # define fastai dataloader\n    dls = ImageDataLoaders.from_df(df =  train[['image_id', 'Pawpularity', 'is_demo_valid']], \n                                   path = '.', \n                                   folder = '..\/input\/petfinder-pawpularity-score', \n                                   valid_col = 'is_demo_valid',\n                                   y_block=RegressionBlock,\n                                   item_tfms=CropPad(512), \n                                   batch_tfms=aug_transforms(size=224), \n                                   bs = 16)\n    \n    if verbose:\n        dls.show_batch()\n        \n    learn = cnn_learner(dls, \n                        torch_models.resnext101_32x8d, \n                        metrics=[rmse],\n                        y_range= (torch.Tensor([1,100]))\n                       )\n    \n    if DEBUG:\n        # mixed precision training\n        learn = learn.to_fp16()\n    \n    if verbose:\n        learn.lr_find()\n     \n    learn.fine_tune(EPOCHS, 1e-3, cbs=[MixUp(.4), CutMix()]) #\n    oof_preds,_ = learn.get_preds()\n    \n    train.loc[train[train[f'kfold_{seed}']==fold].index,'oof'] = oof_preds\n    print(f\"rmse real: {mean_squared_error(train[train[f'kfold_{seed}']==fold]['Pawpularity'], train[train[f'kfold_{seed}']==fold]['oof'], squared = False):0.5f}\")\n    \n    if verbose:\n        learn.show_results()\n        \n    learn.export(f'export_fold_{fold}.pkl')\n    \n        \n    return learn","42330a59":"#learn = run_fold(verbose=False)","2eab7fe8":"for f in range(N_SPLITS):\n    learn = run_fold(f, seed = SEEDS[0], verbose = False)","7c3f5aa6":"\nprint(f\"rmse: {mean_squared_error(train['Pawpularity'], train['oof'], squared = False):0.5f}\")","a40407ab":"train.to_csv('train_plus.csv',index=False)","926745c4":"train[['oof','Pawpularity']].plot.scatter('oof','Pawpularity')","b9ad55a9":"train[['oof','Pawpularity']].hist()","91a6709c":"train.head()","742466f0":"Turn DEBUG off (`FALSE`) for the full run.","13aa483e":"# PetFinder2021 simple Fastai Train\n\nThis is a simple Fastai Training Notebook. The models are trained on images only.\n\nThe Inference notebook can be found [here](https:\/\/www.kaggle.com\/joatom\/petfinder2021-simple-fastai-inference\/).\n\nRelated Discussion [here](https:\/\/www.kaggle.com\/c\/petfinder-pawpularity-score\/discussion\/294822#1617055)."}}