{"cell_type":{"6614eccf":"code","5ff7474c":"code","5d0f5099":"code","b23fa6b5":"code","ed0fb4aa":"code","d4f0344e":"code","47919fbd":"code","3cf4fa42":"code","50daee26":"code","41bd336f":"code","23002d69":"code","2634e9d3":"code","3b562d45":"code","0c831957":"code","a49c451e":"code","dd2f1e88":"code","31515305":"code","055e9ac5":"code","92d9ba89":"markdown","a1691303":"markdown","46db9766":"markdown"},"source":{"6614eccf":"import numpy as np\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode()","5ff7474c":"trace1 = go.Scatter3d(\n    x=[0,0,2,2],\n    y=[0,1,0,1],\n    z=[0,0,0,0],\n    mode='markers',\n    marker=dict(\n        size=8,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\nu, v = np.mgrid[0:2:5j, 0:1:5j]\nw = 0*u*v\ntrace2 = go.Surface(\n    x=u,\n    y=v,\n    z=w,\n        opacity=0.8\n    )\n\nX, Y = np.mgrid[0:2:20j, 0:1:20j]\nZ = np.sqrt((36 * X**2 * (4 - X**2)))\ntrace3 = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n        opacity=0.8\n    )\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    yaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","5d0f5099":"from sympy import *\nfrom sympy import init_printing\ninit_printing()","b23fa6b5":"x, y = symbols('x y')\nf = sqrt((36 * x**2 * (4-x**2)))\nf","ed0fb4aa":"integral = integrate(f, (x, 0, 2), (y, 0, 1))\nintegral","d4f0344e":"N(integral)","47919fbd":"trace1 = go.Scatter3d(\n    x=[0,1,2],\n    y=[2,1,2],\n    z=[0,0,0],\n    surfaceaxis=2,\n    mode='markers',\n    marker=dict(\n        size=8,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\nX, Y = np.mgrid[0:2:20j, 1:2:20j]\nZ = X*Y\ntrace3 = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n        opacity=0.8\n    )\n\n\ndata = [trace1, trace3]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-1,3],),\n                    yaxis = dict(\n                        nticks=4, range = [0,3],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","3cf4fa42":"trace1 = go.Scatter3d(\n    x=[-1,1],\n    y=[-1,1],\n    z=[0, 0],\n    surfaceaxis=2,\n    mode='markers',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\nu = np.linspace(-2,2,20)\nv = u**2\nw = 0*u*v\ntrace2 = go.Scatter3d(\n    x=v,\n    y=u,\n    z=w,\n    mode='lines',\n    line=dict(color='blue', width=5)\n    )\n\nu = np.linspace(-2,2,20)\nv = -u\nw = 0*u*v\ntrace3 = go.Scatter3d(\n    x=v,\n    y=u,\n    z=w,\n    mode='lines',\n    line=dict(color='blue', width=5)\n    )\n\nu = np.linspace(-2,2,20)\nv = np.ones(len(u))\nw = 0*u*v\ntrace4 = go.Scatter3d(\n    x=u,\n    y=v,\n    z=w,\n    mode='lines',\n    line=dict(color='blue', width=5)\n    )\n\nX, Y = np.mgrid[-1:1:20j, 0:1:20j]\nZ = Y*(X+2)\nsurface = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n        opacity=0.8\n    )\n\n\ndata = [trace1, trace2, trace3, trace4, surface]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-2,2],),\n                    yaxis = dict(\n                        nticks=4, range = [0,2],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","50daee26":"from sympy import *\nfrom sympy.integrals import Integral\nfrom sympy import init_printing\ninit_printing()\n\nx, y = symbols('x y')\nf = y*(x+2)\n\nintegral_f = Integral(f,(x,-y,y**2), (y, 0, 1))\ndisplay(Eq(integral_f, integral_f.doit()))","41bd336f":"f = y*(x+2)\n\nintegral_f = Integral(f,(x,-y,y**2))\ndisplay(Eq(integral_f, integral_f.doit()))","23002d69":"from sympy import *\nfrom sympy.integrals import Integral\nfrom sympy import init_printing\ninit_printing()\n\nx, y = symbols('x y')\n\nf = E**(-y**2 \/ 2)\n\nintegral_f = Integral(f, (y, x, 2),(x,0,2))\ndisplay(Eq(integral_f, integral_f.doit()))","2634e9d3":"f = E**(-y**2 \/ 2)\n\nintegral_f = Integral(f, (x, 0, y),(y,0,2))\ndisplay(Eq(integral_f, integral_f.doit()))","3b562d45":"f = E**(-y**2 \/ 2)\n\nintegral_f = Integral(f, (y, x, 2),(x,0,2))\ndisplay(Eq(integral_f, integral_f.doit()))","0c831957":"from sympy import *\nfrom sympy.integrals import Integral\nfrom sympy import init_printing\ninit_printing()\n\nx, y = symbols('x y')\nf = 1 \/ log(y)\n\nintegral_f = Integral(f,(x,0,2*log(y)), (y, 1, 4))\ndisplay(Eq(integral_f, integral_f.doit()))","a49c451e":"# 5.2.42 Visualization\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode()\n\nimport numpy as np\n\ntrace1 = go.Scatter3d(\n    x=[0,0,1,1],\n    y=[0,1,0,1],\n    z=[0,0,0,0],\n    mode='markers',\n    marker=dict(\n        size=8,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\nu, v = np.mgrid[0:1:5j, 0:1:5j]\nw = 0*u*v\ntrace2 = go.Surface(\n    x=u,\n    y=v,\n    z=w,\n        opacity=0.8\n    )\n\nX, Y = np.mgrid[0:1:20j, 0:1:20j]\nZ = 2*X + 3*Y + 6\nsurface1 = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n        opacity=0.8\n    )\n\nX, Y = np.mgrid[0:1:20j, 0:1:20j]\nZ = 2*X + 7*Y + 8\nsurface2 = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n    colorscale='Viridis',\n        opacity=0.8\n    )\n\n\ndata = [trace1, trace2, surface1, surface2]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    yaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","dd2f1e88":"import plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode()\n\nimport numpy as np\n\nX, Y = np.mgrid[0:2:20j, 0:2:20j]\nZ = 1-X-Y\nsurface = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n        opacity=0.8\n    )\n\n\ndata = [surface]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [0,1],),\n                    yaxis = dict(\n                        nticks=4, range = [0,1],),\n                    zaxis = dict(\n                        nticks=4, range = [0,1],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","31515305":"from sympy import *\nfrom sympy.integrals import Integral\nfrom sympy import init_printing\nimport numpy as np\ninit_printing()\n\nx, y = symbols('x y')\nf = 1-x-y\n\n# Find I_y:\nintegral_f = Integral(y*f,(y,0,1-x), (x, 0, 1))\ndisplay(Eq(integral_f, integral_f.doit()))\n\n# Find I_y:\nintegral_f = Integral(x*f,(y,0,1-x), (x, 0, 1))\ndisplay(Eq(integral_f, integral_f.doit()))\n\nf = ((1\/2)*(1-x-y)**2).expand()\ndisplay(f)\n\n# find M if density = z\nintegral_f = Integral(f,(y,0,1-x), (x, 0, 1))\ndisplay(Eq(integral_f, integral_f.doit()))\n\n# find z-bar if desnity = z\nf = ((1\/3)*(1-x-y)**3).expand()\ndisplay(f)\nintegral_f = Integral(f,(y,0,1-x), (x, 0, 1))\ndisplay(Eq(integral_f, integral_f.doit()))","055e9ac5":"import plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode()\n\nimport numpy as np\n\nX, Y = np.mgrid[-3:3:60j, -3:3:60j]\nZ = X**2 + Y**2\nsurface = go.Surface(\n    x=X,\n    y=Y,\n    z=Z,\n    colorscale='Viridis',\n        opacity=0.8\n    )\n\nu = np.linspace(-2,2,20)\nv = u**2\nw = np.zeros(len(u))\ntrace1 = go.Scatter3d(\n    x=u,\n    y=w,\n    z=v,\n    mode='lines',\n    line=dict(color='blue', width=5)\n    )\n\nu = np.linspace(-2,2,20)\nv = u**2\nw = np.zeros(len(u))\ntrace2 = go.Scatter3d(\n    x=w,\n    y=u,\n    z=v,\n    mode='lines',\n    line=dict(color='red', width=5)\n    )\n\n\ndata = [trace1, trace2, surface]\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    yaxis = dict(\n                        nticks=4, range = [-3,3],),\n                    zaxis = dict(\n                        nticks=4, range = [0,2],),\n                    aspectratio=dict(x=1, y=1, z=1)\n                    ),\n                  )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","92d9ba89":"# Square Root","a1691303":"## 1.3","46db9766":"# Intergral"}}