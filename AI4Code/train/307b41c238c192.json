{"cell_type":{"141415e6":"code","a480f8f1":"code","b28264fd":"code","443bf3b5":"code","0f6fb7cb":"code","b716683c":"code","126c649f":"code","8f33c074":"code","860bac0c":"code","b9d8b4eb":"code","2af30455":"code","eb961e11":"code","15cc33f2":"code","63a70c34":"code","e2832696":"code","2ac55d76":"code","d390df29":"code","db8bc835":"code","de7670af":"code","0db878e0":"markdown","261c3477":"markdown","262b18ce":"markdown","1d2a66f4":"markdown","5431afda":"markdown","8ac3f88c":"markdown","b85a8596":"markdown","9a7ae5e4":"markdown","912b463f":"markdown","b6234e12":"markdown","f1152230":"markdown","325198ba":"markdown","20eefaa1":"markdown","883c1b97":"markdown","b77dd386":"markdown","274e2273":"markdown","21298541":"markdown","0c938464":"markdown","f3816c1f":"markdown"},"source":{"141415e6":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n","a480f8f1":"concrete_data = pd.read_csv('..\/input\/regression-with-neural-networking\/concrete_data.csv')\nconcrete_data.head()","b28264fd":"concrete_data_columns = concrete_data.columns\n\npredictors = concrete_data[concrete_data_columns[concrete_data_columns != 'Strength']] # all columns except Strength\ntarget = concrete_data['Strength'] # Strength column","443bf3b5":"#Let's save the number of predictors to n_cols since we will need this number when building our network.\nn_cols = predictors.shape[1] # number of predictors","0f6fb7cb":"# define regression model\ndef regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","b716683c":"mse = []\n\nfor i in range(50):\n    \n    #Split Data to Train and Test Set\n    X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.3)\n\n    # build the model\n    model = regression_model()\n\n    #fit the model\n    model.fit(X_train, y_train, epochs=50, verbose=0)\n\n    #predict output on test set\n    y_pred = model.predict(X_test)\n    \n    mse.append(mean_squared_error(y_test, y_pred))","126c649f":"#the mean squared errors of the 50 iterations:\nprint('number of iterations: {:.2f}'.format(len(mse)))\nmse","8f33c074":"print('mse_Mean: {:.2f}'.format(np.mean(mse)))\nprint('mse_StdDev: {:.2f}'.format(np.std(mse)))","860bac0c":"predictors_norm = (predictors - predictors.mean()) \/ predictors.std()","b9d8b4eb":"mse = []\n\nfor i in range(50):\n    \n    #Split Data to Train and Test Set\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3)\n\n    # build the model\n    model = regression_model()\n\n    #fit the model\n    model.fit(X_train, y_train, epochs=50, verbose=0)\n\n    #predict output on test set\n    y_pred = model.predict(X_test)\n    \n    mse.append(mean_squared_error(y_test, y_pred))","2af30455":"#the mean squared errors of the 50 iterations:\nprint('number of iterations: {:.2f}'.format(len(mse)))\nmse","eb961e11":"print('mse_Mean: {:.2f}'.format(np.mean(mse)))\nprint('mse_StdDev: {:.2f}'.format(np.std(mse)))","15cc33f2":"mse = []\n\nfor i in range(50):\n    \n    #Split Data to Train and Test Set\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3)\n\n    # build the model\n    model = regression_model()\n\n    #fit the model\n    model.fit(X_train, y_train, epochs=100, verbose=0)\n\n    #predict output on test set\n    y_pred = model.predict(X_test)\n    \n    mse.append(mean_squared_error(y_test, y_pred))","63a70c34":"#the mean squared errors of the 50 iterations:\nprint('number of iterations: {:.2f}'.format(len(mse)))\nmse","e2832696":"print('mse_Mean: {:.2f}'.format(np.mean(mse)))\nprint('mse_StdDev: {:.2f}'.format(np.std(mse)))","2ac55d76":"# define regression model\ndef regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","d390df29":"mse = []\n\nfor i in range(50):\n    \n    #Split Data to Train and Test Set\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3)\n\n    # build the model\n    model = regression_model()\n\n    #fit the model\n    model.fit(X_train, y_train, epochs=50, verbose=0)\n\n    #predict output on test set\n    y_pred = model.predict(X_test)\n    \n    mse.append(mean_squared_error(y_test, y_pred))","db8bc835":"#the mean squared errors of the 50 iterations:\nprint('number of iterations: {:.2f}'.format(len(mse)))\nmse","de7670af":"print('mse_Mean: {:.2f}'.format(np.mean(mse)))\nprint('mse_StdDev: {:.2f}'.format(np.std(mse)))","0db878e0":"We can see that the epochs have a huge impact on the results, the mean has changed drastically with a very low standard deviation.","261c3477":"Let's start by importing the libraries that we will need to build our regressoin model","262b18ce":"The mean and the standard deviation of the mean squared errors using 3 hidden layers.","1d2a66f4":"Next, we will train the model using the fit method. We will leave out 30% of the data for test and we will train the model for 50 epochs and repeat these steps 50 times","5431afda":"**PART C**","8ac3f88c":"The mean and the standard deviation of the mean squared errors using the normalized data.","b85a8596":"**PART A**","9a7ae5e4":"Let's download the data and read it into a pandas dataframe.","912b463f":"Report the mean and the standard deviation of the mean squared errors.","b6234e12":"We can see that normalizing the data has a huge impact on the results, we have now a low standard deviation which means that data are clustered around the mean","f1152230":"We will repeat Part B but use 100 epochs this time for training.\n\n*Network Properties:\n\n-Hidden Layer: 1\n\n-Nodes: 10\n\n-Activation Function: ReLU\n\n-Optimizer: Adam\n\n-Loss Function: Mean Squared Error\n\n-Epochs: 100","325198ba":"The mean and the standard deviation of the mean squared errors using 100 epochs.","20eefaa1":"The impact of the number of hidden layers is more impoartant than the epochs as we cann see.\n\nWith more hidden layers, the mean is reffined with a relatively very low standard deviation.","883c1b97":"We will repeat now part B but use a neural network with the following properties:\n\n-Hidden Layer: 3\n\n-Nodes: 10\n\n-Activation Function: ReLU\n\n-Optimizer: Adam\n\n-Loss Function: Mean Squared Error\n\n-Epochs: 50","b77dd386":"Let's Define the regression model\n\n*Network Properties:\n\n-Hidden Layer: 1\n\n-Nodes: 10\n\n-Activation Function: ReLU\n\n-Optimizer: Adam\n\n-Loss Function: Mean Squared Error\n\n-Epochs: 50","274e2273":"Now we will repeat Part A but use a normalized version of the data.\n\nRecall that one way to normalize the data is by subtracting the mean from the individual predictors and dividing by the standard deviation.","21298541":"**PART B**","0c938464":"The target variable in this problem is the concrete sample strength. Therefore, our predictors will be all the other columns.","f3816c1f":"**PART D**"}}