{"cell_type":{"5c2c4bad":"code","f14819b3":"code","4fa71ca5":"code","11319133":"markdown"},"source":{"5c2c4bad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pathlib import Path\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f14819b3":"comp_path = Path('\/kaggle\/input\/cat-in-the-dat\/')\n\ntrain = pd.read_csv(comp_path \/ 'train.csv', index_col='id')\ntest = pd.read_csv(comp_path \/ 'test.csv', index_col='id')\nsample_submission = pd.read_csv(comp_path \/ 'sample_submission.csv', index_col='id')","4fa71ca5":"y_train = train.pop('target')\n\n# Simple label encoding\nfor c in train.columns:\n    le = LabelEncoder()\n    # this is cheating in real life; you won't have the test data ahead of time ;-)\n    le.fit(pd.concat([train[c], test[c]])) \n    train[c] = le.transform(train[c])\n    test[c] = le.transform(test[c])\n\nclf = RandomForestClassifier(n_estimators=2000, n_jobs=-1, min_samples_leaf=2)\nclf.fit(train, y_train)\n\nsample_submission['target'] = clf.predict_proba(test)[:, 1]\nsample_submission.to_csv('rf_benchmark.csv')","11319133":"In this notebook, we're going to use a very simple approach - straight label-encoding for all columns and a Random Forest with no parameter tuning. You can start from this base and see how various encoding schemes change the score."}}