{"cell_type":{"4f25ed5e":"code","8303a51f":"code","2ff5211d":"code","2223e096":"code","45cf9a14":"code","f22db3bf":"code","eabcbfe7":"code","02f8894f":"code","adc2219f":"code","c76c2306":"code","5eac5764":"code","304c833c":"code","68a50ab1":"code","73914cea":"code","e4e79045":"code","420b8bd3":"markdown","f3e3318b":"markdown","b113a101":"markdown","bb4699f4":"markdown","1a6448ce":"markdown","43e7fc78":"markdown","0c67fb0d":"markdown","f0a1515b":"markdown","11715cad":"markdown","453fc9cf":"markdown","7503c203":"markdown"},"source":{"4f25ed5e":"EPOCHS = 0 # \u0e41\u0e01\u0e49\u0e08\u0e33\u0e19\u0e27\u0e19 Epochs \u0e17\u0e35\u0e48\u0e08\u0e30\u0e40\u0e17\u0e23\u0e19 \u0e42\u0e14\u0e22\u0e04\u0e48\u0e32\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e17\u0e35\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19 Kaggle Notebook (\u0e08\u0e33\u0e01\u0e31\u0e14\u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e44\u0e21\u0e48\u0e40\u0e01\u0e34\u0e19 9 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07) \u0e04\u0e37\u0e2d EPOCHS = 5","8303a51f":"import numpy as np\nimport pandas as pd\nimport pydicom\nimport os\nimport matplotlib.pyplot as plt\nimport collections\nfrom tqdm import tqdm_notebook as tqdm\nfrom datetime import datetime\n\nfrom math import ceil, floor, log\nimport cv2\n\nimport tensorflow as tf\nimport keras\n\nimport sys\n\n# from keras_applications.resnet import ResNet50\nfrom keras_applications.inception_v3 import InceptionV3\n\nfrom sklearn.model_selection import ShuffleSplit\n\n","2ff5211d":"!ls ..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection","2223e096":"test_images_dir = '..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection\/stage_2_test\/'\ntrain_images_dir = '..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection\/stage_2_train\/'","45cf9a14":"!ls {train_images_dir} | wc # \u0e19\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e23\u0e39\u0e1b\u0e43\u0e19 training data","f22db3bf":"def window_image(dcm, window_center, window_width):\n    \n    img = dcm.pixel_array * dcm.RescaleSlope + dcm.RescaleIntercept\n    img_min = window_center - window_width \/\/ 2\n    img_max = window_center + window_width \/\/ 2\n    img = np.clip(img, img_min, img_max)\n\n    return img\n\ndef bsb_window(dcm):\n    brain_img = window_image(dcm, 40, 80)\n    subdural_img = window_image(dcm, 80, 200)\n    soft_img = window_image(dcm, 40, 380)\n    \n    brain_img = (brain_img - 0) \/ 80\n    subdural_img = (subdural_img - (-20)) \/ 200\n    soft_img = (soft_img - (-150)) \/ 380 # soft-tissue window\n    bsb_img = np.array([brain_img, subdural_img, soft_img]).transpose(1,2,0)\n\n    return bsb_img","eabcbfe7":"def _read(path, desired_size=(256, 256)):\n    \"\"\"Will be used in DataGenerator\"\"\"\n    \n    dcm = pydicom.dcmread(path)\n    \n    try:\n        img = bsb_window(dcm)\n    except:\n        img = np.zeros(desired_size)\n    \n    \n    img = cv2.resize(img, desired_size[:2], interpolation=cv2.INTER_LINEAR)\n    \n    return img\n\n# \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e42\u0e0a\u0e27\u0e4c\u0e23\u0e39\u0e1b\u0e43\u0e19 3 windows\n# \u0e25\u0e2d\u0e07\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e44\u0e1f\u0e25\u0e4c\u0e40\u0e2b\u0e25\u0e48\u0e32\u0e19\u0e35\u0e49\u0e14\u0e39: ID_2669954a7, ID_5c8b5d701, ID_52c9913b1\n\nplt.imshow(\n    _read(train_images_dir+'ID_5c8b5d701'+'.dcm', (256, 256)), cmap=plt.cm.bone\n);\n\n# \u0e43\u0e19\u0e23\u0e39\u0e1b\u0e19\u0e35\u0e49\u0e21\u0e35\u0e1b\u0e23\u0e32\u0e01\u0e0f\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e40\u0e25\u0e37\u0e2d\u0e14\u0e04\u0e31\u0e48\u0e07\u0e43\u0e19\u0e2a\u0e21\u0e2d\u0e07 3 \u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e21\u0e2d\u0e07\u0e2d\u0e2d\u0e01\u0e44\u0e2b\u0e21\u0e04\u0e23\u0e31\u0e1a ?\n#                                     ID  Label\n# 4045566          ID_5c8b5d701_epidural      0\n# 4045567  ID_5c8b5d701_intraparenchymal      1\n# 4045568  ID_5c8b5d701_intraventricular      0\n# 4045569      ID_5c8b5d701_subarachnoid      1\n# 4045570          ID_5c8b5d701_subdural      1\n# 4045571               ID_5c8b5d701_any      1","02f8894f":"class DataGenerator(keras.utils.Sequence):\n\n    def __init__(self, list_IDs, labels=None, batch_size=1, img_size=(512, 512, 1), \n                 img_dir=train_images_dir, *args, **kwargs):\n\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_dir = img_dir\n        self.on_epoch_end()\n\n    def __len__(self):\n        return int(ceil(len(self.indices) \/ self.batch_size))\n\n    def __getitem__(self, index):\n        indices = self.indices[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indices]\n        \n        if self.labels is not None:\n            X, Y = self.__data_generation(list_IDs_temp)\n            return X, Y\n        else:\n            X = self.__data_generation(list_IDs_temp)\n            return X\n        \n    def on_epoch_end(self):\n        \n        \n        if self.labels is not None: # for training phase we undersample and shuffle\n            # keep probability of any=0 and any=1\n            keep_prob = self.labels.iloc[:, 0].map({0: 0.35, 1: 0.5})\n            keep = (keep_prob > np.random.rand(len(keep_prob)))\n            self.indices = np.arange(len(self.list_IDs))[keep]\n            np.random.shuffle(self.indices)\n        else:\n            self.indices = np.arange(len(self.list_IDs))\n\n    def __data_generation(self, list_IDs_temp):\n        X = np.empty((self.batch_size, *self.img_size))\n        \n        if self.labels is not None: # training phase\n            Y = np.empty((self.batch_size, 6), dtype=np.float32)\n        \n            for i, ID in enumerate(list_IDs_temp):\n                X[i,] = _read(self.img_dir+ID+\".dcm\", self.img_size)\n                Y[i,] = self.labels.loc[ID].values\n        \n            return X, Y\n        \n        else: # test phase\n            for i, ID in enumerate(list_IDs_temp):\n                X[i,] = _read(self.img_dir+ID+\".dcm\", self.img_size)\n            \n            return X","adc2219f":"from keras import backend as K\n\ndef weighted_log_loss(y_true, y_pred):\n    \"\"\"\n    Can be used as the loss function in model.compile()\n    ---------------------------------------------------\n    \"\"\"\n    \n    class_weights = np.array([2., 1., 1., 1., 1., 1.])\n    \n    eps = K.epsilon()\n    \n    y_pred = K.clip(y_pred, eps, 1.0-eps)\n\n    out = -(         y_true  * K.log(      y_pred) * class_weights\n            + (1.0 - y_true) * K.log(1.0 - y_pred) * class_weights)\n    \n    return K.mean(out, axis=-1)\n\n\ndef _normalized_weighted_average(arr, weights=None):\n    \"\"\"\n    A simple Keras implementation that mimics that of \n    numpy.average(), specifically for this competition\n    \"\"\"\n    \n    if weights is not None:\n        scl = K.sum(weights)\n        weights = K.expand_dims(weights, axis=1)\n        return K.sum(K.dot(arr, weights), axis=1) \/ scl\n    return K.mean(arr, axis=1)\n\n\ndef weighted_loss(y_true, y_pred):\n    \"\"\"\n    Will be used as the metric in model.compile()\n    ---------------------------------------------\n    \n    Similar to the custom loss function 'weighted_log_loss()' above\n    but with normalized weights, which should be very similar \n    to the official competition metric:\n        https:\/\/www.kaggle.com\/kambarakun\/lb-probe-weights-n-of-positives-scoring\n    and hence:\n        sklearn.metrics.log_loss with sample weights\n    \"\"\"\n    \n    class_weights = K.variable([2., 1., 1., 1., 1., 1.])\n    \n    eps = K.epsilon()\n    \n    y_pred = K.clip(y_pred, eps, 1.0-eps)\n\n    loss = -(        y_true  * K.log(      y_pred)\n            + (1.0 - y_true) * K.log(1.0 - y_pred))\n    \n    loss_samples = _normalized_weighted_average(loss, class_weights)\n    \n    return K.mean(loss_samples)\n\n\ndef weighted_log_loss_metric(trues, preds):\n    \"\"\"\n    Will be used to calculate the log loss \n    of the validation set in PredictionCheckpoint()\n    ------------------------------------------\n    \"\"\"\n    class_weights = [2., 1., 1., 1., 1., 1.]\n    \n    epsilon = 1e-7\n    \n    preds = np.clip(preds, epsilon, 1-epsilon)\n    loss = trues * np.log(preds) + (1 - trues) * np.log(1 - preds)\n    loss_samples = np.average(loss, axis=1, weights=class_weights)\n\n    return - loss_samples.mean()\n\n","c76c2306":"\nclass PredictionCheckpoint(keras.callbacks.Callback):\n    \n    def __init__(self, test_df, valid_df, \n                 test_images_dir=test_images_dir, \n                 valid_images_dir=train_images_dir, \n                 batch_size=32, input_size=(224, 224, 3)):\n        \n        self.test_df = test_df\n        self.valid_df = valid_df\n        self.test_images_dir = test_images_dir\n        self.valid_images_dir = valid_images_dir\n        self.batch_size = batch_size\n        self.input_size = input_size\n        \n    def on_train_begin(self, logs={}):\n        self.test_predictions = []\n        self.valid_predictions = []\n        \n    def on_epoch_end(self,batch, logs={}):\n        print('\u0e17\u0e33\u0e19\u0e32\u0e22 test data...')\n        self.test_predictions.append(\n            self.model.predict_generator(\n                DataGenerator(self.test_df.index, None, self.batch_size, self.input_size, self.test_images_dir), verbose=1)[:len(self.test_df)])\n\nclass MyDeepModel:\n    \n    def __init__(self, engine, input_dims, batch_size=5, num_epochs=4, learning_rate=1e-3, \n                 decay_rate=1.0, decay_steps=1, weights=\"imagenet\", verbose=1):\n        \n        self.engine = engine\n        self.input_dims = input_dims\n        self.batch_size = batch_size\n        self.num_epochs = num_epochs\n        self.learning_rate = learning_rate\n        self.decay_rate = decay_rate\n        self.decay_steps = decay_steps\n        self.weights = weights\n        self.verbose = verbose\n        self._build()\n\n    def _build(self):\n        \n        \n        engine = self.engine(include_top=False, weights=self.weights, input_shape=self.input_dims,\n                             backend = keras.backend, layers = keras.layers,\n                             models = keras.models, utils = keras.utils)\n        \n        x = keras.layers.GlobalAveragePooling2D(name='avg_pool')(engine.output)\n        out = keras.layers.Dense(6, activation=\"sigmoid\", name='dense_output')(x)\n\n        self.model = keras.models.Model(inputs=engine.input, outputs=out)\n\n        self.model.compile(loss=\"binary_crossentropy\", optimizer=keras.optimizers.Adam(), metrics=[weighted_loss])\n    \n\n    def fit_and_predict(self, train_df, valid_df, test_df):\n        \n        # callbacks\n        pred_history = PredictionCheckpoint(test_df, valid_df, input_size=self.input_dims)\n        scheduler = keras.callbacks.LearningRateScheduler(lambda epoch: self.learning_rate * pow(self.decay_rate, floor(epoch \/ self.decay_steps)))\n        \n        self.model.fit_generator(\n            DataGenerator(\n                train_df.index, \n                train_df, \n                self.batch_size, \n                self.input_dims, \n                train_images_dir\n            ),\n            epochs=self.num_epochs,\n            verbose=self.verbose,\n            use_multiprocessing=True,\n            workers=4,\n            callbacks=[pred_history, scheduler]\n        )\n        \n        return pred_history\n    \n    def save(self, path):\n        self.model.save_weights(path)\n    \n    def load(self, path):\n        self.model.load_weights(path)","5eac5764":"def read_testset(filename=\"..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection\/stage_2_sample_submission.csv\"):\n    df = pd.read_csv(filename)\n    df[\"Image\"] = df[\"ID\"].str.slice(stop=12)\n    df[\"Diagnosis\"] = df[\"ID\"].str.slice(start=13)\n    \n    df = df.loc[:, [\"Label\", \"Diagnosis\", \"Image\"]]\n    df = df.set_index(['Image', 'Diagnosis']).unstack(level=-1)\n    \n    return df\n\ndef read_trainset(filename=\"..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection\/stage_2_train.csv\"):\n    df = pd.read_csv(filename)\n    df[\"Image\"] = df[\"ID\"].str.slice(stop=12)\n    df[\"Diagnosis\"] = df[\"ID\"].str.slice(start=13)\n    \n    # \u0e40\u0e2d\u0e32\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e0b\u0e49\u0e33\u0e2d\u0e2d\u0e01\n    duplicates_to_remove = [56340, 56341, 56342, 56343, 56344, 56345, 56346, 56347, 56348, 56349, 56350, 56351, \n                            1171824, 1171825, 1171826, 1171827, 1171828, 1171829, 1171830, 1171831, 1171832, 1171833, \n                            1171834, 1171835, 3705306, 3705307, 3705308, 3705309, 3705310, 3705311, 3705312, 3705313, \n                            3705314, 3705315, 3705316, 3705317, 3842472, 3842473, 3842474, 3842475, 3842476, 3842477, \n                            3842478, 3842479, 3842480, 3842481, 3842482, 3842483]\n    \n    df = df.drop(index=duplicates_to_remove)\n    df = df.reset_index(drop=True)\n    \n    df = df.loc[:, [\"Label\", \"Diagnosis\", \"Image\"]]\n    df = df.set_index(['Image', 'Diagnosis']).unstack(level=-1)\n    \n    return df\n\ndf = read_trainset()\ntest_df = read_testset()","304c833c":"# \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 meta-data \u0e02\u0e2d\u0e07 training set \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\ndf.head(3)","68a50ab1":"# \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 meta-data \u0e02\u0e2d\u0e07 test set \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e04\u0e48\u0e32 0.5 \u0e43\u0e19\u0e15\u0e32\u0e23\u0e32\u0e07 \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e33\u0e19\u0e32\u0e22\u0e40\u0e25\u0e37\u0e2d\u0e14\u0e04\u0e31\u0e48\u0e07\u0e43\u0e19\u0e2a\u0e21\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\ntest_df.head(3)","73914cea":"# train set (00%) and validation set (10%)\nss = ShuffleSplit(n_splits=10, test_size=0.1, random_state=42).split(df.index)\n\n# lets go for the first fold only\ntrain_idx, valid_idx = next(ss)\n# EPOCHS=0\nif EPOCHS == 0: # just for illustration on CPU\n    train_idx = train_idx[:100]\n    valid_idx = valid_idx[:100]\n    EPOCHS = 1\n\n# obtain model\nmodel = MyDeepModel(engine=InceptionV3, input_dims=(256, 256, 3), batch_size=32, learning_rate=5e-4,\n                    num_epochs=EPOCHS, decay_rate=0.8, decay_steps=1, weights=\"imagenet\", verbose=1)\n\n# obtain test + validation predictions (history.test_predictions, history.valid_predictions)\nhistory = model.fit_and_predict(df.iloc[train_idx], df.iloc[valid_idx], test_df)\n","e4e79045":"test_df = read_testset()\n\nprint(history.test_predictions)\n\ntest_df.iloc[:, :] = np.mean(history.test_predictions, axis=0)\n\ntest_df = test_df.stack().reset_index()\n\ntest_df.insert(loc=0, column='ID', value=test_df['Image'].astype(str) + \"_\" + test_df['Diagnosis'])\n\ntest_df = test_df.drop([\"Image\", \"Diagnosis\"], axis=1)\n\ntest_df.to_csv('submission.csv', index=False)\ntest_df.head()","420b8bd3":"# 3. Metric and Model\n\n\u0e43\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14 loss\/metric (3a.) \u0e41\u0e25\u0e30\u0e42\u0e21\u0e40\u0e14\u0e25 (3b.) \u0e42\u0e14\u0e22 loss \u0e41\u0e25\u0e30 metric \u0e19\u0e31\u0e49\u0e19\u0e16\u0e39\u0e01\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e08\u0e32\u0e01\u0e2a\u0e21\u0e32\u0e04\u0e21 RSNA \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e41\u0e25\u0e30\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e01\u0e15\u0e34\u0e01\u0e32\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\n\n### 3a. loss function and metric","f3e3318b":"### 3b. Model\n\n\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 Keras \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e19\u0e35\u0e49 \u0e08\u0e30\u0e04\u0e25\u0e49\u0e32\u0e22\u0e01\u0e31\u0e1a Workshops \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e21\u0e32\u0e04\u0e23\u0e31\u0e1a (https:\/\/thaikeras.com\/2018\/setup-kaggle-workshop\/) \n\u0e42\u0e14\u0e22\u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15 (\u0e04\u0e32\u0e14\u0e27\u0e48\u0e32\u0e20\u0e32\u0e22\u0e43\u0e19\u0e1b\u0e35 2020) \u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35 Series \u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 Keras \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 step-by-step \u0e17\u0e22\u0e2d\u0e22\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e04\u0e23\u0e31\u0e1a\n\n\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e04\u0e37\u0e2d\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 image classifier \u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a input \u0e40\u0e1b\u0e47\u0e19\u0e23\u0e39\u0e1b (\u0e0b\u0e36\u0e48\u0e07\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e42\u0e14\u0e22 DataGenerator) \u0e41\u0e25\u0e30 Output \u0e40\u0e1b\u0e47\u0e19\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e21\u0e35\u0e40\u0e25\u0e37\u0e2d\u0e14\u0e04\u0e31\u0e48\u0e07 6 \u0e04\u0e48\u0e32\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e44\u0e27\u0e49\u0e43\u0e19[\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e01\u0e48\u0e2d\u0e19](http:\/\/bit.ly\/thaikeras-rsna)\u0e04\u0e23\u0e31\u0e1a ","b113a101":"\u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e01\u0e33\u0e2b\u0e19\u0e14 path \u0e02\u0e2d\u0e07 train \u0e41\u0e25\u0e30 test data \u0e04\u0e23\u0e31\u0e1a","bb4699f4":"# 2. Data generators\n\n\u0e2a\u0e23\u0e49\u0e32\u0e07 DataGenerator Object \u0e08\u0e32\u0e01 class `keras.utils.Sequence` \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 DataGenerator \u0e17\u0e35\u0e48\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e21\u0e32\u0e01\u0e46 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e08\u0e23\u0e34\u0e07\u0e40\u0e27\u0e25\u0e32\u0e40\u0e23\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e1b\u0e23\u0e34\u0e21\u0e32\u0e13\u0e21\u0e2b\u0e32\u0e28\u0e32\u0e25\u0e43\u0e19\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49 \u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49\u0e2b\u0e25\u0e32\u0e22\u0e23\u0e2d\u0e1a\u0e43\u0e19 workshop \u0e02\u0e2d\u0e07 ThaiKeras \u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e21\u0e32 \u0e40\u0e14\u0e35\u0e4b\u0e22\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21 Series \u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 Keras \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e1b\u0e35\u0e19\u0e35\u0e49 \u0e02\u0e2d\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2d\u0e14\u0e43\u0e08\u0e23\u0e2d\u0e04\u0e23\u0e31\u0e1a :D\n\n\u0e13 \u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e40\u0e1a\u0e37\u0e49\u0e2d\u0e07\u0e15\u0e49\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e27\u0e48\u0e32\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DataGenerator \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e43\u0e2b\u0e49 Keras \u0e42\u0e2b\u0e25\u0e14\u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e17\u0e35\u0e25\u0e30 batch \u0e41\u0e17\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e42\u0e2b\u0e25\u0e14\u0e17\u0e35\u0e40\u0e14\u0e35\u0e22\u0e27\u0e17\u0e31\u0e49\u0e07 Dataset \u0e0b\u0e36\u0e48\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e43\u0e19 RAM \u0e17\u0e35\u0e48\u0e21\u0e35\u0e19\u0e49\u0e2d\u0e22\u0e19\u0e34\u0e14\u0e43\u0e19 machine \u0e17\u0e31\u0e48\u0e27\u0e46 \u0e44\u0e1b\u0e04\u0e23\u0e31\u0e1a\n","1a6448ce":"\u0e42\u0e21\u0e40\u0e14\u0e25\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07\u0e43\u0e2b\u0e49\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e44\u0e14\u0e49\u0e2d\u0e35\u0e01\u0e2b\u0e25\u0e32\u0e22\u0e17\u0e34\u0e28\u0e17\u0e32\u0e07\u0e04\u0e23\u0e31\u0e1a \u0e42\u0e14\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e39\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e2d\u0e35\u0e01\u0e21\u0e32\u0e01\u0e21\u0e32\u0e22\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a https:\/\/www.kaggle.com\/c\/rsna-intracranial-hemorrhage-detection\/discussion","43e7fc78":"# Credit NOTE\n\nThis notebook is just Thai comments on my RSNA teammate top kernel, with minor modification to make it (1) simpler, (2) works on CPU and (3) work on 2nd stage data : https:\/\/www.kaggle.com\/akensert\/inceptionv3-prev-resnet50-keras-baseline-model \n\n# \u0e40\u0e01\u0e23\u0e34\u0e48\u0e19\u0e19\u0e33\n\n\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e04\u0e23\u0e31\u0e1a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e40\u0e25\u0e48\u0e32\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e40\u0e25\u0e37\u0e2d\u0e14\u0e04\u0e31\u0e48\u0e07\u0e43\u0e19\u0e2a\u0e21\u0e2d\u0e07 5 \u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a \u0e21\u0e38\u0e21\u0e21\u0e2d\u0e07\u0e15\u0e48\u0e2d\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e17\u0e31\u0e49\u0e07\u0e40\u0e0a\u0e34\u0e07\u0e27\u0e34\u0e28\u0e27\u0e01\u0e23 \u0e41\u0e25\u0e30\u0e40\u0e0a\u0e34\u0e07\u0e23\u0e31\u0e07\u0e2a\u0e35\u0e41\u0e1e\u0e17\u0e22\u0e4c\u0e44\u0e1b\u0e41\u0e25\u0e49\u0e27 (\u0e14\u0e39\u0e22\u0e49\u0e2d\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48\u0e35 http:\/\/bit.ly\/thaikeras-rsna ) \u0e43\u0e19\u0e42\u0e19\u0e49\u0e15\u0e1a\u0e38\u0e49\u0e04\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e14\u0e39 \u0e42\u0e04\u0e49\u0e14 Keras \u0e17\u0e35\u0e48\u0e19\u0e33\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e08\u0e32\u0e01\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e21\u0e32 \u0e21\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e15\u0e49\u0e19\u0e41\u0e1a\u0e1a\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e40\u0e04\u0e22\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Kaggle \u0e21\u0e32\u0e01\u0e48\u0e2d\u0e19\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e39\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e17\u0e35\u0e48\u0e19\u0e35\u0e48\u0e04\u0e23\u0e31\u0e1a : https:\/\/thaikeras.com\/2018\/setup-kaggle-workshop\/\n\n\u0e42\u0e19\u0e49\u0e15\u0e1a\u0e38\u0e49\u0e04\u0e09\u0e1a\u0e31\u0e1a\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e0a\u0e32\u0e27\u0e2a\u0e27\u0e35\u0e40\u0e14\u0e19 (@akensert) \u0e17\u0e35\u0e48\u0e23\u0e48\u0e27\u0e21\u0e17\u0e35\u0e21\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e21 ThaiKeras \u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 RSNA \u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e21\u0e32 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e42\u0e19\u0e49\u0e15\u0e1a\u0e38\u0e49\u0e04\u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07 baseline \u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14 \u0e2d\u0e48\u0e32\u0e19\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e30\u0e40\u0e1a\u0e35\u0e22\u0e1a \u0e41\u0e25\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e0a\u0e37\u0e48\u0e19\u0e0a\u0e21\u0e08\u0e32\u0e01\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e43\u0e19 Kaggle community \u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e32\u0e01\u0e04\u0e23\u0e31\u0e1a\n\n\u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14 \u0e08\u0e30\u0e41\u0e1a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 5 \u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e14\u0e31\u0e07\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a (\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e34\u0e14\u0e14\u0e39\u0e14\u0e49\u0e27\u0e22 PC \u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e1b\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e40\u0e21\u0e19\u0e39\u0e1a\u0e19 Kaggle \u0e14\u0e49\u0e32\u0e19\u0e0b\u0e49\u0e32\u0e22\u0e04\u0e23\u0e31\u0e1a)\n\n**1. Preprocessing \/ Windowing -- ** \u0e42\u0e04\u0e49\u0e14\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33 windowing \u0e08\u0e32\u0e01\u0e20\u0e32\u0e1e Dicom \u0e14\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e09\u0e1a\u0e31\u0e1a\u0e01\u0e48\u0e2d\u0e19\n\n**2. Data Generator -- ** \u0e42\u0e04\u0e49\u0e14\u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e25\u0e30 batch \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e43\u0e19\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e17\u0e35\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e35\u0e08\u0e33\u0e19\u0e27\u0e19\u0e21\u0e2b\u0e32\u0e28\u0e32\u0e25\u0e40\u0e0a\u0e48\u0e19\u0e19\u0e35\u0e49\u0e31 \u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46 \u0e01\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Keras Data Generator \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e25\u0e30 Batch \u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\n\n**3. Model, Loss and Metric -- ** \u0e42\u0e04\u0e49\u0e14\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 \u0e23\u0e27\u0e21\u0e17\u0e31\u0e49\u0e07 objective function \u0e43\u0e19\u0e07\u0e32\u0e19\u0e19\u0e35\u0e49\n\n**4. Meta-data (CSV) -- ** \u0e42\u0e04\u0e49\u0e14\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a import \u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 meta data \u0e17\u0e35\u0e48\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e08\u0e32\u0e01 CSV \u0e21\u0e32\u0e22\u0e39\u0e48\u0e43\u0e19 panda \u0e41\u0e25\u0e30 numpy\n\n**5. Train and Predict -- ** \u0e43\u0e0a\u0e49\u0e42\u0e04\u0e49\u0e14\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e34\u0e48\u0e21\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 test data\n\n\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 \u0e40\u0e21\u0e37\u0e48\u0e2d Copy notebook \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e42\u0e04\u0e49\u0e14 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e15\u0e49\u0e2d\u0e07\u0e40\u0e1b\u0e34\u0e14 GPU \u0e43\u0e19\u0e40\u0e21\u0e14\u0e39\u0e02\u0e2d\u0e07 Kaggle Notebook \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e32\u0e19\u0e02\u0e27\u0e32\u0e21\u0e37\u0e2d\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a (\u0e08\u0e33\u0e01\u0e31\u0e14\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1f\u0e23\u0e35 30 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07\u0e15\u0e48\u0e2d 1 \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c \u0e42\u0e14\u0e22\u0e42\u0e19\u0e49\u0e15\u0e1a\u0e38\u0e49\u0e04\u0e19\u0e35\u0e49\u0e23\u0e31\u0e19\u0e41\u0e25\u0e30\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32 GPU = On \u0e41\u0e25\u0e30 EPOCHS = 5 \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e40\u0e27\u0e25\u0e32\u0e23\u0e31\u0e19\u0e23\u0e32\u0e27\u0e46 7-8 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07\u0e04\u0e23\u0e31\u0e1a","0c67fb0d":"# 1. Preprocessing (brain + subudral + soft tissue)\nIdea Credits: [Ryan Epp](https:\/\/www.kaggle.com\/reppic\/gradient-sigmoid-windowing), [David Tang](https:\/\/www.kaggle.com\/dcstang\/see-like-a-radiologist-with-systematic-windowing), [Marco](https:\/\/www.kaggle.com\/marcovasquez\/basic-eda-data-visualization), [Nanashi](https:\/\/www.kaggle.com\/jesucristo\/rsna-introduction-eda-models), [Richard McKinley](https:\/\/www.kaggle.com\/omission\/eda-view-dicom-images-with-correct-windowing)), [appian42's repo](https:\/\/github.com\/appian42\/kaggle-rsna-intracranial-hemorrhage\/) (windowing), [Jeremy's kernel](https:\/\/www.kaggle.com\/jhoward\/cleaning-the-data-for-rapid-prototyping-fastai) (cleaning)\n\n\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e02\u0e49\u0e32\u0e07\u0e25\u0e48\u0e32\u0e07\u0e40\u0e23\u0e32\u0e19\u0e34\u0e22\u0e32\u0e21\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `window_image` \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e30\u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e09\u0e1e\u0e32\u0e30 window \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 \u0e2a\u0e48\u0e27\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `bsb_window` \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01 `window_image` 3 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 brain window, subdural window \u0e41\u0e25\u0e30 soft-tissue window \u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a \u0e41\u0e25\u0e30 normalize \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 [0,255] \u0e40\u0e0a\u0e48\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a format \u0e02\u0e2d\u0e07\u0e23\u0e39\u0e1b 3-channel \u0e1b\u0e01\u0e15\u0e34","f0a1515b":"\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e19\u0e33\u0e04\u0e33\u0e19\u0e32\u0e22\u0e02\u0e2d\u0e07 test data \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b dataframe \u0e17\u0e35\u0e48\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e23\u0e31\u0e1a","11715cad":"\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e32\u0e40\u0e23\u0e35\u0e22\u0e01\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `bsb_window` \u0e14\u0e49\u0e27\u0e22\u0e44\u0e1f\u0e25\u0e4c dicom \u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e44\u0e14\u0e49 3-dim (\u0e01\u0e27\u0e49\u0e32\u0e07, \u0e22\u0e32\u0e27, 3) numpy array \u0e01\u0e25\u0e31\u0e1a\u0e21\u0e32\u0e04\u0e23\u0e31\u0e1a\n\n\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `_read` \u0e19\u0e31\u0e49\u0e19\u0e44\u0e14\u0e49 automate \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e44\u0e27\u0e49\u0e04\u0e23\u0e31\u0e1a\u0e42\u0e14\u0e22 \n\n* \u0e2d\u0e48\u0e32\u0e19 dicom \u0e08\u0e32\u0e01\u0e0a\u0e37\u0e48\u0e2d path \u0e02\u0e2d\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\n* \u0e41\u0e1b\u0e25\u0e07 dicom \u0e40\u0e1b\u0e47\u0e19\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e42\u0e14\u0e22\u0e40\u0e23\u0e35\u0e22\u0e01 `bsb_window` \u0e41\u0e25\u0e30\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e01\u0e47\u0e08\u0e30\u0e2a\u0e48\u0e07 zero numpy array \u0e01\u0e25\u0e31\u0e1a\u0e21\u0e32\u0e41\u0e17\u0e19\n* \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e43\u0e2b\u0e49\u0e40\u0e25\u0e47\u0e01\u0e25\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e23\u0e47\u0e27\u0e02\u0e36\u0e49\u0e19 (\u0e04\u0e48\u0e32 default \u0e04\u0e37\u0e2d 256x256 \u0e01\u0e27\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e22\u0e32\u0e27\u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a)","453fc9cf":"# 4. Read csv files\n\n\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 meta-data \u0e02\u0e2d\u0e07 DICOM \u0e17\u0e35\u0e48\u0e2a\u0e21\u0e32\u0e04\u0e21 RSNA \u0e41\u0e25\u0e30 Kaggle \u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e04\u0e31\u0e14\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e17\u0e35\u0e48\u0e49\u0e04\u0e37\u0e2d \u0e0a\u0e37\u0e48\u0e2d\u0e23\u0e39\u0e1b \u0e41\u0e25\u0e30 label \u0e27\u0e48\u0e32\u0e21\u0e35\u0e40\u0e25\u0e37\u0e2d\u0e14\u0e04\u0e31\u0e48\u0e07\u0e43\u0e19\u0e2a\u0e21\u0e2d\u0e07\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e44\u0e2b\u0e19\u0e1a\u0e49\u0e32\u0e07\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e42\u0e14\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e37\u0e48\u0e19\u0e40\u0e0a\u0e48\u0e19 \u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e04\u0e19\u0e44\u0e02\u0e49 \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e08\u0e30\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e2d\u0e32\u0e21\u0e32\u0e43\u0e0a\u0e49 \u0e43\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a\n\n\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e01\u0e47\u0e08\u0e30\u0e08\u0e31\u0e14\u0e40\u0e23\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e15\u0e32\u0e23\u0e32\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e47\u0e1a\u0e43\u0e19 pandas dataframe \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e07\u0e48\u0e32\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","7503c203":"# 5. Train model and predict\n\nKeras \u0e19\u0e31\u0e49\u0e19\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e20\u0e32\u0e22\u0e43\u0e19\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e04\u0e23\u0e31\u0e1a \u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `fit_and_predict` \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e40\u0e02\u0e35\u0e22\u0e19\u0e44\u0e27\u0e49\u0e43\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d 4 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e08\u0e32\u0e01 training data \u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22 test data\n\n\u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e41\u0e1a\u0e48\u0e07 training data \u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e2d\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e37\u0e2d\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07\u0e46 (`training_idx`) \u0e41\u0e25\u0e30\u0e01\u0e25\u0e38\u0e48\u0e21\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33 (`valid_idx`) \u0e14\u0e49\u0e27\u0e22\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `ShuffleSplit` \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21\u0e04\u0e23\u0e31\u0e1a (\u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.ShuffleSplit.html)"}}