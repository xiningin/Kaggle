{"cell_type":{"61fe3bfb":"code","7dce35b2":"code","20d40e50":"code","bc13a0f2":"code","aa5e5403":"code","ef93b1b6":"code","1d056f08":"code","6d2941f3":"code","7d7f02b4":"code","cb0abf79":"code","f349025e":"code","0862c969":"code","a5c12b6f":"code","10057c60":"code","6f890cbb":"code","00b2de35":"code","c18d4d8c":"code","bffb9fbd":"code","9894dd91":"code","d4e21381":"code","9b70fd23":"code","f5391d0e":"code","5448ad7e":"code","30aaf0df":"code","be98b58d":"code","e164abdb":"code","f3b27645":"code","f48d26f4":"markdown","7b35c7d1":"markdown","a4ea56e2":"markdown","fec03ef9":"markdown","3c9a78f7":"markdown","251f9cb7":"markdown","632b8faf":"markdown","a9c76a1f":"markdown","45e2a4f1":"markdown","2b9b5df8":"markdown","24e0bdbc":"markdown","399226e8":"markdown","c8cad803":"markdown","a61d512e":"markdown"},"source":{"61fe3bfb":"import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score\n","7dce35b2":"df=pd.read_csv(\"\/kaggle\/input\/fundamentals.csv\")","20d40e50":"\noldcolumns=df.columns\nnewcolumns=[]\nfor i in oldcolumns:\n    i=i.replace(\" \",\"_\")\n    i=i.replace(\"\/\",\"_\")\n    i=i.replace(\"'\",\"_\")\n    i=i.replace(\"-\",\"_\")\n    i=i.replace(\".\",\"_\")\n    i=i.replace(\",\",\"_\")\n    i=i.replace(\"&\",\"_\")\n    i=i.replace(\":\",\"_\")\n    i=re.sub(\"_+\",\"_\",i)\n    newcolumns.append(i)\n    #Check and print if any other charecter apart from alphabets,digits and _ are present\n    check=re.search(\"^[a-zA-Z_0-9]+$\",i)\n    if(not check):\n        print(i)\ndf.columns=newcolumns\n","bc13a0f2":"df.columns","aa5e5403":"grp_tickers=df.groupby(\"Ticker_Symbol\")\ndf_tickers=grp_tickers.mean()","ef93b1b6":"df_tickers.columns","1d056f08":"parameters=['Capital_Expenditures','Goodwill','Research_and_Development',\n                   'Total_Assets','Earnings_Per_Share','Cash_Ratio', 'Current_Ratio', 'Quick_Ratio']\nfig = plt.figure(figsize = (15,15))\nfor i in range(len(parameters)):\n    plt.subplot(3,3,i+1)\n    sns.distplot(df_tickers[parameters[i]])","6d2941f3":"plt.figure(figsize=(100,20))\nplot=sns.barplot(x=df_tickers.index,y='Earnings_Per_Share',data=df_tickers)\nplot.set_xticklabels(plot.get_xticklabels(),rotation=90,fontsize=15)\nplot.set_title(\"Bar Plot of EPS across tickers\",fontsize=30)\nplot.set_xlabel('Ticker Symbol',fontsize=20)\nplot.set_ylabel('Earings Per Share',fontsize=20)\n","7d7f02b4":"lowesteps=min(df_tickers.Earnings_Per_Share)\nhighesteps=max(df_tickers.Earnings_Per_Share)\ndf_tickers['Profitability']=pd.cut(\n                       df_tickers['Earnings_Per_Share'],\n                       bins = [lowesteps-1,0,2,4,highesteps],\n                        labels= [\"Loss\", \"Average\", \"Good\",\"High\"]\n                      )\ndf_tickers['Profitability'].value_counts()\ndf_tickers['Earnings_Per_Share'].describe()","cb0abf79":"lowestsize=min(df_tickers.Total_Assets)\nhighestsize=max(df_tickers.Total_Assets)\ndf_tickers['Company_Size']=pd.qcut(\n                       df_tickers['Total_Assets'],\n                       #bins = [82433501,(lowestsize+highestsize)\/100,(lowestsize+highestsize)\/10,highestsize],     # Else devise your bins: [0,20,60,110]\n                       q=3,\n                       labels= [\"s\", \"m\", \"l\"]\n                      )\ndf_tickers['Company_Size'].value_counts()\n#df_tickers['Total_Assets']\ndf_tickers[df_tickers['Company_Size']=='l'].Total_Assets.describe()","f349025e":"lowestliq=min(df_tickers.Cash_Ratio)\nhighestliq=max(df_tickers.Cash_Ratio)\ndf_tickers['Liquidity']=pd.cut(\n                       df_tickers['Cash_Ratio'],\n                       bins = [0,(lowestliq+highestliq)\/8,(lowestliq+highestliq)\/4,highestliq],           # Else devise your bins: [0,20,60,110]\n                       labels= [\"Low\", \"Medium\", \"High\"]\n                      )\ndf_tickers['Liquidity'].value_counts()\nlowestliq","0862c969":"\nparameters2=['Company_Size','Liquidity']\nfig = plt.figure(figsize = (15,8))\nfor i in range(len(parameters2)):\n    plt.subplot(1,2,i+1)\n    sns.boxplot(x=parameters2[i],y=\"Earnings_Per_Share\",data=df_tickers)","a5c12b6f":"sns.boxplot(x=\"Profitability\",y=\"Cash_Ratio\",data=df_tickers, notch=True)","10057c60":"plt.figure(figsize=(8,5))\nsns.boxplot(x=\"Profitability\",y=\"Current_Ratio\",data=df_tickers,notch=True)","6f890cbb":"plt.figure(figsize=(10,8))\nax=sns.barplot(x=\"Profitability\",y=\"Research_and_Development\",hue='Company_Size',data=df_tickers)","00b2de35":"df_tickers_copy=df_tickers.copy()\nfor i in df_tickers:\n    ncount=df_tickers[i].isna().sum()\n    if(ncount>70):\n        print(i,ncount)\n        df_tickers.drop(i,axis='columns',inplace=True)\n        \n\n","c18d4d8c":"df_tickers.drop([\"For_Year\",\"Unnamed_0\"],axis='columns',inplace=True)\ndf_tickers=df_tickers.dropna(axis='rows')\nprint(df_tickers.columns[df_tickers.isna().any()])\nprint(df_tickers.shape)","bffb9fbd":"print(df_tickers.columns)","9894dd91":"scaler = StandardScaler()","d4e21381":"#tdata temporarily holds numeric only columns from df_tickers\ntdata = df_tickers.select_dtypes(include = ['float64', 'int64']).copy()\n#ndata is transformed numpy array of the numeric data\nndata=scaler.fit_transform(tdata)\n#xdata is a dataframe of the numeric data from numpy array\nXdata=pd.DataFrame(ndata,columns=tdata.columns)\nXdata.head()\n#ydata is a dataframe of the categorical variables\nydata=df_tickers[[\"Profitability\",\"Company_Size\"]]\n#pdata combines xdata and ydata\npdata=Xdata.copy()\npdata['Profitability']=df_tickers.reset_index()['Profitability']\npdata['Company_Size']=df_tickers.reset_index()['Company_Size']\npdata\n","9b70fd23":"#profitability parallel plot\nfig2 = plt.figure(figsize=(20,15))\n\nax = pd.plotting.parallel_coordinates(pdata.drop([\"Company_Size\"],axis=\"columns\"),\n                                 'Profitability',\n                                  colormap= plt.cm.spring\n                                  )\nplt.xticks(rotation=90)","f5391d0e":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"none\"\n","5448ad7e":"maxscore=0\noptimumkval=0\nwss=[]\nsilscore=[0]\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters = i)\n    y_means=kmeans.fit(Xdata)\n    wss.append(kmeans.inertia_)\n    if(i>1):\n        silscore.append(silhouette_score(Xdata, kmeans.labels_))\nplt.plot(range(1,11),wss,marker='*')\nprint(\"silhouette scores\", silscore)","30aaf0df":"print(y_means.labels_)","be98b58d":"#From above plot and silhoeutte score, 3 seems to be an optimum k value\nplt.figure(figsize=(15,15))\nkmeans=KMeans(n_clusters=3)\ny_means=kmeans.fit(Xdata)\ncolorseries=pd.Series(y_means.labels_).map({0:\"green\",1:\"blue\",2:\"red\",3:\"yellow\",4:\"grey\"})\nfor i in range(len(ndata)):\n    plt.plot(ndata[i,0],ndata[i,1],marker='o',color=colorseries[i])","e164abdb":"from yellowbrick.cluster import SilhouetteVisualizer\nsv = SilhouetteVisualizer(kmeans)\nsv.fit(Xdata)        \nsv.show()          ","f3b27645":"from sklearn.manifold import TSNE\nX_embedded = TSNE(n_components=2).fit_transform(Xdata)\ndf1 = pd.DataFrame(X_embedded, columns=['X','Y'])\ncolorlist = [\"#FF1111\", \"#11FF11\", \"#1111FF\"]\nsns.relplot(x = \"X\",\n            y = \"Y\",\n            hue = y_means.labels_,\n            data = df1,\n            palette=sns.color_palette(colorlist)\n            )","f48d26f4":"#### Displaying Dist plots of various important parameters","7b35c7d1":"#### Importing Required Package","a4ea56e2":"### Task 3: Group data by Ticker Symbols and take a mean of all numeric variables","fec03ef9":"#### Task 4: Using ungrouped and grouped data, perform visual analysis of data using seaborn and plotly-express","3c9a78f7":"### Tas 7: Perform clustering and check Silhoutte score.\n     ","251f9cb7":"### Task 2: To remove the special charecters from columnnames.","632b8faf":"### Task 8: Perform TSNE visualization (of the dataset) and color points with the clusters discovered above.","a9c76a1f":"### Task 5: Dataset has a number of NaNs. Either remove rows that have NaNs or remove columns that have NaNs.So that dataset has no nulls.","45e2a4f1":"### Creating Categorical variables from numerical values","2b9b5df8":"#### Liquidity","24e0bdbc":"#### Company Size","399226e8":"### Task 1: To read the fundamentals.csv file into a data frame","c8cad803":"#### Profitability","a61d512e":" ### Task 6 Normalise the data using sklearn's StandardScaler()"}}