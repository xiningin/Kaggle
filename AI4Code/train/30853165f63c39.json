{"cell_type":{"226263e9":"code","55228b94":"code","486ce8a4":"code","b3624138":"code","1919a6b2":"code","cfb7ffb4":"code","2bd7903c":"code","48f2df3d":"code","880390ff":"code","302e3697":"code","3af7ebc1":"code","ba0244e0":"code","6649e07e":"code","bfec1ec8":"code","9dd2c108":"code","41a4f301":"code","aad0de70":"code","ed05864c":"code","7b08709d":"markdown","24f8436a":"markdown","8f1e46c6":"markdown","28e8e737":"markdown","8b6bbbd6":"markdown","83bc9069":"markdown","500eee9a":"markdown","3da0dd67":"markdown","91611936":"markdown","4065fb6c":"markdown","6531759b":"markdown","75339771":"markdown","fc489b47":"markdown","7238df25":"markdown","99a6786d":"markdown","7222cdf9":"markdown"},"source":{"226263e9":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","55228b94":"df.head(3)","486ce8a4":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title = \"Netflix Report\", explorative=False)\nprofile.set_variable(\"correlations\", None)\nprofile.set_variable(\"interactions\", None)\nprofile.set_variable(\"samples\", None)\nprofile","b3624138":"import plotly.express as px\nfig = px.pie(df, names=df[\"type\"], width=600, height=400)\nfig.show()","1919a6b2":"#Number of TV shows and Movies along the years. \ndf_type = df.groupby(by=[\"release_year\",\"type\"], as_index=False).count()\ndf_type = df_type[[\"release_year\",\"type\",\"show_id\"]]\ndf_type = df_type.loc[df_type[\"release_year\"]>=1950]\ndf_type.rename(columns={\"show_id\":\"count\"},inplace=True)\n\nfig = px.line(df_type, x=\"release_year\",y=\"count\",color=\"type\",\\\n             width=800, height=600)\nfig.show()\n# We can basically tell the data from 2019 and 2020 cannot cover the population. ","cfb7ffb4":"fig = px.histogram(df, x=\"rating\",color=\"type\")\nfig.show()","2bd7903c":"import plotly.graph_objects as go\ndf_country = df.groupby(\"country\",as_index=False).count()\ndf_country = df_country[[\"country\",\"show_id\"]]\ndf_country.rename(columns={\"show_id\":\"count\"},inplace=True)\n\nfig = go.Figure(data=go.Choropleth(\n    locationmode = \"country names\",\n    locations = df_country['country'],\n    z = df_country['count'],\n    colorscale=\"Jet\",\n    reversescale=False,\n    zmin=0, zmax=10,\n    colorbar_title = 'Number of Movies and Shows',\n))\n\nfig.update_layout(\n    title_text='Number of Movies and Shows',\n    geo=dict(\n        showcoastlines=True,\n    ),\n)\n\nfig.show()","48f2df3d":"df_country = df_country[df_country[\"count\"]>=50]\nfig = px.bar(df_country, x=\"country\", y=\"count\")\nfig.update_xaxes(categoryorder=\"total descending\")\nfig.show()","880390ff":"df_country = df.groupby([\"country\",\"type\",\"release_year\"],as_index=False).count()\ncountries = [\"United States\", \"India\", \"United Kingdom\", \"South Korea\"]\ndf_country = df_country[df_country[\"country\"].isin(countries)]\ndf_country = df_country[[\"country\",\"type\",\"release_year\",\"show_id\"]]\ndf_country = df_country[df_country[\"release_year\"]>2005]\ndf_country.rename(columns={\"show_id\":\"count\"}, inplace=True)\n\nfig_movie = px.line(df_country,x=\"release_year\",y=\"count\",color=\"country\",\\\n                    facet_col=\"type\", width=800,height=600)\nfig_movie.show()","302e3697":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf_movie = df[df[\"type\"]==\"Movie\"]\ndf_show = df[df[\"type\"]==\"TV Show\"]\n\ndf_movie[\"duration\"] = df_movie[\"duration\"].str.replace(\"min\",\"\")\ndf_movie[\"duration\"] = df_movie[\"duration\"].astype(\"int\")\nfig = px.histogram(df_movie,x=\"duration\",labels={\"duration\":\"Movies Duration (in minutes)\"},\\\n                  width=600, height=300,template=\"plotly_white\")\nfig.update_xaxes(categoryorder=\"category ascending\")\nfig.update_layout(margin=dict(t=0,b=0))\nfig.show()\n\ndf_show[\"duration\"] = df_show[\"duration\"].str.replace(\" Seasons\",\"\")\ndf_show[\"duration\"] = df_show[\"duration\"].str.replace(\" Season\",\"\")\ndf_show[\"duration\"] = df_show[\"duration\"].astype(\"int\")\nfig = px.histogram(df_show,x=\"duration\",labels={\"duration\":\"Shows Duration(Seasons)\"},\\\n                  width=600, height=300,template=\"plotly_white\")\nfig.update_xaxes(categoryorder=\"category ascending\")\nfig.update_layout(margin=dict(t=0,b=0))\nfig.show()","3af7ebc1":"# Most productive director\ndf_director = df.groupby([\"director\",\"country\"],as_index=False).count()\ndf_director.sort_values(\"show_id\", ascending=False).head(5)\n\n#The most productive director is Marcus Raboy from the United States.","ba0244e0":"df[\"cast\"] = df[\"cast\"].astype(str)\ndf[\"num_cast\"] = df[\"cast\"].apply(lambda x: x.count(\",\")+1)\ndf = df[df[\"num_cast\"]!=0]\ndf[df[\"num_cast\"]==df[\"num_cast\"].max()]\n# The Black Mirror and Social Distance have the most cast number, which is 50. ","6649e07e":"fig = px.histogram(df, x = df[\"num_cast\"], color=\"type\",template=\"plotly_white\",\\\n                  width=600, height=400 )\nfig.show()","bfec1ec8":"# When we convert a column\/series of strings into a list, we will get a list of strings. \n# All the elements are mixed in a single string. \n# We can write a function to separate all the elements and combine them into a list. \n# This function can be applied to several columns in this datset. \n\ndef list_expand(l):\n    return_list = []\n    for element in l:\n        for genre in element.split(\",\"):\n            return_list.append(genre)\n    return return_list\n\n# After we get the list, we can write a function to count all the elements in the list.\n\ndef create_dict_from_list_count(d, l):\n    for key in d.keys():\n        d[key] = l.count(key)\n    return d\n        \n\ncast_total_list = df[\"cast\"].tolist()\ncast_list = list_expand(cast_total_list)\ncast_set = set(cast_list)\nprint(\"there are totally {} actors\".format(len(cast_set)))\n\ncast_dict = dict.fromkeys(cast_set, 0)\ncast_dict = create_dict_from_list_count(cast_dict,cast_list)\ncast_dict.pop('nan', None)\n\nproductive_actor = max(cast_dict, key=cast_dict.get)\nprint(\"The most productive actor is {}, He\/She was in {} Shows\/Movies\".\\\n     format(productive_actor, cast_dict.get(productive_actor)))","9dd2c108":"movie_type = df_movie[\"listed_in\"].tolist()\nshow_type = df_show[\"listed_in\"].tolist()\n\n\nmovie_gene_list = list_expand(movie_type)\nshow_gene_list = list_expand(show_type)\n\nmovie_gene_set = set(movie_gene_list)\nshow_gene_set = set(show_gene_list)\n\nprint(\"there are totally {} genres in the movie sector\".format(len(movie_gene_set)))\nprint(\"there are totally {} genres in the show sector\".format(len(show_gene_set)))\n\nmovie_dict = dict.fromkeys(movie_gene_set, 0)\nshow_dict = dict.fromkeys(show_gene_set, 0)\n\nmovie_dict = create_dict_from_list_count(movie_dict, movie_gene_list)\nshow_dict = create_dict_from_list_count(show_dict, show_gene_list)","41a4f301":"movie_gene_count_df = pd.DataFrame.from_dict(movie_dict, orient=\"index\",columns=[\"count\"])\nmovie_gene_count_df.reset_index(inplace=True)\nmovie_gene_count_df.rename(columns={\"index\":\"movie_genre\"}, inplace=True)\n\nshow_gene_count_df = pd.DataFrame.from_dict(show_dict, orient=\"index\",columns=[\"count\"])\nshow_gene_count_df.reset_index(inplace=True)\nshow_gene_count_df.rename(columns={\"index\":\"show_genre\"}, inplace=True)\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=1, cols=2, shared_yaxes=False,\n                   subplot_titles=(\"Movie Genre Distribution\",\"Show Genre Distribution\"))\n\nfig.add_trace(go.Bar(x=movie_gene_count_df[\"movie_genre\"], y=movie_gene_count_df[\"count\"],\n                    marker=dict(coloraxis=\"coloraxis\")),\n              1, 1)\n\nfig.add_trace(go.Bar(x=show_gene_count_df[\"show_genre\"], y=show_gene_count_df[\"count\"],\n                    marker=dict(coloraxis=\"coloraxis\")),\n              1, 2)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False, title_text=\"Genre Distribution\")\n\nfig.update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","aad0de70":"import nltk\nfrom wordcloud import WordCloud\nnltk.download('stopwords')\n\n\nmovie_description = \"\".join(str(x) for x in df_movie[\"description\"])\nstop_words = set(nltk.corpus.stopwords.words(\"english\"))\nword_cloud = WordCloud(stopwords=stop_words, width=2000, height=1000,\\\n                            max_font_size=160, min_font_size=30).generate(movie_description)\nplt.figure(figsize=(12,6), facecolor=\"k\")\nplt.imshow(word_cloud)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","ed05864c":"show_description = \"\".join(str(x) for x in df_show[\"description\"])\nword_cloud = WordCloud(stopwords=stop_words, width=2000, height=1000,\\\n                            max_font_size=160, min_font_size=30).generate(show_description)\nplt.figure(figsize=(12,6), facecolor=\"k\")\nplt.imshow(word_cloud)\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","7b08709d":"I think the country columns is not standardized country code format, which leads to a not accurate color bar. Further country code match can happen with third party dataset. The interactive labels are accurate in the map. ","24f8436a":"# Thank you for reading and an upvote will be really appreciated.","8f1e46c6":"Movie Rating System\nhttps:\/\/en.wikipedia.org\/wiki\/Motion_Picture_Association_film_rating_system","28e8e737":"### Movies and Shows distributions among years","8b6bbbd6":"### Country Distribution","83bc9069":"What can two lines code tell us? \n\nThere are 7787 records, among which 69% are movies and the rest are shows. \n\n33% of the shows\/movies are from the US, 11.9% from India and 5.1% from the UK. \n\nIntuitively this dataset does not reflects the population really well. \n\nWe have the histogram of year distribution. \n\nMost of the shows are 1 season. \n\ndirector has 2389 (30.7%) missing values\n\ncast has 718 (9.2%) missing values\n\ncountry has 507 (6.5%) missing values","500eee9a":"### TV Shows and Movies Distribution","3da0dd67":"# Thank you for reading and an upvote will be really appreciated.","91611936":"Here is a \"tricky\" job: We want to find the actor who were in most shows\/movies. \nTo do this, we have to manipulate the string format cells and the entire dataframe with other types like dictionary, set or list. ","4065fb6c":"![image.png](attachment:image.png)","6531759b":"### Word Maps of Descriptions","75339771":"### Director and Cast","fc489b47":"Generally both movies and shows are realted with families and friends. They have different emphasis on topics. ","7238df25":"Certainly this cannot be the report we want to submit to our manager. \nNow let us figure out how to make the charts PowerPoint level. ","99a6786d":"### Rating Distribution","7222cdf9":"The top four countries are United States, India, United Kingdom, and South Korea. We might want to see the growth rates of movies and shows in these countries in the last a few years. "}}