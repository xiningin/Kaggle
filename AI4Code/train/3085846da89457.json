{"cell_type":{"29d9fc59":"code","578bd656":"code","9c92231b":"code","382d07b2":"code","8f1ce0af":"code","89e03f7f":"code","89e1d0ca":"code","6e6eba1d":"code","766b1ce5":"code","1fcf9a40":"markdown","c6c4b1e5":"markdown","40f05e37":"markdown","7fa70693":"markdown","ab0d72b2":"markdown","c70e3281":"markdown","cfab960d":"markdown","3ff2ae3e":"markdown","462c9160":"markdown"},"source":{"29d9fc59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n!pip install mlxtend\n!pip install openpyxl\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mlxtend.frequent_patterns import apriori, association_rules # association rules\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\n\ndf_ = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf = df_.copy()\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","578bd656":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\ndef retail_data_prep(dataframe):\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe\n\n# Data Preprocessing\ndf = retail_data_prep(df)\ndf.head()\n","9c92231b":"df_grm = df[df[\"Country\"] == \"Germany\"]\n\ngrm_inv_pro_df = df_grm.pivot_table(index=\"Invoice\", columns=\"StockCode\", values=\"Quantity\", aggfunc=\"sum\").\\\n    fillna(0).\\\n    applymap(lambda x : 1 if x > 0 else 0)\ngrm_inv_pro_df.head()","382d07b2":"df[df[\"StockCode\"]== \"POST\"]\ngrm_inv_pro_df.drop(\"POST\", axis=1, inplace=True)","8f1ce0af":"grm_sup_val = apriori(grm_inv_pro_df, min_support=0.01, use_colnames=True)\ngrm_sup_val.sort_values(\"support\", ascending=False).head(10)","89e03f7f":"grm_rules = association_rules(grm_sup_val, metric=\"support\", min_threshold=0.01)\ngrm_rules = grm_rules.sort_values(\"support\", ascending=False)","89e1d0ca":"def arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_grm_rules = rules_df.sort_values(\"support\", ascending=False)\n    recommendation_list = []\n\n    for i, product in sorted_grm_rules[\"antecedents\"].items():\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_grm_rules.iloc[i][\"consequents\"]))\n\n    recommendation_list = list({item for item_list in recommendation_list for item in item_list})\n\n    return recommendation_list[:rec_count]","6e6eba1d":"def check_id(dataframe, stock_code):\n    product_name = []\n    if type(stock_code) == list:  # If the entered stockCode is a list, it returns the product names of the stockcodes in the list.\n        for i in stock_code:\n            product_name.append(dataframe[dataframe[\"StockCode\"] == i][[\"Description\"]].values[0].tolist())\n    else:\n        product_name.append(dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist())\n    print(*product_name)","766b1ce5":"print(check_id(df, arl_recommender(grm_rules, 21987, 3)))\nprint(check_id(df, arl_recommender(grm_rules, 23235, 3)))\nprint(check_id(df, arl_recommender(grm_rules, 22747, 3)))","1fcf9a40":"#### Since POST specifies the shipping cost of the product, I will exclude it from the dataset. Since the frequency of sending each product received by cargo is high, the rules will be misleading.","c6c4b1e5":"The probability of seeing each product individually and the probability of seeing the products together are calculated. (Support)","40f05e37":"Returns the names of the products whose stockcodes are given from the dataset.","7fa70693":"#### Association rules are created with the apriori algorithm\n#### The generated rules are sorted in descending order of support values.","ab0d72b2":"#### We will produce the decision rules for Germany customers and create an invoice-product matrix over Germany users so that transactions can be carried out quickly.","c70e3281":"## Business Problem :\nSuggesting products to users at the basket stage.\n\n## Dataset Story:\nThe dataset named Online Retail II includes the sales of an UK-based online store between 01\/12\/2009\u201309\/12\/2011. The product catalog of this company includes souvenirs. They can also be considered as promotional items.\n\n## Variables:\nInvoiceNo \u2014 Invoice Number If this code starts with C, it means that the transaction has been cancelled.\n\nStockCode \u2014 Product code Unique number for each product.\n\nDescription \u2014 Product name\n\nQuantity \u2014 Number of products Indicates how many of the products on the invoices have been sold.\n\nInvoiceDate \u2014 Invoice date\n\nUnitPrice \u2014 Invoice price (Sterling)\n\nCustomerID \u2014 Unique customer number\n\nCountry \u2014 Country name\n\n![arl](https:\/\/user-images.githubusercontent.com\/49685592\/151198464-41fddca5-7581-43b4-96bb-643189e5fb01.png)","cfab960d":"In the random product selection, I chose 3 products as individual products may come and therefore product cannot be recommended. The most common products of these selected products were suggested.","3ff2ae3e":"Support values are sorted in descending order and the most frequently seen products are kept in the list.","462c9160":"Association rules are created for the products whose support values \u200b\u200bare calculated."}}