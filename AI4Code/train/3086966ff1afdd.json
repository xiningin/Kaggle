{"cell_type":{"4abdef8c":"code","9c471542":"code","533c0b73":"code","af81bae1":"code","8e49f91b":"code","c63352d8":"code","4192bbcc":"code","d296c6d7":"code","4fd5022a":"markdown","510b96c5":"markdown","cc6815b2":"markdown","1148d45e":"markdown","4a295539":"markdown","25f7e2f1":"markdown","700ea32b":"markdown","46b1c7c2":"markdown","5cb50532":"markdown"},"source":{"4abdef8c":"import numpy as np\nimport pandas as pd\nimport re\nfrom tqdm.notebook import tqdm\n\ntqdm().pandas()","9c471542":"train = pd.read_csv(\"..\/input\/bms-molecular-translation\/train_labels.csv\")\nprint(train.shape)\ntrain.head()","533c0b73":"train.InChI = train.InChI.progress_apply(lambda x: re.findall(r'([A-Z][a-z]?)',x.split('\/')[1]) )\ntrain.head()","af81bae1":"all_el = set()\ntrain.InChI.progress_apply(lambda x: all_el.update(x))\nprint(len(all_el), all_el)","8e49f91b":"elements = sorted(all_el)\ncounts = []\nfor e in elements:\n    counts.append((np.sum(train.InChI.progress_apply(lambda x: e in x)), e))\ncounts.sort(reverse=True)\nfor n, e in counts:\n    print(f'Element {e} count: {n} (approx {n*100\/train.shape[0]:.4}%)')","c63352d8":"groupings = {}\nfor e in elements:\n    groupings[e] = train.InChI.progress_apply(\n        lambda x: e in x\n    )","4192bbcc":"group_sets = {}\nfor e in elements:\n    group_sets[e] = set(train.image_id.loc[groupings[e]])","d296c6d7":"#Intersections of each elements:\npair_groupings = []\nfor e1 in elements:\n    for e2 in elements:\n        if e1 == e2:\n            continue\n        n = len(group_sets[e1].intersection(group_sets[e2]))\n        pair_groupings.append((n, e1, e2))\n        \npair_groupings.sort(reverse=True)\nfor n, e1, e2 in pair_groupings[0::2]:\n    print(f'Lines with both {e1} and {e2}:\\t{n}\\t{100*n\/train.shape[0]:.4}%')","4fd5022a":"Next, we will be counting all lines with the presence of specific elements.","510b96c5":"# End","cc6815b2":"The elements in the inchi can be extracted from the Chemical composition which is the second entry when the InChI is split by the `\/` character.","1148d45e":"Using this information, we can select part of the dataset which contains certain elements only. It can be useful when we want to minimize the train data size which spans over 2.4 Million entries.\n\nI hope this notebook helps someone out there!","4a295539":"After grouping them, we will now gather pairwise information from each pair of element.","25f7e2f1":"We will now gather all the unique elements.","700ea32b":"# Top","46b1c7c2":"## Extract Elements from Inchi","5cb50532":"We will now group each entry based on the presence of specific elements."}}