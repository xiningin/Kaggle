{"cell_type":{"bd286e9a":"code","f659f12c":"code","7a23032a":"code","cae910bc":"code","27297454":"code","cc501ffc":"code","631e0460":"code","ce641922":"code","95174add":"code","c6ac5114":"code","663210ba":"code","3f18a48c":"code","fe08a402":"code","17f105f3":"code","14f8f3e4":"code","9fdf0512":"code","880a1e57":"code","ca4bec22":"code","06738d82":"code","6a2ff310":"code","93c9c07a":"code","09b26a99":"code","e73eeb59":"code","7b82382c":"code","1dd02d3d":"code","2c5b672a":"code","485c11f4":"code","c79c94da":"code","bc695073":"code","b33cb291":"code","dd59897b":"code","219195b0":"code","2a06d829":"code","3b7c1071":"code","dc650835":"code","684796c7":"code","93f2dc82":"code","32d0c82e":"code","bdc81700":"code","6336740e":"code","399ddb85":"code","57a91f05":"code","80a786c9":"code","1f4eb9a5":"code","2e4b4677":"code","afce709b":"code","28c4a28b":"code","b17cb977":"code","e487847f":"code","d4b7a932":"code","6d27e4a5":"code","f1b4b25b":"code","741c8f75":"code","afaa2960":"code","d06fca7e":"code","dc016d97":"code","2aae857c":"code","d7483ff4":"code","dbd10231":"code","0e2452b2":"code","706fe4b7":"markdown","7d9627f6":"markdown","9fc9c64b":"markdown","20c73001":"markdown","674969c0":"markdown","0e7853ee":"markdown","5fe5ecdd":"markdown","fba61dbb":"markdown","fe8475dc":"markdown","fe0d5856":"markdown","24e2dd7b":"markdown","258fa044":"markdown","af183f42":"markdown","21d35f91":"markdown","76f8476a":"markdown","a03d71d2":"markdown","196d18f8":"markdown","bcf3312a":"markdown","02d724f3":"markdown","f2c7def6":"markdown","51267b80":"markdown","b44c8c7c":"markdown","d03f591b":"markdown","39b5ad22":"markdown","1a42499c":"markdown","faea621a":"markdown","419fe2f9":"markdown","8b154aca":"markdown","0a656ec0":"markdown","64085fe0":"markdown","1f3d242e":"markdown","f84d1b35":"markdown","5fdca6f8":"markdown","48e198e8":"markdown","bf9a16a0":"markdown","7c3e38e2":"markdown","62eae40c":"markdown","7e6577c2":"markdown","03f42121":"markdown","1edd4467":"markdown","4aa00d17":"markdown","b06d6149":"markdown","3fb8a7a5":"markdown","fba265bf":"markdown","73995c36":"markdown","63bb113f":"markdown","17191cfd":"markdown","d82b6160":"markdown","8ded218a":"markdown","29dd3ef9":"markdown","ae1adce9":"markdown","108d7264":"markdown","983fb19b":"markdown","b100efaf":"markdown"},"source":{"bd286e9a":"# Imports\nimport torch\nimport torchvision\nfrom torchvision.datasets import MNIST","f659f12c":"# Download training dataset\ndataset = MNIST(root='data\/', download=True)","7a23032a":"len(dataset)","cae910bc":"test_dataset = MNIST(root='data\/', train=False)\nlen(test_dataset)","27297454":"dataset[0]","cc501ffc":"import matplotlib.pyplot as plt\n%matplotlib inline","631e0460":"image, label = dataset[0]\nplt.imshow(image, cmap='gray')\nprint('Label:', label)","ce641922":"image, label = dataset[10]\nplt.imshow(image, cmap='gray')\nprint('Label:', label)","95174add":"import torchvision.transforms as transforms","c6ac5114":"# MNIST dataset (images and labels)\ndataset = MNIST(root='data\/', \n                train=True,\n                transform=transforms.ToTensor())","663210ba":"img_tensor, label = dataset[0]\nprint(img_tensor.shape, label)","3f18a48c":"print(img_tensor[:,10:15,10:15])\nprint(torch.max(img_tensor), torch.min(img_tensor))","fe08a402":"# Plot the image by passing in the 28x28 matrix\nplt.imshow(img_tensor[0,10:15,10:15], cmap='gray');","17f105f3":"from torch.utils.data import random_split\n\ntrain_ds, val_ds = random_split(dataset, [50000, 10000])\nlen(train_ds), len(val_ds)","14f8f3e4":"from torch.utils.data import DataLoader\n\nbatch_size = 128\n\ntrain_loader = DataLoader(train_ds, batch_size, shuffle=True)\nval_loader = DataLoader(val_ds, batch_size)","9fdf0512":"!pip install jovian --upgrade --quiet","880a1e57":"import jovian","ca4bec22":"# jovian.commit(project='03-logistic-regression', environment=None)","06738d82":"import torch.nn as nn\n\ninput_size = 28*28\nnum_classes = 10\n\n# Logistic regression model\nmodel = nn.Linear(input_size, num_classes)","6a2ff310":"print(model.weight.shape)\nmodel.weight","93c9c07a":"print(model.bias.shape)\nmodel.bias","09b26a99":"for images, labels in train_loader:\n    print(labels)\n    print(images.shape)\n    outputs = model(images)\n    break","e73eeb59":"class MnistModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(input_size, num_classes)\n        \n    def forward(self, xb):\n        xb = xb.reshape(-1, 784)\n        out = self.linear(xb)\n        return out\n    \nmodel = MnistModel()","7b82382c":"print(model.linear.weight.shape, model.linear.bias.shape)\nlist(model.parameters())","1dd02d3d":"for images, labels in train_loader:\n    outputs = model(images)\n    break\n\nprint('outputs.shape : ', outputs.shape)\nprint('Sample outputs :\\n', outputs[:2].data)","2c5b672a":"import torch.nn.functional as F","485c11f4":"# Apply softmax for each output row\nprobs = F.softmax(outputs, dim=1)\n\n# Look at sample probabilities\nprint(\"Sample probabilities:\\n\", probs[:3].data)\n\n# Add up the probabilities of an output row\nprint(\"Sum: \", torch.sum(probs[0]).item())","c79c94da":"max_probs, preds = torch.max(probs, dim=1)\nprint(preds)\nprint(max_probs)","bc695073":"labels","b33cb291":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","dd59897b":"accuracy(outputs, labels)","219195b0":"loss_fn = F.cross_entropy","2a06d829":"# Loss for current batch of data\nloss = loss_fn(outputs, labels)\nprint(loss)","3b7c1071":"class MnistModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(input_size, num_classes)\n        \n    def forward(self, xb):\n        xb = xb.reshape(-1, 784)\n        out = self.linear(xb)\n        return out\n    \n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss, 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))\n    \nmodel = MnistModel()","dc650835":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","684796c7":"result0 = evaluate(model, val_loader)\nresult0","93f2dc82":"history1 = fit(5, 0.05, model, train_loader, val_loader)","32d0c82e":"history2 = fit(10, 0.001, model, train_loader, val_loader)","bdc81700":"history3 = fit(5, 0.0001, model, train_loader, val_loader)","6336740e":"# Replace these values with your results\nhistory = [result0] + history1 + history2 + history3\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs');","399ddb85":"# Replace these values with your results\nhistory = [result0] + history1 + history2 + history3\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs');","57a91f05":"# Replace these values with your results\nhistory = [result0] + history1 + history2 + history3\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs');","80a786c9":"jovian.log_metrics(val_acc=history[-1]['val_acc'], val_loss=history[-1]['val_loss'])","1f4eb9a5":"jovian.commit(project='logistic-regression-pytorch', environment=None)","2e4b4677":"# Define test dataset\ntest_dataset = MNIST(root='data\/', \n                     train=False,\n                     transform=transforms.ToTensor())","afce709b":"img, label = test_dataset[0]\nplt.imshow(img[0], cmap='gray')\nprint('Shape:', img.shape)\nprint('Label:', label)","28c4a28b":"img.unsqueeze(0).shape","b17cb977":"def predict_image(img, model):\n    xb = img.unsqueeze(0)\n    yb = model(xb)\n    _, preds  = torch.max(yb, dim=1)\n    return preds[0].item()","e487847f":"img, label = test_dataset[0]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","d4b7a932":"img, label = test_dataset[10]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","6d27e4a5":"img, label = test_dataset[193]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","f1b4b25b":"img, label = test_dataset[1839]\nplt.imshow(img[0], cmap='gray')\nprint('Label:', label, ', Predicted:', predict_image(img, model))","741c8f75":"test_loader = DataLoader(test_dataset, batch_size=256)\nresult = evaluate(model, test_loader)\nresult","afaa2960":"torch.save(model.state_dict(), 'mnist-logistic.pth')","d06fca7e":"model.state_dict()","dc016d97":"model2 = MnistModel()\nmodel2.load_state_dict(torch.load('mnist-logistic.pth'))\nmodel2.state_dict()","2aae857c":"test_loader = DataLoader(test_dataset, batch_size=256)\nresult = evaluate(model2, test_loader)\nresult","d7483ff4":"img, label = test_dataset[0]\nplt.imshow(img[0], cmap='gray')\n\nprint('Label:', label, ', Predicted:', predict_image(img, model))","dbd10231":"i = 0\nfor x in test_dataset:\n    img, label = test_dataset[i]\n    print('Label:', label, ', Predicted:', predict_image(img, model))\n    i = i+1\n    if(i==50):\n        break","0e2452b2":"jovian.commit(project='logistic-regression-pytorch', environment=None, outputs=['mnist-logistic.pth'])","706fe4b7":"Finally, we can determine the predicted label for each image by simply choosing the index of the element with the highest probability in each output row. This is done using `torch.max`, which returns the largest element and the index of the largest element along a particular dimension of a tensor.","7d9627f6":"It's important to choose a random sample for creating a validation set, because training data is often ordered by the target labels i.e. images of 0s, followed by images of 1s, followed by images of 2s and so on. If we were to pick a 20% validation set simply by selecting the last 20% of the images, the validation set would only consist of images of 8s and 9s, whereas the training set would contain no images of 8s and 9s. This would make it impossible to train a good model using the training set, which also performs well on the validation set (and on real world data).\n\nWe can now created data loaders to help us load the data in batches. We'll use a batch size of 128.","9fc9c64b":"It's a pair, consisting of a 28x28 image and a label. The image is an object of the class `PIL.Image.Image`, which is a part of the Python imaging library [Pillow](https:\/\/pillow.readthedocs.io\/en\/stable\/). We can view the image within Jupyter using [`matplotlib`](https:\/\/matplotlib.org\/), the de-facto plotting and graphing library for data science in Python.","20c73001":"Since we've trained our model for a long time and achieved a resonable accuracy, it would be a good idea to save the weights and bias matrices to disk, so that we can reuse the model later and avoid retraining from scratch. Here's how you can save the model.","674969c0":"For each of the 100 input images, we get 10 outputs, one for each class. As discussed earlier, we'd like these outputs to represent probabilities, but for that the elements of each output row must lie between 0 to 1 and add up to 1, which is clearly not the case here. \n\nTo convert the output rows into probabilities, we use the softmax function, which has the following formula:\n\n![softmax](https:\/\/i.imgur.com\/EAh9jLN.png)\n\nFirst we replace each element `yi` in an output row by `e^yi`, which makes all the elements positive, and then we divide each element by the sum of all elements to ensure that they add up to 1. \n\nWhile it's easy to implement the softmax function (you should try it!), we'll use the implementation that's provided within PyTorch, because it works well with multidimensional tensors (a list of output rows in our case).","0e7853ee":"Here's a sample image from the dataset.","5fe5ecdd":"It's quite clear from the above picture that the model probably won't cross the accuracy threshold of 90% even after training for a very long time. One possible reason for this is that the learning rate might be too high. It's possible that the model's paramaters are \"bouncing\" around the optimal set of parameters that have the lowest loss. You can try reducing the learning rate and training for a few more epochs to see if it helps.\n\nThe more likely reason that **the model just isn't powerful enough**. If you remember our initial hypothesis, we have assumed that the output (in this case the class probabilities) is a **linear function** of the input (pixel intensities), obtained by perfoming a matrix multiplication with the weights matrix and adding the bias. This is a fairly weak assumption, as there may not actually exist a linear relationship between the pixel intensities in an image and the digit it represents. While it works reasonably well for a simple dataset like MNIST (getting us to 85% accuracy), we need more sophisticated models that can capture non-linear relationships between image pixels and labels for complex tasks like recognizing everyday objects, animals etc. \n\nThis would be a good time to save our work. Along with the notebook, we can also record some metrics from our training.","fba61dbb":"When this statement is executed for the first time, it downloads the data to the `data\/` directory next to the notebook and creates a PyTorch `Dataset`. On subsequent executions, the download is skipped as the data is already downloaded. Let's check the size of the dataset.","fe8475dc":"The softmax function is included in the `torch.nn.functional` package, and requires us to specify a dimension along which the softmax must be applied.","fe0d5856":"While we have been tracking the overall accuracy of a model so far, it's also a good idea to look at model's results on some sample images. Let's test out our model with some images from the predefined test dataset of 10000 images. We begin by recreating the test dataset with the `ToTensor` transform.","24e2dd7b":"Identifying where our model performs poorly can help us improve the model, by collecting more training data, increasing\/decreasing the complexity of the model, and changing the hypeparameters.\n\nAs a final step, let's also look at the overall loss and accuracy of the model on the test set.","258fa044":"Along with importing `matplotlib`, a special statement `%matplotlib inline` is added to indicate to Jupyter that we want to plot the graphs within the notebook. Without this line, Jupyter will show the image in a popup. Statements starting with `%` are called IPython magic commands, and are used to configure the behavior of Jupyter itself. You can find a full list of magic commands here: https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html .\n\nLet's look at a couple of images from the dataset.","af183f42":"PyTorch datasets allow us to specify one or more transformation functions which are applied to the images as they are loaded. `torchvision.transforms` contains many such predefined functions, and we'll use the `ToTensor` transform to convert images into PyTorch tensors.","21d35f91":"The values range from 0 to 1, with 0 representing black, 1 white and the values in between different shades of grey. We can also plot the tensor as an image using `plt.imshow`.","76f8476a":"## Training the model\n\nNow that we have defined the data loaders, model, loss function and optimizer, we are ready to train the model. The training process is identical to linear regression, with the addition of a \"validation phase\" to evaluate the model in each epoch. Here's what it looks like in pseudocode:\n\n```\nfor epoch in range(num_epochs):\n    # Training phase\n    for batch in train_loader:\n        # Generate predictions\n        # Calculate loss\n        # Compute gradients\n        # Update weights\n        # Reset gradients\n    \n    # Validation phase\n    for batch in val_loader:\n        # Generate predictions\n        # Calculate loss\n        # Calculate metrics (accuracy etc.)\n    # Calculate average validation loss & metrics\n    \n    # Log epoch, loss & metrics for inspection\n```\n\nSome parts of the training loop are specific the specific problem we're solving (e.g. loss function, metrics etc.) whereas others are generic and can be applied to any deep learning problem. Let's impelment the problem-specific parts within our `MnistModel` class:","a03d71d2":"`img.unsqueeze` simply adds another dimension at the begining of the 1x28x28 tensor, making it a 1x1x28x28 tensor, which the model views as a batch containing a single image.\n\nLet's try it out with a few images.","196d18f8":"Let's define a helper function `predict_image`, which returns the predicted label for a single image tensor.","bcf3312a":"## Summary and Further Reading\n\nWe've created a fairly sophisticated training and evaluation pipeline in this tutorial. Here's a list of the topics we've covered:\n\n* Working with images in PyTorch (using the MNIST dataset)\n* Splitting a dataset into training, validation and test sets\n* Creating PyTorch models with custom logic by extending the `nn.Module` class\n* Interpreting model ouputs as probabilities using softmax, and picking predicted labels\n* Picking a good evaluation metric (accuracy) and loss function (cross entropy) for classification problems\n* Setting up a training loop that also evaluates the model using the validation set\n* Testing the model manually on randomly picked examples \n* Saving and loading model checkpoints to avoid retraining from scratch\n\nThere's a lot of scope to experiment here, and I encourage you to use the interactive nature of Jupyter to play around with the various parameters. Here are a few ideas:\n\n* Try making the validation set smaller or larger, and see how it affects the model.\n* Try changing the learning rate and see if you can achieve the same accuracy in fewer epochs.\n* Try changing the batch size. What happens if you use too high a batch size, or too low?\n* Modify the `fit` function to also track the overall loss and accuracy on the training set, and see how it compares with the validation loss\/accuracy. Can you explain why it's lower\/higher?\n* Train with a small subset of the data, and see if you can reach a similar level of accuracy.\n* Try building a model for a different dataset, such as the [CIFAR10 or CIFAR100 datasets](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html).\n\nHere are some references for further reading:\n* For a more mathematical treatment, see the popular [Machine Learning](https:\/\/www.coursera.org\/lecture\/machine-learning\/classification-wlPeP) course on Coursera. Most of the images used in this tutorial series have been taken from this course.\n* The training loop defined in this notebook was inspired from [FastAI development notebooks](https:\/\/github.com\/fastai\/fastai_docs\/blob\/master\/dev_nb\/001a_nn_basics.ipynb) which contain a wealth of other useful stuff if you can read and understand the code.\n* For a deep dive into softmax and cross entropy, see [this blog post on DeepNotes](https:\/\/deepnotes.io\/softmax-crossentropy).\n\n\nWith this we complete our discussion of logistic regression, and we're ready to move on to the next topic: *feedforward neural networks*!","02d724f3":"Our new custom model can be used in the exact same way as before. Let's see if it works.","f2c7def6":"Just as with linear regression, we need a way to evaluate how well our model is performing. A natural way to do this would be to find the percentage of labels that were predicted correctly i.e. the **accuracy** of the predictions. ","51267b80":"We expect this to be similar to the accuracy\/loss on the validation set. If not, we might need a better validation set that has similar data and distribution as the test set (which often comes from real world data).","b44c8c7c":"Note that we need to pass just the 28x28 matrix to `plt.imshow`, without a channel dimension. We also pass a color map (`cmap=gray`) to indicate that we want to see a grayscale image.","d03f591b":"The image is now converted to a 1x28x28 tensor. The first dimension is used to keep track of the color channels. Since images in the MNIST dataset are grayscale, there's just one channel. Other datasets have images with color, in which case there are 3 channels: red, green and blue (RGB). Let's look at some sample values inside the tensor:","39b5ad22":"The initial accuracy is around 10%, which is what one might expect from a randomly intialized model (since it has a 1 in 10 chance of getting a label right by guessing randomly). Also note that we are using the `.format` method with the message string to print only the first four digits after the decimal point.\n\nWe are now ready to train the model. Let's train for 5 epochs and look at the results.","1a42499c":"The numbers printed above are the predicted labels for the first batch of training images. Let's compare them with the actual labels.","faea621a":"To load the model weights, we can instante a new object of the class `MnistModel`, and use the `.load_state_dict` method.","419fe2f9":"Just as a sanity check, let's verify that this model has the same loss and accuracy on the test set as before.","8b154aca":"While the accuracy is a great way for us (humans) to evaluate the model, it can't be used as a loss function for optimizing our model using gradient descent, for the following reasons:\n\n1. It's not a differentiable function. `torch.max` and `==` are both non-continuous and non-differentiable operations, so we can't use the accuracy for computing gradients w.r.t the weights and biases.\n\n2. It doesn't take into account the actual probabilities predicted by the model, so it can't provide sufficient feedback for incremental improvements. \n\nDue to these reasons, accuracy is a great **evaluation metric** for classification, but not a good loss function. A commonly used loss function for classification problems is the **cross entropy**, which has the following formula:\n\n![cross-entropy](https:\/\/i.imgur.com\/VDRDl1D.png)\n\nWhile it looks complicated, it's actually quite simple:\n\n* For each output row, pick the predicted probability for the correct label. E.g. if the predicted probabilities for an image are `[0.1, 0.3, 0.2, ...]` and the correct label is `1`, we pick the corresponding element `0.3` and ignore the rest.\n\n* Then, take the [logarithm](https:\/\/en.wikipedia.org\/wiki\/Logarithm) of the picked probability. If the probability is high i.e. close to 1, then its logarithm is a very small negative value, close to 0. And if the probability is low (close to 0), then the logarithm is a very large negative value. We also multiply the result by -1, which results is a large postive value of the loss for poor predictions.\n\n* Finally, take the average of the cross entropy across all the output rows to get the overall loss for a batch of data.\n\nUnlike accuracy, cross-entropy is a continuous and differentiable function that also provides good feedback for incremental improvements in the model (a slightly higher probability for the correct label leads to a lower loss). This makes it a good choice for the loss function. \n\nAs you might expect, PyTorch provides an efficient and tensor-friendly implementation of cross entropy as part of the `torch.nn.functional` package. Moreover, it also performs softmax internally, so we can directly pass in the outputs of the model without converting them into probabilities.","0a656ec0":"The `==` performs an element-wise comparison of two tensors with the same shape, and returns a tensor of the same shape, containing 0s for unequal elements, and 1s for equal elements. Passing the result to `torch.sum` returns the number of labels that were predicted correctly. Finally, we divide by the total number of images to get the accuracy. \n\nNote that we don't need to apply softmax to the outputs, since it doesn't change the relative order of the results. This is because `e^x` is an increasing function i.e. if `y1 > y2`, then `e^y1 > e^y2` and the same holds true after averaging out the values to get the softmax.\n\nLet's calculate the accuracy of the current model, on the first batch of data. Obviously, we expect it to be pretty bad.","64085fe0":"## Saving and loading the model","1f3d242e":"It's evident that these images are quite small in size, and recognizing the digits can sometimes be hard even for the human eye. While it's useful to look at these images, there's just one problem here: PyTorch doesn't know how to work with images. We need to convert the images into tensors. We can do this by specifying a transform while creating our dataset.","f84d1b35":"`jovian.commit` uploads the notebook to your [Jovian.ml](https:\/\/jovian.ml) account and creates a sharable link for the notebook. You can use this link to share your work and let anyone reproduce it easily with the jovian clone command. Jovian also includes a powerful commenting interface, so you (and others) can discuss & comment on specific parts of your notebook.","5fdca6f8":"The dataset has 60,000 images which can be used to train the model. There is also an additonal test set of 10,000 images which can be created by passing `train=False` to the `MNIST` class.","48e198e8":"Clearly, the predicted and the actual labels are completely different. Obviously, that's because we have started with randomly initialized weights and biases. We need to train the model i.e. adjust the weights using gradient descent to make better predictions.","bf9a16a0":"That's a great result! With just 5 epochs of training, our model has reached an accuracy of over 80% on the validation set. Let's see if we can improve that by training for a few more epochs.","7c3e38e2":"Let's look at a sample element from the training dataset.","62eae40c":"While the accuracy does continue to increase as we train for more epochs, the improvements get smaller with every epoch. This is easier to see using a line graph.","7e6577c2":"## Evaluation Metric and Loss Function","03f42121":"Inside the `__init__` constructor method, we instantiate(represent) the weights and biases using `nn.Linear`. And inside the `forward` method, which is invoked when we pass a batch of inputs to the model, we flatten out the input tensor, and then pass it into `self.linear`.\n\n`xb.reshape(-1, 28*28)` indicates to PyTorch that we want a *view* of the `xb` tensor with two dimensions, where the length along the 2nd dimension is 28\\*28 (i.e. 784). One argument to `.reshape` can be set to `-1` (in this case the first dimension), to let PyTorch figure it out automatically based on the shape of the original tensor.\n\nNote that the model no longer has `.weight` and `.bias` attributes (as they are now inside the `.linear` attribute), but it does have a `.parameters` method which returns a list containing the weights and bias, and can be used by a PyTorch optimizer.","1edd4467":"## Commit and upload the notebook\n\nAs a final step, we can save and commit our work using the jovian library. Along with the notebook, we can also attach the weights of our trained model, so that we can use it later.","4aa00d17":"Although there are a total of 7850 parameters here, conceptually nothing has changed so far. Let's try and generate some outputs using our model. We'll take the first batch of 100 images from our dataset, and pass them into our model.","b06d6149":"In this tutorial, we'll use our existing knowledge of PyTorch and linear regression to solve a very different kind of problem: *image classification*. We'll use the famous [*MNIST Handwritten Digits Database*](http:\/\/yann.lecun.com\/exdb\/mnist\/) as our training dataset. It consists of 28px by 28px grayscale images of handwritten digits (0 to 9), along with labels for each image indicating which digit it represents. Here are some sample images from the dataset:\n\n![mnist-sample](https:\/\/i.imgur.com\/CAYnuo1.jpg)","3fb8a7a5":"We set `shuffle=True` for the training dataloader, so that the batches generated in each epoch are different, and this randomization helps generalize & speed up the training process. On the other hand, since the validation dataloader is used only for evaluating the model, there is no need to shuffle the images. \n\n\nBefore we move forward, let's save our progress by uploading our notebook to [Jovian.ml](https:\/\/www.jovian.ml)","fba265bf":"## Testing with individual images","73995c36":"This leads to an error, because our input data does not have the right shape. Our images are of the shape 1x28x28, but we need them to be vectors of size 784 i.e. we need to flatten them out. We'll use the `.reshape` method of a tensor, which will allow us to efficiently 'view' each image as a flat vector, without really chaging the underlying data.\n\nTo include this additional functionality within our model, we need to define a custom model, by extending the `nn.Module` class from PyTorch.","63bb113f":"Of course, this model is a lot larger than our previous model, in terms of the number of parameters. Let's take a look at the weights and biases.","17191cfd":"# Image Classification using Logistic Regression in\u00a0PyTorch","d82b6160":"## Model\n\nNow that we have prepared our data loaders, we can define our model.\n\n* A **logistic regression** model is almost identical to a linear regression model i.e. there are weights and bias matrices, and the output is obtained using simple matrix operations (`pred = x @ w.t() + b`). \n\n* Just as we did with linear regression, we can use `nn.Linear` to create the model instead of defining and initializing the matrices manually.\n\n* Since `nn.Linear` expects the each training example to be a vector, each `1x28x28` image tensor needs to be flattened out into a vector of size 784 (`28*28`), before being passed into the model. \n\n* The output for each image is vector of size 10, with each element of the vector signifying the probability a particular target label (i.e. 0 to 9). The predicted label for an image is simply the one with the highest probability.","8ded218a":"The `.state_dict` method returns an `OrderedDict` containing all the weights and bias matrices mapped to the right attributes of the model.","29dd3ef9":"Now we'll define an `evaluate` function, which will perform the validation phase, and a `fit` function which will peform the entire training process.","ae1adce9":"## Exploring the Data\n\nWe begin by importing `torch` and `torchvision`. `torchvision` contains some utilities for working with image data. It also contains helper classes to automatically download and import popular datasets like MNIST.","108d7264":"## Training and Validation Datasets\n\nWhile building real world machine learning models, it is quite common to split the dataset into 3 parts:\n\n1. **Training set** - used to train the model i.e. compute the loss and adjust the weights of the model using gradient descent.\n2. **Validation set** - used to evaluate the model while training, adjust hyperparameters (learning rate etc.) and pick the best version of the model.\n3. **Test set** - used to compare different models, or different types of modeling approaches, and report the final accuracy of the model.\n\nIn the MNIST dataset, there are 60,000 training images, and 10,000 test images. The test set is standardized so that different researchers can report the results of their models against the same set of images. \n\nSince there's no predefined validation set, we must manually split the 60,000 images into training and validation datasets. Let's set aside 10,000 randomly chosen images for validation. We can do this using the `random_spilt` method from PyTorch.","983fb19b":"The `fit` function records the validation loss and metric from each epoch and returns a history of the training process. This is useful for debuggin & visualizing the training process. Before we train the model, let's see how the model performs on the validation set with the initial set of randomly initialized weights & biases.\n\nConfigurations like batch size, learning rate etc. need to picked in advance while training machine learning models, and are called hyperparameters. Picking the right hyperparameters is critical for training an accurate model within a reasonable amount of time, and is an active area of research and experimentation. Feel free to try different learning rates and see how it affects the training process.","b100efaf":"Since the cross entropy is the negative logarithm of the predicted probability of the correct label averaged over all training samples, one way to interpret the resulting number e.g. `2.23` is look at `e^-2.23` which is around `0.1` as the predicted probability of the correct label, on average. *Lower the loss, better the model.*"}}