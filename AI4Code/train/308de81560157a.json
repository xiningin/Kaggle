{"cell_type":{"30ecd2db":"code","c3a5c622":"code","5259bf34":"code","019c4cf7":"code","e92ef162":"code","925d033f":"code","4edbf7b4":"code","67652c95":"code","785fd7ce":"code","dae73fd5":"code","008f29cf":"code","241ea385":"code","a3830a34":"code","45e243eb":"code","e81ec451":"code","a4d1698d":"code","32d00414":"code","126690b7":"markdown"},"source":{"30ecd2db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c3a5c622":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# \u5b89\u5fbd\u7701.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('\/kaggle\/input\/wuhannovelcoronavirus2019\/data_new\/\u6cb3\u5357\u7701.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = '\u6cb3\u5357\u7701.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","5259bf34":"df.head()","019c4cf7":"df.dtypes","e92ef162":"df[\"suspectedCount\"].plot.hist()\nplt.show()","925d033f":"df[\"confirmedCount\"].plot.box()\nplt.show()","4edbf7b4":"sns.pairplot(df, x_vars=['suspectedCount'], y_vars='deadCount', markers=\"+\", size=4)\nplt.show()","67652c95":"dfcorr=df.corr()\ndfcorr","785fd7ce":"sns.heatmap(dfcorr,annot=True,cmap='Reds')\nplt.show()","dae73fd5":"fig, axes = plt.subplots(1, 1, figsize=(12, 4))\nsns.boxplot(x='deadCount', y='locationId', data=df, showfliers=False);","008f29cf":"fig=sns.lmplot(x=\"confirmedCount\", y=\"locationId\",data=df)","241ea385":"# venn2\nfrom matplotlib_venn import venn2\nlocationId = df.iloc[:,0]\ncuredId = df.iloc[:,1]\nsuspectedCount = df.iloc[:,2]\ndeadCount = df.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(locationId)-15, len(curedId)-15, 15), set_labels = ('locationId', 'curedCount'))\nplt.show()","a3830a34":"df.plot.area(y=['locationId','curedCount','suspectedCount','deadCount'],alpha=0.4,figsize=(12, 6));","45e243eb":"sns.barplot(x=df['curedCount'].value_counts().index,y=df['curedCount'].value_counts())","e81ec451":"#codes from PSVishnu @psvishnu\nhospital = [\n    'suspectedCount','curedCount']","a4d1698d":"sns.pairplot(data=df,diag_kind='kde',vars=hospital,hue='locationId')\nplt.show()","32d00414":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.cityName)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","126690b7":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke"}}