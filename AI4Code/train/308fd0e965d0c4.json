{"cell_type":{"2a04ea51":"code","32027e96":"code","7ce4a9c4":"code","63ca775c":"code","da1e5a32":"code","9b2aff6d":"code","b7139a1e":"code","932ec90c":"code","e15daad2":"code","98a793bb":"code","06001f6e":"code","a94d0f28":"code","24810beb":"code","006c20d8":"code","ca42cbd7":"code","f102c44b":"code","47b5d6a7":"code","0c8da08e":"markdown"},"source":{"2a04ea51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","32027e96":"train_data=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","7ce4a9c4":"import seaborn as sns\nimport matplotlib.pyplot as plt","63ca775c":"train_data.info()","da1e5a32":"train_data.isnull().sum()","9b2aff6d":"train_data[train_data['Embarked'].isnull()]","b7139a1e":"sns.histplot(train_data.Age,kde=True)\nplt.show()","932ec90c":"m= sns.FacetGrid(train_data, col='Pclass')\nm.map(sns.histplot, \"Age\")","e15daad2":"g = sns.FacetGrid(train_data, col='Embarked', row = 'Survived')\ng.map(sns.histplot, \"Pclass\")","98a793bb":"sns.scatterplot(x = train_data.Fare, y = train_data.Age)","06001f6e":"sns.heatmap(train_data.corr(), annot=True, fmt=\".2f\")\nplt.show()","a94d0f28":"train_data.groupby('Sex')['Age'].mean()","24810beb":"test_data.groupby('Sex')['Age'].mean()","006c20d8":"train_data['Age']=train_data.groupby(\"Sex\")['Age'].transform(lambda x: x.fillna(x.mean()))\ntest_data['Age']=test_data.groupby(\"Sex\")['Age'].transform(lambda x: x.fillna(x.mean()))","ca42cbd7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_data['Sex'] = le.fit_transform(train_data.Sex)\n\ntrain_data.head()","f102c44b":"test_data['Sex'] = le.fit_transform(test_data.Sex)\n\ntest_data.head()","47b5d6a7":"from sklearn.ensemble import RandomForestClassifier\n\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","0c8da08e":"m=sns.FaceGrid(train_data,col='Pclass')\nm.map(sns.histplot,\"Age\")"}}