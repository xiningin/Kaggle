{"cell_type":{"51ce3919":"code","b205d2b7":"code","f3a28ad4":"code","3cc6abf9":"code","f4760887":"code","ec38a1ae":"code","7823ad2e":"code","ae9bf0a6":"markdown","f7cf1e4b":"markdown","13a0dcf4":"markdown","47b3ce15":"markdown","083aede7":"markdown"},"source":{"51ce3919":"import numpy as np \nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier","b205d2b7":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()","f3a28ad4":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","3cc6abf9":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","f4760887":"# xgboost params\nxgb_params = {\n    'max_depth': 6,\n    'n_estimators': 9500,\n    'subsample': 0.7,\n    'colsample_bytree': 0.2,\n    'colsample_bylevel': 0.6000000000000001,\n    'min_child_weight': 56.41980735551558,\n    'reg_lambda': 75.56651890088857,\n    'reg_alpha': 0.11766857055687065,\n    'gamma': 0.6407823221122686,\n    'booster': 'gbtree',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist',\n    'predictor': 'gpu_predictor',\n    'use_label_encoder': False\n}","ec38a1ae":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(test))\nxgb_oof = np.zeros(train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = XGBClassifier(**xgb_params)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, \n              y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=400,\n              verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    xgb_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","7823ad2e":"sub['target'] = predictions\nsub.to_csv(f'submission_xgboost_1.csv',index = False)\nnp.savez_compressed('oof_xgboost.npz', xgb_oof)","ae9bf0a6":"# Load dataset","f7cf1e4b":"# 5-fold model training and prediction","13a0dcf4":"# Model hyperparameters","47b3ce15":"# Imports","083aede7":"# Store submission and oof "}}