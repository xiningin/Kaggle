{"cell_type":{"25ed9324":"code","a144f9e5":"code","0e42c72b":"code","69a4efd8":"code","3211fc41":"code","d748825e":"code","e90a86b9":"code","1b70d2b0":"code","06800fe5":"code","59edd375":"code","4c5fe190":"code","f40828b7":"code","3e61c924":"code","7c5f74ea":"code","bdfe7cba":"code","6441330b":"code","2d883138":"code","84265e9e":"code","0e8d4a79":"code","47e10ebd":"code","3fdf1f0b":"code","0f8ee020":"code","0254bcbe":"code","7c1909cc":"code","4adc7709":"code","e1dbc4a2":"code","9b10b5ac":"code","8d7ea763":"code","b89f840d":"code","4ff93334":"code","66ea1972":"code","398fb000":"code","4291fec3":"code","4fe1bf6f":"code","eddd21ab":"code","484cba59":"code","acdb8b5f":"code","e237d4e5":"code","fa4cfd66":"code","1b011eba":"code","2ede4a43":"code","517fee6f":"code","5c1bbe3b":"code","69b0163c":"code","38f1e8f2":"code","d5972deb":"code","60cd9fd1":"code","57fc6129":"markdown","2c21882e":"markdown","0518bad7":"markdown","4d0c5c23":"markdown","6ed3ff1f":"markdown","2d305b99":"markdown","756e0661":"markdown","81035608":"markdown","9843743c":"markdown","51f445cd":"markdown","ce1e1f5e":"markdown"},"source":{"25ed9324":"import pandas as pd\nimport numpy as np\nimport shutil\nimport datetime\nfrom joblib import dump, load\nimport pyodbc\nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import make_scorer\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats\nimport lightgbm as lgb\nimport warnings\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nfrom joblib import dump, load","a144f9e5":"def Columnas_vacias(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        print (\"La tabla seleccionada con \" + str(df.shape[1]) + \" columnas.\\n\"      \n            \"Tiene \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columnas con valores nulos.\")\n        return mis_val_percent.sort_values(ascending=False).head(mis_val_table_ren_columns.shape[0])","0e42c72b":"X_test = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_inicial_test\/ib_base_inicial_test.csv\")\nsunat = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_sunat\/ib_base_sunat.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_inicial_train\/ib_base_inicial_train.csv\")\nrcc = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_rcc\/ib_base_rcc.csv\")\nreniec = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_reniec\/ib_base_reniec.csv\")\ndigital = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_digital\/ib_base_digital.csv\")\nvehicular = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_vehicular\/ib_base_vehicular.csv\")\ncampanias = pd.read_csv(\"\/kaggle\/input\/interbank-internacional-2019\/ib_base_campanias\/ib_base_campanias.csv\")","69a4efd8":"train=train[train['margen']>=-5]\ntrain=train[train['margen']<=1000]","3211fc41":"y_train = train[['codmes', 'id_persona', 'margen']].copy()\ny_train[\"prediction_id\"] = y_train[\"id_persona\"].astype(str) + \"_\" + y_train[\"codmes\"].astype(str)\n# y_train[\"target\"] = y_train[\"margen\"].astype(\"float32\")\ny_train = y_train.set_index(\"prediction_id\")\nX_train = train.drop([\"codtarget\", \"margen\"], axis=1)\nX_train[\"prediction_id\"] = X_train[\"id_persona\"].astype(str) + \"_\" + X_train[\"codmes\"].astype(str)\ndel train","d748825e":"X_train[\"Rt_linea_ingreso\"] = X_train[\"linea_ofrecida\"] \/ X_train[\"ingreso_neto\"]\nX_test[\"Rt_linea_ingreso\"] = X_test[\"linea_ofrecida\"] \/ X_test[\"ingreso_neto\"]\n\nX_train[\"Rt_cem_ingreso\"] = X_train[\"cem\"] \/ X_train[\"ingreso_neto\"]\nX_test[\"Rt_cem_ingreso\"] = X_test[\"cem\"] \/ X_test[\"ingreso_neto\"]\n\nX_train[\"Rt_cem_linea\"] = X_train[\"cem\"] \/ X_train[\"linea_ofrecida\"]\nX_test[\"Rt_cem_linea\"] = X_test[\"cem\"] \/ X_test[\"linea_ofrecida\"]\n\nX_train[\"Df_linea_ingreso\"] = X_train[\"linea_ofrecida\"]- X_train[\"ingreso_neto\"]\nX_test[\"Df_linea_ingreso\"] = X_test[\"linea_ofrecida\"] - X_test[\"ingreso_neto\"]\n\nX_train[\"Ahorro_neto\"] = X_train[\"linea_ofrecida\"]- X_train[\"ingreso_neto\"]-X_train[\"cem\"]\nX_test[\"Ahorro_neto\"] = X_test[\"linea_ofrecida\"] - X_test[\"ingreso_neto\"]-X_train[\"cem\"]","e90a86b9":"rcc.clasif.fillna(-9999, inplace=True)\nrcc.rango_mora.fillna(-9999, inplace=True)","1b70d2b0":"rcc['Rango_mora_final']=0\nrcc.loc[rcc['rango_mora']==-9999,'Rango_mora_final']=-9999\nrcc.loc[rcc['rango_mora']==1,'Rango_mora_final']=1\nrcc=rcc.drop(['rango_mora'],axis=1)","06800fe5":"rcc.producto.unique()","59edd375":"rcc['Producto_final']='Otros'\nrcc.loc[rcc['producto']=='PRESTAMOS COMERCIALES','Producto_final']='PRESTAMOS COMERCIALES'\nrcc.loc[rcc['producto']=='TARJETAS COMPRAS','Producto_final']='TARJETAS COMPRAS'\nrcc.loc[rcc['producto']=='TARJETAS EFECTIVO','Producto_final']='TARJETAS EFECTIVO'\nrcc.loc[rcc['producto']=='TARJETAS OTROS CONCEPTOS','Producto_final']='TARJETAS OTROS CONCEPTOS'\nrcc.loc[rcc['producto']=='LINEA TOTAL TC','Producto_final']='LINEA TOTAL TC'\nrcc.loc[rcc['producto']=='PRESTAMO PERSONAL','Producto_final']='PRESTAMO PERSONAL'\nrcc=rcc.drop(['producto'],axis=1)","4c5fe190":"rcc['Cod_banco_final']='Otros'\nrcc.loc[rcc['cod_banco']==40,'Cod_banco_final']='COD_40'\nrcc.loc[rcc['cod_banco']==16,'Cod_banco_final']='COD_16'\nrcc.loc[rcc['cod_banco']==66,'Cod_banco_final']='COD_66'\nrcc.loc[rcc['cod_banco']==20,'Cod_banco_final']='COD_20'\nrcc.loc[rcc['cod_banco']==28,'Cod_banco_final']='COD_28'\nrcc.loc[rcc['cod_banco']==36,'Cod_banco_final']='COD_36'\nrcc.loc[rcc['cod_banco']==7,'Cod_banco_final']='COD_7'\nrcc.loc[rcc['cod_banco']==43,'Cod_banco_final']='COD_43'\nrcc.loc[rcc['cod_banco']==52,'Cod_banco_final']='COD_52'\nrcc.loc[rcc['cod_banco']==14,'Cod_banco_final']='COD_14'\nrcc=rcc.drop(['cod_banco'],axis=1)","f40828b7":"rcc_clasif = rcc.groupby([\"codmes\", \"id_persona\"]).clasif.max().reset_index().set_index(\"codmes\").sort_index().astype(\"int32\")\nrcc_mora = rcc.groupby([\"codmes\", \"id_persona\", \"Rango_mora_final\"]).mto_saldo.sum().unstack(level=2, fill_value=0).reset_index().set_index(\"codmes\").sort_index().astype(\"int32\")\nrcc_producto = rcc.groupby([\"codmes\", \"id_persona\", \"Producto_final\"]).mto_saldo.sum().unstack(level=2, fill_value=0).reset_index().set_index(\"codmes\").sort_index().astype(\"int32\")\nrcc_banco = rcc.groupby([\"codmes\", \"id_persona\", \"Cod_banco_final\"]).mto_saldo.sum().unstack(level=2, fill_value=0).reset_index().set_index(\"codmes\").sort_index().astype(\"int32\")","3e61c924":"del rcc","7c5f74ea":"rcc_mora.columns = [\"mora_\" + str(c) if c != \"id_persona\" else c for c in rcc_mora.columns ]\nrcc_producto.columns = [\"producto_\" + str(c) if c != \"id_persona\" else c for c in rcc_producto.columns]\nrcc_banco.columns = [\"banco_\" + str(c) if c != \"id_persona\" else c for c in rcc_banco.columns]","bdfe7cba":"campanias['producto']=campanias['producto'].str.upper()\ncampanias['canal_asignado']=campanias['canal_asignado'].str.upper()","6441330b":"Columnas_vacias(campanias)","2d883138":"campanias['canal_asignado']=campanias['canal_asignado'].fillna('RED DE TIENDAS')\ncampanias['producto']=campanias['producto'].fillna('ADQUISICI\u00d3N TC')\nColumnas_vacias(campanias)","84265e9e":"campanias['FLG_TELEVENTAS']=0\ncampanias['FLG_RED_TIENDAS']=0\ncampanias['FLG_RED_OTROS']=0\n\ncampanias.loc[campanias['canal_asignado']=='TELEVENTAS','FLG_TELEVENTAS']=1\ncampanias.loc[campanias['canal_asignado']=='RED DE TIENDAS','FLG_RED_TIENDAS']=1\ncampanias.loc[campanias['canal_asignado'].isin(['TELEVENTAS','RED DE TIENDAS'])==False,'FLG_RED_OTROS']=1\ncampanias=campanias.drop(['canal_asignado'],axis=1)","0e8d4a79":"campanias['PRODUCTO_NUEVO']='NINGUNO'\ncampanias.loc[campanias['producto'].isin(['SEGURO ACCIDENTES REMARK','SEGURO ASISTENCIA COMPLETA','SEGURO BLINDADO DE TC','SEGURO CONTRA ACCIDENTES','SEGURO DENTAL','SEGURO ONCOSALUD','SEGURO RENTA HOSPITALARIA','SEGURO SALUD','SEGURO VEHICULAR','SEGURO VIAJES','SEGURO VIDA RETORNO','SEGUROS'])==True,'PRODUCTO_NUEVO']='SEGUROS'   \ncampanias.loc[campanias['producto'].isin(['PR\u00c9STAMO EXPRESS','PR\u00c9STAMOS PERSONALES','PR\u00c9STAMOS REENGANCHE'])==True,'PRODUCTO_NUEVO']='PRESTAMOS'   \ncampanias.loc[campanias['producto'].isin(['RETENCION TC','RETENCI\u00d3N'])==True,'PRODUCTO_NUEVO']='RETENCION'  \ncampanias.loc[campanias['producto'].isin(['DEP\u00d3SITO A PLAZO JUBILACION','D\u00c9POSITO A PLAZO RENOVACION','DEP\u00d3SITO A PLAZO RENOVACION','DEP\u00d3SITO A PLAZO'])==True,'PRODUCTO_NUEVO']='DEPOSITO A PLAZO'  \ncampanias.loc[campanias['producto'].isin(['CUENTA MILLONARIA SUPERTASA','CUENTA MILLONARIA'])==True,'PRODUCTO_NUEVO']='CUENTA MILLONARIA'  \ncampanias.loc[campanias['producto'].isin(['CUENTA SUELDO INDEPENDIENTE','CUENTA SUELDO'])==True,'PRODUCTO_NUEVO']='CUENTA SUELDO'  \ncampanias.loc[campanias['producto'].isin(['CUENTA SIMPLE'])==True,'PRODUCTO_NUEVO']='CUENTA SIMPLE' \ncampanias.loc[campanias['producto'].isin(['COMBOS CUENTA+APP','COMBOS TC + PA','COMBOS TC+CUENTA+APP','COMBOS TC+PA','COMBOS'])==True,'PRODUCTO_NUEVO']='COMBOS' \ncampanias.loc[campanias['producto'].isin(['EXTRACASH ATAQUE','EXTRACASH'])==True,'PRODUCTO_NUEVO']='EXTRACASH' \ncampanias.loc[campanias['producto'].isin(['MEMBRESIA','MEMBRES\u00cdA'])==True,'PRODUCTO_NUEVO']='MEMBRESIA' \ncampanias.loc[campanias['producto'].isin(['CR\u00c9DITO HIPOTECARIO','CR\u00c9DITO VEHICULAR', 'HIPOTECARIO'])==True,'PRODUCTO_NUEVO']='CREDITOS' \ncampanias.loc[campanias['producto'].isin(['CONVENIOS AMPLIACIONES','CONVENIOS COMPRA DEUDA CLIENTE','CONVENIOS COMPRA DEUDA NO CLIENTE'])==True,'PRODUCTO_NUEVO']='CONVENIOS' \ncampanias.loc[campanias['producto'].isin(['UPGRADE TC','UPGRADE'])==True,'PRODUCTO_NUEVO']='UPGRADE' \ncampanias.loc[campanias['producto'].isin(['CD PR\u00c9STAMOS','CD-DEFENSA','CD-ATAQUE'])==True,'PRODUCTO_NUEVO']='COMPRA DEUDA' \ncampanias.loc[campanias['producto'].isin(['ADQUISICI\u00d3N CONVENIOS','ADQUISICI\u00d3N TC'])==True,'PRODUCTO_NUEVO']='ADQUISICION' \ncampanias.loc[campanias['producto'].isin([ 'ADELANTO DE SUELDO'])==True,'PRODUCTO_NUEVO']='ADELANTO' \ncampanias.loc[campanias['producto'].isin(['ALCANC\u00cdA'])==True,'PRODUCTO_NUEVO']='ALCANC\u00cdA'\ncampanias.loc[campanias['producto'].isin(['CARTERA ABP'])==True,'PRODUCTO_NUEVO']='CARTERA ABP'\ncampanias.loc[campanias['producto'].isin(['CERTIFICADO BANCARIO'])==True,'PRODUCTO_NUEVO']= 'BANCARIO'\ncampanias.loc[campanias['producto'].isin(['CTS'])==True,'PRODUCTO_NUEVO']='CTS'\ncampanias.loc[campanias['producto'].isin([ 'INCREMENTO LINEA'])==True,'PRODUCTO_NUEVO']= 'LINEA'\ncampanias.loc[campanias['producto'].isin([ 'PAGO AUTOMATICO'])==True,'PRODUCTO_NUEVO']= 'AUTOMATICO'\ncampanias.loc[campanias['producto'].isin([ 'PLAZO'])==True,'PRODUCTO_NUEVO']='PLAZO'\ncampanias.loc[campanias['producto'].isin([ 'TELEVENTAS'])==True,'PRODUCTO_NUEVO']='TELEVENTAS'\ncampanias.loc[campanias['producto'].isin([  'TRADING'])==True,'PRODUCTO_NUEVO']='TRADING'\ncampanias=campanias.drop(['producto'],axis=1)","47e10ebd":"campanias['FLG_PRODUCTO_ADQUISION']=0\ncampanias['FLG_PRODUCTO_CTS']=0\ncampanias['FLG_PRODUCTO_COMPRA_DEUDA']=0\ncampanias['FLG_PRODUCTO_COMBOS']=0\ncampanias['FLG_PRODUCTO_CUENTA_SUELDO']=0\ncampanias['FLG_PRODUCTO_CREDITOS']=0\ncampanias['FLG_PRODUCTO_PRESTAMOS']=0\ncampanias['FLG_PRODUCTO_OTROS']=0\n\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='ADQUISICION','FLG_PRODUCTO_ADQUISION']=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='CTS','FLG_PRODUCTO_CTS'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='COMPRA DEUDA','FLG_PRODUCTO_COMPRA_DEUDA'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='COMBOS','FLG_PRODUCTO_COMBOS'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='CUENTA SUELDO','FLG_PRODUCTO_CUENTA_SUELDO'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='CREDITOS','FLG_PRODUCTO_CREDITOS'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO']=='PRESTAMOS','FLG_PRODUCTO_PRESTAMOS'   ]=1\ncampanias.loc[campanias['PRODUCTO_NUEVO'].isin(['ADQUISICION','CTS','COMPRA DEUDA','COMBOS','CUENTA SUELDO','CREDITOS','PRESTAMOS'])==False,'FLG_PRODUCTO_OTROS'   ]=1\ncampanias=campanias.drop(['PRODUCTO_NUEVO'],axis=1)","3fdf1f0b":"campanias=campanias.set_index(\"codmes\").sort_index().astype(\"int32\")\ncampanias.head()","0f8ee020":"digital.head()","0254bcbe":"digital[\"codmes\"] = digital.codday.astype(str).str[:-2].astype(int)\ndigital = digital.drop(\"codday\", axis=1).fillna(0)","7c1909cc":"digital['Redes']=digital['facebook']+digital['youtb']+digital['goog']+digital['email']\ndigital['Busquedas']=digital['busqvisa']+digital['busqamex']+digital['busqmc']+digital['busqcsimp']+digital['busqmill']++digital['busqcsld']+digital['busqtc']+digital['busq']\ndigital['Times']=digital['time_mllst']+digital['time_ctasld']+digital['time_tc']+digital['time_tc']+digital['time_ctasimple']+digital['time_mllp']\ndigital=digital.drop(['time_ctasimple', 'time_mllp',\n       'time_mllst', 'time_ctasld', 'time_tc','busqtc',\n       'busqvisa', 'busqamex', 'busqmc', 'busqcsimp', 'busqmill', 'busqcsld',\n       'busq','email', 'facebook', 'goog',\n       'youtb'],axis=1)\ndigital.head(5)","4adc7709":"digital_sumas=digital.groupby([\"codmes\", \"id_persona\"]).sum().reset_index().set_index(\"codmes\").sort_index().astype(\"int32\")\ndigital_sumas.columns = [\"SUMAS_\" + str(c) if c != \"id_persona\" else c for c in digital_sumas.columns]\ndigital_sumas.head(5)","e1dbc4a2":"del digital","9b10b5ac":"Columnas_vacias(sunat)","8d7ea763":"sunat['activ_econo_final']='Otros'\nsunat.loc[sunat['activ_econo']=='Grupo_11','activ_econo_final']='Grupo_11'\nsunat.loc[sunat['activ_econo']=='Grupo_15','activ_econo_final']='Grupo_15'\nsunat.loc[sunat['activ_econo']=='Grupo_07','activ_econo_final']='Grupo_07'\nsunat.loc[sunat['activ_econo']=='Grupo_13','activ_econo_final']='Grupo_13'\nsunat.loc[sunat['activ_econo']=='Grupo_09','activ_econo_final']='Grupo_09'\nsunat.loc[sunat['activ_econo']=='Grupo_08','activ_econo_final']='Grupo_08'\nsunat.loc[sunat['activ_econo']=='Grupo_14','activ_econo_final']='Grupo_14'\nsunat.loc[sunat['activ_econo']=='Grupo_12','activ_econo_final']='Grupo_12'\nsunat.loc[sunat['activ_econo']=='Grupo_06','activ_econo_final']='Grupo_06'\nsunat=sunat.drop(['activ_econo'],axis=1)","b89f840d":"sunat.head()","4ff93334":"sunat = sunat.groupby([\"id_persona\", \"activ_econo_final\"]).meses_alta.sum().unstack(level=1, fill_value=0).astype(\"int32\")","66ea1972":"vehicular['Marca_final']='Otros'\nvehicular.loc[vehicular['marca']=='TOYOTA','Marca_final']='TOYOTA'\nvehicular.loc[vehicular['marca']=='NISSAN','Marca_final']='NISSAN'\nvehicular.loc[vehicular['marca']=='HYUNDAI','Marca_final']='HYUNDAI'\nvehicular.loc[vehicular['marca']=='KIA','Marca_final']='KIA'\nvehicular.loc[vehicular['marca']=='VOLKSWAGEN','Marca_final']='VOLKSWAGEN'\nvehicular.loc[vehicular['marca']=='SUZUKI','Marca_final']='SUZUKI'\nvehicular.loc[vehicular['marca']=='HONDA','Marca_final']='HONDA'\nvehicular.loc[vehicular['marca']=='CHEVROLET','Marca_final']='CHEVROLET'\nvehicular.loc[vehicular['marca']=='BAJAJ','Marca_final']='BAJAJ'\nvehicular.loc[vehicular['marca']=='MITSUBISHI','Marca_final']='MITSUBISHI'\nvehicular.loc[vehicular['marca']=='DAEWOO','Marca_final']='DAEWOO'\nvehicular.loc[vehicular['marca']=='MAZDA','Marca_final']='MAZDA'\nvehicular.loc[vehicular['marca']=='FORD','Marca_final']='FORD'\nvehicular.loc[vehicular['marca']=='SUBARU','Marca_final']='SUBARU'\nvehicular.loc[vehicular['marca']=='PEUGEOT','Marca_final']='PEUGEOT'\nvehicular=vehicular.drop(['marca'],axis=1)","398fb000":"vehicular1 = vehicular.groupby([\"id_persona\", \"Marca_final\"]).veh_var1.sum().unstack(level=1, fill_value=0).astype(\"float32\")\nvehicular2 = vehicular.groupby([\"id_persona\", \"Marca_final\"]).veh_var2.sum().unstack(level=1, fill_value=0).astype(\"float32\")\nvehicular1.columns = [c + \"_v1\" for c in vehicular1.columns]\nvehicular2.columns = [c + \"_v2\" for c in vehicular2.columns]\ndel vehicular","4291fec3":"reniec = reniec.set_index(\"id_persona\").astype(\"float32\")\nreniec['soc_var6']=reniec['soc_var6'].fillna(-99999)","4fe1bf6f":"Columnas_vacias(X_test)","eddd21ab":"X_test=X_test.fillna(-9999)\nX_train=X_train.fillna(-9999)","484cba59":"X_train.head()","acdb8b5f":"X_train = X_train.set_index(\"prediction_id\").astype(\"int32\").reset_index().set_index(\"id_persona\").join(vehicular1).join(vehicular2).join(reniec).join(sunat)\nX_test = X_test.set_index(\"prediction_id\").astype(\"int32\").reset_index().set_index(\"id_persona\").join(vehicular1).join(vehicular2).join(reniec).join(sunat)\ndel vehicular1, vehicular2, reniec, sunat","e237d4e5":"import gc","fa4cfd66":"meses = {\n    201901: slice(201808, 201810),\n    201902: slice(201809, 201811),\n    201903: slice(201810, 201812),\n    201904: slice(201811, 201901),\n    201905: slice(201812, 201902),\n    201906: slice(201901, 201903),\n    201907: slice(201902, 201904)\n        }\n\nmeses_train = X_train.codmes.unique()\nmeses_test = X_test.codmes.unique()\ncomplementos = []\nfor mes in meses.keys():\n    print(\"*\"*10, mes, \"*\"*10)\n    res = pd.concat([\n        rcc_clasif.loc[meses[mes]].groupby(\"id_persona\").sum(),\n        rcc_mora.loc[meses[mes]].groupby(\"id_persona\").sum(),\n        rcc_producto.loc[meses[mes]].groupby(\"id_persona\").sum(),\n        rcc_banco.loc[meses[mes]].groupby(\"id_persona\").sum(),\n        campanias.loc[meses[mes]].groupby(\"id_persona\").sum(),\n        digital_sumas.loc[meses[mes]].groupby(\"id_persona\").sum()\n        \n    ], axis=1)\n    res[\"codmes\"] = mes\n    res = res.reset_index().set_index([\"id_persona\", \"codmes\"]).astype(\"float32\")\n    complementos.append(res)\n\ngc.collect()\nprint(\"concatenando complementos\")\ncomplementos = pd.concat(complementos)\ngc.collect()\nprint(\"X_train join\")\nX_train = X_train.reset_index().join(complementos, on=[\"id_persona\", \"codmes\"]).set_index(\"prediction_id\")\ngc.collect()\nprint(\"X_test join\")\nX_test = X_test.reset_index().join(complementos, on=[\"id_persona\", \"codmes\"]).set_index(\"prediction_id\")\ngc.collect()\n\ndel rcc_clasif, rcc_mora, rcc_producto, rcc_banco,campanias, digital_sumas, complementos,res\ngc.collect()","1b011eba":"for i, c in enumerate(X_train.columns[[not all(ord(c) < 128 for c in s) for s in X_train.columns]]):\n    X_train[\"non_ascii_\" + str(i)] = X_train[c]\n    X_train = X_train.drop(c, axis= 1)\n    X_test[\"non_ascii_\" + str(i)] = X_test[c]\n    X_test = X_test.drop(c, axis= 1)","2ede4a43":"from lightgbm import LGBMRegressor\ngc.collect()","517fee6f":"drop_cols = [\"codmes\"]\ntest_preds = []\ntrain_preds = []\ny_train[\"target\"] = y_train[\"margen\"].astype(\"float32\")\nfor mes in X_train.codmes.unique():\n    print(\"*\"*10, mes, \"*\"*10)\n    Xt = X_train[X_train.codmes != mes]\n    yt = y_train.loc[Xt.index, \"target\"]\n    Xt = Xt.drop(drop_cols, axis=1)\n\n    Xv = X_train[X_train.codmes == mes]\n    yv = y_train.loc[Xv.index, \"target\"]\n    \n    learner = LGBMRegressor(n_estimators=80)\n    learner.fit(Xt, yt,  early_stopping_rounds=100, eval_metric=\"mae\",\n                eval_set=[(Xt, yt), (Xv.drop(drop_cols, axis=1), yv)], verbose=50)\n    gc.collect()\n    test_preds.append(pd.Series(learner.predict(X_test.drop(drop_cols, axis=1)),\n                                index=X_test.index, name=\"fold_\" + str(mes)))\n    train_preds.append(pd.Series(learner.predict(Xv.drop(drop_cols, axis=1)),\n                                index=Xv.index, name=\"probs\"))\n    gc.collect()\n\ntest_preds = pd.concat(test_preds, axis=1).mean(axis=1)\ntrain_preds = pd.concat(train_preds)","5c1bbe3b":"from lightgbm import LGBMClassifier\ngc.collect()","69b0163c":"drop_cols = [\"codmes\"]\nfi = []\ntest_probs = []\ntrain_probs = []\ny_train[\"target\"] = (y_train[\"margen\"] > 0).astype(\"int32\")\nfor mes in X_train.codmes.unique():\n    print(\"*\"*10, mes, \"*\"*10)\n    Xt = X_train[X_train.codmes != mes]\n    yt = y_train.loc[Xt.index, \"target\"]\n    Xt = Xt.drop(drop_cols, axis=1)\n\n    Xv = X_train[X_train.codmes == mes]\n    yv = y_train.loc[Xv.index, \"target\"]\n    \n    learner = LGBMClassifier(n_estimators=80)\n    learner.fit(Xt, yt,  early_stopping_rounds=100, eval_metric=\"mae\",\n                eval_set=[(Xt, yt), (Xv.drop(drop_cols, axis=1), yv)], verbose=50)\n    gc.collect()\n    test_probs.append(pd.Series(learner.predict_proba(X_test.drop(drop_cols, axis=1))[:, -1],\n                                index=X_test.index, name=\"fold_\" + str(mes)))\n    train_probs.append(pd.Series(learner.predict_proba(Xv.drop(drop_cols, axis=1))[:, -1],\n                                index=Xv.index, name=\"probs\"))\n    gc.collect()\n\ntest_probs = pd.concat(test_probs, axis=1).mean(axis=1)\ntrain_probs = pd.concat(train_probs)","38f1e8f2":"test = pd.concat([test_probs.rename(\"probs\"), test_preds.rename(\"preds\")], axis=1)\ntrain = pd.concat([train_probs.rename(\"probs\"), train_preds.rename(\"preds\")], axis=1)","d5972deb":"from scipy.optimize import differential_evolution\n\ndef clasificar(res, c):\n    return ((res.probs > c[0]) | (res.preds > c[1])) * c[2] + ((res.probs > c[3]) & (res.preds > c[4])) * c[5] > c[6]\n\ndef cost(res, coefs):\n    return -((clasificar(res, coefs) * res.margen) \/ res.margen.sum()).sum()\n\nres = y_train.join(train)\noptimization = differential_evolution(lambda x: cost(res, x), [(-100, 100), (0, 1), (0, 1),\n                                                               (-100, 100), (0, 1), (0, 1),\n                                                               (0, 2)])\noptimization","60cd9fd1":"test_preds = clasificar(test, optimization[\"x\"]).astype(int)\ntest_preds.index.name=\"prediction_id\"\ntest_preds.name=\"class\"\ntest_preds.to_csv(\"benchmark3.csv\", header=True)","57fc6129":"# Datathon IBK V01","2c21882e":"### Guardado del modelo para hacer la presentaci\u00f3n\n\nFinalmente creamos el archivo CSV que podemos subir como nuestra Soluci\u00f3n a la competencia\n\nEmpez\u00e1 con este archivo y luego podes seguir mejorandolo a ver si subis en posiciones!","0518bad7":"Renombramos las columnas para que sean m\u00e1s explicativas de lo que representan","4d0c5c23":"### Renombrado de Variables con nombre no ascii\nEl algoritmo que usamos no se lleva bien con cadenas de texto con caracteres especiales, las renombramos.","6ed3ff1f":"### Optimizaci\u00f3n de punto de corte\nCon las probabilidades calculadas en validaci\u00f3n, calcularmos el punto de corte optimo para maximizar la ecuaci\u00f3n econ\u00f3mica de la empresa","2d305b99":"### Importamos las librer\u00edas que vamos a utilizar","756e0661":"### Creaci\u00f3n del Target de predicci\u00f3n","81035608":"### Entrenamiento del Modelo\n\nPara entrenar nuestro modelo vamos a usar LightGBM","9843743c":"Vamos a trabajar luego con la base de **Campa\u00f1as**:\n* Agrupamos por mes y persona las distintas informaciones para poder sumarlas a nuestra base train","51f445cd":"### Lectura de las Bases","ce1e1f5e":"### Creaci\u00f3n de Variables\n\nPrimero creamos una variable en base a las columnas que tenemos en nuestra base de train\n\nVamos a crear la variable \"ratio\" que va a ser el cociente entre la linea ofrecida y el ingreso neto"}}