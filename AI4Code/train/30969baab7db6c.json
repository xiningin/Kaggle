{"cell_type":{"3a0e85e3":"code","2d4a4d91":"code","71defa77":"code","2db64563":"code","039e2c09":"code","414d4a8a":"code","55595198":"code","8c74098c":"code","03a0940d":"code","f891ab3f":"code","b16e1778":"code","132c11ae":"code","d9e30297":"code","6f0bf991":"code","21fc862a":"code","7247b4e1":"code","15ba6481":"code","80e46102":"code","df71da15":"code","adca741e":"code","c05b8493":"code","529d2402":"code","e0f9f9b9":"code","0f14be88":"code","e8e0471d":"code","22f79882":"code","04ad682a":"code","2d5ac5de":"code","707d2e39":"code","d3a14d36":"code","8e7819a5":"code","1d8a2aae":"code","b71e65e3":"code","62e5127d":"code","5307e20f":"code","c8fac23a":"code","12d83fd1":"code","eaf8345e":"code","a7629cef":"code","5a8fb96c":"code","0ce407ad":"code","9a4a297a":"code","d695da78":"code","83f2d319":"code","a6adb8f8":"code","8fa9da47":"code","9565f03d":"code","f1c92456":"code","0a2b89be":"code","d817d4d7":"code","e71f6b12":"code","5adb37c4":"code","e4f5b7cc":"code","3ee1e96a":"code","ba2fe4d5":"code","3e1d2eae":"code","8808fd00":"code","9d133de9":"code","71eafd84":"markdown","c4fb7ed8":"markdown","c9c3254d":"markdown","9b1fabab":"markdown","0f5a0fe9":"markdown","9e93074a":"markdown","3880bc14":"markdown","16ff3f7b":"markdown","e7257221":"markdown"},"source":{"3a0e85e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d4a4d91":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport numpy as np\nimport seaborn as sns","71defa77":"titanic_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2db64563":"titanic_train.info()","039e2c09":"titanic_test.info()","414d4a8a":"titanic_train_head = titanic_train.head()","55595198":"titanic_train_head","8c74098c":"titanic_train.describe(include='all')","03a0940d":"titanic_train.shape","f891ab3f":"titanic_train.columns","b16e1778":"sns.pairplot(titanic_train)","132c11ae":"titanic_train['Survived'].value_counts()","d9e30297":"titanic_train['Survived'].value_counts().keys()","6f0bf991":"plt.figure(figsize=(5,5))\nplt.bar(list(titanic_train['Survived'].value_counts().keys()),list(titanic_train['Survived'].value_counts()),color=[\"Red\",\"Blue\"])\nplt.show()","21fc862a":"titanic_train['Pclass'].value_counts()","7247b4e1":"titanic_train['Pclass'].value_counts().keys()","15ba6481":"plt.figure(figsize=(5,5))\nplt.bar(list(titanic_train['Pclass'].value_counts().keys()),list(titanic_train['Pclass'].value_counts()),color=[\"Orange\",\"Red\",\"Blue\"])\nplt.show()","80e46102":"titanic_train['Sex'].value_counts()","df71da15":"titanic_train['Sex'].value_counts().keys()","adca741e":"plt.figure(figsize=(5,5))\nplt.bar(list(titanic_train['Sex'].value_counts().keys()),list(titanic_train['Sex'].value_counts()),color=[\"Red\",\"Blue\"])\nplt.show()","c05b8493":"plt.figure(figsize=(5,7))\nplt.hist(titanic_train['Age'],color=\"Red\")\nplt.title(\"Distribution of Age\")\nplt.xlabel(\"Age\")\nplt.show()","529d2402":"sns.distplot(titanic_train['Fare'],kde=False)","e0f9f9b9":"fig, ax = plt.subplots()\nax.scatter(x=titanic_train['Age'], y=titanic_train['Fare'], alpha=0.3) # alpha=0.3 specifies the opacity\nax.set_xlabel('Age')\nax.set_ylabel('Fare')","0f14be88":"sns.rugplot(titanic_train['Fare'])","e8e0471d":"sns.violinplot(x='Sex',y='Age',data=titanic_train)","22f79882":"fig = px.scatter_3d(titanic_train, x='PassengerId', y='Sex', z='Age',color='Age')\nfig.show()","04ad682a":"sns.stripplot(x='Sex',y='Age',data=titanic_train,jitter=True,hue='Survived')","2d5ac5de":"titanic_train['Survived'].isnull()","707d2e39":"sum(titanic_train['Survived'].isnull())","d3a14d36":"titanic_train['Age'].isnull()","8e7819a5":"sum(titanic_train['Age'].isnull())","1d8a2aae":"titanic_train['Sex'].replace(('male', 'female'), (0, 1), inplace = True)","b71e65e3":"for i in titanic_train['Pclass']:\n    if i == 1:\n        titanic_train['Age'].fillna(38, inplace=True)\n    elif i == 2:\n        titanic_train['Age'].fillna(29, inplace=True)\n    else:\n        titanic_train['Age'].fillna(25, inplace=True)","62e5127d":"titanic_train.drop([ 'PassengerId', 'Name', 'Ticket', 'Cabin','Embarked'], axis=1,inplace=True)","5307e20f":"titanic_train.isnull().sum()","c8fac23a":"for i in titanic_test['Pclass']:\n    if i == 1:\n        titanic_test['Age'].fillna(38, inplace=True)\n    elif i == 2:\n        titanic_test['Age'].fillna(29, inplace=True)\n    else:\n        titanic_test['Age'].fillna(25, inplace=True)","12d83fd1":"titanic_test['Sex'].replace(('male', 'female'), (0, 1), inplace = True)","eaf8345e":"titanic_test.drop([ 'Name', 'Ticket', 'Cabin','Embarked'], axis=1,inplace=True)","a7629cef":"mean_value=titanic_test['Fare'].mean()\ntitanic_test['Fare'].fillna(value=mean_value, inplace=True)","5a8fb96c":"titanic_test.isnull().sum()","0ce407ad":"x_train = titanic_train.drop(\"Survived\", axis=1)\ny_train = titanic_train[\"Survived\"]\nx_test  = titanic_test.drop(\"PassengerId\", axis=1)\nprint(x_train.shape, y_train.shape, x_test.shape)","9a4a297a":"print(x_train)","d695da78":"# Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(x_train, y_train)","83f2d319":"#Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier1 = RandomForestClassifier(n_estimators=100)\nclassifier1.fit(x_train, y_train)","a6adb8f8":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nclassifier2 = GaussianNB()\nclassifier2.fit(x_train, y_train)","8fa9da47":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nclassifier3 = LogisticRegression()\nclassifier3.fit(x_train,y_train)","9565f03d":"y_pred = classifier.predict(x_test)","f1c92456":"y_pred","0a2b89be":"y_pred_1 = classifier1.predict(x_test)","d817d4d7":"y_pred_1","e71f6b12":"y_pred_2 = classifier2.predict(x_test)","5adb37c4":"y_pred_2","e4f5b7cc":"y_pred_3 = classifier3.predict(x_test)","3ee1e96a":"y_pred_3","ba2fe4d5":"submission = pd.DataFrame({\n        \"PassengerId\": titanic_test['PassengerId'],\n        \"Survived\": y_pred\n    })","3e1d2eae":"submission = submission.set_index('PassengerId')","8808fd00":"submission","9d133de9":"submission.to_csv('.\/submission.csv', index=False)","71eafd84":"## Checking for the missing values","c4fb7ed8":"##Exploratory Data Analysis","c9c3254d":"##Predicting Values","9b1fabab":"Taking care of Missing Values in train set","0f5a0fe9":"## Importing the libraries","9e93074a":"##Submission","3880bc14":"##Reading Test and Train datasets","16ff3f7b":"##Model Tuning","e7257221":"## Building the Model"}}