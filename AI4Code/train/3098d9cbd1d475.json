{"cell_type":{"521bea81":"code","6524fc77":"code","cb4d20bf":"code","41664401":"code","49b99237":"code","ec224cb2":"code","9cfe4e53":"code","38fc201d":"code","3edcd9d3":"code","6a273d57":"code","15c77d33":"code","f2a38e6c":"code","3ea00b0c":"code","243f4faa":"code","f9e97c2a":"code","de4d74ef":"code","638e1257":"code","1a8a97fc":"code","7e786c98":"code","c8a01be9":"code","f7bf737e":"code","8617f0fe":"code","ecdd5cb7":"code","b64d8f2b":"code","9b94f5f3":"code","3eadb7c3":"code","c6bde610":"code","83576c55":"code","14604785":"code","fc86f3db":"code","136251ab":"code","4411e31f":"code","d978be8b":"code","f82ae652":"code","21d46992":"code","d7942546":"code","a45c8d18":"code","eb625e81":"code","58d3481c":"code","72508412":"markdown","09231a4c":"markdown","d9deb228":"markdown","5fb775e5":"markdown","299d87d3":"markdown","26a4317d":"markdown","9cd5aeaa":"markdown","82126008":"markdown","a6feceff":"markdown","39a29de7":"markdown","f53ea5ef":"markdown","63c4232d":"markdown","0659a768":"markdown","f4978b8c":"markdown","734f3b6f":"markdown","01dca5e1":"markdown","5ecb251f":"markdown","d78042d0":"markdown","ad29e23c":"markdown","d553b966":"markdown","9a2ce90c":"markdown"},"source":{"521bea81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6524fc77":"# Import python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\n%matplotlib inline\nsns.set()\nmpl.rcParams['axes.linewidth']=0.0001","cb4d20bf":"survey2020_df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv',low_memory=False)","41664401":"# Select the data rows excluding the question\ndata_df = survey2020_df[1:]","49b99237":"data_df.info()","ec224cb2":"# Extract questions into a different data frame\nquestions = survey2020_df[0:1].transpose()","9cfe4e53":"# Print the full text of questions\nfor i in range(len(questions)):\n    print(questions[0][i])","38fc201d":"new_df = survey2020_df.copy()","3edcd9d3":"# Rename the columns to readable and short format\nnew_df.columns=['duration','age','gender','country','education',\n                'current_role','years_programming','Python','R','SQL',\n                'C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','None','Other',\n                'rec_learn_first','reg_Jupyter', 'reg_RStudio','reg_Visual_Studio','reg_Click_to_write_Choice_13',\n                'reg_PyCharm','reg_Spyder','reg_Notepad++','reg_Sublime_Text','reg_Vim_Emacs'\n                'reg_MATLAB','reg_None','reg_Other','Kaggle_Notebooks','Colab_Notebooks','Azure_Notebooks',\n                'Paperspace_Gradient','Binder_JupyterHub','Code_Ocean','IBM_Watson_Studio',\n                'Amazon_Sagemaker_Studio','Amazon EMR Notebooks','Google Cloud AI Platform Notebooks',\n                'Google Cloud Datalab Notebooks','Databricks Collaborative Notebooks','None_notebooks',\n                'Other_Notebooks','computing_platform','reg_GPU','reg_TPU','reg_None_hw','reg_Other_hw',\n                'TPU_no_used','vis_Matplotlib','vis_Seaborn','vis_Plotly_PlotlyExpress','vis_Ggplot_ggplot2',\n                'vis_Shiny','vis_D3_js','vis_Altair','vis_Bokeh','vis_Geoplotlib','vis_Leaflet_Folium',\n                'vis_None','vis_Other','ML_years','ML_Scikit_learn','ML_TensorFlow','ML_Keras','ML_PyTorch',\n                'ML_Fast_ai','ML_MxNet','ML_Xgboost','ML_LightGBM','ML_CatBoost','ML_Prophet','ML_H20_3',\n                'ML_Caret','ML_Tidymodels','ML_JAX','ML_None','ML_Others','Alg_Linear_Logistic',\n                'Alg_DT_RF','Alg_Gradient_Boosting','Alg_Bayesian','Alg_Evolutionary','Alg_MLP',\n                'Alg_CNN','Alg_GAN','Alg_RNN','Alg_Transformer_Networks','Alg_None','Alg_Others',\n                'cvm_gen_purpose','cvm_image_seg','cvm_object_det','cvm_image_class_others',\n                'cvm_generative','cvm_None','cvm_Others','nlp_WEV','nlp_enc_dec','nlp_context_emb',\n                'nlp_transform','nlp_None','nlp_Others','company_size','ds_team','comp_ml_use',\n                'raw_analyze','raw_build_run_data_infra','raw_build_proto_ml','raw_build_run_ml',\n                'raw_improve_ml','raw_research_ml','raw_None','raw_Others','current_sal_USD',\n                'ml_spend_USD_5_years','cloud_AWS','cloud_Azure','cloud_Google','cloud_IBM',\n                'cloud_Oracle','cloud_SAP','cloud_Salesforce','cloud_VMWare','cloud_Alibaba',\n                'cloud_Tencent','cloud_None','cloud_Others','cc_aws_ec2','cc_aws_lambda',\n                'cc_aws_ecs','cc_azure_cloud_service','cc_azure_ci','cc_azure_fun','cc_gcp_ce',\n                'cc_gcp_fun','cc_gcp_run','cc_gcp_app_eng','cc_None','cc_Others','cml_aws_sagemaker',\n                'cml_aws_forecast','cml_aws_rekognition','cml_azure_mls','cml_azure_cog_ser',\n                'cml_gcp_ai_ml','cml_gcp_video_ai','cml_gcp_nlp','cml_gcp_vision_ai','cml_None','cml_Others',\n                'big_mysql','big_postgresql','big_sqlite','big_oracledb','big_mongodb','big_snowflake',\n                'big_ibmdb2','big_mssql','big_msaccess','big_adls','big_aws_redshift','big_aws_athena',\n                'big_aws_dynamodb','big_gcp_bigquery','big_gcp_cloudsql','big_gcp_firestore','big_None',\n                'big_Other','big_often','bi_aws_quicksight','bi_powerbi','bi_gcp_studio','bi_looker',\n                'bi_tableau','bi_salesforce','bi_einstein','bi_qlik','bi_domo','bi_tibco','bi_alteryx',\n                'bi_sisense','bi_sap_ac','bi_None','bi_Other','bi_often', 'automl_auto_data_aug',\n                'automl_auto_feat','auto_model_sel','auto_model_arch','auto_hyper','auto_full_ML',\n                'automl_None','automl_Other','automl_reg_gcp_automl','automl_reg_h20','automl_dbricks',\n                'automl_datarobot','automl_tpot','automl_auto_keras','automl_auto_sklearn','automl_automl',\n                'automl_xcessiv','automl_mlbox','automl_reg_None','automl_reg_Other','mgt_ml_neptune',\n                'mgt_ml_weights_biases','mgt_ml_comet','mgt_ml_sacred','mgt_ml_tensorboard',\n                'mgt_ml_guild','mgt_ml_polyaxon','mgt_ml_trains','mgt_ml_domino','mgt_ml_None',\n                'mgt_ml_Other','mgt_ml_tools','pub_plotlydash','pub_streamlit','pub_nbviewer',\n                'pub_github','pub_personal_blog','pub_kaggle','pub_colab','pub_shiny','pub_No',\n                'pub_Other','course_coursera','course_edx','course_kaggle','course_datacamp',\n                'course_fast_ai','course_udacity','course_udemy','course_linkedin','course_cloud_cert',\n                'course_uni','course_None','course_Other','pri_tool_analyze','media_twitter',\n                'media_email','media_reddit','media_kaggle','media_course','media_youtube',\n                'media_podcast','media_blog','media_journal','media_slack','media_None',\n                'media_Other','2years_aws','2years_azure','2years_gcp','2years_ibm','2years_oracle',\n                '2years_sap','2years_vmware','2years_salesforce','2years_alibaba','2years_tencent',\n                '2years_cloud_None','2years_cloud_Other','2years_aws_ec2','2years_aws_lambda',\n                '2years_aws_ecs','2years_azure_cs','2years_azure_CI','2years_azure_fun',\n                '2years_gcp_ce','2years_gcp_fun','2years_gcp_run','2years_gcp_app_engine',\n                '2years_None','2years_Other','2years_cml_aws_sagemaker','2years_cml_aws_forecast',\n                '2years_cml_aws_rekognition','2years_cml_azure_mls','2years_cml_azure_cog_ser',\n                '2years_cml_gcp_ai_ml','2years_cml_gcp_video_ai','2years_cml_gcp_nlp',\n                '2years_cml_gcp_vision_ai','2years_cml_None','2years_cml_Others',\n                '2years_big_mysql','2years_big_postgresql','2years_big_sqlite','2years_big_oracledb',\n                '2years_big_mongodb','2years_big_snowflake','2years_big_ibmdb2','2years_big_mssql',\n                '2years_big_msaccess','2years_big_adls','2years_big_aws_redshift','2years_big_aws_athena',\n                '2years_big_aws_dynamodb','2years_big_gcp_bigquery','2years_big_gcp_cloudsql',\n                '2years_big_gcp_firestore','2years_big_None','2years_big_Other','2years_bi_powerbi',\n                '2years_bi_aws_quicksight','2years_bi_gcp_studio','2years_bi_looker','2years_bi_tableau',\n                '2years_bi_salesforce','2years_bi_einstein','2years_bi_qlik','2years_bi_domo',\n                '2years_bi_tibco','2years_bi_alteryx','2years_bi_sisense','2years_bi_sap_ac',\n                '2years_bi_None','2years_bi_Other','2years_automl_auto_data_aug',\n                '2years_automl_auto_feat','2years_auto_model_sel','2years_auto_model_arch',\n                '2years_auto_hyper','2years_auto_full_ML','2years_automl_None','2years_automl_Other',\n                '2years_automl_reg_gcp_automl','2years_automl_reg_h20','2years_automl_dbricks',\n                '2years_automl_datarobot','2years_automl_tpot','2years_automl_auto_keras',\n                '2years_automl_auto_sklearn','2years_automl_automl','2years_automl_xcessiv',\n                '2years_automl_mlbox','2years_automl_reg_None','2years_automl_reg_Other','2years_mgt_ml_neptune',\n                '2years_mgt_ml_weights_biases','2years_mgt_ml_comet','2years_mgt_ml_sacred',\n                '2years_mgt_ml_tensorboard','2years_mgt_ml_guild','2years_mgt_ml_polyaxon',\n                '2years_mgt_ml_trains','2years_mgt_ml_domino','2years_mgt_ml_None',\n                '2years_mgt_ml_Other'\n               ]","6a273d57":"# Exclude the question from the dataset\nworking_copy = new_df[1:]","15c77d33":"# Plot the number of survey participants by age group\nage = pd.DataFrame(working_copy.groupby('age').count()['duration'].sort_index())\n\nx = np.array(age)[:,0]\ny = np.array(age.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants count by Age group',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Age Group',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"deep\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","f2a38e6c":"# Plot the number of survey participants by gender\ngender = pd.DataFrame(working_copy.groupby('gender').count()['duration'].sort_values(ascending=False))\n\nx = np.array(gender)[:,0]\ny = np.array(gender.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants count by Gender',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Gender',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"deep\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","3ea00b0c":"# Plot the top 5 countries by the number of survey participants\ntop5 = pd.DataFrame(working_copy.groupby('country').count()['duration'].sort_values(ascending=False)[:5])\ntop5.index=['India', 'USA', 'Other', 'Brazil', 'Japan']\n\nx = np.array(top5)[:,0]\ny = np.array(top5.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Country - Top 5',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Country',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","243f4faa":"# Plot the top 10 countries by the number of survey participants - By Men and Women\ntemp = working_copy.copy()\ntop10 = pd.DataFrame(temp.groupby(['country']).count()['duration'].sort_values(ascending=False)[:10])\ntop10_noorder = temp[(temp['country'].isin(['India', 'United States of America', 'Other', 'Brazil', \n                                            'Japan','Russia', 'United Kingdom of Great Britain and Northern Ireland', \n                                  'Nigeria', 'China', 'Germany']))]\nmen = top10_noorder[(top10_noorder['gender']=='Man')]\nwomen = top10_noorder[(top10_noorder['gender']=='Woman')]\n\ntop10_men = pd.DataFrame(men.groupby(['country']).count()['duration'])\ntop10_women = pd.DataFrame(women.groupby(['country']).count()['duration'])\ntop10_men.index = ['Brazil', 'China', 'Germany', 'India', 'Japan', 'Nigeria', 'Other',\n       'Russia', 'UK','USA']\ntop10_women.index = ['Brazil', 'China', 'Germany', 'India', 'Japan', 'Nigeria', 'Other',\n       'Russia', 'UK','USA']\nx1 = np.array(top10_men)[:,0]\nx2 = np.array(top10_women)[:,0]\ny = np.array(top10_men.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Country - Top 10 - Men & Women',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Country',fontsize=15)\nplt.bar(y,x1,color='lightblue', edgecolor='white')\nplt.bar(y,x2,color='red', edgecolor='white')\nplt.xticks(rotation=45)\nplt.legend(['Men','Women'])","f9e97c2a":"# Plot the number of survey participants by education level\nedu = pd.DataFrame(working_copy.groupby('education').count()['duration'].sort_values(ascending=False))\nedu.index=['Masters', 'Bachelors', 'Doctoral','Study Without Degree','Professional','No answer','No formal education']\n\nx = np.array(edu)[:,0]\ny = np.array(edu.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Education',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Education',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","de4d74ef":"# Plot the number of survey participants by education - for Men and Women\ntemp = working_copy.copy()\n\nmen = temp[(temp['gender']=='Man')]\nwomen = temp[(temp['gender']=='Woman')]\n\nedu_men = pd.DataFrame(men.groupby(['education']).count()['duration'])\nedu_women = pd.DataFrame(women.groupby(['education']).count()['duration'])\n\nedu_men.index = ['Bachelors degree', 'Doctoral degree', 'I prefer not to answer',\n       'Masters degree', 'No formal education past high school',\n       'Professional degree',\n       'Some college\/university study without Bachelors']\nedu_women.index = ['Bachelors degree', 'Doctoral degree', 'I prefer not to answer',\n       'Masters degree', 'No formal education past high school',\n       'Professional degree',\n       'Some college\/university study without Bachelors']\nx1 = np.array(edu_men)[:,0]\nx2 = np.array(edu_women)[:,0]\ny = np.array(edu_men.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Education - Men & Women',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Education',fontsize=15)\nplt.bar(y,x1,color='lightblue', edgecolor='white')\nplt.bar(y,x2,color='red', edgecolor='white')\nplt.xticks(rotation=70)\nplt.legend(['Men','Women']) ","638e1257":"# Plot the number of survey participants by current role\nrole = pd.DataFrame(working_copy.groupby('current_role').count()['duration'].sort_values(ascending=False))\n\nx = np.array(role)[:,0]\ny = np.array(role.index)\n\nplt.figure(figsize=(14,8))\nplt.title('Survey participants by Current Role',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Current Role',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","1a8a97fc":"# Plot the number of survey participants by current role - for Men and Women\ntemp = working_copy.copy()\n\nmen = temp[(temp['gender']=='Man')]\nwomen = temp[(temp['gender']=='Woman')]\n\nrole_men = pd.DataFrame(men.groupby(['current_role']).count()['duration'])\nrole_women = pd.DataFrame(women.groupby(['current_role']).count()['duration'])\n\nx1 = np.array(role_men)[:,0]\nx2 = np.array(role_women)[:,0]\ny = np.array(role_men.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Current Role - Men & Women',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Current Role',fontsize=15)\nplt.bar(y,x1,color='lightblue', edgecolor='white')\nplt.bar(y,x2,color='red', edgecolor='white')\nplt.xticks(rotation=70)\nplt.legend(['Men','Women']) ","7e786c98":"# Plot the number of survey participants by number of programming years\nprog_years = pd.DataFrame(working_copy.groupby('years_programming').count()['duration'].sort_values(ascending=False))\n\nx = np.array(prog_years)[:,0]\ny = np.array(prog_years.index)\n\nplt.figure(figsize=(14,8))\nplt.title('Survey participants by Number of Years Programming',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants with Number of Years Programming',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","c8a01be9":"# Plot the number of survey participants by programming years - for Men and Women\ntemp = working_copy.copy()\n\nmen = temp[(temp['gender']=='Man')]\nwomen = temp[(temp['gender']=='Woman')]\n\nprog_men = pd.DataFrame(men.groupby(['years_programming']).count()['duration'])\nprog_women = pd.DataFrame(women.groupby(['years_programming']).count()['duration'])\n\nx1 = np.array(prog_men)[:,0]\nx2 = np.array(prog_women)[:,0]\ny = np.array(prog_men.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Programming Years - Men & Women',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Programming Years',fontsize=15)\nplt.bar(y,x1,color='lightblue', edgecolor='white')\nplt.bar(y,x2,color='red', edgecolor='white')\nplt.xticks(rotation=70)\nplt.legend(['Men','Women']) ","f7bf737e":"# Plot Survey participants by Programming language used regularly\nlang=working_copy[['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift',\n              'Bash','MATLAB','None','Other']].count().sort_values(ascending=False)\nx = np.array(lang)\ny = np.array(lang.index)\n\nplt.figure(figsize=(14,8))\nplt.title('Survey participants by Programming language used regularly',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Programming language used regularly',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","8617f0fe":"# Plot Survey participants by Programming language used regularly - Men and Women\ntemp = working_copy.copy()\n\nmen = temp[(temp['gender']=='Man')]\nwomen = temp[(temp['gender']=='Woman')]\n\nlang_men=men[['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift',\n              'Bash','MATLAB','None','Other']].count()\nlang_women=women[['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift',\n              'Bash','MATLAB','None','Other']].count()\n\nx1 = np.array(lang_men)\nx2 = np.array(lang_women)\ny = np.array(lang_men.index)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Programming Language used - Men & Women',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Participants Programming Language used',fontsize=15)\nplt.bar(y,x1,color='lightblue', edgecolor='white')\nplt.bar(y,x2,color='red', edgecolor='white')\nplt.xticks(rotation=70)\nplt.legend(['Men','Women']) ","ecdd5cb7":"# Plot the Recommeded language for data scientist aspirants to learn first\nrec_lang = pd.DataFrame(working_copy.groupby('rec_learn_first').count()['duration'].sort_values(ascending=False))\n\nx = np.array(rec_lang)[:,0]\ny = np.array(rec_lang.index)\n\nplt.figure(figsize=(14,8))\nplt.title('Recommeded language for data scientist aspirants to learn first',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Recommeded language',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","b64d8f2b":"# Plot the survey participants by the IDE they used.\nide=working_copy[['reg_Jupyter', 'reg_RStudio','reg_Visual_Studio','reg_Click_to_write_Choice_13',\n                'reg_PyCharm','reg_Spyder','reg_Notepad++','reg_Sublime_Text','reg_Vim_Emacs'\n                'reg_MATLAB','reg_None','reg_Other']].count().sort_values(ascending=False)\nx = np.array(ide)\ny=[]\nfor i in ide.index:\n    y.append(i[4:])\ny = np.array(y)\n\nplt.figure(figsize=(14,8))\nplt.title('Survey participants by IDE used',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('IDE used',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","9b94f5f3":"# Plot the survey participants by the Notebooks they have used.\nnotebook=working_copy[['Kaggle_Notebooks','Colab_Notebooks','Azure_Notebooks',\n                'Paperspace_Gradient','Binder_JupyterHub','Code_Ocean','IBM_Watson_Studio',\n                'Amazon_Sagemaker_Studio','Amazon EMR Notebooks','Google Cloud AI Platform Notebooks',\n                'Google Cloud Datalab Notebooks','Databricks Collaborative Notebooks','None_notebooks',\n                'Other_Notebooks']].count().sort_values(ascending=False)\nx = np.array(notebook)\ny = np.array(notebook.index)\n\nplt.figure(figsize=(14,8))\nplt.title('Survey participants by Notebooks used',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Notebooks used',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","3eadb7c3":"# Plot the survey participants by the Visualisation library they have used.\nvis=working_copy[['vis_Matplotlib','vis_Seaborn','vis_Plotly_PlotlyExpress','vis_Ggplot_ggplot2',\n                'vis_Shiny','vis_D3_js','vis_Altair','vis_Bokeh','vis_Geoplotlib','vis_Leaflet_Folium',\n                'vis_None','vis_Other']].count()\nx = np.array(vis)\ny=[]\nfor i in vis.index:\n    y.append(i[4:])\ny = np.array(y)\n\nplt.figure(figsize=(12,6))\nplt.title('Survey participants by Visualisation library used',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('Visualization Library Used',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","c6bde610":"# Plot the survey participants by the ML framework they have used regularly.\nml=working_copy[['ML_Scikit_learn','ML_TensorFlow','ML_Keras','ML_PyTorch',\n                'ML_Fast_ai','ML_MxNet','ML_Xgboost','ML_LightGBM','ML_CatBoost','ML_Prophet','ML_H20_3',\n                'ML_Caret','ML_Tidymodels','ML_JAX','ML_None','ML_Others']].count().sort_values(ascending=False)\nx = np.array(ml)\ny=[]\nfor i in ml.index:\n    y.append(i[3:])\ny = np.array(y)\n\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by ML framework used regularly',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('ML Framework Used',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","83576c55":"# Plot the survey participants by the ML Algorithm they have used regularly.\nml_alg=working_copy[['Alg_Linear_Logistic','Alg_DT_RF','Alg_Gradient_Boosting','Alg_Bayesian','Alg_Evolutionary',\n                 'Alg_MLP','Alg_CNN','Alg_GAN','Alg_RNN','Alg_Transformer_Networks','Alg_None',\n                 'Alg_Others']].count().sort_values(ascending=False)\nx = np.array(ml_alg)\ny=[]\nfor i in ml_alg.index:\n    y.append(i[4:])\ny = np.array(y)\n\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by ML Algorithm used regularly',fontsize=20)\nplt.xlabel('Number of participants',fontsize=15)\nplt.ylabel('ML Algorithm Used',fontsize=15)\nsns.barplot(x=x,y=y,palette=\"rocket\")\nfor index, value in enumerate(x):\n    plt.text(value, index, str(value))","14604785":"# Plot the survey participants by the Computer Vision Method they have used regularly.\nml_alg=working_copy[['cvm_gen_purpose','cvm_image_seg','cvm_object_det','cvm_image_class_others',\n                'cvm_generative','cvm_None','cvm_Others']].count().sort_values(ascending=False)\nx = np.array(ml_alg)\nml_alg.index=['PIL cv2 skimage etc','U-Net Mask R-CNN etc','YOLOv3 RetinaNet etc','VGG Inception ResNet etc',\n             'GAN VAE etc','None','Others']\ny = np.array(ml_alg.index)\n\nplt.figure(figsize=(8,8))\nplt.title(\"Survey participants by Computer Vision Method used regularly\", fontsize=20)\nml_alg.plot.pie(autopct=\"%.1f%%\",fontsize=15, pctdistance=0.5);","fc86f3db":"# Plot the survey participants by the NLP Method they have used regularly.\nnlp=working_copy[['nlp_WEV','nlp_enc_dec','nlp_context_emb','nlp_transform',\n                     'nlp_None','nlp_Others']].count().sort_values(ascending=False)\nx = np.array(nlp)\nnlp.index=['GloVe fastText word2vec','seq2seq vanilla transformers','ELMo CoVe',\n           'GPT-3 BERT XLnet etc','None','Others']\ny = np.array(nlp.index)\n\nplt.figure(figsize=(8,8))\nplt.title(\"Survey participants by NLP Method used regularly\", fontsize=20)\nnlp.plot.pie(autopct=\"%.1f%%\",fontsize=15, pctdistance=0.5);","136251ab":"# Plot the survey participants by their Role at Work.\nraw=working_copy[['raw_analyze','raw_build_run_data_infra','raw_build_proto_ml','raw_build_run_ml',\n                'raw_improve_ml','raw_research_ml','raw_None','raw_Others']].count().sort_values(ascending=False)\nraw.index=['Analyze & understand data','Build and\/or run data infra','Build prototype ML',\n          'Build and\/or run ML','Improve existing ML models','Research in ML','None','Others']\nplt.figure(figsize=(8,8))\nplt.title(\"Survey participants by their Role at Work\", fontsize=20)\nraw.plot.pie(autopct=\"%.1f%%\",fontsize=15, pctdistance=0.5);","4411e31f":"# Plot the survey participants by Cloud service they have used.\ncloud=working_copy[['cloud_AWS','cloud_Azure','cloud_Google','cloud_IBM',\n                'cloud_Oracle','cloud_SAP','cloud_Salesforce','cloud_VMWare','cloud_Alibaba',\n                'cloud_Tencent','cloud_None','cloud_Others']].count()\ncloud_2yrs = working_copy[['2years_aws','2years_azure','2years_gcp','2years_ibm',\n                           '2years_oracle','2years_sap','2years_salesforce','2years_vmware','2years_alibaba',\n                           '2years_tencent','2years_cloud_None','2years_cloud_Other']].count()\n        \nx1= np.array(cloud)\nx2= np.array(cloud_2yrs)\ny=[]\nfor i in cloud.index:\n    y.append(i[6:])\ny = np.array(y)\n\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud service they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud Service Used',fontsize=15)\nplt.xticks(rotation=45)\nsnsplot = sns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud Service used')\nsnsplot = sns.lineplot(x=y,y=x2,palette=\"rocket\",label='Service want to be more familiar in 2 years')\nplt.savefig(\"submission.png\")","d978be8b":"# Plot the survey participants by Cloud computing product they have used.\ncloud=working_copy[['cc_aws_ec2','cc_aws_lambda',\n                'cc_aws_ecs','cc_azure_cloud_service','cc_azure_ci','cc_azure_fun','cc_gcp_ce',\n                'cc_gcp_fun','cc_gcp_run','cc_gcp_app_eng','cc_None','cc_Others']].count()\ncloud_2yrs = working_copy[['2years_aws_ec2','2years_aws_lambda',\n                '2years_aws_ecs','2years_azure_cs','2years_azure_CI','2years_azure_fun',\n                '2years_gcp_ce','2years_gcp_fun','2years_gcp_run','2years_gcp_app_engine',\n                '2years_None','2years_Other']].count()\ncloud.index=['AWS EC2','AWS Lambda','AWS ECS','Azure Cloud Service','Azure Container Instance',\n            'Azure Functions','Google Compute Engine','GCP Functions','GCP Run','GCP App Engine',\n            'None', 'Others']\n        \nx1= np.array(cloud)\nx2= np.array(cloud_2yrs)\ny = np.array(cloud.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud computing product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud computing product Used',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud computing product used')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud computing product want to be more familiar in 2 years')","f82ae652":"# Plot the survey participants by Cloud ML product they have used.\nml=working_copy[['cml_aws_sagemaker','cml_aws_forecast','cml_aws_rekognition','cml_azure_mls',\n                    'cml_azure_cog_ser','cml_gcp_ai_ml','cml_gcp_video_ai','cml_gcp_nlp',\n                    'cml_gcp_vision_ai','cml_None','cml_Others']].count()\nml_2yrs = working_copy[['2years_cml_aws_sagemaker','2years_cml_aws_forecast',\n                '2years_cml_aws_rekognition','2years_cml_azure_mls','2years_cml_azure_cog_ser',\n                '2years_cml_gcp_ai_ml','2years_cml_gcp_video_ai','2years_cml_gcp_nlp',\n                '2years_cml_gcp_vision_ai','2years_cml_None','2years_cml_Others']].count()\nml.index=['AWS Sagemaker','AWS Forecast','AWS Rekognition','Azure ML Service','Azure Cognitive Service',\n            'GCP AI \/ ML','GCP Video AI','GCP NLP','GCP Vision AI',\n            'None', 'Others']\n        \nx1= np.array(ml)\nx2= np.array(ml_2yrs)\ny = np.array(ml.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud ML product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud ML product Used',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud ML product used')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud ML product want to be more familiar in 2 years')","21d46992":"# Plot the survey participants by Cloud Big Data product they have used.\nbig=working_copy[['big_mysql','big_postgresql','big_sqlite','big_oracledb','big_mongodb','big_snowflake',\n                'big_ibmdb2','big_mssql','big_msaccess','big_adls','big_aws_redshift','big_aws_athena',\n                'big_aws_dynamodb','big_gcp_bigquery','big_gcp_cloudsql','big_gcp_firestore','big_None',\n                'big_Other']].count()\nbig_2yrs = working_copy[['2years_big_mysql','2years_big_postgresql','2years_big_sqlite','2years_big_oracledb',\n                '2years_big_mongodb','2years_big_snowflake','2years_big_ibmdb2','2years_big_mssql',\n                '2years_big_msaccess','2years_big_adls','2years_big_aws_redshift','2years_big_aws_athena',\n                '2years_big_aws_dynamodb','2years_big_gcp_bigquery','2years_big_gcp_cloudsql',\n                '2years_big_gcp_firestore','2years_big_None','2years_big_Other']].count()\nbig.index=['MySQL','PostgreSQL','SQL Lite','Oracle','MongoDB','Snowflake',\n           'IBM DB2','MS SQL','MS Access','Azure Data Lake Storage','AWS Redshift','AWS Athena',\n            'AWS DynamoDB','GCP Big Query','GCP Cloud SQL','GCP FireStore','None', 'Others']\n        \nx1= np.array(big)\nx2= np.array(big_2yrs)\ny = np.array(big.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud BigData product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud BigData product Used',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud BigData product used')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud BigData product want to be more familiar in 2 years')","d7942546":"# Plot the survey participants by Cloud BI product they have used.\nBI=working_copy[['bi_aws_quicksight','bi_powerbi','bi_gcp_studio','bi_looker',\n                'bi_tableau','bi_salesforce','bi_einstein','bi_qlik','bi_domo','bi_tibco','bi_alteryx',\n                'bi_sisense','bi_sap_ac','bi_None','bi_Other']].count()\nBI_2yrs = working_copy[['2years_bi_aws_quicksight','2years_bi_powerbi','2years_bi_gcp_studio','2years_bi_looker',\n                        '2years_bi_tableau','2years_bi_salesforce','2years_bi_einstein','2years_bi_qlik',\n                        '2years_bi_domo','2years_bi_tibco','2years_bi_alteryx','2years_bi_sisense',\n                        '2years_bi_sap_ac','2years_bi_None','2years_bi_Other']].count()\nBI.index=['AWS QuickSight','PowerBI','Google Data Studio','Looker','Tableau','SalesForce',\n           'Einstein Analytics','Qlik','Domo','TIBCO Spotfire','Alteryx','SiSense',\n            'SAP Analytics Cloud','None', 'Others']\n        \nx1= np.array(BI)\nx2= np.array(BI_2yrs)\ny = np.array(BI.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud BI product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud BI product Used',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud BI product used')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud BI product want to be more familiar in 2 years')","a45c8d18":"# Plot the survey participants by Cloud Auto ML product they have used.\nautoml=working_copy[['automl_auto_data_aug','automl_auto_feat','auto_model_sel',\n                     'auto_model_arch','auto_hyper','auto_full_ML',\n                'automl_None','automl_Other']].count()\nautoml_2yrs = working_copy[['2years_automl_auto_data_aug','2years_automl_auto_feat','2years_auto_model_sel',\n                            '2years_auto_model_arch','2years_auto_hyper','2years_auto_full_ML',\n                            '2years_automl_None','2years_automl_Other']].count()\nautoml.index=['Data Augmentation','Feature Engineering','Model Selection',\n              'Model Architecture searches','Hyperparameter Tuning','Full ML Pipelines',\n           'None', 'Others']\n        \nx1= np.array(automl)\nx2= np.array(automl_2yrs)\ny = np.array(automl.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud Auto ML product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud Auto ML product Used',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud Auto ML product used')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud Auto ML product want to be more familiar in 2 years')","eb625e81":"# Plot the survey participants by Cloud Auto ML product they have used regularly.\nautomlreg=working_copy[['automl_reg_gcp_automl','automl_reg_h20','automl_dbricks',\n                'automl_datarobot','automl_tpot','automl_auto_keras','automl_auto_sklearn','automl_automl',\n                'automl_xcessiv','automl_mlbox','automl_reg_None','automl_reg_Other']].count()\nautomlreg_2yrs = working_copy[['2years_automl_reg_gcp_automl','2years_automl_reg_h20','2years_automl_dbricks',\n                '2years_automl_datarobot','2years_automl_tpot','2years_automl_auto_keras',\n                '2years_automl_auto_sklearn','2years_automl_automl','2years_automl_xcessiv',\n                '2years_automl_mlbox','2years_automl_reg_None','2years_automl_reg_Other']].count()\nautomlreg.index=['GCP Auto ML','H20','Databricks',\n              'Data Robot','Tpot','Auto Keras','Auto Sklearn','Auto ML','Xcessiv','ML Box',\n           'None', 'Others']\n        \nx1= np.array(automlreg)\nx2= np.array(automlreg_2yrs)\ny = np.array(automlreg.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud Auto ML product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud Auto ML product Used regularly',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud Auto ML product used regularly')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud Auto ML product want to be more familiar in 2 years')","58d3481c":"# Plot the survey participants by Cloud Manage ML product they have used regularly.\nmgtmlreg=working_copy[['mgt_ml_neptune',\n                'mgt_ml_weights_biases','mgt_ml_comet','mgt_ml_sacred','mgt_ml_tensorboard',\n                'mgt_ml_guild','mgt_ml_polyaxon','mgt_ml_trains','mgt_ml_domino','mgt_ml_None',\n                'mgt_ml_Other']].count()\nmgtmlreg_2yrs = working_copy[['2years_mgt_ml_neptune',\n                '2years_mgt_ml_weights_biases','2years_mgt_ml_comet','2years_mgt_ml_sacred',\n                '2years_mgt_ml_tensorboard','2years_mgt_ml_guild','2years_mgt_ml_polyaxon',\n                '2years_mgt_ml_trains','2years_mgt_ml_domino','2years_mgt_ml_None',\n                '2years_mgt_ml_Other']].count()\nmgtmlreg.index=['Neptune','Weights & Biases','Comet',\n              'Sacred','TensorBoard','Guild','Polyaxon','Trains','Domino',\n           'None', 'Others']\n        \nx1= np.array(mgtmlreg)\nx2= np.array(mgtmlreg_2yrs)\ny = np.array(mgtmlreg.index)\nplt.figure(figsize=(18,8))\nplt.title('Survey participants by Cloud Manage ML product they have used',fontsize=20)\nplt.ylabel('Number of participants',fontsize=15)\nplt.xlabel('Cloud Manage ML product Used regularly',fontsize=15)\nplt.xticks(rotation=45)\nsns.lineplot(x=y,y=x1,palette=\"rocket\",label='Cloud Manage ML product used regularly')\nsns.lineplot(x=y,y=x2,palette=\"rocket\",label='Cloud Manage ML product want to be more familiar in 2 years')\n","72508412":"#### Python and SQL are the most sought and used languages in recent times.","09231a4c":"#### From the above chart we can see there is more acceptance or move towards cloud computing products going ahead.","d9deb228":"### DT_RF -> Decision Trees and Random Forest","5fb775e5":"#### Currently AWS QuickSight is the leader among Cloud BI products, but clear interest towards Power BI and Tableau in coming times.","299d87d3":"#### More and more entrants into IT are into practicing ML","26a4317d":"#### sklearn and tensorflow (+keras) are the top most used ML frameworks followed by PyTorch","9cd5aeaa":"### Top highlights from the insights found from the data collected through Kaggle Survey 2000\n\n **1. From 30 years age onwards, with every year (or age group) it is evident people tend to move into senior\/managerial positions with less programming exposure (and\/or not much time spent on ML\/DL models)** \n\n **2. Overwhelming number of participants from one country (India) in top 1 position , we can see that last 4 in top 5 cumulatively is less than 50% of top 1 position.**\n\n **3. We see more active female participation in ML going ahead which is evident from almost 30% of females are practicing ML who are currently studying.**\n\n **4. More and more entrants into IT are into practicing ML. It is clearly evident that AI\/ML is going to be part of each and everyone going ahead.**\n\n **5. We see more active female participation in ML going ahead which is evident from almost 30% of females are practicing ML among the recent entrants into IT.**\n\n **6. Python is the most recommended language for data scientist aspirants,  by more than 90% participants.**\n\n **7. Jupyter (Notebooks) is the mostly used IDE.  Jupyter is opensource and is almost possibly installed by each ML practitioner on their own systems\/laptops.**\n\n **8. Azure and Google Colab notebooks are the mostly used Cloud notebooks by some distance when compared to others.**  \n\n **9. Matplotlib and Seaborn are the top most used Visualization libraries.**\n\n **10. sklearn and tensorflow (+keras) are the top most used ML frameworks followed by PyTorch.**\n\n **11. RandomForest (+Decision Trees) and Gradient Boosting are the top most regularly used ML algorithms followed by GAN and Bayesian model. It also indicates the acceptance of Bagging and Boosting in order to overcome overfitting and help in increasing generalization of models.**\n\n **12. Currently top most used Cloud Computing Platform is AWS, but there is clear interest towards trying Google followed by Azure.**\n\n **13. There is more interest towards using cloud computing products, cloud big data products, cloud BI products as well as cloud ML products for all different ML tasks going ahead.**","82126008":"### Kaggle Survey 2020 ","a6feceff":"#### RandomForest (+Decision Trees) and Gradient Boosting are the top most regularly used ML algorithms followed by GAN and Bayesian model.","39a29de7":"#### Python is the recommended language for data scientist aspirants by more than 90% participants","f53ea5ef":"#### Azure and Google Colab notebooks are the mostly used Cloud notebooks.  ","63c4232d":"#### We see more active female participation in ML going ahead which is evident from almost 30% of females are practicing ML who are currently studying. ","0659a768":"#### There is more acceptance or move towards cloud big data products going ahead.","f4978b8c":"#### Jupyter (Notebooks) is the mostly used IDE","734f3b6f":"#### We see more active female participation in ML going ahead which is evident from almost 30% of females are practicing ML among the recent entrants into IT.","01dca5e1":"#### We have total 354 responses for questions and a column with time taken for survey by the individual","5ecb251f":"#### Overwhelming number in top 1 position, we can see that last 4 in top 5 cumulatively is less than 50% of top 1 position","d78042d0":"#### There is more acceptance or inclination towards cloud computing products going ahead in future.","ad29e23c":"#### Currently top most used Cloud Computing Platform is AWS, but the interest towards usage in future is inclined toward Google followed by Azure","d553b966":"#### Matplotlib and Seaborn are the top most used Visualization libraries","9a2ce90c":"#### From 30 years age onwards, with every year (or age group) it is evident people tend to move into senior\/managerial positions with less programming exposure (and\/or not much time spent on ML\/DL models)"}}