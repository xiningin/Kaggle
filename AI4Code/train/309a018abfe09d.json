{"cell_type":{"5390a42c":"code","fd6df2ad":"code","b2dce210":"code","67108c9d":"code","4fc3fd3a":"code","cc2a8913":"code","31e29f22":"code","d05526ca":"code","ae521c33":"code","3b716fc0":"code","a7797442":"code","7513e1a8":"code","a924a70b":"code","3db8db9f":"code","cc079b9e":"code","8cfde742":"code","d4080027":"code","9e7739d4":"code","fb9ba6bf":"code","7577cdc8":"code","be9bc771":"code","e8e70aa5":"code","f1840f54":"code","7bf2ac08":"code","0f7353c6":"markdown","1d12a84d":"markdown","8ae89c24":"markdown","a8832421":"markdown","49aad3ef":"markdown"},"source":{"5390a42c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport graphviz \nimport os\nimport preprocessing \n\nfrom pandas_profiling import ProfileReport\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2, f_classif\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom xgboost import plot_tree, plot_importance\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fd6df2ad":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","b2dce210":"df.head(6)","67108c9d":"df.drop('id',axis=1,inplace=True)","4fc3fd3a":"df.info()","cc2a8913":"df.describe()","31e29f22":"df['bmi'].fillna(value=30,inplace=True)","d05526ca":"df.nunique()","ae521c33":"df['smoking_status'].nunique","3b716fc0":"def j(k):\n    if k==\"Female\" or k==\"No\" or k==\"Private\" or k== \"Urban\" or k==\"never smoked\":\n        return 0\n    elif k==\"Male\" or k==\"Yes\" or k==\"Self-employed\" or k== \"Rural\" or k==\"formerly smoked\" or k==\"Unknown\":\n        return 1\n    elif k==\"Govt_job\" or k==\"smokes\":\n        return 2\n    elif k==\"children\":\n        return 3\n    ","a7797442":"\ndf['ever_married']=df['ever_married'].apply(j)\ndf['gender']=df['gender'].apply(j)\ndf['work_type']=df['work_type'].apply(j)\ndf['Residence_type']=df['Residence_type'].apply(j)\ndf['smoking_status']=df['smoking_status'].apply(j)\n","7513e1a8":"sns.jointplot(data=df, x=\"age\", y=\"avg_glucose_level\", hue=\"stroke\")\n","a924a70b":"plt.figure(figsize=(10,5))\nplt.title(\"Stroke ...\")\ng = plt.pie(df.stroke.value_counts(), labels=df.stroke.value_counts().index,autopct='%1.1f%%', startangle=180)\n\nplt.show()","3db8db9f":"\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True,cmap='summer');","cc079b9e":"plt.figure(figsize=(12,10))\nsns.distplot(df[df['stroke'] == 0][\"avg_glucose_level\"], color='green') # No Stroke - green\nsns.distplot(df[df['stroke'] == 1][\"avg_glucose_level\"], color='red') # Stroke - Red\nplt.xlim([30,330])\nplt.show()","8cfde742":"\nplt.figure(figsize=(12,10))\n\nsns.distplot(df[df['stroke'] == 0][\"age\"], color='green') # No Stroke - green\nsns.distplot(df[df['stroke'] == 1][\"age\"], color='red') # Stroke - Red\nplt.xlim([18,100])\nplt.show()","d4080027":"plt.figure(figsize=(10,5))\nsns.boxenplot(x='bmi',data=df, color = 'Green')\n","9e7739d4":"sns.set_theme(style=\"ticks\")\n\n\nsns.jointplot(x=df['avg_glucose_level'], y=df['age'], kind=\"hex\", color=\"#4CB391\")","fb9ba6bf":"df.fillna(value=0,inplace=True)","7577cdc8":"X =df.drop('stroke',axis=1).values\nY=df['stroke'].values","be9bc771":"from sklearn.model_selection import train_test_split","e8e70aa5":"df.info()","f1840f54":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=101) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=42)","7bf2ac08":"models = {\n    'GaussianNB': GaussianNB(),\n    'MultinomialNB': MultinomialNB(),\n    'BernoulliNB': BernoulliNB(),\n    'LogisticRegression': LogisticRegression(),\n    'RandomForestClassifier': RandomForestClassifier(),\n    'SupportVectorMachine': SVC(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n    'Stochastic Gradient Descent':  SGDClassifier(max_iter=5000, random_state=0),\n    'Neural Nets': MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5000, 10), random_state=1),\n    'XGBClassifier': XGBClassifier()\n}\n\nmodelNames = [\"GaussianNB\",\"MultinomialNB\",'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'Neural Nets', 'XGBClassifier']\n\ntrainScores = []\nvalidationScores = []\ntestScores = []\n\nfor m in models:\n    model = models[m]\n    model.fit(X_train, y_train)\n    score = model.score(X_valid, y_valid)\n    \n    \n    print(f'{m}') \n    train_score = model.score(X_train, y_train)\n    print(f'Train score of trained model: {train_score*100}')\n    trainScores.append(train_score*100)\n  \n    validation_score = model.score(X_valid, y_valid)\n    print(f'Validation score of trained model: {validation_score*100}')\n    validationScores.append(validation_score*100)\n\n    test_score = model.score(X_test, y_test)\n    print(f'Test score of trained model: {test_score*100}')\n    testScores.append(test_score*100)\n    print(\" \")\n    \n    y_predictions = model.predict(X_test)\n    conf_matrix = confusion_matrix(y_predictions, y_test)\n\n    print(f'Confussion Matrix: \\n{conf_matrix}\\n')\n\n    predictions = model.predict(X_test)\n    cm = confusion_matrix(predictions, y_test)\n  \n    tn = conf_matrix[0,0]\n    fp = conf_matrix[0,1]\n    tp = conf_matrix[1,1]\n    fn = conf_matrix[1,0]\n    accuracy  = (tp + tn) \/ (tp + fp + tn + fn)\n    precision = tp \/ (tp + fp)\n    recall    = tp \/ (tp + fn)\n    f1score  = 2 * precision * recall \/ (precision + recall)\n    specificity = tn \/ (tn + fp)\n    print(f'Accuracy : {accuracy*100}')\n    print(f'Precision: {precision*100}')\n    print(f'Recall   : {recall*100}')\n    print(f'F1 score : {f1score}')\n    print(f'Specificity : {specificity}')\n    print(\"\") \n    print(f'Classification Report: \\n{classification_report(predictions, y_test)}\\n')\n    print(\"\")\n   \n    for m in range (1):\n        current = modelNames[m]\n        modelNames.remove(modelNames[m])\n\n    preds = model.predict(X_test)\n    confusion_matr = confusion_matrix(y_test, preds) #normalize = 'true'\n    plt.figure(figsize = (16,10))\n    plt.title(f'Heart Disease   -   Model: {current}   -   Accuracy: {test_score*100}')\n    sns.heatmap(confusion_matr, cmap=\"Blues\", annot=True, annot_kws={\"size\": 16},\n              xticklabels = ['Target - 0', 'Target - 1'],\n             yticklabels=['Target - 0', 'Target - 1']);\n  \n    print(\"-------------------------------------------\")\n    print(\"\")\n    print(\"\")\n    \n    ","0f7353c6":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRXPPX4JDPfzzwDVuommp6FqgA1WgZjtTuh_gKxG6YBt7j68kOXsgcZGBgXlzLG9dvIimg&usqp=CAU)","1d12a84d":"![](http:\/\/)**check correlation between features**","8ae89c24":"# Information\n# \n1) id: unique identifier\n\n2) gender: \"Male\", \"Female\" or \"Other\"\n\n3) age: age of the patient\n\n4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n\n5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n\n6) ever_married: \"No\" or \"Yes\"\n\n7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n\n8) Residence_type: \"Rural\" or \"Urban\"\n\n9) avg_glucose_level: average glucose level in blood\n\n10) bmi: body mass index\n\n11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n\n12) stroke: 1 if the patient had a stroke or 0 if not\n","a8832421":"# **The best algorithms for this data are**\n**1 - LogisticRegression\n2 - RandomForestClassifier \n3 - SupportVectorMachine**","49aad3ef":" #  introduction\n**  Stroke is one of the most serious health problems worldwide and a leading cause of death and disability******"}}