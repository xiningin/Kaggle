{"cell_type":{"797ee8a1":"code","689af5c0":"code","ae98109a":"code","bb0b4694":"code","3fab5d98":"code","a4195c12":"code","845d7c21":"code","d8afc2a7":"code","df8309d5":"code","f46062d1":"code","de37643a":"code","ee5d0ea6":"code","85e9b8c9":"markdown","c06785fe":"markdown","de9d60d6":"markdown","9e7b8324":"markdown"},"source":{"797ee8a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","689af5c0":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","ae98109a":"df = pd.read_csv('\/kaggle\/input\/car-evaluation-data-set\/car_evaluation.csv', header = None)\ndf","bb0b4694":"df.columns = [\"buying\", \"maintenance\", \"no_doors\", \"no_persons\", \"luggage_boot\", \"safety\", \"class\"]","3fab5d98":"df.info()","a4195c12":"for i in df:\n    print(df[i].value_counts())","845d7c21":"df.dtypes","d8afc2a7":"for i in df:\n    df[i] = df[i].astype('category')\n    df[i] = df[i].cat.codes\ndf","df8309d5":"X = df.drop(\"class\", axis = 1)\ny = df[\"class\"]","f46062d1":"X = X.to_numpy()\ny = y.to_numpy()","de37643a":"kf = KFold(n_splits = 3)\nkf","ee5d0ea6":"split_value = 1\nfor train_index, test_index in kf.split(X):\n    #kfold\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    #model\n    clf = DecisionTreeClassifier(criterion='gini')\n    \n    #training\n    clf.fit(X_train, y_train)\n    \n    #testing\n    y_pred = clf.predict(X_test)\n    \n    print(\"=\"*75)\n    print(\"Split number: \" + str(split_value))\n    split_value+=1\n    #accuracy score\n    print('Model accuracy score: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))\n    \n    #confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    print('Confusion matrix\\n\\n', cm)\n    \n    #classification report\n    print(classification_report(y_test, y_pred))\n    \n    #visualise tree\n    plt.figure(figsize=(12,12))\n    tree.plot_tree(clf.fit(X_train, y_train)) ","85e9b8c9":"# Read data","c06785fe":"# Split data","de9d60d6":"# K Fold cross validation and classification","9e7b8324":"## Encode categorical data"}}