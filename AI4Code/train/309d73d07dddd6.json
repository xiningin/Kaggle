{"cell_type":{"b20263c3":"code","16df416d":"code","e54a748c":"code","ab79444e":"code","91d9c844":"code","9d3c6491":"code","d2da5970":"code","f1fc5544":"code","1e699dfc":"code","37c097bd":"code","70e9e3f6":"code","7a8a185e":"code","3bc77b16":"code","c1d134f5":"code","c90b7802":"code","8461228d":"code","41a9d9d3":"code","10bcfd0c":"code","75086ed4":"code","21de0f28":"code","5bcc9454":"code","e139fd82":"code","d4f41c53":"code","56f23c9f":"code","e176ccfa":"code","6dbcc64d":"code","3afd57ea":"code","cf5483a1":"code","4e0b326b":"code","19ffb66b":"code","d4de9da8":"code","47da2bb3":"code","b7dd7908":"code","b4f7ea15":"code","2ea54654":"code","b51d8a37":"code","811d9341":"code","d673409a":"code","d96063cf":"code","b131113f":"code","ca94094d":"code","b1f78beb":"code","fe1c04d8":"code","30660a1e":"code","c3f31632":"code","88a72a5b":"markdown","9b1a6b02":"markdown","f9fe7375":"markdown","37d70430":"markdown","529a177c":"markdown","b4d2f0f6":"markdown","42d8f2dc":"markdown","2168ab6a":"markdown","b8fd47b2":"markdown","5df9d9e7":"markdown","beef9320":"markdown","def36236":"markdown","ba471128":"markdown"},"source":{"b20263c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16df416d":"df = pd.read_csv(\"\/kaggle\/input\/fertilizer-prediction\/Fertilizer Prediction.csv\")","e54a748c":"df.head()","ab79444e":"df.describe()","91d9c844":"df['Soil Type'].unique()","9d3c6491":"import seaborn as sns\nsns.countplot(x='Soil Type', data = df)","d2da5970":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,8))\nsns.countplot(x='Crop Type', data = df)","f1fc5544":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,8))\nsns.countplot(x='Fertilizer Name', data = df)","1e699dfc":"#Defining function for Continuous and catogorical variable\ndef plot_conti(x):\n    fig, axes = plt.subplots(nrows=1,ncols=3,figsize=(15,5),tight_layout=True)\n    axes[0].set_title('Histogram')\n    sns.histplot(x,ax=axes[0])\n    axes[1].set_title('Checking Outliers')\n    sns.boxplot(x,ax=axes[1])\n    axes[2].set_title('Relation with output variable')\n    sns.boxplot(y = x,x = df['Fertilizer Name'])\n    \ndef plot_cato(x):\n    fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(15,5),tight_layout=True)\n    axes[0].set_title('Count Plot')\n    sns.countplot(x,ax=axes[0])\n    axes[1].set_title('Relation with output variable')\n    sns.countplot(x = x,hue = df['Fertilizer Name'], ax=axes[1])","37c097bd":"#EDA - Temparature variable\nplot_conti(df['Temparature'])","70e9e3f6":"#EDA - Humidity variable\nplot_conti(df['Humidity '])","7a8a185e":"#EDA - Moisture variable\nplot_conti(df['Moisture'])","3bc77b16":"plot_cato(df['Soil Type'])","c1d134f5":"#relation of soil type with Temperature \nplt.figure(figsize=(10,5))\nsns.boxplot(x=df['Soil Type'],y=df['Temparature'])","c90b7802":"#relation of soil type and Temperature with output variable\nplt.figure(figsize=(15,6))\nsns.boxplot(x=df['Soil Type'],y=df['Temparature'],hue=df['Fertilizer Name'])","8461228d":"#EDA - Crop_Type variable\nplot_cato(df['Crop Type'])","41a9d9d3":"#relation of crop type with temperature\nplt.figure(figsize=(15,6))\nsns.boxplot(x=df['Crop Type'],y=df['Temparature'])","10bcfd0c":"#relation of crop type with Humidity\nplt.figure(figsize=(15,8))\nsns.boxplot(x=df['Crop Type'],y=df['Humidity '])","75086ed4":"#EDA - Nitrogen variable\nplot_conti(df['Nitrogen'])","21de0f28":"#relation of nitrogen wrt to crop type\nplt.figure(figsize=(15,8))\nsns.boxplot(x=df['Crop Type'],y=df['Nitrogen'])","5bcc9454":"#EDA - Potassium variable\nplot_conti(df['Potassium'])","e139fd82":"#EDA - Phosphorous variable\nplot_conti(df['Phosphorous'])","d4f41c53":"y = df['Fertilizer Name'].copy()\nX = df.drop('Fertilizer Name', axis=1).copy()","56f23c9f":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3,4])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))","e176ccfa":"X[0]","6dbcc64d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=42)","3afd57ea":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","cf5483a1":"X_train[0]","4e0b326b":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators= 100, criterion = 'gini' , random_state= 42)\nclassifier.fit(X_train, y_train)","19ffb66b":"y_pred = classifier.predict(X_test)","d4de9da8":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","47da2bb3":"classifier.score(X_test, y_test)","b7dd7908":"#encoding the labels for categorical variables\nfrom sklearn.preprocessing import LabelEncoder\n","b4f7ea15":"#encoding Soil Type variable\nencode_soil = LabelEncoder()\ndf['Soil Type'] = encode_soil.fit_transform(df['Soil Type'])\n\n#creating the DataFrame\nSoil_Type = pd.DataFrame(zip(encode_soil.classes_,encode_soil.transform(encode_soil.classes_)),columns=['Original','Encoded'])\nSoil_Type = Soil_Type.set_index('Original')\nSoil_Type","2ea54654":"encode_crop =  LabelEncoder()\ndf['Crop Type'] = encode_crop.fit_transform(df['Crop Type'])\n\n#creating the DataFrame\nCrop_Type = pd.DataFrame(zip(encode_crop.classes_,encode_crop.transform(encode_crop.classes_)),columns=['Original','Encoded'])\nCrop_Type = Crop_Type.set_index('Original')\nCrop_Type","b51d8a37":"encode_ferti = LabelEncoder()\ndf['Fertilizer Name'] = encode_ferti.fit_transform(df['Fertilizer Name'])\n\n#creating the DataFrame\nFertilizer = pd.DataFrame(zip(encode_ferti.classes_,encode_ferti.transform(encode_ferti.classes_)),columns=['Original','Encoded'])\nFertilizer = Fertilizer.set_index('Original')\nFertilizer","811d9341":"#splitting the data into train and test\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(df.drop('Fertilizer Name',axis=1),df['Fertilizer Name'],test_size=0.2,random_state=1)\nprint('Shape of Splitting :')\nprint('x_train = {}, y_train = {}, x_test = {}, y_test = {}'.format(x_train.shape,y_train.shape,x_test.shape,y_test.shape))","d673409a":"x_train.info()","d96063cf":"rand = RandomForestClassifier(random_state = 42)\nrand.fit(x_train,y_train)","b131113f":"pred_rand = rand.predict(x_test)","ca94094d":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, classification_report\n\nparams = {\n    'n_estimators':[300,400,500],\n    'max_depth':[5,10,15],\n    'min_samples_split':[2,5,8]\n}\ngrid_rand = GridSearchCV(rand,params,cv=3,verbose=3,n_jobs=-1)\n\ngrid_rand.fit(x_train,y_train)\n\npred_rand = grid_rand.predict(x_test)\n\nprint(classification_report(y_test,pred_rand))\n\nprint('Best score : ',grid_rand.best_score_)\nprint('Best params : ',grid_rand.best_params_)","b1f78beb":"y_train[2]","fe1c04d8":"#pickling the file\nimport pickle\npickle_out = open('classifier.pkl','wb')\npickle.dump(grid_rand,pickle_out)\npickle_out.close()","30660a1e":"df.head()","c3f31632":"model = pickle.load(open('classifier.pkl','rb'))\nans = model.predict([[34,65,62\t,0,\t1,\t7,\t9,\t30]])\nif ans[0] == 0:\n    print(\"10-26-26\")\nelif ans[0] ==1:\n    print(\"14-35-14\")\nelif ans[0] == 2:\n    print(\"17-17-17\t\")\nelif ans[0] == 3:\n    print(\"20-20\")\nelif ans[0] == 4:\n    print(\"28-28\")\nelif ans[0] == 5:\n    print(\"DAP\")\nelse:\n    print(\"Urea\")","88a72a5b":"# Visualizing Data","9b1a6b02":"# Random Forest Classifier","f9fe7375":"# Train-test split","37d70430":"# Preprocessing using Label Encoder","529a177c":"**Test accuracy = 96.67%**","b4d2f0f6":"The performance of a model significantly depends on the value of hyperparameters. Grid Search is the process of performing hyperparameter tuning in order to determine the optimal values for a given model. ","42d8f2dc":"# Feature Scaling","2168ab6a":"# Creating confusion matrix","b8fd47b2":"# Random Forest Classifier","5df9d9e7":"# Hyperparameter tuning with GridSearchCV","beef9320":"# Reading dataset","def36236":"# Preprocessing using One-Hot Encoder","ba471128":"**Best score = 97.48%**"}}