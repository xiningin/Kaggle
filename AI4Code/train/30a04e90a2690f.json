{"cell_type":{"140160f1":"code","f94c9f8e":"code","4f4ef2ce":"code","a18ec988":"code","33578ed6":"code","0baa2069":"code","7bd61130":"code","99e7d475":"code","52f7852c":"code","12a2f13e":"code","bb40d77c":"markdown"},"source":{"140160f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f94c9f8e":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","4f4ef2ce":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","a18ec988":"data.info()\ndata.describe()\ndata.head()","33578ed6":"def get_missing_data_columns(df):\n    missing_data_cols = df.isnull().sum()\n    data_cols_total = df.isnull().count()\n    missing_percent = missing_data_cols \/ data_cols_total\n    missing_df = pd.concat([missing_data_cols, missing_percent], axis = 1)\n    missing_df.columns = ['missing_data_sum', 'missing_data_percent']\n    missing_df.sort_values(by ='missing_data_percent', \\\n                           inplace = True,ascending = False)\n    return missing_df","0baa2069":"get_missing_data_columns(data)","7bd61130":"train = data.copy()\n\ntrain['show_id'] = train['show_id'].apply(lambda x: x[1:]).astype(np.int16)\ntrain['release_year'] = train['release_year'].astype(np.int16)\n\ngroup_by_type = train.groupby(by = ['type']).count()\n\ntrain['date_added'] = train['date_added'].apply(pd.to_datetime)","99e7d475":"tfidf = TfidfVectorizer(stop_words = 'english')\ntfidf_matrix = tfidf.fit_transform(train['description'])\ncosine_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n\nindices = pd.Series(train.index, index = train['title'])\n\nmovie_name = 'Ganglands'\nmovie_index = indices[movie_name]\nsimilarity_scores = pd.DataFrame(cosine_matrix[movie_index], columns = ['Score'])\nn = 10\ntop_n_similarity_scores = \\\n    similarity_scores.sort_values(by = 'Score', ascending = False)[:n]","52f7852c":"top_n_similarity_scores","12a2f13e":"recommend_movies = indices[top_n_similarity_scores.index]\nrecommend_movies","bb40d77c":"Movie Recommend with TfidfVectorizer"}}