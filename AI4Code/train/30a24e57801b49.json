{"cell_type":{"09207480":"code","78ded91d":"code","479d8eda":"code","706fc431":"code","f131df01":"code","3e742f82":"code","b2db09a8":"code","83fe663a":"code","54862f58":"code","913addb5":"code","f1a144bf":"code","3a622596":"code","4111ac65":"code","8522d19b":"code","3e6dbbea":"code","de770ffc":"code","5207e69f":"markdown"},"source":{"09207480":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78ded91d":"# Import all the necessary packages\n\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPool2D, Dense, BatchNormalization, Dropout\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nimport os\nfrom keras.applications.resnet50 import ResNet50, preprocess_input","479d8eda":"# Outline of the dataset to be utilised\nfile = pd.read_csv(\"..\/input\/10-monkey-species\/monkey_labels.txt\", names = [\"Label\", \"Latin Name\", \"Common Name\", \"Training Images\", \"Valdation Images\"], skiprows = 1)\nfile","706fc431":"training_path = \"..\/input\/10-monkey-species\/training\/training\"\nvalidation_path = \"..\/input\/10-monkey-species\/validation\/validation\"","f131df01":"# Function to display random images of each species\ndef DisplayImages(training_path, labels):\n    i = 0\n    for folder in os.listdir(training_path):\n        species_path = os.path.join(training_path, folder)\n        random_image = random.choice(os.listdir(species_path))\n        #print(random_image)    \n        img = load_img(species_path + '\/' + random_image)\n        #plt.tight_layout()\n        plt.figure(figsize = (5,5))\n        plt.axis(False)\n        plt.title(labels[i], fontdict = {'fontsize' : 30})\n        i += 1\n        plt.imshow(img)\n       \n    \n","3e742f82":"# Function call for displaying images\nDisplayImages(training_path, file[\"Common Name\"] )","b2db09a8":"def LoadResNet():\n  model = ResNet50(weights = 'imagenet', include_top = True, input_shape=(224,224,3))\n  return model","83fe663a":"base_model = LoadResNet() \nbase_model.summary()","54862f58":"base_model_output = base_model.layers[-2].output\n\n# add new layers \nx = Dropout(0.7, name='drop2')(base_model_output)\noutput = Dense(10, activation='softmax', name='fc3')(x)\n\n# define a new model \nmodel = Model(base_model.input, output)\n\n# Freeze all the base model layers \nfor layer in base_model.layers[:-1]:\n    layer.trainable=False\n\nmodel.compile(loss='categorical_crossentropy', optimizer=RMSprop(lr = 0.001), metrics=['accuracy'])\nmodel.summary()","913addb5":"training_images = ImageDataGenerator(tf.keras.applications.resnet50.preprocess_input).flow_from_directory(training_path, target_size = (224,224), class_mode = 'categorical', batch_size = 30)\nvalidation_images = ImageDataGenerator(tf.keras.applications.resnet50.preprocess_input).flow_from_directory(validation_path, target_size = (224, 224), class_mode = 'categorical', batch_size = 20)","f1a144bf":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs = {}):\n    if logs.get('val_accuracy') > 0.95:\n      print(\"\\nReached 95% training accuracy so cancelling training!\")\n      self.model.stop_training = True\n\ncallbacks = myCallback()","3a622596":"resnet50model = model.fit_generator(training_images, steps_per_epoch = 35, \n                                          epochs = 100, validation_data= validation_images, validation_steps=13,\n                                          callbacks = [callbacks])","4111ac65":"# Function to get the accuracy graphs for training and validation\ndef AccuracyComaprision(model):\n    trn_acc = model.history['accuracy']\n    vld_acc = model.history['val_accuracy']\n    num_epochs = range(len(trn_acc))\n    plt.plot(num_epochs, trn_acc)\n    plt.plot(num_epochs, vld_acc)\n    plt.legend([\"Training Accuracy\", \"Validation Accuracy\"])\n    plt.grid(True)","8522d19b":"AccuracyComaprision(resnet50model)","3e6dbbea":"# Function to get the loss graphs for training and validation\ndef LossComparision(model):\n    vld_loss = model.history['val_loss']\n    train_loss = model.history['loss']\n    num_epochs = range(len(vld_loss))\n    plt.plot(num_epochs, train_loss)\n    plt.plot(num_epochs, vld_loss)\n    plt.legend([\"Training Loss\", \"Validation Loss\"])\n    plt.grid(True)\n    ","de770ffc":"LossComparision(resnet50model)","5207e69f":"If you like the notebook. Do give it an upvote!\nHappy Kaggling!"}}