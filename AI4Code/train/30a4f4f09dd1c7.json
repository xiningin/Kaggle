{"cell_type":{"e35c2d0c":"code","17eabe7c":"code","c5fdbe6b":"code","2c35ee5b":"code","61cb786e":"code","8a30000a":"code","51ed55b4":"code","a17cd6c6":"code","e5d520a6":"code","e51f7da8":"code","913ccfc3":"code","5ec6ce5d":"code","28242c9e":"code","3ba95902":"code","0af8469a":"code","792e99b7":"code","a85f819e":"code","6786bfa4":"code","be386bc4":"markdown","ad6d9f72":"markdown","2e03aed0":"markdown","a4988b33":"markdown","8a98de78":"markdown","ac323398":"markdown","7ece1737":"markdown","59527bd7":"markdown"},"source":{"e35c2d0c":"import gc\nimport os\nimport time\nimport logging\nimport datetime\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom scipy import stats\nfrom tqdm import tqdm_notebook\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nwarnings.filterwarnings('ignore')","17eabe7c":"PATH=\"..\/input\/\"\nos.listdir(PATH)","c5fdbe6b":"print(\"There are {} files in test folder\".format(len(os.listdir(os.path.join(PATH, 'test' )))))","2c35ee5b":"%%time\ntrain_df = pd.read_csv(os.path.join(PATH,'train.csv'), dtype={'acoustic_data': np.int16, 'time_to_failure': np.float32})","61cb786e":"print(\"Train: rows:{} cols:{}\".format(train_df.shape[0], train_df.shape[1]))","8a30000a":"rows = 150000\nsegments = int(np.floor(train_df.shape[0] \/ rows))\nprint(\"Number of segments: \", segments)","51ed55b4":"train_X = pd.DataFrame(index=range(segments), dtype=np.float64)\ntrain_y = pd.DataFrame(index=range(segments), dtype=np.float64, columns=['time_to_failure'])","a17cd6c6":"def create_features(seg_id, seg, X):\n    xc = pd.Series(seg['acoustic_data'].values)   \n    zc = np.fft.fft(xc)\n    realFFT = np.real(zc)\n    imagFFT = np.imag(zc)\n    X.loc[seg_id, 'mean'] = xc.mean()\n    X.loc[seg_id, 'std'] = xc.std()\n    X.loc[seg_id, 'max'] = xc.max()\n    X.loc[seg_id, 'min'] = xc.min()\n    X.loc[seg_id, 'sum'] = xc.sum()\n    X.loc[seg_id, 'mad'] = xc.mad()\n    X.loc[seg_id, 'kurt'] = xc.kurtosis()\n    X.loc[seg_id, 'skew'] = xc.skew()\n    X.loc[seg_id, 'med'] = xc.median()\n    X.loc[seg_id, 'abs_mean'] = np.abs(xc).mean()\n    X.loc[seg_id, 'q95'] = np.quantile(xc, 0.95)\n    X.loc[seg_id, 'q99'] = np.quantile(xc, 0.99)\n    X.loc[seg_id, 'q05'] = np.quantile(xc, 0.05)\n    X.loc[seg_id, 'q01'] = np.quantile(xc, 0.01)\n    X.loc[seg_id, 'Rmean'] = realFFT.mean()\n    X.loc[seg_id, 'Rstd'] = realFFT.std()\n    X.loc[seg_id, 'Rmax'] = realFFT.max()\n    X.loc[seg_id, 'Rmin'] = realFFT.min()\n    X.loc[seg_id, 'Imean'] = imagFFT.mean()\n    X.loc[seg_id, 'Istd'] = imagFFT.std()\n    X.loc[seg_id, 'Imax'] = imagFFT.max()\n    X.loc[seg_id, 'Imin'] = imagFFT.min()\n    X.loc[seg_id, 'std_first_50000'] = xc[:50000].std()\n    X.loc[seg_id, 'std_last_50000'] = xc[-50000:].std()\n    X.loc[seg_id, 'std_first_25000'] = xc[:25000].std()\n    X.loc[seg_id, 'std_last_25000'] = xc[-25000:].std()\n    X.loc[seg_id, 'std_first_10000'] = xc[:10000].std()\n    X.loc[seg_id, 'std_last_10000'] = xc[-10000:].std()\n","e5d520a6":"# iterate over all segments\nfor seg_id in tqdm_notebook(range(segments)):\n    seg = train_df.iloc[seg_id*rows:seg_id*rows+rows]\n    create_features(seg_id, seg, train_X)\n    train_y.loc[seg_id, 'time_to_failure'] = seg['time_to_failure'].values[-1]","e51f7da8":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='seg_id')\ntest_X = pd.DataFrame(columns=train_X.columns, dtype=np.float64, index=submission.index)","913ccfc3":"for seg_id in tqdm_notebook(test_X.index):\n    seg = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    create_features(seg_id, seg, test_X)","5ec6ce5d":"print(\"Train X: {} y: {} Test X: {}\".format(train_X.shape, train_y.shape, test_X.shape))","28242c9e":"train_X.head()","3ba95902":"test_X.head()","0af8469a":"scaler = StandardScaler()\nscaler.fit(pd.concat([train_X, test_X]))\nscaled_train_X = pd.DataFrame(scaler.transform(train_X), columns=train_X.columns)\nscaled_test_X = pd.DataFrame(scaler.transform(test_X), columns=test_X.columns)","792e99b7":"# feature lists \nfeatures = ['mean', 'std', 'max', 'min', 'sum', 'mad', 'kurt', 'skew', 'med','abs_mean', 'q95', 'q99', 'q05', 'q01', 'Rmean', 'Rstd', 'Rmax','Rmin', 'Imean', 'Istd', 'Imax', 'Imin', 'std_first_50000', 'std_last_50000', 'std_first_25000','std_last_25000', 'std_first_10000','std_last_10000']","a85f819e":"def plot_acc_agg_ttf_data(features, title=\"Averaged accoustic data and ttf\"):\n    for feature in features:\n        fig, ax1 = plt.subplots(figsize=(16, 8))\n        plt.title('Averaged accoustic data ({}) and time to failure'.format(feature))\n        plt.plot(train_X[feature], color='r')\n        ax1.set_xlabel('training samples')\n        ax1.set_ylabel('acoustic data ({})'.format(feature), color='r')\n        plt.legend(['acoustic data ({})'.format(feature)], loc=(0.01, 0.95))\n        ax2 = ax1.twinx()\n        plt.plot(train_y, color='b')\n        ax2.set_ylabel('time to failure', color='b')\n        plt.legend(['time to failure'], loc=(0.01, 0.9))\n        plt.grid(True)","6786bfa4":"plot_acc_agg_ttf_data(features)","be386bc4":"<h1><center><font size=\"6\">Feature selection simplified<\/font><\/center><\/h1>\n\n","ad6d9f72":"# <a id='1'>Introduction<\/a>  \n\n## Simulated earthquake experiment\nThe data are from an experiment conducted on rock in a double direct shear geometry subjected to bi-axial loading, a classic laboratory earthquake model.\n\nTwo fault gouge layers are sheared simultaneously while subjected to a constant normal load and a prescribed shear velocity. The laboratory faults fail in repetitive cycles of stick and slip that is meant to mimic the cycle of loading and failure on tectonic faults. While the experiment is considerably simpler than a fault in Earth, it shares many physical characteristics.\n\nLos Alamos' initial work showed that the prediction of laboratory earthquakes from continuous seismic data is possible in the case of quasi-periodic laboratory seismic cycles.\n\n## Competition\nIn this competition, the team has provided a much more challenging dataset with considerably more aperiodic earthquake failures.\nObjective of the competition is to predict the failures for each test set.","2e03aed0":"# <a id='2'>Prepare the data analysis<\/a>  \n\n## Load packages","a4988b33":"## Aggregated features and time to failure\n\nshowing aggregated features and time to failure on the same graph. ","8a98de78":"# <a id='3'>Calculate aggregated features<\/a>  ","ac323398":"# <a id='6'>References<\/a>  \n\n[1] LANL Earthquake Prediction, https:\/\/www.kaggle.com\/c\/LANL-Earthquake-Prediction  \n[2] Shaking Earth, https:\/\/www.kaggle.com\/allunia\/shaking-earth  \n[3] Earthquake FE - more features and samles, https:\/\/www.kaggle.com\/artgor\/earthquakes-fe-more-features-and-samples  \n[4] LANL Earthquake New Approach EDA\n https:\/\/www.kaggle.com\/gpreda\/lanl-earthquake-new-approach-eda\/notebook   \n\n","7ece1737":"## Load data","59527bd7":"<br>\nI hope this kernel will help you to sore high.\n<br>"}}