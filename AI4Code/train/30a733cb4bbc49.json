{"cell_type":{"a4544aee":"code","5fb650e0":"code","d7737115":"code","e65d19a1":"code","230e9936":"code","ba6d2132":"code","91517866":"code","53f72388":"code","ff53c50d":"code","b3d6cc93":"code","666d72c6":"code","d8587dbc":"code","c43b8138":"code","f493b578":"code","e972e052":"code","8341d975":"code","931ab658":"code","b1828cdf":"code","ddc68b45":"code","d9a77fb9":"code","a597e704":"code","929915aa":"markdown","e68eeaf2":"markdown","c6e620a5":"markdown","5b40ca1d":"markdown","f735affd":"markdown","42c2c9c9":"markdown","e8974521":"markdown","c9acff3d":"markdown","39d6caff":"markdown","d7d1de76":"markdown","f14585bc":"markdown"},"source":{"a4544aee":"import math, re, os\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE","5fb650e0":"!wget aibrian.com\/checkpoint\n\nimport os\nimport pickle\nimport logging\n\nimport numpy as np\nnp.random.seed(6788)\n\nimport tensorflow as tf\ntry:\n    tf.set_random_seed(6788)\nexcept:\n    pass\n\nfrom tensorflow.keras.layers import Input, Embedding, LSTM, TimeDistributed, Dense, SimpleRNN, Activation, dot, concatenate, Bidirectional, GRU\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n# Placeholder for max lengths of input and output which are user configruable constants\nmax_input_length = None\nmax_output_length = None\n\nchar_start_encoding = 1\nchar_padding_encoding = 0\n\ndef build_sequence_encode_decode_dicts(input_data):\n    \"\"\"\n    Builds encoding and decoding dictionaries for given list of strings.\n\n    Parameters:\n\n    input_data (list): List of strings.\n\n    Returns:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    decoding_dict (dict): Reverse of above dictionary.\n\n    len(encoding_dict) + 2: +2 because of special start (1) and padding (0) chars we add to each sequence.\n\n    \"\"\"\n    encoding_dict = {}\n    decoding_dict = {}\n    for line in input_data:\n        for char in line:\n            if char not in encoding_dict:\n                # Using 2 + because our sequence start encoding is 1 and padding encoding is 0\n                encoding_dict[char] = 2 + len(encoding_dict)\n                decoding_dict[2 + len(decoding_dict)] = char\n    \n    return encoding_dict, decoding_dict, len(encoding_dict) + 2\n\ndef encode_sequences(encoding_dict, sequences, max_length):\n    \"\"\"\n    Encodes given input strings into numpy arrays based on the encoding dicts supplied.\n\n    Parameters:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    sequences (list): List of sequences (strings) to be encoded.\n\n    max_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    Returns:\n    \n    encoded_data (numpy array): Reverse of above dictionary.\n\n    \"\"\"\n    encoded_data = np.zeros(shape=(len(sequences), max_length))\n    for i in range(len(sequences)):\n        for j in range(min(len(sequences[i]), max_length)):\n            encoded_data[i][j] = encoding_dict[sequences[i][j]]\n    return encoded_data\n\n\ndef decode_sequence(decoding_dict, sequence):\n    \"\"\"\n    Decodes integers into string based on the decoding dict.\n\n    Parameters:\n\n    decoding_dict (dict): Dictionary with chars as values and corresponding integer encodings as keys.\n\n    Returns:\n\n    sequence (str): Decoded string.\n\n    \"\"\"\n    text = ''\n    for i in sequence:\n        if i == 0:\n            break\n        text += decoding_dict[i]\n    return text\n\n\ndef generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio):\n    \"\"\"\n    Main function for generating encoded output(s) for encoded input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    all_completed_beams (list): List of completed beams.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n    min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    all_completed_beams = {i:[] for i in range(len(texts))}\n    all_running_beams = {}\n    for i, text in enumerate(texts):\n        all_running_beams[i] = [[np.zeros(shape=(len(text), max_output_length)), [1]]]\n        all_running_beams[i][0][0][:,0] = char_start_encoding\n\n    \n    while len(all_running_beams) != 0:\n        for i in all_running_beams:\n            all_running_beams[i] = sorted(all_running_beams[i], key=lambda tup:np.prod(tup[1]), reverse=True)\n            all_running_beams[i] = all_running_beams[i][:max_beams]\n        \n        in_out_map = {}\n        batch_encoder_input = []\n        batch_decoder_input = []\n        t_c = 0\n        for text_i in all_running_beams:\n            if text_i not in in_out_map:\n                in_out_map[text_i] = []\n            for running_beam in all_running_beams[text_i]:\n                in_out_map[text_i].append(t_c)\n                t_c+=1\n                batch_encoder_input.append(texts[text_i])\n                batch_decoder_input.append(running_beam[0][0])\n\n\n        batch_encoder_input = encode_sequences(input_encoding_dict, batch_encoder_input, max_input_length)\n        batch_decoder_input = np.asarray(batch_decoder_input)\n        batch_predictions = model.predict([batch_encoder_input, batch_decoder_input])\n\n        t_c = 0\n        for text_i, t_cs in in_out_map.items():\n            temp_running_beams = []\n            for running_beam, probs in all_running_beams[text_i]:\n                if len(probs) >= min_cut_off_len:\n                    all_completed_beams[text_i].append([running_beam[:,1:], probs])\n                else:\n                    prediction = batch_predictions[t_c]\n                    sorted_args = prediction.argsort()\n                    sorted_probs = np.sort(prediction)\n\n                    for i in range(1, beam_size+1):\n                        temp_running_beam = np.copy(running_beam)\n                        i = -1 * i\n                        ith_arg = sorted_args[:, i][len(probs)]\n                        ith_prob = sorted_probs[:, i][len(probs)]\n                        \n                        temp_running_beam[:, len(probs)] = ith_arg\n                        temp_running_beams.append([temp_running_beam, probs + [ith_prob]])\n\n                t_c+=1\n\n            all_running_beams[text_i] = [b for b in temp_running_beams]\n        \n        to_del = []\n        for i, v in all_running_beams.items():\n            if not v:\n                to_del.append(i)\n        \n        for i in to_del:\n            del all_running_beams[i]\n\n    return all_completed_beams\n\ndef infer(texts, model, params, beam_size=3, max_beams=3, min_cut_off_len=10, cut_off_ratio=1.5):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    outputs (list of dicts): Each dict has the sequence and probability.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    all_decoder_outputs = generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio)\n    outputs = []\n\n    for i, decoder_outputs in all_decoder_outputs.items():\n        outputs.append([])\n        for decoder_output, probs in decoder_outputs:\n            outputs[-1].append({'sequence': decode_sequence(output_decoding_dict, decoder_output[0]), 'prob': np.prod(probs)})\n\n    return outputs\n\ndef generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    encoder_input = encode_sequences(input_encoding_dict, texts, max_input_length)\n    decoder_input = np.zeros(shape=(len(encoder_input), max_output_length))\n    decoder_input[:,0] = char_start_encoding\n    for i in range(1, max_output_length):\n        output = model.predict([encoder_input, decoder_input]).argmax(axis=2)\n        decoder_input[:,i] = output[:,i]\n        \n        if np.all(decoder_input[:,i] == char_padding_encoding):\n            return decoder_input[:,1:]\n\n    return decoder_input[:,1:]\n\ndef infer_greedy(texts, model, params):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    return_string = False\n    if not isinstance(texts, list):\n        return_string = True\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    decoder_output = generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length)\n    if return_string:\n        return decode_sequence(output_decoding_dict, decoder_output[0])\n\n    return [decode_sequence(output_decoding_dict, i) for i in decoder_output]\n\n\ndef build_params(input_data = [], output_data = [], params_path = 'test_params', max_lenghts = (5,5)):\n    \"\"\"\n    Build the params and save them as a pickle. (If not already present.)\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params_path (str): Path for saving the params.\n\n    max_lenghts (tuple): (max_input_length, max_output_length)\n\n    Returns:\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    if os.path.exists(params_path):\n        print('Loading the params file')\n        params = pickle.load(open(params_path, 'rb'))\n        return params\n    \n    print('Creating params file')\n    input_encoding, input_decoding, input_dict_size = build_sequence_encode_decode_dicts(input_data)\n    output_encoding, output_decoding, output_dict_size = build_sequence_encode_decode_dicts(output_data)\n    params = {}\n    params['input_encoding'] = input_encoding\n    params['input_decoding'] = input_decoding\n    params['input_dict_size'] = input_dict_size\n    params['output_encoding'] = output_encoding\n    params['output_decoding'] = output_decoding\n    params['output_dict_size'] = output_dict_size\n    params['max_input_length'] = max_lenghts[0]\n    params['max_output_length'] = max_lenghts[1]\n\n    pickle.dump(params, open(params_path, 'wb'))\n    return params\n\ndef convert_training_data(input_data, output_data, params):\n    \"\"\"\n    Encode training data.\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    Returns:\n    \n    x, y: encoded inputs, outputs.\n\n    \"\"\"\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    encoded_training_input = encode_sequences(input_encoding, input_data, max_input_length)\n    encoded_training_output = encode_sequences(output_encoding, output_data, max_output_length)\n    training_encoder_input = encoded_training_input\n    training_decoder_input = np.zeros_like(encoded_training_output)\n    training_decoder_input[:, 1:] = encoded_training_output[:,:-1]\n    training_decoder_input[:, 0] = char_start_encoding\n    training_decoder_output = np.eye(output_dict_size)[encoded_training_output.astype('int')]\n    x=[training_encoder_input, training_decoder_input]\n    y=[training_decoder_output]\n    return x, y\n\ndef build_model(params_path = 'test\/params', enc_lstm_units = 128, unroll = True, use_gru=False, optimizer='adam', display_summary=True):\n    \"\"\"\n    Build keras model\n\n    Parameters:\n\n    params_path (str): Path for saving\/loading the params.\n\n    enc_lstm_units (int): Positive integer, dimensionality of the output space.\n\n    unroll (bool): Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.\n\n    use_gru (bool): GRU will be used instead of LSTM\n\n    optimizer (str): optimizer to be used\n\n    display_summary (bool): Set to true for verbose information.\n\n\n    Returns:\n\n    model (keras model): built model object.\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    # generateing the encoding, decoding dicts\n    params = build_params(params_path = params_path)\n\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n\n    if display_summary:\n        print('Input encoding', input_encoding)\n        print('Input decoding', input_decoding)\n        print('Output encoding', output_encoding)\n        print('Output decoding', output_decoding)\n\n\n    # We need to define the max input lengths and max output lengths before training the model.\n    # We pad the inputs and outputs to these max lengths\n    encoder_input = Input(shape=(max_input_length,))\n    decoder_input = Input(shape=(max_output_length,))\n\n    # Need to make the number of hidden units configurable\n    encoder = Embedding(input_dict_size, enc_lstm_units, input_length=max_input_length, mask_zero=True)(encoder_input)\n    # using concat merge mode since in my experiments it g ave the best results same with unroll\n    if not use_gru:\n        encoder = Bidirectional(LSTM(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)\n        encoder_outs, forward_h, forward_c, backward_h, backward_c = encoder\n        encoder_h = concatenate([forward_h, backward_h])\n        encoder_c = concatenate([forward_c, backward_c])\n    \n    else:\n        encoder = Bidirectional(GRU(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)        \n        encoder_outs, forward_h, backward_h= encoder\n        encoder_h = concatenate([forward_h, backward_h])\n    \n\n    # using 2* enc_lstm_units because we are using concat merge mode\n    # cannot use bidirectionals lstm for decoding (obviously!)\n    \n    decoder = Embedding(output_dict_size, 2 * enc_lstm_units, input_length=max_output_length, mask_zero=True)(decoder_input)\n\n    if not use_gru:\n        decoder = LSTM(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=[encoder_h, encoder_c])\n    else:\n        decoder = GRU(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=encoder_h)\n\n\n    # luong attention\n    attention = dot([decoder, encoder_outs], axes=[2, 2])\n    attention = Activation('softmax', name='attention')(attention)\n\n    context = dot([attention, encoder_outs], axes=[2,1])\n\n    decoder_combined_context = concatenate([context, decoder])\n\n    output = TimeDistributed(Dense(enc_lstm_units, activation=\"tanh\"))(decoder_combined_context)\n    output = TimeDistributed(Dense(output_dict_size, activation=\"softmax\"))(output)\n\n    model = Model(inputs=[encoder_input, decoder_input], outputs=[output])\n    if display_summary:\n      model.summary()\n    \n    return model, params\n    \nresolver = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(resolver)\ntf.tpu.experimental.initialize_tpu_system(resolver)\nstrategy = tf.distribute.experimental.TPUStrategy(resolver) \ninput_data = ['123', '213', '312', '321', '132', '231']\noutput_data = ['123', '123', '123', '123', '123', '123']\nbuild_params(input_data = input_data, output_data = output_data, params_path = 'params', max_lenghts=(10, 10))\n\nwith strategy.scope():\n  #model = Model(inputs=[encoder_input, decoder_input], outputs=[output])\n  model, params = build_model(params_path='params')\n  model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\ninput_data, output_data = convert_training_data(input_data, output_data, params)\n\ncheckpoint = ModelCheckpoint('checkpoint', monitor='val_acc', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\nmodel.fit(input_data, output_data, validation_data=(input_data, output_data), batch_size=2, epochs=40, callbacks=callbacks_list)\n#model.fit(get_training_dataset(), steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS, validation_data=get_validation_dataset())\n input_data = ['123', '213', '312', '321', '132', '231']\n    output_data = ['123', '123', '123', '123', '123', '123']\n    build_params(input_data = input_data, output_data = output_data, params_path = 'params', max_lenghts=(10, 10))\n    \n    model, params = build_model(params_path='params')\n\n    input_data, output_data = convert_training_data(input_data, output_data, params)\n    \n    checkpoint = ModelCheckpoint('checkpoint', monitor='val_acc', verbose=1, save_best_only=True, mode='max')\n    callbacks_list = [checkpoint]\n\n    model.fit(input_data, output_data, validation_data=(input_data, output_data), batch_size=2, epochs=40, callbacks=callbacks_list)\n         model, params = build_model(params_path='params', enc_lstm_units=256)\n    model.load_weights('checkpoint')\n    start = time.time()\n    print(infer(\"i will be there for you\", model, params))\n    end = time.time()\n    print(end - start)\n\n    start = time.time()\n    print(infer([\"i will be there for you\",\"these is not that gre at\",\"i dotlike this\",\"i work at reckonsys\"], model, params))\n    end = time.time()\n    print(end - start)\n    start = time.time()\n    print(infer(\"i will be there for you\", model, params))\n    end = time.time()\n    print(end - start )\n\n","d7737115":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","e65d19a1":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"","230e9936":"IMAGE_SIZE = [512, 512] # at this size, a GPU will run out of memory. Use the TPU\nEPOCHS = 12\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nGCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","ba6d2132":"# numpy and matplotlib defaults\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","91517866":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","53f72388":"# data dump\nprint(\"Training data shapes:\")\nfor image, label in get_training_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())\nprint(\"Validation data shapes:\")\nfor image, label in get_validation_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Validation data label examples:\", label.numpy())\nprint(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","ff53c50d":"# Peek at training data\ntraining_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)","b3d6cc93":"# run this cell again for next set of images\ndisplay_batch_of_images(next(train_batch))","666d72c6":"# peer at test data\ntest_dataset = get_test_dataset()\ntest_dataset = test_dataset.unbatch().batch(20)\ntest_batch = iter(test_dataset)","d8587dbc":"# run this cell again for next set of images\ndisplay_batch_of_images(next(test_batch))","c43b8138":"with strategy.scope():\n    pretrained_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model.trainable = False # tramsfer learning\n    \n    model = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel.summary()","f493b578":"import os\nimport pickle\nimport logging\n\nimport numpy as np\nnp.random.seed(6788)\n\nimport tensorflow as tf\ntry:\n    tf.set_random_seed(6788)\nexcept:\n    pass\n\nfrom keras.layers import Input, Embedding, LSTM, TimeDistributed, Dense, SimpleRNN, Activation, dot, concatenate, Bidirectional, GRU\nfrom keras.models import Model, load_model\n\nfrom keras.callbacks import ModelCheckpoint\n\n\n# Placeholder for max lengths of input and output which are user configruable constants\nmax_input_length = None\nmax_output_length = None\n\nchar_start_encoding = 1\nchar_padding_encoding = 0\n\ndef build_sequence_encode_decode_dicts(input_data):\n    \"\"\"\n    Builds encoding and decoding dictionaries for given list of strings.\n\n    Parameters:\n\n    input_data (list): List of strings.\n\n    Returns:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    decoding_dict (dict): Reverse of above dictionary.\n\n    len(encoding_dict) + 2: +2 because of special start (1) and padding (0) chars we add to each sequence.\n\n    \"\"\"\n    encoding_dict = {}\n    decoding_dict = {}\n    for line in input_data:\n        for char in line:\n            if char not in encoding_dict:\n                # Using 2 + because our sequence start encoding is 1 and padding encoding is 0\n                encoding_dict[char] = 2 + len(encoding_dict)\n                decoding_dict[2 + len(decoding_dict)] = char\n    \n    return encoding_dict, decoding_dict, len(encoding_dict) + 2\n\ndef encode_sequences(encoding_dict, sequences, max_length):\n    \"\"\"\n    Encodes given input strings into numpy arrays based on the encoding dicts supplied.\n\n    Parameters:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    sequences (list): List of sequences (strings) to be encoded.\n\n    max_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    Returns:\n    \n    encoded_data (numpy array): Reverse of above dictionary.\n\n    \"\"\"\n    encoded_data = np.zeros(shape=(len(sequences), max_length))\n    for i in range(len(sequences)):\n        for j in range(min(len(sequences[i]), max_length)):\n            encoded_data[i][j] = encoding_dict[sequences[i][j]]\n    return encoded_data\n\n\ndef decode_sequence(decoding_dict, sequence):\n    \"\"\"\n    Decodes integers into string based on the decoding dict.\n\n    Parameters:\n\n    decoding_dict (dict): Dictionary with chars as values and corresponding integer encodings as keys.\n\n    Returns:\n\n    sequence (str): Decoded string.\n\n    \"\"\"\n    text = ''\n    for i in sequence:\n        if i == 0:\n            break\n        text += decoding_dict[i]\n    return text\n\n\ndef generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio):\n    \"\"\"\n    Main function for generating encoded output(s) for encoded input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    all_completed_beams (list): List of completed beams.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n    min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    all_completed_beams = {i:[] for i in range(len(texts))}\n    all_running_beams = {}\n    for i, text in enumerate(texts):\n        all_running_beams[i] = [[np.zeros(shape=(len(text), max_output_length)), [1]]]\n        all_running_beams[i][0][0][:,0] = char_start_encoding\n\n    \n    while len(all_running_beams) != 0:\n        for i in all_running_beams:\n            all_running_beams[i] = sorted(all_running_beams[i], key=lambda tup:np.prod(tup[1]), reverse=True)\n            all_running_beams[i] = all_running_beams[i][:max_beams]\n        \n        in_out_map = {}\n        batch_encoder_input = []\n        batch_decoder_input = []\n        t_c = 0\n        for text_i in all_running_beams:\n            if text_i not in in_out_map:\n                in_out_map[text_i] = []\n            for running_beam in all_running_beams[text_i]:\n                in_out_map[text_i].append(t_c)\n                t_c+=1\n                batch_encoder_input.append(texts[text_i])\n                batch_decoder_input.append(running_beam[0][0])\n\n\n        batch_encoder_input = encode_sequences(input_encoding_dict, batch_encoder_input, max_input_length)\n        batch_decoder_input = np.asarray(batch_decoder_input)\n        batch_predictions = model.predict([batch_encoder_input, batch_decoder_input])\n\n        t_c = 0\n        for text_i, t_cs in in_out_map.items():\n            temp_running_beams = []\n            for running_beam, probs in all_running_beams[text_i]:\n                if len(probs) >= min_cut_off_len:\n                    all_completed_beams[text_i].append([running_beam[:,1:], probs])\n                else:\n                    prediction = batch_predictions[t_c]\n                    sorted_args = prediction.argsort()\n                    sorted_probs = np.sort(prediction)\n\n                    for i in range(1, beam_size+1):\n                        temp_running_beam = np.copy(running_beam)\n                        i = -1 * i\n                        ith_arg = sorted_args[:, i][len(probs)]\n                        ith_prob = sorted_probs[:, i][len(probs)]\n                        \n                        temp_running_beam[:, len(probs)] = ith_arg\n                        temp_running_beams.append([temp_running_beam, probs + [ith_prob]])\n\n                t_c+=1\n\n            all_running_beams[text_i] = [b for b in temp_running_beams]\n        \n        to_del = []\n        for i, v in all_running_beams.items():\n            if not v:\n                to_del.append(i)\n        \n        for i in to_del:\n            del all_running_beams[i]\n\n    return all_completed_beams\n\ndef infer(texts, model, params, beam_size=3, max_beams=3, min_cut_off_len=10, cut_off_ratio=1.5):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    outputs (list of dicts): Each dict has the sequence and probability.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    all_decoder_outputs = generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio)\n    outputs = []\n\n    for i, decoder_outputs in all_decoder_outputs.items():\n        outputs.append([])\n        for decoder_output, probs in decoder_outputs:\n            outputs[-1].append({'sequence': decode_sequence(output_decoding_dict, decoder_output[0]), 'prob': np.prod(probs)})\n\n    return outputs\n\ndef generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    encoder_input = encode_sequences(input_encoding_dict, texts, max_input_length)\n    decoder_input = np.zeros(shape=(len(encoder_input), max_output_length))\n    decoder_input[:,0] = char_start_encoding\n    for i in range(1, max_output_length):\n        output = model.predict([encoder_input, decoder_input]).argmax(axis=2)\n        decoder_input[:,i] = output[:,i]\n        \n        if np.all(decoder_input[:,i] == char_padding_encoding):\n            return decoder_input[:,1:]\n\n    return decoder_input[:,1:]\n\ndef infer_greedy(texts, model, params):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    return_string = False\n    if not isinstance(texts, list):\n        return_string = True\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    decoder_output = generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length)\n    if return_string:\n        return decode_sequence(output_decoding_dict, decoder_output[0])\n\n    return [decode_sequence(output_decoding_dict, i) for i in decoder_output]\n\n\ndef build_params(input_data = [], output_data = [], params_path = 'test_params', max_lenghts = (5,5)):\n    \"\"\"\n    Build the params and save them as a pickle. (If not already present.)\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params_path (str): Path for saving the params.\n\n    max_lenghts (tuple): (max_input_length, max_output_length)\n\n    Returns:\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    if os.path.exists(params_path):\n        print('Loading the params file')\n        params = pickle.load(open(params_path, 'rb'))\n        return params\n    \n    print('Creating params file')\n    input_encoding, input_decoding, input_dict_size = build_sequence_encode_decode_dicts(input_data)\n    output_encoding, output_decoding, output_dict_size = build_sequence_encode_decode_dicts(output_data)\n    params = {}\n    params['input_encoding'] = input_encoding\n    params['input_decoding'] = input_decoding\n    params['input_dict_size'] = input_dict_size\n    params['output_encoding'] = output_encoding\n    params['output_decoding'] = output_decoding\n    params['output_dict_size'] = output_dict_size\n    params['max_input_length'] = max_lenghts[0]\n    params['max_output_length'] = max_lenghts[1]\n\n    pickle.dump(params, open(params_path, 'wb'))\n    return params\n\ndef convert_training_data(input_data, output_data, params):\n    \"\"\"\n    Encode training data.\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    Returns:\n    \n    x, y: encoded inputs, outputs.\n\n    \"\"\"\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    encoded_training_input = encode_sequences(input_encoding, input_data, max_input_length)\n    encoded_training_output = encode_sequences(output_encoding, output_data, max_output_length)\n    training_encoder_input = encoded_training_input\n    training_decoder_input = np.zeros_like(encoded_training_output)\n    training_decoder_input[:, 1:] = encoded_training_output[:,:-1]\n    training_decoder_input[:, 0] = char_start_encoding\n    training_decoder_output = np.eye(output_dict_size)[encoded_training_output.astype('int')]\n    x=[training_encoder_input, training_decoder_input]\n    y=[training_decoder_output]\n    return x, y\n\ndef build_model(params_path = 'test\/params', enc_lstm_units = 128, unroll = True, use_gru=False, optimizer='adam', display_summary=True):\n    \"\"\"\n    Build keras model\n\n    Parameters:\n\n    params_path (str): Path for saving\/loading the params.\n\n    enc_lstm_units (int): Positive integer, dimensionality of the output space.\n\n    unroll (bool): Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.\n\n    use_gru (bool): GRU will be used instead of LSTM\n\n    optimizer (str): optimizer to be used\n\n    display_summary (bool): Set to true for verbose information.\n\n\n    Returns:\n\n    model (keras model): built model object.\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    # generateing the encoding, decoding dicts\n    params = build_params(params_path = params_path)\n\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n\n    if display_summary:\n        print('Input encoding', input_encoding)\n        print('Input decoding', input_decoding)\n        print('Output encoding', output_encoding)\n        print('Output decoding', output_decoding)\n\n\n    # We need to define the max input lengths and max output lengths before training the model.\n    # We pad the inputs and outputs to these max lengths\n    encoder_input = Input(shape=(max_input_length,))\n    decoder_input = Input(shape=(max_output_length,))\n\n    # Need to make the number of hidden units configurable\n    encoder = Embedding(input_dict_size, enc_lstm_units, input_length=max_input_length, mask_zero=True)(encoder_input)\n    # using concat merge mode since in my experiments it gave the best results same with unroll\n    if not use_gru:\n        encoder = Bidirectional(LSTM(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)\n        encoder_outs, forward_h, forward_c, backward_h, backward_c = encoder\n        encoder_h = concatenate([forward_h, backward_h])\n        encoder_c = concatenate([forward_c, backward_c])\n    \n    else:\n        encoder = Bidirectional(GRU(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)        \n        encoder_outs, forward_h, backward_h= encoder\n        encoder_h = concatenate([forward_h, backward_h])\n    \n\n    # using 2* enc_lstm_units because we are using concat merge mode\n    # cannot use bidirectionals lstm for decoding (obviously!)\n    \n    decoder = Embedding(output_dict_size, 2 * enc_lstm_units, input_length=max_output_length, mask_zero=True)(decoder_input)\n\n    if not use_gru:\n        decoder = LSTM(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=[encoder_h, encoder_c])\n    else:\n        decoder = GRU(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=encoder_h)\n\n\n    # luong attention\n    attention = dot([decoder, encoder_outs], axes=[2, 2])\n    attention = Activation('softmax', name='attention')(attention)\n\n    context = dot([attention, encoder_outs], axes=[2,1])\n\n    decoder_combined_context = concatenate([context, decoder])\n\n    output = TimeDistributed(Dense(enc_lstm_units, activation=\"tanh\"))(decoder_combined_context)\n    output = TimeDistributed(Dense(output_dict_size, activation=\"softmax\"))(output)\n\n    model = Model(inputs=[encoder_input, decoder_input], outputs=[output])\n    model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n\n    if display_summary:\n        model.summary()\n    \n    return model, params\n\n\n\nif __name__ == '__main__':\n    input_data = ['123', '213', '312', '321', '132', '231']\n    output_data = ['123', '123', '123', '123', '123', '123']\n    build_params(input_data = input_data, output_data = output_data, params_path = 'params', max_lenghts=(10, 10))\n    \n    model, params = build_model(params_path='params')\n\n    input_data, output_data = convert_training_data(input_data, output_data, params)\n    \n    checkpoint = ModelCheckpoint('checkpoint', monitor='val_acc', verbose=1, save_best_only=True, mode='max')\n    callbacks_list = [checkpoint]\n\n    model.fit(input_data, output_data, validation_data=(input_data, output_data), batch_size=2, epochs=40, callbacks=callbacks_list)\n         model, params = build_model(params_path='params', enc_lstm_units=256)\n    model.load_weights('checkpoint')\n    start = time.time()\n    print(infer(\"i will be there for you\", model, params))\n    end = time.time()\n    print(end - start)\n\n    start = time.time()\n    print(infer([\"i will be there for you\",\"these is not that gre at\",\"i dotlike this\",\"i work at reckonsys\"], model, params))\n    end = time.time()\n    print(end - start)\n    start = time.time()\n    print(infer(\"i will be there for you\", model, params))\n    end = time.time()\n    print(end - start )\n","e972e052":"history = model.fit(get_training_dataset(), steps_per_epoch=STEPS_PER_EPOCH, epochs=EPOCHS, validation_data=get_validation_dataset())","8341d975":"display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","931ab658":"\n#!wget aibrian.com\/checkpoint\n#!wget aibrian.com\/params\n\nimport tensorflow as tf\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\nimport time\nimport os\nimport pickle\nimport logging\n\nimport numpy as np\nnp.random.seed(6788)\n\nimport tensorflow as tf\ntry:\n    tf.set_random_seed(6788)\nexcept:\n    pass\n\nfrom keras.layers import Input, Embedding, LSTM, TimeDistributed, Dense, SimpleRNN, Activation, dot, concatenate, Bidirectional, GRU\nfrom keras.models import Model, load_model\n\nfrom keras.callbacks import ModelCheckpoint\n\n\n# Placeholder for max lengths of input and output which are user configruable constants\nmax_input_length = None\nmax_output_length = None\n\nchar_start_encoding = 1\nchar_padding_encoding = 0\n\ndef build_sequence_encode_decode_dicts(input_data):\n    \"\"\"\n    Builds encoding and decoding dictionaries for given list of strings.\n\n    Parameters:\n\n    input_data (list): List of strings.\n\n    Returns:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    decoding_dict (dict): Reverse of above dictionary.\n\n    len(encoding_dict) + 2: +2 because of special start (1) and padding (0) chars we add to each sequence.\n\n    \"\"\"\n    encoding_dict = {}\n    decoding_dict = {}\n    for line in input_data:\n        for char in line:\n            if char not in encoding_dict:\n                # Using 2 + because our sequence start encoding is 1 and padding encoding is 0\n                encoding_dict[char] = 2 + len(encoding_dict)\n                decoding_dict[2 + len(decoding_dict)] = char\n    \n    return encoding_dict, decoding_dict, len(encoding_dict) + 2\n\ndef encode_sequences(encoding_dict, sequences, max_length):\n    \"\"\"\n    Encodes given input strings into numpy arrays based on the encoding dicts supplied.\n\n    Parameters:\n\n    encoding_dict (dict): Dictionary with chars as keys and corresponding integer encodings as values.\n\n    sequences (list): List of sequences (strings) to be encoded.\n\n    max_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    Returns:\n    \n    encoded_data (numpy array): Reverse of above dictionary.\n\n    \"\"\"\n    encoded_data = np.zeros(shape=(len(sequences), max_length))\n    for i in range(len(sequences)):\n        for j in range(min(len(sequences[i]), max_length)):\n            encoded_data[i][j] = encoding_dict[sequences[i][j]]\n    return encoded_data\n\n\ndef decode_sequence(decoding_dict, sequence):\n    \"\"\"\n    Decodes integers into string based on the decoding dict.\n\n    Parameters:\n\n    decoding_dict (dict): Dictionary with chars as values and corresponding integer encodings as keys.\n\n    Returns:\n\n    sequence (str): Decoded string.\n\n    \"\"\"\n    text = ''\n    for i in sequence:\n        if i == 0:\n            break\n        text += decoding_dict[i]\n    return text\n\n\ndef generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio):\n    \"\"\"\n    Main function for generating encoded output(s) for encoded input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    all_completed_beams (list): List of completed beams.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n    min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    all_completed_beams = {i:[] for i in range(len(texts))}\n    all_running_beams = {}\n    for i, text in enumerate(texts):\n        all_running_beams[i] = [[np.zeros(shape=(len(text), max_output_length)), [1]]]\n        all_running_beams[i][0][0][:,0] = char_start_encoding\n\n    \n    while len(all_running_beams) != 0:\n        for i in all_running_beams:\n            all_running_beams[i] = sorted(all_running_beams[i], key=lambda tup:np.prod(tup[1]), reverse=True)\n            all_running_beams[i] = all_running_beams[i][:max_beams]\n        \n        in_out_map = {}\n        batch_encoder_input = []\n        batch_decoder_input = []\n        t_c = 0\n        for text_i in all_running_beams:\n            if text_i not in in_out_map:\n                in_out_map[text_i] = []\n            for running_beam in all_running_beams[text_i]:\n                in_out_map[text_i].append(t_c)\n                t_c+=1\n                batch_encoder_input.append(texts[text_i])\n                batch_decoder_input.append(running_beam[0][0])\n\n        with strategy.scope():\n            batch_encoder_input = encode_sequences(input_encoding_dict, batch_encoder_input, max_input_length)\n            batch_decoder_input = np.asarray(batch_decoder_input)\n            batch_predictions = model.predict([batch_encoder_input, batch_decoder_input])\n\n        t_c = 0\n        for text_i, t_cs in in_out_map.items():\n            temp_running_beams = []\n            for running_beam, probs in all_running_beams[text_i]:\n                if len(probs) >= min_cut_off_len:\n                    all_completed_beams[text_i].append([running_beam[:,1:], probs])\n                else:\n                    prediction = batch_predictions[t_c]\n                    sorted_args = prediction.argsort()\n                    sorted_probs = np.sort(prediction)\n\n                    for i in range(1, beam_size+1):\n                        temp_running_beam = np.copy(running_beam)\n                        i = -1 * i\n                        ith_arg = sorted_args[:, i][len(probs)]\n                        ith_prob = sorted_probs[:, i][len(probs)]\n                        \n                        temp_running_beam[:, len(probs)] = ith_arg\n                        temp_running_beams.append([temp_running_beam, probs + [ith_prob]])\n\n                t_c+=1\n\n            all_running_beams[text_i] = [b for b in temp_running_beams]\n        \n        to_del = []\n        for i, v in all_running_beams.items():\n            if not v:\n                to_del.append(i)\n        \n        for i in to_del:\n            del all_running_beams[i]\n\n    return all_completed_beams\n\ndef infer(texts, model, params, beam_size=3, max_beams=3, min_cut_off_len=10, cut_off_ratio=1.5):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    beam_size (int): Beam size at each prediction.\n\n    max_beams (int): Maximum number of beams to be kept in memory.\n\n    min_cut_off_len (int): Used in deciding when to stop decoding.\n\n    cut_off_ratio (float): Used in deciding when to stop decoding.\n\n        # min_cut_off_len = max(min_cut_off_len, cut_off_ratio*len(max(texts, key=len)))\n        # min_cut_off_len = min(min_cut_off_len, max_output_length)\n\n    Returns:\n    \n    outputs (list of dicts): Each dict has the sequence and probability.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    all_decoder_outputs = generate(texts, input_encoding_dict, model, max_input_length, max_output_length, beam_size, max_beams, min_cut_off_len, cut_off_ratio)\n    outputs = []\n\n    for i, decoder_outputs in all_decoder_outputs.items():\n        outputs.append([])\n        for decoder_output, probs in decoder_outputs:\n            outputs[-1].append({'sequence': decode_sequence(output_decoding_dict, decoder_output[0]), 'prob': np.prod(probs)})\n\n    return outputs\n\ndef generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    input_encoding_dict (dict): Encoding dictionary generated from the input strings.\n\n    model (kerasl model): Loaded keras model.\n\n    max_input_length (int): Max length of input sequences. All sequences will be padded to this length to support batching.\n\n    max_output_length (int): Max output length. Need to know when to stop decoding if no padding character comes.\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    if not isinstance(texts, list):\n        texts = [texts]\n\n    encoder_input = encode_sequences(input_encoding_dict, texts, max_input_length)\n    decoder_input = np.zeros(shape=(len(encoder_input), max_output_length))\n    decoder_input[:,0] = char_start_encoding\n    for i in range(1, max_output_length):\n        output = model.predict([encoder_input, decoder_input]).argmax(axis=2)\n        decoder_input[:,i] = output[:,i]\n        \n        if np.all(decoder_input[:,i] == char_padding_encoding):\n            return decoder_input[:,1:]\n\n    return decoder_input[:,1:]\n\ndef infer_greedy(texts, model, params):\n    \"\"\"\n    Main function for generating output(s) for given input(s)\n\n    Parameters:\n\n    texts (list\/str): List of input strings or single input string.\n\n    model (kerasl model): Loaded keras model.\n\n    params (dict): Loaded params generated by build_params\n\n    Returns:\n    \n    outputs (list): Generated outputs.\n\n    \"\"\"\n    return_string = False\n    if not isinstance(texts, list):\n        return_string = True\n        texts = [texts]\n\n    input_encoding_dict = params['input_encoding']\n    output_decoding_dict = params['output_decoding']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    decoder_output = generate_greedy(texts, input_encoding_dict, model, max_input_length, max_output_length)\n    if return_string:\n        return decode_sequence(output_decoding_dict, decoder_output[0])\n\n    return [decode_sequence(output_decoding_dict, i) for i in decoder_output]\n\n\ndef build_params(input_data = [], output_data = [], params_path = 'test_params', max_lenghts = (5,5)):\n    \"\"\"\n    Build the params and save them as a pickle. (If not already present.)\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params_path (str): Path for saving the params.\n\n    max_lenghts (tuple): (max_input_length, max_output_length)\n\n    Returns:\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    if os.path.exists(params_path):\n        print('Loading the params file')\n        params = pickle.load(open(params_path, 'rb'))\n        return params\n    \n    print('Creating params file')\n    input_encoding, input_decoding, input_dict_size = build_sequence_encode_decode_dicts(input_data)\n    output_encoding, output_decoding, output_dict_size = build_sequence_encode_decode_dicts(output_data)\n    params = {}\n    params['input_encoding'] = input_encoding\n    params['input_decoding'] = input_decoding\n    params['input_dict_size'] = input_dict_size\n    params['output_encoding'] = output_encoding\n    params['output_decoding'] = output_decoding\n    params['output_dict_size'] = output_dict_size\n    params['max_input_length'] = max_lenghts[0]\n    params['max_output_length'] = max_lenghts[1]\n\n    pickle.dump(params, open(params_path, 'wb'))\n    return params\n\ndef convert_training_data(input_data, output_data, params):\n    \"\"\"\n    Encode training data.\n\n    Parameters:\n\n    input_data (list): List of input strings.\n\n    output_data (list): List of output strings.\n\n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    Returns:\n    \n    x, y: encoded inputs, outputs.\n\n    \"\"\"\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n    encoded_training_input = encode_sequences(input_encoding, input_data, max_input_length)\n    encoded_training_output = encode_sequences(output_encoding, output_data, max_output_length)\n    training_encoder_input = encoded_training_input\n    training_decoder_input = np.zeros_like(encoded_training_output)\n    training_decoder_input[:, 1:] = encoded_training_output[:,:-1]\n    training_decoder_input[:, 0] = char_start_encoding\n    training_decoder_output = np.eye(output_dict_size)[encoded_training_output.astype('int')]\n    x=[training_encoder_input, training_decoder_input]\n    y=[training_decoder_output]\n    return x, y\n\ndef build_model(params_path = 'test\/params', enc_lstm_units = 128, unroll = True, use_gru=False, optimizer='adam', display_summary=True):\n    \"\"\"\n    Build keras model\n\n    Parameters:\n\n    params_path (str): Path for saving\/loading the params.\n\n    enc_lstm_units (int): Positive integer, dimensionality of the output space.\n\n    unroll (bool): Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.\n\n    use_gru (bool): GRU will be used instead of LSTM\n\n    optimizer (str): optimizer to be used\n\n    display_summary (bool): Set to true for verbose information.\n\n\n    Returns:\n\n    model (keras model): built model object.\n    \n    params (dict): Generated params (encoding, decoding dicts ..).\n\n    \"\"\"\n    # generateing the encoding, decoding dicts\n    params = build_params(params_path = params_path)\n\n    input_encoding = params['input_encoding']\n    input_decoding = params['input_decoding']\n    input_dict_size = params['input_dict_size']\n    output_encoding = params['output_encoding']\n    output_decoding = params['output_decoding']\n    output_dict_size = params['output_dict_size']\n    max_input_length = params['max_input_length']\n    max_output_length = params['max_output_length']\n\n\n    if display_summary:\n        print('Input encoding', input_encoding)\n        print('Input decoding', input_decoding)\n        print('Output encoding', output_encoding)\n        print('Output decoding', output_decoding)\n\n\n    # We need to define the max input lengths and max output lengths before training the model.\n    # We pad the inputs and outputs to these max lengths\n    encoder_input = Input(shape=(max_input_length,))\n    decoder_input = Input(shape=(max_output_length,))\n\n    # Need to make the number of hidden units configurable\n    encoder = Embedding(input_dict_size, enc_lstm_units, input_length=max_input_length, mask_zero=True)(encoder_input)\n    # using concat merge mode since in my experiments it gave the best results same with unroll\n    if not use_gru:\n        encoder = Bidirectional(LSTM(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)\n        encoder_outs, forward_h, forward_c, backward_h, backward_c = encoder\n        encoder_h = concatenate([forward_h, backward_h])\n        encoder_c = concatenate([forward_c, backward_c])\n    \n    else:\n        encoder = Bidirectional(GRU(enc_lstm_units, return_sequences=True, return_state=True, unroll=unroll), merge_mode='concat')(encoder)        \n        encoder_outs, forward_h, backward_h= encoder\n        encoder_h = concatenate([forward_h, backward_h])\n    \n\n    # using 2* enc_lstm_units because we are using concat merge mode\n    # cannot use bidirectionals lstm for decoding (obviously!)\n    \n    decoder = Embedding(output_dict_size, 2 * enc_lstm_units, input_length=max_output_length, mask_zero=True)(decoder_input)\n\n    if not use_gru:\n        decoder = LSTM(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=[encoder_h, encoder_c])\n    else:\n        decoder = GRU(2 * enc_lstm_units, return_sequences=True, unroll=unroll)(decoder, initial_state=encoder_h)\n\n\n    # luong attention\n    attention = dot([decoder, encoder_outs], axes=[2, 2])\n    attention = Activation('softmax', name='attention')(attention)\n\n    context = dot([attention, encoder_outs], axes=[2,1])\n\n    decoder_combined_context = concatenate([context, decoder])\n\n    output = TimeDistributed(Dense(enc_lstm_units, activation=\"tanh\"))(decoder_combined_context)\n    output = TimeDistributed(Dense(output_dict_size, activation=\"softmax\"))(output)\n    with strategy.scope():\n        model = Model(inputs=[encoder_input, decoder_input], outputs=[output])\n        model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n\n    if display_summary:\n        model.summary()\n    \n    return model, params\n\n\n\nif __name__ == '__main__':\n    with strategy.scope():\n        model, params = build_model(params_path='params', enc_lstm_units=256)\n        model.load_weights('checkpoint')\n        start = time.time()\n        print(infer(\"i will be there for you\", model, params))\n        end = time.time()\n        print(end - start)\n\n        start = time.time()\n        print(infer([\"i will be there for you\",\"these is not that gre at\",\"i dotlike this\",\"i work at reckonsys\"], model, params))\n        end = time.time()\n        print(end - start)\n        start = time.time()\n        print(infer(\"i will be there for you\", model, params))\n        end = time.time()\n        print(end - start )\n","b1828cdf":"cmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)))\nscore = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\nprecision = precision_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\nrecall = recall_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n#cmat = (cmat.T \/ cmat.sum(axis=1)).T # normalized\ndisplay_confusion_matrix(cmat, score, precision, recall)\nprint('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score, precision, recall))","ddc68b45":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","d9a77fb9":"dataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","a597e704":"# run this cell again for next set of images\nimages, labels = next(batch)\nprobabilities = model.predict(images)\npredictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)","929915aa":"## Visualization utilities\ndata -> pixels, nothing of much interest for the machine learning practitioner in this section.","e68eeaf2":"# Confusion matrix","c6e620a5":"# Model\nNot the best but it converges ...","5b40ca1d":"# TPU or GPU detection","f735affd":"# Competition data access\nTPUs read data directly from Google Cloud Storage (GCS). This Kaggle utility will copy the dataset to a GCS bucket co-located with the TPU. If you have multiple datasets attached to the notebook, you can pass the name of a specific dataset to the get_gcs_path function. The name of the dataset is the name of the directory it is mounted in. Use `!ls \/kaggle\/input\/` to list attached datasets.","42c2c9c9":"# Configuration","e8974521":"# Predictions","c9acff3d":"# Dataset visualizations","39d6caff":"# Visual validation","d7d1de76":"# Training","f14585bc":"# Datasets"}}