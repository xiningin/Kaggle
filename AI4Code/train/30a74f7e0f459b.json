{"cell_type":{"44729ad7":"code","4303a146":"code","6f72c054":"code","9941c92a":"code","ed4cdd3f":"code","a3edb157":"code","90b203c3":"code","16eae5d9":"code","7d47b390":"code","f64b6f68":"code","b350ddfe":"code","227dc04f":"code","730ddd7b":"code","c46d49dc":"code","d3603357":"code","2e5122f5":"code","0156bb4f":"code","e4a9c852":"markdown","e6f2141e":"markdown","046a3a3a":"markdown","d3e2ea57":"markdown","8333b8ff":"markdown","caf3e71b":"markdown","c0e0b002":"markdown","0333fe78":"markdown","2abadeb0":"markdown","533695f8":"markdown","e1b6e1bd":"markdown","5217f082":"markdown","c1e967fd":"markdown","f2db700e":"markdown","6cbdc7b2":"markdown","bf5bae1f":"markdown","c7a1518b":"markdown","4dd2ee48":"markdown","e6ea371d":"markdown","9f14c4f4":"markdown","4b2376ac":"markdown","47b09729":"markdown","10e671fe":"markdown","5ca990a0":"markdown","bb0cc2c8":"markdown","a32b20cd":"markdown","61fd79d5":"markdown","5678914c":"markdown","4e593377":"markdown","25130286":"markdown","9f5d1234":"markdown","1887c76a":"markdown","2012eddf":"markdown","afb9a643":"markdown","4af0cfa1":"markdown","7d7bcda3":"markdown","9c2acccf":"markdown","d412e56c":"markdown","a95283e5":"markdown","83b02c31":"markdown"},"source":{"44729ad7":"#Importing stuff\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tools.sm_exceptions import ConvergenceWarning\nwarnings.simplefilter('ignore', ConvergenceWarning)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import pylab\nimport sklearn.metrics\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\nimport seaborn as sns\n%pylab inline\nsns.set(style=\"darkgrid\") #Comment out if pyplot style is wanted\n\nimport datetime as dt\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as L\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport os\nprint(f\"filename: {os.listdir('..\/input\/financial-markets')}\")","4303a146":"#Class to help with formatting printed text\nclass color:\n   BOLD = '\\033[1m'\n   END = '\\033[0m'","6f72c054":"data = pd.read_csv('..\/input\/financial-markets\/Index2018.csv',\n                   parse_dates=['date'],\n                   date_parser = (lambda date: dt.datetime.strptime(date,'%d\/%m\/%Y'))\n                   ,index_col='date')      \n\ndata.head()","9941c92a":"print(color.BOLD + 'Description of data:' + color.END)\nprint(data.describe())\n\nprint(color.BOLD + '\\nNumber of Null values:' + color.END)\ndata.isna().sum()","ed4cdd3f":"sns.set(font_scale=(1.5))\ndata.plot(subplots=True, figsize=(15,12),ylabel =('Close Value'),\n                         title = ['spx from 1994-2018','dax from 1994-2018',\n                                  'ftse from 1994-2018','nikkei from 1994-2018',])\nplt.savefig('stocks.png')\nplt.show()","a3edb157":"sns.set(font_scale=2.0)\ndata[['ftse','spx']].pct_change().multiply(100).plot(subplots=True,figsize=(20,8),fontsize=20,ylabel='Gain (%)')\n","90b203c3":"sns.set(font_scale=(1.4))\ndata['ftse_return'] = data.ftse.diff() \ndata['spx_return'] = data.spx.diff()\ndata['dax_return'] = data.dax.diff()\ndata['nikkei_return'] = data.nikkei.diff()\ndata[['ftse_return',\n'spx_return',\n'dax_return',\n'nikkei_return']].plot(subplots=True,figsize=(15,15),fontsize=20,ylabel='Absolute gain',legend=True)\n\nprint(color.BOLD + 'Absolute returns for all 4 stocks' + color.END)","16eae5d9":"format_ftse = data.ftse.divide(data.ftse.iloc[0]).multiply(100)\nformat_spx = data.spx.divide(data.spx.iloc[0]).multiply(100)\nformat_nikkei = data.nikkei.divide(data.nikkei.iloc[0]).multiply(100)\nformat_dax = data.dax.divide(data.dax.iloc[0]).multiply(100)\n\nsns.set(font_scale=(1.9))\nformat_ftse.plot(fontsize=20,ylabel='Relative value',legend=True)\nformat_spx.plot(fontsize=20,ylabel='Relative value',legend=True)\nformat_dax.plot(fontsize=20,ylabel='Relative value',legend=True)\nformat_nikkei.plot(figsize=(18,8),fontsize=20,ylabel='Relative value',legend=True)","7d47b390":"#First lets view just SPX\nsns.set(font_scale=(1.3))\ndata.spx.plot(figsize=(10,6),fontsize=15,ylabel='Close Value')","f64b6f68":"#We will use statsmodels' seasonal decomposer (multiplicitive)\n#So, ftse[t] = Trend[t] * Seasonal[t] * Noise[t]\n\nimport statsmodels.api as sm\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 11, 9\nspx_decomposed = sm.tsa.seasonal_decompose(data.spx,period=400,model='multiplicative') #yearly seasonality\n\nspx_decomposed.plot()\nplt.show()","b350ddfe":"dataset = data.spx #this is the stock data we want\ndataset = np.array(dataset.values) #turning into an array\n\nprint(color.BOLD + 'dataset peak:\\n' + color.END,dataset)\n\n#getting the length of training data, with a 80\/20 split (ish, not quite divisible perfectly)\ntraining_len = int(len(dataset)*0.80\/\/1 -15)\n\ntest_len = int(len(dataset) - training_len)\n\nprint(('\\ntraining length: {}\\ntest length: {}').format(training_len,test_len))","227dc04f":"#Applying scaling using Sklearn's MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1)) \nscaled_data = scaler.fit_transform(dataset.reshape(-1, 1))\n\n#Now splitting data into train and test\ntrain_data = scaled_data[:training_len,:]\ntest_data = scaled_data[training_len-50:,:]","730ddd7b":"x_train = []\ny_train = []\nx_test = []\nwindow_size = 50\n\nfor i in range(window_size, len(train_data)):\n    x_train.append(train_data[i-window_size:i, 0])\n    y_train.append(train_data[i, 0])\n    \n\nfor i in range(window_size, len(test_data)):\n    x_test.append(test_data[i-window_size:i, 0])\n            \n#Converting into numpy arrays to feed in model  \nx_train = np.array(x_train)\ny_train = np.array(y_train)\nx_test = np.array(x_test)\n\n#data must be in a 3d array - as we have  amount of data points, window_size, and batch size\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1)) \nx_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1] , 1))\nprint('x_train shape: ', np.shape(x_train))\nprint('x_test_shape', np.shape(x_test))","c46d49dc":"#Build the LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, Conv1D , Dropout #Conv1d and Dropout didn't improve this model, so have been left out\n\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True,input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(50, return_sequences= False))\nmodel.add(Dense(25,activation='relu'))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='Adam', loss='mean_squared_error')\n\n#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","d3603357":"predictions = model.predict(x_test) #obtaining the models predictions\npredictions = scaler.inverse_transform(predictions) #Obtaining actual predictions from the normalised predictions\npredictions = predictions[:,0]\nprint(predictions)","2e5122f5":"train = data.spx[:training_len]\nvalidation = pd.DataFrame(data.spx[training_len:])\nvalidation['Predictions'] = predictions\n\nsns.set(font_scale=1.5)\n\nfig,(ax1,ax2) = plt.subplots(1,2,figsize=(16,8))\nax2.plot(train)\nax2.plot(validation[['spx','Predictions']])\nax2.legend(['Train', 'Validation', 'Predictions'], loc='lower right')\nax2.set_xlabel('Date', fontsize=16)\nax2.set_ylabel('Close Price USD ($)', fontsize=16)\n\n\nax1.plot(validation['spx'],color='darkorange')\nax1.plot(validation['Predictions'],color='green')\nax1.legend(['Validation','Predictions'],loc='lower right')\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Close Price USD ($)', fontsize=16)\n","0156bb4f":"#'shifting' the data by 1, to get the naive forecasting, and duplicating the previous value to preserve lengths\n\nnaive = np.append(validation.spx.values[1:],validation.spx.values[-1])\n\n#plotting\nplt.plot(naive-validation.spx.values,label = 'naive')\nplt.plot(validation.spx.values-predictions,color='green',label = 'lstm predictions')\nplt.legend(fontsize=14)\nplt.ylabel('error')\nplt.xlabel('data point',fontsize=13)\n\nprint('MAE of predictions:',sklearn.metrics.mean_absolute_error(validation.spx.values,predictions))\nprint('MSE of predictions:',sklearn.metrics.mean_squared_error(validation.spx.values,predictions)**0.5)\nprint('\\nMSE of naive-forecast:',np.mean(np.square((validation.spx.values-naive)))**0.5)","e4a9c852":"A time series such at these, can be decomposed into 3 main building blocks: <br>\n- Trend - General direction of data\n- Seasonality - trends which repeat after a given interval\n- Noise - 'random' fluctuations in values\n\nWe will break down the SPX into these 3 components","e6f2141e":"### <a id ='1.1'> 1.1 Importing data <\/a>","046a3a3a":"# <a id='2.'> 2. Statistics <\/a>","d3e2ea57":"## <a i='3.1'> 3.1 Main components <\/a>","8333b8ff":"## <a id =2.2> 2.2 Returns <\/a>","caf3e71b":"#### Note the different scales!","c0e0b002":"## <a id='2.1'> 2.1 Percentage Change <\/a>","0333fe78":"Here we can see that spx and dax have significantly outperformed the ftse & nikkei, in terms of value gain.","2abadeb0":"- [0. Preamble](#0.)\n    - [0.1 Description](#0.1)\n    - [0.2 Imports](#0.2)\n- [1. Importing and visualising](#1.)\n    - [1.1 Importing data](#1.1)\n    - [1.2 Clenaing data](#1.2)\n    - [1.3 Visualising data](#1.3)\n- [2. Statistics](#2.)\n    - [2.1 Percentage Change](#2.1)\n    - [2.2 Returns](#2.2)\n    - [2.3 Comparing Time Series](#2.3)\n- [3. Decomposing Data](#3.)\n    - [3.1 Main Components](#3.1)\n- [4. Forecasting with an LSTM](#4.)\n    - [4.1 Preparing Data](#4.1)\n    - [4.2 Modelling](#4.2)\n    - [4.3 Results](#4.3)","533695f8":"## <a id = '2.3'> 2.3 Comparing Time Series <\/a>","e1b6e1bd":"## <a id='4.2'> 4.2 Modelling <\/a>","5217f082":"Before we can pass the data into an Neural Network, we need to make sure the data is windowed, so the model can use historic data from periods longer than 1","c1e967fd":"# <a id=3.> 3. Decomposing data<\/a>","f2db700e":"We should scale the train&test data before hand, to avoid problems such as exploding or vanishing gradient","6cbdc7b2":"Here we can see we don't actually have any na values. We've already formatted 'Date' and made it the index. This means we have no data cleaning to do!","bf5bae1f":"## Aim","c7a1518b":"Here I will train a LSTM based model using tensorflow and keras to try and predict the future values   \nI'll split the data into train and validation, in order to quantify the accuracy of the model","4dd2ee48":"## <a id='4.3'> 4.3 Results <\/a>","e6ea371d":"### <a id='1.3'> 1.3 Visualising Data <\/a>","9f14c4f4":"# <a id='0.'> 0. Preamble <\/a>","4b2376ac":"# Contents table","47b09729":"#### Windowing data","10e671fe":"### <a id='0.1'> 0.1 Description <\/a>","5ca990a0":"# Time Series Analysis - by Charlie Gaynor","bb0cc2c8":"Generally an upward trend in the plot, though there is clearly exceptions (dot.com crash of 2000 and the american financial crisis of sept 2008)\n\nWe also see the seasonality is not particularly strong - making predicitons by hand harder\n\n","a32b20cd":"In order to effectively compare the time series we need to format the data, so the stocks start at the same value <br>\nTo do this we will divide each series by its respective starting value, and multiply by 100 for more similarity with original","61fd79d5":"The model seems to work very well for the validation period! Let us compare it to a naive forecast, which simply projects the previous days value to the next day\n\nWe also have an issue in that we don't particularly want to use data from 20 years ago to help train our model as it's not very relevant, but if we only use data from, say, the last 10 years, our model will be terrible at predicting any downturns. This is of course one of the big difficulties with stock data","5678914c":"## <a id='4.1'> 4.1 Preparing Data <\/a>","4e593377":"### <a id ='0.2'> 0.2 Imports <\/a>","25130286":"# <a id='1.'> 1. Importing and visualising <\/a>","9f5d1234":"##### We will be focusing on the ftse and spx stocks","1887c76a":"## <a id='4.'> 4. Forecasting with a LSTM <\/a>","2012eddf":"## Data Description","afb9a643":"### <a id = '1.2'> 1.2 Cleaning Data <\/a>","4af0cfa1":"In this notebook I aim to analyse the historical stock data for FTSE, S&P, DAX, and NIKKEI stock - from 1994-2018. The notebook includes visualisations, comparisons, and forecasting, both naively and using a LSTM (an RNN based) neural network. <br> <br>For the forecasting I will be focusing on the SPX stock","7d7bcda3":"Although these results look promising on first inspection (as only 1 epoch trained on), after comparing with a naive forecast we can see that the two models do very similar things. This is explained as in real stock prices have so many variables which can't really be accounted for in a model such as this. Hence, the optimal solution for the LSTM is not too disimilar from simply a random walk , which trails by 1 day.\n\nIf this wasn't so, there would be a massive amount of millionaires trading just using LSTM's!","9c2acccf":"##### All values are the price of the stock at close time, in dollars $\n\n- 'spx' is the S&P 500 gauge of U.S Equities\n- 'dax' is a total return index of 30 selected German blue chip stocks\n- 'ftse' is a share index of the top 100 companies listed on the London Stock Exchange\n- 'nikkei' is a price-weighted average of 225 top-rated Japanese companies listed on Tokyo Stock Exchange\n\n","d412e56c":"First I will make a numpy array from the relevant data","a95283e5":"Thanks for reading this project on Time Series Analysis\n\nBy Charlie Gaynor, CharlieJackGaynor@Gmail.com , www.linkedin.com\/in\/CharlieGaynor","83b02c31":"Of course, a higher absolute gain does not necessarily indicate a 'better' stock. Let us now compare the growth of the stocks"}}