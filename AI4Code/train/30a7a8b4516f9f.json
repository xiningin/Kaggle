{"cell_type":{"1f5c6636":"code","3c202020":"code","ece0e35c":"code","28d0788f":"code","32e5ec5e":"code","34c7a110":"code","69208f46":"code","e495d506":"code","793e901c":"code","ed3ca536":"code","aa3326cb":"markdown","68c93c85":"markdown","9f1ae59f":"markdown","cc13ad5d":"markdown","b7f40b1e":"markdown","1d8f1b23":"markdown","bd549c99":"markdown","e407f4da":"markdown","d0937456":"markdown","124aee95":"markdown","90cc74e1":"markdown","35f96018":"markdown","83596f5e":"markdown"},"source":{"1f5c6636":"import numpy as np\nimport pandas as pd\n","3c202020":"data = pd.read_csv('..\/input\/coursera-ml\/ex1data2.txt',sep = ',', header = None) #loading data from the file\n\nX = data.iloc[:,0:2] #read first two columns into X\ny = data.iloc[:,2]   #read the third column into y\n\nm = len(y) #total number of training samples\n\ndata.head()","ece0e35c":"X = (X-np.mean(X))\/np.std(X)","28d0788f":"ones = np.ones((m,1))\n\nX = np.hstack((ones,X)) #adding the intercept term\n\nalpha = 0.01\niterations = 400\n\ntheta = np.zeros((3,1))\n\ny = y[:,np.newaxis]","32e5ec5e":"def ComputeCost(X,y,theta):\n    temp = np.dot(X,theta) - y\n    return np.sum(np.power(temp,2)) \/ (2*m)\n\nJ = ComputeCost(X,y,theta)\nprint(J)","34c7a110":"def GradientDescentMulti(X,y,theta,alpha,iterations):\n    m = len(y)\n    for _ in range(iterations):\n        temp = np.dot(X,theta) - y\n        temp = np.dot(X.T,temp)\n        theta = theta - ((alpha\/m) * temp)\n    \n    return theta\n\ntheta = GradientDescentMulti(X,y,theta,alpha,iterations)\n\nprint(theta)","69208f46":"J = ComputeCost(X,y,theta)\nprint(J)","e495d506":"def predict(predict_data):\n    prediction = np.dot(predict_data,theta)\n    return prediction","793e901c":"predict_data = pd.read_csv('..\/input\/predict-house-price\/predict_price.txt',sep = ',', header = None)\n\npredict_data = predict_data.iloc[:,0:2]\n\npredict_data = (predict_data-np.mean(predict_data))\/np.std(predict_data) #feature normalization\n\nm_predict = len(predict_data)\n\nones = np.ones((m_predict,1))\n\npredict_data = np.hstack((ones,predict_data)) #adding the intercept term","ed3ca536":"price = predict(predict_data)\n\nprint(price)","aa3326cb":"This should give you a value of 2105448288.6292474 which is much better than 65591548106.45744","68c93c85":"The file ex1data2.txt contains a training set of housing prices in Portland, Oregon. The first column is the size of the house (in square feet), the second column is the number of bedrooms, and the third column is the price of the house.","9f1ae59f":"### Adding the intercept term and initializing parameters","cc13ad5d":"### Computing the Cost","b7f40b1e":"Suppose you are selling your house and you want to know what a good market price would be. One way to do this is to first collect information on recent houses sold and make a model of housing prices. Your job is to predict housing prices based on other variables.\n","1d8f1b23":"Our task here is to:\n\n    Subtract the mean value of each feature from the dataset.\n    \n    After subtracting the mean, additionally scale (divide) the feature values by their respective \u201cstandard deviations.\u201d","bd549c99":"### Feature Normalization","e407f4da":"your optimal parameters will be [[334302.06399328],[ 99411.44947359], [3267.01285407]]","d0937456":"# Linear Regression with Multiple variables","124aee95":"### Predict Price","90cc74e1":"### Finding the optimal parameters using Gradient Descent","35f96018":"By looking at the values, note that house sizes are about 1000 times the number of bedrooms. When features differ by orders of magnitude, first performing feature scaling can make gradient descent converge much more quickly.","83596f5e":"You should expect to see a cost of 65591548106.45744."}}