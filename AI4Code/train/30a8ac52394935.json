{"cell_type":{"2df38e4d":"code","a708358d":"code","f134045c":"code","7dff9b7e":"code","bac9e172":"code","03ab5ee0":"code","443e8553":"code","68d84b7f":"code","5c6fa412":"code","b9fb3f27":"code","6152c0ed":"code","f391005e":"code","0dcab473":"code","43be66c8":"code","288a54c0":"code","e8e1f339":"code","ac645372":"code","84b4b1b8":"code","b9d0103d":"code","bd290dfb":"code","e4305865":"code","e0d177cf":"code","c04829e4":"code","9004ffd9":"code","1c16640b":"code","eb30e926":"code","dc511996":"code","930bccd5":"code","058c0aef":"code","e3fef5a4":"code","c171eb0a":"code","7c52f142":"code","234cfe9b":"code","14fdd54e":"code","39f0c2aa":"code","4e239648":"code","4f513636":"code","3b1e90db":"code","485a0805":"markdown","b9da2111":"markdown"},"source":{"2df38e4d":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Activation,Conv2D, Flatten, Dropout, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras import regularizers, optimizers\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","a708358d":"traindf = pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/train.csv\", dtype=str)\ntestdf = pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv\", dtype = str)","f134045c":"traindf.head()","7dff9b7e":"testdf.head()","bac9e172":"from sklearn.model_selection import train_test_split\ntrain,  test = train_test_split(traindf, test_size = 0.15, random_state = 42)\n\nprint(f\"train set shape: {train.shape}\")\n\nprint(f\"validation set shape: {test.shape}\")","03ab5ee0":"train_datagen = ImageDataGenerator(rescale = 1.\/255.,rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, \n                                   shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True, vertical_flip =True)\ntest_datagen = ImageDataGenerator(rescale = 1.0\/255.)","443e8553":"train_gen = train_datagen.flow_from_dataframe(dataframe = train,\n                                              directory = \"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/trainImages\",\n                                              x_col = 'Image_path', y_col ='Condition',\n                                              target_size = (200,200), batch_size = 256, \n                                              class_mode = 'binary', shuffle = True)\nval_gen = train_datagen.flow_from_dataframe(dataframe = test,\n                                            directory = \"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/trainImages\",\n                                            target_size=(200,200), x_col = 'Image_path', y_col ='Condition', \n                                            class_mode='binary',\n                                            batch_size= 256, shuffle=True)\n\ntest_dir = \"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/testImages\" \ntest_gen = test_datagen.flow_from_dataframe(directory = test_dir, dataframe = testdf, target_size = (200,200),\n                                            x_col = 'Image_path', y_col = None, shuffle = False,\n                                             batch_size = 256, class_mode = None)","68d84b7f":"import tensorflow as tf\n\nbase_model = tf.keras.applications.ResNet50V2(weights='imagenet', input_shape = (200,200,3),\n                                                     include_top=False)\n\nfor layer in base_model.layers:\n    layer.trainable = False\n    \nbase_model.summary()   ","5c6fa412":"model = Sequential()\nmodel.add(base_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(10))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = 'sigmoid'))\nmodel.summary()\n\n\ncallbacks = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)\n\nmodel.compile(optimizer='adam',\n              loss = 'binary_crossentropy',\n              metrics=['accuracy'])","b9fb3f27":"history = model.fit(\n    train_gen,\n    validation_data = val_gen,\n    epochs = 10)","6152c0ed":"from sklearn.metrics import  accuracy_score\n#using model.predict as per keras rule to use >0.5 for binary classification\npredictions = (model.predict(val_gen)>0.5).astype(\"int32\")\n\ny_test2 = val_gen.labels\nprint('Accuracy score:\\n', accuracy_score(y_test2, predictions))","f391005e":"model.evaluate(train_gen)","0dcab473":"model.evaluate(val_gen)","43be66c8":"preds = (model.predict(test_gen)>0.5).astype(\"int32\")\n\npreds","288a54c0":"testdf['Condition'] = pd.DataFrame(preds)","e8e1f339":"testdf.head()","ac645372":"testdf.Condition.value_counts()","84b4b1b8":"traindf.Condition.value_counts()","b9d0103d":"## we have classified images where 0 : Not Damaged and 1: Damaged\n## we don't need images now to predict the amount\n## So we drop the images\n## we train them on the train set and predict on the test set\n\ntraindf.head()","bd290dfb":"#handling datetime\n\n#train_data\ntraindf.Expiry_date = traindf.Expiry_date.apply(pd.to_datetime)\ntraindf['month'] = traindf.Expiry_date.apply(lambda x: x.month)\ntraindf['day'] = traindf.Expiry_date.apply(lambda x: x.day)\ntraindf['year'] = traindf.Expiry_date.apply(lambda x: x.year)\ntraindf.drop(['Expiry_date'], 1, inplace = True)\n\n#test_data\ntestdf.Expiry_date = testdf.Expiry_date.apply(pd.to_datetime)\ntestdf['month'] = testdf.Expiry_date.apply(lambda x: x.month)\ntestdf['day'] = testdf.Expiry_date.apply(lambda x: x.day)\ntestdf['year'] = testdf.Expiry_date.apply(lambda x: x.year)\ntestdf.drop(['Expiry_date'], 1, inplace = True)\n","e4305865":"traindf.Insurance_company.value_counts()","e0d177cf":"testdf.Insurance_company.value_counts()","c04829e4":"from sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()   \n\n#train\ntraindf['Insurance_company'] = le.fit_transform(traindf['Insurance_company'])\n#test\ntestdf['Insurance_company'] = le.fit_transform(testdf['Insurance_company'])","9004ffd9":"traindf = traindf.drop(['Image_path'], axis = 1)\ntestdf= testdf.drop(['Image_path'], axis = 1)","1c16640b":"traindf.head()","eb30e926":"testdf.head()","dc511996":"traindf = traindf.astype(float)\ntestdf = testdf.astype(float)","930bccd5":"traindf.info()","058c0aef":"traindf2 = traindf.dropna()\ntestdf2 = testdf.dropna()","e3fef5a4":"traindf2.corr().abs()['Amount'].sort_values(ascending = False)","c171eb0a":"testdf2.info()","7c52f142":"testdf2 = testdf2.drop([ 'day', 'month', 'year'], axis = 1)","234cfe9b":"X = traindf2.drop(['Amount', 'day', 'month', 'year'], axis = 1)\ny =traindf2['Amount']","14fdd54e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel2 = RandomForestRegressor(n_estimators = 1000, max_depth=10)\nmodel2.fit(X_train, y_train)\npred_new = model2.predict(X_test)\n","39f0c2aa":"test_pred = model2.predict(testdf2)","4e239648":"print(test_pred)","4f513636":"test_df = pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv\")","3b1e90db":"submission = pd.DataFrame({'Image_path': test_df.Image_path, 'Condition': testdf.Condition, \n                          'Amount': test_pred})\n# you could use any filename. We choose submission here\nsubmission.to_csv('submission.csv', index=False)","485a0805":"### we have classified images where 0 : Not Damaged and 1: Damaged\n### we don't need images now to predict the amount\n### So we can drop the images\n### we train them on the train set and predict on the test set","b9da2111":"# Upvote if you like it or fork it :)"}}