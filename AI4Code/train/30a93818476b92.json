{"cell_type":{"8748df0b":"code","419a7747":"code","bff1ac86":"code","69867ce2":"code","66fe16a0":"code","fe7ed746":"code","e0f8ef2f":"code","8a0fee10":"code","30bad6df":"code","688d11c8":"code","9cdd9485":"code","7e475189":"code","af08dd7e":"code","bf462719":"code","a50f5010":"code","dc0e9b70":"code","88ef8d82":"code","adfbc8e1":"code","b9c23615":"code","fbae8cd4":"code","1e685e3a":"code","58d9fa67":"code","403b99bd":"code","67f1661b":"code","1f60a580":"code","f850851a":"markdown","9229a14f":"markdown","e33f888e":"markdown","cc8c7c1d":"markdown","cfb8bfc7":"markdown","b5a6e14e":"markdown","ca0f6fe6":"markdown","64abb22d":"markdown","afc4f83d":"markdown","adecf70f":"markdown","98c2b0a7":"markdown","bff8863e":"markdown","2425e8f7":"markdown"},"source":{"8748df0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import classification_report, recall_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nsns.set(style=\"darkgrid\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","419a7747":"# Load Data\nmushroom_data = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","bff1ac86":"mushroom_data.info()","69867ce2":"# First Look at the data\nmushroom_data.head(10)","66fe16a0":"# Check for mising values\nmushroom_data.isna().sum()\n# No missing data","fe7ed746":"# Distribution of classes\nplt.figure(figsize=(7, 6))\nsns.countplot(x=\"class\", data=mushroom_data)","e0f8ef2f":"# Attribute Count for each feature in dataset\nplt.figure(figsize=(25, 15)).tight_layout(pad=3.0)\ncols = list(mushroom_data.columns)[1:]\nfor i in range(len(mushroom_data.columns)-1):\n  plt.subplot(4, 6, i+1)\n  sns.countplot(x=cols[i], data=mushroom_data)\n","8a0fee10":"#Attribute count w.r.t Class for each feature in the dataset\nplt.figure(figsize=(25, 15)).tight_layout(pad=3.0)\ncols = list(mushroom_data.columns)[1:]\nfor i in range(len(mushroom_data.columns)-1):\n  plt.subplot(4, 6, i+1)\n  sns.countplot(x=cols[i], hue=\"class\", data=mushroom_data)","30bad6df":"mushroom_processed = mushroom_data.copy(deep=True)","688d11c8":"lb = LabelEncoder()\ntarget = lb.fit_transform(mushroom_processed[\"class\"].tolist())\nprint(lb.classes_)\n# Poisonous - 1, Edible - 0\nmushroom_processed.drop(\"class\", axis=1, inplace=True)","9cdd9485":"for col in list(mushroom_processed.columns):\n  mushroom_processed[col] = lb.fit_transform(mushroom_processed[col].tolist())\n  print(\"Label Num for \"+col+\": \", lb.classes_)\nmushroom_processed.head()","7e475189":"# Get Dummy Variables\nmushroom_all_dummy = pd.get_dummies(mushroom_processed, columns=list(mushroom_processed.columns))\nmushroom_all_dummy.head()","af08dd7e":"# Train - Test Split\ntrainx, testx, trainy, testy = train_test_split(mushroom_all_dummy.to_numpy(), target, test_size=0.25, random_state=4199)","bf462719":"lr = LogisticRegression()\nlr.fit(trainx, trainy)","a50f5010":"print(\"Accuracy for Logistic Regression Classifier: {}\".format(lr.score(testx, testy)))","dc0e9b70":"# Classification Report \npreds = lr.predict(testx)\nprint(classification_report(testy, preds))","88ef8d82":"lr_coeffs = lr.coef_\nall_cols = list(mushroom_all_dummy.columns)\nsort_args = np.argsort(lr_coeffs)","adfbc8e1":"# Visualizing LR Coeffs\n\nplt.figure(figsize=(20, 10))\nplt.bar(x=list(range(lr.coef_.shape[1])), height=lr.coef_[0, sort_args[0]])\nplt.xticks(ticks = list(range(lr.coef_.shape[1])), labels=[all_cols[i] for i in sort_args[0]], rotation=90)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Coefficient\")\nplt.title(\"LR Coefficients\")","b9c23615":"rf = RandomForestClassifier(n_estimators=10)\nrf.fit(trainx, trainy)","fbae8cd4":"print(\"Accuracy for Random Forest Classifier: {}\".format(rf.score(testx, testy)))","1e685e3a":"rf_fi = rf.feature_importances_\nrf_sort = np.argsort(rf_fi)","58d9fa67":"# Visualizing Feature Importances for Random Forest Classifier\n\nplt.figure(figsize=(10, 20))\nplt.barh(y=list(range(rf.feature_importances_.shape[0])), width=rf.feature_importances_[rf_sort])\nplt.yticks(ticks = list(range(rf.feature_importances_.shape[0])), labels=[all_cols[i] for i in rf_sort], rotation=0)\nplt.ylabel(\"Features\")\nplt.xlabel(\"Importance\")\nplt.title(\"Feature Importances for Random Forest Classifier\")","403b99bd":"dt = DecisionTreeClassifier()\ndt.fit(trainx, trainy)","67f1661b":"print(\"Accuracy for Decision Tree Classifier: {}\".format(dt.score(testx, testy)))","1f60a580":"# Visualizing Feature Importances for Decision Tree Classifier\n\nplt.figure(figsize=(20, 10))\nplt.bar(x=list(range(dt.feature_importances_.shape[0])), height=dt.feature_importances_[:])\nplt.xticks(ticks = list(range(dt.feature_importances_.shape[0])), labels=list(mushroom_all_dummy.columns), rotation=90)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Importance\")\nplt.title(\"Feature Importances for Decision Tree Classifier\")","f850851a":"Modelling\n","9229a14f":"3. Decision Tree Classifier","e33f888e":"Suggestions and Improvements are welcome!!!","cc8c7c1d":"1. Logistic Regression Classifier","cfb8bfc7":"2. Random Forest Classifier","b5a6e14e":"Preprocessing for Modelling\n\nSince all features are categorical, we can use Label Encoding + dummy features for input to our model","ca0f6fe6":"Questions to be answered through this notebook are:\n\n1. Can we build a reliable classification model to separate poisonous and edible mushrooms based on the provided features\n\n2. Identifying clusters of different species of mushrooms based on the given features through unsupervised learning.","64abb22d":"Supervised Learning","afc4f83d":"Interpreting our results\n\nBased on the coefficients for the Logistic classifier and feature importances for tree ensembles and taking the accuracy of the models under consideration, we can say that Odor of a mushroom is the most important characteristic for determining if the mushroom is edible or not. Other factors to that should be taken under consideration are Spore Print Color, Gill Size and Stalk Root.\n\nA mushroom with bruises, foul, creosote or musty odor should always be avoided.","adecf70f":"Looking through the plots, there doesn't seem to be any one specific feature that we can use to say with good certainity wether a given mushroom is poisonous or not.\n\nEven though, features such as population, spore-print-color, gill size do seem to represent some significant difference for poisonous and edible mushrooms.\n\nBut this is only bivariate analysis, there might be some combination of features that might be much more important to make a clear distinction.\n\nLet's find out!!!","98c2b0a7":"What next?\n1. Unsupervised Analysis\n\nTo be continued ...","bff8863e":"On first look at the data, we can see\n\n1. All features including dependent variable are categorical.\n2. So, count plots should be good for visualization.\n3. There are no missing observations.\n\nLet's plot!","2425e8f7":"From the above plot we can see that features odor_5 (none), odor_0 (almond), odor_3 (anise) are strong indicators of an edible mushroom.\n\nSimilarly, features spore_print_color_5 (green), odor_1 (creosote), odor_2 (foul) are strong indicators for a posionous mushroom according to our Logistic classifier."}}