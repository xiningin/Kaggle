{"cell_type":{"7444e6e7":"code","971d56d1":"code","eae21078":"code","8c5ad7a4":"code","bdf3db37":"code","0a1b700d":"code","37bab6be":"code","8f579459":"code","45fe7590":"code","ace5aba8":"code","d8aff870":"code","3df5a3b8":"code","d435a90c":"code","fafef076":"code","5a1fe9b5":"code","f8cc0e27":"code","6ef14e7e":"code","9386dd40":"code","54f1b066":"code","6f809697":"code","39993961":"code","930bfdfb":"code","add68333":"code","9f065fc0":"code","55b0d815":"code","5f627e99":"code","ffe107f1":"code","5ae811e3":"code","c095bb51":"code","30e4d049":"code","ce463976":"code","e58a7645":"code","393e874d":"code","f3c8dce1":"code","204c49c2":"code","580e91fe":"code","21502bf5":"code","9e84fdf5":"code","12f0edfe":"code","4cd6c0e7":"code","8e88a725":"code","02f78f87":"code","d524bcfb":"code","e6801021":"code","d5ed8a38":"code","bc44286c":"code","fa3468b8":"code","bf68b1c2":"code","dac064c4":"code","289681eb":"code","4bcae94c":"code","5e72b3d5":"code","02bc6a4a":"code","ea3a55e6":"code","0a750eb9":"code","bfe4a0ee":"code","179ef5ae":"code","203f5345":"code","ad950878":"code","a5f113e4":"code","151d567c":"code","4ffcb465":"code","2f022102":"code","7df77ca3":"code","2be8ba71":"code","34e2bc36":"code","89be2abb":"code","2b8522d2":"code","cc4e89df":"code","7610ec45":"code","b3a71f77":"code","ad51b4e5":"code","7a74fb84":"code","b92f84ee":"code","3541a270":"code","f8fbe8ff":"code","d629149b":"code","1357d85a":"code","bffb673b":"code","082ebfd9":"code","1020ba47":"code","240bca55":"code","27658540":"code","828f8dc7":"code","8c79f472":"code","76a0d7f4":"code","74974320":"code","6450474b":"code","56bcffc2":"code","7f0a41af":"markdown","90638b37":"markdown","e377caee":"markdown","22f4f0d7":"markdown","0355bec4":"markdown","d64e9596":"markdown"},"source":{"7444e6e7":"import numpy as np\n","971d56d1":"a=np.array([1,2,3])\nprint (a)\n#or","eae21078":"np.array([1,2,3])","8c5ad7a4":"np.array([[1,2,3,4],[5,6,7,8]])\n#or","bdf3db37":"a = np.array([[1, 2], [3, 4]]) \nprint (a)","0a1b700d":"a = np.array([1, 2, 3,4,5], ndmin = 1) \nprint (a)\n## minimum dimensions ","37bab6be":"# dtype parameter \na = np.array([1, 2, 3], dtype = complex) \nprint (a)","8f579459":"np.zeros(4)","45fe7590":"np.random.rand(2,3)","ace5aba8":"np.eye(3)\n#matrix","d8aff870":"\n#check number of dimensions\nimport numpy as np\na = np.array(42)\nprint(a.ndim)","3df5a3b8":"c = np.array([[1, 2, 3], [4, 5, 6]])\nprint(c.ndim)","d435a90c":"#slicing\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n\nprint(arr[4:])","fafef076":"#negative slicing\n\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n\nprint(arr[-3:-1])","5a1fe9b5":"arr = np.array([1, 2, 3, 4, 5, 6, 7])\n\nprint(arr[::2])","f8cc0e27":"#2D\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n\nprint(arr[1, 1:4])","6ef14e7e":"arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n\nprint(arr[0:2, 1:4])","9386dd40":"arr = np.array(['apple', 'banana', 'cherry'])\n\nprint(arr.dtype)\n#data type","54f1b066":"arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\nprint(arr.shape)\n#shape","6f809697":"arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\nnewarr = arr.reshape(4, 3)\n\nprint(newarr)\n#reshaping","39993961":"arr = np.array([1, 2, 3])\n\nfor x in arr:\n  print(x)\n #iterating  array","930bfdfb":"arr = np.array([[1, 2, 3], [4, 5, 6]])\n\nfor x in arr:\n  for y in x:\n    print(y)\n    #iterating 2D array\n","add68333":"arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nfor x in np.nditer(arr):\n  print(x)\n#iterating","9f065fc0":"\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.concatenate((arr1, arr2))\n\nprint(arr)\n#join","55b0d815":"arr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.stack((arr1, arr2), axis=1)\n\nprint(arr)\n#join using stacks","5f627e99":"\narr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.hstack((arr1, arr2))\n\nprint(arr)\n#join using rows","ffe107f1":"arr1 = np.array([1, 2, 3])\n\narr2 = np.array([4, 5, 6])\n\narr = np.vstack((arr1, arr2))\n\nprint(arr)\n#join using columns","5ae811e3":"arr = np.array([1, 2, 3, 4, 5, 6])\n\nnewarr = np.array_split(arr, 3)\n\nprint(newarr)","c095bb51":"#searching (index)\n\narr = np.array([1, 2, 3, 4, 5, 4, 4])\n\nx = np.where(arr == 4)\n\nprint(x)","30e4d049":"arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n\nx = np.where(arr%2 == 1)\n\nprint(x)","ce463976":"\narr = np.array([1, 3, 5, 7])\n\nx = np.searchsorted(arr, [2, 4, 6])\n\nprint(x)\n#return value is an array: [1 2 3] containing the three indexes where 2, 4, 6 would be inserted in the original array to maintain the order","e58a7645":"#sort\narr = np.array([3, 2, 0, 1])\n\nprint(np.sort(arr))","393e874d":"arr = np.array(['banana', 'cherry', 'apple'])\n\nprint(np.sort(arr))","f3c8dce1":"\narr = np.array([[3, 2, 4], [5, 0, 1]])\n\nprint(np.sort(arr))\n","204c49c2":"from numpy import random\n\nx = random.randint(100)\n\nprint(x)","580e91fe":"x = random.rand()\n\nprint(x)","21502bf5":"x = random.randint(100, size=(3, 5))\n\nprint(x)","9e84fdf5":"x = random.choice([3, 5, 7, 9])\n\nprint(x)\n#choice() method also allows you to return an array of values","12f0edfe":"\narr = np.array([1, 2, 3, 4, 5])\n\nprint(random.permutation(arr))\n#permutation() method returns a re-arranged array (and leaves the original array un-changed","4cd6c0e7":"a = np.arange(10,50)\nprint(a)","8e88a725":"\nimport pandas as pd\ndataset = {\n  'cars': [\"BMW\", \"Volvo\", \"Ford\"],\n  'passings': [3, 7, 2]\n}\n\nmyvar = pd.DataFrame(dataset)\n\nprint(myvar)","02f78f87":"print(pd.__version__)","d524bcfb":"a = [1, 7, 2]\nvar = pd.Series(a)\n\nprint(var)","e6801021":"calories = {\"day1\": 420, \"day2\": 380, \"day3\": 390}\n\nvar = pd.Series(calories)\n\nprint(var)","d5ed8a38":"a = [1, 7, 2]\n\nvar = pd.Series(a, index = [\"x\", \"y\", \"z\"])\n\nprint(var)","bc44286c":"\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\ndf = pd.DataFrame(data, index = [\"day1\", \"day2\", \"day3\"])\n\nprint(df) \nprint(df.loc[\"day2\"])","fa3468b8":"\ntitanic =pd.read_csv('..\/input\/titanic\/train_and_test2.csv')\nprint(titanic.head(5))\n","bf68b1c2":"\ntitanic =pd.read_csv('..\/input\/titanic\/train_and_test2.csv')\nprint(titanic.tail(4))\n\n","dac064c4":"print(titanic.info()) \n\n","289681eb":"titanic =pd.read_csv('..\/input\/titanic\/train_and_test2.csv')\n\nnew = titanic.dropna()\n\nprint(new.head(3))","4bcae94c":"x = titanic[\"Age\"].mode()[0]\n\ntitanic[\"Age\"].fillna(x, inplace = True)\nprint(x)\n#mode","5e72b3d5":"x = titanic[\"Age\"].median()\n\ntitanic[\"Age\"].fillna(x, inplace = True)\nprint(x)\n#median","02bc6a4a":"x = titanic[\"Age\"].mean()\n\ntitanic[\"Age\"].fillna(x, inplace = True)\nprint(x)\n#mean","ea3a55e6":"titanic.corr()","0a750eb9":"titanic.shape","bfe4a0ee":"titanic.columns","179ef5ae":"titanic.isnull()","203f5345":"titanic.isnull().sum()","ad950878":"titanic.dropna(axis=1)","a5f113e4":"titanic.describe()","151d567c":"import matplotlib.pyplot as plt\nimport numpy as np\nx = np.array([0,60])\ny = np.array([1,30])\n\nplt.plot(x,y)\nplt.show()","4ffcb465":"y = np.array([1,3,5,23])\n\nplt.plot(y,marker='*', ms = 20, mec = 'r',mfc = 'y')\nplt.show()\n# 'o','X','>','1',etc can be used as markers\n#ms is the marker size n mec=marker egde color ,mfc=marker face color","2f022102":"y = np.array([1,3,5,23])\n\nplt.plot(y,'o:r')\nplt.show()\n#'-'(solid line),'--'(dotted line),'-.'(dashed line)","7df77ca3":"y = np.array([1,3,5,23])\n\nplt.plot(y,linestyle='dashed')\nplt.show()","2be8ba71":"y = np.array([1,3,5,23])\n\nplt.plot(y,ls='dotted',c='hotpink',lw='8')\nplt.show()\n#ls = line style,c = color,lw=line width","34e2bc36":"x = np.array([0,60])\ny = np.array([1,30])\n\nplt.plot(x)\nplt.plot(y)\nplt.xlabel('calories')\nplt.ylabel('Food')\nplt.title(\"Fitness\" )\nplt.grid()\nplt.show()","89be2abb":"x = np.array([0,60])\ny = np.array([1,30])\n\nplt.plot(x)\nplt.plot(y)\nplt.xlabel('calories')\nplt.ylabel('Food')\nplt.grid(axis = 'x',c='c',ls='dotted',lw='2')\nplt.show()","2b8522d2":"x = np.array([0,60])\ny = np.array([1,30])\n##the figure has 1 row, 2 columns, and this plot is the first plot.\nplt.subplot(1, 2, 1)\nplt.plot(x,y)\nplt.title(\"high carb\")\nplt.xlabel('calories')\nplt.ylabel('Food')\n\nx = np.array([1,4,7])\ny = np.array([1,34,56])\n\n\nplt.subplot(1, 2, 2)\nplt.xlabel('Balance diet')\nplt.ylabel('Food')\nplt.plot(x,y)\nplt.title(\"low carb\")\nplt.suptitle(\"HEALTH\")\n\nplt.show()","cc4e89df":"x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\n\nplt.scatter(x, y,c='hotpink')\n\nx = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])\ny = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\nplt.scatter(x, y,c='c')\n\nplt.show()","7610ec45":"x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\nplt.scatter(x, y,c=colors, cmap='viridis')\nplt.colorbar()\n\nplt.show()","b3a71f77":"x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\nsizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])\nplt.scatter(x, y,c=colors, cmap='viridis',s=sizes,alpha=0.5)\nplt.colorbar()\n\nplt.show()","ad51b4e5":"x = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.bar(x,y,color='g',width=0.1)\nplt.show()","7a74fb84":"\nx = np.random.normal(170, 10, 250)\n\nplt.hist(x)\nplt.show() ","b92f84ee":"y = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.3, 0, 0, 0]\nmycolors = [\"black\", \"hotpink\", \"b\", \"g\"]\nplt.pie(y, labels = mylabels,startangle = 90, explode = myexplode, shadow = True,colors = mycolors)\nplt.legend(title='Fruits')\nplt.show() ","3541a270":"import seaborn as sns\n\nsns.distplot([0, 1, 2, 3, 4, 5])\n\nplt.show()","f8fbe8ff":"sns.distplot([0, 1, 2, 3, 4, 5], hist=False)\n\nplt.show()","d629149b":"import seaborn as sns\ndf = sns.load_dataset('titanic')\nprint(df.head())","1357d85a":"sns.lineplot(x=\"sex\", y=\"age\", data=df) \nplt.title('Titanic')\nplt.ylim(25)\nsns.set_style(\"dark\")\nplt.figure(figsize = (4, 17))\nsns.set_context(\"poster\")\nplt.show()\n#ylimit=ylim,style=darkgrid,whitegrid,dark,white,ticks","bffb673b":"sns.relplot(data=df, x=\"parch\", y=\"age\",hue=\"sex\",col=\"survived\", col_wrap=2)","082ebfd9":"palette = sns.color_palette('PiYG', 11)\nsns.palplot(palette)\n  \nplt.show()\n#sns.palplot(sns.color_palette(\"deep\", 10))\n#sns.palplot(sns.color_palette(\"GnBu\", 10))","1020ba47":"sns.relplot(data=df, x=\"sex\", y=\"parch\",kind=\"line\",ci=None)","240bca55":"sns.distplot(df['survived'],kde = False)","27658540":"\n# create plot\nsns.barplot(x = 'embark_town', y = 'age', data =df,\n            palette = 'PuRd')\nplt.show()","828f8dc7":"sns.countplot(x = 'sex', hue = 'parch', data = df, palette = 'magma')\nplt.title('Survived')\nplt.show()","8c79f472":"\nsns.regplot(x=\"age\", y=\"parch\", data=df)","76a0d7f4":"sns.jointplot(x='age', y='parch', data=df, kind='kde')","74974320":"sns.boxplot(x=\"sex\", y=\"sibsp\", data=df)","6450474b":"sns.violinplot(x=\"sibsp\", y=\"survived\", hue=\"sex\",\n                    data=df, palette=\"muted\")","56bcffc2":"sns.heatmap(df.corr());# Rotate x-labels with the help of matplotlib\nplt.xticks(rotation=-45);\n","7f0a41af":"# Matplotlib","90638b37":" ### Cleaning the data","e377caee":"### Generate Random Number\n","22f4f0d7":"# Seaborn","0355bec4":"# pandas","d64e9596":"# Numpy"}}