{"cell_type":{"9e863d3b":"code","5ce89453":"code","f1d31ab2":"code","d23e808e":"code","c054a885":"code","a3133c41":"code","94893bf4":"code","bbe7a19b":"code","852e2a3d":"code","dac4d3d0":"code","09d2e06e":"code","ba024c91":"code","4740a8d6":"code","b9a0d5de":"code","92618bfe":"code","012cc977":"code","a0d322d5":"code","2613309b":"code","46bfec16":"code","6ec0da6a":"code","7ada53d8":"code","0b2bc842":"code","8b1e4e3f":"code","f341e38b":"code","e2ea658f":"code","988563ed":"code","ace55de6":"code","2e718fac":"code","0a4519ca":"code","cf9f50d6":"code","cab8c3a6":"code","974d7ab0":"markdown","33701ffa":"markdown","62a534b0":"markdown"},"source":{"9e863d3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ce89453":"#reading files\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","f1d31ab2":"#checking for null values - too many cloumns ?? \ud83d\ude11\ntrain.isnull().sum()","d23e808e":"#over here too ??\ntrain.head()","c054a885":"train.shape","a3133c41":"#dropping unwanted useless columns\ntrain_eda = train.drop([\"Id\",\"MSZoning\",\"Utilities\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\",\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"HeatingQC\",\"Electrical\",\"KitchenQual\",\"Functional\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageCond\",\"PoolQC\",\"Fence\"],axis=1)","94893bf4":"#checking if columns are successfull dropped\ntrain_eda.shape","bbe7a19b":"#cross-checking\ntrain_eda.head()","852e2a3d":"#checking for null values\ntrain_eda.isnull().sum()","dac4d3d0":"#forgot to drop one feature\ntrain_eda = train_eda.drop(\"MiscFeature\",axis=1)","09d2e06e":"#checking for null values\ntrain_eda.isnull().sum()","ba024c91":"#dropping null values\ntrain_eda = train_eda.dropna()","4740a8d6":"#checking if i got rid of the null values\ntrain_eda.isnull().sum()","b9a0d5de":"#checking the final shape\ntrain_eda.shape","92618bfe":"#checking for string values\ntrain_eda.info()","012cc977":"#changing all strings to numeric\ntrain_eda.loc[train_eda.Heating=='GasA','Heating']=1\ntrain_eda.loc[train_eda.Heating!='GasA','Heating']=0\ntrain_eda[\"Heating\"] = train_eda[\"Heating\"].astype(str).astype(float)\n\ntrain_eda.loc[train_eda.CentralAir=='Y','CentralAir']=1\ntrain_eda.loc[train_eda.CentralAir=='N','CentralAir']=0\ntrain_eda[\"CentralAir\"] = train_eda[\"CentralAir\"].astype(str).astype(float)\n\ntrain_eda.loc[train_eda.GarageQual=='TA','GarageQual']=1\ntrain_eda.loc[train_eda.GarageQual!='TA','GarageQual']=0\ntrain_eda[\"GarageQual\"] = train_eda[\"GarageQual\"].astype(str).astype(float)\n\ntrain_eda.loc[train_eda.PavedDrive=='Y','PavedDrive']=1\ntrain_eda.loc[train_eda.PavedDrive!='Y','PavedDrive']=0\ntrain_eda[\"PavedDrive\"] = train_eda[\"PavedDrive\"].astype(str).astype(float)\n\ntrain_eda.loc[train_eda.SaleType=='WD','SaleType']=1\ntrain_eda.loc[train_eda.SaleType!='WD','SaleType']=0\ntrain_eda[\"SaleType\"] = train_eda[\"SaleType\"].astype(str).astype(float)\n\ntrain_eda.loc[train_eda.SaleCondition=='Normal','SaleCondition']=1\ntrain_eda.loc[train_eda.SaleCondition!='Normal','SaleCondition']=0\ntrain_eda[\"SaleCondition\"] = train_eda[\"SaleCondition\"].astype(str).astype(float)","a0d322d5":"#checking if successfull\ntrain_eda.info()","2613309b":"x_test = test.drop([\"Id\",\"MSZoning\",\"Utilities\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\",\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"HeatingQC\",\"Electrical\",\"KitchenQual\",\"Functional\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageCond\",\"PoolQC\",\"Fence\"],axis=1)","46bfec16":"x_test.info()","6ec0da6a":"x_test = x_test.drop(\"MiscFeature\",axis=1)","7ada53d8":"x_test.loc[x_test.Heating=='GasA','Heating']=1\nx_test.loc[x_test.Heating!='GasA','Heating']=0\nx_test[\"Heating\"] = x_test[\"Heating\"].astype(str).astype(float)\n\nx_test.loc[x_test.CentralAir=='Y','CentralAir']=1\nx_test.loc[x_test.CentralAir=='N','CentralAir']=0\nx_test[\"CentralAir\"] = x_test[\"CentralAir\"].astype(str).astype(float)\n\nx_test.loc[x_test.GarageQual=='TA','GarageQual']=1\nx_test.loc[x_test.GarageQual!='TA','GarageQual']=0\nx_test[\"GarageQual\"] = x_test[\"GarageQual\"].astype(str).astype(float)\n\nx_test.loc[x_test.PavedDrive=='Y','PavedDrive']=1\nx_test.loc[x_test.PavedDrive!='Y','PavedDrive']=0\nx_test[\"PavedDrive\"] = x_test[\"PavedDrive\"].astype(str).astype(float)\n\nx_test.loc[x_test.SaleType=='WD','SaleType']=1\nx_test.loc[x_test.SaleType!='WD','SaleType']=0\nx_test[\"SaleType\"] = x_test[\"SaleType\"].astype(str).astype(float)\n\nx_test.loc[x_test.SaleCondition=='Normal','SaleCondition']=1\nx_test.loc[x_test.SaleCondition!='Normal','SaleCondition']=0\nx_test[\"SaleCondition\"] = x_test[\"SaleCondition\"].astype(str).astype(float)","0b2bc842":"x_test.info()","8b1e4e3f":"x_test.isnull().sum()","f341e38b":"x_test['LotFrontage'] = x_test['LotFrontage'].fillna(x_test['LotFrontage'].mean())\nx_test['MasVnrArea'] = x_test['MasVnrArea'].fillna(x_test['MasVnrArea'].mean())\nx_test['BsmtFinSF1'] = x_test['BsmtFinSF1'].fillna(x_test['BsmtFinSF1'].mean())\nx_test['BsmtFinSF2'] = x_test['BsmtFinSF2'].fillna(x_test['BsmtFinSF2'].mean())\nx_test['BsmtUnfSF'] = x_test['BsmtUnfSF'].fillna(x_test['BsmtUnfSF'].mean())\nx_test['TotalBsmtSF'] = x_test['TotalBsmtSF'].fillna(x_test['TotalBsmtSF'].mean())\nx_test['BsmtFullBath'] = x_test['BsmtFullBath'].fillna(x_test['BsmtFullBath'].mean())\nx_test['BsmtHalfBath'] = x_test['BsmtHalfBath'].fillna(x_test['BsmtHalfBath'].mean())\nx_test['GarageYrBlt'] = x_test['GarageYrBlt'].fillna(x_test['GarageYrBlt'].mean())\nx_test['GarageCars'] = x_test['GarageCars'].fillna(x_test['GarageCars'].mean())\nx_test['GarageArea'] = x_test['GarageArea'].fillna(x_test['GarageArea'].mean())","e2ea658f":"x_test.isnull().sum()","988563ed":"from sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_squared_log_error\nimport math","ace55de6":"lasso=Lasso()","2e718fac":"x = train_eda.drop(['SalePrice'],axis=1)\ny = train_eda['SalePrice']\nlasso.fit(x,y)\npred_lasso  = lasso.predict(x)\nmse = mean_squared_log_error(y,pred_lasso)\nrmse = np.sqrt(mse)\nprint(rmse)","0a4519ca":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor().fit(x, y)\npred_gbr = gbr.predict(x)\nmse = mean_squared_log_error(y,pred_gbr)\nrmse = np.sqrt(mse)\nprint(rmse)\n    ","cf9f50d6":"from sklearn.tree import DecisionTreeRegressor\n    # Fit regression model\ndtr = DecisionTreeRegressor()\ndtr.fit(x, y)\npred_dtr = dtr.predict(x)\nmse = mean_squared_log_error(y,pred_gbr)\nrmse = np.sqrt(mse)\nprint(rmse)\n    ","cab8c3a6":"predictions = dtr.predict(x_test)\noutput = pd.DataFrame({'Id': test.Id, 'SalePrice': predictions})\noutput.to_csv('submission.csv', index=False)","974d7ab0":"# Submission","33701ffa":"# Modelling\n","62a534b0":"# Fixing Test Data"}}