{"cell_type":{"e20bb5ce":"code","2f4111e7":"code","8172709c":"code","d548dbfe":"code","54b58332":"code","90cd25bb":"code","52e2a8ba":"code","21df0f8a":"code","75cb1e45":"code","6a523b42":"code","c7efa3a9":"code","11fd8324":"code","06fc5879":"code","bd9eb584":"code","a3d997db":"code","c4041673":"code","d2cccb73":"code","10386438":"code","3dd950e0":"code","b56fa581":"code","6ec0dd41":"code","c1992023":"code","ba2e4ad6":"code","686ff590":"code","3e098719":"code","5da8d9d6":"code","fd687fd0":"code","51242d0d":"code","85a9695a":"code","533585a7":"code","8eb41df5":"code","17f6975f":"code","5b2f1cb4":"code","9998e975":"code","80af677f":"code","df18c4f8":"markdown","abe9625a":"markdown","44ed0364":"markdown","4190f0e6":"markdown","8ace0520":"markdown","10d49300":"markdown","d0a9dbf8":"markdown","f93a6130":"markdown","d557d4c6":"markdown","9e65fceb":"markdown","a182a9d8":"markdown","7238bc2e":"markdown","8715f3df":"markdown","b9a6f97e":"markdown","75ce6dd2":"markdown","29216afa":"markdown","0294c5e1":"markdown","09a0d14e":"markdown","d79ab987":"markdown","9f8a1e0f":"markdown","e64f95a8":"markdown","eea37f88":"markdown","f173dc92":"markdown","6a820b8e":"markdown","8a432b9e":"markdown","28bf7d6d":"markdown","e8597369":"markdown","718ea94d":"markdown","48c1dcec":"markdown"},"source":{"e20bb5ce":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\nimport zipfile\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\"))","2f4111e7":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","8172709c":"def extract_files(source_path, target_path):\n    zip_ref = zipfile.ZipFile(source_path,'r')\n    zip_ref.extractall(target_path)\n    zip_ref.close()","d548dbfe":"extract_files('\/kaggle\/input\/test1.zip','\/kaggle\/working\/')\nextract_files('\/kaggle\/input\/train.zip','\/kaggle\/working\/')","54b58332":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","90cd25bb":"df.head()","52e2a8ba":"df.tail()","21df0f8a":"df['category'].value_counts().plot.bar()","75cb1e45":"sample = random.choice(filenames)\nimage = load_img(\"\/kaggle\/working\/train\/\"+sample)\nplt.imshow(image)","6a523b42":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","c7efa3a9":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau","11fd8324":"earlystop = EarlyStopping(patience=10)","06fc5879":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","bd9eb584":"callbacks = [earlystop, learning_rate_reduction]","a3d997db":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","c4041673":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","d2cccb73":"train_df['category'].value_counts().plot.bar()","10386438":"validate_df['category'].value_counts().plot.bar()","3dd950e0":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","b56fa581":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","6ec0dd41":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","c1992023":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","ba2e4ad6":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","686ff590":"epochs=3 if FAST_RUN else 10\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","3e098719":"model.save_weights(\"model.h5\")","5da8d9d6":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","fd687fd0":"test_filenames = os.listdir(\"\/kaggle\/working\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","51242d0d":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","85a9695a":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","533585a7":"test_df['category'] = np.argmax(predict, axis=-1)","8eb41df5":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","17f6975f":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","5b2f1cb4":"test_df['category'].value_counts().plot.bar()","9998e975":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"\/kaggle\/working\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","80af677f":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","df18c4f8":"# Fit Model","abe9625a":"# Prepare Testing Data","44ed0364":"We will convert the predict category back into our generator classes by using `train_generator.class_indices`. It is the classes that image generator map while converting data into computer vision","4190f0e6":"# Importing the Required Libraries","8ace0520":"**Learning Rate Reduction**\n\nWe will reduce the learning rate when then accuracy not increase for 2 steps","10d49300":"From our prepare data part. We map data with `{1: 'dog', 0: 'cat'}`. Now we will map the result back to dog is 1 and cat is 0","d0a9dbf8":"Because we will use image genaretor `with class_mode=\"categorical\"`. We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification. \n\nSo we will convert 1 to dog and 0 to cat","f93a6130":"### Virtaulize Result","d557d4c6":"# See how our generator work","9e65fceb":"# Visualize Training","a182a9d8":"# Build Model\n\n<img src=\"https:\/\/i.imgur.com\/ebkMGGu.jpg\" width=\"100%\"\/>","7238bc2e":"# Save Model","8715f3df":"* **Input Layer**: It represent input image data. It will reshape image into single diminsion array. Example your image is 64x64 = 4096, it will convert to (4096,1) array.\n* **Conv Layer**: This layer will extract features from image.\n* **Pooling Layer**: This layerreduce the spatial volume of input image after convolution.\n* **Fully Connected Layer**: It connect the network from a layer to another layer\n* **Output Layer**: It is the predicted values layer. ","b9a6f97e":"# Prepare Traning Data","75ce6dd2":"# Prepare data","29216afa":"# Create Testing Generator","0294c5e1":"# See sample image","09a0d14e":"# Predict","d79ab987":"# Callbacks","9f8a1e0f":"### See Total In count","e64f95a8":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max","eea37f88":"### Validation Generator","f173dc92":"**Early Stop**\n\nTo prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased","6a820b8e":"From our data we have 12000 cats and 12000 dogs","8a432b9e":"### See predicted result with images","28bf7d6d":"# Submission File Generation","e8597369":"Seem to be nice ","718ea94d":"# Define Constants","48c1dcec":"# Traning Generator"}}