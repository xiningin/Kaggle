{"cell_type":{"1b600e89":"code","18bf32e6":"code","e199c529":"code","9354c8e0":"code","b6ec11e8":"code","9148fef0":"code","28d7433a":"code","baafe70b":"code","a812121b":"code","6c6aa461":"code","7d4e8acf":"code","5d9a705d":"code","645a79b3":"code","825d3021":"code","1bf35528":"code","020bd02a":"code","5a2cac4c":"code","78640599":"code","43f0058a":"code","1e4c4542":"code","bad19106":"code","59643444":"code","b05f4c52":"code","d292faaf":"code","7971f1e2":"code","ef87602d":"code","02c27265":"code","32f6180c":"code","b0a8955d":"code","45a4d241":"code","400357aa":"code","a4fdd578":"code","3f824352":"code","05543136":"code","badbd2c1":"code","ae7609d5":"code","a4929838":"code","45d52f69":"code","8dc44ba7":"code","fa11b6e0":"code","a45a6a94":"code","0c823d45":"code","7c483fc5":"code","75c76bef":"code","dde641ee":"code","2b08b76f":"code","504dfa9d":"code","dcc8af72":"code","96574cb2":"code","3aad088a":"code","04603708":"code","f7c3e79d":"code","1acf0c85":"code","b73be05d":"code","9b0f199f":"code","103c9a23":"code","c677a72e":"code","c8c9124c":"code","d2cee742":"code","d7a9243e":"code","1ac01f2b":"code","08f508d2":"code","46bfbe73":"code","e655a0ff":"code","2d2f8aca":"code","8027bd99":"code","d8a481a8":"markdown","753c101f":"markdown","f88f9b63":"markdown","cfd51341":"markdown","81b07a69":"markdown","9388e1ac":"markdown","394b51f8":"markdown","142aa23f":"markdown","db171118":"markdown","3ae985d4":"markdown","0e7f9cbe":"markdown","eb3c4c88":"markdown","9b27c597":"markdown","a138eb30":"markdown","d9d8f1a9":"markdown","7b4965b5":"markdown","92c836fc":"markdown","73b39e99":"markdown","3fde7558":"markdown","9d7a6c1c":"markdown","d574d607":"markdown","3ccc7b61":"markdown","ee5c0322":"markdown","a0188e84":"markdown","69453ca0":"markdown","b0b23a61":"markdown","affd3ace":"markdown","8747c839":"markdown","8a8a11c7":"markdown","edc6186f":"markdown","1b6a3a13":"markdown","547b639a":"markdown","7e72f3fd":"markdown","a3aeffd7":"markdown","7517d284":"markdown","fea401c3":"markdown","92b4ca72":"markdown","7fcf8cbc":"markdown","db2713b5":"markdown","d053ffd8":"markdown","32e5a0eb":"markdown","e8649a49":"markdown","03c19379":"markdown","a88b1818":"markdown","cc52058d":"markdown","ec5035df":"markdown","bad3b21e":"markdown","822cef0f":"markdown","3097a356":"markdown","a4db8fba":"markdown","088d908a":"markdown","92047268":"markdown","3823b33d":"markdown","299e730a":"markdown","719e4be3":"markdown","d71dde9f":"markdown","d914133c":"markdown"},"source":{"1b600e89":"import os\nprint(os.listdir(\"..\/input\"))","18bf32e6":"import matplotlib.pyplot as plt\nimport matplotlib\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport re\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\nfrom sklearn.preprocessing import StandardScaler\nfrom numpy import genfromtxt\nfrom scipy.stats import multivariate_normal\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score , average_precision_score\nfrom sklearn.metrics import precision_score, precision_recall_curve\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n","e199c529":"School_df = pd.read_csv(\"..\/input\/data-science-for-good\/2016 School Explorer.csv\")","9354c8e0":"School_df.tail()","b6ec11e8":"layout = go.Layout(title='Top cities with no of schools', width=1000, height=500, margin=dict(l=100), xaxis=dict(tickangle=-65))\ntrace1 = go.Bar(x=School_df['City'].value_counts().index, y=School_df['City'].value_counts().values, marker=dict(color=\"#FF7441\"))\n\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9148fef0":"df = pd.DataFrame(School_df['Community School?'].value_counts().values,\n                  index=School_df['Community School?'].value_counts().index, \n                  columns=[' '])\n\ndf.plot(kind='pie', subplots=True, autopct='%1.0f%%', figsize=(8, 8))\n#plt.subplots_adjust(wspace=0.5)\nplt.show()","28d7433a":"School_df['School Income Estimate']=School_df['School Income Estimate'].replace({'\\$':'', ',':''},regex=True).astype(float)\ntrace0 = go.Scatter(\n    x=School_df[School_df['Community School?'] == 'Yes']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'Yes']['Economic Need Index'],\n    mode='markers',\n    name='Community School? = Yes',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='blue',\n            width=10\n        ),\n        \n    )\n)\ntrace1 = go.Scatter(\n    x=School_df[School_df['Community School?'] == 'No']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'No']['Economic Need Index'],\n    mode='markers',\n    name='Community School? = No',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='red',\n            width=2.5\n        ),\n        \n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n      xaxis=dict(title='School Income Estimate'),\n      yaxis=dict(title='Economic Need Index'),\n      title=('Economic Need Assessment'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","baafe70b":"trace0 = go.Scatter3d(\n    x=School_df[School_df['Community School?'] == 'Yes']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'Yes']['Economic Need Index'],\n    z=School_df[School_df['Community School?'] == 'Yes']['Grade High'],\n    mode='markers',\n    name='Community School? = Yes',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='blue',\n            width=10\n        ),\n        \n    )\n)\ntrace1 = go.Scatter3d(\n    x=School_df[School_df['Community School?'] == 'No']['School Income Estimate'],\n    y=School_df[School_df['Community School?'] == 'No']['Economic Need Index'],\n    z=School_df[School_df['Community School?'] == 'No']['Grade High'],\n    mode='markers',\n    name='Community School? = No',\n    marker=dict(\n        size=2,\n        line=dict(\n            color='red',\n            width=2.5\n        ),\n        \n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n      xaxis=dict(title='School Income Estimate'),\n      yaxis=dict(title='Economic Need Index'),\n      title=('Economic Need Assessment'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a812121b":"School_df['Percent Black']=School_df['Percent Black'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Black']=School_df['Percent Black']\/100\nSchool_df['Percent White']=School_df['Percent White'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent White']=School_df['Percent White']\/100\nSchool_df['Percent Asian']=School_df['Percent Asian'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Asian']=School_df['Percent Asian']\/100\nSchool_df['Percent Hispanic']=School_df['Percent Hispanic'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Hispanic']=School_df['Percent Hispanic']\/100\nSchool_df['Percent Black \/ Hispanic']=School_df['Percent Black \/ Hispanic'].replace({'\\%':''},regex=True).astype(float)\nSchool_df['Percent Black \/ Hispanic']=School_df['Percent Black \/ Hispanic']\/100","6c6aa461":"no_comnt_school = School_df[School_df['Community School?'] == 'No']\ncomnt_school = School_df[School_df['Community School?'] == 'Yes']","7d4e8acf":"v_features = ['Percent Hispanic','Percent Black','Percent White','Percent Asian']\nplt.figure(figsize=(15,8))\ngs = gridspec.GridSpec(1,4)\nfor i, cn in enumerate(no_comnt_school[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.boxplot(y = cn , data = no_comnt_school)\n    ax.set_title(str(cn)[0:])\n    ax.set_ylabel(' ')","5d9a705d":"plt.figure(figsize=(15,8))\ngs = gridspec.GridSpec(1,4)\nfor i, cn in enumerate(comnt_school[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.boxplot(y = cn , data = comnt_school)\n    ax.set_title(str(cn)[0:])\n    ax.set_ylabel(' ')","645a79b3":"#col = School_Reg_merged.columns\n#y = 1\n#for x in col : \n#  print (y)  \n#  print(x) \n#  y = y + 1  ","825d3021":"#v_features = School_df.iloc[:,27:38].columns\nv_features=['Rigorous Instruction Rating','Collaborative Teachers Rating','Supportive Environment Rating','Effective School Leadership Rating','Strong Family-Community Ties Rating','Trust Rating']\nplt.figure(figsize=(20,55))\ngs = gridspec.GridSpec(15, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.countplot(y=str(cn), data=School_df,order=School_df[str(cn)].value_counts().index, palette=\"Set2\")\n    ax.set_title(str(cn))\n    ax.set_xlabel(' ')\n    ax.set_ylabel(' ')\n    ","1bf35528":"f,ax=plt.subplots(1,2,figsize=(15,7))\nsns.barplot( y = School_df['Grade High'].dropna().value_counts().index,\n            x = School_df['Grade High'].dropna().value_counts().values,\n                palette=\"winter\",ax=ax[0])\nax[0].set_title('Grade High')\nax[0].set_yticklabels(School_df['Grade High'].dropna().value_counts().index, \n                      rotation='horizontal', fontsize='large')\nax[0].set_ylabel('')\nsns.barplot( y = School_df['Grade Low'].dropna().value_counts().index,\n            x = School_df['Grade Low'].dropna().value_counts().values,\n                palette=\"summer\",ax=ax[1])\nax[1].set_title('Grade Low')\nax[1].set_yticklabels(School_df['Grade Low'].dropna().value_counts().index, \n                      rotation='horizontal', fontsize='large')\nax[1].set_ylabel('')\nplt.subplots_adjust(wspace=0.8)\nplt.show()\n","020bd02a":"School_df['Grade 3 ELA 4s - Black or African American'] = School_df['Grade 3 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Hispanic or Latino']  = School_df['Grade 3 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 3 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - White'] = School_df['Grade 3 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 3 ELA - All Students Tested'])\nSchool_df['Grade 3 ELA 4s - Limited English Proficient'] = School_df['Grade 3 ELA 4s - Limited English Proficient'] \/ School_df['Grade 3 ELA - All Students Tested']\nSchool_df['Grade 3 ELA 4s - Economically Disadvantaged'] = School_df['Grade 3 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 3 ELA - All Students Tested']\nSchool_df['Grade 3 ELA 4s - All Students'] =School_df['Grade 3 ELA 4s - All Students'] \/ School_df['Grade 3 ELA - All Students Tested']\n\nSchool_df['Grade 3 Math 4s - Black or African American'] = School_df['Grade 3 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Hispanic or Latino']  = School_df['Grade 3 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Asian or Pacific Islander'] = School_df['Grade 3 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - White'] = School_df['Grade 3 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 3 Math - All Students tested'])\nSchool_df['Grade 3 Math 4s - Limited English Proficient'] = School_df['Grade 3 Math 4s - Limited English Proficient'] \/ School_df['Grade 3 Math - All Students tested']\nSchool_df['Grade 3 Math 4s - Economically Disadvantaged'] = School_df['Grade 3 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 3 Math - All Students tested']\nSchool_df['Grade 3 Math 4s - All Students'] =School_df['Grade 3 Math 4s - All Students'] \/ School_df['Grade 3 Math - All Students tested']\n\nSchool_df['Grade 4 ELA 4s - Black or African American'] = School_df['Grade 4 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Hispanic or Latino']  = School_df['Grade 4 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 4 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - White'] = School_df['Grade 4 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 4 ELA - All Students Tested'])\nSchool_df['Grade 4 ELA 4s - Limited English Proficient'] = School_df['Grade 4 ELA 4s - Limited English Proficient'] \/ School_df['Grade 4 ELA - All Students Tested']\nSchool_df['Grade 4 ELA 4s - Economically Disadvantaged'] = School_df['Grade 4 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 4 ELA - All Students Tested']\nSchool_df['Grade 4 ELA 4s - All Students'] =School_df['Grade 4 ELA 4s - All Students'] \/ School_df['Grade 4 ELA - All Students Tested']\n\n\nSchool_df['Grade 4 Math 4s - Black or African American'] = School_df['Grade 4 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Hispanic or Latino']  = School_df['Grade 4 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Asian or Pacific Islander'] = School_df['Grade 4 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - White'] = School_df['Grade 4 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 4 Math - All Students Tested'])\nSchool_df['Grade 4 Math 4s - Limited English Proficient'] = School_df['Grade 4 Math 4s - Limited English Proficient'] \/ School_df['Grade 4 Math - All Students Tested']\nSchool_df['Grade 4 Math 4s - Economically Disadvantaged'] = School_df['Grade 4 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 4 Math - All Students Tested']\nSchool_df['Grade 4 Math 4s - All Students'] =School_df['Grade 4 Math 4s - All Students'] \/ School_df['Grade 4 Math - All Students Tested']\n\nSchool_df['Grade 5 ELA 4s - Black or African American'] = School_df['Grade 5 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Hispanic or Latino']  = School_df['Grade 5 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 5 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - White'] = School_df['Grade 5 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 5 ELA - All Students Tested'])\nSchool_df['Grade 5 ELA 4s - Limited English Proficient'] = School_df['Grade 5 ELA 4s - Limited English Proficient'] \/ School_df['Grade 5 ELA - All Students Tested']\nSchool_df['Grade 5 ELA 4s - Economically Disadvantaged'] = School_df['Grade 5 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 5 ELA - All Students Tested']\nSchool_df['Grade 5 ELA 4s - All Students'] =School_df['Grade 5 ELA 4s - All Students'] \/ School_df['Grade 5 ELA - All Students Tested']\n\n\nSchool_df['Grade 5 Math 4s - Black or African American'] = School_df['Grade 5 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Hispanic or Latino']  = School_df['Grade 5 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Asian or Pacific Islander'] = School_df['Grade 5 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - White'] = School_df['Grade 5 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 5 Math - All Students Tested'])\nSchool_df['Grade 5 Math 4s - Limited English Proficient'] = School_df['Grade 5 Math 4s - Limited English Proficient'] \/ School_df['Grade 5 Math - All Students Tested']\nSchool_df['Grade 5 Math 4s - Economically Disadvantaged'] = School_df['Grade 5 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 5 Math - All Students Tested']\nSchool_df['Grade 5 Math 4s - All Students'] =School_df['Grade 5 Math 4s - All Students'] \/ School_df['Grade 5 Math - All Students Tested']\n\n\nSchool_df['Grade 6 ELA 4s - Black or African American'] = School_df['Grade 6 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Hispanic or Latino']  = School_df['Grade 6 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 6 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - White'] = School_df['Grade 6 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 6 ELA - All Students Tested'])\nSchool_df['Grade 6 ELA 4s - Limited English Proficient'] = School_df['Grade 6 ELA 4s - Limited English Proficient'] \/ School_df['Grade 6 ELA - All Students Tested']\nSchool_df['Grade 6 ELA 4s - Economically Disadvantaged'] = School_df['Grade 6 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 6 ELA - All Students Tested']\nSchool_df['Grade 6 ELA 4s - All Students'] =School_df['Grade 6 ELA 4s - All Students'] \/ School_df['Grade 6 ELA - All Students Tested']\n\nSchool_df['Grade 6 Math 4s - Black or African American'] = School_df['Grade 6 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Hispanic or Latino']  = School_df['Grade 6 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Asian or Pacific Islander'] = School_df['Grade 6 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - White'] = School_df['Grade 6 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 6 Math - All Students Tested'])\nSchool_df['Grade 6 Math 4s - Limited English Proficient'] = School_df['Grade 6 Math 4s - Limited English Proficient'] \/ School_df['Grade 6 Math - All Students Tested']\nSchool_df['Grade 6 Math 4s - Economically Disadvantaged'] = School_df['Grade 6 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 6 Math - All Students Tested']\nSchool_df['Grade 6 Math 4s - All Students'] =School_df['Grade 6 Math 4s - All Students'] \/ School_df['Grade 6 Math - All Students Tested']\n\nSchool_df['Grade 7 ELA 4s - Black or African American'] = School_df['Grade 7 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Hispanic or Latino']  = School_df['Grade 7 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 7 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - White'] = School_df['Grade 7 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 7 ELA - All Students Tested'])\nSchool_df['Grade 7 ELA 4s - Limited English Proficient'] = School_df['Grade 7 ELA 4s - Limited English Proficient'] \/ School_df['Grade 7 ELA - All Students Tested']\nSchool_df['Grade 7 ELA 4s - Economically Disadvantaged'] = School_df['Grade 7 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 7 ELA - All Students Tested']\nSchool_df['Grade 7 ELA 4s - All Students'] =School_df['Grade 7 ELA 4s - All Students'] \/ School_df['Grade 7 ELA - All Students Tested']\n\nSchool_df['Grade 7 Math 4s - Black or African American'] = School_df['Grade 7 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Hispanic or Latino']  = School_df['Grade 7 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Asian or Pacific Islander'] = School_df['Grade 7 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - White'] = School_df['Grade 7 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 7 Math - All Students Tested'])\nSchool_df['Grade 7 Math 4s - Limited English Proficient'] = School_df['Grade 7 Math 4s - Limited English Proficient'] \/ School_df['Grade 7 Math - All Students Tested']\nSchool_df['Grade 7 Math 4s - Economically Disadvantaged'] = School_df['Grade 7 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 7 Math - All Students Tested']\nSchool_df['Grade 7 Math 4s - All Students'] =School_df['Grade 7 Math 4s - All Students'] \/ School_df['Grade 7 Math - All Students Tested']\n\nSchool_df['Grade 8 ELA 4s - Black or African American'] = School_df['Grade 8 ELA 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Hispanic or Latino']  = School_df['Grade 8 ELA 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Asian or Pacific Islander'] = School_df['Grade 8 ELA 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - White'] = School_df['Grade 8 ELA 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 8 ELA - All Students Tested'])\nSchool_df['Grade 8 ELA 4s - Limited English Proficient'] = School_df['Grade 8 ELA 4s - Limited English Proficient'] \/ School_df['Grade 8 ELA - All Students Tested']\nSchool_df['Grade 8 ELA 4s - Economically Disadvantaged'] = School_df['Grade 8 ELA 4s - Economically Disadvantaged'] \/ School_df['Grade 8 ELA - All Students Tested']\nSchool_df['Grade 8 ELA 4s - All Students'] =School_df['Grade 8 ELA 4s - All Students'] \/ School_df['Grade 8 ELA - All Students Tested']\n\nSchool_df['Grade 8 Math 4s - Black or African American'] = School_df['Grade 8 Math 4s - Black or African American'] \/ (School_df['Percent Black'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Hispanic or Latino']  = School_df['Grade 8 Math 4s - Hispanic or Latino'] \/(School_df['Percent Hispanic']*School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Asian or Pacific Islander'] = School_df['Grade 8 Math 4s - Asian or Pacific Islander'] \/ (School_df['Percent Asian'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - White'] = School_df['Grade 8 Math 4s - White'] \/ (School_df['Percent White'] * School_df['Grade 8 Math - All Students Tested'])\nSchool_df['Grade 8 Math 4s - Limited English Proficient'] = School_df['Grade 8 Math 4s - Limited English Proficient'] \/ School_df['Grade 8 Math - All Students Tested']\nSchool_df['Grade 8 Math 4s - Economically Disadvantaged'] = School_df['Grade 8 Math 4s - Economically Disadvantaged'] \/ School_df['Grade 8 Math - All Students Tested']\nSchool_df['Grade 8 Math 4s - All Students'] =School_df['Grade 8 Math 4s - All Students'] \/ School_df['Grade 8 Math - All Students Tested']\n\nSchool_df['Grade 3 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 3 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 3 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 3 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 3 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 3 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 4 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 4 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 4 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 4 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 4 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 4 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 5 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 5 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 5 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 5 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 5 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 5 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 6 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 6 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 6 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 6 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 6 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 6 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 7 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 7 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 7 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 7 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 7 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 7 Math 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 8 ELA 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 8 ELA 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 8 ELA 4s - All Students'].fillna(0, inplace=True) \n\nSchool_df['Grade 8 Math 4s - Black or African American'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Hispanic or Latino'].fillna(0, inplace=True)  \nSchool_df['Grade 8 Math 4s - Asian or Pacific Islander'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - White'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Limited English Proficient'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - Economically Disadvantaged'].fillna(0, inplace=True) \nSchool_df['Grade 8 Math 4s - All Students'].fillna(0, inplace=True) \n","5a2cac4c":"ELA = {'Race': ['Black', 'Hispanic', 'Asian','White'], \n           'G3': [School_df['Grade 3 ELA 4s - Black or African American'].mean(), School_df['Grade 3 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 3 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 3 ELA 4s - White'].mean()],\n           'G4': [School_df['Grade 4 ELA 4s - Black or African American'].mean(), School_df['Grade 4 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 4 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 4 ELA 4s - White'].mean()],\n           'G5': [School_df['Grade 5 ELA 4s - Black or African American'].mean(), School_df['Grade 5 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 5 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 5 ELA 4s - White'].mean()],\n           'G6': [School_df['Grade 6 ELA 4s - Black or African American'].mean(), School_df['Grade 6 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 6 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 6 ELA 4s - White'].mean()],\n           'G7': [School_df['Grade 7 ELA 4s - Black or African American'].mean(), School_df['Grade 7 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 7 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 7 ELA 4s - White'].mean()],\n           'G8': [School_df['Grade 8 ELA 4s - Black or African American'].mean(), School_df['Grade 8 ELA 4s - Hispanic or Latino'].mean(), School_df['Grade 8 ELA 4s - Asian or Pacific Islander'].mean(),School_df['Grade 8 ELA 4s - White'].mean()]}\n\nindex = [0,1,2,3]\nELA_df = pd.DataFrame(ELA, index=index)\n\nMath = {'Race': ['Black', 'Hispanic', 'Asian','White'], \n           'G3': [School_df['Grade 3 Math 4s - Black or African American'].mean(), School_df['Grade 3 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 3 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 3 Math 4s - White'].mean()],\n           'G4': [School_df['Grade 4 Math 4s - Black or African American'].mean(), School_df['Grade 4 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 4 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 4 Math 4s - White'].mean()],\n           'G5': [School_df['Grade 5 Math 4s - Black or African American'].mean(), School_df['Grade 5 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 5 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 5 Math 4s - White'].mean()],\n           'G6': [School_df['Grade 6 Math 4s - Black or African American'].mean(), School_df['Grade 6 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 6 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 6 Math 4s - White'].mean()],\n           'G7': [School_df['Grade 7 Math 4s - Black or African American'].mean(), School_df['Grade 7 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 7 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 7 Math 4s - White'].mean()],\n           'G8': [School_df['Grade 8 Math 4s - Black or African American'].mean(), School_df['Grade 8 Math 4s - Hispanic or Latino'].mean(), School_df['Grade 8 Math 4s - Asian or Pacific Islander'].mean(),School_df['Grade 8 Math 4s - White'].mean()]}\n\nindex = [0,1,2,3]\nMath_df1 = pd.DataFrame(Math, index=index)","78640599":"trace0 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G3'],mode='lines',name='Grade 3 students scoring in level 4 - Math ')\ntrace1 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G4'],mode='lines',name='Grade 4 students scoring in level 4 - Math ')\ntrace2 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G5'],mode='lines',name='Grade 5 students scoring in level 4 - Math ')\ntrace3 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G6'],mode='lines',name='Grade 6 students scoring in level 4 - Math ')\ntrace4 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G7'],mode='lines',name='Grade 7 students scoring in level 4 - Math ')\ntrace5 = go.Scatter(\n    x = Math_df1['Race'],y = Math_df1['G8'],mode='lines',name='Grade 8 students scoring in level 4 - Math ')\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    xaxis=dict(title='Race'),\n    yaxis=dict(title='Percent students from each race'),\n    title=' Students performance in different grade - Math ',\n    showlegend = True)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","43f0058a":"trace0 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G3'],mode='lines',name='Grade 3 students scoring in level 4 - ELA ')\ntrace1 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G4'],mode='lines',name='Grade 4 students scoring in level 4 - ELA ')\ntrace2 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G5'],mode='lines',name='Grade 5 students scoring in level 4 - ELA ')\ntrace3 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G6'],mode='lines',name='Grade 6 students scoring in level 4 - ELA ')\ntrace4 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G7'],mode='lines',name='Grade 7 students scoring in level 4 - ELA ')\ntrace5 = go.Scatter(\n    x = ELA_df['Race'],y = ELA_df['G8'],mode='lines',name='Grade 8 students scoring in level 4 - ELA ')\n\n\ndata = [trace0,trace1,trace2,trace3,trace4,trace5]\n\nlayout = go.Layout(\n    xaxis=dict(title='Race'),\n    yaxis=dict(title='Percent students from each race'),\n    title=' Students performance in different grade - ELA ',\n    showlegend = True)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","1e4c4542":"v_features = ['Grade 3 ELA - All Students Tested','Grade 3 Math - All Students tested',\n              'Grade 4 ELA - All Students Tested','Grade 4 Math - All Students Tested',\n              'Grade 5 ELA - All Students Tested','Grade 5 Math - All Students Tested',\n              'Grade 6 ELA - All Students Tested','Grade 6 Math - All Students Tested',\n              'Grade 7 ELA - All Students Tested','Grade 7 Math - All Students Tested',\n              'Grade 8 ELA - All Students Tested','Grade 8 Math - All Students Tested',]\nplt.figure(figsize=(12,8*4))\ngs = gridspec.GridSpec(7, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(School_df[cn], bins=5)\n    ax.set_xlabel('')\n    ax.set_title('feature: ' + str(cn))\nplt.show()","bad19106":"def get_bins(no):\n    if no == 0 :\n        return 0\n    elif no > 0 and no <= 50 :\n        return 1\n    elif no > 50 and no <= 100 :\n        return 2\n    elif no > 100 and no <= 150 :\n        return 3\n    elif no > 150 and no <= 200 :\n        return 4\n    else: \n        return 5\n\nv_features = ['Grade 3 ELA - All Students Tested','Grade 3 Math - All Students tested',\n              'Grade 4 ELA - All Students Tested','Grade 4 Math - All Students Tested',\n              'Grade 5 ELA - All Students Tested','Grade 5 Math - All Students Tested',\n              'Grade 6 ELA - All Students Tested','Grade 6 Math - All Students Tested',\n              'Grade 7 ELA - All Students Tested','Grade 7 Math - All Students Tested',\n              'Grade 8 ELA - All Students Tested','Grade 8 Math - All Students Tested',]\nfor i, cn in enumerate(School_df[v_features]):\n    School_df[cn] = School_df[cn].apply(lambda x: get_bins(x))","59643444":"plt.figure(figsize=(12,8*4))\ngs = gridspec.GridSpec(7, 2)\nfor i, cn in enumerate(School_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.countplot(y=str(cn), data=School_df,order=School_df[str(cn)].value_counts().index, palette=\"Set2\")\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_title('feature: ' + str(cn))\nplt.show()","b05f4c52":"School_df['Community School?'] = School_df['Community School?'].map(lambda s: 1 if s == 'Yes' else 0)\n\nSchool_df['Percent ELL']=School_df['Percent ELL'].replace({'%':'', ',':''},regex=True).astype(float)\nfeatures = [\"Student Attendance Rate\",\"Percent of Students Chronically Absent\",\"Rigorous Instruction %\"\n,\"Collaborative Teachers %\",\"Supportive Environment %\",\"Effective School Leadership %\",\"Strong Family-Community Ties %\",\"Trust %\",]\n\nfor i, cn in enumerate(School_df[features]):\n     School_df[str(cn)]=School_df[str(cn)].replace({'%':'', ',':''},regex=True).astype(float)","d292faaf":"School_df['Rigorous Instruction Rating'].fillna(0, inplace=True)\nSchool_df['Collaborative Teachers Rating'].fillna(0, inplace=True)\nSchool_df['Supportive Environment Rating'].fillna(0, inplace=True)\nSchool_df['Effective School Leadership Rating'].fillna(0, inplace=True)\nSchool_df['Strong Family-Community Ties Rating'].fillna(0, inplace=True)\nSchool_df['Trust Rating'].fillna(0, inplace=True)\nSchool_df['Student Achievement Rating'].fillna(0, inplace=True)\n\nSchool_df['Rigorous Instruction Rating'] = School_df['Rigorous Instruction Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Rigorous Instruction Rating'] = School_df['Rigorous Instruction Rating'].astype(int)\nSchool_df['Collaborative Teachers Rating'] = School_df['Collaborative Teachers Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Collaborative Teachers Rating'] = School_df['Collaborative Teachers Rating'].astype(int)\nSchool_df['Supportive Environment Rating'] = School_df['Supportive Environment Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Supportive Environment Rating'] = School_df['Supportive Environment Rating'].astype(int)\nSchool_df['Effective School Leadership Rating'] = School_df['Effective School Leadership Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Effective School Leadership Rating'] = School_df['Effective School Leadership Rating'].astype(int)\nSchool_df['Strong Family-Community Ties Rating'] = School_df['Strong Family-Community Ties Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Strong Family-Community Ties Rating'] = School_df['Strong Family-Community Ties Rating'].astype(int)\nSchool_df['Trust Rating'] = School_df['Trust Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Trust Rating'] = School_df['Trust Rating'].astype(int)\nSchool_df['Student Achievement Rating'] = School_df['Student Achievement Rating'].map({\"Not Meeting Target\":0,\"Approaching Target\":1, \"Meeting Target\":2, \"Exceeding Target\" : 3, 0 : 0})\nSchool_df['Student Achievement Rating'] = School_df['Student Achievement Rating'].astype(int)","7971f1e2":"Registration_df = pd.read_csv(\"..\/input\/data-science-for-good\/D5 SHSAT Registrations and Testers.csv\")\nRegistration_df[\"percent1\"] = Registration_df[\"Number of students who took the SHSAT\"]\/Registration_df[\"Number of students who registered for the SHSAT\"]\nRegistration_df[\"percent2\"] = Registration_df[\"Number of students who registered for the SHSAT\"]\/Registration_df[\"Enrollment on 10\/31\"]\nRegistration_df[\"Reg_idx\"] = Registration_df[\"percent1\"]*Registration_df[\"percent2\"]\nRegistration_df = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nRegistration_df.head()","ef87602d":"Registration_df1 = Registration_df.groupby(['School name','Year of SHST'])['percent2'].sum().unstack()\nRegistration_df1 = Registration_df1.sort_values([2016], ascending=False)\nRegistration_df1 = Registration_df1.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df1,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show()","02c27265":"Registration_df2 = Registration_df.groupby(['School name','Year of SHST'])['percent1'].sum().unstack()\nRegistration_df2 = Registration_df2.sort_values([2016], ascending=False)\nRegistration_df2 = Registration_df2.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df2,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show()","32f6180c":"Registration_df3 = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nRegistration_df4 = Registration_df3.groupby(['School name','Year of SHST'])['Reg_idx'].sum().unstack()\nRegistration_df4 = Registration_df4.sort_values([2016], ascending=False)\nRegistration_df4 = Registration_df4.fillna(0)\nf, ax = plt.subplots(figsize=(15, 10)) \ng = sns.heatmap(Registration_df4,annot=True,cmap='YlGnBu',linewidths=.5,vmin=0.01)\nplt.show();","b0a8955d":"filtered_reg_df = Registration_df.drop_duplicates(subset=['School name','Year of SHST'])\nfiltered_reg_df = filtered_reg_df[filtered_reg_df['Year of SHST'] == 2016] \nfiltered_reg_df = filtered_reg_df[filtered_reg_df['Grade level'] == 8]","45a4d241":"School_Reg_merged = pd.merge(filtered_reg_df, School_df, how='left', left_on='DBN', right_on='Location Code')\nSchool_Reg_merged = School_Reg_merged[np.isfinite(School_Reg_merged['Economic Need Index'])]\nSchool_Reg_merged.head()","400357aa":"School_Reg_merged['Grade level'].value_counts()","a4fdd578":"fig, ax = plt.subplots(figsize=(13, 13))\nax.scatter(School_Reg_merged['Economic Need Index'],School_Reg_merged['Reg_idx'],marker=\"o\", color=\"lightBlue\", s=10, linewidths=10)\nax.set_xlabel('Economic Need Index')\nax.set_ylabel('percent participation in 2016')\nax.spines['right'].set_visible(False)\nax.grid()\nplt.grid()\n\nENI = School_Reg_merged['Economic Need Index']\nENI = np.array(ENI)\nschool = School_Reg_merged['School name']\nschool = np.array(school)\npercent = School_Reg_merged['Reg_idx']\npercent = np.array(percent)\n\nfor i, txt in enumerate(school):\n      ax.annotate(txt, (ENI[i],percent[i]),fontsize=12,rotation=-15,color='Red')\n\nax.annotate('Threshold', (0.57,0.20),fontsize=14,rotation=0,color='Blue')\nax.annotate('.', xy=(0.59,0.21), xytext=(0.59, 0.25),\n            arrowprops=dict(facecolor='Red', shrink=0.06),)\nax.annotate('.', xy=(0.59,0.19), xytext=(0.59, 0.15),\n            arrowprops=dict(facecolor='Red', shrink=0.06),);\n        ","3f824352":"School_Reg_merged['Reg_idx'] = School_Reg_merged['Reg_idx'].map(lambda s: 1 if s >= 0.20 else 0)","05543136":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\nSchool_Reg_merged.drop(['School Income Estimate','Adjusted Grade','New?','Other Location Code in LCGMS'], axis =1, inplace = True)","badbd2c1":"rnd_clf = RandomForestClassifier(n_estimators = 100 , criterion = 'entropy',random_state = 0)\nrnd_clf.fit(School_Reg_merged.iloc[:,22:167],School_Reg_merged.iloc[:,9])\nfor name, importance in zip(School_Reg_merged.iloc[:,22:167].columns, rnd_clf.feature_importances_):\n    print(name, \"=\", importance)","ae7609d5":"'''\nplt.figure(figsize=(12,8*4))\ng = sns.barplot(y=School_Reg_merged.iloc[:,22:167].columns,x = rnd_clf.feature_importances_, orient='h')\n\n'''\n\nx, y = (list(x) for x in zip(*sorted(zip(rnd_clf.feature_importances_, School_Reg_merged.iloc[:,22:167].columns), \n                                                            reverse = False)))\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=x,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Random Forest Feature importance',\n    orientation='h',\n)\n\nlayout = dict(\n    title='Barplot of Feature importances',\n     width = 900, height = 3000,\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    margin=dict(\n    l=300,\n),\n)\n\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)\n","a4929838":"for name, importance in zip(School_Reg_merged.iloc[:,22:167].columns, rnd_clf.feature_importances_):\n    if importance > 0.015 :\n        print('\"' + name + '\"'+',')","45d52f69":"School_Reg_train = School_Reg_merged[[\"School name\",\n\"Percent Black \/ Hispanic\",\n\"Student Attendance Rate\",\n\"Percent of Students Chronically Absent\",\n\"Rigorous Instruction %\",\n\"Collaborative Teachers %\",\n\"Supportive Environment %\",\n\"Effective School Leadership %\",\n\"Strong Family-Community Ties %\",\n\"Trust %\",\n\"Student Achievement Rating\",\n\"Average ELA Proficiency\",\n\"Grade 5 ELA 4s - All Students\",\n\"Grade 5 ELA 4s - Economically Disadvantaged\",\n\"Grade 6 ELA 4s - All Students\",\n\"Grade 6 ELA 4s - Black or African American\",\n\"Grade 6 ELA 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - All Students\",\n\"Grade 6 Math 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - Economically Disadvantaged\",\n\"Grade 7 ELA 4s - All Students\",\n\"Grade 8 ELA - All Students Tested\",\n\"Grade 8 ELA 4s - All Students\",\n\"Grade 8 ELA 4s - Hispanic or Latino\",\n\"Grade 8 ELA 4s - Economically Disadvantaged\",\n\"Grade 8 Math 4s - Economically Disadvantaged\",\n\"Reg_idx\"]]","8dc44ba7":"X = School_Reg_train.iloc[:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]].values \ny = School_Reg_train.iloc[:, 26].values\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n\nclassifier = RandomForestClassifier(n_estimators = 1000 , criterion = 'entropy',random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nlabels = [1, 0]\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Confusion matrix of the classifier')\nfig.colorbar(cax)\nax.set_xticklabels([''] + labels)\nax.set_yticklabels([''] + labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","fa11b6e0":"School_Reg = School_df[['School Name',\n'Grade High','Percent White','Percent Asian','Latitude','Longitude',\n\"Percent Black \/ Hispanic\",\n\"Student Attendance Rate\",\n\"Percent of Students Chronically Absent\",\n\"Rigorous Instruction %\",\n\"Collaborative Teachers %\",\n\"Supportive Environment %\",\n\"Effective School Leadership %\",\n\"Strong Family-Community Ties %\",\n\"Trust %\",\n\"Student Achievement Rating\",\n\"Average ELA Proficiency\",\n\"Grade 5 ELA 4s - All Students\",\n\"Grade 5 ELA 4s - Economically Disadvantaged\",\n\"Grade 6 ELA 4s - All Students\",\n\"Grade 6 ELA 4s - Black or African American\",\n\"Grade 6 ELA 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - All Students\",\n\"Grade 6 Math 4s - Hispanic or Latino\",\n\"Grade 6 Math 4s - Economically Disadvantaged\",\n\"Grade 7 ELA 4s - All Students\",\n\"Grade 8 ELA - All Students Tested\",\n\"Grade 8 ELA 4s - All Students\",\n\"Grade 8 ELA 4s - Hispanic or Latino\",\n\"Grade 8 ELA 4s - Economically Disadvantaged\",\n\"Grade 8 Math 4s - Economically Disadvantaged\",                       \n]]","a45a6a94":"School_Reg['Grade High'].value_counts()","0c823d45":"School_Reg_test = School_Reg[School_Reg['Grade High'] == '08']\nSchool_Reg_test.head()","7c483fc5":"School_Reg_test = School_Reg_test.dropna(axis=0)","75c76bef":"X = School_Reg_test.iloc[:, [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]].values \ny_pred = classifier.predict(X)\ny_pred","dde641ee":"y_pred_df = pd.DataFrame({'Need':y_pred})\nSchool_Reg_test = School_Reg_test.reset_index(drop=True)\nFinal_df =  pd.concat(objs=[School_Reg_test, y_pred_df], axis=1)\nFinal_df.head()","2b08b76f":"layout = go.Layout(title='Overall Stats of schools in need', width=1000, height=500, margin=dict(l=100), xaxis=dict(tickangle=-65))\ntrace1 = go.Bar(x=Final_df['Need'].value_counts().index, y=Final_df['Need'].value_counts().values, marker=dict(color=Final_df['Need'].value_counts().values,colorscale = 'Rainbow'))\n\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","504dfa9d":"import folium\nfrom folium import plugins\nfrom io import StringIO\nimport folium \n\ncolors = ['red', 'yellow']\nd = (Final_df['Need']).astype('int')\ncols = [colors[int(i\/1)] for i in d]\n\nm = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\n\nfor lat, long, col in zip(Final_df['Latitude'], Final_df['Longitude'], cols):\n    #rown = list(rown)\n    folium.CircleMarker([lat, long], color=col, fill=True, radius=2).add_to(m)\nm","dcc8af72":"v_features = Final_df.iloc[:, [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]].columns\nplt.figure(figsize=(18,8*4))\ngs = gridspec.GridSpec(9, 3)\nfor i, cn in enumerate(Final_df[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(Final_df[cn][Final_df.Need == 1], bins=50,color='blue')\n    sns.distplot(Final_df[cn][Final_df.Need == 0], bins=50,color='red')\n    ax.set_xlabel('')\n    ax.set_title(str(cn))\nplt.show()","96574cb2":"Math_df = pd.read_csv(\"..\/input\/new-york-state-math-test-results\/2013-2015-new-york-state-mathematics-exam.csv\")\nMath_df.tail()","3aad088a":"Math_df['Grade'].value_counts()","04603708":"Math_df['Category'].value_counts()","f7c3e79d":"plt.figure(figsize=(30,40))\ng = sns.FacetGrid(data=Math_df,row='Category',col='Year')\ng.map(sns.boxplot,'% Level 4')\n","1acf0c85":"Math_df_g8 = Math_df[Math_df['Grade'] == '8']\nf,ax=plt.subplots(1,4,figsize=(25,12))\nsns.boxplot(y='Category',x='% Level 1',data=Math_df_g8,ax=ax[0])\nsns.boxplot(y='Category',x='% Level 2',data=Math_df_g8,ax=ax[1])\nsns.boxplot(y='Category',x='% Level 3',data=Math_df_g8,ax=ax[2])\nsns.boxplot(y='Category',x='% Level 4',data=Math_df_g8,ax=ax[3]);\n","b73be05d":"Lib_df = pd.read_csv(\"..\/input\/nyc-queens-library-branches\/queens-library-branches.csv\")\nLib_df.head()","9b0f199f":"Lib_df.drop('notification', axis=1, inplace=True)\nLib_df = Lib_df.dropna(axis=0)","103c9a23":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\n\nfor (_, (lat, long)) in Lib_df[['Latitude', 'Longitude']].iterrows():\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='#3186cc',\n                    fill_color='#3186cc',\n                   ).add_to(m)\nm","c677a72e":"colors = ['red', 'yellow']\nd = (Final_df['Need']).astype('int')\ncols = [colors[int(i\/1)] for i in d]\n\nm = folium.Map([Final_df['Latitude'][0], Final_df['Longitude'][0]], zoom_start=10.3,tiles='stamentoner')\n\nfor lat, long, col in zip(Final_df['Latitude'], Final_df['Longitude'], cols):\n    #rown = list(rown)\n    folium.CircleMarker([lat, long], color=col, fill=True, radius=2).add_to(m)\n    \nfor (_, (lat, long)) in Lib_df[['Latitude', 'Longitude']].iterrows():\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color='#3186cc',\n                    fill_color='#3186cc',\n                   ).add_to(m)\nm","c8c9124c":"Event_loc_df = Final_df[Final_df['Need'] == 0 ]\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=8, random_state=0).fit(Event_loc_df[['Latitude', 'Longitude']].values)\nlabels = kmeans.labels_\n\ncolors = ['#d53e4f','#f46d43','#fdae61','#fee08b','#e6f598','#abdda4','#66c2a5','#3288bd']\nm = folium.Map(location=[40.75, -74],tiles='stamentoner')\n\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nEvent_label = pd.DataFrame({'labels':labels})\nEvent_loc_df = Event_loc_df.reset_index(drop=True)\nEvent_final =  pd.concat(objs=[Event_loc_df, Event_label], axis=1)\n    \nEvent_lat = Event_final.groupby(['labels'])['Latitude'].mean()\nEvent_lon = Event_final.groupby(['labels'])['Longitude'].mean()\nEvent_lat = Event_lat.reset_index() \nEvent_lon = Event_lon.reset_index() \n\nfor (lat, long) in zip(Event_lat['Latitude'], Event_lon['Longitude']):\n    folium.CircleMarker([lat, long],\n                    radius=10,\n                    color='red',\n                    fill=True,\n                   ).add_to(m)\nm","d2cee742":"Event_final1 = Event_final[['School Name','labels','Latitude','Longitude']]\nEvent_final1 = Event_final1.to_dict('records')\nEvent_lat1 = Event_lat.to_dict('records')\nEvent_lon1 = Event_lon.to_dict('records')\n\nfrom math import cos, asin, sqrt\ndef distance(lat1, lon1, lat2, lon2):\n    p = 0.017453292519943295\n    a = 0.5 - cos((lat2-lat1)*p)\/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) \/ 2\n    return 12742 * asin(sqrt(a))\n\ndef closest(data, v1,v2):\n    return min(data, key=lambda p: distance(v1['Latitude'],v2['Longitude'],p['Latitude'],p['Longitude']))\n\nv = {'lat': 40.7622290, 'lon': -73.77}\nfor i in range(8) :\n   print(closest(Event_final1, Event_lat1[i],Event_lon1[i]))","d7a9243e":"eventid = [{'School Name': 'GOLDIE MAPLE ACADEMY', 'labels': 0, 'Latitude': 40.591349, 'Longitude': -73.78618900000001},\n{'School Name': 'I.S. 313 SCHOOL OF LEADERSHIP DEVELOPMENT', 'labels': 1, 'Latitude': 40.840589, 'Longitude': -73.90454},\n{'School Name': 'P.S. 178 SAINT CLAIR MCKELWAY', 'labels': 2, 'Latitude': 40.675234, 'Longitude': -73.915306},\n{'School Name': 'P.S. 108 ASSEMBLYMAN ANGELO DEL TORO EDUCATIONAL COMPLEX', 'labels': 3, 'Latitude': 40.795035, 'Longitude': -73.947872},\n{'School Name': 'P.S. 084 JOSE DE DIEGO', 'labels': 4, 'Latitude': 40.714822, 'Longitude': -73.963516},\n{'School Name': 'P.S.\/M.S. 147 RONALD MCNAIR', 'labels': 5, 'Latitude': 40.698026, 'Longitude': -73.740151},\n{'School Name': 'ICAHN CHARTER SCHOOL 3', 'labels': 6, 'Latitude': 40.856635, 'Longitude': -73.84304200000001},\n{'School Name': 'STATEN ISLAND COMMUNITY CHARTER SCHOOL', 'labels': 7, 'Latitude': 40.630238, 'Longitude': -74.08114300000001}]","1ac01f2b":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nfor i in range(8) :\n    folium.Marker([eventid[i]['Latitude'],eventid[i]['Longitude']],\n                    popup=eventid[i]['School Name'],\n                    icon=folium.Icon(color='Red')\n                    ).add_to(m)\n\nm    ","08f508d2":"Safety_df = pd.read_csv(\"..\/input\/ny-2010-2016-school-safety-report\/2010-2016-school-safety-report.csv\")\nSafety_df.tail()","46bfbe73":"Safety_df_filter = Safety_df[['School Year','Latitude', 'Longitude','Major N','Oth N','NoCrim N','Prop N','Vio N']]\nSafety_df_filter = Safety_df_filter[Safety_df_filter['School Year'] == '2015-16']\n\nSafety_df1 = Safety_df_filter[Safety_df_filter['Major N'] > 1.0 ]\nSafety_df2 = Safety_df_filter[Safety_df_filter['Oth N'] > 1.0 ]\nSafety_df3 = Safety_df_filter[Safety_df_filter['NoCrim N'] > 1.0 ]\nSafety_df4 = Safety_df_filter[Safety_df_filter['Prop N'] > 1.0 ]\nSafety_df5 = Safety_df_filter[Safety_df_filter['Vio N'] > 1.0 ]\n\nSafety_df1 = Safety_df1.dropna(axis=0)\nSafety_df2 = Safety_df2.dropna(axis=0)\nSafety_df3 = Safety_df3.dropna(axis=0)\nSafety_df4 = Safety_df4.dropna(axis=0)\nSafety_df5 = Safety_df5.dropna(axis=0)\n\ncount1 = Safety_df1['Major N'].values\ncount2 = Safety_df2['Oth N'].values\ncount3 = Safety_df3['NoCrim N'].values\ncount4 = Safety_df4['Prop N'].values\ncount5 = Safety_df5['Vio N'].values","e655a0ff":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor i in range(0,Safety_df1['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df1.iloc[i]['Latitude'], Safety_df1.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count1[i])*100,\n      color='crimson',\n      fill=True,\n      fill_color='crimson'\n   ).add_to(m)\n\nfor i in range(0,Safety_df2['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df2.iloc[i]['Latitude'], Safety_df2.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count2[i])*100,\n      color='yellow',\n      fill=True,\n      fill_color='yellow'\n   ).add_to(m)\n\nfor i in range(0,Safety_df3['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df3.iloc[i]['Latitude'], Safety_df3.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count3[i])*100,\n      color='purple',\n      fill=True,\n      fill_color='purple'\n   ).add_to(m)\n\nfor i in range(0,Safety_df4['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df4.iloc[i]['Latitude'], Safety_df4.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count4[i])*100,\n      color='green',\n      fill=True,\n      fill_color='green'\n   ).add_to(m)\n\nfor i in range(0,Safety_df5['School Year'].count()):\n   folium.Circle(\n      location=[Safety_df5.iloc[i]['Latitude'], Safety_df5.iloc[i]['Longitude']],\n      #location=[20, 81],\n      radius=int(count5[i])*100,\n      color='blue',\n      fill=True,\n      fill_color='blue'\n   ).add_to(m)\n\nm","2d2f8aca":"medicaid_df = pd.read_csv(\"..\/input\/nyc-medical-assistance-program-medicaid-offices\/medical-assistance-program-medicaid-offices.csv\")\nmedicaid_df","8027bd99":"m = folium.Map(location=[40.75, -74],tiles='stamentoner')\nfor (lat, long, label) in zip(Event_loc_df['Latitude'], Event_loc_df['Longitude'], labels):\n    folium.CircleMarker([lat, long],\n                    radius=5,\n                    color=colors[label],\n                    fill_color=colors[label],\n                   ).add_to(m)\n\nfor (lat, long,name) in zip(medicaid_df['Latitude'], medicaid_df['Longitude'],medicaid_df['Name of Medicaid Offices']):\n    folium.Marker([lat, long],\n                   icon=folium.Icon(color='Red'),\n                   popup= name,\n                    ).add_to(m)\n\nm    ","d8a481a8":"The test is given in late October (8th grade) or early November (9th grade and 8th grade with IEP's, 504 plans, and ELL). <br>\nSource : wikipedia","753c101f":"**Activities I am planning to perform in this kernel **\n--------------------\n**Data Exploration , Feature engineering **\n1. Take a look at the School info data\n1. Find out what we have in school data thru EDA\n1. Take a look at the SHSAT registration data\n1. Find out which column can be used to connect both the datasets\n\n**Modeling , Solution and Identify problems or trend**\n1. Build your model on merged data from School info and Registration data\n1.  Run the model on rest of the school data to find out the schools who may need an assistance for SHSAT exam\n1.  identify the problem or trend and provide solution using below datasets <br>\n    **Library dataset , NYC maths test result dataset , Safety report dataset , Medicaid office dataset**\n\n![](https:\/\/images.fastcompany.net\/image\/upload\/w_1280,f_auto,q_auto,fl_lossy\/wp-cms\/uploads\/2017\/05\/p-1-5-credibility-busting-responses-you-need-to-stop-using.jpg)","f88f9b63":"**Below is the  bar plot  showing the top cities with maximum no of schools **","cfd51341":"**Rating stats of Schools**","81b07a69":"**Solution 3**\n    -----\n* Schools in the vicinity of these crime scenes can think of building their own **SWAT Team **(Teachers of School and other staff together can be part of this team)\n* PASSNYC in collaboration with Tech company can think of developing an **APP  to help Students in moment of crisis**.\n* The moment these students feels unsafe they should be able to send **SOS signals with their coordinates** to the SWAT team if they are within school premises or the Local police if out of the school\n","9388e1ac":"**Total 383 schools are in need and need an improvement on the features we selected in the model for prediction to come close to school with good performance** \n----------------\n**Note : We can use above classification model with different threshold value and can identify schools where you intend to increase the SHSAT participation.**\n\nLets visualize these schools on Folium map (Marked in Red)","394b51f8":"**Lets explore the SHSAT Registration datastet **\n    -----------","142aa23f":"**Around 6% schools are community schools.**","db171118":"**Healthcare Outreach program**\n    ---------\n   Healthcare in USA has seen various revolution in healthcare industr and one of them is Affordable care act or OBAMACARE (famously known) <br>\n   How to make sure Students who hails from a poor family background avails the benfit of CHIP (Children's Health Insurance Program) and different medicaid programs? <br>\n   What is there **for Differently abled students ?** <br> \n   Below is the **exhaustive list of Medicaid offices** around these schools.\n    ","3ae985d4":"**Threshold value selection for SHSAT participation ** <br><br>\nLets build our model on these 21 entries we have and We will decide our threshold value for percent participation in SHSAT and number below which will qualify the schools for helping aid from PSSNYC. <br>\nlets assume 20% participation from the enrolled lot to be threshold value, will use 0 and 1 to be our target value . ","0e7f9cbe":"**No of schools with Highest grade and lowest grades** <br>\nStudents in grades 8 or 9 who wish to apply to New York City\u2019s Specialized High Schools must take the Specialized High School Admissions Test (SHSAT) and <br>\nrank their choices of schools in order of preference.  <br> <br>\nFrom below Bar chart we can see we have around 500 schools with Grade 8 ","eb3c4c88":"**Feature Importance**\n    -------","9b27c597":"Lets see above libraries are near to the Schools we found in Needy category thru our prediction model.","a138eb30":"**Making Schools Safer**\n----------------------","d9d8f1a9":"**Lets use the popular algorithm (Random Forest)**","7b4965b5":"**Distribution of different Races in Community school**","92c836fc":"**Economic Need Assessment** <br>\nLets compare the School income of Community school with private schools and their economic index ","73b39e99":"**Please find details of schools where we can organize these events**\n--------------------","3fde7558":"<b><div  style= \"text-align:center\"> We see very few percentage of students actually make it in Level 4 when they reach Grade 8   <\/div><\/b>\n![](https:\/\/s.hswstatic.com\/gif\/countries-athletes-2.jpg)","9d7a6c1c":"\n**Solution 2**\n---------\nPASSNYC can collaborate with Best tutions institutes who prepare students for SHSAT(normally the fees of these classes is very high) .\nPASSNYC can think of providing subsidy\/Scholarship program in the tution fees to prepare for SHSAT exams.","d574d607":"Registration data alone is not very intuitive and we need to merge this dataset with School data to find the relation between the economic need index and the percent improvement in the SHSAT participation or if this is not enough we will keep adding other columns in our analysis. <br><br>\n**Lets first join both dataset on Location code and DBN **","3ccc7b61":"**Solution 4**\n    -----\n* PASSNYC with help of Teachers of these needy school to regularly councel parents to make them aware of the different state sponsered plans.\n* PASSNYC in collaboration with Tech company can think of developing an **APP  to assist parents in knowing their spending on healthcare costs**.  To **alarm **them when they are **about to run out of CHIP fund**\n* PASSNYC to help parents in acquiring Assistive technologies for differently abled students to continue their life as a normal kid \n > Speech-Recognition software <br>\n > Text-to-Speech software <br>\n > Visual Aids <br>\n > Audio Aids <br>\n > Physical Aids\n","ee5c0322":"**Hover over the marked places to see the labels **","a0188e84":"Lets Analyse the all the features used in Predicting the School in need thru Distplot analysis <br><br>\n**School in Need => marked in Red ** <br>\n**School not in Need => marked in Blue**","69453ca0":"**Classification Model ** <br>\n_______________________","b0b23a61":"**Lets limit our analysis only for Grade 8 student with data from all levels of Maths test**","affd3ace":"Lets Use above model on the full dataset of School and lets identify the schools Who need an attention from PASSNYC","8747c839":"**LIbraries             => Marked in Blue  ** <br>\n**Needy schools => Marked in Red** <br> <br>\n\nWe have a very Interesting finding here. We see most of the Needy schools here are far away from these libraries.  <br>\n\nDoes this warrant any action for PASSNYC to help these schools to have more LIbraries in near area ? <br>\nIs it convenient to set up new Libraries in the vicinity of the schools in need or we have to think of some different approach to attrack the crowd ? <br>\n\n**Solution 1**\n---------\n* We can think of bringing students at distributed location and can arrange fun activities through which we can generate awareness .\n* **Clustering of schools and finding the common locations with help of Data science.**\n     ------------------------------------\n* Invitation to schools with distributed locations.\n* Planning of this Fun event with intereted teachers \n* Survey form to be filled by Parents at the end of fun activities , so that we can use it to quantify the success of this event \n     \n     \n\n**Below is the location finder algorithm ** <br>\n-------------------------\n**(Marked in Red is where we can organize these event and these are not the real location so we will develop one more algorithm to find the Schools which are equidistant from the schools in Clusters)**\n\n","8a8a11c7":"**We see no of students from different grades fall in different levels ** <br>\nLets understand these different levels <br>\n\n**NYS Level 1:** Students performing at this level are well below proficient in standards for their grade. They demonstrate limited knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered insufficient for the expectations at this grade.   <br><br>\n**NYS Level 2:** Students performing at this level are partially proficient in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered partial but insufficient for the expectations at this grade. Students performing at Level 2 are considered on track to meet current New York high school graduation requirements but are not yet proficient on Common Core Learning Standards at this grade. <br><br>\n**NYS Level 3:** Students performing at this level are proficient in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered sufficient for the expectations at this grade. <br><br>\n**NYS Level 4:** Students performing at this level excel in standards for their grade. They demonstrate knowledge, skills, and practices embodied by the New York State P-12 Common Core Learning Standards for Mathematics that are considered more than sufficient for the expectations at this grade<br><br>. ","edc6186f":"The Objective of this notebook would be to assess the needs of students by using publicly available data to quantify the challenges they face in taking the SHSAT. <br>\nAnd I will try to provide hint or solution to tackle this problem by importing 2 or more datasets <br><br>\nBelow are the datasets available to us and I have added couple of more datasets for additional insights ","1b6a3a13":"**Statistics showing overall Students taking tests in different grades**\n      -----\n **I am going to keep bin size 5 to identify the different ranges to categorize schools as small size mid size large size **","547b639a":"**Feature engineering** ","7e72f3fd":"**To Measure the Success rate of students taking SHSAT exam I have introduced below Columns in above Dataframe and we will use Column Reg_idx_ here for our modeling** <br>\n--------------------\n**Reg_idx = Registration Index** <br>\n\nRegistration_df[\"percent1\"] = Registration_df[\"Number of students who took the SHSAT\"]\/Registration_df[\"Number of students who registered for the SHSAT\"] <br>\nRegistration_df[\"percent2\"] = Registration_df[\"Number of students who registered for the SHSAT\"]\/Registration_df[\"Enrollment on 10\/31\"] <br>\nRegistration_df[\"Reg_idx\"] = Registration_df[\"percent1\"]*Registration_df[\"percent2\"] <br>","a3aeffd7":"Under Construction","7517d284":"We can drop the features which wont contribute much for the prediction.","fea401c3":"**Bubble plot showing Schools with SHSAT participation**  <br>\nI have used Economic index here on X axis just for demonstration purpose","92b4ca72":"**Lets keep only data from 8th Grade**","7fcf8cbc":"**Below is the Final dataframe with the schools marked as '1' and '0' ** <br><br>\n\n**'0' -> Need helping aid from PASSNYC **<br>\n**'1' -> No need of helping aid from PASSNYC **<br>","db2713b5":"**Overall stats of schools in need **","d053ffd8":"**from Continuous to categorical**\n    ------\nwhere <br>\n1 depicts school with strength between 0 to 50 students in different grades <br>\n2 depicts school with strength between 50 to 100 students in different grades <br>\n3 depicts school with strength between 100 to 150 students in different grades <br>\n4 depicts school with strength between 150 to 200 students in different grades <br>\n5 depicts school with strength more than 200 in different grades <br>\n0 depicts school with 0 students in different grade\n","32e5a0eb":"**Fostering the love of reading and Learning  and data science solution : Location finder**\n-------------------------\n\nFew things are crystal clear that we have to Educate all elementary and middle schoolers well and you will naturally have higher representation from the Black and Hispanic community.\nEfforts need to be employed to improve the elementary and middle schools in more districts so that more African American and Hispanic children can succeed at the SHSAT <br>\n\n**Next public data set i have added here is 'nyc-queens-library-branches' ** <br> <br>\nLets try to answer below question thru this dataset <br>\nCan we help these students by locating nearby public libraries or PASSNYC can think of collabarating with these public libraries to generate interest in students to use them the most? or Do we need to install Libraries in the vicinity of these school","e8649a49":"**Feature Engineering ** <br>\n          ----------\nWe have test results data for Grade 3 to Grade 8 but the number of students taking those tests and no of students falling in level 4 in ELA and Maths in this dataset will not be useful in prediction. They should be expressed in percentage for fare comparison between the schools and will be useful Precition model <br><br>\nNote: Click on the code below to view the feature engineering part ","03c19379":"**We see Schools in less number as SHSAT participation index increase.** <br>\n**and Our goal is to bring more schools in upper half of the bubble plot**\n----------","a88b1818":"**Selection of important features for our prediction model**","cc52058d":"Lets first explore the School info dataset to know more about the schools before we link them to Specialized High School Test dataset","ec5035df":"**So we have total 21 rows to work on** ","bad3b21e":"**Schools showing  improvement over the years in making students take the SHSAT exam from the enrolled lot** (expressed in Percentage)","822cef0f":"Computation skills plays pivotol role in making the student ready to take SHSAT exam and above analysis reiterates the same thing<br>\n Average ELA and Maths Proficiency is something manages to grab the eyeball . Schools in need does have to do better in ELA and Maths and Teachers need to pay attention to these areas<br>\nNo of black and hispanic students presence in Level 4 (for Maths and ELA) does make the difference.\n\n**Identifying the target audience**\n-------------------------------\nThe School database has more than 100 columns listing no of students with 4s in ELA and Maths for grade 3 to 8 <br> \nIn order to make the comparison easy I have imported Math test result of students from NYC dataset to draw some meaningful insights which may help us in targeting needy lot ","3097a356":"**Percent students  who registered for the SHSAT from Enrolled lot** (Yearwise data)","a4db8fba":"**I have shown all the crime related incidents with their number of occurence for Year 2015-2016**\n----------------------------------------------------------------------------------\n\n**number of major crimes => Crimson**  <br>\n**number of other crimes => Yellow** <br>\n**number of non-criminal crimes => Purple** <br>\n**number of property crimes => Green** <br>\n**number of violent crimes => Blue **","088d908a":"**Asians and Whites are comparatively better in Maths than the rest . Using above stats we can Target specific audience for preparation SHSAT.** <br>\n**We see most of the Black and Hispanic students fall in Grade 1 and Grade 2 and the major task would be to increase their number in Grade 3 and grade 4** <br><br>\n**Questions and challenges** <br>\n1) how do we empower them with all the necessary things which they miss at the early age to prepare for ELA and Maths exam<br>\n2) Do we only have to focus when they enter 8th grade or we need to start very early to stregthen the foundation to have them well equipped with skills to compete in future. <br>\n3) Economically underpriviledged sutdents do have to face many challenges in their early age and  it does make them <br>\n> miss the school > which impacts their school attendance <br>\n> and are left with less time to study and practice > which impacts their score \n\n","92047268":"**Distribution of different Races in Non-Community school**","3823b33d":"No wonder Economic need index is inversely proportional to School income for both Community school and Non Community school. You can see Community school's income do not go beyond 40k  to 50k dollar.","299e730a":"Need more comparison based on highest grades school has ? Lets go for 3d scatter plot","719e4be3":"We have students from different Race and different grades and data from Year 2013 to 2015 , Lets try to visualize them in one go. <br><br>\n\n**% Level 4 : percent student from different category**\n","d71dde9f":"**Hover over the marked places to see the labels **","d914133c":"**Percent students  who took SHSAT from the  registered  lot** (Yearwise data)"}}