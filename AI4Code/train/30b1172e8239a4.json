{"cell_type":{"55300322":"code","81c0e8cd":"code","b3f945da":"code","64eaac41":"code","56ef7c12":"code","9b5a6bd4":"code","4b321e07":"code","934a9240":"code","4eb334bc":"code","fd3ed7ed":"code","fbe0bb3a":"code","fe41afa6":"code","8fec4aa9":"code","2e036840":"code","93eb3956":"code","5ff8ab6b":"code","f1276dbb":"code","80a3f683":"code","cdc5a983":"code","0aaf560b":"code","c673d877":"code","2d181ecd":"code","d9274959":"code","c51baf9f":"code","cf33c105":"code","9790d40a":"code","d4149d68":"code","98213aef":"code","2b7deee5":"code","b52e641b":"code","2445efb7":"code","269956ab":"code","b302577b":"code","f1e38158":"code","1ca805c9":"code","13eb7c2e":"code","68153226":"code","d38474dd":"code","ca29769a":"code","f2926568":"markdown","84336332":"markdown","a9a1ad50":"markdown","9d1d208c":"markdown","5c1a550c":"markdown","4fd753e6":"markdown","f1d5e980":"markdown"},"source":{"55300322":"\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","81c0e8cd":"train_df = pd.read_csv('..\/input\/data.csv')","b3f945da":"train_df.head()","64eaac41":"train_df=train_df.drop(['Unnamed: 32'],axis=1)","56ef7c12":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder = LabelEncoder()\ntrain_df.diagnosis = labelEncoder.fit_transform(train_df.diagnosis)\ntrain_df.head()","9b5a6bd4":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'symmetry_se', bins=20)","4b321e07":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'symmetry_mean', bins=20)","934a9240":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'radius_mean', bins=20)","4eb334bc":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'radius_worst', bins=20)","fd3ed7ed":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'radius_se', bins=20)","fbe0bb3a":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'fractal_dimension_worst', bins=20)","fe41afa6":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'fractal_dimension_se', bins=20)","8fec4aa9":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'area_mean', bins=20)","2e036840":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'area_worst', bins=20)","93eb3956":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'area_se', bins=20)","5ff8ab6b":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'texture_mean', bins=20)","f1276dbb":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'texture_worst', bins=20)","80a3f683":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'texture_se', bins=20)","cdc5a983":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'perimeter_mean', bins=20)","0aaf560b":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'perimeter_worst', bins=20)","c673d877":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'perimeter_se', bins=20)","2d181ecd":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'smoothness_mean', bins=20)","d9274959":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'smoothness_worst', bins=20)","c51baf9f":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'smoothness_se', bins=20)","cf33c105":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'compactness_mean', bins=20)","9790d40a":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'compactness_worst', bins=20)","d4149d68":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'compactness_se', bins=20)","98213aef":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concavity_mean', bins=20)","2b7deee5":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concavity_worst', bins=20)","b52e641b":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concavity_se', bins=20)","2445efb7":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concave points_mean', bins=20)","269956ab":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concave points_worst', bins=20)","b302577b":"g = sns.FacetGrid( train_df, col='diagnosis')\ng.map(plt.hist, 'concave points_se', bins=20)","f1e38158":"train_df=train_df.drop(\n['id',\n  \n 'symmetry_se',\n 'smoothness_mean',\n 'radius_se',\n 'compactness_se',\n 'symmetry_mean',\n 'concavity_se',\n 'smoothness_worst',\n 'smoothness_se',\n 'fractal_dimension_se',\n 'texture_se',\n  ],axis=1)\n\n","1ca805c9":"train_df.head()","13eb7c2e":"classe = train_df['diagnosis']\natributos = train_df.drop('diagnosis', axis=1)\natributos.head()","68153226":"from sklearn.model_selection import train_test_split\natributos_train, atributos_test, class_train, class_test = train_test_split(atributos, classe, test_size = 0.25 )\n\natributos_train.describe()","d38474dd":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(criterion='entropy', splitter='best', max_depth=3, random_state =0)\nmodel = dtree.fit(atributos_train, class_train)","ca29769a":"from sklearn.metrics import accuracy_score\nclasse_pred = model.predict(atributos_test)\nacc = accuracy_score(class_test, classe_pred)\nprint(\"My Decision Tree acc is {}\".format(acc))","f2926568":"<h1>Analises dos Gr\u00e1ficos<\/h1>","84336332":"<h1>Resultado<\/h1>","a9a1ad50":"<h1>Excluindo as colunas inutilizaveis<\/h1>","9d1d208c":"<h1>Visualizando os dados<\/h1>","5c1a550c":"<h1>Preparando Arvore<\/h1>","4fd753e6":"<h1>Carregando arquivo de dados<\/h1>","f1d5e980":"<h1>Converter string numero:<\/h1>\n"}}