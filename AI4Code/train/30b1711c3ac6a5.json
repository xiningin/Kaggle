{"cell_type":{"a1157491":"code","4f7ae82d":"code","9d6bdd1f":"code","d56e825a":"code","73623783":"code","dd6bdbb2":"code","87e6dc6d":"code","0ecaf4d9":"code","ca285167":"code","ced52d2b":"code","8bd018cb":"code","6e38bfc8":"code","c0136d73":"code","bba8ca22":"code","da96bae6":"code","2712c292":"code","f626e6de":"code","310dc5b3":"code","5e040755":"code","e661839f":"code","03f29917":"code","53ace07d":"code","95e4b1af":"markdown"},"source":{"a1157491":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f7ae82d":"# Importing the library \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import PowerTransformer\nimport scipy.stats as stats\nimport statsmodels.api as sm\nfrom sklearn.metrics import r2_score,mean_squared_error","9d6bdd1f":"# Loading the data \n\ndf=pd.read_csv(\"\/kaggle\/input\/yeh-concret-data\/Concrete_Data_Yeh.csv\")\ndf.head()","d56e825a":"# Checking th information \n\ndf.info()","73623783":"# Checking for the missing values \n\ndf.isnull().sum()","dd6bdbb2":"# Checking the distibution of data\n\nsns.pairplot(df,diag_kind=\"kde\")\nplt.show()","87e6dc6d":"sns.heatmap(df.corr(),annot=True)\nplt.show()","0ecaf4d9":"df.skew()","ca285167":"df1=df.drop(\"csMPa\",axis=1)","ced52d2b":"# Correcting the skewness\n\npt=PowerTransformer()\ndf3=pt.fit_transform(df1)","8bd018cb":"df4=pd.DataFrame(df3,columns=['cement', 'slag', 'flyash', 'water', 'superplasticizer',\n       'coarseaggregate', 'fineaggregate', 'age'])\ndf4.head()","6e38bfc8":"df4.skew()","c0136d73":"x=df4\ny=df[\"csMPa\"]","bba8ca22":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=0)","da96bae6":"# Base OLS model\n\nxc=sm.add_constant(x)\nols=sm.OLS(y,xc)\nols_mod=ols.fit()\nols_mod.summary()","2712c292":"# Linear Model\n\nlr=LinearRegression()\nlr.fit(xtrain,ytrain)","f626e6de":"print(\"Training Score :\", lr.score(xtrain,ytrain))\nprint(\"Testing Score :\", lr.score(xtest,ytest))","310dc5b3":"# Ridge model\n\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.model_selection import GridSearchCV\n\n\nrid=Ridge()\nparam={'alpha':[0.000001,0.00001,0.0001,0.01,0.1,0.5,1,3,5,10,15,100]}\ngrid=GridSearchCV(rid,param_grid=param,cv=5,scoring=\"r2\")\nhyp_rid=grid.fit(xtrain,ytrain)\nhyp_rid.best_params_","5e040755":"rid5=Ridge(alpha=5)\nrid5.fit(xtrain,ytrain)\n\nprint(\"Training Score :\", rid5.score(xtrain,ytrain))\nprint(\"Testing Score :\", rid5.score(xtest,ytest))","e661839f":"# lasso Model\n\nlas=Lasso()\nparam={'alpha':[0.000001,0.00001,0.0001,0.01,0.1,0.5,1,3,5,10,15,100]}\ngrid=GridSearchCV(rid,param_grid=param,cv=5,scoring=\"r2\")\nhyp_las=grid.fit(xtrain,ytrain)\nhyp_las.best_params_","03f29917":"las5=Lasso(alpha=5)\nlas5.fit(xtrain,ytrain)\n\nprint(\"Training Score :\", las5.score(xtrain,ytrain))\nprint(\"Testing Score :\", las5.score(xtest,ytest))","53ace07d":"# XGB Model\n\n\nfrom xgboost import XGBRegressor\n\nxgb=XGBRegressor()\nxgb.fit(xtrain,ytrain)\n\n\nprint(\"Training Score :\", xgb.score(xtrain,ytrain))\nprint(\"Testing Score :\", xgb.score(xtest,ytest))","95e4b1af":"There are no missing values in the dataset. "}}