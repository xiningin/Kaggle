{"cell_type":{"6b61d620":"code","498ae3f3":"code","6addd837":"code","1f4fe075":"code","523385b0":"code","d0ae5175":"code","9034e1e9":"code","3545e5d6":"code","483348c0":"code","16e9a938":"code","27d009aa":"code","00bdd19f":"code","0cb62f8e":"code","66ba8fe4":"code","8d00a99b":"code","683b040b":"code","bf3cc7fb":"code","bdd95667":"code","ba4a7a60":"code","cc8ef867":"code","cce0fd6f":"code","6b77fc72":"code","de5245f9":"code","00314571":"code","59c6ec93":"code","33a4835c":"code","08dfcd36":"code","0e997108":"code","2e25f259":"markdown","7362c6b6":"markdown","c7c002ce":"markdown","a67ac560":"markdown","f81b89cf":"markdown","dec75108":"markdown","6c0ae8a6":"markdown","b59ff5df":"markdown","ec2a37a6":"markdown","cc1b337f":"markdown","a5fc8222":"markdown","dba1bf12":"markdown","c468ca92":"markdown","750100c2":"markdown","4a2a6fb0":"markdown","87a403e0":"markdown","faf6f709":"markdown"},"source":{"6b61d620":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pylab as plt\nimport pydicom\nimport os\nfrom os import listdir\nfrom os.path import isfile, join\n# print(os.listdir(\"..\/input\"))","498ae3f3":"# Images Example\ntrain_images_dir = '..\/input\/stage_1_train_images\/'\ntrain_images = [f for f in listdir(train_images_dir) if isfile(join(train_images_dir, f))]\ntest_images_dir = '..\/input\/stage_1_test_images\/'\ntest_images = [f for f in listdir(test_images_dir) if isfile(join(test_images_dir, f))]\nprint('5 Training images', train_images[:5]) # Print the first 5","6addd837":"print('Number of train images:', len(train_images))\nprint('Number of test images:', len(test_images))","1f4fe075":"plt.style.use('default')\nfig=plt.figure(figsize=(20, 10))\ncolumns = 8; rows = 4\nfor i in range(1, columns*rows +1):\n    ds = pydicom.dcmread(train_images_dir + train_images[i])\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    fig.add_subplot","523385b0":"train_labels = pd.read_csv('..\/input\/stage_1_train_labels.csv')\ntrain_labels.head()","d0ae5175":"# Number of positive targets\nprint(round((8964 \/ (8964 + 20025)) * 100, 2), '% of the examples are positive')\npd.DataFrame(train_labels.groupby('Target')['patientId'].count())","9034e1e9":"# Distribution of Target in Training Set\nplt.style.use('ggplot')\nplot = train_labels.groupby('Target') \\\n    .count()['patientId'] \\\n    .plot(kind='bar', figsize=(10,4), rot=0)","3545e5d6":"plt.style.use('ggplot')\ntrain_labels['area'] = train_labels['width'] * train_labels['height']\nplot = train_labels['area'].plot(kind='hist',\n                          figsize=(10,4),\n                          bins=20,\n                          title='Distribution of Area within Image idenfitying a positive target')","483348c0":"# Forked from `https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis`\ndef parse_data(df):\n    \"\"\"\n    Method to read a CSV file (Pandas dataframe) and parse the \n    data into the following nested dictionary:\n\n      parsed = {\n        \n        'patientId-00': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        },\n        'patientId-01': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        }, ...\n\n      }\n\n    \"\"\"\n    # --- Define lambda to extract coords in list [y, x, height, width]\n    extract_box = lambda row: [row['y'], row['x'], row['height'], row['width']]\n\n    parsed = {}\n    for n, row in df.iterrows():\n        # --- Initialize patient entry into parsed \n        pid = row['patientId']\n        if pid not in parsed:\n            parsed[pid] = {\n                'dicom': '..\/input\/stage_1_train_images\/%s.dcm' % pid,\n                'label': row['Target'],\n                'boxes': []}\n\n        # --- Add box if opacity is present\n        if parsed[pid]['label'] == 1:\n            parsed[pid]['boxes'].append(extract_box(row))\n\n    return parsed\n\nparsed = parse_data(train_labels)\n\ndef draw(data):\n    \"\"\"\n    Method to draw single patient with bounding box(es) if present \n\n    \"\"\"\n    # --- Open DICOM file\n    d = pydicom.read_file(data['dicom'])\n    im = d.pixel_array\n\n    # --- Convert from single-channel grayscale to 3-channel RGB\n    im = np.stack([im] * 3, axis=2)\n\n    # --- Add boxes with random color if present\n    for box in data['boxes']:\n        #rgb = np.floor(np.random.rand(3) * 256).astype('int')\n        rgb = [255, 251, 204] # Just use yellow\n        im = overlay_box(im=im, box=box, rgb=rgb, stroke=15)\n\n    plt.imshow(im, cmap=plt.cm.gist_gray)\n    plt.axis('off')\n\ndef overlay_box(im, box, rgb, stroke=2):\n    \"\"\"\n    Method to overlay single box on image\n\n    \"\"\"\n    # --- Convert coordinates to integers\n    box = [int(b) for b in box]\n    \n    # --- Extract coordinates\n    y1, x1, height, width = box\n    y2 = y1 + height\n    x2 = x1 + width\n\n    im[y1:y1 + stroke, x1:x2] = rgb\n    im[y2:y2 + stroke, x1:x2] = rgb\n    im[y1:y2, x1:x1 + stroke] = rgb\n    im[y1:y2, x2:x2 + stroke] = rgb\n\n    return im","16e9a938":"plt.style.use('default')\nfig=plt.figure(figsize=(20, 10))\ncolumns = 8; rows = 4\nfor i in range(1, columns*rows +1):\n    fig.add_subplot(rows, columns, i)\n    draw(parsed[train_labels['patientId'].unique()[i]])\n    fig.add_subplot","27d009aa":"fig=plt.figure(figsize=(20, 10))\ndraw(parsed[train_labels['patientId'].loc[20]])\nplt.show()\nfig=plt.figure(figsize=(20, 10))\ndraw(parsed[train_labels['patientId'].loc[10]])\nplt.show()","00bdd19f":"detailed_class_info = pd.read_csv('..\/input\/stage_1_detailed_class_info.csv')\ndetailed_class_info.groupby('class').count()","0cb62f8e":"plt.style.use('ggplot')\nplot = detailed_class_info.groupby('class').count().plot(kind='bar',\n                                                  rot=0,\n                                                  title='Count of Class Labels',\n                                                  figsize=(10,4))","66ba8fe4":"count_labels_per_patient = detailed_class_info.groupby('patientId').count()","8d00a99b":"opacity = detailed_class_info \\\n    .loc[detailed_class_info['class'] == 'Lung Opacity'] \\\n    .reset_index()\nnot_normal = detailed_class_info \\\n    .loc[detailed_class_info['class'] == 'No Lung Opacity \/ Not Normal'] \\\n    .reset_index()\nnormal = detailed_class_info \\\n    .loc[detailed_class_info['class'] == 'Normal'] \\\n    .reset_index()","683b040b":"plt.style.use('default')\nfig=plt.figure(figsize=(20, 10))\ncolumns = 8; rows = 4\nfor i in range(1, columns*rows +1):\n    fig.add_subplot(rows, columns, i)\n    draw(parsed[opacity['patientId'].unique()[i]])","bf3cc7fb":"plt.style.use('default')\nfig=plt.figure(figsize=(20, 10))\ncolumns = 8; rows = 4\nfor i in range(1, columns*rows +1):\n    fig.add_subplot(rows, columns, i)\n    draw(parsed[not_normal['patientId'].loc[i]])","bdd95667":"plt.style.use('default')\nfig=plt.figure(figsize=(20, 10))\ncolumns = 8; rows = 4\nfor i in range(1, columns*rows +1):\n    fig.add_subplot(rows, columns, i)\n    draw(parsed[normal['patientId'].loc[i]])","ba4a7a60":"fig=plt.figure(figsize=(20, 10))\ncolumns = 3; rows = 1\nfig.add_subplot(rows, columns, 1).set_title(\"Normal\", fontsize=30)\ndraw(parsed[normal['patientId'].unique()[0]])\nfig.add_subplot(rows, columns, 2).set_title(\"Not Normal\", fontsize=30)\n# ax2.set_title(\"Not Normal\", fontsize=30)\ndraw(parsed[not_normal['patientId'].unique()[0]])\nfig.add_subplot(rows, columns, 3).set_title(\"Opacity\", fontsize=30)\n# ax3.set_title(\"Opacity\", fontsize=30)\ndraw(parsed[opacity['patientId'].unique()[0]])","cc8ef867":"fig=plt.figure(figsize=(20, 10))\ncolumns = 3; rows = 1\nfig.add_subplot(rows, columns, 1).set_title(\"Normal\", fontsize=30)\ndraw(parsed[normal['patientId'].unique()[1]])\nfig.add_subplot(rows, columns, 2).set_title(\"Not Normal\", fontsize=30)\n# ax2.set_title(\"Not Normal\", fontsize=30)\ndraw(parsed[not_normal['patientId'].unique()[1]])\nfig.add_subplot(rows, columns, 3).set_title(\"Opacity\", fontsize=30)\n# ax3.set_title(\"Opacity\", fontsize=30)\ndraw(parsed[opacity['patientId'].unique()[1]])","cce0fd6f":"fig=plt.figure(figsize=(20, 10))\ncolumns = 3; rows = 1\nfig.add_subplot(rows, columns, 1).set_title(\"Normal\", fontsize=30)\ndraw(parsed[normal['patientId'].unique()[2]])\nfig.add_subplot(rows, columns, 2).set_title(\"Not Normal\", fontsize=30)\n# ax2.set_title(\"Not Normal\", fontsize=30)\ndraw(parsed[not_normal['patientId'].unique()[2]])\nfig.add_subplot(rows, columns, 3).set_title(\"Opacity\", fontsize=30)\n# ax3.set_title(\"Opacity\", fontsize=30)\ndraw(parsed[opacity['patientId'].unique()[2]])","6b77fc72":"count_labels_per_patient.reset_index().groupby('class').count()","de5245f9":"# Patients with 4 Labels\ncount_labels_per_patient.sort_values('class', ascending=False).head()","00314571":"detailed_class_info.loc[detailed_class_info['patientId'] == '7d674c82-5501-4730-92c5-d241fd6911e7']","59c6ec93":"fig=plt.figure(figsize=(20, 10))\nplt.suptitle('\"Lung Opacity\" Example', fontsize=16)\ndraw(parsed['7d674c82-5501-4730-92c5-d241fd6911e7'])","33a4835c":"not_normal = detailed_class_info.loc[detailed_class_info['class'] == 'No Lung Opacity \/ Not Normal']\nnot_normal_example = not_normal['patientId']\nfig=plt.figure(figsize=(20, 10))\nplt.suptitle('\"No Lung Opacity \/ Not Normal\" Example', fontsize=16)\ndraw(parsed['019e035e-2f82-4c66-a198-57422a27925f'])","08dfcd36":"fig=plt.figure(figsize=(20, 10))\nplt.suptitle('\"Normal\" Example', fontsize=16)\ndraw(parsed['003d8fa0-6bf1-40ed-b54c-ac657f8495c5'])","0e997108":"pd.read_csv('..\/input\/stage_1_sample_submission.csv').head()","2e25f259":"## A closer look at a Positive and Negative Example","7362c6b6":"## **Normal** Examples","c7c002ce":"## Data Overview\n### Stage 1 Images - `stage_1_train_images.zip` and `stage_1_test_images.zip`\n- images for the current stage. Filenames are also patient names.\n\n### Stage 1 Labels - `stage_1_train_labels.csv` and Stage 1 Sample Submission `stage_1_sample_submission.csv`\n- Which provides the IDs for the test set, as well as a sample of what your submission should look like\n\n### Stage 1 Detailed Info - `stage_1_detailed_class_info.csv`\n- contains detailed information about the positive and negative classes in the training set, and may be used to build more nuanced models.","a67ac560":"## ** No Lung Opacity \/ Not Normal** Examples","f81b89cf":"## ** Lung Opacity** Examples","dec75108":"# What does the submission look like?","6c0ae8a6":"# Plotting Boxes around Images\nThanks for plotting functions from @peterchang77 `https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis` !!!","b59ff5df":"## Distribution of Positive Labels","ec2a37a6":"# Number of Labels Per Patientid\npatients have 0-4 labels, patients can have multiple labels.\n(Only including ones with at least on label)","cc1b337f":"# Side By Side Compare of Opacity\/Not Normal\/Normal","a5fc8222":"# EDA of Detailed Class Info","dba1bf12":"## Look at labels in `stage_1_train_labels.csv`","c468ca92":"# Images of Each Label Type","750100c2":"# Closer Look of Each Type","4a2a6fb0":"# Pneumonia Detection Competition\n## Data Exploration\nWhat is pneumonia?\n\"Chest X-rays are currently the best available method for diagnosing pneumonia, playing a crucial role in clinical care and epidemiological studies. Pneumonia is responsible for more than 1 million hospitalizations and 50,000 deaths per year in the US alone.\" - [Link to Stanford ML Group Paper](https:\/\/stanfordmlgroup.github.io\/projects\/chexnet\/)\n\n<img src=\"https:\/\/www.mayoclinic.org\/-\/media\/671275b4a4e64a868f06eb8b18b002fa.jpg\" alt=\"drawing\" width=\"350\"\/>","87a403e0":"## Plot a few training images from `stage_1_train_images.zip`","faf6f709":"## Size of the impacted area\nWe can make a new feature called \"area\" to the train labels data to see what the distribution of areas label look like."}}