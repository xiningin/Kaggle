{"cell_type":{"5d336de3":"code","c9df1fe2":"code","68ba05fe":"code","c7104bdd":"code","5949071d":"code","5f9245f7":"code","e31b1083":"code","f9b92abb":"code","5bd326b0":"code","142135a5":"code","6aa44329":"code","bde022f3":"code","e781a99a":"code","08a98fc4":"code","636a61c9":"code","aab6bf13":"code","ac14f895":"code","a604205b":"code","b8f4d32b":"code","952b037d":"code","8aee78f2":"code","d5ad5d03":"markdown","a20cf23d":"markdown"},"source":{"5d336de3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","c9df1fe2":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","68ba05fe":"adversarial_features = [\"TransactionDT\", \"id_31\", \"D15\", \"id_13\", \"D11\", \"D4\", \"D10\", \"TransactionAmt\", \"V75\", \n                        \"dist1\", \"addr1\", \"D13\", \"D2\", \"id_01\", \"C13\", \"C9\", \"C11\", \"C12\", \"D1\", \"C14\", \"D2\", \"id_02\", \"C6\", \"id_30\",\n                        \"D5\", \"D6\", \"D14\", \"C2\", \"id_20\",\"DeviceInfo\"]\ntrain = train.drop(adversarial_features, axis = 1)\ntest = test.drop(adversarial_features, axis = 1)","c7104bdd":"train.shape\n","5949071d":"test.shape","5f9245f7":"features = test.columns","e31b1083":"train = train[features]","f9b92abb":"train['target'] = 0\ntest['target'] = 1","5bd326b0":"# for col in test:\n#     if (test[col].dtype == \"object\") or (\"id\" in col):\n#         print(col, train[col].nunique())\n#         diffs = list(set(train[col].unique()).difference(set(test[col].unique())))\n#         train.loc[train[col].isin(diffs) , col] = train[col].unique()[0]\n#         test.loc[test[col].isin(diffs) , col] = train[col].unique()[0]","142135a5":"train_test = pd.concat([train, test], axis =0)\ntarget = train_test['target'].values","6aa44329":"object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","bde022f3":"del train, test","e781a99a":"gc.collect()","08a98fc4":"# Label Encoding\nfor f in train_test.columns:\n    if train_test[f].dtype=='object' or train_test[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(train_test[f].values) + list(train_test[f].values))\n        train_test[f] = lbl.transform(list(train_test[f].values))\n","636a61c9":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","aab6bf13":"del train_test\ngc.collect()","ac14f895":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","a604205b":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","b8f4d32b":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.75,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.75 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","952b037d":"num_round = 100\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","8aee78f2":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","d5ad5d03":"I thought it would be worth a shot to try to drop the features that showed up as high importance in @Bojan's https:\/\/www.kaggle.com\/tunguz\/adversarial-ieee kernel and a few others that were categorical looking with very low overlap. ","a20cf23d":"After dropping these features we are able to take the AUC down from .999x to .80ish. Trying to apply this to the actual training for fraud detection does not yield a boost but it does put the validation numbers closer to leaderboard. There is likely some additional cleaning and manipulation required. "}}