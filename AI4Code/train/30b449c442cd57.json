{"cell_type":{"d026d781":"code","9bfe38ee":"code","9135dac8":"code","16c5bb49":"code","e1f233ef":"code","f0f12d32":"code","7b573ff9":"code","fa882d29":"code","f3969a59":"code","d105006b":"code","49a52ca7":"code","2ebc9ec4":"code","a9ec1335":"code","1c6c4f43":"code","a37e9865":"code","e4d26466":"code","ecbd45ef":"code","c1082893":"code","f034cbc0":"code","853cbbe0":"code","282da247":"code","865cdcaa":"code","8cbe76cf":"code","238ec3c8":"code","88a5e80e":"code","d224f906":"code","aff932e0":"markdown","4f7a1fc3":"markdown","8d33fe19":"markdown","9e7ec2d6":"markdown","f1329214":"markdown","2a4cb999":"markdown","2d224723":"markdown","96589117":"markdown","20b9a442":"markdown","a7be56a6":"markdown","f38c2457":"markdown","622b373b":"markdown","b3324901":"markdown","b4d3eaed":"markdown","fd0ea020":"markdown","45213890":"markdown","c2226e2b":"markdown","bcdbff1f":"markdown","36f4b003":"markdown","ff451cca":"markdown","f2d0fa3a":"markdown","30aaeaca":"markdown","afd2a254":"markdown","924c2fae":"markdown","497ecca3":"markdown","b5a459a7":"markdown","6801dfe1":"markdown","73a2510b":"markdown","19b8b489":"markdown","cc2a39da":"markdown","d832864e":"markdown","7097a357":"markdown"},"source":{"d026d781":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#SQL Data processing\nimport os\nimport sqlite3\nimport re \nimport time\nimport urllib.request, urllib.parse, urllib.error\nimport zlib\n#Plot\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#text analysis\nimport string, os, random\nfrom wordcloud import WordCloud\nfrom textblob import TextBlob \nimport calendar","9bfe38ee":"fname = '..\/input\/negriniwhats\/WhatsApp.txt'\nstr_data = open(fname, encoding = 'utf8')\nconn = sqlite3.connect('data.sqlite')\ncur = conn.cursor()\n\ncur.execute('''DROP TABLE IF EXISTS Messages ''')\ncur.execute('''DROP TABLE IF EXISTS Senders ''')\n\ncur.execute('''CREATE TABLE IF NOT EXISTS Messages (\n    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    msgdate TEXT, \n    subject TEXT,\n    sender_id INTEGER\n    )''')\n    \ncur.execute('''CREATE TABLE IF NOT EXISTS Senders (\n    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    sender   TEXT UNIQUE\n    )''')\n\n# Pick up where we left off\nstart = None\ncur.execute('SELECT max(id) FROM Messages' )\ntry:\n    row = cur.fetchone()\n    if row is None :\n        start = 0\n    else:\n        start = row[0]\nexcept:\n    start = 0\n        \ndef convert24(str1): \n      \n    # Checking if last two elements of time \n    # is AM and first two elements are 12 \n    if str1[-2:] == \"am\" and str1[:2] == \"12\": \n        return \"00\" + str1[2:-2] \n          \n    # remove the AM     \n    elif str1[-2:] == \"am\": \n        return str1[:-2] \n      \n    # Checking if last two elements of time \n    # is PM and first two elements are 12    \n    elif str1[-2:] == \"pm\" and str1[:2] == \"12\": \n        return str1[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove PM\n        hour = re.findall('([0-9]*):',str1) \n        return str(int(hour[0]) + 12) + str1[1:4] \n  \nsent_at = None\nsubject = None\nsender = None\ntime = None\n\nfor line in str_data:\n    line = line.lower()\n    \n    try:\n        finddate = re.findall('[0-9]{2}\/[0-9]{2}\/[0-9]{4}',line)\n        MDY = finddate[0].split('\/')\n        DD = MDY[0]\n        MM = MDY[1]\n        YYYY = MDY[2]\n        date = finddate[0]\n    except: continue\n\n    try:\n        findtime = re.findall(', ([0-9]*:[0-9]{2} [ap]*m)',line)\n        time = (convert24(findtime[0]))\n    except: continue\n    msgdate = YYYY + '-' + MM + '-' + DD + ' ' + time\n    \n    try:\n        findmsg=re.findall(': (.*)',line)\n        subject = findmsg[0]\n    except: continue\n\n    try:\n        findsender = re.findall('- (.*?):',line)\n        sender = findsender[0]\n    except: continue\n\n    cur.execute('''INSERT OR IGNORE INTO Senders (sender)\n        VALUES ( ? )''', ( sender, ) )\n        \n    cur.execute('SELECT id FROM Senders WHERE sender = ? ', (sender, ))\n    sender_id = cur.fetchone()[0]\n            \n    cur.execute('''INSERT OR IGNORE INTO Messages (id, msgdate,  subject, sender_id)\n            VALUES ( ?, ?, ?, ? )''', (start, msgdate, subject, sender_id))\n\nconn.commit()\ncur.close()","9135dac8":"#Connect to SQL databse\nconn = sqlite3.connect('data.sqlite')\ncur = conn.cursor()\n#SQL command to select sender ID, Name from Table Senders and create a Dictionary\ncur.execute('SELECT id, sender FROM Senders')\nsenders = dict()\n#The What's group actually only contains four integrants and 5 are listed\n#Due to phone number change, we need to merge both ID's 8 and 5155\nfor sender_row in cur :\n    if sender_row[0] == 8:\n        user = 5155\n    else:\n        user = sender_row[0]\n    senders[user] = sender_row[1]\n#SQL command to select sender ID, sender_ID, date and message and create a Dictionary with these values\ncur.execute('SELECT id, sender_id,msgdate, subject FROM Messages')\nmessages = dict()\nfor message_row in cur :\n    if message_row[1] == 8:\n        user = 5155\n    else:\n        user = message_row[1]\n    messages[message_row[0]] = (user,message_row[2],message_row[3])\n\nprint(\"Loaded messages: \",len(messages),\"senders: \",len(senders))\nprint(\"Message Example: \\nSender ID: %i \\nDate: %s \\nMessage: %s\"%(messages[15][0],messages[15][1],messages[15][2]))","16c5bb49":"#Now we organise a dictionary with the dates\n#Each user has a count for the month\ncounts = dict()\nmonths = list()\nsendcounts = dict()\n\nfor (message_id, message) in list(messages.items()):\n    sender = message[0]\n    #if sender not already in dict it adds\n    sendcounts[sender] = sendcounts.get(sender,0) + 1\n    #stores month and year of message\n    month = message[1][5:7]\n    year = message[1][0:4]\n    #add month to empty list \"months\"\n    if month not in months : months.append(month)\n    #creates a key for year, month and sender ID\n    key = (year, month, sender)\n    #counts the messages for this specific key\n    counts[key] = counts.get(key,0) + 1\n    #counts the month total\n    tkey = (month,year, 'total')\n    counts[tkey] = counts.get(tkey,0) + 1","e1f233ef":"df = pd.DataFrame.from_dict(messages,orient='index', columns = ['userID','Date','message'])\ndf.head(3)","f0f12d32":"df['username'] = df['userID'].map(senders.get)\ndf.head(3)","7b573ff9":"punctuations = string.punctuation\n\ndf['word_count'] = df['message'].apply(lambda x : len(x.split()))\ndf['char_count'] = df['message'].apply(lambda x : len(x.replace(\" \",\"\")))\ndf['word_density'] = df['word_count'] \/ (df['char_count'] + 1)\n\n#Adding +1 to allow ratio calculation\ndf['Uppercase'] = df['message'].str.findall(r'[A-Z]').str.len()+1\ndf['Lowercase'] = df['message'].str.findall(r'[a-z]').str.len()+1\ndf['UppLowRatio'] = df['Uppercase'] \/ (df['Lowercase'] + 1)\n\ndf['punc_count'] = df['message'].apply(lambda x : len([a for a in x if a in punctuations]))\n\ndf.head(3)","fa882d29":"#df[df['Date'].str.contains('231:')]\n#The Date came with formatting issues\ndf['Date'] = df['Date'].str.replace('220:','22:0')\ndf['Date'] = df['Date'].str.replace('231:','23:1')\n#Convert Date to datetime format\ndf['Date'] = pd.to_datetime(df['Date'], format=\"%Y-%m-%d %H:%M:%S\")\n#Get Weekdays\ndf['weekday'] = df['Date'].dt.dayofweek.apply(lambda x : calendar.day_name[x])\ndf['month'] = df['Date'].dt.month.apply(lambda x : calendar.month_name[x])\ndf['year'] = df['Date'].dt.year\ndf['hour'] = df['Date'].dt.hour","f3969a59":"print('From %s-%d to %s-%d'% (df['month'].min(),df['year'].min(), df['month'].max(),df['year'].max()))","d105006b":"plt.figure(figsize=(20,5))\nax = sns.countplot(x = df['username'], palette = 'husl')\nfor p in ax.patches:\n        ax.annotate(\"%d\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(0, 3),rotation = 'horizontal',textcoords='offset points')\nax.set_xlabel('Family Member')\nax.set(yticklabels=[])\nax.axes.get_yaxis().set_visible(False)  \nplt.title('Total Number of Messages by Member', fontsize = 16,weight = 'bold',pad=20);  \nsns.despine(top=True, right=True, left=True, bottom=False)","49a52ca7":"plt.figure(figsize=(20,5))\nax = sns.kdeplot(df['word_count'], linewidth=0.5,label = 'Number of Words', alpha=.5, fill = True)    \nax = sns.kdeplot(df['char_count'], linewidth=0.5,label = 'Number of Characters', alpha=.5, fill = True)   \nplt.xlabel(\"Number of Items\")\nplt.ylabel(\"Density\")\nplt.title(\"Number of Words and Characters per User\",fontsize=16, weight = 'bold'); \nplt.legend();","2ebc9ec4":"fig, axarr = plt.subplots(1,5, figsize=(20, 5))\n\nsns.set(style=\"ticks\", font_scale = 1)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nfeats = ['word_count','char_count','word_density','UppLowRatio','punc_count']\nz = 0\nfor j in range(0,5):\n    ax = sns.boxplot(data = df, x = 'username', y = df[feats[z]], ax=axarr[j],palette = 'husl');\n    z +=1\n        \naxarr[0].set_title(\"Number of Words per User\")\naxarr[1].set_title(\"Number of Characters per User\")\naxarr[2].set_title(\"Words and Characters Ratio per User\")\naxarr[3].set_title(\"Upper and Lower Case Letters Ratio per User\")\naxarr[4].set_title(\"Punctuation per User\")\nfig.tight_layout(pad=3.0)\nplt.suptitle('Statistical Count Features',fontsize=16, weight = 'bold');\n      \nplt.show()","a9ec1335":"pd.set_option('display.max_colwidth', None)\nex = df[(df['word_count'] >=30) & (df['char_count'] >=100)]\nrows = np.random.choice(ex.index.values, 2,replace=False)\nex.loc[rows]","1c6c4f43":"df_wcount = df[(df['word_count'] >=12)]\nplt.figure(figsize=(20,5))\nax = sns.countplot(x = df_wcount['username'], palette = 'husl', order = ['talia','juli','mamma','gu'])\nfor p in ax.patches:\n        ax.annotate(\"%d\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(0, 3),rotation = 'horizontal',textcoords='offset points')\nax.set_xlabel('Family Member')\nax.set(yticklabels=[])\nax.axes.get_yaxis().set_visible(False)  \nplt.title('Number of Long Messages (> 12 words) per Whatsapp Group Member', fontsize = 16,weight = 'bold',pad=20);  \nsns.despine(top=True, right=True, left=True, bottom=False)","a37e9865":"def percentile_drop(df,column):\n    q25, q75 = np.percentile(df[column], 25), np.percentile(df[column], 75)\n    iqr = q75 - q25\n    cut_off = iqr * 1.5\n    lower, upper = q25 - cut_off, q75 + cut_off\n    #print ('lower: %d upper: %d' % (lower,upper))\n    drop_index = df[(df[column] >=upper) | (df[column] <=lower)].index\n    #print('Number of rows to be removed %d'% drop_index.shape[0])\n    return drop_index","e4d26466":"df.drop(percentile_drop(df,'word_count'), inplace = True)\ndf.drop(percentile_drop(df,'char_count'), inplace = True)","ecbd45ef":"fig, axarr = plt.subplots(1,5, figsize=(20, 5))\n\nsns.set(style=\"ticks\", font_scale = 1)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nfeats = ['word_count','char_count','word_density','UppLowRatio','punc_count']\nz = 0\nfor j in range(0,5):\n    ax = sns.boxplot(data = df, x = 'username', y = df[feats[z]], ax=axarr[j],palette = 'husl');\n    z +=1\n        \naxarr[0].set_title(\"Number of Words per User\")\naxarr[1].set_title(\"Number of Characters per User\")\naxarr[2].set_title(\"Words and Characters Ratio per User\")\naxarr[3].set_title(\"Upper and Lower Case Letters Ratio per User\")\naxarr[4].set_title(\"Punctuation per User\")\nfig.tight_layout(pad=3.0)\nplt.suptitle('Statistical Count Features',fontsize=16, weight = 'bold');\n      \nplt.show()","c1082893":"plt.figure(figsize=(20,5))\nax = sns.kdeplot(data = df, x = 'word_count', linewidth=1,alpha=.3, fill = True, hue = 'username',palette = 'husl')    \nplt.xlabel(\"Number of Words\")\nplt.ylabel(\"Density\")\nplt.title(\"Number of Words per Whatsapp Group Member\",fontsize=16, weight = 'bold'); \nsns.despine(top=True, right=True, left=False, bottom=False)","f034cbc0":"ex = df[(df['word_count'] <=2)]\nrows = np.random.choice(ex.index.values, 2,replace=False)\nex.loc[rows,['message','word_count','username']]","853cbbe0":"media = df[(df['message'] =='<media omitted>')]\n\nplt.figure(figsize=(20,5))\nax = sns.countplot(x = media['username'], palette = 'husl')\nfor p in ax.patches:\n        ax.annotate(\"%d\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(0, 3),rotation = 'horizontal',textcoords='offset points')\nax.set_xlabel('Family Member')\nax.set(yticklabels=[])\nax.axes.get_yaxis().set_visible(False)  \nplt.title('Number of Media Messages sent', fontsize = 16,weight = 'bold',pad=20);  \nsns.despine(top=True, right=True, left=True, bottom=False)\n","282da247":"plt.figure(figsize=(20,5))\nax = sns.countplot(x = df['year'], hue = df['username'],palette = 'husl')\nfor p in ax.patches:\n        ax.annotate(\"%d\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(0, 3),rotation = 'horizontal',textcoords='offset points')\nax.set_xlabel('Year')\nax.set(yticklabels=[])\nax.axes.get_yaxis().set_visible(False)  \nplt.title('Number of Messages sent by Year', fontsize = 16,weight = 'bold',pad=20);  \nsns.despine(top=True, right=True, left=True, bottom=False)","865cdcaa":"month_order = list(calendar.month_name)\n\nfor i in df['year'].unique():\n    df_y = df[df['year']==i]\n    plt.figure(figsize=(25,5))\n    ax = sns.countplot(x =df_y['month'] , hue = df_y['username'],palette = 'husl', \n                       order = month_order[1:13],hue_order = df['username'].unique())\n    for p in ax.patches:\n        try:\n            ax.annotate(\"%d\" % p.get_height(), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n                ha='center', va='bottom', color='black', xytext=(0, 2),rotation = 'horizontal',textcoords='offset points')\n        except: continue\n    ax.set_xlabel('Month')\n    ax.set(yticklabels=[])\n    ax.axes.get_yaxis().set_visible(False)  \n    ax.legend(ncol=len(df['username'].unique()))\n    plt.title('Number of Messages sent by Month - ' + str(i), fontsize = 16,weight = 'bold',pad=20);  \n    sns.despine(top=True, right=True, left=True, bottom=False)","8cbe76cf":"day_order = list(calendar.day_name)\n\nplt.figure(figsize=(20,8))\n\nax = sns.countplot(data=df, y = 'weekday', palette = 'husl', order = day_order)\n\nfor p in ax.patches:\n        width = int(p.get_width())\n        ax.annotate(\"%d\" % p.get_width(), (width, p.get_y() + p.get_height()\/ 2),\n        ha='left', va='center', color='black', xytext=(2, 0),rotation = 'horizontal',textcoords='offset points')\n        \n\nsns.despine(top=True, right=True, left=False, bottom=True)\nax.set_xlabel('Number of Occurrences')\nax.set(ylabel=None)\nax.set(xticklabels=[])\nax.axes.get_xaxis().set_visible(False) \n\nplt.title(\"Number of Messages by Weekday\", fontsize = 16,weight = 'bold');\n","238ec3c8":"DayMonth = df.groupby(['weekday','month']).size().reset_index(name='counts')\n\nDayMonth_wide = DayMonth.pivot(index='weekday', columns='month', values='counts')\n#Order columns and Index\nmonth_order_abbr = list(calendar.month_abbr)\nDayMonth_wide.columns = month_order_abbr[1:13]\nDayMonth_wide.index = day_order\n\nplt.figure(figsize=(12,8))\n\nax = sns.heatmap(DayMonth_wide, annot=True, fmt='.0f', yticklabels='auto', cmap='PuOr', \n                 linewidths=1.8, cbar_kws={\"orientation\": \"horizontal\"},vmin = 250,vmax = 600)\nax.xaxis.tick_top() # x axis on top\nax.xaxis.set_label_position('top')\nax.set_title('Number of Messages by Weekday and Month',fontsize = 16,weight = 'bold',pad=10)\nplt.show()","88a5e80e":"df_hour = df.loc[:,['hour','Date', 'username','message','word_count','char_count']]\ndf_hour['period'] = (df_hour['Date'].dt.hour % 24 + 4) \/\/ 4\ndf_hour['period_code'] = (df_hour['Date'].dt.hour % 24 + 4) \/\/ 4\ndf_hour['period'].replace({1: 'Late Night',\n                      2: 'Early Morning',\n                      3: 'Morning',\n                      4: 'Noon',\n                      5: 'Evening',\n                      6: 'Night'}, inplace=True)\n\nusername_hour = df_hour.groupby(['period','username']).size().reset_index(name='counts')\nhour = df_hour.groupby(['period','period_code']).size().reset_index(name='counts')\nhour.sort_values('period_code', inplace = True)\n\n# Create a pieplot\npie, ax = plt.subplots(figsize=[10,6])\nax = plt.pie(x=hour['counts'], labels=hour['period'],wedgeprops = { 'linewidth' : 7, 'edgecolor' : 'white' },\n            autopct='%.0f%%',pctdistance=0.53, labeldistance=1.1,textprops={'fontsize': 14})\n\n# add a circle at the center to transform it in a donut chart\ninner_circle=plt.Circle((0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(inner_circle)\nplt.title(\"Number of Messages by Period of the Day\", fontsize = 16,weight = 'bold');\nplt.show()","d224f906":"plt.figure(figsize=(20,5))\nax = sns.kdeplot(data = df_hour, x = 'word_count', linewidth=2,alpha=.3, fill = False, hue = 'period',palette = 'husl')    \nplt.xlabel(\"Number of Words\")\nplt.ylabel(\"Density\")\nplt.title(\"Number of Words per Day Period\",fontsize=16, weight = 'bold'); \nsns.despine(top=True, right=True, left=False, bottom=False)","aff932e0":"# Conclusion\nThe notebook aimed to understand the pattern in my family WhatsApp group. In total, almost 40.000 messages were exchanged between the four of us, with 'mamma' being the most active user and me the ones that clog people phones with media messages.\n\nThe majority of messages are short, with one or two words and the time where most messages are exchanged is the Evening. The data contained a few outliers, with messages up to 175 words or 800 characters. The analysis always showed that the conversation is less active from April to August. In contrast, February has shown to be a communicative month for us. \n\nI hope you enjoyed reading as much as I enjoyed analysing this data.","4f7a1fc3":"# Year, Months and Weekdays\n\nIn this section, we start to analyse the message regarding its date. First, let's see how many messages each member has sent over the years:","8d33fe19":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>Number of Words and Characters per User<\/h3>\n<ul>\n<li>Both Features present a heavier left-tail <br>\nA heavier left-tail indicates two things:\n<li>The data presents outliers to the right, i.e. there are messages with a significantly higher number of words and characters if compared to the Median of all messages\n<li>The left-tail shows that most samples have a small number of words and characters\n<ul>\n<\/blockquote>","9e7ec2d6":"Here we plot the BoxPlot analysis again, without the outliers for the first two plots, for better visualisation:","f1329214":"Analysing the years and months, it becomes natural to get curious regarding Weekdays. The bar plot displays the sum of all messages per Week Day:","2a4cb999":"A heatmap is a good way to visualise patterns between features. \n\nIn the plot below we have the Days of the Week, the Months and the colours represent the sum of all messages exchanged (considering the particular day and month):","2d224723":"From the first BoxPlot above (and by computing the upper quantile), we see that the Number of Words features presents an upper-quartile of 12 words. \n\nIt is now possible to see which user has the habit of sending the longest messages by using the upper-quartile as cutoff:","96589117":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>The One who sends Cats Videos<\/h3>\n<ul>\n<li>Well, I am the person who sends most images or video files. It could be an explanation why I never have space on my phone to download what other people send me\n<li>One of the few analysis where 'gu' is not last\n<li>'talia' number of media messages accounts for 30% of the data I have sent\n<ul>\n<\/blockquote>","20b9a442":"# Most Active Day Period\nNow, let's visualise the most active periods of the day for chatting. To improve the visualisation of patterns, we divide the 24h of the day into the following periods:\n\n* **Early Morning:** From 4 am to 8 am\n* **Morning:** From 8 am to 12 pm\n* **Noon:** 12 pm to 4 pm\n* **Evening:** 4 pm to 8 pm\n* **Night:** 8 pm to 12 am\n* **Late Night:** 12 am to 4 am","a7be56a6":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>Wait...What year is it?<\/h3>\n<ul>\n<li>Overall, there is not a great distinction between the years: 'mamma' is consistently at the top two, and my brother sending fewer messages than my sister and I\n<li>From May 2018 and onwards, 'juli' has usually sent more messages than 'talia'. It seems to be connected to the period I left a previous job\n<li>August and September 2016 are the only periods where more than one user has sent over 400 messages. It was probably excitement as the group had recently started\n<li>'gu' has sent over 200 messages solely in December 2016 and 2017, and in July 2018. Interestingly, the dates coincide with the periods where we were spending Holidays together\n<ul>\n<\/blockquote>","f38c2457":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>Is now a good time to talk?<\/h3>\n<ul>\n<li>The pie chart shows that the conversation is alive for the greatest part of the day\n<li>Only Early Morning and Late Night periods have a clear drop in message numbers\n<li>The evening period is the preferred time to chat, with 10% more messages than Morning, Noon or Night\n<li>The KDE plot is quite similar across the main periods of the day, i.e. there's no specific period of the day to send bigger messages\n<li>Late Night and Early Morning a gaussian-like curve is present with most messages containing two words. Could be because of \"Good Morning\" or \"Good Night\" messages\n<ul>\n<\/blockquote>","622b373b":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>That time of the month when...<\/h3>\n<ul>\n<li>The bar graph showed that there is not a great distinction between the days of the week. The most active day is Friday, with Sunday and Monday being the least active  \n<li>The heatmap is a visual aid to detect patterns between Weekdays, Months and the Number of Messages exchanged\n<li>The number of messages is more dependent on the Month than the Weekdays. For the most part, the rows (Weekdays) follow the colour pattern of the columns (Month)\n<li>From the contrasting colour pattern in the central area of the plot we conclude that months from April to August are usually when fewer messages are sent \n<li>February is the only month where all the Weekdays had more than 500 messages exchanged    \n<ul>\n<\/blockquote>","b3324901":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>The One who sends the Shortest Messages<\/h3>\n<ul>\n<li>The KDE plot tells us many words each user prefers to communicate. The higher the peak, the more messages with this amount of words\n<li>'juli','mamma' and 'gu' all present similar distribution shapes. With most messages containing 2 words\n<li>'talia' is the only member that peaks at 1 word, with 'mamma' also presenting an expressive secondary peak there <br>\n<ul>\n<\/blockquote>","b4d3eaed":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>The One who sends the Longest Messages<\/h3>\n<ul>\n<li>'mamma' is the group member that has sent most messages above the upper-quantile cutoff. I am not very far behind\n<li>As a classic male characteristic, my brother presents lower participation in analysis\n<li>The result makes sense since 'juli' and 'mamma' presented also the most extreme outliers<br>\nThe rest of the analysis is performed by removing the outliers from the dataset\n<ul>\n<\/blockquote>","fd0ea020":"Below is an example of the short messages:","45213890":"Our data comprises the messages from the period:","c2226e2b":"Now that the extreme outliers have been removed, we can analyse the KDE plot again.","bcdbff1f":">Importing txt data to SQL","36f4b003":"## Adding Text Analytical Features\n\nWith the current data, we can now start to derive extra features. Features to count the number of words, characters, words per character ratio, and other analytical information are added.\n\n* **Word Count** - Total number of words in the headline\n* **Character Count** - Total number of characters in the headline excluding spaces\n* **Word Density** - Average length of the words used in the headline\n* **Punctuation Count** - Total number of punctuations used in the headline\n* **Upper-Case to Lower-Case Words ratio** - ratio of upper case words used and lower case words used in the text","ff451cca":"Since the above analysis indicated the presence of outliers, let's visualise them by using BoxPlots:","f2d0fa3a":"Next, we map the userID's  to the WhatsApp group members names using the Senders dictionary. A new column 'username' is added:","30aaeaca":"Here's an example of two long messages:","afd2a254":"<img src=\"https:\/\/images.unsplash.com\/photo-1614680376408-81e91ffe3db7?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1267&q=80\" width=\"500\"><br>\nPhoto by <a href=\"https:\/\/unsplash.com\/@alexbemore?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Alexander Shatov<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/whatsapp?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash<\/a><br>\n\nThis notebook is an analysis of my family Whatsapp group. The data contains 40.000 texts, from April-2016 to September-2020. As part of an exercise for a Python course, the text data is processed and sent to a SQL database (sqlite3) and then retrieved using Python. Pandas are then used to build the dataframe and visualisations. \n\nFor obvious reasons, the dataset is private. The language in the dataset is Portuguese. \n\n## <center style=\"background-color:Gainsboro; width:40%;\">Contents<\/center>\n1. [Data Processing](#1.-Data-Processing)<br>\n2. [Data Analysis](#2.-Data-Analysis)<br>\n2.1 [Word Counts and Number of Characters](#2.1-Word-Counts-and-Number-of-Characters)<br>\n2.2 [Year, Months and Weekdays](#2.2-Year,-Months-and-Weekdays)<br>\n2.3 [Most Active Day Period](#2.3-Most-Active-Day-Period)<br>\n3. [Conclusion](#3.-Conclusion)<br>\n\n***Please remember to upvote if you find this Notebook helpful!***","924c2fae":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>The One who keeps the Group Alive<\/h3>\n<ul>\n<li>For 2016 and 2020 there is not a whole year of data, so the numbers can present a lower trend than usual\n<li>'mamma' and 'talia' are fighting for the top two positions from 2016 to 2018. After this 'juli' and 'mamma' take over\n<li>In 2016 and 2017 are the only years where 'gu' surpasses other group members\n<li>2018 has a higher number of messages, from all members. The record goes to 'mamma' with more than 3.500 messages sent\n<ul>\n<\/blockquote>","497ecca3":">Connecting to SQL database and importing Data","b5a459a7":"Additionally, we can also extract the dates for each message to look for patterns later. The following features are created:\n* **Weekday** - Weekday name when the message was sent\n* **Month** - The name of the month in which the message was sent\n* **Year** - Month date in which the message was sent\n* **Hour** - Hour value in which the message was sent","6801dfe1":"## Data Analysis\n\nTo kick off our Data Analysis, let's start with the basics and discover who sent more messages overall:","73a2510b":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>The Notification is always there<\/h3>\n<ul>\n<li>'mamma' has sent 33% of all messages, with approximately 12.800 messages sent\n<li>My sister and I are quite close, while my brother is far behind\n<li>It is quite astonishing to think that we have exchanged so much information across the years    \n<ul>\n<\/blockquote>","19b8b489":"# Word Counts and Number of Characters\n\nAs an overview of Word Counts and Number of Characters by message, we visualise how their values are distributed:","cc2a39da":"<blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\">\n<h3>BoxPlots<\/h3>\n<ul>\n<li>All features present outliers (black dots)\n<li>The WhatsApp group members have a similar Median for all features\n<li>The group members 'juli' and 'mamma' have the most extreme outliers, i.e. the lengthier of longest messages   <br>\nThe above plots allow the following conclusion:\n<li>The outliers should be removed to avoid impacting the analysis of the overall dataset\n<li>Before removing, let's have a look at examples of longer messages (and discover who has the habit of sending the big texts!)\n<ul>\n<\/blockquote>","d832864e":"# Data Processing\n\nSo far, we extracted data from the '**.txt**' file, used Python to insert it into the SQL database as an exercise. Then, Python was used to download the SQL data and built the following dictionaries:\n* *Senders*: dictionary containing User ID and User Name\n* *Counts*: dictionary year, month, user as keys and total per user as values\n* *Sendcounts*: dictionary containing User ID and Number of Messages sent\n* *Messages*: dictionary containing msg ID, User ID, datetime and msg\n\nNow we start analysing the text data by building the Dataframe and creating additional features. The Messages dictionary is used as a base for our Dataframe:","7097a357":"The raw file also provides a piece of basic media information. When downloading the WhatsApp data, I selected to omit the data to obtain a lighter file. \n\nThe messages that contained images or video are marked with **media omitted** message. It is rather a surprise to see who is clogging my phone with data:"}}