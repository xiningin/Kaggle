{"cell_type":{"44d05ffb":"code","4808cbc0":"code","ea2f4906":"code","a3a21ea0":"code","c7706271":"code","0fd70518":"code","eb8d9ebe":"code","c8e8f7f2":"code","10e8cdcc":"code","1d436e9f":"code","b434041b":"code","c6664940":"code","380149ca":"code","f91b93e4":"code","df43bba6":"code","2ad6593e":"markdown","14a8d9d0":"markdown","017963a0":"markdown","97514394":"markdown","b18bc78d":"markdown","2f91d2a7":"markdown","c5a0df76":"markdown","3819dddb":"markdown","bf517892":"markdown","5386dc06":"markdown","a7818038":"markdown","631b0b46":"markdown","86d9d093":"markdown","aa154213":"markdown","c3a56616":"markdown","a74afa50":"markdown"},"source":{"44d05ffb":"class config():    \n    CORPUS_FN = '\/kaggle\/input\/cord-19-step2-corpus\/corpus.pkl'\n    ENM_FN = '\/kaggle\/input\/cord-19-step3-enm\/ranker_enm.pickle'\n    TOC2_FN = '\/kaggle\/input\/toc2js\/toc2.js'\n    \n    n_relevant = 200\n    \n    # Threshold: Keep sentences if their scrore is higher than 'th'\n    th=0.52\n    # Sentence\/Snippet score = alpha*NMF_cosine_similarity' + (1-alpha)*jaccard_similarity\n    alpha=0.5\n    \n    query_txt = 'Is BCG vaccination causally related to reduced COVID\u201019 mortality?' ","4808cbc0":"import cord_19_container as container\nimport cord_19_rankers as rankers\nimport cord_19_lm as lm\nimport cord_19_vis as vis\n\nfrom cord_19_container import Sentence, Document, Paper, Corpus\n\nfrom cord_19_metrics import compute_queries_perf\n\nfrom cord_19_helpers import load, save\nfrom cord_19_text_cleaner import Cleaner\nfrom cord_19_wn_phrases import wn_phrases","ea2f4906":"from gensim import matutils\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nimport copy\nfrom collections import defaultdict\nimport re\nfrom textwrap import wrap\n\nimport numpy as np\nimport pandas as pd","a3a21ea0":"%matplotlib inline\n\nfrom IPython.display import display, HTML, Markdown, Latex\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nHTML(\"\"\"\n<style>\n.output_png {\n    text-align: center;\n    vertical-align: middle;\n}\n\n.rendered_html table{\n    display: table;\n}\n<\/style>\n\"\"\")","c7706271":"corpus = load(config.CORPUS_FN)\ndictionary = corpus.dictionary\n\n# Rebuild id2token from token2id, only token2id is saved\nfor k,v in dictionary.token2id.items():\n    dictionary.id2token[v]=k\n\n# Set the dictionary as global, we have to find better way\ncontainer.dictionary = dictionary\nrankers.dictionary = dictionary\nvis.dictionary = dictionary\n\nprint(f'#Papers {len(corpus)}, #Tokens {len(dictionary)}')","0fd70518":"ranker_enm = load(config.ENM_FN)\nranker_nmf = ranker_enm.models['NMF']","eb8d9ebe":"def rename_field(df, field, from_to):\n    \"\"\"\n    Rename DataFrame columns (from, to)\n    \n    df: DataFrame\n    field: string, column name to update\n    from_to list: of tuples (from, to)\n    \"\"\"\n    for old, new in from_to:\n        index = (df[field] == old)\n        df.loc[index, field] = new\n    \ndef load_atlas():\n    \"\"\"\n    Load BCG world atlas\n    \"\"\"\n    df = pd.read_csv('\/kaggle\/input\/hackathon\/BCG_world_atlas_data-2020.csv', dtype={'BCG Policy First Year':str},\n                          na_values=None,\n                          keep_default_na=False)\n    \n    # Rename some columns to simplest form.\n    df.rename(columns={'Contry Name (Mandatory field)':'country_name',\n                             'BCG Policy First Year':'BCG_First_Year',\n                             'BCG Policy Last Year': 'BCG_Last_Year'}, \n                    inplace=True)\n    \n    # Remove spaces at the beginning and at the end of the string\n    df.loc[:,'country_name'] = df.loc[:,'country_name'].str.strip()\n\n    # Fix a typo in Atlas where Uzbekistan named as 'mexico' (lowercase).\n    df.loc[df['country_name'] == 'mexico', 'country_name'] = 'Uzbekistan'\n    \n    # We mark Italy as never had BCG Policy, please look at www.bcgatlas.org\n    df.loc[df['country_name'] == 'Italy', 'BCG_First_Year'] = 'N\/A'\n    \n    # Drop Germany (East), we will use Germany (West) as Germany\n    df = df.query('country_name != \"Germany (East)\"').copy() # Better to use drop\n    \n    # Countries to rename (from, to)\n    cntrs_map = [\n        ('United States of America', 'United States'),\n        ('Macedonia, FYR', 'Macedonia'),\n        ('Germany (West)' , 'Germany')\n    ]\n    rename_field(df, 'country_name', cntrs_map)\n\n    '''\n    Filter BCG Atlas:\n    BCG_Last_Year == \"ongoing\": Ongoing BCG policy\n    BCG_First_Year == \"N\/A\": Never had BCG policy\n    '''\n    df = df.query('(BCG_Last_Year == \"ongoing\") \\\nor (BCG_First_Year == \"N\/A\")').copy() # Better to use drop\n    \n    df['universal_BCG'] = df.BCG_First_Year != 'N\/A'\n    \n    return df[['country_name', 'universal_BCG']]\n\ndef load_wwb():\n    \"\"\"\n    Load World Bank economies classification;\n    Economy groups: Low income, Lower middle income,\n                    High income, Upper middle income\n    \"\"\"\n    \n    df = pd.read_excel('http:\/\/databank.worldbank.org\/data\/download\/site-content\/CLASS.xls',\n                  skiprows=list(range(4))+[5],\n                  nrows=218)\n\n    # Rename some columns to simplest form.\n    df.rename(columns={'Economy':'country_name',\n                           'Income group':'Income_group'}, \n                  inplace=True)\n    \n    # Countries to rename (from, to)\n    cntrs_map = [\n        ('Hong Kong SAR, China', 'Hong Kong'),\n        ('North Macedonia', 'Macedonia'), # Better to keep 'North Macedonia'\n        ('Taiwan, China' , 'Taiwan')\n    ]\n    rename_field(df, 'country_name', cntrs_map)\n    \n    return df[['country_name', 'Income_group']]\n\ndef load_dpm():\n    \"\"\"\n    Load COVID-19 Deaths\/million database\n    \"\"\"\n    \n    df = pd.read_csv('\/kaggle\/input\/hackathon\/task_2-COVID-19-death_cases_per_country_after_frist_death-till_26_June.csv')\n    \n    # Get max of from DPM from '10 days after first death' until '100 days after first death'\n    df['deaths_per_million'] = df.iloc[:,3:].T.max()\n    \n    # Countries to rename (from, to)\n    cntrs_map = [\n        ('Iran', 'Iran, Islamic Rep.'),\n        ('South Korea', 'Korea, Rep.'),\n        ('Russia' , 'Russian Federation'),\n        ('Slovakia', 'Slovak Republic')\n    ]\n    rename_field(df, 'country_name', cntrs_map)\n    \n    df.dropna(subset=['deaths_per_million'], inplace=True)\n    \n    return df[['country_name', 'deaths_per_million']]","c8e8f7f2":"# Load BCG world atlas, COVID-19 Deaths\/million, World Bank economies classification\natlas_df = load_atlas()\ndpm_df = load_dpm()\nwwb_df = load_wwb()\n\ndata = atlas_df.merge(wwb_df, on='country_name').merge(dpm_df, on='country_name')\n# Merge Upper middle, High income together\ndata.loc[data.Income_group.isin(['Upper middle income', 'High income']),\n         'Income_group'] = 'Upper middle & High income'\n\n\"\"\"\nSet country category as done in [1]\nCategories:\n    Lower middle income countries with universal BCG policy;\n    Upper middle & High income countries with universal BCG policy;\n    Upper middle & High income countries that never had universal BCG policy.\n\"\"\"\n\ndata['category'] = data['Income_group'] + ' countries'\ndata.loc[data['universal_BCG']==True,  'category'] += ' with universal BCG policy'\ndata.loc[data['universal_BCG']==False, 'category'] += ' that never had universal BCG policy'\n\n\"\"\"\nThe countries with low-income levels (18) reported few number of cases of COVID-19 per million\ninhabitants: 0.32 \u00b1 0.09. However, the issue of underreporting might be more critical for\nestimating the number of cases and we have excluded the low income countries from further\nanalysis. [1]\n\"\"\"\ndata = data[data['Income_group'] != 'Low income']\n\n\ndisplay(HTML('Countries that never had universal BCG policy: <b>' + \n             ', '.join(data.query('universal_BCG==False')['country_name'].values.tolist()) + \n             '<\/b>.<BR>' + \n             'Number of countries with universal BCG policy: <b>' + \n             str(len(data.query('universal_BCG==True')['country_name'].values.tolist())) + \n             '<\/b>.'\n            ))","10e8cdcc":"columns_order = ['Lower middle income countries with universal BCG policy',\n                 'Upper middle & High income countries with universal BCG policy',\n                 'Upper middle & High income countries that never had universal BCG policy']\n\nfig, ax = plt.subplots(figsize=(14,7))\n\nchart=sns.boxplot(x='category', y='deaths_per_million',\n                  data=data.groupby(by='country_name').last(),\n                  order=columns_order)\n\nchart.set_xticklabels([\"\\n\".join(wrap(t, width=30)) for t in columns_order])\n\nplt.suptitle('')\nplt.title('COVID-19 deaths per million per country till 26 June 2020')\nplt.xlabel('')\nplt.ylabel('Deaths per million')\nplt.show()\n\ndisplay(HTML('<center><b>Figure 1:<\/b> Higher death rates were presented in countries that never \\\nimplemented a universal BCG vaccination policy.<\/center>'))","1d436e9f":"query = container.Document([Cleaner(True).clean(config.query_txt)])\nquery.tokenize()\nwn_phrases(query)\n\ndisplay(HTML(f'We are looking for:<br><br>'))\nq_original_text = '<br>'.join([s.original_text for s in query.sentences])\ndisplay(HTML(f'<p style=\"font-size: 18pt;\">{q_original_text}<\/p>'))\n\n# When debuging print query.text","b434041b":"def display_results(ranker, q, th=0.5, alpha=0.5):\n    \n    \"\"\"\n    List of tuple (title, url, snippets)\n    snippet: Sentences close to the query\n    \"\"\"\n    r = []\n    \n    scores = ranker[q]\n    \n    I, R = lm.get_relevant(corpus, scores, config.n_relevant)\n    total = 0\n    for i, paper in enumerate(R):\n        paper_id = I[i]\n        enm = scores[paper_id]\n        \n        # Sentences with at least two distinct words\n        sentences = [sent for sent in paper if len(sent.bow)>1]\n        \n        s_nmf = ranker_nmf.project(sentences)\n        q_nmf = ranker_nmf.project(q)\n        \n        sim = cosine_similarity(s_nmf, q_nmf)\n        sim = sim[:,0]\n        \n        for j,sent in enumerate(sentences):\n            jaccard_sim = 1-matutils.jaccard(q.bow, sent.bow)\n            sim[j] = alpha*sim[j] + (1.-alpha)*jaccard_sim\n        \n        found = 0\n        sent_lst = []\n        sI = np.argsort(sim)[::-1]\n        top5_tbl = \"<table>\"\n        top5_tbl += \"<tr><th>Score<\/th><th style='text-align:left;'>Snippet<\/th><\/tr>\"\n        for j in sI[:5]:\n            if sim[j] > th:\n                found += 1\n                top5_tbl += f\"<tr><td>{sim[j]:.3f}<\/td><td style='text-align:left;'>{sentences[j].original_text}<\/td><\/tr>\"\n                sent_lst.append(sentences[j].original_text)\n                \n        top5_tbl += \"<\/table>\"\n        \n        if found:\n            link='<a href=\"https:\/\/doi.org\/'+paper.doi+'\" target=blank>'+paper.title+'<\/a>'\n            display(HTML(link))\n            display(HTML(top5_tbl))\n            \n            r.append( (paper.title,\n                       'https:\/\/doi.org\/'+paper.doi,\n                       '\\n'.join(sent_lst)) )\n            \n        total += (found != 0)\n    \n    print('Total', total)\n    \n    return r\n        \n","c6664940":"%%time\n\nr = display_results(ranker_enm, query,\n                    th=config.th, alpha=config.alpha)","380149ca":"df = pd.DataFrame(r, columns=['title', 'link', 'snippets'])\ndf.to_csv('COVID-19_BCG.csv', index=False)","f91b93e4":"from IPython.display import HTML\n\nwith open(config.TOC2_FN, 'r') as file:\n    js = file.read()\n\n    display(HTML('<script type=\"text\/Javascript\">'+js+'<\/script>'))\n    \n    del js","df43bba6":"%%javascript\n\n\/\/ Autonumbering & Table of Contents\n\/\/ Using: https:\/\/github.com\/ipython-contrib\/jupyter_contrib_nbextensions\/tree\/master\/src\/jupyter_contrib_nbextensions\/nbextensions\/toc2\ntable_of_contents(default_cfg);","2ad6593e":"### Commun libraries","14a8d9d0":"<h1><span class=\"tocSkip\"><\/span>Table of Contents<\/h1>\n<div id=\"toc-wrapper\"><\/div>\n<div id=\"toc\"><\/div>","017963a0":"### SE libraries\n\nAll our libraries are made public under open source.","97514394":"**<center style=\"font-size: 16pt;\"><a href=\"https:\/\/www.kaggle.com\/atmarouane\/cord-19-step3-enm\/\">Ensemble Model (EnM) for document retrieval results<\/a><\/center>**","b18bc78d":"Load the corpus, papers talking about COVID-19\/SARS-CoV-2, done in our previous kernel.","2f91d2a7":"# Query","c5a0df76":"## Configuration class\n\nWe set variables like from where we load, where to store and some parameters.","3819dddb":"# Results","bf517892":"# Introduction","5386dc06":"## Load data","a7818038":"Loading our model.","631b0b46":"## Libraries","86d9d093":"## Load model","aa154213":"### Visualization libraries","c3a56616":"# Prerequisites","a74afa50":"BCG vaccination has been reported to offer broad protection to respiratory infections [[1]](https:\/\/www.medrxiv.org\/content\/10.1101\/2020.03.24.20042937v1.full.pdf).\n\nThe goal of this kernel is to search in [CORD-19 database](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) for papers talking about the **\"Is BCG vaccination causally related to reduced COVID\u201019 mortality?\"**.\n\nFigure 1 shows one of the hypothesis that link between BCG country policy with COVID-19 mortality."}}