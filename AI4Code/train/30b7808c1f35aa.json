{"cell_type":{"cabc20c2":"code","9442f4a1":"code","4e0b50bf":"code","4b0b915a":"code","8019bc58":"code","58eded38":"code","71639d31":"code","5a794a10":"code","a6985e9f":"code","4a1b09d2":"code","bfa7966b":"code","5a418068":"code","f3e0386e":"code","c64a15dd":"code","02dcafe5":"code","e3f10880":"code","8604db8a":"code","bae5e659":"code","748acb70":"code","e534a2cd":"code","3ff940f4":"code","2d573d8d":"code","9f3d9f56":"code","bbf2203c":"code","15fc521b":"code","f9e51a2d":"code","741d703d":"code","3e3f95ed":"code","8f67298c":"code","21597ff1":"code","23413841":"markdown","893edb01":"markdown","4288e3bd":"markdown","289fd10d":"markdown","c92f64aa":"markdown","51debc43":"markdown","8805c1b5":"markdown","0aa0eefd":"markdown","9112ecb1":"markdown"},"source":{"cabc20c2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","9442f4a1":"df = pd.read_csv('\/kaggle\/input\/montcoalert\/911.csv')","4e0b50bf":"df.info()","4b0b915a":"df.head()","8019bc58":"df['zip'].value_counts().head(5)","58eded38":"df['twp'].value_counts().head(5)","71639d31":"len(df['title'].unique())","5a794a10":"df['Reason'] = df['title'].apply(lambda title:title.split(':')[0])","a6985e9f":"df['Reason'].value_counts()","4a1b09d2":"## Use Seaborn to create a countplot of 911 calls by Reason\nsns.countplot(x='Reason',data=df,palette='viridis')","bfa7966b":"type(df['timeStamp'].iloc[0])","5a418068":"# Use pd.to_datetime to convert the column from strings to DateTime objects\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])","f3e0386e":"# Create 3 new columns called Hour, Month, and Day of Weel\ndf['Hour'] = df['timeStamp'].apply(lambda time:time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time:time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time:time.dayofweek)","c64a15dd":"# Use .map() with dictionary to map the actual string names to the day of the week\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","02dcafe5":"# Use seaborn to create a countplot of the Day of Week column with the hue based on the Reason column\nsns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n# Relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","e3f10880":"# Use seaborn to create a countplot of the Month column with the hue based on the Reason column\nsns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","8604db8a":"## There are some missing values, like month 9, 10 and 11.\n## We should fill in this information by plotting the information in another way, possibly a simple line plot that fills in the missing months.\n## We meed to do some work with pandas.","bae5e659":"## Create a groupby object called byMonth, where group the DataFrame by the month column.\n## Use the count() method for aggregation.\n## use the head() method to return DataFrame.\nbyMonth = df.groupby('Month').count()\nbyMonth.head()","748acb70":"byMonth['twp'].plot()","e534a2cd":"## Use seaborn's lmplot() to create a linear fit on the number of calls per month. Reset the index to a column.\nsns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","3ff940f4":"## Create a new column called 'Date' that contains the date from the timeStamp column.\n## Apply along with the .date() method.\ndf['Date'] = df['timeStamp'].apply(lambda t:t.date())\ndf.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","2d573d8d":"## Recreate 3 seperate plot with each plot representing a Reason for the 911 call\ndf[df['Reason'] == 'Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","9f3d9f56":"df[df['Reason'] == 'Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","bbf2203c":"df[df['Reason'] == 'EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","15fc521b":"## Restructure the dataframe: columns become the Hours and Indexs become the Day of the week.\n## Combine groupby with an unstack method to realize it.\ndayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","f9e51a2d":"## Create a HeatMap using this new DataFrame\nplt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","741d703d":"## Create a clustermap using this DataFrame\nsns.clustermap(dayHour,cmap='viridis')","3e3f95ed":"## Change the Month as the column\ndayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","8f67298c":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","21597ff1":"sns.clustermap(dayMonth,cmap='viridis')","23413841":"# Tracy(11\/12\/2019)_911 Calls","893edb01":"## Overview","4288e3bd":"## Create Heatmaps","289fd10d":"## The Missing Value","c92f64aa":"This dataset contains the following fields:\n* lat : String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zipcode\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Dummy variable (always 1)","51debc43":"## Process TimeStamp Column","8805c1b5":"In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.\n**For example, if the title column value is EMS: BACK PAINS\/INJURY , the Reason column value would be EMS.**","0aa0eefd":"## Creating New Features","9112ecb1":"## Import Libraries and Data"}}