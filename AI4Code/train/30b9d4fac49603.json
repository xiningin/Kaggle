{"cell_type":{"837f099c":"code","d5e31f8d":"code","8f04dd8d":"code","5ad78192":"code","be05d06d":"code","ff44a460":"code","0510135e":"code","7be5a07f":"code","f94d0207":"code","294eadb7":"code","3f338abf":"code","125cc9ec":"code","39872863":"code","b4d7c681":"code","ec604327":"code","40b7802c":"code","4de923c8":"code","fbe78bca":"code","98a4242a":"code","f5bf67c2":"code","7ca7cc4f":"code","b3bf7c8f":"code","3da56457":"markdown","0c1423a3":"markdown","08aa677d":"markdown","af4d0c0c":"markdown","fb090084":"markdown","34f3ed82":"markdown","6cc0d50b":"markdown","63752364":"markdown","b1cf1c18":"markdown","af0ab5db":"markdown","95f5a4aa":"markdown","c3941e99":"markdown","6304e308":"markdown","da379da5":"markdown","d1ab130e":"markdown"},"source":{"837f099c":"!unzip ..\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip\n!unzip ..\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip","d5e31f8d":"import numpy as np\nimport pandas as pd\nfrom keras.preprocessing.image import ImageDataGenerator,load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os","8f04dd8d":"Image_Width=128\nImage_Height=128\nImage_Size=(Image_Width,Image_Height)\nImage_Channels=3","5ad78192":"filenames=os.listdir(\".\/train\")\ncategories=[]\nfor f_name in filenames:\n    category=f_name.split('.')[0]\n    if category=='dog':\n        categories.append(1)\n    else:\n        categories.append(0)\ndf=pd.DataFrame({\n    'filename':filenames,\n    'category':categories\n})","be05d06d":"df.head()","ff44a460":"filenames=os.listdir(\".\/test\")\ndf_test=pd.DataFrame({\n    'filename':filenames\n})","0510135e":"from keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dropout,Flatten,Dense,Activation,BatchNormalization\nmodel=Sequential()\nmodel.add(Conv2D(32,(3,3),activation='relu',input_shape=(Image_Width,Image_Height,Image_Channels)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128,(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\noptimizer='rmsprop',metrics=['accuracy'])\n","7be5a07f":"model.summary()","f94d0207":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\nearlystop = EarlyStopping(patience = 10)\nlearning_rate_reduction = ReduceLROnPlateau(monitor = 'val_acc',patience = 2,verbose = 1,factor = 0.5,min_lr = 0.00001)\ncallbacks = [earlystop,learning_rate_reduction]","294eadb7":"df[\"category\"] = df[\"category\"].replace({0:'cat',1:'dog'})\ntrain_df,validate_df = train_test_split(df,test_size=0.20,\n  random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)\ntotal_train=train_df.shape[0]\ntotal_validate=validate_df.shape[0]\nbatch_size=15","3f338abf":"train_datagen = ImageDataGenerator(rotation_range=15,\n                                rescale=1.\/255,\n                                shear_range=0.1,\n                                zoom_range=0.2,\n                                horizontal_flip=True,\n                                width_shift_range=0.1,\n                                height_shift_range=0.1\n                                )\ntrain_generator = train_datagen.flow_from_dataframe(train_df,\n                                                 \".\/train\",x_col='filename',y_col='category',\n                                                 target_size=Image_Size,\n                                                 class_mode='categorical',\n                                                 batch_size=batch_size)\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(validate_df, \n                                                                \".\/train\", \n                                                                x_col='filename',\n                                                                y_col='category',\n                                                                target_size=Image_Size,\n                                                                class_mode='categorical',\n                                                                batch_size=batch_size\n                                                            )\ntest_datagen = ImageDataGenerator(rotation_range=15,\n                                rescale=1.\/255,\n                                shear_range=0.1,\n                                zoom_range=0.2,\n                                horizontal_flip=True,\n                                width_shift_range=0.1,\n                                height_shift_range=0.1)\ntest_generator = train_datagen.flow_from_dataframe(df_test,\n                                                 \".\/test\",x_col='filename',y_col='category',\n                                                 target_size=Image_Size,\n                                                 class_mode=None,\n                                                 batch_size=batch_size)","125cc9ec":"epochs=10\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","39872863":"model.save(\"model_10epoch.h5\")","b4d7c681":"test_filenames = os.listdir(\".\/test\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","ec604327":"print(test_df,nb_samples)","40b7802c":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","4de923c8":"predict","fbe78bca":"test_df['category'] = np.argmax(predict, axis=-1)\nlabel_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)\ntest_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","98a4242a":"test_df","f5bf67c2":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\".\/test\/\"+filename, target_size=Image_Size)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","7ca7cc4f":"test_df","b3bf7c8f":"test_df.to_csv(\"dogsVScats.csv\", index = False)","3da56457":"## 13. Visualize the prediction results:","0c1423a3":"## 4. Create the neural net model:","08aa677d":"## 7. Training and validation data generator:","af4d0c0c":"## 1. Import the libraries:","fb090084":"## 6. Define callbacks and learning rate:","34f3ed82":"# Main Objective\n\nThe dataset that we will be using, comes from the very popular Dogs vs. Cats Challenge, where our primary objective is to build a deep learning model that can successfully recognize and categorize images into either a cat or a dog.\n\n![](https:\/\/miro.medium.com\/max\/700\/1*R-ItxBW2SWarITBKe7HZuA.gif)","6cc0d50b":"## 12. Convert labels to categories:","63752364":"## 10. Test data preparation:","b1cf1c18":"## 8. Model Training:","af0ab5db":"# Steps to build Cats vs Dogs classifier:","95f5a4aa":"## 2. Define image properties:","c3941e99":"## 11. Make categorical prediction:","6304e308":"## 9. Save the model:","da379da5":"## 5. Analyzing model:","d1ab130e":"## 3. Prepare dataset for training model:"}}