{"cell_type":{"700f177d":"code","5b1e1a32":"code","5b95fe0e":"code","ee1bc888":"code","f4ad0e00":"code","36f061a0":"code","d6bd4c19":"code","d0edce0f":"code","1837245d":"code","c3aeb4ab":"code","1506fab5":"code","0ebb3a8a":"code","f7721907":"code","bbaff14f":"code","b0cbc962":"code","2cbafdca":"code","76f177ea":"code","4aea41a4":"code","027db49c":"code","3d912f7f":"code","dcae329f":"code","868713b0":"markdown","7d6d6e98":"markdown","cd76c710":"markdown","af1d2be9":"markdown","258bfc0b":"markdown","d7f1f4cf":"markdown","cd8173ba":"markdown","6380e3c0":"markdown","a70adf85":"markdown","d429c574":"markdown","19072208":"markdown","0f5c126b":"markdown","fe1fad75":"markdown","3048ea85":"markdown","6b040c81":"markdown","6a4defb3":"markdown"},"source":{"700f177d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sys\nfrom wordcloud import WordCloud\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b1e1a32":"data = pd.read_csv(\"\/kaggle\/input\/pink-floyd-lyrics\/pink_floyd_lyrics.csv\")","5b95fe0e":"data.head()","ee1bc888":"data = data.dropna()","f4ad0e00":"data.info()","36f061a0":"data.album.unique()","d6bd4c19":"darkside = data[data[\"album\"] == \"The Dark Side of the Moon\"]\nwish = data[data[\"album\"] == \"Wish You Were Here\"]\nwall = data[data[\"album\"] == \"The Wall\"]\nanimals = data[data[\"album\"] == \"Animals\"]\nmeddle = data[data[\"album\"] == \"Meddle\"]","d0edce0f":"darkside = darkside.reset_index()\nwish = wish.reset_index()\nwall = wall.reset_index()\nanimals = animals.reset_index()\nmeddle = meddle.reset_index()","1837245d":"def SongSim(lyr, show_table = False, fig_size = (8, 8), ticks = False, title = \"SongSim Table\"):\n    \n    \"\"\"\n    SongSim is a method that creates a similarity matrix for n length text.\n    I inspired by Collin Morris and when I looked his github page for the source code\n    for this but I did not know that it written in css and javascript \n    so I created a python version for SongSim.\n    Github link of actual SongSim: https:\/\/github.com\/colinmorris\/SongSim\n    \"\"\"\n    \n    if type(lyr) is str:\n        \n        punctuations = '''!()-[]{};:'\"\\,<>.\/?@#$%^&*_~'''\n        lyrics = \"\"\n        for char in lyr:\n            if char not in punctuations:\n                lyrics = lyrics + char\n                \n        lyrics = lyrics.lower()\n        lyrics = lyrics.split()\n        \n    else:\n        \n        lyrics = lyr.copy()\n        \n    raw_corrs = []\n    for current_word in lyrics:\n        for word in lyrics:\n            if current_word == word:\n                raw_corrs.append(1)\n\n            else:\n                raw_corrs.append(0)\n\n    corrs = []\n    for length, _ in enumerate(lyrics, start = 1):\n        length *= len(lyrics)\n        corrs.append(raw_corrs[(length - len(lyrics)):length])\n\n    corrs = np.array(corrs)\n\n    uniq, count = np.unique(lyrics, return_counts = True)\n    freq_names = {}\n    for name, freq in zip(uniq, count):\n        freq_names[name] = freq\n\n    freq_names2 = freq_names.copy()\n\n    corrs_dict = {}\n    for indx, c_name in enumerate(lyrics):\n        if c_name in corrs_dict:\n            freq_names2[c_name] -= 1 \n            label = freq_names[c_name] - freq_names2[c_name]\n            corrs_dict[c_name + str(label)] = corrs[indx]\n\n        else:\n            corrs_dict[c_name] = corrs[indx]\n\n    corrs_df = pd.DataFrame(data = corrs_dict)\n\n    songsim = corrs_df.corr()\n    for colmn in songsim.columns:\n        for indx, corr_val in enumerate(songsim[colmn]):\n            if corr_val != 1:\n                songsim[colmn][indx] = 0\n\n            else:\n                continue\n                \n    if show_table == True:\n        f,ax = plt.subplots(figsize = fig_size)\n        res = sns.heatmap(songsim,linecolor = \"none\", xticklabels = ticks, yticklabels = ticks, ax=ax,cmap = \"Greys\", cbar = False)\n        plt.title(title)\n\n        for _, spine in res.spines.items(): \n            spine.set_visible(True) \n            spine.set_linewidth(2) \n\n        plt.show()\n    \n    return songsim","c3aeb4ab":"def clear_lyrics(lyr):\n    \n    if type(lyr) is str:\n        \n        punctuations = '''!()-[]{};:'\"\\,<>.\/?@#$%^&*_~'''\n        lyrics = \"\"\n        for char in lyr:\n            if char not in punctuations:\n                lyrics = lyrics + char\n                \n        lyrics = lyrics.lower()\n        clean = lyrics.split()\n    \n    return clean","1506fab5":"def plot_gallery(data):\n\n    fig, ax = plt.subplots(int(len(data[\"lyrics\"])\/2),2, figsize = (12,(len(data[\"lyrics\"])-1)*3))\n\n    count = 0\n    for r in range(0,int(len(data[\"lyrics\"])\/2)):\n        for c in range(0,2):\n            \n            table= SongSim(data[\"lyrics\"][count])\n            res = sns.heatmap(table, xticklabels = False, yticklabels = False, ax=ax[r,c],cmap = \"Greys\", cbar = False)\n            ax[r,c].set_title(data[\"song_title\"][count])\n\n            for _, spine in res.spines.items(): \n                spine.set_visible(True) \n                spine.set_linewidth(2) \n\n            count += 1\n\n    plt.show()\n    \n    if len(data[\"lyrics\"])%2 == 1:\n        fig, ax = plt.subplots(figsize = (5.5,5.5))\n        \n        table = SongSim(data[\"lyrics\"][count])\n        \n        res = sns.heatmap(table, xticklabels = False, yticklabels = False, ax=ax,cmap = \"Greys\", cbar = False)\n        ax.set_title(data[\"song_title\"][count])\n\n        for _, spine in res.spines.items(): \n            spine.set_visible(True) \n            spine.set_linewidth(2) \n            \n        plt.show()","0ebb3a8a":"plot_gallery(darkside)","f7721907":"cleared = clear_lyrics(darkside[\"lyrics\"][8])\nsong_as_txt = ' '.join([text for text in cleared])\n\nfig = plt.figure(figsize = (12,12))\nfig.suptitle('The Interesting one: Eclipse',fontsize = 15)\n\nwordcloud = WordCloud(width=800, height=300, random_state=42, max_font_size=100, relative_scaling=0.5, background_color='white').generate(song_as_txt)\n\nax1 = plt.subplot(212)\nax1.imshow(wordcloud)\nax1.axis('off')\nax1.set_title(\"WordCloud\")\n\n\nax2 = plt.subplot(221)\nres = sns.heatmap(SongSim(darkside[\"lyrics\"][8]),linecolor = \"none\", xticklabels = False, yticklabels = False, ax=ax2,cmap = \"Greys\", cbar = False)\nax2.set_title(\"Eclipse\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\n    \nax3 = plt.subplot(222)\nres = sns.heatmap(SongSim(cleared[0:20]),linecolor = \"none\", xticklabels = True, yticklabels = True, ax=ax3,cmap = \"Greys\", cbar = False)\nax3.set_title(\"Repeating Diagonals\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\nplt.show()","bbaff14f":"plot_gallery(wish)","b0cbc962":"cleared = clear_lyrics(wish[\"lyrics\"][0])\nsong_as_txt = ' '.join([text for text in cleared])\n\nfig = plt.figure(figsize = (12,12))\nfig.suptitle('The Interesting one: Shine on You Crazy Diamond',fontsize = 15)\n\nwordcloud = WordCloud(width=800, height=300, random_state=42, max_font_size=100, relative_scaling=0.5, background_color='white').generate(song_as_txt)\n\nax1 = plt.subplot(212)\nax1.imshow(wordcloud)\nax1.axis('off')\nax1.set_title(\"WordCloud\")\n\n\nax2 = plt.subplot(221)\nres = sns.heatmap(SongSim(wish[\"lyrics\"][0]),linecolor = \"none\", xticklabels = False, yticklabels = False, ax=ax2,cmap = \"Greys\", cbar = False)\nax2.set_title(\"Shine on You Crazy Diamond\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\n    \nax3 = plt.subplot(222)\nres = sns.heatmap(SongSim(cleared[10:15]),linecolor = \"none\", xticklabels = True, yticklabels = True, ax=ax3,cmap = \"Greys\", cbar = False)\nax3.set_title(\"Repeating Diagonal\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\nplt.show()","2cbafdca":"plot_gallery(wall)","76f177ea":"cleared = clear_lyrics(wall[\"lyrics\"][23])\nsong_as_txt = ' '.join([text for text in cleared])\n\nfig = plt.figure(figsize = (12,12))\nfig.suptitle('The Interesting one: Stop',fontsize = 15)\n\nwordcloud = WordCloud(width=800, height=300, random_state=42, max_font_size=100, relative_scaling=0.5, background_color='white').generate(song_as_txt)\n\nax1 = plt.subplot(212)\nax1.imshow(wordcloud)\nax1.axis('off')\nax1.set_title(\"WordCloud\")\n\n\nax2 = plt.subplot(221)\nres = sns.heatmap(SongSim(wall[\"lyrics\"][23]),linecolor = \"none\", xticklabels = False, yticklabels = False, ax=ax2,cmap = \"Greys\", cbar = False)\nax2.set_title(\"Stop\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\n    \nax3 = plt.subplot(222)\nres = sns.heatmap(SongSim(cleared[36:48]),linecolor = \"none\", xticklabels = True, yticklabels = True, ax=ax3,cmap = \"Greys\", cbar = False)\nax3.set_title(\"Repeating Checkerboard\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\nplt.show()","4aea41a4":"plot_gallery(animals)","027db49c":"cleared = clear_lyrics(animals[\"lyrics\"][2])\nsong_as_txt = ' '.join([text for text in cleared])\n\nfig = plt.figure(figsize = (12,12))\nfig.suptitle('The Interesting one: Pigs (Three Different Ones)',fontsize = 15)\n\nwordcloud = WordCloud(width=800, height=300, random_state=42, max_font_size=100, relative_scaling=0.5, background_color='white').generate(song_as_txt)\n\nax1 = plt.subplot(212)\nax1.imshow(wordcloud)\nax1.axis('off')\nax1.set_title(\"WordCloud\")\n\n\nax2 = plt.subplot(221)\nres = sns.heatmap(SongSim(animals[\"lyrics\"][2]),linecolor = \"none\", xticklabels = False, yticklabels = False, ax=ax2,cmap = \"Greys\", cbar = False)\nax2.set_title(\"Pigs (Three Different Ones)\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\n    \nax3 = plt.subplot(222)\nres = sns.heatmap(SongSim(cleared[6:10]),linecolor = \"none\", xticklabels = True, yticklabels = True, ax=ax3,cmap = \"Greys\", cbar = False)\nax3.set_title(\"Repeating Diagonal\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\nplt.show()","3d912f7f":"plot_gallery(meddle)","dcae329f":"cleared = clear_lyrics(meddle[\"lyrics\"][1])\nsong_as_txt = ' '.join([text for text in cleared])\n\nfig = plt.figure(figsize = (12,12))\nfig.suptitle('The Interesting one: A Pillow of Winds',fontsize = 15)\n\nwordcloud = WordCloud(width=800, height=300, random_state=42, max_font_size=100, relative_scaling=0.5, background_color='white').generate(song_as_txt)\n\nax1 = plt.subplot(212)\nax1.imshow(wordcloud)\nax1.axis('off')\nax1.set_title(\"WordCloud\")\n\n\nax2 = plt.subplot(221)\nres = sns.heatmap(SongSim(meddle[\"lyrics\"][1]),linecolor = \"none\", xticklabels = False, yticklabels = False, ax=ax2,cmap = \"Greys\", cbar = False)\nax2.set_title(\"A Pillow of Winds\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\n    \nax3 = plt.subplot(222)\nres = sns.heatmap(SongSim(cleared[10:25]),linecolor = \"none\", xticklabels = True, yticklabels = True, ax=ax3,cmap = \"Greys\", cbar = False)\nax3.set_title(\"Repeating Diagonal\")\n\nfor _, spine in res.spines.items(): \n    spine.set_visible(True) \n    spine.set_linewidth(2) \n\nplt.show()","868713b0":"### The Interesting one: Pigs (Three Different Ones)\n\n* This one uses short diagonals as well. Verse: \"Haha, charade you are\".","7d6d6e98":"# Functions","cd76c710":"## The Wall\n\n<img src = \"https:\/\/i.imgur.com\/XbUApDM.jpg\" width = \"400\" height = \"400\" \/>","af1d2be9":"### The Interesting one: Stop\n\n* This song uses another common pattern: Checkerboards. Checkerboards represents repeating verses in a song. The length of spacing betwen blocks shows the length of the verse ([length of the verse]-1). In Stop the verse is: \"have to know\". ","258bfc0b":"# Gallery","d7f1f4cf":"## Animals\n\n<img src = \"https:\/\/i.imgur.com\/3sAwUk9.jpg\" width = \"400\" height = \"400\" \/>","cd8173ba":"### The Interesting one: Shine on You Crazy Diamond\n\n* Just like the Eclipse this song has diagonals as well but they are standalone verses this time. The verse is: \"Shine on you crazy diamond\".","6380e3c0":"# Preprocessing","a70adf85":"## Meddle\n\n<img src = \"https:\/\/i.imgur.com\/uiGgsWV.jpg\" width = \"400\" height = \"400\" \/>","d429c574":"# Imports","19072208":"# Conclusion\n* **We analyzed the songs and created a gallery.**\n* **We have seen that Pink Floyd is not that repetitive and does not follow a certain pattern in their songs. That is an expected result because they are a Progressive Rock band.**\n* **If there is something wrong with this kernel please let me know in the comments.**\n\n### **My other kernels: https:\/\/www.kaggle.com\/mrhippo\/notebooks**","0f5c126b":"### The Interesting one: Eclipse\n\n* Eclipse is an interesting one because it has repeating diagonlas. This is a very common pattern in pop music, normally they are long diagonals but in Eclpise they are very short and they represent the \"(and) all that you...\" part.","fe1fad75":"## Wish You Were Here\n\n<img src = \"https:\/\/i.imgur.com\/lcJLwrw.jpg\" width = \"400\" height = \"400\" \/>","3048ea85":"## The Dark Side of the Moon\n\n<img src = \"https:\/\/i.imgur.com\/s349HdQ.jpg\" width = \"400\" height = \"400\" \/>","6b040c81":"### The Interesting one: A Pillow of Winds\n\n* This one has long diagonals. Verse: \"Sleepy time, and I lie with my love by my side and she's breathing low\".","6a4defb3":"# Introduction\n\n* SongSim is method found by **Collin Morris** for visualizing the songs' repetitive parts and intends to find patterns in them. \n* Github link for SongSim: https:\/\/github.com\/colinmorris\/SongSim\n* If you do not know JavaScript and CSS you check out my Python version for it:\n* Github link for Python version: https:\/\/github.com\/bayhippo\/SongSim-in-Python\n\n## How It Works\n\n* SongSim uses self-similarity matrices to visualize patterns of repetition in text. The cell at position (x, y) is filled in if the xth and yth words of the song are the same.\n\n<img src = \"https:\/\/colinmorris.github.io\/SongSim\/img\/about\/barbie.png\" width = \"450\" height = \"450\" \/> \n\n* You can find more information about the patterns here: https:\/\/colinmorris.github.io\/SongSim\/#\/about\/advanced"}}