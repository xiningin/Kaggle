{"cell_type":{"a4864286":"code","5029e5b4":"code","972a3a6c":"code","374cb2fb":"code","19e66a67":"code","35ed0a24":"code","92f178d0":"code","5558e6e7":"code","6469b449":"code","b128c459":"code","2cfafd35":"code","23080f19":"code","90dcd11b":"code","a466ad06":"code","6ec22603":"code","0b14efe3":"code","2529a5a5":"code","4a6758c6":"code","0406b8d5":"code","37fd1b36":"code","46241746":"markdown","42358bfc":"markdown","a6ad684e":"markdown","0e5d36f6":"markdown","e21e03de":"markdown","e56c8c6a":"markdown","ce157c66":"markdown"},"source":{"a4864286":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the \"..\/input\/\" directory.\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # Any results you write to the current directory are saved as output.","5029e5b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport numpy.random as npr\nfrom scipy.optimize import leastsq, curve_fit\nimport math","972a3a6c":"full_table = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate'])\nfull_table.head()","374cb2fb":"index = full_table[full_table['Country\/Region']=='Italy']\nindex = index[index['ObservationDate']=='2020-03-12'].index[0]\nfull_table.at[index, 'Confirmed'] = 15113\n# full_table[full_table['Country\/Region']=='Italy']","19e66a67":"full_table['DayOfWeek'] = full_table['ObservationDate'].dt.dayofweek\nfull_table = full_table[full_table['Country\/Region']!='Cruise Ship']\nfull_table = full_table[full_table['Country\/Region']!='Others']","35ed0a24":"# import coutnry information \ndfCI = pd.read_csv('\/kaggle\/input\/countryinf\/CountryInfo.csv')\ndfCI['Population(Millions)'] = dfCI['Population']\/1000000\ndfCI.head()","92f178d0":"dfFullGB = full_table.groupby(['ObservationDate', 'DayOfWeek', 'Country\/Region'])['Confirmed'].sum().reset_index()\ndfFullGB = dfFullGB.set_index('Country\/Region').join(dfCI.set_index('Country Name')).reset_index()\ndfFullGB = dfFullGB.rename(columns={'index': 'Country\/Region'})\ndfFullGB.head()","5558e6e7":"def getListofSortedCountries(dfRaw, thresholdCases=1):\n    dfSorted = dfRaw.groupby(['ObservationDate','Country\/Region'])['Confirmed'].sum().reset_index()\n    dfSorted = dfSorted.groupby(['Country\/Region'])['Confirmed'].max().reset_index()\n    dfSorted= dfSorted.sort_values('Confirmed',ascending=False, axis=0).reset_index()\n    dfSorted = dfSorted[dfSorted['Confirmed']>=thresholdCases]\n    countries = dfSorted['Country\/Region'].unique()\n    return countries\n\ndef getListofSortedRegions(dfRaw, dfCountryInfo, thresholdCases=1):\n#     dfSorted = dfRaw.set_index('Country\/Region').join(dfCountryInfo.set_index('Country Name')).reset_index()\n    dfSorted = dfRaw.groupby(['ObservationDate','Region'])['Confirmed'].sum().reset_index()\n    dfSorted = dfSorted.groupby(['Region'])['Confirmed'].max().reset_index()\n    dfSorted= dfSorted.sort_values('Confirmed',ascending=False, axis=0).reset_index()\n    dfSorted = dfSorted[dfSorted['Confirmed']>=thresholdCases]\n    regions = dfSorted['Region'].unique()\n    return regions\n\ndef getPivotedCountryData(df, columns):\n    dfFullPivot = df.pivot_table('Confirmed',['ObservationDate', 'DayOfWeek'], 'Country\/Region').reset_index()\n    for column in columns:\n        dfFullPivot[column+'NewCases'] = dfFullPivot[column].diff()\n        dfFullPivot[column+'PctIncrease'] = dfFullPivot[column].pct_change()*100\n        dfFullPivot[column+'PctNewCases'] = dfFullPivot[column+'NewCases'].pct_change()*100\n\n    dfFullPivot = dfFullPivot.reindex(sorted(dfFullPivot.columns), axis=1)\n    return dfFullPivot\n\ndef getPivotedRegionData(df, columns):\n    dfFullPivot = df.groupby(['ObservationDate', 'DayOfWeek', 'Region'])['Confirmed'].sum().reset_index()\n    dfFullPivot = dfFullPivot.pivot_table('Confirmed',['ObservationDate', 'DayOfWeek'], 'Region').reset_index()\n    for column in columns:\n        dfFullPivot[column+'NewCases'] = dfFullPivot[column].diff()\n        dfFullPivot[column+'PctIncrease'] = dfFullPivot[column].pct_change()*100\n        dfFullPivot[column+'PctNewCases'] = dfFullPivot[column+'NewCases'].pct_change()*100\n\n    dfFullPivot = dfFullPivot.reindex(sorted(dfFullPivot.columns), axis=1)\n    return dfFullPivot\n\ndef getShiftedPivotData(dfPivot, columns, thresholdCases):\n    flexPoint = {}\n    for column in columns:\n        for i in dfPivot[[column]].iterrows():\n            if i[1].values[0] >= thresholdCases:\n                flexPoint[column] = i[0]\n#                 print(column, i[0])\n                break\n\n    dfThresholdShifted = dfPivot\n    for column in columns:\n        dfThresholdShifted[column] = dfThresholdShifted[column].shift(-flexPoint[column])\n        dfThresholdShifted[column+'NewCases'] = dfThresholdShifted[column+'NewCases'].shift(-flexPoint[column])\n        dfThresholdShifted[column+'PctIncrease'] = dfThresholdShifted[column+'PctIncrease'].shift(-flexPoint[column])\n        dfThresholdShifted[column+'PctNewCases'] = dfThresholdShifted[column+'PctNewCases'].shift(-flexPoint[column])\n    return dfThresholdShifted\n\ndef getLegendGroup(country):\n    noOfCases = dfFullGB[dfFullGB['Country\/Region']==country]['Confirmed'].max()\n    if noOfCases > 50000:\n        return '50k+'\n    if noOfCases > 10000:\n        return '10k+'\n    elif noOfCases > 1000:\n        return '1k+'\n    elif noOfCases > 300:\n        return '300+'\n    elif noOfCases > 100:\n        return '100+'\n    else:\n        return '<100'\n    \ndef hideLegendEntry(country):\n    if getLegendGroup(country) == '<100':\n        return 'legendonly'\n    if getLegendGroup(country) == '50k+':\n        return 'legendonly'\n    else:\n        return True\n    \ndef showOnly1Country(country, countryToShow):\n    if country != countryToShow:\n        return 'legendonly'\n    else:\n        return True\n    \ndef logistic4(x, A, B, C, D):\n    \"\"\"4PL lgoistic equation.\"\"\"\n    return ((A-D)\/(1.0+((x\/C)**B))) + D\n\ndef residuals(p, y, x):\n    \"\"\"Deviations of data from fitted 4PL curve\"\"\"\n    A,B,C,D = p\n    err = y-logistic4(x, A, B, C, D)\n    return err\n\ndef peval(x, p):\n    \"\"\"Evaluated value at x with current parameters.\"\"\"\n    A,B,C,D = p\n    return logistic4(x, A, B, C, D)\n","6469b449":"thresholdCases = 100\ncountries = getListofSortedCountries(full_table, thresholdCases)\ndfFullPivot = getPivotedCountryData(dfFullGB, countries)\ndfCountryShifted = getShiftedPivotData(dfFullPivot, countries, thresholdCases)\n\nregions = getListofSortedRegions(dfFullGB, dfCI, thresholdCases)\ndfFullPivotRegions = getPivotedRegionData(dfFullGB, regions)\ndfRegionShifted = getShiftedPivotData(dfFullPivotRegions, regions, thresholdCases)","b128c459":"\n# calculate mean pct increase over time. \ndfMeanPctIncrease = dfFullPivot[list(countries)]\nfor country in countries:\n    dfMeanPctIncrease[country] = dfMeanPctIncrease[country].pct_change()*100\n\ndfMeanPctIncrease = dfMeanPctIncrease[dfMeanPctIncrease.replace([np.inf, -np.inf], np.nan).notnull().all(axis=1)]\ndfMeanPctIncrease = dfMeanPctIncrease.mean().reset_index()\ndfMeanPctIncrease.columns = ['Country\/Region', 'MeanPctIncrease']\n\n# Total cases\ndfTotalCases = full_table.groupby(['Country\/Region'])['Confirmed'].max().reset_index()\n\n# join dataframes to create a dataframe of confimred cases together with:\n# - GDP Per Capita\n# - Population\n# - Population (Millions)\n# - Population Density\ndfDemographic = dfMeanPctIncrease.set_index('Country\/Region').join(dfCI.set_index('Country Name')).reset_index()\ndfDemographic = dfDemographic.set_index('Country\/Region').join(dfTotalCases.set_index('Country\/Region')).reset_index()\ndfDemographic['CasesPerMillionPop'] = dfDemographic['Confirmed']\/dfDemographic['Population(Millions)']","2cfafd35":"dfDemographicRegion = dfCI.groupby(['Region'])['Population', 'Population(Millions)'].sum().reset_index()","23080f19":"dfFullBar = dfFullGB.sort_values(['Confirmed','ObservationDate'],ascending=False, axis=0).reset_index()\ndfFullBar['Country\/Region'] = dfFullBar['Country\/Region'].apply(lambda x: getLegendGroup(x) + ' - ' + x)\nfig = px.bar(dfFullBar, x=\"ObservationDate\", y=\"Confirmed\",color='Country\/Region', title='Total Number of Cases Over Time by Country')\n\nfig.show()","90dcd11b":"fig = px.line(title=\"Number of cases by Country - Shifted to start at \" + str(thresholdCases) + \" cases\")\n\nfor country in countries:\n    fig.add_scatter(x=dfCountryShifted.index, y=dfCountryShifted[country], \n                    mode='lines', name=getLegendGroup(country) + ' - ' + country, \n#                     legendgroup=getLegendGroup(country),\n#                     visible =showOnly1Country(country, 'UK')\n                   )\n# fig.update_layout( yaxis_type=\"log\")\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of Cases\",\n)\nfig.show()","a466ad06":"fig = px.line(title=\"Number of new cases by Country - Shifted to start at \" + str(thresholdCases) + \" days\")\nfor country in countries:\n    fig.add_scatter(x=dfCountryShifted.index, y=dfCountryShifted[country+'NewCases'], \n                    mode='lines', name=getLegendGroup(country) + ' - ' + country, \n#                     legendgroup=getLegendGroup(country),\n#                     visible = showOnly1Country(country, 'UK')\n                   )\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of New Cases\",\n)\nfig.show()","6ec22603":"fig = px.line(title=\"Percent Increase of Confirmed by Country - Shifted to start at \" + str(thresholdCases) + \" days\")\nfor country in countries:\n    fig.add_scatter(x=dfCountryShifted.index, y=dfCountryShifted[country+'PctIncrease'], \n                    mode='lines', name=getLegendGroup(country) + ' - ' + country, \n#                     legendgroup=getLegendGroup(country),\n#                     visible = showOnly1Country(country, 'UK')\n                   )\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Percentage Increase\",\n)\nfig.show()","0b14efe3":"thresholdCases = 100\ndfFullNotChina = dfFullGB[dfFullGB['Country\/Region']!='Mainland China']\n# dfFullNotChina = dfFullNotChina[dfFullNotChina['Country\/Region']!='Italy']\nregions = getListofSortedRegions(dfFullNotChina, dfCI, thresholdCases)\ndfFullPivotRegions = getPivotedRegionData(dfFullNotChina, regions)\ndfRegionShifted = getShiftedPivotData(dfFullPivotRegions, regions, thresholdCases)\n","2529a5a5":"fig = px.line(title=\"Number cases by Region (excl China) - Shifted to start at \" + str(thresholdCases) + \" days\")\nfor region in regions:\n    fig.add_scatter(x=dfRegionShifted.index, y=dfRegionShifted[region], \n                    mode='lines', name=region)\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of Cases\",\n)\nfig.show()","4a6758c6":"fig = px.line(title=\"Number of new cases by Region (excl China) - Shifted to start at \" + str(thresholdCases) + \" cases\")\nfor region in regions:\n    fig.add_scatter(x=dfRegionShifted.index, y=dfRegionShifted[region+'NewCases'], \n                    mode='lines', name=region)\n    \n    \nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of New Cases\",\n)\nfig.show()\n\ndfDemographicRegion\n","0406b8d5":"thresholdCases = 1\ncountries = getListofSortedCountries(full_table, thresholdCases)\ndfFullPivot = getPivotedCountryData(dfFullGB, countries)\ndfCountryShifted = getShiftedPivotData(dfFullPivot, countries, thresholdCases)\n\nfig = px.line(title=\"Logistic Curve Fitting by Country\")\ncolors = [\n    '#1f77b4',  # muted blue\n    '#ff7f0e',  # safety orange\n    '#2ca02c',  # cooked asparagus green\n    '#d62728',  # brick red\n    '#9467bd',  # muted purple\n    '#8c564b',  # chestnut brown\n    '#e377c2',  # raspberry yogurt pink\n    '#7f7f7f',  # middle gray\n    '#bcbd22',  # curry yellow-green\n    '#17becf'   # blue-teal\n]\n# countries = getListofSortedCountries(full_table, 30)\ndf = pd.DataFrame(columns=['A','B','C','D','Country'])\n\ni = 0\nfor country in countries:\n    color = colors[i]\n    i+=1\n    if i == 10:\n        i=0\n    pop = dfDemographic[dfDemographic['Country\/Region']==country]['Population(Millions)'].values[0]\n    x = list(range(0,200,1))\n    y_meas = dfCountryShifted[country].dropna().shift(0).values#\/pop\n    x1 = list(range(0,len(y_meas),1))\n    p0 = [0.12921726,  4.20419294, 8.80087419, 30000.47285608]\n    \n#     print(country)\n    if country == 'Diamond Princess':\n        break\n\n    # Fit equation using least squares optimization\n    plsq = leastsq(residuals, p0, args=(y_meas, x1))\n    df.loc[len(df)] = ['%.2f'%plsq[0][0],'%.2f'%plsq[0][1],'%.2f'%plsq[0][2],'%.2f'%plsq[0][3], country]\n    fig.add_scatter(x=x, y=y_meas#*pop\n                    ,mode='markers', name=getLegendGroup(country) + ' - ' + country,legendgroup=country,\n                    visible = showOnly1Country(country,'US'),\n                    line_color=color)\n    fig.add_scatter(x=x, y= peval(x,plsq[0])#*pop\n                    ,mode='lines',  name=getLegendGroup(country) + ' - ' + country,legendgroup=country,\n                    visible = showOnly1Country(country,'US'), \n                    line_color=color)\n# fig.update_layout( yaxis_type=\"log\")\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of Cases\",\n)\nfig.show()\ndf","37fd1b36":"thresholdCases = 1\ndfFullNotChina = dfFullGB[dfFullGB['Country\/Region']!='Mainland China']\nregions = getListofSortedRegions(dfFullNotChina, dfCI, thresholdCases)\ndfFullPivotRegions = getPivotedRegionData(dfFullNotChina, regions)\ndfRegionShifted = getShiftedPivotData(dfFullPivotRegions, regions, thresholdCases)\n\nfig = px.line(title=\"Logistic Curve Fitting by Country (excl China)\")\ncolors = [\n    '#1f77b4',  # muted blue\n    '#ff7f0e',  # safety orange\n    '#2ca02c',  # cooked asparagus green\n    '#d62728',  # brick red\n    '#9467bd',  # muted purple\n    '#8c564b',  # chestnut brown\n    '#e377c2',  # raspberry yogurt pink\n    '#7f7f7f',  # middle gray\n    '#bcbd22',  # curry yellow-green\n    '#17becf'   # blue-teal\n]\ndf = pd.DataFrame(columns=['A','B','C','D','Country'])\n\ni = 0\nfor region in regions:\n    color = colors[i]\n    i+=1\n    if i == 10:\n        i=0\n#     pop = dfDemographicRegion[dfDemographicRegion['Region']==region]['Population(Millions)'].values[0]\n    x = list(range(0,150,1))\n    y_meas = dfRegionShifted[region].dropna().shift(0).values#\/pop\n    x1 = list(range(0,len(y_meas),1))\n    p0 = [0.12921726,  4.20419294, 8.80087419, 30000.47285608]\n    \n    # Fit equation using least squares optimization\n    plsq = leastsq(residuals, p0, args=(y_meas, x1))\n    df.loc[len(df)] = ['%.2f'%plsq[0][0],'%.2f'%plsq[0][1],'%.2f'%plsq[0][2],'%.2f'%plsq[0][3], region]\n    fig.add_scatter(x=x, y=y_meas,#*pop, \n                    mode='markers', name=region,legendgroup=region,\n#                     visible = 'legendonly',\n                    line_color=color)\n    fig.add_scatter(x=x, y= peval(x,plsq[0]),#*pop, \n                    mode='lines',  name=region,legendgroup=region,\n#                     visible = showOnly1Country(country,'UK'), \n                    line_color=color)\nfig.update_layout(\n    xaxis_title=\"Days Since \" + str(thresholdCases) + \" case\",\n    yaxis_title=\"Number of Cases\",\n)\nfig.show()\ndf","46241746":"# COVID - 19 EDA and Four Parameter Logistic Regression\nMy attempt here is to see if it's possible to forecast the total number of confirmed cases by using four parameter logistic regression.\n\nThe data will be combined with country info data and the analysis done by both country and by region.  It will be seen that Europe has dealt with the outbreak worse than other regions, even when taking Italy out of consideration. ","42358bfc":"References: \n* https:\/\/www.myassays.com\/four-parameter-logistic-regression.html\n    ","a6ad684e":"** Import country info data**\nhttps:\/\/data.worldbank.org\/indicator\/SP.POP.TOTL","0e5d36f6":"**Four Parameter Logistic (4PL) Regression**\n\nThis leads us to another model of higher complexity that is more suitable for many biologic systems. This model is known as the 4 parameter logistic regression (4PL). It is quite useful for dose response and\/or receptor-ligand binding assays, or other similar types of assays. As the name implies, it has 4 parameters that need to be estimated in order to \u201cfit the curve\u201d. The model fits data that makes a sort of S shaped curve. The equation for the model is:\n\nOf course x = the independent variable and y = the dependent variable just as in the linear model above. The 4 estimated parameters consist of the following:\n\na = the minimum value that can be obtained (i.e. what happens at 0 dose)\n\nd = the maximum value that can be obtained (i.e. what happens at infinite dose)\n\nc = the point of inflection (i.e. the point on the S shaped curve halfway between a and d)\n\nb = Hill\u2019s slope of the curve (i.e. this is related to the steepness of the curve at point c).","e21e03de":"** Shift country and region data so that each country's data is shifted when that country got to 500 cases **\nThis helps set a baseline for comparison","e56c8c6a":"** Combine coutnry info with covid dataset **","ce157c66":"![image.png](attachment:image.png)"}}