{"cell_type":{"1ffc3522":"code","ec967431":"code","2613eb75":"code","e5fb7ab2":"code","1589f00c":"code","68f621ee":"code","d636d59d":"code","64e31fe7":"code","8071c31c":"code","9184a816":"code","0a0e3a1f":"code","ee29488c":"code","48964359":"code","db75370f":"code","1ceed0f9":"code","58cd58ec":"code","0aeffe39":"code","d7dc0c6a":"code","6724e1bd":"code","c718c0a7":"code","e454e113":"markdown","eaf81df6":"markdown","5975d253":"markdown"},"source":{"1ffc3522":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ec967431":"# read train \ntrain = pd.read_csv(\"..\/input\/train.csv\")\nprint(train.shape)\ntrain.head()","2613eb75":"# read test \ntest= pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\ntest.head()","e5fb7ab2":"# put labels into y_train variable\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) ","1589f00c":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","68f621ee":"# plot some samples\nimg = X_train.iloc[0].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","d636d59d":"# plot some samples\nimg = X_train.iloc[3].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","64e31fe7":"# Normalize the data\nX_train = X_train \/ 255.0   #255 renk say\u0131s\u0131  siyah beyaz yap\u0131lacak\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","8071c31c":"# Reshape\n#28*28*1 1 boyutlu keras boyut  anlam\u0131yor\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","9184a816":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes = 10)","0a0e3a1f":"# Split the train and the validation set for the fitting\n# train setini i\u00e7inden train ve test olarak b\u00f6l\u00fcyoruz normal test setini deneme i\u00e7in kullan\u0131caz\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","ee29488c":"# Some examples\nplt.imshow(X_train[2][:,:,0],cmap='gray')\nplt.show()","48964359":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","db75370f":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","1ceed0f9":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","58cd58ec":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","0aeffe39":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%  0,1 best\n        width_shift_range=0.1,  # randomly shift images horizontally 10%  +++\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","d7dc0c6a":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","6724e1bd":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","c718c0a7":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","e454e113":"Label Encoding\nEncode labels to one hot vectors\n2 => [0,0,1,0,0,0,0,0,0,0]\n4 => [0,0,0,0,1,0,0,0,0,0]","eaf81df6":"\n##Yeniden \u015fekillendir\nResimleri e\u011fitin ve test edin (28 x 28)\nT\u00fcm verileri 28x28x1 3D matrislere yeniden \u015fekillendiriyoruz.\nKeras'\u0131n sonunda kanallara kar\u015f\u0131l\u0131k gelen fazladan bir boyuta ihtiyac\u0131 vard\u0131r. G\u00f6rsellerimiz gri \u00f6l\u00e7eklidir, bu nedenle sadece bir kanal kullan\u0131r\n1 = siyah beyaz 3 =renli rgb","5975d253":"\nNormalle\u015ftirme\nAyd\u0131nlatman\u0131n farkl\u0131l\u0131klar\u0131n\u0131n etkisini azaltmak i\u00e7in gri tonlamal\u0131 normalle\u015ftirme yap\u0131yoruz.\nNormalle\u015ftirme yaparsak CNN daha h\u0131zl\u0131 \u00e7al\u0131\u015f\u0131r."}}