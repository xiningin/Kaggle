{"cell_type":{"e82885ea":"code","8e9e25c1":"code","efc73a03":"code","1e2639e2":"code","b4b72a31":"code","2cf5adf1":"code","5ce8bf7d":"code","e2664466":"code","1fc57e1e":"code","86c0f1c9":"code","cccbfc64":"code","90283f71":"code","383b036d":"code","e5c0117f":"code","f19fdfbb":"code","819b11cc":"code","510c81e9":"code","82d65725":"markdown","d489e279":"markdown","33e2ed45":"markdown","82ac8f53":"markdown","e9f54ced":"markdown","f9e8d426":"markdown","7e3f0f0e":"markdown"},"source":{"e82885ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e9e25c1":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\") \nprint(train.shape)\ntrain.head()","efc73a03":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","1e2639e2":"#put labels into y_train variable\nY_train = train[\"label\"]\n# drop label column\nX_train =train.drop(labels=[\"label\"],axis=1)","b4b72a31":"plt.figure(figsize=(15,7))\nsns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of Digit Classes\")\nY_train.value_counts()","2cf5adf1":"X_train = X_train\/255.0\ntest = test\/255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","5ce8bf7d":"# Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","e2664466":"# Label Encoding\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes=10)","1fc57e1e":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape) ","86c0f1c9":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","cccbfc64":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","90283f71":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","383b036d":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","e5c0117f":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","f19fdfbb":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","819b11cc":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","510c81e9":"import seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","82d65725":"## Modelling\n* conv => max pool => dropout => conv => max pool => dropout => fully connected (2 layer)","d489e279":"## Define Optimizer\n* Adam optimizer: Change the learning rate","33e2ed45":"## Normalization, Reshape and Label Encoding\n* Normalization\n  * We perform a grayscale normalization to reduce the effect of illumination's differences.\n  * If we perform normalization, CNN works faster.\n* Reshape\n  * Train and test images (28 x 28)\n  * We reshape all data to 28x28x1 3D matrices.\n  * Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel.\n* Label Encoding\n  * Encode labels to one hot vectors\n    * 2 => [0,0,1,0,0,0,0,0,0,0]\n    * 4 => [0,0,0,0,1,0,0,0,0,0]","82ac8f53":"## Compile Model\n* categorical crossentropy","e9f54ced":"## Loading the Dataset ","f9e8d426":"## Train-Test Split","7e3f0f0e":"# Convolutional Neural Networks (CNN)\n\nContent\n* [Loading the Dataset](#1)\n* [Normalization, Reshape and Label Encoding](#2)\n* [Train-Test Split](#3)\n* [Modelling](#4)\n\n"}}