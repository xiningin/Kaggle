{"cell_type":{"93328e37":"code","bb60da4f":"code","bf912132":"code","ba68ef95":"code","24f9f815":"code","b7a26a81":"code","3b86f319":"code","192d5532":"code","4e482193":"code","8de0af5a":"code","a18d6a7d":"code","62d0c83d":"code","9214edaa":"code","287357bd":"code","e42702cb":"code","74891896":"code","6cd9d8c0":"code","41ab3718":"code","26d3193d":"code","9c8c2205":"code","11772d18":"code","fc933415":"code","235e559f":"code","8612d29e":"code","b3778a74":"code","2c0ecd3a":"code","37f013a5":"code","5217cee4":"code","f5decd34":"code","61f59df1":"code","66d8a86f":"code","582340d7":"markdown","a1793358":"markdown","b8647f15":"markdown","d5484f3f":"markdown","fcb0e7b0":"markdown","4ea83fc1":"markdown","95434f42":"markdown","c32af255":"markdown"},"source":{"93328e37":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np #  linear  algebra\nimport pandas as pd # data processing, CSV file I\/O  (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb60da4f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.options.display.max_columns = 999\n","bf912132":"\ndf=pd.read_csv('\/kaggle\/input\/bike-sharing\/hour.csv')\ndf.head()","ba68ef95":"# statistical info\ndf.describe()","24f9f815":"# datatype info\ndf.info()","b7a26a81":"# unique values\n\ndf.apply(lambda x: len(x.unique()))","3b86f319":"# check for null values\ndf.isnull().sum()","192d5532":"df=df.rename(columns={'weathersit':'weather',\n                      'yr': 'year', \n                      'hr' : 'hour',\n                      'hum': 'humidity',\n                      'mnth':'month',\n                      'cnt': 'count'})\ndf.head()","4e482193":"\ndf=df.drop(columns=['instant', 'dteday', 'year'])","8de0af5a":"# change int columns to category\ncols = ['season', 'month', 'hour', 'holiday','weekday','workingday', 'weather']\n\nfor col in cols:\n    df[col]=df[col].astype('category')\ndf.info()","a18d6a7d":"fig,ax=plt.subplots(figsize=(20,10))\nsns.pointplot(data=df,x=\"hour\", y=\"count\", hue=\"weekday\", ax=ax)\nax.set(title=\"Count of bikes during weekdays and weekends\")","62d0c83d":"fig,ax=plt.subplots(figsize=(20,10))\nsns.pointplot(data=df,x=\"hour\", y=\"casual\", hue=\"weekday\", ax=ax)\nax.set(title=\"Count of bikes during weekdays and weekends: Unregistered Users\")","9214edaa":"fig,ax=plt.subplots(figsize=(20,10))\nsns.pointplot(data=df,x=\"hour\", y=\"registered\", hue=\"weekday\", ax=ax)\nax.set(title=\"Count of bikes during weekdays and weekends: Registered Users\")","287357bd":"fig,ax=plt.subplots(figsize=(20,10))\nsns.pointplot(data=df,x=\"hour\", y=\"count\", hue=\"weather\", ax=ax)\nax.set(title=\"Count of bikes during different weathers\")","e42702cb":"fig,ax=plt.subplots(figsize=(20,10))\nsns.pointplot(data=df,x=\"hour\", y=\"count\", hue=\"season\", ax=ax)\nax.set(title=\"Count of bikes during different seasons\")","74891896":"fig,ax=plt.subplots(figsize=(20,10))\nsns.barplot(data=df,x=\"month\", y=\"count\", ax=ax)\nax.set(title=\"Count of bikes during different months\")","6cd9d8c0":"fig,ax=plt.subplots(figsize=(20,10))\nsns.barplot(data=df,x=\"weekday\", y=\"count\", ax=ax)\nax.set(title=\"Count of bikes during different days\")","41ab3718":"fig, (ax1,ax2)= plt.subplots(ncols=2,figsize=(20,6))\nsns.regplot(x=df['temp'],y=df['count'],ax=ax1)\nax1.set(title=\"Relation between temperature and users\")\nsns.regplot(x=df['humidity'],y=df['count'],ax=ax2)\nax1.set(title=\"Relation between humidity and users\")\n","26d3193d":"from statsmodels.graphics.gofplots import qqplot\nfig, (ax1,ax2)= plt.subplots(ncols=2,figsize=(20,6))\nsns.distplot(df['count'],ax=ax1)\nax1.set(title=\"Distribution of the users\")\nqqplot(df['count'],ax=ax2,line='s')\nax2.set(title=\"Theortical quantities\")","9c8c2205":"df['count']=np.log(df['count'])","11772d18":"fig, (ax1,ax2)= plt.subplots(ncols=2,figsize=(20,6))\nsns.distplot(df['count'],ax=ax1)\nax1.set(title=\"Distribution of the users\")\nqqplot(df['count'],ax=ax2,line='s')\nax2.set(title=\"Theortical quantities\")","fc933415":"corr = df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr,annot=True,annot_kws={'size':15})","235e559f":"df_oh=df\n\ndef one_hot_encoding(data,column):\n    data=pd.concat([data,pd.get_dummies(df[column], prefix=column, drop_first=True)], axis=1)\n    data=data.drop([column],axis=1)\n    return data\n\ncols=['season', 'month', 'hour', 'holiday', 'weekday', 'workingday', 'weather']\n\nfor col in cols:\n    df_oh=one_hot_encoding(df_oh, col)\ndf_oh.head()","8612d29e":"X=df_oh.drop(columns=['atemp', 'windspeed', 'casual', 'registered', 'count'], axis=1)\ny=df_oh['count']","b3778a74":"from sklearn.linear_model import LinearRegression, Ridge, HuberRegressor, ElasticNetCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor , GradientBoostingRegressor, ExtraTreesRegressor\n\nmodels =[LinearRegression(),\n        Ridge(),\n        HuberRegressor(),\n        ElasticNetCV(),\n        DecisionTreeRegressor(),\n        RandomForestRegressor(),\n        ExtraTreesRegressor(),\n        GradientBoostingRegressor()]","2c0ecd3a":"from sklearn import model_selection\ndef train(model):\n    kfold=model_selection.KFold(n_splits=5, random_state=42, shuffle=True)\n    pred=model_selection.cross_val_score(model, X,y, cv=kfold, scoring='neg_mean_squared_error')\n    cv_score=pred.mean()\n    print('Model', model)\n    print('CV score', abs(cv_score))","37f013a5":"for model in models:\n    train(model)","5217cee4":"from sklearn.model_selection import train_test_split\nX_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)","f5decd34":"model=RandomForestRegressor()\nmodel.fit(X_train,y_train)\ny_pred=model.predict(x_test)","61f59df1":"# plot the error difference\n\nerror = y_test-y_pred\nfig,ax=plt.subplots()\nax.scatter(y_test,error)\nax.axhline(lw=3, color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Error')\nplt.show()","66d8a86f":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test,y_pred))","582340d7":"### Preprocessing of Data","a1793358":"### Model Training","b8647f15":"### Input Split","d5484f3f":"### Loading the dataset","fcb0e7b0":"### Exploratory Data Analysis","4ea83fc1":"### Coorelation Matrix","95434f42":"### One hot Encoding","c32af255":"### Import Modules"}}