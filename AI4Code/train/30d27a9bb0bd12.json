{"cell_type":{"39e76e11":"code","ab6a4a40":"markdown"},"source":{"39e76e11":"class Node:\n   def __init__(self, value):\n      self.value = value\n      self.next = None\n \nclass Stack:\n   def __init__(self):\n      self.head = Node(\"head\")\n      self.size = 0\n \n   def __str__(self):\n      cur = self.head.next\n      out = \"\"\n      while cur:\n         out += str(cur.value) + \"->\"\n         cur = cur.next\n      return out[:-3]  \n\n   def getSize(self):\n      return self.size\n\n   def isEmpty(self):\n      return self.size == 0\n    \n   \n   def peek(self):\n       \n\n      if self.isEmpty():\n         raise Exception(\"Peeking from an empty stack\")\n      return self.head.next.value\n \n \n   def push(self, value):\n      node = Node(value)\n      node.next = self.head.next\n      self.head.next = node\n      self.size += 1\n      \n   \n   def pop(self):\n      if self.isEmpty():\n         raise Exception(\"Popping from an empty stack\")\n      remove = self.head.next\n      self.head.next = self.head.next.next\n      self.size -= 1\n      return remove.value\n \n# Driver Code\nif __name__ == \"__main__\":\n   stack = Stack()\n   for i in range(1, 11):\n      stack.push(i)\n   print(f\"Stack: {stack}\")\n \n   for _ in range(1, 6):\n      remove = stack.pop()\n      print(f\"Pop: {remove}\")\n   print(f\"Stack: {stack}\")","ab6a4a40":"#Contoh Stack dengan Bahasa Pemrogaman Python\n- Stack (disebut pula \u201cpush-down stack\u201d) adalah koleksi berurut dari item-item dimana penambahan item baru dan penghapusan item yang telah ada selalu terjadi diujung yang sama -"}}