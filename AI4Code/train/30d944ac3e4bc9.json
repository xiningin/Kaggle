{"cell_type":{"f9fe1401":"code","e65a5e02":"code","c522d721":"code","17d09bdc":"code","0e2004c1":"code","ae4a3a98":"code","5c3e04da":"code","1953733f":"code","bd524287":"code","3351c8d7":"code","d4e14a26":"code","7886074c":"code","fec63095":"code","aacf902a":"code","f5262f24":"code","9ddaf36f":"code","b616a7ac":"code","7a3814f9":"code","1b2f8044":"code","9a718e17":"code","89618c61":"code","8b7a5248":"code","1b8abd6c":"code","73a76b36":"code","8dbac478":"code","e399d621":"markdown","2c670f22":"markdown","308526c3":"markdown","11d3f84a":"markdown","b8d1edef":"markdown","df1e6833":"markdown","55435edf":"markdown","ee9272bd":"markdown","67176f4b":"markdown","1bbf8bd7":"markdown","bd0657b4":"markdown","cdc3a6cd":"markdown","0d7c0f42":"markdown","0cd530f6":"markdown","a9dccf22":"markdown","4fd2bfc9":"markdown","42f0e254":"markdown","b2de8ed3":"markdown"},"source":{"f9fe1401":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e65a5e02":"input_data = pd.read_csv(\"\/kaggle\/input\/nasa-airfoil-self-noise\/NASA_airfoil_self_noise.csv\")","c522d721":"input_data.describe()","17d09bdc":"input_data.corr()","0e2004c1":"input_data[\"Frequency\"].plot(kind=\"hist\")","ae4a3a98":"input_data[\"AngleAttack\"].plot(kind=\"hist\")","5c3e04da":"input_data[\"ChordLength\"].plot(kind=\"hist\")","1953733f":"input_data[\"FreeStreamVelocity\"].plot(kind=\"hist\")","bd524287":"input_data[\"SuctionSide\"].plot(kind=\"hist\")","3351c8d7":"input_data[\"Sound\"].plot(kind=\"hist\")","d4e14a26":"y = input_data[\"Sound\"]\nX = input_data.drop(\"Sound\", axis=1)","7886074c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)","fec63095":"import keras\nfrom keras.layers import *\nmodel = keras.models.Sequential()\nmodel.add(Dense(128, input_dim = 5, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dense(1, activation=\"linear\"))","aacf902a":"from keras import metrics\nmodel.compile(optimizer=\"adam\", loss = \"mean_squared_error\", metrics=[metrics.MeanSquaredError()])","f5262f24":"model.fit(X_train, y_train, batch_size = 64, epochs = 5000, verbose = 0)","9ddaf36f":"model.summary()","b616a7ac":"loss = model.evaluate(X_test, y_test, verbose=1)","7a3814f9":"print(\"Mean Squared Error:\", loss)\nprint(\"Root Mean Squared Error:\", np.sqrt(loss))","1b2f8044":"y_pred = model.predict(X_test)","9a718e17":"import numpy as np\nimport seaborn as sns\nsns.residplot(y_test, y_pred, lowess=True, color=\"g\")\n","89618c61":"from matplotlib import pyplot\npyplot.scatter(y_test, y_pred)","8b7a5248":"y_pred_1 = y_pred.flatten()","1b8abd6c":"import numpy as np\nimport scipy.stats\ncorr , _ = scipy.stats.pearsonr(y_test, y_pred_1)\nprint(\"Pearsons correlation:\", corr)","73a76b36":"r2 = np.power(corr,2)\nprint(r2)","8dbac478":"from scipy import stats\nimport numpy as np\nslope, intercept, r_value, p_value, std = stats.linregress(y_test,y_pred_1)\nprint(slope, intercept)","e399d621":"A scatterplot of our predictions vs the actual values for the test set.","2c670f22":"Summary of the model.","308526c3":"The following is a correlation table showing the value of *r*, the correlation coefficient, for linear regressions using each combination of variables. ","11d3f84a":"Splitting data into features and objective.","b8d1edef":"Linear Regression of Observed vs Predicted.","df1e6833":"The following is a statistical summary of each variable, incuding the objective (sound). Listed for each variable is the five-number summary, the sample size (n), the mean, and the standard deviation.","55435edf":"Changing the dimensionality of our predictions to match the input data so we can calculate the correlation coefficient.","ee9272bd":"Creating a train\/test split of 80\/20.","67176f4b":"Constructing the actual model layer by layer. The \"relu\" activation function is used for all Dense layers except the last one, where a linear one is used.","1bbf8bd7":"Reading the input data.","bd0657b4":"# AP Statistics Final Project\n**Neural Network for Predicting Airfoil Self-Nosie**\n\nThe [data](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Airfoil+Self-Noise) from this project is a Kaggle mirror of a NASA dataset from the open source UC Irvine Machine Learning Repository.\n\nMore details about data features and the data set itself can be found at the link above, or in my presentation.\n\nThe objective of this model is the sound pressure level of the airfoil, measured in decibels (dB). ","cdc3a6cd":"Compiling the model.","0d7c0f42":"Fitting the model to the training data.","0cd530f6":"Creating a residual plot of predicted vs actual values to see if it appropriate to calculate the correlation coefficient *r*.","a9dccf22":"Calculating the value of the correlation coefficient *r* between our predictions on the test set and the actual values.","4fd2bfc9":"Calculating the loss of the model on the test set (in this case, it is mean squared error).","42f0e254":"The following six graphs are histograms of the five feature variables, and the single output variable.","b2de8ed3":"Calculating *r^2*"}}