{"cell_type":{"ac3537f8":"code","bb556783":"code","4e53c2dc":"code","29813444":"code","61aa1be4":"code","a9f1b169":"code","959e5011":"code","815cf940":"code","b405aebd":"code","e1e892d6":"code","b591c939":"code","391f305f":"code","e1ce1ddb":"code","6a77c1b0":"code","da4c5203":"code","7430b118":"code","34700530":"code","8f8a9552":"code","7f201137":"code","484f1584":"code","83ae9ed2":"code","1735efe1":"code","a78e8ccc":"code","390ea8c2":"code","d1678015":"code","5b95d389":"code","912d7db6":"code","4724ac1b":"code","7b535163":"code","d31dd2ac":"code","cab41c2d":"code","fe46f392":"code","e0f7b3fd":"code","bd1e05b7":"code","3ec6dc4f":"code","92a6c68c":"code","7f495b6f":"code","895192ec":"code","57849292":"code","73e0ca8a":"code","d05ed152":"code","9193dcce":"code","8dcfb162":"code","1fb5e913":"code","475632a5":"code","fcb27355":"code","b0b9a896":"code","f4aa1b74":"markdown","e7985f92":"markdown","52068f11":"markdown","110270fc":"markdown","1d0a15f2":"markdown","2d1651f1":"markdown","61654e98":"markdown","65036787":"markdown","eef35aab":"markdown","7dd29d06":"markdown","178050e1":"markdown","937aff97":"markdown","66a42d85":"markdown","6716a049":"markdown","59ffca73":"markdown","65d15139":"markdown","63d98bd6":"markdown"},"source":{"ac3537f8":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS","bb556783":"tweets_df = pd.read_csv(\"..\/input\/nft-tweets\/NFT_tweets.csv\")","4e53c2dc":"print(f\"data shape: {tweets_df.shape}\")","29813444":"tweets_df.info()","61aa1be4":"tweets_df.describe()","a9f1b169":"tweets_df.head()","959e5011":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","815cf940":"missing_data(tweets_df)","b405aebd":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","e1e892d6":"unique_values(tweets_df)","b591c939":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","391f305f":"most_frequent_values(tweets_df)","e1ce1ddb":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","6a77c1b0":"plot_count(\"user_name\", \"User name\", tweets_df,4)","da4c5203":"plot_count(\"user_location\", \"User location\", tweets_df,4)","7430b118":"plot_count(\"source\", \"Source\", tweets_df,4)","34700530":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","8f8a9552":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","7f201137":"india_df = tweets_df.loc[tweets_df.user_location==\"India\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from India')","484f1584":"us_df = tweets_df.loc[tweets_df.user_location==\"United States\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from US')","83ae9ed2":"us_df = tweets_df.loc[tweets_df.user_location==\"United Kingdom\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from UK')","1735efe1":"us_df = tweets_df.loc[tweets_df.user_location==\"Canada\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from Canada')","a78e8ccc":"india_df = tweets_df.loc[tweets_df.user_location==\"South Africa\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from South Africa')","390ea8c2":"india_df = tweets_df.loc[tweets_df.user_location==\"Switzerland\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from Switzerland')","d1678015":"us_df = tweets_df.loc[tweets_df.user_location==\"London\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from London')","5b95d389":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","912d7db6":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","4724ac1b":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","7b535163":"show_wordcloud(tweets_df['hashtags_individual'], title = 'Prevalent words in hashtags')","d31dd2ac":"country_df = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","cab41c2d":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]\ncountry_df.head()","fe46f392":"tweets_df['country'] = tweets_df['user_location']","e0f7b3fd":"tweets_df = tweets_df.merge(country_df, on=\"country\")","bd1e05b7":"tweets_df.head(10)","3ec6dc4f":"tw_add_df = tweets_df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","92a6c68c":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()    ","7f495b6f":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","895192ec":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","57849292":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","73e0ca8a":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","d05ed152":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","9193dcce":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","8dcfb162":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","1fb5e913":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","475632a5":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","fcb27355":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","b0b9a896":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","f4aa1b74":"### Hashtags analysis","e7985f92":"<h1>Non Fongible Tokens Tweets<\/h1>\n\n\n<img src=\"https:\/\/mecaluxfr.cdnwm.com\/blog\/img\/nft-technologie-supply-chain.1.2.jpg\" width=\"600\"><\/img>\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n\n### Original notebook comes from Gabriel Preda here https:\/\/www.kaggle.com\/gpreda\/coronavirus-covid-19-tweets\/notebook. Please upvote him \n","52068f11":"### Extract country from location\n\nWe load the country list from the additional database we added to this Notebook. We also create a `country` column in the original dataset.","110270fc":"### Time variation","1d0a15f2":"### Missing data","2d1651f1":"### User name","61654e98":"We merge the countries dataset with the tweets dataset.","65036787":"### Text wordcloauds","eef35aab":"### Tweet source","7dd29d06":"## Load data","178050e1":"### Extract date and time features","937aff97":"## Visualize the data distribution","66a42d85":"# Data exploration\n\n\n## Glimpse the data","6716a049":"### Unique values","59ffca73":"# Data preparation\n\n## Load packages","65d15139":"### Most frequent values","63d98bd6":"### User location"}}