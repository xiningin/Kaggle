{"cell_type":{"1221c730":"code","2efdfd0f":"code","4d768a4b":"code","c533c571":"code","4a89a5a0":"code","604bc669":"code","c16363b8":"code","1423b79c":"code","5d337c14":"code","2ec1c529":"code","eb16e054":"code","74b29a42":"code","9b281326":"code","f7310712":"code","d4a0a24a":"code","e83de4d4":"code","71614c54":"code","b7b6d6d3":"code","6c76861e":"code","f5e0e838":"code","fe5c1de6":"code","6f4b8caa":"code","b701b69a":"code","c6f7d8f5":"markdown"},"source":{"1221c730":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2efdfd0f":"import sklearn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","4d768a4b":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c533c571":"pd.set_option('display.max_row',None)\npd.set_option('display.max_columns',None)","4a89a5a0":"\ntrain.head()","604bc669":"test.head()","c16363b8":"train.describe()","1423b79c":"#cheching %of null values in each features\nnull_cols = train.isnull().sum()\/train.shape[0]*100","5d337c14":"#seperate null values more than 10 %\nnull_cols_rm = null_cols[null_cols>10].keys()","2ec1c529":"# droping the columns which have more than 10% of null values\ntrain1 = train.drop(columns=null_cols_rm,axis=1)","eb16e054":"#after removing the columns having more than 10% null values, checking the null columns\nnull_cols = train1.isnull().sum()\/train1.shape[0]*100\nnull_cols = null_cols.keys()\nnull_cols","74b29a42":"#seperating numerical variable with categorical variable\n\nnum_var = train1[null_cols].select_dtypes(include=['int64', 'float64']).columns\nnum_var","9b281326":"cat_var = train1[null_cols].select_dtypes(include='object').columns\ncat_var","f7310712":"#filling the missing numerical value \nfor i in range(len(num_var)):\n    train1[num_var[i]] = train1[num_var[i]].fillna(train1[num_var[i]].median())","d4a0a24a":"#filling the missing categorical value\nfor i in range(len(cat_var)):\n    train1[cat_var[i]] = train1[cat_var[i]].fillna(train1[cat_var[i]].mode()[0])","e83de4d4":"## doing all above steps for testing data\n#dropping the columns which have null value more than 10% \ntest1 = test.drop(columns=null_cols_rm,axis=True)\n\n# seperating the cat and numerical varibale  \nnum_var = test1.select_dtypes(include=['int64', 'float64']).columns\ncat_var = test1.select_dtypes(include=['object']).columns\n\n#filling numerical variable\nfor i in range(len(num_var)):\n    test1[num_var[i]] = test1[num_var[i]].fillna(test1[num_var[i]].median())\n#filling categorical varibale\nfor i in range(len(cat_var)):\n    test1[cat_var[i]] = test1[cat_var[i]].fillna(test1[cat_var[i]].mode()[0])","71614c54":"#preparing data for algorithm\ntrain_y = train1['SalePrice']\ntrain_x = train1.drop(['SalePrice','Id'],axis=1)\ntest_x = test1.drop('Id',axis=1)","b7b6d6d3":"##importing catboost \nimport catboost","6c76861e":"#creating the model \nmodel=catboost.CatBoostRegressor(iterations=50, depth=3, learning_rate=0.1, loss_function='RMSE',cat_features=cat_var)","f5e0e838":"#fitting the traning data\nmodel.fit(train_x,train_y)","fe5c1de6":"#predicting the testing data\np = model.predict(test_x)","6f4b8caa":"#training accuracy\nmodel.score(train_x,train_y)","b701b69a":"#submission file\nsubmission = pd.DataFrame()\nsubmission['Id'] = test1['Id']\nsubmission['SalePrice'] = p\nsubmission.to_csv('s.csv',index=False)","c6f7d8f5":"input data\n"}}