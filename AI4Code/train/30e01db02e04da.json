{"cell_type":{"f88b0f77":"code","370c19eb":"code","26b6aa7c":"code","06aac6c6":"code","7a943aba":"code","22f40afe":"code","d50cc0d3":"code","07b70b54":"code","252d7702":"code","18361f30":"code","fab80c86":"code","f983fa6c":"code","9b49cb98":"code","9f9f581c":"code","96a6c45d":"code","488ca0d9":"code","64358009":"code","d9152c76":"code","20796cdd":"code","b2ae33dc":"code","12dd18ac":"code","816d67ea":"code","521d3358":"code","41258b50":"code","5b46ad93":"code","622dda90":"code","7d5ec7ec":"code","e8a98931":"code","14c0dd89":"code","40fc3905":"code","6863d410":"code","eac38003":"code","88a47b82":"code","056265db":"code","e10cec3d":"code","c6739902":"code","151810c1":"code","33306762":"code","e5229e78":"code","99424e4d":"code","320e4d1d":"code","16418f3c":"code","6e924eb2":"code","b950e4bf":"code","3df2d1b7":"code","cd55f095":"code","8aa6f4f5":"code","99827793":"code","a890ff98":"code","223511c4":"code","08ffefe5":"code","9fcb2a17":"code","d220d697":"code","512258bd":"code","bc395680":"code","cf1f222c":"code","d55431cd":"code","406e74bc":"code","745e167f":"code","38f000ba":"code","039aa79a":"code","b225bbb2":"code","e93f4279":"code","d14c5856":"code","c20449d3":"code","f4e0121b":"code","b6113617":"code","6b45a5b4":"code","91ba7719":"code","4160d269":"code","045c4380":"code","10cf81e7":"code","f55784ce":"code","6efa226d":"code","e6f472a8":"code","184effb6":"code","4fd52ca5":"code","d05de1db":"code","ef6aaf57":"code","deecf2a3":"code","681718aa":"code","66e063d9":"code","0dd0510e":"code","04478d5a":"code","0de3d6e8":"code","4ece21a2":"code","c211e84b":"code","58bf3b33":"code","9b635209":"markdown","62152542":"markdown","62f68d7d":"markdown","583e1945":"markdown","a0debe9d":"markdown","4b1c437a":"markdown","a21f2d11":"markdown","461e00c9":"markdown","abd36bc8":"markdown","2f93604d":"markdown","001fc967":"markdown","30cfe9aa":"markdown","60e8b4f8":"markdown","e76336d7":"markdown","896f1959":"markdown","9459b2ee":"markdown","faf7ba60":"markdown","2f890cbc":"markdown","88d6f0a3":"markdown","7194ae4d":"markdown","9891b0ac":"markdown","a862e493":"markdown","1fb137ae":"markdown","2f268b16":"markdown","7e3a85e3":"markdown","ddee9852":"markdown","2a6d7ffb":"markdown","61c48ec8":"markdown","a5fa4eaa":"markdown","d4d04eb7":"markdown","b658c24c":"markdown","c94b9537":"markdown","a13d1935":"markdown","996518f8":"markdown","795f7ae8":"markdown","6f3c190d":"markdown","c4fea344":"markdown","00f398b4":"markdown","12f0a990":"markdown","1efa7952":"markdown","41d0bf53":"markdown","0cfc2101":"markdown","5009d45b":"markdown","470a0b06":"markdown","40833aa8":"markdown","1b302bf3":"markdown","4e3fd625":"markdown","29b72425":"markdown","81230dfd":"markdown","887b311e":"markdown","bc6ff994":"markdown","518babd6":"markdown","67f98353":"markdown","67687207":"markdown","22748926":"markdown","d3c5fc4f":"markdown","86e275a2":"markdown","b2062121":"markdown","5bd9b19b":"markdown","472241e2":"markdown","56dd0660":"markdown","692cd580":"markdown","bf361ce7":"markdown","8c4190b3":"markdown","a0c4ba0a":"markdown","abed5e6c":"markdown","1ed4d497":"markdown","a530d651":"markdown","dcd19ce3":"markdown","f795d6f1":"markdown","4ea438e6":"markdown","de8da89c":"markdown","00d649a6":"markdown","0afae2a2":"markdown","7c556595":"markdown","43580a37":"markdown","2ac10b75":"markdown","3d6cb383":"markdown","73bbf609":"markdown","b237c7e3":"markdown","33e5bc11":"markdown","da2a06e2":"markdown","61a50e6c":"markdown","986e86cf":"markdown","f7dfc8b8":"markdown","c475522c":"markdown","ed5aff21":"markdown","a751f66d":"markdown","6d19d6c1":"markdown","a52ba8c2":"markdown","03ed152c":"markdown","3cd98d7f":"markdown","90b24d1d":"markdown","4e05a7c2":"markdown","5a747cee":"markdown","99e9a977":"markdown","85224086":"markdown","ddd6349f":"markdown","41ccd805":"markdown","edaf59b4":"markdown","a5e4adca":"markdown","c6ba2a22":"markdown","f8675a81":"markdown","c901db1a":"markdown","0c065c9d":"markdown","a9e425ae":"markdown","eb855acc":"markdown","ac156c90":"markdown","a4112a98":"markdown","3b2c9e47":"markdown","06f53416":"markdown","51ebf8c3":"markdown","6d6ab720":"markdown","a22077be":"markdown","c4713426":"markdown","057cb245":"markdown","61671d84":"markdown","f2f2fb29":"markdown","28e3807f":"markdown","494e7a82":"markdown","dd979425":"markdown","5f1f9e06":"markdown","66c94f7a":"markdown","6d616ea8":"markdown","38102420":"markdown","355ee891":"markdown","6b327a41":"markdown"},"source":{"f88b0f77":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport plotly.graph_objs as go\nfrom sklearn import datasets\nimport plotly.plotly as py\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","370c19eb":"print('matplotlib: {}'.format(matplotlib.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))\nprint('scipy: {}'.format(scipy.__version__))\nprint('seaborn: {}'.format(sns.__version__))\nprint('pandas: {}'.format(pd.__version__))\nprint('numpy: {}'.format(np.__version__))\nprint('Python: {}'.format(sys.version))","26b6aa7c":"sns.set(style='white', context='notebook', palette='deep')\nwarnings.filterwarnings('ignore')\nsns.set_style('white')\nnp.random.seed(1337)\n#show plot inline\n%matplotlib inline","06aac6c6":"# import Dataset to play with it\ndataset = pd.read_csv('..\/input\/Iris.csv')","7a943aba":"type(dataset)","22f40afe":"# Modify the graph above by assigning each species an individual color.\nsns.FacetGrid(dataset, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend()\nplt.show()","d50cc0d3":"dataset.plot(kind='box', subplots=True, layout=(2,3), sharex=False, sharey=False)\nplt.figure()\n#This gives us a much clearer idea of the distribution of the input attributes:\n\n","07b70b54":"# To plot the species data using a box plot:\n\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=dataset )\nplt.show()","252d7702":"# Use Seaborn's striplot to add data points on top of the box plot \n# Insert jitter=True so that the data points remain scattered and not piled into a verticle line.\n# Assign ax to each axis, so that each plot is ontop of the previous axis. \n\nax= sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=dataset)\nax= sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=dataset, jitter=True, edgecolor=\"gray\")\nplt.show()","18361f30":"# Tweek the plot above to change fill and border color color using ax.artists.\n# Assing ax.artists a variable name, and insert the box number into the corresponding brackets\n\nax= sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=dataset)\nax= sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=dataset, jitter=True, edgecolor=\"gray\")\n\nboxtwo = ax.artists[2]\nboxtwo.set_facecolor('red')\nboxtwo.set_edgecolor('black')\nboxthree=ax.artists[1]\nboxthree.set_facecolor('yellow')\nboxthree.set_edgecolor('black')\n\nplt.show()","fab80c86":"# histograms\ndataset.hist(figsize=(15,20))\nplt.figure()","f983fa6c":"dataset[\"PetalLengthCm\"].hist();","9b49cb98":"\n# scatter plot matrix\npd.plotting.scatter_matrix(dataset,figsize=(10,10))\nplt.figure()","9f9f581c":"# violinplots on petal-length for each species\nsns.violinplot(data=dataset,x=\"Species\", y=\"PetalLengthCm\")","96a6c45d":"# Using seaborn pairplot to see the bivariate relation between each pair of features\nsns.pairplot(dataset, hue=\"Species\")","488ca0d9":"# updating the diagonal elements in a pairplot to show a kde\nsns.pairplot(dataset, hue=\"Species\",diag_kind=\"kde\")","64358009":"# seaborn's kdeplot, plots univariate or bivariate density estimates.\n#Size can be changed by tweeking the value used\nsns.FacetGrid(dataset, hue=\"Species\", size=5).map(sns.kdeplot, \"PetalLengthCm\").add_legend()\nplt.show()","d9152c76":"# Use seaborn's jointplot to make a hexagonal bin plot\n#Set desired size and ratio and choose a color.\nsns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=dataset, size=10,ratio=10, kind='hex',color='green')\nplt.show()","20796cdd":"#In Pandas use Andrews Curves to plot and visualize data structure.\n#Each multivariate observation is transformed into a curve and represents the coefficients of a Fourier series.\n#This useful for detecting outliers in times series data.\n#Use colormap to change the color of the curves\n\nfrom pandas.tools.plotting import andrews_curves\nandrews_curves(dataset.drop(\"Id\", axis=1), \"Species\",colormap='rainbow')\nplt.show()","b2ae33dc":"# we will use seaborn jointplot shows bivariate scatterplots and univariate histograms with Kernel density \n# estimation in the same figure\nsns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=dataset, size=6, kind='kde', color='#800000', space=0)","12dd18ac":"plt.figure(figsize=(7,4)) \nsns.heatmap(dataset.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()","816d67ea":"# A final multivariate visualization technique pandas has is radviz\n# Which puts each feature as a point on a 2D plane, and then simulates\n# having each sample attached to those points through a spring weighted\n# by the relative value for that feature\nfrom pandas.tools.plotting import radviz\nradviz(dataset.drop(\"Id\", axis=1), \"Species\")","521d3358":"dataset['Species'].value_counts().plot(kind=\"bar\");","41258b50":"import plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nfrom plotly import tools\nimport plotly.figure_factory as ff\niris = datasets.load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\nY = iris.target\n\nx_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\ny_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5\ntrace = go.Scatter(x=X[:, 0],\n                   y=X[:, 1],\n                   mode='markers',\n                   marker=dict(color=np.random.randn(150),\n                               size=10,\n                               colorscale='Viridis',\n                               showscale=False))\n\nlayout = go.Layout(title='Training Points',\n                   xaxis=dict(title='Sepal length',\n                            showgrid=False),\n                   yaxis=dict(title='Sepal width',\n                            showgrid=False),\n                  )\n \nfig = go.Figure(data=[trace], layout=layout)","5b46ad93":"py.iplot(fig)","622dda90":"# shape\nprint(dataset.shape)","7d5ec7ec":"#columns*rows\ndataset.size","e8a98931":"dataset.isnull().sum()","14c0dd89":"# remove rows that have NA's\ndataset = dataset.dropna()","40fc3905":"print(dataset.info())","6863d410":"dataset['Species'].unique()","eac38003":"dataset[\"Species\"].value_counts()\n","88a47b82":"dataset.head(5) ","056265db":"dataset.tail() ","e10cec3d":"dataset.sample(5) ","c6739902":"dataset.describe() ","151810c1":"dataset.isnull().sum()","33306762":"dataset.groupby('Species').count()","e5229e78":"dataset.columns","99424e4d":"dataset.where(dataset ['Species']=='Iris-setosa')","320e4d1d":"dataset[dataset['SepalLengthCm']>7.2]","16418f3c":"# Seperating the data into dependent and independent variables\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","6e924eb2":"cols = dataset.columns\nfeatures = cols[0:4]\nlabels = cols[4]\nprint(features)\nprint(labels)","b950e4bf":"#Well conditioned data will have zero mean and equal variance\n#We get this automattically when we calculate the Z Scores for the data\n\ndata_norm = pd.DataFrame(dataset)\n\nfor feature in features:\n    dataset[feature] = (dataset[feature] - dataset[feature].mean())\/dataset[feature].std()\n\n#Show that should now have zero mean\nprint(\"Averages\")\nprint(dataset.mean())\n\nprint(\"\\n Deviations\")\n#Show that we have equal variance\nprint(pow(dataset.std(),2))","3df2d1b7":"#Shuffle The data\nindices = data_norm.index.tolist()\nindices = np.array(indices)\nnp.random.shuffle(indices)\n","cd55f095":"# One Hot Encode as a dataframe\nfrom sklearn.model_selection import train_test_split\ny = get_dummies(y)\n\n# Generate Training and Validation Sets\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.3)\n\n# Convert to np arrays so that we can use with TensorFlow\nX_train = np.array(X_train).astype(np.float32)\nX_test  = np.array(X_test).astype(np.float32)\ny_train = np.array(y_train).astype(np.float32)\ny_test  = np.array(y_test).astype(np.float32)","8aa6f4f5":"#Check to make sure split still has 4 features and 3 labels\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","99827793":"\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","a890ff98":"# K-Nearest Neighbours\nfrom sklearn.neighbors import KNeighborsClassifier\n\nModel = KNeighborsClassifier(n_neighbors=8)\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\n\nprint('accuracy is',accuracy_score(y_pred,y_test))","223511c4":"from sklearn.neighbors import  RadiusNeighborsClassifier\nModel=RadiusNeighborsClassifier(radius=8.0)\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\n#summary of the predictions made by the classifier\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\n#Accouracy score\nprint('accuracy is ', accuracy_score(y_test,y_pred))","08ffefe5":"# LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nModel = LogisticRegression()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","9fcb2a17":"from sklearn.linear_model import PassiveAggressiveClassifier\nModel = PassiveAggressiveClassifier()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","d220d697":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nModel = GaussianNB()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","512258bd":"# BernoulliNB\nfrom sklearn.naive_bayes import BernoulliNB\nModel = BernoulliNB()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","bc395680":"# Support Vector Machine\nfrom sklearn.svm import SVC\n\nModel = SVC()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\n\nprint('accuracy is',accuracy_score(y_pred,y_test))","cf1f222c":"# Support Vector Machine's \nfrom sklearn.svm import NuSVC\n\nModel = NuSVC()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\n\nprint('accuracy is',accuracy_score(y_pred,y_test))","d55431cd":"# Linear Support Vector Classification\nfrom sklearn.svm import LinearSVC\n\nModel = LinearSVC()\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\n\nprint('accuracy is',accuracy_score(y_pred,y_test))","406e74bc":"# Decision Tree's\nfrom sklearn.tree import DecisionTreeClassifier\n\nModel = DecisionTreeClassifier()\n\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","745e167f":"# ExtraTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\n\nModel = ExtraTreeClassifier()\n\nModel.fit(X_train, y_train)\n\ny_pred = Model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nprint('accuracy is',accuracy_score(y_pred,y_test))","38f000ba":"import numpy as np\n\ndef sigmoid(z):\n    return 1 \/ (1 + np.exp(-z))","039aa79a":"w = np.array([0.2, 0.3, 0.8])\nb = 0.5\nx = np.array([0.5, 0.6, 0.1])","b225bbb2":"z = w.dot(x) + b\nprint(\"z:\", z)\nprint(\"a:\", sigmoid(z))","e93f4279":"def activation(z):\n    if z > 0:\n        return 1\n    return 0","d14c5856":"w = np.array([1, 1])\nb = -1\nx = np.array([0, 0])\nprint(\"0 AND 0:\", activation(w.dot(x) + b))\nx = np.array([1, 0])\nprint(\"1 AND 0:\", activation(w.dot(x) + b))\nx = np.array([0, 1])\nprint(\"0 AND 1:\", activation(w.dot(x) + b))\nx = np.array([1, 1])\nprint(\"1 AND 1:\", activation(w.dot(x) + b))","c20449d3":"w = np.array([1, 1])\nb = 0\nx = np.array([0, 0])\nprint(\"0 OR 0:\", activation(w.dot(x) + b))\nx = np.array([1, 0])\nprint(\"1 OR 0:\", activation(w.dot(x) + b))\nx = np.array([0, 1])\nprint(\"0 OR 1:\", activation(w.dot(x) + b))\nx = np.array([1, 1])\nprint(\"1 OR 1:\", activation(w.dot(x) + b))","f4e0121b":"from sklearn.neural_network import MLPClassifier\nModel=MLPClassifier()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\n# Summary of the predictions\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","b6113617":"from sklearn.ensemble import RandomForestClassifier\nModel=RandomForestClassifier(max_depth=2)\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","6b45a5b4":"from sklearn.ensemble import BaggingClassifier\nModel=BaggingClassifier()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","91ba7719":"from sklearn.ensemble import AdaBoostClassifier\nModel=AdaBoostClassifier()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","4160d269":"from sklearn.ensemble import GradientBoostingClassifier\nModel=GradientBoostingClassifier()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","045c4380":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nModel=LinearDiscriminantAnalysis()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","10cf81e7":"from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nModel=QuadraticDiscriminantAnalysis()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_pred,y_test))\n#Accuracy Score\nprint('accuracy is ',accuracy_score(y_pred,y_test))","f55784ce":"from sklearn.cluster import KMeans\niris_SP = dataset[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\n# k-means cluster analysis for 1-15 clusters                                              \nfrom scipy.spatial.distance import cdist\nclusters=range(1,15)\nmeandist=[]\n\n# loop through each cluster and fit the model to the train set\n# generate the predicted cluster assingment and append the mean \n# distance my taking the sum divided by the shape\nfor k in clusters:\n    model=KMeans(n_clusters=k)\n    model.fit(iris_SP)\n    clusassign=model.predict(iris_SP)\n    meandist.append(sum(np.min(cdist(iris_SP, model.cluster_centers_, 'euclidean'), axis=1))\n    \/ iris_SP.shape[0])\n\n\"\"\"\nPlot average distance from observations from the cluster centroid\nto use the Elbow Method to identify number of clusters to choose\n\"\"\"\nplt.plot(clusters, meandist)\nplt.xlabel('Number of clusters')\nplt.ylabel('Average distance')\nplt.title('Selecting k with the Elbow Method') \n# pick the fewest number of clusters that reduces the average distance\n# If you observe after 3 we can see graph is almost linear","6efa226d":"def sigmoid(z):\n    \"\"\"The sigmoid activation function.\"\"\"\n    return 1 \/ (1 + np.exp(-z))","e6f472a8":"def relu(z):\n    \"\"\"The ReLU activation function.\"\"\"\n    return max(0, z)","184effb6":"def sigmoid_prime(z):\n    \"\"\"The derivative of sigmoid for z.\"\"\"\n    return z * (1 - z)","4fd52ca5":"X = np.array([ [ 0, 0, 1 ],\n               [ 0, 1, 1 ],\n               [ 1, 0, 1 ],\n               [ 1, 1, 1 ] ])\nprint(X)","d05de1db":"y = np.array([[0,0,1,1]]).T\nprint(y)","ef6aaf57":"np.random.seed(1)","deecf2a3":"n_inputs = 3\nn_outputs = 1\n#Wo = 2 * np.random.random( (n_inputs, n_outputs) ) - 1\nWo = np.random.random( (n_inputs, n_outputs) ) * np.sqrt(2.0\/n_inputs)\nprint(Wo)","681718aa":"for n in range(10000):\n    # forward propagation\n    l1 = sigmoid(np.dot(X, Wo))\n    \n    # compute the loss\n    l1_error = y - l1\n    #print(\"l1_error:\\n\", l1_error)\n    \n    # multiply the loss by the slope of the sigmoid at l1\n    l1_delta = l1_error * sigmoid_prime(l1)\n    #print(\"l1_delta:\\n\", l1_delta)\n    \n    #print(\"error:\", l1_error, \"\\nderivative:\", sigmoid(l1, True), \"\\ndelta:\", l1_delta, \"\\n\", \"-\"*10, \"\\n\")\n    # update weights\n    Wo += np.dot(X.T, l1_delta)\n\nprint(\"l1:\\n\", l1)","66e063d9":"X = np.array([[0, 0, 1],\n              [0, 1, 1],\n              [1, 0, 1],\n              [1, 1, 1]])\nprint(X)","0dd0510e":"y = np.array([[ 0, 1, 1, 0]]).T\nprint(y)","04478d5a":"np.random.seed(1)","0de3d6e8":"n_inputs = 3\nn_hidden_neurons = 4\nn_output_neurons = 1\nWh = np.random.random( (n_inputs, n_hidden_neurons) )  * np.sqrt(2.0\/n_inputs)\nWo = np.random.random( (n_hidden_neurons, n_output_neurons) )  * np.sqrt(2.0\/n_hidden_neurons)\nprint(\"Wh:\\n\", Wh)\nprint(\"Wo:\\n\", Wo)","4ece21a2":"for i in range(100000):\n    l1 = sigmoid(np.dot(X, Wh))\n    l2 = sigmoid(np.dot(l1, Wo))\n    \n    l2_error = y - l2\n    \n    if (i % 10000) == 0:\n        print(\"Error:\", np.mean(np.abs(l2_error)))\n    \n    # gradient, changing towards the target value\n    l2_delta = l2_error * sigmoid_prime(l2)\n    \n    # compute the l1 contribution by value to the l2 error, given the output weights\n    l1_error = l2_delta.dot(Wo.T)\n    \n    # direction of the l1 target:\n    # in what direction is the target l1?\n    l1_delta = l1_error * sigmoid_prime(l1)\n    \n    Wo += np.dot(l1.T, l2_delta)\n    Wh += np.dot(X.T, l1_delta)\n\nprint(\"Wo:\\n\", Wo)\nprint(\"Wh:\\n\", Wh)","c211e84b":"from sklearn import datasets\niris = datasets.load_iris()\nX_iris = iris.data\ny_iris = iris.target","58bf3b33":"plt.figure('sepal')\ncolormarkers = [ ['red','s'], ['greenyellow','o'], ['blue','x']]\nfor i in range(len(colormarkers)):\n    px = X_iris[:, 0][y_iris == i]\n    py = X_iris[:, 1][y_iris == i]\n    plt.scatter(px, py, c=colormarkers[i][0], marker=colormarkers[i][1])\n\nplt.title('Iris Dataset: Sepal width vs sepal length')\nplt.legend(iris.target_names)\nplt.xlabel('Sepal length')\nplt.ylabel('Sepal width')\nplt.figure('petal')\n\nfor i in range(len(colormarkers)):\n    px = X_iris[:, 2][y_iris == i]\n    py = X_iris[:, 3][y_iris == i]\n    plt.scatter(px, py, c=colormarkers[i][0], marker=colormarkers[i][1])\n\nplt.title('Iris Dataset: petal width vs petal length')\nplt.legend(iris.target_names)\nplt.xlabel('Petal length')\nplt.ylabel('Petal width')\nplt.show()","9b635209":"-----------------\n<a id=\"8\"><\/a> <br>\n# 8- Conclusion","62152542":"<a id=\"717\"><\/a> <br>\n## 7-17 Bagging classifier \nA Bagging classifier is an ensemble **meta-estimator** that fits base classifiers each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.\n\nThis algorithm encompasses several works from the literature. When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting . If samples are drawn with replacement, then the method is known as Bagging . When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces . Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches .[http:\/\/scikit-learn.org]","62f68d7d":"After loading the data via **pandas**, we should checkout what the content is, description and via the following:","583e1945":"The reason for the output weight matrix ($Wo$) to have 3 rows and 1 column is that it represents the weights of the connections from the three input neurons to the single output neuron. The initialization of the weight matrix is random with a mean of $0$ and a variance of $1$. There is a good reason for chosing a mean of zero in the weight initialization. See for details the section on Weight Initialization in the [Stanford course CS231n on Convolutional Neural Networks for Visual Recognition](https:\/\/cs231n.github.io\/neural-networks-2\/#init).","a0debe9d":"In this kernel, I have tried to cover all the parts related to the process of **Machine Learning** with a variety of Python packages and I know that there are still some problems then I hope to get your feedback to improve it.\n<br>\n[go to top](#top)","4b1c437a":"<a id=\"6212\"><\/a> <br>\n### 6-2-12 Bar Plot","a21f2d11":"<a id=\"7151\"><\/a> <br>\n## 7-15-1 What is a Perceptron?","461e00c9":"<a id=\"6211\"><\/a> <br>\n### 6-2-11 radviz","abd36bc8":"<a id=\"628\"><\/a> <br>\n### 6-2-8 jointplot","2f93604d":"<a id=\"4\"><\/a> <br>\n## 4- Inputs & Outputs\n<a id=\"41\"><\/a> <br>\n### 4-1 Inputs\n**Iris** is a very popular **classification** and **clustering** problem in machine learning and it is such as \"Hello world\" program when you start learning a new programming language. then I decided to apply Iris on  20 machine learning method on it.\nAs a result, **iris dataset is used as the input of all algorithms**.\n<a id=\"42\"><\/a> <br>\n### 4-2 Outputs\nthe outputs for our algorithms totally depend on the type of classification or clustering algorithms.\nthe outputs can be the number of clusters or predict for new input.\n\n**setosa**: Iris setosa, true or false, used as target.\n**versicolour**: Iris versicolour, true or false, used as target.\n**virginica**: Iris virginica, true or false, used as a target.","001fc967":"<img src=\"http:\/\/s8.picofile.com\/file\/8339770734\/sigmoid_deriv_2.png\" style=\"max-width:100%; width: 50%; max-width: none\">","30cfe9aa":"<a id=\"6214\"><\/a> <br>\n### 6-2-14 Conclusion\nwe have used Python to apply data visualization tools to the Iris dataset. Color and size changes were made to the data points in scatterplots. I changed the border and fill color of the boxplot and violin, respectively.","60e8b4f8":"For OR we could implement a perceptron as:","e76336d7":"We will use **Numpy**  to compute the network parameters, weights, activation, and outputs:","896f1959":"We create a weight matrix ($Wo$) with randomly initialized weights:","9459b2ee":" <img src=\"http:\/\/s8.picofile.com\/file\/8338227868\/packages.png\">\n","faf7ba60":"<a id=\"78\"><\/a> <br>\n## 7-8 Naive Bayes\nIn machine learning, naive Bayes classifiers are a family of simple \"**probabilistic classifiers**\" based on applying Bayes' theorem with strong (naive) independence assumptions between the features.","2f890cbc":"<a id=\"33\"><\/a> <br>\n## 7-1 Families of ML algorithms\nThere are several categories for machine learning algorithms, below are some of these categories:\n* Linear\n    * Linear Regression\n    * Logistic Regression\n    * Support Vector Machines\n* Tree-Based\n    * Decision Tree\n    * Random Forest\n    * GBDT\n* KNN\n* Neural Networks\n\n-----------------------------\nAnd if we  want to categorize ML algorithms with the type of learning, there are below type:\n* Classification\n\n    * k-Nearest \tNeighbors\n    * LinearRegression\n    * SVM\n    * DT \n    * NN\n    \n* clustering\n\n    * K-means\n    * HCA\n    * Expectation Maximization\n    \n* Visualization \tand\tdimensionality \treduction:\n\n    * Principal \tComponent \tAnalysis(PCA)\n    * Kernel PCA\n    * Locally -Linear\tEmbedding \t(LLE)\n    * t-distributed\tStochastic\tNeighbor\tEmbedding \t(t-SNE)\n    \n* Association \trule\tlearning\n\n    * Apriori\n    * Eclat\n* Semisupervised learning\n* Reinforcement Learning\n    * Q-learning\n* Batch learning & Online learning\n* Ensemble  Learning\n\n**<< Note >>**\n> Here is no method which outperforms all others for all tasks\n\n","88d6f0a3":"<a id=\"625\"><\/a> <br>\n### 6-2-5 violinplots","7194ae4d":"<a id=\"61\"><\/a> <br>\n## 6-1 Data Collection\n**Iris dataset**  consists of 3 different types of irises\u2019 (Setosa, Versicolour, and Virginica) petal and sepal length, stored in a 150x4 numpy.ndarray\n\nThe rows being the samples and the columns being: Sepal Length, Sepal Width, Petal Length and Petal Width.[6]\n","9891b0ac":"<a id=\"712\"><\/a> <br>\n## 7-12 Linear Support Vector Classification\n\nSimilar to **SVC** with parameter kernel=\u2019linear\u2019, but implemented in terms of liblinear rather than libsvm, so it has more flexibility in the choice of penalties and loss functions and should scale better to large numbers of samples.","a862e493":"<a id=\"5\"><\/a> <br>\n## 5 Loading Packages\nIn this kernel we are using the following packages:","1fb137ae":"<a id=\"719\"><\/a> <br>\n## 7-19 Gradient Boosting Classifier\nGB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions.","2f268b16":"<a id=\"713\"><\/a> <br>\n## 7-13 Decision Tree\nDecision Trees (DTs) are a non-parametric supervised learning method used for **classification** and **regression**. The goal is to create a model that predicts the value of a target variable by learning simple **decision rules** inferred from the data features.","7e3a85e3":"We could use the [ReLU](http:\/\/ml-cheatsheet.readthedocs.io\/en\/latest\/activation_functions.html#activation-relu) activation function instead:","ddee9852":"<a id=\"53\"><\/a> <br>\n### 5-3 Setup\n\nA few tiny adjustments for better **code readability**","2a6d7ffb":"There is no way to implement a perceptron for XOR this way.","61c48ec8":"<a id=\"623\"><\/a> <br>\n### 6-2-3 Histogram\nWe can also create a **histogram** of each input variable to get an idea of the distribution.\n\n[go to top](#top)","a5fa4eaa":"<a id=\"710\"><\/a> <br>\n## 7-10 SVM\n\nThe advantages of support vector machines are:\n* Effective in high dimensional spaces.\n* Still effective in cases where number of dimensions is greater than the number of samples. \n* Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.\n* Versatile: different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.\n\nThe disadvantages of support vector machines include:\n\n* If the number of features is much greater than the number of samples, avoid over-fitting in choosing Kernel functions and regularization term is crucial.\n* SVMs do not directly provide probability estimates, these are calculated using an expensive five-fold cross-validation","d4d04eb7":"We can define this activation function in Python as:","b658c24c":"Backpropagation is a method used in artificial neural networks to calculate a gradient that is needed in the calculation of the weights to be used in the network.It is commonly used to train deep neural networks,a term referring to neural networks with more than one hidden layer.","c94b9537":"<a id=\"629\"><\/a> <br>\n###  6-2-9 andrews_curves","a13d1935":"<a id=\"721\"><\/a> <br>\n## 7-21 Quadratic Discriminant Analysis\nA classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayes\u2019 rule.\n\nThe model fits a **Gaussian** density to each class.","996518f8":"Our example data, **weights** $w$, **bias** $b$, and **input** $x$ are defined as:","795f7ae8":"<a id=\"9\"><\/a> <br>\n# 9- References\n1. [Iris image](https:\/\/rpubs.com\/wjholst\/322258)\n1. [IRIS](https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris)\n1. [https:\/\/skymind.ai\/wiki\/machine-learning-workflow](https:\/\/skymind.ai\/wiki\/machine-learning-workflow)\n1. [IRIS-wiki](https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris)\n1. [Problem-define](https:\/\/machinelearningmastery.com\/machine-learning-in-python-step-by-step\/)\n1. [Sklearn](http:\/\/scikit-learn.org\/)\n1. [machine-learning-in-python-step-by-step](https:\/\/machinelearningmastery.com\/machine-learning-in-python-step-by-step\/)\n1. [Data Cleaning](http:\/\/wp.sigmod.org\/?p=2288)\n1. [competitive data science](https:\/\/www.coursera.org\/learn\/competitive-data-science\/)\n1. [Top 28 Cheat Sheets for Machine Learning](https:\/\/www.analyticsvidhya.com\/blog\/2017\/02\/top-28-cheat-sheets-for-machine-learning-data-science-probability-sql-big-data\/)\n\n\n-------------\n","6f3c190d":"<a id=\"64\"><\/a> <br>\n## 6-4 Data Cleaning\nWhen dealing with real-world data, dirty data is the norm rather than the exception. We continuously need to predict correct values, impute missing ones, and find links between various data artefacts such as schemas and records. We need to stop treating data cleaning as a piecemeal exercise (resolving different types of errors in isolation), and instead leverage all signals and resources (such as constraints, available statistics, and dictionaries) to accurately predict corrective actions.","c4fea344":"<img src=\"http:\/\/s9.picofile.com\/file\/8339770650\/sigmoid_prime.png\" style=\"max-width:100%; width: 25%; max-width: none\">","00f398b4":"<a id=\"624\"><\/a> <br>\n### 6-2-4 Multivariate Plots\nNow we can look at the interactions between the variables.\n\nFirst, let\u2019s look at scatterplots of all pairs of attributes. This can be helpful to spot structured relationships between input variables.","12f0a990":"Our neural unit would compute $z$ as the **dot-product** $w \\cdot x$ and add the **bias** $b$ to it. The sigmoid function defined above will convert this $z$ value to the **activation value** $a$ of the unit:","1efa7952":"<a id=\"77\"><\/a> <br>\n##  7-7 Passive Aggressive Classifier","41d0bf53":" <a id=\"1\"><\/a> <br>\n## 1- Introduction\nThis is a **comprehensive ML techniques with python** , that I have spent for more than two months to complete it.\n\nit is clear that everyone in this community is familiar with IRIS dataset but if you need to review your information about the dataset please visit this [link](https:\/\/archive.ics.uci.edu\/ml\/datasets\/iris).\n\nI have tried to help **beginners**  in Kaggle how to face machine learning problems. and I think it is a great opportunity for who want to learn machine learning workflow with python completely.\nI have covered most of the methods that are implemented for iris until **2018**, you can start to learn and review your knowledge about ML with a simple dataset and try to learn and memorize the workflow for your journey in Data science world.\n <a id=\"11\"><\/a> <br>\n## 1-1 Courses\n\nThere are alot of Online courses that can help you develop your knowledge, here I have just  listed some of them:\n\n1. [Machine Learning Certification by Stanford University (Coursera)](https:\/\/www.coursera.org\/learn\/machine-learning\/)\n\n2. [Machine Learning A-Z\u2122: Hands-On Python & R In Data Science (Udemy)](https:\/\/www.udemy.com\/machinelearning\/)\n\n3. [Deep Learning Certification by Andrew Ng from deeplearning.ai (Coursera)](https:\/\/www.coursera.org\/specializations\/deep-learning)\n\n4. [Python for Data Science and Machine Learning Bootcamp (Udemy)](Python for Data Science and Machine Learning Bootcamp (Udemy))\n\n5. [Mathematics for Machine Learning by Imperial College London](https:\/\/www.coursera.org\/specializations\/mathematics-machine-learning)\n\n6. [Deep Learning A-Z\u2122: Hands-On Artificial Neural Networks](https:\/\/www.udemy.com\/deeplearning\/)\n\n7. [Complete Guide to TensorFlow for Deep Learning Tutorial with Python](https:\/\/www.udemy.com\/complete-guide-to-tensorflow-for-deep-learning-with-python\/)\n\n8. [Data Science and Machine Learning Tutorial with Python \u2013 Hands On](https:\/\/www.udemy.com\/data-science-and-machine-learning-with-python-hands-on\/)\n\n9. [Machine Learning Certification by University of Washington](https:\/\/www.coursera.org\/specializations\/machine-learning)\n\n10. [Data Science and Machine Learning Bootcamp with R](https:\/\/www.udemy.com\/data-science-and-machine-learning-bootcamp-with-r\/)\n\n\n5- [https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n\n <a id=\"12\"><\/a> <br>\n## 1-2 Ebooks\nSo you love reading , here is **10 free machine learning books**\n\n1. [Probability and Statistics for Programmers](http:\/\/www.greenteapress.com\/thinkstats\/)\n\n1. [Bayesian Reasoning and Machine Learning](http:\/\/web4.cs.ucl.ac.uk\/staff\/D.Barber\/textbook\/091117.pdf)\n\n1. [An Introduction to Statistical Learning](http:\/\/www-bcf.usc.edu\/~gareth\/ISL\/)\n\n1. [Understanding Machine Learning](http:\/\/www.cs.huji.ac.il\/~shais\/UnderstandingMachineLearning\/index.html)\n\n1. [A Programmer\u2019s Guide to Data Mining](http:\/\/guidetodatamining.com\/)\n\n1. [Mining of Massive Datasets](http:\/\/infolab.stanford.edu\/~ullman\/mmds\/book.pdf)\n\n1. [A Brief Introduction to Neural Networks](http:\/\/www.dkriesel.com\/_media\/science\/neuronalenetze-en-zeta2-2col-dkrieselcom.pdf)\n\n1. [Deep Learning](http:\/\/www.deeplearningbook.org\/)\n\n1. [Natural Language Processing with Python](https:\/\/www.researchgate.net\/publication\/220691633_Natural_Language_Processing_with_Python)\n\n1. [Machine Learning Yearning](http:\/\/www.mlyearning.org\/)\n \n <a id=\"13\"><\/a> <br>\n \n## 1-3 Cheat Sheets\nData Science is an ever-growing field, there are numerous tools & techniques to remember. It is not possible for anyone to remember all the functions, operations and formulas of each concept. That\u2019s why we have cheat sheets. But there are a plethora of cheat sheets available out there, choosing the right cheat sheet is a tough task. So, I decided to write this article.\n\nHere I have selected the cheat sheets on the following criteria: comprehensiveness, clarity, and content [26]:\n1. [Quick Guide to learn Python for Data Science ](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/Data-Science-in-Python.pdf)\n1. [Python for Data Science Cheat sheet ](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/beginners_python_cheat_sheet.pdf)\n1. [Python For Data Science Cheat Sheet NumPy](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/Numpy_Python_Cheat_Sheet.pdf)\n1. [Exploratory Data Analysis in Python]()\n1. [Data Exploration using Pandas in Python](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/Data-Exploration-in-Python.pdf)\n1. [Data Visualisation in Python](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/data-visualisation-infographics1.jpg)\n1. [Python For Data Science Cheat Sheet Bokeh](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/Python_Bokeh_Cheat_Sheet.pdf)\n1. [Cheat Sheet: Scikit Learn ](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/Scikit-Learn-Infographic.pdf)\n1. [MLalgorithms CheatSheet](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/MLalgorithms-.pdf)\n1. [Probability Basics  Cheat Sheet ](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/blob\/master\/cheatsheets\/probability_cheatsheet.pdf)\n\n\nI am open to getting your feedback for improving this **kernel**\n<br>\n[go to top](#top)","0cfc2101":"We will use the *[Sigmoid](http:\/\/ml-cheatsheet.readthedocs.io\/en\/latest\/activation_functions.html#sigmoid)* activation function:","5009d45b":"To check the first 5 rows of the data set, we can use head(5).","470a0b06":"<a id=\"6\"><\/a> <br>\n## 6- Exploratory Data Analysis(EDA)\n In this section, you'll learn how to use graphical and numerical techniques to begin uncovering the structure of your data. \n \n* Which variables suggest interesting relationships?\n* Which observations are unusual?\n\nBy the end of the section, you'll be able to answer these questions and more, while generating graphics that are both insightful and beautiful.  then We will review analytical and statistical operations:\n\n*   5-1 Data Collection\n*   5-2 Visualization\n*   5-3 Data Preprocessing\n*   5-4 Data Cleaning\n<img src=\"http:\/\/s9.picofile.com\/file\/8338476134\/EDA.png\">","40833aa8":"From the plot, we can see that the species setosa is separataed from the other two across all feature combinations\n\nWe can also replace the histograms shown in the diagonal of the pairplot by kde.","1b302bf3":"<a id=\"715\"><\/a> <br>\n## 7-15 Neural network\n\nI have used multi-layer Perceptron classifier.\nThis model optimizes the log-loss function using **LBFGS** or **stochastic gradient descent**.","4e3fd625":"<img src=\"http:\/\/s8.picofile.com\/file\/8339770792\/toy_network_deriv.png\" style=\"max-width:100%; width: 40%; max-width: none\">","29b72425":"<a id=\"34\"><\/a> <br>\n## 7-2 Prepare Features & Targets\nFirst of all seperating the data into dependent(Feature) and independent(Target) variables.\n\n**<< Note 4 >>**\n1. X==>>Feature\n1. y==>>Target","81230dfd":"<a id=\"76\"><\/a> <br>\n## 7-6 Logistic Regression\nLogistic regression is the appropriate regression analysis to conduct when the dependent variable is **dichotomous** (binary). Like all regression analyses, the logistic regression is a **predictive analysis**.\n\nIn statistics, the logistic model (or logit model) is a widely used statistical model that, in its basic form, uses a logistic function to model a binary dependent variable; many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model; it is a form of binomial regression. Mathematically, a binary logistic model has a dependent variable with two possible values, such as pass\/fail, win\/lose, alive\/dead or healthy\/sick; these are represented by an indicator variable, where the two values are labeled \"0\" and \"1\"","887b311e":"The matrix $l1\\_error$ is a 4 by 1 matrix (4 rows, 1 column). The derivative matrix $sigmoid\\_prime(l1)$ is also a 4 by one matrix. The returned matrix of the element-wise product $l1\\_delta$ is also the 4 by 1 matrix.","bc6ff994":"<a id=\"6\"><\/a> <br>\n## 6-3 Data Preprocessing\n**Data preprocessing** refers to the transformations applied to our data before feeding it to the algorithm.\n \nData Preprocessing is a technique that is used to convert the raw data into a clean data set. In other words, whenever the data is gathered from different sources it is collected in raw format which is not feasible for the analysis.\nthere are plenty of steps for data preprocessing and we just listed some of them :\n* removing Target column (id)\n* Sampling (without replacement)\n* Making part of iris unbalanced and balancing (with undersampling and SMOTE)\n* Introducing missing values and treating them (replacing by average values)\n* Noise filtering\n* Data discretization\n* Normalization and standardization\n* PCA analysis\n* Feature selection (filter, embedded, wrapper)","518babd6":"<a id=\"722\"><\/a> <br>\n## 7-22 Kmeans \nK-means clustering is a type of unsupervised learning, which is used when you have unlabeled data (i.e., data without defined categories or groups). \n\nThe goal of this algorithm is **to find groups in the data**, with the number of groups represented by the variable K. The algorithm works iteratively to assign each data point to one of K groups based on the features that are provided.\n\n","67f98353":"<a id=\"718\"><\/a> <br>\n##  7-18 AdaBoost classifier\n\nAn AdaBoost classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases.\nThis class implements the algorithm known as **AdaBoost-SAMME** .","67687207":"To check out last 5 row of the data set, we use tail() function","22748926":"<a id=\"714\"><\/a> <br>\n## 7-14 ExtraTreeClassifier\nAn extremely randomized tree classifier.\n\nExtra-trees differ from classic decision trees in the way they are built. When looking for the best split to separate the samples of a node into two groups, random splits are drawn for each of the **max_features** randomly selected features and the best split among those is chosen. When max_features is set 1, this amounts to building a totally random decision tree.\n\n**Warning**: Extra-trees should only be used within ensemble methods.","d3c5fc4f":"<a id=\"632\"><\/a> <br>\n### 6-3-2 Explorer Dataset\n1- Dimensions of the dataset.\n\n2- Peek at the data itself.\n\n3- Statistical summary of all attributes.\n\n4- Breakdown of the data by the class variable.[7]\n\nDon\u2019t worry, each look at the data is **one command**. These are useful commands that you can use again and again on future projects.","86e275a2":"The core representation of this network is basically the weight matrix *Wo*. The rest, input matrix, output vector and so on are components that we need to learning and evaluation. The leraning result is stored in the *Wo* weight matrix.","b2062121":"We initialize the random number generator with a constant again:","5bd9b19b":"<a id=\"32\"><\/a> <br>\n## 7- Model Deployment\nIn this section have been applied more than **20 learning algorithms** that play an important rule in your experiences and improve your knowledge in case of ML technique.\n\n> **<< Note 3 >>** : The results shown here may be slightly different for your analysis because, for example, the neural network algorithms use random number generators for fixing the initial value of the weights (starting points) of the neural networks, which often result in obtaining slightly different (local minima) solutions each time you run the analysis. Also note that changing the seed for the random number generator used to create the train, test, and validation samples can change your results.","472241e2":"There are many online examples and tutorials on perceptrons and learning. Here is a list of some articles:\n- [Wikipedia on Perceptrons](https:\/\/en.wikipedia.org\/wiki\/Perceptron)\n- Jurafsky and Martin (ed. 3), Chapter 8","56dd0660":"The derivative of the sigmoid function is maximal at $x=0$ and minimal for lower or higher values of $x$:","692cd580":"The dots in $l1$ represent the lines in the graphic below. The lines represent the slope of the sigmoid in the particular position. The slope is highest with a value $x = 0$ (blue dot). It is rather shallow with $x = 2$ (green dot), and not so shallow and not as high with $x = -1$. All derivatives are between $0$ and $1$, of course, that is, no slope or a maximal slope of $1$. There is no negative slope in a sigmoid function.","bf361ce7":" <a id=\"top\"><\/a> <br>\n## Notebook  Content\n*   1-  [Introduction](#1)\n    * [1-1 Courses](#11)\n    * [1-2 Ebooks](#12)\n    * [1-3 Cheat Sheets](#13)\n*   2- [Machine learning workflow](#2)\n*       2-1 [Real world Application Vs Competitions](#21)\n*   3- [Problem Definition](#3)\n*       3-1 [Problem feature](#31)\n*       3-2 [Aim](#32)\n*       3-3 [Variables](#33)\n*   4-[ Inputs & Outputs](#4)\n*   4-1 [Inputs ](#41)\n*   4-2 [Outputs](#42)\n*   5- [Loading Packages](#5)\n*   6- [Exploratory data analysis](#6)\n*       6-1 [Data Collection](#61)\n*       6-2 [Visualization](#62)\n*           6-2-1 [Scatter plot](#621)\n*           6-2-2 [Box](#622)\n*           6-2-3 [Histogram](#623)\n*           6-2-4 [Multivariate Plots](#624)\n*           6-2-5 [Violinplots](#625)\n*           6-2-6 [Pair plot](#626)\n*           6-2-7 [Kde plot](#627)\n*           6-2-8 [Joint plot](#628)\n*           6-2-9 [Andrews curves](#629)\n*           6-2-10 [Heatmap](#6210)\n*           6-2-11 [Radviz](#6211)\n*           6-2-12 [Bar Plot](#6212)\n*           6-2-13 [Visualization with Plotly](#6213)\n*           6-2-14 [Conclusion](#6214)\n*       6-3 [Data Preprocessing](#63)\n*           6-3-1 [Features](#631)\n*           6-3-2 [Explorer Dataset](#632)\n*       6-4 [Data Cleaning](#64)\n*   7- [Model Deployment](#7)\n*       7-1[ Families of ML algorithms](#71)\n*       7-2[ Prepare Features & Targets](#72)\n*       7-3[ Accuracy and precision](#73)\n*       7-4[ KNN](#74)\n*       7-5 [Radius Neighbors Classifier](#75)\n*       7-6 [Logistic Regression](#76)\n*       7-7 [Passive Aggressive Classifier](#77)\n*       7-8 [Naive Bayes](#78)\n*       7-9 [MultinomialNB](#79)\n*       7-10 [BernoulliNB](#710)\n*       7-11 [SVM](#711)\n*       7-12 [Nu-Support Vector Classification](#712)\n*       7-13 [Linear Support Vector Classification](#713)\n*       7-14 [Decision Tree](#714)\n*       7-15 [ExtraTreeClassifier](#715)\n*       7-16 [Neural network](#716)\n*            7-16-1 [What is a Perceptron?](#7161)\n*       7-17 [RandomForest](#717)\n*       7-18 [Bagging classifier ](#718)\n*       7-19 [AdaBoost classifier](#719)\n*       7-20 [Gradient Boosting Classifier](#720)\n*       7-21 [Linear Discriminant Analysis](#721)\n*       7-22 [Quadratic Discriminant Analysis](#722)\n*       7-23 [Kmeans](#723)\n*       7-24 [Backpropagation](#724)\n*   8- [Conclusion](#8)\n*   9- [References](#9)","8c4190b3":"An example computation for the input $[ 1, 0, 1 ]$ and the weights $[ 9.5, 0.2, -0.1 ]$ and an output of $0.99$: If $y = 1$, the $l1\\_error = y - l2 = 0.01$, and $l1\\_delta = 0.01 * tiny\\_deriv$:","a0c4ba0a":"How many NA elements in every column\n","abed5e6c":"The outputs are stored in *y*, where each row represents the output for the corresponding input vector (row) in *X*. The vector is initiated as a single row vector and with four columns and transposed (using the $.T$ method) into a column vector with four rows:","1ed4d497":"We loop in the optimization and learning cycle 10,000 times. In the *forward propagation* line we process the entire input matrix for training. This is called **full batch** training. I do not use an alternative variable name to represent the input layer, instead I use the input matrix $X$ directly here. Think of this as the different inputs to the input neurons computed at once. In principle the input or training data could have many more training examples, the code would stay the same.","a530d651":"We also define a new output matrix $y$:","dcd19ce3":"<a id=\"627\"><\/a> <br>\n###  6-2-7 kdeplot","f795d6f1":"For AND we could implement a perceptron as:","4ea438e6":"It looks like perhaps two of the input variables have a Gaussian distribution. This is useful to note as we can use algorithms that can exploit this assumption.\n\n","de8da89c":"<img src=\"http:\/\/s8.picofile.com\/file\/8339774900\/SigmoidFunction1.png\" style=\"max-width:100%; width: 30%; max-width: none\">","00d649a6":"<a id=\"74\"><\/a> <br>\n## 7-4 K-Nearest Neighbours\nIn **Machine Learning**, the **k-nearest neighbors algorithm** (k-NN) is a non-parametric method used for classification and regression. In both cases, the input consists of the k closest training examples in the feature space. The output depends on whether k-NN is used for classification or regression:\n\nIn k-NN classification, the output is a class membership. An object is classified by a majority vote of its neighbors, with the object being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor.\nIn k-NN regression, the output is the property value for the object. This value is the average of the values of its k nearest neighbors.\nk-NN is a type of instance-based learning, or lazy learning, where the function is only approximated locally and all computation is deferred until classification. The k-NN algorithm is among the simplest of all machine learning algorithms.","0afae2a2":"Assume that our 3 inputs are mapped to 4 hidden layer ($Wh$) neurons, we have to initialize the hidden layer weights in a 3 by 4 matrix. The outout layer ($Wo$) is a single neuron that is connected to the hidden layer, thus the output layer is a 4 by 1 matrix:","7c556595":"no see our prediction for iris","43580a37":"To pop up 5 random rows from the data set, we can use **sample(5)**  function","2ac10b75":"<a id=\"21\"><\/a> <br>\n## 2-1 Real world Application Vs Competitions\nJust a simple comparison between real-world apps with competitions:\n<img src=\"http:\/\/s9.picofile.com\/file\/8339956300\/reallife.png\" height=\"600\" width=\"500\" \/>","3d6cb383":"This is an example that I have taken from a draft of the 3rd edition of Jurafsky and Martin, with slight modifications:\nWe import *numpy* and use its *exp* function. We could use the same function from the *math* module, or some other module like *scipy*. The *sigmoid* function is defined as in the textbook:\n","73bbf609":"From our discussion of the XOR problem we remember that this is a *non-linear pattern*, a **one-to-one relationship between a combination of inputs**.","b237c7e3":"<a id=\"621\"><\/a> <br>\n### 6-2-1 Scatter plot\n\nScatter plot Purpose To identify the type of relationship (if any) between two quantitative variables\n\n\n","33e5bc11":"You see number of unique item for Species with command below:","da2a06e2":"<a id=\"7231\"><\/a> <br>\n## 7-23-1 More Complex Example with Backpropagation","61a50e6c":"We will loop now 60,000 times to optimize the weights:","986e86cf":"We will define a new $X$ input matrix that reflects the above table:","f7dfc8b8":"<a id=\"723\"><\/a> <br>\n## 7-23-  Backpropagation","c475522c":"\nWe can get a quick idea of how many instances (rows) and how many attributes (columns) the data contains with the shape property.\n\nYou should see 150 instances and 5 attributes:","ed5aff21":"<a id=\"6213\"><\/a> <br>\n### 6-2-13 Visualization with Plotly","a751f66d":"Fork and Run this Notebook on GitHub:\n\n> #### [ GitHub](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist)\n> #### [ Kaggle](https:\/\/www.kaggle.com\/mjbahmani)\n\n--------------------------------------\n\n **I hope you find this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated** ","6d19d6c1":"<a id=\"622\"><\/a> <br>\n### 6-2-2 Box\nIn descriptive statistics, a **box plot** or boxplot is a method for graphically depicting groups of numerical data through their quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram.[wikipedia]","a52ba8c2":"For getting some information about the dataset you can use **info()** command","03ed152c":"<a id=\"75\"><\/a> <br>\n##  7-5 Radius Neighbors Classifier\nClassifier implementing a **vote** among neighbors within a given **radius**\n\nIn scikit-learn **RadiusNeighborsClassifier** is very similar to **KNeighborsClassifier** with the exception of two parameters. First, in RadiusNeighborsClassifier we need to specify the radius of the fixed area used to determine if an observation is a neighbor using radius. Unless there is some substantive reason for setting radius to some value, it is best to treat it like any other hyperparameter and tune it during model selection. The second useful parameter is outlier_label, which indicates what label to give an observation that has no observations within the radius - which itself can often be a useful tool for identifying outliers.","3cd98d7f":"<a id=\"52\"><\/a> <br>\n### 5-2 Version","90b24d1d":"In this example we will use a very simple network to start with. The network will only have one input and one output layer. We want to make the following predictions from the input:\n\n| Input  | Output |\n| ------ |:------:|\n| 0 0 1  | 0      |\n| 1 1 1  | 1      |\n| 1 0 1  | 1      |\n| 0 1 1  | 0      |","4e05a7c2":"To check out how many null info are on the dataset, we can use **isnull().sum().","5a747cee":"<a id=\"62\"><\/a> <br>\n## 6-2 Visualization\n\nWith interactive visualization, you can take the concept a step further by using technology to drill down into charts and graphs for more detail, interactively changing what data you see and how it\u2019s processed.[SAS]\n\n In this section I show you  **+15  plots** with **matplotlib** and **seaborn** that is listed in the blew picture:\n <img src=\"http:\/\/s8.picofile.com\/file\/8338475500\/visualization.jpg\" \/>\n <\/br>\n[go to top](#top)","99e9a977":"**<< Note >>**\n>Preprocessing and generation pipelines depend on a model type.","85224086":"<a id=\"626\"><\/a> <br>\n### 6-2-6 pairplot","ddd6349f":"<a id=\"711\"><\/a> <br>\n## 7-11 Nu-Support Vector Classification\n\n> Similar to SVC but uses a parameter to control the number of support vectors.","41ccd805":"We define the inputs as rows in *X*. There are three input nodes (three columns per vector in $X$. Each row is one trainig example:","edaf59b4":"<a id=\"30\"><\/a> <br>\n## 6-3-1 Features\n**Features**:\n1. numeric\n1. categorical\n1. ordinal\n1. datetime\n1. coordinates\n\nNow could you find the type of features in titanic dataset?\n<img src=\"http:\/\/s9.picofile.com\/file\/8339959442\/titanic.png\" height=\"700\" width=\"600\" \/>","a5e4adca":"The new computation in this new loop is $l1\\_error = l2\\_delta.dot(Wo.T)$, a **confidence weighted error** from $l2$ to compute an error for $l1$. The computation sends the error across the weights from $l2$ to $l1$. The result is a **contribution weighted error**, because we learn how much each node value in $l1$ **contributed** to the error in $l2$. This step is called **backpropagation**. We update $Wh$ using the same steps we did in the 2 layer implementation.\n<br>\n[go to top](#top)","c6ba2a22":"<a id=\"51\"><\/a> <br>\n###   5-1 Import","f8675a81":"**<< Note >>**\n\n**Yellowbrick** is a suite of visual diagnostic tools called \u201cVisualizers\u201d that extend the Scikit-Learn API to allow human steering of the model selection process. In a nutshell, Yellowbrick combines scikit-learn with matplotlib in the best tradition of the scikit-learn documentation, but to produce visualizations for your models! ","c901db1a":"<a id=\"2\"><\/a> <br>\n## 2- Machine Learning Workflow\nField of \tstudy \tthat \tgives\tcomputers\tthe\tability \tto\tlearn \twithout \tbeing\nexplicitly \tprogrammed.\n\n**Arthur\tSamuel, 1959**\n\nIf you have already read some [machine learning books](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist\/tree\/master\/Ebooks). You have noticed that there are different ways to stream data into machine learning.\n\nmost of these books share the following steps (checklist):\n1. Define the Problem(Look at the big picture)\n1. Specify Inputs & Outputs\n1. Data Collection\n1. Exploratory data analysis\n1. Data Preprocessing\n1. Model Design, Training, and Offline Evaluation\n1. Model Deployment, Online Evaluation, and Monitoring\n1. Model Maintenance, Diagnosis, and Retraining\n\n**You can see my workflow in the below image** :\n <img src=\"http:\/\/s9.picofile.com\/file\/8338227634\/workflow.png\" \/>\n\n**you should\tfeel free\tto\tadapt \tthis\tchecklist \tto\tyour needs**\n<br>\n[go to top](#top)","0c065c9d":"**<< Note 2 >>**\n<br>\n> in pandas's data frame you can perform some query such as \"where\".","a9e425ae":"To print dataset **columns**, we can use columns atribute","eb855acc":"To make the outputs deterministic, we seed the random number generator with a constant. This will guarantee that every time you run the code, you will get the same random distribution:","ac156c90":"<a id=\"6210\"><\/a> <br>\n### 6-2-10 Heatmap","a4112a98":"The pattern here is our XOR pattern or problem: If there is a $1$ in either column $1$ or $2$, but not in both, the output is $1$ (XOR over column $1$ and $2$).","3b2c9e47":"## <div style=\"text-align: center\"> +20 ML Algorithms +15 Plot for Beginners<\/div>\n\n<div style=\"text-align: center\"><b>Quite Practical and Far from any Theoretical Concepts<\/b><\/div>\n<img src='https:\/\/image.ibb.co\/gbH3ue\/iris.png'>\n<div style=\"text-align:center\">last update: <b>17\/12\/2018<\/b><\/div>\n\n\n\n>###### you may  be interested have a look at it: [**Course Home Page**](https:\/\/www.kaggle.com\/mjbahmani\/10-steps-to-become-a-data-scientist)\n\n\n---------------------------------------------------------------------\nyou can Fork and Run this kernel on Github:\n> ###### [ GitHub](https:\/\/github.com\/mjbahmani)\n\n-------------------------------------------------------------------------------------------------------------\n\n **I hope you find this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**\n \n -----------","06f53416":"<a id=\"79\"><\/a> <br>\n##  7-9 BernoulliNB\nLike MultinomialNB, this classifier is suitable for **discrete data**. The difference is that while MultinomialNB works with occurrence counts, BernoulliNB is designed for binary\/boolean features.","51ebf8c3":"<a id=\"720\"><\/a> <br>\n## 7-20 Linear Discriminant Analysis\nLinear Discriminant Analysis (discriminant_analysis.LinearDiscriminantAnalysis) and Quadratic Discriminant Analysis (discriminant_analysis.QuadraticDiscriminantAnalysis) are two classic classifiers, with, as their names suggest, a **linear and a quadratic decision surface**, respectively.\n\nThese classifiers are attractive because they have closed-form solutions that can be easily computed, are inherently multiclass, have proven to work well in practice, and have no **hyperparameters** to tune.","6d6ab720":"Consider now a more complicated example where no column has a correlation with the output:\n\n| Input  | Output |\n| ------ |:------:|\n| 0 0 1  | 0      |\n| 0 1 1  | 1      |\n| 1 0 1  | 1      |\n| 1 1 1  | 0      |","a22077be":"<a id=\"716\"><\/a> <br>\n## 7-16 RandomForest\nA random forest is a meta estimator that **fits a number of decision tree classifiers** on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. \n\nThe sub-sample size is always the same as the original input sample size but the samples are drawn with replacement if bootstrap=True (default).","c4713426":"Note the diagonal grouping of some pairs of attributes. This suggests a high correlation and a predictable relationship.","057cb245":">If you have read the notebook, you can follow next steps: [Course Home Page](https:\/\/www.kaggle.com\/mjbahmani\/10-steps-to-become-a-data-scientist)","61671d84":"<a id=\"35\"><\/a> <br>\n## 7-3 Accuracy and precision\n1. **precision** : \n\n    1. In pattern recognition, information retrieval and binary classification, precision (also called positive predictive value) is the fraction of relevant instances among the retrieved instances, \n1. **recall** : \n\n    1. recall is the fraction of relevant instances that have been retrieved over the total amount of relevant instances. \n1. **F-score** :\n\n    1. the F1 score is a measure of a test's accuracy. It considers both the precision p and the recall r of the test to compute the score: p is the number of correct positive results divided by the number of all positive results returned by the classifier, and r is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive). The F1 score is the harmonic average of the precision and recall, where an F1 score reaches its best value at 1 (perfect precision and recall) and worst at 0.\n    <br>\n1. **What is the difference between accuracy and precision?**\n<br>\n    1. \"Accuracy\" and \"precision\" are general terms throughout science. A good way to internalize the difference are the common \"bullseye diagrams\". In machine learning\/statistics as a whole, accuracy vs. precision is analogous to bias vs. variance.","f2f2fb29":"In the prediction line $l1 = sigmoid(np.dot(X, Wo))$ we compute the dot-product of the input vectors with the weights and compute the sigmoid on the sums.\nThe result of the dot-product is the number of rows of the first matrix ($X$) and the number of columns of the second matrix ($Wo$).\nIn the computation of the difference between the true (or gold) values in $y$ and the \"guessed\" values in $l1$ we have an estimate of the miss.\n<br>\n[go to top](#top)","28e3807f":"**<< Note 1 >>**\n\n* Each row is an observation (also known as : sample, example, instance, record)\n* Each column is a feature (also known as: Predictor, attribute, Independent Variable, input, regressor, Covariate)","494e7a82":"<a id=\"3\"><\/a> <br>\n## 3- Problem Definition\nI think one of the important things when you start a new machine learning project is Defining your problem. that means you should understand business problem.( **Problem Formalization**)\n\nProblem Definition has four steps that have illustrated in the picture below:\n<img src=\"http:\/\/s8.picofile.com\/file\/8338227734\/ProblemDefination.png\">\n<a id=\"31\"><\/a> <br>\n### 3-1 Problem Feature\nwe will use the classic Iris data set. This dataset contains information about three different types of Iris flowers:\n\n1. Iris Versicolor\n1. Iris Virginica\n1. Iris Setosa\n\nThe data set contains measurements of four variables :\n\n1. sepal length \n1. sepal width\n1. petal length \n1. petal width\n \nThe Iris data set has a number of interesting features:\n\n1. One of the classes (Iris Setosa) is linearly separable from the other two. However, the other two classes are not linearly separable.\n\n2. There is some overlap between the Versicolor and Virginica classes, so it is unlikely to achieve a perfect classification rate.\n\n3. There is some redundancy in the four input variables, so it is possible to achieve a good solution with only three of them, or even (with difficulty) from two, but the precise choice of best variables is not obvious.\n\n**Why am I  using iris dataset:**\n\n1- This is a good project because it is so well understood.\n\n2- Attributes are numeric so you have to figure out how to load and handle data.\n\n3- It is a classification problem, allowing you to practice with perhaps an easier type of supervised learning algorithm.\n\n4- It is a multi-class classification problem (multi-nominal) that may require some specialized handling.\n\n5- It only has 4 attributes and 150 rows, meaning it is small and easily fits into memory (and a screen or A4 page).\n\n6- All of the numeric attributes are in the same units and the same scale, not requiring any special scaling or transforms to get started.[5]\n\n7- we can define problem as clustering(unsupervised algorithm) project too.\n<a id=\"32\"><\/a> <br>\n### 3-2 Aim\nThe aim is to classify iris flowers among three species (setosa, versicolor or virginica) from measurements of length and width of sepals and petals\n<a id=\"33\"><\/a> <br>\n### 3-3 Variables\nThe variables are :\n**sepal_length**: Sepal length, in centimeters, used as input.\n**sepal_width**: Sepal width, in centimeters, used as input.\n**petal_length**: Petal length, in centimeters, used as input.\n**petal_width**: Petal width, in centimeters, used as input.\n**setosa**: Iris setosa, true or false, used as target.\n**versicolour**: Iris versicolour, true or false, used as target.\n**virginica**: Iris virginica, true or false, used as target.\n\n**<< Note >>**\n> You must answer the following question:\nHow does your company expact to use and benfit from your model.\n<br>\n[go to top](#top)","dd979425":"The [Sigmoid](http:\/\/ml-cheatsheet.readthedocs.io\/en\/latest\/activation_functions.html#sigmoid) activation function introduces non-linearity to the computation. It maps the input value to an output value between $0$ and $1$.","5f1f9e06":"To give a statistical summary about the dataset, we can use **describe()","66c94f7a":"The product of the error and the slopes **reduces the error of high confidence predictions**. When the sigmoid slope is very shallow, the network had a very high or a very low value, that is, it was rather confident. If the network guessed something close to $x=0, y=0.5$, it was not very confident. Such predictions without confidence are updated most significantly. The other peripheral scores are multiplied with a number closer to $0$.","6d616ea8":"As you can see in the below in python, it is so easy perform some query on the dataframe:","38102420":"The *sigmoid_prime* function returns the derivative of the sigmoid for any given $z$. The derivative of the sigmoid is $z * (1 - z)$. This is basically the slope of the sigmoid function at any given point: ","355ee891":"To cope with this problem, we need a network with another layer, that is a layer that will combine and transform the input, and an additional layer will map it to the output. We will add a *hidden layer* with randomized weights and then train those to optimize the output probabilities of the table above.","6b327a41":"<a id=\"7152\"><\/a> <br>\n### 7-15-2 The XOR Problem\nThe power of neural units comes from combining them into larger networks. Minsky and Papert (1969): A single neural unit cannot compute the simple logical function XOR.\n\nThe task is to implement a simple **perceptron** to compute logical operations like AND, OR, and XOR.\n\n- Input: $x_1$ and $x_2$\n- Bias: $b = -1$ for AND; $b = 0$ for OR\n- Weights: $w = [1, 1]$\n\nwith the following activation function:\n\n$$\ny = \\begin{cases}\n    \\ 0 & \\quad \\text{if } w \\cdot x + b \\leq 0\\\\\n    \\ 1 & \\quad \\text{if } w \\cdot x + b > 0\n  \\end{cases}\n$$"}}