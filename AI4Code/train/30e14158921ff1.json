{"cell_type":{"f4af8866":"code","bd81df51":"code","2bf3605b":"code","903c87b7":"code","55bcedc0":"code","bfd96c31":"code","3ba0b8a5":"code","ce67c7ee":"code","8a75291e":"code","d043d8fd":"code","d61330dc":"code","d6299205":"code","bb490322":"code","12a7ce64":"code","2b692ef2":"code","121867f7":"code","9438c2fd":"code","9d820fb9":"code","cfba93f8":"code","4932f6fc":"code","34d54de3":"code","6a0d7912":"code","eb9eb41d":"code","010621e5":"code","7d08dad9":"code","4568fa78":"code","6f43e006":"code","6474ee77":"code","dbef3eef":"code","2603e338":"code","aef32a13":"code","c979e224":"code","abb67ffa":"code","ea9dea18":"code","f5a2e909":"code","22d7752f":"code","af180bb2":"code","9bfa1e11":"code","561ac44b":"code","636851c1":"code","000acbf1":"code","d3230837":"code","1b06363c":"code","ce3723c3":"code","52ea8dbd":"code","d5385ad1":"code","4245246c":"code","4a719878":"code","cbc7e8cf":"code","1795c505":"code","52f12d85":"code","e8991e6c":"code","bd8e58f2":"code","e4d84da8":"code","129c2ab8":"code","c79087e5":"markdown","5f436db9":"markdown","4e86057c":"markdown","0448ba83":"markdown","b2e8dcc0":"markdown","9f29e31d":"markdown","89fbd334":"markdown","ec9a4553":"markdown","2e749d7a":"markdown","bc3b118b":"markdown","dd86fb00":"markdown","515ebb18":"markdown","c20e3df8":"markdown","ca8841be":"markdown","88b734dc":"markdown","cbc38e07":"markdown","0e853cc4":"markdown","48c6ce7c":"markdown","b040256d":"markdown","a8b141dc":"markdown","7cceebdf":"markdown","1c065079":"markdown","5911b006":"markdown","4c227b87":"markdown","55f0fa68":"markdown","ad574feb":"markdown","5c11f5e5":"markdown","d12c4ebc":"markdown","90c1dc1b":"markdown","e42787b5":"markdown","7820d3ad":"markdown"},"source":{"f4af8866":"!pip install fastai2","bd81df51":"from fastai2.vision.all import *\nimport os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","2bf3605b":"project_name = 'Dance-Classifier'","903c87b7":"DATA_DIR = '..\/input\/indian-danceform-classification\/dataset'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV =  DATA_DIR + '\/test.csv'                        # Contains dummy labels for test image","55bcedc0":"os.listdir(TRAIN_DIR)[:5]","bfd96c31":"Image.open(TRAIN_DIR+'\/234.jpg')","3ba0b8a5":"Image.open(TRAIN_DIR+'\/287.jpg')","ce67c7ee":"len(os.listdir(TRAIN_DIR))","8a75291e":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","d043d8fd":"train_df.target.value_counts()","d61330dc":"def get_x(r): return DATA_DIR+'\/train\/'+r['Image']  # Image Directory\ndef get_y(r): return r['target']                    # Getting the label\ndblock = DataBlock(\n    blocks=(ImageBlock,CategoryBlock),\n    splitter=RandomSplitter(),\n    get_x = get_x,\n    get_y = get_y,\n    item_tfms = Resize(330),\n    batch_tfms=aug_transforms(mult=2))\n\ndls = dblock.dataloaders(train_df)\n\ntrain_dl = dls.train\nvalid_dl = dls.valid","d6299205":"dls.show_batch()","bb490322":"dls.train.show_batch()","12a7ce64":"dls.valid.show_batch()","2b692ef2":"# Let's save the work to jovian\n!pip install jovian --upgrade -q\nimport jovian\njovian.commit(project = project_name, environment=None)","121867f7":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))","9438c2fd":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","9d820fb9":"class DanceModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.linear1 = nn.Linear(input_size, 512)  # first linear layer\n        self.linear2 = nn.Linear(512, 128)          # second linear layer\n        self.linear3 = nn.Linear(128, output_size)  # third linear layer\n\n        \n    def forward(self, xb):\n        # Flatten images into vectors\n        out = xb.view(xb.size(0), -1)\n        # Apply layers & activation functions\n        out = self.linear1(out)\n        out = F.relu(out)\n        \n        out = self.linear2(out)\n        out = F.relu(out)\n        \n        out = self.linear3(out)\n        return out","cfba93f8":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","4932f6fc":"device = get_default_device()\nprint(device)\n\n# image size is 224x224x3 \n# output class = 8\ninput_size = 330*330*3\noutput_size = 8\nmodel = to_device(DanceModel(), device)","34d54de3":"history = [evaluate(model, valid_dl)]\nhistory","6a0d7912":"history += fit(5, 1e-3, model, train_dl, valid_dl)","eb9eb41d":"history += fit(5, 1e-2, model, train_dl, valid_dl)","010621e5":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');\n    \ndef plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n    ","7d08dad9":"plot_losses(history)","4568fa78":"plot_accuracies(history)","6f43e006":"arch1 = \"4 layers (1024, 512, 128, 8)\"\narch2 = '3 layers (512, 128, 8)'\narch = [arch1, arch2]","6474ee77":"lrs1 = [1e-2, 1e-3]\nlrs2 = [1e-2, 1e-3]\nlrs = [lrs1, lrs2]","dbef3eef":"epoch1 = [5, 5]\nepoch2 = [5, 5]\nepochs = [epoch1, epoch2]","2603e338":"valid_acc = [14.8, 24]\nvalid_loss = [2.10, 2.10]","aef32a13":"torch.save(model.state_dict(), 'dance-feed-forward.pth')","c979e224":"# Clear previously recorded hyperparams & metrics\njovian.reset()","abb67ffa":"jovian.log_hyperparams(arch=arch, \n                       lrs=lrs, \n                       epochs=epochs)","ea9dea18":"jovian.log_metrics(valid_loss=valid_loss, valid_acc=valid_acc)","f5a2e909":"jovian.commit(project=project_name, outputs=['dance-feed-forward.pth'], environment=None)","22d7752f":"class DanceResnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n#         self.network = models.resnet34(pretrained=True)\n        self.network = models.resnet50(pretrained=True)\n        \n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","af180bb2":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","9bfa1e11":"device = get_default_device()\nprint(device)\nmodel = to_device(DanceResnet(), device)","561ac44b":"history = [evaluate(model, valid_dl)]\nhistory","636851c1":"model.freeze()","000acbf1":"epochs = 5\nmax_lr =  1e-3\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","d3230837":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","1b06363c":"model.unfreeze()","ce3723c3":"%%time\nhistory += fit_one_cycle(5, 1e-4, model, train_dl, valid_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","52ea8dbd":"plot_losses(history)","d5385ad1":"plot_accuracies(history)","4245246c":"arch1 = 'resnet 34'\narch2 = 'resnet 50'\narch3 = 'resnet 50: replaced RandomResized224 to Resize224'\narch3 = 'resnet 50: replaced Resized224 to Resize330'\narch = [arch1, arch2, arch3]","4a719878":"lrs1 = [1e-4, 1e-4]\nlrs2 = [1e-3, 1e-4]\nlrs = [lrs1, lrs2]","cbc7e8cf":"epoch1 = [5, 5]\nepoch2 = [5, 5]\nepochs = [epoch1, epoch2]","1795c505":"valid_acc = [64, 71]\nvalid_loss = [1.76, 1.68]","52f12d85":"torch.save(model.state_dict(), 'dance-resnet50.pth')","e8991e6c":"# Clear previously recorded hyperparams & metrics\njovian.reset()","bd8e58f2":"jovian.log_hyperparams(arch=arch, \n                       lrs=lrs, \n                       epochs=epochs)","e4d84da8":"jovian.log_metrics(valid_loss=valid_loss, valid_acc=valid_acc)","129c2ab8":"jovian.commit(project=project_name, outputs=['dance-resnet50.pth'], environment=None)","c79087e5":"**list of artchitures**","5f436db9":"**Q: what is the total no of images belongs to each class?**","4e86057c":"# Importing the libraries","0448ba83":"# 1. Feedforward Network","b2e8dcc0":"# IDENTIFY THE DANCE FORM\n\n**Identify the dance form is a machine learning competition hosted by hackerearth: a platform where you can learn coding and machine learning. I'll use the dataset of this competition for my course project 'Deep Learning with Pytorch: Zero to GANs' : a free course provided by jovian.ml and freecode camp. For more information visit.** ","9f29e31d":"**Final validation accuracy and loss**","89fbd334":"**Train the model using the fit function to reduce the validation loss & improve accuracy.**","ec9a4553":"# Model\nLet's create a base model class, which contains everything except the model architecture i.e. it wil not contain the __init__ and __forward__ methods. We will later extend this class to try out different architectures. In fact, you can extend this model to solve any image classification problem.","2e749d7a":"## Recoding your results\n\nAs we perform multiple experiments, it's important to record the results in a systematic fashion, so that we can review them later and identify the best approaches that we might want to reproduce or build upon later. ","bc3b118b":"**Let's look a batch of dataset**","dd86fb00":"All the given training images are at TRAIN_DIR directory. Let's look at few: ","515ebb18":"# Exploring The Dataset","c20e3df8":"**In this notebook I will usedifferent artchiture given below and measure their effectiveness:**\n1. Use feedword neural network\n2. Transfer learning","ca8841be":"# Model on GPU","88b734dc":"**Let us also define a couple of helper functions for plotting the losses & accuracies.**","cbc38e07":"## Recoding your results\n\nAs we perform multiple experiments, it's important to record the results in a systematic fashion, so that we can review them later and identify the best approaches that we might want to reproduce or build upon later. ","0e853cc4":"**Q: What is the total no of images?**","48c6ce7c":"# Dataset and Dataloader\n\nI will use fastai datablock to make dataset and dataloader which I've learn recently through fastbook. If you want to learn Machine Learning this is the best resourse. Visit [fast.ai](http:\/\/fast.ai) for more information.","b040256d":"**list of artchitures**","a8b141dc":"# 2. Transfer Learning","7cceebdf":"# Model on GPU","1c065079":"**No of epoch used while training**","5911b006":"**List of learning rates**","4c227b87":"**No of epoch used while training**","55f0fa68":"**List of learning rates**","ad574feb":"## Problem statement\n\nThis International Dance Day, an event management company organized an evening of Indian classical dance performances to celebrate the rich, eloquent, and elegant art of dance. Post the event, the company planned to create a microsite to promote and raise awareness among the public about these dance forms. However, identifying them from images is a tough nut to crack.\n\nYou have been appointed as a Machine Learning Engineer for this project. Build an image tagging Deep Learning model that can help the company classify these images into eight categories of Indian classical dance.\n\n**The dataset consists of 364 images belonging to 8 categories, namely manipuri, bharatanatyam, odissi, kathakali, kathak, sattriya, kuchipudi, and mohiniyattam.**\n\nDataset link : https:\/\/www.hackerearth.com\/challenges\/competitive\/hackerearth-deep-learning-challenge-identify-dance-form\/","5c11f5e5":"# Training","d12c4ebc":"Before you train the model, it's a good idea to check the validation loss & accuracy with the initial set of weights.","90c1dc1b":"**Final validation accuracy and loss**","e42787b5":"**Train the model using the fit function to reduce the validation loss & improve accuracy.**","7820d3ad":"**To train a classifier we need labels which is given in TRAIN_CSV file. Each images is mapped with their labels in this file. Let's look at this file.**"}}