{"cell_type":{"1d2ad7d4":"code","7855422e":"code","8ec5cd9f":"code","ddc829d2":"code","0134ec27":"code","3ae7ece4":"code","c410e92f":"code","474176ed":"code","6495d9fd":"code","8fae10eb":"code","8726751a":"code","5620c23e":"code","52464727":"markdown","54661401":"markdown","38a9484d":"markdown"},"source":{"1d2ad7d4":"import pandas as pd\nimport numpy as np\nimport random\nimport os\n\nfrom scipy.stats import rankdata\nfrom pathlib import Path\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import BayesianRidge, Ridge","7855422e":"n_folds = 10\nseed_list = [i for i in range(2000, 2022)]","8ec5cd9f":"def set_seed(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nset_seed(seed_list[0])","ddc829d2":"INPUT_PATH = Path(\"..\/input\/tabular-playground-series-mar-2021\")\n\nTRAIN_PATH = Path(\"..\/input\/tps-mar-2021-preprocessed-data\/preprocessed-data\/train\")\nTEST_PATH = Path(\"..\/input\/tps-mar-2021-preprocessed-data\/preprocessed-data\/test\")","0134ec27":"train_df = pd.read_csv(INPUT_PATH \/ \"train.csv\")\ntest_df = pd.read_csv(INPUT_PATH \/ \"test.csv\")\nsub_df = pd.read_csv(INPUT_PATH \/ 'sample_submission.csv')","3ae7ece4":"train_oof_dict = {\n    'trans_1': 'train_rgr_epoch2000_probas8_params0_batch512.npy',\n    'trans_2': 'train_rgr_epoch2000_probas8_params1_batch512.npy',\n    'trans_3': 'train_rgr_epoch2000_probas8_params2_batch512.npy',\n    'trans_4': 'train_rgr_epoch2000_probas8_params3_batch512.npy',\n    'trans_5': 'train_rgr_epoch2000_probas8_params4_batch512.npy',\n    'trans_6': 'train_rgr_epoch2000_probas8_params5_batch512.npy',\n    'trans_7': 'train_rgr_epoch2000_probas8_params6_batch512.npy',\n    'lightgbm1': 'train_lgb.npy',\n    'lightgbm2': 'train_oof_lgbm_0.npy',\n    'lightgbm3': 'train_oof_lgbm_1.npy',\n    'xgboost': 'train_xgb.npy',\n    'catboost': 'train_cbt.npy',\n    'logistic_regression1': 'train_lr.npy',\n    'logistic_regression2': 'train_oof_lr_0.npy',\n    'random_forest': 'train_rf.npy',\n    'tabnet1': 'train_tabnet_0.npy',\n    'tabnet2': 'train_tabnet_1.npy',\n    'histgradient1': 'train_oof_hgb_0.npy',\n    'histgradient2': 'train_oof_hgb_1.npy',\n    'keras1': 'train_keras_0.npy',\n    'keras2': 'train_keras_1.npy'\n}\n\ntest_pred_dict = {\n    'trans_1': 'test_rgr_epoch2000_probas8_params0_batch512.npy',\n    'trans_2': 'test_rgr_epoch2000_probas8_params1_batch512.npy',\n    'trans_3': 'test_rgr_epoch2000_probas8_params2_batch512.npy',\n    'trans_4': 'test_rgr_epoch2000_probas8_params3_batch512.npy',\n    'trans_5': 'test_rgr_epoch2000_probas8_params4_batch512.npy',\n    'trans_6': 'test_rgr_epoch2000_probas8_params5_batch512.npy',\n    'trans_7': 'test_rgr_epoch2000_probas8_params6_batch512.npy',\n    'lightgbm1': 'test_lgb.npy',\n    'lightgbm2': 'test_preds_lgbm_0.npy',\n    'lightgbm3': 'test_preds_lgbm_1.npy',\n    'xgboost': 'test_xgb.npy',\n    'catboost': 'test_cbt.npy',\n    'logistic_regression1': 'test_lr.npy',\n    'logistic_regression2': 'test_preds_lr_0.npy',\n    'random_forest': 'test_rf.npy',\n    'tabnet1': 'test_tabnet_0.npy',\n    'tabnet2': 'test_tabnet_1.npy',\n    'histgradient1': 'test_preds_hgb_0.npy',\n    'histgradient2': 'test_preds_hgb_1.npy',\n    'keras1': 'test_keras_0.npy',\n    'keras2': 'test_keras_1.npy'\n}\n","c410e92f":"oof_df = pd.DataFrame()\npreds_df = pd.DataFrame()\n\nfor name, train_oof in train_oof_dict.items():\n    oof_df = pd.concat([oof_df, pd.Series(np.load(TRAIN_PATH \/ train_oof), name=name)], axis=1)\n    \nfor name, test_pred in test_pred_dict.items():\n    preds_df = pd.concat([preds_df, pd.Series(np.load(TEST_PATH \/ test_pred), name=name)], axis=1)","474176ed":"oof_rank = np.mean(rankdata(oof_df, axis=0), axis=1) \/ oof_df.shape[0]\npreds_rank = np.mean(rankdata(preds_df, axis=0), axis=1) \/ preds_df.shape[0]","6495d9fd":"auc = roc_auc_score(train_df['target'], rankdata(oof_rank), average='micro')\nprint(f'auc {auc:.6f}')    ","8fae10eb":"sub_df['target'] = preds_rank\nsub_df.to_csv(f\"submission_rank_averaging_cv{auc:.6f}.csv\", index=False)\ndisplay(sub_df.head(), sub_df.tail())","8726751a":"oof_list = list()\npreds_list = list()\n\nfor seed in seed_list:\n    oof = np.zeros(oof_df.shape[0])\n    preds = 0\n    skf = StratifiedKFold(n_splits=n_folds, shuffle=True, random_state=seed)\n    \n    for fold, (train_idx, valid_idx) in enumerate(skf.split(oof_df, train_df['target'])):\n        model = Ridge(random_state=seed)\n        model.fit(oof_df.iloc[train_idx], train_df['target'].to_numpy()[train_idx])\n\n        oof[valid_idx] = model.predict(oof_df.iloc[valid_idx])\n        preds += model.predict(preds_df) \/ n_folds\n\n    auc = roc_auc_score(train_df['target'], oof)\n    print(f\"SEED {seed}: AUC {auc:.6f}\")\n\n    oof_list.append(oof)\n    preds_list.append(preds)\n\nprint(f\"SEED AVERAGING AUC {roc_auc_score(train_df['target'], np.mean(rankdata(oof_list, axis=1), axis=0)\/oof_df.shape[0]):.6f}\")","5620c23e":"sub_df['target'] = np.mean(rankdata(preds_list, axis=1), axis=0) \/ preds_df.shape[0]\nsub_df.to_csv(f\"submission_stacking_cv{auc:.6f}.csv\", index=False)\ndisplay(sub_df.head(), sub_df.tail())","52464727":"## Stacking","54661401":"# TPS Mar 2021 Rank Averaging and Stacking","38a9484d":"## Rank Averaging"}}