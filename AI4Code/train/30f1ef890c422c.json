{"cell_type":{"26357b48":"code","d0f27877":"code","23a38432":"code","35120f81":"code","88b952ee":"code","5e54c3fb":"code","5f960b24":"code","4ce0bd46":"code","80b105e7":"code","a9197303":"code","84159082":"code","a9d192d5":"code","67ccff7b":"code","21a1f97e":"code","66e89388":"code","29682336":"code","d06ded66":"code","07867de3":"markdown","99f8f365":"markdown","6f00aa3d":"markdown","cc06a736":"markdown","748cc5ff":"markdown","1c46b97d":"markdown","7484f37f":"markdown","b7a42815":"markdown","7d17c512":"markdown","b969b714":"markdown","43010336":"markdown","f72ec2d1":"markdown","b88ccaaf":"markdown"},"source":{"26357b48":"import numpy as np\nimport pandas as pd \n\n# Visualization\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\nimport seaborn as sns\n\n# sklearn for feature extraction & modeling\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\n\n# Iteratively read files\nimport glob\nimport os\n\n# For displaying images in ipython\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline","d0f27877":"train = pd.read_csv('..\/input\/student-shopee-code-league-sentiment-analysis\/train.csv')\ntrain.head()","23a38432":"test = pd.read_csv('..\/input\/student-shopee-code-league-sentiment-analysis\/test.csv')\ntest.head()","35120f81":"#Library for building wordcloud\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","88b952ee":"heading_1 = train[train[\"rating\"]==1][\"review\"] # Extract only Summary of reviews\ncollapsed_heading_1 = heading_1.str.cat(sep=' ')\n\nheading_2 = train[train[\"rating\"]==2][\"review\"] # Extract only Summary of reviews\ncollapsed_heading_2 = heading_2.str.cat(sep=' ')\n\nheading_3 = train[train[\"rating\"]==3][\"review\"] # Extract only Summary of reviews\ncollapsed_heading_3 = heading_3.str.cat(sep=' ')\n\nheading_4 = train[train[\"rating\"]==4][\"review\"] # Extract only Summary of reviews\ncollapsed_heading_4 = heading_4.str.cat(sep=' ')\n\nheading_5 = train[train[\"rating\"]==5][\"review\"] # Extract only Summary of reviews\ncollapsed_heading_5 = heading_5.str.cat(sep=' ')","5e54c3fb":"# Create stopword list:\nstopwords = set(STOPWORDS)\n#stopwords.update([\"Subject\",\"re\",\"fw\",\"fwd\"])\n\nprint(\"Word Cloud for Rating 1\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_1)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Rating 2\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_2)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Rating 3\")\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_3)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\nprint(\"\\nWord Cloud for Rating 4\")\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_4)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n     \nprint(\"\\nWord Cloud for Rating 5\")\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\",max_words=50).generate(collapsed_heading_5)\n\n# Display the generated image:\n# the matplotlib way:1\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","5f960b24":"# Building Pipeline for raw text transformation\nclf = Pipeline([\n    ('vect', CountVectorizer(stop_words= \"english\")),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', MultinomialNB()),\n    ])","4ce0bd46":"# Remove records with blank values\ntrain_1 = train.dropna()\ntrain_1.shape , train.shape","80b105e7":"X_train, X_test, y_train, y_test = train_test_split(train[\"review\"], train[\"rating\"],random_state = 42,\n                                                   test_size = 0.10)\nX_train.shape,X_test.shape,y_train.shape","a9197303":"model = clf.fit(X_train,y_train)","84159082":"print(\"Accuracy of Naive Bayes Classifier is {}\".format(model.score(X_test,y_test)))","a9d192d5":"y_predicted = model.predict(X_test)\ny_predicted[0:10]","67ccff7b":"test = pd.read_csv('..\/input\/student-shopee-code-league-sentiment-analysis\/test.csv')\ntest.head()","21a1f97e":"preds = model.predict(test['review'])\npreds[0:10]","66e89388":"subs = pd.DataFrame(test['review_id'])\nsubs['rating'] = preds","29682336":"subs","d06ded66":"subs.to_csv('subs.csv', index=False)","07867de3":"### Option 2: Random Forest","99f8f365":"## Import Packages","6f00aa3d":"from sklearn import svm\n\nclf = Pipeline([\n    ('vect', CountVectorizer(stop_words= \"english\")),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', svm.SVC()),\n    ])","cc06a736":"## WordCloud","748cc5ff":"### Predict for Subs","1c46b97d":"### Splitting data","7484f37f":"### Option 3: SVM","b7a42815":"## Preprocessing Pipeline","7d17c512":"model = clf.fit(X_train,y_train)\nprint(\"Accuracy of Random Forest Classifier is {}\".format(model.score(X_test,y_test)))","b969b714":"clf = Pipeline([\n    ('vect', CountVectorizer(stop_words= \"english\")),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', RandomForestClassifier(n_jobs= -1)),\n    ])\n\nmodel = clf.fit(X_train,y_train)\nprint(\"Accuracy of Random Forest Classifier is {}\".format(model.score(X_test,y_test)))","43010336":"# Product Sentiment Analysis - SCL 2020\n- WordCloud\n- Data Splitting\n- Pipeline (CountVectorizer, TFIDF, MultinomialNB)\n- Pipeline w\/ Random Forest, SVM","f72ec2d1":"y_predicted = model.predict(X_test)\ny_predicted[0:10]","b88ccaaf":"y_predicted = model.predict(X_test)\ny_predicted[0:10]"}}