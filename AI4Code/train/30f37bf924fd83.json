{"cell_type":{"d04d8c01":"code","0349025b":"code","0b476714":"code","1186d4e1":"code","85bb56bb":"code","f7145e5f":"code","8b993261":"code","60d629f9":"code","2796a4c6":"code","959f8596":"markdown","4d83147c":"markdown","abb2a483":"markdown","934fc526":"markdown","568cd688":"markdown"},"source":{"d04d8c01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0349025b":"surveys = pd.read_csv(\"\/kaggle\/input\/hosing-survey\/HW2_Housing Survey.csv\")\nsurveys.head()","0b476714":"# VAL means property value\n# surveys.VAL == 24 means property value >= $1,000,000\nmore_than_million = surveys.VAL.loc[surveys.VAL == 24]\n\n# more_than_million.shape returns (53, 188)\n# (53, 188) indicates that the DataFrame has 53 rows and 188 columns\nmore_than_million.shape[0]","1186d4e1":"# NP means number of person records following this housing record\navg_np = surveys.NP.mean()\navg_np","85bb56bb":"import matplotlib.pyplot as plt\n\n# filtering out records with NaN in VAL column\nfiltered_surveys = surveys.dropna(subset=['VAL'])\n\nproperty_val = filtered_surveys.VAL\nnum_persons = filtered_surveys.NP\n\n# plot the dot graph with given values\nplt.title(\"Property value vs. Numbers of persons\")\nplt.ylabel(\"Property value\")\nplt.xlabel(\"Numbers of persons\")\n\nplt.plot(num_persons, property_val, \".\")\nplt.show()","f7145e5f":"# plot the line graph with given values\nplt.title(\"Average numbers of persons vs. Property value\")\nplt.ylabel(\"Average numbers of persons\")\nplt.xlabel(\"Property value\")\n\n# find the average numbers of persons for each property value\navg_num_persons = filtered_surveys.groupby('VAL').NP.agg('mean')\nproperty_val_array = np.sort(property_val.unique()) # return the numpy array\n\nplt.plot(property_val_array, avg_num_persons)\nplt.show()","8b993261":"# FINCP means Family income\n# filtering out records with NaN in FINCP column\nfam_income = surveys.dropna(subset=[\"FINCP\"]).FINCP\n\n# normalize fam_income with min-max normalization\nnormalized_fam_income = (fam_income - fam_income.min()) \/ (fam_income.max() - fam_income.min())\n\n# plot the histograph with fam_income\nplt.title(\"Histogram of family income\")\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Famiy income\")\nplt.hist(fam_income)","60d629f9":"# plot the histograph with normalized_fam_income\nplt.title(\"Histogram of normalized family income\")\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Normalized famiy income\")\nplt.hist(normalized_fam_income)","2796a4c6":"# plot the 5-bins histogram with normalized_fam_income\nplt.title(\"5-bins Histogram of normalized family income\")\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Normalized family income\")\nplt.hist(normalized_fam_income, bins=5)","959f8596":"* Create 5 bins for family income.","4d83147c":"* Draw a graph to show the relationship between the property value and the number of persons recorded.","abb2a483":"* Normalize family income into a range (0~1). Compare before vs after in histogram.","934fc526":"* How many properties are worth $1,000,000 or more?","568cd688":"* How many people recorded in a house on average?"}}