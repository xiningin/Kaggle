{"cell_type":{"a75b2a1d":"code","f412e269":"code","f96eeb1d":"code","9f95931a":"code","1ac1c108":"code","4f43d1aa":"code","f669d76a":"code","0da43d77":"code","865d8d7c":"code","86cec8dd":"code","50f20532":"code","44c8f5d7":"code","0a86b74a":"code","f34b7997":"code","869037db":"code","6cb17807":"code","07a3238e":"code","24518c4a":"code","2eaefa0d":"code","cf844999":"code","32c8d5dd":"code","2df0655a":"code","2fb219fd":"code","52afff89":"code","f5ed6353":"code","670666b0":"code","cb2604e4":"code","2b6f3a73":"code","0308034c":"code","fca53996":"code","33f95006":"code","70e8fa75":"code","a5acaba2":"code","8c5b8b10":"code","7e765636":"code","209414d6":"code","cdd32fd6":"code","6645c944":"code","b8f1c6cb":"code","da1faa4c":"code","2437f00e":"code","275ca6c9":"code","e49d5ce8":"code","8f061d21":"code","3998105f":"code","ef84701d":"code","363c0106":"code","67626f12":"code","275263bc":"code","947b55ec":"code","23b63d20":"code","29e411c5":"code","d82b2d81":"code","572ea725":"code","48ce5274":"code","04b71c4a":"code","12be5825":"code","1c379864":"code","ac50601c":"code","300843ea":"code","eb5abf91":"code","3cb65e98":"code","1695a393":"code","6e8c1d93":"code","40c4e8fd":"code","fb0d2c37":"code","481a3859":"code","477d9d40":"code","7fee929e":"code","5cf27a49":"code","522a4885":"code","0c394530":"code","136d25b5":"code","64eecad5":"code","c86e2d00":"code","d40f89ff":"code","79a2a110":"code","465d6be3":"code","6c6c22c0":"code","c307307d":"code","ca232804":"code","37faeb55":"code","e649bccd":"code","e6f3530b":"code","b69d4ac2":"code","c516ee7b":"code","c56a5642":"code","20e53fc9":"code","81247092":"code","d95d356f":"code","02bae577":"code","7a504055":"code","45e38607":"code","c5d8c741":"code","fc7e73c4":"code","eb9f78d1":"code","22a0470d":"code","9a5cc486":"code","f6b81681":"code","73a31c0c":"code","3ab9bafa":"markdown","2a3a7df0":"markdown","ca138d3a":"markdown","894ceb76":"markdown","a1d72c4f":"markdown","c6ed6185":"markdown","5917609f":"markdown","72446572":"markdown","cc97ce7a":"markdown","3bee4346":"markdown","0a3e7b16":"markdown","828dd902":"markdown","d2409501":"markdown","b0dee4bd":"markdown","399bcc93":"markdown","90e396b6":"markdown","6e5cabe7":"markdown","670db488":"markdown","e626331f":"markdown","94d51eb3":"markdown","0b597675":"markdown","9584dcda":"markdown","ff2e9b9f":"markdown","b3790838":"markdown","06d0df47":"markdown","56d31528":"markdown","e81ea0a3":"markdown","58fefa76":"markdown","b667c16f":"markdown","3b03c94d":"markdown","4fab633d":"markdown","d3bb12dd":"markdown","bfa416e0":"markdown","ccdf9d84":"markdown","19179b39":"markdown","912c8361":"markdown","fa66dca5":"markdown","4e6fe32c":"markdown","1253ce3a":"markdown","7300890e":"markdown","88b0ba54":"markdown","13857e34":"markdown","e0b557b6":"markdown","e07855e4":"markdown","3ad8f8fc":"markdown","410cae50":"markdown","ed994ffd":"markdown","d8d77f2a":"markdown","c4cfec3c":"markdown","541f0dc9":"markdown","e8cacee0":"markdown","dcbbd8a2":"markdown","85feb7a7":"markdown","68020754":"markdown","c62dd2f6":"markdown","84ed183d":"markdown","a82c8aa0":"markdown","2203b82f":"markdown","9cf43030":"markdown","f857cfd5":"markdown","5b0afce9":"markdown","dc6751d4":"markdown","e1acc4aa":"markdown","1b902587":"markdown","72c50f83":"markdown","35c7bf10":"markdown","2a200104":"markdown","2f770607":"markdown","5593b06b":"markdown","d179d190":"markdown","5d50552f":"markdown","e97a0b6c":"markdown","05e9d63e":"markdown","5611fb63":"markdown","488b6289":"markdown","5e9f4a5c":"markdown","4208e372":"markdown"},"source":{"a75b2a1d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","f412e269":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f96eeb1d":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","9f95931a":"train.head()","1ac1c108":"train.shape","4f43d1aa":"train.describe()","f669d76a":"# describe(include = ['O'])* will show the descriptive statistics of object data types.\n\ntrain.describe(include=['O'])","0da43d77":"train.Ticket.value_counts()","865d8d7c":"# Identify the duplicate tickets deatils using the below code\n\n#ticket_val = train['Ticket']\n#train[ticket_val.isin(ticket_val[ticket_val.duplicated()])]\n#train[train.duplicated(['Ticket'], keep=False)]\ntrain[train['Ticket'].duplicated() == True]","86cec8dd":"train['Ticket'].value_counts()[train['Ticket'].value_counts() == train['Ticket'].value_counts().max()].plot()","50f20532":"# We use info() method to see more information of our train dataset.\ntrain.info()","44c8f5d7":"# checking if any column has some missing values\ntrain.isnull().sum()","0a86b74a":"train.isnull().sum().plot(kind='bar')\nplt.title('Check null values in the features')\nplt.xlabel('Features')\nplt.ylabel('Null Count')\nplt.show()","f34b7997":"test.shape","869037db":"test.head()","6cb17807":"test.info()","07a3238e":"test.isnull().sum()","24518c4a":"survived = train[train['Survived'] == 1]\nnot_survived = train[train['Survived'] == 0]\n\nprint (\"Survived: %i (%.1f%%)\"%(len(survived), float(len(survived))\/len(train)*100.0))\nprint (\"Not Survived: %i (%.1f%%)\"%(len(not_survived), float(len(not_survived))\/len(train)*100.0))\nprint (\"Total: %i\"%len(train))\n","2eaefa0d":"train.Pclass.value_counts()","cf844999":"train.Pclass.value_counts().plot(kind='bar', subplots = False)","32c8d5dd":"# Find the survived members count respective to Passenger class\npclass_survived = train.groupby('Pclass').Survived.value_counts()\npclass_survived","2df0655a":"# plotting the pclass vs survived\npclass_survived.unstack(level=0).plot(kind='bar', subplots=False)","2fb219fd":"# Find the ratio of the survived people respective to the Passengers class\npclass_survived_average = train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()\npclass_survived_average","52afff89":"pclass_survived_average.plot(kind='bar', subplots=False)","f5ed6353":"# The above statement can be clearly understood from the plot below.\nsns.barplot(x='Pclass', y='Survived', data=train)","670666b0":"# Display the gender count\ntrain.Sex.value_counts()","cb2604e4":"# Display the gender count in graph\ntrain.Sex.value_counts().plot(kind='bar')","2b6f3a73":"# Find the survival count respective to Sex\nsex_survival = train.groupby('Sex').Survived.value_counts()\nsex_survival","0308034c":"# Show the survival count respective to Sex in graph\nsex_survival.unstack(level=0).plot(kind='bar', subplots=False)","fca53996":"sex_survived_average = train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()\nsex_survived_average","33f95006":"sex_survived_average.plot(kind='bar', subplots=False)","70e8fa75":"sns.barplot(x='Sex', y='Survived', data=train)","a5acaba2":"tab = pd.crosstab(train['Pclass'], train['Sex'])\nprint (tab)\n\ntab.div(tab.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=False)\nplt.xlabel('Pclass')\nplt.ylabel('Percentage')","8c5b8b10":"sns.factorplot('Sex', 'Survived', hue='Pclass', size=4, aspect=2, data=train)\n","7e765636":"sns.factorplot(x='Pclass', y='Survived', hue='Sex', col='Embarked', data=train)","209414d6":"train.Embarked.value_counts()","cdd32fd6":"train.groupby('Embarked').Survived.value_counts()","6645c944":"train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","b8f1c6cb":"#train.groupby('Embarked').Survived.mean().plot(kind='bar')\nsns.barplot(x='Embarked', y='Survived', data=train)","da1faa4c":"train.Parch.value_counts()","2437f00e":"train.groupby('Parch').Survived.value_counts()","275ca6c9":"train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()","e49d5ce8":"sns.barplot(x='Parch', y='Survived', data = train, ci=None) # ci -> to hide the error bar","8f061d21":"train.SibSp.value_counts()","3998105f":"train.groupby('SibSp').Survived.value_counts()","ef84701d":"train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()","363c0106":"#train.groupby('SibSp').Survived.mean().plot(kind='bar')\nsns.barplot(x='SibSp', y='Survived', ci=None, data=train) \n# ci=None will hide the error bar","67626f12":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nsns.violinplot(x=\"Embarked\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax1)\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax2)\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax3)","275263bc":"total_survived = train[train['Survived']==1]\ntotal_not_survived = train[train['Survived']==0]\n\nmale_survived = train[(train['Survived']==1) & (train['Sex']==\"male\")]\nfemale_survived = train[(train['Survived']==1) & (train['Sex']==\"female\")]\n\nmale_not_survived = train[(train['Survived']==0) & (train['Sex']==\"male\")]\nfemale_not_survived = train[(train['Survived']==0) & (train['Sex']==\"female\")]","947b55ec":"plt.figure(figsize=[15,5])\nplt.subplot(111)\nsns.distplot(total_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='green')\nsns.distplot(total_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Age')","23b63d20":"plt.figure(figsize=[15,5])\n\nplt.subplot(121)\nsns.distplot(female_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='green')\nsns.distplot(female_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Female Age')\n\nplt.subplot(122)\nsns.distplot(male_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='green')\nsns.distplot(male_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Male Age')","29e411c5":"plt.figure(figsize=(15,6))\nsns.heatmap(train.drop('PassengerId',axis=1).corr(), vmax=0.6, square=True, annot=True)","d82b2d81":"# Combining train and test dataset\ntrain_test_data = [train, test]","572ea725":"# extracting titles from Name column.\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.')","48ce5274":"train.head()","04b71c4a":"pd.crosstab(train['Title'], train['Sex'])","12be5825":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","1c379864":"sns.barplot(x='Title', y='Survived', ci=None, data=train)","ac50601c":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","300843ea":"train.head()","eb5abf91":"for dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","3cb65e98":"train.head()","1695a393":"train.Embarked.value_counts()","6e8c1d93":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","40c4e8fd":"train.head()","fb0d2c37":"for dataset in train_test_data:\n    #print(dataset.Embarked.unique())\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","481a3859":"train.head()","477d9d40":"for dataset in train_test_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain['AgeBand'] = pd.cut(train['Age'], 5)\n\nprint (train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","7fee929e":"train.head()","5cf27a49":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","522a4885":"train.head()","0c394530":"for dataset in train_test_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())","136d25b5":"train['FareBand'] = pd.qcut(train['Fare'], 4)\nprint (train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","64eecad5":"train.head()","c86e2d00":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","d40f89ff":"train.head()","79a2a110":"for dataset in train_test_data:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","465d6be3":"sns.barplot(x='FamilySize', y='Survived', ci=None, data=train)","6c6c22c0":"for dataset in train_test_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","c307307d":"train.head()","ca232804":"test.head()","37faeb55":"features_drop = ['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'FamilySize']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId', 'AgeBand', 'FareBand'], axis=1)","e649bccd":"train.head()","e6f3530b":"test.head()","b69d4ac2":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']\nX_test = test.drop(\"PassengerId\", axis=1).copy()\n\nX_train.shape, y_train.shape, X_test.shape","c516ee7b":"# Importing Classifier Modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier","c56a5642":"clf = LogisticRegression()\nclf.fit(X_train, y_train)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round( clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_log_reg) + '%')","20e53fc9":"clf = SVC()\nclf.fit(X_train, y_train)\ny_pred_svc = clf.predict(X_test)\nacc_svc = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_svc) + '%')","81247092":"clf = LinearSVC()\nclf.fit(X_train, y_train)\ny_pred_linear_svc = clf.predict(X_test)\nacc_linear_svc = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_linear_svc) + '%')","d95d356f":"clf = KNeighborsClassifier(n_neighbors = 3)\nclf.fit(X_train, y_train)\ny_pred_knn = clf.predict(X_test)\nacc_knn = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_knn) + '%')","02bae577":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_decision_tree) + '%')","7a504055":"clf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_random_forest) + '%')","45e38607":"clf = GaussianNB()\nclf.fit(X_train, y_train)\ny_pred_gnb = clf.predict(X_test)\nacc_gnb = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_gnb) + '%')","c5d8c741":"clf = Perceptron(max_iter=5, tol=None)\nclf.fit(X_train, y_train)\ny_pred_perceptron = clf.predict(X_test)\nacc_perceptron = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_perceptron) + '%')","fc7e73c4":"clf = SGDClassifier(max_iter=5, tol=None)\nclf.fit(X_train, y_train)\ny_pred_sgd = clf.predict(X_test)\nacc_sgd = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_sgd) + '%')","eb9f78d1":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest_training_set = clf.predict(X_train)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Accuracy: %i %% \\n\"%acc_random_forest)\n\nclass_names = ['Survived', 'Not Survived']\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_train, y_pred_random_forest_training_set)\nnp.set_printoptions(precision=2)\n\nprint ('Confusion Matrix in Numbers')\nprint (cnf_matrix)\nprint ('')\n\ncnf_matrix_percent = cnf_matrix.astype('float') \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\n\nprint ('Confusion Matrix in Percentage')\nprint (cnf_matrix_percent)\nprint ('')\n\ntrue_class_names = ['True Survived', 'True Not Survived']\npredicted_class_names = ['Predicted Survived', 'Predicted Not Survived']\n\ndf_cnf_matrix = pd.DataFrame(cnf_matrix, \n                             index = true_class_names,\n                             columns = predicted_class_names)\n\ndf_cnf_matrix_percent = pd.DataFrame(cnf_matrix_percent, \n                                     index = true_class_names,\n                                     columns = predicted_class_names)\n\nplt.figure(figsize = (15,5))\n\nplt.subplot(121)\nsns.heatmap(df_cnf_matrix, annot=True, fmt='d', cmap = \"Blues\")\n\nplt.subplot(122)\nsns.heatmap(df_cnf_matrix_percent, annot=True, cmap = \"Blues\")","22a0470d":"models = pd.DataFrame({\n    'Model': ['LR', 'SVM', 'L-SVC', \n              'KNN', 'DTree', 'RF', 'NB', \n              'Perceptron', 'SGD'],\n    \n    'Score': [acc_log_reg, acc_svc, acc_linear_svc, \n              acc_knn,  acc_decision_tree, acc_random_forest, acc_gnb, \n              acc_perceptron, acc_sgd]\n    })\n\nmodels = models.sort_values(by='Score', ascending=False)\nmodels","9a5cc486":"sns.barplot(x='Model', y='Score', ci=None, data=models)","f6b81681":"test.head()","73a31c0c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_random_forest\n    })\n\nsubmission.to_csv('gender_submission.csv', index=False)","3ab9bafa":"### Create Submission File for Kaggle Competition ###","2a3a7df0":"**5. Fare Feature**\n\nReplace missing **Fare** with the *Median* of **Fare**","ca138d3a":"### Classification & Accuracy ###\n\nDefine training and testing set","894ceb76":"We are done with Feature Selection\/Engineering.\n\nNow, we are ready to train a classifier with our feature set.","a1d72c4f":"**2. Sex Feature**\n\nWe convert the categorical value of Sex into numeric. We represent **0** as **female** and **1** as **male**.","c6ed6185":"Now, we map **Age** according to **AgeBand**.","5917609f":"# Titanic: does Jack had a chance to survive from the Disaster? Machine Learning Algorithms + Model + Predictions","72446572":"**3. Linear SVM**\n\nLinear SVM is a SVM model with linear kernel.\n\nIn the below code, LinearSVC stands for Linear Support Vector Classification.","cc97ce7a":"### Relationship between Features and Survival\n\n**In this section, we analyze relationship between different features with respect to Survival. We see how different feature values show different survival chance. We also plot different kinds of diagrams to visualize our data and findings.**","3bee4346":"## Confusion Matrix ##\n\nA confusion matrix, also known as an error matrix, is a specific table layout that allows visualization of the performance of an algorithm. Each row of the matrix represents the instances in a predicted class while each column represents the instances in an actual class (or vice versa). The name stems from the fact that it makes it easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another).\n\nIn predictive analytics, a table of confusion (sometimes also called a confusion matrix), is a table with two rows and two columns that reports the number of false positives, false negatives, true positives, and true negatives. This allows more detailed analysis than mere proportion of correct classifications (accuracy). Accuracy is not a reliable metric for the real performance of a classifier, because it will yield misleading results if the data set is unbalanced (that is, when the numbers of observations in different classes vary greatly). For example, if there were 95 cats and only 5 dogs in the data set, a particular classifier might classify all the observations as cats. The overall accuracy would be 95%, but in more detail the classifier would have a 100% recognition rate for the cat class but a 0% recognition rate for the dog class.\n\nHere's another guide explaining Confusion Matrix with example.\n\n                PredictedPositive PredictedNegative \n                  \nActualPositive  ------TP--------- -------FN--------  \n\nActualNegative  ------FP--------- -------TN--------\n\nIn this (Titanic problem) case:\n\n**True Positive**: The classifier predicted Survived **and** the passenger actually Survived.\n\n**True Negative**: The classifier predicted Not Survived **and** the passenger actually Not Survived.\n\n**False Postiive**: The classifier predicted Survived **but** the passenger actually Not Survived.\n\n**False Negative**: The classifier predicted Not Survived **but** the passenger actually Survived.","0a3e7b16":"Start here!\n\nUnderstand the ML algorithms and create models to explore Titanic Survival data.","828dd902":"**NOTE**:\n\n**About data shows that:**\n* Having FamilySize upto 4 (from 2 to 4) has better survival chance.\n* FamilySize = 1, i.e. travelling alone has less survival chance.\n* Large FamilySize (size of 5 and above) also have less survival chance.","d2409501":"**NOTE:**\n\nFrom the above figures, we can see that:\n\n* Combining both male and female, we can see that children with age between 0 to 5 have better chance of survival.\n* Females with age between \"18 to 40\" and \"50 and above\" have higher chance of survival.\n* Males with age between 0 to 14 have better chance of survival.","b0dee4bd":"### Important Links\n\n* Competition link: https:\/\/www.kaggle.com\/c\/titanic\n* Submission Link: https:\/\/www.kaggle.com\/c\/titanic\/submit\n* Notebook link: https:\/\/www.kaggle.com\/skkthedreamer\/titanic-survival-first-kaggle-notebook\/","399bcc93":"***Below is a brief information about each columns of the dataset:***\n\n* **PassengerId**: An unique index for passenger rows. It starts from 1 for first row and increments by 1 for every new rows.\n* **Survived**: Shows if the passenger survived or not. 1 stands for survived and 0 stands for not survived.\n\n* **Pclass**: Ticket class. 1 stands for First class ticket. 2 stands for Second class ticket. 3 stands for Third class ticket.\n\n* **Name**: Passenger's name. Name also contain title. \"Mr\" for man. \"Mrs\" for woman. \"Miss\" for girl. \"Master\" for boy.\n\n* **Sex**: Passenger's sex. It's either Male or Female.\n\n* **Age**: Passenger's age. \"NaN\" values in this column indicates that the age of that particular passenger has not been recorded.\n\n* **SibSp**: Number of siblings or spouses travelling with each passenger.\n\n* **Parch**: Number of parents of children travelling with each passenger.\n* **Ticket**: Ticket number.\n* **Fare**: How much money the passenger has paid for the travel journey.\n* **Cabin**: Cabin number of the passenger. \"NaN\" values in this column indicates that the cabin number of that particular passenger has not been recorded.\n* **Embarked**: Port from where the particular passenger was embarked\/boarded.","90e396b6":"### Comparing Models### \n\nLet's compare the accuracy score of all the classifier models used above.","6e5cabe7":"**1. Name Feature**\n\nLet's extract titles from Name column.","670db488":"**Benchmark Scores:**","e626331f":"**Importing DataSet**","94d51eb3":"**Describing training dataset**\n\ndescribe() method can show different values like count, mean, standard deviation, etc. of numeric data types.","0b597675":"### 2. Sex vs. Survaival","9584dcda":"**NOTE:**\n\nWe find that category \"S\" has maximum passengers. Hence, we replace \"nan\" values with \"S\".","ff2e9b9f":"**6. Parch vs. Survival**","b3790838":"**6. SibSp & Parch Feature**\n\nCombining **SibSp** & **Parch** feature, we create a new feature named **FamilySize**.","06d0df47":"**NOTE:**\n\nHeatmap of Correlation between different features:\n\n    Positive numbers = Positive correlation, i.e. increase in one feature will increase the other feature & vice-versa.\n    Negative numbers = Negative correlation, i.e. increase in one feature will decrease the other feature & vice-versa.\n\nIn our case, we focus on which features have strong positive or negative correlation with the *Survived feature*.","56d31528":"**5. Decision Tree**\n\nA decision tree is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes). The paths from root to leaf represent classification rules.\n","e81ea0a3":"**NOTE:**\n* *Survived* column is not present in Test data.\n* We have to train our classifier using the Train data and generate predictions (*Survived*) on Test data.","58fefa76":"Map **Fare** according to **FareBand**","b667c16f":"**5. Embarked vs Survived","3b03c94d":"**Plotting the Pclass data**","4fab633d":"**NOTE:**\n\n* From the above table, we can see that Decision Tree and Random Forest classfiers have the highest accuracy score.\n* Among these two, we choose Random Forest classifier as it has the ability to limit overfitting as compared to Decision Tree classifier.","d3bb12dd":"### Correlating Features ###","bfa416e0":"Now, Create **FareBand**. We divide the **Fare** into 4 category range.","ccdf9d84":"**6. Random Forest**\n\nRandom forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Random decision forests correct for decision trees' habit of overfitting to their training set.\n\nEnsemble methods use multiple learning algorithms to obtain better predictive performance than could be obtained from any of the constituent learning algorithms alone.","19179b39":"**7. SibSp vs. Survival**","912c8361":"### Looking into the testing dataset","fa66dca5":"**NOTE:**\n\nIf you are a Female, you may have a better survival chance.","4e6fe32c":"**3. Embarked Feature**\n\nThere are empty values for some rows for Embarked column. The empty values are represented as \"nan\" in below list.","1253ce3a":"**1. Logistic Regression**\n\nLogistic regression, or logit regression, or logit model is a regression model where the dependent variable (DV) is categorical. This article covers the case of a binary dependent variable\u2014that is, where it can take only two values, \"0\" and \"1\", which represent outcomes such as pass\/fail, win\/lose, alive\/dead or healthy\/sick. Cases where the dependent variable has more than two outcome categories may be analysed in multinomial logistic regression, or, if the multiple categories are ordered, in ordinal logistic regression.","7300890e":"### Feature Extraction ###\n\nIn this section, we select the appropriate features to train our classifier.\nHere, we create new features based on existing features.\nWe also convert categorical features into numeric form.","88b0ba54":"**Plotting some distribution plots based on survival's sex**","13857e34":"**NOTE:**\n\nThere are 86 rows with missing Age, 327 rows with missing Cabin and 1 row with missing Fare information.","e0b557b6":"**9. Stochastic Gradient Descent (SGD)**\n\nStochastic gradient descent (often shortened in SGD), also known as incremental gradient descent, is a stochastic approximation of the gradient descent optimization method for minimizing an objective function that is written as a sum of differentiable functions. In other words, SGD tries to find minima or maxima by iteration.","e07855e4":"As you can see above, we have added a new column named Title in the Train dataset with the Title present in the particular passenger name.","3ad8f8fc":"**NOTE:**\n\n* Higher class passengers have better survival chance. (Its money and power matters)","410cae50":"**NOTE:**\n\nFrom the above plot, it can be seen that:\n\n* Women from 1st and 2nd Pclass have almost 100% survival chance.\n* Men from 2nd and 3rd Pclass have only around 10% survival chance.","ed994ffd":"**1. Pclass vs Survial**","d8d77f2a":"**NOTE:**\nFrom the above plot, it can be seen that:\n\n* Almost all females from Pclass 1 and 2 survived.\n* Females dying were mostly from 3rd Pclass.\n* Males from Pclass 1 only have slightly higher survival chance than Pclass 2 and 3.","c4cfec3c":"**NOTE:**\n\n* This shows that there are duplicate Ticket number and Cabins shared. \n* Similarly, the highest number of people using the same cabin is 4.\n* We also see that 644 people were embarked from port \"S\".\n* Among 891 rows, 577 were Male and the rest were Female.","541f0dc9":"### Looking into the training dataset","e8cacee0":"Below, I have just found out how many males and females are there in each Pclass then plotted a bar diagram with that information and found that there are more males among the 3rd Pclass passengers.","dcbbd8a2":"**4. Age Feature**\n\nWe first fill the NULL values of Age with a random number between (mean_age - std_age) and (mean_age + std_age).\nWe then create a new column named AgeBand. This categorizes age into 5 different age range.","85feb7a7":"**NOTE:**\n\n* There are 177 rows with missing Age, 687 rows with missing Cabin and 2 rows with missing Embarked information.","68020754":"**4.  k -Nearest Neighbors**\n\nk -nearest neighbors algorithm (k-NN) is one of the simplest machine learning algorithms and is used for classification and regression. In both cases, the input consists of the  k  closest training examples in the feature space. The output depends on whether  k -NN is used for classification or regression:\n\n* In  k -NN classification, the output is a class membership. An object is classified by a majority vote of its neighbors, with the object being assigned to the class most common among its  k  nearest neighbors ( k  is a positive integer, typically small). If  k=1 , then the object is simply assigned to the class of that single nearest neighbor.\n* In  k -NN regression, the output is the property value for the object. This value is the average of the values of its  k  nearest neighbors.","c62dd2f6":"## Finding relations between features and survival","84ed183d":"In the example code below, we plot a confusion matrix for the prediction of **Random Forest Classifier** on our training dataset. This shows how many entries are correctly and incorrectly predicted by our classifer.","a82c8aa0":"**2. Support Vector Machine (SVM)**\n\nSupport Vector Machine (SVM) model is a Supervised Learning model used for classification and regression analysis. It is a representation of the examples as points in space, mapped so that the examples of the separate categories are divided by a clear gap that is as wide as possible. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\n\nIn addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces. Suppose some given data points each belong to one of two classes, and the goal is to decide which class a new data point will be in. In the case of support vector machines, a data point is viewed as a  p -dimensional vector (a list of  p  numbers), and we want to know whether we can separate such points with a  (*p* \u2212 1) -dimensional hyperplane.\n\nWhen data are not labeled, supervised learning is not possible, and an unsupervised learning approach is required, which attempts to find natural clustering of the data to groups, and then map new data to these formed groups. The clustering algorithm which provides an improvement to the support vector machines is called **support vector clustering** and is often used in industrial applications either when data are not labeled or when only some data are labeled as a preprocessing for a classification pass.\n\nIn the below code, SVC stands for Support Vector Classification.","2203b82f":"### Feature Selection ###\n\nWe drop unnecessary columns\/features and keep only the useful ones for our experiment. Column **PassengerId** is only dropped from Train set because we need **PassengerId** in Test set while creating Submission file to Kaggle.","9cf43030":"**NOTE:**\n\n* Test data has 418 rows and 11 columns.\n\n     Train data rows = 891, Test data rows = 418, Total rows = 891+418 = 1309\n\n* We can see that around 2\/3 of total data is set as Train data and around 1\/3 of total data is set as Test data.","f857cfd5":"This shows that travelling alone has only 30% survival chance.","5b0afce9":"**Note:**\n\nTotal 891 rows (unique records) and 12 coulms (features)","dc6751d4":"**NOTE:**\n\n* The number of passengers with each Title is shown above.\n* We now replace some less common titles with the name \"Other\".","e1acc4aa":"**NOTE:**\n\n* There are missing entries for *Age* in Test dataset as well.\n* Out of 418 rows in Test dataset, only 332 rows have *Age* value.\n* *Cabin* values are also missing in many rows. Only 91 rows out ot 418 have values for *Cabin* column.","1b902587":"**Importing Libraries**","72c50f83":"**NOTE:**\n\n1) From Pclass violinplot, we can see that:\n\n* 1st Pclass has very few children as compared to other two classes.\n* 1st Plcass has more old people as compared to other two classes.\n* Almost all children (between age 0 to 10) of 2nd Pclass survived.\n* Most children of 3rd Pclass survived.\n* Younger people of 1st Pclass survived as compared to its older people.\n\n2) From Sex violinplot, we can see that:\n\n  * Most male children (between age 0 to 14) survived.\n  * Females with age between 18 to 40 have better survival chance.","35c7bf10":"We now convert the categorical value of **Embarked** into numeric.\n\nWe represent 0 as S, 1 as C and 2 as Q.","2a200104":"**4. Pclass, Sex & Embarked vs. Survival**","2f770607":"**8. Age vs Survival**","5593b06b":"Now, we convert the categorical *Title* values into numeric form.","d179d190":"Let's create a new feature named IsAlone. This feature is used to check how is the survival chance while travelling alone as compared to travelling with family.","5d50552f":"**NOTE:**\n* We can see that Age value is missing for many rows.\n* Out of 891 rows, the Age value is present only in 714 rows.\n* Similarly, Cabin values are also missing in many rows. Only 204 out of 891 rows have Cabin values.","e97a0b6c":"**NOTE:**\n\n* Higher class passengers (low Pcass) have better average survival than the low class(high Pclass) passengers.","05e9d63e":"**NOTE**:\n\nThere are many classifying algorithms present. Among them, we choose the following Classification algorithms for our problem:\n\n* Logistic Regression\n* Support Vector Machines (SVC)\n* Linear SVC\n* k-Nearest Neighbor (KNN)\n* Decision Tree\n* Random Forest\n* Naive Bayes (GaussianNB)\n* Perceptron\n* Stochastic Gradient Descent (SGD)\n\nHere's the training and testing procedure:\n\n    First, we train these classifiers with our training data.\n    After that, using the trained classifier, we predict the Survival outcome of test data.\n    Finally, we calculate the accuracy score (in percentange) of the trained classifier.\n\n**Please note**: that the accuracy score is generated based on our training dataset.","5611fb63":"### Check the shape of the dataset","488b6289":"**3. Pclass & Sex vs. Survival**","5e9f4a5c":"**7. Gaussian Naive Bayes**\n\nNaive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features.\n\nBayes' theorem (alternatively **Bayes' law** or **Bayes' rule**) describes the probability of an event, based on prior knowledge of conditions that might be related to the event. For example, if cancer is related to age, then, using Bayes' theorem, a person's age can be used to more accurately assess the probability that they have cancer, compared to the assessment of the probability of cancer made without knowledge of the person's age.\n\nNaive Bayes is a simple technique for constructing classifiers: models that assign class labels to problem instances, represented as vectors of feature values, where the class labels are drawn from some finite set. It is not a single algorithm for training such classifiers, but a family of algorithms based on a common principle: all naive Bayes classifiers assume that the value of a particular feature is independent of the value of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 10 cm in diameter. A naive Bayes classifier considers each of these features to contribute independently to the probability that this fruit is an apple, regardless of any possible correlations between the color, roundness, and diameter features.","4208e372":"**8. Perceptron**\n\nPerceptron is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector."}}