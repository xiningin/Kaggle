{"cell_type":{"9e335e04":"code","1eeee33e":"code","931600e3":"code","599b2d12":"code","18c87989":"code","7dc85f1f":"code","08dda31e":"code","6f60e113":"code","f13a3cfe":"code","1e9cee79":"code","f893257c":"code","57b9f357":"code","fa170dac":"code","79b75868":"code","ec8720a5":"code","d4ff45fe":"code","756e709a":"markdown","e4a2d977":"markdown","b5c7dc95":"markdown","498f5a8c":"markdown","39bb2560":"markdown","6eb4c234":"markdown","919f65e8":"markdown","088cd827":"markdown","a50ab50d":"markdown","1d8a2875":"markdown","cbfa7c6f":"markdown","12f08f07":"markdown","20fa1816":"markdown","6580dccb":"markdown"},"source":{"9e335e04":"import csv, sys, math\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Read data into a pandas dataframe\neinsteinFile = \"\/kaggle\/input\/uncover\/einstein\/diagnosis-of-covid-19-and-its-clinical-spectrum.csv\"\nhealthDF = pd.read_csv(einsteinFile)\n\nhealthDF.head()","1eeee33e":"# Show the columns available in this dataset\nhealthDF.columns.values","931600e3":"columns = list(healthDF.columns)\nlabTests = columns[6:]\n\nminSampleSize = 360\n\n# Count the number of recordings for each lab test. Disallow test if the count is below minSampleSize.\nusableLabTests = list()\n\nfor labTest in labTests:\n    sampleCount = len(healthDF[healthDF[labTest].notnull()])\n    \n    if sampleCount >= minSampleSize:\n        usableLabTests.append(labTest)\n        \nprint(\"__Lab tests with sample size >= \" + str(minSampleSize) + \"__\\n\" + str(usableLabTests))","599b2d12":"floatType = np.dtype('float64')\n\nnumericalLabTests = list()\nbooleanLabTests = list()\n\nfor test in usableLabTests:\n    if healthDF[test].dtype == floatType:\n        numericalLabTests.append(test)        \n    else:\n        uniqueVals = list(healthDF[test].unique())\n\n        # Look for present of the word \"detected\", since there is at least one test where \"not_detected\" is \n        # the only non-null result (not useful).\n        if \"detected\" in uniqueVals:\n            booleanLabTests.append(test)\n\nprint(\"Numerical tests: \" + str(numericalLabTests))\nprint(\"\\nBoolean tests: \" + str(booleanLabTests))","18c87989":"print(\"Original number of patients: \" + str(len(healthDF)))\npatientsWithNumericalResults = list()\n\nfor index, row in healthDF.iterrows():\n    patientID = row['patient_id']\n    \n    hasResults = False\n    for numTest in numericalLabTests:\n        if not pd.isna(row[numTest]):\n            hasResults = True\n            break\n    \n    if hasResults:\n        patientsWithNumericalResults.append(patientID)\n        \npatientsWithResultsDF = healthDF[healthDF['patient_id'].isin(patientsWithNumericalResults)].copy()\n\nprint(\"Number of patients with at least one numerical lab result: \" + str(len(patientsWithResultsDF)))\n\n","7dc85f1f":"testStats = dict()\nminErrorToTest = dict()\n\nfor test in numericalLabTests:\n    # Calculate mean, stdev\n    testStats[test] = dict()\n    \n    meanVal = patientsWithResultsDF[test].mean()\n    minVal = patientsWithResultsDF[test].min()\n    maxVal = patientsWithResultsDF[test].max()\n    stdVal = patientsWithResultsDF[test].std()\n\n    testStats[test][\"mean\"] = meanVal\n    testStats[test][\"std\"] = stdVal\n    testStats[test][\"min\"] = minVal\n    testStats[test][\"max\"] = maxVal\n    testStats[test][\"min1Std\"] = meanVal - stdVal\n    testStats[test][\"max1Std\"] = meanVal + stdVal\n     \n    minError = meanVal - minVal\n    if minError not in minErrorToTest:\n        minErrorToTest[minError] = list()\n        \n    minErrorToTest[minError].append(test)\n\nsortedMins = reversed(sorted(minErrorToTest.keys()))\n\nmeansForPlot = list()\ntestNamesForPlot = list()\nminsForPlot = list()\nmaxsForPlot = list()\nminStdForPlot = list()\nmaxStdForPlot = list()\n\nfor sm in sortedMins:\n    for testName in minErrorToTest[sm]:\n        minsForPlot.append(sm)\n        testNamesForPlot.append(testName)\n        meansForPlot.append(testStats[testName][\"mean\"])\n        maxsForPlot.append(testStats[testName][\"max\"])\n        \n        minStdForPlot.append(testStats[testName][\"min1Std\"])\n        maxStdForPlot.append(testStats[testName][\"max1Std\"])\n\nfig, (ax0, ax1) = plt.subplots(1, 2, sharey=True)\nax0.plot(testNamesForPlot[0:10], minStdForPlot[0:10], 'b--', label='1 std dev')\nax0.plot(testNamesForPlot[0:10], maxStdForPlot[0:10], 'b--')\nax0.errorbar(testNamesForPlot[0:10], meansForPlot[0:10], yerr=[minsForPlot[0:10], maxsForPlot[0:10]], fmt='o', label='test Mean')\n\nax1.plot(testNamesForPlot[10:], minStdForPlot[10:], 'b--', label='1 std dev')\nax1.plot(testNamesForPlot[10:], maxStdForPlot[10:], 'b--')\nax1.errorbar(testNamesForPlot[10:], meansForPlot[10:], yerr=[minsForPlot[10:], maxsForPlot[10:]], fmt='o', label='test Mean')\n\nax0.tick_params(labelsize=10)\nax1.tick_params(labelsize=10)\n\nax0.legend(loc='upper left')\nax1.legend(loc='upper left')\n\nplt.title(\"Mean and min\/max range for numerical lab tests\")\nplt.setp(ax0.xaxis.get_majorticklabels(), rotation=90)\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=90)\nplt.figure(figsize=(50,50))\nplt.tight_layout()\nplt.show()","08dda31e":"def calculateHighLowNormalTest(row, mode, testNames, testStats):\n    \n    testCount = 0\n    \n    for testName in testNames:\n        stats = testStats[testName]       \n    \n        if mode == \"high\":\n            if row[testName] > stats[\"max1Std\"]:\n                testCount += 1\n                \n        elif mode == \"low\":\n            if row[testName] < stats[\"min1Std\"]:\n                testCount += 1\n                \n        elif mode == \"normal\":\n            if row[testName] <= stats[\"max1Std\"] and row[testName] >= stats[\"min1Std\"]:\n                testCount += 1\n        \n        else:\n            print(\"Unrecognized mode: \" + mode)\n            sys.exit(1)\n    \n    return testCount\n    \ndef calculateBooleanTest(row, stringToFind, booleanTests):\n    count = 0\n    \n    for bt in booleanTests:\n        if isinstance(row[bt], float):\n            continue\n            \n        if row[bt] == stringToFind:\n            count += 1\n            \n    return count\n\n    \ndef sumRecordedTests(row, testType, testNames):\n    count = 0\n    \n    if testType == \"num\":\n        for testName in testNames:\n            if not math.isnan(row[testName]):\n                count += 1\n                \n    elif testType == \"bool\":\n        for testName in testNames:\n            if isinstance(row[testName], float):\n                continue\n            if \"detected\" in row[testName]:\n                count += 1\n            \n    return count\n\npatientsWithResultsDF['numHighTests'] = patientsWithResultsDF.apply(lambda row: calculateHighLowNormalTest(row, \"high\", numericalLabTests, testStats), axis=1)\npatientsWithResultsDF['numLowTests'] = patientsWithResultsDF.apply(lambda row: calculateHighLowNormalTest(row, \"low\", numericalLabTests, testStats), axis=1)\npatientsWithResultsDF['numNormalTests'] = patientsWithResultsDF.apply(lambda row: calculateHighLowNormalTest(row, \"normal\", numericalLabTests, testStats), axis=1)\n\npatientsWithResultsDF['numDetectedTests'] = patientsWithResultsDF.apply(lambda row: calculateBooleanTest(row, \"detected\", booleanLabTests), axis=1)\npatientsWithResultsDF['numNotDetectedTests'] = patientsWithResultsDF.apply(lambda row: calculateBooleanTest(row, \"not_detected\", booleanLabTests), axis=1)\n\npatientsWithResultsDF['numValidNumTests'] = patientsWithResultsDF.apply(lambda row: sumRecordedTests(row, \"num\", numericalLabTests), axis=1)\npatientsWithResultsDF['numValidBoolTests'] = patientsWithResultsDF.apply(lambda row: sumRecordedTests(row, \"bool\", booleanLabTests), axis=1)","6f60e113":"patientsWithResultsDF.head()","f13a3cfe":"# Patients with abnormal test results (possible cancer)\ngroup1 = patientsWithResultsDF[((patientsWithResultsDF['numHighTests'] + patientsWithResultsDF['numLowTests']) > 0) &\n                                         (patientsWithResultsDF['numValidBoolTests'] > 0) & \n                                         (patientsWithResultsDF['numNotDetectedTests'] == patientsWithResultsDF['numValidBoolTests'])]# &\n\ngroup1Size = len(group1)\n\npositiveGroup1 = len(group1[group1['sars_cov_2_exam_result'] == 'positive'])\nnegativeGroup1 = len(group1[group1['sars_cov_2_exam_result'] == 'negative'])\n\nprint(\"Group 1 (Cancer patients) size: \" + str(group1Size))","1e9cee79":"# Patients no high\/low numerical tests (no cancer)\ngroup2 = patientsWithResultsDF[(patientsWithResultsDF['numNormalTests'] > 0) &\n                                ((patientsWithResultsDF['numHighTests'] + patientsWithResultsDF['numLowTests']) == 0)]\n\ngroup2Size = len(group2)\n\npositiveGroup2 = len(group2[group2['sars_cov_2_exam_result'] == 'positive'])\nnegativeGroup2 = len(group2[group2['sars_cov_2_exam_result'] == 'negative'])\n\nprint(\"Group 2 (Non-Cancer patients) size: \" + str(group2Size))","f893257c":"print(\"Group 1 (Cancer) fraction of patients testing positive for COVID-19:\\t\" + str(positiveGroup1\/group1Size))\nprint(\"Group 2 (No Cancer) fraction of patients testing positive for COVID-19:\\t\" + str(positiveGroup2\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) fraction of patients testing negative for COVID-19:\\t\" + str(negativeGroup1\/group1Size))\nprint(\"Group 2 (No Cancer) fraction of patients testing negative for COVID-19:\\t\" + str(negativeGroup2\/group2Size))","57b9f357":"# Graphical representation of the numbers\nlabels = ['Pos for COVID-19', 'Neg for COVID-19']\ngroup1Numbers = [positiveGroup1\/group1Size, negativeGroup1\/group1Size]\ngroup2Numbers = [positiveGroup2\/group2Size, negativeGroup2\/group2Size]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, group1Numbers, width, label='Group 1 (Cancer) - ' + str(group1Size) + ' Patients')\nrects2 = ax.bar(x + width\/2, group2Numbers, width, label='Group 2 (No Cancer) - ' + str(group2Size) + ' Patients')\n\nax.set_ylabel('Fraction')\nax.set_title('Coronavirus Diagnosis in Cancer vs. Non-Cancer Patients')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')\nplt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\n\nplt.show()","fa170dac":"positiveGroup1_regularWard = len(group1[(group1['sars_cov_2_exam_result'] == 'positive') & (group1['patient_addmited_to_regular_ward_1_yes_0_no'] == 't')])\npositiveGroup1_semiIU = len(group1[(group1['sars_cov_2_exam_result'] == 'positive') & (group1['patient_addmited_to_semi_intensive_unit_1_yes_0_no'] == 't')])\npositiveGroup1_ICU = len(group1[(group1['sars_cov_2_exam_result'] == 'positive') & (group1['patient_addmited_to_intensive_care_unit_1_yes_0_no'] == 't')])\npositiveGroup1_noWard = group1Size - positiveGroup1_regularWard - positiveGroup1_semiIU - positiveGroup1_ICU\n\nnegativeGroup1_regularWard = len(group1[(group1['sars_cov_2_exam_result'] == 'negative') & (group1['patient_addmited_to_regular_ward_1_yes_0_no'] == 't')])\nnegativeGroup1_semiIU = len(group1[(group1['sars_cov_2_exam_result'] == 'negative') & (group1['patient_addmited_to_semi_intensive_unit_1_yes_0_no'] == 't')])\nnegativeGroup1_ICU = len(group1[(group1['sars_cov_2_exam_result'] == 'negative') & (group1['patient_addmited_to_intensive_care_unit_1_yes_0_no'] == 't')])\nnegativeGroup1_noWard = group1Size - negativeGroup1_regularWard - negativeGroup1_semiIU - negativeGroup1_ICU\n\npositiveGroup2_regularWard = len(group2[(group2['sars_cov_2_exam_result'] == 'positive') & (group2['patient_addmited_to_regular_ward_1_yes_0_no'] == 't')])\npositiveGroup2_semiIU = len(group2[(group2['sars_cov_2_exam_result'] == 'positive') & (group2['patient_addmited_to_semi_intensive_unit_1_yes_0_no'] == 't')])\npositiveGroup2_ICU = len(group2[(group2['sars_cov_2_exam_result'] == 'positive') & (group2['patient_addmited_to_intensive_care_unit_1_yes_0_no'] == 't')])\npositiveGroup2_noWard = group2Size - positiveGroup2_regularWard - positiveGroup2_semiIU - positiveGroup2_ICU\n\nnegativeGroup2_regularWard = len(group2[(group2['sars_cov_2_exam_result'] == 'negative') & (group2['patient_addmited_to_regular_ward_1_yes_0_no'] == 't')])\nnegativeGroup2_semiIU = len(group2[(group2['sars_cov_2_exam_result'] == 'negative') & (group2['patient_addmited_to_semi_intensive_unit_1_yes_0_no'] == 't')])\nnegativeGroup2_ICU = len(group2[(group2['sars_cov_2_exam_result'] == 'negative') & (group2['patient_addmited_to_intensive_care_unit_1_yes_0_no'] == 't')])\nnegativeGroup2_noWard = group2Size - negativeGroup2_regularWard - negativeGroup2_semiIU - negativeGroup2_ICU","79b75868":"print(\"Group 1 (Cancer) COVID-positive patients admitted to the regular ward:\\t\\t\" + str(positiveGroup1_regularWard\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-positive patients admitted to the regular ward:\\t\" + str(positiveGroup2_regularWard\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-positive patients admitted to the Semi-Intensive Unit:\\t\\t\" + str(positiveGroup1_semiIU\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-positive patients admitted to the Semi-Intensive Unit:\\t\" + str(positiveGroup2_semiIU\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-positive patients admitted to the ICU:\\t\\t\" + str(positiveGroup1_ICU\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-positive patients admitted to the ICU:\\t\" + str(positiveGroup2_ICU\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-positive patients not admitted to any ward:\\t\\t\" + str(positiveGroup1_noWard\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-positive patients not admitted to any ward:\\t\" + str(positiveGroup2_noWard\/group2Size))\nprint(\"----------\")\nprint(\"Group 1 (Cancer) COVID-negative patients admitted to the regular ward:\\t\\t\" + str(negativeGroup1_regularWard\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-negative patients admitted to the regular ward:\\t\" + str(negativeGroup2_regularWard\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-negative patients admitted to the Semi-Intensive Unit:\\t\\t\" + str(negativeGroup1_semiIU\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-negative patients admitted to the Semi-Intensive Unit:\\t\" + str(negativeGroup2_semiIU\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-negative patients admitted to the ICU:\\t\\t\" + str(negativeGroup1_ICU\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-negative patients admitted to the ICU:\\t\" + str(negativeGroup2_ICU\/group2Size))\nprint()\nprint(\"Group 1 (Cancer) COVID-negative patients not admitted to any ward:\\t\\t\" + str(negativeGroup1_noWard\/group1Size))\nprint(\"Group 2 (No Cancer) COVID-negative patients not admitted to any ward:\\t\" + str(negativeGroup2_noWard\/group2Size))","ec8720a5":"labels = ['Pos COVID-19 admitted to Regular Ward', 'Pos COVID-19 admitted to Semi-Intensive Ward', \n          'Pos COVID-19 admitted to ICU', 'Pos COVID-19 not admitted']\ngroup1Numbers = [ positiveGroup1_regularWard\/group1Size, positiveGroup1_semiIU\/group1Size, \n                 positiveGroup1_ICU\/group1Size, positiveGroup1_noWard\/group1Size ]\ngroup2Numbers = [ positiveGroup2_regularWard\/group2Size, positiveGroup2_semiIU\/group2Size, \n                 positiveGroup2_ICU\/group2Size, positiveGroup2_noWard\/group2Size ]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, group1Numbers, width, label='Group 1 (Cancer) - ' + str(group1Size) + ' Patients')\nrects2 = ax.bar(x + width\/2, group2Numbers, width, label='Group 2 (No Cancer) - ' + str(group2Size) + ' Patients')\n\nax.set_ylabel('Fraction')\nax.set_title('Admittance for Positive COVID-19 Cancer vs. Non-Cancer Patients')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')\nplt.setp(ax.xaxis.get_majorticklabels(), rotation=80)\n\nplt.show()\n\n","d4ff45fe":"labels = ['Neg COVID-19 admitted to Regular Ward', 'Neg COVID-19 admitted to Semi-Intensive Ward', \n          'Neg COVID-19 admitted to ICU', 'Neg COVID-19 not admitted']\ngroup1Numbers = [ negativeGroup1_regularWard\/group1Size, negativeGroup1_semiIU\/group1Size,\n                 negativeGroup1_ICU\/group1Size, negativeGroup1_noWard\/group1Size ]\ngroup2Numbers = [ negativeGroup2_regularWard\/group2Size, negativeGroup2_semiIU\/group2Size,\n                 negativeGroup2_ICU\/group2Size, negativeGroup2_noWard\/group2Size ]\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, group1Numbers, width, label='Group 1 (Cancer) - ' + str(group1Size) + ' Patients')\nrects2 = ax.bar(x + width\/2, group2Numbers, width, label='Group 2 (No Cancer) - ' + str(group2Size) + ' Patients')\n\nax.set_ylabel('Fraction')\nax.set_title('Admittance for Negative COVID-19 Cancer vs. Non-Cancer Patients')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')\nplt.setp(ax.xaxis.get_majorticklabels(), rotation=80)\n\nplt.show()\n\n","756e709a":"Here are the details about this notebook that address the evaluation criteria:\n\n>1. Scientific rigor\n>a. Is the solution evidence based? I.e. does it leverage robust data?\n\nYes, the solution is based on data collected by a well-regarded hospital.\n\n>2. Scientific model\/strategy\n>a. Did the solution employ a robust scientific method?\n\nThe solution attempts to answer the question posed while being conservative about which data is used in the analysis (since the solution uses the data to infer the answer to the question, it was prudent to consider a more-conservative approach).\n\n>3. Unique and novel insight\n>a. Does the solution identify information (new data, features, insights etc) that is yet to be \u201cuncovered?\u201d\n\nYes, the solution attempts to identify cancer patients based on their lab results instead of a direct cancer diagnosis.\n\n>4. Market Translation and Applicability\n>a. Does the solution resolve an existing market need for either an individual, health institution or policy maker?\n\nPossibly; given more complete data, this method could identify specific lab markers or tests that could be used to identify severe cases of the coronavirus.\n\n>5. Speed to market\n>a. Does it apply to an existing product vision such as a self assessment tool or policy decision-making tool?\n\nPossibly, given more data (as stated in the previous question.\n\n>6. Longevity of solution in market\n>a. Is the solution one that could be used in various markets through time?\n\nYes, given more data.\n\n>7. Ability of user to collaborate and contribute to other solutions within the Kaggle community\n>a. Did the user provide expertise and or resources in the form of datasets or models to their fellow Kaggle members?\n\nI have not created any models yet, due to the small amount of data I have been able to extract from this dataset. If I am able to find other datasets, it would be possible to create models based on this technique.","e4a2d977":"As expected, the mean for each of the measured lab tests is indeed approximately 0, and the standard deviation is approximately 1.\n\nAssuming a normal distribution, then +\/- one standard deviation from the mean represents about 68% of the normal population. From the figure above, you can see that there are recordings for each test that range above and, in some cases, below, one standard deviation from the mean value. From this, we can conclude that patients that recorded test results outside of the +\/- one standard deviation range exhibit abnormal results for that test, and are thus likely to be compromised. \n\nNotice that the last two lab test's minimum values are less than one standard deviation from the mean. This is supported in researching the tests -- a low value for each of these tests is considered normal, so the majority of the test results should be grouped in the low part of the range.\n\n* [eosinophils](https:\/\/www.healthline.com\/health\/eosinophil-count-absolute)\n* [proteina_c_reativa_mg_dl](https:\/\/labtestsonline.org\/tests\/c-reactive-protein-crp)\n\nLet's look at the patient data and add columns to the dataframe to signify whether each patient exhibited a significant (more than 1 standard deviation higher or lower than the mean) for any lab result, and whether they tested positive for any diseases.","b5c7dc95":"For most of the numerical tests, a lab result outside of the normal range for each of these tests can indicate severe issues that may include the following:\n* autoimmune disease\n* cancer\n* anemia\n* deficiency of some sort\n\nWhile we may not be able to specifically determine from this dataset whether a patient has cancer, we can at the very least infer that something is severely and negatively impacting a patient's health, and that their immune system is likely compromised (much like a cancer patient). Based on this, I will separate the data into two groups of patients: \"possible cancer\/immunocompromised\" and \"likely no cancer\".\n\nSince the numerical lab tests are key to our analysis, we should drop any patients who have not recorded results for any of the numerical tests.","498f5a8c":"# An Analysis of Coronavirus Infection in Cancer Patients\n> What is the incidence of infection with coronavirus among cancer patients?\n>\n>And, is disease severity or trajectory different among these patients vs those not diagnosed with cancer?\n\nThese questions are difficult to answer without access to specific data about cancer patients who have contracted the coronavirus. The most detailed dataset I have seen is the [dataset from Hospital Israelita Albert Einstein in S\u00e3o Paolo, Brazil](https:\/\/www.kaggle.com\/einsteindata4u\/covid19\/) that contains anonymized lab results for patients, including whether they tested positive for COVID-19. The description of the data is as follows:\n\n>This dataset contains anonymized data from patients seen at the Hospital Israelita Albert Einstein, at S\u00e3o Paulo, Brazil, and who had samples collected to perform the SARS-CoV-2 RT-PCR and additional laboratory tests during a visit to the hospital.\n>\n>All data were anonymized following the best international practices and recommendations. All clinical data were standardized to have a mean of zero and a unit standard deviation.\n\nI hypothesize that it is possible to use the lab results in this dataset to infer which patients may have cancer, allowing us to answer the questions posed by this task.","39bb2560":"Recall that the description of the dataset mentioned that the (numerical) lab results were normalized to have a mean of 0 and a standard deviation of 1. The normalization makes it difficult to determine if a test result is outside the range of acceptable values for that test (we can't just look up the \"acceptable\" range for that test and then see if the recorded value is within that range). However, we can still calculate whether the result is outside the +\/- one standard deviation range of the mean. This could indicate that the person is very sick.\n\nLet's take a look at range of values recorded for these tests.","6eb4c234":"This dataset shows that both cancer and non-cancer patients that test positive for coronavirus are admitted to the regular hospital ward at similar rates (11%).\n\nHowever, non-cancer patients are not likely to be admitted at all to the semi-intensive or intensive care units (0% from the data). Meanwhile, approximately 4% of cancer patients will be admitted to the semi-intensive unit and 3% to the ICU.","919f65e8":"## Future Work\nThe dataset used in this analysis is useful in showing the effects of the coronavirus on immunocompromised patients. With additional data, we may be able to delve more into how specific parts of the population are affected. Aspects I would hope to be able to study in the future (assuming more data is forthcoming) are:\n\n* With more data, we could use Machine Learning algorithms (i.e., Random Forest) to predict when cancer and non-cancer patients are likely to have the coronavirus. With algorithms like Random Forest, we can also determine which lab tests (features) are important to and indicative of a positive coronavirus test. If the features are different for cancer patients vs non-cancer patients, that might give doctors a good idea of which tests to prioritize for the patient. \n*Note: I started going down this path, and saw some differences in models created from cancer vs. non-cancer patients, but I didn't feel confident in reporting the results given I only had 28 non-cancer datapoints to work with).*\n\n* With more lab tests reported per patient, we could include more numerical lab tests in our analysis (sample size would be larger).\n\n* If the gender of the patient is provided, we may be able to pinpoint how high\/low test results contribute towards a coronavirus diagnosis (normal ranges for lab tests are often different between male\/female).\n\n* We could also start to delve into how much higher\/lower a patient's test results are from the mean, and determine how that affects the coronavirus diagnosis.\n\n\n","088cd827":"For the sake of comparison, here is the graph showing admittance rates for cancer and non-cancer patients who test *negative* for the coronavirus.","a50ab50d":"Based on the population represented in this dataset, we can answer the original question\n\n>What is the incidence of infection with coronavirus among cancer patients?\n\n(Recognize, however, that the numbers of patients in both Group 1 and especially Group 2 -- 186 and 28, respectively, are pretty low. It is difficult to generalize in a population with such low numbers.)","1d8a2875":"At this point, we have enough data that we can separate the patients into two populations: *Group 1* patients that may have cancer or be immunocompromised, and *Group 2* patients that are likely not to have cancer or be immunocompromised. In the cases where a patient recorded abnormal numerical test results and also tested positive for any other disease, I do not include that patient's results in either Group 1 or Group 2, since it's possible the abnormal lab results are a result of testing positive for the disease (and not due to cancer).\n\n### Group 1 \n* possible cancer\/immunocompromised\n* abnormal (high or low) lab results\n* did not test positive for any disease\n\n### Group 2\n* no cancer\/not immunocompromised\n* normal lab results\n* positive\/negative results for diseases are disregarded since I assume normal lab results indicate no cancer\n\n","cbfa7c6f":"**Approximately 27% of cancer patients in this study tested positive for coronavirus.** This percentage is higher (as expected) than the 18% of non-cancer patients in this study who tested positive for coronavirus.","12f08f07":"Some of these lab tests have a \"detected\" or \"not detected\" result. These are tests used to determine whether the patient had a specific disease. We should separate these boolean lab tests from the lab tests that have numerical results.","20fa1816":"To answer the second question\n\n>And, is disease severity or trajectory different among these patients vs those not diagnosed with cancer?\n\nwe can use the columns in the dataset indicating which hospital ward the patient was admitted to (regular, semi-intensive, or ICU). Note that a patient may not be admitted to any of these wards (all three columns could be false). However, I did verify that in this dataset, a patient can only be admitted to one of these wards (there are no patients where more than one ward has a value == 't').","6580dccb":"From a quick peek at the data:\n* the 3rd column, *sars_cov_2_exam_result*, indicates whether the patient tested positive for COVID-19 or not\n* the next three columns indicate whether the patient was admitted to the hospital and if so, to which unit (regular ward, semi-intensive unit, intensive care) -- **these columns can be used to indicate the severity of the sickness for these patients**\n* the columns after that (column 7 and later) represent results of tests that were run on the patient -- **these columns can be used to determine which patients had cancer**\n\nTo start, I identify the lab tests for which we have a large enough sample size to be considered representative of the population. Using this [sample calculator](https:\/\/www.surveysystem.com\/sscalc.htm), I determined that for:\n\n* confidence level: 95%\n* confidence interval: 5\n* population: 5644 (*the number of rows in the dataset*)\n\nthe suggested sample size needed is 360. Therefore, I will only look at lab tests where at least 360 results were recorded."}}