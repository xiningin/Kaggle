{"cell_type":{"08367de5":"code","f5855612":"code","734ca104":"code","4964b521":"code","0cc2c698":"code","dfc91c8f":"code","44b8702a":"code","77c9e71e":"code","8f08bcac":"code","c8e821a6":"code","0b0ed657":"code","77b5b1d1":"code","102ffaa9":"code","f614280e":"code","b42b39f6":"code","846decc5":"code","a3c017b7":"code","77644fda":"code","541a98d3":"code","ecc53e8d":"code","8c2ff499":"code","46eef949":"code","7fe3250a":"code","62db53c0":"code","492a0347":"code","eb8702bf":"code","f5adb530":"code","50b1db11":"code","ad96bbdb":"code","0bde9c7e":"code","7976a5ad":"code","acb2f6fc":"code","d7114ca4":"code","a25ce423":"code","85174f1e":"code","1a46d796":"code","ab1c3e0e":"code","39db48a5":"code","c5c3eb4e":"code","d9e57e23":"code","26f7827f":"code","0a07882f":"markdown","c987c83a":"markdown","a9634c9d":"markdown","096776f8":"markdown","86f28c6f":"markdown","84c3d2aa":"markdown","ad0ac446":"markdown","6a9ceb7a":"markdown","78a56710":"markdown","ba99e193":"markdown","512f79ab":"markdown","dd5826ab":"markdown","66dde79e":"markdown","7d927de2":"markdown","ea62691f":"markdown","636a23e5":"markdown","aa33358e":"markdown","2d12d2dc":"markdown","c41ea4d6":"markdown","fcc83d22":"markdown","a573a853":"markdown","b8c52d20":"markdown","c618dd88":"markdown","c93eb24b":"markdown","9fd1314c":"markdown","cdeab79c":"markdown","909ee826":"markdown","00f07024":"markdown","ba1109b7":"markdown","3ac85d38":"markdown","56f91fa1":"markdown","8e4dbc3b":"markdown","5fd06459":"markdown","a5bc023c":"markdown","ff896682":"markdown","7ec3ea05":"markdown","026747ba":"markdown","005329e1":"markdown","50144bd4":"markdown","9c0ad8b4":"markdown","2a4a4a93":"markdown","821d8db9":"markdown","23e6d66c":"markdown","4ab0e72a":"markdown"},"source":{"08367de5":"from collections import Counter\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings \n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)","f5855612":"on_the_fly = pd.read_csv('..\/input\/imdb-top-250-movies\/IMDB_Top250_Movies.csv')\ndf = on_the_fly.copy()\ndf.shape","734ca104":"plt.figure(figsize=(14,6))\nsns.heatmap(df.isnull(),cmap='BuPu',cbar=False,yticklabels=False)","4964b521":"# delete random columns\nanother = ['BoxOffice', 'Website', 'Plot', 'Poster', \n           'Ratings.Source', 'imdbID', 'Type', 'Website', 'Response']\n\n# delete sequential columns\nc = df.loc[:, 'tomatoMeter': 'tomatoURL'].columns\n\n# union both of them\ndf.drop(c.union(another), axis=1, inplace = True)\n\ndf.shape","0cc2c698":"df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\ndf.shape","dfc91c8f":"plt.figure(figsize=(14,6))\nsns.heatmap(df.isnull(),cmap='BuPu',cbar=False,yticklabels=False)","44b8702a":"# For Released Date\ndf[['Released_Day','Released_Month','Released_Year']] = df['Released'].str.split(' ',expand=True)\ndf.drop('Released', axis = 1, inplace = True)\n\n# For DVD\ndf[['DVD_Day','DVD_Month','DVD_Year']] = df['DVD'].str.split(' ',expand=True)\ndf.drop('DVD', axis = 1, inplace = True)\n\n# For Runtime remove everything except delimiter's first portion\ndf['Runtime'] = df['Runtime'].str.split(' ').str[0]\n\n# drop Ratings.value as it's the duplicate of imdbRatings\ndf.drop('Ratings.Value', axis = 1, inplace = True)","77c9e71e":"df['imdbVotes'] = df['imdbVotes'].str.replace(',', '')","8f08bcac":"# fill null object of Released Date with the maximum value\ndf.fillna({'Released_Day': df[\"Released_Day\"].median()}, inplace=True)\ndf.fillna({'Released_Month': df[\"Released_Month\"].value_counts().idxmax}, inplace=True)\ndf.fillna({'Released_Year': df[\"Released_Year\"].median()}, inplace=True)\n\n# fill the null value of writer and awards with a space\ndf.fillna({'Writer': ' '}, inplace=True)\ndf.fillna({'Awards': ' '}, inplace=True)\n\n# fill null object of DVD with the maximum value\ndf.fillna({'DVD_Day': df[\"DVD_Day\"].median()}, inplace=True)\ndf.fillna({'DVD_Month': df[\"DVD_Month\"].value_counts().idxmax}, inplace=True)\ndf.fillna({'DVD_Year': df[\"DVD_Year\"].median()}, inplace=True)\n\n# assert the mean value of metascore\ndf.fillna({'Metascore': df['Metascore'].median()}, inplace=True)","c8e821a6":"plt.figure(figsize=(15,2))\nsns.heatmap(df.isnull(),cmap='Blues',cbar=False,yticklabels=False)","0b0ed657":"df = df.rename(columns={'Title': 'Name', 'imdbRating': 'Rating', 'imdbVotes' : 'Vote'})","77b5b1d1":"df.info()","102ffaa9":"df['Runtime'] = df['Runtime'].astype(int)\ndf['Released_Day'] = df['Released_Day'].astype(int)\ndf['Released_Year'] = df['Released_Year'].astype(int)\ndf['DVD_Day'] = df['DVD_Day'].astype(int)\ndf['DVD_Year'] = df['DVD_Year'].astype(int)\n    \ndf['Vote'] = df['Vote'].astype(float)","f614280e":"df.info()","b42b39f6":"# Creating a histogram of all the features in dataframe.\ndf.hist(bins=30,figsize=(15,15),color='g')","846decc5":"scatterdata=df[['Year','Runtime','Metascore','Vote', 'Released_Day', 'Released_Year', \n                'DVD_Day', 'DVD_Year']]\n\nsns.set(style=\"ticks\")\nsns.pairplot(scatterdata)","a3c017b7":"plt.figure(figsize=(12,24))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"Released_Year\", data=df, palette=\"Set2\", \n                   order=df['Released_Year'].value_counts().index[:])","77644fda":"df.columns","541a98d3":"# against imdb rating\n\ndf_for_ML = df[['Year','Runtime','Metascore','Vote', 'Released_Day', 'Released_Year', \n                'DVD_Day', 'DVD_Year']]","ecc53e8d":"df_for_ML.head(1)","8c2ff499":"for i in df_for_ML.columns:\n    axis = df.groupby('Rating')[[i]].mean().plot(figsize=(10,5),marker='o',color='g')","46eef949":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"Rated\", data= df, palette=\"Set2\", \n                   order=df['Rated'].value_counts().index[0:15])","7fe3250a":"color = plt.cm.Greens(np.linspace(0, 1, 2))\ndf['Rated'].value_counts().plot.pie(colors = color, figsize = (10, 10), startangle = 75)\n\nplt.title('Rated', fontsize = 20)\nplt.axis('off')\nplt.show()","62db53c0":"# If a producer wants to release some content, \n# which month must he do so?( Month when least amount of content is added)\n\nnetflix_date = on_the_fly.copy()\nnetflix_date = netflix_date[['Released']].dropna()\nnetflix_date['year'] = netflix_date['Released'].apply(lambda x : x.split(' ')[-1])\nnetflix_date['month'] = netflix_date['Released'].apply(lambda x : x.lstrip().split(' ')[1])\n\n# conglomerate all of the years\nfor col in df.columns:\n    netflix_date['year'].values[:] = ''\n    \nnetflix_date['year']\n\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][::-1]\ndfg = netflix_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\nplt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(dfg, cmap='PuRd', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(dfg.columns), 1), dfg.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(dfg.index), 1), dfg.index, fontsize=7, fontfamily='serif')\n\nplt.title('IMDB Released Month', fontsize=12, fontfamily='calibri', fontweight='bold', position=(0.20, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","492a0347":"# If a producer wants to release some content, \n# which month must he do so?( Month when least amount of content is added)\n# cmap variation is given on : https:\/\/gallantlab.github.io\/pycortex\/colormaps.html\n\nimdb_dvd = on_the_fly.copy()\nimdb_dvd = imdb_dvd[['DVD']].dropna()\nimdb_dvd['year'] = imdb_dvd['DVD'].apply(lambda x : x.split(' ')[-1])\nimdb_dvd['month'] = imdb_dvd['DVD'].apply(lambda x : x.lstrip().split(' ')[1])\n\n# conglomerate all of the years\nfor col in df.columns:\n    imdb_dvd['year'].values[:] = ''\n    \nimdb_dvd['year']\n\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][::-1]\ndfg = imdb_dvd.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\nplt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(dfg, cmap='PuBuGn', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(dfg.columns), 1), dfg.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(dfg.index), 1), dfg.index, fontsize=7, fontfamily='serif')\n\nplt.title('DVD Released Month', fontsize=12, fontfamily='calibri', fontweight='bold', position=(0.20, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","eb8702bf":"country_count=df['Country'].value_counts().sort_values(ascending=False)\ncountry_count=pd.DataFrame(country_count)\ntopcountries=country_count[0:11]\ntopcountries","f5adb530":"countries1={}\ncou1=list(df['Country'])\nfor i in cou1:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries1.keys()):\n            countries1[i]+=1\n        else:\n            countries1[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries1.keys()):\n                countries1[j]+=1\n            else:\n                countries1[j]=1\n                \n\ncountries_fin1={}\nfor country,no in countries1.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin1.keys()):\n        countries_fin1[country]+=no\n    else:\n        countries_fin1[country]=no\n        \ncountries_fin1={k: v for k, v in sorted(countries_fin1.items(), \n                                        key=lambda item: item[1], reverse= True)}\n\n\n\n\n# Set the width and height of the figure\nplt.figure(figsize=(15,15))\n\n# Add title\nplt.title(\"Content creating countries\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(y=list(countries_fin1.keys()), x=list(countries_fin1.values()))\n\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")","50b1db11":"# From https:\/\/plotly.com\/python\/sunburst-charts\/\ntop_rated=df[0:10]\nfig =px.sunburst(\n    top_rated,\n    path=['Name','Country', 'Genre'],\n    values='Rating',\n    color='Rating')\nfig.show()","ad96bbdb":"# duration of movies\nsns.set(style=\"darkgrid\")\nsns.kdeplot(data=df['Runtime'], shade=True)","0bde9c7e":"genres=list(df['Genre'])\ngen=[]\n\nfor i in genres:\n    i=list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\ng=Counter(gen)\n\n\ntext = list(set(gen))\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(max_font_size=50, max_words=100,background_color=\"white\").generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","7976a5ad":"g={k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse= True)}\n\n\nfig, ax = plt.subplots()\n\nfig = plt.figure(figsize = (10, 10))\nx=list(g.keys())\ny=list(g.values())\nax.vlines(x, ymin=0, ymax=y, color='green')\nax.plot(x,y, \"o\", color='maroon')\nax.set_xticklabels(x, rotation = 90)\nax.set_ylabel(\"Count of movies\")\n# set a title\nax.set_title(\"Genres\");","acb2f6fc":"top=df[['Name','Runtime']].sort_values(by='Runtime', \n                                       ascending=False)[0:20].plot(kind='bar',\n                                                                   x='Name',y='Runtime', \n                                                                   color='red')","d7114ca4":"top=df[['Name','Runtime']].sort_values(by='Runtime', \n                                       ascending=True)[0:20].plot(kind='bar',\n                                                                   x='Name',y='Runtime', \n                                                                   color='red')","a25ce423":"bottom=df.sort_values(by='Runtime')[:-10]\n\nfig = go.Figure(data=[go.Table(header=dict(values=['Name', 'Runtime','Rating']),\n                 cells=dict(values=[bottom['Name'],bottom['Runtime'], bottom['Rating']],fill_color='lavender'))\n                     ]).show()","85174f1e":"# * 'The General' has the lowest runtime.\nlowest = df.loc[df['Runtime'].idxmin()]\nlowest.head()","1a46d796":"# * 'Gone with the Wind' has the highest runtime.\nhighest = df.loc[df['Runtime'].idxmax()]\nhighest.head()","ab1c3e0e":"oldest_us_series=df.sort_values(by='Released_Year')[0:20]\n\nfig = go.Figure(data=[go.Table(header=dict(values=['Name', 'Released_Year'],fill_color='paleturquoise'),\n                 cells=dict(values=[oldest_us_series['Name'],oldest_us_series['Released_Year']],\n                            fill_color='pink'))\n                     ])\nfig.show()","39db48a5":"oldest_us_series=df.sort_values(by='Released_Year', ascending=False)[0:20]\n\nfig = go.Figure(data=[go.Table(header=dict(values=['Name', 'Released_Year'],fill_color='white'),\n                 cells=dict(values=[oldest_us_series['Name'],oldest_us_series['Released_Year']],\n                            fill_color='pink'))\n                     ])\nfig.show()","c5c3eb4e":"# visualising the different year distribution in the dataset\n\nplt.style.use('seaborn-dark')\nplt.rcParams['figure.figsize'] = (18, 9)\n\nx = pd.DataFrame(df.groupby(['Rating'])['Vote'].sum().reset_index())\nx.sort_values(by = ['Rating'], ascending = False, inplace = True)\n\nsns.barplot(x['Rating'], y = x['Vote'], data = x, palette = 'afmhot')\nplt.title('Distribution of Rated Movies', fontsize = 20)\nplt.xlabel('rating')\nplt.xticks(rotation = 90)\nplt.ylabel('total votes')\nplt.show()","d9e57e23":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,10)})\n#ax=sns.regplot(data=suicide_socio_economic, x='gdp_per_capita ($)', y='suicides\/100k pop', x_estimator=np.median, x_jitter=0.2, order=4, x_bins=5)\nax=sns.regplot(data=df, x='Year', y='Rating', x_jitter=0.2, order=4, x_bins=8)\n#ax.set_yscale('log')\n#ax.set_xscale('log')","26f7827f":"on_the_fly.profile_report()","0a07882f":"\n* The beginning of the **1990** has the most frequency of top-rated movies.\n    \n","c987c83a":"<a id = 'dvd'><\/a>\n# Best month to release DVD\n    \n[Go Back](#back)","a9634c9d":"<a id = 'year_successful'><\/a>\n\n# Which year produced the most successful movies?\n\n[Go Back](#back)","096776f8":"<a id = 'genre'><\/a>\n# Which genre attracts the most?\n    \n[Go Back](#back)","86f28c6f":"![image](http:\/\/1.bp.blogspot.com\/-zFzkjyuD68g\/VYGSFBAiSFI\/AAAAAAAACXU\/wW8i2VJ3lc0\/s1600\/00696e.png)","84c3d2aa":"* remove comma from imdbVotes","ad0ac446":"<a id = 'vote_highest'><\/a>\n# Which rating got the highest votes?\n    \n[Go Back](#back)","6a9ceb7a":"* Lowest Runtime","78a56710":"**The kid** is the oldest movie.","ba99e193":"* People like to watch **drama**. They hate movies that contain **music**.  ","512f79ab":"* It shows the wave of rating. Undoubtedly 90's movies created a huge surge in the movie industry.","dd5826ab":"* Divide the date format into date, month and year","66dde79e":"* In case of Movie Released Date and DVD Released Date, fill the numeric missing values with their median.","7d927de2":"<a id = 'year'><\/a>\n# Oldest and the Newest year.\n\n    \n[Go Back](#back)","ea62691f":"The dataset used in this notebook is collected from [here.](https:\/\/data.world\/) I have tried to answer a few obvious questions with visualization. For that, I had to handle the missing values.","636a23e5":"* **R** contains the most successful movies. \n* As **R** rated movies are restricted for children. It can be assumed that most of the voters are adults.","aa33358e":"<a id = 'runtime'><\/a>\n# Movies with the longest and the lowest runtime\n\n    \n[Go Back](#back)","2d12d2dc":"<a id = 'holistic'><\/a>\n# the holistic view of the given columns \n\n    \n[Go Back](#back)","c41ea4d6":"<a id = 'released'><\/a>\n\n# Best released month?\n    \n[Go Back](#back)","fcc83d22":"<a id = 'rated_popular'><\/a>\n\n# Which rated movies are more famous ?\n    \n[Go Back](#back)","a573a853":"* I remove columns that do not convey much information\n* I will fill null values of those columns that seem valuable for further inquiry.\n* From Tomatometer to tomatoURL, almost all of the rows are filled with null values. Thus, they are irrelevant.\n* Apply union on all of the columns mentioned in **another** and **c**, the data frame is quite clean now.","b8c52d20":"* Newest movies.","c618dd88":"* type cast into immutable objects.","c93eb24b":"<a id = 'peak'><\/a>\n# Show the peak time.\n\n    \n[Go Back](#back)","9fd1314c":"<a id=\"missing\"><\/a>\n\n# Handling Missing Values\n\n[Go Back](#back)","cdeab79c":"* showing the heatmap of data frame once more so that I can figure out which columns still have missing values.","909ee826":"<a id = 'back'><\/a>\n* [Handling Missing Values](#missing)\n* [Show all of the columns at a glance](#glance)\n* [Which year produced the most successful movies?](#year_successful)\n* [How rating varies with different columns?](#varies)\n* [Which rated movies are the most popular?](#rated_popular)\n* [Which is the best month to release the movie?](#released)\n* [Which is the best month to release DVD?](#dvd)\n* [Origin of the movie](#country)\n* [Show the top 10 movies with corresponding genre and country.](#genre10)\n* [Show the peak time.](#peak)\n* [Which genre attracts the audience most?](#genre)\n* [Movies with the longest and lowest runtime.](#runtime)\n* [Oldest and the newest year.](#year)\n* [Which rating got the highest votes?](#vote_highest)\n* [Show the rating curve against the year?](#curve)\n* [Holistic view of the given columns?](#holistic)","00f07024":"So, a good amount of movies on IMDB are among the duration of 100-150 mins. It is acceptable considering the fact that a fair amount of the audience cannot watch a 3 hour movie in one sitting. Can you? :p","ba1109b7":"<a id = 'glance'><\/a>\n    \n# Show all of the columns at a glance.\n  \n[Go Back](#back)","3ac85d38":"<a id = 'curve'><\/a>\n# Show the rating curve against the year?\n\n\n    \n[Go Back](#back)","56f91fa1":"# Fetch Dataset","8e4dbc3b":"### Rename","5fd06459":"<a id = 'varies'><\/a>\n    \n# How the rating varies against different columns?\n    \n[Go Back](#back)","a5bc023c":"* first column which is named as 'unnamed' will have no contribution in this notebook.","ff896682":"# Checking For Null Values","7ec3ea05":"* Most of the movies were produced in the **USA**.","026747ba":"# <center>Thank you for your time. \ud83d\ude03<\/center>","005329e1":"* Voila ! There are no missing values in my dataframe. ","50144bd4":"<a id = 'country'><\/a>\n\n# Origin of the movie\n\n\n    \n[Go Back](#back)","9c0ad8b4":"* **March** is the best time to release the DVD version of the movie.","2a4a4a93":"<a id = 'genre10'><\/a>\n# Show top 10 movies with their genres and countries?\n\n\n    \n[Go Back](#back)","821d8db9":"* Movie released in **December** turns out to be the most successful month.","23e6d66c":"# Import Libraries","4ab0e72a":"* Most votes are given for 8.1 holder movies. Top-rated movies have the lowest since the density of movies are not that much in that(upper 9) range. "}}