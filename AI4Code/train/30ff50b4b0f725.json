{"cell_type":{"a75b8641":"code","e42f8156":"code","ec20311b":"code","4bad3d29":"code","0776c6ad":"code","5b1d7993":"code","62aa5b3b":"code","6414abf5":"code","2d1d9031":"code","2bef7496":"code","6ebca9fd":"code","8d345502":"code","80119d9c":"code","7c113ee2":"code","f1243bd0":"code","5254190f":"code","d1bb8b39":"code","45568e0b":"code","c866da0d":"code","8d314a6a":"code","2caf01fa":"code","b10d8444":"code","57f11605":"code","700f5079":"code","6c031ce3":"code","6c9ace86":"code","5a48cda0":"code","c58edd4c":"code","359fda23":"code","cf27cb6f":"code","e40bd95f":"code","a6d43c9d":"code","47fcbafd":"code","7c5da43a":"code","078613a9":"code","f8dab2af":"code","7f71f644":"code","4b8db315":"code","eac08181":"code","aa1f54f6":"code","78001d81":"code","c45cba51":"code","2b202d07":"code","8f06fdb6":"code","a347479c":"code","52c25b99":"code","5c9a4f8f":"code","aa9f09b8":"code","bb8f8a65":"code","26bcfb62":"code","7deacca8":"code","133d8581":"code","aeef1591":"code","417d7e83":"code","dfded0a3":"code","93cb4710":"code","f4225077":"code","0f044d0b":"code","e1ef739d":"code","152f5bb1":"code","0247faef":"code","46265150":"code","a3ba6374":"code","7a9af143":"code","d3b902fe":"code","4d302ad3":"code","e807adb0":"code","eaf57aac":"code","a42d79bd":"code","71b26576":"code","5e6ce065":"code","48ce5227":"code","d3fe5aa1":"code","174502b2":"code","e2a46ae7":"code","ee8406a5":"code","6a8a7ca9":"code","e5095186":"code","301cec20":"code","3ea886d8":"code","01791c52":"code","7fbd5470":"code","29d58ca8":"code","a9ddab8d":"code","7d6f6855":"code","b418a434":"code","8c4c51e7":"code","0fba02fe":"code","b9338d24":"code","0d45c7b8":"code","1617a54f":"code","84a012a4":"code","cfc676c2":"code","7a0cbdf5":"code","12675e87":"code","fd31f55f":"code","91737eb3":"code","49df29b6":"code","e17b3ca2":"markdown","0a55d24d":"markdown","0782e500":"markdown","26a98eed":"markdown","72462cf0":"markdown","fca7bc93":"markdown","a8b97ec2":"markdown","68a01281":"markdown","30ddb380":"markdown","7e99e2cb":"markdown","cfad70b1":"markdown","002a44ec":"markdown","de08c5c9":"markdown","019680ec":"markdown","137d4127":"markdown","1e99a1c7":"markdown","f944fc3f":"markdown","2684e138":"markdown","ae3532e9":"markdown","d182bda5":"markdown","8e1153b3":"markdown","c96e5aa9":"markdown","ea8a6160":"markdown","1ff6e10f":"markdown","51794bd1":"markdown","336cce23":"markdown","ea28673d":"markdown","a643e49e":"markdown","102473c3":"markdown","89f5ed50":"markdown","59c1e7d5":"markdown","2f703108":"markdown","edba6513":"markdown","7793e480":"markdown","e8159b29":"markdown","942fc05c":"markdown","4dd1bdd6":"markdown","8f3169d7":"markdown","f384c52e":"markdown","85f474c6":"markdown","52db3e9a":"markdown","77fc5e86":"markdown","e1e62463":"markdown","741f47b5":"markdown","b1fa712f":"markdown","a2ef69ab":"markdown","bc833ed1":"markdown","d9ab5614":"markdown","7fb71b98":"markdown","a46ae096":"markdown","0653797c":"markdown","3e7e7e2e":"markdown","73f135af":"markdown","4b8438ca":"markdown","1f4e8014":"markdown","f82672d7":"markdown","9b530471":"markdown","71abf2d8":"markdown","b49beda4":"markdown","8723a24b":"markdown","6dfd4807":"markdown","53838682":"markdown","4d7656ae":"markdown","33c02d43":"markdown","de2452f7":"markdown","3fb94b5c":"markdown","96327e89":"markdown","9c0fecaa":"markdown","37f216e3":"markdown","103f239c":"markdown","e4bc1144":"markdown","15b25098":"markdown","0aae8060":"markdown"},"source":{"a75b8641":"import numpy as np","e42f8156":"fruits = ['apple', 'mango', 'orange', 'banana']\nprint(fruits)","ec20311b":"print(fruits[1])","4bad3d29":"print(fruits[-1])","0776c6ad":"fruits[2] = 'Pine Apple'\nprint(fruits)","5b1d7993":"if 'mango' in fruits:\n    print('Yes!')\nelse:\n    print('No!')","62aa5b3b":"len(fruits)","6414abf5":"numbers = [1,2,3,4,5,6,7,8,9,0]\nnew_numbers = np.array(numbers)\nprint(new_numbers)","2d1d9031":"name = np.array(['Rashidul', 'Hasan', 'Hridoy'])\nprint(name)","2bef7496":"a = [1,2,3]\nb = [3,2,1]\nc = np.array([a,b])\nprint(c)","6ebca9fd":"d = np.array([[1,2,3], [4,5,6]])\nprint(d)","8d345502":"d.shape","80119d9c":"e = np.array([[1,2,3],[4,5,6],[7,8,9]])\ne.shape","7c113ee2":"e","f1243bd0":"np.diag(e)","5254190f":"np.ones((3,4))","d1bb8b39":"np.ones((3,1))","45568e0b":"np.ones((5,8))","c866da0d":"np.zeros((3,5))","8d314a6a":"np.zeros((4,2))","2caf01fa":"np.eye(4)","b10d8444":"np.eye(6)","57f11605":"np.arange(1,10)","700f5079":"np.arange(4,14)","6c031ce3":"np.arange(1,20,2)","6c9ace86":"np.arange(0,20,2)","5a48cda0":"np.arange(0,40,5)","c58edd4c":"np.arange(0,100,3,float)","359fda23":"np.arange(1,20, 0.5, float)","cf27cb6f":"x = np.arange(1,11)\nx","e40bd95f":"x.reshape(2,5)","a6d43c9d":"x.reshape(5,2)","47fcbafd":"x.reshape(10,1)","7c5da43a":"y = np.array([[1,2,3,4],[5,6,7,8]])\ny","078613a9":"y.reshape(4,2)","f8dab2af":"z = np.array([1,2,3,4,5,6,7,8,9,0])\nz.reshape(2,5)","7f71f644":"np.linspace(0,4,9)","4b8db315":"x = np.linspace(0,10,20)\nx","eac08181":"np.linspace(10,100,10)","aa1f54f6":"x = np.arange(0,20)\nx","78001d81":"x.reshape(5,4)","c45cba51":"x","2b202d07":"x.resize(5,4)","8f06fdb6":"x","a347479c":"z = np.array([1,2,3,4,5,6,7,8,9])\nz.resize(3,3)\nz","52c25b99":"a = np.array([[1,2,4,5], [4,5,6,3]])\na.resize(3,3)\na","5c9a4f8f":"np.array([1, 2, 3] * 3)","aa9f09b8":"np.repeat([1, 2, 3], 3)","bb8f8a65":"x = np.array([1,2,3])\ny = np.array([4,5,6])","26bcfb62":"x+y\n# elementwise addition     [1 2 3] + [4 5 6] = [5  7  9]","7deacca8":"x-y\n# elementwise subtraction  [1 2 3] - [4 5 6] = [-3 -3 -3]","133d8581":"x*y\n# elementwise multiplication  [1 2 3] * [4 5 6] = [4  10  18]","aeef1591":"x\/y\n# elementwise divison         [1 2 3] \/ [4 5 6] = [0.25  0.4  0.5]","417d7e83":"x**2\n# elementwise power  [1 2 3] ^2 =  [1 4 9]","dfded0a3":"x.dot(y)\n# dot product  1*4 + 2*5 + 3*6","93cb4710":"y.dot(x)","f4225077":"a = np.array([x, x**2])\na","0f044d0b":"a.shape","e1ef739d":"a.T","152f5bb1":"a.T.shape","0247faef":"x.dtype","46265150":"x = x.astype('f')\nx.dtype","a3ba6374":"a = np.array([1,4,5,6,-5,3,7])","7a9af143":"a.sum()","d3b902fe":"a.max()","4d302ad3":"a.min()","e807adb0":"a.mean()","eaf57aac":"a.std()","a42d79bd":"a.argmax()","71b26576":"a.argmin()","5e6ce065":"b = np.arange(14)**2\nb","48ce5227":"b[0], b[3], b[-1], b[-5]","d3fe5aa1":"a[1:7]","174502b2":"a[3:4]","e2a46ae7":"a[-2:]","ee8406a5":"a[-5:]","6a8a7ca9":"a[-1::-3]","e5095186":"a[-1::-5]","301cec20":"r = np.arange(36)\nr.resize((6, 6))\nr","3ea886d8":"r[2,2]","01791c52":"r[5,5]","7fbd5470":"r[5,2]","29d58ca8":"r[3, 3:6]","a9ddab8d":"r[:2, :-1]","7d6f6855":"r[-1, ::2]","b418a434":"r[r > 30]","8c4c51e7":"r[r > 30] = 30\nr","0fba02fe":"r2 = r[:3,:3]\nr2","b9338d24":"r2[:] = 0\nr2","0d45c7b8":"r","1617a54f":"r_copy = r.copy()\nr_copy","84a012a4":"r_copy[:] = 10\nprint(r_copy, '\\n')\nprint(r)","cfc676c2":"t = np.random.randint(0, 10, (4,3))\nt","7a0cbdf5":"for row in t:\n    print(row)","12675e87":"for i in range(len(t)):\n    print(t[i])","fd31f55f":"for i, row in enumerate(t):\n    print('row', i, 'is', row)","91737eb3":"t2 = t**2\nt2","49df29b6":"for i, j in zip(t, t2):\n    print(i,'+',j,'=',i+j)","e17b3ca2":"**Use .astype to cast to a specific type.**","0a55d24d":"**Use .T to get the transpose.**","0782e500":"It creates an array by using the evenly spaced values over the given interval.\n\n**numpy.arange(start, stop, step, dtype)**\n\n* start: The starting of an interval. The default is 0.\n* stop: represents the value at which the interval ends excluding this value.\n* step: The number by which the interval values change.\n* dtype: the data type of the numpy array items.","26a98eed":"**Import NumPy**","72462cf0":"**Copying Data**\n\nBe careful with copying and modifying arrays in NumPy!","fca7bc93":"Here we are assigning all values in the array that are greater than 30 to the value of 30.","a8b97ec2":"**Let's play with numpy.reshape().**","68a01281":"This is a slice of the last row, and only every other element.","30ddb380":"**eye returns a 2-D array with ones on the diagonal and zeros elsewhere.**","7e99e2cb":"**Let's check data type.**\n","cfad70b1":"**Let's change third item of the list.**","002a44ec":"**Check if mango in the list.**","de08c5c9":"**Let's learn indexing or slicing.**","019680ec":"Use .dtype to see the data type of the elements in the array.","137d4127":"# **So That is it for now Guys**\n# **If you Like this , Please Upvote the notebook**","1e99a1c7":"Use : to indicate a range. array[start:stop]\n\nLeaving start or stop empty will default to the beginning\/end of the array.","f944fc3f":"**Let's look at transposing arrays. Transposing permutes the dimensions of the array.**","2684e138":"**Lists **are just like the arrays, declared in other languages. Lists need not be homogeneous always which makes it a most powerful tool in Python. A single list may contain DataTypes like Integers, Strings, as well as Objects. Lists are mutable, and hence, they can be altered even after their creation.","ae3532e9":"**The list items can be accessed by referring to the index number. Let's print second item in the list.**","d182bda5":"r has also been changed!","8e1153b3":"**Let's Iterate Over Arrays**","c96e5aa9":"**Math Functions**\n\nNumpy has many built in math functions that can be performed on arrays.","ea8a6160":"**Use the shape method to find the dimensions of the array. (rows, columns)**","1ff6e10f":"The numpy.linspace() function in Python returns evenly spaced numbers over the specified interval. This function is similar to The Numpy arange function but it uses the number instead of the step as an interval.\n\nnumpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)\n\n* start\tSpecify the start of the interval range. The default value is 0.\n* stop\tprovide end of the interval range.\n* num\t[Optional] the number of samples to generate. The default is 50.\n* endpoint\t[Optional] if true then stop is the last sample.\n* retstep\t[Optional] if the value is true then return the spacing between samples\n* dtype\t[Optional] dtype is the type of output array.","51794bd1":"**Let's do some fun with ones, zeros, eye.**","336cce23":"**ones returns a new array of given shape and type, filled with ones.**","ea28673d":"We can also perform conditional indexing. Here we are selecting values from the array that are greater than 30. (Also see np.where)","a643e49e":"In some occasions, you need to reshape the data from wide to long. You can use the reshape function for this. The syntax is\n\nnumpy.reshape(a, newShape, order='C')\n\nHere,\n\na: Array that you want to reshape\n\nnewShape: The new desires shape\n\nOrder: Default is C which is an essential row style. ","102473c3":"And use : to select a range of rows or columns","89f5ed50":"**If you totally new in Kaggle, then I would like to recommend you to see this course.**<br>\nFaster Data Science Education,\nLink: https:\/\/www.kaggle.com\/learn\/overview","59c1e7d5":"![](https:\/\/www.crazygeeks.org\/wp-content\/uploads\/2019\/02\/numpy.linspace-in-Python-function-overview.jpg)","2f703108":"**Ok! Let's go to NumPy.**","edba6513":"**Find length of a list.**","7793e480":"Now when r_copy is modified, r will not be changed.","e8159b29":"**Let's play with numpy.resize().**","942fc05c":"Use +, -, *, \/ and to perform element wise addition, subtraction, multiplication, division and power.","4dd1bdd6":"Use negatives to count from the back.","8f3169d7":"Iterate by row and index.","f384c52e":"With the help of Numpy numpy.resize(), we can resize the size of an array. Array can be of any shape but to resize it we just need the size i.e (2, 2), (2, 3) and many more. During resizing numpy append zeros if values at a particular place is missing.\n\nMost of you are now thinking that what is the difference between reshape and resize. When we talk about reshape then an array changes it\u2019s shape as temporary but when we talk about resize then the changes made permanently.","85f474c6":"**Why NumPy?**<br>\n\nNumPy is an open source numerical Python library. NumPy contains a multi-dimentional array and matrix data structures. It can be utilised to perform a number of mathematical operations on arrays such as trigonometric, statistical and algebraic routines. NumPy is an extension of Numeric and Numarray.","52db3e9a":"Use zip to iterate over multiple iterables.","77fc5e86":"**Convert a list to Numpy array.**\n\n**new_array = np.array(list)**","e1e62463":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/1a\/NumPy_logo.svg\/1200px-NumPy_logo.svg.png)","741f47b5":"**Let's play with arange().**","b1fa712f":"Let's create a new 4 by 3 array of random numbers 0-9.","a2ef69ab":"Use bracket notation to get the value at a specific index. Remember that indexing starts at 0.","bc833ed1":"**Let's print diagonal.**","d9ab5614":"**Let's play with numpy.linspace().**","7fb71b98":"To avoid this, use r.copy to create a copy that will not affect the original array.","a46ae096":"**Create a list:**","0653797c":"A second : can be used to indicate step-size. array[start:stop:stepsize]\n\nHere we are starting 5th element from the end, and counting backwards by 2 until the beginning of the array is reached.","3e7e7e2e":"**Let's create an array using repeating list.**","73f135af":"Iterate by row.","4b8438ca":"**Quickstart tutorial by numpy.org**<br>\nhttps:\/\/numpy.org\/devdocs\/user\/quickstart.html","1f4e8014":"**argmax and argmin return the index of the maximum and minimum values in the array.**","f82672d7":"Repeat elements of an array using repeat.","9b530471":"**This Python cheat sheet is a quick reference for NumPy beginners.**\n\nby **DataCamp**\n\nGiven the fact that it's one of the fundamental packages for scientific computing, NumPy is one of the packages that you must be able to use and know if you want to do data science with Python. It offers a great alternative to Python lists, as NumPy arrays are more compact, allow faster access in reading and writing items, and are more convenient and more efficient overall. \n\nIn addition, it's (partly) the fundament of other important packages that are used for data manipulation and machine learning which you might already know, namely, Pandas, Scikit-Learn and SciPy:\n\n* The Pandas data manipulation library builds on NumPy, but instead of the arrays, it makes use of two other fundamental data structures: Series and DataFrames,\n* SciPy builds on Numpy to provide a large number of functions that operate on NumPy arrays, and\n* The machine learning library Scikit-Learn builds not only on NumPy, but also on SciPy and Matplotlib. \n\n\nYou see, this Python library is a must-know: if you know how to work with it, you'll also gain a better understanding of the other Python data science tools that you'll undoubtedly be using. \n\nIt's a win-win situation, right?\n\nNevertheless, just like any other library, NumPy can come off as quite overwhelming at start; What are the very basics that you need to know in order to get started with this data analysis library?\n\nThis cheat sheet means to give you a good overview of the possibilities that this library has to offer. \n\nGo and check it out for yourself!\n\nClick on the link below.","71abf2d8":"**Pass in a list of lists to create a multidimensional array.**","b49beda4":"Here we are selecting all the rows up to (and not including) row 2, and all the columns up to (and not including) the last column.","8723a24b":"**zeros returns a new array of given shape and type, filled with zeros.**","6dfd4807":"**Thanks <3 .**","53838682":"[NumPy Cheat Sheet: Data Analysis in Python](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Numpy_Python_Cheat_Sheet.pdf)","4d7656ae":"**Stop!!! Let's take a short look on Python List.**","33c02d43":"**Dot Product:**","de2452f7":"**What is NumPy?**\n\nNumPy is the fundamental package for scientific computing with Python. It contains among other things:\n*     a powerful N-dimensional array object\n*     sophisticated (broadcasting) functions\n*     tools for integrating C\/C++ and Fortran code\n*     useful linear algebra, Fourier transform, and random number capabilities\n\nBesides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.\n\nTo know more, please visit: https:\/\/numpy.org\/","3fb94b5c":"Use bracket notation to slice: array[row, column]","96327e89":"Iterate by index.","9c0fecaa":"Set this slice's values to zero ([:] selects the entire array)","37f216e3":"**Or just pass in a list directly.**","103f239c":"r2 is a slice of r","e4bc1144":"**Let's print last item of the list.**","15b25098":"**Let's look at a multidimensional array.**","0aae8060":"**Let's play with operations.**"}}