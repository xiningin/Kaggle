{"cell_type":{"2fb443e3":"code","b3181ba5":"code","3d0a8812":"code","0cf02cde":"code","794a21c3":"code","ae98140a":"code","5413f163":"code","b593580a":"code","c038a58b":"code","262790b0":"code","8cd78a1b":"code","11e8a639":"code","f61eb93e":"markdown","e07c11e2":"markdown","ce52aab8":"markdown","c396a11f":"markdown","63256e20":"markdown","910863bf":"markdown","dd8cfb48":"markdown","2f6f4874":"markdown","bc5302b5":"markdown","35ce090b":"markdown","169073a5":"markdown","4da34de2":"markdown","03b2bb7c":"markdown","9e1f0ff5":"markdown","39664b2a":"markdown","374a5e76":"markdown","6215cad0":"markdown","d635a37f":"markdown","50bc4d1b":"markdown","39dab983":"markdown","4ecbe0d6":"markdown","e5709d1a":"markdown","127943b0":"markdown","64318ab6":"markdown","e12814bf":"markdown","80c8c81c":"markdown","7fba147f":"markdown","8ef63d63":"markdown","6261f31b":"markdown"},"source":{"2fb443e3":"# Create a class named MyClass, with a property named x:\nclass MyClass:\n    x = 5","b3181ba5":"# Now we can use the class named MyClass to create objects:\n# Create an object named p1, and print the value of x:\np1 = MyClass()\nprint(p1.x)\n","3d0a8812":"# Create a class named Person, use the __init__() function to assign values for name and age:\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\n","0cf02cde":"# Insert a function that prints a greeting, and execute it on the p1 object:\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        \n    def myfunc(self):\n        print(f\"Hello, my name is {self.name}\")\n        \n\np1 = Person(\"Mike\", 27)\np1.myfunc()","794a21c3":"class Person:\n    def __init__(mysillyobject, name, age):\n        mysillyobject.name = name\n        mysillyobject.age = age\n\n    def myfunc(abc):\n        print(\"Hello my name is \" + abc.name)\n\np1 = Person(\"John\", 36)\np1.myfunc()","ae98140a":"class Person:\n    def __init__(self, fname, lname):\n        self.firstname = fname\n        self.lastname = lname\n        \n    def printname(self):\n        print(f\"My name is {self.firstname} {self.lastname}\")\n        \nx = Person(\"Mike\", \"Olsen\")\nx.printname()","5413f163":"# Create a class named Student, which will inherit the properties and methods from the Person class:\n\nclass Student(Person):\n    pass\n\n# Note: Use the pass keyword when you do not want to add any other properties or methods to the class.","b593580a":"x = Student(\"Mike\", \"Olsen\")\nx.printname()\n","c038a58b":"# class Student(Person):\n#     def __init__(self, fname, lname):\n        # add properties here\n#         self.firstname = fname\n#         self.lastname = lname","262790b0":"class Student(Person):\n    def __init__(self, fname, lname):\n        Person.__init__(self, fname, lname)","8cd78a1b":"class Student(Person):\n    def __init__(self, fname, lname):\n        super().__init__(fname, lname)","11e8a639":"class Student(Person):\n    def __init__(self, fname, lname, year):\n        super().__init__(fname, lname)\n        self.graduationyear = year\n    \n    # add a method called 'welcome' to the 'Student' class\n    def welcome(self):\n        print(\"Welcome!\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)    \n        \np1 = Student(\"Mike\", \"Olsen\", 2015)\np1.welcome()","f61eb93e":"## 1.4) Object Methods","e07c11e2":"### This is my first notebook on Kaggle! \n- The notebook contain codes and concepts in brief related to  **OOP - Class, Objects, Inheritance, Parent, Child..** in Python.  \n\n\nDo remember to upvote if the notebook was helpful. It will motivate me in publishing notebooks!! :-))","ce52aab8":"**Note:** If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.","c396a11f":"**- Note: When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.**\n    \n**- To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function**","63256e20":"- The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\n\n- To understand the meaning of classes we have to understand the built-in __init__() function.\n\n- All classes have a function called __init__(), which is always executed when the class is being initiated.\n\n- Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:","910863bf":"## 2.1) create a parent class","dd8cfb48":"## 2.4) Use the super() Function","2f6f4874":"# In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the '__init__()' function:","bc5302b5":"## 1.3) The __init__() Function","35ce090b":"# 1) Python Classes\/Objects","169073a5":"## 1.5)The self Parameter","4da34de2":"- Inheritance allows us to define a class that inherits all the methods and properties from another class.\n\n- Parent class is the class being inherited from, also called base class.\n\n- Child class is the class that inherits from another class, also called derived class.","03b2bb7c":"# Do upvote if the notebook was helpful. Thanks!","9e1f0ff5":"- **Note:** The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.","39664b2a":"- So far we have created a child class that inherits the properties and methods from its parent.\n\n- We want to add the __init__() function to the child class (instead of the pass keyword).\n\n- Note that: The __init__() function is called automatically every time the class is being used to create a new object.","374a5e76":"## 2.5) Add properties","6215cad0":"# 2) Python Inheritance","d635a37f":"## 2.3) Add the __init__() function","50bc4d1b":"- Python also has a super() function that will make the child class inherit all the methods and properties from its parent:","39dab983":"- Python is an object oriented programming language.\n\n- Almost everything in Python is an object, with its properties and methods.\n\n- A Class is like an object constructor, or a \"blueprint\" for creating objects.","4ecbe0d6":"## 2.2) create a child class ","e5709d1a":"- **Note:** The __init__() function is called automatically every time the class is being used to create a new object.","127943b0":"- To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:","64318ab6":"## 1.1) Create a class","e12814bf":"- Create a class named Person, with \n    - **Properties:** firstname and lastname  \n    - **method**: printname ","80c8c81c":"## 1.2) Create object","7fba147f":"- Objects can also contain methods. Methods in objects are functions that belong to the object.\n\n- Let us create a method in the Person class:\n    ","8ef63d63":"- To create a class, use the keyword 'class':","6261f31b":"- The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.\n\n- It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:"}}