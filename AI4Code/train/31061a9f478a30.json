{"cell_type":{"54d45cee":"code","bd26c5ee":"code","442188ef":"code","a4cfa58d":"code","d252a3b6":"code","8dbd2681":"code","ebf3d7b1":"code","fe4b1bfb":"code","e8ef1f2f":"code","382ca26c":"markdown","df4048fb":"markdown","4552d14a":"markdown","8ae467e5":"markdown","c74f7b6d":"markdown","771068d0":"markdown","625bf0dc":"markdown","64b06454":"markdown","8059f778":"markdown"},"source":{"54d45cee":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nfrom matplotlib import pyplot as plt","bd26c5ee":"data = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/training_labels.csv\")\nsample = pd.read_csv(\"..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv\")","442188ef":"plot = np.load(\"..\/input\/g2net-gravitational-wave-detection\/train\/0\/0\/0\/00000e74ad.npy\")\nplt.plot(plot[0])","a4cfa58d":"def generator():\n    for i in range(1000):#range(len(data[\"id\"])): I only have 1000 to make training faster\n        file = \"..\/input\/g2net-gravitational-wave-detection\/train\/\"\n        file += data[\"id\"][i][0] + \"\/\" + data[\"id\"][i][1] + \"\/\" + data[\"id\"][i][2] + \"\/\"\n        file += data[\"id\"][i] + \".npy\"\n        \n        x_temp = np.load(file)\n        x = []\n        \n        for w in range(len(x_temp[0])):\n            x.append((x_temp[0][w]+x_temp[1][w]+x_temp[2][w])\/3) # get the mean to smooth it\n                \n        \n        y = data[\"target\"][i]\n        \n        yield np.array(x), np.array(y)","d252a3b6":"i = generator()\nplt.plot(next(i)[0]) # same image\nprint(np.shape(next(i)))\nprint(np.shape(next(i)[0]))","8dbd2681":"model = tf.keras.Sequential(\n    [\n        tf.keras.layers.Input(shape=(4096,)),\n        tf.keras.layers.Dense(64),\n        tf.keras.layers.Dense(1, \"sigmoid\")\n    ]\n)\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss=tf.keras.losses.BinaryCrossentropy())\nmodel.summary()","ebf3d7b1":"gen = generator()\nbatch_size=10\n\nxs = []\nys = []\n\nfor x, y in gen:\n    model.train_on_batch(np.reshape(x,(1,4096)),np.reshape(y,(1,1)))","fe4b1bfb":"for i in range(len(sample[\"id\"])):\n    file = \"..\/input\/g2net-gravitational-wave-detection\/test\/\"\n    file += sample[\"id\"][i][0] + \"\/\" + sample[\"id\"][i][1] + \"\/\" + sample[\"id\"][i][2] + \"\/\"\n    file += sample[\"id\"][i] + \".npy\"\n        \n    x_temp = np.load(file)\n    x = []\n        \n    for w in range(len(x_temp[0])):\n        x.append((x_temp[0][w]+x_temp[1][w]+x_temp[2][w])\/3) # get the mean to smooth it\n                \n    sample[\"target\"][i] = model(np.reshape(x,(1,4096)))","e8ef1f2f":"sample.to_csv('submission.csv', index = False)\nsample","382ca26c":"plot the npy file","df4048fb":"# load packages","4552d14a":"get csv's","8ae467e5":"define generator","c74f7b6d":"# predictions","771068d0":"add a better model below","625bf0dc":"it works!!!","64b06454":"I could not finish it fast but edit this and tell me how it goes","8059f778":"# get the data"}}