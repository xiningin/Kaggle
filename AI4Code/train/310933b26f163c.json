{"cell_type":{"3b760dd3":"code","bae1abfe":"code","1d1954d4":"code","85d74248":"code","821b86bc":"code","eef32592":"code","02cc5e57":"code","fab3667a":"code","74f50d91":"code","612c73a2":"code","406fcf80":"code","65cd8051":"code","25c04ca6":"code","1f46f831":"code","3f713a48":"code","c65f2937":"code","f3942f3b":"code","ccbdfa94":"code","5cfffbd3":"code","5cd4211b":"code","85f6a679":"code","9a754f1b":"code","092fec79":"code","7510967e":"code","15ddd3f0":"code","bf75c28c":"code","f4781ff3":"code","638fd880":"code","6029c3ee":"code","c6c018e4":"code","435db77a":"markdown","2939cde0":"markdown","938748c5":"markdown","10feab7e":"markdown","66ff82ef":"markdown"},"source":{"3b760dd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bae1abfe":"df=pd.read_csv('..\/input\/widsdatathon2021\/TrainingWiDS2021.csv')\ntest=pd.read_csv('..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv')\ndata_type = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv\")","1d1954d4":"test_copy=test.copy()","85d74248":"print(df.shape)\nprint(test.shape)","821b86bc":"df.head()","eef32592":"df['diabetes_mellitus'].value_counts()","02cc5e57":"for i in df:\n    if df[i].isnull().sum()>10000:\n        df.drop(columns=[i],inplace=True)\n        test.drop(columns=[i],inplace=True)","fab3667a":"print(df.shape)\nprint(test.shape)","74f50d91":"df.head()","612c73a2":"test.head()","406fcf80":"df.drop(columns=['Unnamed: 0','encounter_id','hospital_id'],inplace=True)","65cd8051":"df.shape","25c04ca6":"test.drop(columns=['Unnamed: 0','encounter_id','hospital_id'],inplace=True)","1f46f831":"print(df.shape)\nprint(test.shape)","3f713a48":"from sklearn.preprocessing import LabelEncoder","c65f2937":"le=LabelEncoder()","f3942f3b":"data_dtype_dict = dict(zip(data_type['Variable Name'], data_type['Data Type']))","ccbdfa94":"test.columns","5cfffbd3":"for col in test.columns:\n    print(col)\n    if df.dtypes[col] == \"object\":\n        df[col] = df[col].fillna(\"NA\")\n        test[col] = test[col].fillna(\"NA\")\n        df[col] = le.fit_transform(df[col])\n        test[col] = le.transform(test[col])\n    elif data_dtype_dict[col] == \"binary\":\n        df[col] = df[col].fillna(-1)\n        test[col] = test[col].fillna(-1)\n    elif data_dtype_dict[col] == \"numeric\":\n        df[col] = df[col].fillna(0)\n        test[col] = test[col].fillna(0)\n    else:\n        m=(df[col].median()+df[col].mean())\/2\n        df[col] = df[col].fillna(m)\n        test[col] = test[col].fillna(m)","5cd4211b":"for col in df:\n    print(df.isnull().sum())","85f6a679":"from sklearn.model_selection import train_test_split\n\nX=df.drop(columns=['diabetes_mellitus']).values\n\ny=df['diabetes_mellitus'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","9a754f1b":"from sklearn.ensemble import RandomForestClassifier","092fec79":"rf=RandomForestClassifier(n_estimators=1000)","7510967e":"rf.fit(X_train,y_train)","15ddd3f0":"from sklearn.metrics import *","bf75c28c":"accuracy_score(rf.predict(X_test),y_test)","f4781ff3":"roc_auc_score(rf.predict(X_test),y_test)","638fd880":"x_test=test.values","6029c3ee":"y_pred=rf.predict_proba(x_test)","c6c018e4":"pd.DataFrame({'encounter_id':test_copy['encounter_id'].values,\n    'diabetes_mellitus':y_pred[:,1]}).to_csv('\/kaggle\/working\/Submission.csv',\n                                                                   index=False)","435db77a":"# Removing the columns having more than 10,000 Null values","2939cde0":"# Creating and saving Submission file for final Submission","938748c5":"# Creating Random forest model and predicting the output","10feab7e":"# filling null values and doing labelencoding","66ff82ef":"## In this notebook Random forest classifier is used with simple steps of data cleaning"}}