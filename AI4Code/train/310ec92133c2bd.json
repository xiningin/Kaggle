{"cell_type":{"c0cf5dea":"code","a3f56bf1":"code","9b306c7e":"code","c74de31b":"code","38492251":"code","eba5bb08":"code","79a6c918":"code","4a55f34c":"code","946b10c3":"code","d251b08e":"code","694bdd0e":"code","40769385":"code","8d30a4dd":"code","a1b9bf77":"code","5900dc60":"code","15150304":"code","87643ceb":"code","c48085c8":"code","3d1f6693":"code","62f71d21":"code","f1b89842":"code","a229c0f4":"code","582595f3":"code","d342afff":"code","4875fbc4":"code","53b0ec51":"code","8d479943":"code","1b132261":"code","9c2fc138":"code","70342452":"code","812b2261":"code","a54ac83a":"code","6b741542":"code","823bd7bd":"code","3c962f2d":"code","b623be06":"code","03c3480c":"code","c9cc96f5":"code","7ea8a2e6":"code","9e0e514d":"code","47a1ac5d":"code","1e2daca4":"code","9293f7a2":"code","b89610ce":"code","f68c953c":"code","1efe2a44":"code","bb04ad13":"code","b78c4a84":"code","0e26b694":"code","ed27ce06":"code","f3949718":"code","84626e15":"code","a277a46e":"code","a67aa622":"code","c4a8643a":"code","c3df02c4":"code","a7e0c158":"code","105987bd":"code","16eff63a":"code","17270cb7":"code","063b9881":"code","9c7e0de9":"code","579193c1":"code","2706501d":"code","337f6f6f":"code","38318261":"code","353e6107":"code","7018876d":"code","9ebb248f":"code","9fc16b17":"code","f8ee0f1a":"code","e16a9fb3":"code","9b82c5bb":"code","bdeb38c8":"code","af9a659e":"code","d19ddde9":"code","b9d425fa":"code","4788fd97":"code","746f7489":"code","5bad2390":"code","b2d9abce":"code","bb024d09":"code","efc2c950":"code","605a2121":"code","f125cb6f":"code","c979422a":"code","597eeab3":"code","202f8e14":"code","2440a17d":"code","998e7567":"code","cea36aa6":"code","76b01e6f":"code","91c2441b":"code","c30e0828":"code","11f80eda":"code","530366be":"code","320a4113":"code","007c1f4b":"code","591aa49a":"code","8ed61b4d":"code","e37a5097":"code","626cf3d3":"code","5b723f77":"code","e6a3040f":"code","a076e5f5":"code","6df30148":"code","d7bc9242":"code","d370bcaf":"code","e2ecd70c":"code","8c2caa7f":"code","33d53e3a":"code","4d79808e":"code","a852b230":"markdown","5fe66517":"markdown","5e2e769d":"markdown","d7d1d09b":"markdown","6648cd56":"markdown","f93fe7db":"markdown","8e0c6f45":"markdown","ce0dea88":"markdown","bc36ef3c":"markdown","47d28ef3":"markdown","c0d08b8a":"markdown","c4683ddb":"markdown","0bc94450":"markdown","c263dfc1":"markdown","ff4dba78":"markdown","c6ffa7e6":"markdown","f7cd64b0":"markdown","dbd0ed08":"markdown","e45f0143":"markdown","9e07c23b":"markdown","e9859660":"markdown","f7702474":"markdown","1fd16d7c":"markdown","7fc17403":"markdown","abe8e9c2":"markdown"},"source":{"c0cf5dea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a3f56bf1":"#Create list\nnum = [1,2,3,4,5,6]\nnum","9b306c7e":"#Let's see its attribute\nprint(dir(num))","c74de31b":"#Add new element\nnum.append(\"foo\") \nnum","38492251":"#Remove element\nnum.remove('foo') \nnum","eba5bb08":"print(\"All elements : \", num)\nprint(\"First 3 elements : \", num[:3])\nprint(\"Except first 3 elements  : \", num[3:])\nprint(\"4 to 6 elements: \", num[3:6])\nprint(\"5 to 2 elements: \", num[1:-2])","79a6c918":"#Creating Tuple\nt1 = (6,\"str\",15,12,\"foo\",6)\nt1","4a55f34c":"print(\"count(6)\", t1.count(6)) # How many '6' does tuple have?\nprint(\"index('foo')\", t1.index('foo')) # What's index of 'foo'","946b10c3":"dic = {\"alice\" : 23, \"bob\" : 12, \"steve\": 45}\ndic","d251b08e":"#Get Steve value\ndic[\"steve\"]","694bdd0e":"#Get bob value\ndic.get(\"bob\")","40769385":"print(dic.keys())\nprint(dic.values())\ndic.pop(\"steve\") # remove steve","8d30a4dd":"#Another way to create a dic\nx = dict([(\"Mad Men\", \"Drama\"), (\"The Office\", \"Comedy\")])\nx","a1b9bf77":"#Create list \nnames = [\"alice\",\"bob\",\"eva\", \"steve\",\"jane\", \"billy\"]\n\n#print each element of list\nfor name in names:\n    print(name)","5900dc60":"#print each element of string\nfor i in 'alice':\n    print(i)","15150304":"#split() function is  return a list of word strings. \nfor i in \"alice and bob\".split():\n    print(i)","87643ceb":"#Lambda Function\nfoo = lambda x: x**3\nfoo(3)","c48085c8":"#Anonymous function is likely to lambda but it takes more arguments.\nnumbers = [15,16,20,23,13,18,27]\nresults = map(foo, numbers)\nprint(results)\nprint(list(results))","3d1f6693":"num1 = [1,2,3,4,5,6,7]\nnum2 = [5,'foo',8, 1.0]\nz = zip(num1,num2)\nprint(z)\nprint(list(z))\n","62f71d21":"#Create a dictionary\ndic1= { \"Name\":[\"alice\",\"bob\",\"clarke\", \"steve\",\"eva\", \"jason\"],\n        \"Ages\":[15,16,20,23,13,18],\n        \"Salary\":[100,232, 300, 50, 140,500] }\n","f1b89842":"#Increase the age of everyone one year\nprint(dic1[\"Ages\"])\ndic1[\"Ages\"] = [i + 1 for i in dic1[\"Ages\"]] #Increase Ages 1 year\nprint(dic1[\"Ages\"])\n","a229c0f4":"#Creating new column, if salary > avarage write 'high' else 'low'\navg = sum(dic1[\"Salary\"]) \/ len(dic1[\"Salary\"]) #Avarage\ndic1[\"new_column\"] = [\"high\" if salary > avg else \"low\" for salary in dic1[\"Salary\"]]\ndic1","582595f3":"#Change column name\ndic1[\"Status\"] = dic1.pop(\"new_column\")\ndic1\n","d342afff":"a = np.array([1,2,3,4,5,6,7,8,])\na","4875fbc4":"a = a.reshape(4,2)\na","53b0ec51":"print(\"shape : \", a.shape)\nprint(\"dimension : \", a.ndim)\nprint(\"data type : \", a.dtype.name)\nprint(\"size : \", a.size)\nprint(\"type\", type(a))","8d479943":"#Create 3x4 matris and fill it with zeros\nzeros = np.zeros((3,4))\nzeros","1b132261":"np.ones((3,4))","9c2fc138":"#Create a array: range of elements 5 to 20, increase 2\nc = np.arange(5,20,2)\nc","70342452":"#Create a array, put into the 20 numbers to between 1 and 10.\nnp.linspace(1,10,20)","812b2261":"#To sum arrays\na = np.array([1,2,3])\nb = np.array([4,5,6])","a54ac83a":"a**2","6b741542":"np.sin(a)","823bd7bd":"c > 12","3c962f2d":"c[c>12]","b623be06":"#Element wise\na = np.array([[1,2,3],[4,5,6]])\nb = np.array([[1,2,3],[4,5,6]])\na*b","03c3480c":"#Dot product\na.dot(b.T) #b.T = b's tranpose","c9cc96f5":"#Create random matrix 2x3\nnp.random.random((2,3))","7ea8a2e6":"print(\"a : \", a)\nprint(\"Sum : \", a.sum())\nprint(\"Max : \", a.max())\nprint(\"Min : \", a.min())","9e0e514d":"print(\"Sum rows : \", a.sum(axis=0))\nprint(\"Sum columns : \", a.sum(axis=1))","47a1ac5d":"#Indexing and Slicing\na = np.array([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]])\nprint(a)\nprint(\"\\n\",a[0:2,1:4])\nprint(\"\\n\", a[-1:])","1e2daca4":"#SHAPE MANIPULATION\nb = a.ravel()\nb","9293f7a2":"b = b.reshape(5,3)\nb","b89610ce":"#ARRAY CONCAT\narray1 = np.array([ [1,2], [3,4] ])\narray2 = np.array([ [4,5], [6,7] ])\n#VERTICAL\nnp.vstack((array1, array2))","f68c953c":"#HORIZONTAL\nnp.hstack((array1, array2))","1efe2a44":"#Convert\nl = [1,2,3,4]\na = np.array(l)\na","bb04ad13":"list(a)","b78c4a84":"#Copy\na = np.array(a)\nb = a #Same address a and b\nb","0e26b694":"a[0] = 5\nb","ed27ce06":"c = a.copy() # New address for c\nc","f3949718":"a[0] = 1\nc","84626e15":"#Creating a series\nmy_series = pd.Series([1,3,'string', 'f', 7.1, 10])\nmy_series","a277a46e":"#Reaching values, index and rows\nprint(\"First 3 values : \", my_series[0:2].values)\nprint(\"Last 2 rows :\")\nmy_series[-2:]","a67aa622":"#Changing index names.\nindexes = [3, \"foo\", 5, \"float\", 1, 10]\nmy_series.index = indexes\nmy_series","c4a8643a":"#Getting the value with index name.\nmy_series[\"foo\"]","c3df02c4":"#A dictionary can be put into  to series.\ndictionary = {\"Alice\":25, \"Bob\" : 15, \"Clarke\": 19}\nnew_series= pd.Series(dictionary)\nnew_series","a7e0c158":"#Comprehension : new_series > 18 is return true or false\nnew_series[new_series>18]","105987bd":"#One another way to create series.\nindexes = [\"str\", \"float\", \"int\"]\nnew_series = pd.Series([20,30,40], index=indexes)\nnew_series","16eff63a":"dic1= { \"Name\":[\"alice\",\"bob\",\"clarke\", \"steve\",\"eva\", \"jason\"],\n        \"Ages\":[15,16,20,23,13,18],\n        \"Salary\":[100,232, 300, 50, 140,500] }\n#Creating a dataframe\ndt= pd.DataFrame(dic1)\ndt","17270cb7":"for i in dt.index:\n    print(i)","063b9881":"#Read Data from csv file\ndata = pd.read_csv(\"..\/input\/Iris.csv\")\n\ndata.info()","9c7e0de9":"#Show columns names\ndata.columns","579193c1":"#Show first 7 rows\ndata.head(7)\n#Show last 5 rows\n#data.tail()","2706501d":"#If numbers are defined as a string, we can change them to numeric\ndata.SepalLengthCm = pd.to_numeric(data.SepalLengthCm, errors='coerce')","337f6f6f":"##If there is a null its values returns True\ndata.isnull().head()","38318261":"#If there is a null its values returns False\ndata.notnull().head(5)","353e6107":"#It shows is there any nan values in the columns\ndata.notnull().all()","7018876d":"#It drops nan values\ndata.SepalLengthCm.dropna(inplace = True) ","9ebb248f":"#It fills nan values with 0\ndata.SepalLengthCm.fillna(0, inplace = True)","9fc16b17":"data.head()","f8ee0f1a":"#Get a column as a series\ndata[\"SepalLengthCm\"].head()","e16a9fb3":"#Get a column as a dataframe\ndata[[\"SepalLengthCm\"]].head()","9b82c5bb":"#Get columns\ndata[[\"SepalLengthCm\", \"PetalLengthCm\"]].head()","bdeb38c8":"#Set id column as a index.\ndata = data.set_index('Id')\ndata.head()","af9a659e":"#Change labels index and columns\ndata.index.names = ['index']\ndata.head()","d19ddde9":"#Add one more index\ndata.set_index('Species', append=True).head()","b9d425fa":"#Change the index values\n#data.index = range(100,len(data.index)+100)\n#data.head()","4788fd97":"#Changing column names\ndata = data.rename(columns={'SepalLengthCm':'SLCM','SepalWidthCm':'SWCM', 'PetalLengthCm':'PLCM', 'PetalWidthCm': 'PWCM'})\ndata.columns","746f7489":"#Indexing and Slicing\ndata.loc[2:4, [\"PLCM\"]]","5bad2390":"data.loc[2:4, \"PLCM\"]","b2d9abce":"data.loc[1:5,\"PLCM\": ]","bb024d09":"data.loc[1:3 , [\"PLCM\", \"Species\"]]","efc2c950":"data.head()","605a2121":"#Applying lambda function SLCM column\ndata.SLCM = data.SLCM.apply(lambda n : n\/2)\ndata.head()","f125cb6f":"# Defining column using other columns\ndata[\"total_lengthCM\"] = data.SLCM + data.PLCM\ndata.head(3)","c979422a":"# Creating boolean series\nboolean = data.SLCM > 3.5\ndata[boolean]","597eeab3":"#Apply two filters\nfilter1 = data.SLCM > 3.5\nfilter2 = data.PLCM > 6.5\ndata[filter1 & filter2]","202f8e14":"data.describe()","2440a17d":"#CONCAT ROWS\ndata1 = data.head()\ndata2= data.tail()\nrows_concat = pd.concat([data1,data2])\nrows_concat","998e7567":"#CONCAT COLUMNS\ndata1 = data['SLCM'].head()\ndata2= data['PLCM'].head()\ncols_concat = pd.concat([data1,data2], axis=1) \ncols_concat","cea36aa6":"dic = {\"treatment\":[\"A\",\"B\",\"B\",\"A\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","76b01e6f":"#PIVOTING\ndf.pivot(index=\"gender\", columns=\"treatment\", values=[\"response\", \"age\"])","91c2441b":"df","c30e0828":"pd.melt(df, id_vars=\"treatment\", value_vars=[\"gender\",\"age\"])","11f80eda":"df","530366be":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1","320a4113":"#UNSTACKING\n# level determines indexes\ndf1.unstack(level=1)","007c1f4b":"df1.unstack(level=0)","591aa49a":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","8ed61b4d":"data.head()","e37a5097":"#Group by according to Species and calculate the mean\ndata.groupby('Species').mean()","626cf3d3":"#Groupby and sum\ndata.groupby('Species').sum()","5b723f77":"#print setosa's summed values\ndata.groupby('Species').sum().loc[\"Iris-setosa\"] #It returns series","e6a3040f":"data.groupby('Species').sum().loc[[\"Iris-setosa\"]] #It returns dataframe","a076e5f5":"#print max SWCM, PLCM,PWCM values of versicolor\ndata.groupby('Species').max().loc[[\"Iris-versicolor\"], \"SWCM\":\"PWCM\"]","6df30148":"#print PLCM,PWCM and total_lengthCM values of 1 and 2 rows\ndata.groupby('Species').max().iloc[[1,2] , -3:]","d7bc9242":"df","d370bcaf":"df.groupby(\"treatment\")[[\"response\", \"age\"]].min()","e2ecd70c":"df.groupby([\"treatment\", \"gender\"]).mean()","8c2caa7f":"dic1= { \"Name\":[\"alice\",\"bob\",\"clarke\", \"steve\",\"eva\", \"jason\"],\n        \"Ages\":[25,36,40,44,33,28],\n        \"Salary\":[100,232, 300, 50, 140,500] }\n#Creating a dataframe\ndt1= pd.DataFrame(dic1)\ndt1","33d53e3a":"dic2= { \"Name\":[\"eva\", \"clarke\", \"bob\", \"steve\", \"jason\", \"alice\"],\n         \"Experience\" : [4, 2, 5, 10, 2, 3 ] }\n#Creating a dataframe\ndt2= pd.DataFrame(dic2)\ndt2","4d79808e":"#Merging 2 dataframes according to names\ndt = pd.merge(dt1, dt2)\ndt","a852b230":"**--END--**","5fe66517":"<a id=\"13\"><\/a>\n**8. PIVOTING**","5e2e769d":"**[Python Basics](#1)**\n1. [List, Tuple, Dictionary](#2)\n2. [For Loop,  lambda and anonymous function, zip,  list compreherension](#3)\n3. [Numpy Array, Pandas Series](#4)\n    \n\n**[Working with Dataframes](#5)**\n1.  [Pandas Dataframes](#6)\n2.  [Read Data(info, columns, head...)](#7)\n3.  [Regulating Data (NaN values, String values to Numeric)](#8)\n4.  [Indexing & Slicing (Reach and change index names, values; getting column names and values..)](#9)\n5.  [Filtering and Transforming (Lambda, Defining column, Creating boolen series, filters )](#10)\n6.  [Data Analysis (describe: max, min, Q, IQR, std...)](#11)\n7.  [Concatenating](#12)\n8.  [Pivoting (Reshaping dataframes)](#13)\n9.  [Melting (Reshaping dataframes)](#14)\n10. [Stacking and Unstacking (Reshaping dataframes)](#15)\n11. [Groupby (basic functions: sum(), min(), max(), mean())](#16)\n11. [Merging](#17)\n     ","d7d1d09b":"**2.2. LAMBDA AND ANONYMOUS FUNTION**\n\nLike writing a function in a short way.","6648cd56":"<a id=\"14\"><\/a>\n**9.MELTING**\n\nReverse of pivoting","f93fe7db":"<a id=\"6\"><\/a>\n**1.PANDAS DATAFRAMES**","8e0c6f45":"<a id=\"3\"><\/a>\n**2.1. FOR LOOP**","ce0dea88":"<a id=\"10\"><\/a>\n**5.FILTERING & TRANSFORMING**","bc36ef3c":"<a id=\"7\"><\/a>\n**2.READ DATA**","47d28ef3":"<a id=\"5\"><\/a>\n# WORKING WITH DATAFRAMES","c0d08b8a":"<a id=\"12\"><\/a>\n**7. CONCATENATING**","c4683ddb":"**1.3. DICTIONARY**","0bc94450":"<a id=\"8\"><\/a>\n**3. REGULATING DATA**","c263dfc1":"<a id=\"1\"><\/a>\n# PYTHON BASICS","ff4dba78":"<a id=\"4\"><\/a>\n**3.1. NUMPY ARRAY** ","c6ffa7e6":"<a id=\"16\"><\/a>\n**11.GROUPBY**","f7cd64b0":"**2.4. LIST COMPREHENSION**","dbd0ed08":"**3.2. PANDAS SERIES**\n\n    Understanding of series is important because it will be needed while working with dataframes. \n    Series is similar to one-dimensional labeled array.  \n    It consist of indexes and their corresponding values.","e45f0143":"<a id=\"17\"><\/a>\n**11.MERGE**","9e07c23b":"**2.3. ZIP**\n\nIt's like mapping two list. L\u0131st of tuples.","e9859660":"<a id=\"11\"><\/a>\n**6.DATA ANALYSIS**\n\n    -count: number of entries\n    -mean: average of entries\n    -std: standart deviation\n    -min: minimum entry\n    -25%: first quantile (Q1)\n    -50%: median or second quantile\n    -75%: third quantile (Q3)\n    -max: maximum entry\n    \n    And IQR = (Q3-Q1)\n    If there is a data smaller than Q1 - 1.5(IQR) or bigger than Q3 + 1.5(IQR), we can drop them. Those datas are irrelevant.","f7702474":"<a id=\"15\"><\/a>\n**10. STACKING AND UNSTACKING**\n\nIt reshapes dataframes.","1fd16d7c":"**1.2. TUPLE**\n\nTuple has less attributes than compared to list.","7fc17403":"<a id=\"9\"><\/a>\n**4.INDEXING & SLICING**","abe8e9c2":"<a id=\"2\"><\/a>\n**1.1. LIST**"}}