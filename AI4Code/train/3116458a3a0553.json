{"cell_type":{"1c51230e":"code","38df5e0f":"code","fbe2b667":"code","332c7755":"code","7fc1103b":"code","fe3af963":"code","504f33fa":"code","5b9b8249":"code","41e8d6c3":"code","be9b277b":"code","19d53c19":"code","d59b7807":"code","9c244588":"code","dc94a215":"markdown","73e28467":"markdown","70bdc332":"markdown","804ec6f6":"markdown","17bdf8a8":"markdown","f7e2f6c0":"markdown","195bac11":"markdown"},"source":{"1c51230e":"from transformers import LongformerTokenizerFast","38df5e0f":"! pip3 install autocorrect -qq\nfrom autocorrect import Speller","fbe2b667":"# examples from https:\/\/www.kaggle.com\/c\/feedback-prize-2021\/discussion\/300620\nmisspellings = [\"conclution\",\n                \"conculsion\",\n                \"coclusion\",\n                \"conclucion\"]\n\nspell = Speller(lang='en')\nfor misspelling in misspellings:\n    print('Before: ',misspelling,'\\t' ,'After:', spell(misspelling))","332c7755":"# load a file from testdata as list\ntokenize = False\nf = open('..\/input\/feedback-prize-2021\/test\/0FB0700DAF44.txt', 'r', encoding='UTF-8')\ndata = f.read()\nif tokenize==False:\n    words = data.split(' ')\nelse:\n    tokenizer = LongformerTokenizerFast.from_pretrained('allenai\/longformer-base-4096')\n    encoding = tokenizer.tokenize(data)\n    words = []\n    for word in encoding:\n        words.append(word.replace('\u0120', ''))","7fc1103b":"# correcting misspellings using autocorrect\nfor word in words:\n    cor_word = spell(word)\n    if word != cor_word:\n        print('Before: ',word,'\\t' ,'After:', cor_word)","fe3af963":"# autocorrect can correct sentences directly\nprint(spell(data))","504f33fa":"! pip3 install pyspellchecker -qq\nfrom spellchecker import SpellChecker","5b9b8249":"spell = SpellChecker()\n\nmisspelled = spell.unknown(misspellings)\n\nfor misspelling in misspellings:\n    print('Before: ',misspelling,'\\t','After:', spell.correction(misspelling))","41e8d6c3":"for word in words:\n    cor_word = spell.correction(word)\n    if word != cor_word:\n        print('Before: ',word,'\\t' ,'After:', cor_word)","be9b277b":"# pyspellchecker cannot correct sentences directly\n# print(spell.correction(data))","19d53c19":"! pip install -U textblob -qq\n! python -m textblob.download_corpora\nfrom textblob import TextBlob","d59b7807":"data_ = TextBlob(data)\ncor_data = str(data_.correct())\n\nif data != cor_data:\n    print(\"Before: \")\n    print(data)\n    print('')\n    print(\"After: \")\n    print(cor_data)","9c244588":"cor_words = cor_data.split(' ')\n\nfor word, cor_word in zip(words, cor_words):\n    if word != cor_word:\n        print('Before: ',word,'\\t','After:', cor_word)","dc94a215":"# autocorrect","73e28467":"**Most of words are appropriately corrected, but some words are incorrect.**","70bdc332":"# pyspellchecker","804ec6f6":"I reffered https:\/\/qiita.com\/seigot\/items\/3b29b4d03297c4275bb1\n\nAfter reading the discussion, I decided to try to correct the spelling mistakes.\nThe disucssion is here, https:\/\/www.kaggle.com\/c\/feedback-prize-2021\/discussion\/300620","17bdf8a8":"**Some of the words are corrected appropriately, but many of them are converted to other wrong words.**","f7e2f6c0":"# text blob library","195bac11":"**If the words have periods or commas, they will be recognized as misspellings, but if you tokenize it and then collect it, there may be no problem.**"}}