{"cell_type":{"de2414b0":"code","f3abd86a":"code","d1496192":"code","97732313":"code","452ba9cb":"code","5b692a50":"code","425acd11":"code","af9df29b":"code","49f94eb4":"code","7209d4e6":"code","30b29ffa":"code","2ffec1c5":"code","562f0df0":"code","026763f1":"code","1005ef88":"code","ab5996f6":"code","9157f23f":"code","fef1f3b4":"code","8909aa69":"code","4cc81b6e":"code","ef1fa4ec":"code","041e1b8e":"code","9435d245":"code","3352c1b6":"code","8a7cd0b0":"code","a819dd8d":"code","abfbac45":"code","54a32f41":"code","f432e275":"code","357e1eed":"code","f23bae33":"code","8ccee591":"code","7a76a25f":"code","58387d20":"code","f874df81":"code","7266b957":"code","7e9d26b2":"code","446a3a5e":"code","1b4015f5":"code","b26ecad1":"code","1e508bb8":"code","2fd26d93":"code","795b49ba":"code","6226c719":"code","aaea4d5e":"code","7cc45daa":"code","2dc08e6f":"code","b3fafa4f":"code","83f1fdf6":"code","2c7caa1c":"code","07fc74fc":"code","230e866f":"code","5ad15754":"markdown","a2873c9e":"markdown","a058549f":"markdown","53bd5fd7":"markdown","69334b56":"markdown","078ac369":"markdown","fc9c5ba0":"markdown","7189f5d3":"markdown","8b57e861":"markdown","b72746cc":"markdown","3df5c969":"markdown","bce51e5f":"markdown","49b0c510":"markdown","3a38882f":"markdown","94b4b8b7":"markdown","c3cf0aa9":"markdown","590becbd":"markdown","dc14c428":"markdown","cd2bd287":"markdown"},"source":{"de2414b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f3abd86a":"#import dependencies \n%matplotlib inline\n\n#python imports\nimport math\nimport time\nimport random\nimport datetime\n\n\n#data manipilation\nimport numpy as np\nimport pandas as pd\n\n#Visualisation\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\n\nplt.style.use('seaborn-whitegrid')\n\n","d1496192":"#import train,test and gender submission data in notebook\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","97732313":"#view traing data\ntrain.head()","452ba9cb":"#view test data\ntest.head()","5b692a50":"#view gender submission\ngender_submission.head()","425acd11":"#plot graphic of missing values\nmissingno.matrix(train,figsize =(30,10))","af9df29b":"#calulualte no of missing values \ndef find_missing_values(df,columns):\n    missing_vals= {}\n    print(\"no of missing and Nan values \")\n    df_length=len(df)\n    for column in columns:\n        total_column_values=df[column].value_counts().sum()\n        missing_vals[column]=df_length - total_column_values\n    return  missing_vals\n\nmissing_values=find_missing_values(train, columns=train.columns)\nmissing_values","49f94eb4":"df_bin = pd.DataFrame() #for discrete continuous variables\ndf_con = pd.DataFrame() #for continuous variables","7209d4e6":"#how many people survived?\nfig= plt.figure(figsize=(20,2))\nsns.countplot(y='Survived',data=train)\nprint(train.Survived.value_counts())","30b29ffa":"df_bin['Survived']=train['Survived']\ndf_con['Survived']=train['Survived']","2ffec1c5":"df_bin.head()","562f0df0":"\nfigp=plt.figure(figsize=(20,2))\nsns.countplot(y='Pclass',data=train)\nprint(train.Pclass.value_counts())","026763f1":"sns.distplot(train.Pclass)","1005ef88":"df_bin['Pclass']=train['Pclass']\ndf_con['Pclass']=train['Pclass']","ab5996f6":"df_con.head()","9157f23f":"#Check how many dupplicate names are there in dataset\ntrain.Name.value_counts()","fef1f3b4":"#sex of the passenger male or female\nplt.figure(figsize=(20,2))\nsns.countplot(y='Sex',data=train)  ","8909aa69":"#check missing values for sex \nmissing_values['Sex']","4cc81b6e":"#add sex to subset dataframe\ndf_bin['Sex']=train['Sex']\n\ndf_bin['Sex']=np.where(df_bin['Sex']== 'female', 1, 0)\n\ndf_con['Sex']=train['Sex']\n\n\n#how Sex variable look compared to surviaval \nfig=plt.figure(figsize=(10,10))\nsns.distplot(df_bin.loc[df_bin['Survived'] == 1]['Sex'], kde_kws={'label':'Survived'},kde=0)\nsns.distplot(df_bin.loc[df_bin['Survived'] == 0]['Sex'], kde_kws={'label':'Did not Survived'},kde=0)\n\n","ef1fa4ec":"#how many missing values of Age have?\nmissing_values['Age']","041e1b8e":"missing_values['SibSp']","9435d245":"(train['SibSp']).value_counts()","3352c1b6":"df_bin['SibSp']=train['SibSp']\ndf_con['SibSp']=train['SibSp']","8a7cd0b0":"#function to plot distribution and count plot of labeled variables and target variable \ndef plot_dist_or_count(data,bin_df,label_column,target_column,figsize=(20,5),use_bin_df=False):\n    if use_bin_df:\n        fig=plt.figure(figsize=figsize)\n        plt.subplot(1,2,1)\n        sns.countplot(y=target_column,data=bin_df)\n        plt.subplot(1,2,2)\n        sns.distplot(data.loc[data[label_column] ==1 ][target_column],kde=0,kde_kws={'label':'Survived'})\n        sns.distplot(data.loc[data[label_column] == 0][target_column],kde=0,kde_kws={'label':'Did not Survived'})\n    else:\n        fig=plt.figure(figsize=figsize)\n        plt.subplot(1,2,1)\n        sns.countplot(y=target_column,data=data)\n        plt.subplot(1,2,2)\n        sns.distplot(data.loc[data[label_column] ==1 ][target_column],kde=0,kde_kws={'label':'Survived'})\n        sns.distplot(data.loc[data[label_column] == 0][target_column],kde=0,kde_kws={'label':'Did not Survived'})\n        ","a819dd8d":"#lets visualize the count of siblings and spouse with survived category\nplot_dist_or_count(train,bin_df=df_bin,label_column='Survived',target_column='SibSp',figsize=(20,10))","abfbac45":"#lets calculate missing values in Parch\nmissing_values['Parch']","54a32f41":"#lets pass them to our testing data frames\ndf_bin['Parch']=train['Parch']\ndf_con['Parch']=train['Parch']","f432e275":"#lets visualize the count of parents and childern with survived category\nplot_dist_or_count(train,bin_df=df_bin,label_column='Survived',target_column='Parch',figsize=(20,10))","357e1eed":"#how many missing values ticket column have\nmissing_values['Ticket']","f23bae33":"train.Ticket.value_counts()[:20]","8ccee591":"#lets plot a count plot of ticket \nsns.countplot(y='Ticket',data=train)","7a76a25f":"#how much ticket cost its a fare \n#lets calculate missing values in fare\nmissing_values['Fare']","58387d20":"sns.countplot(y='Fare',data=train)","f874df81":"#cost fare categories with count \ntrain.Fare.value_counts()","7266b957":"#lets find unique no of fares\nprint(\"there are {} unique fare values \".format(len(train.Fare.unique())))","7e9d26b2":"#lets do grouping for fare in our test data frames\ndf_con['Fare']=train['Fare']\ndf_bin['Fare']=pd.cut(train['Fare'],bins=5) # for discrete distribution we divide it in 5 classes\ndf_bin.head()","446a3a5e":"#lets visualize fare distribution with survived ones.\nplot_dist_or_count(train,bin_df=df_bin,label_column='Survived',target_column='Fare',figsize=(20,10),use_bin_df=True)","1b4015f5":"#lets see missing values from embarked\nmissing_values['Embarked']","b26ecad1":"train.Embarked.value_counts()","1e508bb8":"sns.countplot(y='Embarked',data=train)","2fd26d93":"#lets add to our testing data set\ndf_bin['Embarked']=train['Embarked']\ndf_con['Embarked']=train['Embarked']","795b49ba":"#drop  missing values \ndf_bin=df_bin.dropna(subset=['Embarked'])\ndf_con=df_con.dropna(subset=['Embarked'])\nprint(len(df_con))\n","6226c719":"df_bin.head()","aaea4d5e":"df_con.head()","7cc45daa":"train.head()","2dc08e6f":"test.head()","b3fafa4f":"#les compute features for prediction and classificaton of dataset\nfeatures = ['Pclass','Sex','SibSp','Parch','Embarked']\n\ny=train['Survived']\n\nX=pd.get_dummies(train[features])\nX_test = pd.get_dummies(test[features])\n","83f1fdf6":"from sklearn.model_selection import train_test_split\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","2c7caa1c":"from sklearn.ensemble import RandomForestClassifier\n\n\n# Define the models\nmodel_1 = RandomForestClassifier(n_estimators=50, random_state=0)\nmodel_2 = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel_3 = RandomForestClassifier(n_estimators=100,criterion='gini', random_state=0)\nmodel_4 = RandomForestClassifier(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_5 = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=0)\n\nmodels = [model_1,model_2,model_3,model_4,model_5]\n\n\n","07fc74fc":"from sklearn.metrics import mean_absolute_error\n\n# Function for comparing different models\ndef score_model(model, X_t=X_train, X_v=X_valid, y_t=y_train, y_v=y_valid):\n    model.fit(X_t, y_t)\n    preds = model.predict(X_v)\n    return mean_absolute_error(y_v, preds)\n\nfor i in range(0, len(models)):\n    mae = score_model(models[i])\n    print(\"Model %d MAE: %d\" % (i+1,mae))","230e866f":"my_model = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=0) \nmy_model.fit(X, y)\n\n# Generate test predictions\npreds_test = my_model.predict(X_test)\n# Save predictions in format used for competition scoring\noutput = pd.DataFrame({'PassengerId': test.PassengerId,\n                       'Survived': preds_test})\noutput.to_csv('submission.csv', index=False)\n","5ad15754":"Lets add this to our subset dataframe","a2873c9e":"# To perform data analysis lets create two new data frames","a058549f":"# Feature :- No of parents and childern on tiatanic","53bd5fd7":"# Feature :- Age","69334b56":"Since all names have count \"1\" so there are no duplicates names in dataset","078ac369":"# Feature:- No of siblings and spouse","fc9c5ba0":"out off 891 records almost 1 quarter contain missing values","7189f5d3":"# Feature :- Name","8b57e861":"conclusion :- Not many people survived but of those who did are females","b72746cc":"**White line column contain mising values Here 'Age' ,'Embarked 'and 'Cabinate' contain values**","3df5c969":"# Feature :- ticket","bce51e5f":"# Feature : Embarked","49b0c510":"Lets plot dist plot\n\nWe look at distribution of each features to understand what kind of performance is across dataset\nIf there are values which are completely outside the variables we may not include in our submission data set","3a38882f":"# Feature :- Sex","94b4b8b7":"# Feature :- Fare","c3cf0aa9":"# Ticket class of passengers \n**Key 1 = 1st ,2 = 2nd ,3 = 3rd**","590becbd":"Target feature \"Survived\"\nKeys = 0 :- not survived\n       1 :- survived ","dc14c428":"Since there are no missing values in passenger clas lets add it to our dataset","cd2bd287":"Lets add these values to our testing data frame"}}