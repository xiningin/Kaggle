{"cell_type":{"69275c08":"code","c2366dc1":"code","bbd9a9fe":"code","be0313e2":"code","8fed9941":"code","0ac255c9":"code","d2905e7e":"code","3613b7bc":"code","d962d7ff":"code","402e9218":"code","fbef3a2f":"code","f613b81e":"code","b0deccea":"code","fc547fe5":"code","f1dbdad8":"code","d2aad37e":"markdown"},"source":{"69275c08":"# Imports\n\nimport numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split","c2366dc1":"# Reading in data\n\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\")\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\ntrain.head()","bbd9a9fe":"# Viewing the shape\n\ntrain.shape","be0313e2":"# Viewing the distribution of target values\n\ntrain['target'].value_counts()","8fed9941":"# Getting the features column names\n\nfeatures = [col for col in train.columns if col not in ['id', 'target']]","0ac255c9":"# Splitting the data into train and validation\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    train[features], \n    train['target'], \n    test_size=0.3, \n    random_state=0\n)\nX_train.shape","d2905e7e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_valid = scaler.transform(X_valid)","3613b7bc":"# Creating the model\n\ntf.keras.backend.clear_session()\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(\n        256, \n        input_shape=(None,100),  \n        activation=\"selu\", \n        kernel_initializer='lecun_normal',\n    ),\n    tf.keras.layers.Dense(\n        128, \n        activation=\"selu\",\n        kernel_initializer='lecun_normal',\n    ),\n    tf.keras.layers.Dense(\n        128, \n        activation=\"selu\",\n        kernel_initializer='lecun_normal',\n    ),\n    tf.keras.layers.Dense(\n        64, \n        activation=\"selu\",\n        kernel_initializer='lecun_normal'\n    ),\n    tf.keras.layers.Dense(\n        32, \n        activation=\"selu\",\n        kernel_initializer='lecun_normal'\n    ),\n    tf.keras.layers.Dense(1, activation='sigmoid'),\n])","d962d7ff":"# Compiling the model\n\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate=1e-3,\n    decay_steps=10000,\n    decay_rate=0.9)\n\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=lr_schedule),\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(), 'acc']\n)","402e9218":"# Viewing the model\n\nmodel.summary()","fbef3a2f":"# # Creating a learning rate scheduler\n\n# def scheduler(epoch, lr):\n#     if epoch < epoch\/1.5:\n#         return lr\n#     else:\n#         return lr * tf.math.exp(-0.1)\n\n# lr_cb = tf.keras.callbacks.LearningRateScheduler(scheduler)","f613b81e":"# Creating early stopping\n\nes_cb = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)","b0deccea":"# Fitting the model\n\nmodel.fit(\n    X_train,\n    y_train,\n    validation_data=(X_valid, y_valid),\n    epochs=50,\n    callbacks=[es_cb]\n)","fc547fe5":"# Predicting the on test set\ntest = scaler.transform(test[features])\npreds = model.predict(test)","f1dbdad8":"# Submitting the predictions\n\nsample_submissions = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\nsample_submissions['target'] = preds[:,-1]\nsample_submissions.to_csv(\"submission.csv\", index=False)\nsample_submissions.head()","d2aad37e":"# Quick Dirty Model with TensorFLow"}}