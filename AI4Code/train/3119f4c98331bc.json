{"cell_type":{"b129416b":"code","88a50b2b":"code","67b0d767":"code","f5d2deb5":"code","e10bbdd8":"code","d54be4e8":"code","9a4f238f":"code","6de4287d":"code","9035a522":"code","b5c521e5":"code","39440bea":"code","67555b1e":"code","74f7c77a":"code","9cb4c260":"code","7f71b729":"code","0b775236":"code","c7f088af":"code","7da5892d":"code","6bf2c193":"code","e70819c4":"code","7451b834":"code","a91cc972":"code","7fb82a62":"code","cef680a2":"code","d9c30748":"code","df9fe2dc":"code","2ec146bc":"code","95339311":"code","74e0520c":"code","74af7033":"code","16f6c1f3":"code","3044fa33":"code","d5f89a31":"code","fc90b2bb":"code","447728dd":"markdown","e87bf70e":"markdown","e76224cb":"markdown","37df9f7e":"markdown","4918537c":"markdown","bb4e4432":"markdown","b86bdc64":"markdown","ea08fe53":"markdown","249540a5":"markdown","466017dd":"markdown","3e32b4db":"markdown","fd0f2d67":"markdown","af4cb8d4":"markdown","51f7fa19":"markdown","87838ea5":"markdown","879500f1":"markdown","8d22814c":"markdown","d02b7465":"markdown","ddb9f067":"markdown","31b29856":"markdown","e8cb0f84":"markdown","cda94613":"markdown","3bd9e4ff":"markdown","848f3215":"markdown","8fa13eb2":"markdown","31b72244":"markdown","97ca3644":"markdown","46e66e15":"markdown","e1d54a4b":"markdown","d1d7cf32":"markdown","80132828":"markdown","ed43f592":"markdown","95b413dc":"markdown","3e6684c6":"markdown","8e728202":"markdown","a8a4c0f0":"markdown","6a701de1":"markdown","71cf1ece":"markdown","2f2c353b":"markdown"},"source":{"b129416b":"import os\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\nimport pandas as pd \npd.options.mode.chained_assignment = None  # default='warn'\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","88a50b2b":"drugs_df = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')\n\nprint(drugs_df.head(10))","67b0d767":"# Display column names\nprint(drugs_df.columns)","f5d2deb5":"print(drugs_df.info())","e10bbdd8":"print(drugs_df.describe())","d54be4e8":"# Generic function to calculate missing values, zero values\ndef calcMissingValues(df: pd.DataFrame):\n    '''\n    Function to calculate zero,missing and empty values in the dataframe\n    \n    '''\n    # Calculate zero values\n    zero_values = (df == 0.0).astype(int).sum(axis = 0)\n    \n    # Calculate missing values\n    missing_vals = df.isnull().sum()\n    \n    missing_val_percent = round((missing_vals \/ len(df)) * 100.0 , 2)\n    \n    df_missing_stat = pd.concat([zero_values , missing_vals , missing_val_percent] , axis = 1)\n    \n    df_missing_stat = df_missing_stat.rename(columns = {0: 'zero_values' , 1: 'missing_vals' , 2: '%_missing_vals'})\n    \n    df_missing_stat['data_types'] = df.dtypes\n    \n    print(df_missing_stat)\n    \n    \n    ","9a4f238f":"calcMissingValues(drugs_df)","6de4287d":"# Visualize age and drug type using strip plot\nplt.figure(figsize = (10 , 6))\n# Plotting a swarmplot to get a distribution of categorical and numerical variables\nsns.stripplot(x = 'Drug' , y = 'Age' , data = drugs_df)\nplt.title('Distribution of Age & Drug')\nplt.show()\n\n","9035a522":"# Visualize age and drug type using Box plot\nplt.figure(figsize = (20 , 10))\nprops = dict(boxes = \"orange\", whiskers=\"black\", medians= \"green\", caps =\"Gray\")\ndrugs_df.boxplot(by = 'Drug' , column = ['Age'] , figsize = (10 , 8) , color = props)\nplt.title('Distribution of Age & Drug')\nplt.tight_layout()\nplt.show()","b5c521e5":"# Get unique class values\nprint(drugs_df['Drug'].unique())\n\n# Plot a bar chart of the various classes\ndrugs_df['Drug'].value_counts().plot(kind = 'bar' , x = 'Drug Type' , y = 'Drug Type Count' , color = 'yellow' , figsize = (10 , 8))\nplt.title('Drug Type Distribution')\nplt.show()","39440bea":"print(drugs_df.groupby(['Drug']).size())\n\ndrug_type = drugs_df.groupby(['Drug']).size()\n\nsizes = list(drugs_df.groupby(['Drug']).size())\n\nlabels = ['Bachelors' , 'Below Secondary', 'Masters']\n\npie_chart_drug = {'labels': list(drug_type.index.values) , 'vals': sizes}\n\n\n# print(drug_type.index.values)\n# print(sizes)\n\ncolors = ['#b79c4f', '#4fb772', '#eb7d26' , '#77e8c2' , '#99eff2']\n\n#print(pie_chart_drug)\n# colors = ['#ff9999','#1f70f0','#99ff99']\npie_explode = [0 , 0 , 0.3 , 0 , 0]\n\nplt.figure(figsize = (10 , 8))\nplt.pie(pie_chart_drug['vals'] , labels = pie_chart_drug['labels'] , explode = pie_explode , colors = colors , shadow = True, startangle = 90 , textprops={'fontsize': 14} , autopct = '%.1f%%')\nplt.ylabel('')\nplt.title('Drug Type distribution in the data' , fontsize = 20)\nplt.tight_layout()\nplt.show()","67555b1e":"gender_drug = drugs_df.groupby(['Sex' , 'Drug']).size().reset_index(name = 'value_count')\n\ngender_drug_pivot = pd.pivot_table(\n    gender_drug, \n    values = 'value_count',\n    index = 'Drug',\n    columns = 'Sex'\n)\n\n\ngender_drug_pivot.plot(kind = 'bar' , figsize = (10 , 8) , fontsize = 12 , rot = 360)\nplt.xlabel('Drug Type', fontsize = 14)\nplt.ylabel('Value' , fontsize = 14)\nplt.title('Gender vs Drug Type', fontsize = 16)\nplt.tight_layout()\nplt.show()","74f7c77a":"print(drugs_df.groupby(['Drug']).mean())\n\nprint(drugs_df['BP'].unique())\n\nprint(drugs_df.groupby(['BP']).mean())\n\nbp_drug = drugs_df.groupby(['BP' , 'Drug']).size().reset_index(name = 'value_count')\n\nprint(bp_drug)\n\ngender_drug_pivot = pd.pivot_table(\n    gender_drug, \n    values = 'value_count',\n    index = 'Drug',\n    columns = 'Sex'\n)\n\n\nbp_drug_pivot = pd.pivot_table(bp_drug , values = 'value_count' , columns = 'BP' , index = 'Drug')\n\n\nbp_drug_pivot.plot(kind = 'bar' , figsize = (10 , 8) , fontsize = 12 , rot = 360)\nplt.xlabel('Drug Type', fontsize = 14)\nplt.ylabel('Value' , fontsize = 14)\nplt.title('BP vs Drug Type', fontsize = 16)\nplt.tight_layout()\nplt.show()\n","9cb4c260":"print(drugs_df[['Na_to_K' , 'Drug']])\n\ndrug_na_k = drugs_df.groupby(['Drug'])['Na_to_K'].mean()\n\nprint(drug_na_k)\n\ndrug_na_k.plot(kind = 'bar' , color = 'red' , alpha = 0.5 , rot = 360 , fontsize = 14 , figsize = (10 , 8))\nplt.xlabel('Drug Type' , fontsize = 15)\nplt.ylabel('Na_to_K Avg' , fontsize = 15)\nplt.title('Distirbution of Drug type under Na_to_K' , fontsize = 15)\nplt.tight_layout()\nplt.show()","7f71b729":"# Visualize Na_to_K and drug type using strip plot\nplt.figure(figsize = (10 , 6))\n# Plotting a swarmplot to get a distribution of categorical and numerical variables\nsns.stripplot(x = 'Drug' , y = 'Na_to_K' , data = drugs_df)\nplt.xlabel('Drug Type' , fontsize = 12)\nplt.ylabel('Na_to_K Avg' , fontsize = 12)\nplt.title('Distribution of Na_to_K & Drug')\nplt.show()\n","0b775236":"# Get all non-numerical columns\nprint(drugs_df.select_dtypes(exclude=[\"number\",\"bool_\"]))","c7f088af":"from sklearn.preprocessing import LabelEncoder\n\nlabelEncoder = LabelEncoder()","7da5892d":"# Make a copy of the dataset\ndrugs_train_df = drugs_df.copy()\n","6bf2c193":"drugs_train_df['Sex'] = labelEncoder.fit_transform(drugs_train_df['Sex'])\nprint(drugs_train_df.loc[0 : 5, 'Sex'])\nprint(drugs_df.loc[0 : 5, 'Sex'])","e70819c4":"# Get the unique values\nprint('BP: ', drugs_train_df['BP'].unique())\nprint('Cholesterol: ', drugs_train_df['Cholesterol'].unique())","7451b834":"# Define a map function\nord_dict = {'LOW': 1 , 'NORMAL' : 2, 'HIGH' : 3}\n#chol_dict = {}\ndrugs_train_df['BP'] = drugs_train_df['BP'].map(ord_dict)\ndrugs_train_df['Cholesterol'] = drugs_train_df['Cholesterol'].map(ord_dict)","a91cc972":"print('BP: ', drugs_train_df['BP'].unique())\nprint('Cholesterol: ', drugs_train_df['Cholesterol'].unique())","7fb82a62":"print(drugs_train_df)","cef680a2":"# Number of records\nprint(drugs_train_df.shape)","d9c30748":"def splitDataset(x_df: pd.DataFrame , y_df: pd.DataFrame)-> (pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame):\n        \n        '''\n        Function to split a dataset into Train and test sets\n        \n        '''\n        \n        ratio = 0.8\n        \n        mask = np.random.rand(len(x_df)) <= ratio\n        \n        x_train = x_df[mask]\n        x_test = x_df[~mask]\n        \n        y_train = y_df[mask]\n        y_test = y_df[~mask]\n        \n        \n        return x_train, y_train, x_test, y_test\n        ","df9fe2dc":"np.random.seed(123)\n\ny_df = drugs_train_df['Drug']\nx_df = drugs_train_df.drop(['Drug'] , axis = 1)\n\nx_train, y_train, x_test, y_test = splitDataset(x_df , y_df)\n\nprint('X Train Shape: ', x_train.shape)\nprint('X Test Shape: ', x_test.shape)\nprint('Y Train Shape: ', y_train.shape)\nprint('Y Test Shape: ', y_test.shape)","2ec146bc":"from sklearn.linear_model import LogisticRegression","95339311":"# Define the model\nlogistic_regression = LogisticRegression(solver='liblinear')\nlogistic_regression.fit(x_train , y_train)\n\ny_pred = logistic_regression.predict(x_test)","74e0520c":"# Get scores\ntrain_score = logistic_regression.score(x_train , y_train)\ntest_score = logistic_regression.score(x_test , y_test)","74af7033":"print('Train score: {:.2f}'.format(train_score))\nprint('Test score: {:.2f}'.format(test_score))","16f6c1f3":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score , precision_score , recall_score , f1_score\nfrom sklearn.metrics import classification_report","3044fa33":"conf_matrix = confusion_matrix(y_test , y_pred)\n\n# print(conf_matrix)\n\nplt.figure(figsize = (10, 8))\nsns.heatmap(conf_matrix, annot = True, fmt = \".3f\", linewidths =.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label' , fontsize = 12)\nplt.xlabel('Predicted label' , fontsize = 12)\nplt.title('Confusion Matrix' , fontsize = 15)\nplt.show()","d5f89a31":"# Classification Report\nprint(classification_report(y_test, y_pred))","fc90b2bb":"# Get accuracy score\nacc = accuracy_score(y_test , y_pred)\nprint('Accuracy: {:.2f}'.format(acc))\n\nclass_err = 1 - acc\nprint('Misclassification rate: {:.2f}'.format(class_err))","447728dd":"## Table of Contents\n\n* [Import Libraries](#lib)\n* [Load Data](#load_data)\n* [Summary Statistics](#summary_stats)\n* [Identify Missing or Null Values](#missing_values)\n* [EDA & Data Visualization](#eda_data_vis)\n* [Encoding Categorical Features](#encoding)\n* [Developing Classification Models](#model)\n* [Evaluating Classification Models](#evaluate)","e87bf70e":"**Precision, Recall and F1-Score**","e76224cb":"This dataset has more categorical features than numerical. So we may have to encode the categorical features.","37df9f7e":"<a id ='lib'><\/a>\n# Import Libraries","4918537c":"**Split into Trian and Test data**","bb4e4432":"Nothing substantial can be interpreted from plotting Gender vs Drug. There is no bias towards genders for any specific type of Drug.","b86bdc64":"<a id = 'encoding'><\/a>\n## Encoding Categorical Features","ea08fe53":"**Pie Chart**","249540a5":"The **Recall** score for the various classes are high which is a good indicator that the model is predicting a positive case when the actual value is also true. Recall tells from all the positive cases how many were predicted correctly\n\n$recall = \\frac{TP}{TP + FN} $\n\n\nPrecision tells about predicting positive classes when the result is actually positive and the scores look good.\n\n$precision = \\frac{TP}{TP + FP}$\n","466017dd":"### Ordinal Encoding\n\nColumns *BP* and *Cholesterol* are odrdinal in nature as they have an order of sorts (i.e.) LOW, NORMAL and HIGH, we can use pandas map function to ordinally encode these variables.\n\nThe following columns will be label encoded:\n* BP\n* Cholesterol","3e32b4db":"# Drug Classification\n\nIn this notebook we will be solving the problem of classifying the type of drug from the $5$ drug types given (i.e.):\n* drugX\n* drugY\n* drugC\n* drugA\n* drugB\n\nThis is a *multiclass classification* problem as we have five classes in the target to predict.\n\n\n\n<img src = \"https:\/\/images.theconversation.com\/files\/358080\/original\/file-20200915-22-1t5myba.jpg?ixlib=rb-1.1.0&q=45&auto=format&w=926&fit=clip\" width = 600 height = 200>\n\n<br>\n\n\n**Data Attributes**\n* Age\n* Sex\n* Blood Pressure Levels\n* Cholesterol Levels\n* Na to Potassium Ratio\n\n**Target Feature**\n* Drug Type\n\nRoughly, we will be following the below structure: \n\n* Load the data.\n* Display useful statistics.\n* Build generic functions to detect nulls and missing values.\n* Handle missing values.\n* Make Visualizations to understand data better.\n* Build Models","fd0f2d67":"## Visualize **BP** and **Drug**\n\nPloltting to see if there is any relation between BP and Drug type. The chart will be a gouped bar chart.","af4cb8d4":"The bar chart tells that if the average Na_to_K value exceeds15 then DrugY is preffered and so this feature also plays an important role in classification. We can view the joint distribution of variables in Stripplot.","51f7fa19":"<a id = 'summary_stats'><\/a>\n## Display summary statistics","87838ea5":"### Logistic Regression","879500f1":"<a id= \"evaluate\"><\/a>\n## Evaluating Classification Models","8d22814c":"### Visualize **Gender** and **Drug**","d02b7465":"The maximum or the oldest age give is $74$ and the youngest being $15$","ddb9f067":"The stripplot is used to visualize multiple data distributions, from the plot it looks like *DrugY* and *drugX* are more commonly prescribed or used by the populace.","31b29856":"**Bar Plot**","e8cb0f84":"Writing a Test Train split from scratch using numpy masks is a good practice and a useful trick to know.","cda94613":"**Box Plot**","3bd9e4ff":"**Confusion Matrix**","848f3215":"From the two plots we see the distribution of *drugA*, *drugB* and *drugC* is relatively lower. This may affect the prediction and based on the accuracy metrics we can use **SMOTE** to oversample classes having lower distributions. However, this requires some domain knowledge and cannot be sampled as is without any assumptions.","8fa13eb2":"As seen, the dataset is clean without any missing values to impute.","31b72244":"### Label Encoding\nWe can use label encoding for *Sex* as there is no problem of precedance or hierarchy.\nThe target feature need not be encoded as scikit-learn encodes by default if the target values are strings.\n\nThe following columns will be label encoded:\n* Sex","97ca3644":"The misclassification rate is quite low and this makes the model a decent predictor of different drug types. We can also improve the model performance by performing Hyperparameter tuning using GridSearchCV, but that will be useful on a bigger dataset with more features. Using other classifier models will be suprfluous for this dataset with limited features and can be attempted easily as an exercise.","46e66e15":"<a id = 'missing_values'><\/a>\n# Investigating Missing Values","e1d54a4b":"Now the data does not lose its meaning since we have done ordinal encoding of the key feature columns.","d1d7cf32":"#### Visualize **Age** versus **Drug Type**\n* Stripplot\n* Boxplot","80132828":"<a id ='load_data'><\/a>\n# Load Data","ed43f592":"## Visualize **Na_to_K** and **Drug**","95b413dc":"This confirms our assumption that *DrugY* and *drugX* are most commonly used","3e6684c6":"### Visualize target variable **Drug**\n\nWe now visualize the distribution of the target variable to see if there are any imbalances in class distribution as this is a multiclass classification and any imbalances might affect the outcome.\n\nThere will be two plots:\n* Bar plot\n* Pie Chart","8e728202":"**Classification Error or Misclassification Rate**\n\nThis tells overall how often the classification is incorrect.\n\n$accuracy = \\frac{TP + TN}{TP + TN + FP + FN}$\n\n$classification{\\_}error = \\frac{FP + FN}{TP + TN + FP + FN}$\n\n$classification{\\_}error = 1 - accuracy$","a8a4c0f0":"<a id = 'model'><\/a>\n## Building Classification models","6a701de1":"<a id = 'eda_data_vis'> <\/a>\n# EDA & Data Visualization","71cf1ece":"A majority of normal BP take DrugX and those with a higher BP take predominantly DrugY with Drug A and Drug B being close contenders.","2f2c353b":"**Stripplot**"}}