{"cell_type":{"991d6095":"code","e3a61d1a":"code","56c8159a":"code","c81c9e1f":"code","612f96fc":"code","dbdb52f1":"code","e48ef163":"code","c07aa90b":"code","3a5c831d":"code","82d578d2":"code","6fc4fbfa":"code","19ee41ce":"code","077b1ee7":"code","cb00aa62":"code","168c22e0":"code","f6da210f":"code","e6d007a3":"code","bd6266f4":"code","8ac75c7e":"code","5b9378df":"code","1970607e":"code","01c98b3b":"code","7990baee":"code","84b46900":"code","b283990d":"code","3955f69a":"code","e0203230":"code","94597b1e":"code","9aaa4a1c":"code","b91b0213":"code","a4faaa1a":"code","090fb071":"code","df3b259e":"code","8ed42e71":"code","5e05fbfe":"code","4d17f801":"code","b80fea41":"code","1fe8c043":"code","833d61a8":"code","2ccdff2f":"code","8b7b2207":"code","3c06c589":"code","df076c6e":"code","aad5b0cd":"code","c4d22d67":"code","ef48a3d3":"code","2498b638":"code","81d539f5":"code","1ae2b448":"code","c6ac2474":"code","e446e0a3":"code","1abf0160":"code","85d2576c":"markdown","12feb493":"markdown","351c5232":"markdown","3eeaf851":"markdown","6598eb94":"markdown","33f8a2b0":"markdown","8f739bbc":"markdown","1fdbc470":"markdown","5e53a203":"markdown","a13285fc":"markdown","77fc20d7":"markdown","7ab9e54d":"markdown","fff94adc":"markdown"},"source":{"991d6095":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization library\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly as py\ninit_notebook_mode(connected=True) \nfrom pandas.plotting import parallel_coordinates\nimport plotly.graph_objs as go # plotly graphical object\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings            \nwarnings.filterwarnings(\"ignore\") \nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e3a61d1a":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\n\n## add new features in the dataset\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\ndf.head()","56c8159a":"df.columns","c81c9e1f":"dataset = df.loc[:,[\"type\",\"title\",\"director\",\"cast\",\"country\",\"date_added\",\"release_year\",\"duration\", \"listed_in\", \"year_added\", \"month_added\" ]]","612f96fc":"dataset.head()","dbdb52f1":"col = \"month_added\"\ngrouped = dataset[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=400, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","e48ef163":"col = \"type\"\ngrouped = dataset[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=400, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","c07aa90b":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"year_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","3a5c831d":"dataset.head()","82d578d2":"dataset.director.value_counts()","6fc4fbfa":"col = \"release_year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","19ee41ce":"col = 'month_added'\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"In which month, the conent is added the most?\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","077b1ee7":"d3 = df[df[\"director\"] == \"Ra\u00fal Campos, Jan Suter\"]\nd4 = df[df[\"director\"] == \"Marcus Raboy\"]","cb00aa62":"col = 'release_year'\nvc1 = d3[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Director : Ra\u00fal Campos, Jan Suter Published Film on Netflix 2016-2018 Years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","168c22e0":"small = dataset.sort_values(\"release_year\", ascending = False)\nsmall = small[small['duration'] != \"\"] #W Duration\nsmall[['title', \"release_year\"]][:15]","f6da210f":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['duration'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","e6d007a3":"dataset.info()","bd6266f4":"dataset.tail()","8ac75c7e":"small = dataset.sort_values(\"release_year\", ascending = True)\nsmall = small[small['duration']  == \"90\"]\nsmall[['title', \"release_year\", \"duration\"]][:5]","5b9378df":"import plotly.figure_factory as ff\nx1 = d2['duration'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x1], ['a'], bin_size=0.7, curve_type='normal', colors=[\"#6ad49b\"])\nfig.update_layout(title_text='Distplot with Normal Distribution')\nfig.show()","1970607e":"df.head()","01c98b3b":"col = 'season_count'\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Seasons\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()\n","7990baee":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\n# Yearly Tv Show publishing  Rate we can sure for 2020, 2020 best rate of publishing TV Shows\n\ncol = 'release_year'\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Seasons\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","84b46900":"col = 'release_year'\nvc1 = d2[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Movies\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","b283990d":"col = \"rating\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","3955f69a":"df.head()","e0203230":"d4 = df[df[\"country\"] == \"United States\"]\nd5 = df[df[\"country\"] == \"United Kingdom\"]\n\ncol = \"rating\"\n\nvc1 = d4[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d5[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"United States\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"United Kingdom\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating: USA and UK \", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","94597b1e":"df[df[\"type\"] == \"TV Show\"]","9aaa4a1c":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\nimport collections\ncol = \"listed_in\"\ncategories = \", \".join(d2['listed_in']).split(\", \")\ncounter_list = collections.Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"Movies\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Content added over the years for Movies \", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","b91b0213":"col = \"listed_in\"\ncategories = \", \".join(d1['listed_in']).split(\", \")\ncounter_list = collections.Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Content added over the years for TV Shows \", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","a4faaa1a":"country_codes = {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}\n\n## countries \nfrom collections import Counter\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\n    \ndef geoplot(abc):\n    country_with_code, country = {}, {}\n    shows_countries = \", \".join(abc['country'].dropna()).split(\", \")\n    for c,v in dict(Counter(shows_countries)).items():\n        code = \"\"\n        if c.lower() in country_codes:\n            code = country_codes[c.lower()]\n        country_with_code[code] = v\n        country[c] = v\n\n    data = [dict(\n            type = 'choropleth',\n            locations = list(country_with_code.keys()),\n            z = list(country_with_code.values()),\n            colorscale = [[0,\"rgb(5, 30, 172)\"],[0.65,\"rgb(40, 80, 140)\"],[0.75,\"rgb(30, 100, 245)\"],\\\n                        [0.80,\"rgb(90, 140, 235)\"],[0.9,\"rgb(120, 137, 247)\"],[1,\"rgb(120, 220, 220)\"]],\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict (\n                    color = 'gray',\n                    width = 0.5\n                ) ),\n            colorbar = dict(\n                autotick = True,\n                title = ''),\n          ) ]\n\n    layout = dict(\n        title = '',\n        geo = dict(\n            showframe = False,\n            showcoastlines = False,\n            projection = dict(\n                type = 'Mercator'\n            )\n        )\n    )\n\n    fig = dict( data=data, layout=layout )\n    iplot( fig, validate=False, filename='d3-world-map' )\n    return country\n\ncountry_vals = geoplot(df)\ntabs = Counter(country_vals).most_common(25)\n\nlabels = [_[0] for _ in tabs][::-1]\nvalues = [_[1] for _ in tabs][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Countries with most content\", height=700, legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\n","090fb071":"df.head()","df3b259e":"import matplotlib.patheffects as path_effects\nyear_data = df['year_added'].value_counts().sort_index().loc[:2019]\ntype_data = df.groupby('type')['year_added'].value_counts().sort_index().unstack().fillna(0).T.loc[:2019] # you can split movie and tv show values with by years sample: 2019:TV show 2018:movie\n\nfig, ax = plt.subplots(1,1, figsize=(28, 15))\nax.plot(year_data.index, year_data,  color=\"white\", linewidth=5, label='Total', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['Movie'], color='skyblue', linewidth=5, label='Movie', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['TV Show'], color='salmon', linewidth=5, label='TV Show', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\n\nax.set_xlim(2006, 2020)\nax.set_ylim(-40, 2700)\n\nt = [\n    2008,\n    2010.8,\n    2012.1,\n    2013.1,\n    2015.7,\n    2016.1,\n    2016.9\n]\n\nevents = [\n    \"Launch Streaming Video\\n2007.1\",\n    \"Expanding Streaming Service\\nStarting with Candata | 2010.11\",\n    \"Expanding to Europe\\n2012.1\",\n    \"First Original Content\\n2013.2\",\n    \"Expanding to Japan\\n2015.9\",\n    \"Original targeting Kids\\n2016\/1\",\n    \"Offline Playback Features to all of Users\\n2016\/11\"\n]\n\nup_down = [ \n    100,\n    110,\n    280,\n    110,\n    0,\n    0,\n    0\n]\n\nleft_right = [\n    -1,\n    -0,\n    -0,\n    -0,\n    -1,\n    -1,\n    -1.6,\n    \n]\n\nfor t_i, event_i, ud_i, lr_i in zip(t, events, up_down, left_right):\n    ax.annotate(event_i,\n                xy=(t_i + lr_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)) + ud_i),\n                xytext=(0,0), textcoords='offset points',\n                va=\"center\", ha=\"center\",\n                color=\"w\", fontsize=16,\n                bbox=dict(boxstyle='round4', pad=0.5, color='#303030', alpha=0.90))\n    \n    # A proportional expression to draw the middle of the year\n    ax.scatter(t_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)), color='#E50914', s=300)\n\nax.set_facecolor((0.4, 0.4, 0.4))\nax.set_title(\"Why Netflix's Conetents Count Soared?\", position=(0.23, 1.0+0.03), fontsize=30, fontweight='bold')\nax.yaxis.set_tick_params(labelsize=20)\nax.xaxis.set_tick_params(labelsize=20)\nplt.legend(loc='upper left', fontsize=20)\n\nplt.show()","8ed42e71":"type_data.head(2)","5e05fbfe":"year_data = df['year_added'].value_counts().sort_index().loc[:2019]\ntype_data = df.groupby('rating')['year_added'].value_counts().sort_index().unstack().fillna(0).T.loc[:2019] # you can split movie and tv show values with by years sample: 2019:TV show 2018:movie\n\nfig, ax = plt.subplots(1,1, figsize=(28, 15))\nax.plot(year_data.index, year_data,  color=\"white\", linewidth=5, label='Total', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['TV-PG'], color='skyblue', linewidth=5, label='TV-PG', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\nax.plot(type_data.index, type_data['TV-14'], color='salmon', linewidth=5, label='TV-14', path_effects=[path_effects.SimpleLineShadow(),\n                       path_effects.Normal()])\n\nax.set_xlim(2006, 2020)\nax.set_ylim(-40, 2700)\n\nt = [\n    2009,\n    2010.8,\n    2014.1,\n    2015.7,\n\n]\n\nevents = [\n    \"We dont see TV-GB or 14\",\n    \"2010-12 TV-14 little bit rise \",\n    \"still continue with investing process(guess)\",\n    \"2 TV rising\",\n\n]\n\nup_down = [ \n    100,\n    110,\n    280,\n    110,\n    0,\n    0,\n    0\n]\n\nleft_right = [\n    -1,\n    -0,\n    -0,\n    -0,\n    -1,\n    -1,\n    -1.6,\n    \n]\n\nfor t_i, event_i, ud_i, lr_i in zip(t, events, up_down, left_right):\n    ax.annotate(event_i,\n                xy=(t_i + lr_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)) + ud_i),\n                xytext=(0,0), textcoords='offset points',\n                va=\"center\", ha=\"center\",\n                color=\"w\", fontsize=16,\n                bbox=dict(boxstyle='round4', pad=0.5, color='#306030', alpha=0.90))\n    \n    # A proportional expression to draw the middle of the year\n    ax.scatter(t_i, year_data[int(t_i)] * (int(t_i+1)-t_i) + year_data[int(t_i)+1]  * (t_i-int(t_i)), color='#E50918', s=300)\n\nax.set_facecolor((0.4, 0.4, 0.4))\nax.set_title(\"2 TV Channels Rise by Year\", position=(0.23, 1.0+0.03), fontsize=30, fontweight='bold')\nax.yaxis.set_tick_params(labelsize=20)\nax.xaxis.set_tick_params(labelsize=20)\nplt.legend(loc='upper left', fontsize=20)\n\nplt.show()","4d17f801":"tag = \"International TV Shows\"\ndf[\"relevant\"] = df['listed_in'].fillna(\"\").apply(lambda x : 1 if tag.lower() in x.lower() else 0)\nsmall = df[df[\"relevant\"] == 1]\nsmall[small[\"country\"] == \"United States\"][[\"title\", \"country\",\"release_year\"]].head(10)","b80fea41":"df.head()","1fe8c043":"df2016 = df[df.release_year == 2016].iloc[:2,:] #you can see \ndf2016","833d61a8":"# prepare data frame\n\ndtimes = df.iloc[:100,:]\nstimes = dtimes.sort_values(by=['release_year'])\n\nd1 = stimes[stimes[\"type\"] == \"TV Show\"]\nd2 = stimes[stimes[\"type\"] == \"Movie\"]\n\n\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = stimes.release_year,\n                    y = d1,\n                    mode = \"lines\",\n                    name = \"TV Show\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= dtimes.rating)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = stimes.release_year,\n                    y = d2,\n                    mode = \"lines+markers\",\n                    name = \"Movie\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= dtimes.rating)\ndata = [trace1, trace2]\nlayout = dict(title = 'TV Show and Movie vs Country of Top 100 Watches',\n              xaxis= dict(title= 'Release Year',ticklen= 5,zeroline= True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","2ccdff2f":"df.head()","8b7b2207":"times= df[['date_added', 'type']]\nde = times[times.type == \"Movie\"]\nnew_movie= de.max()\nold_movie = de.min()\nnew_movie, old_movie","3c06c589":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'black', width = 1000,  height = 1000, max_words = 121).generate(' '.join(df['listed_in']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Genere On Netflix',fontsize = 30)\nplt.show()","df076c6e":"df.head()","aad5b0cd":"from plotly.offline import iplot, init_notebook_mode\nd_df = df['duration'].value_counts().reset_index()\n\n# plot\ntrace = go.Histogram(\n                     x = d_df['duration'],\n                     marker = dict(color = 'rgb(249, 6, 6)'))\nlayout = go.Layout(template= \"plotly_dark\", title = 'Total Duration - In Minutes', xaxis = dict(title = 'Time'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()\n\n","c4d22d67":"c20 = df['country'].value_counts().reset_index()[:10]\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = c20['index'],\n                y = c20['country'],\n                marker = dict(color = 'rgb(153,255,200)',\n                              line=dict(color='rgb(100,0,0)',width=6.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'TOP 10 COUNTRIES WITH MOST CONTENT' , xaxis = dict(title = 'Countries'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","ef48a3d3":"import missingno as msno\nmsno.matrix(df)\nplt.show()","2498b638":"msno.bar(df)\nplt.show()","81d539f5":"df.head()","1ae2b448":"df[\"type\"].reset_index()[:1000]","c6ac2474":"deneme=df[\"type\"]","e446e0a3":"col = \"type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})","1abf0160":"grouped","85d2576c":"We can see last month is popular season for netflix.","12feb493":"Director : Ra\u00fal Campos, Jan Suter Published Film on Netflix 2016-2018 Years","351c5232":"## White lines are missing data black lines are fill data. Preticting about we must clean director, cast and country feautures.","3eeaf851":"### \"10\" International TV Shows in USA","6598eb94":"## We can say in that dataset, first 90 mins duration films in 1967 second is 1985.","33f8a2b0":"## Yearly Tv Show publishing  Rate we can sure about 2020 best rate of publishing TV Shows","8f739bbc":"## Old Times Film Published in 1942 : 1954","1fdbc470":"## Top Categories.","5e53a203":"## Yearly Movies publishing  Rate we can sure about 2017 best rate of publishing TV Shows","a13285fc":"## Old Movie and New Movie Date","77fc20d7":"## New Released Films 2019-2020","7ab9e54d":"## Movie Duration\nRatios and Frequencies","fff94adc":"## I prefer another visualization tool. Bar plot is best way to see how many missing data you have.\n### For example: You can see our total feature data value is 6.234, director feature have  4265, so we can say; we have \"1969\" missing data on director feature."}}