{"cell_type":{"d339ef85":"code","634817cb":"code","45ddccda":"code","0f353919":"code","5e3ee6ab":"code","a5921799":"code","f2c24452":"code","0aa6dc46":"code","c636ed55":"code","9271b14f":"code","573ffc88":"code","72d9ff07":"code","6888d9ed":"code","c9ad6e01":"code","1a80e6c8":"code","d9fd4cad":"code","cd1fe730":"code","329d1e3e":"code","e7ee65f0":"code","6e6d7be1":"code","3ca1340e":"code","11cfc751":"code","d5522fb7":"code","ec1a6f05":"code","5d583407":"code","d4e9bf39":"code","75f1c08e":"code","5e3adf0a":"code","30dfa675":"code","cf57a1ee":"code","621c907d":"code","bc6aa6ec":"code","4d85130a":"code","afe227cc":"code","e0d41e99":"code","ecdbb988":"code","19cda789":"code","ea37a3a6":"code","e7106a2b":"code","99aac59f":"code","ae0e3edb":"code","30a7667b":"code","1d9b9ac7":"code","de2b2551":"code","60f2fc20":"code","e3c48e45":"code","10e8a6a8":"code","f44562cf":"code","a8ac6408":"code","3625816c":"code","836785d8":"code","cc694503":"code","c8298867":"code","1ac71659":"code","28a5e32f":"code","c8cea959":"code","eb12b3d2":"code","357c6e9c":"code","ffc23259":"code","18db8bd7":"code","3acd62a2":"markdown","3efd58f9":"markdown","1f7b6a66":"markdown","ee358ff3":"markdown","31aafd69":"markdown","fc0b0aba":"markdown","5ce62a92":"markdown","79c71b6c":"markdown","88ac9df0":"markdown","8bf43f91":"markdown","ba3eff18":"markdown","7d5f0791":"markdown","4700fd55":"markdown","ce59f8ac":"markdown","f15ebde5":"markdown","895149e2":"markdown","e46b3924":"markdown","2eeeabb1":"markdown","711a36c4":"markdown","74e92093":"markdown","267df1a5":"markdown","d4350e8e":"markdown","aba13108":"markdown","cf2e1d3d":"markdown","f2142cf0":"markdown","0694bcd3":"markdown","49731875":"markdown","969ed7e6":"markdown","176b2143":"markdown","0f996d72":"markdown","a8f4a187":"markdown","d52cf4ae":"markdown","da18726e":"markdown","48939ce9":"markdown","f757f7be":"markdown","cd116658":"markdown","972d25af":"markdown","b066344e":"markdown","234eacfe":"markdown","e2903e1d":"markdown","b2ec1ab4":"markdown","5223b0ed":"markdown","42d1f2c5":"markdown","362b7fe4":"markdown","0d20c357":"markdown","376f0ee5":"markdown","35fd82d1":"markdown","6f47dbb0":"markdown","83253719":"markdown","80993e4b":"markdown","8e83a751":"markdown","a206e7d4":"markdown","01fc13d1":"markdown","cdc1c544":"markdown","458594e7":"markdown","be605f42":"markdown","ae1acdef":"markdown","f3822160":"markdown"},"source":{"d339ef85":"# Pandas for Data Management\nimport pandas as pd\n\n# Numpy for Linear Algebra\nimport numpy as np\n\n# Matplot for Visualization\nimport matplotlib.pyplot as plt\n\n# Seaborn for Visualization\nimport seaborn as sns","634817cb":"# To display the exact memory usage in info()\npd.set_option('display.memory_usage' ,'deep')\n\n# To display the float variables with 2 decimal places\npd.set_option('display.precision', 2)\n\n# To display upto 100 columns while displaying a dataframe\npd.set_option('display.max_columns', 100)","45ddccda":"# Importing Training data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n\n# Importing Testing data\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Printing the dimension of the datasets\nprint(\"Dimension of Training Set :\", train.shape)\nprint(\"Dimension of Testing Set  :\", test.shape)","0f353919":"# Creating a reference variable for subsetting the datasets later\ntrain['Set'] = 'Train'\ntest['Set'] = 'Test'","5e3ee6ab":"titanic = pd.concat([train, test], axis = 0, sort = False)\n\nprint('Dimension of Titanic', titanic.shape)","a5921799":"titanic.head()","f2c24452":"titanic.sample(5)","0aa6dc46":"print('-'*40)\n\nprint('Info of Training Set')\n\nprint('-'*40)\n\ntrain.info()\n\nprint('-'*40)\n\nprint('Info of Testing Set')\n\nprint('-'*40)\n\ntest.info()","c636ed55":"titanic.info()","9271b14f":"print('Missing values in Training data : \\n', train.isna().sum().sort_values(ascending = False), sep = '')\n\nprint('-'*40)\n\nprint('Missing values in Testing data : \\n', test.isna().sum().sort_values(ascending = False), sep = '')","573ffc88":"titanic['Sex'].value_counts()","72d9ff07":"pd.crosstab(train['Survived'], train['Sex'], normalize = 'columns')","6888d9ed":"plt.figure(figsize = (7,7))\n\ntitanic.groupby('Sex')['Survived'].agg(Survivors = 'sum')['Survivors'].plot(kind = 'bar')\n\nplt.title('Gender wise Survivors', fontsize = 20)\n\nplt.xlabel('Sex', fontsize = 15)\n\nplt.ylabel('Survivors', fontsize = 15)\n\nplt.show()","c9ad6e01":"plt.figure(figsize = (20, 7))\n\nplt.title('Age wise Survival', fontsize = 20)\n\nplt.ylabel('Age', fontsize = 15)\n\nplt.xlabel('Sex', fontsize = 15)\n\nsns.violinplot(x = 'Sex', y = 'Age', \n               hue = 'Survived', data = train, \n               split = True,\n               palette = {0: \"red\", 1: \"green\"}\n              )\n\nplt.show()","1a80e6c8":"list(titanic['Pclass'].sort_values().unique())","d9fd4cad":"plt.figure(figsize = (12,5))\n\nplt.title('Passengers in each Travel Class', fontsize = 20)\n\nplt.xlabel('Passenger Class', fontsize = 15)\n\nplt.ylabel('Number of Passengers', fontsize = 15)\n\ntitanic.groupby('Pclass')['Pclass'].count().plot(kind = 'bar');","cd1fe730":"pd.crosstab(index = train['Survived'], columns = train['Pclass'],\n            normalize = 'columns', dropna = False)","329d1e3e":"titanic['Has_Cabin'] = np.where(titanic['Cabin'].isnull(), 0, 1)\ntitanic['Has_Cabin'].value_counts(normalize = True)","e7ee65f0":"pd.crosstab(index = titanic.loc[titanic['Set'] == 'Train', 'Survived'],\n            columns = titanic.loc[titanic['Set'] == 'Train', 'Has_Cabin'],\n            normalize = 'columns', dropna = False)","6e6d7be1":"titanic['Family_Size'] = titanic['SibSp'] + titanic['Parch'] + 1\n\ntitanic['Family_Size'].value_counts().sort_index()","3ca1340e":"pd.crosstab(index = titanic.loc[titanic['Set'] == 'Train', 'Survived'],\n            columns = titanic.loc[titanic['Set'] == 'Train', 'Family_Size'],\n            normalize = 'columns', dropna = False)","11cfc751":"titanic['Alone'] = np.where(titanic['Family_Size'] == 1, 1, 0)\n\ntitanic['Alone'].value_counts()","d5522fb7":"pd.crosstab(index = titanic.loc[titanic['Set'] == 'Train', 'Survived'],\n            columns = titanic.loc[titanic['Set'] == 'Train', 'Alone'],\n            normalize = 'columns', dropna = False)","ec1a6f05":"titanic['Title'] = titanic['Name'].map(lambda x : x.split(',')[1].split('.')[0].strip())\n\ntitanic[['Name','Title']]","5d583407":"print('Average Age of all passengers is %.2f yrs' % titanic['Age'].mean())","d4e9bf39":"titanic.Title.value_counts()","75f1c08e":"titanic.groupby(['Title'])['Age'].agg(Avg_Age = 'mean').reset_index()","5e3adf0a":"titanic.groupby(['Pclass'])['Age'].agg(Avg_Age = 'mean').reset_index()","30dfa675":"mean_ages = titanic.groupby(['Title','Pclass'])['Age'].agg(Avg_Age = 'mean').reset_index()\n\nmean_ages","cf57a1ee":"mean_ages['Avg_Age'] = mean_ages['Avg_Age'].fillna(28.00)\n\nmean_ages","621c907d":"mean_ages['Class_Title'] = mean_ages['Pclass'].map(str) + mean_ages['Title']\n\nmean_ages.head()","bc6aa6ec":"titanic['Class_Title'] = titanic['Pclass'].map(str) + titanic['Title']\n\ntitanic.head()","4d85130a":"titanic = pd.merge(titanic, mean_ages[['Class_Title','Avg_Age']], on = 'Class_Title', how = 'left')\n\ntitanic.head()","afe227cc":"titanic['Age'] = np.where(titanic['Age'].isnull(),\n                          titanic['Avg_Age'],\n                          titanic['Age'])\n\nprint('Missing Values in Age variable :', titanic['Age'].isnull().sum())","e0d41e99":"print('Minimum Age of Passengers is %.2f yrs' % titanic['Age'].min())\n\nprint('Maximum Age of Passengers is %.2f yrs' % titanic['Age'].max())","ecdbb988":"titanic['Age_Group'] = np.where(titanic['Age'] < 5,\n                                'Baby',\n                                np.where((titanic['Age'] >= 5) & (titanic['Age'] < 12),\n                                         'Child',\n                                         np.where((titanic['Age'] >= 12) & (titanic['Age'] < 18),\n                                                  'Teenager',\n                                                  np.where((titanic['Age'] >= 18) & (titanic['Age'] < 24),\n                                                           'Student',\n                                                           np.where((titanic['Age'] >= 24) & (titanic['Age'] < 30),\n                                                                    'Young_Adult',\n                                                                    np.where((titanic['Age'] >= 30) & (titanic['Age'] < 60),\n                                                                             'Adult',\n                                                                             np.where(titanic['Age'] >= 60,\n                                                                                      'Senior', np.nan)))))))\n\ntitanic['Age_Group'].value_counts()","19cda789":"pd.crosstab(index = titanic.loc[titanic['Set'] == 'Train', 'Survived'],\n            columns = titanic.loc[titanic['Set'] == 'Train', 'Age_Group'],\n            normalize = 'columns', dropna = False)","ea37a3a6":"titanic.loc[titanic['Fare'].isnull(),:]","e7106a2b":"titanic.groupby(['Pclass','Sex','Title'])['Fare'].agg(Avg_Fare = 'mean').reset_index()","99aac59f":"titanic.loc[(titanic['Embarked'] == 'S') &\n            (titanic['Pclass'] == 3), 'Fare'].mean()","ae0e3edb":"titanic['Fare'] = titanic['Fare'].fillna(titanic.loc[(titanic['Embarked'] == 'S') &\n                                                     (titanic['Pclass'] == 3), 'Fare'].mean())\n\nprint('Missing Values in Fare variable :', titanic['Fare'].isnull().sum())","30a7667b":"titanic['Embarked'].value_counts(dropna = False)","1d9b9ac7":"titanic['Embarked'] = titanic['Embarked'].fillna('S')\n\nprint('Missing Values in Embarked variable :', titanic['Embarked'].isnull().sum())","de2b2551":"titanic.isnull().sum().sort_values(ascending = False)","60f2fc20":"titanic = pd.concat([titanic, pd.get_dummies(titanic['Pclass'], prefix = 'Pclass')], axis = 1)\n\ntitanic.loc[:,titanic.columns.str.contains('class')].head(10)","e3c48e45":"titanic['Female'] = titanic['Sex'].map({'female' : 1, 'male' : 0})\n\ntitanic.loc[:,['Sex','Female']].head()","10e8a6a8":"titanic = pd.concat([titanic, pd.get_dummies(titanic['Embarked'], prefix = 'Embarked')], axis = 1)\n\ntitanic.loc[:,titanic.columns.str.contains('Embarked')].head()","f44562cf":"titanic = pd.concat([titanic, pd.get_dummies(titanic['Age_Group'], prefix = 'Age_Group')], axis = 1)\n\ntitanic.loc[:,titanic.columns.str.contains('Age_Group')].head()","a8ac6408":"titanic = titanic.drop(columns = ['Cabin','Class_Title','Ticket','Pclass_3','Embarked_C'])","3625816c":"# For splitting the data into train and test data\nfrom sklearn.model_selection import train_test_split\n\n# For performing Stratified K-Fold Cross Validation\nfrom sklearn.model_selection import StratifiedKFold\n\n# For evaluating Cross Validation results\nfrom sklearn.model_selection import cross_val_score\n\n# For building Logistic Regression Model\nfrom sklearn.linear_model import LogisticRegression\n\n# For making Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier","836785d8":"skfolds = StratifiedKFold(n_splits = 10, random_state = 10)","cc694503":"print(list(titanic.columns))","c8298867":"features = ['Age', 'SibSp', 'Parch', 'Fare', 'Has_Cabin', 'Family_Size', 'Alone', 'Pclass_1', 'Pclass_2',\n            'Female', 'Embarked_Q', 'Embarked_S']\n\nx = titanic.loc[titanic['Set'] == 'Train', features]\ny = titanic.loc[titanic['Set'] == 'Train', 'Survived']\n\nprint('Dimension of Features :', x.shape)\nprint('Dimension of Outcome  :', y.shape)","1ac71659":"results = cross_val_score(estimator = LogisticRegression(solver = 'liblinear'), X = x, y = y, cv = skfolds)\n\nprint('Accuracy of Logistic  : %.3f%%' % (results.mean()*100))","28a5e32f":"results = cross_val_score(estimator = DecisionTreeClassifier(random_state = 1), X = x, y = y, cv = skfolds)\n\nprint('Accuracy of Decision Tree : %.3f%%' % (results.mean()*100))","c8cea959":"train = titanic[titanic['Set'] == 'Train']\ntest  = titanic[titanic['Set'] == 'Test']","eb12b3d2":"features = ['Age', 'SibSp', 'Parch', 'Fare', 'Has_Cabin', 'Alone', 'Pclass_1', 'Pclass_2',\n            'Female', 'Embarked_Q', 'Embarked_S']\n\nlog = LogisticRegression(solver = 'liblinear')","357c6e9c":"log = log.fit(X = train[features], y = train['Survived'])","ffc23259":"submission = pd.DataFrame({'PassengerId' : test['PassengerId'], 'Survived' : log.predict(test[features])}).reset_index(drop = True)\nsubmission","18db8bd7":"submission.to_csv('.\/submission.csv', index = False)\n\nprint('Submission Successful!!!')","3acd62a2":"> ### Viewing 5 Random Observations from the data","3efd58f9":"Now, we will remove the variables that aren't significant for our analysis and also the remove the last dummy variables to overcome the problem of Multicollinearity","1f7b6a66":"> ### Determining whether the passengers had a cabin or not","ee358ff3":"> ### Analyzing Genders for Survival","31aafd69":"<h1><center> The Great Titanic <\/center><\/h1>\n<hr><\/hr>\n<img src = 'https:\/\/images4.alphacoders.com\/617\/thumb-1920-617213.jpg' alt = 'Titanic' align = 'middle'>\n<hr><\/hr>","fc0b0aba":"> # Creating Dummy Variables","5ce62a92":"> ### Dummy Variables for Embarked Location","79c71b6c":"> ### Analysing Embarked variable and treating it for missing values","88ac9df0":"> ### Dummy Variabel for Gender","8bf43f91":"The differences in the Average Ages across Titles and Passenger Class can be seen from the above.\n\nUsing these values we will replace the missing values in the Titanic data. For doing this we will first create a helping variable which will be used for merging the data.","ba3eff18":"Alone passengers are more likely to survive than the ones having families who have half the chance of survival. So, this is a useful variable.","7d5f0791":"> # Missing Value Treatment","4700fd55":"As we can observe that the Average Fare changes across Passenger Class, Gender and Title which are logical variables that for which Fare can change, we will replace the missing values in Fare accordingly.","ce59f8ac":"Excluding the Survived variable, there are missing values in Age, Fare, Cabin and Embarked variables of Titanic data. Note that there will be missing values in Survived variable of Testing dataset which are to be predicted.","f15ebde5":"> Now we will concatenate the Training and Testing datasets. This will help to clean both the datasets together.","895149e2":"> I've seen people replacing the Titles of passengers to have only 4 major title categories viz, Master, Miss, Mr and Mrs. I think that every single Title can have varying average ages. So, replacing Titles won't be a good idea. To prove this consider the following table to observe the amount of variation in average age across each Titles.\n\n> Just one example: A Captain will have average age around 70 yrs. But if we consider the average age of category 'Mr' which is 32 yrs, can such young age be replaced in case of missing value corresponding to a Captain's age?","e46b3924":"> ### Replacing missing values in Age variable","2eeeabb1":"> # Feature Engineering","711a36c4":"> ### Replacing missing value in Fare variable","74e92093":"> # Missing Values Investigation","267df1a5":"There were more passengers in the 3rd class, followed by the 1st class and then the 2nd class","d4350e8e":"There were 843 Male and 466 Female passengers aboard Titanic","aba13108":"Since there is only 1 missing value, we'll replace it directly","cf2e1d3d":"> # Importing the data from Kaggle's Directory","f2142cf0":"> ### Determining the number of family members with whom the passenger was travelling","0694bcd3":"> ### Determining whether the passenger was travelling alone or not","49731875":"> # Importing Required Libraries","969ed7e6":"Passengers having family size of less than 5 members we more likely to survive as compared to others","176b2143":"> ### Analysing Fare for Missing Value Treatment","0f996d72":"> ### Stratified K-Fold Cross Validation for Logistic Regression","a8f4a187":"> # Libraries for Model Building","d52cf4ae":"> ### Stratified K-Fold Cross Validation for Decision Tree","da18726e":"> ### Gender Survival Proportions","48939ce9":"> # Excluding Unwanted Variables","f757f7be":"Females survived in more proportion than the Males. There is a great difference in the survival rates across gender. Hence, Sex is an important variable for prediction.","cd116658":"> # Building Logistic Regression Model","972d25af":"1st class passengers have higher survival rate followed by the 2nd and 3rd class passengers","b066344e":"Most of the passengers didn't had cabins","234eacfe":"> ### Viewing First 5 Observations from the data","e2903e1d":"> ### Making Age Groups","b2ec1ab4":"> ### Dummy Variables for Age Groups","5223b0ed":"> ### Merging Titanic data and Mean Ages","42d1f2c5":"> # Setting the Display Options","362b7fe4":"> ### Using Stratified K-Fold Cross Validation","0d20c357":"> ### Separating the Features and Outcome variables","376f0ee5":"Since there is difference in Average Age across Titles and Passenger Class, we can use both of these logical variables for computing Age for missing instances","35fd82d1":"> ### Missing Value Check","6f47dbb0":"> # Exploratory Data Analysis","83253719":"> ### Dummy Variables for Passenger Classes","80993e4b":"> ### Replacing missing values in Embarked variable","8e83a751":"# Data Description\n\n<hr><\/hr>\n### Overview\nThe data has been split into two groups:\n1. Training data (train.csv)\n2. Test data (test.csv)\n\n<hr><\/hr>\n### Data Dictionary\n\n- Survival : Survival 0 = No, 1 = Yes\n- Pclass : Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n- Sex : Gender\n- Age : Age in years\n- Sibsp : Number of Siblings \/ Spouses aboard the Titanic\n- Parch : Number of Parents \/ Children aboard the Titanic\n- Ticket : Ticket number\n- Fare : Passenger fare\n- Cabin : Cabin number\n- Embarked : Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton\n\n\n<hr><\/hr>\n### Variable Notes\n\n<b>Pclass:<\/b> A proxy for Socio-Economic Status - (SES)\n- 1st = Upper\n- 2nd = Middle\n- 3rd = Lower\n\n<b>Age:<\/b> Age is fractional if less than 1 year. If the age is estimated, is it in the form of xx.5\n\n<b>Sibsp:<\/b> The dataset defines family relations in this way\n- Sibling = Brother, Sister, Stepbrother, Stepsister\n- Spouse = Husband, Wife (mistresses and fianc\u00e9s were ignored)\n\n<b>Parch:<\/b> The dataset defines family relations in this way\n- Parent = Mother, Father\n- Child = Daughter, Son, Stepdaughter, Stepson\n- Some children travelled only with a nanny, therefore parch = 0 for them","a206e7d4":"> ### Analyzing Passenger Classes","01fc13d1":"> ### Analysing Age for Missing Value Treatment","cdc1c544":"> ### Obtaining the Titles of the passengers from their Names","458594e7":"> ### Information of the datasets","be605f42":"From the above table we can conclude that the passengers having are more likely to survive. So, this is a useful variable.","ae1acdef":"Now, there are no missing values in required variables","f3822160":"There are 3 Passenger Classes"}}