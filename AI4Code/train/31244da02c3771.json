{"cell_type":{"6aa9ef90":"code","a650798f":"code","c89898c0":"code","0bf16be3":"code","2863bfc4":"code","72c8f620":"code","b90bb28d":"code","aec0b527":"code","67f5883c":"code","194caa30":"code","515fe7a7":"code","74707cd5":"code","0b1f4778":"code","11036bf2":"code","330d1274":"code","c951330b":"code","b5eaa588":"code","107053ad":"code","20eaa581":"code","5fe0e07e":"code","5055b1b1":"code","8cde0d44":"code","0470100b":"code","4b35aedd":"code","be0056ad":"code","0f195282":"code","75f072da":"code","b04dfc3c":"code","6ac0f7eb":"code","73b4c969":"code","7e1ef2b7":"code","baf03f35":"code","0be0e805":"code","143c4f95":"code","a3dc02b2":"code","02c02a6b":"code","cf582929":"code","06969088":"code","5ef245bb":"code","ac912bca":"code","745e7821":"code","266d608a":"code","b518623c":"code","415b4c76":"code","52e83595":"code","546a0328":"code","3ab565dc":"code","44ac4cca":"code","ccdd786f":"code","7003cff7":"code","27b725a8":"code","eaad7f24":"code","a26f40d9":"code","04bbf21e":"code","6c662b99":"code","44d6a388":"code","127935dd":"code","c7d743e3":"code","4e3af1c8":"code","a1a2e1ce":"code","09f98a7b":"code","063c2847":"code","35e1dc19":"code","411bf816":"code","a9eea8fa":"code","27d0271d":"code","687bf253":"code","485a3009":"code","bbf32eb5":"code","75826bf0":"code","6ba3c03a":"code","6d76fbb9":"code","fd5e3a17":"code","d9c4f42f":"code","6e5943c0":"code","43603367":"code","1658cdbb":"code","51f64792":"code","003b2af7":"code","10234d40":"code","5c2fdb83":"code","836f15d2":"code","f951196a":"code","262223b5":"code","bf45c2a5":"code","203003bf":"code","5717d51e":"code","ba448f5f":"code","9d0b254f":"code","21e7fd2e":"code","5c4b2933":"code","8a757ad9":"code","75d3508d":"code","6cde7e3b":"code","5d1d524d":"code","357690c1":"code","b6e413c7":"code","949894d4":"code","da85ef42":"code","bf20e919":"code","a066908b":"code","acd5c61c":"code","80a281b0":"code","77b8b6c5":"code","3520b9ca":"markdown","8d8d6a6c":"markdown","9a007fd8":"markdown","a9faaad1":"markdown","135ae53f":"markdown","96e8a40a":"markdown","8eda94fe":"markdown","158db4cb":"markdown","7b65d588":"markdown","56570140":"markdown","35484145":"markdown","fd807fb0":"markdown","100fce45":"markdown","5aed56c9":"markdown","d3524f55":"markdown","50d3c9a4":"markdown","dd8d6759":"markdown","0e87b666":"markdown","c3ee87af":"markdown","6fc07d37":"markdown","2c0557cf":"markdown","3547a224":"markdown","04282d6b":"markdown","050d27df":"markdown","086f9e0b":"markdown","27c349c4":"markdown","17d0738d":"markdown","9e3ff7f7":"markdown","addce0c6":"markdown","75e68d20":"markdown","f6a19c36":"markdown","2f7fa23a":"markdown","31d1a2ee":"markdown","4bc5e5f7":"markdown","dbd91cef":"markdown","eaf86a16":"markdown","f60856ab":"markdown","482a5440":"markdown","438b3590":"markdown","49393e93":"markdown","ec26b1ac":"markdown","dc4c19f4":"markdown","698a4d8d":"markdown","7707bf0d":"markdown","f9589732":"markdown","0db26c33":"markdown","5fd89b74":"markdown","17faf165":"markdown","fb11321d":"markdown","9d98581b":"markdown","e3497b25":"markdown","901468ae":"markdown","8cc93a2d":"markdown","2e8a0655":"markdown","b7b00373":"markdown","6ee9a121":"markdown"},"source":{"6aa9ef90":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a650798f":"df = pd.read_csv('\/kaggle\/input\/bank-marketing\/bank-additional-full.csv', sep = ';')","c89898c0":"df.head()","0bf16be3":"df.columns","2863bfc4":"df.info()","72c8f620":"df.describe()","b90bb28d":"#barplot of job with bars split by education\n#pivot table to get jobs as index and education as column. count of 'age' are the values\ndf_pivot = pd.pivot_table(df,columns='education', index='job', aggfunc='count',values='age')\ndf_pivot.plot(kind='bar',stacked=True, figsize=(15,10))\nplt.title('Count of people in each job split by education level')\nplt.ylabel('Count')\nplt.xlabel('Job')","aec0b527":"#works but not entirely clean will fix later\n#pie chart function to see further breakdown of any column by anyother column\ndef pie_chart():\n    while True:\n        try:\n            column = input('Which Column? \\n{}'.format(df.select_dtypes('object').columns))\n            cat = input('Which category? \\n{}'.format(df[column].unique()))\n            split_by = input('Which category do you want to split on? \\n{}'.format(df.select_dtypes('object').columns.drop(column)))\n            break\n        except:\n            print(\"column or category doesn't exist\")\n            continue\n    if column in df.select_dtypes('object').columns:\n        df_pivot = pd.pivot_table(df,columns = split_by, index = column, aggfunc='count',values='age')\n        df_pivot = df_pivot.fillna(0)\n        plt.figure(figsize=(10,10))\n        plt.pie(df_pivot.loc[cat], labels = df_pivot.loc[cat].index, autopct = '%1.2f%%')\n        plt.title('{}: The number of people in {} split by {}'.format(column,cat,split_by))\n    else:\n        print('Not Categorical column')\n        column = input('Please choose from the columns \\n{}'.format(df.select_dtypes('object').columns))","67f5883c":"#bar chart of jobs by personal loan\npd.pivot_table(df,columns='loan', index='job', aggfunc='count',values='age').plot(kind='bar', stacked = True, figsize=(15,5))","194caa30":"#bar chart of jobs by yes or no\npd.pivot_table(df,columns='y', index='job', aggfunc='count',values='age').plot(kind='bar', stacked = True, figsize=(15,5))","515fe7a7":"df_pivot","74707cd5":"#no. of people with housing loan\nsns.countplot(df['housing'], order = ['yes','no','unknown'])","0b1f4778":"#split by target variable\n#pivot table.sorting by no column.plotting as bar chart\npd.pivot_table(df,columns='y', index='housing', aggfunc='count',values='age').sort_values(['no'], ascending=False).plot(kind='bar', stacked = True, figsize=(15,10) )","11036bf2":"sns.countplot(df['loan'], order=['no','yes','unknown'])","330d1274":"pd.pivot_table(df,columns='y', index='loan', aggfunc='count',values='age').sort_values(['no'], ascending=False).plot(kind='bar', stacked = True,figsize=(15,10) )","c951330b":"df_pivot_poutcome = pd.pivot_table(df,columns='y', index='poutcome', aggfunc='count',values='age')\ndf_pivot_poutcome.sort_values(['no'], ascending=False).plot(kind='bar', stacked = True, figsize=(15,10) )\nplt.title('Count of outcome of the last campaign')","b5eaa588":"df_pivot_poutcome.loc['success']","107053ad":"success_perc = round(100 * df_pivot_poutcome.loc['success'][1]\/sum(df_pivot_poutcome.loc['success']),1)\nfailure_perc = round(100 * df_pivot_poutcome.loc['failure'][1]\/sum(df_pivot_poutcome.loc['failure']),1)\nnonexistent_perc = round(100 * df_pivot_poutcome.loc['nonexistent'][1]\/sum(df_pivot_poutcome.loc['nonexistent']),1)","20eaa581":"print('For a successful last campaign {}% subscribed to a term deposit'.format(success_perc))\nprint('For a failed last campaign {}% subscribed to a term deposit'.format(failure_perc))\nprint('For a nonexistent last campaign {}% subscribed to a term deposit'.format(nonexistent_perc))","5fe0e07e":"pd.pivot_table(df,columns='y', index='month', aggfunc='count',values='age').sort_values(['no'], ascending=False).plot(kind='bar', stacked = True,figsize=(15,10) )","5055b1b1":"months = ['mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']","8cde0d44":"def absolute_value(val,month):\n    a = round(val*sum(df[df['month']==month].y.value_counts())\/100,0)\n    return a","0470100b":"fig, axs = plt.subplots(2,5,figsize=(20,8))\n#creating dictionary of numbers and plot axes for the for loop\n#making manually is probably easier to follow\nplot_dict=dict(zip(range(0,10),[axs[0,0],axs[0,1],axs[0,2],axs[0,3],axs[0,4],\n                     axs[1,0],axs[1,1], axs[1,2], axs[1,3], axs[1,4]]))\n\n#enumerate returns tuple of month and a number(idx)\n#change to autopct = '%1.2f%%' for percentage\nfor idx, month in enumerate(months):\n    #gets axes from dict and plots on it\n    plot_dict.get(idx).pie(df[df['month']==month].y.value_counts(),\n             labels=df[df['month']==month].y.value_counts().index, autopct=lambda val: absolute_value(val,month))\n    plot_dict.get(idx).set_title(month)\n","4b35aedd":"pd.pivot_table(df,columns='y', index='day_of_week', aggfunc='count',values='age').sort_values(['no'], ascending=False).plot(kind='bar', stacked = True,figsize=(15,10) )","be0056ad":"#histogram of age split by putput variable\ndf['age'].hist(by = df.y, bins = 30, figsize=(12,5))","0f195282":"df['duration'].hist(bins=100, figsize=(10,7))","75f072da":"df['duration'].hist(bins=100, figsize=(10,7), by=df['y'])","b04dfc3c":"#histogram of contacts performed during campaign\ndf['campaign'].hist(figsize=(12,5), bins=30, by =df['y'])","6ac0f7eb":"df['nr.employed'].hist(figsize=(12,5), by=df['y'])","73b4c969":"df['nr.employed'].unique()","7e1ef2b7":"df['emp.var.rate'].unique()","baf03f35":"df['cons.conf.idx'].unique()","0be0e805":"df['cons.price.idx'].unique()","143c4f95":"df['euribor3m'].hist(bins=6)","a3dc02b2":"df['euribor3m'].unique()","02c02a6b":"df['euribor3m'].hist(by=df['y'],figsize=(12,5))","cf582929":"#Boxplot of Job by age\ndf.boxplot('age','job',figsize=(15,5))\nplt.ylabel('Age')\nplt.xlabel('Job')","06969088":"df.boxplot('age','marital',figsize=(15,10))\nplt.ylabel('Age')\nplt.xlabel('Marital Status')","5ef245bb":"df.boxplot('age','y',figsize=(10,5))\nplt.ylabel('Age')\nplt.xlabel('y')","ac912bca":"df.boxplot('duration','y',figsize=(10,5))","745e7821":"df.boxplot('euribor3m','y',figsize=(10,5))","266d608a":"df.boxplot('cons.price.idx','y',figsize=(10,5))","b518623c":"df.boxplot('nr.employed','y',figsize=(10,5))","415b4c76":"#checking number of unknowns in each column\n(df=='unknown').sum()","52e83595":"df.job.mode()[0]","546a0328":"def fillmode(dataframe,columns):\n    for i in columns:\n        df[i] = df[i].apply(lambda x:df[i].mode()[0] if x=='unknown' else x)","3ab565dc":"fillmode(df,df.columns)","44ac4cca":"#rechecking the unknowns in each column\n(df=='unknown').sum()","ccdd786f":"df.isnull().sum()","7003cff7":"df_cat = df.select_dtypes('object')","27b725a8":"df_cat.columns","eaad7f24":"df_cat.head()","a26f40d9":"df_cat['job'].nunique()","04bbf21e":"#importing encoder\nfrom sklearn.preprocessing import LabelEncoder","6c662b99":"jle = LabelEncoder()\n#creating new columns with labels\ndf_cat['jobLabel']=jle.fit_transform(df_cat['job'])\ndf_cat['educationLabel']=jle.fit_transform(df_cat['education'])\ndf_cat['poutcomeLabel']=jle.fit_transform(df_cat['poutcome'])","44d6a388":"df_cat.head()","127935dd":"#creating binary map\nbin_map = {'yes': 1, 'no': 0}\n\n#creating new labelled columns\ndf_cat['defaultLabel']=df_cat['default'].map(bin_map)\ndf_cat['housingLabel']=df_cat['housing'].map(bin_map)\ndf_cat['loanLabel']=df_cat['loan'].map(bin_map)\ndf_cat['yLabel']=df_cat['y'].map(bin_map)","c7d743e3":"df_cat.head()","4e3af1c8":"#checking correlation of binary labels to see which is most correlated with output\ndf_cat[['housingLabel','loanLabel','defaultLabel','yLabel']].corr()","a1a2e1ce":"df_cat['month'].unique()","09f98a7b":"month_map = {'mar': 3,\n            'apr':4,\n            'may':5,\n            'jun':6,\n            'jul':7,\n            'aug':8,\n            'sep':9,\n            'oct':10,\n            'nov':11,\n            'dec':12}","063c2847":"df_cat['month'] = df['month'].map(month_map)","35e1dc19":"df_cat['day_of_week'].unique()","411bf816":"day_map = {'mon':1,\n          'tue':2,\n          'wed':3,\n          'thu':4,\n          'fri':5}","a9eea8fa":"df_cat['dayLabel'] = df_cat['day_of_week'].map(day_map)","27d0271d":"df_cat.head()","687bf253":"#removing loan and default columns as these were the least correlated  \ndf_cat_labels = df_cat[['month','jobLabel',\n       'educationLabel','poutcomeLabel',\n       'housingLabel', 'dayLabel','yLabel']]","485a3009":"df_cat_labels.columns","bbf32eb5":"#renaming month column\ndf_cat_labels.columns=['monthLabel', 'jobLabel', 'educationLabel', 'poutcomeLabel',\n       'housingLabel', 'dayLabel','yLabel']","75826bf0":"#numerical variables\ndf_num = df.select_dtypes(['int64','float64'])","6ba3c03a":"df_num.head()","6d76fbb9":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import f_classif","fd5e3a17":"selector = SelectKBest(chi2, k=8)\n\n#fitting the selector but dropping negative columns\nselector.fit(df_num.drop(['cons.conf.idx','emp.var.rate'],axis=1), df['y'])\n\n#creating dataframe of features and their p values from lowest to highest, low p values are most correlated with output\npd.DataFrame({'Features':df_num.drop(['cons.conf.idx','emp.var.rate'],axis=1).columns, 'P-Value':selector.pvalues_}).sort_values(by='P-Value')","d9c4f42f":"#checking correlation of numerical variables\nplt.figure(figsize=(12,10))\nsns.heatmap(df_num.corr(), annot=True)","6e5943c0":"df_num.columns","43603367":"df_cat_labels.columns","1658cdbb":"#joining the 2 dataframes to create dataset\ndf2 = pd.concat([df_num[['duration','campaign', 'pdays', 'previous',\n       'cons.price.idx', 'cons.conf.idx', 'euribor3m']],df_cat_labels],axis=1)","51f64792":"df2.head()","003b2af7":"df2.yLabel.value_counts()","10234d40":"100 * 36548\/(36548+4640)","5c2fdb83":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","836f15d2":"df2.columns","f951196a":"X = df2[['duration', 'campaign', 'pdays', 'previous', 'cons.price.idx',\n       'cons.conf.idx', 'euribor3m', 'monthLabel', 'jobLabel',\n       'educationLabel', 'poutcomeLabel', 'housingLabel', 'dayLabel']]\ny=df2['yLabel']","262223b5":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.3,random_state=101)","bf45c2a5":"rfc = RandomForestClassifier()\nrfc.fit(X_train,y_train)\nrfc_pred = rfc.predict(X_test)","203003bf":"from sklearn.metrics import confusion_matrix,accuracy_score,classification_report","5717d51e":"print(confusion_matrix(y_test,rfc_pred))\nprint('Accuracy:',accuracy_score(y_test,rfc_pred))\nprint(classification_report(y_test,rfc_pred))","ba448f5f":"from sklearn.model_selection import StratifiedKFold, cross_val_score","9d0b254f":"skf = StratifiedKFold(n_splits=5,shuffle=True)","21e7fd2e":"rfc_scores = cross_val_score(rfc, X, y, cv=skf)","5c4b2933":"print('Cross validation accuracy for Random Forest Classifier is:', rfc_scores.mean())","8a757ad9":"rfc_scores","75d3508d":"from sklearn.neighbors import KNeighborsClassifier","6cde7e3b":"neighbors = range(5,100,5)","5d1d524d":"acc = []\nfor n in neighbors:\n    knn = KNeighborsClassifier(n_neighbors = n, metric='manhattan')\n    knn.fit(X_train,y_train)\n    pred = knn.predict(X_test)\n    acc.append(accuracy_score(y_test,pred))","357690c1":"plt.plot(neighbors, acc)\nplt.title('Acuracy vs no. of neighbors')\nplt.xlabel('No. of neighbors')\nplt.ylabel('Accuracy')","b6e413c7":"knn = KNeighborsClassifier(n_neighbors=40, metric='manhattan')","949894d4":"knn.fit(X_train,y_train)","da85ef42":"pred = knn.predict(X_test)","bf20e919":"print(confusion_matrix(y_test,pred))\nprint('Accuracy:',accuracy_score(pred,y_test))\nprint(classification_report(y_test,pred))","a066908b":"# Cross validation","acd5c61c":"knn_scores = cross_val_score(knn, X, y, cv=skf)","80a281b0":"print('Cross validation accuracy for Neigherest neighbours classifier is:', knn_scores.mean())","77b8b6c5":"knn_scores","3520b9ca":"# Labelling nominal variables","8d8d6a6c":"# Cross validation","9a007fd8":"# Distribution of numerical variables","a9faaad1":"Personal loan does not seem to affect whether or not they subscribed to a term deposit","135ae53f":"# Labelling ordinal features","96e8a40a":"# Boxplots of Categorical variables ","8eda94fe":"# Train, test split","158db4cb":"Gap in split could be due to target variable","7b65d588":"# Bank Marketing","56570140":"# Filling unknown with mode","35484145":"Succesful last campaigns are important in determining whether they will subscribe to a term deposit. Where the outcome of the last campaign has been successful a higher proportion of people have subscribed to a term deposit","fd807fb0":"This analysis has shown that outcome of last campaign and last contact month of the year may have an affect whether or not they have subscribed to a term deposit.","100fce45":"# Feature Selection using Chi-Squared test","5aed56c9":"# Exploratory Data Analysis","d3524f55":"There are a lot of unique values which could mean it is not categorical","50d3c9a4":"Accuracy peaks at around 40 neighbours","dd8d6759":"Need domain knowledge on whether the categorical features are nominal or ordinal","0e87b666":"Euribor is the interest rate at which credit institutions lend money to each other. Euribor 3m is actually an average of the rates at which European banks lend money to each other over a 3 month period. https:\/\/www.bankinter.com\/banca\/en\/faqs\/mortgages\/what-is-euribor-and-how-does-it-affect-me","c3ee87af":"Highly correlated features represent the same information making them redundant. euribor3m, emp.var.rate and nr.employed are all highly correlated with one another. Will only be going forward with euribor3m and the rest will be removed.","6fc07d37":"Nearest neighbour algorithm has best precision score for 1 class(0.67) so this is currently the best model. \n\nIf the goal of the task is to limit the number of people they think will not subscribe but actually will the metric to use will be the recall of the 1 class. In this second case the best algorithm is the Random Forest. The Random Forest is also the most accurate.\n\nStill need to optimise Random forest parameters e.g. n_estimators, max_depth etc. and will look at other classifiers. Unknowns were imputed with the mode may also see how removing unknowns entirely affects the task.","2c0557cf":"Job, Marital Status, Education, default, housing and loan all have unknown values. Can either be MCAR, MNAR or MAR. Missing completely at random means that the variable that is missing has nothing to do with the data. could be missing due to equipment failure. MAR means it is missing due to another variable being measured. MNAR is due to the variable that is being studied. ","3547a224":"The goal of this project is to correctly identify if a client will subscribe to a term deposit. Identified by the y column. \n\nThere a lot of graphs as I wanted to have a clear visual of everything, some arent relevant at all and I will clean up later!","04282d6b":"No NAs and no unknowns","050d27df":"Again this looks like this may instead be a categorical variable","086f9e0b":"# Missing values (Unknown)","27c349c4":"For some numerical variables the median is far from the mean, this means that it is not normally distributed.","17d0738d":"Checking for NAs in numerical columns","9e3ff7f7":"May actually be ordinal categorical variable and not ratio","addce0c6":"# Labelling binary ('yes','no') variables","75e68d20":"There are now zero unknowns","f6a19c36":"Those that did not subscribe to a term loan have a lower median call duration this is explained in the bank-additional-names.txt file","2f7fa23a":"month and day of week are ordinal everything else is nominal. Ordinal variables must be labelled in order, nominal variables can be labelled randomly. ","31d1a2ee":"According to this chi-squared test duration, pdays, previous, euribor3m and nr.employed are the most important numerical features","4bc5e5f7":"from previous analysis month and poutcome are important. Fom domain knowledge I think that Job, Education, housing and loan will have some affect.","dbd91cef":"# Training and testing","eaf86a16":"# Transforming categorical features","f60856ab":"Median at diferent points, Euribor 3m is also helpful in distinguishing whether or not they will subscribe","482a5440":"Predicting all as no will give 89% accuracy. Therefore accuracy isn't the best metric when determining performance for this task. To recap the objective of the classification, we are trying to predict who will subscribe a term deposit so the bank can direct their marketing campaign. In my opinion I think they would want to minimise the amount of people they market to that will not subscribe. This is what the model predicts as yes but it actually no (False Positives for the yes (1) column). Therefore the most relevant metric is the precision of the yes column.","438b3590":"# KNN","49393e93":"Distribution as it pertains to the target variable","ec26b1ac":"This analysis shows that Consumer confidence index, Euribor 3 month rate and number of employees may also affect whether or not they will subscribe to a term loan as the bosplots show different medians for each target variable. ","dc4c19f4":"Proportion of target variable doesn't change depending on housing loan or not","698a4d8d":"Start by importing the relevant libraries","7707bf0d":"Again expected, single people have the lowest median age with divorce being highest","f9589732":"Although splitting by target variable doesnt completely separate the distributions. For the yes column there is a higher number of lower values compared to higher values. This means the euribor 3 column could provide some useful info. ","0db26c33":"Discrepancy could be explained by the low numbers","5fd89b74":"As expected students have the lowest median age and the retired have the highest","17faf165":"Day of week has little affect","fb11321d":"Quite a big descrepancy in proportion of people subscribed to term deposits for certain last contact months. For these last contact months did anything significant happen? Why do a lot of people last contacted in these months subscribe to term deposits?","9d98581b":"Pretty surprising that there is a small proportion of unemployed clients with personal loans compared to the other jobs. Was expecting unemployed to have a few personal loans","e3497b25":"possibly useful information from client data","901468ae":"Initially it looked like the last contacted month may have an affect on whether or not they subscribe to a term deposit but the low sample size for these months possibly explains the difference.","8cc93a2d":"# Random Forest","2e8a0655":"This histogram shows that a lot of people subscribe to a term deposit when the euribor rate is low. ","b7b00373":"# Bar plots","6ee9a121":"None are correlated with y, housing is most correlated"}}