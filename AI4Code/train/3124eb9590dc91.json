{"cell_type":{"ccc3b6c0":"code","c4a5fd96":"code","1b57ffa0":"code","67c34646":"code","88e18d04":"code","3eb50dc6":"code","50a46353":"code","bc981a0f":"code","ed31cda4":"code","03dfc22b":"code","b48e478c":"code","e4af5b9a":"code","90852926":"code","84d86338":"code","99e7ea6b":"code","26d7a261":"code","b4039e04":"code","0c721e08":"code","f77dc7bf":"code","ed8ac9bb":"code","c0666027":"code","6d49afa3":"markdown","d688102d":"markdown","9a6a485f":"markdown","b1d5c507":"markdown","835c91c0":"markdown","45bad66e":"markdown","9af945a8":"markdown","48c8ed2b":"markdown","4d948fe5":"markdown","b64abf1c":"markdown","c053a1e5":"markdown","d4ef7883":"markdown","96b62291":"markdown","d1c2bd5f":"markdown","9120d27d":"markdown","e59b9625":"markdown","f5e63033":"markdown","1f1dc7fb":"markdown","54d112b2":"markdown","4030bd15":"markdown","77891afe":"markdown","7ef7ad32":"markdown","b0c7a953":"markdown","13cc94b4":"markdown","974d4cfa":"markdown","1fd45e61":"markdown","f0135101":"markdown","3b6b910a":"markdown","e9f49321":"markdown","beacf7e0":"markdown"},"source":{"ccc3b6c0":"!pip install -U 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'\n!pip install mantisshrimp","c4a5fd96":"#hide\nfrom mantisshrimp.all import *\nimport pandas as pd","1b57ffa0":"source = Path('..\/input\/global-wheat-detection\/')\ndf = pd.read_csv(source\/'train.csv')","67c34646":"class WheatInfoParser(InfoParser):\n    def iid(self, o): return o.image_id\n    def height(self, o): return o.height\n    def width(self, o): return o.width\n    def file_path(self, o): return self.source\/f'train\/{o.image_id}.jpg'\n    def __iter__(self): yield from self.data.itertuples()","88e18d04":"class WheatAnnotationParser(AnnotationParser):\n    def iid(self, o): return o.image_id\n    def oid(self, o): return 0\n    def bbox(self, o): return BBox.from_xywh(*np.fromstring(o.bbox[1:-1], sep=','))\n    def __iter__(self): yield from df.itertuples()","3eb50dc6":"catmap = CategoryMap([Category(0, 'wheat')])","50a46353":"parser = DataParser(df, source, catmap=catmap,\n                    img_parser=WheatInfoParser,\n                    annot_parser=WheatAnnotationParser)","bc981a0f":"train_rs,valid_rs = parser.parse()","ed31cda4":"tfm = AlbuTfm([A.Flip(p=.8), A.ShiftScaleRotate(p=.8, scale_limit=(0,.5))])","03dfc22b":"train_ds = Dataset(train_rs, tfm)\nvalid_ds = Dataset(valid_rs)","b48e478c":"train_dl = RCNNDataLoader(train_ds, batch_size=12, num_workers=8)\nvalid_dl = RCNNDataLoader(valid_ds, batch_size=12, num_workers=8)","e4af5b9a":"items = [train_ds[0] for _ in range(3)]\ngrid2([partial(show_item, o, label=False) for o in items])","90852926":"metrics = [COCOMetric(valid_rs, catmap)]","84d86338":"model = MantisFasterRCNN(len(catmap), metrics=metrics)","99e7ea6b":"opt_fn = partial(SGD, momentum=.9, weight_decay=5e-4)","26d7a261":"learn = Learner(model, train_dl, valid_dl, opt_fn)","b4039e04":"learn.fit_one_cycle(5, 1e-3)","0c721e08":"class WheatModel(MantisFasterRCNN):\n    def configure_optimizers(self):\n        opt = SGD(params(self), lr=1e-3, momentum=.9, weight_decay=5e-4)\n        sched = OneCycleLR(opt, max_lr=1e-3, total_steps=len(train_dl), pct_start=.3)\n        return [opt], [{'scheduler':sched, 'interval':'step'}]","f77dc7bf":"model = WheatModel(len(catmap), metrics=metrics)","ed8ac9bb":"trainer = Trainer(max_epochs=1, gpus=1)\ntrainer.fit(model, train_dl, valid_dl)","c0666027":"rs = random.choices(valid_rs, k=2)\nims,preds = model.predict(rs=rs)\nshow_preds(ims, preds)","6d49afa3":"Because we are using Lightning logs are automatically saved for us in a tensorboard format. Other cool loggers like [wandb](https:\/\/www.wandb.com\/) are also provided by lightning!","d688102d":"Let's take a look at some model predictions (`learn.show_results` if using `Learner`)","9a6a485f":"# Mantisshrimp begginer's tutorial","b1d5c507":"Since we only defined augmentation transforms, we only want to apply them to the training dataset","835c91c0":"The `.parse` method will run the parser over all data points, grouping all images that share the same `id`  \nBy default it returns two lists of `Records` with a 0.8\/0.2 `train\/validation` split","45bad66e":"In this tutorial we'll go through to how to finetune a model in the [wheat](https:\/\/www.kaggle.com\/c\/global-wheat-detection\/overview\/eccv-2020) dataset, where we are tasked to find the bounding boxes locations of wheat heads in the image.","9af945a8":"### Step 3 (optional): Metrics","48c8ed2b":"Define a `CategoryMap`, each `Category` receives an object id and it's name","4d948fe5":"### Step 3: Model and Training","b64abf1c":"But before all, let's get the path to our dataset and read the CSV file using `pandas`","c053a1e5":"## Install packages\nBe sure to turn on internet and gpu accelerator in the `Settings` tab.","d4ef7883":"### Extra: Visualize results","96b62291":"Since our problem only contain bounding boxes, we're going to use the `FasterRCNN` model","d1c2bd5f":"`fit_one_cycle` will train adjusting the learning rate acording with the [1cycle learning rate policy](https:\/\/pytorch.org\/docs\/stable\/optim.html#torch.optim.lr_scheduler.OneCycleLR)","9120d27d":"### Step 2: Transforms, Datasets, and DataLoaders","e59b9625":"Mantisshrimp is designed with developer productivity as it first goal, and that already starts at the imports level. The recommended way of importing the library is `from mantisshrimp.all import *`, this will import a curated list of packages (like numpy and torch) and all the necessary modules","f5e63033":"#### Mid level interface (Lightning Trainer)","1f1dc7fb":"We use `RCNNDataLoader` for creating our data loaders, it receives the same arguments as a standard pytorch `DataLoader`","54d112b2":"Let's use the same evaluation metric that COCO uses","4030bd15":"### Step 1: Data parsers","77891afe":"There are two types of parsers we have to define:\n* `InfoParser`: Parses metadata information about our images, like the image `id`, `file_path`, `height` and `width`\n* `AnnotationParser`: Parses our annotations, like bounding boxes, masks and keypoints","7ef7ad32":"### Step 0: Imports","b0c7a953":"#### High level interface (Learner)","13cc94b4":"Often the step of getting our data into a standard format is the most difficult one. Almost all datasets comes in their unique own format, and writing custom code to handle each one of them can be very time consuming\n\nMantisshrimp provides an easy `Parser` interface for handling that, the main idea is that you only have to define how to parse a single sample and the library takes care of the rest","974d4cfa":"The `Learner` receives an argument called `opt_fn`, it will call this function passing the model parameters and it expects to receive back a torch `Optimizer`. We are going to use `partial` to pass any additional paramters to our `SGD` optimizer","1fd45e61":"Mantisshrimp does not implement transforms on it's own, but it instead relies on an easy interface for integrating any transforms library. It currently supports [albumentations](https:\/\/github.com\/albumentations-team\/albumentations) out of the box","f0135101":"**Bonus:** Let's take a look at how our transforms are affecting the same training sample:","3b6b910a":"This is almost pure Lightning, go crazy!  \nFor simplicity, let's just define a model that uses `SGD` and the 1cycle policy like before","e9f49321":"The `Learner` interface is inspired (and very similar) to the [fastai](https:\/\/github.com\/fastai\/fastai2) `Learner`. It aims to provide a very productive experience for prototyping in a jupyter notebook like environment  \nIt comes bundled with additional functionallity, like inbuilt learning rate schedulers and differential learning rates for training unfreezed models","beacf7e0":"Mantisshrimp provides a high and a mid level interface for training. One is not better than the other, they instead serve different purposes:\n* High level interface: For quick prototyping in a jupyter notebook like environment\n* Mid level interface: For more reproducible experiments. Great for writing experiments that can be launched in terminal with different hyperparameters"}}