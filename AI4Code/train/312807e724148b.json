{"cell_type":{"02873347":"code","648ff8da":"code","1f43e9e9":"code","2f619c04":"code","e0a41ff8":"code","b47d7d52":"code","0ffb00a2":"code","c9593664":"code","ca3d4a19":"code","3cf33743":"code","219d5a65":"code","f85309f7":"code","0cf241e1":"code","bb6c3cf7":"code","84027e8e":"code","d3a624fc":"code","08e5e9b5":"code","0d9887b4":"code","14017423":"code","cd8f75b8":"code","4cabd6ac":"code","68c2a400":"code","5d1c8ced":"code","9b5d4dca":"code","c2e8b51f":"code","93d051d1":"code","1144f09b":"code","9216e8b3":"code","b70405e5":"code","e44215b1":"code","6df21384":"code","73ed2fbb":"code","78bd1afb":"code","fc6f9fac":"code","9f516b4c":"code","92e0536d":"markdown","dbfbb841":"markdown","cbb0f21c":"markdown","66c9ae68":"markdown","1435c928":"markdown","70399e46":"markdown","5f4985fc":"markdown","fbe5618a":"markdown","3b14c845":"markdown","f0b24a48":"markdown","983e6449":"markdown","13ca218b":"markdown","95e0e680":"markdown","a818e132":"markdown","e38d0476":"markdown","c1570b70":"markdown","9b0afb87":"markdown","8dd9ac24":"markdown","fa687186":"markdown","4321e27f":"markdown","952bce33":"markdown","fc78e2bb":"markdown","401b9517":"markdown","09f17908":"markdown","4bbcf9df":"markdown","aba93f57":"markdown","772bc4a3":"markdown"},"source":{"02873347":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport ast\nimport pickle","648ff8da":"'''load training dataset'''\nmovies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv') ","1f43e9e9":"movies.head(2)","2f619c04":"credits.head(2)","e0a41ff8":"movies = movies.merge(credits,on='title')\nmovies.head(3)","b47d7d52":"movies.shape","0ffb00a2":"movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]\nmovies.head(3)","c9593664":"movies.shape","ca3d4a19":"print(movies.isnull().sum())\nsns.heatmap(movies.isnull(),cbar=False, cmap='viridis')","3cf33743":"movies.dropna(inplace=True)","219d5a65":"movies.isnull().sum()","f85309f7":"def convert(text):\n    L = []\n    for i in ast.literal_eval(text):\n        L.append(i['name']) \n    return L","0cf241e1":"movies['genres'] = movies['genres'].apply(convert)\nmovies['keywords'] = movies['keywords'].apply(convert)\nmovies['cast'] = movies['cast'].apply(convert)","bb6c3cf7":"movies.head(3)","84027e8e":"movies['cast'] = movies['cast'].apply(lambda x:x[0:3])","d3a624fc":"movies['cast'].head()","08e5e9b5":"def fetch_director(text):\n    L = []\n    for i in ast.literal_eval(text):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n    return L","0d9887b4":"movies['crew'] = movies['crew'].apply(fetch_director)","14017423":"movies['crew'].head()","cd8f75b8":"def collapse(L):\n    L1 = []\n    for i in L:\n        L1.append(i.replace(\" \",\"\"))\n    return L1","4cabd6ac":"movies['cast'] = movies['cast'].apply(collapse)\nmovies['crew'] = movies['crew'].apply(collapse)\nmovies['genres'] = movies['genres'].apply(collapse)\nmovies['keywords'] = movies['keywords'].apply(collapse)","68c2a400":"movies.head()","5d1c8ced":"movies['overview'] = movies['overview'].apply(lambda x:x.split())","9b5d4dca":"movies['overview'].head()","c2e8b51f":"movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']","93d051d1":"movies['tags'].head()","1144f09b":"new = movies.drop(columns=['overview','genres','keywords','cast','crew'])\nnew.head()","9216e8b3":"new['tags'] = new['tags'].apply(lambda x: \" \".join(x))\nnew['tags'].head()","b70405e5":"lv = TfidfVectorizer(max_features=5000,stop_words='english')","e44215b1":"vector = lv.fit_transform(new['tags']).toarray()","6df21384":"similarity = cosine_similarity(vector)","73ed2fbb":"print(similarity)","78bd1afb":"def recommend(movie):\n    index = new[new['title'] == movie].index[0]\n    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])\n    for i in distances[1:6]:\n        print(new.iloc[i[0]].title)","fc6f9fac":"recommend('Spectre')","9f516b4c":"# pickle.dump(new,open('movie_list.pkl','wb'))\n# pickle.dump(similarity,open('similarity.pkl','wb'))","92e0536d":"![](https:\/\/images.squarespace-cdn.com\/content\/v1\/5acbdd3a25bf024c12f4c8b4\/1601861231635-6FB41TNOOPTVI7RXT7DF\/Cosine+Similarity+Radial+Examples.png)","dbfbb841":"Safely evaluate an expression node or a Unicode or Latin-1 encoded string containing a Python expression","cbb0f21c":"**remove old columns and create new data with id and title**","66c9ae68":"![](https:\/\/image.slidesharecdn.com\/contentbasedfiltering-140722025107-phpapp01\/95\/content-based-filtering-1-638.jpg?cb=1405998926)","1435c928":"**I will select: **\n1. movie_id\n2. title\n3. overview\n4. genres\n5. keywords\n6. cast\n7. crew","70399e46":"**select useful feature **","5f4985fc":"# **Vectorizer applying on 'tags'**","fbe5618a":"**split 'overview' contet**","3b14c845":"**splitting recovery after combine data on tag column**","f0b24a48":"**Cosine Similarity is: **\n* a measure of similarity between two non-zero vectors of an inner product space\n* the cosine of the trigonometric angle between two vectors\n* the inner product of two vectors normalized to length 1\n* applied to vectors of low and high dimensionality\n* not a measure of vector magnitude, just the angle between vectors","983e6449":"# **Loading Libraries and Data**","13ca218b":"**fetch director from crew data**","95e0e680":"# **Data Cleaning**","a818e132":"# **Cosine Similarity**","e38d0476":"**collapse blanks on data**","c1570b70":"**it will recommend only 5 movies which have highst 'cosine_similarity' with the choice movie**","9b0afb87":"# **TMDB**\nThe Movie Database, also known as TMDB, is a database that contains detailed information on over 500,000 movies. The Movies dataframe has links to the movie posters in it, but the vast majority of them are outdated and no longer work. In order to find the poster links, the tmdbsimple library, which acts as a Python wrapper for the TMDB API was used. The ID of the movie is all that it takes to obtain that movie's updated information. The TMDB website has a simple structure to its URLs, therefore getting the link to each movie's page involves taking the base site link and adding the id of the movie, a dash, and the movie title.","8dd9ac24":"**Aggregate data into a single file**","fa687186":"**but we will take only first 3 actors from cast**","4321e27f":"we are good ","952bce33":"# **What are Content Recommender Systems?**\nAccording to Wikipedia:\n\n\u201cRecommender systems or recommendation systems (sometimes replacing \u201csystem\u201d with a synonym such as platform or engine) are a subclass of information filtering system that seek to predict the \u2018rating\u2019 or \u2018preference\u2019 that user would give to an item.\u201d","fc78e2bb":"**apply on data**","401b9517":"# **Recommender Function**","09f17908":"# **Combine texts in one column **","4bbcf9df":"# **handling with missing values**","aba93f57":"# ***test***","772bc4a3":"![](http:\/\/miro.medium.com\/max\/8174\/1*y1D9OyNtARhP0jrVmvULTw.jpeg)"}}