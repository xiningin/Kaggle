{"cell_type":{"25298f1d":"code","f8d29079":"code","8c15977f":"code","a9ce7e43":"code","b8aaac20":"code","df560691":"code","8d09625e":"code","4a0e2169":"code","083e1215":"code","5a2e50fc":"code","60cce7a2":"code","9ebe49c8":"code","3205bd5b":"code","046c6a37":"code","47b567f3":"markdown","5f25aafb":"markdown","76931456":"markdown","8902cbf4":"markdown"},"source":{"25298f1d":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')","f8d29079":"ls ..\/input\/titanic","8c15977f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\n# Sex\u306e\u5909\u63db\ngenders = {'female': 0, 'male':1}\ntrain['Sex'] = train['Sex'].map(genders)\ntest['Sex'] = test['Sex'].map(genders)\n\n# Embarked\u306e\u5909\u63db\nembarked = {'S':0, 'C':1, 'Q':2}\ntrain['Embarked'] = train['Embarked'].map(embarked)\ntest['Embarked'] = test['Embarked'].map(embarked)\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)","a9ce7e43":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']","b8aaac20":"X_train.head()","df560691":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train= lgb.Dataset(train_x, train_y, categorical_feature=['Sex', 'Embarked'])\nlgb_valid = lgb.Dataset(valid_x, valid_y, categorical_feature=['Sex', 'Embarked'])\n\nlgbm_params = {'objective': 'binary'}\n\n# lgb.train\u3067\u5b66\u7fd2\ngbm = lgb.train(params=lgbm_params,\n                train_set=lgb_train,\n                valid_sets=[lgb_train, lgb_valid],\n                early_stopping_rounds=20,\n                verbose_eval=-1)\n\noof = gbm.predict(valid_x)\n\npreds = (oof > 0.5).astype(int)\nprint('score', round(accuracy_score(valid_y, preds)*100,2))","8d09625e":"gbm.feature_importance()","4a0e2169":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importance()}).sort_values('importance',\n    ascending=False)","083e1215":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importance(importance_type='gain')}) \\\n    .sort_values('importance', ascending=False)","5a2e50fc":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')  # , importance_type='gain'\n\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(train_x, train_y), (valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],\n        early_stopping_rounds=20,\n        verbose=-1)\n\n# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2));  # valid\u306escore","60cce7a2":"gbm.get_params()","9ebe49c8":"# GridSearchCV\u3092import\nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b\nparams = {\n    'num_leaves': [20, 31, 40, 50],\n    'reg_alpha': [0, 1, 10, 100],\n    'reg_lambda': [0, 1, 10, 100],\n}\n\ngrid_search = GridSearchCV(\n                           gbm,  # \u5206\u985e\u5668\u3092\u6e21\u3059\n                           param_grid=params,  # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n                           cv=3,  # 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n                          )\n\ngrid_search.fit(X_train, y_train)  # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a","3205bd5b":"# GridSearchCV\u3092import\nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b\nparams = {\n    'num_leaves': [20, 31, 40, 50],\n    'reg_alpha': [0, 1, 10, 100],\n    'reg_lambda': [0, 1, 10, 100],\n}\n\ngrid_search = GridSearchCV(\n                           gbm,  # \u5206\u985e\u5668\u3092\u6e21\u3059\n                           param_grid=params,  # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n                           cv=3,  # 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n                          )\n\ngrid_search.fit(X_train, y_train)  # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a","046c6a37":"kf = KFold(n_splits=3, shuffle=True, random_state=0)\n\n# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\ntest_pred = np.zeros((len(test), 3))\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train[train_index]\n    valid_y = y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n\n    gbm = lgb.LGBMClassifier(objective='binary',\n                             num_leaves=20,\n                             reg_alpha=0,\n                             reg_lambda=10)  # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\n    gbm.fit(train_x, train_y,\n            eval_set = [(train_x, train_y), (valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1)\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    test_pred[:, fold_] = gbm.predict_proba(test)[:, 1]\n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('glid_search.csv', index=False)","47b567f3":"## B.4 Scikit-learn interface\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5","5f25aafb":"## B.3 \u91cd\u8981\u5ea6\u306e\u8868\u793a","76931456":"## 5.4 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","8902cbf4":"## B.2 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6307\u5b9a"}}