{"cell_type":{"2baf5803":"code","c457a404":"code","6be01f68":"code","b5077f27":"code","320ab099":"code","2462468a":"code","cae05dbb":"code","4512069f":"code","97987ec6":"code","2414e644":"code","39a29ef8":"code","03758d91":"code","92ec657d":"code","149e9f45":"code","34bc141a":"code","cc539a18":"code","13ddc30d":"code","4065841f":"code","dc1929aa":"code","ea6084fe":"code","02a33688":"markdown"},"source":{"2baf5803":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","c457a404":"# Building the CNN\n# Initialising the CNN\nclassifier = Sequential()","6be01f68":"# Convolution\nclassifier.add(Conv2D(32, (3, 3), input_shape = (32, 32, 3), activation = 'relu'))","b5077f27":"# Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))","320ab099":"# Adding a second convolutional layer\nclassifier.add(Conv2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))","2462468a":"# Flattening\nclassifier.add(Flatten())","cae05dbb":"# Full connection\nclassifier.add(Dense(units = 128, activation = 'relu'))\nclassifier.add(Dense(units = 1, activation = 'sigmoid'))","4512069f":"# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","97987ec6":"# Fitting the CNN to the images\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/cancer\/train\/',\n                                                 target_size = (32, 32),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\n\ntest_set = test_datagen.flow_from_directory('\/kaggle\/input\/cancer\/validation\/',\n                                            target_size = (32, 32),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","2414e644":"classifier.fit_generator(training_set,\n                         steps_per_epoch = 1000,\n                         epochs = 10,\n                         validation_data = test_set,\n                         validation_steps = 5)","39a29ef8":"classifier.fit_generator(training_set,\n                         steps_per_epoch = 8000,\n                         epochs = 25,\n                         validation_data = test_set,\n                         validation_steps = 2000)","03758d91":"classifier.fit_generator(training_set,\n                         steps_per_epoch = 2000,\n                         epochs = 30,\n                         validation_data = test_set,\n                         validation_steps = 1000)","92ec657d":"import numpy as np\nfrom keras.preprocessing import image\n\nimg_width, img_height = 32, 32","149e9f45":"img = image.load_img('\/kaggle\/input\/cancer\/test\/c2 (10007).jpeg', target_size = (img_width, img_height))\nimg = image.img_to_array(img)\nimg = np.expand_dims(img, axis = 0)\nclassifier.predict(img)","34bc141a":"weights = classifier.get_weights() # returns a numpy list of weights","cc539a18":"classifier.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'","13ddc30d":"# saving the weights of a model, you can do so in HDF5 with the code below:\n\nclassifier.save_weights('my_model_weights.h5')","4065841f":"# saving the architecture of a model, and not its weights or its training configuration\n\n# save as JSON\njson_string = classifier.to_json()\n\n# save as YAML\nyaml_string = classifier.to_yaml()","dc1929aa":"import pickle\n\n# Save to file in the current working directory\npkl_filename = \"my_model.pkl\"\nwith open(pkl_filename, 'wb') as file:\n    pickle.dump(classifier, file)","ea6084fe":"from sklearn.externals import joblib\n\n# Save to file in the current working directory\njoblib_file = \"joblib_model.pkl\"\njoblib.dump(classifier, joblib_file)","02a33688":"https:\/\/keras.io\/getting-started\/faq\/#how-can-i-save-a-keras-model"}}