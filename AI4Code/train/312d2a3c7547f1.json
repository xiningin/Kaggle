{"cell_type":{"49c85d53":"code","af75bc00":"code","4fd70629":"code","bc5d8f36":"code","a9f8abdb":"code","c6a05894":"code","f523caf4":"code","e77751bb":"code","ec800db9":"code","c08a3556":"code","c2e47590":"code","38a9fa54":"code","16919f1b":"code","d9663197":"code","e5436f05":"code","d2dcd2b1":"code","2eaf8bb5":"code","5519bc70":"code","e387638d":"code","9a6e98b0":"code","aeff2bb0":"code","95296942":"code","8a6a3061":"code","ce17616b":"code","78e49edb":"code","631c7b83":"code","0246cfcf":"code","a55f40d2":"code","6614dec4":"code","b90dc2c4":"code","a5a46110":"code","6b8e61e2":"code","1533d092":"code","08fc00d9":"markdown","43f810df":"markdown","a7a1881c":"markdown","f3f02a9c":"markdown","1e376118":"markdown","d1447c75":"markdown","1f303cf3":"markdown"},"source":{"49c85d53":"# Importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns","af75bc00":"# Reading the dataset using pandas\n\ndata=pd.read_csv(\"..\/input\/titanicdataset-traincsv\/train.csv\")\ndata.head()","4fd70629":"# Finding out the missing values\n# I am going to use the isnull() to check if there exists any null value or not\n# If it gives true that means that particular value is null\n\ndata.isnull()","bc5d8f36":"# Scrolling through the entire dataset of 891 rows and checking null values become tough\n# Hence , we use visualization library seaborn to use it's property of heatmap to show in a visualised manner that\n# which all columns have null values\n\n# yticklabels specifies to mention the column names. xticklabels is for showing record numbers.\n# cbar is for whether to show colorbar or not. \n# cmap is for colored visualization\n# All null values are displyed in grey color\n\nsns.heatmap(data.isnull(),yticklabels=False,cbar=True,cmap='Accent')","a9f8abdb":"# 'survived' is the dependent variable in this dataset\n# Some more visualization \n\nsns.countplot(x='Survived', data=data)","c6a05894":"sns.countplot(x='Sex',data=data)","f523caf4":"# Now step is to find No. of males and females who survived\n\nsns.countplot(x='Survived', hue='Sex', data=data)","e77751bb":"# Here we will find out how many passenger class(Pclass) people survived and how many didnot\n\nsns.countplot(x='Survived',hue='Pclass', data=data)","ec800db9":"#Checking normal distribution of age group by dropping the NaN values\n# kde is Kernel density estimation which gets shown by default\n#bins parameter means distribute given dataset in a particular range and show in bars\n\nsns.distplot(data['Age'].dropna(), kde=False)","c08a3556":"# SibSp is Sibling or spouse\n# Determining how many SibSp are present\n\n\nsns.countplot(x='SibSp', data=data)","c2e47590":"data['Fare'].hist(color='green')","38a9fa54":"# Column Age and Cabin has null values\n\n#Going to plot a Boxplot to plot a relation of PClass and Age, how much percentile does each passenger class has\n\nsns.boxplot(x='Pclass', y='Age', data=data)\n","16919f1b":"# Writing a function to put values in Age column where there is no value present\n\ndef input_age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if(pd.isnull(Age)):\n        \n        if(Pclass==1):\n            return 37\n        \n        elif(Pclass==2):\n            return 29\n        \n        else:\n            return 24\n    \n    else:\n        return Age     \n    \n","d9663197":"# Applying the above function tot he dataset to replace all Missing values in Age Column\n\ndata['Age']=data[['Age','Pclass']].apply(input_age, axis=1)","e5436f05":"# Checking the heat map again to see if age column has any missing values or not. It shows that it doesnot\nsns.heatmap(data.isnull(),yticklabels=False,cbar=True,cmap='Accent')","d2dcd2b1":"#After dropping Cabin column\n#data.drop('Cabin',axis=1,inplace=True)\ndata.head()\n","2eaf8bb5":"sns.heatmap(data.isnull(),yticklabels=False,cbar=True,cmap='Accent')","5519bc70":"data.info()","e387638d":"# Categorical features are Name,Sex, Ticket, Embarked\n#using get_dummies () going to convert them\n\npd.get_dummies(data['Embarked'],drop_first=True).head()\n","9a6e98b0":"sex=pd.get_dummies(data['Sex'],drop_first=True)\nembark=pd.get_dummies(data['Embarked'],drop_first=True)","aeff2bb0":"data.drop(['Sex','Name','Ticket','Embarked'],axis=1,inplace=True)","95296942":"data.head()","8a6a3061":"# Now the converted categorical feature should be concatenated in the data\n\ndata=pd.concat([data,sex,embark],axis=1)","ce17616b":"data.head()","78e49edb":"#Splitting the data into trained data and test data\n\ndata.drop('Survived',axis=1).head()","631c7b83":"data['Survived'].head()","0246cfcf":"#30% will go to test data\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(data.drop('Survived',axis=1), \n                                                    data['Survived'], test_size=0.30, \n                                                    random_state=101)","a55f40d2":"from sklearn.linear_model import LogisticRegression\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","6614dec4":"predictions = logmodel.predict(X_test)","b90dc2c4":"from sklearn.metrics import confusion_matrix\n\naccuracy=confusion_matrix(y_test,predictions)\naccuracy","a5a46110":"from sklearn.metrics import accuracy_score\n\naccuracy=accuracy_score(y_test,predictions)\naccuracy","6b8e61e2":"predictions","1533d092":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test,predictions))","08fc00d9":"Training and Predicting","43f810df":"Logistic Regression Model","a7a1881c":"Data Cleaning i.e. Removing the null vaues","f3f02a9c":"Working on Titanic Dataset from Kaggle","1e376118":"Evaluating the model","d1447c75":"Handling Categorical Data","1f303cf3":"Based upon Pclass and Age , I am going to replace the NaN values Age."}}