{"cell_type":{"2c164763":"code","9771e5f3":"code","bff2f7b0":"code","4bf8e98f":"code","dabd6a82":"code","56e84bce":"code","bcf10aca":"code","6f4f341b":"code","b88e0cc7":"code","e70433e0":"code","0ff61c1a":"code","46360134":"code","6a69ed86":"code","ca0624c6":"markdown","56ebc502":"markdown","de7e9245":"markdown","c495c502":"markdown","c1efc8ed":"markdown","f95f7658":"markdown","2fa15e40":"markdown","5d7755d2":"markdown","e035fba9":"markdown","e9bc8320":"markdown","e8e185a2":"markdown","356cf034":"markdown"},"source":{"2c164763":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9771e5f3":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np","bff2f7b0":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","4bf8e98f":"enc  = LabelEncoder()\nenc.fit(data['CentralAir'])\ndata['CentralAir'] = enc.transform(data['CentralAir'])\n\nenc1  = LabelEncoder()\nenc1.fit(data['KitchenQual'])\ndata['KitchenQual'] = enc1.transform(data['KitchenQual'])\n\ndata['GarageType']=data['GarageType'].replace(np.nan,'0')\nenc2  = LabelEncoder()\nenc2.fit(data['GarageType'])\ndata['GarageType'] = enc2.transform(data['GarageType'])\n\n\ndata['BsmtCond']=data['BsmtCond'].replace(np.nan,'0')\nenc3  = LabelEncoder()\nenc3.fit(data['BsmtCond'])\ndata['BsmtCond'] = enc3.transform(data['BsmtCond'])\n\n\ndata['Electrical']=data['Electrical'].replace(np.nan,'0')\nenc5  = LabelEncoder()\nenc5.fit(data['Electrical'])\ndata['Electrical'] = enc5.transform(data['Electrical'])","dabd6a82":"#X Data\nX = data[['GrLivArea','GarageArea','TotalBsmtSF','OverallQual','OverallCond','LotArea','BsmtFinSF1','BsmtUnfSF','CentralAir']]\n#y Data\ny =data['SalePrice']\n\n#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.21, random_state=44, shuffle =True)\n","56e84bce":"\nGradientBoostingRegressor = GradientBoostingRegressor()\nGradientBoostingRegressor.fit(X_train, y_train)","bcf10aca":"print('GradientBoostingRegressor Train Score is : ' , GradientBoostingRegressor.score(X_train, y_train))\nprint('GradientBoostingRegressor Test Score is : ' , GradientBoostingRegressor.score(X_test, y_test))","6f4f341b":"y_pred = GradientBoostingRegressor.predict(X_test)\nprint('Predicted Value for GradientBoostingRegressor is : ' , y_pred[:10])","b88e0cc7":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e70433e0":"enc  = LabelEncoder()\nenc.fit(data['CentralAir'])\ndata['CentralAir'] = enc.transform(data['CentralAir'])\n\ndata['KitchenQual']=data['KitchenQual'].replace(np.nan,'0')\nenc1  = LabelEncoder()\nenc1.fit(data['KitchenQual'])\ndata['KitchenQual'] = enc1.transform(data['KitchenQual'])\n\ndata['GarageType']=data['GarageType'].replace(np.nan,'0')\nenc2  = LabelEncoder()\nenc2.fit(data['GarageType'])\ndata['GarageType'] = enc2.transform(data['GarageType'])\n\n\ndata['BsmtCond']=data['BsmtCond'].replace(np.nan,'0')\nenc3  = LabelEncoder()\nenc3.fit(data['BsmtCond'])\ndata['BsmtCond'] = enc3.transform(data['BsmtCond'])\n\n\ndata['Electrical']=data['Electrical'].replace(np.nan,'0')\nenc5  = LabelEncoder()\nenc5.fit(data['Electrical'])\ndata['Electrical'] = enc5.transform(data['Electrical'])","0ff61c1a":"X_test = data[['GrLivArea','GarageArea','TotalBsmtSF','OverallQual','OverallCond','LotArea','BsmtFinSF1','BsmtUnfSF','CentralAir']]\nprint(X_test)","46360134":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp = imp.fit(X_test)\nX_test = imp.transform(X_test)\nprint(X_test)","6a69ed86":"y_test= GradientBoostingRegressor.predict(X_test)\nprint(y_test)","ca0624c6":"**Calculating score**","56ebc502":"**Assign X data & y Data then Split data to train & test with 21 %**","de7e9245":"**USe Simple Imputer to Clean data from NAN**","c495c502":"Spicify columns","c1efc8ed":"**use the test data**","f95f7658":"**Prediction on the train data**","2fa15e40":"Predict House Sales Prices","5d7755d2":" **Applying GradientBoostingRegressor  Model **\n","e035fba9":"**Import Libraries**","e9bc8320":"**Use Label Encoder to replace text values in Feature to Number**","e8e185a2":"**convert test feature to number**","356cf034":"**Reading Data**"}}