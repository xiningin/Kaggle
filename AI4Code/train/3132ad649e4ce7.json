{"cell_type":{"370740f8":"code","11d84d0a":"code","5e297d45":"code","34ba01ce":"code","fcdf1287":"code","1228727b":"code","fe53baa1":"code","76c43c8e":"code","3ca1bd8b":"code","6542cb86":"code","2bd3d6f0":"code","6ae71349":"code","fb4cafee":"code","f4217f93":"code","32ac8d84":"code","516a4bbb":"code","3bc0c861":"code","2d746a6e":"code","8cbb1095":"code","0a26b004":"code","cb75a26c":"code","0ea757c7":"code","ed020844":"code","50e615bd":"code","747ae637":"code","fc8deda8":"code","57cda5bf":"code","a3d68180":"code","7d54804e":"code","2dffce49":"code","546f148b":"code","3dac58f5":"code","fc57b3c7":"code","bf4249b8":"code","cbd01e16":"code","7efc3745":"code","f15a81ea":"code","d916f2f5":"code","23696afd":"code","102081d4":"code","e5f32795":"code","61140371":"code","a06beeef":"code","761aef9c":"code","b15b4aad":"code","df1792a8":"code","4b6c5573":"code","f2cc484c":"code","382f464d":"code","a33bf41f":"code","e5421411":"code","9d6d1a34":"code","a9d1c535":"code","f19fc348":"code","8723ba9a":"code","bc673076":"code","afa8caf6":"code","16c5d8f8":"code","9029452a":"code","96af2538":"code","222555c8":"code","1d3d93a5":"code","18c93b75":"code","ddb0a254":"code","474261aa":"code","50baa465":"code","b1a36bcd":"code","23face70":"code","4e6951dc":"code","7e63e83e":"code","25c3addf":"code","3c935fa6":"code","64edae48":"code","765621cc":"code","32bab9ee":"code","e99ff1da":"code","e5e9631b":"code","c23bceea":"code","4222403f":"code","1cbb9273":"code","a74c8f1c":"code","01994e8e":"code","dd227880":"code","6f8e4c74":"code","b0795de4":"code","4a148930":"code","221393fa":"code","361b1082":"code","44c0d83f":"code","076c9fcb":"code","4e1c5654":"code","af65d54b":"code","a103fd8f":"code","bab78d75":"code","54227e8b":"code","23a24573":"code","67faa8ac":"code","4d345c23":"code","c698b49b":"code","19241638":"code","71699a0f":"code","acd975e9":"code","1fae798b":"code","8c5a65c0":"code","799db5df":"code","c31f5297":"code","5cc0621a":"code","33803f88":"code","74606d30":"code","787f632c":"code","1bf44ca5":"code","b56da0fd":"code","ebca06ff":"code","bff386bc":"code","feb5a65b":"code","b075e111":"code","eb8ae6db":"code","9c813ade":"code","fcb40630":"code","5201e9a8":"code","312c56ee":"code","35a7c303":"code","d79918dd":"code","bf67c185":"code","02e6bbf5":"code","c86248e2":"code","03d5744c":"code","fdb3b166":"code","1af0f6c2":"code","086b0239":"code","6c1c4ed3":"code","6c34ff9e":"code","c30f7d9f":"code","45e856c0":"code","04e85615":"code","79c7e09a":"code","21c2e8c1":"code","e0a9ba7e":"code","2d173b82":"code","ec0968f1":"code","3553447e":"code","c00b1676":"code","914c8c9a":"code","3244bbd8":"code","f461d2ff":"code","5daa2c5b":"code","d37afec6":"code","8c519180":"code","68db1bbf":"code","56192a7d":"code","ac1a2124":"code","e0e94bad":"code","58d847fb":"code","bb71ee62":"code","3d4d4161":"code","f7675f1a":"code","b563d7c2":"code","3151f75b":"markdown","dfdaabd8":"markdown","e2d5dd1a":"markdown","ef887b26":"markdown","72d0d4c3":"markdown","009919fb":"markdown","38aab002":"markdown","2538f560":"markdown","abb58a2a":"markdown","52143e33":"markdown","beda1692":"markdown","618ff4ca":"markdown","fd4e598e":"markdown","1afbed3d":"markdown","68b397f9":"markdown","9ea5afc5":"markdown","e46efbaf":"markdown","92462e67":"markdown","66d272ec":"markdown","1fabd38b":"markdown","f49562da":"markdown","29897c5a":"markdown","b19daa55":"markdown","4caf5633":"markdown","74b3b419":"markdown","f4f82500":"markdown","4562c07f":"markdown","508adffa":"markdown","3eb06868":"markdown","ed25fdac":"markdown","9ce8b2b5":"markdown","33644ba0":"markdown","497bd13e":"markdown","f9f476a3":"markdown","343e0448":"markdown","f08de79e":"markdown","fe371515":"markdown","f9023781":"markdown","e625a3f2":"markdown","e27e1c5c":"markdown","145da5fc":"markdown","92f73474":"markdown","b2af2b97":"markdown","caa4e057":"markdown"},"source":{"370740f8":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.gofplots import qqplot\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n%config InlineBackend.figure_format = \"svg\"","11d84d0a":"data = pd.read_csv(\"..\/input\/airbnb-price-prediction\/train.csv\")","5e297d45":"data.head()","34ba01ce":"data.shape","fcdf1287":"df, validation_df  = train_test_split(data,\n                               test_size=0.25,\n                               random_state = 101)","1228727b":"df_train, df_test  = train_test_split(df,\n                               test_size=0.25,\n                               random_state = 101)","fe53baa1":"plt.figure(figsize = (10, 8))\nsns.distplot(df_train[\"log_price\"])\nplt.title('Price distribution')\nplt.show()\n","76c43c8e":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'property_type',data = df_train,order = df_train['property_type'].value_counts().index,palette = \"viridis\")\nplt.ylabel('Property type',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()","3ca1bd8b":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'room_type',data = df_train,order = df_train['room_type'].value_counts().index,palette = \"viridis\")\nplt.ylabel('Room type',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()","6542cb86":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'cancellation_policy',data = df_train,order = df_train['cancellation_policy'].value_counts().index,palette = \"viridis\")\nplt.ylabel('Cancellation_policy',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()","2bd3d6f0":"df_g=df_train['cancellation_policy'].value_counts()\nlabels=df_g.index\nfig,ax1=plt.subplots(1,1,figsize=(5,5))\nax1.pie(df_g,labels=labels, autopct='%1.0f%%',shadow=True, startangle=90)\nplt.title(\"Cancellation policy\",fontsize=26, weight = 'bold',color=\"black\")\nplt.show()","6ae71349":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'bedrooms',data = df_train,order = df['bedrooms'].value_counts().index,palette = \"viridis\")\nplt.ylabel('bedrooms',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()\n\n#df.bedrooms.value_counts().plot.bar()","fb4cafee":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'beds',data = df_train,order = df['beds'].value_counts().index,palette = \"viridis\")\nplt.ylabel('beds',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()\n\n#df.bedrooms.value_counts().plot.bar()","f4217f93":"plt.figure(figsize = (10,10))\ndata = df_train.neighbourhood.value_counts()[:10]\nplt.figure(figsize=(10,10))\nx = data.index\ny = data.values\n\nplt.title(\"Most popular Neighbourhood\")\nplt.xlabel(\"Neighbourhood Area\")\nplt.ylabel(\"Number of guest who host in this area\")\nplt.xticks(rotation=45)\nplt.bar(x,y)","32ac8d84":"sns.set(style='darkgrid')\nplt.figure(figsize=(7,7))\nsns.countplot(y = 'neighbourhood',\n              data = df_train,\n              order = df_train['neighbourhood'].value_counts().sort_values(ascending= False).head(30).index,palette= 'viridis')\nplt.ylabel('Neighbourhood',fontsize = 20, weight = 'bold',color='black')\nplt.axes().set(facecolor = \"White\")\nplt.show()","516a4bbb":"sns.set(style='darkgrid')\nplt.figure(figsize=(8,8))\nsns.countplot(y = 'city',data = df_train,order = df_train['city'].value_counts().index,palette = \"viridis\")\nplt.ylabel('City',fontsize = 20, weight = 'bold',color='black')\n#plt.axes().set(facecolor = \"White\")\nplt.show()","3bc0c861":"import plotly.express as px\n\ndef create_map(city):\n    price_view = lambda x: 'price: ' + str(round(x, 2))\n\n    if city in {'NYC', 'LA'}:\n        fraction = 0.2\n    else:\n        fraction = 0.6\n        \n    df_temp = df[df['city'] == city].sample(frac=fraction,random_state=101)\n    df_temp['log_price'] = np.round(df_temp['log_price'], 2)\n    \n    fig = px.scatter_mapbox(df_temp, \n                            lat=\"latitude\", \n                            lon=\"longitude\", \n                            hover_data=[\"log_price\"],\n                            color='log_price', \n                            zoom=10)\n    \n    fig.update_layout(\n            title = f'Airbnb prices in {city}',\n            geo_scope='usa',\n            width=1000, \n            height=600,\n            mapbox_style=\"white-bg\",\n            mapbox_layers=[{\n                 \"below\": 'traces',\n                 \"sourcetype\": \"raster\",\n                 \"sourceattribution\": \"United States Geological Survey\",\n                 \"source\": [\"https:\/\/basemap.nationalmap.gov\/arcgis\/rest\/services\/USGSImageryOnly\/MapServer\/tile\/{z}\/{y}\/{x}\"]\n              }]\n    )\n    #fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    #fig.update_geos(fitbounds=\"locations\")\n    fig.show()\n    \n#city = interact(lambda x: create_map(x), x=['NYC', 'LA', 'SF', 'DC', 'Chicago', 'Boston'])  #widget\ncreate_map('Chicago')","2d746a6e":"df_train.info()","8cbb1095":"df_train.isna().sum()","0a26b004":"df_train.corr()","cb75a26c":"sns.set(font_scale=0.6)\nplt.figure(figsize=(8,8))\nsns.heatmap(df_train.corr(), cmap=\"seismic\", annot=True, vmin=-1, vmax=1)","0ea757c7":"plt.figure(figsize=(10,10))\ndf_train.corr()[\"log_price\"].sort_values().plot(kind=\"barh\")","ed020844":"sns.set(font_scale=0.8)\nyears =  pd.to_datetime(df_train['host_since'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","50e615bd":"sns.set(font_scale=0.8)\nyears =  pd.to_datetime(df_train['last_review'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","747ae637":"sns.set(font_scale=0.8)\nyears =  pd.to_datetime(df_train['first_review'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","fc8deda8":"df_train.bathrooms.unique()","57cda5bf":"df_train[\"bathrooms\"].mode()","a3d68180":"df_train[\"bathrooms\"].mean()","7d54804e":"df_train[\"bathrooms\"] = df_train['bathrooms'].fillna(1)","2dffce49":"#df_train[\"bathrooms\"] = df_train['bathrooms'].fillna(df_train[\"bathrooms\"].mode())","546f148b":"df_train[\"bathrooms\"].value_counts()","3dac58f5":"df_train[[\"number_of_reviews\",\"review_scores_rating\"]][df_train.number_of_reviews == 0]","fc57b3c7":"df_train[\"review_scores_rating\"] = df_train[\"review_scores_rating\"].fillna(0)","bf4249b8":"df_train[\"review_scores_rating\"].unique()","cbd01e16":"df_train[\"review_scores_rating\"] = df_train[\"review_scores_rating\"]\/100","7efc3745":"df_train[\"review_scores_rating\"].unique()","f15a81ea":"df_train.bedrooms.unique()","d916f2f5":"df_train[\"bedrooms\"].mean()","23696afd":"df_train[\"bedrooms\"].mode()","102081d4":"#df[\"bedrooms\"] = df['bedrooms'].fillna(df[\"bedrooms\"].mode())","e5f32795":"df_train[\"bedrooms\"] = df_train[\"bedrooms\"].fillna(1.0)","61140371":"df_train.bedrooms.value_counts()","a06beeef":"df_train[\"number_of_reviews\"].max()","761aef9c":"df_train[\"number_of_reviews\"] = (df_train[\"number_of_reviews\"]\/530)","b15b4aad":"df_train[\"number_of_reviews\"].value_counts()","df1792a8":"df_train[\"beds\"].unique()","4b6c5573":"df_train[\"beds\"].mean()","f2cc484c":"df_train[\"beds\"].mode()","382f464d":"df_train[\"beds\"] = df_train[\"beds\"].fillna(2.0)","a33bf41f":"df_train[\"beds\"].value_counts()","e5421411":"df_train.host_has_profile_pic.unique()","9d6d1a34":"df_train.host_has_profile_pic.value_counts()","a9d1c535":"df_train.host_identity_verified.unique()","f19fc348":"df_train.host_identity_verified.value_counts()","8723ba9a":"df_train.replace(to_replace = \"t\", value = 1,inplace=True) \ndf_train.replace(to_replace = \"f\", value = 0,inplace=True) ","bc673076":"df_train[\"host_has_profile_pic\"] = df_train[\"host_has_profile_pic\"].astype(\"bool\")\ndf_train[\"host_identity_verified\"] = df_train[\"host_identity_verified\"].astype(\"bool\")","afa8caf6":"df_train.host_identity_verified.value_counts()","16c5d8f8":"df_train.host_has_profile_pic.value_counts()","9029452a":"df[\"host_has_profile_pic\"] = df[\"host_has_profile_pic\"].astype(\"bool\")\ndf[\"host_identity_verified\"] = df[\"host_identity_verified\"].astype(\"bool\")","96af2538":"df_train.host_response_rate.unique()","222555c8":"df_train.host_response_rate = df.host_response_rate.apply(\n    lambda x: int(x[:len(x)-1])\/100\n     if isinstance(x,str) else x )","1d3d93a5":"df_train.host_response_rate.unique()","18c93b75":"df_train.host_response_rate.mean()","ddb0a254":"df_train.host_response_rate = df_train.host_response_rate.fillna(df_train.host_response_rate.mean())","474261aa":"df_train[\"host_response_rate\"]","50baa465":"df_train.host_response_rate.value_counts()","b1a36bcd":"df_train.host_response_rate.unique()","23face70":"#id\n#description\n ##first_review\n ##last_review\n ##host_since\n#host_has_profile_pic\n#name\n#thumbnail_url\n#zipcode\n","4e6951dc":"df_train = df_train.drop(['id','description','first_review','last_review','host_since',\n                          'name','thumbnail_url','zipcode'],axis=1)\ndf_train.columns","7e63e83e":"df_train.isna().sum()","25c3addf":"df_train.head()","3c935fa6":"import re\namenities_set = set()\nfor amenitie in df_train['amenities']:\n    amenitie_set = set(re.sub(r'(\\\"|\\{|\\})', '', amenitie).split(','))\n    for piece in amenitie_set:\n        if \"translation missing\" not in piece and piece:\n            amenities_set.add(piece.strip())\n            \namenities_set","64edae48":"def dum_col_filling(main_col_val, dum_col_name, main_col_name):\n    if dum_col_name.replace(main_col_name + ': ', '') in main_col_val:\n        return 1\n    else:\n        return 0","765621cc":"   def set_to_dummies(df, column_name):\n    all_values_of_sets = amenities_set\n    dummy_columns_name = [column_name + ': ' + dum_col for dum_col in all_values_of_sets if dum_col]\n    dummy_df = pd.DataFrame(0, index=df.index, columns=dummy_columns_name)\n    df = pd.concat([dummy_df, df], axis = 1)\n    for dum_col_name in dummy_columns_name:\n        for i in df.index:\n            df[dum_col_name][i] = dum_col_filling(df[column_name][i], dum_col_name, column_name)\n    return df","32bab9ee":"df_train = set_to_dummies(df_train, 'amenities')","e99ff1da":"# l=list(df_train['amenities'])\n# l=[[word.strip('[\" ]') for word in row[1:-1].split(',')] for row in list(df_train['amenities'])]\n# cols = set(word for row in l  for word in row)\n# amenities_df=pd.DataFrame(columns=cols)\n# print(cols)\n# amenities_df = pd.DataFrame(columns=cols)\n# for row_idx in range(len(l)):\n#     for col in cols:\n#         amenities_df.loc[row_idx,col]=int(col in l[row_idx])","e5e9631b":"# amenities_df","c23bceea":"# # Building a new field aggregating fields from amenities_df\n# # The new fields will be: kitchen, accesibility, Electricity_and_Technology, facilities, kids_friendly, security, services\n\n# amenities_group_df = pd.DataFrame()\n# #--------------------------------------\n# amenities_group_df['kitchen'] = amenities_df['Kitchen']+amenities_df['Breakfast']+amenities_df['Cooking basics']+amenities_df['Cooking basics']+amenities_df['BBQ grill']+amenities_df['Oven']+amenities_df['Coffee maker']+amenities_df['Microwave']+amenities_df['Refrigerator']+amenities_df['Dishwasher']\n# amenities_group_df['accesibility'] = amenities_df['Free parking on premises']+amenities_df['Wide clearance to bed']+amenities_df['smooth pathway to front door']+amenities_df['Ground floor access']+amenities_df['Lake access']+amenities_df['Wheelchair accessible']+amenities_df['Wide clearance to shower & toilet']+amenities_df['Wide hallway clearance']+amenities_df['Wide doorway']+amenities_df['Accessible-height toilet']+amenities_df['Step-free access']+amenities_df['Well-lit path to entrance']+amenities_df['Waterfront']+amenities_df['Free parking on street']+amenities_df['Disabled parking spot']+amenities_df['Accessible-height bed']+amenities_df['Private entrance']+amenities_df['Elevator']\n# amenities_group_df['Elect_Tech'] = amenities_df['Wide entryway']+amenities_df['Air conditioning']+amenities_df['Ethernet connection']+amenities_df['Cable TV']+amenities_df['Internet']+amenities_df['EV charger']+amenities_df['Baby monitor']+amenities_df['TV']+amenities_df['Wireless Internet']+amenities_df['Pocket wifi']+amenities_df['Washer']+amenities_df['Dryer']+amenities_df['Keypad']+amenities_df['Game console']+amenities_df['Washer \/ Dryer']+amenities_df['Hair dryer']\n# amenities_group_df['facilities'] = amenities_df['Private living room']+amenities_df['Air purifier']+amenities_df['Handheld shower head']+amenities_df['Hot water kettle']+amenities_df['Extra pillows and blankets']+amenities_df['Hot tub']+amenities_df['Pets live on this property']+amenities_df['Heating']+amenities_df['Dishes and silverware']+amenities_df['Patio or balcony']+amenities_df['Bed linens']+amenities_df['First aid kit']+amenities_df['Crib']+amenities_df['Flat']+amenities_df['Laptop friendly workspace']+amenities_df['Buzzer\/wireless intercom']+amenities_df['Firm mattress']+amenities_df['Iron']+amenities_df['Changing table']+amenities_df['Hangers']+amenities_df['Roll-in shower with chair']+amenities_df['Gym']+amenities_df['Outlet covers']+amenities_df['Essentials']+amenities_df['Private bathroom']+amenities_df['Baby bath']+amenities_df['Bathtub']+amenities_df['Shampoo']+amenities_df['Beachfront']+amenities_df['Single level home']+amenities_df['Hot water']+amenities_df['High chair']+amenities_df['Bathtub with shower chair']+amenities_df['Pool']+amenities_df['Fixed grab bars for shower & toilet']+amenities_df['Room-darkening shades']+amenities_df['Beach essentials']+amenities_df['Garden or backyard']\n# amenities_group_df['kids_friendly'] = amenities_df['Babysitter recommendations']+amenities_df['Family\/kid friendly']+amenities_df['Children\u2019s books and toys']+amenities_df['Children\u2019s dinnerware']\n# amenities_group_df['security'] = amenities_df['Window guards']+amenities_df['Stair gates']+amenities_df['Fireplace guards']+amenities_df['Doorman']+amenities_df['Carbon monoxide detector']+amenities_df['Smoke detector']+amenities_df['Table corner guards']+amenities_df['Fire extinguisher']+amenities_df['Lock on bedroom door']+amenities_df['Smart lock']+amenities_df['Lockbox']\n# amenities_group_df['services'] = amenities_df['Ski in\/Ski out']+amenities_df['Cleaning before checkout']+amenities_df['Long term stays allowed']+amenities_df['Other pet(s)']+amenities_df['Cat(s)']+amenities_df['Self Check-In']+amenities_df['24-hour check-in']+amenities_df['Host greets you']+amenities_df['Luggage dropoff allowed']+amenities_df['Pack \u2019n Play\/travel crib']+amenities_df['Pets allowed']+amenities_df['Suitable for events']+amenities_df['Safety card']+amenities_df['Indoor fireplace']+amenities_df['Dog(s)']+amenities_df['Smoking allowed']","4222403f":"# amenities_group_df=amenities_group_df.astype(\"int64\")","1cbb9273":"# amenities_group_df.info()","a74c8f1c":"#  amenities_group_df[amenities_group_df >= 2 ] = 1\n","01994e8e":"# amenities_group_df","dd227880":"# df_train['join_key'] = range(0,len(df_train))\n# df_train.index = df_train['join_key']","6f8e4c74":"# df_train = df_train.join(amenities_group_df)","b0795de4":"# df_train.isna().sum()","4a148930":"df_train.room_type.unique()","221393fa":"df_train.room_type.value_counts()","361b1082":"#df1 = pd.concat([df1, pd.get_dummies(df1['room_type'], prefix='room_type')],axis=1)","44c0d83f":"#df1 = df1.drop(['room_type'],axis=1)","076c9fcb":"# def room_type_cleaning(x):\n#     if x=='Entire home\/apt':\n#         x= 3\n#     elif x=='Private room':\n#         x= 2\n#     elif x=='Shared room':\n#         x= 1\n#     return x\n# df_train['room_type']=df_train['room_type'].map(lambda x: room_type_cleaning(x))","4e1c5654":"df_train = pd.concat([df_train, pd.get_dummies(df_train['room_type'], prefix='room_type')],axis=1) ","af65d54b":"df_train = df_train.drop(['room_type'],axis=1)","a103fd8f":"#df1.room_type = df1.room_type.apply(lambda x: 3 if x=='Entire home\/apt' else 2 if x=='Private room' else 1)","bab78d75":"df_train.isna().sum()","54227e8b":"df_train.bed_type.unique()","23a24573":"df_train.bed_type.value_counts()","67faa8ac":"df_train.bed_type = df_train.bed_type.map(lambda x: 2 if x=='Real Bed' else 1)","4d345c23":"#df_train = pd.concat([df_train, pd.get_dummies(df_train['bed_type'], prefix='bed_type')],axis=1)","c698b49b":"#df_train = df_train.drop(['bed_type'],axis=1)","19241638":"df_train['city'].unique()","71699a0f":"df_train['city'].value_counts()","acd975e9":"df_train = pd.concat([df_train, pd.get_dummies(df_train['city'], prefix='city')],axis=1)","1fae798b":"df_train = df_train.drop(['city'],axis=1)","8c5a65c0":"df_train.isna().sum()","799db5df":"df_train.property_type.unique()","c31f5297":"df_train.property_type.value_counts()","5cc0621a":"nbh_counts = df_train.property_type.value_counts()","33803f88":"other_nbhs = list(nbh_counts[nbh_counts <= 300].index)","74606d30":"df_train['property_type'] = df_train['property_type'].replace(other_nbhs,\"Other\")","787f632c":"df_train['property_type'].unique()","1bf44ca5":"df_train['property_type'].value_counts()","b56da0fd":"df_train = pd.concat([df_train, pd.get_dummies(df_train['property_type'], prefix='property_type')],axis=1)","ebca06ff":"df_train = df_train.drop(['property_type'],axis=1)","bff386bc":"df_train['cancellation_policy'].unique()","feb5a65b":"df_train['cancellation_policy'].value_counts()","b075e111":"# def cancellation_policy_cleaning(x):\n#     if x=='super_strict_60':\n#         x= 5\n#     elif x=='super_strict_30':\n#         x= 4\n#     elif x=='strict':\n#         x= 3\n#     elif x=='moderate':\n#         x= 2\n#     elif x=='flexible':\n#         x= 1     \n#     return x\n# df_train['cancellation_policy']=df_train['cancellation_policy'].map(lambda x: cancellation_policy_cleaning(x))","eb8ae6db":"df_train = pd.concat([df_train, pd.get_dummies(df_train['cancellation_policy'], prefix='cancellation_policy')],axis=1)","9c813ade":"df_train = df_train.drop(['cancellation_policy'],axis=1)","fcb40630":"#df_train['cancellation_policy'].value_counts()","5201e9a8":"df_train.replace(to_replace = True , value = 1,inplace=True) \ndf_train.replace(to_replace = False , value = 0,inplace=True)","312c56ee":"#df_train['first_review'] = df_train['first_review'].apply(first_review_poc)","35a7c303":"#df_train['first_review'].unique()","d79918dd":"#df_train = pd.concat([df_train, pd.get_dummies(df_train['first_review'], prefix='first_review')],axis=1) ","bf67c185":"from decimal import Decimal\nDecimal('Infinity')","02e6bbf5":"import math\ntest = math.inf","c86248e2":"# Adding price per room field (For neighnourhood price level)\n\ndf_train['price_per_room'] = (df_train.log_price) \/ (df_train.bedrooms)\n\ndf_train.neighbourhood.value_counts().head(30).plot.bar(color=(.0, 0.4, 0.9, 1))\n\nneighbourhood_avg_price = df_train[['neighbourhood','price_per_room']].groupby('neighbourhood')['price_per_room'].mean().sort_values()","03d5744c":"df_train = df_train.replace([np.inf], np.nan)","fdb3b166":"df_train['price_per_room'].value_counts()","1af0f6c2":"neighbourhood_avg_price.replace(np.inf, np.nan,inplace=True)\nneighbourhood_avg_price.fillna(neighbourhood_avg_price.mean(),inplace=True)\n\nprint(neighbourhood_avg_price.sort_values(ascending=False))\nprint('---------------------------------------')\nprint(neighbourhood_avg_price.describe())","086b0239":"neighbourhood_class_df = neighbourhood_avg_price.to_frame()\ntype(neighbourhood_class_df)","6c1c4ed3":"# Converting neighbourhoods to Levels\ndef neigbourhood_class(row):\n  if row['price_per_room'] >=0 and row['price_per_room'] <= 3.683610:\n    return 1\n  elif row['price_per_room'] > 3.6836100 and row['price_per_room'] <= 3.868928:\n    return 2\n  elif row['price_per_room'] >3.868928 and row['price_per_room'] <= 4.194452: \n    return 3\n  else:\n    return 4\n  \nneighbourhood_class_df['neigbourhood_level'] = neighbourhood_class_df.apply(neigbourhood_class,axis=1)","6c34ff9e":"neighbourhood_class_df.sort_values(by='neigbourhood_level',ascending=False)","c30f7d9f":" neighbourhood_class_df.drop('price_per_room',axis=1,inplace=True)","45e856c0":"# Joining between the Main Data Frame and the  neighbourhood_class data frame to get neighbourhood class\ndf_train = df_train.join(neighbourhood_class_df,on='neighbourhood')","04e85615":"df_train[\"neigbourhood_level\"].value_counts()","79c7e09a":"df_train.neigbourhood_level = df_train.neigbourhood_level.fillna(2)","21c2e8c1":"df_train = df_train.drop(['neighbourhood'],axis=1)","e0a9ba7e":"df_train = df_train.drop(['price_per_room'],axis=1)","2d173b82":"X_train, y_train = df_train.drop(['log_price',\"amenities\"],axis=1), df_train['log_price']","ec0968f1":"df = pd.read_csv(\"..\/input\/airbnb-price-prediction\/train.csv\")","3553447e":"#bathroom\n\ndf[\"bathrooms\"] = df['bathrooms'].fillna(1.0)\n\n#review \n\ndf[\"review_scores_rating\"] = df[\"review_scores_rating\"].fillna(0)\ndf[\"review_scores_rating\"] = df[\"review_scores_rating\"]\/100\n\n#bedrooms\n\ndf[\"bedrooms\"] = df[\"bedrooms\"].fillna(1.0)\n\n#number_of_reviews\n\ndf[\"number_of_reviews\"] = (df[\"number_of_reviews\"]\/530)\n\n#Beds\n\ndf[\"beds\"] = df[\"beds\"].fillna(2.0)\n\n#host_identity_verified, #host has profile pic\n\ndf.replace(to_replace = \"t\", value = 1,inplace=True) \ndf.replace(to_replace = \"f\", value = 0,inplace=True) \ndf[\"host_has_profile_pic\"] = df[\"host_has_profile_pic\"].astype(\"bool\")\ndf[\"host_identity_verified\"] = df[\"host_identity_verified\"].astype(\"bool\")\n\n#host response rate\n\ndf.host_response_rate = df.host_response_rate.apply(\n    lambda x: int(x[:len(x)-1])\/100\n     if isinstance(x,str) else x )\n\ndf.host_response_rate = df.host_response_rate.fillna(0.9438197629969498)\n\n###Drop\n#id\n#description\n ##first_review\n ##last_review\n ##host_since\n#host_has_profile_pic\n#name\n#thumbnail_url\n#zipcode\n\n\ndf = df.drop(['id','description','first_review','last_review','host_since',\n                          'host_has_profile_pic','name','thumbnail_url','zipcode'],axis=1)\ndf.columns\n\n# amenities\n \n\n#room_type\ndf = pd.concat([df, pd.get_dummies(df['room_type'], prefix='room_type')],axis=1) \ndf = df.drop(['room_type'],axis=1)\n\n#bed_type\ndf.bed_type = df.bed_type.map(lambda x: 2 if x=='Real Bed' else 1)\n\n#city\ndf = pd.concat([df, pd.get_dummies(df['city'], prefix='city')],axis=1)\ndf = df.drop(['city'],axis=1)\n\n#property_type\n\nnbh_counts = df.property_type.value_counts()\nother_nbhs = list(nbh_counts[nbh_counts <= 300].index)\ndf['property_type'] = df['property_type'].replace(other_nbhs,\"Other\")\ndf = pd.concat([df, pd.get_dummies(df['property_type'], prefix='property_type')],axis=1)\ndf = df.drop(['property_type'],axis=1)\n\n#cancellation_policy\n\ndf = pd.concat([df, pd.get_dummies(df['cancellation_policy'], prefix='cancellation_policy')],axis=1)\ndf = df.drop(['cancellation_policy'],axis=1)\n\n#cleaning_fee and host_identity_verified\ndf.replace(to_replace = True , value = 1,inplace=True) \ndf.replace(to_replace = False , value = 0,inplace=True)","c00b1676":"import re\namenities_set = set()\nfor amenitie in df['amenities']:\n    amenitie_set = set(re.sub(r'(\\\"|\\{|\\})', '', amenitie).split(','))\n    for piece in amenitie_set:\n        if \"translation missing\" not in piece and piece:\n            amenities_set.add(piece.strip())\n        ","914c8c9a":"def dum_col_filling(main_col_val, dum_col_name, main_col_name):\n    if dum_col_name.replace(main_col_name + ': ', '') in main_col_val:\n        return 1\n    else:\n        return 0\n    ","3244bbd8":"def set_to_dummies(df, column_name):\n    all_values_of_sets = amenities_set\n    dummy_columns_name = [column_name + ': ' + dum_col for dum_col in all_values_of_sets if dum_col]\n    dummy_df = pd.DataFrame(0, index=df.index, columns=dummy_columns_name)\n    df = pd.concat([dummy_df, df], axis = 1)\n    for dum_col_name in dummy_columns_name:\n        for i in df.index:\n            df[dum_col_name][i] = dum_col_filling(df[column_name][i], dum_col_name, column_name)\n    return df","f461d2ff":"df = set_to_dummies(df, 'amenities')","5daa2c5b":"# Adding price per room field (For neighnourhood price level)\n\ndf['price_per_room'] = (df.log_price) \/ (df.bedrooms)\n\ndf.neighbourhood.value_counts().head(30).plot.bar(color=(.0, 0.4, 0.9, 1))\n\nneighbourhood_avg_price = df[['neighbourhood','price_per_room']].groupby('neighbourhood')['price_per_room'].mean().sort_values()\n\ndf = df.replace([np.inf], np.nan)\n\ndf['price_per_room'].value_counts()\n\nneighbourhood_avg_price.replace(np.inf, np.nan,inplace=True)\nneighbourhood_avg_price.fillna(neighbourhood_avg_price.mean(),inplace=True)\n\nprint(neighbourhood_avg_price.sort_values(ascending=False))\nprint('---------------------------------------')\nprint(neighbourhood_avg_price.describe())\n\nneighbourhood_class_df = neighbourhood_avg_price.to_frame()\ntype(neighbourhood_class_df)\n\nneighbourhood_class_df = neighbourhood_avg_price.to_frame()\ntype(neighbourhood_class_df)\n\n# Converting neighbourhoods to Levels\ndef neigbourhood_class(row):\n  if row['price_per_room'] >=0 and row['price_per_room'] <= 3.683610:\n    return 1\n  elif row['price_per_room'] > 3.6836100 and row['price_per_room'] <= 3.868928:\n    return 2\n  elif row['price_per_room'] >3.868928 and row['price_per_room'] <= 4.194452: \n    return 3\n  else:\n    return 4\n  \nneighbourhood_class_df['neigbourhood_level'] = neighbourhood_class_df.apply(neigbourhood_class,axis=1)\n\nneighbourhood_class_df.sort_values(by='neigbourhood_level',ascending=False)\nneighbourhood_class_df.drop('price_per_room',axis=1,inplace=True)\n\n# Joining between the Main Data Frame and the  neighbourhood_class data frame to get neighbourhood class\ndf = df.join(neighbourhood_class_df,on='neighbourhood')\n\ndf[\"neigbourhood_level\"].value_counts()\n\ndf.neigbourhood_level = df.neigbourhood_level.fillna(2)\n\ndf = df.drop(['neighbourhood'],axis=1)\n\ndf = df.drop(['price_per_room'],axis=1)","d37afec6":"from sklearn.model_selection import KFold\n\nX, y = df.drop(['log_price',\"amenities\"],axis=1), df['log_price']\n\nX, X_test, y, y_test = train_test_split(X, y, test_size=.2, random_state=101) #hold out 20% of the data for final testing\n\n#this helps with the way kf will generate indices below\nX, y = np.array(X), np.array(y)","8c519180":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge #ordinary linear regression + w\/ ridge regularization\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures","68db1bbf":"from sklearn.model_selection import cross_val_score","56192a7d":"#LinearRegression\nlin_reg = LinearRegression()\nkf = KFold(n_splits=5, shuffle=True, random_state = 101)\nprint(cross_val_score(lin_reg, X, y, # estimator, features, target\n                cv=5, # number of folds \n                scoring='r2'))\n      \nprint(np.mean(cross_val_score(lin_reg, X, y, cv=kf, scoring='r2')))","ac1a2124":"\n#RidgeRegression\nlm_reg = Ridge(alpha=1)\n\nprint(cross_val_score(lm_reg, X, y, # estimator, features, target\n                cv=5, # number of folds \n                scoring='r2'))\n\nprint(np.mean(cross_val_score(lm_reg, X, y, cv=kf, scoring='r2')))\n","e0e94bad":"#XGBRegressor\nimport xgboost as xgb\n\nlm_xgb = xgb.XGBRegressor()\n\nprint(cross_val_score(lm_xgb, X, y, # estimator, features, target\n                cv=5, # number of folds \n                scoring='r2'))\n\nprint(np.mean(cross_val_score(lm_xgb, X, y, cv=kf, scoring='r2')))\n\n","58d847fb":"X, y = df.drop(['log_price',\"amenities\"],axis=1), df['log_price']\nX, X_test, y, y_test = train_test_split(X, y, test_size=.2, random_state=101)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=.25, random_state=101)","bb71ee62":"from sklearn import metrics\nfrom scipy import stats\n\ndef show_metrics(prediction_test, prediction_train, y_test, y_train):\n    MAE = round(metrics.mean_absolute_error(y_test, prediction_test), 2)\n    MSE = round(metrics.mean_squared_error(y_test, prediction_test), 2)\n    RMSE = round(np.sqrt(metrics.mean_squared_error(y_test, prediction_test)), 2)\n    RMSE_ratio_test= round(np.sqrt(metrics.mean_squared_error(y_test, prediction_test)) \/ np.mean(y_test),3)\n    RMSE_ratio_train = round(np.sqrt(metrics.mean_squared_error(y_train, prediction_train)) \/ np.mean(y_train),3)\n    R_2_test = round(metrics.explained_variance_score(y_test, prediction_test), 2)\n    R_2_train = round(metrics.explained_variance_score(y_train, prediction_train), 2)\n    \n    metrics_data = pd.DataFrame(data = [MAE, MSE, RMSE, RMSE_ratio_test, \n                                    RMSE_ratio_train, R_2_test, R_2_train]).T\n    \n    metrics_data.columns = ['MAE', 'MSE', 'RMSE', 'RMSE_ratio_test', \n                                    'RMSE_ratio_train', 'R_2_test', 'R_2_train']\n    display(metrics_data)","3d4d4161":"def analysis(model, X_train, X_test, y_train, y_test):\n    \n    prediction_test = model.predict(X_test)\n    prediction_train = model.predict(X_train)\n        \n    \n    show_metrics(prediction_test, prediction_train, y_test, y_train)\n    \n    sns.regplot(x = y_test, y = prediction_test, fit_reg=False)\n    plt.title('Prediction and real')\n    plt.show()\n\n    sns.distplot(y_test - prediction_test, bins = 50)\n    plt.title('Error variance')\n    plt.show()","f7675f1a":"import xgboost as xgb\nfrom xgboost import plot_importance\nfrom sklearn.metrics import  mean_squared_error, r2_score\n\n# Running model a XGB Regressor\nmodel = xgb.XGBRegressor()\n\n# Fit the model on training data\nmodel.fit(X_train, y_train)\n\n# Predict\npred_train = model.predict(X_train)\n\n# Validate\npred_val = model.predict(X_val)\n\nprint(\"\\nTraining MSE:\", round(mean_squared_error(y_train, pred_train),4))\nprint(\"Validation MSE:\", round(mean_squared_error(y_val, pred_val),4))\nprint(\"\\nTraining r2:\", round(r2_score(y_train, pred_train),4))\nprint(\"Validation r2:\", round(r2_score(y_val, pred_val),4))","b563d7c2":"from sklearn.ensemble import RandomForestRegressor\n\nanalysis(\n    model = model, \n    X_train = X_train,\n    X_test = X_test,\n    y_train = y_train,\n    y_test =  y_test\n)","3151f75b":"## 4- property_type","dfdaabd8":"# Distribution of log price","e2d5dd1a":"### Changed the datatype to bool of these two columns:","ef887b26":"## 7- first_review","72d0d4c3":"#### Try2","009919fb":"# City","38aab002":"> #### 9.drob","2538f560":"# Correlation","abb58a2a":"# Date","52143e33":"## 5-cancellation_policy","beda1692":"> #### 8.host response rate","618ff4ca":"Airbnb is an online housing platform that provides users to list, discover, and book accommodations for their users all across the world. Hosts can offer their property spaces to guests for short or long periods of time. These accommodations differ from the typical hotel room because of the ability to live and witness the culture of living in the area of choosing. Airbnb\u2019s listings offer a huge range of options ranging from community bedrooms to luxury housing, all in one platform. There is a peer-review system where guests can leave reviews after reservations are made. These reviews can often dictate how much owners can book\/earn.The goal of this project is to apply Linear Regression on Airbnb dataset to predict the price based on the features of those courses (log_price, property_type, room_type, etc.). First, we start getting the data then start to clean them remove nulls values, fill null values and extract numbers from a string. After that, we started to explore the dataset and split the data into %60 train\/%20validation, and %20 for the test. Finally, we tried different types of models to find the best one that fit our data which is XGB regression.","fd4e598e":"# Finding missing values","1afbed3d":"### 3- city","68b397f9":"# Cancellation policy","9ea5afc5":"> #### 6. host has profile pic","e46efbaf":"## 6-cleaning_fee and host_identity_verified","92462e67":"# Factorization of categorical columns","66d272ec":"# DF","1fabd38b":"> #### 2. review","f49562da":"#### Try1","29897c5a":"# Handling Missing Values ","b19daa55":"Missing values in column \"review_scores_rating\" are related to column \"number_of_reviews\".","4caf5633":"> #### 4. number_of_reviews","74b3b419":"# Most popular Neighbourhood","f4f82500":"# neighbourhood","4562c07f":"> #### 1. Bathrooms","508adffa":"> #### 3. bedrooms","3eb06868":"# Airbnb price prediction","ed25fdac":"> #### 10.amenities","9ce8b2b5":"# Split","33644ba0":"##### Abstract","497bd13e":"# CV","f9f476a3":"# Property type","343e0448":"### 2- bed_type","f08de79e":"the columns host_has_profile_pic and host_identity_verified has boolean values true and false\u00b6\n","fe371515":"### 1- room_type","f9023781":"# info","e625a3f2":"> #### 7. host_identity_verified","e27e1c5c":"> #### 5. beds","145da5fc":"# beds","92f73474":"# bedrooms","b2af2b97":"# Room type","caa4e057":"# EDA"}}