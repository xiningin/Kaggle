{"cell_type":{"f0acb87a":"code","b7a803c4":"code","35cc976d":"code","0fa5140e":"code","e2f3ac98":"code","a34aff50":"code","1184e557":"code","09f38f4d":"code","4d9f523f":"code","ae059731":"code","6f96f1a2":"code","52b2c856":"code","5062f2d0":"code","8b783271":"code","fbcc4400":"code","115178e2":"code","ba4b3734":"code","20c224a6":"code","d28d4c5c":"code","9340dbbd":"code","e2eb72ec":"code","c01552aa":"code","1f80fd36":"code","6d925746":"code","435cd6c7":"code","2d9a4c4a":"code","93e9dd8d":"code","8ae914bd":"code","8f04ad74":"code","d007ef91":"code","5bb72fab":"code","8acb1868":"code","904b3826":"code","c30639ce":"code","3d78e477":"code","cde7a54d":"code","5d5e38b9":"code","fdcee8f6":"code","d52724ae":"code","4636ec81":"code","c2209d72":"code","88bdde59":"code","e1b31ac8":"code","b6a3d5db":"code","3aeb6cbc":"code","65cd520e":"code","3d6bbe30":"code","1c0ad8a1":"code","83ed24ba":"code","eee7dc1a":"code","2d302801":"code","3e60f4c3":"code","86fd4d0f":"code","46221538":"code","12e8ba67":"code","5314a207":"code","3a457e92":"code","addb053f":"code","f84beb99":"code","3e3e333b":"code","46134939":"code","edfb2a51":"code","b11b0670":"code","bf188941":"code","78894c1c":"code","6c2a3514":"code","fdcc710e":"code","09ea7368":"code","f41cb2ca":"code","6fb05030":"code","eaf3cb1b":"code","6b2c30c1":"code","c83cc332":"code","11a8efdc":"code","c09af13c":"code","eac80397":"code","8903aec5":"code","dbdee754":"code","fb1340cf":"code","18dc44e6":"markdown","5319ffaa":"markdown","5efefd5d":"markdown","c503515e":"markdown","facd1c6b":"markdown","53fa32af":"markdown","9c6f18ac":"markdown","ef948bf6":"markdown","43fb1a4c":"markdown","c3f7b9b4":"markdown","6d033bfe":"markdown","e54a7fa4":"markdown","84df4006":"markdown","c653d6be":"markdown","68b8f081":"markdown","a97829b8":"markdown","017df5b4":"markdown","9fa10501":"markdown","fed9cb5c":"markdown"},"source":{"f0acb87a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7a803c4":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","35cc976d":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0fa5140e":"df.shape,df_test.shape","e2f3ac98":"df.head(2)","a34aff50":"df_test.head(2)","1184e557":"# df.info()\ndf.isnull().sum()","09f38f4d":"# df_test.info()\ndf_test.isnull().sum()","4d9f523f":"temp = df.describe()\ntemp.style\\\n.background_gradient(cmap='RdPu',subset=['Age'])\\\n.background_gradient(cmap='RdBu',subset=['Fare'])\\\n.background_gradient(cmap='cool',subset=['Survived'])\\","ae059731":"g = sns.barplot(x='Sex',y='Survived',data=df)","6f96f1a2":"print('Male Survived   :',round(df['Survived'][df['Sex']=='male'].value_counts(normalize=True),2)[1]*100,'%')\nprint('Female Survived :',round(df['Survived'][df['Sex']=='female'].value_counts(normalize=True),2)[1]*100,'%')","52b2c856":"for col in ['SibSp','Parch']:\n    sns.catplot(x=col,y='Survived',data=df,kind='point',aspect=2) #vertical line shows the error","5062f2d0":"g = sns.countplot(x='Survived',hue='Pclass',data=df,palette='cool')","8b783271":"g = sns.catplot(x='Pclass',y='Survived',data=df,kind='point',aspect=2)","fbcc4400":"print('Pclass=1 Survived :',round(df['Survived'][df['Pclass']==1].value_counts(normalize=True)[1]*100,2),'%')\nprint('Pclass=2 Survived :',round(df['Survived'][df['Pclass']==2].value_counts(normalize=True)[1]*100,2),'%')\nprint('Pclass=3 Survived :',round(df['Survived'][df['Pclass']==3].value_counts(normalize=True)[1]*100,2),'%')","115178e2":"df_temp = df.copy()\ndf['Cabin'] = np.where(df['Cabin'].isnull(),0,1)\ndf_test['Cabin'] = np.where(df_test['Cabin'].isnull(),0,1)","ba4b3734":"g = sns.catplot(x='Cabin',y='Survived',data=df,kind='point',aspect=2)","20c224a6":"print('Survived people with assigned cabin     :',round(df['Survived'][df['Cabin']==1].value_counts(normalize=True)[1]*100,2),'%')\nprint('Survived people with non-assigned cabin :',round(df['Survived'][df['Cabin']==0].value_counts(normalize=True)[1]*100,2),'%')","d28d4c5c":"print('Survived female without assigned cabin :',round(df['Survived'][(df['Sex']=='female')&(df['Cabin']==0)].value_counts(normalize=True)[1]*100,2),'%')\nprint('Survived female without assigned cabin and Pclass=3 :',round(df['Survived'][(df['Sex']=='female')&(df['Cabin']==0)&(df['Pclass']==3)]\n      .value_counts(normalize=True)[1]*100,2),'%')","9340dbbd":"print('Survived male without assigned cabin and Pclass=3 :',round(df['Survived'][(df['Sex']=='male')&(df['Cabin']==0)&(df['Pclass']==3)]\n      .value_counts(normalize=True)[1]*100,2),'%')","e2eb72ec":"df_temp['Floor'] = df_temp['Cabin'].astype(str).str[0]\ndf_temp['Floor'].replace({'n':np.nan},inplace=True)\ng = sns.catplot(\"Survived\", col=\"Floor\", col_wrap=4,\n                    data=df_temp[df_temp.notnull()],\n                    kind=\"count\", height=2.5, aspect=.8,hue='Sex')","c01552aa":"g = sns.FacetGrid(df_temp, col=\"Pclass\", sharex=False,\n                  gridspec_kws={\"width_ratios\": [5, 3, 3]})\ng = g.map(sns.boxplot, \"Floor\", \"Age\")","1f80fd36":"df_temp[(df_temp['Cabin'].isnull()) & (df_temp['Pclass'] == 1)].shape","6d925746":"del df_temp\ng = sns.catplot(x='Embarked',y='Survived',data=df,kind='point',aspect=2)","435cd6c7":"df.groupby(by=['Embarked'])['Survived'].sum()","2d9a4c4a":"df['Embarked'].value_counts()","93e9dd8d":"print('Survived people with Embarked S :',\n      round(df['Survived'][df['Embarked']=='S'].value_counts(normalize=True)[1]*100,2),'%')\nprint('Survived people with Embarked C :',\n      round(df['Survived'][df['Embarked']=='C'].value_counts(normalize=True)[1]*100,2),'%')\nprint('Survived people with Embarked Q :',\n      round(df['Survived'][df['Embarked']=='Q'].value_counts(normalize=True)[1]*100,2),'%')","8ae914bd":"print('Females survived with Embarked C and Pclass=1 :',\n      round(df['Survived'][(df['Embarked']=='C')&(df['Pclass']==1)&(df['Sex'] == 'female')]\n      .value_counts(normalize=True)[1]*100,2),'%')","8f04ad74":"print('Males survived with Embarked S and Pclass=3 :',\n      round(df['Survived'][(df['Embarked']=='S')&(df['Pclass']==3)&(df['Sex'] == 'male')]\n      .value_counts(normalize=True)[1]*100,2),'%')","d007ef91":"sns.set_style('whitegrid')\ndf['Age'].hist(bins=20,color='green',alpha=0.85)","5bb72fab":"g = sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='gist_stern_r')","8acb1868":"df.isnull().sum()","904b3826":"df[df['Embarked'].isnull()]","c30639ce":"df_test.isnull().sum()","3d78e477":"sns.boxplot(x='Embarked',y='Fare',hue='Pclass',data=df)\nplt.grid(color='black')\n# plt.figure(figsize=(50,50))\nplt.show()","cde7a54d":"df['Embarked'] = df['Embarked'].fillna('C')","5d5e38b9":"df_test[df_test['Fare'].isnull()]","fdcee8f6":"temp = df_test[(df_test['Pclass'] == 3) & (df_test['Embarked'] == 'S')]['Fare'].median()\ndf_test['Fare'] = df_test['Fare'].fillna(temp)","d52724ae":"df['Sex'] = np.where(df['Sex'] == 'male',1,0)\ndf_test['Sex'] = np.where(df_test['Sex'] == 'male',1,0)","4636ec81":"from sklearn.preprocessing import LabelEncoder\nlabelEnc = LabelEncoder()\ndf['Embarked'] = labelEnc.fit_transform(df['Embarked'])\ndf_test['Embarked'] = labelEnc.fit_transform(df_test['Embarked'])","c2209d72":"passengerId = df_test['PassengerId']\ndf.drop(['Name','Ticket','PassengerId'],axis = 1,inplace = True)\ndf_test.drop(['Name','Ticket','PassengerId'],axis = 1,inplace = True)","88bdde59":"g = sns.boxplot(x='Pclass',y='Age',data=df,palette='cool')","e1b31ac8":"from sklearn.ensemble import RandomForestRegressor\nfor dataset in [df,df_test]:\n    train_missing_age = dataset.loc[(dataset['Age'].notnull())]\n    test_missing_age  = dataset.loc[(dataset['Age'].isnull())]\n    \n    X = train_missing_age.drop('Age',axis=1)\n    Y = train_missing_age['Age']\n    \n    RFR = RandomForestRegressor(n_estimators=150,n_jobs=-1)\n    RFR.fit(X,Y)\n    age_predicted = RFR.predict(test_missing_age.drop('Age',axis=1))\n    dataset.loc[(dataset['Age'].isnull()),'Age'] = age_predicted","b6a3d5db":"df.head(2)","3aeb6cbc":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(df.drop('Survived',axis=1),df['Survived'],test_size = 0.2)","65cd520e":"from sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score\nfrom sklearn.model_selection import GridSearchCV","3d6bbe30":"from sklearn.ensemble import ExtraTreesClassifier\nETF = ExtraTreesClassifier()","1c0ad8a1":"param_grid = {\n                'n_estimators' : [10,25,50],\n                'criterion' : ['gini','entropy'] \n            }\ngrid = GridSearchCV(ExtraTreesClassifier(), param_grid, refit = True, verbose = 3) #cv = 5\ngrid.fit(x_train, y_train) ","83ed24ba":"print(grid.best_params_) \nprint(grid.best_estimator_)","eee7dc1a":"ETF = ExtraTreesClassifier(n_estimators = grid.best_params_['n_estimators'], \n                        criterion =grid.best_params_['criterion'],\n                         max_features = 'auto')  #x_train.shape[1]) | auto = sqrt(n_features)\nETF.fit(x_train,y_train)","2d302801":"ETF_y_pred = ETF.predict(x_test)\nsns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(ETF)')\nsns.distplot(ETF_y_pred,hist=False,color='b',label='Predicted')","3e60f4c3":"fi = ETF.feature_importances_\nfi_normalized = np.std([tree.feature_importances_ for tree in \n                                        ETF.estimators_], \n                                        axis = 0) ","86fd4d0f":"fig = make_subplots(rows=2, cols=1,shared_xaxes=True)\n\nfig.add_trace(go.Bar(x=x_train.columns,y=fi,name='Non-normalized',\n                        marker_color='rgb(171,241,255)',marker_line_color='rgb(12,0,335)',\n                        marker_line_width=2, opacity=0.6),\n                row=1,col=1)\n\nfig.add_trace(go.Bar(x=x_train.columns,y=fi_normalized,name='Normalized',\n                        marker_color='#fc888d',marker_line_color='#6b0206',\n                        marker_line_width=2, opacity=0.6),\n                row=2,col=1)\nfig.update_layout(template='simple_white',title='Comparing different feature importance',height=900)\nfig.show()","46221538":"ETF_accuracy = accuracy_score(ETF_y_pred,y_test)\nETF_recall = recall_score(ETF_y_pred,y_test)\nETF_precision = precision_score(ETF_y_pred,y_test)\nprint(classification_report(ETF_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(ETF_y_pred,y_test))","12e8ba67":"from sklearn.ensemble import RandomForestClassifier\nparam_grid = {\n                'n_estimators':[10,25,50,100],\n                'criterion':['gini','entropy'],\n                'n_jobs':[-1], # -1 indicates the processing in parallel using all CPUs\n                'max_features':['auto','log2',None] #4 x 2 x 3 x 5(cv) = 120 fits\n}","5314a207":"RFC_grid = GridSearchCV(RandomForestClassifier(), param_grid, refit = True, verbose = 3)\nRFC_grid.fit(x_train, y_train) ","3a457e92":"print(RFC_grid.best_params_) \nprint(RFC_grid.best_estimator_) ","addb053f":"RFC = RandomForestClassifier(n_estimators = RFC_grid.best_params_['n_estimators'],\n                             criterion = RFC_grid.best_params_['criterion'],\n                             max_features = RFC_grid.best_params_['max_features'],\n                             n_jobs = RFC_grid.best_params_['n_jobs'])\nRFC.fit(x_train, y_train)","f84beb99":"RFC_y_pred = RFC.predict(x_test)\nRFC_accuracy = accuracy_score(RFC_y_pred,y_test)\nRFC_recall = recall_score(RFC_y_pred,y_test)\nRFC_precision = precision_score(RFC_y_pred,y_test)\nprint(classification_report(RFC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(RFC_y_pred,y_test))","3e3e333b":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(RFC)')\nsns.distplot(RFC_y_pred,hist=False,color='b',label='Predicted')","46134939":"fi = RFC.feature_importances_\nfi_normalized = np.std([tree.feature_importances_ for tree in \n                                        RFC.estimators_], \n                                        axis = 0) \nfig = make_subplots(rows=2, cols=1,shared_xaxes=True)\n\nfig.add_trace(go.Bar(x=x_train.columns,y=fi,name='Non-normalized',\n                        marker_color='rgb(171,241,255)',marker_line_color='rgb(12,0,335)',\n                        marker_line_width=2, opacity=0.6),\n                row=1,col=1)\n\nfig.add_trace(go.Bar(x=x_train.columns,y=fi_normalized,name='Normalized',\n                        marker_color='#fc888d',marker_line_color='#6b0206',\n                        marker_line_width=2, opacity=0.6),\n                row=2,col=1)\nfig.update_layout(template='simple_white',title='Comparing different feature importance(RFC)',height=900)\nfig.show()","edfb2a51":"from sklearn.ensemble import GradientBoostingClassifier\nGBC = GradientBoostingClassifier(random_state=10)\nGBC.fit(x_train,y_train)","b11b0670":"GBC_y_pred = GBC.predict(x_test)\nGBC_accuracy = accuracy_score(GBC_y_pred,y_test)\nGBC_recall = recall_score(GBC_y_pred,y_test)\nGBC_precision = precision_score(GBC_y_pred,y_test)\nprint(classification_report(GBC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(GBC_y_pred,y_test))","bf188941":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(GBC)')\nsns.distplot(GBC_y_pred,hist=False,color='b',label='Predicted')","78894c1c":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=10,max_iter=200)\nlr.fit(x_train,y_train)","6c2a3514":"lr_y_pred = lr.predict(x_test)\nlr_accuracy = accuracy_score(lr_y_pred,y_test)\nlr_recall = recall_score(lr_y_pred,y_test)\nlr_precision = precision_score(lr_y_pred,y_test)\nprint(classification_report(lr_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(lr_y_pred,y_test))","fdcc710e":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(Logistics Reg.)')\nsns.distplot(lr_y_pred,hist=False,color='b',label='Predicted')","09ea7368":"from sklearn.tree import DecisionTreeClassifier\nDTC = DecisionTreeClassifier(random_state=10)\nDTC.fit(x_train,y_train)","f41cb2ca":"DTC_y_pred = DTC.predict(x_test)\nDTC_accuracy = accuracy_score(DTC_y_pred,y_test)\nDTC_recall = recall_score(DTC_y_pred,y_test)\nDTC_precision = precision_score(DTC_y_pred,y_test)\nprint(classification_report(DTC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(DTC_y_pred,y_test))","6fb05030":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(DTC)')\nsns.distplot(DTC_y_pred,hist=False,color='b',label='Predicted')","eaf3cb1b":"from sklearn.svm import LinearSVC  #~SVC(kernel = 'linear')\nSVC = LinearSVC()\nSVC.fit(x_train,y_train)","6b2c30c1":"SVC_y_pred = SVC.predict(x_test)\nSVC_accuracy = accuracy_score(SVC_y_pred,y_test)\nSVC_recall = recall_score(SVC_y_pred,y_test)\nSVC_precision = precision_score(SVC_y_pred,y_test)\nprint(classification_report(SVC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(SVC_y_pred,y_test))","c83cc332":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(SVC)')\nsns.distplot(SVC_y_pred,hist=False,color='b',label='Predicted')","11a8efdc":"from sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(n_jobs=-1)\nKNN.fit(x_train,y_train)","c09af13c":"KNN_y_pred = KNN.predict(x_test)\nKNN_accuracy = accuracy_score(KNN_y_pred,y_test)\nKNN_recall = recall_score(KNN_y_pred,y_test)\nKNN_precision = precision_score(KNN_y_pred,y_test)\nprint(classification_report(KNN_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(KNN_y_pred,y_test))","eac80397":"sns.distplot(y_test,hist=False,color='r',label='Actual')\nplt.title('Actual v\/s Predicted(KNN)')\nsns.distplot(KNN_y_pred,hist=False,color='b',label='Predicted')","8903aec5":"models = ['ExtraTreeClassifier','RandomForestClassifier','GradientBoostingClassifier',\n          'LogisticsRegression','DecisionTreeClassifier','SVC','KNN']\n\nacc_score = [ETF_accuracy,RFC_accuracy,GBC_accuracy,lr_accuracy,DTC_accuracy,SVC_accuracy,KNN_accuracy]\npre_score = [ETF_precision,RFC_precision,GBC_precision,lr_precision,DTC_precision,SVC_precision,KNN_precision]\nrec_score = [ETF_recall,RFC_recall,GBC_recall,lr_recall,DTC_recall,SVC_recall,KNN_recall]\n\ndata = pd.DataFrame({'models':models,\n                     'accuracy_score':acc_score,\n                     'precision_score':pre_score,\n                     'recall_score':rec_score})\ndata.sort_values(by='accuracy_score',ascending=False).style\\\n        .background_gradient(cmap='RdPu',subset=['accuracy_score'])\\\n        .background_gradient(cmap='OrRd',subset='precision_score')\\\n        .background_gradient(cmap='Greens',subset='recall_score')","dbdee754":"pred = ETF.predict(df_test)\n\ndf_test['Survived'] = pred\ndf_test['PassengerId'] = passengerId\ndf_test.head()","fb1340cf":"df_test[['PassengerId' ,'Survived']].to_csv('predictions.csv' , index=False)","18dc44e6":"# Reference\n* https:\/\/github.com\/yesdeepakmittal\/Titanic-Passenger_Survival_Prediction\/blob\/master\/Titanic_updated.ipynb\n* https:\/\/github.com\/yesdeepakmittal\/delinquencymodel","5319ffaa":"<h3>Sex v\/s Survival<\/h3>","5efefd5d":"<h1>Modelling<\/h1>","c503515e":"<h3>\u2b50Decision Tree Classifier<\/h3>","facd1c6b":"<h3>Family size v\/s Survival<\/h3>","53fa32af":"<h3>\u2b50Random Forest Classifier<\/h3>","9c6f18ac":"<h3>\u2b50KNN<\/h3>","ef948bf6":"<h3>\u2b50Gradient Boosting Classifier<\/h3>","43fb1a4c":"* According to the missing data, the fare is 80 for Pclass = 1\n* According to the boxplot, the median fare for Pclass = 1 is 80\n* It is more likely that the missing Embarked is C such that Pclass = 1 and Fare ~ 80","c3f7b9b4":"<h3>\u2b50Logistics Regression<\/h3>","6d033bfe":"<h3>\u2b50Extremely Randomised Tree Classifier<\/h3>","e54a7fa4":"<h1>Analysing features<\/h1>","84df4006":"<h3>Cabin v\/s Survival<\/h3>","c653d6be":"<h3>Class v\/s Survival<\/h3>","68b8f081":"<h3>Age v\/s Survival<\/h3>","a97829b8":"* It is found that the people having large family(Parch) and more siblings(Sibsp) were less likely to survive.","017df5b4":"<h3>Embarked v\/s Survival<\/h3>","9fa10501":"<h3>\u2b50Support Vector Machine - SVC<\/h3>","fed9cb5c":"<h1>Missing value(s) imputation<\/h1>"}}