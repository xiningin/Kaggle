{"cell_type":{"95960981":"code","1c4b6fd0":"code","94455a7e":"code","7e3e8a7d":"code","56c51515":"code","49bef62e":"code","df183cab":"code","8385cf21":"code","d88b7eea":"code","6426565f":"code","16f171ec":"code","6e0d9719":"code","dddf0a1b":"code","e7ce9caa":"code","2b1a3fc4":"markdown","767a8bbf":"markdown","a5d18b4a":"markdown","59afb3b7":"markdown","d5d3a187":"markdown","70990ffc":"markdown"},"source":{"95960981":"from tensorflow import TensorShape\nfrom tensorflow.keras import backend\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.models import load_model, Model, Sequential\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten","1c4b6fd0":"siamese_model = load_model(\"..\/input\/face-detection-using-siamese-networks\/Model-epoch-29\/\")\nsiamese_model.summary()","94455a7e":"plot_model(siamese_model, show_shapes=True, show_layer_names=True)","7e3e8a7d":"def convolution_model():\n    input_shape = (128, 128, 3)\n\n    # Define the tensors for the input image\n    image_input = Input(input_shape, name=\"Input\")\n\n    # Defining the pretrained base model\n    base_model = Xception(\n        input_shape=input_shape,\n        weights=None,\n        include_top=False,\n        pooling='max',\n    )\n\n    model = Sequential([\n        base_model,\n        Flatten(),\n        Dense(2048, activation='sigmoid')\n    ], name=\"Xception\")\n\n    # Connect the inputs with the outputs\n    return Model(inputs=image_input, outputs=model(image_input), name=\"Convolution_Model\")","56c51515":"conv_model = convolution_model()\nconv_model.summary()","49bef62e":"plot_model(conv_model, show_shapes=True, show_layer_names=True)","df183cab":"def similarity_model():\n    # Input for the encodings (feature vectors) for the two images.\n    encoded_l = Input((2048,), name=\"Tensor1\")\n    encoded_r = Input((2048,), name=\"Tensor2\")\n\n    # Add a Subtract layer to compute the absolute difference between the encodings\n    l1_layer = Lambda(lambda tensors: backend.abs(tensors[0] - tensors[1]), name='Distance')\n    l1_distance = l1_layer([encoded_l, encoded_r])\n\n    # Add a dense layer with a sigmoid unit to generate the similarity score\n    prediction = Dense(1, activation='sigmoid', name='Prediction')(l1_distance)\n\n    # Connect the inputs with the outputs\n    return Model(inputs=[encoded_l, encoded_r], outputs=prediction, name=\"Similarity_Model\")","8385cf21":"similar_model = similarity_model()\nsimilar_model.summary()","d88b7eea":"plot_model(similar_model, show_shapes=True, show_layer_names=True)","6426565f":"seq_weights = siamese_model.layers[2].get_weights()\nconv_model.layers[1].set_weights(seq_weights)\n\ndense_weights = siamese_model.layers[4].get_weights()\nsimilar_model.layers[3].set_weights(dense_weights)","16f171ec":"# Saving the models\nconv_model.save(\"models\/Conv_Model\")\nsimilar_model.save(\"models\/Similar_Model\")","6e0d9719":"# Saving the model weights\nconv_model.save_weights(\"weights\/cache_weights\")\nsimilar_model.save_weights(\"weights\/similar_weights\")","dddf0a1b":"%%time\nconv_model = load_model(\"models\/Conv_Model\")","e7ce9caa":"%%time\nconv_model = convolution_model()\nconv_model.load_weights(\"weights\/cache_weights\")","2b1a3fc4":"### Loading the weights from Siamese Model to new ones.","767a8bbf":"### Creating the Similarity model","a5d18b4a":"### Creating the Convolution model","59afb3b7":"### Loading the Siamese Model","d5d3a187":"### Loading the saved models\n\nCreating the model architecture and Loading the weights is way quicker than loading the model itself.","70990ffc":"### Saving the new models"}}