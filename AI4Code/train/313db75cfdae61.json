{"cell_type":{"9fbd4cde":"code","c88a9f5c":"code","ed826d8a":"code","19782497":"code","3a86ef35":"code","abf2f929":"code","7dbc7876":"code","96a0dd02":"code","f916b96e":"code","b2d6ba8c":"code","4444f618":"code","e941a5cf":"code","c30950b4":"code","efa16d21":"code","53de45ef":"code","3b98b91d":"code","44302826":"code","b27a7290":"code","7de0dab1":"code","8cb7c5a6":"code","93bb2bf0":"code","ecd2db64":"code","e29ea152":"code","a223ac3f":"code","d4822b7d":"code","d0711e12":"code","1b97db01":"code","4b66b21c":"code","ac696d04":"code","455946ec":"code","39d1bd3c":"code","bc260467":"code","d7c46706":"code","1f0ff659":"code","da55c839":"code","490d450a":"code","cde1e022":"code","59e729e7":"code","b17e9e0e":"code","e8668f1b":"code","f19fcde2":"markdown","9b53ad77":"markdown","c746276b":"markdown","09c4846a":"markdown","ecd499ba":"markdown","2591dd37":"markdown","1e06a670":"markdown","d3ab9f82":"markdown","11bf4283":"markdown","0dda4a12":"markdown","472c58c7":"markdown","69fcb86d":"markdown","a1899e3e":"markdown","5c8d3a10":"markdown","f1a3cd68":"markdown","47cea1c4":"markdown","4b66652c":"markdown","00762b6a":"markdown","228b748f":"markdown","1a0817cb":"markdown","94e29d25":"markdown","1dc3cbec":"markdown","5ad3ff2a":"markdown","cac9cb63":"markdown","ec8ad0df":"markdown","6300b6ea":"markdown","9c254eeb":"markdown","47032bbb":"markdown","b6211481":"markdown","4a583154":"markdown","c75cf49b":"markdown","851cefac":"markdown","e080aff2":"markdown","bea9021d":"markdown"},"source":{"9fbd4cde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\ndata = pd.read_csv(\"..\/input\/data.csv\")\ndf= pd.DataFrame(data)\n# Any results you write to the current directory are saved as output.","c88a9f5c":"print(df.head())","ed826d8a":"pd.set_option('display.max_column',10)\npd.set_option('display.max_rows',10)\nsns.set(style = 'dark', palette = 'colorblind', color_codes = True)","19782497":"print(data.info)","3a86ef35":"print(data.columns)","abf2f929":"print(data.describe())","7dbc7876":"print(df.shape)","96a0dd02":"plt.rcParams['figure.figsize'] = (20,16)\nHM = sns.heatmap(df[['Age', 'Overall', 'Potential', 'Value', 'Wage',\n                'Acceleration', 'Aggression', 'Agility', 'Balance', 'BallControl', \n                'Body Type','Composure', 'Crossing','Dribbling', 'FKAccuracy', 'Finishing', \n                'HeadingAccuracy', 'Interceptions','International Reputation',\n                'Joined', 'Jumping', 'LongPassing', 'LongShots',\n                'Marking', 'Penalties', 'Position', 'Positioning',\n                'ShortPassing', 'ShotPower', 'Skill Moves', 'SlidingTackle',\n                'SprintSpeed', 'Stamina', 'StandingTackle', 'Strength', 'Vision',\n                'Volleys']].corr(),annot = True, cmap = 'Blues', linewidths = 0.5)\nHM.set_title(label = 'Heatmap of the Dataset', fontsize = 20)\nprint(HM)\nplt.show()","f916b96e":"quality = ('Agility', 'Balance', 'Dribbling', 'SprintSpeed')\nfor index, qual in enumerate(quality):\n   plt.subplot(len(quality)\/4+1, 4, index+1)\n   sns.regplot(x = 'Acceleration', y = qual, data = df)\nplt.show()","b2d6ba8c":"print('ELDEST PLAYERS')\neldest = df.sort_values('Age', ascending = False)[['Name','Nationality','Age']].head(10)\nprint(eldest)","4444f618":"print('YOUNGEST PLAYERS')\nyoungest = df.sort_values('Age', ascending = True)[['Name','Nationality','Age']].head(10)\nprint(youngest)","e941a5cf":"some_clubs = ('Juventus', 'Real Madrid', 'Paris Saint-Germain', 'FC Barcelona', 'Legia Warszawa', 'Manchester United')\ndf_club = df.loc[df['Club'].isin(some_clubs) & df['Age']]\nprint(df_club.head(5))\n","c30950b4":"fig, CAax = plt.subplots()\nfig.set_size_inches(10,20)\nCAax = sns.violinplot(x = 'Club', y = 'Age' , data = df_club)\nCAax.set_title('Distribution of Age in some clubs', fontsize = 20)\nplt.show()","efa16d21":"top_30 = df['Nationality'].value_counts()[:30]\nplt.figure(figsize=(16,10))\nsns.barplot(top_30.index, top_30.values)\nplt.xticks(rotation=45)\nplt.title('Most frequent nationality of player')\nplt.show()","53de45ef":"plt.figure(figsize=(16,10))\nsns.countplot(x='Preferred Foot', data=df)\nplt.title('Left Foot Vs Right Foot')","3b98b91d":"#Oldest Team\nOldest = df.groupby('Club')['Age'].mean().sort_values(ascending = False).head()\nprint(Oldest.head(5))","44302826":"#Youngest Team\nYoungest = df.groupby('Club')['Age'].mean().sort_values(ascending = True).head()\nprint(Youngest.head(5))","b27a7290":"some_club = ['Manchester United', 'Manchester City', 'FC Barcelona', 'Real Madrid','Chelsea','Juventus']\ndf_clubs = df.loc[df['Club'].isin(some_club) & df['Age'] & df['Overall']]\nprint(df_clubs.head())","7de0dab1":"fig, Clax = plt.subplots()\nfig.set_size_inches(10,10)\nClax = sns.barplot(x = df_clubs['Club'], y = df_clubs['Overall'], palette = 'rocket' )\nClax.set_title('Relation between Club and their Overalls', fontsize = 16)\nplt.show()","8cb7c5a6":"#Top 10 Left Footed Players\nprint(df[df['Preferred Foot'] == 'Left'][['Name','Club','Overall']].head(10))","93bb2bf0":"#Top 10 Right Footed Players\nprint(df[df['Preferred Foot'] == 'Right'][['Name','Club','Overall']].head(10))","ecd2db64":"sns.lmplot(x = 'BallControl', y = 'Dribbling', data = df, scatter_kws = {'alpha':1} ,col = 'Preferred Foot')\nplt.show()","e29ea152":"sns.jointplot(x = 'Dribbling', y = 'Crossing', data = df, kind = 'hex')","a223ac3f":"def Value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\ndf['Value_float'] = df['Value'].apply(Value_to_int)\nprint('Top 10 Clubs with Market Value')\nprint(df.groupby('Club')['Value_float'].sum().sort_values(ascending = False).head(10))","d4822b7d":"def Wage_to_float(df_wage):\n    try:\n        wage = float(df_wage[1:-1])\n        suffix = df_wage[-1:]\n        if suffix == 'K':\n            wage = wage * 1000\n    except ValueError:\n        wage = 0\n    return wage   \ndf['Wages'] = df['Wage'].apply(Wage_to_float)\nprint(df['Wages'])","d0711e12":"print('Least 10 CLubs with Market Value')\nprint(df.groupby('Club')['Value_float'].sum().sort_values(ascending = True).head(10))\n","1b97db01":"print(df.groupby('Club')['Value_float'].sum().sort_values(ascending = False).head(10))","4b66b21c":"plt.figure(figsize = (25,16))\nsns.scatterplot(df['Value_float']\/1000000 , df['Wages'], hue = df['Preferred Foot'])\nplt.ylim(0,600000)","ac696d04":"print('Top 10 Players with their Age and Club Names')\nprint(df.groupby(['Name','Age','Club'])['Overall'].max().sort_values(ascending = False).head(10))","455946ec":"print('Clubs with their total numbers of Players')\nprint(df.groupby('Club')['Name'].count().sort_values(ascending = False))","39d1bd3c":"print('Top 10 team with best players')\nprint(df.groupby(['Club'])['Overall'].mean().sort_values(ascending = False).head(10))","bc260467":"print(df.groupby('Club')['Overall'].mean().sort_values(ascending = True).head(10))","d7c46706":"x = df['Age']\nAgex = sns.distplot(x , bins = 60 , kde = True ,color = 'g')\nAgex.set_title('Numbers of players according to their age')\nAgex.set_xlabel('Age')\nAgex.set_ylabel('Numbers of Players')\nplt.show()\n","1f0ff659":"value = df['Value_float']\nsns.regplot(x = value\/1000000, y = 'Overall', data = df , fit_reg = False)\nplt.show()","da55c839":"agepot = sns.regplot(x = 'Age', y = 'Potential',fit_reg = True ,data = df )\nagepot.set_title('Relation between Age and Potential of the Player',fontsize = 16)\nplt.show()","490d450a":"AOax = sns.violinplot(x = 'Age', y = 'Overall', data = df)\nAOax.set_title('Relation between the Age and Overall')\nplt.xticks(Rotation = 70)\nplt.show()","cde1e022":"SS_mean = df['SprintSpeed'].mean()\ndf['SprintSpeed'] = df['SprintSpeed'].fillna(SS_mean)\nS_mean = df['Stamina'].mean()\ndf['Stamina'] = df['Stamina'].fillna(S_mean)\n\ncols = ['Age','Overall','Potential','SprintSpeed','Stamina']\nsns.pairplot(df[cols],height = 2.5)\nplt.show()","59e729e7":"stats.probplot(df['Overall'],plot = plt)\nplt.show()","b17e9e0e":"print('Numbers of Players according to their Position')\nprint(df.groupby(['Position'])['Name'].nunique().head(28))","e8668f1b":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\nfor i,val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i , *tuple(val.nlargest(3).index)))","f19fcde2":"Top 10 Left Footed Players in FIFA.","9b53ad77":"Filling the Missing Values with their mean value of the SprintSpeed and Stamina and then making a pairplot of the given 5 columns.","c746276b":"Top 10 Players with their Age and Club Names.","09c4846a":"This will Print the all the Columns Name.","ecd499ba":"Clubs with their Total numbers of Players.","2591dd37":"Importing all the Important Packages and Importing the FIFA data and then converting it into DataFrame.","1e06a670":"This will print the Top 10 Eldest Players in the Data.","d3ab9f82":"Print the complete information related to the data, like numbers of values that are not null.","11bf4283":"Top 10 Clubs with their Market Value","0dda4a12":"Relation between Age and Overall.","472c58c7":"Checking the First Five rows of the Given Data.","69fcb86d":"Total Numbers of Players according to their Positions.","a1899e3e":"This will show the Heatmap of the all the columns selected with respect to each other.","5c8d3a10":"Top 3 best Player Features with respect to their Position.","f1a3cd68":"Relation between Club and their Overall's.\n","47cea1c4":"Relation between BallControl and Dribbling for different Preferred Foot Left or Right.","4b66652c":"Relation between Age and Potential of the Player.","00762b6a":"This will Print the Oldest teams in the FIFA.","228b748f":"This will compare the the given columns with respect to the acceleration.","1a0817cb":"Bottom 10 Clubs with their Market Value","94e29d25":"This will Print the Top 10 Youngest Players in the Data.","1dc3cbec":"Bottom 10 Clubs with Worst Players.","5ad3ff2a":"This will the Players of given 6 clubs.","cac9cb63":"Numbers of Players according their Age.","ec8ad0df":"Values of the Players with their Overall.","6300b6ea":"Top 10 Teams with Best Players.","9c254eeb":"Probality Plot of Overall's","47032bbb":"Top 10 Right Footed Players in FIFA.","b6211481":"Setting the code so that it will display the maximum numbers of 50 rows and 50 columns.","4a583154":"This will Print the Youngest Teams in the FIFA.","c75cf49b":"This will compare Club, Age and Overall among the Given Clubs.","851cefac":"This will the Compare the Club and the Age.","e080aff2":"This will Print the Shape of the Data.","bea9021d":"This will print the mean, std dev, 25, 50 ,75 percentiles and other values."}}