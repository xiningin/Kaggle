{"cell_type":{"2534e3f7":"code","a4e4ea92":"code","2eef4c49":"code","a2040c7d":"code","452341e4":"code","edb23a6b":"code","8b303ebd":"code","1c556255":"code","be25e732":"code","f273652d":"code","3a38b749":"code","8358a721":"code","18008d33":"code","5a978bfb":"code","4f33ee67":"markdown"},"source":{"2534e3f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport shap\nfrom matplotlib import pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntest['Survived'] = np.NaN\n\ndata = train.append(test, ignore_index = True, sort = True)","a4e4ea92":"#impute missing values\ndata['FareBin'] = pd.qcut(data.Fare, 4)\ndata.Cabin = data.Cabin.fillna(\"U\")\ndata.Embarked = data.Embarked.fillna(\"S\")\ndata.Fare = data.Fare.fillna(data.Age.median())\n    \ndata['Sex'] = data.Sex.map({'male':0, 'female': 1})\ndata['FareBin'] = data.FareBin.astype('category').cat.codes\ndata['Embarked'] = data.Embarked.map({'S':0, 'C': 1, 'Q': 2})\ndata['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n\nguess_ages = np.zeros((2,3))\nguess_ages\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        guess_df = data[(data['Sex'] == i) & \\\n                              (data['Pclass'] == j+1)]['Age'].dropna()\n        age_guess = guess_df.median()\n        \n        # Convert random age float to nearest .5 age\n        guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        data.loc[ (data.Age.isnull()) & (data.Sex == i) & (data.Pclass == j+1),\\\n                'Age'] = guess_ages[i,j]\n\ndata['Age'] = data['Age'].astype(int)\n    \ndata['AgeBin'] = pd.cut(data.Age, 5).cat.codes\n\ndata['Title'] = data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\nreplacementTitle = []\ndata['Title'] = np.where(data.Title == \"Master\", 2, data.Sex)\ndata['TicketFreq'] = data.Ticket.map(lambda x: data[data.Ticket == x].Ticket.count())\ndata['FareAdj'] = data.Fare\/data.TicketFreq\/10\ndata.FamilySize = data.SibSp + data.Parch + 1\ndata['FamAge'] = data.FamilySize + data.Age\/70\n\ndata2 = data[(data.PassengerId<= 891) & (data.Title == 0)]\ndata3 = data[(data.PassengerId > 891) & (data.Title == 0)]","2eef4c49":"sns.kdeplot(data2[(data2.Survived == 1) & (data2.Pclass == 1)].FamAge, clip = (0,4), bw = 0.04)\nsns.kdeplot(data2[(data2.Survived == 0) & (data2.Pclass == 1)].FamAge, clip = (0,4), bw = 0.04)","a2040c7d":"sns.kdeplot(10*data2[data2.Pclass == 1].FareAdj, clip = (0,40))\nsns.kdeplot(10*data2[data2.Pclass == 2].FareAdj, clip = (0,40))\nsns.kdeplot(10*data2[data2.Pclass == 3].FareAdj, clip = (0,40))","452341e4":"def PredictionToHue(x,p):\n    if x > p:\n        return [0,1,0,0.5]\n    else:\n        return [1,0,0,0.5]\n\nxgb = XGBClassifier(max_depth = 5, eta = 0.1, gamma = 0.1, colsample_bytree = 1, min_child_weight = 1,\n    n_estimators = 500)\nxgb.fit(data2[['FareAdj', 'FamAge']], data2.Survived)\n#evaluate xgb on a grid to plot the descision tree\nx1s = np.linspace(0,5,100)\nx2s = np.linspace(1,3,100)\np = []\nfor i in x1s:    \n    g = pd.DataFrame({'FareAdj': np.full(100, i), 'FamAge': x2s})\n    values = xgb.predict(g)\n    hues = [PredictionToHue(x, 0.5) for x in values]\n    p.append(hues)\n#overlay a scatterplot of data3\np = [list(i) for i in zip(*p)] #* is splat operator\nplt.figure(num = 1, figsize = (5,5))\nplt.imshow(p, extent = [0,5,1,3], origin = \"lower\", aspect = 'auto')\nplt.scatter(data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FareAdj, data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FamAge, c = data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].Survived)\nplt.show()","edb23a6b":"data2['p'] = [x[1] for x in xgb.predict_proba(data2[['FareAdj', 'FamAge']])]\nroc = pd.DataFrame(columns=['TN', 'FN', 'TP', 'FP', 'FPR', 'TPR'])\nfor i in range(0,101):\n    temp = pd.Series({\n        'TN': data2[(data2.Survived == 0) & ~(data2.p >= (i-1)\/100)].Survived.count(),\n        'FP': data2[(data2.Survived == 0) & (data2.p >= (i-1)\/100)].Survived.count(),\n        'FN': data2[(data2.Survived == 1) & ~(data2.p >= (i-1)\/100)].Survived.count(),\n        'TP': data2[(data2.Survived == 1) & (data2.p >= (i-1)\/100)].Survived.count()})\n    temp['FPR'] = temp.FP\/(temp.FP + temp.TN)\n    temp['TPR'] = temp.TP\/(temp.TP + temp.FN)\n    roc = roc.append(temp, ignore_index = True)\nrocArea = 0\nfor i in range(0,100):\n    rocArea = rocArea + (roc.TPR[i+1] + roc.TPR[i])*(roc.FPR[i] - roc.FPR[i+1])\/2\nprint(\"Area under ROC curve: \" + str(rocArea))\nsns.scatterplot(roc.FPR, roc.TPR, np.linspace(0,1,101), palette = 'RdBu')","8b303ebd":"data3['p'] = [x[1] for x in xgb.predict_proba(data3[['FareAdj', 'FamAge']])]\np = []\nfor i in x1s:    \n    g = pd.DataFrame({'FareAdj': np.full(100, i), 'FamAge': x2s})\n    values = [x[1] for x in xgb.predict_proba(g)]\n    hues = [PredictionToHue(x, 0.9) for x in values]\n    p.append(hues)\n#overlay a scatterplot of data3\np = [list(i) for i in zip(*p)] #* is splat operator\nplt.figure(num = 1, figsize = (5,5))\nplt.imshow(p, extent = [0,5,1,3], origin = \"lower\", aspect = 'auto')\nplt.scatter(data3[(data3.FareAdj < 5) & (data3.FamAge < 3)].FareAdj, data3[(data3.FareAdj < 5) & (data3.FamAge < 3)].FamAge)\nplt.show()\ndata3[data3.p > 0.9]","1c556255":"data['Surname'] = data.Name.map(lambda x: x[:x.index(',')])\ndata['GroupId'] = data.Pclass.map(str)+ '-' + data.Ticket.map(str) + '-' + data.Fare.map(str)\ndata.GroupId = np.where(data.Title == 0, 'None', data.GroupId) \n## Mrs Wilkes (Needs) is Mrs Hocking (Needs) sister\ndata.GroupId.iloc[892] = data.GroupId.iloc[774]\ndata['GroupFreq'] = data.GroupId.map(lambda x: data.GroupId[data.GroupId == x].count())\ndata.GroupId = np.where(data.GroupFreq <= 1, 'None', data.GroupId) \nprint('We found ' + str(data.GroupId.unique().size - 1) + ' woman-child-groups')\n\ndata['GroupSurvival'] = np.nan\ndata.GroupSurvival = data.GroupId.map(lambda x: data[data.GroupId == x].Survived.mean())\n## classify unknown groups\ndata.GroupSurvival = np.where((data.Pclass == 3) & (data.GroupSurvival.isna()), 0, data.GroupSurvival)\ndata.GroupSurvival = np.where((data.Pclass != 3) & (data.GroupSurvival.isna()), 1, data.GroupSurvival)\n## make predictions\ndata['Predict'] = 0\ndata.Predict[data.Sex == 1] = 1\ndata.Predict[(data.Title == 1) & (data.GroupSurvival == 0)] = 0\ndata.Predict[(data.Title == 2) & (data.GroupSurvival == 1)] = 1\nprint('We found ' + str(data[(data.Title == 2) & (data.Predict == 1) & (data.PassengerId > 891)].Predict.count()) + ' boys predicted to live')\nprint('We found ' + str(data[(data.Title == 1) & (data.Predict == 0) & (data.PassengerId > 891)].Predict.count()) + ' women predicted to die')","be25e732":"data2 = data[(data.PassengerId <= 891) & (data.Title == 1) & (data.FamilySize == 1)]\ndata3 = data[(data.PassengerId > 891) & (data.Title == 1) & (data.FamilySize == 1)]\n\nxgb = XGBClassifier(max_depth = 5, eta = 0.1, gamma = 0.1, colsample_bytree = 1, min_child_weight = 1,\n    n_estimators = 500)\nxgb.fit(data2[['FareAdj', 'FamAge']], data2.Survived)\n#evaluate xgb on a grid to plot the descision tree\nx1s = np.linspace(0,5,100)\nx2s = np.linspace(1,3,100)\np = []\nfor i in x1s:    \n    g = pd.DataFrame({'FareAdj': np.full(100, i), 'FamAge': x2s})\n    values = [x[1] for x in xgb.predict_proba(g)]\n    hues = [PredictionToHue(x, 0.25) for x in values]\n    p.append(hues)\n#overlay a scatterplot of data3\np = [list(i) for i in zip(*p)] #* is splat operator\nplt.figure(num = 1, figsize = (5,5))\nplt.imshow(p, extent = [0,5,1,3], origin = \"lower\", aspect = 'auto')\nplt.scatter(data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FareAdj, data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FamAge, c = data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].Survived)\nplt.xlim(0.5,1.5)\nplt.ylim(1,2)\nplt.show()","f273652d":"data3['p'] = [x[1] for x in xgb.predict_proba(data3[['FareAdj', 'FamAge']])]\np = []\nfor i in x1s:    \n    g = pd.DataFrame({'FareAdj': np.full(100, i), 'FamAge': x2s})\n    values = [x[1] for x in xgb.predict_proba(g)]\n    hues = [PredictionToHue(x, 0.15) for x in values]\n    p.append(hues)\n#overlay a scatterplot of data3\np = [list(i) for i in zip(*p)] #* is splat operator\nplt.figure(num = 1, figsize = (5,5))\nplt.imshow(p, extent = [0,5,1,3], origin = \"lower\", aspect = 'auto')\nplt.scatter(data3[(data3.FareAdj < 5) & (data3.FamAge < 3)].FareAdj, data3[(data3.FareAdj < 5) & (data3.FamAge < 3)].FamAge)\nplt.ylim(1,2)\nplt.xlim(0.5,1.2)\nplt.show()\ndata3[data3.p < 0.15]","3a38b749":"data.Predict[data.PassengerId.isin(data3.PassengerId[data3.p < 0.15])] = 0\nprint(data.iloc[897])","8358a721":"data2 = data[(data.PassengerId <= 891) & (data.Title == 1) & (data.FamilySize != 1) & (data.GroupId == 'None')]\ndata3 = data[(data.PassengerId > 891) & (data.Title == 1) & (data.FamilySize != 1) & (data.GroupId == 'None')]\n\nxgb = XGBClassifier(max_depth = 5, eta = 0.1, gamma = 0.1, colsample_bytree = 1, min_child_weight = 1,\n    n_estimators = 500)\nxgb.fit(data2[['FareAdj', 'FamAge']], data2.Survived)\n#evaluate xgb on a grid to plot the descision tree\nx1s = np.linspace(0,5,100)\nx2s = np.linspace(1,3,100)\np = []\nfor i in x1s:    \n    g = pd.DataFrame({'FareAdj': np.full(100, i), 'FamAge': x2s})\n    values = [x[1] for x in xgb.predict_proba(g)]\n    hues = [PredictionToHue(x, 0.2) for x in values]\n    p.append(hues)\n#overlay a scatterplot of data3\np = [list(i) for i in zip(*p)] #* is splat operator\nplt.figure(num = 1, figsize = (5,5))\nplt.imshow(p, extent = [0,5,1,3], origin = \"lower\", aspect = 'auto')\nplt.scatter(data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FareAdj, data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].FamAge, c = data2[(data2.FareAdj < 5) & (data2.FamAge < 3)].Survived)\nplt.xlim(0.5,1.5)\nplt.ylim(2,3)\nplt.show()","18008d33":"data.Predict[data.PassengerId.isin(data3.PassengerId[data3.p < 0.2])] = 0\nprint(data.iloc[897])","5a978bfb":"# Any results you write to the current directory are saved as output.\noutput = pd.DataFrame({'PassengerId' : data.PassengerId[891:], 'Survived' : data.Predict[891:]})\n\noutput.to_csv('submission.csv', index=False)","4f33ee67":"Some simple imputation for the missing values. Filling in the Embarkation is probably correct, as is the Cabin, since I am making a separate deck variable that should be more significant. Currently dropping Age, imputing mean or median seriously hampers performance. Figure out what to do with missing Fare in testData"}}