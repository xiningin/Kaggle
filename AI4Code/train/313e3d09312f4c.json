{"cell_type":{"cc157e72":"code","699c2577":"code","9c470ef9":"code","bf1ab9c0":"code","9d605849":"code","177b690d":"code","fd797a49":"code","a1942bcb":"code","7ab39420":"code","a5ea34e1":"code","991a1ac4":"code","447c26b8":"code","32d07b99":"code","af6ad021":"code","0724911f":"code","5278bd24":"code","dbe889fb":"code","b1fcebbf":"code","8455ff4f":"code","cb53b4c6":"code","ae380087":"code","eecf10ab":"code","aed5a78b":"code","7a93a724":"code","29a15d0b":"code","e70d85e5":"code","c15f6ca1":"code","8f8677c6":"code","06aafaa9":"code","a6de6b16":"code","bdaf335e":"markdown","a86011ab":"markdown","d600f9f4":"markdown"},"source":{"cc157e72":"import pandas as pd\nimport numpy as np\nfrom datetime import timedelta\nfrom tqdm import tqdm\nimport gc\nfrom functools import reduce\nfrom sklearn.model_selection import StratifiedKFold","699c2577":"def make_df(df, col, bool_in=False):\n    tp = df.loc[ ~df[col].isnull() ,[col]].copy()\n    df.drop(col, axis=1, inplace=True)\n    \n    tp[col] = tp[col].str.replace(\"null\",'\"\"')\n    if bool_in:\n        tp[col] = tp[col].str.replace(\"false\",'\"False\"')\n        tp[col] = tp[col].str.replace(\"true\",'\"True\"')\n    tp[col] = tp[col].apply(lambda x: eval(x) )\n    a = tp[col].sum()\n    gc.collect()\n    return pd.DataFrame(a)\n#===============","9c470ef9":"ROOT_DIR = \"..\/input\/mlb-player-digital-engagement-forecasting\"","bf1ab9c0":"#=======================#\ndef flatten(df, col):\n    du = (df.pivot(index=\"playerId\", columns=\"EvalDate\", \n               values=col).add_prefix(f\"{col}_\").\n      rename_axis(None, axis=1).reset_index())\n    return du\n#============================#\ndef reducer(left, right):\n    return left.merge(right, on=\"playerId\")\n#========================","9d605849":"TGTCOLS = [\"target1\",\"target2\",\"target3\",\"target4\"]\ndef train_lag(df, lag=1):\n    dp = df[[\"playerId\",\"EvalDate\"]+TGTCOLS].copy()\n    dp[\"EvalDate\"]  =dp[\"EvalDate\"] + timedelta(days=lag) \n    df = df.merge(dp, on=[\"playerId\", \"EvalDate\"], suffixes=[\"\",f\"_{lag}\"], how=\"left\")\n    return df\n#=================================\ndef test_lag(sub):\n    sub[\"playerId\"] = sub[\"date_playerId\"].apply(lambda s: int(  s.split(\"_\")[1]  ) )\n    assert sub.date.nunique() == 1\n    dte = sub[\"date\"].unique()[0]\n    \n    eval_dt = pd.to_datetime(dte, format=\"%Y%m%d\")\n    dtes = [eval_dt + timedelta(days=-k) for k in LAGS]\n    mp_dtes = {eval_dt + timedelta(days=-k):k for k in LAGS}\n    \n    sl = LAST.loc[LAST.EvalDate.between(dtes[-1], dtes[0]), [\"EvalDate\",\"playerId\"]+TGTCOLS].copy()\n    sl[\"EvalDate\"] = sl[\"EvalDate\"].map(mp_dtes)\n    du = [flatten(sl, col) for col in TGTCOLS]\n    du = reduce(reducer, du)\n    return du, eval_dt\n    #\n#===============","177b690d":"%%time\n#tr = pd.read_csv(f\"{ROOT_DIR}\/train.csv\")\ntr = pd.read_csv(\"..\/input\/mlb-data\/target.csv\")\nprint(tr.shape)\ngc.collect()","fd797a49":"tr[\"EvalDate\"] = pd.to_datetime(tr[\"EvalDate\"])\ntr[\"EvalDate\"] = tr[\"EvalDate\"] + timedelta(days=-1)\ntr[\"EvalYear\"] = tr[\"EvalDate\"].dt.year","a1942bcb":"MED_DF = tr.groupby([\"playerId\",\"EvalYear\"])[TGTCOLS].median().reset_index()\nMEDCOLS = [\"tgt1_med\",\"tgt2_med\", \"tgt3_med\", \"tgt4_med\"]\nMED_DF.columns = [\"playerId\",\"EvalYear\"] + MEDCOLS","7ab39420":"MED_DF.head()","a5ea34e1":"MAX_LAG = 20\nOFFSET = 45\nLAGS = list(range(OFFSET, MAX_LAG + OFFSET))\nFECOLS = [f\"{col}_{lag}\" for lag in reversed(LAGS) for col in TGTCOLS]","991a1ac4":"LAGS","447c26b8":"%%time\nfor lag in tqdm(LAGS):\n    tr = train_lag(tr, lag=lag)\n    gc.collect()\n#===========\ntr = tr.sort_values(by=[\"playerId\", \"EvalDate\"])\nprint(tr.shape)\ntr = tr.dropna()\nprint(tr.shape)\ntr = tr.merge(MED_DF, on=[\"playerId\",\"EvalYear\"])\ngc.collect()","32d07b99":"tr.head(1)","af6ad021":"X = tr[FECOLS+MEDCOLS].values\ny = tr[TGTCOLS].values\ncl = tr[\"playerId\"].values","0724911f":"NFOLDS = 10\nskf = StratifiedKFold(n_splits=NFOLDS)\nfolds = skf.split(X, cl)\nfolds = list(folds)","5278bd24":"X.shape","dbe889fb":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping","b1fcebbf":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    nh = 50\n    x = L.Dense(nh, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(nh, activation=\"relu\", name=\"d2\")(x)\n    #x = L.Dense(nh, activation=\"relu\", name=\"d3\")(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model","8455ff4f":"net = make_model(X.shape[1])\nprint(net.summary())","cb53b4c6":"oof = np.zeros(y.shape)\nnets = []\nEPOCHS  = 10\nfor idx in range(NFOLDS):\n    print(\"FOLD:\", idx)\n    tr_idx, val_idx = folds[idx]\n    ckpt = ModelCheckpoint(f\"w{idx}.h5\", monitor='val_loss', verbose=1, save_best_only=True,mode='min')\n    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=3, min_lr=0.0005)\n    es = EarlyStopping(monitor='val_loss', patience=6)\n    reg = make_model(X.shape[1])\n    reg.fit(X[tr_idx], y[tr_idx], epochs=EPOCHS, batch_size=30_000, \n            validation_data=(X[val_idx], y[val_idx]),\n            verbose=1, callbacks=[ckpt, reduce_lr, es])\n    reg.load_weights(f\"w{idx}.h5\")\n    oof[val_idx] = reg.predict(X[val_idx], batch_size=50_000, verbose=1)\n    nets.append(reg)\n    gc.collect()\n    #\n#","ae380087":"#reg.fit(X, y, epochs=10, batch_size=30_000, validation_split=0.3)","eecf10ab":"mae = mean_absolute_error(y, oof)\nmse = mean_squared_error(y, oof, squared=False)\nprint(\"mae:\", mae)\nprint(\"mse:\", mse)","aed5a78b":"# Historical information to use in prediction time\nbound_dt = pd.to_datetime(\"2021-01-01\")\nLAST = tr.loc[tr.EvalDate>bound_dt].copy()","7a93a724":"LAST_MED_DF = MED_DF.loc[MED_DF.EvalYear==2021].copy()\nLAST_MED_DF.drop(\"EvalYear\", axis=1, inplace=True)\ndel tr","29a15d0b":"LAST.shape, LAST_MED_DF.shape, MED_DF.shape","e70d85e5":"#nets[0].summary()","c15f6ca1":"#\"\"\"\nimport mlb\nFE = []; SUB = [];\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set\n\nfor (test_df, sub) in iter_test:\n    # Features computation at Evaluation Date\n    sub = sub.reset_index()\n    sub_fe, eval_dt = test_lag(sub)\n    sub_fe = sub_fe.merge(LAST_MED_DF, on=\"playerId\", how=\"left\")\n    sub_fe = sub_fe.fillna(0.)\n    \n    _preds = 0.\n    for reg in nets:\n        _preds += reg.predict(sub_fe[FECOLS + MEDCOLS]) \/ NFOLDS\n    sub_fe[TGTCOLS] = np.clip(_preds, 0, 100)\n    sub.drop([\"date\"]+TGTCOLS, axis=1, inplace=True)\n    sub = sub.merge(sub_fe[[\"playerId\"]+TGTCOLS], on=\"playerId\", how=\"left\")\n    sub.drop(\"playerId\", axis=1, inplace=True)\n    sub = sub.fillna(0.)\n    # Submit\n    env.predict(sub)\n    # Update Available information\n    sub_fe[\"EvalDate\"] = eval_dt\n    #sub_fe.drop(MEDCOLS, axis=1, inplace=True)\n    LAST = LAST.append(sub_fe)\n    LAST = LAST.drop_duplicates(subset=[\"EvalDate\",\"playerId\"], keep=\"last\")\n#\"\"\"","8f8677c6":"sub.head()","06aafaa9":"LAST.shape, sub_fe.shape","a6de6b16":"#df_tr[\"dte\"] = pd.to_datetime(df_tr[\"date\"], format='%Y%m%d')","bdaf335e":"### CREDITS\n* [baseline average 1.47](https:\/\/www.kaggle.com\/mlconsult\/baseline-average-1-47)\n* [BaseLine Model: Player Mean or Median ?](https:\/\/www.kaggle.com\/ulrich07\/baseline-model-player-mean-or-median)\n* [Fork - MLB baseline avergage 1.47](https:\/\/www.kaggle.com\/junichih\/mlb-baseline-median-1-45) \n\n### UPDATES\n* **V1**: Lags up to 3, 10 Epochs \n* **V2**: Lags up to 3, 20 Epochs\n* **V5**: Lags up to 20, 10 Epochs\n* **V6**: Lags up to 20, 10 Epochs with Stratified KFold (5 Folds)\n* **V7**: Lags up to 20, 50 Epochs with Stratified KFold (5 Folds)\n* **V8**: Lags up to 30, 10 Epochs with Stratified KFold (5 Folds)\n* **V9**: Lags up to 20, 10 Epochs with Stratified KFold (5 Folds) & Bigger Network\n* **V10**: Lags up to 15, 10 Epochs with Stratified KFold (5 Folds)\n* **V11**: Lags up to 17, 10 Epochs with Stratified KFold (5 Folds)\n* **V12**: Lags up to 20, 10 Epochs with Stratified KFold (10 Folds)\n* **V14**: Lags up to 20, 10 Epochs with Stratified KFold (10 Folds) & OFFSETof 45 days\n\n### Please **Upvote** if you find this helpful \ud83d\udc7d","a86011ab":"## Neural Net Training","d600f9f4":"## UTILITY FUNCTIONS"}}