{"cell_type":{"b918521f":"code","4aac7d67":"code","5001fede":"code","d8860847":"code","e94f8173":"code","6ec66170":"code","0db27bd3":"code","e66901e6":"code","112c3a21":"code","a2b7208e":"code","81bc8883":"code","9c4204d9":"code","8b7c690e":"code","e73d8b44":"code","4d050e7c":"code","eeb97601":"code","5f2f3467":"code","1867bd99":"code","5607e664":"code","4b8c1d8b":"code","a06dbcbf":"code","ec360c28":"code","84719c23":"code","eb2015be":"code","db4190e1":"code","e976f141":"code","7cc710a4":"code","9dbe75be":"code","d178ccfb":"code","295b3de4":"code","6158b421":"code","ed1cd7d4":"code","79c4ebf2":"code","ba763c10":"code","9e146e76":"code","a048d82b":"code","da086005":"code","93cd6ab2":"code","1b5da299":"code","b2d28629":"code","e95b95e1":"code","01d4ddaf":"code","41aaed4d":"code","0e6d17d4":"code","d21ba4f7":"code","c1672c24":"code","d2d1bffd":"code","61459606":"code","38e478ee":"code","b5ab7025":"code","ff2f0650":"code","aed91093":"code","9e19b88d":"code","4ece6ac2":"code","5a4eed6d":"code","ca3ccbb5":"code","2d9cb06c":"code","7eb84c88":"code","eb04e5c4":"code","c9bc20ff":"code","77d5817c":"code","77aea30d":"code","c7d7e451":"code","4cb0a0ba":"code","762154cd":"code","74f9c3be":"markdown","ca895ecc":"markdown","29cbabcc":"markdown","c58e6f19":"markdown","77f346ea":"markdown","0f4cab42":"markdown","aa5ca5d1":"markdown","8ada0584":"markdown","e87624e6":"markdown","44de0304":"markdown","3adb8114":"markdown","a1201dbf":"markdown"},"source":{"b918521f":"# Getting started\n\nimport pandas as pd","4aac7d67":"# define the data and index as lists\ntemperature = [33, 19, 15, 89, 11, -5, 9]\ndays = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']\n\n# create series \nseries_from_list = pd.Series(temperature, index=days)\nseries_from_list","5001fede":"# from a dictionary\nmy_dict = {'Mon': 33, 'Tue': 19, 'Wed': 15, 'Thu': 89, 'Fri': 11, 'Sat': -5, 'Sun': 9}\nseries_from_dict = pd.Series(my_dict)\nseries_from_dict","d8860847":"Temp_DF = pd.DataFrame({'Tokyo': [15,19,15,11,9,8,13], 'Paris': [-2,0,2,5,7,-5,-3], 'Mumbai':[20,18,23,19,25,27,23] },\n                       index=['12-1','12-2','12-3','12-4','12-5','12-6','12-7'])\n\nTemp_DF","e94f8173":"Temp_DF.columns","6ec66170":"Temp_DF.index","0db27bd3":"Temp_DF.shape # Number of rows and columns","e66901e6":"Temp_DF.values","112c3a21":"Temp_DF.head() # Default gives first 5 rows","a2b7208e":"Temp_DF.tail() # Default gives last 5 rows","81bc8883":"Temp_DF.head(2) # Accessing first 2 rows","9c4204d9":"Temp_DF.tail(2) # Accessing last 2 rows","8b7c690e":"Temp_DF.loc['12-6'] # loc requires index name\/label of rows and columns","e73d8b44":"Temp_DF.loc['12-6','Tokyo'] # Accessing '12-6' index of Tokyo column","4d050e7c":"Temp_DF.iloc[0] # iloc requires index numbers of rows and columns","eeb97601":"Temp_DF.iloc[0,0] # Accessing 0 index of Tokyo column","5f2f3467":"# Creating Multiindexed DataFrame\ndf = pd.DataFrame(\n{\"a\" : [4 ,5, 6],\n \"b\" : [7, 8, 9],\n \"c\" : [10, 11, 12]},\nindex = pd.MultiIndex.from_tuples(\n[('d', 1), ('d', 2),\n('e', 2)], names=['n', 'v']))\n\ndf","1867bd99":"df.loc[('d',1)] # Accessing multiindexed data","5607e664":"Temp_DF","4b8c1d8b":"Temp_DF[['Tokyo','Mumbai']] # Fetch Only Tokyo and Mumbai columns","a06dbcbf":"Temp_DF.Paris # Fetch Only Paris column","ec360c28":"Temp_DF.sort_values('Paris') # Defualt ascending sort","84719c23":"Temp_DF.sort_values('Paris', ascending=False)","eb2015be":"Temp_DF.rename(columns = {'Mumbai':'New Mumbai'})","db4190e1":"Temp_DF.sort_index()","e976f141":"Temp_DF.sort_index(ascending=False)","7cc710a4":"Temp_DF.reset_index()","9dbe75be":"Temp_DF.drop(columns=['Paris'])","d178ccfb":"# Convert columns into rows\npd.melt(Temp_DF)","295b3de4":"#Concat DataFrames Rows wise\n\nTemp_DF_2 = pd.DataFrame({'Tokyo': [12,18], 'Paris': [2,8], 'Mumbai':[25,12] },\n                       index=['12-8','12-9'])\nTemp_DF_2","6158b421":"pd.concat([Temp_DF,Temp_DF_2])","ed1cd7d4":"#Concat DataFrames column wise\n\nTemp_DF_3 = pd.DataFrame({'Delhi': [15,12]},\n                       index=['12-8','12-9'])\nTemp_DF_3","79c4ebf2":"pd.concat([Temp_DF_2,Temp_DF_3],axis=1)","ba763c10":"Temp_DF","9e146e76":"Temp_DF.loc[Temp_DF.Tokyo > 9] # Accessing rows where temperature of tokyo column is greater than 9","a048d82b":"Temp_DF.query('Tokyo > 9') # Using query method","da086005":"Temp_DF.query('Tokyo > 9 & Mumbai < 21') # Using query method","93cd6ab2":"Temp_DF.nlargest(3,'Tokyo')","1b5da299":"Temp_DF.nsmallest(3,'Paris')","b2d28629":"Temp_DF.sample(frac=1.0) # Shuffling DataFrame","e95b95e1":"Temp_DF['Season'] = ['Winter','Winter','Winter','Summer','Summer','Summer','Summer']","01d4ddaf":"Temp_DF","41aaed4d":"Temp_DF.Season.value_counts()","0e6d17d4":"Temp_DF.Season.nunique()","d21ba4f7":"Temp_DF.describe()","c1672c24":"Temp_DF.Tokyo.mean()","d2d1bffd":"Temp_DF.Mumbai.max()","61459606":"Temp_DF.Paris.min()","38e478ee":"Temp_DF.Paris.quantile([0.25,0.75])","b5ab7025":"Temp_DF.Tokyo.std()","ff2f0650":"Temp_DF.groupby(by='Season').sum()","aed91093":"Temp_DF.groupby(by='Season').agg({'min','max'}) # Apply multiple aggregate functions","9e19b88d":"Temp_DF.groupby(by='Season').shift(1)","4ece6ac2":"Temp_DF.groupby(by='Season').shift(-1)","5a4eed6d":"Temp_DF.groupby(by='Season').cumsum()","ca3ccbb5":"adf = pd.DataFrame({'X1':['A','B','C'],'X2':[1,2,3]})\nadf","2d9cb06c":"bdf = pd.DataFrame({'X1':['A','B','D'],'X3':['T','F','T']})\nbdf","7eb84c88":"#Left Outer Join\npd.merge(adf, bdf,how='left', on='X1')","eb04e5c4":"#Right Outer Join\npd.merge(adf, bdf,how='right', on='X1')","c9bc20ff":"#Inner Join\npd.merge(adf, bdf,how='inner', on='X1')","77d5817c":"#Full Outer Join\npd.merge(adf, bdf,how='outer', on='X1')","77aea30d":"Temp_DF.Mumbai.plot();","c7d7e451":"Temp_DF.groupby(by='Season').sum().plot.bar();","4cb0a0ba":"Temp_DF.groupby(by='Season').mean().plot.box();","762154cd":"Temp_DF.groupby(by='Season').agg({'min','max'}).plot.bar(figsize=(10,7));","74f9c3be":"# **Series**\n\nThe **Series** data structure in Pandas is a <i>one-dimensional labeled array<\/i>. \n\n* Data in the array can be of any type (integers, strings, floating point numbers, Python objects, etc.). \n* Data within the array is homogeneous\n* Pandas Series objects always have an index: this gives them both ndarray-like and dict-like properties.\n\n    \n<img src=\"https:\/\/drive.google.com\/uc?id=1Nm1y60k0lBwm-rXdZbx9ge8xocF0-Evs\">","ca895ecc":"# PANDAS\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1nMJ_1njFKv2FTB2SSQ7ofZAGRwPDaBcJ)\n\n\n\n**From the Pandas documentation:**\n\n**pandas** is everyone's favorite data analyis library providing fast, flexible, and expressive data structures designed to work with *relational* or table-like data (SQL table or Excel spreadsheet). It is a fundamental high-level building block for doing practical, real world data analysis in Python. \n\npandas is well suited for:\n\n- Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet\n- Ordered and unordered (not necessarily fixed-frequency) time series data.\n- Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels\n- Any other form of observational \/ statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure\n\nThe two primary data structures of pandas, **Series** (1-dimensional) and **DataFrame** (2-dimensional), handle the vast majority of typical use cases in finance, statistics, social science, and many areas of engineering. Pandas is built on top of NumPy and is intended to integrate well within a scientific computing environment with many other 3rd party libraries.","29cbabcc":"## **Summarize Data**","c58e6f19":"## **Plotting**","77f346ea":"## **Grouping Data**","0f4cab42":"## **Creating a Pandas Series**\n\nThere are many ways to create a Pandas Series objects, some of the most common ways are:\n- Creation from a list\n- Creation from a dictionary","aa5ca5d1":"# **DataFrames**\n\nDataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects.\n\n<img src=\"https:\/\/drive.google.com\/uc?id=1AnS_4u7kG3bDxfQXsAgsAURVE04uVDYK\">\n\nYou can create a DataFrame from:\n\n* Dict of 1D ndarrays, lists, dicts, or Series\n* 2-D numpy.ndarray\n* From text, CSV, Excel files or databases\n* Many other ways\n\nHere's an example where we have set the Dates column to be the index and label for the rows. \n\n<img src=\"https:\/\/drive.google.com\/uc?id=1rb6looxxB34EhTegA6Z8l0UWS0XnMBjt\">","8ada0584":"## **Joins**","e87624e6":"## **Subset Operations - Rows**","44de0304":"## **Reshaping Data**","3adb8114":"## **The anatomy of a DataFrame**\n\nA DataFrame consists on three parts:\n\n1. Index\n2. Columns Names (_`or`_ Column Index)\n3. Data\n\nThe row and column labels can be accessed respectively by accessing the ``index`` and ``columns`` attributes:","a1201dbf":"## **Add new columns**"}}