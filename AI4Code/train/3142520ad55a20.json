{"cell_type":{"aed99e89":"code","60dfaef1":"code","867c88e1":"code","37adc8a3":"code","8db6c5b8":"code","d644bed7":"code","94e282d3":"code","56fc9e54":"markdown","15c265a5":"markdown","b77943e6":"markdown","111b910e":"markdown","8c9b6dac":"markdown","a66a4f69":"markdown"},"source":{"aed99e89":"!pip install imutils","60dfaef1":"#RUN THIS FIRST TO IMPORT LIBRARIES and make the directories\nimport cv2\nfrom imutils import paths\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","867c88e1":"#make directories if the directories don't exist yet (-p)\n%mkdir -p \/kaggle\/working\/analyzation\/recommended_and_proper\/\n%mkdir -p \/kaggle\/working\/analyzation\/recommended_and_improper\/","37adc8a3":"#Functions to be used\ndef show_image(image,title):\n    plt.title(title)\n    plt.imshow(image)\n    plt.show()\n\n#Function to Show Image\ndef save_image(image,which):\n    directorieslist = ['\/kaggle\/working\/analyzation\/recommended_and_proper\/', #recommended and proper use\n                      '\/kaggle\/working\/analyzation\/recommended_and_improper\/'] #recommended and improper use\n    if which == 0:\n        imagePaths = list(paths.list_images(directorieslist[which]))\n    if which == 1:\n        imagePaths = list(paths.list_images(directorieslist[which]))\n    lastimage = len(imagePaths)\n    lastimage += 1\n    imagepathslist = [\"\/kaggle\/working\/analyzation\/recommended_and_proper\/recommended_and_proper{}.jpg\".format(lastimage),\n                     \"\/kaggle\/working\/analyzation\/recommended_and_improper\/recommended_and_improper{}.jpg\".format(lastimage)]\n    cv2.imwrite(imagepathslist[which],image)\n\n#Function to Plot Channel Distribution\ndef channel_distro(image,title):\n    if type(title) is list:\n        for i, col in enumerate(['b', 'g', 'r']):\n            hist = cv2.calcHist([image], [i], None, [256], [0, 256])\n            plt.title(title[i])\n            plt.plot(hist, color = col)\n            plt.xlim([0, 256])\n            plt.show()\n    else:\n        for i, col in enumerate(['b', 'g', 'r']):\n            hist = cv2.calcHist([image], [i], None, [256], [0, 256])\n            plt.title(title)\n            plt.plot(hist, color = col)\n            plt.xlim([0, 256])\n            plt.show()\n\ndef pixel_histogram(image):  #https:\/\/www.codespeedy.com\/histogram-of-an-image-using-matplotlib-in-python\/\n    x = image[:,:,0]\n    plt.title(\"Histogram for Original Image\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"pixels Frequency\")\n    plt.hist(x)\n    plt.show()\n    \ndef crop_face_and_eyes(imagePath,which):\n    image = cv2.imread(imagePath)\n    face_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_frontalface_default.xml')\n    eye_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_eye.xml')\n    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    show_image(image,\"Original Image\")\n    pixel_histogram(image)\n    title = [\"Blue Channel Distribution of the Original Image\",\"Green Channel Distribution of the Original Image\",\"Red Channel Distribution of the Original Image\"]\n    channel_distro(image,title)\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.3,5)\n    facelist = []\n    facelist.append(faces)\n    if len(facelist) == 0:\n        print(\"No face found!\")\n    else:\n        for face in facelist:\n            if len(face) == 0:\n                print(\"No face found!\")\n            else:\n                for (x,y,w,h) in faces:\n                    roi_gray = gray[y:y+h, x:x+w]\n                    eyes = eye_cascade.detectMultiScale(roi_gray)\n                if len(eyes) == 0:\n                    print(\"No eyes found!\")\n                else:\n                    if len(eyes) == 1:\n                        print(\"Only one eye was detected by the program.\")\n                    else:\n                        eye = eyes\n                        face_area = image[face[0][1]:face[0][1]+face[0][3],face[0][0]:face[0][0]+face[0][2]]\n                        show_image(face_area,\"Detected face\")\n                        save_image(cv2.cvtColor(face_area, cv2.COLOR_RGB2BGR),which)\n                        title = [\"Blue Channel Distribution of the Detected Face\",\"Green Channel Distribution of the Detected Face\",\"Red Channel Distribution of the Detected Face\"]\n                        channel_distro(face_area,title)\n                        eye_area = face_area[eye[0][1]:eye[0][1]+(eye[1][2]+eye[1][3]),eye[0][0]:eye[0][0]+(eye[1][0]+eye[1][2])]\n                        show_image(eye_area, \"Eye area of the Detected face\")\n                        save_image(cv2.cvtColor(eye_area, cv2.COLOR_RGB2BGR),which)\n                        title = [\"Blue Channel Distribution of the Eye Area\",\"Green Channel Distribution of the Eye Area\",\"Red Channel Distribution of the Eye Area\"]\n                        channel_distro(eye_area,title)\n    \n# def do_to_all(imagePaths,which):  #use in batch analysis\n#     for imagePath in imagePaths:\n#         crop_face_and_eyes(imagePath,which)","8db6c5b8":"# For batch analysis\n# imagePaths = list(paths.list_images('\/kaggle\/input\/dataset\/correct_mask'))\n# which = 0\n# do_to_all(imagePaths, which)","d644bed7":"#Read images for proper use of CDC-recommended face masks\nwhich = 0\nimagePathCloth = \"\/kaggle\/input\/for-analyzation\/For Analyzation\/Proper Use\/1590584646-nature-prints-face-masks-1590584606.jpg\"\nprint(\"Cloth Mask\")\ncrop_face_and_eyes(imagePathCloth,which)\n\nimagePathDisposable = \"\/kaggle\/input\/for-analyzation\/For Analyzation\/Proper Use\/disposable3.jpg\"\nprint(\"Disposable Mask\")\ncrop_face_and_eyes(imagePathDisposable,which)","94e282d3":"#Read images for improper use of CDC-recommended face masks\nwhich = 1\nimagePathClothImproper = \"\/kaggle\/input\/for-analyzation\/For Analyzation\/Improper Use\/incorrect cloth 2.jpg\"\nprint(\"Cloth Mask\")\ncrop_face_and_eyes(imagePathClothImproper,which)\n\nimagePathDisposableImproper = \"\/kaggle\/input\/for-analyzation\/For Analyzation\/Improper Use\/istockphoto-1250449628-612x612.jpg\"\nprint(\"Disposable Mask\")\ncrop_face_and_eyes(imagePathDisposableImproper,which)","56fc9e54":"**Analyses**\n1.  Figure 3 - Improper wearing of Cloth Mask\n    * The histogram of the orginal image shown that all three channels Red, Blue, and Green has a low and high intensities which corresponds to **dark and light tones as observed in the tonal range from 0-12000 pixels and 0-14000 respectively.**\n    * The histogram of the detected face shown that all three channels Red, Blue, and Green has a **dark and mid tones as observed in the tonal ranger from 0-1400 pixels and 0-1000 pixels respectively.**\n    * The histogram of the eye area of the detected face shown that all three channels Red, Blue, and Green has a **dark and mid tones as observed in the tonal range from 0-400 pixels and 100-500 pixels respectively.**\n\n2.  Figure 4 - Improper wearing of Disposable Mask\n    * The histogram of the orginal image shown that all three channels Red, Blue, and Green has a low and high intensities which corresponds to **dark and light tones as observed in the tonal range from 0-3000 pixels and 2000-4000 respectively.**\n    * The histogram of the detected face shown that all the channels Red, Blue and Green has a high intensities corresponding to **light tones as observed in the tonal range from 500-2500 pixels** as observed on the histogram of each channels\n    * The histogram of the detected face shown that all the channels Red, Blue and Green has a high intensities corresponding to **light tones as observed in the tonal range from 350-800 pixels.** However, Channels Red and Green is observed to have **mid tones from 50-400 pixels.**","15c265a5":"# **Data\/Image Analyzation (application of Unit III Laboratory Activity 1)**","b77943e6":"# Proper Use of Cloth Mask and Disposable Mask","111b910e":"**BSCS 1B Group 3 applied:**\n1. Cropping of the face detected\n2. Cropping of the eye area in the detected face\n3. Plotting the RGB channel distribution","8c9b6dac":"# Improper Use of Cloth Mask and Disposable Mask","a66a4f69":"**Analyses**\n1. Figure 1 - Proper wearing of Cloth Mask\n    * The histogram of Original Image, If we consider (255, 255, 255) in RGB corresponds to white then all three channels Red, Blue, and Green have high intensities which corresponds to **light tones in the tonal range 235-255 from 10000-60000 pixels** as shown in the histogram of each channels.\n    * The histogram of the Detected face shown that all three channels Red, Blue, and Green has high intensities which corresponds to **light tones in the tonal range 235-255 from 500-2000 pixels.**\n    * The histogram of the eye area of the detected face shown that all three channels Red, Blue, and Green have a high intensities that corresponds to **light tones in the tonal range of 175-255 from 100-250 pixels.** However, channel Green and Red have also shown a **mid tone pixel from 75-100**. Channel Red also had low intensities which corresponds to **dark tones in the tonal range 0-75 from 0-120 pixels.**\n\n2. Figure 2 - Proper wearing of Disposable Mask\n    * The histogram of original images shown that all three channels Red, Blue and Green has a low intensities which corresponds to **dark tones in the tonal range 0-75 from 0-2000 pixels.**\n    * The histogram of the Detected face shown that all three channels have **mid tones in the tonal range of 75-175 from 200-1400 pixels.** However, all three channels have also shown a high intensities corresponding to **light tones  from 200-1400 pixels.**\n    * The histogram of the eyes of the Detected Face shown that all three channels Red, Blue, Green, have **mid tones from 100-275 pixels.** However, Channel Blue has a higher intensities of **light tones from 150-400 pixels.** Channel Red has a low intensity of **dark tone from 0-300 pixels.**"}}