{"cell_type":{"fe3a54ee":"code","474c0270":"code","086c70d9":"code","a1dd639b":"code","1dec8cbe":"code","9da4c3b4":"code","aeb23f2c":"code","bd2c8a0c":"code","26c7b7fb":"code","d4e0599b":"code","788070a7":"code","de1b5c07":"code","cb0e6cbd":"code","1ba8e4cc":"code","54752762":"code","abf9b3e5":"code","2063353d":"code","f2609376":"code","5546216b":"code","bede4f82":"markdown","3549a410":"markdown","704dc097":"markdown","3840b5d3":"markdown","03dd14f1":"markdown","c9b34b69":"markdown","af4390e2":"markdown","a7fc598a":"markdown","b59a9483":"markdown"},"source":{"fe3a54ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","474c0270":"import matplotlib.pyplot as plt\nimport seaborn as sns","086c70d9":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndf.head()","a1dd639b":"df.shape","1dec8cbe":"df.isnull().sum()","9da4c3b4":"sns.countplot(df['class'])","aeb23f2c":"plt.figure(figsize = (14,6))\ng = sns.catplot(x=\"cap-shape\", hue=\"cap-color\", col=\"class\",\n                data=df, kind=\"count\",\n                height=8, aspect=.7);","bd2c8a0c":"plt.figure(figsize = (14,6))\ng = sns.catplot(x=\"odor\", hue=\"bruises\", col=\"class\",\n                data=df, kind=\"count\",\n                height=8, aspect=.7 , palette = 'inferno');","26c7b7fb":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf = df.apply(LabelEncoder().fit_transform)   \ndf.head()","d4e0599b":"x = df.drop(['class'] , axis = 1)\ny = df['class']","788070a7":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.3 , random_state = 0)","de1b5c07":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0 , max_depth = 5)\ndt.fit(x_train , y_train)","cb0e6cbd":"dt.score(x_train , y_train)","1ba8e4cc":"predictions = dt.predict(x_test)","54752762":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test , predictions)","abf9b3e5":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth = 5)","2063353d":"rf.fit(x_train , y_train)\nrf.score(x_train , y_train)","f2609376":"predictions = rf.predict(x_test)\nrf.score(x_test , y_test)","5546216b":"accuracy_score(y_test , predictions)","bede4f82":"# **Data Preprocessing**","3549a410":"# Inference - \n# 1. Decision Tree Accuracy - 98.2%\n# 2. Random Forest Accuracy - 99%\n# Hence, Ramdom Forest is comparitively better","704dc097":"# **Data Analysis and Visualisation**","3840b5d3":"# **Attributes**","03dd14f1":"1. **White Coloured and Bell Shaped Mushrooms are highly recommended for eating**\n2. **Red Coloured Knobbed Shaped Mushrooms are poisonous**","c9b34b69":"1. **Odourless and Bruised Mushrooms are highly recommended for eating**\n2. **Fishy Odour with No Bruises Mushrooms are poisonous**","af4390e2":"# **Random Forest Model**","a7fc598a":"Attribute Information: (classes: edible=e, poisonous=p)\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","b59a9483":"# **Decision Tree Model**"}}