{"cell_type":{"6cb24908":"code","03bd9ff5":"code","05ba26bb":"code","757ef3a9":"code","a9b4b983":"code","0f366f22":"code","0405bf8e":"code","0bbd98d0":"code","38389fc5":"code","03a91f99":"code","7847eae4":"code","787810d0":"code","d5c28843":"code","19a38032":"code","cbf7767a":"code","3df85f99":"code","0d397eec":"code","76afec39":"code","10e40a57":"code","6270dfe7":"code","593777ea":"code","2250a619":"code","74f8b90e":"code","d66e437a":"code","851ea45f":"code","0c06fbfb":"code","4300386b":"code","c50bd1d0":"code","e5d4c8e6":"code","6a18b398":"code","71166129":"code","0cde785c":"code","8b288f2b":"code","90a27dc6":"markdown","a8152e78":"markdown","93f673a2":"markdown","c37e4e66":"markdown","e738a8e6":"markdown","1834bb90":"markdown","611a4445":"markdown","5bc8c73d":"markdown","1c36cb94":"markdown","f2944d75":"markdown","f793159d":"markdown","ee957a8f":"markdown","0289050e":"markdown","66418ecb":"markdown","1496245c":"markdown","1acb97b3":"markdown"},"source":{"6cb24908":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.model_selection import RepeatedKFold\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport math\nimport random","03bd9ff5":"path = '\/kaggle\/input\/stanford-covid-vaccine'\ntrain = pd.read_json(f'{path}\/train.json',lines=True)\ntest = pd.read_json(f'{path}\/test.json', lines=True)\nsub = pd.read_csv(f'{path}\/sample_submission.csv')","05ba26bb":"train.shape, train['id'].nunique(), test.shape, sub.shape","757ef3a9":"train.head()","a9b4b983":"train.info()","0f366f22":"sample = train.loc[train['id'] == 'id_001f94081']\nsample","0405bf8e":"sample['sequence'].values[0]","0bbd98d0":"Counter(sample['sequence'].values[0])","38389fc5":"sample['structure'].values[0]","03a91f99":"Counter(sample['structure'].values[0])","7847eae4":"sample['predicted_loop_type'].values[0]","787810d0":"Counter(sample['predicted_loop_type'].values[0])","d5c28843":"sample","19a38032":"len(sample['reactivity'].values[0])","cbf7767a":"mol = np.load('\/kaggle\/input\/stanford-covid-vaccine\/bpps\/id_001f94081.npy')\nplt.imshow(mol);","3df85f99":"train['seq_scored'].value_counts()","0d397eec":"test['seq_scored'].value_counts()","76afec39":"train.head()","10e40a57":"train_data = []\nfor mol_id in train['id'].unique():\n    sample_data = train.loc[train['id'] == mol_id]\n    for i in range(68):\n        sample_tuple = (sample_data['id'].values[0], sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i],\n                        sample_data['reactivity'].values[0][i], sample_data['reactivity_error'].values[0][i],\n                        sample_data['deg_Mg_pH10'].values[0][i], sample_data['deg_error_Mg_pH10'].values[0][i],\n                        sample_data['deg_pH10'].values[0][i], sample_data['deg_error_pH10'].values[0][i],\n                        sample_data['deg_Mg_50C'].values[0][i], sample_data['deg_error_Mg_50C'].values[0][i],\n                        sample_data['deg_50C'].values[0][i], sample_data['deg_error_50C'].values[0][i])\n        train_data.append(sample_tuple)","6270dfe7":"train_data = pd.DataFrame(train_data, columns=['id', 'sequence', 'structure', 'predicted_loop_type', 'reactivity', 'reactivity_error', 'deg_Mg_pH10', 'deg_error_Mg_pH10',\n                                  'deg_pH10', 'deg_error_pH10', 'deg_Mg_50C', 'deg_error_Mg_50C', 'deg_50C', 'deg_error_50C'])\ntrain_data.head()","593777ea":"fig, ax = plt.subplots(figsize = (24, 10))\nfor i, col in enumerate(['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C',\n       'reactivity_error', 'deg_error_Mg_pH10', 'deg_error_pH10', 'deg_error_Mg_50C', 'deg_error_50C']):\n    plt.subplot(2, 5, i + 1);\n    plt.hist(train_data[col])\n    plt.title(f'{col} histogram');\n    plt.xticks(rotation=45)","2250a619":"train_data.sort_values('reactivity_error')","74f8b90e":"train.loc[train['id'] == 'id_a1719ebbc']","d66e437a":"test_data = []\nfor mol_id in test['id'].unique():\n    sample_data = test.loc[test['id'] == mol_id]\n    for i in range(sample_data['seq_scored'].values[0]):\n        sample_tuple = (sample_data['id'].values[0] + f'_{i}', sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i])\n        test_data.append(sample_tuple)","851ea45f":"test_data = pd.DataFrame(test_data, columns=['id', 'sequence', 'structure', 'predicted_loop_type'])\ntest_data.head()","0c06fbfb":"train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['reactivity'].mean().reset_index().head()","4300386b":"test_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['reactivity'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_Mg_pH10'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_pH10'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_Mg_50C'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_50C'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])","c50bd1d0":"test_data.head()","e5d4c8e6":"sub.head()","6a18b398":"sub.shape, test_data.shape","71166129":"sub1 = pd.merge(sub[['id_seqpos']], test_data, left_on='id_seqpos', right_on='id', how='left').drop(['id', 'sequence', 'structure', 'predicted_loop_type'], axis=1)\nsub1.head()","0cde785c":"sub1[['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']] = sub1[['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']].fillna(0) * 0.9","8b288f2b":"sub1.to_csv('submission.csv', index=False)","90a27dc6":"### BBPS\n\nI'm not sure what this is, but it seems to be some representations of the data.","a8152e78":"## Train, public test and private test","93f673a2":"### Sequence","c37e4e66":"So we have 2400 samples in train dataset. Let's look at all available information about one sample","e738a8e6":"What are these huge errors???","1834bb90":"## Baseline submission\n\nLet's submit a baseline - mean value by categorical columns","611a4445":"Do you see that test has 2 unique values in `seq_scored`? rows with `68` are public test, `91` is private test.","5bc8c73d":"### Structure\n\nAn array of (, ), and . characters that describe whether a base is estimated to be paired or unpaired. Paired bases are denoted by opening and closing parentheses e.g. (....) means that base 0 is paired to base 5, and bases 1-4 are unpaired.","1c36cb94":"**Important**\n\nDid you notice that test and submission have different number of rows? This is because test data contains sequences and the submission is flattened. I'll show this in details later.","f2944d75":"## Data overview\n\nThis competition has unique and interesting data, let's analyze it.\n\nFirst of all - main data is in `json` format, not `csv` which is more common on Kaggle.","f793159d":"## Preparing the data\n\nMy idea is the following: let's try working with this data as tabular. To do this, we need to flatten the data. Let's try.","ee957a8f":"This is RNA sequence, a combination of A, G, U, and C for each sample. There is a separate column showing sequence length - `seq_length`. Also notice that there is column `seq_scored` - it shows that this number of positions has target values.\n\nIt is very important to remember that both `seq_length` and `seq_scored` are different in train and test. This means that we have to be able to work with sequences of different lengths.","0289050e":"### Predicted loop type\n\nDescribes the structural context (also referred to as 'loop type')of each character in sequence. Loop types assigned by bpRNA from Vienna RNAfold 2 structure. From the bpRNA_documentation: S: paired \"Stem\" M: Multiloop I: Internal loop B: Bulge H: Hairpin loop E: dangling End X: eXternal loop","66418ecb":"## Important information about filtering the data!\n\nHere is information from \"data\" tab of this competition, I'll distill in to the most important things.\n\n* there were 3029 RNA sequences of length 107;\n* measurements can be done only on the first 68 points of sequences;\n* measurements were done in 5 conditions (reactivity,deg_Mg_pH10,deg_pH10,deg_Mg_50C,deg_50C);\n* 629 from 3029 are in public test datased. 2400 other sequences are in train;\n* they were filtered using the following criteria:\n\n> 1. minimal value of conditions > -0.5\n> 2. Mean signal\/noise across all conditions > 1.0. calculated as mean value divided by mean error\n> 3. The resulting sequences were clustered into clusters with less than 50% sequence similarity, and the 629 test set sequences were chosen from clusters with 3 or fewer members. That is, any sequence in the test set should be sequence similar to at most 2 other sequences.\n\n* train data wasn't filtered, so it could make sense to apply first two filters to training data.\n* on the other hand the final scoring will be done on non-filtered data. So I suppose it would be better not to do any manual filtering in the end;","1496245c":"## General information\n\nThis competition may help with defeating COVID-19\n\nOn of the most promising approaches are mRNA (messenger RNA) vaccines. One of the biggest challenges is developing stable mRNA molecules because they degrade spontaneously abd rapidly.\n\nEterna - online video game platform - has many challenges with solving scientific problems and helped to make many advances.\n\nIn this competition we have a subset of Eterna dataset with 3000 RNA molecules and their degradation rates. Our task is to predict those degradation rates. Our models will be scores on a new generation of molecules.\n\nNotice that this competition lasts only 25 days and isn't kernel-only competition - this means we can submit csv directly!\n\n\n![](https:\/\/www.ddw-online.com\/library\/sid32\/64-figure-3.jpg)\n\n\n![](https:\/\/i.imgur.com\/cVMlp16.png)","1acb97b3":"The rest of the values are our targets and their errors. Note that for scoring we need only to predict `reactivity`, `deg_Mg_pH10` and `deg_Mg_50C`."}}