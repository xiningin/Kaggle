{"cell_type":{"92aef2bc":"code","7ea09686":"code","3f986028":"code","874b636d":"code","51e2e063":"code","5922137e":"code","e81d2579":"code","6ee1bd56":"code","70feca14":"code","e897654f":"code","57d19765":"code","16774e87":"code","c448ea52":"code","d9a3a9a9":"code","d6d17b21":"code","708e8507":"code","2666bcdf":"code","8f337073":"code","b0347520":"code","46f0251f":"code","698b0e0e":"code","e19c6f79":"code","ca0e03f9":"code","65b03f40":"code","d24fc964":"code","12cb4f22":"code","fe3a655e":"code","51504259":"code","39bcd90d":"code","0a3790ed":"code","1d6189dc":"code","1ba0082e":"code","10a437ed":"code","9947cbfe":"code","053731e6":"code","a91fcaa8":"code","c02b9010":"markdown","10e17b9d":"markdown","620fe049":"markdown","55678295":"markdown","34bb358b":"markdown","d87e525d":"markdown","5c304737":"markdown","f22e395f":"markdown","7615024d":"markdown","f890a8e2":"markdown","599c1058":"markdown","0541db6b":"markdown","35f097c8":"markdown","3b4dc696":"markdown","29f41983":"markdown","7c8e66fc":"markdown","7c3bf070":"markdown","d6ccd131":"markdown","02a5c9ce":"markdown","5406e3c8":"markdown","c1e8b53a":"markdown","ec902cc9":"markdown","3d096e98":"markdown","48b653f2":"markdown","95df85ed":"markdown","ad4e8545":"markdown","0b236589":"markdown","a00119d2":"markdown","1fbc846f":"markdown","41e96377":"markdown","9681851e":"markdown","fa4c80b9":"markdown","690b91cf":"markdown","d6d71036":"markdown","cbec1aec":"markdown"},"source":{"92aef2bc":"from IPython.display import HTML\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code.\"><\/form>''')","7ea09686":"import numpy as np # numpy arrays \/ linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px # map plot\nimport warnings\nwarnings.filterwarnings('ignore') \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.dates as md\n%matplotlib inline\nfrom scipy.optimize import curve_fit # predictive modeling\nimport seaborn as sns\nimport statsmodels.api as sm\n\nimport datetime\nfrom datetime import date","3f986028":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv', header=0)\ndf.head()","874b636d":"#fill out missing values for the latest update\ndf['total_vaccinations'] = df.groupby('country')['total_vaccinations'].ffill()\ndf['people_vaccinated'] = df.groupby('country')['people_vaccinated'].ffill()\ndf['people_fully_vaccinated'] = df.groupby('country')['people_fully_vaccinated'].ffill()\ndf['people_vaccinated'] = df.groupby('country')['people_vaccinated'].ffill()\ndf['total_vaccinations_per_hundred'] = df.groupby('country')['total_vaccinations_per_hundred'].ffill()\ndf['people_vaccinated_per_hundred'] = df.groupby('country')['people_vaccinated_per_hundred'].ffill()\ndf['people_fully_vaccinated_per_hundred'] = df.groupby('country')['people_fully_vaccinated_per_hundred'].ffill()\ndf = df.fillna(0) #all remaining NA change to 0\ndf.head()","51e2e063":"#country list\ncountry = df['country'].unique()\ntotal_vacc = []\npeople_vaccinated = []\npeople_fully_vaccinated = []\ntotal_vacc_per_hundred = []\npeople_vacc_per_hundred = []\npeople_fully_vacc_per_hundred = []\nvacc_type = []\ndates = []\n\nfor i in range(0,len(country)):\n        #getting the numpy array with the latest total_vaccinations number\n        total_vacc.append(df[\"total_vaccinations\"][df['country'] == country[i]].iloc[-1])\n        #getting the numpy array with the latest people_vaccinated number\n        people_vaccinated.append(df[\"people_vaccinated\"][df['country'] == country[i]].iloc[-1])\n        #getting the numpy array with the latest people_fully_vaccinated number\n        people_fully_vaccinated.append(df[\"people_fully_vaccinated\"][df['country'] == country[i]].iloc[-1])\n        #data per hundred\n        total_vacc_per_hundred.append(df[\"total_vaccinations_per_hundred\"][df['country'] == country[i]].iloc[-1])\n        people_vacc_per_hundred.append(df[\"people_vaccinated_per_hundred\"][df['country'] == country[i]].iloc[-1])\n        people_fully_vacc_per_hundred.append(df[\"people_fully_vaccinated_per_hundred\"][df['country'] == country[i]].iloc[-1])  \n        #vaccines type\n        vacc_type.append(df[\"vaccines\"][df['country'] == country[i]].iloc[-1])  \n        #getting the numpy array with the latest date update\n        dates.append(df[\"date\"][df['country'] == country[i]].iloc[-1])  \n        \ndf_actual = pd.DataFrame({'total_vaccinations': total_vacc, \n                            'people_vaccinated': people_vaccinated, \n                            'people_fully_vaccinated': people_fully_vaccinated,\n                            'total_vacc_per_hundred': total_vacc_per_hundred,\n                            'people_vacc_per_hundred': people_vacc_per_hundred,\n                            'people_fully_vacc_per_hundred': people_fully_vacc_per_hundred,\n                            'vacc_type': vacc_type,\n                            'update_date': dates}, \n                             index = country)\ndf_actual['total_vaccinations'] = df_actual['total_vaccinations'].astype(int)\ndf_actual['people_vaccinated'] = df_actual['people_vaccinated'].astype(int)\ndf_actual['people_fully_vaccinated'] = df_actual['people_fully_vaccinated'].astype(int)\ndf_actual.head(10)","5922137e":"dat1 = df_actual.iloc[:,0].values\n\nplot_map = px.choropleth(df_actual, locations=df_actual.index,\n                    color_continuous_scale=\"Peach\",\n                    locationmode='country names',\n                    color=dat1,\n                    width = 950,\n                    height= 600,\n                    labels = {'color':'Total Vaccinations'})\nplot_map.update_layout(title=\"Total Vaccinations Map\", title_x=0.5)\nplot_map.show()","e81d2579":"df_top1 = df_actual.nlargest(10, 'total_vaccinations')\nplt.rcParams[\"figure.figsize\"] = (15,5)\nax = df_top1.plot.bar(y='total_vaccinations', color='red', rot=0,  width = 0.7)\nfor p in ax.patches:\n        ax.annotate(str(round(p.get_height()\/1000000, 2)) + \" M\", (p.get_x() * 1.005, p.get_height() * 1.005))","6ee1bd56":"dat2 = df_actual.iloc[:,1].values\n\nplot_map = px.choropleth(df_actual, locations=df_actual.index,\n                    locationmode='country names',\n                    color=dat2,\n                    width = 950,\n                    height= 600,\n                    labels = {'color':'People Vaccinated'})\nplot_map.update_layout(title=\"People Vaccinated Map\", title_x=0.5)\nplot_map.show()","70feca14":"df_top2 = df_actual.nlargest(10, 'people_vaccinated')\nplt.rcParams[\"figure.figsize\"] = (15,5)\nax = df_top2.plot.bar(y='people_vaccinated', color='darkblue', rot=0,  width = 0.7)\nfor p in ax.patches:\n        ax.annotate(str(round(p.get_height()\/1000000, 2)) + \" M\", (p.get_x() * 1.005, p.get_height() * 1.005)) ","e897654f":"dat3 = df_actual.iloc[:,2].values\n\nplot_map = px.choropleth(df_actual, locations=df_actual.index,\n                    color_continuous_scale=\"Viridis\",\n                    locationmode='country names',\n                    color=dat3,\n                    width = 950,\n                    height= 600,\n                    labels = {'color':'People Fully Vaccinated'})\nplot_map.update_layout(title=\"People Fullly Vaccinated Map\", title_x=0.5)\nplot_map.show()","57d19765":"df_top3 = df_actual.nlargest(10, 'people_fully_vaccinated')\nplt.rcParams[\"figure.figsize\"] = (15,5)\nax = df_top3.plot.bar(y='people_fully_vaccinated', color='purple', rot=0,  width = 0.7)\nfor p in ax.patches:\n        ax.annotate(str(round(p.get_height()\/1000000, 2)) + \" M\", (p.get_x() * 1.005, p.get_height() * 1.005)) ","16774e87":"mpl.rcParams['figure.figsize'] = (20,5)\ndf_actual.plot(kind = 'box', title = 'Boxplot - All Countries')","c448ea52":"df_top1 = df_actual.nlargest(10, 'total_vaccinations')\nmpl.rcParams['figure.figsize'] = (20,5)\ndf_top1.plot(kind = 'box', title = 'Boxplot - Top 10 Countries')","d9a3a9a9":"correlation_matrix = df_actual.corr()\nplt.subplots(figsize=(8,5))\nsns.heatmap(correlation_matrix, annot=True, cmap=\"YlGnBu\")\nplt.title('Correlation Plot (Heatmap)', size=18)\nplt.show()","d6d17b21":"df_top4 = df_actual.nlargest(20, 'people_fully_vacc_per_hundred')\ndf_top4.sort_values(by=['people_fully_vacc_per_hundred'], inplace=True)\nplt.rcParams[\"figure.figsize\"] = (15,5)\nax = df_top4.plot.barh(y='people_fully_vacc_per_hundred', color='darkblue', rot=0, width = 0.8)\nplt.title(\"Bar plot - % of population fully vaccinated\", size=18)","708e8507":"#Levenberg\u2013Marquardt (LM) Algorithm\ndef func(x, a, b):\n    return a * np.exp(b * x)\n\n#select the US data'\ndf_us = df[df['country'] == 'United States']\ndf_us['people_fully_vaccinated'] = df_us['people_fully_vaccinated'].astype(int)\ny =df_us['people_fully_vaccinated'].to_numpy() #depended variable\nx = np.arange(len(y)) #independent variable\n\n#Data and Predictive Modelling in Pandemics https:\/\/www.youtube.com\/watch?v=zk2ptM4H2Uk&feature=youtu.be\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in the US')\npopt, pcov = curve_fit(func, x, y, p0=(1, 0.1))\nplt.plot(x, func(x, *popt), 'r-', label='Predicted curve, fit: a = %5.3f, b = %5.3f' % tuple(popt))\nplt.xlabel('Days Since 12\/20\/2020')\nplt.ylabel('People Fully Vaccinated')\nplt.legend()\nplt.show()","2666bcdf":"def mean_absolute_percentage_error(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\ny_t1= y\ny_t1[y_t1 == 0] = 1 # change 0 to1 tu exclude deviding by 0\ny_t1 = y_t1[25:] # exclude first 40 days\n\ny_p1 = func(x, *popt)\ny_p1 = y_p1.astype(int)\ny_p1[y_p1 < 0] = 1\ny_p1 = y_p1[25:]\n\nMAPE1 = mean_absolute_percentage_error(y_t1, y_p1)\nprint (\"MAPE (Mean Absolute Percentage Error) = \" + str(round(MAPE1,2)) + \"%\")","8f337073":"x2 = np.arange(len(y)+50)\ny2_predicted = []\n       \nfor i in range(0, len(x2)):\n    y2_predicted.append(popt[0] * np.exp((popt[1]) * x2[i]))\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in the US')    \nplt.plot(x2, y2_predicted, 'r-', label='Predictive exponential model for the next 50 days')\nplt.xlabel('Days Since 12\/20\/2020')\nplt.ylabel('People Vaccinated Prediction')\nplt.legend()\nplt.show()","b0347520":"'select Israel data'\ndf_israel = df[df['country'] == 'Israel']\ndf_israel['people_fully_vaccinated'] = df_israel['people_fully_vaccinated'].astype(int)\ny = df_israel['people_fully_vaccinated'].to_numpy() \nx = np.arange(len(y)) \n\n#Linear Regression https:\/\/towardsdatascience.com\/introduction-to-linear-regression-in-python-c12a072bedf0\nxmean = np.mean(x)\nymean = np.mean(y)\ndf_israel = df_israel.reset_index(drop=True)\ndf_israel.reset_index(level=0, inplace=True)\ndf_israel.head()\n\n# Calculate the terms needed for the numator and denominator of beta\ndf_israel['xycov'] = (df_israel['index'] - xmean) * (df_israel['people_fully_vaccinated'] - ymean)\ndf_israel['xvar'] = (df_israel['index'] - xmean)**2\n\n# Calculate beta and alpha\nbeta = df_israel['xycov'].sum() \/ df_israel['xvar'].sum()\nalpha = ymean - (beta * xmean)\n\nypred = alpha + beta * x\n\n# Plot regression against actual data\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in Israel')     # scatter plot showing actual data\nplt.plot(x, ypred, 'r-', label='Predicted Linear Regression')   # regression line\nplt.title('Actual data vs Predicted')\nplt.xlabel('Days Since 12\/19\/2020')\nplt.ylabel('People Fully Vaccinated')\nplt.legend()\nplt.show()\n","46f0251f":"def mean_absolute_percentage_error(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\ny_t2= y\ny_t2[y_t2 == 0] = 1 # change 0 to1 tu exclude deviding by 0\ny_t2 = y_t2[40:] # exclude first 40 days\n\ny_p2 = ypred\ny_p2 = y_p2.astype(int)\ny_p2[y_p2 < 0] = 1\ny_p2 = y_p2[40:]\n\nMAPE = mean_absolute_percentage_error(y_t2, y_p2)\nprint (\"MAPE (Mean Absolute Percentage Error) = \" + str(round(MAPE,2)) + \"%\")","698b0e0e":"x1 = np.arange(len(y)+30)\ny1_predicted = []\n       \nfor i in range(0, len(x1)):\n    y1_predicted.append(popt[0] * np.exp((popt[1]) * x1[i]))\n    \nypred1 = alpha + beta * x1\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in Israel')     # scatter plot showing actual data\nplt.plot(x1, ypred1, 'r-', label='Predictive model for the next 30 days')   # regression line\nplt.title('Actual data vs Predicted')\nplt.xlabel('Days Since 12\/19\/2020')\nplt.ylabel('People Fully Vaccinated')\nplt.legend()\nplt.show()","e19c6f79":"x2 = np.arange(len(y)+60)\ny2_predicted = []\n       \nfor i in range(0, len(x1)):\n    y2_predicted.append(popt[0] * np.exp((popt[1]) * x2[i]))\n    \nypred2 = alpha + beta * x2\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in Israel')     # scatter plot showing actual data\nplt.plot(x2, ypred2, 'r-', label='Predictive model for the next 60 days')   # regression line\nplt.title('Actual data vs Predicted')\nplt.xlabel('Days Since 12\/19\/2020')\nplt.ylabel('People Fully Vaccinated')\nplt.legend()\nplt.show()","ca0e03f9":"x2 = np.arange(len(y)+90)\ny2_predicted = []\n       \nfor i in range(0, len(x1)):\n    y2_predicted.append(popt[0] * np.exp((popt[1]) * x2[i]))\n    \nypred2 = alpha + beta * x2\nplt.figure(figsize=(10, 5))\nplt.plot(x, y, 'ko', label='Actual number of people fully vaccinated in Israel')     # scatter plot showing actual data\nplt.plot(x2, ypred2, 'r-', label='Predictive model for the next 90 days')   # regression line\nplt.title('Actual data vs Predicted')\nplt.xlabel('Days Since 12\/19\/2020')\nplt.ylabel('People Fully Vaccinated')\nplt.legend()\nplt.show()","65b03f40":"dat4 = df_actual.iloc[:,6].values\n\nplot_map = px.choropleth(df_actual, locations=df_actual.index,\n                    locationmode='country names',\n                    color=dat4,\n                    width = 1200,\n                    height= 550,\n                    labels = {'color':'Vaccine Types \/ Combinations'})\nplot_map.update_layout(title=\"People Vaccinated Map per Vaccines Combinations\", title_x=0.5)\nplot_map.show()","d24fc964":"vacc_type = df_actual.copy()\nvacc_type.reset_index(level=0, inplace=True)\nvacc_type = vacc_type.groupby('vacc_type').agg(['count'])\nvacc_type_sorted = vacc_type.apply(lambda x: x.sort_values(ascending=True))\n\nplt.rcParams[\"figure.figsize\"] = (20,15)\nax = vacc_type_sorted.plot.barh(y='index', color='darkred', rot=0, width = 0.8)\nplt.xlabel('Countries Count')\nplt.ylabel('Vaccine Types')\nplt.title('Vaccine Combinations', size=18)","12cb4f22":"df_cases = pd.read_csv('https:\/\/opendata.ecdc.europa.eu\/covid19\/nationalcasedeath\/csv', header=0)\ndf_cases = df_cases.fillna(0)\ndf_cases.head(10)","fe3a655e":"#select only cases for the US\ndf_cases_us = df_cases[df_cases['country'] == 'United States']\ndf_cases_us = df_cases_us[df_cases['indicator'] == 'cases']\ndf_cases_us.head(15)","51504259":"plt.rcParams[\"figure.figsize\"] = (15,5)\ndf_cases_us.sort_values(by=['year_week'], inplace=True)\ndf_cases_us.plot(x=\"year_week\", y=[\"weekly_count\", \"cumulative_count\"])\nplt.title(\"The US COVID-19 weekly cases\", size=18)\nplt.show()","39bcd90d":"#select only deaths for the US\ndf_deaths_us = df_cases[df_cases['country'] == 'United States']\ndf_deaths_us = df_deaths_us[df_deaths_us['indicator'] == 'deaths']\n\nplt.rcParams[\"figure.figsize\"] = (15,5)\ndf_deaths_us.sort_values(by=['year_week'], inplace=True)\ndf_deaths_us.plot(x=\"year_week\", y=[\"weekly_count\", \"cumulative_count\"])\nplt.title(\"The US COVID-19 weekly deaths\", size=18)\nplt.show()","0a3790ed":"#select the US vaccination data \ndf_vacc_us = df[df['country'] == 'United States']\ndf_vacc_us['total_vaccinations'] = df_vacc_us['total_vaccinations'].astype(int)\ndf_vacc_us['people_vaccinated'] = df_vacc_us['people_vaccinated'].astype(int)\ndf_vacc_us['people_fully_vaccinated'] = df_vacc_us['people_fully_vaccinated'].astype(int)\ndf_vacc_us['date'] = pd.to_datetime(df_vacc_us['date'], errors='coerce') #converting date\ndf_vacc_us['week_num'] = df_vacc_us['date'].dt.week #adding week number\ndf_vacc_us.head()","1d6189dc":"# getting the last row per every week\nweek_num = df_vacc_us['week_num'].unique()\nvacc_weekly = []\nfor i in range(0,len(week_num)):\n        #getting the numpy array with the latest weekly people_vaccinated number\n        vacc_weekly.append(df_vacc_us[\"people_vaccinated\"][df_vacc_us['week_num'] == week_num[i]].iloc[-1])\n#print(vacc_weekly)","1ba0082e":"#getting last weeks cumulative_count from the US cases data\nweek_num_cases = df_cases_us.iloc[-len(week_num):,6].values\n#print(week_num_cases)\ncases_latest = df_cases_us.iloc[-len(week_num):,5].values\n#print(cases_latest)\ndeaths_latest = df_deaths_us.iloc[-len(week_num):,5].values\n#print(deaths_latest)","10a437ed":"plt.figure(figsize=(10, 5))\nplt.plot(week_num_cases, vacc_weekly, 'r-', label='People Vaccinated (Cumulative Count)')\nplt.plot(week_num_cases, cases_latest, 'b-', label='Weekly Count - Cases')\nplt.plot(week_num_cases, deaths_latest, 'ko', label='Weekly Count - Deaths')\nplt.xlabel('Week Number')\nplt.ylabel('People Fully Vaccinated vs New Weekly Cases')\nplt.title(\"The US COVID-19 weekly cases\/ deaths vs Total number of people vaccinated\", size=12)\nplt.legend()\nplt.show()","9947cbfe":"# correlation matrix between cases and vaccinations\nr = np.corrcoef(cases_latest, vacc_weekly)\nprint(r)","053731e6":"#combining arrays to the dataframe\ndf_cases_vacc = pd.DataFrame({'people_vaccinated': vacc_weekly, \n                            'weekly_cases': cases_latest,\n                             'weekly_deaths': deaths_latest},\n                                index = week_num_cases)\ndf_cases_vacc.head()","a91fcaa8":"correlation_matrix = df_cases_vacc.corr()\nplt.subplots(figsize=(8,5))\nsns.heatmap(correlation_matrix, annot=True, cmap= 'coolwarm', linewidths=3, linecolor='black')\nplt.title('Correlation Plot (Heatmap)', size=18)\nplt.show()","c02b9010":"## Total vaccinations and people vaccinated number by the latest update date","10e17b9d":"#### Conclusion: if the vaccination continuous with the same pace the population of Israel (~9 million people) will be fully vaccinated before July 2021.","620fe049":"### Top 10 Countries With The Highest Number of People Fully Vaccinated","55678295":"#### Conclusion: the distribution of vaccinations for all countries represent that the median of vaccines provided is around ~160k, that means that most of the countries are only starting the vaccination process. The median of top 10 countries is around 16M vaccines.","34bb358b":"### Top 10 Countries With The Highest Vaccinations","d87e525d":"### Heatmap Correlations Between Data Fields","5c304737":"<h1><center>Thank you! Stay safe!<\/center><\/h1>","f22e395f":"#### Conclusion: there are no correlation between vaccines volume provided and % of population that have got the vaccines. The reason is big difference of population between countries, i.e. small countries need less volume of vaccines. ","7615024d":"### The US Predictive Model for the next 60 days","f890a8e2":"## Correlation between the US weekly COVID-19 cases and vaccinations process","599c1058":"### The Map of People Fully Vaccinated","0541db6b":"#### The average difference between the predictive values and the actual values is ~25% (excluding first 25 days of data), that means the preditive model has not the perfect fit.","35f097c8":"### Israel Predictive Model for the next 30, 60 and 90 days","3b4dc696":"#### Conclusion: if the vaccination continuous with the exponential trend the population of the US (~350 million people) might be fully vaccinated before June 2021.\n##### https:\/\/www.nytimes.com\/2021\/03\/02\/us\/politics\/merck-johnson-johnson-vaccine.html","29f41983":"#### Conclusion: the US and UK have the greatest number of people who got at least one dose of a vaccine. (The data for China is not presented on the web-sourse.)","7c8e66fc":"### Data Sourse of COVID-19 World Vaccination Progress <font color='red'>(last update 03.15.2021)<\/font>: \n##### https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress\/notebooks","7c3bf070":"### The US COVID-19 Statistics ","d6ccd131":"### The Map of Total Vaccinations","02a5c9ce":"## The distribution of vaccinactions","5406e3c8":"### Description of the data fields\n1. country - The vaccinated countries.\n2. iso_code - The currency codes per country.\n3. date - Update date.\n4. total_vaccinations - Total number of vaccines made.\n5. people_vaccinated - Total number of people vaccinated.\n6. people_fully_vaccinated - Number of people completed vaccination.\n7. daily_vaccinations - Number of vaccinations on that day\n8. total_vaccinations_per_hundred - Percentage of vaccines per country population: (total vaccinated \/ population) * 100. \n9. people_vaccinated_per_hundred - Percentage of vaccinated people per country population: (people vaccinated \/ population) * 100.\n10. people_fully_vaccinated_per_hundred - Calculated by (people fully vaccinated \/ population) * 100.\n11. daily_vaccinations_per_million - Calculated by (daily vaccinations \/ population) * 1 million.\n12. vaccines - Type of vaccine.\n13. source_name - Source of informaiton about vaccination.\n14. source_website - Website source.","c1e8b53a":"### % of population fully vaccinated per country","ec902cc9":"## Vaccine Types and Combinations","3d096e98":"#### Correlation matrix of COVID-19 cases and vaccinations progress","48b653f2":"#### Conclusion: Israel with 9M of population is leading the world in vaccinations, 43% of population are already fully vaccinated. The country has the health infrastructure and logistics to deliver the vaccines. ","95df85ed":"#### Conclusion: the most popular worldwide vaccines for March 2021 are Pfizer\/BioNTech, Moderna, Oxford\/AstraZeneca, Sputnik V.","ad4e8545":"## Israel Predictive Modelling of Vaccinations - Linear Regression","0b236589":"## COVID-19 cases (European Center for Disease Prevention and Control)\n##### https:\/\/www.ecdc.europa.eu\/en\/publications-data\/data-national-14-day-notification-rate-covid-19\n\nThe data file contains information on the 14-day notification rate of newly reported COVID-19 cases per 100 000 population and the 14-day notification rate of reported deaths per million population by week and country. Each row contains the corresponding data for a certain day and per country. The file is updated weekly.","a00119d2":"#### Conclusion: the correlation matric on the heatmap above represents a strong negative correlation (r = -0.93) between total people vaccinated and new COVID-19 cases. It means that vaccinations are reducing the level of new cases number, and the worldwide vaccinations might help to stop the pandemic.","1fbc846f":"### The Map of People Vaccinated","41e96377":"### Tracking the progress of COVID-19 vaccination:\n\n1. What vaccines are used and in which countries?\n2. What country is vaccinated more people?\n3. What country is vaccinated a larger percent from its population?\n4. Is there correlation between vaccinations and new COVID-19 cases?\n5. What is the forecast of vaccinations for the next months?","9681851e":"#### The average difference between the predictive values and the actual values is ~3% (excluding first 40 days of data), that means the preditive model is accurate. ","fa4c80b9":"## The US Predictive Modelling of Vaccinations - Curve Fit","690b91cf":"#### Conclusion: from the map above it is clear that the US and China provided the highest volume of vaccines. ","d6d71036":"<h1><center> COVID-19 World Vaccination Progress Notebook<\/center><\/h1>\n\n<h2><center>Welcome to the Jupyter notebook with COVID-19 vaccinations visualization and forecast <\/center><\/h2>","cbec1aec":"### Top 10 Countries With The Highest Number of People Vaccinated"}}