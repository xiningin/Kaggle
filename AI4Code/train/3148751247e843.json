{"cell_type":{"37366095":"code","8e2f54b8":"code","2cd06c2f":"code","e0145adb":"code","bc33f55d":"code","6f4850d2":"code","49c22744":"code","13d9070a":"code","92584e6f":"code","55da1e06":"code","f0e620a5":"code","197a32cd":"code","b0db3e55":"code","291a2cb0":"code","6f1e64a1":"code","026476d3":"code","2dd72dea":"code","81188428":"code","53fa8bcf":"code","9d9a9226":"code","aec93354":"markdown","215cb2ba":"markdown","f94dc595":"markdown","dc24bd79":"markdown","ec884dfa":"markdown","f7481f00":"markdown","62a03ef9":"markdown","f83ea466":"markdown","142605cf":"markdown","712772ee":"markdown","24762d95":"markdown","80962639":"markdown","b2373fda":"markdown","6301d09a":"markdown","76aaec82":"markdown","2504ef5e":"markdown","c1d7e1a8":"markdown"},"source":{"37366095":"import numpy as np\nimport matplotlib.pyplot as plt","8e2f54b8":"# This is 8 x 8 pixel gray imgage i.e 64 pixels total. Here, 0 is black and 255 is white\nx = np.array([ [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255], \n              [0,255,0,255,0,255,0,255] ])\nplt.imshow(x, cmap='gray')\nx.shape","2cd06c2f":"# This is 8 x 8 pixel gray imgage. If we want to make this as chess board type image. Hear, 0 is black and 255 is white\nx = np.array([ [0,255,0,255,0,255,0,255], \n              [255,0,255,0,255,0,255,0], \n              [0,255,0,255,0,255,0,255], \n              [255,0,255,0,255,0,255,0], \n              [0,255,0,255,0,255,0,255], \n              [255,0,255,0,255,0,255,0], \n              [0,255,0,255,0,255,0,255], \n              [255,0,255,0,255,0,255,0] ])\nplt.imshow(x, cmap='gray')\nx.shape","e0145adb":"# This is 8 x 8 pixel gray imgage. Now let us twick values of various pixel between 0 to 255. Hear, 0 is black and 255 is white.\nx = np.array([ [210,140,56,255,70,255,0,255], \n              [255,0,255,0,255,0,255,0], \n              [0,40,0,255,0,255,0,255], \n              [255,0,255,120,80,0,255,0], \n              [0,255,0,255,0,255,0,255], \n              [255,0,190,200,255,0,255,0], \n              [0,255,0,255,0,255,0,255], \n              [255,0,255,0,255,0,255,0] ])\nplt.imshow(x, cmap='gray')\nx.shape","bc33f55d":"# Let us generate colour image of 4 x 2 pixels\ny=np.array([[[255,0,0],[0,255,140]],\n           [[0,255,0],[255,255,0]],\n           [[0,0,255],[255,255,255]],\n           [[0,0,0],[0,200,2]]])\nplt.imshow(y)\ny.shape # this is 4 x 2 pixel image having 3 channel i.e. RGB","6f4850d2":"path = \"..\/input\/viratkothari\/1.jpg\"\nimg=plt.imread(path)\nprint(img.shape) # printing shape of image. It is colour so 427 x 630 image having 3 channel - RGB\n#print(img) # printing array value of image\nplt.imshow(img)\nplt.show() # printing image","49c22744":"# Crop image\nimg2=img[120:430,250:470]\nplt.imshow(img2)\nplt.show()","13d9070a":"# Increase the brightness\nBrightnessUp = 100 * np.ones((img.shape),dtype='int32')\nimg3=img+BrightnessUp\nplt.imshow(img3)\nplt.show()","92584e6f":"# Increase the brightness\nBrightnessDown = -100 * np.ones((img.shape),dtype='int32')\nimg3=img+BrightnessDown\nplt.imshow(img3)\nplt.show()","55da1e06":"# Add noise to the image\nAddNoise=np.random.randint(0,100,img.shape) # generating random number between 0 to 100 for the noise value\nimg4=img+AddNoise\nplt.imshow(img4)\nplt.show()","f0e620a5":"# Importing CV2\nimport cv2","197a32cd":"# Reading image using OpenCv, this is default BGR format\n\nimgOCV=cv2.imread(path) # use imgOCV=cv2.imread(r\"c:\\images\\1.jpg\") format for local images. r is for read as raw string\n#print(imgOCV)\n\nplt.imshow(imgOCV) \nplt.show() # image disply using matplotlib","b0db3e55":"# convert image read by openCV in BRG format to RGB format\nimgOCV1=cv2.cvtColor(imgOCV,cv2.COLOR_BGR2RGBA)\nplt.imshow(imgOCV1)\nplt.show()","291a2cb0":"# Reading image in grayscale using openCV\n\nimgOCV2=cv2.imread(path,0) # use imgOCV=cv2.imread(r\"c:\\images\\1.jpg\") format for local images. r is for read as raw string\n#print(imgOCV)\n\nprint(imgOCV2.shape)\nplt.imshow(imgOCV2, cmap='gray') \nplt.show() # image disply using matplotlib","6f1e64a1":"imgOCV3 = cv2.Canny(imgOCV,150,255)\n\nplt.imshow(imgOCV3, cmap='gray') # for grayscale\n#plt.imshow(imgOCV) # for colour\n\nplt.show() # image disply using matplotlib","026476d3":"# Expanding image\n\nprint(imgOCV1.shape)\n# fx and fy scales the image by twice if set to 2. See the x and y scale\nimgOCV4 = cv2.resize(imgOCV1, None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)\n\n#print(imgOCV4)\nprint(imgOCV4.shape)\nplt.imshow(imgOCV4)\nplt.show()","2dd72dea":"# Shrinking\n\nprint(imgOCV1.shape)\n\n#fx and fy scales the image to one fifth .2 (20% of original). See the x and y scale\nimgOCV5 = cv2.resize(imgOCV1, None,fx=.2, fy=.2, interpolation = cv2.INTER_CUBIC)\n\n#print(imgOCV5)\nprint(imgOCV5.shape)\nplt.imshow(imgOCV5)\nplt.show()","81188428":"# Custom image rotation\n\n# @title Transformation Parameters { run: \"auto\" }\n\n# theta_degrees is for depth tilting\n# shift_x is for shifting image on x axis\n# shift_y is for shifting image on y axis\n\ntheta_degrees = 0 # @param {type:\"slider\", min:0, max:360, step:10}\nshift_x = 0 # @param {type:\"slider\", min:-100, max:100, step:2}\nshift_y = 0 # @param {type:\"slider\", min:-100, max:100, step:2}\n\n# We can also play around with rotations by defining our M matrix, \n# which has the form:\n\"\"\"\n| cos(theta) -sin(theta) tx | \n| sin(theta)  cos(theta) ty |\n\"\"\"\n\nrows, cols, _ = imgOCV1.shape\n\nradians = theta_degrees * np.pi \/ 180\nM = [\n        [np.cos(radians), -np.sin(radians), shift_x], \n        [np.sin(radians),  np.cos(radians), shift_y]\n    ]\n\nM = np.array(M)\nrows += int(shift_x)\ncols += int(shift_y)\n\nimgOCV6 = cv2.warpAffine(imgOCV1, M, (cols,rows))\n\nplt.imshow(imgOCV6)\nplt.show()","53fa8bcf":"# Image Thresholding\n\nimgOCV7 = imgOCV1\n\nplt.imshow(imgOCV7), plt.title('THRESH_BINARY')\nplt.show()\n\nret,thresh1 = cv2.threshold(imgOCV7,127,255,cv2.THRESH_BINARY)\nplt.imshow(thresh1), plt.title('THRESH_BINARY')\nplt.show()\n\n# Somehow this is not working\n#ret,thresh2 = cv2.threshold(imgOCV7,127,255,cv2.THRESH_BINARY_INV)\n#plt.imshow(thresh2), plt.title('THRESH_BINARY_INV')\n#plt.show()\n\nret,thresh3 = cv2.threshold(imgOCV7,127,255,cv2.THRESH_TRUNC)\nplt.imshow(thresh3), plt.title('THRESH_TRUNC')\nplt.show()\n\nret,thresh4 = cv2.threshold(imgOCV7,127,255,cv2.THRESH_TOZERO)\nplt.imshow(thresh4), plt.title('BINTHRESH_TOZEROARY')\nplt.show()\n\n# Somehow this is not working\n#ret,thresh5 = cv2.threshold(imgOCV7,127,255,cv2.THRESH_TOZERO_INV)\n#plt.imshow(thresh5), plt.title('THRESH_TOZERO_INV')\n#plt.show()","9d9a9226":"# Blurring - smoothes the image out\n\nimgOCV8 = imgOCV1\n\nblur = cv2.blur(imgOCV8,(12, 12))\ngblur = cv2.GaussianBlur(imgOCV8,(5,5),0)\n\nplt.imshow(imgOCV8), plt.title('Original Image')\nplt.show()\nplt.imshow(blur), plt.title('Blurred Image')\nplt.show()\nplt.imshow(gblur),plt.title('Gaussian Blurred Image')\nplt.show()","aec93354":"## Colour images\n- In colour image each pixel is represented by 3 values - RGB\n- [0,0,0]: Black\n- [255, 255,255]: White\n- [255,0,0]: Red\n- [0,255,0]: Green\n- [0,0,255]: Blue\n- [100,0,0]: Dark Red","215cb2ba":"## Playing with the brightness","f94dc595":"### Add noise","dc24bd79":"## Image Processing using OpenCV\n- All the major framework processes image in RGB format\n- But, OpenCV processes image in BGR format. This means it reads Red value as Blue and Blue value as Red.","ec884dfa":"## Crop Image","f7481f00":"### Detecting boundries of the objects in image","62a03ef9":"### Expanding image","f83ea466":"### Shrinking the image","142605cf":"### Decrease the brightness","712772ee":"### Increase Brightness","24762d95":"# Image Processing Part - 1\n- Image consists of pixels and pixels are unbers which represents a colour\n- Almost all the equipments are designed to process pixels in size of 8 bits. The pixel may vary from 00000000 to 11111111 i.e. 0 to 255\n- In general, images are of following type:\n  - Grayscale \n  - Colour","80962639":"### Displaying image using OpenCV","b2373fda":"# Image Processing","6301d09a":"### Custom image rotation","76aaec82":"### Image Thresholding","2504ef5e":"## Gray scale images\n-  1 pixel is represented by 1 number i.e. it ranges from 0 to 255","c1d7e1a8":"### Image Bluring"}}