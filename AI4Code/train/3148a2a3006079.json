{"cell_type":{"94b33b09":"code","91877079":"code","5732d7e9":"code","4622c5ca":"code","ae6cea84":"code","846428e3":"code","360eb942":"code","41ad3aba":"code","f0d71930":"code","1a525207":"code","021fad23":"code","97515632":"code","e6fdb263":"code","524ecb06":"code","8cf6296f":"code","0428fb53":"code","3ee11af4":"code","8bc8e45e":"code","3917d24f":"code","4f8ed023":"code","0f61f00c":"code","71b5d6d0":"code","9c1680e9":"code","1a158b1f":"code","da3286f7":"code","828263f7":"code","03201129":"code","806a6deb":"markdown"},"source":{"94b33b09":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","91877079":"df= pd.read_csv(\"\/kaggle\/input\/bank-loan-dataset\/Bank_loan.csv\")\ndf.describe()","5732d7e9":"df.count()","4622c5ca":"df.head()","ae6cea84":"df.isna().sum()","846428e3":"df['Gender'].fillna(df['Gender'].mode()[0], inplace= True)\ndf['Married'].fillna(df['Married'].mode()[0], inplace= True)\ndf['Dependents'].fillna(df['Dependents'].mode()[0], inplace= True)\ndf['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace= True)\ndf['LoanAmount'].fillna(df['LoanAmount'].mean(), inplace= True)\ndf['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace= True)\ndf['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace= True)\ndf.isna().sum()","360eb942":"from sklearn.preprocessing import LabelEncoder","41ad3aba":"le= LabelEncoder()\nle_data= ['Loan_ID','Gender','Married','Education','Dependents','Self_Employed','Property_Area','Loan_Status']\nfor label in le_data:\n    df[label]= le.fit_transform(df[label])\ndf.dtypes","f0d71930":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier","1a525207":"df.describe()","021fad23":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","97515632":"X= df.drop('Loan_Status', axis=1)\ny= df['Loan_Status']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","e6fdb263":"ss= StandardScaler()\nX_train= ss.fit_transform(X_train)\nX_test= ss.fit_transform(X_test)","524ecb06":"X_train","8cf6296f":"my_model= DecisionTreeClassifier()\nresults= my_model.fit(X_train,y_train)","0428fb53":"predictions= results.predict(X_test)\npredictions","3ee11af4":"from sklearn.metrics import accuracy_score \nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn","8bc8e45e":"model_auc= accuracy_score (y_test, predictions)\nmodel_auc","3917d24f":"conf_matrix= confusion_matrix(y_test, predictions)\nconf_matrix\nheat_map= sn.heatmap(conf_matrix, cmap='coolwarm', annot=True)","4f8ed023":"print(\"The Classification Report:\",\"\\n\", metrics.classification_report(y_test, predictions))","0f61f00c":"deploy= list(results.predict([[1,0,0,1,0,1,3829,0.0,126.413462,173.0,1.0,2]]))\ndeploy","71b5d6d0":"from sklearn.ensemble import BaggingClassifier","9c1680e9":"my_model_2= BaggingClassifier(DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, n_jobs=-1)\nresult_2= my_model_2.fit(X_train,y_train)","1a158b1f":"predictions_2= result_2.predict(X_train)\npredictions_2","da3286f7":"model_auc_2= accuracy_score (y_train, predictions_2)\nmodel_auc_2","828263f7":"conf_matrix= confusion_matrix(y_train, predictions_2)\nconf_matrix\nheat_map= sn.heatmap(conf_matrix, cmap='coolwarm', annot=True)","03201129":"print(\"The Classification Report:\",\"\\n\", metrics.classification_report(y_train, predictions_2))","806a6deb":"#  **Using BaggingClassifier to imporive the model performance**"}}