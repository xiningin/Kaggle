{"cell_type":{"d9bd0800":"code","3c89a036":"code","55275eb8":"code","805b0d0d":"code","cea13c27":"code","589f9463":"code","451ec839":"code","9c8f7e5c":"code","ed4674bd":"code","6658e102":"code","7e8e5e94":"code","11efeb82":"code","aede562a":"code","9f4dc84e":"code","ab1c1234":"code","93604df3":"code","4b845f71":"code","1642a92a":"code","60cb4d7d":"code","dc432f38":"code","4fb64983":"code","8d167b00":"code","01de92b6":"markdown"},"source":{"d9bd0800":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c89a036":"# import Data Visualization library \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","55275eb8":"df = pd.read_csv(r'..\/input\/us-ecommerce-record-2020\/US  E-commerce records 2020.csv',encoding='latin1')","805b0d0d":"# Take a look at this dataset \ndf.head()","cea13c27":"df.info()","589f9463":"df.describe()","451ec839":"# checking the missing values \ndf.isnull().sum()","9c8f7e5c":"# checking the dulicates\ndf.duplicated().sum()","ed4674bd":"plt.figure(figsize = (20,10),dpi = 100)\n# Check the relationship between the sale and the state\nax = sns.barplot(x = 'Sales', y = 'State', data= df, palette=\"Blues_d\")\nplt.xlabel('Sales',fontsize = '40')\nplt.ylabel('State',fontsize = '40')\nplt.tight_layout()","6658e102":"plt.figure(figsize = (20,10),dpi = 100)\n# Check the relationship between the sale and the region \nax = sns.barplot(x = 'Sales', y = 'Region', data= df)\nplt.xlabel('Sales',fontsize = '40')\nplt.ylabel('State',fontsize = '40')\nplt.tight_layout()","7e8e5e94":"# Check the sales andd sub_category\nplt.figure(figsize = (20,10), dpi = 100)\nsns.barplot(x=df['Sub-Category'], y=df['Sales'],palette = \"Blues\")\nplt.xlabel('Sub-Category')\nplt.ylabel('Sales')","11efeb82":"# Check the sales andd category\nplt.figure(figsize = (20,10), dpi = 100)\nsns.barplot(x=df['Category'], y=df['Sales'],palette = \"Blues\")\nplt.xlabel('Category')\nplt.ylabel('Sales')","aede562a":"# Pair plot for a region wise see whether a bit overwhelming ?\nplt.figure(figsize=(20,10))\nsns.pairplot(df,hue=\"Region\")","9f4dc84e":"# Checking which region could make high profit?\nplt.figure(figsize = (20,10), dpi = 100)\nsns.barplot(x=df['Region'], y=df['Profit'],palette = \"Blues\")\nplt.xlabel('Region')\nplt.ylabel('Profit')","ab1c1234":"# Checking whether the discount could make high profits\nprofit_discount = df.groupby('Discount')['Profit'].sum()\nplt.figure(figsize=(20,10))\nsns.barplot(x=profit_discount.index,y=profit_discount.values)\nplt.xlabel('Discount')\nplt.ylabel('Profit')","93604df3":"# Checking the replationship between state and loses\nlosses = df.loc[df['Profit']<=0]\nlosses.head()","4b845f71":"losses['Profit'] = losses['Profit'].abs()","1642a92a":"state_losses= losses.groupby('State')['Profit'].sum()\n","60cb4d7d":"plt.figure(figsize=(50,20))\nstate_losses.plot.pie(autopct=\"%.1f%%\")\n","dc432f38":"# Checking the replationship between sub_category and loses\nsub_category_losses = losses.groupby('Sub-Category')['Profit'].sum()\nplt.figure(figsize=(50,20))\nsub_category_losses.plot.pie(autopct=\"%.1f%%\")","4fb64983":"# Checking the replationship between category and loses\nsub_category_losses = losses.groupby('Category')['Profit'].sum()\nplt.figure(figsize=(50,20))\nsub_category_losses.plot.pie(autopct=\"%.1f%%\")","8d167b00":"# Checking the replationship between segments and loses\nsub_category_losses = losses.groupby('Segment')['Profit'].sum()\nplt.figure(figsize=(50,20))\nsub_category_losses.plot.pie(autopct=\"%.1f%%\")","01de92b6":"**EDA -- Data Visualization **\n"}}