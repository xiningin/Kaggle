{"cell_type":{"b377b919":"code","17bde65b":"code","2b436a17":"code","7fd0147f":"code","8aa6c9c7":"code","5c72d863":"code","11879895":"code","5f2cec86":"code","af37f89c":"code","b326cca4":"code","307c50c8":"code","2dd0a13a":"code","e79d97a2":"code","2931949f":"code","6bb44500":"code","ec056051":"code","8b39ca82":"code","d27448b7":"code","3de88982":"code","fcfab21d":"markdown","ef787a43":"markdown","2cd2bb42":"markdown"},"source":{"b377b919":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport cv2\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom pprint import pprint\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport glob\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","17bde65b":"import pydicom\nfrom pydicom.filereader import read_dicomdir\nfrom pydicom.data import get_testdata_files\nimport os\nfrom os.path import dirname, join","2b436a17":"import zipfile","7fd0147f":"Dataset = \"Neurohacking_data-0.0\"\n\n# Unzip the files and place them in the working directory\nwith zipfile.ZipFile(\"..\/input\/neurohackinginrimages\/\"+Dataset+\".zip\",\"r\") as z:\n    z.extractall(\".\")","8aa6c9c7":"from subprocess import check_output\nprint(check_output([\"ls\", \"Neurohacking_data-0.0\"]).decode(\"utf8\"))","5c72d863":"print(check_output([\"more\", \"Neurohacking_data-0.0\/README.csv\"]).decode(\"utf8\"))","11879895":"print(check_output([\"ls\", '-l', \"Neurohacking_data-0.0\/BRAINIX\/\"]).decode(\"utf8\"))","5f2cec86":"print(check_output([\"ls\", '-l', \"Neurohacking_data-0.0\/BRAINIX\/DICOM\"]).decode(\"utf8\"))","af37f89c":"print(check_output([\"ls\", '-l', \"Neurohacking_data-0.0\/BRAINIX\/NIfTI\"]).decode(\"utf8\"))","b326cca4":"print(check_output([\"ls\", \"Neurohacking_data-0.0\/BRAINIX\/DICOM\/T1\"]).decode(\"utf8\"))","307c50c8":"print(check_output([\"ls\", \"Neurohacking_data-0.0\/BRAINIX\/DICOM\/T2\"]).decode(\"utf8\"))","2dd0a13a":"print(check_output([\"ls\", \"Neurohacking_data-0.0\/BRAINIX\/DICOM\/FLAIR\"]).decode(\"utf8\"))","e79d97a2":"print(check_output([\"ls\", '-l', \"Neurohacking_data-0.0\/kirby21\"]).decode(\"utf8\"))","2931949f":"print(check_output([\"ls\", '-l', \"Neurohacking_data-0.0\/kirby21\/visit_2\/113\"]).decode(\"utf8\"))","6bb44500":"print(check_output([\"ls\", 'Neurohacking_data-0.0\/BRAINIX\/DICOM\/T1']))","ec056051":"list_dir = os.listdir('Neurohacking_data-0.0\/BRAINIX\/DICOM\/T1\/')\nprint('len ', list_dir)","8b39ca82":"def show_dcm_info(dataset):\n    #print(\"Filename.........:\", file_path)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    #print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    #print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n    #print(\"View Position.......:\", dataset.ViewPosition)\n    #print(\"Rescale intercept .......:\", dataset.RescaleIntercept)\n    #print(\"Rescale slope .......:\", dataset.RescaleSlope)\n    \n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing mm ....:\", dataset.PixelSpacing)\n        if 'SliceThickness' in dataset:\n            print(\"Slice thickness mm....:\", dataset.SliceThickness)","d27448b7":"def plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\ndef plot_threshold_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset)   #, cmap=plt.cm.brain)\n    plt.show()\n    \ndef plot_T1T2FLAIR_array(datasetT1, datasetT2, datasetFLAIR, figsize=(35,25)):\n    plt.figure(figsize=figsize)\n\n    #subplot(r,c) provide the no. of rows and columns\n    #f, axarr = plt.subplots(1,3) \n    fig, axs = plt.subplots(1, 3, figsize=(40, 40), constrained_layout=True)\n\n    # use the created array to output your multiple images. \n    axs[0].imshow(datasetT1)\n    axs[0].set_title('T1 weighted sequence', fontsize=42)\n    axs[1].imshow(datasetT2)\n    axs[1].set_title('T2 weighted sequence', fontsize=42)\n    axs[2].imshow(datasetFLAIR)\n    axs[2].set_title('FLAIR sequence', fontsize=42)\n\n    #plt.imshow(dataset)   #, cmap=plt.cm.brain)\n    plt.show()","3de88982":"list_dir_T1 = glob.glob(\"Neurohacking_data-0.0\/BRAINIX\/DICOM\/T1\/*.dcm\")\nlist_dir_T2 = glob.glob(\"Neurohacking_data-0.0\/BRAINIX\/DICOM\/T2\/*.dcm\")\nlist_dir_FLAIR = glob.glob(\"Neurohacking_data-0.0\/BRAINIX\/DICOM\/FLAIR\/*.dcm\")\nsorted_listT1    = list_dir_T1.sort()\nsorted_listT2    = list_dir_T2.sort()\nsorted_listFLAIR = list_dir_FLAIR.sort()\nfor file_nameT1, file_nameT2, file_nameFLAIR, in zip(list_dir_T1, list_dir_T2, list_dir_FLAIR):\n    print('Reading T1 T2 FLAIR:  ', file_nameT1, file_nameT2, file_nameFLAIR)\n    datasetT1 = pydicom.read_file(file_nameT1)\n    datasetT2 = pydicom.read_file(file_nameT2)\n    datasetFLAIR = pydicom.read_file(file_nameFLAIR)\n    \n    show_dcm_info(datasetT1)\n    plot_T1T2FLAIR_array(datasetT1.pixel_array, datasetT2.pixel_array, datasetFLAIR.pixel_array)","fcfab21d":"## Display T1 files","ef787a43":"## Physics of Magnetic Resonance Imaging\nhttps:\/\/casemed.case.edu\/clerkships\/neurology\/Web%20Neurorad\/MRI%20Basics.htm\n\nMRI is based on the magnetization properties of atomic nuclei. A powerful, uniform, external magnetic field is employed to align the protons that are normally randomly oriented within the water nuclei of the tissue being examined. This alignment (or magnetization) is next perturbed or disrupted by introduction of an external Radio Frequency (RF) energy. The nuclei return to their resting alignment through various relaxation processes and in so doing emit RF energy. After a certain period following the initial RF, the emitted signals are measured. Fourier transformation is used to convert the frequency information contained in the signal from each location in the imaged plane to corresponding intensity levels, which are then displayed as shades of gray in a matrix arrangement of pixels. By varying the sequence of RF pulses applied & collected, different types of images are created. Repetition Time (TR) is the amount of time between successive pulse sequences applied to the same slice. Time to Echo (TE) is the time between the delivery of the RF pulse and the receipt of the echo signal.\n\nTissue can be characterized by two different relaxation times \u2013 T1 and T2. \n## T1 (longitudinal relaxation time) \nis the time constant which determines the rate at which excited protons return to equilibrium. It is a measure of the time taken for spinning protons to realign with the external magnetic field. \n## T2 (transverse relaxation time) \nis the time constant which determines the rate at which excited protons reach equilibrium or go out of phase with each other. It is a measure of the time taken for spinning protons to lose phase coherence among the nuclei spinning perpendicular to the main field.\n\nEven more information can be found at:\nhttps:\/\/www.startradiology.com\/the-basics\/mri-technique\/index.html\n\nThe above excerpts barely mention a third component in the MRI machinery; a second magnetic field parallel to the strong solenoid field produced by superconducting coils (~2-4 Tesla)\nFor reference, 1Tesla = 10Kgauss, a very strong refrigerator permanent magnet can produce ~ 100 gauss. \nThis additional field has a linear z dependance that allows the extraction of the z coordinate during a scan.\n\nProtons have spin and can be visualized as small spining tops. In the presence of a magnetic field,  the protons (or other nuclei) will precess with frequencies proportional to the value of the external magnetic field at the so called Larmor frequency.  The z dependent field produces an equally z dependent  pressecion frequency. ","2cd2bb42":"## FLAIR\nhttps:\/\/en.wikipedia.org\/wiki\/Fluid-attenuated_inversion_recovery\n\nis an MRI sequence with an inversion recovery set to null fluids. For example, it can be used in brain imaging to suppress cerebrospinal fluid (CSF) effects on the image, so as to bring out the periventricular hyperintense lesions, such as multiple sclerosis (MS) plaques.[1] It was invented by Dr. Graeme Bydder. FLAIR can be used with both three-dimensional imaging (3D FLAIR) or two dimensional imaging (2D FLAIR). "}}