{"cell_type":{"fadc9947":"code","d019b431":"code","6c7bdf25":"code","436e74cc":"code","459de085":"code","ef2da317":"code","299f362a":"code","a708337d":"code","b2abf3a5":"code","84741a7e":"code","2653a28c":"code","5e541fd3":"code","7b692b99":"code","406de39f":"code","b2eb637d":"code","8db21816":"code","c8bb554b":"code","bdf53cc6":"code","d5fd9a9f":"code","85de308a":"code","c60bc445":"code","6186c2d8":"code","bfd9790b":"code","ced9ebe3":"code","a871db7d":"code","4fbb0cbd":"code","05e8d0ee":"code","a672a468":"markdown","d778289e":"markdown","7ded35a5":"markdown","e163d63f":"markdown"},"source":{"fadc9947":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d019b431":"# Importing necessary paackages\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport string\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom keras import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.models import load_model\n\n\nseed = 4353","6c7bdf25":"true = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nfake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')","436e74cc":"true.sample(5)","459de085":"fake.head()","ef2da317":"# Introducing new column in both dataframes\n\ntrue['impression']=1\nfake['impression']=0","299f362a":"# Concatenating them using pandas concatenate to form a single dataframe\n\ndata_raw = pd.concat([true, fake], axis=0)\ndata_raw.sample(10)","a708337d":"# Combining title and text to obtain a single string\n# dropping title and\n\ndata_raw['fulltext'] = data_raw.title + ' ' + data_raw.text\ndata_raw.drop(['title','text'], axis=1, inplace=True)","b2abf3a5":"# Extracting a new dataframe using features fulltext and impression\ndata = data_raw[['fulltext', 'impression']]\ndata = data.reset_index()\ndata.drop(['index'], axis=1, inplace=True)","84741a7e":"# Check for missing values\n\ndata.isnull().sum()","2653a28c":"print('The dataset contans {} rows and {} columns'.format(data.shape[0], data.shape[1]))","5e541fd3":"# Word extraction from true and fake texts\n\ntrue_text = data[data.impression==1]['fulltext']\nfake_text = data[data.impression==0]['fulltext']\nfake_text = fake_text.reset_index().drop(['index'], axis=1)","7b692b99":"# Function to extract major words from true and fake news\n\ndef wordcloud_words(X_data_full):\n    \n    # function for removing punctuations\n    def remove_punct(X_data_func):\n        string1 = X_data_func.lower()\n        translation_table = dict.fromkeys(map(ord, string.punctuation),' ')\n        string2 = string1.translate(translation_table)\n        return string2\n    \n    X_data_full_clear_punct = []\n    for i in range(len(X_data_full)):\n        test_data = remove_punct(X_data_full[i])\n        X_data_full_clear_punct.append(test_data)\n        \n    # function to remove stopwords\n    def remove_stopwords(X_data_func):\n        pattern = re.compile(r'\\b(' + r'|'.join(stopwords.words('english')) + r')\\b\\s*')\n        string2 = pattern.sub(' ', X_data_func)\n        return string2\n    \n    X_data_full_clear_stopwords = []\n    for i in range(len(X_data_full)):\n        test_data = remove_stopwords(X_data_full[i])\n        X_data_full_clear_stopwords.append(test_data)\n        \n    # function for tokenizing\n    def tokenize_words(X_data_func):\n        words = nltk.word_tokenize(X_data_func)\n        return words\n    \n    X_data_full_tokenized_words = []\n    for i in range(len(X_data_full)):\n        test_data = tokenize_words(X_data_full[i])\n        X_data_full_tokenized_words.append(test_data)\n        \n    # function for lemmatizing\n    lemmatizer = WordNetLemmatizer()\n    def lemmatize_words(X_data_func):\n        words = lemmatizer.lemmatize(X_data_func)\n        return words\n    \n    X_data_full_lemmatized_words = []\n    for i in range(len(X_data_full)):\n        test_data = lemmatize_words(X_data_full[i])\n        X_data_full_lemmatized_words.append(test_data)\n        \n    return X_data_full_lemmatized_words","406de39f":"true_words = wordcloud_words(true_text)\nfake_words = wordcloud_words(fake_text.fulltext)","b2eb637d":"def plot_wordcloud(text):\n    wordcloud = WordCloud(background_color = 'black',\n                         max_words = 3000,\n                         width=1600,\n                         height=800).generate(text)\n    plt.clf()\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()","8db21816":"plt.figure(figsize=(20,18))\nplot_wordcloud(' '.join(true_words))","c8bb554b":"plt.figure(figsize=(20,18))\nplot_wordcloud(' '.join(fake_words))","bdf53cc6":"# Data preparation\n\nX_data = data['fulltext']\ny_data = data.impression\nX_data = X_data.astype(str)","d5fd9a9f":"# Function to retrieve processed words\n\ndef final(X_data_full):\n    \n    # function for removing punctuations\n    def remove_punct(X_data_func):\n        string1 = X_data_func.lower()\n        translation_table = dict.fromkeys(map(ord, string.punctuation),' ')\n        string2 = string1.translate(translation_table)\n        return string2\n    \n    X_data_full_clear_punct = []\n    for i in range(len(X_data_full)):\n        test_data = remove_punct(X_data_full[i])\n        X_data_full_clear_punct.append(test_data)\n        \n    # function to remove stopwords\n    def remove_stopwords(X_data_func):\n        pattern = re.compile(r'\\b(' + r'|'.join(stopwords.words('english')) + r')\\b\\s*')\n        string2 = pattern.sub(' ', X_data_func)\n        return string2\n    \n    X_data_full_clear_stopwords = []\n    for i in range(len(X_data_full)):\n        test_data = remove_stopwords(X_data_full[i])\n        X_data_full_clear_stopwords.append(test_data)\n        \n    # function for tokenizing\n    def tokenize_words(X_data_func):\n        words = nltk.word_tokenize(X_data_func)\n        return words\n    \n    X_data_full_tokenized_words = []\n    for i in range(len(X_data_full)):\n        test_data = tokenize_words(X_data_full[i])\n        X_data_full_tokenized_words.append(test_data)\n        \n    # function for lemmatizing\n    lemmatizer = WordNetLemmatizer()\n    def lemmatize_words(X_data_func):\n        words = lemmatizer.lemmatize(X_data_func)\n        return words\n    \n    X_data_full_lemmatized_words = []\n    for i in range(len(X_data_full)):\n        test_data = lemmatize_words(X_data_full[i])\n        X_data_full_lemmatized_words.append(test_data)\n        \n    # creating the bag of words model\n    cv = CountVectorizer(max_features=1000)\n    X_data_full_vector = cv.fit_transform(X_data_full_lemmatized_words).toarray()\n    \n    \n    tfidf = TfidfTransformer()\n    X_data_full_tfidf = tfidf.fit_transform(X_data_full_vector).toarray()\n    \n    return X_data_full_tfidf","85de308a":"# Setting the function with parameters\n\ndata_X = final(X_data)","c60bc445":"# Preparing training and testing data using train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(data_X, y_data, test_size=0.25, random_state= seed)","6186c2d8":"# Instatiation, fitting and prediction\n\nMNB = MultinomialNB()\nMNB.fit(X_train, y_train)\npredictions = MNB.predict(X_test)","bfd9790b":"# Model evaluation\n\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\n\nMNB_f1 = round(f1_score(y_test, predictions, average='weighted'), 3)\nMNB_accuracy = round((accuracy_score(y_test, predictions)*100),2)\n\nprint(\"Accuracy : \" , MNB_accuracy , \" %\")\nprint(\"f1_score : \" , MNB_f1)","ced9ebe3":"# Instatiation, fitting and prediction\n\nrfc=RandomForestClassifier(n_estimators= 10, random_state= seed)\nrfc.fit(X_train, y_train)\npredictions = rfc.predict(X_test)","a871db7d":"# Model evaluation\n\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\n\nrfc_f1 = round(f1_score(y_test, predictions, average= 'weighted'), 3)\nrfc_accuracy = round((accuracy_score(y_test, predictions) * 100), 2)\n\nprint(\"Accuracy : \" , rfc_accuracy , \" %\")\nprint(\"f1_score : \" , rfc_f1)","4fbb0cbd":"# Comapring the accuracy for various models\n\nmodel = ['MNB', 'Random Forest']\nacc = [MNB_accuracy, rfc_accuracy]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Test Accuracy %\")\nplt.xlabel(\"Machine Learning Model\")\nsns.barplot(x= model, y= acc)\nplt.show()","05e8d0ee":"# Comparing the f1-score for various models\n\nmodel = ['MNB', 'Random Forest']\nf1_score = [MNB_f1, rfc_f1]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10,8))\nplt.yticks(np.linspace(0,1,21))\nplt.ylabel(\"f1-score\")\nplt.xlabel(\"Machine Learning Model\")\nsns.barplot(x= model,  y= f1_score)\nplt.show()","a672a468":"### Multinomial Niave Bayes","d778289e":"## LSTM model is going to be added soon\n\n\n## Upvote if you like my notebook\n\n\n## Thanks for your time!","7ded35a5":"## ML Models","e163d63f":"### Random Forest"}}