{"cell_type":{"052f6748":"code","0018e2bc":"code","5b828404":"code","a4eb4415":"code","f0fddc6b":"code","b8adc434":"code","e607d3f4":"code","6ceef8c3":"code","e89a82a2":"code","d1fe8737":"code","cb6b3b25":"code","7a3ca19d":"code","073a90e2":"code","46b7ebb0":"code","05eae423":"code","979d2a2e":"code","7ac6dd85":"code","501c734c":"code","7954472d":"code","1b5afca3":"code","71c9ce08":"code","9c97d174":"code","3282b3d7":"code","ddbc7db3":"code","acb91e45":"code","3c414c51":"code","619ba672":"code","d25c5512":"code","09bc7c20":"code","0539364b":"code","b57b699e":"code","233c6815":"code","ca22f334":"code","8041068c":"code","38ef5827":"code","44a834a8":"code","0cbae989":"code","eb8448de":"code","3b382b94":"code","0960aae5":"markdown","a2868872":"markdown","d3962fa2":"markdown","909b7559":"markdown","d1fb410f":"markdown","72261935":"markdown","6d8b1157":"markdown","386f2e61":"markdown","686a451a":"markdown"},"source":{"052f6748":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import set_matplotlib_formats\nimport warnings\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization\nfrom sklearn.metrics import roc_curve, classification_report\nfrom sklearn.model_selection import RepeatedKFold, train_test_split\n\n# %matplotlib inline","0018e2bc":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","5b828404":"train.head()","a4eb4415":"train['FamilySize'] = train ['SibSp'] + train['Parch'] + 1\n\ntrain['IsAlone'] = 1 #initialize to yes\/1 is alone\ntrain['IsAlone'].loc[train['FamilySize'] > 1] = 0 # now update to no\/0 if family size is greater than 1","f0fddc6b":"test['FamilySize'] = test ['SibSp'] + test['Parch'] + 1\n\ntest['IsAlone'] = 1 #initialize to yes\/1 is alone\ntest['IsAlone'].loc[test['FamilySize'] > 1] = 0 # now update to no\/0 if family size is greater than 1","b8adc434":"train.head()","e607d3f4":"test.head()","6ceef8c3":"train.info()","e89a82a2":"train.describe()","d1fe8737":"sns.pairplot(train)","cb6b3b25":"sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"bar\", data=train)","7a3ca19d":"#graph distribution of quantitative data\nplt.figure(figsize=[16,12])\n\nplt.subplot(3,3,1)\nplt.boxplot(x=train['Fare'], showmeans = True, meanline = True)\nplt.title('Fare Boxplot')\nplt.ylabel('Fare ($)')\n\nplt.subplot(3,3,2)\nplt.boxplot(train['Age'], showmeans = True, meanline = True)\nplt.title('Age Boxplot')\nplt.ylabel('Age (Years)')\n\nplt.subplot(3,3,3)\nplt.boxplot(train['FamilySize'], showmeans = True, meanline = True)\nplt.title('Family Size Boxplot')\nplt.ylabel('Family Size (#)')\n\nplt.subplot(3,3,4)\nplt.hist(x = [train[train['Survived']==1]['Fare'], train[train['Survived']==0]['Fare']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Fare Histogram by Survival')\nplt.xlabel('Fare ($)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(3,3,5)\nplt.hist(x = [train[train['Survived']==1]['Age'], train[train['Survived']==0]['Age']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Age Histogram by Survival')\nplt.xlabel('Age (Years)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(3,3,6)\nplt.hist(x = [train[train['Survived']==1]['FamilySize'], train[train['Survived']==0]['FamilySize']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Family Size Histogram by Survival')\nplt.xlabel('Family Size (#)')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(3,3,7)\nplt.hist(x = [train[train['Survived']==1]['Sex'], train[train['Survived']==0]['Sex']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Sex Histogram by Survival')\nplt.xlabel('Sex')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(3,3,8)\nplt.hist(x = [train[train['Survived']==1]['Pclass'], train[train['Survived']==0]['Pclass']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Pclass Histogram by Survival')\nplt.xlabel('Pclass')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.subplot(3,3,9)\nplt.hist(x = [train[train['Survived']==1]['IsAlone'], train[train['Survived']==0]['IsAlone']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('IsAlone Histogram by Survival')\nplt.xlabel('IsAlone')\nplt.ylabel('# of Passengers')\nplt.legend()\n\nplt.tight_layout()","073a90e2":"#Checking the number of missing values in train data\ntrain.isna().sum()","46b7ebb0":"fig, ax = plt.subplots(figsize=[10,5])\nsns.heatmap(train.isna(), ax=ax, cbar=False, yticklabels=False)\nax.set_title(\"NaN in each label for train set\");\nfig2, ax2 = plt.subplots(figsize=[10,5])\nsns.heatmap(test.isna(), ax=ax2, cbar=False, yticklabels=False)\nax2.set_title(\"NaN in each label for test set\");","05eae423":"#checking the row where we have missing embarked data\ntrain[train['Embarked'].isnull()]","979d2a2e":"train[\"Embarked\"].value_counts()","7ac6dd85":"#Calculating and visualizing the mean fare across the 3 class of embarked\ntrain.pivot_table(index='Embarked', values='Fare', aggfunc=np.mean)","501c734c":"#Calculating and visualizing the mean Pclass across the 3 class of embarked\ntrain.pivot_table(index='Embarked', values='Pclass', aggfunc=np.mean)","7954472d":"train['Embarked'].fillna('C', inplace=True)","1b5afca3":"# Chceking if we have any row with fare value as 0. \ntrain[train[\"Fare\"] == 0]","71c9ce08":"# Defined a function to replace the 0 fare value with the average fare value with their respective pclas and embarked column.\ndef fill_fare_train(cols):\n    fare = cols[0]\n    pclass = cols[1]\n    embarked = cols[2]\n    if fare==0 :\n        return train[train['Pclass']==pclass][train['Embarked']==embarked]['Fare'].mean()\n    else:\n        return fare","9c97d174":"train['Fare'] = train[['Fare', 'Pclass','Embarked']].apply(fill_fare_train, axis=1)","3282b3d7":"train.pivot_table(index='Survived', values='Age', aggfunc=np.mean)","ddbc7db3":"new_data = train[train['Age'].notna()]\n\nplt.figure(figsize=(10,20))\nsns.catplot(x=\"Embarked\", y=\"Age\", hue = \"Pclass\",kind=\"swarm\", data=new_data)\nplt.show()","acb91e45":"# Defined a function to replace the nan age value with the average age value with their respective pclas and embarked column.\ndef fill_age_train(cols):\n    age = cols[0]\n    pclass = cols[1]\n    embarked = cols[2]\n    if pd.isna(age):\n        return train[train['Pclass']==pclass][train['Embarked']==embarked]['Age'].mean()\n    else:\n        return age\n    \ntrain['Age'] = train[['Age', 'Pclass','Embarked']].apply(fill_age_train, axis=1)","3c414c51":"def fill_age_test(cols):\n    age = cols[0]\n    pclass = cols[1]\n    embarked = cols[2]\n    if pd.isna(age):\n        return test[test['Pclass']==pclass][test['Embarked']==embarked]['Age'].mean()\n    else:\n        return age\n    \ntest['Age'] = test[['Age', 'Pclass','Embarked']].apply(fill_age_test, axis=1)","619ba672":"test[test[\"Fare\"].isna()]","d25c5512":"#Replacing the nan fare value with the average fare value of pclass 3 and embarked class S.\nmean = test[test['Pclass']==3][test['Embarked']=='S']['Fare'].mean()\ntest['Fare'].fillna(mean, inplace=True)","09bc7c20":"X=train.drop([\"Survived\",\"Name\",\"Ticket\",\"Cabin\",\"SibSp\", \"Parch\"],axis=1)\ny=train[\"Survived\"]\n\ntest=test.drop([\"Name\",\"Ticket\",\"Cabin\",\"SibSp\", \"Parch\"],axis=1)","0539364b":"X = pd.get_dummies(X,drop_first=True)\ntest = pd.get_dummies(test,drop_first=True)","b57b699e":"Xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=2)","233c6815":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel=RandomForestClassifier(criterion= \"entropy\", max_depth= 6, n_estimators= 100, oob_score= True, random_state= 0)\nmodel.fit(Xtrain,ytrain)","ca22f334":"model.score(Xtrain,ytrain)","8041068c":"model.score(xtest,ytest)","38ef5827":"from xgboost import XGBClassifier\nmodel = XGBClassifier(learning_rate= 0.01, max_depth= 4, n_estimators= 300, seed= 0)\nmodel.fit(Xtrain,ytrain)","44a834a8":"print(\"Train accuracy\",model.score(Xtrain,ytrain))\nprint(\"Train accuracy\",model.score(xtest,ytest))","0cbae989":"from sklearn import metrics\npred = model.predict(test)","eb8448de":"#Displaying 1st 10 predicted values\npred[:10]","3b382b94":"Submission = pd.DataFrame({ 'PassengerId': test[\"PassengerId\"],\n                            'Survived': pred })\nSubmission.to_csv(\"mySubmission.csv\", index=False)","0960aae5":"## Reading the Train data","a2868872":"## Splitting the train data\n\nHere we have also dropped the unneccesary feature","d3962fa2":"* We found that there many rows with fare value as 0, which is an incorrect data as the fare value cannot be 0.","909b7559":"## Importing Library","d1fb410f":"* We can see from above that there are 3 classes (C = Cherbourg, Q = Queenstown, S = Southampton) present in the Embarked column and since the fare and pclass for the missing rows matches with the average fare and pclass of the C(Cherbourg) class from embarked column. So we have replaced the missing emabarked data with C class.","72261935":"## Exploratory Data Analysis and Data Preparation","6d8b1157":"## Prediction","386f2e61":"k=train[\"Survived\"]\n\nfor j in k:\n    \n    if j==0:\n        train[\"Age\"]=train[\"Age\"].replace(np.nan,28.343690)\n\n    \n    if j==1:\n        train[\"Age\"]=train[\"Age\"].replace(np.nan,30.626179)","686a451a":"* From the above heatmap we can see that we have Age, cabin and embarked as missing value from the train data.\n* And Age, Fare and cabin column from test data have missing value."}}