{"cell_type":{"3aab772f":"code","8bcc236b":"code","5ffef317":"code","d1656802":"code","6c1d33a1":"code","c6d37df6":"code","6fc7cb6e":"code","71583739":"code","55eb6f12":"code","18560013":"code","24e689ae":"code","9f1fb2cb":"code","660a959a":"code","4f655caf":"code","e4699bb2":"code","c110dfd1":"code","edaa274f":"code","ebf4f808":"code","39065f52":"code","76d71b17":"code","9750312e":"code","66578030":"code","d25b663b":"code","8357b705":"code","bcb0cc2f":"code","281dc2c9":"code","fa25f144":"code","60934f9d":"code","ee88cc23":"code","9e1cb81a":"code","bf73f8b9":"code","d3894b84":"code","64003213":"code","3fd74325":"code","cba9b40b":"code","58e185f2":"code","cc307826":"code","711d2e85":"code","31575acd":"code","4e5cfad4":"code","abe27fcf":"code","c033a3ce":"code","19d3c166":"code","cae69a0b":"code","d1ba2b54":"code","16c38a5b":"code","7fd1204c":"code","25160341":"code","c332e748":"code","d17d9e1c":"code","0364c50e":"code","0e1f3a25":"code","3876bd8d":"code","48d928fd":"code","6723b19a":"code","b43e3a0a":"code","021df171":"code","bc50bfd9":"code","695016e6":"code","e30ec04e":"code","5324d017":"code","fee43863":"code","c9ca45fa":"code","82274dd6":"code","00c39329":"code","e6311210":"code","94c97e98":"code","8c968e7e":"markdown","a48317df":"markdown","41a597c5":"markdown","15dd3bfc":"markdown","c2c2e7f2":"markdown","eb651b46":"markdown","7f43fa1b":"markdown","62854757":"markdown","1425edd4":"markdown","429bbf90":"markdown","1f620676":"markdown","fbca2232":"markdown","03f56b18":"markdown","c44479a7":"markdown","77003962":"markdown","a8ba4b32":"markdown","22dbb0da":"markdown","91531910":"markdown","dd2bd0e7":"markdown","6280ceff":"markdown","fe68ed81":"markdown","fba58f92":"markdown","72991a64":"markdown","ec130e1a":"markdown","2f57d99d":"markdown","da2cdcb1":"markdown","28a3b626":"markdown","d494258b":"markdown","80138543":"markdown","11ef1f71":"markdown","a6befdc8":"markdown","cd653057":"markdown","34caf140":"markdown","e536f238":"markdown","b72733b8":"markdown","afb8b975":"markdown","d7d11458":"markdown"},"source":{"3aab772f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bcc236b":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, auc, roc_auc_score, roc_curve, mean_squared_error, precision_score, recall_score, f1_score, accuracy_score\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures, PolynomialFeatures\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier","5ffef317":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requiremnts.txt","d1656802":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\nRANDOM_SEED = 42","6c1d33a1":"path = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(path+'train.csv', encoding = 'ISO-8859-1', low_memory = False)\ntest = pd.read_csv(path+\"test.csv\", encoding = 'ISO-8859-1', low_memory = False)\nsubmission = pd.read_csv(path+'sample_submission.csv', encoding = 'ISO-8859-1', low_memory = False)","c6d37df6":"train.info()","6fc7cb6e":"train.head()","71583739":"# \u041f\u043e\u043b\u0435 app_date \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043a\u0430\u043a \u043e\u0431\u044a\u0435\u043a\u0442, \u0435\u0433\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446, \u0434\u0435\u043d\u044c \nfor obj in [train, test]:\n    dates = pd.to_datetime(obj.app_date, format=\"%d%b%Y\")\n    # obj['app_year'] = dates.dt.year\n    obj['app_month'] = dates.dt.month\n    # obj['app_day'] = dates.dt.day\n    # obj['app_weekday'] = dates.dt.dayofweek\n    # \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c  \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0440\u0430\u043d\u043d\u0435\u0439 \u0434\u0430\u0442\u044b \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 dataset\n    # obj['app_date_counts'] = obj['app_date'].apply(lambda x: (x - obj['app_date'].min()).days)\n    obj = obj.drop(['app_date'], axis=1, inplace=True)","55eb6f12":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c\u0438\n\nfor col in train.columns:\n    if train[col].nunique() <= 2:\n        print(col, \" \" * (20 - len(col)), train[col].nunique())","18560013":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438\n\nfor col in train.columns:\n    if 2 < train[col].nunique() <= 5:\n        print(col, \" \" * (20 - len(col)), train[col].nunique())","24e689ae":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u0414\u0435\u043b\u0438\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0441\u0435\u0442\u0435, \u043d\u043e \u044d\u0442\u043e \u0436\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ndef data_sort(data):\n    bin_cols = list()\n    cat_cols = list()\n    num_cols = list()\n\n    for col in data.drop(['client_id', 'default'], axis=1).columns:\n        if data[col].nunique() <= 2:\n            bin_cols.append(col)\n\n        elif 2 < data[col].nunique() <= 5:\n            cat_cols.append(col)\n\n        elif data[col].nunique() > 5 and data[col].dtype in [\"int64\", \"float64\"]:\n            num_cols.append(col)\n\n    return bin_cols, cat_cols, num_cols\n\nbin_cols, cat_cols, num_cols = data_sort(train)\nbin_cols, cat_cols, num_cols","9f1fb2cb":"corrmat = train[num_cols + [\"default\"]].corr()\n\nf, ax = plt.subplots(figsize=(20,9))\n\ncolormap =  sns.diverging_palette(20, 240, l=65, as_cmap=True)\nmask = np.zeros_like(corrmat)\nmask[np.triu_indices_from(mask)] = True\nsns.set(font_scale=1.3)\nsns.heatmap(corrmat, mask=mask, vmax=1, vmin=-1, annot=True, center=0, cmap=colormap)","660a959a":"for col in num_cols:\n    sns.histplot(train[col], cbar=True, bins = 50)\n    plt.show()\n    ","4f655caf":"train[num_cols].describe()","e4699bb2":"def boxplot(col):\n    fig, axes = plt.subplots(figsize = (14, 4))\n    sns.boxplot(x='default', y=col, data=train, ax=axes)\n    axes.set_title('Boxplot for ' + col)\n    plt.show()\nfor col in num_cols:\n    boxplot(col)","c110dfd1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nnum_weights = pd.Series(f_classif(train[num_cols], train['default'])[0], index=num_cols)\nnum_weights","edaa274f":"for col in num_cols:\n    median = train[col].median()\n    IQR = train[col].quantile(0.75) - train[col].quantile(0.25)\n    perc25 = train[col].quantile(0.25)\n    perc75 = train[col].quantile(0.75)\n    \n    print(\"Column: \", col)\n    print(\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", train[col].max())\n    print(\"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", train[col].min())\n    print('25%: {},'.format(perc25), '75%: {},'.format(perc75),\n          \"IQR: {}, \".format(IQR), \"Borderline: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    print()","ebf4f808":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (default)\ntrain['default'].value_counts()","39065f52":"cat_cols","76d71b17":"train['education'].value_counts()","9750312e":"train['home_address'].value_counts()","66578030":"train['work_address'].value_counts()","d25b663b":"train['sna'].value_counts()","8357b705":"train['first_time'].value_counts()","bcb0cc2f":"for col in cat_cols:\n    sns.barplot(x=col, y=\"default\", data=train[[col, 'default']])\n    plt.show()","281dc2c9":"def features_relation(data_frame, columns):\n    sns.set_style('darkgrid')\n    \n    fig = plt.figure(figsize=(35,10))\n       \n    for it, value in enumerate(columns):\n        plt.subplot(1,len(columns),it+1)\n        sns.barplot(x=value, y=\"default\", data=data_frame[[value, 'default']])\n        fig.tight_layout(pad=1.0)\n        sns.set_context('talk',font_scale=1.1)\n    \n    fig.subplots_adjust(top=0.8)\n\nfeatures_relation(train, bin_cols)","fa25f144":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train \u0438 test, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0434\u0438\u043d\u043d\u0443\u044e \u0431\u0430\u0437\u0443 data \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \n# \u0438 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445\n\ntrain['default_is'] = 1   \ntest['default_is'] = 0    \ntest['default'] = -1  \ndata = train.append(test, sort=False).reset_index(drop=True)","60934f9d":"# \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043e\u043f\u0438\u044e data\ndf = data.copy()","ee88cc23":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education\ndf.education.fillna(\"SCH\", inplace=True)\n\n# \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u043e\u0445\u043e\u0434 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442    \ndf['income']= np.log(df['income'])\n# df['age']= np.log(df['age'])  # \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435  \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c roc_auc_score","9e1cb81a":"# mean income by age\n# mean_income = df.groupby('age')['income'].mean().to_dict()\n# df['mean_income_age'] = df['age'].map(mean_income)\n\n# Max income by age\n# max_income = df.groupby('age')['income'].max().to_dict()\n# df['max_income_age'] = df['age'].map(max_income)\n\n# and normalize it\n# df[\"normalized_income\"] = abs((df.income - df.mean_income_age)\/df.max_income_age)\n# df[\"normalized_income\"] = abs((df.income - df['age'].map(mean_income))\/df['age'].map(max_income))\n\n# requests to BKI by age\n# mean_bki = df.groupby('age')['bki_request_cnt'].mean().to_dict()\n# df['mean_requests_age'] = df['age'].map(mean_bki)\n\n# mean decline_app by income\n# mean_bki_inc = df.groupby('income')['bki_request_cnt'].mean().to_dict()\n# df['mean_requests_income'] = df['income'].map(mean_bki_inc)\n\n# mean BKI requests by income\n# mean_decline = df.groupby('income')['decline_app_cnt'].mean().to_dict()\n# df['mean_decline_income'] = df['income'].map(mean_decline)\n\n\n# Mean income by region\n# mean_income_rat = df.groupby('region_rating')['income'].mean().to_dict()\n# df['mean_income_region'] = df['region_rating'].map(mean_income_rat)\n\n# df['income_age'] = df.income*df['age']\n# df['income_region'] = df['region_rating']*df['income']","bf73f8b9":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \n# \u042d\u0442\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0438\u0435 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b train \u0438 test\n\ndef data_sort(data):\n    bin_cols = list()\n    cat_cols = list()\n    num_cols = list()\n\n    for col in data.drop(['client_id', 'default','default_is'], axis=1).columns:\n        if data[col].nunique() <= 2:\n            bin_cols.append(col)\n\n        elif 2 < data[col].nunique() <= 5:\n            cat_cols.append(col)\n\n        elif data[col].nunique() > 5 and data[col].dtype in [\"int64\", \"float64\"]:\n            num_cols.append(col)\n\n    return bin_cols, cat_cols, num_cols","d3894b84":"bin_cols, cat_cols, num_cols = data_sort(df)","64003213":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u043a\u0430\u0442\u0435\u043e\u0433\u0440\u0438\u044e \"\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435\", \u0442.\u043a. \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u0447\u0435\u043c \u043a\u0430\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439\ncat_cols.remove('app_month')\nnum_cols.append('app_month')\n# bin_cols, cat_cols, num_cols","3fd74325":"cols = num_cols.copy()","cba9b40b":"# \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445\npf = PolynomialFeatures(degree=2)\nnew_data = pf.fit_transform(df[num_cols])[:, len(num_cols) + 1:]\npf_columns = pf.get_feature_names()[len(num_cols) + 1 :]\n\n# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\ndf = pd.concat([df, pd.DataFrame(new_data, columns=pf_columns)], axis=1)\n\n# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\nnum_cols.extend(pf_columns)\n\n# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 num_cols\ndf[num_cols] = StandardScaler().fit_transform(df[num_cols].values)\n\ndf.shape","58e185f2":" # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nmapp = {}\nlabel_encoder = LabelEncoder()\nfor col in bin_cols:\n    df[col] = label_encoder.fit_transform(df[col])\n    mapp[col] = dict(enumerate(label_encoder.classes_))\n\nmappc = {}\nenc = OneHotEncoder()\nfor col in cat_cols:\n    df[col] = label_encoder.fit_transform(df[col])\n    mappc[col] = dict(enumerate(label_encoder.classes_))\nmapp, mappc","cc307826":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndataset = df.copy()\ndf = pd.get_dummies(dataset, prefix=cat_cols, columns=cat_cols)","711d2e85":"df.shape","31575acd":"data_temp = dataset.loc[data['default_is'] == 1] ","4e5cfad4":"# \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0431\u0435\u0437 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0445)\nimp_num = pd.Series(f_classif(data_temp[cols], data_temp['default'])[0], index = cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","abe27fcf":"# \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_cat = pd.Series(mutual_info_classif(data_temp[bin_cols + cat_cols], \n             data_temp['default'], discrete_features =True), \n             index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c033a3ce":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\nRANDOM_SEED = 42","19d3c166":"# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\ntrain_df = df.query('default_is == 1').drop(['default_is','client_id'], axis=1)\ntest_df = df.query('default_is == 0').drop(['default_is','client_id'], axis=1)\n\n# \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438\u0437 train \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nX = train_df.drop(['default'], axis=1).values\nY = train_df['default'].values ","cae69a0b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u0438\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438 LogisticRegression \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c GridSearchCV\ndef predict_engine():\n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \n    # hyperparameters = dict(C=[0.01, 0.1, 1], penalty=['l1','l2'])\n    hyperparameters = dict(C=[0.01], penalty=['l2'])\n    model = LogisticRegression(max_iter=1000, solver='liblinear', random_state=RANDOM_SEED)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n    return GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438\ndef model_scoring(y_test, probs):\n    fpr, tpr, threshold = roc_curve(y_test, probs)\n    plt.figure()\n    plt.plot([0, 1], label='Baseline', linestyle='--')\n    plt.plot(fpr, tpr, label = 'Regression')\n    plt.title('ROC AUC SCORE = %0.5f' % roc_auc_score(y_test, probs))\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.legend(loc = 'lower right')\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0434\u0435\u043b\u0438\ndef print_rez():\n    print('accuracy_score:',accuracy_score(Y_test,Y_pred))\n    print('precision_score:',precision_score(Y_test,Y_pred))\n    print('recall_score:',recall_score(Y_test,Y_pred))\n    print('f1_score:',f1_score(Y_test,Y_pred))\n    print('MSE: {}'.format(np.round(mean_squared_error(Y_test, Y_pred), 4)))\n    \n# \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043f\u043e\u043c\u043e\u0449\u044c\u044e Confusion Matrix\ndef conf_matrix():\n    conf_mat = confusion_matrix(Y_test, Y_pred)\n    sns.set(font_scale=1.4) \n    sns.heatmap(conf_mat, annot=True, annot_kws={\"size\": 16}, fmt='g', cmap=colormap)","d1ba2b54":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=RANDOM_SEED)","16c38a5b":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nclf = predict_engine()\nclf.fit(X_train, Y_train)\nprobs = clf.predict_proba(X_test)[:, 1]\nY_pred = clf.predict(X_test)\n\nmodel_scoring(Y_test, probs)","7fd1204c":"# clf.best_params_","25160341":"print_rez()","c332e748":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043f\u043e\u043c\u043e\u0449\u044c\u044e Confusion Matrix\nconf_matrix()","d17d9e1c":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u0435\u0435 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c train \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\nclf.fit(X, Y)","0364c50e":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f Leaderboard\ntest_df = df.query('default == -1').drop(['client_id', 'default_is', 'default'], axis=1)\ntest['default'] = clf.predict_proba(test_df)[:, 1]\ntest[['client_id', 'default']].head()","0e1f3a25":"df_1 = df.query('default_is == 1').drop(['default_is','client_id'], axis=1)\n\nunder_train = pd.concat([df_1[df_1['default']==0].sample(\n    len(df_1[df_1['default']==1]), random_state=RANDOM_SEED), df_1[df_1['default']==1]])\n\nX_1 = under_train.drop(columns = ['default'])\nY_1 = under_train['default']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X_1, Y_1,  test_size=0.2, random_state = RANDOM_SEED)","3876bd8d":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlr = LogisticRegression(solver='liblinear', class_weight='balanced', random_state=RANDOM_SEED)\n\nhyperparameters = dict(C=[0.01, 0.1, 1], max_iter=[1000],penalty=['l1','l2'])\n# hyperparameters = dict(C=np.linspace(0, 100, 5),max_iter=[1500], penalty=['l1','l2'])\n\n# params = {'C': [0.01, 0.1, 1], 'max_iter': 1000}\n\nlr_bal = GridSearchCV(lr, hyperparameters, verbose=1, cv=5)\n\nlr_bal.fit(X_train, Y_train)\nprobs = lr_bal.predict_proba(X_test)\nY_pred = lr_bal.predict(X_test)\nprobs = probs[:,1]\n\nmodel_scoring(Y_test, probs)","48d928fd":"print(\"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438: \", lr_bal.best_params_)","6723b19a":"print_rez()","b43e3a0a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043f\u043e\u043c\u043e\u0449\u044c\u044e Confusion Matrix\nconf_matrix()","021df171":"# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f Leaderboard\ntest_df = df.query('default == -1').drop(['client_id', 'default_is', 'default'], axis=1)\ntest['default'] = lr_bal.predict_proba(test_df)[:, 1]\ntest[['client_id', 'default']].head()","bc50bfd9":"cat = CatBoostClassifier(n_estimators=1000,\n                         depth=2,\n                         logging_level='Silent')\n\ncat.fit(X_train, Y_train)\nprobs = cat.predict_proba(X_test)\nY_pred = cat.predict(X_test)\nprobs = probs[:,1]\n\nmodel_scoring(Y_test,probs)","695016e6":"print_rez()","e30ec04e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043f\u043e\u043c\u043e\u0449\u044c\u044e Confusion Matrix\nconf_matrix()","5324d017":"# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f Leaderboard\ntest_df = df.query('default == -1').drop(['client_id', 'default_is', 'default'], axis=1)\ntest['default'] = cat.predict_proba(test_df)[:, 1]\ntest[['client_id', 'default']].head()","fee43863":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, \n                                    test_size=0.2, random_state=RANDOM_SEED)","c9ca45fa":"cat_pull = CatBoostClassifier(n_estimators=1500,\n                         depth=2,\n                         logging_level='Silent')\n\ncat_pull.fit(X_train, Y_train)\nprobs = cat_pull.predict_proba(X_test)\nY_pred = cat_pull.predict(X_test)\nprobs = probs[:,1]\n\nmodel_scoring(Y_test,probs)","82274dd6":"print_rez()","00c39329":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043f\u043e\u043c\u043e\u0449\u044c\u044e Confusion Matrix\nconf_matrix()","e6311210":"# \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f Leaderboard\ntest_df = df.query('default_is == 0').drop(['client_id', 'default_is','default'], axis=1)\n\ntest['default'] = cat_pull.predict_proba(test_df)[:, 1]\ntest[['client_id', 'default']].head()","94c97e98":"submission = test[['client_id', 'default']]\nsubmission.to_csv(\"submission.csv\", index=False)","8c968e7e":"### \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train \n\n* \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0437 train_df['default']==0 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u043e\u0435\n* \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c \u0431\u044b train['default']==1, \u0438 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441 train_df['default']==1.","a48317df":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u0438\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438 LogisticRegression \u0438 GridSearchCV","41a597c5":"## \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b train,test \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","15dd3bfc":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","c2c2e7f2":"## \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c CatBoostClassifier \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train","eb651b46":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","7f43fa1b":"## \u0421\u0432\u044f\u0437\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c","62854757":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1425edd4":"\u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 train_df \u0441\u0435\u0442\u0435, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u0435\u0433\u043e  \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a. \u042d\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043c\u0435\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e roc_auc_score \u0438 \u0441onfusion matrix. \u0414\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 train_df \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c","429bbf90":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e","1f620676":"## \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","fbca2232":"# Feature Engineering","03f56b18":"\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c roc_auc_score","c44479a7":"# \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 ","77003962":"### \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a8ba4b32":"* \u041f\u0440\u0438\u0437\u043d\u0430\u043a app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438.\n* \u041f\u043e\u043b\u0435 app_date \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043a\u0430\u043a \u043e\u0431\u044a\u0435\u043a\u0442, \u0435\u0433\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.\n\n* \u041f\u043e\u043b\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u044f\u0446. \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u044b \u0432\u043e\u0432\u0441\u0435 \u043d\u0435 \u0438\u0433\u0440\u0430\u044e\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0430.\u0412 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u044b\u0442\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439.","22dbb0da":"## \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c CatBoostClassifier","91531910":"\u0421 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 LogisticRegression \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c CatBoostClassifier","dd2bd0e7":"\u0417\u0434\u0435\u0441\u044c \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u0442\u0430\u0440\u0448\u0438\u0435 \u043b\u044e\u0434\u0438 \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442. \u041b\u044e\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442, \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 score_bki. \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442. bki_request_cnt \u0432\u044b\u0448\u0435 \u0443 \u043b\u044e\u0434\u0435\u0439, \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0434\u0435\u0444\u043e\u043b\u0442. \u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043b\u044e\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434.","6280ceff":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","fe68ed81":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 'default' \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f score_bki","fba58f92":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","72991a64":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439","ec130e1a":"# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 ","2f57d99d":"\u0411\u043e\u043b\u044c\u0448\u0438\u0445  \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.","da2cdcb1":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c \u0438\u0437 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0434\u043e\u043b\u044e \u043b\u044e\u0434\u0435\u0439 \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u0451\u043c \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0443\u0436\u0447\u0438\u043d\u044b, \u043b\u044e\u0434\u0438 \u0431\u0435\u0437 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u0438 \u043b\u044e\u0434\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430.","28a3b626":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 ","d494258b":"## \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","80138543":"\u0421\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 default \u0434\u043b\u044f 0 \u0438 1 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 (\u043f\u043e\u0447\u0442\u0438 6,9 \u0440\u0430\u0437). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0431\u0430\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. ","11ef1f71":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0442\u0430\u043b\u0438 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0431\u044b\u043b\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f submission \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c CatBoostingClassifier\n","a6befdc8":"\u0412\u044b\u0432\u043e\u0434\u044b \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 default \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u0430\u0431\u0430\u044f, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 score_bki, \u0438 decline_app_cnt - 0.18 \u0438 0.11 c\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0442.\u043a. \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 (>0.8) \u0437\u0434\u0435\u0441\u044c \u043d\u0435\u0442.","cd653057":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a app_date ","34caf140":"* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0411\u041a\u0418 \u043e \u0441\u0432\u043e\u0435\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442","e536f238":"# \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train","b72733b8":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u043e \u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u0418\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","afb8b975":"## \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u044f\u0437\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439","d7d11458":"\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f score_bki   \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043d\u0435\u0435 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 age, income,  \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b."}}