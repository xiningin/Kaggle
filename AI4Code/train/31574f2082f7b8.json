{"cell_type":{"0ec5660c":"code","61ba16cb":"code","7d2e1a60":"code","826ec7be":"code","f3eb6417":"code","7a3e31b3":"code","be459e76":"code","deb78992":"code","5b542307":"code","6b43b00e":"code","dea35440":"code","7f325048":"code","89c3f550":"code","78c4af47":"code","6e5785af":"code","922f7593":"code","281311fd":"code","c24c5e2a":"code","015f6d02":"code","b11a77a9":"code","62586e9c":"code","f5b1431c":"code","9a89e381":"code","a60a081e":"code","84777472":"code","358d2339":"code","a5cc9826":"code","a2d058e8":"code","36454edf":"code","c4c517f1":"code","afbf2999":"code","2e7395c6":"code","e68f539a":"code","443efc27":"code","972ea9d5":"code","5cbde445":"code","6f543b62":"code","cfab218f":"code","561cfa8d":"code","2ee2917a":"code","9a4d68e0":"code","ae6d7793":"code","59bbde0d":"code","a848b006":"code","9a7afe25":"code","fbb0f729":"code","4da247fa":"code","1b44510f":"code","1ec9f26c":"code","fc6c64fb":"code","24177eba":"code","cd78de95":"code","9cf0a522":"code","f32b4cb8":"code","8f4a41d9":"code","e887d25b":"code","d9c9a4ab":"code","41549168":"code","4ce9bc6b":"code","3dfb31e0":"code","f0d5689e":"code","57650570":"markdown","561e38b9":"markdown","fc9a0cca":"markdown","eb8055dc":"markdown","7d0da415":"markdown","aba49292":"markdown","f0ff11a1":"markdown","b388581b":"markdown","766f25c2":"markdown","79e09130":"markdown","d713459c":"markdown","bd65bb73":"markdown","ab779839":"markdown","76c4d9c9":"markdown","1fbe5fe2":"markdown","bd81db8c":"markdown","d157cb82":"markdown","57647a56":"markdown","d7433b73":"markdown","480adfa6":"markdown","579c5777":"markdown","23a66155":"markdown","813c66ed":"markdown","e9ec43e2":"markdown","bb13617e":"markdown","4f20c4ff":"markdown","ce262d3e":"markdown","89a02868":"markdown","de8aa52b":"markdown","a3b97d90":"markdown","16584413":"markdown","2f1493aa":"markdown","f74afbe3":"markdown","600d60f0":"markdown","f456b23b":"markdown","d5ca4304":"markdown","10a5855b":"markdown","38c30727":"markdown","aa1e0660":"markdown","f2b237ea":"markdown","936f75d2":"markdown","2bb50384":"markdown","0a8c06e3":"markdown","c67b1eb6":"markdown","88193d7a":"markdown","7c8b3553":"markdown","95263ea4":"markdown","2ff33d8d":"markdown"},"source":{"0ec5660c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n%matplotlib inline","61ba16cb":"df_train = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\", na_values=\"?\", index_col=['Id'])\ndf_train.info()\ndf_train.sample(5)","7d2e1a60":"df_train.isnull().sum().sort_values(ascending=False)","826ec7be":"df_train.shape","f3eb6417":"df_train.groupby(['workclass']).size().sort_values(ascending = False).plot(kind='bar', figsize=(12, 5))","7a3e31b3":"df_train['workclass'] = df_train['workclass'].fillna(df_train['workclass'].mode()[0])","be459e76":"df_train.groupby(['occupation']).size().sort_values(ascending = False).plot(kind='bar', figsize=(12, 5))","deb78992":"df_train.groupby(['native.country']).size().sort_values(ascending = False).plot(kind=\"bar\", figsize=(12, 5))","5b542307":"df_train['native.country'] = df_train['native.country'].fillna(df_train['native.country'].mode()[0])","6b43b00e":"df_train = df_train.dropna()\ndf_train.shape","dea35440":"df_train[\"income\"] = df_train[\"income\"].map({\"<=50K\": 0, \">50K\":1})\ndf_train[\"sex.num\"] = df_train[\"sex\"].map({\"Male\": 1, \"Female\":0})","7f325048":"df_train['income'].corr(df_train['sex.num'])","89c3f550":"df_train['native.country'].unique()","78c4af47":"len(df_train['native.country'].unique())","6e5785af":"europe = ['Hungary', 'Ireland', 'England', 'France', 'Portugal', 'Scotland', 'Italy', 'Dominican-Republic', 'Germany', 'Greece', 'Yugoslavia', 'Poland', 'Holand-Netherlands']\nafrica = ['South', 'Cambodia', 'Laos']\nsouth_central_america = ['Jamaica', 'Mexico', 'Guatemala', 'El-Salvador', 'Haiti', 'Philippines', 'Cuba', 'Puerto-Rico', 'Nicaragua', 'Ecuador', 'Columbia', 'Peru', 'Honduras', 'Trinadad&Tobago']\nnorth_america = ['Canada']\nasia = ['Iran', 'India', 'Taiwan', 'Vietnam', 'Hong', 'Japan', 'China', 'Thailand', 'Outlying-US(Guam-USVI-etc)']","922f7593":"len(europe)+len(africa)+len(south_central_america)+len(north_america)+len(asia)","281311fd":"def nationality(country):\n    if country in europe:\n        return 'Europe'\n    elif country in africa:\n        return 'Africa'\n    elif country in south_central_america:\n        return 'SouthCentralAmerica'\n    elif country in north_america:\n        return 'NorthAmerica'\n    elif country in asia:\n        return 'Asia'\n    elif country == 'United-States':\n        return 'United-States'\n    else:\n        print(country)\n    ","c24c5e2a":"df_train['nationality'] = df_train['native.country'].apply(nationality)","015f6d02":"df_train.groupby(['nationality']).mean()['income'].sort_values(ascending=True)","b11a77a9":"def nationalityNum(nationality):\n    if nationality == 'SouthCentralAmerica':\n        return 0\n    if nationality == 'Africa':\n        return 1\n    if nationality == 'United-States':\n        return 2\n    if nationality == 'Europe':\n        return 3\n    if nationality == 'Asia':\n        return 4\n    if nationality == 'NorthAmerica':\n        return 5","62586e9c":"df_train['nationality.num'] = df_train['nationality'].apply(nationalityNum)","f5b1431c":"df_train['income'].corr(df_train['nationality.num'])","9a89e381":"df_train.groupby(['race']).size().sort_values(ascending = False).plot(kind=\"bar\")","a60a081e":"df_train.groupby(['race']).mean()['income'].sort_values(ascending=True)","84777472":"def raceNum(race):\n    if race == 'Other':\n        return 0\n    elif race == 'Amer-Indian-Eskimo':\n        return 1\n    elif race == 'Black':\n        return 2\n    elif race == 'White':\n        return 3\n    elif race == 'Asian-Pac-Islander':\n        return 4","358d2339":"df_train['race.num'] = df_train['race'].apply(raceNum)","a5cc9826":"df_train['income'].corr(df_train['race.num'])","a2d058e8":"df_train.groupby(['relationship']).mean()['income'].sort_values(ascending=True)","36454edf":"def relationshipNum(relationship):\n    if relationship == 'Own-child':\n        return 1\n    elif relationship == 'Other-relative':\n        return 2\n    elif relationship == 'Unmarried':\n        return 3\n    elif relationship == 'Not-in-family':\n        return 4\n    elif relationship == 'Husband':\n        return 5\n    elif relationship == 'Wife':\n        return 6","c4c517f1":"df_train['relationship.num'] = df_train['relationship'].apply(relationshipNum)","afbf2999":"df_train.groupby(['occupation']).mean()['income'].sort_values(ascending=True)","2e7395c6":"def occupationNum(occupation):\n    if occupation == 'Priv-house-serv':\n        return 0\n    elif occupation == 'Other-service':\n        return 1\n    elif occupation == 'Handlers-cleaners':\n        return 2\n    elif occupation == 'Armed-Forces':\n        return 3\n    elif occupation == 'Farming-fishing':\n        return 4\n    elif occupation == 'Machine-op-inspct':\n        return 5\n    elif occupation == 'Adm-clerical':\n        return 6\n    elif occupation == 'Transport-moving':\n        return 7\n    elif occupation == 'Craft-repair':\n        return 8\n    elif occupation == 'Sales':\n        return 9\n    elif occupation == 'Tech-support':\n        return 10\n    elif occupation == 'Protective-serv':\n        return 11\n    elif occupation == 'Prof-specialty':\n        return 12\n    elif occupation == 'Exec-managerial':\n        return 13","e68f539a":"df_train['occupation.num'] = df_train['occupation'].apply(occupationNum)","443efc27":"df_train.groupby(['workclass']).mean()['income'].sort_values(ascending=True)","972ea9d5":"def workclassNum(workclass):\n    if workclass == 'Without-pay' or workclass == 'Never-worked':\n        return 0\n    elif workclass == 'Private':\n        return 1\n    elif workclass == 'State-gov':\n        return 2\n    elif workclass == 'Self-emp-not-inc':\n        return 3\n    elif workclass == 'Local-gov':\n        return 4\n    elif workclass == 'Federal-gov':\n        return 5\n    elif workclass == 'Self-emp-inc':\n        return 6","5cbde445":"df_train['workclass.num'] = df_train['workclass'].apply(workclassNum)","6f543b62":"df_train.groupby(['education.num']).mean()['income'].sort_values(ascending=True)","cfab218f":"def educationNumCor(educationNum):\n    if educationNum == 1:\n        return 0\n    elif educationNum == 2:\n        return 1\n    elif educationNum == 3:\n        return 2\n    elif educationNum == 5:\n        return 3\n    elif educationNum == 7:\n        return 4\n    elif educationNum == 4:\n        return 5\n    elif educationNum == 6:\n        return 6\n    elif educationNum == 8:\n        return 7\n    elif educationNum == 9:\n        return 8\n    elif educationNum == 10:\n        return 9\n    elif educationNum == 12:\n        return 10\n    elif educationNum == 11:\n        return 11\n    elif educationNum == 13:\n        return 12\n    elif educationNum == 14:\n        return 13\n    elif educationNum == 16:\n        return 14\n    elif educationNum == 15:\n        return 15","561cfa8d":"df_train['education.num.cor'] = df_train['education.num'].apply(educationNumCor)","2ee2917a":"df_train['income'].corr(df_train['fnlwgt'])","9a4d68e0":"df_train = df_train.drop(['fnlwgt'], axis=1)","ae6d7793":"import matplotlib.pyplot as plt","59bbde0d":"fig, ax = plt.subplots(1, 3, figsize=(16, 9))\n\nax[0].pie(df_train['sex.num'].value_counts(), autopct='%1.1f%%')\nax[0].set_title(\"Presence of each sex\")\nax[0].legend([\"Male\", \"Female\"], title=\"Income\")\n\nax[1].pie(df_train[df_train['sex.num'] == 1]['income'].value_counts(), autopct='%1.1f%%')\nax[1].set_title(\"Male income\")\nax[1].legend([\"<=50K\", \">50K\"], title=\"Income\")\n\nax[2].pie(df_train[df_train['sex.num'] == 0]['income'].value_counts(), autopct='%1.1f%%')\nax[2].set_title(\"Female income\")\nax[2].legend([\"<=50K\", \">50K\"], title=\"Income\")","a848b006":"df_train.groupby(['education', 'sex']).mean()['income']","9a7afe25":"df_train.sort_values(['occupation', 'sex']).groupby(['occupation', 'sex']).mean()['income']","fbb0f729":"df_train.groupby(['education']).mean()['income'].sort_values(ascending=True).plot(kind='bar')","4da247fa":"fig, ax = plt.subplots(figsize=(20, 13))\nsns.heatmap(df_train.corr(), annot=True, vmin=-1, vmax=1)","1b44510f":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nimport statistics as st","1ec9f26c":"used_columns = ['sex.num',\n                'education.num.cor',\n                'capital.gain',\n                'capital.loss',\n                'hours.per.week',\n                'nationality.num',\n                'occupation.num',\n                'relationship.num',\n                'workclass.num',\n                'race.num',\n                'income']\nbase = df_train[used_columns]","fc6c64fb":"X = base.drop(['income'], axis = 1)\nY = base['income']","24177eba":"k_min = 10\nk_max = 30\nfolds = 10\n\nscore_mean_best = 0\nscore_min_best = 0\nscore_max_best = 0\n\nscores = []\n\nfor i in range(k_min, k_max+1):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    score_k = cross_val_score(knn, X, Y, cv=folds)\n    scores.append([i, score_k])\n    \n    if st.mean(score_k) > score_mean_best:\n        score_mean_best = st.mean(score_k)\n        print_aux = \"  --  Best k until now\"\n        k_best = i\n    else:\n        print_aux = \"\"\n    \n    print(\"For k =\", i, \" ---  Score:\", round(st.mean(score_k), 4)*100, \"%\", \"+\/-\", round(st.pstdev(score_k), 4)*100, print_aux)\n\nk = k_best\nprint(\"\\n\", k, \"is the best k found in the range\", k_min, \"to\", k_max)","cd78de95":"knn = KNeighborsClassifier(n_neighbors=k).fit(X, Y)","9cf0a522":"df_test = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\", na_values=\"?\", index_col=['Id'])\ndf_test.info()\ndf_test.sample(5)","f32b4cb8":"df_test.isnull().sum().sort_values(ascending=False)","8f4a41d9":"df_test.shape","e887d25b":"df_test['workclass'] = df_test['workclass'].fillna(df_test['workclass'].mode()[0])\ndf_test['native.country'] = df_test['native.country'].fillna(df_test['native.country'].mode()[0])\ndf_test['occupation'] = df_test['occupation'].fillna(df_test['occupation'].mode()[0])\ndf_test.shape","d9c9a4ab":"df_test[\"sex.num\"] = df_test[\"sex\"].map({\"Male\": 1, \"Female\":0})\n\ndf_test['nationality'] = df_test['native.country'].apply(nationality)\ndf_test['nationality.num'] = df_test['nationality'].apply(nationalityNum)\n\ndf_test['race.num'] = df_test['race'].apply(raceNum)\n\ndf_test['relationship.num'] = df_test['relationship'].apply(relationshipNum)\n\ndf_test['occupation.num'] = df_test['occupation'].apply(occupationNum)\n\ndf_test['workclass.num'] = df_test['workclass'].apply(workclassNum)\n\ndf_test['education.num.cor'] = df_test['education.num'].apply(educationNumCor)\n\ndf_test = df_test.drop(['fnlwgt'], axis=1)","41549168":"used_columns.remove('income')\nbase_test = df_test[used_columns]","4ce9bc6b":"X_prev = base_test\nX_prev.info()","3dfb31e0":"predictions = pd.DataFrame({'Income': knn.predict(X_prev)})\npredictions['Income'] = predictions['Income'].map({0 : \"<=50K\", 1 : \">50K\"})","f0d5689e":"df_train[\"income\"] = df_train[\"income\"].map({\"<=50K\": 0, \">50K\":1})\npredictions.to_csv(\"submission.csv\", index = True, index_label = 'Id')","57650570":"## Native country","561e38b9":"Let's read the data into a panda dataframe. After that, we'll give it a look.","fc9a0cca":"Let's give a look at the correlation between the nacionality number and the income.","eb8055dc":"## Workclass","7d0da415":"We live in a xenophobic world. So it's fairly reasonable to assume that where you're born affects your income.","aba49292":"It's by far not negligible. Sad reality.","f0ff11a1":"This correlation is even stronger than the nacionality number one.","b388581b":"# Data prep","766f25c2":"## By education","79e09130":"Now, we'll stablish an order for the nacionalities which have correlation with the income.","d713459c":"I couldn't find out what \"fnlwgt\" means and it doesn't have a good correlation with the income. So it'll be dropped.","bd65bb73":"# Correlation","ab779839":"We have to deal with the missing data. To accomplish that, we can either impute values in the missing fields or we can drop the rows which have them. Here we'll do both.","76c4d9c9":"## Relationship","1fbe5fe2":"### Native country","bd81db8c":"## By occupation","d157cb82":"# Pre-processing","57647a56":"## Occupation","d7433b73":"First, we can see that the majority of the dataset is white.","480adfa6":"Apparentely, there is no clear central tendency for occupation. So we better drop that data.","579c5777":"## Labeling","23a66155":"# kNN grouping","813c66ed":"## By sex","e9ec43e2":"## Sex","bb13617e":"Now we can calculate the correlation between being a man and earning more than 50K in a year.","4f20c4ff":"## Education","ce262d3e":"## Other drops","89a02868":"Let's do the same as we did for the nacionalities.","de8aa52b":"The mode occures very very frequently, so we can impute it in the missing data with a fairly good confidence.","a3b97d90":"We must treat the missing data as we did in out train dataframe.","16584413":"## Education","2f1493aa":"## Missing data","f74afbe3":"### Dropping NA\nAs we said before, it's better to drop the rows which have not occupation data, since it has no clear central tendency.","600d60f0":"It's possible to notice that men earn more than women even in the same occupation types.","f456b23b":"### Occupation","d5ca4304":"## Race\nLet's analyse the influency of someone beeing white in his\/her income. It's sad to do such an analysis. We all must fight racism.","10a5855b":"So we'll have to deal with the missing data from the following features:\n* Workclass\n* Occupation\n* Native country","38c30727":"# Classifying unlabeled data","aa1e0660":"### Workclass","f2b237ea":"## Pre-processing","936f75d2":"# Income analysis","2bb50384":"## Missing data","0a8c06e3":"Let's group them by in United States or their continent.","c67b1eb6":"Here, the mode is extremely frequent. So let's impute it.","88193d7a":"### Results submission","7c8b3553":"Once again, let's hierarchyze the occupations to establish a correlation with the income.","95263ea4":"Here, it's noticeable that much more man earn more than 50K per year than women does.","2ff33d8d":"The position someone occupies in a family can reveal an income tendency."}}