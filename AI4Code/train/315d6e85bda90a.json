{"cell_type":{"6ace29d6":"code","49ff8d0a":"code","87e27b86":"code","a2960b40":"code","8f1bf4f5":"code","cf2cc9ea":"code","62559f17":"code","7e92a728":"code","ec6c2829":"code","e0809e2c":"code","2b1b8d9d":"code","7e1a7ee6":"code","b384f471":"code","91bf12b6":"code","27596fee":"code","e1dc8cfc":"code","66c55551":"code","506aa2a8":"code","7f67196e":"code","3bde3fa0":"code","f0728c27":"code","1bfc28e3":"code","dc6deb07":"code","9b76978c":"code","8e324f68":"code","1b988893":"code","94127092":"code","9e7e9627":"code","53fbd5ef":"code","aafd0a60":"code","d1259410":"code","3d40386f":"code","818193e6":"code","09c64631":"code","9c557ddb":"code","5c90e2a8":"code","24091acf":"code","6261d3c4":"code","576dadcd":"code","e7e0841f":"code","fafef421":"code","4799c53a":"code","e819cd7a":"code","58b3c6b3":"code","51003f0b":"code","70aa2eb6":"code","92b8b2d4":"code","a7ce47bf":"code","4896fd7e":"code","f655a598":"code","6a52f6a4":"markdown","5a8fd6d8":"markdown","3ce22b84":"markdown","b8cc4b90":"markdown","c9ad4d50":"markdown","8bb5264c":"markdown","e744691a":"markdown","84af7bda":"markdown","09a54808":"markdown","621d80e2":"markdown","e303edc4":"markdown","66735301":"markdown","ec85fdcc":"markdown","de30394a":"markdown","5debcbc6":"markdown","81a0bda9":"markdown","02eaba05":"markdown","52485a9c":"markdown","777ecb97":"markdown","567f9ce7":"markdown","7bdb6ff9":"markdown","74e77c20":"markdown","4271f845":"markdown","5b09a753":"markdown","fcd80e5b":"markdown","f0ba7cf5":"markdown","9fa6ed72":"markdown"},"source":{"6ace29d6":"# Supressing the warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","49ff8d0a":"# Import the libraries\nimport pandas as pd","87e27b86":"# Read the file\nhousing = pd.read_csv(\"..\/input\/regressionhousing\/Housing.csv\")\n\n# Top 5 results\n\nhousing.head()","a2960b40":"# Checking the number of rows and columns\n\nhousing.shape","8f1bf4f5":"# Checking the null values\n\nhousing.info()","cf2cc9ea":"# Checking the various numerical values\n\nhousing.describe()","62559f17":"# Importing the libraries for Visualization\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7e92a728":"# Visualizing the continuous variables\n\nsns.pairplot(housing)\nplt.show()","ec6c2829":"# Visualizing the categorical variables\n\nplt.figure(figsize=(20,10))\n\nplt.subplot(3, 3, 1)\nsns.boxplot(x=housing.mainroad, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 2)\nsns.boxplot(x=housing.guestroom, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 3)\nsns.boxplot(x=housing.basement, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 4)\nsns.boxplot(x=housing.hotwaterheating, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 5)\nsns.boxplot(x=housing.airconditioning, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 6)\nsns.boxplot(x=housing.prefarea, y=housing.price, data=housing)\n\nplt.subplot(3, 3, 7)\nsns.boxplot(x=housing.furnishingstatus, y=housing.price, data=housing)\n\nplt.show()","e0809e2c":"# Visualizing one categorical variable using hue\n\nplt.figure(figsize=(15,5))\nsns.boxplot(x=housing.furnishingstatus, y=housing.price, hue=housing.airconditioning, data=housing)\nplt.show()","2b1b8d9d":"# Preparing the list of the columns\n\nvariablesToBeMapped = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']\n\n# Keeping the original data intact and changing the categorical to numberical\n\nhousing_modified = housing\nhousing_modified[variablesToBeMapped] = housing_modified[variablesToBeMapped].apply(lambda x: x.map({'yes':1, 'no':0}))\nhousing_modified.head()","7e1a7ee6":"# Creating the dummy variable \n\nstatus = pd.get_dummies(housing_modified.furnishingstatus)\nstatus.head()","b384f471":"# Dropping the first column \n\nstatus.drop(\"furnished\", axis=1, inplace=True)\nstatus.head()","91bf12b6":"# Adding it to original dataframe\n\nhousing_modified = pd.concat([housing, status], axis=1)\nhousing_modified.drop(\"furnishingstatus\", axis=1, inplace=True)\nhousing_modified.head()","27596fee":"# Importing the scikit learn library\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the data\n\ndf_train, df_test = train_test_split(housing_modified, train_size=0.7, random_state=100)\nprint(\"Train Dataset Size: \", df_train.shape)\nprint(\"Test Dataset Size: \", df_test.shape)","e1dc8cfc":"# Normalisation: (x - xmin)\/(xmax - xmin)\n# Standardisation: (x - mu)\/sigma\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n# 1 . Instantiate an object\nscaler = MinMaxScaler()\n\n# Create a list of numeric vars\nnum_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']\n\n# 2. Fit on object\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\ndf_train.head()","66c55551":"# Checking the various parameters if changed\n\ndf_train[num_vars].describe()","506aa2a8":"# Checking the heatmap of correlation\n\nplt.figure(figsize=(16,10))\nsns.heatmap(df_train.corr(), annot=True, cmap='YlGnBu')\nplt.show()","7f67196e":"# Selecting X_train, y_train without 'price'\n\ny_train = df_train.pop('price')\nX_train = df_train","3bde3fa0":"# Importing the statsmodels library\n\nimport statsmodels.api as sm","f0728c27":"# Building a model with 'area'\n\n# Adding a constant\nX_train_sm = sm.add_constant(X_train['area'])\n\n# Creating the first model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","1bfc28e3":"# Building a model with 'area' & 'bathrooms'\n\n# Adding a constant\nX_train_sm = sm.add_constant(X_train[['area', 'bathrooms']])\n\n# Creating the second model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","dc6deb07":"# Building a model with 'area','bathrooms' and 'airconditioning'\n\n# Adding a constant\nX_train_sm = sm.add_constant(X_train[['area', 'bathrooms', 'airconditioning']])\n\n# Creating the second model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","9b76978c":"# Checking the list of columns\n\nhousing_modified.columns","8e324f68":"# Building a model with all variables\n\n# Adding a constant\nX_train_sm = sm.add_constant(X_train)\n\n# Creating the second model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","1b988893":"# Importing the library to calculate the VIFi\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","94127092":"# Calculating the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif.VIF = round(vif.VIF, 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9e7e9627":"# Removing the 'semi-furnished'\n\nX = X_train.drop('semi-furnished', axis=1)","53fbd5ef":"# Building a model with all variables except 'semi-furnished'\n\n# Adding a constant\nX_train_sm = sm.add_constant(X)\n\n# Creating the second model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","aafd0a60":"# Calculating the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif.VIF = round(vif.VIF, 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","d1259410":"# Removing the 'semi-furnished'\n\nX = X.drop('bedrooms', axis=1)","3d40386f":"# Building a model with all variables except 'semi-furnished' & 'bedrooms'\n\n# Adding a constant\nX_train_sm = sm.add_constant(X)\n\n# Creating the second model\nlr = sm.OLS(y_train, X_train_sm)\n\n# Fitting the model\nlr_model = lr.fit()\n\n# Checking the params\nprint(lr_model.params)\n\n# Checking the summary\nlr_model.summary()","818193e6":"# Calculating the VIF\n\nvif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif.VIF = round(vif.VIF, 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","09c64631":"# Calculating the predicted values \n\ny_train_pred = lr_model.predict(X_train_sm)","9c557ddb":"#Calculating the residual\n\nres = y_train - y_train_pred\n\n# Plotting the graph\n\nfig = plt.figure()\nsns.distplot(res, bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label\nplt.show()","5c90e2a8":"# Creating a list of numeric variables\n\nnum_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']\n\n# Fitting on data\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])\ndf_test.head()","24091acf":"# Looking into data\n\ndf_test.describe()","6261d3c4":"# Preparing the test data\n\ny_test = df_test.pop('price')\nX_test = df_test","576dadcd":"# Adding a constant\n\nX_test_sm = sm.add_constant(X_test)\nX_test_sm.head()","e7e0841f":"# Removing the 'bedrooms' & 'semi-furnished'\n\nX_test_sm = X_test_sm.drop(['bedrooms', 'semi-furnished'], axis=1)","fafef421":"# Predicting\n\ny_test_pred = lr_model.predict(X_test_sm)\n\n# Importing r2_score library\n\nfrom sklearn.metrics import r2_score\n\n# Evaluating\n\nr2_score(y_true=y_test, y_pred=y_test_pred)","4799c53a":"# Plotting y_test and y_pred to understand the spread\n\nfig = plt.figure()\nplt.scatter(y_test, y_test_pred)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16)      \nplt.show()","e819cd7a":"from sklearn.metrics import r2_score\n\nr2_score(y_test, y_test_pred)","58b3c6b3":"import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\n\ndt = DecisionTreeRegressor(random_state=42, max_depth=4, min_samples_leaf=10)\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(housing_modified, train_size=0.7, random_state=100)\n\ndf_train.shape, df_test.shape","51003f0b":"df_test.head()","70aa2eb6":"scaler = MinMaxScaler()\ndf_train['price'] = scaler.fit_transform(df_train[['price']])\ndf_test['price'] = scaler.transform(df_test[['price']])\n\ndf_train.price.describe()","92b8b2d4":"y_train = df_train.pop(\"price\")\nX_train = df_train\n\ny_test = df_test.pop(\"price\")\nX_test = df_test\n\nX_train.shape, X_test.shape","a7ce47bf":"dt.fit(X_train, y_train)","4896fd7e":"!pip install pydotplus\n\nfrom IPython.display import Image\nfrom io import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\n\ndot_data = StringIO()\n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True,\n               feature_names=X_train.columns)\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","f655a598":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\nprint(\"Train Score: \", r2_score(y_train, y_train_pred))\nprint(\"Test Score: \", r2_score(y_test, y_test_pred))","6a52f6a4":"### Checking VIF\n\nVariance Inflation Factor or VIF, gives a basic quantitative idea about how much the feature variables are correlated with each other. It is an extremely important parameter to test our linear model. The formula for calculating `VIF` is:\n\n### $ VIF_i = \\frac{1}{1 - {R_i}^2} $","5a8fd6d8":"## Step 1: Reading and Understanding the Data\n\nLet us first import Pandas and read the housing dataset","3ce22b84":"Now as you can see, the VIFs and p-values both are within an acceptable range. So we go ahead and make our predictions using this model only.","b8cc4b90":"#### Dividing into X_test and y_test","c9ad4d50":"## Step 6: Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","8bb5264c":"#### Visualising Numeric Variables\n\nLet's make a pairplot of all the numeric variables","e744691a":"# Multiple Linear Regression\n## Housing Case Study\n\n#### Problem Statement:\n\nConsider a real estate company that has a dataset containing the prices of properties in the Delhi region. It wishes to use the data to optimise the sale prices of the properties based on important factors such as area, bedrooms, parking, etc.\n\nEssentially, the company wants \u2014\n\n\n- To identify the variables affecting house prices, e.g. area, number of rooms, bathrooms, etc.\n\n- To create a linear model that quantitatively relates house prices with variables such as number of rooms, area, number of bathrooms, etc.\n\n- To know the accuracy of the model, i.e. how well these variables can predict house prices.\n\n**So interpretation is important!**","84af7bda":"## Step 4: Splitting the Data into Training and Testing Sets\n\nAs you know, the first basic step for regression is performing a train-test split.","09a54808":"#### Sequence of removal of features from the models\n\n* High p-Value & High VIF : Remove first\n    - Remove p-Value > 0.05\n    - Remove VIF > 10\n    - 5 < Check VIF < 10\n* High-Low\n    - High p-Value & Low VIF : Remove first \n    - Low p-Value & High VIF : Remove next\n* Low p-Value & Low VIF : Never remove","621d80e2":"## Step 9: Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","e303edc4":"#### Applying the scaling on the test sets","66735301":"## Step 7: Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the final, i.e. fourth model.","ec85fdcc":"We can also visualise some of these categorical features parallely by using the `hue` argument. Below is the plot for `furnishingstatus` with `airconditioning` as the hue.","de30394a":"### Dummy Variables\n\nThe variable `furnishingstatus` has three levels. We need to convert these levels into integer as well. \n\nFor this, we will use something called `dummy variables`.","5debcbc6":"## Step 5: Building a linear model\n\nFit a regression line through the training data using `statsmodels`. Remember that in `statsmodels`, you need to explicitly fit a constant using `sm.add_constant(X)` because if we don't perform this step, `statsmodels` fits a regression line passing through the origin, by default.","81a0bda9":"#### Fit the DT model","02eaba05":"*** Buildig a Model - One way of creating a model**","52485a9c":"Overall we have a decent model, but we also acknowledge that we could do better. \n\nWe have a couple of options:\n1. Add new features (bathrooms\/bedrooms, area\/stories, etc.)\n2. Build a non-linear model","777ecb97":"#### Visualising Categorical Variables\n\nAs you might have noticed, there are a few categorical variables as well. Let's make a boxplot for some of these variables.","567f9ce7":"## Step 2: Visualising the Data\n\nLet's now spend some time doing what is arguably the most important step - **understanding the data**.\n- If there is some obvious multicollinearity going on, this is the first place to catch it\n- Here's where you'll also identify if some predictors directly have a strong association with the outcome variable\n\nWe'll visualise our data using `matplotlib` and `seaborn`.","7bdb6ff9":"*** Buildig a Model - Another way of creating a model**","74e77c20":"Looking at the p-values, it looks like some of the variables aren't really significant (in the presence of other variables).\n\nMaybe we could drop some?\n\nWe could simply drop the variable with the highest, non-significant p value. A better way would be to supplement this with the VIF information.","4271f845":"### Rescaling the Features \n\nAs you saw in the demonstration for Simple Linear Regression, scaling doesn't impact your model. Here we can see that except for `area`, all the columns have small integer values. So it is extremely important to rescale the variables so that they have a comparable scale. If we don't have comparable scales, then some of the coefficients as obtained by fitting the regression model might be very large or very small as compared to the other coefficients. This might become very annoying at the time of model evaluation. So it is advised to use standardization or normalization so that the units of the coefficients obtained are all on the same scale. As you know, there are two common ways of rescaling:\n\n1. Min-Max Scaling (nrmalization): Between 0 and 1 \n2. Standardisation (mean-0, sigma-1) \n\nThis time, we will use MinMax scaling.","5b09a753":"\nWe can see that the equation of our best fitted line is:\n\n$ price = 0.236  \\times  area + 0.202  \\times  bathrooms + 0.11 \\times stories + 0.05 \\times mainroad + 0.04 \\times guestroom + 0.0876 \\times hotwaterheating + 0.0682 \\times airconditioning + 0.0629 \\times parking + 0.0637 \\times prefarea - 0.0337 \\times unfurnished $","fcd80e5b":"## Step 3: Data Preparation\n- You can see that your dataset has many columns with values as 'Yes' or 'No'.\n\n- But in order to fit a regression line, we would need numerical values and not string. Hence, we need to convert them to 1s and 0s, where 1 is a 'Yes' and 0 is a 'No'.","f0ba7cf5":"Now, you don't need three columns. You can drop the `furnished` column, as the type of furnishing can be identified with just the last two columns where \u2014 \n- `00` will correspond to `furnished`\n- `01` will correspond to `unfurnished`\n- `10` will correspond to `semi-furnished`","9fa6ed72":"### Using Decision Trees"}}