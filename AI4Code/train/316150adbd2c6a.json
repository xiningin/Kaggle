{"cell_type":{"df9aab9f":"code","c4b3049d":"code","85417eac":"code","212c8885":"code","2fee3d01":"code","ecd1b705":"code","bb749a37":"code","a655bccc":"code","ed5adc93":"code","13ac03a6":"code","eae031ce":"code","e55efdda":"code","a698577b":"code","48c36d43":"code","43cda6f8":"code","e259a781":"code","0b57ef7f":"code","85b9b902":"code","e4236c05":"code","12271c0e":"code","a2f2496a":"code","3c9df00e":"code","640d8669":"code","ab4b13e5":"code","66331d92":"code","5da21182":"code","26ecf0db":"code","d6d06887":"code","e88b6871":"code","f7864b84":"code","40b863a8":"code","23aadd25":"code","67bec551":"code","bbae090d":"code","09502df5":"code","3e2cb999":"code","51e39940":"code","ffa5e0a3":"code","7829d5c3":"code","9cb470dd":"code","6e032f13":"markdown","ecfe3574":"markdown","eea92949":"markdown","6af7666d":"markdown","c6dadaeb":"markdown","18cedccf":"markdown","dfd2e6de":"markdown","f0fa106d":"markdown","89ddbea8":"markdown","76dc8695":"markdown","08ab062f":"markdown","c7c06730":"markdown","d89e05d4":"markdown","cf9529e5":"markdown","b2700259":"markdown","31c27e62":"markdown","ee92df9f":"markdown","d6d6303e":"markdown","8fa66c61":"markdown","a7611de6":"markdown","936b67a0":"markdown","ce9323f9":"markdown","18b1ff22":"markdown","145f0caf":"markdown"},"source":{"df9aab9f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c4b3049d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","85417eac":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","212c8885":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","2fee3d01":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","ecd1b705":"nRowsRead = None # specify 'None' if want to read whole file\n# data.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","bb749a37":"df1.head(5)","a655bccc":"plotPerColumnDistribution(df1, 10, 5)","ed5adc93":"plotCorrelationMatrix(df1, 8)","13ac03a6":"plotScatterMatrix(df1, 20, 10)","eae031ce":"df = df1.copy()\ndf = df[df['published_date'] < '2020-01-23'] # an article age more than 1 month (to stable ratings)\ndf['published_date'] = pd.to_datetime(df['published_date'])\ndf['published_dayofweek'] = df['published_date'].dt.dayofweek # 0 - Monday\ndf['published_dayname'] = df['published_date'].dt.day_name()\ndf['published_year'] = df['published_date'].dt.year\ndf['published_hour'] = df['published_time'].apply(lambda x: int(x[:2]))\nprint(df.shape)\ndf[['link', 'title', 'published_date', 'published_time']].head()","e55efdda":"plt.rcParams[\"figure.figsize\"] = (10, 6)","a698577b":"sample = df[['published_dayofweek', 'published_dayname', 'rating', 'comments', 'views']].groupby(['published_dayofweek', 'published_dayname']).agg('mean').reset_index()\nwidth = 0.35\nx = np.arange(len(sample))\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, sample['rating'], width, label='rating')\nrects2 = ax.bar(x + width\/2, sample['comments'], width, label='comments')\nax.set_ylabel('stats')\nax.set_title('Counters by day of week')\nax.set_xticks(x)\nax.set_xticklabels(sample['published_dayname'])\nax.legend()\nplt.show()","48c36d43":"sample = df[['published_hour', 'rating', 'comments', 'views']].groupby(['published_hour']).agg('mean').reset_index()\nwidth = 0.35\nx = np.arange(len(sample))\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, sample['rating'], width, label='rating')\nrects2 = ax.bar(x + width\/2, sample['comments'], width, label='comments')\nax.set_ylabel('stats')\nax.set_title('Counters by hour')\nax.set_xticks(x)\nax.set_xticklabels(sample['published_hour'])\nax.legend()\nplt.show()","43cda6f8":"sample = df[['published_year', 'rating', 'comments']].groupby(['published_year']).agg('mean').reset_index()\nwidth = 0.35\nx = np.arange(len(sample))\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, sample['rating'], width, label='rating')\nrects2 = ax.bar(x + width\/2, sample['comments'], width, label='comments')\nax.set_ylabel('stats')\nax.set_title('Counters by year')\nax.set_xticks(x)\nax.set_xticklabels(sample['published_year'])\nax.legend()\nplt.show()","e259a781":"# it's some approx, because it doesn't contain all articles\nsample = df[['published_year', 'rating', 'comments']].groupby(['published_year']).agg('sum').reset_index()\nwidth = 0.35\nx = np.arange(len(sample))\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, sample['rating'], width, label='rating')\nrects2 = ax.bar(x + width\/2, sample['comments'], width, label='comments')\nax.set_ylabel('stats')\nax.set_title('Activity by year')\nax.set_xticks(x)\nax.set_xticklabels(sample['published_year'])\nax.legend()\nplt.show()","0b57ef7f":"from collections import Counter","85b9b902":"c = Counter(', '.join(list(df['article_categories'][~df['article_categories'].isnull()])).split(', '))\nmost_common_article_categs = c.most_common(10)\nmost_common_article_categs","e4236c05":"c = Counter(', '.join(list(df['tags'][~df['tags'].isnull()])).split(', '))\nmost_common_tags = c.most_common(10)\nmost_common_tags","12271c0e":"plt.hist(df['views'], bins=100, color='#0504aa')\nplt.show()","a2f2496a":"plt.hist(np.log(df['views']+1), bins=100, color='#0504aa')\nplt.show()","3c9df00e":"plt.hist(np.log(df['sentences_count']+1), bins=100, color='#0504aa')\nplt.show()","640d8669":"df_sample = df[(df['positive_votes'] + df['negative_votes']) > 10].copy()\nprint(len(df_sample))\ndf_sample['rating_2'] = df_sample['positive_votes'] \/ (df_sample['positive_votes'] + df_sample['negative_votes'])","ab4b13e5":"sample = df_sample[['published_dayofweek', 'published_dayname', 'rating_2']].groupby(['published_dayofweek', 'published_dayname']).agg('mean').reset_index()\nplt.bar(range(len(sample)), sample['rating_2'])\nplt.xticks(range(len(sample)), sample['published_dayname'])\nplt.title('Rating_2 by dayofweek')\nplt.ylabel('stats')\nplt.show()","66331d92":"plt.hist(df_sample['rating_2'], bins=100, color='#0504aa')\nplt.title('rating_2 distrib')\nplt.xlabel('rating_2')\nplt.ylabel('count')\nplt.show()","5da21182":"df_sample['rating_2_round'] = df_sample['rating_2'].apply(lambda x: round(x*10)\/10)\nsample = df_sample[['rating_2_round', 'sentences_count']].groupby('rating_2_round').agg('mean').reset_index()\n\nplt.bar(range(len(sample)), sample['sentences_count'])\nplt.xticks(range(len(sample)), sample['rating_2_round'])\nplt.title('Sent length rating_2 dependency')\nplt.xlabel('rating_2')\nplt.ylabel('sentences count')\nplt.show()","26ecf0db":"most_common_article_categs = set([x[0] for x in most_common_article_categs])\nmost_common_tags = set([x[0] for x in most_common_tags])\nmost_common_article_categs, most_common_tags","d6d06887":"def is_article_categ_most_common(article_categ_line):\n    if pd.isnull(article_categ_line):\n        return 0\n    categs = article_categ_line.split(', ')\n    return int(any([categ in most_common_article_categs for categ in categs]))\n\ndef is_tag_most_common(tags_line):\n    if pd.isnull(tags_line):\n        return 0\n    tags = tags_line.split(', ')\n    return int(any([tag in most_common_tags for tag in tags]))","e88b6871":"df_sample['title_len'] = df_sample['title'].apply(len)\ndf_sample['article_categ_cnt'] = df_sample['article_categories'].apply(lambda x: x.count(',') if pd.notnull(x) else 0)\ndf_sample['tags_cnt'] = df_sample['tags'].apply(lambda x: x.count(',') if pd.notnull(x) else 0)\ndf_sample['weekend'] = df_sample['published_dayofweek'].apply(lambda x: int(x in [5, 6]))\ndf_sample['most_common_article_categ'] = df_sample['article_categories'].apply(is_article_categ_most_common)\ndf_sample['most_common_tag'] = df_sample['tags'].apply(is_tag_most_common)\ndf_sample['weight'] = df_sample['negative_votes'] + df_sample['positive_votes']","f7864b84":"features = [\n    'title_len', 'article_categ_cnt', 'href_count', 'img_count', 'tags_cnt', 'h3_count',\n    'i_count', 'spoiler_count', 'text_len', 'lines_count', 'sentences_count',\n    'max_sentence_len', 'min_sentence_len', 'mean_sentence_len', 'median_sentence_len',\n    'tokens_count', 'max_token_len', 'mean_token_len', 'median_token_len',\n    'alphabetic_tokens_count', 'words_count', 'words_mean', 'published_dayofweek',\n    'published_hour', 'weekend', 'most_common_article_categ', 'most_common_tag',\n    'weight'\n]\n\ny = df_sample['rating_2']\nX = df_sample[features]\ny.shape, X.shape","40b863a8":"plt.hist(np.log(1.1-y), bins=40)\nplt.show()","23aadd25":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","67bec551":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\ntrain_weights = X_train['weight']\nX_train.drop(['weight'], axis=1, inplace=True)\nX_test.drop(['weight'], axis=1, inplace=True)","bbae090d":"import lightgbm as lgb","09502df5":"gbm = lgb.LGBMRegressor(num_leaves=31, learning_rate=0.04, n_estimators=100)\n\ngbm.fit(X_train, np.log(1.1 - y_train),\n        sample_weight=train_weights,\n        eval_set=[(X_test, np.log(1.1 - y_test))],\n        eval_metric='l2', early_stopping_rounds=20)\ny_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration_)","3e2cb999":"mean_squared_error(y_test, 1.1 - np.exp(y_pred)) ** 0.5","51e39940":"plt.hist(1.1 - np.exp(y_pred), bins=10, label='pred')\nplt.hist(y_test, bins=10, label='true', alpha=0.8)\nplt.show()","ffa5e0a3":"np.corrcoef(y_test, 1.1 - np.exp(y_pred))","7829d5c3":"sample = X_test.copy()\nsample['pred'] = y_pred\nsample = sample.sort_values('pred')","9cb470dd":"articles_cnt = 10\nbest_articles = [row for _, row in df_sample.loc[list(sample.index[:articles_cnt])].iterrows()]\nworst_articles = [row for _, row in df_sample.loc[list(sample.index[-articles_cnt:])].iterrows()]\n\nprint('best articles')\nfor article in best_articles:\n    print(f'    {article[\"title\"]}  {article[\"positive_votes\"]}  {article[\"negative_votes\"]}\\n    {article[\"rating_2\"]}\\n    {article[\"link\"]}')\nprint('worst articles')\nfor article in worst_articles:\n    print(f'    {article[\"title\"]}  {article[\"positive_votes\"]}  {article[\"negative_votes\"]}\\n    {article[\"rating_2\"]}\\n    {article[\"link\"]}')","6e032f13":"Prepare data","ecfe3574":"## Conclusion\nAlthough the model is weak, it can help to find more serious and thoughtful articles","eea92949":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","6af7666d":"Check if a new rating correlates with dayofweek","c6dadaeb":"#### Translations\n1. target = log(1.1 - rating)\n2. rating = 1.1 - exp(target)","18cedccf":"Let's build a model to predict this 'normalized' rating (but there is still a room to normalize it (through time, for example)","dfd2e6de":"Of course there is a correlation between rating and how long article is","f0fa106d":"Counters by day of week (expect different behav. on weekends)","89ddbea8":"Distribution graphs (histogram\/bar graph) of sampled columns:","76dc8695":"Counters by hour","08ab062f":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.","c7c06730":"Now you're ready to read in the data and use the plotting functions to visualize the data.","d89e05d4":"Article lengths","cf9529e5":"### Let's check 1st file: \/kaggle\/input\/data.csv","b2700259":"Let's take a quick look at what the data looks like:","31c27e62":"Counters by year","ee92df9f":"Most common tags","d6d6303e":"Correlation matrix:","8fa66c61":"target distribution","a7611de6":"There is 1 csv file in the current version of the dataset:\n","936b67a0":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","ce9323f9":"Views distribution. Supposed to be ~lognormal","18b1ff22":"Scatter and density plots:","145f0caf":"Is there a dependency between an article length and rating (define a new rating as: positive \/ (positive+negative))"}}