{"cell_type":{"0c7f1821":"code","9c5013ed":"code","3eb3fbd8":"code","d4311089":"code","80502c9a":"code","bb0b08be":"code","eee378a0":"code","f2d75a3a":"code","2b133d1c":"code","efc0e99e":"code","3bc70a18":"code","0c6efdd2":"code","ce581234":"code","aa3673a9":"code","4a478b8e":"code","123dfba7":"code","40979d67":"code","f085845c":"code","2d61ab14":"code","3c8274be":"code","06eb45fe":"code","7004d365":"markdown","22284aa4":"markdown","cfb87be3":"markdown","d792e534":"markdown"},"source":{"0c7f1821":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9c5013ed":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalMaxPooling2D, Dense, Dropout, Flatten, BatchNormalization\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint","3eb3fbd8":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nprint(train_df.shape, test_df.shape, submission_df.shape)","d4311089":"X = train_df.drop('label', axis=1)\ny = train_df['label']","80502c9a":"plt.figure(figsize=(5,5))\nfor k in range(48):\n    plt.subplot(6, 8, k + 1)\n    plt.imshow(np.array(X).reshape(-1, 28,28)[k], cmap='Greys')\n    plt.axis('off')\nplt.tight_layout()\nplt.show()","bb0b08be":"y.value_counts()","eee378a0":"sns.countplot(y);","f2d75a3a":"X = np.array(X).reshape(-1,28,28,1)\nX = X \/ 255","2b133d1c":"test_df = np.array(test_df).reshape(-1,28,28,1)\ntest_df = test_df \/ 155","efc0e99e":"y = to_categorical(y, num_classes=10)","3bc70a18":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.1)","0c6efdd2":"model = Sequential([\n    Conv2D(64, 5, activation='relu', padding='same', input_shape=(28,28,1)),\n    BatchNormalization(),\n    Conv2D(128, 5, activation='relu', padding='same'),\n    BatchNormalization(),\n    MaxPooling2D(2),\n    Dropout(0.2),\n    Conv2D(128, 3, activation='relu'),\n    BatchNormalization(),\n    Conv2D(256, 3, activation='relu'),\n    BatchNormalization(),\n    MaxPooling2D(2),\n    Dropout(0.2),\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dropout(0.3),\n    Dense(128, activation='relu'),\n    Dropout(0.3),\n    Dense(10, activation='softmax')\n])\nmodel.summary()","ce581234":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])","aa3673a9":"batch_size = 512\nepochs = 30","4a478b8e":"callbacks_list = [\n    EarlyStopping(monitor='val_acc', patience=5),\n    ModelCheckpoint(filepath='my_model.h5', monitor='val_loss', save_best_only=True)\n]","123dfba7":"data_gen = ImageDataGenerator(rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=False)","40979d67":"history = model.fit_generator(data_gen.flow(X_train, y_train, batch_size=batch_size), epochs=epochs, validation_data=(X_test, y_test),\n                             steps_per_epoch = X_train.shape[0] \/\/ batch_size, callbacks=callbacks_list)","f085845c":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_plot = np.arange(1, len(loss) + 1)\nplt.clf()\n\nplt.plot(epochs_plot, loss, 'r', label='Training loss')\nplt.plot(epochs_plot, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","2d61ab14":"acc = history.history['acc']\nval_acc = history.history['val_acc']\n\nplt.plot(epochs_plot, acc, 'r', label='Training acc')\nplt.plot(epochs_plot, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation acc')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","3c8274be":"model = load_model('my_model.h5')\npredict = model.predict(test_df)\ny_temp = np.argmax(predict, axis=1)\noutput = pd.DataFrame({'ImageId': submission_df.ImageId, 'Label': y_temp})\noutput.to_csv('my_keras_submission.csv', index=False)","06eb45fe":"output.head(10)","7004d365":"# Imports","22284aa4":"# Create Model","cfb87be3":"# Load Data","d792e534":"# Data preparation"}}