{"cell_type":{"3d4e174b":"code","748a59ac":"code","b66b515d":"code","06026252":"code","b012bc3f":"code","5a4eff1c":"code","b27bb1c7":"code","7f767a11":"code","4795c9fa":"code","622f21a6":"code","dfba9303":"code","f86101cb":"code","859610fc":"code","dbfaba68":"code","0acb8361":"code","7326449b":"code","0aceb912":"markdown","02be7ed9":"markdown","d32477a4":"markdown","5df48122":"markdown"},"source":{"3d4e174b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","748a59ac":"!pip install split-folders\nimport splitfolders","b66b515d":"import sys\nfrom matplotlib import pyplot\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout\nfrom keras.optimizers import SGD\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report, confusion_matrix","06026252":"def summarize_diagnostics(history):\n# plot loss\n    plt.style.use(\"ggplot\")\n    plt.figure()\n    N = epochs\n    plt.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\n    plt.plot(np.arange(0, N), history.history[\"val_loss\"], label=\"val_loss\")\n    plt.title(\"Loss\")\n    plt.xlabel(\"Epoch #\")\n    plt.ylabel(\"Loss\")\n    plt.legend(loc=\"upper left\")\n    # plot accuracy\n    plt.style.use(\"ggplot\")\n    plt.figure()\n    N = epochs\n    plt.plot(np.arange(0, N), history.history[\"accuracy\"], label=\"accuracy\")\n    plt.plot(np.arange(0, N), history.history[\"val_accuracy\"], label=\"val_accuracy\")\n    plt.title(\"Accuracy\")\n    plt.xlabel(\"Epoch #\")\n    plt.ylabel(\"Accuracy\")\n    plt.legend(loc=\"upper left\")\n    # save plot to file","b012bc3f":"print(\"Class ok_front train count:\",len(os.listdir('..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/ok_front')))\nprint(\"Class def_front train count:\",len(os.listdir('..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/def_front')) )\n\nprint(\"Class def_front test count:\",len(os.listdir('..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\/def_front')))\nprint(\"Class ok_front test count:\",len(os.listdir('..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\/ok_front')))","5a4eff1c":"splitfolders.ratio(\"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\", output=\"output\", seed=1337, ratio=(.9, .1), group_prefix=None)","b27bb1c7":"print(\"Class ok_front train count:\",len(os.listdir('.\/output\/train\/ok_front')))\nprint(\"Class def_front train count:\",len(os.listdir('.\/output\/train\/def_front')) )\n\nprint(\"Class ok_front train count:\",len(os.listdir('.\/output\/val\/ok_front')))\nprint(\"Class def_front train count:\",len(os.listdir('.\/output\/val\/def_front')) )","7f767a11":"IMAGE_DIMS = (224, 224, 3)\ntrain_data_dir = '.\/output\/train\/'\nvalidation_data_dir = '.\/output\/val\/'\nbatch_size=64","4795c9fa":"train_datagen = ImageDataGenerator(rescale=1.0\/255.0)\nvalidation_datagen = ImageDataGenerator(rescale=1.0\/255.0)\n\ntrain_generator = train_datagen.flow_from_directory(\n        train_data_dir,\n        target_size=(IMAGE_DIMS[0], IMAGE_DIMS[1]),\n        batch_size=batch_size,\n        class_mode='categorical',\n        shuffle=True)\nvalidation_generator = validation_datagen.flow_from_directory(\n        validation_data_dir,\n        target_size=(IMAGE_DIMS[0], IMAGE_DIMS[1]),\n        batch_size=batch_size,\n        class_mode='categorical',\n        shuffle=True)","622f21a6":"nb_train_samples =5969 \nnb_validation_samples = 664","dfba9303":"# define cnn model\ndef define_model(h,w):\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform',\n    padding='same', input_shape=(h,w, 3)))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform',\n    padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform',\n    padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n    model.add(Dense(2, activation='softmax'))\n    return model","f86101cb":"model = define_model(IMAGE_DIMS[0],IMAGE_DIMS[1])\nmodel.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])\nepochs = 8\nbatch_size = 64\ncheckpoint = ModelCheckpoint(\".\/weights.h5\",monitor=\"loss\",mode=\"min\",save_best_only = True,verbose=1)\ncallbacks = [checkpoint]\nhistory = model.fit_generator(train_generator,\n    steps_per_epoch = nb_train_samples \/\/ batch_size,\n    epochs = epochs,\n    callbacks = callbacks,\n    validation_data = validation_generator,\n    validation_steps = nb_validation_samples \/\/ batch_size)","859610fc":"summarize_diagnostics(history)","dbfaba68":"test_datagen = ImageDataGenerator(rescale=1.0\/255.0)\ntest_data_dir='..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\/'\ntest_generator = test_datagen.flow_from_directory(\n        test_data_dir,\n        target_size=(IMAGE_DIMS[0], IMAGE_DIMS[1]),\n        batch_size=batch_size,\n        class_mode='categorical',\n        shuffle=False)","0acb8361":"model.load_weights(\"weights.h5\")\nclass_labels = test_generator.class_indices\nclass_labels = {v: k for k, v in class_labels.items()}\nclasses = list(class_labels.values())\nY_pred = model.predict_generator(test_generator)\ny_pred = np.argmax(Y_pred, axis=1)","7326449b":"print('Confusion Matrix')\nprint(confusion_matrix(test_generator.classes, y_pred))\nprint('Classification Report')\ntarget_names = list(class_labels.values())\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))\n\nplt.figure(figsize=(8,8))\ncnf_matrix = confusion_matrix(test_generator.classes, y_pred)\n\nplt.imshow(cnf_matrix, interpolation='nearest')\nplt.colorbar()\ntick_marks = np.arange(len(classes))\n_ = plt.xticks(tick_marks, classes, rotation=90)\n_ = plt.yticks(tick_marks, classes)","0aceb912":"Testing the model","02be7ed9":"I have split the training data into train and validation, so that the model can be used on test data provided.<br>\nKindly upvote if you like this notebook","d32477a4":"We will be dividing the train data into train and validation and use the test data for  the model  ","5df48122":"Loading the best model"}}