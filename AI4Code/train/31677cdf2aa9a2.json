{"cell_type":{"020a1903":"code","6e43443e":"code","d133931b":"code","839843ac":"code","316f9b31":"code","7a5a5776":"code","6d725879":"code","111e2661":"code","888e39dc":"code","d693fb5e":"code","5620d407":"code","98cb659c":"code","a65bd013":"code","69ef0bd8":"code","130a2876":"code","7be14940":"code","f2df5be4":"code","01514fab":"code","3b3a7418":"code","48cf744f":"code","4346479d":"code","4dca7dec":"code","2cc8048e":"code","adabaa48":"code","32f584ba":"code","5188bc66":"code","a5dbc196":"code","9073d75d":"code","ad802c35":"code","f06ea28a":"code","c5c5def8":"code","7a4a46df":"code","fc051dbc":"code","15142620":"code","eb731320":"code","771fe83f":"code","69a4f805":"code","8e02ccff":"code","aa4447ea":"code","5a7fa199":"code","8c19a001":"code","194025ce":"code","02a9bfed":"code","87453a88":"code","54602920":"code","b8c2275e":"code","9d624aca":"code","f5ec6e92":"code","76c81811":"code","753095ae":"code","83eeb9fb":"code","6eed7202":"code","449ca0f4":"code","5bce375e":"code","00eacbeb":"code","750f9c37":"code","4eed2006":"code","6f8b34b8":"code","f7d479b0":"code","40b4c022":"code","cb66bfc2":"code","2248cd40":"code","a0ec45d8":"code","4c75b863":"code","971f6df0":"code","2d10ab27":"code","9738c8eb":"code","41378bc3":"code","6087c2a4":"code","27c4b5ac":"code","a8807a77":"code","afcb6b8c":"code","2f966450":"code","7357345d":"code","cd8cb684":"code","0d7a7972":"code","794114e9":"code","328e2dd7":"code","450dd601":"code","a5593f43":"code","5b361ec9":"code","805161ec":"code","ea46fcee":"code","8071eb18":"code","d1884681":"code","dc93dfff":"code","4522fc03":"code","264724c0":"markdown","c02bd2d1":"markdown","0bdecbc2":"markdown","98f3991a":"markdown","4d3053ab":"markdown","8d6eae7e":"markdown","7bc42d29":"markdown","c049118b":"markdown","e24da5b6":"markdown","a54e677c":"markdown","d1f22048":"markdown","6ba83511":"markdown","99e0565a":"markdown","31d2a7c8":"markdown","365b0719":"markdown","2c5a98c3":"markdown","a676ee94":"markdown","b1662d21":"markdown","bdb5462b":"markdown","8f271d86":"markdown","73cb7909":"markdown","841989f1":"markdown","54bab5e0":"markdown","91fe60d4":"markdown","e0972d8a":"markdown","ac6e2db4":"markdown","49537ce6":"markdown","92d969e9":"markdown","ee594ac4":"markdown","1fa329ef":"markdown"},"source":{"020a1903":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Embedding, MaxPooling1D, Conv1D, GlobalMaxPooling1D, Dropout, LSTM, GRU\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras import utils\nimport matplotlib.pyplot as plt\n%matplotlib inline         \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e43443e":"test = pd.read_csv('..\/input\/npl-test\/test_tin.csv', encoding='cp1251')\ntrain = pd.read_csv('..\/input\/npl-test\/train_tin.csv', encoding='cp1251')\ndisplay(test.head(10))\ndisplay(train.sample(10))\n","d133931b":"train['isPositive'].value_counts()","839843ac":"# \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \nnum_words = 10000\n# \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043e\u0442\u0437\u044b\u0432\u0430\nmax_news_len = 30\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\nnb_classes = 2","316f9b31":"review = train['text']\nreview[:5]","7a5a5776":"y_tr = utils.to_categorical(train['isPositive'] - 1, nb_classes)\ny_tr","6d725879":"X_train, X_val, y_train, y_val = train_test_split(review, y_tr, test_size=0.2, random_state=42, stratify=train['isPositive'])","111e2661":"X_train.shape, y_train.shape, X_val.shape, y_val.shape","888e39dc":"tokenizer = Tokenizer(num_words=num_words)","d693fb5e":"tokenizer.fit_on_texts(X_train)","5620d407":"#tokenizer.word_index","98cb659c":"sequences = tokenizer.texts_to_sequences(X_train)","a65bd013":"index = 1\nprint(review[index])\nprint(sequences[index])","69ef0bd8":"x_train = pad_sequences(sequences, maxlen=max_news_len)","130a2876":"x_train[:5]","7be14940":"val_sequences = tokenizer.texts_to_sequences(X_val)\nx_val = pad_sequences(val_sequences, maxlen=max_news_len)","f2df5be4":"model_cnn = tf.keras.Sequential([\n    tf.keras.layers.Embedding(num_words, 32, input_length=max_news_len),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax'),\n])","01514fab":"# model_cnn = Sequential()\n# model_cnn.add(Embedding(num_words, 32, input_length=max_news_len))\n# model_cnn.add(Conv1D(250, 5, padding='valid', activation='relu'))\n# model_cnn.add(GlobalMaxPooling1D())\n# model_cnn.add(Dense(128, activation='relu'))\n# model_cnn.add(Dense(2, activation='softmax'))","3b3a7418":"model_cnn.compile(optimizer='adam', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])","48cf744f":"model_cnn.summary()","4346479d":"model_cnn_save_path = 'best_model_cnn.h5'\ncheckpoint_callback_cnn = ModelCheckpoint(model_cnn_save_path, \n                                      monitor='val_accuracy',\n                                      save_best_only=True,\n                                      verbose=1)","4dca7dec":"history_cnn = model_cnn.fit(x_train, \n                            y_train, \n                            epochs=10,\n                            batch_size=128,\n                            validation_split=0.1,\n                            callbacks=[checkpoint_callback_cnn])","2cc8048e":"plt.plot(history_cnn.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history_cnn.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","adabaa48":"model_cnn.load_weights(model_cnn_save_path)\nmodel_cnn.evaluate(x_val, y_val, verbose=1)","32f584ba":"model_lstm = Sequential()\nmodel_lstm.add(Embedding(num_words, 32, input_length=max_news_len))\nmodel_lstm.add(LSTM(16))\nmodel_lstm.add(Dense(2, activation='softmax'))","5188bc66":"model_lstm.compile(optimizer='adam', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])","a5dbc196":"model_lstm.summary()","9073d75d":"model_lstm_save_path = 'best_model_lstm.h5'\ncheckpoint_callback_lstm = ModelCheckpoint(model_lstm_save_path, \n                                      monitor='val_accuracy',\n                                      save_best_only=True,\n                                      verbose=1)","ad802c35":"history_lstm = model_lstm.fit(x_train, \n                              y_train, \n                              epochs=10,\n                              batch_size=128,\n                              validation_split=0.1,\n                              callbacks=[checkpoint_callback_lstm])","f06ea28a":"plt.plot(history_lstm.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history_lstm.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","c5c5def8":"model_lstm.load_weights(model_lstm_save_path)\nmodel_lstm.evaluate(x_val, y_val, verbose=1)","7a4a46df":"model_gru = Sequential()\nmodel_gru.add(Embedding(num_words, 32, input_length=max_news_len))\nmodel_gru.add(GRU(16))\nmodel_gru.add(Dense(2, activation='softmax'))","fc051dbc":"model_gru.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","15142620":"model_gru.summary()","eb731320":"model_gru_save_path = 'best_model_gru.h5'\ncheckpoint_callback_gru = ModelCheckpoint(model_gru_save_path, \n                                      monitor='val_accuracy',\n                                      save_best_only=True,\n                                      verbose=1)","771fe83f":"history_gru = model_gru.fit(x_train, \n                              y_train, \n                              epochs=10,\n                              batch_size=128,\n                              validation_split=0.1,\n                              callbacks=[checkpoint_callback_gru])","69a4f805":"plt.plot(history_gru.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history_gru.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","8e02ccff":"model_gru.load_weights(model_gru_save_path)\nmodel_gru.evaluate(x_val, y_val, verbose=1)","aa4447ea":"test_sequences = tokenizer.texts_to_sequences(test['text'])","5a7fa199":"x_test = pad_sequences(test_sequences, maxlen=max_news_len)","8c19a001":"x_test[:5]","194025ce":"model_cnn.load_weights(model_cnn_save_path)","02a9bfed":"y_test_cnn = np.round(model_cnn.predict(x_test),2)\ny_test_cnn[0:10]","87453a88":"model_lstm.load_weights(model_lstm_save_path)","54602920":"y_test_lstm = np.round(model_lstm.predict(x_test),2)\ny_test_lstm[0:10]","b8c2275e":"model_gru.load_weights(model_gru_save_path)","9d624aca":"y_test_gru = np.round(model_gru.predict(x_test),2)\ny_test_gru[0:10]","f5ec6e92":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport string\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import (precision_score, recall_score, precision_recall_curve)\nfrom sklearn.metrics import plot_precision_recall_curve\nfrom sklearn.model_selection import GridSearchCV\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import SnowballStemmer\nnltk.download('punkt')","76c81811":"test = pd.read_csv('..\/input\/npl-test\/test_tin.csv', encoding='cp1251')\ntrain = pd.read_csv('..\/input\/npl-test\/train_tin.csv', encoding='cp1251')\ndisplay(test.head(10))\ndisplay(train.sample(10))\n","753095ae":"train['isPositive'] = train['isPositive'].apply(int)","83eeb9fb":"train.head()","6eed7202":"train['isPositive'].value_counts()","449ca0f4":"for coment in train[train['isPositive'] == 1]['text'].head():\n    print(coment)","5bce375e":"for coment in train[train['isPositive'] == 0]['text'].head():\n    print(coment)","00eacbeb":"train_df, test_df = train_test_split(train, test_size=385)","750f9c37":"test_df.shape","4eed2006":"train_df['isPositive'].value_counts()","6f8b34b8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435\nsentence_example = train.iloc[1]['text']\n\n# \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u044b\ntokens = word_tokenize(sentence_example, language='russian')\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044e\ntokens_without_punctuation = [i for i in tokens if i not in string.punctuation]\n\n# \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432\u0430\nrussian_stop_words = stopwords.words('russian')\n\n# \u0443\u0434\u0430\u043b\u0438\u043c \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432\u0430\ntokens_without_stop_words_and_punctuation = [i for i in tokens_without_punctuation if i not in russian_stop_words]\n\n# \u0441\u0442\u0435\u043c\u043c\u0435\u0440\nsnowball = SnowballStemmer(language='russian')\n\n# \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443, \u0443\u0434\u0430\u043b\u0438\u043c \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f\nstemmed_tokens = [snowball.stem(i) for i in tokens_without_stop_words_and_punctuation]","f7d479b0":"print(f\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439: {sentence_example}\")\nprint()\nprint(f'Tokens: {tokens}')\nprint()\nprint(f'Tokens without punctiation: {tokens_without_punctuation}')\nprint()\nprint(f'Tokens without punctuation and stop words: {tokens_without_stop_words_and_punctuation}')\nprint()\nprint(f'Stemmed tokens: {stemmed_tokens}')","40b4c022":"snowball = SnowballStemmer(language='russian')\nrussian_stop_words = stopwords.words('russian')\n\ndef tokenize_text(text: str, remove_stop_words: bool = True):\n    tokens = word_tokenize(text, language='russian')\n    tokens = [i for i in tokens if i not in string.punctuation]\n    if remove_stop_words == True:\n        tokens = [i for i in tokens if i not in russian_stop_words]\n    tokens = [snowball.stem(i) for i in tokens]\n    return tokens\n","cb66bfc2":"tokenize_text(sentence_example)","2248cd40":"vectorizer = TfidfVectorizer(tokenizer = lambda x: tokenize_text(x, remove_stop_words=True))","a0ec45d8":"features = vectorizer.fit_transform(train_df['text'])","4c75b863":"model = LogisticRegression(random_state=42)\nmodel.fit(features, train_df['isPositive'])","971f6df0":"model.predict(features[0])","2d10ab27":"train_df['text'].iloc[0]","9738c8eb":"model_pipeline = Pipeline([\n        ('Vectorizer', TfidfVectorizer(tokenizer = lambda x: tokenize_text(x, remove_stop_words=True))),\n        ('Model', LogisticRegression(random_state=42))\n    \n]\n)","41378bc3":"model_pipeline.fit(train_df['text'], train_df['isPositive'])","6087c2a4":"model_pipeline.predict(['\u042d\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0431\u0430\u043d\u043a, \u044f \u0435\u0433\u043e \u0432\u0441\u0435\u043c \u0431\u0443\u0434\u0443 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c!'])","27c4b5ac":"model_pipeline.predict(['\u0421\u0430\u043c\u044b\u0439 \u0443\u0436\u0430\u0441\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0438\u0437 \u0432\u0441\u0435\u0445, \u0447\u0442\u043e \u044f \u0432\u0438\u0434\u0435\u043b'])","a8807a77":"precision_score(y_true=test_df['isPositive'], y_pred = model_pipeline.predict(test_df['text']))","afcb6b8c":"recall_score(y_true=test_df['isPositive'], y_pred = model_pipeline.predict(test_df['text']))","2f966450":"prec, rec, thresholds = precision_recall_curve(y_true=test_df['isPositive'], probas_pred=model_pipeline.predict_proba(test_df['text'])[:,1])","7357345d":"plot_precision_recall_curve(estimator=model_pipeline, X=test_df['text'], y=test_df['isPositive']);","cd8cb684":"np.where(prec > 0.98)","0d7a7972":"thresholds[139]","794114e9":"precision_score(y_true=test_df['isPositive'], y_pred=model_pipeline.predict_proba(test_df['text'])[:,1] > thresholds[139])","328e2dd7":"recall_score(y_true=test_df['isPositive'], y_pred=model_pipeline.predict_proba(test_df['text'])[:,1] > thresholds[139])","450dd601":"grid_pipeline = Pipeline([\n    ('Vectorizer', TfidfVectorizer(tokenizer=lambda x: tokenize_text(x, remove_stop_words=True))),\n    ('model',\n        GridSearchCV(\n            LogisticRegression(random_state=42),\n            param_grid={\n                'C': [0.1, 1, 10],\n                'penalty':['l1','l2', 'elasticnet','none']\n            },\n            cv=3,\n            verbose=4\n        )\n    )\n])","a5593f43":"grid_pipeline.fit(train_df['text'], train_df['isPositive'])","5b361ec9":"model_pipeline_grid = Pipeline([\n    ('Vectorizer', TfidfVectorizer(tokenizer=lambda x: tokenize_text(x, remove_stop_words=True))),\n    ('model', LogisticRegression(random_state=42, C=10.0, penalty='none')) \n    ]\n)","805161ec":"model_pipeline_grid.fit(train_df['text'], train_df['isPositive'])","ea46fcee":"prec_grid, rec_grid, thresholds_grid = precision_recall_curve(y_true=test_df['isPositive'], probas_pred=model_pipeline_grid.predict_proba(test_df['text'])[:,1])","8071eb18":"plot_precision_recall_curve(estimator=model_pipeline_grid, X=test_df['text'], y=test_df['isPositive']);","d1884681":"np.where(prec_grid > 0.98)","dc93dfff":"precision_score(y_true=test_df['isPositive'], y_pred=model_pipeline_grid.predict_proba(test_df['text'])[:,1] > thresholds[100])","4522fc03":"recall_score(y_true=test_df['isPositive'], y_pred=model_pipeline_grid.predict_proba(test_df['text'])[:,1] > thresholds[100])","264724c0":"# \u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u0430\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u0441\u0435\u0442\u044c","c02bd2d1":"## \u0418\u0434\u0435\u0438 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f:\n* \u0418\u0433\u0440\u0430 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n* \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u043d\u043a\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 (\u0443\u0431\u0440\u0430\u0442\u044c \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f, \u043f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0438, \u0441\u043e\u044e\u0437\u044b, \u043f\u0440\u0435\u0434\u043b\u043e\u0433\u0438)","0bdecbc2":"## \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0440\u0443\u043a\u0430\u043c\u0438","98f3991a":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0438\u0445","4d3053ab":"\u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430","8d6eae7e":"\u0422\u043e\u043a\u0435\u043d\u0430\u0439\u0437\u0435\u0440 \u0438\u0437 \u041a\u0435\u0440\u0430\u0441","7bc42d29":"# \u0421\u0435\u0442\u044c LSTM","c049118b":"## \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","e24da5b6":"# \u0421\u0435\u0442\u044c GRU","a54e677c":"# \u042d\u0442\u043e \u0431\u044b\u043b \u043d\u0430\u0448 Baseline\n\n### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c","d1f22048":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c callback \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u044d\u043f\u043e\u0445\u0435, \u0435\u0441\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\u0441\u044c. \u0421\u0435\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b best_model.h5","6ba83511":"# C\u0435\u0442\u044c LSTM","99e0565a":"# \u0422\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u044f","31d2a7c8":"## \u041e\u0431\u0435\u0440\u043d\u0435\u043c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e","365b0719":"\u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b","2c5a98c3":"# \u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c","a676ee94":"# \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c","b1662d21":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0442\u0437\u044b\u0432\u044b \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435","bdb5462b":"## \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0430","8f271d86":"# \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0442\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","73cb7909":"# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","841989f1":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438","54bab5e0":"\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n* isPositive = 1   ---> [1., 0.]\n* isPositive = 0   ---> [0., 1.]","91fe60d4":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432","e0972d8a":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c","ac6e2db4":"### \u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043f\u043e\u0440\u043e\u0433\u043e\u043c","49537ce6":"## \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442","92d969e9":"# \u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\n\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n* \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0442\u0440\u0435\u0439\u043d\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 (\u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u044f)\n* \u041f\u043e \u043d\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n* \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0431\u0443\u0447\u0438\u0432\u0448\u0438\u0441\u044c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0432\u0448\u0438\u0441\u044c \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n* \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n* \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\n* \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u0435\u0441\u0442\n* \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","ee594ac4":"# TRAIN","1fa329ef":"# C\u0435\u0442\u044c GRU"}}