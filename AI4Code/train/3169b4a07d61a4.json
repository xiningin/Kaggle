{"cell_type":{"d91f9dfd":"code","5c4f1cff":"code","36b65f08":"code","0a55d331":"code","06587cde":"code","0f6c6fd7":"code","7e6c15e0":"code","5964da80":"code","80774cb9":"code","8e8d4c09":"code","e4a1fc41":"code","4d812114":"code","c90bca14":"code","92bb0326":"code","eeaf740b":"code","b5afe6e6":"code","2e20f612":"code","a78279cf":"code","c6f9c675":"code","b4a830a1":"code","c02fae95":"code","ed7548f4":"code","4c2910d1":"code","9dd09589":"code","01cd5b80":"code","e5e4f555":"code","94fa8545":"code","1b8b2865":"code","dd6260dd":"markdown","c5dd84a4":"markdown","7d784184":"markdown","66063646":"markdown","bc188bf3":"markdown","2cc1d358":"markdown","d94b0a68":"markdown","8fd93054":"markdown","29563db5":"markdown","1094b302":"markdown","24d07deb":"markdown","de036047":"markdown","8124e353":"markdown","ba69c2b9":"markdown","1fe386f1":"markdown","f71f211c":"markdown","8581e2ab":"markdown","1a0b6f4b":"markdown"},"source":{"d91f9dfd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5c4f1cff":"train=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntrain","36b65f08":"test=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ntest","0a55d331":"train.info()","06587cde":"train.isna().sum()","0f6c6fd7":"#% of null values\ndata_percentage=print('percentage of missing values'.upper())\ntrain.isna().sum()\/train.shape[0]*100","7e6c15e0":"for i in range(118):\n    train['f'+str(i+1)].fillna(train['f'+str(i+1)].mean(), inplace = True)","5964da80":"train.isna().sum()","80774cb9":"def skew_kurt(column, data = train):\n    sns.displot(x = column, data = data, kde = True)\n    skewness=str(data[column].skew())\n    kurtosis=str(data[column].kurt())\n    plt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\n    plt.show()\nskew_kurt('f1')    ","8e8d4c09":"def skew_kurt(column, data = train):\n    sns.displot(x = column, data = data, kde = True)\n    skewness=str(data[column].skew())\n    kurtosis=str(data[column].kurt())\n    plt.legend([skewness,kurtosis],title=(\"skewness and kurtosis\"))\n    plt.show()\nskew_kurt('f100')    ","e4a1fc41":"corr = train.corr()\nplt.figure(figsize=(30, 30))\nsns.heatmap(corr)\nplt.show()","4d812114":"# copy of datasets\nfrom sklearn.preprocessing import StandardScaler\nx_train_stand =  train.iloc[:,1:119]\nx_test_stand  = test.drop (['id'], axis=1)\nnum_cols = x_train_stand.columns\nfor i in num_cols:\n    scale = StandardScaler()\n    x_train_stand[i] = scale.fit_transform(x_train_stand[[i]])\n    x_test_stand[i] = scale.transform(x_test_stand[[i]])\n    \n# adding claim column back \nx_train_stand[\"claim\"] = train[\"claim\"]","c90bca14":"X = train.drop('claim', axis=1).values\ny = train['claim'].values","92bb0326":"#splitting the dataset into train and test set.\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 31)","eeaf740b":"len(x_train), len(x_test), len(y_train), len(y_test)","b5afe6e6":"x_train.shape, y_train.shape","2e20f612":"from sklearn.tree import  DecisionTreeClassifier\nmodel_dt=DecisionTreeClassifier()\nmodel_dt.fit(x_train,y_train)\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\ny_pred = model_dt.predict(x_test)\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","a78279cf":"from sklearn.naive_bayes import GaussianNB\nmodel_nb = GaussianNB()\nmodel_nb.fit(x_train,y_train)\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\ny_pred = model_nb.predict(x_test)\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","c6f9c675":"#install_packages \nimport h2o\nfrom h2o.automl import H2OAutoML \nh2o.init() # h2o initialization ","b4a830a1":"train_data= h2o.H2OFrame(train) # convert to h2o frame\ntest_data = h2o.H2OFrame(test) # convert to h2o frame ","c02fae95":"X = train.drop('claim', axis=1).values\ny = train['claim'].values","ed7548f4":"auto_ml = H2OAutoML( \n    nfolds=5, # use 5 folds \n    seed = 1222,\n    max_models = 10,\n    include_algos = [\"XGBoost\" ,\"StackedEnsemble\",\"GBM\"],\n    max_runtime_secs=3600*2,  #time in sec , if set to much high value may give high score around 0.80...\n    stopping_metric='AUC'\n    )\nauto_ml.train(x=X, y=y, training_frame=train_data)","4c2910d1":"# check leaderboard\nleader = auto_ml.leaderboard\nleader","9dd09589":"model = h2o.get_model(leader[2,\"model_id\"]) # get gbm model \nmodel.varimp_plot()","01cd5b80":"preds = auto_ml.leader.predict(test)","e5e4f555":"submission=pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsubmission","94fa8545":"## create submission\nsubmission = pd.DataFrame({\n    'id': test['id'].as_data_frame().id,\n    'claim': preds.as_data_frame().predict\n})\nsubmission.head()","1b8b2865":"# save submission\nsubmission.to_csv('tps_submission.csv', index=False)","dd6260dd":"# Feature Transformation","c5dd84a4":"# Splitting the dataset","7d784184":"# 3]KNN","66063646":"# Load The Dataset","bc188bf3":"from sklearn.neighbors  import KNeighborsClassifier\nmodel_knn = KNeighborsClassifier(n_neighbors=3)\nmodel_knn.fit(x_train,y_train)\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\ny_pred = model_knn.predict(x_test)\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","2cc1d358":"Skewness and Kurtosis","d94b0a68":"Correlation","8fd93054":"# EDA","29563db5":"Null values","1094b302":"# Import the libraries","24d07deb":"important models","de036047":"# 2]GAUSSIAN NB","8124e353":"# Model Building Algorithms","ba69c2b9":"# SUBMISSION","1fe386f1":"# AUTO ML using H2o","f71f211c":"from tqdm import tqdm\nplt.figure(figsize=(24, 6*(118\/4)))\nfor i in tqdm(range(len(train.columns.tolist())-1)):\n    plt.subplot(30, 4, i+1)\n    sns.histplot(train[f'f{i+1}'], kde=True)\n    sns.histplot(test[f'f{i+1}'], kde=True, color='red')\nplt.show()","8581e2ab":"# 1]DECISION TREE","1a0b6f4b":"predictions"}}