{"cell_type":{"acb11548":"code","42a93011":"code","5f8c5355":"code","48e355b9":"code","71e18237":"code","33bc010c":"code","87e74205":"code","7d7c6a13":"code","11738c94":"code","c987404e":"code","4d7970b9":"code","30875e59":"code","4cbc4d6a":"code","a14d372c":"code","43f386e7":"code","084541d1":"code","756b0ad5":"code","6cf70a27":"code","133bac23":"code","2c65bc0d":"code","fd233464":"code","3fcf3286":"code","670c38a4":"code","acb2cb1e":"code","4de182b5":"code","f9f58414":"code","8e13d58a":"code","e243aa86":"code","b41c0f87":"code","a73c5dc7":"markdown","71b82d2f":"markdown","10cea691":"markdown","f3ba534f":"markdown","d79fcfb3":"markdown","f3553e51":"markdown","0055eeae":"markdown","d8e71896":"markdown"},"source":{"acb11548":"from math import ceil\nfrom pathlib import Path\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n%matplotlib inline","42a93011":"df_train = pd.read_csv('\/kaggle\/input\/global-wheat-detection\/train.csv')  \npath_train_image_dir = Path('\/kaggle\/input\/global-wheat-detection\/train\/')","5f8c5355":"df_train.head(5)","48e355b9":"df_train['bbox'][0]","71e18237":"type(df_train['bbox'][0])","33bc010c":"bboxes = np.stack(df_train['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))","87e74205":"for i, column in enumerate(['x_min', 'y_min', 'width', 'height']):\n    df_train[column] = bboxes[:,i]\n    \ndf_train[\"x_max\"] = df_train.apply(lambda col: col.x_min + col.width, axis=1)\ndf_train[\"y_max\"] = df_train.apply(lambda col: col.y_min + col.height, axis = 1)\ndf_train.drop(columns=['bbox'], inplace=True)","7d7c6a13":"df_train.head()","11738c94":"display(df_train[df_train[\"x_max\"] > 1024])\ndisplay(df_train[df_train[\"y_max\"] > 1024])\ndisplay(df_train[df_train[\"x_min\"] < 0])\ndisplay(df_train[df_train[\"y_min\"] < 0])","c987404e":"list_image_filepath = list(path_train_image_dir.glob('*.jpg'))\nlen(list_image_filepath)","4d7970b9":"list_image_conf = list()\nfor idx, image_filepath in enumerate(list_image_filepath): \n    image = cv2.imread(str(image_filepath))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    width = image.shape[0]\n    height = image.shape[1]\n    area = width * height\n    list_image_conf.append(pd.Series(\n        [image_filepath.stem, width, height, area], \n        index=['filename', 'width', 'height', 'area']\n    ))\n    \ndf_image_conf = pd.concat(list_image_conf, axis=1).T\n    ","30875e59":"df_image_conf.head(5)","4cbc4d6a":"df_image_conf['width'].value_counts()","a14d372c":"df_image_conf['height'].value_counts()","43f386e7":"df_image_conf['area'].value_counts()","084541d1":"df_train[['x_min', 'x_max', 'y_min', 'y_max']].max()","756b0ad5":"len(df_train)","6cf70a27":"df_train.iloc[31785]","133bac23":"df_train = pd.read_csv('\/kaggle\/input\/global-wheat-detection\/train.csv') \nbboxes = np.stack(df_train['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))","2c65bc0d":"bboxes = np.round(bboxes)\ndisplay(bboxes[:5])","fd233464":"for i, column in enumerate(['x_min', 'y_min', 'width', 'height']):\n    df_train[column] = bboxes[:,i]\n    \ndf_train[['x_min', 'y_min', 'width', 'height']] = df_train[['x_min', 'y_min', 'width', 'height']].astype(int)\ndf_train.dtypes","3fcf3286":"df_train[\"x_max\"] = df_train.apply(lambda col: col.x_min + col.width, axis=1)\ndf_train[\"y_max\"] = df_train.apply(lambda col: col.y_min + col.height, axis = 1)\ndf_train.drop(columns=['bbox'], inplace=True)\n\ndisplay(df_train.head(5))\ndisplay(df_train.dtypes)","670c38a4":"display(df_train[df_train[\"x_max\"] > 1024])\ndisplay(df_train[df_train[\"y_max\"] > 1024])\ndisplay(df_train[df_train[\"x_min\"] < 0])\ndisplay(df_train[df_train[\"y_min\"] < 0])","acb2cb1e":"df_train['class'] = 1","4de182b5":"df_train['image_filename'] = df_train['image_id'].apply(lambda x: f'{x}.jpg')","f9f58414":"def plot_random_images(image_folder_path, df_image_annotation, num = 12):\n    img_dict = {}\n    list_image_name = df_image_annotation['image_filename'].unique().tolist()\n\n    # randomly choose 12 image.\n    img_files_list = np.random.choice(list_image_name, num)\n\n    img_matrix_list = []\n    for img_file in img_files_list:\n        image_file_path = image_folder_path\/img_file\n        img = cv2.imread(str(image_file_path))\n        img_matrix_list.append(img)\n\n    fig, axes = plt.subplots(ceil(num \/ 4), 4, figsize=(12, 9))\n    for idx, image in enumerate(img_matrix_list):\n        idx_row = idx \/\/ 4\n        idx_col = idx % 4\n        axes[idx_row][idx_col].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n        axes[idx_row][idx_col].set_title(img_files_list[idx])\n        \n    plt.tight_layout()\n    plt.show()\n    plt.close()","8e13d58a":"plot_random_images(path_train_image_dir, df_train, num=12)","e243aa86":"def draw_rect(image, arr_bboxes, color=(0, 0, 255)):\n    for idx, bbox in enumerate(arr_bboxes): \n        image = cv2.rectangle(image, (bbox[0], bbox[1]), (bbox[2], bbox[3]), color, 3)\n        \n    return image\n\ndef plot_random_images_bbox(image_folder_path, df_image_annotation, num = 12):\n    img_dict = {}\n    for idx in range(len(df_image_annotation)):\n        image_name = df_image_annotation['image_filename'][idx]\n        x_min = df_image_annotation['x_min'][idx]\n        y_min = df_image_annotation['y_min'][idx]\n        x_max = df_image_annotation['x_max'][idx]\n        y_max = df_image_annotation['y_max'][idx]\n\n        if image_name not in img_dict:\n            img_dict[image_name] = list()\n        img_dict[image_name].append([x_min, y_min, x_max, y_max])\n\n    # randomly choose 12 image.\n    img_files_list = np.random.choice(list(img_dict.keys()), num)\n\n    bbox_list = []\n    img_matrix_list = []\n    \n    for img_file in img_files_list:\n        image_file_path = image_folder_path\/img_file\n        img = cv2.imread(str(image_file_path))\n        bbox_list.append(img_dict[img_file])\n        img_matrix_list.append(img)\n\n    final_bbox_list = []\n    for bboxes, img in zip(bbox_list, img_matrix_list):\n        final_bbox_array = np.array([])\n        for bbox in bboxes:\n            bbox = np.array(bbox).reshape(1,4)\n            final_bbox_array = np.append(final_bbox_array, bbox)\n        final_bbox_array = final_bbox_array.reshape(-1,4).astype(int)\n        image_with_bboxes = draw_rect(img.copy(), final_bbox_array.copy(), color=(0, 0, 255))\n        final_bbox_list.append(image_with_bboxes)\n\n    fig, axes = plt.subplots(ceil(num \/ 4), 4, figsize=(12, 9))\n    for idx, image in enumerate(final_bbox_list):\n        idx_row = idx \/\/ 4\n        idx_col = idx % 4\n        axes[idx_row][idx_col].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n        axes[idx_row][idx_col].set_title(img_files_list[idx])\n        \n    plt.tight_layout()\n    plt.show()\n    plt.close()","b41c0f87":"plot_random_images_bbox(path_train_image_dir, df_train, num=12)","a73c5dc7":"Width, height, x_min, y_min are to be rounded in advance.","71b82d2f":"## Check image size","10cea691":"## Import train image and bboxes","f3ba534f":"### transform ['x_min', 'y_min', 'width', 'height'] to ['x_min', 'y_min', 'x_max', 'y_max']","d79fcfb3":"These sizes are consistent.","f3553e51":"## Check anormal range","0055eeae":"## Plot images","d8e71896":"### transform string ('[x_min, y_min, width, height]') to array"}}