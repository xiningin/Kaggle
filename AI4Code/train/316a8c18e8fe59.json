{"cell_type":{"00744329":"code","2fa908a8":"code","6cfd11f3":"code","66890ec7":"code","14acb5a4":"code","91ba28ec":"code","5861a111":"code","634be9cb":"code","0dfa9a02":"code","10b72247":"code","35e87daa":"code","32015436":"code","3985a4ef":"code","18ec6bd4":"code","f199b5eb":"code","cfc52942":"code","ed014f87":"code","fa0cc608":"code","c9153200":"code","fe7a7eee":"code","e76d5793":"markdown","baa3126a":"markdown","b13fad98":"markdown","c1ba82a5":"markdown","e82cf165":"markdown","de64d379":"markdown","c571c8b4":"markdown"},"source":{"00744329":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2fa908a8":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.image import imread\nsns.set_style('darkgrid')\n\n%matplotlib inline","6cfd11f3":"doc='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images'\n","66890ec7":"os.listdir(doc)","14acb5a4":"dim1=[]\ndim2=[]\ncolor=[]\nfor img_f in os.listdir(doc):\n    for j in os.listdir(\"\/\".join([doc,img_f])):\n        if(j[-2:]!=\"db\"):\n            img=imread(\"\/\".join([doc,img_f,j]))\n            d1,d2,color1=img.shape\n            dim1.append(d1)\n            dim2.append(d2)\n            color.append(color1)\n\n","91ba28ec":"sns.jointplot(x=dim1,y=dim2)\n\nprint(f\"Median = {(np.median(dim1),np.median(dim2))}\")\nprint(f'COLOR= {np.mean(color)}')\nprint(f\"Mean = {(np.mean(dim1),np.mean(dim2))}\")","5861a111":"target_var=(int(np.median(dim1)),int(np.median(dim2)),int(np.mean(color)))","634be9cb":"(target_var)","0dfa9a02":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nimgen=ImageDataGenerator(rotation_range=20,\n                         width_shift_range=0.1,\n                         height_shift_range=0.1,\n                         shear_range=0.1,\n                         zoom_range=0.1,\n                         horizontal_flip=True,\n                         fill_mode='nearest',\n                        validation_split=0.2)\nimgen1=ImageDataGenerator(validation_split=0.2)","10b72247":"para=imread('..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_162.png')\nplt.imshow(para)","35e87daa":"train_data=imgen.flow_from_directory(directory=doc, \n                                               target_size=target_var[:2], \n                                               class_mode='categorical', \n                                               color_mode='rgb', \n                                               batch_size=64, \n                                               subset='training',\n                                               shuffle=True)\nval_data=imgen.flow_from_directory(directory=doc, \n                                               target_size=target_var[:2], \n                                               class_mode='categorical', \n                                               color_mode='rgb', \n                                               batch_size=64, \n                                               subset='validation',\n                                               shuffle=True)\n\ntest_data=imgen1.flow_from_directory(directory=doc, \n                                             target_size=target_var[:2], \n                                             class_mode='categorical',\n                                             color_mode='rgb', \n                                             batch_size=64, \n                                             subset='validation')","32015436":"train_data.class_indices","3985a4ef":"target_var[:2]","18ec6bd4":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\ne=EarlyStopping(patience=5,verbose=1)","f199b5eb":"model=Sequential()\n\nmodel.add(Conv2D(filters=32,kernel_size=5,input_shape=target_var,activation='relu'))\nmodel.add(MaxPool2D(pool_size=2,strides=4))\n\nmodel.add(Conv2D(filters=64,kernel_size=5,input_shape=target_var,activation='relu'))\nmodel.add(MaxPool2D(pool_size=2,strides=4))\n\nmodel.add(Conv2D(filters=128,kernel_size=3,input_shape=target_var,activation='relu',padding='same'))\nmodel.add(Conv2D(filters=128,kernel_size=3,input_shape=target_var,activation='relu',padding='same'))\nmodel.add(Conv2D(filters=128,kernel_size=3,input_shape=target_var,activation='relu',padding='same'))\n\n# model.add(MaxPool2D(pool_size=2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512,activation='relu'))\n\n# model.add(Dropout(0.5))\n\nmodel.add(Dense(2,activation='softmax'))","cfc52942":"model.summary()","ed014f87":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","fa0cc608":"results=model.fit(x=train_data,\n                  epochs=50,\n                  validation_data=val_data,\n                  callbacks=[e])","c9153200":"model.evaluate(x=test_data)","fe7a7eee":"d1=pd.DataFrame(results.history)\nd1.plot()","e76d5793":"# Model Eval","baa3126a":"# Paths","b13fad98":"# Dimension checking","c1ba82a5":"# Model Buliding","e82cf165":"# Import package","de64d379":"# Tensorflow images","c571c8b4":"# Test analysis"}}