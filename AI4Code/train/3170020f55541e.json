{"cell_type":{"5007314b":"code","57a38569":"code","33b8a70d":"code","4443c2df":"code","396f53f4":"code","e3d49108":"code","9f303e4d":"code","0b01867f":"code","e3fc7a08":"code","f4551c96":"code","65ba8fc6":"code","50c1a6d6":"code","0c3c78d6":"code","73a7a796":"code","eddbab33":"code","7562275f":"code","85867c7c":"code","6c598d7e":"code","4364aa44":"code","0d1dfcc9":"code","6d33bcb9":"code","a3acc515":"code","d8ea5c3d":"code","b63f47f4":"code","6d56dc31":"code","f950c872":"code","93d03822":"code","21b9c1ea":"code","818f4f84":"code","430e7458":"code","6b41d0a3":"code","9137d80d":"code","b49f2530":"code","4c4cf411":"code","a6141a92":"markdown","62289de1":"markdown","3d993853":"markdown","1ff1a92c":"markdown","b3abb619":"markdown","856f9a96":"markdown","e38a8ba0":"markdown","1a0a64dd":"markdown","e9c5a75e":"markdown","d561c5c7":"markdown","c66be85f":"markdown","94e510f3":"markdown","691e2579":"markdown","fe28e212":"markdown","73267845":"markdown","d8e3098c":"markdown","564a3c73":"markdown","b02874c2":"markdown","9860ff83":"markdown"},"source":{"5007314b":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport re\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import export_graphviz  \nimport graphviz","57a38569":"df = pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv') #reading csv file","33b8a70d":"df.head(10) #first ten data from data set","4443c2df":"df.info() #to see datatype","396f53f4":"df['horsepower'].unique()","e3d49108":"df['horsepower'] = df['horsepower'].replace('?', np.NaN).astype(np.float)","9f303e4d":"df['horsepower'].dtype","0b01867f":"df['horsepower'].isnull().sum()","e3fc7a08":"df['horsepower'].fillna(df['horsepower'].mean(), inplace = True)","f4551c96":"df['make'] = df['car name'].apply(lambda x : re.match(r'^\\w+',x).group(0))","65ba8fc6":"df['make']","50c1a6d6":"df","0c3c78d6":"dataset = df.drop('car name', axis = 1)","73a7a796":"dataset","eddbab33":"plt.figure(figsize=(12,6))\nsns.heatmap(dataset.corr(), annot = True)","7562275f":"sns.pairplot(dataset)","85867c7c":"X = dataset.drop('mpg', axis = 1)\ny = dataset['mpg']","6c598d7e":"sns.regplot(x='cylinders', y='mpg',data=dataset, line_kws={\"color\": \"red\"})\nplt.show()","4364aa44":"sns.regplot(x='displacement', y='mpg',data=dataset, line_kws={\"color\": \"red\"})\nplt.show()","0d1dfcc9":"dataset['displacement'] = np.log(dataset['displacement'])\nsns.regplot(x='displacement', y='mpg',data=dataset, line_kws={\"color\": \"red\"})\nplt.show()","6d33bcb9":"sns.regplot(x='weight', y='mpg',data=dataset, line_kws={\"color\": \"red\"})\n#plt.plot(scatter_kws='r')\nplt.show()","a3acc515":"dataset['weight'] = np.log(dataset['weight']) \nsns.regplot(x='weight', y='mpg',data=dataset, line_kws={\"color\": \"red\"})\nplt.show()","d8ea5c3d":"feature = ['cylinders', 'displacement', 'weight']\nX[feature] = np.log(X[feature])\ny = np.log(y)\nX[feature]","b63f47f4":"X_train, X_test, y_train, y_test = train_test_split(X[feature], y, train_size = 0.7, random_state = 1)","6d56dc31":"Linear_Model = LinearRegression()\nLinear_Model.fit(X_train, y_train)\ny_predict = Linear_Model.predict(X_test)","f950c872":"#print(mean_squared_error(y_test, y_predict))\nprint(r2_score(y_test, y_predict))\n#print(Linear_Model.score(X_train, y_train))","93d03822":"dataset.columns","21b9c1ea":"feature_all = ['cylinders', 'displacement', 'weight','horsepower','acceleration', 'model year', 'origin']\nX_all = dataset[feature_all]\ny_all = np.log(dataset['mpg'])","818f4f84":"X_all_train, X_all_test, y_all_train, y_all_test = train_test_split(X_all, y_all, train_size=0.7, random_state = 1 ) ","430e7458":"Linear_Model.fit(X_all_train, y_all_train)\ny_all_predict = Linear_Model.predict(X_all_test)","6b41d0a3":"#print(mean_squared_error(y_all_test, y_all_predict))\nprint('linear model r2 score: ',r2_score(y_all_test, y_all_predict))\n#print(Linear_Model.score(X_all_train, y_all_train))","9137d80d":"tree_model = DecisionTreeRegressor(criterion='mse', max_depth = 5)\ntree_model.fit(X_all_train, y_all_train)\n#print('tree model score: ',tree_model.score(X_all_train, y_all_train))\nprint('tree model r2 score: ', r2_score(y_all_test, y_all_predict))","b49f2530":"#tree_graph = export_graphviz(tree_model, out_file= None, max_depth = 5, filled=True, rounded=True, \n    #                         special_characters=True, feature_names = feature)\n#graphviz.Source(tree_graph)","4c4cf411":"rf_model = RandomForestRegressor()\nrf_model.fit(X_all_train, y_all_train)\n#print('rf model score: ',rf_model.score(X_all_train, y_all_train))\nprint('rf model r2 score: ', r2_score(y_all_test, y_all_predict))","a6141a92":"'**horsepower**' datatype is converted from object type to **float type**","62289de1":"If we consider all features...","3d993853":"**mpg** is strongly correlated with **cylinders, displacement, weight**","1ff1a92c":"Let's split the dataset into train set and and test set ","b3abb619":"scatters seem have non linearity.. we can log transformation to make relation Linear","856f9a96":"# Overview of Dataset","e38a8ba0":"# Feature extraction","1a0a64dd":"Let's fit our dataset into linear regression model and predict...","e9c5a75e":"# Linear Model","d561c5c7":"**'?'** is not a **value**. It should be removed by a **float value**. ","c66be85f":"'**horsepower**' and '**car name**' have object values. We need to convert '**horsepower**' into float value. Again '**car name**' columns has object value, we need to extract the exact name of the car. ","94e510f3":"It's time to extract the **car name** from a **long string data**..","691e2579":"let's see the **correlation** between the features by a **heatmap**","fe28e212":"so we have **6 null values**. we need to fill them with **mean**","73267845":"we successfully replaced null values with **mean** ","d8e3098c":"# Decision Tree Model","564a3c73":"**cylinders, displacement, weight** are linearly correlated with **mpg**. We can apply **Regression Algorithm** to predict** mpg**","b02874c2":"# Random Forest Regressor","9860ff83":"lets see the **pair plot** to see the relation between the **features**"}}