{"cell_type":{"4108d2bf":"code","3ebd5799":"code","d1d371dc":"code","05e826f9":"code","19a5f1eb":"code","73e41ba5":"code","0451907a":"code","2193a7ca":"code","33a9ee05":"code","79ee381e":"code","9faad6d9":"code","8e62d1e5":"markdown","dd8f872b":"markdown","e1907f61":"markdown","740e4f70":"markdown","5b172b67":"markdown","3df78524":"markdown","3660fcc5":"markdown","1315ef71":"markdown"},"source":{"4108d2bf":"import datetime as dt\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport pandas as pd\nimport pandas_datareader.data as web\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport matplotlib.dates as mdates\nfrom plotly import tools\nimport plotly.figure_factory as ff\nfrom collections import Counter","3ebd5799":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\ndf = pd.read_csv('..\/input\/all_stocks_5yr.csv')\ndf['date'] = pd.to_datetime(df['date'])\ndf.head()\n\n# Any results you write to the current directory are saved as output.","d1d371dc":"plt.figure(figsize=(15, 5));\nplt.subplot(1,2,1);\nplt.plot(df[df.Name == 'AAPL'].open.values, color='red', label='open')\nplt.plot(df[df.Name == 'AAPL'].close.values, color='green', label='close')\nplt.plot(df[df.Name == 'AAPL'].low.values, color='blue', label='low')\nplt.plot(df[df.Name == 'AAPL'].high.values, color='black', label='high')\nplt.title('stock price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.legend(loc='best')\n#plt.show()\n\nplt.subplot(1,2,2);\nplt.plot(df[df.Name == 'AAPL'].volume.values, color='black', label='volume')\nplt.title('stock volume')\nplt.xlabel('time [days]')\nplt.ylabel('volume')\nplt.legend(loc='best');","05e826f9":"df_pivot=df.pivot(index='date', columns='Name', values='close')\ndf_pivot.head()","19a5f1eb":"def visualize_data():\n\n    df_corr = df_pivot.corr()\n    data = df_corr.values\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    \n    heatmap = ax.pcolor(data, cmap = plt.cm.RdYlGn)\n    fig.colorbar(heatmap)\n    ax.set_xticks(np.arange(data.shape[0]+0.5,minor = False))\n    ax.set_yticks(np.arange(data.shape[1]+0.5,minor = False))\n    ax.invert_yaxis()\n    ax.xaxis.ticks_top()\n    \n    column_labels = df_corr.columns\n    row_labels = df_corr.index\n    \n    ax.set_xticklabels(column_labels)\n    ax.set_ylabels(row_labels)\n    plt.xticks(rotation = 90)\n    heatmap.set_clim(-1,1)\n    plt.tight_layout()\n    plt.show\n    \n    #print(df_corr.head())\n    \nvisualize_data()","73e41ba5":"def process_data_for_labels(ticker):\n    hm_days = 7\n    \n    tickers = df_pivot.columns.values.tolist()\n    df_pivot.fillna(0, inplace = True)\n    \n    for i in range(1, hm_days+1): #we add 1 to hm_days as it starts from 0\n        #Custon colum which gives i days in the future the value of the \n        # stock in percentchange\n        df_pivot['{}_{}d'.format(ticker,i)] = (df_pivot[ticker].shift(-i)- df_pivot[ticker])\/df_pivot[ticker]\n        \n    df_pivot.fillna(0,inplace = True)\n    \n    return tickers,df_pivot\nprocess_data_for_labels('AAPL')","0451907a":"df.head()","2193a7ca":"def buy_sell_hold(*args): # *args lets you pass any number of parameter\n    cols = [c for c in args]#if you pass collumns this will go row by row\n    # here we will pass the whole week of percent changes\n    requirement = 0.02\n    #if our stock prices changes more than 2% in the next seven days\n    for col in cols:\n        if col > 0.028:\n            return 1 #buy\n        if col < -0.027 :\n            return -1 #sell\n        \n    return 0 #hold","33a9ee05":"def extract_featuresets(ticker):\n    tickers, df_pivot =  process_data_for_labels(ticker)# returns the tickers and a df with features(% change in price)\n\n    df_pivot['{}_target'.format(ticker)] = list(map(buy_sell_hold,df_pivot['{}_1d'.format(ticker)],\n                                                            df_pivot['{}_2d'.format(ticker)],\n                                                            df_pivot['{}_3d'.format(ticker)],\n                                                            df_pivot['{}_4d'.format(ticker)],\n                                                            df_pivot['{}_5d'.format(ticker)],\n                                                            df_pivot['{}_6d'.format(ticker)],\n                                                            df_pivot['{}_7d'.format(ticker)]))\n    vals = df_pivot['{}_target'.format(ticker)].values.tolist()\n    str_vals = [str(i) for i in vals]\n    print('Data spread:', Counter(str_vals)) # this will give the distribution\n    # eg 1500 may br buy 800 may be sell, basically we will have more buy than sell\n    # we want to see the spread, we want to see how acurate is our classifier\n    # because we need to beat buy buybuy\n    \n    df_pivot.fillna(0, inplace= True)\n    df_pivot = df_pivot.replace([np.inf, -np.inf],np.nan)# say if the the company went out of bussiness or if the\n    #company just came to the market we put nan\n    \n    df_pivot.dropna(inplace = True)\n    \n    # create the feature sets and labels seperately\n    df_vals = df_pivot[[ticker for ticker in tickers]].pct_change()\n    df_vals = df_vals.replace([np.inf, -np.inf], 0)\n    df_vals.fillna(0, inplace =True)\n    \n    # if you pass future values to the classifier as one of the featers\n    # the classifer will learn this is important and will give you a false postive\n    # be explicit which columns are the classifiers or you will get a very high accuracy\n    X = df_vals.values\n    y = df_pivot['{}_target'.format(ticker)].values\n    \n    return X, y, df\n\nextract_featuresets('AAPL')","79ee381e":"from sklearn import svm, neighbors \nfrom sklearn import model_selection\n# cross validate helps shuffle and divide traning and testing data\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\n# Voting Classifier not one classifier but many classifier and vote to see which is best","9faad6d9":"# final function for doing typical machine learning\ndef do_ml(ticker):\n    X,y,df = extract_featuresets(ticker)\n# X is the percent change data for all the companies\n# y is the target _1,0,1\n    X_train,X_test,y_train,y_test = model_selection.train_test_split(X,y,test_size = 0.2)\n    \n    #create a classifier\n    #clf = neighbors.KNeighborsClassifier()# Simple classifier\n    #use 3 classifiers and make them vote to see the best\n    clf = VotingClassifier([('lsvc', svm.LinearSVC()), #linear Support Vector Machine\n                            ('knn',neighbors.KNeighborsClassifier()),#k nearest neighbors\n                            ('rfor', RandomForestClassifier())])\n    \n    # X is the feature and y is the target\n    # we are trying to fit the input data to the target we arre setting\n    clf.fit(X_train,y_train)\n    # if you are happy with the confidence you dont need tto retrain the modle\n    # you can pickle it\n    confidence = clf.score(X_test, y_test)\n    predictions = clf.predict(X_test)\n    \n    print('Predicted spread: ',Counter(predictions))\n    print('Accuracy:', confidence)\n    \n    return confidence\n\ndo_ml('AAPL')","8e62d1e5":"The function process_data_for_labels processes data for a specific ticker, in this case Apple, to see how the price behaves in the next seven days. It adds the change in the stock price for each day to the dataframe.","dd8f872b":"Pivot the dataframe to so that the tickers become the column names. We are only using the close value for analysis. Ideally we should use the mean between open and close.","e1907f61":"Scroll to the extreem right to see the daily change.","740e4f70":"Here we are going to start exploring SnP 500 stock price data.\nLets startt by inporting libraries.","5b172b67":"extract_featuresets define new column which will map answer of the labels, this take args and the asgs that it will take are the 7 day future prices. This creates a new column that generrates buy sell or hold","3df78524":"The function buy_sell_hold creates a new column, which will be the labels for the machine learning (buy, sell or hold) where the features are the percent change the pricing information, close column.\nIf a company may rise by 2% in the next 7 days buy, sell it when it reaches 1.5% of what we paid and a stop loss of 2% we will invest after the 2% fall.","3660fcc5":"<img src=\"https:\/\/datastruggling.com\/wp-content\/uploads\/2018\/01\/MW-DU756_Stock_20150921172954_ZH-585x329.jpg\" \/>","1315ef71":"Due to the extremely volatile nature of financial markets, it is commonly accepted that stock price prediction is a task full of challenge. However in order to make profits or understand the essence of equity market, numerous market participants or researchers try to forecast stock price using various statistical, econometric or even neural network models."}}