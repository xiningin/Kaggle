{"cell_type":{"4add081d":"code","24aeb9aa":"code","f435ca9a":"code","1b28e309":"code","206e5a64":"code","ff76705d":"code","7c4a7b3a":"code","736d9a79":"code","7eee7c18":"code","649a36a2":"code","190fe5bf":"code","6aaeee38":"code","a52b7c03":"code","9da0b767":"code","cf3e7171":"markdown","5089dd58":"markdown","6f3d420c":"markdown","36682c95":"markdown","a56e39d3":"markdown","2d37d921":"markdown","7e9331d9":"markdown","a9d4d80a":"markdown","a92a619a":"markdown","4021f2cd":"markdown","555fe5a0":"markdown","d67e4638":"markdown","273b9ef1":"markdown","1c386680":"markdown","2937ffa4":"markdown","0391534c":"markdown","5f165425":"markdown"},"source":{"4add081d":"# This Python 3 environment comes with many helpful analytics libraries installed\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","24aeb9aa":"train = pd.read_csv('\/kaggle\/input\/rms-titanic-2020\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/rms-titanic-2020\/test.csv')\n\ntrain.head()","f435ca9a":"___","1b28e309":"___","206e5a64":"___","ff76705d":"___","7c4a7b3a":"___","736d9a79":"___","7eee7c18":"___","649a36a2":"train.info()","190fe5bf":"___","6aaeee38":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =  ___","a52b7c03":"from sklearn.linear_model import LogisticRegression\n\n___","9da0b767":"from sklearn.metrics import classification_report\nfrom sklearn import metrics\n\nprint(classification_report(y_test,y_predict))\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predict))","cf3e7171":"## Building a Logistic Regression model\n\nLet\u2019s start by splitting the data into a training  and test. \n\nNOTE: There is another test file that we can play around with in case we want to use all this data for training.","5089dd58":"Let\u2019s continue on by visualizing some more of the data. \n\nLet\u2019s show the count of people who survived.","6f3d420c":"We can now see there are no null values in the Age column.","36682c95":"Now let\u2019s check that heat map again.","a56e39d3":"## Logistic Regression\n\nLogistic regression is a statistical method for predicting binary classes. The outcome or target variable is dichotomous in nature. Dichotomous means there are only two possible classes. \n\nThe real life example of classification example would be, to categorize the mail as spam or not spam, to categorize the tumor as malignant or benign and to categorize the transaction as fraudulent or genuine. All these problem\u2019s answers are in categorical form i.e. Yes or No. and that is why they are two class classification problems.","2d37d921":"## Data Cleaning\n\nWe want to fill in missing age data instead of just dropping the missing age data rows. \n\nOne way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. \n\nLet's show the average age of people belonging to different class in the ship.","7e9331d9":"## Exploratory Data Analysis\n\nLet\u2019s begin some exploratory data analysis. \n\nWe\u2019ll start by checking out missing data. We can use seaborn to create a simple heatmap to see where we are missing data.","a9d4d80a":"Now, let\u2019s move on to train the model  and predict using it.","a92a619a":"Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. \n\nLooking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We\u2019ll probably drop this or change it to another feature like \u201cCabin Known: 1 or 0\u201d.","4021f2cd":"Let\u2019s go ahead and drop the Cabin column and the row in Embarked that is NaN.","555fe5a0":"We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We\u2019ll use these average age values to impute based on Pclass for Age.","d67e4638":"To evaluate our model, we can check precision, recall, f1-score using classification report.\n\nPrecision is about being precise, i.e., how accurate the model is. In other words, we can say, when a model makes a prediction, how often it is correct.","273b9ef1":"## Converting Categorical Features\n\nWe\u2019ll need to convert categorical features to dummy variables. Otherwise the machine learning algorithm won\u2019t be able to directly take in those features as inputs.","1c386680":"## Get the Data\n\nFirst, let us now import the data and let\u2019s look at how this data looks.","2937ffa4":"As we can see, there are 4 categorical columns namely Name, Sex, Ticket and Embarked. Out of these 4, the Name and Ticket column have no relationship with whether the person survived or not. \n\nSo we drop these 2 columns and we convert the other two columns into numerical values. Then the data will be ready for the model.","0391534c":"Let\u2019s show the count of males and females survived.","5f165425":"Here, we will be working with the famous [Titanic Dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic). We\u2019ll be trying to predict a classification: survival or deceased. We\u2019ll use a \u201csemi-cleaned\u201d version of the titanic dataset. Also, we have made two separate files for training and testing. The training data can be found by clicking [here](https:\/\/github.com\/meetnandu05\/LogisticRegression\/blob\/master\/titanic_train.csv) and the test data can be found by clicking [here](https:\/\/github.com\/meetnandu05\/LogisticRegression\/blob\/master\/titanic_test.csv)."}}