{"cell_type":{"02fa84b3":"code","ae54ac74":"code","e34925a9":"code","acc61d03":"code","c906c523":"code","b5bb54b0":"code","7cde7167":"code","6aa4892b":"code","b42190a8":"code","8a0378ca":"code","e7468785":"code","b7bf66eb":"code","83e2c8e4":"code","596b7eb7":"code","b977e526":"code","cd40879c":"code","5967dbf1":"code","fc1e3469":"code","4677d77c":"code","e3a56967":"code","f3deddf9":"code","a86f8645":"code","0bd6fda9":"code","8a2bf949":"code","8b94157e":"code","a5b475c3":"code","4ba4ecdf":"code","f0fc706e":"code","2d760d30":"code","539b8e2c":"code","1b0de0f0":"code","67c6dcb4":"code","e87c9880":"code","a08e2f02":"code","b8cd29f5":"code","b0b7c03c":"code","c290d9a2":"code","293c34b1":"code","b0c5ab8b":"code","099d9cdf":"code","983320ba":"code","1bb5ced9":"code","1ffcda50":"code","724c5f12":"code","af08e5ca":"markdown","2e56a1a5":"markdown","36fc8cec":"markdown","3805fb97":"markdown","682ae161":"markdown","b7874a3f":"markdown","566c1b3b":"markdown","01caeee5":"markdown","7e6bbe0a":"markdown","007dbdbf":"markdown","e066596c":"markdown","45959cd0":"markdown","2bb93466":"markdown","cded4394":"markdown","5c50c703":"markdown","877fc85e":"markdown","6892bb43":"markdown","9474d869":"markdown","9ecc7033":"markdown","2e27011c":"markdown","54161dfd":"markdown","9be20762":"markdown","96116ef1":"markdown","d28dde2a":"markdown","a6a7ea9c":"markdown","994fca2b":"markdown"},"source":{"02fa84b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae54ac74":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","e34925a9":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","acc61d03":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","c906c523":"m.shape\nm = m.transpose()\nm.shape","b5bb54b0":"pData.head(2)","7cde7167":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","6aa4892b":"df.describe()","b42190a8":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","8a0378ca":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","e7468785":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","b7bf66eb":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","83e2c8e4":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","596b7eb7":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values\nlen(cell_cycle_genes_reactome_extended)","b977e526":"from scipy.stats import chi2_contingency\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","cd40879c":"# In general levels of p53 and cyclin B are negatively correlated.\n# https:\/\/en.wikipedia.org\/wiki\/Cyclin_B#Cyclin_B_and_p53\n    \nl = [ 'TP53', 'CCNB1','CCNB2','CCNB3']\n\nt = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ndisplay( t.corr() )","5967dbf1":"import time\nt0 = time.time()\n\nc = pd.DataFrame()\nfor g1 in l:\n    for g2 in l:\n        p = get_independence_pvalue_chi2(t[g1].values,t[g2].values)\n        c.loc[g1,g2] = p\n        #print(g1,g2, p , time.time()-t0,'seconds passed')\n        \nnp.round(c,3)","fc1e3469":"\nl = ['CCNA1', 'CCNA2','CCNF', 'CDK1', 'CDK2'] #  [ 'TP53', 'CCNB1','CCNB2','CCNB3']\n\nt = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ndisplay( t.corr() )\n\nimport time\nt0 = time.time()\n\nc = pd.DataFrame()\nfor g1 in l:\n    for g2 in l:\n        p = get_independence_pvalue_chi2(t[g1].values,t[g2].values)\n        c.loc[g1,g2] = p\n        #print(g1,g2, p , time.time()-t0,'seconds passed')\n        \nnp.round(c,3)\n","4677d77c":"list_selected_genes = [ 'CCNE1', 'CCNE2', 'CDK2'] +  ['CCNB1','CCNB2','CCNB3'] + ['CCNA1', 'CCNA2','CCNF', 'CDK1'] + ['CCND1', 'CCND2', 'CCND3']\n    \nl = list_selected_genes\nt = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    \ndisplay( t.corr() )\n\nst = pd.DataFrame()\nfor g in l : # [ 'CCNE1', 'CCNE2']: #  list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    v = m[:,IX1].toarray().ravel()\n\n    st.loc[g,'Expression sum'] = v.sum()\n    st.loc[g,'Count Expressed cells'] = (v != 0 ).sum()\n    v = m2[:,IX1].toarray().ravel()\n    st.loc[g,'Expression sum normed'] = (v ).sum()\n    st.loc[g,'In cc reactome'] = g in cell_cycle_genes_reactome_extended\n    \n\nst.sort_values('Expression sum', ascending = False, inplace = True)\nst.head(20)\n\nt0 = time.time()\n\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    ensembl_id = genes[0].iat[IX1].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    st.loc[g,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    st.loc[g,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    if 0:\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])\n        print()\n\nprint( time.time() - t0, 'seconds passed')\nst.head(20)","e3a56967":"t = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ndisplay( t.corr() )\n\nimport time\nt0 = time.time()\n\nc = pd.DataFrame()\nfor g1 in l:\n    for g2 in l:\n        p = get_independence_pvalue_chi2(t[g1].values,t[g2].values)\n        c.loc[g1,g2] = p\n        #print(g1,g2, p , time.time()-t0,'seconds passed')\n        \nnp.round(c,3)\n","f3deddf9":"g = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\ndef get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 3):\n    import time\n\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n\n    s = np.asarray( m.sum(axis = 0)).ravel()\n    IX = np.argsort(s)[::-1][:n_top_expressed2look] # indices for top expressed\n    v2 = m2[:,IX].toarray() # convert top expressed to numpy array from sparse \n\n    #t0 = time.time()\n    d = pd.DataFrame()\n    d['gene'] = genes[1].values[IX]\n    if (np.abs(v1).sum() != 0):\n        cr = np.corrcoef(v1,v2.T)[0,:][1:] # some strange reindex to extract correlation vector from matrix ( I do not know why matrix her)\n        #print(time.time()-t0,'seconds passed')\n    else:\n        cr = np.ones(len(d)) * np.nan\n    d['correlation'] = cr\n    d['Abs correlation'] = np.abs(cr)\n\n    d = d.sort_values('Abs correlation', ascending = False)\n\n    str_result = ''\n    cc = 0\n    for i in range(n_correlations2return+1):\n        if d['gene'].iat[i] != g:\n            str_result += d['gene'].iat[i]\n            str_result += ' '\n            str_result += str(np.round(d['correlation'].iat[i] ,2) )\n            str_result += ' '\n            cc += 1\n        if cc >= n_correlations2return:\n            break\n    df_corr_stat = d \n    return str_result, df_corr_stat\nimport time\nt0 = time.time()\nstr_result, df_corr_stat = get_top_correlated_genes(g)\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n\nprint()\nstr_result, df_corr_stat = get_top_correlated_genes(g , n_top_expressed2look = 10000 )\nprint(time.time() - t0,'seconds passed')\nprint( str_result )","a86f8645":"t0 = time.time()\n\nfor g in list_selected_genes: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    #i = np.where(st['gene'].values == g)\n    #IX = st.index[i]\n    \n    str_corr_info, df_corr_info = get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 5)\n    \n    st.loc[g,'Top Correlated'] = str_corr_info\n    \nprint(time.time()-t0,'seconds passed')    \nst.sort_values('Expression sum', ascending = False, inplace = True)\nst  ","0bd6fda9":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ncm = t.corr()\ndisplay( np.round(cm,3) )\nv = np.triu(cm,1).ravel()\nv= v[ v!= 0 ]\nplt.plot(np.sort(v))\nplt.show()","8a2bf949":"from scipy.stats import chi2_contingency\n\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","8b94157e":"a,b = np.where( np.triu(cm,1) > 0.1 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","a5b475c3":"a,b = np.where( np.triu(cm,1) < -.005 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","4ba4ecdf":"\nfor i,g in enumerate(st.index[:3]) : #list_selected_genes:\n    name = st.loc[st.index[i], 'Name']\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        continue\n    IX1 = IX1[0]\n\n    fig = plt.figure(figsize = (20,4) )\n\n    fig.add_subplot(1,2,1)\n    v = m[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n\n    fig.add_subplot(1,2,2)\n    v = m2[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n    plt.show()\n","f0fc706e":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')    ","2d760d30":"try:\n    list_selected_genes_ordered = list(st.index)\nexcept:\n    list_selected_genes_ordered = list_selected_genes\n    print('use all selected genes')\n    \nfor g in [ 'CCNE1', 'CCNE2', 'CDK2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","539b8e2c":"try:\n    list_selected_genes_ordered = list(st.index)\nexcept:\n    list_selected_genes_ordered = list_selected_genes\n    print('use all selected genes')\n\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n\nfor g in [ 'CCNE1', 'CCNE2', 'CDK2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n\nif 1:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    \n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= (color_by != 0), alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((color_by != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by sum of genes ' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    #plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","1b0de0f0":"try:\n    list_selected_genes_ordered = list(st.index)\nexcept:\n    list_selected_genes_ordered = list_selected_genes\n    print('use all selected genes')\n\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n\nfor g in [ 'CCNE1', 'CCNE2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n\nif 1:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    \n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= (color_by != 0), alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((color_by != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by sum of genes ' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    #plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","67c6dcb4":"    \nfor g in [ 'CCNB1', 'CCNB2', 'CCNB3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","e87c9880":"\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n\nfor g in [ 'CCNB1','CCNB2','CCNB3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n\nif 1:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    \n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= (color_by != 0), alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((color_by != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by sum of genes ' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    #plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","a08e2f02":"color_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCNB1','CCNB2','CCNB3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_B_sum = color_by.copy()\n\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCNE1','CCNE2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_E_sum = color_by.copy()\n\nt = pd.DataFrame()\nlist_types = []\ndict_colors = {}\nfor i in range(len(color_by)):\n    if (cyclins_B_sum[i] > 0 ) and (cyclins_E_sum[i] > 0) :\n        typ = 'E and B cyclins'\n        dict_colors[typ] = 'Red'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = typ \n        #t.loc[i,'Color'] = 'Red'\n    elif (cyclins_E_sum[i] > 0) :\n        typ = 'G1S (E-cyclin)'\n        dict_colors[typ] = 'Blue'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G1S (E-cyclin)'\n        #t.loc[i,'Color'] = 'Blue'\n    elif (cyclins_B_sum[i] > 0) :\n        typ = 'G2M (B-cyclin)'\n        dict_colors[typ] = 'Green'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G2M (B-cyclin)'\n        #t.loc[i,'Color'] = 'Green'\n    else:\n        typ = 'zero'\n        dict_colors[typ] = [0.9,0.9,0.9]\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'zero'\n        #t.loc[i,'Color'] = 'yellow'\n        \nlist_types = np.array(list_types)\nfor uv in np.unique(list_types):# .unique():\n    mask = (list_types == uv)#.values\n    color = dict_colors[uv]#  t['Color']\n    print(uv, mask.sum(), color)\n        \nif 1:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)\n    for uv in np.unique(list_types):# .unique():\n        mask = (list_types == uv)#.values\n        color = dict_colors[uv]#  t['Color']\n        print(uv, mask.sum(), color)\n        sns.scatterplot(x=r[:,0][mask],y=r[:,1][mask],   color = color, alpha = 0.7, label = uv , marker = '.')\n        str_info = ''\n        plt.title(str_reducer + '.  Color by gene Phase markers E and B cyclins' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    plt.legend()\n    plt.show()","b8cd29f5":"    \nfor g in [ 'CCNA1', 'CCNA2', 'CCNF']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","b0b7c03c":"color_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCNB1','CCNB2','CCNB3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_B_sum = color_by.copy()\n\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCNA1','CCNA2', 'CCNF']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_A_sum = color_by.copy()\n\nt = pd.DataFrame()\nlist_types = []\ndict_colors = {}\nfor i in range(len(color_by)):\n    if (cyclins_B_sum[i] > 0 ) and (cyclins_A_sum[i] > 0) :\n        typ = 'A and B cyclins'\n        dict_colors[typ] = 'Red'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = typ \n        #t.loc[i,'Color'] = 'Red'\n    elif (cyclins_A_sum[i] > 0) :\n        typ = 'SG2M (A-cyclin)'\n        dict_colors[typ] = 'Blue'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G1S (E-cyclin)'\n        #t.loc[i,'Color'] = 'Blue'\n    elif (cyclins_B_sum[i] > 0) :\n        typ = 'G2M (B-cyclin)'\n        dict_colors[typ] = 'black'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G2M (B-cyclin)'\n        #t.loc[i,'Color'] = 'Green'\n    else:\n        typ = 'zero'\n        dict_colors[typ] = [0.9,0.9,0.9]\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'zero'\n        #t.loc[i,'Color'] = 'yellow'\n        \nlist_types = np.array(list_types)\nfor uv in np.unique(list_types):# .unique():\n    mask = (list_types == uv)#.values\n    color = dict_colors[uv]#  t['Color']\n    print(uv, mask.sum(), color)\n        \nif 1:\n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)\n    for uv in np.unique(list_types):# .unique():\n        mask = (list_types == uv)#.values\n        color = dict_colors[uv]#  t['Color']\n        print(uv, mask.sum(), color)\n        sns.scatterplot(x=r[:,0][mask],y=r[:,1][mask],   color = color, alpha = 0.9, label = uv , marker = '.', s =50)\n        str_info = ''\n        plt.title(str_reducer + '.  Color by gene Phase markers E and B cyclins' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    plt.legend()\n    \n    plt.xlim([6,15])\n    plt.show()","c290d9a2":"\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n\nfor g in [ 'CCND1','CCND3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n\nif 1:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    \n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= (color_by != 0), alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((color_by != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by sum of genes ' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    #plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","293c34b1":"    \nfor g in [ 'CCND1', 'CCND3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","b0c5ab8b":"color_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCNB1','CCNB2','CCNB3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_B_sum = color_by.copy()\n\ncolor_by = np.zeros(m.shape[0])#  m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\nfor g in [ 'CCND1','CCND3']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by += m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\ncyclins_2_sum = color_by.copy()\n\nt = pd.DataFrame()\nlist_types = []\ndict_colors = {}\nfor i in range(len(color_by)):\n    if (cyclins_B_sum[i] > 0 ) and (cyclins_2_sum[i] > 0) :\n        typ = 'D and B cyclins'\n        dict_colors[typ] = 'Red'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = typ \n        #t.loc[i,'Color'] = 'Red'\n    elif (cyclins_2_sum[i] > 0) :\n        typ = '(D-cyclin)'\n        dict_colors[typ] = 'Blue'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G1S (E-cyclin)'\n        #t.loc[i,'Color'] = 'Blue'\n    elif (cyclins_B_sum[i] > 0) :\n        typ = 'G2M (B-cyclin)'\n        dict_colors[typ] = 'black'\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'G2M (B-cyclin)'\n        #t.loc[i,'Color'] = 'Green'\n    else:\n        typ = 'zero'\n        dict_colors[typ] = [0.9,0.9,0.9]\n        list_types.append( typ ) \n        #t.loc[i,'Type'] = 'zero'\n        #t.loc[i,'Color'] = 'yellow'\n        \nlist_types = np.array(list_types)\nfor uv in np.unique(list_types):# .unique():\n    mask = (list_types == uv)#.values\n    color = dict_colors[uv]#  t['Color']\n    print(uv, mask.sum(), color)\n        \nif 1:\n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)\n    for uv in np.unique(list_types):# .unique():\n        mask = (list_types == uv)#.values\n        color = dict_colors[uv]#  t['Color']\n        print(uv, mask.sum(), color)\n        sns.scatterplot(x=r[:,0][mask],y=r[:,1][mask],   color = color, alpha = 0.9, label = uv , marker = '.', s =50)\n        str_info = ''\n        plt.title(str_reducer + '.  Color by gene Phase markers E and B cyclins' + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    plt.legend()\n    \n    plt.xlim([6,15])\n    plt.show()","099d9cdf":"l = ['E2F1','E2F2','E2F3','E2F3a','E2F3b','E2F4','E2F5','E2F6','E2F7','E2F8' ]\nst = pd.DataFrame()\n\nfor g in l:\n    IX = np.where(genes[1] == g)[0]\n    if len(IX) == 0:\n        print(g,'not found')\n        continue\n    IX = IX[0]\n    print(g, IX)\n    st.loc[g,'Expression sum'] = m[:,IX].sum()\n    st.loc[g,'Count expressed cells'] = (m[:,IX] != 0).sum()\n    \nst\n    ","983320ba":"# Leave more than 1000 expressed: \nl = ['CCNA1', 'CCNA2','E2F3','E2F3b','E2F4','E2F5','E2F6','E2F7' ] # 'E2F1','E2F2', ,'E2F8'\nst = pd.DataFrame()\n\nIX = np.where(genes[1].values == 'CCNA1')[0][0]\nv1 = m2[:,IX].toarray().ravel()\nIX = np.where(genes[1].values == 'CCNA2')[0][0]\nv2 = m2[:,IX].toarray().ravel()\nfor g in l:\n    IX = np.where(genes[1] == g)[0]\n    if len(IX) == 0:\n        continue\n    IX = IX[0]\n    print(g, IX)\n    st.loc[g,'Expression sum'] = m[:,IX].sum()\n    st.loc[g,'Count expressed cells'] = (m[:,IX] != 0).sum()\n    v = m2[:,IX].toarray().ravel()\n    st.loc[g,'Correlation to CCNA1'] = np.corrcoef(v,v1)[0][1]\n    st.loc[g,'Correlation to CCNA2'] = np.corrcoef(v,v2)[0][1]\n    \n    \nst\n    ","1bb5ced9":"l = ['RB1' , 'E2F1','E2F2','E2F3','E2F3a','E2F3b','E2F4','E2F5','E2F6','E2F7','E2F8' ]\nst = pd.DataFrame()\n\nfor g in l:\n    IX = np.where(genes[1] == g)[0]\n    if len(IX) == 0:\n        print(g,'not found')\n        continue\n    IX = IX[0]\n    print(g, IX)\n    st.loc[g,'Expression sum'] = m[:,IX].sum()\n    st.loc[g,'Count expressed cells'] = (m[:,IX] != 0).sum()\n    \nst\n    ","1ffcda50":"# Leave more than 1000 expressed: \nl = ['RB1' , 'CCNA1', 'CCNA2','E2F3','E2F3b','E2F4','E2F5','E2F6','E2F7' ] # 'E2F1','E2F2', ,'E2F8'\nst = pd.DataFrame()\n\nIX = np.where(genes[1].values == 'CCNA1')[0][0]\nv1 = m2[:,IX].toarray().ravel()\nIX = np.where(genes[1].values == 'CCNA2')[0][0]\nv2 = m2[:,IX].toarray().ravel()\nIX = np.where(genes[1].values == 'RB1')[0][0]\nv3 = m2[:,IX].toarray().ravel()\nfor g in l:\n    IX = np.where(genes[1] == g)[0]\n    if len(IX) == 0:\n        continue\n    IX = IX[0]\n    print(g, IX)\n    st.loc[g,'Expression sum'] = m[:,IX].sum()\n    st.loc[g,'Count expressed cells'] = (m[:,IX] != 0).sum()\n    v = m2[:,IX].toarray().ravel()\n    st.loc[g,'Correlation to CCNA1'] = np.corrcoef(v,v1)[0][1]\n    st.loc[g,'Correlation to CCNA2'] = np.corrcoef(v,v2)[0][1]\n    st.loc[g,'Correlation to Retinoblastoma'] = np.corrcoef(v,v3)[0][1]\n    \n    \nst\n    ","724c5f12":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","af08e5ca":"# Normalization and log ","2e56a1a5":"# Color by sum of B cyclins - expect to see G2\/M","36fc8cec":"# get_independence_pvalue_chi2","3805fb97":"# Load count matrix and convert it to sparse matrix csr_matrix","682ae161":"# Color by cyclins B","b7874a3f":"# Cyclins A and F","566c1b3b":"# Look at A cyclins, check relation with F cyclin and CDK1,2","01caeee5":"# Look at duplicates","7e6bbe0a":"# Analyse E2F theoretically negative feedback with Cyclins A\n\nwe see some very small negative correlation with A1, not really with A2.\nAnd also A1 and A2 are very small negatively correlated.\n\nTranscription of cyclin A is predominantly regulated by the transcription factor E2F in a negative feedback loop. E2F is responsible for initiating the transcription of many critical S phase genes.[1][3][6] Cyclin A transcription is off during most of G1 and the begins shortly after the R point.[3][7]\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_A","007dbdbf":"# UMAP visualization","e066596c":"# Check anticorrelation of tp53 with cyclins B - not confirmed","45959cd0":"# Info on genes","2bb93466":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at main cyclins.\n\nSee for discussion:\nhttps:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/229699\n\nSee image:\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin#\/media\/File:Cyclin_Expression.svg\nwith activities of cyclins in different phases of cell cycle. \n\n## Conclusions\/Findings.\n\n### 1\nWe tried to identify phases of cell cycle using cyclin genes as markers.\nThat is not quite sucesseful, because some cyclins are expressed quite low,\nso we cannot be sure in results. \nCyclins B - are quite expressed they are markers of G2\/M regions, \nso we can guess assign corresponding regions as G2\/M (right part of the plot),\nso lefter part is probably the G1\/S part. It somehow not very clearly corresponds to expression\nof the A and E cyclins. \n\n### 2\nInteresting fact that Cyclins D - are most expressed and that correspond to theory - they are\nexpressed in all cell cycle loop. \n\n### 3\nCyclins B1 and B2 are quite correlated.\nCyclin A2 is also quite correlated with B1\nCyclin B1 with CDK1. \n\n#### 4 \n\nAnalyse E2F theoretically negative feedback with Cyclins A\n\nwe see some very small negative correlation with A1, not really with A2.\nAnd also A1 and A2 are very small negatively correlated.\n\nTranscription of cyclin A is predominantly regulated by the transcription factor E2F in a negative feedback loop. E2F is responsible for initiating the transcription of many critical S phase genes.[1][3][6] Cyclin A transcription is off during most of G1 and the begins shortly after the R point.[3][7]\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_A\n\n\n### Cyclins E - peaks in G1\/S\n\n**Cyclin E - peaks between G1 and S** (that seems everywhere agreed). \nGenes: [  'CCNE1', 'CCNE2' ]\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_E\n\nCyclin E binds to G1 phase Cdk2, which is required for the transition from G1 to S phase of the cell cycle that determines initiation of DNA duplication. The Cyclin E\/CDK2 complex phosphorylates p27Kip1 (an inhibitor of Cyclin D), tagging it for degradation, thus promoting expression of Cyclin A, allowing progression to S phase.\n\n### Cyclins B - peaks in G2\/M\n\nGenes ['CCNB1','CCNB2','CCNB3']\n\nCyclin B binds Cdk1 = MPF (maturation promoting factor or mitosis promoting factor )\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_B\n\nCyclin B is a member of the cyclin family. Cyclin B is a mitotic cyclin. The amount of cyclin B (which binds to Cdk1) and the activity of the cyclin B-Cdk complex rise through the cell cycle[2] until mitosis, where they fall abruptly due to degradation of cyclin B (Cdk1 is constitutively present).[3] The complex of Cdk and cyclin B is called maturation promoting factor or mitosis promoting factor (MPF).\n\nIn general levels of p53 and cyclin B are negatively correlated.\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_B#Cyclin_B_and_p53\nThat is not true for current dataset.\n\n\n### Cyclins A - peaks in G2 starts at S and ends at M\n\nGenes ['CCNA1', 'CCNA2']\n\nPoorly expressed for current dataset and low correlated \n\nCCNA1 424 343\n\nCCNA2 2136 1574\n\nCCNA1 https:\/\/en.wikipedia.org\/wiki\/Cyclin_A1\n**This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle.**\n\n\n### Cyclins D\n\n'CCND1', 'CCND2', 'CCND3'  \n\nCCND1, CCND3 - strongly expressed comparing to other cyclins.  \nFrom theory we know that D-cyclins expressed almost in all phases, except G1 begining of the G1 phase,\nso that corresponds to the fact that CCND1, CCND3 are strongly expressed. \n\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin-dependent_kinase#CDKs_and_cyclins_in_the_cell_cycle\n\nTable 2: Cyclins and CDKs by Cell-Cycle Phase\n\n|Phase |\tCyclin |\tCDK|\n| --- | --- | --- |\n|G0|\tC\t| Cdk3 |\n|G1|\tD, E |\tCdk4, Cdk2, Cdk6\n|S|\tA, E\t| Cdk2\n|G2|\tA\t| Cdk2, Cdk1\n|M|\tB\t| Cdk1\n\n\n#### Cyclin F CCNF\n\nCCNF\n\nIts expression pattern closely resembles the one from cyclin A. Cyclin F levels begin to rise during S phase and reaches its peak during G2.[7]\n\nhttps:\/\/en.wikipedia.org\/wiki\/CCNF\n\n\n\n\n#### Reminder in previous notebook\nwe saw: \nMDM2 top correlation (0.36) is CDKN1A (coding p21Waf1) which is biologically meaningful - see below. \ncyclin-dependent kinase inhibitor 1 or CDK-interacting protein 1, is a cyclin-dependent kinase inhibitor (CKI) that is capable of inhibiting all cyclin\/CDK complexes\n\nSee in particular here: https:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/227621 \n\n\n------------------\n\n\n\n### Further info on genes\n\n#### CDK1 - subunit of MPF = Cyclin B + CDK1\n\n**Structure:**\nCdk1 is a small protein (approximately 34 kilodaltons), and is highly conserved. The human homolog of Cdk1, CDC2, shares approximately 63% amino-acid identity with its yeast homolog. \nCdk1 is comprised mostly by the bare protein kinase motif, which other protein kinases share. \nCdk1, like other kinases, contains a cleft in which ATP fits.\n\n\n#### CCNA1 https:\/\/en.wikipedia.org\/wiki\/Cyclin_A1\n**This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle.**\n\n\nThe protein encoded by this gene belongs to the highly conserved cyclin family, whose members are characterized by a dramatic periodicity in protein abundance through the cell division cycle. Cyclins function as activating subunits of enzymatic complex together with cyclin-dependent kinases (CDKs). Different cyclins exhibit distinct expression and degradation patterns that contribute to the temporal coordination of cell cycle events. Cyclin A1 was shown to be expressed in testis and brain, as well as in several leukemic cell lines, and is thought to primarily function in the control of meiosis. This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle. This cyclin was found to bind to important cell cycle regulators, such as Rb family proteins, transcription factor E2F1, and the Kip\/Cip family of CDK-inhibitor proteins.\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","cded4394":"# Load information files: genes annotations, cells info etc...","5c50c703":"# Preliminaries","877fc85e":"# Statistics on top correlated","6892bb43":"# Color by Cyclin E and CDK2 - it gives better view","9474d869":"# Retinoblastoma protein\n\nThe retinoblastoma protein (pRb) is involved in the regulation of cyclin A through its interaction with E2F. It exists in two states: hypophosphorylated pRb and hyperphosphorylated pRb.[2] Hypophosphorylated pRb binds E2F, which prevents transcription of cyclin A. The absence of cyclin A prior to the R point is due to the inhibition of E2F by hypophosphorylated pRb. After the cell passes through the R point, cyclin D\/E- complexes phosphorylate pRb. Hyperphosphorylated pRb can no longer bind E2F, E2F is released and cyclin A genes, and other crucial genes for S phase, are transcribed.[2][9][12]\n\n","9ecc7033":"# Create columns with information on each cell (drug, dose, etc)","2e27011c":"# D-cyclins","54161dfd":"# Plot expressions of top selected genes ","9be20762":"# get_top_correlated_genes","96116ef1":"# Color by Cyclins E which should peak at G1\/S - not enough points to clearly see localization - only some hints as we guess afterwards\n","d28dde2a":"# Correlation analysis","a6a7ea9c":"# Histone genes info","994fca2b":"# Color by sum of cyclins E - can see something\n"}}