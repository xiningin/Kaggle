{"cell_type":{"63560488":"code","aeaae9f4":"code","5a94cd20":"code","1e456668":"code","e4caebcf":"code","084dbc55":"code","ac216aa2":"code","f33ee1d4":"code","35c630ee":"code","cb8bb9d5":"code","9005966e":"code","23982de6":"code","dca9be9a":"code","71e3793b":"code","aeb7144f":"code","992c5230":"code","0b3a0281":"code","9cf9758a":"code","17c24928":"code","0a922d97":"code","e422da74":"code","d5fa65a7":"markdown","7eee34f0":"markdown","c69aa279":"markdown","b5cebcb0":"markdown"},"source":{"63560488":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\nimport cv2\nfrom sklearn import preprocessing\nfrom pathlib import Path\nimport cv2 as cv\n\nimport math\nimport random\nimport albumentations as A\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aeaae9f4":"import torch\nimport torchvision\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image, ImageDraw\nimport xml.etree.ElementTree as ET\n\nimages_dir = '\/kaggle\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/'\nannotations_dir = '\/kaggle\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/annotation_3d.json'","5a94cd20":"sample_id = 5\n\nsample_image_path = f'\/kaggle\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/rgb_rawlight.png'\nsample_annot_path = f'\/kaggle\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/annotation_3d.json'","1e456668":"sample_image = Image.open(sample_image_path)\nsample_image","e4caebcf":"with open(sample_annot_path) as annot_file:\n    print(''.join(annot_file.readlines()))","084dbc55":"tree = ET.parse(sample_annot_path)\nroot = tree.getroot()\n\nsample_annotations = []\n\nfor neighbor in root.iter('bndbox'):\n    xmin = int(neighbor.find('xmin').text)\n    ymin = int(neighbor.find('ymin').text)\n    xmax = int(neighbor.find('xmax').text)\n    ymax = int(neighbor.find('ymax').text)\n    \n    sample_annotations.append([xmin, ymin, xmax, ymax])\n    \nprint('Ground-truth annotations:', sample_annotations)","ac216aa2":"!pip install keras","f33ee1d4":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom glob import glob\nimport cv2","35c630ee":"def plotImages(artist,directory):\n    print(artist)\n    multipleImages = glob(directory)\n    plt.rcParams['figure.figsize'] = (15, 15)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    i_ = 0\n    for l in multipleImages[:25]:\n        im = cv2.imread(l)\n        im = cv2.resize(im, (128, 128)) \n        plt.subplot(5, 5, i_+1) #.set_title(l)\n        plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n        i_ += 1\n        \n        \nplotImages(\"Structured3d Paper Equivalent in Gray Scale\",\"..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/**\")","cb8bb9d5":"from tqdm import tqdm\nfrom PIL import Image as Img","9005966e":"#Code by Nagesh Singh Chauhan https:\/\/www.kaggle.com\/nageshsingh\/generate-realistic-human-face-using-gan\n\nPIC_DIR = f'..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/'\n\nIMAGES_COUNT = 6 #I think there are only 6 images in that directory\n\nORIG_WIDTH = 178\nORIG_HEIGHT = 208\ndiff = (ORIG_HEIGHT - ORIG_WIDTH) \/\/ 2\n\nWIDTH = 128\nHEIGHT = 128\n\ncrop_rect = (0, diff, ORIG_WIDTH, ORIG_HEIGHT - diff)\n\nimages = []\nfor pic_file in tqdm(os.listdir(PIC_DIR)[:IMAGES_COUNT]):\n    pic = Image.open(PIC_DIR + pic_file).crop(crop_rect)\n    pic.thumbnail((WIDTH, HEIGHT), Image.ANTIALIAS)\n    images.append(np.uint8(pic))","23982de6":"#Code by Nagesh Singh Chauhan https:\/\/www.kaggle.com\/nageshsingh\/generate-realistic-human-face-using-gan\n\n#Display first 5 images  #There are only 6\nplt.figure(1, figsize=(10, 10))\nfor i in range(6):\n    plt.subplot(5, 5, i+1)\n    plt.imshow(images[i])\n    plt.axis('off')\nplt.show()","dca9be9a":"#Codes by Yaroslav Isaienkov https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\n\ndef visualize_images(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    image_names = all_names[:n_images]   \n    if is_random:\n        image_names = random.sample(all_names, n_images)\n            \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.xticks([])\n        plt.yticks([])\n    \n    plt.show()","71e3793b":"structured_PNG_PATH = '..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full'","aeb7144f":"visualize_images(structured_PNG_PATH, 6)","992c5230":"#Codes by Yaroslav Isaienkov https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\n\ndef show_color_histogram(path):\n    image_names = os.listdir(path)\n    image_name = random.choice(image_names)\n    img = cv2.imread(os.path.join(path, image_name))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    fig = make_subplots(1, 2)\n\n    fig.add_trace(go.Image(z=img), 1, 1)\n    for channel, color in enumerate(['red', 'green', 'blue']):\n        fig.add_trace(\n            go.Histogram(\n                x=img[..., channel].ravel(), \n                opacity=0.5,\n                marker_color=color, \n                name='%s channel' %color\n            ), 1, 2)\n    fig.update_layout(height=400)\n    fig.show()","0b3a0281":"#Codes by Yaroslav Isaienkov https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\n\ndef color_hist_visualization(image_path, figsize=(16, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 4, 1)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \n    colors = [\"red\", \"green\", \"blue\"]\n    for i in range(len(colors)):\n        plt.subplot(1, 4, i + 2)\n        plt.hist(\n            img[:, :, i].reshape(-1),\n            bins=25,\n            alpha=0.5,\n            color=colors[i],\n            density=True\n        )\n        plt.xlim(0, 255)\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()","9cf9758a":"#Codes by Yaroslav Isaienkov https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\n\nimg_path = '..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/rgb_rawlight.png'\ncolor_hist_visualization(img_path)\n\nimg_path = '..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/normal.png'\n\ncolor_hist_visualization(img_path)\n\nimg_path = '..\/input\/structured3d-paper-equivalent-data-set\/S3D_dataset\/130093895\/2D_rendering\/163518\/panorama\/full\/semantic.png'\ncolor_hist_visualization(img_path)","17c24928":"import plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nshow_color_histogram(structured_PNG_PATH)","0a922d97":"def batch_visualization(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    \n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    \n    image_names = all_names[:n_images]\n    if is_random:\n        image_names = random.sample(all_names, n_images)\n    \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.axis(\"off\")\n        \n    plt.show()","e422da74":"batch_visualization(structured_PNG_PATH, 5, is_random=True, figsize=(5, 5))","d5fa65a7":"#Going to Plan B. ","7eee34f0":"That's all for now. I expect that anyone could make those box\/annotations that I was not able to make.","c69aa279":"#Yesssss! Exactly what I wanted. Lucky me.","b5cebcb0":"#I shouldn't have comemorate so fast. Now, I don't know how to make my annotations and bbox."}}