{"cell_type":{"22abcbe4":"code","7d530838":"code","8399b481":"code","da52ddc6":"code","1a0e1cd9":"code","01d838ef":"code","aeaeaec1":"code","6e2a21a1":"code","fd236af0":"code","f1fe6643":"code","10800252":"code","30d17917":"code","6a5efd6c":"code","6b83f214":"code","110790a4":"code","ebca410a":"code","00f972a1":"code","8cf2e594":"code","3eb9f65e":"code","910a603b":"code","ad35801a":"code","6d1b3717":"markdown","ca15cc9c":"markdown","31e57040":"markdown","dc1265b1":"markdown","149a9002":"markdown","cfa2b747":"markdown","640cfc95":"markdown","77820528":"markdown"},"source":{"22abcbe4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport os\n%matplotlib inline","7d530838":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","8399b481":"df.head()","da52ddc6":"df.info()","1a0e1cd9":"# This fuctions is used a few times to display bar values in barplots\ndef show_values_on_bars(axs, *args, **kwargs):\n    \"\"\"\n    Function based on Sharon Soussan answer for:\n    https:\/\/stackoverflow.com\/questions\/43214978\/seaborn-barplot-displaying-values\n    This function will help display information over some plots.\n    \"\"\"\n    \n    def _show_on_single_plot(ax):        \n        \n        if 'stacked' in kwargs:\n            if kwargs['stacked'] == True:\n                first_bar = sorted([x.get_height() for x in axs.patches[:] if x.get_x() < 0], reverse=True)\n                second_bar = sorted([x.get_height() for x in axs.patches[:] if x.get_x() > 0], reverse=True)\n\n        for p in ax.patches:\n            \n            _x = p.get_x() + p.get_width() \/ 2\n            \n            if 'stacked' in kwargs:\n                # This will work only for the sex\/pclass plot. I will try to improve this in the future.\n                if kwargs['stacked'] == True:\n                    n = ax.patches.index(p)\n                    if p.get_x() < 0:\n                        bar = first_bar\n                    else:\n                        bar = second_bar\n                    pos = bar.index(p.get_height())\n                    if pos % 3 == 0:\n                        _y = (bar[pos] - bar[pos + 1])\/2 + bar[pos + 1] - 14\n                        value = bar[pos] - bar[pos + 1]\n                    elif pos % 3 == 1:\n                        _y = (bar[pos] - bar[pos + 1])\/2 + bar[pos + 1] - 14\n                        value = bar[pos] - bar[pos + 1]\n                    elif pos % 3 == 2:\n                        _y = bar[pos] \/ 2 - 14\n                        value = bar[pos]\n                        \n            elif 'height' in kwargs:\n                _y = kwargs['height']\n                value = f'{p.get_height()}'\n            else:\n                _y = 10\n                value = f'{p.get_height()}'\n            ax.text(_x, _y, value, fontsize=14, ha=\"center\") \n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(axs)\n    else:\n        _show_on_single_plot(axs)","01d838ef":"# Setting the style for my plots\nsns.set_style(style='ticks')","aeaeaec1":"df['Sex'].value_counts()","6e2a21a1":"# Color palettes for sex plots:\nsex_palette = sns.color_palette([\"#4287f5\", \"#bd3c3c\"])\npclass_palette = sns.color_palette([\"#FFDF00\", \"#c0c0c0\", \"#cd7f32\"])\nsurvived_palette = sns.color_palette([\"#4e5245\", \"#57916c\"])\n\nfig = plt.figure(figsize=(16,12), constrained_layout=True)\ngs = gridspec.GridSpec(nrows=3, ncols=4, figure=fig)\n\n\n# Male\/Female Totals\nax1 = fig.add_subplot(gs[0:1, 0:2])\nsns.countplot(x='Sex', data=df, palette=sex_palette, edgecolor=sns.color_palette([\"#000\"]), alpha=0.5)\nshow_values_on_bars(ax1)\nplt.ylabel('Passengers')\n\n# Sex per class\nax2 = fig.add_subplot(gs[0:1, 2:])\nsns.countplot(x = 'Sex', data=df, color = \"#FFDF00\", edgecolor=sns.color_palette([\"#000\"]), alpha=0.2)\nsns.countplot(x = 'Sex', data=df[(df['Pclass'] == 2) | (df['Pclass'] == 3)], color='#808080', edgecolor=sns.color_palette([\"#000\"]), alpha=0.2)\nsns.countplot(x = 'Sex', data=df[df['Pclass'] == 3], color = \"#cd7f32\", edgecolor=sns.color_palette([\"#000\"]), alpha=0.2)\nplt.ylabel('Passengers')\n# sns.countplot(x='Sex', hue='Pclass', data=df, edgecolor=sns.color_palette([\"#000\"]), palette=pclass_palette, alpha=0.5)\nplt.legend(title='Per class', labels=['1st', '2nd', '3rd'])\nshow_values_on_bars(ax2, stacked=True)\nplt.ylabel('Passengers')\n\n# Survivors by sex\nax3 = fig.add_subplot(gs[1:3, 0:4])\nsns.countplot(x='Sex', hue='Survived', data=df, edgecolor=sns.color_palette([\"#000\"]), palette=survived_palette, alpha=0.5)\nplt.legend(title='Survived?', labels=['No', 'Yes'])\nshow_values_on_bars(ax3)\nplt.ylabel('Passengers')\n\nfig.suptitle('Sex', fontsize=18)","fd236af0":"df['Family'] = df['Parch'] + df['SibSp']","f1fe6643":"df['Family'].value_counts()","10800252":"fig = plt.figure(figsize=(14,6), constrained_layout=True)\ngs = gridspec.GridSpec(nrows=1, ncols=2, figure=fig)\n\nax1 = fig.add_subplot(gs[0, 0])\nsns.countplot(x='Family', data=df, palette='coolwarm', edgecolor=sns.color_palette([\"#000\"]), alpha=0.5)\nshow_values_on_bars(ax1, height=40)\nplt.xlabel('Family Members')\nplt.ylabel('Passengers')\n\nax2 = fig.add_subplot(gs[0, 1])\nsns.countplot(x = 'Family', data=df, color = \"#5ec4a1\", edgecolor=sns.color_palette([\"#000\"]), alpha=0.5)\nsns.countplot(x = 'Family', data=df[df['Survived'] == 0], color = \"black\", edgecolor=sns.color_palette([\"#000\"]), alpha=0.5)\nplt.xlabel('Family Members')\nplt.ylabel('Passengers')\nplt.legend(title='Survived?', labels=['Yes', 'No'])\n\nfig.suptitle('Passengers Family', fontsize=18)","30d17917":"# Filling na with age mean so there's no missing data on the 'Age' column\ndf['Age'].fillna(value=df['Age'].mean())","6a5efd6c":"df['Age'].value_counts()","6b83f214":"# Color palettes for age plots:\nsex_palette = sns.color_palette([\"#4287f5\", \"#bd3c3c\"])\npclass_palette = sns.color_palette([\"#FFDF00\", \"#c0c0c0\", \"#cd7f32\"])\nsurvived_palette = sns.color_palette([\"#000\", \"#57cf81\"])\n\nfig = plt.figure(figsize=(20,6), constrained_layout=True)\ngs = gridspec.GridSpec(nrows=1, ncols=3, figure=fig)\n\nax1 = fig.add_subplot(gs[0, 0])\nsns.distplot(df['Age'], color='#000')\n\nax2 = fig.add_subplot(gs[0, 1])\nsns.boxplot(x='Pclass', y='Age', hue='Sex', data=df, palette=sex_palette)\n\nax3 = fig.add_subplot(gs[0, 2])\nsns.swarmplot(x='Pclass', y='Age', hue='Survived', data=df, palette=survived_palette, size=8, dodge=True)\nplt.legend(title='Survived?', labels=['No', 'Yes'])\n\nfig.suptitle('Age', fontsize=18)","110790a4":"df['SexB'] = df['Sex'].map({'male': 1,'female': 0})\ndf['EmbarkedNum'] = df['Embarked'].map({'S': 0,'C': 1, 'Q': 2})","ebca410a":"sns.heatmap(df.corr(), cmap='Pastel1')\nplt.title('Correlation', fontsize=24)","00f972a1":"pip install chart_studio","8cf2e594":"import plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","3eb9f65e":"df['Embarked'].value_counts()","910a603b":"data = dict(type = 'choropleth',\n           colorscale = 'portland',\n           locations = ['Great Britain', 'France', 'Ireland'],\n           locationmode = 'country names',\n           z = [df['Embarked'].value_counts()['S'], df['Embarked'].value_counts()['C'], df['Embarked'].value_counts()['Q']],\n           colorbar = {'title': 'Number of people'})\nlayout = dict(title = 'Where people embarked on Titanic', geo = dict(scope = 'europe', showlakes = True, lakecolor='rgb(85, 173, 240)')\n             )\nchoromap = go.Figure(data=[data], layout=layout)\niplot(choromap)","ad35801a":"# C = Cherbourg (France) - Cordinates = (49.648793, -1.617686)\n# Q = Queenstown\/Cohb (Ireland) - Coordinates = (51.85033600, -8.29416667) \n# S = Southampton (England) - Coordinates = (50.90969800, -1.40416667)\n# Titanic sinking coordinates - Coordinates = (41.7325, -49.9469)\n\nname = ['Southampton', \n        'Cherbourg', \n        'Queenstown', \n        'Sinking']\n\npos = [[50.90969800, -1.40416667, 'Southampton', 1],\n      [49.648793, -1.617686, 'Cherbourg', 2],\n      [51.85033600, -8.29416667, 'Queenstown', 3],\n      [41.7325, -49.9469, 'Titanic\\'s Sinking', 4]]\n\npos_df = pd.DataFrame(pos, index=name, columns=['lat', 'lon', 'name', 'animation'])\n\n\nfig = px.line_mapbox(pos_df, lat=\"lat\", lon=\"lon\", zoom=3, height=500, hover_data=['name'])\nfig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_zoom=2.8, mapbox_center_lat = 48, mapbox_center_lon = -27,\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, title='Titanic\\'s Path')","6d1b3717":"## Bonus: Geographic Plots\nThe following charts don't matter for the analysis as a whole, I was just trying to train my geographical plot skills and I used some of the dataset information (and Googled a little more) to create figures somehow interesting.","ca15cc9c":"### Notes\n* There are 891 records on the dataset.\n* There is missing information on the following columns: **Age**, **Cabin** and **Embarked**.","31e57040":"## Conclusions (so far)\n\nHere are somethings I concluded by analysing the plots:\n\n* Sex and Class matter to decide rather people would live or die (if you were a first-class woman, you'd probably survive);\n* Age and Class are related (e.g. people in first class trend to be older than people in third class);\n* Class and Fare are related (as expected, people in 1st class paid more for their tickets);\n* Parch and SibSp doesn't appear to make such a difference to tell who survived or not.\n\nI'll try to apply some machine learning algorithms on this dataset so I can learn more about it and maybe find more patterns.","dc1265b1":"## Visualization based on 'Parch' and 'SibSp'\n\nTo better approach these columns, I decided to add both, considering the following given information:\n\n* **sibsp:** The dataset defines family relations in this way...\n\n    Sibling = brother, sister, stepbrother, stepsister\n    \n    Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n    \n\n* **parch:** The dataset defines family relations in this way...\n\n    Parent = mother, father\n\n    Child = daughter, son, stepdaughter, stepson\n    \n\nSo, for the sake of the data visualization: **'Family'** = **'Parch'** + **'SibSp'**\n\n**PS:** On a future notebook, I'll check if this is the best approach.","149a9002":"## Titanic: Machine Learning from Disaster\n\nSo, this is my first published notebook. I'm going to try to get the most of the training dataset to better understand the data. The focus of this notebook is to go through somethings I learned while studying data visualization in Python. There's a high chance that these codes aren't as pythonic as they are supposed to be, but I'll try my best to write some clean code. \n\n**Obs:** Critiques and tips are very welcome.","cfa2b747":"## Visualization based on 'Sex'\n\nSome plots related to **Sex**. Let's check if 'women and children' firsts was a thing.","640cfc95":"## Visualization based on 'Age'\n\nBefore applying data visualization techniques on the **Age** column, I decided to fill the 177 missing data records to have a more completed dataset.\n\n**PS:** On a future notebook, I'll check if this is the best approach.","77820528":"## Correlation\n\nBefore using the heatmap over correlation, I'll give binary\/ordinal representations to **Sex** and **Embarked** columns to check if there's any correlation between them and the **Survived** data."}}