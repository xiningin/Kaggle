{"cell_type":{"f43ab837":"code","f2daae0a":"code","241e8c87":"code","f67b359f":"code","3e32a530":"code","14ac23b6":"code","c60056c8":"code","c40bbd17":"code","0340d49b":"code","cf29b1bf":"code","26a007cc":"code","894191a3":"code","b73261f0":"code","44066a8b":"code","de7bf9d1":"code","cd5b813e":"code","4d49bd5d":"code","bdf8a12a":"code","27cc947d":"code","97f36c55":"code","92938039":"code","17b8fa99":"code","681000b2":"code","50f2311e":"code","e07754a8":"code","1903332d":"code","f1e6f1af":"code","9740ef3f":"code","20513acf":"code","82f6f82a":"code","3bea62dc":"code","9e7357df":"code","aa3e4efb":"code","6a94d8bd":"code","c23d9e58":"code","55d2a6dc":"code","ec454a83":"markdown","7f37d8f8":"markdown","09df3587":"markdown","95500c88":"markdown","983b6ba4":"markdown","baa68abf":"markdown","377bb56c":"markdown","89cce841":"markdown","fb584dfe":"markdown","f44a5e6b":"markdown","0d38c4a8":"markdown","3454cd0d":"markdown","edebd794":"markdown","7c0be27d":"markdown"},"source":{"f43ab837":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/jamalon-arabic-books-dataset\"))\n\n# Any results you write to the current directory are saved as output.","f2daae0a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","241e8c87":"jamalon = pd.read_csv('..\/input\/jamalon-arabic-books-dataset\/jamalon dataset.csv')\njamalon.head()","f67b359f":"df1 = jamalon = pd.read_csv('..\/input\/jamalon-arabic-books-dataset\/jamalon dataset.csv')\ndf1.dataframeName = 'jamalon1.csv'","3e32a530":"df1.shape","14ac23b6":"jamalon.shape","c60056c8":"jamalon['Publication year'] = jamalon['Publication year'].replace(0,jamalon['Publication year'].median())","c40bbd17":"jamalon.head()","0340d49b":"jamalon.isnull().sum()","cf29b1bf":"# Delete Unwanted Columns Description , Unnamed : 0\njamalon1=jamalon.drop(columns = {'Unnamed: 0' , 'Description'})","26a007cc":"jamalon1","894191a3":"jamalon1.describe().transpose()","b73261f0":"# Calculate column count on Categorical Data\n# Calculate column count - Title\njamalon1['Title'].value_counts()","44066a8b":"# Calculate column count - Author\njamalon1['Author'].value_counts()","de7bf9d1":"# Calculate column count - Publisher\njamalon1['Publisher'].value_counts()","cd5b813e":"# Calculate column count - Publication year\njamalon1['Publication year'].value_counts()","4d49bd5d":"# Calculate column count - Cover\njamalon1['Cover'].value_counts()","bdf8a12a":"# Calculate column count - Category\njamalon1['Category'].value_counts()","27cc947d":"# Calculate column count - Subcategory\njamalon1['Subcategory'].value_counts()","97f36c55":"# Import Libraries\nfrom scipy.stats import skew , kurtosis","92938039":"# Skewness & Kurtosis for Pages\nprint(\"Skewness for Pages\" , skew(jamalon1['Pages']))\nprint(\"Kurtosis for Pages\" , kurtosis(jamalon1['Pages']))","17b8fa99":"# Skewness & Kurtosis for Price\nprint(\"Skewness for Price\" , skew(jamalon1['Price']))\nprint(\"Kurtosis for Price\" , kurtosis(jamalon1['Price']))","681000b2":"# Histogram\njamalon1['Publication year'].hist()","50f2311e":"# Histogram\njamalon1['Price'].hist()","e07754a8":"# Histogram\njamalon1['Pages'].hist()","1903332d":"sns.distplot(jamalon1['Price'])","f1e6f1af":"sns.distplot(jamalon1['Pages'])","9740ef3f":"sns.distplot(jamalon1['Publication year'])","20513acf":"plt.figure(figsize=(14,10))\nsns.heatmap(jamalon.corr(),annot=True,cmap='hsv',fmt='.3f',linewidths=2)\nplt.show()","82f6f82a":"sns.pairplot(data=jamalon)","3bea62dc":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","9e7357df":"plotPerColumnDistribution(df1, 5, 5)","aa3e4efb":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","6a94d8bd":"plotCorrelationMatrix(df1, 8)","c23d9e58":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","55d2a6dc":"plotScatterMatrix(df1, 10,5)","ec454a83":"# Skewness and Kurtosis","7f37d8f8":"# IMPORT NECESSARY LIBRARIES TO READING THE DATA","09df3587":"# 2. Price","95500c88":"# Distribution plot","983b6ba4":"# Data Cleaning","baa68abf":"# 1. Publication Year","377bb56c":"# Correlation","89cce841":"# Pair Plot","fb584dfe":"# 3 . Pages","f44a5e6b":"# Exploratory Data Analysis (EDA)","0d38c4a8":"# Graphical Visualtions","3454cd0d":"# Graphical Visualtions","edebd794":"# Replace 0 with median in Publication Year","7c0be27d":"# Check if any null values in the data"}}