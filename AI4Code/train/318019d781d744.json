{"cell_type":{"c172a7cc":"code","55f70888":"code","4c5fdfe4":"code","3573703f":"code","7a3f1ec8":"code","1b6d737b":"code","e69af92d":"code","262317de":"code","254d3343":"code","b2eee637":"code","24b2f618":"code","685f0586":"code","da983da7":"code","b01126cb":"code","35387147":"code","b2f677b5":"code","1525edbe":"code","36587620":"code","77df99c2":"code","168c4c63":"code","dc115322":"code","38f3e404":"code","b273cf79":"code","1f8324f2":"code","e294cfc0":"code","b1c1566f":"code","40dbb58e":"code","a2b497f3":"code","11247396":"code","744c8db8":"code","07531872":"code","d3f7e8d3":"code","0b10bd70":"code","f3513b87":"code","6ac662ce":"code","cfa14d5d":"code","33ff2334":"code","7af9c3a8":"code","fb5f6358":"code","8960ad3d":"code","e31c3433":"code","19bf9850":"code","10ebb906":"code","b182381b":"code","e8cf1ea0":"code","d6e617ba":"code","be84b7db":"code","5a59583c":"code","76272915":"code","bde6c154":"code","3173ed08":"code","73790ee1":"code","8027fa9d":"code","8439338e":"code","77b81533":"code","4d84d382":"code","6d9a0648":"code","d1d7e8ee":"code","51f61db0":"code","1a2e8cc5":"code","71c2d9d8":"code","bba4c291":"code","99e5edfb":"code","754e6b6d":"code","fdb4db2f":"code","0d78f9dc":"code","a9153984":"code","9bb0668e":"code","21c9ecc2":"code","17823f63":"code","c82b2a5c":"code","0c947227":"code","d30636e6":"code","00d44c5e":"code","c569dffe":"code","585503ae":"code","f8b4b2fa":"code","d570c15e":"code","0f21823b":"code","2a1a21d1":"code","6ed9b01c":"code","5cdc0f99":"markdown","36524c2e":"markdown","5b1bbf44":"markdown","c1261201":"markdown","81c798c2":"markdown","bb345023":"markdown","a31d96b6":"markdown","e791fe45":"markdown","5f3378b8":"markdown","5f0f7927":"markdown","c306e0a9":"markdown","856f8af1":"markdown","15d265a8":"markdown","fa51e517":"markdown","9683588c":"markdown","1fd75d27":"markdown","a1f5fac9":"markdown","0c1aa4d5":"markdown","ae18cb90":"markdown","dbed0c9e":"markdown","aab124be":"markdown","984faf00":"markdown","6f4420d4":"markdown","9a0ba081":"markdown","bc369889":"markdown","5834415f":"markdown","8f9926ed":"markdown","e07a5de2":"markdown","f50f6a36":"markdown","50d14b1b":"markdown","7e0ec4d7":"markdown","fe210491":"markdown","ccc85c55":"markdown","ef03cf0b":"markdown","887482cb":"markdown","d3650fba":"markdown","4546af22":"markdown","d91d75ac":"markdown","5c0853ed":"markdown","f0977e76":"markdown","b440b372":"markdown","028519f6":"markdown","aff9b6a6":"markdown"},"source":{"c172a7cc":"train.describe()","55f70888":"train.columns","4c5fdfe4":"#for analysis of data, dataframe\nimport numpy as np\nimport pandas as pd\n\n#for plotting and stuffs\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \n#the above line of code is known as a magic function, helps to display our plots just below our code in the notebook.\n\n#for model training & prediction\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression","3573703f":"#read training data into 'train_df' dataframe\ntrain_df=pd.read_csv('..\/input\/train.csv')\n\n#read testing data into 'test_df' dataframe\ntest_df=pd.read_csv('..\/input\/test.csv')\n\n#combined dataset, will be handy in wrangling steps.\ncombined_df=[train_df,test_df]","7a3f1ec8":"train_df.shape","1b6d737b":"test_df.shape\ntest_df.columns","e69af92d":"len(combined_df) # \u53ea\u662f2\u4e2a\u6570\u636e\u96c6\u653e\u57281\u4e2a\u6587\u4ef6\u91cc\uff0c1\u4e2a\u6587\u4ef6\u91cc\u67092\u6761\u8bb0\u5f55\uff0c\u6bcf\u6761\u8bb0\u5f55\u662f\u539f\u6765\u76841\u4e2a\u6570\u636e\u96c6\u3002\n# \u4f46\u662fcombine_df\u6ca1\u6709\u7528\u5230\u3002","262317de":"train_df_copy = train_df\ntrain_df_copy.shape","254d3343":"train_df_copy = train_df\ntrain_df_copy.combine_first(test_df)\n# \u7528test\u586b\u5145train\uff0c\u8bad\u7ec3\u62df\u5408\u6a21\u578b\u4f1a\u5bfc\u81f4\u6570\u636e\u6cc4\u9732\uff1f\u56e0\u4e3atest\u6570\u636e\u5df2\u7ecf\u8fdb\u5165\u8bad\u7ec3\u73af\u8282\u4e86\u3002\n# \u7528test_df\u7684\u6570\u636e\u586b\u5145train_df_copy\u7684\u7f3a\u5931\u503c\uff0c\u662f\u4e00\u79cd\u586b\u8865\u7f3a\u5931\u503c\u7684\u65b9\u6cd5\u3002","b2eee637":"train_df.columns","24b2f618":"test_df.columns","685f0586":"#to know what type of data columns hold ; 'object' type means they hold string values\ntrain_df.dtypes","da983da7":"test_df.dtypes","b01126cb":"train_df.info()","35387147":"test_df.info()","b2f677b5":"#train_df.info(verbose=False) will give a compact version of the above output, it set to True by default(in above case).\ntrain_df.info(verbose=False)","1525edbe":"train_df.head() #by default it prints first 5 rows, any other integer can also be given inside parenthesis.","36587620":"test_df.head()","77df99c2":"train_df.describe()","168c4c63":"ax=train_df['Sex'].value_counts().plot.bar(title='Sex Distribution aboard Titanic',figsize=(8,4))\n\n#below loop is to print numeric value above the bars\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()),(p.get_x(),p.get_height()*1.005))\n\nsns.despine()  #to remove borders (by default : from top & right side)","dc115322":"sns.set(style='whitegrid')\nax=sns.kdeplot(train_df['Age'])\nax.set_title('Age Distribution aboard the Titanic')\nax.set_xlabel('<---AGE--->')","38f3e404":"print(train_df['Survived'].value_counts())\nl=['Not Survived','Survived']\nax=train_df['Survived'].value_counts().plot.pie(autopct='%.2f%%',figsize=(6,6),labels=l)\n#autopct='%.2f%%' is to show the percentage text on the plot\nax.set_ylabel('')","b273cf79":"sns.countplot(train_df['Pclass'])\nsns.despine()","1f8324f2":"sns.countplot(train_df['Embarked'])","e294cfc0":"train_df[['Sex','Survived']].groupby('Sex').mean()","b1c1566f":"train_df[['Pclass','Survived']].groupby('Pclass').mean()","40dbb58e":"train_df.groupby(['Pclass','Survived'])['Pclass'].count()","a2b497f3":"sns.countplot(x='Pclass',hue='Survived',data=train_df)","11247396":"train_df[['Embarked','Survived']].groupby('Embarked').mean()","744c8db8":"train_df[['Parch','Survived']].groupby('Parch').mean()","07531872":"train_df[['SibSp','Survived']].groupby('SibSp').mean()","d3f7e8d3":"ax=train_df[['Parch','Survived']].groupby('Parch').mean().plot.line(figsize=(8,4))\nax.set_ylabel('Survival')\nsns.despine()","0b10bd70":"ax=train_df[['SibSp','Survived']].groupby('SibSp').mean().plot.line(figsize=(8,4))\nax.set_ylabel('Survival')\nsns.despine()","f3513b87":"a=sns.FacetGrid(train_df,col='Survived')\na.map(sns.distplot, 'Age')","6ac662ce":"a=sns.FacetGrid(train_df,col='Pclass',row='Survived')\na.map(plt.hist,'Age')","cfa14d5d":"train_df['Embarked'].value_counts()","33ff2334":"a=sns.FacetGrid(train_df,col='Embarked')\na.map(sns.distplot,'Survived')","7af9c3a8":"train_df.groupby(['Embarked','Survived'])['Embarked'].count()","fb5f6358":"a=sns.FacetGrid(train_df,col='Embarked')\na.map(sns.pointplot, 'Pclass','Survived','Sex') #colum order is x='Pclass', y='Survived', hue='Sex'\na.add_legend()","8960ad3d":"train_df.groupby(['Embarked','Sex'])['Embarked'].count()","e31c3433":"a=sns.FacetGrid(train_df,col='Survived')\na.map(sns.barplot,'Sex', 'Fare')","19bf9850":"combined_df[0].head(3) #[0] is train_df","10ebb906":"combined_df[1].head(3)  #[1] is test_df","b182381b":"print('training data dimensions :',train_df.shape)\nprint('testing data dimensions :', test_df.shape)\nprint('combined data\\'s dimension are :\\n',combined_df[0].shape,'\\n',combined_df[1].shape)","e8cf1ea0":"train_df[['PassengerId','Name','Ticket','Cabin']].head()","d6e617ba":"#removing mentioned columns from dataset\ntrain_df=train_df.drop(['Name','Ticket','Cabin','SibSp','Parch','PassengerId'],axis=1)\ntest_df=test_df.drop(['Name','Ticket','Cabin','SibSp','Parch'],axis=1)","be84b7db":"# the combined data\ncombined_df=[train_df, test_df]","5a59583c":"#lets check the new dimensions\nprint('new training data dimensions :',train_df.shape)\nprint('new testing data dimensions :', test_df.shape)\nprint('new combined data\\'s dimension are :\\n',combined_df[0].shape,'\\n',combined_df[1].shape)","76272915":"train_df.head(3)","bde6c154":"#checking for any null values\ntrain_df.isnull().any() #True means null present","3173ed08":"test_df.isnull().any()","73790ee1":"# age columns\nprint('mean age in train data :',train_df['Age'].mean())\nprint('mean age in test data :',test_df['Age'].mean())","8027fa9d":"#replacing null values with 30 in age column\nfor df in combined_df:\n    df['Age']=df['Age'].replace(np.nan,30).astype(int)","8439338e":"train_df['Embarked'].value_counts()","77b81533":"#most people embarked from 'S'. So, we'll replace the missing missing Embarked value by 'S'.\ntrain_df['Embarked']=train_df['Embarked'].replace(np.nan,'S')\n# \u5e74\u9f84\u7528\u5e73\u5747\u503c\u3001\u4e0a\u8239\u7528\u6700\u591a\u7684\u66ff\u6362\u7f3a\u5931\u503c\uff0c\u7528\u6700\u53ef\u80fd\u7684\u503c\u66ff\u6362\u7f3a\u5931\u503c\u3002","4d84d382":"#finding mean fare in test data\ntest_df['Fare'].mean()","6d9a0648":"#replace missing fare values in test data by mean\ntest_df['Fare']=test_df['Fare'].replace(np.nan,36).astype(int)\n# \u7968\u4ef7\u7684\u7f3a\u5931\u503c\u7528\u5e73\u5747\u503c\u66ff\u6362\u3002","d1d7e8ee":"combined_df=[train_df,test_df]\nfor df in combined_df:\n    print(df.isnull().any()) #bool value = False means that there are no nulls in the column.\n# \u5904\u7406\u5b8c\u4e86\u7f3a\u5931\u503c\u4ee5\u540e\u68c0\u67e5\u662f\u5426\u5168\u90e8\u5904\u7406\u5b8c\u6210\u4e86\uff0c\u518d\u6ca1\u6709\u7f3a\u5931\u503c\u4e86\u3002","51f61db0":"#will code female as 1 and male as 0\nfor df in combined_df:\n    df['Sex']=df['Sex'].map({'female':1,'male':0}).astype(int)","1a2e8cc5":"train_df.head(3)","71c2d9d8":"#coding Embarked column as: S=2, C=1, Q=0\nfor df in combined_df:\n    df['Embarked']=df['Embarked'].map({'S':2,'C':1,'Q':0}).astype(int)","bba4c291":"train_df.head(3)","99e5edfb":"#binning or making bands of age into intervals and then assigning labels to them(encoding the bands as 0,1,2,3,4)\n#\u5c06\u5e74\u9f84\u6bb5\u5206\u4e3a\u591a\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u4e3a\u5176\u5206\u914d\u6807\u7b7e\uff08\u5c06\u5e74\u9f84\u6bb5\u7f16\u7801\u4e3a0\u30011\u30012\u30013\u30014\uff09\nfor df in combined_df:\n    df['Age']=pd.cut(df['Age'],5,labels=[0,1,2,3,4]).astype(int) #pandas cut will help us divide age in bins","754e6b6d":"train_df.head(3)","fdb4db2f":"#binning fares and assigning label 0,1,2,3 to their respective bins\nfor df in combined_df:\n    df['Fare']=pd.qcut(df['Fare'],4,labels=[0,1,2,3]).astype(int)","0d78f9dc":"train_df.head(3)","a9153984":"test_df.head(3)","9bb0668e":"X_train=train_df.drop('Survived',axis=1)\nY_train=train_df['Survived']\n\n#X_train is the entire training data except the Survived column, which is separately stored in Y_train. We will use these to train our MODEL !\n\nX_test=test_df.drop('PassengerId',axis=1).copy()\n#X_test is the test data, for on which we will apply model and predict the \"SURVIVED\" column for its entries.","21c9ecc2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","17823f63":"#first applying Logistic Regression\n\nlg = LogisticRegression()\nlg.fit(X_train, Y_train)\nY_pred1 = lg.predict(X_test)\n# accu_lg = (lg.score(X_train, Y_train))\naccu_lg = lg.score(X_test, Y_pred1)\nround(accu_lg*100,2)","c82b2a5c":"#applying decision tree\n\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train, Y_train)\nY_pred2 = dtree.predict(X_test)\naccu_dtree = (dtree.score(X_train, Y_train))\nround(accu_dtree*100,2)","0c947227":"#applying random forest\n\nrafo = RandomForestClassifier(n_estimators=100)\nrafo.fit(X_train, Y_train)\nY_pred3 = rafo.predict(X_test)\naccu_rafo = rafo.score(X_train, Y_train)\nround(accu_rafo*100,2)","d30636e6":"rafo = RandomForestClassifier(n_estimators=1000, random_state=0)\nrafo.fit(X_train, Y_train)\nY_pred4 = rafo.predict(X_test)\naccu_rafo = rafo.score(X_train, Y_train)\nround(accu_rafo*100,2)","00d44c5e":"# Y_pred4 == Y_pred3\n\nfrom xgboost import XGBRegressor\nrafo = XGBRegressor(n_estimators=1000, random_state=0)\nrafo.fit(X_train, Y_train)\nY_pred5 = rafo.predict(X_test)\naccu_rafo = rafo.score(X_train, Y_train)\nround(accu_rafo*100,2)","c569dffe":"# \u6a21\u578b\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u6df1\u5ea6\u5b66\u4e60\u591a\u5c42\u611f\u77e5\u673a\uff0c\u6570\u636e\u4f7f\u7528\u4e4b\u524d\u7684\u9884\u5904\u7406\u3002\nfrom sklearn.neural_network import MLPClassifier\n\n# mlp = MLPClassifier(solver='lbfgs', random_state=0).fit(X_train, Y_train)\nrafo = MLPClassifier(solver='lbfgs', max_iter=1000, random_state=0)\nrafo.fit(X_train, Y_train)\nY_pred6 = rafo.predict(X_test)\naccu_rafo = rafo.score(X_train, Y_train)\nround(accu_rafo*100, 2)\n# \u5df2\u7ecf\u8fbe\u5230\u4e86\u5176\u5b83\u6a21\u578b\u7684\u6700\u9ad8\u5f97\u5206\u3002\u6ca1\u6709\u7528\u4e0a\u9884\u6d4b\u503c\uff01\u7cfb\u7edf\u4e0d\u7ed9\u4f60test\u7684\u76ee\u6807\u503c\uff0c\u4e0a\u4f20\u6570\u636e\u540e\u7cfb\u7edf\u68c0\u67e5\u7ed3\u679c\u30022019.11.3","585503ae":"#our goal was to predict survived column for test data, and were asked to submit a dataframe with 'PassengerId' and 'Survived' columns\n\nsubmission=pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':Y_pred6})","f8b4b2fa":"submission.shape","d570c15e":"submission.head(10)","0f21823b":"submission.to_csv('submission.csv', index=False)","2a1a21d1":"# \u6a21\u578b\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u6df1\u5ea6\u5b66\u4e60\u591a\u5c42\u611f\u77e5\u673a\uff0c\u6570\u636e\u4f7f\u7528\u4e4b\u524d\u7684\u9884\u5904\u7406\u3002\nfrom sklearn.neural_network import MLPClassifier\n\n# mlp = MLPClassifier(solver='lbfgs', random_state=0).fit(X_train, Y_train)\nmlp = MLPClassifier(solver='lbfgs', max_iter=1000, random_state=0).fit(X_train, Y_train)\nY_pred6 = mlp.predict(X_test)\naccu_mlp = mlp.score(X_train, Y_train)\nround(accu_mlp*100, 2)\n# \u5df2\u7ecf\u8fbe\u5230\u4e86\u5176\u5b83\u6a21\u578b\u7684\u6700\u9ad8\u5f97\u5206\u3002\u6ca1\u6709\u7528\u4e0a\u9884\u6d4b\u503c\uff01\u7cfb\u7edf\u4e0d\u7ed9\u4f60test\u7684\u76ee\u6807\u503c\uff0c\u4e0a\u4f20\u6570\u636e\u540e\u7cfb\u7edf\u68c0\u67e5\u7ed3\u679c\u30022019.11.3","6ed9b01c":"c = Y_pred6 == Y_pred5\n# \u795e\u7ecf\u7f51\u7edc\u4e0e\u5176\u5b83\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\u5bf9\u6bd4\u7684\u767e\u5206\u6570\n# 1.LogiticReg_84.69, 2.decitionTree_98.56, 3.RanomForest_95.53, \n# 4.RandomForest_estimator=1000_96.41, 5.xgboost_0\nc[0]\nj = 0\nfor i in c:\n    if i ==True:\n        j = j+1\nprint(len(c), j, round(j\/len(c)*100,2))","5cdc0f99":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u201c\u59d3\u540d\u201d\u3001\u201c\u5ba2\u8231\u201d\u548c\u201c\u7968\u52a1\u201d\u680f\u662f\u968f\u673a\u7684\uff0c\u5bf9\u4e58\u5ba2\u7684\u751f\u5b58\u6ca1\u6709\u5176\u4ed6\u7279\u5f81\u7684\u5f71\u54cd\u3002\u8bf4\u771f\u7684-\u201c\u540d\u5b57\u91cc\u6709\u4ec0\u4e48\uff1f\u201c\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u5220\u9664\u8fd9\u4e9b\u5217\uff08\u5728\u4e0b\u9762\u5b8c\u6210\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u6211\u4eec\u7684\u5206\u6790\u6ca1\u6709\u5e2e\u52a9\u3002\n\n\u53e6\u5916\uff0c\u6211\u4eec\u5728\u524d\u9762\u770b\u5230\uff0csibsp\uff0cparch\u5bf9\u4e58\u5ba2\u7684\u751f\u5b58\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u6240\u4ee5\u628a\u5b83\u4eec\u4e5f\u53bb\u6389\u3002\n\n\u6ce8\u610f\uff1a\u6211\u4eec\u8fd8\u5c06\u4ece\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u5220\u9664\u4e58\u5ba2ID\u3002","36524c2e":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4e58\u5ba2\u7b49\u7ea7\u8d8a\u9ad8\uff0c\u5b58\u6d3b\u7387\u5c31\u8d8a\u9ad8\u3002","5b1bbf44":"Since mean age in both datasets is near 30, we'll replace null values with 30.","c1261201":"\u4e0a\u56fe\u663e\u793a\uff0c\n\n\n\n* \u5927\u591a\u6570\u4eba\u53e3\u90fd\u572820-40\u5c81\u5e74\u9f84\u6bb5\u3002\n\n* \u5e7c\u513f+\u513f\u7ae5\u4eba\u6570\u8d85\u8fc7\u8001\u5e74\u4eba\uff08>60\u5c81\uff09","81c798c2":"\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u5730\u5904\u7406\u4e86\u7a7a\u503c\u3002\n\n\u5982\u6211\u4eec\u6240\u77e5\uff0c\u6709\u4e9b\u4e13\u680f\u6709\u5206\u7c7b\u4ef7\u503c\uff0c\u5982\u6027\u522b\uff0c\u7c7b\u522b\uff0c\u767b\u8239\u3002\n\n\u8fd9\u4e9b\u5217\u4e2d\u7684\u503c\u53ef\u4ee5\u201c\u5206\u7c7b\u201d\u6216\u653e\u5165\u7279\u5b9a\u7c7b\u522b\u3002\u4f8b\u5982\uff1a\u6211\u4eec\u7684\u6570\u636e\u96c6\u4e2d\u7684\u6027\u522b\u53ef\u4ee5\u5206\u4e3a\u7537\u6027\u6216\u5973\u6027\uff0c\u540c\u6837\u767b\u8239\u4e5f\u53ef\u4ee5\u5206\u4e3aS\u3001Q\u3001C\u3002\n\n\u6211\u4eec\u73b0\u5728\u5c06\u628a\u8fd9\u4e9b\u8f6c\u6362\u6210\u6570\u5b57\u6570\u636e\uff0c\u6216\u8005\u5c06\u5b83\u4eec\u7f16\u7801\u3002\u5982\u4e0b\u6240\u8ff0\u3002\u8fd9\u88ab\u79f0\u4e3a**\u7f16\u7801**","bb345023":"\u4ece\u4e0a\u9762\u7684\u6761\u5f62\u56fe\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u7684\u7537\u6027\u4eba\u53e3\u8d85\u8fc7\u4e86\u5973\u6027\u4eba\u53e3\u3002\u4f46\u662f\u4ed6\u4eec\u7684\u5b58\u6d3b\u7387\u662f\u591a\u5c11\uff1f\u6211\u4eec\u4f1a\u67e5\u51fa\u6765\u7684\u3002","a31d96b6":"### \u5148\u770b\u770b\u6211\u4eec\u7684\u6570\u636e\uff01","e791fe45":"\u4ece\u4e0a\u8868\u6211\u4eec\u63a8\u65ad\uff0c\n\n\n\n* 1\u7ea7\u4e58\u5ba2\u7684\u5b58\u6d3b\u7387\u6700\u9ad8\u3002\u6b64\u5916\uff0c1\u7ea7\u4e58\u5ba2\u5b58\u6d3b\u7387\u6700\u9ad8\u3002\n\n* \u5c3d\u7ba13\u7ea7\u7684\u4e58\u5ba2\u6700\u591a\uff0c\u4f46\u4ed6\u4eec\u7684\u751f\u5b58\u7387\u6700\u4f4e\uff0c\u5c3d\u7ba1\u4e0e2\u7ea7\u76f8\u6bd4\uff0c\u8fd9\u4e2a\u6570\u5b57\u5f88\u9ad8\uff01\n\n* \u4e0a\u9762\u7684\u6761\u5f62\u56fe\u53ef\u4ee5\u8bc1\u5b9e\u3002\n\n* \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c\u4e58\u5ba2\u65c5\u884c\u7684PClass\u5728\u4ed6\u4eec\u7684\u751f\u5b58\u4e2d\u626e\u6f14\u4e86\u4e00\u4e2a\u89d2\u8272\u3002","5f3378b8":"\u4e0a\u8868\u6e05\u695a\u5730\u8868\u660e\uff0c\u5973\u6027\u4e58\u5ba2\u7684\u5b58\u6d3b\u7387\u8fdc\u8fdc\u9ad8\u4e8e\u7537\u6027\u4e58\u5ba2\u3002","5f0f7927":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n     \n\n# Any results you write to the current directory are saved as output.","c306e0a9":"\u6211\u4eec\u6ce8\u610f\u5230\uff1a\n\n* \u903b\u8f91\u56de\u5f52\u5f97\u5206\u6700\u4f4e\n\n* \u68af\u5ea6\u63d0\u5347\u5f97\u5206\u66f4\u4f4e # My test\n\n* \u51b3\u7b56\u6811\u548c\u968f\u673a\u68ee\u6797\u7684\u5f97\u5206\u76f8\u4f3c\u3002","856f8af1":"\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5927\u591a\u6570\u4eba\uff08\u8d85\u8fc7400\u4eba\uff09\u57283\u7ea7\u65c5\u884c\uff0c\u5176\u6b21\u662f1\u7ea7\uff08~200\u4eba\uff09\u3002\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\u57fa\u4e8epclass\u7684\u751f\u5b58\u673a\u4f1a\uff01","15d265a8":"\u7a7a\u503c\u4f1a\u5e72\u6270\u6211\u4eec\u7684\u8bad\u7ec3\u548c\u9884\u6d4b\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u5fc5\u987b\u88ab\u79fb\u9664\u6216\u586b\u5145\u76f8\u5173\u7684\u3001\u5408\u9002\u7684\u6570\u636e\u3002\n\n\u4e0a\u9762\u7684\u7ed3\u679c\u663e\u793a\uff0c\u54ea\u4e9b\u5217\u7684\u503c\u4e3a\u7a7a\u3002\u6211\u4eec\u5c06\u9010\u4e00\u7ea0\u6b63\u3002","fa51e517":"\u5982\u4e0a\u6240\u793a\uff0c\u201c\u767b\u8239\u201d\u5217\u5df2\u66f4\u6539\uff0cS\u3001C\u548cQ\u5df2\u7f16\u7801\u6216\u66f4\u6539\u4e3a\u6570\u503c\u3002\n\n\u6211\u4eec\u4ece\u65e9\u671f\u7684\u5206\u6790\u4e2d\u77e5\u9053\uff0c\u5e74\u9f84\u662f\u4e58\u5ba2\u751f\u5b58\u7684\u4e00\u4e2a\u56e0\u7d20\u3002\n\n\u5e74\u9f84\u503c\u7684\u8303\u56f4\u4e5f\u5f88\u9ad8\uff08\u4ece0.42\u523080\uff09\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u5e74\u9f84\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5e74\u9f84\u7ec4\/\u5e74\u9f84\u6bb5\uff0c\u4ee5\u4fbf\u4e8e\u8bad\u7ec3\u548c\u9884\u6d4b\u3002\u8fd9\u53eb**BINNING**\u5206\u7bb1\u3002","9683588c":"\u4e0a\u9762\u7684\u60c5\u8282\u548c\u7ed3\u679c\u5206\u6790\u201c\u4e0a\u8239\u201d\u4ee5\u53ca\u5b83\u662f\u5426\u5f71\u54cd\u751f\u5b58\u3002\u6211\u4eec\u53d1\u73b0\uff1a\n\n\u4ece\u6570\u91cf\u4e0a\u6765\u8bf4\uff0c\u6700\u5927\u7684\u751f\u5b58\u548c\u6b7b\u4ea1\u90fd\u6765\u81ea\u4e8e\u4ece\u201cS\u201d\u51fa\u53d1\u7684\u4e58\u5ba2\u3002\n\n\u4e0e\u201cq\u201d\u548c\u201cc\u201d\u76f8\u6bd4\uff0c\u201cs\u201d\u6210\u5458\u7684\u5b58\u6d3b\u7387\u8f83\u9ad8\u3002\n\n\u4ece\u201cQ\u201d\u51fa\u53d1\u7684\u4e58\u5ba2\u5b58\u6d3b\u7387\u6700\u4f4e\u3002","1fd75d27":"\u89c2\u5bdf\u4e0a\u8ff0\u56fe\u4e2d\u7684\u5cf0\u503c\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\n\n* \u8bb8\u591a\u5e7c\u513f+10\u5c81\u4ee5\u4e0b\u7684\u513f\u7ae5\u5e78\u5b58\u4e0b\u6765\u3002\n\n* \u8bb8\u591a20-25\u5c81\u7684\u9752\u5c11\u5e74\u6ca1\u6709\u6d3b\u4e0b\u6765\n\n* \u8bb8\u591a\u4e2d\u5e74\u4e58\u5ba2\uff0c30-45\u5c81\u5e78\u5b58\u4e0b\u6765\u3002","a1f5fac9":"\u4ece\u4e0a\u9762\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\n\n* \u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u7684\u65c5\u884c\u8005\u5e73\u5747\u5e74\u9f84\u7ea6\u4e3a30\u5c81\u3002\n\n* \u6700\u5927\u5e74\u9f8480\u5c81\uff0c\u6700\u5c0f\u5e74\u9f840.42\u5c81\uff08\u51e0\u4e2a\u6708\u5927\u7684\u5a74\u513f\uff01\uff09\n\n* \u5e73\u5747\u5b58\u6d3b\u7387\u4e3a0.38\uff0c\u8fd9\u610f\u5473\u7740\u4e58\u5ba2\u7684\u5b58\u6d3b\u7387\u4f4e\u4e8e50%\u3002[\u6ce8\uff1a1\u8868\u793a\u5b58\u6d3b\uff0c0\u8868\u793a\u672a\u5b58\u6d3b]\n\n* \u5e73\u5747\u7968\u4ef7\u7ea6\u4e3a32\u5143\uff0c\u6700\u9ad8\u7968\u4ef7\u4e3a512\u5143\u3002\u53e6\u5916\uff0c\u4ece\u8d39\u7528\u7684\u6807\u51c6\u504f\u5dee\u6765\u770b\uff0c\u4f3c\u4e4e\u8d39\u7528\u5dee\u5f02\u5f88\u5927\u3002\n\n### \u8fdb\u4e00\u6b65\u5206\u6790\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5bf9\u6570\u636e\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u7684\u5b58\u6d3b\u7387\uff0c\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u627e\u51fa\u5bfc\u81f4\u4e00\u4e2a\u4eba\u5b58\u6d3b\uff08\u5b58\u6d3b=1\uff09\u7684\u6240\u6709\u56e0\u7d20\uff08\u7279\u5f81\uff09\u3002\n\n\u5bf9\u4e8e\u8fd9\u6837\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u56fe\u662f\u6700\u597d\u7684\uff01","0c1aa4d5":"\u6d4b\u8bd5\u6570\u636e\u201cFare\u201d\u5217\u4e2d\u7684\u7f3a\u5931\u503c\u3002\u73b0\u5728\u6211\u4eec\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898","ae18cb90":"\u5982\u4e0a\u6240\u793a-\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u5217\u7684\u540d\u79f0\uff0c\u4ece\u4e2d\u53ef\u4ee5\u660e\u663e\u770b\u51fa\u6d4b\u8bd5\u6570\u636e\u7f3a\u5c11\u201c\u5b58\u6d3b\u201d\u5217\uff0c\u6211\u4eec\u7684**\u76ee\u6807\u662f\u9884\u6d4b\u8be5\u5217\u3002**\n\n\u7ed3\u679c\u68c0\u9a8c\u7531\u7f51\u7ad9\u505a\uff0c\u81ea\u5df1\u53ea\u80fd\u63d0\u4f9b\u7ed9\u7f51\u7ad9\u9884\u6d4b\u7ed3\u679c\uff08\u662f\u5426\u5b58\u6d3b1\/0\uff09\u3002","dbed0c9e":"\u4ece\u4e0a\u9762\u7684\u4e24\u5f20\u8868\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff1asibsp\uff0c\u5373\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u7684\u5144\u5f1f\u59d0\u59b9\u548c\u914d\u5076\u7684\u6570\u91cf\uff0cparch\u2014\u2014\u7236\u6bcd\/\u5b69\u5b50\u7684\u6570\u91cf\u6ca1\u6709\u663e\u793a\u51fa\u4efb\u4f55\u751f\u5b58\u6a21\u5f0f\/\u8d8b\u52bf\uff0c\u610f\u601d\u662f\uff1a\u770bparch\u548c\u751f\u5b58\u8868\uff0c\u7b2c\u4e00\u4e2a\u751f\u5b58\u7387\u5148\u589e\u52a0\uff0c\u7136\u540e\u51cf\u5c11\uff0c\u7136\u540e\u518d\u6b21\u589e\u52a0\u3002\u4e0b\u9762\u7684\u56fe\u8868\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\u3002","aab124be":"\u8d85\u8fc7600\u540d\u4e58\u5ba2\u4ece\u201cS\u201d\u4e0a\u8239\uff0c\u968f\u540e\u662f\u201cC\u201d\u548c\u201cQ\u201d\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u53d1\u73b0\u8fd9\u4e9b\u5217\u662f\u5982\u4f55\u4e0e\u751f\u5b58\u76f8\u5173\u7684\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002","984faf00":"### \u52a0\u8f7d\u6570\u636e\uff01\n\n\u6211\u4eec\u67093\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u7528\u4e8e\u8bad\u7ec3\uff08train.csv\uff09\uff0c\u4e00\u4e2a\u7528\u4e8e\u6d4b\u8bd5\uff08test.csv\uff09\uff0c\u4e00\u4e2a\u793a\u4f8b\u63d0\u4ea4\u6587\u4ef6\uff08gender_submission.csv\uff09\u3002\u6211\u4eec\u5c06\u7528pandas\u9605\u8bfb\u524d\u4e24\u4e2a\u6587\u4ef6\u3002","6f4420d4":"# read data\ntrain = pd.read_csv(dirname+ '\/' + filenames[0])\ngender_submission =  pd.read_csv(dirname+ '\/' + filenames[1])\ntest =  pd.read_csv(dirname+ '\/' + filenames[2])\nprint('train.shape: ', train.shape)\nprint('gender_submission_sample.shape: ', gender_submission.shape)\nprint('test.shape: ', test.shape)\nX = train.drop('Survived', axis=1)\ny = train['Survived']\nprint('X.shape: ', X.shape)\nprint('y.shape: ', y.shape)","9a0ba081":"\u4e0a\u8ff0\u56fe\u8868\u8bc1\u5b9e\uff1a\n\n\u90a3\u4e9b\u4ed8\u4e86\u66f4\u9ad8\u7968\u4ef7\u7684\u4eba\u6d3b\u4e0b\u6765\u7684\u673a\u4f1a\u66f4\u5927\u3002\n\n\u800c\u4e14\uff0c\u5973\u6027\u6bd4\u7537\u6027\u652f\u4ed8\u66f4\u9ad8\u7684\u7968\u4ef7\u3002\n\n\u6570\u636e\u6574\u7406(\u4e89\u5435\u3001\u4e89\u8bba)\n\n\u6570\u636e\u6574\u7406\u5305\u62ec\u6e05\u7406\u3001\u7ec4\u7ec7\u6570\u636e\uff0c\u4f7f\u5176\u66f4\u9002\u5408\u673a\u5668\u5b66\u4e60\u3002\n\n\u5b83\u6d89\u53ca\u5220\u9664\u7a7a\u503c\u3001\u6620\u5c04\u3001\u7f16\u7801\u7b49\u6b65\u9aa4\u3002\n\n\u8bb0\u4f4f\uff0c\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u7ed3\u5408\u4e86\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u89c6\u56fe\u3002","bc369889":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u201c\u6027\u522b\u201d\u680f\u5df2\u7ecf\u6539\u53d8\uff0c\u7537\u6027\u88ab\u7f16\u7801\u4e3a0\uff0c\u5973\u6027\u88ab\u7f16\u7801\u4e3a1\u3002","5834415f":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (X.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","8f9926ed":"*Thank You*","e07a5de2":"### Hello everyone,\n\n* This is my first kernel on the platform and also my first competition submission.\n* Being a beginner myself, I've tried to make this kernel simple and easy to understand for other fellow beginners who have just started.\n* Feel free to write down your opinions & comments.\n\n### LOADING LIBRARIES\n\nThe first step is to load all the necessary packages and libraries that will be used in this kernel. This includes :\n\n* Numpy & Pandas for handling our Data & DataFrames.\n* Matplotlib, Seaborn for visualitsations.\n* Machine learning packages (from SKlearn) for training and prediction.","f50f6a36":"# from Titanic Survival : A beginner's Analysis\n# https:\/\/www.kaggle.com\/cvarun\/titanic-survival-a-beginner-s-analysis\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50d14b1b":"### \u4e86\u89e3\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u3002\n\n* \u8fd9\u5c06\u662f\u6211\u4eec\u5c06\u6570\u636e\u8bfb\u53d6\u5230\u6570\u636e\u5e27\u540e\u7684\u7b2c\u4e00\u6b65\u3002\n\n* \u6211\u4eec\u5e94\u8be5\u77e5\u9053\u6570\u636e\u96c6\u6709\u591a\u5c11\u884c\u3001\u5217\u3001\u5b83\u4eec\u7684\u540d\u79f0\u3001\u5b58\u50a8\u7684\u503c\u4ee5\u53ca\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n* \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4efb\u4f55\u5206\u6790\u7684\u7b2c\u4e00\u90e8\u5206","7e0ec4d7":"\u7531\u4e0a\u53ef\u77e5\uff0c\u63d0\u4ea4\u6587\u4ef6\u7b26\u5408\u8981\u6c42\u3002\u73b0\u5728\u5c06\u5176\u5199\u5165csv\u6587\u4ef6\u683c\u5f0f\u3002","fe210491":"\u540c\u6837\uff0c\u6211\u4eec\u65e9\u5148\u53d1\u73b0\uff0c\u7968\u4ef7\u5728\u751f\u5b58\u4e2d\u8d77\u7740\u91cd\u8981\u4f5c\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u7968\u4ef7\u5206\u4e3a\u4e0d\u540c\u7684\u7ec4\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u5e74\u9f84\u6240\u505a\u7684\u90a3\u6837\u3002","ccc85c55":"* \u4ece\u4e0a\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u57f9\u8bad\u6570\u636e\u7684891\u4e2a\u6761\u76ee\u4e2d\uff0c\u53ea\u6709342\u4e2a\uff08\u997c\u56fe\u4e2d\u768438%\uff09\u5b58\u6d3b\u4e86\u4e0b\u6765\uff01\n\n* 549\u540d\u4e58\u5ba2\u6216~61%\u7684\u4e58\u5ba2\u6ca1\u6709\u6210\u529f\uff01","ef03cf0b":"\u4e0a\u8239vs\u5e78\u5b58\u8868\u683c\u663e\u793a\uff1a\n\n* \u4ece\u201cC\u201d\u51fa\u53d1\u7684\u4eba\u751f\u5b58\u7387\u5f88\u9ad8\u3002\n\n* \u540e\u8ddf\u201cq\u201d\u548c\u201cs\u201d","887482cb":"# Fill in the line below: How many rows are in the training data?\nnum_rows = X.shape[0]\n\n# Fill in the line below: How many columns in the training data\n# have missing values?\nnum_cols_with_missing = missing_val_count_by_column[missing_val_count_by_column > 0].count()\n\n# Fill in the line below: How many missing entries are contained in \n# all of the training data?\ntot_missing = missing_val_count_by_column[missing_val_count_by_column > 0].sum()\n\nprint('tot_missing: ', tot_missing)","d3650fba":"\u4e0a\u9762\u7684\u60c5\u8282\u8fdb\u4e00\u6b65\u52a0\u5f3a\u4e86\u6211\u4eec\u4e4b\u524d\u7684\u89c2\u5bdf\uff1a\n\n\u5728\u8fd9\u4e9b\u7ea7\u522b\u4e2d\uff0c3\u7ea7\u7684\u6b7b\u4ea1\u4eba\u6570\u6700\u591a\uff0c20-30\u5c81\u7ec4\u4e5f\u662f\u5982\u6b64\u3002\n\n1\u7ea7\u4e58\u5ba2\u6b7b\u4ea1\u4eba\u6570\u6700\u4f4e\u3002\n\n1\u7c7b\u4e58\u5ba2\u7684\u5b58\u6d3b\u7387\u6700\u9ad8\uff0c30-40\u5c81\u5e74\u9f84\u7ec4\u4e5f\u662f\u5982\u6b64\u3002","4546af22":"\u4e0a\u9762\u7684\u70b9\u56fe\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4f46\u662f\u5f88\u7b80\u5355\uff0c\u5f88\u6709\u6d1e\u5bdf\u529b\u3002\n\n\u5728\u4eceS\u767b\u8239\u7684\u4e58\u5ba2\u4e2d\uff0c\u5973\u6027\u6bd4\u7537\u6027\u5b58\u6d3b\u7387\u9ad8\u3002\u540c\u6837\uff0c\u6b63\u5982\u7b2c\u4e00\u4e2a\u60c5\u8282\u4e2d\u6240\u770b\u5230\u7684\uff0c\u5f53\u6211\u4eec\u4ece\u7b2c1\u7ea7\u5230\u7b2c3\u7ea7\uff0c\u7537\u5973\u7684\u5b58\u6d3b\u7387\u90fd\u5728\u4e0b\u964d\u3002\uff08\u6ce8\uff1a2-3\u7ea7\u5973\u6027\u7684\u5b58\u6d3b\u7387\u660e\u663e\u4e0b\u964d\uff09\n\n\u7b2c\u4e09\u4e2a\u60c5\u8282\uff0c\u4e5f\u6709\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff0c\u9ad8pclass\u7684\u5973\u6027\u751f\u5b58\u7387\u5f88\u9ad8\u3002\u4f46\u662f\uff0c\u4e0e2\u7ea7\u548c3\u7ea7\uff08\u5947\u602a\uff09\u76f8\u6bd4\uff0c3\u7ea7PClass\u7684\u7537\u6027\u5b58\u6d3b\u7387\u7a0d\u9ad8\u3002\n\n\u73b0\u5728\u4ece\u7b2c\u4e8c\u4e2a\u60c5\u8282\u5f00\u59cb\uff0c\u8fd9\u4e2a\u60c5\u8282\u662f\u4e0d\u5bfb\u5e38\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7537\u6027\u6bd4\u5973\u6027\u5b58\u6d3b\u5f97\u66f4\u591a\u3002","d91d75ac":"\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\uff0c\u201c\u4e0a\u8239\u201d\u4e5f\u6709\u7f3a\u5931\u503c\u3002","5c0853ed":"\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5df2\u7ecf\u4fee\u6539\u4e86\u6211\u4eec\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\uff0c\u4f7f\u5176\u9002\u5408\u6211\u4eec\u7684\u6a21\u578b\uff0c\u6b63\u786e\u5730\u8fdb\u884c\u57f9\u8bad\u548c\u9884\u6d4b\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u6570\u636e\u6846\u67b6\u770b\u8d77\u6765\u50cf\u4e0a\u9762\u6240\u793a\u7684\u90a3\u6837\uff0c\n\n* \u5206\u7c7b\u3001\u6027\u522b\u3001\u5e74\u9f84\uff08\u5206\u8231\uff09\u3001\u4e0a\u8239\u548c\u7968\u4ef7\uff08\u5206\u8231\uff09\u5c06\u662f\u6211\u4eec\u7684\u7279\u5f81\u96c6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e9b\u7279\u5f81\u96c6\u5c06\u5bf9\u4e58\u5ba2\u7684\u751f\u5b58\u8d77\u4f5c\u7528\uff0c\u5e76\u5c06\u7528\u4e8e\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u3002\n\n### \u5efa\u6a21\u4e0e\u9884\u6d4b\n\n* \u5df2\u4f7f\u7528\u4ee5\u4e0b\u6a21\u578b\uff1a\n\n* \u5bf9\u6570\u51e0\u7387\u56de\u5f52\n\n* \u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\n\n* \u51b3\u7b56\u6811\u5206\u7c7b\u5668\n\n* \u795e\u7ecf\u7f51\u7edc\u591a\u5c42\u611f\u77e5\u673a","f0977e76":"\u4ece\u4e0a\u9762\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u54ea\u4e9b\u5217\u5305\u542b\u201cint\u201d\u3001\u201cfloat\u201d\u548c\u201cstrings\u201d\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5728\u524d\u9762\u5bf9\u5b83\u4eec\u8fdb\u884c\u76f8\u5e94\u7684\u8f6c\u6362\uff0c\u4ee5\u4fbf\u673a\u5668\uff08\u6a21\u578b\uff09\u8fdb\u884c\u8bad\u7ec3\u3001\u9884\u6d4b\u7b49\u3002\n\n\u53e6\u4e00\u79cd\u83b7\u5f97\u6709\u5173\u6570\u636e\u96c6\u8be6\u7ec6\u4fe1\u606f\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u201c.info\uff08\uff09\u201d\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002","b440b372":"\u5982\u4e0a\u56fe\u6240\u793a-\u8fd9\u662f\u6570\u636e\u5e27\u4e2d\u6570\u636e\u7684\u5916\u89c2-\u6211\u4eec\u521b\u5efa\u7684train_df\u548ctest_df\u3002\u592a\u597d\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\uff1a\n\n* \u5206\u7c7b\u53d8\u91cf\u5f88\u5c11\u3002\n\n* pclass\u67093\u4e2a\u7c7b\u522b\uff0c\u53731\u30012\u548c3\n\n* \u6027\u522b-\u7537\u6027\uff0c\u5973\u6027\n\n* \u4e0a\u8239\u67093\u4e2a\u7c7b\u522b-S\u3001Q\u3001C\n\n* \u5b58\u6d3b2-1\uff08\u5b58\u6d3b\uff09\u62160\uff08\u672a\u5b58\u6d3b\uff09\n\n* \u5176\u4ed6\u5217\uff08\u5982\u5e74\u9f84\u3001\u673a\u7968\u3001\u7968\u4ef7\uff09\u5177\u6709\u8fde\u7eed\u7684\u6570\u503c\u3002","028519f6":"\u4e0a\u8ff0sibsp vs\u751f\u5b58\u66f2\u7ebf\u9996\u5148\u589e\u52a0\uff08sibsp 0\u81f31\uff09\uff0c\u7136\u540e\u4e0b\u964d\uff08sibsp 1\u81f35\uff09\uff0c\u6700\u7ec8\u53d8\u4e3a\u96f6\u3002\n\n\n**\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7ed8\u5236\u4e00\u4e9b\u5173\u4e8e\u751f\u5b58\u7684\u7279\u5f81\uff0c\u770b\u770b\u5b83\u4eec\u4e0e\u751f\u5b58\u7684\u5173\u7cfb\uff0c\u5e76\u7406\u89e3\u5b83\u4eec\u7684\u60c5\u8282\u3002**","aff9b6a6":"\u4ece\u4e0a\u9762\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\u6211\u4eec\u7684\u8bad\u7ec3\u6570\u636e\u6709891\u4e2a\u6761\u76ee\uff0c\u5176\u4e2d\u201c\u5e74\u9f84\u201d\u3001\u201c\u8239\u8231\u201d\u548c\u201c\u4e0a\u8239\u201d\u5217\u7f3a\u5c11\u503c\u3002\u6211\u4eec\u7684\u6d4b\u8bd5\u6570\u636e\u6709418\u4e2a\u6761\u76ee\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u7ed9\u5b9a\u7684418\u4e2a\u6761\u76ee\uff0c\u6211\u4eec\u5fc5\u987b\u9884\u6d4b\u5b83\u4eec\u7684\u5b58\u6d3b\u7387\u3002\u5373\u4f7f\u6d4b\u8bd5\u6570\u636e\u5728\u201c\u5e74\u9f84\u201d\u3001\u201c\u7968\u4ef7\u201d\u3001\u201c\u5ba2\u8231\u201d\u5217\u4e2d\u4e5f\u7f3a\u5c11\u4e00\u4e9b\u503c\u3002"}}