{"cell_type":{"7fb93acb":"code","b83b75d8":"code","3a7c7441":"code","8c9484a4":"code","6f9735ae":"code","a6668793":"code","2f2a07d7":"code","47efb8f4":"code","42db9014":"code","8b02b473":"code","f2b4038d":"code","6971cb98":"code","c33d3723":"code","1d738988":"code","9e2c71db":"code","79a9e9e7":"code","f3eb9ffa":"code","6858a85e":"code","2ae08035":"code","32c6eaef":"code","1ae4ba33":"code","f3669810":"markdown","297f54ce":"markdown","11a566d1":"markdown","32a10d61":"markdown","aff6066d":"markdown","ca946d37":"markdown","c92a6add":"markdown","b9baf24b":"markdown"},"source":{"7fb93acb":"! pip install catboost","b83b75d8":"import gc\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","3a7c7441":"test_clean = pd.read_csv(\"..\/input\/data-without-drift\/test_clean.csv\")\ntest_clean['group'] = -1\nx = [[(0,100000),(300000,400000),(800000,900000),(1000000,2000000)],[(400000,500000)], \n     [(100000,200000),(900000,1000000)],[(200000,300000),(600000,700000)],[(500000,600000),(700000,800000)]]\nfor k in range(5):\n    for j in range(len(x[k])): test_clean.iloc[x[k][j][0]:x[k][j][1],2] = k\n\ntrain_clean = pd.read_csv(\"..\/input\/data-without-drift\/train_clean.csv\")\ntrain_clean['group'] = -1\nx = [(0,500000),(1000000,1500000),(1500000,2000000),(2500000,3000000),(2000000,2500000)]\nfor k in range(5): train_clean.iloc[x[k][0]:x[k][1],3] = k","8c9484a4":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","6f9735ae":"window_sizes = [10, 25, 50, 100, 500, 1000, 5000, 10000, 25000]\n\nfor window in window_sizes:\n    train_clean[\"rolling_mean_\" + str(window)] = train_clean['signal'].rolling(window=window).mean()\n    #train_clean[\"rolling_std_\" + str(window)]  = train_clean['signal'].rolling(window=window).std()\n    train_clean[\"rolling_var_\" + str(window)]  = train_clean['signal'].rolling(window=window).var()\n    train_clean[\"rolling_min_\" + str(window)]  = train_clean['signal'].rolling(window=window).min()\n    train_clean[\"rolling_max_\" + str(window)]  = train_clean['signal'].rolling(window=window).max()\n    \n    train_clean[\"rolling_min_max_ratio_\" + str(window)] = train_clean[\"rolling_min_\" + str(window)] \/ train_clean[\"rolling_max_\" + str(window)]\n    train_clean[\"rolling_min_max_diff_\" + str(window)]  = train_clean[\"rolling_max_\"  + str(window)] - train_clean[\"rolling_min_\" + str(window)]\n    \n    a = (train_clean['signal'] - train_clean['rolling_min_' + str(window)]) \/ (train_clean['rolling_max_' + str(window)] - train_clean['rolling_min_' + str(window)])\n    train_clean[\"norm_\" + str(window)] = a * (np.floor(train_clean['rolling_max_' + str(window)]) - np.ceil(train_clean['rolling_min_' + str(window)]))\n    \ntrain_clean = train_clean.replace([np.inf, -np.inf], np.nan)\ntrain_clean.fillna(0, inplace=True)","a6668793":"for window in window_sizes:\n    \n    test_clean[\"rolling_mean_\" + str(window)] = test_clean['signal'].rolling(window=window).mean()\n    #test_clean[\"rolling_std_\" + str(window)]  = test_clean['signal'].rolling(window=window).std()\n    test_clean[\"rolling_var_\" + str(window)]  = test_clean['signal'].rolling(window=window).var()\n    test_clean[\"rolling_min_\" + str(window)]  = test_clean['signal'].rolling(window=window).min()\n    test_clean[\"rolling_max_\" + str(window)]  = test_clean['signal'].rolling(window=window).max()\n    \n    test_clean[\"rolling_min_max_ratio_\" + str(window)]  = test_clean[\"rolling_min_\" + str(window)] \/  test_clean[\"rolling_max_\" + str(window)]\n    test_clean[\"rolling_min_max_diff_\"  + str(window)]  = test_clean[\"rolling_max_\"  + str(window)] - test_clean[\"rolling_min_\" + str(window)]\n    \n    a = (test_clean['signal'] - test_clean['rolling_min_' + str(window)]) \/ (test_clean['rolling_max_' + str(window)] - test_clean['rolling_min_' + str(window)])\n    test_clean[\"norm_\" + str(window)] = a * (np.floor(test_clean['rolling_max_' + str(window)]) - np.ceil(test_clean['rolling_min_' + str(window)]))\n    \ntest_clean = test_clean.replace([np.inf, -np.inf], np.nan)\ntest_clean.fillna(0, inplace=True)\n","2f2a07d7":"#train_clean['signal_median'] = train_clean.groupby('group')['signal'].median()\n#train_clean['signal_mean']   = train_clean.groupby('group')['signal'].mean()\n#train_clean['signal_min']    = train_clean.groupby('group')['signal'].min()\n#train_clean['signal_max']    = train_clean.groupby('group')['signal'].max()\n\ntrain_clean['cum_sum_signal'] = train_clean['signal'].cumsum()\ntrain_clean['cum_perc_signal']= 100*train_clean['cum_sum_signal']\/train_clean['signal'].sum()","47efb8f4":"#test_clean['signal_median'] = test_clean.groupby('group')['signal'].median()\n#test_clean['signal_mean']   = test_clean.groupby('group')['signal'].mean()\n#test_clean['signal_min']    = test_clean.groupby('group')['signal'].min()\n#test_clean['signal_max']    = test_clean.groupby('group')['signal'].max()\n\ntest_clean['cum_sum_signal'] = test_clean['signal'].cumsum()\ntest_clean['cum_perc_signal']= 100*test_clean['cum_sum_signal']\/test_clean['signal'].sum()","42db9014":"train_clean = reduce_mem_usage(train_clean)\ntest_clean  = reduce_mem_usage(test_clean)","8b02b473":"train_clean.head()","f2b4038d":"test_clean.head()","6971cb98":"y     = train_clean['open_channels']\ntrain = train_clean.drop(['open_channels'],axis=1)\ntest  = test_clean\ntrain.head()","c33d3723":"test.head()","1d738988":"del train_clean   # Delete the copy of train data.\ndel test_clean    # Delete the copy of test data.\ngc.collect()      # Collect the garbage.","9e2c71db":"id_train = train['time']\nid_test  = test['time']\n\ntrain = train.drop('time', axis = 1)\ntest  = test.drop( 'time', axis = 1)\n\nnfolds = 10\ngroups = np.array(train.signal.values)\nfolds = GroupKFold(n_splits = 10)","79a9e9e7":"'''param = {'num_leaves': 129,\n         'min_data_in_leaf': 148, \n         'objective':'regression',\n         'max_depth': 9,\n         'learning_rate': 0.005,\n         \"min_child_samples\": 24,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.7202,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.8125 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.3468,\n         \"verbosity\": -1}'''","f3eb9ffa":"%%time\nfeature_importance_df = np.zeros((train.shape[1], nfolds))\nmvalid = np.zeros(len(train))\nmfull  = np.zeros(len(test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, train.values, groups)):\n    print('----')\n    print(\"fold n\u00b0{}\".format(fold_))\n    \n    x0,y0 = train.iloc[trn_idx], y[trn_idx]\n    x1,y1 = train.iloc[val_idx], y[val_idx]\n    \n    print(y0.size, y1.size)\n    \n    pd.DataFrame(y1).to_csv('y_test_fold' + str(fold_) + '.csv', index=False)\n    \n    model = CatBoostRegressor(iterations=1000,\n                              grow_policy='Lossguide',\n                              use_best_model=True,\n                              min_data_in_leaf=100, \n                              max_depth=9,\n                              learning_rate=0.01,\n                              boosting_type=\"Plain\",\n                              subsample=0.8125,\n                              random_seed=777,\n                              loss_function='RMSE',\n                              l2_leaf_reg=0.3468,\n                              verbose=-1,\n                              early_stopping_rounds=100,\n                              task_type='GPU',\n                              bootstrap_type='Poisson')\n    \n    model.fit(x0, y0, eval_set=(x1, y1), verbose_eval=200)\n    \n    mvalid[val_idx] = model.predict(x1)\n    pd.DataFrame(mvalid).to_csv('catboost_val_preds_fold' + str(fold_) + '.csv', index=False)\n    \n    feature_importance_df[:, fold_] = model.feature_importances_\n    \n    mfull += model.predict(test) \/ folds.n_splits\n    pd.DataFrame(mfull).to_csv('catboost_preds_fold' + str(fold_) + '.csv', index=False)\n    \nprint(\"RMSE: \", np.sqrt(mean_squared_error(mvalid, y)))\nprint(\"MAE: \", mean_absolute_error(mvalid, y))","6858a85e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nximp = pd.DataFrame()\nximp['feature'] = train.columns\nximp['importance'] = feature_importance_df.mean(axis = 1)\n\nplt.figure(figsize=(14,14))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=ximp.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('CatBoost Features (avg over folds)')\nplt.tight_layout()","2ae08035":"sub = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\n#sub.head()","32c6eaef":"submission = pd.DataFrame()\nsubmission['time']  = sub['time'] #id_test\nsubmission['open_channels'] = mfull\nsubmission['open_channels'] = submission['open_channels'].round(decimals=0)   # Round the 'open_channels' values to the nearest decimal as we implemented a regressor.\nsubmission['open_channels'] = submission['open_channels'].astype(int)         # Convert the datatype of 'open_channels' from float to integer to match the requirements of submission.\nsubmission.to_csv('submission.csv', index = False,float_format='%.4f')","1ae4ba33":"submission.tail()","f3669810":"# Prepare file for the submission\nWe have to conver the 'open_channels' column to make it look like a classifier problem, we used a regressor to predict the values. For this I did:\n1. The rounding of the values predicted.\n2. Converting the datatype of 'open_channels' from float to int.","297f54ce":"# Memory Reduction\nElse the notebook will crash due to overhead of memory.","11a566d1":"# Group KFold Technique as a CV strategy.","32a10d61":"# Feature Engineering","aff6066d":"# Necessary imports","ca946d37":"# Loading the data and making bins","c92a6add":"# Train the model","b9baf24b":"# Plotting the feature importance"}}