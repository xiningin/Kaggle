{"cell_type":{"206ff20d":"code","3a14798b":"code","7828bfe9":"code","ab9e1f0a":"code","eed312fe":"code","06be5853":"code","ecc4b254":"code","e80803b5":"code","c14a2e16":"code","17c09204":"code","ece8c72e":"code","5f964bd0":"code","f03bb700":"code","513f0d08":"code","d82e749e":"code","19ae00a4":"code","e7bc9a78":"code","27879e49":"code","4d435fd6":"code","a98d4667":"code","962d083b":"code","e3306928":"code","baf1f014":"code","ce56f686":"code","d588fc31":"code","8587cc54":"markdown","298e1ca0":"markdown","334d2ae2":"markdown","d3f0b3c8":"markdown","5e602a04":"markdown"},"source":{"206ff20d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a14798b":"f = '\/kaggle\/input\/breast-cancer-gene-expression-profiles-metabric\/METABRIC_RNA_Mutation.csv'\ndf = pd.read_csv(f)\ndf","7828bfe9":"print('Clinical fields:')\nprint( df.columns[:31] )","ab9e1f0a":"df['overall_survival_months'] \ndf['overall_survival'].unique()","eed312fe":"pip install lifelines\n","06be5853":"from scipy.stats import mode\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.utils import concordance_index\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","ecc4b254":"from lifelines import KaplanMeierFitter\nfrom lifelines.datasets import load_waltons\nwaltons = load_waltons()\n\nkmf = KaplanMeierFitter(label=\"waltons_data\")\nkmf.fit(waltons['T'], waltons['E'])\nkmf.plot()","e80803b5":"print( df['overall_survival_months'].isna().sum(), df['overall_survival'].isna().sum() )\nT = df['overall_survival_months'] \nE = df['overall_survival']\n#T = df['Overall Survival (Months)']\n#E =  df['Overall Survival Status'].map({'Living':1, 'Deceased':0} )\nkmf = KaplanMeierFitter(label=\"metabric\")\nkmf.fit(T,E)\nkmf.plot()","c14a2e16":"f = 'pam50_+_claudin-low_subtype'\nprint( df[f].unique() )\ndf[f].value_counts()","17c09204":"plt.figure(figsize = (20,15))\nfor v in ['claudin-low', 'LumA', 'LumB', 'Normal', 'Her2', 'Basal']:\n    m = df[f] == v\n    T = df['overall_survival_months'][m] \n    E = df['overall_survival'][m]\n    #T = df['Overall Survival (Months)'][m]\n    #E =  df['Overall Survival Status'][m].map({'Living':1, 'Deceased':0} )\n    kmf = KaplanMeierFitter(label=v)\n    kmf.fit(T,E)\n    kmf.plot()\n    ","ece8c72e":"for c in ['her2_status', '3-gene_classifier_subtype', 'er_status_measured_by_ihc', 'er_status',\n       'tumor_other_histologic_subtype', 'hormone_therapy',\n       'inferred_menopausal_state', 'integrative_cluster',\n       'primary_tumor_laterality', 'lymph_nodes_examined_positive',\n       'mutation_count', 'nottingham_prognostic_index', 'oncotree_code',\n        'pr_status',\n       'radio_therapy',          \n         ]:\n    plt.figure(figsize = (20,5))\n    for v in df[c].unique(): #  ['claudin-low', 'LumA', 'LumB', 'Normal', 'Her2', 'Basal']:\n        m = df[c] == v\n        if m.sum() < 50: continue \n        T = df['overall_survival_months'][m] \n        E = df['overall_survival'][m]\n        #T = df['Overall Survival (Months)'][m]\n        #E =  df['Overall Survival Status'][m].map({'Living':1, 'Deceased':0} )\n        kmf = KaplanMeierFitter(label=v)\n        kmf.fit(T,E)\n        kmf.plot()\n        plt.title(c)\n","5f964bd0":"# We see that data are normalized - mean 0, std = 1\nstat = df.iloc[:,32:].describe()\nlist_c = stat.columns\nstat","f03bb700":"df.columns[:32]","513f0d08":"df.iloc[:,33:]","d82e749e":"from sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npca = PCA\nr = pca().fit_transform(X = df[list_c].values)\nf = 'pam50_+_claudin-low_subtype' # 'Pam50 + Claudin-low subtype'\nplt.figure(figsize = (20,10))\nsns.scatterplot( x=r[:,0], y=r[:,1], hue = df[f] )\nplt.title('PCA for Omics data colored by Pam50 groups')\nplt.show()","19ae00a4":"for f in df.columns[:32]:\n    plt.figure(figsize = (20,5))\n    sns.scatterplot( x=r[:,0], y=r[:,1], hue = df[f] )\n    plt.title('PCA for Omics data colored by' + f)\n    plt.show()","e7bc9a78":"cat_clinical_columns = ['chemotherapy', 'cohort', 'neoplasm_histologic_grade','hormone_therapy', 'overall_survival', 'radio_therapy', 'tumor_stage' ]\n\n#cat_clinical_columns.extend(clinical_df.select_dtypes(include=['object']).columns.tolist())\n#clinical_df[cat_clinical_columns].astype('category').describe().T\n\ndf[cat_clinical_columns].astype('category').describe().T","27879e49":"#cat_clinical_columns.extend(df.select_dtypes(include=['object']).columns.tolist())\ndf.select_dtypes(include=['object']).astype('category').describe().T","4d435fd6":"df['hras_mut'].value_counts()","a98d4667":"df['smarcb1_mut'].value_counts()","962d083b":"df['siah1_mut'].value_counts()","e3306928":"m = df['smarcb1_mut']== 'I28L'\nprint(m.sum())\ndf","baf1f014":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nd = df.select_dtypes(include=['object'])[m]\nl = []\nfor c in d.columns:\n    if d[c][m].iat[0] != '0':\n        l.append(c)\nd[l]\n","ce56f686":"list_c = df.iloc[:1,32:].select_dtypes(include=['object']).columns.to_list() # .astype('category').describe().T","d588fc31":"for c in list_c[:2]:\n    print(c)\n    print( df[c].value_counts()[:20]  )\n    print()","8587cc54":"# What is about ? \n\nAnalysis of METABRIC breast cancer data. In particular survival curves for METABRIC data.\nThere are several versions of METABRIC data on web and kaggle in particular.\nCurrent notebook uses: \nhttps:\/\/www.kaggle.com\/raghadalharbi\/breast-cancer-gene-expression-profiles-metabric\nOther kaggle datasets, \"added\"  for visiability of notebook there, but not used.\n\nNot used: \n\nhttps:\/\/www.kaggle.com\/gunesevitan\/breast-cancer-metabric\n\nhttps:\/\/www.kaggle.com\/alexandervc\/breast-cancer-omics-bulk-data\n","298e1ca0":"# Toy example - Walton Dataset built-in in \"lifelines\"  package","334d2ae2":"# Survival curves by Kaplan Meier method","d3f0b3c8":"# Omics data visualizations","5e602a04":"# Look on categorical features"}}