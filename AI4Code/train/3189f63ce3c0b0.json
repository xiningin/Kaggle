{"cell_type":{"7f9d9f15":"code","8d1488f5":"code","5fca9549":"code","be14c1d6":"code","5f2fceb4":"code","d26cffbc":"code","53b3fe5b":"code","c15d1f73":"markdown","616c082c":"markdown"},"source":{"7f9d9f15":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport cv2\nfrom skimage import color\nfrom skimage import io\nimport tensorflow as tf\nimport tflearn\nfrom tflearn.layers.core import input_data, dropout, fully_connected\nfrom tflearn.layers.conv import conv_2d, max_pool_2d\nfrom tflearn.layers.normalization import local_response_normalization\nfrom tflearn.layers.estimator import regression\nfrom tflearn.data_preprocessing import ImagePreprocessing\nfrom tflearn.data_augmentation import ImageAugmentation\nfrom tflearn.metrics import Accuracy\nimport random\nimport csv as csv\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline \n","8d1488f5":"TRAIN_DIR = '..\/input\/train\/'\nTEST_DIR = '..\/input\/test\/'\n\nIMG_SIZE = 50\ndef read_image(file_path):        \n    img= cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)\n    img= cv2.resize(img, (IMG_SIZE, IMG_SIZE), interpolation=cv2.INTER_CUBIC)\n    return img\n\ndef prep_data(images):\n    count = len(images)\n    data = np.ndarray((count, IMG_SIZE, IMG_SIZE, 1), dtype=np.uint8)\n\n    for i, image_file in enumerate(images):\n        image = read_image(image_file)\n        data[i] = image.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\n        if i%5000 == 0: print('Processed {} of {}'.format(i, count))\n    \n    return data\n\ntrain_cats = sorted(glob.glob(os.path.join(TRAIN_DIR, 'cat*.jpg')))\ntrain_dogs = sorted(glob.glob(os.path.join(TRAIN_DIR, 'dog*.jpg')))\ntrain_all = train_dogs+train_cats \n\nrandom.Random(4).shuffle(train_all)\n\ntest_all = sorted(glob.glob(os.path.join(TEST_DIR, '*.jpg')))\n\nX_train = prep_data([path for path in train_all])\nY_train = np.array([[1., 0.] if 'dog' in name else [0., 1.] for name in train_all])\n\nX_test = prep_data([path for path in test_all])\nY_test = np.array([[1., 0.] if 'dog' in name else [0., 1.] for name in test_all])","5fca9549":"convnet = input_data(shape=[None, IMG_SIZE, IMG_SIZE, 1], name='input')\nconvnet = conv_2d(convnet, 32, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\nconvnet = conv_2d(convnet, 64, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\nconvnet = conv_2d(convnet, 128, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\nconvnet = conv_2d(convnet, 64, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\nconvnet = conv_2d(convnet, 32, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\nconvnet = fully_connected(convnet, 1024, activation='relu')\nconvnet = dropout(convnet, 0.8)\nconvnet = fully_connected(convnet, 2, activation='softmax')\nconvnet = regression(convnet, optimizer='adam', learning_rate=0.001, loss='categorical_crossentropy', name='targets')\n\nmodel = tflearn.DNN(convnet, tensorboard_dir='log')\nmodel.fit({'input': X_train}, {'targets': Y_train}, n_epoch=3, validation_set=({'input': X_test}, {'targets': Y_test}), \n    snapshot_step=500, show_metric=True, run_id='dog-cat')","be14c1d6":"def pyramid(image, scale=1.5, minSize=(50, 50)):\n    # yield the original image\n    yield image\n    \n    # keep looping over the pyramid\n    while True:\n        # compute the new dimensions of the image and resize it\n        w = int(image.shape[1] \/ scale)\n        h = int(image.shape[0] \/ scale)\n        image = cv2.resize(image, (w, h))\n\n        # if the resized image does not meet the supplied minimum\n        # size, then stop constructing the pyramid\n        if image.shape[0] < minSize[1] or image.shape[1] < minSize[0]:\n            break\n\n        # yield the next image in the pyramid\n        yield image\n        \ndef sliding_window(image, stepSize, windowSize):\n    for y in range(0, image.shape[0] - windowSize[1], stepSize):\n        for x in range(0, image.shape[1] - windowSize[0], stepSize):\n            # yield the current window\n            yield (x, y, image[y:y + windowSize[1], x:x + windowSize[0]])\n\ndef get_grey_and_color_image(path):\n    return cv2.imread(path), cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n            \ndef run_inference(image):\n    (w, h) = (50, 50)\n    # loop over the image pyramid\n    scale = 1.\n    cats_score = []\n    cats_bbox = []\n    dogs_score = []\n    dogs_bbox = []\n    for resized in pyramid(image, scale=1.5):\n        # loop over the sliding window for each layer of the pyramid\n        for (x, y, window) in sliding_window(resized, stepSize=32, windowSize=(w, h)):\n            input_data = np.ndarray((1, IMG_SIZE, IMG_SIZE, 1), dtype=np.uint8)\n            input_data[0] = window.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\n            out = model.predict(input_data)[0]\n\n            if np.argmax(out) == 1:\n                if out[1] > 0.8:\n                    cats_score.append(out[1])\n                    cats_bbox.append((int(x * scale), int(y * scale), int(w * scale), int(h * scale)))\n            else:\n                if out[0] > 0.8:\n                    dogs_score.append(out[0])\n                    dogs_bbox.append((int(x * scale), int(y * scale), int(w * scale), int(h * scale)))\n\n        scale = scale * 1.5\n    return cats_score, cats_bbox, dogs_score, dogs_bbox","5f2fceb4":"def showWindows(image, dogs_bbox, cats_bbox):\n    for (x, y, w, h) in dogs_bbox:\n        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)\n    for (x, y, w, h) in cats_bbox:\n        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)\n    plt.imshow(np.array(image).astype('uint8'))\n    plt.show()\n    \nTHRESHOLD = 0.3\ndef nms(scores, bboxes):\n    sortedRes = sorted(zip(scores, bboxes), key=lambda x: x[0], reverse=True)\n    scores = [score for (score, bbox) in sortedRes]\n    bboxes = [bbox for (score, bbox) in sortedRes]\n    \n    suppress = [0] * len(scores)\n    result = []\n    for i in range(len(bboxes)):\n        if suppress[i] == 1:\n            continue\n        \n        area = bboxes[i][2] * bboxes[i][3]\n        result.append(bboxes[i])\n        for j in range(i+1, len(bboxes)):\n            if suppress[j] == 1:\n                continue\n            \n            otherArea = bboxes[j][2] * bboxes[j][3]\n            \n            xx1 = np.maximum(bboxes[i][0], bboxes[j][0])\n            yy1 = np.maximum(bboxes[i][1], bboxes[j][1])\n            xx2 = np.minimum(bboxes[i][0] + bboxes[i][2] - 1, bboxes[j][0] + bboxes[j][2] - 1)\n            yy2 = np.minimum(bboxes[i][1] + bboxes[i][3] - 1, bboxes[j][1] + bboxes[j][3] - 1)\n            \n            w = np.maximum(0.0, xx2 - xx1 + 1)\n            h = np.maximum(0.0, yy2 - yy1 + 1)\n            inter = w * h\n            ovr = inter \/ min(area, otherArea)\n            if ovr > THRESHOLD:\n                suppress[j] = 1\n    return result","d26cffbc":"color_image, image = get_grey_and_color_image(test_all[1])\n\ncats_score, cats_bbox, dogs_score, dogs_bbox = run_inference(image)\nshowWindows(color_image.copy(), dogs_bbox, cats_bbox)\n\nnew_dogs_bboxes = nms(dogs_score, dogs_bbox)\nnew_cats_bboxes = nms(cats_score, cats_bbox)\nshowWindows(color_image.copy(), new_dogs_bboxes, new_cats_bboxes)","53b3fe5b":"color_image, image = get_grey_and_color_image(test_all[2010])\n\ncats_score, cats_bbox, dogs_score, dogs_bbox = run_inference(image)\nshowWindows(color_image.copy(), dogs_bbox, cats_bbox)\n\nnew_dogs_bboxes = nms(dogs_score, dogs_bbox)\nnew_cats_bboxes = nms(cats_score, cats_bbox)\nshowWindows(color_image.copy(), new_dogs_bboxes, new_cats_bboxes)","c15d1f73":"# Train a dog-cat classifier","616c082c":"# Run inference"}}