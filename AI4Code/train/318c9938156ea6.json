{"cell_type":{"7beed56a":"code","609affc1":"code","a86608ae":"code","b33e9bfe":"code","a736fdc5":"code","e68af2f7":"code","79d0c860":"code","a79889b2":"code","ce9458f1":"code","97c60341":"code","dca18f7f":"code","11df9c96":"code","6eefb616":"code","3ecae44a":"code","395d5fd7":"code","010c908c":"code","6dbefd21":"code","4c3c4d07":"code","bc233e18":"code","660627c3":"code","b920fde4":"code","874c7731":"code","5b20ca29":"code","b4fba5a4":"code","10a41a92":"code","6d21ec0c":"code","27cfbd9d":"code","1b1ff075":"code","cf304857":"code","8a555d88":"code","7b8151f6":"code","230846e5":"markdown","a78f3d8d":"markdown"},"source":{"7beed56a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","609affc1":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","a86608ae":"plt.rcParams[\"figure.figsize\"] = (10,6) # define figure size of pyplot","b33e9bfe":"pd.set_option(\"display.max_columns\", 100) # set max columns when displaying pandas DataFrame\npd.set_option(\"display.max_rows\", 200) # set max rows when displaying pandas DataFrame","a736fdc5":"df = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv')","e68af2f7":"df","79d0c860":"Question: \"How many ...\"","a79889b2":"df.describe() # statistical description of DataFrame columns, numerical only","ce9458f1":"df.info() # get DataFrame general info","97c60341":"df.head() # get first 5 records of DataFrame","dca18f7f":"df = df.iloc[:, 2:] # get columns from Pclass to Embarked","11df9c96":"df.head()","6eefb616":"cols = [x.lower() for x in df.columns]\ndf.columns = cols","3ecae44a":"df.head()","395d5fd7":"df[df['age'].isnull()].tail() # get last 5 records of DataFrame","010c908c":"df[df['cabin'].isnull()].head()","6dbefd21":"null_age = df[df['age'].isnull()].copy()","4c3c4d07":"null_age.groupby('sex')['name'].count().reset_index(name='total_passengers')","bc233e18":"grouped_null_age = null_age.groupby('sex')['name'].count().reset_index(name='total_passengers')","660627c3":"grouped_null_age.plot(kind='bar', x='sex');","b920fde4":"df.plot(kind='box');","874c7731":"df['fare'].plot(kind='box');","5b20ca29":"df.hist();","b4fba5a4":"df['age'].hist();","10a41a92":"male_filler_age = df[df['sex']=='male']['age'].median()\nfemale_filler_age = df[df['sex']=='female']['age'].median()","6d21ec0c":"# using median of each gender to fill null values\ndf['age'] = np.where(df['age'].isnull(), np.where(df['sex'] == 'male', male_filler_age, female_filler_age), df['age'])","27cfbd9d":"df[df['age'].isnull()] # there's no null values anymore","1b1ff075":"group_embarked = df.groupby('embarked')['name'].count().reset_index(name='total_passengers')","cf304857":"# see the distribution of passengers by place they embarked\ngroup_embarked.plot(kind='bar', x='embarked');","8a555d88":"grouped_age = df.groupby('age')['name'].count().reset_index(name='total_passengers')","7b8151f6":"# see the distribution of passengers by age (similar to histogram)\ngrouped_age.plot(kind='line', x='age');","230846e5":"Dataset description:\n* Pclass: ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)\n* Name: passengger's name\n* Sex: gender\n* Age: age in years\n* SibSp: # of siblings \/ spouse aboard the Titanic\n* Parch: # of parents \/ children aboard the Titanic\n* Ticket: ticket number \t\n* Fare: passenger fare \t\n* Cabin: cabin number \t\n* Embarked: port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)","a78f3d8d":"**Numpy where function:**<br>\n> np.where({condition}, {if meets condition}, {if doesn't meet condition})"}}