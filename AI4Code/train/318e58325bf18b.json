{"cell_type":{"c4f62be1":"code","3abb09d6":"code","0d2e0617":"code","eb7b653a":"code","968f188a":"code","d5f5c8d0":"code","52dd222b":"code","fcd9eae0":"code","4bff3ec7":"code","d06a286a":"code","a0103355":"code","b655e6d6":"code","52aea7b1":"code","8d0deae3":"code","0709d122":"code","8eccf1f4":"code","c7ec1e5c":"code","f81b5096":"code","01490cc1":"code","18b10667":"code","90021119":"code","661ccb4a":"code","185d592e":"code","aa841a3a":"code","3280fe39":"code","bdbf42b9":"code","0590e372":"code","def11624":"code","c938ecc6":"code","2dbe319a":"code","519c09d2":"markdown","5f4035ba":"markdown","177a5077":"markdown","f18c263d":"markdown","428f3941":"markdown","e8f1e491":"markdown","7e0f5cdf":"markdown","9657518b":"markdown","d4c51be6":"markdown","08ab820c":"markdown","f0828e46":"markdown","ff87d68c":"markdown","0821674e":"markdown","e7f79cfd":"markdown","b1db0bba":"markdown","267d83c5":"markdown","ad6a65d8":"markdown","453ab110":"markdown","d3d08936":"markdown","46bdf109":"markdown"},"source":{"c4f62be1":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nimport warnings\n\nsns.set()\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","3abb09d6":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","0d2e0617":"df_train.head(-10)","eb7b653a":"df_test.head(-10)","968f188a":"df_train.columns","d5f5c8d0":"X_train = df_train.drop('Survived', axis=1)\ny = df_train['Survived']\n\nprint('X Train shape:',X_train.shape)\nprint('y shape:',y.shape)","52dd222b":"train_len = len(X_train)\ndf = pd.concat([X_train, df_test], ignore_index=True)\n\nprint('DateFrame Shape:', df.shape)","fcd9eae0":"df.info()","4bff3ec7":"df_train.describe()","d06a286a":"corrmat = df_train.corr()\nplt.figure(figsize=(15, 10))\nsns.heatmap(corrmat, annot=True)\nplt.show()","a0103355":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b655e6d6":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","52aea7b1":"df_train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8d0deae3":"df_train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0709d122":"g = sns.FacetGrid(df_train, col='Survived')\ng.map(plt.hist, 'Age', bins=30)\nplt.show()","8eccf1f4":"grid = sns.FacetGrid(df_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()\nplt.show()","c7ec1e5c":"grid = sns.FacetGrid(df_train, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()\nplt.show()","f81b5096":"df_train.describe(include=['O'])","01490cc1":"df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(df['Title'], df['Sex'])","18b10667":"Encoder = LabelEncoder()\ncategorical = df.select_dtypes(include=['object'])\nfor column in categorical:\n    df[column] = Encoder.fit_transform(df[column].astype('str'))\n\ndf.head()","90021119":"df.isnull().sum()","661ccb4a":"print('Before Drop Columns', df.shape)\ndf.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\nprint('After Drop Columns', df.shape)","185d592e":"Imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nfor i in range(2):\n    for j in range(1,4):\n        ls = np.array(df.Age[((df.Sex==i) & (df.Pclass==j))]).reshape(-1,1)\n        df.Age[(df.Sex==i) & (df.Pclass==j)] = Imputer.fit_transform(ls)[:,0]\ndf.Age.isnull().sum()","aa841a3a":"df.Fare =  Imputer.fit_transform(np.array(df.Fare).reshape(-1,1))[:,0]\ndf.isnull().sum()","3280fe39":"df.head()","bdbf42b9":"X_train = df[:train_len]\nX_test = df[train_len:]","0590e372":"RandomForestModel = RandomForestClassifier(n_estimators=700, max_depth=7, max_features=5, n_jobs=-1)\n\nscores = cross_val_score(RandomForestModel, X_train, y, cv=10, n_jobs=-1)\n                     \nprint('Best Test Score:', scores.max())","def11624":"RandomForestModel.fit(X_train, y)\nprint('Train Score:', RandomForestModel.score(X_train, y))","c938ecc6":"importance = RandomForestModel.feature_importances_\nindices = importance.argsort()[-10:]\nplt.figure(figsize=(15,7))\nplt.plot(X_train.columns[indices], importance[indices], 'o-', color=\"#2ecc71\")\nplt.ylabel('Importance'), plt.xlabel('Features')\nplt.show()","2dbe319a":"y_pred = RandomForestModel.predict(X_test)\n\nsubmission['Survived'] = y_pred\n\nsubmission.to_csv('submission.csv', index=False)","519c09d2":"# 5- Missing Data","5f4035ba":"**Let's Label Encoder**","177a5077":"Let's see our **Features**","f18c263d":"Let's know the efficiency of every feature for surviving.\n1. Pclass","428f3941":"4. Parch","e8f1e491":"I will deal with missing values in **Age** depending on **Sex** and **Pclass** and use **mode**.","7e0f5cdf":"# 7- Let's Party","9657518b":"# 8- Feature Importane","d4c51be6":"I will drop **y** or **output** from **df_train**","08ab820c":"3. SibSp","f0828e46":"# 2- Data\nWe have 3 files:\n\n**df_train**: for training data\n\n**df_test**: for making predictions\n\n**submission**: for saveing our predictions","ff87d68c":"Let's deal with **Fare** and check again","0821674e":"# 3- Features\nIt's time to know more about features.","e7f79cfd":"2. Sex","b1db0bba":"Let's merge **train** and **test** data in one DataFrame **\"df\"**","267d83c5":"We Will Extract **Titles** from **Names** before dropping this column.","ad6a65d8":"# 4- Categorical Data","453ab110":"# 9- Let's Predict","d3d08936":"# 1- Hello Friends\n\nHello Future Engineers, Nice to meet you!\n\nIn this notebook, we will travel to Titanic ship to know who can survive and who can't. So... make your coffee and come back to start coding, I promise, I will be here for you.\n","46bdf109":"# 6- Are You Reay?"}}