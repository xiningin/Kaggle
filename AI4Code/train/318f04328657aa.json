{"cell_type":{"9eecfed5":"code","609ad4ed":"code","ac7a43f4":"code","cb8d5cc1":"code","398217cd":"code","0414d196":"code","076f9f3b":"code","0b52565a":"code","a83c5e80":"code","ceaaa9be":"code","d7dc373c":"code","985adab3":"code","768031b2":"code","c7511f3b":"code","07f0c9f7":"code","ba9d551d":"code","fcf16f9a":"code","9c5099f6":"code","65a5edb2":"code","9e5242de":"code","cbab54b5":"code","e4f8901d":"code","20502454":"code","7ec33240":"code","2ede7d2f":"code","fba2977f":"code","6b8acf91":"markdown","d1306c8d":"markdown","de76b31b":"markdown","3171e60d":"markdown","6bad288c":"markdown","51282bf0":"markdown","f85d23e9":"markdown","3b1c4d98":"markdown","1ce3c871":"markdown","22516f37":"markdown","9b53b4df":"markdown","a48f82fd":"markdown","4ae42de6":"markdown","b12f9da1":"markdown"},"source":{"9eecfed5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","609ad4ed":"data = pd.read_csv('..\/input\/loandata\/Loan Data.csv')","ac7a43f4":"data","cb8d5cc1":"data.drop(['Loan_ID'], axis=1, inplace=True)","398217cd":"data","0414d196":"data.isnull().sum()","076f9f3b":"data['Credit_History'] = data['Credit_History'].fillna(data['Credit_History'].mode()[0])\ndata['Loan_Amount_Term'] = data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mode()[0])\ndata['LoanAmount'] = data['LoanAmount'].fillna(data['LoanAmount'].mode()[0])\ndata['Gender'] = data['Gender'].fillna(data['Gender'].mode()[0])\ndata['Married'] = data['Married'].fillna(data['Married'].mode()[0])\ndata['Dependents'] = data['Dependents'].fillna(data['Dependents'].mode()[0])\ndata['Self_Employed'] = data['Self_Employed'].fillna(data['Self_Employed'].mode()[0])","0b52565a":"categorical_cols = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']\ntrain = data\n\ntrain = pd.get_dummies(data=train, columns=categorical_cols)\ntrain","a83c5e80":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntrain.Loan_Status = le.fit_transform(train.Loan_Status)\ntrain","ceaaa9be":"train.describe()","d7dc373c":"corrmatrix = train.corr()\ncorrmatrix","985adab3":"train.describe()","768031b2":"data.groupby(['Loan_Status','Gender']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Married']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Dependents']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Education']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Self_Employed']).size().unstack().plot(kind='bar',stacked=True)\n#data.groupby(['Loan_Status','ApplicantIncome']).size().unstack().plot(kind='bar',stacked=True)\n#data.groupby(['Loan_Status','CoapplicantIncome']).size().unstack().plot(kind='bar',stacked=True)\n#data.groupby(['Loan_Status','LoanAmount']).size().unstack().plot(kind='bar',stacked=True)\n#data.groupby(['Loan_Status','Loan_Amount_Term']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Credit_History']).size().unstack().plot(kind='bar',stacked=True)\ndata.groupby(['Loan_Status','Property_Area']).size().unstack().plot(kind='bar',stacked=True)\nplt.show()","c7511f3b":"x= train.drop('Loan_Status', axis = 1)\ny= train['Loan_Status']","07f0c9f7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split (x, y, test_size = 0.2, random_state = 0)","ba9d551d":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)","fcf16f9a":"knn.fit(x_train,y_train)\nypred = knn.predict(x_test)\nypred","9c5099f6":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, ypred)","65a5edb2":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,ypred))","9e5242de":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(x_train, y_train)","cbab54b5":"ypredSVC = classifier.predict(x_test)\nypredSVC","e4f8901d":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,ypredSVC))","20502454":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, ypredSVC)","7ec33240":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()\nLR.fit(x_train, y_train)\nypredLR = LR.predict(x_test)\nypredLR","2ede7d2f":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, ypredLR)","fba2977f":"print(classification_report(y_test, ypredLR))","6b8acf91":"As you can see, SVC performed much better as compared to KNN","d1306c8d":"Copy original data into new data frame name train, as the original dataframe will be used for visualization, also one hot encode the new dataframe with the help of get_dummies","de76b31b":"Now applying Logistic Regression to see how well it performs","3171e60d":"Now applying SVC to see how well it performs","6bad288c":"Logistic Regression and SVC performed more or less similarly, both are linear models that is why the performance was also the same, KNN on the other hand is not a linear model.","51282bf0":"Drop Loan_ID column as it is useless","f85d23e9":"Create bar plot to analyze data","3b1c4d98":"Applying first model in the form of K-Nearest Neighbors","1ce3c871":"Now I will label_encode the label, make sure you don't use get_dummies on label as it will divide the label into two seperate columns and you don't want to do that. (Label is another term for the column you want to predict)","22516f37":"Dividing the data into x and y vaiables, it will be used for train test split as seen below","9b53b4df":"As you can see, KNN did not perform well enough, the precision was too low and the model was only 60 percent accurate. We can tune the model even further, but let's do that some other time.","a48f82fd":"Import the required libraries first.","4ae42de6":"Handle the missing values in the data frame by replacing null values with the mode of the column","b12f9da1":"Correlation Matrix to see what columns have what kind of relation with one another"}}