{"cell_type":{"e438842d":"code","d3adfd5c":"code","e4ddf6c0":"code","044c59e2":"code","2b885cdd":"code","68ced499":"code","3dedcb5d":"code","31c25e43":"code","43ef8d83":"code","e6a00a0e":"code","91a444b3":"code","ee2638dd":"code","4203d2ad":"code","c785ef94":"code","2246c727":"code","a9a31ca5":"code","37acdd0c":"code","bca31bed":"code","27b7702a":"code","0d3ec149":"code","f7101e44":"code","65bcc180":"code","2241281c":"code","c908fd13":"code","a5620eec":"code","764a3df3":"code","9d40ab4c":"code","81a1caa5":"code","a22f745a":"code","eeaca0e6":"code","cbdf5330":"code","efae3a7a":"code","3074ca81":"code","a703bbba":"code","114dc9a2":"code","74552c65":"code","2e2405cb":"code","58a5b0ff":"code","3ec09479":"code","f2c3c9c6":"code","2d82ed13":"code","109741af":"code","c897e83e":"code","9f5f775c":"code","97ec9420":"code","3d7a0309":"code","32890898":"code","cecbd346":"code","002c0faa":"code","858b3204":"code","c689c8f8":"code","addc1ced":"code","9b625fcc":"code","027761bf":"code","5e64c9db":"code","237bdd19":"code","85770480":"code","2370beee":"code","045e99b0":"code","d01a25bf":"code","d7c5728d":"code","89a87e05":"code","d23b51d2":"code","9a922854":"code","0d81758a":"code","097a85e4":"code","fd9b4a3f":"code","529bc5db":"code","ab7c2988":"code","5b344ee2":"code","148e4451":"code","3a5fa0d4":"markdown","4ecac223":"markdown","c44b6980":"markdown","34193abc":"markdown","ba78a17d":"markdown","9a92f0e8":"markdown","8cbe0a9d":"markdown","051010bc":"markdown","883f32bc":"markdown","835e945a":"markdown","7de25a4a":"markdown","6b7e1eda":"markdown","b17123bc":"markdown","3bdbec87":"markdown","86e6a04e":"markdown","fb95a86e":"markdown","3b3a8d07":"markdown","b03f14bd":"markdown","f0fe1096":"markdown","5a93390d":"markdown","d5f29ffb":"markdown"},"source":{"e438842d":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d3adfd5c":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","e4ddf6c0":"df.describe()","044c59e2":"df.info()","2b885cdd":"print(\"Age is missing {} values, this comprises {:.2f}% of our age values.\".format(df[\"Age\"].isnull().sum(),\n                                                                              (df[\"Age\"].isnull().sum()\/df.shape[0])*100))","68ced499":"for pclass in df[\"Pclass\"].unique():\n    for sex in df[\"Sex\"].unique():\n        mean_age = df[(df[\"Sex\"] == sex) & (df[\"Pclass\"] == pclass)][\"Age\"].mean()\n        print(\"Mean Age for {} in class {} is {:.1f}\".format(sex,pclass,mean_age))","3dedcb5d":"def impute_ages(cols):\n    \n    \"\"\"\n    This function will simply look through our age column.\n    When it comes across a null, an age value will be imputed\n    based on the sex and class of the passenger.\n    \"\"\"\n    \n    pclass = cols[0]\n    sex = cols[1]\n    age = cols[2]\n    \n    if pd.isnull(age):\n        \n        if pclass == 3:\n            if sex == \"male\":\n                return 27\n            else:\n                return 22\n        \n        elif pclass == 2:\n            if sex == \"male\":\n                return 31\n            else:\n                return 29\n            \n        else:\n            if pclass == 1:\n                if sex == \"male\":\n                    return 41\n                else:\n                    return 35\n    else:\n        return age","31c25e43":"df[\"Age\"] = df[[\"Pclass\",\"Sex\",\"Age\"]].apply(impute_ages,axis=1)","43ef8d83":"print(\"Age Stats: \")\nprint(df[\"Age\"].describe())\nprint(\"\\n\")\nprint(\"Age Nulls: \")\nprint(df[\"Age\"].isnull().sum())","e6a00a0e":"# Checking for duplicates\ndf.duplicated().sum()","91a444b3":"# Setting up figure for visualizations\nsns.set_style(\"darkgrid\")\nfig = plt.figure(figsize=(14,16))\nfig.suptitle(\"Distributions\",fontsize=22,color=\"darkred\",x=0.525)\n\nax0 = fig.add_subplot(4,3,1)\nax0.set_title(\"Sex\",fontsize=16,color=\"darkred\")\nsns.countplot(x=\"Sex\",data=df,color=\"coral\",ax=ax0)\nax0.text(x=0.15,y=500,s=\"{:.2f}%\".format((df[\"Sex\"].value_counts().values[0]\n                                          \/df[\"Sex\"].shape[0])*100),ha=\"right\",va=\"center\")\nax0.text(x=0.85,y=230,s=\"{:.2f}%\".format((df[\"Sex\"].value_counts().values[1]\n                                          \/df[\"Sex\"].shape[0])*100),ha=\"left\",va=\"center\")\nax0.set_ylabel(\"Count\",fontsize=12)\nax0.set_xlabel(\"Sex\",fontsize=12)\n\nax1 = fig.add_subplot(4,3,2)\nax1.set_title(\"Age\",fontsize=16,color=\"darkred\")\nsns.histplot(x=\"Age\",data=df,color=\"dodgerblue\")\nax1.axvline(np.quantile(df[\"Age\"],q=0.25),ls=\"-.\",color=\"green\",label=\"25% Quartile\")\nax1.axvline(df[\"Age\"].mean(),ls=\"--\",color=\"red\",label=\"Mean\")\nax1.axvline(df[\"Age\"].median(),ls=\"--\",color=\"black\",label=\"Median\")\nax1.axvline(np.quantile(df[\"Age\"],q=0.75),ls=\"-.\",color=\"green\",label=\"75% Quartile\")\nax1.set_xlabel(\"Age\",fontsize=12)\nax1.set_ylabel(\"\")\nax1.legend()\n\nax2 = fig.add_subplot(4,3,3)\nax2.set_title(\"Outcome\",fontsize=16,color=\"darkred\")\nf = df.groupby(['Pclass', 'Survived']).size().reset_index().pivot(columns='Pclass', index='Survived', values=0)\nf.plot(kind=\"bar\",stacked=True,ax=ax2,color=[\"darkred\",\"coral\",\"grey\"])\nax2.set_xticks([0,1])\nax2.set_xticklabels([\"Deceased\",\"Survived\"],rotation=\"horizontal\")\nax2.text(x=-0.1,y=500,s=\"{:.2f}%\".format((df[df[\"Survived\"]==0].shape[0] \/ df[\"Survived\"].shape[0])*100),\n         color=\"white\")\nax2.text(x=1.12,y=300,s=\"{:.2f}%\".format((df[df[\"Survived\"]==1].shape[0] \/ df[\"Survived\"].shape[0])*100),\n         color=\"white\",ha=\"right\")\nax2.legend(bbox_to_anchor=(1,1),labels=[\"First Class\",\"Second Class\",\"Third Class\"])\n\nax3 = fig.add_subplot(4,3,4)\nax3.set_title(\"Fare\",fontsize=16,color=\"darkred\")\nsns.histplot(x=\"Fare\",data=df,bins=30,color=\"dodgerblue\")\nax3.axvline(df[\"Fare\"].mean(),ls=\"--\",c=\"r\",label=\"Mean\")\nax3.axvline(df[\"Fare\"].median(),ls=\"--\",c=\"black\",label=\"Median\")\nax3.set_ylabel(\"Count\",fontsize=12)\nax3.legend()\nplt.tight_layout()\n\nax4 = fig.add_subplot(4,3,5)\nax4.set_title(\"Embark Location\",fontsize=16,color=\"darkred\")\nsns.countplot(x=\"Embarked\",data=df,color=\"teal\",ax=ax4)\nax4.set_ylabel(\"\")\nax4.text(-0.15,580,s=\"{:.2f}%\".format((df[df[\"Embarked\"]==\"S\"].shape[0]\/df[\"Embarked\"].shape[0])*100),\n         color=\"pink\",ha=\"left\")\nax4.text(0.85,100,s=\"{:.2f}%\".format((df[df[\"Embarked\"]==\"C\"].shape[0]\/df[\"Embarked\"].shape[0])*100),\n        color=\"pink\")\nax4.text(1.9,30,s=\"{:.2f}%\".format((df[df[\"Embarked\"]==\"Q\"].shape[0]\/df[\"Embarked\"].shape[0])*100),\n        color=\"pink\")\n\nax5 = fig.add_subplot(4,3,6)\nax5.set_title(\"Parents and Children on Board\",fontsize=16,color=\"darkred\")\nsns.countplot(x=\"Parch\",data=df,ax=ax5,color=\"gold\")\nax5.set_ylabel(\"\")\nax5.set_xlabel(\"Number of Parents\/Children\")\n\nax6 = fig.add_subplot(4,3,7)\nax6.set_title(\"Siblings and Spouses on Board\",fontsize=16,color=\"darkred\")\nsns.countplot(x=\"SibSp\",data=df,ax=ax6,color=\"darkred\")\nax6.set_ylabel(\"\")\nax6.set_xlabel(\"Number of Siblings\/Spouses\")\nax6.set_ylabel(\"Count\",fontsize=12)\n\nax7 = fig.add_subplot(4,3,8)\nax7.set_title(\"Mean Fare By Outcome\",fontsize=16,color=\"darkred\")\nsns.barplot(x=\"Survived\",y=\"Fare\",data=df,ax=ax7,color=\"coral\")\nax7.set_xticks([0,1])\nax7.set_xticklabels([\"Deceased\",\"Survived\"])\nax7.axhline(df[\"Fare\"].mean(),ls=\"--\",color=\"black\",label=\"Overall Mean Fare\",alpha=0.5)\nax7.legend()\n\nax8 = plt.subplot(4,3,9)\nax8.set_title(\"Fare vs Age by Survival\",fontsize=16,color=\"darkred\")\nsns.scatterplot(x=\"Age\",y=\"Fare\",data=df,hue=\"Survived\",palette=[\"lightgreen\",\"coral\"],alpha=0.5)\nax8.set_ylabel(\"\")\nax8.axhline(df[\"Fare\"].mean(),ls=\"--\",color=\"black\",alpha=0.5,label=\"Mean\")\nax8.legend([\"Mean\",\"Survived\",\"Deceased\"])\n\nplt.tight_layout()","ee2638dd":"# Mean age by outcome\na = pd.DataFrame(df.groupby(\"Survived\")[\"Age\"].mean())\na.columns=[\"Mean Age\"]\na.index=[\"Deceased\",\"Survived\"]\na","4203d2ad":"# Mean siblings\/Spouse travelling with by outcome\ns = pd.DataFrame(df.groupby(\"Survived\")[\"SibSp\"].mean())\ns.columns=[\"Mean Sibling\/Spouse Count\"]\ns.index=[\"Deceased\",\"Survived\"]\ns","c785ef94":"s = pd.DataFrame(df.groupby(\"Survived\")[\"Parch\"].mean())\ns.columns=[\"Mean Parent\/Child Count\"]\ns.index=[\"Deceased\",\"Survived\"]\ns","2246c727":"s = pd.DataFrame(df.groupby([\"Pclass\",\"Sex\"])[\"Survived\"].value_counts())\ns.columns=[\"Count\"]\ns","a9a31ca5":"palette = np.array([\"lightgreen\",\"gold\"])\ng = sns.catplot(x=\"Sex\",y='Survived',col='Pclass',data=df,kind ='bar',palette=palette)\nplt.suptitle(\"Sex Survival Proportions By Class\",fontsize=16)\ng.set_xlabels(\"Sex\",fontsize=14)\ng.set_ylabels(\"Percent Survived\",fontsize=14)\ng.set_yticklabels([0,20,40,60,80,90,100])\nplt.tight_layout()","37acdd0c":"\nplt.figure(figsize=(8,6))\nsns.histplot(x=\"Age\",data=df[df[\"Survived\"]==0],label=\"Deceased\")\nsns.histplot(x=\"Age\",data=df[df[\"Survived\"]==1],color=\"pink\",alpha=0.75,label=\"Survived\")\nplt.title(\"Age Distributions of Victims and Survivors\",fontsize=16)\nplt.axvline(df[df[\"Survived\"] == 0][\"Age\"].mean(),color=\"red\",ls=\"--\",label=\"Mean Age of Deceased\")\nplt.axvline(df[df[\"Survived\"] == 1][\"Age\"].mean(),color=\"red\",label=\"Mean Age of Survivors\")\n\nplt.legend()","bca31bed":"# Creating lists to use in a later dataframe\nages = []\ndeaths = []\nlive = []\n\nfor age in sorted(df[\"Age\"].unique()):\n    if df[df[\"Age\"]==age].shape[0] >= 10: # We will use an age if there are at least 10 observations in the age group\n        try:\n            death = df[df[\"Age\"] == age][\"Survived\"].value_counts().values[0]\n            lives = df[df[\"Age\"] == age][\"Survived\"].value_counts().values[1]\n\n            pct_dead = death\/(death+lives)*100\n            print(\"At age {}, pct dead are: {:.2f}%\".format(age,pct_dead))\n            ages.append(age)\n            deaths.append(death)\n            live.append(lives)\n\n        except:\n            continue\n            \n    else:\n        pass","27b7702a":"# New dataframe detailing age groups with at least ten observations\nadf = pd.DataFrame({\"Age\":ages,\n              \"Deaths\":deaths,\n              \"Lives\":live})\n\n# Feature detailing perecentage of each age group deceased\nadf[\"Pct_dead\"] = adf[\"Deaths\"] \/ (adf[\"Deaths\"] + adf[\"Lives\"])\nadf[\"Pct_dead\"] = adf[\"Pct_dead\"].apply(lambda x: round(x,ndigits=2))\n\nadf.head()","0d3ec149":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(16,10))\nax1.set_title(\"Percent Deceased by Age\",fontsize=16,fontweight=\"bold\")\nsns.barplot(x=\"Age\",y=\"Pct_dead\",data=adf,palette=palette,ax=ax1)\nax1.grid(ls=\"--\",color=\"black\",alpha=0.5)\nax1.set_xlabel(\"Age\",fontsize=12)\nax1.set_ylabel(\"Percent Deceased\",fontsize=12)\nax1.axhline(y=adf[\"Pct_dead\"].mean(),color=\"grey\",label=\"Mean\",ls=\"-.\")\nax1.legend()\n\nadf['Rolling 5 Average'] = adf.Pct_dead.rolling(5).mean()\nsns.lineplot(x=\"Age\",y=\"Pct_dead\",data=adf,ax=ax2)\nsns.lineplot(x=\"Age\",y=\"Rolling 5 Average\",data=adf,label=\"Rolling Average - 5yrs\")\nax2.grid(ls=\"--\",color=\"black\",alpha=0.5)\nax2.legend()","f7101e44":"# Mean fare by class and sex\nfor clas in df[\"Pclass\"].unique():\n    for sex in df[\"Sex\"].unique():\n        mf = df[(df[\"Pclass\"] == clas)  & (df[\"Sex\"] == sex)][\"Fare\"].mean()\n        if sex == \"male\":\n            print(\"Mean Fare for males in class {} is {:.0f}$\".format(clas,mf))\n        else:\n            print(\"Mean Fare for females in class {} is {:.0f}$\".format(clas,mf))","65bcc180":"fs = df.groupby(\"Sex\")[\"Survived\"].value_counts().values[0]\nfd = df.groupby(\"Sex\")[\"Survived\"].value_counts().values[1]\nmd = df.groupby(\"Sex\")[\"Survived\"].value_counts().values[2]\nms = df.groupby(\"Sex\")[\"Survived\"].value_counts().values[3]\n\nfem_survives  = fs\/(fs + fd)*100\nmale_survives = ms\/(ms + md)*100\n\nfig = plt.figure(figsize=(8,6))\n\nsns.barplot(data=df,x=\"Sex\",y=\"Survived\",palette=\"Set1\")\nplt.title(\"Sex Survival Rates\",fontsize=16)\nplt.text(x=-0.3,y=0.05,ha=\"left\",va=\"bottom\",s=\"Percent Males Survived:\\n{:.1f}%\".format(male_survives),\n        fontweight=\"bold\",color=\"white\")\nplt.text(x=1.35,y=0.65,ha=\"right\",va=\"top\",s=\"Percent Females Survived:\\n{:.1f}%\".format(fem_survives),\n        fontweight=\"bold\",color=\"white\")","2241281c":"f = df.groupby(\"Sex\")[\"Parch\"].mean().values[0]\nm = df.groupby(\"Sex\")[\"Parch\"].mean().values[1]\n\nfig = plt.figure(figsize=(24,12))\n\nax0 = fig.add_subplot(2,2,1)\nax0.set_title(\"Mean Parent\/Child Passenger\",fontsize=16,fontweight=\"bold\")\nsns.barplot(x=\"Sex\",y=\"Parch\",data=df,palette=\"Set1\")\nax0.text(x=1.15,y=0.5,ha=\"right\",s=\"Mean: {:.2f}\".format(f),fontsize=16,color=\"white\")\nax0.text(x=-0.15,y=0.15,ha=\"left\",s=\"Mean: {:.2f}\".format(m),fontsize=16,color=\"white\")\n\nax1 = fig.add_subplot(2,2,2)\nax1.set_title(\"Male Parent\/Child Passenger\",fontsize=16,fontweight=\"bold\")\nsns.kdeplot(x=\"Parch\",data=df[df[\"Sex\"] == \"male\"],shade=True,palette=\"Set1\")\nax1.axvline(np.quantile(df[df[\"Sex\"] == \"male\"][\"Parch\"],q=0.25),ls=\"--\",color=\"red\",label=\"25% Quartile\")\nax1.axvline(np.quantile(df[df[\"Sex\"] == \"male\"][\"Parch\"],q=0.75),ls=\"--\",color=\"green\",label=\"75% Quartile\")\nax1.legend()\n\nax2 = fig.add_subplot(2,2,3)\nax2.set_title(\"Sex Breakdown of First Class\",fontsize=16,fontweight=\"bold\")\nlabels = df[df[\"Pclass\"] == 1][\"Sex\"].value_counts().index\nslices = df[df[\"Pclass\"] == 1][\"Sex\"].value_counts().values\nplt.pie(x=slices,labels=labels,autopct=\"%.1f%%\",shadow=True,explode=[0,0.05],colors=sns.color_palette(\"Set1\"),\n        textprops={\"size\":16,\"color\":\"white\"},wedgeprops={\"edgecolor\":\"black\"})\n\nax3 = plt.subplot(2,2,4)\nax3.set_title(\"Female Parent\/Child Passenger\",fontsize=16,fontweight=\"bold\")\nsns.kdeplot(x=\"Parch\",data=df[df[\"Sex\"] == \"female\"],shade=True,ax=ax3,palette=\"Set1\")\nax3.axvline(np.quantile(df[df[\"Sex\"] == \"female\"][\"Parch\"],q=0.25),ls=\"--\",color=\"red\",label=\"25% Quartile\")\nax3.axvline(np.quantile(df[df[\"Sex\"] == \"female\"][\"Parch\"],q=0.75),ls=\"--\",color=\"green\",label=\"75% Quartile\")\nax3.legend()\n\nplt.show()","c908fd13":"fs = df[df[\"Parch\"] >= 1].groupby(\"Sex\")[\"Survived\"].value_counts().values[0]\nfd = df[df[\"Parch\"] >= 1].groupby(\"Sex\")[\"Survived\"].value_counts().values[1]\nmd = df[df[\"Parch\"] >= 1].groupby(\"Sex\")[\"Survived\"].value_counts().values[2]\nms = df[df[\"Parch\"] >= 1].groupby(\"Sex\")[\"Survived\"].value_counts().values[3]\n\nfslices = [fs,fd]\nflabels = [\"Survived\",\"Died\"]\n\nmslices = [ms,md]\nmlabels = [\"Survived\",\"Died\"]\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,8))\n\nfig.suptitle(\"Passengers Travelling With at Least One Parent\/Child\",fontsize=18)\n\nax1.set_title(\"Female\",fontsize=16)\nax1.pie(x=fslices,labels=flabels,colors=sns.color_palette(\"Set1\"),autopct=\"%.1f%%\",explode=[0.03,0],\n        shadow=True,wedgeprops={\"edgecolor\":\"black\"},textprops={\"size\":16,\"color\":\"white\"})\n\nax2.set_title(\"Male\",fontsize=16)\nax2.pie(x=mslices,labels=mlabels,colors=sns.color_palette(\"Set1\"),autopct=\"%.1f%%\",explode=[0,0.03],\n        shadow=True,wedgeprops={\"edgecolor\":\"black\"},textprops={\"size\":16,\"color\":\"white\"})\n\nplt.legend(loc=\"center left\",bbox_to_anchor=(-0.25,1))\nplt.show()","a5620eec":"fs = df[df[\"Parch\"] == 0].groupby(\"Sex\")[\"Survived\"].value_counts().values[0]\nfd = df[df[\"Parch\"] == 0].groupby(\"Sex\")[\"Survived\"].value_counts().values[1]\nmd = df[df[\"Parch\"] == 0].groupby(\"Sex\")[\"Survived\"].value_counts().values[2]\nms = df[df[\"Parch\"] == 0].groupby(\"Sex\")[\"Survived\"].value_counts().values[3]\n\nfslices = [fs,fd]\nflabels = [\"Survived\",\"Died\"]\n\nmslices = [ms,md]\nmlabels = [\"Survived\",\"Died\"]\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,8))\n\nfig.suptitle(\"Passengers Travelling With No Parents\/Children\",fontsize=18)\n\nax1.set_title(\"Female\",fontsize=16)\nax1.pie(x=fslices,labels=flabels,colors=sns.color_palette(\"Set1\"),autopct=\"%.1f%%\",explode=[0.03,0],\n        shadow=True,wedgeprops={\"edgecolor\":\"black\"},textprops={\"size\":16,\"color\":\"white\"})\n\nax2.set_title(\"Male\",fontsize=16)\nax2.pie(x=mslices,labels=mlabels,colors=sns.color_palette(\"Set1\"),autopct=\"%.1f%%\",explode=[0,0.03],\n        shadow=True,wedgeprops={\"edgecolor\":\"black\"},textprops={\"size\":16,\"color\":\"white\"})\n\nplt.legend(loc=\"center left\",bbox_to_anchor=(-0.25,1))\nplt.show()","764a3df3":"mdparch = []\nfdparch = []\nmsparch = []\nfsparch = []\nsize= []\nfor i in range(len(df[\"Parch\"].unique())):\n    size.append(i)\n    for sex in df[\"Sex\"].unique():\n        \n        try:\n            deaths = df[(df[\"Parch\"] == i) & (df[\"Sex\"] == sex)].groupby(\"Survived\")[\"Survived\"].value_counts().values[0]\n        except:\n            deaths = np.nan\n            \n        try:\n            survives = df[(df[\"Parch\"] == i) & (df[\"Sex\"] == sex)].groupby(\"Survived\")[\"Survived\"].value_counts().values[1]\n        except:\n            survives = np.nan\n            \n        \n        \n        if sex == \"male\":\n            mdparch.append(deaths)\n            msparch.append(survives)\n\n        else:\n            fdparch.append(deaths)\n            fsparch.append(survives)\n        \n            ","9d40ab4c":"ds = pd.DataFrame({\"Parent\/Child\":size,\"Male Deaths\":mdparch,\"Male Survives\":msparch,\n              \"Female Deaths\":fdparch,\"Female Survives\":fsparch})\n\nds[\"Pct Male Survives\"] = round((ds[\"Male Survives\"] \/ (ds[\"Male Survives\"] + ds[\"Male Deaths\"])) * 100, 2)\nds[\"Pct Female Survives\"] = round((ds[\"Female Survives\"] \/ (ds[\"Female Survives\"] + ds[\"Female Deaths\"])) * 100, 2)","81a1caa5":"ds[[\"Parent\/Child\",\"Male Deaths\",\"Male Survives\",\"Pct Male Survives\",\n    \"Female Deaths\",\"Female Survives\",\"Pct Female Survives\"]]","a22f745a":"# Further data cleaning\ndef prepro(df):\n    \n    df = df.copy()\n    \n    # Combining number of family members into single feature\n    df[\"Family\"] = df[\"SibSp\"] + df[\"Parch\"]\n    # Extracting title from name feature\n    df[\"Title\"] = df[\"Name\"].apply(lambda n: n.split()[1])\n    # First number in ticket-\u00e4\n    df[\"TickNo\"] = df[\"Ticket\"].apply(lambda x: x.split()[-1][0])\n    df[\"TickNo\"] = pd.to_numeric(df[\"TickNo\"].replace({\"L\":0}))\n    df[\"TickNo\"].replace({0,df[\"TickNo\"].median()})\n    # Round up fare feature\n    df[\"Fare\"] = df[\"Fare\"].apply(lambda f: round(f))\n    # Mapping binary values to sex category_\n    df[\"Sex\"] = df[\"Sex\"].map({\"male\":1,\"female\":0})\n    # Cabin letter feature\n    df[\"CabinL\"] = df[\"Cabin\"].dropna().apply(lambda c: c.split()[0][0])\n    \n    df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"],inplace=True)\n    return df","eeaca0e6":"new = prepro(df)","cbdf5330":"# How do our features correlate with one another\nfig = plt.figure(figsize=(10,8))\nsns.heatmap(data=new.corr(),cmap=\"terrain\",lw=3,linecolor=\"black\",annot=True)\nplt.title(\"Feature Relationships\",fontsize=16,fontweight=\"bold\")","efae3a7a":"# Looking at family size and it's relationship to survived feature\nf = new.groupby(['Family', 'Survived']).size().reset_index().pivot(columns='Family', index='Survived', values=0)\nf = f.fillna(0)\nf.loc[\"Pct_Deceased\"] = f.loc[0]\/(f.loc[0]+f.loc[1])\n\nf","3074ca81":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(18,8))\nplt.suptitle(\"Family Figures\",fontsize=18,color=\"darkred\")\n\nf.loc[\"Pct_Deceased\",:].plot(ax=ax1,kind=\"bar\",xlabel=\"Number of Family Members\",\n                             ylabel=\"Percent Deceased\",fontsize=14,color=sns.color_palette(\"rainbow\"))\nax1.set_xticklabels(rotation=\"horizontal\",labels=[0,1,2,3,4,5,6,7,10])\nax1.set_ylim(0,1)\nax1.set_title(\"Percentage deceased by family member count\",fontsize=16)\n\nax2.set_title(\"Passenger Family Sizes\",fontsize=16)\n\nslices = new[\"Family\"].value_counts().values\nlabels = new[\"Family\"].value_counts().index\n\nax2.pie(slices,labels=labels,explode=[0.03,0,0,0,0,0.055,0.15,0.25,0.4],colors=sns.color_palette(\"rainbow\"),\n        autopct=\"%i.1%%\")\nplt.show()","a703bbba":"# Cabin letter proportion by 1st class\nprint(\"First Class:\\n\")\nfor i in range(len(new[new[\"Pclass\"]==1][\"CabinL\"].value_counts())):\n    print(\"{} is {:.1f}%\".format(new[new[\"Pclass\"]==1][\"CabinL\"].value_counts().index[i],new[new[\"Pclass\"]==1][\"CabinL\"].value_counts().\n                           values[i]\/new[new[\"Pclass\"]==1][\"CabinL\"].value_counts().sum()*100))","114dc9a2":"# Cabin letter proportion by 2nd class\nprint(\"Second Class:\\n\")\nfor i in range(len(new[new[\"Pclass\"]==2][\"CabinL\"].value_counts())):\n    print(\"{} is {:.1f}%\".format(new[new[\"Pclass\"]==2][\"CabinL\"].value_counts().index[i],new[new[\"Pclass\"]==2][\"CabinL\"].value_counts().\n                           values[i]\/new[new[\"Pclass\"]==2][\"CabinL\"].value_counts().sum()*100))","74552c65":"# Cabin letter proportion by 3rd class\nprint(\"Third Class:\\n\")\nfor i in range(len(new[new[\"Pclass\"]==3][\"CabinL\"].value_counts())):\n    print(\"{} is {:.0f}%\".format(new[df[\"Pclass\"]==3][\"CabinL\"].value_counts().index[i],new[new[\"Pclass\"]==3][\"CabinL\"].value_counts().\n                           values[i]\/new[new[\"Pclass\"]==3][\"CabinL\"].value_counts().sum()*100))","2e2405cb":"def impute_cabin(cols):\n    \n    pclass = cols[0]\n    cabin = cols[1]\n\n    if pd.isnull(cabin):\n        \n        if pclass == 1:\n            \n            letters = [\"C\",\"B\",\"D\",\"E\",\"A\",\"T\"]\n            prob = np.array([0.34, 0.27, 0.16,0.14,0.09,0.006])\n            prob = prob\/prob.sum()\n            \n            return np.random.choice(a=letters,p=prob)\n        \n        elif pclass == 2:\n            \n            letters = [\"F\",\"D\",\"E\"]\n            prob = np.array([0.5,0.25,0.25])\n            prob = prob\/prob.sum()\n            return np.random.choice(a=letters,p=prob)\n        \n        else:\n            \n            letters = [\"F\",\"G\",\"E\"]\n            prob = np.array([0.42,0.33,0.25])\n            prob = prob\/prob.sum()\n            return np.random.choice(a=letters,p=prob)\n            \n            \n    else:\n        return cabin\n            \n            ","58a5b0ff":"# Applying function\nnew[\"CabinL\"] = new[[\"Pclass\",\"CabinL\"]].apply(impute_cabin,axis=1)","3ec09479":"for pc in new[\"Pclass\"].unique():\n    print(\"\\n\")\n    print(\"For Passenger Class: {}, the cabin make up is:\\n\".format(pc))\n    for i in range(len(new[new[\"Pclass\"]==pc][\"CabinL\"].value_counts())):\n        print(\"{} is {:.1f}%\".format(new[new[\"Pclass\"]==pc][\"CabinL\"].value_counts().index[i],new[new[\"Pclass\"]==pc][\"CabinL\"].value_counts().\n                               values[i]\/new[new[\"Pclass\"]==pc][\"CabinL\"].value_counts().sum()*100))","f2c3c9c6":"new.isnull().sum()","2d82ed13":"def model_ready(df):\n    \n    df = df.copy()\n    \n    # Drop last two nulls\n    df = df.dropna()\n    # Mapping \"Embarked\" feature to integers\n    df[\"Embarked\"] = df[\"Embarked\"].map({\"S\":0,\"C\":1,\"Q\":2})\n    # Re-ordering features\n    if \"Survived\" in df.columns:\n        df = df[[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"Parch\",\"SibSp\",\"Family\",\"Age\",\"Fare\",\"Title\",\"TickNo\",\"CabinL\"]]\n    else:\n        df = df[[\"Sex\",\"Pclass\",\"Embarked\",\"Parch\",\"SibSp\",\"Family\",\"Age\",\"Fare\",\"Title\",\"TickNo\",\"CabinL\"]]\n    \n    return df","109741af":"new = model_ready(new)","c897e83e":"fig = plt.figure(figsize=(8,6))\nplt.title(\"Feature Relationships\",fontsize=16,fontweight=\"bold\")\nsns.heatmap(data=new.corr(),cmap=\"terrain\",lw=3,linecolor=\"black\",annot=True)","9f5f775c":"# Feature detailing whether a family size is above or below the mean\nnew[\"Above_mean_family_size\"] = new[\"Family\"].apply(lambda x: 0 if x < new[\"Family\"].mean() else 1)","97ec9420":"# Adult male feature\ndef adultmale(cols):\n    \n    age = cols[0]\n    sex = cols[1]\n    \n    if sex == 1:\n        if age > 18:\n            return 1\n        else:\n            return 0\n        \n    else:\n        return 0\n    \nnew[\"Adult_male\"] = new[[\"Age\",\"Sex\"]].apply(adultmale,axis=1)","3d7a0309":"# Child female feature\ndef childfemale(cols):\n    \n    age = cols[0]\n    sex = cols[1]\n    \n    if sex == 0:\n        if age < 18:\n            return 1\n        else:\n            return 0\n        \n    else:\n        return 0\n    \nnew[\"Child_female\"] = new[[\"Age\",\"Sex\"]].apply(childfemale,axis=1)","32890898":"# First class female feature\ndef fclass_female(cols):\n    \n    pclass = cols[0]\n    sex = cols[1]\n    \n    if pclass == 1:\n        if sex == \"female\":\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \n    \nnew[\"1st_class_female\"] = df[[\"Pclass\",\"Sex\"]].apply(fclass_female,axis=1)    ","cecbd346":"# Lumping ages into groups\ndef age_grouping(age):\n    \n    if age < 18:\n        return 0\n    elif age >= 18 and age < 60:\n        return 1\n    else:\n        return 2\n    \nnew[\"Age\"] = new[\"Age\"].apply(age_grouping)","002c0faa":"fig = plt.figure(figsize=(12,10))\nplt.title(\"Feature Relationships\",fontsize=16,fontweight=\"bold\")\nsns.heatmap(new.corr(),cmap=\"terrain\",annot=True,\n            linewidth=3,linecolor=\"black\")","858b3204":"new.isnull().sum()","c689c8f8":"print(\"{} Unique titles:\".format(new.Title.nunique()))\nnew.Title.unique()","addc1ced":"new.loc[new[\"Title\"] == \"Ms.\", \"Title\"] = \"Miss.\"\nnew.loc[new[\"Title\"] == \"Mme.\", \"Title\"] = \"Miss.\"\nnew.loc[new[\"Title\"] == \"Mlle.\", \"Title\"] = \"Miss.\"\nnew.loc[new[\"Title\"] == \"der\", \"Title\"] = \"the\"\nnew.loc[new[\"Title\"] == \"Impe,\" , \"Title\"] = \"Military\"\nnew.loc[new[\"Title\"] == \"Col.\" , \"Title\"] = \"Military\"\nnew.loc[new[\"Title\"] == \"Major.\" , \"Title\"] = \"Military\"","9b625fcc":"# Lumping titles with less than 2 observations as \"Other\"\nfor title in new[\"Title\"].unique():\n    if new[new[\"Title\"] == title][\"Title\"].value_counts().values[0] < 2:\n        new.loc[new[\"Title\"] == title, \"Title\"] = \"Other\"","027761bf":"print(\"{} Unique titles:\".format(new.Title.nunique()))\nnew.Title.unique()","5e64c9db":"titles = pd.get_dummies(new[\"Title\"],prefix=\"Title\")\ncabinl = pd.get_dummies(new[\"CabinL\"],prefix=\"Cab\")\n\nnew.drop(columns=[\"CabinL\",\"Title\"],inplace=True)","237bdd19":"from sklearn.preprocessing import StandardScaler,minmax_scale\n\nscaled_feats = pd.DataFrame(minmax_scale(X=new[\"Fare\"],feature_range=(0,1)),columns=[\"Fare\"])\n\n#scaled_feats = scaler.fit_transform(new[[\"Fare\"]])\n\nnew.drop(columns=[\"Fare\"],inplace=True)","85770480":"X = pd.concat([scaled_feats,new,cabinl,titles],axis=1).dropna()","2370beee":"pd.set_option(\"display.max_columns\",None)","045e99b0":"X.head()","d01a25bf":"y = X[\"Survived\"]\n\nX = X.drop([\"Survived\"],axis=1)","d7c5728d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nimport xgboost as xgb","89a87e05":"models = {\n    \n    \"Logistic Regression\": LogisticRegression(),\n    \"Support Vector Machine\": SVC(),\n    \"Forest\":RandomForestClassifier(),\n    \"DTree\":DecisionTreeClassifier(),\n    \"KNN\":KNeighborsClassifier(),\n    \"MLP\":MLPClassifier(),\n    \"xgb\":xgb.XGBClassifier()\n    \n}","d23b51d2":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)","9a922854":"for key,value in models.items():\n    \n    value.fit(X_train,y_train)\n    \n    print(key + \" Trained\")","0d81758a":"for key, value in models.items():\n    \n    print(key+\" accuracy: {:.2f}\".format(value.score(X_test,y_test)))","097a85e4":"from sklearn.model_selection import GridSearchCV\n\nparams = {\"C\":[0.1,0.5,1,10,100],\"gamma\":[10,1,0.1,0.01,0.001]}\n\ngrid = GridSearchCV(SVC(),params,verbose=1)\n\ngrid.fit(X_train,y_train)","fd9b4a3f":"grid.best_params_","529bc5db":"print(\"Tuned SVM Score: {:.2f}\".format(grid.score(X_test,y_test)))","ab7c2988":"preds = grid.predict(X_test)\n\nfrom sklearn.metrics import classification_report, confusion_matrix","5b344ee2":"sns.heatmap(pd.DataFrame(confusion_matrix(y_test,preds),\n                         columns=[\"Predicted Deceased\",\"Predicted Survived\"],\n                        index=[\"Actual Deceased\",\"Actual Survived\"]),\n                        fmt=\"g\",annot=True,cmap=\"terrain\",cbar=False)","148e4451":"print(classification_report(y_test,preds))","3a5fa0d4":"Looks good so far, now we just need to make sure we have similar cabin letter proportions to before","4ecac223":"Let's explore these two hypotheses","c44b6980":"We see above that while it is not true that females were overrepresented in the first class, females were more likely to be travelling with parents\/children. This could perhaps account for some discrepancy in the survival rates of each sex.","34193abc":"Male odds of survival almost double (16.5% to 31.2%) when the number parent\/children travelling companions are more than zero.\nFemale odds of survival however seem to decline by around 12% (78.9% to 66.7%) when parent\/children travelling companions are above zero.","ba78a17d":"Now that we have the cabin letter make up for each class, we can write a function to impute the cabin letter onto our null values","9a92f0e8":"* As can be viewed above, around 1 in 5 males and around 3 in 4 females survived. This discrepancy is fairly staggering, yet not all together surprising. When the boarding of the limited supply of lifeboats was taking place, a 'women and children first' policy was implemented. This alone would have been enough to ensure large discrepencies in the survival rates between the sexes.","8cbe0a9d":"**Some Observations**\n* The majority of passengers travelled without family members.\n* There seems to be an increase in survival rates as family size increases, but only up until a certain point. This increase can likely be attributed to passengers travelling with children being able to gain access to lifeboats more easily. As for the decrease, this could be attributed to the difficulty of managing larger groups of children. Though it is hard to say as there are only a small amount of observations with larger families","051010bc":"**Modelling**","883f32bc":"Though it is difficult to confidently draw conclusions, a look at the above table appears to suggest the male survival rate increases with the parent\/child feature, whilst the inverse appears to be true for female survival rates.","835e945a":"Let's look at the percentage of each age group that are deceased","7de25a4a":"Now to tidy up the title features","6b7e1eda":"**Let's start by imputing missing ages.**","b17123bc":"**Other Possible Reasons For Discrepancy in Survival Rates Between The sexes**\n* Female overrepresentation in first class\n* Males were less likely to travel with children","3bdbec87":"As a curiosity, I will look at how mean fare prices differed between sexes and class","86e6a04e":"**Some Observations**\n* The age group suffering the highest proportion of losses were those aged 27\n* There seems to be a general downward trend in the amount of losses per age group as age increases. This is ikely due   to the first class being comprised of older passengers, and first class passengers being given preferential treatment   in regards to the boarding of lifeboats.","fb95a86e":"Some new features are very highly correlated with current features. This may prove to be a problem. I will, however, keep for them for the meantime as I believe they could be handy to experiment with.","3b3a8d07":"Let's create some more features to try and improve our feature relatonships","b03f14bd":"Our age feature is now full.","f0fe1096":"Let's get mean ages based on passenger class (pclass) and sex.","5a93390d":"**Filling Cabin Na Values**\nI will now explore filling the null values in the cabin letter column. I will do this by:\n\n1. Finding out the proportion make up of cabin letters by passenger class (Pclass)\n2. Filling the null values with these cabin letters, so the existing cabin letter ratios are maintained","d5f29ffb":"Something interesting to note: across classes, women, on average, paid at least $2 more per ticket as compared to men. This discrepancy is particularly noteworthy in first class where a womens ticket was, on average, 58% more expensive."}}