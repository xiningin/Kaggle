{"cell_type":{"2ed3d9b8":"code","686f3a65":"code","91daafb2":"code","0465962c":"code","c4d7e4dd":"code","7b9e967d":"code","d25e2b3a":"code","3fe51283":"code","910cd054":"code","87ba6035":"code","8aedc913":"code","9786a518":"code","205249ee":"code","6070fc15":"code","f082df17":"markdown","3bd9622c":"markdown","46e32511":"markdown","96ea485e":"markdown","aa44ecb6":"markdown","9d836f5e":"markdown","933eccbb":"markdown","cd5101b2":"markdown","22f0d172":"markdown","ff6d20ca":"markdown","a626fa76":"markdown","b321b7ec":"markdown","9f0cbf6e":"markdown","c08d3a5a":"markdown","cae4a3f6":"markdown"},"source":{"2ed3d9b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","686f3a65":"# importing csv data into pandas dataframe\ndata=pd.read_csv(\"\/kaggle\/input\/bank-note-authentication-uci-data\/BankNote_Authentication.csv\")\n\n# printing first few data\nprint(data.head())\n\n# printing dimension of data\nprint('Dimension :',data.shape,'\\n')\n\n# printing statistical summary of data\nprint(data.describe())","91daafb2":"# checking for NA values\n\ncols=data.columns\n\nprint(\"NA values\")\nprint(\"--------------\")\nfor col in cols:\n    print(col,'=>',sum(data[col].isna()))","0465962c":"# feature and target selection\n\nX=data.iloc[:,:-1] # all columns except last as features\ny=data.iloc[:,-1:] # last column as target","c4d7e4dd":"from sklearn.model_selection import train_test_split\n\n# spliting 80% data as training data and remaining 20% data as testing data\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=4)","7b9e967d":"from sklearn.neighbors import KNeighborsClassifier\n\nknn=KNeighborsClassifier()\nknn=knn.fit(X_train,y_train)","d25e2b3a":"# predict the testing data\n\ny_pred=knn.predict(X_test)","3fe51283":"from sklearn import metrics\n\nlabels=['forged','genuine']\n\n# ploting confusion matrix\nmetrics.plot_confusion_matrix(knn,X_test,y_test,display_labels=labels)\n\n# printing accuracy score\naccuracy_score=metrics.accuracy_score(y_test,y_pred)\nprint(\"Accuracy of our trained model is\",accuracy_score)","910cd054":"from sklearn import tree\n\nclf=tree.DecisionTreeClassifier()\nclf=clf.fit(X_train,y_train)","87ba6035":"# predict the testing data\n\ny_pred=clf.predict(X_test)","8aedc913":"from sklearn import metrics\n\nlabels=['forged','genuine']\n\n# ploting confusion matrix\nmetrics.plot_confusion_matrix(clf,X_test,y_test,display_labels=labels)\n\n# printing accuracy score\naccuracy_score=metrics.accuracy_score(y_test,y_pred)\nprint(\"Accuracy of our trained model is \",accuracy_score)","9786a518":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf=clf.fit(X_train,y_train)","205249ee":"# predict the testing data\n\ny_pred=clf.predict(X_test)","6070fc15":"from sklearn import metrics\n\nlabels=['forged','genuine']\n\n# ploting confusion matrix\nmetrics.plot_confusion_matrix(clf,X_test,y_test,display_labels=labels)\n\n# printing accuracy score\naccuracy_score=metrics.accuracy_score(y_test,y_pred)\nprint(\"Accuracy of our trained model is \",accuracy_score)","f082df17":"## Importing Data","3bd9622c":"> ## prediction","46e32511":"> ## Accuracy","96ea485e":"> ## fitting","aa44ecb6":"> ## *fitting*","9d836f5e":"> ## prediction","933eccbb":"> ## prediction","cd5101b2":"## Data split","22f0d172":"> ## Accuracy","ff6d20ca":"***\n\n***","a626fa76":"# 2. Decision Tree Classifiaction\n\n***","b321b7ec":"# 3. Gaussian Naive Bayes Classifier\n\n***","9f0cbf6e":"> ## fitting","c08d3a5a":"> ## Accuracy","cae4a3f6":"# 1. K-Nearest Neighbor Classifiaction\n\n***"}}