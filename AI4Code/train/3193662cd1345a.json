{"cell_type":{"24abf711":"code","6df248dc":"code","dfc6db2c":"code","a17a8957":"code","0a1f6353":"code","cd00066c":"code","730ba4ee":"code","f319de75":"code","e03c72aa":"code","d5197dc3":"code","1bea1979":"code","a2473d27":"code","88b076d5":"code","4900559a":"code","36a945af":"code","a26b9a5d":"code","1f8d408c":"code","f781ce89":"code","8401a51d":"code","2e07fd6a":"code","90eca4a8":"code","060fa702":"code","b4b4cecf":"code","5636a9c9":"code","9aabe96f":"code","6d16018a":"code","a8234bc3":"code","47c059f5":"code","0c179d46":"code","a45af7ac":"code","6ff966a9":"code","613bd2c1":"code","566e2581":"code","d7da1915":"code","59c770f1":"code","214018f1":"code","25b57913":"code","313186a7":"code","cf7bc93d":"code","fc8709f9":"code","717ac9d7":"code","782b5918":"code","e609398f":"code","49367b8f":"code","46ca0372":"code","5e74f8a1":"code","7c8e080f":"code","4035bba1":"code","95f1ed30":"code","331d2fcf":"code","f2189375":"code","b6393380":"code","98d2d069":"code","b01db437":"code","509ab932":"code","e36f44fc":"code","f28447dc":"markdown","d8d43f90":"markdown","e429a77c":"markdown","0f02eb80":"markdown","6df4798b":"markdown","f8ccbe65":"markdown","43ae2c4e":"markdown","b7fb2061":"markdown","d43bd467":"markdown","3561bd4a":"markdown","c00e2404":"markdown","4a8dec47":"markdown","fe4216df":"markdown","f4fa162a":"markdown","eb960ea5":"markdown","0f02c47c":"markdown","0939a69b":"markdown","cedd0b77":"markdown","39e2a7e0":"markdown","9b9dbec4":"markdown","555e18c9":"markdown"},"source":{"24abf711":"# \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \u0130gnore the Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_rows', 150)\npd.set_option('display.max_columns', None)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6df248dc":"# Load data \ndf=pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf1=df.copy() # copies data as df1\ndf2=df.copy()","dfc6db2c":"df.head()","a17a8957":"df.info()","0a1f6353":"# Convert TotalCharges's dtype to float from string \ndf[\"TotalCharges\"]=df[\"TotalCharges\"].apply(lambda x: float(x) if len(x)>1 else np.nan) # \"if len(x)>1\" because df[\"TotalCharges\"] has '' ","cd00066c":"# Missin Values\ndf.isna().sum()","730ba4ee":"# NaN Total Charges : \u0130f tenure = 0 then Total Charges = 0\ndf.loc[df[\"TotalCharges\"].isna(),[\"tenure\",\"MonthlyCharges\", \"TotalCharges\"]]","f319de75":"# Fiil Total Chargres with 0\ndf[\"TotalCharges\"].fillna(0,inplace=True)","e03c72aa":"# Missin Value Control\ndf.isna().sum().sum()","d5197dc3":"df.describe().T","1bea1979":"df.hist(figsize=(6,6));","a2473d27":"# Churn count\ndf.Churn.value_counts()","88b076d5":"sns.countplot(\"Churn\", data=df);","4900559a":"# Grab categerocal and numerical columns\ncat_cols=[col for col in df.columns if df[col].nunique()<10 ]\nnum_cols=[col for col in df.columns if col not in cat_cols and df[col].dtype!=\"O\"]\nprint(\"# of cat cols:\", len(cat_cols) ,\" and # of numcols: \", len(num_cols))","36a945af":"# Plot catagorical columns by Churn columns\nplot_col=[col for col in cat_cols if col!=\"Churn\"]\nfor col in plot_col:\n    fig, ax=plt.subplots(1,3,figsize=(15,4))\n    data1=(df.groupby(col)[\"Churn\"].value_counts(normalize=True)*100).rename(\"Percentage\").reset_index()\n   \n    sns.countplot(ax=ax[0],x=col, data=df)\n    ax[0].set_title(col+\"_Count\")\n   \n    sns.countplot(ax=ax[1],x=col, data=df, hue=\"Churn\")\n    ax[1].set_title(col+\"_Count by Churn\")\n    \n    sns.barplot(ax=ax[2],x=col, y=\"Percentage\", data=data1, hue=\"Churn\",order=df[col].unique())\n    ax[2].set_ylim(0,100)\n    ax[2].set_title(col+\"_Percentage by Churn\")\n\n    if col ==\"PaymentMethod\":\n          for i in range(3):\n            ax[i].tick_params(axis=\"x\",labelrotation=10)","a26b9a5d":"#Distibution of Numeracail Columns by Churn\nfig, ax=plt.subplots(2,3,figsize=(18,11))\nfor i,col in enumerate(num_cols):\n    sns.boxplot(ax=ax[0,i],x=\"Churn\",y=col, data=df);\n    ax[0,i].set_title(col)\n    sns.histplot(ax=ax[1,i],x=df[col],hue=df[\"Churn\"],multiple=\"dodge\",kde=True,bins=30)\n","1f8d408c":"# Numerical Columns visualization\nfig , ax=plt.subplots(2,2, figsize=(15,10))\nfor i,col in enumerate([\"MonthlyCharges\",\"TotalCharges\"]):\n    sns.scatterplot(ax=ax[0,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")\n    #sns.scatterplot(ax=ax[1,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")\n    sns.lineplot(ax=ax[1,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")","f781ce89":"#Corelation \nsns.heatmap(df.corr(),annot=True)","8401a51d":"df.head()","2e07fd6a":"\n# 7795-CFOCW---->nnnn-ssss \n\n# Before \"-\" in ID\ndf[\"ID_Fig1\"]=df.customerID.apply(lambda x: int(x[0]))\ndf[\"ID_Fig2\"]=df.customerID.apply(lambda x: int(x[1]))\ndf[\"ID_Fig3\"]=df.customerID.apply(lambda x: int(x[2]))\ndf[\"ID_Fig4\"]=df.customerID.apply(lambda x: int(x[3]))\n\n# After \"-\" in ID\n## Letter List\nletter = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n### Give the Letter Number \ndf[\"ID_Let1\"]=df.customerID.apply(lambda x: letter.index(x[5])) # index number of the letter\ndf[\"ID_Let2\"]=df.customerID.apply(lambda x: letter.index(x[6]))\ndf[\"ID_Let3\"]=df.customerID.apply(lambda x: letter.index(x[7]))\ndf[\"ID_Let4\"]=df.customerID.apply(lambda x: letter.index(x[8]))","90eca4a8":"# Is there any relation between Chunr and these new features, Lets look at the plots\nfig,ax=plt.subplots(2,4, figsize=(25,10))\n\nsns.countplot(ax=ax[0,0],x=df.ID_Fig1, hue=df.Churn)\nsns.countplot(ax=ax[0,1],x=df.ID_Fig2, hue=df.Churn)\nsns.countplot(ax=ax[0,2],x=df.ID_Fig3, hue=df.Churn)\nsns.countplot(ax=ax[0,3],x=df.ID_Fig4, hue=df.Churn)\n\nsns.countplot(ax=ax[1,0],x=df.ID_Let1, hue=df.Churn)\nsns.countplot(ax=ax[1,1],x=df.ID_Let2, hue=df.Churn)\nsns.countplot(ax=ax[1,2],x=df.ID_Let3, hue=df.Churn)\nsns.countplot(ax=ax[1,3],x=df.ID_Let4, hue=df.Churn)\n\n","060fa702":"# MonthlyCharges\/Tenure and TotalCharges\/Tenure\n#New_MCharg_Tenure\ndf[\"New_MCharg_Tenure\"]=df.MonthlyCharges\/(df.tenure)\n\n#New_TCharg_Tenure\ndf[\"New_TCharg_Tenure\"]=df.TotalCharges\/(df.tenure)\ndf[\"New_TCharg_Tenure\"].fillna(0,inplace=True)\n","b4b4cecf":"#EXCELLENT, boxplot shows that New_MCharg_Tenure feature is excelent, I think it's very important\nfig, ax=plt.subplots(1,2,figsize=(12,5))\nsns.boxplot(ax=ax[0],y=df[\"New_MCharg_Tenure\"], x=df.Churn)\nsns.boxplot(ax=ax[1],y=df[\"New_TCharg_Tenure\"], x=df.Churn)","5636a9c9":"fig , ax=plt.subplots(2,2, figsize=(15,10))\nfor i,col in enumerate([\"New_MCharg_Tenure\",\"New_TCharg_Tenure\"]):\n    sns.scatterplot(ax=ax[0,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")\n    #sns.scatterplot(ax=ax[1,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")\n    sns.lineplot(ax=ax[1,i],x=\"tenure\", y=col,data=df,hue=\"Churn\")","9aabe96f":"# This function equates otuliers of numeric columns and returns these values in the table.\n# Also plots boxplots\n#And shows observations of otulier columns that are autlier\ndef outliers_view(df,num_treshould = 20, q1=0.25,q3=0.75,visul = False):\n    num_cols = [x for x in df.columns if (df[x].dtype != \"O\") & (df[x].nunique() > num_treshould)]\n    table = pd.DataFrame()\n    outliers_dict = {}\n    if visul ==True:\n        for i in num_cols:\n            sns.boxplot(y=df[i])\n            plt.xlabel(i)\n            plt.show()\n\n    for i in range(len(num_cols)):\n        q_1 = df[num_cols[i]].quantile(q1)\n        q2 = df[num_cols[i]].quantile(0.5)\n        q_3 = df[num_cols[i]].quantile(q3)\n        iqr = q_3 - q_1\n        up = q_3 + 1.5 * iqr\n        low = q_1 - 1.5*iqr\n        outliers_count = len(df[(df[num_cols[i]] < low) | (df[num_cols[i]] > up)][num_cols[i]])\n\n        table.loc[num_cols[i],\"low_limit\"] = low\n        table.loc[num_cols[i], q1] = q_1\n        table.loc[num_cols[i], \"mean\"] = df[num_cols[i]].mean()\n        table.loc[num_cols[i], \"median\"] = q2\n        table.loc[num_cols[i], q3] = q_3\n        table.loc[num_cols[i], \"up_limit\"] = up\n        table.loc[num_cols[i], \"count\"] = outliers_count\n        table.loc[num_cols[i], \"percent\"] = outliers_count\/df.shape[0]*100\n        outliers_dict[num_cols[i]] = df[(df[num_cols[i]] < low) | (df[num_cols[i]] > up)][num_cols[i]]\n    outliers_values =pd.DataFrame.from_dict(outliers_dict)\n    outliers_values = outliers_values[[col for col in outliers_values.columns if outliers_values[col].notnull().sum() != 0]]\n\n    return table, outliers_values\n\n# Replace outliers with treshoulds\ndef outlier_press( dataframe, column=all,num_treshould=20,q1=0.25,q3=0.75):\n    if column == all:\n        columns =outliers_view(dataframe,num_treshould=num_treshould,q1=q1,q3=q3)[1].columns\n    else:\n        columns = column\n\n    for col in columns:\n        indexes = outliers_view(dataframe,num_treshould=num_treshould,q1=q1,q3=q3)[1][col]\\\n            [outliers_view(dataframe,num_treshould=num_treshould,q1=q1,q3=q3)[1][col].notnull()].index\n        low_limit = outliers_view(dataframe,num_treshould=num_treshould,q1=q1,q3=q3)[0].loc[col, \"low_limit\"]\n        up_limit = outliers_view(dataframe,num_treshould=num_treshould,q1=q1,q3=q3)[0].loc[col, \"up_limit\"]\n        dataframe.loc[indexes, col] = dataframe.loc[indexes, col].\\\n            apply(lambda x: low_limit if x < low_limit else up_limit)\n    df1=dataframe\n    return df1","6d16018a":"outliers_view(df,q3=0.95)","a8234bc3":"df=outlier_press(df,[\"New_MCharg_Tenure\"],q3=0.90)","47c059f5":"# New_MCharg_Tenure\nsns.histplot(x=df[\"New_MCharg_Tenure\"],hue=df[\"Churn\"],multiple=\"dodge\",kde=True,bins=30)\n","0c179d46":"# New_TCharg_Tenure\nsns.histplot(x=df[\"New_TCharg_Tenure\"],hue=df[\"Churn\"],multiple=\"dodge\",kde=True,bins=30)\n","a45af7ac":"# LABEL ENCODER AND ONE HOT ENCODDER Functions\n\nfrom sklearn import preprocessing\n# Label Encoder\ndef label_encoder(dataframe, binary_cols):\n    for col in binary_cols:\n        labelencoder = preprocessing.LabelEncoder()\n        dataframe[col] = labelencoder.fit_transform(dataframe[col])\n    return dataframe\n\n\n#One Hot Encoder\ndef one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","6ff966a9":"# Grab binary columns and Categorical but not binary columns \nbinary_cols=[col for col in cat_cols if df[col].nunique()==2]\nnotbinary_cat_cols=[col for col in cat_cols if col not in binary_cols]","613bd2c1":"# Label Encoder\nlabel_encoder(df,binary_cols)\n\n# Onde Hot Encoder\ndf=one_hot_encoder(df,notbinary_cat_cols)","566e2581":"df.head()","d7da1915":"#scaler_cols=[col for col  in df.columns if (df[col].dtype!=\"O\") & (df[col].nunique()>5)]","59c770f1":"\"\"\"from sklearn.preprocessing import StandardScaler\nfor col in scaler_cols:\n    scaler = StandardScaler().fit(df[[col]])\n    df[col]=scaler.transform(df[[col]])\"\"\"","214018f1":"# \u0130mport Libraries\nfrom sklearn import preprocessing, metrics\nfrom sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score\n\n# \u0130mport All Base Models\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\n\n# Model Evaluation metrics\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix, recall_score\n\n","25b57913":"# Train-Test Split\ny=df[\"Churn\"]\nx=df.drop([\"customerID\",\"Churn\"],axis=1) #Drop customerID\nX_train,X_test,y_train,y_test= train_test_split(x,y,test_size=0.20)","313186a7":"# Base Models Things\nmodels = [('KNN', KNeighborsClassifier()),\n          ('CART', DecisionTreeClassifier()),\n          ('RF', RandomForestClassifier()),\n          ('GBM', GradientBoostingClassifier()),\n          (\"XGBoost\", XGBClassifier()),\n          (\"LightGBM\", LGBMClassifier()),\n          (\"CatBoost\", CatBoostClassifier(verbose=False)),\n          (\"LOG\",LogisticRegression()),\n          (\"SVC\",SVC())]\n","cf7bc93d":"# Base Model Scores\ntest_scor=[]\ntrain_scor=[]\nname1=[]\nfor name, model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    test_score=accuracy_score(y_pred, y_test) \n    y_pred_train=model.predict(X_train)\n    train_score=accuracy_score(y_pred_train, y_train)\n    name1.append(name)\n    test_scor.append(test_score)\n    train_scor.append(train_score)\n    \nbase_model_score=pd.DataFrame({\"indeks\":name1,\"Test_Scor\":test_scor,\"Train_Scor\":train_scor})\n#base_model_score.index=name\nbase_model_score.set_index(\"indeks\")","fc8709f9":"fig, ax=plt.subplots(figsize=(7,5))\nax.plot(base_model_score.indeks, base_model_score.Test_Scor, label=\"Test Scor\",marker=\"d\")\nax.plot(base_model_score.indeks, base_model_score.Train_Scor,label=\"Train Scor\", marker=\"d\")\nplt.legend()\nplt.hlines(0.80,0,9,colors=\"red\")\nplt.xticks(rotation=90);","717ac9d7":"#######################################\n# Feature Importance\n#######################################\n\ndef plot_importance(model, X, num=x.shape[0]):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': X.columns})\n    plt.figure(figsize=(10, 15))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Feature Importance')\n    plt.tight_layout()\n    plt.savefig('importances-01.png')\n    plt.show()","782b5918":"# CatBoostClassifier()\nmodel= CatBoostClassifier(verbose=False).fit(X_train, y_train)\ny_pred = model.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=model.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(\"###########################\")\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","e609398f":"# Model Tuning\n\ncatb_params = {\"iterations\": [200, 500, 800,1000],\n               \"learning_rate\": [0.001, 0.01, 0.1],\n               \"depth\": [1 ,2, 3, 5, 6]}\n\ncatb_model =CatBoostClassifier(verbose=False)\ncatb_cv_model = GridSearchCV(catb_model,\n                             catb_params,\n                             cv=5,\n                             n_jobs=-1,\n                             verbose=2).fit(X_train, y_train)\n\ncatb_cv_model.best_params_","49367b8f":"# Final Model\n\ncatb_tuned = CatBoostClassifier(**catb_cv_model.best_params_,verbose=False).fit(X_train, y_train)\ny_pred = catb_tuned.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=catb_tuned.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","46ca0372":"# Roc Curve\nmetrics.plot_roc_curve(catb_tuned, X_test, y_test)  ","5e74f8a1":"# Plot \u0130mportance\nplot_importance(catb_tuned , X_test)","7c8e080f":"# LGBMClassifier()\nmodel= LGBMClassifier().fit(X_train, y_train)\ny_pred = model.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=model.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(\"###########################\")\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","4035bba1":"# Model Tuning\n\nlgb_model = LGBMClassifier()\n\nlgbm_params = {\"learning_rate\": [0.005,0.01, 0.1],\n               \"n_estimators\": [300, 500, 1000],\n               \"max_depth\": [2, 3, 5, 8],\n               \"colsample_bytree\": [1,0.9, 0.8, 0.6,0.5]}\n\nlgbm_cv_model = GridSearchCV(lgb_model,\n                             lgbm_params,\n                             cv=10,\n                             n_jobs=-1,\n                             verbose=2).fit(X_train, y_train)\n\nlgbm_cv_model.best_params_","95f1ed30":"# Final Model\n\nlgbm_tuned = LGBMClassifier(**lgbm_cv_model.best_params_).fit(X_train, y_train)\ny_pred = lgbm_tuned.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=lgbm_tuned.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(\"###########################\")\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","331d2fcf":"# Roc Curve\nmetrics.plot_roc_curve(lgbm_tuned, X_test, y_test)  ","f2189375":"# Plot \u0130mportance\nplot_importance(lgbm_tuned , X_test)","b6393380":"# GradientBoostingClassifier()\nmodel= GradientBoostingClassifier().fit(X_train, y_train)\ny_pred = model.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=model.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(\"###########################\")\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","98d2d069":"# Model Tuning\n\ngbm_params = {\"learning_rate\": [0.005,0.01, 0.1],\n              \"max_depth\": [3, 8],\n              \"n_estimators\": [300,500,800, 1000],\n              \"subsample\": [0.3, 0.5, 0.7, 1]}\n\ngbm_model = GradientBoostingClassifier(random_state=17)\ngbm_cv_model = GridSearchCV(gbm_model, gbm_params, cv=5, n_jobs=-1, verbose=2).fit(X_train, y_train)\ngbm_cv_model.best_params_","b01db437":"# Final Model\n\ngbm_tuned = GradientBoostingClassifier(**gbm_cv_model.best_params_).fit(X_train, y_train)\ny_pred = gbm_tuned.predict(X_test)\ntest_score=accuracy_score(y_pred, y_test) \ny_pred_train=gbm_tuned.predict(X_train)\ntrain_score=accuracy_score(y_pred_train, y_train)\n\nprint(\"Test Scor: \",test_score)\nprint(\"Train Score\", train_score)\nprint(\"###########################\")\nprint(confusion_matrix(y_pred, y_test))\nprint(classification_report(y_pred, y_test))","509ab932":"# Roc Curve\nmetrics.plot_roc_curve(gbm_tuned, X_test, y_test)  ","e36f44fc":"# Plot \u0130mportance\nplot_importance(gbm_tuned , X_test)","f28447dc":"## Feature Engineerin","d8d43f90":"> # **Thank You**","e429a77c":"### New Features from customerID","0f02eb80":"# Model","6df4798b":"## Label Encoder-One Hot Encoder","f8ccbe65":"## CatBoost Model","43ae2c4e":"# **Importanta 5 metrics: Accuracy, precision, recall, f1-score  and ROC Curve**\n\n# CatBoost, LightGBM and GBM Models","b7fb2061":"# Data Analysis (EDA + Visualization)","d43bd467":"## Outlier Analysis","3561bd4a":"### Categorical Variables","c00e2404":"## Ligth GBM Model","4a8dec47":"### Numerical Variaibles","fe4216df":"## Missing Values","f4fa162a":"## Base Models","eb960ea5":"## GBM Model","0f02c47c":"### New Feature(MonthlyCharges\/Tenure and TotalCharges\/Tenure)\n","0939a69b":"# Load Data","cedd0b77":"## Standar Scaler","39e2a7e0":"# Import Libraries","9b9dbec4":"### Numerical New Columns visualization","555e18c9":"# **Telco Customer Churn Prediction**\n### \u0130mport Libraries\n### Load Data\n### Missin Values\n### Data Analiysis(EDA and Visualization)\n### Feature Engineerin\n### Outlier Analysis\n### Label Encoder-One Hot Encoder\n### Base Models\n### CatBoost Model\n### LightGMB Model\n### GBM Model"}}