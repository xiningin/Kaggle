{"cell_type":{"2a6a4d21":"code","2be9e6bf":"code","0b13a19c":"code","38ac1741":"code","0944d4d0":"code","7ddd7011":"code","31533d0b":"code","9fe48509":"code","4cf7907d":"code","cf69c523":"code","9a998196":"code","35f774f6":"code","d65fa7ef":"code","45d61407":"code","88287632":"code","cb51512e":"code","4aa75db7":"markdown","01b4b679":"markdown","6ec9b057":"markdown","482ee449":"markdown","a5431912":"markdown","3f85705c":"markdown","3a8e8dd6":"markdown","4b5a34ba":"markdown","a0429a34":"markdown"},"source":{"2a6a4d21":"import numpy as np\nimport pandas as pd\nimport os","2be9e6bf":"train_titanic = pd.read_csv(open('\/kaggle\/input\/titanic\/train.csv'))\ntest_titanic = pd.read_csv(open('\/kaggle\/input\/titanic\/test.csv'))\nsubmission_titanic = pd.read_csv(open('\/kaggle\/input\/titanic\/gender_submission.csv'))\n\nprint(train_titanic.head(10))\nprint(\"\")\nprint(\"===================================================================\")\nprint(\"\")\nprint(test_titanic.head(10))\nprint(\"\")\nprint(\"===================================================================\")\nprint(\"\")\nprint(submission_titanic.head(10))","0b13a19c":"train_titanic.head()","38ac1741":"test_titanic.head()","0944d4d0":"submission_titanic.head()","7ddd7011":"pd.unique(train_titanic['Cabin'])","31533d0b":"# import sklearn packages\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\nfrom sklearn.impute import SimpleImputer","9fe48509":"X_train, X_test, y_train, y_test = train_test_split(train_titanic.drop(columns=['Survived', 'Name', 'Ticket', 'Cabin'], axis=1), train_titanic[['Survived']], test_size = 0.2, random_state=0, shuffle = True)\ntest_set = test_titanic.drop(['Name', 'Ticket', 'Cabin'], axis=1)\nX_train = pd.get_dummies(X_train, columns = ['Sex', 'Embarked'])\nX_test = pd.get_dummies(X_test, columns = ['Sex', 'Embarked'])\ntest_set = pd.get_dummies(test_set, columns = ['Sex', 'Embarked'])\nX_train = X_train.drop(columns = ['Sex_male'])\nX_test = X_test.drop(columns = ['Sex_male'])\ntest_set = test_set.drop(columns = ['Sex_male'])","4cf7907d":"#missing value imputation with mean and mode\n\nX_train['Age'] = X_train['Age'].fillna(X_train['Age'].mean())\nX_train['Fare'] = X_train['Fare'].fillna(X_train['Fare'].mean())\nX_test['Age'] = X_test['Age'].fillna(X_test['Age'].mean())\nX_test['Fare'] = X_test['Fare'].fillna(X_test['Fare'].mean())\ntest_set['Age'] = test_set['Age'].fillna(test_set['Age'].mean())\ntest_set['Fare'] = test_set['Fare'].fillna(test_set['Fare'].mean())\n\nX_train['Sex_female'] = X_train['Sex_female'].fillna(X_train['Sex_female'].mode())\nX_train['Embarked_C'] = X_train['Embarked_C'].fillna(X_train['Embarked_C'].mode())\nX_train['Embarked_Q'] = X_train['Embarked_Q'].fillna(X_train['Embarked_Q'].mode())\nX_train['Embarked_S'] = X_train['Embarked_S'].fillna(X_train['Embarked_S'].mode())\nX_train['SibSp'] = X_train['SibSp'].fillna(X_train['SibSp'].mode())\nX_train['Parch'] = X_train['Parch'].fillna(X_train['Parch'].mode())\n\n\nX_test['Sex_female'] = X_test['Sex_female'].fillna(X_test['Sex_female'].mode())\nX_test['Embarked_C'] = X_test['Embarked_C'].fillna(X_test['Embarked_C'].mode())\nX_test['Embarked_Q'] = X_test['Embarked_Q'].fillna(X_test['Embarked_Q'].mode())\nX_test['Embarked_S'] = X_test['Embarked_S'].fillna(X_test['Embarked_S'].mode())\nX_test['SibSp'] = X_test['SibSp'].fillna(X_test['SibSp'].mode())\nX_test['Parch'] = X_test['Parch'].fillna(X_test['Parch'].mode())\n\ntest_set['Sex_female'] = test_set['Sex_female'].fillna(test_set['Sex_female'].mode())\ntest_set['Embarked_C'] = test_set['Embarked_C'].fillna(test_set['Embarked_C'].mode())\ntest_set['Embarked_Q'] = test_set['Embarked_Q'].fillna(test_set['Embarked_Q'].mode())\ntest_set['Embarked_S'] = test_set['Embarked_S'].fillna(test_set['Embarked_S'].mode())\ntest_set['SibSp'] = test_set['SibSp'].fillna(test_set['SibSp'].mode())\ntest_set['Parch'] = test_set['Parch'].fillna(test_set['Parch'].mode())\n\n#imputer = SimpleImputer(missing_values=, strategy='mean')\n#simple = SimpleImputer(missing_values=pd.NA, strategy='mean')\n#X_train['Age'] = imputer.fit_transform(X_train['Age'])\nX_train","cf69c523":"pipe = Pipeline([('scaler', StandardScaler(with_mean=0, with_std=1))\n                 #('encoder', OneHotEncoder())\n                 ])\n# The pipeline can be used as any other estimator\n# and avoids leaking the test set into the train set\npipe.fit(X_train, y_train)\npipe.fit(X_test, y_test)\npipe.fit(test_set)","9a998196":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestClassifier\n# Instantiate model with 1000 decision trees\nrf = RandomForestClassifier(max_depth = 12, random_state = 20)\n# Train the model on training data\nrf.fit(X_train, y_train)","35f774f6":"y_tr_pred = rf.predict_proba(X_test)\n#y_tr_pred = (y_tr_pred >= 0.4).astype(np.float64)\ny_tr_pred = y_tr_pred[:,1:]\ny_tr_pred","d65fa7ef":"from sklearn.metrics import accuracy_score, f1_score\n#accuracy_score(y_train, y_tr_pred)\n#f1_score(y_train, y_tr_pred)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nlr_auc = roc_auc_score(y_test, y_tr_pred)\nlr_auc","45d61407":"y_pred = rf.predict_proba(test_set)\n#y_tr_pred = (y_tr_pred >= 0.5).astype(np.float64)\ny_pred = y_pred[:,1:]\ny_pred","88287632":"y_pred = pd.DataFrame(y_pred)\ny_pred\ny_pred.columns = ['Predicted']\ny_pred['PassengerID'] = test_set['PassengerId']\ny_pred_last = y_pred[['PassengerID', 'Predicted']]\n#y_pred.to_csv('ytestpred.csv')","cb51512e":"# Import a module to display a link to the file\nfrom IPython.display import FileLink\n# Import a module to delete the file\/l\nimport os\n# Create a download function\ndef csv_download_link(df, csv_file_name, delete_prompt=True):\n    \"\"\"Display a download link to load a data frame as csv within a Jupyter notebook\n\n    Parameters\n    ----------\n    df : pandas data frame\n    csv_file_name : str\n    delete_prompt : bool\n    \"\"\"\n    df.to_csv(csv_file_name, index=False)\n    display(FileLink(csv_file_name))\n    if delete_prompt:\n        a = input('Press enter to delete the file after you have downloaded it.')\n        os.remove(csv_file_name)\ncsv_download_link(y_pred_last, 'y_pred_titanic1.csv')","4aa75db7":"# Impute missing values","01b4b679":"# Metrics of Prediction","6ec9b057":"# Encoding","482ee449":"# Data Preprocessing","a5431912":"# Titanic - Kaggle Competition","3f85705c":"# Import the csv file","3a8e8dd6":"# Convert to CSV","4b5a34ba":"# Prediction on the validation data","a0429a34":"# Prediction on test data"}}