{"cell_type":{"c3e84d12":"code","a433b880":"code","e8ff7491":"code","33ef7901":"code","312ff308":"code","dff77d78":"code","d2a8d79d":"code","fc6b65d5":"code","8d7ee932":"code","8a3dd6c0":"code","4d5e698b":"code","d9e1a783":"code","3852b702":"code","3d47f154":"code","5418c985":"code","b2839458":"code","d4348b7b":"code","3efb85b6":"code","a28b999f":"code","1b5d2e1e":"code","984ad1fa":"code","9ec871d6":"code","0e36ea1f":"code","2e113525":"code","35759f3e":"code","1c5fa6f0":"code","cf1b09eb":"code","ec42a4a2":"code","1e60c3e8":"code","def27cf6":"code","af9fcf43":"code","ad61a404":"code","a40bd152":"code","30bedbc9":"code","d9a4b7c8":"code","d32f031d":"code","93cfcdce":"code","999f719d":"code","f8b6c3d2":"code","ec4ecea2":"code","ac7a8f92":"code","26e54572":"code","419ba50e":"code","646a0004":"code","9c7bd9c3":"code","c13fcff8":"code","d9355c84":"code","f9cc15e3":"code","6697f11c":"code","0813a27a":"code","acd996ee":"code","f5d90101":"code","4ad031a7":"code","be85486f":"code","331046bd":"code","cf64f5d8":"code","6eca7049":"code","a2448c5b":"code","65fd36cc":"code","2140445e":"code","2a94e73d":"code","327b657f":"code","9bb87013":"code","312cf80d":"code","0e8917ce":"code","8167b66e":"code","247641c1":"code","44a4d5de":"code","c6174c63":"code","4a97ad57":"code","28995225":"code","9adcc5b3":"code","9d505ec5":"code","cf5e43c1":"code","94622692":"code","bba7c7b0":"code","03f63bc0":"code","d34fab76":"code","e0796c98":"code","1714ede2":"code","8fafd875":"code","9ccb409b":"code","6f4953a4":"code","87c7408e":"code","56b40fe1":"code","1a8be0c0":"code","71ca1141":"code","56f97519":"code","a4499338":"code","0fc150ea":"code","02a1272c":"code","a58f0dd6":"code","caf45fb7":"code","ff521b89":"code","dd069e70":"code","c28db8ec":"code","9676a032":"code","9ba4e17a":"code","b50d0bf7":"code","0bc81f55":"code","e28b6e64":"code","64ea221e":"code","7d3b1ce7":"code","dbc69854":"code","fc870653":"code","237e4a5a":"code","87ce85ba":"code","8ab98659":"code","274de3b7":"code","50a17f12":"code","ea8ce78f":"code","3836a82c":"code","e4a33eaf":"markdown","77fecfe2":"markdown","72cd72b5":"markdown","dae1eb58":"markdown","9e56025f":"markdown","c9cc7d41":"markdown","39078926":"markdown","df3bf4f9":"markdown","36c86d6f":"markdown","efe6bd05":"markdown","e7cf8d4e":"markdown","8a845c47":"markdown","fd1f9c4c":"markdown","46c561a6":"markdown","53d6d747":"markdown","e1ab473d":"markdown","39f40a65":"markdown","2add5d91":"markdown","351fed0d":"markdown","dc4c6e93":"markdown","c886f76b":"markdown","cf496f91":"markdown","9120d2e9":"markdown","f1a305cc":"markdown","f27ad825":"markdown","7b200326":"markdown","dd342884":"markdown","ee69dcf4":"markdown","0f4b511c":"markdown","c68490f3":"markdown","e08d6ded":"markdown","f063c2ed":"markdown","b35703e7":"markdown","40aad2f5":"markdown","f769ddf2":"markdown","1726336b":"markdown","5f604be5":"markdown","6cfebcad":"markdown"},"source":{"c3e84d12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a433b880":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e8ff7491":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')","33ef7901":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","312ff308":"brand_data = brand_data_org.copy()","dff77d78":"brand_data.info()","d2a8d79d":"# no nulls with appropriate data types","fc6b65d5":"brand_data.describe(include='all')","8d7ee932":"# We have 26 unique models but most of the cars are A3\n# 3 different transmission types but most of the cars are Manual transmission\n# 3 different fuel types but most of the cars are running on Diesel\n# It is strange to see min mileage is 1 for used cars!!\n# mpg max = 188.3!! It is not logic to have cars with more than 100 miles per gallon\n# It is also strange to see engine size equal to zero but may be this can be true for electric cars only\n# Let us explore the data in more details","8a3dd6c0":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","4d5e698b":"## year:       Left Skewed, most used cars are between 2015 to 2020\n\n## mileage:    Right Skewed, since most cars are 5 years old. High correlation between mileage and year is clear.\n##             it is also not logic to have mileage of used cars with values very close to zero or even below 50 miles \n##             (as an assumption)\n\n## tax:        Nothing specific can be concluded, however no correlation with any other field can be noticed\n\n## mpg:        Right Skewed, as mentioned above it is strange to have cars with such extremely excessive fuel consumption \n##             (>100 mpg!!) normally, 80 mpg are the max acceptable consumption which can be achieved by Hybrid cars. \n##             Accordingly, anything above 80 will be considered as outliers\n\n## engineSize: Most used cars engine sizes are between 1.5 to 2 (Peak at 2) \n\n## price:      Right Skewed, since most cars are 5 years old. ","d9e1a783":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","3852b702":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","3d47f154":"## -Year & Price are +vely correlated - Recent cars sold at higher prices. Logic \n##  (refer to below graphs year vs mean mileage & year vs mean price)\n\n## -Year & mileage are -vely correlated - As the cars gets older (Year decrease) the mileage driven by the car increases. Logic \n##  (refer to below graph mean price vs [mileage grouped by year])\n##  As year and mileage are highly correlated (High Multicollinearity Excpeted), accordingly year will be dropped after \n##  finishing the preprocessing of data\n\n## -Tax has no significant correlation with any of the other features except with mpg. Tax feature is likely to be dropped out.\n\n## -mpg has no significant correlation with any othe features. \n##  It makes sense that cars with bigger engine size has lower mpg. Surpisingly, low correlation with engine size.  \n##  This maybe due to the different fuel and transmission types.  \n\n## -mpg feature is likely to be dropped as well. \n\n## -Year, mileage, enginesize are the most relevant features affecting car price.","5418c985":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","b2839458":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","d4348b7b":"# Generally, as the the car gets older it is most likely to have been driven more mileages \n# and consequently th mean price get lower\n# Despite the heatmap above shows that years is a bit higher in relation with price than mileage but \n# it is most likely to drop year column instead, because same year includes wide range of mileages\n# however a specific mileage values covers a narrow range of years","3efb85b6":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","a28b999f":"## As shown above a large portion of the prices are considered as outliers\n## This could be due to several reasons:\n## 1. Wide range of models\n## 2. Wide range of engine sizes\n## 3. Wide range of years and mileage\n\n## Therefore, it is not wise to drop all these outliers at this stage","1b5d2e1e":"## Lets try to filter the data for prices above 45,000 and apply box plot again.","984ad1fa":"brand_data_above45=brand_data[brand_data['price']>45000]\nbrand_data_above45.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","9ec871d6":"len(brand_data_above45['price'])","0e36ea1f":"# now we have only 527 outliers (above 45,000). Dataset total len=10668","2e113525":"## Lets try to filter the data for prices above 75,000 and apply box plot again.","35759f3e":"brand_data_above75=brand_data[brand_data['price']>75000]\nbrand_data_above75.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","1c5fa6f0":"len(brand_data_above75['price'])","cf1b09eb":"# now we have only 38 outliers (above 75,000). Dataset total len=10668","ec42a4a2":"## Since the number of outliers are very small compared to the total length of the main dataframe (10668)\n## It is also expected that this number may also reduce further after completing the preprocessing of data\n## The remaining outliers will be eliminated as it will not have much impact on the model.","1e60c3e8":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","def27cf6":"## We can assume that hybrid and diesle are cheaper, encouraging longer rides than those using petrol.","af9fcf43":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","ad61a404":"## As assumed above, hybrid and diesel offers more miles per gallon than petrol\n## And offcourse hybrid cars are more efficeint\n## As I mentioned earlier as well, the raqnge of mpg for petrol and diesel\n## is normally between 20 aprox to 80 and above 100 is considered as an outlier as shown\n## However, for the hybrid cars, the mpg is remarkably high\n## I wont claim to be an expert in cars but I googled it and could not find any car with such performance","a40bd152":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","30bedbc9":"## it is very obvious that manual transmission provides more efficient performance\n## No great difference between automatic and semi automatic mpg profiles however semi auto is slightly better than automatic","d9a4b7c8":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","d32f031d":"## As we do not have electric cars in this dataset, it is not logic to see cars with zero engine size.\n## Accordingly these records will be dropped\n## Generally, it is logic to observe decrease in mpg with respect to increase in engine size.\n## As mentioned above, the mpg range is normally expected to be between 15\/20 to 80. \n## Higher values, are clearly indicated as outliers. \n## These values will be dropped\n## The irregularities are due to the different fuel types and transmission type as well. \n## This will be investigated below but let us count the data features to exculde any minorities that could distbure\n## the visualization","93cfcdce":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","999f719d":"## There are many models that are very few in numbers \n## which maybe not enough for the model to be able to accurately \n## predict their price later.\n## The same also applies on the engineSize. \n## it is also noticeable that most of the cars are of size 2.\n## Most users prefer manual and semi-automatic cars rather than the Automatic ones. \n## There are not enoguh records for hybrid cars, accordingly it will be filtered out for better visulaization of features \n## affecting the mpg of a car and will also be dropped later.","f8b6c3d2":"## Now let us check the effect of the fuel type and transmission along with engine size on the mpg of the car\n## but in order to have good visualization, I will visualize engine size vs mpg for each specific fuel type and transmission\n## I will also remove engine size = zero and Hybrid casrs as well","ec4ecea2":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","ac7a8f92":"## For automatic cars, we do not have diesel cars below 1.6 engine size\n## Again mpg is generally decreasing as engine size increases\n## As mentionedbefore also the normal range of mpg is not higher than 80. We do have one car 160 mpg \n## which is very clear as an outlier","26e54572":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","419ba50e":"## For Semi automatic cars, same comments applies","646a0004":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","9c7bd9c3":"## for manual cars, we do not have diesel cars below 1.4 engine size\n## it is again clear that the range of mpg is higher than auto and semi auto cars","c13fcff8":"## The graphs above shows again that diesel is better than pertol especially for manual transmission cars.\n## One last note is that the minor irregulaties of the mpg decrease in a smooth manner \n## is may be due to the car age and engine status.\n## However, i think this part is clearly understood.","d9355c84":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","f9cc15e3":"## As shown the range of prices is higher for recent cars","6697f11c":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","0813a27a":"## it is clear that R8 is the most expensive car in audi, \n## it could have a great share of the overall price outliers indicated above along with other models","acd996ee":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","f5d90101":"## We can see from model vs mean price graph that the first 7 models mean price are above 45,000\n## which are considered as an outliers as per the price box plot graph.\n## From engineSize vs mean price graph,the first three engineSizes are exceeding 45,000","4ad031a7":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","be85486f":"brand_notax=brand_data.drop(['tax'], axis=1)","331046bd":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","cf64f5d8":"brand_notaxmpg.head()","6eca7049":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","a2448c5b":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","65fd36cc":"sns.histplot(brand_mile['mileage'])","2140445e":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","2a94e73d":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","327b657f":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","9bb87013":"sns.histplot(brand_mile['mileage'])","312cf80d":"sns.histplot(brand_mile['year'])","0e8917ce":"## we will try to remove the year outliers by keeping the records above 1% quartile","8167b66e":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","247641c1":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","44a4d5de":"sns.histplot(brand_year['year'])","c6174c63":"sns.histplot(brand_year['engineSize'])","4a97ad57":"# We can drop Zero enginesizes or any above 5","28995225":"brand_engsZ=brand_year.copy()","9adcc5b3":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ.drop(brand_engsZ.index[brand_engsZ['engineSize'] > 5], inplace = True)","9d505ec5":"sns.histplot(brand_engsZ['engineSize'])","cf5e43c1":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']","94622692":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","bba7c7b0":"vis_ftyp.plot(kind='bar')\nplt.show()","03f63bc0":"# Hybrid Cars has been dropped","d34fab76":"brand_models=brand_fuel.copy()","e0796c98":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","1714ede2":"vis_models.plot(kind='bar')\nplt.show()","8fafd875":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","9ccb409b":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","6f4953a4":"sns.histplot(brand_models['price'])","87c7408e":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","56b40fe1":"# it is clear that many outliers has been already removed after the prepocessing of other features","1a8be0c0":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","71ca1141":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","56f97519":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","a4499338":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","0fc150ea":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","02a1272c":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","a58f0dd6":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","caf45fb7":"# Skewness slightly decreased and as you can see only the oultiers of specific model and year has been cleaned.","ff521b89":"# Let us calculate the percentage of records removed out of the original dataset","dd069e70":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","c28db8ec":"# Data removed is a bit high but accepted","9676a032":"Brand_preprocessed=models_prices.copy()","9ba4e17a":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","b50d0bf7":"Brand_preprocessed.info()","0bc81f55":"Brand_preprocessed.columns.values","e28b6e64":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","64ea221e":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","7d3b1ce7":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","dbc69854":"brand_arranged.describe(include='all')","fc870653":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","237e4a5a":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","87ce85ba":"## Generally, mileage is higher for older cars","8ab98659":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","274de3b7":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","50a17f12":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","ea8ce78f":"brand_final=brand_arranged.drop(['year'], axis=1)","3836a82c":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","e4a33eaf":"### Model","77fecfe2":"## Dropping Unwanted Fields","72cd72b5":"# Packages","dae1eb58":"### Fuel Type and mpg","9e56025f":"### mpg and transmission","c9cc7d41":"# Exploring Dataset","39078926":"### Year-Model Vs Mean Mileage","df3bf4f9":"### Fuel Type and Mileage","36c86d6f":"### Data Fields Distribution Graphs","efe6bd05":"### Price","e7cf8d4e":"## Copying Datasets","8a845c47":"### mpg and engine size","fd1f9c4c":"### Correlogram for additional visulatization of the relation between each two features ","46c561a6":"### Fuel Type","53d6d747":"### mileage vs mean price [grouped by year]","e1ab473d":"### Mileage feature","39f40a65":"### Price and model","2add5d91":"### Preocessing Checkpoint","351fed0d":"### Engine Size feature","dc4c6e93":"### mpg, fuel type and transmission","c886f76b":"### Year Feature","cf496f91":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","9120d2e9":"### Year-Model vs Mean Price","f1a305cc":"### Price","f27ad825":"### Count of Features","7b200326":"### Year-Model vs Min Price","dd342884":"## Re-arranging Columns","ee69dcf4":"### Mean Price vs Other Features","0f4b511c":"## Preprocessing","c68490f3":"### Year-Model vs Max Price","e08d6ded":"## Brand","f063c2ed":"# Loading Data","b35703e7":"### price and year ","40aad2f5":"## Data Exploration","f769ddf2":"### Tax feature","1726336b":"#### Observations","5f604be5":"## Additional Graphs after Processing Data","6cfebcad":"## Finding Correlations"}}