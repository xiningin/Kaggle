{"cell_type":{"935bfa45":"code","1da84fc5":"code","35a820b5":"markdown","c53f4c02":"markdown","ce58c8d0":"markdown"},"source":{"935bfa45":"import matplotlib.pyplot\nimport numpy\n\nclass neuralNetwork:\n    def __init__(self, inputnodes, hiddennotes, outputnodes, learningrate):\n        self.inodes = inputnodes\n        self.hnotes = hiddennotes\n        self.onodes = outputnodes\n\n        self.wih = np.normal(0.0, pow(self.inodes, -0.5), (self.hnodes, self.inodes))\n        self.who = np.normal(0.0,pow(self.hnodes,-0.5),(self.onodes,self.hnodes))\n\n        self.lr = learningrate\n\n        self.activation_function = lambda x: scipy.special.expit(x)\n\n        pass\n\n    def train(self,input_list , target_list):\n        inputs = numpy.array(input_list , ndmin=2).T\n        target = numpy.array(target_list,ndmin=2).T \n\n        hidden_inputs = numpy.dot(self.wih , inputs)\n        hidden_outputs = self.activation_function(hidden_inputs)\n\n        final_inputs = numpy.dot(self.who , hidden_outputs)\n        final_output = self.activation_function(final_inputs)\n\n        output_errors = targets - final_outputs\n        # hidden layer error is the output_errors, split by weights,\n        #recombined at hidden nodes\n        hidden_errors = numpy.dot(self.who.T, output_errors)\n        # update the weights for the links between the hidden and output layers\n        self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs))\n        # update the weights for the links between the input and hidden layers\n        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))\n\n        pass\n\n    def query(self, input_list):\n        inputs =np.array(input_list ,ndmin = 2 ).T \n        hidden_inputs = numpy.dot(self.wih, inputs)\n        # calculate the signals emerging from hidden layer \n        hidden_outputs = self.activation_function(hidden_inputs)\n        # calculate signals into final output layer\n        final_inputs = numpy.dot(self.who, hidden_outputs)\n        # calculate the signals emerging from final output layer\n        final_outputs = self.activation_function(final_inputs)\n        return final_output\n","1da84fc5":"input_nodes = 784 hidden_nodes = 200 output_nodes = 10\n# learning rate\nlearning_rate = 0.1\n# create instance of neural network\nn = neuralNetwork(input_nodes,hidden_nodes,output_nodes, learning_rate)\n# load the mnist training data CSV file into a list\ntraining_data_file = open(\"..\/input\/mnist-in-csv\/mnist_train.csv\", 'r') training_data_list = training_data_file.readlines() training_data_file.close()\n# train the neural network\n# epochs is the number of times the training data set is used for training\nepochs = 5\nfor e in range(epochs):\n    # go through all records in the training data set for record in training_data_list:\n    # split the record by the ',' commas\n    all_values = record.split(',')\n    # scale and shift the inputs\n    inputs = (np.asfarray(all_values[1:]) \/ 255.0 * 0.99) +\n    0.01\n    # create the target output values (all 0.01, except the desired label which is 0.99)\n    targets = numpy.zeros(output_nodes) + 0.01\n    # all_values[0] is the target label for this record targets[int(all_values[0])] = 0.99\n    n.train(inputs, targets)\n    pass\n    pass\n    # load the mnist test data CSV file into a list\n    test_data_file = open(\"..\/input\/mnist-in-csv\/mnist_test.csv\", 'r')\n    test_data_list = test_data_file.readlines() test_data_file.close()\n    # test the neural network\n    # scorecard for how well the network performs, initially empty scorecard = []\n    # go through all the records in the test data set for record in test_data_list:\n    # split the record by the ',' commas all_values = record.split(',')\n    # correct answer is first value correct_label = int(all_values[0]) # scale and shift the inputs\n    inputs = (np.asfarray(all_values[1:]) \/ 255.0 * 0.99) + 0.01 # query the network\n    outputs = n.query(inputs)\n    # the index of the highest value corresponds to the label label = numpy.argmax(outputs)\n    # append correct or incorrect to list if (label == correct_label):\n    # network's answer matches correct answer, add 1 to scorecard\n    scorecard.append(1) else:\n    # network's answer doesn't match correct answer, add 0 to scorecard\n    scorecard.append(0) pass\n    pass\n# calculate the performance score, the fraction of correct answers\nscorecard_array = numpy.asarray(scorecard) print (\"performance = \", scorecard_array.sum() \/ scorecard_array.size)\nprint (\"performance = \", scorecard_array.sum() \/ scorecard_array.size)","35a820b5":"Refrences:\n> **1.[Sentdex](http:youtu.be\/Wo5dMEP_BbI)**\n\n> **2.[3Blue1Brown](http:\/\/youtu.be\/aircAruvnKk)**\n\n\n","c53f4c02":"![Artificial-neural-network-of-multiple-layers-and-outputs-31.ppm.png](attachment:Artificial-neural-network-of-multiple-layers-and-outputs-31.ppm.png)","ce58c8d0":"# Defining Class\n"}}