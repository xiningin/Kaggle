{"cell_type":{"27e82057":"code","329c1c13":"code","46a2eb1f":"code","891f853f":"code","e4157b0b":"code","1ef3bf8f":"code","b61a74d2":"code","9f01aa41":"code","a00b51fd":"code","fe2d8787":"code","d0179226":"code","7815df1b":"code","ae8b4aaa":"code","e232fd0a":"code","c2de8248":"code","347ae5dc":"code","e93baed5":"code","382d5e6b":"code","a5a96194":"code","0d21baee":"code","2a5e05ca":"code","81010434":"markdown","91252b02":"markdown","3c872bb2":"markdown","84233a8d":"markdown","85c5a6bf":"markdown","9fb8c4b1":"markdown","5c6d2a16":"markdown","bf7be3c0":"markdown","30e4f554":"markdown","acc3b293":"markdown","724cf900":"markdown","752dd887":"markdown","55218923":"markdown","856f35db":"markdown","31a9c8bc":"markdown","e390a36f":"markdown","368a2a0a":"markdown"},"source":{"27e82057":"import numpy as np \nimport pandas as pd\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","329c1c13":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()","46a2eb1f":"df.info()","891f853f":"# nan\ndf['director'].fillna('no_information', inplace=True)\ndf['cast'].fillna('no_information', inplace=True)\ndf['country'].fillna('no_information', inplace=True)\ndf.dropna(subset=['date_added', 'rating'], inplace=True)\n\n# genre\ndf['genre'] = df['listed_in'].apply(lambda x: x.split(',')[0])\n\n# date added\ndf['date_added'] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].apply(lambda x: x.year)\ndf['month_added'] = df['date_added'].apply(lambda x: x.month)\ndf['weekday_added'] = df['date_added'].apply(lambda x: x.dayofweek)\nc = {1 : 'January', 2 : 'February', 3 : 'March', 4 : 'April', 5 : 'May', 6 : 'June', \n     7 : 'July', 8 : 'August', 9: 'September', 10 : 'October', 11 : 'November', 12 : 'December'}\ndf['month_added']=df['month_added'].map(c)\nd = {0 : 'Monday', 1 : 'Tuesday', 2 : 'Wednesday', 3 : 'Thursday', 4 : 'Friday', 5 : 'Saturday', 6 : 'Sunday'}\ndf['weekday_added']=df['weekday_added'].map(d)\n\n\n# Movie vs TV Show\ndf_movies = df[df['type']=='Movie']\ndf_tv_shows = df[df['type']=='TV Show']","e4157b0b":"fig = go.Figure(go.Pie(\n    values=df['type'].value_counts(),\n    labels=['Movies', 'TV shows'],\n    pull=[0, 0.1],\n    marker=dict(colors=['blue', 'red'])) )\nfig.update_layout(\n    title=dict(\n        text='TV Show VS Movie',\n        x=0.5,\n        font=dict(\n            color='black',\n            size=24)),\n        legend=dict(\n            orientation='h',\n            yanchor='top',\n            y=1.1,\n            xanchor='left',\n            x=0.6,\n            font=dict(\n                size=16,\n                color='black'\n            )\n))\nfig.show()","1ef3bf8f":"genre_df_movies = df_movies['genre'].value_counts().to_frame()\ngenre_df_movies.reset_index(inplace=True)\ngenre_df_movies.rename(columns={'index':'Genre', 'genre':'Count'}, inplace=True)\ngenre_df_movies.sort_values(by='Count', inplace=True)\n\ngenre_df_tv_shows = df_tv_shows['genre'].value_counts().to_frame()\ngenre_df_tv_shows.reset_index(inplace=True)\ngenre_df_tv_shows.rename(columns={'index':'Genre', 'genre':'Count'}, inplace=True)\ngenre_df_tv_shows.sort_values(by='Count', inplace=True)","b61a74d2":"fig = make_subplots(rows=2,\n                    cols=1,\n                   subplot_titles=('Number movies by genre', 'Number TV shows by genre'))\n\nfig.add_trace(\n    go.Bar(x=genre_df_movies['Genre'],\n           y=genre_df_movies['Count'],\n           marker=dict(\n               color=genre_df_movies['Count'],\n           colorscale='bluered')\n    ),\n    row=1,\n    col=1)\n\nfig.add_trace(\n    go.Bar(x=genre_df_tv_shows['Genre'],\n           y=genre_df_tv_shows['Count'],\n           marker=dict(\n               color=genre_df_tv_shows['Count'],\n           colorscale='bluered')\n    ),\n    row=2,\n    col=1)\n\nfig.update_yaxes(mirror=True)\n\nfig.update_layout(\n    title=dict(\n        text='Genres by movies and tv shows',\n        x=0.5,\n        font=dict(\n            size=20, \n            color='black')),\n    height=800,\n    showlegend=False)\nfig.show()","9f01aa41":"rating_df_movies = df_movies['rating'].value_counts().to_frame()\nrating_df_movies.reset_index(inplace=True)\nrating_df_movies.rename(columns={'index':'Rating', 'rating':'Count'}, inplace=True)\nrating_df_movies.sort_values(by='Count', inplace=True)\n\nrating_df_tv_shows = df_tv_shows['rating'].value_counts().to_frame()\nrating_df_tv_shows.reset_index(inplace=True)\nrating_df_tv_shows.rename(columns={'index':'Rating', 'rating':'Count'}, inplace=True)\nrating_df_tv_shows.sort_values(by='Count', inplace=True)","a00b51fd":"fig = make_subplots(rows=1,\n                    cols=2,\n                   subplot_titles=('Number movies by genre', 'Number TV shows by genre'))\n\nfig.add_trace(\n    go.Bar(y=rating_df_movies['Rating'],\n           x=rating_df_movies['Count'],\n           orientation='h',\n           marker=dict(\n               color='blue')\n    ),\n    row=1,\n    col=1)\n\nfig.add_trace(\n    go.Bar(y=rating_df_tv_shows['Rating'],\n           x=rating_df_tv_shows['Count'],\n           orientation='h',\n           marker=dict(\n               color='red')\n    ),\n    row=1,\n    col=2)\n\nfig.update_layout(\n    title=dict(\n        text='Rating by movies and tv shows',\n        x=0.5,\n        font=dict(\n            size=20, \n            color='black')),\n    height=650,\nshowlegend=False)\nfig.show()","fe2d8787":"# year movie\nyear_df_movies = df_movies['year_added'].value_counts().to_frame()\nyear_df_movies.reset_index(inplace=True)\nyear_df_movies.rename(columns={'index':'Year', 'year_added':'Count'}, inplace=True)\nyear_df_movies.sort_values(by='Year', inplace=True)\n\n# year tv show\nyear_df_tv_shows = df_tv_shows['year_added'].value_counts().to_frame()\nyear_df_tv_shows.reset_index(inplace=True)\nyear_df_tv_shows.rename(columns={'index':'Year', 'year_added':'Count'}, inplace=True)\nyear_df_tv_shows.sort_values(by='Year', inplace=True)\n\n# month movies\nmonth_df_movies = df_movies['month_added'].value_counts().to_frame()\nmonth_df_movies.reset_index(inplace=True)\nmonth_df_movies.rename(columns={'index':'Month', 'month_added':'Count'}, inplace=True)\n\n# month tv shows\nmonth_df_tv_shows = df_tv_shows['month_added'].value_counts().to_frame()\nmonth_df_tv_shows.reset_index(inplace=True)\nmonth_df_tv_shows.rename(columns={'index':'Month', 'month_added':'Count'}, inplace=True)\n\n# weekday movies\nweekday_df_movies = df_movies['weekday_added'].value_counts().to_frame()\nweekday_df_movies.reset_index(inplace=True)\nweekday_df_movies.rename(columns={'index':'Weekday', 'weekday_added':'Count'}, inplace=True)\n\n# weekday tv shows\nweekday_df_tv_shows = df_tv_shows['weekday_added'].value_counts().to_frame()\nweekday_df_tv_shows.reset_index(inplace=True)\nweekday_df_tv_shows.rename(columns={'index':'Weekday', 'weekday_added':'Count'}, inplace=True)","d0179226":"fig = go.Figure()\n\nfig.add_trace( \n    go.Scatter( \n        mode='lines+markers',\n        x=year_df_movies['Year'], \n        y=year_df_movies['Count'], \n        marker=dict(\n            color='blue',\n            size=10),\n        line=dict(\n            width=3,\n            color='blue'),\n        name='Movies'))\n\nfig.add_trace( \n    go.Scatter( \n        mode='lines+markers',\n        x=year_df_tv_shows['Year'], \n        y=year_df_tv_shows['Count'], \n        marker=dict(\n            color='red',\n            size=10),\n        line=dict(\n            width=3,\n            color='red'),\n        name='TV Shows'))\n\nfig.update_xaxes(\n    ticks='outside', \n    tickwidth=3, \n    tickcolor='black', \n    title='Year added', \n    title_font=dict(\n        size=18), \n    color='black')\nfig.update_yaxes(\n    ticks='outside', \n    tickwidth=3, \n    tickcolor='black', \n    title='Number of movies and tv shows', \n    title_font=dict(\n        size=18), \n    color='black')\n\nfig.update_layout(\ntitle = dict(\n        text='Number movies and tv show by year added',\n        font=dict(\n            size=24,\n            color='black'),\n        x=0.5),\nlegend=dict(\n    orientation='v',\n    y=1,\n    x=1,\n    font=dict(\n    size=14,\n    color='black')))\nfig.show()","7815df1b":"df[df['year_added']==2008]","ae8b4aaa":"fig = make_subplots(rows=1,\n                    cols=2, \n                    specs=[[{'type': 'xy'}, {'type': 'xy'}]],\n                   subplot_titles=('Movies', 'TV Shows'))\n\nfig.add_trace(\ngo.Funnel(y=month_df_movies['Month'],\n         x=month_df_movies['Count'], \n         marker=dict( \n             color='blue'),\n         showlegend=False\n         ),\nrow=1,\ncol=1)\n\nfig.add_trace(\ngo.Funnel(y=month_df_tv_shows['Month'],\n         x=month_df_tv_shows['Count'], \n         marker=dict( \n             color='red'),\n         showlegend=False\n         ),\nrow=1,\ncol=2)\n\nfig.update_layout(\n    title=dict(\n        text='Number of movies and TV Shows by month added',\n        x=0.5,\n        font=dict(\n            size=20, \n            color='black'))\n)\nfig.show()","e232fd0a":"fig = make_subplots(rows=1,\n                    cols=2, \n                    specs=[[{'type': 'pie'}, {'type': 'pie'}]])\n\n\nfig.add_trace(\n    go.Pie(\n    values=weekday_df_movies['Count'],\n    labels=weekday_df_movies['Weekday'],\n    pull=[0, 0, 0, 0, 0, 0],\n    marker=dict(colors=['red', 'crimson', 'darkorchid', 'indigo', 'midnightblue', 'mediumblue', 'darkblue'])),\n    row=1, \n    col=1)\n\nfig.add_trace(\n    go.Pie(\n    values=weekday_df_tv_shows['Count'],\n    labels=weekday_df_tv_shows['Weekday'],\n    pull=[0, 0, 0, 0, 0, 0],\n    marker=dict(colors=['red', 'crimson', 'indigo', 'darkorchid', 'darkblue', 'midnightblue', 'mediumblue'])),\n    row=1, \n    col=2)\n\nfig.update_traces(\n    textposition='inside', \n    hole=0.6)\nfig.update_layout(\n    title=dict(\n        text='Movies and TV shows by weekday added',\n        x=0.5,\n        font=dict(\n            size=20, \n            color='black')),\n    annotations=[dict(\n            text='Movies', \n            x=0.18, \n            y=0.5, \n            font=dict(\n                size=12, \n                color='black'), \n            showarrow=False),\n        dict(\n            text='TV Shows', \n            x=0.83, \n            y=0.5, \n            font=dict(\n                size=12, \n                color='black'), \n            showarrow=False)])\nfig.show()","c2de8248":"release_year = df['release_year'].value_counts().to_frame()\nrelease_year.reset_index(inplace=True)\nrelease_year.rename(columns={'index':'Release_year', 'release_year':'Count'}, inplace=True)\nrelease_year.sort_values(by='Release_year', inplace=True)\n\nrelease_year_movies = df_movies['release_year'].value_counts().to_frame()\nrelease_year_movies.reset_index(inplace=True)\nrelease_year_movies.rename(columns={'index':'Release_year', 'release_year':'Count'}, inplace=True)\nrelease_year_movies.sort_values(by='Release_year', inplace=True)\n\nrelease_year_tv_shows = df_tv_shows['release_year'].value_counts().to_frame()\nrelease_year_tv_shows.reset_index(inplace=True)\nrelease_year_tv_shows.rename(columns={'index':'Release_year', 'release_year':'Count'}, inplace=True)\nrelease_year_tv_shows.sort_values(by='Release_year', inplace=True)","347ae5dc":"fig = go.Figure()\nfig.add_trace( \n    go.Scatter( # \u0432\u0438\u0434 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n        mode='lines',\n        x=release_year_movies['Release_year'],  # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0441\u0438 X\n        y=release_year_movies['Count'], # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0441\u0438 Y\n        marker=dict(\n            color='blue'),\n        name='Movies'))\n\nfig.add_trace( \n    go.Scatter( # \u0432\u0438\u0434 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n        mode='lines',\n        x=release_year_tv_shows['Release_year'],  # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0441\u0438 X\n        y=release_year_tv_shows['Count'], # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0441\u0438 Y\n        marker=dict(\n            color='red'),\n        name='TV Shows'))\n\nfig.update_xaxes(\n    ticks='outside', \n    tickwidth=3, \n    tickcolor='black', \n    title='Release year', \n    title_font=dict(\n        size=18), \n    color='black')\nfig.update_yaxes(\n    ticks='outside', \n    tickwidth=3, \n    tickcolor='black', \n    title='Number of movies and tv shows', \n    title_font=dict(\n        size=18), \n    color='black')\n\nfig.update_layout(\ntitle = dict(\n        text='Number movies and tv show by release year',\n        font=dict(\n            size=24,\n            color='black'),\n        x=0.5),\nlegend=dict(\n    orientation='v',\n    y=1,\n    x=1,\n    font=dict(\n    size=14,\n    color='black')))\nfig.show()","e93baed5":"df_tv_shows[df_tv_shows['release_year']==1925]","382d5e6b":"df_movies[df_movies['release_year']==1942]","a5a96194":"df['first_country'] = df['country'].apply(lambda x: x.split(',')[0])\ncountry_df = df['first_country'].value_counts().to_frame()\ncountry_df.reset_index(inplace=True)\ncountry_df.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\ncountry_df = country_df[country_df['Country']!='no_information']\ncountry_df.head()","0d21baee":"# top countries\nUSA = df[df['first_country']=='United States']\nIndia = df[df['first_country']=='India']\nUK = df[df['first_country']=='United Kingdom']\nCanada = df[df['first_country']=='Canada']\nJapan = df[df['first_country']=='Japan']\ntop_countries = pd.concat([USA, India, UK, Canada, Japan])\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  Movies \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ntop_countries_movies = top_countries[top_countries['type']=='Movie']\n\n# 2016 - 2020\ntop_countries_movies_2016_2020 = top_countries_movies[top_countries_movies['release_year']>=2016][top_countries_movies[top_countries_movies['release_year']>=2016]['release_year']<=2020]\ntop_countries_movies_2016_2020_count = top_countries_movies_2016_2020['first_country'].value_counts().to_frame()\ntop_countries_movies_2016_2020_count.reset_index(inplace=True)\ntop_countries_movies_2016_2020_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2011 - 2015\ntop_countries_movies_2011_2015 = top_countries_movies[top_countries_movies['release_year']>=2011][top_countries_movies[top_countries_movies['release_year']>=2011]['release_year']<=2015]\ntop_countries_movies_2011_2015_count = top_countries_movies_2011_2015['first_country'].value_counts().to_frame()\ntop_countries_movies_2011_2015_count.reset_index(inplace=True)\ntop_countries_movies_2011_2015_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2006 - 2010\ntop_countries_movies_2006_2010 = top_countries_movies[top_countries_movies['release_year']>=2006][top_countries_movies[top_countries_movies['release_year']>=2006]['release_year']<=2010]\ntop_countries_movies_2006_2010_count = top_countries_movies_2006_2010['first_country'].value_counts().to_frame()\ntop_countries_movies_2006_2010_count.reset_index(inplace=True)\ntop_countries_movies_2006_2010_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2001 - 2005\ntop_countries_movies_2001_2005 = top_countries_movies[top_countries_movies['release_year']>=2001][top_countries_movies[top_countries_movies['release_year']>=2001]['release_year']<=2005]\ntop_countries_movies_2001_2005_count = top_countries_movies_2001_2005['first_country'].value_counts().to_frame()\ntop_countries_movies_2001_2005_count.reset_index(inplace=True)\ntop_countries_movies_2001_2005_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  TV shows \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ntop_countries_tv_shows = top_countries[top_countries['type']=='TV Show']\n\n# 2016 - 2020\ntop_countries_tv_shows_2016_2020 = top_countries_tv_shows[top_countries_tv_shows['release_year']>=2016][top_countries_tv_shows[top_countries_tv_shows['release_year']>=2016]['release_year']<=2020]\ntop_countries_tv_shows_2016_2020_count = top_countries_tv_shows_2016_2020['first_country'].value_counts().to_frame()\ntop_countries_tv_shows_2016_2020_count.reset_index(inplace=True)\ntop_countries_tv_shows_2016_2020_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2011 - 2015\ntop_countries_tv_shows_2011_2015 = top_countries_tv_shows[top_countries_tv_shows['release_year']>=2011][top_countries_tv_shows[top_countries_tv_shows['release_year']>=2011]['release_year']<=2015]\ntop_countries_tv_shows_2011_2015_count = top_countries_tv_shows_2011_2015['first_country'].value_counts().to_frame()\ntop_countries_tv_shows_2011_2015_count.reset_index(inplace=True)\ntop_countries_tv_shows_2011_2015_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2006 - 2010\ntop_countries_tv_shows_2006_2010 = top_countries_tv_shows[top_countries_tv_shows['release_year']>=2006][top_countries_tv_shows[top_countries_tv_shows['release_year']>=2006]['release_year']<=2010]\ntop_countries_tv_shows_2006_2010_count = top_countries_tv_shows_2006_2010['first_country'].value_counts().to_frame()\ntop_countries_tv_shows_2006_2010_count.reset_index(inplace=True)\ntop_countries_tv_shows_2006_2010_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)\n\n# 2001 - 2005\ntop_countries_tv_shows_2001_2005 = top_countries_tv_shows[top_countries_tv_shows['release_year']>=2001][top_countries_tv_shows[top_countries_tv_shows['release_year']>=2001]['release_year']<=2005]\ntop_countries_tv_shows_2001_2005_count = top_countries_tv_shows_2001_2005['first_country'].value_counts().to_frame()\ntop_countries_tv_shows_2001_2005_count.reset_index(inplace=True)\ntop_countries_tv_shows_2001_2005_count.rename(columns={'index':'Country', 'first_country':'Count'}, inplace=True)","2a5e05ca":"fig = go.Figure()\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  Movies \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# 2016 - 2020 movies\nfig.add_trace(\n    go.Bar(x=top_countries_movies_2016_2020_count['Country'],\n           y=top_countries_movies_2016_2020_count['Count'],\n           marker=dict(color=top_countries_movies_2016_2020_count['Count'], colorscale='Bluered'),\n           visible=True\n    ))\n\n# 2011 - 2015 movies\nfig.add_trace(\n    go.Bar(x=top_countries_movies_2011_2015_count['Country'],\n           y=top_countries_movies_2011_2015_count['Count'],\n           marker=dict(color=top_countries_movies_2011_2015_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n# 2006 - 2010 movies\nfig.add_trace(\n    go.Bar(x=top_countries_movies_2006_2010_count['Country'],\n           y=top_countries_movies_2006_2010_count['Count'],\n           marker=dict(color=top_countries_movies_2006_2010_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n# 2001 - 2005 movies\nfig.add_trace(\n    go.Bar(x=top_countries_movies_2001_2005_count['Country'],\n           y=top_countries_movies_2001_2005_count['Count'],\n           marker=dict(color=top_countries_movies_2001_2005_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  TV shows \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# 2016 - 2020 TV shows\nfig.add_trace(\n    go.Bar(x=top_countries_tv_shows_2016_2020_count['Country'],\n           y=top_countries_movies_2016_2020_count['Count'],\n           marker=dict(color=top_countries_movies_2016_2020_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n# 2011 - 2015 TV shows\nfig.add_trace(\n    go.Bar(x=top_countries_tv_shows_2011_2015_count['Country'],\n           y=top_countries_tv_shows_2011_2015_count['Count'],\n           marker=dict(color=top_countries_tv_shows_2011_2015_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n# 2006 - 2010 TV shows\nfig.add_trace(\n    go.Bar(x=top_countries_tv_shows_2006_2010_count['Country'],\n           y=top_countries_tv_shows_2006_2010_count['Count'],\n           marker=dict(color=top_countries_tv_shows_2006_2010_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n# 2001 - 2005 TV shows\nfig.add_trace(\n    go.Bar(x=top_countries_tv_shows_2001_2005_count['Country'],\n           y=top_countries_tv_shows_2001_2005_count['Count'],\n           marker=dict(color=top_countries_movies_2001_2005_count['Count'], colorscale='Bluered'),\n           visible=False\n    ))\n\n\nfig.update_layout(\n    title=dict(\n        text='2016 - 2020 (Movies)',\n        x=0.5,\n        font=dict(\n        size=24,\n        color='black')\n    ),\n    updatemenus=[\n        dict(\n            type='dropdown',\n            active=0,\n            x=0.1,\n            y=1.1,\n            buttons=list([\n                dict(label='2016 - 2020 (Movies)',\n                     method='update',\n                     args=[{'visible': [True, False, False, False, False, False, False, False]},\n                           {'title': '2016 - 2020 (Movies)'}]),\n                dict(label='2011 - 2015 (Movies)',\n                     method='update',\n                     args=[{'visible': [False, True, False, False, False, False, False, False]},\n                           {'title': '2011 - 2015 (Movies)'}]),\n                dict(label='2006 - 2010 (Movies)',\n                     method='update',\n                     args=[{'visible': [False, False, True, False, False, False, False, False]},\n                           {'title': '2006 - 2010 (Movies)'}]),\n                dict(label='2001 - 2005 (Movies)', # \u043d\u0430\u0434\u043f\u0438\u0441\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0435\n                     method='update',\n                     args=[{'visible': [False, False, False, True, False, False, False, False]},\n                           {'title': '2001 - 2005 (Movies)'}]),\n                dict(label='2016 - 2020 (TV shows)',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, True, False, False, False]},\n                           {'title': '2016 - 2020 (TV shows)'}]),\n                dict(label='2011 - 2015 (TV shows)',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, True, False, False]},\n                           {'title': '2011 - 2015 (TV shows)'}]),\n                dict(label='2006 - 2010 (TV shows)',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, True, False]},\n                           {'title': '2006 - 2010 (TV shows)'}]),\n                dict(label='2001 - 2005 (TV shows)', # \u043d\u0430\u0434\u043f\u0438\u0441\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0435\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, True]},\n                           {'title': '2001 - 2005 (TV shows)'}]),\n            ]),\n        )\n    ])\nfig.show()","81010434":"**You can view the results using the menu :)**","91252b02":"**The most popular day of the week is Friday. What is logical and predictable.**\n\n**Now let's explore the release year**","3c872bb2":"**Most popular movie genres:**\n* Dramas;\n* Comedies;\n* Documentaries;\n* Action & Adventure;\n* Children & Family Movies.\n\n**Most popular TV Show genres:**\n* International TV Shows;\n* Crime TV Shows;\n* Kid's TV;\n* British TV Shows;\n* Docuseries.","84233a8d":"**Now let's explore rating:**","85c5a6bf":"**Oldest movies are \"Prelude to War\" and \"The Battle of Midway\":**","9fb8c4b1":"**Oldest TV Show is \"Pioneers: First Women Filmmakers\":**","5c6d2a16":"**The share ratio of ratings is very similar in movies and TV shows.**\n**Now explore the number of \"Movie and TV Show\", \"Movie\" and \"TV Show\" by the date of addition:**\n* by year; \n* by month; \n* by weekday.","bf7be3c0":"**The main target of this work for me - study plotly (graph_objs.) Since I've rarely used plotly before, I'll start with the most common charts.**\n\n**Df contains movies and TV shows that are presented on the well-known service Netflix.**\n\n**Columns in df:**\n* id - unique identification number;\n* type - TV Show or movie;\n* director;\n* cast - actors;\n* country;\n* date added - date added on Netflix;\n* release year;\n* listed in - genres;\n* description.","30e4f554":"**The director, cast and country columns contain many nan values, so I will replace them with 'no_information'**\n\n**Rows with empty values in the 'date added' and 'rating' columns will be deleted**\n\n**I will also add the columns necessary for further analysis and make two new dataframes by sorting them by 'type'**","acc3b293":"* Most movies and TV Shows were released in 2018;\n* Most movies were released in 2017;\n* Most movies TV Shows released in 2020.","724cf900":"**Most of them are movies - almost 70%**\n\n**Now let's see the previously added 'genre' column - let's count the number of movies and TV shows by genre.**","752dd887":"**Now let's analyze it by countries with the following conditions:**\n* top 5 countries;\n* release period: 2001 - 2020;\n* five-year periods.","55218923":"**According to this schedule, we can draw a conclusion about how the service has developed. There is a significant increase after 2016:**\n\n* The largest number of movies were added in 2019\n\n* The largest number of TV Shows were added in 2020\n\n**The first film and TV show were added in 2008. Let's see what it was:**","856f35db":"**Lets see ratio between movies and TV shows**","31a9c8bc":"![image.png](attachment:b8b64532-54ea-4800-928d-d7527c3f212a.png) ![image.png](attachment:dfb4717b-6de1-49b6-8ed5-fb34cb7e48b0.png)","e390a36f":"**Now let's analyse weekday added:**","368a2a0a":"**I didn't watch them**\n\n**Now let's explore movies and TV shows by month added**"}}