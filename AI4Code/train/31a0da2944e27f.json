{"cell_type":{"6eaa3fd7":"code","d3cb375f":"code","f1be1d5f":"code","045fc3fc":"code","d7db63a9":"code","c653a714":"code","a5eaaa10":"code","19e5a8a1":"code","ecffd349":"code","85bee439":"code","6596ff05":"markdown","15eec15d":"markdown","43e0cd51":"markdown"},"source":{"6eaa3fd7":"import tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dense,Flatten\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical","d3cb375f":"(X_train,y_train),(X_test,y_test) = mnist.load_data()","f1be1d5f":"show = np.random.randint(0,60001)\nplt.imshow(X_train[show],cmap='gray')\nplt.title(f'Label :{y_train[show]}')\nplt.show()","045fc3fc":"print('Shape of Training Data Before :',X_train.shape)\nprint('Shape of Testing Data Before :',X_test.shape)\nX_train = np.expand_dims(X_train,axis=3)\nX_test = np.expand_dims(X_test,axis=3)\nprint('Shape of Training Data After ',X_train.shape)\nprint('Shape of Testing Data After:',X_test.shape)","d7db63a9":"print('Max pixel value before Scaling:',np.max(X_train))","c653a714":"X_train = X_train\/255.0\nX_test  = X_test\/255.0\nprint('Max pixel value after scaling:',np.max(X_train))\n","a5eaaa10":"y_train[0]","19e5a8a1":"model = tf.keras.models.Sequential([\n            Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),\n            MaxPool2D(2,2),\n            Conv2D(64,(3,3),activation='relu'),\n            MaxPool2D(2,2),\n            Flatten(),\n            Dense(256,activation='relu'),\n            Dense(128,activation='relu'),\n            Dense(64,activation='relu'),\n            Dense(10,activation='softmax'),\n\n])\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","ecffd349":"history = model.fit(X_train,y_train,epochs=10,batch_size=32,validation_data=(X_test,y_test))","85bee439":"train_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nepochs=range(len(train_acc))\nplt.plot(epochs,train_acc,'r', label='Training accuracy')\nplt.plot(epochs,val_acc,'b',label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, train_loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","6596ff05":"# Scaling","15eec15d":"# Results","43e0cd51":"# MNIST Dataset "}}