{"cell_type":{"8b549ff3":"code","3080adbc":"code","8f8aa0d0":"code","6792a847":"code","3cdf6745":"code","d0b7a3d5":"code","3b93c096":"code","a0c44696":"code","f80fc059":"code","821dcf3a":"code","5a4aacd1":"code","b0aa5973":"code","6bf3f95d":"code","28f0f3b3":"code","b5168dce":"code","a2cbf4ff":"code","0ef1131f":"code","61b43f92":"code","b5b63c0a":"code","898e9022":"code","21f1b37d":"code","98ae43c4":"code","5dba0a72":"code","97faaaf7":"code","6b96122e":"code","5bf670ab":"code","39194a0c":"code","2e668998":"code","d4bbd295":"code","be05e8c8":"code","49d04d84":"code","ba653040":"code","62043263":"code","021beeff":"code","20ef65b4":"code","a82857bf":"code","ebefc174":"code","05975f3a":"code","6c827835":"code","01ec33f6":"code","53fb5fa2":"code","f2b854a7":"code","0b423674":"code","b269cf0d":"code","592bd599":"code","30c4290d":"code","8ef48044":"code","e05d842b":"markdown","c26e0ff6":"markdown"},"source":{"8b549ff3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3080adbc":"train = pd.read_csv(\"C:\/Users\/Mohan Raj\/Desktop\/Mohan\/ML\/Titanic\/train.csv\")\ntest = pd.read_csv(\"C:\/Users\/Mohan Raj\/Desktop\/Mohan\/ML\/Titanic\/test.csv\")","8f8aa0d0":"train.head()","6792a847":"print(train.shape)\nprint(test.shape)","3cdf6745":"train.info()","d0b7a3d5":"train.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace = True)\ntrain.head()","3b93c096":"train['Age'].describe()","a0c44696":"def Missing_Values(data):\n    variable_name=[]\n    total_value=[]\n    total_missing_value=[]\n    missing_value_rate=[]\n    unique_value_list=[]\n    total_unique_value=[]\n    data_type=[]\n    for col in data.columns:\n        variable_name.append(col)\n        data_type.append(data[col].dtype)\n        total_value.append(data[col].shape[0])\n        total_missing_value.append(data[col].isnull().sum())\n        missing_value_rate.append(round(data[col].isnull().sum()\/data[col].shape[0],3))\n        unique_value_list.append(data[col].unique())\n        total_unique_value.append(len(data[col].unique()))\n        missing_data=pd.DataFrame({\"Variable\":variable_name,\"Total_Value\":total_value,\\\n                             \"Total_Missing_Value\":total_missing_value,\"Missing_Value_Rate\":missing_value_rate,\n                             \"Data_Type\":data_type,\"Unique_Value\":unique_value_list,\\\n                               \"Total_Unique_Value\":total_unique_value})\n    return missing_data.sort_values(\"Missing_Value_Rate\",ascending=False)","f80fc059":"Missing_Values(train)","821dcf3a":"train['start_Name_title'] = train['Name'].str.find(\",\")+2\ntrain['end_Name_title'] = train['Name'].str.find(\".\")\n    ","5a4aacd1":"train.head()","b0aa5973":"train.info()","6bf3f95d":"train['Name_title'] = train.apply(lambda x: x['Name'][x['start_Name_title']:x['end_Name_title']],axis=1)","28f0f3b3":"train.head()","b5168dce":"train['Name_title'].value_counts()","a2cbf4ff":"train[\"Age\"] = train.groupby(\"Name_title\")['Age'].transform(lambda x: x.fillna(x.mean()))\ntrain.head()","0ef1131f":"train.info()","61b43f92":"train.dropna(inplace = True)\ntrain.info()","b5b63c0a":"train.drop(['Name','start_Name_title','end_Name_title','Name_title'],axis=1,inplace=True)\ntrain.head()","898e9022":"from sklearn.preprocessing import LabelEncoder,LabelBinarizer\nle = LabelBinarizer()\ntrain['Sex'] = le.fit_transform(train['Sex'])\ntrain.head()","21f1b37d":"train.info()","98ae43c4":"train = pd.get_dummies(train)\ntrain.head()","5dba0a72":"train.corr()","97faaaf7":"from sklearn.model_selection import train_test_split\nX = train.drop(['Survived'],axis = 1)\nY = train['Survived']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state =42)","6b96122e":"print(X_train.shape)\nprint(X_test.shape)","5bf670ab":"def ML_Algorithms(model,alg_name, x_trainn,x_testt, y_trainn, y_testt):\n    from sklearn.metrics import roc_auc_score,roc_curve,classification_report,accuracy_score, confusion_matrix\n    modell = model()\n    result_model = modell.fit(x_trainn, y_trainn)\n    y_pred = result_model.predict(x_testt)    \n    conf_mtrx(y_testt, y_pred, model)\n    print(\"Accuracy Score for \", alg_name ,accuracy_score(y_testt, y_pred))\ndef conf_mtrx(y_test, y_pred, model): \n    from sklearn.metrics import roc_auc_score,roc_curve,classification_report,accuracy_score, confusion_matrix\n    cm = confusion_matrix(y_test,y_pred)    \n    f, ax = plt.subplots(figsize =(5,5))\n    cm = confusion_matrix(y_test,y_pred)\n    sns.heatmap(cm,annot = True, linewidths=0.5, linecolor=\"red\",fmt = \".0f\",ax=ax)#,cmap=plt.cm.RdPu\n    plt.xlabel(\"predicted y values\")\n    plt.ylabel(\"real y values\")\n    plt.title(\"\\nConfusion Matrix\")\n    plt.show()\n    ","39194a0c":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nML_Algorithms(RandomForestClassifier,RandomForestClassifier,X_train,X_test,Y_train,Y_test)","2e668998":"ML_Algorithms(DecisionTreeClassifier, \"DecisionTreeClassifier\", X_train, X_test, Y_train, Y_test)","d4bbd295":"ML_Algorithms(GradientBoostingClassifier, \"GradientBoostingClassifier\", X_train, X_test, Y_train, Y_test)\ngb = GradientBoostingClassifier()\ngb_model = gb.fit(X_train,Y_train)","be05e8c8":"from sklearn.metrics import accuracy_score\ngb = GradientBoostingClassifier()\ngb_model = gb.fit(X_train,Y_train)\ny_pred = gb_model.predict(X_test)\naccuracy_score(Y_test,y_pred)","49d04d84":"ML_Algorithms(XGBClassifier, \"XGBClassifier\", X_train, X_test, Y_train, Y_test)","ba653040":"ML_Algorithms(LGBMClassifier, \"LGBM Classifier\", X_train, X_test, Y_train, Y_test)","62043263":"ML_Algorithms(CatBoostClassifier, \"CatBoost Classifier\", X_train, X_test, Y_train, Y_test)","021beeff":"test.head()","20ef65b4":"test.info()","a82857bf":"test.corr()","ebefc174":"train = pd.read_csv(\"C:\/Users\/Mohan Raj\/Desktop\/Mohan\/ML\/Titanic\/train.csv\")\ntest = pd.read_csv(\"C:\/Users\/Mohan Raj\/Desktop\/Mohan\/ML\/Titanic\/test.csv\")\ntest.info()","05975f3a":"train.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace = True)\ntrain['start_Name_title'] = train['Name'].str.find(\",\")+2\ntrain['end_Name_title'] = train['Name'].str.find(\".\")\ntrain['Name_title'] = train.apply(lambda x: x['Name'][x['start_Name_title']:x['end_Name_title']],axis=1)\ntrain[\"Age\"] = train.groupby(\"Name_title\")['Age'].transform(lambda x: x.fillna(x.mean()))\n","6c827835":"test.drop(['Ticket','Cabin'],axis=1,inplace = True)\ntest['start_Name_title'] = test['Name'].str.find(\",\")+2\ntest['end_Name_title'] = test['Name'].str.find(\".\")\ntest['Name_title'] = test.apply(lambda x: x['Name'][x['start_Name_title']:x['end_Name_title']],axis=1)\ntest[\"Age\"] = test['Age'].fillna(train.groupby('Name_title')['Age'].transform('mean'))\ntest[\"Fare\"] = test['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('mean'))\ntest.info()","01ec33f6":"test.drop(['Name','start_Name_title','end_Name_title','Name_title'],axis=1,inplace=True)\nfrom sklearn.preprocessing import LabelEncoder,LabelBinarizer\nle = LabelBinarizer()\ntest['Sex'] = le.fit_transform(test['Sex'])\ntest = pd.get_dummies(test)","53fb5fa2":"test.head()","f2b854a7":"test.shape","0b423674":"test.info()","b269cf0d":"test.to_clipboard()","592bd599":"test.drop(['PassengerId'],axis=1,inplace=True)\nFinal_pred = gb_model.predict(test)","30c4290d":"pd.DataFrame(Final_pred).to_clipboard()","8ef48044":"Final_pred","e05d842b":"# Model","c26e0ff6":"# Data input and preprocessing "}}