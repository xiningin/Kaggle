{"cell_type":{"333c4e5a":"code","06383d44":"code","6f47ad42":"code","298d026d":"code","a787f371":"code","a15b6f79":"code","2c465595":"code","6531be37":"code","1a2f6a66":"code","32bbdcb0":"code","c6bf577f":"code","7f9ab757":"markdown"},"source":{"333c4e5a":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\nimport random\nimport os\nimport matplotlib.pyplot as plt","06383d44":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\n\nrow = test_features.shape[0] > 3982","6f47ad42":"def seed_everything(seed = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)\nseed_everything()","298d026d":"def preprocess(df):\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']","a787f371":"def create_chris_model(activation='selu'):\n    model = tf.keras.Sequential()\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(32,kernel_size=3,activation=activation,input_shape=(28,28,1))))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(32,kernel_size=3,activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(32,kernel_size=5,strides=2,padding='same',activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dropout(0.4))\n\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(64,kernel_size=3,activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(64,kernel_size=3,activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(64,kernel_size=5,strides=2,padding='same',activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dropout(0.4))\n\n    model.add(tf.keras.layers.Flatten())\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Dense(2048, activation=activation)))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dropout(0.4))\n    model.add(tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation='sigmoid')))\n\n    model.compile(optimizer=tfa.optimizers.Lookahead(tf.optimizers.Adam(lr=1e-3), sync_period=20), loss='binary_crossentropy')\n    return model\n\ndef create_model(): # 0.163 https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n    model = tf.keras.Sequential([\n    tf.keras.layers.Input((28, 28, 1)),\n    tf.keras.layers.BatchNormalization(),        \n        \n    tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu')),\n    tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu')),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.25),\n\n    tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu')),\n    tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu')),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2, 2)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.4),\n    \n    tf.keras.layers.Flatten(),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(2048, activation=\"relu\")),\n    tf.keras.layers.BatchNormalization(),\n    tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation=\"sigmoid\"))\n    ])\n    model.compile(optimizer=tfa.optimizers.Lookahead(tf.optimizers.Adam(lr=1e-3), sync_period=20), loss='binary_crossentropy')\n    return model","a15b6f79":"top_feats = [ 1,   2,   3,   4,   5,   6,   9,  11,  14,  15,  16,  17,\n        18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  29,  30,  31,\n        32,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  46,\n        47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  58,  59,  60,\n        61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,\n        74,  75,  76,  78,  79,  80,  81,  82,  83,  84,  86,  87,  88,\n        89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101,\n       102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n       115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n       129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143,\n       144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n       171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n       184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197,\n       198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212,\n       213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226,\n       227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n       240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n       254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n       267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n       281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294,\n       295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n       310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,\n       324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n       337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n       350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377,\n       378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391,\n       392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,\n       405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418,\n       419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,\n       432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446,\n       447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462,\n       463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,\n       476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n       490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505,\n       506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521,\n       522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536,\n       538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551,\n       552, 554, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570,\n       571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585,\n       586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599,\n       600, 601, 602, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617,\n       618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,\n       631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644,\n       645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659,\n       660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n       673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,\n       686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700,\n       701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717,\n       718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,\n       733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747,\n       748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761,\n       762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774,\n       775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,\n       789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803,\n       804, 805, 806, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819,\n       821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835,\n       837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852,\n       854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869,\n       870, 871, 872, 873, 874]","2c465595":"plt.imshow(np.reshape(train.values[:, top_feats][2], (28, 28)))","6531be37":"N_STARTS=5 if row else 1\nres = train_targets.copy()\nss.loc[:, train_targets.columns] = 0\nres.loc[:, train_targets.columns] = 0\nn=0\n\nfor seed in range(N_STARTS):\n    for tr, te in KFold(n_splits=5, random_state=seed, shuffle=True).split(train_targets):\n        n+=1\n        print(f'[Fold {n}]')\n\n        rs = np.reshape(train.values[:, top_feats], (train.shape[0], 28, 28, 1))\n\n        #model = create_chris_model(activation='relu') # 25 epoch: 0.016214214448202393, 30 epoch:\n        model = create_chris_model() # 30 epoch: 0.01599427540136652\n\n        reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=0, epsilon=1e-4, mode='min')\n\n        model.fit(rs[tr],\n                  train_targets.astype(float).values[tr],\n                  validation_data=(rs[te], train_targets.astype(float).values[te]),\n                  epochs=27, batch_size=128,\n                  callbacks=[reduce_lr_loss], verbose=0\n                 )\n\n        rst = np.reshape(test_features.values[:, top_feats], (test_features.shape[0], 28, 28, 1))\n        \n        ss.loc[:, train_targets.columns] += model.predict(rst)\n        res.loc[te, train_targets.columns] += model.predict(rs[te])\n        print(\"train logloss:\", model.evaluate(rs[tr], train_targets.astype(float).values[tr], verbose=0, batch_size=128))\n        print(\"val logloss:\", model.evaluate(rs[te], train_targets.astype(float).values[te], verbose=0, batch_size=128))\n\nss.loc[:, train_targets.columns] \/= n\nres.loc[:, train_targets.columns] \/= N_STARTS","1a2f6a66":"metrics = []\nfor _target in train_targets.columns:\n    metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\nprint(f'OOF Metric: {np.mean(metrics)}')","32bbdcb0":"metrics = []\nres.loc[train['cp_type']==1, train_targets.columns] = 0\nfor _target in train_targets.columns:\n    metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\nprint(f'OOF Metric with postprocessing: {np.mean(metrics)}')","c6bf577f":"ss.loc[test['cp_type']==1, train_targets.columns] = 0\nss.to_csv('submission.csv', index=False)","7f9ab757":"# Some quick testing with convolutional neural networks\n\nModel from https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6 (Yes, an MNIST notebook!). Also experimented witn https:\/\/www.kaggle.com\/cdeotte\/how-to-choose-cnn-architecture-mnist\n\nI was a bit bored, so I decided to try some convolutional layers; it's actually not too bad. Row order and hyperparameters have not been tuned, but matter hugely, so this could potentially be a lot better than this notebook suggests. "}}