{"cell_type":{"6703f48f":"code","cebe6055":"code","1ecb9368":"code","8d20b00c":"code","50f9bfab":"code","a068f893":"code","11186db4":"code","50f9dbea":"code","07816ebd":"code","06694237":"code","d5e49f97":"code","0dfc7c75":"code","2660d5ad":"code","1b830bd0":"code","703bcf63":"code","6d776d01":"code","cac8273f":"code","f2dee672":"code","8b3d86a8":"code","00866f66":"code","c2bdd1f5":"code","c7b450e9":"code","2664d9ff":"code","4322264e":"code","18e352d0":"code","11854f70":"markdown","ea6feb61":"markdown","313b61e6":"markdown","b7abdd49":"markdown","938e32de":"markdown","9e3ed937":"markdown","3c836b3c":"markdown","e563ef61":"markdown","d9b4fd6e":"markdown","0bd0823d":"markdown","ae84aee3":"markdown","23675999":"markdown","59a59ca9":"markdown","3a68e925":"markdown","f33d2544":"markdown","191b562e":"markdown","4b11bf17":"markdown"},"source":{"6703f48f":"from fastai.vision import *\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\ndata = pd.read_csv('\/kaggle\/input\/movie-genre-from-its-poster\/MovieGenre.csv',engine='python')\ndata.head()","cebe6055":"len(data['IMDB Score'].unique())","1ecb9368":"import matplotlib.pyplot as plt\nfig = plt.gcf()\nfig.set_size_inches(15,10)\ndata['IMDB Score'].value_counts().plot.bar(fig)","8d20b00c":"data.dropna(inplace=True)","50f9bfab":"sns.distplot(data['IMDB Score'])","a068f893":"path_img = Path('\/kaggle\/input\/movie-posters\/poster_downloads\/')\ndef get_float_labels(file_name):\n    return float(re.search('\\d.\\d',str(file_name)).group())\ndef get_score_labels(file_name):\n    return re.search('\\d.\\d',str(file_name)).group()","11186db4":"data_reg = (ImageList.from_folder(path_img)\n .split_by_rand_pct()\n .label_from_func(get_float_labels, label_cls=FloatList)\n .transform(get_transforms(), size=[300,180])\n .databunch()) \ndata_reg.normalize(imagenet_stats)\ndata_reg.show_batch(rows=3, figsize=(9,6))","50f9dbea":"data_class = (ImageList.from_folder(path_img)\n .split_by_rand_pct()\n .label_from_func(get_score_labels)\n .transform(get_transforms(), size=[300,180])\n .databunch()) \ndata_class.normalize(imagenet_stats)\ndata_class.show_batch(rows=3, figsize=(9,6))","07816ebd":"class L1LossFlat(nn.L1Loss):\n    \"Mean Absolute Error Loss\"\n    def forward(self, input:Tensor, target:Tensor) -> Rank0Tensor:\n        return super().forward(input.view(-1), target.view(-1))","06694237":"learn_reg = create_cnn(data_reg, models.resnet50)\nlearn_reg.loss = L1LossFlat","d5e49f97":"learn_class = create_cnn(data_class, models.resnet50,metrics=accuracy)","0dfc7c75":"learn_reg.fit_one_cycle(5)","2660d5ad":"learn_class.fit_one_cycle(5)","1b830bd0":"learn_reg.show_results(rows=3)","703bcf63":"learn_class.show_results(rows=3)","6d776d01":"preds,y,losses = learn_reg.get_preds(with_loss=True)\nnum_preds = [x[0] for x in np.array(preds)]\nnum_gt = [x for x in np.array(y)]\nscat_data = pd.DataFrame(data={'Predictions':num_preds,'Ground_Truth':num_gt})","cac8273f":"preds_cl,y_cl = learn_class.get_preds()\nlabels = np.argmax(preds_cl, 1)\npreds_class = [float(data_class.classes[int(x)]) for x in labels]\ny_class = [float(data_class.classes[int(x)]) for x in y_cl]\nscat_data_cl = pd.DataFrame(data={'Predictions':preds_class,'Ground_Truth':y_class})","f2dee672":"sns.regplot(x='Predictions',y='Ground_Truth',data = scat_data_cl,lowess=True,scatter_kws={'s':2})","8b3d86a8":"sns.regplot(x='Predictions',y='Ground_Truth',data = scat_data,lowess=True,scatter_kws={'s':2})","00866f66":"sns.regplot(x='Predictions',y='Ground_Truth',data = scat_data_cl,lowess=True,scatter_kws={'s':2})","c2bdd1f5":"preds_class,y_class,losses_class = learn_class.get_preds(with_loss=True)\ninterp = ClassificationInterpretation(learn_class, preds_class, y_class, losses_class)\ninterp.plot_confusion_matrix()","c7b450e9":"interp.plot_top_losses(9, figsize=(15,11))","2664d9ff":"learn_reg.export('\/kaggle\/output\/')\nlearn_class.export('\/kaggle\/output\/')\nimg1 = open_image('\/kaggle\/input\/test-images\/test1.jpg')\nimg2 = open_image('\/kaggle\/input\/test-images\/test2.jpg')","4322264e":"print(\"Predicted IMDB Score of Image Regression Model is: \",learn_reg.predict(img1)[0])\nprint(\"Predicted IMDB Score of Image Classification Model is: \",learn_class.predict(img1)[0])","18e352d0":"print(\"Predicted IMDB Score of Image Regression Model is: \",learn_reg.predict(img2)[0])\nprint(\"Predicted IMDB Score of Image Classification Model is: \",learn_class.predict(img2)[0])","11854f70":"### Image Classification Results","ea6feb61":"### Similarly we test with one of 2019's top rated movie - Parasite (IMDB rating - 8.6)\n![Parasite](https:\/\/m.media-amazon.com\/images\/M\/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_QL50_SY1000_CR0,0,674,1000_AL_.jpg)","313b61e6":"## Initialize two trainers with ResNet 50 architecture but one for regression and the other for classification","b7abdd49":"## Image Databunch from Fast.ai library\n### One Image Databunch (data_reg) will act as the training data for a regression approach while the other (data_class) will consider it as a multi-label classification problem","938e32de":"### Customized Image Dataset derived from the original Movie Posters dataset where filenames are named with their IMDB(Score and ID) and uses regex to parse their IMDB score for training labels","9e3ed937":"## Predictions of IR and IC models","3c836b3c":"### This kernel was inspired by a tweet from Balaji Srinivasan - https:\/\/twitter.com\/balajis\/status\/1207703228516904960\n\n#### He wanted to know if DL can find correlations between a book's cover or in this case Movie Poster and it's associated Amazon rating\/IMDB Score","e563ef61":"### Image Regression Results","d9b4fd6e":"### Testing the model with BvS (IMDB rating - 6.5)\n![Batman Vs Superman](https:\/\/m.media-amazon.com\/images\/M\/MV5BYThjYzcyYzItNTVjNy00NDk0LTgwMWQtYjMwNmNlNWJhMzMyXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_QL50_SY1000_CR0,0,675,1000_AL_.jpg**)","0bd0823d":"### Imports","ae84aee3":"### Scatterplot of Ground Truth and Predictions - Image Regression","23675999":"## Custom Loss function - inspired from https:\/\/medium.com\/@btahir\/a-quick-guide-to-using-regression-with-image-data-in-fastai-117304c0af90","59a59ca9":"### Has close to 8.7k images - does increasing the dataset increase the performance of the model?","3a68e925":"## Number of Unique IMDB Scores (from 0-10*)\n*Discounting Spinal Tap of course","f33d2544":"### IMDB Score wise distribution in the dataset","191b562e":"### Some of the most confusing examples for the Image Classification Model","4b11bf17":"### In Conclusion, best not to judge a movie by it's poster? :)"}}