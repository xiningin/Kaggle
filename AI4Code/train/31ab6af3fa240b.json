{"cell_type":{"9c49e790":"code","6f3f1053":"code","85c0e194":"code","51f8a497":"code","73b3dc9f":"code","1067bd3d":"code","678b9efe":"code","a0b65fb1":"code","9a65b352":"code","cb8cbcf4":"code","3393e7fb":"code","537c7908":"code","62ab4966":"code","fca43d30":"code","a60b7373":"code","e66c0ea3":"code","8ca0e277":"code","1ab552d7":"code","84eef762":"code","1ee7980c":"code","d5a77783":"code","26f314f8":"code","093c7876":"code","1e9d2ca3":"markdown","f75edfe3":"markdown","0c841ab4":"markdown","d8727901":"markdown","3cb8a9a7":"markdown","fe3a5461":"markdown","54dc150f":"markdown"},"source":{"9c49e790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f3f1053":"import json\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom scipy import stats","85c0e194":"path='\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/'","51f8a497":"artists=pd.read_csv(os.path.join(path,'artists.csv'))\nartists.head(3)","73b3dc9f":"tracks=pd.read_csv(os.path.join(path,'tracks.csv'))\ntracks.head(3)","1067bd3d":"dict_artists=open(os.path.join(path,'dict_artists.json'))\nartists_json = json.load(dict_artists)","678b9efe":"artists_json['0DvvojCMIqsOT1Btiwvq1h']","a0b65fb1":"def removepunc(string):\n\n    string=string.replace('[','').replace(']','').replace(\"'\",'').replace(\"'\",'')\n    return string","9a65b352":"tracks['id_artists']=tracks['id_artists'].apply(removepunc)","cb8cbcf4":"tracks['id_artists'].head()","3393e7fb":"artists.head()","537c7908":"artists['genres'].value_counts()\/artists['genres'].count()*100","62ab4966":"artists.drop(columns='genres',inplace=True)","fca43d30":"(tracks[~tracks['id_artists'].isin(artists['id'])]['artists'].count()\/tracks['id_artists'].count())*100","a60b7373":"(artists[~artists['id'].isin(tracks['id_artists'])]['id'].count()\/artists['id'].count())*100","e66c0ea3":"tracks.columns","8ca0e277":"tracks_sub=tracks[['popularity','duration_ms', 'explicit', 'release_date', 'danceability', 'energy', 'key',\n       'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness',\n       'liveness', 'valence', 'tempo', 'time_signature']]","1ab552d7":"matrix = np.triu(tracks_sub.corr())\nsns.set(rc={'figure.figsize':(20,10)})\nax = sns.heatmap(tracks_sub.corr(), annot=True, fmt='.1g',cmap= 'coolwarm',mask=matrix)","84eef762":"import matplotlib\nmatplotlib.rcParams['agg.path.chunksize'] = 10000\na=sns.regplot(tracks['loudness'],tracks['energy'])\na.set(ylim=(-1.5, 1.5))\na.set(xlim=(-70, 70))\nplt.xlabel(\"Loudness\")\nplt.ylabel(\"Energy\")","1ee7980c":"tracks.describe()","d5a77783":"tracks[['loudness','key','tempo','time_signature']]= preprocessing.normalize(tracks[['loudness','key','tempo','time_signature']])","26f314f8":"fig,ax=plt.subplots()\nslope, intercept, r_value, p_value, std_err = stats.linregress(tracks['popularity'],tracks['danceability'])\nax.set(xlim=[-5,100],ylim=[0,1])\nsns.regplot(tracks['popularity'],tracks['danceability'],line_kws={'label':\"y={0:.3f}x+{1:.1f}\".format(slope,intercept)})\nax.legend()\nplt.show()","093c7876":"fig,ax=plt.subplots()\nslope, intercept, r_value, p_value, std_err = stats.linregress(tracks['popularity'],tracks['acousticness'])\nax.set(xlim=[-5,100],ylim=[-0.5,1])\nsns.regplot(tracks['popularity'],tracks['acousticness'],line_kws={'label':\"y={0:.3f}x+{1:.1f} pvalue={2:.3f}\".format(slope,intercept,p_value)})\nax.legend()\nplt.show()","1e9d2ca3":"All columns are normalized except: key,loudness,tempo, time signature","f75edfe3":"#### Checking correlation\/trends between variables","0c841ab4":"Here the hypothesis for the p-value is that the slope of the fit line is 0","d8727901":"* We see high positive correlation between Loudness and energy,and moderately positive correlation between valence and danceability\n* A strong negative correlation can be seen between acousticness and energy and moderate between loudness and acousticness","3cb8a9a7":"We can ignore 20% and join the rest for creating a features df. We will need to check more columns still","fe3a5461":"72.9% of genres are empty... We can drop this column or not use it","54dc150f":"## Data description as given by the author\n### tracks.csv\nPrimary:\n- id (Id of track generated by Spotify)\nNumerical:\n- acousticness (Ranges from 0 to 1)\n- danceability (Ranges from 0 to 1)\n- energy (Ranges from 0 to 1)\n- duration_ms (Integer typically ranging from 200k to 300k)\n- instrumentalness (Ranges from 0 to 1)\n- valence (Ranges from 0 to 1)\n- popularity (Ranges from 0 to 100)\n- tempo (Float typically ranging from 50 to 150)\n- liveness (Ranges from 0 to 1)\n- loudness (Float typically ranging from -60 to 0)\n- speechiness (Ranges from 0 to 1)\nDummy:\n- mode (0 = Minor, 1 = Major)\n- explicit (0 = No explicit content, 1 = Explicit content)\nCategorical:\n- key (All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026)\n- timesignature (The predicted timesignature, most typically 4)\n- artists (List of artists mentioned)\n- artists (Ids of mentioned artists)\n- release_date (Date of release mostly in yyyy-mm-dd format, however precision of date may vary)\n- name (Name of the song)\n### artists.csv\n- id (Id of artist)\n- name (Name of artist)\n- followers (Total number of followers of artist)\n- popularity (Popularity of given artist based on all his\/her tracks)\n- genres (Genres associated with this artist)\n\n### dict_artists.json\n{\n\"any\": [\n\"first\",\n\"second\",\n\"third\",\n\u2026,\n\"nth\"\n],\n\"blank\": [],\n\"first: [\n\"any\",\n\"third\",\n\"second\n],\n\u2026\n}"}}