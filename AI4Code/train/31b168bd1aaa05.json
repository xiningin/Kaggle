{"cell_type":{"131cc3b5":"code","a5a810e6":"code","eadcb8cc":"code","b0b0c113":"code","f44f7c0b":"code","5402b7e7":"code","fe255c24":"code","27ab7a91":"code","9a4f4e56":"code","98642bd7":"code","62fb1cec":"code","ec30004e":"code","e2303e98":"code","d4f74d27":"code","447e722b":"code","b66701bb":"code","09ec931f":"code","0b95f61b":"code","f81c5949":"code","1d5c2e0c":"code","3d00515f":"code","104a1b09":"code","c4e7de40":"code","862fcf9d":"code","fad74819":"code","6930c2a8":"code","c9afa8c8":"code","671b1fa7":"code","1797c792":"code","ee6f43d0":"code","c91dbe1e":"code","2b30089a":"code","2953fbb4":"code","bd7e3200":"code","e0c4d73d":"markdown","d94b8527":"markdown","cd591096":"markdown","6236e42d":"markdown","c93dac81":"markdown","e2ab9a75":"markdown","fa33b1d0":"markdown","fd7fdedb":"markdown","166d7f02":"markdown","bd23cda6":"markdown","5e83fecf":"markdown","080981ce":"markdown","5b3bfc19":"markdown","8bb5c1e3":"markdown","ec4ca4c5":"markdown","821dd6e8":"markdown","4c071d1f":"markdown","f5b2c208":"markdown"},"source":{"131cc3b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a5a810e6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nPassengerId=test['PassengerId']\nall_data = pd.concat([train, test], ignore_index = True)","eadcb8cc":"train.head()","b0b0c113":"train.info()","f44f7c0b":"train['Survived'].value_counts()","5402b7e7":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train)","fe255c24":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train)","27ab7a91":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train)","9a4f4e56":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train)","98642bd7":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlabel('Age') \nplt.ylabel('density') ","62fb1cec":"sns.countplot('Embarked',hue='Survived',data=train)","ec30004e":"all_data['Title'] = all_data['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\nTitle_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))\n\nall_data['Title'] = all_data['Title'].map(Title_Dict)\nsns.barplot(x=\"Title\", y=\"Survived\", data=all_data)","e2303e98":"all_data['FamilySize']=all_data['SibSp']+all_data['Parch']+1\nsns.barplot(x=\"FamilySize\", y=\"Survived\", data=all_data)","d4f74d27":"def Fam_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0\nall_data['FamilyLabel']=all_data['FamilySize'].apply(Fam_label)\nsns.barplot(x=\"FamilyLabel\", y=\"Survived\", data=all_data)","447e722b":"all_data['Cabin'] = all_data['Cabin'].fillna('Unknown')\nall_data['Deck']=all_data['Cabin'].str.get(0)\nsns.barplot(x=\"Deck\", y=\"Survived\", data=all_data)","b66701bb":"Ticket_Count = dict(all_data['Ticket'].value_counts())\nall_data['TicketGroup'] = all_data['Ticket'].apply(lambda x:Ticket_Count[x])\nsns.barplot(x='TicketGroup', y='Survived', data=all_data)","09ec931f":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0\n\nall_data['TicketGroup'] = all_data['TicketGroup'].apply(Ticket_Label)\nsns.barplot(x='TicketGroup', y='Survived', data=all_data)","0b95f61b":"from sklearn.ensemble import RandomForestRegressor\nage_df = all_data[['Age', 'Pclass','Sex','Title']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].iloc[:,:].values\nunknown_age = age_df[age_df.Age.isnull()].iloc[:,:].values\ny = known_age[:, 0]\nX = known_age[:, 1:]\nrfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)\npredictedAges = rfr.predict(unknown_age[:, 1::])\nall_data.loc[ (all_data.Age.isnull()), 'Age' ] = predictedAges ","f81c5949":"all_data[all_data['Embarked'].isnull()]","1d5c2e0c":"all_data.groupby(by=[\"Pclass\",\"Embarked\"]).Fare.median()","3d00515f":"all_data['Embarked'] = all_data['Embarked'].fillna('C')","104a1b09":"all_data[all_data['Fare'].isnull()]","c4e7de40":"fare=all_data[(all_data['Embarked'] == \"S\") & (all_data['Pclass'] == 3)].Fare.median()\nall_data['Fare']=all_data['Fare'].fillna(fare)","862fcf9d":"all_data['Surname']=all_data['Name'].apply(lambda x:x.split(',')[0].strip())\nSurname_Count = dict(all_data['Surname'].value_counts())\nall_data['FamilyGroup'] = all_data['Surname'].apply(lambda x:Surname_Count[x])\nFemale_Child_Group=all_data.loc[(all_data['FamilyGroup']>=2) & ((all_data['Age']<=12) | (all_data['Sex']=='female'))]\nMale_Adult_Group=all_data.loc[(all_data['FamilyGroup']>=2) & (all_data['Age']>12) & (all_data['Sex']=='male')]","fad74819":"Female_Child=pd.DataFrame(Female_Child_Group.groupby('Surname')['Survived'].mean().value_counts())\nFemale_Child.columns=['GroupCount']\nFemale_Child","6930c2a8":"sns.barplot(x=Female_Child.index, y=Female_Child[\"GroupCount\"]).set_xlabel('AverageSurvived')","c9afa8c8":"Male_Adult=pd.DataFrame(Male_Adult_Group.groupby('Surname')['Survived'].mean().value_counts())\nMale_Adult.columns=['GroupCount']\nMale_Adult","671b1fa7":"Female_Child_Group=Female_Child_Group.groupby('Surname')['Survived'].mean()\nDead_List=set(Female_Child_Group[Female_Child_Group.apply(lambda x:x==0)].index)\nprint(Dead_List)\nMale_Adult_List=Male_Adult_Group.groupby('Surname')['Survived'].mean()\nSurvived_List=set(Male_Adult_List[Male_Adult_List.apply(lambda x:x==1)].index)\nprint(Survived_List)","1797c792":"train=all_data.loc[all_data['Survived'].notnull()]\ntest=all_data.loc[all_data['Survived'].isnull()]\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Sex'] = 'male'\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Age'] = 60\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Title'] = 'Mr'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Sex'] = 'female'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Age'] = 5\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Title'] = 'Miss'","ee6f43d0":"all_data=pd.concat([train, test])\nall_data=all_data[['Survived','Pclass','Sex','Age','Fare','Embarked','Title','FamilyLabel','Deck','TicketGroup']]\nall_data=pd.get_dummies(all_data)\nall_data","c91dbe1e":"train=all_data[all_data['Survived'].notnull()]\ntest=all_data[all_data['Survived'].isnull()].drop('Survived',axis=1)\nX = train.iloc[:,:].values[:,1:]\ny = train['Survived']","2b30089a":"#\u8bad\u7ec3\u6a21\u578b\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_selection import SelectKBest\nselect = SelectKBest(k = 20)\nclf = RandomForestClassifier(random_state = 10, warm_start = True, \n                                  n_estimators = 26,\n                                  max_depth = 6, \n                                  max_features = 'sqrt')\npipeline = make_pipeline(select, clf)\npipeline.fit(X, y)","2953fbb4":"#\u4ea4\u53c9\u9a8c\u8bc1\nfrom sklearn import model_selection, metrics\ncv_score = model_selection.cross_val_score(pipeline, X, y, cv= 10)\nprint(\"CV Score : Mean - %.7g | Std - %.7g \" % (np.mean(cv_score), np.std(cv_score)))","bd7e3200":"#\u9884\u6d4b\u5e76\u8f93\u51fa\npredictions = pipeline.predict(test)\nsubmission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(\"submission.csv\", index=False)","e0c4d73d":"# \u4e8c. \u6570\u636e\u5206\u6790\n\n* PassengerID\uff08ID\uff09\n* Survived(\u5b58\u6d3b\u4e0e\u5426)\n* Pclass\uff08\u5ba2\u8231\u7b49\u7ea7\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\n* Name\uff08\u59d3\u540d\uff0c\u53ef\u63d0\u53d6\u51fa\u66f4\u591a\u4fe1\u606f\uff09\n* Sex\uff08\u6027\u522b\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\n* Age\uff08\u5e74\u9f84\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\n* Parch\uff08\u76f4\u7cfb\u4eb2\u53cb\uff09\n* SibSp\uff08\u65c1\u7cfb\uff09\n* Ticket\uff08\u7968\u7f16\u53f7\uff09\n* Fare\uff08\u7968\u4ef7\uff09\n* Cabin\uff08\u5ba2\u8231\u7f16\u53f7\uff09\n* Embarked\uff08\u4e0a\u8239\u7684\u6e2f\u53e3\u7f16\u53f7\uff09","d94b8527":"Sex Feature\uff1a\u5973\u6027\u5e78\u5b58\u7387\u8fdc\u9ad8\u4e8e\u7537\u6027","cd591096":"# \u4e09. \u6570\u636e\u6e05\u6d17\n\n\u7f3a\u5931\u9879\u586b\u5145\uff1a\n* Age Feature\uff1aAge\u7f3a\u5931\u91cf\u4e3a263\uff0c\u7f3a\u5931\u91cf\u8f83\u5927\uff0c\u7528Sex, Title, Pclass\u4e09\u4e2a\u7279\u5f81\u6784\u5efa\u968f\u673a\u68ee\u6797\u6a21\u578b\uff0c\u586b\u5145\u5e74\u9f84\u7f3a\u5931\u503c \n* Embarked Feature\uff1aEmbarked\u7f3a\u5931\u91cf\u4e3a2\uff0c\u7f3a\u5931Embarked\u4fe1\u606f\u7684\u4e58\u5ba2\u7684Pclass\u5747\u4e3a1\uff0c\u4e14Fare\u5747\u4e3a80\uff0c\u56e0\u4e3aEmbarked\u4e3aC\u4e14Pclass\u4e3a1\u7684\u4e58\u5ba2\u7684Fare\u4e2d\u4f4d\u6570\u4e3a80\uff0c\u6240\u4ee5\u7f3a\u5931\u503c\u586b\u5145\u4e3aC \n* Fare Feature\uff1aFare\u7f3a\u5931\u91cf\u4e3a1\uff0c\u7f3a\u5931Fare\u4fe1\u606f\u7684\u4e58\u5ba2\u7684Embarked\u4e3aS\uff0cPclass\u4e3a3\uff0c\u6240\u4ee5\u7528Embarked\u4e3aS\uff0cPclass\u4e3a3\u7684\u4e58\u5ba2\u7684Fare\u4e2d\u4f4d\u6570\u586b\u5145","6236e42d":"Parch Feature\uff1a\u7236\u6bcd\u4e0e\u5b50\u5973\u6570\u9002\u4e2d\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u66f4\u9ad8","c93dac81":"\u7279\u5f81\u8f6c\u6362\uff1a \n* \u9009\u53d6\u7279\u5f81\uff0c\u8f6c\u6362\u4e3a\u6570\u503c\u53d8\u91cf\uff0c\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","e2ab9a75":"Deck Feature(New)\uff1a\u4e0d\u540c\u7532\u677f\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u4e0d\u540c \u65b0\u589eDeck\u7279\u5f81\uff0c\u5148\u628aCabin\u7a7a\u7f3a\u503c\u586b\u5145\u4e3a'Unknown'\uff0c\u518d\u63d0\u53d6Cabin\u4e2d\u7684\u9996\u5b57\u6bcd\u6784\u6210\u4e58\u5ba2\u7684\u7532\u677f\u53f7","fa33b1d0":"Pclass Feature\uff1a\u4e58\u5ba2\u793e\u4f1a\u7b49\u7ea7\u8d8a\u9ad8\uff0c\u5e78\u5b58\u7387\u8d8a\u9ad8","fd7fdedb":"\n\u6309\u751f\u5b58\u7387\u628aFamilySize\u5206\u4e3a\u4e09\u7c7b\uff0c\u6784\u6210FamilyLabel\u7279\u5f81\u3002","166d7f02":"\n\u4ece\u4e0d\u540c\u751f\u8fd8\u60c5\u51b5\u7684\u5bc6\u5ea6\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5e74\u9f8415\u5c81\u7684\u5de6\u4fa7\uff0c\u751f\u8fd8\u7387\u6709\u660e\u663e\u5dee\u522b\uff0c\u5bc6\u5ea6\u56fe\u975e\u4ea4\u53c9\u533a\u57df\u9762\u79ef\u975e\u5e38\u5927\uff0c\u4f46\u5728\u5176\u4ed6\u5e74\u9f84\u6bb5\uff0c\u5219\u5dee\u522b\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u8ba4\u4e3a\u662f\u968f\u673a\u6240\u81f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5c06\u6b64\u5e74\u9f84\u504f\u5c0f\u7684\u533a\u57df\u5206\u79bb\u51fa\u6765\u3002","bd23cda6":"# \u4e00. \u5bfc\u5165\u6570\u636e\u5305\u4e0e\u6570\u636e\u96c6","5e83fecf":"\nTicketGroup Feature(New)\uff1a\u4e0e2\u81f34\u4eba\u5171\u7968\u53f7\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u8f83\u9ad8 \u65b0\u589eTicketGroup\u7279\u5f81\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u4e58\u5ba2\u7684\u5171\u7968\u53f7\u6570","080981ce":"\u540c\u7ec4\u8bc6\u522b\uff1a \n* \u628a\u59d3\u6c0f\u76f8\u540c\u7684\u4e58\u5ba2\u5212\u5206\u4e3a\u540c\u4e00\u7ec4\uff0c\u4ece\u4eba\u6570\u5927\u4e8e\u4e00\u7684\u7ec4\u4e2d\u5206\u522b\u63d0\u53d6\u51fa\u6bcf\u7ec4\u7684\u5987\u5973\u513f\u7ae5\u548c\u6210\u5e74\u7537\u6027,\u53d1\u73b0\u7edd\u5927\u90e8\u5206\u5973\u6027\u548c\u513f\u7ae5\u7ec4\u7684\u5e73\u5747\u5b58\u6d3b\u7387\u90fd\u4e3a1\u62160\uff0c\u5373\u540c\u7ec4\u7684\u5973\u6027\u548c\u513f\u7ae5\u8981\u4e48\u5168\u90e8\u5e78\u5b58\uff0c\u8981\u4e48\u5168\u90e8\u9047\u96be\uff1b\n* \u7edd\u5927\u90e8\u5206\u6210\u5e74\u7537\u6027\u7ec4\u7684\u5e73\u5747\u5b58\u6d3b\u7387\u4e5f\u4e3a1\u62160 \u56e0\u4e3a\u666e\u904d\u89c4\u5f8b\u662f\u5973\u6027\u548c\u513f\u7ae5\u5e78\u5b58\u7387\u9ad8\uff0c\u6210\u5e74\u7537\u6027\u5e78\u5b58\u8f83\u4f4e\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4e0d\u7b26\u5408\u666e\u904d\u89c4\u5f8b\u7684\u53cd\u5e38\u7ec4\u9009\u51fa\u6765\u5355\u72ec\u5904\u7406\u3002\n* \u628a\u5973\u6027\u548c\u513f\u7ae5\u7ec4\u4e2d\u5e78\u5b58\u7387\u4e3a0\u7684\u7ec4\u8bbe\u7f6e\u4e3a\u9047\u96be\u7ec4\uff0c\u628a\u6210\u5e74\u7537\u6027\u7ec4\u4e2d\u5b58\u6d3b\u7387\u4e3a1\u7684\u8bbe\u7f6e\u4e3a\u5e78\u5b58\u7ec4\uff0c\u63a8\u6d4b\u5904\u4e8e\u9047\u96be\u7ec4\u7684\u5973\u6027\u548c\u513f\u7ae5\u5e78\u5b58\u7684\u53ef\u80fd\u6027\u8f83\u4f4e\uff0c\u5904\u4e8e\u5e78\u5b58\u7ec4\u7684\u6210\u5e74\u7537\u6027\u5e78\u5b58\u7684\u53ef\u80fd\u6027\u8f83\u9ad8\u3002\n* \u4e3a\u4e86\u4f7f\u5904\u4e8e\u8fd9\u4e24\u79cd\u53cd\u5e38\u7ec4\u4e2d\u7684\u6837\u672c\u80fd\u591f\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u5bf9\u6d4b\u8bd5\u96c6\u4e2d\u5904\u4e8e\u53cd\u5e38\u7ec4\u4e2d\u7684\u6837\u672c\u7684Age\uff0cTitle\uff0cSex\u8fdb\u884c\u60e9\u7f5a\u4fee\u6539","5b3bfc19":"FamilyLabel Feature(New)\uff1a\u5bb6\u5ead\u4eba\u6570\u4e3a2\u52304\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u8f83\u9ad8 \u65b0\u589eFamilyLabel\u7279\u5f81\uff0c\u5148\u8ba1\u7b97FamilySize=Parch+SibSp+1\uff0c\u7136\u540e\u628aFamilySize\u5206\u4e3a\u4e09\u7c7b","8bb5c1e3":"\n\u6309\u751f\u5b58\u7387\u628aTicketGroup\u5206\u4e3a\u4e09\u7c7b","ec4ca4c5":"SibSp Feature\uff1a\u914d\u5076\u53ca\u5144\u5f1f\u59d0\u59b9\u6570\u9002\u4e2d\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u66f4\u9ad8","821dd6e8":"\nTitle Feature(New)\uff1a\u4e0d\u540c\u79f0\u547c\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u4e0d\u540c \u65b0\u589eTitle\u7279\u5f81\uff0c\u4ece\u59d3\u540d\u4e2d\u63d0\u53d6\u4e58\u5ba2\u7684\u79f0\u547c\uff0c\u5f52\u7eb3\u4e3a\u516d\u7c7b\u3002","4c071d1f":"# \u56db. \u5efa\u6a21\u548c\u4f18\u5316\n\u4f7f\u7528\u968f\u673a\u68ee\u6797\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1","f5b2c208":"\nEmbarked\u767b\u6e2f\u6e2f\u53e3\u4e0e\u751f\u5b58\u60c5\u51b5\u7684\u5206\u6790 \u7ed3\u679c\u5206\u6790:C\u5730\u7684\u751f\u5b58\u7387\u66f4\u9ad8"}}