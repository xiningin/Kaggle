{"cell_type":{"49937c0f":"code","70c7421d":"code","af2d2e39":"code","b5c37724":"code","1c233b0e":"code","ac8f4a71":"code","279de5b6":"code","713b6afe":"code","4e1b5ae1":"code","777201ef":"code","fb81a3c4":"code","008cfa55":"code","370fc820":"code","bcc48540":"code","006ed15b":"code","5d76a209":"markdown","7bd49486":"markdown","6c8c45e6":"markdown","ec52cd65":"markdown","c25dbc4a":"markdown","a0b72c20":"markdown"},"source":{"49937c0f":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport os\ndata_paths = {}\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_paths[filename] = os.path.join(dirname, filename)\n        \nprint(data_paths)","70c7421d":"# Define required imports\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","af2d2e39":"# ner_df = pd.read_csv(data_paths['ner.csv'])\nner_data = pd.read_csv(data_paths['ner_dataset.csv'], encoding = 'unicode_escape')\nprint(ner_data.shape)\nner_data.head()","b5c37724":"ner_data.fillna(method = 'ffill', inplace = True)\nner_data.tail()","1c233b0e":"ner_data.rename(columns = {'Sentence #':'SentId'}, inplace = True)\nner_data.columns","ac8f4a71":"ner_data['SentId'] = ner_data['SentId'].apply(lambda x:x.split()[-1]).astype(int)","279de5b6":"# Save sentence length to list\nsentence_len = ner_data['SentId'].value_counts().tolist()\n# Plot sentence by length\nplt.hist(sentence_len, bins=60)\nplt.title('Number of words per sentence')\nplt.xlabel('Sentence length in words')\nplt.ylabel('Number of sentences')\nplt.show()","713b6afe":"# ner_tags = ner_data[ner_data['Tag'] != 'O']\nentities = ner_data.groupby(\"Tag\")['Word']\nentities.describe()","4e1b5ae1":"postags = ner_data.groupby(\"POS\")['Word']\npostags.describe()","777201ef":"ner_data['entity_type'] = ner_data['Tag'].apply(lambda x:x.split('-')[-1])\nner_data['entity_type'].unique()","fb81a3c4":"i = 0\nplt.figure(figsize=(16,8))\nfor ent_type in ['geo', 'gpe', 'per', 'org',]:\n    ent_type_df = ner_data[ner_data['entity_type'] == ent_type]\n    ent_texts = ' '.join(ent_type_df['Word'].tolist())\n    ent_wc = WordCloud(collocations = False).generate(ent_texts)\n    plt.subplot(2, 2, i + 1)\n    plt.imshow(ent_wc, interpolation='bilinear')\n    plt.title(\"{}\".format(ent_type).upper())\n    i += 1","008cfa55":"i = 0\nplt.figure(figsize=(16,8))\nfor ent_type in ['tim', 'art', 'nat', 'eve']:\n    ent_type_df = ner_data[ner_data['entity_type'] == ent_type]\n    ent_texts = ' '.join(ent_type_df['Word'].tolist())\n    ent_wc = WordCloud(collocations = False).generate(ent_texts)\n    plt.subplot(2, 2, i + 1)\n    plt.imshow(ent_wc, interpolation='bilinear')\n    plt.title(\"{}\".format(ent_type).upper())\n    i += 1","370fc820":"ner_data = pd.read_csv(data_paths['ner_dataset.csv'], encoding = 'unicode_escape')","bcc48540":"val_end = int(47959 * 0.84)\ntrain_end = int(val_end*0.8)\ntrain_end, val_end\n\nsent_idx = 0\noutputfile = open('train.txt', 'w')\n\nfor i, row in ner_data.iterrows():\n    if str(row[0]).startswith('Sentence'):\n        outputfile.write(\"\\n\")\n        sent_idx += 1\n        \n        if sent_idx == train_end + 1:\n            outputfile.close()\n            outputfile = open('val.txt', 'w')\n        \n        if sent_idx == val_end + 1:\n            outputfile.close()\n            outputfile = open('test.txt', 'w')\n            \n    outputfile.write(\"{} {} {}\\n\".format(row[1], row[2], row[3]))\n    \noutputfile.close()","006ed15b":"!ls","5d76a209":"Person (PER) - Person entities are limited to individuals that are human or have human characteristics, such as divine entities.\n\nLocation (GEO) - Location entities are limited to geographical entities such as geographical areas and landmasses, bodies of water, and geological formations.\n\nOrganization (ORG) - Organization entities are limited to corporations, agencies, and other groups of people defined by an established organizational structure.\n\nGeo-political Entity (GPE) - GPE entities are geographical regions defined by political and\/or social groups. A GPE entity subsumes and does not distinguish between a city, a nation, its region, its government, or its people (LOC\u2022ORG).\n\nArtifact (ART) - Artifacts are limited to manmade objects, structures and abstract entities, including buildings, facilities, art and scientific theories.\n\nEvent (EVE) - Events are incidents and occasions that occur during a particular time.\n\nNatural Object (NAT) - Natural objects are entities that occur naturally and are not manmade, such as diseases, biological entities and other living things.\n\nTime (TIM) - Time entities are limited to references to certain temporal entities that have a name, such as the days of the week and months of a year. For all other temporal expressions the tagging layer timex is used (see below).\n\nOther (O) - Other entities include all other words which do not fall in any of the categories above.","7bd49486":"- A lot of Texts seems to be covering Politics.","6c8c45e6":"- should symbols like `:, -, ., ; etc..` must be aggregrated into `PUNC` type ?","ec52cd65":"- ART,EVE, NAT examples are low...model likely to under perform in those contexts.","c25dbc4a":"- seems like some names like Rita, Jing, Paul ,Katrina are in NAT, they should be in PER\n- Also, Facebook seems to be ART, which is a ORG.","a0b72c20":"### Finally process & transform data to conll format while spliting to train, dev & test."}}