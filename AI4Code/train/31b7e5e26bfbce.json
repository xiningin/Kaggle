{"cell_type":{"e3abb73c":"code","aee8a899":"code","639ad22c":"code","a69ae298":"code","8e68be1a":"code","7a2f8d63":"code","32da3c84":"code","272be9b3":"code","50552f83":"code","5ed38e78":"code","3cbec9b1":"code","8bba198a":"code","3564db95":"code","aae2c494":"code","85b978c8":"code","76db25d8":"code","4f8c4928":"code","04d863dd":"code","f9acd85f":"code","5b8d4848":"code","735385c2":"code","d5d1443f":"code","ff71b0ee":"code","e949d072":"code","d7c5dc20":"code","87d5315f":"code","6d27eaf2":"code","3d7e15d9":"code","951aa442":"code","97c971d7":"code","7ea19501":"code","07d4bf51":"code","b62d1df2":"code","afaf3270":"code","5bed10b0":"code","edfb990f":"code","5c38770e":"code","a8eb303e":"code","b0ff52ab":"code","6e50f6f4":"code","0585257a":"code","c7a92c2b":"code","4a5f01b6":"code","ac4df16d":"markdown","f029a674":"markdown","35d2f807":"markdown","b49714b4":"markdown","387db08a":"markdown","fac1a2ae":"markdown","a5113412":"markdown","830777ea":"markdown","8a1e763e":"markdown","230f5ab5":"markdown","645058fd":"markdown","ccfdbb9a":"markdown","f5805cd7":"markdown","0394b66c":"markdown","f94ffa36":"markdown","d9322e54":"markdown","5bb21be5":"markdown","99ed1130":"markdown","19645f5a":"markdown","ff72ff8a":"markdown","9adc1423":"markdown","952197b6":"markdown","471b6d36":"markdown","00eb6aaf":"markdown","1d5706c0":"markdown","bcf96e83":"markdown","7ccf4b86":"markdown","2fea295c":"markdown","13970054":"markdown","dbcc310f":"markdown"},"source":{"e3abb73c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aee8a899":"# \u5bfc\u5165\u57fa\u7840\u5e93\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","639ad22c":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","a69ae298":"train.info()","8e68be1a":"train.head()","7a2f8d63":"train.describe()","32da3c84":"fig = plt.figure(num = 1,figsize = (12,6))\nfig = sns.heatmap(train.corr(),annot=True)\nplt.show()","272be9b3":"train.loc[:,[\"Sex\",\"Survived\"]].groupby([\"Sex\"]).mean()","50552f83":"# \u5148\u770b\u4e0d\u540c\u767b\u9646\u70b9\u7684\u4eba\u6570\nplt.figure(figsize=(16,8))\nplt.subplot(121)\nsns.countplot(\"Embarked\",data = train)\nplt.title(\"total passengers from different embarked places\")\n# \u518d\u505a\u5404\u767b\u9646\u70b9\u751f\u5b58\u6bd4\nplt.subplot(122)\nrates = train[train[\"Survived\"]==1][\"Embarked\"].value_counts()\/train[\"Embarked\"].value_counts()\nsns.barplot(x = rates.index, y = rates.values)\nplt.title(\"Survived rates of different embarked places\")\nplt.show()","5ed38e78":"print(test.info())","3cbec9b1":"print(train.info())","8bba198a":"train.dropna(subset = [\"Embarked\"],inplace = True)\ntrain.info()","3564db95":"##\u6839\u636eLLT\uff0c\u6211\u4eec\u4fdd\u75593sigma\u4ee5\u5185\u7684\u6570\u636e\nmean=train['Fare'].mean()\nstd=train['Fare'].std()\nupper_limit=mean+3*std\nlower_limit=mean-3*std\ntrain = train[(train[\"Fare\"]<=upper_limit)&(train[\"Fare\"]>=lower_limit)]\ntrain.info()","aae2c494":"#test\u91cc\u9762\u7f3a\u5931\u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u80fd\u8003\u8651\u586b\u5145\uff0c\u5148\u770b\u770bfare\u548c\u8c01\u76f8\u5173\ntrain.corr()[\"Fare\"].abs().sort_values(ascending = False)","85b978c8":"#\u53d1\u73b0Fare\u548cPclass\u662f\u76f8\u5173\u7684\uff0c\u8fd9\u4e5f\u7b26\u5408\u6211\u4eec\u7684\u5e38\u8bc6\uff0c\u6545\u8003\u8651\u6211\u4eec\u7528Pclass\u7684Fare\u5e73\u5747\u503c\u586b\u5145\n#\u5148\u770b\u4e00\u4e0b\u7a7a\u503c\u662f\u54ea\u4e2aPclass\u7684\ntest.loc[test[\"Fare\"].isnull()]","76db25d8":"#\u7528Pclass==3\u7684\u5e73\u5747\u503c\u586b\u5145\u5373\u53ef\n#train\u7684\u6837\u672c\u591a\u4e00\u70b9\uff0c\u7528train\u586b\u5145\uff08\u5176\u5b9e\u53ef\u4ee5\u5408\u5e76test\u548ctrain\uff0c\u4f46\u6211\u61d2\uff09\ntest[\"Fare\"].fillna(value = train[train[\"Pclass\"]==3][\"Fare\"].mean(),inplace = True)\ntest.info()","4f8c4928":"#\u5148\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6title\ntitle=train['Name'].str.extract(r'([A-Z][a-z]+\\.)')\ntrain[\"Name\"] = title[0]\ntrain[\"Name\"].value_counts()","04d863dd":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\norder=train['Age'].groupby(train.Name).mean().sort_values().index\nsns.barplot(data=train,x='Name',y='Age',order=order)\nplt.title('Average Age',fontsize=20)\nplt.ylabel('Age',fontsize=20)\nplt.xticks(rotation=60,fontsize=15)\nplt.tight_layout()\n\nplt.subplot(1,2,2)\nsns.barplot(data=train,x='Name',y='Age',order=order)\nplt.title('Aveage Fare',fontsize=20)\nplt.ylabel('Fare',fontsize=20)\nplt.xticks(rotation=60,fontsize=15)\nplt.tight_layout()\nplt.show()","f9acd85f":"train[\"ischildren\"] = (train[\"Name\"]==\"Master.\")\ndef ischildren(x):\n    if x==True:\n        return 'y'\n    else:\n        return 'n' \ntrain[\"ischildren\"] = train[\"ischildren\"].apply(ischildren)\ntrain.head()","5b8d4848":"name_unique=train.Name.unique()##\u63d0\u53d6\u51fa\u6240\u6709\u4e0d\u540c\u7684\u79f0\u53f7\nfor i in name_unique:##\u5bf9\u6240\u6709\u79f0\u53f7\u7684\u7a7a\u7f3a\u503c\u904d\u5386\u64cd\u4f5c\n    condition=(train[\"Name\"]==i)\n    train.loc[condition,'Age']=train.loc[condition,'Age'].fillna(int(train.loc[condition,'Age'].mean()))\ntrain.info()","735385c2":"plt.figure(figsize=(12,6))\nplt.subplot(111)\nsurvived=train[train.Survived==1]\nsns.kdeplot(data=survived,x='Age',label='Survived')##survived\u4eba\u7fa4\u4e2d\u5e74\u9f84\u5360\u6bd4\nsns.kdeplot(data=train,x='Age',label='total')#\u5168\u90e8\u4eba\u7fa4\u4e2d\u5e74\u9f84\u5360\u6bd4\nplt.legend()","d5d1443f":"train['Age_Category']=pd.cut(train.Age,bins=[0,16,50,100])\ntrain.head()","ff71b0ee":"#\u5148\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6title\ntitle=test['Name'].str.extract(r'([A-Z][a-z]+\\.)')\ntest[\"Name\"] = title[0]\n#\u521b\u5efaischildren\u7279\u5f81\ntest[\"ischildren\"] = (test[\"Name\"]==\"Master.\")\ntest[\"ischildren\"] = test[\"ischildren\"].apply(ischildren)\n#\u586b\u8865\u7f3a\u5931\u503c\n#\u6d4b\u8bd5\u96c6\u4e2dMs.\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u4e14\u8be5\u6570\u636e\u5e74\u9f84\u4e3a\u7a7a\uff0c\u6240\u4ee5\u9700\u8981\u5355\u72ec\u64cd\u4f5c\ntemp_value = train.loc[train[\"Name\"]==\"Ms.\"][\"Age\"].mean()\ntest.iloc[88,4]=temp_value##\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48loc\u4e4b\u540e\u7528fillna\u4e00\u76f4\u62a5\u9519\uff0c\uff0c\uff0c\uff0c\u4e0d\u8981\u5728\u610f\u8fd9\u91cc\u7684\u4e11\u964b\nunique=test.Name.unique()\nfor i in unique:##\u5bf9\u6240\u6709\u79f0\u53f7\u7684\u7a7a\u7f3a\u503c\u904d\u5386\u64cd\u4f5c\n    condition = (test[\"Name\"]==i)\n    test.loc[condition,'Age']=test.loc[condition,'Age'].fillna(int(test.loc[condition]['Age'].mean()))\ntest['Age_Category']=pd.cut(test.Age,bins=[0,16,50,100])\ntest.head()","e949d072":"train.Cabin.unique()","d7c5dc20":"train['Cabin']=train['Cabin'].apply(lambda x: 'n' if pd.isna(x) else 'y')\ntest['Cabin']=test['Cabin'].apply(lambda x: 'n' if pd.isna(x) else 'y')\ntest.head()","87d5315f":"ticket_count = train.Ticket.value_counts()\nticket_count","6d27eaf2":"condition = ticket_count[ticket_count.values>1].index#\u83b7\u53d6\u5927\u4e8e1\u7684\u7968\u7684index\uff0c\u65b9\u4fbf\u4e0b\u65b9\u7528isin\u5224\u65ad\ntrain.loc[train.Ticket.isin(condition),['Survived','Ticket']].sort_values('Ticket').head(20)","3d7e15d9":"full=pd.concat([train,test],ignore_index=True)\nticket_ncount=full[\"Ticket\"].value_counts()\nticket_num_1 = ticket_ncount[ticket_ncount.values==1].index\nticket_num_1\nfull['Ticket']=full['Ticket'].apply(lambda x: 'single' if x in ticket_num_1 else x)\nfull.head()","951aa442":"from sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler","97c971d7":"full=full.drop(['PassengerId','Name','Age','SibSp'],axis=1)#\u6254\u6389\u5df2\u7ecf\u7528\u8fc7\u7684\nfull=pd.get_dummies(full)#\u5c06\u975e\u6570\u503c\u53d8\u91cf\u66f4\u6539\u4e3a\u54d1\u53d8\u91cf\n\n#\u91cd\u65b0\u62c6\u5206\u8bad\u7ec3\u96c6\u53ca\u6d4b\u8bd5\u96c6\ndata=full.loc[full.Survived.notnull()]\nfinal_test=full.loc[full.Survived.isnull()]\nX=data.drop('Survived',axis=1)\nY=data['Survived']\nfinal_test=final_test.drop('Survived',axis=1)\n\n#\u5bf9\u6570\u636e\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\nmms=StandardScaler()\nmms.fit(X)\nX=mms.transform(X)\nfinal_test=mms.transform(final_test)","7ea19501":"#\u4ee5\u4e0b\u90e8\u5206\u4e3a\u5bfc\u5165\u7b97\u6cd5\uff0c\u4ee5\u53ca\u8fdb\u884c\u53c2\u6570\u8c03\u8bd5\uff0c\u8bad\u7ec3\u6a21\u578b\u5305\u62ec\u968f\u673a\u68ee\u6797\u3001\u652f\u6301\u5411\u91cf\u673a\u3001K\u90bb\u8fd1\u3001\u903b\u8f91\u65af\u7279\u56de\u5f52\u3001AdaBoost\u7b49\u3002\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nrfc=RandomForestClassifier()\nparam_grid={'min_samples_split':[2],'max_samples':[0.5,0.6,0.7,0.8,0.9,1],'max_features':['sqrt'],'n_estimators':[300]}\ngridsearch_rfc=GridSearchCV(rfc,param_grid,cv=5)\ngridsearch_rfc.fit(X,Y)","07d4bf51":"from sklearn.svm import SVC\nsvc=SVC()\nparam_grid={'C':[0.01,0.1,1,10,100,500,1000],'gamma':[0.001,0.01,0.1,1,10,100]}\ngridsearch_svc=GridSearchCV(svc,param_grid=param_grid,cv=5)\ngridsearch_svc.fit(X,Y)","b62d1df2":"from sklearn.neighbors import KNeighborsClassifier\nKNN=KNeighborsClassifier()\nparam_grid={'n_neighbors':np.arange(3,30)}\ngridsearch_KNN=GridSearchCV(KNN,param_grid=param_grid,cv=5)\ngridsearch_KNN.fit(X,Y)","afaf3270":"from sklearn.linear_model import LogisticRegression\nlgr=LogisticRegression()\nparam_grid={'C':[0.01,0.1,1,10,100],'max_iter':[20000]}\ngridsearch_lgr=GridSearchCV(lgr,param_grid=param_grid,cv=5)\ngridsearch_lgr.fit(X,Y)","5bed10b0":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nDTC=DecisionTreeClassifier()\nadb=AdaBoostClassifier(DTC,random_state=0)\nparam_grid={'n_estimators':[300],'learning_rate':[0.001,0.01,0.1,1,10]}\ngridsearch_adb=GridSearchCV(adb,param_grid=param_grid,cv=5)\ngridsearch_adb.fit(X,Y)","edfb990f":"from sklearn.ensemble import ExtraTreesClassifier\nextratree=ExtraTreesClassifier()\nparam_grid={'max_features':[0.5,0.6,0.7,0.8,0.9,1],'max_samples':[0.5,0.6,0.7,0.8,0.9],'n_estimators':[300]}\ngridsearch_extratree=GridSearchCV(extratree,param_grid=param_grid,cv=5)\ngridsearch_extratree.fit(X,Y)","5c38770e":"import xgboost\nfrom xgboost import XGBClassifier\nxgb =XGBClassifier()\nparam_grid={\"learning_rate\":[0.05,0.1,0.5,1],\"learning_rate\":[0.1,0.5,1],\"max_depth\":[2,3,5,8,10],'verbosity':[0], \"objective\":['binary:logistic']} \ngridsearch_xgb=GridSearchCV(xgb,param_grid=param_grid,cv=5)\ngridsearch_xgb.fit(X,Y)","a8eb303e":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier()\nparam_grid={\"learning_rate\":[0.001,0.01,0.1,1],\"max_depth\":[2,3,5],\"n_estimators\":[100,120,150]} \ngridsearch_gbc=GridSearchCV(gbc,param_grid=param_grid,cv=5)\ngridsearch_gbc.fit(X,Y)","b0ff52ab":"from sklearn.model_selection import cross_val_score\nmodel=[gridsearch_rfc.best_estimator_,gridsearch_KNN.best_estimator_,gridsearch_svc.best_estimator_,\n       gridsearch_lgr.best_estimator_,gridsearch_extratree.best_estimator_,gridsearch_adb.best_estimator_,\n       gridsearch_xgb.best_estimator_,gridsearch_gbc.best_estimator_]\nmodel_mean=[]\nmodel_std=[]\nfor i in model:\n    model_mean.append(cross_val_score(i,X,Y,cv=5).mean())\n    model_std.append(cross_val_score(i,X,Y,cv=5).std())\nmodel_result=pd.DataFrame({'name':['rfc','KNN','svc','lgr','extratree','adb',\"xgb\",\"gbc\"],'mean':model_mean,'std':model_std})\nmodel_result","6e50f6f4":"##\u8003\u8651\u5230\u6bcf\u79cd\u65b9\u6cd5\u4e4b\u95f4\u90fd\u5404\u6709\u4f18\u52a3\uff0c\u6240\u4ee5\u53bb\u9664\u6389\u90e8\u5206\u65b9\u5dee\u8fc7\u5927\uff08\u6cdb\u5316\u80fd\u529b\u5dee\uff09\u7684\u65b9\u6cd5\uff0c\u91c7\u7528vote\nfrom sklearn.ensemble import VotingClassifier\nestimators=[]\nestimators.append(('rfc',gridsearch_rfc.best_estimator_))\nestimators.append(('svc',gridsearch_svc.best_estimator_))\nestimators.append(('KNN',gridsearch_KNN.best_estimator_))\nestimators.append(('lgr',gridsearch_lgr.best_estimator_))\nestimators.append(('extra',gridsearch_extratree.best_estimator_))\nestimators.append(('gbc',gridsearch_gbc.best_estimator_))\nvc=VotingClassifier(voting='hard',estimators=estimators)\nvc.fit(X,Y)\nvc.score(X,Y)","0585257a":"##\u56e0\u4e3a\u4e4b\u524ddrop\u4e86test\u91cc\u7684passengerid\uff0c\u8fd9\u91cc\u91cd\u65b0\u8bfb\u4e00\u4e0b\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\nids = test[\"PassengerId\"]\nprediction=vc.predict(final_test).astype(int)\nsubmission = pd.DataFrame( {'PassengerId': ids, 'Survived': prediction})\nsubmission.to_csv('submission.csv', index=False)","c7a92c2b":"# test=pd.read_csv('..\/input\/titanic\/test.csv')\n# ids = test[\"PassengerId\"]\n# xgb_best = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n#               colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n#               importance_type='gain', interaction_constraints='',\n#               learning_rate=0.1, max_delta_step=0, max_depth=5,\n#               min_child_weight=1, monotone_constraints='()',\n#               n_estimators=100, n_jobs=4, num_parallel_tree=1, random_state=0,\n#               reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n#               tree_method='exact', validate_parameters=1, verbosity=0)\n# xgb_best.fit(X,Y)\n# prediction=xgb_best.predict(final_test).astype(int)\n# submission = pd.DataFrame( {'PassengerId': ids, 'Survived': prediction})\n# submission.to_csv('submission.csv', index=False)","4a5f01b6":"#gridsearch_xgb.best_estimator_","ac4df16d":"\u518d\u5bf9\u6d4b\u8bd5\u96c6\u505a\u540c\u6837\u5904\u7406","f029a674":"\u63a5\u4e0b\u6765\u586b\u8865age\u7684\u7f3a\u5931\u503c","35d2f807":"### 2.2.5 Ticket","b49714b4":"# 1.\u5bfc\u5165\u76f8\u5173\u5e93\u548c\u6570\u636e\uff0c\u7b80\u5355\u67e5\u770b","387db08a":"\u53d1\u73b0\u6574\u4f53length\u5c0f\u4e8e\u4eba\u6570\uff0c\u8bf4\u660e\u6709\u5171\u4eab\u7968\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u770b\u770b\u60c5\u51b5","fac1a2ae":"# 3. \u8fd0\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5","a5113412":"\u4e0b\u9762\u518d\u5bf9age\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u7edf\u8ba1\uff0c\u5206\u4e00\u4e0b\u7bb1","830777ea":"### 2.1.2\u975e\u6570\u503c\u578b\u7279\u5f81\n\u5176\u4e2dCabin\u7f3a\u5931\u503c\u592a\u591a\uff0cTicket\u9700\u8981\u7279\u5f81\u63d0\u53d6\uff0c\u6682\u65f6\u4e0d\u5206\u6790","8a1e763e":"\u53d1\u73b0S\u5904\u767b\u9646\u4eba\u6570\u6700\u591a\uff0c\u5b58\u6d3b\u7387\u4e5f\u8f83\u4f4e\uff0c\u4e0e\u4e4b\u76f8\u5bf9\u5e94\u7684\u662fC\u5904\u767b\u9646\u4eba\u6570\u8f83\u5c11\uff0c\u4f46\u5b58\u6d3b\u4eba\u6570\u8f83\u591a\uff0c\u76f4\u89c2\u53ef\u4ee5\u5224\u65ad\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u7279\u5f81","230f5ab5":"\u53ef\u4ee5\u5e74\u9f84\u548ctitle\u8fd8\u662f\u6709\u4e00\u5b9a\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7title\u6765\u586b\u8865age\u7684\u7a7a\u7f3a\u503c\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53d1\u73b0Master\u5e74\u9f84\u90fd\u8f83\u4f4e\uff0c\u800cDr.\u5f80\u53f3\u7684\u79f0\u547c\u5e74\u9f84\u90fd\u8f83\u9ad8\uff0c\u57fa\u4e8e\u6b64\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u65b0\u7279\u5f81ischildren","645058fd":"\u5148\u89c2\u5bdf\u4e00\u4e0bCabin\u91cc\u90fd\u6709\u4e9b\u5565","ccfdbb9a":"\u53ef\u4ee5\u53d1\u73b0\u5728survived\u4eba\u7fa4\u4e2d\u5b69\u7ae5\u5360\u6bd4\u6bd4total\u4e2d\u8981\u9ad8\uff0c\u800c\u4e2d\u5e74\u4eba\u660e\u663e\u8981\u4f4e\n\n\u6240\u4ee5\u6211\u4eec\u5927\u81f4\u6309\u7167\u56fe\u5f62\u5206\u4e00\u4e0b\u7b52","f5805cd7":"\u53d1\u73b0\u5927\u90e8\u5206\u6709\u76f8\u540c\u7968\u7684\u4eba\u5b58\u6d3b\u60c5\u51b5\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u57fa\u4e8e\u6b64\u6784\u9020\u4e00\u4e2asingle\u548c\u540c\u7968\u4eba\u6570\u7684\u7279\u5f81","0394b66c":"#### 2.1.2.1 \u6027\u522b","f94ffa36":"#### 2.1.2.2 Embarked","d9322e54":"### 2.1.1 \u6570\u503c\u578b\u7279\u5f81\u7684\u76f8\u5173\u7cfb\u6570","5bb21be5":"### 2.2.4 Cabin\nCabin\u662f\u7f3a\u5931\u503c\u6700\u4e25\u91cd\u7684\u7279\u5f81","99ed1130":"## 2.2\u7f3a\u5931\u503c\uff0c\u5f02\u5e38\u503c\u5904\u7406\n\u8fd9\u4e00\u90e8\u5206\u65e2\u8981\u5904\u7406\u8bad\u7ec3\u96c6\uff0c\u4f7f\u5f97\u6a21\u578b\u66f4\u52a0\u51c6\u786e\uff0c\u4e5f\u8981\u5904\u7406\u6d4b\u8bd5\u96c6\uff0c\u4fdd\u8bc1\u8bad\u7ec3\u5b8c\u7684\u6a21\u578b\u80fd\u591f\u6b63\u5e38\u5e94\u7528","19645f5a":"\u663e\u7136\uff0c\u6027\u522b\u662f\u4e00\u4e2a\u6709\u9884\u6d4b\u80fd\u529b\u7684\u7279\u5f81","ff72ff8a":"### 2.2.1 Embarked\nembarked\u5728\u8bad\u7ec3\u96c6\u6709\u4e24\u4e2a\u7f3a\u5931\u503c\uff0c\u8003\u8651\u5230\u7f3a\u5931\u503c\u5360\u6bd4\u8f83\u5c11(\u5c0f\u4e8e1%)\uff0c\u6211\u4eec\u76f4\u63a5\u820d\u53bb","9adc1423":"# 2.\u7279\u5f81\u5de5\u7a0b","952197b6":"## 3.1\u5f97\u5230\u6700\u540e\u7684\u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6","471b6d36":"\u8fd9\u91cc\u53d1\u73b0\u4e4b\u524d\u5077\u7684\u61d2\u5168\u90fd\u5f97\u5f04\u56de\u6765 \u65e0\u8bed\n\n\u5fc5\u987b\u5f97\u8bad\u7ec3\u6d4b\u8bd5\u96c6\u62fc\u5230\u4e00\u8d77\u64cd\u4f5c\uff0c\u4e0d\u7136\u8f6c\u6362\u54d1\u53d8\u91cf\u65f6\u5019\u4f1a\u5b58\u5728ticket\u6709\u7684\u4e0d\u4e00\u6837\u7684\u95ee\u9898","00eb6aaf":"\u6027\u522b\u7531\u4e8e\u5df2\u7ecf\u6709\u5355\u72ec\u7684\u7279\u5f81\u6807\u8bc6\uff0c\u5728\u8fd9\u91cc\u65e0\u9700\u7528name\u9884\u6d4b\n\n\u6211\u4eec\u5728\u6b64\u6ce8\u610f\u5173\u6ce8\uff1a\n+ \u5176\u4e0e\u5e74\u9f84\u7684\u5173\u7cfb\u2014\u2014\u7528\u4e8e\u586b\u8865age\u7684\u7f3a\u5931\u503c\n+ \u5176title\u6240\u6697\u542b\u7684\u793e\u4f1a\u5730\u4f4d\u4e0e\u751f\u5b58\u7387\u7684\u5173\u7cfb\u2014\u2014\u7528\u4e8e\u6784\u5efa\u65b0\u7279\u5f81","1d5706c0":"### 2.2.2 Fare\n\ntrain\u4e2dfare\u7684\u5e73\u5747\u503c\u4e3a32\uff0c\u800c\u6700\u5927\u503c\u5374\u6709500\uff0c\u663e\u7136\u6709\u4e00\u4e9b\u79bb\u7fa4\u503c\u9700\u8981\u5904\u7406\n\n\u800ctest\u91cc\u7684fare\u6709\u4e00\u4e2a\u7a7a\u503c\uff0c\u6211\u4eec\u6765\u8fdb\u884c\u586b\u8865","bcf96e83":"## 2.1 \u5148\u6574\u4f53\u770b\u4e00\u770b\u5404\u53d8\u91cf\u4e0eSurvive\u4e4b\u95f4\u7684\u5173\u7cfb","7ccf4b86":"## 3.2\u8c03\u5305","2fea295c":"test\u91ccCabin\uff0cage\uff0cfare\u9700\u8981\u586b\u5145,","13970054":"\u53d1\u73b0\u79cd\u7c7b\u8f83\u591a\uff0c\u4e14\u4e0d\u6e05\u695a\u542b\u4e49\u3002\n\n\u540c\u65f6\u8003\u8651\u9053\u5927\u91cf\u586b\u5145\u7a7a\u7f3a\u503c\u518d\u5c06\u5176\u4f5c\u4e3a\u7279\u5f81\u8fdb\u884c\u9884\u6d4b\u5e76\u4e0d\u597d\uff0c\u6240\u4ee5\u6b64\u5904\u8003\u8651\u5c06\u6ca1\u6709Cabin\u5f53\u4f5c\u4e00\u79cd\u7279\u5f81\u5904\u7406","dbcc310f":"### 2.2.3 Age\n\u5bf9Age\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9Name\u7684\u5206\u6790\u6765\u586b\u8865\u7a7a\u7f3a\u503c"}}