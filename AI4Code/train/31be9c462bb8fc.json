{"cell_type":{"030d3775":"code","be76a25c":"code","8079b38c":"code","a03ec5f5":"code","8cd4e495":"code","1a00ec33":"code","76802431":"code","740440dd":"code","005070da":"code","e2a009f2":"code","dbf9471d":"code","db72e8b3":"code","b5c86edf":"code","2ee35797":"code","25e8672c":"code","1068c484":"code","469089e2":"code","78a8d7dc":"code","ec2f68d5":"code","2428aa06":"code","7ea36843":"code","d8716fc4":"code","986b5c3f":"code","41a91142":"code","44e20528":"code","bcd2de85":"code","655047df":"code","db609bdd":"code","f3844355":"code","14f3cc29":"code","152554da":"code","f8d1697a":"markdown","e5d9974b":"markdown","a37c1dc2":"markdown","d469c971":"markdown","12432948":"markdown","760f82f4":"markdown","cafeb840":"markdown","5d22967f":"markdown","26b0b92b":"markdown","9fed0dbe":"markdown","fb96cd72":"markdown","0d64d003":"markdown","936d07f1":"markdown","a025ee8c":"markdown","0788cbe4":"markdown","5dc1862c":"markdown","c60cd314":"markdown","4a475878":"markdown","4ebefdf2":"markdown","2e7a50fa":"markdown","3043bdac":"markdown","7e048a16":"markdown","45767640":"markdown","07381846":"markdown","0110bc60":"markdown","b7e632b3":"markdown","b887c6fd":"markdown","8424f683":"markdown","ddf983c5":"markdown","a5a06223":"markdown"},"source":{"030d3775":"import time\nimport gc\nimport pickle\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras.layers import Input, Embedding, Reshape, Dot, Concatenate, Dense, Dropout\nfrom tensorflow.keras.models import Model\nimport pickle\nfrom tqdm import tqdm\nimport transformers","be76a25c":"# remove unwanted warnings\nimport warnings\nwarnings.filterwarnings('ignore')","8079b38c":"df_train=pd.read_pickle(\"..\/input\/10-netflix-movie-recommender-part-1\/df_train.pkl\")\ndf_val=pd.read_pickle(\"..\/input\/10-netflix-movie-recommender-part-1\/df_val.pkl\")\ndf_test=pd.read_pickle(\"..\/input\/10-netflix-movie-recommender-part-1\/df_test.pkl\")","a03ec5f5":"df_metadata=(pd.read_csv('..\/input\/netflix-movie-metadata\/movies_metadata.csv', \n                              low_memory=False))\n\ndf_movie_titles = pd.read_csv('..\/input\/netflix-prize-data\/movie_titles.csv', \n                           encoding = 'ISO-8859-1', \n                           header = None, \n                           names = ['Id', 'Year', 'Name']).set_index('Id')","8cd4e495":"df_movie_titles.dropna(how='any', inplace=True, axis=0)","1a00ec33":"df_movie_titles['Name']=df_movie_titles['Name'].map(lambda x: x.lower())","76802431":"df_movie_titles['Year']=df_movie_titles['Year'].map(lambda x: int(x))","740440dd":"df_metadata=df_metadata[['original_title','release_date','overview']]","005070da":"df_metadata.dropna(how='any', inplace=True, axis=0)","e2a009f2":"df_metadata['release_date']=df_metadata['release_date'].map(lambda x : int(x[:4]))","dbf9471d":"df_metadata['original_title']=df_metadata['original_title'].map(lambda x : x.lower())","db72e8b3":"df_metadata.isna().any()","b5c86edf":"df_metadata.head(1)","2ee35797":"df_movie_titles['overview']=float('nan')","25e8672c":"df_movie_titles.head(1)","1068c484":"for i in tqdm(range(df_movie_titles.shape[0])):\n    year=df_movie_titles.iloc[i, 0]\n    name=df_movie_titles.iloc[i, 1]\n    try:\n        overview=df_metadata.loc[(df_metadata['release_date']==year) & (df_metadata['original_title']==name)].iloc[0,2]\n        df_movie_titles.iloc[i, 2]=overview\n    except:\n        continue\n\ndf_movie_titles_filtered=df_movie_titles.dropna()","469089e2":"del df_metadata\ndel df_movie_titles","78a8d7dc":"df_movie_titles_filtered.shape","ec2f68d5":"df_movie_titles_filtered.head(1)","2428aa06":"overview_dic={}\nfor movie in list(df_movie_titles_filtered.index):\n    overview_dic[movie]=df_movie_titles_filtered.loc[movie, 'overview']","7ea36843":"df_train_filtered=df_train[df_train['Movie'].isin(list(overview_dic.keys()))]","d8716fc4":"df_train_filtered.shape[0]\/df_train.shape[0]","986b5c3f":"df_test_filtered=df_test[df_test['Movie'].isin(list(overview_dic.keys()))]\ndf_val_filtered=df_val[df_val['Movie'].isin(list(overview_dic.keys()))]","41a91142":"df_test_filtered.shape[0]\/df_test.shape[0], df_val_filtered.shape[0]\/df_val.shape[0]","44e20528":"del df_train, df_test, df_val\ngc.collect()","bcd2de85":"tokenizer = transformers.DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\n\ninput_id_dic={}\n\nfor key in overview_dic:\n    temp=tokenizer(overview_dic[key])\n    input_id_dic[key]=temp['input_ids']","655047df":"len(input_id_dic[list(input_id_dic.keys())[0]]), type(input_id_dic[list(input_id_dic.keys())[0]])","db609bdd":"temp=[]\nfor key in input_id_dic:\n    temp.append(len(input_id_dic[key]))","f3844355":"max(temp)","14f3cc29":"pd.Series(temp).hist()","152554da":"df_movie_titles_filtered.to_pickle('df_movie_titles_filtered.pkl')\ndf_train_filtered.to_pickle('df_train_filtered.pkl')\ndf_val_filtered.to_pickle('df_val_filtered.pkl')\ndf_test_filtered.to_pickle('df_test_filtered.pkl')","f8d1697a":"## data wrangling","e5d9974b":"### df_movie_titles data wrangling","a37c1dc2":"### later we need to merge df_metadata and df_movie_titles by movie name","d469c971":"# We're far from finished yet. The rest of the work will be done in Part 3.1.","12432948":"**movie title changed to lower case**","760f82f4":"### merge df_metadata and df_movie_titles","cafeb840":"## load output of \"Netflix Movie Recommender Part 1\" output","5d22967f":"**select columns in metadata**","26b0b92b":"**maximum token size is 274**","9fed0dbe":"## import dependencies","fb96cd72":"### EDA: find out max token size","0d64d003":"**change year to integers**","936d07f1":"**drop rows with missing values**","a025ee8c":"**release date to a four digit integer**","0788cbe4":"**change movie titles to lower case**","5dc1862c":"### load dataframes","c60cd314":"**some movies in df_movie_titles are present in df_metadata, we find those movies and add their overviews to df_movie_titles, then delete rows with missing overviews in df_movie_titles**","4a475878":"# In Part 3 of this project, we build a content-based movie recommender. For each movie, input its overview (a short description of the movie) to distilled BERT for document embedding (a 768 dimensional vector). Learn a user-embedding whose dot product with the document embedding yields the predicted movie rating.","4ebefdf2":"**distribution of token sizes**","2e7a50fa":"**only 6551 out of 17763 movies are left in df_movie_titles. Notice that some of the movies among these 6551 movies may receive less than 1000 ratings so they will not be included in df_train_filtered, df_val_filtered and df_test_filtered.**","3043bdac":"## save data","7e048a16":"**similar percentage for the cross validation and test set**","45767640":"**drop missing values**","07381846":"**overview_token_dic--->{ movie_id : {input_ids: ids_tokens, attention_mask: mask_tokens} }**","0110bc60":"**79% of the data in df_train are kept**","b7e632b3":"**temp stores sizes of tokens**","b887c6fd":"**overview_dic--->{ movie_id (int) : overview (str) }**","8424f683":"**filter df_train**","ddf983c5":"**add a new column called 'overview' to df_movie_titles**","a5a06223":"### df_metadata data wrangling"}}