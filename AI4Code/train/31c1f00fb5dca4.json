{"cell_type":{"a80d2e65":"code","679430f7":"code","df554a42":"code","7ef779b8":"code","993f3979":"code","0f83495f":"code","72b4f73e":"code","2435d384":"code","076272d1":"code","35a2d5e9":"code","87ad8f6f":"code","051caef9":"code","c5b094cc":"code","4978d9e9":"code","e357d437":"code","59a491ca":"code","7300b83a":"code","6ddec7a8":"code","9a30b2bd":"code","e770701d":"code","e3ab51ec":"code","01106651":"code","e64f3865":"code","2223d589":"code","d07aeaf1":"code","426d1bae":"code","70d24e6e":"markdown","6c2f9e61":"markdown","7c74f0f1":"markdown","c99b2d9b":"markdown","4be53c4a":"markdown","381e272a":"markdown","2b577d28":"markdown","80420707":"markdown","be25371e":"markdown","44c11f9b":"markdown","bc9e841d":"markdown","00440046":"markdown","8fd0786d":"markdown","c116caef":"markdown","c1083fce":"markdown","0e24c7aa":"markdown","6652b3cb":"markdown","937d874e":"markdown","0ed78f23":"markdown","92c8be18":"markdown","462a4e49":"markdown","95f4399a":"markdown","7022ae6d":"markdown","d65f8c79":"markdown","7c345632":"markdown","456ce488":"markdown","81e185bd":"markdown","5831db1b":"markdown"},"source":{"a80d2e65":"import numpy as np\nimport h5py\nimport matplotlib.pyplot as plt\nfrom testcases_v4 import *\nfrom dnn_utils_v2 import sigmoid, sigmoid_backward, relu_backward, relu\nfrom IPython.display import Image\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots\nplt.rcParams['image.interpolation'] = 'nearest'\nplt.rcParams['image.cmap'] = 'gray'\n\n%load_ext autoreload\n%autoreload 2\nnp.random.seed(1)\n","679430f7":"Image(url='https:\/\/raw.githubusercontent.com\/enzymesnaer\/images\/master\/final%20outline.png') ","df554a42":"def initialize_parameters(n_x, n_h, n_y):\n    \"\"\"\n    Argument:\n    n_x -- size of the input layer\n    n_h -- size of the hidden layer\n    n_y -- size of the output layer\n    \n    Returns:\n    parameters -- python dictionary containing your parameters:\n                    W1 -- weight matrix of shape (n_h, n_x)\n                    b1 -- bias vector of shape (n_h, 1)\n                    W2 -- weight matrix of shape (n_y, n_h)\n                    b2 -- bias vector of shape (n_y, 1)\n    \"\"\"\n    np.random.seed(1)\n    W1 = np.random.randn(n_h, n_x) * 0.01\n    b1 = np.zeros((n_h, 1))\n    W2 = np.random.randn(n_y, n_h) * 0.01\n    b2 = np.zeros((n_y, 1))\n    \n    assert(W1.shape == (n_h, n_x))\n    assert(b1.shape == (n_h, 1))\n    assert(W2.shape == (n_y, n_h))\n    assert(b2.shape == (n_y, 1))\n    \n    parameters = {\n        \"W1\": W1,\n        \"b1\": b1,\n        \"W2\": W2,\n        \"b2\": b2\n    }\n    return parameters\n\n    ","7ef779b8":"parameters = initialize_parameters(3,2,1)\nprint(\"W1 = \\n\" + str(parameters[\"W1\"]))\nprint(\"b1 = \\n\" + str(parameters[\"b1\"]))\nprint(\"W2 = \\n\" + str(parameters[\"W2\"]))\nprint(\"b2 = \\n\" + str(parameters[\"b2\"]))","993f3979":"def initialize_parameters_deep(layer_dims):\n    \"\"\"\n    Arguments:\n    layer_dims -- python array (list) containing the dimensions of each layer in our network\n    \n    Returns:\n    parameters -- python dictionary containing your parameters \"W1\", \"b1\", ..., \"WL\", \"bL\":\n                    Wl -- weight matrix of shape (layer_dims[l], layer_dims[l-1])\n                    bl -- bias vector of shape (layer_dims[l], 1)\n    \"\"\"\n    \n    np.random.seed(3)\n    parameters = {}\n    L = len(layer_dims)            # number of layers in the network\n\n    for l in range(1, L):\n        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l - 1]) * 0.01\n        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))\n        \n        assert(parameters['W' + str(l)].shape == (layer_dims[l], layer_dims[l-1]))\n        assert(parameters['b' + str(l)].shape == (layer_dims[l], 1))\n\n        \n    return parameters","0f83495f":"parameters = initialize_parameters_deep([5,4,3])\nprint(\"W1 = \\n\" + str(parameters[\"W1\"]))\nprint(\"b1 = \\n\" + str(parameters[\"b1\"]))\nprint(\"W2 = \\n\" + str(parameters[\"W2\"]))\nprint(\"b2 = \\n\" + str(parameters[\"b2\"]))","72b4f73e":"def linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n\n    Arguments:\n    A -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n\n    Returns:\n    Z -- the input of the activation function, also called pre-activation parameter \n    cache -- a python dictionary containing \"A\", \"W\" and \"b\" ; stored for computing the backward pass efficiently\n    \"\"\"\n    \n    Z = np.dot(W, A) + b\n    \n    assert(Z.shape == (W.shape[0], A.shape[1]))\n    cache = (A, W, b)\n    return Z, cache","2435d384":"A, W, b = linear_forward_test_case()\nZ, linear_cache = linear_forward(A, W, b)\nprint(\"Z = \" + str(Z))","076272d1":"def linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a python dictionary containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    if activation == \"sigmoid\":\n        # Inputs: \"A_prev, W, b\"\n        # Outputs: \"A, activation_cache\"\n        \n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n        \n    elif activation == \"relu\":\n        # Inputs: \"A_prev, W, b\". \n        # Outputs: \"A, activation_cache\".\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n        \n    assert (A.shape == (W.shape[0], A_prev.shape[1]))\n    cache = (linear_cache, activation_cache)\n    \n    return A, cache","35a2d5e9":"A_prev, W, b = linear_activation_forward_test_case()\n\nA, linear_activation_cache = linear_activation_forward(A_prev, W, b, activation = \"sigmoid\")\nprint(\"With sigmoid: A = \" + str(A))\n\nA, linear_activation_cache = linear_activation_forward(A_prev, W, b, activation = \"relu\")\nprint(\"With ReLU: A = \" + str(A))","87ad8f6f":"Image(url='https:\/\/raw.githubusercontent.com\/enzymesnaer\/images\/master\/model_architecture.png')","051caef9":"def L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \n    Arguments:\n    X -- data, numpy array of shape (input size, number of examples)\n    parameters -- output of initialize_parameters_deep()\n    \n    Returns:\n    AL -- last post-activation value\n    caches -- list of caches containing:\n                every cache of linear_activation_forward() (there are L-1 of them, indexed from 0 to L-1)\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) \/\/ 2 # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters[\"W\"+str(l)],\n                                            parameters[\"b\"+str(l)], \"relu\")\n        caches.append(cache)\n        \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters[\"W\" + str(L)], parameters[\"b\" + str(L)], \"sigmoid\")\n    caches.append(cache)\n    \n    assert(AL.shape == (1,X.shape[1]))\n    return AL, caches","c5b094cc":"\nX, parameters = L_model_forward_test_case_2hidden()\nAL, caches = L_model_forward(X, parameters)\nprint(\"AL = \" + str(AL))\nprint(\"Length of caches list = \" + str(len(caches)))","4978d9e9":"def compute_cost(AL, Y):\n    \"\"\"\n    Implement the cost function defined by equation (7).\n\n    Arguments:\n    AL -- probability vector corresponding to your label predictions, shape (1, number of examples)\n    Y -- true \"label\" vector (for example: containing 0 if non-cat, 1 if cat), shape (1, number of examples)\n\n    Returns:\n    cost -- cross-entropy cost\n    \"\"\"\n    \n    m = Y.shape[1]\n    # Compute loss from aL and y.\n    cost = -np.sum(np.multiply(Y, np.log(AL)) + np.multiply(1 - Y, np.log(1 - AL))) \/ m\n    cost = np.squeeze(cost)      # To make sure your cost's shape is what we expect (e.g. this turns [[17]] into 17).\n    assert(cost.shape == ())\n    return cost","e357d437":"Y, AL = compute_cost_test_case()\n\nprint(\"cost = \" + str(compute_cost(AL, Y)))\n","59a491ca":"Image(url='https:\/\/raw.githubusercontent.com\/enzymesnaer\/images\/master\/backprop.png')","7300b83a":"Image(url='https:\/\/raw.githubusercontent.com\/enzymesnaer\/images\/master\/linearback.png')","6ddec7a8":"def linear_backward(dZ, cache):\n    \"\"\"\n    Implement the linear portion of backward propagation for a single layer (layer l)\n\n    Arguments:\n    dZ -- Gradient of the cost with respect to the linear output (of current layer l)\n    cache -- tuple of values (A_prev, W, b) coming from the forward propagation in the current layer\n\n    Returns:\n    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\n    db -- Gradient of the cost with respect to b (current layer l), same shape as b\n    \"\"\"\n    A_prev, W, b = cache\n    m = A_prev.shape[1]\n    \n    dW = np.dot(dZ, A_prev.T) \/ m\n    db = np.sum(dZ, axis = 1, keepdims = True) \/ m\n    dA_prev = np.dot(W.T, dZ)\n    \n    assert (dA_prev.shape == A_prev.shape)\n    assert (dW.shape == W.shape)\n    assert (db.shape == b.shape)\n    \n    return dA_prev, dW, db","9a30b2bd":"# Set up some test inputs\ndZ, linear_cache = linear_backward_test_case()\n\ndA_prev, dW, db = linear_backward(dZ, linear_cache)\nprint (\"dA_prev = \\n\"+ str(dA_prev))\nprint (\"dW = \\n\" + str(dW))\nprint (\"db = \\n\" + str(db))","e770701d":"def linear_activation_backward(dA, cache, activation):\n    \"\"\"\n    Implement the backward propagation for the LINEAR->ACTIVATION layer.\n    \n    Arguments:\n    dA -- post-activation gradient for current layer l \n    cache -- tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n    \n    Returns:\n    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\n    db -- Gradient of the cost with respect to b (current layer l), same shape as b\n    \"\"\"\n    linear_cache, activation_cache = cache\n    \n    if activation == \"relu\":\n        dZ = relu_backward(dA, activation_cache)\n        dA_prev, dW, db = linear_backward(dZ, linear_cache)\n        \n    elif activation == \"sigmoid\":\n        dZ = sigmoid_backward(dA, activation_cache)\n        dA_prev, dW, db = linear_backward(dZ, linear_cache)\n    \n    return dA_prev, dW, db","e3ab51ec":"dAL, linear_activation_cache = linear_activation_backward_test_case()\n\ndA_prev, dW, db = linear_activation_backward(dAL, linear_activation_cache, activation = \"sigmoid\")\nprint (\"sigmoid:\")\nprint (\"dA_prev = \\n\"+ str(dA_prev))\nprint (\"dW = \" + str(dW))\nprint (\"db = \" + str(db) + \"\\n\")\n\ndA_prev, dW, db = linear_activation_backward(dAL, linear_activation_cache, activation = \"relu\")\nprint (\"relu:\")\nprint (\"dA_prev = \\n\"+ str(dA_prev))\nprint (\"dW = \" + str(dW))\nprint (\"db = \" + str(db))","01106651":"Image(url='https:\/\/raw.githubusercontent.com\/enzymesnaer\/images\/master\/mn_backward.png')","e64f3865":"def L_model_backward(AL, Y, caches):\n    \"\"\"\n    Implement the backward propagation for the [LINEAR->RELU] * (L-1) -> LINEAR -> SIGMOID group\n    \n    Arguments:\n    AL -- probability vector, output of the forward propagation (L_model_forward())\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat)\n    caches -- list of caches containing:\n                every cache of linear_activation_forward() with \"relu\" (it's caches[l], for l in range(L-1) i.e l = 0...L-2)\n                the cache of linear_activation_forward() with \"sigmoid\" (it's caches[L-1])\n    \n    Returns:\n    grads -- A dictionary with the gradients\n             grads[\"dA\" + str(l)] = ... \n             grads[\"dW\" + str(l)] = ...\n             grads[\"db\" + str(l)] = ... \n    \"\"\"\n    grads = {}\n    L = len(caches) # the number of layers\n    m = AL.shape[1]\n    Y = Y.reshape(AL.shape) # after this line, Y is the same shape as AL\n    \n    # Initializing the backpropagation\n    dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))\n    \n    # Lth layer (SIGMOID -> LINEAR) gradients. Inputs: \"dAL, current_cache\". Outputs: \"grads[\"dAL-1\"], grads[\"dWL\"], grads[\"dbL\"]\n    current_cache = caches[-1]\n    grads[\"dA\" + str(L-1)], grads[\"dW\" + str(L)], grads[\"db\" + str(L)] = linear_activation_backward(dAL, current_cache, \"sigmoid\")\n    \n    # Loop from l=L-2 to l=0\n    for l in reversed(range(L-1)):\n        # lth layer: (RELU -> LINEAR) gradients.\n        # Inputs: \"grads[\"dA\" + str(l + 1)], current_cache\". Outputs: \"grads[\"dA\" + str(l)] , grads[\"dW\" + str(l + 1)] , grads[\"db\" + str(l + 1)] \n        current_cache = caches[l]\n        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[\"dA\" + str(l + 1)], current_cache, \"relu\")\n        grads[\"dA\" + str(l)] = dA_prev_temp\n        grads[\"dW\" + str(l + 1)] = dW_temp\n        grads[\"db\" + str(l + 1)] = db_temp\n\n    return grads","2223d589":"AL, Y_assess, caches = L_model_backward_test_case()\ngrads = L_model_backward(AL, Y_assess, caches)\nprint_grads(grads)","d07aeaf1":"def update_parameters(parameters, grads, learning_rate):\n    \"\"\"\n    Update parameters using gradient descent\n    \n    Arguments:\n    parameters -- python dictionary containing your parameters \n    grads -- python dictionary containing your gradients, output of L_model_backward\n    \n    Returns:\n    parameters -- python dictionary containing your updated parameters \n                  parameters[\"W\" + str(l)] = ... \n                  parameters[\"b\" + str(l)] = ...\n    \"\"\"\n    \n    L = len(parameters) \/\/ 2 # number of layers in the neural network\n\n    # Update rule for each parameter. Use a for loop.\n    for l in range(L):\n        parameters[\"W\" + str(l+1)] = parameters[\"W\" + str(l+1)] - learning_rate * grads[\"dW\" + str(l+1)]\n        parameters[\"b\" + str(l+1)] = parameters[\"b\" + str(l+1)] - learning_rate * grads[\"db\" + str(l+1)]\n    return parameters","426d1bae":"parameters, grads = update_parameters_test_case()\nparameters = update_parameters(parameters, grads, 0.1)\n\nprint (\"W1 = \\n\"+ str(parameters[\"W1\"]))\nprint (\"b1 = \\n\"+ str(parameters[\"b1\"]))\nprint (\"W2 = \\n\"+ str(parameters[\"W2\"]))\nprint (\"b2 = \\n\"+ str(parameters[\"b2\"]))","70d24e6e":"## Backward propagation module<br>\nJust like with forward propagation, we will implement helper functions for backpropagation. Remember that back propagation is used to calculate the gradient of the loss function with respect to the parameters.","6c2f9e61":"## L-Model Backward\nNow we will implement the backward function for the whole network. Recall that when we implemented the L_model_forward function, at each iteration, we stored a cache which contains (X,W,b, and z). In the back propagation module, we will use those variables to compute the gradients. Therefore, in the L_model_backward function, we will iterate through all the hidden layers backward, starting from layer $L$. On each step, we will use the cached values for layer $l$ to backpropagate through layer $l$. Figure below shows the backward pass.","7c74f0f1":"## Forward propagation module<br>\n### Linear Forward","c99b2d9b":"Compute the cross-entropy cost $J$, using the following formula: $$-\\frac{1}{m} \\sum\\limits_{i = 1}^{m} (y^{(i)}\\log\\left(a^{[L] (i)}\\right) + (1-y^{(i)})\\log\\left(1- a^{[L](i)}\\right)) \\tag{7}$$","4be53c4a":"Now, similar to forward propagation, we are going to build the backward propagation in three steps:\n\n- LINEAR backward\n- LINEAR -> ACTIVATION backward where ACTIVATION computes the derivative of either the ReLU or sigmoid activation\n- [LINEAR -> RELU] $\\times$ (L-1) -> LINEAR -> SIGMOID backward (whole model)","381e272a":"## Implementing the forward propagation of the above model\nInstruction: In the code below, the variable AL will denote $A^{[L]} = \\sigma(Z^{[L]}) = \\sigma(W^{[L]} A^{[L-1]} + b^{[L]})$. (This is sometimes also called Yhat, i.e., this is $\\hat{Y}$.)\n<br>\n- Use the functions we had previously written\n- Use a for loop to replicate [LINEAR->RELU] (L-1) times\n- Don't forget to keep track of the caches in the \"caches\" list. To add a new value c to a list, you can use list.append(c).","2b577d28":"**Instructions**:\n<br>\n> - The model's structure is [LINEAR -> RELU] $ \\times$ (L-1) -> LINEAR -> SIGMOID. I.e., it has $L-1$ layers using a ReLU activation function followed by an output layer with a sigmoid activation function.\n> - Use random initialization for the weight matrices. Use np.random.randn(shape) * 0.01.\n> - Use zeros initialization for the biases. Use np.zeros(shape).\n> - We will store $n^{[l]}$, the number of units in different layers, in a variable layer_dims. For example, the layer_dims for the \"Planar Data classification model\" from last week would have been [2,4,1]: There were two inputs, one hidden layer with 4 hidden units, and an output layer with 1 output unit. Thus means W1's shape was (4,2), b1 was (4,1), W2 was (1,4) and b2 was (1,1). Now you will generalize this to $L$ layers!\n> - Here is the implementation for $L=1$ (one layer neural network). It should inspire us to implement the general case (L-layer neural network).","80420707":"### Implementing initialization for an L-layer Neural Network","be25371e":"## Update Parameters\nWe will now update the parameters of the model, using gradient descent:\n\n$$ W^{[l]} = W^{[l]} - \\alpha \\text{ } dW^{[l]} \\tag{16}$$$$ b^{[l]} = b^{[l]} - \\alpha \\text{ } db^{[l]} \\tag{17}$$\nwhere $\\alpha$ is the learning rate. After computing the updated parameters, store them in the parameters dictionary.\n\nImplementing update_parameters() to update our parameters using gradient descent.\n\nInstructions: Update parameters using gradient descent on every $W^{[l]}$ and $b^{[l]}$ for $l = 1, 2, ..., L$.","44c11f9b":"## Cost function\nWe will implement forward and backward propagation. We need to compute the cost, to check if your model is actually learning.","bc9e841d":"## L-Layer Model","00440046":"### Linear-Activation Forward\n\nHere we will use two activation functions:\n\n- **Sigmoid**: $\\sigma(Z) = \\sigma(W A + b) = \\frac{1}{ 1 + e^{-(W A + b)}}$. We have the `sigmoid` function. This function returns **two** items: the activation value \"`a`\" and a \"`cache`\" that contains \"`Z`\" (it's what we will feed in to the corresponding backward function). To use it you could just call: \n``` python\nA, activation_cache = sigmoid(Z)\n```\n\n- **ReLU**: The mathematical formula for ReLu is $A = RELU(Z) = max(0, Z)$. We have the `relu` function. This function returns **two** items: the activation value \"`A`\" and a \"`cache`\" that contains \"`Z`\" (it's what we will feed in to the corresponding backward function). To use it you could just call:\n``` python\nA, activation_cache = relu(Z)\n```","8fd0786d":"** Initializing backpropagation**:\nTo backpropagate through this network, we know that the output is, \n$A^{[L]} = \\sigma(Z^{[L]})$. Our code thus needs to compute `dAL` $= \\frac{\\partial \\mathcal{L}}{\\partial A^{[L]}}$.\nTo do so, use this formula (derived using calculus which you don't need in-depth knowledge of):\n```python\ndAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL)) # derivative of cost with respect to AL\n```\n\nWe can then use this post-activation gradient `dAL` to keep going backward. As seen in Figure, we can now feed in `dAL` into the LINEAR->SIGMOID backward function we implemented (which will use the cached values stored by the L_model_forward function). After that, we will have to use a `for` loop to iterate through all the other layers using the LINEAR->RELU backward function. We should store each dA, dW, and db in the grads dictionary. To do so, use this formula : \n\n$$grads[\"dW\" + str(l)] = dW^{[l]}\\tag{15} $$\n\nFor example, for $l=3$ this would store $dW^{[l]}$ in `grads[\"dW3\"]`.\n\nImplementing backpropagation for the *[LINEAR->RELU] $\\times$ (L-1) -> LINEAR -> SIGMOID* model.","c116caef":"Now that we have initialized our parameters, we would do the forward propagation module. We will start by implementing some basic functions that we will use later when implementing the model. We will complete three functions in this order:\n\n- LINEAR\n- LINEAR -> ACTIVATION where ACTIVATION will be either ReLU or Sigmoid.\n- [LINEAR -> RELU] $\\times$ (L-1) -> LINEAR -> SIGMOID (whole model)\nThe linear forward module (vectorized over all the examples) computes the following equations:\n\n$$Z^{[l]} = W^{[l]}A^{[l-1]} +b^{[l]}\\tag{4}$$\nwhere $A^{[0]} = X$.\n\nBuilding the linear part of forward propagation.\n\nReminder: The mathematical representation of this unit is $Z^{[l]} = W^{[l]}A^{[l-1]} +b^{[l]}$. We may also find np.dot() useful. If our dimensions don't match, printing W.shape may help.","c1083fce":"## L-layer Neural Network\n- The initialization for a deeper L-layer neural network is more complicated because there are many more weight matrices and bias vectors. When completing the initialize_parameters_deep, we should make sure that our dimensions match between each layer. Recall that $n^{[l]}$ is the number of units in layer $l$. Thus for example if the size of our input $X$ is $(12288, 209)$ (with $m=209$ examples) then:\n<br>\n\n<table style=\"width:100%;border:solid,black,1px;\">\n\n\n    <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\">  <\/td> \n        <td style=\"border:solid,black,1px;\"> **Shape of W** <\/td> \n        <td style=\"border:solid,black,1px;\"> **Shape of b**  <\/td> \n        <td style=\"border:solid,black,1px;\"> **Activation** <\/td>\n        <td style=\"border:solid,black,1px;\"> **Shape of Activation** <\/td> \n    <\/tr>\n    \n    <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\"> **Layer 1** <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[1]},12288)$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[1]},1)$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $Z^{[1]} = W^{[1]}  X + b^{[1]} $ <\/td> \n        \n        <td style=\"border:solid,black,1px;\"> $(n^{[1]},209)$ <\/td> \n    <\/tr>\n    \n    <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\"> **Layer 2** <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[2]}, n^{[1]})$  <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[2]},1)$ <\/td> \n        <td style=\"border:solid,black,1px;\">$Z^{[2]} = W^{[2]} A^{[1]} + b^{[2]}$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[2]}, 209)$ <\/td> \n    <\/tr>\n   \n   <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\"> $\\vdots$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $\\vdots$  <\/td> \n        <td style=\"border:solid,black,1px;\"> $\\vdots$  <\/td> \n        <td style=\"border:solid,black,1px;\"> $\\vdots$<\/td> \n        <td style=\"border:solid,black,1px;\"> $\\vdots$  <\/td> \n    <\/tr>\n    \n   <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\"> **Layer L-1** <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[L-1]}, n^{[L-2]})$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[L-1]}, 1)$  <\/td> \n        <td style=\"border:solid,black,1px;\">$Z^{[L-1]} =  W^{[L-1]} A^{[L-2]} + b^{[L-1]}$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[L-1]}, 209)$ <\/td> \n    <\/tr>\n    \n    \n   <tr style=\"border:solid,black,1px;\">\n        <td style=\"border:solid,black,1px;\"> **Layer L** <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[L]}, n^{[L-1]})$ <\/td> \n        <td style=\"border:solid,black,1px;\"> $(n^{[L]}, 1)$ <\/td>\n        <td style=\"border:solid,black,1px;\"> $Z^{[L]} =  W^{[L]} A^{[L-1]} + b^{[L]}$<\/td>\n        <td style=\"border:solid,black,1px;\"> $(n^{[L]}, 209)$  <\/td> \n    <\/tr>\n\n<\/table>\n\nRemember that when we compute $W X + b$ in python, it carries out broadcasting. For example, if: \n\n$$ W = \\begin{bmatrix}\n    j  & k  & l\\\\\n    m  & n & o \\\\\n    p  & q & r \n\\end{bmatrix}\\;\\;\\; X = \\begin{bmatrix}\n    a  & b  & c\\\\\n    d  & e & f \\\\\n    g  & h & i \n\\end{bmatrix} \\;\\;\\; b =\\begin{bmatrix}\n    s  \\\\\n    t  \\\\\n    u\n\\end{bmatrix}\\tag{2}$$\n\nThen $WX + b$ will be:\n\n$$ WX + b = \\begin{bmatrix}\n    (ja + kd + lg) + s  & (jb + ke + lh) + s  & (jc + kf + li)+ s\\\\\n    (ma + nd + og) + t & (mb + ne + oh) + t & (mc + nf + oi) + t\\\\\n    (pa + qd + rg) + u & (pb + qe + rh) + u & (pc + qf + ri)+ u\n\\end{bmatrix}\\tag{3}  $$","0e24c7aa":"The three outputs $(dW^{[l]}, db^{[l]}, dA^{[l]})$ are computed using the input $dZ^{[l]}$.Here are the formulas we need:$$ dW^{[l]} = \\frac{\\partial \\mathcal{L} }{\\partial W^{[l]}} = \\frac{1}{m} dZ^{[l]} A^{[l-1] T} \\tag{8}$$$$ db^{[l]} = \\frac{\\partial \\mathcal{L} }{\\partial b^{[l]}} = \\frac{1}{m} \\sum_{i = 1}^{m} dZ^{[l](i)}\\tag{9}$$$$ dA^{[l-1]} = \\frac{\\partial \\mathcal{L} }{\\partial A^{[l-1]}} = W^{[l] T} dZ^{[l]} \\tag{10}$$","6652b3cb":"For even more convenience when implementing the $L$-layer Neural Net, we need a function that replicates the previous one (linear_activation_forward with RELU) $L-1$ times, then follows that with one linear_activation_forward with SIGMOID.","937d874e":"For more convenience, we are going to group two functions (Linear and Activation) into one function (LINEAR->ACTIVATION). Hence, we will implement a function that does the LINEAR forward step followed by an ACTIVATION forward step.\n<br><br>\nImplementing the forward propagation of the *LINEAR->ACTIVATION* layer. Mathematical relation is: $A^{[l]} = g(Z^{[l]}) = g(W^{[l]}A^{[l-1]} +b^{[l]})$ where the activation \"g\" can be sigmoid() or relu(). Use linear_forward() and the correct activation function.","0ed78f23":"Note: In deep learning, the \"[LINEAR->ACTIVATION]\" computation is counted as a single layer in the neural network, not two layers.","92c8be18":"## 2-layer Neural Network<br>\n**Instructions:**<br>\n\n- The model's structure is: LINEAR -> RELU -> LINEAR -> SIGMOID.\n- Use random initialization for the weight matrices. Use np.random.randn(shape)*0.01 with the correct shape.\n- Use zero initialization for the biases. Use np.zeros(shape).","462a4e49":"Now we have a full forward propagation that takes the input X and outputs a row vector $A^{[L]}$ containing your predictions. It also records all intermediate values in \"caches\". Using $A^{[L]}$, we can compute the cost of our predictions.","95f4399a":"###  Linear-Activation backward\n\nNext, we will create a function that merges the two helper functions: **`linear_backward`** and the backward step for the activation **`linear_activation_backward`**. \n\nTo implement `linear_activation_backward`, we are provided two backward functions:\n- **`sigmoid_backward`**: Implements the backward propagation for SIGMOID unit. You can call it as follows:\n\n```python\ndZ = sigmoid_backward(dA, activation_cache)\n```\n\n- **`relu_backward`**: Implements the backward propagation for RELU unit. You can call it as follows:\n\n```python\ndZ = relu_backward(dA, activation_cache)\n```\n\nIf $g(.)$ is the activation function, \n`sigmoid_backward` and `relu_backward` compute $$dZ^{[l]} = dA^{[l]} * g'(Z^{[l]}) \\tag{11}$$\n\n\nImplementing the backpropagation for the *LINEAR->ACTIVATION* layer.","7022ae6d":"To build our neural network, we will be implementing several \"helper functions\". These helper functions will be used in the next notebook to build a two-layer neural network and an L-layer neural network. Each small helper function we implement will have detailed instructions that will walk us through the necessary steps. Here is an outline of this notebook, we will:\n- Initialize the parameters for a two-layer network and for an $L$-layer neural network.\n- Implement the forward propagation module (shown in purple in the figure below).\n> - Complete the LINEAR part of a layer's forward propagation step (resulting in $Z^{[l]}$).\n> - We are provided with the ACTIVATION function (relu\/sigmoid).\n> - Combine the previous two steps into a new [LINEAR->ACTIVATION] forward function.\n> - Stack the [LINEAR->RELU] forward function L-1 time (for layers 1 through L-1) and add a [LINEAR->SIGMOID] at the end (for the final layer $L$). This gives you a new L_model_forward function.\n- Compute the loss.\n- Implement the backward propagation module (denoted in red in the figure below).\n> - Complete the LINEAR part of a layer's backward propagation step.\n> - We are provided with the gradient of the ACTIVATE function (relu_backward\/sigmoid_backward)\n> - Combine the previous two steps into a new [LINEAR->ACTIVATION] backward function.\n> - Stack [LINEAR->RELU] backward L-1 times and add [LINEAR->SIGMOID] backward in a new L_model_backward function\n- Finally update the parameters.","d65f8c79":"**Notations**:\n- Superscript $[l]$ denotes a quantity associated with the $l^{th}$ layer.\n> - Example: $a^{[L]}$ is the $L^{th}$ layer activation. $W^{[L]}$ and $b^{[L]}$ are the $L^{th}$ layer parameters.\n- Superscript $(i)$ denotes a quantity associated with the $i^{th}$ example.\n> - Example: $x^{(i)}$ is the $i^{th}$ training example.\n- Lowerscript $i$ denotes the $i^{th}$ entry of a vector.\n> - Example: $a^{[l]}_i$ denotes the $i^{th}$ entry of the $l^{th}$ layer's activations).","7c345632":"**Objectives:**\n> - Use non-linear units like ReLU to improve our model\n> - Build a deeper neural network (with more than 1 hidden layer)\n> - Implement an easy-to-use neural network class","456ce488":"```python\nif L == 1:\n    parameters[\"W\" + str(L)] = np.random.randn(layer_dims[1], layer_dims[0]) * 0.01\n    parameters[\"b\" + str(L)] = np.zeros((layer_dims[1], 1))\n```","81e185bd":"**Note**: that for every forward function, there is a corresponding backward function. That is why at every step of your forward module we will be storing some values in a cache. The cached values are useful for computing gradients. In the backpropagation module we will then use the cache to calculate the gradients. This notebook will show us exactly how to carry out each of these steps.\n<br><br>\nWe will write two helper functions that will initialize the parameters for our model. The first function will be used to initialize parameters for a two layer model. The second one will generalize this initialization process to $L$ layers.","5831db1b":"## Linear backward\nFor layer $l$, the linear part is: $Z^{[l]} = W^{[l]} A^{[l-1]} + b^{[l]}$ (followed by an activation).\n\nSuppose you have already calculated the derivative $dZ^{[l]} = \\frac{\\partial \\mathcal{L} }{\\partial Z^{[l]}}$. You want to get $(dW^{[l]}, db^{[l]} dA^{[l-1]})$."}}