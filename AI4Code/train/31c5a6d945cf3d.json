{"cell_type":{"d209ff00":"code","0f12dc8f":"code","f9c1fcfb":"code","610c9c5d":"code","f9b3a621":"code","f960e4ff":"code","72cc81d5":"code","3e1a53ee":"code","d8f1be8c":"code","a7cbc305":"code","2a0f4003":"code","ef26cc93":"code","f9c93944":"code","96a5827d":"code","aa0bf9af":"code","b51dca72":"code","d989f108":"code","c14daaf1":"code","123a1141":"code","6b33eb5b":"code","1d583aee":"code","fe9b43a4":"code","bbde318a":"code","bbc592ff":"code","6e26d9f2":"code","26dc1c30":"code","8960dc06":"code","d34960b6":"code","1a870e7d":"code","a9cac26a":"code","b06ccd51":"code","c3b5fba1":"code","010c9a48":"code","62ca2caf":"code","49659bb1":"code","4462e18f":"code","6ac9610b":"code","94baa147":"code","a8e30cf9":"code","3c859dc2":"code","7d136ee3":"code","3bdf2903":"code","a6b5d11e":"code","454c7e15":"code","facb3f17":"code","eacda832":"code","9d1082ec":"code","7df7bfe7":"code","012c9188":"code","522291dc":"code","6baee2d8":"code","4ea1f78f":"code","263075dd":"code","10809543":"code","890ec093":"code","44d25131":"markdown","c6dd8d99":"markdown","d83f959b":"markdown","96eaed98":"markdown","6f989724":"markdown","aa568a92":"markdown","ec508472":"markdown","7ce0327c":"markdown","5f0c1e4d":"markdown","6b8a0bbc":"markdown","b7ae1ef6":"markdown","7fce6761":"markdown","18722f6d":"markdown"},"source":{"d209ff00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f12dc8f":"##Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f9c1fcfb":"#Load and Read the dataSet\ndata = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","610c9c5d":"data.head().style.set_properties(**{\"background-color\": \"#ff4654\",\"color\": \"black\",\"border-color\": \"black\"})","f9b3a621":"data.shape\n#there is 150 rows with 6 columns in this dataset","f960e4ff":"data.isnull().sum() #Check for null values","72cc81d5":"data.duplicated().sum() #check for duplicates rows","3e1a53ee":"data.info() #All info. of dataset like count of non-values and data tyepes.","d8f1be8c":"data = data.drop('Id',axis=1) # Drop the ID columns, its not important","a7cbc305":"data.head()","2a0f4003":"data['Species'].value_counts()","ef26cc93":"sns.set_theme(style=\"whitegrid\", palette=\"pastel\")\nsns.countplot(x=\"Species\",data=data)\nplt.show()","f9c93944":"sns.pairplot(data,hue = 'Species')\nplt.show()\n# Pair plot show us how independent variables are releated with each other with respect to dependent variable.","96a5827d":"sns.barplot(x='Species',y='SepalLengthCm',data = data)\nplt.show()","aa0bf9af":"sns.barplot(x='Species',y='SepalWidthCm',data = data)\nplt.show()","b51dca72":"sns.barplot(x='Species',y='PetalLengthCm',data = data)\nplt.show()","d989f108":"sns.barplot(x='Species',y='PetalWidthCm',data = data)\nplt.show()","c14daaf1":"sns.scatterplot(x='SepalLengthCm',y = 'SepalWidthCm',hue = 'Species',data = data)\nplt.show()","123a1141":"sns.scatterplot(x='SepalLengthCm',y = 'PetalLengthCm',hue = 'Species',data = data)\nplt.show()","6b33eb5b":"sns.scatterplot(x='SepalLengthCm',y = 'PetalWidthCm',hue = 'Species',data = data)\nplt.show()","1d583aee":"sns.scatterplot(x='SepalWidthCm',y = 'PetalLengthCm',hue = 'Species',data = data)\nplt.show()","fe9b43a4":"sns.scatterplot(x='SepalWidthCm',y = 'PetalWidthCm',hue = 'Species',data = data)\nplt.show()","bbde318a":"sns.scatterplot(x='PetalLengthCm',y = 'PetalWidthCm',hue = 'Species',data = data)\nplt.show()","bbc592ff":"sns.boxplot(x=\"SepalLengthCm\",data=data)\nplt.show()","6e26d9f2":"sns.boxplot(x=\"SepalWidthCm\",data=data)\nplt.show()","26dc1c30":"sns.distplot(x=data['SepalWidthCm'])\nplt.show()","8960dc06":"## If The Data Is Normally Distributed We use this\n### Assuming Age follows A Gaussian Distribution we will calculate the boundaries which differentiates the outliers","d34960b6":"uppper_boundary=data['SepalWidthCm'].mean() + 3* data['SepalWidthCm'].std()\nlower_boundary=data['SepalWidthCm'].mean() - 3* data['SepalWidthCm'].std()\nprint(\"Lower_boundary is: \",lower_boundary)\nprint(\"Upper_boundary is: \",uppper_boundary)\nprint(\"mean of SepalWidthCm is: \",data['SepalWidthCm'].mean())","1a870e7d":"data.loc[data['SepalWidthCm']>=4,'SepalWidthCm']=4 # Replace the outliers with upper boundaries","a9cac26a":"data.head()","b06ccd51":"sns.boxplot(x=\"PetalLengthCm\",data=data)\nplt.show()","c3b5fba1":"sns.boxplot(x=\"PetalWidthCm\",data=data)\nplt.show()","010c9a48":"plt.figure(figsize=(22,8))\ncor = data.corr()\nsns.heatmap(cor,annot = True)\nplt.show()","62ca2caf":"def correlation(dataset,threshold):\n    col_corr = set()\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j])>threshold:\n                colname = corr_matrix.columns[i]\n                col_corr.add(colname)\n    return col_corr","49659bb1":"corr_fea = correlation(data,0.9)  # here if we want equal to 0.9 threshold or more we will get only 'PetalWidthCm' we can drop it but here data is small so we can implement our model without drop that column.","4462e18f":"corr_fea","6ac9610b":"sns.distplot(data.drop('Species',axis=1))\nplt.show()","94baa147":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata['Species'] = labelencoder.fit_transform(data['Species'])\ndata","a8e30cf9":"x = data.drop('Species',axis=1) #features data\ny = data['Species'] # labeled data or out put","3c859dc2":"from sklearn.model_selection import train_test_split","7d136ee3":"X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.2,random_state=0)","3bdf2903":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","a6b5d11e":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression(solver='liblinear')\nlogmodel.fit(X_train,Y_train)","454c7e15":"# Let see how accurate our model for prediction\npred = logmodel.predict(X_test)\nprint(pred)","facb3f17":"from sklearn.metrics import classification_report","eacda832":"print(classification_report(Y_test,pred))","9d1082ec":"from sklearn.metrics import confusion_matrix","7df7bfe7":"print(confusion_matrix(Y_test,pred))","012c9188":"from sklearn.metrics import accuracy_score","522291dc":"print(\"Accuracy Score is :\", accuracy_score(Y_test,pred))","6baee2d8":"from sklearn.neighbors import KNeighborsClassifier","4ea1f78f":"KNN = KNeighborsClassifier(n_neighbors = 5,metric = 'minkowski',p = 2)","263075dd":"KNN.fit(X_train,Y_train)","10809543":"pred_knn = KNN.predict(X_test)\nprint(pred_knn)","890ec093":"print(KNN.score(X_test,Y_test))","44d25131":"![](https:\/\/c.tenor.com\/35hmBwYHYikAAAAC\/the-office-bow.gif)","c6dd8d99":"# Here is same number of \"Species\" we have","d83f959b":"# How correlated with each other based of Species","96eaed98":"# split the data set","6f989724":"# KNN-classification","aa568a92":"# Logistic regression (for binary classification)","ec508472":"It includes three iris species with 50 samples each as well as some properties about each flower. One flower species is linearly separable from the other two, but the other two are not linearly separable from each other.\n\nThe columns in this dataset are:\n\nId\nSepalLengthCm\nSepalWidthCm\nPetalLengthCm\nPetalWidthCm\nSpecies","7ce0327c":"# Check for outliers","5f0c1e4d":"![](https:\/\/i.gifer.com\/HScd.gif)","6b8a0bbc":"# Feature selection\n# By heatmap we will check how the numerical independents variables are correlated with Species or if we get any independents are correlated with each other take one of theme for model.\n# Here data is small so we can take all the independent variables for the model","b7ae1ef6":"# Count of each independents variables with dpependent variable","7fce6761":"Problem statement: Predict the Species by given Features dataset (SepalLengthCm ,SepalWidthCm,PetalLengthCm,PetalWidthCm).","18722f6d":"# By LogisticRegression and KNN classification we get 96% accuracy"}}