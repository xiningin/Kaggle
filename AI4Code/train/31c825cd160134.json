{"cell_type":{"1581589b":"code","199b9ec1":"code","28876a1b":"code","6903f42c":"code","1c951d92":"code","e0169e92":"code","9ab25cd5":"code","797b19fa":"code","54fe821f":"code","f2a59f96":"code","996e3598":"code","2115cc11":"code","83646039":"code","5156f561":"code","3a297d49":"code","5612f06f":"code","3a015d83":"code","280ce33c":"code","536f7fa5":"code","33d91522":"code","178375df":"code","a99d9f65":"code","4175e473":"code","3b328db0":"code","1d0413d0":"code","44ba4e4b":"code","1d4d0a7a":"markdown","d4791704":"markdown","7685611d":"markdown","e53a53a1":"markdown","39783144":"markdown","b0395e76":"markdown","fa513a6b":"markdown","e61237f5":"markdown","25ad30ff":"markdown","3578fb16":"markdown","df02aa5c":"markdown","ef2a637e":"markdown"},"source":{"1581589b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nimport gc\nimport cv2","199b9ec1":"# read the dataset\ndigits = pd.read_csv(\"..\/input\/mnist-svm-m4\/train.csv\")\ndigits.info()","28876a1b":"# head\ndigits.head()","6903f42c":"four = digits.iloc[3, 1:]\nfour.shape","1c951d92":"four = four.values.reshape(28, 28)\nplt.imshow(four, cmap='gray')","e0169e92":"# visualise the array\nprint(four[5:-5, 5:-5])","9ab25cd5":"# Summarise the counts of 'label' to see how many labels of each digit are present\ndigits.label.astype('category').value_counts()","797b19fa":"# Summarise count in terms of percentage \n100*(round(digits.label.astype('category').value_counts()\/len(digits.index), 4))","54fe821f":"# missing values - there are none\ndigits.isnull().sum()","f2a59f96":"# average values\/distributions of features\ndescription = digits.describe()\ndescription","996e3598":"# Creating training and test sets\n# Splitting the data into train and test\nX = digits.iloc[:, 1:]\nY = digits.iloc[:, 0]\n\n# Rescaling the features\nfrom sklearn.preprocessing import scale\nX = scale(X)\n\n# train test split with train_size=10% and test size=90%\nx_train, x_test, y_train, y_test = train_test_split(X, Y, train_size=0.10, random_state=101)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","2115cc11":"# delete test set from memory, to avoid a memory error\n# we'll anyway use CV to evaluate the model, and can use the separate test.csv file as well\n# to evaluate the model finally\n\n# del x_test\n# del y_test","83646039":"from sklearn import svm\nfrom sklearn import metrics\n\n# an initial SVM model with linear kernel   \nsvm_linear = svm.SVC(kernel='linear')\n\n# fit\nsvm_linear.fit(x_train, y_train)","5156f561":"# predict\npredictions = svm_linear.predict(x_test)\npredictions[:10]","3a297d49":"# evaluation: accuracy\n# C(i, j) represents the number of points known to be in class i \n# but predicted to be in class j\nconfusion = metrics.confusion_matrix(y_true = y_test, y_pred = predictions)\nconfusion","5612f06f":"# measure accuracy\nmetrics.accuracy_score(y_true=y_test, y_pred=predictions)","3a015d83":"# class-wise accuracy\nclass_wise = metrics.classification_report(y_true=y_test, y_pred=predictions)\nprint(class_wise)","280ce33c":"# run gc.collect() (garbage collect) to free up memory\n# else, since the dataset is large and SVM is computationally heavy,\n# it'll throw a memory error while training\ngc.collect()","536f7fa5":"# rbf kernel with other hyperparameters kept to default \nsvm_rbf = svm.SVC(kernel='rbf')\nsvm_rbf.fit(x_train, y_train)","33d91522":"# predict\npredictions = svm_rbf.predict(x_test)\n\n# accuracy \nprint(metrics.accuracy_score(y_true=y_test, y_pred=predictions))","178375df":"# conduct (grid search) cross-validation to find the optimal values \n# of cost C and the choice of kernel\n\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'C':[1, 10, 100], \n             'gamma': [1e-2, 1e-3, 1e-4]}\n\n# instantiate a model \nsvc_grid_search = svm.SVC(kernel=\"rbf\")\n\n# create a classifier to perform grid search\nclf = GridSearchCV(svc_grid_search, param_grid=parameters, scoring='accuracy',return_train_score=True)\n\n# fit\nclf.fit(x_train, y_train)","a99d9f65":"# results\ncv_results = pd.DataFrame(clf.cv_results_)\ncv_results","4175e473":"# converting C to numeric type for plotting on x-axis\ncv_results['param_C'] = cv_results['param_C'].astype('int')\n\n# # plotting\nplt.figure(figsize=(16,6))\n\n# subplot 1\/3\nplt.subplot(131)\ngamma_01 = cv_results[cv_results['param_gamma']==0.01]\n\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_test_score\"])\nplt.plot(gamma_01[\"param_C\"], gamma_01[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.01\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n# subplot 2\/3\nplt.subplot(132)\ngamma_001 = cv_results[cv_results['param_gamma']==0.001]\n\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_test_score\"])\nplt.plot(gamma_001[\"param_C\"], gamma_001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\n\n# subplot 3\/3\nplt.subplot(133)\ngamma_0001 = cv_results[cv_results['param_gamma']==0.0001]\n\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_test_score\"])\nplt.plot(gamma_0001[\"param_C\"], gamma_0001[\"mean_train_score\"])\nplt.xlabel('C')\nplt.ylabel('Accuracy')\nplt.title(\"Gamma=0.0001\")\nplt.ylim([0.60, 1])\nplt.legend(['test accuracy', 'train accuracy'], loc='lower right')\nplt.xscale('log')\n\nplt.show()","3b328db0":"# optimal hyperparameters\nbest_C = 1\nbest_gamma = 0.001\n\n# model\nsvm_final = svm.SVC(kernel='rbf', C=best_C, gamma=best_gamma)\n\n# fit\nsvm_final.fit(x_train, y_train)","1d0413d0":"# predict\npredictions = svm_final.predict(x_test)","44ba4e4b":"# evaluation: CM \nconfusion = metrics.confusion_matrix(y_true = y_test, y_pred = predictions)\n\n# measure accuracy\ntest_accuracy = metrics.accuracy_score(y_true=y_test, y_pred=predictions)\n\nprint(test_accuracy, \"\\n\")\nprint(confusion)\n","1d4d0a7a":"### Non-Linear SVM\n\nLet's now try a non-linear model with the RBF kernel.","d4791704":"# MNIST Digits - Classification Using SVM\n\nIn this notebook, we'll explore the popular MNIST dataset and build an SVM model to classify handwritten digits. <a href='http:\/\/yann.lecun.com\/exdb\/mnist\/'>Here is a detailed description of the dataset.<\/a>\n\nWe'll divide the analysis into the following parts:\n- Data understanding and cleaning\n- Data preparation for model building\n- Building an SVM model - hyperparameter tuning, model evaluation etc.\n","7685611d":"## Data Preparation for Model Building\n\nLet's now prepare the dataset for building the model. We'll only use a fraction of the data else training will take a long time.\n","e53a53a1":"Also, let's look at the average values of each column, since we'll need to do some rescaling in case the ranges vary too much.","39783144":"The accuracy achieved with a non-linear kernel is slightly higher than a linear one. Let's now do a grid search CV to tune the hyperparameters C and gamma.\n\n### Grid Search Cross-Validation","b0395e76":"From the plot above, we can observe that (from higher to lower gamma \/ left to right):\n- At very high gamma (0.01), the model is achieving 100% accuracy on the training data, though the test score is quite low (<75%). Thus, the model is overfitting.\n\n- At gamma=0.001, the training and test scores are comparable at around C=1, though the model starts to overfit at higher values of C\n\n- At gamma=0.0001, the model does not overfit till C=10 but starts showing signs at C=100. Also, the training and test scores are slightly lower than at gamma=0.001.\n\nThus, it seems that the best combination is gamma=0.001 and C=1 (the plot in the middle), which gives the highest test accuracy (~92%) while avoiding overfitting.\n\nLet's now build the final model and see the performance on test data.\n\n### Final Model\n\nLet's now build the final model with chosen hyperparameters.","fa513a6b":"## Model Building\n\nLet's now build the model and tune the hyperparameters. Let's start with a **linear model** first.\n\n### Linear SVM\n\nLet's first try building a linear SVM model (i.e. a linear kernel). ","e61237f5":"### Conclusion\n\nThe final accuracy on test data is approx. 92%. Note that this can be significantly increased by using the entire training data of 42,000 images (we have used just 10% of that!). \n\n","25ad30ff":"## Data Understanding and Cleaning\n \n Let's understand the dataset and see if it needs some cleaning etc.","3578fb16":"Thus, each digit\/label has an approximately 9%-11% fraction in the dataset and the **dataset is balanced**. This is an important factor in considering the choices of models to be used, especially SVM, since **SVMs rarely perform well on imbalanced data** (think about why that might be the case).\n\nLet's quickly look at missing values, if any.","df02aa5c":"#### Side note: Indexing Recall ####\n`list =    [0, 4, 2, 10, 22, 101, 10]` <br>\n`indices = [0, 1, 2, 3, ...,        ]` <br>\n`reverse = [-n           -3  -2   -1]` <br>","ef2a637e":"You can see that the max value of the mean and maximum values of some features (pixels) is 139, 255 etc., whereas most features lie in much lower ranges  (look at description of pixel 0, pixel 1 etc. above).\n\nThus, it seems like a good idea to rescale the features."}}