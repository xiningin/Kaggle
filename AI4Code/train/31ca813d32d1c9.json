{"cell_type":{"57f654b2":"code","8223c6d5":"code","f498d2d6":"code","1ec4d27d":"code","877a224a":"code","d221f6ee":"code","1519086b":"code","ad6c8581":"code","303a50d6":"code","6989242d":"code","002a350a":"code","d14e5dca":"code","f1fee8dd":"code","f0b6c1ad":"code","9c40bbea":"code","b2394236":"code","779577f7":"code","52e3fc0b":"code","ce817867":"code","3a64ccd6":"code","6aeadd60":"code","fe6e37a0":"code","e7888462":"code","2ff22cf2":"code","254e2e2e":"code","5d211294":"code","557ad296":"code","a0eee121":"code","dbb31ed5":"code","f3a25b68":"code","e503c845":"code","d0dd4337":"code","935f2ee7":"code","6b8487fe":"code","76c6ed1f":"code","d5212aee":"code","3aca55db":"code","545790f4":"code","6e8d27c8":"code","e3a53ffe":"code","898c730d":"code","9975da50":"code","c87d2d9d":"code","7547578f":"code","0c07759c":"code","e92fcd89":"code","5542f9ab":"code","cf53048b":"code","73e04406":"code","117efc63":"code","d3400a5c":"code","21a072e1":"code","79cf31f8":"code","34fc68ad":"code","99f0b9e1":"code","e2546abd":"code","e484b14a":"markdown","f5c0f96d":"markdown","470c3bbd":"markdown","9ca3506f":"markdown","d92b3112":"markdown","03800035":"markdown","17e34ead":"markdown","9d8960f1":"markdown","690d055e":"markdown","7f0d4993":"markdown","bed036dd":"markdown","6b9f060d":"markdown","2a6662da":"markdown","3ce27ba5":"markdown","4839cc4a":"markdown","27ad495a":"markdown","ee403461":"markdown","04cb77b5":"markdown","a2e468e8":"markdown","374edece":"markdown","a082504c":"markdown","7479a561":"markdown"},"source":{"57f654b2":"import warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8223c6d5":"# Plotly and Cufflinks setup\n\n#!pip install plotly\n#!pip install cufflinks\n#!pip install chart_studio\n\n#import chart_studio.plotly as py\nimport plotly.graph_objs as go\n\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nprint(__version__) #requires version >= 1.9.0\n\nimport cufflinks as cf\n\n#for Notebooks\ninit_notebook_mode(connected = True)\n\n#for offline use\ncf.go_offline()","f498d2d6":"path = \"..\/input\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv\"","1ec4d27d":"warnings.filterwarnings('ignore')","877a224a":"df = pd.read_csv(path,  parse_dates = [\"Customer Since\", \"M-Y\"], low_memory = False, na_values = [\"NaN\", 'NaT', ' -   '])","d221f6ee":"pd.set_option('display.max_columns', None)","1519086b":"df.head(5)","ad6c8581":"len(df)","303a50d6":"df.info()","6989242d":"df.columns","002a350a":"drop_columns_0 = df.columns[-5:]\ndrop_columns_0","d14e5dca":"df.drop(drop_columns_0, axis = 1, inplace = True)","f1fee8dd":"drop_columns_1 = [\"item_id\", \"created_at\", \"increment_id\", \"sales_commission_code\", \"Working Date\" , \"BI Status\" , \"Year\", \"Month\", \"FY\"]","f0b6c1ad":"df.drop(drop_columns_1, axis = 1, inplace = True)","9c40bbea":"df = df[['Customer ID', 'sku', 'category_name_1', 'status', 'qty_ordered',  'price', 'grand_total',\n       'discount_amount', ' MV ', 'payment_method', 'Customer Since', 'M-Y']]","b2394236":"missing = pd.DataFrame(df.isnull().sum())\nmissing.transpose()","779577f7":"total_missing_values = df.isnull().sum().sum()\ntotal_missing_values","52e3fc0b":"df.dropna(axis = 0, how = 'any', inplace = True)","ce817867":"#Checking again for missing values\nmissing = pd.DataFrame(df.isnull().sum())\nmissing.transpose()","3a64ccd6":"total_missing_values = df.isnull().sum().sum()\ntotal_missing_values","6aeadd60":"df.head(5)","fe6e37a0":"df[' MV '].isnull().sum()#.sum()","e7888462":"# Extract Year\ndf['Year'] = df['M-Y'].apply(lambda x: int(x.year)) \n\n# Extract Month\ndf['Month'] = df['M-Y'].apply(lambda x: int(x.month)) \n\ndf.drop('M-Y', axis = 1, inplace = True)","2ff22cf2":"df[df['qty_ordered'] == 0]['qty_ordered'].value_counts()","254e2e2e":"df[df['price'] == 0]['price'].value_counts()","5d211294":"df[df[' MV '] == '0'][' MV '].value_counts()","557ad296":"df[df['grand_total'] == 0]['grand_total'].value_counts()","a0eee121":"#found 9465 cells containing 0.0\n#replace 0.0 from corresponding values of ' MV ' column","dbb31ed5":"def replace_zeros(x, y):\n    if x == 0:\n        return y\n    else: \n        return x","f3a25b68":"df.columns","e503c845":"df['grand_total'] = df.apply(lambda z: replace_zeros(z['grand_total'], z[' MV ']), axis = 1)","d0dd4337":"#Checking again\ndf[df['grand_total'] == 0]['grand_total'].value_counts()","935f2ee7":"df.head(5)","6b8487fe":"len(df)","76c6ed1f":"df['payment_method'].nunique()","d5212aee":"pd.DataFrame(df['payment_method'].unique()).transpose()","3aca55db":"df_payment_method = pd.DataFrame(df.payment_method.value_counts())\ndf_payment_method = df_payment_method.sort_values(by = 'payment_method', ascending = False)\ndf_payment_method.transpose()","545790f4":"plt.style.use('bmh')\n\ndf_payment_method.plot.bar(title = 'Overall Payment Methods Counts from 2016-2018', \n                           xlabel = 'Payment Methods', \n                           ylabel = 'Count', \n                           figsize = (10, 5))\nplt.show()\n","6e8d27c8":"# Preparing Data\ndf_payMethod_year = pd.DataFrame(df[['payment_method', 'Year']].value_counts())\ndf_payMethod_year = df_payMethod_year.reset_index()\ndf_payMethod_year.columns = ['Payment Methods', 'Year', 'Count']\ndata = df_payMethod_year.sort_values(by = 'Count', ascending = False).head(20)\n\n\n# Plot\nfig, ax = plt.subplots(figsize = (16, 6))\n\nsns.barplot('Payment Methods', 'Count', hue = 'Year', data = data)\n\n# add the annotation\nax.bar_label(ax.containers[-2], fmt = '\\n%.0f', label_type = 'edge')\n\n# add Labels\nax.set(xlabel = 'Payment Methods')\nax.set(ylabel = 'Count')\nax.set(title = 'Yearly Payment Methods Count from 2016-2018')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 0, horizontalalignment = 'center')\nax.legend(loc = 1)\nplt.tight_layout()\nplt.show()","e3a53ffe":"# Prepare Data\nyears = df_payMethod_year.Year.unique()\nyears = sorted(years)\n\n#data = df_payMethod_year[df_payMethod_year['Year'] == j].value_counts().reset_index().sort_values(by = ['Count'], ascending = False)\nmycolors = ['tab:red', 'tab:blue', 'tab:green'] #, 'tab:orange', 'tab:brown', 'tab:grey', 'tab:pink', 'tab:olive', 'deeppink', 'steelblue', 'firebrick', 'mediumseagreen']\n\n# Plot\nfig, ax = plt.subplots(1, len(years), sharey = False, figsize = (16, 4))\n\nfor i, j in enumerate(years):\n    \n    data = df_payMethod_year[df_payMethod_year['Year'] == j].value_counts().reset_index().sort_values(by = ['Count'], ascending = False)\n        \n    ax[i].bar(data['Payment Methods'], data.Count, color = mycolors[i])\n    \n    #labels\n    ax[i].set(xlabel = 'Order Status')\n    ax[i].set(ylabel = 'Count')\n    ax[i].set(title = 'Year ' + str(j))\n    ax[i].tick_params(labelrotation = 90, axis='x')","898c730d":"order_status = pd.DataFrame(df['status'].unique())\norder_status.transpose()","9975da50":"df['status'].nunique()","c87d2d9d":"df_order_status = pd.DataFrame(df['status'].value_counts())","7547578f":"df_order_status.transpose()","0c07759c":"plt.style.use('ggplot')\ndf_order_status.plot.bar(title = 'Overall Order Status Counts from 2016-2018', \n                         xlabel = 'Status', \n                         ylabel = 'Count', \n                         figsize = (10, 4),\n                         sort_columns = df_order_status.sort_values('status', ascending = False))\nplt.show()","e92fcd89":"df_status_year = pd.DataFrame(df[['status', 'Year']].value_counts())\ndf_status_year = df_status_year.reset_index()\ndf_status_year.columns = ['Status', 'Year', 'Count']","5542f9ab":"fig, ax = plt.subplots(figsize = (15, 5))\n\nsns.barplot(x = 'Status', y = 'Count', hue = 'Year', data = df_status_year.head(15)) #\n\n# add the annotation\nax.bar_label(ax.containers[-2], fmt = '\\n%.0f', label_type = 'edge')\n\n# add Labels\nax.set(xlabel = 'Order Status')\nax.set(ylabel = 'Count')\nax.set(title = 'Yearly Order Status')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'center')\nax.legend(loc = 1)\nplt.tight_layout()\nplt.show()","cf53048b":"# prepare data\nyears = df_status_year.Year.unique()\nyears = sorted(years)\n#data = df_status_year[df_status_year['Year'] == j][['Status', 'Count']].value_counts().reset_index().sort_values(by = 'Count', ascending = False).head(5)\nmycolors = ['tab:red', 'tab:blue', 'tab:green', 'tab:orange', 'tab:brown', 'tab:grey', 'tab:pink', 'tab:olive', 'deeppink', 'steelblue', 'firebrick', 'mediumseagreen']      \n\n#Plot\n\nfig, ax = plt.subplots(1, len(years), sharey = True, figsize = (16, 5))\n\nfor i, j in enumerate(years):\n    \n    data = df_status_year[df_status_year['Year'] == j][['Status', 'Count']].value_counts().reset_index().sort_values(by = 'Count', ascending = False).head(5)\n    \n    ax[i].bar(data.Status, data.Count, color = mycolors[i])\n    \n    \n    ax[i].set(xlabel = 'Order Status')\n    ax[i].set(ylabel = 'Count')\n    ax[i].set(title = 'Year ' + str(j))\n    ax[i].tick_params(labelrotation = 30, axis='x')    ","73e04406":"payment_method_status = pd.crosstab(df.payment_method, df.status)\npayment_method_status","117efc63":"layout = go.Layout(title = \"Payment Methods\/Status\", \n                   xaxis = {'title': 'Payment Methods'}, \n                   yaxis = {'title': 'Count'}, \n                   showlegend = True, \n                   width = 1000, \n                   height = 500,)\n\npayment_method_status.iplot(kind = 'bar', layout = layout) \n\n# colorscale = Greens, Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Bl ues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Vi ridis,Cividis.\n","d3400a5c":"# import plotly.express as px\n# fig = px.bar(payment_method_status)\n# fig.update_xaxes(title = 'Payment Method', title_font = dict(size = 18, family = 'Courier', color = 'crimson'))\n# fig.update_yaxes(title = 'Count', title_font = dict(size = 18, family = 'Courier', color = 'crimson'))\n# fig.\n# fig.show()","21a072e1":"plt.figure(figsize = (14, 7))\nsns.set_theme(context = 'notebook', style = 'darkgrid', palette = 'bright', font = 'sans-serif', font_scale = 1, color_codes = True, rc = None)\n\nsns.heatmap(payment_method_status, \n            cmap = 'coolwarm', \n            robust = True, \n            annot = True, \n            annot_kws = {'size':13}, \n            fmt = \".0f\", \n            linecolor = 'white', \n            linewidths = 1, \n            cbar = True, \n            square = False,\n            xticklabels = True,\n            yticklabels = True) \n\nplt.xlabel(\"Status\")\nplt.ylabel(\"Payment Methods\")\nplt.text(0,-1, \"Heat Map\", fontsize = 25, color = 'Black', fontstyle = 'italic')\nplt.show()","79cf31f8":"#df[df['Year'] ==  2016][['category_name_1', 'Month']].sort_values(by = 'Month', ascending = True)","34fc68ad":"df_cat_orderDate = pd.DataFrame(df[['category_name_1', 'Year', 'Month']])\ndf_cat_orderDate = df_cat_orderDate.sort_values(by = ['Year', 'Month'])\ndf_cat_orderDate","99f0b9e1":"df_cat_orderDate['Year'] =  df_cat_orderDate['Year'].apply(lambda x: str(x))\ndf_cat_orderDate['Month'] = df_cat_orderDate['Month'].apply(lambda x: str(x))\n\ndf_cat_orderDate['Order_Date'] = df_cat_orderDate['Year'] + \"-\" + df_cat_orderDate['Month']\ndf_cat_orderDate = pd.crosstab(df_cat_orderDate.category_name_1, df_cat_orderDate.Order_Date, margins = True)\ndf_cat_orderDate","e2546abd":"plt.figure(figsize = (20, 7))\nsns.set_theme(context = 'notebook', style = 'darkgrid', palette = 'bright', font = 'sans-serif', font_scale = 1, color_codes = True, rc = None)\n\nsns.heatmap(df_cat_orderDate, \n            cmap = 'viridis', \n            robust = True, \n            annot = True, \n            annot_kws = {'size':13}, \n            fmt = \".0f\", \n            linecolor = 'white', \n            linewidths = 1, \n            cbar = True, \n            square = False,\n            xticklabels = True,\n            yticklabels = True) \n\nplt.xlabel(\"Order Date (Year-Month)\")\nplt.ylabel(\"Item Categories\")\nplt.text(0,-1, \"Heat Map\", fontsize = 25, color = 'Black', fontstyle = 'italic')\nplt.show()","e484b14a":"# Task 2: Visualize payment method and order status frequency","f5c0f96d":"### (B) Yearly Order Status","470c3bbd":"### (A) Yearly Payment Methods","9ca3506f":"### DataFrame Without 0(Zeros) and Null Values","d92b3112":"### Re arranging Columns","03800035":"# Loading Data","17e34ead":"#### Check For Missing Data","9d8960f1":"## Overall Payment Methods Count from 2016-2018","690d055e":"## Overall Order Status Counts from 2016-2018","7f0d4993":"## Yearly Payment Methods","bed036dd":"#### Droping Columns \"items_id\", \"created_at\", \"increment_id\", \"sales_commission_code\", \"Working Date\" , \"BI Status\" , \"Year\", \"Month\", \"FY\"","6b9f060d":"# Task 3: Correlation between Payment Method and Order Status","2a6662da":"#### Droping Columns = ['Unnamed: 21', 'Unnamed: 22', 'Unnamed: 23', 'Unnamed: 24', 'Unnamed: 25']","3ce27ba5":"### Droping off Missing Values Rows","4839cc4a":"### Looking for 0 (zeros) in integer or float value columns","27ad495a":"## Yearly Orders Status","ee403461":"# Task 4:  Find Correlation Between Order Date and Item Category","04cb77b5":"# Data Pre-Processing","a2e468e8":"### Extract Year and Month from 'M-Y' Column","374edece":"### (A) Yearly Order Status","a082504c":"### Droping off Un-necessary Columns","7479a561":"### (B) Yearly Payment Methods"}}