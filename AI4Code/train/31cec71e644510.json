{"cell_type":{"32b7d833":"code","7148c7e4":"code","bb4b1bf0":"code","020bb3d2":"code","b76a8f30":"code","eb53ecb5":"code","592a23a5":"code","25a4ed98":"code","89048126":"code","9b42b661":"code","5bba1a35":"code","dd500466":"code","f3b4e90f":"code","68bf3078":"code","70b79b86":"code","cfe1b233":"code","ea72cd49":"code","99ed0e99":"code","7e761122":"code","cf493a76":"code","6765ff85":"code","377c7cc4":"code","4c5e1172":"code","68602b7a":"code","9eefef87":"code","5c23c564":"code","72555ab2":"code","c9772c45":"code","0a31aa8b":"code","dfcdde44":"code","56cb9249":"code","603e448f":"code","dc9ccc69":"code","2e0a9883":"code","e0aa55fb":"code","835e95d4":"code","6faa67df":"code","af60d7ee":"code","2a4a65a9":"code","1c908201":"code","1f764238":"code","fe4e7dd7":"code","5f95d88c":"code","2e35b1a1":"code","85763e28":"code","95d9f51e":"code","a6ae955c":"code","ff57254a":"code","b001f048":"code","3420f4e3":"code","c84a0a8b":"code","bb4b2291":"code","0e1c64cf":"code","e7acc7f4":"code","23224175":"code","e4b1c61f":"code","cf3b824d":"code","b09b6c95":"code","84d4c87e":"code","a0e23813":"markdown","f944c7f2":"markdown","e6196c3f":"markdown","5cfdcff8":"markdown","4c704b7c":"markdown","6a00bc02":"markdown","320ea3a3":"markdown","0347cdb4":"markdown","eeb596d4":"markdown","bd477093":"markdown","4295e535":"markdown"},"source":{"32b7d833":"#https:\/\/www.kaggle.com\/haneenhossam\/notebook1ec0c2ed26","7148c7e4":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np #linear algebra","bb4b1bf0":"df = pd.read_csv(\"..\/input\/housing\/housing2 (1) (1).csv\", sep = \",\" , encoding=\"utf-8\")","020bb3d2":"df","b76a8f30":"# knw types and nulls\ndf.info() # differ if we remove the bracket","eb53ecb5":"#know some satatistical inf\ndf.describe()","592a23a5":"#to hw much nulls to deermine methods\ndf.isnull().sum()","25a4ed98":"#df.describe(include = \"object\")","89048126":"# as husehlds can not be object because f no so change it\ndf['households'].replace(\"no\", np.nan , inplace=True)\ndf['households'] = pd.to_numeric(df['households'])","9b42b661":"#to hw much nulls to deermine methods\ndf.isnull().sum()","5bba1a35":"# as cnclusin we can drop easily housing median and househlds only","dd500466":"#df['ocean_proximity'].value_counts().to_frame()","f3b4e90f":"#sns.countplot(df.ocean_proximity)","68bf3078":"#new_val = pd.get_dummies(df.ocean_proximity)\n#new_val.head(5)","70b79b86":"#r we can make label encoding by this\nfrom sklearn import preprocessing\n#create label encoder \nlabelencoder =preprocessing.LabelEncoder() \n\n#label encoding works by alphabiical order \ndf['ocean_proximity'] = labelencoder.fit_transform(df['ocean_proximity'])","cfe1b233":"df['gender'].unique()","ea72cd49":"\ndf['gender'].replace(\"male\", 0 , inplace = True)\ndf['gender'].replace(\"female\", 1 , inplace = True)\n","99ed0e99":"df.head()","7e761122":"#to hw much nulls to deermine methods\ndf.isnull().sum()","cf493a76":"df.hist(bins=120 , figsize=(14,16))\nplt.show()","6765ff85":" # we can fill poulation housing media because f their lw values\ndf['population'].fillna(value= df['population'].mean(),inplace=True)\ndf['housing_median_age'].fillna(value= df['housing_median_age'].mean(),inplace=True)\n#fill null values in this column with the mean","377c7cc4":"df.hist(bins=120 , figsize=(14,16))\nplt.show()\n# so it seems that mean effecs good as their is n changes","4c5e1172":"#to hw much nulls to deermine methods\ndf.isnull().sum()","68602b7a":"# to all the missing values on the samme row or not in order to eliminate them  or not\nplt.figure(figsize=(8,6))\nsns.heatmap(df.isnull(), cbar = False)","9eefef87":"# here we can use hreshhold\n#Keep only the rows having 2 or more valid data\n#Keep only the rows having 3 or more valid data\n#Keep only columns where 11 or more than 11 valid data is available\n#Keep only rows where 70% or more valid data is available\n#Keep only columns where 80% or more valid data","5c23c564":"#X = data.drop(\"median_house_value\" , axis = 1).values\n#y = data['median_house_value'].values","72555ab2":"fill_list = df['total_bedrooms']\ndf['total_bedrooms'] = df['total_bedrooms'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))","c9772c45":"df.fillna(method='ffill', inplace=True)","0a31aa8b":"#to hw much nulls to deermine methods\ndf.isnull().sum()","dfcdde44":"df.hist(bins=120 , figsize=(14,16))\nplt.show()\n# so it seems that mean effecs good as their is n changes","56cb9249":"plt.figure(figsize=(15,12))\nsns.heatmap(df.corr(), annot=True)","603e448f":"# s is the size and c is the color\ndf.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4, s=df[\"population\"]\/100, \n             label=\"population\", c=\"median_house_value\", figsize=(12,8),\n             cmap=plt.get_cmap(\"jet\"), colorbar=True)","dc9ccc69":"from pandas.plotting import scatter_matrix\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\", \"housing_median_age\"]\nscatter_matrix(df[attributes], figsize=(12, 8))\n","2e0a9883":"df.plot(kind = \"box\" , subplots = True , figsize = (18,15) ,  layout = (4,4))\nplt.show()","e0aa55fb":"#to hw much nulls to deermine methods\ndf.isnull().sum()","835e95d4":"import warnings\nwarnings.filterwarnings('ignore')\nplt.figure(figsize=(16,5))\nplt.subplot(1,3,1)\nsns.distplot(df['total_rooms'])\nplt.subplot(1,3,2)\nsns.distplot(df['total_bedrooms'])\nplt.subplot(1,3,3)\nsns.distplot(df['population'])\nplt.show()","6faa67df":"#Finding the Boundary Values\nprint(\"Highest allowed\",df['total_rooms'].mean() + 3*df['total_rooms'].std())\nprint(\"Lowest allowed\",df['total_rooms'].mean() - 3*df['total_rooms'].std())\n","af60d7ee":"#Finding the Outliers\ndf[(df['total_rooms'] > 9180.60883614371) | (df['total_rooms'] < -3909.0826733530125)]","2a4a65a9":"#Trimming of Outliers\nnew_df = df[(df['total_rooms'] > 9180.60883614371) | (df['total_rooms'] < -3909.0826733530125)]\nnew_df","1c908201":"df.head()","1f764238":"X = df.drop(\"median_house_value\" , axis = 1).values\ny = df['median_house_value'].values","fe4e7dd7":"df.info()","5f95d88c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.20 , random_state=10)","2e35b1a1":"#Standardize training and test datasets.\n#==============================================================================\n# Feature scaling is to bring all the independent variables in a dataset into\n# same scale, to avoid any variable dominating  the model. Here we will not \n# transform the dependent variables.\n#==============================================================================\n\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","85763e28":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)","95d9f51e":"lr.score(X_train,y_train)","a6ae955c":"lr.score(X_test,y_test)","ff57254a":"from sklearn.linear_model import Ridge\nrid = Ridge()","b001f048":"rid.fit(X_train,y_train)","3420f4e3":"rid.score(X_train,y_train)","c84a0a8b":"rid.score(X_test,y_test)","bb4b2291":"y_pred = lr.predict(X_test)","0e1c64cf":"y_pred2 = rid.predict(X_test)","e7acc7f4":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test , y_pred)\nr2","23224175":"test = pd.DataFrame({'Predicted':y_pred,'Actual':y_test})\nfig= plt.figure(figsize=(16,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[:50])\nplt.legend(['Actual','Predicted'])\nsns.jointplot(x='Actual',y='Predicted',data=test,kind='reg',);","e4b1c61f":"import statsmodels.api as sm\nfrom scipy import stats\nX2 = sm.add_constant(X)\nest = sm.OLS(y,X2)\nest2 = est.fit()\nprint(est2.summary())","cf3b824d":"fig = plt.figure(figsize=(25,8))\nplt.scatter(y_test,y_pred,marker=\"o\",edgecolors =\"r\",s=60)\nplt.scatter(y_train,lr.predict(X_train),marker=\"+\",s=50,alpha=0.5)\nplt.xlabel(\" Actual median_house_value\")\nplt.ylabel(\" Predicted median_house_value\")","b09b6c95":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=20, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","84d4c87e":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","a0e23813":"Recovering missing values ","f944c7f2":"perfrm randm forest regressin","e6196c3f":"by doing this we can work on households","5cfdcff8":"\n\nthe dataset was full of nanvalues which causes ineffecience model\nWe have done a lot but the results surely can be improved, at least one could try:\nfeature engineering in the future.\n","4c704b7c":"Plot the Distribution plots for the features","6a00bc02":"1. longitude: A measure of how far west a house is; a higher value is farther west\n\n2. latitude: A measure of how far north a house is; a higher value is farther north\n\n3. housingMedianAge: Median age of a house within a block; a lower number is a newer building\n\n4. totalRooms: Total number of rooms within a block\n\n5. totalBedrooms: Total number of bedrooms within a block\n\n6. population: Total number of people residing within a block\n\n7. households: Total number of households, a group of people residing within a home unit, for a block\n\n8. medianIncome: Median income for households within a block of houses (measured in tens of thousands of US Dollars)\n\n9. medianHouseValue: Median house value for households within a block (measured in US Dollars)\n\n10. oceanProximity: Location of the house w.r.t ocean\/sea","320ea3a3":"# visualize data","0347cdb4":"# ouliers","eeb596d4":"###### Not all values are in the same row So we can't drop them","bd477093":"label encoding","4295e535":"# sacling"}}