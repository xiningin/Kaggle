{"cell_type":{"03e67a92":"code","401beb43":"code","86470d1c":"code","fea804a6":"code","be2ff4c3":"code","3186908c":"code","564b46e1":"code","bc00629e":"code","a53c52f3":"code","571553f5":"code","118b7eb2":"code","77011cba":"code","23c83d40":"code","a4f92553":"code","50f446bb":"code","5a9766a1":"code","c16e710f":"code","504d41a1":"code","42d854ab":"code","9deb7757":"code","280dd88f":"code","bd1c8f53":"code","5c2b52dd":"code","8bd17448":"code","e99c480c":"code","210ffa14":"code","63b13684":"code","9952e8cd":"code","88292034":"code","2f70836c":"code","0f782d8c":"code","21a790a2":"code","9ec98c7c":"code","55af12ea":"code","68132db8":"code","3a2296a6":"code","cfebe2df":"code","28df2925":"code","0ad58570":"code","4c774c10":"code","acac41b7":"code","db9c1d74":"code","6508929b":"code","8f219096":"code","d0f45d1b":"code","834880c4":"code","096c5907":"code","b84c2906":"code","33ba4f64":"code","0351dc4b":"code","71dc2675":"code","fad9db8c":"code","fde8ae6f":"code","43fbde44":"code","34d95632":"markdown","bfb0b02e":"markdown","86324265":"markdown","836e750f":"markdown","752084d8":"markdown","34ddfe2a":"markdown","8d080fe1":"markdown","d867d327":"markdown","9295e72c":"markdown","5a30a004":"markdown","9e370d2c":"markdown","6bcc5308":"markdown","8bfcac68":"markdown","1004d352":"markdown","e77aab49":"markdown","5c00f43f":"markdown","777b38f5":"markdown","975ab1ad":"markdown"},"source":{"03e67a92":"# importing required libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","401beb43":"warnings.filterwarnings('ignore')","86470d1c":"sns.set_style('whitegrid')","fea804a6":"# reading the titanic dataset into notebook\n\ntrain = pd.read_csv('..\/input\/titanicdataset-traincsv\/train.csv')","be2ff4c3":"# checking the top 5 rows of the dataset\n\ntrain.head()","3186908c":"# General information on the dataset\n\ntrain.info()","564b46e1":"# Statistical information on the dataset\n\ntrain.describe()","bc00629e":"sns.countplot(x='Survived', hue='Sex', data=train)","a53c52f3":"# Probability of survival on both female and male\n\ntrain[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","571553f5":"sns.countplot(x='Pclass', hue='Survived', data=train)","118b7eb2":"# Probability of survival on the passenger class\n\ntrain[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","77011cba":"# Histogram depicting different ages with survival\n\ng = sns.FacetGrid(data=train, col='Survived')\ng.map(sns.distplot, 'Age', kde=False)","23c83d40":"# Number of siblings or spouses\n\nsns.countplot(x='SibSp', hue='Survived', data=train)","a4f92553":"# Probability of survival\n\ntrain[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='SibSp', ascending=True)","50f446bb":"# Parents and children\n\nsns.countplot(x='Parch', hue='Survived', data=train)","5a9766a1":"train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Parch', ascending=True)","c16e710f":"train['Fare'].describe()","504d41a1":"sns.distplot(train['Fare'], bins=50)","42d854ab":"g = sns.FacetGrid(data=train, col='Survived')\ng.map(sns.distplot, 'Fare', kde=False, bins=10)","9deb7757":"sns.countplot(x='Embarked',hue='Survived', data=train)","280dd88f":"train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","bd1c8f53":"sns.pairplot(train, hue='Survived', diag_kws={'bw': 0.2})","5c2b52dd":"plt.figure(figsize=(15,7))\nsns.boxplot(x='Pclass', y='Age', data=train)","8bd17448":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","e99c480c":"train[train['Age'].isnull()]","210ffa14":"by_sex_class = train.groupby(['Sex', 'Pclass'])","63b13684":"def impute_median(series):\n    return series.fillna(series.median())","9952e8cd":"train['Age'] = by_sex_class['Age'].transform(impute_median)","88292034":"train[train['Embarked'].isnull()]","2f70836c":"# filling up the null values with the top most common category\n\ntrain['Embarked'] = train['Embarked'].fillna(train['Embarked'].value_counts().index[0])","0f782d8c":"train['Embarked'].isnull().any()","21a790a2":"train[train['PassengerId'] == 830]","9ec98c7c":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","55af12ea":"train.drop('Cabin', axis=1, inplace=True)","68132db8":"train.head()","3a2296a6":"train.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","cfebe2df":"train.head()","28df2925":"Sex = pd.get_dummies(train['Sex'], drop_first=True)","0ad58570":"Embarked = pd.get_dummies(train['Embarked'], drop_first=True)","4c774c10":"Pclass = pd.get_dummies(train['Pclass'], drop_first=True)","acac41b7":"# As we have our dummy variables, we will drop the existing columns and replace them with our dummy variables.\n\ntrain.drop(['Sex', 'Embarked', 'Pclass'], axis=1, inplace=True)","db9c1d74":"# concatenating the dummy variables to the dataset\n\ntrain = pd.concat([train, Sex, Embarked, Pclass], axis=1)","6508929b":"train.head()","8f219096":"X = train.drop(['Survived'], axis=1)\ny = train['Survived']","d0f45d1b":"from sklearn.model_selection import train_test_split","834880c4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","096c5907":"# we will use a simple logistic regression model\n\nfrom sklearn.linear_model import LogisticRegression","b84c2906":"logmodel = LogisticRegression()","33ba4f64":"logmodel.fit(X_train, y_train)","0351dc4b":"predictions = logmodel.predict(X_test)","71dc2675":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","fad9db8c":"print(classification_report(y_test, predictions))","fde8ae6f":"print(confusion_matrix(y_test, predictions))","43fbde44":"print(accuracy_score(y_test, predictions) * 100)","34d95632":"Splitting the dataset into 70-30 for training and testing","bfb0b02e":"All the null values have been filled except Cabin column, which has a huge amount of null values we will drop the column itself.","86324265":"def impute_age(cols):\n    age = cols[0]\n    pclass = cols[1]\n    \n    if pd.isnull(age):\n        if pclass == 1:\n            return 37\n        elif pclass == 2:\n            return 29\n        else:\n            return 24\n    else: \n        return age","836e750f":"Converting the categorical columns into dummy columns.\nthe pd.get_dummies() takes a column which has multiple categories,\nand creates a column wise representation for those categories by assigning numbers.","752084d8":"# Titanic Survival Analysis\n","34ddfe2a":"## **Training and Testing**","8d080fe1":"We will also drop the column which are not continuous or categorical.","d867d327":"The dataset has many null values from Age column to Cabin and Embarked, we will try to either fill up those null values or drop the column.","9295e72c":"The Age column has 177 null or NaN values, since it is a small number and it has a good relationship whith Pclass column we will try to fill up those values with in relation to Pclass.","5a30a004":"Predicted No:Actual No: 135\n\nPredicted No:Actual Yes: 38\n\nPredicted Yes:Actual No: 19\n\nPredicted Yes:Actual Yes: 76","9e370d2c":"### **Observation**\n\nSince the Age column has some null values, we can use the above boxplot to fill up those null values ","6bcc5308":"## **Handling Missing values**","8bfcac68":"## **EDA**","1004d352":"train['Age'] = train[['Age','Pclass']].apply(impute_age, axis=1)","e77aab49":"Now the Age column has been filled with some useful info with in elation with Pclass column, next is the Embarked column.","5c00f43f":"Let's see how our model did against the data","777b38f5":"## **Feature selection and converting categorical feature into numerical data**","975ab1ad":"**Data Definitions**\n\n\n* PassengerId - Unique Id of each passenger on the ship\n* Survived - '0' for not survived & '1' for survived\n* Pclass - Passenger class: '1' for 1st class, '2' for 2nd class & '3' for 3rd class\n* Name - Passenger name\n* Sex - Passenger gender: 'male' or 'female'\n* Age - Passenger age\n* SibSp - No. of siblings or spouses aborded Titanic together with the passenger\n* Parch - No. of parents or children aborded Titanic together with the passenger\n* Ticket - Passenger ticket number\n* Fare - Passenger ticket fare\n* Cabin - Passenger cabin number\n* Embarked - Encoded name of city passenger embarked"}}