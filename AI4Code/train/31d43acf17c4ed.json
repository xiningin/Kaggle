{"cell_type":{"4ab501c0":"code","23a0788c":"code","00eb1e92":"code","4c6bd9c7":"code","685129bd":"code","5bd62e15":"code","0117bf29":"code","8267bbb8":"code","6e46ff25":"markdown","2eac33bd":"markdown","5b834aae":"markdown","44d15855":"markdown"},"source":{"4ab501c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir('..\/input'))\n\n# Any results you write to the current directory are saved as output.","23a0788c":"# !pip install split-folders    # Library to split Train and valid Image sets in ImageNet style","00eb1e92":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom skimage.transform import resize\nimport xml.etree.ElementTree as ET\nimport os\nimport numpy as np\nfrom tqdm import tqdm\nimport cv2\nimport pandas as pd\n# import splitfolders","4c6bd9c7":"path = '..\/input\/handwritten-mathematical-expressions'\ndef seed_everything(seed):\n\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n   \n\nSEED = 999\nseed_everything(SEED)","685129bd":"def get_traces_data(inkml_file_abs_path):\n    \n\n    traces_data = []\n    \n    tree = ET.parse(inkml_file_abs_path)\n    root = tree.getroot()\n    doc_namespace = \"{http:\/\/www.w3.org\/2003\/InkML}\"\n\n#   'Stores traces_all with their corresponding id'\n    traces_all = [{'id': trace_tag.get('id'),\n    \t\t\t\t\t'coords': [[round(float(axis_coord)) if float(axis_coord).is_integer() else round(float(axis_coord) * 10000) \\\n    \t\t\t\t\t\t\t\t\tfor axis_coord in coord[1:].split(' ')] if coord.startswith(' ') \\\n    \t\t\t\t\t\t\t\telse [round(float(axis_coord)) if float(axis_coord).is_integer() else round(float(axis_coord) * 10000) \\\n    \t\t\t\t\t\t\t\t\tfor axis_coord in coord.split(' ')] \\\n    \t\t\t\t\t\t\tfor coord in (trace_tag.text).replace('\\n', '').split(',')]} \\\n    \t\t\t\t\t\t\tfor trace_tag in root.findall(doc_namespace + 'trace')]\n\n#   'Sort traces_all list by id to make searching for references faster'\n    traces_all.sort(key=lambda trace_dict: int(trace_dict['id']))\n\n#   'Always 1st traceGroup is a redundant wrapper'\n    traceGroupWrapper = root.find(doc_namespace + 'traceGroup')\n\n    if traceGroupWrapper is not None:\n        for traceGroup in traceGroupWrapper.findall(doc_namespace + 'traceGroup'):\n\n            label = traceGroup.find(doc_namespace + 'annotation').text\n\n#    'traces of the current traceGroup'\n            traces_curr = []\n            for traceView in traceGroup.findall(doc_namespace + 'traceView'):\n\n#     'Id reference to specific trace tag corresponding to currently considered label'\n                traceDataRef = int(traceView.get('traceDataRef'))\n\n#     'Each trace is represented by a list of coordinates to connect'\n                single_trace = traces_all[traceDataRef]['coords']\n                traces_curr.append(single_trace)\n\n            traces_data.append({'label': label, 'trace_group': traces_curr})\n\n    else:\n#             'Consider Validation data that has no labels'\n        [traces_data.append({'trace_group': [trace['coords']]}) for trace in traces_all]\n\n    return traces_data","5bd62e15":"def inkml2img(input_path, output_path):\n#     print(input_path)\n#     print(pwd)\n    traces = get_traces_data(input_path)\n#     print(traces)\n    path = input_path.split('\/')\n    path = path[len(path)-1].split('.')\n    path = path[0]+'_'\n    file_name = 0\n    for elem in traces:\n        \n#         print(elem)\n#         print('-------------------------')\n#         print(elem['label'])\n        \n        plt.gca().invert_yaxis()\n        plt.gca().set_aspect('equal', adjustable='box')\n        plt.axes().get_xaxis().set_visible(False)\n        plt.axes().get_yaxis().set_visible(False)\n        plt.axes().spines['top'].set_visible(False)\n        plt.axes().spines['right'].set_visible(False)\n        plt.axes().spines['bottom'].set_visible(False)\n        plt.axes().spines['left'].set_visible(False)\n        ls = elem['trace_group']\n        output_path = output_path  \n        \n        for subls in ls:\n#             print(subls)\n            \n            data = np.array(subls)\n#             print(data)\n            x,y=zip(*data)\n            plt.plot(x,y,linewidth=2,c='black')\n            \n        capital_list = ['A','B','C','F','X','Y']\n        if elem['label'] in capital_list:\n            label = 'capital_'+elem['label']\n        else:\n            label = elem['label']\n        ind_output_path = output_path + label       \n#         print(ind_output_path)\n        try:\n            os.mkdir(ind_output_path)\n        except OSError:\n#             print (\"Folder %s Already Exists\" % ind_output_path)\n#             print(OSError.strerror)\n            pass\n        else:\n#             print (\"Successfully created the directory %s \" % ind_output_path)\n            pass\n#         print(ind_output_path+'\/'+path+str(file_name)+'.png')\n        if(os.path.isfile(ind_output_path+'\/'+path+str(file_name)+'.png')):\n            # print('1111')\n            file_name += 1\n            plt.savefig(ind_output_path+'\/'+path+str(file_name)+'.png', bbox_inches='tight', dpi=100)\n        else:\n            plt.savefig(ind_output_path+'\/'+path+str(file_name)+'.png', bbox_inches='tight', dpi=100)\n        plt.gcf().clear()","0117bf29":"os.mkdir('\/kaggle\/Image_data')\nos.mkdir('\/kaggle\/Image_data\/finaltrain')","8267bbb8":"# path = os.getcwd()\nfiles = os.listdir(path+'\/CROHME_training_2011')\nfor file in tqdm(files):\n#     print(file)\n    inkml2img(path+'\/CROHME_training_2011\/'+file,'\/kaggle\/Image_data\/finaltrain\/')\n    ","6e46ff25":"Kernal for Modelling and Interpretation is available [here](https:\/\/www.kaggle.com\/kalikichandu\/classifying-handwritten-math-symbols-fastai)","2eac33bd":"**Reference**\n\nhttps:\/\/github.com\/ThomasLech\/CROHME_extractor\n\nhttps:\/\/github.com\/RobinXL\/inkml2img","5b834aae":"Comment below incase if any clarification is needed.","44d15855":"**PLEASE UPVOTE IF FOUND INTERESTING**"}}