{"cell_type":{"361147c3":"code","9a86289e":"code","b5189dff":"code","c4dc6007":"code","27adc002":"code","eb6a0f15":"code","776d06f1":"code","de8bf4ad":"code","cb065bb8":"code","7eacc1e9":"code","ff3eda1b":"code","3997eb51":"markdown","01e1f278":"markdown","24259f6f":"markdown","c651c3b9":"markdown","30dd0da0":"markdown"},"source":{"361147c3":"import numpy as np \nimport pandas as pd \n\nfrom random import randint\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport os","9a86289e":"flowers_path = '\/kaggle\/input\/flowers-dataset\/train'","b5189dff":"classes = os.listdir(flowers_path)\nclasses","c4dc6007":"image_size = (128, 128)\nbatch_size = 32\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    flowers_path,\n    validation_split=0.25,\n    subset=\"training\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    flowers_path,\n    validation_split=0.25,\n    subset=\"validation\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)","27adc002":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(classes[np.argmax(labels[i])])\n        plt.axis(\"off\")\nplt.show()","eb6a0f15":"# tamano de la imagen de entrada\ninput_shape = (128, 128, 3)\n\n# definicion del modelo Perceptron\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=input_shape),\n        layers.Flatten(),\n        layers.Dense(200, activation=\"relu\"),\n        layers.Dense(200, activation=\"relu\"),\n        # Cree mas capas Dense aqui: \n        # layers.Dense(XX, activation=\"AA\"),\n        \n        layers.Dense(len(classes), activation=\"softmax\"),\n    ]\n)\n\n# Construir el modelo y ver la arquitectura\nmodel.build(input_shape)\nmodel.summary()","776d06f1":"model.compile(loss='categorical_crossentropy', optimizer='adamax', metrics=['accuracy'])","de8bf4ad":"history = model.fit(train_ds, epochs=15, batch_size=5000, verbose=1, validation_data=val_ds)","cb065bb8":"history = model.fit(train_ds, epochs=15, batch_size=5000, verbose=1, validation_data=val_ds)","7eacc1e9":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nxepochs = [n for n in range(len(history.history['accuracy']))]\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Accuracy over time\", \"Loss over time\"))\n\nfor metric in ['accuracy', 'val_accuracy']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=1)\n\nfor metric in ['loss', 'val_loss']:\n    fig.add_trace(go.Scatter(x=xepochs, y=history.history[metric], mode='lines+markers', name=metric), row=1, col=2)\n\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=1)\nfig.update_xaxes(title_text=\"Epoch\", row=1, col=2)\n\nfig.update_yaxes(title_text=\"Accuracy\", row=1, col=1)\nfig.update_yaxes(title_text=\"Loss\", row=1, col=2)\n\nfig.show()","ff3eda1b":"plt.figure(figsize=(20, 10))\nfor images, labels in val_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        \n        img_array = images[i].numpy().astype(\"uint8\")\n        prediction = model.predict(np.array([img_array]))\n        prediction_name = classes[np.argmax(prediction)]\n        real_name = classes[np.argmax(labels[i])]\n        \n        plt.imshow(img_array)\n        if prediction_name == real_name:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'g'})\n        else:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'r'})\n        \n        plt.axis(\"off\")","3997eb51":"## History Plots","01e1f278":"# Load data","24259f6f":"## Neural Network","c651c3b9":"## Predictions","30dd0da0":"## Images"}}