{"cell_type":{"f9d5fc6f":"code","77efb55e":"code","00988ab2":"code","021f8f54":"code","9510e3a7":"code","d4fdec51":"code","9f74195a":"code","2c2b712d":"code","bf13aeec":"code","cf8ca253":"code","2254bc14":"code","fba5504a":"code","53e81ce1":"code","06542da4":"code","62e092c9":"code","1bd64be8":"code","ad44060d":"code","e3f1fce4":"code","f679c6ce":"code","e2d36dfd":"code","301b0e20":"code","cd53663e":"code","323ec6af":"code","a3a0c1ab":"code","8613a908":"code","3f76fb77":"code","5aa546c8":"code","4f930e13":"code","678f6513":"code","03759451":"code","e4910bf0":"code","a91941bb":"code","afb53455":"markdown"},"source":{"f9d5fc6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77efb55e":"df_train = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Test.csv')","00988ab2":"df_train.dtypes","021f8f54":"df_test.dtypes","9510e3a7":"df_train['Close'] = df_train['Close'].str.replace(',', \"\")\ndf_train['Volume'] = df_train['Volume'].str.replace(',', \"\")\ndf_test['Volume'] = df_test['Volume'].str.replace(',', \"\")","d4fdec51":"df_train.dtypes","9f74195a":"df_train['Close'] = pd.to_numeric(df_train['Close'])\ndf_train['Volume'] = pd.to_numeric(df_train['Volume'])\ndf_test['Volume'] = pd.to_numeric(df_test['Volume'])","2c2b712d":"df_train.dtypes","bf13aeec":"df_test.dtypes","cf8ca253":"import matplotlib.pyplot as plt","2254bc14":"plt.plot(pd.to_datetime(df_train['Date']),df_train['Open'])","fba5504a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(df_train[['Open']])\nXX_scaled = scaler.fit_transform(df_train[['Open', 'High', 'Low', 'Close', 'Volume']])\n","53e81ce1":"from sklearn.preprocessing import MinMaxScaler\nsca1 = MinMaxScaler()\nXX_test_scaled_open = sca1.fit_transform(df_test[['Open']])","06542da4":"XX_test_scaled = scaler.fit_transform(df_test[['Open', 'High', 'Low', 'Close', 'Volume']])\n","62e092c9":"X_train = []\nfor i in range(1198):\n    X_train.append(X_scaled[i:i+61, 0])\n    \nX_train = np.array(X_train)\nX_train.shape","1bd64be8":"XX = []\nfor j in range(5):\n    YY = []\n    for i in range(1198):\n        YY.append(XX_scaled[i:i+61, j])\n    XX.append(YY)\nXX = np.array(XX)\nXX.shape","ad44060d":"XX_train = XX[:,:,:60]\n","e3f1fce4":"#X_train , y_train = X[:,:60], X[:,-1]\n#X_train = X[:,:60]\ny_train = X_train[:,-1]\n#X_train.shape, y_train.shape\nXX_train.shape, y_train.shape","f679c6ce":"XX_train = XX_train.reshape(1198,60,5)","e2d36dfd":"from tensorflow.keras.layers import LSTM, Dense\nfrom tensorflow.keras.models import Sequential","301b0e20":"model = Sequential()\nmodel.add(LSTM(100, return_sequences = True, input_shape = (60,5)))\nmodel.add(LSTM(100, return_sequences = True))\nmodel.add(LSTM(100, return_sequences = True))\nmodel.add(LSTM(100, return_sequences = False))\nmodel.add(Dense(1))","cd53663e":"model.compile(loss = 'mean_squared_error')","323ec6af":"hist = model.fit(XX_train,y_train, batch_size=32, epochs=50)","a3a0c1ab":"plt.plot(hist.history['loss'][1:])","8613a908":"XX_test = np.concatenate([XX_scaled[-60:], XX_test_scaled], axis=0)","3f76fb77":"XX_test.shape","5aa546c8":"X = []\nfor j in range(5):\n    YY = []\n    for i in range(20):\n        YY.append(XX_test[i:i+60, j])\n    X.append(YY)\nX = np.array(X)\nX.shape","4f930e13":"X = X.reshape(20,60,5)","678f6513":"y_pre = model.predict(X)\ny_pre","03759451":"df_test['Open']","e4910bf0":"y=sca1.inverse_transform(y_pre)\ny","a91941bb":"plt.plot(df_test['Open'], c='blue')\nplt.plot(y, c='red')","afb53455":"Open Stock price prediction using previous dates stock details, like open, high, low and volume.\nhttps:\/\/www.kaggle.com\/medharawat\/google-stock-price"}}