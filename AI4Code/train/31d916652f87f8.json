{"cell_type":{"060a0dbf":"code","44c71d8a":"code","3e90efcf":"code","d26d0e6e":"code","398fe808":"code","2c9cced4":"code","06d97b4f":"code","6b1815a1":"code","b015dbc2":"code","368d8356":"code","2722b969":"code","c19deffc":"code","88d02449":"code","b7394540":"code","0af685f8":"code","d2e7d013":"code","c84dfd60":"code","d740589e":"code","a6d9a98d":"code","ae8ff223":"code","5cdc23c2":"code","156766af":"code","8e402fc8":"code","77fa3525":"code","24fa3bf4":"code","ebcc1f86":"code","6bf3e0a4":"code","f78c6e2e":"code","6bb8a757":"code","b7920639":"code","0b5c6aca":"code","146ecedf":"code","cf977601":"code","f6b73fb0":"code","f577f578":"code","a9e07fe7":"code","9c378534":"markdown","98647ab3":"markdown","235d0d65":"markdown","1f96fb27":"markdown","628fb7ac":"markdown","3f6e953d":"markdown","2092fe92":"markdown","469a8897":"markdown","d4f4081c":"markdown","d80881d0":"markdown","d1e91be5":"markdown","b8da26c9":"markdown","5eb5dfab":"markdown","aa03bfb8":"markdown","f4eff1dd":"markdown","ba203c68":"markdown","885be4df":"markdown","aee6b312":"markdown","3923973f":"markdown","b0834337":"markdown","6868dcc5":"markdown","ce45f359":"markdown","25d79482":"markdown","502291d8":"markdown","8af7f1ea":"markdown","e0b146aa":"markdown","c4c6f31a":"markdown"},"source":{"060a0dbf":"import pandas as pd\n\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","44c71d8a":"train_df.head(20)","3e90efcf":"test_df.head(20)","d26d0e6e":"train_df.shape","398fe808":"train_df.isnull().sum()","2c9cced4":"train_df.drop([\"Name\",\"Ticket\",\"Cabin\"], axis = 1, inplace = True)","06d97b4f":"# I'll fill missing age with median age because I don't want missing values effect the prediction.\ntrain_df[\"Age\"].fillna((train_df[\"Age\"].mean()), inplace=True)","6b1815a1":"# Also I remove the rows with missing values\ntrain_df = train_df.dropna()","b015dbc2":"# Here is the result\n\ntrain_df.isnull().sum()","368d8356":"train_df.head(20)","2722b969":"train_df[\"Survived\"].value_counts().plot(kind=\"bar\")","c19deffc":"train_df.plot(kind = \"scatter\", x = \"Survived\", y=\"Age\")","88d02449":"df = []\ndf.append(list(train_df[train_df[\"Pclass\"]==1][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Pclass\"]==2][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Pclass\"]==3][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Sex\"]==\"male\"][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Sex\"]==\"female\"][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Embarked\"]==\"S\"][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Embarked\"]==\"C\"][\"Survived\"].value_counts().sort_index()))\ndf.append(list(train_df[train_df[\"Embarked\"]==\"Q\"][\"Survived\"].value_counts().sort_index()))\n\nlabels = [\"class 1\",\"class 2\",\"class 3\",\"male\",\"female\",\"S\",\"C\",\"Q\"]\nnotsurvived = [sub[0] for sub in df]\nsurvived = [sub[1] for sub in df]\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, notsurvived, width, label='Died')\nrects2 = ax.bar(x + width\/2, survived, width, label='Survived')\n\nax.set_ylabel('Number of people')\nax.set_title('Survivors')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nfig.tight_layout()\n\nplt.show()","b7394540":"train_df[train_df[\"Survived\"]==1][\"Parch\"].value_counts().sort_index().plot(kind = \"bar\", title = \"Survived\")","0af685f8":"train_df[train_df[\"Survived\"]==0][\"Parch\"].value_counts().sort_index().plot(kind = \"bar\", title = \"Died\")","d2e7d013":"train_df[train_df[\"Survived\"]==1][\"SibSp\"].value_counts().sort_index().plot(kind = \"bar\",title = \"Survived\")","c84dfd60":"train_df[train_df[\"Survived\"]==0][\"SibSp\"].value_counts().sort_index().plot(kind = \"bar\",title = \"Died\")","d740589e":"train_df[train_df[\"Survived\"]==1][\"Fare\"].value_counts().sort_index().plot( title = \"Survived\")","a6d9a98d":"train_df[train_df[\"Survived\"]==0][\"Fare\"].value_counts().sort_index().plot( title = \"Died\")","ae8ff223":"train_df[(train_df[\"Sex\"]==\"female\")&(train_df[\"Pclass\"]==1)][\"Survived\"].value_counts().plot(kind=\"pie\")","5cdc23c2":"train_df[(train_df[\"Sex\"]==\"male\")&(train_df[\"Pclass\"]==3)][\"Survived\"].value_counts().plot(kind=\"pie\")","156766af":"train_df.dtypes","8e402fc8":"print(train_df[\"Sex\"].unique())\nprint(train_df[\"Embarked\"].unique())","77fa3525":"sex_mapping = {\"male\": 0, \"female\": 1}\ntrain_df['Sex'] = train_df['Sex'].map(sex_mapping)\nprint(train_df[\"Sex\"].unique())","24fa3bf4":"embarked_mapping = {\"S\":0,\"C\":1,\"Q\":2}\ntrain_df['Embarked'] = train_df['Embarked'].map(embarked_mapping)\nprint(train_df[\"Embarked\"].unique())","ebcc1f86":"test_df.head(10)","6bf3e0a4":"test_df[\"Age\"].fillna((test_df[\"Age\"].mean()), inplace=True)\ntest_df[\"Fare\"].fillna((test_df[\"Fare\"].mean()), inplace=True)","f78c6e2e":"test_df.isnull().sum()","6bb8a757":"test_df.drop([\"Name\",\"Ticket\",\"Cabin\"], axis = 1, inplace = True)","b7920639":"test_df['Sex'] = test_df['Sex'].map(sex_mapping)","0b5c6aca":"test_df['Embarked'] = test_df['Embarked'].map(embarked_mapping)","146ecedf":"# Here the result \n\ntest_df.head(10)","cf977601":"y_try = train_df[\"Survived\"]\nX_try = train_df.drop(\"Survived\",axis = 1)","f6b73fb0":"from sklearn.svm import SVC\nmodel = SVC(kernel=\"linear\",random_state=0)\nmodel.fit(X_try,y_try)","f577f578":"prediction = model.predict(test_df)","a9e07fe7":"output = pd.DataFrame({'PassengerId': test_df[\"PassengerId\"], 'Survived': prediction})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9c378534":"Also, I'll cross Pclass and Survived with gender. I'll use pie graph for better visualization.","98647ab3":"While most of the first class passengers survived, the majority of third class passengers did not survive. Although most men die, most women survive.","235d0d65":"# 2. Ask questions","1f96fb27":"People who pay less than 100 are more likely to die, while others survive longer.","628fb7ac":"# 1.Upload the Datasets","3f6e953d":"While the probability of living for women is high, the chances of living for men are very low.","2092fe92":"**A1: 60% of people survived and 40% dead.**","469a8897":"**Q1: How many percent of people survived and how many percent are dead?**","d4f4081c":"**Q2: Is there any age group, anyone not died from this age group?**","d80881d0":"A person boarded with more than 2 siblings or spouses more likely survived and a person boarded without siblings or spouse more likely dead.","d1e91be5":"A person with more than 2 children is more likely to survive, and a person who is alone is more likely to die.","b8da26c9":"# Project Target:\n\n**I'll use machine learning to create a model that predicts which passengers survived in the Titanic.**\n","5eb5dfab":"Now, I'll cross Parch and Survived now.","aa03bfb8":"I'll cross Fare and Survive here.","f4eff1dd":"**Note:**\n\nCabin variable have missing values in many rows. That's why, I'll drop that column. The names of the passengers aren't that important to data analysis for my project, also the ticket name, so I will remove both variable.","ba203c68":"**Steps for the project**\n\n* 1.Upload the Datasets\n* 2.Ask question\n* 3.Explore with graphs\n* 4.Prepare Data for Model\n* 5.Create the model","885be4df":"Let's look at the relationship between class and gender with survival.","aee6b312":"# 4. Prepare Data for Modelling","3923973f":"I will transform Embarked and Sex columns to numerical values, because machine learning models work with number better.","b0834337":"Also, I'll use test data","6868dcc5":"**Variables**\n\nSurvived: 0 = No, 1 = Yes\n\nPclass: A proxy for socio-economic status (SES): 1st = Upper, 2nd = Middle, 3rd = Lower\n\nAge: Age is fractional. If less than 1. If the age is estimated, is it in the form of xx.5\n\nSibSp: The dataset defines family relations in this way: Sibling = brother, sister, stepbrother, stepsister; Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nParch: The dataset defines family relations in this way: Parent = mother, father; Child = daughter, son, stepdaughter, stepson; Some children travelled only with a nanny, therefore parch=0 for them.","ce45f359":"And, I'll cross Sibsb and Survived.","25d79482":"Let's transform the test data","502291d8":"# 3. Explore with Graphs","8af7f1ea":"First of all, I want check datatype.","e0b146aa":"# 5. Create the Model","c4c6f31a":"**No!**"}}