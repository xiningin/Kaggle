{"cell_type":{"59f72456":"code","54ee8035":"code","18771e58":"code","4da10655":"code","0ba0f52c":"code","86ea044d":"code","d35a4405":"code","8ed49348":"code","99448bd4":"code","b41b28d4":"code","36f6d8fe":"code","ba1ac806":"code","6b2c01f3":"code","b64d9168":"code","23c5de8d":"code","0b14c3d2":"code","7b076195":"code","7b437a53":"code","18fee5e9":"code","d7b0c495":"code","df479714":"code","cdb70cb0":"code","10121f95":"code","420e9e42":"code","1e701e57":"code","6720ef7c":"code","4119e4d2":"code","5a83a193":"code","a5ddf938":"code","8c5de9e5":"code","90c0bc98":"code","5f860c45":"code","50f594e1":"code","85407f19":"code","76c77425":"code","d5542eff":"code","29701232":"markdown","31630381":"markdown","9ae2481e":"markdown","184f9189":"markdown","252ea1b1":"markdown"},"source":{"59f72456":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54ee8035":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","18771e58":"df = pd.read_csv('\/kaggle\/input\/mt-cars\/Lesson 3 Practice\/mtcars.csv')","4da10655":"df.head()","0ba0f52c":"df.columns","86ea044d":"df.isnull().sum()","d35a4405":"df.describe()","8ed49348":"df[['vs', 'hp']].groupby(['vs'], as_index=False).mean().sort_values(by='hp', ascending=False)","99448bd4":"df[['am', 'hp']].groupby(['am'], as_index=False).mean().sort_values(by='hp', ascending=False)","b41b28d4":"df[['carb', 'hp']].groupby(['carb'], as_index=False).mean().sort_values(by='hp', ascending=False)","36f6d8fe":"df[['model','hp']].groupby(['model'], as_index=False).mean().sort_values(by='hp', ascending=False)","ba1ac806":"df.plot(kind='scatter', x=\"mpg\", y='hp', figsize=(5,3))","6b2c01f3":"df.plot(kind='scatter', x=\"disp\", y='hp', figsize=(5,3))","b64d9168":"df.plot(kind='scatter', x=\"drat\", y='hp', figsize=(5,3))","23c5de8d":"df.plot(kind='scatter', x=\"wt\", y='hp', figsize=(5,3))","0b14c3d2":"df.plot(kind='scatter', x=\"qsec\", y='hp', figsize=(5,3))","7b076195":"df.hist(figsize=(20,15))\nplt.show()","7b437a53":"X = df.drop(['hp','model'],axis=1)\ny = df['hp']","18fee5e9":"y1 = np.array(y)","d7b0c495":"from sklearn.preprocessing import StandardScaler\nss_x = StandardScaler()\nss_y = StandardScaler()\nX_scaled = ss_x.fit_transform(X)\ny_scaled = ss_y.fit_transform(y1.reshape(-1,1))","df479714":"from sklearn.linear_model import LinearRegression\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X_scaled, y_scaled)\nlin_pred = linear_regressor.predict(X_scaled)","cdb70cb0":"from sklearn.metrics import mean_squared_error,r2_score\nimport math\nprint('MSE',mean_squared_error(y_scaled, lin_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, lin_pred)))\nprint('R2 Score',r2_score(y_scaled, lin_pred))\nprint('Adj R^2 value:',1 - (1-linear_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","10121f95":"from sklearn.preprocessing import PolynomialFeatures\npoly_features = PolynomialFeatures(degree=4)\nX_poly = poly_features.fit_transform(X_scaled)","420e9e42":"from sklearn.linear_model import LinearRegression\npoly_regressor = LinearRegression()\npoly_regressor.fit(X_poly, y_scaled)","1e701e57":"poly_pred = poly_regressor.predict(X_poly)","6720ef7c":"print('MSE',mean_squared_error(y_scaled, poly_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, poly_pred)))\nprint('R2_Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-poly_regressor.score(X_poly, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_poly.shape[1]-1))","4119e4d2":"from sklearn.svm import SVR\nsvr_regressor = SVR(kernel=\"rbf\")\nsvr_regressor.fit(X_scaled, y_scaled.ravel())","5a83a193":"pred_val_scaled = svr_regressor.predict(X_scaled)","a5ddf938":"print('MSE',mean_squared_error(y_scaled, pred_val_scaled))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, pred_val_scaled)))\nprint('R2_Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-svr_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","8c5de9e5":"from sklearn.tree import DecisionTreeRegressor\ntree_regressor = DecisionTreeRegressor(criterion=\"mse\")\ntree_regressor.fit(X_scaled, y_scaled)","90c0bc98":"tree_pred = tree_regressor.predict(X_scaled)","5f860c45":"print('MSE',mean_squared_error(y_scaled, tree_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, tree_pred)))\nprint('R2 Score',r2_score(y_scaled, tree_pred))\nprint('Adj R^2 value:',1 - (1-tree_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","50f594e1":"from sklearn.ensemble import RandomForestRegressor\nforest_regressor = RandomForestRegressor(n_estimators=300, random_state=0)\nforest_regressor.fit(X_scaled, y_scaled.ravel())","85407f19":"forest_pred = forest_regressor.predict(X_scaled)","76c77425":"print('MSE',mean_squared_error(y_scaled, forest_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, forest_pred)))\nprint('R2 Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-forest_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","d5542eff":"### Decision Tree is the best regressor in this case","29701232":"### Polynomial Regression","31630381":"### SVR Regreesion","9ae2481e":"### Linear Regression","184f9189":"### EDA","252ea1b1":"### Scaling Data"}}