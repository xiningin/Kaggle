{"cell_type":{"9fa09380":"code","62799d84":"code","d4a3db59":"code","bb84cdb3":"code","b4ae8cc4":"code","d2aba3d2":"code","91c7e7cd":"code","ce8d6d63":"code","f4d54757":"code","b8d0b63e":"code","891b0c3b":"code","401375a8":"code","7d0855da":"code","94c972bf":"code","97871b48":"code","78c6fbbb":"code","4187426b":"code","659bd68f":"code","9fcbd08f":"code","30ecfcb8":"code","331a2512":"code","23c8b23e":"code","d97a93e4":"code","67dae799":"code","2278b7b2":"code","3af2cbb7":"code","67fde2ac":"code","45db383c":"code","78cd5131":"code","06f389df":"code","62463303":"markdown","e168575b":"markdown","53e5b0e5":"markdown","33363162":"markdown","1b0d7112":"markdown","ae2558fa":"markdown","84765308":"markdown","28da5513":"markdown"},"source":{"9fa09380":"import re\nimport string\nimport numpy as np \nimport random\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n\nimport nltk\nfrom nltk.corpus import stopwords\n\nfrom tqdm import tqdm\nimport os\nimport nltk\nimport spacy\nimport random\nfrom spacy.util import compounding\nfrom spacy.util import minibatch\n","62799d84":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]","d4a3db59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb84cdb3":"df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\", encoding=\"latin-1\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\", encoding=\"latin-1\")\n\ndf = df.dropna(how=\"any\", axis=1)\n\ndf.head()","b4ae8cc4":"df['text_len'] = df['text'].apply(lambda x: len(x.split(' ')))\ndf.head()","d2aba3d2":"len(df[df['target']==0])","91c7e7cd":"balance_counts = df.groupby('target')['target'].agg('count').values\nbalance_counts","ce8d6d63":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=['Fake'],\n    y=[balance_counts[0]],\n    name='Fake',\n    text=[balance_counts[0]],\n    textposition='auto',\n    marker_color=primary_blue\n))\nfig.add_trace(go.Bar(\n    x=['Real disaster'],\n    y=[balance_counts[1]],\n    name='Real disaster',\n    text=[balance_counts[1]],\n    textposition='auto',\n    marker_color=primary_grey\n))\nfig.update_layout(\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Dataset distribution by target<\/span>'\n)\nfig.show()","f4d54757":"disaster_df = df[df['target'] == 1]['text_len'].value_counts().sort_index()\nfake_df = df[df['target'] == 0]['text_len'].value_counts().sort_index()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=disaster_df.index,\n    y=disaster_df.values,\n    name='Real disaster',\n    fill='tozeroy',\n    marker_color=primary_blue,\n))\nfig.add_trace(go.Scatter(\n    x=fake_df.index,\n    y=fake_df.values,\n    name='Fake',\n    fill='tozeroy',\n    marker_color=primary_grey,\n))\nfig.update_layout(\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Data Roles in Different Fields<\/span>'\n)\nfig.show()","b8d0b63e":"def remove_url(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'', text)\n\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\n        '['\n        u'\\U0001F600-\\U0001F64F'  # emoticons\n        u'\\U0001F300-\\U0001F5FF'  # symbols & pictographs\n        u'\\U0001F680-\\U0001F6FF'  # transport & map symbols\n        u'\\U0001F1E0-\\U0001F1FF'  # flags (iOS)\n        u'\\U00002702-\\U000027B0'\n        u'\\U000024C2-\\U0001F251'\n        ']+',\n        flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\n\ndef remove_html(text):\n    html = re.compile(r'<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')\n    return re.sub(html, '', text)\n\n# Special thanks to https:\/\/www.kaggle.com\/tanulsingh077 for this function\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = str(text).lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\n        'http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', \n        '', \n        text\n    )\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    \n    text = remove_url(text)\n    text = remove_emoji(text)\n    text = remove_html(text)\n    \n    return text\n\nstop_words = stopwords.words('english')\nmore_stopwords = ['u', 'im', 'c']\nstop_words = stop_words + more_stopwords\n\ndef remove_stopwords(text):\n    text = ' '.join(word for word in text.split(' ') if word not in stop_words)\n    return text\n\nstemmer = nltk.SnowballStemmer(\"english\")\n\ndef stemm_text(text):\n    text = ' '.join(stemmer.stem(word) for word in text.split(' '))\n    return text","891b0c3b":"def preprocess_data(text):\n    # Clean puntuation, urls, and so on\n    text = clean_text(text)\n    # Remove stopwords and Stemm all the words in the sentence\n    text = ' '.join(stemmer.stem(word) for word in text.split(' ') if word not in stop_words)\n\n    return text","401375a8":"df['text_clean'] = df['text'].apply(preprocess_data)\ntest_df['text_clean'] = test_df['text'].apply(preprocess_data)\n\ndf.head()","7d0855da":"twitter_mask = np.array(Image.open('\/kaggle\/input\/masksforwordclouds\/twitter_mask3.jpg'))\n\nwc = WordCloud(\n    background_color='white', \n    max_words=200, \n    mask=twitter_mask,\n)\nwc.generate(' '.join(text for text in df.loc[df['target'] == 1, 'text_clean']))\nplt.figure(figsize=(18,10))\nplt.title('Top words for Real Disaster tweets', \n          fontdict={'size': 22,  'verticalalignment': 'bottom'})\nplt.imshow(wc)\nplt.axis(\"off\")\nplt.show()","94c972bf":"wc = WordCloud(\n    background_color='white', \n    max_words=200, \n    mask=twitter_mask,\n)\nwc.generate(' '.join(text for text in df.loc[df['target'] == 0, 'text_clean']))\nplt.figure(figsize=(18,10))\nplt.title('Top words for Fake messages', \n          fontdict={'size': 22,  'verticalalignment': 'bottom'})\nplt.imshow(wc)\nplt.axis(\"off\")\nplt.show()","97871b48":"import plotly.figure_factory as ff\n\nx_axes = ['Real', 'Fake']\ny_axes =  ['Fake', 'Real']\n\ndef conf_matrix(z, x=x_axes, y=y_axes):\n    \n    z = np.flip(z, 0)\n\n    # change each element of z to type string for annotations\n    z_text = [[str(y) for y in x] for x in z]\n\n    # set up figure \n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='Viridis')\n\n    # add title\n    fig.update_layout(title_text='<b>Confusion matrix<\/b>',\n                      xaxis = dict(title='Predicted value'),\n                      yaxis = dict(title='Real value')\n                     )\n\n    # add colorbar\n    fig['data'][0]['showscale'] = True\n    \n    return fig\n","78c6fbbb":"# how to define X and y (from the SMS data) for use with COUNTVECTORIZER\nx = df['text_clean']\ny = df['target']\n\n# Split into train and test sets\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=42)\nprint(len(x_train), len(y_train))\nprint(len(x_test), len(y_test))","4187426b":"from sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.pipeline import Pipeline\nimport xgboost as xgb\n\npipe = Pipeline([\n    ('bow', CountVectorizer()), \n    ('tfid', TfidfTransformer()),  \n    ('model', xgb.XGBClassifier(\n        use_label_encoder=False,\n        eval_metric='auc',\n    ))\n])","659bd68f":"from sklearn import metrics\n\n# Fit the pipeline with the data\npipe.fit(x_train, y_train)\n\ny_pred_class = pipe.predict(x_test)\ny_pred_train = pipe.predict(x_train)\n\nprint('Train: {}'.format(metrics.accuracy_score(y_train, y_pred_train)))\nprint('Test: {}'.format(metrics.accuracy_score(y_test, y_pred_class)))\n\nconf_matrix(metrics.confusion_matrix(y_test, y_pred_class))","9fcbd08f":"from nltk.tokenize import word_tokenize\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.initializers import Constant\nfrom keras.layers import (LSTM, \n                          Embedding, \n                          BatchNormalization,\n                          Dense, \n                          TimeDistributed, \n                          Dropout, \n                          Bidirectional,\n                          Flatten, \n                          GlobalMaxPool1D)\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers.embeddings import Embedding\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.optimizers import Adam\n\nfrom sklearn.metrics import (\n    precision_score, \n    recall_score, \n    f1_score, \n    classification_report,\n    accuracy_score\n)","30ecfcb8":"train_tweets = df['text_clean'].values\ntest_tweets = test_df['text_clean'].values\ntrain_target = df['target'].values","331a2512":"# Calculate the length of our vocabulary\nword_tokenizer = Tokenizer()\nword_tokenizer.fit_on_texts(train_tweets)\n\nvocab_length = len(word_tokenizer.word_index) + 1\nvocab_length","23c8b23e":"def embed(corpus): \n    return word_tokenizer.texts_to_sequences(corpus)\n\nlongest_train = max(train_tweets, key=lambda sentence: len(word_tokenize(sentence)))\nlength_long_sentence = len(word_tokenize(longest_train))\n\ntrain_padded_sentences = pad_sequences(\n    embed(train_tweets), \n    length_long_sentence, \n    padding='post'\n)\ntest_padded_sentences = pad_sequences(\n    embed(test_tweets), \n    length_long_sentence,\n    padding='post'\n)\n\ntrain_padded_sentences","d97a93e4":"embeddings_dictionary = dict()\nembedding_dim = 100\n\n# Load GloVe 100D embeddings\nwith open('\/kaggle\/input\/glove6b100dtxt\/glove.6B.100d.txt') as fp:\n    for line in fp.readlines():\n        records = line.split()\n        word = records[0]\n        vector_dimensions = np.asarray(records[1:], dtype='float32')\n        embeddings_dictionary [word] = vector_dimensions\n\n# embeddings_dictionary","67dae799":"# Now we will load embedding vectors of those words that appear in the\n# Glove dictionary. Others will be initialized to 0.\n\nembedding_matrix = np.zeros((vocab_length, embedding_dim))\n\nfor word, index in word_tokenizer.word_index.items():\n    embedding_vector = embeddings_dictionary.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[index] = embedding_vector\n        \nembedding_matrix","2278b7b2":"# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    train_padded_sentences, \n    train_target, \n    test_size=0.25\n)","3af2cbb7":"# Model from https:\/\/www.kaggle.com\/mariapushkareva\/nlp-disaster-tweets-with-glove-and-lstm\/data\n\ndef glove_lstm():\n    model = Sequential()\n    \n    model.add(Embedding(\n        input_dim=embedding_matrix.shape[0], \n        output_dim=embedding_matrix.shape[1], \n        weights = [embedding_matrix], \n        input_length=length_long_sentence\n    ))\n    \n    model.add(Bidirectional(LSTM(\n        length_long_sentence, \n        return_sequences = True, \n        recurrent_dropout=0.2\n    )))\n    \n    model.add(GlobalMaxPool1D())\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(length_long_sentence, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(length_long_sentence, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(1, activation = 'sigmoid'))\n    model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\nmodel = glove_lstm()\nmodel.summary()","67fde2ac":"# Load the model and train!!\n\nmodel = glove_lstm()\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True\n)\nreduce_lr = ReduceLROnPlateau(\n    monitor = 'val_loss', \n    factor = 0.2, \n    verbose = 1, \n    patience = 5,                        \n    min_lr = 0.001\n)\nhistory = model.fit(\n    X_train, \n    y_train, \n    epochs = 7,\n    batch_size = 32,\n    validation_data = (X_test, y_test),\n    verbose = 1,\n    callbacks = [reduce_lr, checkpoint]\n)","45db383c":"def plot_learning_curves(history, arr):\n    fig, ax = plt.subplots(1, 2, figsize=(20, 5))\n    for idx in range(2):\n        ax[idx].plot(history.history[arr[idx][0]])\n        ax[idx].plot(history.history[arr[idx][1]])\n        ax[idx].legend([arr[idx][0], arr[idx][1]],fontsize=18)\n        ax[idx].set_xlabel('A ',fontsize=16)\n        ax[idx].set_ylabel('B',fontsize=16)\n        ax[idx].set_title(arr[idx][0] + ' X ' + arr[idx][1],fontsize=16)\n        \ndef show_metrics(pred_tag, y_test):\n    print(\"F1-score: \", f1_score(pred_tag, y_test))\n    print(\"Precision: \", precision_score(pred_tag, y_test))\n    print(\"Recall: \", recall_score(pred_tag, y_test))\n    print(\"Acuracy: \", accuracy_score(pred_tag, y_test))\n    print(\"-\"*50)\n    print(classification_report(pred_tag, y_test))","78cd5131":"plot_learning_curves(history, [['loss', 'val_loss'],['accuracy', 'val_accuracy']])","06f389df":"preds = model.predict_classes(X_test)\nshow_metrics(preds, y_test)","62463303":"# Modeling","e168575b":"# WordCloud visualization","53e5b0e5":"## LSTM","33363162":"# EDA","1b0d7112":"### Results","ae2558fa":"# Data preprocessing","84765308":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:250%; text-align:center; border-radius: 15px 50px;\">Natural Languague Processing (NLP) \ud83d\udcdd Disaster Tweets<\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\"><b>I have developed a kernel to <a href='https:\/\/www.kaggle.com\/andreshg\/nlp-natural-languague-processing-guidelines'>Step-by-Step NLP guide for beginners<\/a>. Please, consider reading it before going into this one.<\/b><\/p>","28da5513":"# Glove + LSTM"}}