{"cell_type":{"09bd3ab0":"code","59fa31b3":"code","e5cae5a8":"code","b7a3ee3b":"code","c3ba770e":"code","c139aa4e":"code","33282698":"code","e23f85b3":"code","05f04ef4":"code","ac66d87e":"code","a3220684":"code","c06c2b33":"code","131bd7b9":"code","2fc44d9a":"code","7523ad95":"code","496f7c1c":"code","d0251b6b":"code","a2abe71c":"code","53093eae":"code","71d7528c":"code","2c58c5fd":"code","6ef0a7f0":"code","26a9fd80":"code","6db99dc2":"markdown","db526cda":"markdown","4b54a374":"markdown","e5c70aff":"markdown","1d0df7b5":"markdown","5a28a2f5":"markdown","41793c6e":"markdown","fa24cd70":"markdown","6429f3a3":"markdown","b9bf0592":"markdown"},"source":{"09bd3ab0":"import pandas as pd\nimport sklearn","59fa31b3":"adult = pd.read_csv(\"..\/input\/adult-db\/train_data.csv\",header=0, index_col=0, na_values=\"?\")","e5cae5a8":"print(adult.shape)","b7a3ee3b":"adult.head()","c3ba770e":"adult[\"native.country\"].value_counts()","c139aa4e":"import matplotlib.pyplot as plt\n%matplotlib inline","33282698":"adult[\"age\"].value_counts().plot(kind=\"bar\")","e23f85b3":"adult[\"sex\"].value_counts()","05f04ef4":"adult[\"education.num\"].value_counts().plot(kind=\"bar\")","ac66d87e":"adult[\"occupation\"].value_counts().plot(kind=\"bar\")","a3220684":"pd.unique(adult[\"relationship\"])","c06c2b33":"from sklearn.preprocessing import LabelEncoder\nfrom statistics import mode\nimport numpy as np\nnadult = adult.dropna()\nadult_fill = adult.fillna(-1)\nfor col in [1,3,5,6,7,8,9,13]:\n    nadult = adult.iloc[:,col].dropna()\n    label_encoder = LabelEncoder().fit(nadult)\n    nadult_encoded = label_encoder.transform(nadult)\n    adult_fill.iloc[np.where(adult_fill.iloc[:,col].values==-1)[0],col] = label_encoder.inverse_transform([int(mode(nadult_encoded))])\nfor col in [0,2,4,10,11,12]:\n    adult_fill.iloc[np.where(adult_fill.iloc[:,col].values==-1)[0],col] = int(np.mean(adult.iloc[:,col].dropna().values))\nadult_fill","131bd7b9":"from sklearn.preprocessing import MinMaxScaler\nminmaxscaler = MinMaxScaler()\ncol_inds = [0,1,4,5,6,7,8,10,11,12] # 0,1 [0,1,3,4,5,6,7,8,9,10,13] 2 [0,1,3,4,5,6,7,8,9,10,11,12,13] 3 [0,1,4,5,6,7,8,10,11,12]\nXadult_unscaled = adult_fill.iloc[:,col_inds].apply(LabelEncoder().fit_transform)\nXadult = minmaxscaler.fit_transform(Xadult_unscaled)\nYadult = adult_fill.income\nprint(Xadult_unscaled.columns.values)","2fc44d9a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nimport numpy as np\nscore_medio = np.zeros(50)\nstd_score = np.zeros(50)\nfor i in range(1,51):\n    knn = KNeighborsClassifier(n_neighbors=i, p=1)\n    scores = cross_val_score(knn, Xadult, Yadult, cv=10)\n    score_medio[i-1]=np.mean(scores)\n    std_score[i-1]=np.std(scores)\nprint(np.argmax(score_medio)+1)\nprint(np.amax(score_medio))","7523ad95":"plt.errorbar(range(1,51), score_medio, yerr=1.96*np.array(std_score), fmt='-o')","496f7c1c":"testAdult = pd.read_csv(\"..\/input\/adult-db\/test_data.csv\",header=0, index_col=0, na_values=\"?\")\ntestAdult.shape","d0251b6b":"testAdult_fill = testAdult.fillna(-1)\nfor col in [1,3,5,6,7,8,9,13]:\n    nTestAdult = testAdult.iloc[:,col].dropna()\n    label_encoder = LabelEncoder().fit(nTestAdult)\n    ntestAdult_encoded = label_encoder.transform(nTestAdult)\n    testAdult_fill.iloc[np.where(testAdult_fill.iloc[:,col].values==-1)[0],col] = label_encoder.inverse_transform([int(mode(ntestAdult_encoded))])\nfor col in [0,2,4,10,11,12]:\n    testAdult_fill.iloc[np.where(testAdult_fill.iloc[:,col].values==-1)[0],col] = int(np.mean(testAdult.iloc[:,col].dropna().values))\ntestAdult_fill","a2abe71c":"XtestAdult_unscaled = testAdult_fill.iloc[:,col_inds].apply(LabelEncoder().fit_transform)\nXtestAdult = minmaxscaler.transform(XtestAdult_unscaled)","53093eae":"knn = KNeighborsClassifier(n_neighbors=34,p=1)\nknn.fit(Xadult,Yadult)","71d7528c":"YtestAdult = knn.predict(XtestAdult)\nYtestAdult","2c58c5fd":"prediction = pd.DataFrame(testAdult.index)\nprediction[\"income\"] = YtestAdult","6ef0a7f0":"prediction","26a9fd80":"prediction.to_csv(\"adult_prediction_5.csv\", index=False)","6db99dc2":"### Classifica\u00e7\u00e3o dos dados de teste :","db526cda":"### Analise dos dados","4b54a374":"### Carregamento base de teste","e5c70aff":"### Rotina para estimar dados faltantes","1d0df7b5":"### Ajuste de escala dos dados e sele\u00e7\u00e3o das colunas a utilizar","5a28a2f5":"### Ajuste de escala dos dados e sele\u00e7\u00e3o das colunas a utilizar","41793c6e":"### Escolha de k por valida\u00e7\u00e3o cruzada","fa24cd70":"### Leitura de dados","6429f3a3":"### Rotina para estimar dados faltantes","b9bf0592":"### Defini\u00e7\u00e3o do classificador KNN utilizado"}}