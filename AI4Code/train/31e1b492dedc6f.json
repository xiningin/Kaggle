{"cell_type":{"3742d3d9":"code","c9b2d606":"code","b552d585":"code","d36b3212":"code","f17d72a4":"code","6a8e4334":"code","97537bde":"code","594774d6":"code","3ad2ed76":"code","35a521a6":"markdown","9c6bf70d":"markdown","3e09f610":"markdown","a36f5ee7":"markdown"},"source":{"3742d3d9":"import cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n%matplotlib inline","c9b2d606":"df = pd.read_csv('..\/input\/train_masks.csv', usecols=['img'])\ndf['masks'] = '..\/input\/train_masks\/' + df.img.str.replace('.jpg', '_mask.gif')\ndf['img'] = '..\/input\/train\/' + df.img\nprint(df.shape)\ndf.head()","b552d585":"img_size = 256\n\ndef read_img(path):\n    x = cv2.imread(path)\n    x = cv2.resize(x, (img_size, img_size))\n    x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)\n    return x\n\ndef read_mask(path):\n    x = Image.open(path)\n    x = x.resize([img_size, img_size])\n    return np.asarray(x)","d36b3212":"from joblib import Parallel, delayed\n\nwith Parallel(n_jobs=12, prefer='threads', verbose=1) as ex:\n    x = ex(delayed(read_img)(e) for e in df.img)\n    \nx = np.stack(x)\nx.shape","f17d72a4":"with Parallel(n_jobs=12, prefer='threads', verbose=1) as ex:\n    y = ex(delayed(read_mask)(e) for e in df.masks)\n    \ny = np.stack(y)[..., None]\ny.shape","6a8e4334":"from sklearn.model_selection import train_test_split\n\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)\nx_train.shape, x_val.shape","97537bde":"def plot_img(x, y):\n    fig, axes = plt.subplots(1, 2, figsize=(15,6))\n    axes[0].imshow(x)\n    axes[1].imshow(y[:,:,0])\n    for ax in axes: ax.set_axis_off()\n    plt.show()","594774d6":"idx = np.random.choice(len(x_train))\nsample_x, sample_y = x_train[idx], y_train[idx]\nplot_img(sample_x, sample_y)","3ad2ed76":"import keras.backend as K\nfrom keras.losses import binary_crossentropy\n\ndef dice_coef(y_true, y_pred, smooth=1.0):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef bce_dice_loss(y_true, y_pred):\n    return 0.5 * binary_crossentropy(y_true, y_pred) - dice_coef(y_true, y_pred)\n\n# Ej:\n# model.compile(Adam(lr=1e-3), bce_dice_loss, metrics=['accuracy', dice_coef])","35a521a6":"# Train validation split","9c6bf70d":"https:\/\/www.kaggle.com\/c\/carvana-image-masking-challenge","3e09f610":"# View","a36f5ee7":"# Model"}}