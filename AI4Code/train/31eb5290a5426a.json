{"cell_type":{"794a70d3":"code","ad980b7d":"code","47b671c6":"code","a6a0a92a":"code","eff5af61":"code","c7b042dd":"code","aa9dbb15":"code","b2e2ae7d":"code","598b05b9":"code","18c2661c":"code","0179d67c":"code","19a5ea80":"code","0358c2fa":"code","e49c3174":"code","d7dd5fb2":"code","a31bebe5":"code","b81ed44b":"code","cd24cd6b":"code","c3efbb7f":"code","b88b6afe":"code","27f45207":"code","3fda8529":"code","7b2ec779":"code","eadce680":"code","c40f44b9":"code","70e77728":"code","101fe1c1":"code","50a2eda1":"code","d3169d1e":"code","5ce4cd9c":"code","54c80b81":"code","5587a12c":"code","e4f0500d":"code","9a31d362":"code","6b54467e":"code","6f6b05a2":"code","e4f68063":"code","9d3bb870":"code","0cca1995":"code","8a9a6d15":"code","9a937f99":"code","232a84e8":"code","99a377fb":"code","47ab8fdb":"code","b68150af":"code","cd00b93d":"code","324d272b":"markdown","6a4d1911":"markdown","0845b85b":"markdown","f3124f12":"markdown","7b91f245":"markdown","c7fcba13":"markdown","e069fa4b":"markdown","21a8acf3":"markdown","82d4dbb1":"markdown"},"source":{"794a70d3":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport tensorflow as tf\nimport time\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.layers import Input, Activation, Dropout, Flatten, Dense, GlobalAveragePooling2D, Conv2D, Conv2DTranspose, LeakyReLU, UpSampling2D\nfrom keras import optimizers\nfrom keras.layers.normalization import BatchNormalization as BN\n\nfrom keras.layers import Lambda, Reshape, Add, AveragePooling2D, MaxPooling2D, Concatenate, SeparableConv2D\nfrom keras.models import Model\nfrom keras.losses import mse, binary_crossentropy\nfrom keras.utils import plot_model\nfrom keras import backend as K\n\nfrom keras.regularizers import l2\n\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img\n\nfrom sklearn.model_selection import train_test_split\n\nfrom PIL import Image, ImageDraw, ImageFilter\nprint(os.listdir(\"..\/input\"))","ad980b7d":"train = pd.read_csv('..\/input\/severstal-steel-defect-detection\/train.csv')","47b671c6":"train['ImageId'] = train['ImageId_ClassId'].str[:-2]\ntrain['ClassId'] = train['ImageId_ClassId'].str[-1:]\ntrain = train[['ImageId','ClassId','EncodedPixels']]\ntrain","a6a0a92a":"train = train.fillna(0)","eff5af61":"train","c7b042dd":"start = time.time()\n\nfilelist = os.listdir(\"..\/input\/severstal-steel-defect-detection\/train_images\/\")\n\ntrain_img = []\n\nfor i in filelist:\n    x = train[train[\"ImageId\"] == i]\n    if len(x[x[\"EncodedPixels\"] == 0]) == 4:\n        pass\n        \n    else:\n        train_img.append(i)\n        \ntrain_img = np.array(train_img)\n\nelapsed_time = time.time() - start\nprint (\"elapsed_time:{0}\".format(elapsed_time) + \"[sec]\")","aa9dbb15":"train_img","b2e2ae7d":"img_name = train[\"ImageId\"][43212]\nimg_name","598b05b9":"abs_path = \"..\/input\/severstal-steel-defect-detection\/train_images\/\"","18c2661c":"seed_image = cv2.imread(abs_path+img_name)\nseed_image = cv2.cvtColor(seed_image, cv2.COLOR_BGR2GRAY)\nplt.figure(figsize=(15,15))\nplt.imshow(seed_image, \"gray\")","0179d67c":"df_exact = train[train[\"ImageId\"] == img_name]\ndf_exact","19a5ea80":"df_exact2 = df_exact[df_exact[\"ClassId\"] == \"1\"]\ndf_exact2","0358c2fa":"segment_4 = []\nfor i in range(4):\n    x = train[train[\"ImageId\"] == img_name]\n    x2 = x[x[\"ClassId\"] == str(i+1)]\n    x3 = x2[\"EncodedPixels\"].values[0]\n    \n    if x3 ==0:\n        x4 = \"ok\"\n        \n    else:\n        x4 = x3.split()\n        \n    segment_4.append(x4)\n\nsegment_4 = np.array(segment_4)","e49c3174":"segment_4[3]","d7dd5fb2":"#\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u751f\u6210\nseg_img = np.ones([seed_image.shape[0], seed_image.shape[1],5], dtype=np.uint8)\n\nfor j in range(4):\n    \n    seg_np = np.ones([seed_image.shape[0]*seed_image.shape[1]], dtype=np.uint8)\n    \n    if segment_4[j]==\"ok\":\n        pass\n    \n    else:\n        for i in range(len(segment_4[j])\/\/2):\n            start = int(segment_4[j][2*i])\n            length = int(segment_4[j][2*i+1])\n            seg_np[start:start+length]=0\n\n    seg_img[:,:,j+1] = seg_np.reshape([seed_image.shape[1],seed_image.shape[0]]).T","a31bebe5":"seg_img[:,:,0] = seg_img[:,:,0]*4 - seg_img[:,:,1] - seg_img[:,:,2] - seg_img[:,:,3] - seg_img[:,:,4]","b81ed44b":"plt.figure(figsize=(15,15))\nplt.imshow(seed_image, \"gray\")","cd24cd6b":"plt.figure(figsize=(15,15))\nplt.imshow(seg_img[:,:,0],\"gray\",vmin=0,vmax=1)","c3efbb7f":"def vertical_flip(image,fmap, rate=0.5):\n    if np.random.rand() < rate:\n        image = image[::-1, :, :]\n        fmap = fmap[::-1, :, :]\n    return image, fmap\n\n\ndef horizontal_flip(image,fmap, rate=0.5):\n    if np.random.rand() < rate:\n        image = image[:, ::-1, :]\n        fmap = fmap[:, ::-1, :]\n    return image, fmap\n\ndef image_translation(img,fmap):\n    params = np.random.randint(-50, 51)\n    if not isinstance(params, list):\n        params = [params, params]\n    rows, cols, ch = img.shape\n\n    M = np.float32([[1, 0, params[0]], [0, 1, params[1]]])\n    dst = cv2.warpAffine(img, M, (cols, rows))\n    fmap = cv2.warpAffine(fmap, M, (cols, rows))\n    return np.expand_dims(dst, axis=-1), fmap\n\ndef image_shear(img,fmap):\n    params = np.random.randint(-20, 21)*0.01\n    rows, cols, ch = img.shape\n    factor = params*(-1.0)\n    M = np.float32([[1, factor, 0], [0, 1, 0]])\n    dst = cv2.warpAffine(img, M, (cols, rows))\n    fmap = cv2.warpAffine(fmap, M, (cols, rows))\n    return np.expand_dims(dst, axis=-1), fmap\n\ndef image_rotation(img,fmap):\n    params = np.random.randint(-5, 6)\n    rows, cols, ch = img.shape\n    M = cv2.getRotationMatrix2D((cols\/2, rows\/2), params, 1)\n    dst = cv2.warpAffine(img, M, (cols, rows))\n    fmap = cv2.warpAffine(fmap, M, (cols, rows))\n    return np.expand_dims(dst, axis=-1),fmap\n\ndef image_contrast(img,fmap):\n    params = np.random.randint(7, 10)*0.1\n    alpha = params\n    new_img = cv2.multiply(img, np.array([alpha]))                    # mul_img = img*alpha\n    #new_img = cv2.add(mul_img, beta)                                  # new_img = img*alpha + beta\n  \n    return np.expand_dims(new_img, axis=-1), fmap\n\ndef image_blur(img,fmap):\n    params = params = np.random.randint(1, 21)\n    blur = []\n    if params == 1:\n        blur = cv2.blur(img, (3, 3))\n    if params == 2:\n        blur = cv2.blur(img, (4, 4))\n    if params == 3:\n        blur = cv2.blur(img, (5, 5))\n    if params == 4:\n        blur = cv2.GaussianBlur(img, (3, 3), 0)\n    if params == 5:\n        blur = cv2.GaussianBlur(img, (5, 5), 0)\n    if params == 6:\n        blur = cv2.GaussianBlur(img, (7, 7), 0)\n    if params == 7:\n        blur = cv2.medianBlur(img, 3)\n    if params == 8:\n        blur = cv2.medianBlur(img, 5)\n    if params == 9:\n        blur = cv2.blur(img, (6, 6))\n    if params == 10:\n        blur = cv2.bilateralFilter(img, 9, 75, 75)\n    if params > 10:\n        blur = img\n        \n    return blur.reshape([blur.shape[0],blur.shape[1],1]), fmap","b88b6afe":"seed_image2 = np.expand_dims(seed_image, axis=-1)","27f45207":"dst, fmap = vertical_flip(seed_image2, seg_img)\n\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\",vmin=0,vmax=1)","3fda8529":"dst, fmap = horizontal_flip(seed_image2, seg_img)\n\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","7b2ec779":"dst, fmap = image_translation(seed_image2, seg_img)\n\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","eadce680":"dst, fmap = image_shear(seed_image2, seg_img)\nplt.figure(figsize=(15,5))\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","c40f44b9":"dst, fmap = image_rotation(seed_image2, seg_img)\nplt.figure(figsize=(15,5))\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","70e77728":"dst, fmap = image_contrast(seed_image2, seg_img)\nplt.figure(figsize=(15,5))\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","101fe1c1":"dst, fmap = image_blur(seed_image2, seg_img)\nplt.figure(figsize=(15,5))\nplt.subplot(2, 1, 1)\nplt.imshow(dst[:,:,0], \"gray\")\nplt.subplot(2, 1, 2)\nplt.imshow(fmap[:,:,0], \"gray\")","50a2eda1":"np.random.seed(2019)\nnp.random.shuffle(train_img)\ntrain_num = int(len(train_img)*0.80)\ntrain_idx = train_img[:train_num]\nval_idx = train_img[train_num:]","d3169d1e":"len(train_idx)","5ce4cd9c":"len(val_idx)","54c80b81":"img_width, img_height = 1600, 256\nnum_train = len(train_idx)\nnum_val = len(val_idx)\nbatch_size = 8\nprint(num_train, num_val)\nabs_path = \"..\/input\/severstal-steel-defect-detection\/train_images\/\"","5587a12c":"def get_segment_data(train, img_name, img_height, img_width):\n    segment_4 = []\n    for i in range(4):\n        x = train[train[\"ImageId\"] == img_name]\n        x2 = x[x[\"ClassId\"] == str(i+1)]\n        x3 = x2[\"EncodedPixels\"].values[0]\n\n        if x3 ==0:\n            x4 = \"ok\"\n\n        else:\n            x4 = x3.split()\n            \n        segment_4.append(x4)\n\n    segment_4 = np.array(segment_4)\n    \n    #\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u751f\u6210\n    seg_img = np.zeros([img_height, img_width,5], dtype=np.uint8)\n\n    for j in range(4):\n\n        seg_np = np.zeros([img_height*img_width], dtype=np.uint8)\n\n        if segment_4[j]==\"ok\":\n            pass\n\n        else:\n            length=len(segment_4[j])\/\/2\n            for i in range(length):\n                start = int(segment_4[j][2*i])\n                length = int(segment_4[j][2*i+1])\n                seg_np[start:start+length]=1\n\n        seg_img[:,:,j+1] = seg_np.reshape([img_width,img_height]).T\n        \n    #seg_img[:,:,0] = np.ones([seed_image.shape[0], seed_image.shape[1]], dtype=np.uint8) - seg_img[:,:,1] - seg_img[:,:,2] - seg_img[:,:,3] - seg_img[:,:,4]\n                \n    return seg_img","e4f0500d":"def get_random_data(train_pd, img_index_1, abs_path, img_width, img_height, data_aug):\n    image_file = abs_path + img_index_1\n    \n    seed_image = cv2.imread(image_file)\n    seed_image = cv2.cvtColor(seed_image, cv2.COLOR_BGR2GRAY)\n    seed_image = cv2.resize(seed_image, dsize=(img_width, img_height))\n    seed_image = np.expand_dims(seed_image, axis=-1)\n    fmap = get_segment_data(train_pd, img_index_1, img_height, img_width)\n    #fmap = cv2.resize(fmap, dsize=(img_width, img_height))\n    \n    if data_aug:\n        \n        r = np.random.rand()\n        \n        if r >= 0.5:\n    \n            seed_image, fmap = vertical_flip(seed_image, fmap)\n            seed_image, fmap = horizontal_flip(seed_image, fmap)\n            seed_image, fmap = image_shear(seed_image, fmap)\n            seed_image, fmap = image_rotation(seed_image, fmap)\n            seed_image, fmap = image_contrast(seed_image, fmap)\n    \n    seed_image = seed_image \/ 255\n    \n    fmap[:,:,0] = np.ones([img_height, img_width], dtype=np.uint8) - fmap[:,:,1] - fmap[:,:,2] - fmap[:,:,3] - fmap[:,:,4]\n    \n    return seed_image, fmap","9a31d362":"def data_generator(train_pd, img_index, batch_size, abs_path, img_width, img_height, data_aug):\n    '''data generator for fit_generator'''\n    n = len(img_index)\n    i = 0\n    while True:\n        image_data = []\n        fmap_data = []\n        for b in range(batch_size):\n            if i==0:\n                np.random.shuffle(img_index)\n            image, fmap = get_random_data(train_pd, img_index[i], abs_path, img_width, img_height, data_aug)\n            image_data.append(image)\n            fmap_data.append(fmap)\n            i = (i+1) % n\n        image_data = np.array(image_data)\n        fmap_data = np.array(fmap_data)\n        yield image_data, fmap_data\n\ndef data_generator_wrapper(train_pd, img_index, batch_size, abs_path, img_width, img_height, data_aug):\n    n = len(img_index)\n    if n==0 or batch_size<=0: return None\n    return data_generator(train_pd, img_index, batch_size, abs_path, img_width, img_height, data_aug)","6b54467e":"def dice_coef(y_true, y_pred, smooth=1):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef dice_loss(y_true, y_pred):\n    smooth = 1.\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = y_true_f * y_pred_f\n    score = (2. * K.sum(intersection) + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n    return 1. - score\n\ndef bce_dice_loss(y_true, y_pred):\n    return binary_crossentropy(y_true, y_pred) + dice_loss(y_true, y_pred)","6f6b05a2":"inputs = Input(shape=(img_height, img_width, 1))\n\nc1 = Conv2D(8, (3, 3), activation='elu', padding='same') (inputs)\nc1 = Conv2D(8, (3, 3), activation='elu', padding='same') (c1)\np1 = MaxPooling2D((2, 2)) (c1)\n\nc2 = Conv2D(16, (3, 3), activation='elu', padding='same') (p1)\nc2 = Conv2D(16, (3, 3), activation='elu', padding='same') (c2)\np2 = MaxPooling2D((2, 2)) (c2)\n\nc3 = Conv2D(32, (3, 3), activation='elu', padding='same') (p2)\nc3 = Conv2D(32, (3, 3), activation='elu', padding='same') (c3)\np3 = MaxPooling2D((2, 2)) (c3)\n\nc4 = Conv2D(64, (3, 3), activation='elu', padding='same') (p3)\nc4 = Conv2D(64, (3, 3), activation='elu', padding='same') (c4)\np4 = MaxPooling2D(pool_size=(2, 2)) (c4)\n\nc5 = Conv2D(64, (3, 3), activation='elu', padding='same') (p4)\nc5 = Conv2D(64, (3, 3), activation='elu', padding='same') (c5)\np5 = MaxPooling2D(pool_size=(2, 2)) (c5)\n\nc55 = Conv2D(128, (3, 3), activation='elu', padding='same') (p5)\nc55 = Conv2D(128, (3, 3), activation='elu', padding='same') (c55)\n\nu6 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (c55)\nu6 = Concatenate()([u6, c5])\nc6 = Conv2D(64, (3, 3), activation='elu', padding='same') (u6)\nc6 = Conv2D(64, (3, 3), activation='elu', padding='same') (c6)\n\nu71 = Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same') (c6)\nu71 = Concatenate()([u71, c4])\nc71 = Conv2D(32, (3, 3), activation='elu', padding='same') (u71)\nc61 = Conv2D(32, (3, 3), activation='elu', padding='same') (c71)\n\nu7 = Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same') (c61)\nu7 = Concatenate()([u7, c3])\nc7 = Conv2D(32, (3, 3), activation='elu', padding='same') (u7)\nc7 = Conv2D(32, (3, 3), activation='elu', padding='same') (c7)\n\nu8 = Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same') (c7)\nu8 = Concatenate()([u8, c2])\nc8 = Conv2D(16, (3, 3), activation='elu', padding='same') (u8)\nc8 = Conv2D(16, (3, 3), activation='elu', padding='same') (c8)\n\nu9 = Conv2DTranspose(8, (2, 2), strides=(2, 2), padding='same') (c8)\nu9 = Concatenate()([u9, c1])\nc9 = Conv2D(8, (3, 3), activation='elu', padding='same') (u9)\nc9 = Conv2D(8, (3, 3), activation='elu', padding='same') (c9)\n\noutputs = Conv2D(5, (1, 1), activation='sigmoid') (c9)\n\n# instantiate decoder model\nmodel = Model(inputs, outputs)\nmodel.summary()\n\nmodel.compile(optimizer=optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),\n             loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","e4f68063":"start = time.time()\n\nmodel.fit_generator(data_generator_wrapper(train,train_idx, batch_size, abs_path, img_width, img_height, True),\n        steps_per_epoch=max(1, num_train\/\/batch_size),\n        validation_data=data_generator_wrapper(train,val_idx, batch_size, abs_path, img_width, img_height, False),\n        validation_steps=max(1, num_val\/\/batch_size),\n        epochs=10,\n        initial_epoch=0)\n\nelapsed_time = time.time() - start\nprint (\"elapsed_time:{0}\".format(elapsed_time) + \"[sec]\")","9d3bb870":"test_path = \"..\/input\/severstal-steel-defect-detection\/test_images\/\"\n\ntest_list = os.listdir(test_path)\n\nabs_name = test_path + test_list[3]\nseed_image = cv2.imread(abs_name)\nseed_image = cv2.cvtColor(seed_image, cv2.COLOR_BGR2GRAY)\nseed_image = cv2.resize(seed_image, dsize=(img_width, img_height))\nseed_image = np.expand_dims(seed_image, axis=-1)\nseed_image = np.expand_dims(seed_image, axis=0)\nseed_image = seed_image\/255\npred = model.predict(seed_image)","0cca1995":"plt.figure(figsize=(15,15))\nplt.imshow(seed_image[0,:,:,0], \"gray\")","8a9a6d15":"fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, 1, figsize=(15,15), sharey=True)\nsns.heatmap(pred[0,:,:,0],vmin=0, vmax=1, ax=ax1)\nsns.heatmap(pred[0,:,:,1],vmin=0, vmax=1, ax=ax2)\nsns.heatmap(pred[0,:,:,2],vmin=0, vmax=1, ax=ax3)\nsns.heatmap(pred[0,:,:,3],vmin=0, vmax=1, ax=ax4)\nsns.heatmap(pred[0,:,:,4],vmin=0, vmax=1, ax=ax5)","9a937f99":"def make_testdata(a):\n\n    data = []\n    c = 1\n\n    for i in range(a.shape[0]-1):\n        if a[i]+1 == a[i+1]:\n            c += 1\n            if i == a.shape[0]-2:\n                data.append(str(a[i-c+2]))\n                data.append(str(c))\n\n        if a[i]+1 != a[i+1]:\n            data.append(str(a[i-c+1]))\n            data.append(str(c))\n            c = 1\n\n    data = \" \".join(data)\n    return data","232a84e8":"start = time.time()\n\ntest_path = \"..\/input\/severstal-steel-defect-detection\/test_images\/\"\n\ntest_list = os.listdir(test_path)\n\ndata = []\n\nfor fn in test_list:\n    abs_name = test_path + fn\n    seed_image = cv2.imread(abs_name)\n    seed_image = cv2.cvtColor(seed_image, cv2.COLOR_BGR2GRAY)\n    seed_image = cv2.resize(seed_image, dsize=(img_width, img_height))\n    seed_image = np.expand_dims(seed_image, axis=-1)\n    seed_image = np.expand_dims(seed_image, axis=0)\n    seed_image = seed_image\/255\n    pred = model.predict(seed_image)\n    \n    for i in range(4):\n        \n        pred_fi = pred[0,:,:,i+1].T.flatten()\n        pred_fi = np.where(pred_fi > 0.25, 1, 0)\n        pred_fi_id = np.where(pred_fi == 1)\n        pred_fi_id = make_testdata(pred_fi_id[0])\n        x = [fn + \"_\" + str(i+1), pred_fi_id]\n        data.append(x)\n\nelapsed_time = time.time() - start\nprint (\"elapsed_time:{0}\".format(elapsed_time) + \"[sec]\")","99a377fb":"columns = ['ImageId_ClassId', 'EncodedPixels']","47ab8fdb":"d = pd.DataFrame(data=data, columns=columns, dtype='str')","b68150af":"d.to_csv(\"submission.csv\",index=False)","cd00b93d":"df = pd.read_csv(\"submission.csv\")\nprint(df)","324d272b":"# data load","6a4d1911":"# pred test","0845b85b":"# for train index","f3124f12":"# make model","7b91f245":"# import lib","c7fcba13":"# Data Augmentation","e069fa4b":"# indicate segment","21a8acf3":"# indicate image","82d4dbb1":"# train split"}}