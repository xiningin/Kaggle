{"cell_type":{"37b6c38f":"code","808c1676":"code","e2664613":"code","12cddfe5":"code","78d0dc95":"code","50502f3a":"code","e4bcbf9b":"code","18d57317":"code","61c183f9":"code","98fa427a":"code","28a1572b":"code","c707757c":"code","5a9fe812":"code","b5c38cad":"code","e302b5fa":"code","fc745ab9":"code","b7155c01":"code","ee3cca9b":"code","ff3ae4c7":"code","675eaf55":"code","86396ce0":"code","a3236e27":"code","4642216d":"code","5a8055b7":"code","b5393101":"code","73e25372":"code","845300c6":"code","ccc940d0":"code","7ecea95f":"code","8c5508c0":"code","83f87183":"code","16796be7":"code","05870ff8":"code","89fdc2b1":"code","143282b9":"code","f266e276":"code","c00f7845":"code","cc8c32d2":"code","a1693238":"code","511cdb73":"code","a27b7256":"code","e2211ba8":"code","3cf505c4":"markdown","aacd7b36":"markdown","4334a71a":"markdown","d599de54":"markdown","927395ba":"markdown"},"source":{"37b6c38f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","808c1676":"!python -m spacy download es_core_news_sm","e2664613":"!pip install rake_nltk\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport tensorflow as tf \nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.corpus import stopwords\nimport re,string,unicodedata\nfrom collections import  Counter\nimport pyLDAvis\nimport gensim\nimport pyLDAvis.gensim\nfrom tqdm import tqdm\nfrom rake_nltk import Rake\nfrom spacy.tokens import Span \nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer,PorterStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer,PorterStemmer\nimport es_core_news_sm\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import layers\nimport spacy\nnlp = es_core_news_sm.load()\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","12cddfe5":"df = pd.read_csv('\/kaggle\/input\/the-best-sarcasm-annotated-dataset-in-spanish\/sarcasmo.tsv',sep='\\t')","78d0dc95":"df.head(3)","50502f3a":"df.shape","e4bcbf9b":"feature = ['Locutor', 'Locuci\u00f3n','Sarcasmo']\ndf = df[feature]","18d57317":"print(df.Sarcasmo.value_counts())\nsns.countplot(x='Sarcasmo', data=df)","61c183f9":"text_length=df['Locuci\u00f3n'].str.len()\nsns.distplot(text_length)\nplt.show()","98fa427a":"stop=set(stopwords.words('english'))\n\ndef build_list(df,col=\"Locuci\u00f3n\"):\n    corpus=[]\n    lem=WordNetLemmatizer()\n    stop=set(stopwords.words('english'))\n    new= df[col].dropna().str.split()\n    new=new.values.tolist()\n    corpus=[lem.lemmatize(word.lower()) for i in new for word in i if(word) not in stop]\n    \n    return corpus","28a1572b":"corpus=build_list(df)\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:10]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)","c707757c":"plt.figure(figsize=(9,7))\nsns.barplot(x=y,y=x)\nplt.title(\"palabra m\u00e1s com\u00fan en texto\")","5a9fe812":"def plot_count(feature, title, df, size=1, show_percents=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[0:20], palette='Set3')\n    g.set_title(\"Number of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=10)\n    if(show_percents):\n        for p in ax.patches:\n            height = p.get_height()\n            ax.text(p.get_x()+p.get_width()\/2.,\n                    height + 3,\n                    '{:1.2f}%'.format(100*height\/total),\n                    ha=\"center\") \n    ax.set_xticklabels(ax.get_xticklabels());\n    plt.show()    ","b5c38cad":"plot_count('Locuci\u00f3n', 'Top 20 Locuci\u00f3n', df, 3.5)","e302b5fa":"stemmer = PorterStemmer()\ndef stem_text(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            word = stemmer.stem(i.strip())\n            final_text.append(word)\n    return \" \".join(finan_text)","fc745ab9":"plt.figure(figsize = (20, 20))\nwc = WordCloud(background_color = 'lightgray', max_words=1500, width=1600,height = 1000 , stopwords = STOPWORDS).generate(\" \".join(df.Locuci\u00f3n))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.title(\"Visualizaci\u00f3n De Recuento De Palabras De Locuci\u00f3n\")","b7155c01":"df.head(3)","ee3cca9b":"def clean(text):\n    text = text.fillna(\"fillna\").str.lower()\n    text = text.map(lambda x: re.sub('\\\\n',' ',str(x)))\n    text = text.map(lambda x: re.sub(\"\\[\\[User.*\",'',str(x)))\n    text = text.map(lambda x: re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",'',str(x)))\n    text = text.map(lambda x: re.sub(\"\\(http:\/\/.*?\\s\\(http:\/\/.*\\)\",'',str(x)))\n    return text\n","ff3ae4c7":"text = clean(df['Locuci\u00f3n'])","675eaf55":"def text_pro(df):\n    corpus=[]\n    stem = PorterStemmer()\n    lem=WordNetLemmatizer()\n\n    for news in text:\n        #df['Sarcasmo'].dropna()[:900]:\n        words=[w for w in word_tokenize(news) if (w not in stop)]\n        \n        words=[lem.lemmatize(w) for w in words if len(w)>2]\n        \n        corpus.append(words)\n    return corpus","86396ce0":"corpus=text_pro(text)\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]","a3236e27":"lda_model =  gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 4, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)","4642216d":"lda_model.show_topics()","5a8055b7":"pyLDAvis.enable_notebook()\nvis = pyLDAvis.gensim.prepare(lda_model, bow_corpus, dic)\nvis","b5393101":"def text_entity(text):\n    doc = nlp(text)\n    for ent in doc.ents:\n        print(f'Entity: {ent}, Label: {ent.label_}, {spacy.explain(ent.label_)}')","73e25372":"text_entity(df['Locuci\u00f3n'][10])","845300c6":"first = df['Locuci\u00f3n'][11]\ndoc = nlp(first)\nspacy.displacy.render(doc, style='ent',jupyter=True)","ccc940d0":"first = df['Locuci\u00f3n'][150]\ndoc = nlp(first)\nspacy.displacy.render(doc, style='ent',jupyter=True)","7ecea95f":"sen1 = df['Locuci\u00f3n'][75]\ndoc = nlp(sen1)\nspacy.displacy.render(doc, style='ent',jupyter=True)\n\nfor idx, sentence in enumerate(doc.sents):\n    for noun in sentence.noun_chunks:\n        print(f\"sentence {idx+1} has noun chunk '{noun}'\")","8c5508c0":"distri = df['Locuci\u00f3n'][75]\ndoc = nlp(distri)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","83f87183":"distri = df['Locuci\u00f3n'][250]\ndoc = nlp(distri)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","16796be7":"distri = df['Locuci\u00f3n'][370]\ndoc = nlp(distri)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","05870ff8":"for token in doc:\n    print(f\"token: {token.text},\\t dep: {token.dep_},\\t head: {token.head.text},\\t pos: {token.head.pos_},\\\n    ,\\t children: {[child for child in token.children]}\")","89fdc2b1":"df.head(2)","143282b9":"X = df.Locuci\u00f3n\nY = df.Sarcasmo\nle = LabelEncoder()\nY = le.fit_transform(Y)\n#Y = Y.reshape(-1,1)\nX = np.array(X)","f266e276":"vocab_size = 500\nembedding_dim = 16\nmax_length = 120\ntrunc_type='post'\npadding_type='post'\noov_tok = \"<OOV>\"\ntraining_size = 900 ","c00f7845":"training_sentences = X[0:training_size]\ntesting_sentences = X[training_size:]\ntraining_labels = Y[0:training_size]\ntesting_labels = Y[training_size:]","cc8c32d2":"tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(training_sentences)\n\nword_index = tokenizer.word_index\n\ntraining_sequences = tokenizer.texts_to_sequences(training_sentences)\ntraining_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n\ntesting_sequences = tokenizer.texts_to_sequences(testing_sentences)\ntesting_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)","a1693238":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","511cdb73":"num_epochs = 10\ntraining_padded = np.array(training_padded)\ntraining_labels = np.array(training_labels)\ntesting_padded = np.array(testing_padded)\ntesting_labels = np.array(testing_labels)\nhistory = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels), verbose=1)","a27b7256":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_'+string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string, 'val_'+string])\n    plt.show()\n\nplot_graphs(history, 'accuracy')\nplot_graphs(history, 'loss')","e2211ba8":"model.evaluate(training_padded,training_labels)[1]","3cf505c4":"# El Visualizaci\u00f3n De Spacy ","aacd7b36":"# El Visualizaci\u00f3n De WordCount","4334a71a":"# El Modelo De Tema de Sarcasmo","d599de54":"# Keras Modeling","927395ba":"HI, I am Korean Spanish leaner. I tried to analyze spanish Sentence. \nIf you like it, please upvote! \nHola Amigos! \nsoy el alumuna de espa\u00f1ola coreano. \nTrate analizar datos de texto en espa\u00f1ol. \nSi te gusta , haga clic en votar por favor!"}}