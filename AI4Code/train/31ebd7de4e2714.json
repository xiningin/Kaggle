{"cell_type":{"5c2452c4":"code","b13781f6":"code","146a9c29":"code","f5f3a5de":"code","a769527d":"code","8ca4538f":"code","f622c732":"code","49e75dc0":"code","bd08f679":"code","c1cad152":"code","245812fe":"code","e9592326":"code","7184bb4e":"code","0f75a27c":"code","6cc30792":"code","35e40372":"code","ead54b8b":"code","5ee87eab":"code","770f20ff":"code","45164695":"code","0514d044":"code","3caeb316":"code","7438197a":"code","adab4d80":"code","ae94300e":"code","58679dad":"code","ab3b0446":"markdown","6d0a3261":"markdown","a933e7db":"markdown","40a28609":"markdown","ac7c82bc":"markdown","7d8e0445":"markdown","0f79790d":"markdown","729196d3":"markdown","d68f16d4":"markdown","67cf617d":"markdown","8739602d":"markdown","839f5637":"markdown","ca347d46":"markdown","2cb6cbeb":"markdown","a1383fca":"markdown","7d0d1511":"markdown","0de00aaa":"markdown","090b2ccc":"markdown","f550645c":"markdown","05586ca2":"markdown","8d59afb9":"markdown","cc9883a3":"markdown","5fda6a29":"markdown","94dd9ca1":"markdown","fb466b64":"markdown","f2d99634":"markdown","b01e45bd":"markdown","8c17e0d2":"markdown","ec579ba1":"markdown"},"source":{"5c2452c4":"name = 'Fred'\n\n# Using the old .format() method:\nprint('His name is {var}.'.format(var=name))\n\n# Using f-strings:\nprint(f'His name is {name}.')","b13781f6":"print(f'His name is {name!r}')","146a9c29":"d = {'a':123,'b':456}\n\nprint(f\"Address: {d['a']} Main Street\")","f5f3a5de":"library = [('Author', 'Topic', 'Pages'), ('Twain', 'Rafting', 601), ('Feynman', 'Physics', 95), ('Hamilton', 'Mythology', 144)]\n\nfor book in library:\n    print(f'{book[0]:{10}} {book[1]:{8}} {book[2]:{7}}')","a769527d":"for book in library:\n    print(f'{book[0]:{10}} {book[1]:{10}} {book[2]:.>{7}}') # here .> was added","8ca4538f":"from datetime import date\ntoday = date.today()\nprint(today.strftime(\"%B %d, %Y\"))","f622c732":"%%writefile test.txt\nHello, this is a quick test file.\nThis is the second line of the file.","49e75dc0":"pwd","bd08f679":"# Open the text.txt file we created earlier\nmy_file = open('.\/test.txt')","c1cad152":"my_file","245812fe":"# We can now read the file\nmy_file.read()","e9592326":"# But what happens if we try to read it again?\nmy_file.read()","7184bb4e":"# Seek to the start of file (index 0)\nmy_file.seek(0)","0f75a27c":"# Now read again\nmy_file.read()","6cc30792":"# Readlines returns a list of the lines in the file\nmy_file.seek(0)\nmy_file.readlines()","35e40372":"my_file.close()","ead54b8b":"# Add a second argument to the function, 'w' which stands for write.\n# Passing 'w+' lets us read and write to the file\n\nmy_file = open('.\/test.txt','w+')","5ee87eab":"# Write to the file\nmy_file.write('This is a new first line')","770f20ff":"# Read the file\nmy_file.seek(0)\nmy_file.read()","45164695":"my_file.close()  # always do this when you're done with a file","0514d044":"my_file = open('test.txt','a+')\nmy_file.write('\\nThis line is being appended to test.txt')\nmy_file.write('\\nAnd another line here.')","3caeb316":"my_file.seek(0)\nprint(my_file.read())","7438197a":"my_file.close()","adab4d80":"%%writefile -a test.txt\n\nThis is more text being appended to test.txt\nAnd another line here.","ae94300e":"with open('test.txt','r') as txt:\n    first_line = txt.readlines()[0]\n    \nprint(first_line)","58679dad":"with open('.\/test.txt','r') as txt:\n    for line in txt:\n        print(line, end='')  # the end='' argument removes extra linebreaks","ab3b0446":"Here the first three lines align, except `Pages` follows a default left-alignment while numbers are right-aligned. Also, the fourth line's page number is pushed to the right as `Mythology` exceeds the minimum field width of `8`. When setting minimum field widths make sure to take the longest item into account.\n\nTo set the alignment, use the character `<` for left-align,  `^` for center, `>` for right.<br>\nTo set padding, precede the alignment character with the padding character (`-` and `.` are common choices).\n\nLet's make some adjustments:","6d0a3261":"Introduced in Python 3.6, <strong>f-strings<\/strong> offer several benefits over the older `.format()` string method. <br>For one, you can bring outside variables immediately into to the string rather than pass them through as keyword arguments:","a933e7db":"When you have finished using a file, it is always good practice to close it.","40a28609":"Add a blank space if you want the first line to begin on its own line, as Jupyter won't recognize escape sequences like `\\n`","ac7c82bc":"## Iterating through a File","7d8e0445":"**txt.read()**\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-91-39ca4397fa0a> in <module>\n----> 1 txt.read()\n\nValueError: I\/O operation on closed file.","0f79790d":"For more info on formatted string literals visit https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#f-strings\n\n***","729196d3":"Instead, use different styles of quotation marks:","d68f16d4":"## Python Opening a File\n\n### Know Your File's Location\n\nIt's easy to get an error on this step:","67cf617d":"## Aliases and Context Managers\nYou can assign temporary variable names as aliases, and manage the opening and closing of files automatically using a context manager:","8739602d":"### Date Formatting","839f5637":"Note that the `with ... as ...:` context manager automatically closed `test.txt` after assigning the first line of text to first_line:","ca347d46":"Be careful not to let quotation marks in the replacement fields conflict with the quoting used in the outer string:","2cb6cbeb":"<div class=\"alert alert-danger\" style=\"margin: 20px\">**Use caution!**<br>\nOpening a file with 'w' or 'w+' *truncates the original*, meaning that anything that was in the original file **is deleted**!<\/div>","a1383fca":"### .readlines()\nYou can read a file line by line using the readlines method. Use caution with large files, since everything will be held in memory. We will learn how to iterate over large files later in the course.","7d0d1511":"**Alternatively, to grab files from any location on your computer, simply pass in the entire file path. **\n\nFor Windows you need to use double \\ so python doesn't treat the second \\ as an escape character, a file path is in the form:\n\n    myfile = open(\"C:\\\\Users\\\\YourUserName\\\\Home\\\\Folder\\\\myfile.txt\")\n\nFor MacOS and Linux you use slashes in the opposite direction:\n\n    myfile = open(\"\/Users\/YourUserName\/Folder\/myfile.txt\")","0de00aaa":"## Writing to a File\n\nBy default, the `open()` function will only allow us to read the file. We need to pass the argument `'w'` to write over the file. For example:","090b2ccc":"This happens because you can imagine the reading \"cursor\" is at the end of the file after having read it. So there is nothing left to read. We can reset the \"cursor\" like this:","f550645c":"## Appending to a File\nPassing the argument `'a'` opens the file and puts the pointer at the end, so anything written is appended. Like `'w+'`, `'a+'` lets us read and write to a file. If the file does not exist, one will be created.","05586ca2":"### Appending with `%%writefile`\nJupyter notebook users can do the same thing using IPython cell magic:","8d59afb9":"## Formatted String Literals (f-strings)","cc9883a3":"d = {'a':123,'b':456}\n\nprint(f'Address: {d['a']} Main Street')\n\n>    File \"<ipython-input-2-b2f08335b9e5>\", line 3\n    \n>    print(f'Address: {d['a']} Main Street')\n    \n\n>    SyntaxError: invalid syntax","5fda6a29":"# Files\n\nPython uses file objects to interact with external files on your computer. These file objects can be any sort of file you have on your computer, whether it be an audio file, a text file, emails, Excel documents, etc. Note: You will probably need to install certain libraries or modules to interact with those various file types, but they are easily available. (We will cover downloading modules later on in the course).\n\nPython has a built-in open function that allows us to open and play with basic file types. First we will need a file though. We're going to use some IPython magic to create a text file!\n\n## Creating a File with IPython\n#### This function is specific to jupyter notebooks! Alternatively, quickly create a simple .txt file with Sublime text editor.","94dd9ca1":"`my_file` is now an open file object held in memory. We'll perform some reading and writing exercises, and then we have to close the file to free up memory.\n\n### .read() and .seek()","fb466b64":"**myfile = open('..\/input\/text-file\/train.txt')**\n\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\n<ipython-input-45-ab4fe6a16a1f> in <module>\n----> 1 myfile = open('..\/input\/text-file\/train.txt')\n\nFileNotFoundError: [Errno 2] No such file or directory: '..\/input\/text-file\/train.txt'\n","f2d99634":"Pass `!r` to get the <strong>string representation<\/strong>:","b01e45bd":"# Working with Text Files\nIn this section we'll cover\n * Working with f-strings (formatted string literals) to format printed text\n * Working with Files - opening, reading, writing and appending text files","8c17e0d2":"### Minimum Widths, Alignment and Padding\nYou can pass arguments inside a nested set of curly braces to set a minimum width for the field, the alignment and even padding characters.","ec579ba1":"To avoid this error, make sure your .txt file is saved in the same location as your notebook. To check your notebook location, use **pwd**:"}}