{"cell_type":{"559b9bb7":"code","6c1dbe57":"code","260a3cde":"code","c0553e45":"code","8c54cc0b":"code","977bd9fa":"code","836f7504":"code","dc23fd10":"code","8b6a8411":"code","c765ea0e":"code","54dbbdb1":"code","7d739e5e":"code","ba722d3a":"code","957fd0bf":"code","9726e613":"code","98f5b1f4":"markdown","6a78b398":"markdown"},"source":{"559b9bb7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #visualization\nimport seaborn as sns #visualization\nimport plotly.graph_objs as go #visualization\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport warnings\ninit_notebook_mode(connected=True) \n# filter warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6c1dbe57":"data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","260a3cde":"data.head(15)","c0553e45":"data.info()","8c54cc0b":"data.describe()","977bd9fa":"setosa = data[data[\"Species\"]==\"Iris-setosa\"]\nversicolor = data[data[\"Species\"]==\"Iris-versicolor\"]\nvirginica = data[data[\"Species\"]==\"Iris-virginica\"]","836f7504":"plt.style.use(\"ggplot\")\nplt.figure(figsize = (10,10))\nsns.countplot(data[\"Species\"],palette = \"cubehelix\") \nplt.text(2.55,0.8,str(data[\"Species\"].value_counts()) ,fontsize = 18, color = \"black\") \nplt.title(\"\")\nplt.show()","dc23fd10":"sns.pairplot(data, hue =\"Species\", markers = \"+\")\nplt.show()\ndesc = data.describe()\nprint(desc[:3])","8b6a8411":"f,ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(data.corr(), annot=True,annot_kws = {\"size\": 12}, linewidths=0.5, fmt = '.3f', ax=ax)\nplt.title(\"Correlation Between Features\", fontsize = 20)\nplt.show()","c765ea0e":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=4,cols=1,subplot_titles = (\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"))\n\nfig.append_trace(go.Scatter(x = data.Id,\n                  y = data.SepalLengthCm,\n                  mode = \"lines\",\n                  name = \"SepalLengthCm\",\n                  marker = dict(color = 'rgba(1,102,94, 0.8)')),row = 1, col = 1)\n\nfig.append_trace(go.Scatter(x = data.Id,\n                  y = data.SepalWidthCm,\n                  mode = \"lines\",\n                  name = \"SepalWidthCm\",\n                  marker = dict(color = 'rgba(191,129,45, 0.8)')),row = 2, col = 1)\n          \nfig.append_trace(go.Scatter(x = data.Id,\n                  y = data.PetalLengthCm,\n                  mode = \"lines\",\n                  name = \"PetalLengthCm\",\n                  marker = dict(color = 'rgba(16, 112, 2, 0.8)')),row = 3, col = 1)\n          \nfig.append_trace(go.Scatter(x = data.Id,\n                  y = data.PetalWidthCm,\n                  mode = \"lines\",\n                  name = \"PetalWidthCm\",\n                  marker = dict(color = 'rgba(118,42,131, 0.8)')),row = 4, col = 1)\n          \nfig.update_layout(height = 1800, width = 900, title = \"Fatures-Ids\",template=\"plotly_white\")\n\nfig.update_xaxes(title_text=\"Id\", row=1, col=1)\nfig.update_xaxes(title_text=\"Id\", row=2, col=1)\nfig.update_xaxes(title_text=\"Id\", row=3, col=1)\nfig.update_xaxes(title_text=\"Id\", row=4, col=1)\n\nfig.update_yaxes(title_text=\"SepalLengthCm\", row=1, col=1)\nfig.update_yaxes(title_text=\"SepalWidthCm\", row=2, col=1)\nfig.update_yaxes(title_text=\"PetalLengthCm\", row=3, col=1)\nfig.update_yaxes(title_text=\"PetalWidthCm\", row=4, col=1)\n\niplot(fig)","54dbbdb1":"data_swrm_plt = data.drop([\"Id\"],axis = 1)\nsns.set(style=\"whitegrid\",palette = \"muted\")\n\ndata_swrm = pd.melt(data_swrm_plt,id_vars=\"Species\",\n                    var_name=\"Features\",\n                    value_name='Values')\nplt.figure(figsize = (13,8))\nsns.swarmplot(x=\"Features\", y=\"Values\",hue=\"Species\", data=data_swrm)\nplt.title(\"Swarmplot\")\nplt.show()","7d739e5e":"fig = go.Figure(data = [go.Scatter(\n    \n        y= setosa.PetalLengthCm,\n        x= setosa.PetalWidthCm,\n        mode= 'markers',\n        marker= dict(\n            color= setosa.SepalLengthCm,\n            size= setosa.SepalWidthCm*10,\n            showscale= True),\n        text = setosa.Id\n)])\n\nfig.update_xaxes(title_text=\"PetalLengthCm\")\nfig.update_yaxes(title_text=\"PetalWidthCm\")\n\nfig.update_layout(title = \"Setosa Features\",template=\"plotly_white\")\n\niplot(fig)\n\nfig2 = go.Figure(data = [go.Scatter(\n    \n        y= versicolor.PetalLengthCm,\n        x= versicolor.PetalWidthCm,\n        mode= 'markers',\n        marker= dict(\n            color= versicolor.SepalLengthCm,\n            size= versicolor.SepalWidthCm*10,\n            showscale= True),\n        text = versicolor.Id\n)])\n\nfig2.update_xaxes(title_text=\"PetalLengthCm\")\nfig2.update_yaxes(title_text=\"PetalWidthCm\")\n\nfig2.update_layout(title = \"Versicolor Features\",template=\"plotly_white\")\n\niplot(fig2)\n\nfig3 = go.Figure(data = [go.Scatter(\n    \n        y= virginica.PetalLengthCm,\n        x= virginica.PetalWidthCm,\n        mode= 'markers',\n        marker= dict(\n            color= virginica.SepalLengthCm,\n            size= virginica.SepalWidthCm*10,\n            showscale= True),\n        text = virginica.Id\n)])\n\nfig3.update_xaxes(title_text=\"PetalLengthCm\")\nfig3.update_yaxes(title_text=\"PetalWidthCm\")\n\nfig3.update_layout(title = \"Virginica Features\",template=\"plotly_white\")\n\niplot(fig3)","ba722d3a":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2,subplot_titles = (\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"))\n\nfig.append_trace(go.Box(y = setosa.SepalLengthCm, name = \"Setosa\",marker_color = 'rgb(77,136,255)'),row = 1, col = 1)\nfig.append_trace(go.Box(y = versicolor.SepalLengthCm,name = \"Versicolor\",marker_color = 'rgb(230,0,230)'),row = 1, col = 1)\nfig.append_trace(go.Box(y = virginica.SepalLengthCm,name = \"Vriginica\",marker_color = 'rgb(0,128,106)'),row = 1, col = 1)\n\nfig.append_trace(go.Box(y = setosa.SepalWidthCm,name = \"Setosa\",showlegend = True,marker_color = 'rgb(77,136,255)'),row = 1, col = 2)\nfig.append_trace(go.Box(y = versicolor.SepalWidthCm,name = \"Versicolor\",showlegend = True,marker_color = 'rgb(230,0,230)'),row = 1, col = 2)\nfig.append_trace(go.Box(y = virginica.SepalWidthCm,name = \"Virginica\",marker_color = 'rgb(0,128,106)'),row = 1, col = 2)\n\nfig.append_trace(go.Box(y = setosa.PetalLengthCm,name = \"Setosa\",showlegend = True,marker_color = 'rgb(77,136,255)'),row = 2, col = 1)\nfig.append_trace(go.Box(y = versicolor.PetalLengthCm,name = \"Versicolor\",showlegend = True,marker_color = 'rgb(230,0,230)'),row = 2, col = 1)\nfig.append_trace(go.Box(y = virginica.PetalLengthCm,name = \"Virginica\",marker_color = 'rgb(0,128,106)'),row = 2, col = 1)\n\nfig.append_trace(go.Box(y = setosa.PetalWidthCm,name = \"Setosa\",showlegend = True,marker_color = 'rgb(77,136,255)'),row = 2, col = 2)\nfig.append_trace(go.Box(y = versicolor.PetalWidthCm,name = \"Versicolor\",showlegend = True,marker_color = 'rgb(230,0,230)'),row = 2, col = 2)\nfig.append_trace(go.Box(y = virginica.PetalWidthCm,name = \"Virginica\",marker_color = 'rgb(10,128,106)'),row = 2, col = 2)\n\nfig.update_xaxes(title_text=\"Specie\", row=1, col=1)\nfig.update_xaxes(title_text=\"Specie\", row=1, col=2)\nfig.update_xaxes(title_text=\"Specie\", row=2, col=1)\nfig.update_xaxes(title_text=\"Specie\", row=2, col=2)\n\nfig.update_yaxes(title_text=\"SepalLengthCm\", row=1, col=1)\nfig.update_yaxes(title_text=\"SepalWidthCm\", row=1, col=2)\nfig.update_yaxes(title_text=\"PetalLengthCm\", row=2, col=1)\nfig.update_yaxes(title_text=\"PetalWidthCm\", row=2, col=2)\n\nfig.update_layout(height=1000, width=800, title_text=\"Boxplot Features\",template = \"plotly_white\")\nfig.show()","957fd0bf":"# 3D scatterplot1\ntrace1 = go.Scatter3d(\n                      x = setosa.SepalWidthCm,\n                      y = setosa.PetalLengthCm,\n                      z = setosa.SepalLengthCm,\n                      text = setosa.Id,\n                      mode = \"markers\",\n                      name = \"Setosa\",\n                      marker = dict(\n                           size = 6,\n                           color = setosa.PetalWidthCm,\n                           symbol = \"circle\",line = dict(color = \"rgb(255,255,255)\", width = 0.5)\n                      )\n)\ntrace2 = go.Scatter3d(\n                      x = versicolor.SepalWidthCm,\n                      y = versicolor.PetalLengthCm,\n                      z = versicolor.SepalLengthCm,\n                      text = versicolor.Id,\n                      mode = \"markers\",\n                      name = \"Versicolor\",\n                      marker = dict(\n                           size = 6,\n                           color = versicolor.PetalWidthCm,\n                           symbol = \"square\",line = dict(color = \"rgb(255,255,255)\", width = 0.5)\n                      )\n)\ntrace3 = go.Scatter3d(\n                      x = virginica.SepalWidthCm,\n                      y = virginica.PetalLengthCm,\n                      z = virginica.SepalLengthCm,\n                      text = virginica.Id,\n                      mode = \"markers\",\n                      name = \"Virginica\",\n                      marker = dict(\n                           size = 6,\n                           color = virginica.PetalWidthCm, \n                           symbol = \"cross\",line = dict(color = \"rgb(255,255,255)\", width = 0.5)\n                      )\n)\n\ncombine = [trace1,trace2,trace3]\nlayout = go.Layout(\n    scene = dict(\n    xaxis =dict(\n        title = \"SepalWidthCm(x)\"),\n    yaxis =dict(\n        title =\"PetalLengthCm(y)\"),\n    zaxis =dict(\n        title = \"SepalLengthCm(z)\"),),\n    width = 760,\n    margin = dict(l = 10,r = 10,b = 10,t = 10 ),\ntemplate=\"plotly_white\")\n    \nfig = go.Figure(data = combine, layout = layout)\n\niplot(fig)","9726e613":"import plotly.graph_objs as go\n\nspecie_list = list(data.Species.unique())\n\nsepallengthcm = []\nsepalwidthcm = []\npetallengthcm = []\npetalwidthcm = []\n\nfor i in specie_list:\n    x = data[data[\"Species\"] == i]\n    sepallengthcm.append(sum(x.SepalLengthCm)\/len(x)) \n    sepalwidthcm.append(sum(x.SepalWidthCm)\/len(x))   \n    petallengthcm.append(sum(x.PetalLengthCm)\/len(x)) \n    petalwidthcm.append(sum(x.PetalWidthCm)\/len(x))\n    \ntrace1 = go.Bar(    \n    x = specie_list,\n    y = sepallengthcm,\n    text = np.around(sepallengthcm,2),\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    name = \"SepalLengthCm\",\n    marker = dict(color = \"rgba(73,0,106,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\n\ntrace2 = go.Bar(    \n    x = specie_list,\n    y = sepalwidthcm,\n    text = np.around(sepalwidthcm,2),\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    name = \"SepalWidthCm\",\n    marker = dict(color = \"rgba(122,1,119,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\n\ntrace3 = go.Bar(    \n    x = specie_list,\n    y = petallengthcm, \n    text = np.around(petallengthcm,2),\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    name = \"PetalLengthCm\",\n    marker = dict(color = \"rgba(174,1,126,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\n\ntrace4= go.Bar(    \n    x = specie_list,\n    y = petalwidthcm,\n    text = np.around(petalwidthcm,2),\n    textposition = \"outside\",\n    textfont = dict(size = 15),\n    name = \"PetalWidthCm\",\n    marker = dict(color = \"rgba(221,52,151,0.6)\",\n                 line = dict(color = \"rgb(0,0,0)\", width = 1.5))\n\n)\n\ndata = [trace1,trace2,trace3,trace4] \nlayout = go.Layout(template=\"plotly_white\",title = \"Fature Value Means\")\nfig = go.Figure(data = data,layout = layout)\n\nfig.update_xaxes(title_text = \"Specie\")\nfig.update_yaxes(title_text = \"Max Value\")\n\niplot(fig)","98f5b1f4":"## End of the Kernel\n\n### My other kernels: https:\/\/www.kaggle.com\/mrhippo\/notebooks","6a78b398":"# Iris Dataset EDA"}}