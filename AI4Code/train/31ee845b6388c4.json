{"cell_type":{"bff1e9ca":"code","e7098549":"code","d5db1634":"code","740cef22":"code","e904f201":"code","2fd4ca59":"code","73d5ee4d":"code","8410a803":"code","b6cde639":"code","86e303dc":"code","89209e4c":"code","d5aac037":"code","8e93c723":"code","96a45252":"code","0e5e28e5":"code","71a1c8eb":"code","a6736ee6":"code","f2b146a5":"code","4e364fb4":"code","972e3442":"code","2d06dd5a":"code","829d0f78":"code","e88b292b":"code","0e2b0bdd":"code","d381d0f5":"code","3a1b20b3":"code","b88ae1e9":"code","02738852":"code","5aa4ff32":"code","a8b0089e":"code","8e877830":"markdown","bbf29b23":"markdown","1378c67c":"markdown","63f26bba":"markdown","48672c10":"markdown","238ec90a":"markdown","a6fe8fca":"markdown","cdb44b4d":"markdown"},"source":{"bff1e9ca":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7098549":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nprint(football)","d5db1634":"edu = pd.read_csv('\/kaggle\/input\/guithub-import-ense3\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","740cef22":"edu.head(10)","e904f201":"edu.tail(5)","2fd4ca59":"edu.describe()","73d5ee4d":"edu[10:15]","8410a803":"edu['Value']","b6cde639":"edu['GEO']","86e303dc":"edu.iloc[90:94][['TIME','GEO']]","89209e4c":"edu.max(axis = 0)","d5aac037":"print ('Pandas max function:', edu['Value'].max())","8e93c723":"edu[\"Value\"]","96a45252":"S = edu[\"Value\"]\/100\nS.head()","0e5e28e5":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","71a1c8eb":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","a6736ee6":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.head()\nedu.tail()","f2b146a5":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","4e364fb4":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","972e3442":"edu[edu['Value'] > 6.5].tail()","2d06dd5a":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","829d0f78":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","e88b292b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","0e2b0bdd":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\n","d381d0f5":"pivedu","3a1b20b3":"pivedu.rank(ascending=False, method='first').head()","b88ae1e9":"pivedu.rank(ascending=True, method='first').head()","02738852":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","5aa4ff32":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","a8b0089e":"mes_couleurs = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=mes_couleurs, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","8e877830":"Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nThe result show some statistical, impotant points of the datas. ","bbf29b23":"Choisir de regarder des index 10 \u00e0 14","1378c67c":"What does this index return? What does the first index represent? And the second one?\nIt return what your asking in finction of the row asking ; and it gives you the column asking as well like TIME and GEO. ","63f26bba":"What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nWe show the value in the column value who are above 6.5. Returning a mask with True or False for each row.\nThis is a series \n","48672c10":"Which is the size of the edu DataFrame (rows x columns)?\n\n384 rows \u00d7 3 columns","238ec90a":"What happens if we give a number as argument to the method head()? \nIt show us the X firsts lignes\n\nWhat does the method tail()?\nsame but for the last lignes\n","a6fe8fca":"What do you observe regarding the parameter ascending=False?\nSi on met ascending a faux alors nous avons l'ordre des valeurs dans les lignes qui change m","cdb44b4d":"Pour appliquer une fonction Np avec panda : ( .apply(np.exemple)"}}