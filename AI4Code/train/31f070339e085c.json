{"cell_type":{"9684a2ec":"code","0b1fe461":"code","3b4358ea":"code","6045f637":"code","30739af2":"code","0d11c236":"code","f81db8c1":"code","a29c661f":"markdown","5bef0633":"markdown"},"source":{"9684a2ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n# First edit\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b1fe461":"Fish = pd.read_csv(\"..\/input\/fish-market\/Fish.csv\")","3b4358ea":"Fish.info()\nFish.head()","6045f637":"y = Fish.Weight.values.reshape(-1,1)\nx = Fish.Width.values.reshape(-1,1)\n\nplt.scatter(x,y)\nplt.ylabel(\"weight of fish in Gram\")\nplt.xlabel(\"diagonal width in cm\")","30739af2":"#************** linear regression cizimi *********\nlr = LinearRegression()\nlr.fit(x,y)\n\n#****** predict *********\ny_head = lr.predict(x)\n\nplt.plot(x,y_head, color=\"red\", label=\"linear\")\nplt.show()\nprint(\"Predict weight of fish in 800 Gram: \", lr.predict([[800]]))\n","0d11c236":"#********* Polynomial Regression *****y = b0 + b1*x1 + b2*x2 + b3*x3 +... ***********\n\npolynomial_regression = PolynomialFeatures(degree = 15)    # 5.mertebeye kadar bakalim. Eger uygun degilse degistirmeliyiz\nx_polynomial = polynomial_regression.fit_transform(x)\n\n\nlinear_regression2 = LinearRegression()\nlinear_regression2.fit(x_polynomial,y)\n\ny_head2 = linear_regression2.predict(x_polynomial)\n\nplt.plot(x,y_head2,color=\"green\",label=\"poly\")\nplt.legend()\nplt.show()","f81db8c1":"#********* Polynomial Regression *****y = b0 + b1*x1 + b2*x2 + b3*x3 +... ***********\n\npolynomial_regression = PolynomialFeatures(degree = 2) \nx_polynomial = polynomial_regression.fit_transform(x)\n\n\nlinear_regression2 = LinearRegression()\nlinear_regression2.fit(x_polynomial,y)\n\ny_head2 = linear_regression2.predict(x_polynomial)\n\nplt.plot(x,y_head2,color=\"red\",label=\"poly\")\nplt.legend()\nplt.show()","a29c661f":"This result gives overfitting to us. Then let us degree = 2 using:","5bef0633":"\nConclusion\n\n\n   - After this notebook, my aim is to prepare 'kernel' which is connected to Deep Learning 'not clear' data set.\n   - If you have any suggestions, please could you write for me? I wil be happy for comment and critics!\n   \n   Thank you for your suggestion and votes ;)\n\n"}}