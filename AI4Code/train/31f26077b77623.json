{"cell_type":{"ea74b727":"code","18c8f764":"code","e0bfc2aa":"code","cc262c88":"code","c1f32403":"code","e0e97039":"code","82f67cb7":"code","ee90fa5e":"code","3a4435fe":"markdown","900b6b23":"markdown","3fedb362":"markdown","349230c6":"markdown","c39874b3":"markdown","a79ff0a0":"markdown","b6548f64":"markdown","4fa6871a":"markdown"},"source":{"ea74b727":"i = 1\nwhile i < 6:\n    print(i)\n    i += 1","18c8f764":"if x < 0:\n    x = 0\n    print('Negative changed to zero')\nelif x == 0:\n    print('Zero')\nelif x == 1:\n    print('Single')\nelse:\n    print('More')","e0bfc2aa":"# Measure some strings:\nanimals = ['cat', 'dog', 'rabbit', 'tiger', 'lion']\nfor animal in animals:\n    print(animal, len(animal))","cc262c88":"my_list = [0, 1, 2, 3, 4]\nfor elem in my_list:\n    #if elem >= 4:\n        #my_list.append(len(my_list))\n    print(\"Length is: {}\".format(len(my_list)))","c1f32403":"animals = ['cat', 'dog', 'rabbit', 'tiger', 'lion']\nprint(\"list before loop: {}\".format(animals))\n# Strategy:  Iterate over a copy\nfor animal in animals.copy():\n    if animal == 'rabbit':\n        animals.remove(animal)\nprint(\"list after loop: {}\".format(animals))","e0e97039":"# Strategy:  Create a new list\nanimals = ['cat', 'dog', 'rabbit', 'tiger', 'lion']\nprint(\"list before loop: {}\".format(animals))\n# Strategy:  Iterate over a copy\nfor animal in list(animals):\n    if animal == 'rabbit':\n        animals.remove(animal)\nprint(\"list after loop: {}\".format(animals))","82f67cb7":"for n in range(2, 10):\n    for x in range(2, n):\n        if n % x == 0:\n            print(n, 'equals', x, '*', n\/\/x)\n            break\n    else:\n        # loop fell through without finding a factor\n        print(n, 'is a prime number')","ee90fa5e":"for num in range(2, 10):\n    if num % 2 == 0:\n        print(\"Found an even number\", num)\n        continue\n    print(\"Found a number\", num)","3a4435fe":"## `!if` Statements\n\nPerhaps the most well-known statement type is the `if` statement. For\nexample:","900b6b23":"There can be zero or more `elif` parts, and the `else` part is optional.\nThe keyword '`elif`' is short for 'else if', and is useful to avoid\nexcessive indentation. An `if` ... `elif` ... `elif` ... sequence is\na substitute for the `switch` or `case` statements found in other\nlanguages.","3fedb362":"(Yes, this is the correct code. Look closely: the `else` clause belongs\nto the `for` loop, **not** the `if` statement.)\n\nWhen used with a loop, the `else` clause has more in common with the\n`else` clause of a `try` statement than it does with that of `if`\nstatements: a `try` statement's `else` clause runs when no exception\noccurs, and a loop's `else` clause runs when no `break` occurs.\n\nThe `continue` statement, also borrowed from C, continues with the next\niteration of the loop:","349230c6":"## `!while` Statements\n\nWith the while loop we can execute a set of statements as long as a condition is true.","c39874b3":"## `!for` Statements\n\n\nThe `for` statement in Python differs a bit from what you may be used to\nin C or Pascal. Rather than always iterating over an arithmetic\nprogression of numbers (like in Pascal), or giving the user the ability\nto define both the iteration step and halting condition (as C), Python's\n`for` statement iterates over the items of any sequence (a list or a\nstring), in the order that they appear in the sequence.","a79ff0a0":"$$\n\\def\\CC{\\bf C}\n\\def\\QQ{\\bf Q}\n\\def\\RR{\\bf R}\n\\def\\ZZ{\\bf Z}\n\\def\\NN{\\bf N}\n$$\n# Control Flow Tools","b6548f64":"Code that modifies a list while iterating over that same\nlist can be tricky to get right. Instead, it is usually more\nstraight-forward to loop over a copy of the list or to create a\nnew list:","4fa6871a":"\n## `!break` and `!continue` Statements, and `!else` Clauses on Loops\n\nThe `break` statement, like in C, breaks out of the innermost enclosing\n`for` or `while` loop.\n\nLoop statements may have an `else` clause; it is executed when the loop\nterminates through exhaustion of the iterable (with `for`) or when the\ncondition becomes false (with `while`), but not when the loop is\nterminated by a `break` statement. This is exemplified by the following\nloop, which searches for prime numbers:"}}