{"cell_type":{"84062c5e":"code","c71399e1":"code","1aec1a4b":"code","3ef6ed37":"code","f981ebfb":"code","34b77b7a":"code","36d46b45":"code","74992d7c":"code","068a8a35":"code","8dfc5130":"code","491cca85":"code","aa21ff41":"code","dac70159":"code","05103616":"code","9bf76b8a":"code","e23c489f":"code","022f221d":"code","843de0fb":"code","d5806c95":"code","20fda886":"code","ab6b5388":"code","9d751446":"code","e080f333":"code","293c2b02":"code","7b5e0c71":"code","75b29fba":"code","63fea89e":"code","a0edc604":"code","7528d245":"code","98c2b8be":"code","d1aa3e9a":"code","c7d3ddc1":"code","984aaceb":"code","00d7c50c":"code","8ac447a0":"code","f4205c90":"markdown","20f3243c":"markdown","d7898b9a":"markdown","dbe6be40":"markdown","28bc6421":"markdown","a5eba839":"markdown"},"source":{"84062c5e":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # visualisation\nimport seaborn as sns # visualisation\n#misc libraries\nimport random\nimport time\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","c71399e1":"train.sample(10)","1aec1a4b":"train.info()","3ef6ed37":"print(\"Train data with null values: \",train.isnull().sum())","f981ebfb":"print('Test data with null values:\\n', test.isnull().sum())","34b77b7a":"train.describe(include='all')","36d46b45":"test_index = test['PassengerId']","74992d7c":"plt.figure(figsize=(8,6))\nfig_surv =  train.Survived.value_counts(normalize=True).plot(kind=\"bar\",color=['black','green'],width=0.3)\nfig_surv.set_title(\"Percent of people who have survived\")\nfig_surv.set_xticklabels(('Dead', 'Survied'))","068a8a35":"plt.figure(figsize=(8, 6))\nfig_sex =  train.Sex.value_counts(normalize=True).plot(kind=\"pie\",autopct='%1.1f%%',shadow=True,colors=['blue','pink'])\nfig_sex.set_title(\"Sex of passengers\")\nfig_sex.set_xticklabels(('Male', 'Female'))","8dfc5130":"plt.figure(figsize=(8, 6))\nfig_age_far = train.plot(kind='scatter',x='Age',y='Fare',alpha=0.5,color='green')\nfig_age_far.set_title(\"Correlation between age and fare\")\nplt.show()","491cca85":"plt.figure(figsize=(8, 6))\nfig_box= train.boxplot(column='Age',by='Survived')\nplt.show()","aa21ff41":"fig, axes = plt.subplots(nrows=2,ncols=1)\ntrain.plot(kind = \"hist\",y = \"Age\",bins = 25,range= (0,85),normed = True,ax = axes[0])\ntrain.plot(kind = \"hist\",y = \"Age\",bins = 25,range= (0,85),normed = True,ax = axes[1],cumulative = True)\nplt.show()","dac70159":"plt.figure(figsize=(8, 6))\nfig_class =  train.Pclass.value_counts(normalize=True).plot(kind=\"bar\",color=['brown','gold','silver'],width=0.3)\nfig_class.set_title(\"Class of cabins\")\nfig_class.set_xticklabels(('3rd', '1st','2st'))","05103616":"plt.figure(figsize=(12, 8))\nfor x in [1,2,3]:\n    train.Age[train.Pclass==x].plot(kind='kde')\nplt.title(\"Class wrt Age\")\nplt.legend(['1st','2nd','3rd'])","9bf76b8a":"plt.figure(figsize=(12, 8))\nsns.heatmap(train.corr(),annot=True, linewidths=.5)","e23c489f":"full_data = [train,test]\nfor dataset in full_data:\n    dataset['Sex']=dataset['Sex'].map({'male':1,'female':0}).astype(int)\n    dataset['Embarked'].fillna(dataset['Embarked'].mode()[0],inplace=True)\n    dataset['Fare'].fillna(dataset['Fare'].median(),inplace=True)","022f221d":"med_age = dataset['Age'].median()\nstd_age = dataset['Age'].std()\n\nfor dataset in full_data:\n    dataset.loc[dataset['Age'].isnull(), 'Age']=random.randint(int(med_age-std_age), int(med_age+std_age))\n    dataset['Age'] = dataset['Age'].astype(int)","843de0fb":"drop_columns = ['PassengerId','Cabin', 'Ticket']\ntrain.drop(drop_columns,axis=1,inplace=True)\ntest.drop(drop_columns,axis=1,inplace=True)","d5806c95":"for dataset in full_data:\n    dataset['Title'] = dataset['Name'].str.split(\",\",expand=True)[1].str.split('.',expand=True)[0]\n    dataset['FareBin'] = pd.qcut(dataset['Fare'], 4)\n    dataset['AgeBin'] = pd.cut(dataset['Age'].astype(int), 5)","20fda886":"title_names1 = (train['Title'].value_counts() < 10)\ntitle_names2 = (test['Title'].value_counts() < 10)\ntrain['Title']=train['Title'].apply(lambda x: \"Misc\" if title_names1[x]==True else x)\ntest['Title']=test['Title'].apply(lambda x: \"Misc\" if title_names2[x]==True else x)","ab6b5388":"train.sample(10)","9d751446":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\ndata_x = ['Pclass', 'Embarked', 'Title','FareBin','AgeBin','SibSp','Parch','Sex'] \ntrain_dummy = pd.get_dummies(train[data_x])\ntest_dummy = pd.get_dummies(test[data_x])\ncolumns_list = train_dummy.columns","e080f333":"target = train['Survived']\ntrain_dummy  =  pd.concat([train_dummy, target], axis=1, join='inner')","293c2b02":"from sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\ntrain1_x_dummy, test1_x_dummy, train1_y_dummy, test1_y_dummy = model_selection.train_test_split(train_dummy[columns_list], target, random_state = 42,test_size=0.3)","7b5e0c71":"from sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(train1_x_dummy, train1_y_dummy)\ngnb_pred = gnb.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,gnb_pred)","75b29fba":"from sklearn.neighbors import (NeighborhoodComponentsAnalysis,KNeighborsClassifier)\nfrom sklearn.pipeline import Pipeline\nnca = NeighborhoodComponentsAnalysis(random_state=42)\nknn = KNeighborsClassifier(n_neighbors=12)\nnca_pipe = Pipeline([('nca', nca), ('knn', knn)])\nnca_pipe.fit(train1_x_dummy, train1_y_dummy) \nnca_pred = nca_pipe.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,nca_pred)","63fea89e":"from sklearn import svm\nsvm_clf = svm.SVC(gamma='scale',C=1,cache_size=100,kernel='poly',coef0=0.5)\nsvm_clf.fit(train1_x_dummy, train1_y_dummy)\nsvm_pred = svm_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,svm_pred)","a0edc604":"from sklearn import tree\ntree_clf = tree.DecisionTreeClassifier(max_depth=100 ,min_samples_split=4,min_samples_leaf=6)\ntree_clf.fit(train1_x_dummy, train1_y_dummy)\ntree_pred = tree_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,tree_pred)","7528d245":"from sklearn.ensemble import RandomForestClassifier\nrandom_clf = RandomForestClassifier(n_estimators=500,max_depth=100,random_state=42,min_samples_split=4,min_samples_leaf=6)\nrandom_clf.fit(train1_x_dummy, train1_y_dummy)\nrandom_pred = random_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,random_pred)","98c2b8be":"from sklearn.linear_model import SGDClassifier\nSGD_clf = SGDClassifier(loss=\"hinge\", penalty=\"l2\", max_iter=5)\nSGD_clf.fit(train1_x_dummy, train1_y_dummy)  \nSGD_pred = SGD_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,SGD_pred)\n","d1aa3e9a":"from sklearn.ensemble import GradientBoostingClassifier\nGDC_clf = GradientBoostingClassifier(n_estimators=150, learning_rate=0.75,max_depth=2, random_state=42)\nGDC_clf.fit(train1_x_dummy, train1_y_dummy)\nGDC_pred = GDC_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,GDC_pred)\n","c7d3ddc1":"from sklearn.linear_model import LogisticRegression\nlog_clf = LogisticRegression(penalty='l2', C=1.0, fit_intercept=True,solver='lbfgs', multi_class='auto')\nlog_clf.fit(train1_x_dummy, train1_y_dummy)\nlog_pred = log_clf.predict(test1_x_dummy)\naccuracy_score(test1_y_dummy,log_pred)","984aaceb":"algorithm_dist = {'LogisticRegression':log_clf,'GradientBoosting':GDC_clf,'SGDClassifier':SGD_clf,'RandomTreeClassifier':random_clf,'DecisionTreeClassifier':tree_clf,'SVM':svm_clf,'KNeighborsClassifier':nca_pipe,'GaussianNB':gnb}","00d7c50c":"from sklearn.model_selection import cross_validate\nfor key,value in algorithm_dist.items():\n    results = cross_validate(value, train1_x_dummy, train1_y_dummy, cv=10, scoring='accuracy',return_train_score=True, return_estimator=False, n_jobs=-1)\n    print(key + ' train score:', results['train_score'].mean())\n    print(key +' test score:', results['test_score'].mean())","8ac447a0":"final_pred = svm_clf.predict(test_dummy)\noutput = pd.DataFrame({'PassengerId': test_index, 'Survived': final_pred.round().astype(int)})\noutput.to_csv(\"submission.csv\", index = False)","f4205c90":"**Prediction**","20f3243c":"**Classifier Comparison**","d7898b9a":"**Feature Engineering**","dbe6be40":"**CSV to DataFrame**\n","28bc6421":"**Introduction**","a5eba839":"**Visualization**"}}