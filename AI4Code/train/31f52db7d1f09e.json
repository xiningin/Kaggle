{"cell_type":{"4be14fcf":"code","3935d36f":"code","af3debf4":"code","1a6d746f":"code","08aa438a":"code","a6866877":"code","32ffb78c":"code","5f379333":"code","51d348ef":"code","065b87f5":"code","cb314f70":"code","5be0a667":"code","568bd81e":"code","4fbef0b8":"code","1c7afcdf":"code","9d3cb563":"code","c11a413a":"code","4cf78058":"code","792ba329":"code","450d1a5d":"code","e9c60341":"code","5327b52a":"code","bb4a222d":"code","488216fa":"code","f89079ed":"code","ef5ea5c1":"code","c27804b9":"code","ff45e3f7":"code","b16ba083":"code","ae1b10cc":"code","882fee23":"code","aa7dde89":"code","c96046e1":"markdown","318bff25":"markdown","e007945b":"markdown"},"source":{"4be14fcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3935d36f":"train_data = pd.read_csv(\"\/kaggle\/input\/liverpool-ion-switching\/train.csv\")\nprint(train_data.head())\nprint(train_data.describe())","af3debf4":"test_data = pd.read_csv(\"\/kaggle\/input\/liverpool-ion-switching\/test.csv\")\nprint(test_data.head())\nprint(test_data.describe())","1a6d746f":"sample_submission_data = pd.read_csv(\"\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv\")\nprint(sample_submission_data.head())\nprint(sample_submission_data.describe())","08aa438a":"plt.figure(figsize=(20, 5))\nplt.plot(train_data['time'], train_data['signal'])\nplt.show()","a6866877":"plt.figure(figsize=(20,5)); res = 10 #\uac04\uaca9\uc744 10 \ub9cc\ud07c\uc529 \ub744\uc5b4\uc11c \ud45c\uc2dc\nx = range(0,train_data.shape[0],res)\ny = train_data.signal[0::res]\nplt.plot(x,y,'b',alpha=0.7)\nfor i in range(11): \n    plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor j in range(10): \n    plt.text(j*500000+200000,10,str(j+1),size=16)\nplt.xlabel('Row',size=16); plt.ylabel('Signal & Ion channels',size=16); \nplt.title('Training Data Signal - 10 batches',size=20)\n\n#plt.figure(figsize=(20,5))\ny2 = train_data.open_channels[0::res]\nplt.plot(x,y2,'r',alpha=0.3) #Ion \ucc44\ub110 \uc218 \ud45c\uc2dc\n\nplt.show()","32ffb78c":"plt.figure(figsize=(20,5)); res = 1000 #\uac04\uaca9\uc744 1000 \ub9cc\ud07c\uc529 \ub744\uc5b4\uc11c \ud45c\uc2dc\nx = range(0,train_data.shape[0],res)\ny = train_data.signal[0::res]\nplt.plot(x,y,'b',alpha=0.7)\nfor i in range(11): \n    plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor j in range(10): \n    plt.text(j*500000+200000,10,str(j+1),size=16)\nplt.xlabel('Row',size=16); plt.ylabel('Signal & Ion channels',size=16); \nplt.title('Training Data Signal - 10 batches',size=20)\n\n#plt.figure(figsize=(20,5))\ny2 = train_data.open_channels[0::res]\nplt.plot(x,y2,'r',alpha=0.3) #Ion \ucc44\ub110 \uc218 \ud45c\uc2dc\n\nplt.show()","5f379333":"plt.figure(figsize=(20,5)); res = 10 #\uac04\uaca9\uc744 1000 \ub9cc\ud07c\uc529 \ub744\uc5b4\uc11c \ud45c\uc2dc\nx = range(0,test_data.shape[0],res)\ny = test_data.signal[0::res]\nplt.plot(x,y,'b',alpha=0.7)\nfor i in range(21): \n    plt.plot([i*100000,i*100000],[-5,12.5],'r')\nfor j in range(20): \n    plt.text(j*100000+30000,10,str(j+1),size=16)\nplt.xlabel('Row',size=16); plt.ylabel('Signal',size=16); \nplt.title('Test Data Signal - 20 batches',size=20)\n\nplt.show()","51d348ef":"#\uac01 \ubc30\uce58\ub97c 10\uac1c \ub370\uc774\ud130 \ub9ac\uc2a4\ud2b8\ub85c \uad6c\ubd84\nbatch = []\ngap = 500000\nbatch.append([]) #dummy\nfor i in range(10):\n    start = i*gap\n    batch.append(train_data[start:start+gap])","065b87f5":"#plot\uc791\uc131\uc6a9 helper \ndef plot_batch(batch_no=0, start=0, end=500000):\n    x = range(end-start)\n    y1 = batch[batch_no].signal[start:end]\n    y2 = batch[batch_no].open_channels[start:end]\n    fig, ax1 = plt.subplots(figsize=(20,5))\n    ax1.set_xlabel('time (ms)')\n    ax1.set_ylabel('signal')\n    ax1.plot(x, y1, 'blue')\n    ax1.tick_params(axis='y')\n    ax2 = ax1.twinx()\n    ax2.set_ylabel('open channels')\n    ax2.plot(x, y2, 'red', alpha=0.5)\n    ax2.tick_params(axis='y')\n    fig.tight_layout()\n    plt.legend()\n    plt.show()","cb314f70":"plot_batch(6) #6\ubc88 \ubc30\uce58\ub97c \ucd9c\ub825","5be0a667":"plot_batch(6,0,100) # 6\ubc88 \ubc30\uce58\uc5d0\uc11c 0~100","568bd81e":"plot_batch(6,40,60) #6\ubc88 \ubc30\uce58\uc5d0\uc11c 40~60","4fbef0b8":"plot_batch(5,0,2000) #5\ubc88 \ubc30\uce58\uc5d0\uc11c 0~2000","1c7afcdf":"plot_batch(7)","9d3cb563":"plot_batch(7,0,500)","c11a413a":"plot_batch(7,250000,250100)","4cf78058":"def average_smoothing(signal, kernel_size=10):\n    #sample = []\n    #start = 0\n    #end = kernel_size\n    #while start <= len(signal):\n    #    start += 1\n    #    end += 1\n    #    #sample.extend(np.ones(kernel_size)*np.mean(signal[start:end]))\n    #    if end >= len(signal):\n    #        end = len(signal)\n    #    sample.append(np.mean(signal[start:end]))\n    #return np.array(sample)\n    return signal.rolling(window=kernel_size, min_periods=1).mean()","792ba329":"def average_smoothing_center(signal, kernel_size=10):\n    #sample = []\n    #center = 0\n    #while center < len(signal):\n    #    start = center - int(kernel_size \/ 2)\n    #    end = center + int(kernel_size \/ 2)\n    #    if start < 0:\n    #        start = 0\n    #    if end > len(signal):\n    #        end = len(signal)\n    #    sample.append(np.mean(signal[start:end]))\n    #    center += 1\n    #return np.array(sample)\n    return signal.rolling(window=kernel_size, min_periods=1, center=True).mean()","450d1a5d":"x = train_data.loc[:100][\"time\"]\ny1 = train_data.loc[:100][\"signal\"]\ny_a1 = average_smoothing(train_data.loc[:100][\"signal\"])\ny_b1 = average_smoothing_center(train_data.loc[:100][\"signal\"])\ny2 = train_data.loc[100:200][\"signal\"]\ny_a2 = average_smoothing(train_data.loc[100:200][\"signal\"])\ny_b2 = average_smoothing_center(train_data.loc[100:200][\"signal\"])\ny3 = train_data.loc[200:300][\"signal\"]\ny_a3 = average_smoothing(train_data.loc[200:300][\"signal\"])\ny_b3 = average_smoothing_center(train_data.loc[200:300][\"signal\"])","e9c60341":"fig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y1, marker=dict(color=\"lightskyblue\"), showlegend=False,\n               name=\"Original signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a1, mode='lines', marker=dict(color=\"navy\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b1, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y2, marker=dict(color=\"mediumaquamarine\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a2, mode='lines', marker=dict(color=\"darkgreen\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b2, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y3, marker=dict(color=\"thistle\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a3, mode='lines', marker=dict(color=\"indigo\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b3, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Original (pale) vs. Denoised (dark) signals\")\nfig.show()","5327b52a":"x = train_data.loc[:1000][\"time\"]\ny1 = train_data.loc[:1000][\"signal\"]\ny_a1 = average_smoothing(train_data.loc[:1000][\"signal\"])\ny_b1 = average_smoothing_center(train_data.loc[:1000][\"signal\"])\ny2 = train_data.loc[1000:2000][\"signal\"]\ny_a2 = average_smoothing(train_data.loc[1000:2000][\"signal\"])\ny_b2 = average_smoothing_center(train_data.loc[1000:2000][\"signal\"])\ny3 = train_data.loc[2000:3000][\"signal\"]\ny_a3 = average_smoothing(train_data.loc[2000:3000][\"signal\"])\ny_b3 = average_smoothing_center(train_data.loc[2000:3000][\"signal\"])","bb4a222d":"fig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y1, marker=dict(color=\"lightskyblue\"), showlegend=False,\n               name=\"Original signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a1, mode='lines', marker=dict(color=\"navy\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b1, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y2, marker=dict(color=\"mediumaquamarine\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a2, mode='lines', marker=dict(color=\"darkgreen\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b2, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, mode='lines+markers', y=y3, marker=dict(color=\"thistle\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_a3, mode='lines', marker=dict(color=\"indigo\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=x, y=y_b3, mode='lines', marker=dict(color=\"red\"), showlegend=False,\n               name=\"Denoised signal (center)\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Original (pale) vs. Denoised (dark) signals\")\nfig.show()","488216fa":"plt.figure(figsize=(20, 5))\nsns.boxplot(x=\"open_channels\", y=\"signal\", data=train_data)\nplt.show()","f89079ed":"train_data.boxplot(column=[\"signal\"], by=[\"open_channels\"], figsize=(20, 5))\nplt.show()","ef5ea5c1":"train_data[\"signal_smoothing\"] = average_smoothing_center(train_data[\"signal\"])","c27804b9":"plt.figure(figsize=(20, 5))\nsns.boxplot(x=\"open_channels\", y=\"signal_smoothing\", data=train_data)\nplt.show()","ff45e3f7":"train_data.boxplot(column=[\"signal\", \"signal_smoothing\"], by=[\"open_channels\"], figsize=(20, 5))\nplt.show()","b16ba083":"def f(x,low,high,mid): return -((-low+high)\/625)*(x-mid)**2+high -low\n\n# CLEAN TRAIN BATCH 7\nbatch = 7; a = 500000*(batch-1); b = 500000*batch\ntrain_data.loc[train_data.index[a:b],'signal_undrifted'] = train_data.signal.values[a:b] - f(train_data.time[a:b].values,-1.817,3.186,325)\n# CLEAN TRAIN BATCH 8\nbatch = 8; a = 500000*(batch-1); b = 500000*batch\ntrain_data.loc[train_data.index[a:b],'signal_undrifted'] = train_data.signal.values[a:b] - f(train_data.time[a:b].values,-0.094,4.936,375)\n# CLEAN TRAIN BATCH 9\nbatch = 9; a = 500000*(batch-1); b = 500000*batch\ntrain_data.loc[train_data.index[a:b],'signal_undrifted'] = train_data.signal.values[a:b] - f(train_data.time[a:b].values,1.715,6.689,425)\n# CLEAN TRAIN BATCH 10\nbatch = 10; a = 500000*(batch-1); b = 500000*batch\ntrain_data.loc[train_data.index[a:b],'signal_undrifted'] = train_data.signal.values[a:b] - f(train_data.time[a:b].values,3.361,8.45,475)","ae1b10cc":"plt.figure(figsize=(20,5))\nsns.lineplot(train_data.time[::1000],train_data.signal[::2000],color='r').set_title('Training Batches 7-10 with Parabolic Drift')\n#plt.figure(figsize=(20,5))\ng = sns.lineplot(train_data.time[::1000],train_data.signal_undrifted[::2000],color='g').set_title('Training Batches 7-10 without Parabolic Drift')\nplt.legend(title='Train Data',loc='upper left', labels=['Original Signal', 'UnDrifted Signal'])\nplt.show(g)","882fee23":"test_data['signal_undrifted'] = test_data.signal\n\n# REMOVE BATCH 1 DRIFT\nstart=500\na = 0; b = 100000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\nstart=510\na = 100000; b = 200000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\nstart=540\na = 400000; b = 500000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\n\n# REMOVE BATCH 2 DRIFT\nstart=560\na = 600000; b = 700000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\nstart=570\na = 700000; b = 800000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\nstart=580\na = 800000; b = 900000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - 3*(test_data.time.values[a:b]-start)\/10.\n\n# REMOVE BATCH 3 DRIFT\ndef f(x):\n    return -(0.00788)*(x-625)**2+2.345 +2.58\na = 1000000; b = 1500000\ntest_data.loc[test_data.index[a:b],'signal_undrifted'] = test_data.signal.values[a:b] - f(test_data.time[a:b].values)","aa7dde89":"plt.figure(figsize=(20,5))\nsns.lineplot(test_data.time[::1000],test_data.signal[::1000],color='r').set_title('Test Batches with Parabolic Drift')\n#plt.figure(figsize=(20,5))\ng = sns.lineplot(test_data.time[::1000],test_data.signal_undrifted[::1000],color='g').set_title('Test Batches without Parabolic Drift')\nplt.legend(title='Test Data',loc='upper right', labels=['Original Signal', 'UnDrifted Signal'])\nplt.show(g)","c96046e1":"## Removing Drift\n[adrianoavelar](https:\/\/www.kaggle.com\/adrianoavelar\/3-simple-ideas-lb-0-938)","318bff25":"## Markov Chains\n[friedchips](https:\/\/www.kaggle.com\/friedchips\/on-markov-chains-and-the-competition-data)","e007945b":"## Smoothing\n[tarunpaparaju](https:\/\/www.kaggle.com\/tarunpaparaju\/ion-switching-competition-signal-eda)"}}