{"cell_type":{"a86aa025":"code","578e03c1":"code","77a45826":"code","208aeec2":"code","d7d1b608":"code","9e4942b3":"code","2367dea6":"code","c4c3835b":"code","b5e0c8ce":"code","f407b95e":"code","36d660dd":"code","db0747b9":"code","528d2e06":"code","ad024c49":"code","82d6d930":"code","a3a14fe8":"code","40731f90":"code","70893087":"code","6c1d1305":"code","319a7631":"code","d35e2d3e":"code","d065a629":"code","2655d0b8":"code","284e061b":"code","231f1508":"code","9ee1d43b":"code","1671d819":"code","f061676f":"code","bfc32f5f":"code","35dece86":"code","c22884dd":"code","032794f8":"code","358c2308":"markdown","3cafaa00":"markdown","3836137d":"markdown","bcd42856":"markdown"},"source":{"a86aa025":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","578e03c1":"import re\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('english')\n\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score","77a45826":"test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")","208aeec2":"print(train.shape)\ntrain.head()","d7d1b608":"print(test.shape)\ntest.head()","9e4942b3":"print(\"Unique Keywords : {}, Unique locations : {}\".format(len(train.keyword.unique()), len(train.location.unique())))\ntrain.keyword.unique()","2367dea6":"print(\"Train : \\n\\n\")\nprint(train.isnull().sum())\nprint(\"\\nTest : \\n\\n\")\nprint(test.isnull().sum())","c4c3835b":"# Class distribution\n\ntrain[\"target\"].value_counts().plot(kind='bar')","b5e0c8ce":"ydata = train[\"target\"]\ntrain = train.drop([\"target\",\"location\", \"id\"], axis=1)\n\ntest = test.drop([\"id\",\"location\"], axis=1)","f407b95e":"keyword_mapper = {}\ntemp = train.keyword.unique()\nfor i in range(len(temp)):\n    keyword_mapper[temp[i]] = i\n    \ntrain[\"keyword\"] = train[\"keyword\"].map(keyword_mapper)\ntest[\"keyword\"] = test[\"keyword\"].map(keyword_mapper)","36d660dd":"def text_preprocessing(data):\n    data = data.apply(lambda x: x.strip().lower())\n    data = data.apply(lambda x: re.sub(r'\\d+', '', x))\n    data = data.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\n    \n    data = data.apply(lambda x : word_tokenize(x))\n    data = data.apply(lambda x: [word for word in x if word not in stop_words])\n    \n    \n    lemmatizer = WordNetLemmatizer()\n    data = data.apply(lambda x: [lemmatizer.lemmatize(word, pos ='v') for word in x])\n    \n    #data = data.apply(lambda x: [pos_tag(x)])\n    return data\n","db0747b9":"test[\"text\"] = text_preprocessing(test[\"text\"])\ntrain[\"text\"] = text_preprocessing(train[\"text\"])","528d2e06":"vectorizer = TfidfVectorizer()\nvector = vectorizer.fit_transform([\"\".join(i) for i in train[\"text\"]])\nvector = vector.todense()\nvector = np.concatenate((vector, np.reshape(np.array(train[\"keyword\"]), (train.keyword.shape[0],-1))), axis=1)\nprint(vector.shape)\n\n# vector_test = vectorizer.fit_transform([\"\".join(i) for i in test[\"text\"]])\nvector_test = vectorizer.transform([\"\".join(i) for i in test[\"text\"]])\nvector_test = vector_test.todense()\nvector_test = np.concatenate((vector_test, np.reshape(np.array(test[\"keyword\"]), (test.keyword.shape[0],-1))), axis=1)\nprint(vector_test.shape)","ad024c49":"xtrain, xtest, ytrain, ytest = train_test_split(vector, ydata, train_size = 0.75)","82d6d930":"model = LinearSVC(loss=\"hinge\",fit_intercept=False, max_iter=1500)\nmodel = model.fit(xtrain, ytrain) \npredictions = model.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","a3a14fe8":"model_lr = LogisticRegression(penalty='l2')\nmodel_lr = model_lr.fit(xtrain, ytrain) \npredictions = model_lr.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","40731f90":"from xgboost import XGBClassifier\n\nmodel_xgb = XGBClassifier(metric= 'euclidean', n_neighbors= 3, weights= 'uniform')\nmodel_xgb = model_xgb.fit(xtrain, ytrain) \npredictions = model_xgb.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","70893087":"tree = DecisionTreeClassifier(random_state = 11, max_features = \"auto\", class_weight = \"balanced\",max_depth = None)\n\nmodel_ada = AdaBoostClassifier(base_estimator=tree)\nmodel_ada = model_ada.fit(xtrain, ytrain)\npredictions = model_ada.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","6c1d1305":"model_gb = GradientBoostingClassifier(criterion='friedman_mse', learning_rate= 0.15, \n                                   loss= 'deviance', max_depth= 8, max_features='sqrt', \n                                   min_samples_leaf= 0.15714285714285714, min_samples_split= 0.5, \n                                   n_estimators= 10, subsample=1.0)\nmodel_gb = model_gb.fit(xtrain, ytrain)\npredictions = model_gb.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","319a7631":"model = ExtraTreesClassifier(bootstrap=False, criterion='gini', max_depth= None, \n                             max_features= 3, min_samples_leaf= 1, min_samples_split= 10, \n                             n_estimators= 300)\nmodel.fit(xtrain, ytrain)\npredictions = model.predict(xtest)\n\nprint(\"Accuracy score: \", accuracy_score(ytest, predictions))\nprint(\"Precision score: \", precision_score(ytest, predictions))\nprint(\"Recall score: \", recall_score(ytest, predictions))\nprint(\"F1 score : \", f1_score(predictions, ytest))\n\nconfusion_matrix(ytest, predictions)","d35e2d3e":"y_pred = model_gb.predict(vector_test)\nsample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission_gb.csv',index=False)\n\n\ny_pred = model_ada.predict(vector_test)\nsample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission_ada.csv',index=False)\n\ny_pred = model_xgb.predict(vector_test)\nsample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission_xgb.csv',index=False)\n\n\ny_pred = model_lr.predict(vector_test)\nsample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission_lr.csv',index=False)\n\ny_pred = model.predict(vector_test)\nsample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\ny_pred = np.round(y_pred).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pred})\nsub.to_csv('submission_ebc.csv',index=False)","d065a629":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub","2655d0b8":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","284e061b":"import tokenization","231f1508":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","9ee1d43b":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","1671d819":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","f061676f":"train_input = bert_encode([\" \".join(i) for i in train.text], tokenizer, max_len=160)\ntest_input = bert_encode([\" \".join(i) for i in test.text], tokenizer, max_len=160)","bfc32f5f":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    \n    return model","35dece86":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","c22884dd":"early = EarlyStopping(monitor='val_loss',mode='auto', baseline=None, restore_best_weights=False)\ntrain_history = model.fit(\n    train_input, ydata,\n    validation_split=0.2,\n    epochs=100,\n    batch_size=16,\n    callbacks=[early], verbose=1\n)\n\nmodel.save('model.h5')","032794f8":"predictions = model.predict(test_input)\nfor i in [0.5, 0.6, 0.4]:\n    arr = [1 if j>i else 0 for j in predictions]\n    sample_sub=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')\n    sub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':arr})\n    sub.to_csv('submission_bert'+str(i)+'.csv',index=False)","358c2308":"# Cleaning text\n","3cafaa00":"# TFIDF Vectorizer","3836137d":"![image.png](attachment:image.png)","bcd42856":"# using BERT"}}