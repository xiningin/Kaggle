{"cell_type":{"3ee02b67":"code","82c8f94d":"code","c756ef00":"code","a5e372ff":"code","dbed519d":"code","f57b82b6":"code","a8dae34a":"code","86a1933d":"code","d84db9d5":"code","7ce39b29":"code","14524531":"code","0629021d":"code","44131516":"code","f545d4b7":"code","3ebf8839":"code","72590b46":"code","a897377c":"code","9563e5ad":"code","acea0852":"code","206460ee":"code","ebb5659c":"code","e1e61e2c":"code","2f87a99b":"code","5d40d361":"code","39ffaa6a":"code","ff21207e":"code","4bd21b27":"code","530cda6f":"code","207f804d":"code","9b153cc8":"code","71786b48":"code","d2cff094":"code","ae41f11a":"code","da3c349d":"code","463cc104":"code","86077789":"code","a2d87689":"code","4f840c8b":"code","28a244cd":"code","70916520":"code","6232f845":"code","b97d5210":"code","86a5cf34":"code","5067907b":"code","bad3393f":"code","61e3572a":"code","5ed7ce53":"code","f0844c65":"code","f797e8e5":"code","41a52097":"code","94ba45fb":"code","2d8dc194":"code","d6f65d97":"markdown","f9cad32e":"markdown","71f50eec":"markdown","ef37611c":"markdown","761de49e":"markdown","61f7d102":"markdown"},"source":{"3ee02b67":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","82c8f94d":"data = pd.read_csv(\"\/kaggle\/input\/clicks-conversion-tracking\/KAG_conversion_data.csv\")\ndata.head()","c756ef00":"data.isnull().sum()","a5e372ff":"data.shape","dbed519d":"data.dtypes","f57b82b6":"data[\"age\"].value_counts()","a8dae34a":"sns.pairplot(data =data)","86a1933d":"data[\"Total_Conversion\"].value_counts()","d84db9d5":"data[\"Approved_Conversion\"].value_counts()","7ce39b29":"plt.figure(figsize = ((30,10)))\nsns.scatterplot(x = \"Total_Conversion\", y = \"Approved_Conversion\" , data = data )","14524531":"data.head()","0629021d":"x = data.iloc[:,9:11].values","44131516":"x","f545d4b7":"from sklearn.cluster import KMeans\nwcss = []\nfor i in range (1,11):\n    kmeans = KMeans(n_clusters = i , init = \"k-means++\" , max_iter = 300, n_init = 10 )\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)\n    # inertia bcoz of wcss ","3ebf8839":"plt.plot(range(1,11),wcss)","72590b46":"kmeans = KMeans(n_clusters = 3)\ny_kmeans = kmeans.fit_predict(x)","a897377c":"y_kmeans","9563e5ad":"plt.figure(figsize=((20,10)))\nplt.scatter (x = x[y_kmeans == 0,0], y = x[y_kmeans == 0,1], c = 'green', label = 'cluster_0' )\nplt.scatter (x = x[y_kmeans == 1,0], y = x[y_kmeans == 1,1], c = 'blue', label = 'cluster_1' )\nplt.scatter (x = x[y_kmeans == 2,0], y = x[y_kmeans == 2,1], c = 'pink', label = 'cluster_2' )\nplt.legend()\nplt.xlabel(\"Total_Conversion\")\nplt.ylabel(\"Approved_Conversion\")","acea0852":"from sklearn import*\nmetrics.silhouette_score(x, y_kmeans, metric='euclidean')","206460ee":"plt.figure ( figsize =((10,10)))\nimport scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(x,method = 'ward'))\n","ebb5659c":"from sklearn.cluster import AgglomerativeClustering\nagg = AgglomerativeClustering(n_clusters = 3 , affinity = \"euclidean\")\ny_hc = agg.fit_predict(x)","e1e61e2c":"plt.figure(figsize=((20,10)))\nplt.scatter (x = x[y_hc == 0,0], y = x[y_hc == 0,1], c = 'green', label = 'cluster_0')\nplt.scatter (x = x[y_hc == 1,0], y = x[y_hc == 1,1], c = 'blue', label = 'cluster_1' )\nplt.scatter (x = x[y_hc == 2,0], y = x[y_hc == 2,1], c = 'violet', label = 'cluster_2' )\nplt.legend()\nplt.xlabel(\"Total_Conversion\")\nplt.ylabel(\"Approved_Conversion\")","2f87a99b":"from sklearn import*\nmetrics.silhouette_score(x, y_hc, metric='euclidean')","5d40d361":"from sklearn.metrics import davies_bouldin_score\nmetrics.davies_bouldin_score(x, y_hc)","39ffaa6a":"from sklearn.cluster import DBSCAN\nfrom sklearn.neighbors import NearestNeighbors\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(x)\ndistances, indices = nbrs.kneighbors(x)","ff21207e":"plt.figure(figsize = (10,10))\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.plot(distances)","4bd21b27":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(x)\n","530cda6f":"from sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps=0.5, min_samples = 5 )\nclusters = dbscan.fit_predict(X_scaled)","207f804d":"clusters","9b153cc8":"plt.figure(figsize=((20,10)))\nplt.scatter(x[:, 0], x[:, 1] ,c = clusters)\n\nplt.xlabel(\"Total_Conversion\")\nplt.ylabel(\"Approved_Conversion\")","71786b48":"from sklearn.metrics import davies_bouldin_score\nmetrics.davies_bouldin_score(x, clusters)","d2cff094":"plt.figure(figsize=((20,10)))\nplt.scatter (x = x[y_hc == 0,0], y = x[y_hc == 0,1], c = 'green', label = 'cluster_0')\nplt.scatter (x = x[y_hc == 1,0], y = x[y_hc == 1,1], c = 'blue', label = 'cluster_1' )\nplt.scatter (x = x[y_hc == 2,0], y = x[y_hc == 2,1], c = 'violet', label = 'cluster_2' )\nplt.legend()\nplt.xlabel(\"Total_Conversion\")\nplt.ylabel(\"Approved_Conversion\")\nplt.title(\"hierarchical clustering\")","ae41f11a":"cluster_1 = data[y_hc == 0]\ncluster_1.head()","da3c349d":"cluster_2 = data[y_hc == 1]\ncluster_2.head()","463cc104":"cluster_3 = data[y_hc == 2]\ncluster_3.head()","86077789":"data.head()","a2d87689":"import seaborn as sns","4f840c8b":"data.describe()","28a244cd":"sns.pairplot(data =data)","70916520":"plt.figure(figsize = ((30,10)))\nsns.scatterplot(y = \"Clicks\", x = \"Impressions\" , data = data )","6232f845":"xx = data[[\"Clicks\",\"Impressions\"]].values\nxx","b97d5210":"plt.figure ( figsize =((30,10)))\nimport scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(xx,method = 'ward'))\n","86a5cf34":"from sklearn.cluster import AgglomerativeClustering\nagg = AgglomerativeClustering(n_clusters = 3 , affinity = \"euclidean\")\ny_hc_xx = agg.fit_predict(xx)","5067907b":"plt.figure(figsize=((20,10)))\nplt.scatter (x = x[y_hc_xx == 0,0], y = x[y_hc_xx == 0,1], c = 'green', label = 'cluster_0')\nplt.scatter (x = x[y_hc_xx == 1,0], y = x[y_hc_xx == 1,1], c = 'blue', label = 'cluster_1' )\nplt.scatter (x = x[y_hc_xx == 2,0], y = x[y_hc_xx == 2,1], c = 'violet', label = 'cluster_2' )\nplt.legend()\nplt.xlabel(\"Impressions\")\nplt.ylabel(\"Clicks\")","bad3393f":"from sklearn.cluster import KMeans\nwcss = []\nfor i in range (1,11):\n    kmeans = KMeans(n_clusters = i , init = \"k-means++\" , max_iter = 300, n_init = 10 )\n    kmeans.fit(xx)\n    wcss.append(kmeans.inertia_)\n    # inertia bcoz of wcss ","61e3572a":"plt.plot(range(1,11),wcss)","5ed7ce53":"kmeans = KMeans(n_clusters = 3)\ny_kmeans_xx = kmeans.fit_predict(xx)","f0844c65":"plt.figure(figsize=((20,10)))\nplt.scatter (x = x[y_kmeans_xx == 0,0], y = x[y_kmeans_xx == 0,1], c = 'green', label = 'cluster_0' )\nplt.scatter (x = x[y_kmeans_xx == 1,0], y = x[y_kmeans_xx == 1,1], c = 'blue', label = 'cluster_1' )\nplt.scatter (x = x[y_kmeans_xx == 2,0], y = x[y_kmeans_xx == 2,1], c = 'pink', label = 'cluster_2' )\nplt.legend()\nplt.xlabel(\"Impressions\")\nplt.ylabel(\"Clicks\")","f797e8e5":"from sklearn.cluster import DBSCAN\nfrom sklearn.neighbors import NearestNeighbors\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(xx)\ndistances, indices = nbrs.kneighbors(xx)","41a52097":"plt.figure(figsize = (10,10))\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.plot(distances)","94ba45fb":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled_xx = scaler.fit_transform(xx)\n\n\nfrom sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps=0.5, min_samples = 5 )\nclusters = dbscan.fit_predict(X_scaled_xx)","2d8dc194":"plt.figure(figsize=((20,10)))\nplt.scatter(x[:, 0], x[:, 1] ,c = clusters)\nplt.xlabel(\"Impressions\")\nplt.ylabel(\"Clicks\")","d6f65d97":"1.) ad_id: an unique ID for each ad.\n\n2.) xyzcampaignid: an ID associated with each ad campaign of XYZ company.\n\n3.) fbcampaignid: an ID associated with how Facebook tracks each campaign.\n\n4.) age: age of the person to whom the ad is shown.\n\n5.) gender: gender of the person to whim the add is shown\n\n6.) interest: a code specifying the category to which the person\u2019s interest belongs (interests are as mentioned in the person\u2019s Facebook public profile).\n\n7.) Impressions: the number of times the ad was shown.\n\n8.) Clicks: number of clicks on for that ad.\n\n9.) Spent: Amount paid by company xyz to Facebook, to show that ad.\n\n10.) Total conversion: Total number of people who enquired about the product after seeing the ad.\n\n11.) Approved conversion: Total number of people who bought the product after seeing the ad.","f9cad32e":"from the above models we final came to know that hierarchical model is the best suite model for our problem statment ","71f50eec":"KMeans Clustering ","ef37611c":"Hierarchieal clustering ","761de49e":"**THE END**","61f7d102":"DBScan Clustering"}}