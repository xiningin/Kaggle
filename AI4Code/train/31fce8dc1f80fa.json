{"cell_type":{"7f700b03":"code","409359eb":"code","370e258f":"code","55b1f1ba":"code","7f5caae5":"code","4665ffee":"code","d12fd72c":"code","0b0cf80e":"code","f96c41a4":"code","43edacac":"markdown","ab8919fe":"markdown","e2a90670":"markdown"},"source":{"7f700b03":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\npd.set_option(\"display.max_colwidth\", 200)","409359eb":"# read the data\nreviews_df = pd.read_csv('..\/input\/Womens Clothing E-Commerce Reviews.csv')","370e258f":"# Let's check out the missing values\nreviews_df.isnull().sum()","55b1f1ba":"# drop rows with NA\nreviews_df.dropna(subset=['Review Text', 'Division Name'], inplace=True)","7f5caae5":"reviews_df['Rating'].value_counts()","4665ffee":"# clean reviews, removing everything except alphabets\nreviews_df['Review_Tidy'] = reviews_df['Review Text'].str.replace(\"[^a-zA-Z#]\", \" \")\n\n# removing tokens having length 1\nreviews_df['Review_Tidy'] = reviews_df['Review_Tidy'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>1]))","d12fd72c":"# tokenizing reviews \ntokenized_reviews = reviews_df['Review_Tidy'].apply(lambda x: x.split())\ntokenized_reviews = tokenized_reviews.tolist()","0b0cf80e":"import gensim\n\n# using word2vec to extract features aka word vectors\nmodel_w2v = gensim.models.Word2Vec(\n            tokenized_reviews,\n            size=200, # desired no. of features\/independent variables \n            window=5, # context window size\n            sg = 1, # 1 for skip-gram model\n            hs = 0,\n            negative = 10, # for negative sampling\n            workers= 4, # no.of cores\n            seed = 34)","f96c41a4":"model_w2v.wv.most_similar(positive=\"jeans\")","43edacac":"## Feature Extraction\n\nHere I am using word2vec to extract numerical features from the tokenized reviews text.","ab8919fe":"We have 5-scale rating system.","e2a90670":"Let's see the power of this  word2vec model. I'll give a word as input and it will throw a list of most similar words."}}