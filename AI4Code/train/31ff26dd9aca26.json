{"cell_type":{"0ad9b82d":"code","150d0f75":"code","ea7134c7":"code","31b6a624":"code","7043192b":"code","a9be3a93":"code","87797bc7":"code","cf5520c9":"code","93044cd8":"code","ca0139ef":"code","07a1bcae":"code","a938e624":"markdown","98c6ce94":"markdown"},"source":{"0ad9b82d":"#import libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly_express as pe\nfrom torchvision.utils import make_grid\nimport torch\nfrom torchvision.transforms import ToTensor, Resize, Compose\nfrom PIL import Image\nimport os\nimport random\n# import cv2","150d0f75":"#read datasets\ntrain_df = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\nprint(train_df.shape)\ntrain_df.head()","ea7134c7":"# no of similar objects are between 2 and 51\npd.DataFrame(train_df['label_group'].value_counts())","31b6a624":"#Let's plot histogram of above df\n#histogram of labels that have similar products\npe.histogram(train_df['label_group'].value_counts().values)","7043192b":"#Let's see some similar images w.r.t to the labels  \ndef grid_sim_images(df, label='2937985045'):\n    label = random.sample(df.label_group.values.tolist(), 1)[0]\n    print(label)\n    a = train_df[train_df['label_group'] == label]\n    print('Titles', a['title'].values)\n    print('image phash', a['image_phash'].values)\n    imgs = [os.path.join('..\/input\/shopee-product-matching\/train_images\/',i) for i in a['image'].values.tolist()]\n    n =len(imgs)\n    tansform = Compose([Resize((500,500)), ToTensor()])\n    torch_imgs = []\n    for i in imgs:\n        torch_imgs.append(tansform(Image.open(i)))\n    plt.imshow(make_grid(torch_imgs).permute(1,2,0))\n\nplt.figure(figsize=(60,40))\ngrid_sim_images(train_df)","a9be3a93":"#Let's see how many similar titles are there in the dataset\npd.DataFrame(train_df['title'].value_counts())","87797bc7":"#plot histogram for simililar titles \npe.histogram(train_df['title'].value_counts().values)","cf5520c9":"#get images that have same title (case sensitive)\ndef grid_sim_images_title(df, title='Emina Glossy Stain'):\n    title = random.sample(df.title.values.tolist(), 1)[0]\n    print(title)\n    a = train_df[train_df['title'] == title]\n#     print(a['title'].values)\n    imgs = [os.path.join('..\/input\/shopee-product-matching\/train_images\/',i) for i in a['image'].values.tolist()]\n    n =len(imgs)\n    if n > 10:\n        n = 10\n    tansform = Compose([Resize((500,500)), ToTensor()])\n    torch_imgs = []\n    for i in imgs:\n        torch_imgs.append(tansform(Image.open(i)))\n    plt.imshow(make_grid(torch_imgs).permute(1,2,0))\n\ngrid_sim_images_title(train_df)","93044cd8":"# Now let see the images with same phash values\ntrain_df['image_phash'].value_counts()","ca0139ef":"pe.histogram(train_df['image_phash'].value_counts().values)","07a1bcae":"# see images with similar phash values\ndef grid_sim_images_phash(df, phash='e992966d4ba49761'):\n    image_phash = random.sample(df.image_phash.values.tolist(), 1)[0]\n    print(image_phash)\n    a = train_df[train_df['image_phash'] == image_phash]\n#     print(a['title'].values)\n    imgs = [os.path.join('..\/input\/shopee-product-matching\/train_images\/',i) for i in a['image'].values.tolist()]\n    n =len(imgs)\n    if n > 10:\n        n = 10\n    tansform = Compose([Resize((500,500)), ToTensor()])\n    torch_imgs = []\n    for i in imgs:\n        torch_imgs.append(tansform(Image.open(i)))\n    plt.imshow(make_grid(torch_imgs).permute(1,2,0))\n    \ngrid_sim_images_phash(train_df)","a938e624":"#### Keep running the grid_sim_images() multiple times to get more similar images and get insights about the data","98c6ce94":"## A preliminary EDA before building a model"}}