{"cell_type":{"b551e335":"code","9fa4c9e8":"code","0b0ca3e3":"code","c3329e37":"code","410dda11":"code","ec76d5c0":"code","c97ef45c":"code","9050b968":"code","9dde0b71":"code","ae34c304":"code","497daaee":"code","1cf96b56":"code","26e6da4d":"code","0b38dd31":"code","46139963":"code","d84f154e":"code","4ee6578f":"code","4e296f6a":"code","69e3da3c":"code","c4177832":"code","b29b1e69":"code","9739f15f":"code","74e4c5c1":"code","fd59c0e1":"code","95c9d027":"code","fb2fe95c":"code","3507b0f1":"code","2a3dcd2e":"code","e89e117f":"code","455079c6":"code","907dc817":"code","f805c3e3":"code","4f62976b":"code","5cc324e3":"code","6869bf98":"markdown","6e218055":"markdown","64b6260c":"markdown","be3d7e76":"markdown","fa9e9939":"markdown","c6601106":"markdown","a929893a":"markdown","139d4bb5":"markdown","f62fe50e":"markdown"},"source":{"b551e335":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import RFECV\nfrom yellowbrick.model_selection import ValidationCurve\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.model_selection import train_test_split as tts\nfrom yellowbrick.regressor import ResidualsPlot\nfrom yellowbrick.regressor import PredictionError\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9fa4c9e8":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nss = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","0b0ca3e3":"train.head()","c3329e37":"train.shape,test.shape","410dda11":"train.info()","ec76d5c0":"train.nunique()","c97ef45c":"fig, ax = plt.subplots(figsize=(20,10))\nsns.heatmap(train.isnull())","9050b968":"nul={}\na=[]\nfor i in train.columns:\n    if train[i].isnull().sum()>0:\n        a.append(i)\n        nul[i]=train[i].isnull().sum()\nnul","9dde0b71":"tbd = ['Alley','FireplaceQu','PoolQC','Fence','MiscFeature']\ntrain.drop( tbd , axis=1, inplace=True )\ntest.drop( tbd , axis=1, inplace=True )","ae34c304":"train.shape","497daaee":"for i in train.columns:\n    if train[i].isnull().sum()>0:\n        mod=train[i].mode()[0]\n        print(mod)\n        train[i]=train[i].fillna(mod)","1cf96b56":"txt=[]\nfor i in train.columns:\n    if train[i].dtype == 'object':\n        txt.append(i)\ntxt","26e6da4d":"from sklearn import preprocessing\ndef encode(i):\n    le = preprocessing.LabelEncoder()\n    le.fit(train[i])\n    train[i]=le.transform(train[i])","0b38dd31":"for i in txt:\n    encode(i)\ntrain.head()","46139963":"X=train.iloc[:,:75]\ny=train['SalePrice']\n\nXtrain,Xtest,ytrain,ytest = train_test_split(X,y, random_state=0)","d84f154e":"Xtrain.head(1)","4ee6578f":"Xtrain.shape,Xtest.shape,ytrain.shape,ytest.shape","4e296f6a":"linear = LinearRegression()\nvisualizer = PredictionError(linear)\nvisualizer.fit(Xtrain, ytrain)\nvisualizer.score(Xtrain, ytrain)\nvisualizer.show()","69e3da3c":"pred = visualizer.predict(Xtest)\n#print(\"accuracy: \",metrics.accuracy_score(ytest,y_pred=pred))\n\nresult_df = pd.DataFrame({'Actual':ytest,'Prediction':pred})\nresult_df","c4177832":"from sklearn.svm import SVR\nSVR = SVR()\nSVRvisualizer = PredictionError(SVR)\nSVRvisualizer.fit(Xtrain, ytrain)\nSVRvisualizer.score(Xtrain, ytrain)\nSVRvisualizer.show()","b29b1e69":"#predict the response\npred = SVRvisualizer.predict(Xtest)\n#print(\"accuracy: \",metrics.accuracy_score(ytest,y_pred=pred))\n\nresult_df = pd.DataFrame({'Actual':ytest,'Prediction':pred})\nresult_df","9739f15f":"from sklearn.tree import DecisionTreeRegressor\nDecisionTreeRegressor = DecisionTreeRegressor()\nDTRvisualizer = PredictionError(DecisionTreeRegressor)\nDTRvisualizer.fit(Xtrain, ytrain)\nDTRvisualizer.score(Xtrain, ytrain)\nDTRvisualizer.show()","74e4c5c1":"#predict the response\npred = DTRvisualizer.predict(Xtest)\n#print(\"accuracy: \",metrics.accuracy_score(ytest,y_pred=pred))\n\nresult_df = pd.DataFrame({'Actual':ytest,'Prediction':pred})\nresult_df","fd59c0e1":"from sklearn.ensemble import RandomForestRegressor\nRandomForestRegressor = RandomForestRegressor()\nRFvisualizer = PredictionError(RandomForestRegressor)\nRFvisualizer.fit(Xtrain, ytrain)\nRFvisualizer.score(Xtrain, ytrain)\nRFvisualizer.show()","95c9d027":"pred = RFvisualizer.predict(Xtest)\n#print(\"accuracy: \",metrics.accuracy_score(ytest,y_pred=pred))\n\nresult_df = pd.DataFrame({'Actual':ytest,'Prediction':pred})\nresult_df","fb2fe95c":"from sklearn.ensemble import GradientBoostingRegressor\nGradientBoostingRegr = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =42)\n\nGBRvisualizer = PredictionError(RandomForestRegressor)\nGBRvisualizer.fit(Xtrain, ytrain)\nGBRvisualizer.score(Xtrain, ytrain)\nGBRvisualizer.show()","3507b0f1":"pred = GBRvisualizer.predict(Xtest)\n#print(\"accuracy: \",metrics.accuracy_score(ytest,y_pred=pred))\n\nresult_df = pd.DataFrame({'Actual':ytest,'Prediction':pred})\nresult_df","2a3dcd2e":"test.head()","e89e117f":"test.isnull().sum()","455079c6":"for i in test.columns:\n    if test[i].isnull().sum()>0:\n        mod=test[i].mode()[0]\n        print(mod)\n        test[i]=test[i].fillna(mod)","907dc817":"def test_encode(i):\n    le = preprocessing.LabelEncoder()\n    le.fit(test[i])\n    test[i]=le.transform(test[i])\n#TEST OUTPUT\nfor i in txt:\n    test_encode(i)\ntest.head()\n","f805c3e3":"pred = GBRvisualizer.predict(test)\npred","4f62976b":"ss['SalePrice'] = pred","5cc324e3":"ss.to_csv('\/kaggle\/working\/GBRsubmission.csv', index=False)\nss","6869bf98":"# converting to numerical ","6e218055":"# Train-test Split","64b6260c":"# Random Forest","be3d7e76":"# Linear Regression","fa9e9939":"# Gradient Boosting ","c6601106":"# Decision Tree","a929893a":"# Submission","139d4bb5":"# FINAL PREDICTION","f62fe50e":"# SVM"}}