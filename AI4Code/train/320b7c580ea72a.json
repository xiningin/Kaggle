{"cell_type":{"0c4d7199":"code","7669ab47":"code","ba309e85":"code","ff5e9316":"code","29fc0f79":"code","56aeebce":"code","d93a6446":"code","85225363":"code","4f4b1b6e":"code","1ee5746a":"code","a3eda597":"code","3fbe6df6":"code","5f3f4244":"code","b8d914c8":"code","fa6b412a":"code","0280c265":"code","cec9688a":"code","9678da76":"code","770ce8ed":"code","a58eb83c":"code","13cecc7a":"code","df3ddd9f":"code","d1f972f1":"code","97a2a072":"code","ef0b7df4":"code","e013861b":"code","414d2268":"code","93300d6e":"code","e2131bf8":"code","fd73706b":"code","b193f4eb":"code","dcc4e306":"code","b6612452":"code","715d90c9":"code","36d0ce74":"code","72791f69":"code","97735822":"code","fd09008b":"code","24077a27":"code","0986d7a8":"code","00b23d77":"code","8d218d5b":"code","c3270c25":"code","c6eea87a":"code","e733ed5b":"code","ebea16a1":"markdown","f6f8c8bf":"markdown","a823b40b":"markdown","56659a3b":"markdown","d16d7d56":"markdown","0497ea44":"markdown","8a5ce089":"markdown","83831743":"markdown","8d3ce0f0":"markdown","aab1dc98":"markdown"},"source":{"0c4d7199":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7669ab47":"# import pandas as pd\n# import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly import io","ba309e85":"df = pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndata_dict = pd.read_excel('\/kaggle\/input\/car-price-prediction\/Data Dictionary - carprices.xlsx')","ff5e9316":"df.head()","29fc0f79":"data_dict.head()","56aeebce":"data_dict[['Unnamed: 6', 'Unnamed: 7', 'Unnamed: 11']]","d93a6446":"df.shape","85225363":"df.info()","4f4b1b6e":"df.describe()","1ee5746a":"# Droppipng car_Id as it is not a deciding factor in Prediction of cars. (Business Knowledge)\ndf = df.drop('car_ID', axis = 1)","a3eda597":"# Checking Outliers\npx.box(data_frame = df['price'], labels = ({'variable':'Checking for Outliers in Price'}),\n       color_discrete_sequence= ['seagreen'], hover_name = df['CarName'])","3fbe6df6":"df['CarName'] = df['CarName'].str.split(' ', expand = True)","5f3f4244":"df.head()","b8d914c8":"df['CarName'].unique()","fa6b412a":"# Renaming Car Company Names' typo errors to their original names.\ndf['CarName'] = df['CarName'].replace({'maxda':'mazda', 'Nissan':'nissan', 'porcshce':'porsche', 'toyouta': 'toyota', \n                                      'vokswagen':'volkswagen', 'vw':'volkswagen'})","0280c265":"df['CarName'].unique()","cec9688a":"# Data Dictionary says symboling is a categorical variable. So changing it from an 'int' to 'str'.\ndf['symboling'] = df['symboling'].astype(str)","9678da76":"# Heatmap woth Plotly\nfig = px.imshow(df.corr())\nfig.update_layout(autosize=False,\n    width=700,\n    height=700)","770ce8ed":"# Heatmap with Seaborn\nplt.figure(figsize = (15, 8))\nsns.heatmap(df.corr(), annot = True, cmap = 'coolwarm')","a58eb83c":"car_count = df['CarName'].value_counts()\npx.bar(data_frame = car_count, labels = {'index':'Car Companies', 'value':'Total no of Cars Sold', 'color':'Popularity'}, color = car_count)","13cecc7a":"px.histogram(data_frame = df, x = 'price', marginal = 'box')","df3ddd9f":"plt.figure(figsize = (15, 8))\nsns.distplot(df['price'])","d1f972f1":"sns.pairplot(df.select_dtypes(exclude = ['object']))","97a2a072":"df = df[['price','enginetype','fueltype', 'aspiration','carbody','cylindernumber', 'drivewheel',\n            'wheelbase','curbweight', 'enginesize', 'boreratio','horsepower', \n                    'citympg','highwaympg', 'carlength','carwidth']]","ef0b7df4":"df.head()","e013861b":"df = pd.get_dummies(df, drop_first = True)","414d2268":"df.head()","93300d6e":"df.iloc[:, 9:21]","e2131bf8":"df.shape","fd73706b":"#X = df.drop('price', axis = 1)\n#y = df['price']","b193f4eb":"from sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(df, test_size = 0.3, random_state = 42)","dcc4e306":"X_train.shape","b6612452":"X_test.shape","715d90c9":"y_train.shape","36d0ce74":"y_test.shape","72791f69":"scaled_features = ['price', 'wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower', 'citympg',\n                     'highwaympg', 'carlength', 'carwidth']","97735822":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ndf_train[scaled_features] = sc.fit_transform(df_train[scaled_features])\ndf_test[scaled_features] = sc.transform(df_test[scaled_features])","fd09008b":"df_train","24077a27":"X_train = df_train.drop('price', axis = 1)\ny_train = df_train['price']","0986d7a8":"X_test = df_test.drop('price', axis = 1)\ny_test = df_test['price']","00b23d77":"y_train.head()","8d218d5b":"print(\"Shape of X_train: \", X_train.shape)\nprint(\"Shape of y_train: \", y_train.shape)\nprint(\"Shape of X_test: \", X_test.shape)\nprint(\"Shape of y_test: \", y_test.shape)","c3270c25":"from xgboost import XGBRegressor\nregressor = XGBRegressor()\nregressor.fit(X_train, y_train)","c6eea87a":"y_pred = regressor.predict(X_test)","e733ed5b":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nprint (\"R2 Score: \", r2_score(y_test, y_pred))\nprint (\"Mean Absolute Error: \", mean_absolute_error(y_test, y_pred))\nprint (\"Mean Square Error: \", mean_squared_error(y_test, y_pred))\nprint (\"Root Mean Square Error: \", np.sqrt(mean_squared_error(y_test, y_pred)))","ebea16a1":"# Feature Extraction of CarName Column","f6f8c8bf":"# Observation :\n\n1. carlength, carwidth, curbweight, enginesize & horsepower seems to have a positive correlation with price.\n2. citympg & highwaympg both have a negative correlation with price.","a823b40b":"# Model Building","56659a3b":"# Standard Scaling all the values except dummy variables (Because it makes no sense to scale binary variables)","d16d7d56":"# Importing Essential Libraries","0497ea44":"### Outliers consist of cars from only BMW, Porsche, Jaguar & Buick.\n### Although we could remove them, we will instead scale all the values to have a same Mean and Standard Deviation.","8a5ce089":"## Encoding Categorical Data","83831743":"# Data Preparation","8d3ce0f0":"# Splitting into Training & Testing Datasets","aab1dc98":"# Exploratory Data Analysis (EDA)"}}