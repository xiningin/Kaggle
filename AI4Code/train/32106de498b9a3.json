{"cell_type":{"4be2f5f1":"code","55ee815e":"code","64bcdbad":"code","5a2add64":"code","91799a53":"code","ec59446c":"code","549eae8c":"code","c0eb1546":"code","50b2733a":"code","2c10864c":"code","513a8a74":"code","92b51131":"code","632c1351":"code","b98af005":"code","bca98ca8":"code","82b9eb0a":"code","382a1f15":"code","780e27fa":"code","ec26e537":"code","5845e5a7":"code","9e22dab0":"code","cc77a011":"code","0f12a840":"code","27e900a0":"code","81d912c1":"code","ed4886c8":"code","2e9e11c4":"code","f0dbd16a":"markdown","811b518c":"markdown","cc2d4f3e":"markdown","67e8a58a":"markdown"},"source":{"4be2f5f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nroot = '\/kaggle\/input\/netflix-shows\/'\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55ee815e":"import pandas as pd\ndf = pd.read_csv(\n    os.path.join(root, 'netflix_titles.csv'))\ndf","64bcdbad":"sns.heatmap(df.isnull(), cmap = 'inferno')","5a2add64":"#Null value analysis\ndf.info()","91799a53":"#Managing null values\ndf.dropna(subset=['date_added'],axis = 0, inplace = True)\n\n#Correcting rating columns values and changing to a correct rating label\ndf['rating']  = df['rating'].apply(lambda x : x.split(\" \")[0] if \"min\" in str(x) else x)\nreplace_rating = {'74': 'TV-14', '84': 'TV-14','66': 'TV-14','67': 'TV-14', '2359': 'TV-14', '3660': 'PG-13', '3736': 'TV-14', '3737': 'TV-14', '3738': 'TV-14', '4323': 'TV-14'}\ndf = df.replace({'rating' : replace_rating})","ec59446c":"#Adding values to missing elements for country\ndf['country'] = df['country'].fillna('United States')\ndf['fist_country_in_agg'] = df['country'].apply(lambda x: x.split(\",\")[0]) #when there are multiple countries in a cell\n\n#Adding an column for season_count\ndf['season_count'] = df['duration'].apply(lambda x : x.split(\" \")[0] if \"Season\" in str(x) else \"\")\ndf['season_count']","549eae8c":"df.nunique()\/df.shape[0]*100","c0eb1546":"def create_rows_for_countries(df):\n    df_new = df.copy()\n    index_val = df[df['country'].str.contains(',') == True].index\n    for index in index_val:\n        for country_name in df_new.iloc[index, :]['country'].split(','):\n            df_new.at[index, 'country'] = country_name\n            df_new.append(df_new.iloc[index, :])\n    print(\"No of rows with multiple countries \", len(df_new[df_new['country'].str.contains(',') == True].index))\n    return df_new\n","50b2733a":"#No of movies vs tv shows\ndf_movie = df[df['type'] == 'Movie']\ndf_tv = df[df['type'] == 'TV Show']\nsns.set(style=\"darkgrid\")\nsns.countplot(x=\"type\", data= df)","2c10864c":"#Counting shows ratings\nfig, axes = plt.subplots(1, 2,sharey=True,  figsize=(15,5))\nsns.countplot(x=\"rating\", data=df_tv, order=df_tv['rating'].value_counts().index[0:7], ax = axes[0])\nsns.countplot(x=\"rating\", data=df_movie, order=df_movie['rating'].value_counts().index[0:7], ax = axes[1])","513a8a74":"order=df_tv['listed_in'].value_counts()[0:15]\norder\n\n#Popular TV contents tags are - 'Science & Nature TV',Crime TV Shows',TV Dramas',\n#'TV Comedies','Reality TV', 'Romantic TV Shows',\n#'TV Comedies','Anime Series','Docuseries'","92b51131":"order=df_movie['listed_in'].value_counts()[0:15]\norder\n#Popular movie contents tags are - 'Dramas','Documentaries','Stand-Up Comedy',\n#'Comedies','Independent Movies', 'Children & Family Movies',\n#'Romantic Movies','Romantic Movies','Thrillers','Action & Adventure'","632c1351":"def count_genre(df, dict_tags):\n    df_tag = pd.DataFrame(columns = df.columns) \n    for tags in dict_tags.keys():\n        df_temp = df[df['listed_in'].str.contains(tags)]\n        df_temp['listed_in'] = tags\n        df_tag = df_tag.append(df_temp)\n        val = df_temp.shape[0]\n        dict_tags.update({tags:val})\n        dict_tags = {k: v for k, v in sorted(dict_tags.items(), key=lambda item: item[1], reverse = True)}   \n    return dict_tags, df_tag","b98af005":"#Count popular TV tags \n\ndict_tags_tv = {'Science & Nature TV' : 0,'Crime TV Shows':0,'TV Dramas':0,\n'TV Comedies':0 ,'Reality TV': 0, 'Romantic TV Shows':0,\n'Anime Series':0,'Docuseries':0}\ndict_tags_tv, df_tags_tv = count_genre(df_tv, dict_tags_tv)\n\n#Count popular movie tags\ndict_tags_movie = {'Dramas' : 0,'Documentaries':0,'Stand-Up Comedy':0,\n'Independent Movies':0 ,'Children & Family Movies': 0, 'Romantic Movies':0,\n'Thrillers':0,'Action & Adventure':0}\ndict_tags_movie, df_tags_movie = count_genre(df_movie, dict_tags_movie)\n","bca98ca8":"#Counting shows ratings\nfig, axes = plt.subplots(1, 2, figsize=(15,5))\nsns.countplot(x=\"listed_in\", data=df_tags_tv, order=df_tags_tv['listed_in'].value_counts().index[0:8], ax = axes[0])\nsns.countplot(x=\"listed_in\", data=df_tags_movie, order=df_tags_movie['listed_in'].value_counts().index[0:8], ax = axes[1])\naxes[0].tick_params(axis='x', rotation=90)\naxes[1].tick_params(axis='x', rotation=90)\naxes[0].set_title('TV shows')\naxes[1].set_title('Movies')","82b9eb0a":"#Checking trends\nplt.figure(figsize = (12, 10))\ndf_tag_tv = df_tags_tv[df_tags_tv.release_year > 2010]\nsns.countplot(x=\"listed_in\", data=df_tag_tv, hue = df_tag_tv['release_year'])\nplt.tick_params(axis='x', rotation=90)\nplt.title('TV shows genre trend')","382a1f15":"#Checking trends\nplt.figure(figsize = (12, 10))\ndf_tag_movie = df_tags_movie[df_tags_movie.release_year > 2010]\nsns.countplot(x=\"listed_in\", data=df_tag_movie, hue = df_tag_movie['release_year'])\nplt.tick_params(axis='x', rotation=90)\nplt.title('Movie shows genre trend')","780e27fa":"#  Top10 Countries Based on the Movie Count\ndf['country'] = df['country'].str.strip()\ncountry_movies = df[df.type==\"Movie\"].country.value_counts()\ntop10country = country_movies.sort_values(ascending = False)[0:10]\nplt.figure(figsize=(12, 3))\nsns.barplot(x = top10country.index, y= top10country.values)\nplt.show()","ec26e537":"#Distribution of movies ratings for United States\ndf['country'] = df['country'].str.strip()\ncountry_movies = df[(df.type==\"Movie\") & (df.country.str.contains(\"United States\"))].rating.value_counts()\ntop_rating_movies = country_movies.sort_values(ascending = False)\nplt.figure(figsize=(12, 3))\nsns.barplot(x = top_rating_movies.index, y= top_rating_movies.values)\nplt.show()\n","5845e5a7":"#Distribution of movies ratings for India\ncountry_movies = df[(df.type==\"Movie\") & (df.country.str.contains(\"India\"))].rating.value_counts()\ntop_rating_movies = country_movies.sort_values(ascending = False)\nplt.figure(figsize=(12, 3))\nsns.barplot(x = top_rating_movies.index, y= top_rating_movies.values)\nplt.show()","9e22dab0":"#  A second approach to handle rows with multiple countries\n\n# from collections import Counter\n\n\n# country_movies = df[df.type==\"Movie\"].country.value_counts()\n\n# #Creating a series for a multiple countries \n# multiple_labels = country_movies[country_movies.index.str.contains(\",\")]\n# multiple_labels = multiple_labels.index.str.split(\", \")\n\n# #Creating an array separating group values into a single row\n# a=[]\n# for i in range(len(multiple_labels)):\n#     for j in range(len(multiple_labels[i])):\n#         a.append(multiple_labels[i][j])\n\n# a = country_movies.append(pd.Series(Counter(a)))\n# b = a.groupby(by= a.index).sum()\n# country_movies_df = b[~b.index.str.contains(\",\")]\n\n# country_movies_df = country_movies_df.sort_values(ascending = False)[0:10]","cc77a011":"import regex as re\nstr1 = \" ame, ads, ds\"\not = re.split(\",\", str1)\nprint(ot)\n","0f12a840":"#  Top10 Countries Based on the movie rating\ndf1= df.copy()\ndf1['count_country'] = (df1['country'].str.split(','))\ndf1","27e900a0":"movie = df[df['type']== 'Movie']['type'].count()\nTV = df[df['type']== 'TV Show']['type'].count()\nplt.bar(['Movie', 'TV'], height=[movie, TV], color=['red','green'], visible = True)\nplt.title('Comparision between TV and Movie shows count')\nplt.xlabel('Medium')\nplt.ylabel('Count')\nplt.show()","81d912c1":"df_movie = df[df.type=='Movie']\ndf_movie_graph = df_movie.groupby('director', as_index= False).count()[['director','show_id']].sort_values(by='show_id', ascending=False)[:8]\nplt.figure(figsize=(15,10))\nplt.bar(df_movie_graph['director'], df_movie_graph['show_id'], color=['blue'], visible = True)\nplt.title('Most movies by director')\nplt.xlabel('Director')\nplt.ylabel('Count')\nplt.show()","ed4886c8":"df_movie_graph = df_movie.groupby('release_year', as_index= False).count()[['release_year','show_id']].sort_values(by='release_year', ascending=False)[:10]\nplt.bar(df_movie_graph['release_year'], df_movie_graph['show_id'], color=['blue'], visible = True)\nplt.title('Movies count for last 10 years')\nplt.xlabel('Year')\nplt.ylabel('Movie')\nplt.show()","2e9e11c4":"df_movie_graph = df_movie.groupby('rating', as_index= False).count()[['rating','show_id']].sort_values(by='show_id', ascending=False)[:10]\nplt.bar(df_movie_graph['rating'], df_movie_graph['show_id'], color=['blue'], visible = True)\nplt.title('Movies with top rating count')\nplt.xlabel('Rating')\nplt.ylabel('Movie')\nplt.show()","f0dbd16a":"Analysis:\n\n1. Which country has the most movies?\n2. Comparision of total TV shows vs Movies count?\n3. Who are the most active director?\n4. What are the trend of movies counts for past 10 years?\n5. Which types of movie ratings are more popular?","811b518c":"**Prelim EDA**","cc2d4f3e":"***Country Analysis***","67e8a58a":"***Country analysis***"}}