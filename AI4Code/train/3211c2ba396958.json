{"cell_type":{"8ab22994":"code","f7ec86c7":"code","f96f6d93":"code","a6005ac4":"code","3e8ca14d":"code","a9a83cfb":"code","87364ddb":"code","8365aeeb":"code","6d4710c2":"code","8f114856":"code","f3d277a3":"code","b5d15e1d":"code","ae680805":"code","1cf8fd5d":"code","3854d166":"code","734bea2f":"code","8a69d62f":"code","b4a8e851":"code","f5ac27cd":"code","03db476d":"code","af37747c":"code","1ee5c7ca":"code","a3bef347":"code","19d56b3c":"code","0824c2cc":"code","e00b3452":"code","44efbb21":"code","f933cfd1":"code","5a1656ae":"code","ffe0775c":"code","801b42b4":"code","7769fa34":"code","57366c41":"code","0b6b8391":"code","e1a7169f":"code","d1d69411":"code","15855c4e":"code","567209bc":"code","64cb8169":"code","f50bbf44":"code","cdc8bd97":"markdown","ac47b72a":"markdown","c5056898":"markdown","6adfefe7":"markdown","2881d7f3":"markdown","1ba3743a":"markdown","331a7b37":"markdown","e749c3c9":"markdown","7f9c7c7c":"markdown"},"source":{"8ab22994":"import pandas as pd\nimport numpy as np\n \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n \nfrom sklearn.ensemble import ExtraTreesClassifier,RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\n \nfrom sklearn import metrics","f7ec86c7":"from google.colab import drive\n \ndrive.mount('\/content\/gdrive')","f96f6d93":"# data=pd.read_csv(\"\/content\/gdrive\/MyDrive\/Untitled form (File responses)\/train_s3TEQDk.csv\")\n# data.head()\n# train=pd.read_csv(\"\/content\/gdrive\/MyDrive\/Untitled form (File responses)\/train_s3TEQDk.csv\")\n\n# test =  pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv')\ndata = pd.read_csv( '..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv')","a6005ac4":"data.info()","3e8ca14d":"data.dtypes","a9a83cfb":"train['Credit_Product']=train['Credit_Product'].astype(str)\ntrain.info()","87364ddb":"# df=data.copy()\n# lab=LabelEncoder()\n# df[\"Gender\"]=lab.fit_transform(data[\"Gender\"])\n# df[\"Occupation\"]=lab.fit_transform(data[\"Occupation\"])\n# df[\"Credit_Product\"]=lab.fit_transform(data[\"Credit_Product\"])\n# df[\"Is_Active\"]=lab.fit_transform(data[\"Is_Active\"])\n# df[\"Channel_Code\"]=lab.fit_transform(data[\"Channel_Code\"])\n\n# df.head()","8365aeeb":"# label encoding the data\nfrom sklearn.preprocessing import LabelEncoder\n \nle = LabelEncoder()\n \ntrain['Gender']= le.fit_transform(train['Gender'])\ntrain['Occupation']= le.fit_transform(train['Occupation'])\ntrain['Credit_Product']= le.fit_transform(train['Credit_Product'])\ntrain['Vintage']= le.fit_transform(train['Vintage'])\ntrain['Region_Code']= le.fit_transform(train['Region_Code'])\ntrain['Channel_Code']= le.fit_transform(train['Channel_Code'])\ntrain['Age']= le.fit_transform(train['Age'])\ntrain['Is_Lead']= le.fit_transform(train['Is_Lead'])\ntrain['Is_Active']= le.fit_transform(train['Is_Active'])\ntrain['ID']= le.fit_transform(train['ID'])","6d4710c2":"target=train.iloc[:,10:]\ninput=train.iloc[:,0:10]\ntarget,input","8f114856":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import make_pipeline\nfrom pylab import rcParams\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix\nfrom sklearn.metrics import f1_score, roc_auc_score, roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","f3d277a3":"%matplotlib inline\nnp.random.seed(27)\nrcParams['figure.figsize'] = 10, 6\nwarnings.filterwarnings('ignore')\nsns.set(style=\"darkgrid\")","b5d15e1d":"def generate_model_report(y_actual, y_predicted):\n    print(\"Accuracy = \" , accuracy_score(y_actual, y_predicted))\n    print(\"Precision = \" ,precision_score(y_actual, y_predicted))\n    print(\"Recall = \" ,recall_score(y_actual, y_predicted))\n    print(\"F1 Score = \" ,f1_score(y_actual, y_predicted))\n    pass","ae680805":"def generate_auc_roc_curve(clf, X_test):\n    y_pred_proba = clf.predict_proba(X_test)[:, 1]\n    fpr, tpr, thresholds = roc_curve(Y_test,  y_pred_proba)\n    auc = roc_auc_score(Y_test, y_pred_proba)\n    plt.plot(fpr,tpr,label=\"AUC ROC Curve with Area Under the curve =\"+str(auc))\n    plt.legend(loc=4)\n    plt.show()\n    pass","1cf8fd5d":"target = 'Is_Lead'\ndf1=train.copy()\nX = df1.loc[:, df1.columns!=target]\nY = df1.loc[:, df1.columns==target]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, \n                                                    test_size=0.33, \n                                                    random_state=42)\nax = sns.countplot(x=df1.Is_Lead, data=df1)\nprint(df1[target].value_counts())","3854d166":"import xgboost as xg\nfrom xgboost import XGBClassifier\n \nclf2 = xg.XGBClassifier(class_weight='balanced').fit(X_train, Y_train)","734bea2f":"clf2 = xg.XGBClassifier(class_weight='balanced').fit(X_train, Y_train)","8a69d62f":"from sklearn.utils import class_weight\nclass_weight.compute_class_weight('balanced', np.unique(Y_train), Y_train[target])","b4a8e851":" \nY_Test_Pred = clf2.predict(X_test)","f5ac27cd":"generate_model_report(Y_test, Y_Test_Pred)","03db476d":"generate_auc_roc_curve(clf2, X_test)","af37747c":"from joblib import dump, load\ndump(clf2, 'extra1.joblib')","1ee5c7ca":"# test=pd.read_csv(\"\/content\/gdrive\/MyDrive\/Untitled form (File responses)\/test_mSzZ8RL.csv\")\ntest =  pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv')\n# train = pd.read_csv( '..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv')\n \ntest['Credit_Product']=test['Credit_Product'].astype(str)\ndf=test.copy()\nlab=LabelEncoder()\ndf[\"Gender\"]=lab.fit_transform(test[\"Gender\"])\ndf[\"Occupation\"]=lab.fit_transform(test[\"Occupation\"])\ndf[\"Credit_Product\"]=lab.fit_transform(test[\"Credit_Product\"])\ndf[\"Is_Active\"]=lab.fit_transform(test[\"Is_Active\"])\ndf[\"Channel_Code\"]=lab.fit_transform(test[\"Channel_Code\"])\ndf[\"ID\"]=lab.fit_transform(test[\"ID\"])\ndf[\"Age\"]=lab.fit_transform(test[\"Age\"])\ndf[\"Region_Code\"]=lab.fit_transform(test[\"Region_Code\"])\ndf[\"Vintage\"]=lab.fit_transform(test[\"Vintage\"])\ndf[\"Avg_Account_Balance\"]=lab.fit_transform(test[\"Avg_Account_Balance\"])\ndf.head()\n# target1=df.iloc[:,10:]\ninput1=df[0:]\ninput1","a3bef347":"pre=load(\"extra1.joblib\")\npredicted=pre.predict(input1)\nff=pd.DataFrame({\"ID\":input1[\"ID\"],\n                 \"Is_Lead\"\n                 :predicted})\nff.to_csv ('dataframe.csv', index = None, header=True) ","19d56b3c":"minority_class_len = len(train[train[target] == 1])\nprint(minority_class_len)\n\nmajority_class_indices = train[train[target] == 0].index\nprint(majority_class_indices)","0824c2cc":"\nrandom_majority_indices = np.random.choice(majority_class_indices,\n                                           minority_class_len, \n                                           replace=False)\nprint(len(random_majority_indices))\nminority_class_indices = train[train[target] == 1].index\nprint(minority_class_indices)","e00b3452":"under_sample_indices = np.concatenate([minority_class_indices,random_majority_indices])\nunder_sample = train.loc[under_sample_indices]\nsns.countplot(x=target, data=under_sample)","44efbb21":"from sklearn.naive_bayes import GaussianNB \n\nX = under_sample.loc[:, train.columns!=target]\nY = under_sample.loc[:, train.columns==target]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)\n","f933cfd1":"!pip install catboost\nfrom catboost import CatBoostClassifier","5a1656ae":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import ExtraTreeRegressor\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn import linear_model\nfrom catboost import CatBoostRegressor\nparams = {'n_estimators':10000, 'learning_rate': 0.1, 'eval_metric':'RMSE', 'loss_function':'RMSE', 'task_type':'GPU', 'devices':'0:1', 'random_state':42}\nmodel = CatBoostRegressor(**params)\nmodel.fit(X,Y,verbose=1000)\npredictions_catboost = model.predict(input1)","ffe0775c":"from joblib import dump, load\ndump(model, 'extra7.joblib') ","801b42b4":"test=pd.read_csv(\"\/content\/gdrive\/MyDrive\/Untitled form (File responses)\/test_mSzZ8RL.csv\")","7769fa34":"\n \ntest['Credit_Product']=test['Credit_Product'].astype(str)\ndf=test.copy()\nlab=LabelEncoder()\ndf[\"Gender\"]=lab.fit_transform(test[\"Gender\"])\ndf[\"Occupation\"]=lab.fit_transform(test[\"Occupation\"])\ndf[\"Credit_Product\"]=lab.fit_transform(test[\"Credit_Product\"])\ndf[\"Is_Active\"]=lab.fit_transform(test[\"Is_Active\"])\ndf[\"Channel_Code\"]=lab.fit_transform(test[\"Channel_Code\"])\ndf[\"ID\"]=lab.fit_transform(test[\"ID\"])\ndf[\"Age\"]=lab.fit_transform(test[\"Age\"])\ndf[\"Region_Code\"]=lab.fit_transform(test[\"Region_Code\"])\ndf[\"Vintage\"]=lab.fit_transform(test[\"Vintage\"])\ndf[\"Avg_Account_Balance\"]=lab.fit_transform(test[\"Avg_Account_Balance\"])\ndf.head()","57366c41":"# target1=df.iloc[:,10:]\ninput1=df.iloc[:,0:]\ninput1","0b6b8391":"pre=load(\"extra7.joblib\")\npredicted=pre.predict(input1)\nff=pd.DataFrame({\"ID\":test[\"ID\"],\n                 \"Is_Lead\"\n                 :predicted})\n\nff.to_csv(\"extra77.csv\")","e1a7169f":"X = under_sample.loc[:, train.columns!=target]\nY = under_sample.loc[:, train.columns==target]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)\nclf = ExtraTreesClassifier().fit(X_train, Y_train)\nY_Test_Pred = clf.predict(X_test)\n","d1d69411":"clf = ExtraTreesClassifier().fit(X_train, Y_train)\nY_Test_Pred = clf.predict(X_test)","15855c4e":"\ngenerate_model_report(Y_test, Y_Test_Pred)","567209bc":"generate_auc_roc_curve(clf, X_test)","64cb8169":"from joblib import dump, load\ndump(clf1, 'extra7.joblib') ","f50bbf44":"pre=load(\"extra7.joblib\")\npredicted=pre.predict(input1)\nff=pd.DataFrame({\"ID\":test[\"ID\"],\n                 \"Is_Lead\"\n                 :predicted})\n\nff.to_csv(\"extra77.csv\")","cdc8bd97":"## here labelencoder is used to transform non-numerical labels to numerical labels.","ac47b72a":"## ROC SCORE WAS 0.87","c5056898":"## checking its data types","6adfefe7":"## at first i used xgboost\n","2881d7f3":"## loading the data","1ba3743a":"## SECOND ATTEMPT\n","331a7b37":"##FINAL ATTEMPT I USED EXTRA TREE CLASSIFIER MODEL","e749c3c9":"## I GOT ROC SCORE 0.85","7f9c7c7c":"## THIS TIME I USED CATBOOST\n"}}