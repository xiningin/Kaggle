{"cell_type":{"665efb2c":"code","43f711ad":"code","cf4bcf2e":"code","ae1ac2ae":"code","95295e96":"code","a7ebfbac":"code","c2e982aa":"code","afdd5cb2":"code","3f0e9fc6":"code","63f1b94e":"code","2c947c8b":"code","245c06ad":"code","88c10001":"code","b9859818":"code","9e82bea2":"code","e5213e57":"code","7e6df650":"code","754a7902":"code","16d0a137":"code","7a7531d8":"code","540ea382":"code","b238c6d4":"code","11b8c03e":"code","d0658d9d":"code","b18febd3":"code","43f06112":"code","69e55e59":"code","cc660f62":"code","7a99f01c":"code","1a2a43c8":"code","51dda129":"code","9856c663":"code","5a1375e9":"code","a0fd904a":"code","ddfb2162":"code","6d276ba6":"code","26cfdf77":"code","d0a1f584":"code","5c5dabe7":"code","7bf141fa":"code","3b222240":"code","a07af7e4":"code","b267f373":"code","3b7d897b":"code","62b34684":"markdown","db3cc430":"markdown","1c5557de":"markdown","80904797":"markdown","19a078f8":"markdown","2c67a04d":"markdown"},"source":{"665efb2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43f711ad":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.linear_model import LinearRegression\n","cf4bcf2e":"df = pd.read_csv('..\/input\/absenteeism-dataset\/MFGEmployees4.csv')","ae1ac2ae":"df.head()","95295e96":"# View Stats on Continuous variables\ndf.describe()","a7ebfbac":"# % NULL by column\ndf.isna().sum()","c2e982aa":"# Create count dataframes for string\/categorical variables\nfor col in df.columns:\n    dfname = col+'_counts_df'\n    globals()[dfname]= pd.DataFrame(df.value_counts([col]))\n    \nlist(globals())","afdd5cb2":"Gender_counts_df, City_counts_df, DepartmentName_counts_df, BusinessUnit_counts_df","3f0e9fc6":"City_counts_df","63f1b94e":"Gender_counts_df.index.names[0]","2c947c8b":"list(Gender_counts_df.transpose().columns.get_level_values(0))","245c06ad":"# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')","88c10001":"# Show scatterplots on variable of interest (Absenteeism)\ndf.columns","b9859818":"_ = plt.scatter('LengthService','AbsentHours', data=df)\n_ = plt.xlabel('Length of Service')\n_ = plt.ylabel('Hours Absent')\n\nplt.show()","9e82bea2":"_ = plt.scatter('Age','AbsentHours', data=df)\n_ = plt.xlabel('Age')\n_ = plt.ylabel('Hours Absent')\n\nplt.show()","e5213e57":"print(max(df.Age), min(df.Age)) # Age of 3 - something is wrong here?!","7e6df650":"y_pos = list(Gender_counts_df.transpose().columns.get_level_values(0))\ncounts = list(Gender_counts_df[0])\n\n_ = plt.barh(y_pos, counts)\n_ = plt.xlabel('Gender Counts')\n_ = plt.ylabel('Gender')\nplt.show()","754a7902":"vizList = ['Gender_counts_df',\n          'JobTitle_counts_df',\n           'BusinessUnit_counts_df',\n           'City_counts_df',\n           'Division_counts_df',\n           'StoreLocation_counts_df'\n          ]\n\n\n\nfor i in vizList:\n    \n    df_ = globals()[i].sort_values([0],ascending = False).head(10)\n    ylab = df_.index.names[0]\n    \n    bars = list(df_.transpose().columns.get_level_values(0))\n    counts = list(df_[0])\n    \n    plt.figure(figsize=(10,10))\n    plotname = str([i])+\"_plot\"\n    globals()[plotname] = plt.barh(bars, counts)\n    globals()[plotname] = plt.xlabel('Counts')\n    globals()[plotname] = plt.ylabel(ylab)\n    plt.show()\n   \n","16d0a137":"plt.hist(df['Age']) # Looks normally distributed","7a7531d8":"#df['AbsentHours'].hist(color = 'blue')\ndf['AbsentHours'].apply(np.log1p).hist(color = 'orange')\nplt.show","540ea382":"# One hot encode\nfrom sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\n\nenc.fit(df)","b238c6d4":"df['AbsentHours']","11b8c03e":"# Run Linear Regression for Absenteeism based on Age","d0658d9d":"from sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score","b18febd3":"df = df.sample(frac = 0.75)","43f06112":"X = pd.DataFrame({'EmployeeNumber':df['EmployeeNumber'],'Age':df['Age'].round(2)})\n#X = np.append(X,np.zeros([len(X),0]),1)    #pd.Series([0 for x in range(len(X.index))], index=X.index)\n# X = X.reshape(X.shape[1:])\ny = df['AbsentHours']  #.apply(np.log1p).round(2)","69e55e59":"X","cc660f62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=123)\nX_train, y_train, X_test, y_test","7a99f01c":"regr = linear_model.LinearRegression()","1a2a43c8":"# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_test, y_pred))\n\n# Plot outputs\nplt.scatter(y_pred, y_test,  color='black', marker='.')\n#plt.plot(y_pred, y_test, color='blue', linewidth=3)\n\nplt.xticks(())\nplt.yticks(())\n\nplt.show()","51dda129":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(regr,X,y,cv=10)","9856c663":"scores.mean(), scores.std()","5a1375e9":"X_2 = pd.DataFrame({'EmployeeNumber':df['EmployeeNumber'],\n                  'Age':df['Age'].round(2), \n                  'LengthService':df['LengthService'],\n                  'Gender':df['Gender']})\n\ny_2 = df['AbsentHours']  #.apply(np.log1p).round(2)","a0fd904a":"# Transform Male\/Females to 1\/0's\nX_2['Gender'] = X_2['Gender'].replace({'M':1,'F':2})\nX_2['Gender']","ddfb2162":"X_train, X_test, y_train, y_test = train_test_split(X_2, y_2, test_size=0.30, random_state=123)\nX_train, y_train, X_test, y_test","6d276ba6":"regr = linear_model.LinearRegression()\n# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_test, y_pred))\n\n# Plot outputs\nplt.scatter(y_pred, y_test,  color='black', marker='.')\n#plt.plot(y_pred, y_test, color='blue', linewidth=3)\n\nplt.xticks(())\nplt.yticks(())\n\nplt.show()\n","26cfdf77":"scores_2 = cross_val_score(regr,X_2,y_2,cv=10)\nscores_2.mean(), scores_2.std()","d0a1f584":"from sklearn.ensemble import GradientBoostingRegressor\n\ngb_reg = GradientBoostingRegressor(random_state=0)\n\ngb_reg.fit(X_train,y_train)\n\ny_pred = gb_reg.predict(X_test)\n\n\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_pred, y_test))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_pred, y_test))\n\n\n\ngb_reg.score(X_test, y_test)","5c5dabe7":"scores_3 = cross_val_score(gb_reg,X_2,y_2,cv=10)\nscores_3.mean(), scores_3.std()","7bf141fa":"df = pd.read_csv('..\/input\/absenteeism-dataset\/MFGEmployees4.csv')","3b222240":"employeenums = X['EmployeeNumber']\nemployeenums.head()","a07af7e4":"df = df[~df.EmployeeNumber.isin(employeenums)]","b267f373":"df.shape","3b7d897b":"df.head()","62b34684":"## Repeating the same thing, but with more features","db3cc430":"Our model slightly improves (lower MSE and higher accuracy) by adding in Length of Service and Gender, but our standard deviation is also a little higher.\n\n\nLet's try the same idea, but with boosting.","1c5557de":"# Data Exploration","80904797":"### Cross Validation","19a078f8":"Again, our score improved. There is still more work to be done (One Hot Encoding BU's, Divisions, Departments) to try and improve the model, but using the GBR seems to be a strong fit! ","2c67a04d":"# Reading back in the dataset to for Validation Data"}}