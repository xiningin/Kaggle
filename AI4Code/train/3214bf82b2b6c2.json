{"cell_type":{"ad7578e0":"code","2e27daad":"code","11c1b9d9":"code","d6f3cd3e":"code","5d9ddbfd":"code","b40c989c":"code","3fecfeaf":"code","70c06fbd":"code","ca1053a3":"code","4809ed47":"code","c2ea0d41":"code","432e6cf7":"code","b40bd074":"code","959cd35b":"code","e0617c19":"code","a4c478d6":"code","e0d50f3f":"code","c1944e42":"code","98bb6267":"code","8e6867ac":"code","06bb87a0":"code","0cfc3831":"code","4376863f":"code","54b48572":"code","ac2a133e":"code","d923dcda":"code","61d4c680":"code","83eaad55":"code","24efc4ed":"code","f31b45f4":"code","0cc256ef":"code","7d9f71f5":"code","cf6d1f6f":"code","e76ffcea":"code","a162bb2d":"code","af03083f":"code","51b04b5e":"code","331caeb1":"code","c4bc9883":"code","1b1c5856":"code","a0c0e606":"code","eb2d105f":"code","7510b4cd":"code","34bfd892":"code","2f81fcb0":"code","ff0d8952":"code","458e0ce6":"code","23bddc72":"code","788ce756":"code","54df1716":"code","cfab0e28":"code","fa8bd270":"code","1268039f":"code","e0a817dd":"code","c20475bd":"code","606cf4f1":"code","5e9f218f":"code","e2f58a3c":"code","def4138c":"code","01888957":"code","31599e67":"code","026579ae":"code","c0c625dd":"markdown","8af8253c":"markdown","e5624313":"markdown","7470ef88":"markdown","6a48c2b2":"markdown","0403e4e9":"markdown","8589efae":"markdown","92d2f784":"markdown","97ef6414":"markdown","f495bec7":"markdown","33cefa4a":"markdown","25dfb436":"markdown","99a83735":"markdown","c5c240c9":"markdown","b418853b":"markdown","889ab412":"markdown","1d79ae3e":"markdown","1ca98ebd":"markdown","80eb16c9":"markdown","3fff30af":"markdown","5989c36b":"markdown","890d5624":"markdown","87bb28a5":"markdown","8a7b503c":"markdown","9a178817":"markdown","6168a4f8":"markdown","005636fd":"markdown","d2cff5c4":"markdown"},"source":{"ad7578e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#Common Model Algorithms\nfrom sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\n\n#Common Model Helpers\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn import model_selection\n\n#Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\n\n#Configure Visualization Defaults\n#%matplotlib inline = show plots in Jupyter Notebook browser\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set_style('white')\npylab.rcParams['figure.figsize'] = 12,8\n\nimport pandas as pd\nimport numpy as np\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2e27daad":"gps_log= pd.read_csv('..\/input\/ybs-21\/2017-09-01.csv',parse_dates=['Time'])","11c1b9d9":"gps_log.head()","d6f3cd3e":"#check out the null values in gps_log\ngps_log.isnull().sum()","5d9ddbfd":"#laoding the busstio list inot pandas dataframe\nbus_stops=pd.read_csv('..\/input\/ybs-21\/YBS21Bus_Stop_List.csv')","b40c989c":"bus_stops.info","3fecfeaf":"gps_log.columns","70c06fbd":"to_drop=['ID','Address','Alarm State', 'Device State',  'Fuel(%)', 'Fuel(L)', 'Main Battery(\u2103)', 'GPS Signal', 'GSM Signal']#","ca1053a3":"data_log=gps_log.drop(columns=to_drop,axis=1)","4809ed47":"data_log.shape","c2ea0d41":"data_log.head()","432e6cf7":"BusList=data_log['Asset Name'].unique()","b40bd074":"BusList","959cd35b":"df622=data_log[(data_log.Time.dt.hour>=6) & (data_log.Time.dt.hour<=22)]","e0617c19":"df622.shape","a4c478d6":"df622=df622.rename(index=str,columns={'Asset Name':'BusNo','Asset Status':'EngineStatus','Speed(km\/h)':'Speed','Mileage(km)':'Mileage','Direction(\u00b0)':'Direction','Longitude(\u00b0)':'Longitude','Latitude(\u00b0)':'Latitude'})","e0d50f3f":"df622.head()","c1944e42":"BusList=df622['BusNo'].unique()\nBusList","98bb6267":"df622.shape","8e6867ac":"df1=df622.loc[df622.BusNo==BusList[0]]","06bb87a0":"df1.shape","0cfc3831":"df2=df622.loc[df622.BusNo==BusList[1]]","4376863f":"df2.shape","54b48572":"df1.isnull().sum()","ac2a133e":"df1[['Time','EngineStatus','Direction','Speed']]","d923dcda":"#Encode EngienStatus using LabelEncoder\nlabel = LabelEncoder() \ndf1['EngineStatus_Code'] = label.fit_transform(df1['EngineStatus'])","61d4c680":"df1['EngineStatus_Code'].value_counts()","83eaad55":"df1.drop(df1[df1.EngineStatus_Code== 0].index,inplace=True)","24efc4ed":"df1.EngineStatus_Code","f31b45f4":"#time conversion for further processing\ndf1['Time']=pd.to_datetime(df1['Time'])","0cc256ef":"#Splitting Time column into days,week, month, year, hour, minute, second\ndf1['WeekDay'] = df1.Time.dt.weekday\ndf1['Month'] = df1.Time.dt.month\ndf1['Year'] = df1.Time.dt.year\ndf1['Hour'] = df1.Time.dt.hour\ndf1['Minute'] = df1.Time.dt.minute","7d9f71f5":"df1['WeekEND'] =( df1.WeekDay \/\/5==1).astype(float)","cf6d1f6f":"df1","e76ffcea":"#calc_distance is a function to calculate distance between adjicent coordinates \nfrom itertools import tee\nfrom haversine import haversine\n#create pairwise function to make a pair from two consetutive rows\ndef pairwise(iterable):\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndist=[0]\n\n# Loop through each row in the data frame using pairwise\n\nfor (i1, row1), (i2, row2) in pairwise(df1.iterrows()):\n      #Assign latitude and longitude as origin\/departure points\n    LatOrigin = row1['Latitude'] \n    LongOrigin = row1['Longitude']\n    origin = (LatOrigin,LongOrigin)\n\n      #Assign latitude and longitude from the next row as the destination point\n    LatDest = row2['Latitude']   # Save value as lat\n    LongDest = row2['Longitude'] # Save value as lat\n    destination = (LatDest,LongDest)\n    \n    result= haversine(origin, destination)\n\n    dist.append(result)","a162bb2d":"df1['Distance']=dist","af03083f":"df1.head()","51b04b5e":"plt.figure(figsize=[16,12])\n\n#Speed Box Plot to learn distribution of speed\nplt.subplot(131)\nplt.boxplot(x=df1['Speed'], showmeans = True, meanline = True)\nplt.title('Speed Boxplot')\nplt.ylabel('(km\/h)')\n\n#Disatance Box Plot to learn distribution\nplt.subplot(132)\nplt.boxplot(x=df1['Distance'], showmeans = True, meanline = True)\nplt.title('Distacne Boxplot')\nplt.ylabel('(km)')\n\n#Disatance Box Plot to learn distribution\nplt.subplot(133)\nplt.boxplot(x=df1['Direction'], showmeans = True, meanline = True)\nplt.title('Direction Boxplot')\nplt.ylabel('(measured from pure north)')\n","331caeb1":"#Speed(km\/h)vs Time(Hour) plot\nsns.set_color_codes()\naxis1 = sns.lineplot(x='Hour',y='Speed', data=df1)\naxis1.set_title('Speed vs Time')","c4bc9883":"#Speed vs Distance\nsns.set_color_codes()\naxis2 = sns.lineplot(x='Speed',y='Distance', data=df1)\naxis2.set_title('Speed vs Distance')\n","1b1c5856":"plt.figure(figsize = (20,5))\nsns.boxplot(df1.Speed)\nplt.show()\n","a0c0e606":"df1.loc[df1.Speed <= 2 ]","eb2d105f":"#Find out Speed Distribution\n\ndf1.Speed.groupby(pd.cut(df1.Speed, np.arange(0,100,10))).count().plot(kind = 'barh')\nplt.xlabel('Count')\nplt.ylabel('Speed (Km\/H)')\nplt.show()\n\n","7510b4cd":"#correlation heatmap of dataset\ndef correlation_heatmap(df1):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    _ = sns.heatmap(\n        df1.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    plt.title('ybs-21 Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(df1)","34bfd892":"df1['Speed'].mean()\n","2f81fcb0":"def cal_traffic(row):\n    if row.Speed<=10:\n        return 'Heavy'\n    elif row.Speed>10 and row.Speed<20:\n        return 'Modreate'\n    elif row.Speed>=20 and row.Speed<35:\n        return 'Normal'\n    else:\n        return 'Free'\ndf1['Traffic'] = df1.apply(cal_traffic, axis=1)","ff0d8952":"df1.loc[df1.Speed >= 30]","458e0ce6":"df1['Traffic_Code']=label.fit_transform(df1['Traffic'])","23bddc72":"tc=df1['Traffic_Code'].unique()","788ce756":"print(tc)","54df1716":"correlation_heatmap(df1)","cfab0e28":"df1","fa8bd270":"drop={'EngineStatus','Traffic','BusNo', 'Time','WeekDay'}\ndf1=df1.drop(columns=drop,axis=1)","1268039f":"df1[df1[\"EngineStatus_Code\"]==1]","e0a817dd":"import xgboost as xgb\nX= df1[['Mileage','Direction','Distance','WeekEND']]\ny=df1['Speed']\n","c20475bd":"def train_test_model (df1):\n    #X,y = df1.loc[:,df1.columns != 'Speed'], df1.loc[:,'Speed']\n    #Use Train Test Split First\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)\n    # fit model no training data\n    #XBG_Hyper_params = objective='reg:linear',colsample_bytree=0.3,learning_rate=0.1,max_depth=5,alpha=10,n_estimators=10\n    model = XGBRegressor(objective='reg:linear',learning_rate=0.1,max_depth=5,alpha=10,n_estimators=10)\n    model.fit(X_train, y_train)\n    # make predictions for test data\n    y_pred = model.predict(data=X_test)\n    predictions = [round(value) for value in y_pred]\n    # evaluate predictions\n    accuracy = metrics.accuracy_score(y_test, predictions)\n    print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n    print(\"Standard Deviation:%.2f\" % (y_pred.std()*100))","606cf4f1":"train_test_model(df1)","5e9f218f":"#X,y = df1.loc[:,df1.columns != 'Traffic_Code'], df1.loc[:,'Traffic_Code']","e2f58a3c":"def KFold_model(df1):\n    #X,y = df1.loc[:,df1.columns != 'Traffic_Code'], df1.loc[:,'Traffic_Code']\n    model = xgb.XGBRegressor()\n    kfold = model_selection.KFold(n_splits=10, random_state=7)\n    results = model_selection.cross_val_score(model, X, y, cv=kfold)\n    print(\"Accuracy: %.2f \" % (results.mean()*100))\n    print(\"Standard Deviation:%.2f\" % (results.std()*100))\n    print(results)","def4138c":"KFold_model(df1)","01888957":"df_1=df1[:2000]\ndf_2=df1[2000:]","31599e67":"KFold_model(df_1)","026579ae":"train_test_model(df_1)","c0c625dd":"**GENERATE TRAFFIC COLUMN BY SPEED**","8af8253c":"**Convert Time Column into pd.datetime**","e5624313":"**Pie Plot by Engine_Status**","7470ef88":"**Load RAW csv file into pandas**","6a48c2b2":"**Observation**\n* Trips over 35 km\/h are being considered as outliers but we cannot ignore them because the road speed limit in Yangon City is 50km\/h\n*  Mostly trips are done at a speed range of 10-15 km\/h with an average speed of around 3 km\/h.\n","0403e4e9":"**Correlation Matrix for Data Set**\n","8589efae":"Label Encoder for Traffic Jam Level","92d2f784":"### Renaming Colums for better understanding","97ef6414":"### Select Different Buses\n","f495bec7":"### df1 for First Bus","33cefa4a":"for s in Speed:\n    if s<=10:\n        df1['Traffic'] = 'Heavy'\n    elif s>10 & s<20:\n        df1['Traffic'] = 'Modreate'\n    elif s>=20 & s<35:\n        df1['Traffic'] = 'Normal'\n    else:\n        df1['Traffic'] = 'Free'\n        ","25dfb436":"plt.figure(figsize=(16,8))\n# plot chart\nax1 = plt.subplot(121,aspect = 'equal')\ndf1.plot(kind='pie', y = 'EngineStatus_Code',ax=ax1 , autopct='%1.1f%%', \n startangle=90, shadow=False, labels=df1['EngineStatus_Code'], legend = False, fontsize=14)\n\nax2 = plt.subplot(122)\nplt.axis('off')\n\nplt.show()\n\n","99a83735":"# Drop Categorical Data Column","c5c240c9":"# WHY 100 % Accuracy with zero variance(std)","b418853b":"# **Data Model**\n* First with Train Test Split\n* Second with KFold CV\n","889ab412":"### df2 for Second Bus\n* The df2 is empty data set since the busNo2 was not running between 6 to 22","1d79ae3e":"**Calculate distance between tow adjacent GPS points using Haversine function and store in 'Distance' column**\n* use iter tools to pair through columns\n* haversine function returms Distance in (km)","1ca98ebd":"**Generating Traffic Colummn from Speed column**","80eb16c9":"### Drop Unwanted Features\n* ID','Address','Alarm State', 'Device State',  'Fuel(%)', 'Fuel(L)', 'Main Battery(\u2103)', 'GPS Signal', 'GSM Signal","3fff30af":"**Prepare and clean data for busNo1**\n* Explore data point with EngineStatus\n* Find the directoin that the bus was headed\n* Examine Speed value to generate Traffic Jam level","5989c36b":"**WEEK END\/ Week day splitter**","890d5624":"**2 KFold Cross Vcalidation**","87bb28a5":"# **The important Feature :::: The Speed ::::**","8a7b503c":"**1 Train Test Split**","9a178817":"### Filter Time from 06;00 to 22;59 \n* YBS usually starts theit service from 6:00 a.m. and ends around 10:00 P.M.","6168a4f8":"# ****Plotting  df1 colums with plots for exploration and data cleaning****","005636fd":"Now Splitting Data Frame into 2 different things","d2cff5c4":"### Separeate df622 with Assest (Bus No)"}}