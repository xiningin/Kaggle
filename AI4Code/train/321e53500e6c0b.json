{"cell_type":{"298948d0":"code","f72fbbe5":"code","5f481022":"code","b2a13a76":"code","3340f11f":"code","b6b7da71":"code","b652624d":"code","a5931c31":"code","dcd1e0b7":"code","8bc37fd7":"code","d1f46d34":"code","d10f3405":"code","93237b41":"code","35f9692a":"code","2b1974d2":"code","69d6a541":"code","cbd5cf4e":"code","b5ecaa4f":"code","506ee8fe":"code","a1860314":"code","1220b49e":"code","58eedb6e":"code","de74fe92":"code","32f5ac59":"code","f84e4d9a":"code","ff92f5b3":"code","a7b83b96":"code","cdffbd11":"code","ba8bfab9":"code","e142d6f9":"code","821ffaa4":"code","a9af444e":"code","7e7744a1":"code","294e220b":"code","d3e29b12":"code","339b6608":"code","d230ea24":"code","2998b8d5":"code","4d58466d":"code","b886f04e":"code","c6df13fd":"code","079c4aca":"code","6607a03d":"code","e886ce8c":"code","e103de93":"code","2a0f1c3e":"code","2c0f5623":"code","c14f0058":"code","dc6a48d7":"code","70a7fd43":"code","1798115d":"code","2826cd29":"code","b022bd85":"code","95e5078a":"code","ae7e4bf6":"code","439f877e":"code","758f276e":"code","da3c7490":"code","53855bed":"code","b08e9d59":"code","50025289":"code","9f219840":"code","50d8b6e5":"code","6f90a35a":"code","8c5bf41c":"code","b5c5fc4a":"code","905087f3":"code","cb6bc5f7":"code","3cff2c57":"code","6b89761a":"code","8d63e429":"code","efce2c7f":"code","b392fb85":"code","a20245b9":"markdown","538dd952":"markdown","06982b49":"markdown","afe2b41a":"markdown","423062e4":"markdown","5014efce":"markdown","449646c8":"markdown","9eb7d0e6":"markdown","b8acb441":"markdown","d2427212":"markdown","78583a11":"markdown","81cf99bb":"markdown"},"source":{"298948d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f72fbbe5":"suicide_data = pd.read_csv(\"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")","5f481022":"suicide_data.head()","b2a13a76":"suicide_data.tail()","3340f11f":"suicide_data.info()","b6b7da71":"suicide_data.columns","b652624d":"suicide_data.isnull().any()","a5931c31":"suicide_data.describe().T","dcd1e0b7":"suicide_data[\"country\"].unique()","8bc37fd7":"# Sum suicides by countrys\ndata_country = suicide_data.groupby([\"country\"]).sum()[\"suicides_no\"].reset_index().sort_values('suicides_no',ascending=False) \n\n# Visualization with Bar Plot\nplt.figure(figsize=(15,10))\nsns.barplot(x=data_country['country'], y=data_country['suicides_no'],palette = sns.color_palette(\"Paired\"))\nplt.xticks(rotation= 90)\nplt.xlabel('Country')\nplt.ylabel('Suicide')\nplt.title('Suicide Rate Given Country')","d1f46d34":"# Sum suicides by years\ndata_year = suicide_data.groupby([\"year\"]).sum()[\"suicides_no\"].reset_index().sort_values(\"suicides_no\",ascending=False)\n\nplt.figure(figsize=(16,10))\nax= sns.barplot(x=data_year[\"year\"], y=data_year[\"suicides_no\"])\nplt.xlabel('Year')\nplt.ylabel('Suicides')\nplt.title('Suicide Rate Given Year')","d10f3405":"# Visualization with Joint Plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\ng = sns.jointplot(data_year.year,data_year.suicides_no, kind=\"kde\", color=\"#bfa9e0\" ,size=7)\nplt.savefig('graph.png')","93237b41":"g = sns.jointplot(\"year\", \"suicides_no\", data=data_year,size=6, ratio=3, color=\"#e8fb41\")","35f9692a":"# Finding the year with the highest suicide\ndf = data_year.reset_index()\ndf = df.drop([\"index\"], axis=1)\nmax_suicide_year = df[\"year\"][0]\nmax_suicide_year ","2b1974d2":"suicide_data[\"age\"].unique()","69d6a541":"# Sum suicides by age and sex in 1999\ndata = suicide_data[(suicide_data['year']== max_suicide_year)]\ndata_as_99 = data.groupby([\"age\",\"sex\"]).sum()[\"suicides_no\"].reset_index()\ndata_as_99","cbd5cf4e":"plt.figure(figsize=(10,8))\nsns.barplot(x=data_as_99[\"sex\"], y=data_as_99[\"suicides_no\"],hue=data_as_99[\"age\"], palette=sns.color_palette(\"Set2\"))\nplt.xlabel('Sex')\nplt.ylabel('Suicides')\nplt.title('Suicide Rate Sex and Age')\nplt.show()","b5ecaa4f":"# Sum suicides by age and sex in all years\ndata_as = suicide_data.groupby([\"age\",\"sex\"]).sum()[\"suicides_no\"].reset_index()\ndata_as","506ee8fe":"female = data_as[data_as[\"sex\"]==\"female\"]\nfemale","a1860314":"male = data_as[data_as[\"sex\"]==\"male\"]\nmale","1220b49e":"plot_id = 0\nfor i,age in enumerate(['5-14 years','15-24 years','25-34 years','35-54 years','55-74 years','75+ years']):\n    plot_id += 1\n    plt.subplot(3,2,plot_id)\n    plt.title(age)\n    fig, ax = plt.gcf(), plt.gca()\n    sns.barplot(x=['female','male'],y=[int(female[female[\"age\"]== age][\"suicides_no\"]),int(male[male[\"age\"]== age][\"suicides_no\"])],color='#bffe55')\n    plt.tight_layout()\n    fig.set_size_inches(10, 10)\nplt.show()  ","58eedb6e":"# Sum suicide by country and sex \ndata_cs = suicide_data.groupby([\"country\",\"sex\"]).sum()[\"suicides_no\"].reset_index()\ndata_cs_Turkey = data_cs[data_cs['country']=='Turkey']\ndata_cs_Turkey","de74fe92":"labels = data_cs_Turkey.sex.value_counts().index\ncolors = ['#f9f7f0','#d0041b']\nexplode = [0,0]\nsizes = data_cs_Turkey.suicides_no.value_counts().index.sort_values()\n\n# Visualization with Pie Plot\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Suicide Rates in Turkey',fontsize = 15)\nplt.show()","32f5ac59":"data_generation = suicide_data[\"generation\"].value_counts()\ndata_generation","f84e4d9a":"labels = data_generation.index\nexplode = [0.05,0.05,0.05,0.05,0.05,0.05]\nsizes = data_generation.values\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%')\nplt.title('Generations',fontsize = 15)\nplt.show()","ff92f5b3":"data_year.head()","a7b83b96":"# Visualization with Kde Plot\nsns.kdeplot(data_year.year, data_year.suicides_no, shade=True, cut=3)\nplt.show()","cdffbd11":"suicide_data.head()","ba8bfab9":"# Visualization with Violin Plot\nplt.figure(figsize=(10,8))\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(x=\"sex\", y=\"suicides_no\",data=suicide_data, palette=pal, inner=\"points\")\nplt.show()","e142d6f9":"suicide_data.corr()","821ffaa4":"# Heatmap\nf,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(suicide_data.corr(), cmap=\"Blues\",annot=True, linewidths=0.5,linecolor=\"#7fb0f0\", fmt= '.1f',ax=ax)\nplt.show()","a9af444e":"sns.heatmap(suicide_data.corr(), cmap=\"Pastel2\", vmax=0.5, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .8})\nplt.show()","7e7744a1":"# Visualization with Lm Plot\nsns.lmplot(x=\"HDI for year\", y=\"gdp_per_capita ($)\", data=suicide_data)\nplt.show()","294e220b":"# Visualization with Box Plot\nsns.boxplot(suicide_data['gdp_per_capita ($)'])\nplt.show()","d3e29b12":"sns.boxplot(suicide_data['year'])\nplt.show()","339b6608":"suicide_data.boxplot(figsize=(10,8),column='suicides_no',by ='sex')\nplt.show()","d230ea24":"# Sum suicide by country, sex and age \ndata_csa = suicide_data.groupby([\"country\",\"sex\",\"age\"]).sum()[\"suicides_no\"].reset_index().sort_values(\"suicides_no\")\ndata_csa = data_csa[:605] # first 605 data","2998b8d5":"# Visualization with Swarm Plot\nplt.figure(figsize=(10,8))\nsns.swarmplot(x=\"sex\", y=\"suicides_no\",hue=\"age\", data=data_csa)\nplt.show()","4d58466d":"suicide_data.head()","b886f04e":"# Visualization with Pair Plot\nsns.pairplot(suicide_data)\nplt.show()","c6df13fd":"sns.pairplot(suicide_data, hue=\"generation\")\nplt.show()","079c4aca":"suicide_data.sex.value_counts()","6607a03d":"# Visualization with Count Plot\nsns.countplot(suicide_data.sex, palette=\"PRGn\")\nplt.title(\"Sex\",fontsize=15)\nplt.show()","e886ce8c":"sns.countplot(suicide_data.generation, palette=sns.cubehelix_palette())\nplt.xticks(rotation=45)\nplt.title(\"Generation\",fontsize=15)\nplt.show()","e103de93":"data_Turkey = suicide_data[suicide_data['country']=='Turkey']","2a0f1c3e":"# \nsns.countplot(data_Turkey.year, palette=sns.cubehelix_palette(start=.5, rot=-.5))\nplt.title(\"Year Data Turkey \",fontsize=15)\nplt.show()","2c0f5623":"suicide_data[\"country\"].value_counts()","c14f0058":"plt.figure(figsize=(16,10))\nsns.countplot(suicide_data.country, palette = sns.color_palette(\"tab10\"))\nplt.xticks(rotation=90)\nplt.title('Country Counter')\nplt.show()","dc6a48d7":"plt.figure(figsize=(8,5))\nsns.countplot(suicide_data.generation,hue=suicide_data.sex, palette=sns.color_palette(\"RdGy\"))\nplt.title('Generation hue Sex Counter')\nplt.show()","70a7fd43":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot","1798115d":"suicide_data.head()","2826cd29":"min_year = min(suicide_data[\"year\"])\nmin_year","b022bd85":"# Avarage values by 1985\ndf = suicide_data[suicide_data[\"year\"]==min_year].groupby(\"country\").mean().sort_values(\"suicides_no\", ascending=False).reset_index()","95e5078a":"# Visualization with Line Chart\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.index,\n                    y = df[\"gdp_per_capita ($)\"],\n                    mode = \"lines\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.country)\n\ndata = [trace1]\nlayout = dict(title = 'GDP per capita in 1985',\n              xaxis= dict(title= 'Country Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","ae7e4bf6":"# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.index,\n                    y = df[\"suicides\/100k pop\"],\n                    mode = \"lines+markers\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.country)\ndata = [trace2]\nlayout = dict(title = 'Suicides\/100k pop in 1985',\n              xaxis= dict(title= 'Country Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","439f877e":"# Avarage suicide by country and age \ndata_ca = suicide_data.groupby([\"country\",\"age\"]).mean()[\"suicides_no\"].reset_index()\ndata_ca","758f276e":"# prepare data frames\ndf_age_5_14 = data_ca[data_ca.age == \"5-14 years\"].iloc[:100,:]\ndf_age_15_24 = data_ca[data_ca.age == \"15-24 years\"].iloc[:100,:]\ndf_age_25_34 = data_ca[data_ca.age == \"25-34 years\"].iloc[:100,:]\ndf_age_35_54 = data_ca[data_ca.age == \"35-54 years\"].iloc[:100,:]\ndf_age_55_74 = data_ca[data_ca.age == \"55-74 years\"].iloc[:100,:]\ndf_age_75 = data_ca[data_ca.age == \"75+ years\"].iloc[:100,:] \n\n# Visualization with Scatter Chart\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df_age_5_14.index,\n                    y = df_age_5_14.suicides_no,\n                    mode = \"markers\",\n                    name = \"5-14 years\",\n                    marker = dict(color = 'rgb(188, 0, 6, 0.8)'),\n                    text= df_age_5_14.country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df_age_15_24.index,\n                    y = df_age_15_24.suicides_no,\n                    mode = \"markers\",\n                    name = \"15-24 years\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df_age_15_24.country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df_age_25_34.index,\n                    y = df_age_25_34.suicides_no,\n                    mode = \"markers\",\n                    name = \"25-34 years\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df_age_15_24.country)\n# creating trace4\ntrace4 =go.Scatter(\n                    x = df_age_35_54.index,\n                    y = df_age_35_54.suicides_no,\n                    mode = \"markers\",\n                    name = \"35-54 years\",\n                    marker = dict(color = 'rgb(166, 255, 6, 0.8)'),\n                    text= df_age_15_24.country)\n# creating trace5\ntrace5 =go.Scatter(\n                    x = df_age_55_74.index,\n                    y = df_age_55_74.suicides_no,\n                    mode = \"markers\",\n                    name = \"55-74 years\",\n                    marker = dict(color = 'rgb(249, 255, 6, 0.8)'),\n                    text= df_age_15_24.country)\n# creating trace6\ntrace6 =go.Scatter(\n                    x = df_age_75.index,\n                    y = df_age_75.suicides_no,\n                    mode = \"markers\",\n                    name = \"75+ years\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df_age_15_24.country)\ndata = [trace1, trace2,trace3,trace4,trace5,trace6]\nlayout = dict(title = 'Suicide Rate vs Countries by Age',\n              xaxis= dict(title= 'Countries ',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Suicide Rate',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","da3c7490":"data_cs.loc[180:195]","53855bed":"# Visualization with Bar Chart\n\n# data preparation\ndf = data_cs.loc[184:189,:]\n\n# create trace1 \ntrace1 = go.Bar(\n                x = df.country,\n                y = df[\"suicides_no\"],\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df.sex)\ndata = [trace1]\nlayout = go.Layout(barmode = \"stack\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b08e9d59":"df = suicide_data[\"generation\"].value_counts()\ndf","50025289":"trace1 = {\n  'x': df.index,\n  'y': df.values,\n  'type': 'bar'\n};\ndata = [trace1];\nlayout = {\n  'xaxis': {'title': 'Generation'},\n  'barmode': 'stack',\n  'title': 'Generation Value Counts'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9f219840":"df = suicide_data[suicide_data[\"year\"]==2016].groupby(\"country\").mean().sort_values(\"suicides_no\", ascending=False).reset_index()","50d8b6e5":"# Visualization with Pie Chart\n\n# data preparation\ndf_2016 = df.iloc[:9,:]\npie1 = df_2016.suicides_no\nlabels = df_2016.country\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .4]},\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Suicide Rates of Countries\",\n                \"x\": 0.06,\n                \"y\": 1.15\n            },\n        ]\n    }\n}\niplot(fig)","6f90a35a":"df_2015 = suicide_data[suicide_data[\"year\"]==2015].groupby(\"country\").mean().sort_values(\"suicides_no\", ascending=False).reset_index()\ndf_2015","8c5bf41c":"# Visualization with Bubble Chart\n\n# prepare data frames\ndf_2015 = df_2015.iloc[:20,:]\ndata = [\n    {\n        'y': df_2015.population,\n        'x': df_2015.country.index,\n        'mode': 'markers',\n        'marker': {\n            'color': df_2015[\"suicides_no\"],\n            'size': df[\"suicides\/100k pop\"],\n            'showscale': True\n        },\n        \"text\" :  df_2015.country    \n    }\n]\niplot(data) ","b5c5fc4a":"df = suicide_data.groupby([\"country\",\"year\"]).mean().sort_values(\"suicides_no\", ascending=False).reset_index()","905087f3":"# Visualization with Histogram \n\n# data preparation\ndata_2002 = df[\"suicides\/100k pop\"][df.year==2002][:70]\ndata_2013 = df[\"suicides\/100k pop\"][df.year==2013][:70]\n\ntrace1 = go.Histogram(\n    x=data_2002,\n    opacity=0.75,\n    name = \"2002\",\n    marker=dict(color='rgb(28, 18, 66, 0.3)'))\ntrace2 = go.Histogram(\n    x=data_2013,\n    opacity=0.75,\n    name = \"2013\",\n    marker=dict(color='rgb(218, 3, 0, 0.3)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Suicides ratio in 2002 and 2013',\n                   xaxis=dict(title='Suicides Ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cb6bc5f7":"# Visualization with Word Cloud\n\n# data prepararion\ndata_2016 = df.country[df.year == 2016]\n\n#import WordCloud\nfrom wordcloud import WordCloud \nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data_2016))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('Word_Cloud_Graph.png')\n\nplt.show()","3cff2c57":"# Visualization with Box Plot\n\n# data preparation\ndata_1999 = df[df.year == 1999]\n\ntrace1 = go.Box(\n    y=data_1999[\"gdp_per_capita ($)\"],\n    name = 'GDP per capita in 1999',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1]\niplot(data)","6b89761a":"# Visualization with Scatter Matrix Plot\n\n# import figure factory\nimport plotly.figure_factory as ff\n\n# data preparation\ndataframe = df[df.year == 1998]\ndata_1998 = dataframe.loc[:,[\"suicides_no\",\"population\", \"gdp_per_capita ($)\"]]\ndata_1998[\"index\"] = np.arange(1,len(data_1998)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_1998, diag='box', index='index',colormap='Viridis',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","8d63e429":"# Visualization with Inset Plot\n\n# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe[\"gdp_per_capita ($)\"],\n    name = \"GDP per capita\",\n    marker = dict(color = 'rgb(9, 3, 130, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe[\"suicides\/100k pop\"],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Suicides Ratio\",\n    marker = dict(color = 'rgb(167, 61, 130,0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'GDP per capita and Suicides ratio in 1998'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","efce2c7f":"# Visualization 3D Scatter Plot with Colorscaling\n\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.index,\n    y=dataframe.suicides_no,\n    z=dataframe[\"gdp_per_capita ($)\"],\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',        \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b392fb85":"# Visualization with Multiple Subplots\n\ntrace1 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe.suicides_no,\n    name = \"Suicides\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe.population,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Population\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe[\"gdp_per_capita ($)\"],\n    xaxis='x3',\n    yaxis='y3',\n    name = \"GDP per capita\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.index,\n    y=dataframe[\"suicides\/100k pop\"],\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Suicides Ratio\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Suicides, population, GDP per capita and suicides Ratio in 1998'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a20245b9":"* As a result, we can see that the suicide rate of males  in 1999 was significantly higher than that of females, and this rate was mostly between the ages of 35 and 54.","538dd952":"<a id='2'><\/a><br>\n# Plotly Tutorial","06982b49":"* max suicides value in 1999","afe2b41a":"* The suicides\/100k pop value of the countries with the highest suicide rate in 1985.","423062e4":"## \ud83d\udccc Content  \n\n  \n### [\ud83d\udccd Seaborn Tutorial](#1)\n### [\ud83d\udccd Plotly Tutorial](#2)","5014efce":"* The GDP per capita value of the countries with the highest suicide rate in 1985.","449646c8":"<a id='1'><\/a><br>\n# Seaborn Tutorial","9eb7d0e6":"* As a result, Japan, the Russian Federation, and the United States have greater differences in suicide rates by age compared to other countries.\n* The highest suicide rate in most countries is between the ages of 35-54.","b8acb441":"* As a result, we can see the number of suicides for each of the 3 countries and the distribution of the number between male and female.","d2427212":"* Looking at all years, we see that the suicide rate of males is higher than females at all ages.","78583a11":"* As a result, we can see an even distribution of data covering the years 2009-2015, according to data from Turkey.","81cf99bb":"* As a result, we can see the relationship between population and suicide."}}