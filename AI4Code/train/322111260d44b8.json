{"cell_type":{"cfebecae":"code","25a1b5f3":"code","d8139a79":"code","70503887":"code","eb83ff4b":"code","9c172f6a":"code","b077f647":"markdown"},"source":{"cfebecae":"import torch as t\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport datatable as dtable\nimport fastai\n\nfrom fastai.tabular.all import *\nfrom fastai.layers import SequentialEx, MergeLayer\nfrom fastai.data.core import DataLoader\nfrom fastai.data.core import DataLoaders\nfrom numba import njit\nfrom tqdm import tqdm\nfrom sklearn.model_selection import cross_val_score\nfrom time import time\n\ndf = dtable.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv').to_pandas()\ndf = df.query('date > 85').reset_index(drop = True) \ndf = df[df.weight > 0]\ndf.reset_index(inplace=True, drop=True)\ndf = df.astype({c: np.float32 for c in df.select_dtypes(include='float64').columns})\ndf_labels = df[['date', 'weight', 'resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']]\nfeatures = [c for c in df.columns if 'feature' in c]\ndf = df.drop(df_labels.columns, axis=1)\ndf.fillna(df.mean(), inplace=True)\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']\nX = df[features]\ny = np.stack([(df_labels[c] > 0).astype('int') for c in resp_cols]).T\nf_mean = np.mean(df[features[1:]].values, axis=0)\ndevice = 'cuda' if t.cuda.is_available() else 'cpu'","25a1b5f3":"class Model(nn.Module):\n    def __init__(self, input_size):\n        super(Model, self).__init__()\n        \n        self.batch_norm0 = nn.BatchNorm1d(input_size)\n        self.layer1 = LinBnDrop(input_size, 256, bn=True, p=0, act=Mish(), lin_first=False)\n        a = LinBnDrop(256, 256, bn=True, p=.12, act=Mish(), lin_first=False)\n        b = LinBnDrop(256, 256, bn=True, p=.12, act=Mish(), lin_first=False)\n        self.res1 = SequentialEx(a, b, MergeLayer())\n        \n        \n        self.layer2 = LinBnDrop(256, 512, bn=True, p=0.12, act=Mish(), lin_first=False)\n        a = LinBnDrop(512, 512, bn=True, p=.12, act=Mish(), lin_first=False)\n        b = LinBnDrop(512, 512, bn=True, p=.12, act=Mish(), lin_first=False)\n        self.res2 = SequentialEx(a, b, MergeLayer())\n        \n        self.layer3 = LinBnDrop(512, 640, bn=True, p=0.12, act=Mish(), lin_first=False)\n        a = LinBnDrop(640, 640, bn=True, p=.12, act=Mish(), lin_first=False)\n        b = LinBnDrop(640, 640, bn=True, p=.12, act=Mish(), lin_first=False)\n        self.res3 = SequentialEx(a, b, MergeLayer())\n        \n        \n        self.layer4 = LinBnDrop(640, 256, bn=True, p=0.12, act=Mish(), lin_first=False)\n        a = LinBnDrop(256, 256, bn=True, p=.12, act=Mish(), lin_first=False)\n        b = LinBnDrop(256, 256, bn=True, p=.12, act=Mish(), lin_first=False)\n        self.res4 = SequentialEx(a, b, MergeLayer())\n        \n        self.layer5 = LinBnDrop(256, 128, bn=True, p=0.12, act=Mish(), lin_first=False)\n        a = LinBnDrop(128, 128, bn=True, p=.12, act=Mish(), lin_first=False)\n        b = LinBnDrop(128, 128, bn=True, p=.12, act=Mish(), lin_first=False)\n        self.res5 = SequentialEx(a, b, MergeLayer())\n        \n        self.layer6 = nn.Linear(128, 5)\n\n    def forward(self, x):\n        x = self.batch_norm0(x)\n        x = self.layer1(x)\n        x = self.res1(x)\n        x = self.layer2(x)\n        x = self.res2(x)\n        x = self.layer3(x)\n        x = self.res3(x)\n        x = self.layer4(x)\n        x = self.res4(x)\n        x = self.layer5(x)\n        x = self.res5(x)\n        x = self.layer6(x)\n        return x\n","d8139a79":"@njit\ndef fillna_npwhere_njit(array, values):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), values, array)\n    return array\n\ndef for_loop(method, matrix, values):\n    for i in range(matrix.shape[0]):\n        matrix[i] = method(matrix[i], values)\n    return matrix","70503887":"model_nn = Model(len(features))\nmodel_nn = model_nn.to(device)\nlearn = Learner(None, model_nn, loss_func=1)\nlearn.load('\/kaggle\/input\/roclossjs5\/deep_resnet_model')","eb83ff4b":"%%time\n%%capture\nimport janestreet\nenv = janestreet.make_env()\n\nlearn.model.eval()\npreds = []\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:   \n        x_tt = test_df.loc[:, features].values\n        x_tt[:, 1:] = for_loop(fillna_npwhere_njit, x_tt[:, 1:], f_mean)\n        pred = 0.\n        pred = learn.model(t.from_numpy(x_tt).to(device, t.float)).sigmoid()[0][-1].item()\n        preds.append(pred)\n        action = 1 if pred >= .5 else 0\n        pred_df.action = action\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","9c172f6a":"preds = np.array(preds)\npreds.mean(), preds.std(), sum(preds >= .5), sum(preds < 5)","b077f647":"This notebook is a fork of https:\/\/www.kaggle.com\/ahmedelhaddad\/fastai-submission-custom-ds \n\nMany thanks to Dr. Ahmed Sami for sharing his model and training flow! The only thing I changed was the output\nto a tensor of 5 items, to do BCEWithLogitsLoss https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.BCEWithLogitsLoss.html \nas well as using a RESNET!\n\nThis helped improve the model in all scenarios, and I will explain my reasoning for this and trials in the discussion forum soon!\n\nI am going to fork into many different models I've tried(here are the links and scores)\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/mlp-batchnorm-dropout-linear-pytorch\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/mlp-batchnorm-dropout-linear-pytorch-no-pre-bnorm\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/densenet-batchnorm-dropout-linear-pytorch-jstreet\n\nhttps:\/\/www.kaggle.com\/pyoungkangkim\/1dcnn-pytorch-jstreet\n\n\nThe particulary interesting ones to come(I speculate sometime mid Feburary) will be ensemble of \nthese models and xgboost, check later on my profile if you're interested for this and trials\/findings! \n"}}