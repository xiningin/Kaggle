{"cell_type":{"c699f1ad":"code","5e2840c4":"code","294acfa7":"code","99c79468":"code","d7415402":"code","08d8a47a":"code","a4c4cfea":"code","3fd56dad":"code","029c8bab":"code","a36057b7":"code","9ad2dd35":"code","3a4c53c7":"code","7b73efec":"code","461a20e3":"code","7e42353e":"code","f874cfed":"code","ffe4bddf":"code","3a3d2b01":"code","762d3ba7":"code","bd6c3f83":"code","cdef8f9d":"code","129b694f":"code","387afa3a":"code","367f770e":"code","6dbe2383":"code","df419c21":"code","3f543c89":"code","bf2f2b39":"code","795703cb":"code","dce231d6":"code","b155d5fc":"markdown","ae5bfc14":"markdown","7fb7fdcf":"markdown","a4c1b9ac":"markdown","7d059eeb":"markdown","d59cb421":"markdown","20cb3bca":"markdown","2528a0bc":"markdown","14c29b38":"markdown","cca95c1c":"markdown","80a1dd21":"markdown","b6c77f9c":"markdown","e5c9adf0":"markdown","294787e3":"markdown","39a61d0f":"markdown","4531be17":"markdown","77b07d3e":"markdown","1cb9afc2":"markdown"},"source":{"c699f1ad":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport datetime\nimport unidecode\nimport numpy as np\nimport pandas as pd\nfrom numpy import dot\nimport seaborn as sns\nfrom numpy import random\nfrom numpy.linalg import norm\nimport matplotlib.pyplot as plt\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors   ","5e2840c4":"Netflix = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nprint(\"Dataframe Details\")\nprint(\"Total Rows: {}\\nTotal Columns: {}\".format(Netflix.shape[0],Netflix.shape[1]))\n\nNetflix.dropna(subset=['director','cast','country','date_added','rating'],axis=0,inplace=True)\nNetflix.drop(['show_id','description'],axis=1,inplace=True)\nprint()\nprint(\"Details after dropping null rows and columns\")\nprint(\"Total Rows: {}\\nTotal Columns: {}\".format(Netflix.shape[0],Netflix.shape[1]))\n\nNetflixDatabase = Netflix.copy()\n\nprint()\nprint(\"Database Created\")","294acfa7":"Netflix['cast'] = Netflix['cast'].apply(lambda x : unidecode.unidecode(x))\n\nNetflix['date_added'] = Netflix['date_added'].apply(lambda x : x[-4:])\nNetflix['date_added'] = Netflix['date_added'].astype('int64')\nNetflix['show_age'] = 2021 - Netflix['date_added']\nNetflix['show_age'] = Netflix['show_age'].apply(lambda x : str(x)+\" years\")\n\nNetflixVis = Netflix.copy()\n\nNetflix.drop(['date_added','release_year'],axis=1,inplace=True)\n\nprint(\"Data Procesing Done\")","99c79468":"NetflixVis.head()","d7415402":"sns.countplot(x = 'type', data = NetflixVis)\n\nplt.xlabel(\"Show Type\")\nplt.ylabel(\"Count Of Content\")","08d8a47a":"plt.figure(figsize=(10,3))\n\nplt.subplot(1,2,1)\nmovies_rating = NetflixVis[NetflixVis['type'] == \"Movie\"]\nmovies_rating.rating.hist(bins=10)\nplt.xlabel(\"Rating\")\nplt.title(\"Movie ratings frequency\")\nplt.xticks(rotation = 45)\n\nplt.subplot(1,2,2)\nshow_rating = NetflixVis[NetflixVis['type'] == \"TV Show\"]\nshow_rating.rating.hist(bins=10)\nplt.xlabel(\"Rating\")\nplt.title(\"TV Show ratings frequency\")\nplt.xticks(rotation = 45)\n\nplt.tight_layout(pad=0.4)","a4c4cfea":"sns.boxplot(x = 'type',y = 'date_added',data=NetflixVis)\n\nplt.ylabel(\"Date Added\")\nplt.xlabel(\"Show Type\")","3fd56dad":"age = NetflixVis['show_age'].value_counts()[:10]\nage.plot(kind='bar',title='Number of movies over the years')","029c8bab":"plt.figure(figsize=(10,3))\n\nplt.subplot(1,2,1)\nmovies_duration = NetflixVis[NetflixVis['type'] == \"Movie\"]\nmovies_duration = movies_duration['duration'].value_counts()[:10]\nmovies_duration.plot(kind='bar',title='Number of movies over the years')\nplt.xlabel(\"Duration\")\nplt.title(\"Top 10 Movie duration\")\nplt.xticks(rotation = 45)\n\nplt.subplot(1,2,2)\nshow_duration = NetflixVis[NetflixVis['type'] == \"TV Show\"]\nshow_duration = show_duration['duration'].value_counts()[:10]\nshow_duration.plot(kind='bar',title='Number of movies over the years')\nplt.xlabel(\"Seasons\")\nplt.title(\"Top 10 TV Shows seasons\")\nplt.xticks(rotation = 45)\n\nplt.tight_layout(pad=0.3)","a36057b7":"country = NetflixVis['country'].value_counts()[:10]\ncountry.plot(kind='bar',title='Number of movies over the years')","9ad2dd35":"plt.figure(figsize=(20,5))\n\nfor i in range(len(country.index)):\n    plt.subplot(2,5,i+1)\n    moviesvsshows = NetflixVis[NetflixVis['country'] == country.index[i]]\n    moviesvsshows = moviesvsshows['type'].value_counts()\n    moviesvsshows.plot(kind='bar')\n    plt.title(\"Movies vs Shows in {}\".format(country.index[i]))\n    plt.xticks(rotation = 360)\n    \nplt.tight_layout(pad=0.5)","3a4c53c7":"added_year = pd.pivot_table(NetflixVis, values='title', index='date_added', aggfunc=np.count_nonzero)\nrelease_year = pd.pivot_table(NetflixVis, values='title', index='release_year', aggfunc=np.count_nonzero)\n\nplt.figure(figsize=(8,4))\nsns.lineplot(x='date_added', y='title', data=added_year, label='Year Added')\nsns.lineplot(x='release_year', y='title', data=release_year, label='Year Release')\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Content\")\n\nplt.legend(shadow=True)","7b73efec":"genre = NetflixVis[\"listed_in\"].value_counts()[:10]\ngenre.plot(kind='barh',title='Genre of movies over the years')","461a20e3":"countrygenre = pd.pivot_table(NetflixVis, values='title', index=['country','listed_in'],aggfunc=np.count_nonzero).sort_values(by=['title']\n                                                                                                    ,ascending=False)\ncountrygenre = added_year[:5]   \ncountrygenre.plot(kind='barh',title='Country wise genre over the years')\n\nplt.ylabel(\"Countries and Genre\")","7e42353e":"Begin = datetime.datetime.now()\n\nsingle = ['type','rating', 'show_age','duration']\nlists = ['country','cast','director', 'listed_in']\n\nfor j in lists:\n    Netflix[j] = Netflix[j].apply(lambda x : x.replace(\" \",\"\").split(\",\"))\n\nNetflixEncoded = pd.DataFrame({'Index':Netflix.index})\nNetflixEncoded = NetflixEncoded.set_index('Index')\nprint(\"Encoder Dataframe Created\")","f874cfed":"for i in single:\n    for j in Netflix[i].unique():\n        NetflixEncoded[j] = 0\n           \nfor i in range(len(Netflix)):\n    row = Netflix.index[i] \n    for j in single:    \n        value = Netflix[j][row]        \n        NetflixEncoded.loc[row,value] = 1     ","ffe4bddf":"for i in lists:\n    holder = []\n    \n    for j in range(len(Netflix[i])):\n        row = Netflix.index[j] \n        holder.append([x.strip() for x in Netflix[i][row]])\n\n    finalcol = [l for m in holder for l in m]\n    finalcol = list(set(finalcol))\n    \n    for cols in finalcol:\n        NetflixEncoded[cols] = 0\n     \nfor i in range(len(Netflix)):\n    row = Netflix.index[i] \n    for j in lists:\n        for value in Netflix[j][row]: \n            NetflixEncoded.loc[row,value] = 1  \n             \nNetflixEncoded.fillna(0,inplace=True)  \nprint(\"Encoding Dataframe Done\")  ","3a3d2b01":"NetflixDatabase.reset_index(inplace=True) \nNetflixDatabase.drop('index',axis=1,inplace=True)\n\nNetflixEncoded.reset_index(inplace=True) \nNetflixEncoded.drop('Index',axis=1,inplace=True)\n\nprint(\"Index Reset for 'NetflixDatabase' and 'NetflixEncoded'\")  ","762d3ba7":"def content_recommendation_system(title):\n    cossim_values = []\n    \n    try:\n        row = NetflixDatabase[NetflixDatabase['title'] == title].index[0]\n        row = NetflixEncoded.index[row]\n\n        A = np.array(NetflixEncoded.iloc[row])\n\n        for j in range(len(NetflixEncoded)):\n            B = np.array(NetflixEncoded.iloc[j])\n            cossim = dot(A,B)\/(norm(A)*norm(B))\n            cossim_values.append(cossim)\n\n        NetflixDatabase['cosine_similarity'] = cossim_values\n        results = NetflixDatabase.sort_values('cosine_similarity', ascending=False) \n        results = results.head(6).iloc[1:,:-1]\n        return(results)\n    \n    except:\n        print(\"Oops. Terjadi kesalahan. Coba yang lain.\")   ","bd6c3f83":"content_recommendation_system(\"Mercy\")   ","cdef8f9d":"content_recommendation_system(\"Gotham\")   ","129b694f":"content_recommendation_system(\"Age\")","387afa3a":"End = datetime.datetime.now()\nRunTime = round((End - Begin).total_seconds()\/60.0)\nprint(\"Total waktu yang diperlukan 'Sistem Rekomendasi Basis Konten' adalah {} menit\".format(RunTime))  ","367f770e":"Begin = datetime.datetime.now()\n\nuserid = np.arange(1, 2000+1, 1)\nuserid = [\"uid\" + str(userid) for userid in userid]\n\nusercols = Netflix['title'].unique()\nuserwatch = random.randint(5, size=(2000,len(usercols)))\n\nwatchhist = pd.DataFrame(userwatch,columns=usercols)\nwatchhist.insert(0,\"user_id\",userid)\nwatchhist = watchhist.set_index('user_id')\nwatchhist = watchhist.transpose()\nwatchhist.index.name = 'title'\n\nwatchhist.head()","6dbe2383":"sparselist = csr_matrix(watchhist.values)\nwatchhist.reset_index(inplace=True)\n\nknn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20)\nknn.fit(sparselist)","df419c21":"def collab_recommendation_system(title):\n    \n    try:\n        row = watchhist[watchhist['title'] == title].index[0]\n\n        distances , indices = knn.kneighbors(sparselist[row],n_neighbors=5+1) \n        indices = [l for m in indices.tolist() for l in m]\n        distances = [l for m in distances.tolist() for l in m]\n\n        recommendation = {}\n\n        for i in range(1,len(indices)):\n            movie_name = watchhist.iloc[indices[i]]['title']\n            recommendation[movie_name] = distances[i]\n\n        recommendation = {k: v for k, v in sorted(recommendation.items(), key=lambda item: item[1])}\n        results = pd.DataFrame()\n\n        for key,value in recommendation.items():\n            row = NetflixDatabase[NetflixDatabase['title'] == key]\n            results = results.append(row)\n\n        return(results.iloc[1:,:-1])\n        \n    except:\n        print(\"Oops. Terjadi kesalahan. Coba yang lain.\")   ","3f543c89":"collab_recommendation_system(\"Mercy\")   ","bf2f2b39":"collab_recommendation_system(\"Gotham\")","795703cb":"collab_recommendation_system(\"Age\")","dce231d6":"End = datetime.datetime.now()\nRunTime = round((End - Begin).total_seconds()\/60.0)\nprint(\"Total Time Taken by 'Collaborative Based Recommendation System' was {} Mins\".format(RunTime))  ","b155d5fc":"Kebanyakan besar konten pada Netflix berumur 2 tahun. Sehingga, banyak konten baru ditambahkan pada 2018-2019. ","ae5bfc14":"Selanjutnya, terdapat Mesir, Filipina, dan Indonesia yang memiliki kontribusi sejumlah film. ","7fb7fdcf":"Rata-rata panjang dari setiap movie adalah hampir di atas 1.5 jam dimana beberapa TV shows tampaknya terbatas pada 1 season.","a4c1b9ac":"Walaupun metode ini tidak cocok unutk single dataset, #MariKitaCoba","7d059eeb":"# Visualisasi Data","d59cb421":"<h1><center>Recflix: Sistem Rekomendasi Netflix<\/center><\/h1>","20cb3bca":"# Pembersihan dan Pemrosesan Data","2528a0bc":"Terdapat sedikit jumlah film yang ditambahkan dalam tahun 2008 - 2015. Banyak movies dan TV Shows baru ditambahkan setelah 2015 dan 2013.","14c29b38":"Amerika memiliki konten kebanyakan Stand-Up Comedy. Sedangkan India kebanyakan konten Drama.","cca95c1c":"## 2. Sistem Rekomendasi Basis Kolaborasi","80a1dd21":"## 1. Rekomendasi Sistem Basis Konten","b6c77f9c":"Film dengan umur diatas 50 tahun ditemukan pada platform Netflix.","e5c9adf0":"Movies tampkanya merupakan konten mayoritas pada platform Netflix","294787e3":"Netflix menargetkan audience yang tua atau dewasa karena terdapat banyak kontennya yang memiliki rating \"TV Mature Audience (TV-MA)\"","39a61d0f":"# Sistem Rekomendasi","4531be17":"Amerika adalah kontributor konten terbanyak. Setelah itu, India.","77b07d3e":"Netflix menawarkan sejumlah film Stand-ups, Dramas dan International  ","1cb9afc2":"Notebook ini dapat membantu kamu dalam mencari beberapa sugesti dari film yang patunt ditonton berdasarkan dari pilihan film kamu. Untuk ini, kami menyebutnya sistem rekomender."}}