{"cell_type":{"bee798d7":"code","ce149be0":"code","1769abe7":"code","28c29f4f":"code","2ebafb78":"code","cbf97096":"code","bdd3e3b3":"code","66bcd551":"code","6446dbef":"code","fc6e70b1":"code","424ad4c0":"code","511673ee":"code","1d14719b":"code","6d9d6e8e":"code","769e6cc7":"code","e67b9ae7":"code","8d1625a6":"code","ab8a123c":"code","a693e652":"code","2ebca5ac":"code","dccb80bd":"code","1ce84c54":"code","9dcb532c":"code","b1f541a0":"code","754e36b9":"code","35a01022":"code","e401f6ac":"code","d33ddb03":"code","88f8fac5":"code","06fdb7be":"code","5c4a86ae":"code","e14578a7":"code","15128f66":"code","a19d6952":"code","aae971f5":"code","7c8db822":"code","53e981da":"code","f0288f02":"code","169082a4":"code","c0b2e852":"code","a2135b35":"code","26720d9d":"code","6d7a7046":"code","454e0d9e":"markdown","50701214":"markdown"},"source":{"bee798d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce149be0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats\nimport squarify as sq\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\nimport sklearn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score, KFold\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB,BernoulliNB\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\n%matplotlib inline\nimport random\nimport matplotlib.colors as mcolors","1769abe7":"data = pd.read_csv(\"\/kaggle\/input\/top-100-most-streamed-songs-on-spotify\/Top 100 most Streamed - Sheet1.csv\")","28c29f4f":"data.head()","2ebafb78":"data.isna().sum()","cbf97096":"#Calculating the number of songs of each genre\nprint(type(data['top genre']))\npopular_genre = data.groupby('top genre').size().unique\nprint(popular_genre)\ngenre_list = data['top genre'].values.tolist()","bdd3e3b3":"#Calculating the number of songs by each of the artists\nprint(data.groupby('artist').size())\npopular_artist = data.groupby('artist').size()\nprint(popular_artist)\nartist_list = data['artist'].values.tolist()","66bcd551":"pd.set_option('precision', 3)\ndata.describe()","6446dbef":"# Finding out the skew for each attribute\nskew = data.skew()\nprint(skew)\n# Removing the skew by using the boxcox transformations\ntransform = np.asarray(data['liveness'].values)\ndf_transform = stats.boxcox(transform)[0]\n# Plotting a histogram to show the difference \nplt.hist(data['liveness'],bins=10) #original data\nplt.show()\nplt.hist(df_transform,bins=10) #corrected skew data\nplt.show()","fc6e70b1":"transform1 = np.asarray(data['popularity'].values)\ndf_transform1 = stats.boxcox(transform1)[0]\nsns.distplot(data['popularity'],bins=10,kde=True,kde_kws={\"color\": \"k\", \"lw\": 2, \"label\": \"KDE\"},color='yellow')\nplt.show()\nsns.distplot(df_transform1,bins=10,kde=True,kde_kws={\"color\": \"k\", \"lw\": 2, \"label\": \"KDE\"},color='black') #corrected skew data\nplt.show()","424ad4c0":"pd.set_option('display.width', 100)\npd.set_option('precision', 3)\ncorrelation = data.corr(method='spearman')\nprint(correlation)","511673ee":"xtick = ['canadian hip hop', 'cali rap', 'electropop', 'brostep', 'canadian pop', 'acoustic pop', 'pop', 'alternative rock', 'pop dance', 'folk-pop', 'lgbtq+ hip hop', 'classic rock', 'australian pop', 'dance pop', 'latin', 'beatlesque', 'electro house', 'conscious hip hop', 'detroit hip hop', 'dfw rap', 'neo soul', 'boy band', 'modern rock', 'gangster rap', 'pop rap', 'emo rap', 'north carolina hip hop', 'chicago rap', 'canadian contemporary r&b', 'melodic rap', 'danish pop', 'rap', 'irish singer-songwriter', 'australian dance']\nlength = np.arange(len(xtick))\ngenre_groupby = data.groupby('top genre')['title'].agg(len)\nplt.figure(figsize = (15,7))\nplt.bar(length, genre_groupby)\nplt.xticks(length,xtick)\nplt.xticks(rotation = 90)\nplt.xlabel('Genre', fontsize = 20)\nplt.ylabel('Count of the tracks', fontsize = 20)\nplt.title('Genre vs Count of the tracks', fontsize = 25)","1d14719b":"# heatmap of the correlation \nplt.figure(figsize=(10,10))\nplt.title('Correlation heatmap')\nsns.heatmap(correlation,annot=True,vmin=-1,vmax=1,cmap=\"GnBu_r\",center=1)","6d9d6e8e":"fig = plt.figure(figsize = (15,7))\ndata.groupby('artist')['title'].agg(len).sort_values(ascending = False).plot(kind = 'bar')\nplt.xlabel('Artist', fontsize = 20)\nplt.ylabel('Songs count', fontsize = 20)\nplt.title('Artist vs Songs count', fontsize = 30)","769e6cc7":"# Analysing the relationship between energy and loudness\nfig = plt.subplots(figsize=(10,10))\nsns.regplot(x='energy',y='loudness.dB',data=data,color='black')","e67b9ae7":"fig=plt.subplots(figsize=(10,10))\nplt.title('Dependence between energy and popularity')\nsns.regplot(x='energy', y='popularity',\n            ci=None, data=data)\nsns.kdeplot(data.energy,data.popularity)","8d1625a6":"data.plot(kind='box', subplots=True)\nplt.gcf().set_size_inches(30,30)\nplt.show()","ab8a123c":"plt.figure(figsize=(14,8))\nsq.plot(sizes = data['top genre'].value_counts(), label=data[\"top genre\"].unique(), alpha=.8 )\nplt.axis('off')\nplt.show()","a693e652":"#Pie charts \nlabels = data.artist.value_counts().index\nsizes = data.artist.value_counts().values\ncolors = random.choices(list(mcolors.CSS4_COLORS.values()),k = 30)\nplt.figure(figsize = (10,10))\nplt.pie(sizes, labels=labels, colors = colors)\nautopct=('%1.1f%%')\nplt.axis('equal')\nplt.show()","2ebca5ac":"#Linear regression, first create test and train dataset\nx = data.loc[:,['energy','danceability','length','loudness.dB','acousticness']].values\ny = data.loc[:,'popularity'].values","dccb80bd":"#Creating a test and training dataset\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30)","1ce84c54":"# Linear regression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\nprint(regressor.intercept_)\nprint(regressor.coef_)","9dcb532c":"#Displaying the difference between the actual and the predicted\ny_pred = regressor.predict(X_test)\ndf_output = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nprint(df_output)","b1f541a0":"#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","754e36b9":"plt.figure(figsize=(10,10))\nplt.plot(y_pred,y_test,color='black',linestyle='dashed',marker='*',markerfacecolor='red',markersize=10)\nplt.title('Error analysis')\nplt.xlabel('Predicted values')\nplt.ylabel('Test values')","35a01022":"# Cross validation score\nx = data.loc[:,['energy','danceability']].values\ny = data.loc[:,'popularity'].values\nregressor = LinearRegression()\nmse=cross_val_score(regressor,X_train,y_train,scoring='neg_mean_squared_error',cv=5)\nmse_mean=np.mean(mse)\nprint(mse_mean)\ndiff=metrics.mean_squared_error(y_test, y_pred)-abs(mse_mean)\nprint(diff)","e401f6ac":"x = data.loc[:,['artist']].values\ny = data.loc[:,'top genre'].values","d33ddb03":"# Label encoding of features\nx.shape\nencoder=LabelEncoder()\nx = encoder.fit_transform(x)\nx=pd.DataFrame(x)\nx","88f8fac5":"# Label Encoding of target\nEncoder_y=LabelEncoder()\nY = Encoder_y.fit_transform(y)\nY=pd.DataFrame(Y)\nY","06fdb7be":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 1)\n\n#Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(x_train)\nx_train=sc.transform(x_train)\nx_test=sc.transform(x_test)","5c4a86ae":"# KNN Classification\nknn = KNeighborsClassifier(n_neighbors = 17)\nknn.fit(x_train,y_train)\ny_pred=knn.predict(x_test)","e14578a7":"error=[]\nfor i in range(1,30):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i=knn.predict(X_test)\n    error.append(np.mean(pred_i!=y_test))","15128f66":"plt.figure(figsize=(10,10))\nplt.plot(range(1,30),error,color='black',marker='o',markerfacecolor='cyan',markersize=10)\nplt.title('Error Rate K value')\nplt.xlabel('K Value')\nplt.ylabel('Mean error')","a19d6952":"x = data.loc[:,['energy','length','danceability','beats.per.minute', 'acousticness']].values\ny = data.loc[:,'popularity'].values","aae971f5":"# Creating a test and training dataset\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30)","7c8db822":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred=gnb.predict(X_test)\ndf_output = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nprint(df_output)","53e981da":"# Testing the accuracy of Naive Bayes \nscores=cross_val_score(gnb,X_train,y_train,scoring='accuracy',cv=3).mean()*100\nprint(scores)","f0288f02":"sns.jointplot(x=y_test, y=y_pred, kind=\"kde\", color=\"r\")","169082a4":"x= data.loc[:,['energy','length','danceability','beats.per.minute', 'acousticness']].values\ny= data.loc[:,'popularity'].values","c0b2e852":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30)","a2135b35":"# Linear SVM model \nLinSVC = LinearSVC(penalty='l2', loss='squared_hinge', dual=True)\nLinSVC.fit(X_train, y_train)\ny_pred=gnb.predict(X_test)\ndf_output = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nprint(df_output)","26720d9d":"#Testing the accuracy\nscores=cross_val_score(LinSVC,X_train,y_train,scoring='accuracy',cv=3).mean()*100\nprint(scores)","6d7a7046":"sns.jointplot(x=y_test, y=y_pred, kind=\"reg\", color=\"b\");","454e0d9e":"If you like the work upvote, **Thank you**.","50701214":"**Import Libraries**"}}