{"cell_type":{"cf4c9b53":"code","1e35dc9f":"code","7c78d3a8":"code","a9d912d4":"code","186636d4":"code","cb38444a":"code","96ad108d":"code","2bfc2ea2":"code","a3a34606":"code","e4f668b1":"code","81e29c16":"code","9842551a":"code","92d73f14":"code","aa1a6e68":"code","693f4920":"code","e60b8fd6":"code","595e14ff":"code","181517a4":"code","066d0614":"code","dc3b4443":"code","d704f4ff":"code","8307b73f":"code","2d98b096":"code","45baf066":"code","d2e0d193":"code","473a412f":"code","edaa7225":"code","0a0c6103":"code","8f080d80":"code","437d6aa6":"code","28853fec":"code","123be850":"code","d69e86f9":"code","0d0322c0":"code","854798cf":"code","f5521e5a":"code","907bcb8d":"code","57d11403":"code","ddbf0727":"markdown","daca8fe9":"markdown","e55d08cf":"markdown","18227fad":"markdown","6bc4da28":"markdown","83d91664":"markdown","0296eb85":"markdown","59e68c0f":"markdown","6d0b5768":"markdown","7ec87a10":"markdown","1f8d630e":"markdown","64d3d46b":"markdown","3cd05e52":"markdown","664ea794":"markdown","9380404b":"markdown","1eb2b61a":"markdown","43c8d04a":"markdown","4a5dfadd":"markdown","85b05c57":"markdown","1a759173":"markdown","d87e5d9b":"markdown","02c10ebd":"markdown","34ecf0ad":"markdown","40fcb862":"markdown","f891f5c9":"markdown","b303f78e":"markdown","843ef383":"markdown","f00e99f4":"markdown","3b9cdb3a":"markdown","748326de":"markdown","c460a66e":"markdown","891d14ac":"markdown","ceebdfab":"markdown","39a65d20":"markdown","33cf77b9":"markdown","08c3fe53":"markdown","e28c1eb9":"markdown","1e64fd4b":"markdown","8ca0dba0":"markdown","c064a921":"markdown"},"source":{"cf4c9b53":"sea_creatures = ['shark', 'squid', 'cuttlefish', 'dolphin']","1e35dc9f":"sea_creatures = ['shark', 'squid', 'cuttlefish', 'dolphin']\nprint(sea_creatures [3])","7c78d3a8":"fruit = ['apples','oranges','pears']\nprint(fruit)","a9d912d4":"fruit.append('mangos')\nprint(fruit)","186636d4":"board = [None] + list(range(1,10))","cb38444a":"WIN_COMBINATIONS = [\n    (1, 2, 3),\n    (4, 5, 6),\n    (7, 8, 9),\n    (1, 4, 7),\n    (2, 5, 8),\n    (3, 6, 9),\n    (1, 5, 9),\n    (3, 5, 7),\n]","96ad108d":"def draw(): ","2bfc2ea2":"def draw(): \n    print(board[7], board[8], board[9])\n    print(board[4], board[5], board[6])\n    print(board[1], board[2], board[3])\n    print()","a3a34606":"def choose_number():","e4f668b1":"def choose_number():\n    while True:","81e29c16":"def choose_number():\n    while True:\n        try: ","9842551a":"def choose_number():\n    while True:\n        try: \n            a = int(input())","92d73f14":"def choose_number():\n    while True:\n        try: \n            a = int(input())\n            if a in board: ","aa1a6e68":"def choose_number():\n    while True:\n        try: \n            a = int(input())\n            if a in board: \n                return(a)","693f4920":"def choose_number():\n    while True:\n        try: \n            a = int(input())\n            if a in board: \n                return(a)\n            else: ","e60b8fd6":"def choose_number():\n    while True:\n        try: \n            a = int(input())\n            if a in board: \n                return(a)\n            else: \n                print(\"\\nInvalid move. Try again\")","595e14ff":"def choose_number():\n    while True:\n        try: \n            input: a = int(input())\n            if a in board: \n                return(a)\n            else: \n                print(\"\\nInvalid move. Try again\")\n        except ValueError:","181517a4":"def choose_number():\n    while True:\n        try: \n            input: a = int(input())\n            if a in board: \n                return(a)\n            else: \n                print(\"\\nInvalid move. Try again\")\n        except ValueError:\n            print(\"\\nThat's not a number. Try again\")","066d0614":"def is_game_over(): ","dc3b4443":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:","d704f4ff":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:","8307b73f":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")","2d98b096":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")\n            return True","45baf066":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")\n            return True\n    if 9 == sum((pos == 'X' or pos == 'O') for pos in board):","d2e0d193":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")\n            return True\n    if 9 == sum((pos == 'X' or pos == 'O') for pos in board):\n        print(\"The game ends in a tie\\n\")","473a412f":"def is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")\n            return True\n    if 9 == sum((pos == 'X' or pos == 'O') for pos in board):\n        print(\"The game ends in a tie\\n\")\n        return True","edaa7225":"for player in 'XO' * 9:","0a0c6103":"for player in 'XO' * 9:\n    draw()","8f080d80":"for player in 'XO' * 9:\n    draw()\n    if is_game_over():","437d6aa6":"Add a \u201cbreak\u201d block to end the game: ","28853fec":"for player in 'XO' * 9:\n    draw()\n    if is_game_over():\n        break","123be850":"for player in 'XO' * 9:\n    draw()\n    if is_game_over():\n        break\n    print(\"Player {0} pick your move\".format(player))","d69e86f9":"for player in 'XO' * 9:\n    draw()\n    if is_game_over():\n        break\n    print(\"Player {0} pick your move\".format(player))\n    board[choose_number()] = player","0d0322c0":"for player in 'XO' * 9:\n    draw()\n    if is_game_over():\n        break\n    print(\"Player {0} pick your move\".format(player))\n    board[choose_number()] = player\n    print() ","854798cf":"while True:","f5521e5a":"while True:\n    if input(\"Play again (y\/n)\\n\") != \"y\":","907bcb8d":"while True:\n    if input(\"Play again (y\/n)\\n\") != \"y\":\n        break","57d11403":"board = [None] + list(range(1,10))\nWIN_COMBINATIONS = [\n    (1, 2, 3),\n    (4, 5, 6),\n    (7, 8, 9),\n    (1, 4, 7),\n    (2, 5, 8),\n    (3, 6, 9),\n    (1, 5, 9),\n    (3, 5, 7),\n]\n\ndef draw(): \n    print(board[7], board[8], board[9])\n    print(board[4], board[5], board[6])\n    print(board[1], board[2], board[3])\n    print()\n\ndef choose_number():\n    while True:\n        try: \n            a = int(input())\n            if a in board: \n                return(a)\n            else: \n                print(\"\\nInvalid move. Try again\")\n        except ValueError:\n            print(\"\\nThat's not a number. Try again\")\n\ndef is_game_over(): \n    for a, b, c in WIN_COMBINATIONS:\n        if board[a] == board[b] == board[c]:\n            print(\"Player {0} wins!\\n\".format(board[a]))\n            print(\"Congratulations!\\n\")\n            return True\n    if 9 == sum((pos == 'X' or pos == 'O') for pos in board):\n        print(\"The game ends in a tie\\n\")\n        return True\n\nfor player in 'XO' * 9:\n    draw()\n    if is_game_over():\n        break\n    print(\"Player {0} pick your move\".format(player))\n    board[choose_number()] = player\n    print()\n\nwhile True:\n    if input(\"Play again (y\/n)\\n\") != \"y\":\n        break","ddbf0727":"Add a print statement for a player to pick a move: ","daca8fe9":"Here, we are assigning the function choose_number(), which validates whether our pick is an integer or not, into the board variable. What this does is it will prompt the player to choose a board position (1 to 9), check that it is valid, and then assign it and mark it on the board. \n","e55d08cf":"Add a closing print statement: ","18227fad":"Add a break statement to complete everything:","6bc4da28":"Add an if statement for when the game ends: ","83d91664":"# Extension\n\nThe above code is also located at this link: https:\/\/repl.it\/repls\/DarkorchidQuaintCompiler#main.py\n\nFor an extension, try modifying the code at this link to create a 4x4 Tic Tac Toe game!","0296eb85":"Starting an if-else loop inside the while loop:\n\nWrite the \u201cif\u201d statement:","59e68c0f":"Then write out the following; this is what will print the board (which should have been drawn on the board as included in necessary prep): ","6d0b5768":"## **Python Lists**\n\nNow, we are going to explore other features of Python lists. As we mentioned earlier, one advantage to lists is that they are mutable. Let\u2019s go through an example:\n\nOur friend Percy is writing a Python code about fruits. They start with a list \u201cfruits\u201d. After writing the list, Percy realizes that they forgot to add mango to the list. What should Percy do? Wait for campers to respond\n\nLuckily there is a very easy one with Python lists. Let\u2019s look at the code:","7ec87a10":"## Final Loop\n\nNow, we will add a final \u201cfor\u201d loop that combines all the functions and activates them on certain conditions: \n\nAdd the for statement:","1f8d630e":"Add the following code:","64d3d46b":"Add a for loop for a,b,c from WIN_COMBINATIONS. The a,b,c here refer to the 3 numbers from any of the possible winning combinations that we defined earlier:","3cd05e52":"A follow-up to the \u201cif\u201d statement:","664ea794":"Add a return statement for the if:","9380404b":"## Closing While Statement\n\nFinally, we will add a closing while loop that also prompts the player to play again:\n\nAdd the while statement:","1eb2b61a":"Type the try block. This is a function in Python that tests a code for errors:","43c8d04a":"## Game Over Function\n\nAfterwards, we will write the code that will let Python know when we\u2019re done the game and whether a player won or there was a tie.\n\nDefine the function:","4a5dfadd":"Write a print statement that lets Python tell the user that their input is wrong if it is not an integer:","85b05c57":"Then, we will define our first function, the draw() function: ","1a759173":"## **Hands on Activity**\n\nWe will start with defining two global variables. These are variables that will be referenced throughout the code.\n\nDefine the \u201cboard variable\u201d. Write out the following code:","d87e5d9b":"Add a return statement: ","02c10ebd":"Write out a line of code that refers to \u201ca\u201d as an integer:","34ecf0ad":"Add the draw function (which we have already defined):","40fcb862":"Add a print statement that lets Python tell the user that they did not type a number if they didn\u2019t: ","f891f5c9":"Add print statements to be displayed when a player wins: ","b303f78e":"# Final Code\n\nHere\u2019s what the overall code looks like: ","843ef383":"Add an if statement for our first scenario, the a,b,c matching up a winning combination:  ","f00e99f4":"Now that we have learned about lists, along with our knowledge of for and if loops, we are ready to code our Tic Tac Toe game! ","3b9cdb3a":"As some of you may notice, when we write [3], we get dolphin and not cuttlefish. \n\nThis is because the first item of any list in Python is \u2018item zero\u2019. So if the item \u2018shark\u2019 is item zero, \u2018dolphin\u2019 would be item three, not cuttlefish!\n\nGreat! Now that we are more familiar with Python lists, let\u2019s go through an example together of how it works! ","748326de":"Add the following if loop that asks the player if they want to play again:","c460a66e":"## Choose Number Function\n\nThe second function we are defining is the one to choose numbers and validate them. \n\nDefine the function:","891d14ac":"Now you can play a game of Tic Tac Toe! \n\nJust click on the code above, and press the blue triangle button at the top left corner of the cell to start the game! Then each player can enter where they want their X or O to go in the box below the code.","ceebdfab":"Starting a while loop: ","39a65d20":"Else statement:","33cf77b9":"Note that \u201c\\n\u201d in Python refers to a new line. \n\nAdd an \u201cexcept\u201d statement. An \u201cexcept\u201d block is complementary to the \u201ctry\u201d one. It handles the errors from the \u201ctry\u201d steps. ValueError is a type of exception in Python that is raised when an operation receives an argument of the right type but incorrect value:","08c3fe53":"Define the winning combinations variable. Note: these are the nine combinations that result in a Tic Tac Toe win. The numbers are as they would appear on the board (which instructors should draw on the white board).  ","e28c1eb9":"As you can notice, writing a list in Python is easy.  You write the \u201citems\u201d in single quotations, and then the list is represented by square brackets. \n\nAnother unique thing about lists is that they are mutable. That is, you can change the order of items in the list. You can add (append) anything into the list. You can also remove things from a list. That\u2019s what makes working with lists easy in Python. \n\nAdditionally, you can also index lists. That is, you can have Python display a certain word in a list by writing the position of the word. Here is an example of how that would work: ","1e64fd4b":"Add a print statement for the tie scenario:","8ca0dba0":"# Tic Tac Toe\n\nHello Campers! Welcome to another week of Pathways to Python camp. Today, we are going to create a Tic Tac Toe Game. We\u2019re all familiar with the game, right? Players take turns drawing an X or an O in the 3x3 square below.\n\n\n![Image of TicTacToe Board](https:\/\/i.pinimg.com\/originals\/7f\/d6\/54\/7fd654e4ed2675f4606bd72177eb1fb2.jpg)\n\n\nAmazing! This a simple shape, isn\u2019t it? However, today we are pushing ourselves a little bit further. We are going to be making our own Tic Tac Toe game using *Python* instead.\n\nWe will be splitting our code into five subsections that will make the code easier to write and understand. Before we get started, I have a question for all of you. Can anyone guess  and tell me how many winning lines and combinations there is in a Tic Tac Toe game?\n\nThere\u2019s 8!\n\nYou might be wondering how we can code all the winning \u201clines\u201d into Python without spending hours doing so. Python makes it easy for us to achieve this because of a feature in Python called \u201clists\u201d. Lists in Python are intuitive and very similar to lists in real life.\n\nLists in python are unique because they are represented with square brackets. Here\u2019s an example of a list being coded in Python: ","c064a921":"Add another if statement for the other scenario where the game ends in a tie (that is, the players reach the 9th play and none of the winning combinations are satisfied):"}}