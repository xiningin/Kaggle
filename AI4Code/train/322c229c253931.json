{"cell_type":{"bbeb6205":"code","3b91c6c6":"code","0669345b":"code","74f165b1":"code","ae7f6192":"code","2be50ddd":"code","18754a99":"code","7042f9fe":"code","e1d8e3ee":"code","b66ddf49":"code","95d9755d":"code","358c38ce":"code","b65b334b":"code","e51f03d6":"code","01796850":"code","95deb8ca":"code","bd81e94f":"code","cf013dd5":"code","e4c4f60f":"code","a6052dfc":"code","51adc027":"code","879c8f91":"code","18f60c52":"code","35ed6d61":"code","72aa96d1":"markdown","37ba087d":"markdown","bce9fccd":"markdown","0a8333b1":"markdown","cbb77cc7":"markdown","c502743c":"markdown","ee859f5d":"markdown","96ec0385":"markdown","75a3d0d2":"markdown","7f4ceda2":"markdown","05b5c405":"markdown","ad0d27ae":"markdown","20c37629":"markdown","372d4f9f":"markdown","f49e0ccf":"markdown","469ed0fc":"markdown","465183cd":"markdown","07fce080":"markdown","0960cddd":"markdown","034ec814":"markdown","364b8be0":"markdown"},"source":{"bbeb6205":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# TODO need to change to downloadable URL format\n# \ndirname = '\/kaggle\/input'\nfilename = 'data.csv'\nfilepath = os.path.join(dirname, filename)\n","3b91c6c6":"df = pd.read_csv(filepath)","0669345b":"df.head()","74f165b1":"df.tail()","ae7f6192":"# Unique names either gender.\ndf[\"name\"].nunique()\n\n# Unique names for male.\ndf[df[\"gender\"] == \"M\"][\"name\"].nunique()\n\n# Unique names for female.\ndf[df[\"gender\"] == \"F\"][\"name\"].nunique()\n\n# Unique names for gender neutral.\nboth_df = df.pivot_table(index=\"name\", columns=\"gender\", values=\"count\", aggfunc=np.sum).dropna()\nboth_df.index.nunique()","2be50ddd":"# Step by step approach, the one-liners can be found below their respective tables.\nonly_gender_male = df[df[\"gender\"] == \"M\"]\nonly_name_and_count_colmns = only_gender_male[[\"name\", \"count\"]]\ndf_group_by_name = only_name_and_count_colmns.groupby(\"name\")\ndf_group_by_name_sum = df_group_by_name.sum()\ndf_group_by_name_sum_sort_by_count = df_group_by_name_sum.sort_values(\"count\", ascending=False)\ndf_group_by_name_sum_sort_by_count.head(10)","18754a99":"# In one liner format \ndf[df[\"gender\"] == \"M\"][[\"name\", \"count\"]].groupby(\"name\").sum().sort_values(\"count\", ascending=False).head(10)","7042f9fe":"# One liner format for Female children\n df[df[\"gender\"] == \"F\"][[\"name\", \"count\"]].groupby(\"name\").sum().sort_values(\"count\", ascending=False).head(10)","e1d8e3ee":"df_pvt = df.pivot_table(index=\"name\", columns=\"gender\", values=\"count\", aggfunc=np.sum).dropna()","b66ddf49":"df_pvt_count_gt_50k = df_pvt[(df_pvt[\"M\"] >= 50000) & (df_pvt[\"F\"] >= 50000)]\ndf_pvt_count_gt_50k.head(20)","95d9755d":"both_df = df.groupby(\"year\").sum()\nmale_df = df[df[\"gender\"] == \"M\"].groupby(\"year\").sum()\nfemale_df = df[df[\"gender\"] == \"F\"].groupby(\"year\").sum()\n\n# Initializing list\ndata = []\n\n# Combined Min (count and year)\nboth_df_min = both_df.min()[\"count\"]\nboth_df_count = both_df.idxmin()[\"count\"]\n\n# Appending result to list\ndata.append(['Both Min',both_df_min, both_df_count ])\n\n# Male Min (count and year)\nmale_df_min = male_df.min()[\"count\"]\nmale_df_count = male_df.idxmin()[\"count\"]\n\n# Appending result to list\ndata.append(['Male Min',male_df_min, male_df_count ])\n\n# Female Min (count and year)\nfemale_df_min = female_df.min()[\"count\"]\nfemale_df_count = female_df.idxmin()[\"count\"]\n\n# Appending to list\ndata.append(['Female Min',female_df_min, female_df_count ])\n\n# Combined Max (count and year)\nboth_df_max = both_df.max()[\"count\"]\nboth_df_max_count = both_df.idxmax()[\"count\"]\n\n# Appending result to list\ndata.append(['Both Max',both_df_max, both_df_max_count ])\n\n# Male Max (count and year)\nmale_df_max = male_df.max()[\"count\"]\nmale_df_max_count = male_df.idxmax()[\"count\"]\n\n# Appending result to list\ndata.append(['Male Max',male_df_max, male_df_max_count ])\n\n# Female Max (count and year)\nfemale_df_max = female_df.max()[\"count\"]\nfemale_df_max_count = female_df.idxmax()[\"count\"]\n\n# Appending to list final value\ndata.append(['Female Max',female_df_max, female_df_max_count ])","358c38ce":"pd.DataFrame(data, columns=[\"Gender and Attribute\", \"Total Count\", \"Year\"])","b65b334b":"# Those parameters generate plots with a mauve color.\nsns.set(style=\"ticks\",\n        rc={\n            \"figure.figsize\": [12, 7],\n            \"text.color\": \"white\",\n            \"axes.labelcolor\": \"white\",\n            \"axes.edgecolor\": \"white\",\n            \"xtick.color\": \"white\",\n            \"ytick.color\": \"white\",\n            \"axes.facecolor\": \"#443941\",\n            \"figure.facecolor\": \"#443941\"}\n        )","e51f03d6":"both_df = df.groupby(\"year\").sum()\nmale_df = df[df[\"gender\"] == \"M\"].groupby(\"year\").sum()\nfemale_df = df[df[\"gender\"] == \"F\"].groupby(\"year\").sum()","01796850":"plt.plot(both_df, label=\"Both\", color=\"yellow\")\nplt.plot(male_df, label=\"Male\", color=\"lightblue\")\nplt.plot(female_df, label=\"Female\", color=\"pink\")","95deb8ca":"pivoted_df = df.pivot_table(index=\"name\", columns=\"year\", values=\"count\", aggfunc=np.sum).fillna(0)","bd81e94f":"percentage_df = pivoted_df \/ pivoted_df.sum() * 100","cf013dd5":"percentage_df[\"total\"] = percentage_df.sum(axis=1)","e4c4f60f":"sorted_df = percentage_df.sort_values(by=\"total\", ascending=False).drop(\"total\", axis=1)[0:10]","a6052dfc":"transposed_df = sorted_df.transpose()","51adc027":"transposed_df.columns.tolist()","879c8f91":"for name in transposed_df.columns.tolist():\n    plt.plot(transposed_df.index, pivoted_df[name], label=name)","18f60c52":"yticks_labels = [\"{}%\".format(i) for i in np.arange(0, 5.5, 0.5)]\nplt.yticks(np.arange(0, 5.5, 0.5), yticks_labels)","35ed6d61":"plt.legend()\nplt.grid(False)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Percentage by Year\")\nplt.title(\"Top 10 Names Growth\")\nplt.show()","72aa96d1":"### Unique Names\n\nThere are 98,400 unique names in the dataset. From those, 41,475 are male names, 67,698 are female ones and 10,773 are gender neutral.","37ba087d":"Then we calculate the percentage of each name by year.","bce9fccd":"### Counts by Year\n\nOur first plot will consist on how the number of records has moved from 1880 to 2018.\n\nFirst, we create new dataframes for male, female and combined.","0a8333b1":"Since our dataset is very simple we won't require to set any special flags or extra parameters, the default ones are good enough.\n\nLet's start with the classic `df.head()` and `df.tail()` methods which are very handy for taking a sneak peek at the dataset.","cbb77cc7":"The year 1881 got the lowest records on the dataset, while the year 1957 got the highest records.\n\nSo far we got several interesting insights, it's time to create some pretty plots.","c502743c":"We plot our dataframes directly. The x-axis will be the index and the y-axis will be the total counts.","ee859f5d":"These samples tells us several things:\n\n* There are 4 columns (year, name, gender and count).\n* There are 1,957,046 rows.\n* Rows are sorted by year.\n* Female records are shown before male ones.\n* At least 5 parents in 2018 named their son 'Zzyzx'.\n\n*Note: The dataset only includes names which have at least 5 records, this is for privacy reasons.*","96ec0385":"We add a new column to store the cumulative percentages sum.","75a3d0d2":"## Plotting the Data\n\nFor creating the plots we will use `seaborn` and `matplotlib`, the reason for this is that seaborn applies some subtle yet nice looking effects to the plots.\n\nIn this project we are only going to use line plots, which are very helpful for displaying how a value changes over time.\n\nThe first thing to do is to set some custom colors that will apply globally to each plot.\n","7f4ceda2":"\nWith our style declared we are ready to plot our data.\n\n*Note: The next code blocks are more advanced than the previous ones. I also make heavy use of one-liners for efficiency reasons, but don't worry, I will explain what each line does.*\n","05b5c405":"With the data in this shape we now know how many records each name has per gender.\n\nNow we will only take into account those names that atleast have 50,000 records for each gender.","ad0d27ae":"We sort the dataframe to check which are the top values and slice it. After that we drop the `total` column since it won't be used anymore.\n","20c37629":"We set our yticks in steps of 0.5%.","372d4f9f":"We add the final customizations.","f49e0ccf":"We plot each name individually by using the column name as the label and Y-axis.","469ed0fc":"We flip the axes so we can plot the data more easily.","465183cd":"EDA - Explorartoy Data analysis","07fce080":" ### Highest and Lowest Years\n\nNow we will know which years had the highest and lowest amount of records by gender and combined.","0960cddd":"### Top 10 Male and Female Names\n\nTo get the top 10 most used male and female names we are going to first filter the `dataframe` by gender.\n\nOnce we have a gender specific `dataframe` we wiil select only 2 fields, name and count. From there we will use the `groupby()` method on the name field and aggregate the results using a `sum()`.\n\nFinally, we will sort the values on the count field in descending order and use the `head(10)` method to get the top 10 results.","034ec814":"### Most Popular Names Growth\n\nFor our next plot we will observe how the all-time most popular names have grown over the years.\n\nFirst, we merge values from male and female and pivot the table so the names are our index and the years are our columns. We also fill missing values with zeroes.","364b8be0":"### Top 20 Gender Neutral Names\n\nThis one was a bit challenging, first we need to pivot the `dataframe` so the names are the index, the genders will be the columns and the sum of all counts (per name, per gender) will be our values.\n\nWe are going to do this in small steps. First we pivot the table and drop the rows where the value is 0. This means rows where names are not present in either male or female categories."}}