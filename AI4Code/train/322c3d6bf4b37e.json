{"cell_type":{"566f8521":"code","e3968010":"code","a0a53a56":"code","710c0842":"code","a5f18696":"code","ea04a004":"code","212df6c9":"code","9c996971":"code","d428eb87":"code","72236f08":"code","d2afb0f5":"code","8c393f7d":"code","49ddb12f":"code","c65279db":"code","0b5178c5":"code","9fb42fec":"code","a2beb66f":"code","0c2f0e09":"code","74c1a9a8":"code","6b070fc5":"code","28988103":"code","144f474e":"code","64b94904":"code","7a40f6a1":"code","5af53e8d":"code","20cb3971":"code","eb1ecd10":"code","51ec827e":"code","b0edd216":"code","7aa63f4b":"code","4eb3de43":"code","de2924ac":"code","3895de40":"code","0b166c15":"code","7b076eb5":"code","7e20db99":"code","8bada1fe":"code","6da8da24":"code","41f21f54":"code","5b27c21a":"code","77f96a6e":"code","c356494b":"code","8557b379":"code","c6b04dc6":"code","00e97e46":"code","1eb00106":"code","d5fe9d16":"code","9f421b1d":"code","80efc50d":"code","cb1d13a5":"code","633e2482":"code","765544e8":"code","8ee97598":"code","83674939":"code","4bdc0627":"code","7fff3466":"code","fce62155":"code","a0a1d308":"code","8a891ced":"code","9d221b27":"code","3c765596":"code","6f3afb7e":"code","2a5e37a2":"code","3e74e8a1":"code","88d25305":"code","1272ae85":"code","9685aa6c":"code","831280c1":"code","37cd358c":"code","98c8c700":"code","3e83a47d":"code","871bc745":"code","1e30558e":"code","e6d74fa5":"code","231c4b60":"code","f753bf46":"code","f7c4fcbb":"code","afde1da4":"code","067ff4f9":"code","22b00b5e":"markdown","cc84966b":"markdown","d8842420":"markdown","63e80116":"markdown","4690cae9":"markdown","72bcc8ef":"markdown","e25bd6b1":"markdown","1c0d5d91":"markdown","718bf83a":"markdown","b9041569":"markdown","a4e9d9eb":"markdown","5d7ec7ec":"markdown","235f6d39":"markdown","98b6d870":"markdown"},"source":{"566f8521":"import pandas as pd\nimport numpy as np","e3968010":"df = pd.DataFrame(np.random.rand(3, 2))","a0a53a56":"df.head()","710c0842":"df = pd.Series(np.random.rand(3))","a5f18696":"df.head()","ea04a004":"df = pd.Series(np.random.rand(3), index=[\"First\", \"Second\", \"Third\"])","212df6c9":"df","9c996971":"df.index","d428eb87":"df_2d = pd.DataFrame(np.random.rand(3, 2))","72236f08":"df_2d","d2afb0f5":"df_2d.columns = [\"First\", \"Second\"]","8c393f7d":"df_2d","49ddb12f":"df_2d.rename(index={0:'zero', 1:'one', 2:'Two'}, inplace=True)","c65279db":"df_2d","0b5178c5":"df = pd.read_csv('..\/input\/artwork\/artwork_data.csv')","9fb42fec":"df.head() # 1st 5 rows","a2beb66f":"df.tail() # bottom to 5 rows","0c2f0e09":"df.shape","74c1a9a8":"df_5rows = pd.read_csv('..\/input\/artwork\/artwork_data.csv', nrows=5) # Selecting 1st 5 rows","6b070fc5":"df_5rows","28988103":"df_5rows_ind = pd.read_csv('..\/input\/artwork\/artwork_data.csv', nrows=5, index_col='id') # intialized index = id","144f474e":"df_5rows_ind","64b94904":"df_specific_col = pd.read_csv('..\/input\/artwork\/artwork_data.csv', nrows=5, usecols=['id', 'artist']) # all columns that we need","7a40f6a1":"df_specific_col","5af53e8d":"cols_to_use = ['id', 'artist', 'title', 'medium', 'year', 'acquisitionYear', 'height', 'width', 'units']","20cb3971":"df = pd.read_csv('..\/input\/artwork\/artwork_data.csv', usecols=cols_to_use, index_col = 'id')","eb1ecd10":"df.head()","51ec827e":"df.to_pickle('Selected_Col.pickle')","b0edd216":"import json","7aa63f4b":"records = [(\"Espresso\", \"5$\"),\n          (\"Flat White\", \"10$\")]","4eb3de43":"pd.DataFrame.from_records(records)","de2924ac":"pd.DataFrame.from_records(records, columns=[\"coffee\", \"Price\"])","3895de40":"key_to_use = ['id', 'all_artists', 'title', 'medium', 'dateText',\n             'acquisitionYear', 'height', 'width', 'units']","0b166c15":"def get_record_from_file(file_path, keys_to_use):\n    '''Process single json file and return a  tuple\n    containing specific fields.'''\n    with open(file_path) as artwork_file:\n        content = json.load(artwork_file)\n    \n    record = []\n    for field in keys_to_use:\n        record.append(content[field])\n    \n    return tuple(record)","7b076eb5":"# Single file processing function\nimport os\nsample_json = os.path.join('..\/input\/data12', 'a00102-1738.json')","7e20db99":"sample_record = get_record_from_file(sample_json, key_to_use)","8bada1fe":"sample_record","6da8da24":"def read_artworks_from_json(keys_to_use):\n    ''' Traverse the directories with JSON files.\n    For first file in each directory call function\n    for processing single file and go to the next\n    directory.\n    '''\n    json_root = os.path.join('dataa')\n    artworks = []\n    for root, _, files in os.walk(json_root):\n        for f in files:\n            if f.endswith('json'):\n                record = get_record_from_file(os.path.join(root, f), keys_to_use)\n                artworks.append(record)\n    \n    df = pd.DataFrame.from_records(artworks, columns=keys_to_use, index='id')\n    return df","41f21f54":"df = read_artworks_from_json(key_to_use)","5b27c21a":"df.head()","77f96a6e":"df = pd.read_pickle('Selected_Col.pickle')","c356494b":"artists = df['artist']\nx = pd.unique(artists)\nlen(x)","8557b379":"s = df['artist'] == 'Bacon, Francis'\ns.value_counts()","c6b04dc6":"df.loc[1035, 'artist']","00e97e46":"df.iloc[0, 0]","1eb00106":"df.iloc[0:, ]","d5fe9d16":"df.iloc[0:2, 0:2]","9f421b1d":"df['width'].sort_values().head()","80efc50d":"df['width'].sort_values().tail()","cb1d13a5":"# pd.to_numeric(df['width']) # Try to convert to numeric value\n# ---------------------------------------------------------------------------\n# ValueError                                Traceback (most recent call last)\n# pandas\/_libs\/src\/inference.pyx in pandas._libs.lib.maybe_convert_numeric()\n\n# ValueError: Unable to parse string \"(upper):\"\n\n# During handling of the above exception, another exception occurred:\n\n# ValueError                                Traceback (most recent call last)\n# <ipython-input-49-6faa34faa68a> in <module>()\n# ----> 1 pd.to_numeric(df['width']) # Try to convert to numeric value\n\n# \/opt\/anaconda3\/lib\/python3.6\/site-packages\/pandas\/core\/tools\/numeric.py in to_numeric(arg, errors, downcast)\n#     131             coerce_numeric = False if errors in ('ignore', 'raise') else True\n#     132             values = lib.maybe_convert_numeric(values, set(),\n# --> 133                                                coerce_numeric=coerce_numeric)\n#     134 \n#     135     except Exception:\n\n# pandas\/_libs\/src\/inference.pyx in pandas._libs.lib.maybe_convert_numeric()\n\n# ValueError: Unable to parse string \"(upper):\" at position 1839","633e2482":"pd.to_numeric(df['width'], errors='coerce')","765544e8":"df.loc[:, 'width'] = pd.to_numeric(df['width'], errors='coerece')","8ee97598":"df.loc[:, 'height'] = pd.to_numeric(df['height'], errors='coerece')","83674939":"df['height'] * df['width']","4bdc0627":"df['units'].value_counts()","7fff3466":"area = df['height'] * df['width']\ndf = df.assign(area=area)","fce62155":"df['area'].max()  # maximum value","a0a1d308":"df['area'].idxmax() # return index","8a891ced":"df.loc[df['area'].idxmax(), :]","9d221b27":"small_df = df.iloc[49980:50019, :].copy()","3c765596":"grouped = small_df.groupby('artist')","6f3afb7e":"type(grouped)","2a5e37a2":"for name, group_df in grouped:\n    print(name)\n    print(group_df)\n    break","3e74e8a1":"def fill_values(series):\n    values_counted = series.value_counts()\n    if values_counted.empty:\n        return series\n    most_freq = values_counted.index[0]\n    new_medium = series.fillna(most_freq)\n    return new_medium","88d25305":"def transform_df(source_df):\n    groups_df = []\n    for name, group_df in source_df.groupby('artist'):\n        filled_df = group_df.copy()\n        filled_df.loc[:, 'medium'] = fill_values(group_df['medium'])\n        groups_df.append(filled_df)\n    \n    new_df = pd.concat(groups_df)\n    return new_df","1272ae85":"filled_df = transform_df(small_df)","9685aa6c":"filled_df.head()","831280c1":"grouped_mediums = small_df.groupby('artist')['medium']\nsmall_df.loc[:, 'medium'] = grouped_mediums.transform(fill_values)","37cd358c":"df.groupby('artist').agg(np.min)","98c8c700":"df.groupby('artist').min()","3e83a47d":"grouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)","871bc745":"condition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)","1e30558e":"dup_titles_df.head()","e6d74fa5":"# Saving to excel file\nsmall_df.to_excel(\"basic.xlsx\")\nsmall_df.to_excel(\"no_index.xlsx\", index=False)\nsmall_df.to_excel(\"columns.xlsx\", columns=[\"artist\", \"title\", \"year\"])","231c4b60":"# Multiple worksheets\nwriter = pd.ExcelWriter('multiple_sheets.xlsx', engine='xlsxwriter')\nsmall_df.to_excel(writer, sheet_name=\"Preview\", index=False)\ndf.to_excel(writer, sheet_name='Complete', index=False)\nwriter.save()","f753bf46":"# SQL Format\nimport sqlite3\nwith sqlite3.connect('my_database.db') as conn:\n    small_df.to_sql('Tate', conn)","f7c4fcbb":"# Json Format\nsmall_df.to_json('default.json')\nsmall_df.to_json('table.json', orient='table')","afde1da4":"df = pd.read_pickle(os.path.join('Selected_Col.pickle'))","067ff4f9":"acquisition_years = df.groupby('acquisitionYear').size()\nacquisition_years.plot()","22b00b5e":"**Note**\n* **loc** by label\n* **iloc** by position\n<img src=\"https:\/\/i.ibb.co\/7g7yT1r\/Screenshot-2018-12-23-at-1-09-23-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/zHgCJ7J\/Screenshot-2018-12-23-at-1-09-44-PM.png\" >\n<img src=\"https:\/\/i.ibb.co\/ynD72y4\/Screenshot-2018-12-23-at-1-10-13-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/d5wnGZX\/Screenshot-2018-12-23-at-1-11-17-PM.png\">","cc84966b":"# Operations on groups","d8842420":"<img src=\"https:\/\/i.ibb.co\/ncY70mQ\/Screenshot-2018-12-23-at-2-45-33-PM.png\">","63e80116":"### Min","4690cae9":"### Filter","72bcc8ef":"## Reading from json\n<img src=\"https:\/\/i.ibb.co\/1sFdmX5\/Example-of-a-webform-application-JSON-data-object-as-submitted-by-a-user.png\">","e25bd6b1":"# Indexing and Filtering","1c0d5d91":"<img src=\"https:\/\/i1.wp.com\/www.datapluspeople.com\/wp-content\/uploads\/2018\/04\/pandas_logo-1080x675.jpg?resize=1080%2C675&ssl=1\">","718bf83a":"# Outputting Data","b9041569":"# Exploring Pandas Data Input Capabilities\n<img src=\"https:\/\/i.ibb.co\/nQqnDTW\/Screenshot-2018-12-23-at-10-36-44-AM.png\">\n<img src=\"https:\/\/i.ibb.co\/0DCYdx8\/Screenshot-2018-12-23-at-10-37-43-AM.png\">\n\n## Reading from csv\n<img src=\"https:\/\/i.ibb.co\/nQyPDyN\/csv-file.png\">","a4e9d9eb":"# Creating DataFrame\n<img src=\"https:\/\/i.ibb.co\/NrmN8RV\/Screenshot-2018-12-23-at-9-39-32-AM.png\">\n<img src=\"https:\/\/i.ibb.co\/pWTmFGw\/Screenshot-2018-12-23-at-9-42-26-AM.png\">\n<img src=\"https:\/\/i.ibb.co\/7ppNMLm\/Screenshot-2018-12-23-at-10-09-07-AM.png\">","5d7ec7ec":"# Plotting","235f6d39":"Excercise to practice [click here](https:\/\/www.kaggle.com\/vj1998\/excercise-to-get-started-with-pandas-for-beginners)","98b6d870":"## Built-Ins\n### Transform"}}