{"cell_type":{"6a1f4cdf":"code","f36c8c81":"code","05c7da2b":"code","166ca597":"code","6f0796ae":"code","62a7b432":"code","dce2ecb3":"code","bf215f22":"code","145d79e4":"code","66444a3e":"code","2d96dbcf":"code","58c36ce6":"code","c67bc3cb":"code","141e760a":"code","758ada15":"code","62432e3a":"code","2ff461ee":"code","a2e07c4d":"code","4ed957b3":"code","a0a85a77":"code","87b0262f":"code","0940765e":"code","e25ea6c4":"code","52c295a8":"markdown","4c4d62f2":"markdown","a0613a1c":"markdown","1f1cc10a":"markdown","5db9a542":"markdown","f3ffb562":"markdown","9f696dc8":"markdown","616e81dd":"markdown","41c5ed0a":"markdown","2a2fdce8":"markdown","ad43b6ca":"markdown","6e3e1c7d":"markdown","9c55bbb4":"markdown","290de242":"markdown","52109b3c":"markdown","322d75f5":"markdown","f0a26763":"markdown","45e5f4b3":"markdown","44459bf7":"markdown","def775ad":"markdown","03182a21":"markdown","f0d076f1":"markdown"},"source":{"6a1f4cdf":"import pandas as pd\nimport numpy as np\nimport math","f36c8c81":"df = pd.read_csv('\/kaggle\/input\/us-counties-covid-19-dataset\/us-counties.csv')\ndf.head()","05c7da2b":"df.shape","166ca597":"df.isna().sum()","6f0796ae":"df.describe()","62a7b432":"df['county'].value_counts()","dce2ecb3":"print(\"\"\"Dataset contains \\033[1m{}\\033[0m rows and \\033[1m{}\\033[0m columns. \\n\\\n\\033[1m{}\\033[0m missing values have been encountered in the \"fips\" column. \\n\\\nAlthough there are no missing values in the \"county\" column, \\033[1m{}\\033[0m records are containing an \"Unknown\" value.\n\"\"\".format(len(df.index), len(df.columns), df['fips'].isna().sum(), len(df[df.county == 'Unknown'])))","bf215f22":"df_st_codes = pd.read_csv('..\/input\/usstatescodes\/us-states-codes.csv', sep=';')","145d79e4":"\"\"\"\nFor each row of the original dataset('df'), finding the matching state value within the 'df_st_codes' dataset\nand recovering its associated code. A new column in the original dataset is created to store those postal codes.\n\"\"\"\ndf['code'] = (df.state.apply(lambda x: df_st_codes.query('@x in state').index.values)\n                         .apply(lambda x: x[0] if len(x) else \"NaN\")).apply(lambda x: df_st_codes.code[x] if x != \"NaN\" else x)","66444a3e":"\"\"\" \nExample showing same county name in different states\nIt results that the states of New York, Pennsylvania and West Virginia have a county named Wyoming.\n\"\"\"\ndupl_test= df[df.county == 'Wyoming']\ndupl_test.state.unique()","2d96dbcf":"\"\"\"\nCreating a bew feature combining the name of each county present in the dataset with its respective state code\n\"\"\"\ndf['agg_county_code'] = df['county'] + ', ' + df['code']","58c36ce6":"df = df.sort_values(by=['state', 'county', 'date'], ascending=True)","c67bc3cb":"unique_agg = list(df['agg_county_code'].unique())\nnew_cases_list = []\nnew_deaths_list = []\n\nfor agg in unique_agg:\n    df_filtered = df[df['agg_county_code'] == agg]\n    cases_list = list(df_filtered.iloc[:, 4])\n    deaths_list = list(df_filtered.iloc[:, 5])\n    for j in range(0, len(cases_list)):\n        if j == 0:\n            new_cases_list.append(cases_list[0])\n            new_deaths_list.append(deaths_list[0])\n        else:\n            new_cases_list.append(cases_list[j] - cases_list[j-1])\n            new_deaths_list.append(deaths_list[j] - deaths_list[j-1])\n    \nnew_cases_s = pd.Series(new_cases_list)\nnew_deaths_s = pd.Series(new_deaths_list)\n\ndf['new_cases'] = new_cases_list\ndf['new_deaths'] = new_deaths_list","141e760a":"df.head(20)","758ada15":"import plotly.graph_objects as go\n\ndf = df.sort_values('date')\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df['date'].unique(), \n                         y=df.groupby('date')['cases'].sum(), fill='tozeroy', name=\"Cases\")) # fill down to xaxis\nfig.add_trace(go.Scatter(x=df['date'].unique(), \n                         y=df.groupby('date')['deaths'].sum(), fill='tozeroy', name=\"Deaths\")) # fill down to xaxis\nfig.update_layout(\n    annotations=[\n        dict(\n            x=0.5,\n            y=-0.15,\n            showarrow=False,\n            text=\"Day\",\n            xref=\"paper\",\n            yref=\"paper\"\n        ),\n        dict(\n            x=-0.07,\n            y=0.5,\n            showarrow=False,\n            text=\"Cases\/Deaths Recorded\",\n            textangle=-90,\n            xref=\"paper\",\n            yref=\"paper\"\n        )\n    ],\n    title_text=\"Daily Cumulative Cases\/Deaths Recorded\"\n)\n\nfig.show()\n\nfig2 = go.Figure()\nfig2.add_trace(go.Scatter(x=df['date'].unique(), \n                         y=df.groupby('date')['new_cases'].sum(), fill='tozeroy', name=\"New Cases\")) # fill down to xaxis\nfig2.add_trace(go.Scatter(x=df['date'].unique(), \n                         y=df.groupby('date')['new_deaths'].sum(), fill='tozeroy', name=\"New Deaths\")) # fill down to xaxis\nfig2.update_layout(\n    annotations=[\n        dict(\n            x=0.5,\n            y=-0.15,\n            showarrow=False,\n            text=\"Day\",\n            xref=\"paper\",\n            yref=\"paper\"\n        ),\n        dict(\n            x=-0.07,\n            y=0.5,\n            showarrow=False,\n            text=\"New cases\/New Deaths Recorded\",\n            textangle=-90,\n            xref=\"paper\",\n            yref=\"paper\"\n        )\n    ],\n    title_text=\"Daily New Cases\/New Deaths Recorded\"\n)\n\nfig2.show()","62432e3a":"print('''Unfortunately, we can easily notice an increase in the number of new cases recorded since \\033[1mmid-June 2020\\033[0m. \\n\\\nThe highest number of new cases (for now) has been recorded on \\033[1m{}\\033[0m (with almost \\033[1m{}\\033[0m new cases in one day). \\n\\\nAs of today, there were almost \\033[1m{}\\033[0m cases and more than \\033[1m{}k\\033[0m deaths.''' \n      .format(df.groupby('new_cases')['date'].sum().max(), round(df.groupby('date')['new_cases'].sum().max(), -4), \\\n              round(df.groupby('date')['cases'].sum().max(), -5), str(df.groupby('date')['deaths'].sum().max())[:3]))\n","2ff461ee":"import plotly.graph_objects as go\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\ndf_last_record = df[df['date'] == df['date'].max()]\n\ndf_last_record = df_last_record.sort_values('state', ascending=True)\n\nfig = go.Figure(data=go.Choropleth(\n    locations=df_last_record['code'].unique(), # Spatial coordinates\n    z = df_last_record.groupby(\"state\")[\"cases\"].sum(), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Reds',\n    text = df_last_record['state'].unique(),\n    colorbar_title = \"Millions USD\",\n))\n\nfig.update_layout(\n    title_text = df_last_record.iloc[0,0] + ' : ' + 'Cases Count by State since first record',\n    geo = dict(\n        scope='usa',\n        projection=go.layout.geo.Projection(type = 'albers usa'),\n        showlakes=True, # lakes\n        lakecolor='rgb(255, 255, 255)'),\n)\n\nfig.show()\n\ndf_last_record['text_graph_2'] = 'County: ' + df_last_record['agg_county_code'] + '<br>' + \\\n                'Death Rate: ' + round(((df_last_record['deaths'] \/ df_last_record['cases']) * 100), 2).astype(str) + '%' + '<br>' + \\\n                'Cases number: ' + df_last_record['cases'].astype(str) + '<br>' + \\\n                'Deaths number: ' + df_last_record['deaths'].astype(str) + '<br>' + \\\n                'fips: ' + df_last_record['fips'].astype(str)\n\nfig_2 = go.Figure(go.Choroplethmapbox(geojson=counties, locations=df_last_record['fips'], z=(df_last_record['deaths'] \/ df_last_record['cases']) * 100,\n                                    colorscale='YlOrRd', zmin=0, zmax=8, hoverinfo='text', text=df_last_record['text_graph_2'],\n                                    marker_opacity=0.5, marker_line_width=0.2))\nfig_2.update_layout(mapbox_style=\"carto-positron\",\n                    mapbox_zoom=2.8, \n                    mapbox_center = {\"lat\": 41.0902, \"lon\": -97.7129},\n                    title_text = df_last_record.iloc[0,0] + ' : ' + 'Death Rate due to Coronavirus since first record'\n                   )\n\n#fig_2.show()","a2e07c4d":"from IPython.core.display import HTML","4ed957b3":"# Bar Chart Race 1: Reshaping our dataset to fit with Flourish structure requirements.\n\ndf_an_chart1 = df.groupby(\n   ['date', 'state']\n).agg(\n    {\n         'cases':sum\n    }\n)\n\ndf_an_chart1 = df_an_chart1.reset_index()\ndf_an_chart1 = df_an_chart1.pivot(index='state', columns='date', values='cases')\ndf_an_chart1 = df_an_chart1.fillna(0)\n#df_an_chart1.to_csv('df_pivot_1.csv', header=True)\ndf_an_chart1.head(20)","a0a85a77":"HTML(\"<iframe src='https:\/\/flo.uri.sh\/visualisation\/3052538\/embed' frameborder='0' scrolling='no' style='width:100%;height:600px;'><\/iframe><div style='width:100%!;margin-top:4px!important;text-align:right!important;'><a class='flourish-credit' href='https:\/\/public.flourish.studio\/visualisation\/3052538\/?utm_source=embed&utm_campaign=visualisation\/3052538' target='_top' style='text-decoration:none!important'><img alt='Made with Flourish' src='https:\/\/public.flourish.studio\/resources\/made_with_flourish.svg' style='width:105px!important;height:16px!important;border:none!important;margin:0!important;'> <\/a><\/div>\")","87b0262f":"# Bar Chart Race 2: Reshaping our dataset to fit with Flourish structure requirements.\n\ndf_an_chart2 = df.pivot(index='agg_county_code', columns='date', values='cases')\ndf_an_chart2 = df_an_chart2.fillna(0)\n#df_an_chart2.to_csv('df_pivot_2.csv', header=True)\ndf_an_chart2.head(20)","0940765e":"HTML(\"<iframe src='https:\/\/flo.uri.sh\/visualisation\/3018715\/embed' frameborder='0' scrolling='no' style='width:100%;height:600px;'><\/iframe><div style='width:100%!;margin-top:4px!important;text-align:right!important;'><a class='flourish-credit' href='https:\/\/public.flourish.studio\/visualisation\/3018715\/?utm_source=embed&utm_campaign=visualisation\/3018715' target='_top' style='text-decoration:none!important'><img alt='Made with Flourish' src='https:\/\/public.flourish.studio\/resources\/made_with_flourish.svg' style='width:105px!important;height:16px!important;border:none!important;margin:0!important;'> <\/a><\/div>\")","e25ea6c4":"import plotly.express as px\n\ndf_mi_counties = df_last_record.nlargest(50, 'cases')\nlist_mi_counties = list(df_mi_counties.iloc[:, 1])\nlist_associated_states = list(df_mi_counties.iloc[:, 2])\n\nstart_date = '2020-04-01'\nend_date = df['date'].max()\ndf_mi_counties = df[df['county'].isin(list_mi_counties) & df['state'].isin(list_associated_states)]\nmask = (df_mi_counties['date'] >= start_date) & (df_mi_counties['date'] <= end_date)\ndf_mi_counties = df_mi_counties[mask]\ndf_mi_counties = df_mi_counties[~df_mi_counties['county'].isin(['New York City', 'Unknown'])]\ndf_mi_counties\n\npx.scatter(df_mi_counties, x=df_mi_counties['cases'], y=df_mi_counties['deaths'], animation_frame=df_mi_counties['date'], animation_group=df_mi_counties['county'],\n           size=round((df_mi_counties['deaths'] \/ df_mi_counties['cases']), 3) * 100, color='state', hover_name=df_mi_counties['county'],\n           log_x=False, size_max = 40, range_x=[0,df_mi_counties['cases'].max()], range_y=[0,df_mi_counties['deaths'].max()],\n           title='50 Most Impacted Counties since ' + start_date + ': Death Rate Evolution')","52c295a8":"# Next Steps <a class=\"anchor\" id=\"eighth-bullet\"><\/a> ","4c4d62f2":"From now on, here is what the dataset looks like:","a0613a1c":"![street_art_covid_19](https:\/\/drive.google.com\/uc?id=1mR6lkYcjxfpJMc_SeffFaXLKoOJUf8Xm) <br \/>\n*A coronavirus street art piece by artist **Pony Wave** on Venice Beach in Los Angeles showing a couple kissing with face masks.*","1f1cc10a":"---","5db9a542":"**Aside note :**\n* New York City, as well as 'Unknown' counties have been removed from the third animated graph in order to keep it relevant\n* Bubble sizes correspond to death rate","f3ffb562":"# Visualizations <a class=\"anchor\" id=\"fourth-bullet\"><\/a>","9f696dc8":"For some of the coming visualizations, we built Bar Charts Race with [Flourish Studio](https:\/\/flourish.studio\/). These are really useful when trying to visualize evolutions and rankings on different dimensions.","616e81dd":"# Table of Content:\n* [Preparation for Visualization](#first-bullet) :\n    * [Dataset Exploration](#second-bullet)\n    * [Data Preprocessing and Feature Engineering](#third-bullet)\n* [Visualilizations](#fourth-bullet) : \n    * [Covid-19 pandemic evolution since first record](#fifth-bullet)\n    * [US Interactive mapping](#sixth-bullet)\n    * [Animated Visualizations](#seventh-bullet)\n* [Next Steps](#eighth-bullet) : ","41c5ed0a":"* 3) Day-to-day new cases and new deaths registered <br \/>\nEach row of the original dataset reports day-to-day cumulative counts per county. In the following operation, we are creating two new features (new_cases, new_deaths). New cases is substracting the results of day *n* for each county with day *n-1*. Same for new deaths. It results that we will get both new cases and new deaths recorded, each day, per county.","2a2fdce8":"* ## Animated Visualizations <a class=\"anchor\" id=\"seventh-bullet\"><\/a>","ad43b6ca":"* ## **Covid-19 pandemic evolution since first record <a class=\"anchor\" id=\"fifth-bullet\"><\/a>**","6e3e1c7d":"Creating, combining and modifying features of the dataset will help us to plot some graphs.\n\n* 1)  State Postal Code feature creation <br\/>New dataset: each state with its respective postal code","9c55bbb4":"# Covid-19 in the US : Analysis, Interactive Plotting and Visualization\n### Upvotes would be highly appreciated\n","290de242":"---","52109b3c":"* 2) Combining counties and codes into a new feature <br \/>\nWe noticed that counties from different states have the same name. In order to facilitate our work in the coming steps, <br \/> let's create a new feature gathering the name of each county present in the dataset with its respective state code.","322d75f5":"* ## US Interactive Mapping <a class=\"anchor\" id=\"sixth-bullet\"><\/a>","f0a26763":"* ## **Data Preprocessing and Feature Engineering <a class=\"anchor\" id=\"third-bullet\"><\/a>**","45e5f4b3":"**Aside note :**\n* On map 2, fips county code have not been reviewed. Some may differ from GeoJSON (which is used to display the data), some are missing.\n* Some county names from the original dataset differ from GeoJSON county names.\n\nFor these reasons mentioned above, some counties are not displayed on map 2.","44459bf7":"Note that most of the visualizations are interactive. Hover over to see more information.","def775ad":"* ## Dataset Exploration <a class=\"anchor\" id=\"second-bullet\"><\/a>","03182a21":"This is version 1 of this kernel. Further analyses and visualizations will complete this study. <br \/>Many thanks for having read it. Hope you found it useful.","f0d076f1":"# Preparation for Visualization <a class=\"anchor\" id=\"first-bullet\"><\/a>"}}