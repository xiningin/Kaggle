{"cell_type":{"2f049f87":"code","15ba3e39":"code","403de2bb":"code","7c9fb508":"code","7b5b9215":"code","beb024a8":"code","c93bba1a":"code","0b07f3b4":"code","9e700d55":"code","a92021ca":"code","71910f17":"code","30912f20":"code","856a0d3d":"code","ca24a9d8":"code","3fd607f1":"code","750d3469":"code","fc1c7e14":"code","f86e8877":"code","c6838ff6":"code","6bb68e83":"code","541a78e0":"code","e403a95e":"code","519bcc80":"code","746472f1":"code","71460a0b":"code","3377b88a":"code","fb2cecf8":"code","07f23f19":"code","73d97cce":"code","75e65a20":"code","15159fe0":"code","9b56f522":"code","58989dee":"markdown","d4e38080":"markdown","865e2549":"markdown","c5d5bdcc":"markdown","24e3a8a1":"markdown","11863486":"markdown","747af9c9":"markdown","316b1dfd":"markdown","043c18ff":"markdown","551d9db4":"markdown","06c8cbfa":"markdown","d79c6683":"markdown","653d4cd2":"markdown","81ed8dfa":"markdown","a90827df":"markdown","8e010441":"markdown","6d37a96e":"markdown","951f7f00":"markdown","35deba8f":"markdown","9c35b060":"markdown","872fcc34":"markdown","38f79c91":"markdown","13a913ce":"markdown","f6372351":"markdown","395d9f6a":"markdown","86a2372a":"markdown"},"source":{"2f049f87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15ba3e39":"import pandas as pd\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom datetime import datetime\nimport plotly.graph_objects as go\n%matplotlib inline\n\ntrain_df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")\ntrain_df.head()\n\n","403de2bb":"\ntrain_df.drop('County',axis=1,inplace=True)\ntrain_df.drop('Province_State',axis=1,inplace=True)\ntrain_df.set_index('Id',inplace=True)\ntrain_df.info()","7c9fb508":"#GETTING TOP 15 INFECTED COUNTRIES(CONFIRMED CASES)\n\ndf1=train_df[train_df['Target']=='ConfirmedCases']\n\ntrain_max_confirmed=pd.DataFrame()\ntrain_max_confirmed['Confirmed_cases']  = df1.groupby('Country_Region')['TargetValue'].max().sort_values(ascending=False)\nplot_confirmed= train_max_confirmed.head(15)\n\n\nplt.style.use(\"fivethirtyeight\")\nfig,ax= plt.subplots(figsize=(10,7))\nax.bar(plot_confirmed.index, plot_confirmed['Confirmed_cases'],color='r',label='Confirmed cases',width=0.8,alpha=0.7)\nax.set_xticklabels(train_max_confirmed.index,rotation=80,color='black')\nax.set_ylabel('Confirmed cases')\nax.set_title('Top 15 Infected countries chart')\nplt.show()","7b5b9215":"df2=train_df[train_df['Target']!='ConfirmedCases']\ntrain_max_deaths=pd.DataFrame()\ntrain_max_deaths['Fatalities']  = df2.groupby('Country_Region')['TargetValue'].max().sort_values(ascending=False)\n\nplot_confirmed1= train_max_deaths.head(15)\nplt.style.use(\"fivethirtyeight\")\nfig,ax= plt.subplots(figsize=(10,7))\nax.bar(plot_confirmed1.index, plot_confirmed1['Fatalities'],color='m',label='Deaths',width=0.8,alpha=0.7)\nax.set_xticklabels(plot_confirmed1.index,rotation=80,color='black')\nax.set_ylabel('Number of deaths')\nax.set_title('Top 15 countries with maximum fatalities')\nplt.show()","beb024a8":"fig = px.pie(df1, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","c93bba1a":"fig = px.pie(df2, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","0b07f3b4":"plot_confirmed1.sort_values(by='Fatalities',inplace=True)\nfig = px.bar(plot_confirmed1,\n             x=plot_confirmed1['Fatalities'], y=plot_confirmed1.index,\n             title='Mortality rate HIGH: top 15 countries' , text='Fatalities', height=750, orientation='h')\nfig.show()","9e700d55":"df1.set_index('Date',inplace=True)\ndf2.set_index('Date',inplace=True)\ndf3=pd.concat([df1,df2],axis=1,ignore_index=True)\ndf3.drop([3,5,6,7,8],inplace=True,axis=1)\ndf3.rename(columns={0:'Country_Region',1:'Population',2:'Weight',4:'Confirmed',9:'Fatalities'},inplace=True)\ndf3.columns","a92021ca":"#ANALYSING TRENDS IN INDIA\ndf_india = df3[df3['Country_Region'] == \"India\"].reset_index()\nfinal_india = df_india.groupby('Date')['Date','Population','Weight','Confirmed','Fatalities'].sum().reset_index()\nfrom plotly.subplots import make_subplots\nfigure = make_subplots(rows = 1, cols = 2, subplot_titles = (\"Confirmed\",\"Fatalities\"))\n\na1 = go.Scatter(x=final_india['Date'],y=final_india['Confirmed'], name = \"Confirmed\", line_color = 'red', mode = 'lines+markers')\na2 = go.Scatter(x=final_india['Date'],y=final_india['Fatalities'], name = \"Deaths\", line_color = 'blue', mode = 'lines+markers')\n\nfigure.append_trace(a1, 1, 1)\nfigure.append_trace(a2, 1, 2)\n\n\nfigure.update_layout(template=\"plotly\",title_text = ' Spread of Corona Virus over time in India')\nfigure.show()","71910f17":"#ANALYSING TRENDS IN US\ndf_US = df3[df3['Country_Region'] == \"US\"].reset_index()\nfinal_US = df_US.groupby('Date')['Date','Population','Weight','Confirmed','Fatalities'].sum().reset_index()\nfigure = make_subplots(rows = 1, cols = 2, subplot_titles = (\"Confirmed\",\"Fatalities\"))\n\na1 = go.Scatter(x=final_US['Date'],y=final_US['Confirmed'], name = \"Confirmed\", line_color = 'firebrick', mode = 'lines+markers')\na2 = go.Scatter(x=final_US['Date'],y=final_US['Fatalities'], name = \"Deaths\", line_color = 'green', mode = 'lines+markers')\n\nfigure.append_trace(a1, 1, 1)\nfigure.append_trace(a2, 1, 2)\n\n\nfigure.update_layout(template=\"plotly\",title_text = ' Spread of Corona Virus over time in US')\nfigure.show()","30912f20":"#ANALYSING TRENDS IN CHINA\ndf_China = df3[df3['Country_Region'] == \"China\"].reset_index()\nfinal_China = df_China.groupby('Date')['Date','Population','Weight','Confirmed','Fatalities'].sum().reset_index()\nfigure = make_subplots(rows = 1, cols = 2, subplot_titles = (\"Confirmed\",\"Fatalities\"))\n\na1 = go.Scatter(x=final_China['Date'],y=final_China['Confirmed'], name = \"Confirmed\", line_color = 'royalblue', mode = 'lines+markers')\na2 = go.Scatter(x=final_China['Date'],y=final_China['Fatalities'], name = \"Deaths\", line_color = 'orange', mode = 'lines+markers')\n\nfigure.append_trace(a1, 1, 1)\nfigure.append_trace(a2, 1, 2)\n\n\nfigure.update_layout(template=\"plotly\",title_text = ' Spread of Corona Virus over time in China')\nfigure.show()","856a0d3d":"#ANALYSING TRENDS IN FRANCE\ndf_France = df3[df3['Country_Region'] == \"France\"].reset_index()\nfinal_France = df_France.groupby('Date')['Date','Population','Weight','Confirmed','Fatalities'].sum().reset_index()\nfigure = make_subplots(rows = 1, cols = 2, subplot_titles = (\"Confirmed\",\"Fatalities\"))\n\na1 = go.Scatter(x=final_France['Date'],y=final_France['Confirmed'], name = \"Confirmed\", line_color = '#e377c2', mode = 'lines+markers')\na2 = go.Scatter(x=final_France['Date'],y=final_France['Fatalities'], name = \"Deaths\", line_color = '#8c564b', mode = 'lines+markers')\n\nfigure.append_trace(a1, 1, 1)\nfigure.append_trace(a2, 1, 2)\n\n\nfigure.update_layout(template=\"plotly\",title_text = ' Spread of Corona Virus over time in France')\nfigure.show()","ca24a9d8":"#ANALYSING TRENDS IN ITALY\ndf_Italy = df3[df3['Country_Region'] == \"Italy\"].reset_index()\nfinal_Italy = df_Italy.groupby('Date')['Date','Population','Weight','Confirmed','Fatalities'].sum().reset_index()\nfigure = make_subplots(rows = 1, cols = 2, subplot_titles = (\"Confirmed\",\"Fatalities\"))\n\na1 = go.Scatter(x=final_Italy['Date'],y=final_Italy['Confirmed'], name = \"Confirmed\", line_color = '#17becf', mode = 'lines+markers')\na2 = go.Scatter(x=final_Italy['Date'],y=final_Italy['Fatalities'], name = \"Deaths\", line_color = '#2ca02c', mode = 'lines+markers')\n\nfigure.append_trace(a1, 1, 1)\nfigure.append_trace(a2, 1, 2)\n\n\nfigure.update_layout(template=\"plotly\",title_text = ' Spread of Corona Virus over time in Italy')\nfigure.show()","3fd607f1":"import seaborn as sns\ndf3_grouped=df3.groupby(['Country_Region']).sum()\ndf3_grouped.Confirmed\ntot_conf= df3_grouped.nlargest(10,'Confirmed')\ntot_deaths=df3_grouped.nlargest(10,'Fatalities')\n\nfig,ax = plt.subplots(figsize=(15,8))\nsns.barplot(y=\"Population\", x=\"Confirmed\", data=tot_conf,ax=ax)\nplt.title(' top 10 population VS Confirmed Cases',size=25)\nplt.show()","750d3469":"fig,ax = plt.subplots(figsize=(15,8))\nsns.barplot(y=\"Population\", x=\"Fatalities\", data=tot_conf,ax=ax)\nplt.title('top 10  population VS Fatalities',size=25)\nplt.show()","fc1c7e14":"fig = px.treemap(df3, path=['Country_Region'], values='Confirmed',\n                  color='Population', hover_data=['Country_Region'],\n                  color_continuous_scale='Inferno')\nfig.show()","f86e8877":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n#LabelEncoder can be used to normalize labels.\n#fit_trainsform - Fit label encoder and return encoded labels\ntrain_df['Target_numerical'] = le.fit_transform(train_df['Target'])\ntrain_df['Country_numerical']= le.fit_transform(train_df['Country_Region'])\n\n\ntrain_df['Date'] = pd.to_datetime(train_df['Date'])\n\n\ntrain_df['Dayofweek'] = train_df['Date'].dt.dayofweek\ntrain_df['Day'] = train_df['Date'].dt.day\ntrain_df['Month'] = train_df['Date'].dt.month\ntrain_df.head()","c6838ff6":"\n\ntest_df.drop(['Province_State','County'],axis=1,inplace=True)\ntest_df['Target_numerical'] = le.fit_transform(test_df['Target'])\ntest_df['Country_numerical']= le.fit_transform(test_df['Country_Region'])\n\n\ntest_df['Date'] = pd.to_datetime(test_df['Date'])\n\n\ntest_df['Dayofweek'] = test_df['Date'].dt.dayofweek\ntest_df['Day'] = test_df['Date'].dt.day\ntest_df['Month'] = test_df['Date'].dt.month\ntest_df.head()","6bb68e83":"test_df.set_index('ForecastId',inplace=True)","541a78e0":"plt.title(\"Heatmap Correlation of the variables in COVID19 Dataset\", fontsize = 15)\nsns.heatmap(train_df.corr(), annot=True, fmt=\".2f\",cmap='YlGnBu',linewidths=0.40)\nplt.show()","e403a95e":"#TRAIN TEST SPLIT \nfrom sklearn.model_selection import train_test_split\n\n#Selecting feature columns\ncol_feat = ['Population', 'Weight','Target_numerical', 'Country_numerical', 'Dayofweek','Day', 'Month']\nX = train_df[col_feat] # Features\ny = train_df['TargetValue'] # Target variable\n \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=42)","519bcc80":"#CHECKING THE SHAPE\nprint('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:',   y_train.shape)\nprint('Testing Features Shape:',  X_test.shape)\nprint('Testing Labels Shape:',    y_test.shape)","746472f1":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 50 decision trees\nmodel = RandomForestRegressor(n_estimators = 50, random_state = 42)\n# Train the model on training data\nmodel.fit(X_train, y_train)","71460a0b":"y_predicted= model.predict(X_test)\nmodel.score(X_test,y_test)","3377b88a":"fig, ax = plt.subplots()\n\nax.scatter(y_test, y_predicted, edgecolors=(0, 0, 0))\n\nax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=4)\n\nax.set_xlabel('Actual')\n\nax.set_ylabel('Predicted')\n\nax.set_title(\"Visualising goodness of fit\")\n\nplt.show()","fb2cecf8":"#WORKING WITH TEST DATASET\ntest_col = ['Population', 'Weight','Target_numerical', 'Country_numerical', 'Dayofweek','Day', 'Month']\ntest_data = test_df[test_col]\ntest_df.head()","07f23f19":"# predictions\ny_predicted1 = model.predict(test_data)\ny_predicted1","73d97cce":"#Creating a dataframe with iD and Predicted list\noutput_df=pd.DataFrame({'id':test_df.index,'TargetValue':y_predicted1})\noutput_df","75e65a20":"\nq1=output_df.groupby(['id'])['TargetValue'].quantile(q=0.05).reset_index()\nq2=output_df.groupby(['id'])['TargetValue'].quantile(q=0.5).reset_index()\nq3=output_df.groupby(['id'])['TargetValue'].quantile(q=0.95).reset_index()","15159fe0":"q1.columns=['id','q0.05']\nq2.columns=['id','q0.5']\nq3.columns=['id','q0.95']\nq=pd.concat([q1,q2['q0.5'],q3['q0.95']],1)\nq['q0.05']=q['q0.05']\nq['q0.5']=q['q0.5']\nq['q0.95']=q['q0.95']\nq","9b56f522":"submission_df=pd.melt(q, id_vars=['id'], value_vars=['q0.05','q0.5','q0.95'])\nsubmission_df['variable']=submission_df['variable'].str.replace(\"q\",\"\", regex=False)\nsubmission_df['ForecastId_Quantile']=submission_df['id'].astype(str)+'_'+submission_df['variable']\nsubmission_df['TargetValue']=submission_df['value']\nsub_df=submission_df[['ForecastId_Quantile','TargetValue']]\nsub_df.reset_index(drop=True,inplace=True)\nsub_df.to_csv(\"submission.csv\",index=False)\nsub_df.head()","58989dee":"Another plot to display mortality rate of top 15 countries","d4e38080":"# IN THE NEXT SECTION WE WILL SEE THE RELATION BETWEEN THE POPULATION OF THE COUNTRIES AND THEIR CONFIRMED CASES> ","865e2549":"**NEXT WE WILL PLOT THE TOP 15 COUNTRIES WITH MOST NUMBER OF CONFIRMED CASES**","c5d5bdcc":"We will now visualise our fit","24e3a8a1":"**PLOTTING THE TOP 15 COUNTRIES WITH MAXIMUM FATALITIES**","11863486":"THANKS TO THE OTHER KERNELS I HAVE TAKEN HELP FROM THEM TO GET THE OUTPUT IN THE CORRECT FORMAT ","747af9c9":"Using Plotly to obtain percentage of fatalities country-wise","316b1dfd":"Performing the same process on the testing set","043c18ff":"LETS FIND HOW OUR COLUMNS ARE RELATED TO OUR TARGET VALUES OF CONFIRMED AND FATALITIES ","551d9db4":"PREDICTING ON THE TESTING DATA","06c8cbfa":"Italy","d79c6683":"Dropping columns with too many null values and setting index \n","653d4cd2":"PERFORMING TRAIN TEST SPLIT FOR OUR MODEL\nWE WILL BE USING RandomForestRegressor","81ed8dfa":"VISUALIZING TREEMAPS TO GET A BETTER IDEA OF THE RELATION","a90827df":"CHECKING CORRELATION BETWEEN DIFFERENT COLUMNS NOW USING HEATMAP ","8e010441":"Preprocessing the dataset","6d37a96e":"**The next piece of code is related to some data manipulation which will result in two separate columns for confirmed cases and fatalities for each date. I was getting an error using pivot hence I had to use this method to generate separate columns **","951f7f00":"Using Plotly to obtain percentage of confirmed cases country-wise","35deba8f":"NEXT WE WILL USE OUR TRAINED MODEL TO PREDICT ON THE TESTING SPLIT","9c35b060":"France","872fcc34":"**NEXT WE WILL ANALYSE THE TREND OF CASES AND DEATHS COUNTRY WISE(India,US,China,Italy and France)","38f79c91":"FOR INDIA","13a913ce":"China","f6372351":"IMPORTING REQUIRED LIBRARIES AND READING OUR TRAINING AND TESTING DATASETS","395d9f6a":"US","86a2372a":"# IN THE NEXT SECTION WE WILL GO AHEAD WITH MODELLING AND PREDICTION******"}}