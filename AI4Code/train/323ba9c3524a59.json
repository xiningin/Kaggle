{"cell_type":{"2f865f40":"code","b8023cad":"code","94e3f0db":"code","ac11e1a5":"code","2c1cf600":"code","6152a678":"code","87390cfe":"code","ab88360c":"code","12a1b2cc":"code","2ce700f6":"code","be4283e0":"code","dce93a9d":"code","89a393bb":"code","f5651b35":"code","a539b3d4":"code","0c081487":"code","db3606a4":"code","ebc4e41c":"code","f652828a":"code","85be307a":"code","b76fb447":"markdown","70a0e8bc":"markdown","2c73acd4":"markdown","b00adbbb":"markdown","f89e82e3":"markdown","51bc27bd":"markdown","fe784bbd":"markdown","b2b234ec":"markdown","b8389e8c":"markdown","73270d40":"markdown","27891f0c":"markdown","e5be09a4":"markdown","19e9c936":"markdown","44673d33":"markdown","6406fa09":"markdown","fa05a0a2":"markdown","2f9c03ac":"markdown"},"source":{"2f865f40":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom bq_helper import BigQueryHelper\n\nimport warnings\nwarnings.filterwarnings('ignore')","b8023cad":"# Input parameters\nstation_name = 'BANGKOK METROPOLIS'\nyears = range(2009, 2019)","94e3f0db":"helper = BigQueryHelper('bigquery-public-data', 'noaa_gsod')\n\nsql = '''\nSELECT\n  year, mo, da, temp, min, max, prcp\nFROM\n    `bigquery-public-data.noaa_gsod.gsod{}` a\n    INNER JOIN `bigquery-public-data.noaa_gsod.stations` b ON a.stn = b.usaf\nWHERE\n  country = 'TH' AND name = '{}'\n'''\n\n# Query weather data for each year\ndatasets = [ helper.query_to_pandas(sql.format(i, station_name)) for i in years ]\n\n# print out each year's data shape\nprint('\\n'.join([ '{}: {}'.format(x[0],x[1].shape) for x in zip(years, datasets)]))","ac11e1a5":"# Concatenate datasets\nweather = pd.concat(datasets)\n\n# Handling missing values based on Table Schema description\nweather['temp'] = weather['temp'].replace({ 9999.9 : np.nan })\nweather['min'] = weather['min'].replace({ 9999.9 : np.nan })\nweather['max'] = weather['max'].replace({ 9999.9 : np.nan })\nweather['prcp'] = weather['prcp'].replace( { 99.99 : 0 })\n\nweather.info()","2c1cf600":"# Data processing\n\n# Setting date index\nweather['date'] = weather.apply(lambda x: \n                                datetime.datetime(int(x.year), int(x.mo), int(x.da)), \n                                axis=1)\nweather = weather.set_index('date')\n\n# Convert temperature values from farenheit to celcius\ndef f_to_c(temp_f):\n    temp_c = (temp_f - 32) * 5\/9\n    return round(temp_c, 2)\n\nfor col in ['temp','min','max']:\n    weather[col] = weather[col].apply(f_to_c)\n\n# Convert precipitation from inches to milimeters\ndef inch_to_mm(x):\n    return round(x * 25.4)\n\nweather['prcp'] = weather['prcp'].apply(inch_to_mm)","6152a678":"start_date = '{}0101'.format(years[0])\nend_date = weather.index.max().strftime('%Y%m%d')\n\n# Re-index to see if there are any days with missing data\nweather = weather.reindex(pd.date_range(start_date, end_date))\n\n# check if there is missing values occured from re-indexing\nmissing = weather[weather.isnull().any(axis=1)].index\n# printing missing index\nmissing","87390cfe":"# Interpolate numerical variables for the missing days\nweather = weather.interpolate()\n\n# Re-setting year, month, day fields\nweather['year'] = weather.index.year\nweather['mo'] = weather.index.month\nweather['da'] = weather.index.day\n\n# Verify interpolated data\nweather.loc[missing].head(10)","ab88360c":"weather[['temp','min','max','prcp']].describe()","12a1b2cc":"data = weather[['temp','min','max','prcp']]\ndata.reset_index(inplace=True)\ndata.columns = ['Date','Avg Temp', 'Min Temp', 'Max Temp', 'Precip']","2ce700f6":"rank = data.sort_values('Min Temp').head(10).reset_index(drop=True)\nrank.index = rank.index + 1\nrank","be4283e0":"rank = data.sort_values('Max Temp', ascending=False).head(10).reset_index(drop=True)\nrank.index = rank.index + 1\nrank","dce93a9d":"rank = data.sort_values('Precip', ascending=False).head(10).reset_index(drop=True)\nrank.index = rank.index + 1\nrank","89a393bb":"plt.style.use('bmh')\nweather[['max','temp','min','prcp']].plot(subplots=True, figsize=(18,12));","f5651b35":"# melt to display\ndata = pd.melt(weather, 'year', ['temp','min','max'], \n               var_name='variable', value_name='degree')\n\nplt.subplots(figsize=(15,8))\n\n# Avg, Min, Max temp. boxplot\nax = sns.boxplot(x='year',y='degree',hue='variable', hue_order=['min','temp','max'],\n           data=data)\nax.set_ylabel('Degree Celcius')\nplt.show()\n\n# Precip. boxplot\nplt.subplots(figsize=(15,5))\nax  = sns.boxplot(x='year', y='prcp', data=weather)\nax.set_ylabel('Precipitation (mm)');\nax.set_yscale('log')","a539b3d4":"year_df = weather.groupby('year').mean()\n\nf, axes = plt.subplots(nrows=2, figsize=(10,10))\nax = year_df[['temp','min','max']].plot(ax=axes[0]);\nax.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nax.set_ylabel('Temperature (C)')\nax.set_title('Avarage Daily Temperature by Year');\n\nax = year_df['prcp'].plot(ax=axes[1]);\nax.set_ylabel('Precipitation (mm)')\nax.set_title('Average Daily Precipitation by Year');\n\nplt.tight_layout();","0c081487":"# for labeling\nmonths = ['Jan','Feb','Mar','Apr','May','Jun',\n          'Jul','Aug','Sep','Oct','Nov','Dec']\n\ndata = weather.groupby(['mo'], as_index=False)[['temp','min','max','prcp']].mean()\n\nf, axes = plt.subplots(nrows=2, figsize=(10,10))\nax = data[['temp','min','max']].plot(ax=axes[0]);\nax.set_ylabel('Temperature (C)')\nax.set_xlabel('Month')\nax.set_xticks(np.arange(0,12))\nax.set_xticklabels(months)\nax.set_title('Average Daily Temperature by Month');\n\nax = data['prcp'].plot(ax=axes[1]);\nax.set_ylabel('Precipitation (mm)')\nax.set_xlabel('Month')\nax.set_xticks(np.arange(0,12))\nax.set_xticklabels(months)\nax.set_title('Average Daily Precipitation by Month');\n\nplt.tight_layout();","db3606a4":"month_df = weather.groupby(['year','mo'], as_index=False)[['temp','prcp']].mean()\n\n# Temperature heatmap\ndata = month_df.pivot('year','mo','temp')\ndata.columns = months\n\nplt.subplots(figsize=(10,5))\nsns.heatmap(data, cmap='YlOrRd',annot=True, fmt='.1f', vmin=27)\nplt.title('Average Daily Temperature (C) by Month')\nplt.yticks(rotation=0)\nplt.show()\n\n# Precipitation heatmap\ndata = month_df.pivot('year','mo','prcp')\ndata.columns = months\n\nplt.subplots(figsize=(10,5))\nsns.heatmap(data, cmap='Blues',annot=True, fmt='.1f')\nplt.title('Average Daily Precipitation (mm) by Month')\nplt.yticks(rotation=0);","ebc4e41c":"# slicing only for 2017, 2018 and until November as we don't have data for December\ncondition = np.logical_and(weather['year'].isin([2017,2018]), weather['mo'] <= 11)\ndata = weather[condition]\n\nplt.subplots(figsize=(12,6))\n\nsns.boxplot(x='mo', y='temp', hue='year', data=data)\nplt.xlabel('Month')\nplt.ylabel('Temerature (C)')\nplt.title('Temperature Comparison');","f652828a":"plt.subplots(figsize=(12,6))\nsns.barplot(x='mo',y='prcp', hue='year', data=data, ci=None)\nplt.xlabel('Month')\nplt.ylabel('Precipitation (mm)')\nplt.title('Precipitation Comparison');","85be307a":"month_begins = ['0101','0201','0301','0401','0501','0601','0701','0801','0901','1001','1101','1201']\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\ndata = weather[weather['year'].isin([2017,2018])]\ndata['monthday'] = data.index.strftime('%m%d')\ndata = data.pivot('monthday', 'year','temp').dropna()\n\nwindow = 7\ndata = data.rolling(window, min_periods=1).mean()\n\nd2017 = data.loc[:, 2017]\nd2018 = data.loc[:, 2018]\n\nf, ax = plt.subplots(figsize=(20,5))\n\n# Plot 2017\nplt.plot(data.index, d2017, label='2017', color='silver')\nplt.xticks(month_begins[:11] ,months[:11])\n\n# Plot 2018\nplt.plot(data.index, d2018, label='2018', color='k')\nplt.xticks(month_begins[:11], months[:11])\n\n# Where 2018 is higher than 2017 - filling a warm color\nplt.fill_between(data.index, d2017, d2018, where= d2018 >= d2017,\n                facecolor='coral') \n\n# Where 2018 is lower than 2017 -  filling a cool color\nplt.fill_between(data.index, d2017, d2018, where= d2018 < d2017,\n                facecolor='steelblue')\n\nplt.title('{}-Day Moving Average Comparison (2017 vs 2018)'.format(window))\nplt.ylabel('Temperature (C)')\nplt.xlabel('Date')\n\nimport matplotlib.patches as mpatches\nhandles, labels = ax.get_legend_handles_labels()\nhandles = handles + [mpatches.Patch(color='coral'), mpatches.Patch(color='steelblue')]\nlabels = labels + ['2018 > 2017','2018 < 2017']\nplt.legend(handles=handles, labels=labels);","b76fb447":"# 2018 vs 2017 Comparison","70a0e8bc":"## Highest temperature in Bangkok\nRanking by Daily Maximum Temperature","2c73acd4":"**Missing data**\n\nThere are some dates without weather data from the source. Using *reindex()* to make sure that we have a row for each day in the date range, and then *interpolate()* all variables.","b00adbbb":"## Dataset\n- I want to explore 10 years of weather data. Weather data for each year are kept in separate tables named with *gsod{Year} *naming convention\n- I use data from only 1 (out of 4) weather stations in Bangkok. The station, BANGKOK METROPOLIS, seems to be at central of Bangkok","f89e82e3":"## Data Preparation","51bc27bd":"## Highest precipitation in Bangkok\nRanking by Daily Precipiation","fe784bbd":"# Bangkok Weather\n\nI live in Bangkok, Thailand. The weather here is mostly hot and humid throughout the year, so Winter is really expected for many people. By the time I am writing, It is supposed to be Winter already, but it is still hot even at night. Some people say this year is not normal and hotter than last year, etc. I want to find out how it really is and, as a beginner in data analysis, I want to try exploring Weather Data from NOAA GSOD Dataset.\n\n**Some facts about Bangkok**\n- Thailand has 3 seasons: Summer (around February to May), Rainy Season (May to October), Winter (October to February)\n- Bangkok does not have snow or hail, so Precipitation here is mostly about rain","b2b234ec":"## Year Summary","b8389e8c":"I was right. This year's winter is warmer and summer is cooler than last year.\n\nThank you for checking on this notebook and please let me know how to improve it.","73270d40":"## Heatmaps","27891f0c":" ## A quick look - time series","e5be09a4":"## Lowest temperature in Bangkok\nRanking by Daily Mininum Temperature","19e9c936":"# Exploratory Analysis","44673d33":"- While October is when the winter starts, but the temperature seems to rise in November before declining in December. This is new to me.","6406fa09":"## Month Summary","fa05a0a2":"## Distributions","2f9c03ac":"- 2018 is not that hot compared to the past 10 years"}}