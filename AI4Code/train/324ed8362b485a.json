{"cell_type":{"064344b8":"code","8ff07326":"code","40553692":"code","d9b04eea":"code","70268062":"code","58b4f6e4":"code","ee95c88e":"code","63d66cdc":"code","011111a9":"code","6fba5b41":"code","46b7ad4c":"code","834b95be":"code","176790ae":"code","5cde296c":"code","29c5124d":"code","c5cc32d0":"code","e80c9d4a":"code","e4049be2":"code","ac4770fe":"code","cb4ed7ba":"code","2187c223":"code","b0ab3ec3":"code","cc06e8af":"code","8ea22aa5":"markdown","3270251c":"markdown","afd7763e":"markdown","ef67afa1":"markdown","d878fc34":"markdown","79034002":"markdown","cea22996":"markdown","ea8c2b51":"markdown","b7eb5b26":"markdown","18c2d8f0":"markdown","89988504":"markdown","9d0eb50f":"markdown","4cd73644":"markdown","aac352fb":"markdown","bcfbe7bc":"markdown","24a6d035":"markdown","c3e94f2d":"markdown","d1f7bb7d":"markdown","ac3172d1":"markdown","ac6aad0d":"markdown","369110cf":"markdown","f82fc75a":"markdown","38538333":"markdown","806dd34b":"markdown","004eb04a":"markdown","555f5b82":"markdown","7cb64fba":"markdown","800ce86d":"markdown"},"source":{"064344b8":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\nsns.set(style=\"white\")\n\n\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\ndf = pd.read_csv(\n    \n    '..\/input\/imdb-dataset-of-top-1000-movies-and-tv-shows\/imdb_top_1000.csv'\n\n)","8ff07326":"df.head(3)","40553692":"df.tail()","d9b04eea":"df.info()","70268062":"df['Gross'] = df['Gross'].str.replace(',', '').astype('float')\ndf['Runtime'] = df['Runtime'].apply(lambda text: text.split()[0]).astype('int')","58b4f6e4":"df.isnull().sum()","ee95c88e":"df['Certificate'] = df['Certificate'].replace(np.nan, 'Unknown')\ndf['Meta_score'] = df['Meta_score'].replace(np.nan, np.mean(df['Meta_score']))\ndf['Gross'] = df['Gross'].replace(np.nan, np.mean(df['Gross']))","63d66cdc":"df.isnull().sum()","011111a9":"fig = px.histogram(data_frame=df.sort_values(by='Released_Year'), x='Released_Year', \n                   color_discrete_sequence=['gold'])\n\nfig.update_layout(font=dict(family='Lato', size=18, color='white'), \n                  title=dict(text='<b>Distributions of IMBD movies from<b> 1920 - now',\n                           font=dict(size=30), x=.5), \n                  paper_bgcolor= 'black', plot_bgcolor='black',\n                 xaxis = dict(title='Year of release', showgrid=False),\n                 yaxis=dict(showgrid=False))","6fba5b41":"df['Genre'].unique()[:5]","46b7ad4c":"df['genre'] = df['Genre'].apply(lambda text: text.split(',')[0])\ndf.drop(columns='Genre', inplace=True)\ndf['genre'].value_counts()","834b95be":"def bar_plot(column_name, data_frame=df, tribe='value_counts', by=None, limit=3, **kwargs):\n    \n    \"\"\"arguments:\n    column_name:str name of column from pandas data drame\n    data_frame:pandas data frame default df\n    tribe:str value counts by default, change to 'sort'\n    by:str works only if sort tribe chosed, takes name of the column\n        you want to sort values by\"\n    limit:int limit of values displayed\"\"\"\n    \n    \n    # if column is not str type or column not in columns of data frame\n    if type(column_name) != str or column_name not in data_frame.columns:\n        raise ValueError('Incorect column name or type')\n        \n    if type(limit) != int:\n        raise ValueErroc(f'excepted int type, got {type(limit)}')\n    \n    \n    # sorted data frame\n    if tribe == 'sort' :\n        # if column is not in data frame\n        if not by or by not in data_frame.columns:\n            raise ValueError('by paramter must be column from data frame!')\n        data = data_frame.sort_values(by=by, ascending=False).head(limit)\n        y = data[by].values\n        x = data[column_name]\n        title = by\n    \n    # value counts\n    elif tribe == 'value_counts':\n        data = data_frame[column_name].value_counts().head(limit)\n        x=data.index\n        y=data.values\n        title = column_name\n    \n    \n    fig = px.bar(x=x, \n                 y=y,\n            color_discrete_sequence=['gold']\n                )\n\n    fig.update_layout(font=dict(family='Lato', size=18, color='white'), \n                  title=dict(text=f'<b>IMBD movies - {title}',\n                           font=dict(size=30), x=.5), \n                  paper_bgcolor= 'black', plot_bgcolor='black',\n                 xaxis=dict(title=f'{title}', showgrid=False),\n                 yaxis=dict(title=f'count', showgrid=False))\n        \n    fig.show()","176790ae":"bar_plot('genre', limit=5)","5cde296c":"def add_mean_line(data=df, var='Runtime', **kwargs):\n    \n    #  If no variable provided skip adding mean line\n    if not var: return\n    \n    #  Calculating mean value for each group\n    mean = np.mean(data['Runtime'])\n    \n    #  Get current axis\n    ax = plt.gca()\n    \n    #  Adding line at group mean\n    \n    ax.axvline(mean, color='red', lw=3, ls='--', alpha=.7) \n    \n    #  Annotate group mean\n    x_pos = 0.75\n    fontsize = 12\n    \n    if mean < 120:\n        x_pos=.65\n\n    ax.text(x_pos, 0.7, f'mean:{mean: .0f}',\n            transform = ax.transAxes, \n            color = 'red', fontweight='bold', fontsize=fontsize)\n","29c5124d":"g = sns.FacetGrid(df[df['genre'].isin(['Drama', 'Crime', 'Action', 'Comedy', 'Biography'])], col='genre', height=4,\n                 sharex=False, sharey=False, xlim=(0,200), ylim=(0,.025))\ng.map(sns.kdeplot, 'Runtime', shade=True, color='black', bw=.5)\ng.map_dataframe(add_mean_line)\ng.set_titles(col_template='Genre: {col_name}');","c5cc32d0":"fig = px.scatter(df, x='Gross', y='No_of_Votes', hover_data=['Series_Title'],\n                color='genre')\n\nfig.update_layout(font=dict(family='Lato', size=18, color='white'), \n                  title=dict(text='<b>IMDB MOVIES - SCATTER PLOT<B>',\n                           font=dict(size=30), x=.5), \n                  paper_bgcolor= 'black', plot_bgcolor='black',\n                 xaxis=dict(title='Gross', showgrid=False),\n                 yaxis=dict(title='Number of votes', showgrid=False))","e80c9d4a":"bar_plot('Series_Title', tribe='sort', by='Gross')","e4049be2":"bar_plot('Series_Title', tribe='sort', by='Runtime')","ac4770fe":"bar_plot('Series_Title', tribe='sort', by='IMDB_Rating', limit=10)","cb4ed7ba":"bar_plot('Certificate', limit=10)","2187c223":"bar_plot('Series_Title', tribe='sort', by='Meta_score', limit=10)","b0ab3ec3":"bar_plot('Director', limit=10)","cc06e8af":"roles = ['Star1', 'Star2', 'Star3', 'Star4']\n\nfor star in roles:\n    bar_plot(star, limit=5)","8ea22aa5":"* Distribution is **left skewed**\n* there's some peaks in 1962, in 1993 and in 2004\n* the bigest amount of the movies is in 2014 - 32\n* 2020 is a bad year - no surprise because Covid-19 made movies was hard to record and distribute","3270251c":"There's null values in columns:\n\n* Certificate - replace null value with Unknown string\n* Meta_score - replace null values with mean\n* Gross - as with meta_score","afd7763e":"### BAR PLOT","ef67afa1":"### KDE PLOT","d878fc34":"# IMDB - EDA","79034002":"![external-content.duckduckgo.png](attachment:885f9484-12c5-4da7-bff3-18a5d03df26b.png)","cea22996":"### Stars:","ea8c2b51":"Basic information about dataset:\n\n* Poster_Link - Link of the poster that imdb using\n* Series_Title = Name of the movie\n* Released_Year - Year at which that movie released\n* Certificate - Certificate earned by that movie\n* Runtime - Total runtime of the movie\n* Genre - Genre of the movie\n* IMDB_Rating - Rating of the movie at IMDB site\n* Overview - mini story\/ summary\n* Meta_score - Score earned by the movie\n* Director - Name of the Director\n* Star1,Star2,Star3,Star4 - Name of the Stars\n* Noofvotes - Total number of votes\n* Gross - Money earned by that movie\n\n\nData shape:\n* number of rows: 1000\n* number of columns: 16","b7eb5b26":"### **TOP 3 MOVIES - GROSS**","18c2d8f0":"### BAR PLOT","89988504":"### Genres","9d0eb50f":"## 1. Data preprocessing","4cd73644":"### Rating","aac352fb":"### Certificate","bcfbe7bc":"### Meta score","24a6d035":"### 1.1 Importing modules","c3e94f2d":"* Movies count and year of the release","d1f7bb7d":"there's 3 numeric columns by now, gross should be numeric so i'm going to conver it . Runtime is numeric as well and will be converted as well.\nAll in all there's 5 numeric values","ac3172d1":"### BAR PLOT","ac6aad0d":"### SCATTER PLOT","369110cf":"### Runtime","f82fc75a":"Conclusions: \n* Drama seems to be the most popular genre\n* There's no big difference in mean runtime over genres","38538333":"### BAR PLOT","806dd34b":"## 2. Data visualizations","004eb04a":"### Gross","555f5b82":"**IMDB**-  is an online database of information related to films, television programs, home videos, video games, and streaming content online \u2013 including cast, production crew and personal biographies, plot summaries, trivia, ratings, and fan and critical reviews.","7cb64fba":"I'm going to left only the first category from the left side, for instance:\nwhen there's 'Crime, Drama' only leave Crime as main genre of the movie","800ce86d":"### Directors"}}