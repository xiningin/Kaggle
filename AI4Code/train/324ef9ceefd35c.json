{"cell_type":{"829c56cd":"code","cdbcf52e":"code","65ce6ff1":"code","5845f243":"code","6f3ab161":"code","9ccc1647":"code","c3015daf":"code","ee16c709":"code","ea9f2021":"code","9a447945":"code","e9cadd26":"code","97d727fe":"code","964b9a6d":"code","71d129f4":"code","0bee2c86":"code","83447c1d":"code","16f765a5":"code","e8f621c8":"code","80d5704a":"code","d718730a":"code","87dcf652":"code","e2326e34":"code","0b545988":"code","6fceb315":"code","aae5fc44":"code","95fc4327":"code","a304fff5":"code","02e7ab6f":"markdown","700790af":"markdown","a4992f4a":"markdown","1e683106":"markdown","b6e9ec4f":"markdown","2b4ff568":"markdown","4a100617":"markdown","2c727ab7":"markdown","7261daed":"markdown","2eef2883":"markdown","4ce1209e":"markdown","298e45e2":"markdown","95e8310a":"markdown","09d78f4e":"markdown"},"source":{"829c56cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cdbcf52e":"import seaborn as sns\nimport matplotlib.pyplot as plt","65ce6ff1":"sample = pd.read_csv('\/kaggle\/input\/supplement-sales-prediction\/SAMPLE.csv')\nprint(sample.shape)\nsample.head()","5845f243":"train = pd.read_csv('\/kaggle\/input\/supplement-sales-prediction\/TRAIN.csv')\nprint(train.shape)\ntrain.head()","6f3ab161":"test = pd.read_csv('\/kaggle\/input\/supplement-sales-prediction\/TEST_FINAL.csv')\nprint(test.shape)\ntest.head()","9ccc1647":"train.info()","c3015daf":"train.Store_Type.value_counts()","ee16c709":"ax = sns.barplot(x=\"Store_Type\", y=\"Sales\", data=train)\nplt.plot()","ea9f2021":"train.Location_Type.value_counts()","9a447945":"ax = sns.barplot(x=\"Location_Type\", y=\"Sales\", data=train)\nplt.plot()","e9cadd26":"train.Region_Code.value_counts()","97d727fe":"ax = sns.barplot(x=\"Region_Code\", y=\"Sales\", data=train)\nplt.plot()","964b9a6d":"ax = sns.barplot(x=train.Holiday, y=train.Sales)\nplt.plot()","71d129f4":"ax = sns.barplot(x=train.Discount, y=train.Sales)\nplt.plot()","0bee2c86":"ax = sns.scatterplot(x=\"#Order\", y=\"Sales\", data=train)\nplt.plot()","83447c1d":"y = pd.get_dummies(train.Store_Type, prefix='Store_Type')\ntrain = pd.concat([train,y],axis=1)\ntrain = train.drop(['Store_Type'],axis=1)","16f765a5":"y = pd.get_dummies(train.Location_Type, prefix='Location_Type')\ntrain = pd.concat([train,y],axis=1)\ntrain = train.drop(['Location_Type'],axis=1)","e8f621c8":"y = pd.get_dummies(train.Region_Code, prefix='Region_Code')\ntrain = pd.concat([train,y],axis=1)\ntrain = train.drop(['Region_Code'],axis=1)","80d5704a":"train.Discount = [1 if i == 'Yes' else 0 if i == 'No' else 0 for i in train.Discount]","d718730a":"train.head()","87dcf652":"train = train.drop(['ID','Store_id','Date'],axis=1)\ny = train['Sales']\ny2 = train['#Order']\nx = train.drop(['Sales','#Order'],axis=1)","e2326e34":"from sklearn.model_selection import train_test_split            \nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=42)","0b545988":"import lightgbm as ltb\nmodel = ltb.LGBMRegressor()\nmodel.fit(x_train, y_train)\nmodel.score(x_train, y_train)","6fceb315":"model.score(x_test,y_test)","aae5fc44":"from sklearn.model_selection import train_test_split            \nx_train2, x_test2, y_train2, y_test2 = train_test_split(x,y2,test_size=0.2, random_state=42)","95fc4327":"model = ltb.LGBMRegressor()\nmodel.fit(x_train2, y_train2)\nmodel.score(x_train2, y_train2)","a304fff5":"model.score(x_test2,y_test2)","02e7ab6f":"**There are 4 types for Regions**","700790af":"# EDA","a4992f4a":"**And Surely sales increase when there is a discount**","1e683106":"**There are no null values in the entire dataset**","b6e9ec4f":"**There are 5 types for Location**\n","2b4ff568":"**Sales in holidays is lower than in other days**","4a100617":"# Data Preprocessing","2c727ab7":"**There are 4 types for store**","7261daed":"**All regions almost has equal some amount of salaries**","2eef2883":"**L2 has higher sales**","4ce1209e":"**S4 has higher sales**","298e45e2":"**And Logically as you see there is strong a correlation between #orders and sales**\n**, surely we will not use it to predict sales**","95e8310a":"# Train a model to predict Sales","09d78f4e":"# Train a model to predict #Orders"}}