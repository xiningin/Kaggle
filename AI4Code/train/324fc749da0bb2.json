{"cell_type":{"ac612cc8":"code","e65f14e0":"code","a49f3cd8":"code","f2f47839":"code","a9239772":"code","92e29e4b":"code","7f4d12ff":"code","c4764924":"code","220ceda9":"code","2e9cf42c":"code","1f397d9c":"code","78335977":"code","f2b3fc2e":"code","ee2a9827":"code","a99cc7a5":"code","5e208c2a":"code","13897eac":"code","965a086c":"code","11b98040":"code","e77f38d4":"markdown","7d163370":"markdown","1b08ffd8":"markdown","d256348b":"markdown","9a6ee916":"markdown","36b2d2d6":"markdown","b7273763":"markdown","639109a9":"markdown","d87ab31e":"markdown","467c2ce8":"markdown","1507fd28":"markdown","5b4a7207":"markdown","f5f58ec7":"markdown","892b3f17":"markdown","0eb1c9e2":"markdown","9a255605":"markdown","c4178900":"markdown","e730bfd6":"markdown","ab44aa26":"markdown","cb96691d":"markdown","f2342330":"markdown","4baaaea3":"markdown"},"source":{"ac612cc8":"import os\nimport pickle\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, classification_report","e65f14e0":"DATA_PATH = '..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv'","a49f3cd8":"df = pd.read_csv(DATA_PATH)","f2f47839":"df.head()","a9239772":"df.describe(include=\"all\")","92e29e4b":"df['label'].value_counts()","7f4d12ff":"correlation_mat = df.corr()\ncorrelation_mat\nplt.figure(figsize=(10,8))\nsns.heatmap(correlation_mat, linewidths=.5,annot=True, fmt=\"f\")","c4764924":"X = df.iloc[:,:-1]     # selecting all features except 'label' feature \ny = df.iloc[:,-1]      # selecting 'label' feature as dependent feature","220ceda9":"# Splitting dataset into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state =2)","2e9cf42c":"print('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","1f397d9c":"KNN_model = KNeighborsClassifier()","78335977":"KNN_model.fit(X_train,y_train)","f2b3fc2e":"y_pred = KNN_model.predict(X_test)","ee2a9827":"results = classification_report(y_test, y_pred)\nprint(results)","a99cc7a5":"conf_mat = confusion_matrix(y_test, y_pred, labels=KNN_model.classes_)\nfigure, axes = plt.subplots(1, figsize=(15,15))\ndisp = ConfusionMatrixDisplay(confusion_matrix=conf_mat,  display_labels=KNN_model.classes_)\ndisp.plot(ax = axes, xticks_rotation='vertical') ","5e208c2a":"rice_df = df[df[\"label\"] == 'rice']\njute_df = df[df[\"label\"] == 'jute']\ndf_rice_jute = pd.concat([rice_df, jute_df])","13897eac":"def change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n        # we change the bar width\n        patch.set_width(new_value)\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n\nfor col in df.columns[:-1]:\n    fig, ax = plt.subplots(1,2, figsize=(15,5), gridspec_kw={'width_ratios': [3.5, 0.5]})\n    sns.barplot(x = df['label'], y = df[col], data=df, ax = ax[0])\n    sns.barplot(x = df_rice_jute['label'], y = df_rice_jute[col], data=df_rice_jute, ax = ax[1])\n    change_width(ax[1], 0.5)\n    fig.autofmt_xdate(rotation=60)\n    plt.show()","965a086c":"# open a file, where you ant to store the data\nfile = open('KNN_model_crop_prediction.pkl', 'wb')\n# dump information to that file\npickle.dump(KNN_model, file)","11b98040":"###","e77f38d4":"### For model deployment, we require the following things::\n* Trained ML model\n* Web app integradted with trained model.\n* Deployment plantform --> Google cloud, Azure, AWS, Heroku\n* Heroku provides free deployment facility (Google cloud is also providing) where as Azure and AWS are expensive.\n* I have used Heroku (https:\/\/dashboard.heroku.com\/) to deploy the model.","7d163370":"## Model deployment","1b08ffd8":"### select your rescpective repository\n\n### deploy branch\n\n![image.png](attachment:a368eb63-dbe2-496d-b8b5-29d229a80ae2.png)","d256348b":"## Model pickling","9a6ee916":"## step-2: \n\n### create an account in heroku \n\n(https:\/\/id.heroku.com\/login)\n\n![image.png](attachment:65078596-d036-4291-a84f-0e5cb09d929c.png)","36b2d2d6":"### Available independent features\n* N - ratio of Nitrogen content in soil\n* P - ratio of Phosphorous content in soil\n* K - ratio of Potassium content in soil\n* temperature - temperature in degree Celsius\n* humidity - relative humidity in %\n* ph - ph value of the soil\n* rainfall - rainfall in mm","b7273763":"### As you can see from the above description:\n### Dataset has:\n* No missing values\n* 7 independent features and 1 dependent feature\n* 2200 samples in each feature.\n* Class balance\n* Seems clean and preprocessed\n* Therefore, we can directly use for training.\n","639109a9":"### In deploy section connect with github\n\n![image.png](attachment:85e92965-19a0-45af-bca9-f898a2fc61f3.png)","d87ab31e":"## Data preprocessing","467c2ce8":"## Required libraries","1507fd28":"## Error analysis","5b4a7207":"## step-1: setup repo\n![image.png](attachment:7f5f7649-2d98-4aae-a8d3-a453402248d7.png)\n\n******\n\n* Create a repository in the github: You can take a look at my repository.(https:\/\/github.com\/RaghavaAlajangi\/Precision-Agriculture)\n* It should contain:\n1. assest (Folder --> consists of style.css and logo image file)\n2. crops (Image folder --> consists of crop images)\n3. Web app script (app.py)\n4. Procfile\n5. Trained model (KNN_model_crop_prediction.pkl)\n6. requirements.txt\n\n","f5f58ec7":"## Visualize the results","892b3f17":"## Evaluating the model","0eb1c9e2":"## Read dataset","9a255605":"### As you can observe from the above heatmap is that:\n* Accuracy of the model is 97%\n* There are 11 wrong predictions.\n* The majority of wrong predictions came from 'rice' and 'jute' categories","c4178900":"\n### create a new app or project!\n\n![image.png](attachment:c46496ea-03bc-42f3-9c72-bfaf52ebaa20.png)\n\n![image.png](attachment:8a80f6ac-04fc-47ab-bdb4-1396206978e1.png)\n","e730bfd6":"### From the above plot:\n* It can be said that Phosphorous and Potassium features are 73% correlated.\n* And Temperature and Humidity are slightly correlated.\n* If you have two highly correlated features in your dataset, you can opt for one of them because another one can act as duplicate data in your training dataset.\n* However, in this case, dataset does not have too many features. So, all features will be kept.","ab44aa26":"## Heroku deployment steps:\n\n* I have used Dash-Plotly (https:\/\/dash.plotly.com\/introduction) framework to create my simple web app. It will display the name of the predicted crop and corresponding crop image based on user inputs.\n\n* Take a look at the 'app.py' script in my repo (you can also and add some graphs that can illustrate the feature trends). Let me know if you want me to add any other functionalities in the comments.\n\n* You can automatically create 'requirements.txt' file with 'pip freeze > requirements.txt' command in cmd.\n\n* 'Procfile' is a process file that is required for all Heroku applications. \n","cb96691d":"## It will provide you with the link to the deployed application.\n\n(https:\/\/precision-agriculture.herokuapp.com\/)","f2342330":"### From the above barplots:\n* Each feature plot is representing influence on crop recommendation system.\n* For example: the plot (rainfall vs label)\n* Higher rainfall --> the most likely crop is rice \n* Low rainfall  --> the most likely crop is muskmelon\n\n\n\n\n* If you see the difference between only Rice and Jute with respect to each feature:\n* There is no much variance between Rice and Jute categories --> this might be the reason for the model to be unable to differentiate between these two.\n","4baaaea3":"## Model training"}}