{"cell_type":{"19e6cfc3":"code","67720cb6":"code","d3eb74df":"code","69e5e7ee":"code","ee159735":"code","e078aa33":"code","acef73d3":"code","c619b68c":"code","17650188":"code","dc62e22d":"code","377aa7cf":"code","1d5906e2":"code","f68a6bd5":"code","340a9d75":"code","bb9f5b60":"code","57d4f32e":"markdown","acf392f6":"markdown","f77dbec6":"markdown","316a6a9a":"markdown","a639cb3d":"markdown","57f35c35":"markdown","2a9a2f84":"markdown","7fd4ca17":"markdown","d4df9d12":"markdown","88433a1d":"markdown","1635e9b8":"markdown","65842c53":"markdown","b0a7708a":"markdown","1314ee48":"markdown","a95bc6b0":"markdown","d040a70a":"markdown","eaea109f":"markdown","ad40ef5a":"markdown","156a6f6e":"markdown","4d34c0c1":"markdown","54253b0f":"markdown"},"source":{"19e6cfc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67720cb6":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\n%matplotlib inline\nmpl.style.use('seaborn')\nmpl.rcParams[\"figure.facecolor\"] ='#f6f5f5'","d3eb74df":"#reading raw data\ndata_raw = pd.read_csv('\/kaggle\/input\/student-performance-data-set\/student-por.csv')\n#creating deep copy\ndf = data_raw.copy(deep=True)\n\n#printing shape of the data and data info\nprint('Data Shape:',df.shape)\nprint(df.info())\ndisplay(df.head())","69e5e7ee":"#taking alook on the catagorical columns\nprint('Catagorical Column\\'s Values\\n')\nfor col in df.select_dtypes(exclude=np.number).columns:\n    unique = df[col].unique()\n    print('-'*7,f'columns {col}','-'*7)\n    print(f'There are {len(unique)} Unique values')\n    print(f'5 of which are: {unique[:5]}\\n')\n    \n#Numeric data statistics\nprint('-'*15,'\\nNumeric Data Statistics\\033[1;0m')\ndisplay(df.select_dtypes(include=np.number).describe())\nprint('-'*15,'\\nPearson\\'s Correlation')\nplt.figure(figsize=(15,8))\nsns.heatmap(df.select_dtypes(include=np.number).corr(),annot=True)","ee159735":"#creating catagorical columns list and numeric columns list\ncat_columns = ['school','sex','address','famsize','Pstatus','Mjob','Fjob','reason','guardian',\n               'schoolsup','famsup','paid','activities','nursery','higher','internet','romantic']\nnum_columns = ['Medu','Fedu','traveltime','studytime','famrel','freetime','goout','Dalc','Walc','health']\ncont_columns = ['age','failures','absences','G1','G2','G3']","e078aa33":"def ncols_calculator(cols,nrows=3):\n    '''\n    Takes a list of columns and numbers row plots\n    \n    returns number of cols to be used in matplotlib.pyplot.subplots()\n    and how many axes will be remained that need to be deleted\n    '''\n    n = len(cols)\n    ncols = n\/\/nrows\n    if ncols*nrows < n:\n        ncols+=1\n    axdel = ncols*nrows-n\n    return ncols,axdel\n\n\ndef bar_matrix(df,cols,nrows=3,annot=True,title='You Forget Your Title!'):\n    '''\n    df --> DataFrame\n    cols --> List of Columns name to be plotted\n    nrows --> number of nrows to split figure subplots default is 3\n    annot --> Boolean to decide whether percentage of each bar annotation is desired\n    title --> Figure title to be displayed\n    \n    Functions is designed to create one plot using\n    sns.countplot for catagorical datatype columns\n    \n    '''\n    ncols,axdel = ncols_calculator(cols)\n    fig,axes = plt.subplots(ncols,nrows,figsize=(nrows*4,ncols*3),constrained_layout=True)\n    plt.suptitle(f'{title}',size=20, fontweight='bold', fontfamily='serif')\n    axes=axes.ravel()\n    if axdel >0:\n        for ax in range(1,axdel+1):\n            axes[-ax].remove()\n    for i in range(len(cols)):\n        #creating plotting data information\n        ax = axes[i]\n        col = cols[i]\n        #creating plot\n        sns.countplot(x=col,data=df,color=sns.color_palette()[0],ax=ax)\n        #adjusting plot\n        ax.set_xlabel(\"\")\n        ax.set_title(col+'_Column')\n        ax.set_ylim(0,max(ax.get_ylim())+max(ax.get_ylim())\/8)\n        #writing percentage over each bar\n        if annot==True:\n            for p in ax.patches:\n                x = p.get_x()+0.2\n                y = p.get_height()+1\n                percentage = '{:.1f}%'.format(100*p.get_height()\/df.shape[0])\n                ax.annotate(percentage,(x,y))\n                \ndef hist_violin(df,cols,title='You Forget Your Title!'):\n    '''\n    df --> DataFrame\n    cols --> List of Columns name to be plotted\n    title --> Figure title to be displayed\n    \n    Functions is designed to create two plots using\n    sns.histplot and sns.violinplot for continuous datatype columns\n    \n    '''\n    ncols = len(cols)\n    fig,axes = plt.subplots(ncols,2,figsize=(12,ncols*2),constrained_layout=True)\n    fig.suptitle(f'{title}',size=20, fontweight='bold', fontfamily='serif')\n    #axes=axes.ravel()\n    for i in range(len(cols)):\n        ax = axes[i][0]\n        col = cols[i]\n        sns.histplot(x=col,data=df,color=sns.color_palette()[0],ax=ax,kde=True)\n        #ax.set_xlabel(\"\")\n        ax.set_title(col+'_Distribution')\n        ax = axes[i][1]\n        sns.violinplot(x=col,data=df,color=sns.color_palette()[0],ax=ax)","acef73d3":"bar_matrix(df,cat_columns,annot=True,title='Catagorical Features Proportion')","c619b68c":"bar_matrix(df,num_columns,annot=True,title='Ordinal Features Proportion')","17650188":"hist_violin(df,cont_columns,title='Continues Features Distribution')","dc62e22d":"#Creating different copy of the main dataframe to do my adjustment on it.\nbi_df = df.copy()\nbi_df['G1&G2'] = round((bi_df['G1'] + bi_df['G2'])\/2,1)\nbi_df['MFedu'] = bi_df['Medu'] + bi_df['Fedu']\n\nbi_df.drop(labels=['G1','G2','Medu','Fedu'],inplace=True,axis=1)\n\n#Updating my list of columns after the adjustments\nbi_cat_columns = ['school','sex','address','famsize','Pstatus','Mjob','Fjob','reason','guardian',\n               'schoolsup','famsup','paid','activities','nursery','higher','internet','romantic']\nbi_num_columns = ['traveltime','studytime','famrel','freetime','goout','Dalc','Walc','health','MFedu']\nbi_cont_columns = ['age','failures','absences','G3']","377aa7cf":"fig,axes = plt.subplots(9,3,figsize=(12,30),constrained_layout=True)\nfig.suptitle('G1&G2 Distribution for each feature value',size=20, fontweight='bold', fontfamily='serif')\naxes=axes.ravel()\naxes[-1].remove()#removing non plotted axis\n\nfor i in range(len(bi_cat_columns+bi_num_columns)):\n    #Creating plotting data variables\n    ax = axes[i]\n    col = (bi_cat_columns+bi_num_columns)[i]\n    #plotting function\n    sns.kdeplot(x='G1&G2',data=bi_df,hue=col,ax=ax,shade=True,palette=sns.color_palette('bright')[:len(bi_df[col].unique())])\n    #Adjusting plot\n    ax.set_xlabel(\"\")\n    ax.set_title(col+'_Column')","1d5906e2":"fig,axes = plt.subplots(9,3,figsize=(12,30),constrained_layout=True)\nfig.suptitle('G1&G2 Mean Value For Different Feature',size=20, fontweight='bold', fontfamily='serif')\naxes=axes.ravel()\naxes[-1].remove()\nfor i in range(len(bi_cat_columns+bi_num_columns)):\n    #Creating plotting data variables\n    ax = axes[i]\n    col = (bi_cat_columns+bi_num_columns)[i]\n    plot_data = bi_df.groupby(col).mean()\n    #plotting function\n    sns.barplot(y='G1&G2', x=plot_data.index, data=plot_data, ax=ax, color=sns.color_palette('bright')[9])\n    #Adjusting plot\n    ax.set_xlabel(\"\")\n    ax.set_title(col+'_Column')\n    ax.set_ylim(0,max(ax.get_ylim())+max(ax.get_ylim())\/8)\n    #writing percentage over each bar\n    for p in ax.patches:\n        x = p.get_x()+0.2\n        y = round(p.get_height())\n        ax.annotate(y,(x,y+0.5))","f68a6bd5":"#Creating different copy of the main dataframe to do my adjustment on it.\nmu_df = df.copy()\nmu_df['G1&G2'] = round((mu_df['G1'] + mu_df['G2'])\/2,1)\nmu_df['MFedu'] = mu_df['Medu'] + mu_df['Fedu']\n\nmu_df.drop(labels=['G1','G2','Medu','Fedu'],inplace=True,axis=1)\n\n#Updating my list of columns after the adjustments\nmu_cat_columns = ['school','sex','address','famsize','Pstatus','Mjob','Fjob','reason','guardian',\n               'schoolsup','famsup','paid','activities','nursery','higher','internet','romantic']\nmu_num_columns = ['traveltime','studytime','famrel','freetime','goout','Dalc','Walc','health','MFedu']\nmu_cont_columns = ['age','failures','absences','G3']\n\ndef exam_mean_facetgrid(df,face_column,x_col,mean_col='G1&G2',title='Forgotten!!'):\n    '''\n    df --> DataFrame\n    face_column --> column name to be used in the FacetGrid main split\n    x_col --> x-axis column name to be plotted in the FacetGrid object\n    mean_col --> y-axis column name which where the mean value will be plottedd\n    title --> Figure title to be displayed \n    \n    Functions is designed to create sns.FacetGrid object with df and face_column as parameters\n    then map plt.bar func with x_col and mean_col to the FacetGrid object.\n    '''\n    plot_data = df.groupby([x_col,face_column]).mean()[mean_col].reset_index()\n    g=sns.FacetGrid(data=plot_data,col=face_column,margin_titles=True)\n    g.map(plt.bar,x_col,mean_col)\n    g.fig.subplots_adjust(top=0.8)\n    g.fig.suptitle(f'{title}',size=12, fontweight='bold', fontfamily='serif')","340a9d75":"exam_mean_facetgrid(df=mu_df, face_column='studytime', x_col='freetime',title='Change on G1&G2 Mean Vale with respect to different Freetime and Studytime for students')","bb9f5b60":"#for col in mu_num_columns+mu_cat_columns:\n#    if col == 'studytime':\n#        continue\n#    exam_mean_facetgrid(mu_df,'studytime',col)\n\nexam_mean_facetgrid(mu_df,x_col='studytime',face_column='Dalc',title='Change on G1&G2 Mean Vale with respect to different Studytime and Workday Alcohol Consumbtion for students')\nexam_mean_facetgrid(mu_df,x_col='studytime',face_column='Walc',title='Change on G1&G2 Mean Vale with respect to different Studytime and Weekend Alcohol Consumbtion for students')","57d4f32e":"# Data Visualization","acf392f6":"I'll treat this numeric data as catagorical data as it is considered ordinal catagroical data but represented using numbers\nSo Iusing countplot for each column and using annotation to calculate each bar percentage","f77dbec6":"First, I'll explore G1&G2 score distribution for different columns","316a6a9a":"**for simplicity sake I'll merge G1 and G2 into one column so I can explore relationships between the column and both exams at the same time**\n\n**Also I will be adding Father and Mother's Education levels to one column**","a639cb3d":"# Multivariant Visualization","57f35c35":"# Bivariant Visualization","2a9a2f84":"**Studing the exam means for different study time and free time is interesting, taking that if study time of 4 (which mean >10 hours) and have less free time do better in the exam than student's that study as much but has more free time which can infere one of 2 explanation:**\n* As the value 4 is a little vague so the students don't study as much may be the students that have less free time may study more than students have more free time\n* Students that have less free time may have hobbies or do activities which improve there performan","7fd4ca17":"First to ease things alittle bit I'll divide columns into 3 list for Catagorical, Numerical, Continous data","d4df9d12":"##### In this section my goal is to explore relationships of 2 columns with each other, our main focus are the exam result so I'll focus more in the relation ship of different columns with exam results,","88433a1d":"**As we have seen before that the exam score is inversely relation to alcoholic consumption we can investigate more about that relation with the above 2 plots which compare students mean score and studytime with alcoholic consumptions in weekdays and weekends.**\n\n* **We can see that the heighest exam mean value were achived with the lowest weekday alcohol consumption (1&2). While the weekend consuption doesn't have strong trend we can see that the scores increases with studytime for same weekends alcohol consumption group**","1635e9b8":"**We can see that G1 and G2 has very similar distributions while G3 has a slightly different distribution**","65842c53":"Here the data is discrete so, I'll treat it different. To learn more about continuse data I will creat multiple plot for each column each has\ndifferent information which we can learn from\n\nI'll be Creating:\n* kernel density estimate\n* Violin Plot","b0a7708a":"Comparing exam score mean for each columns","1314ee48":"\n**In This Section I'll try to explore each column individually to understand it's properties**","a95bc6b0":"# I-Univariat Data Visualization","d040a70a":"#### We can see some distribution difference from the exam score distribution, for example:\n* **The exam mean value seems to have a inverse relationship with alcoholic consumption**\n* **The exam mean increases with increasing study time and score distribution tend to shift slightly to the right**\n* **The exam mean increases from other student if Mother of Father works as a teacher and score distribution tend to shift slightly to the right**\n* **The distribution health shift to left (score decreases) if health of the student is worse**\n* **The exam mean is worst if the guardian of the student is other than father or mother, there are some difference between guardian being the father and the mother, but the entries of father being the guardian is significantly smaller than the mother as most students have there mother as guardian**\n","eaea109f":"**I'm curious how studytime and freetime affect student's score in exam, So I will create FacetGrid for different studytime value with x-axis for freetime value and y-axis equal to student's mean**","ad40ef5a":"**The Data we have consists of 649 Entry and 33 Columns, Most of the columns are catagorical of ordinal variables, More information taken from dataset [link](https:\/\/www.kaggle.com\/larsen0966\/student-performance-data-set)**\n\n**Columns:**\n* **School:** student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)\n* **Sex:** student's sex (binary: 'F' - female or 'M' - male)\n* **Age:** student's age (numeric: from 15 to 22)\n* **Address:** student's home address type (binary: 'U' - urban or 'R' - rural)\n* **Famsize:** family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)\n* **Pstatus:** parent's cohabitation status (binary: 'T' - living together or 'A' - apart)\n* **Medu:** mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n* **Fedu:** father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n* **Mjob:** mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n* **Fjob:** father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n* **Reason:** reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')\n* **Guardian:** student's guardian (nominal: 'mother', 'father' or 'other')\n* **Traveltime:** home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)\n* **Studytime:** weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)\n* **Failures:** number of past class failures (numeric: n if 1<=n<3, else 4)\n* **Schoolsup:** extra educational support (binary: yes or no)\n* **Famsup:** family educational support (binary: yes or no)\n* **Paid:** extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)\n* **Activities:** extra-curricular activities (binary: yes or no)\n* **Nursery:** attended nursery school (binary: yes or no)\n* **Higher:** wants to take higher education (binary: yes or no)\n* **Internet:** Internet access at home (binary: yes or no)\n* **Romantic:** with a romantic relationship (binary: yes or no)\n* **Famrel:** quality of family relationships (numeric: from 1 - very bad to 5 - excellent)\n* **Freetime:** free time after school (numeric: from 1 - very low to 5 - very high)\n* **Goout:** going out with friends (numeric: from 1 - very low to 5 - very high)\n* **Dalc:** workday alcohol consumption (numeric: from 1 - very low to 5 - very high)\n* **Walc:** weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)\n* **Health:** current health status (numeric: from 1 - very bad to 5 - very good)\n* **Absences:** number of school absences (numeric: from 0 to 93)\n* **G1:** first period grade (numeric: from 0 to 20)\n* **G2:** second period grade (numeric: from 0 to 20)\n* **G3:** final grade (numeric: from 0 to 20, output target)","156a6f6e":"#####  This data only has 649 rows which are considered too low to infer any global trends but fortunately, it has some strong trends within itself that we have discovered through our analysis and maybe there are more still hidden within the data. Feel free to tell me what you think and to explore the data from where I stopped\n","4d34c0c1":"##### In this section my goal is to explore relationships of multiple columns with each other","54253b0f":"For catagorical columns I'll be creatin **countplot** and annot each bar percentage over it"}}