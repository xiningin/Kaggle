{"cell_type":{"af90f907":"code","4e9a51e6":"code","2f49b639":"code","d710ff8b":"code","963d9366":"code","4d36d377":"code","2ec15c73":"code","1d004651":"code","daaa2644":"code","b5849864":"code","07f7ba88":"code","eaf4d024":"code","5f372184":"code","031b2666":"code","9d07650a":"code","ed3e71b9":"code","26efe193":"code","09592670":"code","4f1f651a":"code","d1e6233e":"code","5a5534b4":"code","cf9c4dc0":"code","c493e59b":"code","c92b9714":"code","fa682e97":"code","fd0ffebf":"code","1603d16c":"code","469beb36":"code","d975c45c":"code","e80a8657":"code","55ff71d6":"code","9747f514":"code","6704712f":"code","d58fc4a4":"code","b6031564":"code","bcbce167":"code","88ae53d7":"code","a3ae4707":"code","12a85dc4":"markdown","de72eb26":"markdown","834a6f61":"markdown","0f186595":"markdown","c60deb1f":"markdown","cbd580b1":"markdown","38c903cb":"markdown","b44ed972":"markdown","51be3750":"markdown","8421e6ee":"markdown","47cca33a":"markdown","cdc1c8d3":"markdown","0f7d8dc1":"markdown","9ce179b8":"markdown"},"source":{"af90f907":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Generated files are sent to \"..\/input\/bitcoin-blockchain\/\"\nimport os\nprint(os.listdir(\"..\/input\"))","4e9a51e6":"# Tools to help with Google BigQuery\n\nfrom google.cloud import bigquery\nfrom bq_helper import BigQueryHelper\n\nclient = bigquery.Client()\n\n# Variable for each blockchain queried\n\nbtc_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_bitcoin\")\nbch_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_bitcoin_cash\")\nltc_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_litecoin\")\ndash_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_dash\")\ndoge_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_dogecoin\")\neth_bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"crypto_ethereum\")\n","2f49b639":"# Check Bitcoin (BTC) blockchain schema\n\nbtc_bq_assistant.list_tables()","d710ff8b":"# Google BigQuery on Kaggle has a free 5 TB limit\n# These output total size of each blockchain's transaction history\n\nbtc_dataset = client.get_dataset(client.dataset('crypto_bitcoin', project='bigquery-public-data'))\nbtc_transactions_table = client.get_table(btc_dataset.table('transactions'))\nBYTES_PER_GB = 2**30\nprint(f'The Bitcoin transactions table is {int(btc_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n\nbch_dataset = client.get_dataset(client.dataset('crypto_bitcoin_cash', project='bigquery-public-data'))\nbch_transactions_table = client.get_table(bch_dataset.table('transactions'))\nprint(f'The Bitcoin Cash transactions table is {int(bch_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n\nltc_dataset = client.get_dataset(client.dataset('crypto_litecoin', project='bigquery-public-data'))\nltc_transactions_table = client.get_table(ltc_dataset.table('transactions'))\nprint(f'The Litecoin transactions table is {int(ltc_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n\ndash_dataset = client.get_dataset(client.dataset('crypto_dash', project='bigquery-public-data'))\ndash_transactions_table = client.get_table(dash_dataset.table('transactions'))\nprint(f'The Dash transactions table is {int(dash_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n\ndoge_dataset = client.get_dataset(client.dataset('crypto_dogecoin', project='bigquery-public-data'))\ndoge_transactions_table = client.get_table(doge_dataset.table('transactions'))\nprint(f'The Dogecoin transactions table is {int(doge_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n\neth_dataset = client.get_dataset(client.dataset('crypto_ethereum', project='bigquery-public-data'))\neth_transactions_table = client.get_table(eth_dataset.table('transactions'))\nprint(f'The Ethereum transactions table is {int(eth_transactions_table.num_bytes\/BYTES_PER_GB)} GB')\n","963d9366":"# Anatomy of a Bitcoin transaction\n\nbtc_transactions_header = client.list_rows(btc_transactions_table, max_results=1)\nprint('\\n'.join([str(dict(i)) for i in btc_transactions_header]))","4d36d377":"# Create function to estimate query size before executing\n# Mindful of 5 TB monthly limit on Google BigQuery data\n\ndef estimate_gigabytes_scanned(query, bq_client):\n    # see https:\/\/cloud.google.com\/bigquery\/docs\/reference\/rest\/v2\/jobs#configuration.dryRun\n    my_job_config = bigquery.job.QueryJobConfig()\n    my_job_config.dry_run = True\n    my_job = client.query(query, job_config=my_job_config)\n    BYTES_PER_GB = 2**30\n    return my_job.total_bytes_processed \/ BYTES_PER_GB","2ec15c73":"# Query pulls BTC fees (independent variable of interest) by day\n\nQUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        (SUM(input_value - output_value))\/100000000 AS BTC_fees,\n                        SUM(output_value)\/100000000 AS BTC_transferred\n                        \n                 FROM `bigquery-public-data.crypto_bitcoin.transactions`\n                 \n                 \/* Data from 2 months on either side of prediction, for comparison *\/\n                 \n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-06-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\nestimate_gigabytes_scanned(QUERY, client)","1d004651":"# Set query limit at 100 GB to stay under limit\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**11)\nquery_job = client.query(QUERY, job_config=safe_config)\n\nbtc_data = query_job.to_dataframe()\nbtc_data.tail()","daaa2644":"QUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        SUM(output_value)\/100000000 AS BCH_transferred\n                        \n                 FROM `bigquery-public-data.crypto_bitcoin_cash.transactions`\n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-05-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\nestimate_gigabytes_scanned(QUERY, client)","b5849864":"# Set query limit at 100 GB\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**11)\nquery_job = client.query(QUERY, job_config=safe_config)\n\nbch_data = query_job.to_dataframe()\nbch_data.head()","07f7ba88":"QUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        SUM(output_value)\/100000000 AS LTC_transferred\n                        \n                 FROM `bigquery-public-data.crypto_litecoin.transactions`\n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-05-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**12)\nquery_job = client.query(QUERY, job_config=safe_config)\n\nltc_data = query_job.to_dataframe()\nltc_data.head()","eaf4d024":"QUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        SUM(output_value)\/100000000 AS DASH_transferred\n                        \n                 FROM `bigquery-public-data.crypto_dash.transactions`\n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-05-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**12)\nquery_job = client.query(QUERY, job_config=safe_config)\n\ndash_data = query_job.to_dataframe()\ndash_data.head()","5f372184":"QUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        SUM(output_value)\/100000000 AS DOGE_transferred\n                        \n                 FROM `bigquery-public-data.crypto_dogecoin.transactions`\n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-05-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**12)\nquery_job = client.query(QUERY, job_config=safe_config)\n\ndoge_data = query_job.to_dataframe()\ndoge_data.head()\n","031b2666":"eth_transactions_header = client.list_rows(eth_transactions_table, max_results=1)\nprint('\\n'.join([str(dict(i)) for i in eth_transactions_header]))","9d07650a":"QUERY = \"\"\" \n                 SELECT DATE(block_timestamp) AS trans_date,\n                        (SUM(value))\/1000000000000000000 AS ETH_transferred\n                        \n                 FROM `bigquery-public-data.crypto_ethereum.transactions`\n                 WHERE DATE(block_timestamp) BETWEEN '2019-01-29' AND '2019-05-28'\n                 GROUP BY trans_date\n                 ORDER BY trans_date\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**12)\nquery_job = client.query(QUERY, job_config=safe_config)\n\neth_data = query_job.to_dataframe()\neth_data.head()","ed3e71b9":"# Merge all dataframes\n\ncombined_data = pd.merge(btc_data,bch_data,on=\"trans_date\")\ncombined_data = pd.merge(combined_data,ltc_data,on=\"trans_date\")\ncombined_data = pd.merge(combined_data,dash_data,on=\"trans_date\")\ncombined_data = pd.merge(combined_data,doge_data,on=\"trans_date\")\ncombined_data = pd.merge(combined_data,eth_data,on=\"trans_date\")\ncombined_data.head()","26efe193":"combined_data.tail()","09592670":"# See file directory\n!ls ..\/input\/cc-prices","4f1f651a":"# Historical data imported into Google Sheets from CoinMarketCap using ImportHTML function.\n# Example URL: https:\/\/coinmarketcap.com\/currencies\/bitcoin\/historical-data\/?start=20190129&end=20190629)\n# Sheet created for each currency, same time frame plus one month of test data\n\nbtc_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - BTC.csv')\nbch_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - BCH.csv')\nltc_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - LTC.csv')\ndash_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - DASH.csv')\ndoge_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - DOGE.csv')\neth_historical = pd.read_csv('..\/input\/cc-prices\/CC Prices - ETH.csv')","d1e6233e":"# Removes commas\nbtc_historical[\"Open*\"] = btc_historical[\"Open*\"].replace({',':''}, regex=True)\n# Changes data types from string to int\nbtc_historical[\"Open*\"] = pd.to_numeric(btc_historical[\"Open*\"])\n# Removes commas from Close** column\nbtc_historical[\"Close**\"] = btc_historical[\"Close**\"].replace({',':''}, regex=True)\n# Changes data types from string to int\nbtc_historical[\"Close**\"] = pd.to_numeric(btc_historical[\"Close**\"])\n# Creates new column \"Price\" using the average of Open and Close\nbtc_historical[\"Price\"] = (btc_historical[\"Open*\"]+btc_historical[\"Close**\"])\/2","5a5534b4":"btc_historical.head()","cf9c4dc0":"# Reindexes data in chronological order\n# Assigns to new column in combined_data\ncombined_data[\"BTC_price\"] = btc_historical[\"Price\"].iloc[::-1].reset_index(drop=True)\ncombined_data[\"BTC_price\"].head()","c493e59b":"# Creates new column in combined_data using the median daily price for each altcoin\n\ncombined_data[\"BCH_price\"] = (bch_historical[\"Open*\"]+bch_historical[\"Close**\"])\/2\ncombined_data[\"LTC_price\"] = (ltc_historical[\"Open*\"]+ltc_historical[\"Close**\"])\/2\ncombined_data[\"DASH_price\"] = (dash_historical[\"Open*\"]+dash_historical[\"Close**\"])\/2\ncombined_data[\"DOGE_price\"] = (doge_historical[\"Open*\"]+doge_historical[\"Close**\"])\/2\ncombined_data[\"ETH_price\"] = (eth_historical[\"Open*\"]+eth_historical[\"Close**\"])\/2\n\n# Reindexes new column to chronological order\n\ncombined_data[\"BCH_price\"] = combined_data[\"BCH_price\"].iloc[::-1].reset_index(drop=True)\ncombined_data[\"LTC_price\"] = combined_data[\"LTC_price\"].iloc[::-1].reset_index(drop=True)\ncombined_data[\"DASH_price\"] = combined_data[\"DASH_price\"].iloc[::-1].reset_index(drop=True)\ncombined_data[\"DOGE_price\"] = combined_data[\"DOGE_price\"].iloc[::-1].reset_index(drop=True)\ncombined_data[\"ETH_price\"] = combined_data[\"ETH_price\"].iloc[::-1].reset_index(drop=True)","c92b9714":"combined_data.head()","fa682e97":"# Create new columns for amount of USD transferred by coin\n# Make columns compatible with .astype('float')\n# Convert amounts to $ millions\n\ncombined_data[\"USD_BTC_transferred\"] = combined_data[\"BTC_transferred\"].astype('float') * combined_data[\"BTC_price\"] \/ 1000000\ncombined_data[\"USD_BCH_transferred\"] = combined_data[\"BCH_transferred\"].astype('float') * combined_data[\"BCH_price\"] \/ 1000000\ncombined_data[\"USD_LTC_transferred\"] = combined_data[\"LTC_transferred\"].astype('float') * combined_data[\"LTC_price\"] \/ 1000000\ncombined_data[\"USD_DASH_transferred\"] = combined_data[\"DASH_transferred\"].astype('float') * combined_data[\"DASH_price\"] \/ 1000000\ncombined_data[\"USD_DOGE_transferred\"] = combined_data[\"DOGE_transferred\"].astype('float') * combined_data[\"DOGE_price\"] \/ 1000000\ncombined_data[\"USD_ETH_transferred\"] = combined_data[\"ETH_transferred\"].astype('float') * combined_data[\"ETH_price\"] \/ 1000000\n\ncombined_data.head()","fd0ffebf":"# Show altcoin usage relative to BTC fees\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import date2num\n\ndate = combined_data[\"trans_date\"]\nfees = combined_data[\"BTC_fees\"]\nusdbtc = combined_data[\"USD_BTC_transferred\"]\nusdbch = combined_data[\"USD_BCH_transferred\"]\nusdltc = combined_data[\"USD_LTC_transferred\"]\nusddash = combined_data[\"USD_DASH_transferred\"]\nusddoge = combined_data[\"USD_DOGE_transferred\"]\nusdeth = combined_data[\"USD_ETH_transferred\"]\n\nfig, ax1 = plt.subplots(figsize=(20,10))\n\nax2 = ax1.twinx()\nax1.plot(date, usdbch)\nax1.plot(date, usdltc)\nax1.plot(date, usddash)\nax1.plot(date, usddoge)\nax1.plot(date, usdeth)\nax2.bar(date.apply(date2num), fees, color=(0.2, 0.4, 0.6, 0.15))\n\nax1.set_ylabel('USD ($) in millions',size=20, rotation = 90)\nax2.set_ylabel('Bitcoin (BTC) paid in fees',size=20)\nax1.legend(loc='upper left',prop={'size': 20})\nplt.title(label='Value Transferred By Altcoin vs BTC Fees',size=30)\n\n# Tilt x-axis labels\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(315)\n\nplt.show()\n","1603d16c":"# Pearson correlation between BTC fees and value transferred of each altcoin\n\nfrom scipy.stats import pearsonr\n\nfees = combined_data[\"BTC_fees\"].astype('float')\nbch = combined_data[\"USD_BCH_transferred\"].astype('float')\nltc = combined_data[\"USD_LTC_transferred\"].astype('float')\ndash = combined_data[\"USD_DASH_transferred\"].astype('float')\ndoge = combined_data[\"USD_DOGE_transferred\"].astype('float')\neth = combined_data[\"USD_ETH_transferred\"].astype('float')\n\nprint(\"BCH\", pearsonr(fees, bch))\nprint(\"LTC\", pearsonr(fees, ltc))\nprint(\"DASH\", pearsonr(fees, dash))\nprint(\"DOGE\", pearsonr(fees, doge))\nprint(\"ETH\", pearsonr(fees, eth))\n","469beb36":"# Our independent variables of interest is BTC fees\n# Independent variable is ETH price the next day\n# We used closing price to simulate at least a 24 hour window\n\ndf = pd.DataFrame()\ndf[\"fees\"] = fees\ndf[\"ETH_price\"] = eth_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\ndf[\"ETH_price_next_day\"] = df[\"ETH_price\"].shift(-1)\ndf.drop([106],axis=0,inplace=True)\ndf\n\npearsonr(df[\"fees\"],df[\"ETH_price_next_day\"])","d975c45c":"# LTC price shows the same level of correlation\n\ndf = pd.DataFrame()\ndf[\"fees\"] = fees\ndf[\"LTC_price\"] = btc_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\ndf[\"LTC_price_next_day\"] = df[\"LTC_price\"].shift(-1)\ndf.drop([106],axis=0,inplace=True)\ndf\n\npearsonr(df[\"fees\"],df[\"LTC_price_next_day\"])","e80a8657":"# The rate of increase may also affect ETH price\n# E.g. a surge in fees could drive many more people to ETH\n\ndf = pd.DataFrame()\ndf[\"fees\"] = fees\ndf[\"ETH_price\"] = eth_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\ndf[\"ETH_price_next_day\"] = df[\"ETH_price\"].shift(-1)\ndf.drop([106],axis=0,inplace=True)\n\ndf[\"delta_fees\"] = df[\"fees\"].shift(-1) - df[\"fees\"]\ndf.drop([105],inplace=True)\n\npearsonr(df[\"delta_fees\"],df[\"ETH_price_next_day\"])","55ff71d6":"# Predict whether ETH will go up the next day with a logistic regression on Bitcoin fees\n# If ETH_price goes up the next day (price_increase is greater than 0), we want to buy\n# price_increase is a buy signal\n\ndf[\"price_increase\"] = df[\"ETH_price_next_day\"] - df[\"ETH_price\"] >= 0","9747f514":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report\n\ncols = [\"fees\"]\nX = df[cols]\ny = df[\"price_increase\"]\n\ndf_test = pd.DataFrame()\ndf_test[\"fees\"] = btc_data[\"BTC_fees\"]\ndf_test[\"ETH_price\"] = eth_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\ndf_test[\"BCH_price\"] = bch_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\n# df_test[\"delta_fees\"] = df_test[\"fees\"].shift(-1) - df_test[\"fees\"]\ndf_test = df_test[105::]\ndf_test.drop([150],inplace=True)\n\nmodel = LogisticRegression()\nmodel.fit(X,y)\n\nX_test = df_test[cols]\ny_test = df_test[\"ETH_price\"] - df_test[\"ETH_price\"].shift(-1)\ny_test.iloc[-1] = True\ny_pred = model.predict(X_test)\n\ny_test = y_test > 0","6704712f":"print(\"The model suggested buying ETH\",sum(y_pred),\"of\",y_pred.size,\"days.\")","d58fc4a4":"model.score(X_test,y_test)","b6031564":"# Start with $100,000\n# Buy and sell ETH when model says\n\nETH = 0\nbank = 100000\nportfolio = []\nday = []\n        \nfor idx, val in enumerate(y_pred):\n    # if model suggests SELL\n    if val == False:\n    # increase the bank by the ETH price * number of ETH held\n        bank = bank + (ETH * df_test[\"ETH_price\"].iloc[idx])\n        # reset the amount of ETH held\n        ETH = 0\n        portfolio.append(ETH * df_test[\"ETH_price\"].iloc[idx] + bank)\n        day.append(idx)\n    # if model suggests BUY\n    else:\n        # buy ETH with all funds \n        ETH = ETH + bank\/df_test[\"ETH_price\"].iloc[idx]\n        bank = 0\n        portfolio.append(ETH * df_test[\"ETH_price\"].iloc[idx] + bank)\n        day.append(idx)\n        \nfig, ax1 = plt.subplots(figsize=(20, 10))\nax1.plot(portfolio,label=\"Model portfolio\")\nax1.set_ylabel('USD ($)',size=16, rotation = 90)\n\n# Tilt x-axis labels\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(315)\n    \n# Graph cost-averaging\n\ncost_avg_bank = 100000\ncost_avg_ETH = 0\ncost_avg_portfolio = []\n\nfor i in range(45):\n    cost_avg_bank = cost_avg_bank - (100000\/45)\n    cost_avg_ETH = cost_avg_ETH + (100000\/45)\/df_test[\"ETH_price\"].iloc[i]\n    cost_avg_portfolio.append(cost_avg_bank+cost_avg_ETH*df_test[\"ETH_price\"].iloc[i])\n    \nplt.plot(cost_avg_portfolio, label=\"Cost averaging\")\n\n# Graph buying all first day\n\nhodl_ETH = 100000\/df_test[\"ETH_price\"].iloc[0]\nhodl_portfolio = []\n\nfor i in range(45):\n    hodl_portfolio.append(hodl_ETH*df_test[\"ETH_price\"].iloc[i])\n    \nplt.plot(hodl_portfolio, label =\"All-in day 1\")\n\n# Graph random model's suggestions\n\n# generate random arrays\nfrom numpy.random import seed\nfrom numpy.random import randint\n# seed random number generator\nseed(1)\n# generate some integers\nrandom_bools = randint(0, 2, 45) > 0\n\nrand_portfolio = []\nrand_ETH = 0\nrand_bank = 100000\n        \nfor idx, val in enumerate(random_bools):\n    if val == False:\n        rand_bank = rand_bank + (rand_ETH * df_test[\"ETH_price\"].iloc[idx])\n        rand_ETH = 0\n        rand_portfolio.append(rand_ETH * df_test[\"ETH_price\"].iloc[idx] + rand_bank)\n    else:\n        rand_ETH = rand_ETH + rand_bank\/df_test[\"ETH_price\"].iloc[idx]\n        rand_bank = 0\n        rand_portfolio.append(rand_ETH * df_test[\"ETH_price\"].iloc[idx] + rand_bank)\n\nplt.plot(rand_portfolio,label=\"Random decisions\")\nplt.legend(loc=\"upper left\",fontsize=14)\nplt.show()","bcbce167":"investing_approaches = [portfolio,cost_avg_portfolio,hodl_portfolio,rand_portfolio]\nfor i in investing_approaches:\n    print(i[len(i)-1])","88ae53d7":"# Bitcoin Cash prices the next day had even stronger correlation with BTC fees than ETH or LTC\n\ndf = pd.DataFrame()\ndf[\"fees\"] = fees\ndf[\"BCH_price\"] = bch_historical[\"Close**\"].iloc[::-1].reset_index(drop=True)\ndf[\"BCH_price_next_day\"] = df[\"BCH_price\"].shift(-1)\ndf.drop([106],axis=0,inplace=True)\ndf\n\npearsonr(df[\"fees\"],df[\"BCH_price_next_day\"])","a3ae4707":"cols = [\"fees\"]\nX = df[cols]\ny = df[\"BCH_price_next_day\"].shift(-1) > df[\"BCH_price\"]\n\nmodel = LogisticRegression()\nmodel.fit(X,y)\n\nX_test = df_test[cols]\ny_test = df_test[\"BCH_price\"] - df_test[\"BCH_price\"].shift(-1)\ny_test.iloc[-1] = True\ny_pred = model.predict(X_test)\n\ny_test = y_test > 0\n\nmodel.score(X_test,y_test)","12a85dc4":"# Value transferred\n\nIn this chart we see spikes of usage across cryptocurrencies in times of high fees.\n\nTo get a better measurement, we'll find the Pearson correlation coefficient for each.","de72eb26":"# ETH Conclusion\n\nOverall, this model performed poorly on the test data.\n\nThe model was 46.67% accurate. Since the model was a binary logistic regression, this was worse than a coin flip. Because ETH price rose during the time frame, the model still yielded 16% returns.\n\n## Alternative investing approaches\n\n### Cost averaging\n\nOf the four approaches we modeled, cost-averaging in was the only strategy which performed worse.\n\n### All-in Day 1\n\nBuying ETH with all 100,000 at the outset yielded 35.31% returns, second only to the random recommendations model, at 35.81% returns.\n\nOf course, this was a fluke, but highlights just how far short this model fell.\n\nBased on the two logistic regressions we ran which included BTC fees as independent variables, we conclude that BTC fees are not a good indicator of ETH price increases the next day.\n\nThese results, especially the highest performing model being random buys and sells also speaks to the low sample size of both training and test data sets.","834a6f61":"# Bitcoin Fees vs Altcoin Usage\n\n## Background\n\nCreated in 2009, Bitcoin (BTC) is the oldest blockchain-based cryptocurrency.\n\nHowever, it's far from the only one.\n\nThere are around 2000 publicly traded cryptocurrencies, informally called 'altcoins'.\n\nLately, Bitcoin has suffered high fees - around 5 to 25 USD per transaction, regardless of the amount sent.\n\nOn Eat Sleep Crypto, we've been predicting that these fees would push users to other blockchains. Because most blockchains are transparent, we can see the transaction amounts on each of them.\n\nIn this analysis, we compare the amounts transacted on each chain to the daily fees paid on BTC.\n\n## Goals\n\nWith the premise that some users will use other blockchains to avoid high fees on BTC, we set out to find out which cryptocurrencies users prefer. To do this, we measure correlation between Bitcoin fees, and value transferred on other chains.\n\nInitially, we were interested in the changes in blockchain use. After finding significant correlations between BTC fees and altcoin use, we looked for actionable trading insights.\n\nRather than simply counting transactions, or measuring the number of coins exchanged, we measure *value transferred* (in USD) by each altcoin.\n\n## Data\n\nTransaction and fee data comes from Google BigQuery's Bitcoin and other cryptocurrency nodes.\n\nWe calculate fees by subtracting transaction outputs from inputs - the remainder goes to miners.\n\nDuring this analysis, we are mindful of a 5 terabyte monthly query limit and take precautions not to exceed it.\n\nHistorical price data comes from CoinMarketCap, which we uploaded to Kaggle.\n\nWe used the most recent 5 months of price data, splitting it 70\/30 into train\/test sets.\n\n## Analysis\n\nWe stuck with common libraries for this analysis including NumPy, Pandas, MatPlotLib, and a few libraries which made working with BigQuery easier.\n\nOur correlations come from SciPy.\n\nWe began the analysis with some preconceptions, but allowed the data to guide our analysis and came to different conclusions than we expected.","0f186595":"# Bitcoin Cash (BCH) and Bitcoin (BTC) fees","c60deb1f":"# Takeaways\n\n### Ethereum\n\nOur analysis suggests Ethereum (ETH) is the closest substitute for Bitcoin (BTC) in times of high fees.\n\nGoing into this analysis, we were expecting Bitcoin Cash (BCH) to have a stronger correlation with BTC fees. However, it makes sense that Ethereum would have such a strong correlation. Ethereum has short transaction confirmation waits, cheap transaction costs, and higher liquidity. ","cbd580b1":"### Hiccups with Ethereum\n\nEthereum has a different schema than the rest of the cryptos and kept throwing an error. I used this bit of code to see its schema.","38c903cb":"# Bitcoin Cash results\n\nThe Bitcoin Cash binary logistic regression model had similar results as Ethereum, with only a 55% fit by the model, with 53% accuracy in predicting. ","b44ed972":"# Trading model\n\nBecause ETH, BCH, and LTC on-chain volume are strongly and significantly correlated with BTC fees, we want to create a trading model which uses these as inputs.\n\nThe price data we're using isn't as granular as the data on-chain, so we're looking for useful correlations with a one-day lag.","51be3750":"# Pearson Correlation Coefficients\n\nEthereum correlates quite highly with BTC fees, suggesting it's a close substitute for Bitcoin in transferring value.\n\nAs somewhat of a household name, this makes sense.\n\nLitecoin and Bitcoin Cash also show relatively high correlations with very low p-values.\n\nDash \"value transferred\" vs BTC fees had a statistically significant p-value but only a weak correlation.\n\nDash\/USD pairs are uncommon, so it makes sense that DASH wouldn't be users' first choice.\n\nDogecoin showed a weak inverse correlation\/non-correlation but without statistical significance, so we don't draw conclusions here.","8421e6ee":"### Ethereum 'transactions' table differences\n\nEthereum's schema replaces 'output_value' with 'value', and ETH is divisible to 18 decimal places.\n\nThe query is modified accordingly.","47cca33a":"## Cleaning data\n\nThe following cells consolidate data into one dataframe for quick reference, and format that data to be used with MatPlotLib and SciPy.","cdc1c8d3":"High BTC fees are correlated with an increase in ETH price the next day, but a large change in fees isn't. This could be due to the decrease in fees not necessarily affecting price. ETH price may stay the same while BTC fees drop, which would suggest people aren't shorting based on this information.\n\nFor this reason we chose to exclude the change in Bitcoin fees from our final analysis.","0f7d8dc1":"The model was only 46.67% accurate. It was 44.44% accurate when run with the \"change in fees\" as an additional input.\n\nEvidently, Bitcoin fees were not a good standalone indicator of ETH price (at least not 24 hours out).\n\nTo illustrate this, we graph alternative investing approaches below to see how they stack up.","9ce179b8":"## Importing all data\n\nCopying query, replacing Bitcoin Cash with Litecoin, Dash, etc. where necessary"}}