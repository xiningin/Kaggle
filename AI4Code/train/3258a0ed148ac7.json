{"cell_type":{"f2e9e48b":"code","45eea36b":"code","eea9a0eb":"code","a4fc7e54":"code","8249a42f":"code","e3e1e991":"code","88300fe4":"code","331b05ce":"code","aa5b35ab":"code","6bbde05f":"code","6558086a":"code","a6fb201a":"code","0cc86758":"code","aa2953fb":"code","0983d4c1":"code","f7e51b6b":"code","8bb7d171":"code","88065d7d":"code","256a8a66":"markdown","83694f60":"markdown","0bd9e53c":"markdown","ae256364":"markdown","44958a37":"markdown","a9a27fb0":"markdown","9a2c4bbc":"markdown","1c8d00e6":"markdown","272083da":"markdown","886f127c":"markdown","bd24e980":"markdown","07be77cc":"markdown"},"source":{"f2e9e48b":"!python -m pip install 'git+https:\/\/github.com\/facebookresearch\/detectron2.git'","45eea36b":"import torch, torchvision\nprint(torch.cuda.is_available())\nimport os, pickle ,random\nimport cv2 as cv\nimport matplotlib.pyplot as plt","eea9a0eb":"from detectron2.utils.logger import setup_logger\nsetup_logger()\nfrom detectron2.data.datasets import register_coco_instances\nfrom detectron2.engine import DefaultTrainer\nfrom detectron2.data import DatasetCatalog, MetadataCatalog\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.config import get_cfg\nfrom detectron2 import model_zoo\nfrom detectron2.utils.visualizer import ColorMode","a4fc7e54":"config_file_path = \"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\"\ncheckpoint_url = \"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\"\noutput_dir = \".\/instance_segmentation\"\nnum_classes = 1\ndevice = \"cuda\"","8249a42f":"train_dataset_name = \"Damage_train\"\ntrain_images_path = \"..\/input\/damage-detection-dataset\/train\"\ntrain_json_annot_path = \"..\/input\/damage-detection-dataset\/train\/COCO_train_annos.json\"\nval_dataset_name = \"Damage_val\"\nval_images_path = \"..\/input\/damage-detection-dataset\/val\"\nval_json_annot_path = \"..\/input\/damage-detection-dataset\/val\/COCO_val_annos.json\"","e3e1e991":"register_coco_instances(name = train_dataset_name, metadata = {},\n                       json_file = train_json_annot_path, \n                        image_root = train_images_path)","88300fe4":"register_coco_instances(name = val_dataset_name, metadata = {},\n                       json_file = val_json_annot_path, \n                        image_root = val_images_path)","331b05ce":"cfg_save_path = \"IS_cfg.pickle\"","aa5b35ab":"def plot_samples(dataset_name, n = 1):\n    dataset_custom = DatasetCatalog.get(dataset_name)\n    dataset_custom_metadata = MetadataCatalog.get(dataset_name)\n    \n    for s in random.sample(dataset_custom, n):\n        img = cv.imread(s[\"file_name\"])\n        v = Visualizer(img[:,:,::-1], metadata=dataset_custom_metadata, scale = 0.5)\n        v = v.draw_dataset_dict(s)\n        plt.figure(figsize = (15,20))\n        plt.imshow(v.get_image())\n        plt.show()\n    ","6bbde05f":"#Verifying\nplot_samples(dataset_name = train_dataset_name, n = 2)","6558086a":"def get_train_cfg(config_file_path, checkpoint_url, train_dataset_name, val_dataset_name, num_classes, device, output_dir):\n    cfg = get_cfg()\n    \n    cfg.merge_from_file(model_zoo.get_config_file(config_file_path))\n    cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(checkpoint_url)\n    cfg.DATASETS.TRAIN = (train_dataset_name,)\n    cfg.DATASETS.TEST = (val_dataset_name,)\n    \n    cfg.DATALOADER.NUM_WORKERS = 2\n    \n    cfg.SOLVER.IMS_PER_BATCH = 2\n    cfg.SOLVER.BASE_LR = 0.00025\n    cfg.SOLVER.MAX_ITER = 1000\n    cfg.SOLVER.STEPS = []\n    \n    cfg.MODEL.ROI_HEADS.NUM_CLASSES = num_classes\n    cfg.MODEL.DEVICE = device\n    cfg.OUTPUT_DIR = output_dir\n    \n    return cfg","a6fb201a":"def main():\n    cfg = get_train_cfg(config_file_path, checkpoint_url, train_dataset_name, val_dataset_name, num_classes, device, output_dir)\n    \n    with open(cfg_save_path,\"wb\") as f:\n        pickle.dump(cfg, f, protocol = pickle.HIGHEST_PROTOCOL)\n    \n    os.makedirs(cfg.OUTPUT_DIR, exist_ok = True)\n    \n    trainer = DefaultTrainer(cfg)\n    trainer.resume_or_load(resume = False)\n    \n    trainer.train()\n    ","0cc86758":"main()","aa2953fb":"from detectron2.engine import DefaultPredictor\ncfg_save_path = \"IS_cfg.pickle\"\n\nwith open(cfg_save_path, \"rb\") as f:\n    cfg = pickle.load(f)","0983d4c1":"cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5\n\npredictor = DefaultPredictor(cfg)","f7e51b6b":"def on_image(image_path,predictor):\n    im = cv.imread(image_path)\n    outputs = predictor(im)\n    v = Visualizer(im[:,:,::-1], metadata = {}, scale = 0.5, instance_mode = ColorMode.SEGMENTATION)\n    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    \n    plt.figure(figsize = (14,10))\n    plt.imshow(v.get_image())","8bb7d171":"image_path = \"..\/input\/damage-detection-dataset\/val\/24.jpg\"\non_image(image_path, predictor)  ","88065d7d":"image_path = \"..\/input\/damage-detection-dataset\/val\/8.jpg\"\non_image(image_path, predictor)  ","256a8a66":"## Training","83694f60":"## Prediction","0bd9e53c":"## Data Visualization","ae256364":"## Loading Dataset","44958a37":"## Importing Libraries","a9a27fb0":"### We can see that the model works fairly well. \n","9a2c4bbc":"Importing Torch","1c8d00e6":"The next steps may be exapanding the dataset.","272083da":"## Registering Datasets","886f127c":"# <p style=\"text-align: center;\">**Car Damage Detection with Detectron2**<\/p>\n","bd24e980":"## Getting Models from Detectron2 Model Zoo","07be77cc":"Installing Detectron2"}}