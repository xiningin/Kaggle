{"cell_type":{"1a99ecda":"code","00bb8921":"code","90ec2d81":"code","6064cd12":"code","34caaf32":"code","408e63c5":"code","1b04fd44":"code","c049dc9d":"code","02794e10":"code","63e546b9":"code","5065c188":"code","538d12b4":"code","75be12b7":"code","1854f259":"code","53c6d51e":"code","a62b4c9f":"code","9d584f3c":"code","fff1e366":"code","1b9225ab":"code","3852566a":"code","667ad019":"code","92f65ca2":"code","49d78f22":"code","6550c1c3":"code","23dd0258":"code","70e29fa0":"code","9576f71c":"code","446ff7ef":"code","5984f21e":"code","5e2ac91f":"code","c56a92f9":"code","92549a19":"code","841ba9e8":"code","211c3039":"code","8006c608":"code","e7bcdc30":"code","3b49822b":"code","a35b5488":"code","f96c47bd":"code","f45d725c":"code","a4b6007a":"code","09d2dd92":"code","710fbcc7":"code","8b590d8b":"code","b23e32c1":"code","9b8cc4bd":"code","dfc0b446":"code","6f176759":"code","2d5b28b2":"code","04a5f7ee":"code","1019aabc":"code","98d57cfe":"code","a2c22fcc":"code","a3eb5283":"code","c5269852":"code","a84459a6":"code","af6a1e41":"code","28684b5a":"code","5ed2d463":"code","61927a7e":"code","a2200473":"code","2a86e782":"code","506a9b85":"code","ce9c12aa":"code","8497312c":"code","d98df6bb":"code","9c9d6095":"code","7d3ed300":"markdown","0bd01b18":"markdown","26a02985":"markdown","3c0b1e3e":"markdown","93ec1164":"markdown","c98cbd44":"markdown","8aedc147":"markdown","a5b14973":"markdown","c79b9d33":"markdown","dacaab37":"markdown","251806a8":"markdown","5053bcfd":"markdown","bc03bb3e":"markdown","5da2330c":"markdown","d6b7f0a6":"markdown","147dcd7f":"markdown","a6c3c2cf":"markdown","d72342c2":"markdown","923a2497":"markdown","f6a5b8d9":"markdown","ca7a4ab7":"markdown","d62cb3fd":"markdown","9df89bb4":"markdown","b1db226b":"markdown","137d9668":"markdown","b770c385":"markdown","83f41d0c":"markdown","2a02dc89":"markdown","f8292a3b":"markdown"},"source":{"1a99ecda":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","00bb8921":"df = pd.read_csv('..\/input\/london-bike-sharing-dataset\/london_merged.csv')","90ec2d81":"df.head()","6064cd12":"df.info()","34caaf32":"df[\"Id\"] = df.index + 1","408e63c5":"df.describe()","1b04fd44":"xdf = df.copy()","c049dc9d":"# Let's visualize it\n\nplt.figure(figsize = (6,8))\nsns.heatmap(xdf.isnull(), cbar = False);","02794e10":"df['cnt'].describe()","63e546b9":"# Let's check it's distriubtion\n\nsns.displot(x = 'cnt', data = xdf, aspect = 2, height = 6, kde = True);","5065c188":"xdf","538d12b4":"# Scatterplot\n\nplt.figure(figsize = (8,6))\nsns.scatterplot(x = 'cnt', y = \"Id\", data = xdf);","75be12b7":"# Boxplot\n\nplt.figure(figsize = (8,6))\nsns.boxplot(x = \"cnt\", data = xdf);","1854f259":"xdf['cnt'].describe()","53c6d51e":"xdf.shape","a62b4c9f":"## Let's normally distribute the data\n\n## function reducing +ve skewness using Sqrt \n\ndef sqrt_transformation(dataframe):\n  return np.sqrt(dataframe)\n\n\n# function for removing outliers\n\ndef remove_outliers(dataframe, column):\n  q3 = dataframe[column].quantile(0.75)\n  q1 = dataframe[column].quantile(0.25)\n  IQR = q3 - q1\n  \n  upper = q3 + (1.5 * IQR)\n  lower = q1 - (1.5 * IQR)\n  \n  dataframe = dataframe[(dataframe[column] > lower ) & (dataframe[column] < upper)]\n\n  return dataframe\n\n","9d584f3c":"# Remove outliers on 'Target Attribute'\n\nxdf = remove_outliers(xdf,'cnt')","fff1e366":"\n# boxplot\nplt.figure(figsize = (8,6))\nsns.boxplot(x = \"cnt\", data = xdf);\n","1b9225ab":"# describe\nxdf['cnt'].describe()","3852566a":"xdf.columns","667ad019":"# Selecting on numerical features from dataset\n\nnumerical_df = xdf.select_dtypes(exclude='object')","92f65ca2":"# Visualizing all the numerical feautures\n\nfor i in numerical_df:\n  sns.displot(x = i, data = xdf, height = 6, aspect = 2, kde = True);\n  plt.xlabel(i, fontsize = 15)","49d78f22":"# Let's check their scatterplots\n\nfor i in numerical_df:\n  plt.figure(figsize = (8,6))\n  sns.scatterplot(x = i, y = \"Id\", data = xdf);\n  plt.xlabel(i, fontsize = 12)\n  plt.ylabel(\"Id\", fontsize = 12)","6550c1c3":"# Boxplot\n\nfor i in numerical_df:\n  plt.figure(figsize = (8,6))\n  sns.boxplot(x = i, data = xdf);","23dd0258":"## Let's remove outliers from 'hum'\n\nxdf = remove_outliers(xdf, 'hum')","70e29fa0":"# after removoing 'hum' outlier\n\nsns.boxplot(x = 'hum', data = xdf);","9576f71c":"# Let's see their relation with target attribute\n\nfor i in numerical_df:\n  plt.figure(figsize = (8,6))\n  sns.scatterplot(x = i, y = 'cnt', data = xdf);","446ff7ef":"xdf['weather_code'].value_counts()","5984f21e":"categorical_df = ['weather_code']","5e2ac91f":"for i in categorical_df:\n  sns.countplot(x = i, data = xdf);","c56a92f9":"## with taget variable\n\nplt.figure(figsize = (8,6))\nsns.violinplot(y = 'cnt', x = 'weather_code', data = xdf);","92549a19":"# convert date (object) into datetime\n\nxdf['timestamp'] = pd.to_datetime(df['timestamp'], format = '%Y%m%d %H:%M:%S')","841ba9e8":"xdf['timestamp']","211c3039":"# Seperating all the year, month and hour and visualize them\n\nxdf['year'] = xdf['timestamp'].dt.year\nxdf['month'] = xdf['timestamp'].dt.month\nxdf['hour'] = xdf['timestamp'].dt.hour","8006c608":"# Let's see which month is the popular for cycle sharing.\n\nplt.figure(figsize = (8,6))\nsns.violinplot(x = xdf['month'] , y = 'cnt', data = xdf);","e7bcdc30":"## Let's look at the year\n\nplt.figure(figsize = (8,6))\nsns.violinplot(x = xdf['year'] , y = 'cnt', data = xdf);","3b49822b":"## Let's visualize in respect to an hour\n\nplt.figure(figsize = (8,6))\nsns.pointplot(x = xdf['hour'] , y = 'cnt', data = xdf);\nplt.ylabel(\"Bike Shares\", fontsize = 12)\nplt.xlabel(\"Hour\", fontsize = 12)","a35b5488":"xdf","f96c47bd":"xdf.drop(['timestamp','Id'], axis = 1, inplace = True)","f45d725c":"X = xdf.drop('cnt', axis = 1)\ny = xdf['cnt']","a4b6007a":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX1 = scaler.fit_transform(X)\nX = pd.DataFrame(data = X1, columns = X.columns)","09d2dd92":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state= 42)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","710fbcc7":"model_score = pd.DataFrame(columns = (\"R2_Score\",\"RMSE\",\"MAE\"))","8b590d8b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, r2_score, mean_squared_log_error, mean_squared_error, make_scorer","b23e32c1":"\nlr = LinearRegression(normalize = True)\nlr.fit(X_train, y_train)","9b8cc4bd":"lr.score(X_test, y_test)","dfc0b446":"preds = lr.predict(X_test)","6f176759":"rmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse))\n\nmae = mean_absolute_error(y_test, preds)\nprint(\"MAE: %f\" % (mae))","2d5b28b2":"from sklearn.metrics import mean_squared_error, r2_score\n\nr2 = 1 - (np.sum((y_test - preds) ** 2)  \/ np.sum((y_test - y_test.mean()) ** 2))\nprint(\"R2:\", r2)","04a5f7ee":"model_score = model_score.append(pd.DataFrame({\"R2_Score\":[r2],\n                                               \"RMSE\":[rmse],\n                                              \"MAE\":[mae]}, index = ['LinearRegression']))","1019aabc":"actual = pd.DataFrame(data = y_test.values, columns = [\"actual\"])\npredicted = pd.DataFrame(data = preds, columns = [\"predicted\"])\n\nfinal = pd.concat([actual, predicted], axis = 1)\nfinal","98d57cfe":"from xgboost.sklearn import XGBRegressor","a2c22fcc":"xgbmodel = XGBRegressor()\nxgbmodel.fit(X_train, y_train)\n\npreds = xgbmodel.predict(X_test)","a3eb5283":"print(\"Score\", xgbmodel.score(X_test, y_test))","c5269852":"rmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse))\n\nmae = mean_absolute_error(y_test, preds)\nprint(\"MAE: %f\" % (mae))","a84459a6":"r2 = 1 - (np.sum((y_test - preds) ** 2)  \/ np.sum((y_test - y_test.mean()) ** 2))\nprint(\"R2:\", r2)","af6a1e41":"model_score = model_score.append(pd.DataFrame({\"R2_Score\":[r2],\n                                               \"RMSE\":[rmse],\n                                              \"MAE\":[mae]}, index = ['XGBoostRegressor']))","28684b5a":"actual = pd.DataFrame(data = y_test.values, columns = [\"actual\"])\npredicted = pd.DataFrame(data = preds, columns = [\"predicted\"])\n\nfinal = pd.concat([actual, predicted], axis = 1)\nfinal","5ed2d463":"y_test.values","61927a7e":"from sklearn.linear_model import Lasso","a2200473":"ls = Lasso(alpha = 0.01)\nls.fit(X_train, y_train)","2a86e782":"preds = ls.predict(X_test)","506a9b85":"rmse = np.sqrt(mean_squared_error(y_test, preds))\nprint(\"RMSE: %f\" % (rmse))\n\nmae = mean_absolute_error(y_test, preds)\nprint(\"MAE: %f\" % (mae))","ce9c12aa":"r2 = 1 - (np.sum((y_test - preds) ** 2)  \/ np.sum((y_test - y_test.mean()) ** 2))\nprint(\"R2:\", r2)","8497312c":"model_score = model_score.append(pd.DataFrame({\"R2_Score\":[r2],\n                                               \"RMSE\":[rmse],\n                                              \"MAE\":[mae]}, index = ['LassoRegressor']))","d98df6bb":"actual = pd.DataFrame(data = y_test.values, columns = [\"actual\"])\npredicted = pd.DataFrame(data = preds, columns = [\"predicted\"])\n\nfinal = pd.concat([actual, predicted], axis = 1)\nfinal","9c9d6095":"model_score","7d3ed300":"<b> Hour","0bd01b18":"### XGB Regressor","26a02985":"<b> Month","3c0b1e3e":"<b> Observations <\/b>\n- Weather code 1 has more number of cycles are shared overall.\n- So, does Weather 2 but little less than Weather 1.\n- Weather 3 is around, 0 - 50K\n- However, Weather 10.0 and Weather 26.0 is highly populated around 0-16K. I think they are regular cyclist on any condition, they ride a bike.","93ec1164":"### Linear Regression","c98cbd44":"As we can see, there are some amount of outliers. Let's confirm this on <b> Boxplot <\/b>","8aedc147":"## Missing Values\n\nBefore deeply analysing our data, let's check the missing values on our dataset.","a5b14973":"We can see <b> July <\/b> and <b> August <\/b> tend to have more number of cycles shared. People in London only use bicycle on the warmest month, we can compare our visulization with this image.\n\n ![2299491-500-temperature-c-en.gif](data:image\/gif;base64,R0lGODdh9AFeAfcAAAQCBFSCpKzC1LQSDLSCfNTi7KRRTARCdHyivKSipERFRNTCxLROTHyGlNSioax4dKwvLDxjhOzy9NTS1BxahISWpNSyrGRkZLzS3MyChOzi3MRqZKw+NGySsOzSzJSyxDxyl8yWlMTExKS2xJSSlMx2dKxiXNSsrGyCjSxmjEx2nCQiJKwjHHR0dBxSfJyipKw5NOSyrezq7LTK2eTq7+TExJyJhPT6\/NTa5CxahLw+NcyamLS1tAxOfIyqxMRSTMRybOze3JSanFyKrFRUVOSioEx6nDQzNOS6tOzKyOTi5HyKnHyas9SKhJy6zMx+fOSqprwqJLxGPLzG0KReXIyirKyqrMRKRPz19Fx+lMza5HSatJyywcTK1KS+zsRaVGyKnLQqJKRybLw2Lfzs7Nza3FR6lGSGpKwaFAxKfNyinLx6dLwuJDxulCRai\/Ti4nSSrPTS0kRynNySjpyTlLQiHOzCvixijNyaldRybOy6uISetJy1zMxiXBQWFFyCpLTG1KSWlJSuxKyOjJx+fAwODExMTGxsbCwtLHx7fLy9vFxcXDw7PKRaW4yMjMzW5KRGRBweHNzKxNS6uIymvYSEhIySlFRyjPTq5MzMzHSKnERqhKx+fJyOjKRmZNzi7AxGfLxMRPTy9NzW1MTS3NSCfMxmYdSSjKy6xNR2c9yqpHSGlDRmlCRWfLQ2LLzN3Pz6\/DRehMRCPBRRgsxva\/Tc3JydnISOlNyMiWR6jMxcWKyanISjvGSMrHyevGyOrFR+pLQdFNR+fMRGQqy+1DRihKzG1ARGeqSmpNSmpNTW1Ozm5KxCPGyWtOzW1KS6zJSWlBxWhOS2tOzu7uTu9NTe5SxejLxCPIyuxMRWT5SepOSmpEx+pOS+vOzOzOTm5HyetOSurKyurMROR5y2xMTO3Lw6NNze3FR+nNympLx+fLwyLCRejPTm5HSWtPTW1ER2nNyWlLQmHOzGxNyenOy+vFyGp9zm7PT29cTW5NSGhMxqZNR6dNyurDRqlPz+\/CwAAAAA9AFeAQAI\/gD\/CRxIsKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTqlzJsqXLlzBjypxJs6bNmzhz6tzJs6fPn0CDCh1KtKjRo0iTKl3KtKnTp1CjSp1KtarVq1izat3KtatXo4YAiB0LoJBNJZVOIvJjpaMtAIw4OgJwZOAysZkUzjUkEC3EQgAUFSQC4NDAFmJb\/MOL8W3cr5BjKiA71ixNRXRPAk7gNvPGSgAQDfzGOCFovpjrPgQsmCDhCwLnAiDyD1Zpi29VR97NEh8+UYfg\/sZXM7dmAJw5OuYIWrRA0gDyJpx2btk\/46sDFwwL24pYBbAE\/p4rE\/7ict7oWSJWMHDahUKFDJURWOkIHcKIePA4AsCQdRFHXODICoVcIIpA7sEnn0CLHOGIHytMMMEFkcAFzT+K+CHWEcpAc0QiAtny4T+OHFFfIZyJw98KjvwFwAsHiUBEIX4sokSIDrbgRyGHHPiPFSsAoEBwqmGRCH9H2DLQEUcowkhorSE0l3P\/QJfXIUdYMWMkJAiUwBEtZLihMv+oCACLA8mwCI2OsDZYYZgJtySH\/2CpZSFcDmQFIkJ+CduPQQ7pmZFIKvnPfono6Icjo0x2hAjpRTrRegPxCUCFAHzzzyJiQThWkLMdWtl3tVmKqaaWiiVDkCuAqog4\/mRlkggAi9AXKmJjiQDrmWKB6NBmBvFAWSE3grahWGkJWxZgcP2Dz2RkKWabWIgw6+NBzY3G2JMAeAoApKcpi9euoPrKH69iRSlQWNWKdQ5B23YKKqRxwidWXMra2+yzlCmWgFiFnHspYIWUJ+nBDCH22K7fwDIZiJyugA8NYsH2ViSiAnAhMuOK1fDD\/\/CJyDcTfOOIYv8E2eVbzs1a6z+g0YZrJhPAEqRiIog1TUGw9GwQYDAWFCQRopxTYa2gFfIuYbRNxshvFdbl3bc3yKbMtIZNINYEpoWmbXT\/OAoLPhpeeNp1XocMAM465wwAD\/9Ak+6bZBk2EGNik61x\/thCijJNkHE5DXVmU4tQtVjKvAUAmSLjM4q7CEeuEKUwl7XIInzyxemfYomDYVkZ74yFWMgkfXnmaqf1HDSGMNviv6rNSts\/sv9D+Q33Xn7bP5mQVRCwBCkhFqSVr1A5e5XzVbZAwcV1gZACiUL6tMSL1UVCUw4kPNhPqj5Zi3uhXdfocOke3b8F\/yPD3ASFFVpw2gkUr\/cAtKihJQLNGtfydTb7PPLSAwAyLrauwjhra5JLoEEoZywFGMKBhuEUyuaGGbMoa2f\/2EwDH2gIw\/DJUOcADCISwaeVeaZ2tLsVrQSCD2o90IHSEYjbxPK7FxVke9KZC8bORiLoaYgO\/vnLTHD4UhuxJAB3YFvMtxIiNz8MRGuL41uX\/hGWFp0NdgcMzQsNkYm3WGYa7BsIfmRwgyBFwkd4A8AUq6i2FtmuWT8MYl2GKJBpJYBlAiFMWsjHNQX68Y3I6x0AiGMLR+RFgvJbYs4saMR\/uE0EgiSkIdWGDIGQ4EwCCdLr0jYX1TxJZgD4ExUBkJZvJMIW16pNGZRRhncRBHgE0ZBi8MEf2sQsNv3hmyHwYbNmKe5GU6sZApWYlwlkwmACUVaX8AG\/Az3pQqO0Yi7\/5ZywlPKUoogTpKamrlH+SVl2ixc02YiYI8jgHBoKXH94CTi0AQCYW8OOHv+BxD7+MYEK\/qujhlbAKe0gUomCqWDG6LKh2uyzn4LhUyU\/tzZogWhXjBCBsgzBLVCKUnFE4BPyGsIssrDnkmdiFpl4OBf27CoSGsqMDDBlqVohUTrDCyCZCNJLyvxpMmusX\/LKdC8RYFSjArGUwLr5moG4TwTTygtOC9iiGY4lLidNaV1WSi2x1EqepPwHH++pQMr9owznWoGhnjdBRYJOWAXakCvBKhaxBlWAA3nPmZ4XF1GAigeweB5daocYUcKMWYbQ1K8o06x\/0IGlxLtlD4kom0iA5jHfcN\/aiDOtPlovgK4kSGTrRpx\/PJOpi\/2HXcWC10oAVrDnONcF+ENUAwqkDG1t\/iH39hZNgeypEESYFfIa+9jnSLYFxMHiP+ZZWa4aN3qCfYiwnDgNGhhEFMlFCD6iO5BzdFa0zm2IEm7QERpgsCGwyCzPzoHMhGAmlQQRRRmo+xDrBo+7BfnGdT1Ch0osdFaixMInEBLe8h73vxxZLoARcheUPcVYhnCfoQbM4JRgxngNLkgMn4IPvYrFbhHOsIY3PJAbKIG9HA6xiEdM4hKb+MQoTrGKV8ziFrv4xTCOsYxnTOMa2\/jGQoGFj+YbPYJ8948yYKFBsJBeIuN4xau6UYhqBQ0DEyQTuinIIlpF5RUomSOJUEReF+FGUbQAESswRHIc0RaYlGEF6I0I\/gmq3CrPdYQHaXHEBS5QHh4QYQWIaMGNRODkI594VZmlQ63OYc8nR5kgy\/iEElaADCWIVyMToM0E0sIXURjiAsrIZn5Ey4g0q+TMP5aIKBy9iEQoQQk8xgg+Og0LQ8AiEVwTxwrEQZ1EKIA4F5iwn\/1Yi2wMYADZqIVDAD0QIdTKCi0aRYMqQYRzZGKERzDEKA6yAuKJwBCIOIR1SrdsETgQUshIBBEY4auDEAFueVUAEPdzXRG0phJu1Mg9VHCAA8DjHg45swQKQoIjMKISWKgEZ2SggLyIAMMDOYTqlHABRBChmIcgIaYbpKQJffkQIP4HCVBGhyGFRwHJqY0t\/qzDAyLu+o++\/jWwh72CFjgC3kSo1cZX3QIRTHkUImh5Ji5HbcF8YwUk2DmI1owMHqygSY7gy5qhkQlGTJFnK0hueeSMEEWYPCPwqHe94ZHvFfx4T1bgASMcgQzaGP1CiXh6wt04pExUIi6ZiEQiRMAIRhtdFDk\/RCYu8DKDLAJuQhbtCmZaELt6+uRfUbniF894xhdkVRc4RAsOoQCZtyATXv\/HBCJRhi5IDEOHziSkRCQDGXRBNCSY3di\/ugIskOAxtrh6dSFckBb0eSDKoD1EtM773vve9wXRN0FKjaNPSKwSlf\/HEXRdp7RMIEIyWAYiyoB54og7qJnIuaYw\/u9pRDD\/HFZGyOARn57Gm\/\/8j19BoJncAnE8xmbUd86zew6zFUSCyqMggd0MAbdF32DjMqR7AwEgBwENsyMQMqBky5B5EfF7vHcMBwCBDngAwceAAsEIboZ5sBBRCmB0o0AlBHEILWJ09tcqCSACzuEIvhJRUCYQWLACzIcP6mcQNkM8AjEBRsYI3UR+vAFf3JVyaDAADEBPRFiE6ZdZxqZxLXBmxFEGnEeAvAOCA1FtGmdy8wGAVNR\/EpN6XrJRBHFm\/qV9CfcYz8cRWReB9tZ1+yZGbmQFcVEJibACsAAmt9d8vMOAn4APLUgiKygCOUccOLACQWYQ3ncQhqA6\/qwHeBHCgwnUa7\/GAMLWEMQmEIIWN4oxdmXQAuq3h\/NnECsgGJgnGLbwNFjIf\/+waPiwZhMgA0TgfIVmM49WG4tABJmWACtQZnbGEfdwhnKwXw1xZhNwaqjmCIzwYURgGDkHG5oIeAUhgqKFCI4AC5inDFD4chcISSuQAPhga6KlCEYmEBdQZhLGaKKwc0+jPp\/HiAkEXw8xif+QhACYCQqwAoegflDYiUJDPHTQKgoAKaUINz+XiowAZheAa4i4Ljv4D9NwCGBmCAtFIgfJEmd2f62iCMzUKgaiVW4la4PYjNHoSEdwdJyxh5WgOhGVc\/OoAO\/yfNkVGxGpJ4aA\/mct4Erepo4tJgokQBy5t4YREWoI0WT\/wJMHYQV9dxCphAWIQHg28RsX4ZMH0YJOORBlgAiHJ1oFcQEhZ5MqFnPE+JIcgYULYQiFphBWUG5esYcLUQkLthDnAB5ayWL44FM2CBKjwHwHQY0OIQ4d6RUykJDPJY4LQTNvOZiEWZiGeZiIaRUkkGDQ9A2UtwjzkZiSeWTi0GyNIhgXUAlKkHT+NZme+WLL8C6tZgVtGWQOY5efmZospgiziHcbRQR+qZqyeWJWcAEFd20DsQiAeRCOdg5K0Eq9+Zu+eQ6+CZzEKZzBaZzFOZzLmZzMiZzHqZzQ2ZzR+ZzSeZ3WmZ3O\/rmd1cmd1Pmd0xme2Omd4qmd3Xme4Dme6Fme5Kme6Wme79me8Mme6+me9Bmf9Tmf9rmf+tmf8umcHlEJFzABrzmXs3mgJWYFrYEMgaUA1oEFChCZCDqhI2YFhiAKy7AIiiEg\/1B2nUmhIMpgr6YAClAJOzMBCfZwIbqiHIYF7IiALBqjMjqjNFqjNnqjOJqjOrqjPNqjPvqjQBqkQjqkRFqkRnqkSJqkSrqkTNqkTvqkUBqlUjqlVFqlVnqlWHpkorClXNqlXvqlYBqmYjqmZFqmZnqmaJqmarqmbNqmbvqmcBqncjqndFqndoqmWZqnerqnfNqnfvqngBqogjqo\/oRaqIZ6qIiaqIq6qIzaqI76qJAaqZI6qZRaqZZ6qZiaqZqaEwZoCI5wIIpABCm6l5t6pSU3CkqwCF3iCHqXCcdUqnkKSQIBDbVyCFawXrDap1hgCBfiQCSqdrl6pbBwCETwGxfgjcigAFUZrE86rIZAqlTkZgnxn\/lJrfh5rfeZrfxprdrqn9X6rdi6reCardeCDx\/2jaN2nErwjTLwDUSGBbCwDEpwIFhAZOnKreIart6qr\/i6r93arwA7ruO5EYcQWAKxDI5gZIYQm3s6D7oAbHogENtwBcFAC3FQEPTABlFQCmTwD0nABgOgBgLhDbLwa+uABE+aAAV3ag1j\/ggvAAtu+I2AigVRIA+4MAYDQAa1MADXgAsDoAMEkQQDcAX8MAAl8A+60ATzEAz\/8A4DULHCEAwD8A5O+kIkShusSaLMGKhvoA8x8A8+Kw1JUAoXOw45OxBkUA+Y8AYD8AX\/MAdscA3ZgLQDMA8CEQP84AFXCq2DCgs4G4n\/sLNhYBB28GveUBtQMAcdC7Ifyl8OIbMC0bHMapiw8LBHG7nrMABfWxDhkLl4YBC\/hhClsA5RIAyS+w\/CMAB2UBC1cAUDMAb18A9kMAwDsA+R+7BPOweTS5h5MAA\/UB5YYA4DoA8JoQMDALk46yO1YAfhAQUDYAqpMADCILul8Gur\/ksQ6xAMpQCy7YAH2UAGwfAONNu2TZC5RbC7WjkHPPuNvna5BFEPpkC1vhYEBbEPA0APAmG\/4fAPUMAP9ToA5vAPqRAMrlsDBMG2tksPAzAHQpsNwYAFeDAApyAQtUAL0oC+6kgGv3YNuqAL86AHv\/YFHUwG4WAO8xAHPFu98lBeOzsA45Byp\/sP4TAAtPAP0tAO6hu7AwELwTAO\/xAPRvsP86APwkYLdYvBg+m8iqcKRqx4b6DAKAu3A9AHh2sQ8yC8bZsEQftrbzAQ6mvABNG7XyC1tksQD6u3SEyhMXwQ9VoQ7yC1KOvFqlsQ7aAL5lC000sQ0dsNdRQOkJvG\/jRKBvIwAPtLEF9cEPMQu86LvwSxDVMcHo78A4D8mUowlg2hDyGsC3kgx6tbC+YQD\/\/wAxJcBwOACTyTuetgvwNwwZM8mUqwtQ4BsgMQhIMrEEBswCg8vd6QucHAygXxBiknBdvQyp75yiWxxjRoysRczAy7zExqzCNhBcvqzKkJzSKBDNNMzcxMEtKszSBqzSGBzd5MoeAMEt08zgeqByGwC+0wEuIMpXcaz\/I8z\/Rcz2v6G13qG236BQMAA2IQDDWwDDWgCk2wD1dw0Aid0PtwCkigAWiaAN9gzxI90RStpojqMxPxx2TQuAmBwv0sBrN8fiIdBtkgDFCAxghx\/s7orGFvQMAU7LqwS8d5EAzDcL7\/YL+y0LGwUApSS8PInBBYEL393AhBOACukA2pgAdIUANM3dRNrQYlIAU9rXh9EAN\/\/M4rHWF6ILxXIBDZu70D0MUDYb+4IMrvEAfBgAnZgL+mMADD0ARmawoNEQepMMiL57YSUQv9UArZYNe\/1gdQ0LHCYA42AASAm9UA1g5tO7T\/gMD\/EMG6OxCiDAtqMABIgAXB8LBJgMI+rFX7QA8cHQe9+2vZ4Aq\/FoRgbBG1cApmq3I4OwA2wALDgNgMhgVQ8A+MzcM+HMHuK8RPOwChQGS1oA+rO8MTPNejzQL6QL\/\/4ABP0AQonRGY\/qAKplDUsM0CA9DOtM1gwC0QYkzGBKHEP6vdAwHEn7sQon3apSDWJYEFds0C2N0EP73df8TY\/1DHdyy9BMEG8iAKMTAAuFAQ\/10KA6EH7O2CuCC1aFACh20SbW3dAxAGkU3fxmXficy\/9zsQWMCzTRvEBCG4wv1r3xgOJTsAG3CxK1ELUvBrLEAL1\/Brw7C5EsHRf9zGFI4U3R3Ko1zK\/zAMffAPwtsE\/Hy9BGG\/wZAHpHy5cdDWAyAFvtwSb8De9JC5tYviDgELtBseWGC\/URDZRTAAbKDF\/BsFv3YFDX7jQWHfu\/y0rMzh7yDK8kDgQ1a0Rq0P4ZHgA1AHE14T\/mRQCkEYDE3gEHGAu0TWuyXgujHAw3bQBLrwD18eBsJgv+vwx2hOFPOtVRz9D8rcDqJMw2deE0v+az8g5gqxDmNg2kTG3\/+AwnObDcPABrobDA8sEE2AC8pc6ZDx5UP75DshDa+95wexDVjga0T2sLDgDa8ru3MABbDAtp2N61XBA1eWEHZAu8MrFGSgyl9g5Qjha80L3JkrDwWBwngN7VShCNN+ED4L3HxMFPRAysEAyglB7FrFD+vQBD9bEJjQ5AOx2eYOFdLe0Z2eAZnOE3GQcqZw4ATh7U2b6Gxb7gMxyBcLCyBL6v++FAF\/EPEgtdcQx0mB7wOwDoVcEPTu\/rP84LoePxCO\/LzCC7QX3xTobhDvgLslQOlGgQTGK73lxfBY0NrEexBqILUVq\/Aw1qmfWiWPKaFPmvEDUQSDrAO8vhRk0MRXYLcJgQmZfus0dqqp2iWZuZmuFqVM\/wZMbgpa\/xRqMMjx7pmyGjc2wgg7c5pRGvP\/oAdUftxUcfC\/RguZbkw2uatB95rNbKQBv+460O5XAfLj8OlPZKAnN6zFWpMMsptK2rtiwADWXgJnbxXhEAZgHvVPhJo45qxBRqBi5Pg3JLD+mq\/\/qvoBy6+uH\/uwP\/vi+QS\/JgYwEOEhcJyy3\/q0z\/r8SZyTEAq\/lgG8v5yKIO3Av\/rM\/\/q+\/v\/820qwBqs+ChBkEKr0SvqwaID7aCCyXwELdN7boV\/wMqaymcCym9IlHuqkK654iP8V9CC1wVYQE4D6OGa1CiBpD6SiTNoOo61yAIEG0z+CBQ0eRJhQ4UKGDR0+VDhPx4Ax9QxOEAFR40aOHT1+BBmy4DSRJU2eRJlSIyyQWA5icakRyroBrrKxQMNBmkqePRuSMTUATZGCEzL5RJpU6VKmTZ0+XShsgB2CWEwFM7ftYBJdA75QTcJmANF\/cSYOWKfHIRZ+AwbsawdVrkl9boURxDhX716+ff3+XUimlFuq\/\/oMEHZlQK2CsNjIi7cuChZdTeYF+\/duQDBawoIN\/njHcN6wAXXUAEbNcNvnYbJMPCCbWvZs2rVt\/0sVTHGNf2S8YnnTjiVBWAN+\/AuKZQ6ba9n+dZ1HMAY\/Dwvjuc1W\/fbseTQHGGg0IPp28uXNnxcprd2cARbjDDAntslB9vIQ\/4MFZQ6Zf2KHM3zjsAH0QS81XNwCb8ACF2SwwQLZ480Ot5q4ZgD+CkplswFM+Y8gtxyKgSZzdnKwr+sGYIGFAZ4osUUXX9yLPao8GOCaf\/QY4DSC3higD1hKEO+gMQYQhaBa7Ojwn7reigvGuSR0yy1XGHOySiuvFAnC3mr6B4kB0ilIwgz+KWKAcA7aZwB6CEpzjoLeycatU7CU\/uuJKNFAyyI69+SzT4JkJOiHAVKpkIxwzJmnnQEgG7JIg2pxa5w4B2hymyjQItFPpvAJQhQPQhEqNk1HJZXB63j7p5aJxjiNngHUikEW+MBEaB5z3PoiOlja8uqNUp+yasJfhyUWvQsTGoghmIxUbIAxi3VqSVqShLZaa0uEoo4BwoDi2qbU+OwHKr0lt9y5RHHUIV6zicPcpewY0pzC3KW3Xp5EQcahdwQdYD57k6olzmC6\/bdggzvCt6FwLr2mm4OTynAAXBaiVqOYDDr2YY2dFMUKhpYsIeONVWJvgBISkqowO9hgmY12C7J1AFpCI4O0fQgio6vN3By5ZwcT\/k6olq7C0Mpnn2Kw74tjBSOMoAO\/6KOPcbEIhg1csPqHnh\/ICOYdLC79ogmaRDW67O2APggKsb4Y12yVvJnompdz242goJLw5iBY5mmXJliSGCCbYLBw1d9aaMnU7YPQZbxxxx+HPHLJJ6e8cssvxzxzzTP\/BhnHMQHSWXw2J710009HPfXGnQE1DIfVY0\/PS3HFL10y7NNxHn0Yy2OAJPAzCBbVh0dd8XLR\/me0GvU0HqmudIhJSyyu0UENKUA7SNUNk\/xiAO2aB3+2jgs6kZaLw+8pD3OSYAxQg3CcEyGpxsNwACSIC+d89PeHypkEyuqKPGjFP58MZh3rGQBv\/sigj26FYwDxKEgt8nAm9hCsINvoEUEweBwCdnApMYgCC2wQhXB9z4M8WU4c2OMwWKwjGPG4VS1qYY54wEIeUWiCPAanN5qsIygDSNwJH0atiiFEf\/9YVkcuJUK3sEiISNGDM9xnB9KoKTP30cNErhDEHU0qFEV74sHeoJuDdMVXjcmNOYrAkjKx4Xf\/gMLsrtA2h\/AIRTZYVBiTcsTeBKYhsEiWHg2mh1tdwSBQcEvbDkSLrsQAFsGwQxN0QaZtCSNN6+CjQnB0p3UIMinx0EcfROZJAioqToYkSDs+MwANGOQNO0EkBLMxDDa4KRg7\/EcTcBHIhsRjlVE6GSl9\/iKrAeRtIYoQptuw0K0BoPIf2RgDkOj4jwOZYyBkiAcUYMGjcXQkBooJRgn6AAFXlMJs+EAISfjyQ+bpzRbJNN4AQkGQMtlBKmc0SCmCIQ\/6EeQ9X9iIHXRmChNaCxAH8AVBaGCEA8DjFQehwS964A8+\/EMC\/jhALwgyDWAc4AA98AFfmuCWGCQEFu+Ep9uaicTNnII0IUOIb5xJEEwMQAoFScLLEhKHNNWopOSCBR\/ScAAEEEQORL3DAWhgkF4cgBfwOEA1PqACaqShGjeIxgG44Qs3HKCiezmFW8BoEJSmtGwr9U2U3PI9PPioOJg5iH3a5RjfxVQfn6nDKYpI\/qckwUICBhFAQ4lKEC08tKn5MAhUb8CHA8wgHwcwQg\/wIQinEqQAvTBGX0q2puCV1aw+kyd+PDDaDQARC8IwBxbwsKE0mQIhGNzQrXSAkCIMSWbTLE8bDnADgnwgGi7wxV8NQgkKRIMCbvjHI7L61Udg9ADsAARhtfDYhBaEofY4yCsOMNQ2oBMDvvjEP3pxDFLIZrUD4FlBPPvZka3UIFJhTFfIgAVa3JIfvCwIuDZDC3z+ox78+sH9FoQDbngUnY+VQzMO0IGDQPUPfwjAP4CBAAyk4R\/V2G4v3NGDAxSgII8YbEF0y4qlFsQLHj1ACqhxkAJrYTauUhBx1ste\/v7BIpMFwe87elcTzjLIDezoKm8lMINp3AOyB+lBG15xD4L4IBr+MIKED4ABggjAHdUoCHUPctCiFiQas8BHYHlxkA40ljjEQOdf0mEX9dLYzf9oh2eEUopRoocPN2Bomv+h3QMgtiA0QPEBBIEfL1Dir1ldCIi73IGEglijxDkAKy58jEcXxAkHiPA\/GAsP1CBSZviZ8Zubl4kJQAQLuJjdPozpIhXs1sRdHXRBtMAOePBhFj1AiEcXouV\/BAChGM3HJ+4Q0qQigKEPDV5X3TAEj0YXNTFwyzX6QAeyGU0URMjIPxRBBEMYgggyMGsmjuKQItzKKw5zUp4PglE9\/htkC1M+CDsOkOZ7vOI\/iibIJxhKgTFjeAsXhuos\/o0QGkD1AP5wwmyk4RY00OE+Ztu2ArLtiEOIOxN7DSOpG\/JNt4Tip1ViKG9f8QcsM9TDhGUCYsvsYoMw+wMEsccBQrqQdh+k5gi5gXBpgyc0kGBbbjMEDwyR7UNYoQzfYK+4FxIHnZlDR1dSN4b94YsDzAIWXrgDKYx8B0r0YBYI+YRH5WDwEpcKCwyHwWbcxpKhE0QBhlCAAkjwWaUn5GrbOsWNXRTyJmc1AC7+wAGiK4iuzqK8CCGFvLXq547IIF0Mmp1bwmC8tuPjAorAAjIU8HhhavwgduBXCfo7Kp0j\/qT0CcEHb0HiuRKpQa1mUlzbD2IIcTRECec4hxLKkHvc6573ud\/97YH\/e98Lv\/i9Dz7yiZ\/84Ruf+cdvvvKdv3zqT9\/60sc+8HmgiOGPAghukYIDcB998kPf\/M9Hf\/Wzf371l78MSpgGJiSAiW+cYxnTEIUMlCCD+E9DBt\/AP\/2rPv7zv9tjv+vLvQRQBvdrvwNcv\/RDQAccvnNYAAfYARMQCvGTwA2EwAdswA5kwAgMPpVou2VwhJgwBGRKKc+7EVmBDHpRgmxLCtaDEcWQh1XzmbaDBUN4AViwAkbQuydSOjKIGFrArWtRAhVMCivgvBYZB\/g4woORPUVYhLjj\/oGUsoN9eAB1wAXZ4qJyUYIrVAoadJInHIcg1BhwS6n3GIBGMAC3KAH8cpcwXAomtBIseMJJEjWjOZA2fENaOJgkXAoydJI3uJW72MOeGYwBgIG0i5+CoUOlsMMrsYPP6LFEPBgyuB61+sI5FEOkeARbKDsrgTEBw8SCiQPSwBPaCUQlbAgaAARB6AU5oMVatMVeEIRXWCot6KpbmAUuoJO2WIcoPMVr0QP7yIZa8AAkGAWNiUSEqIZn8IUAuINjCLRrxEYUm4VZ8Chf\/LqnuLnTQwlBOcNipJfzCqaR4QMmEAKW+4d74IM\/4MZrpAB46IAPwIBXwIB83Ed9fAVs\/ugFf7BGFFuFoXqEjnCHA0C2f0jIhVQohnIogmgqf\/grWGACDssocRSJWgiDTzPHclnES7SSm1MnkYCqHEABhOqApEIxCgAGX\/ACLbg5hygACrjGHugAd2yIaWACj3oonvTJgzgqBEgqGtCCHqAGFXi5Pzg4BDgq7FKJhRsAPPhIb\/khdGsQ3VK9f9BKi8KoR+MojwKpkNACj0LJQDsGePABnQQJXgi0L\/OoXmDLhOiAJFPIf6hLgXTIfygs8eozWEgDhsoHHDgAECCIGxiCWCMZt2inqvwVynCL0UMPAjOwf6DMefuHqaqqq8qqreqqr\/KInjyAHNiEj3KHzFIJ\/h+AhzZwBwmQgA9IgbicS4MABBrwgbs0Btu8S4S4LoK4B194qBMbs6WgBTQYA8l0TD8hgydEgxb5sSD7h+d0NRCLrMmqrH+4LNTciGngBZYMtEpbCljwAcXrACZbiNtcSPRMiBEbxX+grJcLT0HRw+TsC4xriCOqs1S6FHlwkTtTN\/\/EzH8gBfASL\/ICCXwgLo+KBsXbrtlMCgnghayahZlLCPVsst1ECC47iMAauH+oTaSoBZogEPrcCxwxHNLQAZ2qiqvIit6wGZzRmWBIrwiSEidpta28UYRoMY+ABUFQvBT4gL8CBB\/ggxWbCxoos4MjhgrFUAstCEZLrow6\/oiwiwZ0CjtX84lNsiASdQosKILPGFHFaIJgGIODOIzEWAyt4RqvARuxGQuDmAe3mK10C9B\/UDcyMzP8QLOH4IPYPDj4TI1XMLgAOEiDcFILbYMI8zVfADaEYLYe6AVubAalWK06eCPi2Ij\/wE8uTQhoi5P5UJSbkQqd8o0vAA7hABzBIZx+MRLEKYhNmieQw1I7nVVLwzSC2LSGKAeDSwHQpA1BsMnrvND03M1I+wd9OwB+S4gbSMjn8gX7NAkguQb+GCNnuppgKIWKMaN\/6B1Z4A9Y0Ce3oIX8dMw48AbAIZD3uIvrMMX3iA9WTZ7d4da6Qgho8wqoq9M7TbYD\/li2ZluIaWhWdgDU20BSjzICB2WImTwII22KbBAlQnIvCfmCrjiTtEkkDwiGdsiGNQmKYWiCJ3QtTjUIwJmPehgAc1otC4ISCrGQg+iegoKjJsISviMImoUog0O4heADxWsGjbQNAZC3NPBVBqkFejAl9+qdWiADNJjPVFqlIKCarsipAegmJKIFPIBWc3wPAvGG+1ihgqARG8GRpyOIDBEwWMgfWMgDNIAgb8m5XWOohjq8AqGGpsK08HoIo5gNpT2T0PqH7hmIAZjTgoAmIPGVWtAHqnCgRyQW4nHc0\/kbBVEUgOodZygI33CFLvmSf0AXdMKgPtAg47CKfnjc\/tI1HVhAXVgYndRVXcjBByyAhRuAHNGkAB8QBQkw3dx1HAkQBAn9AMvpAkXQXdPRM\/ciDZcYADZAInSqJ\/g6iOugSj3DguFtnA4iWYKoEPZwBViYIQgSFEJp2eDpoR+ShjggRj65XYjAgKNasPZskE\/wtYxiWIXQW9pgDL\/tisC1kapoKdJ4goyBNnMiCD1AThLt2hGNA\/tAA6rQjLvQHlZJiDfwom2wMWjhASV4CLdMMQGwEkHgMOhiiLygDZZwr+KMA0UBXZx5vWJ6lG1xCUgZADTkUnIlV+IYiKzlE0XAYIYgBfbtAJ9tES0wOHcoIhGujWZiCRz5gcM4k2Hw\/hEP8AYPKC1p0J80CYY80JZ0FFmeKIJ4mBhruWCG0OA70E460WAlS4j6PeJQwIJaUFu36APk3V+CcN6X4BVX0Acc3uKDuDiG+IybupYwToh8YN9maEIseQXnGs6LkEHbwII+iIvpBQk53GONsIUisiPn8BYdTghBAIUNLhV8aFZ4KFS8aGSloBZR2MqF0IN1WIcCruSluOSEAJy3KBdB\/rOYOwBDJpYZ0K00oFA19oiuy6iae4Y2gFQsY6xo8LNnmMc2wNuF6IoryCQRKINY9okEoBZ71eJA3mGCAAR5SwEOrhZesEZuoAQjyIJV8IKPIAbIijkGKwgj84c9MNY0\/ngFXgAGTUvWLWA2N1jlmLqem0kIEVAGbO6JWTaIMoHXcuHkfxBlj+Lla9GCAvOoTbiEA5jbjWgqD+Mwg8iHLcAyEDiAaVjNaAipNOgBR0EAXpjfnepIfzkIEWhGhFYJhSaIJSFbb5kGcTgHD02qcXaX+MXoEOMIbNDofxiql37HA4gGi\/IBL7gBQJODjtikGSUIRbhmm04JbS6IHetEaGEoFIgF3drlQ7aW2zwAF3CBA2gDpnYIQIsGkj6AaN6oriJnWdMqj4AxqjQImubqlFBoncFBb9FgFMiB5ypjc+Gzt+QF922Ine2FpCo9fEiq6jIIaji4LMMBjZAKIDII\/q0ObJSYZWJqJXdhqGNA7API63opM2tsA4uOhseGCFhcKkQzCIaSZ4TgRheDhaxiPIfonsUoCGse7ZLQA32wBXoQCzTQY9tI5YDeCHxg0KAsmGnQghIDhI5yatpuiMeCh6b6N3e4A3yYAY+ChwAAhtN7Bo+yh6DmiAoZgIIQ7eMGiZKhAzwp09rYA3aIBiZYZVioyzuAz2Vu5me2a4gQAFbwqIGcBek+GAzQ5R6AA4QliF\/wKG74K1+TgKYayAMwT4PgAw6DVMhuCG2Z738AbPv+CO\/wueasjRMbgjIbWLfshQLjYHzWZ36mAH\/mVwhXCGrA8MIcAlagAG4oB7N5\/oTx8qgAcDaFeNuPKEmPQHFdIAR1UFEW14hVMgA8keG5oIQ+C7sOfcfMau+QMgJ\/qF2lXmmCaGm4Tohn6KpjWGTwqYZmGCq35oPnbgrb8gRIqIMvZ5Bry7ZvOAQFWIStdhcUd4s6sA0a6KqqC\/GCCHN2+CsJ8IFngAWq7ohP0GUjCG70uYctmMdhQ2uG+B+f4JU\/H4CP2yMjEnSPiLhsu4BKUAJHMAQ+75N9eT2Zno1PmMce2GiC2AKvG\/ay5AaO+ABunAVseCIa8IVg5TcTN6lQOwlacAsISLux0ghdaBk2MIeD0Id1YINScIk2eqM4cos58omgazslYASSgAUF\/hg3B9lUj1B3KUgHPMADVKmNptICza7qdHLrhd1sghhMhtAC7g4ALNMjfMAGBq+6LUhwhTgppCgZYPIIfTAFU3jCYTAIB9qHDFkjSJIkSgoDS0KLWF+Jf2i7TFCAgiACV\/QLLCD3lkmFg0A1eUDEbv3WcJWZGpYfOKZk2tCtv+oB5CoIQQgAlvgo3j4A3wZuhfCBoaKAoRUkLzC4Y8hJh7B2k4AFUFGrfWD5guiDYOClA\/EGSDGnWaqlf7ilmNClojeJthOBXCeIRfAYhhDBD\/R745MBWOh4UxgSAvkGJcAC1\/uCNNmGOMjYjTWMAfBYkP2HwwfBBXjCAQCC8eP8\/r73fA\/8\/OZDuoS0h3crKvLGh8Czh5jDrmXAvWXg5wN47xT7BwEEPlQwa2DoAtDn\/RDsfQ78+98HQeAPfegbPy5otQM4hjOYguorgzKwBeIX\/vGbhBMQgR1QEVc4gb+HP1GABQmBIBnIPVhoB++QB8YggznQJm7i3P+Ahfr75pNouwmIeYLANtr4mpn6B3MIBvKvBZgAiGBfBiSJM2Dcv39YaOGBlfAhxId2zA1Aky4ixowaN3LsuBHfkDQH7FH7F+CABHy90vToUBIjnx4HevSiERGfrwMH2Hnx6PMn0KBChxIt+jBfL52zfL2MCMuW0aHehg0YQE+orgGYItaS\/lcVTZKIBr9EFWpIxL9lCmQoVFCmLFyNuAZ4izgg2JUBuhzW0mfnX7gBp4QWCTbg2ry4ioXCwqexccdpGQGx0tlBwuLMmjdzjkjq5IFolG5ghNo5I5kNVfe1+wlrANmIeQZ4aHcwIqbDDwue\/nc24SIS\/5ARcdibKKxg5pyu3jdAWsR4A\/AE1beazPHsi2n80ulvhvbw4sfPUKHzDh+IT8cnFFZ1HRSfBtVgzCvqX7B1GL3G+QeLDUGn\/faPMoYoQEQm7P00zwDxYFQVFrntE1EMA5TykB5vbESGKVUNpuB4oljxEx\/sHHAMAiCquKJiXrShEzzlPGQae9JcUxUt\/thxBMUAibVnDhb8DGCKkE1gtE1VplCkw3hsZYdFRFhA2RE9A9SC0RgDtIPFkFwNEAaUtUCYURxUuYIEi+GJgoxH1YBmRD5pyjmnUHzcodMQchwDDTA2sYeFewOYEwNHpQygYUJZkSHKPoaxlpEahgVDC6J0aoSFKcptE1ESWX3xVxIAFpFQHDq8pwdHs035zzB9\/DPHANl0CF1EzgWTRx0DlJBROF59UamlnK3ZkQ8yzfJBsMkqexMCs+h0DAkHcKNiN1JUlYqOjK2q0VbLZtTHAMLkdWVC\/8kTzzpRYKFLE\/ME8887d9EijGHvbKRDGBDphgW4aJRiHERBVuWK\/j4APwTrAPp4KyybGpEiB573LDxxsDg8C81MK8Ji6AA60ErxaWTAhsUb7QD82g\/\/dIjFHGxck80\/WfkYAz8eFIWFwRl1G1E7HYYRDsiZiahRTgfc0VPQSa94g05Ng5KmHaHgSG5QMkyg9EYGmQOgkRDB6pUw\/kExB3YA5jyeHusM8EN\/WMM1bESvvHhAM5i5fbd4czfdAWksNmFYHXMIJYM4eEdkR1VN3JjtP6ncNWTOVWVWBlo\/WTcAP4aXBXe5RacggOah91YNCCfeIVMbWqQZB7gDXPGxR4SL\/o8HuukxAH0JvTFAH7CU0GNEWd73Ty12nB1UGYr49E42A9Rx\/tHsRHH+ij+WSRY99pzl8+IsSLMYzo0D0EI1R7KLLrIr\/yAxAPT\/IJ7BP0UMADREzl31j3OCG5W8R9tE4XpdsieUod1gCzrhiQATqBmV6MQXcsLC35ynv\/IVbnY\/GEAqFhcOc8zDNucSnpcO0jwtRYVyHMGC43S1LQVypBrccIMlVFC9A\/SiKSy8YVmwoRNg2I1FrKvK6ygYvVqYagz0qRKqYiALQbUPIvOgCGx8tD\/laUQPpkLD\/XDYkeql4RY6cYP3tCjGorziTimoxpzAVxVd1EMj5ose43DTESnFhX8YgUWgxhGWMW6EBkrxYg\/8xMdBCuUT1evBKxaIkeud\/rAJXuHdXyLyRkL2xoQRqQdV0NA1SmLEjwcAhUgowMlR+uQGc3MCR15BgWisEo0JIcUqY\/kMCVSvFwmZBjB00gMfeKQd+sjVkKT4j0mKcQJOOo0dH3K5H+zRbY6JCCOHUg3zNG0kpLxmR+ChE15shBIHMMIf\/lCAh1TDHuYUySsEoQJqpKEaN4iGtHzhhgOkxyNvEAYw9xGWeuxgF8DSojiO2Zlk6mEcd\/nQnPDhhljWMyEKZSgtaXjLXM6El0IRhExWqRM5CBKbHo3IEHSyBY2cJB+qy4gWDpCifHyzB\/gQxAG4+Y8C9MIYQKnFEwwzgCxBgBADaOMYA3oaX65h\/hDzsEPrvhBAOrHUH+G06VEO4NQ\/COAD62znO+M5z4a2iaKX+cc0evjRsULEBzqxJUYo0LRpYaQNLn2lLyTWi2OQIirv+B0aBtBTvfBRqJ1RGyQ8UZWOZdFSfDiAE0jRt4ccNrGkeURLXxrThNAUqh7B6AFmgUqyclYjAtihU1iBnuq5kpx0ywg3DnDSqARmACygwgCk0FeBZuZ2Awis8+JxPDkl5YvR7O0B3CAZDPjiE\/+Ya12DQgN76MQIpe0sdCGS0gOAQCOAmCxEeHGAR2SkAwcAj3+I8UyhiKkiVYmNGP2qGT1ccAAcgMQANrCwXlDAByFF1kPoa98D4Pch\/qldrU8AYSKVRrfAGJGATlIwvGkg4Bn\/+KwgIgKMWWjECQcIQEIOC4+itK4q\/bibKEIs4hGTeMTiUEKJU6ziEgdBFSVQ22AH+4QV07jGNr6xwaZBXYXkeMewwIJjvDsDWMDiBuL1j4rdoRMQAOLGTn4ylKMs5SlTucpWvrKNJSAKeEYDB0R2wy7vVIBP3MGiFJDDP\/BBYiKr1Q0hPQAg\/jFlCeABCE\/ohpafrDn13swO+jDoYF1RgvYOwBVxDBYlUuRHtiYk0f9YdEQOi+F\/aFgj1dDmMSxq4E1jRJtpGKfcdIKsahxgpKKQqEZoQE1\/bJbTEeGza+IQDlwAOtC0\/gjHlCShim5QLCm+SC0fyMxLXwPbKSZyA3PhnBE+OIsbAHY1tJl7jHH+Q6xCuYG1oV0LPOziBB4hQxKKIIxswDjGrqCFKsiHNRqkloY3IPVI2X3Ws9FAm1Jt9UNoENJMQ7vfEVHyAUDnb8XYlhAQyANE2jGPbejDFLIAZoy\/9IMSpOOfmsPHeG+ScYxgOyMCsIZUEznwkfPiGAfAhkdE8JaRbyQrAzD4AIZhjijoNOKF\/kIpVOGNFRoYFgDvwMZZDm0LH8CBHBHBKISuEaoMoBEQiHgdrtGHUtCjBurGZiau5pNQa1bpQp8Bnnb7D0Ws3OsQGUiM++GMLXE6Ewny\/sgemktts4\/8ExuVWEZUTneISCPG6HV11jsSagLvXeg0cBY7khsRshf+Id5oQgZUMXC3b+QGTPCOyBvPcgloswdhTAjSNa\/FnMEi20Sh\/GQqQ7egi77f+Gi3TB\/C+NYH7QPRcIEvxOqDWLLyE\/mAZz0fMUN2xDkqgb8JwNkhcNorvbdoBX3Zme8tlsqhGQfoAESIYc4\/HCAN1AAGL17Rg3+QOg29cIdMnjsU1D8EEHc6wBBsKH2Wa\/cA8DDu2KN\/nLOJYrHzP\/AMTMM9fFNGfMABJBIlRIM\/qMA\/5BIGJIQAuMOzCQX74UPyfd7\/sdwzyIQb8AITVEAVmJ5PwEIH\/vTAHfTXQxhBLNnSYUVDnPzDMzjLAbQB\/mVg3OjEC0LEqRnBQ3iBD2CGWmXG8bmf9dgg3ZFCCjRNFkSANRSFdvVCai1fQgRXOHFTGrwCLwADpR0ABWxBSLmB\/xmhF8xThEWEAUrhQ+iEYhADPKAAGPgA90kVeBkh3UnA+11CBCjbUNyDTT3DAWga+dHNK9iNEfhDff0DSwwPAvCC\/NFh9WycHPRAGCaEiTzTPbyC2HEESx3AJWyCLqUIHTZeb0VAHqKgUHgTO4iVF1RTXUmADzwDLPgRmoVi3PwBGhnBAcxdQvSAPWhESJUhcwEiUNRfJ85gDdIi3dVf0xBfUWxB\/g\/MguJRGgV0QMlN2kOkFKONhyIQgSEYAhHQFh+Rmj\/kxCzAghfcQV35UexFhN0dgBzYW0f9BDXMjQu4wB8iY+NRg4mYnMldXzQBhY61gUbcif9Rg1QdBQ6EhyMcgttlQibikA\/AUwCojgHG2XVh4EOQAjuYHDdEo09MAy\/YYzV9Fz5qngDwwQzcw5uxg4P9hCAEgENkzENEIGaAWc44i+rAAjzlYG8cghWUwTdET9CJ4IEZBcYJBYPB0wz6Qz8+X0m23jnqRAB4pEYYoDlZkzvcAT74ITAYUC9GhB+OhBmFhwIYiAIIR7LQQC\/0ACsI4z9Qwiy4wEgdl1RhBiww\/oFM0BBRskdS6gQr1BMNaEEjPqXmSYB3WQbeVd5KtIRknARmrOUMDmZMzERNaAc+XIAiYAEyKMDwbIQSnMM5KEEZhCZoiiZphuZofmZoKsFnmqYSfENrlmZqnsMymMQBMIE2zQA+sCYWGCAwhBQfVEMaqBqycJ8\/IADE9CJsziZqnqZryuY58EBqMudzNqdqumYX\/IIMugETgKZ3Qud1Uqd4Oud4hid5nqd5pid4rqd1smd1vmd5umd8tid9wid6yud91ud82qd66md+8id+9qd3ogI19QAcKEN9KgGUQIbBOETp+cc3WOf1XA8sRKhpaochVBBnFNlNdGZGwAIv\/nATKZzWQ5zODVDDPeDDDaQBLuaDxVTXP9zAEAjCQ3aELdToRjxCB8hgfbEeYRohINgbemDPMjiCcRgCFf1EPuSSChTfUTBpnP0ePSWE8H2Rk26Ed4XRTLyIEZDGPfjCA67iOsLFjRIFIIAGF\/LCXv6oET7DDMnBlVaNhqYJLBgCVFgBI\/DcRsDCLMwCL5hIU\/CpnwIq+L1CGgSi+TnjAahfRMAUO6gHnjBXnMKUKZZFAuDoQ+ADH+gNPPCBj7IpPgrCPH1TnPoEMbGIIiyCAigADwTFl4KOdjnpq\/6DdhlDAvoDDzogBErgRvjhLMSjTuADgn3lTJZa+8XjUJSp\/k986ai2ROaBKrRWGwIoJTeUqhAFyz8GBSzcSWI+xLYewD2Y4w\/+AzwpafcxqonQgAQcA7EmhN1Fg2O04yQGhbJyBCmshHdgw2BGK6iCpFpJi7VmxKlqTi5hH0YULEaooU9UTzRwAzAgSxtgmDfBg6RiREjRhLM0g6WKnSjwAS6eiD3MIb+OLES44oBVa+zMaegkBQhMIstOYiUmxCUejyc1jS0dACvE6En0wBYE3Q0kny9g6kbUK0S8wo6eBy\/oIskubaZiw\/uh7EYM7N2YlT8EHdWy3n0lRDAWhYp2xL4mq8HcAyXMTQ8MARoyLdo+xA0IQhLaH0YOk8rizakd\/kAKAAMwkMI5kgKC0a3demQ7vqNOIGuw8IE9QEMZEkMA9CMICILgpq3jZtgM+QNXJYTUYs0qVpMXwBQghGXTYKBG6gQ38CRRWBJnXN4BQMMx3MGAsYMviO7jvm5EeIGQjivlxi0pdS1cJNNmKKUlgEL3mS3sBm9HAAJFRQMCzAAwsMItGJ3m6a5iwMIMbEE\/xoLJKa3wXi9GYMCb6YQLNAB2iZEMgKNmkC5c0ADhKuVIihL2ru9GaAFoRIP3wmh6ie\/kJKlRkAIvQIxOpAE3fIAO8ePksq8AJ8R0zYJI+MNsHYfzAoUEEEMvgJxOUEAveEEPTYMxCEDjDvD6wkI\/\/lpGAldS5QBFNfiAEYhEgm2ByGqwCnNEDMLImmIPrG3GAmfEIwjCEEDwkvHCBK4wD2\/EPWQrDsXw+NqvDmKhEcigLgXAB3RrDzdxZwmxYpACMJjBErTkoxFDM+hNBAeAD7zCpzoxGGMTFMOFBIhEBGQBDdkD+npHMzyD9YYxHJPVGBsFLFQDwBVDLlRTDxhB+L1wHP\/xKFUDMpxDVNzAJ7wCH\/hCL8jBGh9APe5EcAKyJPMRlOHAnaxCK\/DCin1DNZQDIHCBDzDBL\/wBPBQDEo8kF85Q06gplrWyK78yLMeyLM8yLdeyLd\/yLd9NbzWAPfrCFvRCAMCDP7DDLHQw\/ipXEwWAgD34wgfMQA0aEOhOsjRD1wytQiOP5DFEQwqAADD0whb4gBMYQz5k8ENIgBYw8TSn8zXpb9MMASV8ADHMQD4UADXMqzrfs9DBVNPkLD73M\/MJgjB3ADr7M0EXtEEfNEIntEIvNEM3tEM\/NERHtERPNEVXtEVfNEZntEZvNEd3tEd\/NEiHtEhnxDccggIsgv6NtEonywVUghI4giEI7UrPtHYoASNIBiwowNvRNE+zSCYowEMQARH3NFGLhwgYwkMswohwxBE0tVM\/NVRHtVRPNVVXtVVfNVZntVZvNVd3tVd\/NViHtViPNVmXtVmfNVprdWdMAFAnBBGE\/nBRx7V2yIAC1CYWuIVc57V2BMdwFIde\/\/VpFMiB7DRgF7Zm0K9hJ7ZiLzZjN7ZjX68oyDQde6jwJkIidIYhrIBma3a2wsIKKIFRWMEKOAJEMMIRbCgiLAJntMAKJOk5rMBld4Zla8cyrEBQYgQJxHZRJMAKELZmJAAiaPYhUPbkEIFmG8JSZwQJELdHiMMKaN0\/HAIdaMY3bDYiEEGr8tFsc4YhkEBrgvYdrQAhF4Von3ZCZMIKmLdmKIICiPdmsHYLPAQ0rEB8y7Zu90Z133ZEOMJ9D0VZ1vdmoLciTMMEGMIhdIYSrAAJyIAE8MAK0IgOrgBib4RzK4BxXACE\/sdFgmeCEmTCfA81C822ElzAESBCbCuALTACIyR3UBhCwzwEFiQCIijAiHh2CzCCAsD1T1iBAiCC1lUCEZw2LFQCIyDCBbBFC1TCEUADURxCArQAaSeEAjjCESwCWiQAkV+AULQAESCCcRxIfI94iV+2FdS3DBgCEHvEbLcAFbH5P6C4irN4UVR3h2v5P2SClvO3UYwCIrz28Lj5P7j5KCzCEQA5eP+EIkh4QkRnQtiCAhyBI0AJlON4AhBFC9h5Qji4Q4gAETBCIojCBawAI+j3T4jDqjL5P2D4P5TBIlx3grRABfHAgQNFfj8ETDf6o0e6fyQCIwj17Mz2IVzA\/gQ4uAh49ls7wgp8sUYYQgtYgbO\/RSLkOG9\/g2efRSWsAHNzhBUQAZQnBCLYwmknACO4HSOQdqsngG+b6meLgJf7xwoYQiY4AiJMAwlEAjRkN1BMOlqUASNUQnwH+7CvgAhMwApIxrYXxWwTQQUpvLGLALIru0fktwgwAuhRvJ4XRSVcNhFU+j8ovFvzAD4wQguIwCJEQkpzhCi09yGIw\/U4uDgoAiO0aqvzgHOnu0cowIsP0wooQ4I7QiYYAjSgdxdItjggyAq8xQVM9yIwZCJIOB2odqpPN1AkuH5rusvDfKtWgrQjQrYrzWyLALVPwBGIg2ejhSh89lAYwhGU\/qUCFM4KJMA0yMAFIAMsREKr1j2+7\/hZUHwmCPVpK8PVnMMFaHyUD0UCEIG33\/0KFI5nK4IjIP5QQHnG\/wMJOIIjxDfYw4IyjP2bj8gicPxQJPzC80DZyxnaRwWdT3zF\/8PFDwUsIMKVt7XHd7w4oDdmEPzJo\/zha7byXEALhC80xDcRxHZLDwUi5P0\/tLY4mDflTIOiC4U4IHUiIDWGvza1Y0EknFgkyMDZH2PE2\/ZDoDeoH0L40kF8H8FSz3HQzHbfr0Bwk30kELJnj3eL57zzr0AkCPcNnD4RZLhHWAFAGLqxYkIiW4oY\/Vt2ARGiI4n+EbHyj2JFixcvGlpx\/uTIigv\/YK1QQpGILRItMKbE2MJRJkSwFEyohDITkRWIVoj7Z+vCshUyVAatmAgiEZ0RxYUsA3LFOaFPKX4TiZCiiISOIEJNqWjjEZyZkJLkIS4hyEhLtVIUJYHitEQrYK6Qe\/Pfoon\/SHxMW3GRLYsyVnxzdMgiphXT9lYURwSWKEQJLkATd4QvtIjIFif+pyRwRR4r\/imYGwmRqBXKNKdWrVkGEXz\/DlX6h6iSU0ZJRVJsmtoQMouwIomgKGNaSLCzeWi2QuQfS0RKFFG+sEgZrEQojaoetUJRpkxWmoYUjvykapawjti6ipK2bZ1KItlaxNo1bNl2KR7hEdLp\/r\/dqqFJ4J8yDhMBEYrEUeAfrFY75BDvakIJv3\/0I\/A1AtFKq4WsNhOJCNn+EWUkIkigKLbUHDEElopsORAaBTezYpqfUhPHEIo+Y8QWEVYQhSJEdLLiggsETEyqbyo6ZL5FQBTRv+T+Eae\/1aissqIjrFACS9MU+YcrZPhjasq9ertokQuIOwIZfFaoBBZxOkvMihu5ulEEyhZxZDNEJLxLs0rmq4gRR4BrQRQ4vykvNZb+qWQFPWcyTTiu7rLpqMSw1HKiC1qAhUcesFjhEzFXQ8YQJaA5UJkVRsFnkas4TGzG4\/75bBpOPV0huUHLaCGSMaH6DBkZZEgkIWiO\/jgHlgsIW0SBZZRBBEpZGWlBBnzgTC6TFUSAJTZRIpmgRsYoumAFaACDBgs4nZoxEqAS4ywTJTIhgVu8kl2WMGZFmWCFZawMmEorOlrktVQZIYJJ4Ebyr+HEDPGTIiU04pMpm3JKbbl\/QvUrun\/uPKJaBbNLDRGJSThioIqTU1QzRrcV1xGUUj1CYRCR6VHjgl9zaQUFDNkvkpFCepg1c6U1Ua5DFGQwNWSOWFGtFZDxGWhtRTvkv70S6GgFQ5zCR+sVFgGKCNEeXU2JsQ25FBq5LkDSJlrTsrEizoTwEif9KhoyNakikStoivBpQa5FaPjnHEMiUVPgx1djqyJY3hCDPChRpK4Ic8srgpdzivir\/PPJfbQIGpQi\/010zjfX\/IbRJxddFBJeW7V0zUR5zSIsdK\/LCnx6X41yjGCRnHDOPYf9H3xuVytz5aGPXvrpoQqT+uG0Fvf67S1X2BFGQPx8Qu7JL9\/889Evn4fgp4fFFrrTj18ofETYUXkRgJVf\/\/3579\/\/\/wEYQAEOkIAFNOABEZhABS6QgQ104AMhGEEJTpCCFbTgBTGYQQ1ukIMd9OAHQRhCEY6QhCU04QlRmEIVrpCFLXThC2EYQxnOkIY1tOENcZhDHe6QhwILCAA7)","c79b9d33":"As always, peak hours are the busiest.","dacaab37":"# Modeling and Evaluation Metrics","251806a8":"## Muttivariate Analysis\n","5053bcfd":"<b> Observations <\/b>\n- t1 , t2 has some outliers\n- hum is negatively skewed and has outliers below q1\n- wind_speed has also some outliers.\n- whereas, weather_code is actually a categorical variable, we won't be fixing it.","bc03bb3e":"## The result","5da2330c":"Our target attribute is <b> cnt <\/b> number of bikes count in a given hour. ","d6b7f0a6":"## Categorical","147dcd7f":"## Univariate Analysis (Independent Variables)","a6c3c2cf":"# Exploratory Data Analysis","d72342c2":"# London Bike Sharing Prediction\n\n### Metadata:\n\n- <b> \"timestamp\" <\/b> - timestamp field for grouping the data\n- <b> \"cnt\" <\/b> - the count of a new bike shares\n- <b> \"t1\" <\/b> - real temperature in C\n- <b> \"t2\" <\/b> - temperature in C \"feels like\"\n- <b> \"hum\" <\/b> - humidity in percentage\n- <b> \"windspeed\" <\/b> - wind speed in km\/h\n- <b> \"weathercode\" <\/b> - category of the weather\n- <b> \"isholiday\" <\/b> - boolean field - 1 holiday \/ 0 non holiday\n- <b> \"isweekend\" <\/b> - boolean field - 1 if the day is weekend\n- <b> \"season\" <\/b> - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\n- <b> \"weathe_code\" category description: <\/b>\n    1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity 2 = scattered clouds \/ few clouds 3 = Broken clouds 4 = Cloudy 7 = Rain\/ light Rain shower\/ Light rain 10 = rain with thunderstorm 26 = snowfall 94 = Freezing Fog\n    \n    \n### Outline:\n\n- <b> Observe Dataset <\/b>\n- <b> Exploratory Data Analysis <\/b>\n    - Missing values\n    - Univariate analysis (Target Attribute)\n    - Univariate analysis (Independent Attributes)\n    - Multivariate analysis (Categorical & Numerical)\n    - Feature Engineering\n    \n- <b> Dataset Preparation <\/b>\n    - Scaling dataset\n- <b> Modeling and Evaluation Metrics <\/b>\n    - Linear Regression\n    - XGBBoostRegressor\n    - Lasso Regressor\n","923a2497":"### Scaling Dataset","f6a5b8d9":"<b> Year","ca7a4ab7":"### Lasso Regressor","d62cb3fd":"## Preparing Dataset","9df89bb4":"# Observe Dataset","b1db226b":"We can observe, some sort outliers below q1 on <b> hum <b> and outliers above q3 on <b> wind speed <\/b>. Let's confirm it on boxplot.","137d9668":"The density of a Cycling has dropped over the years.","b770c385":"## Feature Engineering\n\nLet's extract the date.","83f41d0c":"## Univariate Analysis (Target Attribute)","2a02dc89":"We don't have any missing values. Perfect","f8292a3b":"Let's see the number of outliers present in our target attribute. It's postively skewed, we don't want to touch the prediction data. So leaving it as it is."}}