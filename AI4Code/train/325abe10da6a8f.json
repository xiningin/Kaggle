{"cell_type":{"e1458976":"code","c545cd2f":"code","55dcac90":"code","aaf8d45a":"code","e6a41e98":"code","af6efc00":"code","80439a55":"code","1ffe29e2":"code","ee2382d9":"code","0977d25a":"code","7ef28a40":"code","aef059d6":"code","3da1152d":"code","23389c96":"code","242f5d59":"code","673795f9":"code","56e97c58":"code","6dbc2207":"code","a6eba1c1":"code","92933506":"code","2eb5a35e":"markdown","94130a29":"markdown","67272eaa":"markdown","3c622668":"markdown","ce5b9e44":"markdown","a369ee2e":"markdown","a759faa4":"markdown","5cede8ae":"markdown"},"source":{"e1458976":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c545cd2f":"data_train=pd.read_csv(\"\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv\")","55dcac90":"data_train.head()","aaf8d45a":"train=data_train.loc[:,[\"Open\"]].values\ntrain","e6a41e98":"#feature scaling \nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ntrain_scaled=scaler.fit_transform(train)\ntrain_scaled","af6efc00":"plt.plot(train_scaled)\nplt.show()","80439a55":"#creating data structure\nX_train=[]\ny_train=[]\ntimesteps=50\nfor i in range(timesteps,1258):\n    X_train.append(train_scaled[i-timesteps:i,0])\n    y_train.append(train_scaled[i,0])\nX_train,y_train=np.array(X_train),np.array(y_train)","1ffe29e2":"#reshape\nX_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))\nX_train","ee2382d9":"y_train","0977d25a":"# importing keras libraries\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout\n\nregressor=Sequential()\n\n#adding first rnn layer\nregressor.add(SimpleRNN(units=50,activation=\"tanh\",return_sequences=True,input_shape=(X_train.shape[1],1)))\nregressor.add(Dropout(0.2))\n\n#adding second rnn layer\nregressor.add(SimpleRNN(units=50,activation='tanh',return_sequences=True))\nregressor.add(Dropout(0.2))\n\n#adding third rnn layer \nregressor.add(SimpleRNN(units=50,activation='tanh',return_sequences=True))\nregressor.add(Dropout(0.2))\n\n#adding fourth rnn layer\nregressor.add(SimpleRNN(units=50))\nregressor.add(Dropout(0.2))\n\n#adding the output layer \nregressor.add(Dense(units=1))\n\n#compiling the rnn\nregressor.compile(optimizer=\"adam\",loss=\"mean_squared_error\")\n\n#fitting the rnn to the training set\nregressor.fit(X_train,y_train,epochs=100,batch_size=32)","7ef28a40":"data_test=pd.read_csv(\"\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Test.csv\")\ndata_test.head()","aef059d6":"real_stock_price=data_test.loc[:,[\"Open\"]].values\nreal_stock_price","3da1152d":"data_total=pd.concat((data_train['Open'],data_test['Open']),axis=0)\ninputs=data_total[len(data_total)-len(data_test)-timesteps:].values.reshape(-1,1)\ninputs=scaler.transform(inputs) # min max scaler\ninputs","23389c96":"X_test = []\nfor i in range(timesteps, 70):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)\n\n#visualising the results\nplt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","242f5d59":"import math \nfrom keras.layers import LSTM\nfrom sklearn.metrics import mean_squared_error","673795f9":"data_train.head()","56e97c58":"train=data_train.iloc[:,1].values\nplt.plot(train)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Stock Price\")\nplt.show()","6dbc2207":"#model\nmodel=Sequential()\nmodel.add(LSTM(60,input_shape=(X_train.shape[1],1)))\nmodel.add(Dense(1))\nmodel.compile(loss=\"mean_squared_error\",optimizer=\"adam\")\nmodel.fit(X_train,y_train,epochs=15,batch_size=1)","a6eba1c1":"trainPredict=model.predict(X_train)\ntestPredict=model.predict(X_test)\n\ntrainPredict=scaler.inverse_transform(trainPredict)\ntrainY=scaler.inverse_transform([y_train])\ntestPredict=scaler.inverse_transform(testPredict)\n\ntrainScore=math.sqrt(mean_squared_error(trainY[0],trainPredict[:,0]))\nprint(\"Train Score: %.2f RMSE\" % (trainScore))","92933506":"#visualising \nplt.plot(real_stock_price,color=\"red\",label=\"Real Google Stock Price\")\nplt.plot(testPredict,color=\"blue\",label=\"Predict Google Stock Price\")\nplt.title(\"Google Stock Price Prediction\")\nplt.xlabel(\"Time\"),\nplt.ylabel(\"Google Stock Price\")\nplt.legend()\nplt.show()","2eb5a35e":"<a id=\"8\"><\/a><br>\n# **2.Implementing LSTMs with Keras**","94130a29":"<a id=\"4\"><\/a><br>\n## **-Loading and Preprocessing Data**","67272eaa":"<a id=\"11\"><\/a><br>\n## **-Create LSTMs Model**","3c622668":"<a id=\"6\"><\/a><br>\n## **-Predictions and Visualising RNN Model**","ce5b9e44":"<a id=\"9\"><\/a><br>\n## **-Visualizing Data**","a369ee2e":"<a id=\"3\"><\/a><br>\n# **1.Implementing RNN with Keras**","a759faa4":"<a id=\"5\"><\/a><br>\n## **-Create RNN Model**","5cede8ae":"# **Content:**\n* Recurrent Neural Network (RNN)<br>\n1. [Implamenting RNN with Keras](#3)<br>\n    * [Loading and Preprocessing Data](#4)<br>\n    * [Create RNN Model](#5)<br>\n    * [Predictions and Visualising RNN Model](#6)<br>\n1. [Implementing Long Short Term Memory with Keras](#8)<br>\n    * [Loading and Preprocessing Data](#9)<br>\n    * [Preprocessing Data](#10)<br>\n    * [Create LSTM Model](#11)<br>"}}