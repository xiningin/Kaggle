{"cell_type":{"3c01b7ee":"code","9c9ecb03":"code","477756c4":"code","df834522":"code","117ae200":"code","03657f71":"code","9251549f":"code","c14b81ce":"code","b44192bb":"code","34482d53":"markdown"},"source":{"3c01b7ee":"import pandas as pd\nfrom sklearn import metrics\nimport numpy as np","9c9ecb03":"train = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntarget_columns = ['grapheme_root', 'consonant_diacritic', 'vowel_diacritic']\ny_train = train[target_columns].values","477756c4":"def metric(y, p):\n    scores = []\n    for i in range(3):\n        y_true_subset = y[:,i]\n        y_pred_subset = p[:,i]\n        recalls = []\n        for c in set(y_true_subset):\n            idx = np.where(y_true_subset==c)\n            s = (y_true_subset[idx] == y_pred_subset[idx]).mean()\n            recalls.append(s)\n        s = np.mean(recalls)\n        scores.append(s)\n    final_score = np.average(scores, weights=[2,1,1])\n    return final_score, scores","df834522":"r = np.zeros(len(train))\nc = np.zeros(len(train))\nv = np.zeros(len(train))\nx = np.vstack([r,c,v]).T","117ae200":"metric(y_train, x)","03657f71":"_, scores = metric(y_train, x)","9251549f":"# calculate R score\nr_lb = 0.5500\n(0.25*scores[1] + 0.25*scores[2]) \/ (-0.5) + (r_lb \/ 0.5)","c14b81ce":"# calculate C score\nc_lb = 0.2720\n(0.5*scores[0] + 0.25*scores[2]) \/ (-0.25) + (c_lb \/ 0.25)","b44192bb":"# calculate V score\nv_lb = 0.2860\n(0.25*scores[0] + 0.25*scores[1]) \/ (-0.25) + (v_lb \/ 0.25)","34482d53":"You can check how R,C and V score individually on LB in order to figure out where you lost most of your score. Be aware that R is twice as impactful than C and V.\nMost people will have lost a lot on C and R.\n\nAll you need to do is submit your solution with only predicting for example R and setting C and V to zero and then fill that number in the respective cell below. Same holds for C and V.\nWe can come up with the equations as we know how a solution should score if we only predict zeros."}}