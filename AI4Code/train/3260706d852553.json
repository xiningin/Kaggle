{"cell_type":{"a82abb67":"code","59db0546":"code","d407ac97":"code","43a1efcf":"code","19aa6b6a":"code","ad5cc63f":"code","13bba4b1":"code","b38da7db":"code","adc23640":"code","571ace99":"code","2f462f08":"code","1afbfe26":"code","96424ec5":"markdown","35f2ce1e":"markdown","df507974":"markdown"},"source":{"a82abb67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","59db0546":"from nltk import pos_tag, word_tokenize\nimport pandas as pd\nimport numpy as np\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics.classification import accuracy_score, confusion_matrix\nimport pickle\nfrom imblearn.over_sampling import SMOTE\nfrom keras.utils import np_utils\nimport nltk\nfrom collections import Counter\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import words\nimport keras\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Conv1D, MaxPooling1D\nfrom keras.layers import Flatten\nfrom keras.layers import Embedding\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.layers import LSTM","d407ac97":"test = pd.read_csv(\"\/kaggle\/input\/test_tweet.csv\")\ndf = pd.read_csv(\"\/kaggle\/input\/train_tweet.csv\")","43a1efcf":"df.head(1)","19aa6b6a":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\",\n\n                           \"didn't\": \"did not\", \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\",\n\n                           \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",\n\n                           \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\",\n\n                           \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n\n                           \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\",\n\n                           \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n\n                           \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n\n                           \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\",\n\n                           \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n\n                           \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\",\n\n                           \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\",\n\n                           \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\",\n\n                           \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n\n                           \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\",\n\n                           \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n\n                           \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\",\n\n                           \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n\n                           \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n\n                           \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\",\n\n                           \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\n\n                           \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n\n                           \"you're\": \"you are\", \"you've\": \"you have\"}\n","ad5cc63f":"def cleansing(x):\n    quoteRemoval = x.replace('\"','')\n    spaceRemoval = re.sub(\"\\s\\s+\" , \" \", quoteRemoval)\n    stringRemoval = spaceRemoval.strip()\n    urlRemove = re.sub(r'http\\S+', '', stringRemoval)\n    contract = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in urlRemove.split()]) \n    specialChar = re.sub(r\"[^a-zA-Z]+\", ' ',urlRemove)\n    stop = set(stopwords.words('english')) #to remove stop words like is,the,that etc\n    stpwords = ' '.join([i for i in specialChar.lower().split() if i not in stop])\n    stemmer = WordNetLemmatizer() # steaming is to remove all ing,ly etc ex: stem('playing') = play\n    steming = ' '.join([stemmer.lemmatize(i) for i in stpwords.lower().split()])\n    lengthy = ' '.join([i for i in steming.lower().split() if len(i.strip())>3])   \n    return lengthy\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n\ndf['Cleansed'] = df['tweet'].apply(cleansing)\ntest['Cleansed'] = test['tweet'].apply(cleansing)","13bba4b1":"wordcount = []\nfor i in df['Cleansed'].tolist():\n    for x in i.split():\n        wordcount.append(x)\n\npl = pd.DataFrame(columns=['list'])\npd_list =[]\nfor i in list(Counter(wordcount).values()):\n    if i>3:\n        pd_list.append(i)\npl['list'] = pd_list\npl.plot.area().axhline(5,color='k')\nprint(len(pd_list))","b38da7db":"x = df['Cleansed'].values.reshape(-1,1)\nY = df['label'].values\nTfIdf = TfidfVectorizer(max_features=2472,norm='l1',ngram_range=(1,1),stop_words='english',strip_accents='ascii',analyzer='word') #top 2000 words\ntfmodel = TfIdf.fit(x.ravel()) # ravel is to \n#pickle.dump(tfmodel, open('TFIDF.pkl', 'wb'))\nXX = tfmodel.transform(x.ravel())","adc23640":"s = df['label'].tolist()\nfrom collections import Counter\nprint(Counter(s).keys())\nprint(Counter(s).values())","571ace99":"from keras.layers import LeakyReLU\nmodel = Sequential()\nmodel.add(Dense(128, kernel_initializer ='glorot_uniform',input_dim=XX.shape[1]))\nmodel.add(LeakyReLU(alpha=0.01))\nmodel.add(Dropout(0.20))\nmodel.add(Dense(128, kernel_initializer ='glorot_uniform'))\nmodel.add(LeakyReLU(alpha=0.01))\nmodel.add(Dropout(0.20))\nmodel.add(Dense(output_dim = 1, kernel_initializer ='glorot_uniform', activation = 'sigmoid'))\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adamax',\n              metrics=['acc',f1_m,precision_m, recall_m])\n\nes = keras.callbacks.EarlyStopping(monitor='val_f1_m', min_delta=0, patience=3, verbose=0, mode='auto', baseline=None, restore_best_weights=False)\n\nmodel.summary()\n\nmodel.fit(XX, Y, batch_size = 12, nb_epoch = 100,callbacks=[es],validation_split=0.2)\n","2f462f08":"X_test = tfmodel.transform(test['Cleansed'].values)\npred = model.predict(X_test)","1afbfe26":"test['label'] = [round(i[0]) for i in pred.tolist()]\ntest[['id','label']].to_csv('TFIDF.csv',header=True,index=False)","96424ec5":"Assumption \n* max_features = 2472 (wordcount > 5)","35f2ce1e":"**TFIDF Introduction:**\n\nIn information retrieval, tf\u2013idf or TFIDF, short for term frequency\u2013inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus.\n\n![image.png](attachment:image.png)","df507974":"**Considering accuracy, precision, recall and f1 score to validate my model**\n\n![image.png](attachment:image.png)"}}