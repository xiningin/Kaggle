{"cell_type":{"be1b6ceb":"code","0a51e3ef":"code","6f7adac4":"code","f1d2e563":"code","5c21dc83":"code","f75c7e89":"code","05191612":"code","8f65386b":"code","bea81475":"code","a2b4e51f":"code","37c61ea7":"code","d2b9089f":"code","d8a2ef5f":"code","2774f403":"code","f0ac87e3":"code","6d550c2d":"code","68788670":"code","8ac49bea":"code","f662baa7":"code","a886ebcd":"code","24b56c3b":"code","b569a9ca":"code","92a26aa9":"code","3df92615":"code","36a5e413":"code","6571fd6d":"code","c7cb3c17":"code","8bff909e":"code","cc226fb8":"code","968890ce":"code","71805cdf":"code","d65d80a9":"code","ecb6b680":"markdown","4cbe1d0f":"markdown","d0a0287a":"markdown","fa0627a7":"markdown"},"source":{"be1b6ceb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a51e3ef":"import seaborn as sns\nimport matplotlib.pyplot as plt","6f7adac4":"df = pd.read_csv('\/kaggle\/input\/montcoalert\/911.csv')","f1d2e563":"df.info()","5c21dc83":"df.head()","f75c7e89":"df['zip'].value_counts().head(5) #top 5 postcodes for 911 calls","05191612":"df['twp'].value_counts().head(5) #top 5 townships for 911 calls","8f65386b":"df['title'].nunique() #number of unique call reasons","bea81475":"df['Reason'] = df['title'].apply(lambda x: x.split(':')[0]) #generating a new column based on emergency department\ndf['Reason'].head()","a2b4e51f":"df['Reason'].value_counts() #EMS is the most common reason for 911 calls","37c61ea7":"sns.set_style('whitegrid')\nsns.countplot(x='Reason',data=df)\nplt.ylabel('Calls')\nplt.title('Total number of calls per department')","d2b9089f":"type(df['timeStamp'][0]) #the timestamp column is of the type string","d8a2ef5f":"df['DateTime'] = pd.to_datetime(df['timeStamp'])\ntype(df['DateTime'][0]) #the timestamp column has been converted from string to timestamp type","2774f403":"df['Hour'] = df['DateTime'].apply(lambda x: x.hour)\ndf['Month'] = df['DateTime'].apply(lambda x: x.month)\ndf['Week Day'] = df['DateTime'].apply(lambda x: x.dayofweek)\n#making new columns based on the 'DateTime' column\ndf.head()","f0ac87e3":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Week Day'] = df['Week Day'].map(dmap) #mapping the week days to their names","6d550c2d":"df['Week Day'].head()","68788670":"sns.countplot(x='Week Day', data=df, hue='Reason')\nplt.legend(bbox_to_anchor=(1, 1)) #move legend outside of plot\nplt.ylabel('Calls')\nplt.title('Total number of calls, per department, per week day')","8ac49bea":"sns.countplot(x='Month', data=df, hue='Reason')\nplt.legend(bbox_to_anchor=(1.25, 1))\nplt.ylabel('Calls')\nplt.title('Total number of calls, per department, per month')","f662baa7":"byMonth = df.groupby(by='Month').count()\nbyMonth.head()","a886ebcd":"byMonth['lat'].plot()\nplt.xlim(1,12)\nplt.ylabel('Calls')\nplt.title('Calls per month')","24b56c3b":"df['Date'] = df['DateTime'].apply(lambda x: x.date()) #creating a new date column","b569a9ca":"byDate = df.groupby(by='Date').count() #grouping by date\nbyDate.head()","92a26aa9":"plt.figure(figsize=(10,3))\nbyDate['lat'].plot()\nplt.ylabel('Calls')\nplt.title('Total calls as a function of time')","3df92615":"plt.figure(figsize=(10,3))\nbyDate_traffic = df[df['Reason']=='Traffic'].groupby(by='Date').count()\nbyDate_traffic['lat'].plot()\nplt.ylabel('Calls')\nplt.title('Total traffic calls as a function of time')","36a5e413":"plt.figure(figsize=(10,3))\nbyDate_fire = df[df['Reason']=='Fire'].groupby(by='Date').count()\nbyDate_fire['lat'].plot()\nplt.ylabel('Calls')\nplt.title('Total fire calls as a function of time')","6571fd6d":"plt.figure(figsize=(10,3))\nbyDate_ems = df[df['Reason']=='EMS'].groupby(by='Date').count()\nbyDate_ems['lat'].plot()\nplt.ylabel('Calls')\nplt.title('Total EMS calls as a function of time')","c7cb3c17":"day_hour = df.groupby(by=['Week Day','Hour'])['lat'].count().unstack()\nday_hour.head()","8bff909e":"plt.figure(figsize=(12,6))\nsns.heatmap(data=day_hour,cmap='coolwarm')\nplt.title('Heatmap of calls for a given hour of a weekday')","cc226fb8":"sns.clustermap(data=day_hour,cmap='coolwarm')\nplt.title('Cluster of calls per hour of a given weekday')","968890ce":"day_month = df.groupby(by=['Week Day','Month'])['lat'].count().unstack()\nday_month.head()","71805cdf":"plt.figure(figsize=(12,6))\nsns.heatmap(data=day_month,cmap='coolwarm')\nplt.title('Heatmap of calls per month, per weekday')","d65d80a9":"sns.clustermap(data=day_month,cmap='coolwarm')\nplt.title('Clustermap of calls per month, per weekday')","ecb6b680":"## Heatmaps","4cbe1d0f":"## Basic Analysis","d0a0287a":"## Loading Data","fa0627a7":"## Feature Engineering"}}