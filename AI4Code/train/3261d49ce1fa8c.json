{"cell_type":{"d3bd0b37":"code","f0c221d3":"code","7c355b54":"code","3f36f9bc":"code","87aca181":"code","d4d7ab3b":"code","fadf1b09":"code","4f105875":"code","47d4569e":"code","0e6c6733":"code","796a5fa8":"code","83c6a95c":"code","9de2449f":"code","b14f1881":"code","f8527f9b":"code","24590939":"code","dbf82db7":"code","70574aa7":"code","f444b519":"code","92d58b93":"code","9f6fae31":"code","25ae89b3":"code","b2ad1b0a":"code","255e0791":"code","1b8b4c5d":"code","27b0de63":"code","2d11f51c":"code","526d6297":"code","4fbbb3d9":"code","4d19278c":"code","580de380":"code","0fdcdfe7":"code","21d4c091":"code","4bbd1c1b":"code","521328dd":"code","44c6d37d":"code","49845c4b":"code","2a4a644b":"code","64fe9cda":"code","5ad472fb":"code","e217a1b6":"code","d6b90800":"code","954d8615":"code","fc982c52":"code","5b57a688":"code","8871c0ed":"code","73ac8d8b":"code","f9760952":"code","511e1007":"code","cffb611d":"code","a001475c":"code","8e612c70":"code","df350abe":"code","ef2fb07d":"code","a2aa6057":"code","1aee9fa5":"code","62749980":"code","e07f227a":"code","e2e10d00":"code","d69c6109":"code","358d1229":"code","15653d69":"code","b09366d5":"code","88a504d7":"code","06d31f4f":"code","cb5587a5":"code","ca06e8ed":"code","249afdca":"code","b9abdacc":"code","5d3adf03":"code","01b6b060":"code","f0d43911":"code","d67e33e7":"code","db1a72e4":"code","657479c1":"code","9e5f22b8":"code","d41e8063":"code","338d4ced":"code","d5c17143":"code","41dae795":"markdown","86efdb1f":"markdown","d77f157f":"markdown","4cc02d33":"markdown","235bee58":"markdown","89a81d14":"markdown","781ac6b5":"markdown","3d000ffe":"markdown","fa78d607":"markdown","5dc3d077":"markdown","87460759":"markdown","a41e337d":"markdown","a6b0eabb":"markdown","6d20022b":"markdown","e498562a":"markdown","d6969e76":"markdown","6d096f7f":"markdown","76c4e1fc":"markdown","78f74c08":"markdown","6866bb9a":"markdown","a4b60928":"markdown","721931c7":"markdown","139fc073":"markdown","66e5b838":"markdown","048ef23e":"markdown","55d835af":"markdown","ab57b2f4":"markdown","4582041e":"markdown","807cf0a4":"markdown","df89e20e":"markdown","270d8097":"markdown","5590bce5":"markdown","0be786cc":"markdown","360b2ced":"markdown","5011c79b":"markdown","8c6d265d":"markdown","53bbee43":"markdown","4e977e20":"markdown","8abcbbe0":"markdown","5be05b8e":"markdown"},"source":{"d3bd0b37":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import *\nimport seaborn as sns\n%matplotlib inline\n\n## Input data files are available in the \"..\/input\/\" directory.\n\ndata_path = \"..\/input\/\"\ndata = pd.read_csv(data_path+\"WA_Fn-UseC_-Telco-Customer-Churn.csv\", dtype='unicode', encoding=\"utf-8-sig\")\ndata.head()","f0c221d3":"data.dtypes\n\n","7c355b54":"# Changing datatypes to category\n\n#data[\"gender\"] = data[\"gender\"].astype('category')\n#data[\"SeniorCitizen\"] = data[\"SeniorCitizen\"].astype('category')\n\nobj = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn']\nfor j in obj:\n    data[j] = data[j].astype('category')","3f36f9bc":"#check for missing data\nmissing_data = data.isnull().sum(axis=0).reset_index()\ndata.dtypes","87aca181":"# check count of yes \/ no churns in the dataset\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 9\nfig_size[1] = 5\n\nplt.rcParams[\"figure.figsize\"] = fig_size\nsns.countplot(x='Churn', data=data)","d4d7ab3b":"# check count of yes \/ no churns in the dataset\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 9\nfig_size[1] = 5\n\nplt.rcParams[\"figure.figsize\"] = fig_size\nsns.countplot(x='SeniorCitizen', data=data)","fadf1b09":"fig, axes = plt.subplots(3, 4, figsize=(25, 25))\nsns.countplot('gender',data=data, ax=axes[0,0])\nsns.countplot('PhoneService',data=data, ax=axes[0,1])\nsns.countplot('MultipleLines',data=data, ax=axes[0,2])\nsns.countplot('InternetService',data=data, ax=axes[0,3])\nsns.countplot('OnlineSecurity',data=data, ax=axes[1,0])\nsns.countplot('OnlineBackup',data=data, ax=axes[1,1])\nsns.countplot('DeviceProtection',data=data, ax=axes[1,2])\nsns.countplot('TechSupport',data=data, ax=axes[1,3])\nsns.countplot('StreamingTV',data=data, ax=axes[2,0])\nsns.countplot('StreamingMovies',data=data, ax=axes[2,1])\nsns.countplot('Contract',data=data, ax=axes[2,2])\nsns.countplot('PaperlessBilling',data=data, ax=axes[2,3])\n","4f105875":"from bokeh.io import show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import HoverTool\nfrom bokeh.palettes import Spectral4 \nfrom bokeh.models import ColumnDataSource, LabelSet\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom bokeh.io import save, push_notebook, output_notebook, curdoc\noutput_notebook()\n\nx = list(data.PaymentMethod.unique())#['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']\ncounts = data['PaymentMethod'].value_counts()\n\nhover = HoverTool(\n        tooltips=[\n            (\"Type\", \"@x\"),\n            (\"Count\", \"@counts{int}\")\n            ]\n    )\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts, color=Spectral4))\np = figure(x_range=x, y_range=(0,2500), plot_height=400, plot_width = 800, tools=[hover])\np.vbar(x='x', top='counts', width=0.9, color='color', legend=\"x\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","47d4569e":"# -- convert to numeric \n\ndata.TotalCharges=pd.to_numeric(data.TotalCharges,errors='coerce')\ndata.MonthlyCharges=pd.to_numeric(data.MonthlyCharges,errors='coerce')\ndata.tenure=pd.to_numeric(data.tenure,errors='coerce')","0e6c6733":"# Tenure \nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 12\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\na = data['tenure']\nx = np.log(1\/data['tenure'])\ny = np.exp(data['tenure'])\nz = np.sqrt(data['tenure'])\na.plot.hist()\nplt.xlabel('Tenure')\n#sns.distplot(a, kde = False)","796a5fa8":"print(\"The skewness of SalePrice is {}\".format(data['tenure'].skew()))","83c6a95c":"# Monthly Charges\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 12\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\nm = data['MonthlyCharges']\nxm = np.log(1\/data['MonthlyCharges'])\nym = np.exp(data['MonthlyCharges'])\nzm = np.sqrt(data['MonthlyCharges'])\n\nplt.xlabel('Monthly Charges')\nm.plot.hist()","9de2449f":"print(\"The skewness of SalePrice is {}\".format(data['MonthlyCharges'].skew()))","b14f1881":"# Total Charges\nimport warnings\nwarnings.filterwarnings('ignore')\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 12\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\nt = data['TotalCharges']\nxt = np.log(1\/data['TotalCharges'])\nyt = np.exp(data['TotalCharges'])\nzt = np.sqrt(data['TotalCharges'])\n\nplt.xlabel('Total Charges')\nt.plot.hist()","f8527f9b":"print(\"The skewness of SalePrice is {}\".format(data['TotalCharges'].skew()))","24590939":"# check count of yes \/ no churns among gender in the dataset\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 12\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\nsns.countplot(x='Churn', hue = 'gender', data=data)","dbf82db7":"srchurn = data[((data['Churn']=='Yes' ) & (data['SeniorCitizen']== '0'))|((data['Churn']=='No') & (data['SeniorCitizen']== '0'))].groupby(['Churn'])['Churn'].count()\nsrchurn\nlabels = (np.array(srchurn.index))\nsizes = (np.array((srchurn \/ srchurn.sum())*100))\ncolors = ['Green', 'lightskyblue']\nplt.subplots(figsize=(10, 8))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"% of Churns versus No-churns among non Senior citizens\")\nplt.show()","70574aa7":"srcchurn = data[((data['Churn']=='Yes' ) & (data['SeniorCitizen']== '1'))|((data['Churn']=='No') & (data['SeniorCitizen']== '1'))].groupby(['Churn'])['Churn'].count()\nsrcchurn","f444b519":"labels = (np.array(srcchurn.index))\nsizes = (np.array((srcchurn \/ srcchurn.sum())*100))\ncolors = ['Pink', 'Gold']\nplt.subplots(figsize=(10, 8))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"% of Churns versus No-churns among Senior citizens\")\nplt.show()","92d58b93":"# Males and Females who have not left Telco vs who left\n\ngchurn = data[((data['Churn']=='Yes' ) & (data['gender']== 'Male'))|((data['Churn']=='Yes') & (data['gender']== 'Female'))].groupby(['gender'])['gender'].count()\ngchurn","9f6fae31":"labels = (np.array(gchurn.index))\nsizes = (np.array((gchurn \/ gchurn.sum())*100))\ncolors = ['Pink', 'Violet']\nplt.subplots(figsize=(10, 8))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"% of Churns among Gender\")\nplt.show()","25ae89b3":"from bokeh.io import show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import Spectral5 \nfrom bokeh.models import ColumnDataSource, LabelSet\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom bokeh.io import save, push_notebook, output_notebook, curdoc\noutput_notebook()\n\nx = list(data.Churn.unique())\ncounts = data.groupby(['Churn'])['tenure'].mean()\n\nhover = HoverTool(\n        tooltips=[\n            (\"Churn\", \"@x\"),\n            (\"Mean\", \"@counts{int}\")\n            ]\n    )\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts, color=Spectral5))\np = figure(x_range=x, y_range=(0,50), plot_height=400, plot_width = 800, tools=[hover])\np.vbar(x='x', top='counts', width=0.9, color='color', legend=\"x\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\nshow(p)","b2ad1b0a":"#plt.scatter(data['tenure'], data['TotalCharges'], s=data['tenure'], c =data['TotalCharges'], marker = '.');\n\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.models import ColumnDataSource, LabelSet\nfrom bokeh.models import HoverTool\nfrom bokeh.io import save, push_notebook, output_notebook, curdoc\noutput_notebook()\n\nsource = ColumnDataSource(data=dict(\n            x=data['tenure'],\n            y=data['TotalCharges']            \n        )\n    )\n\np = figure(title=\"Bokeh Markers\", toolbar_location=None)\np.grid.grid_line_color = None\np.background_fill_color = \"#eeeeee\"\n\nhover = HoverTool(\n        tooltips=[\n            (\"Tenure\", \"@x\"),\n            (\"Total Charges\", \"@y{int}\")\n            ]\n    )\n\np = figure(plot_width=700, plot_height=700, tools=[hover],\n           title=\"Mouse over the dots\")\n\np.circle('x', 'y', size=7, source=source)\np.xaxis.axis_label = 'tenure'\np.yaxis.axis_label = 'Total Charges'\n\nshow(p)\n\n# sns.regplot(data.tenure, data.TotalCharges)","255e0791":"from bokeh.plotting import figure, show, output_file\nfrom bokeh.models import ColumnDataSource, LabelSet\nfrom bokeh.models import HoverTool, axes \nfrom bokeh.io import save, push_notebook, output_notebook, curdoc\noutput_notebook()\n\nsource = ColumnDataSource(data=dict(\n            x=data['tenure'],\n            y=data['MonthlyCharges']            \n        )\n    )\n\np = figure(title=\"Bokeh Markers\", toolbar_location=None)\np.grid.grid_line_color = None\np.background_fill_color = \"#eeeeee\"\n\nhover = HoverTool(\n        tooltips=[\n            (\"Tenure\", \"@x\"),\n            (\"Monthly Charges\", \"@y{int}\")\n            ]\n    )\n\np = figure(plot_width=700, plot_height=700, tools=[hover],\n           title=\"Mouse over the dots\")\n\np.circle('x', 'y', size=6, source=source)\np.xaxis.axis_label = 'tenure'\np.yaxis.axis_label = 'Monthly Charges'\nshow(p)","1b8b4c5d":"numdata = (data[['MonthlyCharges','TotalCharges','tenure']].corr())\nmask = np.zeros_like(numdata, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True","27b0de63":"f, ax = plt.subplots(figsize=(12, 10))\n\n# colormap\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(numdata, mask=mask, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5 , cbar_kws={\"shrink\": .5})","2d11f51c":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 11\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=data['TotalCharges'], y=data['Churn'])","526d6297":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 11\nfig_size[1] = 9\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=data['MonthlyCharges'], y=data['Churn'])","4fbbb3d9":"crosstab = pd.crosstab(data['Churn'], data['gender'])\ncrosstab","4d19278c":"#important","580de380":"from scipy import stats\nstats.chi2_contingency(crosstab)","0fdcdfe7":"crosstab1 = pd.crosstab(data['Churn'], data['InternetService'])\nfrom scipy import stats\nstats.chi2_contingency(crosstab1)","21d4c091":"crosstab2 = pd.crosstab(data['Churn'], data['Contract'])\nfrom scipy import stats\nstats.chi2_contingency(crosstab2)","4bbd1c1b":"crosstab3 = pd.crosstab(data['Churn'], data['SeniorCitizen'])\nfrom scipy import stats\nstats.chi2_contingency(crosstab3)","521328dd":"# missing value check\n\ndata.isnull().sum() \n\n# treating missing values in total charges column\n\ndata['TotalCharges'] = data['TotalCharges'].fillna((data['TotalCharges'].median()))","44c6d37d":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 10\nfig_size[1] = 7\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=data['tenure'])","49845c4b":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 10\nfig_size[1] = 7\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=data['TotalCharges'], palette=\"Set2\")","2a4a644b":"data_model=data\ndata_model=data_model.drop(columns=['customerID'])","64fe9cda":"data_dummy=pd.get_dummies(data_model, drop_first=True)","5ad472fb":"X=data_dummy.iloc[:,0:30]\nX.dtypes","e217a1b6":"Y=data_dummy.iloc[:,30]","d6b90800":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1)","954d8615":"X_test.shape\nX_train.shape\ny_test.shape\ny_train.shape","fc982c52":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","5b57a688":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlgmodel = LogisticRegression()\nlgmodel.fit(X_train, y_train)","8871c0ed":"y_pred = lgmodel.predict(X_test)\nprint('Accuracy of logistic regression model on test data: {:.2f}'.format(lgmodel.score(X_test, y_test)))","73ac8d8b":"from sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nmodelCV = LogisticRegression()\nresults = model_selection.cross_val_score(modelCV, X, Y, cv=kfold, scoring='accuracy')\nprint(\"10-fold cross validation average accuracy: %.2f\" % (results.mean()))","f9760952":"lgmodel.coef_","511e1007":"import numpy as np\ncoefs=lgmodel.coef_[0]\ntop_three = np.argpartition(coefs, -10)[-10:]\ntop_three_sorted=top_three[np.argsort(coefs[top_three])]","cffb611d":"print(data_dummy.columns.values[top_three_sorted])","a001475c":"data['Churn']= data.Churn.map(dict(Yes=1, No=0))","8e612c70":"Y=data['Churn']\nY","df350abe":"import statsmodels.api as sm\nlogit = sm.Logit(Y,X)\n\n# fit the model\n#result = logit.fit()","ef2fb07d":"from scipy import stats\nstats.chisqprob = lambda chisq, df: stats.chi2.sf(chisq, df)\n\n#print(result.summary())","a2aa6057":"#np.exp(result.params)","1aee9fa5":"from xgboost import XGBClassifier\nxgb1 = XGBClassifier()","62749980":"xgb1.fit(X_train, y_train)","e07f227a":"from sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nxgb1_pred = xgb1.predict(X_test)\nxgb1_pred_prob = xgb1.predict_proba(X_test)\naccuracy = accuracy_score(y_test, xgb1_pred)\nprint('Accuracy = {:0.2f}%.'.format(accuracy))","e2e10d00":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1)\n\nfeature_importances_xgb = pd.DataFrame(xgb1.feature_importances_,\n                                  index = X_train.columns,\n                                  columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances_xgb","d69c6109":"params = {\n        'objective': ['binary:logistic'],\n        'min_child_weight': range(1,8,2),\n        'gamma':[i\/10.0 for i in range(0,5)],\n        'max_depth': [3, 4, 5, 6, 7, 8],\n        'learning_rate' : [0.1, 0.2, 0.01],\n        'n_estimators' : [1000, 2000],\n        'subsample':[i\/10.0 for i in range(6,10)],\n        'colsample_bytree':[i\/10.0 for i in range(6,10)],\n        'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n        }","358d1229":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nrs = GridSearchCV(xgb1,\n                  params,\n                  cv=5,\n                  scoring=\"accuracy\",\n                  n_jobs=1,\n                  verbose=2)","15653d69":"#rs.fit(X_train, y_train)\n#best_est = rs.best_estimator_\n#print(best_est)","b09366d5":"xgb2 = XGBClassifier(colsample_bylevel= 0.6,\n colsample_bytree = 0.8,\n max_depth = 9,\n min_child_weight = 2, gamma= 1,\n n_estimators = 600, learning_rate=0.01, nthread = 1, reg_alpha = 0.1)","88a504d7":"xgb2.get_params\nxgb2.fit(X_train, y_train)","06d31f4f":"from sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nxgb2_pred = xgb2.predict(X_test)\nxgb2_pred_prob = xgb2.predict_proba(X_test)\naccuracy = accuracy_score(y_test, xgb2_pred)\nprint('Accuracy = {:0.2f}%.'.format(accuracy))","cb5587a5":"from sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nresults = model_selection.cross_val_score(xgb2, X, Y, cv=kfold, scoring='accuracy')\nprint(\"10-fold cross validation average accuracy: %.2f\" % (results.mean()))","ca06e8ed":"rfc = RandomForestClassifier(n_estimators=1000, max_depth=None)\nrfc = rfc.fit(X_train, y_train)","249afdca":"#check for missing data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1)\nmissing_data1 = X_train.isnull().sum(axis=0).reset_index()\nmissing_data1\nX_train['TotalCharges'] = X_train['TotalCharges'].fillna((X_train['TotalCharges'].median()))","b9abdacc":"#check for missing data\nmissing_data_test = X_test.isnull().sum(axis=0).reset_index()\nmissing_data_test\nX_test['TotalCharges'] = X_test['TotalCharges'].fillna((X_test['TotalCharges'].median()))","5d3adf03":"bigrfc_predictions = rfc.predict(X_test)\nbigrfc_predictions_prob = rfc.predict_proba(X_test)\naccuracy_rf = accuracy_score(y_test, bigrfc_predictions)\nprint('Accuracy = {:0.2f}%.'.format(accuracy_rf))","01b6b060":"from sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nresults = model_selection.cross_val_score(rfc, X, Y, cv=kfold, scoring='accuracy')\nprint(\"10-fold cross validation average accuracy: %.2f\" % (results.mean()))","f0d43911":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, lgmodel.predict(X_test))","d67e33e7":"fpr, tpr, thresholds = roc_curve(y_test, lgmodel.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","db1a72e4":"#xgb_roc_auc = roc_auc_score(y_test, xgb2.predict(X_test))\nrf_roc_auc = roc_auc_score(y_test, rfc.predict(X_test))","657479c1":"rf_roc_auc","9e5f22b8":"fpr, tpr, thresholds = roc_curve(y_test, rfc.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='RF (area = %0.2f)' % rf_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","d41e8063":"# Random Forest\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, bigrfc_predictions)\nprint(confusion_matrix)","338d4ced":"# XGB\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, xgb2_pred)\nprint(confusion_matrix)","d5c17143":"# Logistic model\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","41dae795":"<a id='ST'><\/a>\n\n## Statistical Tests","86efdb1f":"#### Total Charges distribution with respect to Churn","d77f157f":"<a id='LR'><\/a>\n\n### Logistic Regression","4cc02d33":"#### The Numeric variables score high in the Xgb feature importance","235bee58":"### Non-Senior citizens who have not left Telco vs who left","89a81d14":"#### Without much feature engineering, the accuracy is at 81%. We can revisit our hypothesis phase and come up with more features  and look at improving the scores.","781ac6b5":"#### Median is higher for No than for customers who have churned","3d000ffe":"<a id='CP'><\/a>\n\n### Correlation Plot","fa78d607":"tenure                                   0.942322\nMonthlyCharges                           0.960432\nTotalCharges                             1.000318\ngender_Male                              0.978355\nSeniorCitizen_1                          1.239957\nPartner_Yes                              0.997312\nDependents_Yes                           0.857471\nPhoneService_Yes                         3.784793\nMultipleLines_No phone service           3.161928\nMultipleLines_Yes                        1.563475\nInternetService_Fiber optic              5.771657\nInternetService_No                       0.774277\nOnlineSecurity_No internet service       0.774246\nOnlineSecurity_Yes                       0.814269\nOnlineBackup_No internet service         0.774260\nOnlineBackup_Yes                         1.026127\nDeviceProtection_No internet service     0.774281\nDeviceProtection_Yes                     1.159152\nTechSupport_No internet service          0.774236\nTechSupport_Yes                          0.836193\nStreamingTV_No internet service          0.774240\nStreamingTV_Yes                          1.806134\nStreamingMovies_No internet service      0.774257\nStreamingMovies_Yes                      1.829067\nContract_One year                        0.513185\nContract_Two year                        0.249179\nPaperlessBilling_Yes                     1.407543\nPaymentMethod_Credit card (automatic)    0.917142\nPaymentMethod_Electronic check           1.357617\nPaymentMethod_Mailed check               0.944913","5dc3d077":"### XGB gives an 81% accuracy for the test set and the CV score is at 80%","87460759":"#### Hyperparameter tuning","a41e337d":"#### Its almost equal with females a little higher than the males","a6b0eabb":"   ### Stats model approach to check coefficients","6d20022b":"### Total Charges and Tenure are correlated, but for now retaining both the variables for model building","e498562a":"### Relation between tenure & Total charges","d6969e76":"### Looking at the odds ratio phone service being yes , Optic fibre as internet service are high in number compared to the reference class and have high chances in a customer exiting.","6d096f7f":"<a id='RF'><\/a>\n\n### Random Forest","76c4e1fc":"<a id='UV'><\/a>\n\n## Univariate analysis","78f74c08":"#### The above results tell us that there is  a significance or dependency between Contract and churn.","6866bb9a":"<a id='DC'><\/a>\n\n## Data Pre-processing","a4b60928":" ## Modeling","721931c7":"#### The above results tell us that there is  a significance or dependency between Internet Service and churn.","139fc073":"<a id='eda'><\/a>\n\n## Exploratory Analysis","66e5b838":"#### The above results tell us that there is no significance or dependency between gender and churn.","048ef23e":"####  Mean tenure of Churned Customers Vs No-Churn Customers ","55d835af":"#### A Logit model gives 81% accuracy on the test set. lets check the CV score.","ab57b2f4":"<a id='GB'><\/a>\n\n### Gradient Boosting","4582041e":"### Senior citizens who have not left Telco vs who left","807cf0a4":"#### Monthly Charges distribution with respect to Churn","df89e20e":"<a id='BV'><\/a>\n\n## Bivariate analysis","270d8097":"#### ROC-AUC for the above models","5590bce5":"   ### Among MALE and FEMALE, who churned more?","0be786cc":"#### Among the 3 numeric variables, total charges seem to be a little positively skewed but for modeling i'll go ahead without transforming the variable.","360b2ced":"#### Median is higher for Yes, than for customers who have not churned","5011c79b":"<a id='ME'><\/a>\n\n### Model Evaluation","8c6d265d":"## Table of Contents\n\n1. [Exploratory Analysis](#eda)\n   1. [Univariate](#UV)\n   2. [Bivariate](#BV)\n      1. [Correlation plot](#CP)\n   3. [Statistical tests](#ST)\n2. [Data Pre-processing- Outlier & Missing value treatment](#DC)\n3. [Modeling](#MD)\n    1. [Logistic Regression](#LR)\n    2. [Gradient Boost](#GB)\n    3. [Random Forest](#RF)\n4. [Model Evaluation](#ME)","53bbee43":"#### Confusion Matrix","4e977e20":"### Distribution of numeric variables","8abcbbe0":"#### Going by the plots above, i have imputed but have not treated outliers as they seem realistic. Going ahead as is","5be05b8e":"#### The above results tell us that there is  a significance or dependency between Senior Citizenship and churn."}}