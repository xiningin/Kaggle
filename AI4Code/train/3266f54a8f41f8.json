{"cell_type":{"99717616":"code","fce06738":"code","f89d7447":"code","3996286c":"code","c65a117d":"code","e6d4f3ea":"code","33ae5341":"code","49e90339":"code","904f7f4b":"code","20340cd7":"code","e45ba039":"code","20857748":"markdown","2fc60b5b":"markdown","92a2eec6":"markdown","0ffec328":"markdown","d4edc88d":"markdown","6ce9d516":"markdown","2622cf7e":"markdown","d6c44598":"markdown","5478c718":"markdown","b1c48837":"markdown"},"source":{"99717616":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport glob # library for loading images from a directory\nimport cv2\nfrom sklearn.model_selection import train_test_split \n","fce06738":"\ndef get_image_data(image_id, image_type):\n    img = _get_image_data_opencv(image_id, image_type)\n    img = img.astype('uint8')\n    return img\n\ndef get_image_data_opencv(fname):\n    img = cv2.imread(fname)\n    assert img is not None, \"Failed to read image : %s\" % (fname)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return img\n\n\ndef get_lightness_channel_from_image(image):\n    HLS_img = cv2.cvtColor(image, cv2.COLOR_BGR2HLS)\n    lightness_channel = HLS_img[:,:,1]\n    return lightness_channel\n\ndef calculate_image_average(image):\n    avr =cv2.mean(image)[0]\n    return avr","f89d7447":"from pathlib import Path\n\n\ndirec = Path('..\/input\/day-time-and-night-time-road-images\/')\nfilepaths = list(direc.glob(r'**\/*.jpg'))\nLabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepaths))\n\nfilepaths = pd.Series(filepaths, name='FilePaths').astype(str)\nLabels = pd.Series(Labels, name='Labels').astype(str)\n\nimg_df = pd.merge(filepaths, Labels, right_index = True, left_index = True)\n\n#Resampling it\nimg_df=img_df.sample(frac = 1).reset_index(drop=True)\nimg_df.head()","3996286c":"import matplotlib.pyplot as plt\n\nf,a = plt.subplots(nrows=2, ncols=4, figsize=(13, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(a.flat):\n    ax.imshow(plt.imread(img_df.FilePaths[i]))\n    ax.set_title(img_df.Labels[i])\n    \nplt.tight_layout()\nplt.show()","c65a117d":"print(f\" Total number of images : {img_df.shape[0]} \\n classes number : {img_df.shape[1]} \")","e6d4f3ea":"img_df['Labels'].value_counts(ascending=True)","33ae5341":"train_ratio = 0.75\ntest_ratio = 0.25\n\nx_train, x_test = train_test_split(img_df, test_size= 1 - train_ratio)\n\nprint(f'Shape of Training Data : ',x_train.shape)\nprint(f'Shape of Testing Data : ',x_test.shape)","49e90339":"nrows = 2\nncols = 4\nf,a = plt.subplots(nrows=nrows, ncols=ncols, figsize=(13, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nx_train_sample = x_train.sample(n=nrows*ncols)\n\nfor i, ax in zip(x_train_sample.index,a.flat):\n    BGR_img = get_image_data_opencv(x_train_sample.FilePaths[i])\n    light_img =get_lightness_channel_from_image(BGR_img)\n    average = calculate_image_average (light_img)\n    ax.imshow(light_img)\n    ax.set_title(img_df.Labels[i]+\" \"+str(round(average)))\n    \nplt.tight_layout()\nplt.show()","904f7f4b":"classes = [\"night time road images\",\"day light road images\"]","20340cd7":"def Classify(data_sample,threshold=100):\n    BGR_img = get_image_data_opencv(data_sample.FilePaths)\n    light_img =get_lightness_channel_from_image(BGR_img)\n    average = calculate_image_average (light_img)\n    \n    output = 0\n    if average > threshold:\n        output = 1\n    \n    #if classes[output] != row.Labels:\n     #   print(\"ground truth : \",data_sample.Labels,\" \",str(round(average)), \"Prediction : \"\\\n      #       , str(classes[output]))\n      #  plt.imshow(light_img)\n      #  plt.show()\n    \n    return output\n    ","e45ba039":"T = 0\nF = 0\n\n\nfor index, row in x_test.iterrows():\n\n    output = Classify(row,threshold=100)\n    if classes[output] == row.Labels:\n        T += 1\n    else :\n        F += 1\n        \nprint(\"Right classification =\",T,\" False classification =\",F, \" ACCURACY = \",T\/(T+F))\n        \n","20857748":"# The classical easy classifier\nFrom checking the average of the images lightness channel values, we saw that day time images averages are leger than 100 and the night images are low in light average ","2fc60b5b":"# Model Creating (Based on image processing techniques)","92a2eec6":"### Visualizing Ligthness in Images \nWe will see that high values represent in day time images (high lightnening) ","0ffec328":"# Splitting the dataset into train,test","d4edc88d":"### Loading The Dataset","6ce9d516":"### Data Analysis\n* checking number of images and classes\n* Checking each class data size\n","2622cf7e":"# Data Visulization and Analysis","d6c44598":"## Image helper functions","5478c718":"### Visualize the dataset","b1c48837":"## Check accuracy"}}