{"cell_type":{"304040bd":"code","f115609c":"code","4a52aeaf":"code","dc54357c":"code","647211cb":"code","a47f3f18":"code","b0208fb8":"code","1779111d":"code","fada71c7":"code","24f19043":"code","cd2f54bb":"code","340bf314":"code","bcd3655f":"code","8d3c1bd4":"code","f0ee9e60":"code","a7c97af1":"code","80e9afd0":"code","3f20188c":"code","235daf75":"code","02060a38":"code","f35630cd":"code","53ae3697":"code","49b88ea1":"code","8547d508":"code","ac4efed2":"code","39bb0c25":"code","49a08b82":"code","5f3afc6c":"code","3613bdbe":"code","1f0555f9":"code","b7946321":"code","a13d6967":"code","a9707b4d":"code","27930f59":"code","c0e09d08":"code","bbd416c5":"code","bbbfb4c1":"code","6098f2f3":"code","a0bc3aaf":"code","2f9baee1":"code","52caad8c":"code","42800f2a":"code","79fb0ee3":"code","6eb06c09":"code","6ece32cc":"code","0092f1a4":"code","e94da3e0":"code","f59002bc":"code","239319c7":"markdown","ab12f883":"markdown","91cc5fb3":"markdown","a9536353":"markdown","ee9ac13b":"markdown","8b287406":"markdown","3981b38f":"markdown","7145e108":"markdown","abb7c799":"markdown","d1a2ab4e":"markdown","4de74ad8":"markdown","b1db67a2":"markdown","1ddca06c":"markdown","f61356fb":"markdown","dd01c98a":"markdown","91936a47":"markdown","9e1f56a4":"markdown","e956b5ef":"markdown","036ade81":"markdown","463928dc":"markdown","95254afa":"markdown","eca1ff9c":"markdown","ae97cd4a":"markdown","86543b98":"markdown","3198cfa5":"markdown","15ea2bb5":"markdown","e41de1b0":"markdown","817de5fe":"markdown","4f795705":"markdown","fff9e3c4":"markdown","75765b84":"markdown","62f771c8":"markdown","6c7ec55d":"markdown","e2b56ad8":"markdown","e5be1279":"markdown","fdb15ab2":"markdown","fa6bb7a3":"markdown","c3a5f501":"markdown","f46d5c39":"markdown","0b0de6e2":"markdown","a1b28037":"markdown","3ba01693":"markdown","54947963":"markdown","a7028313":"markdown","16d7c057":"markdown","d3307d90":"markdown","5faf79f8":"markdown","17864aff":"markdown","ae2e6648":"markdown","7445f912":"markdown","1649d89a":"markdown","e03aeb37":"markdown","ba60ea4c":"markdown","8cfff27a":"markdown","011e0f2d":"markdown","b32130f3":"markdown"},"source":{"304040bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f115609c":"donors = pd.read_csv('..\/input\/Donors.csv', low_memory = False)\ndonations = pd.read_csv('..\/input\/Donations.csv', parse_dates=['Donation Received Date'])\ndonations_donor = donations.merge(donors, on='Donor ID',how='inner' )\n\nprojects = pd.read_csv('..\/input\/Projects.csv', error_bad_lines=False, warn_bad_lines=False, parse_dates=[\"Project Posted Date\",\"Project Fully Funded Date\"])\nresources = pd.read_csv('..\/input\/Resources.csv', error_bad_lines=False, warn_bad_lines=False)\nschools = pd.read_csv('..\/input\/Schools.csv', error_bad_lines = False)\nteachers = pd.read_csv('..\/input\/Teachers.csv', error_bad_lines = False)\n\n# creating a new dataframe \"donations_donor\" by merging \"donations\" & \"donors\"\n\nall_data = [donors, donations, donations_donors, projects, resources, schools, teachers]","4a52aeaf":"donors.head()","dc54357c":"donations.head()","647211cb":"projects.head()","a47f3f18":"schools.head()","b0208fb8":"teachers.head()","1779111d":"resources.head()","fada71c7":"def missing_percentage(df):\n    \"\"\"This function takes a DataFrame(df) as input and returns two columns, total missing values and total missing values percentage\"\"\"\n    ## the two following line may seem complicated but its actually very simple. \n    total = df.isnull().sum().sort_values(ascending = False)\n    total = total[total > 0]\n    percent = total\/len(df)\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'])","24f19043":"missing_percentage(donors)","cd2f54bb":"missing_percentage(donations)","340bf314":"missing_percentage(projects)","bcd3655f":"missing_percentage(schools)","8d3c1bd4":"missing_percentage(teachers)","f0ee9e60":"missing_percentage(resources)","a7c97af1":"donors.info(memory_usage='deep')","80e9afd0":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n## -------------------","3f20188c":"for df in [donors, donations, projects, resources, schools, teachers]:\n    original = df.copy()\n    df = reduce_mem_usage(df)\n\n    for col in list(df):\n        if df[col].dtype!='O':\n            if (df[col]-original[col]).sum()!=0:\n                df[col] = original[col]\n                print('Bad transformation', col)","235daf75":"donors.info(memory_usage='deep')","02060a38":"# We're going to be calculating memory usage a lot,\n# so we'll create a function to save us some time!\ndef mem_usage(pandas_obj):\n    if isinstance(pandas_obj,pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)\n\n# We\u2019ll write a loop to iterate over each object column, \n# check if the number of unique values is more than 50%, \n# and if so, convert it to the category atype.\ndef reduce_by_category_type(df):\n    converted_obj = pd.DataFrame()\n    for col in df.columns:\n        num_unique_values = len(df[col].unique())\n        num_total_values = len(df[col])\n        if num_unique_values \/ num_total_values < 0.5 and df[col].dtype == 'object':\n            converted_obj.loc[:,col] = df[col].astype('category')\n        else:\n            converted_obj.loc[:,col] = df[col]\n    return converted_obj","f35630cd":"donors = reduce_by_category_type(donors)","53ae3697":"donors.info(memory_usage='deep')","49b88ea1":"donations = reduce_by_category_type(donations)\ndonations_donor = reduce_by_category_type(donations_donor)\nprojects = reduce_by_category_type(projects)\nresources = reduce_by_category_type(resources)\nschools = reduce_by_category_type(schools)","8547d508":"import plotly.graph_objects as go\n\ntemp = donations_donor.groupby(['Donor State'])['Donation Amount'].sum().sort_values(ascending = False).reset_index()\nstates_dict = {\n    'District of Columbia' : 'DC','Mississippi': 'MS', 'Oklahoma': 'OK', \n    'Delaware': 'DE', 'Minnesota': 'MN', 'Illinois': 'IL', 'Arkansas': 'AR', \n    'New Mexico': 'NM', 'Indiana': 'IN', 'Maryland': 'MD', 'Louisiana': 'LA', \n    'Idaho': 'ID', 'Wyoming': 'WY', 'Tennessee': 'TN', 'Arizona': 'AZ', \n    'Iowa': 'IA', 'Michigan': 'MI', 'Kansas': 'KS', 'Utah': 'UT', \n    'Virginia': 'VA', 'Oregon': 'OR', 'Connecticut': 'CT', 'Montana': 'MT', \n    'California': 'CA', 'Massachusetts': 'MA', 'West Virginia': 'WV', \n    'South Carolina': 'SC', 'New Hampshire': 'NH', 'Wisconsin': 'WI',\n    'Vermont': 'VT', 'Georgia': 'GA', 'North Dakota': 'ND', \n    'Pennsylvania': 'PA', 'Florida': 'FL', 'Alaska': 'AK', 'Kentucky': 'KY', \n    'Hawaii': 'HI', 'Nebraska': 'NE', 'Missouri': 'MO', 'Ohio': 'OH', \n    'Alabama': 'AL', 'Rhode Island': 'RI', 'South Dakota': 'SD', \n    'Colorado': 'CO', 'New Jersey': 'NJ', 'Washington': 'WA', \n    'North Carolina': 'NC', 'New York': 'NY', 'Texas': 'TX', \n    'Nevada': 'NV', 'Maine': 'ME', 'other': ''}\n\ntemp['code'] = temp['Donor State'].apply(lambda x: states_dict[x])\n\nfig = go.Figure(data=go.Choropleth(\n    locations=temp['code'], # Spatial coordinates\n    z = temp['Donation Amount'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Greens',\n    colorbar_title = \"Millions(USD)\",\n))\n\nfig.update_layout(\n#     title_text = 'States with Most Donations',\n    geo_scope='usa', # limite map scope to USA\n    geo_showlakes = True,\n    geo_lakecolor = 'rgb(0, 200, 255)',\n#     template=\"plotly_dark\",\n)\n\nfig.show()","ac4efed2":"from plotly.subplots import make_subplots\n\ntemp = donations_donor.groupby(['Donor State'])['Donation Amount'].sum().sort_values(ascending = False)\n\nfig = make_subplots( \n    rows=1,\n    cols=2,\n    # shared_yaxes=True,\n    #vertical_spacing=11,\n#     specs=[[{\"colspan\": 2}, None], \n#            [{}, {}]], ## distribution of chart spacing\n    subplot_titles = ('Most',\"Least\"))\n\nx_values = temp.head(10).sort_values(ascending= True).values\nfig.add_trace(\n    go.Bar(x=x_values,\n           y=temp.head(10).sort_values(ascending= True).index,\n           orientation = 'h',\n           marker=dict(color = (x_values\/x_values.sum()),colorscale = 'Greens')\n\n          ),\n    row = 1, \n    col = 1,\n)\n\nx_values = temp.tail(10).sort_values(ascending= False).values\nfig.add_trace(\n    go.Bar(x=x_values,\n           y=temp.tail(10).sort_values(ascending = False).index,\n           orientation = 'h',\n           marker=dict(color = (x_values\/x_values.sum()),colorscale = 'Greens')\n           ),\n    row = 1, \n    col = 2,\n)\nfig['layout']['xaxis1'].update(title = 'Amount($)')\nfig['layout']['yaxis1'].update(title = 'States', showgrid = True)\n\nfig['layout']['xaxis2'].update(title = 'Amount($)')\nfig['layout']['yaxis2'].update(title = 'States', showgrid = True)\n\n\n\n# fig['layout']['margin'].update()\n\n\nfig.update_layout(height = 600, \n                  showlegend = False, \n                  title_text = 'Most and Least Donated States', \n#                   template=\"plotly_dark\",\n                 );\n#fig.layout.update(title = 'testing')\nfig.show()\n\n","39bb0c25":"temp = donors[donors['Donor State'] != 'other']\ntemp = temp['Donor State'].value_counts()\n\nfig = make_subplots( \n    rows=1,\n    cols=2,\n    # shared_yaxes=True,\n    #vertical_spacing=11,\n#     specs=[[{\"colspan\": 2}, None], \n#            [{}, {}]], ## distribution of chart spacing\n    subplot_titles = ('Most',\"Least\"))\n\nx_values = temp.head(10).sort_values(ascending= True).values\nfig.add_trace(\n    go.Bar(x=x_values,\n           y=temp.head(10).sort_values(ascending= True).index,\n           orientation = 'h',\n           marker=dict(color = (x_values\/x_values.sum()),colorscale = 'Greens')\n\n          ),\n    row = 1, \n    col = 1,\n)\n\nx_values = temp.tail(10).sort_values(ascending= False).values\nfig.add_trace(\n    go.Bar(x=x_values,\n           y=temp.tail(10).sort_values(ascending = False).index,\n           orientation = 'h',\n           marker=dict(color = (x_values\/x_values.sum()),colorscale = 'Greens')\n           ),\n    row = 1, \n    col = 2,\n)\nfig['layout']['xaxis1'].update(title = 'Amount($)')\nfig['layout']['yaxis1'].update(title = 'States', showgrid = True)\n\nfig['layout']['xaxis2'].update(title = 'Amount($)')\nfig['layout']['yaxis2'].update(title = 'States', showgrid = True)\n\n\n\n# fig['layout']['margin'].update()\n\n\nfig.update_layout(height = 600, \n                  showlegend = False, \n                  title_text = 'Most and Least donor States', \n#                   template=\"plotly_dark\",\n                 );\n#fig.layout.update(title = 'testing')\nfig.show()\n\n\n","49a08b82":"temp = donations_donor.groupby(['Donor State'])['Donation Amount'].sum().sort_values(ascending = False).reset_index()\ntemp['code'] = temp['Donor State'].apply(lambda x: states_dict[x])\n\n# Initialize figure with subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    column_widths=[0.6, 0.4],\n    row_heights=[0.5, 0.5],\n    specs=[[{\"type\": \"scattergeo\", \"rowspan\": 2}, {\"type\": \"bar\"}],\n           [            None                    , {\"type\": \"bar\"}]])\n\n# Add Chotopleth\nfig.add_trace(\n    go.Choropleth(locations=temp['code'], # Spatial coordinates\n                  z = temp['Donation Amount'].astype(float), # Data to be color-coded\n                  locationmode = 'USA-states', # set of locations match entries in `locations`\n                  colorscale = 'greens',\n                  showscale = False,\n                  colorbar_title = \"Millions USD\"),\n    row=1, col=1\n)\n\n\n# Add locations bar chart\nfig.add_trace(\n    go.Bar(x=donations_donor['Donor State'].value_counts().head(10).sort_values(ascending = False).index,\n           y=donations_donor['Donor State'].value_counts().head(10).sort_values(ascending = False).values,\n           marker=dict(color=[i for i in range(10,0,-1)], colorscale = 'Greens'), \n           showlegend=False),\n    row=1, col=2\n)\n\n# Add locations bar chart\nfig.add_trace(\n    go.Bar(x=donations_donor['Donor State'].value_counts().tail(10).sort_values(ascending = True).index,\n           y=donations_donor['Donor State'].value_counts().tail(10).sort_values(ascending = True).values,\n           marker=dict(color=[i for i in range(10)], colorscale = 'Greens'), \n           showlegend=False),\n    row=2, col=2\n)\n\n# # Update geo subplot properties\n# fig.update_geos(\n#     projection_type=\"orthographic\",\n#     landcolor=\"white\",\n#     oceancolor=\"MidnightBlue\",\n#     showocean=True,\n#     lakecolor=\"LightBlue\"\n# )\n\n# Rotate x-axis labels\nfig.update_xaxes(tickangle=45)\n\n\n# Set theme, margin, and annotation in layout\nfig.update_layout(\n#     title_text = 'Most and Least Donations and Donors', \n#     template=\"plotly_dark\",\n    geo_scope='usa', # limite map scope to USA\n    geo_showlakes = True,\n    geo_lakecolor = 'rgb(0, 200, 255)',\n    margin=dict(r=100, t=25, b=40, l=60),\n    annotations=[\n        go.layout.Annotation(\n            text=\"Source: Rumi\",\n            showarrow=False,\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0,\n            y=0)\n    ]\n)\n\nfig.show()","5f3afc6c":"# ## getting Mean donations\n# mean_donation_amount = donations_donor.groupby(['Donor State'])['Donation Amount'].mean().reset_index()\n# mean_donation_amount.columns = ['Donor State', 'Mean Donation Amount']\n\n# ## Getting total Donors\n# total_donors = pd.DataFrame(donors['Donor State'].value_counts()).reset_index()\n# total_donors.columns = ['Donor State', 'total_donors']\n\n# ## getting mean donation and total donors in one dataframe called \"states\"\n# states = pd.merge(mean_donation_amount, total_donors, on = 'Donor State', how = 'inner')\n# ## getting total donations\n# total_donations = donations_donor.groupby(['Donor State'])['Donation Amount'].sum().reset_index()\n# ## merging total donations with states dataframe\n# states = states.merge(total_donations, on = 'Donor State', how = 'inner')\n\n\n\n\n# ## creating total school column. \n# temp_school = pd.DataFrame(schools['School State'].value_counts()).reset_index()\n# temp_school = temp_school.rename(columns={'index':'state',\n#                     'School State':'total_school'},\n#            )\n\n# # merging total school column with states df\n# states = states.merge(temp_school, how = 'inner', left_on='Donor State', right_on='state')\n# states.drop('state', axis=1, inplace=True)\n\n# # merging total \n# states = states.merge(temp, on=\"Donor State\", how='inner')\n# # states.drop(['state',\"total_school\"] ,axis=1, inplace=True)\n\n# ## creating a text column for visualization chart\n# # making them as string type\n# for col in states.columns:\n#     states[col] = states[col].astype(str)\n# # writing the text column\n# states['text'] = states['Donor State'] + '<br>' + 'Mean Donations: ' + states['Mean Donation Amount'] + '<br>' + 'Total Donors: ' + states['total_donors'] + '<br>' + 'Total Donations: ' + states['Donation Amount']\n# # this is for the size part of the chart\n# states['Mean Donation Amount'] = states['Mean Donation Amount'].astype(float)\n# #states['text'] = states.apply(lambda x: (states['Donor State']+ '<br>' + \"Mean Donations:\" + states['Mean Donation Amount'] + '<br>' + \"Total Donors:\" + states['total_donors'] + \"<br\" + \"Total Donations:\" + states['Donation Amount']))\n# #states.text = states.text.astype(str)\n\n# ## Doing some rounding up\n# states['Donation Amount'] = states['Donation Amount'].apply(lambda x: float(x)).apply(lambda x : \"%.2f\"%x)\n# states['average_projects'] = states['average_projects'].apply(lambda x: float(x)).apply(lambda x : \"%.2f\"%x).apply(lambda x: float(x))\n# states['total_donors'] = states['total_donors'].apply(lambda x: float(x))\n# states['total_schools'] = states['total_schools'].apply(lambda x: float(x)).apply(lambda x : \"%.2f\"%x).apply(lambda x: float(x))\n# states['total_projects'] = states['total_projects'].astype(float)\n# states = states.astype({\"Mean Donation Amount\": float, \"Donation Amount\": float})\n\n# ## Get the states for\n# states['code'] = states['Donor State'].apply(lambda x: states_dict[x])","3613bdbe":"# # difine our data for plotting\n# data = [ dict(\n#         type='choropleth',\n#         colorscale = \"Greens\",\n#         autocolorscale = False,\n#         locations = states['code'], # location (states)\n#         z = states['Donation Amount'],\n#         locationmode = 'USA-states', # let's define the location mode to USA_states\n#         text = states['text'],\n#         marker = dict(\n#             line = dict (\n#                 color = 'rgb(255,255,255)',\n#                 width = 2\n#             ) ),\n#         colorbar = dict(\n#             title = \"Donation<br>Amount($)\")\n#         ) ]\n\n# layout = dict(\n#         title = 'States with Most Donations',\n#         geo = dict(\n#             scope='usa',\n#             projection=dict( type='albers usa' ),\n#             showlakes = True,\n#             lakecolor = 'rgb(0, 200, 255)'),\n#              )\n\n\n\n\n    \n# fig = go.Figure(data=data, layout=layout)\n\n# fig.update_layout(template = 'plotly_dark')\n# fig.show()","1f0555f9":"data = go.Bar(\n    x = donations_donor.groupby(['Donor State'])['Donation Amount'].max().sort_values(ascending = False).head(20).index,\n    y = donations_donor.groupby(['Donor State'])['Donation Amount'].max().sort_values(ascending = False).head(20).values\n)\nfig = go.Figure(data = data)\nfig.layout.xaxis.title = 'States'\nfig.layout.yaxis.title = 'Donation Amount'\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","b7946321":"## Getting lats and lons of the city\ncity_code = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_us_cities.csv')\ncity_code.drop(columns = ['pop'], inplace = True)\ncity_code.name = city_code.name.apply(lambda x: x.strip())\ndf = donations_donor.groupby(['Donor City'])['Donation Amount'].max().sort_values(ascending = False).head(50).reset_index()\ndf = df.merge(city_code, how ='inner', left_on = 'Donor City', right_on='name')\ndf.drop_duplicates(inplace = True)\ndf.drop(columns = ['name'], inplace = True)\n\ndf['text'] = df['Donor City'] + '<br>Donation Amount: ' + '$'+(df['Donation Amount']).astype(str)\n# limits = [(0,2),(3,10),(11,20),(21,50),(50,3000)]\n# colors = [\"royalblue\",\"crimson\",\"lightseagreen\",\"orange\",\"lightgrey\"]\nfig = go.Figure()\n\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    \n    lon = df['lon'],\n    lat = df['lat'],\n    text = df['text'],\n    marker = dict(\n        size = df['Donation Amount']\/20,\n#         color = (df['Donation Amount']\/df['Donation Amount'].sum())*100,\n        line_color='rgb(40,40,40)',\n        line_width=0.5,\n        sizemode = 'area'\n    ),))\n#     name = '{0} - {1}'.format(lim[0],lim[1])))\n\nfig.update_layout(\n    \n        title_text = 'Some of the highest single donated cities',\n#         showlegend = True,\n        geo = dict(\n            scope = 'usa',\n            landcolor = 'rgb(217, 217, 217)',\n            showlakes = True,\n            lakecolor = 'rgb(0, 200, 255)'),\n        )\nfig.show()","a13d6967":"# # Brookln is techincally part of New York City therefore replacing it with New York. \n# donations_donor['Donor City'].replace('Brooklyn', 'New York', inplace = True)\n\n# data = go.Bar(\n#     x = donations_donor.groupby(['Donor City'])['Donation Amount'].max().sort_values(ascending = False).head(20).index,\n#     y = donations_donor.groupby(['Donor City'])['Donation Amount'].max().sort_values(ascending = False).head(20).values\n# )\n# fig = go.Figure(data = data)\n# fig.layout.xaxis.title = 'City'\n# fig.layout.yaxis.title = 'Donation Amount'\n# fig.update_layout(template = 'plotly_dark')\n# fig.show()","a9707b4d":"## Setting up the dataframe\ndf = donations_donor.groupby(['Donor City'])['Donation Amount'].sum().sort_values(ascending = False).reset_index()\ndf = df.merge(city_code, how = 'inner', left_on = 'Donor City', right_on ='name').drop(columns=['name'])\n\n## Setting up viz\n\ndf['text'] = df['Donor City'] + '<br>Donation Amount ' + (round(df['Donation Amount'])).astype(str)\nlimits = [(0,10),(11,20),(21, 30),(31,40),(41,50)]\ncolors = [\"royalblue\",\"crimson\",\"lightseagreen\",\"orange\",\"lightgrey\"]\ncities = []\nscale = 5000\n\nfig = go.Figure()\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = df[lim[0]:lim[1]]\n    fig.add_trace(go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df_sub['lon'],\n        lat = df_sub['lat'],\n        text = df_sub['text'],\n        marker = dict(\n            size = df_sub['Donation Amount']\/scale,\n            color = colors[i],\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = '{0} - {1}'.format(lim[0],lim[1])))\n\nfig.update_layout(title_text = 'Most Donated Cities<br>(Click legend to toggle traces)',\n#                   template = 'plotly_dark',\n                  showlegend = True,\n                  geo = dict(\n                      scope = 'usa',\n                      landcolor = 'rgb(217, 217, 217)',\n        )\n    )\n\nfig.show()","27930f59":"# import plotly.express as px\n# temp_df = donations_donor.groupby(['Donor City'])['Donation Amount'].sum().sort_values(ascending = False).reset_index()\n# temp_df = temp_df.merge(city_code, how = 'inner', left_on = 'Donor City', right_on ='name').drop(columns=['name'])\n# fig = px.scatter_mapbox(temp_df, lat=\"lat\", lon=\"lon\", hover_name=\"Donor City\", hover_data=[\"Donor City\", \"Donation Amount\"],\n#                         color_discrete_sequence=[\"fuchsia\"], zoom=3, height=400)\n# fig.update_layout(mapbox_style=\"open-street-map\", ## other mabbox_styles are 'dark', 'white-bg'\n#                   mapbox_layers=[\n#         {\n#             \"below\": 'traces',\n#             \"sourcetype\": \"raster\",\n#             \"source\": [\n#                 \"https:\/\/basemap.nationalmap.gov\/arcgis\/rest\/services\/USGSImageryOnly\/MapServer\/tile\/{z}\/{y}\/{x}\"\n#             ]\n#         }\n#       ])\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()","c0e09d08":"temp_df = donations_donor['Donor City'].value_counts()\nmost = go.Bar(\n    y=temp_df.head(10).sort_values(ascending= True).index,\n    x=temp_df.head(10).sort_values(ascending= True).values,\n    orientation = 'h',\n)\n\nleast = go.Bar(\n    y=temp_df.tail(10).sort_values(ascending = False).index,\n    x=temp_df.tail(10).sort_values(ascending = False).values,\n    orientation = 'h',\n)\n\nfig = make_subplots(rows=1, # row #'s\n                          cols=2, # column #'s\n                          #specs=[[{'colspan': 2}, None], \n                               # [{}, {}]], ## distribution of chart spacing\n                          #shared_yaxes=True, \n                          subplot_titles = ['Most Donor Cities',\n                                            \"Least Donor Cities\", \n                                            #'Countries with least loans', \n                                           ]);\n#fig.append_trace(data, 1,1);##fig.append_trace(data1,raw #,col #);\nfig.append_trace(most,1,1);\nfig.append_trace(least,1,2);\n\nfig['layout']['xaxis1'].update(title = 'Amount($)')\nfig['layout']['yaxis1'].update(title = 'Cities', showgrid = True)\n\nfig['layout']['xaxis2'].update(title = 'Amount($)')\nfig['layout']['yaxis2'].update(title = 'Cities', showgrid = True)\n\n\n\n#fig['layout']['xaxis3'].update(title = 'Count',\n                               #type = 'log'\n                            #  )\n\nfig['layout'].update(height = 600, \n                     showlegend = False, \n#                      title = 'Most and Least Cities in terms of Donations', \n#                      template = 'plotly_dark'\n                    );\n#fig.layout.update(title = 'testing')\nfig.show()\n\n\n","bbd416c5":"temp_1 = schools['School State'].value_counts().sort_values(ascending = True).head(20)\ntemp_school = go.Bar(\n    y=temp_1.index,\n    x=temp_1.values,\n    orientation = 'h',\n)\n\n\ntemp = projects.merge(schools[['School ID','School State']], how = 'inner', on='School ID')['School State'].value_counts().sort_values(ascending = True).head(20)\ntemp_project = go.Bar(\n    y=temp.index,\n    x=temp.values,\n    orientation = 'h',\n)\n\n\nfig = make_subplots(rows=1, # row #'s\n                          cols=2, # column #'s\n                          #specs=[[{'colspan': 2}, None], \n                               # [{}, {}]], ## distribution of chart spacing\n#                           shared_yaxes=True,\n                          vertical_spacing=0.009,\n                          subplot_titles = ['Schools',\n                                            \"Projects\", \n                                            #'Countries with least loans', \n                                           ]);\n#fig.append_trace(data, 1,1);##fig.append_trace(data1,raw #,col #);\nfig.append_trace(temp_school,1,1);\nfig.append_trace(temp_project,1,2);\nfig['layout']['yaxis1'].update(title = 'States', \n                               showgrid = True\n                              )\nfig['layout']['yaxis2'].update(title = 'States', showgrid = True)\n\nfig['layout']['xaxis1'].update(title = '# of Schools')\nfig.layout.xaxis2.update(title = '# of Projects')\n\n\nfig['layout'].update(height = 700, \n                     showlegend = False, \n                     title = 'Schools VS Projects', \n#                      template = 'plotly_dark'\n                    );\n#fig.layout.update(title = 'testing')\nfig.show()","bbbfb4c1":"## getting total_schools per state\ntemp = pd.DataFrame(schools['School State'].value_counts()).reset_index()\ntemp.rename(columns = {'index':'state','School State': 'total_schools'}, inplace = True)\n\n## getting total projects per state\ntemp2 = projects.merge(schools[['School ID','School State']], how = 'inner', on='School ID')\ntemp2 = pd.DataFrame(temp2['School State'].value_counts()).reset_index()\ntemp2.rename(columns = {'index':'state','School State': 'total_projects'}, \n             inplace = True)\n\n## merging \ntemp = temp.merge(temp2, on = 'state', how = 'inner')\n\n## getting average projects per school per state. \ntemp['average_projects'] = temp['total_projects']\/temp['total_schools']\n\n\ntrace1 = go.Bar(\n    x=temp.sort_values(by = 'average_projects', ascending = False).head(20).state.tolist(),\n    y=temp.sort_values(by = 'average_projects', ascending = False).head(20).average_projects.tolist(),\n    name='Projects'\n)\n\n\ndata = [trace1]\n\n\nfig = go.Figure(data=data)\nfig.layout.update(title = 'Average Projects Per School in Each States', \n#                   template = 'plotly_dark'\n                 )\nfig.layout.xaxis.title = 'States'\nfig.layout.yaxis.title = 'Project Count'\nfig.show()","6098f2f3":"labels = donors['Donor Is Teacher'].value_counts().index\nvalues = donors['Donor Is Teacher'].value_counts().values\n\ncolors = ['gold', 'lightgreen']\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\n\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","a0bc3aaf":"labels = teachers['Teacher Prefix'].value_counts().sort_values(ascending = True).index\nvalues = teachers['Teacher Prefix'].value_counts().sort_values(ascending = True).values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='black', width=2)))\n\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","2f9baee1":"labels = donations['Donation Included Optional Donation'].value_counts().index\nvalues = donations['Donation Included Optional Donation'].value_counts().values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='black', width=3)))\n\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","52caad8c":"labels = projects['Project Type'].value_counts().index\nvalues = projects['Project Type'].value_counts().values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='black', width=2)))\n\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","42800f2a":"\ntemp =  pd.DataFrame(projects['Project Subject Category Tree'].dropna().str.split(',').tolist())\ntemp = temp.applymap(lambda x: x.strip() if x else x).stack().value_counts()\n\ndata = go.Bar(\n    x = temp.index,\n    y = temp.values\n)\nfig = go.Figure(data = data)\nfig.layout.xaxis.title = 'Subject Category Type'\nfig.layout.yaxis.title = 'Project count'\n# fig.update_layout(template = 'plotly_dark')\nfig.show()\n%timeit","79fb0ee3":"temp =  pd.DataFrame(projects['Project Subject Subcategory Tree'].dropna().str.split(',').tolist())\ntemp = temp.applymap(lambda x: x.strip() if x else x).stack().value_counts()\n\ndata = go.Bar(\n    x = temp.index,\n    y = temp.values\n)\nfig = go.Figure(data = data)\nfig.layout.xaxis.title = 'Subject Subcategory Type'\nfig.layout.yaxis.title = 'Project Count'\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","6eb06c09":"\ntemp = projects['Project Resource Category'].value_counts().head(15)\n\ndata = go.Bar(\n    x = temp.index,\n    y = temp.values\n)\nfig = go.Figure(data = data)\nfig.layout.xaxis.title = 'Project Resource Category'\nfig.layout.yaxis.title = 'Project Count'\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","6ece32cc":"temp = projects['Project Grade Level Category'].value_counts()\ndata = go.Bar(\n    x = temp.index,\n    y = temp.values\n)\nfig = go.Figure(data = data)\nfig.layout.xaxis.title = 'Grade Level'\nfig.layout.yaxis.title = 'Project Count'\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","0092f1a4":"labels = projects['Project Current Status'].value_counts().index\nvalues = projects['Project Current Status'].value_counts().values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='black', width=2)))\n\n# fig.update_layout(template = 'plotly_dark')\nfig.show()","e94da3e0":"# expired_projects = projects[projects['Project Current Status'] == 'Expired']\n# expired_projects.shape\n\n# expired_projects.head()\n\n# expired_projects['Project Type'].value_counts()\n\n# pd.DataFrame({'labels':temp.index,\"values\":temp.values}).iplot(kind = 'pie', labels = \"labels\", values = \"values\")\n\n# expired_projects['Project Cost'].describe()\n\n# expired_projects['Project Cost'].iplot(kind = 'box', )\n\n# expired_projects[expired_projects['Project Cost'] >= 1300].sort_values(by = ['Project Cost'], ascending = False).head()\n\n# round(donations['Donation Amount'].describe(),2)\n\n# projects.head()\n\n# projects.head()\n\n# expired_projects = projects[projects['Project Current Status'] == 'Expired']\n# print ('There are ' + str(expired_projects.shape[0]) + ' projects expired before getting funded.')\n\n# That is a huge number of projects that are just not getting funded. I am interested in finding out why these projects were not funded. \n\n# expired_projects.head()\n\n# round(expired_projects['Project Cost'].describe(),2)\n\n# round(projects['Project Cost'].describe(),2).iplot(kind = 'box')","f59002bc":"for name in dir():\n    if not name.startswith('_'):\n        del globals()[name]","239319c7":"## Project Subject Category Tree","ab12f883":"# <a id='5'>5. Reducing Memory<\/a>","91cc5fb3":"Top donor states:\n* California\n* New York\n* Texas\n\nLeast donor states:\n* Wyoming\n* North Dakota\n* Vermont\n\nYou might be wondering why some states donate so less compared to many other states. There are many reasons collectively can cause these results. Population, number of schools and even number of projects submited by teachers are some of those reasons. If no teacher from a school submits any project request, the world might not know which creative ideas have been left behind. We will do some analysis to find out the counts of schools and projects. ","a9536353":"> **Resources**","ee9ac13b":"## Project Grade Level Category","8b287406":"# Stay Tuned for More to Come!!\n\nIf there are any recommendations\/changes you would like to see in this notebook, please leave a comment at the end of the section. Any feedback\/constructive criticism would be genuinely appreciated. **This notebook is always a work in progress. So, please stay tuned for more to come.**\n\n**If you like this notebook or find this notebook helpful, Please feel free upvote and\/or leave a comment**","3981b38f":"> **Donations**","7145e108":"## 4.2 Missing Data","abb7c799":"## Projects Resources Category","d1a2ab4e":"Top three highest single donation states are **Hawaii, Colorado and California.**","4de74ad8":"As you can see this is a trememdous improvement for the donors dataset. Let's do that for other dataframes as well. ","b1db67a2":"![image](http:\/\/internet.savannah.chatham.k12.ga.us\/schools\/mes\/PublishingImages\/DonorsChoose_org_logo.jpg)","1ddca06c":"> **Resources**\n","f61356fb":"# <a id='3'>3. Libraries<\/a>","dd01c98a":"> **Schools**","91936a47":"* Top three cities with most amount of donations are **New York, Chicago & San Francisco.**  \n* Top three cities with least amount of donations are **Cotton Center, Readington & Brownell.**","9e1f56a4":"**10% are teachers** among all the teachers. ","e956b5ef":"# <a id='4'>4. Datasets<\/a>","036ade81":"## Most Donor Cities","463928dc":"## Highest Single Donation States","95254afa":"As you can see, donors data frame uses 675.7 mb and it is not even closed to the largest dataframe we have in line. let's do some modification of this data frame. ","eca1ff9c":"Couple of things to take notice here...\n\n- **California, Texas, New York and Florida are dominating every criterieas**.\n- **California** has total projects of** ~ 167,000** almost twice as much as the second most project state **Texas **with a total of **~ 83,000** projects. \n- **North Carolina** has more projects compared to its schools then other top states.\nIt would be cool if we can find out the average projects per school in each state. Let's do that.","ae97cd4a":"## Average Projects Per School in Each States","86543b98":"> **Projects**\n","3198cfa5":"> **Donors**","15ea2bb5":"# States with Most Schools and Projects","e41de1b0":"Finally we see some result where California\/ New York is not dominating. So, It turns out **South Carolina, Hawaii and District of Columbia** has more projects per school than any other states. Looks like the teachers there are doing some great work. ","817de5fe":"## Which Percentage of these Donors are Teachers??","4f795705":"# <a id='1'>1. About Donors Choose<\/a>\n**DonorsChoose** was founded in 2000 by a Bronx history teacher, DonorsChoose.org has raised $685 million for America's classrooms. Teachers at three-quarters of all the public schools in the U.S. have come to DonorsChoose.org to request what their students need, making DonorsChoose.org the leading platform for supporting public education.\n\nTo date, 3 million people and partners have funded 1.1 million DonorsChoose.org projects. But teachers still spend more than a billion dollars of their own money on classroom materials. To get students what they need to learn, the team at DonorsChoose.org needs to be able to connect donors with the projects that most inspire them.\n\nIn the second Kaggle Data Science for Good challenge, DonorsChoose.org, in partnership with Google.org, is inviting the community to help them pair up donors to the classroom requests that will most motivate them to make an additional gift. To support this challenge, DonorsChoose.org has supplied anonymized data on donor giving from the past five years. The winning methods will be implemented in DonorsChoose.org email marketing campaigns.","fff9e3c4":"> **Projects**","75765b84":"> **Donors**","62f771c8":"Most donated states:\n* California\n* New York\n* Texas\n* Illinois\n\nLeast donated states:\n* Wyoming\n* North Dakota\n* Vermont\n* South Dakota","6c7ec55d":"## This Kernel Ends Here!! The following part of the kernel is a work in progress!!","e2b56ad8":"## What were the project types ?","e5be1279":"## Did Donation Included Optional Donations??","fdb15ab2":"## Most Donated Cities","fa6bb7a3":"Now that the we have optimized donors dataset, let's see how much memory it uses. ","c3a5f501":"> **Schools**","f46d5c39":"As you can see, we are dealing with a lot of datasets and a lot of missing data as well. By looking at the total and percentage of missing data, you can tell that these datasets are enormous. If you have some experience working with data, you already know that the larger the dataset is, the more RAM it uses. The more RAM the dataset uses, the harder it is to work with. Let's first reduce some of the RAM's from the Pandas data frame. ","0b0de6e2":"# <a id='2'>2. Goals<\/a>\n* Do a comprehensive EDA of DonorsChoose.\n* Apply well-thought visualizations to bringout insights to the best of my ability. \n\nPS: If your hardware is not updated or your internet bandwidth is limited, you may have some trouble running this kernel!! My sincere apologies in advance.","a1b28037":"> **Teachers**","3ba01693":"## Project Current Status","54947963":"## Most and Least Donations and Donors","a7028313":"## Highest Single Donation Cities","16d7c057":"***\nConnect me with my other social networking profiles:\n\n**LinkedIn:** https:\/\/www.linkedin.com\/in\/masumrumi\/ \n\n**My Website:** http:\/\/masumrumi.com\/\n\n** GitHub:** https:\/\/github.com\/masumrumi\/\n\n*** This kernel will always be a work in progress. I will incorporate new concepts of data science as I comprehend them with each update. If you have any idea\/suggestions about this notebook, please let me know. Any feedback about further improvements would be genuinely appreciated.***\n***\n### If you have come this far, Congratulations!!\n\n### If this notebook helped you in any way or you liked it, please upvote and\/or leave a comment!! :) \n\n\n","d3307d90":"> **Donations**","5faf79f8":"Top three donor cities are ** Chicago, New York and Brooklyn. Brooklyn is technically part of NYC, therefore technically New York is the city with most donors**","17864aff":"## Project Subject Subcategory Tree","ae2e6648":"## Who are those 10% Teachers??","7445f912":"## Most and Least donor states","1649d89a":"Often pandas data frame keeps an enormous amount of information about the datasets. One of the most significant thing about python is that it is a high-level language. However, sometimes this great benefit can also be pythons curse. Because python is a high-level language, there is quite a limitation in dealing with different objects. As a result, it takes a lot more memory to store columns with multiple object types.  Let's calculate and see how much exact memory does donors dataset take. ","e03aeb37":"Top three highest 3 single donation cities are **Anahola(60k), Lafayette(~32k) & Palo Alto(26.3k).**","ba60ea4c":"> **Teachers**","8cfff27a":"## Most Donated States","011e0f2d":"## 4.1 Preview of the Datasets\n\nWe are working with multiple datasets here. Let's have a preview of all the datasets. ","b32130f3":"# <a id='6'>6. Exploratory Data Analysis(EDA)<\/a>\n"}}