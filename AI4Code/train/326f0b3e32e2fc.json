{"cell_type":{"f5d051b9":"code","713d9ac7":"code","00a6a70e":"code","443d546c":"code","a857ba2c":"code","acf17e00":"code","4239f65e":"code","cb99c5d3":"code","c69421ac":"code","d9ec524a":"code","07988d39":"code","0e5bdd97":"code","0b72b47c":"code","da8e1e02":"code","ee6a535d":"code","fad04526":"code","d7423b03":"code","5537fe02":"code","cbe06906":"code","07882208":"code","de6a1aca":"code","bcc5b274":"code","4349493b":"markdown","dc21f913":"markdown","2e2001d7":"markdown","a2b1ce08":"markdown","1f382de8":"markdown","e554c89e":"markdown","86b69b9d":"markdown","1cf7c92b":"markdown","4e49b8ef":"markdown","b56a7bd4":"markdown","dd11e3bf":"markdown","5d179a2c":"markdown","106acf2e":"markdown","564c8133":"markdown","0b3316e9":"markdown"},"source":{"f5d051b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","713d9ac7":"train_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain_features.head()","00a6a70e":"\nprint(set(train_features['cp_dose']), set(train_features['cp_time']), set(train_features['cp_type']))","443d546c":"train_features.info()","a857ba2c":"train_targets_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_scored.head()","acf17e00":"train_targets_scored.info()","4239f65e":"train_targets_nonscored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")\ntrain_targets_nonscored.head()","cb99c5d3":"train_targets_nonscored.info()","c69421ac":"sample_sub = pd.read_csv(\"\/kaggle\/input\/lish-moa\/sample_submission.csv\")\nsample_sub.head()","d9ec524a":"sample_sub.info()","07988d39":"test_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntest_features.head()","0e5bdd97":"train_features_d = pd.get_dummies(data=train_features, columns=['cp_time','cp_dose','cp_type'], drop_first=True)\ntest_features_d = pd.get_dummies(data=test_features, columns=['cp_time','cp_dose','cp_type'], drop_first=True)","0b72b47c":"X = train_features_d.drop(['sig_id'], axis = 1)\ntest= test_features_d.drop(['sig_id'], axis = 1)\ny = train_targets_scored.drop('sig_id', axis = 1)","da8e1e02":"\nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\nX = ss.fit_transform(X)\ntest = ss.transform(test)","ee6a535d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","fad04526":"# import libraries\nimport xgboost as xgb\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\n\n\n# initialize xgb classifier\nclassifier_XG = xgb.XGBClassifier(objective='binary:logistic', tree_method='gpu_hist')\n\n# create MultiOutputClassifier instance to fit one classifier per target\nclassifier_XG_MO = MultiOutputClassifier(classifier_XG)","d7423b03":"y_train_np = y_train.iloc[:,:].to_numpy()\ny_test_np = y_test.iloc[:,:].to_numpy()","5537fe02":"# reference:\n# https:\/\/www.kaggle.com\/fchmiel\/xgboost-baseline-multilabel-classification\n\npredictions_final = np.zeros((test.shape[0], y_train_np.shape[1]))\npredictions_train = np.zeros((X_test.shape[0], y_train_np.shape[1]))\n\nkf = KFold(n_splits=5)\nfor fn, (trn_idx, val_idx) in enumerate(kf.split(X_train, y_train_np)):\n    print('Starting fold: ', fn)\n    X_train1, X_val = X_train[trn_idx], X_train[val_idx]\n    y_train1, y_val = y_train_np[trn_idx], y_train_np[val_idx]\n    \n    classifier_XG_MO.fit(X_train1, y_train1)\n    \n    preds = classifier_XG_MO.predict_proba(test)\n    preds = np.array(preds)[:,:,1].T\n    predictions_final += preds \/ 5","cbe06906":"# from sklearn.metrics import accuracy_score\n# # calculate Training accuracy\n\n# prediction\npredictions_train = classifier_XG_MO.predict(X_test)\n\nprint(\"Accuracy = \",accuracy_score(y_test,predictions_train))\nprint(\"\\n\")","07882208":"sample_sub.iloc[:,1:] = predictions_final","de6a1aca":"# from https:\/\/www.kaggle.com\/isaienkov\/keras-autoencoder-dae-neural-network-starter\n# initializing the data for all sig_id with cp_type=='ctl_vehicle', as they have no reaction to MoAs \n\nsample_sub['cp_type'] = test_features_d['cp_type_trt_cp']\nfor col in sample_sub.columns:\n    if col in ['sig_id', 'cp_type', 'cp_dose', 'cp_time']:\n        continue\n    sample_sub.loc[sample_sub['cp_type'] == '0', col] = 0\n\nsample_sub = sample_sub.drop(['cp_type'], axis=1)","bcc5b274":"sample_sub.to_csv('submission.csv', index=False)","4349493b":"# Training Accuracy","dc21f913":"### train_targets_scored has below fields for a given sig_id:\n**206 binary MoA targets that are scored**","2e2001d7":"## Using XGBoost\n*XGBoost is an optimized distributed gradient boosting library. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM)<br>\n-xgboost.readthedocs.io*","a2b1ce08":"# Training the Model","1f382de8":"# Load all the files","e554c89e":"# Transforming the data","86b69b9d":"# Create Training and Testing data","1cf7c92b":"### Standardizing","4e49b8ef":"### train_features has below fields for a given sig_id:\n\n1. cp_type    \n2. cp_time    \n3. cp_dose\n4. g-0 to g-771 (genome expression)\n5. c-0 to c-99 (cell viability)","b56a7bd4":"## Mechanisms of Action (MoA) Prediction\n##### Can you improve the algorithm that classifies drugs based on their biological activity?","dd11e3bf":"#### cp_type: \nsamples treated with a compound (**trt_cp**) or with a control perturbation (**ctl_vehicle**); control perturbations have no MoAs;\n#### cp_dose:\nD1 (High) and D2 (Low)\n#### cp_time:\n24, 48, 72 hours","5d179a2c":"![image.png](attachment:image.png)","106acf2e":"# Encode Categorical variables into dummy variables","564c8133":"# Conclusion","0b3316e9":"#### Rows: 23814 entries\n#### Columns: 876 entries"}}