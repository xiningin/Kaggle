{"cell_type":{"e7dbe111":"code","0b686134":"code","28d94918":"code","4ad52cdd":"code","17c017c6":"code","7cd389b4":"code","dfa3256e":"markdown","167a1cde":"markdown","e1342ea7":"markdown"},"source":{"e7dbe111":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b686134":"import pandas as pd\nfrom keras import backend as K\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint","28d94918":"path = '..\/input\/Kannada-MNIST\/'\nfile_name_dict= {'dig':'Dig-MNIST','test':'test','train':'train','sample':'sample_submission'}\ndf_dict = {key:pd.read_csv(path + value + '.csv') for key, value in file_name_dict.items()}","4ad52cdd":"def get_xy(df):\n    X = df.drop('label', axis=1)\n    y = df[['label']]\n    X = X_reshaper(X)\n    y = label_reshaper(y)\n    return X, y\n\ndef X_reshaper(df):\n    X = df.copy().values\n    X = X.reshape(X.shape[0], n_rows, n_columns, 1)\n    X = X.astype('float32')\n    return X\n\ndef label_reshaper(y, num_classes=10):\n    y = keras.utils.to_categorical(y, num_classes)\n    return y\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    \ndef create_model(input_shape, num_classes):\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3),\n                     activation='relu',\n                     input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n    model.add(Conv2D(128, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n    model.add(Conv2D(256, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n    model.add(Flatten())\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation='softmax'))\n\n    model.compile(loss=keras.losses.categorical_crossentropy,\n                  optimizer=keras.optimizers.Adam(),\n                  metrics=['accuracy', recall_m, precision_m])\n    return model\n\nn_rows, n_columns = 28,28\nbatch_size = 128\nnum_classes = 10\nepochs = 100\ninput_shape = (n_rows, n_columns, 1)\nnum_classes = 10\nX_train, y_train = get_xy(df_dict['train'])\nX_val, y_val = get_xy(df_dict['dig'])\n\n","17c017c6":"\ncheckpoint = ModelCheckpoint('\/kaggle\/working\/weights.hdf5', monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\nmodel = create_model(input_shape, num_classes)\nmodel.fit(X_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, y_val),\n          callbacks=callbacks_list)\nscore = model.evaluate(X_val, y_val, verbose=0)","7cd389b4":"X_test_df  = df_dict['test'].copy().drop('id', axis=1)\nX_test = X_reshaper(X_test_df)\nmodel = create_model(input_shape, num_classes)\nmodel.load_weights('\/kaggle\/working\/weights.hdf5')\ny_pred = model.predict(X_test)\ny_pred_classes = np.argmax(y_pred, axis = 1)\noutput = pd.DataFrame({'id': df_dict['test']['id'],\n                       'label': y_pred_classes})\n\noutput.to_csv('submission.csv', index=False)","dfa3256e":"# Model Strategy\n\n* Fitting model and checkpointing each epoch.\n* Best model based on validation accuracy is used for prediction","167a1cde":"# Predict and submit","e1342ea7":"# Supporting Functions"}}