{"cell_type":{"49d84df6":"code","fdbdc1e9":"code","7545055c":"code","0a3e3733":"code","07ddb3f5":"code","39c5c3f1":"code","a25d9796":"code","eeb64d6c":"code","75e34a54":"code","d9bfc60b":"code","0458b160":"code","4320287f":"code","dc1c0ef5":"code","705b7502":"code","503d526a":"code","b438e395":"code","1f68758b":"code","f419da8b":"code","12f7c433":"code","212747cc":"code","c9d7c61d":"code","338880f1":"code","2930bd37":"code","2702c240":"code","25eafaa6":"code","fad5e379":"code","7efea9de":"code","7af0377c":"code","d54783ee":"code","9d63cf0b":"code","28754710":"code","a3cfe245":"code","c6372333":"code","ca557e4b":"code","12473d4c":"code","0d40cc44":"code","fbb0a694":"code","74c30bb6":"code","858b52b3":"code","3f58adb8":"code","bfc04098":"code","de1d3263":"code","63ef6f67":"code","7c6e864f":"code","22ccf00a":"code","10eaf516":"code","b3ee2b74":"code","e53393e6":"code","391e85b6":"code","bedeb4cb":"code","cee65815":"code","ec562884":"code","7fd471c4":"code","9960198f":"code","bd2a5ada":"code","a3c49c82":"code","f83f0bd0":"code","6f2d9ee6":"code","36382891":"code","af2496aa":"code","34e85fde":"code","23d9dbe4":"code","875066e9":"code","6438f14e":"markdown","9964f15f":"markdown","8fbfe0d3":"markdown","458aa57c":"markdown","381aa5aa":"markdown","c657f564":"markdown","0b913523":"markdown","00b6f9d9":"markdown","7352b580":"markdown","66c14f39":"markdown","8fb708f4":"markdown","e295417e":"markdown","68bfcac3":"markdown","846a1eb8":"markdown","b248aa86":"markdown","8e9ab691":"markdown","409bf11b":"markdown","55d323d1":"markdown","c5826b6c":"markdown","21a53449":"markdown","bfe75fac":"markdown"},"source":{"49d84df6":"#Data manipulation libraries : \nimport numpy as np  #numpy\nimport pandas as pd  #pandas\nimport tensorflow as tf\n#System libraries\nimport glob #The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell\n\n#Map plotting \nimport folium #Interactive Maps viz\n\n\n\n#Plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n#math operations lib \nimport math\nfrom math import pi\n\n#date manipulation \nimport datetime as dt\n\n#Missing data detector lib\nimport missingno as mn\n\n#Impute missing data\nfrom sklearn.preprocessing import Imputer \n\n#Deep learning with keras\nfrom keras import backend as K\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n#Splitting data to test and train \nfrom sklearn.model_selection import train_test_split\n\nimport datetime\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom tensorflow import keras\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom collections import Counter\nimport time\nimport datetime as dt\nfrom datetime import datetime\nimport collections\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib.pyplot import rcParams\n\nfrom sklearn import linear_model","fdbdc1e9":"data = pd.read_csv('..\/input\/szeged-weather\/weatherHistory.csv')\ndata.head()","7545055c":"# check datatypes\ndata.dtypes","0a3e3733":"#Categorical variables:\ncategorical = data.select_dtypes(include = [\"object\"]).keys()\nprint(categorical)","07ddb3f5":"#Quantitative variables:\nquantitative = data.select_dtypes(include = [\"int64\",\"float64\"]).keys()\nprint(quantitative)","39c5c3f1":"#'Formatted Date' transformation:\n\ndata['Date'] = pd.to_datetime(data['Formatted Date'])\ndata['year'] = data['Date'].dt.year\ndata['month'] = data['Date'].dt.month\ndata['day'] = data['Date'].dt.day\ndata['hour'] = data['Date'].dt.hour\ndata.head()","a25d9796":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","eeb64d6c":"data[quantitative].describe()","75e34a54":"rcParams['figure.figsize'] = 9, 9\ndata[quantitative].hist()","d9bfc60b":"data=data.drop('Loud Cover',axis=1)","0458b160":"pressure_median = data['Pressure (millibars)'].median()\n      \ndef pressure(x):\n    if x==0:\n        return x + pressure_median\n    else:\n        return x\n        \ndata[\"Pressure (millibars)\"] = data.apply(lambda row:pressure(row[\"Pressure (millibars)\"]) , axis = 1)\n\nrcParams['figure.figsize'] = 5, 3\ndata['Pressure (millibars)'].hist()\n","4320287f":"rcParams['figure.figsize'] = 8, 5\nsns.countplot(y=data['Summary'])","dc1c0ef5":"data['Daily Summary'].value_counts(dropna=False)","705b7502":"data['Summary'].value_counts(dropna=False)","503d526a":"data['Precip Type'].value_counts(dropna=False)","b438e395":"data.fillna(method='ffill', inplace=True)","1f68758b":"sns.countplot(x=data['Precip Type'])","f419da8b":"\n# Calculate total number of cells in dataframe\ntotalCells = np.product(data.shape)\n\n# Count number of missing values per column\nmissingCount = data.isnull().sum()\n\n# Calculate total number of missing values\ntotalMissing = missingCount.sum()\n\n# Calculate percentage of missing values\nprint(\"The weather history dataset contains\", round(((totalMissing\/totalCells) * 100), 2), \"%\", \"missing values.\")","12f7c433":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nsns.pairplot(data[['Apparent Temperature (C)','Temperature (C)', 'Humidity' ]])\nplt.show()","212747cc":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nsns.pairplot(data[['Wind Speed (km\/h)', 'Wind Bearing (degrees)', 'Visibility (km)', 'Pressure (millibars)']])\nplt.show()","c9d7c61d":"sns.violinplot(x=\"Precip Type\", y=\"Temperature (C)\", data=data, palette=\"YlGnBu\");","338880f1":"sns.violinplot(x=\"Precip Type\", y=\"Humidity\", data=data, palette=\"YlGnBu\");","2930bd37":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nls = linear_model.LinearRegression()\n\n\n\nX = data[\"Humidity\"].values.reshape(-1,1)\ny = data[\"Temperature (C)\"].values.reshape(-1,1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.33, \n                                                    shuffle=True, random_state=0)\nprint(\"Linear Regression\")\nls.fit(X_train, y_train)\nprint(\"alpha = \",ls.coef_[0])\nprint(\"beta = \",ls.intercept_)\nprint(\"\\n\\nCalculating some regression quality metrics\")\ny_pred = ls.predict(X_test)\nprint(\"MSE = \",mean_squared_error(y_test, y_pred))\nprint(\"R2 = \",r2_score(y_test, y_pred))","2702c240":"def change_category_to_number(DailySummaryCat):\n    if DailySummaryCat=='Partly cloudy throughout the day.':\n        return 1\n    elif DailySummaryCat=='Mostly cloudy throughout the day.':\n        return 2\n    elif DailySummaryCat=='Foggy in the evening.':\n        return 3\n    elif DailySummaryCat=='Foggy overnight and breezy in the morning.':\n        return 4\n    elif DailySummaryCat=='Overcast throughout the day.':\n        return 5\n    elif DailySummaryCat=='Partly cloudy until night.':\n        return 6\n    elif DailySummaryCat=='Motly cloudy until night.':\n        return 7\n    elif DailySummaryCat=='Foggy starting overnight continuing until morning.':\n        return 8\n    elif DailySummaryCat=='Foggy in the morning.':\n        return 9\n    elif DailySummaryCat=='Partly cloudy until evening.':\n        return 10\n    elif DailySummaryCat=='Partly cloudy starting in the morning.':\n        return 11\n    elif DailySummaryCat=='Mostly cloudy starting overnight continuing until night.':\n        return 12\n    elif DailySummaryCat=='Partly cloudy starting in the afternoon.':\n        return 13\n    elif DailySummaryCat=='Partly cloudy starting overnight.':\n        return 14\n    elif DailySummaryCat=='Mostly cloudy starting overnight.':\n        return 15\n    elif DailySummaryCat=='Mostly cloudy until night and breezy in the afternoon.':\n        return 16\n    elif DailySummaryCat=='Mostly cloudy until evening.':\n        return 17\n    elif DailySummaryCat=='Foggy throughout the day.':\n        return 18\n    elif DailySummaryCat=='Partly cloudy starting in the morning.':\n        return 19\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until evening.':\n        return 20\n    elif DailySummaryCat=='Foggy until morning.':\n        return 21\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until night.':\n        return 22\n    elif DailySummaryCat=='Mostly cloudy starting in the morning.':\n        return 23\n    elif DailySummaryCat=='Foggy starting in the evening.':\n        return 24\n    elif DailySummaryCat=='Partly cloudy starting in the afternoon continuing until evening.':\n        return 25\n    elif DailySummaryCat=='Foggy overnight.':\n        return 26\n    elif DailySummaryCat=='Clear throughout the day.':\n        return 27\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until night.':\n        return 28\n    elif DailySummaryCat=='Partly cloudy overnight.':\n        return 29\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening.':\n        return 30\n    elif DailySummaryCat=='Foggy until night.':\n        return 31\n    elif DailySummaryCat=='Partly cloudy in the morning.':\n        return 32\n    elif DailySummaryCat=='Foggy starting overnight continuing until afternoon.':\n        return 33\n    elif DailySummaryCat=='Foggy until afternoon.':\n        return 34\n    elif DailySummaryCat=='Breezy and mostly cloudy overnight.':\n        return 35\n    elif DailySummaryCat=='Partly cloudy overnight and breezy starting in the morning continuing until afternoon.':\n        return 36\n    elif DailySummaryCat=='Breezy in the morning and foggy in the evening.':\n        return 37\n    elif DailySummaryCat=='Mostly cloudy until evening and breezy in the evening.':\n        return 38\n    elif DailySummaryCat=='Mostly cloudy starting in the evening.':\n        return 39\n    elif DailySummaryCat=='Mostly cloudy throughout the day and breezy starting overnight continuing until afternoon.':\n        return 40\n    elif DailySummaryCat=='Breezy starting in the morning continuing until night.':\n        return 41\n    elif DailySummaryCat=='Overcast throughout the day and breezy starting overnight continuing until morning.':\n        return 42\n    elif DailySummaryCat=='Breezy starting overnight continuing until morning and foggy in the evening.':\n        return 43\n    elif DailySummaryCat=='Light rain until morning.':\n        return 44\n    elif DailySummaryCat=='Mostly cloudy until night and breezy starting in the afternoon continuing until night.':\n        return 45\n    elif DailySummaryCat=='Mostly cloudy starting in the morning continuing until afternoon.':\n        return 46\n    elif DailySummaryCat=='Breezy until afternoon and overcast throughout the day.':\n        return 47\n    elif DailySummaryCat=='Partly cloudy until evening and breezy in the afternoon.':\n        return 48\n    elif DailySummaryCat=='Breezy starting overnight continuing until morning and partly cloudy starting overnight continuing until evening.':\n        return 49\n    elif DailySummaryCat=='Light rain starting overnight.':\n        return 50\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening and breezy starting in the morning continuing until evening.':\n        return 51\n    elif DailySummaryCat=='Foggy starting in the morning continuing until evening and breezy in the evening.':\n        return 52\n    elif DailySummaryCat=='Partly cloudy throughout the day and breezy in the afternoon.':\n        return 53\n    elif DailySummaryCat=='Mostly cloudy starting overnight continuing until evening and breezy starting overnight continuing until morning.':\n        return 54\n    elif DailySummaryCat=='Partly cloudy starting overnight continuing until evening and breezy in the morning.':\n        return 55\n    elif DailySummaryCat=='Overcast throughout the day and breezy overnight.':\n        return 56\n    elif DailySummaryCat=='Light rain in the morning.':\n        return 57\n    elif DailySummaryCat=='Rain until morning.':\n        return 58\n    elif DailySummaryCat=='Breezy in the morning and mostly cloudy starting in the evening.':\n        return 59\n    elif DailySummaryCat=='Mostly cloudy starting in the morning and breezy overnight.':\n        return 60\n    elif DailySummaryCat=='Partly cloudy starting overnight and breezy starting in the morning continuing until afternoon.':\n        return 61\n    elif DailySummaryCat=='Partly cloudy starting in the morning and breezy starting in the afternoon continuing until evening.':\n        return 62\n    elif DailySummaryCat=='Partly cloudy starting in the morning continuing until evening and breezy in the afternoon.':\n        return 63\n    elif DailySummaryCat=='Foggy starting overnight continuing until morning and breezy in the afternoon.':\n        return 64","25eafaa6":"# assign a numerical value to the categorical field of class, by using the above function\ndata['DailySummaryCat'] = data['Daily Summary'].apply(change_category_to_number)","fad5e379":"data.fillna(method='ffill', inplace=True) ","7efea9de":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['DailySummaryCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","7af0377c":"def change_category(Summary):\n    if Summary=='Partly Cloudy':\n        return 1\n    elif Summary=='Mostly Cloudy':\n        return 2\n    elif Summary=='Foggy':\n        return 3\n    elif Summary=='Clear':\n        return 4\n    elif Summary=='Overcast':\n        return 5\n    elif Summary=='Breezy and Overcast':\n        return 6\n    elif Summary=='Breezy and Partly Cloudy':\n        return 7\n    elif Summary=='Breezy and Mostly Cloudy':\n        return 8\n    elif Summary=='Dry and Partly Cloudy':\n        return 9\n    elif Summary=='Windy and Partly Cloudy':\n        return 10\n    elif Summary=='Light Rain':\n        return 11\n    elif Summary=='Breezy':\n        return 12\n    elif Summary=='Windy and Overcast':\n        return 13\n    elif Summary=='Humid and Mostly Cloudy':\n        return 14\n    elif Summary=='Drizzle':\n        return 15\n    elif Summary=='Windy and Mostly Cloudy':\n        return 16\n    elif Summary=='Breezy and Foggy':\n        return 17\n    elif Summary=='Dry':\n        return 18\n    elif Summary=='Humid and Partly Cloudy':\n        return 19\n    elif Summary=='Dry and Mostly Cloudy':\n        return 20\n    elif Summary=='Rain':\n        return 21\n    elif Summary=='Windy':\n        return 22\n    elif Summary=='Humid and Overcast':\n        return 23\n    elif Summary=='Windy and Foggy':\n        return 24\n    elif Summary=='Dangerously Windy and Partly Cloudy':\n        return 25\n    elif Summary=='Windy and Dry':\n        return 26\n    elif Summary=='Breezy and Dry':\n        return 27\n    ","d54783ee":"# assign a numerical value to the categorical field of class, by using the above function\ndata['SummaryCat'] = data['Summary'].apply(change_category)\n","9d63cf0b":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['SummaryCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","28754710":"def change_category(PrecipTypeCat):\n    if PrecipTypeCat=='rain':\n        return 1\n    elif PrecipTypeCat=='snow':\n        return 2\n  ","a3cfe245":"# assign a numerical value to the categorical field of class, by using the above function\ndata['PrecipTypeCat'] = data['Precip Type'].apply(change_category)","c6372333":"plt.figure(figsize=(18,8)) # this creates a figure 8 inch wide, 4 inch high\nax = sns.countplot(x=data['PrecipTypeCat'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.tight_layout()\nplt.show()","ca557e4b":"data.drop(['Formatted Date','Summary','Daily Summary','Precip Type','Date'],axis=1,inplace=True)\ndata.head()","12473d4c":"X = data.drop('DailySummaryCat', axis=1)\ny = data['DailySummaryCat']","0d40cc44":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=128)","fbb0a694":"dtClassifer = DecisionTreeClassifier(max_leaf_nodes=15,random_state=0)","74c30bb6":"dtClassifer.fit(X_train, y_train)","858b52b3":"prediction = dtClassifer.predict(X_test)","3f58adb8":"prediction[:100]","bfc04098":"y_test[:100]","de1d3263":"accuracy_score(y_true=y_test, y_pred=prediction)","63ef6f67":"lrClassifier = LogisticRegression()","7c6e864f":"lrClassifier.fit(X_train,y_train)","22ccf00a":"prediction = lrClassifier.predict(X_test)","10eaf516":"prediction[:3000]","b3ee2b74":"y_test[:100]","e53393e6":"accuracy_score(y_true=y_test, y_pred=prediction)","391e85b6":"#Drawing a heatmap\ndef facet_heatmap(data, color, **kws):\n    values=data.columns.values[3]\n    data = data.pivot(index='day', columns='hour', values=values)\n    sns.heatmap(data, cmap='coolwarm', **kws)  \n\n#Joining heatmaps of every month in a year \ndef weather_calendar(year,weather): #Year= Any year in DataFrame. Weather=Any quantitative variable\n    datayear = data[data['year']==year][['month', 'day', 'hour', weather]]\n    vmin=datayear[weather].min()\n    vmax=datayear[weather].max()\n    with sns.plotting_context(font_scale=12):\n        g = sns.FacetGrid(datayear,col=\"month\", col_wrap=3) #One heatmap per month\n        g = g.map_dataframe(facet_heatmap,vmin=vmin, vmax=vmax)\n        g.set_axis_labels('Hour', 'Day')\n        plt.subplots_adjust(top=0.9)\n        g.fig.suptitle('%s Calendar. Year: %s.' %(weather, year), fontsize=18)","bedeb4cb":"weather_calendar(2006,'Temperature (C)')","cee65815":"weather_calendar(2008,'Humidity')","ec562884":"data_neur=data\n","7fd471c4":"data_neur['T'] = data['Temperature (C)']\ndata_neur['TA'] = data['Apparent Temperature (C)']\ndata_neur['H'] = data['Humidity']\ndata_neur['WS'] = data['Wind Speed (km\/h)']\ndata_neur['WB'] = data['Wind Bearing (degrees)']\ndata_neur['V'] = data['Visibility (km)']\ndata_neur['P'] = data['Pressure (millibars)']\ndata_neur['Y'] = data['year']\ndata_neur['M'] = data['month']\ndata_neur['D'] = data['day']\ndata_neur['HR'] = data['hour']\ndata_neur['SC'] = data['SummaryCat']\ndata_neur['PT'] = data['PrecipTypeCat']\ndata.drop(['hour','day','month','year','Pressure (millibars)','Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km\/h)','Wind Bearing (degrees)','Visibility (km)','SummaryCat','PrecipTypeCat'],axis=1,inplace=True)\ndata_neur.head()","9960198f":"# X will be a pandas dataframe of all columns except meantempm\nX = data_neur[[col for col in data_neur.columns if col != 'DailySummaryCat']]\n\n# y will be a pandas series of the meantempm\ny = data_neur['DailySummaryCat']","bd2a5ada":"# split data into training set and a temporary set using sklearn.model_selection.traing_test_split\nX_train, X_tmp, y_train, y_tmp = train_test_split(X, y, test_size=0.2, random_state=23)","a3c49c82":"# take the remaining 20% of data in X_tmp, y_tmp and split them evenly\nX_test, X_val, y_test, y_val = train_test_split(X_tmp, y_tmp, test_size=0.5, random_state=23)\n\nX_train.shape, X_test.shape, X_val.shape\nprint(\"Training instances   {}, Training features   {}\".format(X_train.shape[0], X_train.shape[1]))\nprint(\"Validation instances {}, Validation features {}\".format(X_val.shape[0], X_val.shape[1]))\nprint(\"Testing instances    {}, Testing features    {}\".format(X_test.shape[0], X_test.shape[1]))","f83f0bd0":"feature_cols = [tf.feature_column.numeric_column(col) for col in X.columns]","6f2d9ee6":"tf.VERSION #to check it has the latest version over 1.21 if not then install with conda update -f -c conda-forge tensorflow","36382891":"regressor = tf.estimator.DNNRegressor(feature_columns=feature_cols,\n                                      hidden_units=[50, 50],\n                                      model_dir='tf_wx_model')","af2496aa":"def wx_input_fn(X, y=None, num_epochs=None, shuffle=True, batch_size=260): # 260 is used as we have approx 570 dataset for training\n    return tf.estimator.inputs.pandas_input_fn(x=X,\n                                               y=y,\n                                               num_epochs=num_epochs,\n                                               shuffle=shuffle,\n                                               batch_size=batch_size)","34e85fde":"evaluations = []\nSTEPS = 260\nfor i in range(100):\n    regressor.train(input_fn=wx_input_fn(X_train, y=y_train), steps=STEPS)\n    evaluation = regressor.evaluate(input_fn=wx_input_fn(X_val, y_val,\n                                                         num_epochs=1,\n                                                         shuffle=False),\n                                    steps=1)\n    evaluations.append(regressor.evaluate(input_fn=wx_input_fn(X_val,\n                                                               y_val,\n                                                               num_epochs=1,\n                                                               shuffle=False)))","23d9dbe4":"evaluations[0]","875066e9":"# manually set the parameters of the figure to and appropriate size\nplt.rcParams['figure.figsize'] = [14, 10]\n\nloss_values = [ev['loss'] for ev in evaluations]\ntraining_steps = [ev['global_step'] for ev in evaluations]\n\nplt.scatter(x=training_steps, y=loss_values)\nplt.xlabel('Training steps (Epochs = steps \/ 2)')\nplt.ylabel('Loss (SSE)')\nplt.show()","6438f14e":"> In order to build our forecasting model, we will have to opt for using CRISP-DM methodology.","9964f15f":"**1.2 Assessing the situation**\n\n** Resource Inventory **\n\nData : dataset contains in a practical format 10 years (2006-2016) of hourly data in just a single file.\n\nComputing resources : hp , i3 processor, 4 GB RAM\n\nProgramming languages and libraries : python ( Numpy, pandas, matplotlib, seaborn, tensorflow, scikitlearn)","8fbfe0d3":"**Visualization. Weather calendar**","458aa57c":"first of all i'm going to change the categorical variables to numeric","381aa5aa":"1.1 **Gather background information**\n\n *Compiling the business background *\n\nthis project is about historical weather around Szeged, Hungary , from 2006 to 2016\n\n**Defining business objectives**\n\nMake data more accessible and understandable for everyone.\n\nProvide fast analytics for the different Factors Affecting Weather .\n\nuse different prediction and classification algorithms\n\ncalculating and comparing evaluation measures\n\n","c657f564":"**Neural Model for Weather Prediction**","0b913523":"**Quantitative variables. Missing values**","00b6f9d9":"**1. Business understanding**","7352b580":"With these plots we can choose two variables to study the relationship betweem them.\n\nIn this study let's focus to explore Temperature as a function of Humidity : how humidity influences in temperature?.","66c14f39":"**Logistic Regression**","8fb708f4":"This first step is essentially about understanding the business, the need for the specific project and the resources that we have. ","e295417e":"** Categorical variables**","68bfcac3":"***Linear Regression***","846a1eb8":"**2.1 Data Exploration**\n\nExploration is to understand how all these columns are related and the value structures so the correlation between these data","b248aa86":"'Loud Cover' takes values zero. We drop it","8e9ab691":"**importing libraries **","409bf11b":"**Decision Tree Classifier**","55d323d1":"**1.3 Objective of the project**\n\n the objective of this project is to analyze the weather data and extract the hypotheses to arrive at a prediction","c5826b6c":"\"Pressure (millibars)\".\n\nSome observations are nil. It seems that they lack values. because the pressure does not take zero as value \n\nLet's fill the zeros with the median:","21a53449":"**Check out the data**","bfe75fac":"**2.Collect initial data**\n\nDataset from Kaggle : https:\/\/www.kaggle.com\/budincsevity\/szeged-weather"}}