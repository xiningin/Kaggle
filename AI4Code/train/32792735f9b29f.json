{"cell_type":{"f08bd754":"code","3ec4ef3b":"code","e3b693b1":"code","653f8cc3":"markdown","4675ad5e":"markdown","f7521bd7":"markdown","6ddb7506":"markdown","b7f87f1a":"markdown","e6372cf6":"markdown","5351e7e5":"markdown"},"source":{"f08bd754":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3ec4ef3b":"xs_pt_1 = np.random.normal(0.5, 0.01, 100)\nys_pt_1 = np.random.normal(0.5, 0.01, 100)\n\nxs_pt_2 = np.random.normal(0.2, 0.01, 100)\nys_pt_2 = np.random.normal(0.2, 0.01, 100)\n\nxs_pt_3 = np.random.normal(0.2, 0.01, 100)\nys_pt_3 = np.random.normal(0.5, 0.01, 100)\n\nxs_pt_4 = np.random.normal(0.5, 0.01, 100)\nys_pt_4 = np.random.normal(0.5, 0.01, 100)\n\nx_q = [0.40]\ny_q = [0.40]\n\nx_q2 = [0.48]\ny_q2 = [0.50]","e3b693b1":"\nfig, axarr = plt.subplots(1,2)\nfig.set_size_inches(12, 4)\n\naxarr[0].scatter(xs_pt_2, ys_pt_2)\naxarr[0].scatter(xs_pt_1, ys_pt_1)\naxarr[0].scatter(xs_pt_3, ys_pt_3)\naxarr[0].scatter(x_q, y_q, label=\"query point\")\naxarr[0].legend()\naxarr[0].grid()\naxarr[0].set_title('Case 1')\n\naxarr[1].scatter(xs_pt_1, ys_pt_1, color='green')\naxarr[1].scatter(xs_pt_4, ys_pt_4, color='yellow')\naxarr[1].scatter(x_q2, y_q2, label=\"query point\", color='red')\naxarr[1].legend()\naxarr[1].grid()\naxarr[1].set_title('Case 2')\n\nplt.show()","653f8cc3":"<br>","4675ad5e":"- **CASE 1:** KNN classifies x_q as orange which is wrong. (It belongs to a novel class)\n- **CASE 2:** Classified as yellow (Wrong. Because data is random and noisy)\n- Time (<s>Low latency<\/s>) and importantly space complexities","f7521bd7":"<br>","6ddb7506":"# Time and Space Complexity for **Novel Query Point**","b7f87f1a":"### 01. Time\n\nSum of\n   - Time taken to compute distances from **all points** `n` (because closest one cannot be found unless dist is calculated)\n       - Time taken to compute norm for **all dims** `m`\n   - Time taken majority vote from top-k distant classes ~ O(1) as k <<< n \n   \nHence, $$O(nm)$$\n\n### 02. Space\n\n   - For calculating *distances from all points* from `x_q`, we need them\n\nHence store **whole training set**,\n\n$$O(nm)$$\n\n<u>**Both time and space complexities are extremely large**<\/u> (solution: [kd Tree](link) or [LSH](link))","e6372cf6":"# Disadvantages","5351e7e5":"<br>"}}