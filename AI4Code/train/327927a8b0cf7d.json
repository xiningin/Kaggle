{"cell_type":{"dd96c391":"code","478eb895":"code","3e8a93a1":"code","98320144":"code","7191f0d2":"code","ea326fd2":"code","74645903":"code","00c36313":"code","26b52fa3":"code","f1ea791c":"code","6e7245c6":"code","ee003f68":"code","f22cfb9d":"code","ca99d3fa":"code","3d3a4ca0":"code","dfeb0d8b":"code","b9db003f":"code","4ae8acfa":"code","79929ecb":"code","ef30e73e":"code","093d58d7":"code","88e05230":"code","06728d04":"code","beaedde6":"code","1e558318":"code","eeee14f1":"code","221b88b3":"markdown","46042849":"markdown","92098155":"markdown","966f28b8":"markdown","7dca4ba5":"markdown","18f724b8":"markdown","abdeff12":"markdown","d50188c3":"markdown","99762f88":"markdown","f85eeacb":"markdown","d12c9148":"markdown","4ca4dc78":"markdown","e9d3e4f3":"markdown","b0ea13a4":"markdown","113bd8aa":"markdown","d3c98f7e":"markdown","47fd42b3":"markdown","9f10ee0b":"markdown"},"source":{"dd96c391":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","478eb895":"df = pd.read_csv('..\/input\/googleplaystore.csv')","3e8a93a1":"df.info()","98320144":"df.sample(10)","7191f0d2":"df.isnull().sum().sort_values(ascending=False)","ea326fd2":"df = df[df['Android Ver'] != 'NaN']\ndf = df[df['Installs'] != 'Free']","74645903":"df.Installs.unique()","00c36313":"df.Installs = df.Installs.apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf.Installs = df.Installs.apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndf.Installs = df.Installs.apply(lambda x: int(x))","26b52fa3":"df.info()","f1ea791c":"df.Size = df.Size.apply(lambda x: x.replace('M', '000') if 'M' in x else x)\ndf.Size = df.Size.apply(lambda x: x.replace('k','') if 'k' in str(x) else x)\ndf.Size = df.Size.apply(lambda x: x.replace('Varies with device','0') if 'Varies with device' in str(x) else x)\ndf.Size = df.Size.apply(lambda x: float(x))","6e7245c6":"df.Price = df.Price.apply(lambda x: x.replace('$','') if '$' in str(x) else x)\ndf.Price = df.Price.astype(float)","ee003f68":"df.Reviews = df.Reviews.apply(lambda x: int(x))","f22cfb9d":"df.sample(10)","ca99d3fa":"fig = {\n  \"data\": [\n    {\n      \"values\": df.Category.value_counts().values,\n      \"labels\": df.Category.value_counts().index,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Percentages of Categories in PlayStore\"\n    }\n}\niplot(fig)","3d3a4ca0":"plt.figure(figsize=(10,8))\nsns.kdeplot(df.Price, shade=True,color='red')\nplt.grid()\nplt.show()","dfeb0d8b":"print('Kurtosis:',df.Price.kurt())\nprint('Skewness:',df.Price.skew())","b9db003f":"df.head()","4ae8acfa":"fig = {\n    \"data\": [{\n        \"type\": 'violin',\n        \"y\": df.Price,\n        \"box\": {\n            \"visible\": True\n        },\n        \"line\": {\n            \"color\": 'black'\n        },\n        \"box\": {\n                \"visible\": True\n        },\n        \"meanline\": {\n                \"visible\": True\n        },\n        \"x0\": 'Price'\n    }],\n    \"layout\" : {\n        \"title\": \"Violin & Box Plots of Price\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\niplot(fig)","79929ecb":"plt.figure(figsize=(13,9))\ndf.groupby('Category')['Price'].sum().nlargest(10).sort_values().plot('barh')\nplt.xlabel('Total Price', fontsize = 12)\nplt.ylabel('Categories',fontsize=12)\nplt.show()","ef30e73e":"rating= df['Rating'].dropna()\nsize= df['Size'].dropna()\ninstalls= df['Installs'][df.Installs!=0].dropna()\nreviews= df['Reviews'][df.Reviews!=0].dropna()\ntypes = df['Type'].dropna()\nprice = df['Price']\n\ndata = pd.concat([rating, size, np.log(installs), np.log10(reviews), types, price], axis=1)\n\nplt.figure(figsize=(15,15))\nsns.pairplot(data, hue='Type', palette=\"husl\", markers= ['s','d'])\nplt.show()","093d58d7":"plt.figure(figsize=(13,13))\nsns.jointplot(x=data['Reviews'], y=data['Installs'], kind='reg', color='blue')\nplt.show()","88e05230":"plt.figure(figsize=(13,10))\nsns.stripplot(x= df[df.Price>0].Price, y=df.Category) # a scatterplot where one variable is categorical\nplt.grid()\nplt.show()\n\ndf[['Category','App']][df.Price >= 300]","06728d04":"len(df.Category.value_counts().sort_values(ascending=False).index)","beaedde6":"print(df.Category.nunique())\n\ndatalist = []\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 255, 33)]\n\nfor i in range(33):\n    violins = {\n            \"type\": 'violin',\n            \"y\": df.Rating[df.Category == df.Category.value_counts().sort_values(ascending=False).index[i]],\n            \"name\": df.Category.value_counts().sort_values(ascending=False).index[i],\n            \"marker\":{\n                \"color\":c[i]},\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\n    datalist.append(violins)\niplot(datalist)","1e558318":"print(df.Category.value_counts().sort_values(ascending=False).nlargest(5))\n\ndf_family = df[df.Category=='FAMILY']\ndf_game = df[df.Category=='GAME']\ndf_tools = df[df.Category=='TOOLS']\ndf_business = df[df.Category=='BUSINESS']\ndf_medical = df[df.Category=='MEDICAL']\n\nbox1 = go.Box(\n                y= df_family.Rating,\n                name= 'Family',\n                marker = dict(color = 'rgb(12, 128, 128)'))\nbox2 = go.Box(\n                y= df_game.Rating,\n                name= 'Game',\n                marker = dict(color = 'rgb(100, 12, 38)'))\nbox3 = go.Box(\n                y= df_tools.Rating,\n                name= 'Tools',\n                marker = dict(color = 'rgb(12, 128, 128)'))\nbox4 = go.Box(\n                y= df_business.Rating,\n                name= 'Business',\n                marker = dict(color = 'rgb(50, 40, 100)'))\nbox5 = go.Box(\n                y= df_medical.Rating,\n                name= 'Medical',\n                marker = dict(color = 'rgb(45, 179, 66)'))\n\ndata_boxes = [box1,box2,box3,box4,box5]\niplot(data_boxes)","eeee14f1":"new_df = df.groupby(['Category', 'Type']).agg({'App' : 'count'}).reset_index()\n\nouter_group_names = ['GAME', 'FAMILY', 'MEDICAL', 'TOOLS','BUSINESS']\nouter_group_values = [len(df[df.Category == category]) for category in outer_group_names]\n\na,b,c,d,e =[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens, plt.cm.Purples, plt.cm.Oranges]\n\ninner_group_names = ['Paid', 'Free'] * 5\ninner_group_values = []\n\nfor category in outer_group_names:\n    for t in ['Paid', 'Free']:\n        x = new_df[new_df.Category == category]\n        try:\n            inner_group_values.append(int(x.App[x.Type == t].values[0]))\n        except:\n            inner_group_values.append(0)\n\nexplode = (0.025,0.025,0.025,0.025,0.025)\n\n# Outer ring\nfig, ax = plt.subplots(figsize=(10,10))\nax.axis('equal')\nmypie, texts, _ = ax.pie(outer_group_values, radius=1.5, labels=outer_group_names, autopct='%1.1f%%', pctdistance=1.1,\n                                 labeldistance= 0.75,  explode = explode, colors=[a(0.6), b(0.6), c(0.6), d(0.6),e(0.6)], textprops={'fontsize': 16})\nplt.setp( mypie, width=1, edgecolor='black')\n \n# Inner ring\nmypie2, _ = ax.pie(inner_group_values, radius=0.7, labels=inner_group_names, labeldistance= 0.7, \n                   textprops={'fontsize': 12}, colors = [a(0.4), a(0.2), b(0.4), b(0.2), c(0.4), c(0.2), d(0.4), d(0.2),e(0.4)])\nplt.setp( mypie2, width=0.7, edgecolor='black')\n \nplt.show()","221b88b3":"*What are the first 10 application categories which are spended on the most?*","46042849":"In case you have \"NaN\" values in your data,  you're like to be given an error like that in an EDA analysis; **\"max must be larger than min in range parameter\".** So we need to drop them all firstly.\n\n> * EDA is the process of figuring out what the data can tell us and we use EDA to find patterns, relationships, or anomalies to inform our subsequent analysis.\n* A pairplot is one of the most effective basic tools for EDA allowing us to see both distribution of single variables and relationships between two variables.\n* The distplots on diagonal below (histogram for discrete values), shows us the distribution of features. ","92098155":"**The distribution of prices**","966f28b8":"# **Plots**","7dca4ba5":"# **Cleaning Data**","18f724b8":"*Replacing str values and changing types*","abdeff12":"**Percentages of Most Downloaded 5 Categories with Their Types**","d50188c3":"# **Data Overview**","99762f88":"# **Introduction**","f85eeacb":"***The intersections and hypothesis of \"Reviews\" and \"Installs\"***","d12c9148":"*Finding out the number of  NaN values in each column*","4ca4dc78":"> I'm kind of new in data science and I've just started learning statistics. My purpose of sharing kernels is to prove what I've learned up to now. When I choose a data for my kernel, I usually check different kernels of another users with that dataset. I do this since I want to improve my statistical and analytical thinking about analysis of a data. Sometimes I copy out some of the codes with little changes on it, but I make sure that I've learned the method, the statistical meaning and benefit of that kind of plotting or coding. ","e9d3e4f3":"*High kurtosis means a really heavy-tailed relative to a normal distribution and also there are **outliers**. Since most of the prices aggregate around 0 and price cannot be cheaper than free, distribution will have a positive skewness because of the prices being higher than 0.  Let's prove that there are too many outliers and most of the price centered around the zero.*","b0ea13a4":"***Pricing w.r.t. categories***\n* There are some apps even more expensive than 300$, let's see them as well.","113bd8aa":"**Now let's just see the first 5 significant categories in  box plots**","d3c98f7e":"* Thanks in advance for your upvotes.\n\n\n\n# END","47fd42b3":"As you see below, most of the numerical data in object type and there are also NaN values in them. Let's go deeper in recognizing data, then deal with those issues.","9f10ee0b":"***Statistics of Ratings w.r.t. all categories (Violin & Box)***"}}