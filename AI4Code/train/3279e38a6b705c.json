{"cell_type":{"08569e3a":"code","efc31482":"code","665d36f5":"code","647faddd":"code","a837c699":"code","6efae801":"code","c8c153f5":"code","e1923fcf":"code","3d4837cd":"code","61c90633":"code","ff294889":"code","ff5ade1e":"code","2ac71f94":"code","9e7745cb":"code","b7295b90":"code","62e79528":"code","fe0daddc":"code","55420f93":"code","b43eefd3":"code","6dd2cb60":"code","e6969ca7":"code","6b30e94c":"code","c6dde3cb":"code","0d8fb58b":"markdown","9a1ea657":"markdown","0d491aae":"markdown","fc15b07a":"markdown","ec3272f4":"markdown","a5e58e80":"markdown","4080bf71":"markdown"},"source":{"08569e3a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport keras","efc31482":"#trainpath=(\"D:\/machine learning\/competition\/intel image processing\/seg_train\/seg_train\/\")\n#testpath=(\"D:\/machine learning\/competition\/intel image processing\/seg_test\/seg_test\/\")\n#predpath=(\"D:\/machine learning\/competition\/intel image processing\/seg_pred\/seg_pred\/\")\ntrainpath = '..\/input\/intel-image-classification\/seg_train\/seg_train\/'\ntestpath = '..\/input\/intel-image-classification\/seg_test\/seg_test\/'\npredpath = '..\/input\/intel-image-classification\/seg_pred\/seg_pred\/'\n","665d36f5":"for folder in os.listdir(trainpath ):\n    files=gb.glob(pathname=str(trainpath + folder + '\/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')\n    #print(\"for training data found {} in {} \".format (len(files),folder))              \n    ","647faddd":"for folder in os.listdir(testpath ):\n    files=gb.glob(pathname=str(testpath + folder + '\/*.jpg'))\n    print(f'For test data , found {len(files)} in folder {folder}')\n    #print(\"for training data found {} in {} \".format (len(files),folder))              \n    ","a837c699":"files=gb.glob(pathname=str(predpath + '\/*.jpg'))\nprint(f'For pred data , found {len(files)} ')\n    #print(\"for training data found {} in {} \".format (len(files),folder))   ","6efae801":"size=[]\nfor folder in os.listdir(trainpath ):\n    files=gb.glob(pathname=str(trainpath + folder + '\/*.jpg'))\n    for file in files:\n        image=plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","c8c153f5":"size=[]\nfor folder in os.listdir(testpath ):\n    files=gb.glob(pathname=str(testpath + folder + '\/*.jpg'))\n    for file in files:\n        image=plt.imread(file)\n        size.append(image.shape)\n\npd.Series(size).value_counts()","e1923fcf":"code = {'buildings':0 ,'forest':1,'glacier':2,'mountain':3,'sea':4,'street':5}\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x","3d4837cd":"s=100\nX_train=[]\ny_train=[]\nfor folder in os.listdir(trainpath ):\n    files=gb.glob(pathname=str(trainpath + folder + '\/*.jpg'))\n    for file in files:\n        image=cv2.imread(file)\n        image_array=cv2.resize(image,(s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])","61c90633":"print(f'we have {len(X_train)} in X_train')","ff294889":"X_test=[]\ny_test=[]\nfor folder in os.listdir(testpath):\n    files=gb.glob(pathname=str(testpath+folder+'\/*.jpg'))\n    for file in files:\n        image=cv2.imread(file)\n        image_array=cv2.resize(image,(s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])","ff5ade1e":"plt.figure(figsize=(20,20))\nfor n,i in enumerate (list(np.random.randint(0, len(X_train),36))):\n    plt.subplot(6,6,n+1)\n    plt.imshow(X_train[i])\n    plt.axis(\"off\")\n    plt.title (getcode(y_train[i]))\n    \n    ","2ac71f94":"X_pred=[]\nfiles = gb.glob(pathname= str(predpath + '\/*.jpg'))\nfor file in files: \n    image = cv2.imread(file)\n    image_array = cv2.resize(image , (s,s))\n    X_pred.append(list(image_array))","9e7745cb":"len(X_pred)","b7295b90":"X_train=np.array(X_train)\ny_train=np.array(y_train)\nX_test=np.array(X_test)\ny_test=np.array(y_test)\nX_pred=np.array(X_pred)\n\nprint(f\"X_train shape is {X_train.shape}\")\nprint(f\"X_test shape is {X_train.shape}\")\nprint(f\"y_train shape is {X_train.shape}\")\nprint(f\"y_train shape is {X_train.shape}\")","62e79528":"KerasModel = keras.models.Sequential([\n        keras.layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(s,s,3)),\n        keras.layers.Conv2D(150,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Conv2D(120,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(80,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(50,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Flatten() ,    \n        keras.layers.Dense(120,activation='relu') ,    \n        keras.layers.Dense(100,activation='relu') ,    \n        keras.layers.Dense(50,activation='relu') ,        \n        keras.layers.Dropout(rate=0.5) ,            \n        keras.layers.Dense(6,activation='softmax') ,    \n        ])","fe0daddc":"KerasModel.compile(optimizer ='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","55420f93":"print(KerasModel.summary())","b43eefd3":"epochs = 40\nThisModel = KerasModel.fit(X_train, y_train, epochs=epochs,batch_size=64,verbose=1)","6dd2cb60":"ModelLoss, ModelAccuracy = KerasModel.evaluate(X_test, y_test)\nprint('Test Loss is {}'.format(ModelLoss))\nprint('Test Accuracy is {}'.format(ModelAccuracy ))","e6969ca7":"y_pred = KerasModel.predict(X_test)\n\nprint('Prediction Shape is {}'.format(y_pred.shape))","6b30e94c":"y_result=KerasModel.predict(X_pred)","c6dde3cb":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')\n    plt.title(getcode(np.argmax(y_result[i])))","0d8fb58b":"#prediction folder ","9a1ea657":"# prediction ","0d491aae":"# building the model","fc15b07a":"#building keras model","ec3272f4":"# import the files ","a5e58e80":"#test folder","4080bf71":"#checking image"}}