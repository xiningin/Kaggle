{"cell_type":{"ce0da752":"code","52254691":"code","41fba8a5":"code","2973e56a":"code","843cfe69":"code","183962a5":"code","e14c41b3":"code","2d1cbb78":"code","f6498121":"code","9306ce68":"code","cb34afe8":"code","0f9375cb":"code","163b499d":"code","4082911c":"code","7161852a":"code","7f98a2f8":"code","3668385b":"code","f5a73593":"code","45252572":"code","97a42572":"markdown","5e94c922":"markdown","2a22478f":"markdown","5cd082ce":"markdown","de78dbf5":"markdown"},"source":{"ce0da752":"package_paths = [\n    \"..\/input\/pytorch-image-library\/pytorch-image-models-master\/pytorch-image-models-master\",\n]\nimport sys;\n\nfor pth in package_paths:\n    sys.path.append(pth)\n\nimport timm","52254691":"import pandas as pd\nimport numpy as np\nimport cv2\nimport torch\nimport torch.nn as nn\nimport albumentations as A\nimport pytorch_lightning as pl\nimport matplotlib.pyplot as plt\n\nfrom torch.utils.data import Dataset, DataLoader\nfrom albumentations.core.composition import Compose, OneOf\nfrom albumentations.pytorch import ToTensorV2\n\nfrom pytorch_lightning import Trainer, seed_everything\nfrom pytorch_lightning import Callback\nfrom pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import ModelCheckpoint, EarlyStopping\nfrom sklearn.model_selection import StratifiedKFold","41fba8a5":"print(f\"PyTorch Lightning version: {pl.__version__}\")","2973e56a":"DEBUG = False\n\nclass CFG:\n    seed = 42\n    model_name = 'tf_efficientnet_b5_ns'\n    pretrained = True\n    img_size = 512\n    num_classes = 6\n    lr = 1e-4\n    max_lr = 1e-3\n    pct_start = 0.3\n    div_factor = 1.0e+3\n    final_div_factor = 1.0e+3\n    num_epochs = 5\n    batch_size = 16\n    accum = 1\n    precision = 16\n    n_fold = 5\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","843cfe69":"PATH = \"..\/input\/plant-pathology-2021-fgvc8\/\"\nTEST_DIR = PATH + 'test_images\/'","183962a5":"seed_everything(CFG.seed)","e14c41b3":"class PlantDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.image_id = df['image'].values\n        self.labels = df.iloc[:, 2:].values\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        image_id = self.image_id[idx]\n        label = torch.tensor(self.labels[idx].astype('int8'), dtype=torch.float32)\n        \n        image_path = TEST_DIR + image_id\n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        augmented = self.transform(image=image)\n        image = augmented['image']\n        return {'image':image, 'target': label}","2d1cbb78":"def get_transform(phase: str):\n    if phase == 'train':\n        return Compose([\n            A.RandomResizedCrop(height=CFG.img_size, width=CFG.img_size),\n            A.Flip(p=0.5),\n            A.RandomRotate90(p=0.5),\n            A.ShiftScaleRotate(p=0.5),\n            A.HueSaturationValue(p=0.5),\n            A.OneOf([\n                A.RandomBrightnessContrast(p=0.5),\n                A.RandomGamma(p=0.5),\n            ], p=0.5),\n            A.OneOf([\n                A.Blur(p=0.1),\n                A.GaussianBlur(p=0.1),\n                A.MotionBlur(p=0.1),\n            ], p=0.1),\n            A.OneOf([\n                A.GaussNoise(p=0.1),\n                A.ISONoise(p=0.1),\n                A.GridDropout(ratio=0.5, p=0.2),\n                A.CoarseDropout(max_holes=16, min_holes=8, max_height=16, max_width=16, min_height=8, min_width=8, p=0.2)\n            ], p=0.2),\n            A.Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n    else:\n        return Compose([\n            A.Resize(height=CFG.img_size, width=CFG.img_size),\n            A.Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])","f6498121":"class CustomModel(nn.Module):\n    def __init__(self, model_name='tf_efficientnet_b0_ns', pretrained=True):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        in_features = self.model.get_classifier().in_features\n        fc = nn.Sequential(\n            nn.Linear(in_features, in_features),\n            nn.ReLU(inplace=True),\n            nn.Dropout(0.5),\n            nn.Linear(in_features, CFG.num_classes)\n        )\n        \n        if 'efficientnet' in model_name:\n            self.model.classifier = fc\n        elif 'res' in model_name:\n            self.model.fc = fc\n\n    def forward(self, x):\n        x = self.model(x)\n        return x","9306ce68":"checkpoint = \"..\/input\/pp-2021-efficientnet-model\/last.ckpt\"\nmodel = CustomModel(model_name=CFG.model_name, pretrained=False)\nmodel.load_state_dict(torch.load(checkpoint)['state_dict'])","cb34afe8":"sub = pd.read_csv(PATH + \"sample_submission.csv\")\nsub","0f9375cb":"new_labels = ['healthy', 'scab', 'frog_eye_leaf_spot', 'complex', 'rust', 'powdery_mildew']","163b499d":"tmp = pd.DataFrame(np.zeros([len(sub), len(new_labels)]), columns=new_labels)\nsub = pd.concat([sub, tmp], axis=1)\nsub","4082911c":"test_dataset = PlantDataset(sub, get_transform('valid'))\ntest_loader = DataLoader(test_dataset, batch_size=CFG.batch_size, shuffle=False, num_workers=2)","7161852a":"model.cuda()\nmodel.eval()\n\nsigmoid = nn.Sigmoid()\n\npredictions = []\nfor batch in test_loader:\n    image = batch['image'].cuda()\n    with torch.no_grad():\n        outputs = model(image)\n        preds = outputs.detach().cpu()\n        # The probability of 0.5 or more is considered positive.\n        predictions.append(sigmoid(preds).numpy() > 0.55)","7f98a2f8":"predictions = pd.DataFrame(np.concatenate(predictions).astype(np.int), columns=new_labels)","3668385b":"sub.iloc[:, 2:] = predictions\nsub","f5a73593":"labels = []\nfor i, row in sub.iloc[:, 2:].iterrows():\n    if ((row['healthy'] == 1) or row.sum() == 0):\n        tmp = 'healthy'\n    else:\n        tmp = ' '.join(np.array(new_labels)[row==row.max()])\n    labels.append(tmp)","45252572":"sub['labels'] = labels\nsub[['image', 'labels']].to_csv('submission.csv', index=False)\nsub","97a42572":"# Define Model","5e94c922":"## Inference","2a22478f":"# Config","5cd082ce":"# Import","de78dbf5":"# Define Dataset"}}