{"cell_type":{"5082c49e":"code","3f6cc15b":"code","587a5b65":"code","10047850":"code","aeb709e3":"code","569f7048":"code","0809273f":"code","f0734f37":"code","80f530ad":"code","c973e4e2":"code","e1737696":"code","f35e7849":"code","f07eed1e":"code","faf140c1":"code","f990a5c1":"code","e8230c68":"code","0983e4e0":"code","9626b3dd":"code","56c12845":"code","287af5ce":"code","7591a2e6":"code","74833ff4":"code","13411781":"code","8cb46452":"code","9db2808a":"code","7bfcec4c":"code","61a17bb6":"code","1b5cc314":"code","d4778a6c":"code","02f0aa19":"code","45cbf1b5":"code","ffdd1ef4":"code","7fcbe0a0":"code","6539a392":"code","95f4d9ee":"code","3260d274":"markdown","3bde6683":"markdown","c6f418e7":"markdown","0a7fcc6b":"markdown","541db953":"markdown","34b26557":"markdown","f52ad2c8":"markdown","4b669692":"markdown","9a003b7e":"markdown","57470035":"markdown","c96495d2":"markdown","5e0c7656":"markdown","7834ad8d":"markdown","a4ea9e44":"markdown","53fa979f":"markdown","9113db56":"markdown","33208092":"markdown","0ed73794":"markdown","4224d8b9":"markdown","8d9cffce":"markdown","09f015fe":"markdown","45a0a6a0":"markdown","649b30df":"markdown","e46458a0":"markdown","11a8a24b":"markdown","e99ca15e":"markdown","3ea24d3c":"markdown","e21f759f":"markdown","8929ae88":"markdown","60ffaacb":"markdown","5ff594a1":"markdown","db1cd749":"markdown","46c154f3":"markdown","555aa957":"markdown","5f0ba664":"markdown","922d93e7":"markdown","7dba2169":"markdown","ef793442":"markdown","4be3924e":"markdown","da615d13":"markdown","6adf7799":"markdown","239f9aa9":"markdown","a77db45d":"markdown","4e7737db":"markdown","b7735e13":"markdown","bb40daaa":"markdown","d2082816":"markdown","7a4ca0d4":"markdown","e77af33a":"markdown","2e8100fb":"markdown","600674e1":"markdown","6040c922":"markdown","5fa4e97d":"markdown","01eca2be":"markdown","446f4268":"markdown","f2b012a0":"markdown","bd14fbfb":"markdown","c5e9a949":"markdown"},"source":{"5082c49e":"# Pandas\nimport pandas as pd\n\n# Pandas SQL\nimport pandasql as ps\n\nairports= pd.read_csv('..\/input\/airports-data\/airports.csv')\nairport_freq = pd.read_csv('..\/input\/airports-data\/airport-frequencies.csv')\nrunways = pd.read_csv('..\/input\/airports-data\/runways.csv')","3f6cc15b":"#Commented out due to long printout \n#ps.sqldf('select * from airports')","587a5b65":"#Commented out due to long printout\n#airports","10047850":"ps.sqldf('select * from airports limit 3')","aeb709e3":"airports.head(3)","569f7048":"ps.sqldf('select id from airports where ident = \"KLAX\"')","0809273f":"airports[airports.ident == 'KLAX'].id","f0734f37":"ps.sqldf('select distinct type from airports')","80f530ad":"airports.type.unique()","c973e4e2":"ps.sqldf('select * from airports where iso_region = \"US-CA\" and type = \"seaplane_base\"')","e1737696":"airports[(airports.iso_region == 'US-CA') & (airports.type == 'seaplane_base')]","f35e7849":"ps.sqldf('select airport_ident, airport_freq.type, description, frequency_mhz from airport_freq\\\n         join airports on airport_freq.airport_ref = airports.id where airports.ident = \"KLAX\"')","f07eed1e":"airport_freq.merge(airports[airports.ident == 'KLAX'][['id']],\n                   left_on='airport_ref', right_on='id', how='inner')[\n                        ['airport_ident', 'type', 'description', 'frequency_mhz']]","faf140c1":"ps.sqldf('select * from airport_freq where airport_ident = \"KLAX\" order by type')","f990a5c1":"airport_freq[airport_freq.airport_ident == 'KLAX'].sort_values('type')","e8230c68":"ps.sqldf('select * from airport_freq where airport_ident = \"KLAX\" order by type desc')","0983e4e0":"airport_freq[airport_freq.airport_ident == 'KLAX'].sort_values('type', ascending=False)","9626b3dd":"ps.sqldf('select * from airports where type in (\"heliport\", \"balloonport\")')","56c12845":"airports[airports.type.isin(['heliport', 'balloonport'])]","287af5ce":"ps.sqldf('select * from airports where type not in (\"heliport\", \"balloonport\")')","7591a2e6":"airports[~airports.type.isin(['heliport', 'balloonport'])]","74833ff4":"ps.sqldf('select iso_country, type, count(*) from airports\\\n         group by iso_country, type order by iso_country, type')","13411781":"airports.groupby(['iso_country', 'type']).size()","8cb46452":"by_country = ps.sqldf('select iso_country, type, count(*) as size from airports\\\n                      group by iso_country, type order by iso_country, count(*) desc')\nby_country","9db2808a":"airports.groupby(['iso_country', 'type']).size().to_frame(\n    'size').sort_values(['iso_country', 'size'], ascending=[True, False])","7bfcec4c":"ps.sqldf('select type, count(*) from airports\\\n         where iso_country = \"US\" group by type having count(*) > 1000\\\n         order by count(*) desc')","61a17bb6":"airports[airports.iso_country == 'US'].groupby('type').filter(\n    lambda g: len(g) > 1000).groupby('type').size().sort_values(\n    ascending=False)","1b5cc314":"ps.sqldf('select iso_country from by_country order by size desc limit 10')","d4778a6c":"by_country.nlargest(10, columns='size')['iso_country']","02f0aa19":"ps.sqldf('select iso_country from by_country order by size desc limit 10 offset 10')","45cbf1b5":"by_country.nlargest(20, columns='size')['iso_country'].tail(10)","ffdd1ef4":"ps.sqldf('select max(length_ft), min(length_ft), avg(length_ft) from runways')","7fcbe0a0":"runways.agg({'length_ft': ['max', 'min', 'mean']})","6539a392":"ps.sqldf('select name, municipality from airports where ident = \"KLAX\"\\\n         union all select name, municipality from airports where ident = \"KLGB\"')","95f4d9ee":"pd.concat([airports[airports.ident == 'KLAX'][['name', 'municipality']],\n           airports[airports.ident == 'KLGB'][['name', 'municipality']]])","3260d274":"|                                                  SQL                                                 |                                                       Pandas                                                       |\n|:----------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------:|\n| select * from airports where iso_region = 'US-CA' and type = 'seaplane_base'                         | airports[(airports.iso_region == 'US-CA') & (airports.type == 'seaplane_base')]                                    |\n| select ident, name, municipality from airports where iso_region = 'US-CA' and type = 'large_airport' | airports[(airports.iso_region == 'US-CA') & (airports.type == 'large_airport')][['ident', 'name', 'municipality']] |","3bde6683":"|                                           SQL                                          |                            Pandas                            |\n|:--------------------------------------------------------------------------------------:|:------------------------------------------------------------:|\n| select max(length_ft), min(length_ft), avg(length_ft) from runways | runways.agg({'length_ft': ['min', 'max', 'mean', 'median']}) |","c6f418e7":"## So how do we translate these terms into Pandas? Let's Begin.. <a id ='Examples'><\/a>","0a7fcc6b":"#### Example Query 1: Display all airports who are either heliport or ballonport","541db953":"#### Example Query 1:  Count airports if grouped togather and ordered ascending format by country and type ","34b26557":"### Structure of SQL Query <a id ='Anatomy'><\/a>","f52ad2c8":"### UNION<a id ='Union'><\/a>","4b669692":"## What is SQL ? <a id ='SQL'><\/a>","9a003b7e":"|                                     SQL                                    |                                          Pandas                                         |\n|:--------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------:|\n| select * from airport_freq where airport_ident = 'KLAX' order by type      | airport_freq[airport_freq.airport_ident == 'KLAX'].sort_values('type')                  |\n| select * from airport_freq where airport_ident = 'KLAX' order by type desc | airport_freq[airport_freq.airport_ident == 'KLAX'].sort_values('type', ascending=False) |","57470035":"|                                    SQL                                   |                           Pandas                          |\n|:------------------------------------------------------------------------:|:---------------------------------------------------------:|\n| select iso_country from by_country order by size desc limit 10           | by_country.nlargest(10, columns='size')['iso_country']         |\n| select iso_country from by_country order by size desc limit 10 offset 10 | by_country.nlargest(20, columns='size')['iso_country'].tail(10) |","c96495d2":"### Aggregate functions (MIN, MAX, MEAN)<a id ='Agg'><\/a>","5e0c7656":"#### Example Query 2: Select all airports and display first 3 results","7834ad8d":"|                                                                 SQL                                                                 |                                                                  Pandas                                                                 |\n|:-----------------------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------:|\n| select name, municipality from airports where ident = 'KLAX' union all select name, municipality from airports where ident = 'KLGB' | pd.concat([airports[airports.ident == 'KLAX'][['name', 'municipality']], airports[airports.ident == 'KLGB'][['name', 'municipality']]]) |","a4ea9e44":"#### Example Query: Join airports and airport_freq tables where ident is 'KLAX' and display the ident, type, description and frequency_mhz","53fa979f":"#### Example Query 2: Display all airports who are not heliport or ballonport","9113db56":"----","33208092":"#### Example Query: Count and display airport type where country is USA and grouped by type and displayed only if their count is greater than 100 and arrange it in descending format","0ed73794":"Hope you enjoyed reading this and learned something new ! Feel free to provide any feedback and connect with me.\n\nThanks !\n\nPerpared by Asad Mahmood.","4224d8b9":"### IN\u2026 NOT IN<a id ='in'><\/a>\n\nThe **IN** operator allows you to specify multiple values in a **WHERE** clause. The **IN** operator is a shorthand for multiple **OR** conditions.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_in.asp)","8d9cffce":"|                                                           SQL                                                           |                                                                     Pandas                                                                    |\n|:-----------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------------:|\n| select iso_country, type, count(&ast;) from airports group by iso_country, type order by iso_country, type              | airports.groupby(['iso_country', 'type']).size()                                                                                              |\n| select iso_country, type, count(&ast;) from airports group by iso_country, type order by iso_country, count(&ast;) desc | airports.groupby(['iso_country', 'type']).size().to_frame('size').sort_values(['iso_country', 'size'], ascending=[True, False]).reset_index() |","09f015fe":"#### Example Query: Select runways that have max and min length, also calculate the mean length of runways.","45a0a6a0":"## What is Pandas ? <a id ='Pandas'><\/a>","649b30df":"|                                                                               SQL                                                                              |                                                                                    Pandas                                                                                    |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| ps.sqldf('select airport_ident, airport_freq.type, description, frequency_mhz from airport_freq join airports on airport_freq.airport_ref = airports.id where airports.ident = \"KLAX\"') | airport_freq.merge(airports[airports.ident == 'KLAX'][['id']], left_on='airport_ref', right_on='id', how='inner')[['airport_ident', 'type', 'description', 'frequency_mhz']] |","e46458a0":"#### Example Query 2: Display all airports frequency where the ident is 'Klax' and order the results descending by type","11a8a24b":"The **HAVING** clause was added to SQL because the **WHERE** keyword could not be used with aggregate functions.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_having.asp)\n\nIn SQL, you can additionally filter grouped data using a HAVING condition. In Pandas, you can use .filter() and provide a Python function (or a lambda) that will return True if the group should be included into the result.","e99ca15e":"#### Example Query 1: Display all airports frequency where the ident is 'Klax' and order the results ascending by type","3ea24d3c":"### HAVING<a id ='having'><\/a>","e21f759f":"The **ORDER BY** keyword is used to sort the result-set in ascending or descending order. By default, it orders by ascending format.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_orderby.asp)","8929ae88":"### JOIN <a id ='join'><\/a>","60ffaacb":"#### Example Query 1: Select top 10 countries with the largest count","5ff594a1":"#### Example Query 4: Display types of airports","db1cd749":"### ORDER BY <a id ='order'><\/a>","46c154f3":"#### Example Query 3: display airport id where ident is KLAX","555aa957":"### Top N Records<a id ='records'><\/a>","5f0ba664":"### SELECT Queries<a id ='select'><\/a>","922d93e7":"With .reset_index(), we restart row numbering for our data frame.","7dba2169":"| |                      SQL                     |                 Pandas                |\n|-|:--------------------------------------------:|:-------------------------------------:|\n|1| select * from airports                       | airports                              |\n|2| select * from airports limit 3               | airports.head(3)                      |\n|3| select id from airports where ident = 'KLAX' | airports[airports.ident == 'KLAX'].id |\n|4| select distinct type from airport            | airports.type.unique()                |","ef793442":"Python Data Analysis Library, called Pandas, is a Python library built for data analysis and manipulation. It\u2019s open-source and supported by Anaconda. It is particularly well suited for structured (tabular) data. It is heavily used in data science and machine learning python based projects.\n\nFor more information, visit [here](https:\/\/pandas.pydata.org\/)","4be3924e":"A SQL query consists of a few important keywords. Between those keywords, you add the specifics of what data, exactly, you want to see. Here is a skeleton query without the specifics:\n\n**SELECT\u2026 FROM\u2026 WHERE\u2026 <br>\nGROUP BY\u2026 HAVING\u2026 <br>\nORDER BY\u2026 <br>\nLIMIT\u2026 OFFSET\u2026 <br>**","da615d13":"#### Example Query 2: Select 10 countries with the first top 10 countries having the largest count","6adf7799":"#### Example Qquery 1: Select all airports ","239f9aa9":"The UNION operator is used to combine the result-set of two or more SELECT statements.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_union.asp)","a77db45d":"Here are some **SELECT** statements. We truncate results with **LIMIT**, and filter them with **WHERE**. We use **DISTINCT** to remove duplicated results.","4e7737db":"We join multiple conditions with an &. If we only want a subset of columns from the table, that subset is applied in another pair of square brackets.","b7735e13":"Data Source: https:\/\/ourairports.com\/data\/","bb40daaa":"There are other terms, but these are the most important ones.\n\n**NOTE: To simulate SQL queries I will be using panadasql.**<br>\nFor more information about the library, vist [here](https:\/\/pypi.org\/project\/pandasql\/).","d2082816":"The **SELECT** statement is used to select data from a database. The data returned is stored in a result table, called the result-set.\n\nFor more information, click [here](#https:\/\/www.w3schools.com\/sql\/sql_select.asp)","7a4ca0d4":"SQL stands for Structured Query Language. A query language is a kind of programming language that's designed to facilitate retrieving specific information from databases, and that's exactly what SQL does. To put it simply, SQL is the language of databases.\n\nFor more information, visit [here](https:\/\/www.dataquest.io\/blog\/sql-basics\/)","e77af33a":"#### Example Query: Show combined result sets that contain the name and muncipality of airports for idents \"KLAX\" and \"KLGB\"","2e8100fb":"## Table of Contents\n1. [What is Pandas ?](#Pandas)\n2. [What is SQL ?](#SQL)\n    1. [Structure of SQL Query](#Anatomy)\n3. [Examples](#Examples)\n    1. [SELECT](#select)\n    2. [JOIN](#join)\n    3. [ORDER BY](#order)\n    4. [IN ... NO IN](#in)\n    5. [GROUP BY, COUNT, ORDER BY](#groupby)\n    6. [HAVING](#having)\n    7. [TOP N RECORDS](#records)\n    8. [MIN, MAX and MEAN](#Agg)\n    9. [UNION and UNION ALL](#Union)","600674e1":"|                                                                     SQL                                                                     |                                                                   Pandas                                                                   |\n|:-------------------------------------------------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------------------:|\n| select type, count(&ast;) from airports where iso_country = 'US' group by type having count(&ast;) > 1000 order by count(&ast;) desc | airports[airports.iso_country == 'US'].groupby('type').filter(lambda g: len(g) > 1000).groupby('type').size().sort_values(ascending=False) |","6040c922":"|                                  SQL                                 |                           Pandas                           |\n|:--------------------------------------------------------------------:|:----------------------------------------------------------:|\n| select * from airports where type in ('heliport', 'balloonport')     | airports[airports.type.isin(['heliport', 'balloonport'])]  |\n| select * from airports where type not in ('heliport', 'balloonport') | airports[~airports.type.isin(['heliport', 'balloonport'])] |","5fa4e97d":"#### Example Query 2: Count airports if grouped togather and ordered descending format by country and type ","01eca2be":"### GROUP BY, COUNT, ORDER BY<a id ='groupby'><\/a>\n\nThe **GROUP BY** statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\". The **GROUP BY** statement is often used with aggregate functions **(COUNT, MAX, MIN, SUM, AVG)** to group the result-set by one or more columns.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_groupby.asp)\n\nGrouping is straightforward: use the .groupby() operator. There\u2019s a subtle difference between semantics of a COUNT in SQL and Pandas. In Pandas, .count() will return the number of non-null\/NaN values. To get the same result as the SQL COUNT, use .size().","446f4268":"A **JOIN** clause is used to combine rows from two or more tables, based on a related column between them.\n\nFor more information, click [here](https:\/\/www.w3schools.com\/sql\/sql_join.asp)","f2b012a0":"#### Example Query 1: Display all airports where region is 'US-CA' and airport type is 'seaplane_base'","bd14fbfb":"# Translating SQL to Pandas","c5e9a949":"#### Example Query 2: Display ident, name and municipality in the region of 'US-CA' and airport type is 'large_airport'"}}