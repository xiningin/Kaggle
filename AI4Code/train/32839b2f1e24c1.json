{"cell_type":{"1d5ba0e5":"code","5a0ad6ec":"code","12066b43":"code","c8b92e37":"code","1f89703a":"code","8bc5fe54":"code","e1360b27":"code","111bc465":"code","e56ea041":"code","72723860":"code","7d263ff7":"code","40f8c2ea":"code","29edcdff":"code","12a4427e":"code","4783a502":"code","fa3204df":"code","8a6705c1":"code","e4b0321b":"code","547d4992":"code","5fe1c5e1":"code","c705446f":"code","af4b01da":"code","10cae5f2":"code","fcb1c831":"code","7100fe47":"code","f1131861":"code","2dee7574":"code","b4a3d057":"code","ece4c2e8":"code","4f7a46ac":"code","6c53d876":"code","c50011d3":"code","61356ade":"code","ecd8f2d2":"code","472255c7":"code","e42534ed":"code","9e936fc9":"code","3085d34d":"code","cc05d5b4":"code","252b94b8":"code","910adf46":"code","5fd84c0e":"code","e1dd7e09":"code","cda8f91c":"code","674844ec":"code","d01fd720":"code","ce0e0468":"code","2a07f55c":"code","e056982e":"code","902c0c24":"code","6809a212":"code","b83aeedd":"code","c52e7618":"code","07cf13ac":"code","daeeff8f":"code","0cc521c7":"code","5d9b0345":"code","6e0a5d91":"code","5b489af6":"code","168e7bdc":"code","ef9cad4a":"code","94fc41d2":"code","37298491":"code","618aa3a3":"code","80f2c5cd":"code","01c084e2":"code","93a8992a":"code","1a077b81":"code","0071c847":"code","91df8b7b":"code","a81653e4":"code","239ba47f":"code","6ce16ba7":"code","928b4a66":"code","444ed798":"code","c49b33de":"code","6f4b0689":"code","67a84528":"code","550b20c9":"code","c9ca610e":"code","9083917f":"code","6d79bb06":"markdown","ad039017":"markdown","3632457a":"markdown","57b0b38e":"markdown","c091ab00":"markdown","93fe1e0d":"markdown","1e4d37a5":"markdown","33261492":"markdown","696d87f0":"markdown","5674007c":"markdown","2792d1df":"markdown","22f576a8":"markdown","d1bb53ad":"markdown","42372eac":"markdown","5dcbeebc":"markdown","336a5c57":"markdown","3239e7b2":"markdown","3af3201f":"markdown","a5d76f59":"markdown","8c4619d1":"markdown","2af6686f":"markdown","e6978e13":"markdown","3cf9bf88":"markdown","ea5805a4":"markdown","3f27199a":"markdown","5a0139eb":"markdown","4acb6760":"markdown","303f7a85":"markdown","b6467082":"markdown","3e35cb4a":"markdown","4874261b":"markdown","9cae78a9":"markdown","ad6fe9af":"markdown","d07b0fb3":"markdown","991ab987":"markdown","a41bc023":"markdown","b20e23c3":"markdown","0a21c626":"markdown","bd748ef0":"markdown","3f15ae5a":"markdown","5e2ae08b":"markdown","53769395":"markdown","2b8926ec":"markdown","7ad59e26":"markdown","b4e586bd":"markdown","305355fb":"markdown","88582168":"markdown","1bac952d":"markdown","9a8746b3":"markdown","23be915d":"markdown","99b78910":"markdown"},"source":{"1d5ba0e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a0ad6ec":"book_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/stock_id=0\")\nbook_testparquet","12066b43":"book_trainparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0\")\nbook_trainparquet","c8b92e37":"plt.plot(np.array(book_trainparquet['time_id'][:1000]))#1000\u884c\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\nplt.show()#time_id\u306f\u6570\u306b\u3070\u3089\u3064\u304d\u3042\u308a\nplt.plot(np.array(book_trainparquet['seconds_in_bucket'][:1000]))\nplt.show()\n","1f89703a":"print(book_trainparquet['time_id'].value_counts())#\u30c7\u30fc\u30bf\u6570\nprint()\nprint(book_trainparquet['time_id'].value_counts().describe())\n\nsns.countplot(book_trainparquet['time_id'])\nax =plt.gca()\nax.axes.xaxis.set_ticks([])\nplt.show()\n\n","8bc5fe54":"book_trainparquet[book_trainparquet['time_id']==5]","e1360b27":"book_data = book_trainparquet[book_trainparquet['time_id']==5]\nsample = ['bid_price1','bid_price2','ask_price1','ask_price2']\nsample2 = ['bid_size1','bid_size2','ask_size1','ask_size2']\nplt.figure(figsize=(20,6))\nfor i ,col in enumerate(sample):\n    plt.plot(book_data['seconds_in_bucket'],book_data[col],'x-',label=col)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(20,6))\nfor i,col in enumerate(sample2):\n    plt.plot(book_data['seconds_in_bucket'],book_data[col],label=col)\nplt.legend()\nplt.show()\n\n    ","111bc465":"trade_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\/stock_id=0\")\ntrade_testparquet\n","e56ea041":"trade_trainparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\ntrade_trainparquet","72723860":"plt.plot(np.array(trade_trainparquet['time_id'][:1000]))\nplt.show()\nplt.plot(np.array(trade_trainparquet['seconds_in_bucket'][:1000]))\nplt.show()","7d263ff7":"print(trade_trainparquet['time_id'].value_counts())\nprint()\nprint(trade_trainparquet['time_id'].value_counts().describe())\n\nsns.countplot( trade_trainparquet['time_id'])\nax = plt.gca()\nax.axes.xaxis.set_ticks([])\nplt.show()","40f8c2ea":"trade_trainparquet[trade_trainparquet['time_id']==5]","29edcdff":"trade_data = trade_trainparquet[trade_trainparquet['time_id']==5]\nplt.figure(figsize=(20,6))\nfor i,col in enumerate((['price',])):\n    plt.plot(trade_data['seconds_in_bucket'],trade_data[col],'x-',label=col)\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['size','order_count',]):\n    plt.plot(trade_data[\"seconds_in_bucket\"],trade_data[col],label=col)\n\nplt.legend()\nplt.show()","12a4427e":"plt.figure(figsize=(20,6))\nfor i,col in enumerate([sample]):\n    plt.plot(book_data['seconds_in_bucket'],book_data[col],'x--',label=col)\nplt.plot(trade_data['seconds_in_bucket'],trade_data['price'],'o--',lw=3,label='price')\nplt.legend()\nplt.show()\n\n\n\n","4783a502":"test = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest","fa3204df":"book_testparquet","8a6705c1":"trade_testparquet","e4b0321b":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\n","547d4992":"print(train['target'].describe())\nsns.displot(train['target'])\nplt.show()","5fe1c5e1":"plt.plot(train[:10000]['stock_id'])\nplt.show()\nplt.plot(train[:10000]['time_id'])\nplt.show()\nplt.plot(train['target'][:10000])\nplt.show()","c705446f":"train[train['stock_id']==1]","af4b01da":"for tt in ([train[train['stock_id']==0],\n            train[train['stock_id']==1],\n            train[train['stock_id']==2],]):\n    plt.plot(tt[:100]['time_id'],tt[:100]['target'])\n    plt.xlabel('time_id')\n    plt.ylabel('target')\nplt.show()","10cae5f2":"def calc_wap(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\/(df['bid_size1'] + df['ask_size1'])\n    return wap","fcb1c831":"wap = calc_wap(book_data)\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['bid_price1','ask_price1','bid_price2', 'ask_price2', ]):\n    plt.plot(book_data[\"seconds_in_bucket\"],book_data[col],'x-',label=col)\n\nplt.plot(book_data[\"seconds_in_bucket\"],wap,'o--',lw=3,label='WAP')\nplt.legend()\nplt.show()","7100fe47":"sns.histplot(wap, kde=True)","f1131861":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()\n","2dee7574":"plt.figure(figsize=(10,6))\nplt.plot(book_data['seconds_in_bucket'],wap)\nplt.show()\n\nplt.figure(figsize=(10,6))\nplt.plot(book_data['seconds_in_bucket'],np.log(wap))\nplt.show()\n\nplt.figure(figsize=(10,6))\nplt.plot(book_data['seconds_in_bucket'],wap.diff())\nplt.plot(book_data['seconds_in_bucket'],log_return(wap),'x')#diff\u306f\u5dee\u5206\u3092\u8a08\u6e2c\u3059\u308b\u6642\u306b\u4f7f\u3046\nplt.show()\n","b4a3d057":"log_return_wap = log_return(wap)[1:]\nsns.histplot(log_return_wap,kde=True, stat = 'probability')\nplt.show()\nsns.histplot(log_return_wap,kde=True, stat = 'probability',cumulative=True)#cumulative\u306f\u7d2f\u7a4d\nplt.show()\n#\u7d76\u5bfe\u5024\nsns.histplot(np.abs(log_return_wap),kde=True,stat='probability')#np.abs\u306f\u914d\u5217\u8981\u7d20\u306e\u7d76\u5bfe\u5024\u3092\u3068\u308b\nplt.show()","ece4c2e8":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","4f7a46ac":"realized_vol =realized_volatility(log_return(wap))\nrealized_vol\n","6c53d876":"train_list=[0,\n           31,\n           18,#\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u306a\u9298\u67c4\n           43, #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5c0f\u3055\u306a\u9298\u67c4\n]\n\nbook_trainparquet_list = []\n\nfor i in train_list:\n    book_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=\"+str(i)))","c50011d3":"\nplt.figure(figsize =(10,20))\n\ntid = 5\nfor id,book in enumerate(book_trainparquet_list):\n\n    book_tid = book[book['time_id'] == tid]\n    wap = calc_wap(book_tid)\n\n    plt.subplot(3,1,1)\n    plt.plot(book_tid['seconds_in_bucket'],wap,label='id='+str(train_list[id]))\n    plt.legend()\n    \n    logreturn = log_return(wap)\n    plt.subplot(3,1,2)\n    plt.plot(book_tid['seconds_in_bucket'],logreturn,'x')\n    \n    plt.subplot(3,1,3)\n    sns.distplot(logreturn,)\n    \n    realized_vol = realized_volatility(logreturn)\n    print('id=',train_list[id])\n    print(realized_vol)\n\n\n\n","61356ade":"\nwap = calc_wap(book_data)\nlog_return_wap = log_return(wap)[1:]\nlog_return_wap = log_return_wap[log_return_wap !=0]\n\nfor ff in [wap,log_return_wap]:\n    plt.figure(figsize=(4,4))\n    plt.plot(ff[:-1],ff[1:],'o')\n    plt.show()\n    \n    ","ecd8f2d2":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\n#\u81ea\u5df1\u76f8\u95a2\nfig = plot_acf(wap,lags=50)\nplt.show()\n\n#\u504f\u81ea\u5df1\u76f8\u95a2\nfig = plot_pacf(wap,lags=50)\nplt.show()","472255c7":"from statsmodels.tsa.stattools import adfuller\n\ndef analysis_adf(series):\n    results = adfuller(series)\n    \n    \n    print(f\"ADF Statistic: {results[0]}\")\n    print(f\"p-value: {results[1]}\")\n    print(\"Critical Values:\")\n    for key, value in results[4].items():\n        print(\"\\t%s: %.3f\" % (key, value))\n\nanalysis_adf(wap)\n","e42534ed":"for id,book in enumerate(book_trainparquet_list):\n    book_tid = book[book['time_id']==tid]\n    tmp_wap = calc_wap(book_tid)\n    analysis_adf(tmp_wap)\n    plt.show()\n    #\u81ea\u5df1\u76f8\u95a2\n    fig = plot_acf(tmp_wap,lags=50)\n    #\u504f\u81ea\u5df1\u76f8\u95a2\n    fig = plot_pacf(tmp_wap,lags=50)","9e936fc9":"from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(wap)","3085d34d":"for id,book in  enumerate(book_trainparquet_list):\n    book_tid = book[book['time_id'] == tid]\n    wap = calc_wap(book_tid)\n    autocorrelation_plot(wap)\n    ","cc05d5b4":"from sklearn.preprocessing import PowerTransformer\nfor id in [1,2,10,30,100]:\n    \n    xx = np.array(train[train['stock_id']==id]['target'])\n    fig,(ax1,ax2) = plt.subplots(1,2,figsize=(12,4))\n    plt.xlim([0,0.04])\n    sns.distplot(xx,ax=ax1)\n    \n    plt.xlim([-3,3])\n    scaler = PowerTransformer()\n    sns.distplot(scaler.fit_transform(xx.reshape(-1,1)),ax=ax2)\n    #sns.distplot( scaler.fit_transform(xx.reshape(-1,1)), ax=ax2)\n    \n    plt.show()\n    \n","252b94b8":"stock = train.groupby('stock_id')['target'].agg(['mean','median','std','count','sum']).reset_index()\nstock","910adf46":"stock.describe()","5fd84c0e":"for i in ['mean','median','std']:\n    sns.distplot(stock[i])\n    plt.show()","e1dd7e09":"train_info = train.copy()\ntrain_info['mean'] = train['stock_id'].map(dict(zip(stock['stock_id'],stock['mean'])))\ntrain_info['median'] = train['stock_id'].map(dict(zip(stock['stock_id'],stock['mean'])))\ntrain_info['std'] = train['stock_id'].map(dict(zip(stock['stock_id'],stock['std'])))\ntrain_info\n\n#d = dict(k1=1, k2=2, k3=3)\n#print(d)\n# {'k1': 1, 'k2': 2, 'k3': 3}\n#dict\u306f\u8f9e\u66f8\u578b\u306b\u5909\u63db\u3067\u304d\u308b\u3002\n#zip\u306f\u8907\u6570\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u307e\u3068\u3081\u3066\u53d6\u5f97\u3067\u304d\u308b\n#map\u306f\u8981\u7d20\u3092\u53cd\u5fa9\u3057\u3066\u53d6\u308a\u51fa\u3059\n","cda8f91c":"from sklearn.metrics import r2_score\nfor col in ['mean','median','std']:\n    xx = train_info[col]\n    yy = train_info['target']\n    \n    print(col)\n    print('r2 score:',r2_score(xx,yy))\n    \n    plt.plot(xx,yy,'x')\n    \n    coef = np.polyfit(xx,yy,1)\n    y_pred = coef[0]*xx+coef[1]\n    print('fit 1d',coef[0],'x+',coef[1])\n    \n    plt.plot(y_pred,xx,'k-')\n    \n    plt.show()\n    ","674844ec":"stock","d01fd720":"plt.plot(np.sort(np.array(stock['mean'])),'x')\nplt.show()","ce0e0468":"plt.plot(np.sort(np.array(stock['median'])),'x')\nplt.show()","2a07f55c":"plt.plot(np.sort(np.array(stock['std'])),'x')\nplt.show()","e056982e":"plt.figure(figsize=(5,5))\nplt.plot(stock['mean'],stock['median'],'o')\nplt.show()\n\nplt.figure(figsize=(5,5))\nplt.plot(stock['mean'],stock['std'],'o')\nplt.show()\n\nplt.figure(figsize=(5,5))\nplt.plot(stock['median'],stock['std'],'o')\nplt.show()","902c0c24":"trade_trainparquet","6809a212":"import glob\nld = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\n\nlist_price = []\nlist_size = []\nlist_order_count = []\n\nfor i in stock['stock_id']:\n    list_price.append(np.mean(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"\n    \n                                              +str(i))['price']))\n    \n    list_size.append(np.mean(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"\n    \n                                              +str(i))['size']))\n    \n    list_order_count.append(np.mean(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"\n    \n                                              +str(i))['order_count']))","b83aeedd":"labels =['price','size','order_count']\nfor i,l in enumerate([list_price,list_size,list_order_count]):\n    plt.figure(figsize=(5,5))\n    plt.plot(stock['mean'],l,'o')\n    plt.ylabel(labels[i])\n    plt.xlabel('mean volatility')\n    plt.show()","c52e7618":"pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i))","07cf13ac":"#Kmeans\u3068\u306f\n#https:\/\/aiacademy.jp\/media\/?p=254\n\nfrom sklearn.cluster import KMeans\nnc = 5\n\ncust_array = stock.iloc[:,1:4]\nlabels = KMeans(n_clusters=nc).fit_predict(cust_array)\n\nplt.figure(figsize =(5,5))\nfor i in range(nc):\n    xx = stock['mean'][labels == i]\n    yy = stock['std'][labels == i]\n    plt.plot(xx,yy,'o')\nplt.show()\n","daeeff8f":"x_col = 'median'\ny = np.array(train_info['target'])\nX = np.array(train_info[x_col]).reshape(-1,1)\n","0cc521c7":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\n\n#scaler = StandardScaler()\nscaler = PowerTransformer()\nscaler.fit(X)\n\n\nclf = LinearRegression()\nclf.fit(scaler.transform(X),y)\ny_pred = clf.predict(scaler.transform(X))\nplt.figure(figsize=(4,4))\n\nplt.plot(y,y_pred,'x')\nmin = np.min(np.array(np.min(y),np.min(y_pred)))\nmax = np.max(np.array(np.max(y),np.max(y_pred)))\n\nplt.plot([0.9*min,1.1*max],[0.9*min,1.1*max],'k-')\n\nplt.xlabel('Actual')\nplt.ylabel('Estimated')\n\nprint(r2_score(y,y_pred))\n\nplt.show()","5d9b0345":"test","6e0a5d91":"#X_test = np.array( test['stock_id'].map(dict(zip(stock['stock_id'], stock[xcol]))) ).reshape(-1,1)\nX_test = np.array( test['stock_id'].map(dict(zip(stock['stock_id'], stock[x_col]))) ).reshape(-1,1)\nX_test","5b489af6":"y_pred = clf.predict(scaler.transform(X_test))\ny_pred","168e7bdc":"sub = test.copy()\nsub['target'] = y_pred\nsub = sub.drop(\"stock_id\",axis=1)\nsub = sub.drop(\"time_id\",axis=1)\nsub","ef9cad4a":"sub.to_csv(\"submission.csv\", index=False)","94fc41d2":"#\ndef rmspe(y_true, y_pred):\n    #\n    yt = np.array(y_true)\n    yp = np.array(y_pred)\n    \n    res = np.square((yt-yp)\/yt)\n    res = np.mean(res)\n    res = np.sqrt(res)\n    \n    return res\n    \n    #return (np.sqrt(np.mean(np.square((y_true-y_pred)\/y_true))))\n#\n#print(rmspe(y,y_pred))","37298491":"train['time_id'].describe()","618aa3a3":"fig, ax = plt.subplots(1,5,figsize=(20,4))\n\nfor i, id in enumerate([5,11,16,31,62]):\n    #\n    #plt.xlim([0,0.05])\n    sns.distplot( train[train['time_id']==id]['target'],ax=ax[i] )\n\nplt.show()","80f2c5cd":"time = train.groupby(\"time_id\")[\"target\"].agg([\"mean\",\"median\",\"std\",\"count\",\"sum\"]).reset_index()\ntime","01c084e2":"time.describe()","93a8992a":"for i in ['mean','median','std']:\n    sns.displot(time[i])\n    plt.show()","1a077b81":"train_info = train.copy()\ntrain_info['mean']    = train['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntrain_info['median']  = train['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntrain_info['std']     = train['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntrain_info","0071c847":"from sklearn.metrics import r2_score\n#\nfor col in ['mean','median','std']:\n    #\n    xx = train_info[col]\n    yy = train_info['target']\n    #\n    print(col)\n    print('r2 score:',r2_score(xx,yy))\n    #\n    plt.plot(xx,yy,'x')\n    #\n    coef = np.polyfit(xx,yy,1)\n    y_pred = coef[0]*xx+ coef[1]\n    print('fit 1d:',coef[0],'x+',coef[1])\n    #\n    plt.plot(y_pred,xx,'k-')\n    #\n    plt.show()","91df8b7b":"train_list = [ 0,\n               31,\n               stock['stock_id'][stock['mean'].idxmax()], #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u306a\u9298\u67c4\n               stock['stock_id'][stock['mean'].idxmin()], #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5c0f\u3055\u306a\u9298\u67c4\n             ]\n\nbook_trainparquet_list  = []\ntrade_trainparquet_list = []\n\nfor i in train_list:\n    book_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=\"+str(i)))\n    trade_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i)))\n\ntrain_list","a81653e4":"for t, tt in enumerate( [ 5, time['time_id'][time['mean'].idxmin()], time['time_id'][time['mean'].idxmax()] ] ):\n    #\n    plt.figure(figsize=(20,5))\n    #\n    print('time_id == ', tt )\n    #\n    for i, trade_t in enumerate(trade_trainparquet_list):\n        #\n        trade_data = trade_t[ trade_t['time_id']==tt ]\n        plt.plot(trade_data[\"seconds_in_bucket\"],trade_data['price'],'o--',label='stock_id='+str(train_list[i]))\n\n    plt.legend()\n    plt.show()","239ba47f":"from sklearn.preprocessing import StandardScaler\n\ni = 3\ntrade_data = trade_trainparquet_list[i][ trade_trainparquet_list[i]['time_id']==5 ]\nscaler = StandardScaler()\n\nscaler.fit( trade_data.iloc[:,2:] )","6ce16ba7":"for i, trade_t in enumerate(trade_trainparquet_list):\n    #\n    print('stock_id='+str(train_list[i]))\n          \n    trade_data = trade_t[ trade_t['time_id']==5 ]\n    #\n    td = scaler.transform( trade_data.iloc[:,2:] )\n    #\n    heat = np.zeros([3,600])\n    heat[:,:] = np.nan\n    #\n    for i, sec in enumerate(trade_data['seconds_in_bucket']):\n        heat[0,sec] = td[i,0]\n        heat[1,sec] = td[i,1]\n        heat[2,sec] = td[i,2]\n    #\n    heat = pd.DataFrame(heat.T)\n    heat = heat.interpolate()\n    #\n    plt.figure(figsize=(20,3))\n    sns.heatmap(heat.T)\n    plt.show()","928b4a66":"train_info = train.copy()\ntrain_info['stock_id_mean']     = train['stock_id'].map(dict(zip(stock['stock_id'], stock['mean'])))\ntrain_info['stock_id_median']   = train['stock_id'].map(dict(zip(stock['stock_id'], stock['median'])))\ntrain_info['stock_id_std']      = train['stock_id'].map(dict(zip(stock['stock_id'], stock['std'])))\ntrain_info['time_id_mean']      = train['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntrain_info['time_id_median']    = train['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntrain_info['time_id_std']        = train['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntrain_info","444ed798":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5, random_state=12345678, shuffle=True)","c49b33de":"y = np.array( train['target'] )\nX = np.array( train_info.iloc[:,3:] )","6f4b0689":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVR\nimport xgboost as xgb\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\n\nscaler = StandardScaler()\n#scaler = PowerTransformer()\nscaler.fit(X)\n\nmodels = [LinearRegression(),Lasso(),Ridge(),SVR(),xgb.XGBRegressor()]\nscores = []\n\nfor clf in models:\n\n    scores = []\n    \n    print(clf)\n\n    plt.figure(figsize=(4,4))    \n    \n    for train_index, test_index in kf.split(X, y):\n        #\n        X_train = scaler.transform( X[train_index] )\n        y_train = y[train_index]\n        #\n        X_test  = scaler.transform( X[test_index] )\n        y_test  = y[test_index]\n        #\n        clf.fit(X_train,y_train)\n        y_pred = clf.predict(X_test)\n        #\n        plt.plot(y_pred,y_test,'x')\n        #\n        scores.append((rmspe(y_test,y_pred)))\n    #\n    print(np.mean(np.array(scores)))\n    #\n    min = np.min( np.array( np.min(y_test), np.min(y_pred) ) )\n    max = np.max( np.array( np.max(y_test), np.max(y_pred) ) )\n    #\n    plt.plot( [0.9*min,1.1*max],[0.9*min,1.1*max], 'k-' )    \n    #\n    plt.show()","67a84528":"test_info = test.copy()\ntest_info['stock_id_mean']     = test['stock_id'].map(dict(zip(stock['stock_id'], stock['mean'])))\ntest_info['stock_id_median']   = test['stock_id'].map(dict(zip(stock['stock_id'], stock['median'])))\ntest_info['stock_id_std']      = test['stock_id'].map(dict(zip(stock['stock_id'], stock['std'])))\ntest_info['time_id_mean']      = test['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntest_info['time_id_median']    = test['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntest_info['time_id_std']       = test['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntest_info","550b20c9":"clf  = models[4]\nprint(clf)","c9ca610e":"X_test = np.array( test_info.iloc[:,3:] )\n\nclf.fit(scaler.transform(X),y)\n\ny_pred =clf.predict(scaler.transform(X_test))\ny_pred\n\nsub = test.copy()\nsub['target'] = y_pred\nsub = sub.drop(\"stock_id\",axis=1)\nsub = sub.drop(\"time_id\",axis=1)\nsub","9083917f":"sub.to_csv(\"submission.csv\", index=False)","6d79bb06":"#### log return\n\nwap\u2192wap\u306elog\u2192wap\u306ediff\u2192log return\uff08wap\u306elog\u306ediff\uff09\u306e\u9806\u3067\u53ef\u8996\u5316\u3057\u3068\u3093\u306d\u3093\u3002\n\n\u2192np.log(wap).diff()\u3068wap.diff()\u304c\u5909\u308f\u3089\u3093\u3051\u3069\u3001\u305d\u3093\u306a\u3082\u3093\u3084\u308d\u3002","ad039017":"#\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u3092\u307f\u308b\u3068\u30c7\u30fc\u30bf\u306e\u5468\u671f\u6027\u3092\u6301\u3064\u304b\u3069\u3046\u304b\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","3632457a":"#### realized_volatility\n\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u671f\u5f85\u5024\u3084\u81ea\u5df1\u5171\u5206\u6563\u3092\u4e00\u5b9a\u3068\u307f\u306a\u3059\u3053\u3068\u2192\u5b9a\u5e38\u6027\u306e\u904e\u7a0b\n\n\n\u30e1\u30ea\u30c3\u30c8.\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u7279\u6709\u306e\u8907\u96d1\u306a\u6761\u4ef6\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u65b9\u6cd5.\u30c7\u30fc\u30bf\u306e\u5dee\u5206\u3084\u5bfe\u6570\u3092\u3068\u308b\u306a\u3069\u3057\u3066\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u51e6\u7406\u3092\u65bd\u3059","57b0b38e":"EDA; book\/trade\u30c7\u30fc\u30bf\n\u5404\u9298\u67c4\uff08stock_id\u306e\u63a8\u79fb\u3092\u6bd4\u8f03\u3057\u307e\u3059\uff09","c091ab00":"### \u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u3068\u306f\n\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u3068\u306f\u6642\u70b9\ud835\udc61\u306b\u767a\u751f\u3059\u308b\u4e71\u6570\u3068\u30a4\u30e1\u30fc\u30b8\u3059\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u6642\u70b9\ud835\udc61\u306b\u304a\u3051\u308b\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u306f\ud835\udf00\ud835\udc61\u3068\u3044\u3046\u5f62\u3067\u8868\u3057\u307e\u3059\u3002","93fe1e0d":"## \u4e00\u65e6\u3053\u3053\u3067\u63d0\u51fa(Score 0.98)\n\u63d0\u51fa\u6761\u4ef6\u306e\u78ba\u8a8d\u306e\u305f\u3081\u3001\u4e0a\u306e\u96d1\u306a\u30e2\u30c7\u30eb\u3067\u4e00\u65e6Submission\u3057\u3066\u307f\u307e\u3059\u3002test\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u307e\u3059\u3002stock_id\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5bfe\u5fdc\u3059\u308bstock_id\u306emean\u3092\u8aad\u307f\u53d6\u308a\u3001\u305d\u3053\u304b\u3089\u56de\u5e30\u5f0f\u3067\u4e88\u6e2c\u5024\u3092\u8fd4\u3059\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u3082\u7121\u4e8b\u3001\u63d0\u51fa\u3055\u308c\u308b\u3088\u3046\u3067\u3059\uff1b\u30b9\u30b3\u30a2\u306f\u3055\u3093\u3056\u3093\uff080.98\uff09\u3067\u3059\u304c\u3001\u3001\u3001\n\n\u306a\u304a\u3001\u4e0b\u624b\u306b\u56de\u5e30\u3059\u308b\u3088\u308a\u3082'median'\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u308b\u65b9\u304c\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u3088\u3046\uff080.68\uff09\u3067\u3059\u3002\u2192target\u3092\u5dee\u5206\u306b\u3057\u305f\u65b9\u304c\u6271\u3044\u3084\u3059\u3044\uff1f\uff1f\n\n","1e4d37a5":"#### ARMA(Auto Regressive Moving Average)\u30e2\u30c7\u30eb\n\np\u6b21\u306e\u81ea\u5df1\u56de\u5e30\u904e\u7a0b\u306b\u304a\u3044\u3066\uff0c\u6b8b\u5dee\u03b5t\u304cq\u6b21\u306e\u79fb\u52d5\u5e73\u5747\u904e\u7a0b\u3067\u3042\u308b\u3068\u304d\uff0c yt\u306f\n\n\u3000\u3000\u3000(2.3)\n\u3092\u6e80\u305f\u3059\uff0e\u3053\u308c\u3092\u6b21\u6570\uff08p\uff0cq\uff09\u306e\u81ea\u5df1\u56de\u5e30\u79fb\u52d5\u5e73\u5747\u904e\u7a0b\u3042\u308b\u3044\u306fARMA\u904e\u7a0b\u3068\u547c\u3073\uff0cARMA\uff08p\uff0cq\uff09\u3068\u8868\u3059\uff0eq\u3092\u30bc\u30ed\u3068\u3057\u305f\u3068\u304d\u306fAR\u30e2\u30c7\u30eb\uff0c\u307e\u305fp\u3092\u30bc\u30ed\u3068\u3057\u305f\u3068\u304d\u306fMA\u30e2\u30c7\u30eb\u3068\u306a\u308a\uff0cARMA\u30e2\u30c7\u30eb\u306fAR\u30e2\u30c7\u30eb\u3084MA\u30e2\u30c7\u30eb\u3088\u308a\u4e00\u822c\u7684\u306a\u30e2\u30c7\u30eb\u3068\u306a\u308b\uff0e\n\n#### AR(Auto Regressive)\u30e2\u30c7\u30eb\n\u78ba\u7387\u904e\u7a0byt\uff08\u6642\u7cfb\u5217y1\uff0cy2\uff0c\u2026yn\uff09\u304c\n\n\u3000\u3000\u3000(2.1)\n\u3067\u8868\u3055\u308c\u308b\u3068\u304d\uff0cyt\u306fp\u6b21\u306e\u81ea\u5df1\u56de\u5e30\u904e\u7a0b\u6216\u306fAR\u904e\u7a0b\u3068\u547c\u3070\u308c\u308b\uff0e\u305d\u3057\u3066(2.1)\u5f0f\u3092p\u6b21\u306e\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u3042\u308b\u3044\u306fAR\u30e2\u30c7\u30eb\u3068\u3044\u3046\uff0e\u3053\u3053\u3067\u306f\uff0c\u03c6j( j = 1, 2, \u2026, p )\u306f\u4fc2\u6570\u3067\u3042\u308a\uff0c\u03b5t\u306f\u671f\u5f85\u5024\u30bc\u30ed\uff0c\u5206\u6563\u4e00\u5b9a\u306e\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\uff08\u767d\u8272\u96d1\u97f3\uff09\u3067\u3042\u308b\uff0e\n\nAR\u30e2\u30c7\u30eb\u3067\u306f\uff0c\u3042\u308b\u6642\u70b9\u306e\u30c7\u30fc\u30bf\u306f\u305d\u308c\u4ee5\u524d\u306e\u30c7\u30fc\u30bf\u3067\u63a8\u5b9a\u3067\u304d\u308b\uff0e(2.1)\u5f0f\u3067\u306f\uff0c\u5404\u30c7\u30fc\u30bf\u304c\u4ee5\u524d\u306e\u30c7\u30fc\u30bf\u306e\u7dda\u5f62\u7d50\u5408\u5f0f\u306b\u3042\u308b\u30e9\u30f3\u30c0\u30e0\u8aa4\u5dee\u304c\u52a0\u308f\u3063\u3066\u89b3\u6e2c\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\uff0e\n\n#### MA(Moving Average)\u30e2\u30c7\u30eb\n\u6642\u7cfb\u5217\u4e0a\u306e\u5404\u30c7\u30fc\u30bf\u306f\uff0c\u904e\u53bb\u306e\u8aa4\u5dee(\u30e9\u30f3\u30c0\u30e0\u30b7\u30e7\u30c3\u30af)\u306b\u5f71\u97ff\u3055\u308c\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067\uff0c\u6b21\u5f0f\u3067\u8868\u73fe\u3055\u308c\u308b\uff0e\n\n\u3000\u3000\u3000(2.2)\n\u3053\u3053\u3067\u306f\u4fc2\u6570\u3067\u3042\u308a\uff0c\u03b5t\u306f\u671f\u5f85\u5024\u30bc\u30ed\uff0c\u5206\u6563\u4e00\u5b9a\u306e\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\uff08\u767d\u8272\u96d1\u97f3\uff09\u3067\u3042\u308b\uff0e (2.2)\u5f0f\u3092q\u6b21\u306eMA\u30e2\u30c7\u30eb\u6216\u306f\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb\u3068\u3044\u3046\uff0e\n\nMA\u30e2\u30c7\u30eb\u306e\u5404\u30c7\u30fc\u30bf\u306f\uff0c\u4ee5\u524d\u306e\u30c7\u30fc\u30bf\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u8aa4\u5dee\u306e\u7dda\u5f62\u7d50\u5408\u306b\uff0c\u73fe\u5728\u306e\u8aa4\u5dee\u304c\u52a0\u308f\u3063\u3066\u89b3\u6e2c\u3055\u308c\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067\u3042\u308b\uff0e\n\n\n","33261492":"1000\u884c\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306etime_id\uff08\u9298\u67c4\uff09\u3067seconds_in_bucket\uff08\u6642\u523b\uff09\u304c\u7d14\u5897\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u308c\u307e\u3059\u3002\n\ntime_id\u3054\u3068\u306b\u30c7\u30fc\u30bf\u6570\uff08\u884c\u6570\uff09\u306f\u9055\u3046\u3088\u3046\u3067\u3059\uff08min73-max549\uff09\u304c\u3001seconds_in_bucket\u306f0\u304b\u3089\u59cb\u307e\u3063\u3066600\u3067\u7d42\u4e86\u3059\u308b\u3088\u3046\u3067\u3059\uff081\u79d2\u30c7\u30fc\u30bf\u304c600\u306710\u5206\u9593\uff09\u3002\n\nbarplot\u3068\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3001time_id\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u306f\u5e73\u5747\u3067200\u304f\u3089\u3044\u306e\u3088\u3046\u3067\u3059\u3002","696d87f0":"stock_id=0,1,2\u306e\u4e09\u9298\u67c4\u306b\u3064\u3044\u3066\u3001time_id\u3067\u306e\u63a8\u79fb\uff08\u4fbf\u5b9c\u7684\u306b\uff09\u3092\u898b\u307e\u3059\u3068\u3001\u306a\u3093\u3068\u306a\u304f\u95a2\u9023\u6027\u304c\u3042\u308a\u3001\u540c\u3058\u30bf\u30a4\u30df\u30f3\u30b0\uff08time_id\uff09\u3067target\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\u3002\n\n\n\n\u2192 \u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u306f\u9055\u3046\u305f\u3081\u3001\u3053\u306e\u8fba\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3055\u305d\u3046\u3002","5674007c":"https:\/\/pythondatascience.plavox.info\/seaborn\/\u6563\u5e03\u56f3\u30fb\u56de\u5e30\u30e2\u30c7\u30eb","2792d1df":"\u51fa\u6765\u9ad8\u52a0\u91cd\u5e73\u5747\u306e\u7d04\u5b9a\u4fa1\u683c\n\uff08100\u5186\u00d72,000\u682a\uff09\uff0b\uff08105\u5186\u00d73,000\u682a\uff09 \uff1d 515,000\u5186\n515,000\u5186 \u00f7 5,000\u682a \uff1d 103\u5186\n\n\u8a08\u7b97\u5f0f\uff1aVWAP \uff1d \u5f53\u65e5\u7d2f\u7a4d\u58f2\u8cb7\u4ee3\u91d1 \u00f7 \u5f53\u65e5\u7d2f\u7a4d\u51fa\u6765\u9ad8\n\n\u3064\u307e\u308a\u3001\u65e5\u4e2d\u306e\u53d6\u5f15\u304c\u307b\u3068\u3093\u3069103\u5186\uff5e105\u5186\u3067\u884c\u308f\u308c\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u5927\u53e3\u6295\u8cc7\u5bb6\u304c\u5bc4\u308a\u4ed8\u304d\u3067\u5927\u91cf\u306e\u8cb7\u4ed8\u3092\u682a\u4fa1100\u5186\u3067\u884c\u3063\u3066\u3044\u305f\u5834\u5408\u3001\u52a0\u91cd\u5e73\u5747\u306b\u3088\u308b\u7d04\u5b9a\u4fa1\u683c\u306f100\u5186\u306b\u8fd1\u3044\u6570\u5024\u3068\u306a\u308a\u307e\u3059\u3002","22f576a8":"\u6c7a\u5b9a\u4fc2\u6570\u3068\u306f\u56de\u5e30\u306b\u3088\u3063\u3066\u5c0e\u3044\u305f\u30e2\u30c7\u30eb\u306e\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3055\u3092\u8868\u73fe\u3059\u308b\u5024\u3067\u3001\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u4e88\u6e2c\u3057\u305f\u5024\u304c\u5b9f\u969b\u306e\u5024\u3068\u3069\u306e\u7a0b\u5ea6\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3092\u8868\u73fe\u3059\u308b\u8a55\u4fa1\u6307\u6a19","d1bb53ad":"# WAP\n\u30d6\u30c3\u30af\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\n\nwap\u3082book\u30c7\u30fc\u30bf\u306ebid,ask\u306e\u7bc4\u56f2\u5185\u3067\u5909\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","42372eac":"stock_id\u3054\u3068\u306btarget\u306e\u5206\u5e03\u306b\u5dee\u7570\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002 \u898f\u683c\u5316\u3059\u308c\u3070\u304a\u3088\u305d\u540c\u3058\u306b\u306f\u898b\u3048\u308b\u3001\u3001\u3001\uff1f","5dcbeebc":"\n#### VWAP\u3088\u308a\u3082\u4f4e\u3044\u4f4d\u7f6e\u3067\u63a8\u79fb\u3059\u308b\n\u305d\u306e\u65e5\u306b\u682a\u3092\u8cfc\u5165\u3057\u3066\u4fdd\u6709\u3057\u3066\u3044\u308b\u4eba\u306e\u534a\u6570\u4ee5\u4e0a\u306e\u4eba\u304c\u640d\u3057\u3066\u3044\u308b\u72b6\u614b\uff08\u542b\u307f\u640d\u306e\u72b6\u614b\uff09\u3002\u4fdd\u6709\u682a\u304c\u542b\u307f\u640d\u306e\u6bb5\u968e\u3067\u306f\u8cb7\u5024\u8fd1\u8fba\uff08VWAP\u8fd1\u8fba\uff09\u3067\u58f2\u308a\u7269\u304c\u51fa\u3084\u3059\u3044\u306e\u3067\u3001\u4e0a\u5024\u304c\u91cd\u3044\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n#### VWAP\u3088\u308a\u3082\u4f4e\u3044\u4f4d\u7f6e\u3067\u63a8\u79fb\u3059\u308b\n\u305d\u306e\u65e5\u306b\u682a\u3092\u8cfc\u5165\u3057\u3066\u4fdd\u6709\u3057\u3066\u3044\u308b\u4eba\u306e\u534a\u6570\u4ee5\u4e0a\u306e\u4eba\u304c\u640d\u3057\u3066\u3044\u308b\u72b6\u614b\uff08\u542b\u307f\u640d\u306e\u72b6\u614b\uff09\u3002\u4fdd\u6709\u682a\u304c\u542b\u307f\u640d\u306e\u6bb5\u968e\u3067\u306f\u8cb7\u5024\u8fd1\u8fba\uff08VWAP\u8fd1\u8fba\uff09\u3067\u58f2\u308a\u7269\u304c\u51fa\u3084\u3059\u3044\u306e\u3067\u3001\u4e0a\u5024\u304c\u91cd\u3044\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","336a5c57":"\u6a19\u6e96\u504f\u5dee\u3063\u307d\u3044\u3051\u3069\u3001\u5c11\u3057\u88fe\u304c\u5e83\u3044","3239e7b2":"## \u91cd\u8981\u306a\u5909\u6570\u306e\u78ba\u8a8d","3af3201f":"book\u306b\u7d9a\u3044\u3066trade\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3082\u78ba\u8a8d\u3057\u307e\u3059\u3002","a5d76f59":"stock_id\u3054\u3068\u306bvoalitity\u3068price,size,order_count\u306e\u95a2\u4fc2\u306e\u78ba\u8a8d","8c4619d1":"Dickey-Fulluer(ADF)\u691c\u5b9a\u306f\u5b9a\u5e38\u6027\u306e\u691c\u5b9a\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u5e30\u7121\u4eee\u8aac\u306f\u300c\u30c7\u30fc\u30bf\u7cfb\u5217\u306b\u5358\u4f4d\u6839\u304c\u5b58\u5728\u3059\u308b\u300d\n\np\u5024\u304c\u5927\u304d\u306a\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u306a\u3044\u2192\u5358\u4f4d\u6839\u3092\u6709\u3059\u308b\u3002\n\np\u5024\u304c\u5c0f\u3055\u3044\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u308b\u2192\u5358\u4f4d\u6839\u3092\u6709\u3057\u3066\u3044\u306a\u3044\uff1d\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3002\n\nhttps:\/\/tkstock.site\/2021\/05\/15\/python-%E6%99%82%E7%B3%BB%E5%88%97-%E5%AE%9A%E5%B8%B8%E6%80%A7-%E5%8D%98%E4%BD%8D%E6%A0%B9%E6%A4%9C%E5%AE%9A-adf%E6%A4%9C%E5%AE%9A-%E5%AE%9F%E8%A3%85\/","2af6686f":"train\u306b\u95a2\u3057\u3066\u306f\u3001target\u306fstock_id\uff08\u9298\u67c4\uff09\u3054\u3068\u306btime_id, target\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002","e6978e13":"pandas\u3067\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210\n\u5143\u30c7\u30fc\u30bf\u3068\u6642\u9593\u3092\u305a\u3089\u3057\u305f\u30c7\u30fc\u30bf\u3068\u306e\u76f8\u95a2\u306e\u3053\u3068\u3092\u300c\u81ea\u5df1\u76f8\u95a2\u300d\u3068\u8a00\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30e9\u30b0\u3068\u81ea\u5df1\u76f8\u95a2\u3092\u8868\u3057\u305f\u30b0\u30e9\u30d5\u3092\u300c\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u300d\u3068\u8a00\u3044\u307e\u3059\u3002\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u308b\u3068\u3001\u30c7\u30fc\u30bf\u304c\u5468\u671f\u6027\u3092\u3082\u3064\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","3cf9bf88":"\u4e00\u5fdc\u3001\u9298\u67c4\u3054\u3068\u306b\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u3055\u306b\u9055\u3044\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u9298\u67c4\u306e\u7d71\u8a08\u91cf\u60c5\u5831\u3060\u3051\u3067\u3082\u5c11\u3057\u3060\u3051\u4e88\u6e2c\u3067\u304d\u305d\u3046\u3002\n\n\u2192 \u9298\u67c4\u306e\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5e73\u5747\u5024\uff08'mean'\uff09\u304c\u5927\u304d\u3044\u307b\u3069\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u5927\u304d\u3044\u50be\u5411\u306b\u3042\u308b\uff08\u307b\u3093\u306e\u5c11\u3057\uff09\u3002","ea5805a4":"## \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\n\nhttps:\/\/www.kaggle.com\/bextuychiev\/how-to-detect-white-noise-and-random-walks-in-ts\n\n\u306b\u8a73\u3057\u304f\u8a18\u8f09\u3042\u308a\u3067\u3059\u3002\n\n\u65e5\u672c\u8a9e\u306f\u3053\u3061\u3089\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nhttps:\/\/dajiro.com\/entry\/2020\/05\/02\/191334","3f27199a":"book\u3068\u540c\u3058\u304f1000\u884c\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001time_id,seconds_in_bucket\u306e\u63a8\u79fb\u306f\u4f3c\u3066\u306f\u3044\u307e\u3059\u304c\u3001trade\u306e\u30c7\u30fc\u30bf\u306f\u6025\u5cfb\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\ntime_id\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u306f\u5e73\u5747\u306730(min2-max120)\u304f\u3089\u3044\u306e\u3088\u3046\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001trade\u306e\u30c7\u30fc\u30bf\u306f\u975e\u5e38\u306b\u30b9\u30d1\u30fc\u30b9\n\n\u305d\u3082\u305d\u3082\u30b9\u30d1\u30fc\u30b9\u3068\u306f\u3001\u82f1\u8a9e\u3067\u300c\u3059\u304b\u3059\u304b\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3002\u30b9\u30d1\u30fc\u30b9\u30e2\u30c7\u30ea\u30f3\u30b0\u306f\u3001\u3042\u3089\u3086\u308b\u3082\u306e\u3054\u3068\u306b\u542b\u307e\u308c\u308b\u672c\u8cea\u7684\u306a\u60c5\u5831\u306f\u3054\u304f\u308f\u305a\u304b\uff1d\u3059\u304b\u3059\u304b\u3067\u3042\u308b\u3068\u3044\u3046\u4eee\u5b9a\uff08\u30b9\u30d1\u30fc\u30b9\u6027\uff09\u306b\u57fa\u3065\u304d\u3001\u5165\u529b\u304b\u3089\u51fa\u529b\u306b\u5bfe\u3057\u3066\u300c\u3069\u3053\u304c\u672c\u5f53\u306b\u5fc5\u8981\u306a\u60c5\u5831\u306a\u306e\u304b\u300d\u3092\u898b\u6975\u3081\u3001\u62bd\u51fa\u3059\u308b\u3002","5a0139eb":"# \u5b9a\u5e38\u6027\u306e\u904e\u7a0b\n\u5b9a\u5e38\u6027\u3092\u4eee\u5b9a\u3059\u308b\u3068\u306f\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u671f\u5f85\u5024\u3084\u81ea\u5df1\u5171\u5206\u6563\u3092\u4e00\u5b9a\u3068\u307f\u306a\u3059\u3053\u3068\u3067\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u8907\u96d1\u306a\u6761\u4ef6\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3082\u3061\u308d\u3093\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u591a\u304f\u306f\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u671f\u5f85\u5024\u3084\u81ea\u5df1\u5171\u5206\u6563\u304c\u4e00\u5b9a\u3068\u3059\u308b\u3068\u5206\u6790\u3059\u308b\u3046\u3048\u3067\u90fd\u5408\u304c\u3044\u3044\u306e\u3067\u3059\u3002\n\n\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3055\u306a\u3044\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u6271\u3046\u5834\u5408\u3001\u30c7\u30fc\u30bf\u306e\u5dee\u5206\u3084\u5bfe\u6570\u3092\u3068\u308b\u306a\u3069\u3057\u3066\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u51e6\u7406\u3092\u65bd\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002","4acb6760":"time_id\u304c5\u306e\u30c7\u30fc\u30bf\uff08\u9298\u67c4\uff09\u306b\u3064\u3044\u3066\u3001\u63a8\u79fb\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002seconds_in_bucket\u3092\u6642\u523b\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002","303f7a85":"## \u7c21\u6613\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\uff08\u7dda\u5f62\u56de\u5e30\uff09\n\u304a\u305f\u3081\u3057\u3067\u3001\u7d71\u8a08\u91cf\uff08median\uff09\u304b\u3089\u56de\u5e30\n\n\u2192\u306a\u304a\u3001\u30b9\u30b3\u30a2\u306f\u5168\u7136\u30c0\u30e1\u30c0\u30e1\u3067\u3059\u3002","b6467082":"\u3069\u3093\u306a\ud835\udc61\u3001\u6b63\u6574\u6570\ud835\udc57\u306b\u5bfe\u3057\u3066\u3082\n\n\ud835\udc38(\ud835\udf00\ud835\udc61)=0 , \ud835\udc49\ud835\udc4e\ud835\udc5f(\ud835\udf00\ud835\udc61)=\ud835\udf0e2\n\n\ud835\udefe\ud835\udc57=\ud835\udc36\ud835\udc5c\ud835\udc63(\ud835\udf00\ud835\udc61,\ud835\udf00\ud835\udc61\u2212\ud835\udc57)=0\n\n\u304c\u6210\u7acb\u3059\u308b\u3068\u304d\u3001\ud835\udf00\ud835\udc61\u306f\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u3067\u3042\u308b\u3002","3e35cb4a":"grob\u95a2\u6570\u306b\u3064\u3044\u3066\nhttps:\/\/www.tech-teacher.jp\/blog\/python-glob\/\n","4874261b":"stock\u3054\u3068\u306b\u7d71\u8a08\u91cf\u304c\u3069\u3046\u3044\u3063\u305f\u5f62\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u6539\u3081\u3066\u78ba\u8a8d","9cae78a9":"## EDA\uff08\u7c21\u6613\uff09; time_id\u3067\u306e\u5206\u6790\ntime_id\u3054\u3068\u306b\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u9055\u3044\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\uff08\u3064\u307e\u308a\u3001\u76f8\u5834\u304c\u5927\u304d\u304f\u5909\u52d5\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u9298\u67c4\u5168\u4f53\u3067\u5909\u52d5\u304c\u5927\u304d\u3044\uff09\n\n\u2192 time_id\uff08\u306e\u7d71\u8a08\u91cf\uff09\u3092\u8aac\u660e\u5909\u6570\u306b\u5165\u308c\u308b\u610f\u5473\u306f\u3042\u308a\u305d\u3046\u3002","ad6fe9af":"#### Realized volatility\n\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u76f4\u524d\uff0810 min\uff09\u306ebook\u306e\u30c7\u30fc\u30bf\u306f\u4e0e\u3048\u3089\u308c\u3066\u304a\u308a\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u3044\u308bvolatility\u306b\u5bfe\u3057\u3066\u3001book\u306e\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u308brealized vovatility\u3092\u91cd\u8981\u306a\u6307\u6a19\u3068\u3057\u3066\u4f7f\u3063\u3066\u304f\u308c\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002wap\u306elog return\u306e\u4e8c\u4e57\u5e73\u5747\u548c\u3092\u3068\u3063\u3066\u8a08\u7b97\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```\nbook_example.loc[:,'log_return'] = log_return(book_example['wap'])\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\n```","d07b0fb3":"LinearRegression,Lasso,Ridge,SVR,XGBRegressor\u3092\u6bd4\u8f03\n\nXGBRegressor\u306e\u6210\u7e3e\u304c\u826f\u3044\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3057\u3066\u3044\u306a\u3044\uff09\u3002","991ab987":"#### **\u7528\u8a9e\u96c6**\n\u200b\n**\u81ea\u5df1\u56de\u5e30\u3058\u3053\u304b\u3044\u304d auto-regressio**n \u3042\u308b\u5909\u6570\u306e\u6642\u7cfb\u5217\u306b\u304a\u3044\u3066\u3001\u305d\u306e\u73fe\u5728\u5024\u304c\u904e\u53bb\u306e\u5024\u306b\u4f9d\u5b58\u3057\u3066\u6c7a\u307e\u308b\u72b6\u614b\u3092\u3044\u3046\u3002\n\u200b\n\n\n\n\u682a\u4fa1\u3084\u6c17\u6e29\u306a\u3069\u6642\u9593\u3067\u7d30\u304b\u304f\u5909\u5316\u3059\u308b\u30c7\u30fc\u30bf\u3092\u773a\u3081\u308b\u3068\u304d\u3001\u5909\u52d5\u304c\u7d30\u304b\u3059\u304e\u3066\u5168\u4f53\u306e\u50be\u5411\u3092\u63b4\u307f\u306b\u304f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306b\u306f \u300c**\u79fb\u52d5\u5e73\u5747**\u300d\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u5909\u5316\u3092\u3088\u308a\u6ed1\u3089\u304b\u306b\u3057\u3066\u30c7\u30fc\u30bf\u3092\u4fef\u77b0\u3067\u304d\u307e\u3059\u3002","a41bc023":"#### Realized volatility\n\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u76f4\u524d\uff0810 min\uff09\u306ebook\u306e\u30c7\u30fc\u30bf\u306f\u4e0e\u3048\u3089\u308c\u3066\u304a\u308a\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u3044\u308bvolatility\u306b\u5bfe\u3057\u3066\u3001book\u306e\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u308brealized vovatility\u3092\u91cd\u8981\u306a\u6307\u6a19\u3068\u3057\u3066\u4f7f\u3063\u3066\u304f\u308c\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002wap\u306elog return\u306e\u4e8c\u4e57\u5e73\u5747\u548c\u3092\u3068\u3063\u3066\u8a08\u7b97\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```\nbook_example.loc[:,'log_return'] = log_return(book_example['wap'])\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\n```","b20e23c3":"trade_data\u306b\u95a2\u3057\u3066time_id\u304c5\u306e\u30c7\u30fc\u30bf\uff08\u9298\u67c4\uff09\u306b\u3064\u3044\u3066\u3001\u63a8\u79fb\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002seconds_in_bucket\u3092\u6642\u523b\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5408\u308f\u305b\u3066\u3001book_data\u3068trade_data\u3092\u5408\u308f\u305b\u3066\u53ef\u8996\u5316\u3057\u307e\u3059\u3002trade_data\u306e'price'\u304cbook\u30c7\u30fc\u30bf\u306ebid,ask\u306e\u7bc4\u56f2\u5185\u3067\u5909\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","0a21c626":"\nhttps:\/\/qiita.com\/eg_i_eg\/items\/94ea41edc96cbb3dca6a\n","bd748ef0":"Dickey-Fulluer(ADF)\u691c\u5b9a\u306f\u5b9a\u5e38\u6027\u306e\u691c\u5b9a\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u5e30\u7121\u4eee\u8aac\u306f\u300c\u30c7\u30fc\u30bf\u7cfb\u5217\u306b\u5358\u4f4d\u6839\u304c\u5b58\u5728\u3059\u308b\u300d\n\np\u5024\u304c\u5927\u304d\u306a\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u306a\u3044\u2192\u5358\u4f4d\u6839\u3092\u6709\u3059\u308b\u3002\n\np\u5024\u304c\u5c0f\u3055\u3044\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u308b\u2192\u5358\u4f4d\u6839\u3092\u6709\u3057\u3066\u3044\u306a\u3044\uff1d\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3002\n\nhttps:\/\/tkstock.site\/2021\/05\/15\/python-%E6%99%82%E7%B3%BB%E5%88%97-%E5%AE%9A%E5%B8%B8%E6%80%A7-%E5%8D%98%E4%BD%8D%E6%A0%B9%E6%A4%9C%E5%AE%9A-adf%E6%A4%9C%E5%AE%9A-%E5%AE%9F%E8%A3%85\/\n\n","3f15ae5a":"## \u30e2\u30c7\u30eb(\u7c21\u6613\uff1bXGBoost)\u306e\u69cb\u7bc9\u3068\u63d0\u51fa(Score 0.52)\nlinkcode\nstock_id, time_id\u306e\u7d71\u8a08\u91cf\u3092\u4f7f\u3063\u3066target\u306e\u56de\u5e30\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001xgboost\u304c\u4e00\u756a\u6210\u7e3e\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3044\u3064\u3067\u63d0\u51fa\u3057\u305f\u3089Public Score\u306f0.52071\u3067\u3057\u305f\u3002","5e2ae08b":"\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u2192\u4e00\u5e74\u9593\u306e\u4fa1\u683c\u306e\u5bfe\u6570\u5024\uff08log returns\uff1b\u5f8c\u8ff0\uff09\u306e\u6a19\u6e96\u504f\u5dee\u3089\u3057\u3044\u3002\n","53769395":"## \u30b9\u30b3\u30a2\n\u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306frmspe\u3067\u3059\u3002\u306e\u3067\u3001\u6e96\u5099","2b8926ec":"## \u4ed6\u8005\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u898b\u306a\u304c\u3089EDA\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u7528\u8a9e\u89e3\u8aac\u3084LINK\u3082\u8f09\u3063\u3066\u307e\u3059\u3002\nUPVOTE\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002","7ad59e26":"stasmodel\u3067\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210","b4e586bd":"#### Log returns\n\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\u304c\u5909\u52d5\u306a\u306e\u3067\u6642\u9593\u306b\u3088\u308b\u5dee\u5206\uff08\u2252\u6642\u9593\u5fae\u5206\uff09\u3092\u3068\u308b\u3053\u3068\u304c\u30ea\u30fc\u30ba\u30ca\u30d6\u30eb\u306a\u8003\u3048\u65b9\u3067\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30ca\u30f3\u30b7\u30e3\u30eb\u3067\u306f\u682a\u5f0f\u4fa1\u683c\u306e\u5dee\u3088\u308a\u3082\u6bd4\u7387\u304c\u91cd\u8981\u3068\u306a\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001**\u5dee\u5206**\u306e\u5bfe\u6570\u3092\u3068\u3063\u3066\u30ed\u30b0\u3067\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\u3092Log returns\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u2192 100\u30c9\u30eb\u3068102\u30c9\u30eb\u3068\u306e\u5dee\u304c2\u30c9\u30eb\u306810\u30c9\u30eb\u306812\u30c9\u30eb\u3068\u306e\u5dee2\u30c9\u30eb\u304c\u540c\u3058\u308f\u3051\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u305e\u308c2%\u306820%\u3068\u306e\u5dee\u3060\u3063\u3066\u8868\u73fe\u3057\u305f\u3044\u3002log10\u3092\u3068\u308b\u3068log(100)=2\u3001log(102)=2.008\u3002log(10)=1\u3001log(12)=1.08\u306a\u306e\u3067\u3001\u5f8c\u8005\u306e\u65b9\u304c\u5dee\u304c\u5927\u304d\u304f\u3066\u3001\u4e8b\u8c61\u3092\u4e0a\u624b\u304f\u8868\u73fe\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3001\u3068\u306e\u3053\u3068\u3002\n\n```\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \n\n df['log_return'] = df.groupby('time_id')['wap'].apply(log_return)\n```\n","305355fb":"\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3068\u3057\u3066\u53ef\u8996\u5316\n\n\u66ab\u5b9a\u3067 stock_id=1, time_id=5\u3067\u898f\u683c\u5316","88582168":"WAP; Weighted averaged price\n\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u898b\u3066\u3044\u308b\u3068\u3001\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u5b9f\u88c5\u3055\u308c\u304c\u3061\n\ndef calc_wap(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\/(df['bid_size1'] + df['ask_size1'])\n\u30aa\u30fc\u30c0\u30fc\u30d6\u30c3\u30af\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\u65e5\u672c\u8a9e\u8a18\u4e8b(Volume Weighted Average Price)\u306f\u3053\u3061\u3089\n\nhttps:\/\/oneinvest.jp\/vwap\/\n\n\u3064\u307e\u308a\u3001VWAP\uff08\u305d\u306e\u65e5\u306e\u5e73\u5747\u7d04\u5b9a\u4fa1\u683c\uff09\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001VWAP\u4fa1\u683c\u3067\u682a\u3092\u8cb7\u3048\u3070\u5c11\u306a\u304f\u3068\u3082\u305d\u306e\u65e5\u306b\u9ad8\u5024\u63b4\u307f\u3059\u308b\u3053\u3068\u306f\u306a\u304f\u306a\u308a\u3001\u5e73\u5747\u7684\u306a\u4fa1\u683c\u3067\u53d6\u5f15\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n","1bac952d":"sort\u95a2\u6570\u306f\u914d\u5217\u306e\u8981\u7d20\u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\n","9a8746b3":"\u521d\u3081\u306e10000\u884c\u3092\u62bd\u51fa\u3002train\u306f\u304b\u306a\u308a\u5bc6\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b","23be915d":"## EDA\uff08\u7c21\u6613\uff09; stock_id\u3067\u306e\u5206\u6790","99b78910":"\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u306f\u6642\u7cfb\u5217\u30e2\u30c7\u30eb\u3092\u8868\u3059\u3068\u304d\u306e\u78ba\u7387\u7684\u306a\u30d0\u30e9\u30c4\u30ad\u3092\u8868\u3059\u305f\u3081\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002"}}