{"cell_type":{"5e5fdc41":"code","3c7a66af":"code","cdb7fe07":"code","fdfc8d01":"code","036f4172":"code","250c602b":"code","6910d4ae":"code","2f7977e5":"code","69639e46":"code","9fb524dc":"code","ce9ae489":"code","b6b49291":"code","e1bbef83":"code","737fea6a":"code","068a13b1":"markdown","142215f4":"markdown","da4afe33":"markdown","06416b32":"markdown","f1cb74f5":"markdown","1cd841c7":"markdown","e323f51f":"markdown","d076f68e":"markdown"},"source":{"5e5fdc41":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","3c7a66af":"# Loading Data\n(x_train, labels_train), (x_test, labels_test) = tf.keras.datasets.fashion_mnist.load_data()\n\n# Lets train rebscale the image \nx_train = x_train \/ 255.\nx_test = x_test \/ 255.\n","cdb7fe07":"# Any image have 3 dimensions width, height \nx_train = np.reshape(x_train, (len(x_train), 28, 28, 1))\nx_test = np.reshape(x_test, (len(x_test), 28, 28, 1))\n","fdfc8d01":"plt.imshow(x_train[0].reshape(28,28))","036f4172":"# adding noise \nsample_image = x_train[0]\nnoised_image = sample_image + 0.3*np.random.normal(0,1,sample_image.shape)\nplt.imshow(noised_image.reshape(28,28))","250c602b":"x_noisy_train = x_train + 0.3 * np.random.normal(0,1,x_train.shape)\nx_noisy_test = x_test + 0.3 * np.random.normal(0,1,x_test.shape)","6910d4ae":"plt.imshow(x_noisy_train[0].reshape(28,28))","2f7977e5":"encoder_input = tf.keras.layers.Input(shape=(28,28,1))\nenc_layer = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same')(encoder_input)\nnorm = tf.keras.layers.BatchNormalization()(enc_layer)\nenc_pool = tf.keras.layers.MaxPool2D()(norm)\n\nenc_layer = tf.keras.layers.Conv2D(32, 3, activation='relu', padding='same')(enc_pool)\nnorm = tf.keras.layers.BatchNormalization()(enc_layer)\nenc_pool = tf.keras.layers.MaxPool2D()(norm)\n\nEncoder = tf.keras.Model(encoder_input, enc_pool)\n\nEncoder.summary()","69639e46":"enc_pool.shape[1:]","9fb524dc":"decoder_input = tf.keras.layers.Input(shape=enc_pool.shape[1:])\n\ndec_layer = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same')(decoder_input)\nnorm = tf.keras.layers.BatchNormalization()(dec_layer)\ndec_pool = tf.keras.layers.UpSampling2D()(norm)\n\ndec_layer = tf.keras.layers.Conv2D(32, 3, activation='relu', padding='same')(dec_pool)\nnorm = tf.keras.layers.BatchNormalization()(dec_layer)\ndec_pool = tf.keras.layers.UpSampling2D()(norm)\n\n\ndecoded = tf.keras.layers.Conv2D(1, 3, activation='relu', padding='same')(dec_pool)\nnorm = tf.keras.layers.BatchNormalization()(decoded)\n\nDecoder = tf.keras.Model(decoder_input, norm)\n\nDecoder.summary()","ce9ae489":"\n\ndec_layer = tf.keras.layers.Conv2D(64,3,activation='relu', padding='same')(enc_pool)\nnorm = tf.keras.layers.BatchNormalization()(dec_layer)\ndec_pool = tf.keras.layers.UpSampling2D()(norm)\n\ndec_layer = tf.keras.layers.Conv2D(32,3,activation='relu', padding='same')(dec_pool)\nnorm = tf.keras.layers.BatchNormalization()(dec_layer)\ndec_pool = tf.keras.layers.UpSampling2D()(norm)\n\n\ndecoded = tf.keras.layers.Conv2D(1, 3, activation='relu', padding='same')(dec_pool)\n","b6b49291":"AutoEncoder = tf.keras.Model(encoder_input, decoded)\n\nAutoEncoder.compile(optimizer='Adam', loss='mse')\nwith tf.device('device:GPU:0'):\n    AutoEncoder.fit(x_noisy_train, x_train, batch_size=32, epochs=20)","e1bbef83":"clean_images = AutoEncoder.predict(x_noisy_test)","737fea6a":"ax = plt.subplot(1,3,1)\nplt.xlabel('original_image')\nax.imshow(x_test[2].reshape(28,28))\n\nax = plt.subplot(1,3,2)\nplt.xlabel('noisy_image')\nax.imshow(x_noisy_train[2].reshape(28,28))\n\nax = plt.subplot(1,3,3)\nplt.xlabel('image_after_noise_removal')\nax.imshow(clean_images[2].reshape(28,28))","068a13b1":"### Here I have used 3 * 3 kernel which will learn the features, padding='same' will keep dimension same as to the next layer","142215f4":"# **Auto Endoder**\n\n> An Autoencoder is a neural network that learns to copy its input to its output. It has an internal (hidden) layer that describes a code used to represent the input, and it is constituted by two main parts: an encoder that maps the input into the code, and a decoder that maps the code to a reconstruction of the original input.","da4afe33":"# Prediction of noisy images","06416b32":"### Adding Noise to the Data","f1cb74f5":"## Creating Decoder","1cd841c7":"## Connecting Encoder and Decoder","e323f51f":"## Creating Endoder","d076f68e":"## We are going to use Auto Encoder to remove noise from the image. This is a basic example of noise removal so I am going to use fashion MNIST data.\n"}}