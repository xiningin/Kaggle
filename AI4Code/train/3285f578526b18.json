{"cell_type":{"3a5b8203":"code","6d6d1149":"code","0d443ac4":"code","0bcaac91":"code","ff25c429":"code","00baf96a":"code","42a7fd1f":"code","9616efcd":"code","4ce2fb7b":"code","b978dcd1":"code","e3c36f09":"code","59ad8658":"code","a4ca75c2":"code","417ae756":"code","583644fa":"code","402943c4":"code","b3c00203":"code","b7dfb731":"code","522047a3":"code","7c62fde9":"code","c4a9af05":"code","df7230bf":"code","53ed474d":"code","13b5efc3":"code","f9c411fa":"markdown","de8ce9d0":"markdown","1f8df655":"markdown","046c120a":"markdown","5c2ba904":"markdown","f3b4dfca":"markdown"},"source":{"3a5b8203":"!pip install pycaret","6d6d1149":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d443ac4":"df8 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopProductionMethods.csv', delimiter=',',  encoding='utf8')\n\ndf8.head()","0bcaac91":"df1 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopDistributors.csv', delimiter=',',  encoding='utf8')\ndf1.head()","ff25c429":"df2 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGenres.csv', delimiter=',',  encoding='utf8')\ndf2.head()","00baf96a":"df3 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/PopularCreativeTypes.csv', delimiter=',',  encoding='utf8')\ndf3.head()","42a7fd1f":"df4 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGrossingRatings.csv', delimiter=',',  encoding='utf8')\ndf4.head()","9616efcd":"df5 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/TopGrossingSources.csv', delimiter=',',  encoding='utf8')\ndf5.head()","4ce2fb7b":"df6 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/HighestGrossers.csv', delimiter=',',  encoding='utf8')\ndf6.head()","b978dcd1":"df7 = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/AnnualTicketSales.csv', delimiter=',',  encoding='utf8')\ndf7.head()","e3c36f09":"df = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/WideReleasesCount.csv', delimiter=',',  encoding='utf8')\ndf.tail()","59ad8658":"df.isnull().sum()","a4ca75c2":"cols_to_drop=['Unnamed: 9']\ndf=df.drop(cols_to_drop,axis=1)\ndf.columns","417ae756":"df.describe()","583644fa":"dfcorr=df.corr()\ndfcorr\nplt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=False,cmap='summer')\nplt.show()","402943c4":"from pycaret.regression import *","b3c00203":"#Codes by Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret\n\n# Numerical features\nNumerical_feat = [feature for feature in df.columns if df[feature].dtypes != 'O']\nprint('Total numerical features: ', len(Numerical_feat))\nprint('\\nNumerical Features: ', Numerical_feat)","b7dfb731":"#Codes by Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret\n\nindex_int_float = ['WARNER BROS', 'WALT DISNEY', '20TH CENTURY FOX', 'PARAMOUNT PICTURES', 'SONY PICTURES', 'UNIVERSAL', 'TOTAL MAJOR 6', 'TOTAL OTHER STUDIOS']      \n\nplt.figure(figsize=[20,12])\ni = 1\nfor col in index_int_float :\n    plt.subplot(5,10,i)\n    sns.violinplot(x=col, data= df, orient='v')\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","522047a3":"#Codes by Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret\n\nint_features = ['WARNER BROS', 'WALT DISNEY', '20TH CENTURY FOX',\n       'PARAMOUNT PICTURES', 'SONY PICTURES', 'UNIVERSAL', 'TOTAL MAJOR 6',\n       'TOTAL OTHER STUDIOS']\n\n#float_features = []    \n\n\n#obj_features = ['']\n\nexp_reg = setup(df, #Train Data\n                target = 'YEAR',  #Target\n                #categorical_features = obj_features, # Categorical Features\n                numeric_features = int_features, \n                #numeric_features = int_features + float_features, # Numeric Features\n                normalize = True, # Normalize Dataset\n                remove_outliers = True, # Remove 5% Outliers\n                remove_multicollinearity = True, # Remove Multicollinearity\n                silent = True # Process Automation\n               )","7c62fde9":"# train a catboost model\ndt = create_model('ct')","c4a9af05":"compare_models( ['tr', 'catboost'], sort = 'RMSLE')","df7230bf":"model_ct = create_model('catboost')\nmodel_lightgbm = create_model('lightgbm')\nmodel_xgboost = create_model('xgboost')\nmodel_ridge = create_model('ridge')","53ed474d":"tuned_ct = tune_model('catboost')\ntuned_lightgbm = tune_model('lightgbm')\n#tuned_xgboost = tune_model('xgboost')\n#tuned_ridge = tune_model('ridge')","13b5efc3":"#Code by https:\/\/pycaret.org\/tune-model\/\n\n\n#from pycaret.datasets import get_data \n#boston = get_data('boston') \n# Importing module and initializing setup \nfrom pycaret.regression import * \nreg1 = setup(data = df, target = 'YEAR')\n# train a decision tree model\ndt = create_model('dt')\n# tune hyperparameters of decision tree\ntuned_dt = tune_model(dt)\n# tune hyperparameters with increased n_iter\ntuned_dt = tune_model(dt, n_iter = 50)\n# tune hyperparameters to optimize MAE\ntuned_dt = tune_model(dt, optimize = 'MAE') #default is 'R2'\n# tune hyperparameters with custom_grid\nparams = {\"max_depth\": np.random.randint(1, (len(df.columns)*.85),20),\n          \"max_features\": np.random.randint(1, len(df.columns),20),\n          \"min_samples_leaf\": [2,3,4,5,6],\n          \"criterion\": [\"gini\", \"entropy\"]\n          }\ntuned_dt_custom = tune_model(dt, custom_grid = params)\n# tune multiple models dynamically\ntop3 = compare_models(n_select = 3)\ntuned_top3 = [tune_model(i) for i in top3]","f9c411fa":"Even running the snippet by Pycaret org. I failed. And gave up at this point.\n\n\"FitFailedWarning\"","de8ce9d0":"#Models Tuning","1f8df655":"#Below, I removed blacklist from comparing models (unexpected argument)","046c120a":"#We have 27 years and Unnamed: 9 has 27 null values. Drop it!","5c2ba904":"#Create and Train Models","f3b4dfca":"#TypeError: The behavior of tune_model in version 1.0.1 is changed. Please pass trained model object.\n\nI think I've trained the model: model_ct = create_model('catboost') "}}