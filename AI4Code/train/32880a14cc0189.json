{"cell_type":{"68eb80b7":"code","db13d271":"code","54cff08d":"code","f1d5d0fa":"code","283cabd1":"code","669e939b":"code","b191a6bf":"code","3bb382b9":"code","48cdc90a":"code","d606c1d7":"code","53c8456d":"code","8fc0ca4d":"code","ff5d1ca7":"code","2c6ea3ca":"code","c4291bf5":"code","a81a4fbd":"code","ebc862f6":"code","cb3e0464":"code","3459498b":"code","44b95e06":"code","39da6569":"code","2d78f42f":"code","aa6dc73d":"code","21a81642":"code","fa273f97":"code","b067d5e8":"code","7bc16475":"code","e97a3dff":"code","b92ef253":"code","2a861f12":"code","8ce24e9a":"code","2042d416":"code","186226bd":"code","d23b4e20":"code","12707f53":"code","c1715fda":"code","96fa80f5":"code","f76cc18c":"code","0ff767d4":"code","3543cf03":"code","cc1b9645":"code","c6a3c03f":"code","1ed8b90b":"code","cff5c4d6":"code","e94d9691":"code","812b6e55":"code","48118743":"code","e5a52ab1":"code","9ec26be4":"code","7ac79270":"code","f4ea889a":"code","f9b6f48f":"code","5e24594b":"code","c44e1d0d":"code","e94c509c":"code","7ad2513b":"code","ba8b7350":"code","a0df4069":"code","b8a0cdf2":"code","c3b8d9d4":"code","dcbba6db":"code","98baf34c":"code","c462373d":"code","b3d19b98":"code","c586e491":"code","b1d9ccd2":"code","59d37e1e":"code","e3b8de03":"code","450d10ed":"code","44e5ad12":"code","56b9f20f":"code","b4f52d19":"code","d76a5a22":"code","970b7e40":"markdown","7515324c":"markdown","f4e25c76":"markdown","4d40a6fd":"markdown","42203d18":"markdown","60826363":"markdown","00a35afb":"markdown","9e26310c":"markdown","7cdecc95":"markdown","354bfe55":"markdown","f3391d97":"markdown","49f818ec":"markdown","19932b9b":"markdown","a14a5b0b":"markdown","eefbb69f":"markdown","a439d0f7":"markdown","06a3db1b":"markdown","84b98f12":"markdown","54b0acb5":"markdown","a7c23e81":"markdown","3dd0fd39":"markdown","7a297f75":"markdown","e31e4f17":"markdown","68fc9a43":"markdown","93b2cef4":"markdown","93440539":"markdown","35854bf9":"markdown","e78d2058":"markdown","a2006186":"markdown","b48522e8":"markdown","fad9e4dd":"markdown","fc29004f":"markdown","dd2a40cd":"markdown","fdfd76a0":"markdown","b891c512":"markdown","1fdf6c77":"markdown","9e3836d7":"markdown","8a297cf7":"markdown","24692c26":"markdown","1855bf4c":"markdown","a7270a9c":"markdown","297fb60e":"markdown","a922fa3f":"markdown","4ad09191":"markdown","24028231":"markdown","a84028a2":"markdown","4eb5dc37":"markdown","4f4af822":"markdown","1f604a34":"markdown","0282081e":"markdown","7738ae4f":"markdown","e9ace228":"markdown"},"source":{"68eb80b7":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')\ndata=pd.read_csv(\"..\/input\/paris-housing-classification\/ParisHousingClass.csv\")\ndata","db13d271":"data.info()","54cff08d":"data.isnull().sum()","f1d5d0fa":"data.describe()","283cabd1":"fig = plt.figure(figsize=(14, 6))\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.3)\nax1 = fig.add_subplot(gs[0, 1])\nsns.countplot(x='category', data=data, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')","669e939b":"data['category'].value_counts()","b191a6bf":"fig = plt.figure(figsize=(16, 5))\ngs = fig.add_gridspec(1, 3)\nax1 = fig.add_subplot(gs[0, 1])\nsns.countplot(x='hasYard', data=data, ax=ax1, palette='spring_r')\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nax1.set_xlabel('')\nax1.set_ylabel('')\ndata.replace((0))","3bb382b9":"pd.crosstab(data['category'], data['hasYard'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","48cdc90a":"plt.figure(figsize=(12,8))\nsns.countplot(x='hasYard', data=data, hue='category',  palette='YlGnBu')","d606c1d7":"data['hasPool'].value_counts(normalize = True).plot.pie(autopct = '%.2f%%')","53c8456d":"pd.crosstab(data['category'], data['hasPool'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","8fc0ca4d":"plt.figure(figsize=(12,8))\nsns.countplot(x='hasPool', data=data, hue='category',  palette='rocket')","ff5d1ca7":"plt.figure(figsize=(15,10))\nsns.countplot(x='cityPartRange', data=data, hue='category',  palette='ch:s=-.2,r=.6')","2c6ea3ca":"pd.crosstab(data['category'], data['cityPartRange'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","c4291bf5":"plt.figure(figsize=(15,10))\nsns.countplot(x='numPrevOwners', data=data, hue='category',  palette='cubehelix')","a81a4fbd":"pd.crosstab(data['category'], data['numPrevOwners'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","ebc862f6":"pd.crosstab(data['category'], data['isNewBuilt'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","cb3e0464":"plt.figure(figsize=(12,8))\nsns.countplot(x='isNewBuilt', data=data, hue='category',  palette='mako')","3459498b":"pd.crosstab(data['category'], data['hasStormProtector'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","44b95e06":"plt.figure(figsize=(15,10))\nsns.countplot(x='hasStormProtector', data=data, hue='category',  palette='YlOrBr')","39da6569":"pd.crosstab(data['category'], data['hasStorageRoom'], margins=True).style.background_gradient(cmap=\"YlGnBu\")","2d78f42f":"plt.figure(figsize=(15,10))\nsns.countplot(x='hasStorageRoom', data=data, hue='category',  palette='flare')","aa6dc73d":"pd.crosstab(data['category'], data['hasGuestRoom'],margins=True).style.background_gradient(cmap=\"YlGnBu\")","21a81642":"plt.figure(figsize=(15,10))\nsns.countplot(x='hasGuestRoom', data=data, hue='category',  palette='light:b')","fa273f97":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr() , annot = True,cmap=\"YlGnBu\")","b067d5e8":"plt.figure(figsize=(16, 12))\nsns.distplot(data.squareMeters, bins = 45, color = '#f88f01', hist = True)\nplt.xlabel(' Price of Houses in a block in $', fontsize=16)\nplt.ylabel('square meter', fontsize=16)\nplt.title('Average Distribution of Median Price of Housing in a Block', fontsize=20)\nplt.show()","7bc16475":"data.hist(bins = 50, figsize = (20,20))\nplt.show()","e97a3dff":"plt.figure(figsize=(12,6))\nplt.plot(data['squareMeters'], data['price'])","b92ef253":"plt.figure(figsize=(12,6))\nsns.stripplot(x='category', y='price', data=data,\n              jitter=True, hue='isNewBuilt', dodge=True)","2a861f12":"data.plot(kind = \"box\" , subplots = True , figsize = (18,18), layout = (7,5))\n","8ce24e9a":"pd.crosstab(data['category'], data['hasStormProtector'],margins=True).style.background_gradient(cmap=\"YlGnBu\")","2042d416":"plt.figure(figsize=(12,6))\nsns.barplot(x=data['category'],y=data['hasStormProtector'],palette='cubehelix')\nplt.xticks(rotation='vertical')\nplt.show()\n","186226bd":"data['made'].value_counts().unique","d23b4e20":"plt.figure(figsize=(20,16))\nsns.set_theme(style=\"whitegrid\")\nsns.color_palette(\"husl\", 9)\nsns.countplot(data['made'])\nplt.xticks(rotation=90)\nplt.show()","12707f53":"plt.figure(figsize=(16,12))\nsns.boxenplot(x=\"price\", data=data[data['category'] == 'Luxury'], palette=\"plasma\")","c1715fda":"plt.figure(figsize=(16,12))\nsns.boxenplot(x=\"price\", data=data[data['category'] == 'Basic'], palette=\"viridis\")","96fa80f5":"data.isnull().sum()","f76cc18c":"len(data)-len(data.drop_duplicates())","0ff767d4":"from sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\ndata['category'] = label.fit_transform(data['category'])","3543cf03":"mask = np.zeros_like(data.corr())\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(18, 14))\n    ax = sns.heatmap(data.corr(), mask=mask, vmax=.5, square=True,annot = True, cmap=\"YlGnBu\")","cc1b9645":"data.drop(\"price\" , axis = 1, inplace = True)","c6a3c03f":"x = data.drop(\"category\" , axis = 1).values\ny = data['category'].values","1ed8b90b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(x,y, test_size=0.20 , random_state=42)","cff5c4d6":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","e94d9691":"X_train_scaled = sc.fit_transform(X_train)\nX_test_scaled = sc.fit_transform(X_test)","812b6e55":"from sklearn.metrics import accuracy_score, confusion_matrix, f1_score,classification_report, roc_curve","48118743":"from sklearn.tree import DecisionTreeClassifier","e5a52ab1":"dt = DecisionTreeClassifier(criterion= 'gini',max_depth=11 , random_state=42)\ndt.fit(X_train_scaled,y_train)\ndt_pred = dt.predict(X_test_scaled)\n\nprint('Accuracy_Score of Decision Tree: ', accuracy_score(y_test, dt_pred))\nmatrix=confusion_matrix(y_test, dt_pred)","9ec26be4":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix , annot = True, cmap=\"YlOrBr\")","7ac79270":"feature_names = ['squareMeters','numberOfRooms','hasYard','hasPool','floors','cityCode','cityPartRange','numPrevOwners','made','isNewBuilt','hasStormProtector','basement','attic','garage','hasStorageRoom','hasGuestRoom']","f4ea889a":"class_names = ['Basic','Luxury']","f9b6f48f":"from sklearn import tree\nfig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,5), dpi=300)\ntree.plot_tree(dt,\n               feature_names = feature_names, \n               class_names=class_names,\n               filled = True);\nfig.savefig('tree.png')","5e24594b":"from sklearn.neighbors import KNeighborsClassifier ","c44e1d0d":"knn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(X_train_scaled,y_train)\nknn_pred = knn.predict(X_test_scaled)\n\nprint('Accuracy_Score of KNeighbors Classifier: ', accuracy_score(y_test, knn_pred))\nmatrix1=confusion_matrix(y_test, knn_pred)","e94c509c":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix1 , annot = True, cmap=\"Blues\")","7ad2513b":"# Setup arrays to store train and test accuracies\nneighbors = np.arange(2, 15)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i, k in enumerate(neighbors):\n    # Setup a k-NN Classifier with k neighbors: knn\n    knn = KNeighborsClassifier (n_neighbors = k)\n    # Fit the classifier to the training data\n    knn.fit(X_train_scaled,y_train)\n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train_scaled, y_train)\n    #Compute accuracy on the testing set\n    test_accuracy[i] = knn.score(X_test_scaled, y_test)\n# Generate plot\nplt.figure(figsize=(8,4))\nplt.title('k-NN: Varying Number of Neighbors')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()","ba8b7350":"from sklearn.linear_model import LogisticRegression","a0df4069":"logreg = LogisticRegression()\nlogreg.fit(X_train_scaled, y_train)\nlogreg_pred = logreg.predict(X_test_scaled)\n\nprint('Accuracy Score of Logistic Regression: ', accuracy_score(y_test, logreg_pred))\nmatrix2=confusion_matrix(y_test, logreg_pred)","b8a0cdf2":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix2 , annot = True, cmap=\"rocket\")","c3b8d9d4":"from sklearn.svm import SVC","dcbba6db":"svm = SVC()\nsvm.fit(X_train_scaled, y_train)\nsvm_pred = svm.predict(X_test_scaled)\n\nprint('Accuracy Score of Super Vector Machine: ', accuracy_score(y_test, svm_pred))\nmatrix3=confusion_matrix(y_test, svm_pred)","98baf34c":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix3 , annot = True, cmap=\"YlGnBu\")","c462373d":"from sklearn.ensemble import RandomForestClassifier","b3d19b98":"RF = RandomForestClassifier()\nRF.fit(X_train_scaled, y_train)\nRF_pred = RF.predict(X_test_scaled)\n\nprint('Accuracy Score of Random Forest Classifier: ', accuracy_score(y_test, RF_pred))\nmatrix4=confusion_matrix(y_test, RF_pred)","c586e491":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix4 , annot = True, cmap=\"magma\")","b1d9ccd2":"print(classification_report(y_test, RF_pred))","59d37e1e":"from xgboost import XGBClassifier","e3b8de03":"XG = XGBClassifier()\nXG.fit(X_train_scaled, y_train)\nxg_pred = XG.predict(X_test_scaled)\n\nprint('Accuracy Score of XGBClassifier: ', accuracy_score(y_test, xg_pred))\nmatrix5=confusion_matrix(y_test, xg_pred)","450d10ed":"plt.figure(figsize = (8,4))\nsns.heatmap(matrix5 , annot = True, cmap=\"Blues\")","44e5ad12":"dt_f1 = f1_score(y_test, dt_pred)\nknn_f1 = f1_score(y_test, knn_pred)\nsvm_f1 = f1_score(y_test, svm_pred)\nRF_f1 = f1_score(y_test, RF_pred)\nlogreg_f1 = f1_score(y_test, logreg_pred)\n\n\nx=['Decision Tree','KNN','Random Forest','SVM','Logistic Regression']\ny=[dt_f1,knn_f1,RF_f1,svm_f1,logreg_f1]\n\nplt.figure(figsize=(20,20))\nfig, ax = plt.subplots()\nax.bar(x, y, linewidth=2)\nplt.title('F1 Score Of Our Model')\nplt.xlabel('Model')\nplt.ylabel('F1 Score')\nplt.show()\n","56b9f20f":"# Compute predicted probabilities: y_pred_prob\ny_pred_prob_dt = dt.predict_proba(X_test)[:,1]\ny_pred_prob_knn = knn.predict_proba(X_test)[:,1]\ny_pred_prob_rf = RF.predict_proba(X_test)[:,1]\ny_pred_prob_logreg = logreg.predict_proba(X_test)[:,1]\n\npred_prob = [y_pred_prob_dt,y_pred_prob_knn,y_pred_prob_rf,y_pred_prob_logreg]\n\n# Generate ROC curve values: fpr, tpr, thresholds\n\nfpr_1, tpr_1, thresholds_1 = roc_curve(y_test, y_pred_prob_dt)\nfpr_2, tpr_2, thresholds_2 = roc_curve(y_test, y_pred_prob_knn)\nfpr_3, tpr_3, thresholds_3 = roc_curve(y_test, y_pred_prob_rf)\nfpr_4, tpr_4, thresholds_4= roc_curve(y_test, y_pred_prob_logreg)\n\n# Plot ROC curve\nplt.figure(figsize=(16,16))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_1, tpr_1, label = 'Tree decision')\nplt.plot(fpr_2, tpr_2, label = 'KNN')\nplt.plot(fpr_3, tpr_3, label = 'Random forest')\nplt.plot(fpr_4, tpr_4, label = 'Logistic Regresion')\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(prop={'size':18}, loc='lower right')\n\nplt.show()\nfig.savefig('multiple_roc_curve.png')\n","b4f52d19":"features_relevancy = pd.DataFrame({'feature': data.drop(\"category\" , axis = 1).columns,'coef': np.abs(logreg.coef_[0])})\n\nprint(\"Top features\")\n\nfeatures_relevancy.sort_values(by='coef', ascending=False).head(3).style.background_gradient(cmap=\"YlGnBu\")","d76a5a22":"features_relevancy.sort_values(by='coef').head(3).style.background_gradient(cmap=\"YlGnBu\")","970b7e40":"### Down features","7515324c":"![download%20%283%29.png](attachment:download%20%283%29.png)","f4e25c76":"the table show the number of basic and luxury that have yard \n& all the luxury houses have yard","4d40a6fd":"So, from ROC - curve we note that the best models are the Tree decision and Random forest.","42203d18":"## Logistic Regression","60826363":"-----------------------------------------------------------","00a35afb":"# About data: \nThis is a set of data created from imaginary data of house prices in an urban environment - Paris.\n\n## Features: \nAll attributes are numeric variables and they are listed bellow:\n\n1. squareMeters\n2. numberOfRooms\n3. hasYard\n4. hasPool\n5. floors - number of floors\n6. cityCode - zip code\n7. cityPartRange - the higher the range, the more exclusive the neighbourhood is\n8. numPrevOwners - number of prevoious owners\n9. made - year\n10. isNewBuilt\n11. hasStormProtector\n12. basement - basement square meters\n13. attic - attic square meteres\n14. garage - garage size\n15. hasStorageRoom\n16. hasGuestRoom - number of guest rooms\n17. price - price of a house\n18. category - Luxury or Basic (Target feature) ","9e26310c":"We note that the distribution of brice for both categories are the same, but this not make sense, this may be due to the fact that these are only fictitious data and not realistic","7cdecc95":"Remark the ROC curve","354bfe55":"---------------------------------------------------------------------","f3391d97":"![5139787.png](attachment:5139787.png)","49f818ec":"![](http:\/\/)# Paris Housing Classification\n\n\n![The-6-Most-Romantic-Paris-Apartments-for-Lovebirds-by-Paris-Perfect1-2.jpg](attachment:The-6-Most-Romantic-Paris-Apartments-for-Lovebirds-by-Paris-Perfect1-2.jpg)","19932b9b":"the the table show the number of houses in each part of city","a14a5b0b":"**Remark the best number of neighbors to get best accuracy in knn model.**","eefbb69f":"From previous visulization we note that the luxury house always have a yard and pool, also it always a new built.","a439d0f7":"**We note that no old houses in luxury category** ","06a3db1b":"# Preprocessing","84b98f12":"the table show the number of basic and luxury that have Pool","54b0acb5":"# Table of content: \n* About Data\n* Import Laibries and Data\n* Exploratory Data Analysis\n* Split\n* Scaling \n* Modeling\n* Conclusion","a7c23e81":"# EDA","3dd0fd39":"### Visualizing the Decision tree:","7a297f75":"# Import Libraries and Data","e31e4f17":"## 2. KNeighborsClassifier","68fc9a43":"# Scaling ","93b2cef4":"**Houses have yard is more than the houses have not **","93440539":"Label encoder using sklearn for target feature","35854bf9":"![gWdPX.png](attachment:gWdPX.png)","e78d2058":"**It's not a unique feature to decide the house is luxury or basic.**","a2006186":"**The number of Basic houses more than the luxury **","b48522e8":"# Modeling","fad9e4dd":"## 1. Decision Tree","fc29004f":"After to get insght from data we need more understand to answer some questions: ","dd2a40cd":"# Split data","fdfd76a0":"houses have Pool is more than the houses have not ","b891c512":"## SVM","1fdf6c77":"No nulls in data","9e3836d7":"## xgboost Classifier","8a297cf7":"-----------------------------------------------------","24692c26":"**No outliers in data**","1855bf4c":"![1998661.png](attachment:1998661.png)","a7270a9c":"## Random Forest Classifier","297fb60e":"![Screenshot-2020-09-22-at-2.34.57-PM.png](attachment:Screenshot-2020-09-22-at-2.34.57-PM.png)","a922fa3f":"### Top features","4ad09191":"**Both of catogries has StormProtector**","24028231":"**Price and square meter depend on each other **","a84028a2":"**Relation between squaremeters and price is directly (1 m^2 = 100$)**","4eb5dc37":"![1503830-200.png](attachment:1503830-200.png)","4f4af822":"# Conclusion: \n\n* From the data and model result the luxury house must be a new and have a yard and pool.\n* We note that the distribution for both categories are the same in most features, but this not make sense, this may be due to the fact that these are only fictitious data and not realistic","1f604a34":"**What the Luxury and Basic brice ranges?**","0282081e":"**What are the factors that distinguish luxury homes from others?**","7738ae4f":"No duplication","e9ace228":"Due to high correlation btween peice and squareMeters, we will drop one of them."}}