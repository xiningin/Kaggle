{"cell_type":{"777d2c4d":"code","699aff21":"code","215d95a7":"code","b51ba639":"code","772e56d5":"code","2e98d93f":"code","6c396cf8":"code","759c4059":"code","84370808":"markdown"},"source":{"777d2c4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","699aff21":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split","215d95a7":"def euclidean_numpy(x1,x2):   \n    distance = sqrt(sum((x1-x2)**2))\n    return distance","b51ba639":"data = np.array(df_new)\nx_train, x_test, y_train, y_test = train_test_split(data,Mark,\n                                                    test_size = 0.3,\n                                                    random_state=1,\n                                                    shuffle = True)","772e56d5":"n_train = round((x_train.size \/ col_size))\nn_test = round((x_test.size \/ col_size))","2e98d93f":"distance  = []\nfor i in range(n_test):\n    for j in range(n_train):\n        euclidean = round((euclidean_numpy(x_test[i][:30],\n                                           x_train[j][:30])),3)\n        distance.append(euclidean)","6c396cf8":"dis = pd.DataFrame(np.reshape(distance,(n_train,n_test)))\ntrain_mark = pd.DataFrame(dict(diagnosis = Mark))\ntest_dis = pd.concat([dis,train_mark],axis=1)","759c4059":"T= 0\nF = 0\n\nfor i in range(n_test):\n    sort = test_dis.sort_values(by = [i], ascending = [True]) \n    knn = sort.iloc[:65][\"diagnosis\"]\n    mark = knn[knn == \"B\"].size\n    if(mark < 33):\n        ans = \"M\"\n    else:\n        ans = \"B\"\n\n    if((y_test.iloc[i] == \"B\") and (ans == \"B\")) or (\n            (y_test.iloc[i] == \"M\") and (ans == \"M\")):\n        T += 1\n    elif((y_test.iloc[i] == \"M\") and (ans == \"B\")) or (\n            (y_test.iloc[i] == \"B\") and (ans == \"M\")):\n        F += 1\n\nacc = T \/ (T+F)","84370808":"acc = 0.65497"}}