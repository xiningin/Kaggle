{"cell_type":{"e654ace5":"code","c82674b4":"code","ac07ce87":"code","37a5a04c":"code","ef58a8e6":"code","a0dc8a72":"code","eebd2f53":"code","7c9c7a47":"code","bd180431":"code","8e1a2991":"code","5ff7f7f4":"code","7da2904a":"code","54e7c961":"code","df5306e9":"code","e784288c":"code","7b93f694":"code","1f4deaba":"code","ce9b7707":"code","19361cca":"code","ab993665":"code","027938a7":"code","580aaf74":"code","cd3c539b":"code","8b44b7b1":"code","6c7ebee2":"code","ec49837d":"code","da05fd18":"code","19fabc60":"code","9554db3d":"code","c3a714c8":"code","d5a0f2e4":"code","32ea3219":"code","ae7b6338":"code","7dbdc65c":"code","274d00a4":"code","e0f846b2":"markdown"},"source":{"e654ace5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c82674b4":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(test_df.shape)\nprint(train_df.shape)","ac07ce87":"train_df.info()","37a5a04c":"train_df.isna().sum()","ef58a8e6":"test_df.info()","a0dc8a72":"test_df.isna().sum()","eebd2f53":"train_df.head(10)","7c9c7a47":"train_df.Pclass.value_counts()","bd180431":"train_df[train_df.Survived == 1].Pclass.value_counts()\/train_df.Pclass.value_counts()","8e1a2991":"train_df.loc[(train_df.Survived == 0) & (train_df.Sex == 'female')].Pclass.value_counts()","5ff7f7f4":"train_df.drop(['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntest_df.drop(['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)","7da2904a":"train_df.isna().sum()","54e7c961":"train_df.fillna(value = train_df.median(),inplace = True)","df5306e9":"test_df.isna().sum()","e784288c":"test_df.loc[test_df.Fare.isna()== True]","7b93f694":"t = test_df.loc[test_df.Pclass == 3].Fare.median()\nt","1f4deaba":"test_df['Fare'].fillna(value = t,inplace = True)","ce9b7707":"test_df.fillna(value = test_df.mean(),inplace = True)","19361cca":"train_df.describe()","ab993665":"m = train_df.drop(['Survived','Sex'],axis = 1).max() \/ 2\nm","027938a7":"train_df.Fare = (train_df['Fare'] - m['Fare'])\/train_df['Fare'].max()","580aaf74":"train_df.SibSp = (train_df['SibSp'] - m['SibSp'])\/train_df['SibSp'].max()\ntrain_df.Age = (train_df['Age'] - m['Age'])\/train_df['Age'].max()\ntrain_df.Parch = (train_df['Parch'] - m['Parch'])\/train_df['Parch'].max()","cd3c539b":"test_df.Fare = (test_df['Fare'] - m['Fare'])\/test_df['Fare'].max()\ntest_df.SibSp = (test_df['SibSp'] - m['SibSp'])\/test_df['SibSp'].max()\ntest_df.Age = (test_df['Age'] - m['Age'])\/test_df['Age'].max()\ntest_df.Parch = (test_df['Parch'] - m['Parch'])\/test_df['Parch'].max()","8b44b7b1":"train_df.head()","6c7ebee2":"test_df.head()","ec49837d":"gender_map = {\n    'male' : 0,\n    'female': 1\n}\n\ntrain_df.Sex = train_df.Sex.map(gender_map)\ntest_df.Sex = test_df.Sex.map(gender_map)","da05fd18":"from sklearn.model_selection import train_test_split","19fabc60":"X_train, X_test,y_train,y_test = train_test_split(train_df.drop('Survived',axis = 1),train_df['Survived'],test_size = 0.15,random_state = 45)\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)","9554db3d":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver = 'liblinear',multi_class = 'ovr')\nlr.fit(X_train,y_train)","c3a714c8":"lr.score(X_test,y_test)","d5a0f2e4":"lr.coef_","32ea3219":"train_df.columns","ae7b6338":"predict = lr.predict(test_df)\npredict[:10]","7dbdc65c":"passengerid = pd.read_csv('\/kaggle\/input\/titanic\/test.csv').PassengerId\nSubmission = pd.DataFrame({'PassengerId':passengerid,'Survived': predict})\nSubmission.head(10)","274d00a4":"Submission.to_csv('my_submission.csv',index = False)","e0f846b2":"Thus we can now be sure that the Passenger Class i.e. Pclass and gender are one of the most important classifier of a person's survival ! "}}