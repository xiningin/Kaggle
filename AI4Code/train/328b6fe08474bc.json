{"cell_type":{"ffea3815":"code","814f115a":"code","adf805d8":"code","e282a010":"code","49ceb8cd":"code","8f7276e6":"code","989c9f2d":"code","96b9b9a7":"code","a86a06d8":"code","8facfd14":"code","e96d945e":"code","df81eb9e":"code","7a05e24b":"code","bccb8a5f":"code","5e452849":"code","1307e017":"code","5f4b97d6":"code","a6f01b36":"code","770e4840":"code","fe1dc8ef":"code","768cbfea":"code","fe483532":"code","e539b64c":"code","ade81e33":"code","c0a1632d":"code","e579abf3":"code","43388481":"code","f2ef542e":"code","a2d6088e":"code","02334f06":"code","55f6e9ac":"code","0cfee974":"code","d5638419":"code","961043a9":"code","e5007d6f":"code","d51e89eb":"code","a137ce24":"code","bca300e9":"code","2ba1641d":"code","0cf33e0f":"code","76340e39":"code","790f5759":"code","0a398b0c":"code","0a854d26":"code","d25f4ce1":"code","d87d8c8f":"code","c7c841d0":"code","bf1f8adf":"code","3f21adcd":"code","8a6c27ae":"code","e8af5cd4":"code","120c0bb0":"code","5a667f01":"code","b2885d8c":"code","6d1b5793":"code","896e3771":"code","231c0963":"code","bdfec8bb":"code","49a6ae95":"code","d7f4ec5c":"code","95fb86b3":"code","58971da0":"code","c505149e":"code","5d4bc6af":"code","f1db6051":"code","16527fd4":"code","09d1be94":"code","de22f1d7":"code","b56ada52":"code","2f196346":"code","8d35430b":"code","04e3727d":"code","ae8b2d8b":"markdown","a0df509e":"markdown","806e2192":"markdown","f5fba723":"markdown","e62c401e":"markdown","d20f76b4":"markdown","7119a022":"markdown","2cf49d45":"markdown","8be0f650":"markdown","a62f9abc":"markdown","6d870809":"markdown","5fd47c7b":"markdown","8b097d64":"markdown","c37a9194":"markdown","a8a3368b":"markdown","082a431f":"markdown","ec2648bb":"markdown","d477878d":"markdown","0813f4cf":"markdown","2f864f47":"markdown","8005cc8c":"markdown","c36c7bae":"markdown","27da6f23":"markdown","e26c2c9f":"markdown","085aae0d":"markdown","02ba1812":"markdown","c9b3571f":"markdown","0b0086cb":"markdown","29107a78":"markdown","14b4263c":"markdown","43857a9d":"markdown","2e8586bd":"markdown","b3a30cc5":"markdown","23b4bfee":"markdown","4c048367":"markdown","71b2732c":"markdown","5c3fabaa":"markdown","ffb81045":"markdown","244b020e":"markdown","1144724d":"markdown","06626d8c":"markdown"},"source":{"ffea3815":"#Import Libraries\n\nimport pandas as pd\nimport numpy as np\n\n#Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-dark')\n\n#DateTime\nimport datetime as dt\n\n#Models\nfrom sklearn.linear_model import LinearRegression\nfrom lightgbm import LGBMRegressor\n\n#Sklearn\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold, cross_val_score, StratifiedKFold, train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n#Time to run Program\nimport time ","814f115a":"def load_data():\n  '''\n  Function to Load the Train, Test and Submission Data\n\n  returns: train, test, submission dataframes\n  '''  \n\n  train = pd.read_csv('..\/input\/d2c-climate-change-hackathon\/new_train.csv')\n  test = pd.read_csv('..\/input\/d2c-climate-change-hackathon\/new_test.csv')\n  submission = pd.read_csv('..\/input\/d2c-climate-change-hackathon\/sample_submission.csv')\n\n  return train, test, submission","adf805d8":"#Declare Traget and Feature\nTARGET = 'temp'\nfeature = ['date']","e282a010":"train, test, submission = load_data()","49ceb8cd":"train.head()","8f7276e6":"test.head()","989c9f2d":"submission.head()","96b9b9a7":"#RMSE\ndef rmse():\n  y_pred = train.iloc[10000:11322, 2]\n  y = train.iloc[10000:11322, 0]\n  metric = np.sqrt(mean_squared_error(y, y_pred))\n  print(f\"RMSE of Data is: {metric}\")\n\n#Hackathon Metric\ndef predict(model, model_features):\n  pred_train = model.predict(X_train[model_features])\n  pred_val = model.predict(X_val[model_features])\n\n  print(f\"Train RMSE = {np.sqrt(mean_squared_error(y_train, pred_train))}\")\n  print(f\"Test RMSE = {np.sqrt(mean_squared_error(y_val, pred_val))}\")\n\ndef run_gradient_boosting(clf, fit_params, train, test, features):\n  N_SPLITS = 5\n  oofs = np.zeros(len(train))\n  preds = np.zeros((len(test)))\n\n  target = train[TARGET]\n\n  folds = StratifiedKFold(n_splits = N_SPLITS)\n  stratified_target = pd.qcut(train[TARGET], 10, labels = False, duplicates='drop')\n\n  feature_importances = pd.DataFrame()\n\n  for fold_, (trn_idx, val_idx) in enumerate(folds.split(train, stratified_target)):\n    print(f'\\n------------- Fold {fold_ + 1} -------------')\n\n    ### Training Set\n    X_trn, y_trn = train[features].iloc[trn_idx], target.iloc[trn_idx]\n\n    ### Validation Set\n    X_val, y_val = train[features].iloc[val_idx], target.iloc[val_idx]\n\n    ### Test Set\n    X_test = test[features]\n\n    scaler = StandardScaler()\n    _ = scaler.fit(X_trn)\n\n    X_trn = scaler.transform(X_trn)\n    X_val = scaler.transform(X_val)\n    X_test = scaler.transform(X_test)\n    \n    _ = clf.fit(X_trn, y_trn, eval_set = [(X_val, y_val)], **fit_params)\n\n    fold_importance = pd.DataFrame({'fold': fold_ + 1, 'feature': features, 'importance': clf.feature_importances_})\n    feature_importances = pd.concat([feature_importances, fold_importance], axis=0)\n\n    ### Instead of directly predicting the classes we will obtain the probability of positive class.\n    preds_val = clf.predict(X_val)\n    preds_test = clf.predict(X_test)\n\n    fold_score = metric(y_val, preds_val)\n    print(f'\\nRMSE score for validation set is {fold_score}')\n\n    oofs[val_idx] = preds_val\n    preds += preds_test \/ N_SPLITS\n\n\n  oofs_score = metric(target, oofs)\n  print(f'\\n\\nRMSE for oofs is {oofs_score}')\n\n  feature_importances = feature_importances.reset_index(drop = True)\n  fi = feature_importances.groupby('feature')['importance'].mean().sort_values(ascending = False)[:20][::-1]\n  fi.plot(kind = 'barh', figsize=(12, 6))\n\n  return oofs, preds, fi\n\ndef metric(y_true, y_pred):\n  return np.sqrt(mean_squared_error(y_true, y_pred))\n\ndef download_preds(preds_test, file_name = 'hacklive_sub.csv'):\n\n  ## 1. Setting the target column with our obtained predictions\n  submission['prediction'] = preds_test\n\n  ## 2. Saving our predictions to a csv file\n\n  submission.to_csv(file_name, index = False)\n\n  ## 3. Downloading and submitting the csv file\n  from google.colab import files\n  files.download(file_name)\n\n#Download Submission File\ndef download(model, model_features, file_name = 'prophet.csv'):\n\n  pred_test = model.predict(model_features)\n\n  #Setting the target column with our obtained predictions\n  submission['prediction'] = pred_test\n\n  #Saving our predictions to a csv file\n  submission.to_csv(file_name, index = False)\n  \n  #Downloadingthe csv file\n  files.download(file_name)\n\ndef join_df(train, test):\n\n  df = pd.concat([train, test], axis=0).reset_index(drop = True)\n  features = [c for c in df.columns if c not in [feature, TARGET]]\n  df[TARGET] = df[TARGET].apply(lambda x: np.log1p(x))\n\n  return df, features\n\ndef split_df_and_get_features(df, train_nrows):\n\n  train, test = df[:train_nrows].reset_index(drop = True), df[train_nrows:].reset_index(drop = True)\n  features = [c for c in train.columns if c not in [feature, TARGET]]\n  \n  return train, test, features","a86a06d8":"#Combine Train and Test Dataframe\ndf, features = join_df(train, test)","8facfd14":"df.head()","e96d945e":"print(f\"train.shape: {train.shape}\")\nprint(f\"test.shape: {test.shape}\")","df81eb9e":"train.describe()","7a05e24b":"#Check Datatypes\ntrain.dtypes","bccb8a5f":"print(f\"Train Null Value Count: {train.isnull().sum()}\")\nprint(f\"Test Null Value Count: {test.isnull().sum()}\")","5e452849":"#Temperature Distribution\ntrain[TARGET].plot(kind = 'density', title = 'Temperature Distribution', fontsize=14, figsize=(10, 6))","1307e017":"#Log Temperature Distribution\n_ = pd.Series(np.log1p(train[TARGET])).plot(kind = 'density', title = 'Log Temperature Distribution', fontsize=14, figsize=(10, 6))","5f4b97d6":"#Temperature Boxplot\ntrain[TARGET].plot(kind = 'box', vert=False, figsize=(12, 4), title = 'Temperature Boxplot', fontsize=14)","a6f01b36":"#Log Temperature BoxPlot\npd.Series(np.log1p(train[TARGET])).plot(kind = 'box', vert=False, figsize=(12, 4), title = 'Log Temperature Boxplot', fontsize=14)","770e4840":"#Convert `date` column datatype to `datetime`\ndf['date'] = pd.to_datetime(df['date'])\n\ndf.dtypes","fe1dc8ef":"print(f\"Train Null Value Count: {train.isnull().sum()}\")\nprint(f\"Test Null Value Count: {test.isnull().sum()}\")","768cbfea":"#Make basic datetime features\n# df['day_of_week'] = df['date'].dt.dayofweek\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['week'] = df['date'].dt.isocalendar().week  \n\n#Get Train and Test sets from df\ntrain, test, features = split_df_and_get_features(df, train.shape[0])\n\n#Define the features\nfeatures = [c for c in df.columns if c not in [feature, TARGET]]\nfeatures = features[1:]\nfeatures","fe483532":"df.head()","e539b64c":"train.fillna(np.mean(train['temp']), inplace=True)","ade81e33":"#Declare Features and Target from Training Dataset\nX = train[features]\ny = train[TARGET]\n\n#Split Training and Validation Datasets\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state = 42)","c0a1632d":"X.shape, y.shape","e579abf3":"#Linear Regression\nmodel = LinearRegression()\n\nmodel.fit(X_train[features], y_train)\n\npredict(model, features)","43388481":"model = LGBMRegressor(n_estimators = 5000,\n                        learning_rate = 0.01,\n                        colsample_bytree = 0.76,\n                        metric = 'None',\n                        )\nfit_params = {'verbose': 300, 'early_stopping_rounds': 200, 'eval_metric': 'rmse'}\n\nlgb_oofs, lgb_preds, fi = run_gradient_boosting(clf = model, fit_params = fit_params, train = train, test = test, features = features)","f2ef542e":"#Load Data\ntrain, test, submission = load_data()","a2d6088e":"#Convert `date` column to datetime\ntrain.date = pd.to_datetime(train.date)","02334f06":"#Set `date` as index\ntrain.set_index('date', inplace = True)","55f6e9ac":"train.head()","0cfee974":"train.describe()","d5638419":"train.plot(figsize = (20, 10))","961043a9":"#Import adfuller test\nfrom statsmodels.tsa.stattools import adfuller","e5007d6f":"# test_result = adfuller(train.temp)","d51e89eb":"#H0: It is not stationary\n#H1: It is stationary\n\ndef adfuller_test(temp):\n    result=adfuller(temp)\n    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    for value,label in zip(result,labels):\n        print(label+' : '+str(value) )\n    if result[1] <= 0.05:\n        print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n    else:\n        print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")","a137ce24":"adfuller_test(train.temp)","bca300e9":"train['Seasonal First Difference']=train['temp']-train['temp'].shift(12) #Because 1 year has 12 months\n\n## Again test dickey fuller test\nadfuller_test(train['Seasonal First Difference'].dropna())\n\ntrain['Seasonal First Difference'].plot()","2ba1641d":"from statsmodels.graphics.tsaplots import plot_pacf ,plot_acf","0cf33e0f":"fig = plt.figure(figsize = (12, 8))\nax1 = fig.add_subplot(211)\nfig = plot_pacf(train['Seasonal First Difference'].iloc[13:],lags=40,ax=ax1)\nax2 = fig.add_subplot(212)\nfig = plot_acf(train['Seasonal First Difference'].iloc[13:],lags=40,ax=ax2)","76340e39":"from statsmodels.tsa.arima_model import ARIMA\n\nmodel=ARIMA(train['temp'],order=(2,0,2))\nmodel_fit=model.fit()\n\nmodel_fit.summary()\n\ntrain['forecast']=model_fit.predict(start=10000,end=11321,dynamic=True)\ntrain[['temp','forecast']].plot(figsize=(12,8))","790f5759":"import statsmodels.api as sm","0a398b0c":"#Start time \nbegin = time.time() \n\nmodel=sm.tsa.statespace.SARIMAX(train['temp'],order=(2, 1, 2),seasonal_order=(2, 1, 2, 12))\nresults=model.fit()\n\n#End TIme\nend = time.time()\nprint(f\"\\n\\nTime of execution = {end - begin}\")\n\n#Forecast\ntrain['forecast']=results.predict(start=10000,end=11321,dynamic=True)\ntrain[['temp','forecast']].plot(figsize=(12,8))\n\nrmse()","0a854d26":"df = pd.concat([train, test])\ndf['forecast'] = results.predict(start = 11322, end = 14883, dynamic= True)  \ndf[['temp', 'forecast']].plot(figsize=(12, 8))","d25f4ce1":"rmse()","d87d8c8f":"def prophet_rmse(y_true, y_pred):\n\n  y_true, y_pred = np.array(y_true), np.array(y_pred)\n  return np.sqrt(mean_squared_error(y_true, y_pred))","c7c841d0":"import fbprophet\nfrom fbprophet import Prophet","bf1f8adf":"#Load Data\ntrain, test, submission = load_data()\ntrain['date'] = pd.to_datetime(train['date'])\n\n#Update column names\ntrain.columns = ['ds', 'y']","3f21adcd":"END_DATE = '2009'\nX_train = train[train['ds'] <= END_DATE]\nX_test = train[train['ds'] >= END_DATE]","8a6c27ae":"X_train.shape, X_test.shape","e8af5cd4":"#Add holidays to model\n\nimport holidays\n\n\nholiday = pd.DataFrame([])\nfor date, name in sorted(holidays.UnitedStates(years=[2018,2019,2020]).items()):\n    holiday = holiday.append(pd.DataFrame({'ds': date, 'holiday': \"US-Holidays\"}, index=[0]), ignore_index=True)\nholiday['ds'] = pd.to_datetime(holiday['ds'], format='%Y-%m-%d', errors='ignore')","120c0bb0":"# #Box Cox Transformation\n# from scipy.stats import boxcox\n\n# # Apply Box-Cox Transform to value column and assign to new column y\n# train['y'] = train['y'] + 5.12 #Make Data Positive\n# train['y'], lam = boxcox(train['y'])","5a667f01":"# train['y'].min()","b2885d8c":"#Initialize model\nmodel = Prophet(growth = 'linear', \n                  seasonality_mode = 'multiplicative',  \n                  changepoint_prior_scale = 30,\n                  seasonality_prior_scale = 15,\n                  )\n\n#Fit Model\nmodel.fit(X_train)\n\nprediction = model.predict(X_test[['ds']])\nrmse = np.sqrt(mean_squared_error(X_test['y'], prediction['yhat']))\nrmse","6d1b5793":"# from fbprophet.diagnostics import cross_validation\n# cv_results = cross_validation(model, initial='730 days', period='180 days', horizon = '365 days')\n# cv_results.head()\n\n#Calculate RMSE\n# prophet_rmse(cv_results.y, cv_results.yhat)","896e3771":"#Alternate way to calculate rmse (without using cv)\nprediction = model.predict(train[['ds']])\n# model.plot(prediction);\n# model.plot_components(prediction);\n\nrmse = np.sqrt(mean_squared_error(train['y'], prediction['yhat']))\nrmse","231c0963":"def submit(model, file_name = 'prophet.csv'):\n\n  #Load Test Data\n  test = pd.read_csv('\/content\/drive\/MyDrive\/Data Science\/dare2compete\/DTU RoundHacks Data Science Hackathon\/new_test.csv')\n\n  #Convert `date` to datetime\n  test['date'] = pd.to_datetime(test['date'])\n\n  #Update column names\n  test.columns = ['ds']\n\n  #Make Predictions\n  test_preds = model.predict(test)\n\n  #Inverse Box Transform\n  # from scipy.special import inv_boxcox\n\n  #Apply inverse Box-Cox transform to specific forecast columns\n  # test_preds[['yhat','yhat_upper','yhat_lower']] = test_preds[['yhat','yhat_upper','yhat_lower']].apply(lambda x: inv_boxcox(x, lam))\n\n  #Inverse Data Addition\n  # test_preds['yhat'] = test_preds['yhat'] - 5.12\n\n  #Add prediction to submission file\n  submission['prediction'] = test_preds['yhat']\n\n  #Saving our predictions to a csv file\n  submission.to_csv(file_name, index = False)\n    \n  #Downloadingthe csv file\n  files.download(file_name)     #Works with Google Colab","bdfec8bb":"from sklearn.model_selection import ParameterGrid\nparams_grid = {'seasonality_mode':('multiplicative','additive'),\n               'changepoint_prior_scale':[0.1,0.2,0.3,0.4,0.5],\n              'holidays_prior_scale':[0.1,0.2,0.3,0.4,0.5],\n              'n_changepoints' : [100,150,200]}\ngrid = ParameterGrid(params_grid)\ncnt = 0\nfor p in grid:\n    cnt = cnt+1\n\nprint('Total Possible Models',cnt)","49a6ae95":"import random","d7f4ec5c":"strt='1980-01-01'\nend='2009-01-01'\n\nmodel_parameters = pd.DataFrame(columns = ['RMSE','Parameters'])\ni = 0\n\nfor p in grid:\n    test_tune = pd.DataFrame()\n    print(f\"Iteration: {i+1}\/150\")\n    print(p)\n    random.seed(0)\n\n    train_model =Prophet(changepoint_prior_scale = p['changepoint_prior_scale'],\n                         holidays_prior_scale = p['holidays_prior_scale'],\n                         n_changepoints = p['n_changepoints'],\n                         seasonality_mode = p['seasonality_mode'],\n                         weekly_seasonality=True,\n                         daily_seasonality = True,\n                         yearly_seasonality = True,\n                         holidays=holiday, \n                         interval_width=0.95)\n    \n    train_model.add_country_holidays(country_name='US')\n    train_model.fit(X_train)\n\n    # train_forecast = train_model.make_future_dataframe(periods=57, freq='D',include_history = False)\n    # train_forecast = train[train['ds']>end]\n    # train_forecast = train_model.predict(train_forecast[])\n\n    train_forecast = train_model.predict(X_test)\n    test_tune=train_forecast[['ds','yhat']]\n    # Actual = train[(train['ds']>strt) & (train['ds']<=end)]\n    Actual = X_test\n\n    # print(Actual['y'].shape,test_tune['yhat'].shape)\n\n    rmse = np.sqrt(mean_squared_error(Actual['y'],test_tune['yhat']))\n    print('RMSE------------------------------------',rmse)\n    model_parameters = model_parameters.append({'RMSE':rmse,'Parameters':p},ignore_index=True)\n    print()\n\n    i = i+1\n\n    # break","95fb86b3":"parameters = model_parameters.sort_values(by=['RMSE'])\nparameters = parameters.reset_index(drop=True)\nparameters.head()","58971da0":"parameters['Parameters'][0]","c505149e":"# Setup and train model with holidays\nfinal_model = Prophet(holidays=holiday,\n                      changepoint_prior_scale= 0.1,\n                      holidays_prior_scale = 0.1,\n                      n_changepoints = 150,\n                      seasonality_mode = 'multiplicative',\n                      weekly_seasonality=True,\n                      daily_seasonality = True,\n                      yearly_seasonality = True,\n                      interval_width=0.95)\nfinal_model.add_country_holidays(country_name='US')\nfinal_model.fit(X_train)","5d4bc6af":"tuned_pred.head()","f1db6051":"tuned_pred = final_model.predict(X_test)\nprophet_rmse(tuned_pred['yhat'], X_test['y'])","16527fd4":"!pip install tbats","09d1be94":"train, test, submission = load_data()\ntrain['date'] = pd.to_datetime(train['date'])\n\nEND_DATE = '2009'\nX_train = train[train['date'] <= END_DATE]\nX_test = train[train['date'] >= END_DATE]","de22f1d7":"X_train.head()","b56ada52":"X_train.shape","2f196346":"X_train.set_index('date', inplace = True)","8d35430b":"X_test.set_index('date', inplace = True)","04e3727d":"from tbats import TBATS, BATS\n\nestimator = TBATS(seasonal_periods = (7, 365.25)  )\nmodel = estimator.fit(X_train)","ae8b2d8b":"### Visualize Data","a0df509e":"## About the Dataset\nThe train dataset contains the per day temperature values of the city - \u2018XYZ\u2019 for 30 years (1980 - 2010). The test set contains per day dates for the years 2011 - 2020 for which you will be predicting the temperature using the model you have built using the train dataset.\n\nYou can download the datasets from the given links:\n\n- train - You can download the train dataset from [here](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/data-science-challenges\/DTU_RoundTable\/new_train.csv). Use this data to build machine learning models.\n- test - You can download the test dataset from [here](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/data-science-challenges\/DTU_RoundTable\/new_test.csv). Predict the target values for this data using the model you built with the train data.\n- sample_submission: This is a csv file that contains the sample submission for the challenge. You can download the file from [here](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/data-science-challenges\/DTU_RoundTable\/sample_submission.csv).","806e2192":"The forecast is poor because data is seasonal, so we need to use `SARIMAX`","f5fba723":"Thus, Training Data does not have any null values.","e62c401e":"### Null Values","d20f76b4":"- From PACF sudden drop is observed at 2 so `p=2`.\n\n- From ACF exponential drop is till 10 so `q=10`","7119a022":"There are many more functions in `datetime` library which you can try out for yourself. Check the [documentation](https:\/\/docs.python.org\/3\/library\/datetime.html) for more such functions.","2cf49d45":"### Inference","8be0f650":"## Libraries","a62f9abc":"## Functions","6d870809":"### Data Details","5fd47c7b":"## End Notes\n\nThere are many more methods that you may try out such as using XGBRegressor, LSTM, etc. For me FBProphet worked best so I worked more on it.\n\nARIMA and TBATS are computationally expensive, so be careful while implementing them. ","8b097d64":"## Model","c37a9194":"## EDA and Data Preprocessing","a8a3368b":"### Linear Regression\n\nLinear regression is a linear model, e.g. a model that assumes a linear relationship between the input variables (x) and the single output variable (y). More specifically, that y can be calculated from a linear combination of the input variables (x).\n\nWhen there is a single input variable (x), the method is referred to as simple linear regression. When there are multiple input variables, literature from statistics often refers to the method as multiple linear regression.\n\nDifferent techniques can be used to prepare or train the linear regression equation from data, the most common of which is called Ordinary Least Squares. It is common to therefore refer to a model prepared this way as Ordinary Least Squares Linear Regression or just Least Squares Regression.\n\n**RESOURCES:**\n1. [Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html)\n2. [Linear Regression for Machine Learning](https:\/\/machinelearningmastery.com\/linear-regression-for-machine-learning\/#:~:text=Linear%20regression%20is%20a%20linear,the%20input%20variables%20(x).)\n3. [Linear Regression](http:\/\/www.stat.yale.edu\/Courses\/1997-98\/101\/linreg.htm)\n4. [Linear Regression Detailed View](https:\/\/towardsdatascience.com\/linear-regression-detailed-view-ea73175f6e86)\n5. [Linear Regression Analysis using SPPS Statistics](https:\/\/statistics.laerd.com\/spss-tutorials\/linear-regression-using-spss-statistics.php)\n6. [What is Linear Regression](https:\/\/www.statisticssolutions.com\/what-is-linear-regression\/?__cf_chl_jschl_tk__=3dc2b2683edb0777a0554f2afb84752a9d9e2ba2-1615132368-0-ASd1CvX_kwIZyocziRkwCHi7dmsfVurLvcRPIWFS5iKOECprgS1IJUetJqnAgimS2yijxcLIY7vRWIBshkoGno20f6Acx5Na3C_pkR0nP9WBd95Ma7v_arU9Owlh-LPuL5SofBxaHvN10g3d4xwKnMRtyNpaWGMOaQcCaZhPcls6UZhoI1gA0EXZoAe0yp5e2ULs0MirLFu_ezt07RgEAzTg1Od5LhTa585tKdIR0Y2ajxYfzpr9u35pdH26h05c8QS_e_3cEQh_iGPk1f8bmK3NHHYSUyvEv1wy1J8uLnB5XY3sHuMG2rCRuf-jBUQ7PDCPyLXlmi4by7bgw3n2UzaTY1u9sca3wI3uKlpb-8Tc)\n7. [Introduction to Linear Regression Analysis](http:\/\/people.duke.edu\/~rnau\/regintro.htm)","082a431f":"Since data is already stationary, we do not need to perform differencing and can set `d=0` directly.","ec2648bb":"Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nProphet is open source software released by Facebook's Core Data Science team .\n\n**RESOURCES:**\n1. [Documentation](https:\/\/pypi.org\/project\/fbprophet\/)\n2. [Quick Start](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html)\n3. [Hacking Time-Series Forecasting Like a Pro with FBProphet](https:\/\/medium.com\/tokopedia-data\/hacking-time-series-forecasting-like-a-pro-with-fbprophet-76f276f0a058)\n4. [Time Series Forecasting With Prophet in Python](https:\/\/machinelearningmastery.com\/time-series-forecasting-with-prophet-in-python\/)\n5. [A Quick Start of Time Series Forecasting with a Practical Example using FB Prophet](https:\/\/towardsdatascience.com\/a-quick-start-of-time-series-forecasting-with-a-practical-example-using-fb-prophet-31c4447a2274)\n6. [FBProphet TowardsDataScience](https:\/\/towardsdatascience.com\/a-quick-start-of-time-series-forecasting-with-a-practical-example-using-fb-prophet-31c4447a2274)\n7. [Generate Quick and Accurate Time Series Forecasts using Facebook\u2019s Prophet (with Python & R codes)](https:\/\/www.analyticsvidhya.com\/blog\/2018\/05\/generate-accurate-forecasts-facebook-prophet-python-r\/)","d477878d":"**Autoregressive Integrated Moving Averages**  \n\nThe general process is as follows:  \n- Visualize the time series data\n- Make the time series data stationary\n- Plot the Correlation and Autocorrelation charts\n- Use the model to make predictions","0813f4cf":"## TBATS","2f864f47":"### Hyperparameter Tuning using Parameter Grid","8005cc8c":"## Load Data","c36c7bae":"To check if the data is stationary, we perform the `adfuller` test.","27da6f23":"## Data Description\n`date`: date on which the temperature was observed  \n`temp`: observed temperature on the given date\n\n","e26c2c9f":"Now we shall create some features using the `date` column.","085aae0d":"**Parameters for ARIMA**\n1. p - Autoregressive (AR) Model Lags - Use PACF\n2. d - No. of times differencing performed\n3. q - Moving Average (MA) Lags - Use ACF","02ba1812":"### Target Distribution","c9b3571f":"## Time Series Forecasting using ARIMA and SARIMAX\n\nARIMA, short for \u2018Auto Regressive Integrated Moving Average\u2019 is actually a class of models that \u2018explains\u2019 a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values.\n\nAny \u2018non-seasonal\u2019 time series that exhibits patterns and is not a random white noise can be modeled with ARIMA models.\n\nAn ARIMA model is characterized by 3 terms: p, d, q\n\nwhere,\n\np is the order of the AR term\n\nq is the order of the MA term\n\nd is the number of differencing required to make the time series stationary\n\nIf a time series, has seasonal patterns, then you need to add seasonal terms and it becomes SARIMA, short for \u2018Seasonal ARIMA\u2019.\n\n**RESOURCES:**\n\n1. [Documentation](https:\/\/www.statsmodels.org\/devel\/generated\/statsmodels.tsa.arima_model.ARIMA.html)\n2. [Forecasting Future Sales using ARIMA and SARIMAX](https:\/\/www.youtube.com\/watch?v=2XGSIlgUBDI)\n3. [ARIMA for Time Series Forecasting in Python](https:\/\/machinelearningmastery.com\/arima-for-time-series-forecasting-with-python\/#:~:text=ARIMA%20is%20an%20acronym%20that,structures%20in%20time%20series%20data.) \n4. [Autoregressive Integrated Moving Average](https:\/\/en.wikipedia.org\/wiki\/Autoregressive_integrated_moving_average)\n5. [ARIMA Model \u2013 Complete Guide to Time Series Forecasting in Python](https:\/\/www.machinelearningplus.com\/time-series\/arima-model-time-series-forecasting-python\/)\n6. [Introduction to ARIMA](https:\/\/people.duke.edu\/~rnau\/411arim.htm)\n7. [Autoregressive Integrated Moving Average (ARIMA)](https:\/\/www.investopedia.com\/terms\/a\/autoregressive-integrated-moving-average-arima.asp)\n8. [Time Series Forecasting - ARIMA Models](https:\/\/towardsdatascience.com\/time-series-forecasting-arima-models-7f221e9eee06)\n9. [Understanding ARIMA Time Series Modelling](https:\/\/towardsdatascience.com\/understanding-arima-time-series-modeling-d99cd11be3f8)\n10. [How to Create an ARIMA Model for Time Series Forecasting in Python](https:\/\/www.analyticsvidhya.com\/blog\/2020\/10\/how-to-create-an-arima-model-for-time-series-forecasting-in-python\/)\n11. [Time Series ARIMA Models](https:\/\/sites.google.com\/site\/econometricsacademy\/econometrics-models\/time-series-arima-models)\n","0b0086cb":"### Make Data Stationary","29107a78":"Datatype of `date` is incorrect. It should be datetime. We will correct it in a later stage.","14b4263c":"### LGBMRegressor\n\nLightGBM short for Light Gradient Boosted Machine, is a library developed at Microsoft that provides an efficient implementation of the gradient boosting algorithm.\n\nThe primary benefit of the LightGBM is the changes to the training algorithm that make the process dramatically faster, and in many cases, result in a more effective model.\n\nFor more technical details on the LightGBM algorithm, see the paper:\n\n- [LightGBM: A Highly Efficient Gradient Boosting Decision Tree, 2017](https:\/\/papers.nips.cc\/paper\/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree).\n\n**RESOURCES:**\n1. [Documentation](https:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.LGBMRegressor.html)\n2. [How to use LightGBM](https:\/\/www.dezyre.com\/recipes\/use-lightgbm-classifier-and-regressor-in-python)\n3. [What is LightGBM, How to implement it? How to fine tune the parameters?](https:\/\/medium.com\/@pushkarmandot\/https-medium-com-pushkarmandot-what-is-lightgbm-how-to-implement-it-how-to-fine-tune-the-parameters-60347819b7fc)\n4. [Python Examples of LightGBM](https:\/\/www.programcreek.com\/python\/example\/88794\/lightgbm.LGBMRegressor)\n5. [Understanding LightGBM Parameters](https:\/\/neptune.ai\/blog\/lightgbm-parameters-guide)\n6. [Gradient Boosting with Scikit-Learn, XGBoost, LightGBM, and CatBoost](https:\/\/machinelearningmastery.com\/gradient-boosting-with-scikit-learn-xgboost-lightgbm-and-catboost\/)","43857a9d":"## Problem Overview\nEfforts to understand the influence of historical climate change, at global and regional levels, have been increasing over the past decade. In particular, the estimates of air temperatures have been considered as a key factor in climate impact studies on agricultural, ecological, environmental, and industrial sectors.\n\n![](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/Datathons\/temperature_change.png)\n\nMitigating climate change is one of the biggest challenges of humankind. Despite the complexity of predicting the effects of climate change on earth, there is a scientific consensus about its negative impacts. Among them, the affectation of ecosystems, decrease of biodiversity, soil erosion, extreme changes in temperature, sea level rise, and global warming have been identified. Likewise, impacts on the economy, human health, food security and energy consumption are expected.\n\nSpecifically, air temperature forecasting has been a crucial climatic factor required for many different applications in areas such as agriculture, industry, energy, environment, tourism, etc. Some of these applications include short-term load forecasting for power utilities, air conditioning and solar energy systems development, adaptive temperature control in greenhouses, prediction and assessment of natural hazards, and prediction of cooling and energy consumption in residential buildings. Therefore, there is a need to accurately predict temperature values because, in combination with the analysis of additional features in the subject of interest, they would help to establish a planning horizon for infrastructure upgrades, insurance, energy policy, and business development. [source of information: mdpi]\n\n## Objective\nBuild a Machine Learning model to predict the future temperature of the city.\n\n## Evaluation Criteria\nSubmissions are evaluated using the Root Mean Squared Error (RMSE).\n\n![](https:\/\/dphi-courses.s3.ap-south-1.amazonaws.com\/Datathons\/rmse+formula.png)\n\n","2e8586bd":"Let us check the distribution of the TARGET i.e., Temperature.","b3a30cc5":"From the plot we observe that the data is seasonal.","23b4bfee":"## Date Feature","4c048367":"## What to Expect from this Notebook?\n\nThis notebook includes detailed exlanations and implementations of state-of-the-art Time Series Firecasting Algorithms. There are many variations of the algorithms, I have only shown a few. \n\nI have linked some great resources to most of the stuff in this notebook so that you can have loads of materials and examples to learn from. Some of these resources were even used by me to learn these concepts.","71b2732c":"### Prophet Model Tuning","5c3fabaa":"There are two interesting time series forecasting methods called BATS and TBATS that are capable of modeling time series with multiple seasonalities.\nThe names are acronyms for key features of the models: Trigonometric seasonality, Box-Cox transformation, ARMA errors, Trend and Seasonal components.\nTBATS model takes it roots in exponential smoothing methods and can be described by the following equations:\n![](https:\/\/miro.medium.com\/max\/700\/1*yfruZnSYsNt1X1uyag46eQ.png)\n\nEach seasonality is modeled by a trigonometric representation based on Fourier series. One major advantage of this approach is that it requires only 2 seed states regardless of the length of period. Another advantage is the ability to model seasonal effects of non-integer lengths. For example, given a series of daily observations, one can model leap years with a season of length 365.25.\nBATS differs from TBATS only in the way it models seasonal effects. In BATS we have a more traditional approach where each seasonality is modeled by:\n![](https:\/\/miro.medium.com\/max\/700\/1*D8KY2jQRmVRLHY5f4RNqKA.png)\n\nThis implies that BATS can only model integer period lengths. Approach taken in BATS requires m_i seed states for season i, if this season is long the model may become intractable.\n\n**RESOURCES:**\n1. [Documentation](https:\/\/pypi.org\/project\/tbats\/)\n2. [Forecasting Time Series with Multiple Seasonalities using TBATS in Python](https:\/\/medium.com\/intive-developers\/forecasting-time-series-with-multiple-seasonalities-using-tbats-in-python-398a00ac0e8a)\n3. [Time-Series Forecasting using TBATS model](https:\/\/blog.tenthplanet.in\/time-series-forecasting-tbats\/)\n","ffb81045":"## FBProphet","244b020e":"We begin with a simple Linear Regression baseline model and then move ahead with more complex algorithms.","1144724d":"## Auto Regressive Model\n\n**Autocorrelation and Partial Autocorrelation**  \n\n- Identification of an AR model is often best done with the PACF.\n - For an AR model, the theoretical PACF \u201cshuts off\u201d past the order of the model. The phrase \u201cshuts off\u201d means that in theory the partial autocorrelations are equal to 0 beyond that point. Put another way, the number of non-zero partial autocorrelations gives the order of the AR model. By the \u201corder of the model\u201d we mean the most extreme lag of x that is used as a predictor.\n - Look for sudden drop\n\n- Identification of an MA model is often best done with the ACF rather than the PACF.\n - For an MA model, the theoretical PACF does not shut off, but instead tapers toward 0 in some manner. A clearer pattern for an MA model is in the ACF. The ACF will have non-zero autocorrelations only at lags involved in the model.\n - Look for exponential drop","06626d8c":"### Preprocess Data"}}