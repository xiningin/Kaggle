{"cell_type":{"edd8433e":"code","26bbb33b":"code","f52c98b6":"code","fa36ebb3":"code","8164c33e":"code","cad5a600":"code","d502dd5c":"code","47eb0dd7":"code","13339a6a":"code","5a2af914":"code","74843cb6":"code","2e6569ff":"code","f3d9f943":"code","7e8d546e":"code","a145378b":"code","e73eae8d":"code","1622d847":"code","21b61e4f":"code","23c4a1b8":"code","4877a38c":"code","0c969e04":"code","1387155c":"code","ecec25c5":"code","8375007c":"code","c68f57d3":"code","6236d8e6":"code","25382c6c":"code","99d05e05":"code","693192fa":"code","af820430":"code","c17eff8f":"code","7e10f34f":"code","252c94b4":"code","3ad9f56b":"code","6cafb277":"code","353238f8":"code","5a129ef9":"code","6b442869":"code","036f2639":"code","ca97f522":"markdown","410ad23f":"markdown","5af423fa":"markdown","03280f75":"markdown","bcaa682c":"markdown","42e142b8":"markdown","5ebb7982":"markdown","40ee9a2e":"markdown","615a5f22":"markdown"},"source":{"edd8433e":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense , Flatten\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import linear_model\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","26bbb33b":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\") #loading datas\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")","f52c98b6":"train_targets_df = train_df.loc[:,[\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"]]\ntrain_df = train_df.drop([\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"],axis = 1)","fa36ebb3":"len(test_df)","8164c33e":"len(train_df)","cad5a600":"train_df.head()","d502dd5c":"train_targets_df.head()","47eb0dd7":"train_data_len = 7111","13339a6a":"train_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","5a2af914":"pred_times=train_df[[\"date_time\"]]\ntrain_df=train_df.drop([\"date_time\"],axis = 1)\npred_times=pred_times.iloc[7111:,:]","74843cb6":"pred_times.reset_index(drop=True, inplace=True)","2e6569ff":"scaler = StandardScaler()\n\ntrain_df = scaler.fit_transform(train_df)","f3d9f943":"train_df = pd.DataFrame(train_df)","7e8d546e":"test_df = train_df[7111:]\ntrain_df = train_df[:7111]","a145378b":"\"\"\"def get_lined_data(data_x , data_y , data_len , time_len=10):\n    x = []\n    y = []\n    pre_con = pd.DataFrame(columns = [\"deg_C\",\"relative_humidity\",\"absolute_humidity\",\"sensor_1\",\"sensor_2\",\"sensor_3\",\"sensor_4\",\"sensor_5\"])\n    rep_lay = data_x.iloc[[0]]\n    \n    for i in range(time_len-1):\n        pre_con = pre_con.append(rep_lay)\n    \n    pre_con=pre_con.reset_index(drop=True)\n    \n    X_con_train = pd.concat([pre_con, data_x], axis=0).reset_index(drop=True)\n    X_con_train=X_con_train.to_numpy()\n    data_y=data_y.to_numpy()\n\n    for i in range(data_len):\n    \n        x.append(X_con_train[i:i+time_len,:])\n        y.append(data_y[i+time_len-1,:])\n        \n    x, y = np.array(x), np.array(y)\n    \n    return x, y\"\"\"","e73eae8d":"x = []\ny = []\npre_con = pd.DataFrame(columns = [0,1,2,3,4,5,6,7])\nrep_lay = train_df.iloc[[0]]\n\nfor i in range(59):\n    pre_con = pre_con.append(rep_lay)\npre_con=pre_con.reset_index(drop=True)\n\nX_con_train = pd.concat([pre_con, train_df], axis=0).reset_index(drop=True)\nX_con_train=X_con_train.to_numpy()\ntrain_targets_df=train_targets_df.to_numpy()\n\nfor i in range(7111):\n    \n    x.append(X_con_train[i:i+60,:])\n    y.append(train_targets_df[i,:])\n        \nx, y = np.array(x), np.array(y)\n","1622d847":"x_test = []\n\npre_con_test = pd.DataFrame(columns = [0,1,2,3,4,5,6,7])\nrep_lay_test = test_df.iloc[[0]]\n\nfor i in range(59):\n    pre_con_test = pre_con_test.append(rep_lay_test)\npre_con_test=pre_con_test.reset_index(drop=True)\n\nX_con_test = pd.concat([pre_con_test, test_df], axis=0).reset_index(drop=True)\nX_con_test=X_con_test.to_numpy()\n\nfor i in range(2247):\n    \n    x_test.append(X_con_test[i:i+60,:])\n        \nx_test= np.array(x_test)","21b61e4f":"x.shape","23c4a1b8":"y_car=y[:,0]\ny_car=y_car.reshape(-1,1)\n\ny_benz=y[:,1]\ny_benz=y_benz.reshape(-1,1)\n\ny_nit=y[:,2]\ny_nit=y_nit.reshape(-1,1)","4877a38c":"y_car.shape","0c969e04":"regressor_car = Sequential()\nregressor_car.add(LSTM(units = 90, return_sequences = True, input_shape = (x.shape[1], x.shape[2])))\nregressor_car.add(Dropout(0.2))\nregressor_car.add(LSTM(units = 50, return_sequences = True))\nregressor_car.add(Dropout(0.2))\nregressor_car.add(LSTM(units = 50, return_sequences = True))\nregressor_car.add(Dropout(0.2))\nregressor_car.add(LSTM(units = 50))\nregressor_car.add(Dropout(0.2))\nregressor_car.add(Dense(units = 1))\n\nregressor_car.compile(optimizer = 'adam', loss = 'mean_squared_error')","1387155c":"history = regressor_car.fit(x, y_car, epochs = 110, batch_size = 32)","ecec25c5":"def display_learning_curves(history):\n\n    plt.plot(history.history[\"loss\"])\n    plt.legend([\"train\"], loc=\"upper right\")\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n\n    plt.show()","8375007c":"display_learning_curves(history)","c68f57d3":"predicted_car = regressor_car.predict(x_test)","6236d8e6":"train_2_x = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest_2_x = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\ntrain_2_x = train_2_x.drop([\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\",\"date_time\"],axis = 1)\ntest_2_x = test_2_x.drop([\"date_time\"],axis = 1)\n\nscaler2 = StandardScaler()\ntrain_2_x = scaler2.fit_transform(train_2_x)\ntest_2_x = scaler2.transform(test_2_x)","25382c6c":"\"\"\"regressor_benz = Sequential()\nregressor_benz.add(Dense(25, input_dim=8, kernel_initializer='normal', activation='relu'))\nregressor_benz.add(Dense(65, activation='relu'))\nregressor_benz.add(Dropout(0.1))\nregressor_benz.add(Dense(40, activation='relu'))\nregressor_benz.add(Dropout(0.1))\nregressor_benz.add(Dense(20, activation='relu'))\nregressor_benz.add(Dense(8, activation='relu'))\nregressor_benz.add(Dense(1, activation='linear'))\nregressor_benz.compile(loss='mse', optimizer='adam', metrics=['mse','mae'])\nregressor_benz.fit(train_2_x, y_benz, epochs = 120, batch_size = 32)\npredicted_benz = regressor_benz.predict(test_2_x)\n\"\"\"\n","99d05e05":"gb_model_benz = GradientBoostingRegressor(subsample=0.7,learning_rate=0.017, max_depth=4 ,\n                                          random_state=np.random.randint(1000),n_estimators=800).fit(train_2_x, y_benz)\n\n\nprint(\"Performance on train data:\", gb_model.score(train_2_x, y_benz))","693192fa":"predicted_benz  = gb_model_benz.predict(test_2_x)","af820430":"regressor_nit.fit(x, y_nit, epochs = 100, batch_size = 32)","c17eff8f":"\"\"\"dtr_nit = DecisionTreeRegressor()\nprint(\"Performance on train data:\", gb_model.score(train_2_x, y_benz))\"\"\"","7e10f34f":"xgb_model_nit = XGBRegressor(subsample=0.7, learning_rate=0.02, max_depth=4,\n                             random_state=np.random.randint(1000),n_estimators=800).fit(train_2_x, y_nit)\n\nprint(\"Performance on train data:\", xgb_model_nit.score(train_2_x, y_nit))","252c94b4":"gb_model_nit = GradientBoostingRegressor(subsample=0.7,learning_rate=0.017, max_depth=4 \n                                         ,random_state=np.random.randint(1000),n_estimators=800).fit(train_2_x, y_nit)\n\nprint(\"Performance on train data:\", gb_model_nit.score(train_2_x, y_nit))","3ad9f56b":"predicted_nit = xgb_model.predict(test_2_x)","6cafb277":"predicted_car_df = pd.DataFrame(predicted_car)\npredicted_benz_df = pd.DataFrame(predicted_benz)\npredicted_nit_df = pd.DataFrame(predicted_nit)","353238f8":"output = pd.concat([pred_times, predicted_car_df,predicted_benz_df,predicted_nit_df], axis=1 ,ignore_index=True)","5a129ef9":"output=output.rename(columns={0: 'date_time', 1: 'target_carbon_monoxide' , 2: 'target_benzene', 3: 'target_nitrogen_oxides'})","6b442869":"output","036f2639":"output.to_csv(\"leak_output.csv\", index = False)","ca97f522":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">LEAK DATA <\/h1>\n<br>\n","410ad23f":"# Gradient Boost For Other Outputs","5af423fa":"# Add Libaries","03280f75":"# Make Models","bcaa682c":"# Merge Output","42e142b8":"### Prepare Inputs","5ebb7982":"# Load and Examine Data","40ee9a2e":"# Concatenate Data","615a5f22":"# Change Input For Other Models"}}