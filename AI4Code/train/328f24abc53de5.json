{"cell_type":{"823d17e5":"code","49900732":"code","01311d83":"code","27054021":"code","7c812e74":"code","257858f1":"code","6adf4f4d":"code","3968e39c":"code","98623a15":"code","d51eb4a1":"code","43e8970b":"code","da0e315d":"code","c94bef40":"code","04f9fbb6":"code","149f0156":"code","70860ef3":"code","db73cdc4":"code","34ac74f3":"markdown","3871cdc7":"markdown","1327b939":"markdown","b97f9838":"markdown","7b69934b":"markdown","826aa685":"markdown","105cb321":"markdown"},"source":{"823d17e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\npd.set_option('float_format', '{:.2f}'.format)\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49900732":"trend_videos=pd.read_csv('\/kaggle\/input\/youtube-trending-video-dataset\/US_youtube_trending_data.csv')","01311d83":"trend_videos.info()","27054021":"trend_videos.head()","7c812e74":"# columns with null values \ntrend_videos.isnull().sum()","257858f1":"# there are 284 null values for description column, hence filling them with \"Video has no description\"\n\ntrend_videos[\"description\"] = trend_videos[\"description\"].fillna(value=\"Video has no description\")","6adf4f4d":"# stats for numerical columns\ntrend_videos.describe()","3968e39c":"# stats for non-numerical columns\ntrend_videos.describe(include = ['O'])","98623a15":"# Ratio of videos published by year\ntrend_videos[\"publishedAt\"].apply(lambda x: x[:4]).value_counts(normalize=True)","d51eb4a1":"# Ratio of videos with comments disabled and enabled\ntrend_videos[\"comments_disabled\"].value_counts(normalize=True)","43e8970b":"# Ratio of videos with ratings disabled and enabled\ntrend_videos[\"ratings_disabled\"].value_counts(normalize=True)","da0e315d":"figure = plt.subplots(figsize=(10,6))\ncorr_map = sns.heatmap(trend_videos.corr(), annot=True, cmap=\"YlGnBu\")","c94bef40":"# Top 10 Channels having highest trending videos\n\nvideos_by_channel = trend_videos.groupby(\"channelTitle\").size().reset_index(name=\"no_of_videos\") \\\n    .sort_values(\"no_of_videos\", ascending=False).head(10)\nfig, ax = plt.subplots(figsize=(10,6))\nvbc_plot = sns.barplot(x=\"no_of_videos\", y=\"channelTitle\", data=videos_by_channel, palette=\"YlGnBu_r\")\nvbc_plot = ax.set(xlabel=\"Number of videos\", ylabel=\"Channel\")\nplt.title(\"Top 10 Trending Video Channels \\n\")\nplt.show()\n\n","04f9fbb6":"# Top 10 Categories having highest trending videos\n# category names are not available in dataset \n\nvideos_by_category = trend_videos.groupby(\"categoryId\").size().reset_index(name=\"no_of_videos\") \\\n    .sort_values(\"no_of_videos\", ascending=False).head(10)\nfig, ax = plt.subplots(figsize=(10,6))\nvbcat_plot = sns.barplot(x=\"no_of_videos\", y=\"categoryId\", data=videos_by_category, palette=\"YlGnBu_r\", orient = 'h')\nvbcat_plot = ax.set(xlabel=\"Number of Videos\", ylabel=\"Category\")\nplt.title(\"Top 10 Trending Video Categories\\n\")\nplt.show()\n\n","149f0156":"# From the previous plot, it seems that category 10 hosted the highest number of trending videos\ncategory10_videos = trend_videos[[\"title\",\"view_count\"]].sort_values(by=\"view_count\",ascending=False).drop_duplicates(\"title\",keep=\"first\")\ncategory10_top10 = category10_videos.nlargest(10, [\"view_count\"])\n\nfig, ax = plt.subplots(figsize=(10,8))\ntop10_plot = sns.barplot(data=category10_top10, x='view_count', y='title', palette=\"YlGnBu_r\", ax=ax, ci=None)\ntop10_plot = ax.set(xlabel=\"Number of views\", ylabel=\"Title of the Video\")\nplt.ticklabel_format(axis=\"x\", style=\"plain\")\nplt.title(\"Top 10 Trending videos in the category having highest trending videos\\n\")\nplt.show()\n","70860ef3":"# extract published hour from the publishedAt \ntrend_videos[\"publish_hour\"] = trend_videos[\"publishedAt\"].apply(lambda x: x[11:13])\n\n# plot no of videos published by hour \nvideos_by_pub_hour = trend_videos.groupby(\"publish_hour\").size().reset_index(name=\"no_of_videos\")\n    \nfig, ax = plt.subplots(figsize=(8,8))\nvph_plot = sns.barplot(x=\"publish_hour\", y=\"no_of_videos\", data=videos_by_pub_hour,palette=\"YlGnBu\")\nvph_plot = ax.set(xlabel=\"Hour in which the video was published\", ylabel=\"Number of Videos\")\nplt.title(\"Trending Videos by Published hour\\n\")\nplt.show()","db73cdc4":"# plot videos published by hour and category\nvideos_by_cat_pub_hour=trend_videos.groupby([\"categoryId\",\"publish_hour\"]).count()[\"video_id\"].unstack()\n\nfig, ax = plt.subplots(figsize=(10,8))\nvcph_plot = sns.heatmap(videos_by_cat_pub_hour, cmap=\"YlGnBu\")\nvcph_plot = ax.set(xlabel=\"Hour in which video was published\", ylabel=\"Category\")\nplt.title(\"Trending Videos by Category & Publish hour\\n\")\nplt.show()","34ac74f3":"# Statistics for numerical & non-numerical columns","3871cdc7":"# Top 10 Trending videos in the category having highest trending videos","1327b939":"# Top 10 Categories having highest trending videos","b97f9838":"# Correlation Matrix","7b69934b":"# Impact of video published hour on trending videos","826aa685":"# Top 10 Channels having highest trending videos","105cb321":"# "}}