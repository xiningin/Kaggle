{"cell_type":{"c023e223":"code","306d58ab":"code","1e61d375":"code","cd986e9e":"code","24c4320e":"code","e494ee0a":"code","b43d2a85":"code","485044e6":"code","6e8ef036":"code","65b67262":"code","73e4ffef":"code","a268c40f":"code","52d9bfd2":"code","540c9840":"code","992f1e64":"code","0815d1cf":"code","d95478ca":"code","4449e739":"code","c40166c5":"code","151794e7":"code","1d65979d":"code","9e5a7aa5":"code","d4465e9c":"code","190d3160":"code","5e144cfb":"code","3663657f":"code","888c01e0":"code","77c56c9e":"code","d4e9913c":"code","4ff68228":"code","100bfdae":"code","3f3301ef":"code","ec5ff996":"code","56705388":"code","b8fb213e":"code","676040de":"code","d7315829":"code","0f6d5575":"code","7881dcb1":"code","55c300af":"code","6fc5be65":"code","5f44c8e6":"code","04ca418f":"code","6ae7bb35":"code","4d7a2194":"code","ce464f53":"code","0ffdd889":"code","d403187d":"code","42ec7cb6":"code","697d84c2":"code","ca46f1da":"code","2e2fdfc6":"code","bea54ef5":"code","289ae12e":"code","ff2b49ff":"code","f5cbd1ca":"code","19af0bae":"code","45e25ae7":"code","45f30d90":"code","3238d075":"code","f399126a":"code","c40caf4c":"code","7fc19341":"code","0c30dab3":"code","a5c02acf":"code","110ff4af":"code","44c57ee9":"code","2b1220ff":"code","a6d7f922":"markdown","e79acbbe":"markdown","81345b78":"markdown","62f56bea":"markdown","6e8a0dcd":"markdown","e0146d67":"markdown","3a08d48d":"markdown","65970fbe":"markdown","fcf78989":"markdown","f051ab8b":"markdown","97c0e55a":"markdown","cb039f9a":"markdown","ba4c425c":"markdown","e64241a4":"markdown","542f4458":"markdown","17f5da0b":"markdown","a83e3b1a":"markdown","cf17ae84":"markdown"},"source":{"c023e223":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import KFold\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import IncrementalPCA\n\nimport statsmodels.api as sm  \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","306d58ab":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_colwidth', 100)\npd.set_option('max_info_columns',200)","1e61d375":"covid19_district_data = pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/districts.csv\")","cd986e9e":"covid19_district_data.info()","24c4320e":"covid19_district_data['District'].nunique()","e494ee0a":"covid19_district_data.head()","b43d2a85":"from datetime import datetime, timedelta\ntoday = datetime.today().strftime(\"%Y-%m-%d\")","485044e6":"covid_19_district_agg = covid19_district_data[(covid19_district_data['Date'] == today)][['District','Confirmed','Recovered','Deceased','Other','Tested']]","6e8ef036":"covid_19_district_agg.head()","65b67262":"covid_19_district_agg['Confirmed'].sum()","73e4ffef":"census_2011 = pd.read_csv(\"..\/input\/india-census\/india-districts-census-2011.csv\",engine='python')","a268c40f":"census_2011.head()","52d9bfd2":"old_dict = {\"Ahmedabad\":\"Ahmadabad\",\"Ahmednagar\":\"Ahmadnagar\",\"Amroha\":\"Jyotiba Phule Nagar\",\"Angul\":\"Anugul\",\"Ayodhya\":\"Faizabad\",\"Bagalkote\" :\"Bagalkot\",\"Balasore\":\"Baleshwar\",\"Ballari\":\"Bellary\",\"Banaskantha\":\"Banas Kantha\",\"Bandipora\":\"Bandipore\",\"Barabanki\":\"Bara Banki\",\"Baramulla\":\"Baramula\",\"Beed\":\"Bid\",\"Belagavi\":\"Belgaum\",\"Bengaluru Rural\":\"Bangalore Rural\",\"Bengaluru Urban\":\"Bangalore\",\"Bhadohi\":\"Sant Ravidas Nagar (Bhadohi)\",\"Boudh\":\"Baudh\",\"Budgam\":\"Badgam\",\"Buldhana\":\"Buldana\",\"Chamarajanagara\":\"Chamarajanagar\",\"Dadra and Nagar Haveli\":\"Dadra AND Nagar Haveli\",\"Dahod\":\"Dohad\",\"Dang\":\"The Dangs\",\"Darjeeling\":\"Darjiling\",\"Delhi\":\"New Delhi\",\"Deogarh\":\"Deoghar\",\"Dholpur\":\"Dhaulpur\",\"East Champaran\":\"Purba Champaran\",\"East Sikkim\":\"East District\",\"East Singhbhum\":\"Purbi Singhbhum\",\"Ferozepur\":\"Firozpur\",\"Gondia\":\"Gondiya\",\"Gurugram\":\"Gurgaon\",\"Haridwar\":\"Hardwar\",\"Hathras\":\"Mahamaya Nagar\",\"Hooghly\":\"Hugli\",\"Howrah\":\"Haora\",\"Jagatsinghpur\":\"Jagatsinghapur\",\"Jajpur\":\"Jajapur\",\"Jalore\":\"Jalor\",\"Janjgir Champa\":\"Janjgir - Champa\",\"Jhunjhunu\":\"Jhunjhunun\",\"Kaimur\":\"Kaimur (Bhabua)\",\"Kalaburagi\":\"Gulbarga\",\"Kanyakumari\":\"Kanniyakumari\",\"Kasganj\":\"Kanshiram Nagar\",\"Khandwa\":\"Khandwa (East Nimar),\",\"Khargone\":\"Khargone (West Nimar)\",\"Koderma\":\"Kodarma\",\"Kutch\":\"Kachchh\",\"Lahaul and Spiti\":\"Lahul AND Spiti\",\"Lakhimpur Kheri\":\"Kheri\",\"Leh\":\"Leh(Ladakh)\",\"Maharajganj\":\"Mahrajganj\",\"Malda\":\"Maldah\",\"Mehsana\":\"Mahesana\",\"Mysuru\":\"Mysore\",\"Narsinghpur\":\"Narsimhapur\",\"Nilgiris\":\"The Nilgiris\",\"North 24 Parganas\":\"North Twenty Four Parganas\",\"North Sikkim\":\"North District\",\"Nuh\":\"Mewat\",\"Panchmahal\":\"Panch Mahals\",\"Pauri Garhwal\":\"Garhwal\",\"Prayagraj\":\"Allahabad\",\"Puducherry\":\"PONDICHERRY\",\"Purulia\":\"Puruliya\",\"Raigad\":\"Raigarh\",\"S.A.S. Nagar\":\"Sahibzada Ajit Singh Nagar\",\"S.P.S. Nellore\":\"Sri Potti Sriramulu Nellore\",\"Sabarkantha\":\"Sabar Kantha\",\"Shivamogga\":\"Shimoga\",\"Shopiyan\":\"Shupiyan\",\"South 24 Parganas\":\"South Twenty Four Parganas\",\"South Sikkim\":\"South District\",\"Sri Muktsar Sahib\":\"Muktsar\",\"Tengnoupal\":\"Chandel\",\"Tumakuru\":\"Tumkur\",\"Vijayapura\":\"Bijapur\",\"West Champaran\":\"Pashchim Champaran\",\"West Sikkim\":\"West District\",\"West Singhbhum\":\"Pashchimi Singhbhum\",\"Y.S.R. Kadap\":\"Y.S.R\"}","540c9840":"new_dict = dict([(value, key) for key, value in old_dict.items()]) ","992f1e64":"census_2011['District name'].replace(new_dict,inplace=True)","0815d1cf":"final_df = pd.merge(census_2011, covid_19_district_agg, left_on=['District name'], right_on=['District'],how='inner')","d95478ca":"final_df.drop(['District code','State name','District'],axis=1,inplace=True)","4449e739":"final_df.drop(['Recovered','Deceased','Other','Tested'],axis=1,inplace=True)","c40166c5":"final_df.head()","151794e7":"final_df.shape","1d65979d":"sns.distplot(final_df['Confirmed'],)","9e5a7aa5":"pd.Series(final_df['Confirmed']).skew()","d4465e9c":"transform_confirmed_case = np.log(final_df['Confirmed']+1)\n\npd.Series(transform_confirmed_case).skew()","190d3160":"sns.distplot(transform_confirmed_case)","5e144cfb":"final_df['Confirmed'] = np.log(final_df['Confirmed']+1)","3663657f":"df = final_df.drop('District name',axis=1)","888c01e0":"final_df.head()","77c56c9e":"for col in df.columns[:-1]:\n    df[col] = np.log(df[col]+1)","d4e9913c":"np.random.seed(0)\ndf_train, df_test = train_test_split(df, train_size = 0.7, test_size = 0.3, random_state = 100)","4ff68228":"df_train.shape","100bfdae":"scale_cols = [col for col in df_train.columns if ((df_train[col].max()) + (df_train[col].min())) > 1]","3f3301ef":"len(scale_cols)","ec5ff996":"df_train[scale_cols].describe()","56705388":"scaler = MinMaxScaler()","b8fb213e":"df_train[scale_cols] = scaler.fit_transform(df_train[scale_cols])","676040de":"df_train.describe()","d7315829":"y_train = df_train.pop('Confirmed')","0f6d5575":"X_train = df_train","7881dcb1":"X_train.shape","55c300af":"lm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)             # running RFE\nrfe = rfe.fit(X_train, y_train)","6fc5be65":"col = X_train.columns[rfe.support_]\ncol","5f44c8e6":"X_train_rfe = X_train[col]","04ca418f":"# linear regression\nlm = LinearRegression()\nlm.fit(X_train_rfe, y_train)\n\n# predict\ny_train_pred = lm.predict(X_train_rfe)\nround(metrics.r2_score(y_true=y_train, y_pred=y_train_pred),2)","6ae7bb35":"df_test[scale_cols] = scaler.transform(df_test[scale_cols])","4d7a2194":"y_test = df_test.pop('Confirmed')","ce464f53":"X_test = df_test[col]","0ffdd889":"X_test.describe()","d403187d":"y_pred = lm.predict(X_test)\nr_squared = metrics.r2_score(y_test, y_pred)\nround(r_squared,2)","42ec7cb6":"\nmodel_parameters = list(lm.coef_)\nmodel_parameters.insert(0, lm.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X_train_rfe.columns\ncols = cols.insert(0, \"constant\")\nfinal_list = [i for i in list(zip(cols, model_parameters)) if i[1] != 0]\nsorted(final_list, key = lambda x: x[1]) ","697d84c2":"X_train_rfe.shape","ca46f1da":"X_test.shape","2e2fdfc6":"X_train_rfe.describe()","bea54ef5":"# set up cross validation scheme\nl_folds = KFold(n_splits = 5, shuffle = True, random_state = 101)\n\n# specify range of hyperparameters\nl_params = {'alpha': [0.0001,0.0004,0.0005,0.0008,0.001,0.01, 1.0, 5.0, 10.0]}\n\n# grid search\n# lasso model\nl_model = Lasso(max_iter=1000000)\nl_model_cv = GridSearchCV(estimator = l_model, param_grid = l_params, \n                        scoring= 'r2', \n                        cv = l_folds, \n                        return_train_score=True,\n                          verbose = 1)            \nl_model_cv.fit(X_train_rfe, y_train) ","289ae12e":"l_cv_results = pd.DataFrame(l_model_cv.cv_results_)","ff2b49ff":"l_cv_results['test_train_diff'] = l_cv_results['mean_train_score'] - l_cv_results['mean_test_score']\n\nl_cv_results[['param_alpha','mean_test_score','mean_train_score','test_train_diff']]","f5cbd1ca":"# plot\nl_cv_results['param_alpha'] = l_cv_results['param_alpha'].astype('float32')\nplt.plot(l_cv_results['param_alpha'], l_cv_results['mean_train_score'])\nplt.plot(l_cv_results['param_alpha'], l_cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('r2 score')\nplt.xscale('log')\nplt.show()","19af0bae":"l_model_cv.best_estimator_.alpha","45e25ae7":"from time import time","45f30d90":"lm_lasso = Lasso(alpha=l_model_cv.best_estimator_.alpha,max_iter=1000000)\nt0=time()\nlm_lasso.fit(X_train_rfe, y_train)\nprint (\"training time:\", round(time()-t0, 3), \"s\")\n# predict\ny_train_pred = lm_lasso.predict(X_train_rfe)\nprint(\"train accuracy:\",round(metrics.r2_score(y_true=y_train, y_pred=y_train_pred),2))\nt1=time()\ny_test_pred = lm_lasso.predict(X_test)\nprint (\"predict time:\", round(time()-t1, 3), \"s\")\nprint(\"test accuracy:\",round(metrics.r2_score(y_true=y_test, y_pred=y_test_pred),2))","3238d075":"# lasso model parameters\nmodel_parameters = list(lm_lasso.coef_)\nmodel_parameters.insert(0, lm_lasso.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X_train_rfe.columns\ncols = cols.insert(0, \"constant\")\nfinal_list = [i for i in list(zip(cols, model_parameters)) if i[1] != 0]","f399126a":"len(final_list)","c40caf4c":"sorted(final_list, key = lambda x: x[1])","7fc19341":"# set up cross validation scheme\nfolds = KFold(n_splits = 5, shuffle = True, random_state = 105)\n\n# specify range of hyperparameters\nparams = {'alpha': [0.0001,0.0004,0.0005,0.0008,0.001,0.01, 1.0, 5.0, 10.0,50.0,100.0]}\n\n# grid search\n# lasso model\nmodel = Ridge()\nmodel_cv = GridSearchCV(estimator = model, param_grid = params, \n                        scoring= 'r2', \n                        cv = folds, \n                        return_train_score=True, verbose = 1)            \nmodel_cv.fit(X_train_rfe, y_train) ","0c30dab3":"cv_results = pd.DataFrame(model_cv.cv_results_)","a5c02acf":"cv_results['test_train_diff'] = cv_results['mean_train_score'] - cv_results['mean_test_score']\n\ncv_results[['param_alpha','mean_test_score','mean_train_score','test_train_diff']]","110ff4af":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('r2 score')\nplt.title(\"r2 score and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","44c57ee9":"model_cv.best_estimator_.alpha","2b1220ff":"#alpha = 1000\nridge = Ridge(alpha=model_cv.best_estimator_.alpha)\n\nridge_lm = ridge.fit(X_train_rfe, y_train)\n# predict\ny_train_pred = ridge_lm.predict(X_train_rfe)\nprint(round(metrics.r2_score(y_true=y_train, y_pred=y_train_pred),2))\ny_test_pred = ridge_lm.predict(X_test)\nprint(round(metrics.r2_score(y_true=y_test, y_pred=y_test_pred),2))","a6d7f922":"Running ridge using best optimal parameter.","e79acbbe":"Linear Regression model parameters","81345b78":"Running lasso using best optimal parameter","62f56bea":"## Doing log transformation for each column ","6e8a0dcd":"## Ridge","e0146d67":"## Scaling","3a08d48d":"## Removing skeweness of target column","65970fbe":"# Advance Regression\n## Lasso","fcf78989":"### Building Model using Linear regression","f051ab8b":"# Model Building","97c0e55a":"# Top Census's variable influencing covid19 in India(sorted order) are:\n* Ownership_Owned_Households ---------- How many people own the house they live in -------- Negatively Influence\n* Population -------------------------- District Population -------------------------------- Positively Influence\n* Households_with_Internet ------------ House having internet ----------------------------- Positively Influence","cb039f9a":"## GridSeachCV to find optimal hyper-parameter","ba4c425c":"## RFE for feature selection","e64241a4":"## Making Prediction","542f4458":"## Dropping some columns","17f5da0b":"## Mapping changed\/misspelled district names correctly in the census and covid dataset.","a83e3b1a":"### Divide into X and Y","cf17ae84":"## Census 2011"}}