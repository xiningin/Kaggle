{"cell_type":{"c1e54771":"code","c877ac80":"code","5128e9bf":"code","4be1e14e":"code","ab9bab04":"code","cfc543df":"code","93a5410d":"code","0faa623d":"code","1c9d8cc7":"code","18920b49":"code","5456c302":"code","ed2a4c85":"code","7feb3a86":"code","ea0fa697":"code","7cfb5afe":"code","8f2a5cba":"code","c010b3a9":"code","b8947674":"markdown","edb57cf2":"markdown","cc5e32a7":"markdown","b1765cba":"markdown","a61b7884":"markdown","9fff3bda":"markdown","fc66bb35":"markdown","d5351b32":"markdown","35a052a5":"markdown","2073b3e3":"markdown","39d4c1d6":"markdown","0d11d57e":"markdown"},"source":{"c1e54771":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt","c877ac80":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5128e9bf":"train_df = pd.read_csv('\/kaggle\/input\/breast-cancer-classification\/train.csv')\ntrain_df","4be1e14e":"train_df.info()","ab9bab04":"x_train = train_df.drop(['Unnamed: 32','Id','id','diagnosis'],axis = 1)\nx_train","cfc543df":"y_train = train_df.diagnosis    \n\ny_tr_countplot = sns.countplot(y_train, label=\"Count\") \nB, M = y_train.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","93a5410d":"f,ax = plt.subplots(figsize=(18, 18))\ncorr_mat = sns.heatmap(x_train.corr(), annot=False, linewidths=.5, fmt= '.1f',ax=ax)","0faa623d":"from sklearn.svm import SVC\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import RFECV\n\n# Create the RFE object and compute a cross-validated score.\nsvc = SVC(kernel='linear')\nrfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), scoring='accuracy')\nrfecv.fit(x_train, y_train)\n\nprint(\"Optimal number of features : %d\" % rfecv.n_features_)\n\n# Plot number of Features Vs Cross-validation scores\nplt.figure()\nplt.xlabel(\"Number of features selected\")\nplt.ylabel(\"Cross validation score (nb of correct classifications)\")\nplt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\nplt.show()","1c9d8cc7":"FEATURES = list(x_train.columns[rfecv.support_])\nprint('Best features :', FEATURES)","18920b49":"f,ax = plt.subplots(figsize=(12, 12))\ncorr_mat = sns.heatmap(x_train[FEATURES].corr(), annot=False, linewidths=.5, fmt= '.1f',ax=ax)","5456c302":"from sklearn.preprocessing import StandardScaler\n\ndef preprocess(X):\n    #extracting chosen features\n    X = X[FEATURES]\n    #Standardizing Features\n    sc = StandardScaler()\n    X = sc.fit_transform(X)\n    return X\n\nx_train = preprocess(x_train)\nx_train","ed2a4c85":"#Support Vector Machines\nfrom sklearn.svm import SVC\n\nSV = SVC(probability=True, random_state=0) \nSV.fit(x_train, y_train)\nprint('SVM Classifier Training Accuracy:', SV.score(x_train, y_train))","7feb3a86":"#SVM : with Hyper Parameters Tuning\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nSV_0 = SVC(probability=True, random_state=0)\n\nparams = {'C': [0.1, 1, 10, 100], \n          'gamma': [1, 0.1, 0.01, 0.001], \n          'kernel': ['rbf', 'poly', 'linear']}\n\nSV_1 = GridSearchCV(SV_0, param_grid=params, n_jobs=-1)\nSV_1.fit(x_train,y_train)\n\nprint(\"Best Hyper Parameters:\\n\",SV_1.best_params_)\n\nprint('SVM Classifier Training Accuracy:', SV_1.score(x_train, y_train))","ea0fa697":"test_df = pd.read_csv('\/kaggle\/input\/breast-cancer-classification\/test.csv')\nx_test = test_df.drop(['Unnamed: 32','Id','id'],axis = 1)\nx_test = preprocess(x_test)\nx_test","7cfb5afe":"y_pred = pd.DataFrame(SV_1.predict(x_test), columns=['diagnosis'])","8f2a5cba":"submission_df = pd.DataFrame({'Id': test_df['Id'], 'diagnosis': y_pred['diagnosis']})\nsubmission_df","c010b3a9":"submission_df.to_csv(\"bcc.csv\", index=False)","b8947674":"# 3. Explore Training Data","edb57cf2":"`x_train` : contains features<br>\n`y_train` : contains labels","cc5e32a7":"## Correlation martix of chosen features","b1765cba":"# 7. SVM Model","a61b7884":"# 5. Feature Selection\n## Recursive feature elimination with cross-validation","9fff3bda":"# 8. Predictions","fc66bb35":"# 4. Correlation Matrix","d5351b32":"Dropping columns `Unnamed: 32`,`Id`,`id`,`diagnosis` since they are not useful for us. Remaining columns don't have any missing values.","35a052a5":"# 2. Load Training Data","2073b3e3":"Our goal is to predict whether the tumor is Benign (0) or Malignant (1). ","39d4c1d6":"# 1. Import Packages","0d11d57e":"# 6. Data Preprocessing"}}