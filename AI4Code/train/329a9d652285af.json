{"cell_type":{"9b034ed8":"code","3e690a5a":"code","9695bb82":"code","59dcc669":"code","84683738":"code","42b1039e":"code","ebd07f61":"code","eca23039":"code","4ac6dab8":"code","169f4eed":"code","7c1c87f0":"code","c6fbbf95":"code","6cba2b94":"code","ff07be8b":"code","ca546c75":"code","5c9293b2":"code","226b133e":"code","96dadf7e":"code","325ccc42":"code","62569e1e":"code","3c6d96fd":"code","7ba5ad38":"code","4b652897":"code","4c346c93":"code","459928ac":"code","092be2fe":"code","adc8dfa0":"code","dcbcd210":"code","e30a1dec":"code","ba87c61b":"code","d4aec33d":"code","3c3ca24f":"code","d6a498e5":"code","ea979100":"code","71a1021d":"code","955a6d90":"code","c8fbf19e":"code","1157dfc1":"code","ec66b39c":"code","d2a97c45":"markdown","5c9d8b01":"markdown","4352031a":"markdown","60b11ec6":"markdown","85250467":"markdown","76c8b8e3":"markdown","39b4ab46":"markdown","0c3eaf13":"markdown","b2eec2a2":"markdown","45f2d36b":"markdown","f65cccc7":"markdown","e90c1cdd":"markdown","09fbc3fd":"markdown","af253e59":"markdown","5395db7a":"markdown","fd9d14df":"markdown","b15f8e13":"markdown","b9ef330e":"markdown","f7394bec":"markdown"},"source":{"9b034ed8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e690a5a":"data = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")\ndata_reviews = pd.read_csv(r\"\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")","9695bb82":"data.sample(5)","59dcc669":"data.info()","84683738":"data.shape[0] - data.count()\n# the below display the number of missing values in each column","42b1039e":"list(data['Installs'].unique())\n# we can approximate the number of installs to be the middle value of two categories\n# for example, if an app belong to the '50+' category under the column 'Installs', we approximate the number of installs to be 75 since the next highest category is 100+\n# while not super accurate, it is 'sufficiently' accurate","ebd07f61":"# creating a dictionary for us to replace the category to a numerical value\n# if an app belong to the '50+' category, we approximate the number of installs to be 75 since the next highest category is 100+\ninstall_replacer = {\n                    'Free' : 0,\n                    '0' : 0,\n                    '0+' : 1,\n                    '5+' : 8,\n                    '1+' : 3,\n                    '10+' : 30,\n                    '500+' : 750,\n                    '100+' : 300,\n                    '50+' : 75,\n                    '500,000,000+' : 750000000,\n                    '1,000+' : 3000,\n                    '1,000,000,000+' : 1000000000, # this is the only category where there is no mid-point value for us to approximate\n                    '100,000,000+' : 300000000,\n                    '5,000+' : 7500,\n                    '10,000,000+' : 30000000,\n                    '1,000,000+' : 3000000,\n                    '50,000+' : 75000,\n                    '100,000+' : 300000,\n                    '50,000,000+' : 75000000,\n                    '5,000,000+' : 7500000,\n                    '500,000+' : 750000,\n                    '10,000+' : 30000\n                    }","eca23039":"data['approx_number_of_installs'] = data['Installs'].replace(install_replacer)\ndata['approx_number_of_installs'] = data['approx_number_of_installs'].astype('int64')","4ac6dab8":"data['Price'].unique() \n# two problematic data points ---> 'Everyone' and '0'","169f4eed":"data['price_revised'] = data['Price'].replace({'Everyone' : '$0'}) # replace 'Everyone' with '$0'\ndata['price_revised'] = data['price_revised'].str.strip('$')\ndata['price_revised'] = data['price_revised'].astype('float64') # change the datatype to something more appropriate for this column ","7c1c87f0":"data['Reviews'].replace({'3.0M' : 3000000}, inplace=True)\ndata['Reviews'] = data['Reviews'].astype('int64') # change the datatype to something more appropriate for this column ","c6fbbf95":"data_final = data.drop(['Size','Installs','Last Updated','Current Ver','Android Ver'], axis=1) \ndata_final","6cba2b94":"data_final.info()","ff07be8b":"data_reviews.head() \n# This file contains the first 'most relevant' 100 reviews for each app","ca546c75":"data_reviews.info()","5c9293b2":"data_reviews['Sentiment'].unique()","226b133e":"data_reviews['Sentiment_Value'] = data_reviews['Sentiment'].replace({'Positive' : 1,\n                                                                     np.NaN : 0,\n                                                                     'Neutral' : 0,\n                                                                     'Negative' : -1\n                                                                    })\ndata_reviews['Sentiment_Value'] = data_reviews['Sentiment_Value'].astype('float64')","96dadf7e":"data_reviews_group = data_reviews.groupby('App').mean().reset_index().round(2) \ndata_reviews_group.rename(columns={'Sentiment_Polarity' : 'Average_Sentiment_Polarity',\n                                   'Sentiment_Subjectivity' : 'Average_Sentiment_Subjectivity',\n                                   'Sentiment_Value' : 'Average_Sentiment_Value'\n                                  }, inplace=True)\ndata_reviews_group","325ccc42":"# The final dataset ('data_f') is a combination of the main dataset and the review dataset\ndata_f = data_final.merge(data_reviews_group, left_on='App', right_on='App', how='left')\ndata_f","62569e1e":"data_f['Content Rating'].unique()","3c6d96fd":"data_f['Category'].unique() # there is an incorrect data point , i.e. '1.9' - look near the bottom of the results","7ba5ad38":"data_f['Genres'].unique() # there is an incorrect data point , i.e. 'February 11, 2018' - look near the bottom of the results","4b652897":"data_f[data_f['Category'] == '1.9']","4c346c93":"data_f[data_f['Genres'] == 'February 11, 2018'] # this particular row item ('App'=='Life Made WI-Fi Touchscreen Photo Frame') is problematic where there are several incorrect data points ('Genres','Category', 'Price') ","459928ac":"index_to_drop = data_f[data_f['App'] == 'Life Made WI-Fi Touchscreen Photo Frame'].index[0]\ndata_f.drop(labels=index_to_drop, axis='index', inplace=True) ","092be2fe":"data_f.info()","adc8dfa0":"data_f['Category'] = data_f['Category'].str.title().str.replace(\"_\",' ')\ndata_f['approx_number_of_installs_in_M'] = data_f['approx_number_of_installs'] \/ 1000000","dcbcd210":"data_f.head() # this is the finalized dataset to be used for EDA and Visualization","e30a1dec":"category_data = data_f.groupby('Category').agg({'Rating':'mean', 'approx_number_of_installs_in_M' : 'sum'}).rename(\\\ncolumns={'Rating':'Average Rating', 'approx_number_of_installs_in_M':'Total Number of Installs in Millions (est.)'}).reset_index().round(1)\n\ntop_category = category_data.sort_values(by='Total Number of Installs in Millions (est.)', ascending=False).head()\nbot_category = category_data.sort_values(by='Total Number of Installs in Millions (est.)', ascending=False).tail()\n\nall_category = list(data_f['Category'].unique())\ntop_categories = list(top_category['Category'])\nnot_top_categories = [i for i in all_category if i not in top_categories]\n\nbot_categories = list(bot_category['Category'])\ntop_bot_categories = top_categories + bot_categories\n\nprint('Top 5 categories based on the number of installs (estimated)')\nprint('\\n')\nprint(top_category.to_string(index=False))\n\nprint('\\n')\nprint('===================================')\nprint('\\n')\n\nprint('Observations:')\nprint('#1 Gaming, communication and productivity apps are top 3 most popular type of apps in terms of the number of installs (estimated)')\nprint('#2 In terms of average rating by category, all the categories scored fairly similarly')","ba87c61b":"a = pd.crosstab(data_f.Category, data_f.Type, margins=True, normalize='index') * 100 \na.rename(columns=lambda x: x + ' %', inplace=True)\n\nb = pd.crosstab(data_f.Category, data_f.Type)\nb.rename(columns=lambda x: f'Number of {x} apps', inplace=True )\n\nc = pd.concat([a.round(1), b], axis=1)\n\nprint(\"Categories with the highest proportion of free apps\")\nprint(c.sort_values('Free %', ascending=False).head())\n\nprint('\\n')\nprint('=============')\nprint('\\n')\n\nprint(\"Categories with the lowest proportion of free apps\")\nprint(c.sort_values('Free %', ascending=False).tail())","d4aec33d":"a = data_f.sort_values(by='Average_Sentiment_Value', ascending=False).head().to_string(index=False)\nprint('Top 5 Apps with highest average sentiment value')\nprint('\\n')\nprint(a)","3c3ca24f":"print('High Level Statistics on App Ratings')\nprint('===================================')\nprint(data_f.Rating.describe())\n# The average rating across all the apps is 4.2","d6a498e5":"data_subset = data_f[data_f['Category'].isin(top_categories)]\nfig = px.sunburst(data_subset, path=['Category','Genres'], values='approx_number_of_installs_in_M',width=750, height=750)\nfig.update_layout(title_text='Top 5 Categories - Breakdown of Installs', title_font_size=20)\nfig.show()","ea979100":"fig = px.sunburst(data_f, path=['Content Rating','Category'], values='approx_number_of_installs_in_M', width=750, height=750)\nfig.update_layout(title_text='Number of Installs by Content Rating', title_font_size=20)\nfig.show()","71a1021d":"data_f_non_nan = data_f[data_f['Type'].isin(['Free','Paid'])]\nfig = px.histogram(data_f_non_nan, x='Rating', marginal='box', color='Type', opacity=0.5)\nfig.update_layout(title_text='Distribution of Ratings Across All Apps', title_font_size=20)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","955a6d90":"data_f_ex_top_cat = data_f[data_f['Category'].isin(not_top_categories)]\nfig = px.histogram(data_f_ex_top_cat, x='Rating', marginal='box')\nfig.update_layout(title_text='Distribution of Ratings Across All Apps That Are Not In The Top 5 Categories', title_font_size=20)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","c8fbf19e":"data_f_top_cat = data_f[data_f['Category'].isin(top_categories)]\nfig = px.histogram(data_f_top_cat, x='Rating', marginal='box')\nfig.update_layout(title_text='Distribution of Ratings Across All Apps That Are In The Top 5 Categories', title_font_size=20)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","1157dfc1":"data_f_paid_top_cat = data_f[(data_f['Category'].isin(top_categories)) & (data_f['Type'] == 'Paid')]\nfig = px.scatter(data_f_paid_top_cat, x='Rating', y ='price_revised', facet_col='Category', color='Category', marginal_x='histogram', labels={'price_revised':'Price'})\nfig.update_layout(title_text='Paid Apps in Top Categories - Distribution of Ratings against Price', title_font_size=20)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","ec66b39c":"data_f_free_top_cat = data_f[(data_f['Category'].isin(top_categories)) & (data_f['Type'] == 'Free')]\nfig = px.histogram(data_f_free_top_cat, x='Rating', facet_col='Category', color='Category')\nfig.update_layout(title_text='Free Apps in Top Categories - Distribution of Rating', title_font_size=20)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","d2a97c45":"**Commentary:**\n* Distribution of apps' rating in the top 5 categories is largely similar to the distribution of apps' rating that are not in the top 5 categories","5c9d8b01":"**Commentary:**\n* Most of the apps installed (~60%) are rated 'Everyone'","4352031a":"# Top 5 Categories - Distribution of Apps' Rating","60b11ec6":"# Preparation of Final Dataset - Merging Reviews & Main Datasets","85250467":"In this data cleaning\/transformation process, there are 3 attributes which are of interest to me and required a bit of work. The three columns are as follows:\n\n* Installs -> This is an interesting datapoint. Unfortunately, the provided data is in categorical format. \n\n* Price -> The values are in string format and there is outliers\n   \n* Reviews -> The values are in string format and there is outliers","76c8b8e3":"# Distribution of Ratings Against Price","39b4ab46":"# Distribution of Apps' Rating Across All Apps","0c3eaf13":" # Distribution of Free Apps' Ratings in Top Categories Broken by Category","b2eec2a2":"# Pulling in Data","45f2d36b":"# Data Cleaning & Transformation - Main Dataset","f65cccc7":"**Commentary:**\n* Distribution of apps' rating is largely similar betweenn paid and free apps","e90c1cdd":"# Data Cleaning & Transformation - Data Reviews","09fbc3fd":"# Installs by Content Rating","af253e59":"# Basic Exploration","5395db7a":"# Visualization","fd9d14df":"# Top 5 Categories","b15f8e13":"**Commentary:**\n* Among the top 5 categories, 'Game' category dominated the number of installs\n* In the 'Game' category, the following genre 1)Action 2)Arcade 3)Casual attracted the most number of installs ","b9ef330e":"# EDA on Final Dataset","f7394bec":"# Not in Top 5 Categories - Distribution of Apps' Ratings"}}