{"cell_type":{"041ad826":"code","178e07cd":"code","34a19510":"code","91f464d7":"code","da208cc7":"code","edff01e6":"code","74982394":"code","9f066d66":"code","56eeeaea":"code","fa78fe4b":"code","b3b35cb4":"code","8a0c2c95":"code","d68d9f2e":"code","32cff60f":"code","4cffa098":"code","3981bc77":"code","36e0703b":"code","1066a87f":"code","8bbdbb6d":"code","fc331665":"code","43bf0dd9":"code","217067fb":"code","37ca42ba":"code","e788ead9":"code","f6f92f0c":"code","279014c2":"code","0ab5d754":"code","f897e7f7":"code","40a23324":"code","c64f85de":"code","e0124221":"code","ed50ac48":"code","395d4a28":"code","b3743257":"code","81a82dad":"code","e6b986fa":"code","b12b28d7":"code","2d3be0f4":"code","432ad03e":"code","e3bec5ce":"code","89681380":"code","288c861b":"code","75e36f1b":"code","8642c4df":"code","f8209e18":"code","1ba49d63":"code","2601703f":"code","68ae98c3":"code","00f6c528":"code","158bd23e":"code","250021e0":"code","958ed84a":"code","6bdfd319":"code","bcfbd3b1":"code","7b76a86e":"code","b4b21b40":"code","c3e4d8d3":"code","10acc12d":"markdown","933e6d11":"markdown","ca3f85ce":"markdown","76f9fd45":"markdown","c20c1951":"markdown","4116c19e":"markdown","6f2ada20":"markdown","5041c58d":"markdown","129eaec6":"markdown","48a713b6":"markdown","4cd1224d":"markdown","9868c94d":"markdown","d5a01041":"markdown","a3c1d427":"markdown","f332fa16":"markdown","5afc204e":"markdown","b3c7fda4":"markdown","c2b885c6":"markdown","b5a72bd7":"markdown","6cafb9cb":"markdown","8fa37b19":"markdown","7606f47b":"markdown","c4ed9879":"markdown","4b2582b9":"markdown","e28d81a7":"markdown","d8b04339":"markdown","fd8293a9":"markdown","f713ed3c":"markdown","6b78df98":"markdown","7c149878":"markdown","04e77d36":"markdown","97fe5201":"markdown"},"source":{"041ad826":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set()","178e07cd":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","34a19510":"train_data.head()","91f464d7":"train_data.isnull().sum()","da208cc7":"sns.heatmap(train_data.corr(), annot=True, linewidths=.5, cmap=\"Blues\") \\\n    .set(title='Correlation heatmap');","edff01e6":"figure, axis = plt.subplots(1, 2, figsize=(13,5))\n\nsns.histplot(train_data, x=\"Age\", hue=\"Sex\", multiple=\"stack\", ax=axis[0]) \\\n    .set(title='Passengers by age and sex')\n\nsns.histplot(train_data.query('Survived == 1'), x=\"Age\", hue=\"Sex\", multiple=\"stack\", hue_order = ['male','female'], ax=axis[1]) \\\n    .set(title='Survived passengers by age and sex');","74982394":"figure, axis = plt.subplots(1, 2, figsize=(10,5))\n\nsns.histplot(x=\"Sex\", data=train_data, ax=axis[0], hue='Sex', multiple=\"stack\",) \\\n    .set(title='Distribution of passengers by gender')\n\nsns.histplot(x=\"Sex\", data=train_data.query('Survived == 1'), hue='Sex', multiple=\"stack\", hue_order = ['male','female'], ax=axis[1]) \\\n    .invert_xaxis() \nplt.title(\"Distribution of survived passengers by gender\");","9f066d66":"figure, axis = plt.subplots(1, 2, figsize=(10,5))\n\nsns.histplot(data=train_data, x=\"Pclass\", hue='Sex', multiple=\"stack\", ax=axis[0]) \\\n    .set(title='Passengers in each class by sex')\n\nsns.histplot(data=train_data.query(\"Survived == 1\"), x=\"Pclass\", hue=\"Sex\", hue_order = ['male','female'], ax=axis[1], multiple=\"stack\") \\\n    .set(title='Survived passengers in each class by sex');","56eeeaea":"train_data.Embarked.value_counts()","fa78fe4b":"# Filling 2 missing values with most frequent value\ntrain_data.Embarked.fillna('S',inplace=True)","b3b35cb4":"figure, axis = plt.subplots(1, 2, figsize=(10,5))\n\nsns.countplot(data=train_data, x=\"Embarked\", ax=axis[0]) \\\n    .set(title='Passengers by embarked')\n\nsns.countplot(data=train_data.query('Survived == 1'), x=\"Embarked\", ax=axis[1]) \\\n    .set(title='Survived passengers by embarked');","8a0c2c95":"sns.catplot(x=\"Pclass\", col=\"Embarked\", data = train_data, kind=\"count\", height=7)\nplt.suptitle('Pclass count by embarked',fontsize=18)","d68d9f2e":"figure, axis = plt.subplots(2, 3, figsize=(15,7))\nplt.subplots_adjust(wspace = 0.4, hspace= 0.6)\n\ntrain_data['Family_size'] = train_data.Parch + train_data.SibSp\n\nfor i in range(0,2):\n    for j, column in enumerate(['SibSp','Parch','Family_size']):\n        if i == 0:\n            sns.histplot(data=train_data, x=column, hue='Sex', multiple=\"stack\", ax=axis[i, j]) \\\n                .set(\n                    title='{} count'.format(column),\n                    xticks=np.arange(train_data[column].min(), train_data[column].max() + 1, 1))\n        else:\n            sns.histplot(data=train_data.query('Survived == 1'), x=column, hue='Sex', multiple=\"stack\", ax=axis[i, j]) \\\n                .set(\n                    title='Survived {} count'.format(column),\n                    xticks=np.arange(train_data[column].min(), train_data[column].max() + 1, 1))","32cff60f":"train_data.isnull().sum().sort_values(ascending=False).head()","4cffa098":"train_data.corr().Age.apply(abs).sort_values(ascending=False)","3981bc77":"train_data.groupby(['Sex','Pclass']).agg({'Age': 'median'}).rename(columns={'Age': 'Median age'})","36e0703b":"train_data.Age = train_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\ntest_data.Age = test_data.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","1066a87f":"train_data.isnull().sum().sort_values(ascending=False).head()","8bbdbb6d":"most_frequent_embarked = train_data.Embarked.value_counts().index[0]\n\ntrain_data.Embarked.fillna(most_frequent_embarked, inplace=True)","fc331665":"# \"M\" is missing\ntrain_data['Deck'] = train_data.Cabin.apply(lambda x: \"M\" if pd.isnull(x) else x[0]) \ntest_data['Deck'] = test_data.Cabin.apply(lambda x: \"M\" if pd.isnull(x) else x[0]) ","43bf0dd9":"train_data.Deck.value_counts()","217067fb":"train_data.groupby(['Deck','Pclass']).agg({'PassengerId': 'count'})","37ca42ba":"idx = train_data[train_data['Deck'] == 'T'].index\ntrain_data.loc[idx, 'Deck'] = 'A'","e788ead9":"test_data.isnull().sum().sort_values(ascending=False).head()","f6f92f0c":"test_data[test_data['Fare'].isnull()]","279014c2":"# 3 class, 0 Parch, 0 SibSp\nmedian_fare = test_data.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\n\ntest_data.Fare.fillna(median_fare, inplace=True)","0ab5d754":"train_data['Family_size'] = train_data.SibSp + train_data.Parch + 1\ntest_data['Family_size'] = test_data.SibSp + test_data.Parch + 1","f897e7f7":"train_data['Fare_Per_Family'] = train_data.Fare \/ train_data.Family_size\ntest_data['Fare_Per_Family'] = test_data.Fare \/ test_data.Family_size","40a23324":"train_data['Age_Class'] = train_data.Age * train_data.Pclass\ntest_data['Age_Class'] = test_data.Age * test_data.Pclass","c64f85de":"train_data['Title'] = train_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntest_data['Title'] = test_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)","e0124221":"def replace_title(title):\n    if title in ['Capt', 'Col', 'Dr', 'Major', 'Rev', 'Don', 'Sir', 'Jonkheer', 'Master', 'Mr']:\n        return 'Mr'\n    elif title in ['Ms', 'Mlle', 'Miss']:\n        return 'Miss'\n    elif title in ['Mme', 'Lady', 'Countess', 'Dona', 'Mrs']:\n        return 'Mrs'\n    else:\n        return np.nan","ed50ac48":"train_data.Title = train_data.Title.apply(lambda x: replace_title(x))\ntest_data.Title = test_data.Title.apply(lambda x: replace_title(x))","395d4a28":"train_data['Is_Married'] = 0\ntrain_data['Is_Married'].loc[train_data['Title'] == 'Mrs'] = 1\n\ntest_data['Is_Married'] = 0\ntest_data['Is_Married'].loc[test_data['Title'] == 'Mrs'] = 1","b3743257":"train_data.head()","81a82dad":"def numeric_to_group(column, bins):\n    return pd.cut(column, bins=bins, labels=np.arange(1, bins + 1, 1))","e6b986fa":"features_to_convert = ['SibSp', 'Parch', 'Family_size', 'Fare_Per_Family', 'Age', 'Fare', 'Age_Class']\n\nfor feature in features_to_convert:\n    train_data[feature] = numeric_to_group(train_data[feature], 4)\n    test_data[feature] = numeric_to_group(test_data[feature], 4)\n\ntrain_data.head()","b12b28d7":"train_data.set_index(train_data.PassengerId, inplace=True)\ntest_data.set_index(test_data.PassengerId, inplace=True)\n\ncolumn_to_drop = ['PassengerId', 'Name', 'Ticket', 'Cabin']\n\ntrain_data.drop(columns=column_to_drop, inplace=True)\ntest_data.drop(columns=column_to_drop, inplace=True)","2d3be0f4":"from sklearn.preprocessing import LabelEncoder","432ad03e":"features_to_encode = ['Sex', 'Embarked', 'Title', 'Deck']\n\nfor feature in features_to_encode:\n    train_data[feature] = LabelEncoder().fit_transform(train_data[feature])  \n    test_data[feature] = LabelEncoder().fit_transform(test_data[feature])  ","e3bec5ce":"train_data.head()","89681380":"y = train_data.Survived","288c861b":"train_data = pd.get_dummies(train_data, columns=train_data.columns)\ntest_data = pd.get_dummies(test_data, columns=test_data.columns)","75e36f1b":"from sklearn.preprocessing import StandardScaler","8642c4df":"train_data = pd.DataFrame(StandardScaler().fit_transform(train_data.values), columns=train_data.columns, index=train_data.index)\ntest_data = pd.DataFrame(StandardScaler().fit_transform(test_data.values), columns=test_data.columns, index=test_data.index)","f8209e18":"train_data.head()","1ba49d63":"X = train_data.drop(columns=['Survived_0', 'Survived_1'])","2601703f":"from sklearn.model_selection import train_test_split, RandomizedSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, roc_curve, auc","68ae98c3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","00f6c528":"from sklearn.ensemble import RandomForestClassifier","158bd23e":"rf_clf = RandomForestClassifier()","250021e0":"params = {\n    'n_estimators': range(10, 300, 30),\n    'max_depth': range(1, 10, 2),\n    'min_samples_leaf': range(1, 30, 2),\n    'min_samples_split': range(2, 50, 2)\n}","958ed84a":"search = RandomizedSearchCV(rf_clf, params, cv=5, n_jobs=-1, random_state=42)\nsearch.fit(X_train, y_train)\nprint(search.best_params_)\n\nbest_rf = search.best_estimator_","6bdfd319":"feature_importances_df = pd.DataFrame({\n    'features':list(X_train.columns), \n    'feature_importances': best_rf.feature_importances_},\n    index=X_train.columns) \\\n    .sort_values(by='feature_importances')","bcfbd3b1":"feature_importances_df.tail(10).plot(kind='barh', figsize=(12, 8));","7b76a86e":"y_pred_rf = best_rf.predict(X_test)\ny_predicted_prob_rf = best_rf.predict_proba(X_test)","b4b21b40":"fpr, tpr, thresholds = roc_curve(y_test, y_predicted_prob_rf[:,1])\nroc_auc= auc(fpr, tpr)\n\nrf_scores = pd.DataFrame({\n    \"Model\": \"Random forest\",\n    \"precision_score\": [precision_score(y_test, y_pred_rf)],\n    \"recall_score\": [recall_score(y_test, y_pred_rf)],\n    \"accuracy\": [best_rf.score(X_test, y_test)],\n    \"mean_cross_val_score\": [cross_val_score(best_rf, X_train, y_train, cv=5).mean()],\n    \"roc_auc\": [roc_auc],\n})\n\nrf_scores.set_index(rf_scores.Model).drop(columns='Model')","c3e4d8d3":"cm_rf = confusion_matrix(y_test, y_pred_rf)\n\nsns.heatmap(cm_rf, annot=True, linewidths=.5, cmap=\"Blues\") \\\n    .set(title='Random forest confusion matrix');","10acc12d":"### Fill null values","933e6d11":"Fill missing value based on family size and Pclass","ca3f85ce":"#### Add family related features","76f9fd45":"### Drop columns","c20c1951":"#### Cabin","4116c19e":"### Estimate model","6f2ada20":"### Convert categorial variables to int\n","5041c58d":"#### Age","129eaec6":"### SibSp and Parch","48a713b6":"### Train \/ Test split","4cd1224d":"# Titanic classification","9868c94d":"## Data Preprocessing","d5a01041":"### Pclass","a3c1d427":"#### Embarked","f332fa16":"### Embarked","5afc204e":"### Train random forest","b3c7fda4":"### Scale values","c2b885c6":"### Sex","b5a72bd7":"## Model traning","6cafb9cb":"Filling in missing age values based on Sex and higher correlation","8fa37b19":"### One hot encoding ","7606f47b":"Check null values","c4ed9879":"## Exploratory Data Analysis","4b2582b9":"### Feature Engineering","e28d81a7":"Change cabin value to deck value","d8b04339":"\"T\" deck look similar to \"A\" deck","fd8293a9":"### Correlation","f713ed3c":"#### Fare","6b78df98":"#### Add personal related features","7c149878":"Convert numeric variables to groups","04e77d36":"### Age","97fe5201":"Fill Embarked value based on the most frequent value"}}