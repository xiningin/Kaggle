{"cell_type":{"ae7d7093":"code","6612ea85":"code","be2875a6":"code","1a6658b5":"code","6d880228":"code","8e76c1e7":"code","ad957a03":"code","1c8c77fe":"code","dcdb4889":"code","3cb9a48e":"code","62a0722d":"code","8e120494":"code","077485bc":"code","0fd34844":"code","e82ae2c1":"code","b1fd7c40":"code","e999ba8f":"code","37403802":"code","13c98166":"code","941a8f88":"code","85c2071d":"code","f50bfe91":"code","f91266bb":"code","7cee2b04":"code","ba1355fa":"code","80136e70":"code","3003bd59":"code","1b4da881":"code","74799267":"markdown","765980d0":"markdown","0d942911":"markdown","106ec5e0":"markdown","b7999621":"markdown","79ad4292":"markdown","ce834f1a":"markdown","3a8d5c58":"markdown","2bce84e3":"markdown","73f5ffb3":"markdown","4bda6aa4":"markdown","59b33423":"markdown","41441a8a":"markdown","d25a1f18":"markdown","d4babbd1":"markdown","38987e14":"markdown","01e08bda":"markdown","372f2f19":"markdown","29770f5f":"markdown","b8ca0dab":"markdown","89cb4efa":"markdown","cf4fa23b":"markdown","02d589b0":"markdown","b96fede5":"markdown","dee62972":"markdown","cd57bcdc":"markdown","47c37079":"markdown","ddfc3793":"markdown","08d870ab":"markdown","2c562a7d":"markdown","6674bfe0":"markdown","d2748ea1":"markdown","33f9fb2b":"markdown"},"source":{"ae7d7093":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score","6612ea85":"df= pd.read_csv('https:\/\/raw.githubusercontent.com\/AdiPersonalWorks\/Random\/master\/student_scores%20-%20student_scores.csv')","be2875a6":"df.head()","1a6658b5":"df.tail()","6d880228":"df.isnull().sum()","8e76c1e7":"df.duplicated().sum()","ad957a03":"df.info()","1c8c77fe":"df.hist('Scores')","dcdb4889":"df.describe()","3cb9a48e":"plt.scatter(x= df['Hours'],y=df['Scores'])\nplt.xlabel('Hours')\nplt.ylabel('Scores')","62a0722d":"df[(df['Hours']>8) & (df['Scores']<80)]","8e120494":"df[(df['Hours']>8) & (df['Scores']<82)]","077485bc":"df['Scores'][(df['Hours']>8) & (df['Scores']<80)]=81","0fd34844":"plt.scatter(x= df['Hours'],y=df['Scores'])\nplt.xlabel('Hours')\nplt.ylabel('Scores')","e82ae2c1":"Predictor=['Hours']\nTargetVariable=['Scores']\nx = df[Predictor].values\ny = df[TargetVariable].values","b1fd7c40":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","e999ba8f":"from sklearn.linear_model import LinearRegression\nlr= LinearRegression()","37403802":"from sklearn.neighbors import KNeighborsRegressor\nknr = KNeighborsRegressor(n_neighbors=10)","13c98166":"lr.fit(x_train, y_train)\ntrain_prediction= lr.predict(x_train)\n\nprint('The value of slope is: ',lr.coef_)\nprint('The value of Intercept is: ',lr.intercept_)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=lr.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","941a8f88":"import copy\ndf1=copy.deepcopy(df)\npredicted_score=lr.predict(x)\ndf1['Predicted_Score']=predicted_score","85c2071d":"plt.scatter(x=df1['Hours'] , y=df1['Scores'])\nplt.plot(df1['Hours'] , df1['Predicted_Score'],color='red')\nplt.xlabel('Hours')\nplt.ylabel('Scores')\nplt.title('BEST FIT LINE')","f50bfe91":"knr.fit( x_train, y_train )\ntrain_prediction = knr.predict(x_train)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=knr.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","f91266bb":"from sklearn.preprocessing import MinMaxScaler\nPredictorScaler=MinMaxScaler()\nTargetVarScaler=MinMaxScaler()\n\n# Storing the fit object for later reference\nPredictorScalerFit=PredictorScaler.fit(x)\nTargetVarScalerFit=TargetVarScaler.fit(y)\n\n# Generating the normalized values of X and y\nx_normal=PredictorScalerFit.transform(x)\ny_normal=TargetVarScalerFit.transform(y)\n\n\n# Split the data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_normal, y_normal, test_size=0.3, random_state=42)","7cee2b04":"model= lr.fit(x_train, y_train)\ntrain_prediction= model.predict(x_train)\n\nprint('The value of slope is: ',model.coef_)\nprint('The value of Intercept is: ',model.intercept_)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=model.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","ba1355fa":"knr.fit( x_train, y_train )\ntrain_prediction = knr.predict(x_train)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=knr.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","80136e70":"from sklearn.preprocessing import StandardScaler\nPredictorScaler=StandardScaler()\nTargetVarScaler=StandardScaler()\n\n# Storing the fit object for later reference\nPredictorScalerFit=PredictorScaler.fit(x)\nTargetVarScalerFit=TargetVarScaler.fit(y)\n\n# Generating the standardized values of X and y\nx_standard=PredictorScalerFit.transform(x)\ny_standard=TargetVarScalerFit.transform(y)\n\n\n# Split the data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_standard, y_standard, test_size=0.3, random_state=42)\n","3003bd59":"model= lr.fit(x_train, y_train)\ntrain_prediction= model.predict(x_train)\n\nprint('The value of slope is: ',model.coef_)\nprint('The value of Intercept is: ',model.intercept_)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=model.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","1b4da881":"knr.fit( x_train, y_train )\ntrain_prediction = knr.predict(x_train)\n\nprint('r-squared for training data:',r2_score(train_prediction , y_train))\ntest_prediction=knr.predict(x_test)\nprint('r-squared for testing data:',r2_score(test_prediction , y_test))\n\nprint('Accuracy (MAPE): ',100- (np.mean(np.abs((y_test - test_prediction) \/ y_test)) * 100))","74799267":"#### LINEAR REGRESSION (NORMALIZED)","765980d0":"__Since the accuracy is less than the baseline linear regression, we will reject the KNN Baseline model.__","0d942911":"__Since the distribution does not show extreme skewness, predictive modeling can be conducted.__","106ec5e0":"__There is a positive correlation between Scores and Hours because there is an upward sloping trend.__","b7999621":"__Since the Accuracy is less than the linear regression baseline modeL, we will reject this model.__","79ad4292":"__Predicting the percentage of marks that a student is expeted to score based upon the number of hours they studied. It involves only two variables: Scores and Hours.__","ce834f1a":"### NORMALIZED","3a8d5c58":"#### LINEAR REGRESSION","2bce84e3":"__This point is looks farther away from the average data points so it is an outlier.__","73f5ffb3":"#### Predicted score if a student studies for 9.25 hours a day\n\nPredicted Score= 2.26138189 + 9.88145866 * Hours\n \n=> Predicted Score= 2.26138189 + 9.88145866 * 9.25 = **93.66**","4bda6aa4":"### READING THE DATASET","59b33423":"### STANDARDIZED DATA","41441a8a":"### CHECKING FOR DUPLICATE ROWS","d25a1f18":"__There are no duplicate rows and all the rows are unique.__","d4babbd1":"#### LINEAR REGRESSION (STANDARDIZED)","38987e14":"### VISUALIZING THE DISTRIBUTION OF THE TARGET VARIABLE","01e08bda":"### SPLITTING THE DATASET INTO TRAIN AND TEST SET","372f2f19":"### APPLYING DIFFERENT ALGORITHMS","29770f5f":"__Since the accuracy is less than the baseline linear regression, we will reject this model.__","b8ca0dab":"#### KNN (NORMALIZED)","89cb4efa":"### CONTEXT","cf4fa23b":"### UNDERSTANDING THE DATA TYPE OF VARIABLES","02d589b0":"__There is no missing value in the form of NaN values.__","b96fede5":"__The Score is dependant upon the Hours studied. Hence Score is the target variable and Hours is the predictor.__","dee62972":"#### KNN (STANDARDIZED)","cd57bcdc":"### BASELINE MODEL","47c37079":"__Since the Accuracy is less than the linear regression baseline modeL, we will reject this model.__","ddfc3793":"### The best model is the baseline linear regression because it has the highest accuracy.","08d870ab":"### IMPORTING THE LIBRARIES","2c562a7d":"### OUTLIER TREATMENT","6674bfe0":"### CHECKING FOR MISSING VALUES","d2748ea1":"#### KNN (BASELINE)","33f9fb2b":"__Since the accuracy is less than the baseline linear regression, we will reject the KNN (Normalized) model.__"}}