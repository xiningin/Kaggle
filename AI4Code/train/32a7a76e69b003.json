{"cell_type":{"e5b53a9a":"code","02ae8004":"code","64814e28":"code","8ce77bad":"code","7b5262be":"code","d1f55b47":"code","8f9d0f37":"code","6c260676":"code","1afe9ac9":"code","43c984fc":"code","a6a486f5":"markdown","1232fe92":"markdown","c21bcefb":"markdown","2e1be568":"markdown","43c05b29":"markdown","f6c9a2bb":"markdown","9f8ade82":"markdown","a837af93":"markdown"},"source":{"e5b53a9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02ae8004":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","64814e28":"dataset = pd.read_csv('\/kaggle\/input\/restaurantreviews\/Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)","8ce77bad":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, 1000):\n  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])\n  review = review.lower()\n  review = review.split()\n  ps = PorterStemmer()\n  all_stopwords = stopwords.words('english')\n  all_stopwords.remove('not')\n  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n  review = ' '.join(review)\n  corpus.append(review)","7b5262be":"print(corpus)","d1f55b47":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1500)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values","8f9d0f37":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","6c260676":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","1afe9ac9":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","43c984fc":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","a6a486f5":"**IMPORTING DATASET**","1232fe92":"**CLEANING TEXTS**","c21bcefb":"**IMPORTING LIBRARIES**","2e1be568":"**TRAINING NAIVE BAYES MODEL ON THE TRAINING SET**","43c05b29":"**CREATING BAG OF WORDS MODEL**","f6c9a2bb":"**MAKING THE CONFUSION MATRIX**","9f8ade82":"**PREDICTING THE TEST SET RESULTS**","a837af93":"**SPLITTING THE DATASET INTO TEST SET AND TRAINING SET**"}}