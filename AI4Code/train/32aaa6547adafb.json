{"cell_type":{"d673d108":"code","ce838cff":"code","fbea66a3":"code","0a6f83d4":"code","01f789d0":"code","935be74d":"code","f87a9e59":"code","e20b6e44":"code","2b5fff6c":"code","31108c45":"code","7c7297bb":"code","d5fbc2be":"code","a6200192":"code","81b233b5":"code","9c6bd0f9":"markdown","2df98505":"markdown","207ddd75":"markdown","2fcfc584":"markdown","cdeaaa48":"markdown","1084a120":"markdown","0af6d4bb":"markdown","99a81873":"markdown","b0ff4a6a":"markdown","ad677047":"markdown","cdb551f6":"markdown","3b0ac58a":"markdown"},"source":{"d673d108":"import pandas as pd\nimport geopandas as gpd\nimport numpy as np\n\nimport folium\nfrom folium import Marker\nfrom folium.plugins import HeatMap\nfrom branca.colormap import linear\n\nimport geopandas as gpd\nfrom geopandas.tools import geocode","ce838cff":"rus_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-russia-cases.csv')\nrus_other_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-tests-and-other.csv')\nrus_info_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/regions-info.csv')\nrus_vent_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/regions-ventilators.csv')\nmos_addr_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/moscow_addresses.csv')\n\nrus_bnd_gdf = gpd.read_file('..\/input\/russia-geo-data\/geo.json')","fbea66a3":"rus_df = rus_df.rename(columns={\"Region\/City\": \"Region\", \"Region\/City-Eng\": \"Region_en\", \"Day-Confirmed\": \"DConf\",\n                   \"Day-Deaths\": \"DDeath\",\"Day-Recovered\": \"DRec\",\"Confirmed\": \"Conf\",\n                   \"Recovered\": \"Rec\", \"Deaths\": \"Death\"})\n\nrus_df.Date = pd.to_datetime(rus_df.Date, dayfirst=True)\nprint('Data date:', rus_df.iloc[-1]['Date'].strftime('%d, %b %Y'))","0a6f83d4":"# Get current situation in regions\nrus_df.Date = pd.to_datetime(rus_df.Date, dayfirst=True) \nrus_df['Act'] = rus_df.Conf - rus_df.Death - rus_df.Rec\nrus_df['Death_rate'] = rus_df.Death \/ rus_df.Conf * 100\nrus_df = rus_df[rus_df.Region != 'Diamond Princess']\ncases = ['Conf', 'Death', 'Rec', 'Act', 'Death_rate']\nrus_latest = rus_df.groupby('Region').apply(lambda df: df.loc[df.Date.idxmax()])\nrus_latest = rus_latest.sort_values(by='Conf', ascending=False).reset_index(drop=True)\nrus_latest = rus_latest[['Region', 'Region_en', 'Region_ID'] + cases]\n# rus_latest","01f789d0":"# Align rus_info_df Region to rus_df Region \nrename_dict = {\n    '\u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u041e\u0441\u0435\u0442\u0438\u044f': '\u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u041e\u0441\u0435\u0442\u0438\u044f - \u0410\u043b\u0430\u043d\u0438\u044f',\n    '\u042f\u043c\u0430\u043b\u043e-\u041d\u0435\u043d\u0435\u0446\u043a\u0438\u0439 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0439 \u043e\u043a\u0440\u0443\u0433': '\u042f\u043c\u0430\u043b\u043e-\u041d\u0435\u043d\u0435\u0446\u043a\u0438\u0439 \u0410\u041e',\n    '\u0411\u0435\u043b\u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c': '\u0411\u0435\u043b\u0433\u043e\u0440\u043e\u0434',\n    '\u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u041a\u043e\u043c\u0438': '\u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u043a\u043e\u043c\u0438',\n    '\u041a\u0430\u043c\u0447\u0430\u0442\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439' : '\u041a\u0430\u043c\u0447\u0430\u0442\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0438\u0306'\n}\n\ndef rename(row):\n    name = row['Region'][0]\n    return pd.Series(rename_dict[name] if name in rename_dict else name)\n\n# rus_info_df.Region = rus_info_df.reset_index().groupby('index').apply(rename).reset_index(drop=True)","935be74d":"# Prepare Rus geo data\n\n# Combining with regions info\nright = rus_info_df[['Region_ID', 'Population', 'Latitude', 'Longitude']]\nrus_geo_df = rus_latest.merge(right, left_on='Region_ID', right_on='Region_ID', how='left')\n\n# Confirmed per 100K\nrus_geo_df['Conf_p100k'] = rus_geo_df.Conf \/ (rus_geo_df.Population \/ 100000)\nrus_geo_df = rus_geo_df.drop('Population', axis=1)\n\n# rus_geo_df.loc[np.isnan(rus_geo_df.Conf) | np.isnan(rus_geo_df.Latitude)]\n\n# Manual fixes\nrus_geo_df.loc[rus_geo_df.Region == '\u041c\u043e\u0441\u043a\u0432\u0430', 'Latitude'] = 55.7522\nrus_geo_df.loc[rus_geo_df.Region == '\u041c\u043e\u0441\u043a\u0432\u0430', 'Longitude'] = 37.6220\nrus_geo_df.loc[rus_geo_df.Region == '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433', 'Latitude'] = 59.8917\nrus_geo_df.loc[rus_geo_df.Region == '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433', 'Longitude'] = 30.2673\n\n","f87a9e59":"rus_geo_df[['Region_en'] + cases + ['Conf_p100k']].style.background_gradient(cmap='Reds')","e20b6e44":"def embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","2b5fff6c":"m_1 = folium.Map(\n    location=[64.0914, 101.6016],\n#     tiles='Stamen Toner',\n    zoom_start=3\n)\n\nmax_psize = 150000\nmin_psize = 20000\nmin_val = rus_geo_df.Conf.min()\nmax_val = rus_geo_df.Conf.max()\n\nfor i in range(len(rus_geo_df)):\n    radius = min_psize + (rus_geo_df.Conf[i] - min_val) \/ (max_val - min_val) * (max_psize - min_psize)\n    folium.Circle(\n        radius=radius,\n        location=[rus_geo_df.Latitude[i], rus_geo_df.Longitude[i]],\n        popup=rus_geo_df.Region_en[i] + ' {}'.format(int(rus_geo_df.Conf[i])),\n        color='crimson',\n        fill=True,\n    ).add_to(m_1)\n\n# folium.LatLngPopup().add_to(m_1)\n\nembed_map(m_1, 'm_1.html')","31108c45":"# Regions mapping\nrus_gdf = gpd.GeoDataFrame(rus_geo_df, geometry=gpd.points_from_xy(rus_geo_df.Longitude, rus_geo_df.Latitude))\nrus_gdf.crs = {'init': 'epsg:4326'}\n\nrus_shape = rus_bnd_gdf[['NAME_1', 'TYPE_1', 'ID_1', 'geometry']]\nrus_gdf = gpd.sjoin(rus_gdf, rus_shape, how=\"left\", op='within')\n\n# rus_gdf.loc[np.isnan(rus_gdf.ID_1)]\n# rus_gdf.head()","7c7297bb":"m_3 = folium.Map(\n    location=[64.0914, 101.6016],\n    tiles='Stamen Toner',\n    zoom_start=3\n)\n\nscale_min, scale_max = np.log(rus_gdf.Act.min() + 1), np.log(rus_gdf.Act.max() + 1)\ncolormap = linear.YlOrRd_09.scale(scale_min, scale_max)\n\ndef color_mapper(id):\n    row = rus_gdf[rus_gdf.ID_1 == id].reset_index()\n    if len(row) == 0:\n        return scale_min\n    return np.log(row.Act.iloc[0] + 1)\n\nfolium.GeoJson(\n    rus_bnd_gdf,\n    name='rusjson',\n    style_function=lambda feature: {\n        'fillColor': colormap(color_mapper(feature['properties']['ID_1'])),\n        'color': 'black',\n        'weight': 1,\n        'dashArray': '5, 5',\n        'fillOpacity': 0.9,\n    }\n).add_to(m_3)\n\nfor i in range(len(rus_gdf)):\n    folium.Circle(\n        radius=20000,\n        location=[rus_gdf.Latitude[i], rus_gdf.Longitude[i]],\n        popup=rus_gdf.Region_en[i] + ' Active: {}'.format(int(rus_gdf.Act[i])),\n        color='crimson',\n        fill=True,\n    ).add_to(m_3)\n\n# folium.LatLngPopup().add_to(m_3)\n\n# colormap.caption = 'Active cases color scale'\n# colormap.add_to(m_3)\n\nembed_map(m_3, 'm_3.html')","d5fbc2be":"m_4 = folium.Map(\n    location=[64.0914, 101.6016],\n    tiles='Stamen Toner',\n    zoom_start=3\n)\n\nscale_min, scale_max = np.log(rus_gdf.Conf_p100k.min() + 1), np.log(rus_gdf.Conf_p100k.max() + 1)\ncolormap = linear.YlOrRd_09.scale(scale_min, scale_max)\n\ndef color_mapper(id):\n    row = rus_gdf[rus_gdf.ID_1 == id].reset_index()\n    if len(row) == 0:\n        return scale_min\n    return np.log(row.Conf_p100k.iloc[0] + 1)\n\nfolium.GeoJson(\n    rus_bnd_gdf,\n    name='rusjson',\n    style_function=lambda feature: {\n        'fillColor': colormap(color_mapper(feature['properties']['ID_1'])),\n        'color': 'black',\n        'weight': 1,\n        'dashArray': '5, 5',\n        'fillOpacity': 0.9,\n    }\n).add_to(m_4)\n\nfor i in range(len(rus_gdf)):\n    folium.Circle(\n        radius=20000,\n        location=[rus_gdf.Latitude[i], rus_gdf.Longitude[i]],\n        popup=rus_gdf.Region_en[i] + ' Conf. per 100k: {:6.2f}, Conf: {}'.format(rus_gdf.Conf_p100k[i], int(rus_gdf.Conf[i])),\n        color='crimson',\n        fill=True,\n    ).add_to(m_4)\n\n\nembed_map(m_4, 'm_4.html')","a6200192":"m_5 = folium.Map(\n    location=[64.0914, 101.6016],\n    tiles='Stamen Toner',\n    zoom_start=3\n)\n\nscale_min, scale_max = np.log(rus_gdf.Death_rate.min() + 1), np.log(rus_gdf.Death_rate.max() + 1)\ncolormap = linear.YlOrRd_09.scale(scale_min, scale_max)\n\ndef color_mapper(id):\n    row = rus_gdf[rus_gdf.ID_1 == id].reset_index()\n    if len(row) == 0:\n        return scale_min\n    return np.log(row.Death_rate.iloc[0] + 1)\n\nfolium.GeoJson(\n    rus_bnd_gdf,\n    name='rusjson',\n    style_function=lambda feature: {\n        'fillColor': colormap(color_mapper(feature['properties']['ID_1'])),\n        'color': 'black',\n        'weight': 1,\n        'dashArray': '5, 5',\n        'fillOpacity': 0.9,\n    }\n).add_to(m_5)\n\nfor i in range(len(rus_gdf)):\n    folium.Circle(\n        radius=20000,\n        location=[rus_gdf.Latitude[i], rus_gdf.Longitude[i]],\n        popup=rus_gdf.Region_en[i] + ' Death Rate: {:6.2f}, Conf: {}'.format(rus_gdf.Death_rate[i], int(rus_gdf.Conf[i])),\n        color='crimson',\n        fill=True,\n    ).add_to(m_5)\n\n\nembed_map(m_5, 'm_5.html')","81b233b5":"m_2 = folium.Map(\n    location=[55.7522, 37.6220],\n    tiles='Stamen Toner',\n    zoom_start=10\n)\n\nfor i in range(len(mos_addr_df)):\n    folium.Circle(\n        radius=50,\n        location=[mos_addr_df.Latitude[i], mos_addr_df.Longitude[i]],\n        popup=mos_addr_df.Address[i],\n        color='crimson',\n        fill=True,\n    ).add_to(m_2)\n\nHeatMap(mos_addr_df[['Latitude', 'Longitude']], radius=15).add_to(m_2)\n    \nembed_map(m_2, 'm_2.html')","9c6bd0f9":"# COVID-19 in Russia geo plotting","2df98505":"# Import","207ddd75":"**Russia confirmed cases map**","2fcfc584":"* [Russia dataset](https:\/\/www.kaggle.com\/kapral42\/covid19-russia-regions-cases)","cdeaaa48":"# Moscow","1084a120":"# Geo Plotting","0af6d4bb":"**Moscow places from where people with the COVID-19 were hospitalized**","99a81873":"Death Rate","b0ff4a6a":"# Dataset","ad677047":"* [Russia regions data notebook](https:\/\/www.kaggle.com\/kapral42\/covid-19-in-russia-regions)","cdb551f6":"**Russia active cases map**","3b0ac58a":"Confirmed cases per 100 000 people"}}