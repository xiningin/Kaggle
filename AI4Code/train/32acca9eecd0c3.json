{"cell_type":{"5892dbab":"code","a21314b0":"code","06a51880":"code","9b6cb0d9":"code","cf326fa1":"code","5dbe4549":"code","56e1654e":"code","49eafcb0":"code","0409a9b7":"code","d3e595a8":"code","e2552c41":"code","13318b99":"code","ebcf2a2e":"code","8477822f":"code","35accdf4":"markdown","196df60e":"markdown","b339d27c":"markdown","b7afafea":"markdown","ed9a57b1":"markdown","1c718b3e":"markdown","f1bccd65":"markdown","7e646a9e":"markdown","eca8167e":"markdown","39ae8c2e":"markdown","cf63b654":"markdown","c1b6f44d":"markdown","ac69c7ea":"markdown","69601bb2":"markdown","fed96db0":"markdown"},"source":{"5892dbab":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_absolute_error\nimport warnings\n\n\n%matplotlib inline\n\n\n","a21314b0":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","06a51880":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    #df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            sns.distplot(columnDf)\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","9b6cb0d9":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = sns.heatmap(corr,annot=True,cmap=\"PuBu\",center=1)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n    \n","cf326fa1":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","5dbe4549":"nRowsRead = None # specify 'None' if want to read whole file\n# Pizza.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\npizza_data = pd.read_csv('\/kaggle\/input\/Pizza.csv', delimiter=',', nrows = nRowsRead, index_col = 'id')\npizza_data.dataframeName = 'Pizza.csv'\nnRow, nCol = pizza_data.shape\nprint(f'There are {nRow} rows and {nCol} columns')","56e1654e":"pizza_data.head(5)\n","49eafcb0":"plotPerColumnDistribution(pizza_data, 10, 5)","0409a9b7":"plotCorrelationMatrix(pizza_data, 8)","d3e595a8":"plotScatterMatrix(pizza_data, 20, 10)","e2552c41":"pizza_data.info()\npizza_data.isnull().sum()","13318b99":"features = ['brand', 'prot', 'fat', 'ash', 'sodium', 'carb', 'cal']\nX = pizza_data[features]\ny = pizza_data['mois']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Apply one-hot encoder to brand\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[['brand']]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test[['brand']]))\n\n# put index back\nOH_cols_train.index = X_train.index\nOH_cols_test.index = X_test.index\n\n# add column names\nOH_cols_train.columns = OH_encoder.get_feature_names()\nOH_cols_test.columns = OH_encoder.get_feature_names()\n\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = X_train.drop(['brand'], axis=1)\nnum_X_test = X_test.drop(['brand'], axis=1)\n\n# Add one-hot encoded columns to numerical features\nOH_X_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nOH_X_test = pd.concat([num_X_test, OH_cols_test], axis=1)\n\n\n# predictions using One Hot Encoder\nwarnings.filterwarnings(\"ignore\")\nmy_model1 = RandomForestRegressor(random_state=1)\nmy_model1.fit(OH_X_train, y_train)\npreds1 = my_model1.predict(OH_X_test)\nprint(\"MAE with one hot encocer: \" + str(mean_absolute_error(y_test, preds1)))\n\nmy_model2 = RandomForestRegressor(random_state=1)\nmy_model2.fit(num_X_train, y_train)\npreds2 = my_model2.predict(num_X_test)\nprint(\"MAE with numerical columns only: \" + str(mean_absolute_error(y_test, preds2)))\n\n\n\nprint('Done')","ebcf2a2e":"feature_importances_ohe = pd.DataFrame({'Feature': OH_X_train.columns, 'Importance': my_model1.feature_importances_})\nfeature_importances_ohe.set_index('Feature', inplace=True)\nfeature_importances_ohe.plot.bar(title='Feature importance with One Hot Encoder')\n\nfeature_importances_num = pd.DataFrame({'Feature': num_X_train.columns, 'Importance': my_model2.feature_importances_})\nfeature_importances_num.set_index('Feature', inplace=True)\nfeature_importances_num.plot.bar(title='Feature importance with numerical columns only')\n\n\nplt.show()","8477822f":"df_diff = pd.DataFrame({'Actual': y_test, 'Predicted_ohe': preds1, 'Predicted_num': preds2})\n\nplt.figure(figsize=(10,10))\nplt.plot(preds1, y_test,'bx',markersize=10)\nplt.plot(preds2, y_test,'r+',markersize=10)\nplt.title('Error analysis')\nplt.xlabel('Predicted values')\nplt.ylabel('Test values')","35accdf4":"Let's take a quick look at what the data looks like:","196df60e":"Now you're ready to read in the data and use the plotting functions to visualize the data.","b339d27c":"## Relationship between moisture and other attributes\n\n","b7afafea":"Correlation matrix:","ed9a57b1":"## Predictions vs Actual values","1c718b3e":"Scatter and density plots:","f1bccd65":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","7e646a9e":"# Info about the data","eca8167e":"Distribution graphs (histogram\/bar graph) of sampled columns:","39ae8c2e":"There is 1 csv file in the current version of the dataset:\n","cf63b654":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","c1b6f44d":"## Feature importance","ac69c7ea":"## Introduction\nPizza! \n\n![image.png](attachment:image.png) ","69601bb2":"## Conclusion\nMoisture content depends heavily on calories (although I'm not a food scientist and I have no clue what I'm doing.)","fed96db0":"### Let's check 1st file: \/kaggle\/input\/Pizza.csv"}}