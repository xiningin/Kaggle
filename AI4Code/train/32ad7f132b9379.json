{"cell_type":{"37c365fc":"code","27f1dc0d":"code","e864030b":"code","cd97b976":"code","cf9dff4c":"code","17efb87c":"code","660fb132":"code","3ab4e93c":"code","82a673ff":"code","cccd546e":"code","4faf52f0":"code","adf4571a":"code","40e28779":"code","c4f62d1a":"code","ab9fe450":"code","44903232":"code","41eab0ce":"code","6ff6b6c0":"code","d633d17d":"code","56082c6e":"code","e916cddf":"code","9953b5fd":"code","adce03a9":"code","fc1ff76b":"code","6bfe8986":"code","a256caca":"code","513326aa":"code","d893e1a4":"code","ab1e5b98":"code","2c92541a":"code","b5cc54f6":"code","d4776d1d":"code","fa1b08ba":"code","3450b1c4":"code","f11d1455":"code","87c0458d":"code","7288755d":"code","b86e8a7f":"code","774b9ed1":"code","eb62bc85":"code","2b8c6966":"code","215f90d1":"code","a95a8da3":"code","c2eb62a5":"code","c0f2da2f":"code","931174ef":"code","3a00ad52":"code","94ef27a5":"code","0847e5aa":"code","afa17c7d":"code","324dc9e9":"code","939f2a7b":"code","8759e590":"code","b169d0f3":"code","6b843e7a":"code","3884532f":"code","495edbe2":"code","90bbe434":"code","eef02df9":"code","6da9fca3":"code","612cadf2":"code","3bc87be5":"code","03cb3675":"code","fb11ba06":"code","c54e783d":"code","1e707f1b":"code","b30e6d97":"code","9d158737":"code","098fd489":"code","60f4b6b2":"code","701aa856":"code","5d5e0b53":"code","3a5828df":"code","75162b6a":"code","4a7b2b03":"code","37d577e2":"code","a399c9d0":"code","71c486cb":"code","66e3e085":"code","705eb037":"code","d3a96f34":"code","4ae618c6":"code","5beac378":"code","5d40c8d3":"code","b917e67a":"code","481cf6d2":"code","48507079":"code","dcee830e":"code","85ed8586":"code","9a672e46":"code","dfd42d68":"code","336508ad":"code","8e920eb6":"code","e50562f5":"code","c443e746":"code","88b4100a":"code","dd9d9f3e":"code","96530d58":"code","39b1b75c":"code","504458ad":"code","005780fd":"code","55331f39":"code","57f4253b":"code","b139a365":"code","11bf8569":"code","fe7d27c0":"code","ce31e512":"code","7a127206":"code","655bb5af":"code","9d6f88d5":"code","54998709":"code","b0ad49df":"code","5cc2879b":"code","5f850351":"code","c5041556":"code","963f3e99":"code","458e42f0":"code","58defa1e":"code","e1aca87f":"code","1c283431":"code","73cfed55":"code","5908b2a8":"code","7a594c24":"code","dbaf2d00":"code","c8702dd8":"code","6b88e627":"code","e874841b":"code","755a865a":"code","7c7f3e56":"code","3945ad63":"code","3a9f1352":"code","87e82e8b":"code","66af044c":"code","85550ea8":"code","15eb6211":"code","04b33131":"code","207b31e9":"code","16162ffe":"code","7245ed5a":"code","73073774":"code","a2d876e3":"code","23a2bc3a":"code","6fc1f9a3":"markdown","0248a41e":"markdown","d30b9df4":"markdown","e29e9fdb":"markdown","5dfc9b32":"markdown","47b83884":"markdown","8c7cad0c":"markdown","b7151905":"markdown","26bb904d":"markdown","8c8debf9":"markdown","08450d1f":"markdown","2d9dfaaf":"markdown","c46c30f3":"markdown","5b6053ae":"markdown","bce7c587":"markdown","3d1fccd1":"markdown","0c36b32c":"markdown","c1132275":"markdown","c615cab6":"markdown","3e799db5":"markdown","b59f8f9b":"markdown","a2cdec92":"markdown","f6b3a82b":"markdown","f7834249":"markdown","c97b37c3":"markdown","a9757acb":"markdown","ac322e5b":"markdown","a47bed04":"markdown","7335c716":"markdown","c0a81ead":"markdown","a10ca710":"markdown","3da1aa61":"markdown","8bd0c551":"markdown","3dd75af3":"markdown","8cd7cfb8":"markdown","09c15610":"markdown","158f75b6":"markdown","2519cb59":"markdown","e3296b3d":"markdown","ad2cde83":"markdown","115a004d":"markdown","4c46158e":"markdown","305ec228":"markdown","5e1566ab":"markdown","51c170c1":"markdown","8dda2cf9":"markdown","ac3a7772":"markdown","fd28b4ea":"markdown","8d0e092e":"markdown","46e19e39":"markdown","2c570098":"markdown","3db5c112":"markdown","4b2f06b2":"markdown","1ee02755":"markdown","0769db8a":"markdown","8ecbb134":"markdown","75e65974":"markdown","9687a763":"markdown","17a0dd94":"markdown","2e46788a":"markdown","db1f22e0":"markdown","1123afb5":"markdown","6a0874d3":"markdown","060a8d83":"markdown","b3c2fc3e":"markdown","f6334813":"markdown","59c3e1d0":"markdown","8aafe221":"markdown","0c8df7a0":"markdown","367b6ab8":"markdown","58b54680":"markdown","3887e804":"markdown","17fe4c82":"markdown","bbf1c4e9":"markdown","76792cbf":"markdown","3a97c130":"markdown","3236e6fa":"markdown","c5caf5f1":"markdown","b3315185":"markdown","6fcccaa5":"markdown","86c8427f":"markdown","05f3a8f4":"markdown"},"source":{"37c365fc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold \nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.ensemble import GradientBoostingRegressor, ExtraTreesRegressor, RandomForestRegressor\n\n\nfrom scipy.stats import boxcox\nfrom scipy.stats import yeojohnson, uniform\nfrom sklearn.model_selection import GridSearchCV\nfrom scipy.stats import uniform, truncnorm, randint\nfrom pprint import pprint\nimport random\nfrom catboost import CatBoostRegressor\nfrom itertools import groupby\n\nimport sys\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import BaggingRegressor\n\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.base import clone\nimport datetime\nfrom datetime import datetime, timedelta\nimport math\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor\nfrom pprint import pprint\n\nfrom bs4 import BeautifulSoup \nimport requests\n\nfrom sklearn.ensemble import StackingRegressor","27f1dc0d":"def fill_missed(lst,j,year,page,id_anchor):\n    #\u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043e\u0440\u0442\u0435\u0436\u0438 sell_id \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - lst\n    #\u0442\u0430\u043a\u0436\u0435 \u043c\u0435\u0441\u0442\u043e sell_id \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0435 - j, \u0442\u0430\u043a\u0436\u0435 \u0433\u043e\u0434 - year\n    #\u0442\u0430\u043a\u0436\u0435 - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 - page;\n    #\u0442\u0430\u043a\u0436\u0435 \u0441\u043f\u0438\u0441\u043e\u043a sell_id, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 - id_anchor\n    #\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f sell_id \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 lst \u0438 sell_id, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n    #\u0435\u0441\u043b\u0438 \u0432 lst \u043d\u0435 \u0432\u0441\u0435 sell_id, \u0437\u043d\u0430\u0447\u0438\u0442, \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\n    #\u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e sell_id => \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e sell_id \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u043c 'Nan'\n\n    \n    lst1 = [x[j] for x in lst]\n    missed = list(set(id_anchor)-set(lst1))\n    for i in missed:\n        if j:\n            lst.insert(id_anchor.index(i),('Nan',i))\n        else:\n            lst.insert(id_anchor.index(i),(i,'Nan'))\n    if len(lst) > len(id_anchor):\n        print('year = {}, page = {}'.format(year,page))\n        raise Exception(lst)","e864030b":"def data_frame_form(df_result, list_to_turn,turn_to_int, id_order, name):\n    #\u0434\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 df_result - DataFrame, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u043c\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438\n    #\u0441\u0442\u043e\u043b\u0431\u0446\u044b (\u0441\u043f\u0438\u0441\u043a\u0438) \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 list_to_turn, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0441 sell_id \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    #\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 turn_to_int \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0444\u043b\u0430\u0433 - \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u0437 object \u0432 int (\u0435\u0441\u043b\u0438 1, \u0442\u043e \u043d\u0443\u0436\u043d\u043e, 0 - \u043d\u0435 \u043d\u0443\u0436\u043d\u043e)\n    #\u0432 id_order \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0441\u0442\u043e sell_id \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0435 (0 \u0438\u043b\u0438 1)\n    #\u0432 name \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c dataframe (\u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432)\n    \n\n    df_new = pd.DataFrame(list_to_turn)\n    df_r = df_result.copy()\n    \n    if id_order:\n        df_new.rename(columns={0:name, 1:'sell_id'}, inplace=True)\n    else:\n        df_new.rename(columns={0:'sell_id', 1:name}, inplace=True)\n    df_new.drop_duplicates(subset=['sell_id'],inplace = True)\n    df_new['sell_id'] = df_new['sell_id'].astype(int)\n    if turn_to_int:\n        df_new[name] = df_new[name].astype(int)\n    return df_r.merge(df_new, how='left', on='sell_id')","cd97b976":"def page_count(year):\n    #\u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043b\u0435\u0442 - year - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043d\u0430 auto.ru\n    #\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0438 - \u0433\u043e\u0434\u044b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\n    \n    res = {}\n    for i in year:\n        \n        url = 'https:\/\/auto.ru\/cars\/'+str(i)+'-year\/all\/?page=1&sort=fresh_relevance_1-desc&output_type=list'\n        response = requests.get(url)\n        response.encoding = 'utf-8'\n        page = BeautifulSoup(response.text, 'html.parser')\n        res[i] = int(re.findall(r'class=\"Button__text\">([0-9]+)<\/span><\/span><\/a><\/span><div class=\"ListingPagination-module__sequenceControls', str(page))[0])\n        \n    return res","cf9dff4c":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","17efb87c":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","660fb132":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","3ab4e93c":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","82a673ff":"VERSION    = 15\nDIR_TRAIN  = '..\/input\/den-shev\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.20   # 20%\n\n# CATBOOST\nITERATIONS = 5000\nLR         = 0.1","cccd546e":"!ls '..\/input'","4faf52f0":"train = pd.read_csv(DIR_TRAIN+'2020_12_25_0_20_out.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","adf4571a":"test.car_url","40e28779":"#\u0432 \u044d\u0442\u043e\u043c \u043a\u043e\u0434\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f train\n\n\n\ndescription = []\nmileage = []\nmodel_name = []\nsell_id = []\nvendor = []\nown_num = []\npts_r = []\ngt_r = []\nst_r = []\ncustom_s = []\npg = {}\nmodel_date = []\nnumber_of_doors = []\nvehicle_transmission = []\nprice = []\nfuel_type = []\nstate = []\n\nprint('started at {}'.format(datetime.now()))\n\nres = page_count(range(1980,1981))\n\nfor key,value in res.items():\n    for page_c in range(1,value+1):\n    \n        url = 'https:\/\/auto.ru\/cars\/'+str(key)+'-year\/all\/?page='+str(page_c)+'&sort=fresh_relevance_1-desc&output_type=list'\n        response = requests.get(url)\n        response.encoding = 'utf-8'\n        page = BeautifulSoup(response.text, 'html.parser')\n        \n        #\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u0441\u0440\u0430\u0437\u0443 \u043c\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a pg1, \u0441\u043c. \u043d\u0438\u0436\u0435 \n        \n        pg1 = re.findall(r'meta content=\\\"(.*?)\\\" itemprop=\\\"(.*?)\\\"', str(page))\n        \n        #\u0441\u043f\u0438\u0441\u043e\u043a \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c pg1d, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447\u0438 - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\n        \n        pg1d = {x[1]: [y[0] for y in pg1 if y[1] == x[1] ] for x in pg1}\n        if key == 1980 and page_c == 1:\n            pg = pg1d\n        else:\n            \n            #\u0437\u0434\u0435\u0441\u044c \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c pg \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0442.\u0435. \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0431\u0443\u0434\u0435\u0442\n            #\u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0441\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\n            for key_1 in pg1d.keys():\n                pg[key_1] = pg[key_1] + pg1d[key_1]\n    \n        #\u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0437\u0443 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c pg, \u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n        #\u0447\u0442\u043e \u043a\u0430\u043a \u0440\u0430\u0437 \u0434\u0435\u043b\u0430\u044e \u043d\u0438\u0436\u0435\n        \n        sell_id_t = re.findall(r',\\\"id\\\":\\\"([0-9]+)',str(page))\n        if len(list(set(sell_id) & set(sell_id_t))) > 0:\n            print('intersection of sell_id and sell_id_t')\n            print(list(set(sell_id) & set(sell_id_t)))\n        \n        sell_id+=sell_id_t\n\n        description_t = re.findall(r'delivery_info.*?\\\"description\\\":\\\"(.*?)\\\",\\\"discount_options.*?\\\"id\\\":\\\"([0-9]+)',str(page))\n        fill_missed(description_t,1,key,page_c,sell_id_t)\n        description+=description_t\n\n        mileage_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"mileage\\\":(.*?),\\\"state',str(page))\n        fill_missed(mileage_t,0,key,page_c,sell_id_t)\n        mileage+=mileage_t\n\n        model_name_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"model_info.*?name\\\":\\\"(.*?),\\\"ru_name',str(page))\n        fill_missed(model_name_t,0,key,page_c,sell_id_t)\n        model_name+=model_name_t\n\n        vendor_t= re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"vendor\\\":\\\"(.*?)\\\"',str(page))\n        fill_missed(vendor_t,0,key,page_c,sell_id_t)\n        vendor+=vendor_t\n\n        owners_number = re.findall(r'owners_number\\\":([0-9]+).*?\\\"id\\\":\\\"([0-9]+)',str(page))\n        own_num_t = [('3 \u0438 \u0431\u043e\u043b\u0435\u0435',x[1]) if int(x[0]) > 2 else x for x in owners_number]\n        fill_missed(own_num_t,1,key,page_c,sell_id_t)\n        own_num+=own_num_t\n\n        pts= re.findall(r'pts\\\":\\\"(.*?)\\\".*?,\\\"id\\\":\\\"([0-9]+)\"',str(page))\n        pts_r_t = [('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b',x[1]) if x[0] == 'ORIGINAL' else ('\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442',x[1]) for x in pts]\n        fill_missed(pts_r_t,1,key,page_c,sell_id_t)\n        pts_r+=pts_r_t\n\n        gear_type= re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"gear_type\\\":\\\"(.*?)\\\"',str(page))\n        gt_r_t = [(x[0],'\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439') if 'forward' in x[1].lower() else (x[0],'\u0437\u0430\u0434\u043d\u0438\u0439') if 'rear' in x[1].lower() else (x[0],'\u043f\u043e\u043b\u043d\u044b\u0439') for x in gear_type]\n        fill_missed(gt_r_t,0,key,page_c,sell_id_t)\n        gt_r+=gt_r_t\n\n        st_wheel = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"steering_wheel\\\":\\\"(.*?)\\\"',str(page))\n        st_r_t = [(x[0],'\u041b\u0435\u0432\u044b\u0439') if 'left' in x[1].lower() else (x[0],'\u041f\u0440\u0430\u0432\u044b\u0439') for x in st_wheel]\n        fill_missed(st_r_t,0,key,page_c,sell_id_t)\n        st_r+=st_r_t\n\n        custom= re.findall(r'custom_cleared\\\":(.*?)\\\".*?,\\\"id\\\":\\\"([0-9]+)\"',str(page))\n        custom_s_t = [(1,x[1]) if 'true' in x[0].lower() else (0,x[1]) for x in custom]\n        fill_missed(custom_s_t,1,key,page_c,sell_id_t)\n        custom_s+=custom_s_t\n        \n        model_date_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"super_gen.*?,\\\"year_from\\\":([0-9]+),',str(page))\n        fill_missed(model_date_t,0,key,page_c,sell_id_t)\n        model_date+=model_date_t\n\n        nod_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"vehicle_info.*?,\\\"doors_count\\\":([0-9]),',str(page))\n        fill_missed(nod_t,0,key,page_c,sell_id_t)\n        number_of_doors+=nod_t\n        \n        trans_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"vehicle_info.*?,\\\"transmission\\\":\\\"(.*?)\\\",',str(page))\n        fill_missed(trans_t,0,key,page_c,sell_id_t)\n        vehicle_transmission+=trans_t\n        \n        price_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"price\\\":([0-9]+),',str(page))\n        fill_missed(price_t,0,key,page_c,sell_id_t)\n        price+=price_t\n        \n        fuel_type_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"engine_type\\\":\\\"(.*?)\\\",',str(page))\n        fill_missed(fuel_type_t,0,key,page_c,sell_id_t)\n        fuel_type+=fuel_type_t\n        \n        state_t = re.findall(r',\\\"id\\\":\\\"([0-9]+).*?\\\"state_not_beaten\\\":(.*?),',str(page))\n        fill_missed(state_t,0,key,page_c,sell_id_t)\n        state+=state_t\n\n        print('page {}, year {}, at {}'.format(page_c,key,datetime.now()))\n    \nprint('finished at {}'.format(datetime.now()))","c4f62d1a":"for i in pg.keys():\n    print('key is {}, len is {}'.format(i,len(pg[i])))","ab9fe450":"#\u043a\u0430\u043a \u043f\u0438\u0441\u0430\u043b \u0432\u044b\u0448\u0435, \u0443\u0434\u0430\u043b\u044f\u044e \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432\u0441\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\ndlist = ['fuelType','name','modelDate','numberOfDoors','vehicleTransmission','price','image','availability']\nfor i in dlist:\n    pg.pop(i, None)\n","44903232":"#\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f dataframe, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0442\u043e\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432.\ndf_result = pd.DataFrame(pg)","41eab0ce":"df_result","6ff6b6c0":"#\u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"url\" \u0432 \"sell_id\"\ndf_result.rename(columns={'url':'sell_id'}, inplace=True)\n#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c url \u0432 id\ndf_result['sell_id'] = df_result.sell_id.str.extract(r'\/([0-9]+)-').astype(int)","d633d17d":"df_result","56082c6e":"#sell_id - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a \u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0441\u044f dataframe (\u0432 test - \u0442\u043e\u0436\u0435) =>\n#\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 dataframe \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f sell_id\n\ndf_result.drop_duplicates(subset=['sell_id'],inplace = True)\ndf_result.sell_id.value_counts()","e916cddf":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\u0445 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 sell_id \u043d\u0430 0 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\nlist_0_0 = [model_name,vendor,gt_r,st_r,vehicle_transmission,mileage,number_of_doors,price,model_date,fuel_type,state]\n#\u0437\u0430\u0434\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u0430 \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0442\u0430\u043a\u0438\u0435 \u0436\u0435, \u043a\u0430\u043a \u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0443 test \nlist_0_0_names = ['model_name','vendor','\u041f\u0440\u0438\u0432\u043e\u0434','\u0420\u0443\u043b\u044c','vehicleTransmission','mileage','numberOfDoors','price','modelDate','fuelType','\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435']","9953b5fd":"# \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0446\u0438\u043a\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a df_result \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438\u0437 list_0_0, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e data_frame_form\n\nfor i in range(0,len(list_0_0)):\n    df_result = data_frame_form(df_result,list_0_0[i],0,0,list_0_0_names[i])\n\ndf_result","adce03a9":"#\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\u0445 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 sell_id \u043d\u0430 1 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\nlist_0_1 = [description,pts_r,custom_s,own_num]\n\n#\u0437\u0430\u0434\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u0430 \u0434\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0442\u0430\u043a\u0438\u0435 \u0436\u0435, \u043a\u0430\u043a \u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0443 test \nlist_0_1_names = ['description','\u041f\u0422\u0421','\u0422\u0430\u043c\u043e\u0436\u043d\u044f','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']\n\n# \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0446\u0438\u043a\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a df_result \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438\u0437 list_0_1, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e data_frame_form\n\nfor i in range(0,len(list_0_1)):\n    df_result = data_frame_form(df_result,list_0_1[i],0,1,list_0_1_names[i])\n\ndf_result","fc1ff76b":"df_result.info()","6bfe8986":"#\u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u0435\u043b\u0430\u044e \u044d\u0442\u043e, \u0430 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0434\u0430\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c > 68000 \u0441\u0442\u0440\u043e\u043a, \n#\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0430 \u0442\u0440\u0443\u0434\u043e\u0435\u043c\u043a\u043e\u0441\u0442\u044c \u0441\u043d\u0438\u0437\u0438\u043b\u0430\u0441\u044c \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435, \u0430 \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435\n\ndf_result.dropna(inplace=True)\n","a256caca":"# \u0443 \u043d\u0430\u0441 \u0442\u0430\u043a\u0436\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \"Nan\", \u0443\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \n# \u0447\u0442\u043e\u0431\u044b \u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c\n\nfor i in df_result.columns:\n    df_result = df_result[df_result[i] != 'Nan']","513326aa":"df_result","d893e1a4":"#\u0438\u0437\u043c\u0435\u043d\u044e \u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 'productionDate','mileage','numberOfDoors','price','modelDate' \u043d\u0430 Int\n\ndf_result[['productionDate','mileage','numberOfDoors','price','modelDate']] = df_result[['productionDate','mileage','numberOfDoors','price','modelDate']].astype(int)\n\ndf_result.info()","ab1e5b98":"df_result.bodyType.value_counts()","2c92541a":"test.bodyType.value_counts()","b5cc54f6":"df_result.brand.value_counts()","d4776d1d":"test.brand.value_counts()","fa1b08ba":"df_result.color.value_counts()","3450b1c4":"test.color.value_counts()","f11d1455":"df_result.productionDate.value_counts()","87c0458d":"test.productionDate.value_counts()","7288755d":"df_result.vehicleConfiguration.value_counts()","b86e8a7f":"test.vehicleConfiguration.value_counts()","774b9ed1":"df_result.priceCurrency.value_counts()","eb62bc85":"test.priceCurrency.value_counts()","2b8c6966":"test.drop(columns = ['priceCurrency'],inplace=True)\ndf_result.drop(columns = ['priceCurrency'],inplace=True)\ntest.info()","215f90d1":"test.info()","a95a8da3":"df_result.info()","c2eb62a5":"df_result.engineDisplacement.value_counts()","c0f2da2f":"test.engineDisplacement.value_counts()","931174ef":"train.engineDisplacement = train.engineDisplacement.str.replace('LTR','',regex=True).str.replace(' ','0',regex=True).astype(float)\ntest.engineDisplacement = test.engineDisplacement.str.replace('LTR','',regex=True).str.replace(' ','0',regex=True).astype(float)\ntest.engineDisplacement","3a00ad52":"test.enginePower.value_counts()","94ef27a5":"df_result.enginePower.value_counts()","0847e5aa":"train.enginePower = train.enginePower.str.replace('N12','',regex=True).str.replace(' ','',regex=True).astype(int)\ntest.enginePower = test.enginePower.str.replace('N12','',regex=True).str.replace(' ','',regex=True).astype(int)\ntest.enginePower","afa17c7d":"df_result.model_name.value_counts()","324dc9e9":"test.model_name.value_counts()","939f2a7b":"df_result.vendor.value_counts()","8759e590":"test.vendor.value_counts()","b169d0f3":"df_result.\u041f\u0440\u0438\u0432\u043e\u0434.value_counts()","6b843e7a":"test.\u041f\u0440\u0438\u0432\u043e\u0434.value_counts()","3884532f":"df_result.\u0420\u0443\u043b\u044c.value_counts()","495edbe2":"test.\u0420\u0443\u043b\u044c.value_counts()","90bbe434":"df_result.\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.value_counts()","eef02df9":"test.\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.value_counts()","6da9fca3":"test.drop(columns = ['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'],inplace=True)\ndf_result.drop(columns = ['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'],inplace=True)\ntest.info()","612cadf2":"df_result.vehicleTransmission.value_counts()","3bc87be5":"test.vehicleTransmission.value_counts()","03cb3675":"#\u0432 train \u043e\u0448\u0438\u0431\u0441\u044f \u0438 \u0432\u043c\u0435\u0441\u0442\u043e \"\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f\" \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c '\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044f', \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e \u043d\u0438\u0436\u0435\ntrain.vehicleTransmission[train.vehicleTransmission=='\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044f'] = '\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f'\ntrain.vehicleTransmission.value_counts()","fb11ba06":"df_result.mileage.value_counts()","c54e783d":"test.mileage.value_counts()","1e707f1b":"df_result.numberOfDoors.value_counts()","b30e6d97":"test.numberOfDoors.value_counts()","9d158737":"df_result.modelDate.value_counts()","098fd489":"test.modelDate.value_counts()","60f4b6b2":"df_result.fuelType.value_counts()","701aa856":"test.fuelType.value_counts()","5d5e0b53":"df_result.description","3a5828df":"test.description","75162b6a":"test.drop(columns = ['description'],inplace=True)\ndf_result.drop(columns = ['description'],inplace=True)\ntest.info()","4a7b2b03":"df_result.\u041f\u0422\u0421.value_counts()","37d577e2":"test.\u041f\u0422\u0421.value_counts()","a399c9d0":"df_result.\u0422\u0430\u043c\u043e\u0436\u043d\u044f.value_counts()","71c486cb":"test.\u0422\u0430\u043c\u043e\u0436\u043d\u044f.value_counts()","66e3e085":"test.drop(columns = ['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'],inplace=True)\ndf_result.drop(columns = ['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'],inplace=True)\ntest.info()","705eb037":"df_result.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts()","d3a96f34":"test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts()","4ae618c6":"for i in range(0,len(train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts().index)):\n   \n    train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b[train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b == train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts().index[i]] = test.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts().index[i]","5beac378":"train.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.value_counts()","5d40c8d3":"list(set(list(test.columns)) - set(list(train.columns)))","b917e67a":"train.rename(columns={'id':'sell_id'}, inplace=True)","481cf6d2":"list(set(list(test.columns)) - set(list(train.columns)))","48507079":"test.equipment_dict","dcee830e":"test.drop(columns = ['equipment_dict'],inplace=True)","85ed8586":"test.drop(columns = ['image'],inplace=True)","9a672e46":"test.super_gen","dfd42d68":"test.drop(columns = ['super_gen'],inplace=True)","336508ad":"test.model_info","8e920eb6":"test.drop(columns = ['model_info'],inplace=True)","e50562f5":"test.name","c443e746":"test.drop(columns = ['name'],inplace=True)","88b4100a":"test.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.value_counts(normalize=True,dropna=False)","dd9d9f3e":"test.drop(columns=['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'],inplace=True)","96530d58":"test.drop(columns=['car_url'],inplace=True)","39b1b75c":"test.complectation_dict.value_counts(normalize=True,dropna=False)","504458ad":"test.drop(columns = ['complectation_dict'],inplace=True)","005780fd":"test.drop(columns = ['parsing_unixtime'],inplace = True)","55331f39":"list(set(list(test.columns)) - set(list(train.columns)))","57f4253b":"train['Train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d \ntest['Train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndf = pd.concat([train, test], axis=0).reset_index(drop=True) \ndf.sample()","b139a365":"df.info()\ndf.isnull().sum()","11bf8569":"df.\u041f\u0422\u0421[df.\u041f\u0422\u0421.isnull()] = '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b'","fe7d27c0":"df.info()","ce31e512":"one_hot_cols = ['vendor', '\u041f\u0440\u0438\u0432\u043e\u0434', 'vehicleTransmission', 'fuelType', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']\ncat_cols = ['bodyType', 'brand', 'color', 'model_name','vehicleConfiguration'] # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols = ['modelDate', 'productionDate', 'mileage', 'numberOfDoors',\n            'enginePower','engineDisplacement'] # \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","7a127206":"for i in num_cols:\n    plt.figure()\n    sns.distplot(df[i])\n    plt.title(i)\n    plt.show()","655bb5af":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncorrelation = df[num_cols].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","9d6f88d5":"df.enginePower","54998709":"df.engineDisplacement","b0ad49df":"df1 = df.drop(columns = ['modelDate','enginePower'])\ndf1.info()","5cc2879b":"#\u0434\u0435\u043b\u0430\u0435\u043c One hot \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\nfor i in one_hot_cols:\n    dummies = pd.get_dummies(df1[i],prefix=i)\n    for j in dummies.columns:\n        df1[j] = dummies[j]\n    df1.drop(columns = i,inplace = True)","5f850351":"df1.info()","c5041556":"for colum in cat_cols:\n    df1[colum] = df1[colum].astype('category').cat.codes","963f3e99":"df1.info()\n","458e42f0":"df1.\u0420\u0443\u043b\u044c[df1.\u0420\u0443\u043b\u044c == '\u041b\u0435\u0432\u044b\u0439'] = 1\ndf1.\u0420\u0443\u043b\u044c[df1.\u0420\u0443\u043b\u044c == '\u041f\u0440\u0430\u0432\u044b\u0439'] = 0\ndf1.\u0420\u0443\u043b\u044c = df1.\u0420\u0443\u043b\u044c.astype(int)\ndf1.\u041f\u0422\u0421[df1.\u041f\u0422\u0421 == '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b'] = 1\ndf1.\u041f\u0422\u0421[df1.\u041f\u0422\u0421 == '\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442'] = 0\ndf1.\u041f\u0422\u0421 = df1.\u041f\u0422\u0421.astype(int)","58defa1e":"df1.\u0420\u0443\u043b\u044c.value_counts()","e1aca87f":"df1.\u041f\u0422\u0421.value_counts()","1c283431":"df1.info()","73cfed55":"#\u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\ny = df1['price'][df1['Train'] == 1]","5908b2a8":"df1.info()","7a594c24":"X = df1[df1.Train == 1].drop(columns = ['Train','sell_id','price'])\nX_sub = df1[df1.Train == 0].drop(columns = ['Train','sell_id','price'])","dbaf2d00":"X_sub","c8702dd8":"VAL_SIZE","6b88e627":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","e874841b":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","755a865a":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c engineDisplacement \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['engineDisplacement'].map(tmp_train.groupby('engineDisplacement')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","7c7f3e56":"model = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\nmodel.fit(X_train, y_train,\n         #cat_features=cat_features_ids,\n         eval_set=(X_test, y_test),\n         verbose_eval=100,\n         use_best_model=True,\n         plot=True\n         )","3945ad63":"model.save_model('catboost_single_model_baseline.model')","3a9f1352":"predict = model.predict(X_test)\n\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.2f}%\")","87e82e8b":"rf = RandomForestRegressor(random_state=RANDOM_SEED)\n\nrf.fit(X_train, y_train)\ntest_predict = rf.predict(X_test)\nprint(f\"Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","66af044c":"tree = DecisionTreeRegressor(max_features=int(X_train.shape[1]\/3), max_depth=50)\ntree.fit(X_train, y_train)\ntest_predict = tree.predict(X_test)\nprint(f\"DecisionTreeRegressor Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","85550ea8":"X_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","15eb6211":"gb = GradientBoostingRegressor(max_depth=7,n_estimators=1000,learning_rate=0.1,random_state=RANDOM_SEED)\ngb.fit(X_train, y_train)\ntest_predict = gb.predict(X_test)\nprint(f\"GradientBoostingRegressor Test MAPE: {mape(y_test, test_predict)*100:0.3f}%\")","04b33131":"estimators=[\n        ('rf', RandomForestRegressor()),\n        ('gbr', GradientBoostingRegressor()),\n        ('bag', DecisionTreeRegressor()),\n            ]\n\nreg1 = StackingRegressor(estimators=estimators,\n     final_estimator = CatBoostRegressor(            \n                        )\n                    )\n\n    \nreg1.fit(X, y)\ntest_predict1 = reg1.predict(X)\nprint(f\"stacking 1 Test MAPE: {mape(y, test_predict1)*100:0.3f}%\")\n","207b31e9":"estimators=[\n        ('cat', CatBoostRegressor()),\n        ('gbr', GradientBoostingRegressor()),\n        ('bag', DecisionTreeRegressor()),\n            ]\n\nreg2 = StackingRegressor(estimators=estimators,\n     final_estimator = RandomForestRegressor(            \n                        )\n                    )\n\n    \nreg2.fit(X, y)\ntest_predict2 = reg2.predict(X)\nprint(f\"stacking 2 Test MAPE: {mape(y, test_predict2)*100:0.3f}%\")","16162ffe":"estimators=[\n        ('cat', CatBoostRegressor()),\n        ('forest', RandomForestRegressor()),\n        ('bag', DecisionTreeRegressor()),\n            ]\n\nreg3 = StackingRegressor(estimators=estimators,\n     final_estimator = GradientBoostingRegressor()\n                    )\n\n    \nreg3.fit(X, y)\ntest_predict3 = reg3.predict(X)\nprint(f\"stacking 3 Test MAPE: {mape(y, test_predict3)*100:0.3f}%\")","7245ed5a":"estimators=[\n        ('cat', CatBoostRegressor()),\n        ('forest', RandomForestRegressor()),\n        ('grad', GradientBoostingRegressor()),\n            ]\n\nreg4 = StackingRegressor(estimators=estimators,\n     final_estimator = DecisionTreeRegressor()\n                    )\n\n    \nreg4.fit(X, y)\ntest_predict4 = reg4.predict(X)\nprint(f\"stacking 4 Test MAPE: {mape(y, test_predict4)*100:0.3f}%\")","73073774":"#predict_submission = gb.predict(X_sub)\npredict_submission = reg1.predict(X_sub)\npredict_submission","a2d876e3":"X_sub","23a2bc3a":"sample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","6fc1f9a3":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 super_gen","0248a41e":"\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0438\u0447\u0435\u043c, \u043a\u043b\u044e\u0447\u0438 \u043d\u0435\u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u044b\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445 => \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u0443 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 => \u0443\u0434\u0430\u043b\u044f\u044e","d30b9df4":"\u0441\u0442\u0435\u043a\u0438\u043d\u0433 \u0441 catboost \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0430\u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u043f\u043e MAPE - 22% (\u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043b\u0443\u0447\u0448\u0438\u043c \u0434\u043e \u043d\u0435\u0433\u043e - gradient Boosting, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u043b 29%)","e29e9fdb":"\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 engineDisplacement, enginePower => \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0443\u0434\u0430\u043b\u044f\u044e.","5dfc9b32":"\u0441\u0442\u043e\u043b\u0431\u0435\u0446 parsing_unixtime - \u044e\u043d\u0438\u043a\u0441\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0433\u0434\u0430 test \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 - \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u043a\u0430\u043a\u0430\u044f \u043f\u043e\u043b\u044c\u0437\u0430 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c => \u0443\u0434\u0430\u043b\u044f\u044e","47b83884":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c vehicleTransmission","8c7cad0c":"# # Model 2 : CatBoost\n![](https:\/\/pbs.twimg.com\/media\/DP-jUCyXcAArRTo.png:large)   \n\n\n\u0423 \u043d\u0430\u0441 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 CatBoost \u043e\u0442 \u042f\u043d\u0434\u0435\u043a\u0441\u0430. [https:\/\/catboost.ai](http:\/\/)     \n\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 **CatBoost \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!**\n\n#### \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0432\u0438\u0434\u0435\u043e \u043e CatBoost (\u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c):\n* [\u0414\u043e\u043a\u043b\u0430\u0434 \u043f\u0440\u043e CatBoost](https:\/\/youtu.be\/9ZrfErvm97M)\n* [\u0421\u0432\u0435\u0436\u0438\u0439 \u0422\u0443\u0442\u043e\u0440\u0438\u0430\u043b \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b CatBoost (\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c)](https:\/\/youtu.be\/wQt4kgAOgV0) ","b7151905":"# Data","26bb904d":"\u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 model_name, brand => \u0441\u043b\u043e\u0432\u0430\u0440\u044c + \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f => \u0443\u0434\u0430\u043b\u044f\u044e.","8c8debf9":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c brand                 ","08450d1f":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 df_result, \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c productionDate\n\n","2d9dfaaf":"\u041f\u0440\u0438 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0435 \u0441 \u0441\u0430\u0439\u0442\u0430, \u0443 \u043c\u0435\u043d\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u043b\u0441\u044f \"\u043c\u0443\u0441\u043e\u0440\", \u0440\u0435\u0448\u0438\u043b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: df_result = df_result[df_result.modelDate.str.match('^[0-9]+$')]\n\n\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e.\n\n\u0421\u043c\u043e\u0442\u0440\u0438\u043c fuelType","c46c30f3":"\u0441\u0442\u043e\u043b\u0431\u0435\u0446 car_url - \u0441\u0447\u0438\u0442\u0430\u044e, \u0447\u0442\u043e \u043e\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u044b \u043d\u0435\u0442, \u043e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 sell_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u043d\u0430\u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 => \u0443\u0434\u0430\u043b\u044f\u044e.","5b6053ae":"\u041a\u043e\u0433\u0434\u0430 \u0441\u043e\u043b\u044c\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b. \"\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\" = 1, \"\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\" = 0\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0422\u0430\u043c\u043e\u0436\u043d\u044f","bce7c587":"\u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 GradientBoosting, \u0431\u0443\u0434\u0443 \u0441\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e.","3d1fccd1":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u044b\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 car_url \u0432 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u043c test (\u0441\u043c. \u0432\u044b\u0448\u0435) \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0437\u044f\u0442\u044b \u0441 auto.ru => \u043e\u0442\u0442\u0443\u0434\u0430 \u0436\u0435 \u0431\u0443\u0434\u0443 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0431\u0440\u0430\u0442\u044c.\n\u0427\u0442\u043e\u0431\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435, \u0431\u0443\u0434\u0443 \u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 1980 \u043f\u043e 2020.\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0432\u0438\u0434\u0430 - 'https:\/\/auto.ru\/cars\/1980-year\/all\/?page=1&sort=fresh_relevance_1-desc&output_type=list'\n\n\u0412\u043e\u043e\u0431\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 auto.ru \u044f \u0443\u0436\u0435 \u0432\u044b\u0431\u0440\u0430\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u043b\u0438\u0447\u043d\u043e\u043c \u043d\u043e\u0443\u0431\u0443\u043a\u0435 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435, \u0432\u044b\u0433\u0440\u0443\u0437\u0438\u043b \u0432 \u0444\u0430\u0439\u043b \"2020_12_25_0_20_out.csv\" \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430, \u0442.\u043a. \u0434\u0430\u0436\u0435 \u0443 \u043c\u0435\u043d\u044f \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0433\u0434\u0435-\u0442\u043e 3 \u0447\u0430\u0441\u0430. \u0417\u0434\u0435\u0441\u044c - \u043e\u043d\u043b\u0430\u0439\u043d - \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u0430 \u0432 2-2,5 \u0434\u043e\u043b\u044c\u0448\u0435 (\u0441\u0442\u0430\u0432\u0438\u043b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442).\n\n\u041d\u0438\u0436\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u044e \u043a\u043e\u0434, \u043a\u0430\u043a \u0441\u043e\u0431\u0438\u0440\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 auto.ru. \u041f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0447\u0430\u0441\u043e\u0432 5-6 \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c.\n","0c36b32c":"GradientBoosting","c1132275":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0445\u043e\u0436\u0438 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c 'LTR' \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 (float).\n\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0432 test \u0438 \u0441\u0440\u0430\u0437\u0443 \u0432 train (\u0432 \u043c\u043e\u0435\u043c csv \u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b).","c615cab6":"\u0422\u0430\u043c\u043e\u0436\u043d\u044f \u0438 \u0432 df_result(\u0432 train - \u0442\u0430\u043a\u0436\u0435), \u0438 \u0432 test - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0443\u0434\u0430\u043b\u044f\u044e \u0441\u0442\u043e\u043b\u0431\u0435\u0446 (\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0443\u0434\u0430\u043b\u0435\u043d). \u041f\u043e\u043b\u044c\u0437\u044b \u043d\u0435 \u043d\u0435\u0441\u0435\u0442.","3e799db5":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 3: \u043c\u0435\u0442\u0430-\u043c\u043e\u0434\u0435\u043b\u044c - GradientBoosting","b59f8f9b":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u041f\u0422\u0421","a2cdec92":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 equipment_dict \u0443 test","f6b3a82b":"\u043a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0442\u0441\u0443\u0441\u0442\u0432\u0443\u044e\u0442 price - \u044d\u0442\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0442.\u043a. \u0432 test \u043d\u0435 \u0431\u044b\u043b\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 price. \u0422\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \"\u041f\u0422\u0421\" => \u0437\u0430\u043f\u043e\u043b\u043d\u044e \u0441\u0430\u043c\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c","f7834249":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 model_info","c97b37c3":"\u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043a\u0430\u043a \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043f\u043e\u043b\u044c\u0437\u0443 => \u0443\u0434\u0430\u043b\u044f\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0432 test \u0438 df_result. \u0412 train \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e.","a9757acb":"\u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0441\u0434\u0435\u043b\u0430\u044e one hot encoding.","ac322e5b":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c engineDisplacement","a47bed04":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 df_result, \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e","7335c716":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 name","c0a81ead":"\u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 65% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e => \u0443\u0434\u0430\u043b\u044f\u044e \u0441\u0442\u043e\u043b\u0431\u0435\u0446","a10ca710":"\u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u043f\u043e\u0445\u043e\u0436\u0438. \u0422\u043e\u043b\u044c\u043a\u043e \u0432 df_result \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \". \u042f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443\u0431\u0440\u0430\u043b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: df_result.model_name = df_result.model_name.str[:-1]. \u0412 csv, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b, \u044d\u0442\u043e \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c vendor\n","3da1aa61":"\u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0440\u0435\u0448\u0438\u043b:\n\n<br>1) vendor, \u041f\u0440\u0438\u0432\u043e\u0434, vehicleTransmission, fuelType, \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b - \u043f\u0440\u0438\u043c\u0435\u043d\u044e One hot encoding\n\n<br>2) \u0420\u0443\u043b\u044c, \u041f\u0422\u0421 - binary \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:\n\n\u0420\u0443\u043b\u044c -  \"\u041b\u0435\u0432\u044b\u0439\" = 1, \"\u041f\u0440\u0430\u0432\u044b\u0439\" = 0\n\u041f\u0422\u0421 - \"\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\" = 1, \"\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\" = 0\n\n<br>3) productionDate, engineDisplacement, enginePower, mileage,numberOfDoors, modelDate - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b;\n\n<br> 4) bodyType, brand, color, vehicleConfiguration, model_name - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u044e \u0447\u0435\u0440\u0435\u0437 data[colum].astype('category').cat.codes","8bd0c551":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u043c\u0435\u0442\u0430-\u043c\u043e\u0434\u0435\u043b\u044c - CatBoost","3dd75af3":"\u0432 df_result \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u0435, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u0432 test (\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b)\u044e\n\u0421\u0434\u0435\u043b\u0430\u043b \u0442\u0430\u043a: \n\nlvt = [('\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f' if x[0] == 'M' else ('\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f' if x[0] == 'A' else ('\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440' if x[0] == 'V' else '\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044f'))) for x in  list(df_result.vehicleTransmission.values)]\ndf_result.vehicleTransmission = lvt\n\n\u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u044e one hot encoding.\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c mileage","8cd7cfb8":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2: \u043c\u0435\u0442\u0430-\u043c\u043e\u0434\u0435\u043b\u044c - Random Forest","09c15610":"\u041a\u043e\u0433\u0434\u0430 \u0441\u043e\u043b\u044c\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b. \"\u041b\u0435\u0432\u044b\u0439\" = 1, \"\u041f\u0440\u0430\u0432\u044b\u0439\" = 0\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n","158f75b6":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c color","2519cb59":"\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u0440\u0430\u0448\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0438) + 81% - \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0443\u0434\u0430\u043b\u044f\u044e \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432\u043e\u043e\u0431\u0449\u0435 \u0431\u0435\u0437 \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u0439).","e3296b3d":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0445\u043e\u0436\u0438 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c 'N12' \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 (int).\n\n\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e, \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u0441\u043e\u0431\u0440\u0430\u043b \u0441 auto.ru, \u044f \u0435\u0449\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b, \u0447\u0442\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 enginePower \u0431\u044b\u043b\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'undefined N12'. \u042f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443\u0431\u0440\u0430\u043b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: df_result = df_result[df_result.enginePower != 'undefined N12']\n\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0432 test \u0438 \u0441\u0440\u0430\u0437\u0443 \u0432 train (\u0432 \u043c\u043e\u0435\u043c csv \u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b).","ad2cde83":"## \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\u00b6\n","115a004d":"\u0412\u043e\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e \u0441\u0442\u0430\u0440\u0442\u0430, \u0434\u0430\u0436\u0435 \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u044f \u0441\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 catboosta, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 30.05%","4c46158e":"train['Train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['Train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndf = pd.concat([df, test], axis=0).reset_index(drop=True)\ndf.sample()","305ec228":"\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","5e1566ab":"# Bagging","51c170c1":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 df_result, \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c priceCurrency","8dda2cf9":"\u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439  = 0\n\none hot encoding \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443, \u043e\u0441\u0442\u0430\u0432\u043b\u044e, \u043a\u0430\u043a \u0435\u0441\u0442\u044c.\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c modelDate","ac3a7772":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0438\u0435, \u0442.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0441\u0434\u0435\u043b\u0430\u0442\u044c one hot encoding. \u041d\u043e \u0441\u0434\u0435\u043b\u0430\u044e \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432.\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u041f\u0440\u0438\u0432\u043e\u0434","fd28b4ea":"\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e vendor - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0441\u0434\u0435\u043b\u0430\u0442\u044c one hot encoding. \u041d\u043e \u0441\u0434\u0435\u043b\u0430\u044e \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432.\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0420\u0443\u043b\u044c","8d0e092e":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0432 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435 sklearn.StackingRegressor() \u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0432\u044b\u0448\u0435: CatBoost, Random Forest, GradientBoosting, Bagging. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0441\u0442\u0430\u0432\u043b\u044e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n\u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043a sklearn.StackingRegressor() \u0443\u043a\u0430\u0437\u0430\u043d\u043e:\nNote that estimators_ are fitted on the full X while final_estimator_ is trained using cross-validated predictions of the base estimators using cross_val_predict.\n\n=> \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u0431\u0443\u0434\u0443 \u043d\u0430 X \u0438 y (\u044d\u0442\u043e \u043c\u043e\u0438 \u043f\u043e\u043b\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441 auto.ru), \u0430 \u043d\u0435 \u043d\u0430 X_train, y_train, \u043a\u0430\u043a \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438.","46e19e39":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","2c570098":"# Submission","3db5c112":"# Setup","4b2f06b2":"\u0432 df_result \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u0435, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u0432 test (\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b). \u0421\u0434\u0435\u043b\u0430\u043b \u0442\u0430\u043a:\n\n<br>ft = [('\u0431\u0435\u043d\u0437\u0438\u043d' if x[0] == 'G' else ('\u0434\u0438\u0437\u0435\u043b\u044c' if x[0] == 'D' else ('\u0433\u0438\u0431\u0440\u0438\u0434' if x[0] == 'H' else ('\u044d\u043b\u0435\u043a\u0442\u0440\u043e' if x[0] == 'E' else '\u0433\u0430\u0437')))) for x in list(df_result.fuelType.values)]\n\n<br>df_result.fuelType = ft\n\n\u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u044e one hot encoding.\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c description","1ee02755":"# Model 1: \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \"\u043d\u0430\u0438\u0432\u043d\u0443\u044e\" \u043c\u043e\u0434\u0435\u043b\u044c \n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (engineDisplacement). \nC \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\n\n","0769db8a":"\u0441\u0442\u043e\u043b\u0431\u0435\u0446 image \u043d\u0430\u0434\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c, \u043d\u0435 \u0433\u043b\u044f\u0434\u044f). \u0423\u0434\u0430\u043b\u044f\u044e.","8ecbb134":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 df_result, \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e\n\n\u0441\u043c\u043e\u0442\u0440\u0438\u043c vehicleConfiguration","75e65974":"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0432 df_result(\u0432 train - \u0442\u0430\u043a\u0436\u0435), \u0438 \u0432 test - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0443\u0434\u0430\u043b\u044f\u044e \u0441\u0442\u043e\u043b\u0431\u0435\u0446 (\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0443\u0434\u0430\u043b\u0435\u043d). \u041f\u043e\u043b\u044c\u0437\u044b \u043d\u0435 \u043d\u0435\u0441\u0435\u0442.","9687a763":"\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0420\u0443\u043b\u044c \u0438 \u041f\u0422\u0421\n\n\u0420\u0443\u043b\u044c - \"\u041b\u0435\u0432\u044b\u0439\" = 1, \"\u041f\u0440\u0430\u0432\u044b\u0439\" = 0 \u041f\u0422\u0421 - \"\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\" = 1, \"\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\" = 0","17a0dd94":"\u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0443 train \u0431\u044b\u043b\u0438 \u0442\u0430\u043a\u0438\u0435 \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u0438 \u0443 test","2e46788a":"\u043c\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u043a \u0441\u043b\u0438\u044f\u043d\u0438\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432","db1f22e0":"\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u044e\u0447\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 => \u043f\u043e\u043b\u044c\u0437\u0443 \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0442\u044f\u0436\u0435\u043b\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c. \u0423\u0434\u0430\u043b\u044f\u044e","1123afb5":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 complectation_dict","6a0874d3":"\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435","060a8d83":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c enginePower","b3c2fc3e":"\u0418 \u0432 df_result (\u0438 \u0432 train, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043b \u0432 csv), \u0438 \u0432 test \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0443\u0431\u0440\u0430\u0442\u044c, \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442. \u0414\u0435\u043b\u0430\u044e \u043d\u0438\u0436\u0435.","f6334813":"# Random Forest","59c3e1d0":"## Train Split","8aafe221":"## \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0c8df7a0":"\u043f\u0435\u0440\u0432\u043e\u0435, \u0447\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c - \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"id\" \u0432 \"sell_id\" \u0443 train. \u0414\u0435\u043b\u0430\u044e","367b6ab8":"\u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c. \n\u041f\u0440\u0438 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0435 \u0441 \u0441\u0430\u0439\u0442\u0430, \u0443 \u043c\u0435\u043d\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u043b\u0441\u044f \"\u043c\u0443\u0441\u043e\u0440\" \u0442\u0438\u043f\u0430 \"0,\"images_count\":14},\"sub_category\":\"cars\"...\", \u0440\u0435\u0448\u0438\u043b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: df_result = df_result[df_result.mileage.str.match('^[0-9]+$')]\n\n\u0432 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c train \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e.\n\n\u0421\u043c\u043e\u0442\u0440\u0438\u043c numberOfDoors","58b54680":"<img src=\"https:\/\/whatcar.vn\/media\/2018\/09\/car-lot-940x470.jpg\"\/>\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n","3887e804":"# Stacking","17fe4c82":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e:\n<br>+0.95 \u043c\u0435\u0436\u0434\u0443 modelDate \u0438 productionDate. \u0414\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c productionDate\n<br>+0.81 \u043c\u0435\u0436\u0434\u0443 enginePower \u0438 engineDisplacement. \u041e\u0441\u0442\u0430\u0432\u043b\u044e engineDisplacement (\u043c\u0435\u043d\u044c\u0448\u0435 \u0440\u0430\u0437\u043b\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439)","bbf1c4e9":"\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","76792cbf":"\u0441\u043c\u043e\u0442\u0440\u0438\u043c model_name","3a97c130":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 4: \u043c\u0435\u0442\u0430-\u043c\u043e\u0434\u0435\u043b\u044c - Bagging (DecisionTreeRegressor)","3236e6fa":"\u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c, \u043a\u043e\u0433\u0434\u0430 \u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b, \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c pg. \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b:\n<br>1) \u0432 \u043f\u043e\u043b\u0435 fuelType \u0441\u043e\u0431\u0440\u0430\u043b\u043e\u0441\u044c \u0432\u0434\u0432\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0447\u0435\u043c \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435;\n<br>2) \u0432 \u043f\u043e\u043b\u0435 name - \u0432\u0442\u0440\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0447\u0435\u043c \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435;\n<br>3) \u0432 \u043f\u043e\u043b\u0435 price - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445;\n<br>4) \u0432 \u043f\u043e\u043b\u0435 modelDate - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445;\n<br>5) \u0432 \u043f\u043e\u043b\u0435 numberOfDoors - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445;\n<br>6) \u0432 \u043f\u043e\u043b\u0435 vehicleTransmission - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445;\n\n1,2,3 - \u0432\u0438\u0434\u043d\u043e \u0434\u0430\u0436\u0435 \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043d\u0438\u0436\u0435.\n4,5,6 - \u043f\u0440\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0448\u044c\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u044f image, availability - \u043f\u043e \u043c\u043e\u0435\u043c\u0443 \u043c\u043d\u0435\u043d\u0438\u044e, \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435 \u0434\u0430\u044e\u0442 => \u044f \u0438\u0445 \u0443\u0434\u0430\u043b\u0438\u043b.\n\u0422\u0430\u043a\u0436\u0435 \u044f \u0443\u0434\u0430\u043b\u0438\u043b \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f pg 1,2,3,4,5,6, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0438\u0441\u043a\u0430\u0442\u044c \u0438\u0445 \u0443\u0436\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0438, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0443, \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0438\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c 'Nan'.\n\n\u041f\u043e\u043b\u0435 url \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 sell_id, \u0432\u044b\u0434\u0435\u043b\u044e \u0435\u0433\u043e.\n","c5caf5f1":"\u0432\u0441\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f \u0443 train \u0438 test \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438.\n\u0412\u044b\u044f\u0441\u043d\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0443 test \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0443 train","b3315185":"\u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b, \u0442\u0435\u043f\u0435\u0440\u044c \u0438\u0445 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0432 test \u0438 df_result\n\n\u041d\u0430\u0447\u043d\u0435\u043c \u0441 bodyType","6fcccaa5":"## Fit","86c8427f":"# GradientBoosting","05f3a8f4":"\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u0432 df_result, \u043d\u0438\u0447\u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e"}}