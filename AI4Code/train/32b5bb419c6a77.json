{"cell_type":{"3072d1af":"code","71ad0135":"code","764e89d7":"code","304b8587":"code","2f6f2d52":"code","257bc6af":"code","eff3e9b6":"code","bf2f73c8":"code","7a4bf462":"code","062bb641":"code","c03c0a11":"code","94e0cdf0":"code","418bab26":"code","44a0c7b6":"code","e999583e":"code","5f58b396":"code","8e5ff26f":"code","8b985a60":"code","cf906db5":"code","307f999f":"code","7cddf7ff":"code","8f973778":"code","f93b539d":"code","6751f4fe":"code","ede90e9e":"code","37e767ea":"code","a3977ec5":"code","d0a51c5d":"code","c0a5bdc4":"code","3b8d1aa8":"code","2ea4c60a":"code","28b60338":"code","0edab082":"code","a46f9dd6":"code","a4863a71":"code","d555e59a":"code","7ca1e3da":"code","103cb6c8":"code","e4b44c5c":"code","6bfc5c2e":"code","9565c798":"code","4f87a57c":"code","bb93eda8":"code","889438c1":"code","d78a04d4":"code","268479e7":"code","2a3e0332":"code","ff349229":"code","eb0ba7ea":"code","189a3eef":"code","9dd8d3eb":"code","e89d231e":"code","77189000":"code","a59548be":"code","3db11241":"code","ae991d48":"code","1d2f6b2b":"code","e3e01609":"code","3eb18c63":"code","84f714a5":"code","78dfd174":"code","b0fad735":"code","a2865ba0":"code","4562d040":"code","69c1c025":"code","b731bddf":"code","b1bde83a":"code","0efba608":"code","240a36c4":"code","8ea59983":"code","241320b4":"code","4bb4be93":"code","b15bfb9e":"code","f3b18f66":"code","d4fea8f7":"code","47cf1622":"code","825ee93e":"code","3b95e5cb":"code","e5ef2ea9":"code","4bec6b3b":"code","7b7e0509":"code","3b78aa7d":"code","90f78745":"code","a2fcac49":"code","75665850":"code","a27563a3":"code","89c0019a":"code","54f7c62d":"code","e7154e7f":"code","7e8df468":"code","63ec5d36":"code","35635cdd":"code","2ee2667f":"code","36c924be":"code","44d3408b":"code","1f51b96f":"code","ad6b4acb":"code","1181481b":"code","13879053":"code","a83e41e9":"code","e28480bb":"code","c85143cd":"code","05d5390e":"code","2050f433":"code","8d460084":"code","28614dbf":"code","5f1e7e98":"code","3f19a5ed":"code","1daf122f":"code","1bac8b1a":"code","06d2bf14":"markdown","a81fa5b6":"markdown","c561b441":"markdown","0634297e":"markdown","087a1c3c":"markdown","9ee40fb0":"markdown","e86a693a":"markdown","b6a179d3":"markdown","c5dcd057":"markdown","bfc3d3e2":"markdown","9dbbd8ca":"markdown","40a673f5":"markdown","45ca897b":"markdown","ad1f6f5d":"markdown","3367790e":"markdown","1a396148":"markdown","b162d5f7":"markdown","5f40b2df":"markdown","630e4451":"markdown","b706775e":"markdown"},"source":{"3072d1af":"# fastai 0.7.2\n!pip install git+https:\/\/github.com\/fastai\/fastai@e85667cfae2e6873b1bb026195b5d09a74dfcff9\n%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","71ad0135":"from fastai.imports import *\nfrom fastai.structured import *\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics","764e89d7":"PATH = \"..\/input\/\"\n\ndef display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)\n\nimport os\nimport json\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path, nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    types = {\n        \"fullVisitorId\": \"str\", # readme says it should be str\n        \"channelGrouping\": \"str\",\n        \"date\": \"str\",\n        \"socialEngagementType\": \"str\",\n        \"visitId\": \"int32\",\n        \"visitNumber\": \"int8\",\n        \"visitStartTime\": \"int32\",\n    }\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype=types,\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","304b8587":"def split_vals(a,n): \n    return a[:n].copy(), a[n:].copy()\n\ndef rmse(x,y):\n    return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","2f6f2d52":"# df_raw = pd.read_csv(f'{PATH}train_v2.csv', low_memory=False, nrows=500_000, dtype={'fullVisitorId': 'str'})","257bc6af":"# display_all(df_raw.head().T)","eff3e9b6":"# display_all(df_raw.describe(include=\"all\"))","bf2f73c8":"df_raw = load_df(f'{PATH}train_v2.csv', nrows=500_000)","7a4bf462":"display_all(df_raw.head().T)","062bb641":"display_all(df_raw.describe(include=\"all\"))","c03c0a11":"const_cols = [c for c in df_raw.columns if df_raw[c].nunique(dropna=False)==1]\ndf_raw.drop(columns=const_cols + [\"customDimensions\", \"hits\"], inplace=True)","94e0cdf0":"df_test = load_df(f'{PATH}test_v2.csv')","418bab26":"display_all(df_test.head().T)","44a0c7b6":"list((set(df_raw.columns).difference(set(df_test.columns))))","e999583e":"df_raw.drop(columns=['trafficSource.campaignCode'], inplace=True)","5f58b396":"df_test.drop(columns=const_cols + [\"customDimensions\", \"hits\"], inplace=True)","8e5ff26f":"df_raw['totals.transactionRevenue'].fillna(0, inplace=True)\ndf_raw['totals.transactionRevenue'] = df_raw['totals.transactionRevenue'].astype(float)\ndf_raw['totals.transactionRevenue'] = np.log1p(df_raw['totals.transactionRevenue'])","8b985a60":"df_raw[\"visitStartTime\"] = pd.to_datetime(df_raw[\"visitStartTime\"], infer_datetime_format=True, unit=\"s\")\ndf_raw[\"date\"] = pd.to_datetime(df_raw[\"date\"], infer_datetime_format=True, format=\"%Y%m%d\")\nadd_datepart(df_raw, 'date')\nadd_datepart(df_raw, 'visitStartTime')","cf906db5":"df_raw['totals.totalTransactionRevenue'].fillna(0, inplace=True)\ndf_raw['totals.totalTransactionRevenue'] = df_raw['totals.totalTransactionRevenue'].astype('int32')\ndf_raw['totals.transactions'].fillna(0, inplace=True)\ndf_raw['totals.transactions'] = df_raw['totals.transactions'].astype('int8')","307f999f":"df_test['totals.transactionRevenue'].fillna(0, inplace=True)\ndf_test['totals.transactionRevenue'] = df_test['totals.transactionRevenue'].astype(float)\ndf_test['totals.transactionRevenue'] = np.log1p(df_test['totals.transactionRevenue'])","7cddf7ff":"df_test[\"visitStartTime\"] = pd.to_datetime(df_test[\"visitStartTime\"], infer_datetime_format=True, unit=\"s\")\ndf_test[\"date\"] = pd.to_datetime(df_test[\"date\"], infer_datetime_format=True, format=\"%Y%m%d\")\nadd_datepart(df_test, 'date')\nadd_datepart(df_test, 'visitStartTime')","8f973778":"display_all(df_raw.head().T)","f93b539d":"train_cats(df_raw)\ntrain_cats(df_test)","6751f4fe":"os.makedirs('tmp', exist_ok=True)\n# df_raw.to_feather('tmp\/ga-raw')\n# df_test.to_feather('tmp\/ga-test')","ede90e9e":"# df_raw = pd.read_feather('tmp\/ga-raw')\n# df_test = pd.read_feather('tmp\/ga-test')","37e767ea":"# display_all(df_raw.isnull().sum().sort_index()\/len(df_raw))","a3977ec5":"df_trn, y_trn, nas = proc_df(df_raw, 'totals.transactionRevenue')","d0a51c5d":"display_all(df_trn.head().T)","c0a5bdc4":"m = RandomForestRegressor(n_jobs=-1)\nm.fit(df_trn, y_trn)\nm.score(df_trn, y_trn)","3b8d1aa8":"train_required_ratio = 0.8\nn_trn = int(len(df_trn) * train_required_ratio)\n\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)\nX_train.shape, X_valid.shape","2ea4c60a":"m = RandomForestRegressor(n_estimators=10, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","28b60338":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\npreds[:,0], np.mean(preds[:,0]), y_valid[0]\npreds.shape","0edab082":"plt.plot([metrics.r2_score(y_valid, np.mean(preds[:i+1], axis=0)) for i in range(10)]);","a46f9dd6":"m = RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","a4863a71":"set_rf_samples(50_000)","d555e59a":"m = RandomForestRegressor(n_estimators=40, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","7ca1e3da":"reset_rf_samples()","103cb6c8":"m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","e4b44c5c":"df_trn, y_trn, nas = proc_df(df_raw, 'totals.transactionRevenue')\ntrain_required_ratio = 0.8\nn_trn = int(len(df_trn) * train_required_ratio)\n\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)\n\nX_test, y_test, _ = proc_df(df_test, 'totals.transactionRevenue', nas)\nX_train.shape, X_valid.shape, X_test.shape","6bfc5c2e":"m = RandomForestRegressor(n_estimators=100, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)","9565c798":"# rmse(m.predict(X_train), y_train), rmse(m.predict(X_test), y_test), m.score(X_train, y_train), m.score(X_test, y_test), m.oob_score_\nprint_score(m)","4f87a57c":"m.feature_importances_","bb93eda8":"X_train.columns[22]","889438c1":"predictions = m.predict(X_test)","d78a04d4":"set_rf_samples(50000)","268479e7":"m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","2a3e0332":"raw_train, raw_valid = split_vals(df_raw, n_trn)","ff349229":"x = raw_valid.copy()\nx['pred_std'] = np.std(preds, axis=0)\nx['pred'] = np.mean(preds, axis=0)\nx['totals.transactions'].value_counts().plot.barh();","eb0ba7ea":"flds = ['totals.transactions', 'totals.transactionRevenue', 'pred', 'pred_std']\ntr_summ = x[flds].groupby('totals.transactions', as_index=False).mean()\ntr_summ = tr_summ[~pd.isnull(tr_summ['totals.transactionRevenue'])]\ntr_summ.plot('totals.transactions', 'totals.transactionRevenue', 'barh', xlim=(0,25));","189a3eef":"tr_summ.plot('totals.transactions', 'pred', 'barh', xerr='pred_std', alpha=0.6, xlim=(0,25));","9dd8d3eb":"fi = rf_feat_importance(m, df_trn); fi[:30]","e89d231e":"fi.plot('cols', 'imp', figsize=(10,6), legend=False);","77189000":"def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","a59548be":"plot_fi(fi[:30]);","3db11241":"fi[fi.imp>0.0001]","ae991d48":"to_keep = fi[fi.imp>0.0001].cols; len(to_keep)","1d2f6b2b":"df_keep = df_trn[to_keep].copy()\nX_train, X_valid = split_vals(df_keep, n_trn)","e3e01609":"m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5,\n                          n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","3eb18c63":"fi = rf_feat_importance(m, df_keep)\nplot_fi(fi);","84f714a5":"df_trn2, y_trn, nas = proc_df(df_raw, 'totals.transactionRevenue', max_n_cat=7)\nX_train, X_valid = split_vals(df_trn2, n_trn)\n\nm = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","78dfd174":"fi = rf_feat_importance(m, df_trn2)\nplot_fi(fi[:25]);","b0fad735":"from scipy.cluster import hierarchy as hc","a2865ba0":"df_keep = df_trn[to_keep].copy()","4562d040":"corr = np.round(scipy.stats.spearmanr(df_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=df_keep.columns, orientation='left', leaf_font_size=16)\nplt.show()","69c1c025":"def get_oob(df):\n    m = RandomForestRegressor(n_estimators=30, min_samples_leaf=5, max_features=0.6, n_jobs=-1, oob_score=True)\n    x, _ = split_vals(df, n_trn)\n    m.fit(x, y_train)\n    return m.oob_score_","b731bddf":"get_oob(df_keep)","b1bde83a":"for c in ('totals.transactions', 'totals.totalTransactionRevenue'):\n    print(c, get_oob(df_keep.drop(c, axis=1)))","0efba608":"to_drop = ['totals.transactions']\nget_oob(df_keep.drop(to_drop, axis=1))","240a36c4":"df_keep.drop(to_drop, axis=1, inplace=True)\nX_train, X_valid = split_vals(df_keep, n_trn)","8ea59983":"np.save('tmp\/keep_cols.npy', np.array(df_keep.columns))","241320b4":"keep_cols = np.load('tmp\/keep_cols.npy')\ndf_keep = df_trn[keep_cols]","4bb4be93":"reset_rf_samples()","b15bfb9e":"m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","f3b18f66":"!pip install treeinterpreter","d4fea8f7":"from treeinterpreter import treeinterpreter as ti","47cf1622":"df_train, df_valid = split_vals(df_raw[df_keep.columns], n_trn)","825ee93e":"row = X_valid.values[None,0]; row","3b95e5cb":"prediction, bias, contributions = ti.predict(m, row)","e5ef2ea9":"prediction[0], bias[0]","4bec6b3b":"idxs = np.argsort(contributions[0])","7b7e0509":"# [o for o in zip(df_keep.columns[idxs], df_valid.iloc[0][idxs], contributions[0][idxs])]","3b78aa7d":"df_ext = df_keep.copy()\ndf_ext['is_valid'] = 1\ndf_ext.is_valid[:n_trn] = 0\nx, y, nas = proc_df(df_ext, 'is_valid')","90f78745":"m = RandomForestClassifier(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(x, y);\nm.oob_score_","a2fcac49":"fi = rf_feat_importance(m, x); fi[:10]","75665850":"feats=['totals.timeOnSite']","a27563a3":"(X_train[feats]\/1000).describe()","89c0019a":"(X_valid[feats]\/1000).describe()","54f7c62d":"x.drop(feats, axis=1, inplace=True)","e7154e7f":"m = RandomForestClassifier(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(x, y);\nm.oob_score_","7e8df468":"fi = rf_feat_importance(m, x); fi[:10]","63ec5d36":"set_rf_samples(50000)","35635cdd":"feats=['totals.timeOnSite', 'geoNetwork.country', 'totals.hits', 'totals.pageviews']","2ee2667f":"X_train, X_valid = split_vals(df_keep, n_trn)\nm = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","36c924be":"for f in feats:\n    df_subs = df_keep.drop(f, axis=1)\n    X_train, X_valid = split_vals(df_subs, n_trn)\n    m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\n    m.fit(X_train, y_train)\n    print(f)\n    print_score(m)","44d3408b":"reset_rf_samples()","1f51b96f":"df_subs = df_keep.drop(['geoNetwork.country'], axis=1)\nX_train, X_valid = split_vals(df_subs, n_trn)\nm = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","ad6b4acb":"plot_fi(rf_feat_importance(m, X_train));","1181481b":"np.save('tmp\/subs_cols.npy', np.array(df_subs.columns))","13879053":"m = RandomForestRegressor(n_estimators=160, max_features=0.5, n_jobs=-1, oob_score=True)\n%time m.fit(X_train, y_train)\nprint_score(m)","a83e41e9":"X_test = X_test.drop(set(df_raw.columns).difference(set(df_subs.columns)) - {'totals.transactionRevenue'}, axis=1);","e28480bb":"predictions = m.predict(X_test)","c85143cd":"df_actual_test = df_test.copy()","05d5390e":"actual_predicted_revenue = predictions\ndf_actual_test[\"predicted\"] = actual_predicted_revenue\n\ndf_actual_test = df_actual_test[[\"fullVisitorId\" , \"predicted\"]]\ndf_actual_test[\"fullVisitorId\"] = df_actual_test.fullVisitorId.astype('str')\ndf_actual_test[\"predicted\"] = df_actual_test.predicted.astype(np.float)\ndf_actual_test.index = df_actual_test.fullVisitorId\ndf_actual_test = df_actual_test.drop(\"fullVisitorId\",axis=1)","2050f433":"df_actual_test[\"predicted\"].value_counts().iloc[:5]","8d460084":"df_submission_test = pd.read_csv(filepath_or_buffer=\"..\/input\/sample_submission_v2.csv\",index_col=\"fullVisitorId\")\ndf_submission_test.shape","28614dbf":"\"test shape is :{} and submission shape is : {}\".format(df_actual_test.shape , df_submission_test.shape)\nfinal_df = df_actual_test.loc[df_submission_test.index,:]","5f1e7e98":"final_df = final_df[~final_df.index.duplicated(keep='first')]\nfinal_df = final_df.rename(index=str, columns={\"predicted\": \"PredictedLogRevenue\"})","3f19a5ed":"final_df.PredictedLogRevenue.value_counts(bins=3)","1daf122f":"final_df = final_df.fillna(0); final_df.iloc[262153]","1bac8b1a":"final_df.to_csv(\"sub.csv\")","06d2bf14":"# Prepare the submission","a81fa5b6":"Baseline","c561b441":"## Make it stupid, simple","0634297e":"## Bagging","087a1c3c":"# Removing redundant features","9ee40fb0":"A bit better","e86a693a":"## See how much can we overfit - prediction without validation set","b6a179d3":"# Feature Importance","c5dcd057":"# Our final model!","bfc3d3e2":"Not very useful","9dbbd8ca":"# Confidence based on tree variance","40a673f5":"We are predicting the natural log of the sum of all transactions per user. Once the data is updated, as noted above, this will be for all users in test_v2.csv for December 1st, 2018 to January 31st, 2019.","45ca897b":"Data Fields\n\n    fullVisitorId - A unique identifier for each user of the Google Merchandise Store.\n    channelGrouping - The channel via which the user came to the Store.\n    date - The date on which the user visited the Store.\n    device - The specifications for the device used to access the Store.\n    geoNetwork - This section contains information about the geography of the user.\n    socialEngagementType - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n    totals - This section contains aggregate values across the session.\n    trafficSource - This section contains information about the Traffic Source from which the session originated.\n    visitId - An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user. For a completely unique ID, you should use a combination of fullVisitorId and visitId.\n    visitNumber - The session number for this user. If this is the first session, then this is set to 1.\n    visitStartTime - The timestamp (expressed as POSIX time).\n    hits - This row and nested fields are populated for any and all types of hits. Provides a record of all page visits.\n    customDimensions - This section contains any user-level or session-level custom dimensions that are set for a session. This is a repeated field and has an entry for each dimension that is set.\n    totals - This set of columns mostly includes high-level aggregate data.\n","ad1f6f5d":"not much better","3367790e":"# Extrapolation","1a396148":"# Predict on the test data","b162d5f7":"And let's see how this model looks on the full dataset.","5f40b2df":"No effect?","630e4451":"## One-hot encoding","b706775e":"# Tree interpreter\n"}}