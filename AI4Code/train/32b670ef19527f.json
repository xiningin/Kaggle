{"cell_type":{"396c8a04":"code","a962aa2b":"code","f33bc941":"code","b181d153":"code","42adb4b2":"code","e565cb38":"code","6016d1a8":"code","4e2487e0":"markdown","4975e4cd":"markdown","424d0103":"markdown","cc44a2e5":"markdown","e89984cf":"markdown","9caf54e2":"markdown"},"source":{"396c8a04":"from keras.datasets import cifar10\n\n(x_train, y_train), (x_test, y_test) = cifar10.load_data() #\u4f7f\u7528keras\u63d0\u4f9b\u7684api\u8bfb\u53d6\u6570\u636e\n\nnum_classes = 10\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","a962aa2b":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(num_classes, 10, figsize=(15, 15)) # \u65b0\u5efa\u4e00\u4e2a\u5305\u542b100\u5f20\u5b50\u56fe\u768410\u884c10\u5217\u7684\u753b\u5e03\nfor i in range(num_classes): # \u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7269\u4f53\n    indice = np.where(y_train == i)[0] #\u627e\u5230\u6807\u7b7e\u4e3ai\u7684\u56fe\u50cf\u4e0b\u6807\n    for j in range(10): # \u8f93\u51fa\u524d10\u5f20\u56fe\u7247\n        axes[i][j].imshow(x_train[indice[j]])\n        # \u53bb\u9664\u5750\u6807\u523b\u5ea6\n        axes[i][j].set_xticks([]) \n        axes[i][j].set_yticks([])\nplt.tight_layout()\nplt.show()","f33bc941":"from keras.utils import to_categorical\n\n#\u5f52\u4e00\u5316\nx_train = x_train \/ 255\nx_test = x_test \/ 255\n\n#\u5c06\u8bad\u7ec3\u6570\u636e\u7684\u6807\u7b7e\u72ec\u70ed\u7f16\u7801\ny_train = to_categorical(y_train, num_classes)\ny_test = to_categorical(y_test, num_classes)","b181d153":"print(y_train.shape)\nprint(y_train[0])","42adb4b2":"from keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\n\nmodel = Sequential()\n# Conv2D: \u5377\u79ef\u5c42\n# - 32: \u5377\u79ef\u6838\u7684\u4e2a\u6570\n# - (3, 3): \u5377\u79ef\u6838\u5927\u5c0f\n# - padding=\u2019same\u2018\uff1a\u8865\u9f50\u6a21\u5f0f\u56fe\u7247\u5377\u79ef\u540e\u5927\u5c0f\u4e0d\u53d8\n# - input_shape=x_train.shape[1:]: \u5c06\u8f93\u5165\u5927\u5c0f\u544a\u8bc9\u7f51\u7edc\u7684\u7b2c\u4e00\u5c42\uff0c\u65b9\u4fbf\u63a8\u5bfc\u540e\u9762\u6240\u9700\u53c2\u6570\n# - activation=\"relu\": \u4f7f\u7528 relu \u6fc0\u6d3b\u51fd\u6570\nmodel.add(Conv2D(32, (3, 3), padding=\"same\", input_shape=x_train.shape[1:], activation=\"relu\")) \nmodel.add(Conv2D(32, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2)) # \u6700\u5927\u6c60\u5316\u5c42\uff0c\u57282*2\u7684\u533a\u57df\u4e2d\u9009\u53d6\u6700\u5927\u7684\u6570\nmodel.add(Dropout(0.25)) # \u4e22\u5f03\u5c42\uff0c\u968f\u673a\u5c0625%\u7684\u795e\u7ecf\u5143\u8bbe\u4e3a0\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten()) # \u8f6c\u4e3a\u4e00\u7ef4\u6570\u636e\nmodel.add(Dense(512, activation=\"relu\")) # \u5168\u8fde\u63a5\u5c42\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation=\"softmax\")) # \u6700\u540e\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u4f7f\u7528 softmax \u6fc0\u6d3b\u51fd\u6570\uff0c\u8f93\u51fa\u5206\u7c7b\u6982\u7387\n\n# \u4f7f\u7528 model.compile \u7f16\u8bd1\u6a21\u578b\n# - loss='categorical_crossentropy': \u4f7f\u7528\u4ea4\u53c9\u71b5\u4e3a\u635f\u5931\u51fd\u6570\n# - optimizer=\"adam\": \u4f7f\u7528 adam \u4f18\u5316\u5668\n# - metrics=['accuracy']: \u4f7f\u7528\u51c6\u786e\u7387\u4e3a\u6307\u6807\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])","e565cb38":"model.summary()","6016d1a8":"batch_size = 32\nepochs = 5\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","4e2487e0":"## preprocess","4975e4cd":"CIFAR-10\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e8650000\u4e2a\u8bad\u7ec3\u6570\u636e\u4e0e10000\u4e2a\u6d4b\u8bd5\u6570\u636e\u3002\n\n\u56fe\u7247\u662f32\\*32\u5927\u5c0f\u7684RGB\u56fe\u7247\uff0c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7531\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u901a\u90533\u4e2a\u6570\u5b57\u7ec4\u6210\uff080-255)\u3002\n\n\u8f93\u51fay\u7531\u4e00\u4e2a\u6570\u5b57\u8868\u793a\uff0c0\u52309\u8fd910\u4e2a\u6570\u5b57\u5206\u522b\u4ee3\u886810\u7c7b\u7269\u4f53\u3002\n\n0\uff1a\u98de\u673a\uff0c1\uff1a\u6c7d\u8f66\uff0c2\uff1a\u9e1f\uff0c3\uff1a\u732b\uff0c4\uff1a\u9e7f\uff0c5\uff1a\u72d7\uff0c6\uff1a\u9752\u86d9\uff0c7\uff1a\u9a6c\uff0c8\uff1a\u8239\uff0c9\uff1a\u5361\u8f66","424d0103":"## CNN","cc44a2e5":"\u4f7f\u7528 Keras \u642d\u5efa\u4e00\u4e2a\u5982\u4e0b\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\n![cnn.png](attachment:cnn.png)","e89984cf":"## visualization","9caf54e2":"## load data"}}