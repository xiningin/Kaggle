{"cell_type":{"4e1c0541":"code","0135c4f4":"code","5ac0bf44":"code","82ace451":"code","a6a65119":"code","cffcef7b":"code","8301b782":"code","3e50c3f4":"code","5dc74a29":"code","15ee9bec":"code","ef67c23a":"code","c86ac34f":"code","65a3a54b":"code","1e37dc3b":"code","a2a351b0":"code","0a480e23":"code","dec1c428":"code","fa5f65cf":"code","4c9086f4":"code","8058e118":"code","a63abcba":"code","566efb84":"code","7523bc26":"code","15afdd0b":"code","cf742a09":"code","d7f5e82b":"code","cbf8d308":"code","ea9c84cf":"code","7d1f281a":"code","4eb3c34d":"code","2df8a9f1":"code","dea726a1":"code","bbcfd3cf":"code","f318784a":"code","0d9b396c":"code","5a8e1384":"code","60d5bb77":"code","530af0ed":"code","330f7e89":"code","8d6d00fe":"code","4b1e489e":"code","4fca0bb4":"code","23d1aa05":"markdown","5804a8d7":"markdown","2bc58ee9":"markdown","c9e1b449":"markdown","fd48c3c6":"markdown","3da39f98":"markdown","535bd7f4":"markdown","c130515e":"markdown","156d35ae":"markdown","3f676c4f":"markdown","4c189c5a":"markdown","540d8256":"markdown","ec9668f4":"markdown","fc33c242":"markdown","a012c14a":"markdown","6c3a023c":"markdown","6f2afee2":"markdown","cbb2b97b":"markdown","0a27889f":"markdown","e0bb6f50":"markdown","9be53b9c":"markdown","6279430d":"markdown"},"source":{"4e1c0541":"from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom statsmodels.graphics.tsaplots import plot_pacf, plot_acf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.ar_model import AR\n\n!pip install arch >\/dev\/null\nfrom arch.univariate import ARX,  ARCH, GARCH\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_rows', 1000)","0135c4f4":"def parser(s):\n    return datetime.strptime(s[:19], '%Y-%m-%d %H:%M:%S')","5ac0bf44":"df = pd.read_csv(\"\/kaggle\/input\/6-year-nifty50-historical-data-of-5-30-min-candle\/5min_N50_10yr.csv\", usecols = ['date','close'], parse_dates=['date'], date_parser=parser, index_col='date')","82ace451":"df.head(2)","a6a65119":"df.info()","cffcef7b":"def realized_volatility(series):\n    series = np.log(series).diff()\n    return np.sqrt(np.sum(series**2))\ndf.groupby(df.index.date).agg(realized_volatility)","8301b782":"def realized_quarticity(series):\n    series = np.log(series).diff()\n    return np.sum(series**4)*series.shape[0]\/3\ndf.groupby(df.index.date).agg(realized_quarticity)","3e50c3f4":"def realized_quadpower_quarticity(series):\n    series = np.log(series).diff()\n    series = abs(series.rolling(window=4).apply(np.product, raw=True))\n    return (np.sum(series) * series.shape[0] * (np.pi**2))\/4\ndf.groupby(df.index.date).agg(realized_quadpower_quarticity)","5dc74a29":"from scipy.special import gamma","15ee9bec":"def realized_tripower_quarticity(series):\n    series = np.log(series).diff() ** (4\/3)\n    series = abs(series).rolling(window=3).apply(np.prod, raw=True)\n    return series.shape[0]*0.25*((gamma(1\/2)**3)\/(gamma(7\/6)**3))*np.sum(series)\ndf.groupby(df.index.date).agg(realized_quadpower_quarticity)","ef67c23a":"def realized_variance(series):\n    return np.sum(series**2)\ndf.groupby(df.index.date).agg(realized_variance)","c86ac34f":"def bvar(series):\n    series = abs(series).rolling(window=2).apply(np.prod, raw=True)\n    return np.sum(series)*((2\/np.pi)**(-2))\ndf.groupby(df.index.date).agg(bvar)","65a3a54b":"def Jvar(series):\n    series = np.log(series).diff()\n    series = (realized_variance(series)-bvar(series)).apply(lambda x: 0 if x < 0 else x )\n    return series\ndf.groupby(df.index.date).agg(Jvar)[df.groupby(df.index.date).agg(Jvar).close>0]","1e37dc3b":"def Cvar(series):\n    series = np.log(series).diff()\n    series = (realized_variance(series)-Jvar(series)).apply(lambda x: 0 if x < 0 else x )\n    return series","a2a351b0":"df.plot(figsize=(10,10))\nplt.savefig('plot.png')# to save the plot\nplt.show()","0a480e23":"def realized_1(series):\n    series = np.log(series).diff()\n    return np.sqrt(np.sum(series**4)\/(6*np.sum(series**2)))\ndf.groupby(df.index.date).agg(realized_1)","dec1c428":"def realized_2(series):\n    series = np.log(series).diff()\n    return np.sqrt(((np.pi**2)*np.sum(abs(series.rolling(window=4).apply(np.product, raw=True))))\/(8*np.sum(series**2)))\ndf.groupby(df.index.date).agg(realized_2)","fa5f65cf":"df","4c9086f4":"def realized_3(series):\n    series = np.log(series).diff()\n    numerator = (gamma(1\/2)**3)*np.sum((abs(series)**(4\/3)).rolling(window=3).apply(np.prod))\n    denominator = 8 * (gamma(7\/6)**3)*np.sum(series**2)\n    return np.sqrt(numerator\/denominator)\ndf.groupby(df.index.date).agg(realized_3)","8058e118":"data = df[(df.index.minute==25)&(df.index.hour==15)]\ndata.head(2)","a63abcba":"plot_acf(data['close'])\nplt.savefig('acf.png')\nplt.show()","566efb84":"plot_pacf(data['close'])\nplt.savefig('pacf.png')\nplt.show()","7523bc26":"data['simple_returns'] = data.close.pct_change()","15afdd0b":"plot_pacf(data.close.pct_change().dropna())\nplt.savefig('dacf.png')\nplt.show()","cf742a09":"plot_pacf(data.close.pct_change().dropna())\nplt.savefig('dacf.png')\nplt.show()","d7f5e82b":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() ","cbf8d308":"data['log_return'] = log_return(data.close)","ea9c84cf":"plot_pacf(data['log_return'].dropna())\nplt.savefig('dacf.png')\nplt.show()","7d1f281a":"plot_acf(data['log_return'].dropna())\nplt.savefig('dpacf.png')\nplt.show()","4eb3c34d":"data.log_return.plot(figsize=(10,10))\nplt.savefig('log.png')\nplt.show()","2df8a9f1":"data.describe()","dea726a1":"res_ADF = adfuller(data.close, regression='ct')\nprint(f'ADF Statistic: {res_ADF[0]}')\nprint(f'p-value: {res_ADF[1]}')\nprint(f'n_lags: {res_ADF[2]}')\nprint('Critial Values:')\n\nfor key, value in res_ADF[4].items():\n    print(f'   {key}, {value}')  \n    \nprint(f't_stat: {res_ADF[5]}')","bbcfd3cf":"res_ADF = adfuller(data.log_return.dropna(), regression='c')\nprint(f'ADF Statistic: {res_ADF[0]}')\nprint(f'p-value: {res_ADF[1]}')\nprint(f'n_lags: {res_ADF[2]}')\nprint('Critial Values:')\n\nfor key, value in res_ADF[4].items():\n    print(f'   {key}, {value}')  \n\nprint(f't_stat: {res_ADF[5]}')","f318784a":"d = df.copy()\nfor i in range(len(d)-1):\n    if (i+1)%75==0:\n        d['close'][i] = np.nan\n    else:\n        pass\nd['log_return'] = d.close.apply(np.log).diff()\nd = d.dropna()\nd.tail(3)","0d9b396c":"#def p(x):\n#    return x[0]*x[2]\n#(d['log_return']).rolling(window=3).apply(p, raw=True) \n#(d).rolling(window=2).agg(np.prod)","5a8e1384":"plot_pacf(d['close'])\nplt.show()","60d5bb77":"plot_pacf(d['log_return'])\nplt.show()","530af0ed":"res_ADF = adfuller(d.close, regression='ct')\nprint(f'ADF Statistic: {res_ADF[0]}')\nprint(f'p-value: {res_ADF[1]}')\nprint(f'n_lags: {res_ADF[2]}')\nprint('Critial Values:')\n\nfor key, value in res_ADF[4].items():\n    print(f'   {key}, {value}')  \n    \nprint(f't_stat: {res_ADF[5]}')","330f7e89":"res_ADF = adfuller(d.log_return, regression='c')\nprint(f'ADF Statistic: {res_ADF[0]}')\nprint(f'p-value: {res_ADF[1]}')\nprint(f'n_lags: {res_ADF[2]}')\nprint('Critial Values:')\n\nfor key, value in res_ADF[4].items():\n    print(f'   {key}, {value}')  \n    \nprint(f't_stat: {res_ADF[5]}')","8d6d00fe":"ar = ARX(d.log_return, lags=[19])\nprint(ar.fit().summary())","4b1e489e":"ar.volatility = GARCH(p=1, o=1, q=1)\nres = ar.fit(disp=\"off\")\nprint(res.summary())","4fca0bb4":"res.plot()","23d1aa05":"## Importing Libraries","5804a8d7":"## Stationarity Analysis\n\nPrice data","2bc58ee9":"### Augmented Dickey-Fuller Unit root test\nPrice data","c9e1b449":"Simple returns","fd48c3c6":"<a id='daily'><\/a>\n# Daily close price data\n\nIn this section we analyse the daily close price for the stock index","3da39f98":"Log-return data\n","535bd7f4":"## Stationarity Analysis\n\n### Price data","c130515e":"### Ideas to explore","156d35ae":"2 Realized volatility estimators","3f676c4f":"Reject null of unit root for log_return data. Evidence for stationarity of log-returns.","4c189c5a":"### Augmented Dickey-Fuller Unit root test\nPrice data","540d8256":"## Financial returns modelling\nARCH https:\/\/arch.readthedocs.io\/en\/latest\/univariate\/univariate_volatility_modeling.html","ec9668f4":"### Log-returns","fc33c242":"Reject null of unit root for HF log_return data. Evidence for stationarity of log-returns.","a012c14a":"According to academic research on intraday trading we have to remove the overnight return, as our goal is to analyse high-frequency data in this section.","6c3a023c":"## Importing and cleaning data","6f2afee2":"### Table of Contents\n1. [Description](#Desc)\n2. [Daily close](#daily)\n3. [5 minute data](#5min)\n\nThe write up on an introduction to time series data: https:\/\/dspyt.com\/2021\/06\/06\/time-series-data-an-easy-introduction\/","cbb2b97b":"Can not reject null of unit root for HF price data.  Evidence for non-stationarity of log-returns.","0a27889f":"Can not reject null of unit root for price data.  Evidence for non-stationarity of log-returns.","e0bb6f50":"### Log-return data","9be53b9c":"<a id='desc'><\/a>\n# Description\nThe data: 5 minute Nifty50 price data from 2015-01-09 to 2021-03-25\n\nTrading takes place 9:15 to 15:25 (at least in the given data)","6279430d":"<a id='5min'><\/a>\n# 5-minute intraday data"}}