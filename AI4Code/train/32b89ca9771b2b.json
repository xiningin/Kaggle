{"cell_type":{"b6fb4648":"code","2757ac1a":"code","4cd9f8af":"code","c5f656b2":"code","892ea6e6":"code","5570d2e0":"code","4e8cd5d6":"code","ff09bf6e":"code","c41568e9":"code","9f820890":"code","6db16472":"code","b8f97f0f":"code","8ffcf7dd":"code","6260726f":"code","9299d7eb":"code","fde25703":"code","726e242f":"code","e06abad1":"code","797d6cb1":"code","05b59233":"code","b5c2ccfb":"code","7ca6edc7":"code","4f60c006":"code","05f18510":"code","03e8d073":"code","29775653":"code","dc56b534":"code","af782dd9":"code","10e22af8":"code","48fe6ede":"code","459383dc":"markdown","38bee0cf":"markdown","365036e4":"markdown","f236163c":"markdown"},"source":{"b6fb4648":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2757ac1a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n!pip install plotly \nimport plotly.express as px\nimport plotly.graph_objs as go","4cd9f8af":"df = pd.read_csv(\"\/kaggle\/input\/covid19-deaths-dataset\/all_weekly_excess_deaths.csv\")","c5f656b2":"df","892ea6e6":"df.info()","5570d2e0":"df.describe()","4e8cd5d6":"### In the description it was pretty evident that the days have the same value \n# Region code and region signify the same thing\ndf.drop(df.columns[[5]], axis = 1, inplace = True)\ndf_temp = df['end_date'].str.split('-', expand=True)[[1,0]]\ndf['Date'] = df_temp[1] + '\/' + df_temp[0]","ff09bf6e":"\nplt.figure(figsize = (10,10))\nsns.heatmap(df.corr(),square=True, cmap='RdYlGn', annot=True)\n","c41568e9":"## country wise segregation of years \ndf_2020 = df[df.year == 2020]\ndf_2020.reset_index()","9f820890":"## which are the most affercted coutries in the year 2020\ncountries = df_2020['country'].unique()","6db16472":"country_covid = df_2020.groupby('country')['covid_deaths'].apply(lambda g: g.values.tolist()).to_dict()\ncountry_total_death = df_2020.groupby('country')['total_deaths'].apply(lambda g: g.values.tolist()).to_dict()\n ","b8f97f0f":"## Inorder to calculate the total no of death in a country bar\ndef sum_of(x):\n    \n    \"\"\"Standardize the values in a column.\n\n  Args:\n    a dictionary (pandas Series): the dictionary to add .\n\n  Returns:\n    pandas Series: the values of sum of all the elements in  list\n  \"\"\"\n    total = 0\n    dict_country = {}\n    for key, value in x.items():\n        for ele in range(0, len(value)):\n            total = total + value[ele]\n            dict_country[key] = total\n    return dict_country\n","8ffcf7dd":"covid_death = sum_of(country_covid)\nTotal_death = sum_of(country_total_death)","6260726f":"covid = list(covid_death.values())\nCovi = sum(covid)\nCovi","9299d7eb":"Nat_d = list(Total_death.values())\ntotal = sum(Nat_d)","fde25703":"fig, ax = plt.subplots(figsize = (20,35))\nax.barh(list(covid_death.keys()), list(covid_death.values()), align='center',color = '#40E0D0' )\nax.xaxis.set_tick_params(pad = 5)\nax.yaxis.set_tick_params(pad = 10)\nfor i in ax.patches:\n    plt.text(i.get_width()+0.2, i.get_y()+0.5,\n             str(round((i.get_width()), 2)),\n             fontsize = 15, fontweight ='bold',\n             color ='black')\nax.grid(b = True, color ='grey',\n        linestyle ='-.', linewidth = 1,\n        alpha = 0.2)\nax.set_xticks(range(len(covid_death)), list(covid_death.keys()))\n\nax.legend()\nax.tick_params(rotation=0)\n\n \nax.set_ylabel('Deaths')\nax.set_title('camapitive analysis of various countriers',fontsize=18)","726e242f":"\n\nfig, ax = plt.subplots(figsize = (20,35))\n\nax.barh(list(covid_death.keys()), list(Total_death.values()), align='center', )\nfor i in ax.patches:\n    plt.text(i.get_width()+0.2, i.get_y()+0.5,\n             str(round((i.get_width()), 2)),\n             fontsize = 15, fontweight ='bold',\n             color ='black')\nax.grid(b = True, color ='grey',\n        linestyle ='-.', linewidth = 1,\n        alpha = 0.2)\nax.set_xticks(range(len(covid_death)), list(covid_death.keys()))\n\nax.legend()\nax.tick_params(rotation=0)\n\n \nax.set_ylabel('Deaths')\nax.set_title('camapitive analysis of various countriers',fontsize=18)","e06abad1":"## no of natuaral death \nnatural = total-Covi","797d6cb1":"natural","05b59233":"labels = 'Death(corona)','Death(naturaly)'\nsizes = [31220282.0,302739714.0]\n \nexplode = (0.4, 0.2) \nfig1, ax1 = plt.subplots(figsize =(10, 7))\nax1.pie(sizes, explode=explode, labels=labels,autopct='%1.1f%%',shadow = True,\n                                  \n                                  textprops = dict(color =\"black\"))\nax1.set_title('Distribuation of death')\n\nplt.show()\n","b5c2ccfb":"df_2021 = df[df.year == 2021]","7ca6edc7":"df_2021.reset_index()","4f60c006":"df_2021.describe()","05f18510":"country_covid = df_2021.groupby('country')['covid_deaths'].apply(lambda g: g.values.tolist()).to_dict()\ncountry_total_death = df_2021.groupby('country')['total_deaths'].apply(lambda g: g.values.tolist()).to_dict()\ndeath = df_2021.groupby('country')['non_covid_deaths'].apply(lambda g: g.values.tolist()).to_dict()","03e8d073":"covid_death = sum_of(country_covid)\nTotal_death = sum_of(country_total_death)\ndeath_without = sum_of(death)","29775653":"covid_without = list(death_without.values())\nCovi_not = sum(covid_without)\nCovi_not","dc56b534":"covid = list(covid_death.values())\nCovi = sum(covid)\nCovi","af782dd9":"# As long as we haven't plotted anything else into this axis,\n# we know the rectangles in it are our barplot bars\n# and we know the order, so we can match up graphic and calculations:\ndef without_hue(plot, feature):\n    total = len(feature)\n    for p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\nplt.show()\nplt.figure(figsize=(16,8))\nax = sns.barplot(data=df_2021, x='total_deaths', y='Date', color='lightblue', label='Total Deaths')\nax2 = sns.barplot(data=df_2021, x='covid_deaths', y='Date', color='grey', label='Covid Deaths')\nplt.xlabel(xlabel = 'Number of Deaths',fontsize=16, fontweight='bold')\nplt.ylabel(ylabel = 'Date',fontsize=16, fontweight='bold')\nplt.legend()\nwithout_hue(ax,df['covid_deaths'])\nwithout_hue(ax2,df['total_deaths'])","10e22af8":"### we can see the countries affected in 2021 till date\n\nfig = px.choropleth(df_2021.rename(columns={'covid_deaths':'Covid Deaths'}), \n                    locations='country',\n                    locationmode = 'country names',\n                    color='Covid Deaths',\n                    color_continuous_scale=\"RdYlGn\",\n                    range_color=(0, 20000),\n                    animation_frame='Date'\n                   )\nfig.update_layout(geo=dict(\n                  showframe = True,\n                  showcoastlines = True)\n                )\nfig.show()","48fe6ede":"df_USA = df[df['country']=='United States']\nfig = px.choropleth(df_USA[df_USA['region_code']!='USA'].rename(columns={'covid_deaths':'Covid Deaths'}),\n                    locations='region_code',\n                    locationmode = 'USA-states',\n                    color='Covid Deaths', \n                    color_continuous_scale = 'Reds',\n                    animation_frame='Date',\n                    scope='usa'\n                   )\nfig.update_layout(geo=dict(\n                  showframe = False,\n                  showcoastlines = True),\n                  margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n                ","459383dc":"**we can see the corelation very evidently\nFirst we will see the trend which country recorded the maximum no deaths**","38bee0cf":"## EDA ON THE DATA SET","365036e4":"## THIS WAS THE ANALYSIS FOR YEAR 2020\n# ANALYSIS FOR THE YEAR 2021","f236163c":"## The rate of death has increased\n## we have seen in both the analysis USA has been the most affected country\n# Let us analyze how cases shown variation in USA"}}