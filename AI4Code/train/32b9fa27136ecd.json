{"cell_type":{"5abba62b":"code","e1f27f80":"code","b8a2e0dc":"code","4fc61311":"code","986d0e7a":"code","fb947fdb":"code","76f4d6bf":"code","bf6c90c1":"code","476d25d0":"code","587a3080":"code","f8aabae3":"code","45b31d00":"code","e236cc72":"code","5be8e8a5":"code","7ba7f96e":"code","3eb8f7b0":"code","9ff2da19":"code","9cbc7264":"code","fa1eb3db":"markdown","b666920d":"markdown","dd8f1694":"markdown","f2b3bdc3":"markdown","b355b493":"markdown","d1d19aac":"markdown","1d395447":"markdown","1bdf0136":"markdown","9a0393da":"markdown","06aca867":"markdown","fb915e6f":"markdown","d81ff0aa":"markdown"},"source":{"5abba62b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_squared_error, mean_squared_log_error\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers.experimental import preprocessing\n\nfrom pandas_profiling import ProfileReport\n\nsns.set(style='whitegrid', font_scale=1.5)\n\nINPUT_DIR = '..\/input\/house-prices-advanced-regression-techniques'\n\nTARGET = 'SalePrice'\nRANDOM_STATE = 42","e1f27f80":"dtypes = {\n    'MSSubClass': str,\n}","b8a2e0dc":"full_train_df = pd.read_csv(f'{INPUT_DIR}\/train.csv')\nfull_test_df = pd.read_csv(f'{INPUT_DIR}\/test.csv')\nfull_comb_df = pd.concat([full_train_df, full_test_df], ignore_index=True)\n\nfor col_, type_ in dtypes.items():\n    full_comb_df[col_] = full_comb_df[col_].astype(type_)","4fc61311":"full_train_df.info()\nfull_train_df","986d0e7a":"profile = ProfileReport(full_train_df, progress_bar=False, minimal=True)\nprofile.to_file('full_train_df.html')\nprofile.to_notebook_iframe()","fb947fdb":"corrmat = full_train_df.corr()\n\nplt.figure(figsize=(10, 17))\nsns.barplot(y=corrmat[TARGET].sort_values().index, x=corrmat[TARGET].sort_values().values)\nplt.xlabel(f'correlation between `{TARGET}`')\nplt.show()","76f4d6bf":"def fill_missing_data(df: pd.DataFrame):\n    for col_ in df.columns:\n        if df[col_].dtype == 'object':\n            # fill 'NONE' for categorical features\n            df[col_].fillna('NONE', inplace=True)\n        else:\n            # fill median for numerical features\n            df[col_].fillna(df[col_].median(), inplace=True)\n        \nfill_missing_data(full_comb_df)","bf6c90c1":"CATEGORIAL_FEATURES = list(filter(\n    lambda col_: full_comb_df[col_].dtype == 'object', full_comb_df.columns))\ncomb_df = full_comb_df.join(pd.get_dummies(full_comb_df[CATEGORIAL_FEATURES]))\ncomb_df","476d25d0":"LOG_TRANSFORMATION_COLUMNS = [\n    'LotFrontage',\n    'LotArea',\n    'MasVnrArea',\n    'BsmtFinSF1',\n    'BsmtFinSF2',\n    'BsmtUnfSF',\n    'TotalBsmtSF',\n    '1stFlrSF',\n    '2ndFlrSF',\n    'LowQualFinSF',\n    'GrLivArea',\n    'GarageArea',\n    'WoodDeckSF',\n    'OpenPorchSF',\n    'EnclosedPorch',\n    '3SsnPorch',\n    'ScreenPorch',\n    'PoolArea',\n    'SalePrice'\n]\n\nfor col_ in LOG_TRANSFORMATION_COLUMNS:\n    comb_df[col_] = np.log1p(comb_df[col_])","587a3080":"FEATURES = comb_df.columns.drop(['Id', TARGET])\n# Discard non-numerical features\nFEATURES = list(filter(lambda x: comb_df[x].dtype != 'object', FEATURES))\nFEATURES[:10]","f8aabae3":"train_df = comb_df.copy()\ntrain_df = train_df[train_df.Id.isin(full_train_df.Id)]\n\nX_train, X_valid, y_train, y_valid = train_test_split(train_df[FEATURES], train_df[TARGET], test_size=0.2, random_state=RANDOM_STATE)\n_, X_valid_with_id, _, _ = train_test_split(train_df.drop(TARGET, axis=1), train_df[TARGET], test_size=0.2, random_state=RANDOM_STATE)\n\ntest_df = comb_df.copy()\ntest_df = test_df[test_df.Id.isin(full_test_df.Id)]\n\nX_test = test_df[FEATURES]","45b31d00":"scaler = MinMaxScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_valid = scaler.transform(X_valid)\nX_test = scaler.transform(X_test)","e236cc72":"tf.keras.backend.clear_session()\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(1, activation='linear')\n])\n\nmodel.compile(\n    loss='mse',\n    optimizer=tf.keras.optimizers.Adam(0.01),\n    metrics=['mse']\n)\n\nmodel.summary()","5be8e8a5":"%%time\n\nEPOCHS = 1000\n\nearly_stop = tf.keras.callbacks.EarlyStopping(monitor='val_mse', patience=25)\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    batch_size=256,\n    verbose=0,\n    epochs=EPOCHS,\n    validation_data=(X_valid, y_valid),\n    callbacks=[early_stop]\n)","7ba7f96e":"TRACE_START = 50\nmse = history.history['mse']\nval_mse = history.history['val_mse']\n\nepochs_range = range(len(mse))\n\nplt.figure(figsize=(20, 8))\nplt.plot(epochs_range, mse, label='Training MSE')\nplt.plot(epochs_range, val_mse, label='Validation MSE')\nplt.legend(loc='upper right')\nplt.xlabel('Epoch')\nplt.ylabel('MSE')\nplt.title('Training and Validation MSE')\nplt.xlim(TRACE_START, len(mse))\nplt.ylim(0, 0.04)\n\nplt.show()","3eb8f7b0":"model.evaluate(X_valid, y_valid, verbose=0)","9ff2da19":"valid_prediction_df = pd.DataFrame(data={\n    'Id': X_valid_with_id['Id'],\n    'pred_price_log1p': model.predict(X_valid).ravel(),\n    'true_price_log1p': y_valid\n})\n\nplt.figure(figsize=(20, 7))\nax = sns.lineplot(data=valid_prediction_df, x='Id', y='true_price_log1p', label='ground truth')\nsns.lineplot(data=valid_prediction_df, x='Id', y='pred_price_log1p', label='prediction', ax=ax)\nax.set_ylabel('Price (log1p)')\nplt.show()","9cbc7264":"test_df[TARGET] = np.exp(model.predict(X_test)) - 1\nsubmission_df = test_df[['Id', TARGET]]\nsubmission_df.to_csv(f'output.csv', index=False)\nsubmission_df","fa1eb3db":"# <center style=\"background-color:#99bbff; width:60%;\">Content<\/center>\n\n1. [Load](#1)\n2. [EDA](#2)\n3. [Preprocessing](#3)\n    - [3-1 Fill missing data](#3-1)\n    - [3-2 One Hot Encode](#3-2)\n    - [3-3 Log transformation](#3-3)\n    - [3-4 Prepare training & testing sets](#3-4)\n    - [3-5 Normalization](#3-5)\n4. [Train DNN model](#4)\n4. [Submit](#5)","b666920d":"- SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n- MSSubClass: The building class\n- MSZoning: The general zoning classification\n- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- Street: Type of road access\n- Alley: Type of alley access\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- LandSlope: Slope of property\n- Neighborhood: Physical locations within Ames city limits\n- Condition1: Proximity to main road or railroad\n- Condition2: Proximity to main road or railroad (if a second is present)\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- OverallQual: Overall material and finish quality\n- OverallCond: Overall condition rating\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st: Exterior covering on house\n- Exterior2nd: Exterior covering on house (if more than one material)\n- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n- ExterQual: Exterior material quality\n- ExterCond: Present condition of the material on the exterior\n- Foundation: Type of foundation\n- BsmtQual: Height of the basement\n- BsmtCond: General condition of the basement\n- BsmtExposure: Walkout or garden level basement walls\n- BsmtFinType1: Quality of basement finished area\n- BsmtFinSF1: Type 1 finished square feet\n- BsmtFinType2: Quality of second finished area (if present)\n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area\n- Heating: Type of heating\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- Electrical: Electrical system\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- GrLivArea: Above grade (ground) living area square feet\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- FullBath: Full bathrooms above grade\n- HalfBath: Half baths above grade\n- Bedroom: Number of bedrooms above basement level\n- Kitchen: Number of kitchens\n- KitchenQual: Kitchen quality\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Functional: Home functionality rating\n- Fireplaces: Number of fireplaces\n- FireplaceQu: Fireplace quality\n- GarageType: Garage location\n- GarageYrBlt: Year garage was built\n- GarageFinish: Interior finish of the garage\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n- PavedDrive: Paved driveway\n- WoodDeckSF: Wood deck area in square feet\n- OpenPorchSF: Open porch area in square feet\n- EnclosedPorch: Enclosed porch area in square feet\n- 3SsnPorch: Three season porch area in square feet\n- ScreenPorch: Screen porch area in square feet\n- PoolArea: Pool area in square feet\n- PoolQC: Pool quality\n- Fence: Fence quality\n- MiscFeature: Miscellaneous feature not covered in other categories\n- MiscVal: Value of miscellaneous feature\n- MoSold: Month Sold\n- YrSold: Year Sold\n- SaleType: Type of sale\n- SaleCondition: Condition of sale","dd8f1694":"<a id='3-3'><\/a><br\/>\n## Log transformation","f2b3bdc3":"<a id='3-5'><\/a><br\/>\n## Normalization","b355b493":"<a id='3-2'><\/a><br\/>\n## One Hot Encode","d1d19aac":"<a id='2'><\/a><br\/>\n# <center style=\"background-color:#99bbff; width:60%;\">EDA<\/center>","1d395447":"<a id='3-1'><\/a><br\/>\n## Fill missing data","1bdf0136":"<a id='4'><\/a><br\/>\n# <center style=\"background-color:#99bbff; width:60%;\">Train DNN model<\/center>","9a0393da":"<a id='5'><\/a><br\/>\n# <center style=\"background-color:#99bbff; width:60%;\">Submit<\/center>","06aca867":"<a id='3'><\/a><br\/>\n# <center style=\"background-color:#99bbff; width:60%;\">Preprocessing<\/center>","fb915e6f":"<a id='1'><\/a><br\/>\n# <center style=\"background-color:#99bbff; width:60%;\">Load<\/center>","d81ff0aa":"<a id='3-4'><\/a><br\/>\n## Prepare training & testing sets"}}