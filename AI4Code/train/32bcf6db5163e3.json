{"cell_type":{"30f8af5a":"code","ab35fce9":"code","ba6a9396":"code","77f4897a":"code","b2994de5":"code","433d7f5c":"code","6037c94b":"code","33fa6960":"code","0d3ff823":"code","a683d5da":"code","2ec26680":"code","eeb6ce48":"markdown","38528c52":"markdown","c2324976":"markdown","b4626aef":"markdown","9371c5ca":"markdown","cb0c3bb8":"markdown","d0257b91":"markdown","dfcae1ce":"markdown","5fabf8ad":"markdown","d82822db":"markdown"},"source":{"30f8af5a":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import log_loss\nimport warnings\nwarnings.filterwarnings('ignore')","ab35fce9":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\ntrain_scores = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\nsubmission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","ba6a9396":"train_features['WHERE'] = 'train'\ntest_features['WHERE'] = 'test'\ndata = train_features.append([test_features])\nCOLS = ['cp_type', 'cp_dose']\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)","77f4897a":"data['cp_Time'] = (data['cp_time'] - data['cp_time'].min())\/(data['cp_time'].max() - data['cp_time'].min())\nFE += ['cp_Time']\ndata_new = data.copy()\nfor i in data.columns[4:-6]:\n    data_new[f'{i}_new'] = (data[f'{i}']-data[f'{i}'].min())\/(data[f'{i}'].max() - data[f'{i}'].min())\n    FE.append(f'{i}_new')","b2994de5":"train_features = data_new.loc[data_new.WHERE=='train']\ntest_features = data_new.loc[data_new.WHERE=='test']","433d7f5c":"folds = train_scores.copy()\nTARGET = folds.columns[1:]\nN_FOLD = 10\nFold = GroupKFold(n_splits=N_FOLD)\ngroups = folds['sig_id'].values\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[TARGET], groups)):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)","6037c94b":"def run_single_model(clf, train_df, test_df, folds, features, target, fold_num=0):\n    trn_idx = folds[folds.fold!=fold_num].index\n    val_idx = folds[folds.fold==fold_num].index\n    \n    y_tr = target.iloc[trn_idx].values\n    X_tr = train_df.iloc[trn_idx][features].values\n    y_val = target.iloc[val_idx].values\n    X_val = train_df.iloc[val_idx][features].values\n    \n    oof = np.zeros((len(train_df),206))\n    predictions = np.zeros((len(test_df),206))\n    clf.fit(X_tr, y_tr)\n    \n    oof[val_idx] = clf.predict(X_val)\n    predictions += clf.predict(test_df[features])\n    return oof, predictions","33fa6960":"def run_kfold_model(clf, train, test, folds, features, target, n_fold=9):\n    \n    # n_fold from 5 to 7\n    \n    oof = np.zeros((len(train),206))\n    predictions = np.zeros((len(test),206))\n    feature_importance_df = pd.DataFrame()\n\n    for fold_ in range(n_fold):\n\n        _oof, _predictions = run_single_model(clf,train, test, folds, features, target, fold_num = fold_)\n\n        oof += _oof\n        predictions += _predictions\/n_fold\n    \n    return oof, predictions","0d3ff823":"somthing_rate = 5e-4\nP_MIN = somthing_rate\nP_MAX = 1 - P_MIN\n\ndef loss_fn(yt, yp):\n    yp = np.clip(yp, P_MIN, P_MAX)\n    return log_loss(yt, yp, labels=[0,1])\n\ndef metric(y_true, y_pred):\n    metrics = []\n    for _target in train_scores.columns[1:]:\n        metrics.append(loss_fn(y_true.loc[:, _target], y_pred.loc[:, _target].astype(float)))\n    return np.mean(metrics)","a683d5da":"for alpha1 in [0.3]:\n    for l1s in [0.8]:\n        \n        print(\" For alpha:\",alpha1,\"& l1_ratio:\",l1s)\n        clf = ElasticNet(alpha=alpha1, l1_ratio = l1s, tol=0.01, max_iter=5000)\n        oof, predictions = run_kfold_model(clf, train_features, test_features, folds, FE, train_scores[train_scores.columns[1:]], n_fold=N_FOLD)\n        train_new_scores = train_scores.copy()\n        train_new_scores[train_new_scores.columns[1:]] = oof\n        print(metric(train_scores[train_scores.columns[1:]], train_new_scores[train_new_scores.columns[1:]]))\n        submission[submission.columns[1:]] = predictions","2ec26680":"submission.to_csv('submission.csv',index=False)","eeb6ce48":"# 2. Reading In Data","38528c52":"# 5. Single Fold","c2324976":"# 6. N-Folds","b4626aef":"# 1. Necessary Imports","9371c5ca":"# 9. Submitting the kernel","cb0c3bb8":"### Plz upvote if you find it useful.","d0257b91":"# 3. Categorical Encoding and Normalizing","dfcae1ce":"# 8. Running the Model and Getting Prediction","5fabf8ad":"# 4. Creating Folds","d82822db":"# 7.Metric"}}