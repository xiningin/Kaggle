{"cell_type":{"99d30d6c":"code","7024a11c":"code","d62008d1":"code","5afa3f60":"code","e19b65a2":"code","30408873":"code","c7808404":"code","54329eb2":"code","342e7a55":"code","baa6c6ee":"code","1d0e7348":"code","a12309cd":"code","34352fd0":"code","f7a2f14d":"code","c68dc1e2":"code","4ae8fd68":"code","0bf78a61":"code","bd04a1ea":"code","ddfdd256":"code","87ad318d":"code","d266727f":"code","a5ba4614":"code","5bfb3826":"code","83b6587b":"code","9159b9ec":"code","59fdac11":"code","9fd51872":"code","29972493":"code","aea9099c":"code","d2fa7708":"code","05ba7c8d":"code","ed7a2191":"code","45c95af7":"code","3a274ac0":"code","ca518b30":"code","f172f3c6":"code","0430bac0":"code","931e7705":"code","1ef98f7c":"code","9512bac4":"code","3207fd57":"code","ba97504c":"code","fa79369d":"code","a8e6f8dc":"code","7aa7f87a":"code","31f1927e":"code","4a073d7c":"code","6a686816":"code","a4859faa":"code","8517cbb5":"code","1f367a0c":"code","d6c2fcd7":"code","260f297a":"code","f4871b7c":"code","37492ecb":"markdown","45cbf00a":"markdown","36aefe89":"markdown","11884a32":"markdown","30675d01":"markdown","2ce20011":"markdown","97dfe192":"markdown","ec4e04a8":"markdown","be9407bc":"markdown","fee2598e":"markdown","189ece60":"markdown","3e130270":"markdown"},"source":{"99d30d6c":"W475 = [.2]*5","7024a11c":"import os\nimport gc\nimport sys\nimport cv2\nimport math\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.svm import SVR\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold,StratifiedKFold\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.optim import Adam, lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom transformers import (AutoModel, AutoTokenizer, \n                          AutoModelForSequenceClassification)\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nsr_ = Style.RESET_ALL","d62008d1":"train_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\n\ntarget = train_data['target'].to_numpy()\nbins = train_data.bins.to_numpy()\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","5afa3f60":"config = {\n    'batch_size':128,\n    'max_len':256,\n    'nfolds':5,\n    'seed':42,\n}\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])","e19b65a2":"class CLRPDataset(Dataset):\n    def __init__(self,df,tokenizer):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],return_tensors='pt',\n                                max_length=config['max_len'],\n                                padding='max_length',truncation=True)\n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)","30408873":"class AttentionHead(nn.Module):\n    def __init__(self, in_features, hidden_dim, num_targets):\n        super().__init__()\n        self.in_features = in_features\n        self.middle_features = hidden_dim\n\n        self.W = nn.Linear(in_features, hidden_dim)\n        self.V = nn.Linear(hidden_dim, 1)\n        self.out_features = hidden_dim\n\n    def forward(self, features):\n        att = torch.tanh(self.W(features))\n\n        score = self.V(att)\n\n        attention_weights = torch.softmax(score, dim=1)\n\n        context_vector = attention_weights * features\n        context_vector = torch.sum(context_vector, dim=1)\n\n        return context_vector","c7808404":"class Model(nn.Module):\n    def __init__(self):\n        super(Model,self).__init__()\n        self.roberta = AutoModel.from_pretrained('..\/input\/roberta-base')    \n        self.head = AttentionHead(768,768,1)\n        self.dropout = nn.Dropout(0.1)\n        self.linear = nn.Linear(self.head.out_features,1)\n\n    def forward(self,**xb):\n        x = self.roberta(**xb)[0]\n        x = self.head(x)\n        return x","54329eb2":"def get_embeddings(df,path,plot_losses=True, verbose=True):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    model = Model()\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    model.eval()\n    \n    tokenizer = AutoTokenizer.from_pretrained('..\/input\/roberta-base')\n    \n    ds = CLRPDataset(df,tokenizer)\n    dl = DataLoader(ds,\n                  batch_size = config[\"batch_size\"],\n                  shuffle=False,\n                  num_workers = 4,\n                  pin_memory=True,\n                  drop_last=False\n                 )\n        \n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0],-1).to(device) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs.detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)","342e7a55":"# train_embeddings1 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\n# test_embeddings1 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\n\n# train_embeddings2 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\n# test_embeddings2 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\n\n# train_embeddings3 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\n# test_embeddings3 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\n\n# train_embeddings4 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\n# test_embeddings4 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\n\n# train_embeddings5 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')\n# test_embeddings5 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')","baa6c6ee":"def get_preds_svm(X,y,X_test,bins=bins,nfolds=5,C=10,kernel='rbf'):\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    \n    kfold = StratifiedKFold(n_splits=config['nfolds'],shuffle=True,random_state=config['seed'])\n    for k, (train_idx,valid_idx) in enumerate(kfold.split(X,bins)):\n        model = SVR(C=C,kernel=kernel,gamma='auto')\n        X_train,y_train = X[train_idx], y[train_idx]\n        X_valid,y_valid = X[valid_idx], y[valid_idx]\n        \n        model.fit(X_train,y_train)\n        prediction = model.predict(X_valid)\n        score = rmse_score(prediction,y_valid)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds","1d0e7348":"# svm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1).mean(axis=1)\n# svm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\n# svm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\n# svm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\n# svm_preds5 = get_preds_svm(train_embeaddings5,target,test_embeddings5).mean(axis=1)","a12309cd":"# train_embeddings1 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\n# test_embeddings1 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\n# svm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1)","34352fd0":"train_embeddings1 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\ntest_embeddings1 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\nsvm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1).mean(axis=1)\ndel train_embeddings1,test_embeddings1\ngc.collect()\n\ntrain_embeddings2 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\ntest_embeddings2 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\nsvm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\ndel train_embeddings2,test_embeddings2\ngc.collect()\n\ntrain_embeddings3 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\ntest_embeddings3 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\nsvm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\ndel train_embeddings3,test_embeddings3\ngc.collect()\n\ntrain_embeddings4 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\ntest_embeddings4 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\nsvm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\ndel train_embeddings4,test_embeddings4\ngc.collect()\n\ntrain_embeddings5 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')\ntest_embeddings5 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')\nsvm_preds5 = get_preds_svm(train_embeddings5,target,test_embeddings5).mean(axis=1)\ndel train_embeddings5,test_embeddings5\ndel train_data, test_data\ngc.collect()","f7a2f14d":"# svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\nsvm_preds475 = svm_preds1*W475[0] + svm_preds2*W475[1] + \\\n    svm_preds3*W475[2] + svm_preds4*W475[3] + svm_preds5*W475[4]","c68dc1e2":"# svm_preds475 = svm_preds\nsvm_preds475[:10]","4ae8fd68":"W476 = [.2]*5","0bf78a61":"import os\nimport gc\nimport sys\nimport cv2\nimport math\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.svm import SVR\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold,StratifiedKFold\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.optim import Adam, lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom transformers import (AutoModel, AutoTokenizer, \n                          AutoModelForSequenceClassification)\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nsr_ = Style.RESET_ALL","bd04a1ea":"train_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\n\ntarget = train_data['target'].to_numpy()\nbins = train_data.bins.to_numpy()\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","ddfdd256":"config = {\n    'batch_size':128,\n    'max_len':256,\n    'nfolds':5,\n    'seed':42,\n}\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])","87ad318d":"class CLRPDataset(Dataset):\n    def __init__(self,df,tokenizer):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],return_tensors='pt',\n                                max_length=config['max_len'],\n                                padding='max_length',truncation=True)\n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)","d266727f":"class AttentionHead(nn.Module):\n    def __init__(self, in_features, hidden_dim, num_targets):\n        super().__init__()\n        self.in_features = in_features\n        self.middle_features = hidden_dim\n\n        self.W = nn.Linear(in_features, hidden_dim)\n        self.V = nn.Linear(hidden_dim, 1)\n        self.out_features = hidden_dim\n\n    def forward(self, features):\n        att = torch.tanh(self.W(features))\n\n        score = self.V(att)\n\n        attention_weights = torch.softmax(score, dim=1)\n\n        context_vector = attention_weights * features\n        context_vector = torch.sum(context_vector, dim=1)\n\n        return context_vector","a5ba4614":"class Model(nn.Module):\n    def __init__(self):\n        super(Model,self).__init__()\n        self.roberta = AutoModel.from_pretrained('..\/input\/roberta-base')    \n        self.head = AttentionHead(768,768,1)\n        self.dropout = nn.Dropout(0.1)\n        self.linear = nn.Linear(self.head.out_features,1)\n\n    def forward(self,**xb):\n        x = self.roberta(**xb)[0]\n        x = self.head(x)\n        return x","5bfb3826":"def get_embeddings(df,path,plot_losses=True, verbose=True):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    model = Model()\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    model.eval()\n    \n    tokenizer = AutoTokenizer.from_pretrained('..\/input\/roberta-base')\n    \n    ds = CLRPDataset(df,tokenizer)\n    dl = DataLoader(ds,\n                  batch_size = config[\"batch_size\"],\n                  shuffle=False,\n                  num_workers = 4,\n                  pin_memory=True,\n                  drop_last=False\n                 )\n        \n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0],-1).to(device) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs.detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)","83b6587b":"def get_preds_svm(X,y,X_test,bins=bins,nfolds=5,C=20,kernel='rbf'):\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    \n    kfold = StratifiedKFold(n_splits=config['nfolds'],shuffle=True,random_state=config['seed'])\n    for k, (train_idx,valid_idx) in enumerate(kfold.split(X,bins)):\n        model = SVR(C=C,kernel=kernel,gamma='auto')\n        X_train,y_train = X[train_idx], y[train_idx]\n        X_valid,y_valid = X[valid_idx], y[valid_idx]\n        \n        model.fit(X_train,y_train)\n        prediction = model.predict(X_valid)\n        score = rmse_score(prediction,y_valid)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds","9159b9ec":"train_embeddings1 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\ntest_embeddings1 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model0\/model0.bin')\nsvm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1).mean(axis=1)\ndel train_embeddings1,test_embeddings1\ngc.collect()\n\ntrain_embeddings2 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\ntest_embeddings2 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model1\/model1.bin')\nsvm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\ndel train_embeddings2,test_embeddings2\ngc.collect()\n\ntrain_embeddings3 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\ntest_embeddings3 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model2\/model2.bin')\nsvm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\ndel train_embeddings3,test_embeddings3\ngc.collect()\n\ntrain_embeddings4 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\ntest_embeddings4 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model3\/model3.bin')\nsvm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\ndel train_embeddings4,test_embeddings4\ngc.collect()\n\ntrain_embeddings5 =  get_embeddings(train_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')\ntest_embeddings5 = get_embeddings(test_data,'..\/input\/clrprobertamodels\/model4\/model4.bin')\nsvm_preds5 = get_preds_svm(train_embeddings5,target,test_embeddings5).mean(axis=1)\ndel train_embeddings5,test_embeddings5\ndel train_data, test_data\ngc.collect()","59fdac11":"# svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\nsvm_preds476 = svm_preds1*W476[0] + svm_preds2*W476[1] + \\\n    svm_preds3*W476[2] + svm_preds4*W476[3] + svm_preds5*W476[4]","9fd51872":"W4780 = [.2]*5","29972493":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\ncolor = sns.color_palette()\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nos.listdir(\"..\/input\/commonlitreadabilityprize\")\nfrom nltk.corpus import stopwords\nimport string\neng_stopwords = set(stopwords.words(\"english\"))\npd.options.mode.chained_assignment = None","aea9099c":"from sklearn.svm import SVR\nimport random\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom tqdm import tqdm\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.nn import Parameter\nimport torch.nn.functional as F\nfrom torch.optim import Adam, lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.optim.optimizer import Optimizer\nfrom torch.optim.lr_scheduler import _LRScheduler\nfrom torch.optim.lr_scheduler import (CosineAnnealingWarmRestarts, CosineAnnealingLR, \n                                      ReduceLROnPlateau)\n\nfrom transformers import (AutoModel, AutoTokenizer, \n                          AutoModelForSequenceClassification,get_constant_schedule_with_warmup)\n\ntrain_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\ntarget = train_data['target'].to_numpy()\n\n#for kfold  \nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\nbins = train_data.bins.to_numpy()\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))\n\nconfig = {\n    'batch_size':32,\n    'max_len':512,\n    'seed':23,\n}\n\ndef seed_everything(seed=23):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])\n\nclass CLRPDataset(nn.Module):\n    def __init__(self,df,tokenizer,max_len=128):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],\n                                return_tensors='pt',\n                                max_length=self.max_len,\n                                padding='max_length',\n                                truncation=True)  \n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)\n    \ndef get_embeddings(df,path,plot_losses=True, verbose=True):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    MODEL_PATH = path\n    model = AutoModel.from_pretrained(MODEL_PATH)\n    tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)\n    model.to(device)\n    model.eval()\n\n    ds = CLRPDataset(df,tokenizer,config['max_len'])\n    dl = DataLoader(ds,\n                  batch_size = config[\"batch_size\"],\n                  shuffle=False,\n                  num_workers = 4,\n                  pin_memory=True,\n                  drop_last=False\n                 )\n        \n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0],-1).to(device) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs[0][:,0].detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)\n\ntrain_embeddings1 =  get_embeddings(train_data,'..\/input\/modelf1')\ntest_embeddings1 = get_embeddings(test_data,'..\/input\/modelf1')\n\ntrain_embeddings2 =  get_embeddings(train_data,'..\/input\/modelf2')\ntest_embeddings2 = get_embeddings(test_data,'..\/input\/modelf2')\n\ntrain_embeddings3 =  get_embeddings(train_data,'..\/input\/modelf3')\ntest_embeddings3 = get_embeddings(test_data,'..\/input\/modelf3')\n\ntrain_embeddings4 =  get_embeddings(train_data,'..\/input\/modelf4')\ntest_embeddings4 = get_embeddings(test_data,'..\/input\/modelf4')\n\ntrain_embeddings5 =  get_embeddings(train_data,'..\/input\/modelf5')\ntest_embeddings5 = get_embeddings(test_data,'..\/input\/modelf5')\n\ndef get_preds_svm(X,y,X_test,bins=bins,nfolds=5,C=10,kernel='rbf'):\n    kfold = StratifiedKFold(n_splits=nfolds)\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    for k, (train_idx,valid_idx) in enumerate(kfold.split(X,bins)):\n        model = SVR()\n        X_train,y_train = X[train_idx], y[train_idx]\n        X_valid,y_valid = X[valid_idx], y[valid_idx]\n        \n        model.fit(X_train,y_train)\n        prediction = model.predict(X_valid)\n        score = rmse_score(prediction,y_valid)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds\n\nsvm_preds1 = get_preds_svm(train_embeddings1,target,test_embeddings1).mean(axis=1)\nsvm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\nsvm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\nsvm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\nsvm_preds5 = get_preds_svm(train_embeddings5,target,test_embeddings5).mean(axis=1)\n\n# svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\n\n# sample.target = svm_preds\n# sample.to_csv('submission.csv',index=False)","d2fa7708":"# svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\nsvm_preds4780 = svm_preds1*W4780[0] + svm_preds2*W4780[1] + \\\n    svm_preds3*W4780[2] + svm_preds4*W4780[3] + svm_preds5*W4780[4]","05ba7c8d":"W4781 = [.2]*5","ed7a2191":"import os\nimport gc\nimport sys\nimport cv2\nimport math\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport optuna\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.svm import SVR\nfrom catboost import CatBoostRegressor, Pool, CatBoost\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold,StratifiedKFold\n\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.nn import Parameter\nimport torch.nn.functional as F\nfrom torch.optim import Adam, lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.optim.optimizer import Optimizer\nfrom torch.optim.lr_scheduler import _LRScheduler\nfrom torch.optim.lr_scheduler import (CosineAnnealingWarmRestarts, CosineAnnealingLR, \n                                      ReduceLROnPlateau)\n\nfrom transformers import (AutoModel, AutoTokenizer, \n                          AutoModelForSequenceClassification,get_constant_schedule_with_warmup)\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nsr_ = Style.RESET_ALL","45c95af7":"train_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\ntarget = train_data['target'].to_numpy()\n\n#for kfold  \nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\nbins = train_data.bins.to_numpy()\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","3a274ac0":"config = {\n    'batch_size':128,\n    'max_len':256,\n    'seed':42,\n}\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])","ca518b30":"class CLRPDataset(nn.Module):\n    def __init__(self,df,tokenizer,max_len=128):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],\n                                return_tensors='pt',\n                                max_length=self.max_len,\n                                padding='max_length',\n                                truncation=True)  \n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)","f172f3c6":"def get_embeddings(df,path,plot_losses=True, verbose=True):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    MODEL_PATH = path\n    model = AutoModel.from_pretrained(MODEL_PATH)\n    tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)\n    model.to(device)\n    model.eval()\n\n    ds = CLRPDataset(df,tokenizer,config['max_len'])\n    dl = DataLoader(ds,\n                  batch_size = config[\"batch_size\"],\n                  shuffle=False,\n                  num_workers = 4,\n                  pin_memory=True,\n                  drop_last=False\n                 )\n        \n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0],-1).to(device) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs[0][:,0].detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)","0430bac0":"from jax import random\nfrom neural_tangents import stax\nimport neural_tangents as nt\n\ndef get_preds_svm(X,y,X_test,bins=bins,nfolds=5,C=10,kernel='rbf'):\n    kfold = StratifiedKFold(n_splits=nfolds)\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    for k, (train_idx,valid_idx) in enumerate(kfold.split(X,bins)):\n        X_train,y_train = X[train_idx], y[train_idx]\n        X_valid,y_valid = X[valid_idx], y[valid_idx]\n\n        ResBlock = stax.serial(\n                        stax.FanOut(2),\n                        stax.parallel(\n                            stax.serial(\n                                stax.Erf(),\n                                stax.Dense(1, W_std=1.25, b_std=0.0),\n                                stax.Erf(),\n                                stax.Dense(1, W_std=1.25, b_std=0.0),\n                                stax.Erf(),\n                                stax.Dense(1, W_std=1.25, b_std=0.0),\n                            ),\n                            stax.Identity(),\n                        ),\n                        stax.FanInSum()\n                    )\n\n        init_fn, apply_fn, kernel_fn = stax.serial(\n                stax.Dense(1, W_std=1.0, b_std=0),\n                ResBlock, ResBlock, stax.Erf(),\n                stax.Dense(1, W_std=2.5, b_std=0.1)\n        )\n\n        key = random.PRNGKey(10)\n        _, params = init_fn(key, input_shape=X_train.shape)\n        predict_fn = nt.predict.gradient_descent_mse_ensemble(kernel_fn,\n                                                                  X_train,\n                                                                  y_train[:,np.newaxis],\n                                                                  diag_reg=1e-1,\n                                                                  lr=1)\n        prediction = predict_fn(x_test=X_valid, get='nngp', t=None)#model.predict(X_valid)\n        score = rmse_score(prediction,y_valid)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += predict_fn(x_test=X_test, get='nngp', t=None)#model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds","931e7705":"# train_embeddings1 =  get_embeddings(train_data,'..\/input\/modelf1')\n# test_embeddings1 = get_embeddings(test_data,'..\/input\/modelf1')\n# svm_p1 = get_preds_svm(train_embeddings1,target,test_embeddings1).mean(axis=1)\n# del train_embeddings1,test_embeddings1\n\n# train_embeddings2 =  get_embeddings(train_data,'..\/input\/modelf2')\n# test_embeddings2 = get_embeddings(test_data,'..\/input\/modelf2')\n# svm_p2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\n# del train_embeddings2,test_embeddings2\n\n\n# train_embeddings3 =  get_embeddings(train_data,'..\/input\/modelf3')\n# test_embeddings3 = get_embeddings(test_data,'..\/input\/modelf3')\n# svm_p3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\n# del train_embeddings3,test_embeddings3\n\n# train_embeddings4 =  get_embeddings(train_data,'..\/input\/modelf4')\n# test_embeddings4 = get_embeddings(test_data,'..\/input\/modelf4')\n# svm_p4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\n# del train_embeddings4,test_embeddings4\n\n# train_embeddings5 =  get_embeddings(train_data,'..\/input\/modelf5')\n# test_embeddings5 = get_embeddings(test_data,'..\/input\/modelf5')\n# svm_p5 = get_preds_svm(train_embeddings5,target,test_embeddings5).mean(axis=1)\n# del train_embeddings5,test_embeddings5\n\n# del train_data, test_data","1ef98f7c":"# # svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\n# svm_preds4781 = svm_preds1*W4781[0] + svm_preds2*W4781[1] + \\\n#     svm_preds3*W4781[2] + svm_preds4*W4781[3] + svm_preds5*W4781[4]","9512bac4":"import numpy as np\nimport pandas as pd \nimport os\nimport gc\nimport sys\nimport time\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport xgboost as xgb\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.metrics import mean_squared_error\n\nfrom transformers import AutoModel, AutoTokenizer\nimport json\nfrom tensorflow.keras.models import load_model\nimport re\nimport pandas as pd\nimport string\nimport keras\nfrom sklearn.svm import SVR","3207fd57":"data_dir = '..\/input\/commonlitreadabilityprize\/'\ntrain = pd.read_csv(data_dir + 'train.csv')\ntest = pd.read_csv(data_dir + 'test.csv')\nsample_submission = pd.read_csv(data_dir + 'sample_submission.csv')\n\ntarget = train['target'].to_numpy()\n\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","ba97504c":"# source: https:\/\/www.kaggle.com\/maunish\/clrp-roberta-lgbm\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\n\nclass CLRPDataset(nn.Module):\n    def __init__(self, df, tokenizer, max_len=128):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],\n                                return_tensors='pt',\n                                max_length=self.max_len,\n                                padding='max_length',\n                                truncation=True)\n        return encode\n    \n    def __len__(self):\n        return len(self.excerpt)\n    \n\ndef get_embeddings(df, path, plot_losses=True, verbose=True):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"{device} is used\")\n            \n    MODEL_PATH = path\n    model = AutoModel.from_pretrained(MODEL_PATH)\n    tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)\n    model.to(device)\n    model.eval()\n\n    ds = CLRPDataset(df, tokenizer, config['max_len'])\n    dl = DataLoader(ds,\n                    batch_size=config[\"batch_size\"],\n                    shuffle=False,\n                    num_workers = 4,\n                    pin_memory=True,\n                    drop_last=False)\n        \n    embeddings = list()\n    with torch.no_grad():\n        for i, inputs in tqdm(enumerate(dl)):\n            inputs = {key:val.reshape(val.shape[0], -1).to(device) for key, val in inputs.items()}\n            outputs = model(**inputs)\n            outputs = outputs[0][:, 0].detach().cpu().numpy()\n            embeddings.extend(outputs)\n    return np.array(embeddings)\n\nconfig = {\n    'batch_size': 128,\n    'max_len': 256,\n    'seed': 42,\n}\nseed_everything(seed=config['seed'])\n\n# train_embeddings =  get_embeddings(train,'..\/input\/modelf1')\n# test_embeddings = get_embeddings(test,'..\/input\/modelf1')\n\n# train_embeddings2 =  get_embeddings(train,'..\/input\/modelf2')\n# test_embeddings2 = get_embeddings(test,'..\/input\/modelf2')\n\n# train_embeddings3 =  get_embeddings(train,'..\/input\/modelf3')\n# test_embeddings3 = get_embeddings(test,'..\/input\/modelf3')\n\n# train_embeddings4 =  get_embeddings(train,'..\/input\/modelf4')\n# test_embeddings4 = get_embeddings(test,'..\/input\/modelf4')\n\n# train_embeddings5 =  get_embeddings(train,'..\/input\/modelf5')\n# test_embeddings5 = get_embeddings(test,'..\/input\/modelf5')","fa79369d":"from sklearn.model_selection import train_test_split \nfrom keras.utils import to_categorical\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Embedding, LSTM,Dropout,concatenate\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport tensorflow as tf\nfrom tensorflow.python.keras.layers import Dense, Activation, Embedding, LSTM,Dropout,Bidirectional,GRU\nfrom keras.utils import plot_model\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense , Flatten ,Embedding,Input,Conv1D,GlobalAveragePooling1D,GlobalMaxPooling1D,Dropout,MaxPooling1D,Bidirectional,GRU,Concatenate\nfrom keras.models import Sequential,Model\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","a8e6f8dc":"def crt_model():\n    i1=Input(shape=(768,1))\n    l1=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i1)\n    l2 =MaxPooling1D(2) (l1)\n    l3=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l2)\n    l3 =MaxPooling1D(2) (l3)\n    l3=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l3)\n    l41=GlobalMaxPooling1D()(l3)\n    \n    \n    \n    i2=Input(shape=(768,1))\n    l12=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i2)\n    l22 =MaxPooling1D(2) (l12)\n    l32=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l22)\n    l32 =MaxPooling1D(2) (l32)\n    l32=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l32)\n    l42=GlobalMaxPooling1D()(l32)\n    \n    \n    \n    i3=Input(shape=(768,1))\n    l13=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i3)\n    l23 =MaxPooling1D(2) (l13)\n    l33=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l23)\n    l33 =MaxPooling1D(2) (l33)\n    l33=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l33)\n    l43=GlobalMaxPooling1D()(l33)\n    \n    \n    \n    \n    i4=Input(shape=(768,1))\n    l14=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i4)\n    l24 =MaxPooling1D(2) (l14)\n    l34=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l24)\n    l34 =MaxPooling1D(2) (l34)\n    l34=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l34)\n    l44=GlobalMaxPooling1D()(l34)\n    \n    \n    \n    \n    i5=Input(shape=(768,1))\n    l15=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i5)\n    l25 =MaxPooling1D(2) (l15)\n    l35=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l25)\n    l35 =MaxPooling1D(2) (l35)\n    l35=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l35)\n    l45=GlobalMaxPooling1D()(l35)\n    \n    \n    \n    \n    \n    i6=Input(shape=(768,1))\n    l16=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i6)\n    l26 =MaxPooling1D(2) (l16)\n    l36=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l26)\n    l36 =MaxPooling1D(2) (l36)\n    l36=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l36)\n    l46=GlobalMaxPooling1D()(l36)\n    \n    \n    \n    i7=Input(shape=(768,1))\n    l17=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i7)\n    l27 =MaxPooling1D(2) (l17)\n    l37=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l27)\n    l37 =MaxPooling1D(2) (l37)\n    l37=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l37)\n    l47=GlobalMaxPooling1D()(l37)\n    \n    \n    \n    i8=Input(shape=(768,1))\n    l18=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i8)\n    l28 =MaxPooling1D(2) (l18)\n    l38=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l28)\n    l38 =MaxPooling1D(2) (l38)\n    l38=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l38)\n    l48=GlobalMaxPooling1D()(l38)\n    \n    \n    \n    \n    i9=Input(shape=(768,1))\n    l19=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i9)\n    l29 =MaxPooling1D(2) (l19)\n    l39=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l29)\n    l39 =MaxPooling1D(2) (l39)\n    l39=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l39)\n    l49=GlobalMaxPooling1D()(l39)\n    \n    \n    \n    \n    i10=Input(shape=(768,1))\n    l110=Conv1D(64,5,padding='valid', kernel_initializer='normal',activation='relu')(i10)\n    l210=MaxPooling1D(2) (l110)\n    l310=Conv1D(128,5,padding='valid', kernel_initializer='normal',activation='relu')(l210)\n    l310 =MaxPooling1D(2) (l310)\n    l310=Conv1D(256,5,padding='valid', kernel_initializer='normal',activation='relu')(l310)\n    l410=GlobalMaxPooling1D()(l310)\n    \n    \n    \n    \n    \n    \n    \n    \n       \n    \n    l4 = concatenate([l41, l42, l43, l44, l45,l46,l47,l48,l49,l410])\n    \n    \n    l5=Dense(120, kernel_initializer='normal',activation='relu')(l4)\n    l5=Dense(240, kernel_initializer='normal',activation='relu')(l5)\n    l7=Dense(1, kernel_initializer='normal')(l5)\n    model=Model(inputs=[i1,i2,i3,i4,i5,i6,i7,i8,i9,i10], outputs=l7)\n    model.compile(loss='mean_squared_error', optimizer='adam',metrics=[keras.metrics.MeanSquaredError()])\n    return model","7aa7f87a":"model=crt_model()\nkeras.utils.plot_model(model)","31f1927e":"model.summary()","4a073d7c":"def get_res(train_embedd,target,test_embedd):\n    nfolds = 5\n    scores =[]\n    preds = np.zeros((test_embedd.shape[0]))\n    kf = KFold(n_splits=nfolds, shuffle=True, random_state=config['seed'])\n    for k, (train_idx, valid_idx) in enumerate(kf.split(train)): \n        model=crt_model()\n        train_x,train_y,test_x,test_y=train_embedd[train_idx], target[train_idx],train_embedd[valid_idx], target[valid_idx]\n        train_x=train_x.reshape(train_x.shape+(1,))\n        traindata=[train_x for i in range(10)]\n        val=[test_x for i in range(10)]\n        model.fit(traindata,train_y,epochs=7,validation_data=(val,test_y),batch_size=8)\n        y_pred=model.predict(val)\n        score = rmse_score(y_pred,test_y)\n        scores.append(score)\n        print(f'Fold {k} , rmse score: {score}')\n        test=[test_embedd for i in range(10)]\n        y_preds = model.predict(test)\n        y_preds=y_preds.reshape(-1)\n        preds+=y_preds\n   \n        \n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds  ","6a686816":"def get_preds_svm(X,y,X_test,nfolds=5,C=10,kernel='rbf'):\n    scores = list()\n    preds = np.zeros((X_test.shape[0]))\n    kf = KFold(n_splits=nfolds, shuffle=True, random_state=config['seed'])\n    for k, (train_idx, valid_idx) in enumerate(kf.split(train)): \n        model = SVR(C=C,kernel=kernel,gamma='auto')\n        train_x,train_y,val_x,val_y=X[train_idx], y[train_idx],X[valid_idx], y[valid_idx]\n        \n        \n        model.fit(train_x,train_y)\n        prediction = model.predict(val_x)\n        score = rmse_score(prediction,val_y)\n        print(f'Fold {k} , rmse score: {score}')\n        scores.append(score)\n        preds += model.predict(X_test)\n        \n    print(\"mean rmse\",np.mean(scores))\n    return np.array(preds)\/nfolds","a4859faa":"train_embeddings =  get_embeddings(train,'..\/input\/modelf1')\ntest_embeddings = get_embeddings(test,'..\/input\/modelf1')\npred1=get_res(train_embeddings,target,test_embeddings)\nsvm_preds1 = get_preds_svm(train_embeddings,target,test_embeddings).mean(axis=1)\ndel train_embeddings,test_embeddings\ngc.collect()\n\ntrain_embeddings2 =  get_embeddings(train,'..\/input\/modelf2')\ntest_embeddings2 = get_embeddings(test,'..\/input\/modelf2')\npred2=get_res(train_embeddings2,target,test_embeddings2)\nsvm_preds2 = get_preds_svm(train_embeddings2,target,test_embeddings2).mean(axis=1)\ndel train_embeddings2,test_embeddings2\ngc.collect()\n\ntrain_embeddings3 =  get_embeddings(train,'..\/input\/modelf3')\ntest_embeddings3 = get_embeddings(test,'..\/input\/modelf3')\npred3=get_res(train_embeddings3,target,test_embeddings3)\nsvm_preds3 = get_preds_svm(train_embeddings3,target,test_embeddings3).mean(axis=1)\ndel train_embeddings3,test_embeddings3\ngc.collect()\n\ntrain_embeddings4 =  get_embeddings(train,'..\/input\/modelf4')\ntest_embeddings4 = get_embeddings(test,'..\/input\/modelf4')\npred4=get_res(train_embeddings4,target,test_embeddings4)\nsvm_preds4 = get_preds_svm(train_embeddings4,target,test_embeddings4).mean(axis=1)\ndel train_embeddings4,test_embeddings4\ngc.collect()\n\ntrain_embeddings5 =  get_embeddings(train,'..\/input\/modelf5')\ntest_embeddings5 = get_embeddings(test,'..\/input\/modelf5')\npred5=get_res(train_embeddings5,target,test_embeddings5)\nsvm_preds5 = get_preds_svm(train_embeddings5,target,test_embeddings5).mean(axis=1)\ndel train_embeddings5,test_embeddings5\ngc.collect()","8517cbb5":"preds=(pred1+pred2+pred3+pred4+pred5)\/5\nsvm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5","1f367a0c":"svm_preds479 = (preds+svm_preds)\/2","d6c2fcd7":"# # svm_preds = (svm_preds1 + svm_preds2 + svm_preds3 + svm_preds4 + svm_preds5)\/5\n# svm_preds479 = svm_preds1*W479[0] + svm_preds2*W479[1] + \\\n#     svm_preds3*W479[2] + svm_preds4*W479[3] + svm_preds5*W479[4]","260f297a":"sub = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n# sub['target'] = ((RBWRTbase_pred_df.mean(axis=1) + RBWRTlarge_pred_df.mean(axis=1))\/2).values.tolist()\n# sub['target'] = pds1*W_M['RoBL'] + pds2*W_M['RoBB'] + pds3*W_M['SVM']\n\nsub.to_csv('submission.csv', index=False)","f4871b7c":"sub.head()","37492ecb":"# Make sub","45cbf00a":"# SVM 4780\nhttps:\/\/www.kaggle.com\/duttadebadri\/eda-basline-modeling-commonlit-passages?scriptVersionId=64615496","36aefe89":"# svm_preds 476","11884a32":"## svm","30675d01":"# SVM 479","2ce20011":"https:\/\/www.kaggle.com\/sourabhy\/commonlit-roberta-ensemble-multichannel-cnn?scriptVersionId=63751318","97dfe192":"https:\/\/www.kaggle.com\/maunish\/clrp-roberta-svm?scriptVersionId=64598846","ec4e04a8":"# SVM 480","be9407bc":"https:\/\/www.kaggle.com\/maunish\/clrp-roberta-svm?scriptVersionId=64600791","fee2598e":"https:\/\/www.kaggle.com\/lars123\/neural-tangent-kernel-2?scriptVersionId=63130079","189ece60":"# svm_preds 475","3e130270":"# SVM 4781"}}