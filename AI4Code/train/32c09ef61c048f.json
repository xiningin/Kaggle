{"cell_type":{"ff2162a7":"code","a2861712":"code","7480e1ac":"code","5aeb1ace":"code","1bc5e1d4":"code","1aa612f1":"code","598dae89":"code","747ee4f0":"code","66b3e384":"code","54406e32":"code","9fd13399":"code","fa33c7c3":"code","ff5fa505":"code","5c25fad1":"code","a8f25ef2":"code","874b464c":"code","c9e74bd2":"code","76294477":"code","7322dd55":"code","d93bf4d6":"code","6eda915e":"code","5b64d3fc":"markdown","2fa091d1":"markdown","924f7a23":"markdown","ec2c9175":"markdown","4f1dfe53":"markdown","c5e025dc":"markdown","73e8a0bc":"markdown","22a7c0f9":"markdown","52bc4f15":"markdown","fd5274c0":"markdown","15a17813":"markdown","5cc07613":"markdown"},"source":{"ff2162a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2861712":"from PIL import Image\npil_im = Image.open('..\/input\/logocanal\/LOGO PNG.png')\npil_im","7480e1ac":"import matplotlib.pyplot as plt","5aeb1ace":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","1bc5e1d4":"mypath='\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/'\n\nfrom os import listdir\nfrom os.path import isfile, join\ncats = [mypath+f for f in listdir(mypath) if isfile(join(mypath, f))]\ncats_class=['cat' for f in listdir(mypath) if isfile(join(mypath, f))]","1aa612f1":"mypath='\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\/'\n\nfrom os import listdir\nfrom os.path import isfile, join\ndogs = [mypath+f for f in listdir(mypath) if isfile(join(mypath, f))]\ndogs_class=['dogs' for f in listdir(mypath) if isfile(join(mypath, f))]","598dae89":"import pandas as pd\ndf_cats=pd.DataFrame(cats,columns=['filename'])\ndf_cats['class']=cats_class\n\ndf_dogs=pd.DataFrame(dogs,columns=['filename'])\ndf_dogs['class']=dogs_class\n\ndf=pd.concat([df_dogs,df_cats],axis=0)","747ee4f0":"df=df.sample(frac=1)","66b3e384":"datagen = ImageDataGenerator(width_shift_range=[-100,100],horizontal_flip=True)\nit = datagen.flow_from_dataframe(dataframe=df,batch_size=10,image_size=(256, 256))","54406e32":"images,labels=it.next()","9fd13399":"print(images[0].shape)","fa33c7c3":"plt.figure(figsize=(100,100))\nplt.subplots_adjust(left=0.1, right=0.2, top=0.2, bottom=0.1)\n\n# generate samples and plot\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    images,labels = it.next()\n    image = images[0].astype('uint8')\n    plt.imshow(image)\n    plt.axis('off')\n# show the figure\nplt.show()","ff5fa505":"datagen = ImageDataGenerator(width_shift_range=[-100,100],horizontal_flip=True,rescale=1.0\/255.0)\nit = datagen.flow_from_dataframe(dataframe=df,batch_size=10,image_size=(256, 256))","5c25fad1":"import keras,os\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D , Flatten, Dropout, Activation\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import layers\nimport numpy as np","a8f25ef2":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\n\nmodel = Sequential()\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(2, activation='softmax'))\n","874b464c":"from keras.callbacks import ModelCheckpoint, EarlyStopping\ncheckpoint = ModelCheckpoint(\"\/kaggle\/working\/vgg16_1.h5\", monitor='val_acc', verbose=1, save_best_only=True, \n                             save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n","c9e74bd2":"from keras.optimizers import SGD\nopt = SGD(lr=0.001, momentum=0.9)\nmodel.compile(optimizer=opt, loss=keras.losses.binary_crossentropy, metrics=['accuracy'])","76294477":"history = model.fit_generator(steps_per_epoch=800,generator=it,epochs=40,callbacks=[checkpoint,early])","7322dd55":"\nplt.title('Cross Entropy Loss')\nplt.plot(history.history['loss'], color='blue', label='train')\n","d93bf4d6":"\n# plot accuracy\n\nplt.title('Classification Accuracy')\nplt.plot(history.history['accuracy'], color='blue', label='train')\n","6eda915e":"model.save_weights('\/kaggle\/working\/model.h5')","5b64d3fc":"# Apresentando Dados","2fa091d1":"# Carregando Image Data Generator","924f7a23":"# Definindo callbacks","ec2c9175":"# Plotando hist\u00f3rico de Treinamento","4f1dfe53":"# Emparalhando Dados","c5e025dc":"# Carregando imagem dos Gatos","73e8a0bc":"# Carregando imagem dos Cachorros","22a7c0f9":"# Salvando o modelo","52bc4f15":"## Treinando a Rede Convolucional","fd5274c0":"## Compilando a Rede Convolucional","15a17813":"## Criando a Rede Convolucional","5cc07613":"# Criando e concatenando DataFrames"}}