{"cell_type":{"c00abb7f":"code","31e5f476":"code","971b77d2":"code","99045600":"code","a3f601b1":"code","ac5f8ec9":"code","2e5c1ac4":"code","ecb6decc":"code","852716d0":"code","d8b6ff82":"code","3c231473":"code","1bcfded8":"code","f00df572":"code","b430a162":"code","b8b0a91c":"code","a98acdd5":"code","ce48a3b0":"code","084b59e2":"code","f589debc":"code","9ed8fe27":"code","399f621d":"code","022c08ee":"code","1ebe3601":"code","5c1a22bf":"code","14b63d0f":"code","21459bcf":"markdown","a88afc0d":"markdown","74fb841d":"markdown","7dd6d6c5":"markdown","ebe915eb":"markdown"},"source":{"c00abb7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31e5f476":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.columns","971b77d2":"train_data.shape","99045600":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.columns","a3f601b1":"test_data.shape","ac5f8ec9":"submission_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nsubmission_data.columns","2e5c1ac4":"train_data.info()","ecb6decc":"train_data.describe()","852716d0":"train_data.describe(include='object')","d8b6ff82":"missing_val_count_by_col = train_data.isnull().sum()\nprint(missing_val_count_by_col[missing_val_count_by_col > 0])","3c231473":"train_data['Age'].mean()\nage_fill = train_data['Age'].fillna(train_data['Age'].mean(), inplace= True)\nprint(\"Missing Values In column age: {}\".format(train_data['Age'].isnull().sum()))","1bcfded8":"#Fill Missing Values of Age in Test Data\ntest_data['Fare'].mean()\nage_fill = test_data['Fare'].fillna(test_data['Fare'].mean(), inplace= True)\nprint(\"Missing Values In column Fare(test_data): {}\".format(test_data['Fare'].isnull().sum()))","f00df572":"#Fill Missing Values of Age in Test Data\ntest_data['Age'].mean()\nage_fill = test_data['Age'].fillna(test_data['Age'].mean(), inplace= True)\nprint(\"Missing Values In column (test_data)Age: {}\".format(test_data['Age'].isnull().sum()))","b430a162":"features= ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nX = train_data[features]\ny = train_data['Survived']","b8b0a91c":"test_data[features].columns","a98acdd5":"#Split data into train and test\n#from sklearn.model_selection  import train_test_split\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n\n#test_X = test_data[features] \n#test_data_preds = model_1.predict(test_X)\n\n#Implementaton of Decision tree\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_1 = DecisionTreeRegressor(random_state=1)\nmodel_1.fit(X, y)\nmodel_1_prediction = model_1.predict(test_data[features])\n\nprint(\"okay\")\n#Scoring of model\n#from sklearn.metrics import mean_absolute_error\n#mae_1 = mean_absolute_error(y_test,model_1_prediction)\n#print(mae_1.round(4))\n#print(\"Mean absolute Error of Decision tree: {:,.4f}\".format(mae_1))\nprint(\"score:\")\nprint(model_1.score(X, y))","ce48a3b0":"df = pd.DataFrame(model_1_prediction, columns=[\"Survived\"])\ndf.head()","084b59e2":"df[\"PassengerId\"] = test_data[\"PassengerId\"].values\ndf.head()","f589debc":"df.to_csv('predicts.csv',index=False)","9ed8fe27":"train_data[features].shape","399f621d":"test_data[features].shape","022c08ee":"#Make predictions on test_data with same features\n#test_X = test_data[features] \n#test_data_preds = model_1.predict(test_X)\n\n#Scoring of model\n#from sklearn.metrics import mean_absolute_error\n#mae_1 = mean_absolute_error(y_test,test_data_preds)\n#print(mae_1.round(4))\n#print(\"Mean absolute Error of Decision tree: {:,.4f}\".format(mae_1))","1ebe3601":"#Implementaton of random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nForest_model = RandomForestRegressor(n_estimators=100, max_depth=5, random_state=1)\nForest_model.fit(X_train, y_train)\nForest_model_prediction = Forest_model.predict(X_test)\n\n#Scoring of model\nfrom sklearn.metrics import mean_absolute_error\nmae_1 = mean_absolute_error(y_test, Forest_model_prediction)\n#print(mae_1.round(4))\nprint(\"Mean absolute Error of Decision tree: {:,.4f}\".format(mae_1))\nprint(Forest_model.score(X_train, y_train))","5c1a22bf":"#features= ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nfrom sklearn.ensemble import RandomForestClassifier\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", 'Age', 'Fare','PassengerId']\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nprint(model.score(X,y))\n\n#output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n#output.to_csv('my_submission.csv', index=False)\n#print(\"Your submission was successfully saved!\")","14b63d0f":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(X,y)\npredictions = my_model.predict(X_test)\n\nprint(my_model.score(X,y))","21459bcf":"Model 1: Desission Tree","a88afc0d":"Model 3: Random Forest with changed features","74fb841d":"Prediction on Test Data","7dd6d6c5":"model 4: XGBooster","ebe915eb":"Model:2 Random Forest"}}