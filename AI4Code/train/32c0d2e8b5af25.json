{"cell_type":{"791edf39":"code","debf3a1d":"code","38c1bc08":"code","5f9c1ecc":"code","a7fbbcd7":"code","06325493":"code","b7b271db":"code","354d782d":"code","38bf574e":"code","d79de768":"code","accd5f93":"code","7eef1e4c":"code","c42f3b1e":"code","5a4ef55b":"code","f421adeb":"code","1399ef6c":"code","71c6beed":"code","d33e10d5":"code","1c44faf1":"code","4eb9647e":"code","b181eaa1":"code","6bb9736b":"code","966cb5a9":"code","d9a2756b":"code","eb0d4c9a":"code","ec61ac17":"code","444ea3bd":"code","7ea43fe6":"code","0d4e0f4b":"code","1d19e44c":"code","3e154743":"code","f4499e65":"code","0232a85b":"code","8380870b":"code","11a4a391":"code","f2f066e1":"code","9e45969c":"code","8f6ce208":"code","2702cd15":"code","65ebc743":"code","f7f0dc14":"code","579bb604":"code","daeacbb2":"code","476eef3a":"code","c4759ef5":"code","770298c4":"code","7084dbd2":"code","c4f06acb":"code","b46f7425":"code","2368e417":"code","d8f342a7":"code","d17aab7d":"code","c3e804ae":"code","6b61fb98":"code","d1d5d206":"code","318b34ae":"code","128259e7":"code","8e51b10e":"code","170e1a28":"code","2142b650":"code","27aabd4c":"code","a788667f":"code","714ead1a":"code","4799ea4a":"code","c2e99dd9":"code","7c1c4d87":"markdown","35d7d556":"markdown","02c01d60":"markdown","49883ef2":"markdown","20fc0024":"markdown","0d189a2b":"markdown","8040f5f1":"markdown","008b62d6":"markdown","0e1681b3":"markdown","e688a6d7":"markdown","098b19e5":"markdown","a9a72a16":"markdown","f84683b6":"markdown","39cace6d":"markdown","56b1c3d5":"markdown","96e6d7bf":"markdown","52c7c364":"markdown","660a95a7":"markdown","bce9949c":"markdown","f0b061b8":"markdown","c93181f2":"markdown","d731c7f5":"markdown","dfe31ade":"markdown","d22f01c6":"markdown","b9e61a40":"markdown","4b7eeecf":"markdown","e85d26fe":"markdown","7a890ec9":"markdown","3d49cae0":"markdown","b98462c3":"markdown","15e8717e":"markdown","820f1316":"markdown","7176ffd0":"markdown","556791a4":"markdown","abfbfe43":"markdown","b85d524e":"markdown","5e1d38c6":"markdown","1cfdce6c":"markdown","c3caab3d":"markdown","a6ece33f":"markdown","6ae2fafb":"markdown","3408aa8f":"markdown","315ba5ab":"markdown","01220006":"markdown","c7d12312":"markdown","05d997de":"markdown","ea6b7757":"markdown","699be164":"markdown","465c6845":"markdown","6268c7b2":"markdown","11658d8e":"markdown","041f2496":"markdown","8fa8e93b":"markdown","e657c238":"markdown","57dcdde9":"markdown","f3ba7ca1":"markdown","488dc968":"markdown","f2b7ceb3":"markdown","d1b4ed4f":"markdown"},"source":{"791edf39":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nfrom scipy.stats import norm, skew\nfrom scipy import stats\nfrom scipy.special import boxcox1p\nfrom sklearn import metrics\nimport warnings\nwarnings.filterwarnings('ignore')","debf3a1d":"HousingPrices_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',sep = \",\", header = 0)\nHousingPrices_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',sep = \",\", header = 0)\n#Inject SalePrice in test\nHousingPrices_test['SalePrice'] = 0\nprint(\"Train Shape: \" + str(HousingPrices_train.shape))\nprint(\"Test Shape: \" + str(HousingPrices_test.shape))","38c1bc08":"HousingPrices_full = pd.concat([HousingPrices_train,HousingPrices_test])\nHousingPrices_full.shape","5f9c1ecc":"HousingPrices_full.head(5)","a7fbbcd7":"HousingPrices_full.tail(5)","06325493":"HousingPrices_full.describe()","b7b271db":"HousingPrices_full.replace('',np.nan,inplace=True)","354d782d":"HousingPrices_full['MSSubClass'] = HousingPrices_full['MSSubClass'].astype('object')\nHousingPrices_full['OverallCond'] = HousingPrices_full['OverallCond'].astype('object')\nHousingPrices_full['YrSold'] = HousingPrices_full['YrSold'].astype('object')\nHousingPrices_full['MoSold'] = HousingPrices_full['MoSold'].astype('object')","38bf574e":"sns.set_palette(\"GnBu_d\")\nplt.title(\"Missingess Map\")\nplt.rcParams['figure.figsize'] = (40, 40)\nsns.heatmap(HousingPrices_full.isnull(), cbar=False)","d79de768":"for i,j in HousingPrices_full.isnull().sum().iteritems():\n    print(i,j)","accd5f93":"HousingPrices_full['LotFrontage'].fillna(value=\n                                    HousingPrices_full['LotFrontage'].median(),\n                                    inplace = True)","7eef1e4c":"HousingPrices_full.drop('FireplaceQu', axis = 1, inplace = True)","c42f3b1e":"d = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\nfor i in d:\n    HousingPrices_full[i] = HousingPrices_full[i].fillna('None')","5a4ef55b":"d = ['GarageArea', 'GarageYrBlt', 'GarageCars']\nfor i in d:\n    HousingPrices_full[i] = HousingPrices_full[i].fillna(0)","f421adeb":"d = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']\nfor i in d:\n    HousingPrices_full[i] = HousingPrices_full[i].fillna(0)","1399ef6c":"d = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']\nfor i in d:\n    HousingPrices_full[i] = HousingPrices_full[i].fillna('None')","71c6beed":"HousingPrices_full['PoolQC'].fillna(\"None\",inplace = True)","d33e10d5":"HousingPrices_full['MiscFeature'].fillna(\"None\",inplace = True)","1c44faf1":"HousingPrices_full['Alley'].fillna(\"None\",inplace = True)","4eb9647e":"HousingPrices_full['Fence'].fillna(\"None\",inplace = True)","b181eaa1":"HousingPrices_full[\"MasVnrArea\"] = HousingPrices_full[\"MasVnrArea\"].fillna(0)","6bb9736b":"HousingPrices_full[\"MasVnrType\"] = HousingPrices_full[\"MasVnrType\"].fillna(\"None\")","966cb5a9":"HousingPrices_full['MSZoning'].fillna(value=\n                                   HousingPrices_full['MSZoning'].value_counts().idxmax(),\n                                   inplace = True)","d9a2756b":"HousingPrices_full.drop('Utilities', axis = 1, inplace = True)","eb0d4c9a":"HousingPrices_full['Functional'].fillna(\"Typ\",inplace = True)","ec61ac17":"HousingPrices_full['KitchenQual'].fillna(value=\n                                   HousingPrices_full['KitchenQual'].value_counts().idxmax(),\n                                   inplace = True)","444ea3bd":"HousingPrices_full['Electrical'].fillna(value=\n                                   HousingPrices_full['Electrical'].value_counts().idxmax(),\n                                   inplace = True)","7ea43fe6":"HousingPrices_full['Exterior1st'].fillna(value=\n                                   HousingPrices_full['Exterior1st'].value_counts().idxmax(),\n                                   inplace = True)","0d4e0f4b":"HousingPrices_full['Exterior2nd'].fillna(value=\n                                   HousingPrices_full['Exterior2nd'].value_counts().idxmax(),\n                                   inplace = True)","1d19e44c":"HousingPrices_full['SaleType'].fillna(value=\n                                   HousingPrices_full['SaleType'].value_counts().idxmax(),\n                                   inplace = True)","3e154743":"HousingPrices_full.info()","f4499e65":"plt.rcParams['figure.figsize'] = (20, 20)\nsns.heatmap(HousingPrices_full.isnull(), cbar=False)","0232a85b":"HousingPrices_train = HousingPrices_full[0:1460]\nHousingPrices_test = HousingPrices_full[1460:2919]","8380870b":"full_numeric = HousingPrices_full.dtypes[HousingPrices_full.dtypes != \"object\"].index\nskewed_features = HousingPrices_full[full_numeric].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkewness of Numeric Features \\n\")\nskewness = pd.DataFrame({'skew' :skewed_features})\nskewness","11a4a391":"#Lot Frontage\nplt.rcParams['figure.figsize'] = (7.0, 5.0) #Adjust values as necessary\nsns.distplot(HousingPrices_full['LotFrontage'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_full['LotFrontage'], plot=plt)","f2f066e1":"#LotArea\nplt.rcParams['figure.figsize'] = (7.0, 5.0) #Adjust values as necessary\nsns.distplot(HousingPrices_full['LotArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_full['LotArea'], plot=plt)","9e45969c":"to_transform = skewness[abs(skewness) > 0.7]\nto_transform = to_transform[to_transform['skew'].notna()]\nto_transform","8f6ce208":"greater070 = list(to_transform.index)\ngreater070.remove('SalePrice')\nfor i in greater070:\n    HousingPrices_full[i] = boxcox1p(HousingPrices_full[i], 0.15)","2702cd15":"#Lot Frontage\nplt.rcParams['figure.figsize'] = (7.0, 5.0) #Adjust values as necessary\nsns.distplot(HousingPrices_full['LotFrontage'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_full['LotFrontage'], plot=plt)","65ebc743":"plt.rcParams['figure.figsize'] = (7.0, 5.0) #Adjust values as necessary\nsns.distplot(HousingPrices_full['LotArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_full['LotArea'], plot=plt)","f7f0dc14":"plt.rcParams['figure.figsize'] = (7.0, 5.0) #Adjust values as necessary\nsns.distplot(HousingPrices_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_train['SalePrice'], plot=plt)","579bb604":"HousingPrices_train['SalePrice'] = np.log(HousingPrices_train['SalePrice'])\nsns.distplot(HousingPrices_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(HousingPrices_train['SalePrice'], plot=plt)","daeacbb2":"plt.rcParams['figure.figsize'] = (15.0, 13.0) #Adjust values as necessary\nplt.title(\"Correlation Plot\")\nsns.heatmap(HousingPrices_train.corr())","476eef3a":"HousingPrices_full['TotalSF'] = (\n    HousingPrices_full['BsmtFinSF1'] +\n    HousingPrices_full['BsmtFinSF2'] +\n    HousingPrices_full['1stFlrSF'] +\n    HousingPrices_full['2ndFlrSF']\n)","c4759ef5":"todummify = list(HousingPrices_full.select_dtypes(include=['object']).columns)\nHousingPrices_full = pd.get_dummies(HousingPrices_full, columns=todummify)\n#Convert them first to category type so they wont get affected in VIF - elimination method\ntocategorify = list(HousingPrices_full.select_dtypes(include=['uint8']).columns)\nHousingPrices_full[tocategorify] = HousingPrices_full[tocategorify].astype('category')\nHousingPrices_full.info(verbose=True)","770298c4":"HousingPrices_train = HousingPrices_full[0:1460]\nHousingPrices_test = HousingPrices_full[1460:2919]","7084dbd2":"X = HousingPrices_train.drop(['SalePrice',\n                              'Id'], axis = 1) \ny = HousingPrices_train['SalePrice']\nprint(\"Dependent Variables\")\ndisplay(X.head())\nprint(\"Independent Variable\")\ndisplay(y.to_frame().head())","c4f06acb":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_numeric = X._get_numeric_data() #drop non-numeric cols\n#Create a copy of X only for the sole purpose of feature selection\nX_copy = X.copy()\nX_copy_numeric_scaled = pd.DataFrame(scaler.fit_transform(X_numeric), columns=X_numeric.columns)\n#X_copy_numeric_scaled.drop('const',axis=1,inplace = True)\nX_copy.update(X_copy_numeric_scaled)\n\n#Convert the 'one-hot-encoded' columns back to float type\nX_copy[tocategorify] = X_copy[tocategorify].astype('float')\nfrom sklearn.linear_model import LassoCV\nreg = LassoCV(cv=10)\nreg.fit(X_copy, y)\n\ncoef = pd.Series(reg.coef_, index = X_copy.columns).to_frame()\nchosen_vars = coef[coef[0]!=0].index.tolist()\nprint(\"Lasso picked \" + str(len(chosen_vars)) + \n      \" out of \" +  str(len(coef)) + \" variables\")","b46f7425":"X_copy.head()","2368e417":"imp_coef = coef.sort_values(by = 0)\nimp_coef = pd.DataFrame(imp_coef[imp_coef[0] != 0])\nprint(\"Lasso selected the following Features:\")\nlist(imp_coef.index)","d8f342a7":"#Temporarily injecting 'Sale Price' column to see the top n correlated with sale price\nX_copy['SalePrice'] = HousingPrices_train['SalePrice']\ncorrmat=X_copy.corr()\nn=98\ntopn_cols=corrmat.nlargest(n,'SalePrice')['SalePrice'].index\ncorrmat_top15=X_copy[topn_cols].corr()\nfig1,ax1=plt.subplots(figsize=(40,40))\nsns.heatmap(corrmat_top15,vmax=.8, square=True,ax=ax1,annot=True, fmt='.2f', annot_kws={'size': 12})\nX_copy.drop('SalePrice', axis = 1, inplace = True)\ntop_cols = topn_cols.to_list()","d17aab7d":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nchosen_features = list(set(chosen_vars).intersection(top_cols))\nX = X[chosen_features]\nC = list(set(tocategorify).intersection(chosen_features))\nX[C] = X[C].astype('category') #cate\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=823)\nX_train_numeric = X_train._get_numeric_data() #drop non-numeric cols\nX_test_numeric = X_test._get_numeric_data() #drop non-numeric cols\nscaler = StandardScaler()\nX_train_numeric_scaled = pd.DataFrame(scaler.fit_transform(X_train_numeric), \n                                      index=X_train.index,\n                                      columns=X_train_numeric.columns)\nX_test_numeric_scaled = pd.DataFrame(scaler.transform(X_test_numeric), \n                                     index = X_test.index, \n                                     columns=X_test_numeric.columns)\nX_train.shape\nX_train.update(X_train_numeric_scaled)\nX_test.update(X_test_numeric_scaled)\nX_train[C] = X_train[C].astype('float')\nX_test[C] = X_test[C].astype('float')\ndisplay(X_train.head())\ndisplay(X_test.head()) \nX[C] = X[C].astype('float')\n\nY = HousingPrices_test[chosen_features]\nY[C] = Y[C].astype('category')\nY_numeric = Y._get_numeric_data() #drop non-numeric cols\nY_numeric_scaled = pd.DataFrame(scaler.transform(Y_numeric), \n                                index = Y.index, \n                                columns = Y_numeric.columns)\nY.update(Y_numeric_scaled)\nY[C] = Y[C].astype('float')","c3e804ae":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nk = 10\nrf = RandomForestRegressor()\nm = [8]\ne = [2000]\nparameters = {'max_depth': m, 'n_estimators' : e}\nrf_reg = GridSearchCV(rf, parameters, \n                      scoring = 'neg_mean_squared_error',\n                      cv = k)\nrf_reg.fit(X_train,y_train)\nprint(\"Best Parameter Values: \")\npd.DataFrame.from_dict(rf_reg.best_params_,orient='index',columns=['Values'])","6b61fb98":"best_rfr_model = rf_reg.best_estimator_\npredictions = best_rfr_model.predict(X_test)\npredictions2 = best_rfr_model.predict(X_train)\nd1 = {'Test Data' : [metrics.mean_absolute_error(y_test, predictions),\n                metrics.mean_squared_error(y_test, predictions),\n                np.sqrt(metrics.mean_squared_error(y_test, predictions))],\n     #'Train' : [metrics.mean_absolute_error(y_train, predictions2),\n     #           metrics.mean_squared_error(y_train, predictions2),\n     #          np.sqrt(metrics.mean_squared_error(y_train, predictions2))]\n     }\nm = pd.DataFrame(d1,['MAE','MSE','RMSE'])\nm.style.format(\"{:.2f}\")","d1d5d206":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual vs Predicted Values\")\nplt.scatter(y_test,predictions)","318b34ae":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual - Predicted Distribution Plot\")\nsns.distplot((y_test-predictions),bins=50);","128259e7":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ngb = GradientBoostingRegressor()\nparameters = {'n_estimators':[3000], \n              'learning_rate':[0.05],\n              'max_depth':[4],\n              'min_samples_leaf':[15],\n              'min_samples_split':[10]}\ngb_reg = GridSearchCV(gb, parameters, \n                      scoring = 'neg_mean_squared_error',\n                      cv = k)\ngb_reg.fit(X_train,y_train)\nprint(\"Best Parameter Values: \")\npd.DataFrame.from_dict(gb_reg.best_params_,orient='index',columns=['Values'])","8e51b10e":"best_gbr_model = gb_reg.best_estimator_\npredictions = best_gbr_model.predict(X_test)\npredictions2 = best_gbr_model.predict(X_train)\nd1 = {'Test Data' : [metrics.mean_absolute_error(y_test, predictions),\n                metrics.mean_squared_error(y_test, predictions),\n                np.sqrt(metrics.mean_squared_error(y_test, predictions))],\n     #'Train' : [metrics.mean_absolute_error(y_train, predictions2),\n     #           metrics.mean_squared_error(y_train, predictions2),\n     #          np.sqrt(metrics.mean_squared_error(y_train, predictions2))]\n     }\nm = pd.DataFrame(d1,['MAE','MSE','RMSE'])\n#m['% Difference'] = ((m['Train'] - m['Test']) \/ (m['Train']) * 100)\nm.style.format(\"{:.2f}\")","170e1a28":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual vs Predicted Values\")\nplt.scatter(y_test,predictions)","2142b650":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual - Predicted Distribution Plot\")\nsns.distplot((y_test-predictions),bins=50);","27aabd4c":"from sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\n\nxgb = xgb.XGBRegressor()\nparameters={'n_estimators':[20000], \n            'learning_rate': [0.0015],\n            'max_depth':[5]}\nxgb_reg = GridSearchCV(xgb, parameters, \n                      scoring = 'neg_mean_squared_error',\n                      cv = k)\nxgb_reg.fit(X_train,y_train) \nprint(\"Best Parameter Values: \")\npd.DataFrame.from_dict(xgb_reg.best_params_,orient='index',columns=['Values'])","a788667f":"best_xgbr_model = xgb_reg.best_estimator_\npredictions = best_xgbr_model.predict(X_test)\npredictions2 = best_xgbr_model.predict(X_train)\nd1 = {'Test Data' : [metrics.mean_absolute_error(y_test, predictions),\n                metrics.mean_squared_error(y_test, predictions),\n                np.sqrt(metrics.mean_squared_error(y_test, predictions))],\n     #'Train' : [metrics.mean_absolute_error(y_train, predictions2),\n     #           metrics.mean_squared_error(y_train, predictions2),\n     #          np.sqrt(metrics.mean_squared_error(y_train, predictions2))]\n     }\nm = pd.DataFrame(d1,['MAE','MSE','RMSE'])\nm.style.format(\"{:.2f}\")","714ead1a":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual vs Predicted Values\")\nplt.scatter(y_test,predictions)","4799ea4a":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Actual - Predicted Distribution Plot\")\nsns.distplot((y_test-predictions),bins=50);","c2e99dd9":"SalePrice = pd.Series(best_xgbr_model.predict(Y),name='SalePrice')\nmy_solution = pd.concat([HousingPrices_test['Id'],SalePrice], axis=1)\nmy_solution.to_csv('my_output_xgbr.csv',index=False)","7c1c4d87":"##### Visualize some","35d7d556":"##### Functional - Fill with Typ","02c01d60":"##### MSZoning - Fill with the most frequent class","49883ef2":"### Data Exploration","20fc0024":"### One-Hot Encoding using pd.getdummies","0d189a2b":"##### Residual Histogram \u2013 to visualize error distribution","8040f5f1":"##### Residual Histogram \u2013 to visualize error distribution","008b62d6":"##### Check LotFrontage and Lot Area again","0e1681b3":"## Gradient Boosting","e688a6d7":"### Impute for Missing Values","098b19e5":"##### Normal Log Transformation","a9a72a16":"### Additional","f84683b6":"##### Scatter plot of actual values vs predicted values (HousingPrices_train)","39cace6d":"##### Visualizing","56b1c3d5":"##### Scatter plot of actual values vs predicted values (HousingPrices_train)","96e6d7bf":"### Check for missing values again","52c7c364":"### Define IVs and DV (X & y)","660a95a7":"##### Exterior2nd - Fill with most frequent class","bce9949c":"##### Look how much features are correlated by using the Correlation Plot","f0b061b8":"## Feature Engineering","c93181f2":"##### BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 - Fill with None","d731c7f5":"##### Utilities - Drop Feature","dfe31ade":"##### KitchenQual - Fill with most frequent class","d22f01c6":"##### Maybe dealing with outliers can lead to achieving better scores. \n##### Loads of thanks to [Serigne](https:\/\/www.kaggle.com\/serigne) for sharing the Box-Cox Transformation. ","b9e61a40":"##### Finalizing X, and scaling train & test separately","4b7eeecf":"##### GarageQual, GarageType, GarageFinish, GarageCond - Fill with None","e85d26fe":"### Import the Data","7a890ec9":"##### BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath - Fill with 0s","3d49cae0":" ##### MasVnrType - Fill with None","b98462c3":"##### Lot Frontage - Fill with Median","15e8717e":"##### Take a Peek at the Dataset","820f1316":"##### Trick: Combine BsmtFinSF1, BsmtFinSF2, 1stFlrSF and 2ndFlrSF","7176ffd0":"##### Scatter plot of actual values vs predicted values (HousingPrices_train)","556791a4":"##### SaleType - Fill with most frequent class","abfbfe43":"##### Split back to train and test","b85d524e":"##### MasVnrArea - Fill with 0","5e1d38c6":"### Check for Missing Values","1cfdce6c":"##### Visualize using Missingness Map","c3caab3d":"##### Fence - Fill with None","a6ece33f":"##### Check for skewness of features","6ae2fafb":"### Import Libraries","3408aa8f":"###### If the feature is irrelevant, lasso penalizes it\u2019s coefficient and shrinks it. Hence the features with coefficient = 0 are removed and the rest are taken. Dropping one column from the one-hot encoded variables wouldn\u2019t be necessary as this step will definitely eliminate one of them.","315ba5ab":"##### Residual Histogram \u2013 to visualize error distribution","01220006":"##### GarageArea, GarageYrBlt, GarageCars = Fill with 0s","c7d12312":"## Random Forest","05d997de":"##### Exterior1st - Fill with most frequent class","ea6b7757":"## Extreme Gradient Boosting","699be164":"##### Transform necessary features to 'object' type","465c6845":"## Data Pre-processing","6268c7b2":"##### Electrical - Fill with the most frequent class","11658d8e":"##### MiscFeature - Fill with None","041f2496":"##### Splitting Again","8fa8e93b":"##### Apply boxcox1p Transformation (to deal with features with 0 values) to all features with >0.7 absolute skewness","e657c238":"## Feature Selection with Lasso","57dcdde9":"##### PoolQC - Fill with None","f3ba7ca1":"### Not the best Housing Prices solution out there, but will give you a pretty decent score. :)","488dc968":"##### Dealing with the Dependent Variable - SalePrice","f2b7ceb3":"##### FireplaceQU - Drop Feature","d1b4ed4f":"##### Alley - Fill with None"}}