{"cell_type":{"1ab5e186":"code","11479e63":"code","d895802e":"code","24795ff5":"code","0671615e":"code","9aa801a7":"code","62a0d20d":"code","af3bc735":"code","f4ba32d4":"code","b91b5a66":"code","ad53f027":"code","734f9f99":"code","b06cf8a0":"code","7bd04866":"code","8a83b0b5":"code","291f7be2":"code","853c4e5c":"code","132a6336":"code","9a39088b":"code","df8bbada":"code","0013e7bd":"code","f2840dce":"code","33e1fea1":"code","a928083d":"code","c53753ce":"code","a209f3c6":"code","b861adb4":"code","44aa84b8":"code","ddd0ae88":"code","ebe258b8":"code","4b5e3df3":"code","a33b8e58":"code","87402b63":"code","ca227df8":"code","52ba2bfd":"code","d9b5dc68":"code","df34154f":"code","82768d5c":"code","9dea1218":"code","7c8ba109":"code","853c0447":"code","658f490e":"code","d5a4c412":"code","949d1106":"code","5341983e":"code","ad0e36dc":"code","20d09ba7":"code","44f7e578":"code","93e0a0d5":"code","23ccc6ed":"code","2996497f":"code","10cb8d87":"code","1187e9bc":"code","6415f8e9":"code","f5956211":"code","3f100902":"code","ae808045":"code","ec7c89b2":"code","407fdf63":"code","9d2911fe":"code","29d3953b":"code","94210966":"code","5ffa5962":"code","601d3974":"code","8e7f0888":"code","15d920c7":"code","135c99e4":"code","bd9a551e":"code","0060721b":"code","6bdccbdf":"code","b8511dc9":"markdown","76cfb44d":"markdown","71bda80b":"markdown","81be0426":"markdown","61e86436":"markdown","1167e1d8":"markdown","0025539d":"markdown","12a16b0f":"markdown","f2a6a5c6":"markdown","83008df6":"markdown","e13fee4f":"markdown","3eb5d623":"markdown","46b6fcfc":"markdown","09d1cbd4":"markdown","5c15d90c":"markdown","2b08aaaa":"markdown","2fe19f23":"markdown","500bc2c9":"markdown","6f6b6bf3":"markdown","a5e4db67":"markdown","04016344":"markdown","5dddf2ac":"markdown","e95e1eb6":"markdown","5e0cb007":"markdown","0f0e0e9c":"markdown","092047b1":"markdown","b718fc97":"markdown","87fad9c6":"markdown","f5f6299f":"markdown","d253c86c":"markdown"},"source":{"1ab5e186":"import os\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","11479e63":"import tensorflow as tf\nimport keras\n\nimport sklearn\nfrom sklearn import model_selection  # KFold\n\nimport lightgbm\nfrom lightgbm import LGBMClassifier\n\nimport category_encoders\nfrom category_encoders import ordinal  # OrdinalEncoder","d895802e":"print(tf.__version__)\nprint(sklearn.__version__)","24795ff5":"# \ud604\uc7ac Directory \ud655\uc778\nprint('\ud604\uc7ac \uc704\uce58: ', os.getcwd())\nprint('')\n\n# \ud30c\uc77c \ud655\uc778\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print('\ub370\uc774\ud130 \ud30c\uc77c: ', os.path.join(dirname, filename))","0671615e":"train_df = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest_df  = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\n\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","9aa801a7":"train_df.sample(10)","62a0d20d":"test_df.sample(10)","af3bc735":"train_df.info()","f4ba32d4":"test_df.info()","b91b5a66":"train_df.describe()","ad53f027":"train_df.describe(include='O')","734f9f99":"test_df.describe()","b06cf8a0":"test_df.describe(include='O')","7bd04866":"numerical_order = ['id', 'age', 'fnlwgt', 'education_num', 'capital_gain', 'capital_loss', 'hours_per_week']\ncategorical_order = ['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country']","8a83b0b5":"def get_min_max_avg(df, feature):\n    print('Feature: ', feature)\n    print('--------------------------------------')\n    print('The max value is:',df[feature].max())\n    print('The min value is:',df[feature].min())\n    print('The average value is:',df[feature].mean())\n    print('The median value is:',df[feature].median())","291f7be2":"def get_unique_values(df, feature):\n    all_categories = df[feature].unique()\n    print(f'Column \"{feature}\" has {len(all_categories)} unique categroies')\n    print('------------------------------------------')\n    print('\\n'.join(all_categories))","853c4e5c":"get_min_max_avg(train_df, 'age')","132a6336":"fig, ax = plt.subplots(1, 1, figsize=(25, 5))\nax.set_title('Age Distribution')\nax.hist(train_df['age'], bins=73)\nprint()","9a39088b":"from ggplot import *","df8bbada":"fig = plt.figure()\n\nggplot(train_df, aes(x='age', fill='income')) + geom_density(alpha=0.7) + ggtitle(\"The age distribution by income\")","0013e7bd":"get_unique_values(train_df, 'workclass')\nworkclass_order = train_df['workclass'].unique()  # ['Private' 'State-gov' '?' 'Self-emp-not-inc' 'Local-gov' 'Federal-gov' 'Self-emp-inc' 'Without-pay' 'Never-worked']","f2840dce":"value_counts = train_df['workclass'].value_counts()[workclass_order]\nover = train_df[train_df['income'] == '>50K']['workclass'].value_counts()\nunder = train_df[train_df['income'] == '<=50K']['workclass'].value_counts()[workclass_order]\npercentages = (over \/ value_counts)[workclass_order].reset_index()\n\nprint('-------------------- All Data --------------------')\nprint(value_counts)\nprint('')\n\nprint('-------------------- income > 50K -------------------------')\nprint(over)\nprint('')\n\nprint('-------------------- income <= 50K -------------------------')\nprint(under)\nprint('')\n\nprint('-------------------- Ratio -------------------------')\nprint(percentages)","33e1fea1":"fig, ax = plt.subplots(1, 2, figsize=(35, 10))\n\n#\nsns.countplot(x='workclass', data=train_df, palette=\"Set2\", edgecolor='black', order = workclass_order, ax=ax[0])\n\nvalue_counts = train_df['workclass'].value_counts()[workclass_order].reset_index()\nfor i, v in value_counts.iterrows():\n    ax[0].text(i - 0.1, v['workclass'] + 150 , value_counts['workclass'][i])\n\n#\nsns.countplot(x='workclass', data=train_df, hue='income', palette=\"Set2\", edgecolor='black', order = workclass_order, ax=ax[1])\n\nfor i, v in under.reset_index().iterrows():\n    ax[1].text(i-0.3, v['workclass'] + 150 , percentages['workclass'][i], rotation=45)","a928083d":"get_min_max_avg(train_df, 'fnlwgt')","c53753ce":"fig, ax = plt.subplots(1, 1, figsize=(35, 10))\nax.hist(train_df['fnlwgt'], bins=100)\nprint()","a209f3c6":"fig, ax = plt.subplots(1, 1, figsize=(100, 10))\nsns.scatterplot(data=train_df, x='id', y='fnlwgt', ax=ax)","b861adb4":"fig = plt.figure()\nggplot(train_df, aes(x='fnlwgt', fill='income')) + geom_density(alpha=0.7) + ggtitle('The final weight distribution by income')","44aa84b8":"get_unique_values(train_df, 'education')","ddd0ae88":"col = 'education'\n\nfig, ax = plt.subplots(1, 2, figsize=(35, 7))\n\nvalue_counts = train_df[col].value_counts()\n\n#\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.1, v[col]+150 , v[col])\n\n#\nsns.countplot(x=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);","ebe258b8":"get_min_max_avg(train_df, 'education_num')","4b5e3df3":"fig, ax = plt.subplots(1, 1, figsize=(25, 5))\nax.hist(train_df['education_num'], bins=15)\nprint()","a33b8e58":"fig = plt.figure()\nggplot(train_df, aes(x='education_num', fill='income')) + geom_density(alpha=0.7) + ggtitle('The education_num distribution by income')","87402b63":"get_unique_values(train_df, 'marital_status')","ca227df8":"fig, ax = plt.subplots(1, 2, figsize=(35, 7))\ncol = 'marital_status'\nvalue_counts = train_df[col].value_counts()\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nsns.countplot(x=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);\n\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.1, v[col]+150 , v[col])","52ba2bfd":"get_unique_values(train_df, 'occupation')","d9b5dc68":"col = 'occupation'\n\nfig, ax = plt.subplots(1, 2, figsize=(35, 7))\n\nvalue_counts = train_df[col].value_counts()\n\n#\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nsns.countplot(y=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);\n\nplt.xticks(rotation=45)\n\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.12, v[col]+50 , v[col])","df34154f":"get_unique_values(train, 'relationship')","82768d5c":"col = 'relationship'\n\nfig, ax = plt.subplots(1, 2, figsize=(35, 7))\n\n#\nvalue_counts = train_df[col].value_counts()\n\n#\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nsns.countplot(x=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);\n\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.1, v[col]+150 , v[col])","9dea1218":"get_unique_values(train, 'race')","7c8ba109":"col = 'race'\nfig, ax = plt.subplots(1, 2, figsize=(35, 7))\n\n#\nvalue_counts = train_df[col].value_counts()\n\n#\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nsns.countplot(x=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);\n\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.1, v[col]+150 , v[col])","853c0447":"get_unique_values(train_df, 'sex')","658f490e":"col = 'sex'\n\nfig, ax = plt.subplots(1, 2, figsize=(35, 6))\n\n#\nvalue_counts = train_df[col].value_counts()\n\n#\nsns.countplot(x=col, data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[0])\nsns.countplot(x=col, hue='income', data=train_df, palette=\"Set2\", edgecolor='black', order = value_counts.index, ax=ax[1]);\n\nfor i, v in value_counts.reset_index().iterrows():\n    ax[0].text(i-0.05, v[col]+150 , v[col])","d5a4c412":"fig, ax = plt.subplots(1, 1, figsize=(25, 5))\nax.hist(train_df['capital_gain'], bins=100)\nprint()","949d1106":"fig = plt.figure()\nggplot(train_df.loc[train_df['capital_gain'] > 0], aes(x='capital_gain', fill='income')) + geom_density(alpha=0.7) + ggtitle('The capital loss distribution by income')","5341983e":"sns.boxplot(x='income', y='capital_gain', data=train_df.loc[train_df['capital_gain'] > 0], palette=\"Set2\", linewidth=2);","ad0e36dc":"get_min_max_avg(train_df, 'capital_loss')","20d09ba7":"fig, ax = plt.subplots(1, 1, figsize=(25, 5))\nax.hist(train_df['capital_loss'], bins=100)\nprint()","44f7e578":"fig = plt.figure();\nggplot(train_df.loc[train_df['capital_loss'] > 0], aes(x='capital_loss', fill='income')) + geom_density(alpha=0.7) + ggtitle('The capital loss distribution by income')","93e0a0d5":"sns.boxplot(x='income', y='capital_loss', data=train_df.loc[train_df['capital_loss'] > 0], palette=\"Set2\", linewidth=2);","23ccc6ed":"get_min_max_avg(train_df, 'hours_per_week')","2996497f":"fig, ax = plt.subplots(1, 1, figsize=(25, 5))\nax.hist(train_df['hours_per_week'], bins=98)\nprint()","10cb8d87":"fig = plt.figure()\nggplot(train_df, aes(x='hours_per_week', fill='income')) + geom_density(alpha=0.7) + ggtitle('The hours per week distribution by income')","1187e9bc":"sns.boxplot(x='income', y='hours_per_week', data=train_df, palette=\"Set2\", linewidth=2);","6415f8e9":"train_df['native_country'].value_counts()","f5956211":"train_df.drop(['id'], axis=1, inplace=True)\ntest_df.drop(['id'], axis=1, inplace=True)","3f100902":"train_y = train_df['income'] != '<=50K'\ntrain_x = train_df.drop(['income'], axis=1)","ae808045":"label_encoder = ordinal.OrdinalEncoder(list(train_x.columns))","ec7c89b2":"train_x = label_encoder.fit_transform(train_x, train_y)\ntest_x  = label_encoder.transform(test_df)","407fdf63":"NFOLDS = 5\nfolds = model_selection.KFold(n_splits=NFOLDS)\n\ncolumns = train_x.columns\nsplits  = folds.split(train_x, train_y)\ny_preds = np.zeros(test_x.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = columns","9d2911fe":"model = LGBMClassifier(objective='binary', verbose=400, random_state=91)\n\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold: ', fold_n+1)\n    train_X, validation_X = train_x.iloc[train_index], train_x.iloc[valid_index]\n    train_Y, validation_Y = train_y.iloc[train_index], train_y.iloc[valid_index]\n\n    evals = [(train_X, train_Y), (validation_X, validation_Y)]\n    model.fit(train_X, train_Y, eval_metric='f1', eval_set=evals, verbose=True)\n    \n    feature_importances[f'fold_{fold_n + 1}'] = model.feature_importances_\n        \n    y_preds += model.predict(test_x).astype(int) \/ NFOLDS\n    \n    del train_X, validation_X, train_Y, validation_Y","29d3953b":"feature_importances","94210966":"sample_submission['prediction'] = y_preds\n\nfor ix, row in sample_submission.iterrows():\n    if row['prediction'] > 0.5:\n        sample_submission.loc[ix, 'prediction'] = 1\n    else:\n        sample_submission.loc[ix, 'prediction'] = 0\n\nsample_submission = sample_submission.astype({\"prediction\": int})\nsample_submission.to_csv('submission.csv', index=False)","5ffa5962":"train_df.drop(['fnlwgt'], axis=1, inplace=True)\ntest_df.drop(['fnlwgt'], axis=1, inplace=True)","601d3974":"train_y = train_df['income'] != '<=50K'\ntrain_x = train_df.drop(['income'], axis=1)","8e7f0888":"label_encoder = ordinal.OrdinalEncoder(list(train_x.columns))","15d920c7":"train_x = label_encoder.fit_transform(train_x, train_y)\ntest_x  = label_encoder.transform(test_df)","135c99e4":"NFOLDS = 5\nfolds = model_selection.KFold(n_splits=NFOLDS)\n\ncolumns = train_x.columns\nsplits  = folds.split(train_x, train_y)\ny_preds = np.zeros(test_x.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = columns","bd9a551e":"model = LGBMClassifier(objective='binary', verbose=400, random_state=91)\n\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold: ', fold_n+1)\n    train_X, validation_X = train_x.iloc[train_index], train_x.iloc[valid_index]\n    train_Y, validation_Y = train_y.iloc[train_index], train_y.iloc[valid_index]\n\n    evals = [(train_X, train_Y), (validation_X, validation_Y)]\n    model.fit(train_X, train_Y, eval_metric='f1', eval_set=evals, verbose=True)\n    \n    feature_importances[f'fold_{fold_n + 1}'] = model.feature_importances_\n        \n    y_preds += model.predict(test_x).astype(int) \/ NFOLDS\n    \n    del train_X, validation_X, train_Y, validation_Y","0060721b":"feature_importances","6bdccbdf":"sample_submission['prediction'] = y_preds\n\nfor ix, row in sample_submission.iterrows():\n    if row['prediction'] > 0.5:\n        sample_submission.loc[ix, 'prediction'] = 1\n    else:\n        sample_submission.loc[ix, 'prediction'] = 0\n\nsample_submission = sample_submission.astype({\"prediction\": int})\nsample_submission.to_csv('submission.csv', index=False)","b8511dc9":"## Check MissingData","76cfb44d":"### **(4) education**","71bda80b":"## Data Distribution","81be0426":"## Defaults","61e86436":"# **[1. Introduction](None)**\n---\n\n### **\ub300\ud68c Description**\n\ud55c\uad6d\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ubbf8\uad6d\ub3c4 \uc8fc\uae30\uc801\uc73c\ub85c \uc131\uc778\uc744 \ub300\uc0c1\uc73c\ub85c \ud55c \uc5ec\ub7ec \uc778\uad6c\uc870\uc0ac\ub97c \uc2dc\ud589\ud569\ub2c8\ub2e4.  \n\uc774 \ub300\ud68c\ub294 1994\ub144 \ubbf8\uad6d \uc131\uc778\uc744 \ub300\uc0c1\uc73c\ub85c \uc870\uc0ac\ud55c \ub370\uc774\ud130\ub97c \ubc14\ud0d5\uc73c\ub85c \uc9c4\ud589\ub429\ub2c8\ub2e4.  \n\n\uc5ec\ub7ec\ubd84\uc740 \uc774 \ub370\uc774\ud130\uc5d0\uc11c \uac01 \uc0ac\ub78c\uc758 \uc18c\ub4dd\uc744 \uc608\uce21\ud558\uba74 \ub429\ub2c8\ub2e4.  \n\n\ub098\uc774, \uacb0\ud63c \uc5ec\ubd80, \uc9c1\uc885 \ub4f1 \ucd1d 14\uac1c\uc758 feature\ub97c \ud1b5\ud574 \uc608\uce21\uc744 \ud558\uba74 \ub429\ub2c8\ub2e4.  \n\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12\uc740 \uac04\ub2e8\ud569\ub2c8\ub2e4.  \n\n* \uc5f0\uc18c\ub4dd\uc774 $50,000 \uc774 \ub118\ub294\ub2e4\uba74 1  \n\n* \uc5f0\uc18c\ub4dd\uc774 $50,000 \uc774 \ub118\uc9c0 \uc54a\ub294\ub2e4\uba74 0  \n\n\uc9c0\uae08\uacfc \uae08\uc561\uc758 \uac00\uce58\uac00 \ub2e4\ub974\uaca0\uc9c0\ub9cc \ucd5c\ub300\ud55c \uc5ec\ub7ec\ubd84\uc758 \uc778\uc0ac\uc774\ud2b8\ub97c \ubc14\ud0d5\uc73c\ub85c \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\ub294 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4.  \n\n### **Timeline**\n\n* 20\/10\/16 12:00 - \ub300\ud68c \uc2dc\uc791\n* 20\/10\/31 - \uc138\ubbf8\ub098 : \uccab \uce90\uae00 \ub3c4\uc804 (\uc548\uc218\ube48)\n* 20\/11\/07 - \uc138\ubbf8\ub098 : \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 (\uae40\ud0dc\uc9c4)\n* 20\/11\/14 - \uc138\ubbf8\ub098 : \ubaa8\ub378\uacfc \uac80\uc99d & \uc559\uc0c1\ube14 (\uac15\ucc9c\uc131)\n* **20\/11\/28 12:00 - \ub300\ud68c \uc885\ub8cc**\n* 20\/12\/05 - \uce90\uae00\ucf54\ub9ac\uc544 \uc6b4\uc601\uc9c4\uacfc\uc758 \ub300\ud654","1167e1d8":"## 3.1. Load Data","0025539d":"### **(5) education_num**","12a16b0f":"### **(8) relationship**","f2a6a5c6":"### **(9) race**","83008df6":"### **(12) capital_loss**","e13fee4f":"### **(7) occupation**","3eb5d623":"### **(3) fnlwgt : final weight**","46b6fcfc":"## EDA","09d1cbd4":"# **\uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21 \ub300\ud68c**\n---\n\n>### Contents\n> \n> 1. Introduction\n> 2. Import Pakgages","5c15d90c":"# **[2. Import Pakages](None)**\n---","2b08aaaa":"workclass_df = train_df['workclass'].value_counts()[workclass_order].reset_index(name='counts')\nworkclass_df = pd.DataFrame(workclass_df)\nworkclass_df","2fe19f23":"### (1) age","500bc2c9":"### **(11) capital_gain: \uc591\ub3c4 \uc18c\ub4dd**","6f6b6bf3":"* final weight \ub72c\uae08\uc5c6\ub124...\n* final weight\uc640 income\uc774 \uc5b4\ub5a4 \uad00\uacc4\uc5d0 \uc788\ub098 \ud655\uc778\ud574\ubcf4\uc790","a5e4db67":"### **(14) native_country**","04016344":"### **(6) marital_status**","5dddf2ac":"### Drop Features","e95e1eb6":"### (2) workclass","5e0cb007":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()","0f0e0e9c":"## Features\n\n* age : \ub098\uc774\n* workclass : \uace0\uc6a9 \ud615\ud0dc\n* fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* education : \uad50\uc721 \uc218\uc900\n* education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n* marital_status: \uacb0\ud63c \uc0c1\ud0dc\n* occupation : \uc5c5\uc885\n* relationship : \uac00\uc871 \uad00\uacc4\n* race : \uc778\uc885\n* sex : \uc131\ubcc4\n* capital_gain : \uc591\ub3c4 \uc18c\ub4dd\n* capital_loss : \uc591\ub3c4 \uc190\uc2e4\n* hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* native_country : \uad6d\uc801\n* income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n  * `>50K : 1`\n  * `<=50K : 0`","092047b1":"### **(13) hours_per_week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04**","b718fc97":"# **[3. EDA](None)**\n---","87fad9c6":"## **[4. Build Various Models](None)**\n---","f5f6299f":"* Null\uc774 \ud558\ub098\ub3c4 \uc5c6\ub2e4\uace0? \uc18d\uc9c0 \ub9d0\uc790","d253c86c":"### **(10) sex**"}}