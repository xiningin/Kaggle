{"cell_type":{"06d30714":"code","49593be1":"code","fce75a09":"code","36dfdb5a":"code","082db9b6":"code","cff84acd":"code","ffee6bec":"code","5fe56d63":"code","49f38b17":"code","6393d16f":"code","b34a1487":"code","6b570280":"code","4f33bda0":"code","85029369":"code","2d561de8":"code","af14dca6":"code","a79649f9":"code","8d55d174":"code","bc7dfe17":"code","c5a3a58b":"code","f5aca8b4":"code","208cda02":"code","d5a7be53":"code","1f1f7a45":"code","ba04c505":"code","19326581":"code","f9a8f6fd":"code","7377923f":"code","1ebe331e":"code","4e417fbd":"code","46c4782f":"code","c1a0887c":"code","2ceb5460":"markdown","ba6586b0":"markdown","eec8ea05":"markdown","da444222":"markdown","a3eef4a0":"markdown","04fa73d0":"markdown","94225dd1":"markdown","51ee45ff":"markdown","90882843":"markdown"},"source":{"06d30714":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# Any results you write to the current directory are saved as output.","49593be1":"import glob\ntrain_arr = []\nfor file in glob.glob(\"..\/input\/train\/train\/*\/*\"):\n    train_arr.append({\"name\": file, \"label\": file.split(\"\/\")[-2]})\ndf = pd.DataFrame(train_arr)","fce75a09":"test_df = pd.read_csv(f\"..\/input\/sample_submission.csv\")","36dfdb5a":"df.sample(frac=1).head()","082db9b6":"df[\"label\"].nunique()","cff84acd":"df[\"label\"].value_counts()","ffee6bec":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re","5fe56d63":"iplot([go.Bar(\nx=df[\"label\"].value_counts().keys(),\ny=df[\"label\"].value_counts())])","49f38b17":"!pip install imagesize","6393d16f":"import imagesize\ndf[\"width\"] = 0\ndf[\"height\"] = 0\ndf[\"aspect_ratio\"] = 0.0\nfor idx, row in df.iterrows():\n    width, height = imagesize.get(row[\"name\"])\n    df.at[idx, \"width\"] = width\n    df.at[idx, \"height\"] = height\n    df.at[idx, \"aspect_ratio\"] = float(height) \/ float(width)","b34a1487":"df.head()","6b570280":"df[\"height\"].hist()","4f33bda0":"df[\"width\"].hist()","85029369":"df[\"aspect_ratio\"].hist()","2d561de8":"from fastai.vision import *","af14dca6":"path = Path(\"..\/input\")\ntfms = get_transforms(do_flip=True, max_rotate=10, max_zoom=1.2, max_lighting=0.3, max_warp=0.15)\ndata = ImageDataBunch.from_folder(path\/\"train\",valid_pct=0.3, ds_tfms=tfms, size=224)","a79649f9":"data.show_batch(rows=2, figsize=(5,5))","8d55d174":"df.head()","bc7dfe17":"data = ImageDataBunch.from_df(\"\", df=df[[\"name\", \"label\"]], label_col=\"label\", folder=\"\", size=64)\n","c5a3a58b":"data.add_test(ImageList.from_df(test_df, '..\/input', folder=\"test\/test\"))","f5aca8b4":"data.show_batch(rows=3, figsize=(5,5))","208cda02":"learn = cnn_learner(data, models.resnet34, metrics=error_rate)","d5a7be53":"learn.fit_one_cycle(3, 1e-2)","1f1f7a45":"learn.lr_find();","ba04c505":"learn.recorder.plot()","19326581":"learn.fit_one_cycle(3, 1e-25)","f9a8f6fd":"interp = ClassificationInterpretation.from_learner(learn)","7377923f":"interp.plot_confusion_matrix(figsize=(25,25))","1ebe331e":"interp.plot_top_losses(9, figsize=(25,25))","4e417fbd":"interp.most_confused()","46c4782f":"test_probs, _ = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds = [data.classes[pred] for pred in np.argmax(test_probs.numpy(), axis=-1)]","c1a0887c":"test_df.predicted_class = test_preds\ntest_df.to_csv(\"submission.csv\", index=False)","2ceb5460":"<h3> \nApproach of data loading #2 ImageDataBunch.from_df<h3>","ba6586b0":"In this kernel, we will try to first create a pandas dataframe from the given dataset present as image files and then use it to feed into the training model.","eec8ea05":"**Let's inspect the distribution of classes**","da444222":"We can see that there is imbalance in the distribution.","a3eef4a0":"<h3> \nApproach of data loading #1 ImageDataBunch.from_folder<h3>","04fa73d0":"Since all the images are not of same aspect ratio, it will be important to decide how we crop\/scale the images while applying augmentations","94225dd1":"<h3> Using fastai's ClassificationInterpretation to analyze the training results <\/h3>","51ee45ff":"Let's also see the width\/height and aspect ratio for the images.","90882843":"Same could be visualized using plot.ly chart"}}