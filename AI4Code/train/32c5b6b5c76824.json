{"cell_type":{"2f53163c":"code","61a8341b":"code","c46353dd":"code","251fe562":"code","490dd655":"code","ccd24904":"code","27acb8d3":"code","4dcfeb71":"code","ba08cb3a":"code","67b17e84":"code","2f78a8d8":"code","f8a463d0":"code","b9b2f40c":"code","bc4739ed":"code","5d2f5e83":"code","7c819f7d":"code","de218324":"code","01c54d75":"code","f93f37df":"code","43a599a0":"markdown","8536c3c0":"markdown","1f925e80":"markdown","0b07a6a2":"markdown","69b8b193":"markdown","db83fcfd":"markdown","1073f14c":"markdown","f71ec113":"markdown","4fae7c65":"markdown","416bc6b3":"markdown","ad3d1fd8":"markdown"},"source":{"2f53163c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","61a8341b":"class ChartWhisky:\n    def __init__(self, df, low, high, color='red'):\n        self.df = df\n        self.low = low\n        self.high = high\n        self.color = color\n        self.data = self._set_initial_data()\n        self.x = self._set_x()\n        self.y = self._set_y()\n        self.x_train, self.x_test, self.y_train, self.y_test = self._set_regression_tests()\n\n    def _set_y(self):\n        y = self.data['review'].values\n        y = y.reshape(-1,1)\n        return y\n        \n    def _set_x(self):\n        x = self.data['price'].values\n        x = x.reshape(-1,1)\n        return x\n        \n    def _set_initial_data(self):\n        data = self.df[(self.df['price'] < self.high) & (self.df['price'] > self.low)]\n        return data\n    \n    def _set_regression_tests(self):\n        return train_test_split(self.x, self.y, train_size=0.8, test_size=0.2, random_state=100)\n    \n    def plot(self):\n        plt.scatter(self.x_train, self.y_train, color=self.color)\n        plt.xlabel('price')\n        plt.ylabel('review score')\n        plt.title(f'Whisky between \\$ {self.low} -  $ {self.high} :  Review by Price')\n        plt.show()\n        \n    def train_score(self):\n        lm = LinearRegression()\n        lm.fit(self.x_train, self.y_train)\n        return round(lm.score(self.x_train, self.y_train) * 100,2)\n    \n    def test_score(self):\n        lm = LinearRegression()\n        lm.fit(self.x_test, self.y_test)\n        return round(lm.score(self.x_test, self.y_test) *100,2)\n    \n    def get_scores(self):\n        return f'Test: {self.test_score()}  Train: {self.train_score()}'\n    \n    def predict(self):\n        lm = LinearRegression()\n        lm.fit(self.x_train, self.y_train)\n        y_predict = lm.predict(self.x_test)\n        return y_predict\n    \n    def plot_regression(self):\n        plt.scatter(self.x_train, self.y_train, color=self.color)\n        plt.plot(self.x_test, self.predict())\n        plt.xlabel('price')\n        plt.ylabel('review score')\n        plt.title(f'Whisky between \\$ {self.low} -  $ {self.high} :  Review by Price')\n        plt.show()\n","c46353dd":"df = pd.read_csv('\/kaggle\/input\/scotch-whiskey-reviews-update-2020\/scotch_review2020.csv')\n\ndf.head()","251fe562":"initial_row_count = df.shape[0]\n\n# drop unused row: all prices are in US Dollars\ndf.drop(columns='currency', inplace=True)\n\n# rename column\ndf.rename(columns={'description.1.2247.':'description', 'review.point': 'review'}, inplace=True)\n\n# Excluding Whiskey sold in collection\/sets\nsold_sets = df[df['price'].str.contains('set')]\ndf = df[~df['price'].str.contains('set')]\n\n# clean price column\ndf['price'] = df['price'].str.replace(',','')\ndf['price'] = df['price'].str.replace('$','', regex=True)\n\n# remove bad data entry\ndf = df[~df['price'].str.contains('\/')]\n\n# set price as int\ndf['price'] = df['price'].astype(int)\n\nfinal_row_count = df.shape[0]\n\nprint(f'Pre Clened row count: {initial_row_count}')\nprint(f'Post Cleaned row count: {final_row_count}')\nprint(f'Dropped row count due to bad data: {initial_row_count - final_row_count}')","490dd655":"df.describe()","ccd24904":"df.info()","27acb8d3":"categories = df['category'].value_counts()\ncategories","4dcfeb71":"single_malt = df[df['category'] == 'Single Malt Scotch']\nblended_malt = df[df['category'] == 'Blended Malt Scotch Whisky']\nblended_scotch = df[df['category'] == 'Blended Scotch Whisky']\n\nprint(f'single: {single_malt.shape[0]}')\nprint(f'blended scotch: {blended_scotch.shape[0]}')\nprint(f'blended malt: {blended_malt.shape[0]}')\n","ba08cb3a":"# Integer lists \nprice = df['price'].values\nreview = df['review'].values","67b17e84":"# Reshape\nx = price.reshape(-1,1)\ny = review.reshape(-1,1)\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, train_size=0.8, test_size=.2, random_state=100)","2f78a8d8":"plt.scatter(x_train, y_train, color='purple')\nplt.xlabel('price')\nplt.ylabel('review score')\nplt.title('Scotch Whiskey Review by Bottle Price')\nplt.show()","f8a463d0":"df['price_bracket'] = pd.qcut(df['price'], 6, precision=0)\ndf['price_bracket'].value_counts()","b9b2f40c":"# Price Buckets\nw1 = ChartWhisky(df, 0, 60, 'blue')\nw2 = ChartWhisky(df, 61, 80, 'red')\nw3 = ChartWhisky(df, 81, 111, 'purple')\nw4 = ChartWhisky(df, 112, 162, 'orange')\nw5 = ChartWhisky(df, 163, 380, 'pink')\nw6 = ChartWhisky(df, 381, 160000, 'gold')\n\nprice = [ w1, w2, w3, w4, w5, w6 ]\n\n# Whisky Styles\nw_blended_malt = ChartWhisky(blended_malt, 0, 160000, 'red')\nw_single_malt = ChartWhisky(single_malt, 0, 160000, 'blue')\nw_blended = ChartWhisky(blended_scotch, 0, 160000, 'green')\n\nstyle = [ w_blended_malt, w_single_malt, w_blended ]","bc4739ed":"for i in price:\n    print(i.get_scores())","5d2f5e83":"for i in price:\n    i.plot_regression()","7c819f7d":"for i in style:\n    print(i.get_scores())","de218324":"for i in style:\n    i.plot_regression()","01c54d75":"under_100 = ChartWhisky(df, 0, 100, 'red')\nlow_50_200 = ChartWhisky(df, 50, 200, 'black')\nmiddle_200_1000 = ChartWhisky(df, 200, 1000, 'blue')\nhigh = ChartWhisky(df, 5000, 20000, 'green')\n\ncustom_ranges = [under_100,low_50_200, middle_200_1000, high ]\n\nfor i in custom_ranges:\n    i.plot_regression()","f93f37df":"affordable = ChartWhisky(df, 0, 200, 'red')\nunaffordable = ChartWhisky(df, 200, 1000, 'gold')\n\nbinary_choice = [ affordable, unaffordable ]\n\nfor i in binary_choice:\n    i.plot_regression()","43a599a0":"### Data and Library Imports","8536c3c0":"### Initial Hypothesis\n\n\nThe whisky data set provides tasting reviews and prices for individal bottles of scotch whisky.\nThe dataset provided has over 2247 reviews for scotch whisky priced between 10 dollars, and 157,000 dollars for a limited release bottle of the [Johnnie Walker Jubilee](https:\/\/www.johnniewalker.com\/en-lb\/our-whisky\/john-walker-and-sons\/diamond-jubilee\/), released for Queen Elizabeth II that comes in a crystal decanter with a half-carat diamond. This is obvisouly and outlier and will be included and excluded as we look at the data.\n\nIt is my belief that there is a correlation between price and review, but that it will not be consistent across price brackts.  I suspect there is a strong correlation in the lower priced scotches and a weaker relationship as prices increase. A 10 dollar bottle is likely of different quaity than a 200 dollar bottle, but that may be less obvious when comparing a 1000 and 10,000 dollar bottles.\n\nA ChartWhiskey class is employed to simplify the analysis process and facilitate simple charting.","1f925e80":"### Create Class Instances by price bracket and whisky style","0b07a6a2":"### Linear Regression by price brackets\n\nPrice and review compared in different price buckets. ","69b8b193":"### Data Cleaning\n\nRemoval of unintersting columns and bad data collection. Instances where data was poorly collected are droped since their individual bottle price is unknown and are likely collector items sold in sets. ","db83fcfd":"### Regression Charts for different price buckets\n\n- There appears to be the strongest correlation in lower priced bottles. \n- Middle range whiskey has a very low correlation for bottles between 80 and 200 dollars.\n- ","1073f14c":"### 'Affordble' and 'Unaffordable' correlation\n- We will call bottles under 200 dollars as affordable.  \n- Bottles between 200 and 1,000 dollars we will classify as unaffordable.\n\n","f71ec113":"#### ChartWhisky Helper Class","4fae7c65":"### Cleaned Data Overview","416bc6b3":"# Scotch Whisky Review and Price Correlation","ad3d1fd8":"#### Shape data for regression testing"}}