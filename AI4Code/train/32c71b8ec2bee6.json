{"cell_type":{"181e0373":"code","a57919b4":"code","f30c0965":"code","6cfc0a71":"code","ebbcd36e":"code","3e90c668":"code","290bde15":"code","d1373ab6":"code","5f038119":"code","86da65f0":"code","c613ba34":"code","a2b6174b":"code","06e1cca2":"code","30afa3cd":"code","b9e2b466":"code","eced7436":"code","558ec3cf":"markdown","1992d1e0":"markdown","b527b153":"markdown"},"source":{"181e0373":"!pip install jovian -q\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.layers import *\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import train_test_split\nimport jovian\nfrom tqdm import tqdm_notebook\nimport warnings\nwarnings.simplefilter(\"ignore\")","a57919b4":"chem_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/chem_Jacarrd_sim.csv\",index_col=0)\nindication_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/enzyme_Jacarrd_sim.csv\",index_col=0)\ntarget_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/target_Jacarrd_sim.csv\",index_col=0)\ntransporter_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/transporter_Jacarrd_sim.csv\",index_col=0)\n#------------------ Using only 4 datassets for the model--------------------\n\ndrug_drug_matrix = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/drug_drug_matrix.csv\",index_col=0) #--> Labels\n#---------------------------------------------------------------------------\n\nenzyme_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/enzyme_Jacarrd_sim.csv\",index_col=0)\npathway_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/pathway_Jacarrd_sim.csv\",index_col=0)\noffsideeffect_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/offsideeffect_Jacarrd_sim.csv\",index_col=0)\nsideeffect_df = pd.read_csv(\"..\/input\/drug-drug-similarity-dataset\/sideeffect_Jacarrd_sim.csv\",index_col=0)\n\n\ncomplete_df = chem_df+indication_df+target_df+transporter_df+enzyme_df+pathway_df+offsideeffect_df+sideeffect_df","f30c0965":"integrated_df = pd.DataFrame(np.zeros((149878, 1096)))\nintegrated_target = pd.DataFrame(np.zeros((149878,1)))\nind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = complete_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = complete_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            integrated_df.iloc[ind] = a+b\n            integrated_target.iloc[ind] = drug_drug_matrix.iloc[i,j]\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        break","6cfc0a71":"chem_df1 = pd.DataFrame(np.zeros((149878, 1096)))\nindication_df1 = pd.DataFrame(np.zeros((149878, 1096)))\ntarget_df1 = pd.DataFrame(np.zeros((149878, 1096)))\ntransporter_df1 = pd.DataFrame(np.zeros((149878, 1096)))\nenzyme_df1 = pd.DataFrame(np.zeros((149878, 1096)))\npathway_df1 = pd.DataFrame(np.zeros((149878, 1096)))\noffsideeffect_df1 = pd.DataFrame(np.zeros((149878, 1096)))\nsideeffect_df1 = pd.DataFrame(np.zeros((149878, 1096)))","ebbcd36e":"ind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = chem_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = chem_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            chem_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        break\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = indication_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = indication_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            indication_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = target_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = target_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            target_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = transporter_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = transporter_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            transporter_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = enzyme_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = enzyme_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            enzyme_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = pathway_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = pathway_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            pathway_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = offsideeffect_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = offsideeffect_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            offsideeffect_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        breakind=0\nflag=0\nfor i in tqdm_notebook(range(515)):\n    for j in range(i,548):\n        a = sideeffect_df.iloc[i].to_numpy().reshape(1,-1).tolist()[0]\n        b = sideeffect_df.iloc[j].to_numpy().reshape(1,-1).tolist()[0]\n        try:\n            sideeffect_df1.iloc[ind] = a+b\n            ind+=1\n        except:\n            flag=1\n            break\n    if flag:\n        break","3e90c668":"def Model(lr=0.0001):\n    model = tf.keras.Sequential([Dense(300,input_shape=[1,1096],activation=\"relu\"),\n                                 Dropout(0.5),\n                                 Dense(400,activation=\"relu\"),\n                                 Dropout(0.5),\n                                 Dense(1,activation=\"sigmoid\")])\n    model.compile(optimizer=tf.keras.optimizers.Adam(lr),loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n    return model","290bde15":"model = Model()\nmodel.summary()\nX_train,X_test,Y_train,Y_test = train_test_split(integrated_df,integrated_target,stratify=integrated_target,test_size=0.1,random_state=0)\nlogs = model.fit(X_train,Y_train,epochs=1000,validation_split=0.01, batch_size = 20480)","d1373ab6":"plt.figure(figsize=(10,10))\nplt.plot(logs.history[\"loss\"],label=\"Training Loss\")\nplt.plot(logs.history[\"val_loss\"],label=\"Validation Loss\")\nplt.legend(fontsize=13)\nplt.show()\nplt.figure(figsize=(10,10))\nplt.plot(logs.history[\"accuracy\"],label=\"Training Accuracy\")\nplt.plot(logs.history[\"val_accuracy\"],label=\"Validation Accuracy\")\nplt.legend(fontsize=13)\nplt.show()","5f038119":"preds = model.predict(X_train)\npreds = pd.DataFrame(preds)\npreds = preds.apply(pd.cut,bins=2,labels=[0,1])\nprint(f\"Accuracy: {accuracy_score(Y_train,preds)}\")\nprint(f\"Precision Score: {precision_score(Y_train,preds)}\")\nprint(f\"Recall Score: {recall_score(Y_train,preds)}\")\nprint(f\"F1-Score: {f1_score(Y_train,preds)}\")\nprint(f\"ROC AUC Score: {roc_auc_score(Y_train,preds)}\")","86da65f0":"X_test.shape","c613ba34":"preds = model.predict(X_test)\npreds = pd.DataFrame(preds)\npreds = preds.apply(pd.cut,bins=2,labels=[0,1])\nprint(f\"Accuracy: {accuracy_score(Y_test,preds)}\")\nprint(f\"Precision Score: {precision_score(Y_test,preds)}\")\nprint(f\"Recall Score: {recall_score(Y_test,preds)}\")\nprint(f\"F1-Score: {f1_score(Y_test,preds)}\")\nprint(f\"ROC AUC Score: {roc_auc_score(Y_test,preds)}\")","a2b6174b":"preds = model.predict(integrated_df)\npreds = pd.DataFrame(preds)\npreds = preds.apply(pd.cut,bins=2,labels=[0,1])\nprint(f\"\\tAccuracy: {accuracy_score(integrated_target,preds)}\")\nprint(f\"\\tPrecision Score: {precision_score(integrated_target,preds)}\")\nprint(f\"\\tRecall Score: {recall_score(integrated_target,preds)}\")\nprint(f\"\\tF1-Score: {f1_score(integrated_target,preds)}\")\nprint(f\"\\tROC AUC Score: {roc_auc_score(integrated_target,preds)}\")","06e1cca2":"jovian.commit(project=\"ddi using ANNs 2\",environment=None)","30afa3cd":"\"\"\"{'chem': 0.899, #2\n 'target': 0.787, #4\n 'transporter': 0.945, #1\n 'enzyme': 0.734,\n 'pathway': 0.767, \n 'indication': 0.802, #3\n 'sideeffect': 0.778,\n 'offsideeffect': 0.782}\"\"\"","b9e2b466":"model.predict(X_train.iloc[0,:].to_numpy().reshape(1,-1))\nfor i in range(Y_train.shape[0]):\n    if Y_train.iloc[i][0]==1:\n        print(i)","eced7436":"model.predict(X_train.iloc[2602,:].to_numpy().reshape(1,-1))","558ec3cf":"# Overall Metrics","1992d1e0":"# Testing Metrics\n","b527b153":"# Training Metrics"}}