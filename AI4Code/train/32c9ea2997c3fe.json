{"cell_type":{"37e1ae19":"code","46b5ba61":"code","7c587158":"code","204aaa09":"code","56954cd8":"code","8567a026":"code","2d2eb966":"code","ae6a9865":"code","cf56a8cc":"code","bbab6a8a":"code","5f856045":"code","ce79e8a5":"code","86d27962":"code","0dc82426":"code","595697bb":"code","a2214554":"code","bbbe50fc":"code","510df89f":"markdown","bffc3791":"markdown"},"source":{"37e1ae19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46b5ba61":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout\nfrom tensorflow.keras import callbacks","7c587158":"df_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndf_train.head()","204aaa09":"sns.countplot(x= df_train[\"label\"])\nplt.show()","56954cd8":"y_train = df_train.pop('label')\nX_train = df_train","8567a026":"X_train.head()","2d2eb966":"X_train = X_train.values.reshape(X_train.shape[0], 28, 28, 1)\nX_test = df_test.values.reshape(X_test.shape[0], 28, 28, 1)","ae6a9865":"X_train = X_train\/255\nX_test = X_test\/255","cf56a8cc":"X_train.shape, y_train.shape","bbab6a8a":"model = models.Sequential()\n\n#Conv2D con layers filter should increase in every next step ->32->64->128.. and so on input shape is 28,28 and 1  \nmodel.add(layers.Conv2D(32, (5, 5), activation='relu',input_shape=(28,28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(64, (5, 5), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(layers.Conv2D(128, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(64, activation='relu'))\n\nmodel.add(layers.Dense(10, activation='softmax'))","5f856045":"from keras.optimizers import RMSprop\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer= optimizer,loss='sparse_categorical_crossentropy',\n              metrics=['acc'])","ce79e8a5":"callback = callbacks.EarlyStopping(monitor='loss', patience=10)\nhistory = model.fit(X_train, y_train, epochs=50, batch_size=64, callbacks=[callback])","86d27962":"y_test = model.predict(X_test)","0dc82426":"y_test = np.argmax(y_test, axis = 1)","595697bb":"list1 = []\nfor i in list(df_test.index):\n    list1.append(i+1)","a2214554":"submission = pd.DataFrame({\n    \"ImageId\": list1,\n    \"Label\": y_test\n})","bbbe50fc":"submission.to_csv(\"submission_Digit_recognizer2.csv\", index = False)","510df89f":"# Import Libraries ","bffc3791":"# Testing the Model"}}