{"cell_type":{"f1998f62":"code","ba9371e6":"code","aea3977c":"code","55b73467":"code","1a1ad048":"code","e2adc2b5":"code","e7367832":"code","4f63386c":"code","3ccc5a6e":"code","e9c4ebd9":"code","5ce12bdc":"code","2a1d16ba":"code","5c1fe0d4":"code","f4a2a37b":"code","a9d004d6":"code","d89d16a0":"code","508a898f":"code","07cca4c9":"code","ed5ca2fb":"code","b3c9adb9":"code","215bb063":"code","76773b1b":"code","40091e1c":"markdown","4787c8e4":"markdown","f09f53db":"markdown","ee59bfac":"markdown","638330f3":"markdown","44862661":"markdown","8244924c":"markdown","f5ea7dc6":"markdown","79dd9793":"markdown","1e80773c":"markdown","c3e80a72":"markdown","e89067fe":"markdown","ebdb672b":"markdown"},"source":{"f1998f62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba9371e6":"import os\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime\nfrom glob import glob\n    \nimport logging\nlogger = logging.getLogger('simple_example')\nch = logging.StreamHandler()\nch.setLevel(logging.ERROR)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nlogger.addHandler(ch)\nlogger.info(\"Completed importing all the required packages\")","aea3977c":"os.chdir('\/kaggle\/input\/stroke-prediction-dataset')\nfiles=glob(os.getcwd()+\"\/*.csv\")\nfor file in files:\n    input_data=pd.read_csv(file)","55b73467":"input_data.head()","1a1ad048":"def drop_variable(df,columns):\n    for col in columns:\n        df.drop(columns=col,axis=1,inplace=True)\n        return df","e2adc2b5":"input_data=drop_variable(input_data,[\"id\"])","e7367832":"def get_na_perc(df):\n    print(np.round(df.isna().sum() \/ df.shape[0] * 100.0,2))","4f63386c":"get_na_perc(input_data)","3ccc5a6e":"def impute_with_mean(df,columns):\n    for col in columns:\n        df[col]=df[col].fillna(df[col].mean())\n        return df","e9c4ebd9":"input_data=impute_with_mean(input_data,[\"bmi\"])","5ce12bdc":"get_na_perc(input_data)","2a1d16ba":"def perform_one_hot_encode(df,cols):\n    df=pd.get_dummies(df,columns=cols,prefix_sep=\"_\")\n    return df","5c1fe0d4":"input_data=perform_one_hot_encode(input_data,[\"gender\",\"hypertension\",\"heart_disease\",\"ever_married\",\"work_type\",\"Residence_type\",\"smoking_status\"])","f4a2a37b":"input_data.head()","a9d004d6":"from sklearn.preprocessing import StandardScaler\ndef standardise_numerical_variables(df,columns):\n    for col in columns:\n        x=np.array(df[col]).reshape(-1,1)\n        scaler=StandardScaler()\n        df[col]=scaler.fit_transform(x)\n    return df","d89d16a0":"input_data=standardise_numerical_variables(input_data,[\"age\",\"avg_glucose_level\",\"bmi\"])","508a898f":"input_data[\"stroke\"].value_counts()","07cca4c9":"y=input_data[\"stroke\"]\nX=input_data.drop(columns=[\"stroke\"],axis=1)","ed5ca2fb":"from imblearn.combine import SMOTETomek\ntomek=SMOTETomek()\n\nX_res,y_res=tomek.fit_resample(X,y)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X_res,y_res,test_size=0.25,random_state=0)","b3c9adb9":"# Number of trees in Random Forest\nrf_n_estimators = [int(x) for x in np.linspace(100, 1000, 5)]\n\n# Maximum number of levels in tree\nrf_max_depth = [int(x) for x in np.linspace(5, 55, 11)]\n# Add the default as a possible value\nrf_max_depth.append(None)\n\n# Number of features to consider at every split\nrf_max_features = ['auto', 'sqrt', 'log2']\n\n# Criterion to split on\nrf_criterion = ['gini','entropy']\n\n# Minimum number of samples required to split a node\nrf_min_samples_split = [int(x) for x in np.linspace(2, 10, 9)]\n\n# Minimum decrease in impurity required for split to happen\nrf_min_impurity_decrease = [0.0, 0.05, 0.1]\n\n# Method of selecting samples for training each tree\nrf_bootstrap = [True, False]\n\n# Create the grid\nrf_grid = {'n_estimators': rf_n_estimators,\n               'max_depth': rf_max_depth,\n               'max_features': rf_max_features,\n               'criterion': rf_criterion,\n               'min_samples_split': rf_min_samples_split,\n               'min_impurity_decrease': rf_min_impurity_decrease,\n               'bootstrap': rf_bootstrap}","215bb063":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrf_base = RandomForestClassifier()\n\n# Create the random search Random Forest\nrf_random = RandomizedSearchCV(estimator = rf_base, param_distributions = rf_grid, \n                               n_iter = 10, cv = 10, verbose = 2, random_state = 42, \n                               n_jobs = -1)\n\n# Fit the random search model\nrf_random.fit(X_res, y_res)\n\n# View the best parameters from the random search\nrf_random.best_params_","76773b1b":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators= 775,\n min_samples_split= 6,\n min_impurity_decrease= 0.0,\n max_features= 'auto',\n max_depth= 25,\n criterion= 'gini',\n bootstrap= False)\n\nforest.fit(X_train,y_train)\n\ny_pred=forest.predict(X_test)\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","40091e1c":"### Hyperparameter tuning using GridSearchCV technique","4787c8e4":"### Most of the patients in our analysis have stroke : 0 which signify that they have not suffered from stroke. So we must use SMOTETomek to account for this imbalance in the distribution of our dependant variable","f09f53db":"### There are 11 independant variables and 1 dependant variable in our analysis.\n\n### Out of the independant variables age,avg_gluscose_level and bmi are continuous numerical variables and the remaining variables like gender, hypertension (1 : Yes, 0 : No), heart_disease (1 : Yes, 0 : No), ever_married, work_type, residence_type, smoking_status are discrete categorical variables.\n\n### NOTE : id won't add much significance to our study so we would remove it from our analysis\n\n### The dependent variable stroke is a discrete categorical variable     (1 : Yes, 0 : No)\n","ee59bfac":"### Imputing bmi with mean value","638330f3":"#### Getting the value of the best hyperparameters","44862661":"### Performance Metrics after Hyperparameter tuning","8244924c":"### Only 3.93 % of bmi values are missing from our analysis. We would take 3 approaches to tackle this\n\n#### 1) Imput bmi with its mean value\n#### 2) Remove the rows having missing bmi from our analysis\n#### 3) Remove the bmi column altogether","f5ea7dc6":"### Let us perform one hot encoding for the categorical valriables","79dd9793":"### Now let us normalize the numerical variables so that they are all on the same scale","1e80773c":"### No let us check whether the missing values of bmi are imputed properly or not","c3e80a72":"### Let us check for the distribution of stroke patients in our analysis","e89067fe":"#### Declaring the hyperparameters","ebdb672b":"### First let us import all the required packages for our analysis and create an Import class for calling it."}}