{"cell_type":{"143f53a5":"code","6e209ee4":"code","0e395194":"code","23206a7f":"code","5fba94e4":"code","9c116ea9":"code","6ddfcda6":"code","d5a6bb5f":"code","32be18e3":"code","d33dc0c1":"code","d0209b42":"code","f9101123":"code","73c688cc":"code","7a123ccf":"code","d597795c":"code","e5179243":"code","eb09473b":"code","5a666855":"code","87859412":"code","19e83cae":"code","8500d0e8":"code","8f738777":"code","b14ddcc0":"markdown","b53b55ba":"markdown","158b4847":"markdown","d4bb0f01":"markdown","805ffcc3":"markdown","237c02a3":"markdown","dc785938":"markdown","024cb092":"markdown","4219d801":"markdown","41fd0f54":"markdown","2a698f43":"markdown","38ed9b53":"markdown","c4c14244":"markdown","c563c767":"markdown","f83536a9":"markdown","d0d20127":"markdown","bf631ade":"markdown","9e19704b":"markdown"},"source":{"143f53a5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime \nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\nfrom scipy import stats\nimport time\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle!pip install raceplotly\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6e209ee4":"fig = go.Figure()\n\n\n# Add images\nfig.add_layout_image(\n        dict(\n            source=\"https:\/\/pbs.twimg.com\/media\/DIIhjuUXgAE5pJ_.jpg\",\n            xref=\"x\",\n            yref=\"y\",\n            x=2,\n            y=3,\n            sizex=2,\n            sizey=2,\n            sizing=\"stretch\",\n            opacity=0.5,\n            layer=\"below\")\n)\n\nfig.add_annotation(\n    showarrow = False,\n    x = 2.7,\n    y = 3,\n    text = 'Please hide the \"Table of contents\"',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 16, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\n# Set templates\nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(visible = False)\nfig.update_yaxes(visible = False)\n\nfig.show()","0e395194":"df = pd.read_csv('\/kaggle\/input\/top-video-games-19952021-metacritic\/all_games.csv')\ndf.head()","23206a7f":"df.info()","5fba94e4":"df['release_date'] = pd.to_datetime(df['release_date'])\ndf['year'] = df['release_date'].dt.year\ndf['month'] = df['release_date'].dt.month_name()\ndf['month_year'] = pd.to_datetime(df['month'] + '\/' + df['year'].astype('str'))\ndf.head()","9c116ea9":"hist_data = [df['meta_score']]\ngroup_labels = ['meta_score'] # name of the dataset\n\nfig = ff.create_distplot(hist_data, group_labels, colors = ['#A6ACEC'], bin_size = 1, show_rug = False)\n\nfig.add_shape(type = 'line',\n              x0 = df['meta_score'].mean(), y0 = 0, \n              x1 = df['meta_score'].mean(), y1 = 0.04,\n              line=dict(\n                  color = 'crimson',\n                  width = 2,\n                  dash = 'dot'))\n\n\nfig.add_annotation(    \n    x = df['meta_score'].mean(),\n    y = 0.04,\n    text = 'mean',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.update_layout(title = dict(\n    text ='Distribution of meta score',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 5) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\n\nfig.show()","6ddfcda6":"# calculations\ncount_by_platform = df \\\n    .groupby('platform', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'}) \\\n    .sort_values('count', ascending = False) \\\n    .reset_index(drop = True)\n\nfig = go.Figure(data=[go.Bar(\n            x = count_by_platform['platform'], \n            y = count_by_platform['count'],\n            text = count_by_platform['count'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(title = dict(\n    text ='Number of observations by platform type',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 tickangle = -90,\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","d5a6bb5f":"count_by_year = df \\\n    .groupby('year', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\n\nfig = go.Figure(data=go.Scatter(x = count_by_year['year'], \n                                y = count_by_year['count'],\n                                mode = 'lines+markers',\n                                marker = dict(\n                                    color = 'black',\n                                    size = 10),\n                                line = dict(\n                                    color = '#A6ACEC',\n                                    width = 3)))\nfig.add_shape(type = 'line',\n              x0 = count_by_year['year'].min(), y0 = round(count_by_year['count'].mean()), \n              x1 = count_by_year['year'].max(), y1 = round(count_by_year['count'].mean()),\n              line=dict(\n                  color = 'crimson',\n                  width = 2,\n                  dash = 'dot'))\n\nfig.add_annotation(    \n    x = count_by_year['year'].min(),\n    y = count_by_year['count'].min(),\n    text = 'PlayStation',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2000,\n    y = 354,\n    text = 'PlayStation 2',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2001,\n    y = 541,\n    text = 'Xbox',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2005,\n    y = 856,\n    text = 'Xbox 360',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -30,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2006,\n    y = 886,\n    text = 'PlayStation 3',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2013,\n    y = 760,\n    text = 'PlayStation 4 <br>Xbox One',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2020,\n    y = 1082,\n    text = 'PlayStation 5<br>Xbox Series X',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -50,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.update_layout(\n    title = dict(\n    text ='Number of observations by release year',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\nfig.show()","32be18e3":"count_by_month_year = df \\\n    .groupby('month_year', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\n\nfig = go.Figure(data=go.Scatter(x = count_by_month_year['month_year'], \n                                y = count_by_month_year['count'],\n                                mode = 'lines+markers',\n                                marker = dict(\n                                    color = '#A6ACEC')))\nfig.add_shape(type = 'line',\n              x0 = count_by_month_year['month_year'].min(), y0 = round(count_by_month_year['count'].mean()), \n              x1 = count_by_month_year['month_year'].max(), y1 = round(count_by_month_year['count'].mean()),\n              line=dict(\n                  color = 'crimson',\n                  width = 2,\n                  dash = 'dot'))\n\nfig.add_annotation(    \n    x = datetime.date(year = 2005,month = 11,day=1),\n    y = 158,\n    text = 158,\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = datetime.date(year = 2007,month = 10,day=1),\n    y = 171,\n    text = 171,\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = datetime.date(year = 2003,month = 11,day=1),\n    y = 162,\n    text = 162,\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.update_layout(title = dict(\n    text ='Number of observations by release month_year',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\nfig.show()","d33dc0c1":"df['month_number'] = df['release_date'].dt.month\ncount_by_month = df \\\n    .groupby('month_number', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\n\nfig = go.Figure(data=[go.Bar(\n            x = count_by_month['month_number'], \n            y = count_by_month['count'],\n            text = count_by_month['count'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(title = dict(\n    text ='Number of observations by month',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","d0209b42":"no_tbd = df[df['user_review'] != 'tbd']\nno_tbd['user_review'] = no_tbd['user_review'].astype('float64')\n\nhist_data = [no_tbd['user_review']]\ngroup_labels = ['user_review'] # name of the dataset\n\nfig = ff.create_distplot(hist_data, group_labels, colors = ['#A6ACEC'], bin_size = 0.1, show_rug = False)\n\nfig.add_shape(type = 'line',\n              x0 = no_tbd['user_review'].mean(), y0 = 0, \n              x1 = no_tbd['user_review'].mean(), y1 = 0.4,\n              line=dict(\n                  color = 'crimson',\n                  width = 2,\n                  dash = 'dot'))\n\n\nfig.add_annotation(    \n    x = no_tbd['user_review'].mean(),\n    y = 0.4,\n    text = 'mean',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.update_layout(title = dict(\n    text ='Distribution of user review',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\n\nfig.show()","f9101123":"mean_by_platform = df \\\n    .groupby('platform', as_index = False) \\\n    .agg({'meta_score' : 'mean'}) \\\n    .rename(columns = {'meta_score' : 'avg_meta_score'}) \\\n    .sort_values('avg_meta_score', ascending = False)\nmean_by_platform['avg_meta_score'] = round(mean_by_platform['avg_meta_score'], 2)\n\nfig = go.Figure(data=[go.Bar(\n            x = mean_by_platform['platform'], \n            y = mean_by_platform['avg_meta_score'],\n            text = mean_by_platform['avg_meta_score'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(\n    title = dict(\n        y = 0.93,\n        text ='Average meta score by platform type',\n        font = dict(\n            color = 'black',\n            size = 26,\n            family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 tickangle = -90,\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","73c688cc":"mean_by_year = df \\\n    .groupby('year', as_index = False) \\\n    .agg({'meta_score' : 'mean'}) \\\n    .rename(columns = {'meta_score' : 'mean'})\n\nfig = go.Figure(data=go.Scatter(x = mean_by_year['year'], \n                                y = mean_by_year['mean'],\n                                mode = 'lines+markers',\n                                marker = dict(\n                                    color = 'black',\n                                    size = 10),\n                                line = dict(\n                                    color = '#A6ACEC',\n                                    width = 3)))\nfig.add_shape(type = 'line',\n              x0 = mean_by_year['year'].min(), y0 = round(mean_by_year['mean'].mean()), \n              x1 = mean_by_year['year'].max(), y1 = round(mean_by_year['mean'].mean()),\n              line=dict(\n                  color = 'crimson',\n                  width = 2,\n                  dash = 'dot'))\n\nfig.add_vrect(\n    x0 = 1999, \n    x1= 2009,\n    y1 = 0.92,\n    fillcolor = 'crimson', \n    opacity = 0.1,\n    layer = 'below', \n    line_width=0,\n)\n\nfig.add_annotation(\n    showarrow = False,\n    x = 2004,\n    y = 96,\n    text = \nf''' The period of growth in the number of games per year''',\n    font = dict(\n        size = 13, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor = 'black',\n    align = 'left',\n    borderwidth = 0,\n    borderpad = 1,\n    bgcolor = 'white',\n    opacity = 0.8\n  )\n\nfig.update_layout(\n    title = dict(\n    text = 'Average meta score by release year',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 rangemode = 'tozero',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\nfig.show()","7a123ccf":"fig = px.scatter(df, x = no_tbd['user_review'], y = no_tbd['meta_score'], trendline = 'ols')\nfig.data[1].marker.color = '#A6ACEC'\nfig.data[1].line.color = 'crimson'\nfig.data[1].line.width = 3\nfig.update_layout(\n    title = dict(\n    text = 'The ratio of user review and meta score',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(\n                 title = 'user review',\n                 showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \nfig.update_yaxes(\n                 title = 'meta score',\n                 showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 rangemode = 'tozero',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'))\nfig.show()","d597795c":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = [1995, 2025], \n                                y = [1, 1],\n                                mode = 'lines',\n                                marker = dict(\n                                    color = '#A6ACEC')))\nfig.add_trace(go.Scatter(x = [2000, 2005, 2013, 2020], \n                                y = [1, 1, 1, 1],\n                                mode = 'markers',\n                                marker = dict(\n                                    color = 'crimson',\n                                    size = 10)))\n\nfig.add_annotation(    \n    x = 1997.5,\n    y = 1,\n    text = 'era_1',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2002.5,\n    y = 1,\n    text = 'era_2',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2008.5,\n    y = 1,\n    text = 'era_3',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.add_annotation(    \n    x = 2016.5,\n    y = 1,\n    text = 'era_4',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\nfig.add_annotation(    \n    x = 2022.5,\n    y = 1,\n    text = 'era_5',\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -20,\n    font = dict(\n        size = 12, \n        color = 'black', \n        family = 'Arial'),\n    bordercolor='black',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = '#badbda'\n  )\n\nfig.update_layout(title = dict(\n    text ='The eras of video games',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\nfig.update_xaxes(showgrid = True, \n                 gridwidth = 1, \n                 gridcolor = '#DCDCDC', \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 dtick = 1,\n                 tickangle = -60,\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial')) \nfig.update_yaxes(showgrid = True, \n                 gridwidth = 1,\n                 gridcolor = '#DCDCDC',\n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'white',\n                     family = 'Arial'))\nfig.show()","e5179243":"def era(data):\n    if 1995 <= data <= 1999:\n        x = 'era_1'\n    elif 2000 <= data <= 2004:\n        x = 'era_2'\n    elif 2005 <= data <= 2012:\n        x = 'era_3'\n    elif 2013 <= data <= 2019:\n        x = 'era_4'\n    else:\n        x = 'era_5'\n    return x\ndf['era'] = df['year'].apply(era)\n\nera_count = df \\\n    .groupby('era', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\n\nfig = go.Figure(data=[go.Bar(\n            x = era_count['era'], \n            y = era_count['count'],\n            text = era_count['count'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(title = dict(\n    text ='Number of observations by era',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","eb09473b":"era_avg = df \\\n    .groupby('era', as_index = False) \\\n    .agg({'meta_score' : 'mean'}) \\\n    .rename(columns = {'meta_score' : 'avg_meta_score'})\nera_avg['avg_meta_score'] = round(era_avg['avg_meta_score'], 2)\n\nfig = go.Figure(data=[go.Bar(\n            x = era_avg['era'], \n            y = era_avg['avg_meta_score'],\n            text = era_avg['avg_meta_score'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(title = dict(\n    text ='Average meta_score by era',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","5a666855":"quantiles = df[['meta_score']].quantile(q = [0.25, 0.5, 0.75])\nquantiles","87859412":"def Class(value, parameter_name,quantiles_table):\n    if value <= quantiles_table[parameter_name][0.25]:\n        return '4_category'\n    elif value <= quantiles_table[parameter_name][0.50]:\n        return '3_category'\n    elif value <= quantiles_table[parameter_name][0.75]: \n        return '2_category'\n    else:\n        return '1_category'\n    \ndf['category'] = df['meta_score'].apply(Class, args=('meta_score',quantiles))\ndf.head()","19e83cae":"category_count = df \\\n    .groupby('category', as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\n\nfig = go.Figure(data=[go.Bar(\n            x = category_count['category'], \n            y = category_count['count'],\n            text = category_count['count'],\n            marker_color = '#A6ACEC',\n            textposition = 'outside',\n            textfont_color = 'black',\n            textfont_size = 12,\n            textfont_family = 'Arial'\n        )])\n\nfig.update_layout(title = dict(\n    text ='Number of observations by category',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = False)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\n\nfig.show()","8500d0e8":"era_category_count = df \\\n    .groupby(['era', 'category'], as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .rename(columns = {'name' : 'count'})\npivot = era_category_count.pivot(index = 'era', columns = 'category', values = 'count').reset_index()\n\ntrace0 = go.Bar(\n    x = pivot['era'],\n    y = pivot['1_category'],\n    name = '1_category',\n    text = pivot['1_category'],\n    textposition ='outside'\n)\n\ntrace1 = go.Bar(\n    x = pivot['era'],\n    y = pivot['2_category'],\n    name = '2_category',\n    text = pivot['2_category'],\n    textposition ='outside' \n)\n\ntrace2 = go.Bar(\n    x = pivot['era'],\n    y = pivot['3_category'],\n    name = '3_category',\n    text = pivot['3_category'],\n    textposition ='outside' \n)\n\ntrace3 = go.Bar(\n    x = pivot['era'],\n    y = pivot['4_category'],\n    name = '4_category',\n    text = pivot['4_category'],\n    textposition ='outside' \n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nfig = go.Figure(data=data)\nfig.update_layout(title = dict(\n    text ='Number of observations by category in eras',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = True)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\niplot(fig, show_link=False)","8f738777":"list_ = []\nfor i in range(0, 5, 1):\n    x_1 = round(pivot['1_category'][i] \/ (pivot['1_category'][i] + pivot['2_category'][i] + pivot['3_category'][i] + pivot['4_category'][i]) * 100, 2)\n    x_2 = round(pivot['2_category'][i] \/ (pivot['1_category'][i] + pivot['2_category'][i] + pivot['3_category'][i] + pivot['4_category'][i]) * 100, 2)\n    x_3 = round(pivot['3_category'][i] \/ (pivot['1_category'][i] + pivot['2_category'][i] + pivot['3_category'][i] + pivot['4_category'][i]) * 100, 2)\n    x_4 = round(pivot['4_category'][i] \/ (pivot['1_category'][i] + pivot['2_category'][i] + pivot['3_category'][i] + pivot['4_category'][i]) * 100, 2)\n    list_.append([x_1, x_2, x_3, x_4])\n\ntrace0 = go.Bar(\n    x = pivot['era'],\n    y = list_[0],\n    name = '1_category',\n    text = list_[0],\n    textposition ='outside'\n)\n\ntrace1 = go.Bar(\n    x = pivot['era'],\n    y = list_[1],\n    name = '2_category',\n    text = list_[1],\n    textposition ='outside' \n)\n\ntrace2 = go.Bar(\n    x = pivot['era'],\n    y = list_[2],\n    name = '3_category',\n    text = list_[2],\n    textposition ='outside' \n)\n\ntrace3 = go.Bar(\n    x = pivot['era'],\n    y = list_[3],\n    name = '4_category',\n    text = list_[3],\n    textposition ='outside' \n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nfig = go.Figure(data=data)\nfig.update_layout(title = dict(\n    text ='Percentage of observations by category',\n    font = dict(\n        color = 'black',\n        size = 26,\n        family = 'Arial')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    showlegend = True)\n\nfig.update_xaxes(showgrid = False, \n                 showline = True,\n                 color = 'black',\n                 linecolor = 'black',\n                 tickfont = dict(\n                     color = 'black',\n                     family = 'Arial'),\n                 dtick = 1) \n\nfig.update_yaxes(visible = False)\niplot(fig, show_link=False)","b14ddcc0":"**Highest average meta_score - era_1, 2nd place - era_5, 3rd place - era_4.**\n\n**I think that average meta_score may be the answer to the task. But I want to consider this issue from other angles.**\n\n**I suggest to divide meta_score by categories. And see the number of categories by era.**","b53b55ba":"**Top 5 platform by number of observations (percentage of total):**\n* PC - 25.87%\n* PlayStation 4 - 10.94%\n* Xbox 360 - 8.74%\n* PlayStation 2 - 7.52%\n* Switch - 7.44%","158b4847":"**In the next chart, I showed the number of observations by year, and the release dates of the consoles of two competitors - PlayStation and Xbox.**","d4bb0f01":"# About data set:\n**This dataset contains a list of video games dating from 1995 to 2021**\n**Columns:**\n* name\n* platform\n* release_date\n* summary\n* meta_score\n* user_review","805ffcc3":"* period - 1995-2021;\n* at the beginning of the period - 1 game, at the end of the period - 745;\n* max number of games were released in 2018 - 1146;\n* the average number of games released per year - 696.","237c02a3":"**Top 3 periods:**\n1. Oct 2007 - 171\n2. Nov 2003 - 162\n3. Nov 2005 - 158\n\n**The average number of observations by beriod - 62.**","dc785938":"* in the period 1995 - 1999, the mean_score average was the highest, but there were too few games during these periods\n* we observe a decrease in the average meta score during the growth of the number of games\n* small growth after 2011","024cb092":"**Top 3 months by number of games (percentage of total):**\n1. Oct - 13.10%\n2. Nov - 12.67%\n3. Sep - 11.05%\n\n**There is a seasonal dependency.**","4219d801":"# Analyze meta score","41fd0f54":"* only 13 of 22 platforms have average meta score higher than total average\n* best platform - Nintendo 64, which was released in 1996\n* 2nd and 3rd places - newest platforms","2a698f43":"**Currently, most games have been released in era_3.**","38ed9b53":"**The graphs showed us that era_1 has the most games from category 1.**","c4c14244":"* number of observations - 18800;\n* min meta score - 20;\n* max meta score - 99;\n* average meta score - 71.","c563c767":"# Task","f83536a9":"**Task's description:** \"Find out which era had the best video games \ud83e\udd13.\"\n\n**Earlier on the chart, I showed the release dates of the PlayStation and Xbox platform. I suggest using the time intervals between them as eras. I will add column with era.**","d0d20127":"**We observe medium posotive correlation. The value of the Spearman correlation coefficient - 0.51, p-value < 0.01.**","bf631ade":"* number of observations - 17435 (observations with tbd are excluded)\n* min user review - 0.2\n* max user review - 9.7\n* average user review - 6.99","9e19704b":"# EDA"}}