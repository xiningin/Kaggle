{"cell_type":{"e6e53ded":"code","cde5c776":"code","4dcc9e28":"code","4fb319de":"code","27763bd8":"code","e728abaa":"code","6716d393":"code","7d4e3abf":"code","e8bac566":"code","96d3247f":"code","fbc3c20a":"markdown","5d3de5c4":"markdown","6117205d":"markdown","1cee3aa6":"markdown","6fbeed48":"markdown"},"source":{"e6e53ded":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cde5c776":"df=pd.read_csv('\/kaggle\/input\/zoo-animal-classification\/zoo.csv')\ndf.set_index('animal_name',inplace=True)\ndf.head()\ndf['class_type'].replace({1:'Mammal',2:'Bird',3:'Reptile',4:'Fish',5:'Amphibian',6:'Bug',7:'Invertebrate'},inplace=True)","4dcc9e28":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(df.drop('class_type',axis=1),df['class_type'],random_state=0,test_size=0.3)","4fb319de":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score","27763bd8":"for x in range(2,8):\n    for y in [100,50,10]:\n        forest=RandomForestClassifier(max_depth=x,n_estimators=y)\n        forest.fit(X_train,y_train)\n        y_pred=forest.predict(X_test)\n        print(\"depth= \",x,' estimators= ',y,' accuracy= ',accuracy_score(y_test,y_pred))","e728abaa":"for x in range(1,10):\n    neg=KNeighborsClassifier(n_neighbors=x)\n    neg.fit(X_train,y_train)\n    y_pred=neg.predict(X_test)\n    print('neighbors= ',x,' accuracy= ',accuracy_score(y_test,y_pred))","6716d393":"for x in np.logspace(3,6):\n    for y in np.logspace(4,6):\n        clf=SVC(C=x,gamma=y,kernel='rbf')\n        clf.fit(X_train,y_train)\n        y_pred=clf.predict(X_test)\n        print(\"C= \",x,' gamma= ',y,' accuracy= ',accuracy_score(y_test,y_pred))\n        ","7d4e3abf":"forest=RandomForestClassifier(max_depth=4)\nforest.fit(X_train,y_train)\ny_pred=forest.predict(X_test)\nfinal_predict_df=pd.DataFrame({'Name of animal':X_test.index,'Predicted Type':y_pred,'Actual Type':y_test})","e8bac566":"final_predict_df","96d3247f":"df.loc['seasnake']","fbc3c20a":"**Using 30% of the data available as the test data**","5d3de5c4":"**Varying the depth and the number of estimators to find which combination results in the highest accuracy.**","6117205d":"We can see that the model gets confused in case flea where it predicts it to be a Invertebrate while it is a bug and also predicts that a Seasnake is a fish and not a reptile.In case of the Seasnake almost all it's features are similar to that of a fish except that it does not have fins and is venomous.With the availability of more data this missclassification too can be resolved","1cee3aa6":"**Using the RandomForestClassifier as the final model**","6fbeed48":"***The accuracy does not change with the change in parameters and remains constant***"}}