{"cell_type":{"0811bad6":"code","e964e034":"code","27a27083":"code","61f4ac53":"code","1c1a191f":"code","39421915":"code","24656205":"code","920be088":"code","c618671c":"code","9ffb57e4":"code","53a4b739":"code","56a80ee5":"code","dd3ed1fc":"code","38ba5417":"code","1f2da6d2":"code","a32bdde8":"code","e192f848":"code","78008af0":"code","9b03c6c6":"code","2dc8185b":"code","05f2cdb0":"code","1a0d4517":"code","019f5cdb":"code","8b77a06b":"code","27ed02a5":"code","e496ec76":"code","432cb041":"code","693fbf7d":"code","6e878ab4":"code","82dda0e8":"markdown"},"source":{"0811bad6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e964e034":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","27a27083":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()","61f4ac53":"gender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ngender_submission.head()","1c1a191f":"train","39421915":"women = train.loc[train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","24656205":"men = train.loc[train.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","920be088":"from sklearn.ensemble import RandomForestClassifier\n\ny = train[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train[features])\nX_test = pd.get_dummies(test[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('hansp.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c618671c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import svm\nfrom sklearn.utils import shuffle\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split","9ffb57e4":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","53a4b739":"plt.subplots(figsize=(10,10))\nsns.countplot('Sex',hue='Survived',data=train)\nplt.show()","56a80ee5":"sns.distplot(train['Age'].values, bins=range(0,16), kde=False)\nsns.distplot(train['Age'].values, bins=range(16, 32), kde=False)\nsns.distplot(train['Age'].values, bins=range(32, 48), kde=False)\nsns.distplot(train['Age'].values, bins=range(48,64), kde=False)\nsns.distplot(train['Age'].values, bins=range(64,82), kde=False, axlabel='Age')","dd3ed1fc":"train['Age_Category'] = pd.cut(train['Age'],bins=[0,16,32,48,64,81])\nsns.countplot('Age_Category',hue='Survived',data=train)","38ba5417":"train.loc[ train['Age'] <= 16, 'Age'] = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age'] = 4\n    \ntrain.head()","1f2da6d2":"train['Family'] = train['SibSp'] + train['Parch'] + 1\ntrain['Alone'] = 0\ntrain.loc[train['Family'] == 1, 'Alone'] = 1","a32bdde8":"train.head()","e192f848":"train['Survived'].replace(\"Yes\", 1,inplace=True)\ntrain['Survived'].replace(\"No\", 0, inplace=True)\nsurvived = train[train['Survived'] == 1]\nnot_survived = train[train['Survived'] == 0]","78008af0":"sns.barplot(x='Pclass', y='Survived', data=train);","9b03c6c6":"train['Sex'].replace(\"male\", 0, inplace=True)\ntrain['Sex'].replace(\"female\", 1, inplace=True)","2dc8185b":"train.head()","05f2cdb0":"train['Fare'] = train['Fare'].fillna(train['Fare'].median())\ntrain['FareBand'] = pd.qcut(train['Fare'], 4)\nprint (train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","1a0d4517":"train.loc[ train['Fare'] <= 7.91, 'Fare'] = 0\ntrain.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1\ntrain.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2\ntrain.loc[ train['Fare'] > 31, 'Fare'] = 3\ntrain['Fare'] = train['Fare'].astype(int)\ntrain.head()","019f5cdb":"train['Embarked'] = train['Embarked'].fillna('S')\ntrain['Embarked'] = train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntrain.head()","8b77a06b":"train = train.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'PassengerId', 'Age_Category', 'FareBand'], axis=1)","27ed02a5":"train['Age'] = train['Age'].fillna(2)\ntrain['Age'] = train['Age'].astype(int)\ntrain.head()","e496ec76":"training, testing = train_test_split(train, test_size=0.2, random_state=0)\n","432cb041":"cols = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Family', 'Alone']\ntcols = np.append(['Survived'],cols)\ndf = training.loc[:,tcols].dropna()\n\nX = df.loc[:,cols]\ny = np.ravel(df.loc[:,['Survived']])\n\ndf_test = testing.loc[:,tcols].dropna()\nX_test = df_test.loc[:,cols]\ny_test = np.ravel(df_test.loc[:,['Survived']])","693fbf7d":"from sklearn.ensemble import RandomForestClassifier\nRFC = RandomForestClassifier()\nRFC.fit(X, y)\ny_red_random_forest = RFC.predict(X_test)\nrandom_forest = round(clf.score(X, y)*100, 2)\nrandom_forest","6e878ab4":"\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","82dda0e8":"---------------------------------------------------------------------"}}