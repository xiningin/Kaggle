{"cell_type":{"a092e4e5":"code","31795d9e":"code","d5b045ec":"code","50eff09f":"code","72f88c7f":"code","4bb559fe":"code","3c339721":"code","2539462b":"code","687b9c28":"code","db678eed":"code","279369b1":"code","7e7f8494":"code","cec7f1de":"code","c3961729":"code","23d06f58":"code","f71f61bb":"code","9892265d":"code","e652c061":"code","72f614bc":"code","35b7df50":"code","2ddd9128":"code","b2b28950":"code","ed5fadb3":"code","e55b6c7c":"code","f2f7feba":"code","00f25817":"code","e75f4ce1":"code","8a2dee90":"code","23cae14d":"code","bf85cd14":"code","6c5e0187":"code","404d425b":"code","4569906c":"code","900390a9":"code","24c04e51":"code","8be58e98":"code","3674b821":"code","301d6ee4":"code","aa490f0c":"code","fa5b076d":"code","44692311":"code","cf9e07e4":"code","fe95692f":"code","1a19c093":"code","901ea644":"code","712f1480":"code","ea2c5ab1":"code","26377597":"code","23591ce2":"code","ba820789":"code","49095b29":"code","e22a0d6c":"code","2b7bd9fd":"markdown","f0bebc14":"markdown","b283d5c7":"markdown","3a7fbce2":"markdown","24305420":"markdown","e1c9367a":"markdown","ae11ef00":"markdown","765fdb67":"markdown","52b92b16":"markdown","538d6bcc":"markdown","80325c49":"markdown"},"source":{"a092e4e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31795d9e":"df = pd.read_csv(\"\/kaggle\/input\/cowin-data-for-chennai-21-aug-to-1-sept-21\/dataset_19BDS0023.CSV\", delimiter=',', encoding='utf8')\ndf.head(3)","d5b045ec":"df.isnull().sum()","50eff09f":"corr=df[df.columns.sort_values()].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nfig = go.Figure(data=go.Heatmap(z=corr.mask(mask),\n                                x=corr.columns.values,\n                                y=corr.columns.values,\n                                xgap=1, ygap=1,\n                                colorscale=\"Rainbow\",\n                                colorbar_thickness=20,\n                                colorbar_ticklen=3,\n                                zmid=0),\n                layout = go.Layout(title_text='Correlation Matrix', template='plotly_dark',\n                height=900,\n                xaxis_showgrid=False,\n                yaxis_showgrid=False,\n                yaxis_autorange='reversed'))\nfig.show()","72f88c7f":"fig_px = px.scatter_mapbox(df, lat=\"lat\", lon=\"long\",\n                           hover_name=\"block_name\",\n                           zoom=11, height=300)\nfig_px.update_layout(mapbox_style=\"open-street-map\",\n                     margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig_px.show()","4bb559fe":"teynampet = df[(df['block_name']=='Teynampet')].reset_index(drop=True)\nteynampet.head(2)","3c339721":"#Code by Mashrimp https:\/\/www.kaggle.com\/katomash\/a-car-is-moving-or-not-accuracy-94\/notebook\n\nfig = px.scatter_mapbox(teynampet,\n                    # Here, plotly gets, (x,y) coordinates\n                    lat=\"lat\",\n                    lon=\"long\",\n                    text='block_name',\n\n                    #Here, plotly detects color of series\n                    color=\"block_name\",\n                    labels=\"block_name\",\n\n                    zoom=14.5,\n                    center={\"lat\":13.044403, \"lon\":80.251648},\n                    height=600,\n                    width=800)\nfig.update_layout(mapbox_style='stamen-terrain')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"Lasa City Location\")\nfig.show()","2539462b":"#Code by Lucas Abrah\u00e3o https:\/\/www.kaggle.com\/lucasabrahao\/trabalho-manufatura-an-lise-de-dados-no-brasil\n\ndf[\"allow_all_age\"].value_counts().plot.bar(color=['green', 'orange'], title='Do the vaccination allow all ages?');","687b9c28":"ax = df['fee'].value_counts().plot.barh(figsize=(14, 6), color='orange')\nax.set_title('Fee',color='green', size=18)\nax.set_ylabel('Fee', size=14)\nax.set_xlabel('Count', size=14);","db678eed":"#Minimum age limit for what?\n\nax = df['min_age_limit'].value_counts().plot.barh(figsize=(10, 6), color='green')\nax.set_title('Minimum Age Limit', size=18, color='orange')\nax.set_ylabel('min_age_limit', size=10)\nax.set_xlabel('Count', size=10);","279369b1":"ax = df['vaccine'].value_counts().plot.barh(figsize=(14, 6), color='orange')\nax.set_title('Vaccines',color='green', size=18)\nax.set_ylabel('Vaccines', size=14)\nax.set_xlabel('Count', size=14);","7e7f8494":"plt.figure(figsize=(8, 6))\nax=sns.countplot(x=\"vaccine\", data=df,palette=\"Greens\",edgecolor=\"black\", order = df['vaccine'].value_counts().index)\nplt.xticks(rotation=90)\nplt.title('Vaccines applied')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va='bottom',\n                    color= 'black')\nplt.show()","cec7f1de":"px.bar(df, x = 'date', y = 'vaccine', color = 'block_name',orientation='h' , title='Vaccines applied',  height = 500 )","c3961729":"df_grp = df.groupby([\"date\",\"block_name\"])[[\"available_capacity\",\"available_capacity_dose1\",\"available_capacity_dose2\"]].sum().reset_index()\ndf_grp.head()","23d06f58":"plt.figure(figsize=(15, 5))\nplt.title('Block Names')\ndf_grp.block_name.value_counts().plot.bar(color=['green', 'orange']);","f71f61bb":"#Code by Vansh Jatana  https:\/\/www.kaggle.com\/vanshjatana\/australia-under-covid-19?scriptVersionId=32940123\n\nimport folium\nmap = folium.Map(location=[13.044403,80.251648], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, long,block_name,available_capacity,available_capacity_dose1,available_capacity_dose2 in zip(df['lat'], df['long'],df['block_name'],df['available_capacity'],df['available_capacity_dose1'],df['available_capacity_dose2']):\n    folium.CircleMarker([lat, long],\n                        radius=5,\n                        color='red',\n                      popup =(\n                    'block_name: ' + str(block_name) + '<br>'\n                    'available_capacity: ' + str(available_capacity) + '<br>'\n                      'available_capacity_dose1: ' + str(available_capacity_dose1) + '<br>'\n                      'available_capacity_dose2: ' + str(available_capacity_dose2) + '<br>'),\n\n                        fill_color='green',\n                        fill_opacity=0.7 ).add_to(map)\nmap","9892265d":"#Code by Vansh Jatana  https:\/\/www.kaggle.com\/vanshjatana\/australia-under-covid-19?scriptVersionId=32940123\n\ndf = df.dropna()\ndf_map = df.tail(80)\ndf_map1  = df_map.groupby(['date', 'block_name','lat','long'])['available_capacity', 'available_capacity_dose1', 'available_capacity_dose2'].max()\n\n\ndf_map1 = df_map1.reset_index()\ndf_map1.head()\ndf_map1['size'] = df_map1['available_capacity']*90000000\ndf_map1\nfig = px.scatter_mapbox(df_map1, lat=\"lat\", lon=\"long\",\n                     color=\"available_capacity\", size='size',hover_data=['available_capacity','available_capacity_dose1','available_capacity_dose2'],\n                     color_continuous_scale='burgyl',\n                     animation_frame=\"date\", \n                     title='Vaccines Available Capacity')\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=3, mapbox_center = {\"lat\": 13.044403, \"lon\":80.251648})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","e652c061":"df_grp_plot = df_grp.tail(80)","72f614bc":"#Code by Vansh Jatana  https:\/\/www.kaggle.com\/vanshjatana\/australia-under-covid-19?scriptVersionId=32940123\n\nfig=px.bar(df,x='block_name', y=\"available_capacity\", animation_frame=\"date\", \n           animation_group=\"block_name\", color=\"block_name\", hover_name=\"block_name\")\nfig.update_yaxes(range=[0, 1500])\nfig.update_layout(title='Confirmed vs ID')","35b7df50":"df_grp_r = df_grp.groupby(\"block_name\")[[\"available_capacity\",\"available_capacity_dose1\",\"available_capacity_dose2\"]].sum().reset_index()","2ddd9128":"df_grp_r.head()","b2b28950":"df_grp_rl20 = df_grp_r.tail(20)","ed5fadb3":"fig = px.bar(df_grp_rl20[['block_name', 'available_capacity_dose1']].sort_values('available_capacity_dose1', ascending=False), \n             y=\"available_capacity_dose1\", x=\"block_name\", color='block_name', \n             log_y=True, template='ggplot2', title='Available Capacity dose1 vs Block Name')\nfig.show()","e55b6c7c":"fig = px.treemap(df_grp_rl20, path=['block_name'], values='available_capacity_dose1',\n                  color='available_capacity_dose1', hover_data=['block_name'],\n                  color_continuous_scale='Greens')\nfig.show()","f2f7feba":"!pip install bubbly","00f25817":"! pip install chart_studio","e75f4ce1":"import plotly.graph_objects as go #scrollzoom required that \n\nfrom bubbly.bubbly import bubbleplot \nfrom plotly.offline import iplot\nimport chart_studio.plotly as py\n\nfigure = bubbleplot(dataset=df_grp_rl20, x_column='available_capacity_dose1', y_column='available_capacity_dose2', \n    bubble_column='block_name',size_column='available_capacity_dose1', color_column='block_name', \n    x_title=\"Available Capacity Dose 1\", y_title=\"Available Capacity Dose 2\", title='Vaccines Available Capacity Doses',\n     scale_bubble=3, height=650)\n\niplot(figure, config={'scrollzoom': True})","8a2dee90":"df_grp_rl20 = df_grp_rl20.sort_values(by=['available_capacity_dose1'],ascending = False)","23cae14d":"plt.figure(figsize=(40,15))\nplt.bar(df_grp_rl20.block_name, df_grp_rl20.available_capacity,label=\"Available Capacity\")\nplt.bar(df_grp_rl20.block_name, df_grp_rl20.available_capacity_dose1,label=\"Available Capacity Dose 1\")\nplt.bar(df_grp_rl20.block_name, df_grp_rl20.available_capacity_dose2,label=\"Available Capacity Dose 2\")\nplt.xlabel('date')\nplt.ylabel(\"Count\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=15)\n\nplt.legend(frameon=True, fontsize=12)\nplt.title('Available Capacity vs Available Capacity Dose1 vs Available Capacity Dose2',fontsize=30)\nplt.show()\n\nf, ax = plt.subplots(figsize=(40,15))\nax=sns.scatterplot(x=\"block_name\", y=\"available_capacity\", data=df_grp_rl20,\n             color=\"black\",label = \"Available Capacity\")\nax=sns.scatterplot(x=\"block_name\", y=\"available_capacity_dose1\", data=df_grp_rl20,\n             color=\"red\",label = \"Available Capacity Dose1\")\nax=sns.scatterplot(x=\"block_name\", y=\"available_capacity_dose2\", data=df_grp_rl20,\n             color=\"blue\",label = \"Available Capacity Dose2\")\nplt.plot(df_grp_rl20.block_name,df_grp_rl20.available_capacity,zorder=1,color=\"green\")\nplt.plot(df_grp_rl20.block_name,df_grp_rl20.available_capacity_dose1,zorder=1,color=\"red\")\nplt.plot(df_grp_rl20.block_name,df_grp_rl20.available_capacity_dose2,zorder=1,color=\"orange\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=15)\nplt.legend(frameon=True, fontsize=12);","bf85cd14":"import seaborn as sns\nf, ax = plt.subplots(figsize=(15,2))\nh=pd.pivot_table(df_grp_r,columns='block_name',values=[\"available_capacity\",\"available_capacity_dose1\",\"available_capacity_dose2\"])\nsns.heatmap(h,cmap=['orange','green','red','lightblue'],linewidths=0.5);","6c5e0187":"df_grp_d = df_grp.groupby(\"date\")[[\"available_capacity\",\"available_capacity_dose1\",\"available_capacity_dose2\"]].sum().reset_index()","404d425b":"df_grp_d.head()","4569906c":"Total_available_capacity = df_grp_d['available_capacity'].sum()\nTotal_available_capacity_dose1 = df_grp_d['available_capacity_dose1'].sum()\nTotal_available_capacity_dose2 = df_grp_d['available_capacity_dose2'].sum()\ndata = [['available_capacity', Total_available_capacity], ['available_capacity_dose1', Total_available_capacity_dose1], ['available_capacity_dose2', Total_available_capacity_dose2]] \ndf = pd.DataFrame(data, columns = ['block_name', 'count']) \nfig = px.pie(df,\n             values=\"count\",\n             names=\"block_name\",\n             title=\"Vaccines Available Capacity Doses\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","900390a9":"df_grp_d['available_capacity_new'] = df_grp_d['available_capacity']-df_grp_d['available_capacity'].shift(1)\ndf_grp_d['available_capacity_dose1_new'] = df_grp_d['available_capacity_dose1']-df_grp_d['available_capacity_dose1'].shift(1)\ndf_grp_d['available_capacity_dose2_new'] = df_grp_d['available_capacity_dose2']-df_grp_d['available_capacity_dose2'].shift(1)","24c04e51":"df_grp_d.head()","8be58e98":"new = df_grp_d\nnew = new.tail(14)","3674b821":"plt.figure(figsize=(23,10))\nplt.bar(new.date, new.available_capacity_new,label=\"Available Capacity\", color='orange')\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Vaccines Available Capacity',fontsize = 35)\nplt.show()\n\n\nplt.figure(figsize=(23,10))\nplt.bar(new.date, new.available_capacity_dose1_new,label=\"Available Capacity Dose 1\", color='green')\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Vaccines Available Capacity Dose1',fontsize = 35)\nplt.show()\n\nplt.figure(figsize=(23,10))\nplt.bar(new.date, new.available_capacity_dose2_new,label=\"Available Capacity Dose 2\", color='purple')\nplt.xlabel('Date')\nplt.ylabel(\"Count\")\nplt.legend(frameon=True, fontsize=12)\nplt.title('Vaccines Available Capacity Dose2',fontsize = 35)\nplt.show()","301d6ee4":"f, ax = plt.subplots(figsize=(23,10))\nax=sns.scatterplot(x=\"date\", y=\"available_capacity_new\", data=new,\n             color=\"black\",label = \"Available Capacity\")\nax=sns.scatterplot(x=\"date\", y=\"available_capacity_dose1_new\", data=new,\n             color=\"red\",label = \"Available Capacity Dose1\")\nax=sns.scatterplot(x=\"date\", y=\"available_capacity_dose2_new\", data=new,\n             color=\"blue\",label = \"Available Capacity Dose2\")\nplt.plot(new.date,new.available_capacity_new,zorder=1,color=\"green\")\nplt.plot(new.date,new.available_capacity_dose1_new,zorder=1,color=\"orange\")\nplt.plot(new.date,new.available_capacity_dose2_new,zorder=1,color=\"blue\");","aa490f0c":"import matplotlib.dates as mdates\nimport datetime\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator","fa5b076d":"pred_cap = df_grp_d.loc[:,[\"date\",\"available_capacity\"]]","44692311":"pr_data = pred_cap.tail(10)\npr_data.columns = ['ds','y']\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\nforecast","cf9e07e4":"cap = forecast.loc[:,['ds','trend']]\ncap = cap[cap['trend']>0]\ncap.columns = ['date','available_capacity']\ncap.head(10)","fe95692f":"import plotly.offline as py\nfig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast,xlabel='date',ylabel='Available Capacity Count')","1a19c093":"cap_cs = pred_cap.cumsum()\ncap_cs['date1'] = pred_cap['date']\ncap_cs = cap_cs.drop('date',axis=1)\narima_data = cap_cs\narima_data.columns = ['count','available_date']\narima_data = arima_data.head(63)\narima_data","901ea644":"model = ARIMA(arima_data['count'].values, order=(3, 1, 0)) #Tried 0,1,3 changed to 3,1,0  CHUTE Total!\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nfit_model.summary()","712f1480":"forcast = fit_model.forecast(steps=7)\npred_y = forcast[0].tolist()\npred = pd.DataFrame(pred_y)\npred['pred']=  pred - pred.shift(1) \npred","ea2c5ab1":"dataset_c = pd.DataFrame(pred_cap['available_capacity'])","26377597":"data = np.array(dataset_c).reshape(-1, 1)\ntrain_data = dataset_c[:len(dataset_c)-8]\ntest_data = dataset_c[len(dataset_c)-8:]","23591ce2":"scaler = MinMaxScaler()\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)\nn_input =3   #It was 5 original. I changed to 3 to avoid errors.\nn_features =1\n                             \ngenerator = TimeseriesGenerator(scaled_train_data,scaled_train_data, length=n_input, batch_size=1)\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(units = 50, return_sequences = True, input_shape = (n_input, n_features)))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(LSTM(units = 50, return_sequences = True))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(LSTM(units = 50))\nlstm_model.add(Dropout(0.2))\nlstm_model.add(Dense(units = 1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(generator, epochs = 8)","ba820789":"losses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize = (30,4))\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.xticks(np.arange(0,100,1))\nplt.plot(range(len(losses_lstm)), losses_lstm);","49095b29":"lstm_predictions_scaled = []\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test_data)):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)\n\nprediction = pd.DataFrame(scaler.inverse_transform(lstm_predictions_scaled))\nprediction","e22a0d6c":"pred_rec = aus_grp_d.loc[:,[\"date\",\"\"]]\npr_data_r = pred_rec.tail(10)\npr_data_r.columns = ['ds','y']\nm=Prophet()\nm.fit(pr_data_r)\nfuture_r=m.make_future_dataframe(periods=15)\nforecast_r=m.predict(future)\nforecast_r","2b7bd9fd":"#LSTM","f0bebc14":"#Epochs vs Loss","b283d5c7":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #006400;\"><b style=\"color:orange;\">\u0915\u094d\u092f\u093e \u0906\u092a \u0915\u094b\u0935\u093f\u0921-19 \u0938\u0947 \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0939\u0948\u0902 ?<\/b><\/h1><\/center>\n\nAre you protected against Covid_19?\n\nCoWin The Indian government\u2019s vaccination platform\n\n\"CoWin stands for Covid Vaccine Intelligent Work. Back in January 2021, the platform was unveiled by the union government as it launched the vaccination drive in the country. The website was created to give users a chance to book vaccine slots, keep a track of the overall vaccination drive in the country and download the Covid-19 vaccine certificate.\"\n\nhttps:\/\/economictimes.indiatimes.com\/news\/india\/covid-diplomacy-india-offers-open-source-code-for-cowin-as-nations-express-interest\/what-is-cowin\/slideshow\/84166514.cms","3a7fbce2":"#Below I'm trying to learn ARIMA. I chose the order from https:\/\/otexts.com\/fpp2\/seasonal-arima.html then I inverted to avoid another error.","24305420":"![](https:\/\/images.news18.com\/ibnlive\/uploads\/2021\/01\/1610772682_whatsapp-image-2021-01-16-at-10.21.09-am.jpeg)news18.com","e1c9367a":"#Creating new features , starting by \"new\".","ae11ef00":"#Minimum age limit for what? It was not mentioned in the data.","765fdb67":"#Code by Vansh Jatana https:\/\/www.kaggle.com\/vanshjatana\/australia-under-covid-19\/notebook?scriptVersionId=32940123","52b92b16":"#Prediction with Prophet","538d6bcc":"#Thanks to Vansh Jatana for most part of this script\n\nhttps:\/\/www.kaggle.com\/vanshjatana\/australia-under-covid-19\/notebook?scriptVersionId=32940123","80325c49":"#I have no clue about what fee is that below since it doesn't have any description in the Dataset till now."}}