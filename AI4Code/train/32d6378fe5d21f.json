{"cell_type":{"c859a8a0":"code","19923cbf":"code","9549af17":"code","ef080712":"code","2f0fd5d9":"code","9a869819":"code","3c3661bc":"code","1214ddcc":"code","3eef5e1c":"code","1f27816a":"code","733130cf":"code","f4a222c5":"code","4b20942e":"code","cc243560":"code","054b8068":"code","2cb2aeba":"code","b1946362":"code","c7dd1269":"code","4e78665d":"code","dd26e258":"code","b7152e0a":"code","14f3c80a":"markdown","5678a366":"markdown","77a38368":"markdown","b4586116":"markdown","ee0a26b5":"markdown","b987d18a":"markdown","913303e6":"markdown","7f7036ae":"markdown","aef49176":"markdown","006d38d9":"markdown","36b4fff6":"markdown","8088a92d":"markdown","d6ce9659":"markdown","22a41e2a":"markdown","e035300a":"markdown","72a22c13":"markdown","880e3c49":"markdown","923e5e53":"markdown","d0484fcd":"markdown","64984795":"markdown","a3a98268":"markdown","7b9cb02f":"markdown","82c2d83a":"markdown","0d68d2b0":"markdown","818634d7":"markdown","41672cd9":"markdown","d48e5019":"markdown","d61bfbf7":"markdown","51607025":"markdown","3ab5a0d8":"markdown","fbcebb66":"markdown","d29934e1":"markdown","d0731885":"markdown","9f23736d":"markdown","3e9a989a":"markdown","b20ba059":"markdown","77c74395":"markdown","935d1142":"markdown","22710c21":"markdown","0f1b3e5c":"markdown","0b5b8a4c":"markdown","2c0471de":"markdown","44d80454":"markdown","27bad52d":"markdown","19746af8":"markdown","840a88d9":"markdown","52deb3c0":"markdown","fb08094e":"markdown","f18b836a":"markdown","e24c40db":"markdown","963691b5":"markdown","e53cbb22":"markdown","395664af":"markdown","77495c90":"markdown","82b8ad2c":"markdown","cddd52fa":"markdown","bff17eb7":"markdown"},"source":{"c859a8a0":"import numpy as np\nimport time\n\nlist1 = []\nlist2 = []\n\nfor i in range(1000):\n    list1.append(i)\nprint(len(list1))\n\nfor j in range(1000,0,-1):\n    list2.append(j)\nprint(len(list2))\n\nresult = []\nstart = time.time()\nfor i in range(len(list1)):\n    result.append(list1[i]+list2[i])\nend = time.time()\nprint(\"Time taken in python list\",(end - start)*100000)\n\na = np.array(list1)\nb = np.array(list2)\n\nstart1 = time.time()\nresult = a + b\nend1 = time.time()\nprint(\"Time taken in numpy list\",(end1 - start1)*100000)","19923cbf":"one_d_array = np.array([1,2,3])\nprint(one_d_array)\n","9549af17":"two_d_array = np.array([[1.0,2.0,3.0],[4.0,5.0,6.0]])\nprint(two_d_array)","ef080712":"print(one_d_array.ndim)\nprint(two_d_array.ndim)\n","2f0fd5d9":"print(one_d_array.shape)\nprint(two_d_array.shape)\n","9a869819":"print(one_d_array.dtype)\nprint(two_d_array.dtype)\n","3c3661bc":"# To specify the data type while initializing\none_d_array = np.array([1,2,3],dtype = 'int16')\nprint(one_d_array.dtype)\n","1214ddcc":"print(one_d_array.size)\nprint(two_d_array.size)\n","3eef5e1c":"# item Size of an array\nprint(one_d_array.itemsize)\nprint(two_d_array.itemsize)\n","1f27816a":"print(one_d_array.size * one_d_array.itemsize)\nprint(two_d_array.size * two_d_array.itemsize)\nprint(one_d_array.nbytes)\nprint(two_d_array.nbytes)\n","733130cf":"c = np.array( [ [1,2], [3,4] ], dtype=complex )\nprint(c)","f4a222c5":"array = np.array([[1,3,5,7],[8,10,12,14]])\n# Get a specific element [r, c]\narray[1, 2]\n","4b20942e":"# Get a specific row ( 0 denotes first row and all column values )\narray[0, :]\n","cc243560":"# Get a specific column ( 0 denotes first column and all row values )\narray[:, 0]\n","054b8068":"array[1, 3] = 12\narray[0, :] = [1,2,3,4]\nthree_d_array = np.array([[[1,2],[2,4],[3,6]]])\nthree_d_array[0,1,1] = 7\n","2cb2aeba":"array = np.array([[1,3,5,7],[8,10,12,14]])\n\n# All 0s matrix\nprint(np.zeros((2,2)))\n\n# All 1s matrix\nprint(np.ones((2,2,2), dtype='int32'))\n\n# other number\nprint(np.full((2,2), 8))\n\n# Any other number (full_like) of other shape\nprint(np.full_like(array, 4))\n\n#empty array\nprint(np.empty( (2,3) ) )\n\n\n# Random decimal numbers\nprint(np.random.rand(3,4))\n\n# Random Integer values\nprint(np.random.randint(2,8, size=(3,3)))\n\n# identity matrix\nprint(np.identity(3))\n\n# Repeat an array\ntemp = np.array([[1,2,3,4,5,6]])\nprint(np.repeat(temp,3, axis=0))\n\n# Repeat an array\ntemp = np.array([[1,2,3,4,5,6]])\nprint(np.repeat(temp,3, axis=1))","b1946362":"arr = np.array([1,2,3])\ntemp = arr\ntemp[0] = 5\nprint(temp)\nprint(arr)\n","c7dd1269":"arr = np.array([1,2,3])\ntemp = arr.copy()\ntemp[0] = 5\nprint(temp)\nprint(arr)\n","4e78665d":"a = np.array([1,2,3,4])\nprint(a)\n\n# Element wise\nprint(a+2)\nprint(a-2)\nprint(a*2)\nprint(a\/2)\nprint(a+a)\nprint(np.exp(2))\nprint(a**2)\nprint(np.cos(a))\n","dd26e258":"a = np.random.randint(2,8, size=(3,3))\nb = np.random.randint(2,8, size=(3,3))\nprint(a,b)\n\nprint(np.linalg.solve(a, b))\n\nprint(np.linalg.inv(a))\n\nprint(np.trace(a))\n\nprint(np.linalg.norm(a))\n\nprint(np.linalg.eigvals(a))\n\nprint(np.dot(a,b))","b7152e0a":"initial = np.array([[10,20,30,40],[50,60,70,80]])\nprint(initial)\n\nfinal = initial.reshape((2,4))\nprint(final)\n\nprint(np.ravel(initial))\n\nprint(np.transpose(initial))\n\nprint(np.column_stack((initial,final)))\n\n# Vertically stacking vectors\nv1 = np.array([1,2,3,4])\nv2 = np.array([5,6,7,8])\n\nprint(np.vstack([v1,v2,v1,v2]))\n\n# Horizontal  stack\nh1 = np.ones((2,4))\nh2 = np.zeros((2,2))\n\nprint(np.hstack((h1,h2)))","14f3c80a":"![image.png](attachment:image.png)","5678a366":"# Initialize a float array \u2013 2d\nTwo dimensional arrays can be created as following by giving comma at the end of a list\n","77a38368":"As we know computers take binary representations, let us see how is number stored in both python and numpy.","b4586116":"The above diagram shows numbers in the list are stores in non continuous memory source while in numpy arrays they are stored in contiguous memory which makes efficient access and faster ","ee0a26b5":"Let us consider a list, list1 = [1,2,3], suppose consider that you need to add 5 to all elements present in the list, you will do that by looping through the list and add 5 to each element which is a time consuming process. In order to faster, we use numpy arrays","b987d18a":"# Differences between NumPy arrays and python list","913303e6":"# Get shape of an array\n\nThe shape function returns the shape of the array, for example (3,4) denotes that the array has 3 rows and 4 columns\n","7f7036ae":"# Array \u2013 basics\nIn this topic we are going to learn the basics of numpy arrays \n","aef49176":"# Get size of array\nTotal Size of an array or count\n","006d38d9":"1.\tWhat is numpy\n2.\tDifference between numpy and python list\n3.\tWhy is numpy fast?\n4.\tNeed of numpy\n5.\tApplications of numpy\n6.\tInstallation\n7.\tArray initialization \n8.\tAccessing elements in the array\n9.\t3D array\n10.\tTypes of array\n11.\tArray \u2013 copy\n12.\tMathematics\n13.\tLinear algebra\n14.\tStatistics\n15.\tRe arranging \n16.\tReading the file\n17.\tEnd of part 1","36b4fff6":"The general formula to access an element from numpy array is [startindex:endindex:stepsize]","8088a92d":"The above diagram shows:\n\nConsider a number 5 which is to be stored, computer reads it as byte which is 8 bit \n\nSo 5 becomes 00000101 and now comes the difference\n\nIn numpy, it is stored in continuous memory locations as 32 bit number or 64 or 16 which can be changed by us.\n\nBut in other hand list, it stores 4 parts the size, reference count, object type and value which makes difficult to calculate each time. \nThis is the result of why numpy takes less time than list\n","d6ce9659":"The reasons why numpy is fast is given below\n\uf0fc\tFaster to read less bytes of memory\n\uf0fc\tNo type checking when iterating elements \n\nVectorization \n\n1.\tThere are optimized in the backend written in C.\nTheir advantages are\n\nVectorized code is more concise and easier to read which more likely resembles standard mathematical notation\n\nVectorization results in more \u201cPythonic\u201d code. Without vectorization, our code would be littered with inefficient and difficult to read for loops\n\nBroadcasting\n2.\tBroadcasting is the term used to describe the implicit element-by-element behavior of operations; generally speaking, in NumPy all operations, not just arithmetic operations, but logical, bit-wise, functional, etc., behave in this implicit element-by-element fashion, i.e., they broadcast. \n","22a41e2a":"![image.png](attachment:image.png)","e035300a":"# To get an specific row\nGet a specific row ( 0 denotes first row and all column values )\n\n","72a22c13":"# Initialize an integer array \u2013 1d \n\nOne dimensional array can be defined as following, note that the elements should be given in list and should be of homogenous type","880e3c49":"# Conclusion\n\nHere comes the end of basics of NumPy library tutorial. In this tutorial, we learned in detail the basics of working of NumPy library with examples. Here we have also explored how to perform various operations via the NumPy library, which is most commonly used in many data science applications.\n\n","923e5e53":"![image.png](attachment:image.png)","d0484fcd":"# Why numpy?","64984795":"# Get the data type of \n\nTo get the data type of the elements in the array, this function is used \n","a3a98268":"# Linear algebra\n\n\n1.\tMatmul\n\n\nWhen we need to multiply two matrixes we can use matmul, with only condition of the column of first matrix must be equal to row of second matrix\n","7b9cb02f":"Note - Before reading this tutorial I strongly recommend to have a basic knowledge in python","82c2d83a":"The below table summarises the function and its uses ","0d68d2b0":"When wrong shape is given it shows an error","818634d7":"![image.png](attachment:image.png)","41672cd9":"![image.png](attachment:image.png)","d48e5019":"# Re arranging arrays","d61bfbf7":"# Array Maths\n\n\nEvery functions happens element wise, for example number 2 is added to every element in the array. Same technique is followed for all the below mentioned functions\n\n1.\tAddition \n\n2.\tSubtraction\n\n3.\tMultiplication\n\n4.\tDivision\n\n5.\tExponential\n\n6.\tTrigonometric functions\n","51607025":"In this tutorial, we will be focussing on the basics of numpy package.","3ab5a0d8":"![image.png](attachment:image.png)","fbcebb66":"![image.png](attachment:image.png)","d29934e1":"![image.png](attachment:image.png)","d0731885":"# Copy of array elements\n\nThere are basically two copies in numpy python\n\n\u2022\tShallow copy ( View )\n\n\u2022\tDeep copy\n\n\nSimple assignments do not make the copy of array object. Instead, it uses the same id() of the original array to access it. The id() returns a universal identifier of Python object, similar to the pointer in C.\nIn the initial one, if you try to copy an array into another then changes you make in initial will affect the copied array, to avoid such thing we will use numpy.copy() function which is just make a copy and changes will not affect the copied array. It is a complete copy of the array and its data, and doesn\u2019t share with the original array.\n","9f23736d":"# To get an specific element\n\nIn the array, to get a specific array element we can just access it by row number and column number index which is starting from 0,  we can use negative index to come from reverse \n\n","3e9a989a":"# What is numpy?\n\nNumpy is a Python library that provides a multidimensional array object, various derived objects, and a collection of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, reshaping, accessing etc.,\nNumerical + Python = Numpy. \n","b20ba059":"# Advantages of numpy","77c74395":"# Total size = nbytes\n\nTotal size will be = number of item * size of one item or nbytes\n","935d1142":"# To specify the data type while initializing \n\nWe can specify the data type of the elements while creating the array when we are really considered about the memory  \n","22710c21":"# To get an specific column","0f1b3e5c":"![image.png](attachment:image.png)","0b5b8a4c":"# Topics","2c0471de":"# Why is NumPy Fast?","44d80454":"# Complex arrays\n\nNumpy supports complex number arrays to\n","27bad52d":"# Changing specific element in an array\n\nYou can just locate the index and modify the value, note that the shape must match\n\n","19746af8":"# Installation\n\nThe best way to install NumPy on your system is by using a pre-built package for your operating system.\nYou can install the package by providing - pip install numpy \nYou can import the installed package by providing - Import numpy as np\n\nNow let\u2019s start coding and explore the basics of numpy\n","840a88d9":"# Getting started with Numpy","52deb3c0":"![image.png](attachment:image.png)","fb08094e":"# Application of Numpy:\n\no\tMathematics\n\no\tPlotting in matplotlib\n\no\tBackend connections like pandas\n\no\tBase for ML\n\no\tBroadcasting helps in Deep learning process faster\n","f18b836a":"# Initializing Different Types of Arrays\n\n\nCommon parameters : \n\nShape - int or tuple of ints\nData-type, optional, \nOrder {\u2018C\u2019, \u2018F\u2019}, optional, default: \u2018C\u2019 (row major or column major)\n","e24c40db":"\uf076\tPowerful n-dimensional arrays - Fast and versatile, the NumPy vectorization, indexing, and broadcasting concepts backbone of array computing today.\n\n\uf076\tNumerical computing tools - It offers functions like random number generators, linear algebra routines, Fourier transforms, and more.\n\n\uf076\tInteroperable \u2013 It supports a wide range of hardware and computing platforms, performs well with distributed, GPU, and sparse array.\n\n\uf076\tPerformance \u2013 It is a well-optimized C code. So it is very much faster.\n\n\uf076\tEasy to use- High level syntax makes it accessible and productive for programmers from any background or experience level.\n\n\uf076\tOpen source - NumPy is developed and maintained publicly on GitHub by a vibrant, responsive, and diverse community.\n","963691b5":"![image.png](attachment:image.png)","e53cbb22":"# Get dimensions of numpy array\n\nTo get the dimensions of the arrays, we can use ndim\n","395664af":"# Need of numpy","77495c90":"Python is a great and easy to learn programming language, but with the help of a few popular libraries (numpy, scipy, matplotlib) it becomes a \n\npowerful environment for scientific computing.","82b8ad2c":"![image.png](attachment:image.png)","cddd52fa":"# Get item size of the array\n\nItem Size of an array\n","bff17eb7":"# Accessing specific element in an array\n\nIn this topic we will be concentrating on how to access an element, modify it\n"}}