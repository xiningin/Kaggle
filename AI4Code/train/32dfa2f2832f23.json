{"cell_type":{"5729d226":"code","3a0f0cd6":"code","1f742afb":"code","81764292":"code","188f1aa6":"code","5e7f4939":"code","f5680431":"code","9e25958c":"code","c8d2dda3":"code","3f6005e3":"code","0690274b":"code","c1eb0bab":"code","9740a46c":"code","2e88cf7c":"code","ffea9fdc":"code","e5b946a9":"code","054cf494":"code","28a64390":"code","9d2a4c8f":"code","c220639e":"code","a91f4820":"code","8acf72ff":"code","e66ba5dd":"code","cfc37425":"code","eb734bc5":"code","32c7a434":"code","2f385378":"code","ec69032e":"code","852ca36b":"code","7183c545":"code","2f771390":"code","42157b89":"code","9f1b444a":"code","71b729eb":"code","af10eb1b":"markdown","8afddd86":"markdown","57a2f752":"markdown","5fae5739":"markdown","08c1a6e7":"markdown","9762e3d7":"markdown","c2bd7136":"markdown","afc3df8a":"markdown"},"source":{"5729d226":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a0f0cd6":"airline = pd.read_csv(\"\/kaggle\/input\/airline-passenger-satisfaction\/train.csv\",index_col=0)\ntest = pd.read_csv(\"\/kaggle\/input\/airline-passenger-satisfaction\/test.csv\",index_col=0)\nairline.head()","1f742afb":"airline.head()","81764292":"def conv_cat(data):\n    data['Customer Type'] = data['Customer Type'].map({'Loyal Customer': 1, 'disloyal Customer': 0})\n    data['Type of Travel'] = data['Type of Travel'].map({'Personal Travel':0, 'Business travel':1})\n    data['Class'] = data['Class'].map({'Business':2, 'Eco Plus':1, 'Eco':0})\n    data['satisfaction'] = data['satisfaction'].map({'neutral or dissatisfied':0, 'satisfied':1})\n    data = pd.get_dummies(data)\n    data.drop('id',axis=1,inplace=True)\n    data.fillna(0,inplace=True)\n    return data\nairline = conv_cat(airline)\nairline_test = conv_cat(test)","188f1aa6":"airline.head()","5e7f4939":"X = airline.drop(\"satisfaction\",axis=1)\ny = airline[\"satisfaction\"]\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(42)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","f5680431":"from sklearn.ensemble import RandomForestClassifier\nnp.random.seed(42)\nclf = RandomForestClassifier()\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)","9e25958c":"y_pred = clf.predict(X_test)\ny_pred[:20]","c8d2dda3":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","3f6005e3":"clf.predict_proba(X_test[:20])","0690274b":"from sklearn.model_selection import cross_val_score\nnp.random.seed(42)\ncross_val_score(clf,X,y,cv=6)","c1eb0bab":"np.random.seed(42)\nclf_single_score = clf.score(X_test,y_test)\nclf_crossval_score = np.mean(cross_val_score(clf,X,y,cv=6))\npd.DataFrame([{\"Classification Single Score\":clf_single_score,\"Cross Validation Score\":clf_crossval_score}])","9740a46c":"from sklearn.metrics import roc_curve\ny_prob = clf.predict_proba(X_test)\ny_positive = y_prob[:,1]\n\n#Calculate false positive rate, true positive rate and thresholds\nfpr,tpr,thresholds = roc_curve(y_test,y_positive)\nfpr","2e88cf7c":"import matplotlib.pyplot as plt\ndef plot_roc(fpr,tpr):\n    plt.plot(fpr,tpr,color='orange',label='ROC')\n    plt.plot([0,1],[0,1],color='darkblue',linestyle='--',label=\"Guessing\")\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.title(\"Receiver Operating Characteristics Curve (ROC)\")\n    plt.legend()\n    plt.show()\n    \nplot_roc(fpr,tpr)","ffea9fdc":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_positive)","e5b946a9":"from sklearn.metrics import confusion_matrix\ny_pred = clf.predict(X_test)\nconfusion_matrix(y_test,y_pred)","054cf494":"pd.crosstab(y_test,y_pred,\n           rownames=[\"Actual Label\"],\n           colnames=[\"Predicted Label\"])","28a64390":"import seaborn as sns\nsns.set(font_scale=1.5)\nconf_mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(conf_mat);","9d2a4c8f":"\ndef plot_conf_mat(conf_mat):\n    \"\"\"\n    Plots a confusion matrix using Seaborn's heatmap().\n    \"\"\"\n    fig, ax = plt.subplots(figsize=(3, 3))\n    ax = sns.heatmap(conf_mat,\n                     annot=True, # Annotate the boxes \n                     cbar=False)\n    plt.xlabel('Predicted label')\n    plt.ylabel('True label');\n\nplot_conf_mat(conf_mat)","c220639e":"from sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(clf, X, y)","a91f4820":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","8acf72ff":"np.random.seed(42)\n#Default- Mean Accuracy\ncv_acc = cross_val_score(clf,X,y,cv=5)\n#Cross Validated Score\nprint(f\"The Cross Validated Accuracy : {np.mean(cv_acc)*100:.2f}%\")","e66ba5dd":"np.random.seed(42)\n#Accuracy Param\ncv_acc = cross_val_score(clf,X,y,cv=5,scoring=\"accuracy\")\n#Cross Validated Score\nprint(f\"The Cross Validated Accuracy : {np.mean(cv_acc)*100:.2f}%\")","cfc37425":"np.random.seed(42)\n#Precision Param\ncv_acc = cross_val_score(clf,X,y,cv=5,scoring=\"precision\")\nprint(f\"The Cross Validated Precision : {np.mean(cv_acc)*100:.2f}%\")","eb734bc5":"np.random.seed(42)\n#Recall Param\ncv_acc = cross_val_score(clf,X,y,cv=5,scoring=\"recall\")\nprint(f\"The Cross Validated Recall : {np.mean(cv_acc)*100:.2f}%\")","32c7a434":"np.random.seed(42)\n#F1 Param\ncv_acc = cross_val_score(clf,X,y,cv=5,scoring=\"f1\")\nprint(f\"The Cross Validated F1 score : {np.mean(cv_acc)*100:.2f}%\")","2f385378":"def classification_metrics(y_test,y_pred):\n    from sklearn.metrics import accuracy_score,precision_score,f1_score,recall_score\n    print(\"Classification Metrics: \")\n    print(f\"Accuracy: {accuracy_score(y_test,y_pred)*100 :.2f}%\")\n    print(f\"Precision: {precision_score(y_test,y_pred)*100 :.2f}%\")\n    print(f\"Recall: {recall_score(y_test,y_pred)*100 :.2f}%\")\n    print(f\"F1: {f1_score(y_test,y_pred)*100 :.2f}%\")\n    metric_dict = {\"accuracy\": round(accuracy_score(y_test,y_pred), 2),\n                   \"precision\": round(precision_score(y_test,y_pred), 2), \n                   \"recall\": round(recall_score(y_test,y_pred), 2),\n                   \"f1\": round(f1_score(y_test,y_pred), 2)}\n    return metric_dict\nbase_metrics = classification_metrics(y_test,y_pred)","ec69032e":"clf.get_params()","852ca36b":"grid = {\"n_estimators\":[10,100,200,500,1000,1200],\n       \"max_depth\":[None,5,10,20,30],\n       \"max_features\":[\"auto\",\"sqrt\"],\n       \"min_samples_split\":[2,4,6],\n       \"min_samples_leaf\":[1,2,4]}","7183c545":"np.random.seed(42)\nclf= RandomForestClassifier(n_jobs=1)\nfrom sklearn.model_selection import RandomizedSearchCV\nrs_clf = RandomizedSearchCV(estimator=clf,\n                   param_distributions=grid,\n                   n_iter=20,\n                   cv=5,\n                   verbose=2)\nrs_clf.fit(X_train,y_train);","2f771390":"rs_clf.best_params_","42157b89":"X_testdata = airline_test.drop(\"satisfaction\",axis=1)\ny_testdata = airline_test[\"satisfaction\"]","9f1b444a":"rs_y_preds = rs_clf.predict(X_testdata)\nrs_metrics= classification_metrics(y_testdata,rs_y_preds)","71b729eb":"compare_metrics = pd.DataFrame({\"baseline\": base_metrics,\n                                \"random search\": rs_metrics})\ncompare_metrics.plot.bar(figsize=(10, 8));","af10eb1b":"# Confusion Matrix","8afddd86":"# Classification Report","57a2f752":"# Classification Metrics","5fae5739":"# RandomizedSearchCV for finding best Parameter","08c1a6e7":"# Loading Dataset and Preparation","9762e3d7":"# Cross Validation Score and ROC Curve","c2bd7136":"# Prediction on given test data","afc3df8a":"# Fitting Model and Scoring Parameters"}}