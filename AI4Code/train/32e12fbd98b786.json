{"cell_type":{"f009cba4":"code","fb149de1":"code","29ff61f6":"code","4f6c00b8":"code","8fe78773":"code","7a09c79f":"code","2dd884f7":"code","30850f6c":"code","f27a262e":"code","050aed3d":"code","8f84b282":"code","1c0b7287":"code","c5adfcce":"code","a6440acd":"code","8a060bc6":"code","2f351a2c":"code","f400cfbc":"code","ef1a6a80":"code","1fca7e32":"code","fc43803f":"code","a812e27b":"code","32105d13":"code","119fccf5":"code","d314abea":"code","5c063595":"code","3d4ced6d":"code","3b74371a":"code","b9873746":"code","b316f059":"code","dce5eced":"code","c0285339":"code","62aecab6":"code","1011eb9f":"markdown","fba3f0e1":"markdown","1e6c6583":"markdown","caf8e989":"markdown","8dc9b448":"markdown","bdcfa7d5":"markdown","f28955ab":"markdown","1e96a8ae":"markdown","23adbd84":"markdown"},"source":{"f009cba4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb149de1":"dir_targets = '\/kaggle\/input\/playerid-and-targets\/results\/targets_df_'","29ff61f6":"dir_targets_0_100 = dir_targets + '0_100.csv'\ntargets_df_0_100 = pd.read_csv(dir_targets_0_100)","4f6c00b8":"targets_df_0_100.head()","8fe78773":"train_df = pd.read_csv('\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/train.csv')\ntrain_df.head()","7a09c79f":"train_df.info()","2dd884f7":"# https:\/\/www.kaggle.com\/chumajin\/eda-of-mlb-for-starter-english-ver\n# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)","30850f6c":"targets_date_0 = unpack_json(train_df['nextDayPlayerEngagement'].iloc[0])","f27a262e":"targets_date_0","050aed3d":"rosters_date_0 = unpack_json(train_df['rosters'].iloc[0])","8f84b282":"rosters_date_0","1c0b7287":"roster_targets_0 = pd.merge(targets_date_0,rosters_date_0, how='outer',on='playerId')","c5adfcce":"roster_targets_0","a6440acd":"player_csv = pd.read_csv('\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/players.csv')","8a060bc6":"player_csv.index = player_csv['playerId']\nplayer_csv.drop(['playerId'], axis = 1, inplace = True)","2f351a2c":"player_csv","f400cfbc":"player_csv.loc[656744]","ef1a6a80":"player_csv.loc[547989]","1fca7e32":"roster_targets_0.dropna(subset=['target1','target2','target3','target4'])","fc43803f":"corr_NaN_matrix = roster_targets_0.corr()","a812e27b":"corr_NaN_matrix['target1'].sort_values(ascending = False)","32105d13":"roster_targets_0.drop(['status'], axis = 1, inplace = True)","119fccf5":"roster_targets_0['statusCode'] = roster_targets_0['statusCode'].fillna(0)","d314abea":"roster_targets_0['statusCode'].replace('A', 1, inplace = True)","5c063595":"roster_targets_0","3d4ced6d":"roster_targets_0.corr()","3b74371a":"# roster_targets_0 \uc804\uccb4 \ucf54\ub4dc\n'''\ntargets_date_0 = unpack_json(train_df['nextDayPlayerEngagement'].iloc[0])\nrosters_date_0 = unpack_json(train_df['rosters'].iloc[0])\nroster_targets_0 = pd.merge(targets_date_0,rosters_date_0, how='outer',on='playerId')\nplayer_csv = pd.read_csv('\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/players.csv')\nplayer_csv.index = player_csv['playerId']\nplayer_csv.drop(['playerId'], axis = 1, inplace = True)\nroster_targets_0.dropna(subset=['target1','target2','target3','target4'])\nroster_targets_0.drop(['status'], axis = 1, inplace = True)\nroster_targets_0['statusCode'] = roster_targets_0['statusCode'].fillna(0)\nroster_targets_0['statusCode'].replace('A', 1, inplace = True)\nroster_targets_0.corr()\n\n\n=> \uc804\uccb4 \ub0a0\uc9dc\ub85c \uac01\uc790 corr\ud55c \ud6c4 \ud3c9\uade0 \ub0b4\uae30\n\n=> \uac01 \ud53c\ucc98 \ubcc4\ub85c \ub354\ud588\ub2e4\uac00 \ud55c\ubc88\uc5d0 \ub098\ub220\uc8fc\uae30\n\n'''\n","b9873746":"a = pd.DataFrame([1,2],[3,4])","b316f059":"from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\n\n\ndef roster_targets_corr(train_df, start, last):\n    plus = lambda a, b : a + b\n    for i in range(start, last):\n        targets_date = unpack_json(train_df['nextDayPlayerEngagement'].iloc[i])\n        rosters_date = unpack_json(train_df['rosters'].iloc[i])\n        roster_targets = pd.merge(targets_date,rosters_date, how='outer',on='playerId')\n        roster_targets.dropna(subset=['target1','target2','target3','target4'], axis = 0, inplace = True)\n        roster_targets.drop(['status'], axis = 1, inplace = True)\n        roster_targets['statusCode'] = roster_targets['statusCode'].fillna(0)\n        roster_targets['statusCode'] = roster_targets['statusCode'].apply(lambda x : 1 if x == 'A' else 0)\n        roster_targets_corr = roster_targets.corr()\n        if i == start :\n            r_t_c = roster_targets_corr\n        else :\n            r_t_c = r_t_c.combine(roster_targets_corr, plus)\n        if i%100 == 0:\n            print(i)\n    return r_t_c\n            ","dce5eced":"len(train_df)","c0285339":"roster_targets_corr = roster_targets_corr(train_df, 0, 1216)","62aecab6":"roster_targets_corr = roster_targets_corr.apply(lambda x : x\/1216)\nroster_targets_corr","1011eb9f":"status\ub294 \uc5c6\uc560\uace0 status code\ub294 Active \uba74 1, \uc544\ub2c8\uba74 0\uc744 \uc900\ud6c4 \ub2e4\uc2dc \ud574\ubcf4\uae30","fba3f0e1":"\uc704\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ubaa8\ub4e0 \ud53c\ucc98 \uac12\uc744 \uc5f0\uad00\uad00\uacc4 \ucc3e\uae30\n\ub0a0\uc9dc, playerId, TeamId,","1e6c6583":"roster\uac00 NAN\uc778 \uac83\uc740 \uadf8\ub0a0 \uacbd\uae30\ub97c \uc548 \ub6f4\uac83.\n1. roster NAN\uac12 \uc0b4\ub824\ub454 \uc0c1\ud0dc\uc5d0\uc11c corr\n2. NaN \uc81c\uac70 \ud6c4 corr","caf8e989":"'642667'\uc774 \uc120\uc218\uc5d0 \uc5c6\ub2e4.???","8dc9b448":"\uc65c null \uac12\uc774 \uc788\uc9c0???? => \uc120\uc218\uac00 \uc544\ub2cc\uac00??","bdcfa7d5":"\ub0a0\uc9dc \uae30\uc900 : targets\uac12\uacfc \ud53c\ucc98\uac12\ub4e4\uad00\uc758 \uc5f0\uad00\uad00\uacc4 \uc870\uc0ac\ud558\uae30\n","f28955ab":"43\uacfc 44\uc5d0\uc11c corr\uc744 \ud588\uc744 \ub54c, statusCode\uac00 \uc788\uae30\ub3c4 \ud558\uace0 \uc5c6\uae30\ub3c4 \ud568 => statusCode\uac00 object\uc774\ub2e4. => \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud568... => \ubb50\ud558\ub098 \uc26c\uc6b4\uac8c \uc5c6\ub0d0 => Active\ub9cc 2 \ub098\uba38\uc9c0\ub294 0\uc73c\ub85c \ub300\uccb4\n","1e96a8ae":"### \uacb0\ub860 ###\n\uadf8\ub098\ub9c8 target2\ub791 target4\ub791 \uc5f0\uad00\uad00\uacc4\uac00 \ub192\uc74c, \n\nroster\ub294 \ubc84\ub824\ub3c4 \ub420\ub4ef \ud568\n\n","23adbd84":"\uc120\uc218\uac00 \uc544\ub2cc \uac83\uc73c\ub85c \ucd94\uc815\ud558\uace0 => targets \uc774NAN\uc774\uba74 drop"}}