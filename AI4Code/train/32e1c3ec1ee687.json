{"cell_type":{"7d0b290b":"code","4b4d749f":"code","937c0ca9":"code","c817c9f0":"code","92040db1":"code","313e7ad0":"code","96d098a9":"code","e54727f2":"code","57f486be":"code","bd2aef33":"markdown","cc75b230":"markdown","da6c2254":"markdown","56b69de2":"markdown","b35419e2":"markdown","dff92506":"markdown","aa953e53":"markdown","3e1f3531":"markdown","382672c3":"markdown","a4506a6a":"markdown","d2eeb5da":"markdown","707e7c0c":"markdown","4858830e":"markdown","97ed9acc":"markdown"},"source":{"7d0b290b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b4d749f":"# Import libraries\nfrom statistics import mean\nimport statistics\nimport matplotlib.pyplot as plt\nimport math\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\n\n# upload files\n\ns04_05 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2004-05_officialBoxScore.csv\")\ns05_06 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2005-06_officialBoxScore.csv\")\ns06_07 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2006-07_officialBoxScore.csv\")\ns07_08 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2007-08_officialBoxScore.csv\")\ns08_09 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2008-09_officialBoxScore.csv\")\ns09_10 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2000-2010\/2009-10_officialBoxScore.csv\")\ns10_11 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2010-11_officialBoxScore.csv\")\ns13_14 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2013-14_officialBoxScore.csv\")\ns14_15 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2014-15_officialBoxScore.csv\")\ns15_16 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2015-16_officialBoxScore.csv\")\ns16_17 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2016-17_officialBoxScore.csv\")\ns17_18 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2017-18_officialBoxScore.csv\")\ns18_19 = pd.read_csv(\"..\/input\/nba-games-box-score-since-1949\/NBA_BoxScore_1949-2021\/data\/2010-2019\/2018-19_officialBoxScore.csv\")","937c0ca9":"lista = [s04_05,s05_06,s06_07,s07_08,s08_09,s09_10,s10_11,s13_14,s14_15,s15_16,s16_17,s17_18,s18_19]\n\nn = []\nfor i in lista:\n    x = i.drop(i[i.seasonType != 'Regular'].index)\n    y = x.shape[0]\n    n.append(y)\n\nlista2 = []\nfor i in lista:\n    x = i.drop(i[i.seasonType != 'Regular'].index)\n    df1 = x[[ 'season','teamAbbr','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA',\n           'teamFGM','teamFG%','team2PA','team2PM','team2P%','team3PA','team3PM','team3P%','teamFTA',\n           'teamFTM','teamFT%','teamORB','teamDRB','teamTRB','opptPTS', 'opptAST', 'opptTO','opptSTL',\n             'opptBLK','opptFGA','opptFGM', 'opptFG%', 'oppt2PA', 'oppt2PM', 'oppt2P%', 'oppt3PA',\n             'oppt3PM', 'oppt3P%','opptFTA', 'opptFTM', 'opptFT%', 'opptORB', 'opptDRB', 'opptTRB']]   \n    df1['team'] = df1[\"teamAbbr\"] + df1[\"season\"].astype(str)\n    df1 = df1[['team','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA',\n           'teamFGM','teamFG%','team2PA','team2PM','team2P%','team3PA','team3PM','team3P%','teamFTA',\n           'teamFTM','teamFT%','teamORB','teamDRB','teamTRB','opptPTS', 'opptAST', 'opptTO','opptSTL',\n               'opptBLK','opptFGA','opptFGM', 'opptFG%', 'oppt2PA', 'oppt2PM', 'oppt2P%', 'oppt3PA',\n             'oppt3PM', 'oppt3P%','opptFTA', 'opptFTM', 'opptFT%', 'opptORB', 'opptDRB', 'opptTRB']]\n    \n    df2 = x[[ 'season','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA',\n           'teamFGM','teamFG%','team2PA','team2PM','team2P%','team3PA','team3PM','team3P%','teamFTA',\n             'teamFTM','teamFT%','teamORB','teamDRB','teamTRB','opptAbbr','opptPTS', 'opptAST', \n             'opptTO','opptSTL', 'opptBLK','opptFGA','opptFGM', 'opptFG%', 'oppt2PA', 'oppt2PM', \n             'oppt2P%', 'oppt3PA', 'oppt3PM', 'oppt3P%','opptFTA', 'opptFTM', 'opptFT%', 'opptORB', \n             'opptDRB', 'opptTRB']]\n    df2['team'] = df2[\"opptAbbr\"] + df2[\"season\"].astype(str)\n    df2 = df2[[ 'team','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA',\n           'teamFGM','teamFG%','team2PA','team2PM','team2P%','team3PA','team3PM','team3P%','teamFTA',\n             'teamFTM','teamFT%','teamORB','teamDRB','teamTRB','opptPTS', 'opptAST', 'opptTO','opptSTL', 'opptBLK','opptFGA',\n            'opptFGM', 'opptFG%', 'oppt2PA', 'oppt2PM', 'oppt2P%', 'oppt3PA', 'oppt3PM', 'oppt3P%',\n            'opptFTA', 'opptFTM', 'opptFT%', 'opptORB', 'opptDRB', 'opptTRB']]\n    \n    \n    df2.columns = ['team','opptPTS', 'opptAST', 'opptTO','opptSTL', 'opptBLK','opptFGA',\n            'opptFGM', 'opptFG%', 'oppt2PA', 'oppt2PM', 'oppt2P%', 'oppt3PA', 'oppt3PM', 'oppt3P%',\n            'opptFTA', 'opptFTM', 'opptFT%', 'opptORB', 'opptDRB', 'opptTRB','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA',\n           'teamFGM','teamFG%','team2PA','team2PM','team2P%','team3PA','team3PM','team3P%','teamFTA',\n           'teamFTM','teamFT%','teamORB','teamDRB','teamTRB']\n    \n    df3 =  pd.concat([df1, df2], ignore_index=True, sort=False)\n    \n    lista2.append(df3)\n\nparcial = pd.concat(lista2)\nparcial = parcial[['team','teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA','teamFGM','team2PA',\n               'team2PM','team3PA','team3PM','teamFTA','teamFTM','teamORB','teamDRB','teamTRB',\n                  'opptPTS','opptAST','opptTO','opptSTL','opptBLK','opptFGA','opptFGM','oppt2PA',\n               'oppt2PM','oppt3PA','oppt3PM','opptFTA','opptFTM','opptORB','opptDRB','opptTRB']]\n\nfinal = parcial.groupby(['team']).agg({'teamPTS': ['sum'],'teamAST': ['sum'],\n                                                  'teamTO': ['sum'],'teamSTL': ['sum'],\n                                                  'teamBLK': ['sum'],'teamFGA': ['sum'],\n                                                  'teamFGM': ['sum'],'team2PA': ['sum'],\n                                                  'team2PM': ['sum'],'team3PA': ['sum'],\n                                                  'team3PM': ['sum'],'teamFTA': ['sum'],\n                                                  'teamFTM': ['sum'],'teamORB': ['sum'],\n                                                  'teamDRB': ['sum'],'teamTRB': ['sum'],\n                                       'opptPTS': ['sum'],'opptAST': ['sum'],\n                                                  'opptTO': ['sum'],'opptSTL': ['sum'],\n                                                  'opptBLK': ['sum'],'opptFGA': ['sum'],\n                                                  'opptFGM': ['sum'],'oppt2PA': ['sum'],\n                                                  'oppt2PM': ['sum'],'oppt3PA': ['sum'],\n                                                  'oppt3PM': ['sum'],'opptFTA': ['sum'],\n                                                  'opptFTM': ['sum'],'opptORB': ['sum'],\n                                                  'opptDRB': ['sum'],'opptTRB': ['sum'],})\nfinal.columns = ['teamPTS','teamAST','teamTO','teamSTL','teamBLK','teamFGA','teamFGM','team2PA','team2PM',\n                 'team3PA','team3PM','teamFTA','teamFTM','teamORB','teamDRB','teamTRB',\n                'opptPTS','opptAST','opptTO','opptSTL','opptBLK','opptFGA','opptFGM','oppt2PA',\n                 'oppt2PM','oppt3PA','oppt3PM','opptFTA','opptFTM','opptORB','opptDRB','opptTRB']\n\nfinal = final.reset_index()\nfinal.shape","c817c9f0":"# Individuality Index\n# Ratio between shots made wihout assists and total shots made\nfinal['shots_eff'] = round(100*(final['teamFGM']\/final['teamFGA']),2)\n\n# Create list for desired columns \nfga = final['teamFGA']\npts = final['teamPTS']\neff = final['shots_eff']\n\n# Take \n\n# Set subplots sizes\nplt.subplots(figsize=(15, 5))\n\n# Subplot for Points and Assists\nplt.subplot(1, 2, 1)\nplt.scatter(fga, pts, color = 'mediumorchid')\nplt.xlabel('Shots Attempted')\nplt.ylabel('Points')\nplt.title('Points and Shots Attempteds')\n\n# Subplot for Points and Individuality Index\nplt.subplot(1, 2, 2)\nplt.scatter(eff, pts, color = 'mediumorchid')\nplt.xlabel('Shots Efficciency')\nplt.ylabel('Points')\nplt.title('Points and Shots Efficciency')\n\n# Plot for Points and Assists with Colormap for Individuality\nplt.figure(figsize=(8,5))\nplt.scatter(fga, pts, c=eff, cmap='spring')\nplt.colorbar(label='Shots Efficciency')\nplt.xlabel('Assists')\nplt.ylabel('Points')\nplt.title('Points Shots Attempteds')\n\nplt.show()","92040db1":"model = LinearRegression().fit(final['teamFGA'].values.reshape(-1,1), final['teamPTS'].values)\ny_pred = model.predict(final['teamFGA'].values.reshape(-1, 1))   # Predict\nplt.plot(final['teamFGA'].values, y_pred, color='red')\n\nplt.scatter(fga, pts, color = 'mediumorchid')\nplt.xlabel('Shots Attempteds')\nplt.ylabel('Points')\nplt.title('Points and Shots Attempteds')","313e7ad0":"x = final['teamFGA']\ny = final['teamPTS']\n\nx2 = sm.add_constant(x)\nest = sm.OLS(y, x2)\nest2 = est.fit()\nprint(est2.summary())","96d098a9":"model = LinearRegression().fit(final['shots_eff'].values.reshape(-1,1), final['teamPTS'].values)\ny_pred = model.predict(final['shots_eff'].values.reshape(-1, 1))   # Predict\nplt.plot(final['shots_eff'].values, y_pred, color='red')\n\nplt.scatter(eff, pts, color = 'mediumorchid')\nplt.xlabel('Shots Efficiency')\nplt.ylabel('Points')\nplt.title('Points and Shots Efficiency')","e54727f2":"x = final['shots_eff']\ny = final['teamPTS']\n\nx2 = sm.add_constant(x)\nest = sm.OLS(y, x2)\nest2 = est.fit()\nprint(est2.summary())","57f486be":"x = final[['teamFGA','shots_eff']]\ny = final['teamPTS']\n\n# with statsmodels\nx = sm.add_constant(x) # adding a constant\n \nmodel = sm.OLS(y, x).fit()\npredictions = model.predict(x) \n\nprint(model.summary())","bd2aef33":"# **Shots and Shots Efficiency**","cc75b230":"# **To be continued**\n\nI'll check if some conditions are satisfied.","da6c2254":"## **Multiple Linear Regression - Points, Shots Attempteds and Shots Efficiency**\n\nLooking individually, shots attempteds and shots effciency doesn't have a great impact in points. But maybe together these variables have a bigger impact in points. Let's check.","56b69de2":"### Points and Shots Efficiency","b35419e2":"# **Data**","dff92506":"When we look at the plot for points and shots attempteds we have the impression that maybe more shots attempteds led to more points. On another hand, when we look at the plot for points and shot efficiency it's not so clear that a great efficiency means more points.","aa953e53":"### Points and Shots Attempteds\n\nLet's make a linear regression and check the impact of shots attempteds (x) in points (y)","3e1f3531":"# **Sources**","382672c3":"The R-Squared seem pretty good. A higher R-Squared could mean an overfitting, while a lower R-Squared could mean a underfitting. The coeficients are statistically significant so let's keep with this model.","a4506a6a":"According to R-Squared shots efficiency doesn't have great impact in points scored.","d2eeb5da":"## **Linear Regression**","707e7c0c":"According to R-Squared shots attempteds doesn't have a great impact in points scored.","4858830e":"# **Introduction**\n\nIn this notebook I'll check the impact of field goals attempteds and field goal efficiency (ratio between field goals made and field goals attempted).\n\nThe data used starts in season 2000\/01 and ends in season 2018\/19, except for seasons 2011\/12 and 2012\/13. I'll also consider a team from a season as an unique team. For example, Lakers from 2002\/03 are a different team from Lakers from 2003\/04. In total, I'll look at 390 teams.\n\n**Work not Finished**","97ed9acc":"See Also:\n\nhttps:\/\/realpython.com\/linear-regression-in-python\/#simple-linear-regression\nhttps:\/\/datatofish.com\/multiple-linear-regression-python\/\nhttps:\/\/jeffmacaluso.github.io\/post\/LinearRegressionAssumptions\/\nhttps:\/\/towardsdatascience.com\/how-do-you-check-the-quality-of-your-regression-model-in-python-fa61759ff685"}}