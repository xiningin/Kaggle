{"cell_type":{"1b4466d1":"code","1d31fec0":"code","de551aec":"code","75c2c9f7":"code","5b2ab9fa":"code","1089cfd7":"code","6ca49a1d":"markdown","d2a63d96":"markdown","9470cd63":"markdown","43a64dc4":"markdown"},"source":{"1b4466d1":"!pip install nyaggle\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom nyaggle.experiment import run_experiment\n\n%matplotlib inline\n","1d31fec0":"'''\ntrain = pd.read_csv('\/kaggle\/input\/seti-breakthrough-listen\/train_labels.csv')\ntest = pd.read_csv('\/kaggle\/input\/seti-breakthrough-listen\/sample_submission.csv')\n\ndef get_file_path(image_id: str, train_or_test: str, data_dir: str = '\/kaggle\/input\/seti-breakthrough-listen\/') -> str:\n    return os.path.join(data_dir, train_or_test, image_id[0], f\"{image_id}.npy\")\n\ntrain['type'] = 'train'\ntest['type'] = 'test'\ndf = pd.concat([train, test]).reset_index(drop=True)\n\nmean = []\nstd = []\nminv = []\nmaxv = []\nnuniq = []\n\nfor i, row in tqdm(df.iterrows()):\n    arr = np.load(get_file_path(row.id, row.type))[[0,2,4],:,:].astype(float)\n    mean.append(np.mean(arr))\n    std.append(np.std(arr))\n    minv.append(np.min(arr))\n    maxv.append(np.max(arr))\n    nuniq.append(len(np.unique(arr)))\n    \ndf['mean'] = mean\ndf['std'] = std\ndf['min'] = minv\ndf['max'] = maxv\ndf['nuniq'] = nuniq\n\ndf.to_csv('seti-stats.csv', index=False)\n'''\n\ndf = pd.read_csv('..\/input\/setistats\/seti-stats.csv')\ndf.head()","de551aec":"fig, axes = plt.subplots(1, 2, figsize=(16,7))\n\naxes[0].set_xlim(-0.0001, 0.0001)\naxes[0].set_title('mean of image')\naxes[1].set_xlim(0.9998, 1.0002)\naxes[1].set_title('std of image')\n\nsns.distplot(df[df['target']==1]['mean'], label='target=1', ax=axes[0])\nsns.distplot(df[df['target']==0]['mean'], label='target=0', ax=axes[0])\n\nsns.distplot(df[df['target']==1]['std'], label='target=1', ax=axes[1])\nsns.distplot(df[df['target']==0]['std'], label='target=0', ax=axes[1])\n\nplt.legend()","75c2c9f7":"params = {\n    'objective': 'binary',\n    'metrics': 'auc',\n    'n_estimators': 300\n}\nfeatures = ['mean', 'std', 'min', 'max', 'nuniq']\n\nX_train = df[df['type'] == 'train'][features]\ny_train = df[df['type'] == 'train']['target']\nX_test = df[df['type'] == 'test'][features]\nresult = run_experiment(params, X_train, y_train, X_test, fit_params={'verbose': 50})","5b2ab9fa":"print(f'OOF SCORE: {result.metrics[-1]}')","1089cfd7":"# blend with LB.980 public kernel\n# https:\/\/www.kaggle.com\/xuxu1234\/lb-0-980-efficientnet-b0-more-epoch\nsubmission = pd.read_csv('..\/input\/public-lb0980-submission\/submission.csv')\nsubmission['target'] = result.test_prediction\nsubmission.to_csv('submission.csv', index=False)","6ca49a1d":"## Visualize basic statistics","d2a63d96":"A simple statistic alone was able to produce a CV=0.93. Perhaps the model for the participants at the top of the leaderboard implicitly takes advantage of this difference in data distribution.","9470cd63":"Images with target=0 appear to be normalized to mean 0 and variance 1, whereas **images with target=1 are clearly seen to have a positive bias in the mean and a larger variance.**\n\nPerhaps the host added the target signal to the image **after** normalizing the background noise. (Of course, to prevent leakage, the image should be normalized after the target signal is added.","43a64dc4":"## Modeling"}}