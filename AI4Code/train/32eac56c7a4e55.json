{"cell_type":{"3eee7f61":"code","468c0ed8":"code","1c01f97e":"code","0c6612ec":"code","e2daf214":"code","8ab41c25":"code","03970720":"code","51160e6f":"code","1653ad6c":"code","cce4b695":"code","163f43d6":"code","e85da193":"markdown","a4ce0599":"markdown","32558659":"markdown","bb478c41":"markdown","281e1d23":"markdown","2d69c969":"markdown","e4e34248":"markdown","e073a1b6":"markdown","8dcb723b":"markdown","9f629768":"markdown","4f755430":"markdown","eaf09836":"markdown"},"source":{"3eee7f61":"import numpy  as np\nimport pandas as pd\n\n# install datatable (without using the Internet)\n!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl > \/dev\/null\nimport datatable as dt\n\n# install TabNet 3.0.0\n!pip install  ..\/input\/officialpytorchtabnet\/pytorch_tabnet-3.0.0-py3-none-any.whl pytorch-tabnet  > \/dev\/null\nfrom pytorch_tabnet.tab_model import TabNetClassifier","468c0ed8":"train_data = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()","1c01f97e":"train_data = train_data.query('weight > 0').reset_index(drop = True)","0c6612ec":"train_data['action'] = ( (train_data['resp']) > 0 )*1","e2daf214":"all_features    = [i for i in range(0,130)]\ntrain_features  = [x+7 for x in all_features]\ntest_features   = [x+1 for x in all_features]","8ab41c25":"X_train = train_data.iloc[ : , train_features].fillna(0)","03970720":"X_train = X_train.to_numpy()\ny_train = train_data.loc[:, 'action'].to_numpy().squeeze()","51160e6f":"%%time\n\nclassifier = TabNetClassifier(verbose=1,seed=42)\n\nclassifier.fit(X_train=X_train, y_train=y_train,\n               patience=1,\n               max_epochs=2,\n               eval_metric=['auc'])","1653ad6c":"saved_filename = classifier.save_model('JaneStreet_TabNet_model')","cce4b695":"# classifier = TabNetClassifier()\n# classifier.load_model('..\/input\/your_training_notebook\/JaneStreet_TabNet_model.zip')","163f43d6":"import janestreet\nenv = janestreet.make_env() \niter_test = env.iter_test()\n\nfor (test_df, sample_prediction_df) in iter_test:\n    test_weight = test_df.iloc[0].weight\n    if test_weight > 0:\n        X_test = (test_df.iloc[:, test_features ].fillna(0)).to_numpy()\n        proba = classifier.predict_proba(X_test)[:,1]\n        sample_prediction_df.action = 1 if proba > 0.5 else 0\n    else:\n        sample_prediction_df.action = 0\n    env.predict(sample_prediction_df)","e85da193":"### Make our `X_train` and `y_train`","a4ce0599":"### Run the model on the test data","32558659":"### Create our `action`","bb478c41":"### Train TabNet\nWe only use 2 epochs as a demonstration. Serious training takes quite some time.","281e1d23":"The following would be the main content of the scoring notebook, where we read back in the saved trained model and create our `submission.csv`:\n### Read in the saved TabNet model\n(Here commented out as this is an *all-in-one* notebook)","2d69c969":"### Do something about the missing values\nHere we shall simply fill them with zeros","e4e34248":"# Related links\n* [Sercan O. Arik and Tomas Pfister \"TabNet: Attentive Interpretable Tabular Learning\", arXiv:1908.07442 (2019)](https:\/\/arxiv.org\/pdf\/1908.07442.pdf)\n* [TabNet on AI Platform: High-performance, Explainable Tabular Learning](https:\/\/cloud.google.com\/blog\/products\/ai-machine-learning\/ml-model-tabnet-is-easy-to-use-on-cloud-ai-platform) (Google Cloud)\n* [pytorch-tabnet](https:\/\/github.com\/dreamquark-ai\/tabnet) (GitHub)","e073a1b6":"### Use all 130 features","8dcb723b":"### Data cleaning\nDrop the rows that have zero `weight`","9f629768":"### Read in the training data\nThe `train.csv` is large (5.77G) so we shall use [datatable](https:\/\/datatable.readthedocs.io\/en\/latest\/) to speed things up:","4f755430":"# TabNet: A neural network designed for tabular data\n\n[TabNet](https:\/\/arxiv.org\/pdf\/1908.07442.pdf) brings deep learning to tabular data. TabNet has been developed by researchers at Google Cloud AI and achieves SOTA performance on a number of test cases.\nThis notebook is a simple example of performing a binary classification using the [pyTorch implementation](https:\/\/pypi.org\/project\/pytorch-tabnet\/) for the kaggle [Jane Street Market Prediction](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction) competition.\n\n**Note:** Version 3.0.0 of pyTorch TabNet has just been released, and can be installed on kaggle with the internet turned off (essential for this competition) via the following dataset:\n[Official version of pytorch-tabnet release](https:\/\/www.kaggle.com\/optimo\/officialpytorchtabnet).","eaf09836":"### Save our trained TabNet model\nAs mentioned, training may take some time, so this would be the natural end of the training notebook."}}