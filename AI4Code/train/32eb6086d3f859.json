{"cell_type":{"ecb3a41d":"code","ec44ad31":"code","8a98e777":"code","9334e61b":"code","317c5a47":"code","ad8bcd31":"code","5f03a38e":"code","3a4ed2cd":"code","7270638f":"code","186686d9":"code","79381cef":"code","4244f918":"code","690f7eea":"code","25a99973":"code","9b3af4d0":"code","d4adb8e8":"markdown","e2d1c3f0":"markdown","591edad2":"markdown","024ed6a0":"markdown","2e38a7e3":"markdown","ea4b24d0":"markdown"},"source":{"ecb3a41d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec44ad31":"d = pd.read_csv(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv\")","8a98e777":"d","9334e61b":"img_path = \"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"","317c5a47":"import json\n\nwith open(\"\/kaggle\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\") as f:\n    data = json.load(f)\nprint(data)","ad8bcd31":"from PIL import Image \nfor i in d.head():\n    img = Image.open(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/1235188286.jpg\") \n    img.show() ","5f03a38e":"import matplotlib.image as mpimg \nimport matplotlib.pyplot as plt \nplt.figure(figsize=(8,5))\nfor ind in d.head().index:\n    #plt.subplot(231)\n    img = mpimg.imread(img_path + str(d[\"image_id\"][ind]))\n    plt.imshow(img)\n    plt.show()    ","3a4ed2cd":"import seaborn as sns\nsns.countplot(d[\"label\"])","7270638f":"# For image augmentation when class_mode is categorical, y_col must be string\/tuple\/list.\nd[\"label\"] = d[\"label\"].astype(str)","186686d9":"# Split dataset for training and validation part.\nfrom sklearn.model_selection import train_test_split\n\ntrain,val = train_test_split(d, test_size = 0.2)\n","79381cef":"#Image Augmentation\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Mostly we use augmentaion only for training dataset.\ntrain_datagen = ImageDataGenerator(width_shift_range=0.3,\n                                   height_shift_range=0.3,\n                                   cval = 0.,\n                                   #rotation_range=35,\n                                   #rescale=1.\/255,\n                                   shear_range=0.3,\n                                   zoom_range=0.3,\n                                   horizontal_flip=True)\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(train,\n                                                    directory = img_path,\n                                                    x_col = \"image_id\",\n                                                    y_col = \"label\",\n                                                    target_size=(128, 128),\n                                                    batch_size = 64,\n                                                    class_mode = \"categorical\")\n\nvalidation_generator = validation_datagen.flow_from_dataframe(val,\n                                                        directory = img_path,\n                                                        x_col = \"image_id\",\n                                                        y_col = \"label\",\n                                                        target_size=(128, 128),\n                                                        batch_size=64,\n                                                        class_mode = \"categorical\")\n","4244f918":"#import important library\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","690f7eea":"#Building very simple Convolution Network\ndef create_model():\n    sequential_model = keras.Sequential(\n    [\n        keras.Input(shape=(250, 250, 3)),\n        #First Convolution layer\n        layers.Conv2D(32, (3,3), strides=2, activation=\"relu\"),\n        #second Convolution layer\n        layers.Conv2D(64, (3,3), activation=\"relu\"),\n        #third convolution layer\n        layers.Conv2D(64, (3,3), activation=\"relu\"),\n    ])\n    sequential_model.compile()\n    return sequential_model\n","25a99973":"model = create_model()","9b3af4d0":"#Checking summary of model\nmodel.summary()","d4adb8e8":"# Image Augmentation\n","e2d1c3f0":"# Load Images","591edad2":"# Checking types of disease and what are their label","024ed6a0":"# Check count of each label","2e38a7e3":"|For deep learning models we need large amount of data. With the help of image augmentation we can expand the size of training dataset and can variety of already existing images. For this we will be using ImageDataGenerator from deep learning library keras. There are bunch of techniques for image augmentation.\n* By using Horizontal flip,\n* Vertical Flip,\n* Width Shift,\n* Height Shift,\n* Rotation Augmentation,\n* Zoom Augmentation.\n","ea4b24d0":"# Building Model"}}