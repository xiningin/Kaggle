{"cell_type":{"bf6c1539":"code","763e2924":"code","f54c6f09":"code","1df185e9":"code","adf465e9":"code","38b5cde0":"code","8888717f":"code","b1e9e397":"code","df2aa1ee":"code","5180cceb":"code","e3da26ca":"code","0895e855":"code","06e27857":"code","4bab5051":"code","f4aff79b":"code","2717a944":"code","07aea420":"code","8eca1828":"code","13848c5a":"code","c224b6e6":"code","f9233c6b":"code","48030070":"code","7534195e":"code","802e7bf3":"code","966a18db":"code","370e40d8":"code","de05625c":"code","09998aaa":"code","96b629c0":"code","3c4959aa":"code","4a195083":"code","898b364f":"markdown","6b4d012f":"markdown","52c61e6f":"markdown","98a02c70":"markdown","5251f7a8":"markdown","0fa17c54":"markdown","a5337ecd":"markdown","4e7b2f1a":"markdown","9c2d2e41":"markdown","c411d71f":"markdown","b766c51c":"markdown","ce7b5cc3":"markdown","d9abe3cf":"markdown","51361215":"markdown","6db11cb4":"markdown","176c07a3":"markdown","b6b07fa7":"markdown","74c4f51f":"markdown","8f5d762b":"markdown","6f43b272":"markdown","30ccca44":"markdown","0a447e55":"markdown","d3f9c721":"markdown","23abb963":"markdown","f2e71358":"markdown","c5db1ef8":"markdown","c508940c":"markdown","bf81cbd9":"markdown","490b64cb":"markdown","41595578":"markdown","ce3cf8e1":"markdown","4186239a":"markdown","66997849":"markdown"},"source":{"bf6c1539":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","763e2924":"df = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","f54c6f09":"df.columns","1df185e9":"df.head()","adf465e9":"df.describe()","38b5cde0":"df.info()","8888717f":"def bar_plot(variable):\n    \n    \n    \n    var = df[variable]\n    var_value = var.value_counts()\n    \n    #visualize\n    \n    plt.figure(figsize = (10,3))\n    plt.bar(var_value.index, var_value)\n    plt.xticks(var_value.index)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{} \\n {}\".format(variable,var_value))","b1e9e397":"categorical_cols = ['sex','cp','fbs','restecg','exang','slope','ca','thal','target']\nfor i in categorical_cols:\n    bar_plot(i)","df2aa1ee":"def plot_hist(variable):\n    \"\"\"\n    age, trestbps, chol, thalach, oldpeak\n    \n    \"\"\"\n    \n    var = df[variable]\n    \n    #visualize\n    plt.figure(figsize = (10,3))\n    plt.hist(var,bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with histogram\".format(variable))\n    plt.show()","5180cceb":"numerical = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\nfor i in numerical:\n    plot_hist(i)","e3da26ca":"df[[\"sex\",\"target\"]].groupby([\"sex\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","0895e855":"df[[\"cp\",\"target\"]].groupby([\"cp\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","06e27857":"df[[\"fbs\",\"target\"]].groupby([\"fbs\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","4bab5051":"df[[\"restecg\",\"target\"]].groupby([\"restecg\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","f4aff79b":"df[[\"exang\",\"target\"]].groupby([\"exang\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","2717a944":"df[[\"slope\",\"target\"]].groupby([\"slope\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","07aea420":"df[[\"ca\",\"target\"]].groupby([\"ca\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","8eca1828":"df[[\"thal\",\"target\"]].groupby([\"thal\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","13848c5a":"df[[\"sex\",\"target\",\"cp\"]].groupby([\"sex\",\"cp\"], as_index = False).mean().sort_values(by = 'target', ascending = False)","c224b6e6":"def detect_outliers(data,features):\n    outlier_indices = []\n    for i in features:\n        #1st quartile\n        Q1 = np.percentile(data[i],25)\n        #3rd quartile\n        Q3 = np.percentile(data[i],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier step\n        outlier_step = IQR * 1.5\n        #detect outlier and their indices\n        outlier_list_cols = data[(data[i] <  Q1 - outlier_step) | (data[i] >  Q3 + outlier_step)].index\n        \n        #store indices\n        \n        outlier_indices.extend(outlier_list_cols)\n        \n    \n    outlier_indices = Counter(outlier_indices)\n    \n    multiple_outliers = list(c for c,k in outlier_indices.items() if k>2)\n    \n    return multiple_outliers\n        \n        ","f9233c6b":"df.loc[detect_outliers(df,[\"age\",\"trestbps\",\"chol\",\"thalach\",\"oldpeak\"])]","48030070":"df.columns[df.isnull().any()]","7534195e":"plt.subplots(figsize = (15,15))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')\nplt.show()","802e7bf3":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='cp',y='target',data=df)\nplt.show()","966a18db":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='slope',y='target',data=df)\nplt.show()","370e40d8":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.boxplot(data=df,x='target',y='thalach')\nplt.show()","de05625c":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='sex',y='target',data=df)\nplt.show()","09998aaa":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='exang',y='target',data=df)\nplt.show()","96b629c0":"ax = sns.FacetGrid(df, col=\"target\", size=5)\nax.map(sns.distplot, 'oldpeak',bins=10)\nplt.show()","3c4959aa":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='ca',y='target',data=df)\nplt.show()","4a195083":"f,ax = plt.subplots(figsize = (10,10))\nax = sns.barplot(x='thal',y='target',data=df)\nplt.show()","898b364f":"* 0 and 4 ca values means more likely to have heart disease\n* 1,2,3 ca values means less likely to have heart disease","6b4d012f":"<a id = '1'><\/a><br>\n# Load and Check Data","52c61e6f":"<a id = '3'><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable Analysis : sex, cp, fbs, restecg, exang, slope, ca, thal, target\n* Numerical Variable Analysis : age, trestbps, chol, thalach, oldpeak","98a02c70":"* Females are more likely to have heart disease","5251f7a8":"<a id = '14'><\/a><br>\n## Target -- sex","0fa17c54":"<a id = '13'><\/a><br>\n## Target -- thalach","a5337ecd":"<a id = '11'><\/a><br>\n## Target -- cp","4e7b2f1a":"<a id = '16'><\/a><br>\n## Target -- oldpeak","9c2d2e41":"* People who do NOT have exercise induced angina (exang=0) are more likely to have heart disease","c411d71f":"<a id = '15'><\/a><br>\n## Target -- exang","b766c51c":"* People who have heart disease also have more thalach value","ce7b5cc3":"* oldpeak <=1.2 has high rate of having heart disease\n* highest (2) oldpeak people dont have heart disease","d9abe3cf":"# INTRODUCTION\n<font color = 'blue'>\nContent\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n1. [Visualization](#9)\n    * [Correlation Map](#10)\n    * [Target -- cp](#11)\n    * [Target -- slope](#12)\n    * [Target -- thalach](#13)\n    * [Target -- sex](#14)\n    * [Target -- exang](#15)\n    * [Target -- oldpeak](#16)\n    * [Target -- ca](#17)\n    * [Target -- thal](#18)","51361215":"* Negative Correlated Features: \n    *  target--age, target--sex, target--exang, age--oldpeak, target--ca, target--thal \n\n\n* Positive Correlated Features: \n     * target--cp, target--thalach, target--slope","6db11cb4":"<a id = '17'><\/a><br>\n## Target -- ca","176c07a3":"<a id = '6'><\/a><br>\n# Basic Data Analysis\n* sex vs target\n* cp vs target\n* fbs vs target\n* restecg vs target\n* exang vs target\n* slope vs target\n* ca vs target\n* thal vs target","b6b07fa7":"<a id = '10'><\/a><br>\n## Correlation Map","74c4f51f":"<a id = '5'><\/a><br>\n## Numerical Variable","8f5d762b":"* Having 2 slope value means more likely to have heart disease","6f43b272":"# **TO BE CONTINUED**","30ccca44":"<a id = '9'><\/a><br>\n# Visualization","0a447e55":"<a id = '7'><\/a><br>\n# Outlier Detection","d3f9c721":"There are no outlier entries.","23abb963":"<a id = '12'><\/a><br>\n## Target -- slope","f2e71358":"We do not have any null entries.","c5db1ef8":"<a id = '8'><\/a><br>\n# Missing Value","c508940c":"<a id = '2'><\/a><br>\n# Variable Description\n\n1. age : Age of patient\n2. sex : Gender of patient 1:Male, 0:Female\n3. cp : Chest Pain Type\n4. trestbps : resting blood pressure\n5. chol : serum cholestoral in mg\/dl\n6. fbs : fasting blood sugar > 120 mg\/dl\n7. restecg : resting electrocardiographic results (values 0,1,2)\n8. thalach : maximum heart rate achieved\n9. exang : exercise induced angina\n10. oldpeak : ST depression induced by exercise relative to rest\n11. slope : the slope of the peak exercise ST segment\n12. ca : number of major vessels (0-3) colored by flourosopy\n13. thal : thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n14. target : Have heart disease(1) or not(0)\n","bf81cbd9":"No missing values for this data.","490b64cb":"* Having 0 type cp means less likely to have heart disease\n* Having 1,2,3 cp means more likely to have heart disease\n* We can use cp feature to model training","41595578":"* thal value 2 ==> more likely to have heart disease","ce3cf8e1":"* float(1) : oldpeak\n* int(13) : age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, slope, ca, thal, target","4186239a":"<a id = '18'><\/a><br>\n## Target -- thal","66997849":"<a id = '4'><\/a><br>\n## Categorical Variable"}}