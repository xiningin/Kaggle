{"cell_type":{"83d50a78":"code","2f0aa3bf":"code","5265f310":"code","ff494a9d":"code","63ebcdc8":"code","f902e145":"code","63226ff9":"code","1f6e5434":"code","25462eca":"code","3c6a2ccc":"code","8c2dd667":"code","150e5277":"code","1115f683":"code","49e4524f":"code","6a08aa4e":"code","f9860b34":"code","fded41e5":"code","ce501e2f":"code","4a82a51a":"code","6c4a84d6":"code","1fe9a3b5":"code","6673b5d5":"code","db09b804":"code","1e95e374":"code","e2af1702":"code","aafb69fa":"code","68d41fe7":"code","e7838349":"code","73e13c05":"code","361a4e5a":"code","9b9143e7":"code","86816d41":"code","10644c39":"code","83de72cc":"code","b047aa7c":"code","4412574b":"code","279cdcd5":"markdown","f4f74f77":"markdown","b497e13e":"markdown","25e94d72":"markdown","866bfd31":"markdown","75fd9472":"markdown","08d6d474":"markdown","5fc768f7":"markdown","744a65d8":"markdown","b2b03f47":"markdown","804fc59c":"markdown","9ecb78a7":"markdown","274978e3":"markdown","33229f20":"markdown"},"source":{"83d50a78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output. ","2f0aa3bf":"!pwd\n!ls","5265f310":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt","ff494a9d":"df=pd.read_csv('\/kaggle\/input\/peace-agreements-dataset\/pax_20_02_2018_1_CSV.csv')\nprint(df.shape)\nprint('')\nprint(df.dtypes.value_counts())\ndf.sample(30)","63ebcdc8":"df.ImSrc.value_counts()","f902e145":"df.columns.tolist() # using tolist to display all columns","63226ff9":"df.iloc[:,0:20].sample()\n# df[['Stage', 'StageSub', 'Part', 'ThrdPart', 'OthAgr', 'GCh', 'GChRhet', 'GChAntid', 'GChSubs', 'GChOth', 'GDis']]","1f6e5434":"df.info()","25462eca":"df.Con.unique()","3c6a2ccc":"df.Con.value_counts() #158 different countries","8c2dd667":"df.Contp.value_counts()","150e5277":"df.Reg.value_counts()","1115f683":"df.Status.value_counts()","49e4524f":"df.Stage.value_counts()","6a08aa4e":"df.StageSub.value_counts()","f9860b34":"df[df.Con == 'Bosnia and Herzegovina\/Yugoslavia (former)']","fded41e5":"df.Con.isin(['China','Palestine','Iran','Sri Lanka','USA','America'])","ce501e2f":"df.isna().sum().tolist()","4a82a51a":"df.iloc[:,10:14]","6c4a84d6":"df.index[12]","1fe9a3b5":"print(df.Dat.min())\nprint(df.Dat.max())","6673b5d5":"df.Dat.dtypes","db09b804":"df.Dat=pd.to_datetime(df.Dat)","1e95e374":"df.Dat.dtypes","e2af1702":"df.info()","aafb69fa":"df.dtypes.unique()","68d41fe7":"print(df.Dat.min())\nprint(df.Dat.max())","e7838349":"df['month']=df['Dat'].dt.year","73e13c05":"df.month","361a4e5a":"df = df.rename(columns={'month' : 'year'})","9b9143e7":"# df.groupby(['year'])\n# df.groupby(['Animal']).mean()\n# df.year.sort_values().unique() # useless, we dont need the series YEAR sorted, we know 1990 is the min value and 2015 is max.\ndf.year.sort_values().value_counts() #sorting by value_counts\n# df.year(sort=True).value_counts()","86816d41":"df.year.groupby(['year']).count()","10644c39":"df.groupby('year').year.value_counts() # only YEAR\n# df.groupby('year').sum() # ALL columns","83de72cc":"df.groupby(df[\"year\"]).count().plot(kind=\"bar\") # this is using the newly created YEAR column directly\n# df.groupby(df[\"Dat\"].dt.year).count().plot(kind=\"bar\") # this uses the datetime column 'Dat' and extracts YEAR from it.","b047aa7c":"(df.groupby('year').year.value_counts()).plot(kind='bar')\nplt.show()","4412574b":"df.plot.bar(x=df.year, rot=0)","279cdcd5":"At first glance, we can assume we're dealing with some categorical fields. Countries, continents, territories. And some kind of 'Status' ","f4f74f77":"What is the timeframe of our dataset?","b497e13e":"Can we deduce anything from the column names?","25e94d72":"Doesn't look right, since we can see dates outside of this timeframe with our sampled data displayed above. Let's investigate further.","866bfd31":"**Exploring Your Dataset**","75fd9472":"We've named the year column incorrectly as 'month', let's correct it:","08d6d474":"There are 240 columns. Way too many to manually skim through. Let's try something else.","5fc768f7":"Let's graph this.","744a65d8":"The last column is probably our Target. Let's check how balanced it is.a","b2b03f47":":) \n\nBadly proportioned plot, let's try to fix it:","804fc59c":"Figuring out where the Kaggle Dataset is. Default code provided by Kaggle below:","9ecb78a7":"1518? This means ALL values are 1 for our presumed Target column. What's going on with this dataset? Let's explore.","274978e3":"Great, we've loaded in the basic libraries, let's get out Target and start the modelling process.","33229f20":"Since our dataset only has 1518 rows, we would incur too much of a dataloss to delete all the 734 nulls (almost 50%). So we'll be keeping it for now."}}