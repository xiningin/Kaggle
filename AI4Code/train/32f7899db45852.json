{"cell_type":{"28b571e8":"code","f3785d99":"code","38842303":"code","397b6d2b":"code","cd5a4518":"code","2b9b49f2":"code","116a4a3a":"code","95124127":"code","cdc8f345":"code","60d22d0c":"code","6033251f":"code","d39eb755":"code","fdeb1cc6":"code","afc26862":"code","d9c902fb":"code","84ee9626":"code","c8618039":"code","7a0b4094":"code","ce2c9243":"code","15ad2dc3":"code","67f6e661":"code","e9ade043":"code","2c65113f":"code","0e1bdea1":"code","0c9138e3":"code","10b14427":"code","e069fe85":"code","a08e75d7":"code","9b3a88fc":"markdown","5e4a56bf":"markdown","fe070b35":"markdown","a3ec0ba3":"markdown","cbe7d5bb":"markdown","bc130df0":"markdown","95b55fba":"markdown","b64bc913":"markdown","abaa8a94":"markdown","cb384d90":"markdown","43b986f2":"markdown","982606ce":"markdown","95d015ce":"markdown","f2fa39f1":"markdown","15ae634d":"markdown","4e851edc":"markdown","3fefc5d7":"markdown","e2f69f33":"markdown","8bcb8d08":"markdown"},"source":{"28b571e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3785d99":"cars = pd.read_csv('..\/input\/cars-germany\/autoscout24-germany-dataset.csv')\n\ncars","38842303":"cars.head()","397b6d2b":"cars.isna().sum()","cd5a4518":"cars.drop(['make', 'model', 'fuel', 'gear'], axis=1, inplace=True)\n\ncars","2b9b49f2":"cars = pd.get_dummies(cars, columns=['offerType'])\n\ncars","116a4a3a":"cars.drop('offerType_Demonstration', axis=1, inplace=True)\n\ncars","95124127":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\n\ncars['hp'] = imp.fit_transform(cars['hp'].values.reshape(-1,1))\n\ncars","cdc8f345":"cars.isna().sum()","60d22d0c":"cars.describe()","6033251f":"import datetime\n\ncars['age'] = datetime.datetime.now().year - cars['year']\n\ncars.drop('year', axis=1, inplace=True)\n\ncars","d39eb755":"from sklearn import preprocessing\n\ncols = ['mileage','hp','age']\n\ncars[cols] = preprocessing.scale(cars[cols])\n\ncars","fdeb1cc6":"import seaborn as sns\nsns.scatterplot(x=cars['mileage'], y=cars['price'])#Inverse Exponential","afc26862":"sns.scatterplot(x=cars['age'], y=cars['price']) #Decreasing","d9c902fb":"sns.scatterplot(x=cars['hp'], y=cars['price']) #Exponential","84ee9626":"cars['price'] = cars['price'].map(lambda p: np.log(p))\n\ncars","c8618039":"sns.scatterplot(x=cars['hp'], y=cars['price']) #Has now become a Linear Reg! Positive Correlation","7a0b4094":"sns.scatterplot(x=cars['age'], y=cars['price']) #Now Linear Reg Decreasing","ce2c9243":"sns.scatterplot(x=cars['mileage'], y=cars['price']) #Negative Correlation","15ad2dc3":"outlier_index = cars.loc[cars['mileage'] > 9].index\n\nprint(outlier_index)\n\ncars.drop(outlier_index, axis=0, inplace=True)\n\ncars","67f6e661":"#Reset the index\n\ncars = cars.reset_index(drop=True)\n\ncars","e9ade043":"cars.to_csv('germany_cars_processed.csv')","2c65113f":"from sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso, Ridge, ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","0e1bdea1":"from sklearn.metrics import r2_score\n\ndef train_and_evaluate_model(model_fn, X, y):\n    x_train, x_test, y_train, y_test = train_test_split(\n        X,y,test_size=0.2, random_state=0\n    )\n    \n    model = model_fn(x_train, y_train)\n    \n    y_pred = model.predict(x_test)\n    \n    #Adjsuted R2\n    score = 1 - ((1-r2_score(y_test, y_pred))*(len(y_test)-1))\/(len(y_test) - (x_test.shape[1] + 1))\n    \n    return score","0c9138e3":"def lin_reg(x_train, y_train):\n    model = LinearRegression(normalize=True).fit(x_train, y_train)\n    return model\n\ndef ridge_reg(x_train, y_train, alpha=0.5, normalize=True):\n    model = Ridge(alpha=alpha, normalize=True).fit(x_train, y_train)\n    return model\n\ndef lasso_reg(x_train, y_train, alpha=0.5):\n    model = Lasso(alpha=alpha).fit(x_train, y_train)\n    return model\n\ndef en_reg(x_train, y_train, alpha=0.5, l1_ratio=0.5, normalize=True, max_iter=100000, warm_start=True):\n    model = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, normalize=normalize, max_iter=max_iter, warm_start=warm_start)\n    model.fit(x_train, y_train)\n    return model\n\ndef knn_reg(x_train, y_train, n_neighbors=5):\n    model = KNeighborsRegressor(n_neighbors=n_neighbors)\n    model.fit(x_train, y_train)\n    return model\n\ndef svr_reg(x_train, y_train, kernel='linear', epsilon=0.05, C=0.3):\n    model=SVR(kernel=kernel, epsilon=epsilon, C=C)\n    model.fit(x_train,y_train)\n    return model\n\ndef dt_reg(x_train, y_train):\n    model=DecisionTreeRegressor()\n    model.fit(x_train,y_train)\n    return model\n\ndef rf_reg(x_train, y_train):\n    model = RandomForestRegressor()\n    model.fit(x_train, y_train)\n    return model\n\ndef xgb_reg(x_train, y_train):\n    model = XGBRegressor()\n    model.fit(x_train, y_train)\n    return model","10b14427":"results_dict = {}\n\nX = cars.drop('price', axis=1)\ny = cars['price']\n\nresults_dict['linear'] = train_and_evaluate_model(lin_reg, X, y)\nresults_dict['ridge'] = train_and_evaluate_model(ridge_reg, X, y)\nresults_dict['lasso'] = train_and_evaluate_model(lasso_reg, X, y)\nresults_dict['elasticnet'] = train_and_evaluate_model(en_reg, X, y)\nresults_dict['knn'] = train_and_evaluate_model(knn_reg, X, y)\nresults_dict['svr'] = train_and_evaluate_model(svr_reg, X, y)\nresults_dict['dt'] = train_and_evaluate_model(dt_reg, X, y)\nresults_dict['rf'] = train_and_evaluate_model(rf_reg, X, y)\nresults_dict['xgb'] = train_and_evaluate_model(xgb_reg, X, y)\n\nfor model, score in results_dict.items():\n    print(\"{}: {}\".format(model, score))","e069fe85":"results_dict['elasticnet'] = train_and_evaluate_model(en_reg, X, y)\n\nfor model, score in results_dict.items():\n    print(\"{}: {}\".format(model, score))","a08e75d7":"#XGB implementation predicting price\n\nX = cars.drop('price', axis=1)\ny = cars['price']\n\nx_train, x_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=0\n)\n\nx_train, x_valid, y_train, y_valid = train_test_split(\n    x_train, y_train, test_size=0.1, random_state=0\n)\n    \nmodel = XGBRegressor(n_estimators=500, learning_rate=0.02, \n                    objective='reg:squarederror', max_depth=10,\n                    )\n\nmodel.fit(x_train, y_train,\n         early_stopping_rounds=5,\n         eval_set=[(x_valid, y_valid)],\n         verbose=False)\n\ny_pred = model.predict(x_test)\n\nscore = 1 - ((1-r2_score(y_test, y_pred))*(len(y_test)-1))\/(len(y_test) - (x_test.shape[1] + 1))\n\nprint(model.score(x_train, y_train))\nprint(score)","9b3a88fc":"We now have no empty entires. Now, a more significant way to represent the car is its age than when it was created. We do this with the datetime library in python","5e4a56bf":"To prevent the dummy trap we then remove one category. We can delete the offerType_Demonstration column","fe070b35":"It seems that the price is related in a polynomial way. To faciliate a linear regression, we transform the price to log(price)","a3ec0ba3":"<h1>Data Analysis<\/h1>","cbe7d5bb":"First we look into the data itself and see our basic observations","bc130df0":"We see that XGB has the best prediction power!","95b55fba":"<h1>Price Prediction<\/h1>","b64bc913":"We create helper functions to evaluate what we can use to predict","abaa8a94":"We now don't have anymore empty entires? Let's see with .describe()","cb384d90":"Next we can now impute hp with SimpleImputer","43b986f2":"We see that there are empty entries. Before we do Imputation of the hp, we see that model, make, fuel, and gear doesn't really matter so we can delete them. We also would need to do .describe() to see some null values that are represented in another way.","982606ce":"Lets check if there are any empty entries","95d015ce":"We can delete the outliers on the mileage to make a more general pattern","f2fa39f1":"Let's see the relationships between these features with the price","15ae634d":"This is now our processed csv. We put this in a .csv file to save our progress","4e851edc":"Now the only thing we need to do is scale it. We do that with preprocessing.scale. We do this on the non categorical variables and price.","3fefc5d7":"From now on here, we have the builder functions for each of the models and at the end","e2f69f33":"Before we go futher, we should one-hot-encode the offertype for the model.","8bcb8d08":"We see that we have a model that has a 91% R^2 Score"}}