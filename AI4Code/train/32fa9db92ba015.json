{"cell_type":{"f1e932f0":"code","c8e42039":"code","2e650ec5":"code","d7abfb6a":"code","7caf8845":"code","01dfbbeb":"code","ac813fbe":"markdown","6203a6fe":"markdown","8592ceb2":"markdown","8261a6a8":"markdown","a0fdb104":"markdown"},"source":{"f1e932f0":"import os\nfrom os.path import isdir, join\nfrom pathlib import Path\nimport pandas as pd\nimport wave\n\n# Math\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom scipy import signal\nfrom scipy.io import wavfile\nimport librosa\nimport cv2\n\nfrom sklearn.decomposition import PCA\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport IPython.display as ipd\nimport librosa.display\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport pandas as pd\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","c8e42039":"sample_rate, sample = wavfile.read('..\/input\/birdsong-resampled-train-audio-00\/aldfly\/XC134874.wav')","2e650ec5":"def log_specgram(audio, sample_rate, window_size=20,\n                 step_size=10, eps=1e-10):\n    nperseg = int(round(window_size * sample_rate \/ 1e3))\n    noverlap = int(round(step_size * sample_rate \/ 1e3))\n    freqs, times, spec = signal.spectrogram(audio,\n                                    fs=sample_rate,\n                                    window='hann',\n                                    nperseg=nperseg,\n                                    noverlap=noverlap,\n                                    detrend=False)\n    return freqs, times, np.log(spec.T.astype(np.float32) + eps)\n\ndef plot_raw_wave(samples):\n    plt.figure(figsize=(10, 3))\n    plt.title('Audio wave')\n    plt.ylabel('Amplitude')\n    # ax1.plot(np.linspace(0, sample_rate\/len(samples1), sample_rate), samples1)\n    plt.plot(samples)\n    plt.show()\n","d7abfb6a":"plot_raw_wave(sample)\nipd.Audio(sample, rate=sample_rate)\n","7caf8845":"S = librosa.feature.melspectrogram(sample.astype(float), sr=sample_rate, n_mels=128)\n\n# Convert to log scale (dB). We'll use the peak power (max) as reference.\nlog_S = librosa.power_to_db(S, ref=np.max)\n\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(log_S, sr=sample_rate, x_axis='time', y_axis='mel')\nplt.title('Mel power spectrogram ')\nplt.colorbar(format='%+02.0f dB')\nplt.tight_layout()","01dfbbeb":"freqs, times, spectrogram = log_specgram(sample, sample_rate)\ndata = [go.Surface(z=spectrogram.T)]\nlayout = go.Layout(\n    title='Specgtogram 3d',\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","ac813fbe":"## As you can see the yellow color denotes to high amplitute and blue colour denotes low amplitute\n![image.png](attachment:image.png)","6203a6fe":"### <center>How do you read a spectrogram?\n\nSpectrograms are basically two-dimensional graphs, with a third dimension represented by colors.  \n<br>horizontal axis (x)= Time. \n<br>vertical axis (y) =frequency\n<br>\n<br>The amplitude (or energy or \u201cloudness\u201d) of a particular frequency at a particular time is represented by the third dimension, color, with dark blues corresponding to low amplitudes and brighter colors up through red corresponding to  stronger (or louder) amplitudes.\n\n![image.png](attachment:image.png)","8592ceb2":"#  <center> 3D Spectogram \n<center>A spectrogram is a visual representation of the spectrum of frequencies of a signal as it varies with time <\/center>","8261a6a8":"For many people Audio competition is quite different and new type of challenge. But don't give up and keep Learning.\n### <br><center>Anyway you always have birds support \n![image.png](attachment:image.png)","a0fdb104":"## Let's understand with 3D Spectogram \nMaking the amplitute pop out "}}