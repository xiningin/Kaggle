{"cell_type":{"48442d11":"code","13161da0":"code","4501ab62":"code","6e6b64e5":"code","072c13c1":"code","cbd2c05e":"code","aaf934ac":"code","e439703d":"code","447608ff":"code","8726d7ad":"code","4dd91575":"code","dcdca6c6":"code","7af2003b":"code","becec0d9":"code","100fefdf":"code","bd4a56b2":"code","b650342a":"code","6631679b":"code","bb85bf13":"code","8cf6a0cd":"code","c2efe428":"code","fa72de38":"code","8ec538f3":"code","d14fd48c":"code","d239481b":"markdown","2713792f":"markdown","64781ccb":"markdown","8dbce812":"markdown","780a427e":"markdown","a646619c":"markdown"},"source":{"48442d11":"SEED_VALUE = 42\n\nimport random\nrandom.seed(SEED_VALUE)\nimport numpy as np\nnp.random.seed(SEED_VALUE)\nimport tensorflow as tf\ntf.random.set_seed(SEED_VALUE)\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint(tf.__version__)\nprint(keras.__version__)","13161da0":"IMAGE_PATH = '..\/input\/german-traffic-sign-recognition-benchmark-cropped\/gtsrb-preprocessed\/'\nMETA_PATH = '..\/input\/gtsrb-german-traffic-sign\/'\n\nimport os\nprint(os.listdir(IMAGE_PATH))\nprint(os.listdir(META_PATH))","4501ab62":"df_train = pd.read_csv(META_PATH + 'Train.csv')\ndf_train['Path'] = df_train['Path'].str.lower()\ndf_train['ClassId'] = df_train['ClassId'].apply(str)\n\nprint(df_train.shape)\ndf_train.head(5)","6e6b64e5":"df_test = pd.read_csv(META_PATH + 'Test.csv')\ndf_test['Path'] = df_test['Path'].str.lower()\ndf_test['ClassId'] = df_test['ClassId'].apply(str)\n\nprint(df_test.shape)\ndf_test.head(5)","072c13c1":"BATCH_SIZE = 24\nIMG_ROWS = 24\nIMG_COLS = 24\nNUM_CLASS = 43","cbd2c05e":"from sklearn.model_selection import train_test_split\n\n(df_train, df_validation) = train_test_split(df_train, test_size=0.3, random_state=SEED_VALUE)\n\n# Train \ub514\ub809\ud1a0\ub9ac\ub85c\ubd80\ud130 \ud559\uc2b5 \ub370\uc774\ud130\uc14b\uacfc \uac80\uc99d \ub370\uc774\ud130\uc14b\uc744 \ub098\ub220\uc11c \ubd88\ub7ec\uc624\uae30\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n        df_train,\n        directory=IMAGE_PATH,\n        x_col='Path',\n        y_col='ClassId',\n        shuffle=True,\n        seed=SEED_VALUE,\n        target_size=(IMG_ROWS, IMG_COLS),\n        color_mode='rgb',\n        class_mode='categorical',    \n        batch_size=BATCH_SIZE)\n\nvalidation_generator = train_datagen.flow_from_dataframe(\n        df_validation,\n        directory=IMAGE_PATH,\n        x_col='Path',\n        y_col='ClassId',\n        shuffle=True,\n        seed=SEED_VALUE,\n        target_size=(IMG_ROWS, IMG_COLS),\n        color_mode='rgb',\n        class_mode='categorical',    \n        batch_size=BATCH_SIZE)","aaf934ac":"# \ud559\uc2b5 \ub370\uc774\ud130\uc14b\uc774 \uc798 \uc77d\uc5b4\uc9c0\ub294\uc9c0 \ud655\uc778\nx_train_batch, y_train_batch = train_generator.next()\nprint('train y data shape: {}'.format(y_train_batch.shape))\nprint('train x data shape: {}'.format(x_train_batch.shape))\n\nf, ax = plt.subplots(1, 5, figsize=(10, 40))\nax[0].imshow(x_train_batch[0])\nax[0].set_title(np.argmax(y_train_batch[0]))\nax[1].imshow(x_train_batch[1])\nax[1].set_title(np.argmax(y_train_batch[1]))\nax[2].imshow(x_train_batch[2])\nax[2].set_title(np.argmax(y_train_batch[2]))\nax[3].imshow(x_train_batch[3])\nax[3].set_title(np.argmax(y_train_batch[3]))\nax[4].imshow(x_train_batch[4])\nax[4].set_title(np.argmax(y_train_batch[4]))\nplt.show()\n    \ntrain_generator.reset()","e439703d":"# \uac80\uc99d \ub370\uc774\ud130\uc14b\uc774 \uc798 \uc77d\uc5b4\uc9c0\ub294\uc9c0 \ud655\uc778\nx_valid_batch, y_valid_batch = validation_generator.next()\nprint('validation y data shape: {}'.format(y_valid_batch.shape))\nprint('validation x data shape: {}'.format(x_valid_batch.shape))\n\nf, ax = plt.subplots(1, 5, figsize=(10, 40))\nax[0].imshow(x_valid_batch[0])\nax[0].set_title(np.argmax(y_valid_batch[0]))\nax[1].imshow(x_valid_batch[1])\nax[1].set_title(np.argmax(y_valid_batch[1]))\nax[2].imshow(x_valid_batch[2])\nax[2].set_title(np.argmax(y_valid_batch[2]))\nax[3].imshow(x_valid_batch[3])\nax[3].set_title(np.argmax(y_valid_batch[3]))\nax[4].imshow(x_valid_batch[4])\nax[4].set_title(np.argmax(y_valid_batch[4]))\nplt.show()\n\nvalidation_generator.reset()","447608ff":"f, ax = plt.subplots(1, 1, figsize=(15, 5))\nsns.countplot(x='ClassId', data=df_train, ax=ax, order=df_train.ClassId.value_counts().index, palette=\"GnBu_d\")\nplt.show()","8726d7ad":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), padding='same',activation='relu', input_shape=(IMG_ROWS, IMG_COLS, 3)))\nmodel.add(Conv2D(64, (3, 3), padding='same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(NUM_CLASS, activation='softmax'))\n\nmodel.summary()","4dd91575":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","dcdca6c6":"from sklearn.utils import class_weight\n\nclasses = np.unique(df_train['ClassId'])\nclass_weights = class_weight.compute_class_weight('balanced', classes, df_train['ClassId'])\nclass_weight_dict = dict(zip(classes, class_weights))\n\nprint(class_weight_dict)","7af2003b":"f, ax = plt.subplots(2, 1, figsize=(20, 10))\n\norder_by_class_size = df_train.ClassId.value_counts().index\n\nsns.countplot(x='ClassId', data=df_train, ax=ax[0], order=order_by_class_size, palette=\"GnBu_d\")\nax[0].set_title('Number of images by class within training dataset')\n\ndf_class_weights = pd.DataFrame.from_dict(class_weight_dict, orient='index', columns=['Weights'])\nsns.barplot(x=df_class_weights.index, y=df_class_weights['Weights'], ax=ax[1], order=order_by_class_size, palette=\"OrRd\")\nax[1].set_title('Class Weights')\n\nplt.show()","becec0d9":"# https:\/\/github.com\/keras-team\/keras\/blob\/master\/keras\/preprocessing\/image.py#L521-L526\n# train_generator.classes \ub294 class name \uc774 \uc544\ub2cc class index \ub97c \ubc18\ud658\ud55c\ub2e4 (class name \uc740 \uc0ac\uc6a9\uc790\uac00 \uc124\uc815\ud55c \uac12, class index \ub294 \ucf00\ub77c\uc2a4\uac00 \uc77d\uc5b4\ub4e4\uc774\ub294 \ub514\ub809\ud1a0\ub9ac \uc815\ub82c \uc21c\uc11c)\n# fit_generator \uc5d0 class_weight \ub97c \ub118\uae38\ub54c class index \uae30\uc900\uc73c\ub85c mapping \uc744 \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4.\n\nclass_weight_by_idx_dict = {train_generator.class_indices[k]: v for k, v in class_weight_dict.items()}","100fefdf":"history = model.fit_generator(train_generator, \n                    validation_data=validation_generator,\n                    epochs=3,\n                    class_weight=class_weight_by_idx_dict) # \ud074\ub798\uc2a4\ubcc4 \uac00\uc911\uce58 \uc9c0\uc815","bd4a56b2":"print(history.history.keys())\n\nf, ax = plt.subplots(1, 2, figsize=(15, 5))\n\nax[0].plot(history.history['loss'])\nax[0].plot(history.history['val_loss'])\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Loss')\nax[0].legend(('train_loss', 'val_loss'))\n\nax[1].plot(history.history['accuracy'])\nax[1].plot(history.history['val_accuracy'])\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Accuracy')\nax[1].legend(('train_accuracy', 'val_accuracy'))\n\nplt.show()","b650342a":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_dataframe(\n        df_test,\n        directory=IMAGE_PATH,\n        x_col='Path',\n        y_col='ClassId',\n        shuffle=False,\n        target_size=(IMG_ROWS, IMG_COLS),\n        color_mode='rgb',\n        class_mode='categorical',    \n        batch_size=BATCH_SIZE)","6631679b":"score = model.evaluate_generator(test_generator, verbose=1)\nprint('Test dataset accuracy: {}'.format(score[1]))","bb85bf13":"test_generator.reset()\n\npred = model.predict_generator(test_generator)\npred = np.argmax(pred, axis=1)","8cf6a0cd":"# https:\/\/github.com\/keras-team\/keras\/blob\/master\/keras\/preprocessing\/image.py#L521-L526\n\ngenerator_idx_to_label_map = {v: k for k, v in test_generator.class_indices.items()}","c2efe428":"from sklearn.metrics import classification_report\n\nmeasures_by_class_str = classification_report(test_generator.classes, pred, target_names=list(generator_idx_to_label_map.values()))\nprint(measures_by_class_str)\n\n# precision: tp \/ (tp + fp), positive \uac00 \uc544\ub2cc \uac83\uc744 positive \ub85c \ubd84\ub958\ud558\uc9c0 \uc54a\ub294 \ub2a5\ub825.\n# recall: tp \/ p, positive \uc778 \uac83\uc744 \ubaa8\ub450 \uc2dd\ubcc4\ud574\ub0bc \uc218 \uc788\ub294 \ub2a5\ub825.\n# f1-score: precision \uacfc recall \uc758 \uc870\ud654 \ud3c9\uade0.\n# support: \uc2e4\uc81c \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ucd9c\ud604 \ud69f\uc218.","fa72de38":"# \ub9ac\ud3ec\ud2b8 \ud3ec\ub9f7\uc744 pandas dataframe \uc73c\ub85c \ubcc0\ud658\n\nmeasures_by_class = classification_report(test_generator.classes, pred, target_names=list(generator_idx_to_label_map.values()), output_dict=True)\n\nclass_ids = []\nprecisions = []\nrecalls = []\nf1_scores = []\nsupports = []\n\nfor class_id, measures in measures_by_class.items():\n    if (class_id.isdigit()):\n        class_ids.append(class_id)\n        precisions.append(measures['precision'])\n        recalls.append(measures['recall'])\n        f1_scores.append(measures['f1-score'])\n        supports.append(measures['support'])\n\ndf_report = pd.DataFrame(list(zip(class_ids, precisions, recalls, f1_scores, supports)),\n               index=class_ids,\n               columns=['ClassId', 'Precision', 'Recall', 'F1-score', 'Support'])\n\nprint(df_report.shape)\ndf_report.head()","8ec538f3":"# \ud074\ub798\uc2a4\ubcc4 metrics \ub9ac\ud3ec\ud2b8\uc5d0 \ud074\ub798\uc2a4\ubcc4 accuracy \uacc4\uc0b0\ud574\uc11c \ucd94\uac00\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(test_generator.classes, pred)\ncm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\ndf_report['Accuracy'] = pd.Series(cm.diagonal(), index=list(generator_idx_to_label_map.values()))\n\nprint(df_report.shape)\ndf_report.head()","d14fd48c":"f, ax = plt.subplots(3, 1, figsize=(20, 15))\n\norder_by_class_size = df_train.ClassId.value_counts().index\n\nsns.countplot(x='ClassId', data=df_train, ax=ax[0], order=order_by_class_size, palette=\"GnBu_d\")\nax[0].set_title('Number of images by class within training dataset')\n\nsns.barplot(x=df_report.index, y=df_report['Accuracy'], ax=ax[1], order=order_by_class_size, palette=\"GnBu_d\")\nax[1].set_title('Accuracy by class')\n\nsns.barplot(x=df_report.index, y=df_report['F1-score'], ax=ax[2], order=order_by_class_size, palette=\"GnBu_d\")\nax[2].set_title('F1-score by class')\n\nplt.show()","d239481b":"\ud559\uc2b5\ub370\uc774\ud130\uc758 \ud074\ub798\uc2a4\ubcc4 \uc774\ubbf8\uc9c0 \uac2f\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 (\uc544\ub798 \uadf8\ub9bc) \ud074\ub798\uc2a4 \ubcc4\ub85c \ucc28\uc774\uac00 \ud06c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\uc774\ub97c \uc870\uc815\ud558\uae30 \uc704\ud574 model.fit(...) \uc73c\ub85c \ud559\uc2b5\uc2dc\ud0ac \ub54c \uc870\uc815 \uac00\uc911\uce58 (*class_weight*) \ub97c \uc9c0\uc815\ud574\ubcf8\ub2e4.","2713792f":"## 5. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00","64781ccb":"## 4. \ud559\uc2b5 \uacb0\uacfc \ucd9c\ub825","8dbce812":"## 1. \ud559\uc2b5\ub370\uc774\ud130 \ubc0f \uac80\uc99d\ub370\uc774\ud130 \uc900\ube44","780a427e":"## 2. \ubaa8\ub378 \ubc0f \ud559\uc2b5\uacfc\uc815 \uc124\uc815","a646619c":"## 3. \ubaa8\ub378 \ud559\uc2b5\uc2dc\ud0a4\uae30"}}