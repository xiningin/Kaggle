{"cell_type":{"ab6d83e1":"code","6dfcf280":"code","79315942":"code","b0c885c1":"code","8a6b7936":"code","ae22a8ec":"code","58504527":"code","18c28b41":"code","05cd86aa":"code","bc9e254c":"code","e5726dd9":"code","b383f23c":"code","65a7a2da":"code","42e6080c":"code","fe52143a":"code","17a6f7cb":"code","eaea0676":"code","4d2e8b52":"code","2af52318":"code","0d55591e":"code","7c573ea1":"code","ac5ef7b8":"code","03f413c7":"markdown","e33eb40b":"markdown","8c005461":"markdown","1aac3197":"markdown","0527c0ff":"markdown"},"source":{"ab6d83e1":"from collections import Counter\nimport random\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm, trange\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy","6dfcf280":"line_data = pd.read_csv('\/kaggle\/input\/movie-dialog-corpus\/movie_lines.tsv', encoding='utf-8-sig',header=None)\nline_data = line_data[0].str.split('\\t').to_list()\nprint(f'in total {len(line_data)} utterances')\nline_data[:4]","79315942":"line_data = [l for l in line_data if len(l) == 5]\nprint(f'in total {len(line_data)} utterances')\nline_data[:4]","b0c885c1":"lines = pd.DataFrame(line_data, columns=['line_id', 'speaker_id', 'movie_id', 'speaker_name', 'text'])\nlines = lines.set_index('line_id')\nlines.loc['L1000']","8a6b7936":"conversation_data = pd.read_csv('\/kaggle\/input\/movie-dialog-corpus\/movie_conversations.tsv', encoding='utf-8-sig', sep='\\t', header=None)\nconversation_data = conversation_data.rename(columns={0: 'speaker1_id', 1: 'speaker2_id', 2: 'movie_id', 3: 'line_ids'})\nconversation_data","ae22a8ec":"def build_conversation(line_ids):\n    id_list = line_ids[1:-2].replace('\\'', '').split(' ')\n    def build_utterance(line):\n        return (line.speaker_id, line.text)\n    try:\n        return [build_utterance(lines.loc[line_id]) for line_id in id_list]\n    except KeyError:\n        return []\n\nconversations = [build_conversation(line_ids) for line_ids in tqdm(conversation_data.line_ids)]\nprint(f'in total {len(conversations)} conversations')\nconversations[:4]","58504527":"plt.title('distribution of conversation lengths')\nplt.xlabel('number of utterances')\nplt.ylabel('number of conversations')\nplt.hist([len(c) for c in conversations], bins=20, range=(0, 20))\nplt.show()","18c28b41":"conversations = [c for c in conversations if len(c) > 2]\nprint(f'{len(conversations)} conversations remain')","05cd86aa":"plt.title('distribution of conversation character counts')\nplt.xlabel('number of characters')\nplt.ylabel('number of conversations')\nplt.hist([sum(len(u[1]) for u in c) for c in conversations], bins=64, range=(0, 2000))\nplt.show()","bc9e254c":"min_char_count = 128\nconversations = [c for c in conversations if sum(len(u[1]) for u in c) > min_char_count]\nprint(f'{len(conversations)} conversations remain')","e5726dd9":"def speaker_repeated(conversation):\n    for idx in range(1, len(conversation)):\n        if conversation[idx][0] == conversation[idx-1][0]:\n            return True\n    return False\n\nconversations = [conv for conv in conversations if not speaker_repeated(conv)]\nprint(f'{len(conversations)} conversations remain')","b383f23c":"print(f'in total {sum(sum(len(u[1]) for u in c) for c in conversations)} characters in conversations')","65a7a2da":"char_usage = Counter(''.join([utterance[1] for conv in conversations for utterance in conv]))\nchars_by_frequency = sorted(char_usage, key=lambda char: -char_usage[char])\n[(char, char_usage[char]) for char in chars_by_frequency]","42e6080c":"frequent_chars = [char for char in sorted(char_usage) if char_usage[char] >= 100]\nprint(f'{len(frequent_chars)} frequent chars: {frequent_chars}')","fe52143a":"empty_token = len(frequent_chars)\nunknown_token = len(frequent_chars) + 1\nspeaker_change_token = len(frequent_chars) + 2\nnum_tokens = len(frequent_chars) + 3\n\ndef char_to_token(char):\n    if char not in frequent_chars:\n        return unknown_token\n    return frequent_chars.index(char)\n\ndef utterance_to_tokens(utterance):\n    return [char_to_token(char) for char in utterance[1]] + [speaker_change_token]\n\ndef conversation_to_tokens(conversation):\n    result = []\n    for utterance in conversation:\n        result += utterance_to_tokens(utterance)\n    return result\n\nconversations_tokenized = [conversation_to_tokens(conversation) for conversation in tqdm(conversations)]\nprint(f'example conversation, tokenized: {conversations_tokenized[0]}')","17a6f7cb":"def pad_empty(tokens, desired_length):\n    return [empty_token] * (desired_length - len(tokens)) + tokens\n\ndef random_example(hist_length):\n    '''\n    Returns tuple of:\n        * hist_length tokens\n        * the token that followed them directly\n    '''\n    conversation = random.choice(conversations_tokenized)\n    start = random.randint(-hist_length, len(conversation) - hist_length - 1)\n    end = start + hist_length\n    hist = conversation[max(start, 0):end]\n    hist = pad_empty(hist, hist_length)\n    return (tf.constant(hist), tf.constant(conversation[end]))\n\nprint(random_example(32))","eaea0676":"def generate_examples(batch_size, hist_length, labelled=True):\n    while True:\n        examples = [random_example(hist_length) for _ in range(batch_size)]\n        inputs = tf.stack([ex[0] for ex in examples])\n        targets = tf.stack([ex[1] for ex in examples])\n        if labelled:\n            yield inputs, targets\n        else:\n            yield inputs\n\niter(generate_examples(2, 16)).__next__()","4d2e8b52":"model = Sequential()\nmodel.add(Embedding(input_dim=num_tokens, output_dim=64))\nmodel.add(LSTM(units=1024, return_sequences=True, input_shape=(None, num_tokens)))\nmodel.add(Dropout(.5))\nmodel.add(LSTM(units=512))\nmodel.add(Dense(num_tokens))\nmodel.compile(optimizer=Adam(),\n              loss=SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['sparse_categorical_accuracy'])\nmodel.summary()","2af52318":"training_history = model.fit_generator(generate_examples(batch_size=128, hist_length=128), epochs=32, steps_per_epoch=1024)","0d55591e":"plt.title('accuracy vs epoch number')\nplt.xlabel('epoch number')\nplt.ylabel('accuracy')\nplt.plot(training_history.history['sparse_categorical_accuracy'])\nplt.show()","7c573ea1":"def logits_to_tokens(logits, temperature=1.0):\n    one_hot = tf.nn.softmax(logits \/ temperature)\n    result = []\n    for row in one_hot:\n        result += random.choices(population=list(range(num_tokens)), weights=row.numpy(), k=1)\n    return result\n\n\ndef token_to_char(token):\n    if token < len(frequent_chars):\n        return frequent_chars[token]\n    raise ValueError('special token - not a character')\n\n\ndef continue_tokens(tokens, max_length=256, temperature=1.0):\n    '''Add a new utterance to the (tokenized) conversation'''\n    result = tokens.copy()\n    result = pad_empty(result, 16)\n    \n    for _ in trange(max_length):\n        logits = model.predict([[tf.constant(result)]])\n        token = logits_to_tokens(logits, temperature=temperature)[0]\n        if token == speaker_change_token:\n            break\n        result.append(token)\n    \n    result.append(speaker_change_token)\n    return result\n\n\ndef tokens_to_conversation(tokens):\n    result = []\n    to_process = tokens.copy()\n    while len(to_process) > 0:\n        text = ''\n        while len(to_process) > 0:\n            token = to_process.pop(0)\n            if token == speaker_change_token:\n                break\n            try:\n                text += token_to_char(token)\n            except ValueError:\n                pass\n        result.append((str(len(result) % 2), text))\n    return result\n\n\ndef continue_conversation(conversation, max_length=256, temperature=1.0):\n    '''Like continue_tokens, but operates on structured conversations'''\n    tokens = continue_tokens(conversation_to_tokens(conversation), max_length=max_length, temperature=temperature)\n    return tokens_to_conversation(tokens)","ac5ef7b8":"for conversation in conversations[:4]:\n    print(continue_conversation(conversation, max_length=256))","03f413c7":"# Filtering the data","e33eb40b":"# Data loading\nThere are some problems with formatting (eg. the tab character is not quoted properly), so we're doing some loading manually.","8c005461":"# Evaluation\nLet's see what we got!","1aac3197":"# Tokenizing","0527c0ff":"# Model training\nYay! Finally, we can create our chatbot's brain."}}