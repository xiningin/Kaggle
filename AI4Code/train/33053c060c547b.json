{"cell_type":{"0c3455b5":"code","b1fe3f7c":"code","bbe10182":"code","8bbfb90f":"code","64ccab73":"code","d9890b8b":"code","94646527":"code","12d8f38f":"code","37dbaa43":"code","0be19832":"code","3875d2f1":"code","915b6d09":"code","65e3b19a":"code","fd6782fb":"code","451c70bb":"code","6af5547d":"code","67d94b63":"code","7b050138":"code","c867e946":"code","aedeb83e":"code","15b814d7":"code","46ff9812":"code","4c784b69":"code","b96edcf9":"code","6706a6f1":"code","24da0b8b":"code","aadc5065":"code","e2e84e81":"code","3af7340b":"code","79ddb2ce":"code","58e507f9":"code","fd184598":"code","05f1b840":"code","5b46dee9":"code","a3a0b1c4":"code","41c17c98":"code","88c9e23f":"code","0918d404":"code","6b30af84":"code","e9e52f5a":"code","8bd29048":"code","7294d116":"code","b825b5d5":"code","f09143cd":"code","fc6dcbbb":"code","183a9be0":"code","cc58b0d5":"code","fcbdb70a":"code","49012de5":"code","4b318c6b":"code","d22db34b":"code","7eb15a6a":"code","312b1768":"code","1411ebe8":"code","fde6b7d6":"code","e9bdd195":"code","1af555ca":"code","06e225f9":"code","16e89501":"code","c21a6543":"code","b0a4960a":"code","f5dbdb65":"code","370dee96":"code","4f827966":"code","c9d38443":"code","d89bdb06":"code","ec5804c4":"code","7efc4bf9":"code","31447f16":"code","623d3976":"code","529870ac":"code","2f4e5b50":"code","212bd500":"code","f688e0b2":"code","ef5dc8a2":"code","eba6bded":"code","a15cca6d":"code","77b8df47":"code","b7199999":"code","d4866645":"code","fb4d751b":"code","7fd7aaec":"code","b1b21216":"code","9114d519":"code","27bafdd5":"code","091e6d94":"code","5ccd9fcb":"code","8d6f5882":"code","33ba37e0":"code","216bb27d":"code","62e8e555":"code","27aa1936":"code","38d64e87":"code","802e6d1e":"code","9683ad9c":"code","740933d1":"code","851df48c":"code","0ef79b25":"code","bc766dab":"code","d94e3f37":"code","0f106c44":"code","14212120":"code","4d2dad2f":"code","f6d89ffe":"code","ef86bb8c":"code","9360fe65":"code","a836690d":"code","e51b5853":"code","a56c1193":"code","61a0c660":"code","ca906a4c":"code","62b03fb5":"code","63ba9dd6":"code","19403340":"code","63a8298d":"code","2a80d18e":"code","cc79286f":"markdown","7aae1e6c":"markdown","37e2db10":"markdown","38f6d5df":"markdown","3975474c":"markdown","e8b96361":"markdown","1b045dd4":"markdown","569985ec":"markdown","a6f0c682":"markdown","e21ed7dd":"markdown","035fdfea":"markdown","1fa60114":"markdown","c773a27a":"markdown","8978518a":"markdown","5c5655c3":"markdown","7949c6b7":"markdown","424a0873":"markdown","dcdc3d0d":"markdown","06e26c0b":"markdown","00da9f2d":"markdown","434ae64d":"markdown","9e0d4afa":"markdown","da0b3034":"markdown","74a7a26f":"markdown","581bd96c":"markdown","9eb40e39":"markdown","c6739cb6":"markdown","2c004f45":"markdown","eb15d178":"markdown","6eaa3f1c":"markdown","72786582":"markdown","ca808966":"markdown","74d6df68":"markdown","19941bb0":"markdown","6c14c787":"markdown","4ff6d357":"markdown","fc2df372":"markdown","b70b5dee":"markdown","f4196abc":"markdown","c5d2ff14":"markdown","692779f4":"markdown"},"source":{"0c3455b5":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","b1fe3f7c":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","bbe10182":"# copy data in order to avoid any change in the original:\ntrain = train_data.copy()\ntest = test_data.copy()","8bbfb90f":"train.head()","64ccab73":"test.head()","d9890b8b":"train.info()","94646527":"train.shape","12d8f38f":"train.dtypes","37dbaa43":"train.describe().T","0be19832":"train['Pclass'].value_counts()","3875d2f1":"train['Sex'].value_counts()","915b6d09":"train['SibSp'].value_counts()","65e3b19a":"train['Parch'].value_counts()","fd6782fb":"train['Ticket'].value_counts()","451c70bb":"train['Cabin'].value_counts()","6af5547d":"train['Embarked'].value_counts()","67d94b63":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","7b050138":"sns.barplot(x = 'Pclass', y = 'Survived', data = train);","c867e946":"train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","aedeb83e":"sns.barplot(x = 'SibSp', y = 'Survived', data = train);","15b814d7":"train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","46ff9812":"sns.barplot(x = 'Parch', y = 'Survived', data = train);","4c784b69":"train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b96edcf9":"sns.barplot(x = 'Sex', y = 'Survived', data = train);","6706a6f1":"grid = sns.FacetGrid(train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","24da0b8b":"train['Ticket']","aadc5065":"train.head()","e2e84e81":"# We can drop the Ticket feature since it is unlikely to have useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)\n\ntrain.head()","3af7340b":"train.describe().T","79ddb2ce":"# It looks like there is a problem in Fare max data. Visualize with boxplot.\nsns.boxplot(x = train['Fare']);","58e507f9":"Q1 = train['Fare'].quantile(0.25)\nQ3 = train['Fare'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_limit = Q1- 1.5*IQR\nlower_limit\n\nupper_limit = Q3 + 1.5*IQR\nupper_limit","fd184598":"# observations with Fare data higher than the upper limit:\n\ntrain['Fare'] > (upper_limit)","05f1b840":"train.sort_values(\"Fare\", ascending=False).head()","5b46dee9":"# In boxplot, there are too many data higher than upper limit; we can not change all. Just repress the highest value -512- \ntrain['Fare'] = train['Fare'].replace(512.3292, 300)","a3a0b1c4":"train.sort_values(\"Fare\", ascending=False).head()","41c17c98":"test.sort_values(\"Fare\", ascending=False)","88c9e23f":"test['Fare'] = test['Fare'].replace(512.3292, 300)","0918d404":"test.sort_values(\"Fare\", ascending=False)","6b30af84":"train.isnull().sum()","e9e52f5a":"train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].mean())","8bd29048":"test[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].mean())","7294d116":"train.isnull().sum()","b825b5d5":"test.isnull().sum()","f09143cd":"train.isnull().sum()","fc6dcbbb":"test.isnull().sum()","183a9be0":"train[\"Embarked\"].value_counts()","cc58b0d5":"# Fill NA with the most frequent value:\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")","fcbdb70a":"test[\"Embarked\"] = test[\"Embarked\"].fillna(\"S\")","49012de5":"train.isnull().sum()","4b318c6b":"test.isnull().sum()","d22db34b":"test[test[\"Fare\"].isnull()]","7eb15a6a":"test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","312b1768":"test[\"Fare\"] = test[\"Fare\"].fillna(12)","1411ebe8":"test[\"Fare\"].isnull().sum()","fde6b7d6":"train.head()","e9bdd195":"# Create CabinBool variable which states if someone has a Cabin data or not:\n\ntrain[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain.head()","1af555ca":"train.isnull().sum()","06e225f9":"test.isnull().sum()","16e89501":"# Map each Embarked value to a numerical value:\n\nembarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\n\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)","c21a6543":"train.head()","b0a4960a":"# Convert Sex values into 1-0:\n\nfrom sklearn import preprocessing\n\nlbe = preprocessing.LabelEncoder()\ntrain[\"Sex\"] = lbe.fit_transform(train[\"Sex\"])\ntest[\"Sex\"] = lbe.fit_transform(test[\"Sex\"])","f5dbdb65":"train.head()","370dee96":"train[\"Title\"] = train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest[\"Title\"] = test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","4f827966":"train.head()","c9d38443":"train['Title'] = train['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntrain['Title'] = train['Title'].replace(['Countess', 'Sir'], 'Royal')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme', 'Mrs')","d89bdb06":"test['Title'] = test['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntest['Title'] = test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntest['Title'] = test['Title'].replace('Mlle', 'Miss')\ntest['Title'] = test['Title'].replace('Ms', 'Miss')\ntest['Title'] = test['Title'].replace('Mme', 'Mrs')","ec5804c4":"train.head()","7efc4bf9":"test.head()","31447f16":"train[[\"Title\",\"PassengerId\"]].groupby(\"Title\").count()","623d3976":"train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","529870ac":"# Map each of the title groups to a numerical value\n\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 5}\n\ntrain['Title'] = train['Title'].map(title_mapping)","2f4e5b50":"train.isnull().sum()","212bd500":"test['Title'] = test['Title'].map(title_mapping)","f688e0b2":"test.head()","ef5dc8a2":"train = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","eba6bded":"train.head()","a15cca6d":"bins = [0, 5, 12, 18, 24, 35, 60, np.inf]\nmylabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = mylabels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = mylabels)","77b8df47":"train.head()","b7199999":"# Map each Age value to a numerical value:\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","d4866645":"train.head()","fb4d751b":"#dropping the Age feature for now, might change:\ntrain = train.drop(['Age'], axis = 1)\ntest = test.drop(['Age'], axis = 1)","7fd7aaec":"train.head()","b1b21216":"# Map Fare values into groups of numerical values:\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])","9114d519":"# Drop Fare values:\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","27bafdd5":"train.head()","091e6d94":"train.head()","5ccd9fcb":"train[\"FamilySize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1","8d6f5882":"test[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1","33ba37e0":"# Create new feature of family size:\n\ntrain['Single'] = train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntrain['SmallFam'] = train['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntrain['MedFam'] = train['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntrain['LargeFam'] = train['FamilySize'].map(lambda s: 1 if s >= 5 else 0)","216bb27d":"train.head()","62e8e555":"# Create new feature of family size:\n\ntest['Single'] = test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntest['SmallFam'] = test['FamilySize'].map(lambda s: 1 if  s == 2  else 0)\ntest['MedFam'] = test['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ntest['LargeFam'] = test['FamilySize'].map(lambda s: 1 if s >= 5 else 0)","27aa1936":"test.head()","38d64e87":"# Convert Title and Embarked into dummy variables:\n\ntrain = pd.get_dummies(train, columns = [\"Title\"])\ntrain = pd.get_dummies(train, columns = [\"Embarked\"], prefix=\"Em\")","802e6d1e":"train.head()","9683ad9c":"test = pd.get_dummies(test, columns = [\"Title\"])\ntest = pd.get_dummies(test, columns = [\"Embarked\"], prefix=\"Em\")","740933d1":"test.head()","851df48c":"# Create categorical values for Pclass:\ntrain[\"Pclass\"] = train[\"Pclass\"].astype(\"category\")\ntrain = pd.get_dummies(train, columns = [\"Pclass\"],prefix=\"Pc\")\ntrain.head()","0ef79b25":"test[\"Pclass\"] = test[\"Pclass\"].astype(\"category\")\ntest = pd.get_dummies(test, columns = [\"Pclass\"],prefix=\"Pc\")","bc766dab":"train.head()","d94e3f37":"test.head()","0f106c44":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 0)","14212120":"x_train.shape","4d2dad2f":"x_test.shape","f6d89ffe":"from sklearn.linear_model import LogisticRegression\nimport pandas as pd\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","ef86bb8c":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","9360fe65":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","a836690d":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","e51b5853":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","a56c1193":"xgb_cv_model.fit(x_train, y_train)","61a0c660":"xgb_cv_model.best_params_","ca906a4c":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","62b03fb5":"xgb_tuned =  xgb.fit(x_train,y_train)","63ba9dd6":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","19403340":"test","63a8298d":"#set ids as PassengerId and predict survival \nids = test['PassengerId']\npredictions = xgb_tuned.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","2a80d18e":"output.head()","cc79286f":"### Ticket","7aae1e6c":"**Variables and Their Types:**\n\nSurvival: Survival -> 0 = No, 1 = Yes\n\nPclass: Ticket class -> 1 = 1st, 2 = 2nd, 3 = 3rd\n\nSex: Sex\n\nAge: Age in years\n\nSibSp: # of siblings \/ spouses aboard the Titanic\n\nParch: # of parents \/ children aboard the Titanic\n\nTicket: Ticket number\n\nFare: Passenger fare\n\nCabin: Cabin number\n\nEmbarked: Port of Embarkation -> C = Cherbourg, Q = Queenstown, S = Southampton","37e2db10":"# Modeling, Evaluation and Model Tuning","38f6d5df":"> > ### Basic summary statistics about the numerical data","3975474c":"### Age","e8b96361":"# Data Understanding (Exploratory Data Analysis)","1b045dd4":"## Variable Transformation","569985ec":"**Variable Notes:**\n\nPclass: A proxy for socio-economic status (SES)\n- 1st = Upper\n- 2nd = Middle\n- 3rd = Lower\n\nAge: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nSibSp: The dataset defines family relations in this way...\n- Sibling = brother, sister, stepbrother, stepsister\n- Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nParch: The dataset defines family relations in this way...\n- Parent = mother, father\n- Child = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","a6f0c682":"## Spliting the train data","e21ed7dd":"#### Pclass vs survived:","035fdfea":"### Visualization","1fa60114":"**In general, barplot is used for categorical variables while histogram, density and boxplot are used for numerical data.","c773a27a":"### Embarked","8978518a":"[](http:\/\/)**Titanic Survival Prediction:**\n\nUse machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","5c5655c3":"### Embarked & Title","7949c6b7":"## Importing Librarires","424a0873":"### Fare","dcdc3d0d":"#### SibSp vs survived:","06e26c0b":"### Classes of some categorical variables","00da9f2d":"### AgeGroup","434ae64d":"# Basic Understanding \/ Basic Problem Definition","9e0d4afa":"# Data Preparation","da0b3034":"### Embarked","74a7a26f":"### Name - Title","581bd96c":"## Logistic Regression","9eb40e39":"## Gradient Boosting Classifier","c6739cb6":"### Cabin","2c004f45":"## Random Forest","eb15d178":"#### Sex vs survived:","6eaa3f1c":"## Missing Value Treatment","72786582":"### Sex","ca808966":"### Pclass","74d6df68":"## Loading Data","19941bb0":"> ## Outlier Treatment","6c14c787":"## Analysis and Visualization of Numeric and Categorical Variables","4ff6d357":"### Fare","fc2df372":"[](http:\/\/)## Feature Engineering","b70b5dee":"## Deleting Unnecessary Variables","f4196abc":"#### Parch vs survived:","c5d2ff14":"# Deployment","692779f4":"### Family Size"}}