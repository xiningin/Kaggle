{"cell_type":{"ad96b21e":"code","3f3156ba":"code","8398a0d4":"code","acfe8411":"code","4f557f0c":"code","49254891":"code","41d7dd38":"code","1f328501":"code","3b199358":"code","db0198d2":"code","06c36c8c":"code","6ac29c24":"code","059fb87f":"code","e91223ca":"code","4e227d88":"code","a9ca3cff":"code","03cd2e87":"code","2d36a6a7":"markdown","1dab1453":"markdown","3217acbe":"markdown","0e5e76c2":"markdown","5d665d92":"markdown","28f3ea60":"markdown"},"source":{"ad96b21e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f3156ba":"df_train = pd.read_csv('\/kaggle\/input\/1056lab-customer-behavior-prediction\/train.csv', index_col=0)\ndf_train","8398a0d4":"df_test = pd.read_csv('\/kaggle\/input\/1056lab-customer-behavior-prediction\/test.csv', index_col=0)\ndf_test","acfe8411":"df = pd.concat([df_train.drop(['Propensity'], axis=1), df_test])\ndf","4f557f0c":"df = df.dropna(axis=1, how='all')\ndf","49254891":"obj_columns = []\nfor c in df.columns:\n    if df[c].dtype == 'object':\n        obj_columns.append(c)\nprint(obj_columns)","41d7dd38":"df = df.drop(obj_columns, axis=1)\ndf","1f328501":"y = df_train['Propensity']\n\nnrow, ncol = df_train.shape\ndf_train = df[:nrow]\ndf_test = df[nrow:]","3b199358":"import lightgbm as lgb\n\ntrain_data = lgb.Dataset(df_train, label=y)\n\nparam = {'objective':'binary', 'metric':'auc'}\nnum_round = 10\nbst = lgb.train(param, train_data, num_round)","db0198d2":"from sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ny_pred = bst.predict(df_train)\nfpr, tpr, thresholds = roc_curve(y, y_pred)\nauc = auc(fpr, tpr)\n\nplt.style.use('ggplot')\nplt.figure()\nplt.plot(fpr, tpr, label=f'ROC curve (Area={auc:.5f})')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.legend()\nplt.show()","06c36c8c":"import shap\n\n# print the JS visualization code to the notebook\nshap.initjs()\n\nexplainer = shap.TreeExplainer(bst)\nshap_values = explainer.shap_values(df_train)","6ac29c24":"import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nshap.summary_plot(shap_values[1], df_train, plot_type='dot')","059fb87f":"import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nshap.dependence_plot('Var126', shap_values[0], df_train, interaction_index=None)","e91223ca":"import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nshap.dependence_plot('Var81', shap_values[0], df_train, interaction_index=None)","4e227d88":"y_pred = bst.predict(df_test)\ny_pred","a9ca3cff":"df_submit = pd.read_csv('\/kaggle\/input\/1056lab-customer-behavior-prediction\/sampleSubmission.csv', index_col=0)\ndf_submit['Propensity'] = y_pred\ndf_submit","03cd2e87":"df_submit.to_csv('submit.csv')","2d36a6a7":"# Predicting","1dab1453":"# Training by LightGBM","3217acbe":"# Explaining","0e5e76c2":"# Drawing the ROC Curve","5d665d92":"# Preprocessing","28f3ea60":"# Reading dataset"}}