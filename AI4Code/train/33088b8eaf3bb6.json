{"cell_type":{"2002affb":"code","8b764e7b":"code","e0f613b1":"code","83be87a4":"code","0d682f46":"code","c4033453":"code","638d48c5":"code","c2c7c974":"code","6cc3694b":"code","f681d6e3":"code","d319d9a7":"code","4f9ce4f1":"code","eb2fb825":"code","d5d0e1b1":"code","8350ee34":"markdown"},"source":{"2002affb":"from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models,optimizers\nfrom tensorflow.keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop\nimport tensorflow as tf\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport glob\nimport matplotlib.image as mpimg\n\n\nimport plotly.offline as py\nimport plotly.express as px\n#from fbprophet import Prophet\n#from fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\n\n\n\"\"\"import os\nfor dirname, _, filenames in os.walk('Datasets\/covid_xRay1\/dataset'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\"\"\"","8b764e7b":"import tensorflow as tf","e0f613b1":"print(tf.test.is_built_with_cuda()) \n","83be87a4":"data = '..\/input\/covid19\/xray_dataset_covid19'","0d682f46":"os.listdir(data)","c4033453":"normal_images = []\nfor img_path in glob.glob(data + '\/train\/NORMAL\/*'):\n    normal_images.append(mpimg.imread(img_path))\n\nfor img_path in glob.glob(data + '\/test\/NORMAL\/*'):\n    normal_images.append(mpimg.imread(img_path))\n    \nfig = plt.figure()\nfig.suptitle('Normal Image')\nplt.imshow(normal_images[0], cmap='gray')","638d48c5":"len(normal_images)","c2c7c974":"covid_images = []\nfor img_path in glob.glob(data + '\/train\/COVID\/*'):\n    covid_images.append(mpimg.imread(img_path))\n\nfor img_path in glob.glob(data + '\/test\/COVID\/*'):\n    covid_images.append(mpimg.imread(img_path))\n    \nfig = plt.figure()\nfig.suptitle('covid Image')\nplt.imshow(covid_images[0], cmap='gray')","6cc3694b":"len(covid_images)","f681d6e3":"Image_Width = 150\nImage_Height = 150\nCannels = 3\n\nINPUT_SHAPE = (Image_Width, Image_Height, Cannels)\nNB_CLASSES = 2\nEPOCHS = 45\nBATCH_SIZE = 6","d319d9a7":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',\n                        input_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizers.RMSprop(lr=1e-4),\n              metrics=['acc'])","4f9ce4f1":"train_data = '..\/input\/covid19\/xray_dataset_covid19\/train'\ntest_data = '..\/input\/covid19\/xray_dataset_covid19\/test'","eb2fb825":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,)\n\n# Note that the validation data should not be augmented!\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        # This is the target directory\n        train_data,\n        # All images will be resized to 150x150\n        target_size=(150, 150),\n        batch_size=32,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n","d5d0e1b1":"history = model.fit_generator(\n      train_generator,\n      epochs=25,\n      )","8350ee34":" # **This notebook is about some X_ray pictures which taked from some people's chest,then we seprate our dataset into train and test and we want to detect people who their covid-test are positive from their X_ray test.**"}}