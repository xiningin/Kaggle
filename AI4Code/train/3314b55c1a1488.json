{"cell_type":{"13609c50":"code","f4c25636":"code","de479601":"code","4ec2ffe3":"code","2a4a96bd":"code","9f75b09b":"code","0a42ad11":"code","7b62ea21":"code","c8b1913e":"code","6d86fc50":"code","eb3f8e93":"code","7aad30be":"code","248dea18":"code","a33af8ff":"code","a42f883e":"code","60630939":"code","e06bda63":"code","79fe796e":"code","a45bdd0e":"code","bf4fd607":"code","6b43aead":"code","dde0e922":"code","d7b27a10":"code","f55331c2":"code","b54b3a73":"code","6d8f594e":"code","5685920e":"code","e1cd9b7b":"code","71ec96ab":"code","38a88286":"code","85875b50":"code","c93d59c5":"code","91987e32":"code","c2051422":"code","ab9e3c38":"code","2255023b":"code","7314517d":"code","540a29fa":"code","8220b338":"code","cf566234":"code","ab106aa8":"code","756160b3":"code","43746daf":"code","f43ba4d0":"markdown","582996ac":"markdown","3fc306eb":"markdown","8b5a1311":"markdown","b8e9a6a6":"markdown","ee3d87d2":"markdown","63f6dd7c":"markdown","4f811770":"markdown","477cf50a":"markdown","fe8e39e3":"markdown","1164d30b":"markdown","b3f5a6ea":"markdown","859da04d":"markdown","a9b68775":"markdown"},"source":{"13609c50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4c25636":"dirname = '\/kaggle\/input'\ntrain_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/train')\ntrain_normal_pth = os.path.join(train_path, 'NORMAL')\ntrain_dme_pth = os.path.join(train_path, 'DME')\ntrain_drusen_pth = os.path.join(train_path, 'DRUSEN')\ntrain_cnv_pth = os.path.join(train_path, 'CNV')\n    \ntest_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/test')\ntest_normal_pth = os.path.join(test_path, 'NORMAL')\ntest_dme_pth = os.path.join(test_path, 'DME')\ntest_drusen_pth = os.path.join(test_path, 'DRUSEN')\ntest_cnv_pth = os.path.join(test_path, 'CNV')\n    \nval_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/val')\nval_normal_pth = os.path.join(val_path, 'NORMAL')\nval_dme_pth = os.path.join(val_path, 'DME')\nval_drusen_pth = os.path.join(val_path, 'DRUSEN')\nval_cnv_pth = os.path.join(val_path, 'CNV')","de479601":"print(test_normal_pth)\nprint(train_drusen_pth)","4ec2ffe3":"import matplotlib.pyplot as plt","2a4a96bd":"def plot_imgs(item_dir, num_imgs=4):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:num_imgs]\n\n    plt.figure(figsize=(16, 16))\n    for idx, img_path in enumerate(item_files):\n        plt.subplot(1, 4, idx+1)\n\n        img = plt.imread(img_path)\n        plt.imshow(img, cmap='bone')\n\n    plt.tight_layout()\n","9f75b09b":"plot_imgs(train_normal_pth)","0a42ad11":"plot_imgs(train_dme_pth)","7b62ea21":"plot_imgs(train_drusen_pth)","c8b1913e":"plot_imgs(train_cnv_pth)","6d86fc50":"import glob\nfrom PIL import Image","eb3f8e93":"def Images_details_Print_data(data, path):\n    print(\" ----->>>Images in: \", path)    \n    for k, v in data.items():\n        print(\"%s:\\t%s\" % (k, v))\n\ndef Images_details(path):\n    files = [f for f in glob.glob(path + \"**\/*.*\", recursive=True)]\n    data = {}\n    data['images_count'] = len(files)\n    data['min_width'] = 10**100  # No image will be bigger than that\n    data['max_width'] = 0\n    data['min_height'] = 10**100  # No image will be bigger than that\n    data['max_height'] = 0\n\n\n    for f in files:\n        im = Image.open(f)\n        width, height = im.size\n        data['min_width'] = min(width, data['min_width'])\n        data['min_height'] = min(height, data['min_height'])\n        data['max_width'] = max(width, data['max_height'])\n        \n        data['max_height'] = max(height, data['max_height'])\n\n    Images_details_Print_data(data, path)","7aad30be":"Images_details(train_normal_pth)\nImages_details(train_dme_pth)\nImages_details(train_drusen_pth)\nImages_details(train_cnv_pth)","248dea18":"Images_details(test_normal_pth)\nImages_details(test_dme_pth)\nImages_details(test_drusen_pth)\nImages_details(test_cnv_pth)","a33af8ff":"Images_details(val_normal_pth)\nImages_details(val_dme_pth)\nImages_details(val_drusen_pth)\nImages_details(val_cnv_pth)","a42f883e":"input_path = \"\/kaggle\/input\/kermany2018\/OCT2017 \/\"\n\nfor _set in ['train', 'test', 'val']:\n    normal = len(os.listdir(input_path + _set + '\/NORMAL'))\n    dme = len(os.listdir(input_path + _set + '\/DME'))\n    drusen = len(os.listdir(input_path + _set + '\/DRUSEN'))\n    cnv = len(os.listdir(input_path + _set + '\/CNV'))\n    print('{}, Normal images: {}, DME images: {}, DRUSEN images: {}, CNV images: {}'.format(_set, normal, dme, drusen, cnv))","60630939":"datadir = '..\/input\/kermany2018\/OCT2017 \/'\ntraindir = datadir + 'train\/'\nvaliddir = datadir + 'val\/'\ntestdir = datadir + 'test\/'","e06bda63":"# Empty lists\ncategories = []\nimg_categories = []\nn_train = []\nn_valid = []\nn_test = []\nhs = []\nws = []\n\n# Iterate through each category\nfor d in os.listdir(traindir):\n    categories.append(d)\n\n    # Number of each image\n    train_imgs = os.listdir(traindir + d)\n    valid_imgs = os.listdir(validdir + d)\n    test_imgs = os.listdir(testdir + d)\n    n_train.append(len(train_imgs))\n    n_valid.append(len(valid_imgs))\n    n_test.append(len(test_imgs))\n\n    # Find stats for train images\n    for i in train_imgs:\n        img_categories.append(d)\n        img = Image.open(traindir + d + '\/' + i)\n        img_array = np.array(img)\n        # Shape\n        hs.append(img_array.shape[0])\n        ws.append(img_array.shape[1])\n\n# Dataframe of categories\ncat_df = pd.DataFrame({'category': categories,\n                       'n_train': n_train,\n                       'n_valid': n_valid, 'n_test': n_test}).\\\n    sort_values('category')\n\n# Dataframe of training images\nimage_df = pd.DataFrame({\n    'category': img_categories,\n    'height': hs,\n    'width': ws\n})\n\ncat_df.sort_values('n_train', ascending=False, inplace=True)\ncat_df.head()","79fe796e":"cat_df.set_index('category')['n_train'].plot.bar(figsize=(15, 6))\nplt.xticks(rotation=80)\nplt.ylabel('Count')\nplt.title('Training Images by Category')\nplt.show()","a45bdd0e":"img_dsc = image_df.groupby('category').describe()\nimg_dsc.head()\n","bf4fd607":"import seaborn as sns","6b43aead":"plt.figure(figsize=(10, 6))\nsns.kdeplot(\n    img_dsc['height']['mean'], label='Average Height')\nsns.kdeplot(\n    img_dsc['width']['mean'], label='Average Width')\nplt.xlabel('Pixels')\nplt.ylabel('Density')\nplt.title('Average Size Distribution')","dde0e922":"import os\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport random\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport zlib\nimport itertools\nimport sklearn\nimport itertools\nimport scipy\nimport skimage\nfrom skimage.transform import resize\nimport csv\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import confusion_matrix, make_scorer, accuracy_score, classification_report\nimport keras\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization\nfrom keras.utils import np_utils\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import models, layers, optimizers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.utils import class_weight\nfrom keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta, RMSprop\nfrom keras.models import Sequential, model_from_json\nfrom keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.layers import MaxPooling2D,AveragePooling2D, GlobalAveragePooling2D,BatchNormalization\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img, ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom keras import backend as K\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model\nfrom keras.applications.mobilenet import MobileNet\nfrom keras.applications.inception_v3 import InceptionV3\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\n%matplotlib inline","d7b27a10":"# Model parameters\nimage_size = 64\nbatch_size = 32\nnum_classes = 4\nepochs = 30","f55331c2":"\nmodel = Sequential()\nmodel.add(Conv2D(256, kernel_size=(3, 3), activation='relu', input_shape=(image_size, image_size,3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(256, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.5))\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.5))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(32, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(32, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(num_classes, activation='softmax'))\n\nprint(model.summary())\n\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])","b54b3a73":"train_datagen = ImageDataGenerator(validation_split=0.2) # set validation split\n\ntrain_generator = train_datagen.flow_from_directory(traindir,target_size=(image_size, image_size),\n                                                    batch_size=batch_size,\n                                                    class_mode='categorical',\n                                                    subset='training') # set as training data\n\nvalidation_generator = train_datagen.flow_from_directory(traindir,target_size=(image_size,image_size),\n                                                         batch_size=batch_size,\n                                                         class_mode='categorical',\n                                                         subset='validation') # set as validation data\n\n\ntest_datagen = ImageDataGenerator()\ntest_generator = test_datagen.flow_from_directory(testdir,target_size=(image_size, image_size),\n                                                  batch_size=batch_size,\n                                                  class_mode='categorical')","6d8f594e":"class_weights = class_weight.compute_class_weight('balanced',\n                                                  np.unique(train_generator.classes),\n                                                  train_generator.classes)","5685920e":"from keras.callbacks import ModelCheckpoint, EarlyStopping\nfilepath=\"\/kaggle\/output\/7layered_best.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\n# earlystop = EarlyStopping(monitor = 'val_loss', min_delta = 0, patience = 3,verbose = 1,restore_best_weights = True)\ncallbacks_list = [checkpoint]","e1cd9b7b":"history = model.fit_generator(train_generator,\n                              steps_per_epoch = train_generator.samples \/\/ batch_size,\n                              validation_data = validation_generator,\n                              validation_steps = validation_generator.samples \/\/ batch_size,\n                              epochs = epochs, \n                              callbacks=callbacks_list,\n                              class_weight=class_weights)","71ec96ab":"# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model_balanced_cnn7layered.json\", \"w\") as json_file:\n    json_file.write(model_json)","38a88286":"score = model.evaluate_generator(test_generator,steps = test_generator.samples \/\/ batch_size) \nprint(\"\\n\\n\")\nprint('Testing Loss:', score[0])\nprint('Testing accuracy:', score[1])\n","85875b50":"def load_test_data(folder):\n    \"\"\"\n    Function to load the images and labels.\n    \"\"\"\n    Image = []\n    Label = []\n    \n    for folder_name in os.listdir(folder):\n        # Reading the labels.\n        if not folder_name.startswith('.'):\n            if folder_name in ['CNV']:\n                label = 0\n            elif folder_name in ['DME']:\n                label = 1\n            elif folder_name in ['DRUSEN']:\n                label = 2\n            elif folder_name in ['NORMAL']:\n                label = 3\n            else:\n                label = 4\n            for image_file_name in tqdm(os.listdir(folder + folder_name)):\n                # Reading the images.\n                image_file = cv2.imread(folder + folder_name + '\/' + image_file_name)\n                if image_file is not None:\n                    # Converting images into array.\n                    image_file = skimage.transform.resize(image_file, (image_size, image_size, 3))\n                    image_array = np.asarray(image_file)\n                    Image.append(image_array)\n                    Label.append(label)\n    Image = np.asarray(Image)\n    Label = np.asarray(Label)\n    return Image,Label","c93d59c5":"X_test,Y_test= load_test_data(testdir)","91987e32":"pred_datagen = ImageDataGenerator()\n\npred_generator = pred_datagen.flow_from_directory(testdir,target_size=(image_size, image_size),\n                                                  batch_size=1,\n                                                  class_mode='categorical',\n                                                  shuffle = False)","c2051422":"\npred_generator.reset()\ny_pred = model.predict_generator(pred_generator,steps = 968)\nY_test = pred_generator.classes[pred_generator.index_array]\nY_pred = np.argmax(y_pred, axis=-1)","ab9e3c38":"Y_pred = np.argmax(y_pred,axis = 1)","2255023b":"import pickle\nwith open('y_pred_baseline_model.pkl','wb') as f:\n    pickle.dump(y_pred, f)","7314517d":"print ('Train Accuracy', np.mean(history.history['accuracy']))\nprint ('Train Loss', np.mean(history.history['loss']))\nprint ('Validation Accuracy', np.mean(history.history['val_accuracy']))\nprint ('Validation Loss', np.mean(history.history['val_loss']))","540a29fa":"# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","8220b338":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","cf566234":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","ab106aa8":"cm = confusion_matrix(Y_test, Y_pred)\n \nprint('--------------------')\nprint('| Confusion Matrix |')\nprint('--------------------')\nprint('\\n {}'.format(cm))\n        \n# plot confusin matrix\nplt.figure(figsize=(8,8))\nplt.grid(b=False)\nplot_confusion_matrix(cm, classes=['CNV','DME','DRUSEN','NORMAL'], normalize=False, \n                      title='Confusion matrix', cmap = plt.cm.Blues)","756160b3":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test,Y_pred,target_names=['CNV','DME','DRUSEN','Normal']))","43746daf":"FP = cm.sum(axis=0) - np.diag(cm)  \nFN = cm.sum(axis=1) - np.diag(cm)\nTP = np.diag(cm)\nTN = cm.sum() - (FP + FN + TP)\n\nFP = FP.astype(float)\nFN = FN.astype(float)\nTP = TP.astype(float)\nTN = TN.astype(float)\n\n# Sensitivity, hit rate, recall, or true positive rate\nTPR = TP\/(TP+FN)\nprint(\"Sensitivity\/TPR = {}\".format(TPR))\n\n# Specificity or true negative rate\nTNR = TN\/(TN+FP) \nprint(\"Specificity\/TNR = {}\".format(TNR))\n\n# Precision or positive predictive value\nPPV = TP\/(TP+FP)\nprint(\"Precision\/PPV = {}\".format(PPV))\n\n# Negative predictive value\nNPV = TN\/(TN+FN)\nprint(\"Negative Predict Value = {}\".format(NPV))\n\n# Fall out or false positive rate\nFPR = FP\/(FP+TN)\nprint(\"False Positive Rate = {}\".format(FPR))\n\n# False negative rate\nFNR = FN\/(TP+FN)\nprint(\"False Negative Rate = {}\".format(FNR))\n\n# False discovery rate\nFDR = FP\/(TP+FP)\nprint(\"False discovery rate = {}\".format(FDR))\n\n# Overall accuracy\nACC = (TP+TN)\/(TP+FP+FN+TN)\nprint(\"Overall Accuracy = {}\".format(ACC))","f43ba4d0":"**NORMAL**","582996ac":"**DME**","3fc306eb":"**DRUSEN**","8b5a1311":"**Distribution of Images Sizes**\n\nThe images themselves have vastly different shapes. We can see this by looking at the stats of images sizes by category.","b8e9a6a6":"**Data Exploration and Analysis**","ee3d87d2":"Retinal optical coherence tomography (OCT) is an imaging technique used to capture high-resolution cross sections of the retinas of living patients. Total 83,484 OCT images are there in the training dataset. Also 1000 OCT images are there in the test dataset.\n\nIt is an imbalanced dataset. Training dataset contains below number of images:\n","63f6dd7c":"# **7 layered Model**","4f811770":"**Validation**","477cf50a":"**CNV**","fe8e39e3":"**TRAIN**","1164d30b":"**PATH Set**","b3f5a6ea":"**TEST**","859da04d":"**Detais about image dimensions**","a9b68775":"dirname = '\/kaggle\/input'\ntrain_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/train')\ntrain_normal_pth = os.path.join(train_path, 'NORMAL')\ntrain_dme_pth = os.path.join(train_path, 'DME')\ntrain_drusen_pth = os.path.join(train_path, 'DRUSEN')\ntrain_cnv_pth = os.path.join(train_path, 'CNV')\n    \ntest_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/test')\ntest_normal_pth = os.path.join(test_path, 'NORMAL')\ntest_dme_pth = os.path.join(test_path, 'DME')\ntest_drusen_pth = os.path.join(test_path, 'DRUSEN')\ntest_cnv_pth = os.path.join(test_path, 'CNV')\n    \nval_path = os.path.join(dirname, 'kermany2018\/OCT2017 \/val')\nval_normal_pth = os.path.join(val_path, 'NORMAL')\nval_dme_pth = os.path.join(val_path, 'DME')\nval_drusen_pth = os.path.join(val_path, 'DRUSEN')\nval_cnv_pth = os.path.join(val_path, 'CNV')"}}