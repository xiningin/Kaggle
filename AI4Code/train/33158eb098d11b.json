{"cell_type":{"83202d36":"code","d5e34d35":"code","c2ba5d97":"code","4e8801b5":"code","c9290dce":"code","079aad98":"code","e4bfeee4":"code","608ed912":"code","e63fedb3":"code","6373fbbe":"code","cf73d687":"code","3eeab22d":"code","b81392ba":"code","e3cd3b73":"code","0f03d10c":"code","2f7c0498":"code","cc016772":"code","2da03591":"code","939f7254":"code","cbd92cdb":"code","161a0a22":"code","3260bd5b":"code","3aa47686":"markdown","34d5b493":"markdown","462dea47":"markdown","26eb5399":"markdown","0526186d":"markdown","3b171b1a":"markdown","fe62701a":"markdown"},"source":{"83202d36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5e34d35":"import pandas as pd \nimport numpy as np \n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\nimport pymc3 as pm ","c2ba5d97":"ramen =  pd.read_csv(\"\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv\")\npd.concat([ramen.head(), ramen.tail()]) ","4e8801b5":"print('Rows:', ramen.shape[0])\nprint('Columns:', ramen.shape[1])","c9290dce":"ramen.info()","079aad98":"ramen['Stars']=pd.to_numeric(ramen['Stars'], errors='coerce') ","e4bfeee4":"ramen.isna().sum()","608ed912":"ramen.drop(['Top Ten'],inplace=True, axis=1) # Drop column 'Top Ten'\nramen[ramen.isnull().any(axis=1)]","e63fedb3":"# drop rows 2152 e 2442\nramen.drop(2152, axis=0,inplace=True) \nramen.drop(2442, axis=0,inplace=True)","6373fbbe":"ramen.fillna(ramen['Stars'].mean(), inplace=True )","cf73d687":"# Account for the variety of ramens \npaises = ramen['Country'].value_counts().sort_values(ascending=True) \n\nplt.figure(figsize=(10,8))\npaises.plot(kind='barh', )\nplt.show()","3eeab22d":"# Most used packaging \nstyle = ramen['Style'].value_counts()\n\nplt.pie(style[0:5],autopct=\"%3.01f%%\",radius=1.9,explode=[0,0,0,0,0.3], labels=style[0:5].index,\n       textprops={'fontsize': 14})\nplt.show()","b81392ba":"plt.figure(figsize=(9,6))\nm = sn.distplot(ramen['Stars'], hist=True, bins=15, kde=True,color='k')\nm1 = plt.vlines(ramen['Stars'].mean(),0,0.7,colors='b',label='mean')\nm2 =plt.vlines(ramen['Stars'].mode(),0.0,0.7,colors='r',label='mode')\nm3 = plt.vlines(ramen['Stars'].median(),0.0,0.7,colors='g',label='median')\nplt.title(\"Distribution of Stars\")\nplt.xlabel('Stars')\nplt.legend()\nplt.show() ","e3cd3b73":"# Select brands with ratings greater than 4\njp = ramen.loc[(ramen['Country']=='Japan') & (ramen['Stars']>=4)]","0f03d10c":"x_jp = jp['Brand'].value_counts()\nx_jp = x_jp[:4,]\nsn.barplot(x=x_jp.index,y=x_jp.values, palette='Paired')\nplt.title('4 brands with score greater than 4')","2f7c0498":"myojo = ramen.loc[ramen['Brand'] == \"Myojo\"]\nmyojo_rank = myojo['Stars'].value_counts().sort_index()\n\nmaruchan = ramen.loc[ramen['Brand'] == \"Maruchan\"]\nmaruchan_rank = maruchan['Stars'].value_counts().sort_index()","cc016772":"# myojo\nmyo_neg = myojo_rank.loc[(myojo_rank.index <= 3)].sum() \nmyo_pos = myojo_rank.loc[(myojo_rank.index >= 4 )].sum() \n\n#maruchan\nma_neg = maruchan_rank.loc[(maruchan_rank.index <= 3)].sum()  \nma_pos = maruchan_rank.loc[(maruchan_rank.index >= 4 )].sum() \n","2da03591":"labels = ['Positive', 'Negative']\nx = np.arange(len(labels))\nwidth = 0.3\nfig, ax = plt.subplots(figsize=(7,5))\nrects1 = ax.bar(x-width\/2, [ma_pos,ma_neg], width=width, color='red', label=\"Maruchan\")\nrects2 = ax.bar(x+width\/2, [myo_pos,myo_neg], width=width, color='yellowgreen', label='Myojo')\nax.legend()\n\nax.set_ylabel('Ratings')\nax.set_xticks(x)\nax.set_xticklabels(labels)\n\nplt.show()","939f7254":"# Myojo\nMyj = np.array([0]*(myo_neg) + [1]*(myo_pos)) \nMyj = np.random.shuffle(Myj) \n\n# Maruchan\nMch = np.array([0]*(ma_neg) + [1]*(ma_pos))\nMch = np.random.shuffle(Mch)","cbd92cdb":"with pm.Model() as projeto:\n    # 1. prior (Beta distribution)\n    #Suppose that both brands have a high probability of being rated positively\n    #because they are both well rated in Japan \n    p_myo = pm.Beta('p_myo', 5, 2) \n    p_mch = pm.Beta('p_mch', 5, 2) \n    \n        \n    # 2. posterior (Bernoulli distribution)\n    evidencia_myo = pm.Bernoulli('posteriori_myo', p_myo, observed=Myj)\n    evidencia_mch = pm.Bernoulli('posteriori_mch', p_mch, observed=Mch)\n     \n\n    # Calculate the difference between distributions\n    dif = pm.Deterministic('dif', p_myo - p_mch)     \n\n    # likelihood\n    trace = pm.sample(draws=3000, step=pm.Metropolis())\n    ","161a0a22":"plt.figure(figsize=(16,10))\n\nplt.subplot(311)\nplt.hist(trace['p_myo'], bins=50, histtype='barstacked', density=True)\nplt.xlim([0,1.0])\nplt.vlines(trace['p_myo'].mean(),0,5,linestyles='--', color='red', label=\"Mean\")\nplt.legend()\nplt.title(\"Myojo Posteriori\")\n\nplt.subplot(312)\nplt.hist(trace['p_mch'], bins=50, histtype='barstacked', density=True)\nplt.xlim([0,1.0])\nplt.vlines(trace['p_mch'].mean(),0,5,linestyles='--', color='red', label=\"Mean\")\nplt.legend()\nplt.title(\"Maruchan Posteriori \")\n\nplt.subplot(313)\nplt.hist(trace['dif'], histtype='barstacked', density=True)\nplt.title('Difference between distributions')\n\nplt.show()","3260bd5b":"print('Likely to like the brand Myojo : {:.2f}'.format(np.mean( trace['dif'] > 0)))\nprint('Likely to like the brand Murchan: {:.2f}'.format(np.mean( trace['dif'] < 0)))","3aa47686":"Trace is the classifications created (positive-1 or negative-0) ","34d5b493":"To do Bayesian inference we use the Bayes formula\n\n$\\frac{P(ratings|positive)*P(positive)}{P(ratings)} = P(positive|ratings)$,  \n\nwhere\n\n#### prior -> $P(positive)$\n\n#### posteriori -> $P(positive|ratings)$\n\n#### likelihood -> $P(ratings|positive)$\n\n#### trace -> $P(ratings)$","462dea47":"We will use ratings from 0.0 to 3.0 as negative, and ratings from 4.0 to 5.0 as positive. ","26eb5399":"Japan is the country with the largest variety of ramens ","0526186d":"The goal is to choose a brand of ramen using Bayesian inference ","3b171b1a":"Nissin is the most popular, we will choose between the other two placed Myojo and Maruchan","fe62701a":"Conclusion: Myojo is the best choice"}}