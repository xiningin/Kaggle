{"cell_type":{"7264da61":"code","0d008e41":"code","aef543fe":"code","423d8d14":"code","57336fdc":"code","58acdf8e":"code","bd75d6b5":"code","9feb767b":"code","011fd54d":"code","c747027a":"code","fa22942d":"code","faa4dbb1":"code","27ba8ddc":"code","4997cf02":"code","db25c2ed":"code","0d44a121":"code","40e86889":"code","6e20f2be":"code","3f0539c9":"code","d63efbbb":"code","c5f7289c":"code","4d0b6317":"code","66c5ec7b":"markdown","90d958e7":"markdown"},"source":{"7264da61":"import cv2 \n\nimg = cv2.imread(\"..\/input\/sports-classification\/images to predict\/007.jpg\")\n\nimg.shape","0d008e41":"import matplotlib.pyplot as plt\n\nplt.imshow(img)","aef543fe":"train_dir = \"..\/input\/sports-classification\/train\"\ntest_dir = \"..\/input\/sports-classification\/test\"\nval_dir = \"..\/input\/sports-classification\/valid\"","423d8d14":"import tensorflow as tf\ntrain_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale= 1\/255.,                                                                                                                   \n                                                           rotation_range=0.2,\n                                                           width_shift_range=0.2,\n                                                           height_shift_range=0.2,\n                                                           zoom_range = 0.2, \n                                                           horizontal_flip=True,\n                                                           validation_split = 0.02)\n\ntest_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.)\n\nval_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.)\n\n","57336fdc":"train_data = train_gen.flow_from_directory(train_dir,\n                                           target_size = (224,224),\n                                           class_mode = \"categorical\",\n                                           batch_size = 32\n                                           )\ntest_data = test_gen.flow_from_directory(test_dir,\n                                         target_size =(224,224),\n                                         class_mode = \"categorical\",\n                                         batch_size = 32\n                                         )\nval_data = val_gen.flow_from_directory(val_dir,\n                                       target_size =(224,224),\n                                       class_mode = \"categorical\",\n                                       batch_size = 32\n                                       )","58acdf8e":"labels = list(train_data.class_indices.keys())\n\nlen(labels)","bd75d6b5":"# visualizing the train data\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nplt.figure(figsize=(16,16))\n\nfor i in range(18):\n  image,label = train_data.next()\n\n  plt.subplot(6,3,i+1)\n  plt.imshow(image[i])\n  plt.title(labels[tf.argmax(label[i])])\n  plt.axis(\"off\")","9feb767b":"# building a CNN model\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers \n\n\nmodel = tf.keras.Sequential([\n                             layers.Conv2D(filters= 64, kernel_size = 2, activation= \"relu\", input_shape = (224,224,3)),\n                             layers.MaxPooling2D(pool_size= 2),\n\n                             layers.Conv2D(filters= 64, kernel_size= 2, activation= \"relu\"),\n                             layers.MaxPooling2D(pool_size = 2),\n\n                             layers.Conv2D(filters= 64, kernel_size= 2, activation=\"relu\"),\n                             layers.MaxPooling2D(pool_size = 2),\n\n                             layers.Flatten(),\n\n                             layers.Dense(128, activation=\"relu\"),\n                             layers.Dense(73, activation=\"softmax\")\n\n])","011fd54d":"model.summary()","c747027a":"# compiling the model\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = [\"accuracy\"]\n)","fa22942d":"# fitting data to the model\n\nmodel.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = val_data,\n          validation_steps = len(val_data)\n          )","faa4dbb1":"model_evaluation = model.evaluate(test_data)","27ba8ddc":"print(f\"Model Accuracy: {model_evaluation[1] * 100 :0.2f} %\")","4997cf02":"# predicting and visualizing the test data\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nplt.figure(figsize=(16,16))\n\nfor i in range(18):\n  image,label = test_data.next()\n  model_pred = model.predict(image)\n\n  plt.subplot(6,3,i+1)\n  plt.imshow(image[i])\n  plt.title(f\"Prediction: {labels[tf.argmax(model_pred[i])]}\\nOriginal: {labels[tf.argmax(label[i])]}\")\n  plt.subplots_adjust(top= 1.25)\n  plt.axis(\"off\")\n","db25c2ed":"# building a ResNet model\nimport tensorflow as tf\n\nbase_model = tf.keras.applications.ResNet50V2(include_top= False) \n\nbase_model.trainable = False","0d44a121":"# building a resnet Model\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\ninputs = tf.keras.Input(shape=(224,224,3))\n\nx = base_model(inputs)\nx = layers.GlobalAveragePooling2D()(x)\noutputs = layers.Dense(73, activation=\"softmax\")(x)\n\nres_model = tf.keras.Model(inputs, outputs)\n","40e86889":"# compiling the model\n\nres_model.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = [\"accuracy\"]\n    )","6e20f2be":"# fitting data to the model\n\nres_model.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = val_data,\n    validation_steps = len(val_data)\n)","3f0539c9":"base_model.trainable = True\n\nfor layer in base_model.layers[:-3]:\n  base_model.trainable = False\n\n# compiling the model\nres_model.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = [\"accuracy\"]\n    )\n# fitting data\n\nres_model.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = val_data,\n    validation_steps = len(val_data)\n)","d63efbbb":"res_model_evaluation = res_model.evaluate(test_data)","c5f7289c":"print(f\"Resnet Model Accuracy: {res_model_evaluation[1] * 100 :0.2f} %\")","4d0b6317":"# predicting and visualizing the test data\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nplt.figure(figsize=(16,16))\n\nfor i in range(18):\n  image,label = test_data.next()\n  res_model_pred = res_model.predict(image)\n\n  plt.subplot(6,3,i+1)\n  plt.imshow(image[i])\n  plt.title(f\"Prediction: {labels[tf.argmax(res_model_pred[i])]}\\nOriginal: {labels[tf.argmax(label[i])]}\")\n  plt.subplots_adjust(top= 1.25)\n  plt.axis(\"off\")","66c5ec7b":"## **Tunning the model**","90d958e7":"## **Image Processing**"}}