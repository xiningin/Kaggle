{"cell_type":{"5c735fff":"code","9974809c":"code","46d26cea":"code","eb4568f2":"code","faf09431":"code","503e5229":"code","ad897422":"code","8057d0a9":"code","c6ff0e3f":"code","f9f1ad2f":"code","acc41722":"code","49ed94e5":"code","3f09f118":"code","ce6da647":"code","1c687df6":"code","c7542784":"code","9f519bd9":"code","310c18f5":"code","0ee21b6d":"code","7b55c693":"code","aa279536":"code","63ee1b54":"code","ab4ffb95":"code","b511ca86":"markdown","5ec0e3d1":"markdown","e9d01b66":"markdown","bb50d7b1":"markdown","5b5bbcf4":"markdown"},"source":{"5c735fff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9974809c":"\nfrom __future__ import absolute_import, division, print_function\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport cv2\nimport seaborn as sns\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom keras.utils import np_utils\n\nfrom PIL import Image\nimport os","46d26cea":"print(os.listdir(\"..\/input\/cell_images\/cell_images\"))","eb4568f2":"infected_cells = os.listdir('..\/input\/cell_images\/cell_images\/Parasitized\/')\nuninfected_cells = os.listdir('..\/input\/cell_images\/cell_images\/Uninfected\/')","faf09431":"# visualising the dataset\n# shows 5 images from specified\ndef show_images(file_location, infected):\n    plt.figure(figsize=(12,12))\n    \n    for i in range(5):\n        plt.subplot(1, 5, i+1)\n        if infected:\n            image = cv2.imread(file_location + '\/' + infected_cells[i])\n        else :\n            image = cv2.imread(file_location + '\/' + uninfected_cells[i])\n        plt.imshow(image)\n        plt.tight_layout()\n    plt.show()","503e5229":"infected_filename = '..\/input\/cell_images\/cell_images\/Parasitized'\nuninfected_filename= '..\/input\/cell_images\/cell_images\/Uninfected'","ad897422":"show_images(infected_filename, True)","8057d0a9":"show_images(uninfected_filename, False)","c6ff0e3f":"dataset=[]\nlabels=[]\n\nfor img in infected_cells:\n    try:\n        img_read = plt.imread(infected_filename + \"\/\" + img)\n        img_resize = cv2.resize(img_read, (50, 50))\n        img_array = img_to_array(img_resize)\n        img_aray=img_array\/255\n        dataset.append(img_array)\n        labels.append(1)\n    except:\n        None\n        \nfor img in uninfected_cells:\n    try:\n        img_read = plt.imread(uninfected_filename + \"\/\" + img)\n        img_resize = cv2.resize(img_read, (50, 50))\n        img_array = img_to_array(img_resize)\n        img_array= img_array\/255\n        dataset.append(img_array)\n        labels.append(0)\n    except:\n        None","f9f1ad2f":"plt.imshow(dataset[0])\nplt.show()","acc41722":"images = np.array(dataset)\nlabel_arr = np.array(labels)\n\n#arange the indices\nindex = np.arange(images.shape[0])\n\n#shuffle the indices\nnp.random.shuffle(index)\nimages = images[index]\nlabel_arr = label_arr[index]","49ed94e5":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(images, label_arr, test_size = 0.2, random_state = 42)","3f09f118":"y_train = np_utils.to_categorical(y_train, num_classes=2)\ny_test = np_utils.to_categorical(y_test, num_classes=2)","ce6da647":"from keras.layers import Conv2D, MaxPooling2D, Dropout, BatchNormalization, Flatten, Dense, Activation\nfrom keras import optimizers\nfrom keras.models import Sequential","1c687df6":"inputs = (50, 50, 3)\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=inputs))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=16, kernel_size=1, activation='relu'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=16, kernel_size=3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=32, kernel_size=1, activation='relu'))\nmodel.add(Dropout(0.3))\n                           \nmodel.add(Conv2D(filters=32, kernel_size=3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(Dropout(0.3))\n                           \nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(BatchNormalization(axis = -1))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation = 'softmax'))","c7542784":"model.summary()","9f519bd9":"model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","310c18f5":"history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=20)","0ee21b6d":"# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper right')\nplt.show()","7b55c693":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper right')\nplt.show()","aa279536":"pred = model.predict(x_test)","63ee1b54":"from sklearn.metrics import accuracy_score, classification_report\nscore = accuracy_score(y_test.argmax(axis=1), pred.argmax(axis=1))\nprint(score)","ab4ffb95":"report = classification_report(y_test.argmax(axis=1), pred.argmax(axis=1))\nprint(report)","b511ca86":"**Convert the dataset and labels to numpy array and shuffle dataset**","5ec0e3d1":"> **Building the dataset**\n* Convert the images to arrays\n* Resize, rotate and blur infected images\n* Resize, rotate uninfected images","e9d01b66":"**Convert to class labels categorical**","bb50d7b1":"**Split Dataset**","5b5bbcf4":"**Create Model**"}}