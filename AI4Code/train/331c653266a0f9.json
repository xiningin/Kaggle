{"cell_type":{"75144239":"code","4e7f37e8":"code","987451bd":"code","7f557fd7":"code","28701481":"code","0bf50785":"code","df0571c6":"code","b5c63529":"code","fb3277c1":"code","8159ece0":"code","29871a08":"code","dc8e4ee9":"code","0a956e24":"code","af384f69":"code","875e44a5":"code","6db95972":"code","32c529ef":"code","156e9af3":"code","c833aac4":"code","300c96ff":"code","7f0a887a":"code","d96b688f":"code","e104ffe5":"code","8f345247":"code","59c65903":"code","cd079545":"code","db5a2b92":"code","8057c77e":"code","31720d0f":"code","417dd842":"code","d9ed4131":"code","fdaea7ab":"code","1b597b2d":"code","d862de2f":"code","23492d81":"code","71526f97":"code","25e3f83e":"code","ee5a44a0":"code","f6925efc":"code","f5a277e8":"code","a6cb1ab0":"code","0fa7750b":"code","8a125391":"code","d1233c2d":"code","95ec575f":"code","1012c597":"code","5caec366":"markdown","19425530":"markdown","f2f1f8d6":"markdown","b2f6f4aa":"markdown","61c11482":"markdown","391c47fa":"markdown","b6aaf693":"markdown","5df06301":"markdown","59cd1ae1":"markdown","ef02426d":"markdown","52c7d4be":"markdown","d5245651":"markdown","22969377":"markdown","054327e1":"markdown","dc046967":"markdown","cf53b0b5":"markdown","ea31c59c":"markdown","84be2119":"markdown","b50a32d4":"markdown","1a9b8885":"markdown","c3e890ef":"markdown","8f812f9f":"markdown","507b360c":"markdown","f09d7cf9":"markdown","f31bcc75":"markdown","c28fdd8e":"markdown","fc625b7c":"markdown","577bcde3":"markdown","e4cef05b":"markdown","fb6bebd0":"markdown","c6ecb657":"markdown","c025ae2f":"markdown","6747a4dd":"markdown","eb88dc15":"markdown","1cc5ddb2":"markdown","a631d957":"markdown","c1875792":"markdown","fb22a897":"markdown"},"source":{"75144239":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.style as stl\nimport seaborn as sns","4e7f37e8":"Train = pd.read_csv(\"..\/input\/traintest\/Train.csv\")   \n","987451bd":"Test = pd.read_csv(\"..\/input\/traintest\/Test.csv\")","7f557fd7":"Train.head()","28701481":"Test.head()","0bf50785":"Train.info()","df0571c6":"Train.describe()","b5c63529":"Train.shape","fb3277c1":"Train=Train.drop(\"ID\", axis=1)","8159ece0":"stl.available","29871a08":"stl.use('ggplot')","dc8e4ee9":"Train.head()","0a956e24":"numerical=[\"LongueurVer\",\"LongueurDia\",\"LongueurCro\",\"Hauteur\",\"Largeur\",\"Poids\"]\nnumericalt=[\"LongueurVer\",\"LongueurDia\",\"LongueurCro\",\"Hauteur\",\"Largeur\"]\nfor col in numerical:\n    plt.figure(figsize=(12,6))\n    sns.histplot(Train[col], color=\"m\")\n    plt.show\nfor col in numericalt:\n    plt.figure(figsize=(12,6))\n    sns.histplot(Test[col], color=\"m\")\n    plt.show","af384f69":"plt.figure(figsize=(12,6))\nsns.histplot(Train[\"Largeur\"], color=\"m\")\nplt.show","875e44a5":"plt.figure(figsize=(12,6))\nsns.histplot(Train[\"Poids\"], color=\"m\")\nplt.show","6db95972":"for i in range(123):\n    if (Train.iloc[i]['Poids'] > 1100 )and (Train.iloc[i]['Poids'] <1600 ):\n         print(i)","32c529ef":"plt.figure(figsize=(12,6))\nsns.histplot(Train[\"Esp\u00e8ce\"], color=\"red\")\nplt.show","156e9af3":"plt.figure(figsize=(12,6))\nsns.histplot(Test[\"Esp\u00e8ce\"], color=\"red\")\nplt.show","c833aac4":"mostlongerVer=Train.groupby(\"Esp\u00e8ce\").LongueurVer.max()\nmostlongerDia=Train.groupby(\"Esp\u00e8ce\").LongueurDia.max()\nmostlongerCro=Train.groupby(\"Esp\u00e8ce\").LongueurCro.max()\nmosthigher=Train.groupby(\"Esp\u00e8ce\").Hauteur.max()\nmostlarger=Train.groupby(\"Esp\u00e8ce\").Largeur.max()","300c96ff":"plt.figure(figsize=(12,6))\nplt.ylabel(\"max vertical length\")\nmostlongerVer.plot(kind=\"bar\", color=\"turquoise\")\nplt.show()","7f0a887a":"plt.figure(figsize=(12,6))\nplt.ylabel(\"max diagonal length\")\nmostlongerDia.plot(kind=\"bar\", color=\"#A085DB\")\nplt.show()","d96b688f":"plt.figure(figsize=(12,6))\nplt.ylabel(\"maximum length\")\nmosthigher.plot(kind=\"bar\", color=\"#2376FA\")\nplt.show()","e104ffe5":"plt.figure(figsize=(12,6))\nplt.ylabel(\"max Cross length\")\nmostlongerCro.plot(kind=\"bar\", color=\"#1B5CC4\")\nplt.show()","8f345247":"plt.figure(figsize=(12,6))\nplt.ylabel(\"Maximum diagonal width\")\nmostlarger.plot(kind=\"bar\", color=\"#76F478\")\nplt.show()","59c65903":"plt.figure(figsize=(20,12))\nsns.heatmap(Train[numerical].corr(), annot=True, annot_kws={\"fontsize\":12}, fmt=\".2f\", vmin=-1)\nplt.show()","cd079545":"import category_encoders as ce\nordenc=ce.OrdinalEncoder(cols=['Esp\u00e8ce'])\nTrain=ordenc.fit_transform(Train)\nTest=ordenc.fit_transform(Test)","db5a2b92":"Train.isna().sum()","8057c77e":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.ensemble import RandomForestRegressor","31720d0f":"estimator=RandomForestRegressor(max_depth=8)\nmice = IterativeImputer(estimator=estimator,random_state=11,skip_complete=True)","417dd842":"impdata=mice.fit_transform(Train)\nimpdata=pd.DataFrame(impdata,columns=Train.columns)","d9ed4131":"impdata.isnull().sum()\n","fdaea7ab":"Test=Test.drop(\"ID\",axis=1)","1b597b2d":"\nimpdata.drop([83,53],axis=0)","d862de2f":"from sklearn.linear_model import LinearRegression\nLR=LinearRegression()\nX=impdata.drop([\"Poids\"], axis=1)\nY=impdata[\"Poids\"]","23492d81":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.2)","71526f97":"LR.fit(xtrain,ytrain)\nypred=LR.predict(xtest)\nfrom sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(ytest, ypred))","25e3f83e":"from sklearn.model_selection import cross_val_score\ncvscore = cross_val_score(LR, xtrain, ytrain, cv=5)\ncvscore","ee5a44a0":"cvscore.mean()","f6925efc":"cvscore.std()","f5a277e8":"from sklearn.linear_model import Lasso\nLs=Lasso()\nLs.fit(xtrain,ytrain)\nypredd=Ls.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypredd))","a6cb1ab0":"from sklearn.model_selection import cross_val_score\ncvscore = cross_val_score(Ls, xtrain, ytrain, cv=5)\ncvscore","0fa7750b":"cvscore.mean()","8a125391":"cvscore.std()","d1233c2d":"from sklearn.tree import DecisionTreeRegressor\nmytre=DecisionTreeRegressor()\nmytre.fit(xtrain,ytrain)\nypreeed=mytre.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypreeed))","95ec575f":"from sklearn.tree import DecisionTreeRegressor\nmytre=DecisionTreeRegressor(max_depth=5,min_samples_split=3)\nmytre.fit(xtrain,ytrain)\nypreeed=mytre.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, ypreeed))","1012c597":"from sklearn.tree import DecisionTreeRegressor\nmytree=DecisionTreeRegressor(max_depth=4,min_samples_leaf=2, min_samples_split=5)\nmytree.fit(xtrain,ytrain)\npreed=mytree.predict(xtest)\nnp.sqrt(mean_squared_error(ytest, preed))","5caec366":"Perche has the maximum diagonal width ","19425530":"the error getting bigger , it's a bad model","f2f1f8d6":"Let's play again","b2f6f4aa":"# Exploring data and Pre-Processing","61c11482":"here we notice that Dorade has  the maximum length","391c47fa":"# Treat Missing Value","b6aaf693":"__we notice that that data unbalanced which will cause some problem in the performance of the model, it may not recognize ever \"Poisson Blan\" or \"Eperlan\" or \"Parkki\" because their number is too small__\n","5df06301":"and here we see that Brochet has the longest Cross length","59cd1ae1":"__we gonna use this genius method to fill the missing data__\ni will leave this link for more explanation (https:\/\/www.youtube.com\/watch?v=WPiYOS3qK70)","ef02426d":"here we notice that that brochet has the most longer vertical length","52c7d4be":"__the distribtion of data seems to be log_Normal or Chi-Squared__ ","d5245651":"__General insights about numerical data__","22969377":"also here brochet has the most longer diagonal length  ","054327e1":"![](https:\/\/d3i71xaburhd42.cloudfront.net\/dd63caefa19ef740a3193f638c14ad5540981d34\/2-Table1-1.png)","dc046967":"# Modeling","cf53b0b5":"# Multivariate Imputation By Chained Equations (MICE)","ea31c59c":"__Linear_Regression__","84be2119":"it's a bad model ","b50a32d4":"# Visualization of data","1a9b8885":"# Encoding","c3e890ef":"__Drop outliers__","8f812f9f":"__Evaluation by cross_val_score__","507b360c":"score=0.30 +- 0.9 ","f09d7cf9":"__we notice that the dependancy between features is important__","f31bcc75":"__import_library__","c28fdd8e":"here we notice that the error is hight","fc625b7c":"![](https:\/\/www.renom.jp\/notebooks\/tutorial\/preprocessing\/category_encoding\/renom_cat_ordinal.png)","577bcde3":"some statistical insights about the data","e4cef05b":"__we notice that win minimize the error__ ","fb6bebd0":"__DecisionTreeRegressor__","c6ecb657":"Score= 0.58 +- 0.36","c025ae2f":"here we can see some info about the data and it's type","6747a4dd":"__here we are going to play a little bit with hyperparametre of the decision_tree_regressor__ ","eb88dc15":"also we notice that there is outliers in \"Poids\" column","1cc5ddb2":"we notice that the \"ID\" column is not necessary for our model so we choose to drop it","a631d957":"we notice that there is outliers in the column \"Largeur\"","c1875792":"__Visualization of categorical data__","fb22a897":"__Lasso__"}}