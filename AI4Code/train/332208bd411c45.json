{"cell_type":{"0b938b45":"code","cae53e56":"code","0c540f03":"code","aebe5e6e":"code","60522f0f":"code","9b989b52":"code","eab549b8":"code","0c5df96a":"code","778e7811":"code","f85aca1e":"code","265c05c4":"code","91c87160":"code","111ea456":"code","9a70bae4":"code","d4b9b98c":"code","594a913c":"code","7ed4e029":"code","b64d80d7":"code","cdd77d86":"code","c849f17d":"code","9a0788cd":"code","474080e8":"code","8b0ec02d":"code","3c63c39a":"code","0355866a":"code","9204c665":"markdown","d6139c43":"markdown","7681271c":"markdown","c8fd8d53":"markdown","6f9dcb10":"markdown","a2ca5dff":"markdown","a5ba4599":"markdown","ecbc6482":"markdown","e72d0c23":"markdown","159270bc":"markdown","0a3e30e1":"markdown","fcd23562":"markdown","6e43eec0":"markdown","664c4192":"markdown"},"source":{"0b938b45":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go","cae53e56":"data=pd.read_csv(\"..\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\ndata.head()","0c540f03":"data.isnull().sum()","aebe5e6e":"data.drop([\"HDI for year\",\"country-year\"],axis=1,inplace=True)\n","60522f0f":"data[\"age_start\"]=data[\"age\"].str.split(\"-\")\ndata[\"age_end\"]=data[\"age\"].str.split(\"-\")\ndata.head(3)","9b989b52":"data[\"age_start\"]=data[\"age_start\"].apply(lambda x: x[0])\ndata[\"age_end\"]=data[\"age_end\"].apply(lambda x: x[-1])","eab549b8":"\ndata[\"age_start\"]=data['age_start'].str.extract('(\\d+)').astype(str)\ndata[\"age_end\"]=data['age_end'].str.extract('(\\d+)').astype(str)\n","0c5df96a":"\ndata.columns","778e7811":"data[\"age_start\"]=data[\"age_start\"].astype(\"int64\")\ndata[\"age_end\"]=data[\"age_end\"].astype(\"int64\")\n","f85aca1e":"data[\" gdp_for_year ($) \"]=data[\" gdp_for_year ($) \"].str.split(\",\")\ndata[\" gdp_for_year ($) \"]=data[\" gdp_for_year ($) \"].apply(\"\".join)\n","265c05c4":"data[\" gdp_for_year ($) \"]=data[\" gdp_for_year ($) \"].astype(\"int64\")","91c87160":"data.info()","111ea456":"categorical=[\"generation\",\"country\",\"age\",\"sex\"]\nnumerical=data.columns ^ categorical\nprint(categorical)\nprint(numerical)","9a70bae4":"data[numerical].describe()","d4b9b98c":"data[categorical].describe().head(4)","594a913c":"explodeUniversal=([0.1]*10) #create an explode lists for pie chart","7ed4e029":"fig,ax=plt.subplots(3,2,figsize=(21,17.5))\ncategories=list(categorical)\ncategories.remove(\"country\")\nindex=0\nfor i in range(3):\n  df=data.groupby([categories[index]]).sum();\n  sns.barplot(y=df[\"suicides_no\"],x=df.index,ax=ax[i][0]);\n\n  labels = df.index\n  ax[i][0].set_title(categories[index])\n  \n  ax[i][1].set_title(categories[index],fontsize=18)\n  sizes=[df.iloc[x][\"suicides_no\"]\/df.suicides_no.sum() for x in range(len(labels))]\n  explode = list(explodeUniversal[:len(labels)])\n    \n\n  ax[i][1].pie(sizes, explode=tuple(explode), labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, textprops={'fontsize': 11})\n  ax[i][1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n  index+=1\n  \n","b64d80d7":"df=data.groupby([\"year\"]).sum()\nfig,ax=plt.subplots(1,1,figsize=(11,6))\nx=[]\ny=[]\nfor i in range(1985,2017,4):\n  s=0\n  label=[]\n  label.append(i)\n  tmep=i\n  for j in range(i,i+4):\n  \n    if (i>2016):\n      break\n    temp=j\n    s+=df.loc[df.index==j][\"suicides_no\"][j]\n  label.append(temp)\n  y.append(s)\n  x.append(\"-\".join(str(k) for k in label))\n\nplt.bar(x=x,height=y);","cdd77d86":"fig,ax=plt.subplots(1,2,figsize=(21,7.9))\ndf=data.groupby([\"country\"]).sum();\ndf=df.sort_values(by=\"suicides_no\",ascending=False).head(10)\nsns.barplot(y=df.index,x=df[\"suicides_no\"],ax=ax[0])\n\ncountries=df.index\n\nlabels = countries\nsizes=[df.iloc[i][\"suicides_no\"]\/df.suicides_no.sum() for i in range(len(countries))]\nexplode = (0.1, 0.1, 0.1, 0,0,0,0,0,0,0.2) \n\nax[1].pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax[1].axis('equal') \n\nplt.show()\n","c849f17d":"fig,ax=plt.subplots(1,2,figsize=(21,7.9))\ndf=data.groupby([\"country\"]).sum();\ndf=df.sort_values(by=\"suicides\/100k pop\",ascending=False).head(10)\nsns.barplot(y=df.index,x=df[\"suicides\/100k pop\"],ax=ax[0])\n# ax[0].set_xticklabels( df.index,rotation = 40, ha=\"right\")\n\n\nlabels = df.index\nsizes=[df.iloc[i][\"suicides\/100k pop\"]\/df[\"suicides\/100k pop\"].sum() for i in range(len(countries))]\nexplode = (0.1, 0.1, 0.1, 0.1,0.1,0.1,0.1,0.1,0.1,0.1)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\nax[0].set_xlim([7000,None])\nax[1].pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","9a0788cd":"fig,ax=plt.subplots(1,1,figsize=(11,6.3))\n\n# countries=countries\nfor i in range(len(countries)):\n  d=data.loc[data['country']==countries[i]]\n  df=pd.concat([df,d])\nsns.barplot(data=df,x=\" gdp_for_year ($) \",y=\"country\",ax=ax);\n","474080e8":"# countries=np.array(df.index)[:5]\n","8b0ec02d":"fig,ax=plt.subplots(3,2,figsize=(17,13.2))\nindex=0\nfor i in range(3):\n  for j in range(2):\n    if(i==2 and j==1):\n      break\n    sns.lineplot(x=\"year\",data=data.loc[data[\"country\"]==countries[index]],y=\"suicides_no\",label=countries[index],ax=ax[i][j]);\n    ax[i][j].set_ylabel(\"suicides_no\");\n    \n    index+=1\nax[-1, -1].axis('off')\n\nplt.tight_layout()\n","3c63c39a":"!pip install pycountry","0355866a":"import pycountry\n\ndf1=data\nlist_countries = data['country'].unique().tolist()\nd_country_code = {} \n\nfor country in list_countries:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        \n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        print('could not add ISO 3 code for ->', country)\n        \n        d_country_code.update({country: ' '})\n\nfor k, v in d_country_code.items():\n    df1.loc[(df1.country == k), 'iso_alpha'] = v\n\nfig = px.choropleth(data_frame = df1,\n                    locations= \"iso_alpha\",\n                    color= \"suicides_no\", \n                    hover_name= \"country\",\n                    color_continuous_scale= 'RdYlGn',  \n                    animation_frame= \"year\")\n\nfig.show()","9204c665":"Here it shows gdp per year for each country. ","d6139c43":"Create two lists containing categoricals and numericals.","7681271c":"### If you liked it, pls upvote and give some feedback","c8fd8d53":"Here, HDI for year have very much NaN values.","6f9dcb10":"Check **null values** in dataframe.","a2ca5dff":"# Suicides every 4 Year \n","a5ba4599":"Make \"gdp for year\" as int.\n<br>\nHence, 12,456(string) convert to 12456(int64).","ecbc6482":"#Generation, Age and Sex","e72d0c23":"## Suicides by each year (for 5 countries)","159270bc":"Russia seems to have many suicides from 1985-2016.\n\n\n---\n\n## Suicides by 100k population for each country\n","0a3e30e1":"# **Country**","fcd23562":"# SUICIDES RATES FROM 1985 to 2016\n#### (keep coding and don't commit suicide)\n","6e43eec0":"Here comes worldmap plot with animation.\n","664c4192":"Our data does not have some countries information. "}}