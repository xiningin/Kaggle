{"cell_type":{"98021f52":"code","93821f07":"code","af08519a":"code","75dd4814":"code","1116a1cf":"code","db1f0327":"code","3e476cb6":"code","113b949b":"code","13b67951":"code","be412a6f":"code","590645dd":"code","35500786":"code","f3c8c189":"code","e655ce85":"code","38f0ce53":"code","d708ec89":"code","e9e911c2":"code","66b28c86":"code","ca6cba87":"code","2d768e37":"code","2beeed39":"code","0977df19":"code","fa1e1039":"code","7c52db11":"code","4126ab98":"code","813fa5d2":"code","707a2a66":"code","a5aa2895":"code","2f2f678b":"code","d7314887":"code","795c2b0a":"code","1405e8a7":"code","2120f34b":"code","983e4034":"code","4981c155":"code","216723c1":"code","1385adaa":"code","731d4d16":"code","9240e29c":"code","8c5ef98e":"code","d3dd2675":"code","512b5d88":"code","cc546e3c":"code","36fe83f9":"code","1284aa56":"markdown","15428a13":"markdown","62f27f51":"markdown","c6f13faa":"markdown","bda3faba":"markdown","1224ba8f":"markdown","79905037":"markdown"},"source":{"98021f52":"import pandas as pd       \nimport matplotlib as mat\nimport matplotlib.pyplot as plt    \nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\n\nfrom hyperopt.pyll.base import scope\nfrom hyperopt import hp, fmin, tpe, Trials\nfrom hyperopt import space_eval\n\nimport warnings\nwarnings.filterwarnings('ignore')","93821f07":"df_train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv', index_col= 'PassengerId')\n#X_train = df_train.copy().drop('Survived', axis = 1)\nY_train = df_train['Survived']\n\nX_test = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv', index_col = 'PassengerId')\n\n#Using Submission File as Pseudo Label\npseudo_label = pd.read_csv('..\/input\/tps-apr-2021-pseudo-labeling-voting-ensemble\/voting_submission.csv')","af08519a":"#Included for PseudoLabel\ndf_test = X_test.copy()\ndf_test['Survived'] = [x for x in pseudo_label.Survived]\n#df_test\nY_test = df_test['Survived']","75dd4814":"df_train","1116a1cf":"df_train.describe()","db1f0327":"df_train.info()","3e476cb6":"X_test.info()","113b949b":"for col in ['Cabin','Ticket', 'Name']:\n    print(df_train[col].value_counts())","13b67951":"df_train['Cabin'] = df_train['Cabin'].fillna(\"None\")\ndf_train['CabinType'] = df_train['Cabin'].str[0]\n\nX_test['Cabin'] = X_test['Cabin'].fillna(\"None\")\nX_test['CabinType'] = X_test[\"Cabin\"].str[0]\n\ndf_train['CabinType'].value_counts()","be412a6f":"plt.figure(figsize=(6,4))\n\nax = sns.countplot(x=\"Survived\", data=df_train, palette=\"BuPu\")\n\nplt.xlabel(\"Status\", fontsize= 12)\nplt.ylabel(\"N_Passangers\", fontsize= 12)\nplt.title(\"Survived vs Deceased\", fontsize= 13)\nplt.ylim(0,100000)\nplt.xticks([0,1], ['Deceased', 'Survived'])\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.32, p.get_height()+3000))\n    \nplt.show()","590645dd":"plt.figure(figsize=(6,4))\n\ndf_train['Survived'].value_counts().plot(kind='pie',labels = ['',''], autopct='%1.1f%%')\n\nplt.legend(labels=['Deceased', 'Survived'])\nplt.show()","35500786":"cont_features = ['Age', 'Fare']\n\nplt.figure(figsize=(12,7))\n\nfor i,col in enumerate(cont_features):    \n    plt.subplot(2,1,i + 1)\n    sns.distplot(df_train.loc[:,col])\n    plt.ylabel('')\nplt.show()","f3c8c189":"plt.figure(figsize=(12,7))\n\nfor i,col in enumerate(cont_features):    \n    plt.subplot(2,1,i + 1)\n    sns.kdeplot(df_train.loc[(df_train['Survived'] == 0), col], label = 'Deceased', shade = True)\n    sns.kdeplot(df_train.loc[(df_train['Survived'] == 1), col], label = 'Survived', shade = True)\n    plt.ylabel('')\n    plt.legend()\nplt.show()","e655ce85":"df_train['AgeBin'] = pd.cut(df_train['Age'],[0, 20, 40, 60, 100])\nprint(df_train['AgeBin'].value_counts())\n\ndf_train['FareBin'] = pd.cut(df_train['Fare'],[0, 20, 40, 60, 80, 100, 200, 300, 1000])\nprint(df_train['FareBin'].value_counts())","38f0ce53":"plt.figure(figsize=(12,4))\n\ndf_train['AgeBin'] = df_train['AgeBin'].astype('str')\ndf_train['AgeBin'] = df_train['AgeBin'].fillna('None')\n#print(df_train['AgeBin'].value_counts())\n\nAgeBin_order = ['None', '(0, 20]', '(20, 40]', '(40, 60]', '(60, 100]']\n\nsns.countplot(data = df_train, x = 'AgeBin', hue=\"Survived\", palette = 'rocket', order = AgeBin_order)\n\nplt.show()","d708ec89":"df_train['Survived'].groupby(df_train['AgeBin']).value_counts(normalize = True)","e9e911c2":"plt.figure(figsize=(12,4))\n\ndf_train['FareBin'] = df_train['FareBin'].astype('str')\ndf_train['FareBin'] = df_train['FareBin'].fillna('None')\n#print(df_train['FareBin'].value_counts())\n\nFareBin_order = ['None', '(0, 20]', '(20, 40]', '(40, 60]', '(60, 80]', '(80, 100]', '(100, 200]', '(200, 300]', '(300, 1000]']\n\n\nsns.countplot(data = df_train, x = 'FareBin', hue=\"Survived\", palette = 'rocket', order = FareBin_order)\n\nplt.show()","66b28c86":"df_train['Survived'].groupby(df_train['FareBin']).value_counts(normalize = True)","ca6cba87":"disc_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'CabinType']\ndf_train['Embarked'] = df_train['Embarked'].fillna('None')\n\nplt.figure(figsize=(15,11))\n\nfor i,col in enumerate(disc_features):    \n    plt.subplot(3,2,i + 1)\n    sns.countplot(data = df_train, x = col, palette = 'rocket')\n    plt.ylabel(\"\")\n\nplt.show()","2d768e37":"plt.figure(figsize=(15,11))\n\nfor i,col in enumerate(disc_features):    \n    plt.subplot(3,2,i + 1)\n    sns.countplot(data = df_train, x = col, hue=\"Survived\", palette = 'rocket')\n    plt.ylabel(\"\")\n\nplt.show()","2beeed39":"print(df_train['Survived'].groupby(df_train['Embarked']).value_counts(normalize = True))\nprint(df_train['Survived'].groupby(df_train['CabinType']).value_counts(normalize = True))","0977df19":"df_train['IsAlone'] = (df_train['SibSp'] + df_train['Parch']).apply(lambda x: 0 if x > 0 else 1)\ndf_train['IsAlone'].value_counts()\n\nplt.figure(figsize=(12,4))\n\nsns.countplot(data = df_train, x = 'IsAlone', hue=\"Survived\", palette = 'rocket')\n\nplt.show()\n","fa1e1039":"X_train = df_train.copy().drop('Survived', axis = 1)\nX_train","7c52db11":"Sex_map = {'male': 0, 'female': 1}\nX_train['Sex'] = X_train['Sex'].map(Sex_map).astype('int')\n\nAgeBin_map = {'None': 0, \n              '(0, 20]': 1, \n              '(20, 40]': 2, \n              '(40, 60]': 3, \n              '(60, 100]': 4}\nX_train['AgeBin'] = X_train['AgeBin'].map(AgeBin_map).astype('int')\n\nFareBin_map = {'None': 0,\n                '(0, 20]': 1, \n                '(20, 40]': 2, \n                '(40, 60]': 3,\n                '(60, 80]': 4, \n                '(80, 100]': 5, \n                '(100, 200]': 6, \n                '(200, 300]': 7, \n                '(300, 1000]': 8}\nX_train['FareBin'] = X_train['FareBin'].map(FareBin_map).astype('int')\n\nEmbarked_map = {'None': 0,\n                'S': 1, \n                'Q': 2,  \n                'C': 3}\nX_train['Embarked'] = X_train['Embarked'].map(Embarked_map).astype('int')\n\nCabinType_map = {'N': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5,\n                 'F': 6, 'G': 7, 'T': 8}\nX_train['CabinType'] = X_train['CabinType'].map(CabinType_map).astype('int')","4126ab98":"X_train_enc = X_train.copy().drop(['Name', 'Ticket', 'Cabin', 'Age', 'Fare'], axis = 1)\nX_train_enc","813fa5d2":"#categorical_ft for catboost\ncategorical_ft = ['Sex', 'Pclass', 'AgeBin', 'FareBin', 'Embarked', 'CabinType', 'IsAlone']\n\ndef cv_function (X_train, Y_train, model):\n    \n    kfold = StratifiedKFold(n_splits = 5)\n    accuracies = []\n   \n    cv_pred = np.zeros((100000,))\n    \n    for idx in kfold.split(X=X_train, y=Y_train):\n        train_idx, test_idx = idx[0], idx[1]\n        xtrain = X_train.iloc[train_idx]\n        ytrain = Y_train.iloc[train_idx]\n        xtest = X_train.iloc[test_idx]\n        ytest = Y_train.iloc[test_idx]\n        \n        # fit model for current fold\n        if model == 'catboost_model':\n            print('Catboost')\n            model.fit(xtrain, ytrain, early_stopping_rounds = 100, eval_set = [(xtest,ytest)]\n                      ,cat_features = categorical_ft, verbose = False, plot = False)\n        else:\n            model.fit(xtrain, ytrain, \n                  early_stopping_rounds = 100, eval_set = [(xtest,ytest)], verbose = False)\n\n        #create predictions\n        preds = model.predict(xtest)\n        cv_pred[test_idx] = preds\n                              \n        # calculate and append accuracy\n        fold_accuracy = metrics.accuracy_score(ytest,preds)\n        print(\"ACC: {0:0.4f}\". format(fold_accuracy))\n        accuracies.append(fold_accuracy)\n        \n    print (np.mean(accuracies))\n    #return np.mean(accuracies)\n    return cv_pred","707a2a66":"xgb_model = XGBClassifier (n_estimators = 1000, learning_rate = 0.01, max_depth = 7\n                           , subsample = 0.8, colsample_bytree = 0.8, min_child_weight = 3\n                           , random_state = 42, eval_metric = 'logloss')","a5aa2895":"#xgb_cvpred = cv_function(X_train_enc, Y_train, xgb_model) \n\n#0.77967999 #1000\/0.01\/100 max_depth = 7, subsample = 0.8, colsample_bytree = 0.8, min_child_weight = 3","2f2f678b":"lgbm_model = LGBMClassifier(n_estimators = 1500, learning_rate = 0.03, random_state = 42)","d7314887":"#lgbm_cvpred = cv_function(X_train_enc, Y_train, lgbm_model)\n\n#0.77950999 #1500\/0.03\/100","795c2b0a":"catboost_model = CatBoostClassifier (n_estimators = 1500, random_state = 42)","1405e8a7":"#catboost_cvpred = cv_function(X_train_enc, Y_train, catboost_model)\n#0.78004000 #1500\/0.0?\/100","2120f34b":"#Just checking\n#print(\"ACC: {0:0.6f}\".format(metrics.accuracy_score(Y_train,xgb_cvpred)))\n#print(\"ACC: {0:0.6f}\".format(metrics.accuracy_score(Y_train,lgbm_cvpred)))\n#print(\"ACC: {0:0.6f}\".format(metrics.accuracy_score(Y_train,catboost_cvpred)))\n\n#voting_cvpred = xgb_cvpred + lgbm_cvpred + catboost_cvpred\n#voting_cvpred = np.where(voting_cvpred > 2, 1, 0)\n#voting_cvpred\n#print(\"ACC: {0:0.6f}\".format(metrics.accuracy_score(Y_train,voting_cvpred)))","983e4034":"X_test_enc = X_test.copy()\nX_test_enc","4981c155":"X_test_enc['AgeBin'] = pd.cut(X_test_enc['Age'],[0, 20, 40, 60, 100])\nX_test_enc['AgeBin'] = X_test_enc['AgeBin'].astype('str')\nX_test_enc['AgeBin'] = X_test_enc['AgeBin'].fillna('None')\n\nX_test_enc['FareBin'] = pd.cut(X_test_enc['Fare'],[0, 20, 40, 60, 80, 100, 200, 300, 1000])\nX_test_enc['FareBin'] = X_test_enc['FareBin'].astype('str')\nX_test_enc['FareBin'] = X_test_enc['FareBin'].fillna('None')\n\nX_test_enc['IsAlone'] = (X_test_enc['SibSp'] + X_test_enc['Parch']).apply(lambda x: 0 if x > 0 else 1)\n\n\nX_test_enc.info()","216723c1":"X_test_enc['Sex'] = X_test_enc['Sex'].map(Sex_map).astype('int')\n\nX_test_enc['AgeBin'] = X_test_enc['AgeBin'].map(AgeBin_map).astype('int')\n\nX_test_enc['FareBin'] = X_test_enc['FareBin'].map(FareBin_map).astype('int')\n\nX_test_enc['Embarked'] = X_test_enc['Embarked'].fillna('None')\nX_test_enc['Embarked'] = X_test_enc['Embarked'].map(Embarked_map).astype('int')\n\nX_test_enc['CabinType'] = X_test_enc['CabinType'].map(CabinType_map).astype('int')","1385adaa":"X_test_enc = X_test_enc.drop(['Name', 'Ticket', 'Cabin', 'Age', 'Fare'], axis = 1)\nX_test_enc.info()","731d4d16":"#PseudoLabel Step: Joining Train and Test sets\nX = pd.concat([X_train_enc, X_test_enc], axis=0)\nX\n","9240e29c":"Y = pd.concat([Y_train, Y_test], axis=0)\nY","8c5ef98e":"def prediction (X_train, Y_train, model, X_test):\n    \n    kfold = StratifiedKFold(n_splits = 5)\n\n    y_pred = np.zeros(len(X_test))\n    \n    for idx in kfold.split(X=X_train, y=Y_train):\n        train_idx, val_idx = idx[0], idx[1]\n        xtrain = X_train.iloc[train_idx]\n        ytrain = Y_train.iloc[train_idx]\n        xval = X_train.iloc[val_idx]\n        yval = Y_train.iloc[val_idx]\n        \n        # fit model for current fold\n        if model == 'catboost_model':\n            print('Catboost')\n            model.fit(xtrain, ytrain, early_stopping_rounds = 100, eval_set = [(xval,yval)]\n                      ,cat_features = categorical_ft, verbose = False, plot = False)\n        else:\n            model.fit(xtrain, ytrain, \n                  early_stopping_rounds = 100, eval_set = [(xval,yval)], verbose = False)\n\n        #create predictions\n            \n        y_pred += model.predict_proba(X_test)[:, 1]\/kfold.n_splits\n        print(y_pred)\n        \n        val_pred = model.predict(xval)\n        # calculate and append accuracy\n        fold_accuracy = metrics.accuracy_score(yval,val_pred)\n        print(\"ACC: {0:0.4f}\". format(fold_accuracy))\n  \n    return y_pred","d3dd2675":"#xgb_pred = prediction (X_train_enc, Y_train, xgb_model, X_test_enc)\n#lgbm_pred = prediction (X_train_enc, Y_train, lgbm_model, X_test_enc)\n#catboost_pred = prediction (X_train_enc, Y_train, catboost_model, X_test_enc)\n\n#PseudoLabel\nxgb_pred = prediction (X, Y, xgb_model, X_test_enc)\nlgbm_pred = prediction (X, Y, lgbm_model, X_test_enc)\ncatboost_pred = prediction (X, Y, catboost_model, X_test_enc)","512b5d88":"xgb_finalpred = np.where(xgb_pred>0.5, 1, 0)\nlgbm_finalpred= np.where(lgbm_pred>0.5, 1, 0)\ncatboost_finalpred= np.where(catboost_pred>0.5, 1, 0)","cc546e3c":"#Voting\nfinal_pred = xgb_finalpred + lgbm_finalpred + catboost_finalpred\nfinal_pred = np.where(final_pred > 2, 1, 0)\n \n#final_test = pd.DataFrame(final_pred)\n#final_test.value_counts()","36fe83f9":"output = pd.DataFrame({'PassengerId': X_test.index,\n                     'Survived': final_pred})\noutput.to_csv('submission.csv', index=False)\n\noutput","1284aa56":"# <center>Tabular Playground Series - April\/2021<center>\n## <center>EDA - 3 Models - Voting - Pseudo Labelling<center>","15428a13":"## Exploring the Data","62f27f51":"## Prediction","c6f13faa":"## Preparing the Test Data","bda3faba":"## Preparing Training Data and Creating Models","1224ba8f":"## Importing Libraries and Datasets","79905037":"Topics and notebooks that inspired this notebook.\n\n-Topics:\n* [How TicketNumber and CabinNumber are helping in prediction?](https:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021\/discussion\/233445)\n* [Pseudolabelling - Tips and tricks](https:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021\/discussion\/231738)\n\n-Notebooks:\n* [TPS Apr 2021 pseudo labeling\/voting ensemble (Submission file used as Pseudo Label)](https:\/\/www.kaggle.com\/hiro5299834\/tps-apr-2021-pseudo-labeling-voting-ensemble)\n* [TPS-Apr2021 Catboost Run Pseudo label](https:\/\/www.kaggle.com\/gomes555\/tps-apr2021-catboost-run-pseudo-label)\n* [LightAutoML interpretable model - AutoWoE](https:\/\/www.kaggle.com\/alexryzhkov\/lightautoml-interpretable-model-autowoe)"}}