{"cell_type":{"0e59d736":"code","dbee519d":"code","79a7869d":"code","a0fda68a":"code","e8fa82fa":"code","9177c674":"code","745fccf3":"code","33f7c086":"code","d4ba90d4":"code","c3dd6f89":"code","dd6da6d9":"code","f37ec0e9":"code","49176686":"code","b08fb73b":"code","be211871":"code","50352e07":"code","bcf4c140":"code","815e4315":"code","d30b8dbb":"code","53ba44eb":"code","7d55a92d":"code","6e660e2e":"code","fcf690d8":"code","362043a7":"code","97dd065e":"code","365d0374":"markdown","be0cca9c":"markdown","4fa89011":"markdown","ceedd192":"markdown"},"source":{"0e59d736":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import parallel_coordinates\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn.model_selection import KFold, train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set_style('whitegrid')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings\nwarnings.filterwarnings('ignore')\n\n        \npd.options.display.max_rows = 999\npd.options.display.max_columns = 999\n# Any results you write to the current directory are saved as output.","dbee519d":"train = pd.read_csv('..\/input\/learn-together\/train.csv')\ntest = pd.read_csv('..\/input\/learn-together\/test.csv')\n\ndf = pd.concat([train, test])","79a7869d":"display(df.head())","a0fda68a":"df.info()","e8fa82fa":"target_dist = df['Cover_Type'].value_counts()\/len(train)","9177c674":"plt.figure(figsize=(10, 6))\nplt.title('Target Variable Distribution')\nsns.barplot(x=target_dist.index, y=target_dist.values, alpha=.85)\nplt.show()","745fccf3":"temp = df[['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', 'Cover_Type']]\ntemp = temp.groupby('Cover_Type').mean().reset_index()","33f7c086":"trace1 = go.Parcoords(\n        line=dict(color=temp['Cover_Type'],\n                 colorscale = 'Electric'),\n        dimensions = list([\n            dict(range = [temp['Hillshade_3pm'].min(), temp['Hillshade_9am'].max()],\n                 label = 'Hillshade_9am', values = temp['Hillshade_9am'].values),\n            dict(range = [temp['Hillshade_3pm'].min(), temp['Hillshade_9am'].max()],\n                 label = 'Hillshade_Noon', values = temp['Hillshade_Noon'].values),\n            dict(range = [temp['Hillshade_3pm'].min(), temp['Hillshade_9am'].max()],\n                 label = 'Hillshade_3pm', values = temp['Hillshade_3pm'].values)\n        ])\n)\n\ndata = [trace1]\n\nfig = go.Figure(data=data)\n\niplot(fig)","d4ba90d4":"f, ax = plt.subplots(2, 2, figsize=(25, 12))\n\nax[0, 0].set_title('Elevation Distribution by Cover Type')\nsns.violinplot(df['Cover_Type'], df['Elevation'], ax=ax[0,0])\nax[0, 1].set_title('Horizontal Distance to Fire Distribution by Cover Type')\nsns.violinplot(df['Cover_Type'], df['Horizontal_Distance_To_Fire_Points'], ax=ax[0,1])\nax[1, 0].set_title('Horizontal Distance to Hydrology Distribution by Cover Type')\nsns.violinplot(df['Cover_Type'], df['Horizontal_Distance_To_Hydrology'], ax=ax[1,0])\nax[1, 1].set_title('Horizontal Distance to Roadways Distribution by Cover Type')\nsns.violinplot(df['Cover_Type'], df['Horizontal_Distance_To_Roadways'], ax=ax[1,1])\nplt.show()\nplt.figure(figsize=(25, 6))\nplt.title('Vertical Distance To Hydrology Distribution by Cover Type')\nsns.violinplot(x='Cover_Type', y='Vertical_Distance_To_Hydrology', data=df)\nplt.show()","c3dd6f89":"aspect = df.groupby('Cover_Type')['Aspect'].mean()\nslope = df.groupby('Cover_Type')['Slope'].mean()","dd6da6d9":"f, ax = plt.subplots(1, 2, figsize=(25, 6))\n\nax[0].set_title('Average Aspect by Cover Type')\nsns.barplot(x=aspect.index, y=aspect.values, alpha=.85, ax=ax[0])\nax[1].set_title('Average Slope by Cover Type')\nsns.barplot(x=slope.index, y=slope.values, alpha=.85, ax=ax[1])\n\nplt.show()","f37ec0e9":"df['HF1'] = df['Horizontal_Distance_To_Hydrology']+df['Horizontal_Distance_To_Fire_Points']\ndf['HF2'] = abs(df['Horizontal_Distance_To_Hydrology']-df['Horizontal_Distance_To_Fire_Points'])\ndf['HR1'] = abs(df['Horizontal_Distance_To_Hydrology']+df['Horizontal_Distance_To_Roadways'])\ndf['HR2'] = abs(df['Horizontal_Distance_To_Hydrology']-df['Horizontal_Distance_To_Roadways'])\ndf['FR1'] = abs(df['Horizontal_Distance_To_Fire_Points']+df['Horizontal_Distance_To_Roadways'])\ndf['FR2'] = abs(df['Horizontal_Distance_To_Fire_Points']-df['Horizontal_Distance_To_Roadways'])\n\ndf['slope_hyd'] = (df['Horizontal_Distance_To_Hydrology']**2+df['Vertical_Distance_To_Hydrology']**2)**0.5\n\ndf.slope_hyd=df.slope_hyd.map(lambda x: 0 if np.isinf(x) else x) # remove infinite value if any\n\ndf['Mean_Amenities'] = (df.Horizontal_Distance_To_Fire_Points + df.Horizontal_Distance_To_Hydrology + df.Horizontal_Distance_To_Roadways) \/ 3 \ndf['Mean_Fire_Hyd'] = (df.Horizontal_Distance_To_Fire_Points + df.Horizontal_Distance_To_Hydrology) \/ 2 ","49176686":"soils = ['Soil_Type1', 'Soil_Type10', 'Soil_Type11',\n       'Soil_Type12', 'Soil_Type13', 'Soil_Type14', 'Soil_Type15',\n       'Soil_Type16', 'Soil_Type17', 'Soil_Type18', 'Soil_Type19',\n       'Soil_Type2', 'Soil_Type20', 'Soil_Type21', 'Soil_Type22',\n       'Soil_Type23', 'Soil_Type24', 'Soil_Type25', 'Soil_Type26',\n       'Soil_Type27', 'Soil_Type28', 'Soil_Type29', 'Soil_Type3',\n       'Soil_Type30', 'Soil_Type31', 'Soil_Type32', 'Soil_Type33',\n       'Soil_Type34', 'Soil_Type35', 'Soil_Type36', 'Soil_Type37',\n       'Soil_Type38', 'Soil_Type39', 'Soil_Type4', 'Soil_Type40', 'Soil_Type5',\n       'Soil_Type6', 'Soil_Type7', 'Soil_Type8', 'Soil_Type9']","b08fb73b":"bins_columns = ['Aspect',\n                'Elevation',\n                'Hillshade_3pm',\n                'Hillshade_9am',\n                'Hillshade_Noon',\n                'Horizontal_Distance_To_Hydrology',\n                'Horizontal_Distance_To_Fire_Points',\n                'Horizontal_Distance_To_Roadways',\n                'Vertical_Distance_To_Hydrology',\n                'Slope', 'HF1', 'HF2', 'HR1', 'HR2', \n                'FR1', 'FR2', 'slope_hyd', 'Mean_Amenities',\n                'Mean_Fire_Hyd'\n               ]","be211871":"# for col in bins_columns:\n#     df[col] = pd.qcut(df[col], 4)\n#     feat_dummies = pd.get_dummies(df[col], prefix=col)\n#     df = pd.concat([df, feat_dummies], axis=1)\n    \n# df.drop(bins_columns, 1, inplace=True)","50352e07":"print(f'The final dataset has {df.shape[1]} features') ","bcf4c140":"train = df[df['Cover_Type'].notnull()]\ntest = df[df['Cover_Type'].isnull()].drop('Cover_Type', 1)\n\ntrain['Cover_Type'] = train['Cover_Type'].astype('int')","815e4315":"from sklearn.model_selection import KFold, train_test_split, cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","d30b8dbb":"X = train.drop(['Cover_Type', 'Id'], 1)\ny = train['Cover_Type']","53ba44eb":"lr = LogisticRegression()\nrf = RandomForestClassifier(random_state=1)\ndt = DecisionTreeClassifier(random_state=1)\n\nkfold = KFold(11, random_state=1)","7d55a92d":"def train_model(model, X, y, cv, scoring_metric='accuracy'):\n    accuracy = cross_val_score(model, X, y, cv=kfold, scoring=scoring_metric)\n    return accuracy.mean()","6e660e2e":"%%time\nprint('Random Forest Results:', train_model(rf, X, y, kfold))","fcf690d8":"rf.fit(X, y)\npredictions = rf.predict(test.drop('Id', 1))","362043a7":"results = pd.DataFrame(columns=['Id', 'Cover_Type'])\nresults['Id'] = test['Id']\nresults['Cover_Type'] = predictions","97dd065e":"results.to_csv('rf_testing2.csv', index=False)","365d0374":"### Distance Features","be0cca9c":"### Aspect and Slope","4fa89011":"### Target Variable Distribution","ceedd192":"### Hillshade by CoverType"}}