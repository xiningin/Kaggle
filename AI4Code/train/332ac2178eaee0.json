{"cell_type":{"87c7afe6":"code","446a8b1b":"code","63ddab28":"code","57bee104":"code","43518b63":"code","93c4d3c5":"code","77e0a310":"code","c7c4513d":"code","1a961323":"code","50524e48":"code","939023f4":"code","1d8e2037":"code","3df8be00":"code","47eee6a3":"code","51c9d7c4":"code","eaeaed5b":"code","790b1ebd":"code","6f7a5ddd":"code","224a5024":"code","3fec3ef7":"code","b6fbec57":"code","9102e6b1":"code","1cb4fd98":"code","79c5447e":"code","2beed89b":"code","665ff12e":"code","4cc489e3":"code","39225527":"code","0e21b73d":"code","4bd9a7af":"code","60c407b6":"code","7d74ad53":"code","11eefc86":"code","ef57ead1":"code","62065869":"code","19e4959a":"code","bd1500d9":"code","abda7a41":"code","b8565b64":"code","af01df79":"code","2469e505":"code","0b752545":"code","1768ed4e":"code","2c06e3b3":"code","a7a15498":"code","9a6fc625":"code","f10307eb":"code","91f277a1":"code","beb403bc":"code","6d3698aa":"code","9e031567":"code","51c92217":"code","209a53f0":"markdown","82772628":"markdown","891d70b4":"markdown","286a34b1":"markdown","3c555a03":"markdown","38c60bf5":"markdown","e978d801":"markdown","7003428e":"markdown","e540f695":"markdown"},"source":{"87c7afe6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","446a8b1b":"import matplotlib.pyplot as plt\nimport sklearn","63ddab28":"df=pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/TrainAndValid.csv',low_memory=False)","57bee104":"df.info()","43518b63":"df.isna().sum()","93c4d3c5":"fig,ax =plt.subplots()\nax.scatter(df['saledate'][:1000],df['SalePrice'][:1000])","77e0a310":"df.SalePrice.plot.hist()","c7c4513d":"df.columns","1a961323":"df=pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/TrainAndValid.csv',low_memory=False,parse_dates=['saledate'])","50524e48":"df.saledate.head()","939023f4":"fig,ax =plt.subplots()\nax.scatter(df['saledate'][:1000],df['SalePrice'][:1000])","1d8e2037":"df.head()","3df8be00":"df.saledate.head(20)","47eee6a3":"df.sort_values(by='saledate',inplace=True,ascending=True)","51c9d7c4":"df_temp=df.copy()","eaeaed5b":"df_temp['saleYear']=df_temp.saledate.dt.year","790b1ebd":"df_temp['saleMonth']=df_temp.saledate.dt.month\ndf_temp['saleDay']=df_temp.saledate.dt.day\ndf_temp['saleDayofWeek']=df_temp.saledate.dt.dayofweek\ndf_temp['saleDayofYear']=df_temp.saledate.dt.dayofyear","6f7a5ddd":"df_temp.head().T","224a5024":"df_temp.drop('saledate',axis=1,inplace=True)","3fec3ef7":"#find columns which contain string\nfor label , content in df_temp.items():\n    if pd.api.types.is_string_dtype(content):\n        df_temp[label]=content.astype('category').cat.as_ordered()\n       ","b6fbec57":"df_temp.info()","9102e6b1":"df_temp.state.cat.categories","1cb4fd98":"df_temp.isnull().sum()\/len(df_temp)","79c5447e":"#fill numeric rows with median\nfor label , content in df_temp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            df_temp[label]=content.fillna(content.median())\n       ","2beed89b":"#Turn categories into number and fill missing values\nfor label , content in df_temp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df_temp[label]=pd.Categorical(content).codes +1\n        \n            ","665ff12e":"df_temp.isna().sum() #no  more missing values","4cc489e3":"len(df_temp)","39225527":"\nfrom sklearn.ensemble import RandomForestRegressor","0e21b73d":"\n%%time\nmodel=RandomForestRegressor(n_jobs=-1,random_state=42)\n\nmodel.fit(df_temp.drop('SalePrice',axis=1),df_temp['SalePrice'])","4bd9a7af":"#Score the model\nmodel.score(df_temp.drop('SalePrice',axis=1),df_temp['SalePrice'])","60c407b6":"df_val = df_temp[df_temp.saleYear==2012]\ndf_train = df_temp[df_temp.saleYear !=2012]\nlen(df_val),len(df_train)","7d74ad53":"#Split data into x and Y\nX_train,y_train=df_train.drop('SalePrice',axis=1),df_train['SalePrice']\nX_valid,y_valid=df_val.drop('SalePrice',axis=1),df_val['SalePrice']","11eefc86":"X_train.shape,y_train.shape,X_valid.shape,y_valid.shape","ef57ead1":"#Creating an evalutaion function (competion uses RMSLE)\nfrom sklearn.metrics import mean_squared_log_error,mean_absolute_error,r2_score\ndef rmsle(y_test,y_pred):\n    \"\"\"\n    Calculates root mena squared log error\n    \"\"\"\n    return np.sqrt(mean_squared_log_error(y_test,y_pred))\n#Creating function to evaluate model on few different levels\ndef show_scores(model):\n    train_preds=model.predict(X_train)\n    val_preds=model.predict(X_valid)\n    scores={\"Training MAE\":mean_absolute_error(y_train,train_preds)\n            ,\"Valid MaE\":mean_absolute_error(y_valid,val_preds),\n           \"Training RMSLE\":rmsle(y_train,train_preds),\n           \"valid RMSLE\": rmsle(y_valid,val_preds),\n           \"Training R^2\":r2_score(y_train,train_preds),\n           \"Valid R^2\":r2_score(y_valid,val_preds)}\n    return scores","62065869":"#Change max samples values\nmodel=RandomForestRegressor(n_jobs=-1,\n                           random_state=42,\n                           max_samples=10000)","19e4959a":"%%time\nmodel.fit(X_train,y_train)","bd1500d9":"show_scores(model)","abda7a41":"%%time\nfrom sklearn.model_selection import RandomizedSearchCV\n#Different RandomForestRegressor hyberparameters\nrf_grid={\"n_estimators\":np.arange(10,100,10),\n         \"max_depth\":[None,3,5,10],\n         \"min_samples_split\":np.arange(2,20,2),\n         \"min_samples_leaf\":np.arange(1,20,2),\n         \"max_features\":[0.5,1,\"sqrt\",\"auto\"],\n         \"max_samples\":[10000]\n    \n}\nrs_model=RandomizedSearchCV(RandomForestRegressor(n_jobs=-1,\n                                                 random_state=42),\n                                                 param_distributions=rf_grid,\n                           n_iter=50,\n                           cv=5,\n                           verbose=True)\nrs_model.fit(X_train,y_train)","b8565b64":"rs_model.best_params_","af01df79":"show_scores(rs_model)","2469e505":"ideal_model=RandomForestRegressor(n_estimators=40,\n                                 min_samples_leaf=1,\n                                 min_samples_split=14,\n                                 max_features=0.5,\n                                 n_jobs=-1,\n                                 max_samples=None)\nideal_model.fit(X_train,y_train)","0b752545":"#trained on all the data\nshow_scores(ideal_model)","1768ed4e":"df_test=pd.read_csv(\"\/kaggle\/input\/bluebook-for-bulldozers\/Test.csv\",\n                   low_memory=False,\n                   parse_dates=[\"saledate\"])\ndf_test.head()","2c06e3b3":"test_preds=ideal_model.predict(df_test)","a7a15498":"df_test.isna().sum()","9a6fc625":"def preprocess_data(df):\n    \"\"\"\n    Perform trasnsormation on df and returns transformed df.\n    \"\"\"\n    df['saleYear']=df.saledate.dt.year\n    df['saleMonth']=df.saledate.dt.month\n    df['saleDay']=df.saledate.dt.day\n    df['saleDayofWeek']=df.saledate.dt.dayofweek\n    df['saleDayofYear']=df.saledate.dt.dayofyear\n    df.drop('saledate',axis=1,inplace=True)\n    #find columns which contain string\n    for label , content in df.items():\n        if pd.api.types.is_string_dtype(content):\n            df[label]=content.astype('category').cat.as_ordered()\n    #fill numeric rows with median\n    for label , content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                 df[label]=content.fillna(content.median())\t\n    #Turn categories into number and fill missing values\n    for label , content in df.items():\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label]=pd.Categorical(content).codes +1\n    \n    return df\n","f10307eb":"preprocess_data(df_test)","91f277a1":"df_test.isna().sum()","beb403bc":"test_preds=ideal_model.predict(df_test)","6d3698aa":"test_preds","9e031567":"#formatting predictions\ndf_preds=pd.DataFrame()\ndf_preds['SalesID']=df_test['SalesID']\ndf_preds['SalePrice']=test_preds\ndf_preds","51c92217":"#export\ndf_preds.to_csv(\"\/kaggle\/working\/test_predictions.csv\",index=False)","209a53f0":"## parsing dates","82772628":"# Predicting the sales Price of Bulldozers","891d70b4":"## geting test dataset same as training dataset","286a34b1":"## Builing an evaluation function","3c555a03":"### Make prediction on test data","38c60bf5":"## testing our model on a subset(to tune hyperparameters)","e978d801":"## Splitting data into training and validation set\n","7003428e":"Removing sale Date","e540f695":"## Hyperparameter tuning wiwth RandomisedSearchCV"}}