{"cell_type":{"191efd14":"code","5b396f91":"code","e7e9649d":"code","b124f05e":"code","b829f51b":"code","619b88e6":"code","2ebe5307":"code","bb7a8999":"code","175136b4":"markdown","d4c8592a":"markdown","02e1473e":"markdown","09ed227b":"markdown","6816739a":"markdown","2ca88336":"markdown","29c248ef":"markdown","d8cc4f7c":"markdown"},"source":{"191efd14":"import sys\nprint(\"Python version:\", sys.version)\n\nimport tensorflow as tf\nprint(\"TensorFlow version:\", tf.__version__)","5b396f91":"# In the tf.keras.layers package, layers are objects. To construct a layer, simply construct the object.\n# Most layers take as aa first argument the number of output dimensions\/channels.\n\nlayer = tf.keras.layers.Dense(100)\n\n# the number of input dimensions is often unnecessary, as it can be inferred the first time the layer is used\n# but it can be provided if you want to specify it manually, which is usefuly in some complex models.\nlayer = tf.keras.layers.Dense(10, input_shape=(None, 5))","e7e9649d":"# to use a layer, simply call it.\nlayer(tf.zeros([10, 5]))","b124f05e":"# layers have many useful methods. For example, you can inspect all variables in a layer by calling layer.variables.\n# in this case, a fully-connected layer will have variables for weights and biases\nlayer.variables","b829f51b":"# the variables are also accessible through nice accessors\nlayer.kernel, layer.bias","619b88e6":"class MyDenseLayer(tf.keras.layers.Layer):\n    def __init__(self, num_outputs):\n        super(MyDenseLayer, self).__init__()\n        self.num_outputs = num_outputs\n        \n    def build(self, input_shape):\n        self.kernel = self.add_variable(\"kernel\", shape=[int(input_shape[-1]), self.num_outputs])\n        \n    def call(self, input):\n        return tf.matmul(input, self.kernel)\n    \nlayer = MyDenseLayer(10)\nprint(layer(tf.zeros([10, 5])))\nprint(layer.variables)","2ebe5307":"class ResnetIdentityBlock(tf.keras.Model):\n    def __init__(self, kernel_size, filters):\n        super(ResnetIdentityBlock, self).__init__(name='')\n        filters1, filters2, filters3 = filters\n        \n        self.conv2a = tf.keras.layers.Conv2D(filters1, (1, 1))\n        self.bn2a = tf.keras.layers.BatchNormalization()\n        \n        self.conv2b = tf.keras.layers.Conv2D(filters2, kernel_size, padding='same')\n        self.bn2b = tf.keras.layers.BatchNormalization()\n        \n        self.conv2c = tf.keras.layers.Conv2D(filters3, (1, 1))\n        self.bn22c = tf.keras.layers.BatchNormalization()\n        \n    def call(self, input_tensor, training=False):\n        x = self.conv2a(input_tensor)\n        x = self.bn2a(x, training=training)\n        x = tf.nn.relu(x)\n        \n        x = self.conv2b(x)\n        x = self.bn2b(x, training=training)\n        x = tf.nn.relu(x)\n        \n        x = self.conv2c(x)\n        x = self.bn22c(x, training=training)\n        \n        x += input_tensor\n        return tf.nn.relu(x)\n    \nblock =  ResnetIdentityBlock(1, [1, 2, 3])\nprint(block(tf.zeros([1, 2, 3, 3])))\nprint([x.name for x in block.variables])","bb7a8999":"my_seq = tf.keras.Sequential([tf.keras.layers.Conv2D(1, (1, 1)),\n                                 tf.keras.layers.BatchNormalization(),\n                                 tf.keras.layers.Conv2D(2, 1, padding='same'),\n                                 tf.keras.layers.BatchNormalization(),\n                                 tf.keras.layers.Conv2D(3, (1, 1)),\n                                 tf.keras.layers.BatchNormalization()])\n\nmy_seq(tf.zeros([1, 2, 3, 3]))","175136b4":"Much of the time, however, the models which composee many layers simply call one layer after the other. This can be done in very little code using `tf.keras.Sequential`","d4c8592a":"Note that you don't have to wait until `build` is called to create your variables, you can also create them in `__init__`.\n\nOverall code is easier to read and maintail if it used standard layers whenever possible, as other readers will be familiar with the behavior of standard layers. If you want to use a layer which is not present in tf.keras.layers or tf.contrib.layers, consider filing a [github issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/new) or, even better, sending us a pull request!\n\n## Models: composing layers\n\nMany interesting layer-like things in machine learning models are implemented by composing existing layers. For example, each residual block in a resnet is a composition of convolutions, batch normalizations, and a shortcut.\n\nThe main class used when creating a layer-like thing with contains other layers is `tf.keras.Model`. Implementing one is done by inheriting from `tf.keras.Model`.","02e1473e":"## Implementing custom layers\n\nThe best way to implement your own layer is extending the tf.keras.Layer class and implementing:\n- `__init__`, where you can do all input-dependent initialization\n- `build`, where you know the shapes of the input tensors and can do the rest of the initialization\n- `call`, where you do the forward computation\n\nNote that you don't have to wait until `build` is called to create your variables, you can also create them in `__init__`. Howeverr, the advantage of creating them in build is that it enables late variable creation based on the shape of the inputs the layer will operate on on. On the other hand, creating varriables in `__init__` would mean that shapes required to create the variables will  need to be explicitly specified.","09ed227b":"# Custom Layers\n\nWe recommend using tf.keras as high-level API for building neural networks. That said, most TensorFlow APIs are usable with eager execution.","6816739a":"The full list of pre-existing layers can be seen in [the documentation](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers). It includes Dense (a fully-connected layer), Conv2D, LSTM, BatchNormalization, Dropout and many others.","2ca88336":"NOTE: I rewrite various notebooks because that's how I learn. I do it on Kaggle because I like their community and other features. Please use and credit original source.\n\nSource: https:\/\/github.com\/tensorflow\/docs\/blob\/master\/site\/en\/r2\/tutorials\/eager\/custom_layers.ipynb","29c248ef":"## Layers: common set of useful operations\n\nMost of the time when writing code for machine learning models you want to operate at a higher level of abstraction than individual operations and manipulations  of individual variables.\n\nMany machine learning models are expressible ass the composition aand stacking of relatively simple layers, and TensorFlow provides both a set of many common layers as well ass easy ways for you to write your own application-specific layers either frrom scratch or as the composition of existing layers.\n\nTensorFlow includes the full [Keras](https:\/\/keras.io\/) API in `tf.keras` package, and the Keras layers are very useful when building your own models.","d8cc4f7c":"**Next steps**\n\nNow you can go back to the previous noteebook and adapt the linear regression example to use layers and models to be better structured."}}