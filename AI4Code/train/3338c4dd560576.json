{"cell_type":{"c397da48":"code","d4ede288":"code","296fdd40":"code","8aac4c9b":"code","4ca8298c":"code","2b471ae9":"code","4adfd1f4":"code","b0478a13":"code","4c28e7da":"code","b45759a4":"code","51b9a8e1":"code","597fe072":"code","f208506d":"code","76e1e947":"code","d1835a25":"code","3c8f47ad":"code","fe5af799":"code","0cbb08df":"code","969113f4":"code","affa0f8b":"code","63c290f1":"code","474381cf":"code","22fd2b97":"code","0a159927":"code","41b0a165":"code","d2a47dff":"code","97fa6f20":"code","80b634d3":"code","86aec53b":"code","213f5b7a":"code","6fb0fd6c":"code","60577061":"code","90b3352e":"code","919cc19e":"code","3b6a6765":"code","7c41977b":"code","17fb073f":"code","88363b6d":"code","3feabe6b":"code","3928e56b":"markdown","093c79e4":"markdown","95f9ad3f":"markdown","5a638b4b":"markdown","6de42d87":"markdown","24c4cfea":"markdown","967a8924":"markdown","b5ce03ec":"markdown","c9c67ad8":"markdown","b22c4334":"markdown","48d7e8b3":"markdown","2e6f04d9":"markdown","058cdae1":"markdown","e43f719b":"markdown","9add7b99":"markdown"},"source":{"c397da48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4ede288":"import numpy as np\nimport pandas as pd","296fdd40":"data=pd.read_excel(\"\/kaggle\/input\/maharashtra-engineering-cap-201920\/cutoff_excel.xlsx\")\n\npd.set_option('max_colwidth',1500)\ndata","8aac4c9b":"cols = []\ncount = 1\nfor column in data.columns:\n    cols.append(count)\n    count+=1\n    continue\n    \ndata.columns = cols","4ca8298c":"data","2b471ae9":"print(data[3].value_counts(dropna=False))\nprint(\"**\"*50)\nprint(data[5].value_counts(dropna=False))\nprint(\"**\"*50)\nprint(data[7].value_counts(dropna=False))","4adfd1f4":"for i in range(3,24,2):\n    col_unwant= i\n    print(col_unwant)\n    data.drop(col_unwant,axis=1,inplace=True)\n#data.drop('Unnamed: 2',axis=1,inplace=True)\n#data.drop('Unnamed: 4',axis=1,inplace=True)\n#data.drop('Unnamed: 6',axis=1,inplace=True)\n#data.drop('Unnamed: 8',axis=1,inplace=True)","b0478a13":"extra_row_01=data.index[data[1]==\"II\"].tolist()\ndata.drop(extra_row_01,inplace=True)\n\nextra_row_02=data.index[data[1]=='Legends: Starting character G-General, L-Ladies, End character H-Home University, O-Other than Home University,S-State Level, AI- All India Seat\\n. Maharashtra State Seats - Cut Off Indicates Maharashtra State General Merit No.; Figures in bracket Indicates Merit Percentile.'].tolist()\ndata.drop(extra_row_02,inplace=True)\n\nextra_row_03=data.index[data[1]=='Other Than Home University Seats Allotted to Other Than Home University Candidates'].tolist()\ndata.drop(extra_row_03,inplace=True)\n\nextra_row_04=data.index[data[1]=='Home University Seats Allotted to Other Than Home University Candidates'].tolist()\ndata.drop(extra_row_04,inplace=True)\n\nextra_row_05=data.index[data[1]=='State Level'].tolist()\ndata.drop(extra_row_05,inplace=True)\n\nextra_row_06=data.index[data[1]=='Other Than Home University Seats Allotted to Home University Candidates'].tolist()\ndata.drop(extra_row_06,inplace=True)\n\nextra_row_07=data.index[data[1]=='TFWS'].tolist()\ndata.drop(extra_row_07,inplace=True)","4c28e7da":"cols = []\ncount = 1\nfor column in data.columns:\n    cols.append(count)\n    count+=1\n    continue\n    \ndata.columns = cols","b45759a4":"data.fillna(\" \",inplace=True)","51b9a8e1":"idx_col_01_blanks=data.index[data[1]==\" \"].tolist()\nidx_col_02_blanks=data.index[data[2]==\" \"].tolist()\nidx_col_03_blanks=data.index[data[3]==\" \"].tolist()\n\nl1=[]\nblank_rows=[]\nfor i in idx_col_01_blanks:\n    if i in idx_col_02_blanks:\n        l1.append(i)\nfor i in l1:\n    if i in idx_col_03_blanks:\n        blank_rows.append(i)\n        \ndata.drop(blank_rows,inplace=True)","597fe072":"data","f208506d":"data.reset_index(drop=True,inplace=True)","76e1e947":"data_01=data.iloc[:,:2]","d1835a25":"data_01.columns = ['text',\"score\"]","3c8f47ad":"data_01","fe5af799":"data_01.head()","0cbb08df":"final_dict = {}\nimport re\n\nfor i in range(0,data_01.shape[0]):\n    try:\n        m = data_01.iloc[i:i+3]\n        m = m.values\n\n        text = \" \".join([str(k) for k in m[:,0]]).strip()\n        values = \" \".join(m[:,1]).strip()\n\n#        print(text)\n\n        text = text.split(\"\\n\")\n        vals = values.split(\"\\n\")\n    \n        final_dict[i] =  {}\n    \n        if len(text) == 4:\n            final_dict[i]['College_code'] = re.findall(\"[0-9]+\",text[0])[0]\n            final_dict[i]['College_name'] = \" \".join(re.findall(\"[a-zA-Z,]+\",text[0]))\n            final_dict[i]['Subject_code'] = re.findall(\"[0-9]+\",text[1])[0]\n        \n            final_dict[i]['Subject_name'] = \" \".join(re.findall(\"[a-zA-Z,]+\",text[1]))\n            \n            final_dict[i]['Home University'] = \" \".join(re.findall(\"[a-zA-Z,]+\",text[2].split(\"Home University\")[1]))\n\n\n            final_dict[i]['Cateogry'] = re.findall(\"[a-zA-Z]+\",vals[0])[0]\n            final_dict[i]['Rank'] = re.findall(\"[0-9]+\",vals[0])[0]\n            final_dict[i]['Score'] = re.findall(\"([0-9.]+)\",vals[1])[0]\n    \n    \n        elif len(text) == 3:\n#             print(text)\n                final_dict[i]['College_code'] = np.nan\n                final_dict[i]['College_name'] = np.nan\n\n                final_dict[i]['Subject_code'] = re.findall(\"[0-9]+\",text[0])[0]\n                final_dict[i]['Subject_name'] = \" \".join(re.findall(\"[a-zA-Z,]+\",text[0]))\n\n                final_dict[i]['Home University'] = \" \".join(re.findall(\"[a-zA-Z,]+\",text[1].split(\"Home University\")[1]))\n\n\n                final_dict[i]['Cateogry'] = re.findall(\"[a-zA-Z]+\",vals[0])[0]\n                final_dict[i]['Rank'] = re.findall(\"[0-9]+\",vals[0])[0]\n                final_dict[i]['Score'] = re.findall(\"([0-9.]+)\",vals[1])[0]\n        else:\n            pass\n    except Exception as e:\n        pass\n","969113f4":"data_02 = pd.DataFrame.from_records(final_dict).T.dropna(axis=0,how=\"all\")\ndata_02 = data_02.drop_duplicates(['Subject_code','Subject_name'])","affa0f8b":"data_02","63c290f1":"data_02.fillna(method=\"bfill\").fillna(method='ffill')","474381cf":"data_02.reset_index(drop=True,inplace=True)","22fd2b97":"not_savitribai_clgs=data_02.index[data_02[\"Home University\"]!=\"Savitribai Phule Pune University\"].tolist()\nprint(len(not_savitribai_clgs))\ndata_02.drop(not_savitribai_clgs,inplace=True)","0a159927":"not_civil=data_02.index[data_02[\"Subject_name\"]!=\"Civil Engineering\"].tolist()\nprint(len(not_civil))\ndata_02.drop(not_civil,inplace=True)","41b0a165":"data_02.reset_index(drop=True,inplace=True)","d2a47dff":"data_02","97fa6f20":"#required_cate=[\"GOPENH\",\"GOPENS\"]","80b634d3":"#data_02[(data_02[\"Cateogry\"]==\"GOPENH\") & (data_02[\"Cateogry\"]==\"GOPENS\")]","86aec53b":"gopenh=data_02.index[data_02[\"Cateogry\"]==\"GOPENH\"].tolist()\nprint(gopenh)\ngopens=data_02.index[data_02[\"Cateogry\"]==\"GOPENS\"].tolist()\nprint(gopens)","213f5b7a":"not_gopens_h=[]\nfor i in range(0,79):\n    if (i not in gopenh) & (i not in gopens):\n        not_gopens_h.append(i)\n","6fb0fd6c":"print(not_gopens_h)","60577061":"data_02.drop(not_gopens_h,inplace=True)","90b3352e":"#data_02[\"Cateogry\"]==\"GOPENS\"","919cc19e":"data_02.drop(data_02.index[data_02.Rank.isnull()],inplace=True)\n\ndata_02[\"Rank\"]=data_02[\"Rank\"].astype(int)","3b6a6765":"data_02","7c41977b":"data_03=data_02.sort_values(by = \"Rank\",ascending=True).iloc[:11,:]","17fb073f":"data_03.reset_index(drop=True,inplace=True)","88363b6d":"data_03","3feabe6b":"data_03.to_csv(r\"Top_10_civil_clg_of_savitribai.csv\",index=False)","3928e56b":"# Removing data which is not Required","093c79e4":"# Reading Dataset","95f9ad3f":"## Steps to build the model.\n\nThese are the steps that you will see in this particular notebook required to Extract information from Dataset:\n- Import the required libraries.\n- Reading Dataset.\n- Changing column_names into Short and Unique values(Not neccesary).\n- Removing data which is not Required\n- Fill Na values with \" \".\n- Removing Blank rows.\n- Keep Only Those columns which Have GOPENH\/GOPENS Category i.e 2(You can keep as many rows as youy want).\n- Appying Regular Expersion(Re) to extract Data from Table and Rearranging it(**Most Important step**).\n- Extracting Information of required home unversity and Branch\n- Saving your output into csv file.","5a638b4b":"# Extracting data of civil engineering","6de42d87":"# Submission file","24c4cfea":"# Importing Required Libraries","967a8924":"# Keep Only Those columns which Have GOPENH\/GOPENS Category i.e 2","b5ce03ec":"# Removing Blank rows","c9c67ad8":"## Extracting all the colleges which comes under Savitribai Phule Pune University ","b22c4334":"# Appying Regular Expersion(Re) to extract Data from Table and Rearranging it.","48d7e8b3":"# Do UPVOTE if you like it :)","2e6f04d9":"# Changing column_names into Short and Unique values(Not neccesary)","058cdae1":"## GIVE IT A TRY!","e43f719b":"# **Problem Statement:**\n\n### Writing a Python Script that finds top 10 colleges for Civil Engineering Branch based on cutoff ranks in GOPENS\/GOPENH category for Savitribai Phule Pune University. ","9add7b99":"# Fill Na values with \" \""}}