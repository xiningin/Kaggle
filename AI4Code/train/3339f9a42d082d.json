{"cell_type":{"afd85704":"code","5ee19f22":"code","1af602e3":"code","e9c3fa3f":"code","827eebea":"code","592b6004":"code","4b0c2cfc":"code","4eccb3f5":"code","e5a8a563":"code","9407addb":"code","49269e9a":"code","5db4bb69":"code","1e5bf784":"code","ea07453e":"code","be5c5b14":"code","58afde63":"code","3f53c1b7":"code","7d09dc1a":"code","8aa99ed9":"code","ec92042c":"code","356a3c91":"code","553f3e73":"code","15fc5939":"code","5956e3f3":"code","a466ba91":"code","bc78b3f0":"code","02c6b95c":"code","7a8b54db":"code","4d6108ba":"markdown","abd3c737":"markdown","04ba5e59":"markdown","02580667":"markdown","57a1604b":"markdown","86ee0ae4":"markdown","e7eaff7e":"markdown","4937b78d":"markdown","7a7bafe2":"markdown","cb63cb5d":"markdown","c1049a05":"markdown"},"source":{"afd85704":"pip install pytorch-tabnet #use google colab if tabnet is not compatible with this notebook","5ee19f22":" pip install torchvision","1af602e3":"#install pytorch-tabnet","e9c3fa3f":"pip install tabnet","827eebea":"pip install torchvision","592b6004":"import torch\nimport torchvision","4b0c2cfc":"import torch.nn as nn\nimport torch.nn.functional as F","4eccb3f5":" print(torch.cuda.device_count())","e5a8a563":" print(torch. cuda. current_device())","9407addb":" print(torch.cuda.get_device_name(torch.cuda.current_device()))","49269e9a":"import sys\nprint(sys.executable)","5db4bb69":"import numpy as np\nimport pandas as pd","1e5bf784":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsolution = pd.read_csv(\"..\/input\/house-price-prediction-dataset\/submission (1).csv\")\nprint(\"shape of train data: \",train.shape)\nprint(\"shape of test data: \",test.shape)\nprint(\"shape of sample file: \", sample.shape)\nprint(\"shape of solution file: \", solution.shape)","ea07453e":"## For plotting histogram\nimport matplotlib.pyplot as plt\ntrain.hist(bins=50, figsize=(20, 15))","be5c5b14":"train.head()","58afde63":"pd.set_option(\"display.max_columns\", 2000)\npd.set_option(\"display.max_rows\", 85)\ntest.head(80)","3f53c1b7":"#finding object columns\ntrain_obj = train.select_dtypes(exclude=[np.number])\ntrain_obj","7d09dc1a":"#finding float col","8aa99ed9":"train_float = train.select_dtypes(include=[np.float])\ntrain_float","ec92042c":"train_num = train.select_dtypes(include=[np.number])\ntrain_num.tail(50)","356a3c91":"features = ['LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', \n            'YearRemodAdd', 'BsmtFinSF1', 'BsmtFinSF2', 'TotalBsmtSF', \n            '1stFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', \n            'BsmtHalfBath', 'HalfBath', 'BedroomAbvGr','TotRmsAbvGrd',\n            'KitchenAbvGr', 'ScreenPorch','Fireplaces','GarageCars',\n            'GarageArea', 'WoodDeckSF','OpenPorchSF', 'EnclosedPorch',  \n            'PoolArea', 'YrSold']","553f3e73":"X_train = train[features]\ny_train = train[\"SalePrice\"]\n \n# make a validation set\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, random_state=42)\n \nX_test  = test[features]\ny_true  = sample[\"SalePrice\"]","15fc5939":"X_train = X_train.apply(lambda x: x.fillna(x.mean()),axis=0)\nX_valid = X_valid.apply(lambda x: x.fillna(x.mean()),axis=0)\nX_test  = X_test.apply(lambda x: x.fillna(x.mean()),axis=0)","5956e3f3":"X_train = X_train.to_numpy()\ny_train = y_train.to_numpy().reshape(-1, 1)\nX_valid = X_valid.to_numpy()\ny_valid = y_valid.to_numpy().reshape(-1, 1)\nX_test  = X_test.to_numpy()","a466ba91":"from pytorch_tabnet.tab_model import TabNetRegressor\n\nregressor = TabNetRegressor(verbose=0,seed=42)\nregressor.fit(X_train=X_train, y_train=y_train,\n              eval_set=[(X_valid, y_valid)],\n              patience=200, max_epochs=4000,\n              eval_metric=['mae'])\n","bc78b3f0":"predictions = regressor.predict(X_test)","02c6b95c":"from sklearn.metrics import mean_squared_log_error\nRMSLE = np.sqrt( mean_squared_log_error(y_true, predictions) )\nprint(\"The score is %.5f\" % RMSLE )","7a8b54db":"sample.iloc[:,1:] = predictions\nsample.to_csv('submission(1).csv',index=False)","4d6108ba":"converting data to numpy array","abd3c737":"Checking device info","04ba5e59":"Exploratory data analysis","02580667":"# This is very simple method by using pytorch-TabNet deep nural network with few lines of code we can make regression model to predict the price of the house.","57a1604b":"The main advantage of using deep learning is we dont have to clean all the data & no need of feature engineering.","86ee0ae4":"Importing files\n","e7eaff7e":"Impute any missing data with a simple mean value. For a much better method take a look at the notebook \"MissForest - The best imputation algorithm\" by Liam Morgan. It deals with the R implementation, but MissForest can also be used in python via the missingpy package.","4937b78d":"Running the deep nural network","7a7bafe2":"By seeing obove data we came to the conclusion that these are the fetures of the data which effects the price.","cb63cb5d":"saving file as a submission.csv file","c1049a05":"Now calculating our final score"}}