{"cell_type":{"50c432e0":"code","fa41b9c0":"code","d1836710":"code","3911d382":"code","29a4a2b9":"code","303634db":"code","58f04946":"code","b39e1769":"code","02a86c17":"code","6f0209c4":"code","7152d482":"code","8764c962":"code","776c4d1c":"code","d8e83925":"code","357cc220":"markdown","16d09a33":"markdown","a367ad1d":"markdown","fdb5c9dc":"markdown","8e1b3cf5":"markdown","3f7d1057":"markdown"},"source":{"50c432e0":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fa41b9c0":"train = pd.read_csv(\"..\/input\/google-quest-challenge\/train.csv\", index_col='qa_id')\ntrain.shape","d1836710":"test = pd.read_csv(\"..\/input\/google-quest-challenge\/test.csv\", index_col='qa_id')\ntest.shape","3911d382":"train.head(3).T","29a4a2b9":"set(train['question_user_page'].unique()) & set(test['question_user_page'].unique())","303634db":"set(train['answer_user_page'].unique()) & set(test['answer_user_page'].unique())","58f04946":"import re\n\n\ndef make_user_map(user_pages):\n    user_map = {}\n    for p in user_pages:\n        # get groups from URL (https:\/\/)(photo.stackexchange)(.com\/users\/1024)\n        a = re.search('(https:\\\/\\\/)(.*)(.com|.net)', p)\n        if a:\n            # get second group (photo).(stackexchange) or use whole site\n            b = re.search('(.*\\.)(.*)', a.group(2))\n            if b:\n                s = b.group(2)\n            else:\n                s = a.group(2)\n            # get user id from (https:\/\/photo.stackexchange.com\/users\/)(1024)\n            c = re.search('(.*\\\/)(\\d*)', p)\n            if c:\n                u = c.group(2)\n            else:\n                u = 'unknown'\n            user_map[p] = s + '_' + u\n    return user_map","b39e1769":"train_question_user_pages = train['question_user_page'].unique()\ntrain_question_user_map = make_user_map(train_question_user_pages)\ntrain['question_user'] = train['question_user_page'].apply(lambda x: train_question_user_map[x])","02a86c17":"train_answer_user_pages = train['answer_user_page'].unique()\ntrain_answer_user_map = make_user_map(train_answer_user_pages)\ntrain['answer_user'] = train['answer_user_page'].apply(lambda x: train_answer_user_map[x])","6f0209c4":"train.head(3).T","7152d482":"test_question_user_pages = test['question_user_page'].unique()\ntest_question_user_map = make_user_map(test_question_user_pages)\ntest['question_user'] = test['question_user_page'].apply(lambda x: test_question_user_map[x])","8764c962":"test_answer_user_pages = test['answer_user_page'].unique()\ntest_answer_user_map = make_user_map(test_answer_user_pages)\ntest['answer_user'] = test['answer_user_page'].apply(lambda x: test_answer_user_map[x])","776c4d1c":"set(train['question_user'].unique()) & set(test['question_user'].unique())","d8e83925":"set(train['answer_user'].unique()) & set(test['answer_user'].unique())","357cc220":"## Users","16d09a33":"Let's make user id from site and user id assuming user has the same id on all stackexchange sites.\n\nFor example, for URL https:\/\/photo.stackexchange.com\/users\/1024 our id will be `stackexchange_1024`","a367ad1d":"Few intersections.","fdb5c9dc":"## Load data","8e1b3cf5":"## User pages","3f7d1057":"One intersection for question user pages and no intersections for answer user pages."}}