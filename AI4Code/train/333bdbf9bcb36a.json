{"cell_type":{"4917a57a":"code","2253a6d9":"code","fefcf8cb":"code","f2c76a9c":"code","8b32370f":"code","2a2b4bb8":"code","5d9cb4d6":"code","e58cd747":"code","29bebe60":"code","b09831b2":"code","1a4bce3c":"markdown"},"source":{"4917a57a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","2253a6d9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d\n\ndf_full = pd.read_csv(\"\/kaggle\/input\/hipparcos-star-catalog\/hipparcos-voidmain.csv\")\nprint(df_full.columns)\ndf = df_full[df_full[\"Plx\"]>0]\nPAR = np.array(df[\"Plx\"],dtype=float)\nRA = np.array(df[\"RAdeg\"],dtype=float)\nDEC = np.array(df[\"DEdeg\"],dtype=float)\nm = np.array(df[\"Vmag\"],dtype=float)\nbmv = np.array(df[\"B-V\"],dtype=float)\nRA *= np.pi\/180 #convert to radians\nDEC *= np.pi\/180 #convert to radians","fefcf8cb":"# Anaconda code \n\nDistance = 1\/PAR*1000   # parallax in database is in milli arcseconds\n\nPhi = (np.pi\/2-DEC)\nTheta = RA\n\nx = Distance*np.cos(Theta)*np.sin(Phi)\ny = Distance*np.sin(Theta)*np.sin(Phi)\nz = Distance*np.cos(Phi)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x,y,z,'.')\nplt.show()","f2c76a9c":"# x y and z into a single array \nxyz = np.transpose(np.array([x,y,z]))","8b32370f":"# DBSCN clustering algorithm \n\nfrom sklearn.cluster import DBSCAN\ndb=DBSCAN(eps=2,min_samples=4,metric='euclidean')\n","2a2b4bb8":"model=db.fit(xyz)","5d9cb4d6":"label=model.labels_","e58cd747":"df = pd.DataFrame({\"RA\":RA,\"DEC\":DEC,\"label\":label,\"bmv\":bmv})\nfiltered = df[df[\"label\"]>-1]\nimport plotly.express as px\nfig = px.scatter(filtered,x=\"RA\",y=\"DEC\",color=\"bmv\")\nfig.show()","29bebe60":"import plotly.express as px\nfig = px.scatter(df,x=\"RA\",y=\"DEC\",color=\"label\")\nfig.show()","b09831b2":"from sklearn import metrics\n\n# identifying the points which makes up core points\nsample_cores=np.zeros_like(label,dtype=bool)\n\nsample_cores[db.core_sample_indices_]=True\n\n# calculating the number of clusters\n\nn_clusters=len(set(label))- (1 if -1 in label else 0)\nprint('No of clusters:',n_clusters)\n","1a4bce3c":"Hipparcos Catalog Cluster Visualization\n\n\n\nGoal: Apply DBSCAN and plot data with and without outliers in order to identify clusters. Then they can be compared to known clusters"}}