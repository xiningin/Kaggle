{"cell_type":{"1fc4f195":"code","73960c06":"code","0beaf9a6":"code","1ca50026":"code","5e03068f":"code","bf05fca3":"code","e2d68d0b":"code","77e109b8":"code","1bf0510a":"code","17f23afa":"code","41fac5bf":"code","49b56004":"code","432015d9":"code","0910b0d5":"code","33d5adba":"code","092202ed":"code","424ad5da":"code","0dac135f":"code","7283129f":"code","ca1bf6ff":"code","f30d8b6a":"markdown","c29ef4ca":"markdown","27a35941":"markdown","f3f0d756":"markdown","d3990719":"markdown","6341d1c5":"markdown","ac702a29":"markdown","7a784e1d":"markdown"},"source":{"1fc4f195":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n%matplotlib inline\ninit_notebook_mode(connected = True)\ncf.go_offline()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73960c06":"#This CSV file is separated by the 'delimiter ;'\ndf1 = pd.read_csv('\/kaggle\/input\/eeg\/extrait_wSleepPage01.csv', delimiter = \";\")\ndf2 = pd.read_csv('\/kaggle\/input\/eeg\/spindles.csv', delimiter = \";\")","0beaf9a6":"df1","1ca50026":"df2","5e03068f":"print ('Start time of this record is', df1['Date'][0], df1['HH'][0],\":\",df1['MM'][0],\":\",df1['SS'][0])\nprint ('End time of this record is', df1['Date'].iloc[-1], df1['HH'].iloc[-1],\":\",df1['MM'].iloc[-1],\":\",df1['SS'].iloc[-1])\nprint ('Duration of measurement is about',df1['MM'].iloc[-1]-df1['MM'][0],'minutes')","bf05fca3":"#create a new column to match the time feature\ndf1['Time (s)'] = np.arange(0,248440*0.005,0.005)","e2d68d0b":"# The useful features of df1 contain \"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", \"EEG C4-A1\", \"EEG O2-A1\"\ndf1_new = df1[['Time (s)',\"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", \"EEG C4-A1\", \"EEG O2-A1\"]]\ndf1_new","77e109b8":"features = [\"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", \"EEG C4-A1\", \"EEG O2-A1\"]\nfor x in features:\n    df1_new[x] = [x.replace(',', '.') for x in df1_new[x]]\n\n    \ndf1_new = df1_new.astype('float')","1bf0510a":"df1_new.info()","17f23afa":"# plot these features in the same graph with stack plot\nfig, axs = plt.subplots(5, sharex=True, sharey=True)\nfig.set_size_inches(18, 24)\nlabels = [\"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", 'EEG C4-A1', 'EEG O2-A1']\ncolors = [\"r\",\"g\",\"b\",'y',\"k\"]\nfig.suptitle('Vertically stacked subplots of extrait_wSleepPage01', fontsize = 20)\n# ---- loop over axes ----\nfor i,ax in enumerate(axs):\n  axs[i].plot(df1_new['Time (s)'], df1_new[labels[i]],color=colors[i],label=labels[i])\n  axs[i].legend(loc=\"upper right\")\n\nplt.xlabel('Time (s)', fontsize = 20)\nplt.show()\n","41fac5bf":"#create a new column to match the time feature for df2\ndf2['Time (s)'] = np.arange(0,df2.count()[0]*0.005,0.005)","49b56004":"df2","432015d9":"# The useful features of df1 contain \"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", \"EEG C4-A1\", \"EEG O2-A1\"\ndf2_new = df2[['Time (s)',\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", \"EEG C4-A1[uV]\", \"EEG O2-A1[uV]\"]]\ndf2_new","0910b0d5":"# replace the comma to dot\nfeatures = [\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", \"EEG C4-A1[uV]\", \"EEG O2-A1[uV]\"]\nfor x in features:\n    df2_new[x] = [x.replace(',', '.') for x in df2_new[x]]\n\n    \ndf2_new = df2_new.astype('float')","33d5adba":"df2_new.info()","092202ed":"# plot these features in the same graph with stack plot\nfig, axs = plt.subplots(5, sharex=True, sharey=True)\nfig.set_size_inches(18, 24)\nlabels = [\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", 'EEG C4-A1[uV]', 'EEG O2-A1[uV]']\ncolors = [\"r\",\"g\",\"b\",'y',\"k\"]\nfig.suptitle('Vertically stacked subplots of splendles', fontsize = 20)\n# ---- loop over axes ----\nfor i,ax in enumerate(axs):\n  axs[i].plot(df2_new['Time (s)'], df2_new[labels[i]],color=colors[i],label=labels[i])\n  axs[i].legend(loc=\"upper right\")\nplt.xlabel('Time (s)', fontsize = 20)\nplt.show()\n\n","424ad5da":"from scipy import fft\ndf3 = df2_new.copy()\nlabels = [\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", 'EEG C4-A1[uV]', 'EEG O2-A1[uV]']\ndf3 = df3[labels].apply(fft)\ndf3['Time (s)'] = df2_new['Time (s)']\ndf3","0dac135f":"# plot these FFT features in the same graph with stack plot\nfig, axs = plt.subplots(5, sharex=True, sharey=True)\nfig.set_size_inches(18, 24)\nlabels = [\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", 'EEG C4-A1[uV]', 'EEG O2-A1[uV]']\ncolors = [\"r\",\"g\",\"b\",'y',\"k\"]\nfig.suptitle('Vertically stacked subplots of FFT', fontsize=20)\n# ---- loop over axes ----\nfor i,ax in enumerate(axs):\n  axs[i].plot(df3['Time (s)'], df3[labels[i]],color=colors[i],label=labels[i])\n  axs[i].legend(loc=\"upper right\")\n\nplt.xlabel('Time (s)', fontsize = 20)\nplt.show()","7283129f":"# add the feature of \"frequency\"\ndf3['frequency (Hz)'] = df3['Time (s)'].apply(lambda x: 1\/x if x != 0 else 0 )\ndf3","ca1bf6ff":"# plot these FFT features in the same graph with stack plot\nfig, axs = plt.subplots(5, sharex=True, sharey=True)\nfig.set_size_inches(18, 24)\nlabels = [\"EOG Left[uV]\", \"EEG C3-A1[uV]\", \"EEG O1-A1[uV]\", 'EEG C4-A1[uV]', 'EEG O2-A1[uV]']\ncolors = [\"r\",\"g\",\"b\",'y',\"k\"]\nfig.suptitle('Periodogram using FFT', fontsize=20)\n# ---- loop over axes ----\nfor i,ax in enumerate(axs):\n  axs[i].plot(df3['frequency (Hz)'][1:], df3[labels[i]][1:],color=colors[i],label=labels[i])\n  axs[i].legend(loc=\"upper right\")\n\nplt.xlabel('Frequency (Hz)', fontsize = 20)\nplt.show()","f30d8b6a":"Then we can deal the dataset df2 of splendles.csv\n\n\n\n","c29ef4ca":"The first data is recorded at the same day 2016-03-08. The duration is about 21 minutes. We can create a new colume to represent the time.","27a35941":"# FFT Fourier Fast Transform \n\nwe can get the FFT from scipy module https:\/\/docs.scipy.org\/doc\/scipy\/reference\/tutorial\/fft.html <br>\nhttps:\/\/fr.mathworks.com\/help\/signal\/ug\/power-spectral-density-estimates-using-fft.html","f3f0d756":"We notice that the features \"EOG Left\", \"EEG C3-A1\", \"EEG O1-A1\", \"EEG C4-A1\", \"EEG O2-A1\" are string not float. So we need to convert them as float. The problem is to replace the comma \",\" to dot \".\". ","d3990719":"# 1 - Input the Data","6341d1c5":"# In order to obtain the periodogram figure, the time (s) need to be converted to frequency (Hz). The recording frequency here is 0.005 s = 1\/0.005 = 200 Hz","ac702a29":"# Please do Vote up if you liked my work\n\nMy [Linkedin](https:\/\/www.linkedin.com\/in\/letian-dai-phd-physics-nanomaterial-nanoscience-nanotechnology-datascience-bigdata\/) <br>\nMy [Git](https:\/\/github.com\/daiwofei)","7a784e1d":"The idea is clear that this data is recorded in time. The features are the intensity of EEG in real time. So we can plot them as function of time. "}}