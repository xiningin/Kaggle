{"cell_type":{"be763aa8":"code","1d7d3e1e":"code","5e1bccc3":"code","711ab59e":"code","1c944faf":"code","9032307a":"code","398c6556":"code","5852278e":"code","91eec7ff":"code","2950f52b":"code","47232fa4":"code","fc0e4f95":"code","7dc54a63":"code","b57cf56c":"code","3e8276d9":"code","d48ec417":"code","41282ad3":"code","b793ca23":"code","cda775c4":"code","0fe6dd8b":"code","454add14":"code","279a0478":"code","0caf75c0":"code","7dbe7ff9":"code","1966b2e3":"code","4719593d":"code","765795fc":"code","1519b1f9":"code","36e60e1e":"code","8755f6b0":"code","2bca97e6":"code","f531936d":"code","2af7222b":"code","79f3788d":"code","2408d50d":"code","01c9b5d8":"code","edf229bf":"code","292fd639":"code","f76e2026":"code","baf85451":"code","b406fe27":"code","fc78658a":"code","01919c4c":"code","44b8f234":"code","dbe6deeb":"code","96e47957":"code","4ddaabd6":"code","2b6dea81":"code","b56f8d41":"code","cb3a021d":"code","635eb0d9":"code","cbe9d8c6":"code","25d93c79":"code","b44e8e97":"code","4159707c":"code","4e304379":"code","8d5e4262":"code","aaa0d7bd":"code","30b452e5":"code","a310951e":"code","1d83ceda":"code","361ecf2e":"code","d80ac747":"code","957c0fdc":"code","71f11088":"code","d70fac6d":"code","cb37f279":"code","e8a55496":"code","2e4c5731":"code","5a59865d":"code","3d8a604f":"code","e9b7a319":"markdown","44d73b00":"markdown","1079c18c":"markdown","bbd636c0":"markdown","704c432e":"markdown","12a96023":"markdown","38f1c64e":"markdown","063771d1":"markdown","d7fa4fc9":"markdown","715b1151":"markdown","4953e530":"markdown"},"source":{"be763aa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d7d3e1e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\npd.set_option('display.max_columns', 500)\nfrom scipy import stats\nfrom scipy.stats import norm,skew","5e1bccc3":"train = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')","711ab59e":"#test = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","1c944faf":"train.shape #,test.shape","9032307a":"train.isnull().sum()","398c6556":"train.dropna(inplace=True)","5852278e":"train.head()","91eec7ff":"train['winPlacePerc'].value_counts()","2950f52b":"plt.figure(figsize=(15,8))\nsns.distplot(train['winPlacePerc'],fit=norm)","47232fa4":"train['assists'].value_counts()","fc0e4f95":"plt.figure(figsize=(15,8))\nsns.countplot(train['kills'].sort_values())","7dc54a63":"plt.figure(figsize=(15,8))\nsns.countplot(train['assists'].sort_values())","b57cf56c":"for i in range(0,60):\n    percentage = train[train['kills'] == i].shape[0]\/len(train['kills']) * 100\n    print(\"Number of players having\",i,\"kills in their matches:\",percentage)","3e8276d9":"plt.figure(figsize=(15,8))\nsns.countplot(train['boosts'].sort_values())","d48ec417":"plt.figure(figsize=(15,8))\nsns.countplot(train['assists'].sort_values())","41282ad3":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['winPlacePerc'],y=train['kills'])","b793ca23":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['headshotKills'],y=train['kills'])","cda775c4":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['killPlace'],y=train['kills'])","0fe6dd8b":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['killPoints'],y=train['kills'])","454add14":"plt.figure(figsize=(10,8))\nsns.countplot(train['killStreaks'])","279a0478":"plt.figure(figsize=(10,8))\nsns.distplot(train['walkDistance'],fit=norm)","0caf75c0":"work_dist_zero = train[train['walkDistance'] <= 0].shape[0]\nprint('Number of people how walked zero distance that is they are killed or they exit the game before even stepping few steps',work_dist_zero)","7dbe7ff9":"avg_work = np.average(train['walkDistance'])\nprint('Average distance worked by the player is',avg_work)","1966b2e3":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['winPlacePerc'],y=train['walkDistance'])","4719593d":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['winPlacePerc'],y=train['rideDistance'])","765795fc":"avg_drive = np.average(train['rideDistance'])\nprint('Average distance worked by the player is',avg_drive)","1519b1f9":"ride_dist_zero = train[train['rideDistance'] <= 0].shape[0]\nprint(\"Players how don't drive:\",ride_dist_zero)","36e60e1e":"plt.figure(figsize=(10,8))\nsns.pointplot(x=train['vehicleDestroys'],y=train['winPlacePerc'])","8755f6b0":"data = train.copy()","2bca97e6":"data = data.groupby('groupId')['kills'].sum().reset_index()","f531936d":"data = data.sort_values(by='kills',ascending=False)","2af7222b":"data.head(50)","79f3788d":"plt.figure(figsize=(15,8))\nsns.jointplot(x=train['kills'],y=train['headshotKills'])","2408d50d":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['winPlacePerc'],y=train['heals'])","01c9b5d8":"plt.figure(figsize=(10,8))\nsns.jointplot(x=train['winPlacePerc'],y=train['revives'])","edf229bf":"solos = train[train['numGroups']>50]\nduos = train[(train['numGroups']>25) & (train['numGroups']<=50)]\nsquads = train[train['numGroups']<=25]","292fd639":"print('they were around',(solos.shape[0]\/train.shape[0]) * 100,'% of the solo games')\nprint('they were around',(duos.shape[0]\/train.shape[0]) * 100,'% of the duos games')\nprint('they were around',(squads.shape[0]\/train.shape[0]) * 100,'% of the squads games')","f76e2026":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='kills',y='winPlacePerc',data=solos,color='black',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\nplt.text(37,0.6,'Solos',color='black',fontsize = 17,style = 'italic')\nplt.text(37,0.55,'Duos',color='#CC0000',fontsize = 17,style = 'italic')\nplt.text(37,0.5,'Squads',color='#3399FF',fontsize = 17,style = 'italic')\nplt.xlabel('Number of kills',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Solo vs Duo vs Squad Kills',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","baf85451":"f,ax = plt.subplots(figsize=(15, 15))\ntrain_matrix = train.corr()\n\nsns.heatmap(train_matrix,annot=True)","b406fe27":"def heatmap(x, y, size):\n    fig, ax = plt.subplots()\n    \n    # Mapping from column names to integer coordinates\n    x_labels = [v for v in sorted(x.unique())]\n    y_labels = [v for v in sorted(y.unique())]\n    x_to_num = {p[1]:p[0] for p in enumerate(x_labels)} \n    y_to_num = {p[1]:p[0] for p in enumerate(y_labels)} \n    \n    size_scale = 500\n    ax.scatter(\n        x=x.map(x_to_num), # Use mapping for x\n        y=y.map(y_to_num), # Use mapping for y\n        s=size * size_scale, # Vector of square sizes, proportional to size parameter\n        marker='s' # Use square as scatterplot marker\n    )\n    \n    # Show column labels on the axes\n    ax.set_xticks([x_to_num[v] for v in x_labels])\n    ax.set_xticklabels(x_labels, rotation=45, horizontalalignment='right')\n    ax.set_yticks([y_to_num[v] for v in y_labels])\n    ax.set_yticklabels(y_labels)","fc78658a":"train_matrix['winPlacePerc'].sort_values(ascending=False)","01919c4c":"columns = ['walkDistance','boosts','weaponsAcquired','damageDealt','heals','kills','longestKill']\n\ncorr = train[columns].corr()\ncorr = pd.melt(corr.reset_index(), id_vars='index') # Unpivot the dataframe, so we can get pair of arrays for x and y\ncorr.columns = ['x', 'y', 'value']\nheatmap(\n    x=corr['x'],\n    y=corr['y'],\n    size=corr['value'].abs()\n)","44b8f234":"train.columns","dbe6deeb":"train.drop(['Id','groupId','matchId'],axis=1,inplace=True)","96e47957":"train.head()","4ddaabd6":"train['matchType'].value_counts()","2b6dea81":"from sklearn.preprocessing import LabelEncoder","b56f8d41":"le = LabelEncoder()","cb3a021d":"train['matchType'] = le.fit_transform(train['matchType'])","635eb0d9":"train['matchType'].astype('int32')","cbe9d8c6":"from sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost\nfrom xgboost import XGBRegressor","25d93c79":"features = train.drop('winPlacePerc',axis=1)\nlabels = train['winPlacePerc']","b44e8e97":"from sklearn.model_selection import train_test_split","4159707c":"X_train,X_test,y_train,y_test = train_test_split(features,labels,test_size=0.1,random_state=42,shuffle=True)","4e304379":"from sklearn.preprocessing import StandardScaler","8d5e4262":"ss = StandardScaler()","aaa0d7bd":"X_train_scaled = ss.fit_transform(X_train)\nX_test_scaled = ss.transform(X_test)","30b452e5":"X_train_scaled","a310951e":"X_test_scaled","1d83ceda":"np.max(X_test_scaled),np.max(X_train_scaled)","361ecf2e":"lr = LinearRegression()","d80ac747":"lr.fit(X_train_scaled,y_train)","957c0fdc":"ypred_lr = lr.predict(X_test_scaled)","71f11088":"from sklearn.metrics import mean_absolute_error","d70fac6d":"mean_absolute_error(ypred_lr,y_test)","cb37f279":"xgb = XGBRegressor()","e8a55496":"lasso = Lasso()","2e4c5731":"lasso.fit(X_train_scaled,y_train)","5a59865d":"ypred_lasso = lasso.predict(X_test_scaled)","3d8a604f":"mean_absolute_error(ypred_lasso,y_test)","e9b7a319":"Let's check that destroying a vehicle and winning a match have some relation or not.....","44d73b00":"Now let's look at the hero's of the match which give revive to other people","1079c18c":"Most people do not even kill a single player So let's check do they do some damage","bbd636c0":"Now checking the relation between number of kills and winPlacePerc","704c432e":"So most of the players having number of kills between 0-20 are getting more killPoints","12a96023":"Now let's look at one of the important aspect i.e whether the player is solo or duo or group","38f1c64e":"So there is strong correlation between healing of the players and winPlace","063771d1":"These are the top 50 groups that have killed max players in the match. Congrats them","d7fa4fc9":"There is minor difference between assists and boosts","715b1151":"So as the number of headshots increases kills are also increasing","4953e530":"groupId - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n\nmatchId - Integer ID to identify match. There are no matches that are in both the training and testing set.\n\nassists - Number of enemy players this player damaged that were killed by teammates.(partial kills)\n\nboosts - Number of boost items used.\n\ndamageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n\nDBNOs - Number of enemy players knocked.\n\nheadshotKills - Number of enemy players killed with headshots.\n\nheals - Number of healing items used.\n\nkillPlace - Ranking in match of number of enemy players killed.\n\nkillPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.)\n\nkills - Number of enemy players killed.\n\nkillStreaks - Max number of enemy players killed in a short amount of time.\n\nlongestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a - player and driving away may lead to a large longestKill stat.\n\nmaxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n\nnumGroups - Number of groups we have data for in the match.\n\nrevives - Number of times this player revived teammates.\n\nrideDistance - Total distance traveled in vehicles measured in meters.\n\nroadKills - Number of kills while in a vehicle.\n\nswimDistance - Total distance traveled by swimming measured in meters.\n\nteamKills - Number of times this player killed a teammate.\n\nvehicleDestroys - Number of vehicles destroyed.\n\nwalkDistance - Total distance traveled on foot measured in meters.\n\nweaponsAcquired - Number of weapons picked up.\n\nwinPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.)\n\nwinPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match."}}