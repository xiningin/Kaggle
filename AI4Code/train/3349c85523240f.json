{"cell_type":{"7ba6aa8e":"code","fd34ed61":"code","b071bf53":"code","c0cd3286":"code","63467cc1":"code","d30b24a4":"code","f84976ec":"code","94df8817":"code","bb4648fc":"code","9671f4ce":"code","632aa2f6":"code","f8e384bc":"code","be82f814":"code","8df9487e":"code","990f1c1d":"code","567cb6a5":"code","4a5866c7":"code","14981704":"code","6129353d":"code","a03376db":"code","e46d74aa":"code","94018f33":"code","6e22c72e":"code","e19c79e8":"code","71b17508":"code","91a480f8":"code","eba6e5ad":"code","dc1f2334":"code","ac8b641e":"code","9639a9f9":"code","e9296dd5":"code","3d0866d3":"code","5e875da2":"code","ef647a72":"code","652dd231":"code","085402af":"code","62f976c8":"code","36ab4779":"code","d98d4bc9":"markdown","62029508":"markdown","7dc09419":"markdown","e6a7df4b":"markdown","51c99d4c":"markdown","856b841b":"markdown","c44efa4d":"markdown","55bc287c":"markdown","3ae35075":"markdown"},"source":{"7ba6aa8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n# !pip install plotly==3.10.0\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nimport warnings\nimport time\n# import plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fd34ed61":"df_cov = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_cnf = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndf_rec = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndf_death = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\ndf_cov.drop(columns=['SNo'],inplace=True)\n\n# print(df_cov.columns)\ndf_cov['ObservationDate'] = pd.to_datetime(df_cov['ObservationDate'] )\ndf_cov = df_cov.set_index('ObservationDate')","b071bf53":"df_wrld = df_cov.loc[:,['Confirmed','Deaths','Recovered']]\ndf_wrld = df_wrld.groupby(['ObservationDate']).sum()\nprint(df_wrld.tail())\n# df_wrld.head()\ncnf_data = go.Scatter(x=df_wrld.index,hovertext='Confirm',\n                         y=df_wrld.Confirmed)\ndea_data = go.Scatter(x=df_wrld.index,hovertext='Death',\n                         y=df_wrld.Deaths,\n                     )\nrec_data = go.Scatter(x=df_wrld.index,hovertext='Recovered'\n                         ,y=df_wrld.Recovered,\n                     )\n\nlayout = go.Layout(title='COVID-19 progression', xaxis=dict(title='Date'),\n                   yaxis=dict(title='Confirem',color='blue'),\n                  yaxis2=dict(title='Death', color='red',\n                               overlaying='y', side='right'),\n                  yaxis3=dict(title='Recovered', color='green',\n                               overlaying='y', side='left'),\n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data], layout=layout)\nfig.show()","c0cd3286":"cnf_period = df_cnf.drop(columns=['Province\/State','Country\/Region','Lat','Long']).columns\ndeath_period = df_death.drop(columns=['Province\/State','Country\/Region','Lat','Long']).columns\nrec_period = df_rec.drop(columns=['Province\/State','Country\/Region','Lat','Long']).columns\n\ndf_cnf1 = df_cnf.melt(id_vars=['Province\/State','Country\/Region','Lat','Long'],value_vars=cnf_period,var_name='Date',value_name='count')\ndf_death1 = df_death.melt(id_vars=['Province\/State','Country\/Region','Lat','Long'],value_vars=death_period,var_name='Date',value_name='count')\ndf_rec1 = df_rec.melt(id_vars=['Province\/State','Country\/Region','Lat','Long'],value_vars=rec_period,var_name='Date',value_name='count')\n\n\n","63467cc1":"df_cnf1.dropna(subset=['count', 'Country\/Region'],inplace=True) \ndf_death1.dropna(subset=['count', 'Country\/Region'],inplace=True) \ndf_rec1.dropna(subset=['count', 'Country\/Region'],inplace=True) \n","d30b24a4":"\nfig = px.scatter_geo(df_cnf1, lat='Lat',lon='Long',color='Country\/Region',\n                     hover_name=\"Country\/Region\", size='count',\n                     animation_frame=\"Date\",\n                     projection=\"natural earth\",\n                    title='Patient Confirm Progression ',template=\"plotly_dark\")\n# fig['data'][0].update(mode='markers+text', textposition='bottom center',\n#                       text=df_cnf['Country\/Region'].map('{}'.format).astype(str)+' '+\\\n#                       str(df_cnf['3\/20\/20']))\n\n\n#     time.sleep(1)\n    \nfig.show()\n","f84976ec":"fig = px.scatter_geo(df_death1, lat='Lat',lon='Long',color='Country\/Region',\n                     hover_name=\"Country\/Region\", size='count',\n                     animation_frame=\"Date\",\n                     projection=\"natural earth\",\n                    title='Patient Death Progression ',template=\"plotly_dark\")\n# fig['data'][0].update(mode='markers+text', textposition='bottom center',\n#                       text=df_cnf['Country\/Region'].map('{}'.format).astype(str)+' '+\\\n#                       str(df_cnf['3\/20\/20']))\n\n\n#     time.sleep(1)\n    \nfig.show()\n","94df8817":"\nfig = px.scatter_geo(df_rec1, lat='Lat',lon='Long',color='Country\/Region',\n                     hover_name=\"Country\/Region\", size='count',\n                     animation_frame=\"Date\",\n                     projection=\"natural earth\",\n                    title='Patient Recovered progression ',template=\"plotly_dark\")\n# fig['data'][0].update(mode='markers+text', textposition='bottom center',\n#                       text=df_cnf['Country\/Region'].map('{}'.format).astype(str)+' '+\\\n#                       str(df_cnf['3\/20\/20']))\n\n\n#     time.sleep(1)\n    \nfig.show()\n\n\n\n\n","bb4648fc":"df_cntry = df_cnf.loc[:,[\"Country\/Region\",df_cnf.columns[-1]]]\ndf_cntry = df_cntry.rename(columns={df_cnf.columns[-1]:'Confirm'})\ndf_cntry.fillna(0)\ndf_cntry = df_cntry.join(df_death.loc[:,[df_death.columns[-1]]]).rename(columns={df_death.columns[-1]:'Death'})\ndf_cntry.fillna(0)\ndf_cntry = df_cntry.join(df_rec.loc[:,[df_rec.columns[-1]]]).rename(columns={df_rec.columns[-1]:'Recovered'})\ndf_cntry.fillna(0)\ndf_cntry = df_cntry.groupby('Country\/Region').sum()\n\ndf_cntry.sort_values(by=['Confirm'],inplace=True,ascending=False)","9671f4ce":"print(df_cntry)","632aa2f6":"\n\nfig = px.bar(df_cntry.iloc[:30],x=df_cntry.index[:30],y='Confirm',color='Death',template=\"plotly_dark\")\nfig.show()","f8e384bc":"fig = px.bar(df_cntry.iloc[:30],x=df_cntry.index[:30],y='Confirm',color='Recovered',template=\"plotly_dark\")\n\nfig.show()","be82f814":"df_contr_cnf = df_cov.groupby(['Country\/Region']).max()\ntop_country = list(df_contr_cnf['Confirmed'].nlargest(10).index)\n\ndf_top = df_contr_cnf.loc[top_country]\ndf_top.reset_index(inplace = True)\ndf_top1 = df_top.melt(id_vars=['Country\/Region','Confirmed'],value_vars=['Deaths','Recovered'],var_name='Result',value_name='count')\ndf_top1 = df_top1[::-1]\n","8df9487e":"df_top.head(20)","990f1c1d":"fig = px.bar(df_top1,x='count',y='Country\/Region',color='Result',orientation = \"h\",template=\"plotly_dark\")\nfig.update_traces( marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6,)\nfig.show()\n","567cb6a5":"df_top = df_top[::-1]\nfig = px.bar(df_top,x='Confirmed',y='Country\/Region',orientation = \"h\",template=\"plotly_dark\")\nfig.update_traces( marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6,)\nfig.show()","4a5866c7":"df_china_rec = df_rec[df_rec['Country\/Region']=='China'].drop(columns=['Province\/State','Lat',\t'Long'])\ndf_italy_rec = df_rec[df_rec['Country\/Region']=='Italy'].drop(columns=['Province\/State','Lat',\t'Long']).transpose()\ndf_iran_rec = df_rec[df_rec['Country\/Region']=='Iran'].drop(columns=['Province\/State','Lat',\t'Long']).transpose()\n\ndf_italy_rec = df_italy_rec.rename(columns={df_italy_rec.columns[0]:'Italy'}) \ndf_iran_rec = df_iran_rec.rename(columns={df_iran_rec.columns[0]:'Iran'})\n\n\ndf_china_rec = df_china_rec.groupby('Country\/Region').sum().transpose()\n\ndf_spain_rec = df_rec[df_rec['Country\/Region']=='Spain'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\ndf_spain_rec = df_spain_rec.rename(columns={df_spain_rec.columns[0]:'Spain'})\n\ndf_US_rec = df_rec[df_rec['Country\/Region']=='US'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\ndf_US_rec = df_US_rec.rename(columns={df_US_rec.columns[0]:'US'})\n\n\ndf_iran_rec.drop(['Country\/Region'],inplace=True)\ndf_italy_rec.drop(['Country\/Region'],inplace=True)\n\ndf_top_rec = pd.concat([df_china_rec,df_italy_rec,df_iran_rec,df_spain_rec,df_US_rec], axis=1, sort=False)","14981704":"\n\ndf_china_cnf = df_cnf[df_cnf['Country\/Region']=='China'].drop(columns=['Province\/State','Lat',\t'Long'])\ndf_italy_cnf = df_cnf[df_cnf['Country\/Region']=='Italy'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\ndf_iran_cnf = df_cnf[df_cnf['Country\/Region']=='Iran'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\n\ndf_china_cnf = df_china_cnf.groupby('Country\/Region').sum().transpose()\n\ndf_italy_cnf = df_italy_cnf.rename(columns={df_italy_cnf.columns[0]:'Italy'}) \ndf_iran_cnf = df_iran_cnf.rename(columns={df_iran_cnf.columns[0]:'Iran'})\n\ndf_spain_cnf = df_cnf[df_cnf['Country\/Region']=='Spain'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\ndf_spain_cnf = df_spain_cnf.rename(columns={df_spain_cnf.columns[0]:'Spain'})\n\ndf_US_cnf = df_cnf[df_cnf['Country\/Region']=='US'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\ndf_US_cnf = df_US_cnf.rename(columns={df_US_cnf.columns[0]:'US'})\n\n\ndf_top_cnf = pd.concat([df_iran_cnf,df_italy_cnf,df_china_cnf,df_spain_cnf,df_US_cnf], axis=1, sort=False)\n\n","6129353d":"df_china_death = df_death[df_death['Country\/Region']=='China'].drop(columns=['Province\/State','Lat',\t'Long'])\ndf_italy_death= df_death[df_death['Country\/Region']=='Italy'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\ndf_iran_death = df_death[df_death['Country\/Region']=='Iran'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\ndf_spain_death = df_death[df_death['Country\/Region']=='Spain'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\ndf_US_death = df_death[df_death['Country\/Region']=='US'].drop(columns=['Country\/Region','Province\/State','Lat',\t'Long']).transpose()\n\ndf_china_death = df_china_death.groupby('Country\/Region').sum().transpose()\n\ndf_italy_death = df_italy_death.rename(columns={df_italy_death.columns[0]:'Italy'}) \ndf_iran_death = df_iran_death.rename(columns={df_iran_death.columns[0]:'Iran'})\ndf_spain_death = df_spain_death.rename(columns={df_spain_death.columns[0]:'Spain'})\ndf_US_death = df_US_death.rename(columns={df_US_death.columns[0]:'US'})\n\ndf_top_death = pd.concat([df_iran_death,df_italy_death,df_china_death,df_spain_death,df_US_death ], axis=1, sort=False)","a03376db":"# cnf_data = go.Scatter(x=df_top_cnf.index,\n#                          y=df_top_cnf.China,hovertext='China')\n# dea_data = go.Scatter(x=df_top_cnf.index,\n#                          y=df_top_cnf.Italy,hovertext='Italy'\n#                      yaxis='y2')\n# rec_data = go.Scatter(x=df_top_cnf.index,\n#                          y=df_top_cnf.Iran,hovertext='Iran'\n#                      yaxis='y3')\n\n# layout = go.Layout(title='COVID-19 Confirm Cases progression in top three countries', xaxis=dict(title='Date'),\n#                    yaxis=dict(title='Iran',color='green'),\n#                   yaxis2=dict(title='Italy', color='red',\n#                                overlaying='y', side='right'),\n#                   yaxis3=dict(title='China', color='blue',\n#                                overlaying='y', side='left'),\n#                   template=\"plotly_dark\")\n\n# fig = go.Figure(data=[cnf_data,dea_data,rec_data], layout=layout)\n# fig.show()","e46d74aa":"df_top_cnf","94018f33":"cnf_data = go.Scatter(x=df_top_rec.index,\n                         y=df_top_rec.China,hovertext='China')\ndea_data = go.Scatter(x=df_top_rec.index,\n                         y=df_top_rec.Italy,hovertext='Italy',\n                     yaxis='y')\nrec_data = go.Scatter(x=df_top_rec.index,\n                         y=df_top_rec.Iran,hovertext='Iran',\n                     yaxis='y')\n\nsp_data = go.Scatter(x=df_top_rec.index,\n                         y=df_top_rec.Spain,hovertext='Spain',\n                     yaxis='y')\nUS_data = go.Scatter(x=df_top_rec.index,\n                         y=df_top_rec.US,hovertext='US',\n                     yaxis='y')\n\nlayout = go.Layout(title='COVID-19 Recovered Cases progression in top countries', xaxis=dict(title='Date'),\n                     yaxis=dict(title='Count',color='White'),\n               \n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data,sp_data,US_data], layout=layout)\nfig.show()","6e22c72e":"cnf_data = go.Scatter(x=df_top_cnf.index,\n                         y=df_top_cnf.China,hovertext='China')\ndea_data = go.Scatter(x=df_top_cnf.index,\n                         y=df_top_cnf.Italy,hovertext='Italy',\n                     yaxis='y')\nrec_data = go.Scatter(x=df_top_cnf.index,\n                         y=df_top_cnf.Iran,hovertext='Iran',\n                     yaxis='y')\nsp_data = go.Scatter(x=df_top_cnf.index,\n                         y=df_top_cnf.Spain,hovertext='Spain',\n                     yaxis='y')\nUS_data = go.Scatter(x=df_top_cnf.index,\n                         y=df_top_cnf.US,hovertext='US',\n                     yaxis='y')\n\nlayout = go.Layout(title='COVID-19 Confirm Cases progression in top three countries', xaxis=dict(title='Date'),\n                   yaxis=dict(title='Count',color='White'),\n                \n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data,sp_data,US_data], layout=layout)\nfig.show()","e19c79e8":"cnf_data = go.Scatter(x=df_top_death.index,\n                         y=df_top_death.China,hovertext='China')\ndea_data = go.Scatter(x=df_top_death.index,\n                         y=df_top_death.Italy,hovertext='Italy',\n                     yaxis='y')\nrec_data = go.Scatter(x=df_top_death.index,\n                         y=df_top_death.Iran,hovertext='Iran',\n                     yaxis='y')\nsp_data = go.Scatter(x=df_top_death.index,\n                         y=df_top_death.Spain,hovertext='Spain',\n                     yaxis='y')\nUS_data = go.Scatter(x=df_top_death.index,\n                         y=df_top_death.US,hovertext='US',\n                     yaxis='y')\n\nlayout = go.Layout(title='COVID-19 Death progression in top three countries', xaxis=dict(title='Date'),\n                   yaxis=dict(title='Count',color='White '),\n                 \n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data,sp_data,US_data], layout=layout)\nfig.show()","71b17508":"import seaborn as sns\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\n\nsns.set_style('dark')\n\n","91a480f8":"map_df = gpd.read_file('\/kaggle\/input\/indian-states-shp-file\/Indian_States.shp')\nmap_df.loc[0,['st_nm']] = 'Andaman and Nicobar Islands'\nmap_df.head()\n\n","eba6e5ad":"df_india = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf_ind_bed =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/HospitalBedsIndia.csv')\ndf_ind_ICMR =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/ICMRTestingDetails.csv')\ndf_ind_indiv =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv')\ndf_ind_census =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/population_india_census2011.csv')\n\n\ndf_india = df_india.fillna(0)\ndf_india = df_india.replace(regex={r'-|--': 0})\n\nconvert_dict = {'ConfirmedIndianNational':int,\t'ConfirmedForeignNational':int}\ndf_india = df_india.astype(convert_dict)\n\ndf_india['Confirmed'] = df_india['ConfirmedIndianNational']+ df_india['ConfirmedForeignNational']","dc1f2334":"df_forMap = df_india.drop(columns=['Date','Sno']).groupby('State\/UnionTerritory').max()\n\n ","ac8b641e":"df_forMap.isnull().sum()","9639a9f9":"df_forMap","e9296dd5":"merged = map_df.set_index('st_nm').join(df_forMap)\n","3d0866d3":"merged.dtypes","5e875da2":"fig, ax = plt.subplots(5, figsize=(9, 45))\n\n\ntopic = ['Confirmed','ConfirmedIndianNational','ConfirmedForeignNational','Cured','Deaths']\ncmaps = ['Oranges','Blues', 'Purples', 'Greens', 'Reds']\nfor i,l in enumerate(topic):\n    ax[i].axis('off')\n    ax[i].set_title('{} Cases of COVID 19 in India'.format(l), fontdict={'fontsize': '20', 'fontweight' : '5'})\n    \n\n    merged.plot(column=l, cmap=cmaps[i], linewidth=0.8, ax=ax[i], edgecolor='0.75', legend=True)","ef647a72":"df_datechart = df_india.drop(columns=['State\/UnionTerritory','Sno'])\ndf_datechart['Date'] = pd.to_datetime(df_datechart['Date'],format='%d\/%m\/%y')\n\ndf_datechart = df_datechart.groupby('Date').sum()\n\n\ncnf_data = go.Bar(x=df_datechart.index,\n                         y=df_datechart.Confirmed,hovertext='Confirmed')\ndea_data = go.Bar(x=df_datechart.index,\n                         y=df_datechart.Deaths,hovertext='Deaths',\n                     yaxis='y2')\nrec_data = go.Bar(x=df_datechart.index,\n                         y=df_datechart.Cured,hovertext='Cured',\n                     yaxis='y2')\n\nlayout = go.Layout(title='COVID-19 progression in India', xaxis=dict(title='Date'),\n                   yaxis=dict(title='Confirem',color='blue'),\n                  yaxis2=dict(title='Scale of Recovery and death', color='white',\n                               overlaying='y', side='right'),\n                  yaxis3=dict(title='Recovered', color='white',\n                               overlaying='y', side='top'),\n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data], layout=layout)\nfig.update_traces(marker_line_width=1.5, opacity=0.7)\nfig.show()","652dd231":"df_datechart","085402af":"states = df_india['State\/UnionTerritory'].unique()\n\n\n# fig = make_subplots(rows=6, cols=5)\n# p=0\n# for i in range(1:7):\n#     for j in range(1:6):\n#         cnf_data = go.Bar(x=df_forMap.iloc[p],\n#                          y=df_datechart.iloc[p].Confirmed)\n#         dea_data = go.Bar(x=df_forMap.iloc[p],\n#                                  y=df_datechart.iloc[p].Deaths,\n#                              yaxis='y2')\n#         rec_data = go.Bar(x=df_forMap.iloc[p],\n#                                  y=df_datechart.iloc[p].Cured,\n#                              yaxis='y2')\n\n#         layout = go.Layout(title=states, xaxis=dict(title='Date'),\n#                            yaxis=dict(title='Confirem',color='blue'),\n#                           yaxis2=dict(title='Death', color='red',\n#                                        overlaying='y', side='right'),\n#                           yaxis3=dict(title='Recovered', color='white',\n#                                        overlaying='y', side='top'),\n#                           template=\"plotly_dark\")\n#         fig.add_trace(go.Figure(data=[cnf_data,dea_data,rec_data], layout=layout)),\n#           row=i, col=j)\n\n\n\n","62f976c8":"cnf_data = go.Bar(y=df_forMap.index,\n                         x=df_forMap.Confirmed,orientation='h',hovertext='Confirmed')\ndea_data = go.Bar(y=df_forMap.index,\n                         x=df_forMap.Deaths,\n                     yaxis='y',orientation='h',hovertext='Death')\nrec_data = go.Bar(y=df_forMap.index,\n                         x=df_forMap.Cured,\n                     yaxis='y',orientation='h',hovertext='Cured')\n\nlayout = go.Layout(title='COVID-19 data for each State', xaxis=dict(title='Count'),\n                   yaxis=dict(title='States',color='White'),\n                  \n                  template=\"plotly_dark\")\n\nfig = go.Figure(data=[cnf_data,dea_data,rec_data], layout=layout)\nfig.show()","36ab4779":"df_forMap.Confirmed.sum()","d98d4bc9":"#### Here are my observation :\n If we oberve,  Confirm cases and Death cases follow very simmilar trend. So its obvious that if are able to control the trend of confirm cases it will severly affect progression of death cases.\n","62029508":"## COVID 19 Progression over the world\n\nAs we can see 'df_cov' Dataset gives us activaty all around the world each day for every specific country which is affected.Using groupby I summed up all cases in world for each day. And using that I plot time series plot for given amount of time.\n\n* Blue : Confirmed Cases\n* Green : Recovered cases\n* Red : Death Cases","7dc09419":"## DataSets\n\nWorld dataset : https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\n\nIndia Dataset : [https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-india](http:\/\/)","e6a7df4b":"## I will update more.... leave your suggestions in comments....\n\n# THANK YOU","51c99d4c":"# COVID-19 Analysis, Visualization, Comparison\n\n\n**Coronavirus** is a family of viruses that can cause illness, which can vary from common cold and cough to sometimes more severe disease. Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV) were such severe cases with the world already has faced.\n\n\n**SARS-CoV-2** (n-coronavirus) is the new virus of the coronavirus family, which first discovered in 2019, which has not been identified in humans before. It is a contiguous virus which started from Wuhan in December 2019. Which later declared as Pandemic by WHO due to high rate spreads throughout the world. Currently (on date 27 March 2020), this leads to a total of 24K+ Deaths across the globe, including 16K+ deaths alone in Europe.\n\n\nPandemic is spreading all over the world; it becomes more important to understand about this spread. This NoteBook is an effort to analyze the cumulative data of confirmed, deaths, and recovered cases over time. In this notebook, the main focus is to analyze the spread trend of this virus all over the world.","856b841b":"# Global Trend\n\nTo understand the desease we first need to find its effect all over the world. I used plotly library in python to plot interactive plots to get more insights withoiut putting much  on surface.","c44efa4d":"### Packages ( Expand Code to see)","55bc287c":"### COVID 19 spread Buuble plot\n\nBubble plot generally help us to see effect of parameter over certain point. Here points are difined by longitude and latitude on the other hand radius of circle defines population affected by desease. Now we show progression by controlling radius of circle with respect to time.","3ae35075":"# INDIA"}}