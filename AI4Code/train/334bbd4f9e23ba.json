{"cell_type":{"ca53bf95":"code","ff48a258":"code","1303017d":"code","74eaca53":"code","fba2a3b4":"code","82083234":"code","3d76a94a":"code","049fede6":"code","1baefdf8":"code","b4a8d37e":"code","305e616c":"code","97bf6000":"code","0aad4e94":"code","63c3b62c":"code","a4e0558b":"code","58cf803d":"code","e0a29229":"code","a8cf02d1":"code","19cd069e":"code","4c01c384":"code","8545b40c":"code","4717a8c4":"code","8af9ab56":"markdown","e8ecc956":"markdown","a8aebc52":"markdown","3e7b77c2":"markdown","ce6f2f49":"markdown","25d6b146":"markdown","420a8369":"markdown","284e9eb2":"markdown","f757afd6":"markdown","953176b6":"markdown"},"source":{"ca53bf95":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ff48a258":"train=pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\")","1303017d":"y=train[\"target\"]\nfull_train=train.iloc[:,:-1]\ntrain.columns\nx_test=test.copy()\ny.describe()","74eaca53":"fig, ax = plt.subplots(figsize=(8, 4))\nsns.histplot(data=y,ax=ax,kde=True)","fba2a3b4":"full_train.head()","82083234":"x_test.head()","3d76a94a":"full_train[\"id\"].dtypes","049fede6":"full_train.describe()","1baefdf8":"x_test.describe()","b4a8d37e":"float_columns=[cname for cname in full_train.columns if full_train[cname].dtypes==\"float64\"]\ncategory_columns=[cname for cname in full_train.columns if full_train[cname].dtypes==\"object\"]\n\nuni_dict_train={}\nfor col in category_columns:\n    uni_dict_train[col]=full_train[col].unique()\n\nuni_dict_test={}\nfor col in category_columns:\n    uni_dict_test[col]=x_test[col].unique()\nuni_dict_train, uni_dict_test","305e616c":"vc = full_train[\"cat0\"].value_counts()#train\u3092\u4f7f\u3044\u3001input\u306b\u3088\u3089\u305a\u4f7f\u3046\u5217\u3092\u56fa\u5b9a\nvc[vc>20].index\nvc = vc[vc > 20]\na=pd.Categorical(full_train[\"cat0\"], categories=vc.index)\na","97bf6000":"def create_one_hot_encoding(input_df):\n    use_columns = category_columns\n    out_df = pd.DataFrame()\n    for column in use_columns:\n\n        # \u3042\u307e\u308a\u5de8\u5927\u306a\u884c\u5217\u306b\u306a\u3089\u306a\u3044\u3088\u3046, \u51fa\u73fe\u56de\u6570\u304c 20 \u56de\u3092\u4e0b\u56de\u308b\u30ab\u30c6\u30b4\u30ea\u306f\u8003\u616e\u3057\u306a\u3044\n        vc = full_train[column].value_counts()#train\u3092\u4f7f\u3044\u3001input\u306b\u3088\u3089\u305a\u4f7f\u3046\u5217\u3092\u56fa\u5b9a\n        vc = vc[vc > 20]\n\n        # \u660e\u793a\u7684\u306b catgories \u3092\u6307\u5b9a\u3057\u3066, input_df \u306b\u3088\u3089\u305a\u5217\u306e\u5927\u304d\u3055\u304c\u7b49\u3057\u304f\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n        cat = pd.Categorical(input_df[column], categories=vc.index)\n        #column\u304ccat0\u306e\u5834\u5408\n        #['B', 'B', 'A', 'B', 'A', ..., 'B', 'A', 'B', 'A', 'A']\n        #Length: 300000\n        #Categories (2, object): ['A', 'B']\n        # \u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067 one-hot \u5316\n        out_i = pd.get_dummies(cat)\n        # column \u304c Catgory \u578b\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067 list \u306b\u3057\u3066\u89e3\u9664\u3059\u308b (\u3053\u3046\u3057\u306a\u3044\u3068 concat \u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\n        out_i.columns = out_i.columns.tolist()\n        out_i = out_i.add_prefix(f'{column}=')#\u63a5\u982d\u306b\u3064\u3051\u308b\n        out_df = pd.concat([out_df, out_i], axis=1)\n    return out_df","0aad4e94":"df_train=pd.concat([create_one_hot_encoding(full_train),full_train[float_columns]],axis=1)\ndf_test=pd.concat([create_one_hot_encoding(x_test),x_test[float_columns]],axis=1)","63c3b62c":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, \n             y, \n             cv, \n             params: dict=None, \n             verbose: int=50):\n    \"\"\"lightGBM \u3092 CrossValidation \u306e\u67a0\u7d44\u307f\u3067\u5b66\u7fd2\u3092\u884c\u306a\u3046 function\"\"\"\n\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u3044\u3068\u304d\u306f\u3001\u7a7a\u306e dict \u3067\u7f6e\u304d\u63db\u3048\u308b\n    if params is None:\n        params = {}\n\n    models = []\n    # training data \u306e target \u3068\u540c\u3058\u3060\u3051\u306e\u30bc\u30ed\u914d\u5217\u3092\u7528\u610f\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): #cv\u306b\u306ftrain\u3068test\u306eindex\u756a\u53f7\u304cidx_train\u3068idx_valid\u306b\u5165\u308b\n        # \u3053\u306e\u90e8\u5206\u304c\u4ea4\u5dee\u691c\u8a3c\u306e\u3068\u3053\u308d\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 cv instance \u306b\u3088\u3063\u3066\u5206\u5272\u3057\u307e\u3059\n        # training data \u3092 trian\/valid \u306b\u5206\u5272\n        #array\u578b\u304b\u3089\u5404cv\u3067\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3092\u6307\u5b9a\u3057\u3066train\u3068test\u3092\u4f5c\u308b\n        x_train, y_train = X[idx_train], y[idx_train]#x\u306farray\u578b\u3067dataframe\u578b\u3067\u306f\u306a\u3044\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)#\u8f9e\u66f8\u578b\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n        clf.fit(x_train, y_train, \n                eval_set=[(x_valid, y_valid)],  \n                early_stopping_rounds=100,\n                verbose=verbose)\n\n        pred_i = clf.predict(x_valid)#\u4e88\u6e2c\n        oof_pred[idx_valid] = pred_i#oof_pred(\u30bc\u30ed\u914d\u5217)\u306ecv\u3057\u305f\u6642\u306ecv\u3057\u305f\u6642\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306eindex\u756a\u53f7\u306b\u4e88\u6e2c\u5024\u3092\u5165\u308c\u308b\n        models.append(clf)#\u30e2\u30c7\u30eb\u3092model\u914d\u5217\u306b\u8ffd\u52a0\n        print(f'Fold {i} RMSE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSE: {:.4f}'.format(score))\n    return oof_pred, models\n","a4e0558b":"params = {\n    # \u76ee\u7684\u95a2\u6570. \u3053\u308c\u306e\u610f\u5473\u3067\u6700\u5c0f\u3068\u306a\u308b\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u307e\u3059. \n    'objective': 'rmse', \n\n     # \u5b66\u7fd2\u7387. \u5c0f\u3055\u3044\u307b\u3069\u306a\u3081\u3089\u304b\u306a\u6c7a\u5b9a\u5883\u754c\u304c\u4f5c\u3089\u308c\u3066\u6027\u80fd\u5411\u4e0a\u306b\u7e4b\u304c\u308b\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3001\n    # \u304c\u305d\u308c\u3060\u3051\u6728\u3092\u4f5c\u308b\u305f\u3081\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\n    'learning_rate': .1,\n\n    # L2 Reguralization\n    'reg_lambda': 1.,\n    # \u3053\u3061\u3089\u306f L1 \n    'reg_alpha': .1,\n\n    # \u6728\u306e\u6df1\u3055. \u6df1\u3044\u6728\u3092\u8a31\u5bb9\u3059\u308b\u307b\u3069\u3088\u308a\u8907\u96d1\u306a\u4ea4\u4e92\u4f5c\u7528\u3092\u8003\u616e\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n    'max_depth': 5, \n\n    # \u6728\u306e\u6700\u5927\u6570. early_stopping \u3068\u3044\u3046\u67a0\u7d44\u307f\u3067\u6728\u306e\u6570\u306f\u5236\u5fa1\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3068\u3066\u3082\u5927\u304d\u3044\u5024\u3092\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059.\n    'n_estimators': 10000, \n\n    # \u6728\u3092\u4f5c\u308b\u969b\u306b\u8003\u616e\u3059\u308b\u7279\u5fb4\u91cf\u306e\u5272\u5408. 1\u4ee5\u4e0b\u3092\u6307\u5b9a\u3059\u308b\u3068\u7279\u5fb4\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u6b20\u843d\u3055\u305b\u307e\u3059\u3002\u5c0f\u3055\u304f\u3059\u308b\u3053\u3068\u3067, \u307e\u3093\u3079\u3093\u306a\u304f\u7279\u5fb4\u3092\u4f7f\u3046\u3068\u3044\u3046\u52b9\u679c\u304c\u3042\u308a\u307e\u3059.\n    'colsample_bytree': .5, \n\n    # \u6700\u5c0f\u5206\u5272\u3067\u306e\u30c7\u30fc\u30bf\u6570. \u5c0f\u3055\u3044\u3068\u3088\u308a\u7d30\u304b\u3044\u7c92\u5ea6\u306e\u5206\u5272\u65b9\u6cd5\u3092\u8a31\u5bb9\u3057\u307e\u3059.\n    'min_child_samples': 10,\n\n    # bagging \u306e\u983b\u5ea6\u3068\u5272\u5408\n    'subsample_freq': 3,\n    'subsample': .9,\n\n    # \u7279\u5fb4\u91cd\u8981\u5ea6\u8a08\u7b97\u306e\u30ed\u30b8\u30c3\u30af(\u5f8c\u8ff0)\n    'importance_type': 'gain', \n    'random_state': 71,\n}","58cf803d":"from sklearn.model_selection import KFold\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(df_train, y)) # \u3082\u3068\u3082\u3068\u304c generator \u306a\u305f\u3081\u660e\u793a\u7684\u306b list \u306b\u5909\u63db\u3059\u308b","e0a29229":"oof,models=fit_lgbm(df_train.values,y,cv=cv,params=params,verbose=500)","a8cf02d1":"def visualize_importance(models, feat_train_df):\n    \"\"\"lightGBM \u306e model \u914d\u5217\u306e feature importance \u3092 plot \u3059\u308b\n    CV\u3054\u3068\u306e\u30d6\u30ec\u3092 boxen plot \u3068\u3057\u3066\u8868\u73fe\u3057\u307e\u3059.\n\n    args:\n        models:\n            List of lightGBM models\n        feat_train_df:\n            \u5b66\u7fd2\u6642\u306b\u4f7f\u3063\u305f DataFrame\n    \"\"\"\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=90)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax\n\nfig, ax = visualize_importance(models, df_train)","19cd069e":"pred_i = np.array([model.predict(df_test.values) for model in models])","4c01c384":"pred = np.mean(pred_i,axis=0)#\u5217\u3054\u3068\u306e\u5408\u8a08\nsubmission = pd.DataFrame({\"id\":test.id,\"target\":pred})","8545b40c":"submission.head()","4717a8c4":"submission.to_csv('01_submission.csv', index=False)","8af9ab56":"## \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316\n- cont12\u306810\u306e\u91cd\u8981\u5ea6\u304c\u304b\u306a\u308a\u9ad8\u3044\n- object\u5909\u6570\u3088\u308afloat\u5909\u6570\u306e\u65b9\u304c\u91cd\u8981\u5ea6\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b","e8ecc956":"- count0,1,2,3,6,8,12\u306f\u6700\u5c0f\u5024\u304c\u8ca0\u3068\u306a\u3063\u3066\u3044\u308b\n- count\u30c7\u30fc\u30bf\u306f\u3069\u308c\u3082\u6700\u5c0f\u5024\u306f0\u306e\u4ed8\u8fd1\u3000\u6700\u5927\u5024\u306f1\u306e\u4ed8\u8fd1\u306b\u3042\u308b","a8aebc52":"### one-ho-encoding\n- \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u8981\u7d20\u3054\u3068\u306e\u30ab\u30a6\u30f3\u30c8\u3067\u6975\u7aef\u306b\u5c0f\u3055\u306a\u8981\u7d20\u3092\u9664\u304f\n- \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3082\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5217\u6570\u3092\u540c\u3058\u306b\u3059\u308b\u3088\u3046\u306b\u3059\u308b","3e7b77c2":"- float_cloumns : float\u30c7\u30fc\u30bf\u306e\u5217\u540d\n- category_cloumns : object\u30c7\u30fc\u30bf\u306e\u5217\u540d\n- \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306ecategory_cloumns\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5909\u6570\u306f\u5168\u3066\u540c\u3058\u3060\u3063\u305f","ce6f2f49":"## \u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u3057\u3066\u3001\u30e2\u30c7\u30eb\u3054\u3068\u306e\u5e73\u5747\u3092\u4e88\u6e2c\u5024\u3068\u3059\u308b","25d6b146":"## \u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\n- lightgbm\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\n- \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306fk-fold\u3059\u308b","420a8369":"## \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03","284e9eb2":"## \u30c7\u30fc\u30bf\u6982\u8981\n- \u4fdd\u967a\u91d1\u306e\u8acb\u6c42\u984d\u306e\u4e88\u6e2c\n- \u5217\u540d\u306fcat0\u304b\u3089cat9\u3068cont1\u304b\u3089cont13\u306e23\u500b\u306e\u7279\u5fb4\u91cf\u3067\u3042\u308b\n- \u6b20\u640d\u5024\u306f\u5b58\u5728\u3057\u306a\u3044\n\n## \u30c7\u30fc\u30bf\u306e\u540d\u524d\n- train : \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u5168\u4f53\n- test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5168\u4f53\n- full_train : \u76ee\u7684\u5909\u6570\u4ee5\u5916\u306e\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30c7\u30fc\u30bf\n- x_test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\n- y : \u76ee\u7684\u5909\u6570\n","f757afd6":"## \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\n- \u56de\u5e30\u554f\u984c\u306a\u306e\u3067k-fold\u306b\u3088\u308b\u4ea4\u5dee\u691c\u8a3c\n- \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2","953176b6":"### train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u3092one-hot\u3057\u3066\u30e2\u30c7\u30eb\u306b\u5165\u308c\u308b\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\n- df_train\n- df_test"}}