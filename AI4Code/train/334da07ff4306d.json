{"cell_type":{"24fb9374":"code","70db8468":"code","8a0501b9":"code","df1d04bc":"code","f25e8e6b":"code","95997448":"code","74ad6c5a":"code","04075b7d":"code","f6f25b0b":"code","54495e43":"code","79bdb89b":"code","3fd49d90":"code","d55a46e5":"code","f653acf4":"code","22ab8fef":"code","ba5b0bdb":"code","93977117":"code","28fc542b":"code","c428aae7":"code","e8bf2346":"code","7b129a6b":"code","c39f467f":"code","a6490786":"code","c027d659":"code","9d1714b4":"code","5903c3cc":"code","568a5d39":"code","1d42ddbd":"code","5d2247e8":"code","7c69eaef":"code","a68d57f1":"code","2c18303d":"code","e4c02f0b":"code","dd0ccf61":"code","d831d1c1":"code","2a4e6ca9":"code","2e0f5c32":"code","fbb46cf9":"code","eb581796":"code","1f34aa37":"code","cd69f1ed":"code","a2f3f7b6":"code","69858e53":"markdown","fb9f8e41":"markdown","0083a4d9":"markdown","9c318860":"markdown","015ed8bc":"markdown","2be6df68":"markdown","5bb0b271":"markdown","ba33d3ea":"markdown","d71926f8":"markdown","08e72aff":"markdown","eff8f41f":"markdown","548aa61b":"markdown","cfcf6386":"markdown","0d3b7e14":"markdown","a2921b86":"markdown","3dcaa083":"markdown","6d0d1d81":"markdown","21fa7603":"markdown","6aa40dc0":"markdown","f985a745":"markdown","79d7ea44":"markdown","ef3824d0":"markdown","6fcdb7e3":"markdown","3ecf3a13":"markdown","826c4f07":"markdown","7677f8fe":"markdown"},"source":{"24fb9374":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nprint('Setup complete')\n\n# Any results you write to the current directory are saved as output.","70db8468":"tips_data = sns.load_dataset('tips')\ntips_data.head()","8a0501b9":"print(tips_data.corr())\nprint(sns.get_dataset_names())","df1d04bc":"plt.figure(figsize=(14,6))\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5): \n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nsinplot()\nplt.figure(figsize=(14,6))\nplt.show()","f25e8e6b":"import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip = 1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sb\nsb.set()\nsinplot()\nplt.show()","95997448":"import numpy as np\nfrom matplotlib import pyplot as plt\ndef sinplot(flip=1):\n   x = np.linspace(0, 14, 100)\n   for i in range(1, 5):\n      plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nimport seaborn as sns\nsns.set_style(\"ticks\")\nsns.set_context('talk')#it sets the marker size and the figure size\nsinplot()\nplt.show()","74ad6c5a":"print(sns.axes_style)","04075b7d":"sns.color_palette(palette = None, n_colors = None, desat = None)","f6f25b0b":"from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette(palette='Purples')\nsb.palplot(current_palette)\nplt.show()","54495e43":"from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette()\nsb.palplot(sb.color_palette(\"Greens\"))\nplt.show()\nsb.palplot(sb.color_palette('Purples'))","79bdb89b":"from matplotlib import pyplot as plt\nimport seaborn as sb\ncurrent_palette = sb.color_palette()\nsb.palplot(sb.color_palette(\"BrBG\", 7))\nplt.show()","3fd49d90":"sns.palplot(sns.color_palette(\"hls\", 8))\nsns.palplot(sns.color_palette(\"husl\", 8))\nsns.palplot(sns.color_palette())","d55a46e5":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\nplt.figure(figsize=(6,4))\nsb.set_palette(\"muted\")\nsb.set_style(\"darkgrid\")\ndf = sb.load_dataset('iris')\nsb.distplot(df['petal_length'],kde = False)#kde = True dile density dekhabe\nplt.show()","f653acf4":"plt.figure(figsize=(6,4))\ntitanic_data = sb.load_dataset('titanic')\nsns.set_palette('deep')\nsns.distplot(a=titanic_data['survived'],kde =False)#hue and palette nai\nprint(titanic_data['survived'].value_counts())","22ab8fef":"plt.figure(figsize=(6,4))\ntitanic=sns.load_dataset('titanic')    \nage1=titanic['age'].dropna()\nprint(age1.head())\nsns.distplot(a = age1,kde=False,color = 'blue')#kde = true dile frequencey er jaigai density ashbe\nplt.show()\n#here titanic['sex'] will give error as it requires some numerical values(data) as it calculates distribution. Male and Female isn't\n#numerical","ba5b0bdb":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\n\ndf = sb.load_dataset('iris')\nplt.figure(figsize=(3,2))\nsns.set_context('talk')\nsb.jointplot(x = 'petal_length',y = 'petal_width',data = df,kind='reg',dropna= True)#kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d },\nplt.show()\n\nsb.jointplot(x='age',y='survived',data=titanic,kind='reg',dropna=True,color='purple')\n#hue and palette nai","93977117":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\n#plt.figure(figsize=(12,8))\ndf = sb.load_dataset('iris')\nsb.set_style(\"ticks\")\nsb.set_context(\"talk\")\nsb.pairplot(data=df,hue = 'species',diag_kind = \"kde\",palette = \"husl\",height=2,aspect=1.5)#kind : {\u2018scatter\u2019, \u2018reg\u2019} diag_kind : {\u2018auto\u2019, \u2018hist\u2019, \u2018kde\u2019},\n#dropna : boolean\nplt.show()","28fc542b":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.set_palette('Set1')\nplt.figure(figsize=(12,8))\nsb.set_style('ticks')\n\nsb.stripplot(x = \"species\", y = \"petal_length\", data = df)\nplt.show()\nplt.figure(figsize=(16,8))\nsb.stripplot(x = \"species\", y = \"petal_length\", data = df,jitter=False)#jitter adds some noise in the data","c428aae7":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nplt.figure(figsize=(12,8))\nsb.swarmplot(x = \"species\", y = \"petal_length\", data = df,palette='Set1')\nplt.show()","e8bf2346":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.set_palette('husl')\nsb.boxplot(x = \"species\", y = \"petal_length\", data = df)\nplt.show()","7b129a6b":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.set_palette('husl')\nsb.violinplot(x = \"day\", y = \"total_bill\", data=df)\nplt.show()\n\nsb.violinplot(x='survived',y='age',hue='sex',data=titanic,palette='husl')","c39f467f":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.set_context('talk')\nplt.figure(figsize=(12,8))\nsb.violinplot(x = \"day\", y = \"total_bill\",hue = 'sex', data = df,palette='husl')\nplt.show()","a6490786":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.set_context('talk')\nplt.figure(figsize=(6,4))\nsb.barplot(x = \"sex\", y = \"survived\", hue = \"class\", data = df,palette='husl')#categories are in X and Hue and Y axis contains . Survived is a categorial but it has a numerical value\n#the continuous variable\nplt.show()\nsb.barplot(x = \"sex\", y = \"age\", data = df,palette='husl')\nplt.show()\n#Y axis a string thakle: unsupported operand type(s) for \/: 'str' and 'int'","c027d659":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.set_context('talk')\nplt.figure(figsize=(12,8))\nsb.countplot(x = \"class\", y=None,hue='sex', data = df, palette = \"husl\");\nplt.show()\nsb.countplot(x = \"survived\", y=None,hue='sex', data = df, palette = \"hls\");\nplt.show()","9d1714b4":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('titanic')\nsb.set_context('talk')\nplt.figure(figsize=(12,8))\nsb.pointplot(x = \"sex\", y = \"survived\", hue = \"class\", data = df)\nplt.show()\n\n\n\ntips = sb.load_dataset(\"tips\")\nsb.pointplot(x = \"day\", y = \"total_bill\",hue = 'sex', data = tips,palette='husl')\nplt.show()\n\n#this plot is showing us the trend of getting tips in everyday","5903c3cc":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\nsb.reset_defaults()\ndf = sb.load_dataset('exercise')\nsb.catplot(x = \"time\", y = \"pulse\", hue = \"kind\", kind = 'point', col = \"diet\", data = df,palette='husl');#The kind of plot to draw (corresponds to the name of a categorical plotting function. \n#Options are: \u201cpoint\u201d, \u201cbar\u201d, \u201cstrip\u201d, \u201cswarm\u201d, \u201cbox\u201d, \u201cviolin\u201d, or \u201cboxen\u201d,\"count\".\n# Variables= x,y,col,row,hue\nplt.show()\n\nsns.catplot(x=\"alive\", col=\"class\", col_wrap=3,data=titanic[titanic['class'].notnull()],kind=\"count\", height=3, aspect=0.8)\nplt.show()   \n\nsns.catplot(x=\"sex\", col=\"class\",hue='survived', col_wrap=3,data=titanic[titanic['class'].notnull()],kind=\"count\", height=3, aspect=0.8)\nplt.show()    ","568a5d39":"sns.catplot(x=\"class\", hue=\"who\", col=\"alive\",data=titanic, kind=\"count\",height=4, aspect=.7,palette='Set1');","1d42ddbd":"sns.catplot(x=\"deck\", kind=\"count\", palette=\"ch:.25\", data=titanic);","5d2247e8":"sb.scatterplot(x=\"total_bill\", y=\"tip\",hue='sex', data=tips)","7c69eaef":"import pandas as pd\nimport seaborn as sb\nfrom matplotlib import pyplot as plt\ndf = sb.load_dataset('tips')\nsb.regplot(x = \"total_bill\", y = \"tip\", data = df)\nsb.lmplot(x = \"total_bill\", y = \"tip\",order=4, data = df)\nplt.show()","a68d57f1":"sns.regplot(x=\"size\", y=\"total_bill\", data=tips, x_jitter=.1)\n","2c18303d":"sns.regplot(x=\"size\", y=\"total_bill\", data=tips,x_estimator=np.mean)","e4c02f0b":"ans = sns.load_dataset(\"anscombe\")\nax = sns.regplot(x=\"x\", y=\"y\", data=ans.loc[ans.dataset == \"III\"],robust=True, ci=None)","dd0ccf61":"tips[\"big_tip\"] = (tips.tip \/ tips.total_bill) > .175\nax = sns.regplot(x=\"total_bill\", y=\"big_tip\", data=tips,logistic=True, n_boot=500, y_jitter=.03)\nplt.show()\nsns.regplot(x='age',y='survived',data=titanic_data,logistic=True,y_jitter=0.03)\nplt.show()","d831d1c1":"df.head()\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",col=\"time\", aspect=.6, kind=\"swarm\", data=df);","2a4e6ca9":"tips = sns.load_dataset('tips')\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips, markers=[\"o\", \"x\"], palette=\"Set1\");","2e0f5c32":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", col=\"time\", data=tips);","fbb46cf9":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\",col=\"time\", row=\"sex\", data=tips);#I can input 5 variables\n","eb581796":"sns.lmplot(x=\"size\", y=\"tip\", data=tips, x_jitter=.05);#one vairable is descrete\n#x_jitter will add some noise thtat will help us to regression","1f34aa37":"anscombe = sns.load_dataset(\"anscombe\")\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),order=2, ci=None, scatter_kws={\"s\": 80});","cd69f1ed":"a = sns.FacetGrid( titanic_data, hue = 'survived', aspect=4 ,palette='Set1')\na.map(sns.kdeplot, 'age', shade= True )\na.set(xlim=(0 , titanic_data['age'].max()))\na.add_legend()","a2f3f7b6":"h = sns.FacetGrid(titanic_data, row = 'sex', col = 'class', hue = 'survived',palette='Set1')\nh.map(plt.hist, 'age', alpha = .75)\nh.add_legend()","69858e53":"**Seaborn Figure Styles**\n\nThe interface for manipulating the styles is **set_style()**. Using this function you can set the theme of the plot. As per the latest updated version, below are the five themes available.\n\n1.     Darkgrid\n1.     Whitegrid\n1.     Dark\n1.     White\n1.     Ticks\n\nLet us try applying a theme from the above-mentioned list. The default theme of the plot will be darkgrid which we have seen in the previous example.","fb9f8e41":"Plotting Univariate Distribution **(Not good for categorial data unless data is in numerical format)**\n\nDistribution of data is the foremost thing that we need to understand while analysing the data. Here, we will see how seaborn helps us in understanding the univariate distribution of the data.\n\nFunction distplot() provides the most convenient way to take a quick look at univariate distribution. This function will plot a histogram that fits the kernel density estimation of the data.\nUsage\n\nseaborn.distplot()\n\nHistograms represent the data distribution by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.\n\nSeaborn comes with some datasets and we have used few datasets in our previous chapters. We have learnt how to load the dataset and how to lookup the list of available datasets.\n\nSeaborn comes with some datasets and we have used few datasets in our previous chapters. We have learnt how to load the dataset and how to lookup the list of available datasets.\n\nThese are basic and important parameters to look into.","0083a4d9":"Seaborn provides a function called color_palette(), which can be used to give colors to plots and adding more aesthetic value to it.\nIt is hard to decide which palette should be used for a given data set without knowing the characteristics of data. Being aware of it, we will classify the different ways for using color_palette() types \u2212\n\n    qualitative\n    sequential\n    diverging\n\nWe have another function seaborn.palplot() which deals with color palettes. This function plots the color palette as horizontal array. We will know more regarding seaborn.palplot() in the coming examples.","9c318860":"Sequential plots are suitable to express the distribution of data ranging from relative lower values to higher values within a range.\n\nAppending an additional character \u2018s\u2019 to the color passed to the color parameter will plot the Sequential plot.","015ed8bc":"Swarmplot()\n\nAnother option which can be used as an alternate to \u2018Jitter\u2019 is function swarmplot(). This function positions each point of scatter plot on the categorical axis and thereby avoids overlapping points \u2212","2be6df68":"What is Facet Grid?\n\nFacet grid forms a matrix of panels defined by row and column by dividing the variables. Due of panels, a single plot looks like multiple plots. It is very helpful to analyze all combinations in two discrete variables.\n\nLet us visualize the above the definition with an example","5bb0b271":"In our previous chapters we learnt about scatter plots, hexbin plots and kde plots which are used to analyze the **continuous variables** under study. These plots are not suitable when the variable under study is categorical.\n\nWhen one or both the variables under study are categorical, we use plots like striplot(), swarmplot(), etc,. Seaborn provides interface to do so.\nCategorical Scatter Plots\n\nIn this section, we will learn about categorical scatter plots.\nstripplot()\n\nstripplot() is used when one of the variable under study is categorical. It represents the data in sorted order along any one of the axis.","ba33d3ea":"**Scatterplot()**\nThe relationship between x and y can be shown for different subsets of the data using the hue, size, and style parameters. These parameters control what visual semantics are used to identify the different subsets. It is possible to show up to three dimensions independently by using all three semantic types, but this style of plot can be hard to interpret and is often ineffective. Using redundant semantics (i.e. both hue and style for the same variable) can be helpful for making graphics more accessible.\n\nScatter, LM, and Reggreesion will have to use when both the variables are continuous","d71926f8":"If you want to customize the Seaborn styles, you can pass a dictionary of parameters to the set_style() function. Parameters available are viewed using axes_style() function.","08e72aff":"Setting the Default Color Palette\n\nThe functions color_palette() has a companion called set_palette() The relationship between them is similar to the pairs covered in the aesthetics chapter. The arguments are same for both set_palette() and color_palette(), but the default Matplotlib parameters are changed so that the palette is used for all plots.","eff8f41f":"Datasets under real-time study contain many variables. In such cases, the relation between each and every variable should be analyzed. Plotting Bivariate Distribution for (n,2) combinations will be a very complex and time taking process.\n\nTo plot multiple pairwise **bivariate distributions** in a dataset, you can use the pairplot() function. This shows the relationship for (n,2) combination of variable in a DataFrame as a matrix of plots and **the diagonal plots are the univariate** plots.","548aa61b":"Diverging Color Palette\n\nDiverging palettes use two different colors. Each color represents variation in the value ranging from a common point in either direction.\n\nAssume plotting the data ranging from -1 to 1. The values from -1 to 0 takes one color and 0 to +1 takes another color.\n\nBy default, the values are centered from zero. You can control it with parameter center by passing a value.","cfcf6386":"The advantage of using Facet is, we can input another variable into the plot. The above plot is divided into two plots based on a third variable called \u2018diet\u2019 using the \u2018col\u2019 parameter.","0d3b7e14":"In the above example, we can see that the average number of survivals of male and female in each class. From the plot we can understand that more number of females survived than males. In both males and females more number of survivals are from first class.\n\nA special case in barplot is to show the no of observations in each category rather than computing a statistic for a second variable. For this, we use countplot().\nA count plot can be thought of as a histogram across a categorical, instead of quantitative, variable. The basic API and options are identical to those for barplot(), so you can compare counts across nested variables.","a2921b86":"Now we can clearly see the spending behavior between male and female. We can easily say that, men make more bill than women by looking at the plot.\n\nAnd, if the hue variable has only two classes, we can beautify the plot by splitting each violin into two instead of two violins on a given day. Either parts of the violin refer to each class in the hue variable.","3dcaa083":"In most of the situations, we deal with estimations of the whole distribution of the data. But when it comes to central tendency estimation, we need a specific way to summarize the distribution. Mean and median are the very often used techniques to estimate the central tendency of the distribution.\n\nIn all the plots that we learnt in the above section, we made the visualization of the whole distribution. Now, let us discuss regarding the plots with which we can estimate the central tendency of the distribution.\nBar Plot\n\nThe barplot() shows the relation between a categorical variable and a continuous variable. The data is represented in rectangular bars where the length the bar represents the proportion of the data in that category.\n\nBar plot represents the estimate of central tendency. Let us use the \u2018titanic\u2019 dataset to learn bar plots.","6d0d1d81":"This function combines regplot() and FacetGrid. It is intended as a convenient interface to fit regression models across conditional subsets of a dataset.\n\nWhen thinking about how to assign variables to different facets, a general rule is that it makes sense to use hue for the most important comparison, followed by col and row. However, always think about your particular dataset and the goals of the visualization you are creating.\n\nThere are a number of mutually exclusive options for estimating the regression model. See the tutorial for more information.\n\nThe parameters to this function span most of the options in FacetGrid, although there may be occasional cases where you will want to use that class and regplot() directly.","21fa7603":"Box Plots\n\nBoxplot is a convenient way to visualize the distribution of data through their quartiles.\n\nBox plots usually have vertical lines extending from the boxes which are termed as whiskers. These whiskers indicate variability outside the upper and lower quartiles, hence Box Plots are also termed as box-and-whisker plot and box-and-whisker diagram. Any Outliers in the data are plotted as individual points.","6aa40dc0":"We also have control on the plot elements and can control the scale of plot using the **set_context()** function. We have four preset templates for contexts, based on relative size, the contexts are named as follows\n\n    Paper\n    Notebook\n    Talk\n    Poster\n\nBy default, context is set to notebook; and was used in the plots above.","f985a745":"The quartile and whisker values from the boxplot are shown inside the violin. As the violin plot uses KDE, the wider portion of violin indicates the higher density and narrow region represents relatively lower density. The Inter-Quartile range in boxplot and higher density portion in kde fall in the same region of each category of violin plot.\n\nThe above plot shows the distribution of total_bill on four days of the week. But, in addition to that, if we want to see how the distribution behaves with respect to sex, lets explore it in below example.","79d7ea44":"logistic : bool, optional\n\n    If True, assume that y is a binary variable and use statsmodels to estimate a logistic regression model. Note that this is substantially more computationally intensive than linear regression, so you may wish to decrease the number of bootstrap resamples (n_boot) or set ci to None\n    \nlowess : bool, optional\n\n    If True, use statsmodels to estimate a nonparametric lowess model (locally weighted linear regression). Note that confidence intervals cannot currently be drawn for this kind of model.\n    \nrobust : bool, optional\n\n    If True, use statsmodels to estimate a robust regression. This will de-weight outliers. Note that this is substantially more computationally intensive than standard linear regression, so you may wish to decrease the number of bootstrap resamples (n_boot) or set ci to None\n    \n\n","ef3824d0":"Point Plots\n\nPoint plots serve same as bar plots but in a different style. Rather than the full bar, the value of the estimate is represented by the point at a certain height on the other axis.\nA point plot represents an estimate of central tendency for a numeric variable by the position of scatter plot points and provides some indication of the uncertainty around that estimate using error bars.\n\nPoint plots can be more useful than bar plots for focusing comparisons between different levels of one or more categorical variables. They are particularly adept at showing interactions: how the relationship between levels of one categorical variable changes across levels of a second categorical variable. The lines that join each point from the same hue level allow interactions to be judged by differences in slope, which is easier for the eyes than comparing the heights of several groups of points or bars.\n\nIt is important to keep in mind that a point plot shows only the mean (or other estimator) value, but in many cases it may be more informative to show the distribution of values at each level of the categorical variables. In that case, other approaches such as a box or violin plot may be more appropriate.\n","6fcdb7e3":"A bar plot represents an estimate of **central tendency for a numeric variable** with the height of each rectangle and provides some indication of the uncertainty around that estimate using error bars. Bar plots include 0 in the quantitative axis range, and they are a good choice when 0 is a meaningful value for the quantitative variable, and you want to make comparisons against it.\n\nFor datasets where 0 is not a meaningful value, a point plot will allow you to focus on differences between levels of one or more categorical variables.\n\nIt is also important to keep in mind that a bar plot shows only the mean (or other estimator) value, but in many cases it may be more informative to show the distribution of values at each level of the categorical variables. In that case, other approaches such as a box or violin plot may be more appropriate.","3ecf3a13":"Violin Plots\n\nViolin Plots are a combination of the box plot with the kernel density estimates. So, these plots are easier to analyze and understand the distribution of the data.\n\nLet us use tips dataset called to learn more into violin plots. This dataset contains the information related to the tips given by the customers in a restaurant.","826c4f07":"Qualitative Color Palettes\n\nQualitative or categorical palettes are best suitable to plot the categorical data.We haven\u2019t passed any parameters in *color_palette()*; by default, we are seeing 6 colors. You can see the desired number of colors by passing a value to the n_colors parameter. Here, the **palplot()** is used to plot the array of colors horizontally.","7677f8fe":"Plotting Bivariate Distribution\n\nBivariate Distribution is used to determine the relation between two variables. This mainly deals with relationship between two variables and how one variable is behaving with respect to the other.\n\nThe best way to analyze Bivariate Distribution in seaborn is by using the **jointplot()** function.\n\nJointplot creates a multi-panel figure that projects the bivariate relationship between two variables and also the univariate distribution of each variable on separate axes.\nScatter Plot\n\nScatter plot is the most convenient way to visualize the distribution where each observation is represented in two-dimensional plot via x and y axis.\n"}}