{"cell_type":{"ebe2868c":"code","746c4bf5":"code","6bb63cc3":"code","2b2340ff":"code","00e0225c":"code","91be8f10":"code","6e6c4566":"code","b30ea042":"code","c829ba1a":"code","1d64a5c7":"code","383b21fd":"code","021b3175":"code","40919f41":"code","60027852":"code","a6bab85c":"code","0c1fa4ba":"code","98b3933f":"code","f914e049":"code","eaf6fd87":"code","670bd27c":"code","2be93572":"code","6d1b4b98":"code","ea35d52f":"code","f00240b1":"code","4dc054c9":"code","fb415aef":"code","e34bbb01":"code","50b6b9f7":"code","f57efbb0":"code","6292ac1d":"markdown","18899e23":"markdown","f490d806":"markdown","39056e6d":"markdown","afee7f35":"markdown","46d5e74e":"markdown","c6542323":"markdown","25a52882":"markdown","f40db2f9":"markdown","fcdc5150":"markdown","74f222a2":"markdown","b744bd3b":"markdown","ae2e247d":"markdown","7d1c358c":"markdown","ede0eda7":"markdown"},"source":{"ebe2868c":"pip install chart_studio","746c4bf5":"# Importing all the required libraries \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport chart_studio.plotly as py\nimport collections\nfrom plotly.offline import init_notebook_mode , iplot \ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go \n\nimport seaborn as sns\n#from collections import counter\nimport matplotlib.pyplot as plt \nfrom wordcloud import WordCloud\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bb63cc3":"report2020=pd.read_csv('..\/input\/world-happiness-report\/2020.csv')\nreport2019=pd.read_csv('..\/input\/world-happiness-report\/2019.csv')\nreport2018=pd.read_csv('..\/input\/world-happiness-report\/2018.csv')","2b2340ff":"report2020.head()","00e0225c":"report2020.info()","91be8f10":"report2019.head()","6e6c4566":"report2019.info()","b30ea042":"report2018.head()","c829ba1a":"report2018.info()","1d64a5c7":"report2018.rename(columns ={'Overall rank': 'Overall_rank',\n                            'Country or region':'Country_region',\n                            'GDP per capita':'GDP_per_capita',\n                           'Social support': 'Social_support',\n                           'Healthy life expectancy' : 'Healthy_life_expectancy',\n                           'Freedom to make life choices':'Freedom',\n                           'Perceptions of corruption':'Corruption'}, inplace=True)\nreport2018.head()","383b21fd":"report2019.rename(columns ={'Overall rank': 'Overall_rank',\n                            'Country or region':'Country_region',\n                            'GDP per capita':'GDP_per_capita',\n                           'Social support': 'Social_support',\n                           'Healthy life expectancy' : 'Healthy_life_expectancy',\n                           'Freedom to make life choices':'Freedom',\n                           'Perceptions of corruption':'Corruption'}, inplace=True)\nreport2019.head()\nprint(report2019.Country_region)","021b3175":"report2020.head()","40919f41":"report2020.insert(0,\"Overall_Rank\",np.arange(153)+1, True)\nreport2020.head()","60027852":"report2020.rename(columns ={'Country name':'Country_name',\n                            'Logged GDP per capita':'GDP_per_capita',\n                           'Social support': 'Social_support',\n                           'Healthy life expectancy' : 'Healthy_life_expectancy',\n                           'Freedom to make life choices':'Freedom',\n                           'Perceptions of corruption':'Corruption',\n                            'Regional indicator': 'Regional_indicator',\n                           'Ladder score':'Score'}, inplace=True)","a6bab85c":"report2020.head()","0c1fa4ba":"f,ax = plt.subplots(figsize = (12, 12))\nsns.heatmap(report2020.corr(), annot = True, linewidths = 0.1, fmt = '.1f', ax = ax, square = True)","98b3933f":"x2020 = report2020['Country_name']\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color = 'black',\n                          width = 512,\n                          height = 384\n                         ).generate(\" \".join(x2020))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","f914e049":"x = sns.stripplot(x = \"Regional_indicator\", y = \"Score\", data = report2020, jitter = True)\nplt.xticks(rotation = 90)\nplt.title(\"Countries' Happiness Score According to the Region\", color = 'blue', fontsize = 15)\nplt.show()","eaf6fd87":"report2020.mean()","670bd27c":"report2019.mean()","2be93572":"# We have taken the mean for application of the same .\nabove_mean_HS =['Above World Average' if i >= 5.40 else 'Below World Average' for i in report2020.Score]\ndf = pd.DataFrame({'Happiness_Score' : above_mean_HS})\nsns.countplot(x = df.Happiness_Score)\nplt.xlabel('Happiness Score')\nplt.ylabel('Number of Countries')\nplt.title('Number of Countries based on Happiness Score Average', color = 'blue', fontsize = 15)\nplt.show()","6d1b4b98":"trace1 = go.Box(\n    y = report2020.GDP_per_capita ,\n    name = 'GDP per Capita of  Countries in 2020',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    y = report2020.Corruption,\n    name = 'Government Corruption Index in 2020',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1, trace2]\niplot(data)","ea35d52f":"dataframe = report2020\n\ntrace1 = go.Scatter(\n    x = dataframe.Score,\n    y = dataframe.GDP_per_capita,\n    name = \"Economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)')\n                    )\n# second line plot\ntrace2 = go.Scatter(\n    x = dataframe.Overall_Rank,\n    y = dataframe.Corruption,\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = \"Gov. Corruption\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)')\n                    )\ndata = [trace1, trace2]\nlayout = go.Layout(\n        xaxis2 = dict(\n            domain = [0.65, 0.95],\n            anchor = 'y2'        \n                     ),\n        yaxis2 = dict(\n            domain = [0.65, 0.95],\n            anchor = 'x2'\n                     ),\n    title = 'Economy and Government Corruption Correlation'\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","f00240b1":"import plotly.figure_factory as ff\n\ndataframe = report2020\ndt2020 = dataframe.loc[:,[\"GDP_per_capita\", \"Healthy_life_expectancy\", \"Freedom\"]]\ndt2020[\"index\"] = np.arange(1, len(dt2020) + 1)\n\nfig = ff.create_scatterplotmatrix(dt2020, diag = 'box', index = 'index', colormap = 'Portland',\n                                  colormap_type = 'cat',\n                                  height = 700, width = 700)\niplot(fig)","4dc054c9":"\ntrace1 = go.Scatter3d(\n    x = dataframe.GDP_per_capita,\n    y = dataframe.Freedom,\n    z = dataframe.Healthy_life_expectancy,\n    mode = 'markers',\n    marker = dict(\n        size = 7,\n        color = 'rgb(255,132,12)'     \n                 )\n                      )\ndata = [trace1]\nlayout = go.Layout(\n    title = 'Happiness Status According to the Economy, Freedom and Health',\n    margin = dict(\n        l = 0,\n        r = 0,\n        b = 0,\n        t = 30  \n                )\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","fb415aef":"dataframe = report2020\ntrace1 = go.Scatter(\n    x = dataframe.Overall_Rank,\n    y = dataframe.GDP_per_capita,\n    name = \"GDP per Capita\"\n                    )\ntrace2 = go.Scatter(\n    x = dataframe.Overall_Rank,\n    y = dataframe.Healthy_life_expectancy,\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = \"Health\"\n                    )\ntrace3 = go.Scatter(\n    x = dataframe.Overall_Rank,\n    y = dataframe.Freedom,\n    xaxis = 'x3',\n    yaxis = 'y3',\n    name = \"Freedom\"\n)\ntrace4 = go.Scatter(\n    x = dataframe.Overall_Rank,\n    y = dataframe.Corruption,\n    xaxis = 'x4',\n    yaxis = 'y4',\n    name = \"Gov. Corruption\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis = dict(\n        domain = [0, 0.45]\n                ),\n    yaxis = dict(\n        domain = [0, 0.45]\n                ),\n    xaxis2 = dict(\n        domain = [0.55, 1]\n                 ),\n    xaxis3 = dict(\n        domain = [0, 0.45],\n        anchor = 'y3'\n                 ),\n    xaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'y4'\n                 ),\n    yaxis2 = dict(\n        domain = [0, 0.45],\n        anchor = 'x2'\n                 ),\n    yaxis3 = dict(\n        domain = [0.55, 1]\n                 ),\n    yaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'x4'\n                 ),\n    title = 'GDP per Capita, Health, Freedom and Gov. Corruption Effect in Happiness Rank of Countries'\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e34bbb01":"df = report2020.iloc[:100, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n                    x = df.Overall_Rank,\n                    y = df.GDP_per_capita,\n                    mode = \"lines + markers\",\n                    name = \"GDP per Capita\",\n                    marker = dict(color = 'rgba(55, 20, 50, 0.9)'),\n                    text = df.Country_name\n                    )\ntrace2 = go.Scatter(\n                    x = df.Overall_Rank,\n                    y = df.Freedom,\n                    mode = \"lines + markers\",\n                    name = \"Freedom\",\n                    marker = dict(color = 'rgba(10, 180, 80, 0.9)'),\n                    text = df.Country_name\n                    )\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Freedom Relations in Happiness Rank Top 100 Countries',\n             xaxis = dict(title = 'Happiness Rank', ticklen = 5, zeroline = True)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","50b6b9f7":"df2018 = report2018.iloc[:30, :]  \ndf2019 = report2019.iloc[:30, :]\ndf2020 = report2020.iloc[:30, :]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n                    x = df2018.Country_region,\n                    y = df2018.Freedom,\n                    mode = \"markers\",\n                    name = \"2018\",\n                    marker = dict(color = 'rgba(55, 20, 50, 0.8)'),\n                    text = df2018.Overall_rank\n                    )\n\ntrace2 = go.Scatter(\n                    x = df2019.Country_region,\n                    y = df2019.Freedom,\n                    mode = \"markers\",\n                    name = \"2019',\n                    marker = dict(color = 'rgba(10, 180, 80, 0.8)'),\n                    text = df2019.Overall_rank\n                    )\n\ntrace3 = go.Scatter(\n                    x = df2020.Country_name,\n                    y = df2020.Freedom,\n                    mode = \"markers\",\n                    name = \"2020\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = df2020.Overall_Rank\n                    )\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Freedom vs Happiness Rank of Top 30 Countries in 2018, 2019 and 2020 Years',\n             xaxis = dict(tickangle = 315, ticklen = 3, zeroline = False),\n             yaxis = dict(title = 'Freedom', ticklen = 3, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","f57efbb0":"data = dict(type = 'choropleth', \n           locations = report2020['Country_name'],\n           locationmode = 'country names',\n           z = report2020['Overall_Rank'],\n           colorbar = {'title':'Happiness Scale'})\nlayout = dict(title = 'Global Happiness Ranking', \n             geo = dict(showframe = False, \n                       projection = {'type': 'natural earth'}))\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap)","6292ac1d":"# STRIP PLOT\nA strip plot is a graphical data anlysis technique for summarizing a univariate data set. The strip plot consists of:\nHorizontal axis = the value of the response variable;\nVerticalal axis = all values are set to 1.\nThat is, a strip plot is simply a plot of the sorted response values along one axis. The strip plot is an alternative to a histogram or a density plot. It is typically used for small data sets (histograms and density plots are typically preferred for larger data sets).","18899e23":"Making a heatmap among all the factors.","f490d806":"# *History of World Happiness Report*\n\nIn July 2011, the UN General Assembly adopted resolution 65\/309 Happiness: Towards a Holistic Definition of Developmentinviting member countries to measure the happiness of their people and to use the data to help guide public policy. On April 2, 2012, this was followed by the first UN High Level Meeting called Wellbeing and Happiness: Defining a New Economic Paradigm, which was chaired by UN Secretary General Ban Ki-moon and Prime Minister Jigme Thinley of Bhutan, a nation that adopted gross national happiness instead of gross domestic product as their main development indicator.\n\nThe first World Happiness Report was released on April 1, 2012 as a foundational text for the UN High Level Meeting: Well-being and Happiness: Defining a New Economic Paradigm. drawing international attention.The report outlined the state of world happiness, causes of happiness and misery, and policy implications highlighted by case studies. In 2013, the second World Happiness Report was issued, and since then has been issued on an annual basis with the exception of 2014.The report primarily uses data from the Gallup World Poll. Each annual report is available to the public to download on the World Happiness Report website.","39056e6d":"Okay , so as you can see the problem lies in the fact that the report of 2020 has more information than 2019 and 2018 datasets. So I will try to rename and adjust the columns of the dataframe of previous years. This is done so that we can perform operations on the columns ,(if the name has spaces , we cannot use it !!)","afee7f35":"Here comes the power of Plotly , the above visualization were made with Seaborn , which does provide beautiful graphs , however the graphs made with Plotly are much more interactive in the nature , ( In the top right side of the visualization , you will see a lot of options !!)\n\n[https:\/\/www.youtube.com\/watch?v=87jyeklhTH8]\n","46d5e74e":"#  INTRODUCTION\nHi fellow kagglers, this kernel is made to introduce you to one of the most famous visualization library, **Plotly**. We will also learn about one of the most famous datasets - **World Happiness Report.**\n\nSo what is the World Happiness Report ? In a nutshell, it is a metric which measures the happiness of people in their respective countries. \n","c6542323":"# SCATTER PLOT\nA scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.\n\n","25a52882":"There looks better.","f40db2f9":"![image.png](attachment:image.png)","fcdc5150":"Well , I hope you learnt something useful!\n\nReferences-https:\/\/www.kaggle.com\/saviola07\/world-happiness-report-analysis","74f222a2":"\n<div class=\"tenor-gif-embed\" data-postid=\"16449755\" data-share-method=\"host\" data-width=\"100%\" data-aspect-ratio=\"1.0\"><a href=\"https:\/\/tenor.com\/view\/thank-you-for-your-time-shea-whigham-thomas-carrasco-homecoming-iappreciate-your-time-gif-16449755\">Thank You For Your Time Shea Whigham GIF<\/a> from <a href=\"https:\/\/tenor.com\/search\/thankyouforyourtime-gifs\">Thankyouforyourtime GIFs<\/a><\/div><script type=\"text\/javascript\" async src=\"https:\/\/tenor.com\/embed.js\"><\/script>","b744bd3b":"Reading the files and checking out the data .","ae2e247d":"Well , I was hoping that we could ascertain something with the mean values of different years . However , it seems that the recent report has only 163 entries where as past has 165 . Plus things are formatted differently in the years.","7d1c358c":"# BOX AND WHISKERS PLOT \nA Box and Whisker Plot (or Box Plot) is a convenient way of visually displaying the data distribution through their quartiles.\n\nThe lines extending parallel from the boxes are known as the \u201cwhiskers\u201d, which are used to indicate variability outside the upper and lower quartiles. Outliers are sometimes plotted as individual dots that are in-line with whiskers. Box Plots can be drawn either vertically or horizontally.","ede0eda7":"Inserting an Overall Rank , as in the previous datasets ."}}