{"cell_type":{"87f37cf2":"code","8e9cab92":"code","4673b019":"code","82a65626":"code","c06baa74":"code","b7fb7c4c":"code","c23b4a05":"code","7f6736b1":"code","503b97cc":"code","970f8d6b":"code","7187dbfe":"code","60d0eed9":"code","65e572c1":"code","7fa8fbae":"code","85fe4280":"code","9e984136":"code","dda61442":"markdown","880ca6b3":"markdown","ab09ac1c":"markdown","2d8753a5":"markdown"},"source":{"87f37cf2":"import numpy as np\nimport pandas as pd\nimport optuna\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb","8e9cab92":"train = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")\ndata = pd.concat([train, test], sort=False)","4673b019":"data['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","82a65626":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)\ncategorical_features = ['Embarked', 'Pclass', 'Sex']","c06baa74":"X_train, X_valid, y_train, y_valid = train_test_split(\n    X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)","b7fb7c4c":"params = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}","c23b4a05":"lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train, categorical_feature=categorical_features)\n\nmodel = lgb.train(\n    params, \n    lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=1000,\n    early_stopping_rounds=10\n)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","7f6736b1":"y_pred[:10]","503b97cc":"y_pred1 = (y_pred > 0.5).astype(int)\ny_pred1[:10]","970f8d6b":"sub1 = gender_submission\nsub1['Survived'] = y_pred1\nsub1.to_csv(\"submission1.csv\", index=False)\nsub1.head()","7187dbfe":"def objective(trial):\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 255, 500),\n        'learning_rate': 0.05,\n        'num_leaves': trial.suggest_int('num_leaves', 32, 128),\n    }\n    \n    lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\n    y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n    score = log_loss(y_valid, y_pred_valid)\n    return score","60d0eed9":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=8)","65e572c1":"study.best_params","7fa8fbae":"params = {\n    'objective': 'binary',\n    'max_bin': study.best_params['max_bin'],\n    'learning_rate': 0.05,\n    'num_leaves': study.best_params['num_leaves']\n}\n\nlgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train, categorical_feature=categorical_features)\n\nmodel = lgb.train(\n    params, \n    lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=1000,\n    early_stopping_rounds=10\n)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","85fe4280":"y_pred2 = (y_pred > 0.5).astype(int)\ny_pred2[:10]","9e984136":"sub2 = gender_submission\nsub2['Survived'] = y_pred2\nsub2.to_csv(\"submission2.csv\", index=False)\nsub2.head()","dda61442":"# #1 LGBM","880ca6b3":"#### lightgbm.Dataset\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.Dataset.html\n#### lightgbm.train\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.train.html","ab09ac1c":"# TPS0421 LGB+LGB.Dataset\nThis notebook referred to the followig notebook.<br\/>\nhttps:\/\/www.kaggle.com\/sishihara\/upura-kaggle-tutorial-05-tuning","2d8753a5":"# #2 LGBM+Optuna"}}