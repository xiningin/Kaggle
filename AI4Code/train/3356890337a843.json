{"cell_type":{"41de1b24":"code","4a533a60":"code","6d3659a8":"code","e6954c13":"code","f974fee5":"code","2eb0eba0":"code","bad9b597":"code","019d95e3":"code","375cb8d0":"code","c6d1c5f7":"code","0a5041a9":"code","6eddb174":"code","07e9a06a":"code","4ca6cddc":"code","714a8bc7":"code","a4785570":"code","e89af0b9":"code","5d06d49c":"code","fab8aedd":"code","473d4025":"code","00a8f800":"code","254d227c":"code","237d4fe1":"code","09056675":"code","cddf0cd2":"code","15c097ab":"code","5cb634e3":"code","7bb3c60f":"code","aba64b86":"markdown","1626c932":"markdown","ceeceee1":"markdown","58b0e823":"markdown","f31a7945":"markdown","6b51a6c9":"markdown","b051bb53":"markdown","9e93c2c3":"markdown"},"source":{"41de1b24":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')","4a533a60":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","6d3659a8":"print(train.shape)\ntrain.head(2)","e6954c13":"print(test.shape)\ntest.head(2)","f974fee5":"columns = test.columns[1:]\ncolumns","2eb0eba0":"X = train[columns].values\nX_test = test[columns].values\ntarget_1 = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget_2 = train['target_benzene'].values.reshape(-1,1)\ntarget_3 = train['target_nitrogen_oxides'].values.reshape(-1,1)","bad9b597":"# scaler = StandardScaler()\n\n# X = scaler.fit_transform(X)\n# X_test = scaler.transform(X_test)","019d95e3":"train.shape, test.shape","375cb8d0":"from sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV","c6d1c5f7":"rr = Ridge()\nrr.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = rr.predict(X_test)\n\nrr = Ridge()\nrr.fit(X, target_2)\nsample_submission['target_benzene'] = rr.predict(X_test)\n\nrr = Ridge()\nrr.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = rr.predict(X_test)\n\nsample_submission.head()","0a5041a9":"from sklearn.linear_model import Lasso, LassoCV","6eddb174":"ls = Lasso()\nls.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = ls.predict(X_test)\n\nls = Lasso()\nls.fit(X, target_2)\nsample_submission['target_benzene'] = ls.predict(X_test)\n\nls = Lasso()\nls.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = ls.predict(X_test)\n\nsample_submission.head()","07e9a06a":"lamdbalar = 10**np.linspace(10,-2,100)*0.5\n\nlasso_cv1 = LassoCV(alphas = lamdbalar).fit(X, target_1)\nls = Lasso(alpha=lasso_cv1.alpha_)\nls.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = ls.predict(X_test)\n\nlasso_cv2 = LassoCV(alphas = lamdbalar).fit(X, target_2)\nls = Lasso(alpha=lasso_cv2.alpha_)\nls.fit(X, target_2)\nsample_submission['target_benzene'] = ls.predict(X_test)\n\nlasso_cv3 = LassoCV(alphas = lamdbalar).fit(X, target_3)\nls = Lasso(alpha=lasso_cv3.alpha_)\nls.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = ls.predict(X_test)\n\nsample_submission.head()","4ca6cddc":"from sklearn.linear_model import ElasticNet, ElasticNetCV","714a8bc7":"en = ElasticNet()\nen.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = en.predict(X_test)\n\nen = ElasticNet()\nen.fit(X, target_2)\nsample_submission['target_benzene'] = en.predict(X_test)\n\nen = ElasticNet()\nen.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = en.predict(X_test)\n\nsample_submission.head()","a4785570":"lamdbalar = 10**np.linspace(10,-2,100)*0.5\n\nen_cv1 = ElasticNetCV(alphas = lamdbalar).fit(X, target_1)\nen = ElasticNet(alpha=en_cv1.alpha_)\nen.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = en.predict(X_test)\n\nen_cv2 = ElasticNetCV(alphas = lamdbalar).fit(X, target_2)\nen = ElasticNet(alpha=en_cv2.alpha_)\nen.fit(X, target_2)\nsample_submission['target_benzene'] = en.predict(X_test)\n\nen_cv3 = ElasticNetCV(alphas = lamdbalar).fit(X, target_3)\nen = ElasticNet(alpha=en_cv3.alpha_)\nen.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = en.predict(X_test)\n\nsample_submission.head()","e89af0b9":"from sklearn.tree import DecisionTreeRegressor","5d06d49c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom math import sqrt\n\nA1_train,A1_test,b1_train,b1_test=train_test_split(X,target_1,random_state=0)\nA2_train,A2_test,b2_train,b2_test=train_test_split(X,target_2,random_state=0)\nA3_train,A3_test,b3_train,b3_test=train_test_split(X,target_3,random_state=0)\n\ndtr = DecisionTreeRegressor()\ndtr.fit(A1_train, b1_train)\nout1 = dtr.predict(A1_test)\nrmsle1 = sqrt(mean_squared_log_error(b1_test, out1))\n\ndtr = DecisionTreeRegressor()\ndtr.fit(A2_train, b2_train)\nout2 = dtr.predict(A2_test)\nrmsle2 = sqrt(mean_squared_log_error(b2_test, out2))\n\ndtr = DecisionTreeRegressor()\ndtr.fit(A3_train, b3_train)\nout3 = dtr.predict(A3_test)\nrmsle3 = sqrt(mean_squared_log_error(b3_test, out3))\n\nprint(rmsle1)\nprint(rmsle2)\nprint(rmsle3)\nprint((rmsle1+rmsle2+rmsle3)\/3)","fab8aedd":"dtr = DecisionTreeRegressor()\ndtr.fit(X, target_1)\nsample_submission['target_carbon_monoxide'] = dtr.predict(X_test)\n\ndtr = DecisionTreeRegressor()\ndtr.fit(X, target_2)\nsample_submission['target_benzene'] = dtr.predict(X_test)\n\ndtr = DecisionTreeRegressor()\ndtr.fit(X, target_3)\nsample_submission['target_nitrogen_oxides'] = dtr.predict(X_test)\n\nsample_submission.head()","473d4025":"pd.plotting.register_matplotlib_converters()\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport itertools\nimport statsmodels.api as sm\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n%matplotlib inline","00a8f800":"# Converting to float\ndata = train[['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\ndata['target_nitrogen_oxides'] = data['target_nitrogen_oxides'] * 1.0\ndata = data.set_index(pd.DatetimeIndex(data['date_time']))\ndata_cm = data['target_nitrogen_oxides']\n# f, (ax1) = plt.subplots(1, figsize=(12, 6))\n# data_cm.resample('H').sum().plot(ax = ax1)\n\n# resampling daywise\ndata_sarima = data.resample('H').mean()\n#data_sarima = data_sarima.fillna(data_sarima['Sales'].mean())\ndata_sarima = data_sarima[['target_nitrogen_oxides']]\n# data_sarima.plot()\n\n# Define the p, d and q parameters to take any value between 0 and 3\np = d = q = range(0, 2)\n# Generate all different combinations of p, q and q triplets\npdq = list(itertools.product(p, d, q))\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\n# Determing p,d,q combinations with AIC scores.\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        mod = sm.tsa.statespace.SARIMAX(data_sarima,\n                                        order=param,\n                                        seasonal_order=param_seasonal,\n                                        enforce_stationarity=False,\n                                        enforce_invertibility=False)\n\n        results = mod.fit()\n\n        # print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))","254d227c":"# Fitting the data to SARIMA model \nmodel_sarima = sm.tsa.statespace.SARIMAX(data_sarima,\n                                order=(1, 0, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults_sarima = model_sarima.fit()\n# print(results_sarima.summary().tables[1])\n\npred = results_sarima.get_prediction(start=pd.to_datetime('2011-01-01 00:00:00'), end=pd.to_datetime('2011-04-04 14:00:00'), dynamic = False) \ndata_sarima_forecasted = pred.predicted_mean\nans = list(data_sarima_forecasted.values)\nsample_submission['target_nitrogen_oxides'] = ans","237d4fe1":"# sample_submission.to_csv('submission_sarima.csv', index=False)","09056675":"from catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import StratifiedKFold, StratifiedShuffleSplit","cddf0cd2":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\", low_memory=False)#, nrows=10000)\ntrain[\"date_time\"] = pd.to_datetime(train[\"date_time\"], format=\"%Y-%m-%d %H:%M:%S\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\", low_memory=False)\ntest[\"date_time\"] = pd.to_datetime(test[\"date_time\"], format=\"%Y-%m-%d %H:%M:%S\")\ntrain.info(memory_usage=\"deep\")\n\ntargets = [\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"]\ntarget_names = [\"Carbon monoxide\", \"Benzene\", \"Nitrogen oxides\"]\n\ndef make_new_features(df):\n    df[\"month\"] = df[\"date_time\"].dt.month\n    df[\"day_of_week\"] = df[\"date_time\"].dt.dayofweek\n    df[\"day_of_year\"] = df[\"date_time\"].dt.dayofyear\n    df[\"hour\"] = df[\"date_time\"].dt.hour\n    df[\"quarter\"] = df[\"date_time\"].dt.quarter\n    df[\"week_of_year\"] = df[\"date_time\"].dt.isocalendar().week.astype(\"int\")\n#     df[\"is_winter\"] = df[\"month\"].isin([1, 2, 12])\n#     df[\"is_sprint\"] = df[\"month\"].isin([3, 4, 5])\n#     df[\"is_summer\"] = df[\"month\"].isin([6, 7, 8])\n#     df[\"is_autumn\"] = df[\"month\"].isin([9, 10, 11])\n    df[\"working_hours\"] =  df[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\n    df[\"is_weekend\"] = (train[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\n    return df\n\ntrain_copy = train.copy()\n# test_copy = test.copy()\ntrain = make_new_features(train)\n# test = make_new_features(test)","15c097ab":"# The months will be used for folds split\nmonths = train_copy.drop([7110], axis=0)[\"date_time\"].dt.month\n\npreds = pd.DataFrame()\npreds[\"date_time\"] = test[\"date_time\"].copy()\n\ntrain_copy['date_time'] = train_copy['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\ntest['date_time'] = test['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\n\n# Dropping the last row as noise\nX = train_copy.drop([7110], axis=0)\ntargets = X[[\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"]].copy()\nX.drop([\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"], axis=1, inplace=True)#, \"date_time\"], axis=1, inplace=True)\ny = np.log1p(targets)\nX_test = test#.drop(\"date_time\", axis=1)\n\ndef rmspe(y_true, y_pred):\n    y_pred = y_pred[y_true != 0]\n    y_true = y_true[y_true != 0]\n    err = np.sqrt(np.mean((1 - y_pred \/ y_true) ** 2))\n    return err\n\ndef rmspe_xgb(y_pred, y_true):\n    y_true = y_true.get_label()\n    err = rmspe(np.expm1(y_true), np.expm1(y_pred))\n    return \"rmspe\", err","5cb634e3":"%%time\n\nall_fi = []\nsplits = 10\n\nfor i, target in enumerate(targets.columns):\n    print(f\"\\nTraining for {target}...\")\n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    oof_preds = np.zeros((X.shape[0],))\n    model_preds = 0\n    model_fi = 0\n    for num, (train_idx, valid_idx) in enumerate(skf.split(X, months)):\n        X_train, X_valid = X.loc[train_idx], X.loc[valid_idx]\n        y_train, y_valid = y.loc[train_idx, target], y.loc[valid_idx, target]\n        model = xgb.XGBRegressor(n_estimators=5000, objective=\"reg:squarederror\", max_depth=10,\n                           learning_rate=0.03, colsample_bytree=0.7, subsample=0.9,\n                           random_state=i, tree_method=\"gpu_hist\")\n        model.fit(X_train, y_train, eval_set=[(X_valid, y_valid)],\n            eval_metric=rmspe_xgb, early_stopping_rounds=100, verbose=False)\n        model_preds += np.expm1(model.predict(X_test)) \/ splits\n        model_fi += model.feature_importances_\n        oof_preds[valid_idx] = np.expm1(model.predict(X_valid))\n        print(f\"Fold {num} RMSLE: {mean_squared_log_error(np.expm1(y_valid), oof_preds[valid_idx])}\")\n    print(f\"\\nOverall RMSLE: {mean_squared_log_error(np.expm1(y[target]), oof_preds)}\")    \n    preds[target] = model_preds\n    all_fi.append(model_fi)","7bb3c60f":"preds.to_csv('submission_xgbregressortuned.csv', index=False)\npreds.head()","aba64b86":"**The main purpose of the notebook is to explore all the different types of regression models and see how they perform on the test set. As I am new to this sort of problem I might have made a few errors or would have not included some important parameter in model building so please feel free to tell me in the comments section as it will be helpful for everyone. If you have new model suggestions then also please comment.**","1626c932":"# Sarima","ceeceee1":"# XGBRegressor","58b0e823":"# Ridge","f31a7945":"# Lasso","6b51a6c9":"**Ridge -> 0.34508<br>\nLasso -> 0.33936<br>\nElasticNet -> 0.33950<br>\nDecisionTreeRegressor -> 0.37486<br>\nSarima -> 0.71287<br>\nXGBRegressor -> 0.21350**","b051bb53":"# Decision Tree Regressor","9e93c2c3":"# ElasticNet"}}