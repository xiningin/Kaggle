{"cell_type":{"3b98a17f":"code","d8f84b82":"code","43e463f1":"code","2a549dc2":"code","13ac30a0":"code","838cfd43":"code","76620ed1":"code","7ee68af6":"code","ad363ae0":"code","644d2609":"code","58359558":"code","b87b2cea":"code","b2be80b1":"markdown","0704db84":"markdown","71d1d147":"markdown"},"source":{"3b98a17f":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom tqdm import tqdm_notebook as tqdm\n%matplotlib inline\n\n!pip install mtcnn\nfrom mtcnn.mtcnn import MTCNN","d8f84b82":"image_paths = []\nimage_names = []\nimage_dir = \"..\/input\/trump-photos\/trump_photos\/\"\n\nfor image_name in tqdm(os.listdir(image_dir)) : \n    image_path = image_dir+image_name\n    image_paths.append(image_path)\n    image_names.append(image_name)    ","43e463f1":"image_dataframe = pd.DataFrame(index=np.arange(len(image_names)),columns=[\"image_name\",\"path\"])\n\ni=0 \nfor name, path in tqdm(zip(image_names, image_paths)) : \n    image_dataframe.iloc[i][\"image_name\"] = name\n    image_dataframe.iloc[i][\"path\"] = path\n    i+=1","2a549dc2":"def get_images(): \n    \n    sample_images = []\n    random_image_paths = [np.random.choice(image_dataframe[\"path\"]) for i in range(6)]\n    plt.figure(figsize = (10,10))\n    \n    for i in range(4) : \n        plt.subplot(2,2,i+1)\n        image = cv2.imread(random_image_paths[i])\n        image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n        sample_images.append(image)\n        plt.imshow(image,cmap=\"gray\")\n        plt.title(\"Image {}\".format(i+1))\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        \n    plt.tight_layout()\n    \n    return sample_images","13ac30a0":"sample_images = []\nsample_images = get_images()","838cfd43":"def haar_cascade_detection(sample_images) : \n    face_cascade = cv2.CascadeClassifier(\"..\/input\/haar-cascades-for-face-detection\/haarcascade_frontalface_default.xml\")\n\n    for image in tqdm(sample_images) : \n        gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)\n        faces = face_cascade.detectMultiScale(gray,1.05,5,50)\n    \n        for (x_coordinate,y_coordinate,height,width) in faces : \n            cv2.rectangle(image,(x_coordinate,y_coordinate),(x_coordinate+width,y_coordinate+height),(100,0,0),2)","76620ed1":"haar_cascade_detection(sample_images)","7ee68af6":"plt.figure(figsize = (10,10))\n\nfor i in range(4) : \n    plt.subplot(2,2,i+1)\n    plt.imshow(sample_images[i],cmap=\"gray\")\n    plt.title(\"Image {}\".format(i+1))\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    \nplt.tight_layout()","ad363ae0":"detector = MTCNN()","644d2609":"def mtcnn_detector(sample_images) : \n    for image in tqdm(sample_images) : \n        face_location = detector.detect_faces(image)\n        for face in zip(face_location): \n            x_coordinate,y_coordinate,width,height=face[0]['box']\n            cv2.rectangle(image,(x_coordinate,y_coordinate),(x_coordinate+width,y_coordinate+height),(0,0,100),2)","58359558":"mtcnn_detector(sample_images)","b87b2cea":"plt.figure(figsize = (10,10))\n\nfor i in range(4) : \n    plt.subplot(2,2,i+1)\n    plt.imshow(sample_images[i],cmap=\"gray\")\n    plt.title(\"Image {}\".format(i+1))\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    \nplt.tight_layout() ","b2be80b1":"# MTCNN\nhttps:\/\/github.com\/ipazc\/mtcnn","0704db84":"# Get images","71d1d147":"# Haarcascade\nhttps:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades"}}