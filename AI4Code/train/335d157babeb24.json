{"cell_type":{"370e69a8":"code","f69a1227":"code","edcfe8a3":"code","716238eb":"code","b1bf140c":"code","e8a6df52":"code","302b1812":"code","a1b4dd1b":"code","b1fe908d":"code","fae9cb3a":"code","9a21f106":"code","af65f986":"code","91d5e985":"code","3516a531":"code","bb4b41d2":"code","865195cc":"code","17b5627b":"code","4fc8c2dc":"code","a3404b9a":"code","86437fd4":"code","a007e6b1":"code","f08c889b":"code","d856753b":"code","aa1b2bdd":"code","0f0a47a9":"code","8b7f21ba":"code","e3c93b67":"code","8914bb52":"markdown","ce28fa91":"markdown","e80002a0":"markdown","53aaacd6":"markdown","7986d4ac":"markdown","e1b0bc6d":"markdown","acd40713":"markdown"},"source":{"370e69a8":"import pandas as pd","f69a1227":"# create list, tuple and dict\nl1 = [23, 43, 56, 78, 87, 54]\nt1 = 23, 43, 56, 78, 87, 54\nd1 = {'Emp ID': 1001, 'Emp Name': 'Pavan', 'Dept': 'SAP', 'Salary': 30000}","edcfe8a3":"# Create Pandas Series from above\npd.Series(l1)","716238eb":"pd.Series(t1)","b1bf140c":"pd.Series(d1)","e8a6df52":"# Assigning name to the column and custom index\ns1 = pd.Series(l1, name = 'Age', index = range(2, 8))\ns1","302b1812":"# Accessing the elements\ns1[s1 > 60]","a1b4dd1b":"# .iloc: \n    # in case we want to get the values from ds using default indexes [int]\n    # in case range is given for slicing; range will be low till end -1\n    \n# .loc: \n    # in case we want to get the values from ds using user defined indexes [Numeric\/str]\n    # in case range is given for slicing; range will be low till end","b1fe908d":"s1","fae9cb3a":"s1.loc[2:4]","9a21f106":"# We can access using iloc even after assigning custom index\ns1.iloc[2:4]\n# Third element in s1 = 56, and fourth element in s1 = 78","af65f986":"# indexing on multiple conditions: get the elements where vlaue is greater than 50 and less than 90\ns1[(s1 > 50) & (s1 < 90)]","91d5e985":"s1.loc[(s1 > 50) & (s1 < 90)]","3516a531":"s1.iloc[list((s1 > 50) & (s1 < 90))]","bb4b41d2":"# third element from the series (We need to use custom index value)\ns1.loc[4]","865195cc":"s1.iloc[2] # We need to use default index value","17b5627b":"l1","4fc8c2dc":"t1","a3404b9a":"# create a dataframe from the list\/tuple\npd.DataFrame(t1)","86437fd4":"d1 = {'EmpID': [1001, 1002, 1003, 1004],\n         'Emp Name': ['Pavan', 'Kumar', 'Reddy', 'Idula'],\n             'Dept': ['HR', 'IT', 'IT', 'Finance'],\n                 'Salary': [10000, 12000, 14000, 13000]}\nd1","a007e6b1":"# Create a Dataframe from dictinary\npd.DataFrame(d1, index = range(0, 4))","f08c889b":"# Create a Dataframe from pandas series\ns1 = pd.Series([1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], name = 'EmpId', dtype = int)\ns2 = pd.Series(['John', 'Mac', 'Raj', 'Tim', 'Lee', 'Sam', 'Kim', 'Joe'], name = 'EmpName', dtype = object)\ns3 = pd.Series(['Finance', 'HR', 'IT', 'IT', 'IT', 'IT', 'Finance', 'HR'], name = 'Dept', dtype = object)\ns4 = pd.Series([10000, 12000, 10000, 12000, 14000, 13000, 10000, 18000], name = 'Salary', dtype = int)","d856753b":"df = pd.DataFrame([s1, s2, s3, s4])\ndf","aa1b2bdd":"# We need to apply transpose for above\ndf1 = df.T\ndf1","0f0a47a9":"import numpy as np","8b7f21ba":"# Create a Dataframe from numpy arrays\na1 = np.full((3,3), 6)\na1","e3c93b67":"df = pd.DataFrame(a1, columns = ['ABC', 'XXX', 'XYZ'])\ndf","8914bb52":"**Create pandas DataFrame - 2d ds**\n* from defalut python data structures\n* from pandas series\n* from numpy arrays","ce28fa91":"*This notebook covers*\n* Panda Series\n* Panda DataFrame","e80002a0":"**Create pandas series - 1d ds**\n* from defalut python data structures\n* from numpy arrays","53aaacd6":"# Pandas DataFrames","7986d4ac":"![Pandas.jpg](attachment:Pandas.jpg)","e1b0bc6d":"# Pandas.Series\n* Strictly homogenous - 1D DS\n* No need to apply loops and ifs for conditions\n* Follow the same [] to access elements by indexes\n* indexes can be numbers or text\n\n# Pandas.DataFrames\n* 2D DS\n* combination of multiple series\n* equivalent to regular tables\n\n","acd40713":"*Slicing & Indexing data: accessing the data from pandas series*\n* Using square brackets [ ]\n* Using default indexes: .iloc[ ]\n* Using user defined indexes: .loc[ ]\n"}}