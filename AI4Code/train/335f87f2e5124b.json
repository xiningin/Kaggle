{"cell_type":{"585bc4cf":"code","50785fbd":"code","b49aba2a":"code","14bd2dbc":"code","09503589":"code","c3758b50":"code","a658b19d":"code","b02d176a":"code","fad5abde":"code","3385d105":"code","f35b11a3":"code","c037c641":"code","e8f15a3c":"code","429ad33c":"code","70efd970":"code","12b3b50a":"markdown","f1c8ecb0":"markdown","9cdd1583":"markdown","1ffded91":"markdown","1545a80e":"markdown","9fdda267":"markdown","869740fc":"markdown","933610bd":"markdown","4854f26d":"markdown","649aa4e8":"markdown","e8d8e69c":"markdown","624dbbe1":"markdown"},"source":{"585bc4cf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom scipy.stats import norm\nfrom scipy import stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n!pip install scikit-gof\n# \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\nfrom statsmodels.stats import stattools\nfrom scipy.stats import norm, uniform\nfrom skgof import ks_test, cvm_test, ad_test\nfrom statsmodels.graphics.gofplots import qqplot","50785fbd":"mu = 0\nsigma = 10\nN = 100000\ngamma = 0.99\nform = r'$f(x\\mid \\mu ,\\sigma ^{2}) = {\\frac {1}{\\sqrt{2\\pi\\sigma^2} }} e^{-{\\frac {(x - \\mu)^2}{2\\sigma^2}}}\\n$'\n\nnormal = np.random.normal(mu, sigma, size=N)\n\nnum_bins = 50\nplt.subplots(figsize=(11, 8))\nn, bins, _ = plt.hist(normal, num_bins, range=(mu - 5 * sigma, mu + 5 * sigma), \n                      density=1, edgecolor='k', alpha=.6, \n                      label=r\"$\\hat \\mu=%.4f$\" % normal.mean() + \"\\n\" + r\"$\\hat \\sigma=%.4f$\" % normal.std())\n\na, b = norm.interval(alpha=gamma, loc=mu, scale=sigma)\npx = np.arange(a, b, 0.01)\nplt.fill_between(px, norm.pdf(px, mu, sigma), color='gold')\n\nx = np.linspace(mu - 5 * sigma, mu + 5 * sigma, 100)\n\nplt.plot(x, norm.pdf(x, mu, sigma), 'darkblue', label=r\"$\\mu=%.2f$\" % mu + \"\\n\" + r\"$\\sigma=%.2f$\" % sigma)\n\n\nplt.xlabel('Smarts', fontsize=14)\nplt.ylabel('Probability', fontsize=14)\nplt.title('Histogram normal distribution, count of bins = %d' % num_bins, fontsize=14)\n\nplt.legend(loc='best', fontsize=16)\n\nplt.grid(color='k', linewidth=1, linestyle='--')","b49aba2a":"alpha = 0.05","14bd2dbc":"stat, pvalue = stats.shapiro(normal)\nstat, pvalue, f\"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e {'\u043d\u0435' if pvalue > 0.05 else ''} \u043e\u0442\u0432\u0435\u0440\u0433\u0430\u0435\u0442\u0441\u044f\"","09503589":"params = (normal.mean(), normal.std())\n\nstat, pvalue = stats.kstest(normal, 'norm', args=params)\nstat, pvalue, f\"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e {'\u043d\u0435' if pvalue > 0.05 else ''} \u043e\u0442\u0432\u0435\u0440\u0433\u0430\u0435\u0442\u0441\u044f\"","c3758b50":"normal2 = normal - normal.mean()\nnormal2 \/= normal2.std()\n\nstats.kstest(normal2, 'norm')","a658b19d":"ks_test(normal, norm(normal.mean(), normal.std()))","b02d176a":"stat, crit_values, percents = stats.anderson(normal, 'norm')\n\nprint(f\"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430: {stat}\")\nfor i, percent in enumerate(percents):\n    print(f\"{percent}%: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 {'>' if stat > crit_values[i] else '<'} \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f = {crit_values[i]}\")","fad5abde":"i = list(percents).index(alpha * 100)\nf\"\u0422.\u043a. {stat} {'>' if stat > crit_values[i] else '<'} {crit_values[i]}: H_0 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c {'\u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0430' if stat > crit_values[i] else '\u043f\u0440\u0438\u043d\u044f\u0442\u0430'}\"","3385d105":"ad_test(normal, norm(normal.mean(), normal.std()))","f35b11a3":"qqplot(normal, line='s')\nplt.show()","c037c641":"stat, pvalue = stats.normaltest(normal)\nstat, pvalue, f\"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e {'\u043d\u0435' if pvalue > 0.05 else ''} \u043e\u0442\u0432\u0435\u0440\u0433\u0430\u0435\u0442\u0441\u044f\"","e8f15a3c":"stattools.omni_normtest(normal)","429ad33c":"stat, pvalue, skew, kurtosis = stattools.jarque_bera(normal)\nstat, pvalue, f\"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e {'\u043d\u0435' if pvalue > 0.05 else ''} \u043e\u0442\u0432\u0435\u0440\u0433\u0430\u0435\u0442\u0441\u044f\"","70efd970":"cvm_test(normal, norm(normal.mean(), normal.std()))","12b3b50a":"## D\u2019Agostino & Pearson","f1c8ecb0":"## \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 $\\alpha$ = 0.05","9cdd1583":"## \u0425\u0430\u0440\u043a\u0435 - \u0411\u0435\u0440\u0430","1ffded91":"\u0418\u043b\u0438 \u0442\u0430\u043a 2","1545a80e":"## \u041a\u043e\u043b\u043c\u043e\u0433\u043e\u0440\u043e\u0432 - \u0421\u043c\u0438\u0440\u043d\u043e\u0432\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u0434\u0447\u0438\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u043c\u0443 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 (\u0438\u043b\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u0435 \u043d\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a)","9fdda267":"\u0418\u043b\u0438 \u0442\u0430\u043a","869740fc":"## Qqplot","933610bd":"## \u0428\u0430\u043f\u0438\u0440\u043e - \u0423\u0438\u043b\u043a\n\u043e\u0442 5000 - \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439","4854f26d":"\u0418\u043b\u0438 \u0442\u0430\u043a","649aa4e8":"## \u0410\u043d\u0434\u0435\u0440\u0441\u043e\u043d - \u0414\u0430\u0440\u043b\u0438\u043d\u0433\n$H_0:$ \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0438\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","e8d8e69c":"## \u041a\u0440\u0430\u043c\u0435\u0440-\u041c\u0438\u0437\u0435\u0441","624dbbe1":"\u0418\u043b\u0438 \u0442\u0430\u043a (\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f)"}}