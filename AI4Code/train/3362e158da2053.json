{"cell_type":{"01a077b8":"code","29124c80":"code","8ef53606":"code","1648e8c0":"code","9c645100":"code","922140bf":"code","fe90bccd":"code","eca43d4a":"code","810f8c96":"code","9f94c433":"code","9f0f8759":"code","11a1a406":"code","98afc898":"code","cd6cd97f":"code","933ed8f5":"code","35830ea1":"code","a1c6d52e":"code","a29e0322":"code","653db37e":"code","0b1ec1bf":"code","0799aad9":"code","a890efe2":"code","7de6bda8":"code","6db86e41":"code","614aa793":"code","cdeecf93":"code","ab64ca23":"code","4984668f":"code","49a79271":"code","59014df0":"markdown","c296785b":"markdown","9c4d8beb":"markdown","2a4c1c2e":"markdown","fd15c6f5":"markdown","1d5e9cd2":"markdown","d1256a73":"markdown","4795a6ca":"markdown","e9d2bf88":"markdown","ff44ce57":"markdown","ede1f719":"markdown","f138efcc":"markdown","dccc4c55":"markdown"},"source":{"01a077b8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n!nvidia-smi -L","29124c80":"# \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n!mkdir \/kaggle\/temp #\u043f\u0430\u043f\u043a\u0430 \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\n!unzip -q -o \/kaggle\/input\/sf-dl-car-classification\/train.zip -d \/kaggle\/temp\n!unzip -q -o \/kaggle\/input\/sf-dl-car-classification\/test.zip -d \/kaggle\/temp","8ef53606":"# \u0432\u044b\u0433\u0440\u0443\u0437\u0438\u043c \u0432\u0435\u0440\u0441\u0438\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\n!pip freeze > 'requirements.txt'","1648e8c0":"# \u0438\u043c\u043f\u043e\u0440\u0442\u044b\nimport os, re, math, random, time, gc, string, pickle, shutil, pathlib, itertools, sys\nimport numpy as np, pandas as pd, matplotlib.pyplot as plt, PIL\nimport tensorflow as tf\n#import tensorflow_addons as tfa\nfrom tensorflow import keras\nfrom tensorflow.keras import *\nfrom tensorflow.keras.activations import *\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.layers.experimental.preprocessing import *\nfrom tensorflow.keras.losses import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.optimizers.schedules import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nfrom IPython.display import clear_output\nfrom tqdm.notebook import tqdm\nfrom keras.models import load_model\n\nprint('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)\nprint('Tensorflow   :', tf.__version__)\nprint('Keras        :', tf.keras.__version__)","9c645100":"# for model\nEPOCHS               = 5 #best 12\nBATCH_SIZE           = 32 #best 12\nVAL_SPLIT            = 0.2 #best 0.05\nIMG_SIZE             = 224 #best 520\nIMG_CHANNELS         = 3\nINPUT_SHAPE          = (IMG_SIZE, IMG_SIZE, IMG_CHANNELS)\n\n# for augmentation\nWIDTH_SHIFT_RANGE    = 0.1\nHEIGHT_SHIFT_RANGE   = 0.1\nHORIZONTAL_FLIP      = True\nVERTICAL_FLIP        = False\nROTATION_RANGE       = 10\nBRIGHTNES_RANGE      = (0.5, 1.5)\nRESCALE              = 1\nSHEAR_RANGE          = 0.2\nZOOM_RANGE           = 0.1\n\n# path to files\nPATH = '\/kaggle\/'\nINPUT_PATH = PATH+'input\/sf-dl-car-classification\/'\nDATA_PATH = PATH+'temp\/'\nTRAIN_PATH = DATA_PATH+'train\/'\nSUB_PATH = DATA_PATH+'test_upload\/'\n\n# seed\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\nos.environ['PYTHONHASHSEED'] = '0'\n# rn.seed(RANDOM_SEED)","922140bf":"sample_submission = pd.read_csv(INPUT_PATH+'sample-submission.csv')\nsample_submission.head()","fe90bccd":"sample_submission.info()","eca43d4a":"train_df = pd.read_csv(INPUT_PATH+'train.csv')\ntrain_df.head()","810f8c96":"train_df.info()","9f94c433":"train_df.Category.value_counts()","9f0f8759":"train_df.Category.hist()","11a1a406":"plt.figure(figsize=(12,8))\nrandom_image = train_df.sample(n=9)\nrandom_image_paths = random_image['Id'].values\nrandom_image_cat = random_image['Category'].values\nfor index, path in enumerate(random_image_paths):\n    im = PIL.Image.open(TRAIN_PATH+f'{random_image_cat[index]}\/{path}')\n    plt.subplot(3,3, index+1)\n    plt.imshow(im)\n    plt.title('Class: '+str(random_image_cat[index]))\n    plt.axis('off')\nplt.show()","98afc898":"image = PIL.Image.open(TRAIN_PATH+'\/0\/100155.jpg')\nimgplot = plt.imshow(image)\nplt.show()\nimage.size","cd6cd97f":"def grayscale(picture):\n    res= Image.new(picture.mode, picture.size)\n    width, height = picture.size\n    for i in range(0, width):\n        for j in range(0, height):\n            pixel=picture.getpixel((i,j))\n            avg=(pixel[0]+pixel[1]+pixel[2])\/3\n            res.putpixel((i,j),(int(avg),int(avg),int(avg)))\n    res.show()\n    return res\n\n\ndef normalize(picture):\n    width, height = picture.size\n    normalized_array = []\n    for j in range(0, height):\n        for i in range(0, width):\n            pixel = picture.getpixel((i,j))\n            normalized_array.append( pixel[0] \/ 255.0 )\n    return np.array(normalized_array)","933ed8f5":"# model from here: https:\/\/github.com\/ashislaha\/CarDetection-Keras\nmodel = load_model('\/kaggle\/input\/car-detection-model\/car_detection_keras_CNN_model.h5')","35830ea1":"# \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c train\nstep_num = 0\nremove_num = 0\nfor i in range(10):\n    dir_from = f'{TRAIN_PATH}{i}\/'\n    files = os.listdir(dir_from)\n    for file in files:\n        step_num += 1\n        img = Image.open(dir_from+file)\n        row,column = 100,100\n        img = img.resize((row,column),Image.ANTIALIAS)\n        try:\n            gray_image = grayscale(img)\n        except:\n            print(f\"{file} is not checked\")\n            continue\n        X_test = normalize(gray_image)\n        X_test = X_test.reshape(1, row, column, 1)\n        classes = model.predict(X_test)\n        maxVal = classes[0].max()\n        indexVal = np.where(classes[0]==maxVal)\n        if (indexVal[0] == 0):\n            # print(f\"{file} is a Car\")\n            pass\n        else:\n            os.remove(dir_from+file)\n            remove_num += 1\n            # print(f\"{file} is not a Car\")\n        if step_num % 10000  == 0:\n            print(f'{step_num} files were checked')\nprint(f'{remove_num} files were deleted')","a1c6d52e":"# !find \/kaggle\/input\/cardetection-0-1\/0\/ -type f -iname \"*.jpg\" -exec cp {} \/kaggle\/temp\/train\/0\/ \\; \n!ls -1 \/kaggle\/input\/cardetection-0-1\/0\/ | xargs -i cp \/kaggle\/input\/cardetection-0-1\/0\/{} \/kaggle\/temp\/train\/0\/\n!ls -1 \/kaggle\/input\/cardetection-0-1\/1\/ | xargs -i cp \/kaggle\/input\/cardetection-0-1\/1\/{} \/kaggle\/temp\/train\/1\/\n!ls -1 \/kaggle\/input\/cardetection-2-4\/2\/ | xargs -i cp \/kaggle\/input\/cardetection-2-4\/2\/{} \/kaggle\/temp\/train\/2\/\n!ls -1 \/kaggle\/input\/cardetection-2-4\/3\/ | xargs -i cp \/kaggle\/input\/cardetection-2-4\/3\/{} \/kaggle\/temp\/train\/3\/\n!ls -1 \/kaggle\/input\/cardetection-2-4\/4\/ | xargs -i cp \/kaggle\/input\/cardetection-2-4\/4\/{} \/kaggle\/temp\/train\/4\/\n!ls -1 \/kaggle\/input\/cardetection-5-7\/5\/ | xargs -i cp \/kaggle\/input\/cardetection-5-7\/5\/{} \/kaggle\/temp\/train\/5\/\n!ls -1 \/kaggle\/input\/cardetection-5-7\/6\/ | xargs -i cp \/kaggle\/input\/cardetection-5-7\/6\/{} \/kaggle\/temp\/train\/6\/\n!ls -1 \/kaggle\/input\/cardetection-5-7\/7\/ | xargs -i cp \/kaggle\/input\/cardetection-5-7\/7\/{} \/kaggle\/temp\/train\/7\/\n!ls -1 \/kaggle\/input\/cardetection-8-9\/8\/ | xargs -i cp \/kaggle\/input\/cardetection-8-9\/8\/{} \/kaggle\/temp\/train\/8\/\n!ls -1 \/kaggle\/input\/cardetection-8-9\/9\/ | xargs -i cp \/kaggle\/input\/cardetection-8-9\/9\/{} \/kaggle\/temp\/train\/9\/","a29e0322":"train_datagen = ImageDataGenerator(\n#     rescale=1. \/ 255,\n    validation_split=VAL_SPLIT,\n    width_shift_range = WIDTH_SHIFT_RANGE,\n    height_shift_range = HEIGHT_SHIFT_RANGE,\n    horizontal_flip=HORIZONTAL_FLIP,\n    rotation_range=ROTATION_RANGE,\n    shear_range=SHEAR_RANGE,\n    brightness_range=BRIGHTNES_RANGE,\n    zoom_range=ZOOM_RANGE,\n    vertical_flip=VERTICAL_FLIP,\n)\n\nval_datagen = ImageDataGenerator(\n#     rescale=1. \/ 255,\n    validation_split=VAL_SPLIT,\n)\n\nsub_datagen = ImageDataGenerator(\n#     rescale=1. \/ 255,\n    width_shift_range=WIDTH_SHIFT_RANGE, \n    height_shift_range=HEIGHT_SHIFT_RANGE,\n    horizontal_flip=HORIZONTAL_FLIP\n)\n\n\ntrain_generator = train_datagen.flow_from_directory(\n    TRAIN_PATH,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True,\n    seed=RANDOM_SEED,\n    subset='training'\n)\n\nval_generator = val_datagen.flow_from_directory(\n    TRAIN_PATH,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True,\n    seed=RANDOM_SEED,\n    subset='validation'\n)\n\nsub_generator = sub_datagen.flow_from_dataframe( \n    dataframe=sample_submission,\n    directory=SUB_PATH,\n    x_col=\"Id\",\n    y_col=None,\n    shuffle=False,\n    class_mode=None,\n    seed=RANDOM_SEED,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE\n)\n# \u0411\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n# Found 12452 images belonging to 10 classes.\n# Found 3109 images belonging to 10 classes.\n# Found 6675 validated image filenames.","653db37e":"def show_first_images(generator, count=6, labels=True, figsize=(20, 5), normalized=False):\n    generator = itertools.islice(generator, count)\n    fig, axes = plt.subplots(nrows=1, ncols=count, figsize=figsize)\n    for batch, ax in zip(generator, axes):\n        if labels:\n            img_batch, labels_batch = batch\n            img, label = img_batch[0], np.argmax(labels_batch[0]) #\u0431\u0435\u0440\u0435\u043c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0430\u0442\u0447\u0430\n        else:\n            img_batch = batch\n            img = img_batch[0]\n        if not normalized:\n#             img = img.astype(np.float)\n            img = img.astype(np.uint8)\n        ax.imshow(img)\n        # \u043c\u0435\u0442\u043e\u0434 imshow \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0438\u0437 \u0434\u0432\u0443\u0445:\n        # - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 uint8, \u044f\u0440\u043a\u043e\u0441\u0442\u044c \u043e\u0442 0 \u0434\u043e 255\n        # - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 float, \u044f\u0440\u043a\u043e\u0441\u0442\u044c \u043e\u0442 0 \u0434\u043e 1\n        if labels:\n            ax.set_title(f'Class: {label}')\n    plt.show()\n\n    \nprint('Train:')\nshow_first_images(train_generator)\nprint('Val:')\nshow_first_images(val_generator)\nprint('Sub:')\nshow_first_images(sub_generator, labels=False)","0b1ec1bf":"# base_model = Xception(weights='imagenet', include_top=False, input_shape=INPUT_SHAPE) #95.37%\n# base_model = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=INPUT_SHAPE) #95.75%\n# base_model = NASNetLarge(weights='imagenet', include_top=False, input_shape=INPUT_SHAPE) #10.00% IMG_SIZE = 331\nbase_model = EfficientNetB3(weights='imagenet', include_top=False, input_shape=INPUT_SHAPE) #96.14% #97.54 with big picture\n# base_model.summary()","0799aad9":"x = base_model.output\nx = GlobalMaxPooling2D()(x)\nx = BatchNormalization()(x)\nx = Dropout(0.25)(x)\nx = Dense(256, activation = 'relu')(x)\nx = BatchNormalization()(x)\npredictions = Dense(10, activation='softmax')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.Adam(learning_rate=ExponentialDecay(0.001, decay_steps=100, decay_rate=0.9)),\n              metrics='accuracy')\n\n# x = base_model.output\n# x = GlobalAveragePooling2D()(x)\n# x = Dense(256, activation='relu')(x)\n# x = Dropout(0.25)(x)\n# x = BatchNormalization()(x)\n# predictions = Dense(10, activation='softmax')(x)\n# model = Model(inputs=base_model.input, outputs=predictions)\n# model.compile(loss='categorical_crossentropy',\n#               optimizer=optimizers.Adam(learning_rate=ExponentialDecay(0.001, decay_steps=100, decay_rate=0.9)),\n#               metrics='accuracy')\n\n# model.summary()","a890efe2":"mcheckpoint = ModelCheckpoint('best_model.hdf5', monitor='val_accuracy', verbose=1, mode='max', save_best_only=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.001)\nes = EarlyStopping(monitor='val_loss', patience=5)\ncallbacks_list = [mcheckpoint, es]","7de6bda8":"history = model.fit(\n        train_generator,\n        steps_per_epoch=len(train_generator),\n        validation_data=val_generator, \n        validation_steps=len(val_generator),\n        epochs=EPOCHS,\n        callbacks=callbacks_list\n)","6db86e41":"model.save('last_model.hdf5')\nmodel.load_weights('best_model.hdf5')","614aa793":"scores = model.evaluate(val_generator, steps=len(val_generator), verbose=1)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))\nos.rename('best_model.hdf5', f'best_model_{round(scores[1]*100, 2)}.hdf5')","cdeecf93":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","ab64ca23":"predictions = model.predict(sub_generator, verbose=1).argmax(axis=1)\nsubmission = pd.DataFrame({\n    'Id': sub_generator.filenames,\n    'Category': predictions\n}, columns=['Id', 'Category'])\nsubmission.to_csv('submission.csv', index=False)","4984668f":"sub_generator.reset()\npredictions_tta = []\nfor _ in range(EPOCHS):\n    predictions_tta.append(model.predict(sub_generator, verbose=1))\n    sub_generator.reset()\npredictions_tta = np.mean(np.array(predictions_tta), axis=0).argmax(axis=1)\nsubmission_tta = pd.DataFrame({\n    'Id': sub_generator.filenames,\n    'Category': predictions_tta\n}, columns=['Id', 'Category'])\nsubmission_tta.to_csv('submission_tta.csv', index=False)","49a79271":"model_2 = load_model('last_model.hdf5')\nsub_generator.reset()\npredictions_tta_ansemble = []\nfor _ in range(EPOCHS):\n    predictions_tta_ansemble.append(0.6*model.predict(sub_generator, verbose=1) \\\n                                    + 0.2*model_2.predict(sub_generator, verbose=1))\n    sub_generator.reset()\npredictions_tta_ansemble = np.mean(np.array(predictions_tta_ansemble), axis=0).argmax(axis=1)\nsubmission_tta_ansemble = pd.DataFrame({\n    'Id': sub_generator.filenames,\n    'Category': predictions_tta_ansemble\n}, columns=['Id', 'Category'])\nsubmission_tta_ansemble.to_csv('submission_tta_ansemble.csv', index=False)","59014df0":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 train \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u043b\u044f \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u0441\u0430\u0439\u0442\u0430 auto.ru:\nhttps:\/\/colab.research.google.com\/drive\/1_FkevD5wB9e9WuBJiajuLROMgSGP3uSL?usp=sharing\n\n\u0427\u0442\u043e\u0431\u044b \u043e\u0442\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 \u043e\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441\u0430\u043b\u043e\u043d\u0430, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043f\u0440., \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u044c \u0441 github:\nhttps:\/\/github.com\/ashislaha\/CarDetection-Keras\n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442:\nhttps:\/\/www.kaggle.com\/mukaseevru\/autoru\n\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043a\u0432\u043e\u0442\u044b \u0432 10 \u0447\u0430\u0441\u043e\u0432 GPU, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0442\u043e\u043b\u044c\u043a\u043e 10000 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435.\n\n\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0430\u0448 train","c296785b":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0442\u043e\u0433\u0438:\n\n- \u0414\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 10 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0430\u0432\u0442\u043e VAZ, Volkswagen, Ford\n- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0444\u043e\u0442\u043e\n- \u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u043d\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c 640 \u043d\u0430 480. \u0426\u0432\u0435\u0442\u043d\u044b\u0435.\n- \u0412\u0441\u0435\u0433\u043e 22236 \u0444\u043e\u0442\u043e \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435: 15561 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 6675 \u0432 \u0442\u0435\u0441\u0442\u0435\n- \u041a\u043e\u043b-\u0432\u043e \u0444\u043e\u0442\u043e \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0438\u0434\u044b \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","9c4d8beb":"# If you like my notebook please click **upvote***\n*It's the up arrow button. It's located further under the horizontal line.","2a4c1c2e":"# \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u044d\u0442\u043e\u0442 \u043d\u043e\u0443\u0442\u0431\u0443\u043a, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 **\u0430\u043f\u0432\u043e\u0439\u0442***\n*\u042d\u0442\u043e \u043a\u043d\u043e\u043f\u043a\u0430 \u0441\u043e \u0441\u0442\u0440\u0435\u043b\u043a\u043e\u0439. \u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043e\u043d\u0430 \u043d\u0438\u0436\u0435 \u043f\u043e\u0434 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0435\u0439.","fd15c6f5":"# TTA\n\u041f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443.","1d5e9cd2":"# \u041e \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435\n\n\u042d\u0442\u043e\u0442 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443 [Ford vs Ferrari](https:\/\/www.kaggle.com\/c\/sf-dl-car-classification).\n\n\u0426\u0435\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:\n*   \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 (\u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e)\n*   \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0434\u043d\u0435\u043c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0432\u0430\u0448 \u043a\u043e\u0434 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435, \u0430 \u0432\u044b \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435\u0441\u044c \u043e\u043f\u044b\u0442\u043d\u0435\u0435","d1256a73":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430:","4795a6ca":"# \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0430\u043d\u0441\u0430\u0431\u043b\u044c \u0438\u0437 \u043b\u0443\u0447\u0448\u0435\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0411\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u0435\u0441 \u043e\u0442\u0434\u0430\u0434\u0438\u043c \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0442.\u043a. \u0443 \u043d\u0435\u0435 \u043b\u0443\u0447\u0448\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430.","e9d2bf88":"# \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","ff44ce57":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ede1f719":"# EDA \/ \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","f138efcc":"# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:\n!!! \u041d\u0430 \u043f\u043e\u043b\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043a\u0432\u043e\u0442\u044b \u0432 10 \u0447\u0430\u0441\u043e\u0432 GPU \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430\n1. \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 kaggle: 0.97063\n2. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 github: https:\/\/github.com\/mukaseevru\/skillfactory_rds\/tree\/master\/module_7\n3. \u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e (\u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438):\n- \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 7 \u0438 9, \u0442.\u043a. \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432\u043d\u0435\u0448\u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438\n- \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n- \u0440\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c test, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 train \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u044c\n- \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n- \u0443\u0440\u0430\u0432\u043d\u044f\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b\n- \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u043c\u0435\u043d\u0435\u0435 10 \u0447\u0430\u0441\u043e\u0432","dccc4c55":"# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"}}