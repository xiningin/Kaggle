{"cell_type":{"5e07d1e0":"code","3f2e8334":"code","d4b95b49":"code","e080eaf1":"code","ccae6e19":"code","27771fce":"code","e77b1500":"code","6067c798":"code","f45ba882":"code","8b599149":"code","730e05c9":"code","69d7b531":"code","3587811e":"code","2606f870":"code","43ca90ab":"markdown","7ed78dae":"markdown","13e308c0":"markdown","fd1b9c82":"markdown","d6c97648":"markdown","d03f84fd":"markdown","cf1c111d":"markdown","34568b1f":"markdown","475613aa":"markdown","dc873f59":"markdown","8ba2e7f5":"markdown"},"source":{"5e07d1e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f2e8334":"data = pd.read_csv(\"..\/input\/twitch-chat-test-data\/healthygamer_gg_testdata.csv\") # Reading data with using pandas","d4b95b49":"data = data.dropna() # Dropping NaN values","e080eaf1":"data.head() ","ccae6e19":"data.tail() ","27771fce":"data.info()","e77b1500":"data_message = data.message\ncounter_data = Counter(data.message)\ndata_most_common_message = counter_data.most_common(15)\ndata_most_common_message = pd.DataFrame(data_most_common_message)\ndata_most_common_message.columns = [\"a\",\"b\"] # when we transform this dataframe pandas names columns 0,1 and we change it to a and b because when we visualaze data they makes some errors\ndata_most_common_message","6067c798":"trace1 = go.Bar(\n                x = data_most_common_message.a,\n                y = data_most_common_message.b,\n                name = \"most_common_message\",\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_most_common_message.a)\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","f45ba882":"counter_data_user = Counter(data.user)\ndata_most_common_user = counter_data_user.most_common(15)\ndata_most_common_user = pd.DataFrame(data_most_common_user)\ndata_most_common_user.columns = [\"a\",\"b\"]\ndata_most_common_user","8b599149":"trace1 = go.Bar(\n                x = data_most_common_user.a,\n                y = data_most_common_user.b,\n                name = \"most_common_message\",\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_most_common_user.a)\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","730e05c9":"counter_data_time = Counter(data.timestamp)\ndata_most_common_timestamp = counter_data_time.most_common(5)\ndata_most_common_timestamp = pd.DataFrame(data_most_common_timestamp)\ndata_most_common_timestamp.columns = [\"a\",\"b\"]\ndata_most_common_timestamp","69d7b531":"labels = data_most_common_timestamp.a\ncolors = ['blue','red',\"green\",\"cyan\",\"purple\"]\nexplode = [0,0,0,0,0]\nsizes = data_most_common_timestamp.b\n\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Most active times',color = 'blue',fontsize = 15)","3587811e":"counter_data_channel = Counter(data.channel)\ndata_most_common_channel = counter_data_channel.most_common(5)\ndata_most_common_channel = pd.DataFrame(data_most_common_channel)\ndata_most_common_channel.columns = [\"a\",\"b\"]\ndata_most_common_channel","2606f870":"fig = px.bar(data_most_common_channel,x=\"a\",y=\"b\")\nfig.show()","43ca90ab":"# Twitch chat EDA\n* in this kernel I will explain twitch chat data with using counter,ploty and matplotlib","7ed78dae":"In this code we find most active times in chat","13e308c0":"# CONCLUSION\n* That was a short kernel show some information about twitch chat\n* If you like my kernel please upvote\n* Please say my mistakes in comments \n* If you gve me some advices I will be happy","fd1b9c82":"In this code we see most active times in a pie chart","d6c97648":"On this plot we see most active 5 channel","d03f84fd":"Firstly I import libraries","cf1c111d":"In this plot we see most common words on twitch chat","34568b1f":"In this code we can see most active users and how much words they wrote","475613aa":"We find most common 15 words on chat","dc873f59":"We find most active 15 users on chat","8ba2e7f5":"As you can see we just have object data "}}