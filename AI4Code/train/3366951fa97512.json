{"cell_type":{"4578bb5d":"code","d8dd47b7":"code","b9b7a51f":"code","59655b30":"code","81c8e61b":"code","161da14d":"code","cb549a0c":"code","bac529cc":"code","a357897e":"code","bc5503e9":"code","f3d991b9":"code","0aa60a31":"code","9b0b4c6b":"code","d60c44fb":"code","fe450fcf":"code","954bacfa":"code","218f558c":"code","bcf4062b":"code","0531bc78":"code","9a11cb3f":"code","a60e735b":"code","b5a4a359":"code","133daf15":"code","b54c299d":"code","8276b8a3":"code","c471364f":"code","e11fd236":"code","16c07cbf":"markdown","82d06d9d":"markdown","433fe10a":"markdown"},"source":{"4578bb5d":"#importing libraries\n\nimport numpy as np \nimport pandas as pd \n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d8dd47b7":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\nimport nltk\nimport re\nimport string\nfrom nltk.stem import WordNetLemmatizer","b9b7a51f":"#reading the data\n\ntest_csv = pd.read_csv('\/kaggle\/input\/imdb-movie-reviews-dataset\/test_data (1).csv') \ntrain_csv = pd.read_csv('\/kaggle\/input\/imdb-movie-reviews-dataset\/train_data (1).csv') ","59655b30":"#stopword removal and lemmatization\n\nstopwords = nltk.corpus.stopwords.words('english')\nlemmatizer = WordNetLemmatizer()","81c8e61b":"# Preprocessing\nnltk.download('stopwords')","161da14d":"train_csv.head()","cb549a0c":"train_X_non = train_csv['0']   # '0' refers to the review text\ntrain_y = train_csv['1']   # '1' corresponds to Label (1 - positive and 0 - negative)\ntest_X_non = test_csv['0']\ntest_y = test_csv['1']\n\ntrain_X=[]\ntest_X=[]","bac529cc":"#text pre processing\n\nfor i in range(0, len(train_X_non)):\n    review = re.sub('[^a-zA-Z]', ' ', train_X_non[i])\n    review = review.lower()\n    review = review.split()\n    review = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]\n    review = ' '.join(review)\n    train_X.append(review)","a357897e":"#text pre processing\n\nfor i in range(0, len(test_X_non)):\n    review = re.sub('[^a-zA-Z]', ' ', test_X_non[i])\n    review = review.lower()\n    review = review.split()\n    review = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]\n    review = ' '.join(review)\n    test_X.append(review)","bc5503e9":"train_X[10]","f3d991b9":"test_X[10]","0aa60a31":"#tf idf\n\ntf_idf = TfidfVectorizer()","9b0b4c6b":"#applying tf idf to training data\n\nX_train_tf = tf_idf.fit_transform(train_X)","d60c44fb":"#applying tf idf to training data\n\nX_train_tf = tf_idf.transform(train_X)","fe450fcf":"print(\"n_samples: %d, n_features: %d\" % X_train_tf.shape)","954bacfa":"#transforming test data into tf-idf matrix\n\nX_test_tf = tf_idf.transform(test_X)","218f558c":"print(\"n_samples: %d, n_features: %d\" % X_test_tf.shape)","bcf4062b":"#naive bayes classifier\n\nnaive_bayes_classifier = MultinomialNB()\nnaive_bayes_classifier.fit(X_train_tf, train_y)","0531bc78":"#predicted y\n\ny_pred = naive_bayes_classifier.predict(X_test_tf)","9a11cb3f":"print(metrics.classification_report(test_y, y_pred,\n                                            target_names=['Positive', 'Negative']))","a60e735b":"print(\"Confusion matrix:\")\nprint(metrics.confusion_matrix(test_y, y_pred))","b5a4a359":"\n#doing a test prediction\n\ntest = [\"This is unlike any kind of adventure movie my eyes have ever seen in such a long time, the characters, the musical score for every scene, the story, the beauty of the landscapes of Pandora, the rich variety and uniqueness of the flora and fauna of Pandora, the ways and cultures and language of the natives of Pandora, everything about this movie I am beyond impressed and truly captivated by. Sam Worthington is by far my favorite actor in this movie along with his character Jake Sulley, just as he was a very inspiring actor in The Shack Sam Worthington once again makes an unbelievable mark in one of the greatest and most captivating movies you'll ever see. \"]","133daf15":"review = re.sub('[^a-zA-Z]', ' ', test[0])\nreview = review.lower()\nreview = review.split()\nreview = [lemmatizer.lemmatize(word) for word in review if not word in set(stopwords)]\ntest_processed =[ ' '.join(review)]\n","b54c299d":"test_processed","8276b8a3":"test_input = tf_idf.transform(test_processed)","c471364f":"test_input.shape","e11fd236":"\n#0= bad review\n#1= good review\n\nres=naive_bayes_classifier.predict(test_input)[0]\n\nif res==1:\n    print(\"Good Review\")\n    \nelif res==0:\n    print(\"Bad Review\")","16c07cbf":"# Model Creation","82d06d9d":"# Doing a Test Prediction","433fe10a":"# Text Pre Processing"}}