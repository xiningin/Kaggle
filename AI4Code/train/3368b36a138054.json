{"cell_type":{"5c166c0d":"code","4650a644":"code","9ec3e3a2":"code","a9fdedf7":"code","9093faac":"code","94ca005c":"code","e9e69077":"code","89a2c5f2":"code","ba1aefaf":"code","e9dee4f9":"code","c273d773":"code","31310931":"code","3a220094":"code","bd97d9f3":"code","c1eff834":"code","e4aa5750":"code","d63584c5":"code","bee915df":"code","3e92f71c":"code","fe14be6a":"markdown","ada86303":"markdown","d85bcafb":"markdown","f5c6de27":"markdown","6fa08272":"markdown","03b0af61":"markdown","86cc5133":"markdown","ac56484c":"markdown","644c2cde":"markdown","ed09bba7":"markdown","04d97dc0":"markdown"},"source":{"5c166c0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4650a644":"# Import Data\ndf = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","9ec3e3a2":"# First 5 Rows\ndf.head(5)","a9fdedf7":"df_tidy = df.copy()","9093faac":"df_tidy.head(5)","94ca005c":"import time","e9e69077":"df_tidy.info()","89a2c5f2":"def tidying_row(dataframe):\n    start = time.clock()\n    lenght=len(dataframe)\n    for row in range(0,lenght):\n        new_list = []\n        iter_time = len(dataframe.iloc[row].split('\\\"'))\/\/6\n        stry = dataframe.iloc[row].split('\\\"')\n        for i in range(1,iter_time+1):\n            new_list.append(stry[(i*6)-1])\n        dataframe.iloc[row] = new_list\n    print (time.clock() - start)\ntidying_row(df_tidy.genres.head(4803))","ba1aefaf":"tidying_row(df_tidy.keywords.head(4803))\ntidying_row(df_tidy.production_companies.head(4803))\ntidying_row(df_tidy.production_countries.head(4803))\ntidying_row(df_tidy.spoken_languages.head(4803))","e9dee4f9":"df_tidy.head(5)","c273d773":"df_tidy_high_vote = df_tidy[df_tidy.vote_average > 8]\ndf_tidy_high_vote.corr()","31310931":"plt.figure(figsize=(8, 8), dpi=80)\nplt.scatter(df_tidy_high_vote.budget, df_tidy_high_vote.revenue, alpha=0.5)\nplt.title(\"Budget vs Revenue\")\nplt.xlabel(\"Budget\")\nplt.ylabel(\"Revenue\")\nplt.show()","3a220094":"df_tidy_high_vote.describe()","bd97d9f3":"df_tidy_high_vote.info()","c1eff834":"df_tidy_high_vote.homepage.fillna('UNKNOWN',inplace=True)\ndf_tidy_high_vote.tagline.fillna('UNKNOWN',inplace=True)\ndf_tidy_high_vote.info()","e4aa5750":"df_tidy_high_vote.boxplot(column='revenue', figsize=(8,8))\nplt.show()","d63584c5":"alist = ['Science Fiction']\ndf_tidy_high_vote[df_tidy_high_vote.genres.apply(lambda x :set(alist).issubset(x))]\ndf_tidy_high_vote['SciFi'] = np.where(df_tidy_high_vote.genres.apply(lambda x :set(alist).issubset(x)), 'Yes', 'No')","bee915df":"df_tidy_high_vote.head()","3e92f71c":"df_tidy_high_vote.boxplot(column='revenue', by='SciFi', figsize=(8,8))\nplt.show()","fe14be6a":"The graph above shows that revenue is increase with the budget.","ada86303":"According to descriptive statistics there is some Outlier in movie revenues. ","d85bcafb":"homepage and tagline columns have Null object.","f5c6de27":"Add a column according to Movie is SciFi or not","6fa08272":"* Non SciFi movie's revenues have a wide seperation from 0 to above 1 billion\n* On the other hand all SciFi films have near revenue and it is more then Half Billion.\n* In conclusion if you want to have a higher revenue SciFi films are the best option for you.","03b0af61":"As homepage and tagline columns are not so important for our study we fill Null values with string 'UNKNOWN'","86cc5133":"It took 1.261097 seconds to tidy genres column. \"df_tidy.genres.head(4803)\" in this line without \".head(4803)\" it took longer.\n* We need to apply function to keywords, production_companies, production_countries and spoken_languages columns","ac56484c":"Before start tidying copy the dataframe for not losing any information","644c2cde":"genres, keywords, production_companies, production_countries and spoken_languages coloumns need to be simplified.\n* They have code before informaion (ex: [{\"name\": \"Ingenious Film Partners\", \"id\": 289... ))\n* Every unique value has 6 character long. We divide every line to 6 to find how many items we have. ","ed09bba7":"Print out the execution time. They all look fine to me.\n* Check the new tidied database","04d97dc0":"Filtered the list to include high-rated movies (more than 8). There is a correlation between Budget and Revenue "}}