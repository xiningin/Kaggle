{"cell_type":{"cdb704cc":"code","f664bfef":"code","b6280bdc":"code","104268cf":"code","40f72a4c":"code","0ff650b9":"code","895a0afc":"markdown"},"source":{"cdb704cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f664bfef":"#no 1\n#LIST\ndata = ['gusti', 1, 2.0]\nprint(data)\n\n#string\nnama = 'gusti'\nprint (nama)\n\n#tuple\ntuple0 = () # deklarasi tuple kosong\ntuple0 = tuple() # deklarasi tuple kosong\ntuple1 = ('bakso',) # deklarasi tuple dengan 1 elemen, perhatikan ada tanda koma setelah 'bakso'\ntuple2 = ('soto', 'mie ayam') # deklarasi tuple dengan 2 elemen, tanpa tanda koma\nprint tuple2[0] # menampilkan element pertama\n\n#set\nfruits = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(fruits\n\n#dict\nharga = {'pensil': 3000, 'pulpen': 5000}\nprint(harga)\n","b6280bdc":"#no2 queue\n\n#antrian dalam membeli baju\n\nfrom collections import deque # import module\nantrian = deque([1,2,3,4,5,6])\nprint('data antrian sekarang : ', antrian)\n\n#menambahakan data antrian membeli baju\nantrian.append(7)\nprint('data antrian masuk : 7')\nprint('data antrian yang bernama gusti : ', antrian)\n\n#mengurangi antrian membeli baju\nkeluar = antrian.popleft()\nprint('data keluar : ', keluar)\nprint('data antrian yang bernama gusti sekarang : ', antrian)","104268cf":"#no 3\n\nlist a = [2,6,4,5,7,9,12]\n\nlist A = [\u201cHari Ini\u201d]\nlist B = [\u201cCuaca Cerah\u201d]\nlist A + B \nprint (f' list C berisi: {c})\n       \nList = [11, 45, 8, 23, 14, 12, 78, 45, 89]","40f72a4c":"#no4 STACK\n#tumpukkan sebuah piring\nstack = [1,2,3,4,5]\nprint(stack)\n\n#memasukan data baru\nstack.append(6)\nprint(\"data masuk piring \", 6)\nprint('data sekarang', stack)\n\n#memasukkan data baru \nprint(\"data masuk piring \", 7)\nprint('data sekarang', stack)\n\n#mengeluarkan data tumpukkan piring yang paling akhir \ndataKeluar = stack.pop() \nprint('data piring yang keluar adalah :',dataKeluar)\nprint(\"data terakhir piring yang keluar adalah :\",stack)","0ff650b9":"#no5\n\nclass Node:\n    def __init__(self,initdata):\n        self.data = initdata\n        self.next = None\n        self.previous = None\n    def getData(self):\n        return self.data\n    def getNext(self):\n        return self.next\n    def getPrevious(self):\n        return self.previous\n    def setData(self,newdata):\n        self.data = newdata\n    def setNext(self,newnext):\n        self.next = newnext\n    def setPrevious(self, newprevious):\n        self.previous = newprevious\n   \nclass Unorderedlist:\n    def __init__(self):\n        self.head = None\n    def show(self):\n        current = self.head\n        print('None <-')\n        print('Head ->', end='')\n        while current != None:\n            if current.getNext()== None:\n                print(current.getData(), end = '->')\n            else:\n                print(current.getData(), end='<->')\n            current = current.getNext()\n        print('None')\n    def isEmpty(self):\n        return self.head == None\n    def add(self, item):\n        temp = Node(item)\n        temp.setNext(self.head)\n        temp.setPrevious(None)\n        self.head = temp\n\n    def size(self):\n        current = self.head\n        count = 0\n        while current != None:\n            count += 1\n            current = current.getNext()\n        return count\n    def search(self,item):\n        current = self.head\n        found = False\n        while current != None and not found:\n            if current.getData() == item:\n                found = True\n            else:\n                current = current.getNext()\n        return found\n    def remove(self,item):\n        current = self.head\n        previous = None\n        found = False\n        while not found:\n            if current.getData() == item:\n                found = True\n            else:\n                previous = current\n                current = current.getNext()\n                next = current.getNext\n\n        if previous == None:\n            self.head = current.getNext()\n        else:\n            previous.setNext(current.getNext())\n          \n\nmylist = Unorderedlist()\nmylist.add(31)\nmylist.add(77)\nmylist.add(17)\nmylist.add(93)\nmylist.add(26)\nmylist.add(54)\n\nmylist.show()\nprint(mylist.size())\nprint(mylist.search(93))\nprint(mylist.search(100))\n\nmylist.add(100)\nprint(mylist.search(100))\nprint(mylist.size())\n\nmylist.remove(54)\nprint(mylist.size())\nmylist.remove(93)\nprint(mylist.size())\nmylist.remove(31)\nprint(mylist.size())\nprint(mylist.search(93))","895a0afc":"JAWABAN UTS\nGUSTI RANDA(2009010095)"}}