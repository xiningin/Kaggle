{"cell_type":{"808475cd":"code","64c25513":"code","a388e93b":"code","a7333489":"code","ded13856":"code","c510e459":"code","11027a69":"code","f07530db":"code","59fc942d":"code","ec188819":"code","7df5ea22":"code","af51067b":"code","95608c5c":"code","cd088945":"code","99ab5533":"code","60b1b490":"code","97da0141":"code","be0e2792":"code","5ac72990":"code","ac7f7ffd":"code","c00f47e1":"code","cbffc938":"code","d3c321a5":"code","44502415":"code","dc9021fc":"markdown"},"source":{"808475cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64c25513":"!pip install pyspark","a388e93b":"import pyspark\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession, SQLContext\nsc = SparkContext()\nsqlContext = SQLContext(sc)","a7333489":"from pyspark.sql.functions import *\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.feature import StringIndexer, VectorIndexer, OneHotEncoder, VectorAssembler\nfrom pyspark.ml.evaluation import MultilabelClassificationEvaluator\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom pyspark.ml.feature import MinMaxScaler, StandardScaler\nfrom pyspark.ml.feature import ChiSqSelector\nfrom pyspark.ml.classification import GBTClassifier\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier ","ded13856":"train = sqlContext.read.format('com.databricks.spark.csv').options(header='true', inferschema='true').load('\/kaggle\/input\/car-acceptability-prediction\/train.csv')\ntest = sqlContext.read.format('com.databricks.spark.csv').options(header='true', inferschema='true').load('\/kaggle\/input\/car-acceptability-prediction\/test.csv')\nsample = sqlContext.read.format('com.databricks.spark.csv').options(header='true', inferschema='true').load('\/kaggle\/input\/car-acceptability-prediction\/sampleSolutions.csv')","c510e459":"train.show(3)","11027a69":"train.cache()\ntrain.printSchema()","f07530db":"train.describe().toPandas().transpose()","59fc942d":"for val in train.toPandas().columns:\n  print(\"\\n\\n\")\n  print(train.toPandas()[val].unique())","ec188819":"train.toPandas()['car_id'].shape","7df5ea22":"train = train.drop('car_id')","af51067b":"train.show(3)","95608c5c":"for col in train.toPandas().columns:\n  print(train.toPandas()[col].unique())","cd088945":"stage_1 = StringIndexer(inputCol= 'buying_price', outputCol= 'buying_price_index')\nstage_2 = StringIndexer(inputCol= 'maintenance_price', outputCol= 'maintenance_price_index')\nstage_3 = StringIndexer(inputCol= 'number_of_doors', outputCol= 'number_of_doors_index')\nstage_4 = StringIndexer(inputCol= 'carry_capacity', outputCol= 'carry_capacity_index')\nstage_5 = StringIndexer(inputCol= 'trunk_size', outputCol= 'trunk_size_index')\nstage_6 = StringIndexer(inputCol= 'safety', outputCol= 'safety_index')\nstage_7 = StringIndexer(inputCol= 'acceptability', outputCol= 'acceptability_index')\nstage_8 = VectorAssembler(inputCols=['buying_price_index', 'maintenance_price_index',\n                                                          'number_of_doors_index', 'carry_capacity_index',\n                                                          'trunk_size_index', 'safety_index'],\n                           outputCol='features')\nstage_9 = StandardScaler(inputCol=\"features\", outputCol=\"scaledFeatures\",\n                        withStd=True, withMean=False)\nstage_10 = RandomForestClassifier(featuresCol='scaledFeatures', labelCol='acceptability_index',\n                                  numTrees=250, maxDepth=30, minInstancesPerNode=2, maxBins=125,\n                                  featureSubsetStrategy='sqrt', impurity='gini', seed = 42)","99ab5533":"regression_pipeline = Pipeline(stages= [stage_1, stage_2, stage_3, stage_4, stage_5, stage_6, stage_7, stage_8, stage_9, stage_10])","60b1b490":"model = regression_pipeline.fit(train)\ndf_trained = model.transform(test)","97da0141":"df_trained.show(3)","be0e2792":"len(df_trained.toPandas().columns)","5ac72990":"test_transform = model.transform(test)\ntest_transform.select('features', 'rawPrediction', 'probability', 'prediction').show()","ac7f7ffd":"test_transform.toPandas()['prediction'].unique()","c00f47e1":"pred = test_transform.toPandas()['prediction'].map({0.0 : 'unacc', 1.0 : 'acc', 2.0 :'good', 3.0 : 'vgood'})\npred","cbffc938":"car_id = test.toPandas()['car_id']","d3c321a5":"submission = pd.DataFrame([], columns=['car_id', 'acceptability'])\nsubmission.car_id = car_id\nsubmission.acceptability = pred","44502415":"submission.to_csv('submission.csv', index=False)","dc9021fc":"### 18520570 L\u00ea Phan Th\u00e0nh \u0110\u1ea1t\n### 18520527 H\u00e0 Nh\u01b0 Chi\u1ebfn\n### 18520714 Hu\u1ef3nh Nh\u1eadt H\u00e0o"}}