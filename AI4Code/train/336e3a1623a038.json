{"cell_type":{"b5f484fe":"code","622470db":"code","421c8a43":"code","5547587b":"code","f07f88e8":"code","cfc0c9cd":"code","cd953958":"code","685a2a4c":"code","0da7cd95":"code","69ee678b":"code","6031cc80":"code","e29b5791":"code","c3b4a1c6":"code","081ee44d":"code","e6df5dae":"code","f9413f5f":"code","b4a2fe23":"code","dcbb57fa":"code","ee7921f0":"code","4e76afa0":"code","4b6ac7df":"code","69970389":"code","847842cd":"code","d78c5dc8":"code","8cd3289d":"code","bd7e9637":"code","0f7c1a60":"code","7271ed13":"code","da792533":"code","6f8e08a2":"code","8591a228":"code","f2f9329d":"code","2177ab35":"code","b9e9b1a8":"code","76587003":"code","0149fafb":"code","55b57e3b":"code","01a678c7":"code","1b8f497f":"code","66eb0017":"code","b3f2edfc":"code","d576e64f":"code","f7ad1e14":"code","e0f91d25":"code","f4d9a98a":"code","a02f3957":"code","99cd4d9e":"code","0b0a375b":"code","11c1c8d1":"markdown","42822618":"markdown","fccf765e":"markdown","b2365eaa":"markdown"},"source":{"b5f484fe":"import sys\nimport sklearn\nimport numpy as np\nimport os\nnp.random.seed(42)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\nimport warnings\nwarnings.filterwarnings(action=\"ignore\", message=\"^internal gelsd\")\nfrom sklearn.datasets import load_iris\ndata =load_iris()\nx = data.data\ny = data.target\ndata.target_names","622470db":"plt.figure(figsize=(9, 3.5))\n\nplt.subplot(121)\nplt.plot(x[y==0, 2], x[y==0, 3], \"yo\", label=\"Iris setosa\")\nplt.plot(x[y==1, 2], x[y==1, 3], \"bs\", label=\"Iris versicolor\")\nplt.plot(x[y==2, 2], x[y==2, 3], \"g^\", label=\"Iris virginica\")\nplt.xlabel(\"Petal length\", fontsize=14)\nplt.ylabel(\"Petal width\", fontsize=14)\nplt.legend(fontsize=12)\n\nplt.subplot(122)\nplt.scatter(x[:, 2], x[:, 3], c=\"k\", marker=\".\")\nplt.xlabel(\"Petal length\", fontsize=14)\nplt.tick_params(labelleft=False)","421c8a43":"from sklearn.mixture import GaussianMixture\ny_pred = GaussianMixture(n_components=3, random_state=42).fit(x).predict(x)\nmapping = np.array([2, 0, 1])\ny_pred = np.array([mapping[cluster_id] for cluster_id in y_pred])\n","5547587b":"plt.plot(x[y_pred==0, 2], x[y_pred==0, 3], \"yo\", label=\"Cluster 1\")\nplt.plot(x[y_pred==1, 2], x[y_pred==1, 3], \"bs\", label=\"Cluster 2\")\nplt.plot(x[y_pred==2, 2], x[y_pred==2, 3], \"g^\", label=\"Cluster 3\")\nplt.xlabel(\"Petal length\", fontsize=14)\nplt.ylabel(\"Petal width\", fontsize=14)\nplt.legend(loc=\"upper left\", fontsize=12)","f07f88e8":"np.sum(y_pred==y)","cfc0c9cd":"np.sum(y_pred==y) \/ len(y_pred)","cd953958":"from sklearn.datasets import make_blobs\nblob_centers = np.array(\n    [[ 0.2,  2.3],\n     [-1.5 ,  2.3],\n     [-2.8,  1.8],\n     [-2.8,  2.8],\n     [-2.8,  1.3]])\nblob_std = np.array([0.4, 0.3, 0.1, 0.1, 0.1])\nx, y = make_blobs(n_samples=2000, centers=blob_centers,\n                  cluster_std=blob_std, random_state=7)\nlen(y),y","685a2a4c":"def plot_clusters(X, y=None,s=1,p=None):\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=s)\n    plt.xlabel(\"$x_1$\", fontsize=14)\n    plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n    if p != None:\n        plt.scatter(p[:, 0], p[:, 1], c=\"+\", s=s)\nplt.figure(figsize=(8, 4))\nplot_clusters(x,y)\n","0da7cd95":"#fit e predict\nfrom sklearn.cluster import KMeans\nk = 5\nkmeans = KMeans(n_clusters=k, random_state=42)\ny_pred = kmeans.fit_predict(x)\ny_pred is kmeans.labels_\n","69ee678b":"plot_clusters(kmeans.cluster_centers_,y=None,s=100)\n","6031cc80":"X_new = np.array([[0, 2], [3, 2], [-3, 3], [-3, 2.5]])\nkmeans.predict(X_new)\n\n\n","e29b5791":"def plot_data(X):\n    plt.plot(X[:, 0], X[:, 1], 'k.', markersize=2)\n\ndef plot_centroids(centroids, weights=None, circle_color='w', cross_color='k'):\n    if weights is not None:\n        centroids = centroids[weights > weights.max() \/ 10]\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='o', s=30, linewidths=8,\n                color=circle_color, zorder=10, alpha=0.9)\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='x', s=50, linewidths=50,\n                color=cross_color, zorder=11, alpha=1)\n\ndef plot_decision_boundaries(clusterer, X, resolution=1000, show_centroids=True,\n                             show_xlabels=True, show_ylabels=True):\n    mins = X.min(axis=0) - 0.1\n    maxs = X.max(axis=0) + 0.1\n    xx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], resolution),\n                         np.linspace(mins[1], maxs[1], resolution))\n    Z = clusterer.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n\n    plt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                cmap=\"Pastel2\")\n    plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                linewidths=1, colors='k')\n    plot_data(X)\n    if show_centroids:\n        plot_centroids(clusterer.cluster_centers_)\n\n    if show_xlabels:\n        plt.xlabel(\"$x_1$\", fontsize=14)\n    else:\n        plt.tick_params(labelbottom=False)\n    if show_ylabels:\n        plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n    else:\n        plt.tick_params(labelleft=False)","c3b4a1c6":"plt.figure(figsize=(8, 4))\nplot_decision_boundaries(kmeans, x)","081ee44d":"t =np.linalg.norm(np.tile(X_new, (1, k)).reshape(-1, k, 2) - kmeans.cluster_centers_, axis=2)\nplt.figure(figsize=(8, 4))\nplot_data(t)\n","e6df5dae":"kmeans_iter1 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                     algorithm=\"full\", max_iter=1, random_state=1)\nkmeans_iter2 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                     algorithm=\"full\", max_iter=2, random_state=1)\nkmeans_iter3 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                     algorithm=\"full\", max_iter=3, random_state=1)\nkmeans_iter1.fit(x)\nkmeans_iter2.fit(x)\nkmeans_iter3.fit(x)","f9413f5f":"plt.figure(figsize=(10, 8))\nplt.subplot(321)\nplot_data(x)\nplot_centroids(kmeans_iter1.cluster_centers_, circle_color='r', cross_color='w')\nplt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\nplt.tick_params(labelbottom=False)\nplt.title(\"Update the centroids (initially randomly)\", fontsize=14)\n\nplt.subplot(322)\nplot_decision_boundaries(kmeans_iter1, x, show_xlabels=False, show_ylabels=False)\nplt.title(\"Label the instances\", fontsize=14)\n\nplt.subplot(324)\nplot_decision_boundaries(kmeans_iter2, x, show_xlabels=False, show_ylabels=False)\n\nplt.subplot(325)\nplot_decision_boundaries(kmeans_iter2,x, show_centroids=False)\nplot_centroids(kmeans_iter3.cluster_centers_)\n\nplt.subplot(326)\nplot_decision_boundaries(kmeans_iter3, x, show_ylabels=False)\n\n","b4a2fe23":"def plot_clusterer_comparison(clusterer1, clusterer2, X, title1=None, title2=None):\n    clusterer1.fit(X)\n    clusterer2.fit(X)\n\n    plt.figure(figsize=(10, 3.2))\n\n    plt.subplot(121)\n    plot_decision_boundaries(clusterer1, X)\n    if title1:\n        plt.title(title1, fontsize=14)\n\n    plt.subplot(122)\n    plot_decision_boundaries(clusterer2, X, show_ylabels=False)\n    if title2:\n        plt.title(title2, fontsize=14)\n\n\n  ","dcbb57fa":"kmeans_rnd_init1 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                         algorithm=\"full\", random_state=11)\nkmeans_rnd_init2 = KMeans(n_clusters=5, init=\"random\", n_init=1,\n                         algorithm=\"full\", random_state=19)\n\nplot_clusterer_comparison(\n    kmeans_rnd_init1, \n    kmeans_rnd_init2, \n    x,\n    \"Solution 1\", \"Solution 2 (with a different random init)\")\n","ee7921f0":"kmeans.inertia_","4e76afa0":"kmeans_rnd_init1.inertia_","4b6ac7df":"kmeans_rnd_10_inits = KMeans(n_clusters=5, init=\"random\", n_init=10,\n                              algorithm=\"full\", random_state=11)\nkmeans_rnd_10_inits.fit(x)","69970389":"plt.figure(figsize=(8, 4))\nplot_decision_boundaries(kmeans_rnd_10_inits, x)","847842cd":"KMeans()\ngood_init = np.array([[-3, 3], [-3, 2], [-3, 1], [-1, 2], [0, 2]])\nkmeans = KMeans(n_clusters=5, init=good_init, n_init=1, random_state=42)\nkmeans.fit(x)\nkmeans.inertia_","d78c5dc8":"%timeit -n 50 KMeans(algorithm=\"elkan\").fit(x)","8cd3289d":"%timeit -n 50 KMeans(algorithm=\"full\").fit(x)","bd7e9637":"from sklearn.cluster import MiniBatchKMeans\nminibatch_kmeans = MiniBatchKMeans(n_clusters=5, random_state=42)\nminibatch_kmeans.fit(x)","0f7c1a60":"import urllib\nfrom sklearn.datasets import fetch_openml\n\nmnist = fetch_openml('mnist_784', version=1)\nmnist.target = mnist.target.astype(np.int64)\n\n","7271ed13":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    mnist[\"data\"], mnist[\"target\"], random_state=42)","da792533":"filename = \"my_mnist.data\"\nX_mm = np.memmap(filename, dtype='float32', mode='write', shape=X_train.shape)\nX_mm[:] = X_train","6f8e08a2":"minibatch_kmeans = MiniBatchKMeans(n_clusters=10, batch_size=10, random_state=42)\nminibatch_kmeans.fit(X_mm)","8591a228":"def load_next_batch(batch_size):\n    return x[np.random.choice(len(x), batch_size, replace=False)]","f2f9329d":"kmeans_k3 = KMeans(n_clusters=3, random_state=42)\nkmeans_k8 = KMeans(n_clusters=8, random_state=42)\n\nplot_clusterer_comparison(kmeans_k3, kmeans_k8, x, \"$k=3$\", \"$k=8$\")","2177ab35":"kmeans_per_k = [KMeans(n_clusters=k, random_state=42).fit(x) for k in range(1, 10)]\ninertias = [model.inertia_ for model in kmeans_per_k]","b9e9b1a8":"plt.figure(figsize=(8, 3.5))\nplt.plot(range(1, 10), inertias, \"ro-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Inertia\", fontsize=14)\nplt.annotate('Cotovelo',\n             xy=(4, inertias[3]),\n             xytext=(0.55, 0.55),\n             textcoords='figure fraction',\n             fontsize=16,\n             arrowprops=dict(facecolor='black', shrink=0.1)\n            )\nplt.axis([1, 8.5, 0, 1300])","76587003":"plot_decision_boundaries(kmeans_per_k[4-1], x)","0149fafb":"from sklearn.metrics import silhouette_score\nsilhouette_score(x, kmeans.labels_)","55b57e3b":"silhouette_scores = [silhouette_score(x, model.labels_)\n                     for model in kmeans_per_k[1:]]\nplt.figure(figsize=(8, 3))\nplt.plot(range(2, 10), silhouette_scores, \"go-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Silhouette score\", fontsize=14)\nplt.axis([1.8, 8.5, 0.55, 0.7])\n","01a678c7":"from sklearn.metrics import silhouette_samples\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\nX= x\nplt.figure(figsize=(11, 9))\n\nfor k in (3, 4, 5, 6):\n    plt.subplot(2, 2, k - 2)\n    \n    y_pred = kmeans_per_k[k - 1].labels_\n    silhouette_coefficients = silhouette_samples(X, y_pred)\n\n    padding = len(X) \/\/ 30\n    pos = padding\n    ticks = []\n    for i in range(k):\n        coeffs = silhouette_coefficients[y_pred == i]\n        coeffs.sort()\n\n        color = mpl.cm.Spectral(i \/ k)\n        plt.fill_betweenx(np.arange(pos, pos + len(coeffs)), 0, coeffs,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n        ticks.append(pos + len(coeffs) \/\/ 2)\n        pos += len(coeffs) + padding\n\n    plt.gca().yaxis.set_major_locator(FixedLocator(ticks))\n    plt.gca().yaxis.set_major_formatter(FixedFormatter(range(k)))\n    if k in (3, 5):\n        plt.ylabel(\"Cluster\")\n    \n    if k in (5, 6):\n        plt.gca().set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n        plt.xlabel(\"Silhouette Coefficient\")\n    else:\n        plt.tick_params(labelbottom=False)\n\n    plt.axvline(x=silhouette_scores[k - 2], color=\"red\", linestyle=\"--\")\n    plt.title(\"$k={}$\".format(k), fontsize=16)\n","1b8f497f":"PROJECT_ROOT_DIR=\".\/\"\nimages_path = os.path.join(PROJECT_ROOT_DIR, \"images\", \"unsupervised_learning\")\nos.makedirs(images_path, exist_ok=True)\nDOWNLOAD_ROOT = \"https:\/\/raw.githubusercontent.com\/ageron\/handson-ml2\/master\/\"\nfilename = \"ladybug.png\"\nprint(\"Downloading\", filename)\nurl = DOWNLOAD_ROOT + \"images\/unsupervised_learning\/\" + filename\nurl ='https:\/\/blog.influx.com.br\/storage\/app\/uploads\/public\/67d\/18f\/2fd\/67d18f2fdf601e40e21e8dc4e70247ca62c6ac83.jpg'\nurllib.request.urlretrieve(url, os.path.join(images_path, filename))\n","66eb0017":"from matplotlib.image import imread\nimages_path\nimage = imread(os.path.join(images_path, filename))\nimage.shape\n\nX = image.reshape(-1, 3)\nkmeans = KMeans(n_clusters=8, random_state=42).fit(X)\nsegmented_img = kmeans.cluster_centers_[kmeans.labels_]\nsegmented_img = segmented_img.reshape(image.shape)","b3f2edfc":"segmented_imgs = []\nn_colors = (10, 8, 6, 4, 2)\nfor n_clusters in n_colors:\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(X)\n    segmented_img = kmeans.cluster_centers_[kmeans.labels_]\n    segmented_imgs.append(segmented_img.reshape(image.shape))","d576e64f":"plt.figure(figsize=(10,5))\nplt.subplots_adjust(wspace=0.05, hspace=0.1)\n\nplt.subplot(231)\nplt.imshow(image)\nplt.title(\"Original image\")\nplt.axis('off')\n\nfor idx, n_clusters in enumerate(n_colors):\n    plt.subplot(232 + idx)\n    plt.imshow(segmented_imgs[idx])\n    plt.title(\"{} colors {}\".format(n_clusters, idx.real))\n     \n    plt.axis('off')","f7ad1e14":"from sklearn.datasets import load_digits\nX_digits, y_digits = load_digits(return_X_y=True)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_digits, y_digits, random_state=42)","e0f91d25":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(multi_class=\"ovr\", solver=\"lbfgs\", max_iter=5000, random_state=42)\nlog_reg.fit(X_train, y_train)","f4d9a98a":"log_reg.score(X_test, y_test)","a02f3957":"from sklearn.pipeline import Pipeline\npipeline = Pipeline([\n    (\"kmeans\", KMeans(n_clusters=50, random_state=42)),\n    (\"log_reg\", LogisticRegression(multi_class=\"ovr\", solver=\"lbfgs\", max_iter=5000, random_state=42)),\n])\npipeline.fit(X_train, y_train)\npipeline.score(X_test, y_test)","99cd4d9e":"from sklearn.model_selection import GridSearchCV\nparam_grid = dict(kmeans__n_clusters=range(2, 10))\ngrid_clf = GridSearchCV(pipeline, param_grid, cv=3, verbose=2)\ngrid_clf.fit(X_train, y_train)\n","0b0a375b":"grid_clf.best_params_","11c1c8d1":"# Segmentation","42822618":"# Clusters\n","fccf765e":"# K-Means\n","b2365eaa":"# Classification vs Clustering"}}