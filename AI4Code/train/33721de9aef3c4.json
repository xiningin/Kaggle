{"cell_type":{"f429c180":"code","7422f5d5":"code","1d0f5b27":"code","27ae00e7":"code","c8f39578":"code","3d85d585":"code","7482ebe1":"code","5dbed835":"code","223f8c0d":"code","2a4c405c":"code","ff28b9e0":"code","5c918faf":"code","f5018be4":"code","6de1f6d0":"code","f87f70dc":"code","b3a67326":"code","5d964fe6":"code","a2a327cf":"code","8b4836c6":"code","446486d9":"code","bcda0a36":"code","c6c2068f":"code","e82b2a7b":"markdown","c8c5b7ed":"markdown","4c05746c":"markdown","458d4e4d":"markdown","b17b308c":"markdown","7193d133":"markdown","2f30adc9":"markdown","8b2cc4d3":"markdown","56f43d4e":"markdown","96910e11":"markdown","7dff8e1c":"markdown","f3dc490a":"markdown","a5172629":"markdown","5b250d59":"markdown"},"source":{"f429c180":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nimport tensorflow as tf\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.regularizers import l1\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\nfrom sklearn.metrics import accuracy_score \nimport numpy as np\nfrom time import time\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7422f5d5":"data= pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv', encoding='latin-1')\ndata","1d0f5b27":"data=data.iloc[:,:2]\ndata['message_len'] = data.v2.apply(len)\ndata['v1']=data['v1'].replace({'ham':0,'spam':1})\ndata.head()","27ae00e7":"plt.figure(figsize=(12, 8))\n\ndata[data.v1==0].message_len.plot(bins=35, kind='hist', color='blue', \n                                       label='Ham messages', alpha=0.6)\ndata[data.v1==1].message_len.plot(kind='hist', color='red', \n                                       label='Spam messages', alpha=0.6)\nplt.legend()\nplt.xlabel(\"Message Length\")","c8f39578":"df=data.iloc[:,:2]\ndf.head()","3d85d585":"def clean_text(text):\n \n    text = re.sub('[^a-zA-Z]', ' ', text)  \n\n    text = text.lower()  \n\n    text = text.split(' ')  \n    \n    text = [w for w in text if not w in set(stopwords.words('english'))] \n\n    text = ' '.join(text)    \n            \n    return text\n\n\n\ndf['v2'] = df['v2'].apply(lambda x : clean_text(x))\ndf.head()","7482ebe1":"def create_corpus(df):\n    corpus=[]\n    for tweet in tqdm(df['v2']):\n        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus\n\ncorpus=create_corpus(df)","5dbed835":"embedding_dict={}\nwith open('\/kaggle\/input\/glove-global-vectors-for-word-representation\/glove.6B.50d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word=values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","223f8c0d":"MAX_LEN=10\ntokenizer_obj=Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences=tokenizer_obj.texts_to_sequences(corpus)\ntweet_pad=pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')","2a4c405c":"word_index=tokenizer_obj.word_index\nprint('Number of unique words:',len(word_index))","ff28b9e0":"num_words=len(word_index)+1\nembedding_matrix=np.zeros((num_words,50))\n\nfor word,i in tqdm(word_index.items()):\n    if i > num_words:\n        continue\n    \n    emb_vec=embedding_dict.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i]=emb_vec","5c918faf":"X_train,X_val, y_train, y_val = train_test_split(tweet_pad,df.v1, test_size=.2, random_state=2)","f5018be4":"print('Shape of train sequences: ',X_train.shape)\nprint('Shape of train labels: ',y_train.shape)\nprint(\"Shape of Validation sequences: \",X_val.shape)\nprint(\"Shape of Validation  labels: \",y_val.shape)","6de1f6d0":"model=Sequential()\n\nembedding_layer=Embedding(num_words,50,embeddings_initializer=Constant(embedding_matrix),\n                   input_length=MAX_LEN,trainable=False)\n\nmodel.add(embedding_layer)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2,return_sequences=True))\nmodel.add(tf.keras.layers.LSTM(32,return_sequences=True))\nmodel.add(tf.keras.layers.LSTM(16))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))","f87f70dc":"optimzer=Adam(learning_rate=1e-4)\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['acc'])\nmodel.summary()","b3a67326":"history=model.fit(X_train,y_train,batch_size=32,epochs=10,validation_data=(X_val,y_val),verbose=1)","5d964fe6":"text=\"wind up your mates today please visit URL \"\ntext_cleaned = clean_text(text)\ntest_sequences = tokenizer_obj.texts_to_sequences(text_cleaned)\ntest_data = pad_sequences(test_sequences, maxlen=100)\n","a2a327cf":"predictions= model.predict_classes(test_data)\npredictions","8b4836c6":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss.head()","446486d9":"# model_loss[['loss','val_loss']].plot(ylim=[0,1])\n# plt.show()","bcda0a36":"# model_loss[['acc','val_acc']].plot(ylim=[0,1])\n# plt.show()","c6c2068f":"model.save('model.h5')","e82b2a7b":"# Lets Do Some EDA.","c8c5b7ed":"# Text Preprocessing.","4c05746c":"## Lets visualize the Accuracy over the Epochs.","458d4e4d":"# Splitting The Data into train and validation set.","b17b308c":"## Fitting The Model.","7193d133":"Lets checkout the message length whether the sms is a spam or not.","2f30adc9":"# Creating Our Model.","8b2cc4d3":"# Loading The Dataset.","56f43d4e":"## Importing The Required Libraries","96910e11":"Here we will use GloVe pretrained corpus model to represent our words.It is available in 3 varieties :50D ,100D and 200 Dimentional.We will try 50 D here because the Dataset is small.If you have a larger dataset,you can use 100D or 200D.","7dff8e1c":"## GloVe for Vectorization","f3dc490a":"## Lets visualize the Loss over the Epochs.","a5172629":"We are only going to use the first two columns also we are going to replace spam with 1 and ham with 0 in column 1.","5b250d59":"## Creating a Dataframe of Loss And Accuracy."}}