{"cell_type":{"69dc3371":"code","415f63c5":"code","6be21220":"code","3a46bdb5":"code","aafa752d":"code","a632a100":"code","068a7dee":"code","4739c3be":"code","fe73f0d0":"code","f9c08cff":"code","12314b2d":"code","f4d73ea3":"code","32cf5d7c":"markdown","440a89cd":"markdown","ba834f16":"markdown","0f021599":"markdown","a6e6cdef":"markdown","2426282d":"markdown"},"source":{"69dc3371":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom datetime import datetime\nfrom sklearn.model_selection import cross_val_score,StratifiedKFold, KFold\nfrom sklearn.metrics import accuracy_score,mean_absolute_error","415f63c5":"#import data\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\n#df_confirmed","6be21220":"df_confirmed_Canada = df_confirmed.loc[df_confirmed['Country\/Region'] == 'Canada'].reset_index(drop = True)\n#df_confirmed_Canada","3a46bdb5":"Canada_disease_trend = pd.DataFrame(np.zeros((1, df_confirmed_Canada.shape[1])), columns = df_confirmed_Canada.columns)\n#Canada_disease_trend\ndf_confirmed_Canada = df_confirmed_Canada.append(df_confirmed_Canada.sum(axis=0).to_frame().transpose(), ignore_index = True)\ndf_confirmed_Canada","aafa752d":"df_confirmed_Canada['Province\/State'][len(df_confirmed_Canada['Province\/State'])-1] = 'total'\n#df_confirmed_Canada","a632a100":"df_confirmed_Canada.drop(['Country\/Region', 'Lat', 'Long'], axis = 1, inplace = True)\ndf_confirmed_Canada","068a7dee":"df_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\n#df_covid19","4739c3be":"df_covid19_Canada = df_covid19.loc[df_covid19['Country_Region'] == 'Canada'].reset_index(drop = True)\ndf_covid19_Canada","fe73f0d0":"province_list = df_confirmed_Canada['Province\/State'].tolist()\n#province_list","f9c08cff":"def date_converter(date_list):\n    #input: list of date, each one must between 1 day: 1999\/09\/09, 1999\/09\/10\n    #output: 0, 1, 2, ... or 55,56,..., choose 1\/22\/20 as 0.\n    #https:\/\/www.google.com\/search?q=python+calculate+time+difference&rlz=1C1CHBF_enCA882CA882&oq=python+calculate+time+difference&aqs=chrome..69i57j0l7.4637j0j7&sourceid=chrome&ie=UTF-8\n    #print(date_list)\n    date_format = \"%m\/%d\/%Y\"\n    start_date = datetime.strptime(date_list[0], date_format)\n    i = 0 \n    while i < len(date_list):\n        date = datetime.strptime(date_list[i], date_format)\n        date_list[i] = (date - start_date).days\n        i+=1\n    return date_list","12314b2d":"def linear_regression(region_name, data, estimate_date):\n    #this fuction apply linear regression to our datasets\n    #input: region_name: province name or total\n    #data: our train dataset\n    #estimate_date: number of days to estimate\n    #output: solution of approximation for next X days\n    \n    #choose province and get data\n    row = data[data['Province\/State'] == region_name]\n    row_column = row.columns.tolist()[1:]\n    row = row.values.tolist()[0][1:]\n    \n    #change format of date\n    i = 0 \n    while i < len(row_column):\n        row_column[i] = row_column[i][:-2] + '20' + row_column[i][-2:]\n        i+=1\n    row_column = date_converter(row_column)\n    \n    #start linear regression\n    #print(row)\n    #print(row_column)\n    X = pd.DataFrame(row_column)\n    y = pd.Series(row)\n    print('********')\n    #print(X,y)\n    print(X.values.tolist())\n    X_list = X.values.tolist()\n    k = []\n    for i in X_list:\n        k.append(i[0])\n    print(k)\n    df_merge_col = pd.DataFrame({'Date': k,\n                           'Number of cases': y.tolist()})\n    df_merge_col.to_csv(\"..\/..\/kaggle\/working\/Confirm_datasets_clean.csv\", index=False)\n    #model\n    #try model\n    lr =  LinearRegression(copy_X = False, n_jobs = -1)\n    lr.fit(X,y)\n    submit = lr.predict(estimate_date)\n    plt.scatter(estimate_date[0].tolist(), submit,  color='black')\n    plt.plot(estimate_date[0].tolist(), submit, color='blue', linewidth=3)\n    plt.show()\n    altogether_X = pd.concat([X,estimate_date], axis = 0 ) \n    altogether_y = pd.concat([y,pd.Series(submit)], axis = 0 )\n    plt.scatter(altogether_X, altogether_y,  color='black')\n    plt.plot(altogether_X, altogether_y, color='blue', linewidth=3)\n    plt.show()\n    \n    \n    \n    #StratifiedKFold\n    N = 5\n    confirm = pd.DataFrame(np.zeros((len(test_data), N)), columns=['Fold_{}'.format(i) for i in range(1, N + 1)])\n    auc_score_total = 0\n    num = 0\n    skf = StratifiedKFold(n_splits=N, random_state=5)\n    for train_index, test_index in skf.split(X, y):\n        num +=1\n        X_train, X_test = X.iloc[train_index,:], X.iloc[test_index,:]\n        y_train, y_test = y[train_index], y[test_index]\n        lr.fit(X_train, y_train)\n        \n        confirm.loc[:, 'Fold_{}'.format(num)] = lr.predict(estimate_date)\n        prediction = lr.predict(X_test)\n        #auc score\n        auc_score = mean_absolute_error(y_test, prediction)\n        auc_score_total += auc_score\n        print(\"MAE score: \", auc_score)\n    print(auc_score_total\/5)\n    auc_score_total = 0\n    \n    #submit\n    submit = confirm.sum(axis=1) \/ N\n    print(estimate_date[0])\n    submission = pd.DataFrame({'Date': estimate_date[0].tolist(),\n                           'Number of cases': submit})\n    submission.to_csv(\"..\/..\/kaggle\/working\/Confirm_prediction.csv\", index=False)\n    print(submission.head())\n    \n    #plots\n    plt.scatter(estimate_date[0].tolist(), submit,  color='black')\n    plt.plot(estimate_date[0].tolist(), submit, color='blue', linewidth=3)\n    plt.show()\n    \n    altogether_X = pd.concat([X,estimate_date], axis = 0 ) \n    altogether_y = pd.concat([y,submit], axis = 0 )\n    plt.scatter(altogether_X, altogether_y,  color='black')\n    plt.plot(altogether_X, altogether_y, color='blue', linewidth=3)\n    plt.show()","f4d73ea3":"#user_input = input('choose country')\n#user's choice\n#now default: choose last one, total\nuser_input = province_list[-1]\ntest_data = []\n#0 means 1\/22\/2020, 161 means 6\/30\/2020, 223 means 8\/31\/2020\nfor i in range(161,223):\n    test_data.append(i)\ntest_data = pd.DataFrame(test_data)\nlinear_regression(user_input, df_confirmed_Canada,test_data)","32cf5d7c":"df_covid19_Canada: total cases in Canada","440a89cd":"# DDQIC data analysis confirms\n## approximate comfirmed cases in Canada, linear regression\n### Jupyter notebook author: Tao Shan\n1. [prepare data](#1) \n2. [predicting model and submit solution](#2)","ba834f16":"<a id=\"2\"><\/a>\n2.predicting model and submit solution","0f021599":"<a id=\"1\"><\/a>\n1.prepare data","a6e6cdef":"From the above steps, last row in the dataframe is sum, calculate Canada's total daily disease","2426282d":"df_confirmed_Canada: every day cases in Canada's different provinces"}}