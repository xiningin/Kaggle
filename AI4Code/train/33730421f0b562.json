{"cell_type":{"a8b6bb52":"code","6f0fc284":"code","f0c9ae80":"code","2ece6bea":"code","df799e41":"code","6f2f8e40":"code","3025d38f":"code","1025f9ed":"code","1fd18383":"code","54eae0c4":"code","91647aa2":"code","eb33f966":"code","8e8c4dc3":"code","c5dc2009":"code","2ceb7c5f":"code","9d837689":"code","dac656ab":"code","af1d7fed":"code","42c7c22c":"code","f23aba13":"code","94c9819c":"code","5fa986ea":"code","f05226e8":"code","9f9c06b2":"code","5b3c26f8":"code","4db04ead":"code","ff287882":"code","baebb77a":"code","46b825f6":"code","6dddfc80":"code","2914e7a0":"code","486b587c":"code","64a5696b":"code","4f2db18a":"code","2e0685f5":"code","e555a553":"code","8ae40fc2":"code","4a3782f8":"code","5bc97094":"code","c039cdda":"code","e3a235af":"code","8d117829":"code","3249dd95":"code","e12afe91":"code","61fec3b8":"code","caea258b":"code","b34ac6d8":"code","3edcb58b":"code","3a0e3ce6":"code","ebe7b77c":"code","bd763d49":"code","86f870f6":"code","35413d85":"code","81d51578":"code","316e9cf2":"code","fdf7e687":"code","18a036d2":"code","255c1567":"code","a43e6ca6":"code","272da8d2":"code","93ecb982":"code","7eea4864":"code","444a3371":"code","335ffeb5":"code","5c334dec":"code","f2f8cb2c":"code","52a574fd":"code","6d363ef0":"code","03bbf82d":"code","832e9506":"code","1b2fac0e":"code","a5fd92ce":"code","a0936fd2":"markdown","04f70861":"markdown","427ad06f":"markdown","ce6b92c9":"markdown","5edf6daa":"markdown","a2a72789":"markdown","1062d2e8":"markdown","5c1d8e53":"markdown","fb99bf94":"markdown","73b4cae1":"markdown","4fd746a5":"markdown","7e45a4aa":"markdown","d5559eaf":"markdown"},"source":{"a8b6bb52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f0fc284":"import pandas as pd\nimport numpy as np\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.head()","f0c9ae80":"train.shape","2ece6bea":"test.shape","df799e41":"#check for the columns of dataset\ntrain.columns","6f2f8e40":"a = train.isna().sum()","3025d38f":"df = pd.DataFrame(a,columns=['value'])\ndf.head()","1025f9ed":"df[df['value']>750]","1fd18383":"train = train.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)\ntest = test.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)","54eae0c4":"df[df['value']==0].count()","91647aa2":"#checking columns between 100 and 750 null values\ndf[(df['value']<750) & (df['value']>100)]","eb33f966":"train['LotFrontage'].dtypes","8e8c4dc3":"train['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean())","c5dc2009":"train['FireplaceQu'].dtypes","2ceb7c5f":"train['FireplaceQu'].unique()","9d837689":"train = train.replace({'TA':1,'Gd':2,'Fa':3,'Ex':4,'Po':5})","dac656ab":"#replace all the null values with mode\ntrain['FireplaceQu'].mode()","af1d7fed":"train['FireplaceQu'] = train['FireplaceQu'].fillna(2.0)","42c7c22c":"df[(df['value']<=100) & (df['value']>50)]","f23aba13":"train['GarageType'].unique()","94c9819c":"train = train.replace({'Attchd':1, 'Detchd':2, 'BuiltIn':3, 'CarPort':4, 'Basment':5, '2Types':6})","5fa986ea":"train['GarageType'].mode()","f05226e8":"train['GarageType'] = train['GarageType'].fillna(1)","9f9c06b2":"train['GarageFinish'].unique()","5b3c26f8":"train = train.replace({'RFn':1, 'Unf':2, 'Fin':3})","4db04ead":"train['GarageFinish'].mode()","ff287882":"train['GarageFinish'] = train['GarageFinish'].fillna(2.0)","baebb77a":"train['GarageYrBlt'].dtypes","46b825f6":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())","6dddfc80":"train['GarageQual'].unique()","2914e7a0":"train['GarageCond'].unique()","486b587c":"train['GarageQual'].mode()","64a5696b":"train['GarageQual'] = train['GarageQual'].fillna(1.0)\n","4f2db18a":"train['GarageCond'].mode()","2e0685f5":"train['GarageCond'] = train['GarageCond'].fillna(1.0)","e555a553":"df[(df['value']<=50) & (df['value']>25)]","8ae40fc2":"train['BsmtQual'].mode()","4a3782f8":"train['BsmtQual'] = train['BsmtQual'].fillna(1)","5bc97094":"train['BsmtCond'].mode()","c039cdda":"train['BsmtCond'] = train['BsmtCond'].fillna(1)","e3a235af":"train['BsmtExposure'].unique()","8d117829":"train = train.replace({'No':1 ,'Mn':3, 'Av':4})","3249dd95":"train['BsmtExposure'].mode()","e12afe91":"train['BsmtExposure'] = train['BsmtExposure'].fillna(1)","61fec3b8":"train['BsmtFinType1'].unique()","caea258b":"train = train.replace({'GLQ':1, 'ALQ':2, 'Unf':3, 'Rec':4, 'BLQ':5, 'LwQ':6})","b34ac6d8":"train['BsmtFinType1'].mode()","3edcb58b":"train['BsmtFinType1'] = train['BsmtFinType1'].fillna(2)","3a0e3ce6":"train['BsmtFinType2'].mode()","ebe7b77c":"train['BsmtFinType2'] = train['BsmtFinType2'].fillna(2.0)","bd763d49":"df[(df['value']<=25) & (df['value']>0)]","86f870f6":"train['MasVnrType'].unique()","35413d85":"train = train.replace({'BrkFace':1, 'None':2, 'Stone':3, 'BrkCmn':4})","81d51578":"train['MasVnrType'].mode()","316e9cf2":"train['MasVnrType'] = train['MasVnrType'].fillna(2)","fdf7e687":"train['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())","18a036d2":"train['Electrical'].unique()","255c1567":"train = train.replace({'SBrkr':1, 'FuseF':2, 'FuseA':3, 'FuseP':4, 'Mix':5})","a43e6ca6":"train['Electrical'].mode()","272da8d2":"train['Electrical'] = train['Electrical'].fillna(1)","93ecb982":"train.select_dtypes(include ='object').columns","7eea4864":"pd.concat([train['MSZoning'],train['Street'],train['LotShape'],train['LandContour'],train['Utilities'],train['LotConfig'],\n           train['LandSlope'],train['Neighborhood'],train['Condition1'],train['Condition2'],train['BldgType'],\n           train['HouseStyle'],train['RoofStyle'],train['RoofMatl'],train['Exterior1st'],train['Exterior2nd'],\n           train['Foundation'],train['Heating'],train['CentralAir'],train['Functional'],train['GarageFinish'],\n           train['PavedDrive'],train['SaleType'],train['SaleCondition']]).unique()","444a3371":"train = train.replace({'RL':1, 'RM':2, 'C (all)':3, 'FV':4, 'RH':5, 'Pave':6, 'Grvl':7, 'Reg':8, 'IR1':9,'IR2':10, 'IR3':11,\n                       'Lvl':12, 'Bnk':13, 'Low':14, 'HLS':15, 'AllPub':16, 'NoSeWa':17,'Inside':18, 'FR2':19, 'Corner':20,\n                       'CulDSac':21, 'FR3':22, 'Gtl':23, 'Mod':24, 'Sev':25,'CollgCr':26, 'Veenker':27, 'Crawfor':28,\n                       'NoRidge':29, 'Mitchel':30, 'Somerst':31,'NWAmes':32, 'OldTown':33, 'BrkSide':34, 'Sawyer':35,\n                       'NridgHt':36, 'NAmes':37,'SawyerW':38, 'IDOTRR':39, 'MeadowV':40, 'Edwards':41, 'Timber':42,\n                       'Gilbert':43,'StoneBr':44, 'ClearCr':45, 'NPkVill':46, 'Blmngtn':47, 'BrDale':48, 'SWISU':49,\n                       'Blueste':50, 'Norm':51, 'Feedr':52, 'PosN':53, 'Artery':54, 'RRAe':55, 'RRNn':56,'RRAn':57,\n                       'PosA':58, 'RRNe':59, '1Fam':60, '2fmCon':61, 'Duplex':62, 'TwnhsE':63,'Twnhs':64, '2Story':65,\n                       '1Story':66, '1.5Fin':67, '1.5Unf':68, 'SFoyer':69, 'SLvl':70,'2.5Unf':71, '2.5Fin':72, 'Gable':73,\n                       'Hip':74, 'Gambrel':75, 'Mansard':76, 'Flat':77,'Shed':78, 'CompShg':79, 'WdShngl':80, 'Metal':81,\n                       'WdShake':82, 'Membran':83,'Tar&Grv':84, 'Roll':85, 'ClyTile':86, 'VinylSd':87, 'MetalSd':88,\n                       'Wd Sdng':89,'HdBoard':90,'WdShing':91, 'CemntBd':92, 'Plywood':93, 'AsbShng':94, 'Stucco':95,\n                       'BrkComm':96, 'AsphShn':97,'ImStucc':98, 'CBlock':99, 'Wd Shng':100, 'CmentBd':101,'Brk Cmn':102,\n                       'Other':103, 'PConc':104, 'BrkTil':105, 'Wood':106, 'Slab':107, 'GasA':108,'GasW':109, 'Grav':110,\n                       'Wall':111, 'OthW':112, 'Floor':113, 'Y':114, 'N':115, 'Typ':116, 'Min1':117,'Maj1':118, 'Min2':119,\n                       'Maj2':120,'P':121, 'WD':122, 'New':123, 'COD':124, 'ConLD':125,'ConLI':126, 'CWD':127, 'ConLw':128,\n                       'Con':129, 'Oth':130, 'Normal':131, 'Abnorml':132,'Partial':133, 'AdjLand':134, 'Alloca':135, 'Family':136})","335ffeb5":"train.select_dtypes(include ='object').columns","5c334dec":"# to check if there are any null values left in the dataset\nb = train.isna().sum()\nb = pd.DataFrame(b,columns=['value'])\nb[b['value']!=0]","f2f8cb2c":"X = train.drop('SalePrice',axis=1)\nY = train['SalePrice']\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nreg = LinearRegression()\nreg.fit(X,Y)\nY_pred = reg.predict(X)\nprint(r2_score(Y,Y_pred))\nprint(mean_squared_error(Y,Y_pred)**(1\/2))","52a574fd":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(X,Y)\nY_predRF = regressor.predict(X)\nprint(r2_score(Y,Y_predRF))\nprint(mean_squared_error(Y,Y_predRF)**(1\/2))","6d363ef0":"train_norm = (train - train.mean()) \/ (train.max() - train.min())\nX_norm = train_norm.drop('SalePrice',axis=1)\nY_norm = train['SalePrice']\nreg.fit(X_norm,Y_norm)\nY_pred_norm = reg.predict(X_norm)\nprint(r2_score(Y_norm,Y_pred_norm))\nprint(mean_squared_error(Y_norm,Y_pred_norm)**(1\/2))","03bbf82d":"regressor.fit(X_norm,Y_norm)\nY_pred_normRF = regressor.predict(X_norm)\nprint(r2_score(Y_norm,Y_pred_normRF))\nprint(mean_squared_error(Y_norm,Y_pred_normRF)**(1\/2))","832e9506":"from sklearn.preprocessing import StandardScaler \nsc = StandardScaler() \nX_train_SC = sc.fit_transform(train) ","1b2fac0e":"from sklearn.decomposition import PCA \npca = PCA(n_components = 5) \nX_train_PCA = pca.fit_transform(X_train_SC)","a5fd92ce":"regressor.fit(X_train_PCA,Y)\nY_pred_norm_PCARF = regressor.predict(X_train_PCA)\nprint(r2_score(Y,Y_pred_norm_PCARF))\nprint(mean_squared_error(Y,Y_pred_norm_PCARF)**(1\/2))","a0936fd2":"Now, let's again apply the same logic","04f70861":"Now, let's check how many columns have got more than 50% of null values and we will eliminate those columns","427ad06f":"Now that we have converted all our data into integer and float it's time to perform regression","ce6b92c9":"Now that we have removed all the null values let's check for how many object data types are still there in the dataset","5edf6daa":"Let's now preprocess the data and see if there is any improvement in the R2 score or not.","a2a72789":"This shows that 62 columns doesn't have any null value.","1062d2e8":"It is clearly visible that we have got 81 columns in the dataset so, we need to handle this data carefully.","5c1d8e53":"As it is of object type so let's give different object a number.","fb99bf94":"Let's concat all the columns containing object dtype together and find out the unique elements and then we'll assign numbers accordingly","73b4cae1":"Now, Let's check for the shape of both the dataset","4fd746a5":"As it is of float type so, let's fill all the null values with the mean.","7e45a4aa":"R2 score is almost the same using normalization. now, let's Dimensionality reduction(PCA) to see if we can improve our R2 score or not.","d5559eaf":"Now, let's check null values in the dataset"}}