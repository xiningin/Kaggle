{"cell_type":{"de10a8ce":"code","34489ec5":"code","157d4ac2":"code","2df72429":"code","9e14c778":"code","0305f67a":"code","ff21a8e6":"code","698316a7":"code","2541f9f1":"code","304a597b":"code","f181b558":"code","2313b29b":"code","c1e81e88":"code","ec7bb4ae":"code","47d122ff":"code","5692b579":"code","5ff4dcf6":"code","cb24420a":"code","00c6e1a6":"code","7fc37970":"code","b7526594":"code","04404dbc":"code","06baa895":"code","dce99036":"code","b4661542":"code","29f4a1af":"code","a19d0167":"code","0e19d0f5":"code","ebba5b35":"code","f80b4948":"code","a5c9bffa":"code","adbbfe78":"code","aaec8a37":"code","50d3ce43":"code","b20aa828":"code","2c9c2549":"code","7a0c28bb":"code","b8c2afca":"code","e9fb79ed":"code","13d99008":"code","41c7bd1e":"code","224e1acd":"code","98f6ff58":"code","2663a170":"code","ec5647d2":"code","fd3d6757":"code","d255c580":"code","23faa7f2":"code","f2487c21":"code","41e0828f":"code","5a06d2fe":"code","17175cc8":"code","0bab3d32":"code","863c3768":"code","78b0fb11":"code","3955d5ee":"code","916f2c38":"code","d1c8b44a":"code","6e16422c":"code","253771ce":"code","e140bfd1":"code","7dc60fda":"code","fce5ac28":"code","55c67177":"code","9777fe49":"code","33cfa81a":"code","e228ffc4":"code","b32db39d":"code","ae584bdc":"code","667f057e":"code","3bb6802b":"code","9af70c87":"code","0dce08cc":"code","6da8ebbf":"code","a321e111":"code","4d027434":"markdown","05eb3a73":"markdown","0996916a":"markdown","9360d079":"markdown","ed49f533":"markdown","b3f158ea":"markdown","df601cd4":"markdown","8180503e":"markdown","e8443f35":"markdown","154ba03b":"markdown","2d873e94":"markdown","6d84fdb2":"markdown","9f21395e":"markdown","2e790972":"markdown","1cb64d6a":"markdown","be8afa9b":"markdown","5dff9460":"markdown","5ad18097":"markdown","0684aaba":"markdown"},"source":{"de10a8ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34489ec5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","157d4ac2":"dataset = pd.read_csv('..\/input\/insurance\/insurance.csv')","2df72429":"#Viewing the data\ndataset.head()","9e14c778":"#Information about the data\ndataset.info()","0305f67a":"#Check Null values\ndataset.isnull().sum()","ff21a8e6":"# Create matrices of independent and dependent features\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values","698316a7":"X\n","2541f9f1":"y","304a597b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder","f181b558":"#Perform One Hot Encoding\ncolumnTransformer = ColumnTransformer([('sex_encoder',OneHotEncoder(),[1])], remainder='passthrough')\nX = columnTransformer.fit_transform(X)","2313b29b":"X\n","c1e81e88":"#Avoid Dummy Var Trap\nX = X[:,1:] #Keep only 1 sex column","ec7bb4ae":"X\n","47d122ff":"#Perform One Hot Encoding\ncolumnTransformer = ColumnTransformer([('smoker_encoder',OneHotEncoder(),[4])], remainder='passthrough')\nX = columnTransformer.fit_transform(X)","5692b579":"X","5ff4dcf6":"#Avoid Dummy Var Trap\nX = X[:,1:] #Keep only 1 smoker column","cb24420a":"X[0].size","00c6e1a6":"X[0]","7fc37970":"#Perform One Hot Encoding\ncolumnTransformer = ColumnTransformer([('region_encoder',OneHotEncoder(),[5])], remainder='passthrough')\nX = columnTransformer.fit_transform(X)","b7526594":"#Avoid Dummy Var Trap\nX = X[:,1:] \n","04404dbc":"X[0].size","06baa895":"import statsmodels.api as sm","dce99036":"X = np.append(arr = np.ones((1338,1)).astype(int),values = X, axis = 1)","b4661542":"X[0]","29f4a1af":"X = np.array(X,dtype=float)\nregressor_OLS = sm.OLS(y,X).fit()\nregressor_OLS.summary()","a19d0167":"X = np.delete(X,3,1)","0e19d0f5":"X = np.array(X,dtype=float)\nregressor_OLS = sm.OLS(y,X).fit()\nregressor_OLS.summary()","ebba5b35":"X = np.delete(X,4,1)","f80b4948":"X\n","a5c9bffa":"X = np.array(X,dtype=float)\nregressor_OLS = sm.OLS(y,X).fit()\nregressor_OLS.summary()","adbbfe78":"X = np.delete(X,3,1)","aaec8a37":"X","50d3ce43":"X = np.array(X,dtype=float)\nregressor_OLS = sm.OLS(y,X).fit()\nregressor_OLS.summary()","b20aa828":"from sklearn.model_selection import train_test_split ","2c9c2549":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.25, random_state = 0)","7a0c28bb":"X_train","b8c2afca":"X_test","e9fb79ed":"y_train","13d99008":"y_test","41c7bd1e":"from sklearn.preprocessing import StandardScaler","224e1acd":"sc_X = StandardScaler()","98f6ff58":"X_train = sc_X.fit_transform(X_train)","2663a170":"X_train","ec5647d2":"X_test = sc_X.transform(X_test)","fd3d6757":"X_test","d255c580":"sc_y = StandardScaler()","23faa7f2":"y_train = y_train.reshape(-1,1)\ny_train = sc_y.fit_transform(y_train)","f2487c21":"y_train","41e0828f":"y_test = y_test.reshape(-1,1)\ny_test = sc_y.transform(y_test)","5a06d2fe":"y_test","17175cc8":"from sklearn.linear_model import LinearRegression","0bab3d32":"linear_regressor = LinearRegression()","863c3768":"linear_regressor.fit(X_train,y_train)","78b0fb11":"y_linear_pred = linear_regressor.predict(X_test)","3955d5ee":"y_linear_pred","916f2c38":"from sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","d1c8b44a":"r2_score(y_test, y_linear_pred)","6e16422c":"mean_squared_error(y_test,y_linear_pred)","253771ce":"from sklearn.svm import SVR","e140bfd1":"svr_regressor = SVR(kernel='linear')","7dc60fda":"svr_regressor.fit(X_train,y_train.ravel())","fce5ac28":"y_svr_pred = svr_regressor.predict(X_test)","55c67177":"y_svr_pred","9777fe49":"r2_score(y_test, y_svr_pred)","33cfa81a":"mean_squared_error(y_test,y_svr_pred)","e228ffc4":"from sklearn.ensemble import RandomForestRegressor","b32db39d":"rf_regressor = RandomForestRegressor(n_estimators = 300, random_state = 0) ","ae584bdc":"rf_regressor.fit(X_train,y_train)","667f057e":"y_rf_pred = rf_regressor.predict(X_test)","3bb6802b":"y_rf_pred","9af70c87":"r2_score(y_test, y_rf_pred)","0dce08cc":"mean_squared_error(y_test,y_rf_pred)","6da8ebbf":"#Perform One Hot Encoding\ncolumnTransformer = ColumnTransformer([('smoker_encoder',OneHotEncoder(),[4])], remainder='passthrough')\nX = columnTransformer.fit_transform(X)","a321e111":"#One Hot Encode the col","4d027434":"**New OLS Values**","05eb3a73":"# **Elimination 3**\n**We see x3 is max & x3 > SL**\nHence, we remove x3 and repeat the proces","0996916a":"**Region**","9360d079":"**Sex**","ed49f533":"# **Elimination 2**\n**We see x5 is max & x5 > SL Hence, we remove x3 and repeat the process\nHowever pvalue(x5) is not much greater than SL\nHence, we need to see its impact on the Adj R-squared value**","b3f158ea":"# **Elimination 1**\n**We see x3 is max & x3 > SL**\nHence, we remove x3 and repeat the process","df601cd4":"**Smoker**","8180503e":"# **DATA PREPROCESSING**","e8443f35":"# **BACKWARD ELIMINATION**\n\nWe will select the independent features that are essential for prediction of dependent variable y\nThis will involve looking at p-values and the Adj R-squared values\nSL = 0.05","154ba03b":"**Sex**","2d873e94":"**New OLS Values**","6d84fdb2":"**New OLS Vaues**","9f21395e":"**Initial OLS values**","2e790972":"# **FEATURE SCALING**","1cb64d6a":"# **LINEAR REGRESSION**","be8afa9b":"**We need to cater for the constant varibale of the equation**\ny = mx + c\n\nSo here we append a constant b = 1 to c so that the value is preserved and impacts the predicted value","5dff9460":"# **RANDOM FOREST**","5ad18097":"# **TEST TRAIN SPLIT**","0684aaba":"# **SVR**"}}