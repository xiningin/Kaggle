{"cell_type":{"6aee9b3a":"code","0d6640ba":"code","ce20d009":"code","0688e78d":"code","e2b7bc31":"code","83bf4035":"code","39ae9a21":"code","3cfdb550":"code","9d8faa57":"code","dcbaac0e":"code","69df2043":"code","088c9f35":"code","76b7e3c7":"code","34ffa368":"code","292b2e42":"code","c5a1d41c":"code","0a427119":"code","bbeb93bb":"code","34cc7138":"code","48fa69ed":"code","91cc1bc5":"code","e43e8dae":"code","4e290931":"code","7924e66d":"markdown","ac012c39":"markdown","6f16430c":"markdown","d10c9820":"markdown"},"source":{"6aee9b3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0d6640ba":"import json, sys, random\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.layers import Dropout, Conv2D, MaxPooling2D\nfrom keras.layers import AveragePooling2D, Flatten, Dense, Activation\nfrom keras.layers import BatchNormalization\n\nfrom keras import regularizers\nfrom keras import optimizers\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom keras.utils import to_categorical","ce20d009":"BATCH_SIZE = 64\nEPOCH_SIZE = 50","0688e78d":"# download dataset from json object\nf = open(r'..\/input\/ships-in-satellite-imagery\/shipsnet.json')\ndataset = json.load(f)\nf.close()\n\ninput_data = np.array(dataset['data']).astype('uint8')\nlabels_data = np.array(dataset['labels']).astype('uint8')","e2b7bc31":"n_spectrum = 3 # color chanel (RGB)\nweight = 80\nheight = 80\n\nx_reshaped = input_data.reshape([-1, n_spectrum, weight, height]).transpose([0,2,3,1])\nx_reshaped.shape","83bf4035":"y_reshaped = to_categorical(labels_data, num_classes=2)\n\ny_reshaped.shape","39ae9a21":"# Create train set\nx_train, x_test, y_train, y_test = train_test_split(\n    x_reshaped,\n    y_reshaped,\n    test_size=.45, \n    random_state=42)\n\n# Create validation and test sets\nx_val, x_test, y_val, y_test = train_test_split(\n    x_test, \n    y_test,\n    test_size=.20, \n    random_state=42)\n\nprint('Train:',x_train.shape, y_train.shape)\nprint('Test:', x_test.shape, y_test.shape)\nprint('Validation:', x_val.shape, y_val.shape)","3cfdb550":"y_val.shape","9d8faa57":"print(x_train.shape)","dcbaac0e":"from keras.backend import sigmoid\ndef swish(x, beta = 1):\n    return (x * sigmoid(beta * x))\n\nfrom keras.utils.generic_utils import get_custom_objects\nfrom keras.layers import Activation\nget_custom_objects().update({'swish': Activation(swish)})","69df2043":"from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D","088c9f35":"model = Sequential()\nmodel.add(Conv2D(64, 2, input_shape=(80,80,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(5, 5)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(32, 3, input_shape=(80,80,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(32, 3, input_shape=(80,80,3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.summary()\n\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nhistorycnn= model.fit(\n    x_train, # training data\n  y_train, # training targets\n  validation_data=(x_val, y_val),\n  epochs=EPOCH_SIZE,\n  batch_size=BATCH_SIZE,\n  verbose = 1\n)","76b7e3c7":"input_A = keras.layers.Input(shape=[3],name = 'wide_input')\n\ninput_B = keras.layers.Input(shape=(80, 80, 3),name = 'deep_input')\nx = keras.layers.Conv2D(64, 3, activation=\"relu\")(input_B)\nx = keras.layers.MaxPooling2D(5)(x)\nx = keras.layers.Dropout(0.25)(x)\nx = keras.layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = keras.layers.MaxPooling2D(3)(x)\nx = keras.layers.Dropout(0.25)(x)\nx = keras.layers.Conv2D(32, 3, activation=\"relu\")(x)\nx = keras.layers.MaxPooling2D(2)(x)\nx = keras.layers.Dropout(0.25)(x)\nx = keras.layers.Flatten()(x)\n# Fully connected 1\nhidden0 = keras.layers.Dense(200, activation='relu')(x)\nhidden0 = keras.layers.Dropout(0.25)(hidden0)\nhidden1 = keras.layers.Dense(100, activation='relu')(hidden0)\nhidden1 = keras.layers.Dropout(0.25)(hidden1)\nhidden2 = keras.layers.Dense(100, activation='relu')(hidden1)\nhidden2 = keras.layers.Dropout(0.25)(hidden2)\nhidden3 = keras.layers.Dense(50, activation='relu')(hidden2)\nhidden3 = keras.layers.Dropout(0.25)(hidden3)\n\nconcat = keras.layers.concatenate([hidden3,input_A])\nconcat = keras.layers.Dropout(0.2)(concat)\noutput = keras.layers.Dense(2, activation='softmax')(concat)\n\nmodelmerged = keras.models.Model(inputs=[input_A,input_B],outputs = [output])\n\nkeras.utils.plot_model(modelmerged,'multi.png',show_shapes=True)\n\nmodelmerged.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nmodelmerged.summary()\n","34ffa368":"keras.utils.plot_model(modelmerged,'multi.png',show_shapes=True)","292b2e42":"\nx_train_mean = x_train.mean(axis=1).mean(axis=1)\nx_test_mean = x_test.mean(axis=1).mean(axis=1)\nx_val_mean = x_val.mean(axis=1).mean(axis=1)\n","c5a1d41c":"from sklearn.preprocessing import normalize\nx_train_mean = normalize(x_train_mean, axis=1, norm='l1')\nx_test_mean = normalize(x_test_mean, axis=1, norm='l1')\nx_val_mean = normalize(x_val_mean, axis=1, norm='l1')\n","0a427119":"data_trainM = [x_train_mean, x_train]\ndata_valM = [x_val_mean, x_val]","bbeb93bb":"\nhistory = modelmerged.fit(\n          data_trainM,\n          y_train,\n          epochs = EPOCH_SIZE,\n          batch_size=BATCH_SIZE,            \n          validation_data = (data_valM,y_val),\n          verbose=1)\n","34cc7138":"plt.figure(figsize=(10,5))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Wide and Deep Learning model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Wide and Deep Learning model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n\nplt.figure(figsize=(10,5))\nplt.plot(historycnn.history['accuracy'])\nplt.plot(historycnn.history['val_accuracy'])\nplt.title('Deep Learning model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\nplt.plot(historycnn.history['loss'])\nplt.plot(historycnn.history['val_loss'])\nplt.title('Deep Learning model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n\nplt.figure(figsize=(12,4))\nplt.plot(history.history['accuracy'])\nplt.plot(historycnn.history['accuracy'])\nplt.title('Wide versus Deep Learning model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['WideAcc', 'DeepAcc'], loc='upper left')\nplt.show()\n\n","48fa69ed":"x_test.shape","91cc1bc5":"\npredictions = model.predict_classes(x_test)\n","e43e8dae":"fig=plt.figure(figsize=(40, 40))\n\nrandom.randint(0,len(x_test))\n# show each channel\nfor i in range(0,72):\n    fig.add_subplot(10, 10, i+1)\n    fig.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=.2, hspace=.2)\n    plt.imshow(x_test[i,:,:,:])\n    plt.title('input:'+str(y_test.argmax(axis = 1)[i])+'\\npred:'+str(predictions[i]), fontsize=18, y=.15,color='w')\n    plt.axis('off')\nplt.show()\n","4e290931":"fig=plt.figure(figsize=(30, 30))\nfor i in range(0,72):\n    fig.subplot(10, 10, i+1)\n    fig.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=.2, hspace=.2)\n    if((predictions[i] == 1 and labels_test.argmax(axis = 1)[i] == 0) or (predictions[i] == 0 and labels_test.argmax(axis = 1)[i] == 1)):\n        plt.imshow(x_test[i,:,:,:])\n\n","7924e66d":"The dataset contains 4000 images. \nEach image is represented as a vector of length 19200 elements, containing 3 layers (R,G & B) and 80x80 of weight and height:","ac012c39":"Splitting the dataset into Train, Validation and Test:","6f16430c":"Download and study the dataset","d10c9820":"Load necessary packages\/libraries"}}