{"cell_type":{"c9cba878":"code","ac23f5be":"code","a5b31978":"code","1cce435d":"code","029a25ac":"code","51bf4a7b":"code","61b6d5cb":"code","55a3e149":"code","8c6c314f":"code","9e756ffa":"code","083235b1":"code","3f514e1f":"code","53dd83c3":"code","5636cc01":"code","ff759bb2":"code","ce14df8d":"code","f6f6404b":"code","8f343ff7":"code","70b59460":"code","8c329af8":"code","0f097dea":"code","493df10b":"code","d8ec7f26":"markdown","27c06534":"markdown","c523ab48":"markdown","87acdc65":"markdown","e0a38ead":"markdown"},"source":{"c9cba878":"%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","ac23f5be":"synced_df = pd.read_csv('..\/input\/squat_example.csv')","a5b31978":"all_acc = synced_df[['ML1_BELTPACK_ACCEL_X', 'ML1_BELTPACK_ACCEL_Y','ML1_BELTPACK_ACCEL_Z']].values\nacc_scalar = 9.8\/np.nanmedian(np.sqrt(np.sum(np.square(all_acc), 1)))\ntrans_array = np.array([[-95,   7, -28],[-29, -28,  91],[ -1,  95,  29]])\/100.0\ntrans_array[:, 1] *=-1\n#trans_array = np.eye(3)\ntrans_bp_imu = np.matmul(all_acc*acc_scalar, trans_array)\n# replace array\nsynced_df['ML1_BELTPACK_ACCEL_X'] = trans_bp_imu[:, 2]\nsynced_df['ML1_BELTPACK_ACCEL_Y'] = trans_bp_imu[:, 1]\nsynced_df['ML1_BELTPACK_ACCEL_Z'] = trans_bp_imu[:, 0]","1cce435d":"synced_df.describe()","029a25ac":"a_mass = 66\/2 #kg per foot\nfor i in range(1, 7):\n    for k in 'XYZ':\n        synced_df['FORCE_ACCEL.A{}{}'.format(i, k)] = synced_df['FORCE_FORCE.F{}{}'.format(i, k)]\/a_mass","51bf4a7b":"synced_df.describe().T","61b6d5cb":"fig, m_axs = plt.subplots(3, 1, figsize=(15, 10))\nfor c_ax, ax_name in zip(m_axs, 'XYZ'):\n    c_ax.plot(synced_df['ML1_TIME'], 1000*synced_df['ML1_TRANSLATION_{}'.format(ax_name)], '-.' ,label='ML Headpose', lw=2)\n    c_ax.plot(synced_df['ML1_TIME'], 1000*synced_df['ML1_TOTEM_POSE_TRANSLATION_{}'.format(ax_name)], '-.' ,label='ML Totem', lw=2)\n    c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_HEADPOSE_{}'.format(ax_name)], label='VICON Googles')\n    c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_BELT_{}'.format(ax_name)], label='VICON Beltpack')\n    \n    c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_FHR_{}'.format(ax_name)], label='VICON Knee')\n    c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_FOOT_LF_{}'.format(ax_name)], label='VICON Foot')\n    c_ax.legend()\n    c_ax.set_ylabel('{} (mm)'.format(ax_name))","55a3e149":"fig, m_axs = plt.subplots(6, 1, figsize=(40, 20))\nfor c_ax, var_name in zip(m_axs, [\n    'ML1_BELTPACK_ACCEL_',  #beltpack\n    'ML1_ACCEL_', # headset\n    'ML1_BELTPACK_GYR_',\n    'ML1_OMEGA_'\n    ]+\n     ['FORCE_ACCEL.A{}'.format(i) for i in [2, 6]]):\n    for ax_name in 'XYZ':\n        c_ax.plot(synced_df['ML1_TIME'], synced_df['{}{}'.format(var_name, ax_name)], label=ax_name)\n    c_ax.legend()\n    c_ax.set_ylabel(var_name)","8c6c314f":"fig, m_axs = plt.subplots(3, 1, figsize=(15, 10))\nfor c_ax, ax_name in zip(m_axs, 'XYZ'):\n    for var_name in ['ML1_BELTPACK_ACCEL_', 'ML1_ACCEL_']+['FORCE_ACCEL.A{}'.format(i) for i in [2, 6]]:\n                     \n        c_ax.plot(synced_df['ML1_TIME'], synced_df['{}{}'.format(var_name,ax_name)]-synced_df['{}{}'.format(var_name,ax_name)].mean(), '-' ,label=var_name, lw=2)\n    c_ax.legend()\n    c_ax.set_ylabel('{}'.format(ax_name))","9e756ffa":"fig, (c_ax) = plt.subplots(1, 1, figsize=(20, 10))          \nc_ax.plot(synced_df['ML1_TIME'], synced_df['ML1_BELTPACK_ACCEL_X'], '-' ,label='Beltpack IMU')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['FORCE_ACCEL.A2Z'], '-' ,label='Force Plate 2')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['FORCE_ACCEL.A6Z'], '-' ,label='Force Plate 6')\nc_ax.legend()\nc_ax.set_ylabel('Vertical Axis')","083235b1":"fig, (c_ax) = plt.subplots(1, 1, figsize=(35, 10))          \nfor c_format_tag in ['ML1_BELTPACK_ACCEL_{}', 'ML1_ACCEL_{}', 'FORCE_ACCEL.A2{}', 'FORCE_ACCEL.A6{}']:\n    t_acc = np.sqrt(np.sum(np.square(np.stack([synced_df[c_format_tag.format(x)].values for x in 'XYZ'], -1)), -1))\n    c_ax.plot(synced_df['ML1_TIME'], t_acc, '-' ,label=c_format_tag.replace('{}','').replace('_',' '))\nc_ax.legend()\nc_ax.set_ylabel('Total Acceleration')","3f514e1f":"fig, (c_ax) = plt.subplots(1, 1, figsize=(20, 10))          \nfor c_format_tag in ['ML1_BELTPACK_ACCEL_{}', 'ML1_ACCEL_{}', 'FORCE_ACCEL.A2{}', 'FORCE_ACCEL.A6{}']:\n    t_acc = np.sqrt(np.sum(np.square(np.stack([synced_df[c_format_tag.format(x)].values for x in 'XYZ'], -1)), -1))\n    synced_df[c_format_tag.format('total')] = t_acc\n    c_ax.plot(synced_df['ML1_TIME'].iloc[500:2500], t_acc[500:2500], '-' ,label=c_format_tag.replace('{}','').replace('_',' '))\nc_ax.legend()\nc_ax.set_ylabel('Total Acceleration')","53dd83c3":"from sklearn import linear_model\nfrom sklearn.metrics import r2_score\n\ndef corr_lm_plot(in_df, x_col, y_col):\n    X = in_df.dropna()[x_col].values.reshape(-1,1)\n    y = in_df.dropna()[y_col].values.reshape(-1,1)\n    regr = linear_model.LinearRegression()\n    regr.fit(X, y)\n    print(regr.coef_[0])\n    print(regr.intercept_)\n    r2 = r2_score(y, regr.predict(X))\n    print(r2)\n    g = sns.lmplot(x=x_col, y=y_col, data=in_df, aspect=1.0, scatter_kws={'s': 0.5})\n    props = dict(boxstyle='round', alpha=0.5,color=sns.color_palette()[0])\n    textstr = '$y={1:2.2f}x+{0:2.1f}$\\t$R^2={2:2.1%}%$'.format(regr.coef_[0][0], regr.intercept_[0], r2)\n    g.ax.text(0.7, 0.1, textstr, transform=g.ax.transAxes, fontsize=14, bbox=props)\ncorr_lm_plot(synced_df, 'FORCE_ACCEL.A6Z', 'ML1_ACCEL_X')","5636cc01":"corr_lm_plot(synced_df, 'FORCE_ACCEL.A6total', 'ML1_ACCEL_total')","ff759bb2":"corr_lm_plot(synced_df, 'FORCE_ACCEL.A6total', 'ML1_BELTPACK_ACCEL_total')","ce14df8d":"fig, (c_ax, d_ax) = plt.subplots(1, 2, figsize=(20, 10))          \nc_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_BELTPACK_ACCEL_Z'], '.-' ,label='Beltpack IMU')\nc_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_ACCEL_X'], '.-' ,label='Headset IMU')\nc_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['FORCE_ACCEL.A6Z'], '.-' ,label='Force Plate 6')\nc_ax.legend()\nc_ax.set_xlabel('Force Plate 2')\n\n\nd_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_BELTPACK_ACCEL_Z'], '.-' ,label='Beltpack IMU')\nd_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_ACCEL_X'], '.-' ,label='Headset IMU')\nd_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['FORCE_ACCEL.A2Z'], '.-' ,label='Force Plate 2')\nd_ax.legend()\nd_ax.set_xlabel('Force Plate 6')","f6f6404b":"fig, (c_ax, d_ax) = plt.subplots(1, 2, figsize=(20, 10))          \n\nc_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU', alpha=0.25)\nc_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['FORCE_ACCEL.A6Z'], '-' ,label='Force Plate 6')\n\n\nd_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU')\nd_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['FORCE_ACCEL.A2Z'], '-' ,label='Force Plate 2')\n\nfor ax_name in 'XYZ':\n    c_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_BELTPACK_ACCEL_{}'.format(ax_name)], '.' ,label=f'Beltpack IMU {ax_name}', alpha=0.25)\n    d_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_BELTPACK_ACCEL_{}'.format(ax_name)], '.' ,label=f'Beltpack IMU {ax_name}', alpha=0.25)\n    \nc_ax.legend()\nc_ax.set_xlabel('Force Plate 2')\nd_ax.legend()\nd_ax.set_xlabel('Force Plate 6')","8f343ff7":"fig, (c_ax) = plt.subplots(1, 1, figsize=(20, 10))          \nc_ax.plot(synced_df['ML1_TIME'], 10+0.5*synced_df['ML1_BELTPACK_ACCEL_Z'].shift(int(250*0.45)), '-' ,label='Beltpack IMU')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['FORCE_ACCEL.A2Z'], '-' ,label='Force Plate 2')\nc_ax.plot(synced_df['ML1_TIME'], synced_df['FORCE_ACCEL.A6Z'], '-' ,label='Force Plate 6')\nc_ax.legend()\nc_ax.set_ylabel('Vertical Axis')","70b59460":"fig, (c_ax, d_ax) = plt.subplots(1, 2, figsize=(20, 10))          \n\n#c_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU', alpha=0.25)\n#c_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['FORCE_ACCEL.A6Z'], '-' ,label='Force Plate 6')\n\n\n#d_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_ACCEL_X'], '-' ,label='Headset IMU')\n#d_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['FORCE_ACCEL.A2Z'], '-' ,label='Force Plate 2')\n\nfor ax_name in 'XYZ':\n    c_ax.plot(synced_df['FORCE_ACCEL.A2Z'], synced_df['ML1_BELTPACK_ACCEL_{}'.format(ax_name)].shift(int(250*0.45)), '.' ,label=f'Beltpack IMU {ax_name}', alpha=0.25)\n    d_ax.plot(synced_df['FORCE_ACCEL.A6Z'], synced_df['ML1_BELTPACK_ACCEL_{}'.format(ax_name)].shift(int(250*0.45)), '.' ,label=f'Beltpack IMU {ax_name}', alpha=0.25)\n    \nc_ax.legend()\nc_ax.set_xlabel('Force Plate 2')\nd_ax.legend()\nd_ax.set_xlabel('Force Plate 6')","8c329af8":"from matplotlib.animation import FuncAnimation\nfig, m_axs = plt.subplots(2, 3, figsize=(20, 10))\ndef draw_points(c_rows, style='.', label=False, alpha=1.0):\n    [c_line.remove() \n   for c_ax in m_axs.flatten() \n   for c_line in c_ax.get_lines() \n   if c_line.get_label().startswith('_')];\n    for (xy_ax, xz_ax), c_prefix in zip(m_axs.T, \n                                        ['FORCE_ACCEL.A6{}', 'ML1_ACCEL_{}', 'ML1_BELTPACK_ACCEL_{}']):\n        xy_ax.set_title(c_prefix.format(''))\n        xy_ax.plot(c_rows[c_prefix.format('X')].values,\n                  c_rows[c_prefix.format('Y')].values,\n                   style,\n                   alpha=alpha,\n                   label=c_prefix if label else None\n                  )\n        xy_ax.set_xlabel('X')\n        xy_ax.set_ylabel('Y')\n        xz_ax.plot(c_rows[c_prefix.format('X')].values,\n                  c_rows[c_prefix.format('Z')].values,\n                   style,\n                   alpha=alpha,\n                   label=c_prefix if label else None\n                  )\n        xz_ax.set_xlabel('X')\n        xz_ax.set_ylabel('Z')\ndraw_points(synced_df, '-', label=True, alpha=0.25)\nout_anim = FuncAnimation(fig, func=draw_points, frames=[c_rows for _, c_rows in synced_df.groupby(synced_df.index\/\/125)])","0f097dea":"from IPython.display import HTML\n#HTML(out_anim.to_jshtml(fps=3))","493df10b":"out_anim.save('imu_vs_force_plate.gif', bitrate=8000, fps=8)","d8ec7f26":"## Positions (Headpose and VICON)","27c06534":"## Preprocess Accelerometer Data","c523ab48":"## Preprocess Force Plate\nDivide by mass","87acdc65":"# Remove 0.5s delay from Beltpack","e0a38ead":"## Acceleration and Force Plates\nWe show the IMU data as ML1_ACCEL_ and the Gyroscope data as ML1_OMEGA_"}}