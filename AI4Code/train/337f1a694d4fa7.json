{"cell_type":{"c933c74e":"code","fda2dab1":"code","7e2e0266":"code","b06008c0":"code","20b75314":"code","43fdf056":"code","5d5b3575":"code","6a057279":"code","6b5bcf72":"code","ec0b022c":"code","1ca42f24":"code","a1f687b4":"code","e253ccf6":"code","2f841084":"code","5c873d51":"code","ac2d872a":"code","e209b718":"code","6c08f801":"code","6aac2852":"code","d15b5568":"code","37057273":"code","f87167c3":"code","627a3b78":"code","56ca156d":"code","97e503ec":"code","88de6d50":"code","e3324626":"code","6338abe1":"code","05ad829c":"code","0ced6a03":"code","081a2480":"code","b40cfd1c":"code","1e3b6c1d":"code","3c1c303c":"code","39844281":"code","3a93a407":"code","edaf28a3":"code","6333b12d":"code","26af497b":"code","1a4ffa21":"code","2d0f8d69":"code","0db9ae50":"code","71d1886d":"code","bae1882f":"code","20f91178":"code","48007e47":"code","477e4c1e":"code","daf6546f":"code","13598002":"code","2b0c4a59":"code","8ea64af9":"code","b639eb0f":"code","bdef9aba":"code","72a616e1":"code","10a378ac":"code","ce0fd66a":"code","8bbf1c86":"code","ef397652":"code","3cfab212":"code","724b69be":"code","cd7c045e":"code","87288726":"code","2468c87b":"code","fcd42b8c":"code","8b61b564":"code","8650ec06":"code","374e2441":"code","a1ccb50a":"code","1cefb8ec":"code","b52d79b9":"code","6a236236":"code","64e8deae":"code","2b336c31":"code","0ab8d80f":"code","a6dda952":"code","4bb5cdf7":"code","250c645f":"code","cd93fcbc":"code","d093903c":"markdown","a940e450":"markdown","31c69d8b":"markdown","95dd14e7":"markdown","982ba3e3":"markdown","c9611fc1":"markdown","a78e7ec2":"markdown","132b8a2d":"markdown","a18e5b85":"markdown","048b5c84":"markdown","58bae923":"markdown","7154db77":"markdown","d4e05f0c":"markdown","4896fff5":"markdown","e114fb44":"markdown","02d105ec":"markdown","1fdd05ea":"markdown","2875acc6":"markdown","ee3d56f4":"markdown","175b45f2":"markdown","adb8e694":"markdown","30a79900":"markdown","1c411318":"markdown","7e08d444":"markdown","3c2a726b":"markdown","7204a6b0":"markdown","134b5208":"markdown","7431dff5":"markdown","7d90a58e":"markdown","8ea6d8d9":"markdown"},"source":{"c933c74e":"from fastai.tabular.all import *\nfrom pandas_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nfrom sklearn.metrics import accuracy_score","fda2dab1":"set_seed(42)","7e2e0266":"path = Path('\/kaggle\/input\/titanic-extended')","b06008c0":"path.ls()","20b75314":"train_df = pd.read_csv(path\/'train.csv', low_memory=False)\ntest_df  = pd.read_csv(path\/'test.csv' , low_memory=False)","43fdf056":"train_df.head()","5d5b3575":"to_drop = ['Pclass', 'Age', 'Name', 'Embarked']","6a057279":"train_df = train_df.drop(to_drop, axis=1)","6b5bcf72":"train_df.head(3)","ec0b022c":"dep_var = 'Survived'","1ca42f24":"report = ProfileReport(train_df)","a1f687b4":"report","e253ccf6":"train_df = train_df.drop('Cabin', axis=1) ","2f841084":"train_df.head()","5c873d51":"ticket_classes = [3, 2, 1]","ac2d872a":"train_df['Class'] = train_df['Class'].astype('category')\ntrain_df['Class'].cat.set_categories(ticket_classes, ordered=True, inplace=True)","e209b718":"train_df['Class'].unique()","6c08f801":"train_df.columns","6aac2852":"cont = ['Age_wiki', 'Fare']\ncat  = ['WikiId', 'PassengerId', 'Class', 'Name_wiki', 'Sex', 'Ticket', 'Boarded', 'SibSp', 'Parch', 'Hometown', 'Destination', 'Lifeboat', 'Body']","d15b5568":"procs = [Categorify, FillMissing]","37057273":"splits = RandomSplitter(valid_pct=0.2, seed=42)(range_of(train_df))","f87167c3":"to = TabularPandas(train_df, procs=procs, cat_names=cat, cont_names=cont, \n                   y_names=dep_var, y_block=CategoryBlock(), splits=splits)","627a3b78":"xs = to.train.xs\ny  = to.train.y","56ca156d":"valid_xs = to.valid.xs\nvalid_y  = to.valid.y","97e503ec":"tree = DecisionTreeClassifier(max_leaf_nodes=5)","88de6d50":"tree.fit(xs, y);","e3324626":"def get_preds(model):\n    '''Get train and validation set predictions for a given model'''\n    train_preds = model.predict(xs)\n    valid_preds = model.predict(valid_xs)\n    \n    return train_preds, valid_preds","6338abe1":"tree_train_preds, tree_valid_preds = get_preds(tree)","05ad829c":"def print_acc(train_preds, valid_preds):\n    '''Print training and validation set accuracy for a given model'''\n    \n    print(f'Training set accuracy: {accuracy_score(train_preds, y):.3f}, validation set accuracy: {accuracy_score(valid_preds, valid_y):.3f}')","0ced6a03":"print_acc(tree.predict(xs), tree.predict(valid_xs))","081a2480":"def random_forest(xs, y):\n    return RandomForestClassifier(n_jobs=-1, oob_score=True,\n                                 n_estimators=100).fit(xs, y);","b40cfd1c":"rf = random_forest(xs, y)","1e3b6c1d":"rf_train_preds, rf_valid_preds = get_preds(rf)","3c1c303c":"print_acc(rf_train_preds, rf_valid_preds)","39844281":"bst = GradientBoostingClassifier()","3a93a407":"bst.fit(xs, y);","edaf28a3":"bst_train_preds, bst_valid_preds = get_preds(bst)","6333b12d":"print_acc(bst_train_preds, bst_valid_preds)","26af497b":"def feature_importance(m, xs):\n    '''Return a DataFrame of a model's feature importances in descending order'''\n    return pd.DataFrame({'cols':xs.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)","1a4ffa21":"def plot_fi(fi):\n    '''Plot feature importances'''\n    return fi.plot('cols', 'imp', 'barh', figsize=(12, 7), legend=False);","2d0f8d69":"fi = feature_importance(rf, valid_xs)","0db9ae50":"plot_fi(fi);","71d1886d":"to_keep = fi[fi['imp'] > 0.005].cols","bae1882f":"to_keep","20f91178":"# Remove PassengerId and WikiId \nto_keep = pd.concat([to_keep.iloc[:3], to_keep.iloc[4:9], to_keep.iloc[10:]])","48007e47":"to_keep","477e4c1e":"len(xs.columns), len(to_keep)","daf6546f":"xs_imp = xs[to_keep]\nvalid_xs_imp = valid_xs[to_keep]","13598002":"rf_imp = random_forest(xs_imp, y);","2b0c4a59":"print_acc(rf_imp.predict(xs_imp), rf_imp.predict(valid_xs_imp))","8ea64af9":"xs_imp.columns","b639eb0f":"cat_imp  = ['Lifeboat', 'Sex', 'Ticket', 'Class', 'Body', 'Name_wiki', 'Hometown', 'Destination']\ncont_imp = ['Fare', 'Age_wiki']","bdef9aba":"to_test = TabularPandas(test_df, procs, cat_imp, cont_imp)","72a616e1":"cat_imp.remove('Age_wiki_na')\ncat_imp.remove('Fare_na')","10a378ac":"to_test.xs.head()","ce0fd66a":"preds = rf_imp.predict(to_test.xs)","8bbf1c86":"# output = pd.DataFrame({'PassengerId':test_df.PassengerId, 'Survived': preds.astype(int)})\n# output.to_csv('submission.csv', index=False)\n# output.head()","ef397652":"procs_nn = [Categorify, FillMissing, Normalize]","3cfab212":"# We'll train the network on the same features as rf_imp\ntrain_df_nn = train_df[list(xs_imp.columns) + [dep_var]]","724b69be":"train_df_nn.head()","cd7c045e":"splits_nn = RandomSplitter(valid_pct=0.2, seed=42)(range_of(train_df_nn))","87288726":"to_nn = TabularPandas(train_df_nn, procs_nn, cat_imp, cont_imp, y_names=dep_var, splits=splits_nn)","2468c87b":"dls = TabularDataLoaders.from_df(train_df_nn, procs=procs_nn, cat_names=cat_imp, cont_names=cont_imp,\n                                y_names=dep_var, y_block=CategoryBlock, bs=64, valid_idx=splits_nn[1])","fcd42b8c":"# Create a tabular model \nlearn = tabular_learner(dls, layers=[100], metrics=accuracy)","8b61b564":"# Find the optimal learning rate using the LR finder\nlearn.lr_find()","8650ec06":"# Train for 5 epochs\nlearn.fit_one_cycle(5, lr_max=4e-2)","374e2441":"test_df_imp = test_df[xs_imp.columns].copy()","a1ccb50a":"test_df_imp.head()","1cefb8ec":"# Check the number of missing values in each column of the test DataFrame\nfor col in test_df_imp.columns:\n    print(col, test_df_imp[col].isnull().sum())","b52d79b9":"# Fill the missing values in the Fare column with the mean of its values\ntest_df_imp['Fare'] = test_df_imp['Fare'].fillna(test_df['Fare'].mean())","6a236236":"# Add test_df_imp as the test DataLoader for our learner\ndl = learn.dls.test_dl(test_df_imp)","64e8deae":"# Get Neural Network predicion probabilities\ntest_probs_nn = learn.get_preds(dl=dl)[0].numpy()","2b336c31":"# Get Random Forest prediction probabilities\ntest_probs_rf = rf_imp.predict_proba(to_test.xs.drop('Age_wiki_na', axis=1))","0ab8d80f":"# Get prediction probabilities from the ensemble of the Neural Network and Random Forest\ntest_probs_ensemble = (test_probs_nn + test_probs_rf) \/ 2","a6dda952":"test_probs_ensemble[:10]","4bb5cdf7":"# Convert the probabilities to 0, 1 predictions\ntest_preds_ensemble = np.array(([test_probs_ensemble[i].argmax() for i in range(len(test_probs_ensemble))]))","250c645f":"test_preds_ensemble[:10]","cd93fcbc":"submission = pd.DataFrame({'PassengerId':test_df.PassengerId, 'Survived': test_preds_ensemble})\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","d093903c":"## Define a function to create and fit a RandomForestClassifier, check accuracy","a940e450":"## We split our data into training and validation sets randomly","31c69d8b":"# Training and validation","95dd14e7":"# Automatic EDA report using pandas_profiling","982ba3e3":"## Let's drop the Cabin variable, since it has too many missing values to be relevant","c9611fc1":"## Set a random, numpy, torch seed for reproducibility","a78e7ec2":"# Library","132b8a2d":" ## Save our dependent variable name for future usage ","a18e5b85":"## Set Class (ticket class) as an ordered categorical variable","048b5c84":"## Get our features and targets for training and validation sets","58bae923":"# Test set prediction","7154db77":"## Predict on the test set using rf_imp ","d4e05f0c":"# Ensembling","4896fff5":"## Let's train a Neural Network and create an ensemble of two models: the Neural Network and our Random Forest fit to important features.","e114fb44":"# Get data (from the extended titanic dataset)","02d105ec":"# Neural Network training and ensembling","1fdd05ea":"We want to handle our categorical variables, as well as fill missing values. \nWe don't need to normalize our data, because we'll be using Decision Trees, Random Forests, and Gradient Boosting Machines, for which normalization is not necessary.","2875acc6":"We'll allocate 20% of the data to the validation set","ee3d56f4":"## Fit a decision tree, check accuracy","175b45f2":"# Model Interpretation","adb8e694":"## Let's drop the features that are basically duplicates of features added from the Wikipedia dataset","30a79900":"# Ensemble predictions submission","1c411318":"## Getting feature importances","7e08d444":"## To simplify the model, let's drop the less important features, as well as PassengerId and WikiId, as they are mostly irrelevant for prediction.","3c2a726b":"## Create a pd.Series of important features (with F - score greater than 0.005)","7204a6b0":"## Fit a Random Forest to these important features","134b5208":"## Perform the categorical and continous variable split","7431dff5":"## Fit GradientBoostingClassifer, check accuracy","7d90a58e":"This time we add Normalize to our procs, since Neural Networks tend to work best with normalized data.","8ea6d8d9":"## List all fastai procs we want to use to process our data"}}