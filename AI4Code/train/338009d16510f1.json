{"cell_type":{"0192cc59":"code","06b68471":"code","d766e0ac":"code","5c76e978":"code","72cdd938":"code","05f31e75":"code","5ff0b150":"code","9bfab261":"code","7d90d197":"code","ad3a20f6":"code","18a0d826":"code","1bd70263":"code","ef524095":"code","38b6f2c0":"code","e88f1ecf":"code","9f92252c":"code","3a5b0ce0":"code","ce908b66":"code","f3a462e4":"code","bb5294e4":"code","36b5eea2":"code","d8072542":"code","32e8b4c8":"code","bf20f334":"code","01781133":"code","385659e3":"code","272160e6":"code","18de78d1":"code","87cd4929":"code","8b1aee35":"code","297896a4":"code","308f46c4":"code","7edd5bd9":"code","5132b153":"code","f8315752":"code","3e9d46dd":"code","8b0fc255":"code","6223d8f0":"code","e39c7611":"code","900c04d7":"code","cd4358dc":"code","4682c3cd":"code","55d81948":"code","f300d2c4":"code","30733231":"code","64bbbafd":"code","aa1e0ac9":"code","6b9e11cf":"code","f97ed4f3":"code","345615a9":"code","39428e71":"code","67e607a0":"code","23ae4851":"code","39bd5cd0":"code","b9e602b9":"code","218d4379":"code","7af8a8db":"code","3163f9b5":"code","31090d35":"code","3b9465f3":"code","f44a7e38":"code","c71c7c59":"code","e85bddb0":"code","11108c53":"code","e9d9d812":"code","91c03190":"code","a5271749":"code","c1c5e872":"code","3ef1f9ed":"code","41f06324":"code","039659d8":"code","f5581cc8":"code","d2a9f12d":"code","76eab66a":"code","9e225873":"code","a8753dd7":"code","b58562f0":"code","b39bff1e":"code","a5e027e5":"code","6203a2ac":"code","146914ac":"code","06b47767":"code","799dbace":"code","239780c2":"code","3362dbef":"code","35feb6ad":"code","a103b604":"code","5a540a12":"code","5b9003c6":"code","9a8291da":"code","ba1e2706":"code","95906212":"code","f3930080":"code","c7958413":"code","e1d6f100":"code","e6aa40d1":"code","c315d09a":"code","7782c228":"code","6df763f4":"code","f1c08aa3":"code","410e57c8":"code","4ae2fc84":"code","e5de457a":"code","520c27c4":"markdown","25b3af37":"markdown","c8c38e07":"markdown","d885f482":"markdown","23e08ba5":"markdown","e90b2a07":"markdown","5804f4f7":"markdown","a24781a9":"markdown","5e432c23":"markdown","a89fa933":"markdown","b7809601":"markdown","77ed0f83":"markdown","493cd486":"markdown","3a5effa5":"markdown","dbb370b1":"markdown","b7e88a54":"markdown","2a4d9913":"markdown","2423c378":"markdown","7fcc494e":"markdown","fa15e26e":"markdown","5aee9d96":"markdown","04a0cbb2":"markdown","45c1dc8d":"markdown","df350404":"markdown","43e67aa1":"markdown","cd64d647":"markdown","74a91afc":"markdown","3fb48cf8":"markdown","42c19eac":"markdown","37d5d092":"markdown","e5d08a44":"markdown","409fcb1c":"markdown","122fc27a":"markdown","e5ba44dc":"markdown","b372ba15":"markdown","aa5fb849":"markdown","22f676a5":"markdown","04c3f1e2":"markdown","7ef9e705":"markdown","e18baec4":"markdown","fa5028f6":"markdown","715997f6":"markdown","36aa05b6":"markdown","dc173c32":"markdown","01e19d07":"markdown","8960f99e":"markdown","8dcdd8fd":"markdown","88cbd0c8":"markdown","23c14797":"markdown","d1fa9762":"markdown","41339746":"markdown","96c216fd":"markdown","8af24f8c":"markdown"},"source":{"0192cc59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06b68471":"import keyword\n\nprint(keyword.kwlist)","d766e0ac":"print(len(keyword.kwlist))","5c76e978":"# 12_variable=10","72cdd938":"# global=10","05f31e75":"# This is a single line comment","5ff0b150":"'''This is a \nmulti-line\ncomment'''","9bfab261":"print('''This is how it would \nlook when it is \nprinted out''')","7d90d197":"print(\"\"\"We can use both single quotes \nand double quotes for these\"\"\")","ad3a20f6":"for character in '12345':\n    print('This is the {} indented line'.format(character))\nprint('The loop ends here')","18a0d826":"a=1","1bd70263":"a=1+2\\\n+3","ef524095":"print(a)","38b6f2c0":"b=(1+2+\n  3)","e88f1ecf":"print(b)","9f92252c":"a=10\nb=5.5\nc='abc'","3a5b0ce0":"# multiple assignment\nd,e=10,12.3\nf=g=20","ce908b66":"x=3\nprint(id(x))\n# This will print the memory location where 3 is stored and where x is pointing at","f3a462e4":"y=3\nprint(id(y))\n# This will print the memory location where 3 is stored and where y is pointing at","bb5294e4":"y=2\nprint(id(y))","36b5eea2":"a=5\nb=2.3\nc=1+7j","d8072542":"print(type(a))\n# a is an instance of class int","32e8b4c8":"print(type(b))\n# b is an instance of class float","bf20f334":"isinstance(c, complex)\n# This checks if c is an instance of class complex","01781133":"x=True\nprint(type(x))\n# x is an instance of class bool","385659e3":"x='string one'\ny=\"string two\"\n\nprint(type(x))\nprint(type(y))","272160e6":"z='''String \nthree'''\nprint(type(z))","18de78d1":"print(x[0]) # prints the first character of the string\nprint(x[-1]) # prints the last character of the string","87cd4929":"s='This is python tutorial'\nprint(s[5:]) # prints everything from character at 5th index (starting 0) until the end\nprint(s[5:14]) # prints everything from character at 5th index until the 13th character (14th character is not included)","8b1aee35":"a = [20, 20.5, 'hello']\nprint(a[1])","297896a4":"print(type(a))","308f46c4":"print(a)\nprint('assigning 2nd element to 100')\na[1]=100\nprint(a)","7edd5bd9":"t=(1, 3.2, 'hello')\nprint(t)\nprint(type(t))","5132b153":"t[1]","f8315752":"# t[1]=100","3e9d46dd":"s={10, 20, 30, 40, 50}\nprint(s)","8b0fc255":"print(type(s))\n# s is an instance of class set","6223d8f0":"set([10, 20, 20, 30])\n# automatically prints out unique set of items","e39c7611":"# print(s[1])\n\n# we can't print out particular items since it is an unordered collection of items","900c04d7":"d={'a':'apple','b':'bat'}\nprint(type(d))\n\n# d is an instance of class dict","cd4358dc":"print(d['a'])\nprint(d['b'])","4682c3cd":"# print(d['c'])","55d81948":"print(float(10))","f300d2c4":"print(int(100.23))","30733231":"print(str(100))\nstr(100)\n\n# quotes r 4 us","64bbbafd":"user='arun'\nloc=50\nprint('Congratulation, '+user+ '! You completed '+str(loc)+' lines of code!')\n","aa1e0ac9":"a=[1,2, 2, 2, 3, 4, 5]\nprint(type(a))","6b9e11cf":"s=set(a)\nprint(s)\nprint(type(s))","f97ed4f3":"list(str(12345))","345615a9":"print('Hello World')\na=10\nprint('The value of a is', a)\nprint('The value of a is '+ str(a))","39428e71":"a=10;b=20\nprint('The value of a is {} and b is {}'.format(a,b))","67e607a0":"# Whatever is in format(x, y, z)\n# x has an index of 0\n# y has an index of 1\n# z has an index of 2\nprint('The value of b is {1} and a is {0}'.format(a,b))\n\n# position of variables inside format is not important when we are using indexes","23ae4851":"# we can also assign name to the variables inside format and then use them\nprint('Hello, {name}! {greetings}!'.format(name='Arun', greetings='Good Morning'))\n\n# You can also think of this as key-value pairs","39bd5cd0":"print('The story of {0}, {1} and {other}'.format('A','B',other='C'))","b9e602b9":"# num=input('Enter a number: ')\nnum='10'\nprint(num)\nprint(type(num))","218d4379":"x,y= 10,20\n\n# addition\nprint('addition')\nprint(x+10)\n\n# subtraction\nprint('subtraction')\nprint(x-y)\n\n# multiplication\nprint('multiplication')\nprint(x*y)\n\n# division\nprint('division')\nprint(x\/y)\n\n# modulo division - gives the remainder\nprint('modulo division: 15%2')\nprint(15%2)\n\n# floor operator\nprint('floor operator: -15\/\/2')\nprint(-15\/\/2)\n\nprint('floor operator: 15\/\/2')\nprint(15\/\/2)\n\n# exponent\nprint('exponent: 2 raised to the power 5')\nprint(2**5)","7af8a8db":"a,b=10,20\n\nprint(a<b)","3163f9b5":"print(a!=b)","31090d35":"a,b=True, False\nprint(a and b)","3b9465f3":"print(a or b)","f44a7e38":"print(not b)","c71c7c59":"a,b=10,4\n\n# in binary:\n# 10: 1010\n#  4: 0100","e85bddb0":"print(a & b)\n# 0000\n# ((2**3)*0)+((2**2)*0)+((2**1)*0)+((2**0)*0)","11108c53":"print(a | b)\n# 1110\n# ((2**3)*1)+((2**2)*1)+((2**1)*1)+((2**0)*0)","e9d9d812":"print(~b)","91c03190":"x=10\nprint(x)","a5271749":"x+=10 # x=x+10\nprint(x)","c1c5e872":"x-=10 # x=x-10\nprint(x)","3ef1f9ed":"x*=10 # x=x*10\nprint(x)","41f06324":"a=5\nb=5\nprint(a is b)\nprint(b is a)","039659d8":"print(id(5))\nprint(id(a))\nprint(id(b))","f5581cc8":"a=[1,2,3]\nb=[1,2,3]\nprint(id(a))\nprint(id(b))","d2a9f12d":"print(a is b)","76eab66a":"print(id(a[1]))\nprint(id(b[1]))\n","9e225873":"x='abc'\ny='abc'\nprint(id(x))\nprint(id(y))","a8753dd7":"print(x is y)","b58562f0":"print(x is not y)","b39bff1e":"lst=[1,2,3,4]\nprint(1 in lst)","a5e027e5":"print('s' in 'str')","6203a2ac":"d={1:'a',2:'b'}\nprint(1 in d)","146914ac":"print('a' in d) # we can only check in the keys","06b47767":"print(1 in {1,2,3})","799dbace":"num=10\nif num>10:\n    print('number is greater than 10')\nprint('this will always print')","239780c2":"num=10\nif num==10:\n    print('number is greater than 10')\nprint('this will always print')","3362dbef":"num=10\nif num-10:\n    # if 0: 0 is taken as False\n    # everything else is taken as True: -1 2\n    # except None\n    print('number is greater than 10')\nprint('this will always print')","35feb6ad":"if None:\n    # None is absence of anything\n    print('number is greater than 10')\nprint('this will always print')    ","a103b604":"num=10\nif num>0:\n    print('num is positive')\nelse:\n    print('num is negative')","5a540a12":"num=10\nif num>0:\n    print('positive number')\nelif num==0:\n    print('zero')\nelse:\n    print('negative number')","5b9003c6":"num=0\nif num>=0:\n    print('....entering nested if else')\n    if num>0:\n        print('positive number')\n    else:\n        print('zero')\nelse:\n    print(\"didn't enter nested if else\")\n    print('negative number')","9a8291da":"#### Python program to find the largest among 3 numbers\nnum1=20\nnum2=20\nnum3=20\nif num1>=num2 and num1>=num3:\n    print('num1 is the largest')\nelif num2>=num3 and num2>=num1:\n    print('num2 is the largest')\nelse:\n    print('num3 is the largest')\n","ba1e2706":"# Product of all the numbers in a list\nlst=[10, 20, 30, 40, 50]\nproduct=1\nindex=0\nwhile index<len(lst):\n    product*=lst[index]\n    index+=1\nprint(product)","95906212":"lst=[10, 20, 30, 40, 50]\nindex=0\nwhile index<len(lst):\n    print(lst[index])\n    index+=1 # this part is very important in case of while loop\nelse:\n    print('no items are left in the list')","f3930080":"num=int(input('Enter a number: '))\n\nis_divisible=False\n\ni=2\nwhile i<num:\n    if num%i==0:\n        print('{} is divisible by {}'.format(num,i))\n        is_divisible=True\n    i+=1\n\nif is_divisible:\n    print('The number you entered: {} is not prime'.format(num))\nelse:\n    print('The number you entered: {} is prime'.format(num))","c7958413":"# # syntax\n# for element in sequence:\n#     body of for loop","e1d6f100":"lst=[10, 20, 30, 40, 50]\n\nproduct=1\nfor item in lst:\n    product*=item\nprint('Product of numbers in the list: {}'.format(product))","e6aa40d1":"for i in range(10):\n    print(i)\n    # range 10 is not creating a list\n    # everytime I come back, it generates the next item in the list","c315d09a":"range(10)","7782c228":"for i in range(1,20,2):\n    print(i)","6df763f4":"lst=['one','two','three','four','five']\n# range(len(lst))\nfor index in range(len(lst)):\n    print(lst[index].upper())","f1c08aa3":"index_1=20\nindex_2=50\nprime=[]\n\nfor num in range(index_1,index_2):\n    if num>1:\n        is_div=False\n        for div in range(2,num):\n            if num%div==0:\n                is_div=True\n        if not is_div:\n            prime.append(num)\n        \nprint(prime)\n        ","410e57c8":"numbers=[1,2,3,4]\nfor num in numbers:\n    if num==4:\n        break\n    print(num)\nelse:\n    print('in the else block')\nprint('Outside of for loop')","4ae2fc84":"num=int(input('Enter a number: '))\nis_div=False\nfor i in range(2,num):\n    if num%i==0:\n        is_div=True\n        break\nif is_div:\n    print('The number is not prime')\nelse:\n    print('The number is prime')","e5de457a":"lst=[]\nnumbers=[1,2,3,4,5]\nfor num in numbers:\n    if num%2==0:\n        continue\n    lst.append(num)\nelse:\n    print('else-block')\nprint(lst)","520c27c4":"## Statement\nStatments are instructions that python interpreter can execute","25b3af37":"### Iterate over a list using index","c8c38e07":"### 3) Logical Operators:\n* and, or, not","d885f482":"## Keywords and Identifiers\n\n### Keywords\n* Keywords are reserved in python and cannot be used as variable names, function names or as identifiers\n* They are case sensitive","23e08ba5":"## While Loops\n\nwhile test_expression:\nThe body of the loop will run if the the test expression is true","e90b2a07":"### Output formatting","5804f4f7":"### Finding the product of numbers in a list","a24781a9":"### If else","5e432c23":"## Break and Continue Statements\n* are used with for and while loops","a89fa933":"#### Dictionary\n* unordered collection of key-value pairs","b7809601":"### Nested If else","77ed0f83":"* The number we entered gets assiged to num\n* num has type of string even though we entered it as a number","493cd486":"### 2) Comparison Operators\n* >    <    >=    <=    !=    == \n* returns either true or false","3a5effa5":"### Storage Location","dbb370b1":"#### Print odd numbers in the list","b7e88a54":"### Special Operators:\n\n#### Identity Operators:\nThey are used to check if two values (or variables) are located on the same part of the memory","2a4d9913":"#### Numbers","2423c378":"### Range function\n* we can generate a sequence of numbers using range function\n* (start, stop, step size)\n    * range(10) will generate 10 numbers from 0 to 9\n    * range(10) is not making a list\n* The function does not store all the numbers in the memory. It remembers the start, stop, and step size and generate the next number on the go","7fcc494e":"* for loop also has a else block: when all the items are over, it goes over to else block ","fa15e26e":"#### Membership Operators\n* they are used to check if a value or variable is found in a sequence (string, list, tuple, dictionary, set)\n* in, not in","5aee9d96":"#### Sets\n* Unordered collection of unique items\n* defined wth {} ","04a0cbb2":"## Input from the user\n* input() functions lets us do this","45c1dc8d":"## Control Flow: if else\n\n### If\n- if test expression:\n    - statement\n* statement gets executed only if the test expression is true\n","df350404":"#### Tuple\n* ordered sequence of items just like the list\n* declared with parentheses\n* immutable; rest everything else is same","43e67aa1":"### Check whether a given number is prime or \nDivide the number by each of the number between 2 and itself","cd64d647":"#### Converting one sequence to another","74a91afc":"#### List\n* ordered sequence of items\n* all the items do not need to be of same type","3fb48cf8":"#### Check if a number is prime","42c19eac":"### 4) Bitwise Operators\n* operate bit by bit\n* operates on operands as if they are a string of binary digits","37d5d092":"### Break\n* As soon as break is encountered, we jump out of the for loop (including the else block)","e5d08a44":"## Operators\n* Operators are symbols that carry out the arithmetic or logical computations\n* The value that the opertors operate upon are called operands\n* 2+3: + is the operator, 2 and 3 are operands","409fcb1c":"### 5) Assignment Operators","122fc27a":"## Variables\n* Rules for writing variable names are same as identifiers\n* We don't have to declare the data type, python automatically understands each instances data type","e5ba44dc":"### Continue\n* It takes you to the next iteration of the loop\n* It will not execute after the continue statement in the loop\n* after all the iterations are over, it will go to the else block and run it","b372ba15":"##### Slicing strings","aa5fb849":"### Conversion between datatype","22f676a5":"#### Booleans","04c3f1e2":"### Multi-line statement ","7ef9e705":"### Python program to display all prime numbers within an interval","e18baec4":"## Comments\nComments are there to make the code more readable","fa5028f6":"## Python Output\n* We use print function to output data to standard output device","715997f6":"## Indentation\n* A code block (body of a function or a for loop) starts with an indented line and ends with first unindented line\n* The amount of indentation should be consistent within a block\n* 4 spaces are considered as as best practice","36aa05b6":"### 1) Arithmetic Operators","dc173c32":"The memory location where both x and y are pointing at is same","01e19d07":"2 is stored at some other memory location and now y is pointing at where 2 is stored.","8960f99e":"#### Strings\n* Sequence of unicode characters (not ASCII characters)\n    * Which means that it can take special characters, non-english characters","8dcdd8fd":"#### Combining them all","88cbd0c8":"## For Loop","23c14797":"### Identifiers\n* Identifiers are names given to functions, variables or classes\n* Rules for writing names for identifiers:\n    * It cannot start with a digit\n    * Keywords cannot be identifiers\n    * Special characters cannot be used @$%&","d1fa9762":"##### Indexing strings","41339746":"### Data Types\n* Every value in python has a datatype\n* Since everything in python is a object, datatypes are actually classes and variables are instances of these classes","96c216fd":"### While loop with else\nWhenever the test condition for while loop fails, the else block will run","8af24f8c":"* You can modify element(s) in a list \n* If you modify an element in a datatype it becomes a mutable datatype\n* Lists are mutable datatype"}}