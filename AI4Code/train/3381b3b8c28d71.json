{"cell_type":{"e45b4040":"code","57ca4265":"code","9533fccb":"code","e185a4e4":"code","ec3f353c":"code","1a026ed8":"code","747c84bc":"code","ff053256":"code","8b3bcbf1":"code","1c71960b":"code","5e6cae20":"code","d2750a64":"code","9b872df8":"code","c750e280":"code","40bc6113":"code","bd01bf5b":"code","8fd61f9c":"code","3593d53e":"code","862ffaf8":"code","1dbffa2c":"code","8b072200":"code","50a46cec":"code","4b7e60ed":"code","4d57ce52":"code","6001e1fa":"code","519bc99b":"code","dee2575f":"markdown","716e387d":"markdown","28cbabff":"markdown","967d1b84":"markdown","4c721d1a":"markdown","2c86f302":"markdown","1be7e6f0":"markdown","da6a7e37":"markdown","a5ea7cdf":"markdown","f11b48d6":"markdown","38265479":"markdown","745ec706":"markdown","e1e81f90":"markdown","562c2210":"markdown","2cc496f2":"markdown","736e1680":"markdown","df71c020":"markdown","8586a15a":"markdown","5288fbb9":"markdown","f1656f5f":"markdown","679cb56c":"markdown","fa9e1d03":"markdown","15ca481a":"markdown","b4ee7d1e":"markdown","3676102e":"markdown","a8939671":"markdown","de830248":"markdown","0e64cc19":"markdown","e8eced12":"markdown","d505a0f5":"markdown"},"source":{"e45b4040":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline","57ca4265":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\n","9533fccb":"df.head()","e185a4e4":"df.dtypes","ec3f353c":"df.describe()","1a026ed8":"df.drop([\"id\"], axis=1, inplace = True)\n\ndf.describe()","747c84bc":"print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n","ff053256":"mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)","8b3bcbf1":"mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)","1c71960b":"print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())","5e6cae20":"df['floors'].value_counts().to_frame()","d2750a64":"sns.boxplot(x=\"waterfront\",y=\"price\", data=df)","9b872df8":"sns.regplot(x=\"sqft_above\",y=\"price\",data=df)\nplt.ylim(0,)","c750e280":"df.corr()","40bc6113":"df.corr()['price'].sort_values()","bd01bf5b":"X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)","8fd61f9c":"X = df[['sqft_living']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)","3593d53e":"features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]     ","862ffaf8":"Y = df['price']\nlm2 = LinearRegression()\nlm2.fit(df[features],Y)\n\nprint(\"The Predicted values are mentioned as: \" + str (lm2.predict(df[features])))\n\nprint(\"The R^2 value is :\" + str (lm2.score(df[features],Y)))","1dbffa2c":"Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]","8b072200":"pipe =Pipeline(Input)\npipe.fit(df[features],Y)\nprint(\"The predicted values are: \" + str(pipe.predict(df[features])))\nprint(\"The R^2 value is :\" + str (pipe.score(df[features], Y)))","50a46cec":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")","4b7e60ed":"features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])","4d57ce52":"from sklearn.linear_model import Ridge","6001e1fa":"RidgeModel = Ridge(alpha =0.1)\nRidgeModel.fit(x_train, y_train)\nprint(\"The predicted values are: \" + str(RidgeModel.predict(x_test)))\nprint(\"The R^2 value is :\" + str (RidgeModel.score(x_test, y_test)))","519bc99b":"pr = PolynomialFeatures(degree=2)\nx_train_pr = pr.fit_transform(x_train[features])\nx_test_pr = pr.fit_transform(x_test[features])\n\nRidgeModel = Ridge(alpha = 0.1)\nRidgeModel.fit(x_train_pr, y_train)\nyhat = RidgeModel.predict(x_test_pr)\n\nprint(\"The R^2 Score Value for the training data is :\" + str(RidgeModel.score(x_train_pr, y_train)))\nprint(\"The R^2 Score Value for the testing data is :\" + str(RidgeModel.score(x_test_pr, y_test)))","dee2575f":"| Variable      | Description                                                                                                 |\n| ------------- | ----------------------------------------------------------------------------------------------------------- |\n| id            | A notation for a house                                                                                      |\n| date          | Date house was sold                                                                                         |\n| price         | Price is prediction target                                                                                  |\n| bedrooms      | Number of bedrooms                                                                                          |\n| bathrooms     | Number of bathrooms                                                                                         |\n| sqft_living   | Square footage of the home                                                                                  |\n| sqft_lot      | Square footage of the lot                                                                                   |\n| floors        | Total floors (levels) in house                                                                              |\n| waterfront    | House which has a view to a waterfront                                                                      |\n| view          | Has been viewed                                                                                             |\n| condition     | How good the condition is overall                                                                           |\n| grade         | overall grade given to the housing unit, based on King County grading system                                |\n| sqft_above    | Square footage of house apart from basement                                                                 |\n| sqft_basement | Square footage of the basement                                                                              |\n| yr_built      | Built Year                                                                                                  |\n| yr_renovated  | Year when house was renovated                                                                               |\n| zipcode       | Zip code                                                                                                    |\n| lat           | Latitude coordinate                                                                                         |\n| long          | Longitude coordinate                                                                                        |\n| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n","716e387d":"\n\nUse the method <code>value_counts<\/code> to count the number of houses with unique floor values, use the method <code>.to_frame()<\/code> to convert it to a dataframe.\n","28cbabff":"\n\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n","967d1b84":"Load the csv:\n","4c721d1a":"We also replace the missing values of the column <code>'bathrooms'<\/code> with the mean of the column  <code>'bathrooms' <\/code> using the method <code>replace()<\/code>. Don't forget to set the <code> inplace <\/code>  parameter top <code> True <\/code>\n","2c86f302":"Then calculate the R^2. Take a screenshot of your code.\n","1be7e6f0":"We can replace the missing values of the column <code>'bedrooms'<\/code> with the mean of the column  <code>'bedrooms' <\/code> using the method <code>replace()<\/code>. Don't forget to set the <code>inplace<\/code> parameter to <code>True<\/code>\n","da6a7e37":"We can Fit a linear regression model using the  longitude feature <code>'long'<\/code> and  caculate the R^2.\n","a5ea7cdf":"This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n","f11b48d6":"We use the method <code>head<\/code> to display the first 5 columns of the dataframe.\n","38265479":"\n\nUse the function <code>boxplot<\/code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n","745ec706":"We can use the Pandas method <code>corr()<\/code>  to find the feature other than price that is most correlated with price.\n","e1e81f90":"**About this Dataset**","562c2210":"\n\nUse the function <code>regplot<\/code>  in the seaborn library  to  determine if the feature <code>sqft_above<\/code> is negatively or positively correlated with price.\n","2cc496f2":"\n\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n","736e1680":"We can see we have missing values for the columns <code> bedrooms<\/code>  and <code> bathrooms <\/code>\n","df71c020":"\nFit a linear regression model to predict the <code>'price'<\/code> using the feature <code>'sqft_living'<\/code> then calculate the R^2.\n","8586a15a":"Import the necessary modules:\n","5288fbb9":"<h1> Model Development <\/h1>\n","f1656f5f":"We use the method describe to obtain a statistical summary of the dataframe.\n","679cb56c":"\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features<\/code>, and calculate the R^2.\n","fa9e1d03":"\n\n<h1 align=center><font size = 5>House Price Prediction using Python<\/font><\/h1>\n","15ca481a":"<h1>Importing Data Sets<\/h1>\n","b4ee7d1e":"\nFit a linear regression model to predict the <code>'price'<\/code> using the list of features:\n","3676102e":"You will require the following libraries:\n","a8939671":"<h1> Exploratory Data Analysis <\/h1>\n","de830248":"We will split the data into training and testing sets:\n","0e64cc19":"# Model Evaluation and Refinement\n","e8eced12":"<h1>Data Wrangling<\/h1>\n","d505a0f5":"\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'<\/code>\n\n<code>'polynomial'<\/code>\n\n<code>'model'<\/code>\n\nThe second element in the tuple  contains the model constructor\n\n<code>StandardScaler()<\/code>\n\n<code>PolynomialFeatures(include_bias=False)<\/code>\n\n<code>LinearRegression()<\/code>\n"}}