{"cell_type":{"83cb25e0":"code","5ac3127b":"code","57701304":"code","b7a8f3ba":"code","e706c1d7":"code","14b0f382":"code","7a65e450":"code","b53390b9":"code","270e5ab4":"code","322b6e7c":"code","2f930acf":"code","eddb158d":"code","bfa713cd":"code","06f507f6":"code","024bf755":"code","f5cb43d3":"code","4c711661":"code","74548863":"code","52d5be4d":"code","58265bcc":"code","9052bc22":"code","1778beef":"code","691cb332":"code","6d3e93f1":"code","071c8a9a":"code","775c5bff":"code","c86f5a6e":"code","fa2197a5":"code","ae29e2b2":"code","eeec9d02":"code","0c9f94b6":"markdown","330696d1":"markdown","99b42315":"markdown","3c46c0b1":"markdown","517221dd":"markdown","ca0cb51b":"markdown","7247f0bd":"markdown","451d40f2":"markdown","65e92d49":"markdown","a01efcb9":"markdown","1031406e":"markdown","ca8dbd4e":"markdown","12425f99":"markdown"},"source":{"83cb25e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ac3127b":"#input the data\ntrain=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#extract the result of training data and keep it for latter use\ntrain_result=train.Survived\nprint(train_result.shape)","57701304":"#merge the train and test data together so that it will be more convenient for us to do the transformation.\ntrain_and_test=pd.concat([train.drop([\"Survived\"],axis=1),test])\nprint(train_and_test.shape)","b7a8f3ba":"train_and_test['Title'] = train_and_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_and_test=train_and_test.drop([\"Name\"],axis=1)\ntrain_and_test.head(2)","e706c1d7":"#Let's see how many kinds of titles do we have, and count the amount of each type.\nfrom collections import Counter\nCounter(train_and_test[\"Title\"])","14b0f382":"#Change the titles.\ntrain_and_test['Title'] = train_and_test['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain_and_test['Title'] = train_and_test['Title'].replace('Mlle', 'Miss')\ntrain_and_test['Title'] = train_and_test['Title'].replace('Ms', 'Miss')\ntrain_and_test['Title'] = train_and_test['Title'].replace('Mme', 'Mrs')","7a65e450":"#Check the count again to see whether the count is reasonable\nCounter(train_and_test[\"Title\"])","b53390b9":"#use the median to fill the na\ntrain_and_test[\"Age\"]=train_and_test[\"Age\"].fillna(train_and_test.groupby(\"Title\")[\"Age\"].transform(\"median\"))\ntrain_and_test.describe()","270e5ab4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","322b6e7c":"#Check the distribution of age\nplt.figure(figsize = (5,3))\nsns.distplot(train_and_test[\"Age\"])","2f930acf":"#Fill the NA with Unknown\ntrain_and_test[\"Embarked\"]=train_and_test[\"Embarked\"].fillna(\"Unknown\")\ntrain_and_test.head(2)","eddb158d":"#Still, the first step is to fill the NA.\ntrain_and_test[\"Fare\"]=train_and_test[\"Fare\"].fillna(train_and_test[\"Fare\"].median())\ntrain_and_test[\"Fare\"].describe()","bfa713cd":"from scipy import stats\nfrom scipy.stats import norm, skew\nstats.boxcox(train.Fare+1)[1]","06f507f6":"# We use log should be OK.\nplt.figure(figsize = (5,3))\nsns.distplot(np.log(train_and_test[\"Fare\"]+1))\nplt.xlim()","024bf755":"train_and_test[\"Fare\"]=np.log(train_and_test[\"Fare\"]+1)","f5cb43d3":"train_and_test[\"Cabin\"].sample(3)","4c711661":"train_and_test[\"Cabin\"]=train_and_test[\"Cabin\"].str[:1]\ntrain_and_test[\"Cabin\"]=train_and_test[\"Cabin\"].fillna(\"Unknown\")\ntrain_and_test.head(2)","74548863":"train_and_test.sample(3)","52d5be4d":"train_and_test=train_and_test.drop([\"PassengerId\",\"Ticket\"],axis=1)","58265bcc":"train_and_test.to_csv(\"train_and_test.csv\",index=False)","9052bc22":"import xgboost as XGB","1778beef":"train_and_test=pd.read_csv(\"train_and_test.csv\")\nttdata=pd.get_dummies(train_and_test)\nall_mat=ttdata.iloc[:,:].values","691cb332":"from sklearn import preprocessing,model_selection","6d3e93f1":"stand = preprocessing.StandardScaler()\nstand.fit(all_mat)\nall_mat_st = stand.transform(all_mat)","071c8a9a":"X=all_mat[:891,:]\ny=train_result.iloc[:].values\nn,p = X.shape","775c5bff":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X,y,test_size = 0.25, random_state = 10, stratify = y)","c86f5a6e":"#After tuning the parameters:\nxgb=XGB.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5, gamma=0.2,\n              learning_rate=0.01, max_delta_step=0, max_depth=5,\n              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n              nthread=None, objective='binary:logistic', random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n              silent=None, subsample=0.5, verbosity=1)\nxgb.fit(X_train,y_train)","fa2197a5":"xgb.score(X_test,y_test)","ae29e2b2":"#fit the model again, using all we know\nxgb.fit(X,y)","eeec9d02":"PassengerId = test[\"PassengerId\"]\ntest_mat=all_mat[891:,:]\ntest_pred=xgb.predict(test_mat)\noutput=pd.DataFrame({\"PassengerId\":PassengerId, \"Survived\":test_pred})\noutput.to_csv(\"submission.csv\",index=False)\nprint(output.sample(3))","0c9f94b6":"## 1.5.Dealing with \"Cabin\"","330696d1":"## 1.4.Dealing with \"Fare\"","99b42315":"# 2. Fitting Models","3c46c0b1":"# 1. Feature engineering \n## 1.1.Adding a feature: Title, to replace Name","517221dd":"Some rare type like \"Don\",\"Mme\" only has 1. And we can recognize that some of them are typos, such as \"Mme\". ","ca0cb51b":"## 1.6.Drop Useless Columns","7247f0bd":"# Beginning Practice on Kaggle","451d40f2":"# 0. Import Data.","65e92d49":"## 1.2.Dealing with Age ","a01efcb9":"## 1.3.Dealing with \"Embarked\"","1031406e":"Seems to be normal. Thus, it should be OK.","ca8dbd4e":"Some of my process may not be appropriate. Hope to get some suggestions from kaggle.","12425f99":"## 1.7.Out put the dataset which is ready to be put into the model"}}