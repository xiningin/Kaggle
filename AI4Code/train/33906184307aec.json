{"cell_type":{"f5a5e661":"code","999bc41b":"code","64c9d1e7":"code","e9f337f7":"code","e0efc0b4":"code","1b2a3537":"code","e6680401":"code","af92d63a":"code","4771d48e":"code","f24a634e":"code","ae8855f8":"code","f34b8231":"code","b2a8884d":"code","d3c6d936":"code","1a7675cc":"code","fbb24441":"code","7eb976ac":"code","5fcd1ed5":"code","9976a78c":"code","c52106fd":"code","baaa8e83":"code","d63b54ae":"code","b7b96a7e":"code","c49f2f0f":"code","22c62032":"code","2cd9ef58":"code","f383cd2e":"code","6bab11b9":"code","f8e296dc":"code","a8af0d9f":"code","2da857d4":"code","856a18d0":"code","52b9894b":"code","68a6222c":"code","8e5e2466":"code","1f19c186":"code","a9416a46":"code","3617f234":"code","c7992131":"code","38b62c1d":"code","62ac483f":"code","7a3bd1ed":"code","e8094ca0":"code","059d299d":"code","5f4feabc":"code","d52638d0":"code","825ba1b3":"code","6c892531":"code","6dddbdd4":"code","28403a51":"code","85214b51":"code","e4ec1953":"code","4479579e":"code","e06cdf28":"markdown","829bf55c":"markdown","4543bacd":"markdown","0235199b":"markdown","98a76e0d":"markdown","39769423":"markdown","fca84583":"markdown","a1e8d018":"markdown","dee403be":"markdown","039876f2":"markdown","f5b92055":"markdown","3fed1cab":"markdown","d784837e":"markdown","5792912f":"markdown","d1b0fa71":"markdown","e1aa7af0":"markdown","5c7d6267":"markdown","0d72f387":"markdown","d730ef41":"markdown","85b4139f":"markdown","4354c52c":"markdown","72c3b3d5":"markdown"},"source":{"f5a5e661":"import numpy as np # \ub118\ud30c\uc774 \ubd88\ub7ec\uc624\uae30\nimport pandas as pd # \ud310\ub2e4\uc2a4 \ubd88\ub7ec\uc624\uae30\n\nimport matplotlib.pyplot as plt #\ub9f7\ud50c\ub78f\ub9bd \ubd88\ub7ec\uc624\uae30\nimport seaborn as sns # \uc528\ubcf8 \ubd88\ub7ec\uc624\uae30","999bc41b":"# \ub370\uc774\ud130 \uc5c5\ub85c\ub4dc\ndf = pd.read_csv('\/kaggle\/input\/ibm-watson-marketing-customer-value-data\/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv')","64c9d1e7":"# \ub370\uc774\ud130\ud504\ub808\uc784 \ubaa8\uc591\ndf.shape","e9f337f7":"# \ub370\uc774\ud130\ud504\ub808\uc784 \ubcf4\uae30\ndf.head(10)","e0efc0b4":"df.tail()","1b2a3537":"df.shape","e6680401":"# \ub370\uc774\ud130 \uac1c\uc218\uc640 \ube48\uac12, \ub370\uc774\ud130 \ud0c0\uc785 \ub4f1 \ud655\uc778\ndf.info()","af92d63a":"# int \ub370\uc774\ud130 \uc720\ub2c8\ud06c\uac12, \uc720\ub2c8\ud06c\uac12 \uac1c\uc218 \ud655\uc778\nprint('Income:', df['Income'].unique(), df['Income'].nunique())\nprint('Monthly Premium Auto:', df['Monthly Premium Auto'].unique(), df['Monthly Premium Auto'].nunique())\nprint('Months Since Last Claim:', df['Months Since Last Claim'].unique(), df['Months Since Last Claim'].nunique())\nprint('Months Since Policy Inception:', df['Months Since Policy Inception'].unique(), df['Months Since Policy Inception'].nunique())\nprint('Number of Open Complaints:', df['Number of Open Complaints'].unique(), df['Number of Open Complaints'].nunique())\nprint('Number of Policies:', df['Number of Policies'].unique(), df['Number of Policies'].nunique())","4771d48e":"# \uc22b\uc790\ud615 \uceec\ub7fc \ud1b5\uacc4 Summary\ndf.describe()","f24a634e":"# Customer LTV \ubd84\uc11d\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Customer Lifetime Value'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(df['Customer Lifetime Value'])","ae8855f8":"# \uc0ac\ubd84\ubc94\uc704(IQR, Interquartile Range) \uad6c\ud558\uae30\nQ1 = df['Customer Lifetime Value'].quantile(0.25)\nQ3 = df['Customer Lifetime Value'].quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)\n\n# \ucd5c\ub300\uac12\nprint(Q3 + 1.5 * IQR)\n\n# \uc0ac\ubd84\ubc94\uc704\ub85c \uc544\uc6c3\ub77c\uc774\uc5b4 \uad6c\ud558\uae30\ndf[(df['Customer Lifetime Value'] > (Q3 + 1.5 * IQR))]['Customer Lifetime Value']","f34b8231":"# Income \nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Income']) # \uc18c\ub4dd \ub370\uc774\ud130 \ubd84\ud3ec\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(df['Income'], df['Customer Lifetime Value']) #\uc18c\ub4dd\uacfc LTV\uc758 \uad00\uacc4","b2a8884d":"# Monthly Premium Auto\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Monthly Premium Auto']) # Monthly Premium Auto \ubd84\ud3ec\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(df['Monthly Premium Auto'], df['Customer Lifetime Value']) # Monthly Premium Auto\uc640 LTV\uc758 \uad00\uacc4","d3c6d936":"# Months Since Last Claim\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Months Since Last Claim']) #Months Since Last Claim \ubd84\ud3ec\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(x='Months Since Last Claim', y='Customer Lifetime Value', data=df)  # Months Since Last Claim\uacfc LTV\uc758 \uad00\uacc4","1a7675cc":"# Months Since Policy Inception\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Months Since Policy Inception']) # Months Since Policy Inception \ubd84\ud3ec\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(x='Months Since Policy Inception', y='Customer Lifetime Value', data=df) # Months Since Policy Inception\uacfc LTV \uad00\uacc4","fbb24441":"# Total Claim Amount\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.distplot(df['Total Claim Amount']) # Total Claim Amount \ubd84\ud3ec\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(x='Total Claim Amount', y='Customer Lifetime Value', data=df) # Total Claim Amount\uacfc LTV \uad00\uacc4","7eb976ac":"# .corr() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \ud788\ud2b8\ub9f5 \uadf8\ub9ac\uae30\n\nplt.figure(figsize=(7,6))\nsns.heatmap(df[['Customer Lifetime Value','Income','Monthly Premium Auto','Total Claim Amount', 'Months Since Last Claim', 'Months Since Policy Inception']].corr(),annot = True)\nplt.show()","5fcd1ed5":"# Customer\ub294 \uace0\uac1d\ubcc4 \uace0\uc720\ubc88\ud638\ub85c LTV\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\ub2e4\uace0 \uc0dd\uac01\ud574 \ubd84\uc11d\ud558\uc9c0 \uc54a\uc74c","9976a78c":"# State\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['State'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='State', y='Customer Lifetime Value', data=df)","c52106fd":"# Response\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Response'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Response', y='Customer Lifetime Value', data=df)","baaa8e83":"# Coverage\nplt.figure(figsize=(20,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Coverage'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Coverage', y='Customer Lifetime Value', data=df)","d63b54ae":"# Effective To Date \ndf['Month'] = 0\ndf['Month'] = df['Effective To Date'].str.extract(r'(\\d+)') #\uc720\ud6a8\uc77c \ub370\uc774\ud130\uc5d0\uc11c \ub2ec(month)\ub9cc \ucd94\ucd9c\ud574 \ud655\uc778\n\nprint(df['Month'].unique())","b7b96a7e":"# Education\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Education'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Education', y='Customer Lifetime Value', data=df)","c49f2f0f":"# EmploymentStatus\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['EmploymentStatus'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='EmploymentStatus', y='Customer Lifetime Value', data=df)","22c62032":"# Gender\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Gender'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Gender', y='Customer Lifetime Value', data=df)","2cd9ef58":"# Location Code\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Location Code'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Location Code', y='Customer Lifetime Value', data=df)","f383cd2e":"# Marital Status\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Marital Status'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Marital Status', y='Customer Lifetime Value', data=df)","6bab11b9":"# Policy Type\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Policy Type'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Policy Type', y='Customer Lifetime Value', data=df)","f8e296dc":"# Policy\n\ndf['Policy'].unique()","a8af0d9f":"df['Policy'] = df['Policy'].factorize()[0]  # \ubcf4\ud5d8\uc758 9\uac00\uc9c0 \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uac12\uc744 \uc22b\uc790\ub85c \ubc14\uafc8","2da857d4":"plt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Policy'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Policy', y='Customer Lifetime Value', data=df)","856a18d0":"# Number of Policies\nplt.figure(figsize=(24,8))\nplt.subplot(1, 3, 1)\nsns.countplot(df['Number of Policies'])\n\nplt.subplot(1, 3, 2)\nsns.barplot(x='Number of Policies', y='Customer Lifetime Value', data=df)","52b9894b":"# Number of Open Complaints\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Number of Open Complaints']) # Number of Open Complaints \ud56d\ubaa9\ubcc4 \uac1c\uc218\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Number of Open Complaints', y='Customer Lifetime Value', data=df) # Number of Open Complaints\uacfc LTV \uad00\uacc4","68a6222c":"# Sales Channel\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Sales Channel'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Sales Channel', y='Customer Lifetime Value', data=df)","8e5e2466":"# Renew Offer Type\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Renew Offer Type'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Renew Offer Type', y='Customer Lifetime Value', data=df)","1f19c186":"# Vehicle Class\nplt.figure(figsize=(28,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Vehicle Class'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Vehicle Class', y='Customer Lifetime Value', data=df)","a9416a46":"# Vehicle Size\nplt.figure(figsize=(15,6))\nplt.subplot(1, 2, 1)\nsns.countplot(df['Vehicle Size'])\n\nplt.subplot(1, 2, 2)\nsns.barplot(x='Vehicle Size', y='Customer Lifetime Value', data=df)","3617f234":"# drop insignificant columns\ndf = df.drop(['Income', 'Months Since Last Claim', 'Months Since Policy Inception','Customer','State','Response','Education','Effective To Date', 'Month','EmploymentStatus','Gender','Location Code','Marital Status','Policy','Sales Channel','Vehicle Size'], axis=1)","c7992131":"df.head()","38b62c1d":"# \ud14d\uc2a4\ud2b8 \uceec\ub7fc\uc5d0 \uc6d0\ud56b \uc778\ucf54\ub529 \uc801\uc6a9\ud558\uae30\n\nCategorical = ['Coverage', 'Policy Type', 'Renew Offer Type', 'Vehicle Class']\ndfh = pd.get_dummies(df, columns = Categorical)","62ac483f":"dfh","7a3bd1ed":"# prediction target\ny = dfh['Customer Lifetime Value']","e8094ca0":"# features\nX = dfh.drop('Customer Lifetime Value', axis = 1)","059d299d":"# scaling\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","5f4feabc":"X","d52638d0":"# \uc0ac\uc774\ud0b7\ub7f0 \ubc0f \uad00\ub828 \uc54c\uace0\ub9ac\uc998 \ubd88\ub7ec\uc624\uae30\nfrom sklearn.model_selection import train_test_split  # \ud6c8\ub828 \ubc0f \ub370\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130 \ubd84\ud560 \ubaa8\ub4c8 \ubd88\ub7ec\uc624\uae30\nfrom sklearn.tree import DecisionTreeRegressor #\uc758\uc0ac\uacb0\uc815\ub098\ubb34 \ud68c\uadc0 \uc54c\uace0\ub9ac\uc998\nfrom sklearn.ensemble import RandomForestRegressor #\ub79c\ub7fc\ud3ec\ub808\uc2a4\ud2b8 \ud68c\uadc0 \uc54c\uace0\ub9ac\uc998\nfrom xgboost import XGBRegressor #XGB \ud68c\uadc0 \uc54c\uace0\ub9ac\uc998\nfrom sklearn.metrics import mean_absolute_error #\ud3c9\uac00 \ubaa8\ub4c8","825ba1b3":"train_X, val_X, train_y, val_y = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state = 0)","6c892531":"# \ub9e5\uc2a4 \ub9ac\ud504\ub178\ub4dc \uc124\uc815\uc5d0 \ub530\ub77c \uc758\uc0ac\uacb0\uc815\ub098\ubb34 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218 \uc791\uc131\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    val_pred = model.predict(val_X)\n    mae = mean_absolute_error(val_y, val_pred)\n    return(mae)\n\ncandidate_max_leaf_nodes = [25, 50, 100, 250, 500, 1000, 2000]\nfor max_leaf_nodes in candidate_max_leaf_nodes:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t MAE:  %d\" %(max_leaf_nodes, my_mae))","6dddbdd4":"# n_estimators\uc5d0 \ub530\ub77c \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \uc801\uc6a9 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218 \uc791\uc131\ndef get_mae(n_estimators, train_X, val_X, train_y, val_y):\n    model = RandomForestRegressor(n_estimators=n_estimators, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\ncandidate_n_estimators = [25, 50, 100, 250, 500, 1000]\nfor n_estimators in candidate_n_estimators:\n    my_mae = get_mae(n_estimators, train_X, val_X, train_y, val_y)\n    print(\"n_estimators: %d  \\t\\t MAE:  %d\" %(n_estimators, my_mae))","28403a51":"# n_estimators\uc5d0 \ub530\ub77c XGBRegressor\uc758 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294 \ud568\uc218 \uc791\uc131\ndef get_mae(n_estimators, train_X, val_X, train_y, val_y):\n    model = XGBRegressor(n_estimators=n_estimators, learning_rate=0.05)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\ncandidate_n_estimators = [100, 250, 500, 1000]\nfor n_estimators in candidate_n_estimators:\n    my_mae = get_mae(n_estimators, train_X, val_X, train_y, val_y)\n    print(\"n_estimators: %d  \\t\\t MAE:  %d\" %(n_estimators, my_mae))","85214b51":"# Best model\nbest_model = RandomForestRegressor(n_estimators=500, random_state=0)\nbest_model.fit(train_X, train_y)\npreds_val = best_model.predict(val_X)\nmae = mean_absolute_error(val_y, preds_val)\nprint(\"\ubca0\uc2a4\ud2b8 \ubaa8\ub378\uc744 \uc801\uc6a9\ud55c \uacb0\uacfc mae\ub294 %d\ub85c \uac00\uc7a5 \ub0ae\uc558\ub2e4.\" %mae)","e4ec1953":"df_1 = pd.DataFrame({'Actual': val_y, 'Predicted': preds_val})\ndf_1","4479579e":"# val_y\uacfc preds_val \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\n\nplt.figure(figsize=(14, 6))\n\nplt.subplot(1, 2, 1)\nx1= np.arange(1827)\nplt.plot(x1, df_1['Actual'] , label='Actual LTV')\nplt.plot(x1, df_1['Predicted'], label='Predicted LTV') \nplt.legend()\n\nplt.subplot(1, 2, 2)\nsns.scatterplot(x='Actual', y= 'Predicted', data=df_1) ","e06cdf28":"**2) RandomForestRegressor**","829bf55c":"\ucd5c\ub300 \ub9ac\ud504\ub178\ub4dc\uc758 \uc218(max_leaf_nodes)\uac00 2000\uac1c\uc77c \ub54c \uc608\uce21\uac12\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 y\uac12\uc758 \uc808\ub300\uac12 \uc624\ucc28(mae, mean_absolute_error)\uac00 \uac00\uc7a5 \uc791\uc74c","4543bacd":"9134\ud589 x 24\uc5f4(\uc885\uc18d\ubcc0\uc2181 + \ub3c5\ub9bd\ubcc0\uc218 23)\n\n1\uac1c\uc758 \ubc94\uc8fc\ud615 \ub370\uc774\ud130(categorical data)\uc640 (\uac12\uc774 \uc815\ud574\uc9c0\uc9c0 \uc54a\uc740) 8\uac1c\uc758 \uc5f0\uc18d\ud615 \ub370\uc774\ud130(continuous data)\uac00 \uc788\uace0, \ube48\uac12\uc740 \uc5c6\ub2e4.\n\n\ubc94\uc8fc\ud615 \ub370\uc774\ud130 - Customer, State, Response, Coverage, Effective To Date, Education, EmploymentStatus, Gender, Location Code, Marital Status, Policy Type, Policy, Renew Offer Type, Sales Channel, Vehicle Class, Vehicle Size  \n\n\uc5f0\uc18d\ud615 \ub370\uc774\ud130 - Customer Lifetime Value, Total Claim Amount, Income, Monthly Premium Auto, Months Since Last Claim, Months Since Policy Inception, Number of Open Complaints, Number of Policies","0235199b":"LTV \ud3c9\uade0\uc774 \uc57d 8,004\ub2ec\ub7ec\uc784\uc744 \uac10\uc548\ud560 \ub54c 1,516\uc758 \uc624\ucc28\ub294 \uc57d 78%\uc758 \uc815\ud655\ub3c4\ub97c \ub9d0\ud55c\ub2e4. ","98a76e0d":"# 4. Modeling ","39769423":"Q3\uc5d0\uc11c 1.5 X IQR\uc744 \ub354\ud55c \uac12\ubcf4\ub2e4 \ubc97\uc5b4\ub098\ub294 \uc704\uce58\uc5d0 \uc788\ub294 LTV \uac12\uc774 817\uac1c \uc788\ub2e4. \n","fca84583":"Income, Months Since Last Clamin, Months Since Policy Inception\ub294 LTV\uc640 \uc720\uc758\ubbf8\ud55c \uc0c1\uad00\uad00\uacc4\uac00 \ubcf4\uc774\uc9c0 \uc54a\uc74c\n\nMonthly Premium Auto\ub294 LTV\uc640 \uc120\ud615\uc801\uc778 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uace0, Total Claim Amount\ub3c4 \uc5b4\ub290 \uc815\ub3c4 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc784","a1e8d018":"# 2. EDA (Exploratory Data Analysis)","dee403be":"LTV\ub294 Upper fence(Q3 + 1.5 * IQR)=16414\ub97c \ubc97\uc5b4\ub098\ub294 \uc774\uc0c1\uce58 \ub370\uc774\ud130\uac00 819\uac1c\ub85c \uc774\uac83\uc774 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \ucc28\uc774\ub97c \ub9cc\ub4dc\ub294 \uc8fc\uc694 \uc6d0\uc778\uc73c\ub85c \ubcf4\uc778\ub2e4. \ub2e4\ub978 \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc774\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \uc801\uc6a9\ud574\ubcf4\ub294 \uac83\uacfc \ud568\uaed8 \uc774\uc0c1\uce58\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560 \uc9c0\uac00 \uc608\uce21 \uc815\ud655\ub3c4\ub97c \uac1c\uc120\ud560 \uc218 \uc788\ub294 \uc8fc\uc694 \ubc29\ubc95\uc774 \ub420 \uac83 \uac19\ub2e4. ","039876f2":"**3) XGBRegressor**","f5b92055":"\ub300\ubd80\ubd84\uc758 18\uac1c \ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub294 LTV\uc640 \ub69c\ub837\ud55c \uc0c1\uad00\uad00\uacc4\uac00 \ubcf4\uc774\uc9c0 \uc54a\ub294\ub2e4.\n\nCoverage\uc758 \uacbd\uc6b0 Premium > Extended Premium > Basic \uc21c\uc73c\ub85c LTV\uac00 \ub192\ub2e4.\n\nPolicy type\uc740 Special Auto\uc758 \uacbd\uc6b0 LTV\uac00 \uc57d\uac04 \ub354 \ub192\uc558\ub2e4.   \n\nNumber of Policies(\ubcf4\ud5d8\uc99d\uc11c\uc758 \uac1c\uc218)\uc758 \uacbd\uc6b0 2\uac1c\uc778 \uacbd\uc6b0\uac00 \uac00\uc7a5 LTV\uac00 \ub192\uc558\ub2e4. \n\nNumber of Open Complaints\uc758 \uacbd\uc6b0 0~2\ud68c\uae4c\uc9c0 LTV\uc5d0 \ucc28\uc774\uac00 \uc5c6\uc73c\ub098, 3\ud68c \uc774\uc0c1\uc758 \uacbd\uc6b0 LTV\uac00 \ub0ae\uc544\uc9c0\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4. \n\nRenew Offer Type\uc740 offer 1 > offer 3 > offer 2 > offer 4 \uc21c\uc73c\ub85c LTV\uac00 \ub2e4\uc18c \ucc28\uc774\ub97c \ubcf4\uc778\ub2e4. \n\nVehicle Class\uc758 \uacbd\uc6b0 \ub7ed\uc154\ub9ac suv\uc640 \ub7ed\uc154\ub9ac \uce74\uac00 \uc0c1\ub300\uc801\uc73c\ub85c LTV\uac00 \ub192\ub2e4. ","3fed1cab":"\ubaa8\ub4e0 \ub370\uc774\ud130\uc758 \uacc4\uc57d \uc720\ud6a8\uc77c\uc740 2011\ub144\uc774\uace0, \uc6d4 \ub370\uc774\ud130\ub9cc \ucd94\ucd9c\ud574 \ubcf8 \uacb0\uacfc 1\uc6d4 \ub610\ub294 2\uc6d4\ub85c LTV\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c \ud310\ub2e8","d784837e":"\uc778\ub371\uc2a4\n\n1. \ubaa9\ud45c\n2. \ud0d0\uc0c9\uc801 \uc790\ub8cc \ubd84\uc11d \n3. \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \n4. \ubaa8\ub378\ub9c1\n    1. \uc758\uc0ac\uacb0\uc815 \ub098\ubb34\n    2. \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\n    3. XGBoost\n5. \uacb0\ub860","5792912f":"n_estimators\uac00 100\uac1c \ub54c mae\uac00 \uac00\uc7a5 \uc791\uc74c","d1b0fa71":"# (2) \ubc94\uc8fc\ud615 \ub370\uc774\ud130 (Categorical Data) \ubd84\uc11d","e1aa7af0":"# (1) \uc5f0\uc18d\ud615 \ub370\uc774\ud130(Continuous Data) \ubd84\uc11d","5c7d6267":"**1) DecisionTreeRegressor**","0d72f387":"# 3. Feature Engineering","d730ef41":"LTV\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\ub2e4\uace0 \uc0dd\uac01\ud558\ub294 15\uac1c\uc758 \uceec\ub7fc \ub4dc\ub86d","85b4139f":"n_estimators(\uc758\uc0ac\uacb0\uc815 \ub098\ubb34\uac1c\uc218)\uac00 500\uac1c\uc77c \ub54c mae\uac00 \uac00\uc7a5 \uc791\uc74c","4354c52c":"# 5. Conclusion","72c3b3d5":"# 1. \ubaa9\ud45c(Objective)\n\n\uc790\ub3d9\ucc28 \ubcf4\ud5d8\ud68c\uc0ac\uc758 \uace0\uac1d LTV\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774 \ubaa9\ud45c\uc774\ub2e4. LTV\ub97c \ud3ec\ud568\ud574 24\uac1c\uc758 \uceec\ub7fc \ub370\uc774\ud130\uac00 \uc788\uc73c\uba70, \uc885\uc18d\ubcc0\uc218\uc778 LTV\uc640 \ub098\uba38\uc9c0 23\uac1c \uceec\ub7fc(\ub3c5\ub9bd\ubcc0\uc218)\uacfc\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\uc744 \ud1b5\ud574 LTV\ub97c \uc608\uce21\ud558\uace0\uc790 \ud55c\ub2e4. "}}