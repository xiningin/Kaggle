{"cell_type":{"96aac8a5":"code","052b677e":"code","3193ab91":"code","a6ff355d":"code","bd77dd4c":"code","7fbf3c0b":"code","09b0c3fb":"code","380da807":"code","e3a7e1d4":"code","51005ee9":"code","223954c9":"code","93f2c829":"code","0de64a59":"code","89bea13e":"code","466d17ee":"code","b0d933cf":"code","b3c89691":"code","bbc77726":"code","6a1a961c":"code","9f2711b4":"code","47985695":"code","2b60b0fe":"code","6398cf97":"code","4376cb18":"code","795ecc7c":"code","03463ab6":"code","ebfe05ae":"code","4379c2fb":"code","149fe233":"code","f576953e":"code","5e0d5558":"code","1c1a0fd4":"code","f1a3b152":"code","66edf118":"code","987481d2":"code","45a82033":"code","73576f38":"code","54238834":"code","c0f04f5b":"code","0a386de6":"code","e568613a":"code","5c916e5a":"code","da830417":"code","84c065fa":"code","68d40a3c":"code","6ee640bc":"code","a22d1ee6":"code","5719fa33":"code","508f93ff":"code","297429f3":"code","0c6719ea":"code","d0082cfb":"code","01d25529":"code","870dccae":"code","9e82eaa6":"code","9ed38a95":"code","abb39fba":"markdown","c1ea95bb":"markdown","8a2c63aa":"markdown","fe0d4e4e":"markdown","b13dcda4":"markdown","bcf80c94":"markdown","f67285ca":"markdown","bfafa88c":"markdown","61c97c8c":"markdown","51329bf1":"markdown","81098a74":"markdown","4f18ca1a":"markdown","35009fdd":"markdown","6ea2c276":"markdown","b0b4d493":"markdown","cdaf846c":"markdown","fceac2ae":"markdown","410fdd70":"markdown","1086e8ae":"markdown","3024938a":"markdown","3712f740":"markdown","13ccb7c8":"markdown","753ebdb9":"markdown","ae8186b9":"markdown","fff6ad1f":"markdown","80efdfa4":"markdown","b7d71f1c":"markdown","efb62c43":"markdown","dff6dc29":"markdown","029bc3ba":"markdown","552e3554":"markdown","329b5bb0":"markdown","6bb3d82b":"markdown","033001f1":"markdown","317c2989":"markdown","714edb0a":"markdown","91b8633d":"markdown","11dce07b":"markdown","4f686bc0":"markdown","89089484":"markdown","7bec7165":"markdown","007eab2c":"markdown","4d857495":"markdown","53dc9f9f":"markdown","77c555d8":"markdown","1beefa28":"markdown","3fce7b1e":"markdown","5aa11e9e":"markdown","00fefe67":"markdown","de3905d5":"markdown","50731bb5":"markdown","658a95d5":"markdown","251f1c0e":"markdown","30592e5c":"markdown","65d9214f":"markdown","5e6dea1e":"markdown","c4804d18":"markdown","9e44bdc6":"markdown","86394ccf":"markdown","22deb400":"markdown","a8af66ba":"markdown","e5c4da79":"markdown","829999b5":"markdown","b2840207":"markdown","a39f2a2f":"markdown","3076eecf":"markdown","6e8834e0":"markdown","2d35afcb":"markdown","8753371b":"markdown","2cf162b0":"markdown","06bebfe1":"markdown"},"source":{"96aac8a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom collections import Counter\nimport re\nfrom nltk.corpus import stopwords\nfrom tqdm import tqdm\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nfrom scipy.sparse import hstack\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","052b677e":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!unzip -n \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip -n \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","3193ab91":"train = pd.read_csv(\"train.tsv\", sep=\"\\t\")\ntest = pd.read_csv(\"test_stg2.tsv\", sep=\"\\t\")","a6ff355d":"train.head(5)","bd77dd4c":"test.head(5)","7fbf3c0b":"train.columns","09b0c3fb":"test.columns","380da807":"train.info()","e3a7e1d4":"test.info()","51005ee9":"# Amount of missing values in both train and test datasets (by Number)\nmissing_data = pd.DataFrame({'train_missing': train.drop([\"train_id\", \"price\"], axis=1).isnull().sum(), 'test_missing': test.drop([\"test_id\"], axis=1).isnull().sum() })\nmissing_data","223954c9":"# Amount of missing values in both train and test datasets (by Percentage)\ndf = pd.concat([train.drop([\"train_id\", \"price\"], axis=1).isna().sum(), test.drop([\"test_id\"], axis=1).isna().sum()], axis=1)\ndf.columns = [\"Train\", \"Test\"]\n\nfig, axs = plt.subplots(nrows=2, ncols=6, figsize=(16,6))\n\ni=0\nfig.set_facecolor('white')\nfor r in np.arange(1):\n    for c in np.arange(6):\n        explode = (0, 0.1)\n        axs[r, c].pie([len(train)-df.iloc[i][\"Train\"], df.iloc[i][\"Train\"]], \n                      labels=[\"Filled\\nvalues\", \"Missing\\nvalues\"],\n                      explode=explode, autopct=\"%1.1f%%\", labeldistance=1.2,\n                      colors=[\"teal\", \"salmon\"], startangle=55)\n        axs[r+1, c].pie([len(test)-df.iloc[i][\"Test\"], df.iloc[i][\"Test\"]], \n                      labels=[\"Filled\\nvalues\", \"Missing\\nvalues\"],\n                      explode=explode, autopct=\"%1.1f%%\", labeldistance=1.2,\n                      colors=[\"teal\", \"salmon\"], startangle=55)\n        axs[r, c].set_title(\"Train: \" + df.index[i], pad=10)\n        axs[r+1, c].set_title(\"Test: \" + df.index[i], pad=10)\n        i += 1\nfig.suptitle(\"Amount of missing values in train and test datasets\")\nplt.show();","93f2c829":"# Top 5 names in each dataset\ntrain[\"name\"].value_counts()[:5], test[\"name\"].value_counts()[:5]","0de64a59":"# Top 5 index's name\ntop_name = Counter(list(train.name))\nx,y = zip(*top_name.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 name')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","89bea13e":"# Top 5 brand names in each dataset\n# Replace null value in brand_name column by \"missing\"\ntrain.brand_name.fillna(value=\"missing\", inplace=True)\ntest.brand_name.fillna(value=\"missing\", inplace=True)\ntrain[\"brand_name\"].value_counts()[:5], test[\"brand_name\"].value_counts()[:5]","466d17ee":"# Top 5 brand name\ntop_brand = Counter(list(train.brand_name))\nx,y = zip(*top_brand.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 brand name')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","b0d933cf":"# Top 5 category names\ntrain[\"category_name\"].value_counts()[:5], test[\"category_name\"].value_counts()[:5]","b3c89691":"# Top 5 item descriptions in each dataset\ntrain[\"item_description\"].value_counts()[:5], test[\"item_description\"].value_counts()[:5]","bbc77726":"# Item condition distribution\nfig, ax = plt.subplots(figsize=(7,7))\nax.set_title('Item condition')\nsns.countplot(x='item_condition_id', data=train, ax=ax)","6a1a961c":"# Price distribution\nfig, ax = plt.subplots(figsize=(14, 12))\nax.hist(train.price,bins = 50, range = [0,300],label=\"Price\",color=\"sandybrown\", edgecolor=\"black\")\nax.set_title(\"Price distribution\", fontsize=20, pad=5)\nax.set_xlabel('Price',fontsize=15)\nax.set_ylabel('Amount of items', fontsize=15)\nax.set_yticks(np.arange(0, 1000000, 100000))\nax.tick_params(axis=\"y\", labelsize=13)\nax.tick_params(axis=\"x\", labelsize=13)\nax.grid(axis=\"y\")\nax.margins(0.05, 0.05)\nplt.show()","9f2711b4":"# Shipping distribution\nfig, ax = plt.subplots(figsize=(7,7))\nax.set_title('Shipping')\nsns.countplot(x='shipping', data=train, ax=ax)","47985695":"# Split category_name to first, second and third category\ntrain[[\"first_category\", \"second_category\", \"third_category\"]] = train[\"category_name\"].str.split('\/', 2, expand=True)\ntest[[\"first_category\", \"second_category\", \"third_category\"]] = test[\"category_name\"].str.split('\/', 2, expand=True)\ntrain.head(5)","2b60b0fe":"# Top 5 popular first category\n\n# Remove null value\ntrain.first_category.fillna(value=\"missing\", inplace=True)\ntest.first_category.fillna(value=\"missing\", inplace=True)\ntop = Counter(list(train.first_category))\nx,y = zip(*top.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 first category')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","6398cf97":"# Top 5 popular first category\n# Remove null value\ntrain.second_category.fillna(value=\"missing\", inplace=True)\ntest.second_category.fillna(value=\"missing\", inplace=True)\ntop = Counter(list(train.second_category))\nx,y = zip(*top.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 second category')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","4376cb18":"# Top 5 popular first category\n# Remove null value\ntrain.third_category.fillna(value=\"missing\", inplace=True)\ntest.third_category.fillna(value=\"missing\", inplace=True)\ntop = Counter(list(train.third_category))\nx,y = zip(*top.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 third category')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","795ecc7c":"# Replace null value by \"missing\" in \"train\" data\ntrain.category_name.fillna(value=\"missing\", inplace=True)\ntrain.brand_name.fillna(value=\"missing\", inplace=True)\ntrain.item_description.fillna(value=\"missing\", inplace=True)\ntrain.first_category.fillna(value=\"missing\", inplace=True)\ntrain.second_category.fillna(value=\"missing\", inplace=True)\ntrain.third_category.fillna(value=\"missing\", inplace=True)","03463ab6":"# Replace null value by \"missing\" in \"test\" data\ntest.category_name.fillna(value=\"missing\", inplace=True)\ntest.brand_name.fillna(value=\"missing\", inplace=True)\ntest.item_description.fillna(value=\"missing\", inplace=True)\ntest.first_category.fillna(value=\"missing\", inplace=True)\ntest.second_category.fillna(value=\"missing\", inplace=True)\ntest.third_category.fillna(value=\"missing\", inplace=True)","ebfe05ae":"# Remove 4 lines which item_description is misssing\ntrain = train[train.item_description != 'missing'].reset_index(drop=True)","4379c2fb":"# Top 5 popular item description \ntop = Counter(list(train.item_description))\nx,y = zip(*top.most_common(5))\nplt.figure(figsize=[6,5])\nplt.barh(x, y)\nfor i, val in enumerate(y):\n           plt.annotate(val, (y[i], x[i]), color='black')\nplt.gca().invert_yaxis()\nplt.ylabel('Top 5 item description')\nplt.xlabel('count')\nplt.grid(False, axis='y')\nplt.show()","149fe233":"train.drop_duplicates(subset=None, keep='first', inplace=False)","f576953e":"# Remove rows with price <= 0\ntrain = train[train.price > 0].reset_index(drop=True)","5e0d5558":"sns.distplot(np.log1p(train['price']))","1c1a0fd4":"train['price'] = np.log1p(train['price'])","f1a3b152":"train.head(5)","66edf118":"# Import stopwords\n\nstop_words = set(stopwords.words(\"english\"))\nstop_words.update(['.', ',', '\"', \"'\", ':', ';', '(', ')', '[', ']', '{', '}'])\n\n# Processing \ndef processing_data(col):\n    new_col = []\n    for text in tqdm(col.values):\n        # Remove [rm] tag\n        text = text.replace('[rm]', '')\n        # Remove single character between 2 words\n        text = re.sub('[^A-Za-z0-9]+', ' ', text)\n        # Remove stop words\n        text = ' '.join(word for word in text.lower().split() if word not in stop_words)\n        new_col.append(text.strip())\n    return new_col;","987481d2":"train['name'] = processing_data(train['name'])\ntest['name'] = processing_data(test['name'])\n\ntrain['item_description'] = processing_data(train['item_description'])\ntest['item_description'] = processing_data(test['item_description'])","45a82033":"train.head(5)","73576f38":"tfidf = TfidfVectorizer(max_features=50000, ngram_range=(1, 3), stop_words='english')\n# Vectorizer item_description \ntrain_des = tfidf.fit_transform(train['item_description'])\ntest_des = tfidf.transform(test['item_description'])","54238834":"count_vec = CountVectorizer()\n# Vectorizer name\ntrain_name = count_vec.fit_transform(train['name'])\ntest_name = count_vec.transform(test['name'])","c0f04f5b":"train_name.shape","0a386de6":"train_des.shape","e568613a":"test.head(5)","5c916e5a":"# Label Binarizer\nlb = LabelBinarizer(sparse_output=True)\n# LB brand name\ntrain_brand = lb.fit_transform(train['brand_name'])\ntest_brand = lb.transform(test['brand_name'])\n# LB category\ntrain_first = lb.fit_transform(train['first_category'])\ntest_first = lb.transform(test['first_category'])\ntrain_second = lb.fit_transform(train['second_category'])\ntest_second = lb.transform(test['second_category'])\ntrain_third = lb.fit_transform(train['third_category'])\ntest_third = lb.transform(test['third_category'])\n# LB item condition id\ntrain_item_condition_id = lb.fit_transform(train['item_condition_id'])\ntest_item_condition_id = lb.transform(test['item_condition_id'])\n# LB shipping\ntrain_shipping = lb.fit_transform(train['shipping'])\ntest_shipping = lb.transform(test['shipping'])","da830417":"new_train = hstack((train_name, train_des, train_brand, train_first, train_second, train_third, train_item_condition_id, train_shipping))\n# Delete data\ndel train_name, train_des, train_brand, train_first, train_second, train_third, train_item_condition_id, train_shipping","84c065fa":"del test\nnew_test = hstack((test_name, test_des, test_brand, test_first, test_second, test_third, test_item_condition_id, test_shipping)).tocsr()\n# Delete data\ndel test_name, test_des, test_brand, test_first, test_second, test_third, test_item_condition_id, test_shipping","68d40a3c":"import gc\nnew_train.shape\ngc.collect()","6ee640bc":"#source: https:\/\/www.kaggle.com\/jpopham91\/rmlse-vectorized\n\n#A function to calculate Root Mean Squared Logarithmic Error (RMSLE)\ndef rmsle(y, y_pred):\n    return np.sqrt(np.mean(np.power(np.log1p(y) - np.log1p(y_pred), 2)))\n\ndef evaluate(y, y_pred):\n    return rmsle(np.expm1(y), np.expm1(y_pred))","a22d1ee6":"from sklearn.model_selection import train_test_split\ndef model_train_predict(model, matrix):\n    X = matrix\n    X_train, X_test, y_train, y_test = train_test_split(X, train['price'], test_size=0.1)\n\n    model.fit(X_train, y_train)\n    y_pre = model.predict(X_test)\n    del X, X_train, X_test, y_train\n    \n    return y_pre, y_test","5719fa33":"from sklearn.linear_model import Ridge\nridge = Ridge(solver='auto', fit_intercept=True, alpha=4.5, max_iter=200, normalize=False, tol=0.01)\n\ny_pred_Ridge, y_test = model_train_predict(ridge, new_train)\n\nrmsle_Ridge = evaluate(y_test, y_pred_Ridge)\nprint('gi\u00e1 tr\u1ecb RMSLE c\u1ee7a m\u00f4 h\u00ecnh Ridge: {}'.format(rmsle_Ridge))","508f93ff":"# Create model\nmodel = Ridge(solver='auto', fit_intercept=True, alpha=4.5, max_iter=200, normalize=False, tol=0.01)","297429f3":"# Train model\nX_train = new_train\ny_train = train['price']\n\nmodel.fit(X_train, y_train)","0c6719ea":"X_test = new_test","d0082cfb":"# D\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u1ecb price \npreds = model.predict(X_test)\npreds\npreds = np.expm1(preds)\npreds","01d25529":"preds.shape","870dccae":"# Read sample submission\nsubmission = pd.read_csv('sample_submission_stg2.csv')\nsubmission.shape","9e82eaa6":"# Replace 'price' in file submission\nsubmission.loc[:, 'price'] = preds\n# Result\nsubmission","9ed38a95":"# Export to submission\nsubmission.to_csv('submission.csv', index=False)","abb39fba":"**Item condition**","c1ea95bb":"Trong b\u00e0i to\u00e1n n\u00e0y, ch\u00fang ta s\u1ebd l\u1ef1a ch\u1ecdn m\u00f4 h\u00ecnh Ridge \u0111\u1ec3 tr\u00e1nh b\u1ecb Overfitting trong khi v\u1eabn gi\u1eef nguy\u00ean \u0111\u01b0\u1ee3c t\u00ednh t\u1ed5ng qu\u00e1t c\u1ee7a n\u00f3 (trong c\u1ea3 2 b\u1ed9 d\u1eef li\u1ec7u). ","8a2c63aa":"### \u0110\u1ecdc d\u1eef li\u1ec7u","fe0d4e4e":"* H\u1ed3i quy Ridge l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt \u0111\u1ec3 ph\u00e2n t\u00edch nhi\u1ec1u d\u1eef li\u1ec7u h\u1ed3i quy ch\u1ecbu s\u1ef1 \u0111a h\u00ecnh. Khi \u0111a c\u1ed9ng tuy\u1ebfn x\u1ea3y ra, \u01b0\u1edbc t\u00ednh b\u00ecnh ph\u01b0\u01a1ng t\u1ed1i thi\u1ec3u l\u00e0 kh\u00f4ng thi\u00ean v\u1ecb, nh\u01b0ng ph\u01b0\u01a1ng sai c\u1ee7a ch\u00fang l\u1edbn n\u00ean ch\u00fang c\u00f3 th\u1ec3 c\u00e1ch xa gi\u00e1 tr\u1ecb th\u1ef1c. B\u1eb1ng c\u00e1ch th\u00eam m\u1ed9t m\u1ee9c \u0111\u1ed9 sai l\u1ec7ch cho c\u00e1c \u01b0\u1edbc t\u00ednh h\u1ed3i quy, h\u1ed3i quy s\u01b0\u1eddn gi\u00fap gi\u1ea3m c\u00e1c l\u1ed7i ti\u00eau chu\u1ea9n.\n* M\u1ed9t m\u1ee5c ti\u00eau ti\u00ean quy\u1ebft \u0111\u1ec3 c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng \u0111\u01b0\u1ee3c m\u00f4 h\u00ecnh v\u00e0o th\u1ef1c ti\u1ebfn \u0111\u00f3 l\u00e0 ch\u00fang ta c\u1ea7n gi\u1ea3m thi\u1ec3u hi\u1ec7n t\u01b0\u1ee3ng qu\u00e1 kh\u1edbp. \u0110\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c m\u1ee5c ti\u00eau \u0111\u00f3, m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c hu\u1ea5n luy\u1ec7n \u0111\u01b0\u1ee3c k\u00ec v\u1ecdng s\u1ebd n\u1eafm b\u1eaft \u0111\u01b0\u1ee3c qui lu\u1eadt t\u1ed5ng qu\u00e1t t\u1eeb t\u1eadp hu\u1ea5n luy\u1ec7n (train dataset) m\u00e0 qui lu\u1eadt \u0111\u00f3 ph\u1ea3i \u0111\u00fang tr\u00ean nh\u1eefng d\u1eef li\u1ec7u m\u1edbi m\u00e0 n\u00f3 ch\u01b0a \u0111\u01b0\u1ee3c h\u1ecdc. Th\u00f4ng th\u01b0\u1eddng t\u1eadp d\u1eef li\u1ec7u m\u1edbi \u0111\u00f3 \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 t\u1eadp ki\u1ec3m tra (test dataset). \u0110\u00e2y l\u00e0 m\u1ed9t t\u1eadp d\u1eef li\u1ec7u \u0111\u1ed9c l\u1eadp \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh. \n* Ph\u01b0\u01a1ng tr\u1ec9nh t\u1ed5ng qu\u00e1t c\u1ee7a linear regression cho \u0111\u01a1n bi\u1ebfn v\u00e0 \u0111a bi\u1ebfn c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb \u03b5\u1edf \u0111\u1eb1ng sau m\u1ed7i ph\u01b0\u01a1ng tr\u00ecnh. \u0110\u00e2y l\u00e0 sai s\u1ed1 c\u1ee7a c\u00e1c ph\u01b0\u01a1ng tr\u00ecnh h\u1ed3i quy, l\u00e0 ch\u00eanh l\u1ec7ch gi\u1eefa k\u1ebft qu\u1ea3 d\u1ef1 b\u00e1o v\u00e0 k\u1ebf qu\u1ea3 th\u1ef1c t\u1ebf. C\u00e1c sai s\u1ed1 \u0111\u01b0\u1ee3c chia l\u00e0m 2 ph\u1ea7n: Biased (thi\u00ean v\u1ecb), Variance ( ph\u01b0\u01a1ng sai). Bias l\u00e0 tr\u01b0\u1eddng h\u1ee3p m\u00f4 h\u00ecnh ph\u00e2n t\u00edch kh\u00f4ng kh\u1edbp, kh\u00f4ng \u0111em l\u1ea1i k\u1ebft qu\u1ea3 kh\u00f4ng ch\u00ednh x\u00e1c tr\u00ean t\u1eadp d\u1eef li\u1ec7u training, c\u00f2n Variance l\u00e0 \u0111\u1ed1i v\u1edbi t\u1eadp d\u1eef li\u1ec7u test. M\u1ed1i quan h\u1ec7 \u0111\u00e1nh \u0111\u1ed5i gi\u1eefa Biased v\u00e0 Variance x\u00e9t tr\u00ean m\u1ee9c \u0111\u1ed9 ph\u1ee9c t\u1ea1p c\u1ee7a m\u00f4 h\u00ecnh\n* C\u00f4ng th\u1ee9c t\u1ed5ng qu\u00e1t c\u1ee7a m\u00f4 h\u00ecnh:","b13dcda4":"### Ph\u00e2n t\u00edch d\u1eef li\u1ec7u","bcf80c94":"$$ \\epsilon = \\sqrt{\\frac{1}{n} \\sum_{i=1}^n (\\log(p_i + 1) - \\log(a_i+1))^2 } $$\n\nTrong \u0111\u00f3:\n* \u03f5 l\u00e0 gi\u00e1 tr\u1ecb RMSLE (score)\n* n l\u00e0 t\u1ed5ng s\u1ed1 quan s\u00e1t trong t\u1eadp d\u1eef li\u1ec7u (public\/private)\n* pi l\u00e0 gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n c\u1ee7a s\u1ea3n ph\u1ea9m i\n* ai l\u00e0 gi\u00e1 tr\u1ecb th\u1ef1c c\u1ee7a s\u1ea3n ph\u1ea9m i\n* log(x) l\u00e0 logarit c\u01a1 s\u1ed1 e (Logarit t\u1ef1 nhi\u00ean) c\u1ee7a x","f67285ca":"Ph\u1ea7n l\u1edbn c\u00e1c s\u1ea3n ph\u1ea9m l\u00e0 Bundle, Reserved, Converse v\u00e0 Dress. \u0110i\u1ec1u n\u00e0y cho th\u1ea5y m\u1ed1i quan t\u00e2m c\u1ee7a kh\u00e1ch h\u00e0ng v\u00e0 ch\u1ee7 \u0111\u1ea7u t\u01b0 \u0111\u1ebfn c\u00e1c s\u1ea3n ph\u1ea9m qu\u1ea7n \u00e1o b\u1ed9, gi\u00e0y, v\u00e1y l\u00e0 nhi\u1ec1u nh\u01b0 th\u1ebf n\u00e0o.","bfafa88c":"**Chia c\u1ed9t category_name th\u00e0nh 3 ph\u1ea7n**","61c97c8c":"Trong \u0111\u00f3:\n* train_id, test_id l\u00e0 s\u1ed1 id c\u1ee7a c\u00e1c s\u1ea3n ph\u1ea9m\n* name l\u00e0 t\u00ean s\u1ea3n ph\u1ea9m\n* item_condition_id l\u00e0 id t\u00ecnh tr\u1ea1ng c\u1ee7a s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi ng\u01b0\u1eddi b\u00e1n\n* category_name l\u00e0 ph\u00e2n lo\u1ea1i s\u1ea3n ph\u1ea9m\n* brand_name l\u00e0 t\u00ean th\u01b0\u01a1ng hi\u1ec7u\n* price l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a s\u1ea3n ph\u1ea9m. L\u00e0 m\u1ee5c ti\u00eau c\u1ee7a b\u00e0i to\u00e1n c\u1ee7a ch\u00fang ta, \u0111\u01a1n v\u1ecb: USD.\n* shipping bi\u1ec3u th\u1ecb cho ng\u01b0\u1eddi tr\u1ea3 ph\u00ed ti\u1ec1n ship \u0111\u01b0\u1ee3c bi\u1ec3u th\u1ecb b\u1edfi 0 (buyer - ng\u01b0\u1eddi mua) v\u00e0 1 (seller - ng\u01b0\u1eddi b\u00e1n)\n* item_description l\u00e0 m\u00f4 t\u1ea3 chi ti\u1ebft s\u1ea3n ph\u1ea9m","51329bf1":"Gh\u00e9p c\u00e1c d\u1eef li\u1ec7u tr\u00ean v\u00e0o m\u1ed9t ma tr\u1eadn \u0111\u1ec3 ti\u1ebfn h\u00e0nh train model b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng h\u00e0m hstack.\n","81098a74":"**Price distribution**","4f18ca1a":"![image.png](attachment:d61058f1-8a9d-4536-967a-a3192484c353.png)","35009fdd":"Ta c\u00f3 th\u1ec3 th\u1ea5y ph\u1ea7n l\u1edbn c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u1ec1u kh\u00f4ng c\u00f3 th\u01b0\u01a1ng hi\u1ec7u, v\u00e0 m\u1ed9t s\u1ed1 s\u1ea3n ph\u1ea9m c\u00f3 th\u01b0\u01a1ng hi\u1ec7u \u0111\u1ee9ng \u0111\u1ea7u nh\u01b0: PINK, Nike, Victoria's Secret, LuLaRoe, Apple \u0111\u1ec1u l\u00e0 nh\u1eefng th\u01b0\u01a1ng hi\u1ec7u n\u1ed5i ti\u1ebfng tr\u00ean th\u1ebf gi\u1edbi. S\u1ed1 li\u1ec7u n\u00e0y cho th\u1ea5y ng\u01b0\u1eddi d\u00f9ng ch\u1ec9 m\u1ed9t ph\u1ea7n quan t\u00e2m t\u1edbi th\u01b0\u01a1ng hi\u1ec7u c\u1ee7a s\u1ea3n ph\u1ea9m, s\u1ef1 quan t\u00e2m c\u1ee7a h\u1ecd c\u00f3 l\u1ebd s\u1ebd ph\u1ee5 thu\u1ed9c nhi\u1ec1u v\u00e0o chi ph\u00ed v\u00e0 ch\u1ea5t l\u01b0\u1ee3ng c\u1ee7a s\u1ea3n ph\u1ea9m nhi\u1ec1u h\u01a1n.","6ea2c276":"**X\u1eed l\u00fd c\u00e1c c\u00e2u d\u00e0i ho\u1eb7c ch\u1ee9a nh\u1eefng t\u1eeb ng\u1eef kh\u00f4ng mang \u00fd ngh\u0129a trong name v\u00e0 item_description**","b0b4d493":"**Ki\u1ec3m tra c\u00e1c t\u1eadp d\u1eef li\u1ec7u b\u1ecb tr\u1ed1ng**","cdaf846c":"\\begin{align*}\n\\mathbf{tf}(t, d) = \\frac{ \\mathbf{f}(t, d)}{ max \\{ \\mathbf{f}(w, d) : w \u2208 d \\} }\n\\end{align*}","fceac2ae":"H\u1ea7u h\u1ebft s\u1ea3n ph\u1ea9m \u0111\u1ec1u ch\u01b0a c\u00f3 m\u00f4 t\u1ea3.","410fdd70":"H\u1ec7 s\u1ed1 \u03bb hay c\u00f2n g\u1ecdi l\u00e0 tham s\u1ed1 Regularization, hay tham s\u1ed1 Penalty, hay tham s\u1ed1 Srinkage, l\u00e0 s\u1ed1 lu\u00f4n d\u01b0\u01a1ng, l\u00e0 gi\u00e1 tr\u1ecb m\u00e0 \u1edf \u0111\u00f3 ph\u01b0\u01a1ng tr\u00ecnh tuy\u1ebfn t\u00ednh s\u1ebd \u0111\u01b0\u1ee3c \"tinh ch\u1ec9nh\" sao cho sai s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c gi\u1ea3m t\u1ed1i \u0111a, ngh\u0129a l\u00e0 gi\u00e1 tr\u1ecb \u03bb n\u00e0o l\u00e0m cho MSE (\u1edf \u0111\u00e2y dung RMLSE) nh\u1ecf nh\u1ea5t th\u00ec m\u00f4 h\u00ecnh \u0111\u00f3 \u0111\u01b0\u1ee3c ch\u1ecdn, Wj l\u00e0 h\u1ec7 s\u1ed1 \u03b2 c\u1ee7a ph\u01b0\u01a1ng tr\u00ecnh h\u1ed3i quy tuy\u1ebfn t\u00ednh.","1086e8ae":"$$ LOSS = \\sum_{i=1}^M (y_i - \\sum_{j=0}^p (w_j \\times x_{ij}))^2 + \\lambda \\sum_{j=0}^p w_j^2 $$","3024938a":"### X\u1eed l\u00fd d\u1eef li\u1ec7u","3712f740":"<br> Do c\u00e1c d\u1eef li\u1ec7u v\u1eabn \u0111ang \u1edf d\u1ea1ng text n\u00ean ch\u00fang ta c\u1ea7n chuy\u1ec3n ch\u00fang v\u1ec1 d\u1ea1ng vector \u0111\u1ec3 x\u1eed l\u00fd tuy\u1ebfn t\u00ednh.\nTa s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n vectorize v\u0103n b\u1ea3n l\u00e0 TfidfVectorizer cho c\u00e1c d\u1eef li\u1ec7u d\u1ea1ng v\u0103n b\u1ea3n l\u00e0 'name' v\u00e0 'item_description'. <\/br>\nTrong khai ph\u00e1 d\u1eef li\u1ec7u v\u0103n b\u1ea3n (text mining), thu\u1eadt ng\u1eef TF-IDF (Term Frequency - Inverse Document Frequency) l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c th\u1ed1ng k\u00ea \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn r\u1ed9ng r\u00e3i nh\u1ea5t \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh \u0111\u1ed9 quan tr\u1ecdng c\u1ee7a m\u1ed9t t\u1eeb trong \u0111o\u1ea1n v\u0103n b\u1ea3n trong m\u1ed9t t\u1eadp nhi\u1ec1u \u0111o\u1ea1n v\u0103n b\u1ea3n kh\u00e1c nhau. N\u00f3 th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t tr\u1ecdng s\u1ed1 trong vi\u1ec7c khai ph\u00e1 d\u1eef li\u1ec7u v\u0103n b\u1ea3n. TF-IDF chuy\u1ec3n \u0111\u1ed5i d\u1ea1ng bi\u1ec3u di\u1ec5n v\u0103n b\u1ea3n th\u00e0nh d\u1ea1ng kh\u00f4ng gian vector (VSM), ho\u1eb7c th\u00e0nh nh\u1eefng vector th\u01b0a th\u1edbt.\n* TF: Term Frequency(T\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb) l\u00e0 s\u1ed1 l\u1ea7n t\u1eeb xu\u1ea5t hi\u1ec7n trong v\u0103n b\u1ea3n.\n* IDF: Inverse Document Frequency(Ngh\u1ecbch \u0111\u1ea3o t\u1ea7n su\u1ea5t c\u1ee7a v\u0103n b\u1ea3n), gi\u00fap \u0111\u00e1nh gi\u00e1 t\u1ea7m quan tr\u1ecdng c\u1ee7a m\u1ed9t t\u1eeb .\n* Khi \u0111\u00f3, ta thu \u0111\u01b0\u1ee3c c\u00f4ng th\u1ee9c t\u00ednh ho\u00e0n ch\u1ec9nh c\u1ee7a TF-IDF l\u00e0 t\u00edch c\u1ee7a gi\u00e1 tr\u1ecb TF v\u00e0 IDF.","13ccb7c8":"**So s\u00e1nh s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m c\u00f3 ph\u00ed ship \u0111\u01b0\u1ee3c tr\u1ea3 b\u1edfi kh\u00e1ch h\u00e0ng v\u00e0 ng\u01b0\u1eddi b\u00e1n**","753ebdb9":"### Import d\u1eef li\u1ec7u","ae8186b9":"<br> \u0110\u1ec3 tr\u00e1nh hi\u1ec7n t\u01b0\u1ee3ng OverFit, ta s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt Cross Validation. <\/br>\nTa s\u1ebd s\u1eed d\u1ee5ng h\u00e0m train_test_split c\u1ee7a sklearn \u0111\u1ec3 l\u1ea5y 10% c\u1ee7a d\u1eef li\u1ec7u c\u1ed9t \"price\" \u0111\u1ec3 train m\u00f4 h\u00ecnh.","fff6ad1f":"**Xem l\u1ea1i data sau khi preprocessing:**","80efdfa4":"Do c\u00f3 nhi\u1ec1u t\u1eeb, k\u00fd t\u1ef1 kh\u00f4ng \u0111em l\u1ea1i hi\u1ec7u qu\u1ea3 trong vi\u1ec7c di\u1ec5n \u0111\u1ea1t \u00fd ngh\u0129a c\u1ee7a c\u00e2u, ta c\u00f3 th\u1ec3 lo\u1ea1i b\u1ecf ch\u00fang \u0111\u1ec3 vi\u1ec7c d\u1ef1 \u0111o\u00e1n \u0111\u1ea1t hi\u1ec7u qu\u1ea3 t\u1ed1t nh\u1ea5t.\n* Lo\u1ea1i b\u1ecf c\u00e1c d\u1ea5u c\u00e2u\n* Lo\u1ea1i b\u1ecf m\u1ed9t s\u1ed1 t\u1eeb ng\u1eafn (stopwords)","b7d71f1c":"\u0110\u00e2y l\u00e0 b\u00e0i to\u00e1n s\u1eed d\u1ee5ng c\u00e1c th\u00f4ng s\u1ed1, th\u01b0\u01a1ng hi\u1ec7u, ... c\u1ee7a m\u1eb7t h\u00e0ng \u0111\u1ec3 \u0111\u01b0a ra d\u1ef1 \u0111o\u00e1n gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m.","efb62c43":"**Lo\u1ea1i b\u1ecf nh\u1eefng h\u00e0ng c\u00f3 price <= 0**","dff6dc29":"## Rank tr\u00ean kaggle (link, h\u00ecnh ch\u1ee5p)","029bc3ba":"### Label Binarize","552e3554":"### Vectorizes data","329b5bb0":"Ta c\u00f3 th\u1ec3 th\u1ea5y, m\u1ee5c first_category \u0111\u1eb7c tr\u01b0ng cho lo\u1ea1i s\u1ea3n ph\u1ea9m n\u00f3i chung: (VD nh\u01b0 Women, Beauty, Kids, Electronics, Men). Trong \u0111\u00f3, Women \u0111\u1ee9ng \u0111\u1ea7u v\u1edbi 663988 l\u1edbn h\u01a1n m\u1ee5c th\u1ee9 hai (Beauty v\u1edbi 207724). T\u1eeb \u0111\u00f3 cho th\u1ea5y, ph\u1ea7n l\u1edbn s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c h\u01b0\u1edbng t\u1edbi ph\u1ee5 n\u1eef v\u00e0 c\u0169ng c\u00f3 th\u1ec3 hi\u1ec3u l\u00e0 ph\u1ee5 n\u1eef l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng ti\u1ec1m n\u0103ng cho c\u00e1c nh\u00e0 \u0111\u1ea7u t\u01b0 h\u01b0\u1edbng t\u1edbi.","6bb3d82b":"Trong \u0111\u00f3:\n* tf(t, d): t\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb t trong v\u0103n b\u1ea3n d\n* f(t, d): S\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb t trong v\u0103n b\u1ea3n d\n* max({f(w, d) : w \u2208 d}): S\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb c\u00f3 s\u1ed1 l\u1ea7n xu\u1ea5t hi\u1ec7n nhi\u1ec1u nh\u1ea5t trong v\u0103n b\u1ea3n d\n* idf(t, D): gi\u00e1 tr\u1ecb idf c\u1ee7a t\u1eeb t trong t\u1eadp v\u0103n b\u1ea3n\n* |D|: T\u1ed5ng s\u1ed1 v\u0103n b\u1ea3n trong t\u1eadp D\n* |{d \u2208 D : t \u2208 d}|: th\u1ec3 hi\u1ec7n s\u1ed1 v\u0103n b\u1ea3n trong t\u1eadp D c\u00f3 ch\u1ee9a t\u1eeb t.\n* tfidf(t, d, D): tr\u1ecdng s\u1ed1 \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 t\u1ea7m quan tr\u1ecdng c\u1ee7a m\u1ed9t t\u1eeb t trong v\u0103n b\u1ea3n d trong t\u1eadp D.","033001f1":"S\u01a1 \u0111\u1ed3 th\u1ee9 ba, third_category th\u1ec3 hi\u1ec7n cho c\u00e1c lo\u1ea1i s\u1ea3n ph\u1ea9m n\u00f3i ri\u00eang nh\u01b0: T-shirts, Shoes, ... H\u1ea7u nh\u01b0 c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u1ee9ng \u0111\u1ea7u \u0111\u1ec1u h\u01b0\u1edbng v\u1ec1 trang ph\u1ee5c, tuy nhi\u00ean, m\u1ee5c Pants, Tights, Leggings \u0111\u1ee9ng \u0111\u1ea7u nh\u01b0ng c\u0169ng ch\u1ec9 chi\u1ebfm 60152. B\u1edfi v\u1eady, ta c\u00e0ng th\u1ea5y r\u00f5 \u0111\u01b0\u1ee3c s\u1ef1 \u0111a d\u1ea1ng v\u00e0 quy\u1ebft \u0111\u1ecbnh \u0111\u00fang \u0111\u1eafn c\u1ee7a c\u00e1c nh\u00e0 \u0111\u1ea7u t\u01b0 khi l\u1ef1a ch\u1ecdn th\u1ecb tr\u01b0\u1eddng v\u00e0 kinh doanh s\u1ea3n ph\u1ea9m h\u1ee3p l\u00fd.","317c2989":"**Li\u1ec7t k\u00ea top 5 c\u00e1c th\u00f4ng tin xu\u1ea5t hi\u1ec7n nhi\u1ec1u nh\u1ea5t v\u1ec1 c\u00e1c c\u1ed9t nh\u01b0: name, brand_name, category_name, item_description**","714edb0a":"**X\u00f3a c\u00e1c d\u1eef li\u1ec7u b\u1ecb tr\u00f9ng l\u1eb7p**","91b8633d":"Nh\u00ecn v\u00e0o s\u01a1 \u0111\u1ed3, second_category \u0111\u1eb7c tr\u01b0ng cho nhi\u1ec1u lo\u1ea1i s\u1ea3n ph\u1ea9m n\u00f3i ri\u00eang c\u00f3 c\u00f9ng m\u1ed9t \u0111i\u1ec3m chung (Athelic Apparel, Makeup, Top & Blouses, Shoes v\u00e0 Jeweiry). C\u00e1c lo\u1ea1i s\u1ea3n ph\u1ea9m kh\u00f4ng c\u00f3 nhi\u1ec1u s\u1ef1 ch\u00eanh l\u1ec7ch cho th\u1ea5y s\u1ef1 \u0111a d\u1ea1ng v\u1ec1 lo\u1ea1i v\u00e0 s\u1ef1 \u0111\u1ed3ng \u0111\u1ec1u c\u1ee7a th\u1ecb tr\u01b0\u1eddng th\u1ebf gi\u1edbi. ","11dce07b":"B\u1ed9 \"test\" c\u0169ng gi\u1ed1ng nh\u01b0 b\u1ed9 \"train\" tr\u1eeb c\u1ed9t price, \u0111\u00e2y l\u00e0 c\u1ed9t ph\u1ea3i \u0111o\u00e1n gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m t\u1eeb b\u00e0i to\u00e1n.","4f686bc0":"Ta c\u00f3 th\u1ec3 th\u1ea5y, ph\u00e2n b\u1ed1 c\u1ee7a h\u00e0m log(Price) kh\u00e1 \u0111\u1ed3ng d\u1ea1ng v\u1edbi d\u1ea1ng ph\u00e2n ph\u1ed1i chu\u1ea9n. V\u00ec v\u1eady, ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng h\u00e0m log(price) l\u00e0m output d\u1ef1 \u0111o\u00e1n cho b\u00e0i to\u00e1n.","89089484":"### S\u1ed1 li\u1ec7u \u0111\u00e1nh gi\u00e1","7bec7165":"<br> Sau khi lo\u1ea1i b\u1ecf nh\u1eefng h\u00e0ng c\u00f3 price <= 0, ta c\u00f3 th\u1ec3 xem x\u00e9t \u0111\u00e1nh gi\u00e1 log(price). <\/br>\n**Ph\u00e2n b\u1ed1 h\u00e0m log(price)**","007eab2c":"**Model train**","4d857495":"## Th\u1ef1c nghi\u1ec7m, b\u00e1o c\u00e1o k\u1ebft qu\u1ea3 (b\u1ea3ng, bi\u1ec3u, \u0111\u1ed3 th\u1ecb)","53dc9f9f":"\\begin{align*}\n\\mathbf{idf}(t, D) = \\log{ \\frac{|D|}{| \\{d \u2208 D : t \u2208 d \\} |}}\n\\end{align*}","77c555d8":"<br> Ph\u1ea7n l\u1edbn price c\u1ee7a c\u00e1c s\u1ea3n ph\u1ea9m n\u00e0y c\u00f3 gi\u00e1 tr\u1ecb t\u1eeb 0-50. Ta c\u00f3 th\u1ec3 th\u1ea5y s\u1ef1 ph\u00e2n b\u1ed1 kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u c\u1ee7a b\u1ed9 d\u1eef li\u1ec7u. <\/br>\nV\u00ec v\u1eady, thay v\u00ec \u0111\u00e1nh gi\u00e1 h\u00e0m price, ta s\u1ebd xem x\u00e9t h\u00e0m log(price).","1beefa28":"<br> S\u1eed d\u1ee5ng ph\u00e9p \u0111\u00e1nh gi\u00e1 RMSLE (Root Mean Squared Logarithmic Error - \u0111\u1ed9 \u0111o \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong b\u00e0i to\u00e1n Mercari Price Suggestion). <\/br>\n<br> L\u1ed7i logarit trung b\u00ecnh b\u00ecnh ph\u01b0\u01a1ng RMSLE l\u00e0 ph\u00e9p t\u00ednh l\u1ea5y \u0111\u1ed9 l\u1ec7ch chu\u1ea9n c\u1ee7a ph\u1ea7n d\u01b0. N\u00f3 \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00e1ch \u0111o s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n v\u00e0 gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf. Gi\u00e1 tr\u1ecb RMSLE c\u00e0ng nh\u1ecf t\u1ee9c l\u00e0 sai s\u1ed1 c\u00e0ng b\u00e9 th\u00ec m\u1ee9c \u0111\u1ed9 \u01b0\u1edbc l\u01b0\u1ee3ng cho th\u1ea5y \u0111\u1ed9 tin c\u1eady c\u1ee7a m\u00f4 h\u00ecnh c\u00f3 th\u1ec3 \u0111\u1ea1t cao nh\u1ea5t. <\/br>\nC\u00f4ng th\u1ee9c RMSLE \u0111\u01b0\u1ee3c t\u00ednh nh\u01b0 sau:\n\n\n","3fce7b1e":"### Clean d\u1eef li\u1ec7u","5aa11e9e":"**X\u1eed l\u00fd d\u1eef li\u1ec7u b\u1ecb tr\u1ed1ng**","00fefe67":"B\u1ed9 \"train\":\n* C\u00f3 3 c\u1ed9t thu\u1ed9c t\u00ednh int64, 1 c\u1ed9t thu\u1ed9c t\u00ednh float64, 3 c\u1ed9t thu\u1ed9c t\u00ednh object.\n* Trong s\u1ed1 8 c\u1ed9t, ch\u1ec9 c\u00f3 5 c\u1ed9t l\u00e0 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 data.\n* C\u00f3 3 c\u1ed9t c\u00f3 data tr\u1ed1ng l\u00e0: category_name, brand_name v\u00e0 item_description.\n* C\u1ed9t brand_name c\u00f3 r\u1ea5t nhi\u1ec1u \u00f4 b\u1ecf tr\u1ed1ng.\n* C\u00e1c c\u1ed9t b\u1ecb thi\u1ebfu d\u1eef li\u1ec7u \u0111\u1ec1u c\u00f3 \u0111\u1ecbnh d\u1ea1ng l\u00e0 string, n\u00ean \u0111\u01b0\u1ee3c thay th\u1ebf b\u1eb1ng m\u1ed9t c\u1ee5m string kh\u00e1c. VD: \"missing\".","de3905d5":"Ta c\u00f3 th\u1ec3 th\u1ea5y l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m c\u00f3 ph\u00ed ship \u0111\u01b0\u1ee3c ng\u01b0\u1eddi b\u00e1n tr\u1ea3 (0) nhi\u1ec1u h\u01a1n l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m c\u00f3 ph\u00ed ship \u0111\u01b0\u1ee3c tr\u1ea3 b\u1edfi ng\u01b0\u1eddi mua (1). C\u00f3 th\u1ec3 th\u1ea5y, vi\u1ec7c c\u1eeda h\u00e0ng chi tr\u1ea3 ph\u00ed ship c\u0169ng l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c ti\u1ebfp c\u1eadn kh\u00e1ch h\u00e0ng t\u1ed1t \u0111\u00e1ng \u0111\u01b0\u1ee3c ch\u00fa tr\u1ecdng, \u0111i\u1ec1u n\u00e0y k\u00edch th\u00edch ng\u01b0\u1eddi mua c\u00f3 \u00fd \u0111\u1ecbnh mua h\u01a1n khi ch\u01b0a nh\u00ecn t\u1edbi gi\u00e1 th\u00e0nh c\u1ee7a s\u1ea3n ph\u1ea9m.","50731bb5":"### Merge c\u00e1c vector b\u1eb1ng hstack","658a95d5":"## M\u00f4 t\u1ea3 thu\u1eadt to\u00e1n, m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c ch\u1ecdn","251f1c0e":"<br> Do ph\u1ea7n category_name ch\u1ee9a 3 m\u1ee5c ri\u00eang bi\u1ec7t n\u00ean ch\u00fang ta s\u1ebd xem x\u00e9t m\u1ee9c \u0111\u1ed9 ph\u00e2n b\u1ed1 c\u1ee7a t\u1eebng ph\u1ea7n sau khi preprocess. <\/br>\nPh\u1ea7n item_description do c\u00f3 ch\u1ee9a nhi\u1ec1u t\u1eeb ng\u1eef v\u00e0 d\u1ea5u c\u00e2u kh\u00f4ng \u0111em l\u1ea1i hi\u1ec7u qu\u1ea3 trong vi\u1ec7c bi\u1ec3u th\u1ecb ngh\u0129a c\u1ee7a c\u00e2u n\u00ean c\u0169ng s\u1ebd xem x\u00e9t sau khi preprocess.","30592e5c":"**Ph\u00e2n b\u1ed1 c\u1ed9t \"item_description\"**","65d9214f":"### Gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u","5e6dea1e":"<br> Ta c\u00f3 th\u1ec3 th\u1ea5y t\u1eadp d\u1eef li\u1ec7u b\u1ecb tr\u1ed1ng kh\u00e1 nhi\u1ec1u \u1edf c\u00e1c c\u1ed9t:  category_name, brand_name v\u00e0 item_description. Ngo\u00e0i ra c\u00f2n c\u00f3 c\u00e1c c\u1ed9t category1,2,3 b\u1ecb tr\u1ed1ng. Do v\u1eady, ta c\u1ea7n ti\u1ebfn h\u00e0nh thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb tr\u1ed1ng \u0111\u1ea5y b\u1eb1ng gi\u00e1 tr\u1ecb h\u1ee3p l\u00fd. <\/br>\nTuy nhi\u00ean, trong b\u1ed9 d\u1eef li\u1ec7u \"train\", c\u1ed9t item_description b\u1ecb tr\u1ed1ng kh\u00e1 \u00edt (ch\u1ec9 4 h\u00e0ng), n\u00ean ta c\u00f3 th\u1ec3 x\u00f3a 4 h\u00e0ng n\u00e0y \u0111i.","c4804d18":"Trong b\u00e0i to\u00e1n n\u00e0y, t\u00f4i c\u0169ng \u0111\u00e3 th\u1eed nghi\u1ec7m v\u1edbi model Linear Regression v\u00e0 XGBoost. Tuy nhi\u00ean, trong qu\u00e1 tr\u00ecnh tri\u1ec3n khai c\u1ea3 hai model, t\u00f4i \u0111\u1ec1u kh\u00f4ng th\u1ec3 \u0111\u00e1p \u1ee9ng \u0111i\u1ec1u ki\u1ec7n th\u1eddi gian v\u00e0 b\u1ed9 nh\u1edb. B\u1edfi v\u1eady, trong qu\u00e1 tr\u00ecnh th\u1ef1c nghi\u1ec7m, t\u00f4i s\u1ebd l\u1ef1a ch\u1ecdn m\u00f4 h\u00ecnh Ridge \u0111\u1ec3 trainning.","9e44bdc6":"\\begin{align*}\n\\mathbf{tfidf}(t, d, D) = \\mathbf{tf}(t, d) * \\mathbf{idf}(t, D)\n\\end{align*}","86394ccf":"Ph\u1ea7n l\u1edbn c\u00e1c s\u1ea3n ph\u1ea9m \u0111\u1ec1u c\u00f3 ch\u1ec9 s\u1ed1 condition t\u1eeb 1-3. L\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m trong kho\u1ea3ng 4-5 r\u1ea5t \u00edt. N\u00f3 cho th\u1ea5y c\u00e1c s\u1ea3n ph\u1ea9m tung ra h\u1ea7u h\u1ebft l\u00e0 m\u1edbi v\u00e0 g\u1ea7n nh\u01b0 m\u1edbi. C\u00f3 th\u1ec3 nhu c\u1ea7u s\u1eed d\u1ee5ng \u0111\u1ed3 second hand c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u0169ng kh\u00e1 nhi\u1ec1u, khi gi\u00e1 s\u1ea3n ph\u1ea9m m\u1edbi ho\u00e0n to\u00e0n kh\u00e1 l\u00e0 \u0111\u1eaft \u0111\u1ecf v\u00e0 d\u00f9ng \u0111\u1ed3 second hand c\u00f3 l\u1ebd ch\u1ea5t l\u01b0\u1ee3ng kh\u00f4ng b\u1eb1ng nh\u01b0ng v\u1eabn ch\u1ea5p nh\u1eadn v\u00ec gi\u00e1 th\u00e0nh r\u1ebb h\u01a1n ban \u0111\u1ea7u.","22deb400":"Ta s\u1ebd ti\u1ebfn h\u00e0nh ki\u1ec3m tra d\u1eef li\u1ec7u d\u1ef1a tr\u00ean c\u00e1c c\u1ed9t c\u1ee7a b\u1ed9 d\u1eef li\u1ec7u ban \u0111\u1ea7u.","a8af66ba":"### Th\u1eed nghi\u1ec7m v\u1edbi m\u1ed9t s\u1ed1 m\u00f4 h\u00ecnh kh\u00e1c","e5c4da79":"Kh\u00f4ng c\u00f3 h\u00e0ng d\u1eef li\u1ec7u n\u00e0o b\u1ecb tr\u00f9ng l\u1eb7p","829999b5":"<br> T\u1eadp d\u1eef li\u1ec7u \"train.tsv\" bao g\u1ed3m 1482535 entries (s\u1ea3n ph\u1ea9m), m\u1ed7i s\u1ea3n ph\u1ea9m g\u1ed3m c\u00e1c c\u1ed9t thu\u1ed9c t\u00ednh nh\u01b0: t\u00ean s\u1ea3n ph\u1ea9m, ph\u00e2n lo\u1ea1i s\u1ea3n ph\u1ea9m, gi\u00e1 s\u1ea3n ph\u1ea9m, shipping id v\u00e0 m\u00f4 t\u1ea3 s\u1ea3n ph\u1ea9m. <\/br>\n<br> T\u1eadp d\u1eef li\u1ec7u \"test.tsv\" bao g\u1ed3m 3460725 entries (s\u1ea3n ph\u1ea9m), m\u1ed7i s\u1ea3n ph\u1ea9m g\u1ed3m c\u00e1c c\u1ed9t thu\u1ed9c t\u00ednh nh\u01b0: t\u00ean s\u1ea3n ph\u1ea9m, ph\u00e2n lo\u1ea1i s\u1ea3n ph\u1ea9m, shipping id v\u00e0 m\u00f4 t\u1ea3 s\u1ea3n ph\u1ea9m. <\/br>\nQua b\u01b0\u1edbc \u0111\u1ecdc d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o, ta c\u00f3 th\u1ec3 r\u00fat ra nh\u1eefng \u0111i\u1ec1u c\u1ea7n l\u00e0m nh\u01b0 sau:\n* C\u1ed9t category_name c\u00f3 3 ph\u1ea7n, c\u00f3 th\u1ec3 chia ra th\u00e0nh 3 c\u1ed9t ri\u00eang.\n* C\u00e1c c\u1ed9t category_name, brand_name v\u00e0 item_description c\u00f3 d\u1eef li\u1ec7u tr\u1ed1ng n\u00ean c\u1ea7n ph\u1ea3i c\u00f3 b\u01b0\u1edbc (fillnull) thay th\u1ebf b\u1eb1ng m\u1ed9t string kh\u00e1c \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u.\n* N\u1ebfu t\u1eadp d\u1eef li\u1ec7u c\u00f3 c\u00e1c h\u00e0ng tr\u00f9ng l\u1eb7p, c\u1ea7n ph\u1ea3i c\u00f3 b\u01b0\u1edbc x\u00f3a b\u1ecf tr\u00e1nh tr\u00f9ng d\u1eef li\u1ec7u gi\u1eefa c\u00e1c h\u00e0ng.\n* C\u1ed9t price c\u00f3 nh\u1eefng gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 l\u1edbn h\u01a1n ho\u1eb7c b\u1eb1ng 0, c\u1ea7n ph\u1ea3i x\u1eed l\u00fd.\n* C\u1ed9t price c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ph\u00e9p to\u00e1n log \u0111\u1ec3 gi\u1ea3m thi\u1ec3u s\u1ef1 ch\u00eanh l\u1ec7ch v\u1ec1 gi\u00e1 v\u00e0 l\u00e0m output cho b\u00e0i to\u00e1n h\u1ed3i quy.","b2840207":"<br> Input c\u1ee7a b\u00e0i to\u00e1n l\u00e0 t\u1eadp \"train.tsv\" v\u00e0 \"test.tsv\". <\/br>","a39f2a2f":"### M\u00f4 t\u1ea3 \u0111\u1ea7u v\u00e0o","3076eecf":"Li\u1ec7t k\u00ea c\u00e1c c\u1ed9t v\u00e0 th\u00f4ng tin c\u1ee7a c\u00e1c c\u1ed9t t\u1eeb \u0111\u1ea7u v\u00e0o","6e8834e0":"### M\u00f4 h\u00ecnh Ridge","2d35afcb":"## M\u00f4 t\u1ea3 b\u00e0i to\u00e1n (input, output)","8753371b":"V\u1edbi c\u00e1c d\u1eef li\u1ec7u \u1edf d\u1ea1ng Label, ch\u00fang ta c\u1ea7n bi\u1ebfn \u0111\u1ed5i ch\u00fang th\u00e0nh m\u1ed9t d\u1ea1ng s\u1ed1 \u0111\u1ea1i di\u1ec7n \u0111\u1ec3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng \u0111\u01b0a v\u00e0o input c\u1ee7a model.\nCh\u00fang ta s\u1eed d\u1ee5ng th\u01b0 vi\u00ean LabelBinarize c\u1ee7a sklearn.\nLabelBinarize s\u1ebd t\u1ea1o ra m\u1ed9t ma tr\u1eadn One-hot encoding. Thu\u1eadt to\u00e1n n\u00e0y s\u1ebd t\u1ea1o ra 1 c\u1ed9t boolean cho m\u1ed7i category. M\u1ed7i gi\u00e1 tr\u1ecb ch\u1ec9 c\u00f3 th\u1ec3 nh\u1eadn m\u1ed9t m\u1ed9t gi\u00e1 tr\u1ecb ri\u00eang bi\u1ec7t. \n* T\u1ee9c l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt bi\u1ec3u di\u1ec5n m\u1ed9t t\u1eeb d\u01b0\u1edbi d\u1ea1ng vector c\u00f3 d\u1ea1ng:\n\\begin{align*}\n\\mathbb{R}^{|V|x1}\n\\end{align*}\n","2cf162b0":"## Ph\u00e2n t\u00edch d\u1eef li\u1ec7u, convert, clean d\u1eef li\u1ec7u","06bebfe1":"### \u0110\u00e1nh gi\u00e1 chung\nQua b\u01b0\u1edbc ph\u00e2n t\u00edch d\u1eef li\u1ec7u, ta th\u1ea5y \u0111\u01b0\u1ee3c c\u00e1c th\u00f4ng s\u1ed1 c\u1ee7a s\u1ea3n ph\u1ea9m \u00edt nhi\u1ec1u \u1ea3nh h\u01b0\u1edfng t\u1edbi gi\u00e1 th\u00e0nh c\u1ee7a s\u1ea3n ph\u1ea9m. B\u1edfi v\u1eady, b\u00e0i to\u00e1n \u0111\u00e3 cho ho\u00e0n to\u00e0n c\u00f3 kh\u1ea3 n\u0103ng c\u00f3 th\u1ec3 d\u1ef1 \u0111o\u00e1n \u0111\u01b0\u1ee3c gi\u00e1 th\u00e0nh c\u1ee7a m\u1ed9t s\u1ea3n ph\u1ea9m th\u00f4ng qua c\u00e1c th\u00f4ng s\u1ed1 v\u00e0 c\u00e1c th\u00f4ng tin b\u00ean ngo\u00e0i."}}