{"cell_type":{"0cc3e08a":"code","e606af2f":"code","18f09efa":"code","10b4bda9":"code","96f0cbe2":"code","952d1fad":"code","dbd85b7b":"code","af60f230":"code","a4180f24":"code","0ea807be":"code","5f441598":"code","0cced457":"code","f2188fa8":"code","0406a0cc":"code","ab3d2d7b":"code","2cde98cc":"code","ebc42ac2":"code","45531362":"code","468e09d0":"code","2637e1b2":"code","e9f93ed0":"code","e2c71207":"code","7d4f9ab4":"code","a366624d":"code","6c6a3d41":"code","f087236c":"code","bfdaf66d":"code","68cd4fda":"markdown"},"source":{"0cc3e08a":"import os\nprint(os.listdir(\"..\/input\"))","e606af2f":"import pandas as pd\ndf = pd.read_csv('..\/input\/kc_house_data.csv')","18f09efa":"df.head()","10b4bda9":"df.count()","96f0cbe2":"df.shape","952d1fad":"x = df.iloc[:,5] #todas as linhas da coluna 5\nx= df.iloc[:,5].values #transformando em np array\nx =x.reshape(-1, 1) #-1 sign q n vai mexer na coluna, vai apenas add outra","dbd85b7b":"x","af60f230":"y = df.iloc[:,2:3].values # p n precisar fazer reshape\ny.shape","a4180f24":"from sklearn.preprocessing import StandardScaler #escalonando a gurizada\nscaler_x = StandardScaler()\nscaler_y = StandardScaler()\nx = scaler_x.fit_transform(x)\ny = scaler_y.fit_transform(y)","0ea807be":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.scatter(x,y)","5f441598":"import numpy as np\nnp.random.seed(1)\nnp.random.rand(2)","0cced457":"import tensorflow as tf","f2188fa8":"b0 = tf.Variable(0.41)\nb1 = tf.Variable(0.72)","0406a0cc":"batch_size = 32 #pega de 32 em 32 at\u00e9 chegar no total de 21613\nxph = tf.placeholder(tf.float32, [batch_size, 1])\nyph = tf.placeholder(tf.float32, [batch_size, 1])","ab3d2d7b":"y_model = b0 + b1 * xph\nerro = tf.losses.mean_squared_error(yph, y_model)\notimizador = tf.train.GradientDescentOptimizer(learning_rate = 0.001)\ntreinamento = otimizador.minimize(erro)\ninit = tf.global_variables_initializer()","2cde98cc":"with tf.Session() as sess:\n    sess.run(init)\n    for i in range (10000):\n        indices = np.random.randint(len(x), size=batch_size)\n        feed = {xph : x[indices], yph : y[indices]}\n        sess.run(treinamento, feed_dict=feed)\n    b0_final, b1_final = sess.run([b0,b1])","ebc42ac2":"b0_final","45531362":"b1_final","468e09d0":"previsoes = b0_final + b1_final * x","2637e1b2":"previsoes","e9f93ed0":"plt.plot(x,y, 'o')\nplt.plot(x, previsoes, color='red')","e2c71207":"y1 = scaler_y.inverse_transform(y)\nprevisoes1 = scaler_y.inverse_transform(previsoes)","7d4f9ab4":"y1","a366624d":"previsoes1","6c6a3d41":"from sklearn.metrics import mean_absolute_error","f087236c":"mae = mean_absolute_error(y1, previsoes1)\nmae #pode errar isso p cima ou p baixo","bfdaf66d":"teste = scaler_y.inverse_transform(b0_final + b1_final * scaler_x.transform([[800]]))\nteste","68cd4fda":"#### formula da regress\u00e3o linear simples\ny = b0+b1*x"}}