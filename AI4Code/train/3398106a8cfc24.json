{"cell_type":{"15f58d53":"code","e5ae53ff":"code","beda53f1":"code","01b80066":"code","aaf941bc":"code","4f8ab579":"code","3dfaee2a":"code","58bbd43a":"code","a650da18":"code","7b76e965":"code","9ff7a89d":"code","3cdeca00":"code","bdd71527":"code","abd2432a":"code","680f7d50":"code","7136e6a2":"code","553a0387":"code","03fc5020":"code","1db9039a":"code","b904e818":"code","e8ab0f8f":"code","8215e9fc":"code","f24f2d5f":"code","1bef45c4":"code","f707bdd8":"code","b2dd091b":"code","d7138d28":"code","5dff320e":"code","060b0f60":"code","720f1c20":"code","d760394f":"code","b84327d8":"code","dc91a94d":"code","2f0ce086":"code","f763794d":"code","63176e71":"code","34745a37":"code","e5440113":"code","10dea235":"code","5b83e955":"code","61d7bc49":"code","fb64c5b9":"code","a70020fc":"code","cbdfb434":"code","04cd7215":"code","6d0ad2a7":"code","d06ad5f5":"code","1cab3dd6":"code","728b03cb":"code","b13f47cb":"code","73a69a52":"code","0acb64d3":"code","dc5b69d8":"code","2fbd5d0a":"markdown","4b93429f":"markdown","2292a0c6":"markdown","a1f19780":"markdown","77c8a561":"markdown","a8a69748":"markdown","04547191":"markdown","20b7863e":"markdown","2445e905":"markdown","35bd731f":"markdown","5bf77d4e":"markdown","4ea19e02":"markdown","caed6b31":"markdown","8b0c2ade":"markdown","fcf255d7":"markdown","333fa26a":"markdown","7b3599a3":"markdown","e12a24b6":"markdown","9f09fd57":"markdown","064335b0":"markdown","5b1f9a03":"markdown","2752d002":"markdown","1d5fffe8":"markdown","dba162a8":"markdown","dcae2877":"markdown","30bbff5d":"markdown","083f26de":"markdown","b464025a":"markdown","554c4c15":"markdown","0d6ee6bc":"markdown","0db01c85":"markdown"},"source":{"15f58d53":"!pip3 install pywaffle","e5ae53ff":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom pywaffle import Waffle\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport warnings\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor \n\nfrom sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score,KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nwarnings.filterwarnings(\"ignore\")","beda53f1":"data = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","01b80066":"data.head(2)","aaf941bc":"data.shape","4f8ab579":"data.info()","3dfaee2a":"data.describe()","58bbd43a":"data.nunique()","a650da18":"data.groupby('country').count()","7b76e965":"below_vaccinations_50 = data[data.total_vaccinations <= 50]\nlen(below_vaccinations_50) ","9ff7a89d":"higher_vaccinations_50 = data[data.total_vaccinations >= 50]\nlen(higher_vaccinations_50) ","3cdeca00":"corr = data.corr()\nplt.figure(figsize=(15,15))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='Greens')","bdd71527":"country_vaccine = data.groupby([\"country\", \"iso_code\", \"vaccines\"])['total_vaccinations', \n                                                                       'total_vaccinations_per_hundred',\n                                                                        'daily_vaccinations',\n                                                                        'daily_vaccinations_per_million',\n                                                                        'people_vaccinated',\n                                                                        'people_vaccinated_per_hundred',\n                                                                        'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                                                                        ].max().reset_index()\n                                                                        \ncountry_vaccine.columns = [\"Country\", \"iso_code\", \"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\", \"People vaccinated\", \"People vaccinated per hundred\",\n                           'People fully vaccinated', 'People fully vaccinated percent']","abd2432a":"vaccines = country_vaccine.Vaccines.unique()\nfor v in vaccines:\n    countries = country_vaccine.loc[country_vaccine.Vaccines==v, 'Country'].values\n    print(f\"Vaccines: {v}: \\nCountries: {list(countries)}\\n\") ","680f7d50":"data.isna().sum()","7136e6a2":"data = data.drop(data[data.total_vaccinations.isna()].index)\ndata= data.drop(data[data.people_vaccinated.isna()].index)\ndata.isna().sum()","553a0387":"corr = data.corr()\nplt.figure(figsize=(8,8))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='Greens')","03fc5020":"difference = data.total_vaccinations.mean() - data.people_vaccinated.mean()\ndifference_per_hundred = data.total_vaccinations_per_hundred.mean() - data.people_vaccinated_per_hundred.mean()\n\ndata.people_vaccinated = data.people_vaccinated.fillna(data.total_vaccinations - difference)\ndata.people_vaccinated_per_hundred = data.people_vaccinated_per_hundred.fillna(data.total_vaccinations_per_hundred - difference_per_hundred)","1db9039a":"data.isna().sum()","b904e818":"data.daily_vaccinations = data.daily_vaccinations.fillna(0)\ndata.daily_vaccinations_per_million = data.daily_vaccinations_per_million.fillna(0)\ndata.people_fully_vaccinated = data.people_fully_vaccinated.fillna(0)\ndata.people_fully_vaccinated_per_hundred = data.people_fully_vaccinated_per_hundred.fillna(0)\ndata.daily_vaccinations_raw = data.daily_vaccinations_raw.fillna(0) ","e8ab0f8f":"data.isna().sum()","8215e9fc":"NavidData = data.copy()\n\nNavidData.rename(columns={'country':'Country',\n                          'iso_code':'IsoCode',\n                          'date':'Date',\n                          'total_vaccinations': 'TotalVaccinations', \n                          'people_vaccinated': 'PeopleVaccinated',\n                          'people_fully_vaccinated': 'PeopleFullyVaccinated',\n                          'daily_vaccinations_raw': 'DailyVaccinationsRaw',\n                          'daily_vaccinations': 'DailyVaccinations',\n                          'total_vaccinations_per_hundred': 'TotalVaccinationsPerHundred',\n                          'people_vaccinated_per_hundred':'PeopleVaccinatedPerHundred',\n                          'people_fully_vaccinated_per_hundred': 'PeopleFullyVaccinatedPerHundred',\n                          'daily_vaccinations_per_million': 'DailyVaccinationsPerMillion',\n                          'vaccines':'Vaccines',\n                          'source_name':'SourceName',\n                          'source_website':'SourceWebsite'}, inplace=True) ","f24f2d5f":"cols = ['Country', 'TotalVaccinations', 'IsoCode', 'Vaccines']\nvacc_amount = NavidData[cols].groupby('Country').max().sort_values('TotalVaccinations', ascending=False).dropna(subset=['TotalVaccinations'])\nvacc_amount = vacc_amount.iloc[:10]\n\nplt.figure(figsize=(15, 15))\nplt.bar(vacc_amount.index, vacc_amount.TotalVaccinations, color=['black', 'red', 'green', 'blue', 'cyan','black', 'red', 'green', 'blue', 'cyan'])\n\nplt.title('Total people vaccinated per country')\nplt.xticks(rotation = 90)\nplt.ylabel('Number of vaccinated citizens')\nplt.xlabel('Countries')\nplt.show()","1bef45c4":"cols = ['Country', 'TotalVaccinations', 'IsoCode', 'Vaccines','TotalVaccinationsPerHundred']\n\nvacc_amount = NavidData[cols].groupby('Country').max().sort_values('TotalVaccinations', ascending=False).dropna(subset=['TotalVaccinations'])\nvacc_amount = vacc_amount.iloc[:10]\n\nvacc_amount = vacc_amount.sort_values('TotalVaccinationsPerHundred', ascending=False)\n\nplt.figure(figsize=(15, 15))\nplt.bar(vacc_amount.index, vacc_amount.TotalVaccinationsPerHundred ,color=['black', 'red', 'green', 'blue', 'cyan','black', 'red', 'green', 'blue', 'cyan'])\n\nplt.ylabel('Number of vaccinated people per hundred')\nplt.xlabel('Countries')\nplt.show()","f707bdd8":"plt.figure(figsize=(15,15))\ngrp = ['Country', 'TotalVaccinations', 'IsoCode', 'Vaccines']\nvacc_no = NavidData[grp].groupby('Vaccines').max().sort_values('TotalVaccinations', ascending=False).dropna(subset=['TotalVaccinations'])\n\nplt.bar(vacc_no.index, vacc_no.TotalVaccinations , color ='m')\nplt.title('Various categories of COVID-19 vaccines offered')\nplt.xticks(rotation = 90)\nplt.ylabel('Number of vaccinated citizens (per 10 Million)')\nplt.xlabel('Vaccines')\nplt.show()","b2dd091b":"data = dict(NavidData['Vaccines'].value_counts(normalize = True).nlargest(10)*100) \n                                 \nvaccine = ['Oxford\/AstraZeneca', 'Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Johnson&Johnson, Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech',\n       'Pfizer\/BioNTech', 'Sputnik V', 'Oxford\/AstraZeneca, Sinopharm\/Beijing',\n       'Sinopharm\/Beijing', 'Moderna, Pfizer\/BioNTech',\n       'Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinovac'] \n\nfig = plt.figure( \n    rows=7,\n    columns=12,\n    FigureClass = Waffle, \n    values = data, \n    title={'label': 'Proportion of Vaccines', 'loc': 'center',\n          'fontsize':15},\n    colors=(\"#FF7F0E\", \"#00B5F7\", \"#AB63FA\",\"#00CC96\",\"#E9967A\",\"#F08080\",\"#40E0D0\",\"#DFFF00\",\"#DE3163\",\"#6AFF00\"),\n    labels=[f\"{k} ({v:.2f}%)\" for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': 2, 'framealpha': 0},\n    figsize=(12, 9)\n)\nfig.show()","d7138d28":"fig = px.choropleth(NavidData,locations = 'Country',locationmode = 'country names',color = 'Vaccines',\n                   title = 'Vaccines used by specefic Country',hover_data= ['TotalVaccinations'])\nfig.show()","5dff320e":"vaccine = NavidData[\"Vaccines\"].value_counts().reset_index()\nvaccine.columns = ['Vaccines','Number of Country']\nvaccine.nlargest(5,\"Number of Country\")","060b0f60":"fig = px.treemap(NavidData,names = 'Country',values = 'TotalVaccinations',\n                 path = ['Vaccines','Country'],\n                 title=\"Total Vaccinations per country grouped by Vaccines\",\n                 color_discrete_sequence =px.colors.qualitative.Set1)\nfig.show()","720f1c20":"CountryVaccine = NavidData.groupby([\"Country\", \"IsoCode\", \"Vaccines\"])['TotalVaccinations', \n                                                                       'TotalVaccinationsPerHundred',\n                                                                      'DailyVaccinations',\n                                                                      'DailyVaccinationsPerMillion',\n                                                                      'PeopleVaccinated',\n                                                                      'PeopleVaccinatedPerHundred',\n                                                                      'PeopleFullyVaccinated', \n                                                                      'PeopleFullyVaccinatedPerHundred'\n                                                                      ].max().reset_index()\n\nCountryVaccine.columns = [\"Country\", \"iso_code\", \"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\", \"People vaccinated\", \"People vaccinated per hundred\",\n                           'People fully vaccinated', 'People fully vaccinated percent']","d760394f":"fig = px.treemap(CountryVaccine, path = ['Vaccines', 'Country'], values = 'Total vaccinations',\n                title=\"Total vaccinations per country, grouped by vaccine scheme\")\nfig.show()","b84327d8":"fig = px.treemap(CountryVaccine, path = ['Vaccines', 'Country'], values = 'People vaccinated',\n                title=\"People vaccinated per country, grouped by vaccine scheme\")\nfig.show()","dc91a94d":"def draw_trace_bar(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Country'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Country']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest'\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')","2f0ce086":"draw_trace_bar(CountryVaccine, 'Total vaccinations', 'Vaccination total per country', 'Country', 'Vaccination total', \"Darkgreen\" )","f763794d":"draw_trace_bar(CountryVaccine, 'People vaccinated per hundred', 'People vaccinated per hundred per country', 'Country','People vaccinated per hundred', \"orange\" )","63176e71":"def plot_custom_scatter(df, x, y, size, color, hover_name, title):\n    fig = px.scatter(df, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title)\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.2))\n    fig.update_layout({'legend_title':'Vaccine scheme'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.show()","34745a37":"plot_custom_scatter(CountryVaccine, x=\"Total vaccinations\", y=\"Percent\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Percent vs. total), grouped per country and vaccines\")","e5440113":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Total vaccinations'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Total vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","10dea235":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Daily vaccinations per million'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Daily vaccinations per million',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Daily vaccinations per million per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","5b83e955":"del NavidData['IsoCode']\ndel NavidData['Vaccines']\ndel NavidData['SourceName']\ndel NavidData['SourceWebsite']","61d7bc49":"India = NavidData[NavidData.Country.str.contains(\"India\")]\nUnitedStates = NavidData[NavidData.Country.str.contains(\"United States\")]","fb64c5b9":"print ('india data shape:',India.shape)\nprint ('unitedstates data shape:',UnitedStates.shape)","a70020fc":"India.describe(include='all').T","cbdfb434":"UnitedStates.describe(include='all').T","04cd7215":"scaler = StandardScaler()\nUnitedStates[['TotalVaccinations','PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']] = scaler.fit_transform(UnitedStates[['TotalVaccinations','PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']])\nIndia[['TotalVaccinations','PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']] = scaler.fit_transform(India[['TotalVaccinations','PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']])","6d0ad2a7":"IndiaX = India[['PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']]   \nIndiaY = India[['TotalVaccinations']] #Target","d06ad5f5":"UnitedStatesX = UnitedStates[['PeopleVaccinated','PeopleFullyVaccinated','DailyVaccinationsRaw','DailyVaccinations','DailyVaccinations','TotalVaccinationsPerHundred','PeopleVaccinatedPerHundred','PeopleFullyVaccinatedPerHundred','DailyVaccinationsPerMillion']]   \nUnitedStatesY = UnitedStates[['TotalVaccinations']] ","1cab3dd6":"X_train_I, X_test_I, Y_train_I, Y_test_I = train_test_split(IndiaX,IndiaY, test_size = 0.20, random_state =2,shuffle=False)\nX_train_U, X_test_U, Y_train_U, Y_test_U = train_test_split(UnitedStatesX,UnitedStatesY, test_size = 0.20, random_state =2,shuffle=False)","728b03cb":"EXTRAindia = ExtraTreesRegressor()\nEXTRAUsa = ExtraTreesRegressor()","b13f47cb":"EXTRAindia.fit(X_train_I, Y_train_I)\nEXTRAUsa.fit(X_train_U, Y_train_U)","73a69a52":"Y_pred_I = EXTRAindia.predict(X_test_I)\nY_pred_U = EXTRAUsa.predict(X_test_U)","0acb64d3":"print('MAE:',metrics.mean_absolute_error(Y_test_I, Y_pred_I))\nprint('MSE:',metrics.mean_squared_error(Y_test_I, Y_pred_I))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test_I, Y_pred_I)))","dc5b69d8":"print('MAE:',metrics.mean_absolute_error(Y_test_U, Y_pred_U))\nprint('MSE:',metrics.mean_squared_error(Y_test_U, Y_pred_U))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test_U, Y_pred_U)))","2fbd5d0a":"#### **Make Predictions.**","4b93429f":"# **Install required packages.**","2292a0c6":"#### **Feature Scaling.**","a1f19780":"<img src = \"https:\/\/www.eesc.europa.eu\/sites\/default\/files\/styles\/large\/public\/images\/shutterstock_1642888921.jpg?itok=P9-6YhGd\" width=50%>","77c8a561":"#### **People vaccinated per country, grouped by vaccine scheme.**","a8a69748":"#  **Importing the libraries.**","04547191":"# **Visualization**","20b7863e":"#### **The problem of missing values was solved!**","2445e905":"#### **What are the different categories of vaccines offered?**","35bd731f":"# **Prepare Data for Machine Learning.**","5bf77d4e":"#### **Predicting Total Vaccinations for india and USA.**","4ea19e02":"#### **Plotting the heatmap of correlation between features**","caed6b31":"#### **for other feature just fill missing values with zeros**","8b0c2ade":"#### **Splitting India dataset**","fcf255d7":"#### **Splitting USA dataset**","333fa26a":"#### **Remove unnecessary features.**","7b3599a3":"#### **Vaccines used by specefic Country.**","e12a24b6":"#### **Which country is vaccinating its citizens the fastest?**","9f09fd57":"#### **Percentage of use of different types of vaccines.**","064335b0":"#### **What vaccines are used in each country?**","5b1f9a03":"#### **As can be seen, there is quite much missing data.**\n#### **drop total vaccinations missing data, as without this value any raw doesn't make much sense.**","2752d002":"#### **Total Vaccinations per country grouped by Vaccines.**","1d5fffe8":"# **Extra Tree Model.**","dba162a8":"# **Load And EDA Data**","dcae2877":"#### **Which country has the highest number of vaccinated people?**\n#### **we will compare the first 10 countries for neat visualization.** ","30bbff5d":"#### **Model Evaluation.**","083f26de":"#### As can bee seen from our data, the values of total vaccinations column are mostly the same as people vaccenated columns and total vaccinations per hundred and people vaccinated per hundred are also very similar.\n#### As can bee seen from the heatmap, these features have almost ideal correlation.\n#### Ok, So, we will fill the missing values with the difference of these column's mean values.","b464025a":"#### **Daily Vaccinations per Million per Country.**","554c4c15":"#### **Total Vaccinations per Country.**","0d6ee6bc":"#### **People vaccinated per hundred Country.**","0db01c85":"# **Handling Missing Data**"}}