{"cell_type":{"60cb3832":"code","f19086d5":"code","e8437245":"code","cf49488e":"code","71c0c1a5":"code","319ddc77":"code","0e0805c8":"code","40d82844":"code","8ef10a57":"code","23b39aa4":"code","69125ea9":"code","6a314882":"code","43d83c12":"code","d343d241":"code","8c88decc":"code","1534b73c":"code","b165acd6":"code","5bd9f490":"code","fbe88751":"code","331df41e":"code","1f9bd540":"code","24097ea7":"code","12237bfd":"code","c083295e":"markdown","ba22d07e":"markdown","622d536c":"markdown","77d6b8d8":"markdown","ba90d1ce":"markdown"},"source":{"60cb3832":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f19086d5":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","e8437245":"# Defining function for callBack at 99% accuracy\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('accuracy')>0.99):\n      self.model.stop_training = True\n        \ncallbacks = myCallback()","cf49488e":"train.head()","71c0c1a5":"train.info()","319ddc77":"train.describe()","0e0805c8":"test.head()","40d82844":"test.info()","8ef10a57":"test.describe()","23b39aa4":"# Splitting and converting data into array form\nx_train, y_train = np.array(train.iloc[:,1:]), np.array(train.iloc[:,0])\ntest = np.array(test)","69125ea9":"plt.imshow(x_train[0].reshape(28,28))\nprint(y_train[0])\nprint(x_train[0])","6a314882":"plt.imshow(x_train[5].reshape(28,28))\nprint(y_train[5])\nprint(x_train[5])","43d83c12":"plt.imshow(x_train[10].reshape(28,28))\nprint(y_train[10])\nprint(x_train[10])","d343d241":"# Normalizing \nx_train = x_train\/255.0\ntest = test\/255.0","8c88decc":"model = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(1028, activation=tf.nn.relu),\n  tf.keras.layers.Dense(256, activation=tf.nn.softmax),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])","1534b73c":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=10, callbacks=[callbacks])","b165acd6":"predict = model.predict(test)\ntest_predict = np.argmax(predict, axis = 1)\ntest_predict.shape","5bd9f490":"print(test_predict[5])\nplt.imshow(test[5].reshape(28,28))","fbe88751":"print(test_predict[88])\nplt.imshow(test[88].reshape(28,28))","331df41e":"print(test_predict[45])\nplt.imshow(test[45].reshape(28,28))","1f9bd540":"sample_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nsample_submission.info()","24097ea7":"index = sample_submission.ImageId\nsubmission = {\"ImageId\": index, \"Label\": test_predict}\nfinal_submission = pd.DataFrame(submission)\nfinal_submission","12237bfd":"final_submission.to_csv(\"submission.csv\", index = False)","c083295e":"#### printing some training image and training labels","ba22d07e":"### Examine data sets","622d536c":"### Compiling and Training","77d6b8d8":"### Printing some test results","ba90d1ce":"### Designing Model"}}