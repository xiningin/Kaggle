{"cell_type":{"158d4177":"code","e5d8eea1":"code","8358b7d5":"code","650b7eea":"code","9414eabb":"code","df761ae1":"code","fe29f4bc":"code","af5e3dfc":"code","b9cb74af":"code","70a5525e":"code","3c91e06b":"code","499d2acc":"code","c9e65a9d":"code","df8c5e72":"code","b3a75dbf":"code","03ad3a6e":"code","1a192092":"code","dea82a6f":"code","c2fa6a8c":"code","48822763":"code","1f965001":"code","0def63e6":"code","161dbaca":"code","7421423c":"markdown","29fa4673":"markdown","639ef8ff":"markdown","2d953eda":"markdown","59367745":"markdown","6b3f20b8":"markdown","9f2fde2d":"markdown","9bfd1526":"markdown","c5892b3b":"markdown","cb12c4d8":"markdown","9b854406":"markdown","b78d7984":"markdown","70d5991a":"markdown"},"source":{"158d4177":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5d8eea1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8358b7d5":"dataset = pd.read_csv('\/kaggle\/input\/apps-user-used-the-most\/apriori_data.csv')\ndataset","650b7eea":"df = list(dataset[\"AppName\"].apply(lambda x:x.split(',')))\ndataset=pd.DataFrame(df)","9414eabb":"#Displaying the First Five Rows\ndataset.head()","df761ae1":"#Displaying the last Five Rows\ndataset.tail()","fe29f4bc":"dataset.shape","af5e3dfc":"dataset.dtypes","b9cb74af":"dataset.isnull().sum()","70a5525e":"dataset.info()","3c91e06b":"dataset.to_csv('apps_dataset.csv',header=None,index=False)","499d2acc":"dataset = pd.read_csv('.\/apps_dataset.csv', header = None)\ntransactions = []\nfor i in range(0, 31):\n  transactions.append([str(dataset.values[i,j]) for j in range(0, 10)])","c9e65a9d":"dataset.head()","df8c5e72":"!pip install apyori","b3a75dbf":"from apyori import apriori\nrules = apriori(transactions=transactions, min_support = 0.03, min_confidence = 0.2, min_lift = 2, min_length = 2, max_length = 2)","03ad3a6e":"results=list(rules)","1a192092":"results","dea82a6f":"def inspect(results):\n    App1         = [tuple(result[2][0][0])[0] for result in results]\n    App2         = [tuple(result[2][0][1])[0] for result in results]\n    Supports    = [result[1] for result in results]\n    Confidences = [result[2][0][2] for result in results]\n    Lifts       = [result[2][0][3] for result in results]\n    return list(zip(App1, App2,Supports, Confidences, Lifts))\nfinal_result = pd.DataFrame(inspect(results), columns = ['App 1', 'App 2', 'Support', 'Confidence', 'Lift'])","c2fa6a8c":"final_result","48822763":"final_result.nlargest(n = 10, columns = 'Lift')","1f965001":"final = final_result.rename({'App 1':'App1','App 2':'App2'}, axis=1)\nfinal","0def63e6":"plt.figure(figsize=(10,10))\nsns.heatmap(data=final.corr(), annot=True, cmap='copper_r')","161dbaca":"plt.scatter(final.App1,final.App2)\nplt.xlabel('App 1')\nplt.ylabel('App 2')\nplt.title('App Recommended')","7421423c":"# Visualising the results","29fa4673":"# Data Preprocesssing","639ef8ff":"# Training the Apriori model on the dataset","2d953eda":"# Exporting DataFrame To Csv File","59367745":"# Displaying the first results coming directly from the output of the apriori function","6b3f20b8":"# Convert and split the data(String) into the lists format","9f2fde2d":"# Conclusion","9bfd1526":"# Putting the results well organised into a Pandas DataFrame","c5892b3b":"# **Importing Libraries**","cb12c4d8":"# Apriori Algorithm Intuition:\n\n**What are the three essential relations between the support, confidence and lift?**\n\nGiven two Apps A1 and A2, here are the three essential relations to remember:\n\nRelation between the support and the confidence: confidence(A1 -> A2) =support(A1,A2)\/support(A1)\n\nRelation between the lift and the support: lift(A1 -> A2) =support(A1,A2)\/support(A1)*support(A2)\n\nRelation between the lift and the confidence (consequence of the two previous equations): lift(A1 -> A2) =confidence(A1 -> A2)\/support(A2)","9b854406":"# Importing Data","b78d7984":"# EDA - Exploratory Data Analysis","70d5991a":"# Displaying the results sorted by descending lifts"}}