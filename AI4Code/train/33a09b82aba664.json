{"cell_type":{"ae0f001e":"code","c3392c6a":"code","d6384944":"code","ea20d9e4":"code","f47d5f80":"code","f8ef43aa":"code","b93a73e2":"code","6957f75b":"code","581e201e":"code","8747e038":"code","468a4a16":"code","fdfaac8a":"code","708bc7ca":"code","49f8d4b1":"code","773a60a3":"markdown","06452eee":"markdown","51eaf25d":"markdown","9c09354b":"markdown","fac06a70":"markdown","cbd1247b":"markdown","4ec1780b":"markdown","4b5933c2":"markdown","e2597754":"markdown","e38c50af":"markdown"},"source":{"ae0f001e":"import sys\nimport subprocess\n\nREPO_LOCATION = 'https:\/\/github.com\/felipessalvatore\/vol4life'\nREPO_NAME = 'vol4life'\nREPO_BRANCH = 'master'\n\n# Clone the repository\nprint('cloning the repository')\nsubprocess.call(['git', 'clone', '-b', REPO_BRANCH, REPO_LOCATION])\n\n# Setting env variables\nsys.path.append(REPO_NAME)","c3392c6a":"import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom IPython.display import display, HTML, Markdown\nfrom datetime import date\nfrom tqdm import tqdm\nfrom vol4life.vol4life.style import show_red_green\n\nimport matplotlib.pyplot as plt\nfrom glob import glob\n\npath_ibov =  glob('\/kaggle\/input\/ibovespa-stocks\/b3*.csv')[0]\npath_usd =  glob('\/kaggle\/input\/ibovespa-stocks\/usd*.csv')[0]\npath_selic =  glob('\/kaggle\/input\/ibovespa-stocks\/selic.csv')[0]\npath_sp = glob(\"\/kaggle\/input\/sp-500-full-dataset\/*.csv\")","d6384944":"df = pd.read_csv(path_usd)\ndf.loc[:, \"datetime\"]  = pd.to_datetime(df.datetime)\ndf = df.set_index(\"datetime\")\nusd2brl = df.copy() \nusd = (1\/df)\nusd.columns = [\"brl2usd\"]\nusd = usd.sort_index()\nusd_returns  = df.pct_change().dropna()\nusd_returns.name = \"usd_returns\"\nfig, ax = plt.subplots(figsize=(10,5))\nusd.plot(ax=ax);","ea20d9e4":"df = pd.read_csv(path_ibov)\ndf.loc[:, \"datetime\"] =  pd.to_datetime(df.datetime)\n\nibov = [\"ABEV3\", \"AZUL4\", \"B3SA3\", \"BBAS3\", \"BBDC3\", \"BBDC4\", \"BBSE3\", \"BPAC11\", \"BRAP4\",\n        \"BRDT3\", \"BRFS3\", \"BRKM5\", \"BRML3\", \"BTOW3\", \"CCRO3\", \"CIEL3\", \"CMIG4\", \"COGN3\", \"CRFB3\",\n        \"CSAN3\", \"CSNA3\", \"CVCB3\", \"CYRE3\", \"ECOR3\", \"EGIE3\", \"ELET3\", \"ELET6\", \"EMBR3\", \"ENBR3\",\n        \"EQTL3\", \"FLRY3\", \"GGBR4\", \"GNDI3\", \"GOAU4\", \"GOLL4\", \"HAPV3\", \"HGTX3\", \"HYPE3\", \"IGTA3\",\n        \"IRBR3\", \"ITSA4\", \"ITUB4\", \"JBSS3\", \"KLBN11\", \"LAME4\", \"LREN3\", \"MRFG3\",\n        \"MRVE3\", \"MULT3\", \"NTCO3\", \"PCAR4\", \"PETR3\", \"PETR4\", \"QUAL3\", \"RADL3\",\n        \"RAIL3\", \"RENT3\", \"SANB11\", \"SBSP3\", \"SMLS3\", \"SULA11\", \"SUZB3\", \"TAEE11\",\n        \"TIMP3\", \"TOTS3\", \"UGPA3\", \"USIM5\", \"VALE3\", \"VIVT4\", \"VVAR3\", \"WEGE3\", \"YDUQ3\"]\n\n\n# sem \"MGLU3\", muito estranho\n\ninitial_date = \"2015-01-01\"\ntoday = date.today()\nfinal_date = today.strftime(\"%Y-%m-%d\")\n\n\ndf_sort = df.set_index([\"ticker\", \"datetime\"]).sort_index()\ntss = []\nfor ticker in ibov:  \n    ts = df_sort.xs(ticker).close\n    ts.name = ticker\n    tss.append(ts)\n\ndel df_sort\nprices = pd.concat(tss,1).interpolate(\"linear\", limit_direction=\"both\")[initial_date:final_date]\n\n","f47d5f80":"usd = usd[initial_date:final_date]\nibov_usd = pd.concat([prices, usd],1).dropna().interpolate(\"linear\", limit_direction=\"both\")\nrate = ibov_usd.brl2usd\n# rate = 1.0\nibov_usd = ibov_usd.multiply(rate, 0)\nibov_usd = ibov_usd.drop(\"brl2usd\",1)\n\nibov_prices_usd = ibov_usd.mean(1)\nibov_prices_brl = prices.mean(1)\n\n\nfig, ax = plt.subplots(figsize=(15,5))\nibov_prices_usd.plot(ax=ax, color=\"k\", label=\"ibov_usd\");\nax.set_title('Ibov in USD',fontsize=14);","f8ef43aa":"sp_closes = []\nfor path in tqdm(path_sp):\n    df =  pd.read_csv(path)\n    df.loc[:, \"Date\"]  = pd.to_datetime(df.Date)\n    sp_closes.append(df.set_index(\"Date\").Close)\n    \nsp = pd.concat(sp_closes,1).interpolate(\"linear\", limit_direction=\"both\")[initial_date:final_date]\nsp = sp.mean(1)\nsp.name = \"S&P 500\"\n\nsp_brl = pd.concat([sp, usd2brl[initial_date:final_date]],1).dropna().interpolate(\"linear\", limit_direction=\"both\")\nsp_brl = sp_brl['S&P 500'] * sp_brl['usd_brl']\nsp_brl.name = \"S&P 500\"\n\n\nfig, ax = plt.subplots(figsize=(15,5))\nsp.plot(ax=ax, color=\"k\", label=\"ibov_usd\");\nax.set_title(\"S&P 500\",fontsize=14);","b93a73e2":"window = 30\nfig, ax = plt.subplots(2,2, figsize=(24,10))\nibov_prices_usd.rolling(window).mean().plot(ax=ax[0,0], color=\"k\",  style=\":\", label=\"Ibov\");\nsp.rolling(window).mean().plot(ax=ax[0,0], color=\"k\", style=\"-\", label=\"S&P 500\");\nax[0,0].set_title(\"{} Day Rolling Mean\".format(window),fontsize=14);\n\nibov_prices_usd.rolling(window).std().plot(ax=ax[0,1], color=\"k\",  style=\":\", label=\"Ibov\");\nsp.rolling(window).std().plot(ax=ax[0,1], color=\"k\", style=\"-\", label=\"S&P 500\");\nax[0,1].set_title(\"{} Day Rolling Standard Deviation\".format(window),fontsize=14);\n\n\nibov_prices_usd.rolling(window).skew().plot(ax=ax[1,0], color=\"k\",  style=\":\", label=\"Ibov\");\nsp.rolling(window).skew().plot(ax=ax[1,0], color=\"k\", style=\"-\", label=\"S&P 500\");\nax[1,0].set_title(\"{} Day Rolling Skewness\".format(window),fontsize=14);\n\nibov_prices_usd.rolling(window).kurt().plot(ax=ax[1,1], color=\"k\",  style=\":\", label=\"Ibov\");\nsp.rolling(window).kurt().plot(ax=ax[1,1], color=\"k\", style=\"-\", label=\"S&P 500\");\nax[1,1].set_title(\"{} Day Rolling Kurtosis\".format(window),fontsize=14);\nax[1,1].legend(loc=\"upper left\");\nplt.subplots_adjust(hspace=0.4, wspace=0.1)\nplt.figtext(0.5, 0.95, 'Price Statistics for Tickers in the S&P 500 and Ibovespa', ha='center', va='center',fontsize=18);","6957f75b":"from matplotlib import figure\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\nfrom matplotlib.ticker import FuncFormatter\n\n\ndef f_percentage(x, pos):\n    \"\"\"\n    Adds percentage sign to plot ticks.\n    \"\"\"\n\n    return '%.0f%%' % x\n\ndef cum_returns(returns, starting_value=0):\n    \"\"\"\n    Compute cumulative returns from simple returns.\n    Parameters\n    \"\"\"\n    creturns = returns.copy()\n    creturns = creturns.fillna(0)\n    creturns = (creturns + 1).cumprod()\n    if starting_value == 0:\n        creturns = creturns - 1\n    else:\n        creturns = creturns * starting_value\n    return creturns\n\n\ndef plot_drawdown_underwater(returns, ax=None, title='Underwater plot', **kwargs):\n    \"\"\"\n    Plots how far underwaterr returns are over time, or plots current\n    drawdown vs. date.\n    Parameters\n    ----------\n    returns : pd.Series\n        Daily returns of the strategy, noncumulative.\n         - See full explanation in tears.create_full_tear_sheet.\n    ax : matplotlib.Axes, optional\n        Axes upon which to plot.\n    **kwargs, optional\n        Passed to plotting function.\n    Returns\n    -------\n    ax : matplotlib.Axes\n        The axes that were plotted on.\n    \"\"\"\n\n    if ax is None:\n        ax = plt.gca()\n\n    y_axis_formatter = FuncFormatter(f_percentage)\n    ax.yaxis.set_major_formatter(FuncFormatter(y_axis_formatter))\n\n    df_cum_rets = cum_returns(returns, starting_value=1.0)\n    running_max = np.maximum.accumulate(df_cum_rets)\n    underwater = -100 * ((running_max - df_cum_rets) \/ running_max)\n    (underwater).plot(ax=ax, kind='area', color='coral', alpha=0.7, **kwargs)\n    ax.set_ylabel('Drawdown', fontsize=14)\n    ax.set_title(title, fontsize=18)\n    ax.set_xlabel('')\n    return ax","581e201e":"r_usd = ibov_prices_usd.pct_change().dropna()\nr_sp = sp.pct_change().dropna()\n\nfig, ax = plt.subplots(2, figsize=(20,10))\nplot_drawdown_underwater(r_usd[\"2018-12-30\":], ax[1], title=\"Underwater plot (Ibov in USD)\");\nplot_drawdown_underwater(r_sp[\"2018-12-30\":], ax=ax[0], title=\"Underwater plot (S&P 500)\");\nfig.tight_layout(pad=3.0);","8747e038":"usd = usd_returns[initial_date:final_date]\nr_brl = r_brl = ibov_prices_brl.pct_change().dropna().to_frame()\n\nr_sp_brl = sp_brl.pct_change().dropna()\nusd.columns = [\"US Dollar\"]\nr_brl.columns = [\"Ibov\"]\nr_sp_brl.columns = [\"S&P 500\"]\n\nselic = pd.read_csv(path_selic)\nselic.datetime = pd.to_datetime(selic.datetime)\nselic = selic.set_index(\"datetime\")\nselic = selic[initial_date:final_date]\nselic.columns = [\"Selic\"]\n\ncum_selic = cum_returns(selic, starting_value=1.0)\ncum_r_brl = cum_returns(r_brl, starting_value=1.0)\ncum_usd = cum_returns(usd, starting_value=1.0)\ncum_r_sp_brl = cum_returns(r_sp_brl, starting_value=1.0)\n\n\n\nfig, ax = plt.subplots(figsize=(15,8))\nax.set_title(\"Cummulative returns by instrument (in BRL)\\n\", fontsize=18)\nax.set_ylabel('cummulative return (percentage)', fontsize=14)\ny_axis_formatter = FuncFormatter(lambda x, pos: \"{:.1%}\".format(x))\nax.yaxis.set_major_formatter(FuncFormatter(y_axis_formatter))\ncum_usd.plot(ax=ax);\ncum_r_brl.plot(ax=ax);\ncum_selic.plot(ax=ax);\ncum_r_sp_brl.plot(ax=ax);\nax.legend(loc=\"best\");","468a4a16":"df = pd.read_csv(path_ibov)\ndf.loc[:, \"datetime\"] =  pd.to_datetime(df.datetime)\n\netfs =     [\"BOVA11\",\n            \"BOVV11\",\n            \"SMAL11\",\n            \"BOVB11\",\n            \"IVVB11\",\n            \"SMAC11\",\n            \"DIVO11\",\n            \"PIBB11\",\n            \"BRAX11\",\n            \"SPXI11\",\n            \"FIND11\",\n            \"MATB11\",\n            \"ISUS11\",\n            \"GOVE11\",\n            \"ECOO11\",\n            \"BBSD11\",\n            \"XBOV11\"]\n\n\ninitial_date = \"2019-01-01\"\ntoday = date.today()\nfinal_date = today.strftime(\"%Y-%m-%d\")\n\n\ndf_sort = df.set_index([\"ticker\", \"datetime\"]).sort_index()\ntss = []\nfor ticker in etfs:  \n    ts = df_sort.xs(ticker).close\n    ts.name = ticker\n    tss.append(ts)\n\ndel df_sort\nprices = pd.concat(tss,1).interpolate(\"linear\", limit_direction=\"both\")[initial_date:final_date]\nrate_etf1 = pd.merge_asof(prices, rate, left_index=True, right_index=True)[\"brl2usd\"]\n# rate_etf1 = 1.0\n\nfor c in prices.columns:\n    prices.loc[:,c] = prices[c] * rate_etf1\ntotal  = prices.pct_change().dropna()\n\ntotal = total.apply(lambda row: cum_returns(row, starting_value=1.0))\n\n\nfig, ax = plt.subplots(figsize=(22,13))\nax.set_title(\"Cummulative returns by ETF (in USD)\\n\", fontsize=20)\nax.set_ylabel('cummulative return (percentage)', fontsize=18)\nax.set_xlabel('datetime', fontsize=18)\ny_axis_formatter = FuncFormatter(lambda x, pos: \"{:.1%}\".format(x))\nax.yaxis.set_major_formatter(FuncFormatter(y_axis_formatter))\ntotal.plot(ax=ax, cmap='tab20');\nax.legend(loc=\"lower left\");\n\n","fdfaac8a":"corr = prices.tail(60).corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nfig, ax = plt.subplots(figsize=(14,10))\nax.set_title(\"60-day correlation Brazilian ETFs\\n\", fontsize=18)\nsns.heatmap(corr, mask=mask, cmap=\"Blues\", center=0, linewidths=1, annot=True, fmt=\".2f\", ax=ax, cbar=False);\nplt.xticks(rotation=45);","708bc7ca":"month_dict  =  {1:\"January\",\n                2:\"February\",\n                3:\"March\",\n                4:\"April\",\n                5:\"May\",\n                6:\"June\",\n                7:\"July\",\n                8:\"August\",\n                9:\"September\",\n                10:\"October\",\n                11:\"November\",\n                12:\"December\"}\n\n\nmonth_etf = prices[\"2019-12-01\":].resample(\"M\").last()\netf_columns = list(month_etf.columns)\netf_columns.sort()\nmonth_etf = month_etf[etf_columns]\nrate_etf = pd.merge_asof(month_etf, rate, left_index=True, right_index=True)[\"brl2usd\"]\nfor c in etf_columns:\n    month_etf.loc[:,c] = month_etf[c] * rate_etf\n\nmonth_etf = month_etf.pct_change()\nmonth_etf = month_etf.dropna()\nmonth_etf.index.name = \"\"\nmonth_etf.index = [month_dict[m.month] for m in month_etf.index]\ndisplay(Markdown(\"## Monthly return in 2020 by ETF (in USD)\"))\nshow_red_green(month_etf, 1)","49f8d4b1":"### Cleaning\nprint('removing the repository')\nsubprocess.call(['rm', '-rf', REPO_NAME])","773a60a3":"## Brazilian ETFs","06452eee":"# Looking at the Ibov index and other instruments\n\nTODO LIST:\n\n- `!pip install yfinance`\n- `! pip install PyPortfolioOpt`","51eaf25d":"### Getting the S&P dataset","9c09354b":"### Adding vol4life repo","fac06a70":"## S&P 500 and Ibov comparison","cbd1247b":"## Plotting Return Drawdown","4ec1780b":"### Loading Market Data","4b5933c2":"### Plot Functions","e2597754":"### Loading Exchange Rate Data","e38c50af":"### Getting the ibov dataset in usd "}}