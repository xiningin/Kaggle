{"cell_type":{"e0fe31c1":"code","03cff57b":"code","9fceb76d":"code","e0286432":"markdown"},"source":{"e0fe31c1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ntrain=pd.read_csv(\"..\/input\/electricity-consumption\/train.csv\")\ntest=pd.read_csv(\"..\/input\/electricity-consumption\/test.csv\")\n\nprint(train.head())\n\ndef preprocess(data):\n    data['temperature'] = data['temperature'] - data['temperature'].min()\n    data['temperature'] = data['temperature'] \/ data['temperature'].max()    \n\n    data['pressure'] = data['pressure'] - data['pressure'].min()\n    data['pressure'] = data['pressure'] \/ data['pressure'].max()    \n\n    data['windspeed'] = data['windspeed'] - data['windspeed'].min()\n    data['windspeed'] = data['windspeed'] \/ data['windspeed'].max()    \n\n    data['var1'] = data['var1'] - data['var1'].min()\n    data['var1'] = data['var1'] \/ data['var1'].max()    \n    \n    data['A'] = (data['var2'] == 'A').astype(int)\n    data['B'] = (data['var2'] == 'B').astype(int)\n    data['C'] = (data['var2'] == 'C').astype(int)\n    \n    data['datetime'] = pd.to_datetime(data['datetime'])\n\n    data['year'] = data['datetime'].dt.year\n    for y in set(data['year']):\n        data['y' + str(y)] = (data['year'] == y).astype(int)\n    \n    data['weekday'] = data['datetime'].dt.weekday\n    for d in set(data['weekday']):\n        data['wd' + str(d)] = (data['weekday'] == d).astype(int)\n\n    data['month'] = data['datetime'].dt.month\n    for m in set(data['month']):\n        data['m' + str(m)] = (data['month'] == m).astype(int)\n\n    data['day'] = data['datetime'].dt.day\n    data['dsin'] = np.sin(2 * np.pi * (data['day']-1) \/ 31)\n    data['dcos'] = np.cos(2 * np.pi * (data['day']-1) \/ 31)\n\n    data['hour'] = 60 * data['datetime'].dt.hour + data['datetime'].dt.minute\n    data['hsin'] = np.sin(2 * np.pi * data['hour'] \/ (60*24))\n    data['hcos'] = np.cos(2 * np.pi * data['hour'] \/ (60*24))\n        \n    y = data['electricity_consumption']\n    X = data.drop(['electricity_consumption', 'ID', 'datetime', 'var2', 'month', 'year', 'weekday', 'hour', 'day' ], axis='columns')\n    return X, y\n\nX_train, y_train = preprocess(train)\nprint(X_train.head())\n\ndef scoref(model, X_test, y_test):\n    p_test = model.predict(X_test)\n    return (sum([ (p-y)**2 for p, y in zip(p_test, y_test) ]) \/ len(p_test)) ** 0.5\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils import shuffle\n\nX_train, y_train = shuffle(X_train, y_train)","03cff57b":"from sklearn.neighbors import KNeighborsRegressor\n\nmodel = KNeighborsRegressor(n_neighbors=3)\nerr = cross_val_score(model, X_train, y_train, cv=5, scoring=scoref)\nprint('mean cv error', sum(err) \/ 5)\n# mean cv error 35.495417212506204","9fceb76d":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasRegressor\n\ndef neural_net():\n    # create model\n    model = Sequential()\n    model.add(Dense(4000, input_dim=35, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1000, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n    # Compile model\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model\n\nimport datetime\n\ncurrent_time1 = datetime.datetime.now()\nmodel = KerasRegressor(build_fn=neural_net, epochs=500, batch_size=128, verbose=0)\nerr = cross_val_score(model, X_train, y_train, cv=5, scoring=scoref)\ncurrent_time2 = datetime.datetime.now()\nprint('time', current_time2 - current_time1, 'mean cv error', sum(err) \/ 5)\n","e0286432":"\nCPU 13 sec\/epoch for 2000x500\nGPU 3.7 sec\/epoch for 2000x500\n\n2000x500\n20e  58\n100e 36.47\n300e 34.31\n500e 33.91\n\n100 epochs\n1000 - 58.15\n3000 - 48.45\n500x500 - 40.35\n1000x500 - 38.26\n2000x500 - 36.47\n\n300 epochs \n2000x500 - 34.31\n\n1000 epochs \n2000x500 - 33.91\n\n500 epoch x 4000x1000 time 0:25:28.554657 mean cv error 32.57119835697332\n\n500 epoch x 10000x2000 time 0:25:28.554657 mean cv error 32.57119835697332\n\n1000 epoch x 10000x2000 time 1:08:07.338381 mean cv error 32.08962949990714\n"}}