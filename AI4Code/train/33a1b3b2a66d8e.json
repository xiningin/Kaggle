{"cell_type":{"aed76ede":"code","ac8f35ca":"code","9b72bebc":"code","3fd0da4f":"code","52b4a7eb":"code","cfe67a3d":"code","a4d85292":"code","c324144e":"code","e96db5fc":"code","ef51c3ee":"code","543e5d0e":"code","e634049e":"code","44214f17":"code","e11d0543":"code","7e7efd40":"code","6789353a":"code","d8968a58":"code","1da5dd7d":"code","b166281b":"code","531273f1":"code","fc53e6f9":"code","861cf73d":"code","8e88d912":"code","7c56cc17":"code","d2bd6704":"markdown","b971689b":"markdown","636b4a41":"markdown","8c6d94f7":"markdown","e22e1496":"markdown"},"source":{"aed76ede":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,20))\nx = [0,  250,395,445,530,640,773,1100,1270]#773\ny = [650,700,520,485,440,360,540,530,150]#0\n#x = [0,250,395,420,445,488,530,566,623,773]#,1100\n#y = [650,700,520,600,485,560,440,530,370,0]#,530\nplt.axis('off')\nimg = plt.imread(\"..\/input\/picture\/pleasure-boat-510668_1280.jpg\")\nplt.plot(x,y,'.-',zorder=1,color='yellow',linewidth=7,markersize=40)\nplt.imshow(img,zorder=0)\nplt.show()","ac8f35ca":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,roc_auc_score,log_loss\nfrom sklearn.model_selection import cross_val_score, KFold\nimport optuna","9b72bebc":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","3fd0da4f":"x_train,x_val,y_train,y_val = train_test_split(train.drop('Survived',1),train[['Survived']],test_size=0.2,random_state=12 )","52b4a7eb":"MEDIAN_FARE = x_train[x_train['Pclass']==3]['Fare'].median()\nx_train['title'] = x_train['Name'].str.extract(r'.*, ([A-z]*)\\..*',expand=False)\n#MEDIAN_AGE = x_train.Age.median()\nMEDIAN_AGE_MR = x_train.Age[x_train.title == 'Mr'].median()\nMEDIAN_AGE_MRS = x_train.Age[x_train.title == 'Mrs'].median()\nMEDIAN_AGE_MISS = x_train.Age[x_train.title == 'Miss'].median()\nMEDIAN_AGE_MASTER = x_train.Age[x_train.title == 'Master'].median()","cfe67a3d":"def preprocess_titanic(df):\n    \n    df['FamilySize'] = pd.cut(x=df['Parch']+df['SibSp'],bins = [-1,0,3,10], labels=['Alone','SmallFam','LargeFam'])\n    df['Deck'] = df['Cabin'].str.extract(r'^([A-z]).*',expand=False)\n    df['Fare'].fillna(MEDIAN_FARE,inplace=True)\n    # Add new categories for Cabins from the NaNs with different Pclass\n    df.loc[df['Pclass']==1,'Deck'] = df.loc[df['Pclass']==1,'Deck'].fillna(\"N1\")\n    df.loc[df['Pclass']==2,'Deck'] = df.loc[df['Pclass']==2,'Deck'].fillna(\"N2\")\n    df.loc[df['Pclass']==3,'Deck'] = df.loc[df['Pclass']==3,'Deck'].fillna(\"N3\")\n    #Fill na in embarked\n    df['Embarked'].fillna(\"C\",inplace=True)\n    #Extract title\n    df['title'] = df['Name'].str.extract(r'.*, ([A-z]*)\\..*',expand=False)\n    df['title'][df['title'].isin(['the Countess','Lady','Mme','Dona'])] = 'Mrs'\n    df['title'][df['title'].isin(['Mlle','Ms'])] = 'Miss'\n    df['title'][df['title'].isin(['Col','Major','Rev','Don','Dr','Capt'] ) & (df.Sex == 'male')] = 'Mr'\n    df['title'][df['title'].isin(['Dr'] )& (df.Sex != 'male')] = 'Mrs'\n    df['title'][df['title'].isin(['Jonkheer'])] = 'Master'\n    #df['Age'] = MEDIAN_AGE\n    df['Age'].loc[df.Age.isnull() & (x_train.title == 'Mr')] = MEDIAN_AGE_MR\n    df['Age'].loc[df.Age.isnull() & (x_train.title == 'Mrs')] = MEDIAN_AGE_MRS\n    df['Age'].loc[df.Age.isnull() & (x_train.title == 'Master')] = MEDIAN_AGE_MASTER\n    df['Age'].loc[df.Age.isnull() & (x_train.title == 'Miss')] = MEDIAN_AGE_MISS\n    df = pd.get_dummies(df,dummy_na=False,columns=['Sex','Embarked','Deck','Pclass','title','FamilySize'],drop_first=False)\n    return df","a4d85292":"vars_model = [ 'Fare','Age', 'Sex_male', 'Embarked_C', 'Embarked_Q',\n     'Embarked_S', 'Deck_A', 'Deck_B', 'Deck_C', 'Deck_D', 'Deck_E',\n    'Deck_F',  'Deck_N1', 'Deck_N2', 'Deck_N3', \n     'Pclass_1', 'Pclass_2', 'Pclass_3', 'title_Master', 'title_Miss',\n      'title_Mr', 'title_Mrs', 'FamilySize_Alone', 'FamilySize_SmallFam',\n       'FamilySize_LargeFam']","c324144e":"def var_selection(df,vars_to_keep):\n    return df[vars_to_keep]","e96db5fc":"x_train_ = (x_train.pipe(preprocess_titanic)\n... .pipe(var_selection,vars_model))","ef51c3ee":"x_val_ = (x_val.pipe(preprocess_titanic)\n... .pipe(var_selection,vars_model))","543e5d0e":"test_ = (test.pipe(preprocess_titanic)\n... .pipe(var_selection,vars_model))","e634049e":"#Optuna optimization\ndef objective(trial):\n    \n    n_estimators = trial.suggest_int(\"n_estimators\", 100, 1000,10)\n    max_depth = trial.suggest_int(\"max_depth\", 1, 10)\n    learning_rate = trial.suggest_float(\"learning_rate\", 1e-6, 1e-1, log=True)\n    gamma = trial.suggest_float(\"gamma\", 0.1, 1.0, step=0.1)\n    min_child_weight = trial.suggest_int(\"min_child_weight\", 1, 7, step=2)\n    subsample = trial.suggest_float(\"subsample\", 0.5, 1.0, step=0.1)\n    colsample_bytree = trial.suggest_float(\"colsample_bytree\", 0.,0.9, step=0.1)\n    reg_alpha = trial.suggest_float(\"reg_alpha\", 0., 15.0, step=0.5)\n    reg_lambda = trial.suggest_float(\"reg_lambda\", 0., 1.0, step=0.1)\n    \n    \n    model = xgb.XGBClassifier(objective ='binary:logistic',n_estimators=n_estimators,\n                         max_depth=max_depth,\n                         learning_rate=learning_rate,\n                         gamma=gamma,\n                         min_child_weight=min_child_weight,\n                         colsample_bytree=colsample_bytree,\n                         subsample=subsample,\n                         reg_alpha=reg_alpha,\n                         reg_lambda=reg_lambda,\n                         n_jobs=-1,random_state=10)\n    \n    model.fit(x_train_, y_train)\n    kfold = KFold(n_splits=7, random_state=10)\n    results = cross_val_score(model, x_train_, y_train, cv=kfold,scoring='roc_auc')\n    mean_auc = results.mean()\n   \n    \n    return mean_auc\n\nstudy = optuna.create_study(direction='maximize') # We would like to maximize AUC\nstudy.optimize(objective, n_trials=100)","44214f17":"study.best_params","e11d0543":"xg_class= xgb.XGBClassifier(objective ='binary:logistic', colsample_bytree = 0.9, learning_rate = 0.07645077352203392,gamma=1.0, max_depth =2, reg_alpha = 6.5,reg_lambda=0.2, n_estimators = 930,random_state=10,subsample=0.7,min_child_weight=1)","7e7efd40":"xg_class.fit(x_train_,y_train)","6789353a":"xg_preds_proba = xg_class.predict_proba(x_val_)","d8968a58":"xg_preds_p = xg_preds_proba[:,1]>0.5\n","1da5dd7d":"roc_auc_score(y_val,xg_preds_proba[:,1])","b166281b":"print(classification_report(y_val,xg_preds_p))","531273f1":"pd.crosstab(y_val.values.reshape((-1,)),xg_preds_p,normalize='all')","fc53e6f9":"xgb.plot_importance(xg_class)","861cf73d":"y_out_xgb_p = xg_class.predict_proba(test_)\ny_out_xgb = (y_out_xgb_p[:,1]>0.5).astype(int)","8e88d912":"output_xgb = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':y_out_xgb})","7c56cc17":"output_xgb.to_csv('submission_xgb.csv',index=False)","d2bd6704":"# XGBoost Model for Titanic Competition","b971689b":"XGBoost hyperparameters were tuned using Optuna. The AUC was used as the metric to optimize and a cross-validation with 5 folds was used. The code is based on the following notebook: https:\/\/www.kaggle.com\/hongpeiyi\/tuning-xgboost-with-optuna. It was adapted to work for a XGBoost Classifier.","636b4a41":"# Preprocessing Data Frames","8c6d94f7":"# XGBoost Model","e22e1496":"# Data Cleaning "}}