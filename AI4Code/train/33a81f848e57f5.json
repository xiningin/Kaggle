{"cell_type":{"1cde7049":"code","887d721e":"code","34caf053":"code","28760fd9":"code","29499748":"code","7bb5c2a8":"code","c30acf21":"code","b8b07e63":"code","edc2b5db":"code","50a59c72":"code","d79d1b9b":"code","616b7557":"code","df37cec4":"code","84fd85bb":"code","d663f676":"code","7bedef89":"code","588abb1c":"code","6b28f0a9":"code","b5a2af11":"code","74179aed":"code","01070804":"code","3aca0b13":"code","09032e26":"code","b62424ae":"code","3e7bb4e8":"code","409542aa":"code","b7f111a4":"code","7ecbdebc":"code","928ba01c":"code","75c6bf26":"code","70b6c9e4":"code","eabfd34b":"code","d68ad797":"code","103f3790":"code","77208b32":"code","a2b0c070":"code","486042a8":"code","c75baba1":"code","43d2b046":"code","8bfc8817":"code","180071ce":"code","b889e197":"code","faee2e5a":"code","fe43b151":"code","98daac8e":"markdown","bd969813":"markdown","70b840c3":"markdown","34a1e67f":"markdown","151bda7f":"markdown","5a5446d3":"markdown","6ea33a25":"markdown","045053c9":"markdown","b488165f":"markdown","3da034a4":"markdown","faf0b5b9":"markdown","97473dd0":"markdown","f14e3bed":"markdown","62b05b65":"markdown","09549e33":"markdown","fa1fc24c":"markdown","01ac2a97":"markdown","5beb963b":"markdown","bd9c7807":"markdown","f749eda9":"markdown","11937f67":"markdown"},"source":{"1cde7049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","887d721e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf","34caf053":"college = pd.read_csv('..\/input\/forbes-americas-top-colleges-2019\/ForbesAmericasTopColleges2019.csv')","28760fd9":"college.head()","29499748":"college.shape","7bb5c2a8":"college.nunique()","c30acf21":"sns.relplot(data=college, x=\"Rank\", y=\"Undergraduate Population\", hue=\"Acceptance Rate\", col=\"Public\/Private\")","b8b07e63":"sns.lmplot(data=college, x=\"Total Annual Cost\", y=\"Undergraduate Population\", col=\"Public\/Private\", hue = 'Public\/Private')","edc2b5db":"sns.stripplot(x='Public\/Private', y='Alumni Salary', alpha = 0.5, data=college)","50a59c72":"sns.lineplot(data = college, x='Total Annual Cost', y = 'Average Grant Aid', hue = 'Public\/Private')","d79d1b9b":"clg = college.drop(columns = ['Name','City','State','Website','Rank'])","616b7557":"clg.head()","df37cec4":"clg.isnull().sum()","84fd85bb":"clg['Net Price'] = clg['Net Price'].interpolate()\nclg['Average Grant Aid'] = clg['Average Grant Aid'].interpolate()\nclg['Alumni Salary'] = clg['Alumni Salary'].interpolate()\nclg['Acceptance Rate'] = clg['Acceptance Rate'].interpolate()\nclg['SAT Lower']= clg['SAT Lower'].interpolate()\nclg['SAT Upper']=clg['SAT Upper'].interpolate()\nclg['ACT Lower']=clg['ACT Lower'].interpolate()\nclg['ACT Upper']=clg['ACT Upper'].interpolate()","d663f676":"clg.isnull().sum()","7bedef89":"clg_1 = clg.drop(columns=['Alumni Salary'])","588abb1c":"clg_1.head()","6b28f0a9":"x = clg_1.iloc[:,0:].values","b5a2af11":"y = clg['Alumni Salary'].values","74179aed":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","01070804":"ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [0])], remainder = 'passthrough')","3aca0b13":"x = np.array(ct.fit_transform(x))","09032e26":"x","b62424ae":"from sklearn.model_selection import train_test_split","3e7bb4e8":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)","409542aa":"from sklearn.preprocessing import StandardScaler","b7f111a4":"sc = StandardScaler()","7ecbdebc":"x_train_1 = sc.fit_transform(x_train)","928ba01c":"x_test_1 = sc.transform(x_test)","75c6bf26":"ann = tf.keras.models.Sequential()","70b6c9e4":"ann.add(tf.keras.layers.Dense(units=6, activation = 'relu'))","eabfd34b":"ann.add(tf.keras.layers.Dense(units=6, activation = 'relu'))","d68ad797":"ann.add(tf.keras.layers.Dense(units=6, activation = 'relu'))","103f3790":"ann.add(tf.keras.layers.Dense(units=1, activation = 'linear'))","77208b32":"ann.compile(optimizer = 'adam', loss = 'mse')","a2b0c070":"ann.fit(x_train_1, y_train, batch_size = 32, epochs = 10000)","486042a8":"y_pred=ann.predict(x_test_1)","c75baba1":"y_pred.shape","43d2b046":"print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","8bfc8817":"y = y_test - y_pred","180071ce":"y","b889e197":"plt.scatter(y_test, y_pred)","faee2e5a":"plt.scatter(x_test[:,6],y_test)\nplt.scatter(x_test[:,6],y_pred, color = 'red')\nplt.xlabel('Total Annual Cost')\nplt.ylabel('Alumni Salary')","fe43b151":"plt.scatter(x_test[:,3],y_test)\nplt.scatter(x_test[:,3],y_pred, color = 'red')\nplt.xlabel('Student Population')\nplt.ylabel('Alumni Salary')","98daac8e":"# **2nd Hidden layer**","bd969813":"# **Importing required libraries**","70b840c3":"# **Training our data on the activation model**","34a1e67f":"# **Dropping unwanted columns**","151bda7f":"# **Defining optimizer and loss function**","5a5446d3":"# **Creating activation model**","6ea33a25":"# **Visualizations based on the prediction**","045053c9":"# **Importing the dataset**","b488165f":"# **Handling the categoerical 'Public\/Private' column**","3da034a4":"# **Visualizations**","faf0b5b9":"# **Predicting our x_test based on model**","97473dd0":"# **Dropping 'Alumni Salary' cloumn as we will use it as our Dependent Variable**","f14e3bed":"# **3rd Hidden layer**","62b05b65":"# **Output layer**","09549e33":"# **Concatinating y_test and y_pred**","fa1fc24c":"# **Filling null values using interpolation**","01ac2a97":"# **Scaling x_train and x_train**","5beb963b":"# **Checking for null values**","bd9c7807":"# **Splitting data into training and testing sets**","f749eda9":"# **Creating Independent Variable (x) and Dependent Variable (y)**","11937f67":"# **1st Hidden layer**"}}