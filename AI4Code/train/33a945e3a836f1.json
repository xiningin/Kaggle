{"cell_type":{"c82d5e07":"code","b075cb46":"code","32f1c716":"code","c92b3cdd":"code","a9aaf76b":"code","0415ae76":"code","c4ca2e08":"code","54a689fd":"code","00a61e38":"code","753ff8a1":"code","3576b5c8":"code","f20f311f":"code","ba3d673e":"code","1d87f7fb":"code","ce001340":"code","ff017a22":"code","b5f714aa":"code","b5b1e838":"code","3fa22bb7":"code","7c3eb9b8":"code","d7c5b1ed":"code","13cf86f8":"code","98917bbd":"code","7b4ed42c":"code","1b85a51b":"code","cf6f8c30":"code","1397bc1e":"code","1c0fbf3f":"code","3d2bd7db":"code","4e76f9e7":"code","f0444024":"code","13475246":"code","fc06470e":"code","e2ef8dc5":"code","0c658385":"code","5ac95f2b":"code","06702f07":"code","000c389b":"code","96a1bdf0":"code","84f8051a":"code","61d4261a":"code","fda67111":"code","d10a988e":"code","bcdfd2e8":"code","27f8643b":"code","2b7ebeb5":"code","e973647b":"code","865cf7c8":"code","886a3f5b":"code","676a29fd":"code","55203e04":"code","7bae5729":"code","a0ae107f":"code","47a95f89":"code","fc193417":"code","ca19e63a":"code","79e74f2b":"code","49631f87":"code","54391634":"code","aba4f785":"code","b9ddca29":"code","712e20ac":"code","9aeb9cae":"code","f9342e3e":"code","e42e6eb0":"code","4af1f97b":"code","b60685f5":"code","98111e34":"code","d9c82984":"code","b553ac4e":"code","edbfdcf2":"code","465dad70":"code","413985e2":"code","a14b1c11":"code","18e8580e":"code","6043ab88":"code","5b8d5110":"code","69322862":"code","f181ad5f":"code","fc951838":"code","5e66fa39":"code","a66e94ed":"code","8637c428":"markdown","46c37206":"markdown","a83d2e4f":"markdown","ed99a14b":"markdown","dad34b7d":"markdown","b79d0a09":"markdown","ce34879c":"markdown","bfb413bb":"markdown","0e5aa59e":"markdown","c8bd3d12":"markdown","dbbc700c":"markdown","ea0d6be6":"markdown","a21c8369":"markdown","589a4af9":"markdown","2d837e8b":"markdown","97770eea":"markdown","5c86f3fa":"markdown","dae7039f":"markdown","ba9ad231":"markdown","d48c6f46":"markdown","ba60c169":"markdown","5f91e825":"markdown","7ee2f0a1":"markdown","19c1306c":"markdown","0ec3913e":"markdown","a9caf33f":"markdown","f0efd28f":"markdown","9fba31b3":"markdown","c77ef02a":"markdown"},"source":{"c82d5e07":"import pandas as pd\nimport pandas_profiling\nimport numpy as np\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import Counter\nimport datetime\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nimport re\nimport math\nimport copy\nfrom IPython.display import display\npd.options.mode.chained_assignment = None","b075cb46":"import my_module as my","32f1c716":"RANDOM_SEED = 42\n!pip freeze > requirements.txt\nCURRENT_DATE = pd.to_datetime('15\/06\/2020')","c92b3cdd":"path_to_file = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(path_to_file+'main_task.csv')\ndf_test = pd.read_csv(path_to_file+'kaggle_task.csv')\npd.set_option('display.max_columns', 200)\ndisplay(df_train.head(2))\ndisplay(df_test.head(2))","a9aaf76b":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['Sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['Sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","0415ae76":"# \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pandas_profiling \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\n# pandas_profiling.ProfileReport(df_train)","c4ca2e08":"df['code_Restaurant_id'] = df['Restaurant_id'].apply(lambda x: float(x[3:]))","54a689fd":"# \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 9283 (23.2%) \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e\ndf['NAN_Cuisine Style'] = pd.isna(df['Cuisine Style']).astype('float64') \n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 'Other'\ndf['Cuisine Style'] = df['Cuisine Style'].fillna(\"['Other']\")\n\n# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043e \u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nle = LabelEncoder()\nle.fit(df['Cuisine Style'])\ndf['code_Cuisine Style'] = le.transform(df['Cuisine Style'])","00a61e38":"# \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ndf['Cuisine Style'] = df['Cuisine Style'].str.findall(r\"'(\\b.*?\\b)'\") \n\ntemp_list = df['Cuisine Style'].tolist()\n\ndef list_unrar(list_of_lists):\n    result=[]\n    for lst in list_of_lists:\n      result.extend(lst)\n    return result\n\ntemp_counter=Counter(list_unrar(temp_list))","753ff8a1":"# \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nlist_of_unique_Cuisine = [x[0] for x in temp_counter.most_common()[-16:]]\ndf['unique_Cuisine_Style'] = df['Cuisine Style'].apply(lambda x: 1 if len(set(x) & set(list_of_unique_Cuisine))>0  else 0).astype('float64')","3576b5c8":"for cuisine in temp_counter:\n    df[cuisine] = df['Cuisine Style'].apply(lambda x: 1 if cuisine in x else 0 ).astype('float64')\n\n# \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\ndf['count_Cuisine_Style'] = df['Cuisine Style'].apply(lambda x: len(x)).astype('float64')","f20f311f":"my.four_plot_with_log('count_Cuisine', df[df['Sample'] == 1].count_Cuisine_Style)","ba3d673e":"# \u0432\u0438\u0434\u0438\u043c\u043e \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0435\u0441\u0442\u044c \u043d\u0443\u043b\u0438, \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 Other, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435. \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\nmy.describe_without_plots('count_Cuisine_Style', df[df['Sample'] == 1].count_Cuisine_Style)","1d87f7fb":"# \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 13886 (34.7%)\n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445 \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c\ndf['NaN_Price Range'] = pd.isna(df['Price Range']).astype('float64') \n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e\ndic_value_Price = {'$':1,'$$ - $$$':2,'$$$$':3}\ndf['Price_Range']=df['Price Range'].map(lambda x: dic_value_Price.get(x,x))\n\n# 18412 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u044d\u0442\u043e \u0431\u043e\u043b\u0435\u0435 70% \u0438\u0437 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0446\u0435\u043d\u044b\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u0432\u043e\u0439\u043a\u043e\u0439 (2)\ndf['Price_Range'] = df['Price_Range'].fillna(2)","ce001340":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439\nmy.describe_with_hist('Price Range', df[df['Sample'] == 1].Price_Range)","ff017a22":"# \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 2543 (6.4%) \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e\ndf['NAN_Number of Reviews'] = pd.isna(df['Number of Reviews']).astype('float64')\n\n# \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\ndf.rename(columns={'Number of Reviews': 'Number_of_Reviews'}, inplace=True)","b5f714aa":"my.four_plot_with_log2('Number_of_Reviews', df[df['Sample'] == 1])","b5b1e838":"# \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0435\u0441\u0442\u044c, \u043a\u0443\u043f\u043e\u043b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441 \u0442\u043e\u0447\u043a\u0430\u043c\u0438 \u043f\u0435\u0440\u0435\u0433\u0438\u0431\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u043e \u043a\u0440\u0443\u043f\u043d\u0435\u0435\nmy.big_hist_log('Number_of_Reviews', df[df['Sample'] == 1])","3fa22bb7":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\nmy.borders_of_outliers('Number_of_Reviews', df[df['Sample'] == 1], log=True)","7c3eb9b8":"# \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e, \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445\ndf['outliers_Number_of_Reviews'] = pd.DataFrame(df['Number_of_Reviews']>5252).astype('float64')\ndf.loc[df['Number_of_Reviews']>5252, 'Number_of_Reviews']=None","d7c5b1ed":"# \u0432 \u0440\u0435\u0432\u044c\u044e \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043d\u043e 6471 \u0441\u0442\u0440\u043e\u043a \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c [[], []]. \u041f\u043e \u0441\u0443\u0442\u0438 \u044d\u0442\u043e \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0438\u0445 \ndf['empty_Reviews'] = (df['Reviews']=='[[], []]').astype('float64')\n\n# \u0430\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b \u0432\u044b\u044f\u0432\u0438\u043b \u0434\u0432\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430, \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e pandas.profiling \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0431\u0430\u0437\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435 \u0432\u044b\u044f\u0432\u0438\u043b, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 '[[], []]' \u0438 \u0437\u0430\u043a\u0438\u043d\u0435\u043c \u0432 empty_Reviews\ndf['Reviews'] = df['Reviews'].fillna('[[], []]')\ndf['empty_Reviews'] = (df['Reviews']=='[[], []]').astype('float64')","13cf86f8":"# \u0432\u044b\u0442\u0430\u0449\u0438\u043c \u0434\u0430\u0442\u0443 \u0438\u0437 \u0440\u0435\u0432\u044c\u044e \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438\ndf['date_of_Review'] = df['Reviews'].str.findall('\\d+\/\\d+\/\\d+')\ndf['len_date'] = df['date_of_Review'].apply(lambda x: len(x))\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u043b\u0438\u043d\u0443 \u0434\u0430\u0442, \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439 \u0435\u0441\u043b\u0438 \u0442\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0432\u0443\u0445 (2)\nmy.describe_without_plots('len_date', df[df['Sample'] == 1].len_date)","98917bbd":"# \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 3 \u043d\u0430\u0434\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0447\u0442\u043e \u0442\u0430\u043c\nprint(\"\u043a\u043e\u043b-\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Reviews \u0441 \u0442\u0440\u0435\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438 :=\" , len(df[df['len_date']==3]))\nprint(\"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Reviews \u0441 \u0442\u0440\u0435\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438 :=\")\ntemp_list = df[df['len_date']==3].Reviews.to_list()\ndisplay(df[df['len_date']==3].Reviews.to_list())\nprint(\"\u0434\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438:\")\ndisplay([re.findall('\\d+\/\\d+\/\\d+', x) for x in temp_list])","7b4ed42c":"# \u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u043b\u044e\u0434\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0438 \u0434\u0430\u0442\u044b \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0438 \u044d\u0442\u0438 \u0434\u0430\u0442\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443\n# \u0438\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u0442\u044b \u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0435 \u0438 \u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438\n# \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u0432\u0441\u0435\u0433\u043e \u0447\u0435\u0442\u044b\u0440\u0435 (4), \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0438\u0445 \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e 17 \n# \u0433\u043e\u0434 \u044f\u0432\u043d\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f. \u0412\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0442\u044c \u0436\u0430\u043b\u043a\u043e, \u0442\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c,\n# \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\n\ndf['len_date'].date_of_Review = df[df['len_date']==3].date_of_Review.apply(lambda x: x.pop(0))","1b85a51b":"# \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1 \u043d\u0430\u0434\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0447\u0442\u043e \u0442\u0430\u043c\nprint(\"\u043a\u043e\u043b-\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Reviews \u0441 \u043e\u0434\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 :=\" , len(df[df['len_date']==1]))\ndisplay(df[df['len_date']==1].Reviews[:4])","cf6f8c30":"# \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b \u0441 \u043e\u0434\u043d\u0438\u043c (1) \u043e\u0442\u0437\u044b\u0432\u043e\u043c \u0438 \u0438\u0445 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e 5680 \u0438\u0437 (40000-6471) \u044d\u0442\u043e 17%\n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u044d\u0442\u043e \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c\ndf['one_Review'] = (df['len_date']==1).astype('float64')\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0435\u0440\u0435\u0440\u044b\u0432 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 (\u043f\u043e \u043e\u0442\u0437\u044b\u0432\u0430\u043c \u0433\u0434\u0435 len = 2) \u0438 \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\ndef time_to_now(row):\n    if row['date_of_Review'] == []:\n        return None\n    return datetime.datetime.now() - pd.to_datetime(row['date_of_Review']).max()\n\ndef time_between_Reviews(row):\n    if row['date_of_Review'] == []:\n        return None\n    return pd.to_datetime(row['date_of_Review']).max() - pd.to_datetime(row['date_of_Review']).min()\n\ndf['day_to_now'] = df.apply(time_to_now, axis = 1).dt.days\ndf['day_between_Reviews'] = df[df['len_date']==2].apply(time_between_Reviews, axis = 1).dt.days","1397bc1e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 day_to_now - \u044d\u0442\u043e \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u0432 \u0434\u043d\u044f\u0445\nmy.four_plot_with_log2('day_to_now', df[df['Sample'] == 1])","1c0fbf3f":"# \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\nmy.borders_of_outliers('day_to_now', df[df['Sample'] == 1], log=True)","3d2bd7db":"# \u0436\u0430\u043b\u043a\u043e \u0442\u0435\u0440\u044f\u0442\u044c 2356 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043a\u0440\u0443\u043f\u043d\u043e\nmy.big_hist_log('day_to_now', df[df['Sample'] == 1])","4e76f9e7":"# \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0445 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439 \u043d\u0435 \u0432\u0438\u0434\u043d\u043e \n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\nmy.describe_without_plots('day_to_now', df[df['Sample'] == 1].day_to_now)","f0444024":"# \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0434\u0430\u0442\u0430\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0434\u043d\u044f\u0445 \nmy.four_plot_with_log2('day_between_Reviews', df[df['Sample'] == 1])","13475246":"my.big_hist_log('day_between_Reviews', df[df['Sample'] == 1])","fc06470e":"my.borders_of_outliers('day_between_Reviews', df[df['Sample'] == 1], log=True)","e2ef8dc5":"# \u043a\u043e\u043b-\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 495 (1.2%) - \u044d\u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e, \u043d\u043e \u043c\u044b \u043f\u043e\u043a\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0435, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0433\u043e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438\ndf['out_day_between_Reviews'] = (df['day_between_Reviews']==0).astype('float64')\n\n# \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ndf.loc[df['day_between_Reviews']==0, 'day_between_Reviews'] = None","0c658385":"my.describe_without_plots('day_between_Reviews', df[df['Sample'] == 1].day_between_Reviews)","5ac95f2b":"df['code_ID_TA'] = df['ID_TA'].apply(lambda x: float(x[1:]))","06702f07":"df['code_after_g_URL_TA'] = df['URL_TA'].str.split('-').apply(lambda x: x[1][1:]).astype('float64')","000c389b":"df_City_dummies = pd.get_dummies(df['City'], dummy_na=False).astype('float64')\ndf = pd.concat([df,df_City_dummies], axis=1)","96a1bdf0":"le = LabelEncoder()\nle.fit(df['City'])\ndf['code_City'] = le.transform(df['City'])","84f8051a":"list_Of_NotCapitalCity = ['Barcelona', 'Milan', 'Hamburg', 'Munich', \n                          'Lyon', 'Zurich', 'Oporto', 'Geneva', 'Krakow']\ndf['Capital_City'] = df['City'].apply(lambda x: 0.0 if x in list_Of_NotCapitalCity else 1.0)","61d4261a":"dict_\u0421ountries = {'London' : 'England', 'Paris' : 'France', 'Madrid' : 'Spain', \n                  'Barcelona' : 'Spain', 'Berlin' : 'Germany', 'Milan' : 'Italy', \n                  'Rome' : 'Italy', 'Prague' : 'Czech_c', 'Lisbon' : 'Portugal', \n                  'Vienna' : 'Austria', 'Amsterdam' : 'Holland', \n                  'Brussels' : 'Belgium', 'Hamburg' : 'Germany', 'Munich' : 'Germany', \n                  'Lyon' : 'France', 'Stockholm' : 'Sweden', 'Budapest' : 'Romania', \n                  'Warsaw' : 'Poland', 'Dublin' : 'Ireland', 'Copenhagen' : 'Denmark', \n                  'Athens' : 'Greece', 'Edinburgh' : 'Scotland', 'Zurich' : 'Switzerland', \n                  'Oporto' : 'Portugal', 'Geneva' : 'Switzerland', 'Krakow' : 'Poland', \n                  'Oslo' : 'Norway', 'Helsinki' : 'Finland', 'Bratislava' : 'Slovakia', \n                  'Luxembourg' : 'Luxembourg_c', 'Ljubljana' : 'Slovenia'}\ndf['\u0421ountry'] = df.apply(lambda row: dict_\u0421ountries[row['City']], axis = 1)\n\nle = LabelEncoder()\nle.fit(df['\u0421ountry'])\ndf['code_\u0421ountry'] = le.transform(df['\u0421ountry'])","fda67111":"dict_\u0421ity_population= {'London' : 8908, 'Paris' : 2206, 'Madrid' : 3223, 'Barcelona' : 1620, \n                        'Berlin' : 6010, 'Milan' : 1366, 'Rome' : 2872, 'Prague' : 1308, \n                        'Lisbon' : 506, 'Vienna' : 1888, 'Amsterdam' : 860, 'Brussels' : 179, \n                        'Hamburg' : 1841, 'Munich' : 1457, 'Lyon' : 506, 'Stockholm' : 961, \n                        'Budapest' : 1752, 'Warsaw' : 1764, 'Dublin' : 553, \n                        'Copenhagen' : 616, 'Athens' : 665, 'Edinburgh' : 513, \n                        'Zurich' : 415, 'Oporto' : 240, 'Geneva' : 201, 'Krakow' : 769, \n                        'Oslo' : 681, 'Helsinki' : 643, 'Bratislava' : 426, \n                        'Luxembourg' : 119, 'Ljubljana' : 284}\ndf['\u0421ity_population'] = df.apply(lambda row: dict_\u0421ity_population[row['City']], axis = 1)","d10a988e":"my.four_plot_with_log2('Ranking', df[df['Sample'] == 1])","bcdfd2e8":"my.big_hist('Ranking', df[df['Sample'] == 1])","27f8643b":"# \u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?\nplt.rcParams['figure.figsize'] = (12,6)\ndf_train['City'].value_counts(ascending=True).plot(kind='barh')","2b7ebeb5":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","e973647b":"# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \n# \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435\n# \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c City\nmean_Ranking_on_City = df.groupby(['City'])['Ranking'].mean()\ncount_Restorant_in_City = df['City'].value_counts(ascending=False)\ndf['mean_Ranking_on_City'] = df['City'].apply(lambda x: mean_Ranking_on_City[x])\ndf['count_Restorant_in_City'] = df['City'].apply(lambda x: count_Restorant_in_City[x])\ndf['norm_Ranking_on_Rest_in_City'] = (df['Ranking'] - df['mean_Ranking_on_City']) \/ df['count_Restorant_in_City']","865cf7c8":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df['City'].value_counts())[0:10].index:\n    df['norm_Ranking_on_Rest_in_City'][df['City'] == x].hist(bins=100)\nplt.show()","886a3f5b":"max_Ranking_on_City = df.groupby(['City'])['Ranking'].max()\ndf['max_Ranking_on_City'] = df['City'].apply(lambda x: max_Ranking_on_City[x])\ndf['norm_Ranking_on_maxRank_in_City'] = (df['Ranking'] - df['mean_Ranking_on_City']) \/ df['max_Ranking_on_City']","676a29fd":"for x in (df['City'].value_counts())[0:10].index:\n    df['norm_Ranking_on_maxRank_in_City'][df['City'] == x].hist(bins=100)\nplt.show()","55203e04":"# \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 Ranking \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 Population_\u0421ity\nmean_Ranking_on_City = df.groupby(['City'])['Ranking'].mean()\ndf['mean_Ranking_on_City'] = df['City'].apply(lambda x: mean_Ranking_on_City[x])\ndf['norm_Ranking_on_Popul_in_City'] = (df['Ranking'] - df['mean_Ranking_on_City']) \/ df['\u0421ity_population']\n\nfor x in (df['City'].value_counts())[0:10].index:\n    df['norm_Ranking_on_Popul_in_City'][df['City'] == x].hist(bins=100)\nplt.show()","7bae5729":"df['norm_Population_on_Rest'] = df['\u0421ity_population']\/df['count_Restorant_in_City']","a0ae107f":"display(df.head(2))","47a95f89":"df.drop(['Restaurant_id', 'City', 'Cuisine Style', 'Price Range', 'Reviews', 'URL_TA', 'ID_TA', 'date_of_Review', 'len_date', '\u0421ountry', '\u0421ity_population', 'mean_Ranking_on_City', 'count_Restorant_in_City', 'max_Ranking_on_City', ], axis=1, inplace=True, errors='ignore')","fc193417":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438\ndef StandardScaler_column(d_col):\n    scaler = StandardScaler()\n    scaler.fit(df[[d_col]])\n    return scaler.transform(df[[d_col]])\n# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0440\u043e\u043c\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0438 Sample\nfor i  in list(df.columns):\n    if i not in ['Rating','Sample']:\n        df[i] = StandardScaler_column(i)\n        if len(df[df[i].isna()]) < len(df):\n            df[i] = df[i].fillna(0)","ca19e63a":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\ndisplay(df.describe().head(1))","79e74f2b":"train_data = df.query('Sample == 1').drop(['Sample'], axis=1)\ntest_data = df.query('Sample == 0').drop(['Sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","49631f87":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","54391634":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","aba4f785":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","b9ddca29":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","712e20ac":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f\ndef classic_round(d_num):\n    return int(d_num + (0.5 if d_num > 0 else -0.5))\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f \u043a\u0440\u0430\u0442\u043d\u043e 0.5\ndef my_round(d_pred):\n    result = classic_round(d_pred*2)\/2\n    if result <=5:\n        return result\n    else:\n        return 5\n    \n# \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 np\nmy_vec_round = np.vectorize(my_round)","9aeb9cae":"y_pred = my_vec_round(y_pred)","f9342e3e":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nMAE = metrics.mean_absolute_error(y_test, y_pred)\nprint('MAE:', MAE)","e42e6eb0":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (12,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","4af1f97b":"df_temp = df.loc[df['Sample'] == 1, list(feat_importances.nlargest(15).index[0:15])]\nplt.rcParams['figure.figsize'] = (12,6)\nax = sns.heatmap(df_temp.corr(), annot=True, fmt='.2g')\ni, k = ax.get_ylim()\nax.set_ylim(i+0.5, k-0.5)","b60685f5":"list_temp = list(feat_importances.nlargest(15).index[[9,10]])\ndisplay(df_temp[list_temp].corr())","98111e34":"# \u0432\u0441\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0420\u0435\u0437\u044e\u043c\u0435 \u043f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e code_Restaurant_id. \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0442\u0430\u043a \u043a\u0430\u043a \u0431\u044b\u043b\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 Ranking\ndf.drop(['code_Restaurant_id'], axis=1, inplace=True, errors='ignore')","d9c82984":"list_temp = list(feat_importances.nlargest(15).index[[0,1,6,10]])\ndf_temp[list_temp].corr()","b553ac4e":"# \u041c\u0435\u0442\u043e\u0434 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, PCA\nC = np.array([\n    [       1, 0.999832, 0.800703, 0.574781],\n    [0.999832,        1, 0.796851, 0.570877],\n    [0.800703, 0.796851,        1, 0.448070],\n    [0.574781, 0.570877, 0.448070,        1]]) \neig_num, eig_v = np.linalg.eig(C)\nprint(f\"\u0432\u0435\u043a\u0442\u043e\u0440 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 := {eig_v[:,0]}\")","edbfdcf2":"df['norm_Ranking_PCA'] = eig_v[:,0][0]*df['norm_Ranking_on_maxRank_in_City'] + eig_v[:,0][1]*df['norm_Ranking_on_Rest_in_City'] + eig_v[:,0][2]*df['norm_Ranking_on_Popul_in_City']+eig_v[:,0][3]*df['Ranking']","465dad70":"df['Ranking_on_square'] = df['Ranking']* df['Ranking']\ndf['doble_Ranking'] = df['Ranking']","413985e2":"# \u0431\u043b\u043e\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0433\u043e \u0443\u0436\u0435 \u0431\u044b\u043b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\n# # \u0431\u043b\u043e\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\n# list_ofAllColumnsSortImportant = list(feat_importances.nlargest(len(train_data.columns)-1).index)\n# min_MAE = round(MAE,3)\n# print(f\"min_MAE = {min_MAE}\")\n# remove_list = []\n# log = []\n# delta =0.002\n# for i in range(0,len(list_ofAllColumnsSortImportant),1):\n#     col = list_ofAllColumnsSortImportant[i]\n#     print(f\"{i}.{col}\")\n#     ###\n#     train_data = df.query('Sample == 1').drop(['Sample']+drop_list2, axis=1)\n#     test_data = df.query('Sample == 0').drop(['Sample']+drop_list2, axis=1)\n\n#     y = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n#     X = train_data.drop(['Rating']+[col], axis=1)\n\n#     # \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n#     # \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\n#     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n#     print(test_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape)\n\n#     model.fit(X_train, y_train)\n\n#     y_pred = model.predict(X_test)\n\n#     y_pred = my_vec_round(y_pred)\n#     temp_MAE = metrics.mean_absolute_error(y_test, y_pred)\n#     ###\n#     print(temp_MAE)\n#     log.append([col, temp_MAE])\n#     if round(temp_MAE,3) <= min_MAE-delta:\n#         remove_list.append(col)\n#         print(f\"\u0443\u0434\u0430\u043b\u044f\u0435\u043c:= {col}\")\n#     else:\n#         print(f\"\u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c:= {col}\")\n# print(f\"i={i}\")\n# print(f\"remove_list: {remove_list}\")\n# print(f\"log_list: {log}\")","a14b1c11":"log_list = ['out_day_between_Reviews', 0.163], ['Ranking', 0.1631875], ['Burmese', 0.163375], ['Georgian', 0.1635], ['Fusion', 0.1635625], ['Balti', 0.1635625], ['Tibetan', 0.1636875], ['norm_Ranking_PCA', 0.16375], ['Scottish', 0.16375], ['Eastern European', 0.16375], ['norm_Ranking_on_Rest_in_City', 0.1638125], ['count_Cuisine_Style', 0.1638125], ['Ethiopian', 0.1638125], ['Minority Chinese', 0.1638125], ['Madrid', 0.163875], ['Portuguese', 0.163875], ['Delicatessen', 0.163875], ['Halal', 0.163875], ['Azerbaijani', 0.163875], ['Caucasian', 0.163875], ['Geneva', 0.1639375], ['Scandinavian', 0.1639375], ['Uzbek', 0.1639375], ['Polynesian', 0.164], ['Price_Range', 0.1640625], ['Healthy', 0.1640625], ['Cuban', 0.1640625], ['Dublin', 0.164125], ['Peruvian', 0.164125], ['Salvadoran', 0.164125], ['Sushi', 0.1641875], ['Central European', 0.1641875], ['Venezuelan', 0.1641875], ['Capital_City', 0.16425], ['Gluten Free Options', 0.16425], ['Athens', 0.16425], ['Lebanese', 0.16425], ['Brew Pub', 0.16425], ['Taiwanese', 0.16425], ['Spanish', 0.1643125], ['African', 0.1643125], ['Lisbon', 0.1643125], ['Russian', 0.1643125], ['Central Asian', 0.1643125], ['Singaporean', 0.1643125], ['code_\u0421ountry', 0.164375], ['Italian', 0.164375], ['Wine Bar', 0.164375], ['Barcelona', 0.164375], ['Diner', 0.164375], ['Arabic', 0.164375], ['Filipino', 0.164375], ['Xinjiang', 0.164375], ['Krakow', 0.1644375], ['Lyon', 0.1644375], ['London', 0.1644375], ['unique_Cuisine_Style', 0.1644375], ['European', 0.1645], ['Oporto', 0.1645], ['Contemporary', 0.1645], ['Vienna', 0.1645], ['Croatian', 0.1645], ['Romanian', 0.1645], ['Southwestern', 0.1645], ['Cambodian', 0.1645], ['Vegetarian Friendly', 0.1645625], ['Milan', 0.1645625], ['Egyptian', 0.1645625], ['Fujian', 0.1645625], ['Ranking_on_square', 0.164625], ['German', 0.164625], ['Thai', 0.164625], ['Brussels', 0.164625], ['Cajun & Creole', 0.164625], ['Colombian', 0.164625], ['Kosher', 0.164625], ['Indian', 0.1646875], ['Oslo', 0.1646875], ['Ecuadorean', 0.1646875], ['Latvian', 0.1646875], ['Fast Food', 0.16475], ['Grill', 0.16475], ['Prague', 0.16475], ['Czech', 0.16475], ['New Zealand', 0.16475], ['French', 0.1648125], ['Ljubljana', 0.1648125], ['Argentinean', 0.1648125], ['Stockholm', 0.164875], ['South American', 0.164875], ['Moroccan', 0.164875], ['Jamaican', 0.164875], ['Native American', 0.164875], ['Bar', 0.1649375], ['Asian', 0.1649375], ['Belgian', 0.1649375], ['Luxembourg', 0.1649375], ['Irish', 0.1649375], ['Rome', 0.165], ['Mediterranean', 0.165], ['Vietnamese', 0.165], ['Sri Lankan', 0.165], ['Afghani', 0.165], ['Seafood', 0.1650625], ['Budapest', 0.1650625], ['Hungarian', 0.1650625], ['Vegan Options', 0.165125], ['Chilean', 0.165125], ['Pub', 0.1651875], ['NAN_Cuisine Style', 0.1651875], ['Polish', 0.1651875], ['code_after_g_URL_TA', 0.16525], ['Street Food', 0.16525], ['Copenhagen', 0.16525], ['Ukrainian', 0.16525], ['Israeli', 0.16525], ['Slovenian', 0.16525], ['Albanian', 0.16525], ['NAN_Number of Reviews', 0.1653125], ['Brazilian', 0.1653125], ['Swedish', 0.1653125], ['Paris', 0.165375], ['Middle Eastern', 0.1654375], ['Munich', 0.1654375], ['Cafe', 0.1655], ['Other', 0.1655], ['Chinese', 0.1655], ['Berlin', 0.1655], ['Pizza', 0.1655625], ['International', 0.1655625], ['Pakistani', 0.1655625], ['Swiss', 0.1655625], ['Norwegian', 0.1655625], ['Bratislava', 0.165625], ['Steakhouse', 0.165625], ['Zurich', 0.165625], ['Mongolian', 0.165625], ['Canadian', 0.165625], ['Dutch', 0.1656875], ['British', 0.1656875], ['Danish', 0.1656875], ['Barbecue', 0.1656875], ['Austrian', 0.1656875], ['Gastropub', 0.16575], ['Nepali', 0.16575], ['Latin', 0.16575], ['Caribbean', 0.16575], ['Helsinki', 0.1658125], ['Armenian', 0.1658125], ['Central American', 0.165875], ['Welsh', 0.165875], ['Edinburgh', 0.1660625], ['norm_Ranking_on_maxRank_in_City', 0.166125], ['Tunisian', 0.166125], ['day_between_Reviews', 0.1661875], ['code_City', 0.166375], ['NaN_Price Range', 0.1666875], ['Greek', 0.1668125], ['day_to_now', 0.1669375], ['code_ID_TA', 0.1691875], ['Number_of_Reviews', 0.2305625]","18e8580e":"drop_list = ['Australian', 'one_Review', 'outliers_Number_of_Reviews', 'norm_Ranking_on_Popul_in_City', 'Korean', 'Japanese', 'Turkish', 'Malaysian', 'Indonesian', 'Hawaiian', 'code_Cuisine Style', 'norm_Population_on_Rest', 'Amsterdam', 'Hamburg', 'doble_Ranking', 'Warsaw', 'Persian', 'Soups', 'Mexican', 'Bangladeshi', 'Yunnan', 'American', 'empty_Reviews']","6043ab88":"train_data = df.query('Sample == 1').drop(['Sample']+drop_list, axis=1)\ntest_data = df.query('Sample == 0').drop(['Sample','Rating']+drop_list, axis=1)\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","5b8d5110":"sample_submission = pd.read_csv(path_to_file+'sample_submission.csv')\nsample_submission.head()","69322862":"sample_submission.shape, test_data.shape, X.shape, y.shape","f181ad5f":"model.fit(X, y)","fc951838":"predict_submission = model.predict(test_data)","5e66fa39":"predict_submission=my_vec_round(predict_submission)\npredict_submission","a66e94ed":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head()","8637c428":"### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432","46c37206":"### 6. ID_TA","a83d2e4f":"### 7. URL_TA","ed99a14b":"### \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441 \u0442\u0435\u0441\u0442\u043e\u043c","dad34b7d":"***\u0420\u0435\u0437\u044e\u043c\u0435 - Price Range:*** \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 13886 (34.7%). \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 - 'NaN_Price Range'. \u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b - 'Price_Range' (\u043d\u0438\u0437\u043a\u0430\u044f \u0446\u0435\u043d\u0430 - 1, \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 -2 , \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u0446\u0435\u043d\u0430 - 3).  \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043c\u043e\u0434\u043e\u0439 - \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u043e\u0439 (\u0434\u0432\u043e\u0439\u043a\u043e\u0439). \n\n### 4. Number of Reviews","b79d0a09":"***\u0420\u0435\u0437\u044e\u043c\u0435 - Reviews:*** \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0435\u0442, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c - 2. \u041d\u043e \u0435\u0441\u0442\u044c 6471 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u044d\u0442\u043e 16% \u043e\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0412 5680 (14%) \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043e\u0442\u0437\u044b\u0432, \u0445\u043e\u0442\u044f \u0432 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0434\u0432\u0430.  \n\u0421\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438:   \n- empty_Reviews - \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b  \n- date_of_Review - \u0434\u0430\u0442\u044b \u0438\u0437 \u043e\u0442\u0437\u044b\u0432\u043e\u0432  \n- len_date - \u043a\u043e\u043b-\u0432\u043e \u0434\u0430\u0442 \u0432 \u043e\u0442\u0437\u044b\u0432\u0435  \n- day_to_now - \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u0432 \u0434\u043d\u044f\u0445  \n- day_between_Reviews - \u043f\u0435\u0440\u0435\u0440\u044b\u0432 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0432 \u0434\u043d\u044f\u0445\n\n***\u0420\u0435\u0437\u044e\u043c\u0435 - day_to_now \u0438\u0437 Reviews:*** \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u0440\u043e\u0433\u0443 \u043d\u0435 \u043d\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f TripAdvisor \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 2000 \u0433\u043e\u0434\u0430. \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 5896\/365 ~ 16,5 \u043b\u0435\u0442 \u043e\u0442 2020 \u0433\u043e\u0434\u0430 \u0443\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0430\u0442\u0443 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0441\u0430\u0439\u0442\u0430. \u0412 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e\u043f\u0430\u043b\u043e 2365 (\u043f\u043e\u0447\u0442\u0438 6%) \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0435\u0437\u044e\u043c\u0435 \u043f\u043e \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 Reviews, \u044f \u043f\u043e\u043a\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u0437\u0431\u0430\u0432\u043b\u044f\u0442\u0441\u044f \u043e\u0442 \u0432\u044b\u0440\u043e\u0441\u043e\u0432, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f, \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u043d\u0435\u043c\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u043e\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","ce34879c":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a","bfb413bb":"### \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","0e5aa59e":"***\u0420\u0435\u0437\u044e\u043c\u0435 - Cuisine Style:*** \u041c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 9283 (23.2%). \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'NAN_Cuisine Style'. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0442\u0435\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0435\u0440\u0430 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u0432\u0435\u043b \u043d\u043e\u0432\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 - 'code_Cuisine Style'. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c. \u041f\u043e \u0441\u0430\u043c\u044b\u043c \u043d\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a - 'unique_Cuisine_Style'. \u041a\u0440\u043e\u043c\u0435 \u044d\u0442\u043e\u0433\u043e, \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 'count_Cuisine_Style'. \u0412 \u043d\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442. \u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \\[\\] \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043d\u0435 \u0431\u044b\u043b\u043e.\n\n### 3. Price Range","c8bd3d12":"### 8.2. \u0421ountries","dbbc700c":"### \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\n---\n### 1. Restaurant_id","ea0d6be6":"***\u0420\u0435\u0437\u044e\u043c\u0435 - day_between_Reviews \u0438\u0437 Reviews:*** \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d \u0441\u043b\u0430\u0431\u043e 70%. \u0423\u0434\u0430\u043b\u0435\u043d\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043d\u0443\u043b\u0435 (492 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f). \u0421\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 - out_day_between_Reviews  \n\n<details>\n  <summary>***\u041f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u0439 \u0438\u043b\u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043e\u0442\u0442\u0435\u043d\u043e\u043a \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445***<\/summary>\n    \u042d\u0442\u043e\u0442 \u043f\u0443\u043d\u043a\u0442 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043d, \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0447\u0435\u043c \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430. \u0422\u0430\u043a \u043a\u0430\u043a \u044f \u0440\u0435\u0448\u0438\u043b \u043f\u043e\u043a\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0432\u044b\u0436\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0435\u0441\u043b\u0438 \u0445\u0432\u0430\u0442\u0438\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n  <\/details> ","a21c8369":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445","589a4af9":"\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u043b\u043e\u043a\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430:  \n1. \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432 \u043f\u043e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \n2. \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0432\u0441\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n3. \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u041c\u0410\u0415 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043b\u043e\u0433\n4. \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0432\u0441\u0435\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0432\u0435\u0441\u044c \u043b\u043e\u0433 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u041c\u0410\u0415\n5. \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0430\u043c\u044b\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u041c\u0410\u0415 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u043f\u043e\u043a\u0430 \u041c\u0410\u0415 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f\n6. \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435","2d837e8b":"***\u0420\u0435\u0437\u044e\u043c\u0435 - Number of Reviews*** 2543 (6.4%) \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.  \n\u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0432 \u043d\u0435\u043c \u0434\u0432\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0447\u0435\u043c \u043e\u0434\u043d\u043e \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0411\u0435\u0440\u043d\u0443\u043b\u0438 \u043f\u0440\u0438 \u043c\u0430\u043b\u043e\u043c \u043a\u043e\u043b-\u0432\u0435 \u043a\u0443\u0445\u043e\u043d\u044c. \u0412\u0442\u043e\u0440\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430 \"\u0444\u0435\u0439\u043a\u043e\u0432\u044b\u0435\" \u043e\u0442\u0437\u044b\u0432\u044b \u0438\u043b\u0438 \"\u043d\u0430\u043a\u0440\u0443\u0442\u043a\u0438\")  \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0440\u0435\u0437\u044b \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (City) \u0438\u043b\u0438 \u043d\u0430 \u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (Population \u0438 \u0442.\u043f.), \u0435\u0441\u043b\u0438 \u0445\u0432\u0430\u0442\u0438\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.  \n\u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 10. \u0423\u0434\u0430\u043b\u0438\u043b. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n\n### 5. Reviews","97770eea":"### \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432","5c86f3fa":"### 8.4. \u0421ity_population","dae7039f":"### 8.1. Capital_City","ba9ad231":"### 8. City","d48c6f46":"### Submission","ba60c169":"### \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (PCA)","5f91e825":"### \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c","7ee2f0a1":"\u0420\u0435\u0437\u044e\u043c\u0435 - Restaurant_id: \u0412\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u043a\u043e\u0434 Restaurant_id \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 Ranking \u0432 data_train. \u041d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c 'code_Restaurant_id'","19c1306c":"### \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439","0ec3913e":"### \u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430  \n### \u043f\u043e \u041f\u0440\u043e\u0435\u043a\u0442\u0443 3. \u041e \u0432\u043a\u0443\u0441\u043d\u043e\u0439 \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u043f\u0438\u0449\u0435 (SF-DST-10)\n####  \u042e\u043d\u0438\u0442 3. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 15.06.2020)\n---\n\n### \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","a9caf33f":"***\u0420\u0435\u0437\u044e\u043c\u0435 - City:*** \u0411\u0435\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u043f\u043e \u0442\u0438\u043f\u0443 dummies, \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 code_City \u0441 \u0438\u043d\u0442\u0435\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 LabelEncoder \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn  \n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438:  \n- Capital_City - \u0441\u0442\u043e\u043b\u0438\u0446\u0430  \n- code_\u0421ountry - \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LabelEncoder\n- \u0421ity_population - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 (\u0442\u044b\u0441. \u0447\u0435\u043b.)  \n\n### 9. Ranking","f0efd28f":"### 2. Cuisine Style","9fba31b3":"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435!  \n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0438 \u0435\u0433\u043e \u043f\u043e\u043b\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043d\u0430 GitHub\nhttps:\/\/github.com\/alex-sokolov2011\/skillfactory_rds\/tree\/master\/module_3","c77ef02a":"### \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f"}}