{"cell_type":{"2b4ec8d0":"code","4d95f9ea":"code","3a83c5a9":"code","49b1fa25":"code","6aaade02":"code","0f68086b":"code","358dfc31":"code","7d978244":"code","8fa14b70":"code","380534a9":"code","cb338601":"code","99486264":"code","800b7b2b":"code","61537965":"code","0641d1bb":"markdown"},"source":{"2b4ec8d0":"!pip install boxx > .null","4d95f9ea":"import boxx  \n# boxx: A Tool-box for Efficient Build and Debug in Python. Especially for Scientific Computing and Computer Vision.\n# For more infomation about boxx : https:\/\/github.com\/DIYer22\/boxx\n\nimport numpy as np\nimport pandas as pd \nimport random\nimport os\nprint(os.listdir(\"..\/input\/retail_product_checkout\"))","3a83c5a9":"# visualization train image (single image)\nimport glob\nfrom skimage.io import imread\ntrain_image = imread(glob.glob(\"..\/input\/retail_product_checkout\/train2019\/*\")[0])\nboxx.show(train_image)","49b1fa25":"# visualization test\/val image (checkout image)\ntest_image = imread(glob.glob(\"..\/input\/retail_product_checkout\/test2019\/*\")[0])\nboxx.show(test_image)\n\n\nval_image = imread(glob.glob(\"..\/input\/retail_product_checkout\/val2019\/*\")[0])\nboxx.show(val_image)","6aaade02":"# Loading annotation files\ntrain_js = boxx.loadjson('..\/input\/retail_product_checkout\/instances_train2019.json')\nval_js = boxx.loadjson('..\/input\/retail_product_checkout\/instances_val2019.json')\ntest_js = boxx.loadjson('..\/input\/retail_product_checkout\/instances_test2019.json')\n\n# Visualization struct of instances_train2019.json\n# These annotation files has similar struct as COCO Object Detection Dataset\nboxx.tree(train_js, deep=1)","0f68086b":"boxx.tree(val_js, deep=1)","358dfc31":"boxx.tree(test_js, deep=1)","7d978244":"# Visualization struct of instances_test2019.json\nfrom pprint import pprint\npprint(test_js['images'][0])","8fa14b70":"pprint(test_js['annotations'][0])","380534a9":"# The Categories Data format\ncategories_df = pd.DataFrame(train_js['categories'])","cb338601":"categories_df","99486264":"# Statistic the RPC dataset in different split set\n\ndef statistic_rpc_json_dataset(js, split_name=None):\n    '''\n    statistic dataset, input a coco format json file, then print and return `boxx.Markdown` instance\n    note: `boxx.Markdown` is a sub class of `pd.DataFrame`\n    '''\n    df = pd.DataFrame(js['annotations'])\n    images = len(js['images'])\n    objects = len(js['annotations'])\n    \n    object_number_per_image = df.groupby('image_id').id.count().mean()\n    category_number_per_image = df.groupby('image_id').apply(lambda sdf: len(set(sdf.category_id))).mean()\n    \n    markdown_df = pd.DataFrame([dict(split_name=split_name, \n                                     images=images, objects=objects, \n                                     object_number_per_image=round(object_number_per_image,2), \n                                     category_number_per_image=round(category_number_per_image,2))])\n    markdown = boxx.Markdown(markdown_df[['split_name', 'images', 'objects',  'object_number_per_image','category_number_per_image', ]])\n    #boxx.g()\n    print(markdown)\n    return markdown\n\nstatistic_rpc_json_dataset(train_js, 'train')\nstatistic_rpc_json_dataset(val_js, 'val')\nstatistic_rpc_json_dataset(test_js, 'test')\n","800b7b2b":"# Statistic checkout(val+test) set\n\ncheckout_js = dict(images=test_js['images']+val_js['images'], annotations=test_js['annotations']+val_js['annotations'])\nstatistic_rpc_json_dataset(checkout_js, 'checkout(val+test)')","61537965":"# Statistic checkout(val+test) sets for different clutters\n\nfor level in [\"easy\", \"medium\", \"hard\"]:\n    level_images = filter(lambda d:d['level']==level, test_js['images']+val_js['images'])\n    level_images = list(level_images)\n    \n    level_image_ids = set([d['id'] for d in level_images])\n    level_annotations = list(filter(lambda d:d['image_id'] in level_image_ids, test_js['annotations']+val_js['annotations'] ))\n    \n    level_js = dict(images=level_images,annotations=level_annotations)\n    statistic_rpc_json_dataset(level_js, level)","0641d1bb":"### Notice:\n1. `js['images'][i]['level']` means different clutters in checkout images\n2. `js['annotations'][i]['point_xy']` means the point location of one instance in format `[x, y]`"}}