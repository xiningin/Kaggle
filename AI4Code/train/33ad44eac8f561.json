{"cell_type":{"9d993d27":"code","f0f2672b":"code","b7dbbef4":"code","30cdc973":"code","dbda2f7d":"code","2ab71861":"code","3b0ebfbc":"code","2cfd2eed":"code","b6abaebe":"code","10fbc332":"code","eb11b7ca":"code","1573f2b8":"code","9848baea":"code","bd657789":"code","5c7ce776":"code","2b3ff357":"code","29cb9dce":"code","ba958a45":"code","0a85fdec":"code","d1b55bae":"code","594c849c":"code","018ef023":"code","105cae54":"code","b29b73d0":"code","f30e7c6d":"code","11896074":"code","8357c8f2":"code","4baffe51":"code","a382e441":"code","6c207276":"code","46963f01":"code","0f75c1c4":"code","0630ebd1":"code","7f5c3bf8":"code","24fc885b":"code","89ae19da":"code","904a109d":"code","8d5e8cde":"code","bcffd252":"code","e417c685":"code","c4b96dbb":"code","9aab2345":"code","c66db5b1":"code","97562bf2":"code","c6a183d8":"code","779e0236":"code","d13acc0b":"markdown","aa2f6e47":"markdown","6fe05087":"markdown","a13fde1c":"markdown","7d717cb3":"markdown"},"source":{"9d993d27":"import pandas as pd\nimport matplotlib as mat\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom wordcloud import WordCloud\nimport xgboost as xgb\nfrom xgboost import plot_importance\nfrom sklearn.model_selection import cross_val_score, GridSearchCV,cross_val_predict\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error,  r2_score\nimport numpy as np\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"","f0f2672b":"mat.rcParams.update({'figure.figsize':(20,15),'font.size':14})","b7dbbef4":"covid19_train = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ncovid19_test = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')","30cdc973":"covid19_train.rename(columns={'Id':'ForecastId'},inplace=True)","dbda2f7d":"covid19_train['Date-All'] = covid19_train['Date'].str.replace('-','').astype(int)\ncovid19_test['Date-All'] = covid19_test['Date'].str.replace('-','').astype(int)","2ab71861":"covid19_train['Date'] = pd.to_datetime(covid19_train['Date'])\ncovid19_test['Date'] = pd.to_datetime(covid19_test['Date'])","3b0ebfbc":"covid19_gdf = covid19_train.groupby(['Date','Country_Region'])['ConfirmedCases'].sum().reset_index()\ncovid19_gdf['date'] = pd.to_datetime(covid19_gdf['Date'])\ncovid19_gdf['date'] = covid19_gdf['date'].dt.strftime('%m\/%d\/%Y')","2cfd2eed":"fig = px.scatter_geo(covid19_gdf.fillna(0), locations=\"Country_Region\", locationmode='country names', \n                     color=\"ConfirmedCases\", size=\"ConfirmedCases\", hover_name=\"Country_Region\", \n                     projection=\"natural earth\", animation_frame=\"date\", \n                     title='Coronavirus Spread', color_continuous_scale=\"OrRd\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","b6abaebe":"totalCountryCases = covid19_train.drop_duplicates(['Province_State', 'Country_Region'],keep='last').groupby(['Country_Region'])[['ConfirmedCases']].sum().sort_values('ConfirmedCases',ascending=False)\ntotalCountryCases.head(20).plot(kind='bar',color='r')\nplt.grid()\nplt.show()","10fbc332":"mask=np.array(Image.open(\"..\/input\/coronavirusimage\/coronavirus.png\"))\nwc = WordCloud(background_color=\"black\",colormap=plt.cm.OrRd,collocations = False,mask=mask).generate_from_frequencies(totalCountryCases.to_dict()['ConfirmedCases'])\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis(\"off\")\nwc.to_file('Coronavirus-spread.png')\nplt.show()\n","eb11b7ca":"totalCountryFatalities = covid19_train.drop_duplicates(['Province_State', 'Country_Region'],keep='last').groupby(['Country_Region'])[['Fatalities']].sum().sort_values('Fatalities',ascending=False)\n\ntotalCountryFatalities.head(20).plot(kind='bar',color='r')\nplt.grid()\nplt.show()","1573f2b8":"str(round((totalCountryFatalities['Fatalities'].sum()\/totalCountryCases['ConfirmedCases'].sum())*100,1)) + '% Deaths out of total of ' + str(totalCountryCases['ConfirmedCases'].sum()\/1e3) + 'K infection'","9848baea":"totalDailyCases = covid19_train.groupby(['Date'])[['ConfirmedCases']].sum().sort_values('ConfirmedCases',ascending=False)","bd657789":"totalDailyCases.plot(grid=True,linestyle='', marker='.',color='r',markersize=20)\nplt.show()","5c7ce776":"totalDailyCases['prop'] = round((totalDailyCases['ConfirmedCases'].cumsum()\/totalDailyCases['ConfirmedCases'].sum())*100,2)","2b3ff357":"'80% of the infections were in last '+ str(len(totalDailyCases.loc[totalDailyCases['prop'] <= 80])) + ' days'","29cb9dce":"'A proportion of ' + str(round(len(totalDailyCases.loc[totalDailyCases['prop'] <= 80])\/(len(totalDailyCases)+len(pd.date_range('17-11-2019','21-01-2020')))*100)) + '% from last days had the highest spread'","ba958a45":"dependant_vars = ['ConfirmedCases', 'Fatalities']\ny_train_CC = covid19_train.loc[:,[dependant_vars[0]]].values\ny_train_fa = covid19_train.loc[:,[dependant_vars[1]]].values","0a85fdec":"X = pd.concat([covid19_train.drop(dependant_vars,1), covid19_test],sort=False).set_index('ForecastId')","d1b55bae":"X = pd.get_dummies(X,drop_first=True)","594c849c":"X_train = X.iloc[:len(covid19_train),:].drop('Date',1).copy()\nX_test = X.iloc[len(covid19_train):,:].drop('Date',1).copy()","018ef023":"gsc = GridSearchCV(\n        estimator=RandomForestRegressor(),\n        param_grid={\n            'max_depth': range(3,7),\n            'n_estimators': (10, 50, 100, 1000),\n        },\n        cv=5, \n    scoring='neg_mean_squared_error', verbose=0, n_jobs=3)\n    \ngrid_result = gsc.fit(X_train, y_train_CC)\nbest_params = grid_result.best_params_","105cae54":"best_params","b29b73d0":"kf = KFold(n_splits = 10, shuffle=True)","f30e7c6d":"reg = RandomForestRegressor(max_depth=best_params[\"max_depth\"], n_estimators=best_params[\"n_estimators\"],                               \n                            random_state=False, verbose=False)","11896074":"rmse = []","8357c8f2":"for i in range(10):\n    offset = next(kf.split(X_train),None)\n    x_train = X_train.iloc[offset[0]]\n    x_test = X_train.iloc[offset[1]]\n    Y_train = y_train_CC[offset[0]]\n    Y_test = y_train_CC[offset[1]]\n\n    reg.fit(x_train, Y_train.reshape(-1))\n    ypred = reg.predict(x_test)\n    rmse.append(np.sqrt(mean_squared_error(Y_test, ypred)))","4baffe51":"X_train","a382e441":"rmse","6c207276":"feat_importances = pd.Series(reg.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(4).plot(kind='barh')","46963f01":"X['yPred'] = reg.predict(X.drop(['Date'],1))\nX['yPred'] = X['yPred'].apply(round)\nX.loc[X['yPred'] < 0, 'yPred'] = 0\nX.loc[:covid19_train.ForecastId.max(),'ConfirmedCases'] = y_train_CC","0f75c1c4":"np.sqrt(mean_squared_error(y_true=X.loc[~X['ConfirmedCases'].isna()]['ConfirmedCases'],\n                   y_pred=X.loc[~X['ConfirmedCases'].isna()]['yPred']))","0630ebd1":"r2_score(X.loc[~X['ConfirmedCases'].isna()]['ConfirmedCases'],\n                               X.loc[~X['ConfirmedCases'].isna()]['yPred'])","7f5c3bf8":"X.set_index('Date').resample('D')[['ConfirmedCases']].sum().replace(0,np.nan).join(X.set_index('Date').resample('D')[['yPred']].sum()).plot(grid=True)","24fc885b":"X.drop(['yPred','ConfirmedCases'],1,inplace=True)","89ae19da":"kf = KFold(n_splits = 10, shuffle=True)","904a109d":"reg = xgb.XGBRegressor(colsample_bytree=0.85, max_depth=10, n_estimators = 500, learning_rate = 0.01, gamma = 4,seed=42)","8d5e8cde":"rmse = []","bcffd252":"for i in range(10):\n    offset = next(kf.split(X_train),None)\n    x_train = X_train.iloc[offset[0]]\n    x_test = X_train.iloc[offset[1]]\n    Y_train = y_train_CC[offset[0]]\n    Y_test = y_train_CC[offset[1]]\n\n    reg.fit(x_train, Y_train,eval_set=[(x_train, Y_train), \n                  (x_test, Y_test)],\n        eval_metric=\"rmse\",verbose=False)\n    eval_results = reg.evals_result()\n    rmse.append(np.mean(eval_results['validation_0']['rmse']))\n    ","e417c685":"rmse","c4b96dbb":"fig, ax = plt.subplots(1,1,figsize=(20,50))\n_ = plot_importance(reg,ax=ax)\nplt.show()","9aab2345":"X['yPred'] = reg.predict(X.drop(['Date'],1))\nX['yPred'] = X['yPred'].apply(round)\nX.loc[X['yPred'] < 0, 'yPred'] = 0\nX.loc[:covid19_train.ForecastId.max(),'ConfirmedCases'] = y_train_CC","c66db5b1":"np.sqrt(mean_squared_error(y_true=X.loc[~X['ConfirmedCases'].isna()]['ConfirmedCases'],\n                   y_pred=X.loc[~X['ConfirmedCases'].isna()]['yPred']))","97562bf2":"r2_score(X.loc[~X['ConfirmedCases'].isna()]['ConfirmedCases'],\n                               X.loc[~X['ConfirmedCases'].isna()]['yPred'])","c6a183d8":"X.set_index('Date').resample('D')[['ConfirmedCases']].sum().replace(0,np.nan).join(X.set_index('Date').resample('D')[['yPred']].sum()).plot(grid=True)","779e0236":"X.drop(['yPred','ConfirmedCases'],1,inplace=True)","d13acc0b":"# No. Confirmed Cases By Country And Time","aa2f6e47":"Givent that, the first dase daignosed in November 17","6fe05087":"# Forecasting","a13fde1c":"# No. Deaths By Country","7d717cb3":"# No. Confirmed Cases By Country"}}