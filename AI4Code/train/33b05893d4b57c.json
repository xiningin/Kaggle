{"cell_type":{"36115091":"code","8f2a7752":"code","4a0e3f86":"code","5a27e3a1":"code","7451de11":"code","43b0781d":"code","4b966e0d":"code","6a477d4b":"code","971c0e32":"code","5dde9fc8":"code","3db409bb":"code","7e45915d":"code","927ce946":"code","808511e5":"code","ae503546":"code","0b06eb57":"code","7872dcd5":"code","2305c923":"code","a1f2cda9":"code","18d08d0e":"code","5c59933d":"code","a77260ea":"code","91b2ec37":"code","42e0d2fa":"code","3636529d":"code","4b75cc81":"code","22d567bc":"code","22a19b2d":"code","a4dd8b0b":"code","96734559":"markdown","b27ebd7c":"markdown"},"source":{"36115091":"# Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport datetime\nimport lightgbm as lgb\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold, cross_val_score, GridSearchCV, RepeatedStratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nimport os\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport xgboost as xgb\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn import metrics\nimport json\nimport ast\nimport time\nfrom sklearn import linear_model\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nimport shap\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.feature_selection import GenericUnivariateSelect, SelectPercentile, SelectKBest, f_classif, mutual_info_classif, RFE\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom catboost import CatBoostClassifier\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8f2a7752":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","4a0e3f86":"train.shape","5a27e3a1":"test.shape","7451de11":"train.columns","43b0781d":"train.info()","4b966e0d":"train.head()","6a477d4b":"train.describe()","971c0e32":"train.dtypes.value_counts()","5dde9fc8":"def missing_check(df):\n    total = df.isnull().sum().sort_values(ascending=False)\n    percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent']) \n    #print(\"Missing check:\",missing_data )\n    return missing_data","3db409bb":"%time\nmissing_check(train)","7e45915d":"%time\nmissing_check(test)","927ce946":"print('---------------------------------------------------------------------------------')\nprint(train['target'].value_counts())\nprint('---------------------------------------------------------------------------------')\nprint(train['target'].value_counts()\/train['target'].shape[0])\nprint('---------------------------------------------------------------------------------')\n#sns.set(style=\"darkgrid\")\nax = sns.countplot(x=train['target'], data=train)","808511e5":"print(\"There are {}% target values with 1\".format(100 * train[\"target\"].value_counts()[1]\/train.shape[0]))","ae503546":"#Histogram \ndef Histogram(dataframe):\n    fig, ax = plt.subplots(figsize=(20, 12))\n    dataframe[dataframe.dtypes[(dataframe.dtypes==\"float64\")|(dataframe.dtypes==\"int64\")].index.values].hist(figsize=[11,11],bins=50, xlabelsize=10, ylabelsize=10,  ax=ax)\n    plt.show()","0b06eb57":"Histogram(train.ix[:, 2:38])","7872dcd5":"Histogram(train.ix[:, 37:73])","2305c923":"Histogram(train.ix[:, 74:110])","a1f2cda9":"Histogram(train.ix[:, 111:147])","18d08d0e":"Histogram(train.ix[:, 148:184])","5c59933d":"Histogram(train.ix[:, 189:199])","a77260ea":"\ncol = ['var_0', 'var_1','var_2','var_3', 'var_4', 'var_5', 'var_6', 'var_7','var_8', 'var_9', 'var_10',\n       'var_11','var_12', 'var_13', 'var_14', 'var_15', 'var_16', 'var_17', 'var_18','var_19', 'var_20' ]\n       \nfor i in col:\n       sns.catplot(x='target', y=i, data=train)","91b2ec37":"\ncol = ['var_21', 'var_22','var_23', 'var_24', 'var_25', 'var_26', 'var_27','var_28', 'var_29', 'var_30',\n       'var_31','var_32', 'var_33', 'var_34', 'var_35', 'var_36', 'var_37', 'var_38','var_39', 'var_40' ]\n       \nfor i in col:\n       sns.catplot(x='target', y=i, data=train)","42e0d2fa":"\ncol = ['var_41','var_42','var_43', 'var_44', 'var_45', 'var_46', 'var_47','var_48', 'var_49', 'var_50',\n       'var_51','var_52', 'var_53', 'var_54', 'var_55', 'var_56', 'var_57', 'var_58','var_59', 'var_60' ]\n       \nfor i in col:\n       sns.catplot(x='target', y=i, data=train)","3636529d":"\ncol = ['var_41','var_42','var_43', 'var_44', 'var_45', 'var_46', 'var_47','var_48', 'var_49', 'var_50',\n       'var_51','var_52', 'var_53', 'var_54', 'var_55', 'var_56', 'var_57', 'var_58','var_59', 'var_60' ]\n       \nfor i in col:\n       sns.catplot(x='target', y=i, data=train)","4b75cc81":"\ncol = ['var_61','var_62','var_63', 'var_64', 'var_65', 'var_66', 'var_67','var_68', 'var_69', 'var_70',\n       'var_71','var_72', 'var_73', 'var_74', 'var_75', 'var_76', 'var_77', 'var_78','var_79', 'var_80' ]\n       \nfor i in col:\n       sns.catplot(x='target', y=i, data=train)","22d567bc":"corr_df=train.iloc[:,1:].corr()\nsns.set(style=\"whitegrid\")\nmask = np.zeros_like(corr_df.iloc[:,1:], dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_df.iloc[:,1:], mask=mask, cmap=cmap, vmax=.2, center=0,\n            square=True, linewidths=.5)","22a19b2d":"corr = train.corr() \nplt.figure(figsize=(12, 10))\n\nsns.heatmap(corr[(corr >= 0.5) | (corr <= -0.5)], \n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)","a4dd8b0b":"corr_df.loc[corr_df.target<=-0.5].index[1:]\ncorr_target=corr_df.loc[corr_df.target>0.05]['target'].iloc[1:]\ncorr_target.plot(kind='bar')","96734559":"## __Correlation Analysis__","b27ebd7c":"Similarly from __81__ to __199__"}}