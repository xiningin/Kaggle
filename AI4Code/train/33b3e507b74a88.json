{"cell_type":{"5b60a348":"code","d6abe780":"code","78c77cd2":"code","f0f61c6f":"code","774df9b3":"code","c42d9cc7":"code","9698bb33":"code","05d605a8":"code","372e0bb9":"code","d8c7fc05":"code","87658694":"code","fec8c67d":"code","89e5910f":"code","a0943023":"code","339b63bf":"code","b53d880b":"markdown","77d9c005":"markdown","3c5d1bce":"markdown","d6e2ffdc":"markdown","50eb4658":"markdown","52bdee88":"markdown","b0b821b7":"markdown","4acf901e":"markdown","9954035d":"markdown","a69d6b5f":"markdown","20cc50da":"markdown","e7e60cd5":"markdown"},"source":{"5b60a348":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport folium\nimport matplotlib.pylab as plt\nimport seaborn as sns\n%matplotlib inline","d6abe780":"DATA_ROOT = \"..\/input\/ulaanbaatar-city-air-pollution-prediction\/\"\n\nCAL_DTYPES={\"latitude\": \"float64\", \"longitude\": \"float64\", \"type\": \"category\",\n         \"source\": \"category\", \"station\": \"category\", 'aqi': 'float64'}\n\ncat_feat = [\"type\", \"source\", \"station\"]\ncont_feat = [\"latitude\", \"longitude\"]\ntarget = \"aqi\"\n\ntrain = pd.read_csv(DATA_ROOT + \"pm_train.csv\", dtype=CAL_DTYPES)\ntest = pd.read_csv(DATA_ROOT + \"pm_test.csv\", dtype=CAL_DTYPES)\nweather = pd.read_csv(DATA_ROOT + \"weather.csv\")\n\n\nsub = pd.read_csv(DATA_ROOT + \"sample_submission.csv\")\n\ntrain['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\nweather['date'] = pd.to_datetime(weather['date'])\n","78c77cd2":"\ntrain['dayofyear'] = train['date'].dt.dayofyear\ntest['dayofyear'] = test['date'].dt.dayofyear\nweather['dayofyear'] = weather['date'].dt.dayofyear\n\ntrain['hour'] = train['date'].dt.hour\ntest['hour'] = test['date'].dt.hour\nweather['hour'] = weather['date'].dt.hour\n\ntrain['year'] = train['date'].dt.year\ntest['year'] = test['date'].dt.year\nweather['year'] = weather['date'].dt.year\n\ntrain['month'] = train['date'].dt.month\ntest['month'] = test['date'].dt.month\nweather['month'] = weather['date'].dt.month","f0f61c6f":"for year in train[\"year\"].unique():\n    plt.plot(train.loc[train[\"year\"]==year, target].values, label=year)\nplt.legend()\nplt.show()","774df9b3":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='year')\n","c42d9cc7":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='hour')","9698bb33":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='month')","05d605a8":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='station')","372e0bb9":"train = pd.merge(train, weather.iloc[:, 2:], on=[\"year\", \"dayofyear\", \"hour\"], how='left')\ntest = pd.merge(test, weather.iloc[:, 2:], on=[\"year\", \"dayofyear\", \"hour\"], how='left')","d8c7fc05":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='summary')","87658694":"sns.boxplot(y='aqi', x='type', \n                 data=train, \n                 palette=\"colorblind\",\n                 hue='icon')","fec8c67d":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport joblib\nimport pickle\nimport lightgbm as lgb\nimport gc\nimport os\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom tqdm import tqdm\n","89e5910f":"params_k = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': 'rmse',\n            'subsample': 0.7,\n            'subsample_freq': 1,\n            'learning_rate': 0.05,\n            'num_leaves': 2**8-1,\n            'min_data_in_leaf': 2**9-1,\n            'feature_fraction': 0.8,\n            'max_bin': 100,\n            'n_estimators': 1500,\n            'boost_from_average': True,\n            \"random_seed\":42,\n            }","a0943023":"cat_feat = ['type', 'source', 'station', 'dayofyear', 'hour', 'year', 'month_x', 'summary', 'icon']\n\nfor col in ['type', 'source', 'station', 'summary', 'icon']:\n    le = preprocessing.LabelEncoder()\n    le.fit(pd.concat([train[col].dropna(), test[col].dropna()], axis=0))\n    train[col] = train[col].apply(lambda x: le.transform([x])[0] if type(x) == str else x)\n    test[col] = test[col].apply(lambda x: le.transform([x])[0] if type(x) == str else x)\n\n\ncont_feat = [ 'latitude', 'longitude', 'temperature',\n       'apparentTemperature', 'dewPoint', 'humidity', 'windSpeed',\n       'windBearing', 'cloudCover', 'uvIndex', 'visibility']\nTARGET = 'aqi'","339b63bf":"from sklearn.model_selection import KFold\nsub[TARGET] = 0\nkf = KFold(n_splits=5, shuffle=True)\ntrain = train.reset_index(drop=True)\nprint(train.columns)\nfor train_index, val_index in kf.split(train.index):\n    \n    train_set, val_set = train.loc[train_index], train.loc[val_index]\n    \n    train_data = lgb.Dataset(data=train_set[cat_feat+cont_feat],\n                         label=train_set[TARGET],\n                         categorical_feature=cat_feat,\n                         free_raw_data=False)\n\n    valid_data  = lgb.Dataset(data=val_set[cat_feat+cont_feat],\n                             label=val_set[TARGET],\n                             categorical_feature=cat_feat,\n                             free_raw_data=False)\n    \n    model_gbm = lgb.train(params_k, train_data, valid_sets=[valid_data],\n                  num_boost_round=1000, early_stopping_rounds=10,\n                  verbose_eval=25)\n\n    \n    pred = model_gbm.predict(test[cat_feat+cont_feat])\n    sub[TARGET] = sub[TARGET] + pred\n\nsub[TARGET] = sub[TARGET]\/5\nsub.to_csv(\"submission.csv\", index=False)","b53d880b":"\u0422\u044d\u043c\u0446\u044d\u044d\u043d\u0434 \u043e\u0440\u043e\u043b\u0446\u043e\u0433\u0447\u0434\u043e\u0434 \u0434\u04e9\u0445\u04e9\u043c \u0431\u043e\u043b\u043e\u0445 \u04af\u04af\u0434\u043d\u044d\u044d\u0441 \u044d\u043d\u044d\u0445\u04af\u04af EDA-\u0433 \u0431\u044d\u043b\u0442\u0433\u044d\u043b\u044d\u044d. ","77d9c005":"# \u0425\u0443\u0433\u0430\u0446\u0430\u0430\u043d\u044b \u04af\u0437\u04af\u04af\u043b\u044d\u043b\u0442\u04af\u04af\u0434\u0438\u0439\u0433 \u04af\u04af\u0441\u0433\u044d\u0445","3c5d1bce":"# \u04e8\u0433\u04e9\u0433\u0434\u043b\u0438\u0439\u0433 \u0434\u0443\u0443\u0434\u0430\u0445","d6e2ffdc":"PM10-\u0438\u0439\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u0438\u0445\u044d\u043d\u0445\u0438 \u0441\u0442\u0430\u043d\u0446 \u0434\u044d\u044d\u0440 \u043e\u0439\u0440\u043e\u043b\u0446\u043e\u043e \u0431\u0430\u0439\u0434\u0430\u0433 \u0431\u043e\u043b PM2.5-\u0438\u0439\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u0433\u044d\u0440 \u0445\u043e\u0440\u043e\u043e\u043b\u043e\u043b\u0434 \u04e9\u043d\u0434\u04e9\u0440 \u0431\u0430\u0439\u0445 \u0445\u0430\u043d\u0434\u043b\u0430\u0433\u0430\u0442\u0430\u0439 \u043d\u044c \u043c\u044d\u0434\u044d\u044d\u0436 \u043d\u04af\u04af\u0440\u0441\u044d\u044d\u0440 \u0433\u0430\u043b \u0442\u04af\u043b\u0436 \u0433\u044d\u0440\u044d\u044d \u0445\u0430\u043b\u0430\u0430\u0434\u0430\u0433\u0442\u0430\u0439 \u0445\u043e\u043b\u0431\u043e\u043e\u0442\u043e\u0439 \u0431\u0438\u043b\u044d\u044d. \u041c\u04e9\u043d \u0437\u0430\u0440\u0438\u043c \u0441\u0442\u0430\u043d\u0446\u0438\u0439\u043d \u0445\u0443\u0432\u044c\u0434 PM2.5-\u0438\u0439\u0433 \u0445\u044d\u043c\u0436\u0438\u0434\u0433\u04af\u0439 \u0431\u043e\u043b\u043e\u043b\u0442\u043e\u0439. ","50eb4658":"# EDA Analysis","52bdee88":"> \u041c\u044d\u0434\u044d\u044d\u0436 \u04e9\u0433\u043b\u04e9\u04e9 \u0431\u043e\u043b\u043e\u043d \u043e\u0440\u043e\u0439\u0434 \u0430\u0433\u0430\u0430\u0440\u044b\u043d \u0431\u043e\u0445\u0438\u0440\u0434\u043e\u043b \u043c\u044d\u0434\u044d\u0433\u0434\u044d\u0445\u04af\u0439\u0446 \u043d\u044d\u043c\u044d\u0433\u0434\u0434\u044d\u0433","b0b821b7":"\u042d\u0446\u044d\u0441\u0442 \u0436\u0438\u0448\u0438\u0433 \u0437\u0430\u0433\u0432\u0430\u0440 \u0431\u043e\u043b\u0433\u043e\u0436 lightgbm-\u0438\u0439\u0433 \u044f\u043c\u0430\u0440 \u043d\u044d\u0433\u044d\u043d \u04e9\u0433\u04e9\u0433\u0434\u04e9\u043b \u0431\u043e\u043b\u043e\u0432\u0441\u0440\u0443\u0443\u043b\u0430\u043b\u0442\u0433\u04af\u0439 \u0430\u0448\u0438\u0433\u043b\u0430\u043b\u0430\u0430. lightgbm-\u0438\u0439\u0433 \u0445\u0443\u0432\u044c\u0434 \u0445\u043e\u043e\u0441\u043e\u043d \u0443\u0442\u0433\u044b\u0433 \u04e9\u04e9\u0440\u04e9\u04e9 \u0437\u043e\u0445\u0438\u0446\u0443\u0443\u043b\u0447\u0438\u0445\u0434\u0430\u0433 \u0434\u0430\u0432\u0443\u0443 \u0442\u0430\u043b\u0442\u0430\u0439. ","4acf901e":"> \u0425\u0430\u043c\u0430\u0430\u0440\u0430\u0433\u0447 \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0439\u0433 \u0442\u043e\u043e\u0441\u043e\u043d\u0446\u043e\u0440\u044b\u043d \u0442\u04e9\u0440\u04e9\u043b \u0431\u043e\u043b\u043e\u043d \u0436\u0438\u043b\u044d\u044d\u0440 boxplot \u0445\u0438\u0439\u0436 \u0445\u0430\u0440\u0432\u0430\u043b \u0436\u0438\u043b \u0431\u04af\u0440 \u0442\u043e\u043e\u0441\u043e\u043d\u0446\u043e\u0440\u044b\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u0431\u0430\u0433\u0430 \u0437\u044d\u0440\u044d\u0433 \u0431\u0443\u0443\u0440\u0447 \u0431\u0430\u0439\u0441\u0430\u043d \u0431\u043e\u043b 2018 \u043e\u043d\u0434 \u0445\u0443\u0440\u0434\u0430\u0446\u0442\u0430\u0439 \u0431\u0443\u0443\u0440\u0441\u0430\u043d \u0431\u0430\u0439\u043d\u0430. \u0421\u0430\u0439\u0436\u0440\u0443\u0443\u043b\u0441\u0430\u043d \u0442\u04af\u043b\u0448 \u0442\u0443\u0445\u0430\u0439\u043d \u04af\u0435\u0434 \u044d\u0445\u043b\u044d\u044d\u0433\u04af\u0439 \u0431\u0430\u0439\u0441\u0430\u043d \u0448\u0438\u0433 \u0441\u0430\u043d\u0430\u0433\u0434\u0430\u0445 \u044e\u043c. \u041c\u0430\u0433\u0430\u0434\u0433\u04af\u0439 \u0442\u0435\u0441\u0442 \u04e9\u0433\u04e9\u0433\u0434\u04e9\u043b\u0434 \u0441\u0430\u0439\u0436\u0440\u0443\u0443\u043b\u0441\u0430\u043d \u0442\u04af\u043b\u0448\u043d\u0438\u0439 \u043d\u04e9\u043b\u04e9\u04e9 \u043e\u0440\u0441\u043e\u043d \u0431\u0430\u0439\u0445 \u0431\u043e\u043b\u043e\u043c\u0436\u0442\u043e\u0439. \u0422\u044d\u0433\u044d\u0445\u044d\u044d\u0440 \u0431\u0438\u0434 distribution shift problem-\u0442\u044d\u0439 \u0447 \u0442\u0443\u043b\u0441\u0430\u043d \u0431\u0430\u0439\u0436 \u0431\u043e\u043b\u043e\u0445 \u044e\u043c. ","9954035d":"\u0426\u0430\u0433 \u0430\u0433\u0430\u0430\u0440\u044b\u043d \u04e9\u0433\u04e9\u0433\u0434\u043b\u0438\u0439\u0433 \u0442\u043e\u043e\u0441\u043e\u043d\u0446\u043e\u0440\u044b\u043d \u04e9\u0433\u04e9\u0433\u0434\u04e9\u043b\u0442\u044d\u0439 \u043d\u044d\u0433\u0442\u0433\u044d\u0441\u043d\u0438\u0439 \u0434\u0430\u0440\u0430\u0430 PM10-\u0438\u0439\u043d \u0445\u0443\u0432\u044c\u0434 \u0441\u0430\u043b\u0445\u0438\u0442\u0430\u0439 \u0438\u0445\u044d\u0432\u0447\u043b\u044d\u043d \u0431\u043e\u043b\u043e\u043d \u0445\u0430\u0433\u0430\u0441 \u04af\u04af\u043b\u044d\u0440\u0445\u044d\u0433 \u0431\u0430\u0439\u0445 \u04af\u0435\u0434 \u04e9\u043d\u0434\u04e9\u0440 \u0431\u0430\u0439\u0445 \u0445\u0430\u043d\u0434\u043b\u0430\u0433\u0430\u0442\u0430\u0439 \u0431\u043e\u043b PM2.5-\u0438\u0439\u043d \u0445\u0443\u0432\u044c\u0434 \u04af\u04af\u043b\u0433\u04af\u0439 \u044d\u0441\u0432\u044d\u043b \u043c\u0430\u043d\u0430\u043d\u0442\u0430\u0439 \u04af\u0435\u0434 \u0438\u043b\u04af\u04af \u04e9\u043d\u0434\u04e9\u0440 \u0431\u0430\u0439\u0445 \u0445\u0430\u043d\u0434\u043b\u0430\u0433\u0430\u0442\u0430\u0439 \u0431\u0430\u0439\u0434\u0430\u0433 \u0431\u0430\u0439\u043d\u0430. ","a69d6b5f":"> \u04e8\u0432\u043b\u0438\u0439\u043d \u0443\u043b\u0438\u0440\u0430\u043b\u0434 PM2.5-\u0438\u0439\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u043e\u0433\u0446\u043e\u043c \u043d\u044d\u043c\u044d\u0433\u0434\u0434\u044d\u0433 \u0431\u0430\u0439\u0445 \u043d\u044c. ","20cc50da":"**\u0425\u0430\u043c\u0430\u0430\u0440\u0430\u0433\u0447 \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u044b\u043d \u0448\u0443\u0433\u0430\u043c\u0430\u043d \u0437\u0443\u0440\u0430\u0433**","e7e60cd5":"# \u0422\u0430\u0430\u043c\u0430\u0433\u043b\u0430\u0445 \u0417\u0430\u0433\u0432\u0430\u0440"}}