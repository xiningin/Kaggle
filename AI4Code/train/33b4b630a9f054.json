{"cell_type":{"c5b4341d":"code","f9d7543a":"code","03ca6aaf":"code","f2269070":"code","d92d3dcf":"code","5bbf2933":"code","80fa9a25":"code","183adb1f":"code","6663fe43":"code","cebaadce":"code","f6028494":"code","75b9a09e":"code","90e0866b":"code","0f79b02c":"code","c65c91e7":"code","ceafd33d":"code","68efd602":"code","541739e4":"code","60a406ff":"code","e9c76904":"code","e1d337e0":"code","90982047":"code","e0b584d4":"code","c0f5c084":"markdown","479ea404":"markdown","66dda27e":"markdown"},"source":{"c5b4341d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f9d7543a":"print(os.getcwd())","03ca6aaf":"air_crash=pd.read_csv('..\/input\/aircrash1908-2008.csv')","f2269070":"air_crash.head(2)","d92d3dcf":"air_crash.tail(2)","5bbf2933":"air_crash.describe()","80fa9a25":"air_crash.info()","183adb1f":"import seaborn as sb\nimport matplotlib.pyplot as plt\nfrom datetime import timedelta,date,datetime","6663fe43":"#we have time stored in string format in the data table..so we create a function to convert the string format to date time format\ndef todate(x):\n    return datetime.strptime(x,\"%m\/%d\/%Y %H:%M\")","cebaadce":"#we now apply the function to the air_crash data\nair_crash['Time']=air_crash['Time'].apply(todate)  #run this line once as the date time is converted to timestampand is not string after we run it once\nprint('Date n time ranges from  '+str(air_crash.Time.min())+'  to  '+str(air_crash.Time.max()))\nair_crash.Operator=air_crash.Operator.str.upper()    # this is to avoid duplicate entries","f6028494":"#air_crash['Time']\n#todate('09\/17\/1908 17:18')","75b9a09e":"#air_crash.Operator=air_crash.Operator.str.upper\n# this is to avoid duplicate entries","90e0866b":"accyear=air_crash.groupby(air_crash.Time.dt.year)[['Date']].count()\naccyear.head()\naccyear.columns=['Count']\naccyear[accyear.index==1908]\n#we get the count of accidents by the year","0f79b02c":"#plotting air crashes year wise\nTemp=air_crash.groupby(air_crash.Time.dt.year)[['Date']].count() #temp is \nTemp=Temp.rename(columns={\"Date\":\"Count\"})\n\nplt.figure(figsize=(12,6))\nplt.style.use('bmh')\nplt.plot(Temp.index,'Count',data=Temp,color='blue',marker='.',linewidth=1)\nplt.xlabel('Year',fontsize=10)\nplt.ylabel('Count',fontsize=10)\nplt.title('Count of air accidents by Year',loc='Center',fontsize=14)\nplt.show()","c65c91e7":"import matplotlib.pylab as pl\nimport matplotlib.gridspec as gridspec\nplt.figure(figsize=(12,8))\n\nplt.bar(air_crash.groupby(air_crash.Time.dt.month)[['Date']].count().index,'Date',data=air_crash.groupby(air_crash.Time.dt.month)[['Date']].count())\nplt.xticks(air_crash.groupby(air_crash.Time.dt.month)[['Date']].count().index,['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n\nplt.xlabel('Month',fontsize=10)\nplt.ylabel('Count',fontsize=10)\n\nplt.title('Count of air accidents by month',loc='Center',fontsize=14)\nplt.show()","ceafd33d":"ax=pl.plot()\n\nplt.bar(air_crash.groupby(air_crash.Time.dt.weekday)[['Date']].count().index,'Date',data=air_crash.groupby(air_crash.Time.dt.weekday)[['Date']].count(),color='lightskyblue',linewidth=2)\nplt.xticks(air_crash.groupby(air_crash.Time.dt.weekday)[['Date']].count().index,['Mon','Tue','Wed','Thu','Fri','Sat','Sun'])\n\nplt.xlabel('Day of the week',fontsize=10)\nplt.ylabel('Count',fontsize=10)\n\nplt.title('Count of accidents by day of the week',loc='Center',fontsize=14)","68efd602":"ax=pl.plot()\nplt.bar(air_crash[air_crash.Time.dt.hour != 0].groupby(air_crash.Time.dt.hour)[['Date']].count().index,'Date',data=air_crash[air_crash.Time.dt.hour !=0].groupby(air_crash.Time.dt.hour)[['Date']].count(),color='lightskyblue',linewidth=2)\n\nplt.xlabel('Hour',fontsize=10)\nplt.ylabel('Count',fontsize=10)\nplt.title('Count of the air accidents by Hour',loc='Center',fontsize=14)\n\nplt.show()","541739e4":"tem=air_crash.copy()\n\ntem['isMILITARY']=tem.Operator.str.contains('MILITARY')\n\ntem=tem.groupby('isMILITARY')[['isMILITARY']].count()\ntem.index=['Passenger','Military']\ntem.head()","60a406ff":"colors=['yellowgreen','lightskyblue']\nplt.figure(figsize=(15,6))\n\nplt.pie(tem.isMILITARY,colors=colors,labels=tem.isMILITARY,startangle=90)\n\nplt.axis('equal')\nplt.title('Total number of accidents by type of flight',loc='Center',fontsize=14)","e9c76904":"#we are now counting individual air crashes for military and passenger by year and plotting the graphs\ntemp2=air_crash.copy()\ntemp2['Military']=temp2.Operator.str.contains('MILITARY')\ntemp2['Passenger']=temp2.Military==False\ntemp2=temp2.loc[:,['Time','Military','Passenger']]\ntemp2=temp2.groupby(temp2.Time.dt.year)[['Military','Passenger']].aggregate(np.count_nonzero)\ntemp2.head()","e1d337e0":"plt.figure(figsize=(15,10))\nplt.plot(temp2.index,'Military',data=temp2,color='lightskyblue',marker='.',linewidth=1,label='military')\nplt.plot(temp2.index,'Passenger',data=temp2,color='yellowgreen',marker='.',linewidth=1,label='passenger')\nplt.xlabel('Year',fontsize=10)\nplt.ylabel('Count',fontsize=10)\nplt.title('Count of accidents by year',loc='Center',fontsize=14)\nplt.legend(loc='upper right')\nplt.show()\n","90982047":"Fatalities=air_crash.groupby(air_crash.Time.dt.year).sum()\nFatalities.head()","e0b584d4":"Fatalities=air_crash.groupby(air_crash.Time.dt.year).sum()\nFatalities['Proportion']=Fatalities['Fatalities']\/Fatalities ['Aboard']\n\nplt.figure(figsize=(15,6))\n\nplt.fill_between(Fatalities.index,'Aboard',data=Fatalities,color='skyblue')\nplt.plot(Fatalities.index,'Aboard',data=Fatalities,marker='.',color='Slateblue',linewidth=1)\nplt.fill_between(Fatalities.index,'Fatalities',data=Fatalities,color='olive',alpha=0.2)\nplt.plot(Fatalities.index,'Fatalities',data=Fatalities,color='olive',marker='.',alpha=0.6,linewidth=1)\n\nplt.legend(fontsize=10)\nplt.xlabel('Year',fontsize=10)\nplt.ylabel('Amount of people',fontsize=10)\nplt.title('Total number of people involved by year',loc='Center',fontsize=14)\nplt.show()","c0f5c084":"now we check count of commercial or miltitary aircrafts in air crashes","479ea404":"## now we will find total accidents given the by year","66dda27e":"finding out that aircrash data we have is of 100 years from 1908 to 2009.."}}