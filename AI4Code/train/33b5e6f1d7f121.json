{"cell_type":{"a34d2074":"code","0c6701b9":"code","a8f12be1":"code","20ddf41d":"code","b02f4bbe":"code","54c294f1":"code","87135be4":"code","2350937b":"code","b51df921":"code","2f152dff":"code","2421aa96":"code","72786214":"code","59386539":"code","23878c38":"code","be2c39fd":"code","c7ab8e7d":"code","829f3cf7":"markdown","def82933":"markdown","f5006944":"markdown","4251061d":"markdown","11bffc88":"markdown","6d3c038e":"markdown","2754bd09":"markdown","287b9960":"markdown"},"source":{"a34d2074":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n","0c6701b9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n#from sklearn.naive_bayes import GaussianNB\n#from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor","a8f12be1":"df = pd.read_csv(r'..\/input\/creditcardfraud\/creditcard.csv')\ndf['Amount'] = StandardScaler().fit_transform(df['Amount'].values.reshape(-1, 1))\n#df\ndf.describe().transpose()","20ddf41d":"df.isnull().sum(axis = 0) #checking null values in the dataset","b02f4bbe":"colors = [\"b\", \"r\"]\nsns.countplot('Class', data=df, palette=colors)","54c294f1":"#Creating a sample dataset\ndf2= df.sample(frac = 0.2,random_state=1)\n\ndf2.shape","87135be4":"#Correlation\ncorr = df2.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(20,20))\n# create a mask so we only see the correlation values once\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask, 1)] = True\na = sns.heatmap(corr,mask=mask, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","2350937b":"# We Will check Do fraudulent transactions occur more often during certain time frame and visualize the data.\nfraud_transactions2 = df2[df2.Class == 1]\nNorm_transactions2 = df2[df2.Class == 0]\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True,figsize=(10,10))\nf.suptitle('Time of transaction vs Amount by class')\nax1.scatter(fraud_transactions2.Time, fraud_transactions2.Amount)\nax1.set_title('Fraud')\nax2.scatter(Norm_transactions2.Time, Norm_transactions2.Amount)\nax2.set_title('Normal')\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Amount')\nplt.show()\n#fraud_transactions","b51df921":"X = df.drop(['Class'],axis=1).values\ny = df[ 'Class'].values\nstate = np.random.RandomState(42)\n# X_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))","2f152dff":"X2 = df2.drop(['Class'],axis=1).values\ny2 = df2[ 'Class'].values","2421aa96":"from sklearn.linear_model import LogisticRegression\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X2,y2, test_size=.35,random_state=123)\ny_train2 = np.ravel(y_train2)\nlg=LogisticRegression()\nlg.fit(X_train2,y_train2)\ny_pred2=lg.predict(X_test2)\nprint(classification_report(y_test2,y_pred2))\ncnf_matrix=(confusion_matrix(y_test2,y_pred2))\nprint(cnf_matrix)\nprint(\"Recall metric in the testing dataset: \", cnf_matrix[1,1]\/(cnf_matrix[1,0]+cnf_matrix[1,1]))\nprint(accuracy_score(y_test2,y_pred2))\n","72786214":"X = df.drop(['Class'],axis=1).values\ny = df[ 'Class'].values\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.35,random_state=123)\ny_train = np.ravel(y_train)\nlg=LogisticRegression()\nlg.fit(X_train,y_train)\ny_pred=lg.predict(X_test)\nprint(classification_report(y_test,y_pred))\ncnf_matrix=(confusion_matrix(y_test,y_pred))\nprint(cnf_matrix)\n#print(\"Recall metric in the testing dataset: \", cnf_matrix[1,1]\/(cnf_matrix[1,0]+cnf_matrix[1,1]))\nprint(accuracy_score(y_test,y_pred))","59386539":"outlier_fraction2 = len(fraud_transactions2)\/float(len(Norm_transactions2))\nIF2= IsolationForest(n_estimators=100, max_samples=len(X2),\\\n                                       contamination=outlier_fraction2,random_state=state, verbose=0)\nIF2.fit(X2)\ny_pred2=IF2.predict(X2)\nscores_prediction = IF2.decision_function(X2)\ny_pred2[y_pred2 == 1] = 0\ny_pred2[y_pred2 == -1] = 1\nn_errors = (y_pred2 != y2).sum()\nprint(\"Isolation Factor is: {}\".format(n_errors))\nprint(\"Accuracy score is: {}\".format(accuracy_score(y2,y_pred2)))\n#print(accuracy_score(y2,y_pred2))\nprint(classification_report(y2,y_pred2))\ncnf_matrix=(confusion_matrix(y2,y_pred2))\nprint(cnf_matrix)\n#print(n_errors) \n#y_pred2\n","23878c38":"fraud_transactions = df[df.Class == 1]\nNorm_transactions = df[df.Class == 0]\noutlier_fraction = len(fraud_transactions)\/float(len(Norm_transactions))\nIF= IsolationForest(n_estimators=100, max_samples=len(X),\\\n                                       contamination=outlier_fraction,random_state=state, verbose=0)\nIF.fit(X)\ny_pred=IF.predict(X)\nscores_prediction = IF.decision_function(X)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nn_errors = (y_pred != y).sum()\nprint(\"Isolation Factor is: {}\".format(n_errors))\nprint(\"Accuracy score is: {}\".format(accuracy_score(y,y_pred)))\n#print(accuracy_score(y2,y_pred2))\nprint(classification_report(y,y_pred))\ncnf_matrix=(confusion_matrix(y,y_pred))\nprint(cnf_matrix)\n#print(n_errors) \n#y_pred2\n","be2c39fd":"LOF =LocalOutlierFactor(n_neighbors=20, algorithm='auto', \n                                              leaf_size=30, metric='minkowski',\n                                              p=2, metric_params=None, contamination=outlier_fraction)\ny_pred3 = LOF.fit_predict(X2)\nscores_prediction = LOF.negative_outlier_factor_\ny_pred3[y_pred3 == 1] = 0\ny_pred3[y_pred3 == -1] = 1\nprint(\"Local outlier Factor is: {}\".format(n_errors))\nprint(\"Accuracy score is: {}\".format(accuracy_score(y2,y_pred3)))\nprint(classification_report(y2,y_pred3))\ncnf_matrix=(confusion_matrix(y2,y_pred3))\nprint(cnf_matrix)\nn_errors = (y_pred3 != y2).sum()\n ","c7ab8e7d":"LOF2 =LocalOutlierFactor(n_neighbors=20, algorithm='auto', \n                                              leaf_size=30, metric='minkowski',\n                                              p=2, metric_params=None, contamination=outlier_fraction)\ny_pred3 = LOF2.fit_predict(X)\nscores_prediction = LOF2.negative_outlier_factor_\ny_pred3[y_pred3 == 1] = 0\ny_pred3[y_pred3 == -1] = 1\nprint(\"Local outlier Factor is: {}\".format(n_errors))\nprint(\"Accuracy score is: {}\".format(accuracy_score(y,y_pred3)))\nprint(classification_report(y,y_pred3))\ncnf_matrix=(confusion_matrix(y,y_pred3))\nprint(cnf_matrix)\nn_errors = (y_pred3 != y).sum()","829f3cf7":"## Credit card fraud detection\n\n#### Today due to increasing demand of online transactions, it is very important for the banks to keep a check of these transactions in order to recognoize whether a particular transaction is normal or fraudulent. In this notebook, we will use 3 different predictive models to see how accurate they are in detecting whether a transaction is a normal payment or a fraud.\n#### The datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n#### It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, the original features and more background information about the data were hiddden. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\n","def82933":"### Observations :\n* All three models have almost same accuracy\n* When comparing error precision & recall for 3 models , the Logistic regression performed much better than the LOF as we can see that the detection of fraud cases is around 72% versus LOF detection rate of just 34% and SVM of 12%.\n* So overall Logistic regression Method performed much better in determining the fraud cases.\n* We can also improve on this accuracy by increasing the sample size or use deep learning algorithms however at the cost of computational expense.We can also use complex anomaly detection models to get better accuracy in determining more fraudulent cases.\n\n### Note\n* This notebook is based on my learning and understanding of machine learning towards data science. If you find something which need to be correct and improvement then please try to correct me on this. It will be appreciable. Thanks","f5006944":"## Importing libraries","4251061d":"#### As we can see that the data is clearly unbalanced.\n#### This dataset is an example of using a typical accuracy score to evaluate our classification algorithm. But in this case, if we just use a majority class to assign values to all records, then probability of incorrectly classifying all \"1\" would be high.We can overcome this issue by \n* Collecting more data(which is definitly time consuming and could cost more money and efforts) and also not applicable in this particular case\n* By changing the performance matric in order to calculate Percission, recall and F1 score via confusion matrix\n* Using ROC curves as described in the dataset description\n* By resampling the dataset either by OVER-sampling(gives better results when we have small data) or by UNDER-sampling(which deletes instances from the over-represented class)\n### Approach\n#### In this case first, We are going to compare what happens when using resampling and when not using it. We will test this approach using a simple logistic regression classifier & evaluate the model by using some of the performance metrics. Then,finally, we will perform classifications model using Isolation Forest Algorithm and Local Outlier Factor(LOF) Algorithm.","11bffc88":"## Reading dataset","6d3c038e":"## Model Prediction\n### Logistic regression","2754bd09":"#### So, Our model lead us to the perfection. Lets try other two models too","287b9960":"#### As we can see the model is offering accuracy score of 99% on the generalised data. But will it work for the whole data. Let's check that"}}