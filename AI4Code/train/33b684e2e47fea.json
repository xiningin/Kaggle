{"cell_type":{"5309b45c":"code","12700c1f":"code","70aa1f84":"code","3c6f3df9":"code","4fc2c2d7":"code","01d75d62":"code","0db7e7d3":"markdown","6afde5ec":"markdown","6c93fae2":"markdown","3eee2e5b":"markdown","3b1db1c9":"markdown"},"source":{"5309b45c":"## importing packages\nimport itertools\nimport gc\n\nimport numpy as np\nimport pandas as pd\n\nfrom fbprophet import Prophet\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n## defining paths\npath_data = \"\/kaggle\/input\/ashrae-energy-prediction\/\"\npath_train = path_data + \"train.csv\"\npath_test = path_data + \"test.csv\"\npath_building = path_data + \"building_metadata.csv\"\npath_weather_train = path_data + \"weather_train.csv\"\npath_weather_test = path_data + \"weather_test.csv\"\n\n## setting seed\nmyfavouritenumber = 13\nseed = myfavouritenumber\nnp.random.seed(seed)","12700c1f":"## site can be changed to run the notebook for different sites (choosing 11 here since it runs the fastest)\nsite = 11","70aa1f84":"## reading train and test data\ndf_train = pd.read_csv(path_train)\ndf_test = pd.read_csv(path_test)\n\n## reading building metadata\nbuilding = pd.read_csv(path_building)\ndf_train = df_train.merge(building, on=\"building_id\")\ndf_test = df_test.merge(building, on=\"building_id\")\n\n## reading weather data\nweather_train = pd.read_csv(path_weather_train)\nweather_test = pd.read_csv(path_weather_test)\n\n## expanding weather data to all missing values\nweather_train = pd.merge(pd.DataFrame(list(itertools.product(df_train.site_id.unique(), df_train.timestamp.unique())), columns=[\"site_id\", \"timestamp\"]),\n                         weather_train, on = [\"site_id\", \"timestamp\"], how=\"left\")\nweather_test = pd.merge(pd.DataFrame(list(itertools.product(df_test.site_id.unique(), df_test.timestamp.unique())), columns=[\"site_id\", \"timestamp\"]),\n                         weather_test, on = [\"site_id\", \"timestamp\"], how=\"left\")\n\n## filling missing values with closest available values\nweather_train = weather_train.groupby(\"site_id\").apply(lambda group: group.interpolate(limit_direction=\"both\"))\nweather_test = weather_test.groupby(\"site_id\").apply(lambda group: group.interpolate(limit_direction=\"both\"))\n\n## preparing final train data\ndf_train = df_train.merge(weather_train, on=[\"site_id\", \"timestamp\"], how=\"left\")\ndf_train = df_train[~((df_train.site_id==0) & (df_train.meter==0) & (df_train.building_id <= 104) & (df_train.timestamp < \"2016-05-21\"))]\ndf_train = df_train[df_train.site_id == site]\ndf_train.reset_index(drop=True, inplace=True)\ndf_train[\"ds\"] = pd.to_datetime(df_train.timestamp, format='%Y-%m-%d %H:%M:%S')\ndf_train[\"y\"] = np.log1p(df_train.meter_reading)\n\n## preparing final test data\ndf_test = df_test.merge(weather_test, on=[\"site_id\", \"timestamp\"], how=\"left\")\ndf_test = df_test[df_test.site_id == site]\ndf_test.reset_index(drop=True, inplace=True)\ndf_test[\"ds\"] = pd.to_datetime(df_test.timestamp, format='%Y-%m-%d %H:%M:%S')\n\n## deleting unneeded dataset\ndel building, weather_train, weather_test\ngc.collect()","3c6f3df9":"## external features\nexogenous_features = [\"air_temperature\", \"cloud_coverage\", \"dew_temperature\",\n                      \"precip_depth_1_hr\", \"sea_level_pressure\", \"wind_direction\", \"wind_speed\"]\n\n## list of predictions\ndf_preds = []\n\n## iterating over buildings\nfor building in df_train.building_id.unique():\n    \n    ## subsetting building data\n    df_train_building = df_train[df_train.building_id == building]\n    df_test_building = df_test[df_test.building_id == building]\n    \n    ## iterating over meters\n    for meter in df_train_building.meter.unique():\n        \n        ## subsetting meter data\n        df_train_building_meter = df_train_building[df_train_building.meter == meter]\n        df_test_building_meter = df_test_building[df_test_building.meter == meter]\n        \n        ## drop features with all NaNs\n        df_train_building_meter.dropna(axis=1, how=\"all\", inplace=True)\n        \n        print(\"Building Prophet model for building\", building, \"and meter\", meter)\n        \n        ## initializing model\n        model_prophet = Prophet()\n        \n        ## adding regressors\n        remove_features = []\n        \n        for feature in exogenous_features:\n            if feature in df_train_building_meter.columns:\n                model_prophet.add_regressor(feature)\n            else:\n                remove_features.append(feature)\n\n        for feature in remove_features:\n            exogenous_features.remove(feature)\n        \n        ## building model\n        model_prophet.fit(df_train_building_meter[[\"ds\", \"y\"] + exogenous_features])\n        \n        ## forecasting predictions\n        forecast = model_prophet.predict(df_test_building_meter[[\"ds\"] + exogenous_features])\n        \n        ## creating predictions dataframe\n        df_pred = pd.DataFrame({\"row_id\": df_test_building_meter.row_id.values, \"meter_reading\": np.expm1(forecast.yhat.values)})\n        df_preds.append(df_pred)\n\n        print(\"Prophet model completed for building\", building, \"and meter\", meter, \"\\n\")\n        \n        ## cleanup\n        gc.collect()","4fc2c2d7":"## visualizing last model built\nmodel_prophet.plot_components(forecast)","01d75d62":"## saving predictions\ndf_site = pd.concat(df_preds).reset_index(drop=True)\ndf_site.to_csv(\"prophet_pred_site_\" + str(site) + \".csv\", index=False)","0db7e7d3":"Since Prophet is built for every building-meter combination, it exceeds the 9-hr runtime limit of Kaggle Notebook. Hence we will run it separately for each site_id. Note that you can run these in parallel on Kaggle.\n\nNotebook versions for each site run -   \nSite 0: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024737   \nSite 1: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024752   \nSite 2: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024767   \nSite 3: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024791   \nSite 4: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024811   \nSite 5: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024832   \nSite 6: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024853   \nSite 7: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024873   \nSite 8: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024895   \nSite 9: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24024904   \nSite 10: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039606   \nSite 11: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039629   \nSite 12: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039651   \nSite 13: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039661   \nSite 14: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039680   \nSite 15: https:\/\/www.kaggle.com\/rohanrao\/ashrae-prophet-s-prophecy?scriptVersionId=24039699   ","6afde5ec":"# Prophet model\nBuilding a Prophet model for each building x meter combination.","6c93fae2":"# Saving Predictions\nSaving predictions for the site. The final submission file will be combining the predictions of all sites together.","3eee2e5b":"# Prophet's Prophecy\n![Prophet.png](attachment:Prophet.png)\n\nThis competition is pretty much ruined with all the scraping opportunities to hunt down the test data labels. A lot of us are here to learn true Data Science. This notebook is for such people.\n\nProphet is a time series model open sourced by Facebook in 2017:  https:\/\/facebook.github.io\/prophet\/\n\nThe notebook shows the building blocks for using Prophet to forecast the energy consumption. We will be building a Prophet model for each **building x meter** combination.","3b1db1c9":"# Preparing data\nPreparing the train and test data with weather features and in the format required by Prophet."}}