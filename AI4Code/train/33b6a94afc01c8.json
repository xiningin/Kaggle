{"cell_type":{"a9240ff2":"code","7b129250":"code","282d29f0":"code","16c7a7d3":"code","6d56e61e":"code","8ac940e0":"code","634522c4":"code","b099ddd5":"code","559df20d":"code","1c4d0443":"code","00ba3e91":"code","75300eac":"code","cf2dfa19":"code","29993947":"code","404a3023":"code","337bfb13":"code","bfc5fa5b":"code","7980e21e":"code","ef57188b":"markdown","c9841d24":"markdown","c6860b73":"markdown","1af2b0de":"markdown"},"source":{"a9240ff2":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7b129250":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')\n\ntrain_df.head()","282d29f0":"train_df.info()","16c7a7d3":"plt.figure(figsize=(8,8))\nsns.distplot(a=train_df['Age'], kde=True)\nplt.show","6d56e61e":"plt.figure(figsize=(8,8))\nsns.stripplot(x=\"Survived\", y=\"Age\", data=train_df)\nplt.show","8ac940e0":"plt.figure(figsize=(8,8))\nsns.stripplot(x=\"Survived\", y=\"Fare\", data=train_df)\nplt.show","634522c4":"train_df.groupby(\"Embarked\").Survived.count().plot.bar()","b099ddd5":"train_df.groupby('Survived').Pclass.count().plot.bar()","559df20d":"train_df.groupby('SibSp').Survived.count().plot.bar()","1c4d0443":"df2 = train_df.drop(['Name','Ticket','Cabin'], axis=1)\n\ndf2.head()","00ba3e91":"df2.isnull().sum()","75300eac":"df2.Age.fillna(df2.Age.mean(), inplace=True)\ndf2.Embarked.fillna(\"S\", inplace=True)\ndf2.isnull().sum()","cf2dfa19":"y = df2.Survived\nX  = df2.drop('Survived', axis=1)\n\nfor col in X.columns:\n    if X[col].dtype == 'object':\n        X[col],_= X[col].factorize()\n        \n        \nmi_score = mutual_info_classif(X,y, random_state=1)\n\nmiscore = pd.Series(mi_score*100 , name=\"MI_score\" , index=X.columns)\n\nprint(miscore) ","29993947":"# splitting dataset into training and validation\nX_train, X_valid, y_train, y_valid = train_test_split(X,y, train_size=0.80, test_size=0.20,random_state=0)\n\n# model object\nmodel = RandomForestClassifier(n_estimators=500, random_state=0)\n\n# fitting model to data\nmodel.fit(X_train,y_train)\n\n# predicting values\n\npreds = model.predict(X_valid)\n\n# accuracy and confusion matrix\n\nacc = accuracy_score(y_valid,preds)\n\nprint(\"accuracy score for classification: \",acc)\n\nconf = confusion_matrix(y_valid,preds)\n\nprint(conf)\n\n# precision score\n\nscore = precision_score(y_valid,preds)\n\nprint(score)\n\n# roc and auc score\n\nrocauc = roc_auc_score(y_valid,preds)\n\nprint(\"ROC and AUC score: \", rocauc)\n\n# roc curve\n\ncurve = roc_curve(y_valid,preds)\nprint(curve)","404a3023":"# prediction on test data\n\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col = 'PassengerId')\n\ntest_df.info()","337bfb13":"testdf2 = test_df.drop(['Name','Ticket','Cabin'], axis=1)\n\ntestdf2.isnull().sum()\n\ntestdf2.Age.fillna(testdf2.Age.mean(), inplace=True)\ntestdf2.Fare.fillna(testdf2.Fare.mean(), inplace=True)\n\n# factorize object columns\n\nfor col in testdf2.columns:\n    if testdf2[col].dtype == 'object':\n        testdf2[col],_= testdf2[col].factorize()\n\n# prediction on survival\n\nprediction = model.predict(testdf2)\n\n# submission csv\n\nmysub = pd.DataFrame({'PassengerId':testdf2.index,\n                       'Survived': prediction})\n\nmysub.to_csv('mysubmission.csv', index=False)","bfc5fa5b":"clf = GradientBoostingClassifier(n_estimators=500,\n                                 learning_rate=0.01, \n                                 max_leaf_nodes=150,\n                                 random_state=1,\n                                 max_depth=4)\n\n\nclf.fit(X_train,y_train)\n\nprediction = clf.predict(X_valid)\n\n# accuracy score\n\naccu = accuracy_score(y_valid, prediction)\n\nprint(\"accuracy score of GBC:\", accu)\n\n# confusion metrix\n\ncon = confusion_matrix(y_valid,prediction)\n\nprint(con)","7980e21e":"test_pred = clf.predict(testdf2)\n\nsub = pd.DataFrame({'PassengerId':testdf2.index,\n                    'Survived':test_pred})\n\nsub.to_csv('submission.csv', index=False)","ef57188b":"# Gradient Boosting classifier model training","c9841d24":"# Prediction on testing data","c6860b73":"# Model training","1af2b0de":"# Prediciton on test data"}}