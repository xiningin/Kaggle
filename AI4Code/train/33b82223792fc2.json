{"cell_type":{"37370965":"code","6d03ec8e":"code","7a0e444e":"code","29151280":"code","58c522f3":"code","fa592495":"code","4189c665":"code","fbcc6ef0":"markdown","85004a90":"markdown","2ce010f6":"markdown","befc1930":"markdown","5789c023":"markdown","bbdce23f":"markdown"},"source":{"37370965":"import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt","6d03ec8e":"image = cv2.imread(r'..\/input\/image-for-basic-digital-image-processing-operation\/lena.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)","7a0e444e":"negative = 255- image # neg = (L-1) - img\n\nplt.figure(figsize= (6,6))\nplt.imshow(negative);\nplt.axis('off');","29151280":"pic = image\ngray=lambda rgb : np.dot(rgb[...,:3],[0.299,0.587,0.114])\ngray=gray(pic)\n\nmax_=np.max(gray)\n\ndef log_transform():\n    return(255\/np.log(1+max_))*np.log(1+gray)\n\nplt.figure(figsize=(5,5))\nplt.imshow(log_transform(),cmap=plt.get_cmap(name='gray'))\nplt.axis('off');","58c522f3":"# Gamma encoding \n\ngamma=2.2 # Gamma < 1 ~ Dark ; Gamma > 1 ~ Bright\n\ngamma_correction=((pic\/255)**(1\/gamma))\nplt.figure(figsize=(5,5))\nplt.imshow(gamma_correction)\nplt.axis('off');","fa592495":"# Function to map each intensity level to output intensity level. \ndef pixelVal(pix, r1, s1, r2, s2): \n\tif (0 <= pix and pix <= r1): \n\t\treturn (s1 \/ r1)*pix \n\telif (r1 < pix and pix <= r2): \n\t\treturn ((s2 - s1)\/(r2 - r1)) * (pix - r1) + s1 \n\telse: \n\t\treturn ((255 - s2)\/(255 - r2)) * (pix - r2) + s2 \n\n# Open the image. \nimg = pic\n\n# Define parameters. \nr1 = 60\ns1 = 0\nr2 = 205\ns2 = 200\n\n# Vectorize the function to apply it to each value in the Numpy array. \npixelVal_vec = np.vectorize(pixelVal) \n\n# Apply contrast stretching. \ncontrast_stretched = pixelVal_vec(img, r1, s1, r2, s2) \nplt.imshow(contrast_stretched) \n","4189c665":"img = cv2.imread('..\/input\/image-for-basic-digital-image-processing-operation\/crow.jpg',0)  \n  \n# To ascertain total numbers of  \n# rows and columns of the image, \n# size of the image \nm,n = img.shape \n   \n  \n# the lower threshold value \nT1 = 100\n  \n# the upper threshold value \nT2 = 180 \n  \n# create a array of zeros \nimg_thresh_back = np.zeros((m,n), dtype = int) \n   \nfor i in range(m): \n      \n    for j in range(n): \n          \n        if T1 < img[i,j] < T2:  \n            img_thresh_back[i,j]= 255\n        else: \n            img_thresh_back[i,j] = img[i,j]\n            \nplt.imshow(img_thresh_back)","fbcc6ef0":"# 5. Gray Level Slicing","85004a90":"# Image to be used:","2ce010f6":"# 1. Negative of an Image","befc1930":"# 3. Power Law Transformation","5789c023":"# 4. Contrast Stretching","bbdce23f":"# 2. Logarithmic Transformation\n\n'''\nlog transform\n-> s = c*log(1+r)\n\nSo, we calculate constant c to estimate s\n-> c = (L-1)\/log(1+|I_max|)\n\n'''"}}