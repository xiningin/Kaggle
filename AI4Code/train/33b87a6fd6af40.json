{"cell_type":{"b14324d1":"code","29b6b5fc":"code","b4adc6a6":"code","3456733f":"code","cfdac466":"code","55c9eb0f":"code","14d87095":"code","f819ff79":"code","c314efc7":"code","00d9cf1f":"code","b033dce6":"code","1762662b":"code","cf314202":"code","cddebee7":"code","3f3cc947":"code","b171c919":"code","ea4009b9":"code","1709edd9":"code","4018eedf":"code","d1dda62f":"code","c3198574":"code","883e196f":"code","f80f858e":"code","c63a3094":"code","12785dbb":"code","e53fb40c":"code","50e9b480":"code","582cb0aa":"code","aa219bfb":"code","9e89311c":"code","3bec1dcc":"code","f6deab10":"code","c0f14871":"code","99ffbaaa":"code","0a46f8c1":"code","1bd76caf":"code","57abc6f8":"code","4a008f75":"code","aa32919a":"code","9ee9f42d":"code","80d2455b":"code","00cb5852":"code","c57e261d":"code","14ecacff":"code","797ecf94":"code","1fd3b5e0":"code","0e430db6":"code","1edb2c61":"code","9ecaba15":"code","d97081d8":"code","1baed1b3":"code","fa857397":"code","0595044b":"code","e59ccc1b":"markdown","2cc914b3":"markdown","5da6cb00":"markdown","4c4c5e68":"markdown","24184fc0":"markdown","de75524b":"markdown","197c9c8c":"markdown","bc965732":"markdown","78d75310":"markdown","f2ba9a10":"markdown","64535f92":"markdown","61ad7c1e":"markdown","0b6236c7":"markdown","22ec233d":"markdown","ca8cd5e4":"markdown","3fb4a9aa":"markdown","d2177cdd":"markdown","701ad964":"markdown","a8855d7e":"markdown","26850c50":"markdown","3f60c065":"markdown","ca400c42":"markdown","bde04473":"markdown","703a0ea6":"markdown","70fa7f27":"markdown","be90a4d7":"markdown","5ada6a41":"markdown","8f1f7906":"markdown"},"source":{"b14324d1":"# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","29b6b5fc":"# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns # advanced vizs\n%matplotlib inline","b4adc6a6":"# statistics\nfrom statsmodels.distributions.empirical_distribution import ECDF","3456733f":"# time series analysis\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","cfdac466":"import pandas as pd\npd.set_option('float_format', '{:f}'.format)\ntrain = pd.read_csv(\"..\/input\/final-proje\/train.csv\", parse_dates = True, index_col = 'Date')\ntrain.head()","55c9eb0f":"# time series as indexes\ntrain.index","14d87095":"from datetime import date\nd0 = date(2013, 1, 1)\nd1 = date(2015, 7, 31)\nprint(\"Number of days in between last date & first date is {} days\".format((d1 - d0).days + 1))","f819ff79":"print(\"Number of days in data : {} \".format(len(train.index.unique())))","c314efc7":"print(\"In total: \", train.shape)","00d9cf1f":"# first glance at the train set: head and tail\ntrain.head()","b033dce6":"train.tail()","1762662b":"# data extraction\ntrain['Year'] = train.index.year\ntrain['Month'] = train.index.month\ntrain['Day'] = train.index.day\ntrain['WeekOfYear'] = train.index.weekofyear\ntrain.head()","cf314202":"# adding new variable\ntrain['SalePerCustomer'] = train['Sales']\/train['Customers']\ntrain['SalePerCustomer'].describe()","cddebee7":"train.head()","3f3cc947":"c = '#9400D3' # basic color for plots\nplt.figure(figsize = (20, 6))\ncdf = ECDF(train['Sales'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel('Sales'); plt.ylabel('ECDF')\nplt.grid()","b171c919":"plt.figure(figsize = (20, 6))\ncdf = ECDF(train['Customers'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel('Customers')\nplt.grid()","ea4009b9":"plt.figure(figsize = (20, 6))\ncdf = ECDF(train['SalePerCustomer'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel('Sale per Customer')\nplt.grid()","1709edd9":"# closed stores\ntrain[(train.Open == 0) & (train.Sales == 0)].head()","4018eedf":"len(train[(train.Open == 0) & (train.Sales == 0)])","d1dda62f":"print(\"Closed Store {} %\".format(round((len(train[(train.Open == 0) & (train.Sales == 0)])* 100 \/ len(train)),2)))","c3198574":"# opened stores with zero sales\nzero_sales = train[(train.Open != 0) & (train.Sales == 0)]\nzero_sales.head()","883e196f":"print(\"In total: \", zero_sales.shape)","f80f858e":"print(\"Closed stores and days which didn't have any sales won't be counted into the forecasts.\")\ntrain = train[(train[\"Open\"] != 0) & (train['Sales'] != 0)]\nprint(\"In total: \", train.shape)","c63a3094":"store = pd.read_csv(\"..\/input\/final-proje\/store.csv\")","12785dbb":"# additional information about the stores\nstore.head()","e53fb40c":"# missing values\nstore.isnull().sum()","50e9b480":"# missing values in CompetitionDistance\nstore[pd.isnull(store.CompetitionDistance)]","582cb0aa":"store.CompetitionDistance.describe()","aa219bfb":"# fill NaN with a median value (skewed distribuion)\nstore['CompetitionDistance'].fillna(store['CompetitionDistance'].median(), inplace = True)\nstore.isnull().sum()","9e89311c":"promonull=store[(store.Promo2SinceWeek.isna()) & (store.Promo2SinceYear.isna()) & (store.PromoInterval.isna())]\npromonull.head()","3bec1dcc":"len(promonull)","f6deab10":"CompetitionOpennull=store[(store.CompetitionOpenSinceMonth.isna()) & (store.CompetitionOpenSinceYear.isna())]\nCompetitionOpennull.head()","c0f14871":"len(CompetitionOpennull)","99ffbaaa":"# replace NA's by 0\nstore.fillna(0, inplace = True)\nstore.isnull().sum()","0a46f8c1":"print(\"Joining train set with an additional store information.\")\ntrain_store=train.reset_index().merge(store, how=\"inner\", on = 'Store').set_index('Date')\ntrain_store.head()","1bd76caf":"print(\"In total: \", train_store.shape)","57abc6f8":"train_store.groupby('StoreType')['Sales'].describe()","4a008f75":"train_store.groupby('StoreType')['Customers', 'Sales'].sum()","aa32919a":"# sales trends\nsns.factorplot(data = train_store, x = 'Month', y = \"Sales\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = c) \nplt.show()","9ee9f42d":"sns.factorplot(data = train_store, x = 'Month', y = \"Customers\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = c) \nplt.show()","80d2455b":"# sale per customer trends\nsns.factorplot(data = train_store, x = 'Month', y = \"SalePerCustomer\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = c) \nplt.show()","00cb5852":"sns.factorplot(data = train_store, x = 'Month', y = \"Sales\", \n               col = 'DayOfWeek', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'StoreType', # per store type in rows\n               color = c) \nplt.show()","c57e261d":"sns.factorplot(data = train_store, x = 'Month', y = \"Customers\", \n               col = 'DayOfWeek', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'StoreType', # per store type in rows\n               color = c) \nplt.show()","14ecacff":"sns.factorplot(data = train_store, x = 'Month', y = \"SalePerCustomer\", \n               col = 'DayOfWeek', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'StoreType', # per store type in rows\n               color = c) \nplt.show()","797ecf94":"# stores which are opened on Sundays\ntrain_store[(train_store.Open == 1) & (train_store.DayOfWeek == 7)]['Store'].unique()","1fd3b5e0":"# competition open time (in months)\ntrain_store['CompetitionOpen'] = 12 * (train_store.Year - train_store.CompetitionOpenSinceYear) + (train_store.Month - train_store.CompetitionOpenSinceMonth)\ntrain_store.head()","0e430db6":"# Promo open time\ntrain_store['PromoOpen'] = 12 * (train_store.Year - train_store.Promo2SinceYear) + (train_store.WeekOfYear - train_store.Promo2SinceWeek) \/ 4.0\ntrain_store.head()","1edb2c61":"train_store.isnull().sum()","9ecaba15":"# average PromoOpen time and CompetitionOpen time per store type\ntrain_store.loc[:, ['StoreType', 'Sales', 'Customers','SalePerCustomer', 'PromoOpen', 'CompetitionOpen']].groupby('StoreType').mean()","d97081d8":"import numpy as np\ncorr_all = train_store.drop('Open', axis = 1).corr()\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr_all, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize = (25, 25))\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_all, mask = mask,\n            square = True, linewidths = .5, ax = ax, cmap = \"rainbow\",annot=True)      \nplt.show()","1baed1b3":"sns.factorplot(data = train_store, x = 'DayOfWeek', y = \"Sales\", \n               col = 'Promo', \n               row = 'Promo2',\n               hue = 'Promo2',\n               palette = 'RdPu') \nplt.show()","fa857397":"sns.factorplot(data = train_store, x = 'DayOfWeek', y = \"Customers\", \n               col = 'Promo', \n               row = 'Promo2',\n               hue = 'Promo2',\n               palette = 'RdPu') \nplt.show()","0595044b":"sns.factorplot(data = train_store, x = 'DayOfWeek', y = \"SalePerCustomer\", \n               col = 'Promo', \n               row = 'Promo2',\n               hue = 'Promo2',\n               palette = 'RdPu') \nplt.show()","e59ccc1b":"As mentioned before, we have a strong positive correlation between the amount of Sales and Customers of a store. We can also observe a positive correlation between the fact that the store had a running promotion (Promo equal to 1) and amount of Customers.\n\nHowever, as soon as the store continues a consecutive promotion (Promo2 equal to 1) the number of Customers and Sales seems to stay the same or even decrease, which is described by the pale negative correlation on the heatmap. The same negative correlation is observed between the presence of the promotion in the store and the day of a week.","2cc914b3":"# Short Description:\n- Sales: the turnover for any given day (target variable).\n- Customers: the number of customers on a given day.\n- Open: an indicator for whether the store was open: 0 = closed, 1 = open.\n- Promo: indicates whether a store is running a promo on that day.\n- StateHoliday: indicates a state holiday. Normally all stores, with few exceptions, are closed on state holidays.\n- SchoolHoliday: indicates if the (Store, Date) was affected by the closure of public schools.","5da6cb00":"All store types follow the same trend but at different scales depending on the presence of the (first) promotion Promo and StoreType itself (case for B).","4c4c5e68":"# Missing values","24184fc0":"### What about store information:","de75524b":"# Conclusion \n- The most selling and crowded StoreType is A.\n- The best \"Sale per Customer\" StoreType D indicates to the higher Buyer Cart. To benefit from this fact, Rossmann can consider proposing bigger variety of its products.\n- Low SalePerCustomer amount for StoreType B indicates to the possible fact that people shop there essentially for \"small\" things. Eventhough this StoreType generated the least amount of sales and customers over the whole period, it shows a great potential.\n- Customers tends to buy more on Modays when there's one promotion (Promo) and on Sundays when there's no promotion at all (both Promo and Promo1 are equal to 0).\n- Promo2 alone doesn't seem to be correlated to any significant change in the Sales amount.","197c9c8c":"Which means that it's safe to replace NaN with \"0\", No data is available for all this columns data missing","bc965732":"To get the first impression about continious variables in the data we can plot ECDF.","78d75310":"There're 172817 closed stores in the data. It is about 17% of the total amount of observations. To avoid any biased forecasts we will drop these values.\n\nWe need to take care about opened stores with zero sales","f2ba9a10":"Apperently this information is simply missing from the data. No particular pattern observed. In this case, it makes a complete sense to replace NaN with the median values (which is twice less that the average).","64535f92":"No date data is missing in between 01\/01\/2010 to 31\/07\/2013, which accounts 2 years & 7 months timeframe","61ad7c1e":"About 20% of data has zero amount of sales \/ customers that we need to deal with and almost 80% of time daily amount of sales was less than 1000. So what about zero sales, is it only due to the fact that the store is closed!","0b6236c7":"Interestingly enough, there are opened store with no sales on working days. There're only 54 days in the data, so we can assume that there were external factors involved, for example lockdown.","22ec233d":"# Exploratory Data Analysis","ca8cd5e4":"There are several things here:\n- In case of no promotion, both Promo and Promo2 are equal to 0, Sales tend to peak on Sunday (!). Though we should note that StoreType C doesn't work on Sundays. So it is mainly data from StoreType A, B and D.\n- On the contrary, stores that run the promotion tend to make most of the Sales on Monday. This fact could be a good indicator for Rossmann marketing campaigns. The same trend follow the stores which have both promotion at the same time (Promo and Promo2 are equal to 1).\n- Promo2 alone doesn't seem to be correlated to any significant change in the Sales amount. This can be also prooved by the blue pale area on the heatmap above.","3fb4a9aa":"The most selling and crowded StoreType A doesn't appear to be the one the most exposed to competitors. Instead it's a StoreType B, which also has the longest running period of promotion.","d2177cdd":"Which means that it's safe to replace NaN with O, No data is available for all this columns data missing","701ad964":"# Stores which are opened on Sundays","a8855d7e":"# ECDF: empirical cumulative distribution function","26850c50":"We see that stores of StoreType C are all closed on Sundays, whereas others are most of the time opened. Interestingly enough, stores of StoreType D are closed on Sundays only from October to December.","3f60c065":"StoreType B has the highest average of Sales among all others, however we have much less data for it. So let's print an overall sum of Sales and Customers to see which StoreType is the most selling and crowded one.","ca400c42":"- Store: a unique Id for each store\n- StoreType: differentiates between 4 different store models: a, b, c, d\n- Assortment: describes an assortment level: a = basic, b = extra, c = extended\n- CompetitionDistance: distance in meters to the nearest competitor store\n- CompetitionOpenSince[Month\/Year]: gives the approximate year and month of the time the nearest competitor was opened\n- Promo2: Promo2 is a continuing a promotion for some stores: 0 = store is not participating, 1 = store is participating\n- Promo2Since[Year\/Week]: describes the year and calendar week when the store started participating in Promo2\n- PromoInterval: describes the consecutive intervals Promo2 is started, naming the months the promotion is started. E.g. \"Feb,May,Aug,Nov\" means each round starts in February, May, August, November of any given year for that store","bde04473":"Eventhough the plots above showed StoreType B as the most selling and performant one, in reality it is not true. The highest SalePerCustomer amount is observed at the StoreType D, about 12 dollars  with Promo and 10 dollars  without. As for StoreType A and C it is about 9 dollars.\n\nLow SalePerCustomer amount for StoreType B describes its Buyer Cart: there are a lot of people who shop essentially for \"small\" things (or in a little quantity). Plus we saw that overall this StoreType generated the least amount of sales and customers over the period.","703a0ea6":"On average customers spend about 9.50 $ per day. Though there are days with Sales equal to zero.","70fa7f27":"We have few variables with missing values that we need to deal with. Let's start with the CompetitionDistance","be90a4d7":"## Closed stores and zero sales stores","5ada6a41":"# Store types","8f1f7906":"Clearly stores of type A. StoreType D goes on the second place in both Sales and Customers."}}