{"cell_type":{"4ac145a1":"code","2dc91005":"code","0338fb0d":"code","2f8bc5a1":"code","78108363":"code","bfb0e038":"code","31fa2caa":"code","9e835074":"code","756e6e13":"code","30b8b117":"code","373b316b":"code","70dbdb28":"code","94c6c865":"code","8b09ec32":"code","8e173f31":"code","e9f3b661":"code","8e493975":"code","2f6e94a1":"code","57d9d2f4":"code","7b056e85":"code","ab5502ca":"code","a0d7e071":"code","cc375065":"code","f4edc928":"code","fc63b1a6":"code","72cc4ec0":"code","2bf3b3cb":"code","e8b0dbec":"code","ea21cf39":"code","0519c10b":"code","5bc416a7":"code","79ffcff8":"code","62888911":"code","c5b79e1d":"code","1fc9888a":"code","77a82574":"markdown","ff818f80":"markdown","ee6a1a1b":"markdown","2d63b196":"markdown","4316bcea":"markdown","16afbb6b":"markdown","9e45dc65":"markdown","1bfd20c3":"markdown","f36d0887":"markdown","25273345":"markdown","f72b5245":"markdown","fb807820":"markdown","176e5153":"markdown","adf6b101":"markdown","40e5c250":"markdown"},"source":{"4ac145a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2dc91005":"import pandas as pd\nimport matplotlib.pyplot as plt\n","0338fb0d":"from pathlib import Path\n\ndata_dir = Path('\/kaggle\/input\/edinburgh-inside-airbnb\/airbnb-data')\ndata_dir.exists()","2f8bc5a1":"calendar = pd.read_csv(Path(data_dir, 'calendar.csv'))\n\nlistings = len(calendar.listing_id.unique())\ndays = len(calendar.date.unique())\nprint(f'The are {listings} unique listings over {days} days.')","78108363":"print(f'The listings start on {calendar.date.min()} and end {calendar.date.max()}')","bfb0e038":"calendar.head()","31fa2caa":"calendar.available.value_counts()","9e835074":"calendar_new = calendar[['date', 'available']]\ncalendar_new['busy'] = calendar_new.available.map( lambda x: 0 if x == 't' else 1)\n\ncalendar_new.head()","756e6e13":"calendar_new = calendar_new.groupby('date')['busy'].mean().reset_index()\ncalendar_new['date'] = pd.to_datetime(calendar_new['date'])\n\ncalendar_new.head()","30b8b117":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['agg.path.chunksize'] = 10000\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nplt.figure(figsize=(10, 5))\nplt.plot(calendar_new['date'], calendar_new['busy'])\nplt.title('Airbnb Edinburgh Calendar')\nplt.ylabel('% busy')\nplt.show();","373b316b":"calendar['date'] = pd.to_datetime(calendar['date'])","70dbdb28":"def get_cleaned_price(price: pd.core.series.Series) -> float:\n    \"\"\" Returns a float price from a pandas Series including the currency \"\"\"\n    return price.str.replace('$', '').str.replace(',', '').astype(float)","94c6c865":"calendar['price'] = get_cleaned_price(calendar['price'])\ncalendar['adjusted_price'] = get_cleaned_price(calendar['adjusted_price'])\n\ncalendar.head()","8b09ec32":"mean_per_month = calendar.groupby(calendar['date'].dt.strftime('%B'), sort=False)['price'].mean()","8e173f31":"mean_per_month.plot(kind = 'barh' , figsize = (12,7))\nplt.xlabel('average monthly price');","e9f3b661":"calendar['day_of_the_week'] = calendar.date.dt.weekday_name\ncalendar.head()","8e493975":"days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nprice_week = calendar[['day_of_the_week', 'price', 'adjusted_price']]\nprice_week.head()","2f6e94a1":"price_week = price_week.groupby(['day_of_the_week']).mean().reindex(days)\nprice_week","57d9d2f4":"price_week.plot()\nticks = list(range(0, 7, 1))\nlabels = \"Mon Tues Weds Thurs Fri Sat Sun\".split()\nplt.xticks(ticks, labels);","7b056e85":"listings = pd.read_csv(Path(data_dir, 'listings.csv'))\n\nprint(f'There are {listings.id.nunique()} records in the listing data.')","ab5502ca":"listings.head()","a0d7e071":"list(listings)","cc375065":"neighbourhoods = listings.groupby(by='neighbourhood_cleansed').count()[['id']].sort_values(by='id', ascending=False).head(10)\nneighbourhoods","f4edc928":"neighbourhoods.sort_values(by='id').plot(kind='barh' , figsize = (12,7))\nplt.ylabel('Neighbourhood')\nplt.xlabel('Rental')","fc63b1a6":"listings[['price', 'weekly_price', 'monthly_price', 'security_deposit', 'cleaning_fee']].head()","72cc4ec0":"prices = get_cleaned_price(listings['price'])\n\nprices.describe()","2bf3b3cb":"listings['price'] = prices","e8b0dbec":"max_price = listings['price'].max()\nmax_price","ea21cf39":"listings[listings['price'] == max_price]","0519c10b":"prices = prices.loc[(prices <= 600) & (prices > 0)]\nprices.describe()","5bc416a7":"bins=50\n\nplt.figure(figsize=(10, 5))\nplt.hist(prices.values, bins=50, edgecolor='k')\nplt.ylabel('Count')\nplt.xlabel('Listing price in $')\nplt.title('Histogram of listing prices')\n\nplt.show()","79ffcff8":"weekly_prices = listings['weekly_price'].dropna()\nweekly_prices = weekly_prices.str.replace('[$,]', '', regex=True).astype(float)\n\nweekly_prices.describe()","62888911":"weekly_prices = weekly_prices.loc[(weekly_prices <= 4000) & (weekly_prices > 0)]\nweekly_prices.describe()","c5b79e1d":"bins=50\n\nplt.figure(figsize=(10, 5))\nplt.hist(weekly_prices.values, bins=bins, edgecolor='k')\nplt.ylabel('Count')\nplt.xlabel('Listing price in $')\nplt.title('Histogram of listing prices')\n\nplt.show()","1fc9888a":"monthly_prices = listings['monthly_price'].dropna()\nmonthly_prices = monthly_prices.str.replace('[$,]', '', regex=True).astype(float)\n\nmonthly_prices.describe()","77a82574":"Checking if we have an anomaly with the count of listings being the same as the max price, which could indicate some issue with the data","ff818f80":"showing only the top ten neighbourhood per number of listings","ee6a1a1b":"# Prices","2d63b196":"# General observation","4316bcea":"removing outliers","16afbb6b":"## Checking the neighbourhood","9e45dc65":"## Availabilities\n\nSimple True\/False boolean value. ","1bfd20c3":"Removing outliers","f36d0887":"### Price per week","25273345":"Quick peak at the data","f72b5245":"listing the fields in the dataset","fb807820":"# Listings","176e5153":"How price changes during day of week?","adf6b101":"# Price on the Calendar\n\nHow prices change over the year by month?","40e5c250":"### Price per month"}}