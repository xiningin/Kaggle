{"cell_type":{"ddaa5cf4":"code","96d63977":"code","4a2bb111":"code","4c729df8":"code","e7f1f15b":"code","82547313":"code","5694d6f6":"code","ac632f69":"code","bd3e2b11":"code","4f9ada92":"code","ce0e8728":"code","a0616212":"code","2cb096b2":"code","f0bbaf1d":"code","14a898d1":"code","24eb4c00":"code","387f8cf7":"code","dca28872":"markdown"},"source":{"ddaa5cf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96d63977":"df=pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\ndf.head()\n","4a2bb111":"df.info()","4c729df8":"df.shape","e7f1f15b":"df.columns","82547313":"df.rename(columns={'CO2 Emissions(g\/km)' : 'CO2_emission'}, inplace=True)\ndf.rename(columns={'Engine Size(L)' : 'Enginesize'}, inplace=True)\ndf.rename(columns={'Fuel Consumption City (L\/100 km)' : 'fuelconsumptioncity'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Hwy (L\/100 km)' : 'fuelconsumptionhwy'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Comb (L\/100 km)' : 'fuelconsumptioncomb'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Comb (mpg)' : 'fuelconsumptioncombmpg'}, inplace=True)\n","5694d6f6":"df.isna().sum()","ac632f69":"from sklearn.model_selection import train_test_split\nX=df[[\"Enginesize\"]]\ny=df[[\"CO2_emission\"]]","bd3e2b11":"# Fitting Linear Regression to the dataset \nfrom sklearn.linear_model import LinearRegression \nlin = LinearRegression() \n\nlin.fit(X, y) \n","4f9ada92":"\nlin.coef_","ce0e8728":"lin.intercept_","a0616212":"y_pred=lin.predict(X)\ny_pred","2cb096b2":"import seaborn as sns\nimport matplotlib.pyplot as plt\n# Fitting Polynomial Regression to the dataset \nfrom sklearn.preprocessing import PolynomialFeatures \n\npoly = PolynomialFeatures(degree = 4) \nX_poly = poly.fit_transform(X) \n\nprint(poly.fit(X_poly, y))\n#print(X_poly)\nlin2 = LinearRegression() \nlin2.fit(X_poly, y) \n","f0bbaf1d":"# Visualising the Linear Regression results \nplt.scatter(X, y, color = 'blue') \n\nplt.plot(X, lin.predict(X), color = 'red') \nplt.title('Linear Regression') \nplt.xlabel('CO2_emission') \nplt.ylabel('Enginesize') \n\nplt.show() \n","14a898d1":"# Visualising the Polynomial Regression results \nplt.scatter(X, y, color = 'blue') \n\nplt.plot(X, lin2.predict(poly.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression') \nplt.xlabel('CO2_emission') \nplt.ylabel('Enginesize') \n\nplt.show() \n","24eb4c00":"y_pred=lin2.predict(poly.fit_transform(X))\ny_pred","387f8cf7":"print(lin.predict([[1.5]]))\nprint(lin2.predict(poly.fit_transform([[1.5]])))\n","dca28872":"Let us apply Linear Regression model from sklearn"}}