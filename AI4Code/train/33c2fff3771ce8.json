{"cell_type":{"e7ce1e81":"code","8e21c7fd":"code","7354c6bb":"code","c90af860":"code","282de41a":"code","6bcfe7d6":"code","d6d8b56d":"code","0ded8644":"code","2fe25df0":"code","9ff102b6":"code","99aeb797":"code","acb8f3fa":"code","4bdfbdf9":"code","b0f8b2af":"code","ec2a565c":"code","31cc23f1":"code","d066f49c":"code","dbd37600":"code","8494799c":"code","e09e0ff2":"code","36d79f58":"code","e279827c":"code","2dd91f8c":"code","ea12550f":"code","69338d69":"code","fdc35d7e":"code","817964f8":"code","72c447ef":"code","f81c937e":"code","3b4497e5":"code","986c261c":"code","9468781f":"code","21ee5a93":"code","3a5d84bc":"code","529198db":"code","fc65fc46":"code","0625365a":"code","f6e240f0":"code","9b6319b0":"code","7a6735ec":"code","0092a951":"code","0d866d56":"code","ea321186":"code","4063505b":"code","66535e95":"code","61fac0ba":"code","1973c69a":"code","a08ad9c0":"code","01cdcdd6":"code","de358e43":"code","2a7c95f1":"code","2ba55048":"code","f553f668":"code","3dd51f5b":"markdown","1e0f0c48":"markdown","782acbb2":"markdown","871a5393":"markdown","b92cc0f4":"markdown","ed7d412e":"markdown","10e80981":"markdown","af93ab49":"markdown","aa7a0bce":"markdown","703a5e8b":"markdown","6bda219b":"markdown","d73757c7":"markdown","6e38910d":"markdown","01514923":"markdown","af842b8b":"markdown","c83f1614":"markdown","93bf8551":"markdown","6c9577a5":"markdown","4d56e392":"markdown","0a648e4c":"markdown","83c2d8f6":"markdown","8c300b45":"markdown"},"source":{"e7ce1e81":"#Lets import required libraries and methods\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mlt\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style \nimport matplotlib.cm as cm #colormap\n\nfrom datetime import datetime, timedelta, date\nfrom dateutil import relativedelta\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","8e21c7fd":"##Code to create the assembly seats visualization - 5 concentric eclipses that accomodate 250 points\nx=[]\ny=[]\n#Generate polar coordinates to plot the circles\nradius=[10,12,14,16,18]\ntheta=np.linspace(0,360,50)\n#Generate polar coordinates\nfor i in radius:\n    x.append(i*np.cos(theta))\n    y.append(i*np.sin(theta))\n#Transpose array\nx_t=np.transpose(x)\ny_t=np.transpose(y)\n#reshape to 1-D array to plot\nx=np.reshape(x_t,len(x)*len(x[1]))\ny=np.reshape(y_t,len(y)*len(y[1]))\n#reindexing helps us to plot similar points together\nreindex=np.reshape([[np.linspace(5*i+1,5*i+5,5)] for i in np.append(np.reshape(np.transpose(np.reshape(range(48),(8,6))),48),[48,49])],250).astype(int)\n#generate (X,Y) from reindexed array\nx=x[reindex-1]\ny=y[reindex-1]","7354c6bb":"#use dark background for visualization\nstyle.use('dark_background')","c90af860":"#load the 2018 member details file into Pandas Dataframe\ndf_members=pd.read_excel('..\/input\/rajyasabha_member_details_2018.xlsx')","282de41a":"##view data\ndf_members.head(5)","6bcfe7d6":"#Plot the total seats in Rajya Sabha first\nfig, axes = plt.subplots(figsize=(10,7.5))\nplt.plot(x, y, 'o', color='w',alpha=0.65)\nplt.plot(x[245:250], y[245:250], 'o', color='black')\nplt.axis('off')\nplt.title('Total seats in Rajya Sabha = 245',fontsize=20)","d6d8b56d":"#PLot the number of vacant seats\nfig, axes = plt.subplots(figsize=(10,7.5))\ncounter=0\nidx=0\ncount_by_party=df_members.groupby('Party').size()\ncount_by_party.sort_values(ascending=True,inplace=True)\nvacant=pd.Series([count_by_party['No Party']],index=(['No Party']))\n\nvacant['Filled Seats']=sum(count_by_party[key] for key in count_by_party.keys() if key not in ['No Party'])\nvacant.sort_values(ascending=True,inplace=True)\nkey_vacant=vacant.keys()\nc=['r','w']\nsymbol=['X','o']\nalpha=[1,0.65]\nlabels=['Vacant Seats','Filled Seats']\n\nfor i in vacant.values+1:\n    #print(i,counter,counter+i-1)\n    plt.plot(x[counter:counter+i-1], y[counter:counter+i-1], symbol[idx], color=c[idx],label=labels[idx],alpha=alpha[idx])\n    counter=counter+i\n    idx=idx+1\n\n#As 250 points are plotted, hide 5 points\nplt.plot(x[245:250], y[245:250], 'o', color='black') \nplt.legend(loc='best')\nplt.axis('off')\nplt.title('Currently there are '+ str(vacant[0]) +' vacant seats in Rajya Sabha.',fontsize=20)","0ded8644":"#Plot the count of ministers\nfig, axes = plt.subplots(figsize=(10,7.5))\ncounter=0\nidx=0\ncount_of_ministers=df_members.groupby('MinisterY_N').size()\ncount_of_ministers.sort_values(ascending=True,inplace=True)\nkey_by_ministers=count_of_ministers.keys()\nc=['r','w']\nlabels=['Cabinet Minister','Member of Parliment']\nsymbol=['^','o']\nalpha=[1.0,0.65]\n\nfor i in count_of_ministers.values+1:\n    #print(i,counter,counter+i-1)\n    plt.plot(x[counter:counter+i-1], y[counter:counter+i-1], symbol[idx], color=c[idx],label=labels[idx],alpha=alpha[idx])\n    counter=counter+i\n    idx=idx+1\n#As 250 points are plotted, hide 5 points\nplt.plot(x[245:250], y[245:250], 'o', color='black') \n\nplt.legend(loc='best')\nplt.axis('off')\nplt.title('Currently '+ str(count_of_ministers[0]) +' members in Rajya Sabha serve as Cabinet Ministers',fontsize=20)","2fe25df0":"#Plot count of women members\nfig, axes = plt.subplots(figsize=(10,7.5))\ncounter=0\nidx=0\ncount_of_women=df_members.groupby('FemaleY_N').size()\ncount_of_women.sort_values(ascending=True,inplace=True)\nkey_by_women=count_of_women.keys()\nlabels=['Female Member','Male Member']\nc=['r','w']\nsymbol=['D','o']\nalpha=[1.0,0.65]\n\nfor i in count_of_women.values+1:\n    #print(i,x[counter:counter+i-1], y[counter:counter+i-1])\n    plt.plot(x[counter:counter+i-1], y[counter:counter+i-1], symbol[idx], color=c[idx],label=labels[idx],alpha=alpha[idx])\n    counter=counter+i\n    idx=idx+1\n#As 250 points are plotted, hide 5 points\nplt.plot(x[245:250], y[245:250], 'o', color='black') \n\nplt.legend(loc='best')\nplt.axis('off')\nplt.title('Currently there are '+ str(count_of_women[0]) +' women members in Rajya Sabha',fontsize=20)","9ff102b6":"#Plot count by party\nfig, axes = plt.subplots(figsize=(10,7.5))\ncounter=0\nidx=0\ncount_by_party=df_members.groupby('Party').size()\ncount_by_party.sort_values(ascending=True,inplace=True)\nparty_reduced=pd.Series([count_by_party['BJP'],count_by_party['INC'],count_by_party['AIADMK'],count_by_party['AITC'],\n                         count_by_party['SP'],count_by_party['NOM.']],index=('BJP','INC','AIADMK','AITC','SP','NOM.'))\n\nparty_reduced['Others']=sum(count_by_party[key] for key in count_by_party.keys() if key not in ['BJP','INC','AIDMK','AITC','SP','NOM.'])\nkey_by_party=party_reduced.keys()\nc=['orange','b','g','r','purple','y','white']\n\nfor i in party_reduced.values+1:\n    #print(i,counter,counter+i-1)\n    plt.plot(x[counter:counter+i-1], y[counter:counter+i-1], 'o', color=c[idx],label=key_by_party[idx])\n    counter=counter+i\n    idx=idx+1\n#As 250 points are plotted, hide 5 points\nplt.plot(x[245:250], y[245:250], 'o', color='black') \n\nplt.legend(loc='best')\nplt.axis('off')\nplt.title('Member distribution according to party affiliations',fontsize=20)","99aeb797":"#Import cartopy to plot maps\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n","acb8f3fa":"#Load the 2011 Census file into a dataframe\nStateCensus=pd.read_csv('..\/input\/India_2011census_state.csv')","4bdfbdf9":"#Plot the distribution of representatives by state\nstyle.use('seaborn-white')\nfig = plt.figure(figsize=(15,10))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([62.4, 97.96,4.9, 37.8], crs=ccrs.PlateCarree())\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n#ax.add_feature(cfeature.STATES, linestyle=':')\n\nfor i in range(StateCensus.shape[0]):\n    lat,lon,density,rep,state = StateCensus[['Latitude','Longitude','Density','Rajyasabha representation','State']].iloc[i]\n    \n    if rep>0:\n        ax.plot(lon, lat, marker='o', color='blue', markersize=rep*2.5, alpha=0.5)\n    else:\n        ax.plot(lon, lat, marker='X', color='red',markersize=15)\n    ax.text(lon, lat, state,verticalalignment='top', horizontalalignment='center',fontsize=7,\n            bbox=dict(facecolor='white', alpha=0.5, boxstyle='round'))\nplt.title('Representation in Rajya Sabha by state',fontsize=20)    \nplt.show()","b0f8b2af":"#Load the member details for all years\nmembers_allyears=pd.read_csv('..\/input\/rajyasabha_member_details_allyears.csv',engine='python')","ec2a565c":"#States on timescale\nstate_timescale=members_allyears[['STATE','TERM_From','TERM_To']]\nstate_timescale['TERM_From']=pd.to_datetime(state_timescale['TERM_From'], format='%d\/%m\/%Y')\nstate_timescale['TERM_To']=pd.to_datetime(state_timescale['TERM_To'], format='%d\/%m\/%Y')","31cc23f1":"#Find the minimum and maximum years of representation per state\nstate_gantt_df=state_timescale.groupby('STATE').min()['TERM_From'].reset_index()\nstate_gantt_df['TERM_To']=state_timescale.groupby('STATE').max()['TERM_To'].reset_index()['TERM_To']","d066f49c":"#Color code the gantt chart bars\ndiff=[]\ncolor_encode=[]\nfor i in range(state_gantt_df.shape[0]):\n    start_date,end_date = state_gantt_df[['TERM_From','TERM_To']].iloc[i]\n    diff.append((end_date - start_date).days)\n    if start_date.year==1952 and end_date.year>=2018:\n        color_encode.append('orange')\n    elif start_date.year==1952 and end_date.year<2018:\n        color_encode.append('lightgrey')\n    else: color_encode.append('green')\n    \nstate_gantt_df['TERM_Diff']=diff\nstate_gantt_df['Color_encode']=color_encode\nstate_gantt_df.sort_values(by=['Color_encode','STATE'],ascending=True,inplace=True)","dbd37600":"#import mpatches to plot legend\nimport matplotlib.patches as mpatches","8494799c":"#Plot Gantt chart for duration of representation of states in Rajya Sabha\n#Reference - http:\/\/www.clowersresearch.com\/main\/gantt-charts-in-matplotlib\/\nfig = plt.figure(figsize=(20,15))\nax = fig.add_subplot(111)\nylabels=state_gantt_df.STATE\nilen=len(ylabels)\npos = np.arange(0.5,ilen*0.5+0.5,0.5)\nfor i in range(len(ylabels)):\n    start_date,end_date = state_gantt_df[['TERM_From','TERM_To']].iloc[i]\n    ax.barh((i*0.5)+0.5, state_gantt_df.TERM_Diff.iloc[i], left=start_date, height=0.4, align='center', edgecolor=state_gantt_df.Color_encode.iloc[i], \n            color=state_gantt_df.Color_encode.iloc[i], alpha = 0.75)\nlocsy, labelsy = plt.yticks(pos,ylabels)\nplt.setp(labelsy, fontsize = 16)\nax.axis('tight')\nax.set_ylim(ymin = -0.1, ymax = ilen*0.5+0.5)\nax.grid(axis='x',color = 'black', linestyle = ':')\nplt.xticks(fontsize=16)\nax.xaxis_date()\nor_patch = mpatches.Patch(color='orange',alpha = 0.75, label='States from 1952-2018')\ngrey_patch = mpatches.Patch(color='lightgrey',alpha = 0.75, label='States no longer present')\ngr_patch = mpatches.Patch(color='green',alpha = 0.75, label='New States formed after 1952')\nplt.legend(handles=[or_patch,grey_patch,gr_patch],bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.,fontsize=16)\nplt.title('Duration for representation of Indian States in Rajya Sabha(1952-2018)',fontsize=25)","e09e0ff2":"#Aggregate state counts in 3 year timeslots\ngantt_year=np.linspace(1953,2019,24).astype(int)\ngantt_angle=np.linspace(0,360,24).astype(int)\ngantt_state_cnt=[]\nfor i in range(len(gantt_year)-1):\n    start_date=date(gantt_year[i], 1, 1)\n    end_date=date(gantt_year[i+1]-1, 12, 31)\n    query_str=str('TERM_From<=\\''+str(start_date)+'\\' & TERM_To>=\\''+str(end_date)+'\\'')\n    gantt_state_cnt.append(state_gantt_df.query(query_str).shape[0])","36d79f58":"#Plot circular bar graph\n#Reference: https:\/\/stackoverflow.com\/questions\/46874689\/getting-labels-on-top-of-bar-in-polar-radial-bar-chart-in-matplotlib-python3\niN = len(gantt_state_cnt)\ntheta=np.arange(0,2*np.pi,2*np.pi\/iN)\n#width = (2*np.pi)\/iN *0.9\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.5, 0.5], polar=True)\nbars = ax.bar(theta, gantt_state_cnt, width=0.1, bottom=2,color='navy',alpha=0.7)\nax.set_xticks(theta)\nplt.axis('off')\nbottom = 8\nrotations = np.rad2deg(theta)\nfor x, bar, rotation, label, state_count  in zip(theta, bars, rotations, gantt_year,gantt_state_cnt):\n    lab = ax.text(x,bottom+4+bar.get_height() , label , ha='center', va='bottom',fontsize=15 )  \n    lab = ax.text(x,bottom-3+bar.get_height() , state_count , ha='center', va='bottom',color='red',fontsize=15 ) ","e279827c":"#Political parties on timescale\nPP_timescale=members_allyears[['PARTY','TERM_From','TERM_To']]\nPP_timescale['TERM_From']=pd.to_datetime(PP_timescale['TERM_From'], format='%d\/%m\/%Y')\nPP_timescale['TERM_To']=pd.to_datetime(PP_timescale['TERM_To'], format='%d\/%m\/%Y')\nPP_gantt_df=PP_timescale.groupby('PARTY').min()['TERM_From'].reset_index()\nPP_gantt_df['TERM_To']=PP_timescale.groupby('PARTY').max()['TERM_To'].reset_index()['TERM_To']","2dd91f8c":"#Create Gantt chart\ndiff=[]\ncolor_encode=[]\nfor i in range(PP_gantt_df.shape[0]):\n    start_date,end_date = PP_gantt_df[['TERM_From','TERM_To']].iloc[i]\n    diff.append((end_date - start_date).days)\n    if end_date.year>=2018:\n        color_encode.append('green')\n    else: color_encode.append('orange')\nPP_gantt_df['TERM_Diff']=diff\nPP_gantt_df['Color_encode']=color_encode\nPP_gantt_df.sort_values(by=['TERM_From','Color_encode'],ascending=False,inplace=True)","ea12550f":"#plot Gantt chart\nfig = plt.figure(figsize=(30,20))\nax = fig.add_subplot(111)\nylabels=PP_gantt_df.PARTY\nilen=len(ylabels)\npos = np.arange(0.5,ilen*0.5+0.5,0.5)\nfor i in range(len(ylabels)):\n    start_date,end_date = PP_gantt_df[['TERM_From','TERM_To']].iloc[i]\n    ax.barh((i*0.5)+0.5, PP_gantt_df.TERM_Diff.iloc[i], left=start_date, height=0.4, align='center', edgecolor='lightgreen', \n            color=PP_gantt_df.Color_encode.iloc[i], alpha = 0.8)\nlocsy, labelsy = plt.yticks(pos,ylabels)\nplt.setp(labelsy, fontsize = 18)\nplt.xticks(fontsize=18)\nax.axis('tight')\nax.set_ylim(ymin = -0.1, ymax = ilen*0.5+0.5)\nax.grid(color = 'g', linestyle = ':')\nax.xaxis_date()\nor_patch = mpatches.Patch(color='orange',alpha = 0.8, label='Political Parties no longer active')\ngr_patch = mpatches.Patch(color='green',alpha = 0.8, label='Political Parties existing in 2018')\nplt.legend(handles=[or_patch,gr_patch],bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.,fontsize=18)\nplt.title('Duration for representation of Political Parties in Rajya Sabha(1952 - 2018)',fontsize=24)","69338d69":"#plot donut chart showing proportion of categories\nplt.pie(PP_gantt_df.groupby('Color_encode').size(),colors=list(PP_gantt_df.groupby('Color_encode').size().index),\n        counterclock=True)\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","fdc35d7e":"#histogram of member terms\nfrom datetime import datetime, timedelta\nfrom dateutil import relativedelta\nterm_len=[]\nfor i in range(members_allyears.shape[0]):\n    term_from = datetime.strptime(members_allyears.TERM_From.iloc[i], '%d\/%m\/%Y')\n    term_to = datetime.strptime(members_allyears.TERM_To.iloc[i], '%d\/%m\/%Y') + timedelta(days=1)\n    r = relativedelta.relativedelta(term_to, term_from)\n    term_len.append(np.round((r.years*365+r.months*30+r.days)\/365,1))\nmembers_allyears['Term_length_mo']=term_len","817964f8":"#add up term lengths for each member\nterm_lens=members_allyears.groupby('NAME OF MEMBER').sum()","72c447ef":"#plot histogram for term lengths\nfig = plt.figure(figsize=(20,15))\nax1 = fig.add_subplot(1, 1, 1)\nplt.hist(x=term_lens.Term_length_mo,bins=max(term_lens.Term_length_mo.astype('int')),bottom=10,\n         histtype='stepfilled',orientation='horizontal',color='blue')\nax1.set_ylabel('Number of years served as Member of Parliament (MP)',fontsize=18)\nax1.set_xlabel('Number of members with this tenure',fontsize=18)\nax1.text(1200,7.5, 'Single term (6 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.text(400,13.5, 'Two terms (12 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.text(250,19.5, 'Three terms (18 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.text(200,24, 'Four terms (24 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.text(200,30, 'Five terms (30 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.text(200,36, 'Six terms (36 years)',verticalalignment='top', horizontalalignment='center',fontsize=18,\n            bbox=dict(facecolor='grey', alpha=0.5, boxstyle='round'))\nax1.grid(axis='x')\nplt.xticks(fontsize=18)\nplt.yticks(fontsize=18)\nplt.title('Distribution of tenure for members of Rajya Sabha(1952-2018)',fontsize=20)","f81c937e":"#plot Barchart showing number of representatives per state\nrep=StateCensus[StateCensus['Rajyasabha representation']>0][['State','Rajyasabha representation']]\nrep.columns=['State','rep']\n#update representation for Andhra Pradesh\nrep=rep.set_value(col='rep',value=11,index=rep[rep.State=='Andhra Pradesh'].index)\n#update Delhi NCR -> National Capital Territory of Delhi\nrep=rep.set_value(col='State',value='National Capital Territory of Delhi',index=rep[rep.State=='Delhi NCR'].index)\n#add states values - NA, Nominated, Telengana\nrep=rep.append({'State':'NA','rep':0},ignore_index=True)\nrep=rep.append({'State':'Nominated','rep':12},ignore_index=True)\nrep=rep.append({'State':'Telangana','rep':7},ignore_index=True)\nrep.sort_values(by=['State'],ascending=False,inplace=True)\n\nplt.barh(y=range(rep.shape[0]), width=rep.rep, align='center',height=0.9,color='green',alpha=0.4)\nplt.yticks(range(rep.shape[0]), list(rep.State),fontsize=30)\n#plt.gcf().set_size_inches(70,70)\nplt.axis('off')\nplt.show()","3b4497e5":"#create a copy of member name df to use as member lookup\nlkp_member_name=members_allyears.copy()","986c261c":"#Standardize the name format in member lookup to match with the name format in question and answers.\nname_formatted=[]\nfor i in range(lkp_member_name.shape[0]):\n    name,title=lkp_member_name[['NAME OF MEMBER','Title_derivedcol']].iloc[i]\n    name_split=name.replace(title,str(\",\" + title)).split(',')\n    #print(name_split,title)\n    name_formatted.append(str.strip(name_split[1] + ' ' + name_split[0]))\n\n#Add formatted name as a column to the dataframe\nlkp_member_name['Name_Formatted']=name_formatted\nlkp_member_name['Name_idx']=[str.lower(name) for name in name_formatted]\n#Set formated name as the dataframe index for easy access to member attributes\nlkp_member_name.set_index('Name_idx',inplace=True)","9468781f":"#Load session details\nsession_df=pd.read_csv('..\/input\/rajyasabha_session.csv',engine='python')\nsession_df['start_date_formatted']=pd.to_datetime(session_df.session_start_date,dayfirst=False)\nsession_df['end_date_formatted']=pd.to_datetime(session_df.session_end_date,dayfirst=False)\nsession_df.pop('session_start_date')\nsession_df.pop('session_end_date')\nsession_df.set_index('session_no',inplace=True)","21ee5a93":"#function to lookup session number\ndef get_session(df_year,df_session):\n    \n    \n    min_ans_date=np.min(df_year.answer_date_formatted)\n    max_ans_date=np.max(df_year.answer_date_formatted)\n    min_session_num=df_session.query(str('start_date_formatted<=\\'' + str(min_ans_date) + '\\'')).index.max()\n    max_session_num=df_session.query(str('end_date_formatted>=\\'' + str(max_ans_date) + '\\'')).index.min()\n    #initialize session_num as an array of min session nums of length df_year - because year 2014 has answer dates outside of the session dates range\n    session_num=[min_session_num]*df_year.shape[0]\n    print(min_ans_date,max_ans_date,min_session_num,max_session_num)\n    for i in range(df_year.shape[0]):\n        for j in range(min_session_num,max_session_num+1):\n            if session_df.start_date_formatted.loc[j]<=df_year.answer_date_formatted.iloc[i]<=session_df.end_date_formatted.loc[j]:\n                session_num[i]=j\n                break\n    return session_num","3a5d84bc":"%%time\n#Load all yearwise question and answer files\nstart_year=2009\nyears=range(start_year+1,2018)\ndf_complete=pd.read_csv(str('..\/input\/rajyasabha_questions_and_answers_' + str(start_year) + '.csv'))\ndf_complete.columns=['question', 'answer_date', 'ministry', 'question_type', 'question_no',\n       'question_by', 'question_title', 'question_description', 'answer']\ndf_complete['answer_date_formatted']=pd.to_datetime(df_complete.answer_date,dayfirst=True)\ndf_complete.drop(columns=['question','question_type','question_no','question_description','answer','answer_date'],inplace=True)\ndf_complete['session_num']=get_session(df_complete,session_df)\ndf_complete['Year']=[start_year]*df_complete.shape[0]\nfor year in years:\n    \n    filename=str('..\/input\/rajyasabha_questions_and_answers_' + str(year) + '.csv')\n    df_year=pd.read_csv(filename)\n    #print(df_year.head(1))\n    #standardizing column names as files for some years have have different column names\n    df_year.columns=['question', 'answer_date', 'ministry', 'question_type', 'question_no',\n       'question_by', 'question_title', 'question_description', 'answer']\n    df_year['answer_date_formatted']=pd.to_datetime(df_year.answer_date,dayfirst=True)\n    df_year.drop(columns=['question','question_type','question_no','question_description','answer','answer_date'],inplace=True)\n    df_year['session_num']=get_session(df_year,session_df)\n    df_year['Year']=[year]*df_year.shape[0]\n    df_complete=pd.concat([df_complete,df_year],ignore_index=True)\n    #print(year,df_year.shape[0],df_complete.shape[0])","529198db":"#Consolidate all member information in df_member_profile\ndf_member_profile=pd.DataFrame(df_complete.question_by.unique(),columns=['member_name'])\n\n#remove Names = NaN\nNaN_idx=df_member_profile[df_member_profile.member_name.isnull()].index\ndf_member_profile.drop(NaN_idx,axis=0,inplace=True)\n\n#count of questions per session\ncountby_session=df_complete.groupby(['question_by','session_num']).size()\ncountby_session_df=countby_session.reset_index().set_index('question_by')\n\nmember_state=[]\nmember_party=[]\nmember_term_start=[]\nmember_term_end=[]\nmember_session=[]\nmember_qcount=[]\nlkp_idx=lkp_member_name.index\nfor i in range(df_member_profile.shape[0]):\n    name=df_member_profile.member_name.iloc[i]\n    if str.lower(name) in lkp_idx:\n        member_state.append(np.unique(lkp_member_name.STATE.at[str.lower(name)]))\n        member_party.append(np.unique(lkp_member_name.PARTY.at[str.lower(name)]))\n        member_term_start.append(lkp_member_name.TERM_From.at[str.lower(name)]) \n        member_term_end.append(lkp_member_name.TERM_To.at[str.lower(name)]) \n        member_session.append(countby_session_df.session_num.at[name])\n        member_qcount.append(countby_session_df[0].at[name])\n\n    else:\n        member_state.append('NA')\n        member_party.append('NA')\n        member_term_start.append('NA')\n        member_term_end.append('NA')\n        member_session.append('NA')\n        member_qcount.append('NA')\n        \ndf_member_profile['State']=member_state\ndf_member_profile['Party']=member_party\ndf_member_profile['Term_start']=member_term_start\ndf_member_profile['Term_end']=member_term_end\ndf_member_profile['Session']=member_session\ndf_member_profile['Qcounts']=member_qcount\n\ndf_member_profile.set_index('member_name',inplace=True)\n#Add the member name column back into data frame for further use\ndf_member_profile['member_name']=list(df_member_profile.index)","fc65fc46":"#Lookup and add member state\nmember_state=[]\nlkp_idx=df_member_profile.index\nfor i in range(df_complete.shape[0]):\n    name=df_complete.question_by.iloc[i]\n    #member_names=df_member_profile['Name_Formatted'].unique()\n    #print(name)\n    #Some member names are not present in the lkp\n    if name in lkp_idx:\n        #members can be elected from multiple states during different terms so lookup can either return a single state or \n        #an array of states for members with multiple terms.\n        #Taking only one state value for sankey chart if multiple found\n        state_name=df_member_profile.State.at[name]\n        \n        if isinstance(state_name,np.ndarray):\n            member_state.append(state_name[0])\n        else:\n            member_state.append(state_name)\n    else:\n        member_state.append('NA')\ndf_complete['Member_State']=member_state","0625365a":"#pip install pySankey\n#https:\/\/github.com\/anazalea\/pySankey\nfrom pySankey import sankey","f6e240f0":"#plot sankey chart for all questions\nsankey_all=df_complete[['Member_State','ministry','Year']]\n#drop NaN records as Sankey cannot handle Nulls\nNaN_idx=sankey_all[sankey_all.Member_State.isnull()].index\nsankey_all.drop(NaN_idx,axis=0,inplace=True)\nNaN_idx=sankey_all[sankey_all.ministry.isnull()].index\nsankey_all.drop(NaN_idx,axis=0,inplace=True)\n#Remove dups\nministry_dups=['AGRICULTURE','CONSUMER AFFAIRS AND PUBLIC DISTRIBUTION','ENVIRONMENT AND FORESTS','SKILL DEVELOPMENT AND ENTREPRENEURSHIP','WATER RESOURCES']\nministry_replace=['AGRICULTURE AND FARMERS WELFARE','CONSUMER AFFAIRS, FOOD AND PUBLIC DISTRIBUTION','ENVIRONMENT, FOREST AND CLIMATE CHANGE','SKILL DEVELOPMENT ENTERPRENEURSHIP, YOUTH AFFAIRS','WATER RESOURCES, RIVER DEVELOPMENT AND GANGA REJUVENATION']\n\nministry_fix=sankey_all.ministry.apply(lambda x:str.strip(x))\nministry_fix=ministry_fix.apply(lambda x:' '.join(x.split('  ')))\nsankey_all.ministry=ministry_fix\n\nfor i in range(len(ministry_dups)):\n    sankey_all.loc[sankey_all.ministry==ministry_dups[i],'ministry']=ministry_replace[i]\n    \nsankey_all.sort_values(by=['Member_State','ministry'],ascending=False,inplace=True)\nsankey.sankey(sankey_all['Member_State'], sankey_all['ministry'], fontsize=40)\nplt.gcf().set_size_inches(70,70)\nplt.title('Flow of questions from State to Ministries',fontsize=70)","9b6319b0":"# import libraries for interactive plots\n#https:\/\/ipywidgets.readthedocs.io\/en\/latest\/examples\/Using%20Interact.html#interactive\nfrom ipywidgets import interact, interactive, fixed, interact_manual, FloatSlider\nimport ipywidgets as widgets","7a6735ec":"#Interactive sankey plot - user can select state or ministry to zoom in details\n#plt.gcf().set_size_inches(35,35)\nstates_sk=list(np.sort(sankey_all.Member_State.unique()))\nministry_sk=list(np.sort(sankey_all.ministry.unique()))\nx_widget = widgets.Dropdown(options=['All','By State','By Ministry'], value='All', description='Select Key:', disabled=False,)\ny_widget = widgets.Dropdown(options=['NA'], value='NA', description='Key Values:', disabled=False,)\n\nplay = widgets.Play(\n#     interval=10,\n    value=2009,\n    min=2009,\n    max=2017,\n    step=1,\n    description=\"Press play\",\n    disabled=False\n)\n\nslider = widgets.IntSlider(value=2009,min=2009,max=2017,step=1,description='Year:')\n\n\ndef update_keys(*args):\n    if x_widget.value=='All':\n        y_widget.options = 'NA'        \n    elif x_widget.value=='By Ministry':\n        y_widget.options = ministry_sk\n    else:\n        y_widget.options = states_sk\nx_widget.observe(update_keys, 'value')\n\ndef plot_sankey(*args):\n    q_year=slider.value\n    print(slider.value)\n#query_str='Member_State==\\'Maharashtra\\''\n    if x_widget.value=='All':\n        query_str=str('Year==' + str(slider.value))\n        plt_title=str('Volume of questions from all states to all Ministries for Year ' + str(slider.value))\n    elif x_widget.value=='By Ministry':\n        query_str=str('ministry==\\''+y_widget.value+'\\' & Year==' + str(slider.value))\n        plt_title=str('Volume of questions from all states to MINISTRY OF '+ y_widget.value + ' for Year ' + str(slider.value))\n    else:\n        query_str=str('Member_State==\\''+y_widget.value+'\\' & Year==' + str(slider.value))\n        plt_title=str('Volume of questions from '+ y_widget.value + ' to all Ministries for Year ' + str(slider.value))\n    select_state=sankey_all.query(query_str)[['Member_State','ministry']]\n    select_state.sort_values(by=['Member_State','ministry'],ascending=False,inplace=True)\n    #state_ordered=pd.Series(np.sort(select_state['Member_State'].unique()))\n    #ministry_ordered=pd.Series(np.sort(select_state['ministry'].unique()))\n    sankey.sankey(left=select_state['Member_State'], right=select_state['ministry'], fontsize=25)\n                  \n    plt.gcf().set_size_inches(35,35)\n    plt.title(str(plt_title),fontsize=50)\n    \nslider.observe(plot_sankey,'value')\n\ndef plot_fig(x,y,z):\n    plot_sankey()\n#widgets.jslink((play, 'value'), (slider, 'value'))\n#widgets.HBox([x_widget,y_widget,play, slider])\ninteract(plot_fig,x=x_widget, y=y_widget,z=slider);\n#display(widgets.HBox([x_widget,y_widget,play, slider]))\n","0092a951":"#Import NLP libraries from NLTK\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import wordnet as wn\nfrom nltk.corpus import sentiwordnet as swn \nfrom nltk.tag import pos_tag\nfrom nltk.stem import WordNetLemmatizer\nfrom wordcloud import WordCloud","0d866d56":"#define stop words\nstop = stopwords.words('english')\nlemmatizer = WordNetLemmatizer()","ea321186":"#Define Regex pattern to identify topics\npattern_topical_nouns = r\"\"\"\n  NP: {<NN.*|VB.*|CC|JJ.*|RP>*<IN|TO>}   # chunk determiner\/possessive, adjectives and noun\n      {<NN.*|VB.*|CC|JJ.*|RP>*<IN|TO>*<NN.*|VB.*|CC|JJ.*|RP>*}\n\"\"\"\ncp = nltk.RegexpParser(pattern_topical_nouns)","4063505b":"#define function to preprocess data\ndef nlp_preprocess(df):\n    q_token_arr=[]\n    q_token_POS=[]\n    q_token_NP=[]\n    for q in df.question_title:\n        q_token= nltk.tokenize.word_tokenize(q,preserve_line=False)\n        #remove stop words\n        #q_tokenized=[str(word) for word in q_token if str(word).lower() not in stop]\n        q_token=[lemmatizer.lemmatize(q_token[i].lower()) for i in range(len(q_token))]\n        q_pos=nltk.pos_tag(q_token) \n        q_token_arr.append(q_token)\n        q_token_POS.append(q_pos)\n        q_token_NP.append(cp.parse(q_pos))\n    df['q_token']=q_token_arr\n    df['q_pos']=q_token_POS\n    df['q_pos_NP']=q_token_NP\n    return df","66535e95":"#define function to extract topics\ndef extract_topics(df):\n    w=[]\n    tag_dict={}\n    for i in range(df.shape[0]):\n        tags=[]\n        t = list(df.q_pos_NP[i].subtrees(filter=lambda x: x.label()=='NP'))\n            #print(t[len(t)-2],t[len(t)-1])\n        \n        if len(t)==0:\n            tags.append('NA')\n        elif len(t)>1:\n            for j in [2,1]:\n                tags.append([word for word,pos in t[len(t)-j] if pos in['NNP','NNS','NN']])\n        else:\n            #print(t)\n            tags.append([word for word,pos in t[len(t)-1] if pos in['NNP','NNS','NN']])\n        tag_dict[df['index'][i]]=tags\n        w.append(tags)\n    flattened_list = [z for x in w for y in x for z in y]\n    return flattened_list,tag_dict","61fac0ba":"#define function to generate word frequencies\ndef dict_bag_of_words(flattened_list):\n    dict_bag_of_words={}\n    for idx in flattened_list:\n        if idx in dict_bag_of_words.keys():\n            dict_bag_of_words[idx]+=1 \n        else:\n            dict_bag_of_words[idx]=1\n    return dict_bag_of_words","1973c69a":"#define functions to plot word frequencies as bar chart\ndef plot_word_freq(D,top_count,title_word):\n    if top_count==None:\n        top_count=25\n        \n    df=pd.DataFrame.from_dict(D,orient='index',columns=['Counts'])\n    df.sort_values(by=['Counts'],ascending=False,inplace=True)\n    df_top=df.head(top_count)\n    df_top.sort_index(ascending=False,inplace=True)\n    fig = plt.figure(figsize=(10,7))\n    ax = fig.add_subplot(111)\n    my_range=range(1,len(df_top.index)+1)\n    plt.barh(my_range, width=df_top.Counts, height=0.4, color='blue',alpha=0.3)\n    plt.plot(df_top.Counts, my_range, \"o\",color='blue')\n    plt.yticks(my_range, df_top.index)\n    plt.grid(color='black',axis='x',linestyle = ':')\n    plt.title('Word Frequencies for top ' + str(top_count) + ' words for '+ str(title_word))\n    plt.show()","a08ad9c0":"#Create dataframe to consolidate word frequencies by ministry\nministry=df_complete.ministry.unique()\nyears=list(df_complete.Year.unique())\nlevel_ministry=np.repeat(ministry,len(years),axis=0)\nlevel_year=np.array(years*len(ministry))\ndf_ministry_wc=pd.DataFrame(level_ministry,columns=['Ministry'])\ndf_ministry_wc['Year']=level_year\nNaN_idx=df_ministry_wc[df_ministry_wc.Ministry.isnull()].index\ndf_ministry_wc.drop(NaN_idx,axis=0,inplace=True)","01cdcdd6":"%%time\n#Compute word frequencies by ministry\n\n#df_temp.set_index('question_by',inplace=True)\n\ntags_wc=[]\n\nfor i in range(df_ministry_wc.shape[0]):\n    tags_dict={}\n    ministry=df_ministry_wc.Ministry.iloc[i]\n    year=str(df_ministry_wc.Year.iloc[i])\n    query=str('ministry==\\''+ ministry +'\\' & Year==' + year)\n    q_df=df_complete.query(query).question_title.reset_index()\n    q_df_processed=nlp_preprocess(q_df)\n    flattened_list,tags_dict_inc=extract_topics(q_df_processed)\n    \n    if len(flattened_list)>0:\n        tags_dict.update(tags_dict_inc)\n        dict_word_cnt=dict_bag_of_words(flattened_list)\n        #wc = WordCloud().generate_from_frequencies(dict_word_cnt)\n        tags_wc.append(dict_word_cnt)\n    else :\n        #wc=WordCloud().generate_from_frequencies({'No Data':100})\n        tags_wc.append({'No Data':0})\ndf_ministry_wc['word_cloud']=tags_wc","de358e43":"#plot word chart for top 10 question topics per ministry\nstyle.use('dark_background')\nfig = plt.figure(figsize=(50,10))\nax = fig.add_subplot(1, 1, 1)\nplt.scatter([0,3000],[0,3000],alpha=0.1)\nh_offset=0\nj=0\ncmap = plt.cm.get_cmap(\"tab20\", 11)\nfor year in range(2010,2018):\n    v_offset=100    \n    query=str('Ministry==\\''+ str('FINANCE') +'\\' & Year==' + str(year))\n    idx=df_ministry_wc.query(query).index[0]\n    #print(year)\n    #d=df_ministry_wc.word_cloud.at[idx]\n    df=pd.DataFrame.from_dict(df_ministry_wc.word_cloud.at[idx],orient='index',columns=['Counts'])\n    df.sort_values(by=['Counts'],ascending=False,inplace=True)\n    df_top=df.head(10)\n    df_top.sort_values(by=['Counts'],ascending=False,inplace=True)\n    df_top.reset_index(inplace=True)\n    df_top.columns=['Word','Counts']\n    j+=1\n    for i in range(df_top.shape[0]):\n        t=np.random.randint(1)\n        count=df_top.Counts.at[i]\n        if count>70:\n            count=70\n        elif count<15:\n            count=15\n        ax.text(h_offset+count\/2,v_offset+count, df_top.Word.at[i],verticalalignment='top', horizontalalignment='center',\n                fontsize=count,color=cmap(j))\n        v_offset+=300\n    h_offset+=400\nplt.axis('off')","2a7c95f1":"#change the plotting style\nstyle.use('seaborn-white')","2ba55048":"%%time\n#df_temp.set_index('question_by',inplace=True)\ntags_dict={}\ntags_wc=[]\nfor i in range(df_member_profile.shape[0]):\n    name=df_member_profile.member_name.iloc[i]\n    query=str('question_by==\\''+ name +'\\'')\n    q_df=df_complete.query(query).question_title.reset_index()\n    q_df_processed=nlp_preprocess(q_df)\n    flattened_list,tags_dict_inc=extract_topics(q_df_processed)\n    tags_dict.update(tags_dict_inc)\n    dict_word_cnt=dict_bag_of_words(flattened_list)\n    #wc = WordCloud().generate_from_frequencies(dict_word_cnt)\n    tags_wc.append(dict_word_cnt)\ndf_member_profile['word_cloud']=tags_wc","f553f668":"#Interactive member profile\nstates=np.unique(lkp_member_name.STATE)\nstates[-1]='All States'\nmembers=np.unique(lkp_member_name.Name_Formatted)\nprint('Narrow down the search result for member names by selecting the state first')\nx_widget = widgets.Dropdown(options=states, value='All States', description='State:', disabled=False,)\ny_widget = widgets.Dropdown(options=members, value=members[0], description='Member:', disabled=False,)\n\ndef update_names(*args):\n    if x_widget.value!='All States':\n        query_str=str('STATE==\\''+x_widget.value+'\\'')\n        y_widget.options = np.unique(lkp_member_name.query(query_str).Name_Formatted)\n    else:\n        y_widget.options=members\n        \nx_widget.observe(update_names, 'value')\n\ndef printer(x, y):\n    if y in df_member_profile.index:\n        print('Member Profile')\n        print('Name: ',y)\n        print('State Represented: ',df_member_profile.State.at[y])\n        print('Political Party: ',df_member_profile.Party.at[y])\n        \n        if isinstance(df_member_profile.Term_start.at[y],np.ndarray):\n            for i in range(len(df_member_profile.Term_start.at[y])):\n                print('Term ',i+1,': ',df_member_profile.Term_start.at[y][i],'-',df_member_profile.Term_end.at[y][i])\n        else:\n            print('Term 1: ',df_member_profile.Term_start.at[y],'-',df_member_profile.Term_end.at[y])\n        #print('Trend of questions asked per session:')\n        plt.bar(df_member_profile.Session.at[y], height=df_member_profile.Qcounts.at[y], width=0.3, align='center', edgecolor='lightgreen', \n            color='blue', alpha = 0.8)\n        plt.xticks(df_member_profile.Session.at[y])\n        plt.title('Trend of questions asked per session')\n        #plt.yticks(np.arange(0, 350, 50))\n        plt.show()\n        #print('Word frequency of most common topics raised by this member: ')\n        plot_word_freq(df_member_profile.word_cloud.at[y],25,y)\n        \n    else:\n        print('Profile not found.')\n        \ninteract_manual(printer,x=x_widget, y=y_widget);","3dd51f5b":"## Project abstract:\nIndia is the largest democracy in the world and has a bicameral legislature consisting of an upper house called \u2018Rajya Sabha\u2019 which represent the states of the Indian federation and the lower house called \u2018Lok Sabha\u2019 which represent the people of India as whole. [1] These two houses are the heart of Indian legislature and all decisions pertaining to the present and future of India are made here. During its regular working sessions, each house discusses and debates on a variety of topics \u2013 some trivial while some are of critical national importance. At the start of each session, there is a questions hour where members can ask questions to cabinet ministers on topics related to national interest. Analyzing these questions and their answers can help extract key themes that shaped the country over the past few years. \n","1e0f0c48":"### Visualizing number of seats by State:\n#### Description: \nThe Indian Constitution has allotted fixed number of seats per state and union territory in proportion to the population residing in the state. Only the Union Territories of Pondicherry and NCR Delhi are allocated membership, while the other five are not (visualized by red \u2018X\u2019 in the map).\n#### Why this visualization type:\nProportional symbol map was chosen for this \nVisualization because it accurately encodes the\nnumber of seats in relation to the physical location \nof the state. In addition to showing location and \nmagnitude, the visualization is also able to clearly show which Union Territories do not have representation. Even though the map only outlines India\u2019s international border, most of the audience can recognize states by their location.\n#### Data Collection: \nThe data for this visualization has been collected from 2011 census from the website https:\/\/www.census2011.co.in\/states.php.","782acbb2":"## Future Work:\nThe Rajya Sabha archives present tremendous opportunity for data visualization. This project has just scratched the surface and will need further refinement in improving the accuracy as well as scale of data.\nSpecifically, future work can be planned in the below areas -\n### Improving accuracy of Topic Extraction algorithm - \nThe algorithm used by this project is very basic and needs to be enhanced to capture the question topics accurately. Advanced NLP and NLU libraries can be used to identify entities and relations in the question titles.\n\n### Sentiment Analysis and Topic Categorization - \nBroadly, the questions can be categorized into three categories - to get more information, to hold minister accountable and to bring ministry's notice to some topic. Being able to identify the sentiment and category of question can lead to new insights. \n\n### Scaling up to accomodate entire Q&A archives - \nThis project only focuses on the question and answers data from 2009-2018. It can be scaled up to source all the available data from 1952 till current. \n\n### Interactive visualizations -\nAdding more interactive capabilities like ability to get details by hovering over the visualization, filtering and aggregations will help create more engaging visualizations. ","871a5393":"#### Insights: \nThe top three topics don\u2019t change much over the years for any of the ministries. Overall, the topics visualized are reflective of reality and conform to our expectations as seen by the presence of the words \u2018demonitization\u2019 and \u2018gst\u2019 for Finance ministry in 2017 as both were hot topics in 2017.\n#### Enhancements:\n1. The NLP transformation done to extract topics from question titles can be enhanced to extract more meaningful tag words that are more reflective of the topic.\n2. Sentiment Analysis can be coupled with this chart to plot the sentiment of the question using color encoding.\n","b92cc0f4":"### Interactively visualizing volume of questions by Ministry or State (2010-2018):\n#### Description: \nThe above visualization gives a summarized view of how the questions were distributed by State and Ministry. To dig deeper, this interactive visualization allows users to select one Ministry or State and view how the volume of questions changes by year\n#### Why this visualization type:\nJupyter Notebook provides useful widgets to add interactivity to plots. This visualization was created to enable further analysis on the question volume between states and ministries by allowing users to select specific states and ministries. Additional ability to filter by year was provided as a slider bar. ","ed7d412e":"#### Insights: \nThe Indian Constitution has limited the number of years a member can serve on Rajya Sabha in one term to 6 years. There is no restriction on the number of times a member can be reelected to the House. This plot gives good insights on distribution and magnitude of tenures for all its 3000+ members since inception. Majority of the members have served just 1 term and did not get reelected. It is interesting to see a handful of members having served more than five terms which equate to 30+ years as Member of Parliament. It may be worth finding more details about their contributions and success stories. \n","10e80981":"## Visualizations and Insights:\n### Visualizing the current (2018) composition of Rajya Sabha:\n#### Description: \nRajya Sabha, also called the Council of States, has 245 seats for representatives of the States and Union Territories of Republic of India. This custom designed visualization shows the composition of the 2018 Rajya Sabha and the distribution of seats along the dimensions of gender, special responsibilities and political affiliations. Each point in the plot represents a seat.\n#### Why this visualization type:\nBar chart and donut chart were considered before finalizing on this visualization type. Both bar and donut charts looked cluttered and mundane and were unable to present the idea effectively. This custom scatter plot was designed to mimic the arrangement of a circular assembly with each point in the plot representing a member. Color encoding was used to highlight different topics. The size and position of the points was maintained so that all five plots can be animated as a GIF.","af93ab49":"#### Data Collection: \nThe data for this visualization has been scraped from the Rajya Sabha website from the section 'Sitting members'. http:\/\/164.100.47.5\/Newmembers\/memberlist.aspx. The data looks as below -","aa7a0bce":"## Analysis of existing visualizations:\nI will be referencing the work done by my fellow students for the visualizations [4] created for IVMOOC course as part of MS in Data Science program of Indiana University, Bloomington in spring 2018. They had similar objective of visualizing government meetings data from the city council for Bloomington, Indiana. Their project report has some good visualizations that I plan to replicate in this project \u2013 for instance the use of Sankey graph to plot the flow of applications through the legislative process can be reused. They have also used network visualization to plot interdependencies between words used in the applications. It may be applicable for this project as well.\n\nOn the downside, the dataset that was used for their project is considerably smaller and has less variance in features than what this project has.\n","703a5e8b":"### Visualizing Distribution of Tenure (1952-2018):\n#### Description: \nThis visualization plots the distribution of tenure of all members of Rajya Sabha highlighting the values for six terms.\n#### Why this visualization type:\nThe intent of this visualization was to plot the distribution of member tenure. The most obvious choice to use is the histogram. This plot is a histogram plotted horizontally with bin size equal to 36. The horizontal orientation was more visually effective in combination to the tags than vertical orientation. \n","6bda219b":"#### Insights: \n1. The visualization confirms the logical hypothesis that the volume of questions is roughly proportional to the number of members representing a state. Some exceptions include the state of Uttar Pradesh which has 31 members but has approximately same question volume as the next 2 states with highest representation namely \u2013 Maharashtra (19) and Tamil Nadu (18).\n2. The data has members whose states are unavailable and are represented under the state name \u2018NA\u2019. \n3. The top five ministries that received questions are the Ministries of Finance, Railways, Home Affairs, Human Resource Development and Health and Family Welfare. The Ministries of Defense, Space, Atomic Energy have received less than expected questions. \n\n#### Enhancements:\n1. The top five ministries that were the focus of majority of questions in this decade show that the country\u2019s focus is still on building essential infrastructure and may indicate the \u2018Developing\u2019 phase of India\u2019s journey. How would this change when India becomes a \u2018Developed\u2019 country? Further analysis is needed to find if there is a correlation between the top 5 ministries and the development index of the country.\n2. Geographically, India can be divided into 6 regions \u2013 North, East ,West, South, Central and North East. Plotting the above graph by encoding these geographical regions with color can lead to further insights on regional priorities.\n","d73757c7":"### Visualizing top 10 question topics by year (2010-2018):\n#### Description: \nThis custom built stacked word chart plots the word frequency of top 10 question topics for three Ministries from 2010 to 2017. The word size is proportional to the word frequency with the top-ranking words at the bottom and low-ranking words at the top. Python NLTK library is used to perform Natural Language Processing on the questions to extract tag words for question topics\n#### Why this visualization type:\nWord cloud was the method of choice for this visualization. However, the outcome was cluttered and did not allow comparing the trend of topics over multiple dimensions. This stacked word chart was custom built using the concepts of bar chart and scatter plot by managing horizontal and vertical offsets between words.","6e38910d":"#### Insights: \n1. When India became independent in 1947, it was divided into 500+ princely states and provinces. Rajya Sabha started operating from 1952 and has representation from 29 states and provinces. The States Reorganization Act of 1956 helped restructure and consolidate the states boundaries giving rise to new states and union territories. Post 1970, the states that exist today started to form slowly. The newest state of Telangana was formed in 2014.\n\n2. The circular bar chart shows a concise picture of the geographical evolution \u2013 the period of 1952 \u2013 1970 sees a general increase in the number of represented states from 29 in 1953 to 34 in 1958 which then decreases to 26 in 1969. 1970 onwards, the number of states has increased steadily from 27 in 1975 to 31 in 2013.\n","01514923":"#### Insights: \n1. Members can be elected from multiple states in different terms over their tenure in Rajya Sabha.\n2. Members often change political party affiliations to get elected or can be nominated by the President.\n3. One term in Rajya Sabha is for 6 years and members can serve more than 1 term. This member in the example is the highest tenured member of Rajya Sabha and is serving his 6th term which equates to 36 years as a Member of Parliament.\n\n#### Enhancements:\nThough this visualization provides good insights, it need enhancement to beautify presentation. Further details about the member like educational background, profile photo, Ministry handled etc. can also be added to enhance this visualization.","af842b8b":"#### Insights: \nIndia has a wide variety of political parties - regional, state wide and national. It is interesting to see that only half of the political parties are being represented in the current Rajya Sabha. More analysis needs to be performed on what happened to the 31 parties that are no longer represented - did they merge with others to form new parties or did they cease to exist?","c83f1614":"### Visualizing flow of questions between State and Ministries (2010-2018):\n#### Description: \nThis visualization shows the flow of all the 89,000 questions from State to Ministry that were asked in this decade. It is complemented by a bar chart that plots the proportion of members representing each state and offers a good visual comparison to the proportion of question volume generated by that state\n#### Why this visualization type:\nSankey chart was chosen for this visualization because it perfectly encodes the magnitude and direction of flow from source to target. In addition to this, it is visually pleasing and does not overwhelm the audience with the scale of underlying data. This visualization plots the flow of 89K questions from 32 states to over 50 ministries. For such a scale, the chart type does a very good job. To complement the insights provided by Sankey chart, a simple bar chart showing the number of representatives allocated per state is provided for visual correlation between the number of representatives and the question volume.","93bf8551":"# Visualizing topics in Indian Parliamentary Discussions\n##### Salil Harsulkar | Indiana University | samihars@iu.edu\n##### Visualization Project for MS in Data Science, Course I590-8433","6c9577a5":"### Visualizing India\u2019s Geographical Evolution (1952-2018):\n#### Description: \nThis visualization encoded to look like the Indian National Flag plots the representation of States and Union Territories in Rajya Sabha on the timeline from 1952 \u2013 2018. The states encoded in orange color have a continuous representation across the entire timescale. The states in gray color no longer exist while the ones in green color were formed after 1952. The circular bar chart in the center shows the count of states represented in a 3-year time slots between 1952 \u2013 2016.\n#### Why this visualization type:\nThe Gantt chart is the most suitable chart to plot time series. This visualization plots the timelines of representation of states in Rajya Sabha with start and end years. This chart also enabled me to customize it according to the underlying context of India. \n#### Data Collection: \nThe data for this visualization has been scraped from the Rajya Sabha website from the section Members->Former members located at http:\/\/164.100.47.5\/Newmembers\/mpterms.aspx.","4d56e392":"### Interactive Member Profile:\n#### Description: \nThis interactive visualization allows users to view demographic information and key performance metrics for any Member of Parliament. The details include Name, States represented, Political affiliations, Tenure and Term dates, Question count per session (2010 onwards) and top 25 topics for questions asked (2010 onwards). Members are categorized by most recent state represented so selecting the state filter first narrows down the Member list significantly.","0a648e4c":"## Motivation:\nA democratic country like India can only be successful if its people actively participate in the politics and decision-making process for their country. For the majority population, the news media is the primary source of political information. Though news media is effective in its reach, it is not free from bias. \nRajya Sabha publishes records of its debates, discussions and questions on its website. There is currently no platform available in India that can source data from the parliamentary publications, transform it and present it to the people in a way that is easy to comprehend. \nThe other constraint is that of language. India is a multi-lingual country with 22 official languages and close to 150 languages that have a sizable population. The legislative verbiage is mainly published in English and Hindi and is too complicated for a layman to understand. Crisp visualizations will help in making the archives more accessible to the general public.\nWith the power of machine learning, natural language processing and effective data visualization, this project will attempt to provide a solution to these problems.\n","83c2d8f6":"## Project Aim:\nThe main aim of this project is to perform exploratory data visualization on the vast archives of parliamentary publications publicly available on the Rajya Sabha website with the intent to uncover interesting insights about the composition, transformation and functioning of the Upper House. This project also aims at performing topical analysis of questions asked on the floor of the House and highlight any trends in discussion topics by State and by Ministry over the past decade.\n","8c300b45":"### Visualizing Evolution of Political Parties (1952-2018):\n#### Description: \nThis visualization plots the political parties represented in Rajya Sabha from 1952 to 2018."}}