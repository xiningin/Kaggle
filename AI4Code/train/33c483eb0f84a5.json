{"cell_type":{"ec0bf35c":"code","e5a7527d":"code","5dc6ab9d":"code","a6af381e":"code","f3d50945":"code","300e0bb9":"code","4ca28e1d":"code","7d1b4875":"code","1b561941":"code","611e9170":"code","b78bea3a":"code","b0403334":"code","6ee2e5be":"code","8e33c148":"code","7efd61c9":"code","1b93b749":"code","d275d3f6":"code","01faead4":"code","cbb286fe":"code","1ad5ac92":"code","a56548f8":"markdown","b15dfb2c":"markdown"},"source":{"ec0bf35c":"!pip install efficientnet","e5a7527d":"import pandas as pd\nimport numpy as np\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","5dc6ab9d":"PATH = '..\/input\/losers' \ntrain_df = pd.read_csv('..\/input\/losers\/train.csv',dtype={'category':str})\ntest_df = pd.read_csv('..\/input\/losers\/test.csv')\n\ntrain_df['filename'] = '..\/input\/losers\/train\/train\/'+train_df['category']+'\/'+ train_df['filename']\ntest_df['filename'] = '..\/input\/losers\/test\/test\/'+ test_df['filename']","a6af381e":"img = cv2.imread(train_df['filename'][1])\nplt.imshow(img)","f3d50945":"train, val = train_test_split(train_df, test_size = 0.2)","300e0bb9":"len(train_df),len(train),len(val)","4ca28e1d":"train.head()","7d1b4875":"from keras_preprocessing.image import ImageDataGenerator\n\ntrain_data_gen= ImageDataGenerator(rescale=1\/255)","1b561941":"IMG_SIZE=300\nBATCH_SIZE=16","611e9170":"train_generator=train_data_gen.flow_from_dataframe(train,directory=None,\n                                                      target_size=(IMG_SIZE,IMG_SIZE),\n                                                      x_col=\"filename\",\n                                                      y_col='category',\n                                                      class_mode='categorical',\n                                                      shuffle=False,\n                                                        subset='training',\n                                                      batch_size=BATCH_SIZE)","b78bea3a":"val_generator=train_data_gen.flow_from_dataframe(val,directory=None,\n                                                      target_size=(IMG_SIZE,IMG_SIZE),\n                                                      x_col=\"filename\",\n                                                      y_col='category',\n                                                      class_mode='categorical',\n                                                      shuffle=False,\n                                                      batch_size=BATCH_SIZE,\n                                                  )","b0403334":"x,y = train_generator.next()\nfor i in range(0,3):\n    image = x[i]\n    label = y[i]\n    print (label)\n    plt.imshow(image)\n    plt.show()","6ee2e5be":"from keras.models import Sequential,Model\nfrom keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPool2D, BatchNormalization,Input,GlobalAveragePooling2D,GlobalMaxPooling2D,concatenate\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.callbacks import ReduceLROnPlateau\nimport efficientnet.keras as efn \nfrom sklearn.metrics import accuracy_score,f1_score,roc_auc_score\nimport keras","8e33c148":"\nmodel =efn.EfficientNetB3(weights = 'imagenet', include_top=False, input_shape = (IMG_SIZE,IMG_SIZE,3))","7efd61c9":"x = model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dense(64, activation=\"relu\")(x)\npredictions = Dense(42, activation=\"softmax\")(x)\n\nmodel = Model(inputs=model.input, outputs=predictions)","1b93b749":"model.summary()","d275d3f6":"\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","01faead4":"results = model.fit_generator(train_generator,epochs=25,\n                              steps_per_epoch=train_generator.n\/BATCH_SIZE,\n                              validation_data=val_generator,\n                             validation_steps=val_generator.n\/BATCH_SIZE,\n                              callbacks=[ReduceLROnPlateau(monitor='val_loss', factor=0.3,patience=3, min_lr=0.0001)])","cbb286fe":"model.save_weights('model_weights.h5')","1ad5ac92":"import matplotlib.pyplot as plt\n\nplt.plot(results.history['loss'])\nplt.plot(results.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a56548f8":"## Training Model","b15dfb2c":"## Image Data Generator"}}