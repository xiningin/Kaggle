{"cell_type":{"8ff693b6":"code","3bd559e5":"code","73110d60":"code","6a37435a":"code","dc1069eb":"code","a6be30fa":"code","24caa61d":"code","84017405":"code","7b141a11":"code","6123ebe9":"code","2ca31960":"code","bd5805b3":"code","e93438b7":"code","f56c53c2":"code","9d6048b3":"code","0736573b":"code","ca144c07":"code","3bd2d3e0":"code","2c3fd985":"code","c5e0908e":"code","5d206156":"code","8d23698e":"code","8c7e5829":"code","dfb22e94":"code","8eece1d4":"code","40bf6617":"code","8991f7d2":"code","4e3bf102":"code","50a98967":"code","cba5d101":"code","2d78a586":"code","13c26431":"code","b3edcbea":"code","37a1a2e9":"code","4fb0e349":"code","f22ee4c7":"code","000526ea":"code","ce30ac21":"code","144ebb58":"code","dec4b335":"code","7f206c53":"code","55cdd4ba":"code","181f9207":"code","133b2243":"code","1e4e249b":"code","ea6f9006":"code","a1a2641f":"code","d4c97b87":"code","c744c7d5":"code","809a65e3":"code","8462bbd8":"code","01e61efa":"code","fd062c0c":"code","0a25922d":"code","749d23d3":"code","fe55217d":"code","cdd6b021":"code","b22c88aa":"code","1b908a80":"code","907f137c":"code","dd301569":"code","b5f7e0cc":"code","804d82f0":"code","550896ad":"code","d1a3bac2":"code","41c9008f":"code","c1f70738":"code","8771ade5":"markdown","b99b7fb6":"markdown","c97a11d9":"markdown","ec57ed7d":"markdown"},"source":{"8ff693b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bd559e5":"train = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/train.csv')\ntrain.head()","73110d60":"data = train[train['center_id']==55]\ndata = data[data['meal_id'] == 1885]","6a37435a":"data","dc1069eb":"data.info()","a6be30fa":"corrmat = data.corr()","24caa61d":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nnum_correlation = data.select_dtypes(exclude='object').corr()\nplt.figure(figsize=(10,8))\nplt.title('High Correlation')\nsns.heatmap(num_correlation > 0.4, annot=True, square=True)\n\n","84017405":"#saleprice correlation matrix\nk = 9 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'num_orders')['num_orders'].index\ncm = np.corrcoef(data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 9}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","7b141a11":"sns.distplot(data['num_orders'])","6123ebe9":"data['num_orders'].plot()","2ca31960":"data['num_orders'].skew()","bd5805b3":"sns.boxplot(['num_orders'], data=data)","e93438b7":"import numpy as np\nt = np.log1p(data['num_orders'])\nt.plot()","f56c53c2":"sns.boxplot(t)","9d6048b3":"data['diff'] = data['base_price']- data['checkout_price']","0736573b":"data","ca144c07":"# we will take  homepage_featured,  diff, num order\n# data.drop(columns=['id','week'])\n\nx = data[['homepage_featured','diff','num_orders']]\nx = x.reset_index()","3bd2d3e0":"a = x['num_orders'].quantile(0.98)\na","2c3fd985":"# x = x[x['num_orders']<a]\n","c5e0908e":"sns.boxplot(x['num_orders'])","5d206156":"np.log1p(x['num_orders']).plot()","8d23698e":"# x['num_orders'] = np.log1p(x['num_orders'])\n# x","8c7e5829":"x.drop(columns='index',inplace=True)","dfb22e94":"# lets partition data\n\nx_train = x.drop(columns='num_orders')\ny_train = x['num_orders']\n","8eece1d4":"X_train = x_train.iloc[:138,:]\nX_test = x_train.iloc[138:,:]\nY_train =  y_train.iloc[:138]\nY_test = y_train.iloc[138:]","40bf6617":"print(len(X_test))\nprint(len(Y_test))","8991f7d2":"Y_test","4e3bf102":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate =0.3,\n eval_metric='rmse',\n    n_estimators=5000,\n  \n  \n )\n#model.fit(X_train, y_train)\nmodel_2.fit(X_train, Y_train, eval_metric='rmse', \n          eval_set=[(X_test, Y_test)], early_stopping_rounds=1000, verbose=100)","50a98967":"model =XGBRegressor(\n learning_rate =0.001,\n    n_estimators=2)\n  ","cba5d101":"model.fit(X_train,Y_train)","2d78a586":"preds = model.predict(x_train)","13c26431":"preds","b3edcbea":"# preds = np.exp(preds)\n","37a1a2e9":"len(preds)","4fb0e349":"# true_value = np.exp(x['num_orders'])\n# true_value","f22ee4c7":"plt.plot(x['num_orders'])\nplt.plot(preds, color='r')","000526ea":"x","ce30ac21":"x['Date'] = pd.date_range('2015-01-01', periods=145, freq='W')\nx","144ebb58":"from fbprophet import Prophet","dec4b335":"prophet_model = x[['Date','num_orders']]\nprophet_model =prophet_model.rename(columns={'Date':'ds',\n                             'num_orders':'y'})\nprophet_model","7f206c53":"m = Prophet(changepoint_prior_scale=0.001)\nm.fit(prophet_model)\n","55cdd4ba":"future = m.make_future_dataframe(periods=10)\n","181f9207":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","133b2243":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","1e4e249b":"plt.figure(figsize=(25,5))\nplt.plot(x['num_orders'])\nplt.plot(forecast['yhat'], color='r')","ea6f9006":"x","a1a2641f":"df = x[['Date','num_orders']]\ndf = df.set_index(['Date'])\ndf","d4c97b87":"rolmean = df.rolling(window=6).mean()\nrolstd = df.rolling(window=6).std()","c744c7d5":"plt.figure(figsize=(25,5))\nplt.plot(df, color='blue', label='original cases')\nplt.plot(rolmean, color='red', label='rolling mean')\nplt.plot(rolstd, color='black', label='rolling standard deviation')\nplt.legend(loc='best')\nplt.show()","809a65e3":"from statsmodels.tsa.stattools import adfuller\ndef test(data):\n    rolmean = data.rolling(window=2).mean()\n    rolstd = data.rolling(window=2).std()\n    plt.figure(figsize=(25,5))\n    plt.plot(data, color='blue', label='original cases')\n    plt.plot(rolmean, color='red', label='rolling mean')\n    plt.plot(rolstd, color='black', label='rolling standard deviation')\n    plt.legend(loc='best')\n    plt.show()\n    \n    dftest = adfuller(data['num_orders'], autolag = 't-stat')\n    dfoutput = pd.Series(dftest[0:4], index=['test statitics','p_value','lags used','number of observations'])\n    for key,value in dftest[4].items():\n        dfoutput['critcal value (%s)'%key] = value\n        \n    print(dfoutput)","8462bbd8":"test(df)","01e61efa":"df_log = np.log(df)\ntest(df_log)","fd062c0c":"movingaverage = df_log.rolling(window=4).mean()\n\ndf_log_minus = df_log - movingaverage\ndf_log_minus.dropna(inplace=True)\ndf_log_minus.head(12)","0a25922d":"test(df_log_minus)","749d23d3":"from statsmodels.tsa.stattools import acf, pacf\n\nlag_acf = acf(df_log_minus, nlags=50)\nlag_pacf = pacf(df_log_minus, nlags=20, method='ols')\n\nplt.figure(figsize=(10,8))\n#plot acf\nplt.subplot(211)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.title('ACF')\nplt.legend(loc='best')\n\n#plot pacf\nplt.subplot(212)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.title('PACF')\nplt.legend(loc='best')","fe55217d":"import warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(df_log, order=(2,1,1))\nresult = model.fit(disp=-1)\nplt.figure(figsize=(10,8))\nplt.plot(df_log_minus)\nplt.plot(result.fittedvalues, color='r')\nplt.title('RSS %-4F'% sum((result.fittedvalues- df_log_minus['num_orders'])**2))","cdd6b021":"result.fittedvalues","b22c88aa":"pred_arima_diff = pd.Series(result.fittedvalues, copy=True)\npred_arima_diff","1b908a80":"pred_arima_diff_cumsum = pred_arima_diff.cumsum()\npred_arima_diff_cumsum.tail()","907f137c":"prediction = pd.Series(df_log['num_orders'].iloc[0], index=df_log.index)\nprediction = prediction.add(pred_arima_diff_cumsum, fill_value=0)\nprediction.head()","dd301569":"prediction = np.exp(prediction)\nprediction = prediction.reset_index()\nprediction.drop(columns='Date', inplace=True)\n\n# prediction = pd.DataFrame(prediction)","b5f7e0cc":"prediction.plot()\nx['num_orders'].plot()\n","804d82f0":"forecast['yhat']","550896ad":"# a = pd.DataFrame()\nb = (forecast['yhat']) ","d1a3bac2":"b[0]","41c9008f":"plt.figure(figsize=(25,5))\nplt.plot(x['num_orders'])\nplt.plot(b, color='r')","c1f70738":"result.plot_predict(1,155)\nplt.figure(figsize=(10,8))","8771ade5":"we will take  homepage_featured,  diff, num order","b99b7fb6":"# normalization","c97a11d9":"# Arima","ec57ed7d":"# Prohpet model"}}