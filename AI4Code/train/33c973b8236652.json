{"cell_type":{"5610aa07":"code","8b337b4d":"code","a0f07673":"code","35201e28":"code","a9f318c5":"code","8dfede5d":"code","2008fb87":"code","f3a410fd":"code","a8a60419":"code","dbcfac5d":"code","b2ed660e":"code","8e7f333d":"code","b38f597b":"code","1b34e8eb":"code","8f6e5aa9":"code","ac518b5f":"markdown","82bb0429":"markdown","f7d156f5":"markdown","e54adfca":"markdown","b8329dc9":"markdown","a757e271":"markdown","aafdf7c2":"markdown"},"source":{"5610aa07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates as md\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ncf.set_config_file(offline=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b337b4d":"df_meta_BDG1 = pd.read_csv('\/kaggle\/input\/building-data-genome-project-v1\/meta_open.csv').set_index('uid')\ndf_meta_BDG1['dataend'] = pd.to_datetime(df_meta_BDG1['dataend'], dayfirst = True)\ndf_meta_BDG1['datastart'] = pd.to_datetime(df_meta_BDG1['datastart'], dayfirst = True)\ndf_meta_BDG1","a0f07673":"df_powerMeter_BDG1 = pd.read_csv('\/kaggle\/input\/building-data-genome-project-v1\/temp_open_utc_complete.csv', index_col='timestamp', parse_dates=True)\ndf_powerMeter_BDG1.index = df_powerMeter_BDG1.index.tz_localize(None)\ndf_powerMeter_BDG1","35201e28":"df_powerMeter_BDG1_align = pd.DataFrame()\nfor col in df_powerMeter_BDG1.columns:\n    datastart = df_meta_BDG1.loc[col, 'datastart']\n    dataend = df_meta_BDG1.loc[col, 'dataend']\n    df_temp = df_powerMeter_BDG1[col].loc[datastart:dataend].reset_index(drop=True)\n    df_powerMeter_BDG1_align = pd.concat([df_powerMeter_BDG1_align, df_temp], axis=1)\n    \ndf_powerMeter_BDG1_align","a9f318c5":"df_powerMeter_BDG2 = pd.read_csv('\/kaggle\/input\/buildingdatagenomeproject2\/electricity_cleaned.csv')\ndf_powerMeter_BDG2['timestamp'] = pd.to_datetime(df_powerMeter_BDG2['timestamp'])\ndf_powerMeter_BDG2 = df_powerMeter_BDG2.set_index('timestamp')\ndf_powerMeter_BDG2","8dfede5d":"df_power_meter = pd.concat([df_powerMeter_BDG2.loc[:'2016-12'].reset_index(drop=True), df_powerMeter_BDG1_align.reset_index(drop=True)],axis=1)\ndf_power_meter.index = df_powerMeter_BDG2.loc[:'2016-12'].index\ndf_power_meter","2008fb87":"df_small_noise = df_power_meter.loc[:'2016-12'].copy()\ndf_small_noise = df_small_noise.fillna(method='ffill').fillna(method='bfill')\ndf_small_noise.iloc[:,:5].iplot()","f3a410fd":"df_daily_jumpsup = df_powerMeter_BDG2.loc['2016-12':'2017-12'].copy()\ndf_daily_jumpsup = df_daily_jumpsup.fillna(method='ffill').fillna(method='bfill')\ndf_daily_jumpsup.iloc[:,:5].iplot()","a8a60419":"def normalize(df):\n    mean = df.mean()\n    df -= mean\n    std = df.std()\n    df \/= std\n    return df, mean, std\n\n# Normalize `value` and save the mean and std we get,\n# for normalizing test data.\ntraining_value, training_mean, training_std = normalize(df_small_noise)\nlen(df_small_noise)","dbcfac5d":"x_train = np.reshape(training_value.dropna(axis=1).T.values, training_value.dropna(axis=1).T.values.shape+(1,))\nx_train.shape","b2ed660e":"model = keras.Sequential(\n    [\n        layers.Input(shape=(x_train.shape[1], x_train.shape[2])),\n        layers.BatchNormalization(),\n        layers.Conv1D(\n            filters=32, kernel_size=24, padding=\"same\", strides=3, activation=\"relu\"\n        ),\n        layers.Dropout(rate=0.05),\n        layers.Conv1D(\n            filters=16, kernel_size=24, padding=\"same\", strides=3, activation=\"relu\"\n        ),\n        layers.Conv1DTranspose(\n            filters=16, kernel_size=24, padding=\"same\", strides=3, activation=\"relu\"\n        ),\n        layers.Dropout(rate=0.05),\n        layers.Conv1DTranspose(\n            filters=32, kernel_size=24, padding=\"same\", strides=3, activation=\"relu\"\n        ),\n        layers.Conv1DTranspose(filters=1, kernel_size=24, padding=\"same\"),\n    ]\n)\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001), loss=\"mse\")\nmodel.summary()","8e7f333d":"history = model.fit(\n    x_train,\n    x_train,\n    epochs=50,\n    batch_size=128,\n    validation_split=0.5,\n    callbacks=[\n        keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=5, mode=\"min\")\n    ],\n)","b38f597b":"plt.plot(history.history[\"loss\"], label=\"Training Loss\")\nplt.plot(history.history[\"val_loss\"], label=\"Validation Loss\")\nplt.legend()","1b34e8eb":"# Get train MAE loss.\nx_train_pred = model.predict(x_train)\ntrain_mae_loss = np.mean(np.abs(x_train_pred - x_train), axis=1)\n\nplt.hist(train_mae_loss, bins=50)\nplt.xlabel(\"Train MAE loss\")\nplt.ylabel(\"No of samples\")\nplt.show()\n\n# Get reconstruction loss threshold.\nthreshold = np.max(train_mae_loss)\nprint(\"Reconstruction error threshold: \", threshold)","8f6e5aa9":"# Checking how the first sequence is learnt\nfor idx in np.arange(0,1500,100):\n    pd.concat([pd.Series(x_train[idx].flatten()).rename('x_train'), pd.Series(x_train_pred[idx].flatten()).rename('x_train_pred')], axis=1).iplot()","ac518b5f":"# Detecting anomalies\nWe will detect anomalies by determining how well our model can reconstruct the input data.\n1. Find MAE loss on training samples.\n2. Find max MAE loss value. This is the worst our model has performed trying to reconstruct a sample. We will make this the `threshold` for anomaly detection.\n3. If the reconstruction loss for a sample is greater than this `threshold` value then we can infer that the model is seeing a pattern that it isn't familiar with. We will label this sample as an `anomaly`.","82bb0429":"# Build a model\nWe will build a convolutional reconstruction autoencoder model. The model will take input of shape `(batch_size, sequence_length, num_features)` and return output of the same shape. In this case, `sequence_length` is 288 and `num_features` is 1.","f7d156f5":"## Compare recontruction\nJust for fun, let's see how our model has recontructed the first sample. This is the 288 timesteps from day 1 of our training dataset.","e54adfca":"# Train the model\nPlease note that we are using `x_train` as both the input and the target since this is a reconstruction model.","b8329dc9":"# Load the data\nWe will use the Numenta Anomaly Benchmark(NAB) dataset. It provides artifical timeseries data containing labeled anomalous periods of behavior. Data are ordered, timestamped, single-valued metrics.\n\nWe will use the `art_daily_small_noise.csv` file for training and the `art_daily_jumpsup.csv` file for testing. The simplicity of this dataset allows us to demonstrate anomaly detection effectively.","a757e271":"Let's plot training and validation loss to see how the training went.","aafdf7c2":"# Prepare training data\nGet data values from the training timeseries data file and normalize the `value` data. We have a `value` for every 5 mins for 14 days.\n\n24 * 366 = **8784 timesteps per year**"}}