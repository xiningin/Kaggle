{"cell_type":{"7a87c199":"code","d76f764b":"code","46538683":"code","16351b4d":"code","1b9d5ab1":"code","56132225":"code","7b128a52":"code","6d8b72f8":"code","31011964":"code","a373a85a":"code","47317fb2":"code","43a515d4":"code","0251eb01":"code","f08985a3":"code","268c8ca7":"code","a7af9fad":"code","22024e0f":"code","98b54267":"markdown","affff59c":"markdown","87519e2d":"markdown","843cd633":"markdown","891f7b90":"markdown","46196173":"markdown","80500c00":"markdown","65ddc136":"markdown","8090d128":"markdown","85261e4e":"markdown","fbd61b4a":"markdown","fa42e4b0":"markdown","fe89298c":"markdown","73025686":"markdown","4f4709a5":"markdown"},"source":{"7a87c199":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d76f764b":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize']=[20,8]\nimport seaborn as sns","46538683":"df=pd.read_csv('..\/input\/weight-height\/weight-height.csv')\nprint(df.shape)\ndisplay(df.head(2))\ndisplay(df.describe())","16351b4d":"Q1_height=df.Height.quantile(0.25)\nQ3_height=df.Height.quantile(0.75)\nprint(Q1_height,Q3_height)\ninterquartile_range_height=Q3_height-Q1_height\nprint(interquartile_range_height)\nheight_low_limit=Q1_height-1.5*interquartile_range_height\nheight_high_limit=Q3_height+1.5*interquartile_range_height\nprint(height_low_limit,height_high_limit)\n##\nQ1_weight=df.Weight.quantile(0.25)\nQ3_weight=df.Weight.quantile(0.75)\nprint(Q1_weight,Q3_weight)\ninterquartile_range_weight=Q3_weight-Q1_weight\nprint(interquartile_range_weight)\nweight_low_limit=Q1_weight-1.5*interquartile_range_weight\nweight_high_limit=Q3_weight+1.5*interquartile_range_weight\nprint(weight_low_limit,weight_high_limit)\n##\ndf_no_outlier_height=df[((df.Height<height_low_limit)|(df.Height>height_high_limit))]\nprint(df_no_outlier_height)\nprint(df_no_outlier_height.shape)\n##\ndf_no_outlier_weight=df[((df.Weight<weight_low_limit)|(df.Weight>weight_high_limit))]\nprint(df_no_outlier_weight)\nprint(df_no_outlier_weight.shape)\n##\ndf_no_outlier=df[~df['Height'].isin(df_no_outlier_height['Height']) & ~df['Weight'].isin(df_no_outlier_weight['Weight'])]\nprint(df_no_outlier.shape)\ndisplay(df_no_outlier)","1b9d5ab1":"df=df_no_outlier\nprint(df.shape)\ndisplay(df.describe())\ndisplay(df.head())","56132225":"height_value_less_than_3sigma=df.Height.mean()-3*(df.Height.std())\nprint(height_value_less_than_3sigma)\nheight_value_greater_than_3sigma=df.Height.mean()+3*(df.Height.std())\nprint(height_value_greater_than_3sigma)\n##\ndf_outlier_height_less_3sigma=df[df.Height<height_value_less_than_3sigma]\nprint(df_outlier_height_less_3sigma.shape)\ndisplay(df_outlier_height_less_3sigma)\n##\ndf_outlier_height_greater_3sigma=df[df.Height>height_value_greater_than_3sigma]\nprint(df_outlier_height_greater_3sigma.shape)\ndisplay(df_outlier_height_greater_3sigma)\n##\nweight_value_less_than_3sigma=df.Weight.mean()-3*(df.Weight.std())\nprint(weight_value_less_than_3sigma)\nweight_value_greater_than_3sigma=df.Weight.mean()+3*(df.Weight.std())\nprint(weight_value_greater_than_3sigma)\n##\ndf_outlier_weight_less_3sigma=df[df.Weight<weight_value_less_than_3sigma]\nprint(df_outlier_weight_less_3sigma.shape)\ndisplay(df_outlier_weight_less_3sigma)\n##\ndf_outlier_weight_greater_3sigma=df[df.Weight>weight_value_greater_than_3sigma]\nprint(df_outlier_weight_greater_3sigma.shape)\ndisplay(df_outlier_weight_greater_3sigma)\n##\ndf=df[~df.Height.isin(df_outlier_height_less_3sigma.Height) & ~df.Height.isin(df_outlier_height_greater_3sigma.Height)]\nprint(df.shape)\ndisplay(df.head())\n##\ndf=df[~df.Weight.isin(df_outlier_weight_less_3sigma.Weight) & ~df.Weight.isin(df_outlier_weight_greater_3sigma.Weight)]\nprint(df.shape)\ndisplay(df.head())","7b128a52":"##\ndf['zscore_height']=(df['Height']-df.Height.mean())\/df.Height.std()# position in normal distribution\ndisplay(df.head())\n##\ndf['zscore_weight']=(df['Weight']-df.Weight.mean())\/df.Weight.std()# position in normal distribution\ndisplay(df.head())\n##\ndf_outlier_weight_zscore=df[(df['zscore_weight']>3 )| (df['zscore_weight']<-3)] #value less and greater than -3 z-score position and +3 position\nprint(df_outlier_weight_zscore.shape)\nprint(df_outlier_weight_zscore)\n##\ndf_outlier_height_zscore=df[(df['zscore_height']>3 )| (df['zscore_height']<-3)]#value less and greater than -3 z-score position and +3 position\nprint(df_outlier_height_zscore.shape)\nprint(df_outlier_height_zscore)\n##\ndf_no_outlier=df[~df['Height'].isin(df_outlier_height_zscore.Height) & ~df['Weight'].isin(df_outlier_weight_zscore.Weight)]\nprint(df_no_outlier.shape)\nprint(df_no_outlier)","6d8b72f8":"import seaborn as sn\nsn.histplot(df.Height,kde=True)","31011964":"sn.histplot(df.Weight,kde=True)","a373a85a":"from scipy.stats import shapiro #https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.shapiro.html\nshapiro_test=shapiro(df.Weight)\nprint(shapiro_test)","47317fb2":"skew=df.skew(numeric_only=True).sort_values(ascending=False)\nskew","43a515d4":"sqrt_weight=(df.Weight)**(0.5)\nsns.displot(sqrt_weight,kde=True)","0251eb01":"recip_weight=1\/(df.Weight)\nsns.displot(recip_weight,kde=True)","f08985a3":"log_weight=np.log(df.Weight)\nsns.displot(log_weight,kde=True)","268c8ca7":"from scipy.stats import boxcox\nfor i in ['Height','Weight']:\n    lmb=boxcox(df[i],lmbda=None)\n    print(i,lmb[1])","a7af9fad":"# Feature Engineering \u2013 How to Detect and Remove Outliers (with Python Code)","22024e0f":"import pandas as pd\ndf=pd.read_csv('..\/input\/weight-height\/weight-height.csv')\nprint('Before: ',df.shape)\nQ1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\n##\ndf = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]\nprint('\\nAfter1: ',df.shape)\n##\nnumerical_cols=df.select_dtypes(['int64','float64'])\nfor col in numerical_cols:\n    feature_value_less_than_3sigma=df[col].mean()-3*(df[col].std())\n    feature_value_greater_than_3sigma=df[col].mean()+3*(df[col].std())\n    df = df[~((df[col] < (feature_value_less_than_3sigma)) |(df[col] > (feature_value_greater_than_3sigma)))]\nelse:\n    print('\\nAfter2: ',df.shape)","98b54267":"# Outliers removal 1\n\n**five-number summary**\n\nThe minimum or lowest value of the dataset\n\nThe first quartile Q1, which represents a quarter of the way through the list of all data\n\nThe median of the data set, which represents the midpoint of the whole list of data\n\nThe third quartile Q3, which represents three-quarters of the way through the list of all data\n\nThe maximum or highest value of the data set.\n\n\n1.Calculate the interquartile range for the data.\n\n2.Multiply the interquartile range (IQR) by 1.5 (a constant used to discern outliers).\n\n3.Add 1.5 x (IQR) to the third quartile. Any number greater than this is a suspected outlier.\n\n4.Subtract 1.5 x (IQR) from the first quartile. Any number less than this is a suspected outlier.","affff59c":"**Reciprocal Transformation**","87519e2d":"Still not great, the above distribution is not quite symmetrical.","843cd633":"An alternative to manually trying a variety of transformations is the Box Cox transformation. For each variable, a Box Cox transformation estimates the value lambda from -5 to 5\n\nFor negative values of lambda, the transformation performs a variant of the reciprocal of the variable. \n\nAt a lambda of zero, the variable is log transformed, \n\nand for positive lambda values, the variable is transformed the power of lambda. ","891f7b90":"# Outlier removal 3\n\nby position of normal distribution ( using z-score ) remove outlier\n\nwhich is greater and lesser than (-3sigma and +3sigma)\n","46196173":" Common transformations include square root (sqrt(x)), logarithmic (log(x)), and reciprocal (1\/x).","80500c00":"# Simplification","65ddc136":"**Square Root Transformation**","8090d128":"**Log Transformation**","85261e4e":"**Box Cox Transformation**","fbd61b4a":"The log transformation seems to be the best, ","fa42e4b0":"# Outlier removal 2\n\n> mean-3*standard deviation\n\n> mean+3*standard deviation\n\nTo remove value in noraml distribution Diagram as a outlier\nwhich is greater and lesser than (-3sigma and +3sigma)\n\nyou can also use greater and lesser than (-2sigma and +2sigma) depend on your judgment","fe89298c":"After transforming, the data is definitely less skewed, but there is still","73025686":"The p-value is not surprisingly less than 0.05, so we can conclude that the variable is skewed\n\nA more convenient way of evaluating skewness is with pandas\u2019 \u201c.skew\u201d method. It calculates the Fisher\u2013Pearson standardized moment coefficient for all columns in a dataframe. ","4f4709a5":"# Transforming Skewed Data for Machine Learning\n\nhttps:\/\/opendatascience.com\/transforming-skewed-data-for-machine-learning\/\n\nWe can objectively determine if the variable is skewed using the Shapiro-Wilks test. \n\nThe null hypothesis for this test is that the data is a sample from a normal distribution, so a p-value less than 0.05 indicates significant skewness. "}}