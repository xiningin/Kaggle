{"cell_type":{"c0d31c12":"code","25ff8a72":"code","e1fcda14":"code","92e3f2d1":"code","12ddeeff":"code","0aea6c59":"code","4c55939d":"code","62cbeb1c":"code","f14678af":"code","878a9307":"code","58f7d5d8":"code","99461299":"code","952c36b5":"code","984b7cc8":"code","abd1b235":"code","b44ada5f":"code","f9859015":"code","3c0b0807":"code","79f92cb3":"code","ee0ab8f7":"code","743b88c1":"code","03a6ff06":"code","b06ab8a6":"code","f030e615":"code","30ed5d5d":"code","48bb99de":"code","d245ccb7":"code","1e15a000":"code","5f8de94a":"code","49119efb":"code","303fed43":"code","65e8aaae":"code","b6cb093e":"code","14479b6f":"code","3e497fac":"code","037d372f":"code","c675e242":"code","11dbdd3f":"code","8747e0fa":"markdown","e0a0f111":"markdown","36b11b32":"markdown","431ff77b":"markdown","2b4e8464":"markdown","46d04ff5":"markdown"},"source":{"c0d31c12":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats ","25ff8a72":"data = pd.read_csv('..\/input\/diamonds\/diamonds.csv')\nprint(data.info())\nprint('No Null Value')","e1fcda14":"data.head()\ndata.drop('Unnamed: 0', axis=1, inplace=True)","92e3f2d1":"data.describe()","12ddeeff":"fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(nrows=2, ncols=2,\n                               figsize=(10, 14))\n\nax1.boxplot(data['x'])\nax1.set_title('x Outlier')\n\nax2.boxplot(data['y'])\nax2.set_title('y Outlier')\n\nax3.boxplot(data['z'])\nax3.set_title('z Outlier')\n\nax4.boxplot(data['price'])\nax4.set_title('price Outlier')\n","0aea6c59":"print('cut quality of the cut Fair, Good, Very Good, Premium, Ideal: ')\nprint(data[data['cut'] == 'Fair']['price'].mean())\nprint(data[data['cut'] == 'Ideal']['price'].mean())\nprint(data[data['cut'] == 'Good']['price'].mean())\nprint(data[data['cut'] == 'Premium']['price'].mean())\nprint(data[data['cut'] == 'Very Good']['price'].mean())","4c55939d":"print('color diamond colour, from J (worst) to D (best):' )\nprint(data[(data['cut'] == 'Fair') & (data['color'] == 'D')]['price'].mean())\nprint(data[(data['cut'] == 'Ideal') & (data['color'] == 'D')]['price'].mean())\nprint(data[(data['cut'] == 'Good') & (data['color'] == 'D')]['price'].mean())\nprint(data[(data['cut'] == 'Very Good') & (data['color'] == 'D')]['price'].mean())\nprint(data[(data['cut'] == 'Premium') & (data['color'] == 'D')]['price'].mean())","62cbeb1c":"print('carat weight of the diamond (0.2--5.01):')\nprint(data[(data['cut'] == 'Fair')]['carat'].mean())\nprint(data[(data['cut'] == 'Ideal')]['carat'].mean())\nprint(data[(data['cut'] == 'Good')]['carat'].mean())\nprint(data[(data['cut'] == 'Very Good')]['carat'].mean())\nprint(data[(data['cut'] == 'Premium')]['carat'].mean())","f14678af":"print(stats.trim_mean(data['price'].sort_values(), 0.2))\nprint(data['price'].mean())\n\nprint('---------- see the different between trim_mean and mean--------------')","878a9307":"data.describe()","58f7d5d8":"data['x'].plot(kind='hist', bins=100)","99461299":"print(len(data[data['x'] < 4]))\nprint(len(data[data['x'] > 7.6]))\nprint('-------------------(remove x)----------------------')\ndef remove_x(x):\n    if x < 4:\n        return np.nan\n    elif x > 7.6:\n        return np.nan\n    else:\n        return x\ndata['x'] = data['x'].apply(remove_x)","952c36b5":"data['y'].plot(kind='hist', bins=1000, figsize=(10, 10))","984b7cc8":"print(len(data[data['y'] < 4.7]))\nprint(len(data[data['y'] > 8]))\nprint('------------------(remove y)-----------------------')\ndef remove_x(x):\n    if x < 4.7:\n        return np.nan\n    elif x > 8:\n        return np.nan\n    else:\n        return x\ndata['y'] = data['y'].apply(remove_x)","abd1b235":"data['z'].plot(kind='hist', bins=100, figsize=(10, 10))","b44ada5f":"print(len(data[data['z'] < 2]))\nprint(len(data[data['z'] > 5]))\nprint('------------------(remove z)-----------------------')\ndef remove_x(x):\n    if x < 2:\n        return np.nan\n    elif x > 5:\n        return np.nan\n    else:\n        return x\ndata['z'] = data['z'].apply(remove_x)","f9859015":"data['price'].plot(kind='hist', bins=100)","3c0b0807":"print(len(data[data['price'] < 1000]))\nprint(len(data[data['price'] > 10100]))\ndef remove_x(x):\n    if x < 1000:\n        return np.nan\n    elif x > 10100:\n        return np.nan\n    else:\n        return x\ndata['price'] = data['price'].apply(remove_x)","79f92cb3":"data['table'].plot(kind='hist', bins=100)","ee0ab8f7":"print(len(data[data['table'] < 56]))\nprint(len(data[data['table'] > 62]))\ndef remove_x(x):\n    if x < 56:\n        return np.nan\n    elif x > 62:\n        return np.nan\n    else:\n        return x\ndata['table'] = data['table'].apply(remove_x)","743b88c1":"data['table'].plot(kind='box')","03a6ff06":"print(len(data[data['depth'] < 59]))\nprint(len(data[data['depth'] > 64]))\ndef remove_x(x):\n    if x < 59:\n        return np.nan\n    elif x > 64:\n        return np.nan\n    else:\n        return x\ndata['depth'] = data['depth'].apply(remove_x)","b06ab8a6":"data['depth'].plot(kind='box')","f030e615":"data.dropna(inplace=True)","30ed5d5d":"data['price'].plot(kind='box')","48bb99de":"fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(nrows=2, ncols=2,\n                               figsize=(10, 14))\n\nax1.boxplot(data['x'])\nax1.set_title('x Outlier')\n\nax2.boxplot(data['y'])\nax2.set_title('y Outlier')\n\nax3.boxplot(data['z'])\nax3.set_title('z Outlier')\n\nax4.boxplot(data['price'])\nax4.set_title('price Outlier')\n","d245ccb7":"data.reset_index(drop=True, inplace=True)","1e15a000":"y = data['price']\nx = data.drop('price', axis=1)","5f8de94a":"x_dummie = pd.get_dummies(x)","49119efb":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest, chi2","303fed43":"best_f = SelectKBest(chi2, k=24)\nbest_f.fit(x_dummie, y)\nx_feat = best_f.transform(x_dummie)","65e8aaae":"print(best_f.get_support())","b6cb093e":"dfscores = pd.DataFrame(best_f.scores_)\ndfcolumns = pd.DataFrame(x_dummie.columns)\n\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\n\nfeatureScores.columns = ['feature','score']  \nprint(featureScores.nlargest(10,'score')) ","14479b6f":"print(x_feat.shape)\nprint(y.shape)","3e497fac":"x_train, x_test, y_train, y_test = train_test_split(x_feat, y, test_size=0.3)","037d372f":"import xgboost as xgb\nmodel = xgb.XGBRFRegressor()\nmodel.fit(x_train, y_train)\nprint(model.score(x_train, y_train))\ny_predict = model.predict(x_test)","c675e242":"from sklearn.metrics import  r2_score","11dbdd3f":"print(r2_score(y_predict, y_test))","8747e0fa":"## **Lets Remove Outlier:**\n### befor Remove let's talk About Mean And Trid_Mean \n### Mean is sensetive to outlier although trid-mean delete 10 element from start and end data then calculate the mean because of outlier and more trustable than mean ","e0a0f111":"price price in US dollars (\\$326--\\$18,823)\n\ncarat weight of the diamond (0.2--5.01)\n\ncut quality of the cut (Fair, Good, Very Good, Premium, Ideal)\n\ncolor diamond colour, from J (worst) to D (best)\n\nclarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\n\nx length in mm (0--10.74)\n\ny width in mm (0--58.9)\n\nz depth in mm (0--31.8)\n\ndepth total depth percentage = z \/ mean(x, y) = 2 * z \/ (x + y) (43--79)\n\ntable width of top of diamond relative to widest point (43--95)","36b11b32":"## Let's Find Outlier:","431ff77b":"### Option showfliers=Fasle does not show the outlier from boxplot","2b4e8464":"## Now Lets Define Function To Remove Outlier:","46d04ff5":"**Description of data:**"}}