{"cell_type":{"e6405804":"code","aa2f28a8":"code","8ceddd97":"code","dfe87693":"code","739e409f":"code","96082fb3":"code","400426b0":"code","2312f4c8":"code","a37aaeda":"code","d2a06f05":"code","ed05b920":"code","c6711ace":"code","c03f1311":"code","405ad788":"markdown","1de15eab":"markdown","f6f9d958":"markdown"},"source":{"e6405804":"import warnings; warnings.filterwarnings('ignore')\nimport os,time,numpy as np,pylab as pl\nfrom keras.preprocessing import image as kimage\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier,\\\nGradientBoostingClassifier\nfrom sklearn.metrics import \\\naccuracy_score,classification_report\nfrom sklearn.neural_network import MLPClassifier\nfrom tqdm import tqdm\nfrom PIL import ImageFile","aa2f28a8":"def path_to_tensor(img_path,fpath,img_size):\n    img=kimage.load_img(fpath+img_path, \n                        target_size=(img_size,img_size))\n    x=kimage.img_to_array(img)\n    return np.expand_dims(x,axis=0)\ndef paths_to_tensor(img_paths,fpath,img_size):\n    tensor_list=[path_to_tensor(img_path,fpath,img_size) \n                 for img_path in tqdm(img_paths)]\n    return np.vstack(tensor_list)","8ceddd97":"fpath='..\/input\/horse-breeds\/'\nnames=['Akhal-Teke','Appaloosa','Orlov Trotter',\n       'Vladimir Heavy Draft','Percheron',\n       'Arabian','Friesian']\nflist=sorted(os.listdir(fpath))\nimg_size=64\ny=np.array([int(el[:2]) for el in flist],\n           dtype='int8')-1\nX=np.array(paths_to_tensor(flist,fpath,img_size),\n           dtype='float32')\/255\nX=X.reshape(-1,3*img_size**2)\nN=y.shape[0]; shuffle_ids=np.arange(N)\nnp.random.RandomState(12).shuffle(shuffle_ids)\nX,y=X[shuffle_ids],y[shuffle_ids]","dfe87693":"n=np.random.randint(400)\nprint('Label: ',y[n],\n      names[y[n]])\npl.figure(figsize=(3,3))\npl.imshow((X.reshape(-1,img_size,img_size,3)[n]));","739e409f":"cond=np.where([l in [0,5] for l in y])\nXc,yc=X[cond],y[cond]\nyc=np.where(yc==5,1,yc)\nX_train,X_test,y_train,y_test=\\\ntrain_test_split(Xc,yc,test_size=.2,\n                 random_state=1,stratify=yc)\nX_train.shape,X_test.shape","96082fb3":"lr=LogisticRegression(C=100.0,random_state=1,\n                      solver='lbfgs',multi_class='ovr')\nlr.fit(X_train,y_train)\ny_test_lr=lr.predict(X_test)\nprint('Misclassified examples: %d'%(y_test!=y_test_lr).sum())\nprint('Accuracy: %.3f'%accuracy_score(y_test,y_test_lr))\nprint(\"Classification Report:\\n%s\\n\"%\\\n      (classification_report(y_test,y_test_lr)))","400426b0":"svm=SVC(kernel='linear',C=1.,random_state=1)\nsvm.fit(X_train,y_train)\ny_test_svm=svm.predict(X_test)\nprint('Misclassified examples: %d'%(y_test!=y_test_svm).sum())\nprint('Accuracy: %.3f'%accuracy_score(y_test,y_test_svm))\nprint(\"Classification Report:\\n%s\\n\"%\\\n      (classification_report(y_test,y_test_svm)))","2312f4c8":"def plot_decision_regions(X,y,classifier,\n                          test_ids=None,resolution=.05):\n    markers=('$1$','$2$','$3$','$4$','$5$','$6$','$7$')\n    colors=('#ff355e','#ff6037','#ffcc33','#ccff00',\n            '#66ff66','#50bfe6','#ff00cc')\n    X=scale(X)\n    X=PCA(n_components=2).fit_transform(X)\n    cmap=ListedColormap(colors[:len(np.unique(y))])\n    x1_min,x1_max=X[:,0].min()-1,X[:,0].max()+1\n    x2_min,x2_max=X[:,1].min()-1,X[:,1].max()+1\n    xx1,xx2=np.meshgrid(np.arange(x1_min,x1_max,resolution),\n                        np.arange(x2_min,x2_max,resolution))\n    classifier.fit(X,y)\n    Z=classifier.predict(np.array([xx1.ravel(),xx2.ravel()]).T)\n    Z=Z.reshape(xx1.shape)\n    pl.figure(figsize=(10,10))\n    pl.contourf(xx1,xx2,Z,alpha=.3,cmap=cmap)\n    pl.xlim(xx1.min(),xx1.max())\n    pl.ylim(xx2.min(),xx2.max())\n    for ids,cl in enumerate(np.unique(y)):\n        pl.scatter(x=X[y==cl,0],y=X[y==cl,1],\n                   alpha=.8,c=colors[ids],\n                   marker=markers[ids], \n                   label=cl,edgecolor='black')\n    if test_ids:\n        X_test,y_test=X[test_ids,:],y[test_ids]\n        pl.scatter(X_test[:,0],X_test[:,1],\n                   c='',edgecolor='black',\n                   alpha=1.,linewidth=1,marker='o',\n                   s=100,label='test set')","a37aaeda":"rf=RandomForestClassifier()\nplot_decision_regions(Xc,yc,classifier=rf,\n                      test_ids=range(1,16))","d2a06f05":"gb=GradientBoostingClassifier()\nplot_decision_regions(Xc,yc,classifier=gb,\n                      test_ids=range(1,16))","ed05b920":"clf=MLPClassifier(hidden_layer_sizes=(4096,),\n                  max_iter=200,solver='adam',\n                  verbose=1,random_state=1,\n                  learning_rate_init=.0001,\n                  n_iter_no_change=50)\nclf.fit(X_train,y_train)","c6711ace":"pl.plot(clf.loss_curve_);","c03f1311":"print(clf.score(X_test,y_test))\ny_test_mlp=clf.predict(X_test)\npl.figure(figsize=(10,5))\npl.scatter(range(y_test.shape[0]),y_test,s=100)\npl.scatter(range(y_test.shape[0]),y_test_mlp,s=25);","405ad788":"## Classifiers \/ 2 Classes","1de15eab":"## Data Loading","f6f9d958":"## Code Modules"}}