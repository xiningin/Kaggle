{"cell_type":{"40f9e23d":"code","46e4dd23":"code","7db39df1":"code","453af657":"code","ddb5f867":"code","90c6e507":"code","98cb2e09":"code","7cdb3060":"code","65dbd7db":"code","1bf295d0":"code","b22923ca":"code","d742dbfe":"code","c2628161":"code","7aeead0a":"code","c83c44ce":"code","306f278b":"code","17a8b580":"code","28aa5560":"code","646db933":"code","d3fa0777":"code","a9e069d7":"code","74f33cf5":"code","9af70d44":"code","01905af3":"code","07a68e90":"code","feab6946":"code","f1dd6a0b":"code","a6cc1598":"code","6dab3dcc":"code","2eb59661":"code","8387465d":"code","4fafc848":"code","eb39396b":"code","26288329":"code","33a199ce":"code","1d04f90d":"code","d71898d4":"code","c18f39a6":"code","3a9f6ce7":"code","26c50550":"code","777ee3dd":"code","4793641b":"code","ea6b18e3":"code","b196d257":"code","d24f5172":"code","4d7a32b8":"code","508868e0":"code","418ad15c":"code","c0a461b3":"code","a4665bbc":"code","f8350400":"code","656fa648":"code","bb75922e":"code","54e8e1c4":"code","819f9fe9":"code","900aa8ee":"markdown","90a263c1":"markdown","6a2954b4":"markdown","8b8951fd":"markdown","732b3929":"markdown","d8131c32":"markdown","3da617bb":"markdown","fe647997":"markdown","297259d0":"markdown","5cbcfd72":"markdown","2c258218":"markdown","fd738cb5":"markdown","1bad4e5f":"markdown","862b31a7":"markdown","4212ec7f":"markdown","59e59b34":"markdown","678c3c91":"markdown","a63f3a82":"markdown","2a189b58":"markdown","3503045a":"markdown","6b16144f":"markdown","4bef98a9":"markdown","bd86f73f":"markdown","3da7f5dd":"markdown","1a7e21af":"markdown","e73f1127":"markdown","2292792c":"markdown","b28751dd":"markdown","436ee037":"markdown"},"source":{"40f9e23d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46e4dd23":"data_df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndata_df.head(5)","7db39df1":"missing_vals = data_df.isnull().sum().sum()\nmissing_vals","453af657":"data_df.describe()","ddb5f867":"data_df.mean()","90c6e507":"data_df.max() #Maximum values per columns","98cb2e09":"data_df.min() ##Minimum values per columns","7cdb3060":"plt.figure(figsize=(10,5))\nsns.countplot(y=data_df['target'])\nplt.title('Estimates of Diseased and Unaffected individuals')\nplt.legend([\"Safe\", \"Have Disease\"])","65dbd7db":"plt.figure(figsize=(15,15))\nsns.countplot(y=data_df['age'], hue=data_df['target'])\nplt.title('Age wise data distribution with Disease estimates')","1bf295d0":"#Patients with Heart disease percentage\nno_disease = len(data_df[data_df.target==0])\ndisease = len(data_df[data_df.target==1])\n\nperc_safe = no_disease\/len(data_df.target)*100\nperc_diseased = disease\/len(data_df.target)*100\nprint('Distribution of unaffected is {:.2f}%, while for diseased, it is {:.2f}%'.format(perc_safe, perc_diseased))","b22923ca":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.countplot(y=data_df['sex'])\nplt.ylabel('0-female, 1-Male')\n\nplt.subplot(2,2,2)\nsns.countplot(y=data_df['sex'], hue=data_df['target'])\n\nplt.title('Gender wise data distribution')","d742dbfe":"#estimating male and female patients\nfemale = len(data_df[data_df.sex==0])\nmale = len(data_df[data_df.sex==1])\n\nperc_female = female\/len(data_df.sex)*100\nperc_male = male\/len(data_df.sex)*100\nprint('Distribution of females is {:.2f}%, while for males, it is {:.2f}%'.format(perc_female, perc_male))","c2628161":"corr = data_df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr, annot=True, linewidth = 0.2)\nplt.title('Correlation in Dataset')","7aeead0a":"corr","c83c44ce":"plt.figure(figsize=(15,10))\nsns.set(color_codes=True)\nsns.boxplot(data=data_df, orient='h', palette = 'Set2',linewidth=2.5)","306f278b":"pd.crosstab(data_df.sex,data_df.target).plot(kind=\"barh\",figsize=(15,6))\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Safe\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","17a8b580":"sns.scatterplot(data_df.age[data_df.target==1], y=data_df.thalach[(data_df.target==1)], color='red')\nsns.scatterplot(data_df.age[data_df.target==0], y=data_df.thalach[(data_df.target==0)], color='green')\nplt.legend([\"Disease\", \"Not Disease\"])","28aa5560":"x = data_df.drop('target',axis=1)\ny = data_df['target']","646db933":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=5)","d3fa0777":"print('Training data : {},{} '.format(x_train.shape, y_train.shape))\nprint('Testing data : {},{} '.format(x_test.shape, y_test.shape))","a9e069d7":"scale = StandardScaler()\nx_train = scale.fit_transform(x_train)\nx_test = scale.transform(x_test)","74f33cf5":"x_train","9af70d44":"score=[]","01905af3":"clf1=LogisticRegression()\nclf1.fit(x_train,y_train)\npred1=clf1.predict(x_test)\ns1=accuracy_score(y_test,pred1)\nscore.append(s1*100)\nprint(s1)","07a68e90":"knn = KNeighborsClassifier()\nknn.fit(x_train,y_train)\n\ny_true0 = knn.predict(x_test)\ns2 = accuracy_score(y_test,y_true0)\nscore.append(s2*100)\nprint(s2)","feab6946":"xgb = XGBClassifier()\nxgb.fit(x_train,y_train)\n\ny_true = xgb.predict(x_test)\ns3 = accuracy_score(y_test,y_true)\nscore.append(s3*100)\nprint(s3)","f1dd6a0b":"rf = RandomForestClassifier()\nrf.fit(x_train,y_train)\n\ny_true1 = rf.predict(x_test)\ns4 = accuracy_score(y_test,y_true1)\nscore.append(s4*100)\nprint(s4)","a6cc1598":"svc = svm.SVC()\nsvc.fit(x_train,y_train)\n\ny_true2 = svc.predict(x_test)\ns5 = accuracy_score(y_test,y_true2)\nscore.append(s5*100)\nprint(s5)","6dab3dcc":"dtc = DecisionTreeClassifier()\ndtc.fit(x_train,y_train)\n\ny_true3 = dtc.predict(x_test)\ns6 = accuracy_score(y_test,y_true3)\nscore.append(s6*100)\nprint(s6)","2eb59661":"print(score)","8387465d":"label = ['LogisticRegression', 'KNN', 'XGB', 'RandomForest', 'SVM', 'DecisionTreeClassifier']\nscores = pd.Series(data = score, index = label)\nprint(scores)","4fafc848":"sc = scores.sort_index()\nplt.figure(figsize=(15,10))\nsc.plot(kind='barh')\nplt.title('Models Accuracy Scores')","eb39396b":"ann = tf.keras.models.Sequential()\nann.add(tf.keras.layers.Dense(6, activation='relu'))\nann.add(tf.keras.layers.Dense(6, activation='relu'))\nann.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nann.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","26288329":"history = ann.fit(x_train, y_train, batch_size = 10, epochs=100)\nprint(history)","33a199ce":"preds = ann.evaluate(x_test,y_test, batch_size=10,verbose=2)\nprint('Accuracy score : {}'.format(preds[1]))","1d04f90d":"pred_ann = ann.predict(x_test) \npred_ann1 = np.argmax(pred_ann, axis = 1)\nlabel = np.argmax(y_test)","d71898d4":"pred_ann1[:5]","c18f39a6":"y_test[:5]","3a9f6ce7":"pred = rf.predict(x_test)\npred[:5]","26c50550":"y_test[:5]","777ee3dd":"# for RandomForest\ncf1 = confusion_matrix(y_test,y_true1)\ncf1","4793641b":"rfc = classification_report(y_test,y_true1)\nprint(rfc)","ea6b18e3":"#SVM\ncf3 = confusion_matrix(y_test,y_true2)\ncf3","b196d257":"rfc = classification_report(y_test,y_true2)\nprint(rfc)","d24f5172":"#KNN\ncf4 = confusion_matrix(y_test,y_true0)\ncf4","4d7a32b8":"rfc = classification_report(y_test,y_true0)\nprint(rfc)","508868e0":"# ANN\ncf2 = confusion_matrix(y_test,pred_ann1)\nprint(cf2)","418ad15c":"ann_c = classification_report(y_test,pred_ann1)\nprint(ann_c)","c0a461b3":"from sklearn.decomposition import PCA\npca = PCA(n_components=5)\npca.fit(x_train)","a4665bbc":"pca_samples = pca.transform(x_train)\npca_samples[:5]","f8350400":" print(pca.explained_variance_ratio_)","656fa648":"print(pca.singular_values_)","bb75922e":"ps = pd.DataFrame(pca_samples)\nps.head()","54e8e1c4":"tocluster = pd.DataFrame(ps[[4,1]])","819f9fe9":"from sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=5,random_state=35).fit(tocluster)\nclusters = km.cluster_centers_\nk_preds = km.predict(tocluster)\nk_preds[:5]","900aa8ee":"# Scaling","90a263c1":"# Unsupervised Machine Learning Algorithms\n\n***Unsupervised learning is a type of machine learning algorithm used to draw inferences from datasets consisting of input data without labeled responses. The most common unsupervised learning method is cluster analysis, which is used for exploratory data analysis to find hidden patterns or grouping in data.***\n\n**Types include**\n* K-Means Clustering \n* PCA\n* ICA\n\n***So lets check out PCA first here***","6a2954b4":"***Target column indicates whether the person has disease or not, with 0 - No disease and 1- disease***","8b8951fd":"# Lets Visualize the Data","732b3929":"# Random Forest","d8131c32":"# Developing Data for Model","3da617bb":"# Logisitic Regression","fe647997":"***so we got a loss of 0.377 and accuracy of 0.88 on test data using 2 layered ANN***","297259d0":"# Checking Missing Values","5cbcfd72":"# XGB","2c258218":"# Introduction\n\n***I have made a simple notebook which will help you in getting a better understanding of applications of library like Sklearn\nIf you have any doubts feel free to reach out to me by commenting below.***\n\n***Do upvote my notebook so that it can reach wider audience***\n\n**Happy learning!!**","fd738cb5":"# SVM","1bad4e5f":"# PCA","862b31a7":"# Correlation in Dataset\n\n***We do this to analyze the dataset in such a way that more correlated features are considered when going for model developement***","4212ec7f":"# Classification Report","59e59b34":"# Understanding the Data\n\n* age - age in years\n* sex - (1 = male; 0 = female)\n* cp - chest pain type\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital)\n* chol - serum cholestoral in mg\/dl\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* restecg - resting electrocardiographic results\n* thalach - maximum heart rate achieved\n* exang - exercise induced angina (1 = yes; 0 = no)\n* oldpeak - ST depression induced by exercise relative to rest\n* slope - the slope of the peak exercise ST segment\n* ca - number of major vessels (0-3) colored by flourosopy\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect\n* target - have disease or not (1=yes, 0=no)","678c3c91":"# K-Means","a63f3a82":"# Predictions","2a189b58":"***Random Forest on other hand with higher accuracy predicts only 3 correctly***","3503045a":"***So our dataset is free of any missing values which makes our task more simpler now***","6b16144f":"# Predictions from Random Forest","4bef98a9":"# Libraries","bd86f73f":"# Loading the Data","3da7f5dd":"# Neural Networks","1a7e21af":"# KNN","e73f1127":"***So our ANN correctly predicts the first 4***","2292792c":"# Supervised Machine Learning Algorithms","b28751dd":"# Decision Tree Classifier","436ee037":"# Workflow of this Tutorial\n\n1. Loading Libraries \n2. Exploratory Data Analysis\n3. Basic Data Visualization\n4. Scaling of the Data\n5. Supervised Machine Learning Algorithms\n6. Neural Networks\n7. Classification reports\n8. Unsupervised Machine Learning Algorithms"}}