{"cell_type":{"88bc7ced":"code","a8ae44cc":"code","36856fd3":"code","2d653af9":"code","b08cbcda":"code","056c7323":"code","9e0a5f57":"code","c9c485a5":"code","c46cd5b3":"code","904db19a":"code","513f6287":"code","50c76b99":"code","f6bd11fa":"code","e9fc0bd1":"code","a5d8ff78":"code","b18f6434":"code","755e4251":"code","2eb778ee":"code","9ed64f19":"code","1254e655":"markdown","8567fb01":"markdown","5ece9684":"markdown","f2616760":"markdown","ec970f9b":"markdown","d2a4bfb3":"markdown","ffafa31c":"markdown"},"source":{"88bc7ced":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBClassifier\n\nfrom itertools import product\nimport random","a8ae44cc":"random.seed(42)","36856fd3":"def label_converter(label):\n    conversion = {\n        1: 0,\n        2: 1,\n        3: 2,\n#         4: 3,\n        6: 3,\n        7: 4\n    }\n    \n    return conversion[label]","2d653af9":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv', index_col='Id').reset_index(drop=True)\n\n# class5_index = None\nindices_to_remove = []\nfor index, val in enumerate(df['Cover_Type']):\n    if val == 5 or val == 4:\n#         class5_index = index\n        indices_to_remove.append(index)\n\ndf = df.drop(indices_to_remove)\n\nX = df.drop(['Cover_Type'], axis=1)\ny = df['Cover_Type'].apply(label_converter)","b08cbcda":"X = X.drop(['Soil_Type7', 'Soil_Type15'], axis=1)\nnumerical = []\ncategorical = []\nfor col in X.columns:\n    if X[col].nunique() <= 2:\n        categorical.append(col)\n    else:\n        numerical.append(col)\n        \ngaussian_features = ['Elevation', 'Hillshade_3pm']\nfor feature in gaussian_features:\n    numerical.remove(feature)","056c7323":"X_train, X_val, y_train, y_val = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42,\n    stratify=y\n)","9e0a5f57":"X_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv', index_col='Id')\nX_test = X_test.drop(['Soil_Type7', 'Soil_Type15'], axis=1)","c9c485a5":"def create_new_pipeline(params):\n    numerical_gaussian_transformer = SimpleImputer(strategy='mean')\n    numerical_transformer = SimpleImputer(strategy='median')\n    categorical_transformer = SimpleImputer(strategy='most_frequent')\n\n    preprocessor = ColumnTransformer(\n    transformers=[\n        ('gaussian', numerical_gaussian_transformer, gaussian_features),\n        ('numerical', numerical_transformer, numerical),\n        ('categorical', categorical_transformer, categorical)\n    ])\n\n    scaler = StandardScaler()\n\n    model = XGBClassifier(\n        use_label_encoder=False,\n        objective='multi:softmax',\n        n_jobs=-1,\n        random_state=42,\n        **params\n    )\n\n    pipeline = Pipeline(\n    steps=[\n           ('preprocessor', preprocessor),\n           ('scaler', scaler),\n           ('model', model)\n          ]\n    )\n\n    return pipeline","c46cd5b3":"search_space = {\n    'n_estimators': [10, 20, 50],\n    'max_depth': np.linspace(1, 9, num=5).astype('int'),\n    'learning_rate': np.logspace(-3, 1, num=5),\n    'reg_alpha': np.linspace(0, 1, num=3),\n    'reg_lambda': np.linspace(0, 1, num=3)\n}","904db19a":"NUM_POSS = 15","513f6287":"max_score = 0\nbest_params = {}\n\nfor val in random.choices(list(product(*search_space.values())), k=NUM_POSS):\n    params = {}\n    for i, param in enumerate(search_space.keys()):\n        params[param] = val[i]\n    print(params)\n\n    clf = create_new_pipeline(params)\n\n    clf.fit(X_train, y_train)\n\n    score = clf.score(X_val, y_val)\n    if score > max_score:\n        max_score = score\n        best_params = params\n    print(f'Score: {score}\\tBest score: {max_score}')","50c76b99":"best_params","f6bd11fa":"max_score","e9fc0bd1":"clf = create_new_pipeline(best_params)","a5d8ff78":"clf.fit(X, y)","b18f6434":"clf.score(X, y)","755e4251":"def reverse_label_converter(label):\n    conversion = {\n        0: 1,\n        1: 2,\n        2: 3,\n#         3: 4,\n        3: 6,\n        4: 7\n    }\n    \n    return conversion[label]","2eb778ee":"submission = pd.DataFrame(\n    {'Id': X_test.index,\n     'Cover_Type': map(reverse_label_converter, clf.predict(X_test))}\n)\n\nsubmission","9ed64f19":"submission.to_csv('submission.csv', index=False)","1254e655":"# Preparing data","8567fb01":"# Creating a Pipeline","5ece9684":"# Making Predictions","f2616760":"# Hyperparameter Tuning","ec970f9b":"# Initialization","d2a4bfb3":"# Training Final Model","ffafa31c":"In this notebook I will train a XGBoost model with random search for tuning the model.\n\nI will also use the insights gained from the [EDA](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/) here.\n\nMy other notebooks:\n - [Exploratory Data Analysis](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/)\n - [Sample Submission](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-sample-submission\/)\n - [Boilerplate code](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-dummy\/)"}}