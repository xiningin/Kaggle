{"cell_type":{"984a0f4d":"code","acd8b296":"code","f7410e57":"code","b6294a8a":"code","221149a0":"code","5f4aad45":"code","fd7662a4":"code","df1c0a55":"code","a8a58ae4":"code","d914a4e1":"code","786fa169":"code","3aa1a280":"code","ace5aab3":"code","69500970":"code","ed3f22e9":"code","e85e7b9d":"code","37c60796":"code","5f4bee21":"code","ac50c97d":"code","4e51415f":"code","a9ffaa0a":"code","cf87378f":"code","d21144ac":"code","da01736b":"code","55163e74":"code","0265c732":"code","5869dec3":"code","e28d0cf9":"code","4eac4ccf":"code","ec3a4ca7":"code","8952df2c":"code","0e07bf59":"code","8d7d0b92":"code","c758c8a6":"code","7ec2a273":"code","2e6193d4":"code","7ed824df":"code","2c7db325":"code","e171b2c9":"code","29904720":"code","c4f0fc8d":"code","04335eee":"code","ad4dbb49":"code","e0a021c8":"code","ea7b68a5":"code","506a5672":"code","36faf364":"code","726872a2":"code","e07b909d":"code","99a85db6":"code","9b6b7eda":"code","4c0e37bd":"code","143009e8":"markdown","3a940967":"markdown","c01c6d20":"markdown","1168137c":"markdown","cbd7b764":"markdown"},"source":{"984a0f4d":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nimport pathlib\nimport PIL\nimport PIL.Image\nfrom tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler ","acd8b296":"img_path = '..\/input\/plant-seedlings-classification\/train'\nimg_path = pathlib.Path(img_path)\nimage_count = len(list(img_path.glob('*\/*.png')))\nprint(image_count)","f7410e57":"plant = list(img_path.glob('Sugar beet\/*'))\nprint(len(plant))\nPIL.Image.open(str(plant[1]))","b6294a8a":"batch_size = 32\nimg_size = (299,299)","221149a0":"train_ds = image_dataset_from_directory(\n  img_path,\n  validation_split=0.2,\n  subset=\"training\",\n  seed=123,\n  image_size=(img_size),\n  batch_size=batch_size)","5f4aad45":"val_ds = image_dataset_from_directory(\n  img_path,\n  validation_split=0.2,\n  subset=\"validation\",\n  seed=123,\n  image_size=(img_size),\n  batch_size=batch_size)","fd7662a4":"class_names = train_ds.class_names\ntrain_ds_per_class = {}\nfor cls_name in class_names:\n    train_ds_per_class[cls_name] = len(list(img_path.glob(cls_name+'\/*')))\nprint(train_ds_per_class)","df1c0a55":"train_class = list(train_ds_per_class.keys())\nvalues = list(train_ds_per_class.values())\nfig = plt.figure(figsize = (15,5))\n\nplt.bar(train_class, values, width = 0.6)\nplt.show()","a8a58ae4":"test_img_path = '..\/input\/plant-seedlings-classification\/test'\ntest_img_path = pathlib.Path(test_img_path)\nprint(test_img_path)\n\nnew_test_path = pathlib.Path('\/kaggle\/working\/test\/images')","d914a4e1":"import shutil\nshutil.copytree(str(test_img_path), str(new_test_path))","786fa169":"import os\ndef parse_image(filename):\n    parts = tf.strings.split(filename, os.path.sep)\n    label = parts[-1]\n\n    image = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(image)\n#     image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, img_size)\n    return image, label","3aa1a280":"test_ds = tf.data.Dataset.list_files(str(new_test_path)+'\/*.png') \\\n    .map(parse_image) \\\n    .batch(batch_size) \\\n    .prefetch(tf.data.AUTOTUNE)","ace5aab3":"for image_batch, label_batch in test_ds.take(1):\n    print(image_batch.numpy().min())\n    print(image_batch.numpy().max())\n#     show(image_batch[0],label_batch[0])\n    print(image_batch[0])","69500970":"def show(image, label):\n    plt.figure()\n    plt.imshow(image.numpy().astype(\"uint8\"))\n    plt.title(label.numpy().decode('utf-8'))\n    plt.axis('off')\n    \n    \nfor image_batch, label_batch in test_ds.take(1):\n    print(image_batch.numpy().mean())\n    show(image_batch[0],label_batch[0])\n    print(image_batch[0])","ed3f22e9":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 8))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","e85e7b9d":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.prefetch(buffer_size=AUTOTUNE)","37c60796":"data_augmentation = tf.keras.Sequential(\n  [\n    tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n    tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),\n    tf.keras.layers.experimental.preprocessing.RandomZoom(0.1),\n  ]\n)","5f4bee21":"plt.figure(figsize=(10, 10))\nfor image_batch, _ in train_ds.take(1):\n    first_image = image_batch[0]\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        augmented_image = data_augmentation(tf.expand_dims(first_image, 0))\n        plt.imshow(augmented_image[0].numpy().astype('uint8'))\n        plt.axis('off')","ac50c97d":"for image_batch, labels_batch in train_ds:\n    print(image_batch.shape)\n    print(labels_batch.shape)\n    break","4e51415f":"base_model = tf.keras.applications.MobileNetV2(\n    input_shape=img_size + (3,),\n    include_top=False,\n    weights='imagenet')","a9ffaa0a":"image_batch, label_batch = next(iter(train_ds))\nfeature_batch = base_model(image_batch)\nprint(feature_batch.shape)","cf87378f":"base_model.trainable = False\n# base_model.summary()","d21144ac":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()\nfeature_batch_average = global_average_layer(feature_batch)\nprint(feature_batch_average.shape)","da01736b":"prediction_layer = tf.keras.layers.Dense(12,activation=\"softmax\")\nprediction_batch = prediction_layer(feature_batch_average)\nprint(prediction_batch.shape)","55163e74":"preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input","0265c732":"# rescale = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/127.5, offset= -1)","5869dec3":"inputs = tf.keras.Input(shape=img_size + (3,))\nx = data_augmentation(inputs)\nx = preprocess_input(x)\n\nx = base_model(x, training=False)\nx = global_average_layer(x)\nx = tf.keras.layers.Dropout(0.5)(x)\n# x = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(1024,activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\n# x = tf.keras.layers.Dense(128,activation='relu')(x)\n# x = tf.keras.layers.Dropout(0.2)(x)\noutputs = tf.keras.layers.Dense(12)(x)\n# outputs = prediction_layer(x)\nmodel = tf.keras.Model(inputs, outputs)","e28d0cf9":"model.summary()","4eac4ccf":"base_learning_rate = 0.0001\nmodel.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","ec3a4ca7":"loss0, accuracy0 = model.evaluate(val_ds)","8952df2c":"print(\"initial loss: {:.2f}\".format(loss0))\nprint(\"initial accuracy: {:.2f}\".format(accuracy0))","0e07bf59":"EarlyStop_callback = EarlyStopping(min_delta=0.001, patience=10, restore_best_weights=True)","8d7d0b92":"EPOCHS = 30\nhistory = model.fit(train_ds,\n                    epochs=EPOCHS,\n                    validation_data=val_ds,\n                   callbacks = [EarlyStop_callback])","c758c8a6":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot();\nprint(\"Minimum validation loss: {}\".format(history_df['val_loss'].min()))","7ec2a273":"history_df.loc[:, ['accuracy', 'val_accuracy']].plot();\nprint(\"Maximum validation accuracy: {}\".format(history_df['val_accuracy'].max()))","2e6193d4":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([min(plt.ylim()),1])\nplt.xticks(list(range(20)))\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xticks(list(range(20)))\nplt.xlabel('Epoch')\nplt.show()","7ed824df":"base_model.trainable = True","2c7db325":"print(\"Number of layers in the base model: \", len(base_model.layers))","e171b2c9":"fine_tune_from = 100\n\n# Freeze all the layers before the `fine_tune_at` layer\nfor layer in base_model.layers[:fine_tune_from]:\n    layer.trainable =  False","29904720":"model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer = tf.keras.optimizers.RMSprop(lr=base_learning_rate\/10),\n              metrics=['accuracy'])\nmodel.summary()","c4f0fc8d":"fine_tune_epochs = 5\ntotal_epochs = EPOCHS + fine_tune_epochs\n\nhistory_fine = model.fit(train_ds,\n                         epochs=total_epochs,\n                         initial_epoch=history.epoch[-1],\n                         validation_data=val_ds)","04335eee":"acc += history_fine.history['accuracy']\nval_acc += history_fine.history['val_accuracy']\n\nloss += history_fine.history['loss']\nval_loss += history_fine.history['val_loss']","ad4dbb49":"plt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.ylim([0.8, 1])\nplt.plot([EPOCHS-1,EPOCHS-1],\n          plt.ylim(), label='Start Fine Tuning')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.ylim([0, 1.0])\nplt.plot([EPOCHS-1,EPOCHS-1],\n         plt.ylim(), label='Start Fine Tuning')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()\n","e0a021c8":"for image_batch, label_batch in test_ds.shuffle(400).take(1):\n    predictions = model.predict_on_batch(image_batch)\n    predictions = tf.nn.softmax(predictions)\n    predictions = predictions.numpy()\n    \n    class_indices = np.argmax(predictions, axis = 1)\n    predicted_class = []\n#     print(label_batch)\n    for index in class_indices:\n        predicted_class.append(str(class_names[index]))\n    print(class_indices)\n    print(predicted_class)\n#     print(predictions)","ea7b68a5":"predictions = []\nimage_ids = []\nfor image_batch, label_batch in test_ds:\n    batch_predictions = model.predict_on_batch(image_batch)\n    batch_predictions = tf.nn.softmax(batch_predictions)\n    batch_predictions = batch_predictions.numpy()\n    \n    class_indices = np.argmax(batch_predictions, axis = 1)\n    predicted_class = []\n    for index in class_indices:\n        predicted_class.append(str(class_names[index]))\n    predictions += predicted_class\n    \n    str_img_ids = []\n    for img_id in label_batch:\n        str_img_ids.append(img_id.numpy().decode(\"utf-8\"))\n    \n#     image_ids += label_batch.numpy().tolist()\n    image_ids += str_img_ids","506a5672":"submission = pd.DataFrame({'file': image_ids, 'species': predictions})\nsubmission.head()","36faf364":"submission.to_csv('submission_plant.csv',index=False)","726872a2":"species_list = [\"Black-grass\", \"Charlock\", \"Cleavers\", \"Common Chickweed\", \"Common wheat\", \"Fat Hen\",\n                \"Loose Silky-bent\", \"Maize\", \"Scentless Mayweed\", \"Shepherds Purse\", \"Small-flowered Cranesbill\",\n                \"Sugar beet\"]\nclass_list = []\n\nfor i in range(0, predictions.shape[0]):\n    y_class = predictions[i, :].argmax(axis=-1)\n    class_list += [species_list[y_class]]\n\nsubmission_1 = pd.DataFrame()\nsubmission_1['file'] = sample_submission['file']\nsubmission_1['species'] = class_list\n\nsubmission_1.to_csv('submission_1.csv', index=False)\n\nprint('Submission file generated. All done.')","e07b909d":"submission_1.head()","99a85db6":"sample_submission = pd.read_csv(\"..\/input\/plant-seedlings-classification\/sample_submission.csv\")","9b6b7eda":"sample_submission = pd.read_csv(\"..\/input\/plant-seedlings-classification\/sample_submission.csv\")\nsubmission.head()","4c0e37bd":"submission.loc[:,class_names] = predictions","143009e8":"# Model Training","3a940967":"# Defining Model","c01c6d20":"# Prediction","1168137c":"# Fine Tuning","cbd7b764":"# Data Preprocessing"}}