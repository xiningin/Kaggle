{"cell_type":{"06c5cade":"code","9343bfaf":"code","1973c279":"code","54947c64":"code","73562f37":"code","dee93d09":"code","111d96e2":"code","8e759629":"code","4b3e928f":"code","6f803538":"code","c690503e":"code","07f6ea1f":"code","2be46ff7":"code","101ec7a6":"code","2bfeadb8":"code","3dcba85e":"code","fb0d3c36":"code","9350fb5a":"code","e3b05282":"code","dc392eaa":"code","cb5294e6":"code","a37dad54":"code","91e27b3e":"code","2383c3ec":"code","f4b95399":"code","472817f0":"code","24a1a32b":"code","93a6a9ac":"code","d6fa77e2":"code","c0cc089a":"code","d1172094":"code","2c47d43e":"code","1fad1f21":"code","a042d05c":"code","9b86e2a3":"code","dda6b395":"code","47ecf02b":"code","9f8a7515":"code","174f3c99":"code","0c1e0e6e":"code","1cb16e18":"code","b4e166eb":"code","264ff57d":"code","792deafc":"code","9735f454":"code","7c3374e8":"code","58097944":"code","79379f98":"code","ccb23fcc":"code","b18bfa12":"code","33f2cfc7":"code","4bda035d":"code","64a1a08a":"code","1b66743e":"code","138cb062":"code","e5e6b660":"code","53124ff3":"code","f0aa048c":"code","201e5e24":"code","85c5db80":"code","e3c0ddb4":"code","7e96a01a":"code","bcf941c1":"code","1798a58b":"code","61b42626":"code","db21ff5a":"code","b0267c69":"code","564417e1":"code","8355f5e2":"code","1048bc5d":"code","df5b4def":"code","2c76d163":"code","487a459f":"code","63edc421":"code","5431346b":"code","dc3df08c":"code","cb7da076":"code","096ed039":"code","31704c89":"code","2041e528":"code","2d23ca69":"code","d4881591":"code","c9e95a82":"code","7bd087e1":"code","96a71114":"code","3706649f":"code","2b0c36dd":"code","f85e3f50":"code","eac7e257":"code","98c65762":"code","017b09ce":"code","fc3681f9":"code","06bc26e5":"code","421e729f":"code","25af4a20":"code","493e4f4b":"code","abe7bb5e":"code","79266a21":"code","6de784c8":"code","f52262cc":"code","4ef91c2e":"code","2906b4ba":"code","8a799dd9":"code","467b1b93":"code","a7ca0820":"code","77e82d25":"code","1ffde1e1":"code","1c32a153":"code","413f6b1f":"code","d219aa2a":"code","3d929aaa":"code","0c7cb2ca":"code","a0a5aaea":"code","134c594d":"markdown","22df0ea8":"markdown","de3bf7c7":"markdown","3fb0fad9":"markdown","35729695":"markdown","9f44b14f":"markdown","76085b93":"markdown","62e26a61":"markdown","4c00a10a":"markdown","fa3e8bc2":"markdown","18d03f5f":"markdown","b7c59333":"markdown","a504c9cc":"markdown","5375d4ae":"markdown"},"source":{"06c5cade":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns # used for plot interactive graph.\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pylab import rcParams\n# figure size in inches\n%matplotlib inline\n\n# machine learning\nfrom sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","9343bfaf":"train = pd.read_csv('..\/input\/titanic\/train.csv')","1973c279":"test = pd.read_csv('..\/input\/titanic\/test.csv')","54947c64":"train.head()","73562f37":"plt.figure(figsize=(16, 8))\nsns.set(style=\"whitegrid\")\nsns.pairplot(train, height = 2.5 )\nplt.show()","dee93d09":"#correlation analysis\ncorr = train.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","111d96e2":"train.info()","8e759629":"test.head()","4b3e928f":"test[\"Survived\"] = 3.0","6f803538":"test.head()","c690503e":"combined = pd.concat([test, train], axis=\"rows\", sort=False)\n","07f6ea1f":"combined.head()","2be46ff7":"combined[\"Survived\"] = combined[\"Survived\"].astype(\"int32\")","101ec7a6":"combined.info()","2bfeadb8":"combined.describe()","3dcba85e":"combined.describe(include=['O'])","fb0d3c36":"combined.isna().sum()","9350fb5a":"combined[\"Age\"].describe()","e3b05282":"combined[\"Cabin\"].unique()","dc392eaa":"combined[\"Embarked\"].unique()","cb5294e6":"combined[combined[\"Embarked\"].isna()]","a37dad54":"combined['Embarked'].fillna('S',inplace=True)","91e27b3e":"combined.isna().sum()","2383c3ec":"#analysing the data\n#Gender of all the travelling passangers\nfig = plt.figure(figsize=(16,8)) \nlabels = combined['Sex'].value_counts(sort = True).index\nsizes = combined['Sex'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Gender',size = 20)\nplt.legend()\nplt.show()\n","f4b95399":"#analysing the data\n#passangers survived\nfig = plt.figure(figsize=(16,8)) \nlabels = train['Survived'].value_counts(sort = True).index\nsizes = train['Survived'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Survived',size = 20)\nplt.show()","472817f0":"#analysing the data\nfig = plt.figure(figsize=(16,8)) \nlabel= (\"C = Cherbourg\", \"Q = Queenstown\", \"S = Southampton\")\ncombined.groupby('Embarked').mean().sort_values(by='Fare',ascending='False')['Fare'].plot(kind='barh',title='Average fair for embarkment point', label=label,fontsize=10)\nplt.ylabel('Fare') \nplt.legend()\nplt.tight_layout()","24a1a32b":"combined['Title'] = combined.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())","93a6a9ac":"combined['Title'].unique()","d6fa77e2":"combined['Title'].value_counts()","c0cc089a":"normalized_title = {\n            'Mr':\"Mr\",\n            'Mrs': \"Mrs\",\n            'Ms': \"Mrs\",\n            'Mme':\"Mrs\",\n            'Mlle':\"Miss\",\n            'Miss':\"Miss\",\n            'Master':\"Master\",\n            'Dr':\"Officer\",\n            'Rev':\"Officer\",\n            'Col':\"Officer\",\n            'Capt':\"Officer\",\n            'Major':\"Officer\",\n            'Lady':\"Royalty\",\n            'Sir':\"Royalty\",\n            'the Countess':\"Royalty\",\n            'Dona':\"Royalty\",\n            'Don':\"Royalty\",\n            'Jonkheer':\"Royalty\"\n            \n}","d1172094":"combined.Title = combined.Title.map(normalized_title)","2c47d43e":"combined['Title'].value_counts()","1fad1f21":"combined.Cabin = combined.Cabin.fillna('U')","a042d05c":"combined.Cabin.value_counts()","9b86e2a3":"combined.Cabin = combined.Cabin.map(lambda x: x[0])","dda6b395":"combined.Cabin.value_counts()","47ecf02b":"grouped = combined.groupby(['Sex','Title','Pclass'])","9f8a7515":"combined.head()","174f3c99":"combined.info()","0c1e0e6e":"combined.isna().sum()","1cb16e18":"#Mr         757\n#Miss       262\n#Mrs        200\n#Master      61\n#Officer     23\n#Royalty      6\n#Name: Title, dtype: int64\n\ndef get_age_title(df,title):\n    return df[df[\"Title\"] == title][\"Age\"].median()\n","b4e166eb":"df1 = combined.copy()","264ff57d":"df1[\"Age_test\"] = df1[\"Title\"].apply(lambda x: get_age_title(df1,x))","792deafc":"df1.isna().sum()","9735f454":"df1.head()","7c3374e8":"df1[\"Age\"].fillna(df1[\"Age_test\"],inplace=True)","58097944":"df1.isna().sum()","79379f98":"df1.head()","ccb23fcc":"df2 = df1.drop([\"Age_test\"],axis=\"columns\")","b18bfa12":"df2.head()","33f2cfc7":"df2['Fare'].fillna((df2['Fare'].mean()), inplace=True)","4bda035d":"df2.isna().sum()","64a1a08a":"#let us identify the family size\ndf2[\"familySize\"] = df2['SibSp'] + df2['Parch'] + 1","1b66743e":"df2.head()","138cb062":"def age_group(age):\n    if age <= 5:\n        return 1\n    elif ((age > 5) & (age <=10)):\n        return 2\n    elif ((age > 10) & (age <=20)):\n        return 3\n    elif ((age > 20) & (age <= 45)):\n        return 4\n    elif ((age > 45) & (age <= 55)):\n        return 5\n    elif age > 55: \n        return 6","e5e6b660":"df21 = df2.copy()","53124ff3":"df21[\"age_group\"] = df21[\"Age\"].apply(lambda x: age_group(x))","f0aa048c":"df21.head()","201e5e24":"df2.select_dtypes('object').columns","85c5db80":"fig = plt.figure(figsize=(16,8)) \ndf21[df21[\"Survived\"] == 1].groupby(\"Sex\")[\"Survived\"].sum().plot(kind=\"bar\", title=\"Survived w.r.t Gender\")","e3c0ddb4":"fig = plt.figure(figsize=(16,8)) \ndf21[df21[\"Survived\"] == 1].groupby(\"age_group\")[\"Survived\"].sum().plot(kind=\"bar\", title=\"Survived w.r.t Gender\")","7e96a01a":"df21.Sex = df21.Sex.map({\"male\":0,\"female\":1})\ndf21.head()","bcf941c1":"title_dummies = pd.get_dummies(df21.Title , prefix = \"Title\")","1798a58b":"cabin_dummies = pd.get_dummies(df21.Cabin , prefix = \"Cabin\")\npclass_dummies = pd.get_dummies(df21.Pclass , prefix =\"Pclass\")\nembarked_dummies = pd.get_dummies(df21.Embarked , prefix = \"Embarked\")","61b42626":"df3 = pd.concat([df21 , title_dummies,cabin_dummies,\n                             pclass_dummies,embarked_dummies],axis = 1)","db21ff5a":"df21.head()","b0267c69":"df4 = df3.drop(['Name','Ticket','Pclass','Embarked','Cabin', 'Title','Age'],axis=\"columns\")","564417e1":"df4.head()","8355f5e2":"df4.info()","1048bc5d":"final_test = df4[df4[\"Survived\"] == 3]","df5b4def":"final_test.drop(['Survived'],axis=\"columns\", inplace=True)","2c76d163":"final_train = df4[df4[\"Survived\"] != 3]","487a459f":"final_test.head()","63edc421":"final_train.head()","5431346b":"X = final_train.drop('Survived', axis=1) \ny = final_train.Survived","dc3df08c":"label = final_train.Survived\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.5,random_state=42)","cb7da076":"lm_model = LogisticRegression()","096ed039":"lm_model.fit(X_train,y_train)","31704c89":"lm_model.predict(X_test)","2041e528":"print(lm_model.intercept_)","2d23ca69":"lm_model.coef_","d4881591":"test_predictions = lm_model.predict(X_test)","c9e95a82":"metrics.accuracy_score(test_predictions,y_test)","7bd087e1":"print(classification_report(y_test,test_predictions))","96a71114":"confusion_matrix(y_test,test_predictions)","3706649f":"predictions = lm_model.predict(final_test)","2b0c36dd":"passengerid = final_test[\"PassengerId\"]\noutput = pd.DataFrame({\"PassengerId\":passengerid , \"Survived\" : predictions})","f85e3f50":"output.to_csv(\"logistic_regression.csv\",index = False)","eac7e257":"dtree = DecisionTreeClassifier()","98c65762":"dtree.fit(X_train,y_train)","017b09ce":"test_predictions = dtree.predict(X_test)","fc3681f9":"print(classification_report(y_test,test_predictions))","06bc26e5":"confusion_matrix(y_test,test_predictions)","421e729f":"metrics.accuracy_score(test_predictions,y_test)","25af4a20":"d_predictions = dtree.predict(final_test)","493e4f4b":"passengerid = final_test[\"PassengerId\"]\noutput = pd.DataFrame({\"PassengerId\":passengerid , \"Survived\" : d_predictions})","abe7bb5e":"output.to_csv(\"dtreeClassifier.csv\",index = False)","79266a21":"rfc = RandomForestClassifier(n_estimators=200)","6de784c8":"rfc.fit(X_train,y_train)","f52262cc":"rfc_test_predict = rfc.predict(X_test)","4ef91c2e":"metrics.accuracy_score(rfc_test_predict,y_test)","2906b4ba":"print(classification_report(y_test,rfc_test_predict))","8a799dd9":"confusion_matrix(y_test,rfc_test_predict)","467b1b93":"rfc_predictions = rfc.predict(final_test)","a7ca0820":"passengerid = final_test[\"PassengerId\"]\noutput = pd.DataFrame({\"PassengerId\":passengerid , \"Survived\" : rfc_predictions})","77e82d25":"output.to_csv(\"rfClassifier.csv\",index = False)","1ffde1e1":"svc_model = SVC()","1c32a153":"svc_model.fit(X_train,y_train)","413f6b1f":"svc_test_predict = svc_model.predict(X_test)","d219aa2a":"metrics.accuracy_score(svc_test_predict,y_test)","3d929aaa":"confusion_matrix(y_test,svc_test_predict)","0c7cb2ca":"print(classification_report(y_test,svc_test_predict))","a0a5aaea":"model=KNeighborsClassifier() \nmodel.fit(X_train,y_train)\nprediction5=model.predict(X_test)\nmetrics.accuracy_score(prediction5,y_test)","134c594d":"\n**As per WikiPedia**\n\n* Total Passengers on Titanic were 2224. \n* Number of passengers saved 710\n\n# Observations based on Data\n\n\n**Passengers**\n\n\n* We have a data of 891 passengers \n* Average age of Passengers was 29 years\n* Oldest person on the Titanic was 80 years old\n* The biggest family was of 8 members\n* Most of the members were male (577\/891) - 64.8%\n\n**Survived**\n* Only 38.4% of passengers survived\n\n**Fare**\n* Maximum fare paid ~ 512\n* Average fare paid was ~ 32\n* Maximum Average fare was from Cherbourg\n  ","22df0ea8":"# RMS Titanic\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/fd\/RMS_Titanic_3.jpg\/1280px-RMS_Titanic_3.jpg)\n\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters. RMS Titanic was the largest ship afloat at the time she entered service and was the second of three Olympic-class ocean liners operated by the White Star Line. She was built by the Harland and Wolff shipyard in Belfast. Thomas Andrews, chief naval architect of the shipyard at the time, died in the disaster.\n\nhttps:\/\/en.wikipedia.org\/wiki\/RMS_Titanic\n\nFrom the WikiPedia page, we have the following table\n\n","de3bf7c7":"# Decision Tree Classifier","3fb0fad9":"# SVC","35729695":"# Preparing data for model building\n\n1. Filling the NA values\n2. New features","9f44b14f":"# LogisticRegression","76085b93":"# Train- Test split from the Training set","62e26a61":"# Random Forest Classifier","4c00a10a":"# Conversion to non-object types complete","fa3e8bc2":"# Data cleaning complete","18d03f5f":"\n\nFrom the above we see that there are different categories of titles present now we will normalise them into broader category below.\n\nThe below is the reference from the https:\/\/medium.com\/i-like-big-data-and-i-cannot-lie\/how-i-scored-in-the-top-9-of-kaggles-titanic-machine-learning-challenge-243b5f45c8e9.\n","b7c59333":"We have the Test and Train data set ready now we can try various ML models\n\n- final_train\n- final_test\n","a504c9cc":"# KNN","5375d4ae":"# This is my attempt for the Titanic Competition"}}