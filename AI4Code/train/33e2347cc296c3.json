{"cell_type":{"79813edf":"code","fa1b4e9a":"code","c21a24ad":"code","b8679f94":"code","fada8eb1":"code","257e8739":"code","a037005e":"code","83922593":"code","2d8838f9":"code","ce4186ef":"code","37251e99":"code","60244b90":"code","4347e299":"code","37a83a8f":"code","8c3539d5":"code","16855ada":"code","108de78e":"code","1e9ebe5f":"code","c221d7d0":"code","7b7e78d3":"markdown","5bb11c31":"markdown","18f966c8":"markdown","e28bf248":"markdown","a350f59a":"markdown","a82784b0":"markdown","c238bdd5":"markdown","0a468460":"markdown","57ac1f17":"markdown","e971ee3c":"markdown","ed253422":"markdown","addc7d68":"markdown"},"source":{"79813edf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa1b4e9a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","c21a24ad":"df=pd.read_csv(\"\/kaggle\/input\/chess-kingrook-vs-kingpawn-data-set\/kr-vs-kp.data\")\ndf","b8679f94":" df.head()","fada8eb1":"df.shape","257e8739":"df.info()","a037005e":"df.describe()","83922593":"df.isnull().sum()","2d8838f9":"df.duplicated().sum()","ce4186ef":"from sklearn.preprocessing import LabelEncoder\n","37251e99":"col=['f', 'f.1', 'f.2', 'f.3', 'f.4', 'f.5', 'f.6', 'f.7', 'f.8', 'f.9',\n       'f.10', 'f.11', 'l', 'f.12', 'n', 'f.13', 'f.14', 't', 'f.15', 'f.16',\n       'f.17', 'f.18', 'f.19', 'f.20', 'f.21', 't.1', 'f.22', 'f.23', 'f.24',\n       'f.25', 'f.26', 'f.27', 'f.28', 't.2', 't.3', 'n.1', 'won']\nfor i in col:\n    df[i]=LabelEncoder().fit_transform(df[i])","60244b90":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae,median_absolute_error as mee,classification_report as cr,accuracy_score as ac","4347e299":"df.columns","37a83a8f":"x=df[['f', 'f.1', 'f.2', 'f.3', 'f.4', 'f.5', 'f.6', 'f.7', 'f.8', 'f.9',\n       'f.10', 'f.11', 'l', 'f.12', 'n', 'f.13', 'f.14', 't', 'f.15', 'f.16',\n       'f.17', 'f.18', 'f.19', 'f.20', 'f.21', 't.1', 'f.22', 'f.23', 'f.24',\n       'f.25', 'f.26', 'f.27', 'f.28', 't.2', 't.3', 'n.1']]\ny=df[['won']]","8c3539d5":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=40)","16855ada":"from sklearn.tree import DecisionTreeClassifier \nmodel=DecisionTreeClassifier()","108de78e":"model.fit(x_train,y_train)","1e9ebe5f":"y_pre1 = model.predict(x_test)\ny_pre1","c221d7d0":"from sklearn.model_selection import cross_val_score\nprint(ac(y_test,y_pre1)*100)\nsco1=(cross_val_score(model,x,y,cv=5))\nprint(np.mean(sco1)*100)","7b7e78d3":"# **Accuracy**","5bb11c31":"# **Train the Model**","18f966c8":"# **Missing values**","e28bf248":"# **Load Dataset**","a350f59a":"# **Duplicate Entries**","a82784b0":"# **Statistical Summary**","c238bdd5":"# **Label Encoding**","0a468460":"# **Dimensions of Dataset**","57ac1f17":"# **Importing Libraries**","e971ee3c":"# **DecisionTree**","ed253422":"# **Peak at the Data**","addc7d68":"# **Information of the dataset**"}}