{"cell_type":{"f488fb33":"code","c341a505":"code","40dd02ce":"code","695fbcc2":"code","eec76fb0":"code","a7164cdc":"code","d5ac0f36":"code","48f32244":"code","ca8c9754":"code","563f4cd2":"code","a8ba0738":"code","128132a0":"code","22b1150c":"code","5c793849":"code","da2c7834":"code","7589b31b":"code","62eccc4d":"markdown","812d34da":"markdown","05d27bea":"markdown","7256b526":"markdown","980b14d8":"markdown","32ad407a":"markdown","961444fb":"markdown","b456b467":"markdown","642c6cea":"markdown","6c52417c":"markdown"},"source":{"f488fb33":"# Importing libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# Running this will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# The print function shows me the file path so I can load the files","c341a505":"train_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\n# Head function shows me the first 5 rows\ntrain_data.head()","40dd02ce":"test_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest_data.head()","695fbcc2":"train_data.info()","eec76fb0":"test_data.info()","a7164cdc":"ImageId = test_data.index + 1\n# I made ImageId = test_data.index + 1 because the range of the submission file has to be [1:28000] and the range of test_data is [0:27999]\ny=train_data.iloc[:,0]\n# iloc function allows me to select rows and columns\n# I want the label column (the first column) to be \"y\"\nX=train_data.iloc[::,1:]\n# I want the hole dataset except for the label to be \"x\"\nX_test=test_data\n# test_data doesn't have a label column so I don't need iloc","d5ac0f36":"y","48f32244":"X","ca8c9754":"X_test","563f4cd2":"X=X\/255\nX_test=X_test\/255","a8ba0738":"from sklearn.model_selection import train_test_split\n# To validate my model before using it in the actual test dataset I need a validation dataset\n# train_test_split allows me to split my original training dataset into 2\nX_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.1,random_state=1)\n# I will use 10% of the original training dataset as my validation dataset\nX_train.shape,X_val.shape,y_train.shape,y_val.shape,X_test.shape","128132a0":"from sklearn.neural_network import MLPClassifier\n# Class MLPClassifier implements a multi-layer perceptron (MLP) algorithm that trains using Backpropagation.\n# The advantage of Multi-layer Perceptron is the capability to learn non-linear models.\nmodel = MLPClassifier(hidden_layer_sizes=(100,), max_iter=50, alpha=1e-5, solver='sgd', verbose=10, random_state=1, learning_rate='constant', learning_rate_init=0.1).fit(X_train, y_train)\n# I found that the model worked best using solver sgd, alpha (penalty parameter) of 1e-5 and an initial learning rate of 0.1 (the defaults are 'adam', 1e-4 and 0.001)\nprint(model.score(X_train, y_train))","22b1150c":"y_pred=model.predict(X_val)\nprint(model.score(X_val,y_val))","5c793849":"df_val=pd.DataFrame({'actual_value':y_val, 'predicted_value':y_pred})\ndf_val.reset_index(drop=True, inplace=True)\ndf_val","da2c7834":"pred=model.predict(X_test)\npred","7589b31b":"output = pd.DataFrame({'ImageId': ImageId, 'Label': pred})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","62eccc4d":"Loading results into submission file","812d34da":"Analyze data","05d27bea":"Predict on test set","7256b526":"Load data","980b14d8":"Define model","32ad407a":"Comparing predicted values with actual values","961444fb":"Predict on validation set","b456b467":"Split x for training and validation","642c6cea":"Define x and y","6c52417c":"Scaling data: pixels have values from 0 to 255, I have to scale them so they have a range from 0 to 1 for my model to work"}}