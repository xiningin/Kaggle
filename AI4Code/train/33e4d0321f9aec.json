{"cell_type":{"2a16a55e":"code","cc2e0693":"code","051e7e24":"code","39450fce":"code","b04c790e":"code","65fca845":"code","12111515":"code","521434eb":"code","4f69eacc":"code","5cea901b":"code","ffb910e1":"code","34824814":"code","e9022b54":"code","2efc95f2":"code","0c468161":"code","6945b841":"code","dcc65727":"code","9c81d3f8":"markdown","f2aefcdd":"markdown"},"source":{"2a16a55e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cc2e0693":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.pyplot import imshow\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom keras import layers\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Model\n\nimport keras.backend as K\nfrom keras.models import Sequential\n\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)\n\n%matplotlib inline","051e7e24":"Train = '..\/input\/train\/'\nTest = '..\/input\/test\/'\nLabels = '..\/input\/train.csv'\nSample = '..\/input\/sample_submission.csv'","39450fce":"df1 = pd.read_csv(Labels)\ndf1.Id.value_counts()","b04c790e":"train_names = list(f[:36] for f in os.listdir(Train))\ntest_names = list(f[:36] for f in os.listdir(Test))\nprint('Training Data Length - {}'.format(len(train_names)))\nprint('Test Data Length - {}'.format(len(test_names)))","65fca845":"i=34\n# We can check what is the Id of the whale and mark it while plotting the Image\ntitle = df1[df1['Image']==train_names[i]]\nimg = mpimg.imread(os.path.join(Train,train_names[i]))\nlabel =  'Whale Id -' + title['Id'].to_string().split('   ')[1]\nplt.title(label)\nplt.imshow(img)\nprint(title)","12111515":"def prepareImages(data, m, dataset):\n    print(\"Preparing images\")\n    X_train = np.zeros((m, 100, 100, 3))\n    count = 0\n    \n    for fig in data['Image']:\n        #load images into images of size 100x100x3\n        img = image.load_img(\"..\/input\/\"+dataset+\"\/\"+fig, target_size=(100, 100, 3))\n        x = image.img_to_array(img)\n        x = preprocess_input(x)\n\n        X_train[count] = x\n        count += 1\n    \n    return X_train","521434eb":"def prepare_labels(y):\n    values = np.array(y)\n    label_encoder = LabelEncoder()\n    integer_encoded = label_encoder.fit_transform(values)\n    # print(integer_encoded)\n\n    onehot_encoder = OneHotEncoder(sparse=False)\n    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)\n    # print(onehot_encoded)\n\n    y = onehot_encoded\n    # print(y.shape)\n    return y, label_encoder","4f69eacc":"X = prepareImages(df1, df1.shape[0], \"train\")\nX \/= 255","5cea901b":"y, label_encoder = prepare_labels(df1['Id'])","ffb910e1":"model = Sequential()\n\nmodel.add(Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0', input_shape = (100, 100, 3)))\nmodel.add(BatchNormalization(axis = 3, name = 'bn0'))\nmodel.add(Activation('relu'))\n\nmodel.add(Conv2D(64, (5, 5), strides = (1, 1), name = 'conv1'))\nmodel.add(BatchNormalization(axis = 3, name = 'bn1'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D((2, 2), name='max_pool'))\nmodel.add(Conv2D(64, (3, 3), strides = (1,1), name=\"conv2\"))\nmodel.add(Activation('relu'))\nmodel.add(AveragePooling2D((3, 3), name='avg_pool'))\n\nmodel.add(Flatten())\nmodel.add(Dense(500, activation=\"relu\", name='rl'))\nmodel.add(Dropout(0.8))\nmodel.add(Dense(y.shape[1], activation='softmax', name='sm'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=\"adam\", metrics=['accuracy'])\nmodel.summary()","34824814":"from keras.callbacks import EarlyStopping\n# define early stopping callback\nearlystop = EarlyStopping(monitor='val_acc', min_delta=0.0001, patience=5, verbose=1, mode='auto')\ncallbacks = [earlystop]\nhistory = model.fit(X, y, epochs=100, batch_size=150, verbose=1,validation_split=0.20,callbacks=callbacks)","e9022b54":"col = ['Image']\ntest_df = pd.DataFrame(test_names, columns=col)\ntest_df['Id'] = ''","2efc95f2":"X = prepareImages(test_df, test_df.shape[0], \"test\")\nX \/= 255","0c468161":"predictions = model.predict(np.array(X), verbose=1)\n","6945b841":"for i, pred in enumerate(predictions):\n    test_df.loc[i, 'Id'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))","dcc65727":"test_df.to_csv('submission.csv', index=False)","9c81d3f8":"## Labels\nLets check what different types of labels do we have","f2aefcdd":"## Training Images\nNow let's check some images"}}