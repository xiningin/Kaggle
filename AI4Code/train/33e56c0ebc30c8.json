{"cell_type":{"cd13fbdb":"code","66ffb709":"code","69d505f5":"code","c61ab6fb":"code","11fd69eb":"markdown","56c0feab":"markdown"},"source":{"cd13fbdb":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport os\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66ffb709":"df = pd.read_csv(\"\/kaggle\/input\/ads-ctr-optimisation\/Ads_CTR_Optimisation.csv\")\ndf.head(10)","69d505f5":"df.shape","c61ab6fb":"N = 10000\nd = 10\nprizes = [0] * d\ntotal_prize = 0\nselected = []\nones = [0] * d\nzeros = [0] * d\n\nfor n in range(1,N):\n    ad = 0\n    max_th = 0\n    for i in range(0,d):\n        random_beta = random.betavariate ( ones[i] + 1 , zeros[i] + 1)\n        if random_beta > max_th:\n            max_th = random_beta\n            ad = i\n    selected.append(ad)   \n    prize = df.values[n,ad]\n    if prize == 1:\n        ones[ad] = ones[ad] + 1\n    else:\n        zeros[ad] = zeros[ad] + 1\n    \n    total_prize = total_prize + prize\n    \nprint(\"Total Prize:\" , total_prize)\n\nplt.figure(figsize = (10,6))\nplt.hist(selected)\nplt.show","11fd69eb":"# Thompson Sampling\nThompson sampling is an algorithm for online decision problems where actions are taken sequentially in a manner that\nmust balance between exploiting what is known to maximize immediate performance and investing to accumulate\nnew information that may improve future performance. The\nalgorithm addresses a broad range of problems in a computationally efficient manner and is therefore enjoying wide\nuse. This tutorial covers the algorithm and its application,\nillustrating concepts through a range of examples, including\nBernoulli bandit problems, shortest path problems, product\nrecommendation, assortment, active learning with neural\nnetworks, and reinforcement learning in Markov decision\nprocesses. Most of these problems involve complex information structures, where information revealed by taking an\naction informs beliefs about other actions. We will also discuss when and why Thompson sampling is or is not effective\nand relations to alternative algorithms.","56c0feab":"## Libraries and Utilities"}}