{"cell_type":{"ce06ac9c":"code","e30c7446":"code","70698feb":"code","ec4c1620":"code","bb6ae75d":"code","12012eca":"code","f0027195":"code","5e3fdc26":"code","419165fb":"code","50d269e6":"code","686ce95a":"code","3e583c46":"code","f7b3c066":"code","7ab29b26":"code","8fb755d6":"code","d0bdb1f9":"code","2432d3e0":"code","4b5fc166":"code","dc535248":"code","f46dd56c":"code","3c117878":"code","61002fdc":"code","eac6134b":"code","d612fb96":"code","0a2a8d86":"code","ebe16ad0":"code","37eb4634":"code","9768128f":"code","1651cfb5":"code","46759913":"code","7aa41021":"code","8f5f6aa1":"code","1f75e172":"code","a51aee83":"code","d725634a":"code","79103715":"code","fde3f58e":"code","91743f14":"code","a3e0d427":"code","c3800969":"code","7b7fb283":"code","9741c7fe":"code","d3f4d14e":"code","842776e4":"code","68cea398":"code","f76bf9dc":"code","94fd3361":"code","9ad1eea1":"markdown","a2c4aa97":"markdown","694781ad":"markdown","5e3055da":"markdown","edc12670":"markdown","ba4955e6":"markdown","74225551":"markdown","ae3e83a5":"markdown","740ceb4e":"markdown","c19aeceb":"markdown","836f1a8e":"markdown","59372c6a":"markdown","9c3cb8ce":"markdown","6666fab8":"markdown","b46f4de5":"markdown","e9bcf436":"markdown","f97663ab":"markdown","32dcb40e":"markdown","5efb2844":"markdown","e0e2721b":"markdown","4d7f3c7e":"markdown","f87b1f90":"markdown","3ea5350e":"markdown","f8d49106":"markdown","3587f704":"markdown","0c5d878d":"markdown","a58254d9":"markdown","e58fdbb4":"markdown","fc4dc6f9":"markdown","b2ca5d28":"markdown","00e6035f":"markdown","fae65214":"markdown","8e2d858c":"markdown","28866e7f":"markdown","493b9caa":"markdown","1d544b26":"markdown","b8f74e82":"markdown","e0ca27e8":"markdown","7d684b44":"markdown","38dfdd9a":"markdown","0e8470eb":"markdown","5f9128c2":"markdown","a8caad20":"markdown","2bac559d":"markdown","659ab7ed":"markdown","5820f810":"markdown","20e3bf12":"markdown","70db8a4a":"markdown","2c38754a":"markdown","897cb083":"markdown","793c3d89":"markdown","b527f807":"markdown","d8754f87":"markdown","01ab198c":"markdown","ffd74a2b":"markdown","82532f05":"markdown","c11629f1":"markdown","c3e380b8":"markdown","7fefaabd":"markdown","9fdb66dd":"markdown","8f6fd321":"markdown","6238ba10":"markdown"},"source":{"ce06ac9c":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nimport warnings\nwarnings.filterwarnings('ignore')","e30c7446":"sns.set_style('darkgrid')","70698feb":"data = pd.read_csv('..\/input\/electric_faults_data.csv')\ndata.head()","ec4c1620":"print(\"The shape of the data is :\",data.shape)","bb6ae75d":"data.describe()","12012eca":"plt.figure(figsize=(12,7))\nf = sns.heatmap(data.isnull(), cbar = False, cmap = 'viridis')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.title(\"Heatmap of Missing Values\", fontsize = 15)\nplt.show()","f0027195":"data['tripping_reason'].value_counts()","5e3fdc26":"data['tripping_reason'].fillna(value = 'transient fault', inplace = True)","419165fb":"data['other_circuit'].value_counts()","50d269e6":"data.drop('other_line_status', inplace = True, axis  =1)\ndata.drop('observation', inplace = True, axis  =1)\ndata.drop('other_circuit', inplace = True, axis  =1)","686ce95a":"data['repair_carried'].value_counts()","3e583c46":"data['repair_carried'].fillna(value = 'nil', inplace= True)","f7b3c066":"#Separating year\ndata['trip_year'] = pd.to_datetime(data['date_of_trip'], dayfirst= True ).dt.year\ndata['restore_year'] = pd.to_datetime(data['date of restoration'], dayfirst= True ).dt.year\n\n#Separating month\ndata['trip_month'] = pd.to_datetime(data['date_of_trip'], dayfirst= True ).dt.month\ndata['restore_month'] = pd.to_datetime(data['date of restoration'], dayfirst= True ).dt.month\n\n\n#separating hours\ndata['trip_hour'] = pd.to_datetime(data['time_of_trip']).dt.hour\ndata['restore_hour'] = pd.to_datetime(data['time_of_restoration']).dt.hour","7ab29b26":"data.head(10)","8fb755d6":"data['trip_month'] = data['trip_month'].map({1:'January', 2:'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July',\n                               8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'})\n\ndata['restore_month'] = data['restore_month'].map({1:'January', 2:'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July',\n                               8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'})\n","d0bdb1f9":"data['weekday'] = pd.to_datetime(data['date_of_trip']).dt.weekday","2432d3e0":"data['weekday'] = data['weekday'].map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})","4b5fc166":"temp = data['weekday'].value_counts().reset_index()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips on Weekdays',fontsize = 15)\nf = sns.barplot(x = temp['index'], y = temp['weekday'], palette = 'hls')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Weekdays', fontsize = 16)\nplt.yticks(list(range(max(temp['weekday']))))\nplt.show()","dc535248":"temp = data['trip_year'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Years',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'Set2')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Years', fontsize = 16)\nplt.yticks(list(range(max(temp))))\nplt.show()","f46dd56c":"temp = data['trip_month'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Months',fontsize = 15)\nf = sns.barplot(x = temp.index[::-1], y = temp.values[::-1], palette = 'rainbow')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Months', fontsize = 16)\nplt.yticks(list(range(max(temp))))\nplt.show()","3c117878":"temp = data['weather'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips in Weather',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'inferno')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Weather', fontsize = 16)\nplt.yticks(list(range(0,max(temp)+2)))\nplt.show()","61002fdc":"temp = data['line_trip'].value_counts().reset_index()\n\nplt.figure(figsize=(9,9))\nf = plt.pie(x = temp['line_trip'],labels = ['Yes','No'], colors=('lightblue','orange'), autopct= \"%1.1f%%\")\nplt.title('Line Trips at other End', fontsize  = 15)\nplt.show()","eac6134b":"temp = data['tripping_reason'].value_counts()\n\nplt.figure(figsize= (12,7))\nplt.title('Trips Reasons',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'autumn')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13}, rotation = 30)\nplt.xlabel('Reasons', fontsize = 16)\nplt.yticks(range(max(temp)+2))\nplt.show()","d612fb96":"plt.figure(figsize= (15,10))\n#plt.suptitle(\"Distributions of Different Features\", fontsize = 20)\n#Histograms\nplt.subplot(3,3,1)\nsns.distplot(data['voltage'], rug = True, kde = False)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Voltage',fontsize = 15)\n\nplt.subplot(3,3,2)\nsns.distplot(data['load_of_line'], color= 'green',rug = True, kde = False)\nplt.title('Distribution of Load of Line',fontsize = 15)\nplt.xlabel('Load on line in Amperes', fontsize = 12)\n\nplt.subplot(3,3,3)\nsns.distplot(data['frequency'], rug= True, color= 'orange', kde = False)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Frequency',fontsize = 15)\n\n\n#Kde Plots\nplt.subplot(3,3,4)\nsns.kdeplot(data['voltage'], shade = True)\nplt.xlabel('Voltage in KiloVolts', fontsize = 12)\nplt.title('Distribution of Voltage',fontsize = 15)\n\nplt.subplot(3,3,5)\nsns.kdeplot(data['load_of_line'], shade = True, color = 'g')\nplt.title('Distribution of Load of Line',fontsize = 15)\nplt.xlabel('Load on line in Amperes', fontsize = 12)\n\nplt.subplot(3,3,6)\nsns.kdeplot(data['frequency'],shade= True, color = 'Orange')\nplt.title('Distribution of Frequency',fontsize = 15)\n\n#Box Plots\nplt.subplot(3,3,7)\nsns.boxplot(x = data['voltage'], orient = 'v',color= 'b', boxprops=dict(alpha=.5))\nplt.subplot(3,3,8)\nsns.boxplot(x = data['load_of_line'], orient = 'v', color= 'g', boxprops=dict(alpha=.5))\nplt.subplot(3,3,9)\nsns.boxplot(x = data['frequency'], orient = 'v', color= 'Orange', boxprops=dict(alpha=.5))\n\nplt.tight_layout()\nplt.show()","0a2a8d86":"sns.jointplot(x = data['load_of_line'], y = data['voltage'], kind = 'reg', color= 'g')\n\nplt.show()","ebe16ad0":"sns.jointplot(x = data['load_of_line'], y = data['frequency'], kind = 'reg', color= 'darkorange')\nplt.show()","37eb4634":"sns.jointplot(x = data['voltage'], y = data['frequency'], kind = 'reg', color = 'blue')\nplt.show()","9768128f":"temp = data['trip_hour'].value_counts()\nplt.figure(figsize= (10,10))\n\nplt.subplot(2,1,1)\nsns.pointplot(x = temp.index, y = temp.values ,palette= 'Reds')\nsns.pointplot(x = temp.index, y = temp.values ,join= True, color = 'r',markers = '')\nplt.title('Trips on Hours',fontsize = 15)\nplt.xlabel('Trip Hours of Day', fontsize = 12)\nplt.ylabel('Number of Hours', fontsize = 12)\nplt.yticks([0,1,2,3,4])\n\ntemp = data['restore_hour'].value_counts()\nplt.subplot(2,1,2)\nsns.pointplot(x = temp.index, y = temp.values ,palette= 'Greens')\nsns.pointplot(x = temp.index, y = temp.values ,join= True, color='g', markers = '')\nplt.title('Restoration on Hours',fontsize = 15)\nplt.xlabel('Restore Hours of Day', fontsize = 12)\nplt.ylabel('Number of Hours', fontsize = 12)\nplt.yticks([0,1,2,3,4])\nplt.show()","1651cfb5":"for i in range(0,len(data['repair_carried'])):\n    if data['repair_carried'][i] == 'nil':\n        data['repair_carried'][i] = 'None'\ntemp = data['repair_carried'].value_counts()\nplt.figure(figsize= (12,7))\nplt.title('Repairs Carried',fontsize = 15)\nf = sns.barplot(x = temp.index, y = temp.values, palette = 'Set1')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel('Repair Types', fontsize = 15)\nplt.yticks(range(max(temp)+2))\nplt.show()","46759913":"plt.figure(figsize= (9,7))\nplt.title('Nature of the fault',fontsize = 15)\nf = sns.countplot(data['nature'], palette= 'hls')\nf.set_xticklabels(labels = f.get_xticklabels(), fontdict={'fontsize':13})\nplt.xlabel(\"Types\", fontsize= 14)\nplt.show()","7aa41021":"data['line_trip'] = data['line_trip'].map({'no':0, 'yes':1})","8f5f6aa1":"data['type_of_fault'] = data['type_of_fault'].map({'low':-1, 'medium':0, 'high': 1})","1f75e172":"data.head()","a51aee83":"X_full = data.iloc[:, [3,4,6]].values\ny_full = data['type_of_fault'].values","d725634a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_full)\nX_full = sc.transform(X_full)","79103715":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_full, y_full, test_size = 0.25, random_state = 1)","fde3f58e":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier()\nclassifier.fit(X_train, y_train)","91743f14":"y_test_pred = classifier.predict(X_test)","a3e0d427":"from sklearn.metrics import classification_report","c3800969":"print(classification_report(y_train, classifier.predict(X_train)))","7b7fb283":"from sklearn.metrics import classification_report\ncr = classification_report(y_test, y_test_pred)\nprint(cr)","9741c7fe":"t = input(\"Enter Trip\\t\")\nl = float(input(\"Enter load of line\\t\"))\nf = float(input(\"Enter Frequency\\t\"))\n\nif t =='yes':\n    t = 1\nelif t == 'no':\n    t = 0\n    \nsamp = np.array([[int(t), int(l), float(f)]])\nsamp = sc.transform(samp)\nres = classifier.predict(samp)\nprint(\"\\n------Output-----\\n\")\nif res == -1:\n    print(\"Low Fault\")\nelif res == 0:\n    print(\"Medium Fault\")\nelse:\n    print(\"High Fault\")","d3f4d14e":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(solver= 'newton-cg',multi_class= 'multinomial')\nclassifier.fit(X_train, y_train)","842776e4":"y_test_pred = classifier.predict(X_test)","68cea398":"print(classification_report(y_train, classifier.predict(X_train)))","f76bf9dc":"from sklearn.metrics import classification_report\ncr = classification_report(y_test, y_test_pred)\nprint(cr)","94fd3361":"t = input(\"Enter Trip\\t\")\nl = float(input(\"Enter load of line\\t\"))\nf = float(input(\"Enter Frequency\\t\"))\n\nif t =='yes':\n    t = 1\nelif t == 'no':\n    t = 0\n    \nsamp = np.array([[int(t), int(l), float(f)]])\nsamp = sc.transform(samp)\nres = classifier.predict(samp)\nprint(\"\\n------Output-----\\n\")\nif res == -1:\n    print(\"Low Fault\")\nelif res == 0:\n    print(\"Medium Fault\")\nelse:\n    print(\"High Fault\")","9ad1eea1":"Due to small size of data choosing lot of features will increase the chances of overfitting and since lack of sufficient evidence in many fatures we will limit our feature list to **line_trip**, **load_of_line** and **frequency**","a2c4aa97":"#### voltage vs frequency","694781ad":"by [Prashant Brahmbhatt](https:\/\/www.github.com\/hashbanger)","5e3055da":"#### Accuracy on Train Test","edc12670":"### Versus Plots","ba4955e6":"#### Accuracy on Train Set","74225551":"Mapping the days number to names, where 0 maps to monday and so on","ae3e83a5":"# Electrical Failure Analysis","740ceb4e":"Converting the **line_trip** feature from categorical to numeric","c19aeceb":"Since we observe that the column contain only single and almost definitely occuring type of value so it is not suggestable to include this column having very less entropy, in the model","836f1a8e":"Getting the weekdays from the date","59372c6a":"Our Target Class is the **type_of_fault** and **nature** of the fault","9c3cb8ce":"## Handling Missing Values","6666fab8":"#### Preparing the Train Fetures and Train Labels","b46f4de5":"Observation: (**Histogram, Kernel Plot and Box Plot**)  \n \nWe can see that **Voltage** and **Current** have considerable spread however there is very little spread in the **frequency** parameter.  \nSince it is not entirely fixed rather than dropping it we can scale it for the model.  \nThere is not a sufficient amount of data to have some outliers either.","e9bcf436":"Observation: (**Line Plot**)  \nWe can observe that the most fault peaks (plot 1 in red), has highest peaks during the very early morning and during dusk.  \nThere is not sufficient regular pattern so it may or may not be a considerable parameter.","f97663ab":"Using **Standardization Equation** for scaling  \n![sc](https:\/\/s3-ap-south-1.amazonaws.com\/av-blog-media\/wp-content\/uploads\/2015\/09\/24071007\/Z-score-form.png)","32dcb40e":"Importing the dataset","5efb2844":"## EDA","e0e2721b":"There is a slight missing terms in the **tripping_reason** column.  \nSo we can fill it with the most frequent value","4d7f3c7e":"filling the missing value as ***transient_fault***","f87b1f90":"The nature column is also a target class","3ea5350e":"Separating the **years**, **months** and **hours** from the date and time","f8d49106":"So we got approximately 91% accuracy on the train set.","3587f704":"### Mapping the **line_trip** feature","0c5d878d":"#### Splitting the data into 75% Train set and 25% Test Set","a58254d9":"Observation: (**Barplot**)    \nWe can see that year **2016** has most faults above all while 2015 has the least.","e58fdbb4":"So we got approximately 94% accuracy on the train set.","fc4dc6f9":"### Using Multinomial Logistic Regression","b2ca5d28":"#### Voltage vs load_of_line","00e6035f":"Observation: (**Barplot**)  \nTrips in the faults has been more than thrice than no trips.","fae65214":"#### Accuracy on Test Set","8e2d858c":"### de nada!","28866e7f":"There is not sufficient data to classify this column.","493b9caa":"Mapping the **type_of_fault** to integer values signified by:  \n**-1** - Low Fault  \n**0** - Medium Fault  \n**1** - High Fault","1d544b26":"### Using KNeighborsClassifier","b8f74e82":"Observation: (**Barplot**)  \nThe faults are mostly during Clear skies.","e0ca27e8":"#### To check for single observation","7d684b44":"So we got approximately 94% accuracy on the train set.","38dfdd9a":"#### Importing libraries","0e8470eb":"Observing the missing values in **repairs_carried** column","5f9128c2":"#### Visualizing the nature column","a8caad20":"Observations:  \nthe columns **other_line_status** and **observation** are almost all missing so we can drop those.  \nWe will observe the significant missing values in column **repairs** before dropping.","2bac559d":"As we have previously observed **frequency** needs to be scaled and so do the **load_of_line** parameter","659ab7ed":"Another column having missing values is **other_circuit**","5820f810":"### Mapping the Target Class","20e3bf12":"#### load_of_line vs frequency","70db8a4a":"So we got approximately 93% accuracy on the train set.","2c38754a":"Any suggestions or correction are welcome with heart!","897cb083":"### Scaling the features","793c3d89":"filling it with most frequent value","b527f807":"Observation: (**Barplot**)  \nAmong the faults reasons that most account of faults is due to **transient_fault** or **bad_weather**","d8754f87":"![Electrical](http:\/\/www.belyeapower.com\/assets\/templates\/belyea\/images\/animation3.jpg)","01ab198c":"_______","ffd74a2b":"#### Scaling the data","82532f05":"Mapping the integer **month** values to names","c11629f1":"Mostly there were no repairs were done or maybe not recorded and if there are no faults then the repairs would be **None** for them too. So we can rule this out as a prarmeter","c3e380b8":"#### Accuracy on Test Set","7fefaabd":"Observation: (**Joint Plots**)  \n1. **Voltage vs load_of_line** shows a sufficiently strong negative correlation of -0.76.  \n    So we might consider dropping the voltage parameter since the dataset is not very large and we want to reduce any multicollinearlity also  \n    as per Occam's Razor principle we will drop it if the accuracy is not drastically effected.  \n2. **load_of_line vs frequency** does not have any significant relationship.  \n3. same goes for **voltage vs frequency**.  ","9fdb66dd":"Finally the data look as below","8f6fd321":"Observation: (**Barplot**)  \nFrom the above plot we can observe that most number of faults are during Summer season and tens to happen less during the winter months.","6238ba10":"## Predictive Modelling"}}