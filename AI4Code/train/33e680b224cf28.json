{"cell_type":{"b6036b1b":"code","aef27727":"code","7705cab1":"code","1093e91b":"code","6a4e5737":"code","1567ab82":"code","9bd144a7":"code","a6cfec2e":"code","96878395":"code","e38589d5":"code","1c2cfebc":"code","39f4edc4":"code","72c1cfab":"code","cc15a6c0":"code","7331536e":"code","836e5b86":"code","b6800759":"code","ff7fd6c2":"code","f23c4fe7":"code","a59395ac":"code","e4df2301":"code","d946470c":"code","95c471f7":"code","08e56949":"code","739a4735":"code","04fc0b0e":"code","f425c401":"code","1ec8f609":"code","524cafb9":"code","ac1b06b3":"code","621585a7":"code","250db334":"code","4b04ba09":"code","14e424be":"code","f1e89165":"code","ff195831":"code","0f3ee10a":"code","851c4396":"code","6d15e2c7":"code","44e9e8ce":"code","a1993a3b":"code","38bb1155":"code","a0d2fd43":"code","88564179":"code","69fbe56f":"code","69e96530":"code","d5eadcd2":"code","c6a37c5b":"code","fda6c6f3":"code","fad30d42":"code","ae1a68bd":"code","43b35071":"code","03c5a1f0":"code","ed8665fa":"code","41fab3db":"code","ac4c3a96":"code","a93bcca0":"code","6802d3c8":"code","200d724a":"code","df33922d":"code","776315d6":"code","7f616ac1":"code","ad7ad3e8":"code","6f8fa2fe":"code","12092e7d":"code","11ce89a0":"code","d6fe2ff5":"code","7a792f19":"code","a2af2d50":"markdown","ad46a7a7":"markdown","3c4c57f4":"markdown","4ff7a077":"markdown","7582d0d7":"markdown","9043106b":"markdown","f79a1c70":"markdown","8641f121":"markdown","88f8d4a1":"markdown","2196c414":"markdown","a02f2bee":"markdown","cb7b2871":"markdown"},"source":{"b6036b1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aef27727":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7705cab1":"#import Data set\ndf=pd.read_csv('..\/input\/housing-data\/Housing_Data.csv')","1093e91b":"df.head()","6a4e5737":"#Our objective is to predict the SalePrice based on several Features, \n# Correlation overview:\ndf.corr()['SalePrice'].sort_values()","1567ab82":"sns.scatterplot(data=df,x='Overall Qual', y='SalePrice')\nplt.axhline(y=200000, color='r')","9bd144a7":"df['Overall Qual'].unique()","a6cfec2e":"df[(df['Overall Qual']>8) & (df['SalePrice']<200000)][['SalePrice','Overall Qual']]","96878395":"sns.scatterplot(data=df, x='Gr Liv Area', y='SalePrice')\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","e38589d5":"df[(df['Gr Liv Area']>4000) & (df['SalePrice']<200000)][['SalePrice','Gr Liv Area']]","1c2cfebc":"index_drop=df[(df['Gr Liv Area']>4000) & (df['SalePrice']<200000)].index\ndf=df.drop(index_drop, axis=0)","39f4edc4":"sns.scatterplot(data=df, x='Gr Liv Area', y='SalePrice')\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","72c1cfab":"sns.boxplot(data=df, x='Overall Qual', y='SalePrice')\n","cc15a6c0":"df.info()\n","7331536e":"df=df.drop('PID', axis=1)","836e5b86":"df.isnull()","b6800759":"df.isnull().sum()","ff7fd6c2":"100*(df.isnull().sum()\/len(df))","f23c4fe7":"def missing_percent(df):\n    nan_percent=100*(df.isnull().sum()\/len(df))\n    nan_percent=nan_percent[nan_percent>0].sort_values()\n    return nan_percent","a59395ac":"nan_percent=missing_percent(df)","e4df2301":"nan_percent","d946470c":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","95c471f7":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\n\n#Set 1% threshold:\nplt.ylim(0,1)","08e56949":"nan_percent[nan_percent<1]","739a4735":"nan_percent[nan_percent<1].index","04fc0b0e":"100\/len(df)\n#It shows that, Feature with just one missing rows has this percent value of missing data","f425c401":"df[df['Electrical'].isnull()]","1ec8f609":"df[df['Garage Area'].isnull()]","524cafb9":"df=df.dropna(axis=0, subset=['Electrical','Garage Area'])","ac1b06b3":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","621585a7":"df[df['Total Bsmt SF'].isnull()]","250db334":"df[df['Bsmt Full Bath'].isnull()]","4b04ba09":"df[df['Bsmt Half Bath'].isnull()]","14e424be":"#Numerical Columns fill with 0:\nbsmt_num_cols= ['BsmtFin SF 1', 'BsmtFin SF 2', 'Bsmt Unf SF','Total Bsmt SF' ,'Bsmt Full Bath', 'Bsmt Half Bath']\ndf[bsmt_num_cols]=df[bsmt_num_cols].fillna(0)\n\n#String Columns fill with None:\nbsmt_str_cols= ['Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2']\ndf[bsmt_str_cols]= df[bsmt_str_cols].fillna('None')\n","f1e89165":"nan_percent= missing_percent(df)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","ff195831":"df['Mas Vnr Type']= df['Mas Vnr Type'].fillna('None')\ndf['Mas Vnr Area']= df['Mas Vnr Area'].fillna(0)","0f3ee10a":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","851c4396":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","6d15e2c7":"df[['Garage Type', 'Garage Yr Blt', 'Garage Finish', 'Garage Qual', 'Garage Cond']]","44e9e8ce":"#Filling the missing Value:\nGar_str_cols= ['Garage Type', 'Garage Finish', 'Garage Qual', 'Garage Cond']\ndf[Gar_str_cols]=df[Gar_str_cols].fillna('None')\n\ndf['Garage Yr Blt']=df['Garage Yr Blt'].fillna(0)","a1993a3b":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","38bb1155":"nan_percent.index","a0d2fd43":"df[['Lot Frontage', 'Fireplace Qu', 'Fence', 'Alley', 'Misc Feature',\n       'Pool QC']]","88564179":"df= df.drop(['Fence', 'Alley', 'Misc Feature','Pool QC'], axis=1)","69fbe56f":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","69e96530":"#Filling in Fireplace Quality based on dataset documentation:\ndf['Fireplace Qu']= df['Fireplace Qu'].fillna('None')","d5eadcd2":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","c6a37c5b":"plt.figure(figsize=(8,12))\nsns.boxplot(data=df, x='Lot Frontage', y='Neighborhood')","fda6c6f3":"df['Neighborhood'].unique()","fad30d42":"#Impute missing data based on other columns:\n\ndf.groupby('Neighborhood')['Lot Frontage']","ae1a68bd":"df.groupby('Neighborhood')['Lot Frontage'].mean()","43b35071":"df.groupby('Neighborhood')['Lot Frontage'].transform(lambda val: val.fillna(val.mean()))","03c5a1f0":"df['Lot Frontage']=df.groupby('Neighborhood')['Lot Frontage'].transform(lambda val: val.fillna(val.mean()))","ed8665fa":"nan_percent= missing_percent(df)\n\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","41fab3db":"df['Lot Frontage']= df['Lot Frontage'].fillna(0)","ac4c3a96":"nan_percent= missing_percent(df)\n","a93bcca0":"nan_percent","6802d3c8":"df['MS SubClass']\n","200d724a":"df.info()","df33922d":"df['MS SubClass'].unique()","776315d6":"#Convert to String:\ndf['MS SubClass']= df['MS SubClass'].apply(str)","7f616ac1":"df.info()","ad7ad3e8":"df.select_dtypes(include='object')","6f8fa2fe":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","12092e7d":"df_obj= pd.get_dummies(df_obj, drop_first=True)","11ce89a0":"df_obj.shape","d6fe2ff5":"Final_df= pd.concat([df_num, df_obj], axis=1)","7a792f19":"Final_df.head()","a2af2d50":"#  B- Working base on Rows Missing Data\n","ad46a7a7":"#  D- Imputation of Missing Data","3c4c57f4":"**Remove the Columns with more than 80% missing values**","4ff7a077":"# **C-Working based on Columns Missing Data**","7582d0d7":"# 2-Dealing with Missing Data","9043106b":"# **3-Dealing with Categorical Data **","f79a1c70":"Columns: Lot Frontage\n\nWe assume that the Lot Frontage is related to what a Neighborhood a house is in","8641f121":"** A- Numerical Columns to Categorical\n**","88f8d4a1":"### B- Creating Dummy Variables","2196c414":"**We don't have any Missing Data**","a02f2bee":"#### Now, the Dataset is Ready for any Machine Learing Model & Analysis","cb7b2871":"# **DATA PREPRATION\n# 1.Dealing with outliers**"}}