{"cell_type":{"79798659":"code","154d7574":"code","884bfb35":"code","ed60f07b":"code","f90a7fab":"code","c7554482":"code","a247f228":"code","3fd8eb3f":"code","4864124b":"code","897045b0":"code","4cdd5cce":"markdown","aa9cc009":"markdown","55f006ce":"markdown"},"source":{"79798659":"import tensorflow as tf \nimport numpy as np\nimport os\nimport glob\nimport pandas as pd\nimport PIL\nimport gc\nfrom PIL import Image","154d7574":"print(f'Numpy version : {np.__version__}')\nprint(f'Pandas version : {pd.__version__}')\nprint(f'Tensorflow version : {tf.__version__}')\nprint(f'Pillow version : {PIL.__version__}')","884bfb35":"!ls \/kaggle\/input","ed60f07b":"# df_train = pd.read_parquet('\/kaggle\/input\/csv-with-cleaned-ocr-text\/train.parquet', engine='pyarrow').sort_values(\"filename\").reset_index(drop=True)","f90a7fab":"df_test = pd.read_parquet('\/kaggle\/input\/csv-with-cleaned-ocr-text\/test.parquet', engine='pyarrow')\ndf_test","c7554482":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _list_float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef _list_int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=value))","a247f228":"RESIZE_WIDTH = 512\nRESIZE_HEIGHT = 512\n\nTFRECORD_MAX_SIZE = 80 * 1024 * 1024 # 80 MB\n\n# TOTAL_IMAGES = len(df_train.index)\nTOTAL_IMAGES = len(df_test.index)\n\n# part 1 : 0:TOTAL_IMAGES \/\/ 2 (train)\n# part 2 : TOTAL_IMAGES \/\/ 2:TOTAL_IMAGES (train)\n# part 1 : 0:TOTAL_IMAGES (test) [CURRENT]\nSTART_INDEX = 0\nEND_INDEX = TOTAL_IMAGES\n\nBATCH_IMAGE = 1024","3fd8eb3f":"def create_tfrecord(index, df):    \n    index = str(index).zfill(3)\n    curr_file = f\"test-{index}.tfrecords\"\n    writer = tf.io.TFRecordWriter(curr_file)\n    for index, row in df.iterrows():\n        category_str = str(row['category']).zfill(2)\n\n        image = f'\/kaggle\/input\/shopee-product-detection-student\/test\/test\/test\/{row[\"filename\"]}'\n        img = open(image, 'rb')\n        img_read = img.read()\n        image_decoded = tf.image.decode_jpeg(img_read, channels=3)\n        resized_img = tf.image.resize_with_pad(image_decoded,target_width=RESIZE_WIDTH,target_height=RESIZE_HEIGHT,method=tf.image.ResizeMethod.BILINEAR)\n        resized_img = tf.cast(resized_img,tf.uint8)\n        resized_img = tf.io.encode_jpeg(resized_img)\n\n        feature = {\n            'filename': _bytes_feature(tf.compat.as_bytes(row['filename'])),\n            'label': _int64_feature(row['category']),\n            'words': _list_float_feature(row['words']),\n            'image': _bytes_feature(resized_img),\n            'height' : _int64_feature(RESIZE_HEIGHT),\n            'width' : _int64_feature(RESIZE_WIDTH)\n        }\n        example = tf.train.Example(features=tf.train.Features(feature=feature))\n        writer.write(example.SerializeToString())\n    writer.close()","4864124b":"for i in range(START_INDEX, END_INDEX, BATCH_IMAGE):\n    print(f'Create TFRecords #{i \/\/ BATCH_IMAGE}')\n    if i + BATCH_IMAGE < END_INDEX:\n        create_tfrecord(i \/\/ BATCH_IMAGE, df_test.loc[i:i+BATCH_IMAGE])\n    else:\n        create_tfrecord(i \/\/ BATCH_IMAGE, df_test.loc[i:END_INDEX])\n    gc.collect()","897045b0":"!ls -lah","4cdd5cce":"# Library","aa9cc009":"# Dataset","55f006ce":"# Create TFRecord"}}