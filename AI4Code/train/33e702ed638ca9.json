{"cell_type":{"2321a16a":"code","f7591478":"code","39925c52":"code","992122b7":"code","831a578b":"code","127f2d19":"code","6e21113e":"code","3755f03b":"code","a908eed9":"code","23e8afe4":"code","eaeb02ab":"code","3c3fd21b":"code","62f97589":"code","703afc5a":"code","03098a71":"code","c9c844ac":"code","92e9c019":"code","bfe879ea":"code","6a7f47c7":"code","3628968a":"code","bcecade0":"code","686332de":"code","506afba8":"code","dfc74a04":"code","149c7490":"code","a7ae35d3":"code","a6998d0e":"code","e31b13c1":"code","99ec88a3":"code","6af20cd7":"code","6a500182":"code","d416ddee":"code","8ea38e99":"code","abd29ba1":"markdown","b9fd0499":"markdown"},"source":{"2321a16a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7591478":"import warnings\nwarnings.filterwarnings('ignore')","39925c52":"data = '\/kaggle\/input\/car-evaluation-data-set\/car_evaluation.csv'\ndf = pd.read_csv(data, header=None)","992122b7":"df.head()","831a578b":"df.shape","127f2d19":"# Rename the column\ncol_names = ['buying', 'meant', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\ndf.columns = col_names\ncol_names","6e21113e":"df.head()","3755f03b":"df.info()","a908eed9":"for col in col_names:\n    print(df[col].value_counts())","23e8afe4":"df['class'].value_counts()","eaeb02ab":"df.isnull().sum()","3c3fd21b":"X = df.drop(['class'], axis=1)\n\ny = df['class']","62f97589":"X.head()","703afc5a":"y.head()","03098a71":"from sklearn.model_selection import train_test_split","c9c844ac":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.33,\n                                                    random_state=42)\n\nX_train.shape, X_test.shape","92e9c019":"y_train.shape, y_test.shape","bfe879ea":"X_train.dtypes","6a7f47c7":"X_train.head()","3628968a":"# Encode Categorical\nimport category_encoders as ce","bcecade0":"# encode variables with ordinal encoding\nencoder = ce.OrdinalEncoder(cols=['buying', 'meant', 'doors', 'persons', 'lug_boot', 'safety'])\n\nX_train = encoder.fit_transform(X_train)\nX_test = encoder.transform(X_test)","686332de":"X_train.head()","506afba8":"X_test.head()","dfc74a04":"from sklearn.tree import DecisionTreeClassifier","149c7490":"clf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\nclf_gini.fit(X_train, y_train)","a7ae35d3":"y_pred_gini = clf_gini.predict(X_test)\ny_pred_gini[:5]","a6998d0e":"# Check Accuracy score\nfrom sklearn.metrics import accuracy_score","e31b13c1":"print(\"Model Accuracy score with criterion gini index {0:0.4f}\"\n      .format(accuracy_score(y_pred_gini, y_test)))","99ec88a3":"y_pred_train_gini = clf_gini.predict(X_train)\ny_pred_train_gini","6af20cd7":"print(\"Model Accuracy score with criterion gini index {0:0.4f}\"\n      .format(accuracy_score(y_pred_train_gini, y_train)))","6a500182":"print(\"Model Accuracy score with criterion gini index for test dataset {0:0.4f}\"\n      .format(accuracy_score(y_pred_gini, y_test)))\nprint(\"Model Accuracy score with criterion gini index for train dataset {0:0.4f}\"\n      .format(accuracy_score(y_pred_train_gini, y_train)))","d416ddee":"plt.figure(figsize=(10, 8))\nfrom sklearn import tree\ntree.plot_tree(clf_gini.fit(X_train, y_train))","8ea38e99":"import graphviz \ndot_data = tree.export_graphviz(clf_gini, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \n\ngraph ","abd29ba1":"## Exploratory Data Analysis","b9fd0499":"## Decision Tree Criterion with gini index"}}