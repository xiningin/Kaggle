{"cell_type":{"b959941b":"code","eaac22cb":"code","d4c9b5d6":"code","461285d8":"code","dfe408d1":"code","33d5c847":"code","c63c8709":"code","7c7e65aa":"code","d5c2d608":"code","c7ff6248":"code","bcbb9187":"code","c1322cb9":"code","f591bd13":"code","2ea8beb8":"code","24794fb2":"code","0d2991e1":"code","13a57279":"code","0311f2a7":"code","c12a1ee3":"code","60ecdadf":"code","871ad1ff":"code","3b25fd52":"code","99a5d51f":"code","9ac13f72":"markdown","f2abb73b":"markdown","8dc8bf77":"markdown"},"source":{"b959941b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eaac22cb":"import re\nimport matplotlib.pyplot as plt\n\nimport plotly.graph_objects as go\nimport plotly.express  as px","d4c9b5d6":"FILEPATH = '\/kaggle\/input\/ontario\/ontario-public-sector-salary-2018.csv'","461285d8":"df = pd.read_csv(FILEPATH)","dfe408d1":"df.head()","33d5c847":"df.columns","c63c8709":"df.isnull().sum()","7c7e65aa":"len(df)","d5c2d608":"df = df.drop(['Last Name', 'First Name', 'Calendar Year'], axis = 1)","c7ff6248":"df.sample(5)","bcbb9187":"# Clean amount column\ndf['Salary Paid'] = df['Salary Paid'].apply(lambda x : float(re.sub(\"[^\\d\\.]\", \"\", x)))\ndf['Taxable Benefits'] = df['Taxable Benefits'].apply(lambda x : float(re.sub(\"[^\\d\\.]\", \"\", x)))\n\ndf['Salary Paid'] = df['Salary Paid'].astype(int)\ndf['Taxable Benefits'] = df['Taxable Benefits'].astype(int)","c1322cb9":"df.info()","f591bd13":"df.sample(3)","2ea8beb8":"df = df.reset_index()","24794fb2":"df.head()","0d2991e1":"type(df['Sector'].value_counts())","13a57279":"temp_df = pd.DataFrame(df['Sector'].value_counts().head(10)).reset_index()\n\ntemp_df","0311f2a7":"fig = go.Figure(data=[go.Pie(labels=temp_df['index'],\n                             values=temp_df['Sector'],\n                             hole=.7,\n                             title = '% entries by Sector',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     \n                     ])\nfig.update_layout(title = '% entries by Sector')\nfig.show()","c12a1ee3":"temp_df = pd.DataFrame(df['Employer'].value_counts().head(10)).reset_index()\n\nfig = go.Figure(data=[go.Pie(labels=temp_df['index'],\n                             values=temp_df['Employer'],\n                             hole=.7,\n                             title = '% entries by Employer',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     \n                     ])\nfig.update_layout(title = '% entries by Employer')\nfig.show()","60ecdadf":"temp_df = pd.DataFrame(df['Job Title'].value_counts().head(10)).reset_index()\n\nfig = go.Figure(data=[go.Pie(labels=temp_df['index'],\n                             values=temp_df['Job Title'],\n                             hole=.7,\n                             title = '% entries by Job Title',\n                             marker_colors = px.colors.sequential.Blues_r,\n                            )\n                     \n                     ])\nfig.update_layout(title = '% entries by Job Title')\nfig.show()","871ad1ff":"import squarify","3b25fd52":"def show_treemap(col):\n    df_type_series = df.groupby(col)['index'].count().sort_values(ascending = False).head(20)\n\n    type_sizes = []\n    type_labels = []\n    for i, v in df_type_series.items():\n        type_sizes.append(v)\n        \n        type_labels.append(str(i) + ' ('+str(v)+')')\n\n\n    fig, ax = plt.subplots(1, figsize = (12,12))\n    squarify.plot(sizes=type_sizes, \n                  label=type_labels[:10],  # show labels for only first 10 items\n                  alpha=.2 )\n    plt.title('TreeMap by '+ str(col))\n    plt.axis('off')\n    plt.show()","99a5d51f":"show_treemap('Sector')","9ac13f72":"## Data Cleaning","f2abb73b":"As we don't need first and last name to decide the sector, we can remove them here","8dc8bf77":"To do:\n\n* Visuzalization based on sector\n\n(I will come and update it soon)"}}