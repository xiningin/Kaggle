{"cell_type":{"be2ee773":"code","942c318a":"code","c0124276":"code","e7541d99":"code","2f2af99f":"code","94233816":"code","7643b197":"code","e418d614":"code","66947723":"code","048804ee":"code","6ca1106a":"code","baf640c1":"code","2121596a":"code","097f93f2":"code","f98cb6de":"code","12f154b4":"code","338aa7b4":"code","ffb06af6":"code","8a264d05":"code","948213ad":"code","ae6f8275":"code","e49a39f4":"code","3e8945eb":"code","bf683d3f":"code","4aaa1e05":"code","62d9c973":"code","2a18cf53":"code","1d0d1c5d":"code","136b8e6f":"code","38a220fa":"code","42b8a854":"code","ecc8336a":"code","159fda88":"code","54a97282":"code","c350c201":"code","298e6e20":"code","fbff8c03":"code","3aa92bd1":"code","92a7e059":"code","4cd6ff9c":"code","135bce7b":"code","d93335b4":"markdown","f0805436":"markdown","3403b516":"markdown","b82104c7":"markdown","138ad88c":"markdown","e1ebb140":"markdown","c3fa67d0":"markdown","64d27d2a":"markdown","85862173":"markdown","d217da8f":"markdown","c77c0c0c":"markdown","ae9891d4":"markdown","69b094b8":"markdown","f5b01f26":"markdown","758492d1":"markdown","ddf8e420":"markdown","85aac659":"markdown","0b71fab3":"markdown","b0510a0d":"markdown","e0f7f6d7":"markdown","25a7d9e6":"markdown","b2e27c8f":"markdown","170ef417":"markdown","f6f20441":"markdown","69ff2a1a":"markdown","bd6bf756":"markdown","07dc6838":"markdown","6f601445":"markdown","baa5c7ed":"markdown","e39fd377":"markdown"},"source":{"be2ee773":"import warnings\nimport numpy as np \nimport pandas as pd\nimport plotly as py\nimport seaborn as sns\nimport statistics as stat\nfrom datetime import date\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport matplotlib.image as image\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport matplotlib.lines as lines\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsur2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nsur2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nsur2020 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nsur2021 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\n\nsur2021 = sur2021[1:]\nsur2020 = sur2020[1:]\nsur2019 = sur2019[1:]\nsur2018 = sur2018[1:]\n\nc_codes = pd.read_csv('..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv')\nc_codes = c_codes[['English short name lower case', 'Alpha-3 code']]\n\ncnt = pd.read_csv('..\/input\/gapminder-datacamp-2007\/gapminder - gapminder.csv')\ncnt = cnt[['country', 'continent']]","942c318a":"fig = plt.figure(figsize = (15, 5))\n\nage = sur2021['Q1'].value_counts().reset_index()\nage['age'] = age['index'].apply(lambda x: x[:2])\nage = age.sort_values('age')\n\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\nclrs = ['#65b2e5' if x > 4902 else '#AACDE5' for x in age['Q1']]\na = sns.barplot(data = age, x = 'Q1', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'left', 'bottom']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(150 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ age[\"Q1\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","c0124276":"age = {'18-21': 'Young',\n      '22-24': 'Young',\n      '25-29': 'Young',\n      '30-34': 'Middle aged',\n      '35-39': 'Middle aged',\n      '40-44': 'Middle aged',\n      '45-49': 'Middle aged',\n      '50-54': 'Old',\n      '55-59': 'Old',\n      '60-69': 'Old',\n      '70+': 'Old'}\nfor i in [sur2019, sur2020, sur2021]:\n    i['Q1'] = i['Q1'].map(age)\n    \nsur2018['Q2'] = sur2018['Q2'].map(age)\n\nage2021 = sur2021['Q1'].value_counts().reset_index()\nage2020 = sur2020['Q1'].value_counts().reset_index()\nage2019 = sur2019['Q1'].value_counts().reset_index()\nage2018 = sur2018['Q2'].value_counts().reset_index().rename(columns={'Q2': 'Q1'})\n\nfor i in [age2021, age2020, age2019, age2018]:\n    i['sum'] = i['Q1'].sum()\n    i['percentage'] = round(i['Q1']\/i['sum']*100, 1)\n    i.drop(['Q1', 'sum'], axis = 1, inplace = True)     \n\nage2021['year'] = 2021\nage2020['year'] = 2020\nage2019['year'] = 2019\nage2018['year'] = 2018\n\nage_dynamics = pd.concat([age2018, age2019, age2020, age2021])\nage_dynamics = age_dynamics.pivot(index = 'year', columns = 'index', values = 'percentage').reset_index()    \n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.14, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.lineplot(data = age_dynamics, x = 'year', y = 'Young', color = '#75b1a9', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([55.9]), color = '#75b1a9', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = age_dynamics, x = 'year', y = 'Middle aged', color = '#d9b44a', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([35.5]), color = '#d9b44a', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = age_dynamics, x = 'year', y = 'Old', color = '#AACDE5', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([8.6]), color = '#AACDE5', s = 90, edgecolor = 'black', zorder = 5)\nplt.xticks(np.array([2018, 2019, 2020, 2021]), fontname = 'monospace', size = 16, color = '#313233')\na.yaxis.set_major_formatter(FixedFormatter(['10%', '20%', '30%', '40%', '50%', '60%']))\na.yaxis.set_major_locator(FixedLocator([10, 20, 30, 40, 50, 60]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.figtext(0.925, 0.8, 'Young', fontname = 'monospace', size = 17, color = '#75b1a9') \nplt.figtext(0.915, 0.76, '<29 years', fontname = 'monospace', size = 14, color = '#75b1a9') \nplt.figtext(0.9, 0.55, 'Middle aged', fontname = 'monospace', size = 17, color = '#d9b44a') \nplt.figtext(0.91, 0.51, '30-49 years', fontname = 'monospace', size = 14, color = '#d9b44a')\nplt.figtext(0.94, 0.22, 'Old', fontname = 'monospace', size = 17, color = '#AACDE5') \nplt.figtext(0.92, 0.18, '50< years', fontname = 'monospace', size = 14, color = '#AACDE5') \n\n\nplt.figtext(0.85, 0.82, '55.9', fontname = 'monospace', size = 14, color = '#75b1a9')\n\nplt.figtext(0.85, 0.57, '35.5', fontname = 'monospace', size = 14, color = '#d9b44a')\n\nplt.figtext(0.855, 0.23, '8.6', fontname = 'monospace', size = 14, color = '#AACDE5') \n\nplt.figtext(0.125, -0.14, '''More than half of the survey participants belong to the group of young people (under 29 years old).\nHowever, compared to 2018, their number decreased by 4.4%, while the number of participants\nof the older generation (over 50 years old) increased by 3.6%.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.show()","e7541d99":"fig = plt.figure(figsize = (15, 2.5))\nclrs = ['#65b2e5' if x > 10000 else '#AACDE5' for x in sur2021['Q2'].value_counts().reset_index()['Q2']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = sur2021['Q2'].value_counts().reset_index(), x = 'Q2', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(800 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ sur2021[\"Q2\"].value_counts().reset_index()[\"Q2\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","2f2af99f":"gen2020_2021 = {'Man': 'Man',\n               'Woman': 'Woman',\n               'Nonbinary': 'Others',\n               'Prefer not to say': 'Others',\n               'Prefer to self-describe': 'Others'}\nfor i in [sur2020, sur2021]:\n    i['Q2'] = i['Q2'].map(gen2020_2021)\n    \ngen2018_2019 = {'Male': 'Man',\n               'Female': 'Woman',\n               'Prefer not to say': 'Others',\n               'Prefer to self-describe': 'Others'}\nsur2018['Q1'] = sur2018['Q1'].map(gen2018_2019)\nsur2019['Q2'] = sur2019['Q2'].map(gen2018_2019)\n\ngen2021 = sur2021['Q2'].value_counts().reset_index()\ngen2020 = sur2020['Q2'].value_counts().reset_index()\ngen2019 = sur2019['Q2'].value_counts().reset_index()\ngen2018 = sur2018['Q1'].value_counts().reset_index().rename(columns={'Q1': 'Q2'})\n\nfor i in [gen2021, gen2020, gen2019, gen2018]:\n    i['sum'] = i['Q2'].sum()\n    i['percentage'] = round(i['Q2']\/i['sum']*100, 1)\n    i.drop(['Q2', 'sum'], axis = 1, inplace = True) \n\ngen2021['year'] = 2021\ngen2020['year'] = 2020\ngen2019['year'] = 2019\ngen2018['year'] = 2018\n\ngen_dynamics = pd.concat([gen2018, gen2019, gen2020, gen2021])\ngen_dynamics = gen_dynamics.pivot(index = 'year', columns = 'index', values = 'percentage').reset_index()  \n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.14, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.lineplot(data = gen_dynamics, x = 'year', y = 'Man', color = '#75b1a9', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([79.3]), color = '#75b1a9', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = gen_dynamics, x = 'year', y = 'Woman', color = '#d9b44a', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([18.8]), color = '#d9b44a', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = gen_dynamics, x = 'year', y = 'Others', color = '#AACDE5', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([1.9]), color = '#AACDE5', s = 90, edgecolor = 'black', zorder = 5)\nplt.xticks(np.array([2018, 2019, 2020, 2021]), fontname = 'monospace', size = 16, color = '#313233')\na.yaxis.set_major_formatter(FixedFormatter(['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%']))\na.yaxis.set_major_locator(FixedLocator([10, 20, 30, 40, 50, 60, 70, 80]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.figtext(0.925, 0.815, 'Man', fontname = 'monospace', size = 17, color = '#75b1a9') \nplt.figtext(0.92, 0.29, 'Woman', fontname = 'monospace', size = 17, color = '#d9b44a') \nplt.figtext(0.915, 0.15, 'Others', fontname = 'monospace', size = 17, color = '#AACDE5') \n \nplt.figtext(0.85, 0.85, '79.3', fontname = 'monospace', size = 14, color = '#75b1a9')\nplt.figtext(0.85, 0.34, '18.8', fontname = 'monospace', size = 14, color = '#d9b44a')\nplt.figtext(0.855, 0.19, '1.9', fontname = 'monospace', size = 14, color = '#AACDE5') \n\nplt.figtext(0.125, -0.14, '''Most of the participants identified their gender as male for 4 years.\nHowever, it should be noted that in 2021, compared to 2018, the percentage\nof women increased by 2%, while the percentage of men decreased by 2.1%.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.show()","94233816":"sur2018 = sur2018.replace('Some college\/university study without earning a bachelor\u2019s degree', 'University without bachelor\u2019s degree')\nsur2019 = sur2019.replace('Some college\/university study without earning a bachelor\u2019s degree', 'University without bachelor\u2019s degree')\nsur2020 = sur2020.replace('Some college\/university study without earning a bachelor\u2019s degree', 'University without bachelor\u2019s degree')\nsur2021 = sur2021.replace('Some college\/university study without earning a bachelor\u2019s degree', 'University without bachelor\u2019s degree')\n\nfig = plt.figure(figsize = (15, 3))\nclrs = ['#65b2e5' if x > 10000 else '#AACDE5' for x in sur2021['Q4'].value_counts().reset_index()['Q4']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = sur2021['Q4'].value_counts().reset_index(), x = 'Q4', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(350 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ sur2021[\"Q4\"].value_counts().reset_index()[\"Q4\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","7643b197":"educ2021 = {'Bachelor\u2019s degree': 'Bachelor',\n       'Master\u2019s degree': 'Master',\n       'Doctoral degree': 'Doctorate',\n       'I prefer not to answer': 'Other',\n       'University without bachelor\u2019s degree': 'Other',\n       'No formal education past high school': 'Other',\n       'Professional doctorate': 'Doctorate'}\n\nsur2021['Q4'] = sur2021['Q4'].map(educ2021)\n\neduc2018_2020 = {'Bachelor\u2019s degree': 'Bachelor',\n       'Master\u2019s degree': 'Master',\n       'Doctoral degree': 'Doctorate',\n       'I prefer not to answer': 'Other',\n       'University without bachelor\u2019s degree': 'Other',\n       'No formal education past high school': 'Other',\n       'Professional degree': 'Doctorate'}\nfor i in [sur2018, sur2019, sur2020]:\n    i['Q4'] = i['Q4'].map(educ2018_2020)\n    \nedc2021 = sur2021['Q4'].value_counts().reset_index()\nedc2020 = sur2020['Q4'].value_counts().reset_index()\nedc2019 = sur2019['Q4'].value_counts().reset_index()\nedc2018 = sur2018['Q4'].value_counts().reset_index()\n\nfor i in [edc2021, edc2020, edc2019, edc2018]:\n    i['sum'] = i['Q4'].sum()\n    i['percentage'] = round(i['Q4']\/i['sum']*100, 1)\n    i.drop(['Q4', 'sum'], axis = 1, inplace = True) \n\nedc2021['year'] = 2021\nedc2020['year'] = 2020\nedc2019['year'] = 2019\nedc2018['year'] = 2018\n\nedc_dynamics = pd.concat([edc2018, edc2019, edc2020, edc2021])\nedc_dynamics = edc_dynamics.pivot(index = 'year', columns = 'index', values = 'percentage').reset_index() \n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.14, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.lineplot(data = edc_dynamics, x = 'year', y = 'Bachelor', color = '#75b1a9', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([38.1]), color = '#75b1a9', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = edc_dynamics, x = 'year', y = 'Doctorate', color = '#d9b44a', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([12.1]), color = '#d9b44a', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = edc_dynamics, x = 'year', y = 'Master', color = '#AACDE5', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([39.0]), color = '#AACDE5', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = edc_dynamics, x = 'year', y = 'Other', color = '#4f6457', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([10.7]), color = '#4f6457', s = 90, edgecolor = 'black', zorder = 5)\nplt.xticks(np.array([2018, 2019, 2020, 2021]), fontname = 'monospace', size = 16, color = '#313233')\na.yaxis.set_major_formatter(FixedFormatter(['10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%']))\na.yaxis.set_major_locator(FixedLocator([10, 15, 20, 25, 30, 35, 40, 45]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.figtext(0.915, 0.67, 'Bachelor', fontname = 'monospace', size = 17, color = '#75b1a9') \nplt.figtext(0.91, 0.25, 'Doctorate', fontname = 'monospace', size = 17, color = '#d9b44a') \nplt.figtext(0.925, 0.72, 'Master', fontname = 'monospace', size = 17, color = '#AACDE5') \nplt.figtext(0.93, 0.205, 'Other', fontname = 'monospace', size = 17, color = '#4f6457') \n\nplt.figtext(0.85, 0.65, '38.1', fontname = 'monospace', size = 14, color = '#75b1a9') \nplt.figtext(0.85, 0.29, '12.1', fontname = 'monospace', size = 14, color = '#d9b44a')\nplt.figtext(0.85, 0.76, '39.0', fontname = 'monospace', size = 14, color = '#AACDE5') \nplt.figtext(0.85, 0.17, '10.7', fontname = 'monospace', size = 14, color = '#4f6457')\n\nplt.figtext(0.122, -0.36, '''For 3 years, there has been a decrease in the interest of people with a master's\ndegree and doctor's degree. At the same time, there are more people with a bachelor's\ndegree and others. It is quite possible that next year there will be a majority of\nparticipants with a bachelor's degree, and a minority with a doctor's degree. This is\ndue to the fact that Kaggle is primarily an educational platform for obtaining basic\nknowledge in DS and there are much more beginners here than professionals. Data Science\ncontinues to be the most promising direction for many years, so there are more and more\nnewcomers. And professionals are more interested in competitions\nwith money prizes and in other projects.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.show()","e418d614":"fig = plt.figure(figsize = (15, 6.5))\nclrs = ['#65b2e5' if x > 5000 else '#AACDE5' for x in sur2021['Q5'].value_counts().reset_index()['Q5']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = sur2021['Q5'].value_counts().reset_index(), x = 'Q5', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(230 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ sur2021[\"Q5\"].value_counts().reset_index()[\"Q5\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","66947723":"jobs = ['Software Engineer', 'Data Scientist', 'Statistician', 'Data Analyst', 'Research Scientist', 'Business Analyst', 'Data Engineer', 'DBA\/Database Engineer']\n\nj2021 = sur2021['Q5'].value_counts().reset_index().rename(columns={'Q5': 'q2021'})\nj2018 = sur2018['Q6'].value_counts().reset_index().rename(columns={'Q6': 'q2018'})\n\nj2021 = j2021[j2021['index'].isin(jobs)]\nj2018 = j2018[j2018['index'].isin(jobs)]\n\nj18_21 = j2021.merge(j2018, how = 'left', left_on = 'index', right_on = 'index')\n\nj18_21['sum21'] = j18_21['q2021'].sum()\nj18_21['sum18'] = j18_21['q2018'].sum()\n\nj18_21['2021'] = round((j18_21['q2021'] \/ len(sur2021)) * 100, 1)\nj18_21['2018'] = round((j18_21['q2018'] \/ len(sur2018)) * 100, 1)\n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = j18_21['2021'], y = j18_21['index'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = j18_21['2018'], y = j18_21['index'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '2.5%', '5%', '7.5%', '10%', '12.5%', '15%', '17.5%']))\na.xaxis.set_major_locator(FixedLocator([0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.figtext(0.48, 0.94, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n\nplt.figtext(0.122, -0.18, '''The leading position is the data scientist, despite a significant decrease in 2021. Why did\nthis happen? In 2018, the profession of a data scientist was generalized - any data analyst\nor business analyst could identify himself as a data scientist. However, now the community\nhas a clear division of what a specific specialization is responsible for.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\ndef newline(p1, p2, color='black'):\n    a = plt.gca()\n    l = lines.Line2D([p1[0],p2[0]], [p1[1],p2[1]], color = '#313233')\n    a.add_line(l)\n    return l\n\nfor i, p1, p2 in zip(j18_21['index'], j18_21['2018'], j18_21['2021']):\n    newline([p1, i], [p2, i])\n\nplt.show()","048804ee":"sal21d = {'25,000-29,999': '20k-50k',\n          '60,000-69,999': '50k-100k',\n          '$0-999': '<5k',\n          '30,000-39,999': '20k-50k',\n          '15,000-19,999': '5k-20k',\n          '70,000-79,999': '50k-100k',\n          '2,000-2,999': '<5k',\n          '10,000-14,999': '5k-20k',\n          '5,000-7,499': '5k-20k',\n          '20,000-24,999': '20k-50k',\n          '1,000-1,999': '<5k',\n          '100,000-124,999': '100k-250k',\n          '7,500-9,999': '5k-20k',\n          '4,000-4,999': '<5k',\n          '40,000-49,999': '20k-50k',\n          '50,000-59,999': '50k-100k',\n          '3,000-3,999': '<5k',\n          '300,000-499,999': '250k<',\n          '200,000-249,999': '100k-250k',\n          '125,000-149,999': '100k-250k',\n          '250,000-299,999': '250k<',\n          '80,000-89,999': '50k-100k',\n          '90,000-99,999': '50k-100k',\n          '150,000-199,999': '100k-250k',\n          '>$1,000,000': '250k<',\n          '$500,000-999,999': '250k<'}\n\nsal21 = sur2021['Q25'].map(sal21d).reset_index()\n\nfig = plt.figure(figsize = (15, 3))\nclrs = ['#65b2e5' if x > 5000 else '#AACDE5' for x in sal21['Q25'].value_counts().reset_index()['Q25']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = sal21['Q25'].value_counts().reset_index(), x = 'Q25', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(230 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ sal21[\"Q25\"].value_counts().reset_index()[\"Q25\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","6ca1106a":"sal18d = {'10-20,000': '5k-20k',\n          '0-10,000': '<5k', # This is not entirely correct, but it is necessary for comparative analysis\n          '20-30,000': '20k-50k',\n          '125-150,000': '100k-250k',\n          '30-40,000': '20k-50k',\n          '50-60,000': '50k-100k',\n          '100-125,000': '100k-250k',\n          '90-100,000': '50k-100k',\n          '70-80,000': '50k-100k',\n          '80-90,000': '50k-100k',\n          '60-70,000': '50k-100k',\n          '400-500,000': '250k<',\n          '40-50,000': '20k-50k',\n          '150-200,000': '100k-250k',\n          '500,000+': '250k<',\n          '300-400,000': '250k<',\n          '200-250,000': '100k-250k',\n          '250-300,000': '250k<'}\n\nsal18 = sur2018['Q9'].map(sal18d).reset_index()\n\nsal18 = sal18['Q9'].value_counts().reset_index()\nsal21 = sal21['Q25'].value_counts().reset_index()\n\nsal18_21 = sal21.merge(sal18, how = 'left', left_on = 'index', right_on = 'index')\n\nsal18_21['sum21'] = sal18_21['Q25'].sum()\nsal18_21['sum18'] = sal18_21['Q9'].sum()\n\nsal18_21['2021'] = round((sal18_21['Q25'] \/ sal18_21['sum21']) * 100, 1)\nsal18_21['2018'] = round((sal18_21['Q9'] \/ sal18_21['sum18']) * 100, 1)\n\nfig = plt.figure(figsize = (15, 5))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = sal18_21['2021'], y = sal18_21['index'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = sal18_21['2018'], y = sal18_21['index'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%']))\na.xaxis.set_major_locator(FixedLocator([0, 5, 10, 15, 20, 25, 30, 35]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(6, -0.3)\n    \nplt.figtext(0.48, 0.94, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n\nplt.figtext(0.121, -0.11, '''5k $ is not so much, but do not forget that most of the respondents are students. Less than 2%\nof respondents have an annual salary of over 250k $.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(sal18_21['index'], sal18_21['2018'], sal18_21['2021']):\n    newline([p1, i], [p2, i])\n\nplt.show()","baf640c1":"fig = plt.figure(figsize = (15, 3.5))\nclrs = ['#65b2e5' if x > 7000 else '#AACDE5' for x in sur2021['Q6'].value_counts().reset_index().rename({0: 1, 1: 0}).sort_index()['Q6']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = sur2021['Q6'].value_counts().reset_index().rename({0: 1, 1: 0}).sort_index(), x = 'Q6', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(270 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ sur2021[\"Q6\"].value_counts().reset_index()[\"Q6\"].sum()) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","2121596a":"exp2021 = {'< 1 years': '< 1 years',\n       '1-3 years': '1-3 years',\n       '3-5 years': '3-5 years',\n       '5-10 years': '5-10 years',\n       '10-20 years': '10-20 years',\n       '20+ years': '20< years',\n       'I have never written code': '< 1 years'}\n\nsur2021['Q6'] = sur2021['Q6'].map(exp2021)\n\nexp2020 = {'< 1 years': '< 1 years',\n       '1-2 years': '1-3 years',\n       '3-5 years': '3-5 years',\n       '5-10 years': '5-10 years',\n       '10-20 years': '10-20 years',\n       '20+ years': '20< years',\n       'I have never written code': '< 1 years'}\n\nsur2020['Q6'] = sur2020['Q6'].map(exp2020)\n\nexp2019 = {'0': '< 1 years',\n       '1-2': '1-3 years',\n       '3-4': '3-5 years',\n       '5-9': '5-10 years',\n       '10-14': '10-20 years',\n       '15-19': '10-20 years',\n       '20+': '20< years'}\n\nsur2019['Q7'] = sur2019['Q7'].map(exp2019)\n\nexp2018 = {'0-1': '< 1 years',\n       '1-2': '1-3 years',\n       '2-3': '1-3 years',\n       '3-4': '3-5 years',\n       '4-5': '3-5 years',\n       '5-10': '5-10 years',\n       '10-15': '10-20 years',\n       '15-20': '10-20 years',\n       '20-25': '20< years',\n       '25-30': '20< years',\n       '30 +': '20< years'}\n\nsur2018['Q8'] = sur2018['Q8'].map(exp2018)\n\ne2021 = sur2021['Q6'].value_counts().reset_index()\ne2020 = sur2020['Q6'].value_counts().reset_index()\ne2019 = sur2019['Q7'].value_counts().reset_index().rename(columns={'Q7': 'Q6'})\ne2018 = sur2018['Q8'].value_counts().reset_index().rename(columns={'Q8': 'Q6'})\n\nfor i in [e2021, e2020, e2019, e2018]:\n    i['sum'] = i['Q6'].sum()\n    i['percentage'] = round(i['Q6']\/i['sum']*100, 1)\n    i.drop(['Q6', 'sum'], axis = 1, inplace = True) \n    \nindx = {0: 1, 1: 0}\ne2018 = e2018.rename(indx).sort_index()\ne2019 = e2019.rename(indx).sort_index()\ne2020 = e2020.rename(indx).sort_index()\ne2021 = e2021.rename(indx).sort_index()\n\ne18_21 = e2018.merge(e2021, how = 'left', left_on = 'index', right_on = 'index').rename(columns={'percentage_x': '2018', 'percentage_y': '2021'})\n\nfig = plt.figure(figsize = (15, 5))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = e18_21['2021'], y = e18_21['index'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = e18_21['2018'], y = e18_21['index'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%']))\na.xaxis.set_major_locator(FixedLocator([0, 5, 10, 15, 20, 25, 30, 35]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(6, -0.3)\n    \nplt.figtext(0.48, 0.94, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5')\n\nplt.figtext(0.122, -0.18, '''The situation with the respondent's experience vary a lot every year. In 2018 and 2021, the largest\nnumber of respondents had 1-3 years of experience, and in 2019, the largest number of participants\nhad more than 20 years of experience! It's pretty weird. Nevertheless, in 2018, 2020 and 2021, the\nmajority of respondents have up to 5 years of experience.''', fontname = 'monospace', size = 14, color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(e18_21['index'], e18_21['2018'], e18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nsns.scatterplot(x = 23.3, y = ['20< years'], color = '#4f6457', s = 100, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = 13.8, y = ['< 1 years'], color = '#4f6457', s = 100, edgecolor = 'black', zorder = 5)\n\nplt.annotate('''anomaly in 2019''', xy = (14, ['< 1 years']), xytext = (23, ['3-5 years']),\n             arrowprops = dict(facecolor = 'steelblue', arrowstyle = \"->\", connectionstyle = \"arc3,rad = 0.22\",color = '#4f6457'), \n             fontsize = 13, fontfamily = 'monospace', ha = 'center', color = '#4f6457')\nplt.annotate('', xy = (23.5, ['20< years']), xytext = (23, ['3-5 years']),\n             arrowprops = dict(facecolor = 'steelblue', arrowstyle = \"->\", connectionstyle = \"arc3,rad = -0.4\",color = '#4f6457'), \n             fontsize = 12, fontfamily = 'monospace', ha = 'center', color = '#4f6457')\n\nplt.show()","097f93f2":"sal21d = {'25,000-29,999': 27500,\n          '60,000-69,999': 65000,\n          '$0-999': 500,\n          '30,000-39,999': 35000,\n          '15,000-19,999': 17500,\n          '70,000-79,999': 75000,\n          '2,000-2,999': 2500,\n          '10,000-14,999': 12500,\n          '5,000-7,499': 6250,\n          '20,000-24,999': 22500,\n          '1,000-1,999': 1500,\n          '100,000-124,999': 112500,\n          '7,500-9,999': 8750,\n          '4,000-4,999': 4500,\n          '40,000-49,999': 45000,\n          '50,000-59,999': 55000,\n          '3,000-3,999': 3500,\n          '300,000-499,999': 400000,\n          '200,000-249,999': 225000,\n          '125,000-149,999': 137500,\n          '250,000-299,999': 275000,\n          '80,000-89,999': 85000,\n          '90,000-99,999': 95000,\n          '150,000-199,999': 175000,\n          '>$1,000,000': 1000000,\n          '$500,000-999,999': 750000}\n\nsur2021['salary'] = sur2021['Q25'].map(sal21d)\n\nsal19d = {'30,000-39,999': 35000,\n          '5,000-7,499': 6250,\n          '250,000-299,999': 275000,\n          '4,000-4,999': 45000,\n          '60,000-69,999': 65000,\n          '10,000-14,999': 12500,\n          '80,000-89,999': 85000,\n          '$0-999': 500,\n          '2,000-2,999': 2500,\n          '70,000-79,999': 75000,\n          '90,000-99,999': 95000,\n          '125,000-149,999': 137500,\n          '40,000-49,999': 45000,\n          '20,000-24,999': 22500,\n          '15,000-19,999': 17500,\n          '100,000-124,999': 112500,\n          '7,500-9,999': 8750,\n          '150,000-199,999': 175000,\n          '25,000-29,999': 27500,\n          '3,000-3,999': 3500,\n          '1,000-1,999': 1500,\n          '200,000-249,999': 225000,\n          '50,000-59,999': 55000,\n          '> $500,000': 500000,\n          '300,000-500,000': 400000}\n\nsur2019['salary'] = sur2019['Q10'].map(sal19d)\n\nms19 = sur2019.groupby([\"Q4\", \"Q5\"]).agg({'salary': 'mean'}).reset_index()\nms19 = ms19[ms19['Q5'].isin(jobs)].query(\"Q4 != 'Other'\")\n\nms21 = sur2021.groupby([\"Q4\", \"Q5\"]).agg({'salary': 'mean'}).reset_index()\nms21 = ms21[ms21['Q5'].isin(jobs)].query(\"Q4 != 'Other'\")\n\nms21_2 = sur2021.groupby([\"Q5\"]).agg({'salary': 'mean'}).reset_index()\n\nms19_21 = sur2019.groupby([\"Q5\"]).agg({'salary': 'mean'}).reset_index()\nms19_21 = ms19_21[ms19_21['Q5'].isin(jobs)]\nms19_21 = ms19_21.merge(ms21_2, how = 'left', left_on = 'Q5', right_on = 'Q5').rename(columns={'salary_x': '2019', 'salary_y': '2021'})\nms19_21['dynamics'] = round((100 - (ms19_21['2021'] \/ ms19_21['2019']) * 100), 1)\n\nfig = plt.figure(figsize = (10, 18))\n\nplt.subplot(211)\nplt.title('Salary dependence on education', size = 27, y = 1.07, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'x', alpha = 0.1, zorder = 0)\na = sns.barplot(data = ms19, x = 'salary', y = 'Q5', hue = 'Q4', palette = ['#4f6457', '#AACDE5', '#d9b44a'], linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['10k', '20k', '30k', '40k', '50k', '60k', '70k', '80k']))\na.xaxis.set_major_locator(FixedLocator([10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\na.get_legend().remove()\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.subplot(212)\nplt.grid(color = 'gray', linestyle = '-', axis = 'x', alpha = 0.1, zorder = 0)\na = sns.barplot(data = ms21, x = 'salary', y = 'Q5', hue = 'Q4', palette = ['#4f6457', '#AACDE5', '#d9b44a'], linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['10k', '20k', '30k', '40k', '50k', '60k', '70k', '80k']))\na.xaxis.set_major_locator(FixedLocator([10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\nplt.legend(bbox_to_anchor = (0.77, 1.18), ncol = 3, borderpad = 1, frameon = True, fontsize = 14)\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfig.tight_layout(h_pad = 5)\n\nplt.figtext(0.99, 0.77, '2019', fontsize = 35, fontname = 'monospace', color = '#313233')\nplt.figtext(0.99, 0.23, '2021', fontsize = 35, fontname = 'monospace', color = '#313233')\n\nl1 = lines.Line2D([1.05, 1.05], [0.75, 0.265], transform = fig.transFigure, figure = fig, color = '#313233', linestyle = '-',linewidth = 2)\na.lines.extend([l1])\nl1 = lines.Line2D([0.29, 0.985], [-0.01, -0.01], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\ny = 0.74\nfor job in ms19_21['Q5'].tolist():\n    plt.figtext(1.18, y, job, fontsize = 13, fontname = 'monospace', color = '#313233', ha = 'center')\n    y -= 0.064\n    \ny = 0.72\nfor job in ms19_21['dynamics'].tolist():\n    plt.figtext(1.18, y, f'-{job}%', fontsize = 13, fontname = 'monospace', color = '#AA4B41', ha = 'center')\n    y -= 0.064\n    \nplt.figtext(0.29, -0.19, '''The first thing you should pay attention to is that the\nhighest-paid job among those compared is Data scientist\nin both years. Data analysts receive the least of all.\n\nBut let's move on to education. In almost all professions,\nrespondents with a doctorate degree receive more than others.\nBachelors get the least.\n\nAnd what is even more interesting is the drop in salaries in\nall professions. Within one country, the reasons may be\ndifferent, but on a global scale, this can only be explained\nby the COVID-19 pandemic and salaries, as well as other\ncosts of companies, have been reduced to withstand\nthis difficult time.''', fontsize = 13, fontname = 'monospace', color = '#313233')\n    \nplt.show()","f98cb6de":"exp_m_s19 = sur2019.groupby([\"Q7\"]).agg({'salary': 'mean'}).reset_index()\nexp_m_s21 = sur2021.groupby([\"Q6\"]).agg({'salary': 'mean'}).reset_index()\n\n# What can you not do for the sake of a beautiful plot :)\ndef swap_rows(df, i1, i2):\n    a, b = df.iloc[i1, :].copy(), df.iloc[i2, :].copy()\n    df.iloc[i1, :], df.iloc[i2, :] = b, a\n    return df\n\nfor df in [exp_m_s19, exp_m_s21]:\n    df = swap_rows(df, 0, 5)\n    df = swap_rows(df, 1, 5)\n    df = swap_rows(df, 2, 3)\n    df = swap_rows(df, 3, 4)\n    df = swap_rows(df, 4, 5)\n    \nexp_m_s19_21 = exp_m_s19.merge(exp_m_s21, how = 'left', left_on = 'Q7', right_on = 'Q6').rename(columns={'salary_x': '2019', 'salary_y': '2021'}).drop('Q6', axis = 1)\nexp_m_s19_21['2019'] = exp_m_s19_21['2019'].astype('int')\nexp_m_s19_21['2021'] = exp_m_s19_21['2021'].astype('int')\n\nfig = plt.figure(figsize = (15, 5))\nplt.title('Salary dependence on experience', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = exp_m_s19_21['2021'], y = exp_m_s19_21['Q7'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = exp_m_s19_21['2019'], y = exp_m_s19_21['Q7'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['20k', '30k', '40k', '50k', '60k', '70k', '80k', '90k']))\na.xaxis.set_major_locator(FixedLocator([20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(6, -0.3)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(exp_m_s19_21['Q7'], exp_m_s19_21['2019'], exp_m_s19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.94, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5')\n    \nplt.figtext(0.125, -0.23, '''Of course, there has always been a positive correlation between experience and salary, but in 2\nyears there has been a big gap between those with experience up to 5 years and those with\nexperience over 5 years. Perhaps this is due to the fact that there is a shortage of\nhighly qualified specialists in the world, while there are a lot of newcomers and\nthey have a big rivalry.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","12f154b4":"gen_ms19_21 = sur2019.groupby([\"Q2\"]).agg({'salary': 'mean'}).reset_index()\\\n.merge(sur2021.groupby([\"Q2\"]).agg({'salary': 'mean'}).reset_index(), how = 'left', left_on = 'Q2', right_on = 'Q2')\\\n.rename(columns={'salary_x': '2019', 'salary_y': '2021'})\ngen_ms19_21['2019'] = gen_ms19_21['2019'].astype('int')\ngen_ms19_21['2021'] = gen_ms19_21['2021'].astype('int')\n\nfig = plt.figure(figsize = (15, 3.5))\nplt.title('Salary dependence on gender', size = 25, y = 1.13, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = gen_ms19_21['2021'], y = gen_ms19_21['Q2'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = gen_ms19_21['2019'], y = gen_ms19_21['Q2'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['30k', '40k', '50k', '60k', '70k']))\na.xaxis.set_major_locator(FixedLocator([30000, 40000, 50000, 60000, 70000]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\na.set_ylim(-1, 2.8)\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nl1 = lines.Line2D([0.125, 0.9], [-0.01, -0.01], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(gen_ms19_21['Q2'], gen_ms19_21['2019'], gen_ms19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.94, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5')\n    \nplt.figtext(0.125, -0.42, '''This is a very ambiguous situation. The average salary of men and women has fallen significantly\nin two years, but the salary of those who identify themselves in a different way has increased,\neven taking into account the fact that in 2019 they already had much more. I will not go into\ndetails, but note that a group with \"other\" gender does not differ from groups of men and women\nin terms of the number of respondents with a doctorate degree, with extensive experience or\nthe number of data scientists.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n\nplt.show()","338aa7b4":"ms_country19 = pd.concat([sur2019.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index().sort_values('salary').head(5), \n                         sur2019.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index().sort_values('salary').tail(5)])\nms_country19['Q3'][22] = 'Iran'\nms_country19['Q3'][57] = 'USA'\n\nms_country21 = pd.concat([sur2021.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index().sort_values('salary').head(5), \n                         sur2021.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index().sort_values('salary').tail(5)])\nms_country21['Q3'][64] = 'USA'\n\nc = ['United States of America', 'India', 'China', 'Russia']\nmsc1 = sur2019.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index()\nmsc2 = sur2021.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index()\nmsc1 = msc1[msc1['Q3'].isin(c)]\nmsc2 = msc2[msc2['Q3'].isin(c)]\nmsc = msc1.merge(msc2, how = 'left', left_on = 'Q3', right_on = 'Q3').rename(columns={'salary_x': '2019', 'salary_y': '2021'})\nmsc['dynamics'] = round((msc['2021'] \/ msc['2019']) * 100 - 100, 1)\nmsc['Q3'][3] = 'USA'\n\nfig = plt.figure(figsize = (9, 15))\n\nplt.subplot(211)\nclrs = ['#AACDE5' if x > 50000 else '#75b1a9' for x in ms_country19['salary']]\nplt.title('Salary dependence on country', size = 27, x = 0.47, y = 1.08, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ms_country19, x = 'salary', y = 'Q3', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.axhline(4.49, 0, 0.95, color = '#AA4B41', linewidth = 2)\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\nfor p in a.patches:\n    width = p.get_width()\n    plt.text(7500 + p.get_width(), p.get_y() + 0.6*p.get_height(), f'{round((width\/1000), 1)}k',\n             ha = 'center', va = 'center', fontname = 'monospace', size = 14, color = '#313233')\n    \nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nplt.subplot(212)\nclrs = ['#AACDE5' if x > 50000 else '#75b1a9' for x in ms_country21['salary']]\na = sns.barplot(data = ms_country21, x = 'salary', y = 'Q3', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.axhline(4.505, 0, 0.95, color = '#AA4B41', linewidth = 2)\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\nfor p in a.patches:\n    width = p.get_width()\n    plt.text(7500 + p.get_width(), p.get_y() + 0.6*p.get_height(), f'{round((width\/1000), 1)}k',\n             ha = 'center', va = 'center', fontname = 'monospace', size = 14, color = '#313233')\n    \nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nplt.figtext(0.99, 0.7, '2019', fontsize = 35, fontname = 'monospace', color = '#313233')\nplt.figtext(0.99, 0.29, '2021', fontsize = 35, fontname = 'monospace', color = '#313233')\n\nl1 = lines.Line2D([1.05, 1.05], [0.68, 0.33], transform = fig.transFigure, figure = fig, color = '#313233', linestyle = '-',linewidth = 2)\na.lines.extend([l1])\nl1 = lines.Line2D([0.125, 0.86], [0.1, 0.1], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\ny = 0.6\nfor job in msc['Q3'].tolist():\n    plt.figtext(1.13, y, job, fontsize = 14, fontname = 'monospace', color = '#313233', ha = 'center')\n    y -= 0.064\n    \ny = 0.58\nfor i in msc['dynamics'].tolist():\n    if i < 0:\n        plt.figtext(1.13, y, f'{i}%', fontsize = 13, fontname = 'monospace', color = '#AA4B41', ha = 'center')\n        y -= 0.064\n    else:\n        plt.figtext(1.13, y, f'+{i}%', fontsize = 13, fontname = 'monospace', color = '#4f6457', ha = 'center')\n        y -= 0.064\n\nplt.figtext(0.12, 0.04, '''The highest average salaries are in Norway, Switzerland,\nAustralia, Israel and the USA. But don't rush to conclusions\nahead of time. Don't forget that every country has different\ntaxes, insurance and cost of living.''', fontsize = 13, fontname = 'monospace', color = '#313233')\n    \nplt.show()","ffb06af6":"# Data for plotly map\nmapp = sur2021['Q3'].value_counts().reset_index().merge(c_codes, how = 'left', left_on = 'index', right_on = 'English short name lower case')\nmapp.drop('English short name lower case', axis = 1, inplace = True)\nmapp.iloc[1,2] = \"USA\"\nmapp.iloc[8,2] = \"GBR\"\nmapp.iloc[22,2] = \"VNM\"\nmapp.iloc[27,2] = \"IRN\"\nmapp.iloc[49,2] = \"HKG\"\nmapp.drop(index = [2, 52], inplace = True)\nmapp.rename(columns = {'Q3': \"Count of respondents\", 'Alpha-3 code': \"Code\"}, inplace = True)\n\n# Statistics\ngen_stat = sur2021.groupby(['Q3', 'Q2']).agg({'Q1': 'count'}).reset_index()\ngen_stat['sum'] = gen_stat.groupby('Q3')['Q1'].transform('sum')\ngen_stat['fraction'] = round(gen_stat['Q1']\/gen_stat['sum'] * 100,1)\n\nage_stat = sur2021.groupby(['Q3', 'Q1']).agg({'Q2': 'count'}).reset_index()\nage_stat['sum'] = age_stat.groupby('Q3')['Q2'].transform('sum')\nage_stat['fraction'] = round(age_stat['Q2']\/age_stat['sum'] * 100,1)\n\neduc_stat = sur2021.groupby(['Q3', 'Q4']).agg({'Q2': 'count'}).reset_index()\neduc_stat['sum'] = educ_stat.groupby('Q3')['Q2'].transform('sum')\neduc_stat['fraction'] = round(educ_stat['Q2']\/educ_stat['sum'] * 100,1)\n\nsalary_stat = sur2021.groupby(\"Q3\").agg({'salary': 'mean'}).reset_index()\nsalary_stat['salary'] = round(salary_stat['salary'] \/ 1000, 1)\nsalary_stat['salary'] = salary_stat['salary'].astype('str') + 'k $'\n\n# Merge data\nfor gender in gen_stat['Q2'].unique().tolist():\n    mapp = mapp.merge(gen_stat.query(\"Q2 == @gender\")[['Q3', 'fraction']], how = 'left', left_on = 'index', right_on = 'Q3').drop('Q3', axis = 1).rename(columns={'fraction': gender})\n    mapp = mapp.fillna(0)\n    mapp[gender] = mapp[gender].astype('str') + '%'\n\nmapp['Man \/ Woman \/ Others'] = mapp['Man'] + ' \/ ' + mapp['Woman'] + ' \/ ' + mapp['Others']\n\nfor age in age_stat['Q1'].unique().tolist():\n    mapp = mapp.merge(age_stat.query(\"Q1 == @age\")[['Q3', 'fraction']], how = 'left', left_on = 'index', right_on = 'Q3').drop('Q3', axis = 1).rename(columns={'fraction': age})\n    mapp = mapp.fillna(0)\n    mapp[age] = mapp[age].astype('str') + '%'\n\nmapp['Young \/ Middle aged \/ Old'] = mapp['Young'] + ' \/ ' + mapp['Middle aged'] + ' \/ ' + mapp['Old']\n\nfor education in educ_stat['Q4'].unique().tolist():\n    mapp = mapp.merge(educ_stat.query(\"Q4 == @education\")[['Q3', 'fraction']], how = 'left', left_on = 'index', right_on = 'Q3').drop('Q3', axis = 1).rename(columns={'fraction': education})\n    mapp = mapp.fillna(0)\n    mapp[education] = mapp[education].astype('str') + '%'\n    \nmapp['Doctorate \/ Master \/ Bachelor \/ Other'] = mapp['Doctorate'] + ' \/ ' + mapp['Master'] + ' \/ ' + mapp['Bachelor'] + ' \/ ' + mapp['Other']\n\nmapp = mapp.merge(salary_stat, how = 'left', left_on = 'index', right_on = 'Q3').drop('Q3', axis = 1)\n\n# Text for hover\nmapp['text'] = 'Country<\/b> - ' + mapp['index'] + '<br>' + '<br>' + '<b>Respondents<\/b> - ' + mapp['Count of respondents'].astype('str') + \\\n    '<br>' + '<b>Man \/ Woman \/ Others<\/b> - ' + mapp['Man \/ Woman \/ Others'] + \\\n    '<br>' + '<b>Young \/ Middle aged \/ Old<\/b> - ' + mapp['Young \/ Middle aged \/ Old'] + \\\n    '<br>' + '<b>Doctorate \/ Master \/ Bachelor \/ Other<\/b> - ' + mapp['Doctorate \/ Master \/ Bachelor \/ Other'] + \\\n    '<br>' + '<b>Average salary<\/b> - ' + mapp['salary']\n\n# Plot\nfig = go.Figure(data=go.Choropleth(\n    locations=mapp['Code'],\n    z = mapp['Count of respondents'],\n    locationmode = 'ISO-3',\n    colorscale = 'Blues',\n    zmax = 4000,\n    zmin = 0,\n    text = mapp['text'],\n    hovertemplate = \"<b>%{text}<\/b>\" + \"<extra><\/extra>\"\n    \n))\n\nfig.update_layout(\n    geo_scope='world',\n    hoverlabel=dict(\n        bgcolor=\"#bed5eb\",\n        font_size=14,\n        font_family=\"monospace\"\n    )\n)\n\nfig.update_geos(visible=False, \n                resolution=110, \n                showcountries=True,\n                countrywidth=0.5)\n\nfig.update_traces(showscale=False)\n\nfig.show()\n\nmapp.drop(['Man \/ Woman \/ Others', 'Young \/ Middle aged \/ Old', 'Doctorate \/ Master \/ Bachelor \/ Other', 'text'], axis = 1, inplace = True)","8a264d05":"for col in mapp.columns.tolist()[3:-1]:\n    mapp[col] = mapp[col].apply(lambda x: x[:-1])\n    mapp[col] = mapp[col].astype('float')\n    \nr_country = pd.concat([mapp.sort_values('Count of respondents').head(5), mapp.sort_values('Count of respondents').tail(5)])\n                      \nfig = plt.figure(figsize = (15, 7))\nclrs = ['#AACDE5' if x > 100 else '#75b1a9' for x in r_country['Count of respondents']]\na = sns.barplot(data = r_country, x = 'Count of respondents', y = 'index', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.axhline(4.5, 0, 0.95, color = '#AA4B41', linewidth = 2)\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 13, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\nfor p in a.patches:\n    width = p.get_width()\n    plt.text(180 + p.get_width(), p.get_y() + 0.6*p.get_height(), int(width),\n             ha = 'center', va = 'center', fontname = 'monospace', size = 13, color = '#313233')\n    \nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nplt.figtext(0.12, 0.96, 'The', fontsize = 21, fontname = 'monospace', color = '#313233')\nplt.figtext(0.16, 0.96, 'largest', fontsize = 21, fontname = 'monospace', color = '#AACDE5')\nplt.figtext(0.25, 0.96, 'and the', fontsize = 21, fontname = 'monospace', color = '#313233')\nplt.figtext(0.345, 0.96, 'smallest', fontsize = 21, fontname = 'monospace', color = '#75b1a9')\nplt.figtext(0.45, 0.96, 'count of respondents by country in 2021', fontsize = 21, fontname = 'monospace', color = '#313233')\n\nl1 = lines.Line2D([0.125, 0.9], [0.07, 0.07], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.figtext(0.122, -0.08, '''It would be important to note that the number of countries has increased in 3 years,\nthe Data Science and Kaggle community is expanding and there have appeared new\ncountries such as: Ecuador, Uganda, Kazakhstan, Ethiopia and Iraq, which have\nnever appeared in the survey results!''', fontname = 'monospace', size = 14, color = '#313233')\n\nplt.show()","948213ad":"cntrs = sur2018['Q3'].value_counts().reset_index().rename(columns={'Q3':'2018'})\\\n.merge(sur2019['Q3'].value_counts().reset_index().rename(columns={'Q3':'2019'}), how = 'left', left_on = 'index', right_on = 'index')\\\n.merge(sur2020['Q3'].value_counts().reset_index().rename(columns={'Q3':'2020'}), how = 'left', left_on = 'index', right_on = 'index')\\\n.merge(sur2021['Q3'].value_counts().reset_index().rename(columns={'Q3':'2021'}), how = 'left', left_on = 'index', right_on = 'index')\\\n.query(\"index == 'United States of America' | index == 'India' | index == 'China' | index == 'Russia'\")\\\n.transpose()\n\ncntrs.columns = cntrs.iloc[0]\ncntrs = cntrs[1:].reset_index().rename(columns={'index':'year'})\n\nfor i in cntrs.columns.tolist():\n    cntrs[i] = cntrs[i].astype('int')\n    \nfig = plt.figure(figsize = (15, 6))\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.lineplot(data = cntrs, x = 'year', y = 'United States of America', color = '#75b1a9', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([2650]), color = '#75b1a9', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = cntrs, x = 'year', y = 'India', color = '#d9b44a', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([7434]), color = '#d9b44a', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = cntrs, x = 'year', y = 'China', color = '#AACDE5', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([814]), color = '#AACDE5', s = 90, edgecolor = 'black', zorder = 5)\na = sns.lineplot(data = cntrs, x = 'year', y = 'Russia', color = '#4f6457', linewidth = 2)\nsns.scatterplot(x = 2021, y = np.array([742]), color = '#4f6457', s = 90, edgecolor = 'black', zorder = 5)\nplt.xticks(np.array([2018, 2019, 2020, 2021]), fontname = 'monospace', size = 16, color = '#313233')\nplt.yticks(np.array([2000, 4000, 6000, 8000]), fontname = 'monospace', size = 15, color = '#313233')\na.yaxis.set_major_formatter(FixedFormatter(['2k', '4k', '6k', '8k']))\na.yaxis.set_major_locator(FixedLocator([2000, 4000, 6000, 8000]))\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n\nplt.figtext(0.845, 0.87, '7 434', fontname = 'monospace', size = 14, color = '#d9b44a')\nplt.figtext(0.845, 0.4, '2 650', fontname = 'monospace', size = 14, color = '#75b1a9')\nplt.figtext(0.85, 0.23, '814', fontname = 'monospace', size = 14, color = '#AACDE5') \nplt.figtext(0.85, 0.14, '742', fontname = 'monospace', size = 14, color = '#4f6457')\n\nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.figtext(0.12, 0.98, 'Dynamics of participation of the', fontsize = 23, fontname = 'monospace', color = '#313233')\nplt.figtext(0.545, 0.98, 'USA', fontsize = 23, fontname = 'monospace', color = '#75b1a9')\nplt.figtext(0.583, 0.98, ',', fontsize = 23, fontname = 'monospace', color = '#313233')\nplt.figtext(0.609, 0.98, 'India', fontsize = 23, fontname = 'monospace', color = '#d9b44a')\nplt.figtext(0.672, 0.98, ',', fontsize = 23, fontname = 'monospace', color = '#313233')\nplt.figtext(0.698, 0.98, 'China', fontsize = 23, fontname = 'monospace', color = '#AACDE5')\nplt.figtext(0.775, 0.98, 'and', fontsize = 23, fontname = 'monospace', color = '#313233')\nplt.figtext(0.826, 0.98, 'Russia', fontsize = 23, fontname = 'monospace', color = '#4f6457')\n\nplt.figtext(0.122, -0.18, '''In 2018, the majority of respondents were from the USA, but since 2019, India has gained \nthe upper hand and continues to conquer Kaggle. For now the United States remains\nin second place but the number of respondents from this country decreased by 43.8%.\nChina and Russia have about the same result.''', fontname = 'monospace', size = 14, color = '#313233')\n\nplt.show()","ae6f8275":"languages = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[7:18]:\n    languages = np.append(languages, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nlanguages = {'languages': languages}\nlan21 = pd.DataFrame(data=languages)\nlan21['results'] = results\nlan21['percentage'] = round(lan21['results'] \/ len(sur2021) * 100, 1)\nlan21.sort_values('results', inplace = True)\n\nfig = plt.figure(figsize = (15, 5.5))\nclrs = ['#65b2e5' if x > 12000 else '#AACDE5' for x in lan21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = lan21, x = 'percentage', y = 'languages', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(3 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","e49a39f4":"languages = np.array([])\nresults = np.array([])\nfor i in sur2018.columns.tolist()[65:83]:\n    languages = np.append(languages, np.array(sur2018[sur2018[i] == sur2018[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2018[sur2018[i] == sur2018[i]][i])))\nlanguages = {'languages': languages}\nlan18 = pd.DataFrame(data=languages)\nlan18['results'] = results\nlan18['percentage'] = round(lan18['results'] \/ len(sur2018) * 100, 1)\nlan18.sort_values('results', inplace = True)\n\nlan18_21 = lan18.merge(lan21, how = 'right', left_on = 'languages', right_on = 'languages')\\\n.rename(columns={'percentage_x': '2018', 'percentage_y': '2021'})\\\n.dropna().drop(['results_x', 'results_y'], axis = 1)\n\ndsl = ['Python', 'R', 'SQL']\nlan18_21 = lan18_21[lan18_21['languages'].isin(dsl)]\n\nfig = plt.figure(figsize = (15, 3.5))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = lan18_21['2021'], y = lan18_21['languages'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = lan18_21['2018'], y = lan18_21['languages'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(np.array([0, 10, 20, 30, 40, 50, 60, 70, 80]), fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%']))\na.xaxis.set_major_locator(FixedLocator([0, 10, 20, 30, 40, 50, 60, 70, 80]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\na.set_ylim(-1, 2.8)\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom', 'left']:\n    a.spines[j].set_linewidth(2)\n    \nl1 = lines.Line2D([0.125, 0.9], [-0.03, -0.03], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(lan18_21['languages'], lan18_21['2018'], lan18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.92, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.92, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.75, '''From year to year, Python is becoming more popular while R is gradually fading. Many people\nunderstand that Python is simpler and often used in commerce, and the R language is more complex\nand it is a scientific tool. SQL is also becoming more popular.\n\nThese are the three main languages in data science, which are most often recommended\nfor learning first:\n\nPython - 59.4% in 2018 and 77.8% in 2021;\nSQL - 3.8% in 2018 and 5.2% in 2021;\nR - 9.8% in 2018 and 5.6% in 2021.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","3e8945eb":"ide = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[21:33]:\n    ide = np.append(ide, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nide = {'ide': ide}\nide21 = pd.DataFrame(data=ide)\nide21['results'] = results\nide21['percentage'] = round(ide21['results'] \/ len(sur2021) * 100, 1)\nide21.sort_values('results', inplace = True)\nide21 = ide21.query(\"ide != 'None'\")\nide21['ide'] = ide21['ide'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 5.5))\nclrs = ['#65b2e5' if x > 12000 else '#AACDE5' for x in ide21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ide21, x = 'percentage', y = 'ide', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(2 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","bf683d3f":"ide = np.array([])\nresults = np.array([])\nfor i in sur2018.columns.tolist()[30:44]:\n    ide = np.append(ide, np.array(sur2018[sur2018[i] == sur2018[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2018[sur2018[i] == sur2018[i]][i])))\nide = {'ide': ide}\nide18 = pd.DataFrame(data=ide)\nide18['results'] = results\nide18['percentage'] = round(ide18['results'] \/ len(sur2018) * 100, 1)\nide18.sort_values('results', inplace = True)\nide18 = ide18.query(\"ide != 'None'\")\n\nide18_21 = ide18.merge(ide21, how = 'right', left_on = 'ide', right_on = 'ide')\\\n.rename(columns={'percentage_x': '2018', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ide18_21['2021'], y = ide18_21['ide'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ide18_21['2018'], y = ide18_21['ide'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['10%', '15%', '20%', '25%', '30%', '35%']))\na.xaxis.set_major_locator(FixedLocator([10, 15, 20, 25, 30, 35]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n\na.set_ylim(7, -0.3)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ide18_21['ide'], ide18_21['2018'], ide18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.94, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.13, '''In 2021, Jupyter notebook occupies the leading position. In 2018, it was not so famous yet and\ntherefore did not even get into the survey, then RStudio took the first place.\nAll IDE's are losing users, even PyCharm.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","4aaa1e05":"nb = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[34:50]:\n    nb = np.append(nb, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nnb = {'nb': nb}\nnb21 = pd.DataFrame(data=nb)\nnb21['results'] = results\nnb21['percentage'] = round(nb21['results'] \/ len(sur2021) * 100, 1)\nnb21.sort_values('results', inplace = True)\nnb21 = nb21.query(\"nb != 'None'\")\nnb21['nb'] = nb21['nb'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 7.5))\nclrs = ['#65b2e5' if x > 9600 else '#AACDE5' for x in nb21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = nb21, x = 'percentage', y = 'nb', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(1.3 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","62d9c973":"nb = np.array([])\nresults = np.array([])\nfor i in sur2019.columns.tolist()[69:81]:\n    nb = np.append(nb, np.array(sur2019[sur2019[i] == sur2019[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2019[sur2019[i] == sur2019[i]][i])))\nnb = {'nb': nb}\nnb19 = pd.DataFrame(data=nb)\nnb19['results'] = results\nnb19['percentage'] = round(nb19['results'] \/ len(sur2019) * 100, 1)\nnb19.sort_values('results', inplace = True)\nnb19['nb'] = nb19['nb'].apply(lambda x: x.strip())\n\nnb19 = nb19.replace('Microsoft Azure Notebooks', 'Azure Notebooks')\nnb19 = nb19.replace('Google Colab', 'Colab Notebooks')\nnb19 = nb19.replace('Kaggle Notebooks (Kernels)', 'Kaggle Notebooks')\nnb19 = nb19.replace('Google Cloud Notebook Products (AI Platform, Datalab, etc)', 'Google Cloud Notebook Products')\nnb21 = nb21.replace('Google Cloud Notebooks (AI Platform \/ Vertex AI)', 'Google Cloud Notebook Products')\n\nnb19_21 = nb19.merge(nb21, how = 'right', left_on = 'nb', right_on = 'nb')\\\n.rename(columns={'percentage_x': '2019', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 6))\nplt.title('Dynamics', size = 25, y = 1.12, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = nb19_21['2021'], y = nb19_21['nb'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = nb19_21['2019'], y = nb19_21['nb'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%']))\na.xaxis.set_major_locator(FixedLocator([0, 5, 10, 15, 20, 25, 30, 35]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(8, -0.3)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(nb19_21['nb'], nb19_21['2019'], nb19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.94, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.94, '2021', fontname = 'monospace', size = 15, color = '#AACDE5')  \n    \nplt.figtext(0.125, -0.07, '''It would be quite strange if Kaggle Notebooks and Colab Notebooks were not popular\namong the respondents of the Kaggle survey :)''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","2a18cf53":"h = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[52:57]:\n    h = np.append(h, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nh = {'h': h}\nh21 = pd.DataFrame(data=h)\nh21['results'] = results\nh21['percentage'] = round(h21['results'] \/ len(sur2021) * 100, 1)\nh21.sort_values('results', inplace = True)\nh21 = h21.query(\"h != 'None'\")\nh21['h'] = h21['h'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 2))\nclrs = ['#65b2e5' if x > 5000 else '#AACDE5' for x in h21['results']]\nplt.title('Results 2021', size = 25, y = 1.2, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = h21, x = 'percentage', y = 'h', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(1 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n    \nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nplt.figtext(0.125, -0.4, '''In 2019, only 2.5% of participants used TPU and more than half indicated that they use CPU.\nIn 2021, the CPU is no longer considered special hardware, so there are already\nmore GPUs and TPUs in use, because they are much more powerful.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n\nplt.show()","1d0d1c5d":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[72:89]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\nml21 = ml21.replace('H2O 3', 'H20')\n\nfig = plt.figure(figsize = (15, 7.5))\nclrs = ['#65b2e5' if x > 10000 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(2 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","136b8e6f":"ml = np.array([])\nresults = np.array([])\nfor i in sur2018.columns.tolist()[88:107]:\n    ml = np.append(ml, np.array(sur2018[sur2018[i] == sur2018[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2018[sur2018[i] == sur2018[i]][i])))\nml = {'ml': ml}\nml18 = pd.DataFrame(data=ml)\nml18['results'] = results\nml18['percentage'] = round(ml18['results'] \/ len(sur2018) * 100, 1)\nml18.sort_values('results', inplace = True)\nml18['ml'] = ml18['ml'].apply(lambda x: x.strip())\nml18 = ml18.replace('catboost', 'CatBoost')\nml18 = ml18.replace('lightgbm', 'LightGBM')\nml18 = ml18.replace('Scikit-Learn', 'Scikit-learn')\nml18 = ml18.replace('Mxnet', 'MXNet')\nml18 = ml18.replace('Fastai', 'Fast.ai')\n\nml18_21 = ml18.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2018', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 10))\nplt.title('Dynamics', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml18_21['2021'], y = ml18_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml18_21['2018'], y = ml18_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '10%', '20%', '30%', '40%', '50%']))\na.xaxis.set_major_locator(FixedLocator([0, 10, 20, 30, 40, 50]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.06, 0.06], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml18_21['ml'], ml18_21['2018'], ml18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.935, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.935, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.01, '''In general, preferences in algorithms have not changed much in 3 years, except that there is a\ndecrease in the use of TensorFlow, Keras, Caret and H2O. PyTorch has become more popular.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","38a220fa":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[90:101]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 5))\nclrs = ['#65b2e5' if x > 12000 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(2 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","42b8a854":"ml = np.array([])\nresults = np.array([])\nfor i in sur2019.columns.tolist()[118:130]:\n    ml = np.append(ml, np.array(sur2019[sur2019[i] == sur2019[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2019[sur2019[i] == sur2019[i]][i])))\nml = {'ml': ml}\nml19 = pd.DataFrame(data=ml)\nml19['results'] = results\nml19['percentage'] = round(ml19['results'] \/ len(sur2019) * 100, 1)\nml19.sort_values('results', inplace = True)\nml19['ml'] = ml19['ml'].apply(lambda x: x.strip())\nml19 = ml19.replace('Transformer Networks (BERT, gpt-2, etc)', 'Transformer Networks')\nml19 = ml19.replace('Gradient Boosting Machines (xgboost, lightgbm, etc)', 'Gradient Boosting Machines')\nml19 = ml19.replace('Dense Neural Networks (MLPs, etc)', 'Dense Neural Networks')\nml21 = ml21.replace('Transformer Networks (BERT, gpt-3, etc)', 'Transformer Networks')\nml21 = ml21.replace('Gradient Boosting Machines (xgboost, lightgbm, etc)', 'Gradient Boosting Machines')\nml21 = ml21.replace('Dense Neural Networks (MLPs, etc)', 'Dense Neural Networks')\n\nml19_21 = ml19.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2019', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 8))\nplt.title('Dynamics', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml19_21['2021'], y = ml19_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml19_21['2019'], y = ml19_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['10%', '20%', '30%', '40%', '50%', '60%']))\na.xaxis.set_major_locator(FixedLocator([10, 20, 30, 40, 50, 60]))\nplt.yticks(fontname = 'monospace', size = 15, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(10, -0.3)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.06, 0.06], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml19_21['ml'], ml19_21['2019'], ml19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.93, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.93, '2021', fontname = 'monospace', size = 15, color = '#AACDE5')\n    \nplt.figtext(0.125, 0.01, '''In general, there have been no major changes, but interest in the Transformer Networks has grown.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","ecc8336a":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[102:108]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\nml21 = ml21.replace('Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)',\n                    'Image classification and other general purpose networks')\nml21 = ml21.replace('Image segmentation methods (U-Net, Mask R-CNN, etc)',\n                    'Image segmentation methods')\nml21 = ml21.replace('Object detection methods (YOLOv3, RetinaNet, etc)',\n                    'Object detection methods')\nml21 = ml21.replace('General purpose image\/video tools (PIL, cv2, skimage, etc)',\n                    'General purpose image\/video tools')\nml21 = ml21.replace('Generative Networks (GAN, VAE, etc)',\n                    'Generative Networks')\n\nfig = plt.figure(figsize = (15, 2.5))\nclrs = ['#65b2e5' if x > 3000 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","159fda88":"ml = np.array([])\nresults = np.array([])\nfor i in sur2019.columns.tolist()[140:147]:\n    ml = np.append(ml, np.array(sur2019[sur2019[i] == sur2019[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2019[sur2019[i] == sur2019[i]][i])))\nml = {'ml': ml}\nml19 = pd.DataFrame(data=ml)\nml19['results'] = results\nml19['percentage'] = round(ml19['results'] \/ len(sur2019) * 100, 1)\nml19.sort_values('results', inplace = True)\nml19['ml'] = ml19['ml'].apply(lambda x: x.strip())\nml19 = ml19.replace('Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)',\n                    'Image classification and other general purpose networks')\nml19 = ml19.replace('Image segmentation methods (U-Net, Mask R-CNN, etc)',\n                    'Image segmentation methods')\nml19 = ml19.replace('Object detection methods (YOLOv3, RetinaNet, etc)',\n                    'Object detection methods')\nml19 = ml19.replace('General purpose image\/video tools (PIL, cv2, skimage, etc)',\n                    'General purpose image\/video tools')\nml19 = ml19.replace('Generative Networks (GAN, VAE, etc)',\n                    'Generative Networks')\n\nml19_21 = ml19.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2019', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 4.5))\nplt.title('Dynamics', size = 25, y = 1.08, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml19_21['2021'], y = ml19_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml19_21['2019'], y = ml19_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['6%', '8%', '10%', '12%', '14%', '16%']))\na.xaxis.set_major_locator(FixedLocator([6, 8, 10, 12, 14, 16]))\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(5, -0.3)\n    \nl1 = lines.Line2D([0.125, 0.9], [0.02, 0.02], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-',linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml19_21['ml'], ml19_21['2019'], ml19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.9, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.9, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.22, '''There is a slight increase in Image classification and other general purpose networks\n(VGG, Inception, ResNet, ResNeXt) and Object detection methods (YOLOv3, RetinaNet).\nThere is also a slight decrease in Genreral purpose\nimage\/video tools (PIL, cv2, skimage).''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","54a97282":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[109:114]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\nml21 = ml21.replace('Contextualized embeddings (ELMo, CoVe)',\n                    'Contextualized embeddings')\nml21 = ml21.replace('Encoder-decorder models (seq2seq, vanilla transformers)',\n                    'Encoder-decorder models')\nml21 = ml21.replace('Transformer language models (GPT-3, BERT, XLnet, etc)',\n                    'Transformer language models')\nml21 = ml21.replace('Word embeddings\/vectors (GLoVe, fastText, word2vec)',\n                    'Word embeddings\/vectors')\n\nfig = plt.figure(figsize = (15, 2))\nclrs = ['#65b2e5' if x > 2400 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.3 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","c350c201":"ml = np.array([])\nresults = np.array([])\nfor i in sur2019.columns.tolist()[148:154]:\n    ml = np.append(ml, np.array(sur2019[sur2019[i] == sur2019[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2019[sur2019[i] == sur2019[i]][i])))\nml = {'ml': ml}\nml19 = pd.DataFrame(data=ml)\nml19['results'] = results\nml19['percentage'] = round(ml19['results'] \/ len(sur2019) * 100, 1)\nml19.sort_values('results', inplace = True)\nml19['ml'] = ml19['ml'].apply(lambda x: x.strip())\nml19 = ml19.replace('Transformer language models (GPT-2, BERT, XLnet, etc)', 'Transformer language models')\nml19 = ml19.replace('Contextualized embeddings (ELMo, CoVe)',\n                    'Contextualized embeddings')\nml19 = ml19.replace('Encoder-decorder models (seq2seq, vanilla transformers)',\n                    'Encoder-decorder models')\nml19 = ml19.replace('Word embeddings\/vectors (GLoVe, fastText, word2vec)',\n                    'Word embeddings\/vectors')\n\nml19_21 = ml19.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2019', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 4))\nplt.title('Dynamics', size = 25, y = 1.08, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml19_21['2021'], y = ml19_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml19_21['2019'], y = ml19_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['3%', '4%', '5%', '6%', '7%', '8%', '9%', '10%', '11%']))\na.xaxis.set_major_locator(FixedLocator([3,4,5,6,7,8,9,10,11]))\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(4, -0.3)\n\nl1 = lines.Line2D([0.125, 0.9], [0, 0], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-', linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml19_21['ml'], ml19_21['2019'], ml19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.9, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.9, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.2, '''And here it's more interesting. There is a sharp increase in interest in Transformer\nlanguage models (GPT-3, BERT, XLnet). Encoder-decoder models (seq2seq, vanilla transformers)\nalso has a slight increase.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","298e6e20":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[213:219]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 2)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 3))\nclrs = ['#65b2e5' if x > 500 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.1 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","fbff8c03":"ml = np.array([])\nresults = np.array([])\nfor i in sur2019.columns.tolist()[220:232]:\n    ml = np.append(ml, np.array(sur2019[sur2019[i] == sur2019[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2019[sur2019[i] == sur2019[i]][i])))\nml = {'ml': ml}\nml19 = pd.DataFrame(data=ml)\nml19['results'] = results\nml19['percentage'] = round(ml19['results'] \/ len(sur2019) * 100, 1)\nml19.sort_values('results', inplace = True)\nml19['ml'] = ml19['ml'].apply(lambda x: x.strip())\nml19 = ml19.replace('Google AutoML', 'Google Cloud AutoML')\nml19 = ml19.replace('H20 Driverless AI', 'H2O Driverless AI')\n\nml19_21 = ml19.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2019', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 4))\nplt.title('Dynamics', size = 25, y = 1.08, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml19_21['2021'], y = ml19_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml19_21['2019'], y = ml19_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['1%', '1.25%', '1.5%', '1.75%', '2%', '2.25%', '2.5%', '2.75%']))\na.xaxis.set_major_locator(FixedLocator([1,1.25,1.5,1.75,2,2.25,2.5,2.75]))\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(4, -0.3)\n\nl1 = lines.Line2D([0.125, 0.9], [0, 0], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-', linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml19_21['ml'], ml19_21['2019'], ml19_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.9, '2019', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.9, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.17, '''Google Cloud AutoML has a leading position, however, in 2019 it had Auto-Sklearn, which for\nsome reason didn't appear in the response option of the 2021 survey.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","3aa92bd1":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[59:70]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 5))\nclrs = ['#65b2e5' if x > 14000 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(2.2 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","92a7e059":"ml = np.array([])\nresults = np.array([])\nfor i in sur2018.columns.tolist()[110:123]:\n    ml = np.append(ml, np.array(sur2018[sur2018[i] == sur2018[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2018[sur2018[i] == sur2018[i]][i])))\nml = {'ml': ml}\nml18 = pd.DataFrame(data=ml)\nml18['results'] = results\nml18['percentage'] = round(ml18['results'] \/ len(sur2018) * 100, 1)\nml18.sort_values('results', inplace = True)\nml18['ml'] = ml18['ml'].apply(lambda x: x.strip())\nml18 = ml18.replace('ggplot2', 'Ggplot \/ ggplot2')\nml18 = ml18.replace('Plotly', 'Plotly \/ Plotly Express')\nml18 = ml18.replace('D3', 'D3 js')\n\n\nml18_21 = ml18.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2018', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 7))\nplt.title('Dynamics', size = 25, y = 1.08, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml18_21['2021'], y = ml18_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml18_21['2018'], y = ml18_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%']))\na.xaxis.set_major_locator(FixedLocator([0,10,20,30,40,50,60,70]))\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \na.set_ylim(9, -0.3)\n\nl1 = lines.Line2D([0.125, 0.9], [0.05, 0.05], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-', linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml18_21['ml'], ml18_21['2018'], ml18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.91, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.91, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.07, '''The most popular libraries are Matplotlib and Seaborn, having increased the number of respondents\nusing them by more than 10% in 4 years. This is because these libraries belong to Python, \nand ggplot2, which belongs to R, lost more than 10% of respondents.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","4cd6ff9c":"ml = np.array([])\nresults = np.array([])\nfor i in sur2021.columns.tolist()[165:185]:\n    ml = np.append(ml, np.array(sur2021[sur2021[i] == sur2021[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2021[sur2021[i] == sur2021[i]][i])))\nml = {'ml': ml}\nml21 = pd.DataFrame(data=ml)\nml21['results'] = results\nml21['percentage'] = round(ml21['results'] \/ len(sur2021) * 100, 1)\nml21.sort_values('results', inplace = True)\nml21 = ml21.query(\"ml != 'None'\")\nml21['ml'] = ml21['ml'].apply(lambda x: x.strip())\n\nfig = plt.figure(figsize = (15, 10))\nclrs = ['#65b2e5' if x > 3000 else '#AACDE5' for x in ml21['results']]\nplt.title('Results 2021', size = 25, y = 1.1, fontname = 'monospace', color = '#313233')\na = sns.barplot(data = ml21, x = 'percentage', y = 'ml', palette = clrs, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.xlabel('')\nplt.ylabel('')\nfor j in ['right', 'top', 'bottom', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55*p.get_height(), f'{width}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 14, color = '#313233')\n\nplt.show()","135bce7b":"ml = np.array([])\nresults = np.array([])\nfor i in sur2018.columns.tolist()[195:223]:\n    ml = np.append(ml, np.array(sur2018[sur2018[i] == sur2018[i]][i].reset_index().iloc[0,1]))\n    results = np.append(results, np.array(len(sur2018[sur2018[i] == sur2018[i]][i])))\nml = {'ml': ml}\nml18 = pd.DataFrame(data=ml)\nml18['results'] = results\nml18['percentage'] = round(ml18['results'] \/ len(sur2018) * 100, 1)\nml18.sort_values('results', inplace = True)\nml18['ml'] = ml18['ml'].apply(lambda x: x.strip())\nml18 = ml18.replace('AWS Aurora', 'Amazon Aurora')\nml18 = ml18.replace('Google Cloud Bigtable', 'Google Cloud BigTable')\nml18 = ml18.replace('IBM Cloud Db2', 'IBM Db2')\nml18 = ml18.replace('Azure Cosmos DB', 'Microsoft Azure Cosmos DB')\nml18 = ml18.replace('AWS DynamoDB', 'Amazon DynamoDB')\nml18 = ml18.replace('Azure SQL Database', 'Microsoft Azure SQL Database')\nml18 = ml18.replace('PostgresSQL', 'PostgreSQL')\n\nml18_21 = ml18.merge(ml21, how = 'right', left_on = 'ml', right_on = 'ml')\\\n.rename(columns={'percentage_x': '2018', 'percentage_y': '2021'}).dropna()\n\nfig = plt.figure(figsize = (15, 10))\nplt.title('Dynamics', size = 25, y = 1.08, fontname = 'monospace', color = '#313233')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1, zorder = 0)\na = sns.scatterplot(x = ml18_21['2021'], y = ml18_21['ml'], color = '#AACDE5', s = 300, edgecolor = 'black', zorder = 5)\nsns.scatterplot(x = ml18_21['2018'], y = ml18_21['ml'], color = '#d9b44a', s = 100, edgecolor = 'black', zorder = 5)\nplt.xticks(fontname = 'monospace', size = 15, color = '#313233')\na.xaxis.set_major_formatter(FixedFormatter(['0%', '5%', '10%', '15%', '20%', '25%']))\na.xaxis.set_major_locator(FixedLocator([0,5,10,15,20,25]))\nplt.yticks(fontname = 'monospace', size = 14, color = '#313233')\nplt.ylabel('')\nplt.xlabel('')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(2)\n\nl1 = lines.Line2D([0.125, 0.9], [0.05, 0.05], transform = fig.transFigure, figure = fig, color = '#ededed', linestyle = '-', linewidth = 4)\na.lines.extend([l1])\n\nfor i, p1, p2 in zip(ml18_21['ml'], ml18_21['2018'], ml18_21['2021']):\n    newline([p1, i], [p2, i])\n    \nplt.figtext(0.48, 0.92, '2018', fontname = 'monospace', size = 15, color = '#d9b44a') \nplt.figtext(0.52, 0.92, '2021', fontname = 'monospace', size = 15, color = '#AACDE5') \n    \nplt.figtext(0.125, -0.07, '''Despite the decrease in the activity of respondents in the use of databases, the trend towards\nuse remains almost the same. MySQL remains the most popular database and more than 20% of\nrespondents noted that they are going to use it in the next 2 years. MongoDB, which is not\npopular yet, is going to be used by more than 15% of respondents.''', fontsize = 14, fontname = 'monospace', color = '#313233')\n    \nplt.show()","d93335b4":"# Automated machine learning tools","f0805436":"# ML frameworks","3403b516":"![](https:\/\/www.guidobarbacci.com\/wp-content\/uploads\/home1-2.png)","b82104c7":"# Programming languages","138ad88c":"**This map provides a detailed analysis by social groups in each country, where you can see the ratios by gender, age, education and average salary.**","e1ebb140":"# Inference","c3fa67d0":"# Age","64d27d2a":"# Job","85862173":"# Big Data products","d217da8f":"But I will consider the period from 2019 to 2021, because, as we have already found out, most respondents have a salary of up to 5k per year, and in the 2018 survey, respondents chose salaries with too large scale (for example 0-10k), so it would be more correct to consider surveys where more correct salaries are indicated.","c77c0c0c":"# Gender","ae9891d4":"Here is an analysis of Kaggle surveys from 2018 to 2021. The work consists of two parts: socio-economic analysis of respondents and analysis of trends in data science tools. The first part shows the dynamics of changes in age, education level, salary level and other indicators provided by respondents. Since the 2018 survey was different from the 2019-2021 surveys, some plots may show dynamics that do not include 2018. The second part is simpler. You will see which tools were in demand a few years ago, and what is becoming popular now.\n\n**25973** participants from **66** countries took part in the 2021 survey. The number of questions is **38**. The median survey execution time is **10.9** minutes.\n\nAll conclusions are based solely on the available data and are not generalized due to the presence of many social groups and a small data.","69b094b8":"<h1 style=\"background-color:#a0c6eb;text-align:center;color:white;font-size:400%;font-family:monospace;border-radius:10px\">PART II<\/h1>","f5b01f26":"# Do you want a big salary? Let's see what needs to be done for this.","758492d1":"**So, if you want a high salary, you have to live in USA, have a doctorate degree with 20 years of experience and be a data scientist. Easy :)**","ddf8e420":"# Data visualization libraries","85aac659":"<h1 style=\"background-color:#a0c6eb;text-align:center;color:white;font-size:400%;font-family:monospace;border-radius:10px\">PART I<\/h1>","0b71fab3":"# Specialized hardware","b0510a0d":"So, I have analyzed the main questions of the survey for each of which a conclusion was made. You can go into details for a very long time, considering each question from a certain social group, of which there are a lot. Therefore, it seemed to me that it would be more correct to consider general trends. If you liked my work, you can **upvote** it. Also, if you find an error, write in the comments :)","e0f7f6d7":"# Introduction","25a7d9e6":"# Integrated development environments (IDE's)","b2e27c8f":"# ML algorithms","170ef417":"# Notebook products","f6f20441":"# Programming experience","69ff2a1a":"# Natural language processing methods","bd6bf756":"# Education","07dc6838":"# World map of Kaggle respondents","6f601445":"![](https:\/\/content.techgig.com\/thumb\/msid-76354712,width-860,resizemode-4\/Roadmap-to-become-a-successful-programmer.jpg?216831)","baa5c7ed":"# Salary","e39fd377":"# Computer vision methods"}}