{"cell_type":{"e193e923":"code","83558947":"code","abc8dfbe":"code","39a3623d":"code","7de8fa1f":"code","a8d67e32":"code","e2b8fc32":"code","66a954c6":"code","5ad2a344":"code","4ea220b9":"code","424a96fc":"code","2f3bcedb":"code","09622942":"code","66545906":"code","cb666efd":"markdown","aedf42cb":"markdown"},"source":{"e193e923":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# Load the datasets\ntrain = pd.read_csv('..\/input\/healthcare-dataset-stroke-data\/train_2v.csv')\nholdout = pd.read_csv('..\/input\/healthcare-dataset-stroke-data\/test_2v.csv')","83558947":"print(train.shape)\ntrain.head()","abc8dfbe":"train.isna().sum()","39a3623d":"print(len(train['id'].value_counts()) == train.shape[0])","7de8fa1f":"gender_group = train.groupby(['gender'], as_index=False)\ngender_group_count = gender_group.count()['stroke']\ngender_group_sum = gender_group.sum()['stroke']\ngender_group_percentage = gender_group_sum \/ gender_group_count * 100\n\n\nplt.bar(x=[0,1,2], height=gender_group_percentage, tick_label=['Female', 'Male', 'Other'])\nplt.title(\"Gender vs Stroke Risk\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Stoke Risk %\")\nplt.show()","a8d67e32":"def grouped_graph(column, labels):\n    group = train.groupby([column], as_index=False)\n    group_count = group.count()['stroke']\n    group_sum = group.sum()['stroke']\n    group_percentage = group_sum \/ group_count * 100\n\n    group_percentage\n    \n    plt.bar(x=range(0, len(labels)), height=group_percentage, tick_label=labels)\n    plt.title(\"{} vs Stroke Risk\".format(column))\n    plt.xlabel(\"{}\".format(column))\n    plt.ylabel(\"Stoke Risk %\")\n    plt.show()","e2b8fc32":"grouped_graph('hypertension', ['no hypertension', 'hypertension'])","66a954c6":"grouped_graph('heart_disease', ['no heart_disease', 'heart_disease'])","5ad2a344":"grouped_graph('ever_married', ['no', 'yes'])","4ea220b9":"def get_bmi_groups(bmi):\n    if bmi >= 16 and bmi <18.5:\n        return \"Underweight\"\n    elif bmi >= 18.5 and bmi < 25 :\n        return \"Normal weight\"\n    elif bmi >= 25 and bmi < 30:\n        return \"Overweight\"\n    elif bmi >= 30 and bmi < 35:\n        return \"Obese Class I (Moderately obese)\"\n    elif bmi >= 35 and bmi < 40:\n        return \"Obese Class II (Severely obese)\"\n    elif bmi >= 40 and bmi < 45:\n        return \"Obese Class III (Very severely obese)\"\n    elif bmi >= 45 and bmi < 50:\n        return \"Obese Class IV (Morbidly Obese)\"\n    elif bmi >= 50 and bmi < 60:\n        return \"Obese Class V (Super Obese)\"\n    elif bmi >= 60:\n        return \"Obese Class VI (Hyper Obese)\"\n    \n    \ntrain['bmi_group'] = train['bmi'].apply(get_bmi_groups)\nlabels = [\"Normal Weight\", \"Class 1\", \"Class 2\", \"Class 3\", \"Class 4\", \"Class 5\", \"Class 6\", \"Overweight\", \"Underweight\"]\ngrouped_graph('bmi_group', labels)","424a96fc":"group = train.groupby(['work_type'], as_index=False).sum()\nlabels = ['Govt_job', 'Never_worked', 'Private', 'Self-employed', 'children']\ngrouped_graph('work_type', labels)","2f3bcedb":"grouped_graph('Residence_type', ['Rural', 'Urban'])","09622942":"train['smoking_status'] = train['smoking_status'].fillna(-1)\ntrain.groupby(['smoking_status'], as_index=False).sum()\nlabels = ['-1', 'formerly smoked', 'never smoked', 'smokes']\ngrouped_graph('smoking_status', labels)","66545906":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\n\nclf = RandomForestClassifier()\n\nX = train[['age', 'hypertension', 'heart_disease',\n           'avg_glucose_level']]\ny = train['stroke']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nf1 = f1_score(y_test, predictions) \n\nprint(f1)","cb666efd":"## Modelling","aedf42cb":"We can see a couple of columns"}}