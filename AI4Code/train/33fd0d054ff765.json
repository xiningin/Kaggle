{"cell_type":{"d6ec63bc":"code","f1c68ca1":"code","e776497a":"code","a131e2e7":"code","56670b62":"code","449255fc":"code","41283491":"code","dae7d461":"code","60783a69":"code","68241f91":"code","85b4e957":"code","ac9c8646":"code","026577ee":"code","ab5c2f39":"code","fb357fa7":"code","4362840a":"code","26516d03":"code","2c9958dc":"code","8734e411":"code","4ec3da73":"code","acff88e1":"code","d509e7c6":"code","320d155f":"code","d87db172":"code","383383e8":"code","9d5cfdbd":"markdown","c634a245":"markdown","798c7808":"markdown","4be45311":"markdown","4904df8c":"markdown","b4a14878":"markdown","681adae4":"markdown","09a458a8":"markdown","3ce8bc56":"markdown","16013073":"markdown","678204a3":"markdown","1ab93963":"markdown"},"source":{"d6ec63bc":"#importing numpy \n\nimport numpy as np # linear algebra","f1c68ca1":"#initiating numpy arrays\na = np.array([1,2,3])\nb = np.array([[1.3,4.5],[2.3,6.7]])\nprint(a)\nprint(b)","e776497a":"#Looking at the dimensions\nprint(a.ndim)\nprint(b.ndim)","a131e2e7":"#Getting shape\nprint(a.shape)\nprint(b.shape)","56670b62":"#Getting the type\nprint(a.dtype)\nprint(b.dtype)","449255fc":"#get size of each element and overall size\nprint(a.itemsize, a.nbytes)\nprint(b.itemsize, b.nbytes)","41283491":"#All 0 matrix\nnp.zeros((3,3))","dae7d461":"# All 1 matrix\nnp.ones((3,4))","60783a69":"# Any other number\nnp.full((3,3),12)","68241f91":"#Random Decimal Numbers\nnp.random.rand(2,5)","85b4e957":"#Random Integer Numbers\nnp.random.randint(0,9,size = (2,3))","ac9c8646":"#Identity Matrix\nnp.identity(4)","026577ee":"#Repeating an array\na = np.array([[0,5,9]])\nnp.repeat(a,5,axis = 0)","ab5c2f39":"##################\n11111\n10001\n10901\n10001\n11111\n##################\nfirst = np.ones((5,5),dtype = \"int8\")\nsecond = np.zeros((3,3),dtype = \"int8\")\nsecond[1,1] = 9\nfirst[1:4,1:4] = second\nfirst","fb357fa7":"#Finding Sine\na = np.array([1,2,3,4,5])\nnp.sin(a)","4362840a":"#Matrix Multiplication\n\na = np.array([[1,2,3],[4,5,6]])\nb = np.array([[1,2],[3,4],[5,6]])\nnp.matmul(a,b)","26516d03":"# Min \na = np.array([[1,2,3],[4,5,6]])\nprint(np.min(a))\nprint(np.min(a,axis = 0))","2c9958dc":"x = np.array([1,2,3,4,5,6,np.nan])\nprint(np.min(x))\nprint(np.nanmin(x))","8734e411":"#Range\na = np.array([1,2,3,4,5,7,9])\nb = np.array([[1,10],[99,0]])\nprint(np.ptp(a))\nprint(np.ptp(b, axis = 0))","4ec3da73":"#Percentiles\nnp.percentile(a,50)","acff88e1":"#Correlation\na = np.array([1,2,3,4])\nb = np.array([7,8,9,1])\nnp.corrcoef(a,b)","d509e7c6":"a = np.array([[1,2,3,4],[5,6,7,8]])\nprint(a)\nprint(a.reshape(1,8))\n\nprint(a.reshape(4,2))\n\nprint(a.reshape(2,2,2))","320d155f":"# Vertical and Horizontal Stacking\na = np.array([1,2,3,4])\nb = np.array([5,6,7,8])\nprint(np.vstack([a,b,a,b]))\nprint(np.hstack([a,b,a,b]))","d87db172":"# Finding Unique elements\nnp.unique([1, 1, 2, 2, 3, 3])","383383e8":"a = np.array([1,2,3,4])\nb = np.array([5,6,7,4])\nprint(np.intersect1d(a,b))\nprint(np.union1d(a,b))\nprint(np.setdiff1d(a,b))\nprint(np.setxor1d(a,b))","9d5cfdbd":"### Initializing Different types of arrays","c634a245":"NaN values are propagated, that is if at least one item is NaN, the corresponding min value will be NaN as well. To ignore NaN values (MATLAB behavior), please use nanmin.","798c7808":"Credits: \n1. https:\/\/www.youtube.com\/watch?v=QUT1VHiLmmI&t=928s\n2. https:\/\/numpy.org\/doc\/stable\/reference\/index.html","4be45311":"## 5.Reorganising Arrays","4904df8c":"### What is Numpy?\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I\/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.","b4a14878":"# 1.Introduction","681adae4":"## 6. Set Operations","09a458a8":"Contents:\n1. Introduction\n2. Creating Arrays\n3. Mathematical Operations\n4. Statistical Operations\n5. Reorganising Arrays\n6. Set Operations","3ce8bc56":"## 3.Statistical Operations","16013073":"## 2. Mathematical Operations","678204a3":"![https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/1a\/NumPy_logo.svg\/1280px-NumPy_logo.svg.png](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/1a\/NumPy_logo.svg\/1280px-NumPy_logo.svg.png)","1ab93963":"### How are Python Lists different from Numpy?\n\n1. Uses Less Bytes of Memory - Numpy uses fixed type while Python Lists doesn't. So, numpy just stores the value while Lists store the Size, Reference Count, Object Type and Object Value\n\n2. Contiguous Memmory - Numpy uses contiguous memory while Lists doesn't. So, it needs pointers to connect the list items.\n\n3. Speed - Numpy is faster as they use lesser bytes of memory, type checking is not required as it is of fixed type, uses contiguous memory (so can take advantage of SIMD vector processing), effective cache utilization)\n\n4. More Operations than Numpy - Item wise computations (a*b)"}}