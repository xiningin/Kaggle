{"cell_type":{"ccc8a0de":"code","229756d7":"code","efa854d5":"code","a297d3ff":"code","502866ec":"code","30cfedcf":"code","27429114":"code","5865f227":"code","40f26c89":"code","5d59ec7c":"code","ad712011":"code","32a290d3":"code","7b6704c4":"code","975efcee":"code","fcf99776":"markdown"},"source":{"ccc8a0de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","229756d7":"from sklearn.metrics import accuracy_score\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nprint(\"We're using TF\", tf.__version__)\n","efa854d5":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","a297d3ff":"print(train.shape,test.shape)\ny = train['label']\ntrain=train.drop(['label'],axis =1)\ntrain = train\/255\ntest = test\/255\n\ndf_train ,df_val,y_train,y_val = train_test_split(train,y,test_size=0.2, random_state=111)\nprint(df_train.shape,df_val.shape,y_train.shape,y_val.shape)\n","502866ec":"import keras\ny_train_oh = keras.utils.to_categorical(y_train, 10)\ny_val_oh = keras.utils.to_categorical(y_val, 10)","30cfedcf":"print(df_train.shape,df_val.shape,y_train_oh.shape,y_val_oh.shape)","27429114":"dims = df_train.shape\nprint(dims[0],dims)\ndize2  = (dims[0],28,28,1)\ndf_train_fn = df_train.to_numpy()\ndf_train_f = df_train_fn.reshape((dize2))\ndf_val_fn = df_val.to_numpy()\ndf_val_f = df_val_fn.reshape((df_val_fn.shape[0],28,28,1))\ndf_test_fn = test.to_numpy()\ndf_test_f = df_test_fn.reshape((df_test_fn.shape[0],28,28,1))\nprint(df_train_f.shape, df_val_f.shape,df_test_f.shape)","5865f227":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import Dropout, Flatten, Input, Dense\n\ndef create_model():\n    \n    def add_conv_block(model, num_filters):\n        \n        model.add(Conv2D(num_filters, 3, activation='relu', padding='same'))\n        model.add(BatchNormalization())\n        model.add(Conv2D(num_filters, 3, activation='relu', padding='valid'))\n        model.add(MaxPooling2D(pool_size=2))\n        model.add(Dropout(0.2))\n\n        return model\n    \n    model = tf.keras.models.Sequential()\n    model.add(Input(shape=(28, 28, 1)))\n    \n    model = add_conv_block(model, 32)\n    model = add_conv_block(model, 64)\n    model = add_conv_block(model, 128)\n\n    model.add(Flatten())\n    model.add(Dense(10, activation='softmax'))\n\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\nmodel = create_model()\nmodel.summary()","40f26c89":"h = model.fit(\n    df_train_f, y_train_oh,\n    validation_data=(df_val_f, y_val_oh),\n    epochs=20, batch_size=4096\n)","5d59ec7c":"preds = model.predict(df_test_f)","ad712011":"print(preds.shape)","32a290d3":"pred1 = np.argmax(preds, axis=1)\nprint(pred1.shape)","7b6704c4":"print(pred1)","975efcee":"df_final = pd.DataFrame(columns = ['ImageId','Label'])\ndf_final['Label'] = pred1\ndf_final['ImageId'] = df_final.index + 1\nnp.savetxt('final_1.csv',pred1)\ndf_final.to_csv(\"final_2.csv\")","fcf99776":"Hi This version will have 0.995 Accuracy.\nIn this version I am using CNN.One of the Simplest model.\nTotal params: 288,618\nTrainable params: 288,170\nNon-trainable params: 448\nIt has 6 Conv2D and with 32 , 64 and 128 Filters.\n\nI used multiple type of batch size line 40,128,256,512,1024 and 4096. \nFor Batch size 4096 i got best input.\n"}}