{"cell_type":{"c19cb82e":"code","7dcd7518":"code","6a012ddd":"code","9e4a53e2":"code","8e7e9ef3":"code","116be145":"code","1cadf716":"code","9a79a57b":"code","50f2e695":"code","0f3df0be":"code","4b3e394b":"code","eb288bc5":"code","576a303b":"code","82f0d3ac":"code","5a74ec57":"code","24602151":"code","863c271b":"code","30159993":"code","a1ebaf23":"code","f8fb1111":"code","176e07e9":"code","5f3e5a95":"code","a2781bcc":"code","78e77337":"code","cb670134":"code","ab186d1b":"code","35addef3":"code","46ada0cd":"markdown","c457927a":"markdown","5dede308":"markdown","f83bd77b":"markdown","0d9091d3":"markdown","b62b63d7":"markdown","6135b0cf":"markdown","f6e1d8e8":"markdown","e2f68561":"markdown","12a6190d":"markdown","5033878a":"markdown","2b932922":"markdown","f4480043":"markdown","a2d56e71":"markdown","103110ab":"markdown"},"source":{"c19cb82e":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","7dcd7518":"data = pd.read_csv('..\/input\/usedcarscatalog\/cars.csv')","6a012ddd":"data","9e4a53e2":"data.info()","8e7e9ef3":"print(\"Total missing values:\", data.isna().sum().sum())","116be145":"print(\"Columns with missing values:\", data.columns[data.isna().sum() > 0].values)","1cadf716":"data['engine_capacity'].dtype","9a79a57b":"data['engine_capacity'] = data['engine_capacity'].fillna(data['engine_capacity'].mean())\n\nprint(\"Total missing values:\", data.isna().sum().sum())","50f2e695":"data","0f3df0be":"for column in data.columns:\n    if data.dtypes[column] == 'bool':\n        data[column] = data[column].astype(np.int)","4b3e394b":"{column: len(data[column].unique()) for column in data.columns if data.dtypes[column] == 'object'}","eb288bc5":"data = data.drop('model_name', axis=1)","576a303b":"data['transmission'].unique()","82f0d3ac":"transmission_mapping = {'automatic': 0, 'mechanical': 1}\n\ndata['transmission'] = data['transmission'].replace(transmission_mapping)","5a74ec57":"def onehot_encode(df, columns, prefixes):\n    df = df.copy()\n    for column, prefix in zip(columns, prefixes):\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","24602151":"onehot_columns = [\n    'manufacturer_name',\n    'color',\n    'engine_fuel',\n    'body_type',\n    'state',\n    'drivetrain',\n    'location_region'\n]\n\nonehot_prefixes = [\n    'm',\n    'c',\n    'e',\n    'b',\n    's',\n    'd',\n    'l'\n]\n\ndata = onehot_encode(\n    data,\n    columns=onehot_columns,\n    prefixes=onehot_prefixes\n)","863c271b":"print(\"Remaining non-numeric columns:\", (data.dtypes == 'object').sum())","30159993":"data['engine_type'].unique()","a1ebaf23":"label_mapping = {\n    'gasoline': 0,\n    'diesel': 1,\n    'electric': 2\n}\n\ndata['engine_type'] = data['engine_type'].replace(label_mapping)","f8fb1111":"print(\"Remaining non-numeric columns:\", (data.dtypes == 'object').sum())","176e07e9":"corr = data.loc[:, 'transmission':'duration_listed'].corr()\n\nplt.figure(figsize=(18, 15))\nsns.heatmap(corr, annot=True, vmin=-1.0, cmap='rocket')\nplt.show()","5f3e5a95":"y = data['engine_type'].copy()\nX = data.drop('engine_type', axis=1).copy()","a2781bcc":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","78e77337":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","cb670134":"X.shape","ab186d1b":"inputs = tf.keras.Input(shape=(118,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","35addef3":"model.evaluate(X_test, y_test)","46ada0cd":"All the remaining features can be one-hot encoded.  \nWe will not encode *engine_type*, as that is our label column.","c457927a":"# Task for Today  \n\n***\n\n## Used Car Engine Type Prediction  \n\nGiven *data about used cars*, let's try to predict the **engine type** of a given car.  \n  \nWe will use a TensorFlow ANN to make our predictions.","5dede308":"# Filling Missing Values","f83bd77b":"*transmission* has only two unique values, so we can encode it as a binary feature.","0d9091d3":"# Encoding Labels","b62b63d7":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/55PIi9F9r-4","6135b0cf":"# Encoding Features","f6e1d8e8":"*model_name* has too many unique values, so let's drop that feature.","e2f68561":"# Getting Started","12a6190d":"First let's just make all the boolean columns into integer columns.","5033878a":"# Splitting\/Scaling","2b932922":"# Visualizing Correlations","f4480043":"# Results","a2d56e71":"# Modeling\/Training","103110ab":"Then we will take a look at the number of unique values in each categorical column."}}