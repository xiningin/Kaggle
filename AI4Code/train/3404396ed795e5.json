{"cell_type":{"1ae3f12f":"code","25669e3f":"code","f8f58304":"code","6a2f0f01":"code","9ef9707a":"code","0cde3618":"code","04996bba":"code","4b6ddbe1":"code","d5f7c913":"code","0429cae3":"code","2810df86":"code","ebc062c0":"code","e91d9d4d":"code","12ecc60e":"code","5e2ee6a9":"code","4fec2dd8":"code","d8e96979":"code","ad3d1a73":"code","edfd2831":"code","115d7463":"code","ad8746e4":"code","8b575c97":"code","c6c70ae4":"code","481039cb":"code","c950c307":"markdown","b2c9bd0c":"markdown","11f07392":"markdown","2282a764":"markdown","39a011c4":"markdown","0d13208f":"markdown","0612c840":"markdown","348bcaef":"markdown","832c038a":"markdown","25d8b0a4":"markdown"},"source":{"1ae3f12f":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nimport matplotlib.gridspec as gridspec\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable","25669e3f":"## ALTER TABLE Matches\n## ADD weight_class_2 VARCHAR(50)\n## \n## ALTER TABLE Matches\n## ADD Gender VARCHAR(10)\n## \n## ALTER TABLE Matches\n## ADD Country VARCHAR(100)\n## \n## ALTER TABLE Matches\n## ADD City VARCHAR(100)\n## \n## ALTER TABLE Matches\n## ADD Lat DECIMAL(19,9)\n## \n## ALTER TABLE Matches\n## ADD Lon DECIMAL(19,9)\n## \n## SELECT right(location, charindex(',', reverse(location) + ',') - 1)\n## FROM Matches\n## \n## UPDATE Matches\n## SET Country = right(location, charindex(',', reverse(location) + ',') - 1)\n## \n## UPDATE Matches\n## SET City = LEFT(location, CHARINDEX(', ', location)-1)\n## \n## UPDATE Matches\n## SET weight_class_2 = REPLACE(weight_class, 'Women''s ', '')\n## \n## UPDATE Matches\n## SET Gender = CASE WHEN weight_class IN ('Women''s Flyweight', 'Women''s Bantamweight', 'Women''s Strawweight') THEN 'Female' ELSE 'Male' END\n## \n## UPDATE Matches\n## SET Country = LTRIM(Country)\n## \n## UPDATE Matches\n## SET Country = 'United States'\n## WHERE Country='USA'\n## \n## UPDATE Matches\n## SET Country = 'Korea'\n## WHERE Country='South Korea'\n## \n## UPDATE Matches\n## SET Country = 'Czech Rep.'\n## WHERE Country='Czech Republic'\n## SELECT * FROM Matches","f8f58304":"data = pd.read_csv('..\/input\/ufc-spatial-analysis\/matches.csv')\ndata.head()","6a2f0f01":"data2 = pd.read_csv('..\/input\/ufc-spatial-analysis\/matches2.csv')\ndata2.head()","9ef9707a":"fig,ax = plt.subplots(figsize = (20,20))\ntitle = plt.title('Number of Matches by Location', fontsize=20)\ntitle.set_position([0.5, 1.05])\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.plot(ax = ax, color='grey', edgecolor='black',linewidth=1, alpha=0.1)\nsns.scatterplot(data2.Lon,data2.Lat,size=data2.matches_count, ax=ax)","0cde3618":"# Since the data that has the matches rocords have name of \"United Stated\" instead of \"United states of America\" which is in GeoPandas\n# World Map, so changing it to \"United States\"\nworld.loc[4, 'name'] = 'United States'","04996bba":"## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC","4b6ddbe1":"data3 = pd.read_csv('..\/input\/ufc-spatial-analysis\/matches3.csv')\ndata3.head()","d5f7c913":"world_matches = world.merge(data3, on='name', how='left')\nworld_matches[\"matches_count\"].fillna(0, inplace=True)\nworld_matches.head()","0429cae3":"fig,ax = plt.subplots(figsize = (20,10))\ntitle = plt.title('Number of Matches by Country', fontsize=20)\ntitle.set_position([0.5, 1.05])\nworld_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax\n                  ,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)","2810df86":"## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\nstates = gpd.read_file('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/states.shp')\ndata4 = pd.read_csv('..\/input\/ufc-spatial-analysis\/matches4.csv')","ebc062c0":"state_matches = states.merge(data4, on='STATE_NAME', how='left')\nstate_matches[\"matches_count\"].fillna(0, inplace=True)\nstate_matches.head()","e91d9d4d":"fig,ax = plt.subplots(figsize = (20,7))\ntitle = plt.title('Number of Matches by State', fontsize=20)\ntitle.set_position([0.5, 1.05])\nstate_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax\n                 , vmax=400,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)","12ecc60e":"## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE title_bout = 'True'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n\n## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE title_bout = 'False'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n\n\ndata5_world_title =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches5_world_title.csv')\ndata5_world_nontitle =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches5_world_nontitle.csv')","5e2ee6a9":"world_title_matches = world.merge(data5_world_title, on='name', how='left')\nworld_title_matches[\"matches_count\"].fillna(0, inplace=True)\nworld_nontitle_matches = world.merge(data5_world_nontitle, on='name', how='left')\nworld_nontitle_matches[\"matches_count\"].fillna(0, inplace=True)\n\n\nf,ax=plt.subplots(1,2,figsize=(20,5))\n\nworld_title_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=30,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nworld_nontitle_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=450,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\n\nf.suptitle('Matches in Country by Title', fontsize=14)\nax[0].set_title('Title Matches by Country', fontsize=12)\nax[1].set_title('Non-Title Matches by Country', fontsize=12)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","4fec2dd8":"## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND title_bout = 'True'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n\n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND title_bout = 'False'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n\ndata5_state_title =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches5_state_title.csv')\ndata5_state_nontitle =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches5_state_nontitle.csv')","d8e96979":"state_title_matches = states.merge(data5_state_title, on='STATE_NAME', how='left')\nstate_title_matches[\"matches_count\"].fillna(0, inplace=True)\nstate_nontitle_matches = states.merge(data5_state_nontitle, on='STATE_NAME', how='left')\nstate_nontitle_matches[\"matches_count\"].fillna(0, inplace=True)\n\nf,ax=plt.subplots(1,2,figsize=(20,5))\nstate_title_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=29,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nstate_nontitle_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=335,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nf.suptitle('Matches in USA States by Title', fontsize=14)\nax[0].set_title('Title Matches by State', fontsize=12)\nax[1].set_title('Non-Title Matches by State', fontsize=12)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","ad3d1a73":"## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Gender = 'Male'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Gender = 'Female'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND Gender = 'Male'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND Gender = 'Female'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n\ndata6_world_male =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches6_world_male.csv')\ndata6_world_female =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches6_world_female.csv')\ndata6_state_male =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches6_state_male.csv')\ndata6_state_female =  pd.read_csv('..\/input\/ufc-spatial-analysis\/matches6_state_female.csv')\n\nworld_male_matches = world.merge(data6_world_male, on='name', how='left')\nworld_male_matches[\"matches_count\"].fillna(0, inplace=True)\nworld_female_matches = world.merge(data6_world_female, on='name', how='left')\nworld_female_matches[\"matches_count\"].fillna(0, inplace=True)\nstate_male_matches = states.merge(data6_state_male, on='STATE_NAME', how='left')\nstate_male_matches[\"matches_count\"].fillna(0, inplace=True)\nstate_female_matches = states.merge(data6_state_female, on='STATE_NAME', how='left')\nstate_female_matches[\"matches_count\"].fillna(0, inplace=True)","edfd2831":"f,ax=plt.subplots(1,2,figsize=(20,5))\n\nworld_male_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=456,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nworld_female_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=30,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\n\nf.suptitle('Matches in Country by Gender', fontsize=14)\nax[0].set_title('Male', fontsize=12)\nax[1].set_title('Female', fontsize=12)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","115d7463":"f,ax=plt.subplots(1,2,figsize=(20,5))\nstate_male_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=347,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nstate_female_matches.plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=20,vmin=0\n                  ,edgecolor='black',linewidth=0.1)\nf.suptitle('Matches in USA States by Gender', fontsize=14)\nax[0].set_title('Male', fontsize=12)\nax[1].set_title('Female', fontsize=12)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","ad8746e4":"## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Catch Weight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Light Heavyweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Lightweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Open Weight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE weight_class_2 = 'Strawweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Bantamweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE weight_class_2 = 'Heavyweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Featherweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Welterweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count] \n## FROM Matches\n## WHERE weight_class_2 = 'Middleweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\n## \n## SELECT Country AS [name], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE weight_class_2 = 'Flyweight'\n## GROUP BY Country\n## ORDER BY COUNT(*) DESC\ndata7_world_wc = []\nworld_wc = []\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc1.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc2.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc3.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc4.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc5.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc6.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc7.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc8.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc9.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc10.csv'))\ndata7_world_wc.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_world_wc11.csv'))\n\ndata7_world_wc_attr = []\ndata7_world_wc_attr.append({\"vmin\": 3, \"category\": 'Catch Weight'})\ndata7_world_wc_attr.append({\"vmin\": 41, \"category\": 'Light Heavyweight'})\ndata7_world_wc_attr.append({\"vmin\": 67, \"category\": 'Lightweight'})\ndata7_world_wc_attr.append({\"vmin\": 6, \"category\": 'Open Weight'})\ndata7_world_wc_attr.append({\"vmin\": 12, \"category\": 'Strawweight'})\ndata7_world_wc_attr.append({\"vmin\": 49, \"category\": 'Bantamweight'})\ndata7_world_wc_attr.append({\"vmin\": 26, \"category\": 'Heavyweight'})\ndata7_world_wc_attr.append({\"vmin\": 53, \"category\": 'Featherweight'})\ndata7_world_wc_attr.append({\"vmin\": 77, \"category\": 'Welterweight'})\ndata7_world_wc_attr.append({\"vmin\": 60, \"category\": 'Middleweight'})\ndata7_world_wc_attr.append({\"vmin\": 21, \"category\": 'Flyweight'})\n\nloop = 0\nfor data7 in data7_world_wc:\n    world_wc.append(world.merge(data7_world_wc[loop], on='name', how='left'))\n    world_wc[loop][\"matches_count\"].fillna(0, inplace=True)\n    loop += 1","8b575c97":"f,ax=plt.subplots(6,2,figsize=(20,25))\nf.suptitle('Matches in Country by Category', fontsize=14)\n\nrow = 0\ncolumn = 0\nwhile row < 6:\n    column = 0\n    while column < 2: \n        if row == 5 and column == 1:\n            column += 1\n            break\n        world_wc[row*2+column].plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[row][column], vmax=data7_world_wc_attr[row*2+column][\"vmin\"],vmin=0\n                  ,edgecolor='black',linewidth=0.1)\n        ax[row][column].set_title(data7_world_wc_attr[row*2+column][\"category\"], fontsize=12)\n        ax[row][column].axes.get_xaxis().set_visible(False)\n        ax[row][column].axes.get_yaxis().set_visible(False)\n        column += 1\n    row += 1\nax[5][1].remove()","c6c70ae4":"## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Catch Weight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Light Heavyweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Lightweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Open Weight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Strawweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Bantamweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Heavyweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Featherweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Welterweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Middleweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n## \n## SELECT [State] AS [STATE_NAME], COUNT(*) As [matches_count]\n## FROM Matches\n## WHERE Country = 'United States' AND weight_class_2 = 'Flyweight'\n## GROUP BY [State]\n## ORDER BY COUNT(*) DESC\n\ndata8_state_matches = []\nstate_matches = []\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_1.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_2.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_3.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_4.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_5.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_6.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_7.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_8.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_9.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_10.csv'))\ndata8_state_matches.append(pd.read_csv('..\/input\/ufc-spatial-analysis\/matches_state_11.csv'))\n\nloop = 0\nfor data8 in data8_state_matches:\n    state_matches.append(states.merge(data8_state_matches[loop], on='STATE_NAME', how='left'))\n    state_matches[loop][\"matches_count\"].fillna(0, inplace=True)\n    loop += 1","481039cb":"f,ax=plt.subplots(6,2,figsize=(20,25))\nf.suptitle('Matches in States by Category', fontsize=14)\n\nrow = 0\ncolumn = 0\nwhile row < 6:\n    column = 0\n    while column < 2: \n        if row == 5 and column == 1:\n            column += 1\n            break\n        state_matches[row*2+column].plot( column='matches_count', \n                  cmap='OrRd', legend=True, ax=ax[row][column]\n                  ,edgecolor='black',linewidth=0.1)\n        ax[row][column].set_title(data7_world_wc_attr[row*2+column][\"category\"], fontsize=12)\n        ax[row][column].axes.get_xaxis().set_visible(False)\n        ax[row][column].axes.get_yaxis().set_visible(False)\n        column += 1\n    row += 1\nax[5][1].remove()","c950c307":"### 3.4 Title Matches","b2c9bd0c":"### 3.5 Maps by Gender","11f07392":"## 1. Foreword\n\n\nThis Notebook is created for learning purpose for beginners specially for those who have very little knowledge of Python but have nice experience with other programming languages for example c#, java, c++, SQL. I will be using lot od SQL in there for data wrangling instead of Pandas or any other library.\n\nIn addition to that I have created a small utility to load data from\/to CSV\/SQL while I will upload once it gets stabalized.\n","2282a764":"## 2. Data Load and Library Imports","39a011c4":"### 3.1 Number of Matches by Location","0d13208f":"##### Inference: \nAlthough We can see that Las Vegas is clear winner when there is number of matches by location, however we don't see any differences with respect to other locations mainly because Las Vegas has too many matches. ","0612c840":"### 3.2 Heat Map - Number of Matches by Country","348bcaef":"### 3.3 Heat Map - Number of Matches by States in USA","832c038a":"## 3. Spatial Analysis","25d8b0a4":"### 3.6 Maps by Categories"}}