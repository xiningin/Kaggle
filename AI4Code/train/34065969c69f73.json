{"cell_type":{"28b703e1":"code","6f6b6636":"code","ef0fdff1":"code","8b6995a5":"code","43aa3d82":"code","04a4e76a":"code","fb1d10ca":"code","c2215805":"code","febcf116":"code","841532f6":"code","b335f06c":"code","6466370e":"code","846dde88":"code","52bc3130":"code","e9444b5f":"code","ba0269ad":"code","729936df":"code","47f00c24":"code","92f6cc1f":"code","698590ee":"code","29671301":"code","1f53a3bf":"code","b56dc071":"code","3c6cb190":"code","249d7c3e":"code","98495903":"code","f18d6656":"code","85c157ca":"code","27dbad76":"code","d7129406":"code","920250b6":"code","1af44320":"code","38c3ac03":"code","c4be0853":"code","ec0e2a8e":"code","a05812fd":"code","59f2c2a3":"code","cf4c9fef":"code","8e5482ff":"code","012d2e76":"code","eee3a156":"code","c9e43256":"code","6da1beb0":"code","79cfc276":"code","d67feb8e":"code","b3a62b14":"code","1e26cc25":"code","1bf92604":"code","2ea6326e":"code","a61c8b11":"code","f6a6236f":"code","9da76cb0":"code","a743efaa":"code","9bf7c0c7":"code","f3b628a0":"code","f0efbe2f":"code","edccda68":"code","83cc3646":"code","635d4206":"code","d9b8a5ab":"code","cbe38ee3":"code","35b8870a":"code","ea932578":"code","5a58a7b0":"code","e67e301a":"code","e69e4b81":"code","344817ff":"code","26952ba3":"code","9f8c2bd0":"code","b1592731":"code","51281a86":"code","3dec72be":"code","19a33127":"code","469a5b53":"code","270d5474":"markdown","f1c79952":"markdown","db6afe93":"markdown","c0233fb0":"markdown","610a336d":"markdown","7b33fb2c":"markdown","928689c5":"markdown","d799cb36":"markdown","7f37d27a":"markdown","0a276de1":"markdown","93455a61":"markdown","efa1a3be":"markdown","cba0d57e":"markdown","e066e8eb":"markdown","9a28f9c5":"markdown","268e3755":"markdown","f87a402a":"markdown","3c247b15":"markdown","a9b8e505":"markdown","eb70fd04":"markdown","2db23de9":"markdown","0b98e8ab":"markdown","6433d2c3":"markdown","3e803b72":"markdown","5afa6f8f":"markdown"},"source":{"28b703e1":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set_style(\"whitegrid\")\n\nimport numpy as np\n\nimport pandas as pd\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.compose import TransformedTargetRegressor\n\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score","6f6b6636":"iowa_file_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_file_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\n\nhome_data = pd.read_csv(iowa_file_path, index_col=\"Id\")","ef0fdff1":"home_data.shape","8b6995a5":"for feature_name, dtype in zip(home_data.columns, home_data.dtypes):\n    print(f\"{feature_name:12s}: {dtype}\")","43aa3d82":"print(\"Before applying log\")\nprint(f\"SalePrice skew: {home_data['SalePrice'].skew():.3f}\")\nsns.distplot(home_data['SalePrice'], hist=False)\nplt.show()\nprint(\"After applying log\")\nlogy = np.log(home_data['SalePrice'])\nprint(f\"SalePrice skew: {logy.skew():.3f}\")\nsns.distplot(logy, hist=False)\nplt.show()","04a4e76a":"data = home_data.corr()[\"SalePrice\"].sort_values()[::-1]\nplt.figure(figsize=(12, 8))\nsns.barplot(x=data.values, y=data.index)\nplt.title(\"Correlation with SalePrice\")\nplt.xlim(-0.2, 1)\nplt.show()","fb1d10ca":"data = home_data.pivot_table(index=\"OverallQual\", values=\"SalePrice\", aggfunc=\"mean\")\nsns.barplot(x=data.index, y=data[\"SalePrice\"])\nplt.show()","c2215805":"data = home_data[[\"GrLivArea\", \"SalePrice\"]]\nsns.regplot(x=np.log(data[\"GrLivArea\"]), y=np.log(data[\"SalePrice\"]))\nplt.show()","febcf116":"sns.regplot(x=\"GarageArea\", y=\"SalePrice\", data=home_data[[\"GarageArea\", \"SalePrice\"]])\nplt.xlim(0, 1500)\nplt.ylim(0, 800000)\nplt.show()\ndata = home_data[[\"GarageArea\", \"SalePrice\"]]\ndata = data[data[\"GarageArea\"] > 0]\nsns.regplot(x=\"GarageArea\", y=\"SalePrice\", data=data)\nplt.xlim(0, 1500)\nplt.ylim(0, 800000)\nplt.show()","841532f6":"data_tmp = pd.DataFrame(columns=[\"GarageArea\", \"SalePrice\"])\nfor garage_area, sale_price in home_data[[\"GarageArea\", \"SalePrice\"]].values:\n    data_tmp = data_tmp.append(pd.DataFrame([[\">0\" if garage_area > 0 else \"=0\", sale_price]], columns=data_tmp.columns))\ndata_tmp[\"SalePrice\"] = data_tmp[\"SalePrice\"].apply(float)\nsns.boxplot(x=\"GarageArea\", y=\"SalePrice\", data=data_tmp)\nplt.show()","b335f06c":"data = home_data[[\"GarageCars\", \"SalePrice\"]]\nsns.boxplot(data[\"GarageCars\"], y=data[\"SalePrice\"])\nplt.show()\ndata = home_data[\"GarageCars\"].value_counts()\nprint(\"GarageCars: Entries count\")\nprint(data)\nsns.barplot(x=data.index, y=data.values)\nplt.show()","6466370e":"data = home_data[[\"MSZoning\", \"SalePrice\"]]\nsns.boxplot(x=\"MSZoning\", y=\"SalePrice\", data=data)\nplt.show()","846dde88":"data = home_data[[\"Alley\", \"SalePrice\"]]\nsns.boxplot(x=\"Alley\", y=\"SalePrice\", data=data)\nplt.show()","52bc3130":"data = home_data[[\"LotShape\", \"SalePrice\"]]\nsns.boxplot(x=\"LotShape\", y=\"SalePrice\", data=data)\nplt.show()","e9444b5f":"data = home_data[[\"LandContour\", \"SalePrice\"]]\nsns.boxplot(x=\"LandContour\", y=\"SalePrice\", data=data)\nplt.show()","ba0269ad":"data = home_data[[\"Utilities\", \"SalePrice\"]]\nsns.boxplot(x=\"Utilities\", y=\"SalePrice\", data=data)\nplt.show()","729936df":"data = home_data[[\"LotConfig\", \"SalePrice\"]]\nsns.boxplot(x=\"LotConfig\", y=\"SalePrice\", data=data)\nplt.show()","47f00c24":"data = home_data[[\"LandSlope\", \"SalePrice\"]]\nsns.boxplot(x=\"LandSlope\", y=\"SalePrice\", data=data)\nplt.show()","92f6cc1f":"## Neighborhood\ndata = home_data[[\"Neighborhood\", \"SalePrice\"]]\nplt.figure(figsize=(10, 5))\nsns.boxplot(x=\"Neighborhood\", y=\"SalePrice\", data=data)\nplt.show()","698590ee":"## Condition1\ndata = home_data[[\"Condition1\", \"SalePrice\"]]\nsns.boxplot(x=\"Condition1\", y=\"SalePrice\", data=data)\nplt.show()","29671301":"## Condition2\ndata = home_data[[\"Condition2\", \"SalePrice\"]]\nsns.boxplot(x=\"Condition2\", y=\"SalePrice\", data=data)\nplt.show()","1f53a3bf":"## BldgType\ndata = home_data[[\"BldgType\", \"SalePrice\"]]\nsns.boxplot(x=\"BldgType\", y=\"SalePrice\", data=data)\nplt.show()","b56dc071":"## HouseStyle\ndata = home_data[[\"HouseStyle\", \"SalePrice\"]]\nsns.boxplot(x=\"HouseStyle\", y=\"SalePrice\", data=data)\nplt.show()","3c6cb190":"## RoofStyle\ndata = home_data[[\"RoofStyle\", \"SalePrice\"]]\nsns.boxplot(x=\"RoofStyle\", y=\"SalePrice\", data=data)\nplt.show()","249d7c3e":"## RoofMatl\ndata = home_data[[\"RoofMatl\", \"SalePrice\"]]\nsns.boxplot(x=\"RoofMatl\", y=\"SalePrice\", data=data)\nplt.show()","98495903":"## Exterior1st\ndata = home_data[[\"Exterior1st\", \"SalePrice\"]]\nsns.boxplot(x=\"Exterior1st\", y=\"SalePrice\", data=data)\nplt.show()","f18d6656":"## Exterior2nd\ndata = home_data[[\"Exterior2nd\", \"SalePrice\"]]\nsns.boxplot(x=\"Exterior2nd\", y=\"SalePrice\", data=data)\nplt.show()","85c157ca":"## MasVnrType\ndata = home_data[[\"MasVnrType\", \"SalePrice\"]]\nsns.boxplot(x=\"MasVnrType\", y=\"SalePrice\", data=data)\nplt.show()","27dbad76":"## ExterQual\ndata = home_data[[\"ExterQual\", \"SalePrice\"]]\nsns.boxplot(x=\"ExterQual\", y=\"SalePrice\", data=data)\nplt.show()","d7129406":"## ExterCond\ndata = home_data[[\"ExterCond\", \"SalePrice\"]]\nsns.boxplot(x=\"ExterCond\", y=\"SalePrice\", data=data)\nplt.show()","920250b6":"## Foundation\ndata = home_data[[\"Foundation\", \"SalePrice\"]]\nsns.boxplot(x=\"Foundation\", y=\"SalePrice\", data=data)\nplt.show()","1af44320":"## BsmtQual\ndata = home_data[[\"BsmtQual\", \"SalePrice\"]]\nsns.boxplot(x=\"BsmtQual\", y=\"SalePrice\", data=data)\nplt.show()","38c3ac03":"## BsmtCond\ndata = home_data[[\"BsmtCond\", \"SalePrice\"]]\nsns.boxplot(x=\"BsmtCond\", y=\"SalePrice\", data=data)\nplt.show()","c4be0853":"## BsmtExposure\ndata = home_data[[\"BsmtExposure\", \"SalePrice\"]]\nsns.boxplot(x=\"BsmtExposure\", y=\"SalePrice\", data=data)\nplt.show()","ec0e2a8e":"## BsmtFinType1\ndata = home_data[[\"BsmtFinType1\", \"SalePrice\"]]\nsns.boxplot(x=\"BsmtFinType1\", y=\"SalePrice\", data=data)\nplt.show()","a05812fd":"## BsmtFinType2\ndata = home_data[[\"BsmtFinType2\", \"SalePrice\"]]\nsns.boxplot(x=\"BsmtFinType2\", y=\"SalePrice\", data=data)\nplt.show()","59f2c2a3":"## Heating\ndata = home_data[[\"Heating\", \"SalePrice\"]]\nsns.boxplot(x=\"Heating\", y=\"SalePrice\", data=data)\nplt.show()","cf4c9fef":"## HeatingQC\ndata = home_data[[\"HeatingQC\", \"SalePrice\"]]\nsns.boxplot(x=\"HeatingQC\", y=\"SalePrice\", data=data)\nplt.show()","8e5482ff":"## CentralAir\ndata = home_data[[\"CentralAir\", \"SalePrice\"]]\nsns.boxplot(x=\"CentralAir\", y=\"SalePrice\", data=data)\nplt.show()","012d2e76":"## Electrical\ndata = home_data[[\"Electrical\", \"SalePrice\"]]\nsns.boxplot(x=\"Electrical\", y=\"SalePrice\", data=data)\nplt.show()","eee3a156":"## KitchenQual\ndata = home_data[[\"KitchenQual\", \"SalePrice\"]]\nsns.boxplot(x=\"KitchenQual\", y=\"SalePrice\", data=data)\nplt.show()","c9e43256":"## Functional\ndata = home_data[[\"Functional\", \"SalePrice\"]]\nsns.boxplot(x=\"Functional\", y=\"SalePrice\", data=data)\nplt.show()","6da1beb0":"## FireplaceQu\ndata = home_data[[\"FireplaceQu\", \"SalePrice\"]]\nsns.boxplot(x=\"FireplaceQu\", y=\"SalePrice\", data=data)\nplt.show()","79cfc276":"## GarageType\ndata = home_data[[\"GarageType\", \"SalePrice\"]]\nsns.boxplot(x=\"GarageType\", y=\"SalePrice\", data=data)\nplt.show()","d67feb8e":"## GarageFinish\ndata = home_data[[\"GarageFinish\", \"SalePrice\"]]\nsns.boxplot(x=\"GarageFinish\", y=\"SalePrice\", data=data)\nplt.show()","b3a62b14":"## GarageQual\ndata = home_data[[\"GarageQual\", \"SalePrice\"]]\nsns.boxplot(x=\"GarageQual\", y=\"SalePrice\", data=data)\nplt.show()","1e26cc25":"## GarageCond\ndata = home_data[[\"GarageCond\", \"SalePrice\"]]\nsns.boxplot(x=\"GarageCond\", y=\"SalePrice\", data=data)\nplt.show()","1bf92604":"## PavedDrive\ndata = home_data[[\"PavedDrive\", \"SalePrice\"]]\nsns.boxplot(x=\"PavedDrive\", y=\"SalePrice\", data=data)\nplt.show()","2ea6326e":"## PoolQC\ndata = home_data[[\"PoolQC\", \"SalePrice\"]]\nsns.boxplot(x=\"PoolQC\", y=\"SalePrice\", data=data)\nplt.show()","a61c8b11":"## Fence\ndata = home_data[[\"Fence\", \"SalePrice\"]]\nsns.boxplot(x=\"Fence\", y=\"SalePrice\", data=data)\nplt.show()","f6a6236f":"## MiscFeature\ndata = home_data[[\"MiscFeature\", \"SalePrice\"]]\nsns.boxplot(x=\"MiscFeature\", y=\"SalePrice\", data=data)\nplt.show()","9da76cb0":"## SaleType\ndata = home_data[[\"SaleType\", \"SalePrice\"]]\nsns.boxplot(x=\"SaleType\", y=\"SalePrice\", data=data)\nplt.show()","a743efaa":"## SaleCondition\ndata = home_data[[\"SaleCondition\", \"SalePrice\"]]\nsns.boxplot(x=\"SaleCondition\", y=\"SalePrice\", data=data)\nplt.show()","9bf7c0c7":"nulls = pd.DataFrame(home_data.isnull().sum().sort_values(ascending=False))\nnulls.columns = [\"Null count\"]\nnulls[\"Unique\"] = home_data[nulls.index].nunique()\nnulls[\"dtype\"] = home_data[nulls.index].dtypes\nnulls[nulls[\"Null count\"] > 0]","f3b628a0":"home_data[\"GarageArea=0\"] = (home_data[\"GarageArea\"] == 0).apply(float)\nhome_data[\"GarageCars=4\"] = (home_data[\"GarageCars\"] == 4).apply(float)\nhome_data[\"MSSubClass\"] = home_data[\"MSSubClass\"].apply(str)\n\nhome_data[\"NotHasBasement\"] = home_data[\"BsmtExposure\"].isnull()\nhome_data[\"BsmtExposure\"] = home_data[\"BsmtExposure\"].fillna(\"NoBasement\")\nhome_data[\"BsmtQual\"] = home_data[\"BsmtQual\"].fillna(\"NoBasement\")\nhome_data[\"BsmtCond\"] = home_data[\"BsmtCond\"].fillna(\"NoBasement\")\nhome_data[\"BsmtFinType1\"] = home_data[\"BsmtFinType1\"].fillna(\"NoBasement\")\nhome_data[\"BsmtFinType2\"] = home_data[\"BsmtFinType2\"].fillna(\"NoBasement\")\n\nhome_data[\"NotHasFireplace\"] = home_data[\"FireplaceQu\"].isnull()\nhome_data[\"FireplaceQu\"] = home_data[\"FireplaceQu\"].fillna(\"NoFireplace\")\n\nhome_data[\"NotHasGarage\"] = home_data[\"GarageFinish\"].isnull()\nhome_data[\"GarageFinish\"] = home_data[\"GarageFinish\"].fillna(\"NoGarage\")\nhome_data[\"GarageQual\"] = home_data[\"GarageQual\"].fillna(\"NoGarage\")\nhome_data[\"GarageType\"] = home_data[\"GarageType\"].fillna(\"NoGarage\")\nhome_data[\"GarageCond\"] = home_data[\"GarageCond\"].fillna(\"NoGarage\")\n\nhome_data[\"NotHasPool\"] = home_data[\"PoolQC\"].isnull()\nhome_data[\"PoolQC\"] = home_data[\"PoolQC\"].fillna(\"NoPool\")\n\nhome_data[\"NotHasFence\"] = home_data[\"Fence\"].isnull()\nhome_data[\"Fence\"] = home_data[\"Fence\"].fillna(\"NoFence\")\n\nhome_data[\"NotHasKitchen\"] = home_data[\"KitchenQual\"].isnull()\nhome_data[\"KitchenQual\"] = home_data[\"KitchenQual\"].fillna(\"NoKitchen\")\n\n#home_data[\"MiscFeature\"] = home_data[\"MiscFeature\"].fillna(\"NA\")\n#home_data[\"Alley\"] = home_data[\"Alley\"].fillna(\"NA\")\n#home_data[\"LotFrontage\"] = home_data[\"LotFrontage\"].fillna(home_data[\"LotFrontage\"].min())\n#home_data[\"GarageYrBlt\"] = home_data[\"GarageYrBlt\"].fillna(home_data[\"GarageYrBlt\"].min())\n#home_data[\"MasVnrType\"] = home_data[\"MasVnrType\"].fillna(\"NA\")\n#home_data[\"MasVnrArea\"] = home_data[\"MasVnrArea\"].fillna(home_data[\"MasVnrArea\"].min())\n#home_data[\"Electrical\"] = home_data[\"Electrical\"].fillna(\"NA\")","f0efbe2f":"def show_nulls(df):\n    nulls = pd.DataFrame(df.isnull().sum().sort_values(ascending=False))\n    nulls.columns = [\"Null count\"]\n    nulls[\"Unique\"] = df[nulls.index].nunique()\n    nulls[\"dtype\"] = df[nulls.index].dtypes\n    return nulls[nulls[\"Null count\"] > 0]\nshow_nulls(home_data)","edccda68":"y = home_data[\"SalePrice\"].values\nX = home_data.drop(\"SalePrice\", axis=1)","83cc3646":"models_performance = pd.DataFrame(columns=[\"Model\", \"CV\", \"Full\"])\n\ndef calc_score(y_true, y_pred):\n    logy_true = np.log1p(y_true)\n    logy_pred = np.log1p(y_pred)\n    return np.sqrt(np.sum((logy_true - logy_pred) ** 2) \/ y_true.shape[0]) \n\ndef test_pipeline(pipeline, name=\"Unnamed\"):\n    # Uncomment when commit\n    return\n    scores = cross_val_score(pipeline, X, y, cv=10, scoring=make_scorer(calc_score))\n    print(f\"Mean CV score: {scores.mean():,.5f}\")\n\n    pipeline.fit(X, y)\n    full_score = calc_score(y, pipeline.predict(X))\n    print(f\"Full score: {full_score:,.5f}\")\n    \n    global models_performance\n    models_performance = models_performance.append(pd.DataFrame([[name, scores.mean(), full_score]], columns=models_performance.columns))","635d4206":"def log_model(model):\n    return TransformedTargetRegressor(model, func=np.log1p, inverse_func=np.expm1)","d9b8a5ab":"numerical_cols = X.select_dtypes(exclude=['object']).columns\nordinal_cols = [\"LotShape\", \"LandContour\", \"LandSlope\", \"ExterQual\", \"ExterCond\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \"CentralAir\", \"KitchenQual\", \"FireplaceQu\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PavedDrive\", \"PoolQC\", \"Fence\"]\ncategorical_cols = [col for col in X.select_dtypes(include=[\"object\"]).columns if col not in ordinal_cols]\n\n# Impute numerical features with mean\n# Impute categoricals and onehot encode them\npreprocessor = ColumnTransformer(transformers=[\n    ('num', SimpleImputer(strategy='mean'), numerical_cols),\n    ('cat', Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='constant')),\n        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ]), categorical_cols)\n##     ('num', SimpleImputer(strategy='mean', verbose=2), numerical_cols),\n##     ('imp', SimpleImputer(strategy='constant', verbose=2), ordinal_cols),\n##     ('const', SimpleImputer(strategy='constant', verbose=2), categorical_cols),\n##     ('onehot encode', OneHotEncoder(handle_unknown='ignore'), categorical_cols)\n#     ('encode Street', OrdinalEncoder(categories=[[\"Grvl\", \"Pave\"]]), [\"Street\"]),\n#     ('encode LotShape', OrdinalEncoder(categories=[[\"Reg\", \"IR1\", \"IR2\", \"IR3\"]]), [\"LotShape\"]),\n#     ('encode LandContour', OrdinalEncoder(categories=[[\"Lvl\", \"Bnk\", \"HLS\", \"Low\"]]), [\"LandContour\"]),\n#     ('encode LandSlope', OrdinalEncoder(categories=[[\"Gtl\", \"Mod\", \"Sev\"]]), [\"LandSlope\"]),\n#     ('encode ExterQual', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"]]), [\"ExterQual\"]),\n#     ('encode ExterCond', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"]]), [\"ExterCond\"]),\n#     ('encode BsmtQual', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoBasement\"]]), [\"BsmtQual\"]),\n#     ('encode BsmtCond', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoBasement\"]]), [\"BsmtCond\"]),\n#     ('encode BsmtExposure', OrdinalEncoder(categories=[[\"Gd\", \"Av\", \"Mn\", \"No\", \"NoBasement\"]]), [\"BsmtExposure\"]),\n#     ('encode BsmtFinType1', OrdinalEncoder(categories=[[\"GLQ\", \"ALQ\", \"BLQ\", \"Rec\", \"LwQ\", \"Unf\", \"NoBasement\"]]), [\"BsmtFinType1\"]),\n#     ('encode BsmtFinType2', OrdinalEncoder(categories=[[\"GLQ\", \"ALQ\", \"BLQ\", \"Rec\", \"LwQ\", \"Unf\", \"NoBasement\"]]), [\"BsmtFinType2\"]),\n#     ('encode HeatingQC', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"]]), [\"HeatingQC\"]),\n#     ('encode CentralAir', OrdinalEncoder(categories=[[\"Y\", \"N\"]]), [\"CentralAir\"]),\n#     ('encode KitchenQual', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"]]), [\"KitchenQual\"]),\n#     ('encode FireplaceQu', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoFireplace\"]]), [\"FireplaceQu\"]),\n#     ('encode GarageFinish', OrdinalEncoder(categories=[[\"Fin\", \"RFn\", \"Unf\", \"NoGarage\"]]), [\"GarageFinish\"]),\n#     ('encode GarageQual', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoGarage\"]]), [\"GarageQual\"]),\n#     ('encode GarageCond', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoGarage\"]]), [\"GarageCond\"]),\n#     ('encode PavedDrive', OrdinalEncoder(categories=[[\"Y\", \"P\", \"N\"]]), [\"PavedDrive\"]),\n#     ('encode PoolQC', OrdinalEncoder(categories=[[\"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NoPool\"]]), [\"PoolQC\"]),\n#     ('encode Fence', OrdinalEncoder(categories=[[\"GdPrv\", \"MnPrv\", \"GdWo\", \"MnWw\", \"NoFence\"]]), [\"Fence\"])\n])","cbe38ee3":"lin2_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', log_model(LinearRegression()))\n])\n\ntest_pipeline(lin2_pipeline, \"Linear regression[1]\")","35b8870a":"xg_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', log_model(XGBRegressor(n_estimators=500, objective='reg:squarederror')))\n])\n\ntest_pipeline(xg_pipeline, \"XGBoost[1]\")","ea932578":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbr_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', log_model(GradientBoostingRegressor()))\n])\n\ntest_pipeline(gbr_pipeline, \"GradientBoostingRegressor[1]\")","5a58a7b0":"random_fores_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', log_model(RandomForestRegressor(n_estimators=100, random_state=1)))\n])\n\ntest_pipeline(random_fores_pipeline, \"Random forest[1]\")","e67e301a":"from lightgbm import LGBMRegressor\n\nlightgbm_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', log_model(LGBMRegressor()))\n])\n\ntest_pipeline(lightgbm_pipeline, \"LightGBM[1]\")","e69e4b81":"from sklearn.base import BaseEstimator\n\nclass Stacked(BaseEstimator):\n    def __init__(self, models, stacker):\n        self.models = models\n        self.stacker = stacker\n    def _meta_predict(self, X):\n        metaX = []\n        for model in self.models:\n            fX = model.predict(X)\n            metaX.append(fX)\n        return np.vstack(metaX).T\n    def fit(self, X, y):\n        for model in self.models:\n            model.fit(X, y)\n        finX = self._meta_predict(X)\n        self.stacker.fit(finX, y)\n    def predict(self, X):\n        finX = self._meta_predict(X)\n        return np.abs(self.stacker.predict(finX))\n\nstacked_model = Stacked([xg_pipeline, lightgbm_pipeline], LinearRegression())\ntest_pipeline(stacked_model, \"LinearRegression(XGBoost, LightGBM)\")","344817ff":"from sklearn.neural_network import MLPRegressor\n\nclass Stacked(BaseEstimator):\n    def __init__(self, models, stacker):\n        self.models = models\n        self.stacker = stacker\n    def _meta_predict(self, X):\n        metaX = []\n        for model in self.models:\n            fX = model.predict(X)\n            metaX.append(fX)\n        return np.vstack(metaX).T\n    def fit(self, X, y):\n        for model in self.models:\n            model.fit(X, y)\n        finX = self._meta_predict(X)\n        self.stacker.fit(finX, y)\n    def predict(self, X):\n        finX = self._meta_predict(X)\n        return np.abs(self.stacker.predict(finX))\n\nstacked_model2020 = Stacked([xg_pipeline, lightgbm_pipeline], MLPRegressor(learning_rate_init=0.01))\ntest_pipeline(stacked_model2020, \"NN(XGBoost, LightGBM)\")","26952ba3":"class Stacked2(BaseEstimator):\n    def __init__(self, models, stacker):\n        self.models = models\n        self.stacker = stacker\n    def _meta_predict(self, X):\n        metaX = [preprocessor.transform(X)]\n        for model in self.models:\n            fX = model.predict(X)\n            metaX.append(fX.reshape(fX.shape[0], 1))\n        return np.concatenate(metaX, axis=1)\n    def fit(self, X, y):\n        for model in self.models:\n            model.fit(X, y)\n        finX = self._meta_predict(X)\n        self.stacker.fit(finX, y)\n    def predict(self, X):\n        finX = self._meta_predict(X)\n        return np.abs(self.stacker.predict(finX))\n\nstacked_model3 = Stacked2([xg_pipeline, lightgbm_pipeline], LinearRegression())\n#test_pipeline(stacked_model3, \"Stacked(XGBoost, LightGBM)\")","9f8c2bd0":"stacked_model4 = Stacked([xg_pipeline, gbr_pipeline], LinearRegression())\ntest_pipeline(stacked_model4, \"Stacked(XGBoost, GradientBoostingRegressor)\")","b1592731":"models_performance.sort_values(\"CV\")","51281a86":"test_X = pd.read_csv(test_file_path, index_col='Id')\ntest_X[\"GarageArea=0\"] = (test_X[\"GarageArea\"] == 0).apply(float)\ntest_X[\"GarageCars=4\"] = (test_X[\"GarageCars\"] == 4).apply(float)\ntest_X[\"MSSubClass\"] = test_X[\"MSSubClass\"].apply(str)\n\ntest_X[\"NotHasBasement\"] = test_X[\"BsmtExposure\"].isnull()\ntest_X[\"BsmtExposure\"] = test_X[\"BsmtExposure\"].fillna(\"NoBasement\")\ntest_X[\"BsmtQual\"] = test_X[\"BsmtQual\"].fillna(\"NoBasement\")\ntest_X[\"BsmtCond\"] = test_X[\"BsmtCond\"].fillna(\"NoBasement\")\ntest_X[\"BsmtFinType1\"] = test_X[\"BsmtFinType1\"].fillna(\"NoBasement\")\ntest_X[\"BsmtFinType2\"] = test_X[\"BsmtFinType2\"].fillna(\"NoBasement\")\n\ntest_X[\"NotHasFireplace\"] = test_X[\"FireplaceQu\"].isnull()\ntest_X[\"FireplaceQu\"] = test_X[\"FireplaceQu\"].fillna(\"NoFireplace\")\n\ntest_X[\"NotHasGarage\"] = test_X[\"GarageFinish\"].isnull()\ntest_X[\"GarageFinish\"] = test_X[\"GarageFinish\"].fillna(\"NoGarage\")\ntest_X[\"GarageQual\"] = test_X[\"GarageQual\"].fillna(\"NoGarage\")\ntest_X[\"GarageType\"] = test_X[\"GarageType\"].fillna(\"NoGarage\")\ntest_X[\"GarageCond\"] = test_X[\"GarageCond\"].fillna(\"NoGarage\")\n\ntest_X[\"NotHasPool\"] = test_X[\"PoolQC\"].isnull()\ntest_X[\"PoolQC\"] = test_X[\"PoolQC\"].fillna(\"NoPool\")\n\ntest_X[\"NotHasFence\"] = test_X[\"Fence\"].isnull()\ntest_X[\"Fence\"] = test_X[\"Fence\"].fillna(\"NoFence\")\n\ntest_X[\"NotHasKitchen\"] = test_X[\"KitchenQual\"].isnull()\ntest_X[\"KitchenQual\"] = test_X[\"KitchenQual\"].fillna(\"NoKitchen\")\n\nbest_pipeline = stacked_model2020\nbest_pipeline.fit(X, y)\npred_y = best_pipeline.predict(test_X)\n\noutput = pd.DataFrame({\n    'Id': test_X.index,\n    'SalePrice': pred_y\n})\noutput.to_csv('submission.csv', index=False)\n!head -n5 submission.csv","3dec72be":"show_nulls(test_X)","19a33127":"tft =  test_X\nfor vals in [tft[col].unique() for col in tft]:\n    if None in vals:\n        print(vals)","469a5b53":"prp = ColumnTransformer(transformers=[\n    ('num', SimpleImputer(strategy='mean'), numerical_cols),\n    ('const', SimpleImputer(strategy='constant'), categorical_cols)#,\n    #('onehot encode', OneHotEncoder(handle_unknown='ignore'), categorical_cols)\n])\ntft =  pd.DataFrame(prp.fit_transform(test_X))\nfor vals in [tft[col].unique() for col in tft]:\n    print(vals)","270d5474":"## Stack XGBoost and LightGBM using linear regression","f1c79952":"## LandContour","db6afe93":"# Data exploration","c0233fb0":"## LotConfig","610a336d":"## GarageCars","7b33fb2c":"SalePrice distribution is log-normal distributed, so it is reasonable to apply log to it before making model","928689c5":"## MSZoning","d799cb36":"Correlation with numerical features","7f37d27a":"## Null values research","0a276de1":"## LotShape","93455a61":"## Utilities","efa1a3be":"## GarageArea","cba0d57e":"## RandomForest","e066e8eb":"## Linear regression","9a28f9c5":"## GrLiveArea","268e3755":"# Modelling","f87a402a":"## XGBoost","3c247b15":"## OverallQual","a9b8e505":"# What ideas worked:\n- log transform target\n- using xgboost with one hot encoding\n- lightbgm is better than xgboost\n- stacking lightbgm and xgboost with linear regression is better than all of them","eb70fd04":"## Alley","2db23de9":"## SalePrice(target)","0b98e8ab":"# What ideas failed:\n- removing outliers made worse performane\n- z-transforming OverallQual before (cross-validation) made data leakage and caused overfitting\n- dimension reduction after dropping categorical columns using Lasso changed nothing for: Linear regression, XGBoost and RegressionForest\n- stacking lightbgm and xgboost with regression random forest overfits and performs bad","6433d2c3":"Function to transform model into model predicting log(target)","3e803b72":"## LightGBM","5afa6f8f":"# TODO:\n- feature engineering\n - check how to optimize one hot encoding categorical features\n - check correlation of binary(two categories) features with target\n - check if one-hot-encoding for many-values features is bad\n - test for excluding categories which have dominant value\n - find where to apply dimensionality reduction with Lasso, and adjust alpha as hyperparameter\n - encode categorical features, check performance of regression trees\n - check usefulness of each feature by permutation importance(remove each feature and check if model score improved)\n- test stacking models using given features along with predictions from stack\n- stack models using neural network"}}