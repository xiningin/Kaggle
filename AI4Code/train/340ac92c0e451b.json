{"cell_type":{"149be8b4":"code","3d2dda4a":"code","33d68e3f":"code","a7c1974d":"code","603fe7e4":"code","d804a395":"code","3bcff070":"code","471beb62":"code","18a2c103":"code","41201af5":"code","8d03faf5":"code","5549b77a":"code","887219ee":"code","ee0a5fa5":"code","9de46bab":"markdown","d55a7a8c":"markdown","f6ac4585":"markdown","cf48c05a":"markdown","b82fcf7d":"markdown","5842507f":"markdown","592ba6a1":"markdown","ec1f1293":"markdown","f97562c8":"markdown"},"source":{"149be8b4":"import numpy as np\nimport pandas as pd\n\nimport re\nimport string\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","3d2dda4a":"# GoodBooks-10K Data\nbooks = pd.read_csv('\/kaggle\/input\/goodbooks-10k\/books.csv')","33d68e3f":"books.head()","a7c1974d":"books.describe()","603fe7e4":"books = books.dropna()\n\nbooks.drop_duplicates(subset='original_title', keep='first', inplace=True)","d804a395":"content_data = books[['original_title','authors','average_rating']]\ncontent_data = content_data.astype(str)\ncontent_data['content'] = content_data['original_title'] + ' ' + content_data['authors'] + ' ' + content_data['average_rating']","3bcff070":"content_data.head()","471beb62":"content_data = content_data.reset_index()\nindices = pd.Series(content_data.index, index=content_data['original_title'])\n\ncontent_data.head()","18a2c103":"tfidf = TfidfVectorizer(stop_words='english')\n# Remove stopwords\n\ntfidf_matrix = tfidf.fit_transform(content_data['content'])","41201af5":"# Shape of tfidf_matrix\ntfidf_matrix.shape","8d03faf5":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","5549b77a":"def get_content_based_recommendations(title, similarity=cosine_sim, n_sim=10):\n    idx = indices[title]\n    \n    # Get the pairwsie similarity scores of all books with given book\n    sim_scores = list(enumerate(similarity[idx]))\n\n    # Sort the books based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the n_sim most similar books\n    if n_sim > 0:\n        n = n_sim + 1\n        sim_scores = sim_scores[1:n]\n    else:    \n        sim_scores = sim_scores[1:11]\n    \n    book_indices = [i[0] for i in sim_scores]\n\n    # Return the n_sim most similar books\n    return list(content_data['original_title'].iloc[book_indices])","887219ee":"# Recommendations for 'The Hunger Games'\n\nrecomm_books_for_TheHungerGames = get_content_based_recommendations('The Hunger Games', cosine_sim, n_sim=15)\nfor book in recomm_books_for_TheHungerGames:\n        print(book)","ee0a5fa5":"# Recommendations for 'Twilight'\n\nrecomm_books_for_Twilight = get_content_based_recommendations('Twilight', cosine_sim)\nfor book in recomm_books_for_Twilight:\n        print(book)","9de46bab":"# 1. Content Based Recommendation","d55a7a8c":"# Recommendation System","f6ac4585":"## 1.1 Using TF-IDF","cf48c05a":"## 1. Content Based Filtering\n### &nbsp;&nbsp;&nbsp;&nbsp; 1.1. Using TF-IDF","b82fcf7d":"### Clean the data","5842507f":"### Import Libraries","592ba6a1":"### Read Data","ec1f1293":"* TF\n* IDF\n* TF-IDF\n\n* Cosine Similarity","f97562c8":"### Test the Result for Content based Recommendation"}}