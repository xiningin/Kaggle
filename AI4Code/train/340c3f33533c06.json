{"cell_type":{"c11dee30":"code","978f3cab":"code","dbb37faa":"code","24a9ab2b":"code","3d1591c5":"code","4f3c4fc1":"code","971c6911":"code","4fd7fb10":"code","f8bc4c3b":"code","c2210f90":"code","56ebac08":"code","171bd3ed":"code","e463f5d2":"code","a86f257f":"code","12b1acf7":"code","48d56767":"code","c46f193a":"code","1ab22dee":"code","6bb66096":"code","da4241dd":"code","a7e6f639":"code","2f8b0863":"code","236847ce":"code","c3efedb0":"code","a15065bb":"code","fb990bec":"code","8eda0496":"code","6f6dd563":"code","74c586a5":"code","22ebdefe":"code","89b9abb5":"code","23a4a0fb":"code","847973d0":"code","58f6af0d":"code","509d22d3":"code","462b628b":"code","dfc0d478":"code","dc0b20ce":"code","eb0ab07b":"code","542530de":"code","146f9b05":"code","00f3615a":"code","ca6c2564":"code","81059080":"code","9acbb9a3":"code","d5cd75b4":"code","b510f31a":"code","c1a1b2ec":"code","f75689f3":"code","4011c480":"code","d60ef196":"code","7b315579":"code","3db8289a":"code","be1d4d66":"code","1334f6f4":"code","d11ab5f6":"code","9af170b8":"code","cc69b72a":"code","6963f58b":"code","92f39418":"code","07c3536b":"code","0838695e":"code","db644f9e":"markdown","db935a4e":"markdown","84f6560a":"markdown","80f5ba6c":"markdown","74c86c3e":"markdown","6b56d338":"markdown","a056a734":"markdown"},"source":{"c11dee30":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for visualization\nimport seaborn as sns # for statistical visualization\nplt.style.use('ggplot') # Set style for plotting","978f3cab":"# Read 10,000,000 rows so that the kernel won't died easily\ntrain = pd.read_csv('..\/input\/train.csv', nrows = 5000000)","dbb37faa":"# Look at the top 3 rows of data\ntrain.head(3)","24a9ab2b":"# Structure and data types\ntrain.info()","3d1591c5":"# Statistical analysis overlook\npd.set_option('float_format', '{:f}'.format) # Print entire number instead of x + ye\n\ntrain.describe()","4f3c4fc1":"train = train[train.fare_amount > 0]","971c6911":"train.shape","4fd7fb10":"test = pd.read_csv('..\/input\/test.csv')\n\ntest['longitude_diff'] = test['dropoff_longitude'] - test['pickup_longitude']\ntest['latitude_diff'] = test['dropoff_latitude'] - test['pickup_latitude']","f8bc4c3b":"test.describe()","c2210f90":"# Mean + 3 * std\ntrain = train.loc[train.fare_amount < 35]","56ebac08":"train.shape","171bd3ed":"# So I set up a longitude range for the ride\ntrain = train.loc[train.pickup_longitude < -72.5]\ntrain = train.loc[train.pickup_longitude > -74.5]","e463f5d2":"train.shape","a86f257f":"# And a latitude range for the ride\ntrain = train.loc[train.pickup_latitude < 42]\ntrain = train.loc[train.pickup_latitude > 40]","12b1acf7":"train = train.loc[train.dropoff_longitude < -72.5]\ntrain = train.loc[train.dropoff_longitude > -74.5]","48d56767":"train = train.loc[train.dropoff_latitude < 42]\ntrain = train.loc[train.dropoff_latitude > 40]","c46f193a":"train.shape","1ab22dee":"train['longitude_diff'] = train['dropoff_longitude'] - train['pickup_longitude']\n\ntrain['latitude_diff'] = train['dropoff_latitude'] - train['pickup_latitude']","6bb66096":"train = train.loc[train.longitude_diff > -0.9]\ntrain = train.loc[train.longitude_diff < 0.5]\n\ntrain = train.loc[train.latitude_diff > -0.7]\ntrain = train.loc[train.latitude_diff < 0.3]","da4241dd":"train.shape","a7e6f639":"train = train.loc[train.passenger_count > 0]\ntrain = train.loc[train.passenger_count <= 6]","2f8b0863":"train.shape","236847ce":"train.head()","c3efedb0":"train['year'] = train.pickup_datetime.apply(lambda x: x[:4])\ntest['year'] = test.pickup_datetime.apply(lambda x: x[:4])","a15065bb":"train['month'] = train.pickup_datetime.apply(lambda x: x[5:7])\ntest['month'] = test.pickup_datetime.apply(lambda x: x[5:7])","fb990bec":"train['hour'] = train.pickup_datetime.apply(lambda x: x[11:13])\ntest['hour'] = test.pickup_datetime.apply(lambda x: x[11:13])","8eda0496":"import datetime\n\ntrain['pickup_datetime'] = train.pickup_datetime.apply(\n    lambda x: datetime.datetime.strptime(x[:10], '%Y-%m-%d'))\ntest['pickup_datetime'] = test.pickup_datetime.apply(\n    lambda x: datetime.datetime.strptime(x[:10], '%Y-%m-%d'))","6f6dd563":"train['day_of_week'] = train.pickup_datetime.apply(lambda x: x.weekday())\ntest['day_of_week'] = test.pickup_datetime.apply(lambda x: x.weekday())","74c586a5":"train['pickup_date'] = train.pickup_datetime.apply(lambda x: x.date())\ntest['pickup_date'] = test.pickup_datetime.apply(lambda x: x.date())","22ebdefe":"from pandas.tseries.holiday import USFederalHolidayCalendar\ncal = USFederalHolidayCalendar()\nholidays = cal.holidays(start='2009-01-01', end='2015-12-31').to_pydatetime()\n\ntrain['holidat_or_not'] = train.pickup_datetime.apply(lambda x: 1 if x in holidays else 0)\ntest['holidat_or_not'] = test.pickup_datetime.apply(lambda x: 1 if x in holidays else 0)","89b9abb5":"train = train.drop(['key','pickup_datetime','pickup_date'],axis=1)\ntest = test.drop(['key','pickup_datetime','pickup_date'],axis=1)","23a4a0fb":"train.info()","847973d0":"train['year'] = train['year'].astype('int')\ntrain['hour'] = train['hour'].astype('int')\n\ntest['year'] = test['year'].astype('int')\ntest['hour'] = test['hour'].astype('int')","58f6af0d":"train.head()","509d22d3":"plt.scatter(train['pickup_longitude'],train['pickup_latitude'],alpha=0.2)","462b628b":"plt.scatter(train['dropoff_longitude'],train['dropoff_latitude'],alpha=0.2)","dfc0d478":"from sklearn.preprocessing import StandardScaler","dc0b20ce":"sample = train[:50000][['pickup_longitude','pickup_latitude']]","eb0ab07b":"scaler = StandardScaler()\nsample = scaler.fit_transform(sample)","542530de":"from scipy.cluster.vq import kmeans\n\ndistortions = []\nnum_clusters = range(2, 25)\n\n# Create a list of distortions from the kmeans function\nfor i in num_clusters:\n    cluster_centers, distortion = kmeans(sample,i)\n    distortions.append(distortion)\n\n# Create a data frame with two lists - num_clusters, distortions\nelbow_plot = pd.DataFrame({'num_clusters': num_clusters, 'distortions': distortions})\n\n# Creat a line plot of num_clusters and distortions\nsns.lineplot(x='num_clusters', y='distortions', data = elbow_plot)\nplt.xticks(num_clusters)\nplt.show()","146f9b05":"sample = train[:50000][['dropoff_longitude','dropoff_latitude']]","00f3615a":"distortions = []\nnum_clusters = range(2, 25)\n\n# Create a list of distortions from the kmeans function\nfor i in num_clusters:\n    cluster_centers, distortion = kmeans(sample,i)\n    distortions.append(distortion)\n\n# Create a data frame with two lists - num_clusters, distortions\nelbow_plot = pd.DataFrame({'num_clusters': num_clusters, 'distortions': distortions})\n\n# Creat a line plot of num_clusters and distortions\nsns.lineplot(x='num_clusters', y='distortions', data = elbow_plot)\nplt.xticks(num_clusters)\nplt.show()","ca6c2564":"from sklearn.cluster import KMeans\n\nmodel = KMeans(n_clusters = 5)\nmodel.fit(train[['pickup_longitude','pickup_latitude']])\npickup_labels = model.predict(train[['pickup_longitude','pickup_latitude']])","81059080":"train['pickup_cluster'] = pickup_labels\n\npickup_cluster = pd.get_dummies(train['pickup_cluster'],prefix='pickup_cluster',drop_first=True)\n\ntrain = pd.concat([train,pickup_cluster],axis=1).drop('pickup_cluster',axis=1)","9acbb9a3":"model2 = KMeans(n_clusters = 8)\nmodel2.fit(train[['dropoff_longitude','dropoff_latitude']])\ndropoff_labels = model2.predict(train[['dropoff_longitude','dropoff_latitude']])","d5cd75b4":"train['dropoff_cluster'] = dropoff_labels\n\ndropoff_cluster = pd.get_dummies(train['dropoff_cluster'],prefix='dropoff_cluster',drop_first=True)\n\ntrain = pd.concat([train,dropoff_cluster],axis=1).drop('dropoff_cluster',axis=1)","b510f31a":"train['pickup_cluster'] = pickup_labels\ntrain['dropoff_cluster'] = dropoff_labels","c1a1b2ec":"train.groupby(['pickup_cluster','dropoff_cluster'])['fare_amount'].agg(['mean','std', 'count'])","f75689f3":"pickup_test_labels = model.predict(test[['pickup_longitude','pickup_latitude']])\n\ntest['pickup_cluster'] = pickup_test_labels\npickup_cluster = pd.get_dummies(test['pickup_cluster'],prefix='pickup_cluster',drop_first=True)\ntest = pd.concat([test,pickup_cluster],axis=1).drop('pickup_cluster',axis=1)","4011c480":"dropoff_test_labels = model2.predict(test[['dropoff_longitude','dropoff_latitude']])\n\ntest['dropoff_cluster'] = dropoff_test_labels\ndropoff_cluster = pd.get_dummies(test['dropoff_cluster'],prefix='dropoff_cluster',drop_first=True)\ntest = pd.concat([test,dropoff_cluster],axis=1).drop('dropoff_cluster',axis=1)","d60ef196":"train.head()","7b315579":"train.shape","3db8289a":"train = pd.get_dummies(train,columns=['month','hour','day_of_week'],drop_first=True)\ntest = pd.get_dummies(test,columns=['month','hour','day_of_week'],drop_first=True)","be1d4d66":"train.shape","1334f6f4":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","d11ab5f6":"train.head()","9af170b8":"train = train.drop(['pickup_cluster','dropoff_cluster'],axis=1)","cc69b72a":"X = train.drop('fare_amount',axis=1)\ny = train[['fare_amount']]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","6963f58b":"clf = RandomForestRegressor(n_estimators=30,min_samples_split=5,min_samples_leaf=3,random_state=21)\n\nclf.fit(X_train,y_train)","92f39418":"predictions = clf.predict(X_test)\n\nerror = np.sqrt(metrics.mean_squared_error(y_test,predictions))\nprint(error)","07c3536b":"features = X.columns[:X.shape[1]]\nimportances = clf.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(figsize=(6, 10))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","0838695e":"predictions = clf.predict(test)\n\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['fare_amount'] = predictions\nsubmission.to_csv('submission.csv',index=False)","db644f9e":"## Data Cleaning","db935a4e":"## Modeling","84f6560a":"## Feature Engineering (Derivative Features)","80f5ba6c":"**The latitude of New York City, NY, USA is 40.730610, and the longitude is -73.935242. **","74c86c3e":"This is awesome! Let me see if it helps on modeling","6b56d338":"## Clustering","a056a734":"Well, some records are definitely wrong. I'll check those out now.\n\nBut I'll use test set as a reference since our goal is to predict fair in test."}}