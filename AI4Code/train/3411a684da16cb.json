{"cell_type":{"26b60dac":"code","2ce2e9b1":"code","9436d881":"code","87598764":"code","5044bd92":"code","31ef9721":"code","8fafb5d7":"code","f2b588ec":"code","41ccd206":"code","89604d50":"code","54ddf166":"code","5f60996f":"code","e6a79a3b":"code","05358ac7":"code","7cfc6492":"code","3ac4e13f":"code","5626215d":"code","87c48824":"code","5a746d6a":"code","73d0f692":"code","120302b0":"code","a35f3b80":"code","be198b59":"code","b05ac2dc":"code","5df805fe":"code","931b2f13":"code","e6504aa1":"code","33b44ebe":"code","a1c099b0":"code","2a9fc8fd":"code","5ec4f757":"code","91b035d9":"code","dcd7f2a0":"code","d420652d":"markdown","380d4e92":"markdown","5ddd5d36":"markdown","b719df7d":"markdown","54a514dd":"markdown","0e12e291":"markdown"},"source":{"26b60dac":"import pandas as pd  ## Processing\nimport numpy as np  ##Linear Algebra\nimport matplotlib.pyplot as plt ## Plots\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Flatten, Dense, MaxPool2D, Conv2D, Dropout, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.datasets import mnist\nfrom keras.utils.np_utils import to_categorical\n\nsns.set(style = 'white', context = 'notebook', palette = 'deep')\n\n%matplotlib inline","2ce2e9b1":"## Loading train Dataset\n\ndf_train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","9436d881":"## A glimpse at the data\n\ndf_train.head()","87598764":"## showing total values and columns\n\ndf_train.shape","5044bd92":"# Loading test data\n\ndf_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","31ef9721":"## A look at the test data\n\ndf_test.head()","8fafb5d7":"## values and colums of the test data\n\ndf_test.shape","f2b588ec":"y_train = df_train['label']\n\nX_train = df_train.drop(labels = ['label'], axis = 1)\n\nhist = y_train.value_counts()\n\nhist.plot.bar()","41ccd206":"## checking for missing values in the data\n\ndf_train.isnull().sum()","89604d50":"## Normalization\n\nX_train = X_train \/ 255.0\n\ndf_test = df_test \/ 255.0","54ddf166":"## Reshape\n\nX_train = X_train.values.reshape(-1, 28,28, 1)\n\ndf_test = df_test.values.reshape(-1, 28,28, 1)","5f60996f":"## Label Encoding\n\ny_train = to_categorical(y_train, num_classes = 10)","e6a79a3b":"## Split training testing\/training\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size\n                                                   = 0.1, random_state = 2)","05358ac7":"## Showing split data\n\nprint('X_train shape: ', X_train.shape)\nprint('X_test shape: ', X_test.shape)\nprint('y_train shape: ', y_train.shape)\nprint('y_test shape: ', y_test.shape)","7cfc6492":"nrows = 2\n\nncols = 2\n\npic_indexes = np.random.randint(X_train.shape[0], size\n                             =(nrows * ncols))\n\nf, axs = plt.subplots(nrows, ncols, figsize = (12,9))\n\naxs = axs.flatten()\n\npicture_index = 0\n\nfor picture_index, ax in zip(pic_indexes, axs):\n    ax.imshow(X_train[picture_index].reshape(28, 28), cmap = 'gray')\n    \n    ax.set_title(f'Label: {y_train[picture_index]}')\n    \n    \nplt.show()","3ac4e13f":"g = plt.imshow(X_train[0][:, :, 0])","5626215d":"y_train[0]","87c48824":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'same', \n                activation = 'relu', input_shape = (28, 28, 1)))\n                \n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = 'Same', activation\n                 = 'relu'))\n\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding \n                = 'Same', activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding\n                = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = 'softmax'))","5a746d6a":"model.summary()","73d0f692":"optimizer = RMSprop(lr = 0.001, rho = 0.9, epsilon = 1e-08, decay\n                  = 0.0)","120302b0":"model.compile(optimizer = optimizer, loss = 'categorical_crossentropy', metrics\n             = ['accuracy'])","a35f3b80":"learning_reduction = ReduceLROnPlateau(monitor = 'val_loss',\n                                     patience = 3,\n                                     verbose = 1,\n                                     factor = 0.5,\n                                     min_lr = 0.00001)","be198b59":"epochs = 50 \n\nbatch_size = 86","b05ac2dc":"datagen = ImageDataGenerator(\n       \n        featurewise_center=False, \n       \n        samplewise_center=False,  \n       \n        featurewise_std_normalization=False, \n      \n        samplewise_std_normalization=False, \n      \n        zca_whitening=False,  \n       \n        rotation_range=10, \n       \n        zoom_range = 0.1,  \n        \n        width_shift_range=0.1,  \n            \n        height_shift_range=0.1, \n        \n        horizontal_flip=False,  \n        \n        vertical_flip=False) \n\n\ndatagen.fit(X_train)\n","5df805fe":"history = model.fit(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_reduction])","931b2f13":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \n    \n    \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n\nY_pred = model.predict(X_test)\n \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n\nY_true = np.argmax(y_test,axis = 1) \n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10))","e6504aa1":"score = model.evaluate(X_test, y_test, verbose = 0)\n\nprint('Test Accuracy: ', score[1])","33b44ebe":"def get_newtriplecnn():\n    return Sequential([\n        Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same', input_shape = (28,28,1)),\n        Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same'),\n        BatchNormalization(),\n        MaxPool2D(pool_size=(2, 2)),\n        Dropout(0.25),\n        \n        Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'),\n        Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same' ),\n        BatchNormalization(),\n        MaxPool2D(pool_size=(2, 2)),\n        Dropout(0.25),\n        \n        Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same' ),\n        Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same' ),\n        BatchNormalization(),\n        MaxPool2D(pool_size=(2, 2)),\n        Dropout(0.25),\n        \n        \n        Flatten(),\n          \n        Dense(512, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.5),\n        \n        Dense(256, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.4),\n        \n        Dense(64, activation='relu'),\n        BatchNormalization(),\n        Dropout(0.3),\n        \n        Dense(10, activation = \"softmax\")\n        \n    ])","a1c099b0":"model = get_newtriplecnn()\n\nmodel.compile(optimizer = 'Adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n\nmodel.summary()","2a9fc8fd":"callbacks1 = [ \n    EarlyStopping(monitor = 'loss', patience = 6), \n    ReduceLROnPlateau(monitor = 'loss', patience = 3), \n    ModelCheckpoint('model.best.hdf5', save_best_only=True) # saving the best model\n]","5ec4f757":"history = model.fit(datagen.flow(X_train, y_train, batch_size = batch_size), epochs = 50,\n                               steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                               validation_data = (X_test, y_test),\n                               callbacks = callbacks1,\n                             )","91b035d9":"result = model.predict(df_test)\n\nresult = np.argmax(result, axis=1)\n\nresult = pd.Series(result, name ='Label')","dcd7f2a0":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\".\/submission_cnn.csv\",index=False)","d420652d":"# CNN","380d4e92":"# Importing Libraries\n","5ddd5d36":"****Augmentation****","b719df7d":"# Gathering Data Set","54a514dd":"# EDA\/Processing","0e12e291":"# Tripple CNN"}}