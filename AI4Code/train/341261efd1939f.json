{"cell_type":{"6b4d0d3a":"code","27ac2c78":"code","8f203c44":"code","0b4cb610":"code","d7b5d04f":"code","5fbd9f46":"code","cf36702a":"code","83cbb584":"code","4602f00b":"code","352d8935":"code","4905b128":"code","f3cb3928":"code","1af4fc09":"code","f8900a79":"code","56d04448":"code","5999148f":"code","4fe7a151":"code","02e7c35e":"code","fa0f4c85":"code","7e46cc0f":"code","1cb8ef1f":"code","59373a78":"markdown","26c7d157":"markdown","d7fb52c6":"markdown","8e07b910":"markdown","3bcca201":"markdown","3a8c2e19":"markdown","0df48ffd":"markdown","453728e7":"markdown","c1b5ece6":"markdown","e5ccaa81":"markdown","08a1ded9":"markdown"},"source":{"6b4d0d3a":"import pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\nimport numpy as np\nfrom itertools import product\nfrom sklearn.preprocessing import LabelEncoder\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport time\nimport sys\nimport gc\nimport pickle\nsys.version_info","27ac2c78":"jan=pd.read_csv('..\/input\/flight-delay-prediction\/Jan_2019_ontime.csv')\njan1=pd.read_csv('..\/input\/flight-delay-prediction\/Jan_2020_ontime.csv')","8f203c44":"jan.tail()","0b4cb610":"#DEP_TIME_BLK contains an invalid label \n#fix it to 0500-0559\njan.loc[jan['DEP_TIME_BLK'] == '0001-0559', 'DEP_TIME_BLK'] = '0500-0559'","d7b5d04f":"#comparing arrivals and departures time frames\n\nvalues = [jan['DEP_DEL15'].value_counts()[0],jan['DEP_DEL15'].value_counts()[1]]\nlabels = [\"Delayed (<15 minutes)\", \"Delayed (>15 minutes)\"]\ncolors = ['blue','red']\nvalues_arr = [jan['ARR_DEL15'].value_counts()[0],jan['ARR_DEL15'].value_counts()[1]]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Departures', 'Arrivals'])\nfig.add_trace(go.Pie(labels=labels, values=values, pull=[0, 0.1],textinfo = 'label+percent'),1,1)\nfig.add_trace(go.Pie(labels=labels, values=values_arr, pull=[0, 0.1],textinfo = 'label+percent'),1,2)\nfig.update_traces( textinfo='value', textfont_size=14,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(uniformtext_minsize=4, uniformtext_mode='hide', title_text='Flights Delayed', title_x = 0.5, legend_title='<b>               Flights<\/b>',legend=dict(x=.45, y=0.6))\n\nfig.show()","5fbd9f46":"#Barplot\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n# Add title\nplt.title(\"Arrival Delays from different Airlines\")\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=jan.ORIGIN_AIRPORT_ID, y=jan['ARR_DEL15'])\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")","cf36702a":"#Barplot\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n# Add title\nplt.title(\"Flight delay on week days\")\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=jan.DAY_OF_WEEK, y=jan['ARR_DEL15'])\n# Add label for vertical axis\nplt.ylabel(\"Arrival delay (in minutes)\")","83cbb584":"#drop flights with missing data\njan = jan[ (jan.CANCELLED != 1) & (jan.DEP_TIME.isna() == False) & (jan.ARR_TIME.isna() == False)]\nlen(jan.CANCELLED.isna()), len(jan.DEP_TIME.isna()), len(jan.ARR_TIME.isna()), len(jan)\n\n# drop when target is NAN\njan = jan[ (jan.ARR_DEL15.isna() == False)]","4602f00b":"cols=['Unnamed: 21','OP_CARRIER_AIRLINE_ID','OP_CARRIER','DIVERTED','CANCELLED','ORIGIN','TAIL_NUM','OP_CARRIER_FL_NUM','ORIGIN_AIRPORT_SEQ_ID','DEST_AIRPORT_SEQ_ID','DEST','DAY_OF_MONTH','OP_UNIQUE_CARRIER']\njan=jan.drop(cols,axis=1)","352d8935":"def get_day_category(day_of_week):\n    if day_of_week <= 5:\n        return 0 #'for working day'\n    elif day_of_week > 5:\n        return 1 #'for weekend'\n    \njan.DAY_OF_WEEK = jan.DAY_OF_WEEK.apply(get_day_category)\njan.rename(columns={'DAY_OF_WEEK':'type_of_day'})","4905b128":"jan['origin_day_avg'] = jan.groupby(['ORIGIN_AIRPORT_ID','DAY_OF_WEEK'])['DEP_TIME'].transform('mean').astype(np.float16)\njan['dest_day_avg'] = jan.groupby(['DEST_AIRPORT_ID','DAY_OF_WEEK'])['ARR_TIME'].transform('mean').astype(np.float16)","f3cb3928":"#replace missing target values \ndef new_arrival_delay(dep_delay, arr_delay):\n    if np.isnan(arr_delay):\n        return dep_delay\n    else:\n        return arr_delay\n\njan['ARR_DEL15'] = jan.apply(lambda row :new_arrival_delay(row['DEP_DEL15'],row['ARR_DEL15']), axis = 1)","1af4fc09":"# CREATE ARR_TIME_BLK \n\n#generate block hours\nblocks = []\nfor hour in range(0,24):\n    hour_part = ('%02d' %(hour))\n    blocks.append(hour_part + '00-' + hour_part + '59')\nblocks\n\ndef arrival_time_blk(arr_time):\n    arr_hour = str('%04d' %(arr_time))[:2]\n    arr_block = None\n    for block in blocks:\n        #print (block,arr_hour)\n        if block.startswith(arr_hour):\n            arr_block = block\n            break\n    if arr_block == None and str(arr_time) == '2400.0':\n        arr_block = '0000-0059'\n        #print('Cannot find block for #' + str(arr_time) + '#: set block to #' + arr_block + '#')\n    return arr_block\n\njan['ARR_TIME_BLK'] = jan.ARR_TIME.apply(arrival_time_blk)\n# drop the no more useful ARR_TIME\njan.drop(['ARR_TIME'], inplace=True, axis=1)\n","f8900a79":"# label encode ARR_TIME_BLK and DEP_TIME_BLK\nle = LabelEncoder()\nle.fit(blocks)\nle.classes_\njan['ARR_TIME_BLK'] = le.transform(jan.ARR_TIME_BLK.values)\njan['DEP_TIME_BLK'] = le.transform(jan.DEP_TIME_BLK.values)","56d04448":"#Before spliting data, SORT IT FIRST\njan= jan.reindex(sorted(jan.columns), axis=1)\n","5999148f":"jan.info()","4fe7a151":"#Remove DEP_TIME column \njan= jan.drop(['DEP_TIME','DEP_DEL15'], axis=1)","02e7c35e":"from sklearn.model_selection import train_test_split\nY = jan['ARR_DEL15'].values\nX = jan.drop(['ARR_DEL15'], axis=1).values\n\nX_train, X_valid, Y_train, Y_valid =  train_test_split(X,Y, test_size=0.2, random_state=1)","fa0f4c85":"ts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.3,    \n    seed=42)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"auc\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)\n\ntime.time() - ts","7e46cc0f":"Y_preds=model.predict(X_valid)","1cb8ef1f":"plot_features(model,(16,9))","59373a78":"# SPILT DATA FOR TRAINING AND TESTING ","26c7d157":"# DEALING WITH MISSING VALUES","d7fb52c6":"# DROPING UNNECESSARY COLUMNS ","8e07b910":"# MODEL TRAINING WITH XGBOOST","3bcca201":"# DATA VISUALISATION ","3a8c2e19":"# FEATURE IMPORTANCE","0df48ffd":"# January flight prediction beginner\n![up.jpg](attachment:up.jpg)","453728e7":"# IMPORTING LIBRARIES","c1b5ece6":"# CONVERTING DATA VALUES INTO MORE USEFUL FORM ","e5ccaa81":"# LOADING DATASET","08a1ded9":"# LABEL ENCODING OF CATEGORICAL DATA COLUMNS "}}