{"cell_type":{"8e6ea3f2":"code","69c46de7":"code","66ab495c":"code","60a576f8":"code","ca2b9d52":"code","bc8600ea":"code","c8dab88a":"code","f5962e53":"code","9b7845a0":"code","ef890841":"code","980bceac":"code","56680d59":"code","bdfe048d":"code","5c198314":"code","2c35bec3":"code","32c24e49":"code","791c990e":"code","ab119144":"code","53b79f47":"code","0e2e2d0d":"code","2754dc05":"code","a95d8fdc":"code","8e07e987":"code","49f3586a":"code","0791be1f":"code","62bcf9a0":"code","39bd6a8c":"code","50c32010":"markdown"},"source":{"8e6ea3f2":"import numpy as np\nimport pandas as pd","69c46de7":"df= pd.read_csv('..\/input\/boston-house-prices\/housing.csv', delim_whitespace=True, header=None)","66ab495c":"column = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX','PTRATIO', 'B', 'LSTAT', 'PRICE']","60a576f8":"df.columns = column","ca2b9d52":"from sklearn.model_selection import train_test_split, cross_val_predict","bc8600ea":"x = df.drop('PRICE', axis=1)\ny = df['PRICE']","c8dab88a":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","f5962e53":"from sklearn.preprocessing import StandardScaler","9b7845a0":"stnd = StandardScaler()","ef890841":"x_train = stnd.fit_transform(x_train.iloc[:, :])","980bceac":"x_test = stnd.transform(x_test.iloc[:, :])","56680d59":"from keras.models import Sequential\nfrom keras.layers import Dense","bdfe048d":"model = Sequential()\nmodel.add(Dense(128, input_dim=13, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='linear'))","5c198314":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])\nmodel.summary()","2c35bec3":"result = model.fit(x_train, y_train, validation_split=0.2, epochs=100)","32c24e49":"result.history","791c990e":"from matplotlib import pyplot as plt\n#plot the training and validation accuracy and loss at each epoch\nloss = result.history['loss']\nval_loss = result.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'y', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n\nacc = result.history['mae']\nval_acc = result.history['val_mae']\nplt.plot(epochs, acc, 'y', label='Training MAE')\nplt.plot(epochs, val_acc, 'r', label='Validation MAE')\nplt.title('Training and validation MAE')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","ab119144":"predictions = model.predict(x_test[:5])\nprint(\"Predicted values are: \", predictions)\nprint(\"Real values are: \", y_test[:5])","53b79f47":"mse_neural, mae_neural = model.evaluate(x_test, y_test)\nprint('Mean squared error from neural net: ', mse_neural)\nprint('Mean absolute error from neural net: ', mae_neural)\n","0e2e2d0d":"from sklearn import linear_model\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n### Linear regression\nlr_model = linear_model.LinearRegression()\nlr_model.fit(x_train, y_train)\ny_pred_lr = lr_model.predict(x_test)\nmse_lr = mean_squared_error(y_test, y_pred_lr)\nmae_lr = mean_absolute_error(y_test, y_pred_lr)\nprint('Mean squared error from linear regression: ', mse_lr)\nprint('Mean absolute error from linear regression: ', mae_lr)\n","2754dc05":"### Decision tree\ntree = DecisionTreeRegressor(max_depth=7)\ntree.fit(x_train, y_train)\ny_pred_tree = tree.predict(x_test)\nmse_dt = mean_squared_error(y_test, y_pred_tree)\nmae_dt = mean_absolute_error(y_test, y_pred_tree)\nprint('Mean squared error using decision tree: ', mse_dt)\nprint('Mean absolute error using decision tree: ', mae_dt)\n","a95d8fdc":"#Random forest.\n#Increase number of tress and see the effect\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators = 80)\nmodel.fit(x_train, y_train)\n\ny_pred_RF = model.predict(x_test)\n\nmse_RF = mean_squared_error(y_test, y_pred_RF)\nmae_RF = mean_absolute_error(y_test, y_pred_RF)\nprint('Mean squared error using Random Forest: ', mse_RF)\nprint('Mean absolute error Using Random Forest: ', mae_RF)\n","8e07e987":"#Feature ranking...\nimport pandas as pd\nfeature_list = list(x.columns)\nfeature_imp = pd.Series(model.feature_importances_, index=feature_list).sort_values(ascending=False)\nprint(feature_imp)","49f3586a":"from sklearn.svm import SVR","0791be1f":"lr_svm = SVR(kernel='poly', C=100, epsilon=1.8, degree=3)\nlr_svm.fit(x_train, y_train)\npredict_svm = lr_svm.predict(x_test)\nmse_RF = mean_squared_error(y_test, predict_svm)\nmae_RF = mean_absolute_error(y_test, predict_svm)\nprint('Mean squared error using Random Forest: ', mse_RF)\nprint('Mean absolute error Using Random Forest: ', mae_RF)","62bcf9a0":"from sklearn.linear_model import ElasticNet, Lasso","39bd6a8c":"elstic = ElasticNet(alpha=0.1, l1_ratio=0.4)\nelstic.fit(x_train, y_train)\nel_predict = elstic.predict(x_test)\nmse_RF = mean_squared_error(y_test, el_predict)\nmae_RF = mean_absolute_error(y_test, el_predict)\nprint('Mean squared error using Random Forest: ', mse_RF)\nprint('Mean absolute error Using Random Forest: ', mae_RF)","50c32010":"### What Feature Are More Important:"}}