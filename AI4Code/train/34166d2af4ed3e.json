{"cell_type":{"faf6da5f":"code","d4a45de6":"code","e2774a21":"code","194a6011":"code","da6d9e43":"code","f638d938":"code","4981ff10":"code","4f5aff9a":"code","ccd268f0":"code","d5b15ffb":"code","6a05559b":"code","6a597b62":"code","5619520f":"code","b2101125":"code","3e34c135":"code","1324ed3c":"code","b9f2cd09":"code","b8d24c46":"code","5cbb4565":"code","72fa53d8":"code","fa97aeb4":"code","c9cd82c4":"code","a2a4af2a":"code","453bb873":"code","51a9df5d":"code","37ac5090":"code","728f0250":"code","fa512419":"code","8f5a44ab":"code","9769a9c1":"code","f861d889":"code","29197fd5":"code","630ed1f8":"code","a2c63231":"code","dfd58d06":"code","e1afd98b":"code","92d8b9a4":"code","2b7766f5":"code","7b8c4c1c":"code","4b8f6221":"code","9b40f73e":"code","a13bfacf":"code","b8e14b8d":"code","e4f8162a":"code","cd4b48d0":"code","10413e3d":"markdown"},"source":{"faf6da5f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d4a45de6":"!pip install sentence_transformers","e2774a21":"!pip install faiss-gpu","194a6011":"from sentence_transformers import SentenceTransformer, util\nimport time\nimport faiss","da6d9e43":"model = SentenceTransformer('all-distilroberta-v1')","f638d938":"with open('\/kaggle\/input\/the-matrix-script\/the_matrix_script.txt') as f:\n    data = f.read().lower().splitlines()","4981ff10":"len(data)","4f5aff9a":"words = [\n    \n    'apoc',\n'agent brown',\n'agent jones',\n'choi',\n'dujour',\n'cypher',\n'dozer',\n'morpheus',\n'mouse',\n'neo',\n'oracle',\n'rhineheart',\n'agent smith',\n'switch',\n'tank',\n'trinity'\n    \n]","ccd268f0":"corpus_embeddings = model.encode(data, show_progress_bar=True)","d5b15ffb":"faiss.normalize_L2(corpus_embeddings)","6a05559b":"d = corpus_embeddings.shape[1]\n\n# \u0443 \u044d\u0442\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043d\u0435\u0442\u043e\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0437\u0430\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n#nlist = 50\n#m = 8  \n#bits = 8 \n\n#quantizer = faiss.IndexFlatIP(d)  \n#index = faiss.IndexIVFPQ(quantizer, d, nlist, m, bits) ","6a597b62":"index = faiss.IndexFlatL2(d)","5619520f":"index.is_trained","b2101125":"index.train(corpus_embeddings)","3e34c135":"index.add(corpus_embeddings)","1324ed3c":"index.ntotal","b9f2cd09":"def search(query):\n    query_vector = model.encode([query])\n    faiss.normalize_L2(query_vector)\n    k = 100\n    similarities, similarities_ids = index.search(query_vector.astype(np.float32), k)\n    similarities = np.around(np.clip(similarities, 0, 1), decimals=4)\n    highest_val_idx = np.argmax([sum(sim_vec) for sim_vec in similarities])\n    l1 = [data[_id] for _id in similarities_ids.tolist()[0]]\n    l2 = similarities[highest_val_idx].tolist()\n    return list(zip(l1,l2))","b8d24c46":"from tqdm import tqdm","5cbb4565":"edgelist = []\nfor word in tqdm(data):\n    edges = []\n    for s, w in search(word):\n        edges.extend((word, s, w))\n    edgelist.append(edges)","72fa53d8":"flat_edgelist = [item for sublist in edgelist for item in sublist]","fa97aeb4":"edgelist_3 = [list(flat_edgelist[i:i+3]) for i in range(0, len(flat_edgelist), 3)]","c9cd82c4":"len(edgelist_3)","a2a4af2a":"import re","453bb873":"pattern = re.compile(r'\\b({})\\b'.format(\n    '|'.join([re.escape(word) for word in words]))\n)","51a9df5d":"lst2 = [num for num in edgelist_3 if re.match(pattern, num[0]) and re.match(pattern, num[1])]","37ac5090":"lst3 = [[pattern.findall(i), pattern.findall(j), [k]] for i,j,k in lst2]","728f0250":"import itertools","fa512419":"lst4 = [list(itertools.product(a, b, c)) for a, b, c in lst3]","8f5a44ab":"flat_edgelist_2 = [item for sublist in lst4 for item in sublist]","9769a9c1":"flat_edgelist_2_filtered = [[i, j, k] for i,j,k in flat_edgelist_2 if i != j]","f861d889":"import networkx as nx","29197fd5":"M = nx.MultiGraph()\n\nM.add_weighted_edges_from(flat_edgelist_2_filtered)","630ed1f8":"G = nx.Graph()\nfor u,v,data in M.edges(data=True):\n    w = data['weight'] if 'weight' in data else 1.0\n    if G.has_edge(u,v):\n        G[u][v]['weight'] += w\n    else:\n        G.add_edge(u, v, weight=w)","a2c63231":"print(nx.info(G))","dfd58d06":"[n for n in G.neighbors('agent smith')]","e1afd98b":"import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline","92d8b9a4":"from community import community_louvain","2b7766f5":"communities =community_louvain.best_partition(G)\ncommunity_id = [communities[node] for node in G.nodes()]","7b8c4c1c":"fig = plt.figure(figsize=(10, 10))\nd = dict(G.degree)\nnx.draw(\n    G,\n    with_labels=True,\n    edge_color=['silver'] * len(G.edges()),\n    cmap=plt.cm.tab20,\n    node_color=community_id,\n    nodelist=d.keys(), \n    node_size=[v * 100 for v in d.values()]\n)","4b8f6221":"def pr_summary(G):\n    pr = nx.pagerank(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(pr.keys()),\n        'centrality_pr': list(pr.values())\n    })\n    return df.sort_values('centrality_pr', ascending=False)","9b40f73e":"pr = pd.DataFrame(pr_summary(G), columns=['node', 'centrality_pr'])","a13bfacf":"pr.head()","b8e14b8d":"def bc_summary(G):\n    bc = nx.betweenness_centrality(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(bc.keys()),\n        'centrality_bc': list(bc.values())\n    })\n    return df.sort_values('centrality_bc', ascending=False)","e4f8162a":"bc = pd.DataFrame(bc_summary(G), columns=['node', 'centrality_bc'])","cd4b48d0":"bc.head()","10413e3d":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430\u043c\u0438 \u0444\u0438\u043b\u044c\u043c\u0430 \"\u041c\u0430\u0442\u0440\u0438\u0446\u0430\" (1999) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e [sentence-transformers](https:\/\/www.sbert.net\/), [faiss](https:\/\/github.com\/facebookresearch\/faiss) \u0438 \u0433\u0440\u0430\u0444\u043e\u0432\n\n\u041d\u0430\u0448\u0430 \u0446\u0435\u043b\u044c - \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0451\u0431\u0435\u0440 \u043c\u0435\u0436\u0434\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0433\u0440\u0430\u0444\u0430. \n\n\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \"\u041c\u0430\u0442\u0440\u0438\u0446\u044b\". \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438) \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e sentence-transformers \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439.\n\n\u0417\u0430\u0442\u0435\u043c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 faiss \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \"\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 1\" - \"\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 2\" - \"\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430\". \n\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a (re, pandas) \u043c\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443 \u043d\u0430\u0441 \u043f\u0440\u0438\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d \u0437\u0430\u0440\u0430\u043d\u0435\u0435. \n\n\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0433\u0440\u0430\u0444\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 louvain \u0438 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pagerank \u0438 betweenness, \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u043d\u0444\u043b\u044e\u0435\u043d\u0441\u0435\u0440\u043e\u0432 \u0438 \u043f\u043e\u0441\u0440\u0435\u0434\u043d\u0438\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \"\u041c\u0430\u0442\u0440\u0438\u0446\u044b\"."}}