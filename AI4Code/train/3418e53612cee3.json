{"cell_type":{"05e76896":"code","ee76cabe":"code","bd5b78fb":"code","2d2d4538":"code","bff55f83":"code","4a375332":"code","6b9712fb":"code","d2e366dc":"code","b0cacf81":"code","45c8bcde":"code","07cb727d":"code","16fff82c":"code","bf112608":"code","c64417b8":"code","e273d9de":"code","c5d4c806":"code","5a3d5fd0":"code","81af5021":"code","240f1d8a":"code","28827fb2":"code","c50e22b8":"code","7765ea36":"code","62c165d2":"code","986f98f6":"code","7ae9d080":"code","11c66a3c":"code","080a59f2":"code","71549d37":"code","f82f3e2e":"code","54c1e1a1":"code","7161c65b":"code","0bba2183":"code","c12f2d15":"code","79c01b53":"code","bb588264":"code","1d935bc2":"code","4a699d83":"code","ce7728a0":"code","deddf22a":"code","4b124bf3":"code","42751ebc":"code","3f81742d":"code","61a46aca":"code","052c7bf2":"code","9697f520":"code","39a6051e":"code","4f78cb63":"code","73c4da4b":"code","973aea62":"code","b9212529":"code","c97c54ec":"code","8bec0263":"code","9cbddc8b":"code","6764faa7":"code","ff059343":"code","7c8eda65":"code","c9c2746a":"code","c65b42aa":"code","c313e6c5":"code","c7b162ce":"code","720c54c4":"code","e98bf36b":"code","59df9767":"markdown","98cece27":"markdown","f0e220e1":"markdown","0daa490e":"markdown","fa24ab0c":"markdown","3b6a101a":"markdown","c42724ee":"markdown"},"source":{"05e76896":"pip install folium","ee76cabe":"pip install geopandas","bd5b78fb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport geopandas as gpd\nimport folium\nimport json\nimport branca.colormap as cm\n","2d2d4538":"#import SAT scores\ndf_scores = pd.read_csv('..\/input\/high-schools\/scores.csv')","bff55f83":"#what are my columns?\ndf_scores.columns","4a375332":"#rename every column with spaces and replace with an underscore\ndf_scores.columns = df_scores.columns.str.replace(\" \", \"_\")","6b9712fb":"#what are the data types in my dataframe?\ndf_scores.dtypes","d2e366dc":"df_scores.head()","b0cacf81":"#show all column names (currently truncated)\npd.set_option('display.max_columns', None)","45c8bcde":"#remove the % from dataframe values as the dtype is currently casted as an object\/string\ndf_scores = df_scores.replace('%','',regex=True)","07cb727d":"#typecast the string values for the percent ethnictities into a float. \ndf_scores['Percent_White'] = df_scores['Percent_White'].astype(float)\ndf_scores['Percent_Black'] = df_scores['Percent_Black'].astype(float)\ndf_scores['Percent_Hispanic'] = df_scores['Percent_Hispanic'].astype(float)\ndf_scores['Percent_Asian'] = df_scores['Percent_Asian'].astype(float)\n\n#typecast the string values for the percent tested into a float. \ndf_scores['Percent_Tested'] = df_scores['Percent_Tested'].astype(float)","16fff82c":"#double check and see dtypes for % etnicities\ndf_scores.dtypes","bf112608":"#how many schools are in each borough? using value_counts() \ndf_scores['Borough'].value_counts()","c64417b8":"#percent breakdown of schools in each borough\ndf_scores['Borough'].value_counts(normalize= True)","e273d9de":"#general understanding of data\ndf_scores.describe()","c5d4c806":"#creates a filter for school name; lets check my high school \nfilt = (df_scores['School_Name'] == 'Francis Lewis High School')","5a3d5fd0":"df_scores[filt]","81af5021":"#general understanding of scores\ndf_scores['Average_Score_(SAT_Math)'].describe()","240f1d8a":"#general understanding of scores\ndf_scores['Average_Score_(SAT_Reading)'].describe()","28827fb2":"#general understanding of scores\ndf_scores['Average_Score_(SAT_Writing)'].describe()","c50e22b8":"#distribution of Math scores\nsns.distplot(df_scores['Average_Score_(SAT_Math)'])","7765ea36":"sns.distplot(df_scores['Average_Score_(SAT_Reading)'])","62c165d2":"sns.distplot(df_scores['Average_Score_(SAT_Writing)'])","986f98f6":"#describe the shape and distribution of the scores\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_scores['Average_Score_(SAT_Math)'].skew())\nprint(\"Kurtosis: %f\" % df_scores['Average_Score_(SAT_Math)'].kurt())","7ae9d080":"#describe the shape and distribution of the scores\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_scores['Average_Score_(SAT_Reading)'].skew())\nprint(\"Kurtosis: %f\" % df_scores['Average_Score_(SAT_Reading)'].kurt())","11c66a3c":"#describe the shape and distribution of the scores\n#skewness and kurtosis\nprint(\"Skewness: %f\" % df_scores['Average_Score_(SAT_Writing)'].skew())\nprint(\"Kurtosis: %f\" % df_scores['Average_Score_(SAT_Writing)'].kurt())","080a59f2":"#create new column with total average SAT score by adding all other scores\ndf_scores['Total_Average_Score'] = df_scores['Average_Score_(SAT_Math)'] + df_scores['Average_Score_(SAT_Reading)'] + df_scores['Average_Score_(SAT_Writing)']\ndf_scores.tail()","71549d37":"#what are my descriptive statistics for total average scores?\ndf_scores['Total_Average_Score'].describe()","f82f3e2e":"#what is the median total average score?\nprint('The median total average SAT score is', df_scores['Total_Average_Score'].median())","54c1e1a1":"#distribution of total average score\nsns.distplot(df_scores['Total_Average_Score'])","7161c65b":"print(\"Skewness: %f\" % df_scores['Total_Average_Score'].skew())\nprint(\"Kurtosis: %f\" % df_scores['Total_Average_Score'].kurt())","0bba2183":"#schools with lowest and highest average SAT scores\nprint(\"The lowest average SAT score was\", df_scores['Total_Average_Score'].min())\nprint(\"The highest average SAT score was\", df_scores['Total_Average_Score'].max())","c12f2d15":"#create filters\nlowest = (df_scores['Total_Average_Score'] == 924)\nhighest = (df_scores['Total_Average_Score'] == 2144)","79c01b53":"print(\"The school with the lowest average SAT score is\", df_scores.loc[df_scores['Total_Average_Score'] == 924, 'School_Name'])\n\nprint(\"The school with the highest average SAT score is\", df_scores.loc[df_scores['Total_Average_Score'] == 2144, 'School_Name'])\n","bb588264":"#top 5 schools with the highest average SAT Score\ndf_scores.sort_values(by=['Total_Average_Score'], ascending = False, inplace = True)\ndf_scores[['Total_Average_Score', 'School_Name','Zip_Code', 'Borough']].head(5)","1d935bc2":"#bottom 5 schools with the lowest average SAT Score\ndf_scores.sort_values(by=['Total_Average_Score'], ascending = True, inplace = True)\ndf_scores[['Total_Average_Score', 'School_Name', 'Zip_Code', 'Borough']].head(5)","4a699d83":"#graph relationship between test scores and % ethnicity\n\nfig, ax = plt.subplots(4, figsize=(15, 15))\nax[0].scatter(x = df_scores['Percent_White'], y = df_scores['Total_Average_Score'], color = '#008fd5')\nax[0].set_xlabel(\"Percentage of White Students\")\nax[0].set_ylabel(\"Total Average SAT Score\")\n\nax[1].scatter(x = df_scores['Percent_Black'], y = df_scores['Total_Average_Score'], color = '#fc4f30')\nax[1].set_xlabel(\"Percentage of Black Students\")\nax[1].set_ylabel(\"Total Average SAT Score\")\n\nax[2].scatter(x = df_scores['Percent_Hispanic'], y = df_scores['Total_Average_Score'], color = '#e5ae37')\nax[2].set_xlabel(\"Percentage of Hispanic Students\")\nax[2].set_ylabel(\"Total Average SAT Score\")\n\nax[3].scatter(x = df_scores['Percent_Asian'], y = df_scores['Total_Average_Score'], color = '#6d904f')\nax[3].set_xlabel(\"Percentage of Asian Students\")\nax[3].set_ylabel(\"Total Average SAT Score\")\n\nplt.show()","ce7728a0":"#correlation matrix\ncorrmat = df_scores.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\n","deddf22a":"#plot Total Average Score Against Student Enrollment\nsns.lmplot(data=df_scores, x='Student_Enrollment', y= 'Total_Average_Score',robust=True,\n           scatter_kws={'s':10, 'alpha':0.5},\n          x_jitter = .1)","4b124bf3":"#plot Total Average Score Against Percent Asian\nsns.lmplot(data=df_scores, x='Percent_Asian', y= 'Total_Average_Score',robust=True,\n           scatter_kws={'s':10, 'alpha':0.5},\n          x_jitter = .1)","42751ebc":"#plot Total Average Score Against Percent Asian\nsns.lmplot(data=df_scores, x='Student_Enrollment', y= 'Percent_Asian', robust=True,\n           scatter_kws={'s':10, 'alpha':0.5},\n          x_jitter = .1)","3f81742d":"#create new column with Total White Students in each school\ndf_scores['Total_White_Students'] = df_scores['Percent_White']\/100 * df_scores['Student_Enrollment'] \n\n#create new column with Total Black Students in each school\ndf_scores['Total_Black_Students'] = df_scores['Percent_Black']\/100 * df_scores['Student_Enrollment'] \n\n#create new column with Total Hispanic Students in each school\ndf_scores['Total_Hispanic_Students'] = df_scores['Percent_Hispanic']\/100 * df_scores['Student_Enrollment'] \n\n#create new column with Total Asian Students in each school\ndf_scores['Total_Asian_Students'] = df_scores['Percent_Asian']\/100 * df_scores['Student_Enrollment'] \n","61a46aca":"#round values to nearest whole number in column dataframe\ndf_scores['Total_White_Students'] = df_scores['Total_White_Students'].round(0)\ndf_scores['Total_Black_Students'] = df_scores['Total_Black_Students'].round(0)\ndf_scores['Total_Hispanic_Students'] = df_scores['Total_Hispanic_Students'].round(0)\ndf_scores['Total_Asian_Students'] = df_scores['Total_Asian_Students'].round(0)\n\ndf_scores.head()","052c7bf2":"#add new column of total students that are white, black, hispanic or asian\nTotal_Students1 = df_scores['Total_White_Students'] + df_scores['Total_Black_Students'] + df_scores['Total_Hispanic_Students'] + df_scores['Total_Asian_Students']\n\n#add new column of students that are not White, Black, Hispanic, or Asian\ndf_scores['Total_Students_(Other)'] = df_scores['Student_Enrollment'] - Total_Students1\n","9697f520":"df_scores.head()","39a6051e":"#drop some unneeded columns for now\ndf_scores.drop(columns = ['School_ID', 'Building_Code', 'State', 'Start_Time', 'End_Time', 'Phone_Number'], inplace = True)\ndf_scores.head()","4f78cb63":"#check new columns\ndf_scores.columns","73c4da4b":"#create new dataframe with just total counts of student enrollment and ethnicities\ndf_pop = df_scores.drop(columns = [ 'Street_Address', 'City', 'Zip_Code',\n                                   'Average_Score_(SAT_Math)','Average_Score_(SAT_Reading)', \n                                   'Average_Score_(SAT_Writing)', 'Total_Average_Score'])","973aea62":"df_pop.head()","b9212529":"#create variable total_student_enrollment to determine total population\ntotal_student_enroll = df_pop['Student_Enrollment'].sum()\nprint(\"The total student enrollment in NYC High Schools is\", total_student_enroll)","c97c54ec":"#similarly, calculate total enrollment for each ethnic population\ntotal_white_enroll= df_pop['Total_White_Students'].sum()\nprint(\"The total white student enrollment in NYC High Schools is\", total_white_enroll)\n\ntotal_black_enroll= df_pop['Total_Black_Students'].sum()\nprint(\"The total black student enrollment in NYC High Schools is\", total_black_enroll)\n\ntotal_hispanic_enroll= df_pop['Total_Hispanic_Students'].sum()\nprint(\"The total hispanic student enrollment in NYC High Schools is\", total_hispanic_enroll)\n\ntotal_asian_enroll= df_pop['Total_Asian_Students'].sum()\nprint(\"The total asian student enrollment in NYC High Schools is\", total_asian_enroll)\n\ntotal_other_enroll= df_pop['Total_Students_(Other)'].sum()\nprint(\"The total other student enrollment in NYC High Schools is\", total_other_enroll)","8bec0263":"#fill NaN values with N\/A (Not Applicable)\n#df_scores.fillna('N\/A', inplace = True)\n#df_scores.head()","9cbddc8b":"#plot piechart of percent ethnicities represented \nplt.style.use(\"ggplot\")\n\nfig = plt.gcf()\nfig.set_size_inches(8,8)\n\nslices = [total_white_enroll, total_black_enroll, total_hispanic_enroll, total_asian_enroll, total_other_enroll]\nlabels = ['White', 'Black', 'Hispanic', 'Asian', 'Other']\nexplode = [.01, .01, .01, .01, .7]\ncolors = ['#008fd5', '#fc4f30', '#e5ae37', '#6d904f', '#808a87']\n\nplt.pie(slices, labels=labels, colors=colors, explode=explode, shadow=True,\n       startangle=0, autopct='%1.1f%%',\n        wedgeprops={'edgecolor': 'black'})\n\nplt.title(\"Percent Ethnicity in NYC High Schools\")\nplt.tight_layout()\nplt.show()\n","6764faa7":"#mean percentage of students who tested for SAT\nprint(\"The mean percentage of NYC high schools who had taken the SAT in 2014-2015 was\",df_scores.Percent_Tested.mean())","ff059343":"#print mean percent tested for each borough group\ndf_scores.groupby('Borough').Percent_Tested.mean()","7c8eda65":"#using agg function, find mean, max and min of % of borough schools who took SAT\ndf_scores.groupby('Borough').Percent_Tested.agg(['mean', 'max', 'min'])","c9c2746a":"#plot percent tested against borough using seaborn\nsns.barplot(x=\"Percent_Tested\", y=\"Borough\", \n            data=df_scores, orient = 'h', palette = \"Set2\", ci = None,\n            edgecolor = \"black\", lw = '0.5',\n            order = ['Manhattan', 'Queens', 'Staten Island', 'Brooklyn', 'Bronx'])\nplt.show()","c65b42aa":"#using agg function, find mean, median, max and min of Total Average Score\ndf_scores.groupby('Borough').Total_Average_Score.agg(['mean', 'median', 'max', 'min'])","c313e6c5":"#how many high schools in Staten Island?\nprint('There are', df_scores['Borough'].value_counts().loc['Staten Island'], 'high schools in Staten Island')","c7b162ce":"nycArea = json.load(open('..\/input\/nyc-zip-code-geojson\/nyc-zip-code.geojson.txt', 'r'))","720c54c4":"#initialize the map around NYC \nnycMap = folium.Map(location= [40.730610, -73.935242], width = '100%', height = '100%',\n                    min_lat=40, max_lat=75, tiles='openstreetmap', zoom_start = 10)\n        \n\n#add the shape of NYC to the map\nfolium.GeoJson(nycArea).add_to(nycMap)\n\n#for each row in the dataset, plot the corresponding latitude and longitude on the map\nfor i,row in df_scores.iterrows():\n    folium.CircleMarker((row.Latitude,row.Longitude), radius=1.5, weight= 1.2, color='red', fill_color='red', fill_opacity=.5).add_to(nycMap)\n\nnycMap\n","e98bf36b":"#initialize the map around NYC \nnycMap = folium.Map(location= [40.730610, -73.935242], width = '100%', height = '100%',\n                    min_lat=40, max_lat=75, tiles='openstreetmap', zoom_start = 9.8)\n\n#draw the choropleth map. These are the key components:\n#geo_data = the geojson.txt file \n#data = df_scores dataframe\n#threshold_scale = labels the color scale and divides values \n#columns = columns used in df. The first needs to line up with the key_on, second is the value used for determining the shading. \n#key_on = specifies which feature to use in the geoJSON file. The input for this always starts with \"feature\".\n\nnycMap.choropleth(\n    geo_data='..\/input\/nyc-zip-code-geojson\/nyc-zip-code.geojson.txt', \n    data=df_scores,\n    threshold_scale = [800, 1200, 1600, 2000, 2400],\n    columns=['Borough', 'Total_Average_Score'],\n    key_on='feature.properties.borough', \n    fill_color='YlGnBu', \n    fill_opacity=.8,\n    line_opacity=1,\n    legend_name = 'Total Average SAT Score')\n\nfor i,row in df_scores.iterrows():\n    folium.CircleMarker((row.Latitude,row.Longitude), radius=1.5, weight= 1.2, color='red', fill_color='', fill_opacity=.5).add_to(nycMap)\n\nnycMap","59df9767":"## Relationship Between Test Scores and Student Ethnicities","98cece27":"## Visualizing the data on a map of NYC","f0e220e1":"## Schools with Highest and Lowest Total Average SAT Score","0daa490e":"Interesting to see that the mean and median average total score in Staten Island is the greatest amongst the 5 boroughs. However, there are less high schools in Staten Island and thus, less of a sample size. ","fa24ab0c":"Similarly, we see that the distribution of the 'Total Average Score' is also right-handed or positively skewed. ","3b6a101a":"Skewness is a measure of symmetry of the distribution. All three (3) scores are right-handed or positively skewed.  \n\nHigher the kurtosis, data sets tend to have longer tails and implies more outliers are present in the dataset. ","c42724ee":"## Which Boroughs of NYC Had The Highest Average SAT Scores?"}}