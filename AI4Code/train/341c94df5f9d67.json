{"cell_type":{"afab8e73":"code","1b4acdca":"code","de718202":"code","481b36de":"code","107a0603":"code","21df6d8c":"code","e9c748af":"code","2fc7f032":"code","efe37405":"code","3eea6afd":"code","40e923aa":"code","7ffe13d8":"code","705ede4b":"code","2c09f4a3":"code","4be4b8bf":"code","973e5788":"code","d64c2ba5":"code","d6e6286e":"code","730a620b":"code","da2f94f3":"code","73891e57":"code","7e1bf5af":"code","3dbb66d0":"code","b3992cad":"code","f47e8d3c":"code","23d0819e":"code","617dac10":"code","b095f894":"markdown"},"source":{"afab8e73":"#import libraries\nimport numpy as np\nimport pandas as pd","1b4acdca":"#reading train_csv file\ntrain_set = pd.read_csv('..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train.csv')","de718202":"# train = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train\/'\n\n# from PIL import Image\n\n# im = Image.open(train+'image1.jpg')\n# width, height = im.size\n# print(width,height)","481b36de":"train_set.head()","107a0603":"# we have 2 columns given image and it's repective class\ntrain_set.columns","21df6d8c":"#get some intution about classes of image\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e9c748af":"#store frequency of image in given class\nlabel_counts = train_set['Class'].value_counts()\n\n#initalize plot figure of given size\nplt.figure(figsize=(12,10))\n\n#draw image of label_counts using seaborn barplot\nsns.barplot(label_counts.index,label_counts.values)\n\n#lable x-axis\nplt.xlabel('Image Class', fontsize =12)\n\n#lable y-axis\nplt.ylabel('frequency', fontsize = 12)\nplt.show()","2fc7f032":"#to read images\nimport cv2\n\n#use to show progress bar\nfrom tqdm import tqdm","efe37405":"# In this dataset we have different shape of image, we fix to 64*64\nimg_size = 224\n\ndef read_img(img_path):\n    # cv2.IMREAD_COLOR to store image in color form(length*width*numberofchannels)\n    img = cv2.imread(img_path,cv2.IMREAD_COLOR)\n    #resize image\n    img = cv2.resize(img, (img_size, img_size))\n        \n    return img","3eea6afd":"#store image in form of list of matrices\ntrain_img = []\n\n# store path of training image folder\ntrain_img_path = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train\/'\n\nfor img_name in tqdm(train_set['Image'].values):\n    train_img.append(read_img(train_img_path + img_name))","40e923aa":"# as pixel values is in between 0-255 so we divide by 255 so that range is in between 0-1\n# as it easier for your cost function to find a local or global minimum and cnn train more efficiently\n\nx_train = np.array(train_img,np.float32)\/255","7ffe13d8":"x_train.shape","705ede4b":"# store classes in form of index\nlabel_list = train_set['Class'].tolist()\nlabel_numeric = {k: v+1 for v, k in enumerate(set(label_list))}\nprint(label_numeric)\n\nprint(label_list[0])\n\n#store it in form of numpy array\ny_train = [label_numeric[k] for k in label_list]\ny_train = np.array(y_train)","2c09f4a3":"from keras.applications import ResNet50\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import backend as K\nfrom keras import applications\nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils import np_utils\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint, CSVLogger, TensorBoard, EarlyStopping, ReduceLROnPlateau\nimport datetime\nimport tensorflow as tf","4be4b8bf":"# convert all classes of data in form of category in binary form \ny_train = to_categorical(y_train)","973e5788":"y_train[0]","d64c2ba5":"base_model = applications.ResNet50(weights='imagenet',\n                                   include_top=False,\n                                   input_shape=(img_size,img_size, 3))","d6e6286e":"# base_model.trainable = True\n# set_trainable = False\n# for layer in base_model.layers:\n#     if layer.name in ['res5c_branch2b', 'res5c_branch2c', 'activation_97']:\n#         set_trainable = True\n#     if set_trainable:\n#         layer.trainable = True\n#     else:\n#         layer.trainable = False\n# layers = [(layer, layer.name, layer.trainable) for layer in base_model.layers]\n# pd.DataFrame(layers, columns=['Layer Type', 'Layer Name', 'Layer Trainable'])","730a620b":"add_model = Sequential()\nadd_model.add(Flatten(input_shape=base_model.output_shape[1:]))\n# add_model.add(Dropout(0.3))\n# add_model.add(Dense(512, activation='relu'))\n# add_model.add(Dropout(0.3))\n# add_model.add(Dense(256, activation='relu'))\nadd_model.add(Dropout(0.3))\nadd_model.add(Dense(128, activation='relu'))\nadd_model.add(Dropout(0.3))\nadd_model.add(Dense(64, activation='relu'))\nadd_model.add(Dropout(0.4))\nadd_model.add(Dense(y_train.shape[1], activation='softmax'))\n\nmodel = Model(inputs=base_model.input, outputs=add_model(base_model.output))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),\n              metrics=['accuracy'])\n\nmodel.summary()","da2f94f3":"batch_size = 32      \nepochs = 100                \n\n# data augmentation\ntrain_datagen = ImageDataGenerator(zoom_range=0.3, rotation_range=50,\n width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, \n horizontal_flip=True, fill_mode=\"nearest\")\n\ntrain_datagen.fit(x_train)","73891e57":"\n# chk_path = 'holiday.h5'\n# log_dir = 'checkpoint\/logs\/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n\n# checkpoint = ModelCheckpoint(filepath=chk_path,\n#                              save_best_only=True,\n#                              verbose=1,\n#                              mode='min',\n#                              moniter='val_loss')\n\n# earlystop = EarlyStopping(monitor='val_loss', \n#                           min_delta=0, \n#                           patience=3, \n#                           verbose=1, \n#                           restore_best_weights=True)\n                        \n# reduce_lr = ReduceLROnPlateau(monitor='val_loss', \n#                               factor=0.2, \n#                               patience=6, \n#                               verbose=1, \n#                               min_delta=0.0001)\n\n# tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1)\n# csv_logger = CSVLogger('training_log')\n\n# callbacks = [checkpoint,reduce_lr,csv_logger]","7e1bf5af":"# train model\nhistory = model.fit_generator(train_datagen.flow(x_train, y_train, batch_size=batch_size),\n                               steps_per_epoch=x_train.shape[0] \/\/ batch_size,\n                               epochs=epochs)","3dbb66d0":"import os.path\n\ntest_images = os.listdir('..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/')\ntest_img = []\nfor image in test_images:\n    test_img.append(read_img('..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/' + image))\n    \n","b3992cad":"# store image in form of matrices and predict the test_img\nx_test = np.array(test_img, np.float32) \/ 255\npredictions = model.predict(x_test)","f47e8d3c":"predictions = np.argmax(predictions, axis=1)\nrev_y = {v:k for k,v in label_numeric.items()}\npred_labels = [rev_y[k] for k in predictions]","23d0819e":"# store the prediction\nsub = pd.DataFrame({'Image': test_images, 'Class': pred_labels})\nsub.to_csv('submission.csv', index = False)\nsub.head()","617dac10":"import gc\ngc.collect()","b095f894":"Load Resnet model"}}