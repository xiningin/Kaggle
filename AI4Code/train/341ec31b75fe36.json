{"cell_type":{"c7cb0bc4":"code","ec250f6a":"code","11e9de89":"code","dedc889c":"code","56516f59":"code","97d70041":"code","26923075":"code","995cdc1f":"code","8c1da44d":"code","be3ee80e":"code","cf5e5c38":"code","ee1ba5f9":"code","657faf69":"code","0ed76d16":"markdown","92b29d4e":"markdown"},"source":{"c7cb0bc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec250f6a":"insurance_df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\ninsurance_df.head()","11e9de89":"insurance_df.isnull().sum()","dedc889c":"plt.figure(figsize=(5,5))\nplt.grid()\nsns.countplot(x='sex', data= insurance_df)\nplt.title(\"Sex\", fontsize=15)\nplt.show()","56516f59":"plt.figure(figsize=(5,5))\nplt.grid()\nsns.countplot(x='smoker', data= insurance_df)\nplt.title(\"Smoker\", fontsize=15)\nplt.show()","97d70041":"plt.figure(figsize=(5,5))\nplt.grid()\nsns.distplot(insurance_df['age'])\nplt.title(\"Age\", fontsize=15)\nplt.show()\n\nprint('The maximum age is {}'.format(insurance_df['age'].max()))\nprint('The minimum age is {}'.format(insurance_df['age'].min()))\nprint('The average age is {}'.format(insurance_df['age'].mean()))\nprint('With an exceptionally high population at age {}'.format(int(insurance_df['age'].mode())))","26923075":"plt.figure(figsize=(5,5))\nplt.grid()\nsns.countplot(x='region', data= insurance_df)\nplt.title(\"Region\", fontsize=15)\nplt.show()","995cdc1f":"plt.figure(figsize=(5,5))\nplt.grid()\nsns.countplot(x='children', data= insurance_df)\nplt.title(\"Children\", fontsize=15)\nplt.show()","8c1da44d":"# displot\nplt.figure(figsize=(5,5))\nplt.grid()\nsns.distplot(insurance_df['bmi'])\nplt.title(\"bmi\", fontsize=15)\nplt.show()\nprint(\"the max bmi is: \",insurance_df['bmi'].max())\nprint(\"the min bmi is: \",insurance_df['bmi'].min())\nprint(\"the average bmi is: \",insurance_df['bmi'].mean())","be3ee80e":"# displot\nplt.figure(figsize=(5,5))\nplt.grid()\nsns.distplot(insurance_df['charges'])\nplt.title(\"charges\", fontsize=15)\nplt.show()\nprint(\"the max charges is: \",insurance_df['charges'].max())\nprint(\"the min charges is: \",insurance_df['charges'].min())\nprint(\"the average charges is: \",insurance_df['charges'].mean())","cf5e5c38":"X = insurance_df.drop('charges',axis=1)\ny = insurance_df['charges']","ee1ba5f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n\n\ncategorical_cols = [cname for cname in X_train.columns if \n                    X_train[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train.columns if \n                X_train[cname].dtype in ['int64', 'float64']]\nprint(categorical_cols)\nprint(numerical_cols)","657faf69":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nRFR = RandomForestRegressor(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nmodel_1 = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', RFR)\n                     ])\n\n# Preprocessing of training data, fit model \nmodel_1.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = model_1.predict(X_test)\n\nprint('Score:',model_1.score(X_test, y_test) * 100)\n\nprint('MAE:', mean_absolute_error(y_test, preds))","0ed76d16":"## EDA","92b29d4e":"## Regression Model Run"}}