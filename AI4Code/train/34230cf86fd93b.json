{"cell_type":{"9435ffc3":"code","6317f5d9":"code","3f2dfa68":"code","441ec945":"code","e500e5ad":"code","7b7f95a3":"code","44b98c98":"code","6503e7fb":"code","4fff3617":"code","005a809e":"code","ce4e0603":"markdown","9afcc687":"markdown","f688738b":"markdown"},"source":{"9435ffc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6317f5d9":"#imports\nimport numpy as np\nfrom lightfm.datasets import fetch_movielens\nfrom lightfm import LightFM\nfrom lightfm.evaluation import precision_at_k,auc_score","3f2dfa68":"data = fetch_movielens(min_rating = 3.0)","441ec945":"data","e500e5ad":"print(repr(data['train']))\nprint(repr(data['test']))","7b7f95a3":"model_0= LightFM(loss='warp')\nmodel_0.fit(data['train'],epochs=70,num_threads=4)","44b98c98":"model_1 = LightFM(loss='bpr')\nmodel_1.fit(data['train'],epochs=70,num_threads=4)","6503e7fb":"test_precision_0 = auc_score(model_0, data['test'],data['train']).mean()\ntest_precision_1 = auc_score(model_1, data['test'],data['train']).mean()\nprint(test_precision_0,test_precision_1)","4fff3617":"def recommendation(model,data,ids):\n    n_users,n_items = data['test'].shape\n    for i in ids:\n        pos = data['item_labels'][data['test'].tocsr()[i].indices]\n        scores = model.predict(i,np.arange(n_items))\n        top_items = data['item_labels'][np.argsort(-scores)]\n        \n        print('User {}'.format(i))\n        \n        print('Known positives:')\n        for x in pos[:3]:\n            print(x)\n        \n        print('Recommended:')\n        for x in top_items[:3]:\n            print(x)\n        print('\\n')","005a809e":"recommendation(model_0,data,[215,489,116])","ce4e0603":"**Training the model**","9afcc687":"**Sample recommendations**","f688738b":"**Fetching the data**"}}