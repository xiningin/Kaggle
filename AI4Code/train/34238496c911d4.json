{"cell_type":{"ca4342fe":"code","95031ef1":"code","3895d5b9":"code","dfd5b9f8":"code","3be351be":"code","35206bf5":"code","7f50bd00":"code","57108b01":"code","89c18757":"code","2f4d6232":"code","3d1a7c53":"code","5f705179":"code","38556bd4":"code","1083bed8":"code","172b9fef":"code","01882a49":"code","8907e535":"code","11f62426":"code","58e05ff1":"code","2ae664f1":"code","ccaa2d51":"code","f95e36c6":"code","2fd34c99":"code","b72190f7":"code","a2f8a347":"code","14f30bc9":"code","8b7276ec":"code","6cbee440":"code","80a76166":"code","49e2a629":"code","e338b83a":"code","b6cd858f":"code","65fdb7cc":"code","8472f561":"code","2e4f73ea":"code","294b4cd8":"code","85e4751c":"code","4b4d1817":"code","8c90be99":"code","9980ae18":"code","e76ce59a":"code","7a6ff52b":"code","99a39d2b":"code","a9f63218":"code","59f48981":"code","2c21aa36":"code","64a5852e":"code","af95cc43":"code","3df9c708":"code","a66d7cb2":"code","bbd690e7":"code","776e7fd2":"code","0a2a2963":"code","18490c00":"code","c1622139":"code","a59a7310":"code","db5a0cce":"code","92ab0dec":"code","8b7cf70d":"markdown","fb7b67ab":"markdown","c2adb4f0":"markdown","cd4749fc":"markdown","c218f941":"markdown","217b1a2a":"markdown","890ced6a":"markdown","6f170e53":"markdown","7a29041f":"markdown","1eefca60":"markdown"},"source":{"ca4342fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","95031ef1":"df = pd.read_csv('..\/input\/iris-dataset\/iris.data.csv', header=None)","3895d5b9":"df.head()","dfd5b9f8":"df.tail()","3be351be":"y = df.iloc[:,4].values","35206bf5":"np.unique(y)","7f50bd00":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()","57108b01":"le = le.fit(y)","89c18757":"y = le.transform(y)","2f4d6232":"y","3d1a7c53":"le.classes_","5f705179":"X = df.iloc[:,[2,3]].values","38556bd4":"X","1083bed8":"X.shape, y.shape","172b9fef":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)","01882a49":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","8907e535":"print('Labels counts in y:', np.bincount(y))\nprint('Labels counts in y_train:', np.bincount(y_train))\nprint('Labels counts in y_test:', np.bincount(y_test))","11f62426":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","58e05ff1":"X_train_std","2ae664f1":"X_test_std","ccaa2d51":"from sklearn.linear_model import Perceptron\n\nppn = Perceptron(max_iter=40, eta0=0.1, random_state=1)\nppn.fit(X_train_std, y_train)","f95e36c6":"y_pred = ppn.predict(X_test_std)","2fd34c99":"y_pred","b72190f7":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","a2f8a347":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","14f30bc9":"from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n\n    # setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], \n                    y=X[y == cl, 1],\n                    alpha=0.8, \n                    c=colors[idx],\n                    marker=markers[idx], \n                    label=cl, \n                    edgecolor='black')\n\n    # highlight test samples\n    if test_idx:\n        # plot all samples\n        X_test, y_test = X[test_idx, :], y[test_idx]\n\n        plt.scatter(X_test[:, 0],\n                    X_test[:, 1],\n                    c='',\n                    edgecolor='black',\n                    alpha=1.0,\n                    linewidth=1,\n                    marker='o',\n                    s=100, \n                    label='test set')","8b7276ec":"X_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))","6cbee440":"X_combined_std.shape, y_combined.shape","80a76166":"y_train.shape, y_test.shape","49e2a629":"plot_decision_regions(X=X_combined_std, y=y_combined,\n                      classifier=ppn, test_idx=range(105, 150))\nplt.xlabel('petal length [standardized]')\nplt.ylabel('petal width [standardized]')\nplt.legend(loc='upper left')\nplt.show()","e338b83a":"x1_min, x1_max = X_combined_std[:, 0].min() - 1, X_combined_std[:, 0].max() + 1\nx2_min, x2_max = X_combined_std[:, 1].min() - 1, X_combined_std[:, 1].max() + 1","b6cd858f":"x1_min, x1_max, x2_min, x2_max","65fdb7cc":"xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),np.arange(x2_min, x2_max, 0.02))","8472f561":"xx1.shape, xx2.shape","2e4f73ea":"nx, ny = (3, 3)\nx = np.linspace(0, 2, nx)\ny = np.linspace(0, 1, ny)","294b4cd8":"x","85e4751c":"y","4b4d1817":"xv, yv = np.meshgrid(x, y)","8c90be99":"xv","9980ae18":"yv","e76ce59a":"xv.ravel()","7a6ff52b":"(np.array([xx1.ravel(), xx2.ravel()]).T).shape","99a39d2b":"from io import StringIO\ncsv_data = \\\n'''A,B,C,D\n1.0,2.0,3.0,4.0\n5.0,6.0,,8.0\n10.0,11.0,12.0,'''\ndf = pd.read_csv(StringIO(csv_data))\ndf","a9f63218":"# remove rows that contain missing values\n\ndf.dropna(axis=0)","59f48981":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","2c21aa36":"# only drop rows where all columns are NaN\n\ndf.dropna(how='all')","64a5852e":"# drop rows that have less than 3 real values \n\ndf.dropna(thresh=4)","af95cc43":"# only drop rows where NaN appear in specific columns (here: 'C')\n\ndf.dropna(subset=['C'])","3df9c708":"# impute missing values via the column mean\n\nfrom sklearn.preprocessing import Imputer\n\nimr = Imputer(missing_values='NaN', strategy='mean', axis=0)\nimr = imr.fit(df.values)\nimputed_data = imr.transform(df.values)\nimputed_data","a66d7cb2":"import pandas as pd\n\ndf = pd.DataFrame([['green', 'M', 10.1, 'class2'],\n                   ['red', 'L', 13.5, 'class1'],\n                   ['blue', 'XL', 15.3, 'class2']])\n\ndf.columns = ['color', 'size', 'price', 'classlabel']\ndf","bbd690e7":"from sklearn.preprocessing import LabelEncoder\nX = df[['color', 'size', 'price']].values\n\ncolor_le_1 = LabelEncoder()\nX[:, 0] = color_le_1.fit_transform(X[:, 0])\nX","776e7fd2":"color_le_2 = LabelEncoder()\nX[:, 1] = color_le_2.fit_transform(X[:, 1])\nX","0a2a2963":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(\n    [('oh_enc', OneHotEncoder(sparse=False), [0, 1]),], remainder='passthrough')","18490c00":"ct.fit_transform(X)","c1622139":"df_wine = pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","a59a7310":"df_wine","db5a0cce":"np.unique(df_wine['type'])","92ab0dec":"from IPython.display import Image\nImage(\"..\/input\/percetron-image\/Perceptron.PNG\")","8b7cf70d":"# Training a perceptron via scikit-learn","fb7b67ab":"# Imputing missing values","c2adb4f0":"# Task 2 Apply different kind of filtering to clean the data","cd4749fc":"# Wine Dataset","c218f941":"# Assignment - Implement a perceptron from scratch and apply it to iris dataset given here.","217b1a2a":"# Part-2 Data Manipulation","890ced6a":"# Task 1 Use Classifiers: Logistic Regression, SVM and Decision Tree from sklearn","6f170e53":"# Eliminating samples or features with missing values","7a29041f":"# Encoding (One Hot Encoding)","1eefca60":"# Part-1 Applying Different Estimators For Simple Classification Problem"}}