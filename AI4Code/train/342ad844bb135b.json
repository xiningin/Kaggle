{"cell_type":{"c70299de":"code","25cf2969":"code","18147930":"code","124de04f":"code","1f5e13d2":"code","054e12be":"code","8bbfddf2":"code","baef9809":"code","8519240d":"code","a4fa7108":"code","3f80dc4f":"code","0392fd27":"code","6e6ab6e7":"code","6bb1bb6e":"code","d065f7b1":"code","65cc4c0f":"code","07415486":"code","244d8461":"code","fe05021e":"code","4375bc7d":"code","3e6fe8d6":"code","614ba657":"code","0811b8ed":"code","662537fc":"code","66e11257":"markdown","a3f66955":"markdown","39922c84":"markdown","ecfeaf5e":"markdown","f1190d63":"markdown","439cc2cc":"markdown","1fbcee79":"markdown"},"source":{"c70299de":"import os\nprint(os.listdir('..\/input\/coronavirus-genome-data\/data'))","25cf2969":"kfoldIndex =0 # 0 ~ 9\nnum_classes=2 \nnum_vectors=31029 # fixed size of the data","18147930":"import numpy as np\ndata = []\ndata = np.genfromtxt('..\/input\/coronavirus-genome-data\/data\/data.csv',delimiter=',')\ndata = np.array(data)\nprint('Dataset:', data.shape)","124de04f":"from sklearn import preprocessing\nstandardScaler = preprocessing.StandardScaler()\ndata = standardScaler.fit_transform(data)","1f5e13d2":"def openVector(filepath):\n    dat = []\n    dat = np.genfromtxt(filepath,delimiter=' ')\n    print(dat.shape)\n    return dat","054e12be":"labels = openVector('..\/input\/coronavirus-genome-data\/data\/labels.csv')\ntrainIndex= openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'train_index.txt')\nvalIndex  = openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'val_index.txt')\ntestIndex = openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'test_index.txt')","8bbfddf2":"trainIndex=trainIndex.astype(int)\nvalIndex=valIndex.astype(int)\ntestIndex=testIndex.astype(int)","baef9809":"import tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical","8519240d":"trainX=[]\ntrainY=[]\nfor i in range (0,len(trainIndex)):\n    trainY.append(labels[trainIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[trainIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[trainIndex[i]][j])\n    trainX.append(temp)\n\ntrainX=np.array(trainX)\ntrainY=np.array(trainY) \nprint(trainX.shape)\nprint(trainY.shape)\n\n\n# one-hot encoding\ntrainY=to_categorical(trainY)","a4fa7108":"print(trainX[0])","3f80dc4f":"print(trainY[0])","0392fd27":"validX=[]\nvalidY=[]\nfor i in range (0,len(valIndex)):\n    validY.append(labels[valIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[valIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[valIndex[i]][j])\n    validX.append(temp)\n\nvalidX=np.array(validX)\nvalidY=np.array(validY) \nprint(validX.shape)\nprint(validY.shape)\n\n# one-hot encoding\nvalidY=to_categorical(validY)","6e6ab6e7":"testX=[]\ntestY=[]\nfor i in range (0,len(testIndex)):\n    testY.append(labels[testIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[testIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[testIndex[i]][j])\n    testX.append(temp)\n\ntestX=np.array(testX)\ntestY=np.array(testY) \nprint(testX.shape)\nprint(testY.shape)\n\n# one-hot encoding\ntestY=to_categorical(testY)","6bb1bb6e":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D","d065f7b1":"trainX = trainX.reshape(-1,1,num_vectors,1)\nvalidX = validX.reshape(-1,1,num_vectors,1)\ninput_shape = (1,num_vectors,1)\nprint(trainX.shape)\nprint(validX.shape)\nprint(input_shape)","65cc4c0f":"model = Sequential()\n\n# 1st Conv layer\nmodel.add(Conv2D(32, (3,3), padding='same', activation='relu', input_shape = input_shape))\nmodel.add(MaxPool2D((2,2), padding='same'))\n# 2nd Conv layer        \nmodel.add(Conv2D(64, (3,3), activation='relu', padding='same'))\nmodel.add(MaxPool2D((2,2), padding='same'))\n# 3rd Conv layer        \nmodel.add(Conv2D(128, (3,3), activation='relu', padding='same'))\nmodel.add(MaxPool2D((2,2), padding='same'))\n# Fully Connected layer        \nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation = 'softmax'))\n\nmodel.summary()","07415486":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam' , metrics = ['accuracy'])","244d8461":"# Train Model\nnum_epochs = 10\nmodel.fit(trainX, trainY, batch_size = 50, epochs = num_epochs, validation_data=(validX, validY));","fe05021e":"# Evaluate Model\ntestX = testX.reshape(-1,1,num_vectors,1)\nscore = model.evaluate(testX, testY, verbose = 0)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","4375bc7d":"from sklearn.metrics import classification_report, confusion_matrix","3e6fe8d6":"predY = model.predict(testX)\ny_pred = np.argmax(predY,axis=1)\ny_actual = np.argmax(testY,axis=1)\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","614ba657":"print(classification_report(y_actual, y_pred, target_names=['SARS-CoV-2', 'others']))","0811b8ed":"import itertools\nimport matplotlib.pyplot as plt\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","662537fc":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = ['SARS-CoV-2', 'others'],\n                      title=\"Confusion Matrix, not Normalized\")","66e11257":"## Confusion Matrix report","a3f66955":"### PCR Amplicons sequencing procedure\n![Gene%20Sequencing.JPG](attachment:Gene%20Sequencing.JPG)","39922c84":"## Confusion Matrix plot","ecfeaf5e":"### coding of the input sequences\n![image.png](attachment:image.png)","f1190d63":"## Dataset: Corona v5.2 data \nfrom https:\/\/github.com\/albertotonda\/deep-learning-coronavirus-genome ","439cc2cc":"# Coronavirus Genome Identification","1fbcee79":"## Build Model"}}