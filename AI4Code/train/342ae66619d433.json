{"cell_type":{"374bde9d":"code","c8438bfc":"code","7fc31d70":"code","7549a0e3":"code","813f63bc":"code","a43e1946":"code","b161ce42":"code","5166d1d0":"code","df079b4d":"code","63dc4de0":"code","55089e64":"code","748d81db":"code","a325607d":"code","3362cc99":"code","1ea28194":"code","bfb1b330":"code","e9873342":"code","8dfd34d0":"code","e59b273b":"code","3483b253":"code","40b3a686":"code","8bace4b5":"code","393945b7":"code","12140411":"code","8f619353":"code","e17872c7":"code","7ecff9be":"code","97f9e878":"code","b4a686a7":"code","6b804077":"code","f6157684":"code","79d50a82":"code","4ff5d6c5":"code","cb4c5525":"code","52a899cb":"code","b9912690":"code","1a8b600f":"code","d66b272c":"markdown","ee2ff4ff":"markdown","2c1f11e5":"markdown","fcfdc973":"markdown","11bd0673":"markdown","9a6361f0":"markdown","9f492751":"markdown","cd4c96a8":"markdown","accadbe9":"markdown","f88d370b":"markdown","b192a625":"markdown","d07011cf":"markdown","03c4815b":"markdown","854800d1":"markdown","d22df245":"markdown","ef3a4916":"markdown","07621e5f":"markdown","ebd4b8a8":"markdown","0d8f2a65":"markdown","ee7ac17b":"markdown","732e419b":"markdown","b49f6d96":"markdown","58282736":"markdown","84262a93":"markdown","7e6370e6":"markdown","aa566189":"markdown"},"source":{"374bde9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c8438bfc":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head(20)","7fc31d70":"data.info()","7549a0e3":"data.isnull().values.any()","813f63bc":"import seaborn as sns","a43e1946":"from pylab import rcParams\nrcParams['figure.figsize']=8,5","b161ce42":"\nimport seaborn as sns\nsns.countplot(data=data, x='Class')","5166d1d0":"classes = data['Class'].value_counts()\nclasses[0],classes[1]\nprint(\"No of Valid cases in the dataset: \",classes[0])\nprint(\"No of Fraud cases in the dataset: \",classes[1])","df079b4d":"y = (classes[0]\/data.shape[0])*100\nz = (classes[1]\/data.shape[0])*100\n\n\nprint(\"Percentage of valid cases: \",y)\nprint(\"Percentage of fraud cases: \",z)","63dc4de0":"import matplotlib.pyplot as plt \nclasses.plot(kind = \"bar\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Number of observartions\")\nplt.title(\"Counts of different classes\")\nplt.show()","55089e64":"# Comparison between fraud and non-fraud cases\nplt.scatter(data.loc[data['Class'] == 0]['V11'], data.loc[data['Class'] == 0]['V12'],label='Class #0', alpha=0.5, linewidth=0.15,c='b')\nplt.scatter(data.loc[data['Class'] == 1]['V11'], data.loc[data['Class'] == 1]['V12'],label='Class #1', alpha=0.5, linewidth=0.15,c='r')\nplt.show()","748d81db":"X = data.drop(['Class'],axis=1)\nY = data['Class']\nprint(X.shape)\nprint(Y.shape)","a325607d":"#creating fraud & normal dataset \n\nfraud=data[data['Class']==1]\nnormal=data[data['Class']==0]","3362cc99":"print(fraud.shape,normal.shape)","1ea28194":"fraud.Amount.describe()","bfb1b330":"normal.Amount.describe()","e9873342":"plot_normal=sns.distplot(normal['Amount'],kde=False,bins=50)\nplot_normal.set(yscale='log')\nplot_normal.set(xlabel='Amount ($)',ylabel='Number of Normal Transactions')","8dfd34d0":"plot_fraud=sns.distplot(fraud['Amount'],kde=False,bins=50)\nplot_fraud.set(xlabel='Amount ($)',ylabel='Number of Fraud Transactions')","e59b273b":"\nsns.scatterplot(data=normal,x='Time',y='Amount')","3483b253":"\nsns.scatterplot(data=fraud, x='Time', y='Amount')","40b3a686":"columns=data.columns.tolist()\n\nstate=np.random.RandomState(42)\n\ncolumns=[c for c in columns if c not in [\"Class\"]]\ntarget = \"Class\"\nX=data[columns]\ny=data[target]\nX_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))\nprint(X.shape)\nprint(y.shape)","8bace4b5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.3)","393945b7":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","12140411":"from imblearn.under_sampling import NearMiss\nnm = NearMiss()\nX_res,y_res=nm.fit_sample(X,y)","8f619353":"X_res.shape,y_res.shape","e17872c7":"import sklearn\n","7ecff9be":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_res,y_res,train_size=0.3)","97f9e878":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","b4a686a7":"from sklearn.linear_model import LogisticRegression\nmodel_lr=LogisticRegression()","6b804077":"model_lr.fit(X_res,y_res)","f6157684":"model_lr.score(X_test, y_test)","79d50a82":"#Making predictions for test set\npredictions = model_lr.predict(X_test)\npredictions[:500]","4ff5d6c5":"X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.3)","cb4c5525":"from sklearn.ensemble import RandomForestClassifier","52a899cb":"model_rf=RandomForestClassifier(n_estimators=50)","b9912690":"model_rf.fit(X_train,y_train)","1a8b600f":"model_rf.score(X_test,y_test)","d66b272c":"# Creating Features and Labels","ee2ff4ff":"# Observations :","2c1f11e5":"Rahul Kasaudhan (1809113082)\n","fcfdc973":"# Handling imbalanced dataset using undersampling (for log_reg","11bd0673":"# Dataset taken from kaggle","9a6361f0":"# Plotting Amount v\/s Transactions for both the transactions type","9f492751":"**Exploratory Data Analysis**","cd4c96a8":"Sankalp\n","accadbe9":"# Plotting Amount v\/s Transactions for both the transactions type","f88d370b":"Shivansh","b192a625":"#checking Do fraudulent transactions occur more often during certain time frame?","d07011cf":"#data.shape[0] returns no of rows.\n#data.shape[1] returns no of columns.","03c4815b":"# #Analysing difference in amount of money in b\/w both the classes","854800d1":"#seems no relation b\/w fraud transaction and certain time period","d22df245":"Random Forest has a 99.94% accurate than Logistic Regression with 94.4% accuracy.\nSo overall Random Forest Method performed much better in determining the fraud cases.","ef3a4916":"# RAndom Forest","07621e5f":"# Logistic Regression","ebd4b8a8":"#clearly for fraud transactions, transactions amount is small as compared to normal ones","0d8f2a65":"\n# Model Prediction","ee7ac17b":"#clearly dataset is imbalanced","732e419b":"#no null values","b49f6d96":"# Checking transaction distribution w\/countplot","58282736":"Here Blue dots represents Valid cases While Red dots represents Fraud cases","84262a93":"Gyanesh Sharma\n","7e6370e6":"# Project","aa566189":"Imbalanced Data Set"}}