{"cell_type":{"09e6ba9d":"code","7a2c09d6":"code","7897044f":"code","293f1f55":"code","26d922dd":"code","f46f1492":"code","434e87df":"code","2d94e6d7":"markdown","727fd4be":"markdown","37706fab":"markdown"},"source":{"09e6ba9d":"###   Import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom keras.models import Sequential, load_model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import layers\nfrom keras.layers import *\nfrom keras.utils import np_utils\n\npd.set_option('display.max_columns', 785)","7a2c09d6":"###   Define a few useful functions\n\ndef reshape_rotate(row):\n    img = row.reshape(28,28)\n    img = np.fliplr(img)\n    img = np.rot90(img)\n    row = img.reshape(784)\n    return row\n\ndef history_plot(history):\n    # Plot training & validation accuracy values\n    plt.figure(figsize=(15,10))\n    \n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    epochs = range(1,len(acc)+1)\n    \n    plt.plot(epochs, acc, 'b')\n    plt.plot(epochs, val_acc, 'r')\n    plt.title('Model accuracy')\n    plt.ylabel('Accuracy')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Val'], loc='upper left')\n    plt.show()","7897044f":"###   Import the dataset and split X and y\n\ndf_train = pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv')\nX = df_train.iloc[:, 1:]\ny = df_train.iloc[:, :1]\n\nprint('Shape of X: ', X.shape)\nprint('Shape of y: ', y.shape)\n\ndel df_train","293f1f55":"### Transform X to values between 0 and 1\n\nX = X.astype('float32')\/255\n\n###   Transform y into a list of 10-dimensional vectors\n\nn_classes = y.nunique()[0]\ny = np_utils.to_categorical(y, n_classes)\n\nprint('Now y looks like:\\n', y[:5])","26d922dd":"###   Split the data intro training and validation data\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=2)\ndel X, y","f46f1492":"model = Sequential([\n    Dense(32, activation='sigmoid', input_shape=(784,)),\n    Dense(10)\n])\n\nmodel.compile(\n    optimizer = tf.keras.optimizers.SGD(learning_rate=1),\n    loss = 'mse',\n    metrics = ['accuracy']\n)\n\nhistory = model.fit(\n    X_train, y_train,\n    validation_data = (X_val, y_val),\n    batch_size =30,\n    epochs = 15,\n)\ndel model","434e87df":"###   Observe the evolution of the NN accuracy\n\nhistory_plot(history)","2d94e6d7":"# Feature Engineering","727fd4be":"# Neural Net","37706fab":"# Setup"}}