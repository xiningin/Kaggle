{"cell_type":{"f2f1e161":"code","1d2863d8":"code","08349bee":"code","0d40c8a7":"code","7cf89dd2":"code","57d74ca2":"code","f4c1bc16":"code","5b992bc9":"code","38fd8071":"code","ffb94053":"code","8d5e7fa1":"code","2b7d7fb4":"markdown","219b2c72":"markdown","b65b505b":"markdown","302b88ed":"markdown","a5d17b05":"markdown"},"source":{"f2f1e161":"# ! pip install -q pytorch-lightning lightning-flash[tabular] -U\n# this is just temporal bypass till the improvemnt is merged and released\n! pip install -q 'https:\/\/github.com\/PyTorchLightning\/lightning-flash\/archive\/refs\/heads\/master.zip#egg=lightning-flash[tabular]'\n! pip install -q \"matplotlib==3.1.1\" \"pandas\" --force-reinstall\n! pip list | grep -E \"lightning|torch|tab\"","1d2863d8":"%matplotlib inline\n\nimport torch\nimport flash\nimport pandas as pd\nfrom flash.tabular import TabularClassificationData, TabularClassifier","08349bee":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndisplay(df_train.head())\ndf_train[\"Survived\"].hist(bins=2)","0d40c8a7":"datamodule = TabularClassificationData.from_csv(\n    categorical_fields=[\"Sex\", \"Embarked\", \"Cabin\"],\n    numerical_fields=[\"Fare\", \"Age\", \"Pclass\", \"SibSp\", \"Parch\"],\n    target_fields=\"Survived\",\n    train_file=\"\/kaggle\/input\/titanic\/train.csv\",\n    val_split=0.1,\n    batch_size=64,\n)","7cf89dd2":"model = TabularClassifier.from_data(\n    datamodule,\n    learning_rate=0.1,\n    optimizer=\"Adam\",\n    lr_scheduler=(\"StepLR\", {\"step_size\": 100}),\n    n_a=8,\n    gamma=0.3,\n)","57d74ca2":"from pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import StochasticWeightAveraging\nfrom pytorch_lightning import seed_everything\n\nseed_everything(7)\nswa = StochasticWeightAveraging(swa_epoch_start=0.6)\nlogger = CSVLogger(save_dir='logs\/')\ntrainer = flash.Trainer(\n    max_epochs=75,\n    gpus=torch.cuda.device_count(),\n    logger=logger,\n    accumulate_grad_batches=4,\n    gradient_clip_val=0.1,\n    auto_lr_find=True,\n)\n\n# ==============================\n\ntrainer.tune(model, datamodule=datamodule, lr_find_kwargs=dict(min_lr=1e-5, max_lr=0.1, num_training=65),)\nprint(f\"Learning Rate: {model.learning_rate}\")\n\n# ==============================\n\ntrainer.fit(model, datamodule=datamodule)","f4c1bc16":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nmetrics = pd.read_csv(f'{trainer.logger.log_dir}\/metrics.csv')\ndisplay(metrics.head())\nmetrics.set_index(\"step\", inplace=True)\ndel metrics[\"epoch\"]\nsns.relplot(data=metrics, kind=\"line\")\nplt.gca().set_ylim([0, 1.25])\nplt.gcf().set_size_inches(10, 5)","5b992bc9":"df_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndisplay(df_test.head())","38fd8071":"predictions = model.predict(\"\/kaggle\/input\/titanic\/test.csv\")\nprint(predictions[0])","ffb94053":"import numpy as np\nassert len(df_test) == len(predictions)\n\ndf_test[\"Survived\"] = np.argmax(predictions, axis=-1)\ndf_test.set_index(\"PassengerId\", inplace=True)\ndf_test[\"Survived\"].hist(bins=5)\n\ndisplay(df_test.head())\ndf_test[[\"Survived\"]].to_csv(\"submission.csv\")","8d5e7fa1":"! head submission.csv","2b7d7fb4":"## 4. Generate predictions from a CSV","219b2c72":"## 2. Build the task","b65b505b":"## 3. Create the trainer and train the model","302b88ed":"## 1. Create the DataModule\n\n### Variable & Definition\n\n- survival: Survival (0 = No, 1 = Yes)\n- pclass: Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)\n- sex: Sex\n- Age: Age in years\n- sibsp: number of siblings \/ spouses aboard the Titanic\n- parch: number of parents \/ children aboard the Titanic\n- ticket: Ticket number\n- fare: Passenger fare\n- cabin: Cabin number\n- embarked: Port of Embarkation","a5d17b05":"# Solving Titanic dataset with Lightning Flash\n\nFlash makes complex AI recipes for over 15 tasks across 7 data domains accessible to all.\nIn a nutshell, Flash is the production grade research framework you always dreamed of but didn't have time to build.\n\nhttps:\/\/github.com\/PyTorchLightning\/lightning-flash"}}