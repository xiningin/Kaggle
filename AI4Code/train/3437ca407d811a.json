{"cell_type":{"8d9089b7":"code","2ec42edf":"code","c5debd2f":"code","596cf0c3":"code","74c25792":"code","025ff647":"code","30179909":"code","1b4d68e2":"code","02ecf105":"code","405184a2":"code","97e76840":"code","3bd5189c":"code","503645eb":"code","30a9f993":"code","9c4d5b9f":"code","83921579":"code","f80ec88c":"code","09ee1c36":"code","85af2161":"code","44635f9c":"markdown"},"source":{"8d9089b7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\ndata = pd.read_csv('\/kaggle\/input\/time-series-starter-dataset\/Month_Value_1.csv')\ndata.head()\ndata.dropna(inplace=True)\ndata['Period'] = pd.to_datetime(data['Period'],format='%d.%m.%Y')","2ec42edf":"x = data.drop(columns=['Sales_quantity','Period'])\ny = data['Sales_quantity']","c5debd2f":"from sklearn.model_selection import train_test_split\nx_train, x_test,y_train, y_test = train_test_split(x, y, test_size=0.2)","596cf0c3":"x_train.columns","74c25792":"from sklearn.linear_model import Ridge\nmodel = Ridge(alpha=0.1)\nmodel.fit(x_train, y_train)","025ff647":"pred = model.predict(x_test)\nfrom sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(pred,y_test))","30179909":"data.index = data.Period\n# Log Transformation\ndata['log'] = np.log(data.Sales_quantity)\n","1b4d68e2":"datax = data.loc[:'2019-12-01']\ndatay = data.loc['2019-12-01':]","02ecf105":"datay","405184a2":"exogenous_features = ['Revenue', 'Average_cost', 'The_average_annual_payroll_of_the_region']","97e76840":"import itertools\nimport warnings\nwarnings.filterwarnings('ignore')\np = d = q = range(0, 5)\n\n# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 6) for x in list(itertools.product(p, d, q))]","3bd5189c":"best_pdq = (0, 1, 1)\nbest_seasonal_pdq = (1, 1, 1, 6)\n","503645eb":"import statsmodels.api as sm\nbest_model = sm.tsa.statespace.SARIMAX(datax['Sales_quantity'],\n                                       exog=datax[exogenous_features],\n                                      order=best_pdq,\n                                        trend='n',\n                                      seasonal_order=best_seasonal_pdq,\n                                      enforce_stationarity=False,\n                                      enforce_invertibility=False,\n                                      suppress_warnings=True)\nbest_results = best_model.fit()","30a9f993":"best_results.plot_diagnostics(figsize=(14,10))","9c4d5b9f":"pred_dynamic = best_results.get_prediction(start=pd.to_datetime('2015-02-01'), exog=datax[exogenous_features])\npred_dynamic_ci = pred_dynamic.conf_int()\n\n# conf_int = confidence Interval","83921579":"result_predicted = pred_dynamic.predicted_mean\nresult_truth = datax['Sales_quantity'].iloc[1:]","f80ec88c":"import matplotlib.pyplot as plt\nplt.plot(result_truth, label='original')\nplt.plot(result_predicted, label='fitted Values')\n# plt.plot(rng['future'], label='Future Values')\nplt.legend(loc='best')\nplt.title('RMSE: %.4f'% np.sqrt(sum((result_predicted-result_truth)**2)\/len(result_truth)))\n","09ee1c36":"x = best_results.forecast(steps=5, exog=datay[exogenous_features])\nplt.plot(result_truth, label='original')\nplt.plot(result_predicted, label='fitted Values')\nplt.plot(x, label='Future Values')\nplt.legend(loc='best')\nplt.title('RMSE: %.4f'% np.sqrt(sum((result_predicted-result_truth)**2)\/len(result_truth)))\n","85af2161":"np.sqrt(mean_squared_error(x,datay['Sales_quantity']))\n# ACtual RMSE with Test Data","44635f9c":"# SARIMAX MODEL"}}