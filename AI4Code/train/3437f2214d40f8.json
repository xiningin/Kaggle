{"cell_type":{"2c25f232":"code","0147567f":"code","3d22aaf0":"code","09abc677":"code","bc809f59":"code","c10086bd":"code","c0fec067":"code","96dc1ce5":"code","8c5887f6":"code","1b92e2de":"code","933eb732":"code","72a13854":"code","0c76e277":"code","e8e59bbf":"code","4aad2ea1":"code","5f1efc53":"code","98ed62ef":"code","fb154e5d":"code","7f5ca368":"code","b25799ea":"code","769ced34":"code","9f4059f5":"code","528c0a2a":"code","804c817f":"markdown"},"source":{"2c25f232":"from  datetime import datetime, timedelta\nimport gc\nimport numpy as np, pandas as pd\nimport lightgbm as lgb","0147567f":"CAL_DTYPES={\"event_name_1\": \"category\", \"event_name_2\": \"category\", \"event_type_1\": \"category\", \n         \"event_type_2\": \"category\", \"weekday\": \"category\", 'wm_yr_wk': 'int16', \"wday\": \"int16\",\n        \"month\": \"int16\", \"year\": \"int16\", \"snap_CA\": \"float32\", 'snap_TX': 'float32', 'snap_WI': 'float32' }\nPRICE_DTYPES = {\"store_id\": \"category\", \"item_id\": \"category\", \"wm_yr_wk\": \"int16\",\"sell_price\":\"float32\" }","3d22aaf0":"pd.options.display.max_columns = 50","09abc677":"h = 28 \nmax_lags = 57\n# tr_last = 1913\ntr_last = 1913 + 28\n# fday = datetime(2016,4, 25)\nfday = datetime(2016,4, 25) + timedelta(days= 28)\nfday,tr_last,max_lags","bc809f59":"def create_dt(is_train = True, nrows = None, first_day = 1200):\n    prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\", dtype = PRICE_DTYPES)\n    for col, col_dtype in PRICE_DTYPES.items():\n        if col_dtype == \"category\":\n            prices[col] = prices[col].cat.codes.astype(\"int16\")\n            prices[col] -= prices[col].min()\n            \n    cal = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\", dtype = CAL_DTYPES)\n    cal[\"date\"] = pd.to_datetime(cal[\"date\"])\n    for col, col_dtype in CAL_DTYPES.items():\n        if col_dtype == \"category\":\n            cal[col] = cal[col].cat.codes.astype(\"int16\")\n            cal[col] -= cal[col].min()\n    \n    start_day = max(1 if is_train  else tr_last-max_lags, first_day)\n    numcols = [f\"d_{day}\" for day in range(start_day,tr_last+1)]\n    catcols = ['id', 'item_id', 'dept_id','store_id', 'cat_id', 'state_id']\n    dtype = {numcol:\"float32\" for numcol in numcols} \n    dtype.update({col: \"category\" for col in catcols if col != \"id\"})\n#     dt = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\", \n#                      nrows = nrows, usecols = catcols + numcols, dtype = dtype)\n    dt = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv\", \n                     nrows = nrows, usecols = catcols + numcols, dtype = dtype)\n    \n    for col in catcols:\n        if col != \"id\":\n            dt[col] = dt[col].cat.codes.astype(\"int16\")\n            dt[col] -= dt[col].min()\n    \n    if not is_train:\n        for day in range(tr_last+1, tr_last+ 28 +1):\n            dt[f\"d_{day}\"] = np.nan\n    \n    dt = pd.melt(dt,\n                  id_vars = catcols,\n                  value_vars = [col for col in dt.columns if col.startswith(\"d_\")],\n                  var_name = \"d\",\n                  value_name = \"sales\")\n    \n    dt = dt.merge(cal, on= \"d\", copy = False)\n    dt = dt.merge(prices, on = [\"store_id\", \"item_id\", \"wm_yr_wk\"], copy = False)\n    \n    return dt","c10086bd":"def create_fea(dt):\n    lags = [7, 28]\n    lag_cols = [f\"lag_{lag}\" for lag in lags ]\n    for lag, lag_col in zip(lags, lag_cols):\n        dt[lag_col] = dt[[\"id\",\"sales\"]].groupby(\"id\")[\"sales\"].shift(lag)\n\n    wins = [7, 28]\n    for win in wins :\n        for lag,lag_col in zip(lags, lag_cols):\n            dt[f\"rmean_{lag}_{win}\"] = dt[[\"id\", lag_col]].groupby(\"id\")[lag_col].transform(lambda x : x.rolling(win).mean())\n\n    \n    \n    date_features = {\n        \n        \"wday\": \"weekday\",\n        \"week\": \"weekofyear\",\n        \"month\": \"month\",\n        \"quarter\": \"quarter\",\n        \"year\": \"year\",\n        \"mday\": \"day\",\n#         \"ime\": \"is_month_end\",\n#         \"ims\": \"is_month_start\",\n    }\n    \n#     dt.drop([\"d\", \"wm_yr_wk\", \"weekday\"], axis=1, inplace = True)\n    \n    for date_feat_name, date_feat_func in date_features.items():\n        if date_feat_name in dt.columns:\n            dt[date_feat_name] = dt[date_feat_name].astype(\"int16\")\n        else:\n            dt[date_feat_name] = getattr(dt[\"date\"].dt, date_feat_func).astype(\"int16\")","c0fec067":"FIRST_DAY = 350","96dc1ce5":"%%time\n\ndf = create_dt(is_train=True, first_day= FIRST_DAY)\ndf.shape","8c5887f6":"df.head()","1b92e2de":"df.info()","933eb732":"%%time\n\ncreate_fea(df)\ndf.shape","72a13854":"df.info()","0c76e277":"df.head()","e8e59bbf":"df.dropna(inplace = True)\ndf.shape","4aad2ea1":"cat_feats = ['item_id', 'dept_id','store_id', 'cat_id', 'state_id'] + [\"event_name_1\", \"event_name_2\", \"event_type_1\", \"event_type_2\"]\nuseless_cols = [\"id\", \"date\", \"sales\",\"d\", \"wm_yr_wk\", \"weekday\"]\ntrain_cols = df.columns[~df.columns.isin(useless_cols)]\nX_train = df[train_cols]\ny_train = df[\"sales\"]","5f1efc53":"%%time\n\nnp.random.seed(777)\n\nfake_valid_inds = np.random.choice(X_train.index.values, 2_000_000, replace = False)\ntrain_inds = np.setdiff1d(X_train.index.values, fake_valid_inds)\ntrain_data = lgb.Dataset(X_train.loc[train_inds] , label = y_train.loc[train_inds], \n                         categorical_feature=cat_feats, free_raw_data=False)\nfake_valid_data = lgb.Dataset(X_train.loc[fake_valid_inds], label = y_train.loc[fake_valid_inds],\n                              categorical_feature=cat_feats,\n                 free_raw_data=False)# This is a random sample, we're not gonna apply any time series train-test-split tricks here!","98ed62ef":"del df, X_train, y_train, fake_valid_inds,train_inds ; gc.collect()","fb154e5d":"params = {\n        \"objective\" : \"poisson\",\n        \"metric\" :\"rmse\",\n        \"force_row_wise\" : True,\n        \"learning_rate\" : 0.075,\n#         \"sub_feature\" : 0.8,\n        \"sub_row\" : 0.75,\n        \"bagging_freq\" : 1,\n        \"lambda_l2\" : 0.1,\n#         \"nthread\" : 4\n        \"metric\": [\"rmse\"],\n    'verbosity': 1,\n    'num_iterations' : 1500,\n    'num_leaves': 128,\n    \"min_data_in_leaf\": 100,\n}","7f5ca368":"%%time\n\nm_lgb = lgb.train(params, train_data, valid_sets = [fake_valid_data], verbose_eval=20) ","b25799ea":"m_lgb.save_model(\"model.lgb\")","769ced34":"%%time\n# alphas = [1.028, 1.023, 1.018]\nalphas = [1.023, 1.018, 1.013] # We decrease alphas a little bit because we thought Trend May < Trend April\nweights = [1\/len(alphas)]*len(alphas)\nsub = 0.\n\nfor icount, (alpha, weight) in enumerate(zip(alphas, weights)):\n\n    te = create_dt(False)\n    cols = [f\"F{i}\" for i in range(1,29)]\n\n    for tdelta in range(0, 28):\n        day = fday + timedelta(days=tdelta)\n        print(tdelta, day)\n        tst = te[(te.date >= day - timedelta(days=max_lags)) & (te.date <= day)].copy()\n        create_fea(tst)\n        tst = tst.loc[tst.date == day , train_cols]\n        te.loc[te.date == day, \"sales\"] = alpha*m_lgb.predict(tst) # magic multiplier by kyakovlev\n\n\n\n    te_sub = te.loc[te.date >= fday, [\"id\", \"sales\"]].copy()\n    te_sub[\"F\"] = [f\"F{rank}\" for rank in te_sub.groupby(\"id\")[\"id\"].cumcount()+1]\n    te_sub = te_sub.set_index([\"id\", \"F\" ]).unstack()[\"sales\"][cols].reset_index()\n    te_sub.fillna(0., inplace = True)\n    te_sub.sort_values(\"id\", inplace = True)\n    te_sub.reset_index(drop=True, inplace = True)\n    te_sub.to_csv(f\"submission_{icount}.csv\",index=False)\n    if icount == 0 :\n        sub = te_sub\n        sub[cols] *= weight\n    else:\n        sub[cols] += te_sub[cols]*weight\n    print(icount, alpha, weight)\n\n\n# sub2 = sub.copy()\n# sub2[\"id\"] = sub2[\"id\"].str.replace(\"validation$\", \"evaluation\")\n\nsub2 = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv\", usecols = [\"id\"]+ [f\"d_{i}\" for i in range(1914, 1914+28)])\nsub2.rename(columns = {f\"d_{i}\": f'F{i-1913}' for i in range(1914, 1914+28)}, inplace=True)\nsub2[\"id\"] = sub2[\"id\"].str.replace(\"evaluation\", \"validation\")\n\nsub = pd.concat([sub, sub2], axis=0, sort=False)\nsub.to_csv(\"submission.csv\",index=False)\nprint(sub.shape)","9f4059f5":"sub.head(10)","528c0a2a":"# sub.id.nunique(), sub[\"id\"].str.contains(\"validation$\").sum()\nsub.id.nunique(), sub[\"id\"].str.contains(\"evaluation$\").sum()","804c817f":"# Changes\n* change **tr_last** form  *1913* to *1941*\n* loads **sales_train_evaluation** instead of **sales_train_validation**\n* Fix submision ids\n* Decrease **alphas** a little bit"}}