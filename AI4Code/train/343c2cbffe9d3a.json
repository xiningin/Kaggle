{"cell_type":{"68c69597":"code","6a223550":"code","ad33b1e4":"code","a473ba70":"code","8c73e093":"code","947e1e46":"code","51571254":"code","b8966198":"code","4b7ff0b0":"code","7446d4d8":"code","680613ec":"code","d72656b0":"code","d4b15e6e":"code","50fb6294":"code","1d2f1e0a":"code","1ffe4d83":"code","910bc4d8":"code","8a6a51b1":"code","0cb2072f":"code","7150d9a9":"code","6fe99c77":"code","8184a668":"code","7f541994":"code","c1fe421e":"code","00417ed0":"code","8f5851d3":"code","24a3ee80":"code","3cd5c38e":"code","d3a3486e":"code","ae1e6979":"code","4159e084":"code","f5424a88":"code","c3eecb8e":"code","eb7e3721":"markdown","6b7a4137":"markdown","3bbb8504":"markdown","c8449fa6":"markdown","d4ff8fdd":"markdown","2818c703":"markdown","d05908b6":"markdown","601ad645":"markdown","f0e4caa5":"markdown","f1d356db":"markdown","3dba102e":"markdown","b0acff85":"markdown","d83942bd":"markdown","7fee8816":"markdown","ada738d3":"markdown","65fc660f":"markdown","27dbf79e":"markdown","78e65c80":"markdown","9822c063":"markdown","a21f078b":"markdown","555ff598":"markdown","56e527b7":"markdown","9d7f01aa":"markdown","deb5f74c":"markdown","077fcbfb":"markdown","7d671be6":"markdown"},"source":{"68c69597":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gc\nimport cv2\nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6a223550":"def rle2mask(rle, imgshape = (256,1600)):\n    width = imgshape[0]\n    height= imgshape[1]\n    \n    mask= np.zeros( width*height ).astype(np.uint8)\n    \n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        mask[int(start):int(start+lengths[index])] = 1\n        current_position += lengths[index]\n        \n    return np.flipud( np.rot90( mask.reshape(height, width), k=1 ) )","ad33b1e4":"path = '..\/input\/severstal-steel-defect-detection\/'","a473ba70":"tr = pd.read_csv(path + 'train.csv')\nprint(tr.shape)\ntr.head()","8c73e093":"df = tr[tr['EncodedPixels'].notnull()]\ndf['ClassId'] = df['ImageId_ClassId'].apply(lambda x: x.split('_')[1])\ndf['ImageId'] = df['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\nprint(len(df))\ndf.head()","947e1e46":"def ShowImgMask(df, sub = 'train',  columns = 1, rows = 4):\n    fig = plt.figure(figsize=(20,columns*rows+6))\n    for i in range(1,columns*rows+1):\n        fn = df['ImageId_ClassId'].str[:-2].iloc[i]\n        fig.add_subplot(rows, columns, i).set_title(fn)\n        img = cv2.imread( path + sub + '_images\/'+fn )\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        mask = rle2mask(df['EncodedPixels'].iloc[i])\n        contours, _ = cv2.findContours(mask, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\n        for i in range(0, len(contours)):\n            cv2.polylines(img, contours[i], True, 0, 2)\n        plt.imshow(img)\n    plt.show()","51571254":"ShowImgMask(df)","b8966198":"def GetLftRgtBl(img_nm, sub = 'train'):\n    img = plt.imread(path + sub + '_images\/' + img_nm)[:,:,0][:1][0]\n    \n    bgn_lf = 0\n    for i, x in enumerate(img):\n        if x > 15:\n            bgn_lf = i\n            break\n    \n    bgn_rg = 0\n    for i, x in reversed(list(enumerate(img))):\n        if x > 15:\n            bgn_rg = i\n            break\n    return bgn_lf, bgn_rg","4b7ff0b0":"%%time\ndf_cut2 = df.copy(deep=True).reset_index(drop=True)\ndf_cut2['BgnLeft'] = 0\ndf_cut2['BgnRigth'] = 0\ndf_cut2.head()\n\nfor i, row in df_cut2.iterrows():    \n    df_cut2.at[i,'BgnLeft'], df_cut2.at[i,'BgnRigth'] = GetLftRgtBl(row['ImageId'])","7446d4d8":"df_cut2.head(10)","680613ec":"df_bl2 = df_cut2[(df_cut2['BgnLeft'] > 0) | (df_cut2['BgnRigth']  < 1599)]\nprint(len(df_bl2))                                             \ndf_bl2.head()","d72656b0":"ShowImgMask(df_bl2)","d4b15e6e":"def ShowDistBlc(df_black, df_all):\n    lbls = ('has_black_area', 'no_black_area')\n    y_pos = np.arange(len(lbls))\n    cnt = [len(df_black),(len(df_all) - len(df_black))]\n    print(cnt)\n\n    plt.bar(y_pos, cnt, align='center', alpha=0.5)\n    plt.xticks(y_pos, lbls)\n    plt.ylabel('Count')\n    plt.title('Distribution of images with black areas and without')\n\n    plt.show()","50fb6294":"ShowDistBlc(df_bl2, df)","1d2f1e0a":"def ShowDist(df, isblk = ''):\n    lbls = ('1', '2', '3', '4')\n    y_pos = np.arange(len(lbls))\n\n    cnt = df.groupby('ClassId')['ImageId_ClassId'].count()\n    print(cnt)\n\n    plt.bar(y_pos, cnt, align='center', alpha=0.5)\n    plt.xticks(y_pos, lbls)\n    plt.ylabel('Count')\n    plt.title('Distribution of deffect classes among images with ' + isblk +' black areas')\n\n    plt.show()","1ffe4d83":"ShowDist(df_bl2)","910bc4d8":"# No black\n\ndf_no_bl = df_cut2[~df_cut2.index.isin(df_bl2.index)]\nShowDist(df_no_bl, 'no')","8a6a51b1":"def ShowPlt(side):                    \n    fig, axs = plt.subplots(1, 4, figsize=(10, 5))\n    axs = axs.ravel()\n\n    for i in range(4):\n        df1 = df_bl2[df_bl2['ClassId'] == str(i + 1)]\n\n        if side == 0: # Rigth side area\n            df_rgt =df1[df1['BgnLeft'] == 0]\n            cnt1 = 1599 - df_rgt['BgnRigth']\n        else: # Left side area\n            df_rgt =df1[df1['BgnRigth'] == 1599]\n            cnt1 = 0 + df_rgt['BgnLeft']\n\n        axs[i].hist(cnt1)\n        axs[i].set_title('id = ' + str(i + 1))\n\n    axs[0].set_xlabel('Length of black area')\n    axs[0].set_ylabel('Count')\n    plt.show()","0cb2072f":"ShowPlt(side=0)","7150d9a9":"ShowPlt(side=1)","6fe99c77":"files = []\nfor file in os.listdir(path + 'test_images\/'):\n    files.append(file)\n\ndf_tst = pd.DataFrame(files, columns=['ImageId'])\nprint(len(df_tst))\ndf_tst.head()","8184a668":"%%time\ndf_tst2 = df_tst.copy(deep=True).reset_index(drop=True)\ndf_tst2['BgnLeft'] = 0\ndf_tst2['BgnRigth'] = 0\ndf_tst2.head()\n\nfor i, row in df_tst2.iterrows():    \n    df_tst2.at[i,'BgnLeft'], df_tst2.at[i,'BgnRigth'] = GetLftRgtBl(row[0], 'test')","7f541994":"df_tst2.head()","c1fe421e":"df_tst_bl2 = df_tst2[(df_tst2['BgnLeft'] > 0) | (df_tst2['BgnRigth']  < 1599)]\nprint(len(df_tst_bl2))                                             \ndf_tst_bl2.head()","00417ed0":"ShowDistBlc(df_tst_bl2, df_tst)","8f5851d3":"plt.imshow(plt.imread(path + 'test_images\/' + df_tst_bl2.iloc[4]['ImageId']))","24a3ee80":"def ShowLenDistTst(side):\n    \n    if side == 0: # Rigth side black area\n        df_rgt = df_tst_bl2[df_tst_bl2['BgnLeft'] == 0]\n        cnt = 1599 - df_rgt['BgnRigth']\n    elif side == 1: # Left side black area\n        df_rgt =df_tst_bl2[df_tst_bl2['BgnRigth'] == 1599]\n        cnt = 0 + df_rgt['BgnLeft']    \n\n    plt.hist(cnt)\n    plt.xlabel('Length of black areas')\n    plt.ylabel('Count')\n    plt.title('Distribution of lengths of black areas')\n\n    plt.show()","3cd5c38e":"ShowLenDistTst(0)","d3a3486e":"ShowLenDistTst(1)","ae1e6979":"ShowPlt(1)","4159e084":"df_tst_bl2.head()","f5424a88":"df_lft_67 = df_tst_bl2[(df_tst_bl2['BgnRigth'] == 1599) & \n                       (df_tst_bl2['BgnLeft'] > 590) &\n                       (df_tst_bl2['BgnLeft'] < 710)]\n\n\nprint(len(df_lft_67))\ndf_lft_67.head()","c3eecb8e":"plt.figure(figsize=(20, 2))\nplt.imshow(plt.imread(path + 'test_images\/' + df_lft_67.iloc[4]['ImageId']))\nplt.show()","eb7e3721":"#### As we see if image have left side black area and it lenght in range between 600 to 700, than with high probability that image will contain deffect 1.\n#### Let's check this","6b7a4137":"#### Left side black area","3bbb8504":"### As we can see, almost all images with defect 2 have black areas. This is a useful discovery! ","c8449fa6":"#### Left side black area","d4ff8fdd":"#### Further research will continue... :)\n#### Upvote, if you think this kernel was useful.","2818c703":"### Fing images with black areas","d05908b6":"### Distribution of black areas sizes","601ad645":"### Show some images with masks","f0e4caa5":"### Make some predictions","f1d356db":"## Analyse test images","3dba102e":"### In this kernel I will analyse images with black areas and hope to find some dependencies","b0acff85":"### Distribution of deffect classes among images with black areas","d83942bd":"#### Show some image","7fee8816":"### Distribution of deffect classes among images with no black areas","ada738d3":"### Read train data","65fc660f":"### Distribution of black areas sizes","27dbf79e":"#### At first glance, there are certain dependencies that a defect belongs to a certain class, depending on the properties of black areas.\n#### These dependencies, provided they are same in the test dataset, can be used to adjust model predictions.","78e65c80":"### Distribution of images with black areas and without","9822c063":"### Fing images with black areas","a21f078b":"### Read data","555ff598":"#### Let's see again on train disribution of left side black areas","56e527b7":"### Show distribution of images that have and do not have black areas","9d7f01aa":"#### Rigth side black area","deb5f74c":"### Show distribution of images that have and do not have black areas","077fcbfb":"#### Rigth side black area","7d671be6":"### As we can see, in test dataset a lot of images have black areas"}}