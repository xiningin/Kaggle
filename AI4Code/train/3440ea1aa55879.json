{"cell_type":{"3373c68d":"code","e6b42cc2":"code","5dde3172":"code","81e68c42":"code","3f0418db":"code","28b211ed":"code","1ff5364a":"code","3c1d8b12":"code","23ffb6b8":"code","dded72c1":"code","2152735a":"code","a04e8329":"code","df7283d7":"code","5a4a31d9":"code","2ebb401b":"code","b403f147":"code","9b341fe9":"code","7a2d586c":"code","35c7b9e3":"code","3a352f70":"code","6a15d870":"code","00e42620":"code","b566cced":"code","7c40cf7c":"code","9911ab76":"code","739b4563":"markdown","c4e5e8d8":"markdown","dd8faeac":"markdown","1395d558":"markdown","549fd00e":"markdown","2f9d2bc8":"markdown","a0563037":"markdown"},"source":{"3373c68d":"# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.ml_intermediate.ex4 import *\nprint(\"Setup Complete\")","e6b42cc2":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n","5dde3172":"# Read the data\nX_full = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/test.csv', index_col='Id')\n","81e68c42":"\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n","3f0418db":"# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n","28b211ed":"# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n","1ff5364a":"\n\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n","3c1d8b12":"# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","23ffb6b8":"X_train.head()","dded72c1":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","2152735a":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n","a04e8329":"# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","df7283d7":"# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n","5a4a31d9":"\n# Define model\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\n","2ebb401b":"# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n","b403f147":"\n\n\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))","9b341fe9":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant') # Your code here\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n","7a2d586c":"\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = RandomForestRegressor(max_depth=15, max_features=5, min_samples_leaf=3,\n                      min_samples_split=9, n_estimators=1000, random_state=41)\n\n\n","35c7b9e3":"# Define model\nmodel = RandomForestRegressor(max_depth=20, max_features=20, min_samples_leaf=1,\n                       min_samples_split=20, n_estimators=5000, random_state=32)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n","3a352f70":"# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","6a15d870":"\n\n\n\n# Preprocessing of test data, fit model\npreds_test = my_pipeline.predict(X_test) # Your code here\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\n\noutput.to_csv('High Depth Added.csv', index=False)\n\n","00e42620":"# Line below will give you a hint\n#step_1.b.hint()","b566cced":"# Preprocessing of test data, fit model\npreds_test = my_pipeline.predict(X_test) # Your code here\n\n# Check your answer\nstep_2.check()","7c40cf7c":"# Lines below will give you a hint or solution code\n#step_2.hint()\n#step_2.solution()","9911ab76":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('Final_submission.csv', index=False)","739b4563":"Run the next code cell without changes to save your results to a CSV file that can be submitted directly to the competition.","c4e5e8d8":"<img height=100 width=100% src=\"https:\/\/i.imgur.com\/lTJVG4e.png\" \/>\n<!-- [Housing Prices Competition for Kaggle Learn Users](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course).  -->\n\n<!-- ![Ames Housing dataset image](https:\/\/i.imgur.com\/lTJVG4e.png) -->\n\n<!-- Run the next code cell without changes to load the training and validation sets in `X_train`, `X_valid`, `y_train`, and `y_valid`.  The test set is loaded in `X_test`. -->","dd8faeac":"The next code cell uses code from the tutorial to preprocess the data and train a model.  Run this code without changes.","1395d558":"# Step 2: Generate test predictions\n\nNow, you'll use your trained model to generate predictions with the test data.","549fd00e":"### Part B\n\nRun the code cell below without changes.\n\nTo pass this step, you need to have defined a pipeline in **Part A** that achieves lower MAE than the code above.  You're encouraged to take your time here and try out many different approaches, to see how low you can get the MAE!  (_If your code does not pass, please amend the preprocessing steps and model in Part A._)","2f9d2bc8":"<center> <h1>\ud83c\udfe1 Pipeline House Price Prediction <\/h1><\/center>","a0563037":"\n# Step 1: Improve the performance\n\n### Part A\n\nNow, it's your turn!  In the code cell below, define your own preprocessing steps and random forest model.  Fill in values for the following variables:\n- `numerical_transformer`\n- `categorical_transformer`\n- `model`\n\nTo pass this part of the exercise, you need only define valid preprocessing steps and a random forest model."}}