{"cell_type":{"18ec0d82":"code","f1d89b02":"code","2ce79784":"code","2b624ce7":"code","3883d63b":"code","9ab46662":"code","633df77f":"code","a67ff757":"code","3d7de65c":"code","812a2731":"code","667fe86c":"code","a1e676ad":"code","85152bce":"code","2d96217f":"code","52e64745":"code","a2e12d23":"code","0ac3c7b6":"code","b2956d5c":"code","2a2a6c13":"code","77ceeed0":"code","86a5e447":"code","157f9cf9":"code","05249caf":"code","f2684efd":"code","a33cb1c0":"markdown","b18fa89f":"markdown","743b4872":"markdown","8508b199":"markdown","5d590e76":"markdown","c88de9f4":"markdown","58269ba7":"markdown","3e66a8a7":"markdown","de6243a6":"markdown"},"source":{"18ec0d82":"import pandas as pd\npokemon = pd.read_csv(\"..\/input\/pokemon\/pokemon.csv\")\n\npokemon.head()","f1d89b02":"pokemon.isna().sum()","2ce79784":"pokemon.info()","2b624ce7":"pokemon.describe()","3883d63b":"count = 0\nfor data in pokemon.is_legendary:\n    if data == 1:\n        count += 1\n\nprint(count)","9ab46662":"y = pokemon['is_legendary']\nX = pokemon\nX = X.drop(columns=['is_legendary'])\nX = X.drop(columns=['type2'])\nX = X.drop(columns=['name'])\nX = X.drop(columns=['japanese_name'])\nX = X.drop(columns=['abilities'])\nX = X.drop(columns=['pokedex_number'])\n\n# This line can be commented out to run all X variables\nX = X[['attack', 'sp_attack', 'sp_defense', 'speed', 'weight_kg', 'percentage_male', 'height_m', 'defense', 'base_egg_steps', 'type1']]\nX = pokemon[['attack', 'speed', 'type1','weight_kg', 'percentage_male', 'height_m']]\nX.head(25)","633df77f":"X.isna().sum()","a67ff757":"average_height = pokemon.height_m.mean()\naverage_weight = pokemon.weight_kg.mean()\nnum = 50\n\nX.height_m.fillna(average_height, inplace=True)\nX.weight_kg.fillna(average_weight, inplace=True)\nX.percentage_male.fillna(num, inplace=True)","3d7de65c":"X.isna().sum()","812a2731":"X = pd.get_dummies(X, drop_first=True)\nX.head()","667fe86c":"X.corr()","a1e676ad":"from sklearn import preprocessing\n\ncols = X.columns\nx = X.values \nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\nX = pd.DataFrame(x_scaled, index=X.index, columns=cols)\n","85152bce":"X.head()","2d96217f":"y.head()","52e64745":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n","a2e12d23":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(random_state=0)\n\nlogreg.fit(X_train,y_train)","0ac3c7b6":"predictions = logreg.predict(X_test)\n","b2956d5c":"\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(y_test, predictions)","2a2a6c13":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, predictions)","77ceeed0":"X.info()","86a5e447":"from sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom scipy import stats\n\ntest = X['attack']\n\nX2 = sm.add_constant(test)\nest = sm.OLS(y, X2)\nest2 = est.fit()\nprint(est2.summary())","157f9cf9":"from sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom scipy import stats\n\ntest = pokemon[['attack', 'speed']]\n\nX2 = sm.add_constant(test)\nest = sm.OLS(y, X2)\nest2 = est.fit()\nprint(est2.summary())","05249caf":"from sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom scipy import stats\n\ntest = X[['speed']]\n#test = X[['attack', 'speed', 'percentage_male', 'defense', 'sp_defense', 'base_egg_steps' ]]\ntest = pokemon[['speed', 'base_egg_steps']]\n\nX2 = sm.add_constant(test)\nest = sm.OLS(y, X2)\nest2 = est.fit()\nprint(est2.summary())","f2684efd":"X_train, X_test, y_train, y_test = train_test_split(test, y, test_size=0.25, random_state=0)\n\nlogreg1 = LogisticRegression(random_state=0)\n\nlogreg1.fit(X_train,y_train)\n\npredictions = logreg1.predict(X_test)\n\naccuracy_score(y_test, predictions)","a33cb1c0":"# Here's what we are going to be doing this class\n- Import the dataset\n- Count null values\n- Look for any null y values and drop those rows\n- Drop all columns that don't matter of the bat, like pokedex_number and name\n- Fill null values\n- Make dummy variables","b18fa89f":"\n\n## Split X and y, and delete all non important columns","743b4872":"\n\n   ## Check to see what null values need filled in our X","8508b199":"\n\n## Normalize the data from 0-1","5d590e76":"\n\n## Count how many legendary Pokemon there are","c88de9f4":"## Get dummy variables for any strings","58269ba7":"\n\n## Make sure they are filled:","3e66a8a7":"---\n# We are going to stop here for this class. Next class we will do the linear regression stuff below.","de6243a6":"\n\n## Get averages for height and weight, then fill them in the missing columns"}}