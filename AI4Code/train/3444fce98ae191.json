{"cell_type":{"924d04b9":"code","b6ac3d53":"code","112df084":"code","e8dbd993":"code","0b66a5ba":"code","45a9f20c":"code","9dce691c":"markdown","0c9934d2":"markdown","6dc4012e":"markdown","ce2fd343":"markdown","7a667f16":"markdown","f70b01bf":"markdown"},"source":{"924d04b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6ac3d53":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.tree import DecisionTreeRegressor","112df084":"df = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n\nplt.scatter(df.lumbar_lordosis_angle,df.sacral_slope)\nplt.xlabel(\"lumbar lordosis\")\nplt.ylabel(\"sacral slope\")\nplt.show()","e8dbd993":"x = df.iloc[:,2].values.reshape(-1,1)\ny = df.iloc[:,3].values.reshape(-1,1)","0b66a5ba":"dtree_reg = DecisionTreeRegressor()\ndtree_reg.fit(x,y)\n\nprediction = dtree_reg.predict([[30]])\nprint (\"prediction: \",prediction)","45a9f20c":"x_ = np.arange(min(x),max(x),10).reshape(-1,1)\ny_head = dtree_reg.predict(x_)\nplt.scatter(x,y,color=\"red\")\nplt.plot(x_,y_head,color = \"green\")\nplt.xlabel(\"lumbar lordosis\")\nplt.ylabel(\"sacral slope\")\nplt.show()","9dce691c":"# 1-Decision Tree Regression\n![1.png](attachment:1.png)\n*In this model, a value of y dependent on x1 and x2 is obtained. Each splited region shown in figure-1 is named terminal leaf. Firstly, data is splited according to information entropy formula and than prediction is made. An example of the split process is given in figure 2. \nIn the example given in Figure 2, the parts with constant numbers were found by taking the average of the y values in that region. In this figure the average y values are randomly given.*\n","0c9934d2":"* Visualize","6dc4012e":"* Fit and prediction","ce2fd343":"* Import Library","7a667f16":"* Import and plot data","f70b01bf":"* Define x and y"}}