{"cell_type":{"5a4ef8af":"code","f12eca04":"code","45d2dcbd":"code","1621719c":"code","cda1363a":"code","0dbecfa1":"code","90bc7224":"code","02619509":"code","4cd3ccb8":"code","021cbfe7":"code","b6fe49a9":"code","c66d35a9":"code","599bbdf3":"code","942df114":"code","8081eb17":"code","36f837af":"code","47b91990":"code","19442d83":"code","06d5c82f":"code","1f3e338e":"code","1ce89574":"code","905f0b0c":"code","cca79bcc":"markdown","74fcc179":"markdown"},"source":{"5a4ef8af":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt","f12eca04":"!pip install kats","45d2dcbd":"from kats.consts import TimeSeriesData\nbitcoin=pd.read_csv('..\/input\/bitcoin\/BTC-USD.csv')\nbitcoin.head()","1621719c":"# Sort the data based on Date\nbitcoin = bitcoin.sort_values(by = ['Date'])\nbitcoin.head()","cda1363a":"# missing value \nbitcoin[pd.isnull(bitcoin).any(axis=1)]","0dbecfa1":"bitcoin=bitcoin.dropna()\nbitcoin[pd.isnull(bitcoin).any(axis=1)]","90bc7224":"def trading_window(data):\n    n=1\n    data['Target'] = data[['Close']].shift(-n)\n    return data","02619509":"bitcoin=bitcoin[['Date','Close','Volume']]\nbitcoin.head()","4cd3ccb8":"bitcoin['Date']=bitcoin['Date'].apply(pd.to_datetime)\nbitcoin.head()","021cbfe7":"bitcoin = bitcoin.rename(columns = {\"Date\":\"time\"})\nbitcoin.head()","b6fe49a9":"bitcoin=trading_window(bitcoin)\nbitcoin.head()","c66d35a9":"bitcoin=bitcoin[:-1]\nbitcoin.head()","599bbdf3":"target=bitcoin[['time','Target']]\ntarget.head()","942df114":"target_ts = TimeSeriesData(target)\nprint(type(target_ts))","8081eb17":"%matplotlib inline\n\n# Must pass the name of the value columns to plot\ntarget_ts.plot(cols=['Target'])\nplt.grid()\n","36f837af":"target_ts.to_dataframe().head()","47b91990":"# import the param and model classes for Prophet model\nfrom kats.models.prophet import ProphetModel, ProphetParams\n\n# create a model param instance\nparams = ProphetParams(seasonality_mode='multiplicative') # additive mode gives worse results\n\n# create a prophet model instance\nm = ProphetModel(target_ts, params)\n\n# fit model simply by calling m.fit()\nm.fit()\n\n# make prediction for next 360 days\nfcst = m.predict(steps=360, freq=\"D\")","19442d83":"m.plot()","06d5c82f":"fcst.head()","1f3e338e":"fcst.plot(x='time',y=['fcst','fcst_lower','fcst_upper'],figsize=(20,5))\nplt.legend()\nplt.grid()","1ce89574":"# Initiate feature extraction class\nfrom kats.tsfeatures.tsfeatures import TsFeatures\ntsFeatures = TsFeatures()","905f0b0c":"features_target = TsFeatures().transform(target_ts)\nfeatures_target","cca79bcc":"**Kats (Kits to Analyze Time Series)** is a light-weight, easy-to-use, extenable, and generalizable framework to perform time series analysis in Python. Time series analysis is an essential component of data science and engineering work. Kats aims to provide a one-stop shop for techniques for univariate and multivariate time series","74fcc179":"# Feature Extraction with Kats"}}