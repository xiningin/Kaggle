{"cell_type":{"f0c20b1e":"code","00249204":"code","d1ccc10a":"code","90430bfc":"code","cc4d10ac":"code","a1dbe738":"code","8d8031bd":"code","1d53790a":"code","61f6a17a":"code","f0f5b9f7":"code","2c3d8795":"code","8a6fea02":"code","e4095190":"code","77eab7ba":"code","241cbafb":"code","817c0e31":"markdown","dcd11eb2":"markdown","a7d112fe":"markdown","620ff525":"markdown","5a4d977b":"markdown","d0d79e41":"markdown","5920f85e":"markdown","3b0dcd11":"markdown","9d6c4165":"markdown"},"source":{"f0c20b1e":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(action='ignore', category=UserWarning)\n\ntrain_dataset  = pd.read_csv('\/kaggle\/input\/ml-competition-on-cryptocurrency-market-data\/dataset\/train_dataset.csv', index_col = 'date')\nvalidation_dataset  = pd.read_csv('\/kaggle\/input\/ml-competition-on-cryptocurrency-market-data\/dataset\/validation_dataset.csv', index_col = 'date')\n","00249204":"# first column (symbol) is the ticker\n# 'target_DC1' is the log of return for delta between current close to previous close\n# 'target' is the y which is ranked by Era using 'target_DC1'\n# the rest of the columns are features to be used for ML\ntrain_dataset.head()","d1ccc10a":"# validation_dataset is the latest data from most recent Era\n# it has the same structure as the dataset, however 'target' and 'target_DC1' are NaN\n# contributor should only predict the 'target' only\n# note that the 'target_DC1' will be only used for verification and to reconstruct the 'target' whenever needed\nvalidation_dataset.head()","90430bfc":"# X is all the columns except the 'symbol', 'target', 'target_DC1'\nX = train_dataset.iloc[:, 1:-2]\n\n# y is just the target\ny = train_dataset.target","cc4d10ac":"X","a1dbe738":"y","8d8031bd":"X.groupby(X.index).count().iloc[:,0].plot(figsize = (10,5));","1d53790a":"train = 0.9\ntest = 0.1\nera = len(X.index.unique())\ntrain_era = int(era * train)\ntest_era = era - train_era\nprint('total Era: {}'.format(era))\nprint('train Era: {}'.format(train_era))\nprint('test Era: {}'.format(test_era))\n","61f6a17a":"#split train and test set according to the train_era and test_era\nX_train = X[X.index < X.index.unique()[train_era]]\ny_train = y[y.index < y.index.unique()[train_era]]\nX_test = X[X.index >= X.index.unique()[train_era]]\ny_test = y[y.index >= y.index.unique()[train_era]]\nprint(X_train.shape)\nprint(X_test.shape)","f0f5b9f7":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression(n_jobs=-1).fit(X_train, y_train)","2c3d8795":"# Define error metrics\nfrom sklearn.metrics import mean_squared_error\n\ndef rmse(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ny_pred_train = reg.predict(X_train)\nprint('rmse for train dataset: {}'.format(rmse(y_train,y_pred_train)))\n\ny_pred_test = reg.predict(X_test)\nprint('rmse for test dataset: {}'.format(rmse(y_test,y_pred_test)))\n","8a6fea02":"# Use the trained Linear Regression model to make prediction on latest data\n\nX_validation = validation_dataset.iloc[:, 1:-2]\ny_validation = reg.predict(X_validation)\n\ny_validation","e4095190":"prediction = pd.DataFrame()\nprediction['symbol'] = list(validation_dataset.symbol)\nprediction['prediction'] = y_validation\nprediction.head(20)","77eab7ba":"#check if y_latest is in accordance to shape for submission\nif set(prediction.symbol) == set(validation_dataset.symbol):\n    print('symbol matched!')\nelse:\n    print('symbol unmatched, the symbol in prediction df must match the symbol in validation_dataset...')\n    \nif prediction.shape[1] == 2:\n    print('column counts ok!')\nelse:\n    print('It should have 2 columns, first column with symbol, second with prediction...')\n","241cbafb":"#Output submission as .csv file\nprediction.to_csv('prediction.csv', index = False, header = None)","817c0e31":"### Check is prediction in accordance for submission format (using the prediction from linear regression)","dcd11eb2":"### Output prediction as a .csv file for submission!","a7d112fe":"### Each era representing a set of cryptocurrency assets for the time period, the number of assets within each Era is different","620ff525":"### Create X and y from dataset","5a4d977b":"### Loading train, test, validation data","d0d79e41":"### Split X, y into train and test","5920f85e":"### Let's use the prediction from linear regression to join with validation dataset symbol for submission","3b0dcd11":"### Use simple Linear Regression to train a model and check the rmse","9d6c4165":"## This is a sample jupyter notebook to generate the prediction for tournament submission\n#### For detail documentation, please visit https:\/\/rocket-capital-investment.gitbook.io\/rci-tournament\/\n#### You may also use Google Colab to run this notebook: https:\/\/colab.research.google.com\/github\/rocketcapital-ai\/competition_quickstart_dataloader\/blob\/main\/Quickstart.ipynb"}}