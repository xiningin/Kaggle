{"cell_type":{"a6dae81a":"code","98b0216d":"code","0bd0ada9":"code","194cee1d":"code","34a383fc":"code","2778b6b8":"code","01f15534":"code","35917dd2":"code","78ee347a":"code","aad55504":"code","5e3220ec":"code","12353af0":"code","9e3ec3f1":"code","7f45ddb9":"code","6cf9155c":"code","b9873f6e":"code","79f227ac":"code","112b92bc":"code","bb306d58":"code","5b118535":"code","60f24bcc":"code","1850446b":"code","4d0c9eb3":"code","65bda7d8":"code","f98b7c75":"code","a1f0f07d":"code","75be5f9e":"code","724816c3":"code","68703879":"code","9eb4bf5a":"code","adf115ec":"code","49e51460":"markdown","1e064035":"markdown","fb5218ea":"markdown","93ed0700":"markdown","62355c50":"markdown","f3b78e9f":"markdown","70e84f9b":"markdown","6a43877c":"markdown","39519f04":"markdown","d28943b2":"markdown","4984c4a3":"markdown","0a0de7ea":"markdown","bf22d52d":"markdown","7ea4c3a1":"markdown","9e23c22e":"markdown","f9769c9c":"markdown","ba8b9e87":"markdown","91b1d31a":"markdown","37e9982d":"markdown","c9d81024":"markdown","d5c5f635":"markdown","6b87f46c":"markdown","c3a48ee9":"markdown","d29bcae1":"markdown","ffe86e8c":"markdown"},"source":{"a6dae81a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split,cross_val_score, KFold\nfrom scipy import stats\ncolor = sns.color_palette()\n\n%matplotlib inline\n\npd.options.mode.chained_assignment = None\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","98b0216d":"filename='\/kaggle\/input\/top50spotify2019\/top50.csv'\ndf=pd.read_csv(filename,encoding='ISO-8859-1')\ndf.head()","0bd0ada9":"plt.figure(figsize=(8,6))\nplt.scatter(range(df.shape[0]), np.sort(df.Popularity.values))\nplt.xlabel('index', fontsize=12)\nplt.ylabel('Popularity', fontsize=12)\nplt.show()","194cee1d":"plt.figure(figsize=(12,8))\nsns.countplot(x='Genre',data=df,color=color[2])\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Genre in data',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title('frequence of Genre',fontsize=12)\nplt.show()","34a383fc":"plt.figure(figsize=(12,8))\nsns.boxplot(x=\"Genre\", y=\"Popularity\", data=df)\nplt.ylabel('Popularity', fontsize=12)\nplt.xlabel('Genre Count', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title(\"How Popularity changes with Genre ?\", fontsize=15)\nplt.show()","2778b6b8":"plt.figure(figsize=(12,8))\nsns.countplot(x='Artist.Name',data=df,color=color[4])\nplt.xlabel('Artist.Name in data given',fontsize=12)\nplt.ylabel('cont of song sung',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title('Artist.Name and no.of song cont',fontsize=12)\nplt.show()","01f15534":"grouped_df = df.groupby([\"Artist.Name\", \"Genre\"])[\"Track.Name\"].aggregate(\"count\").reset_index()\ngrouped_df = grouped_df.pivot('Artist.Name', 'Genre', 'Track.Name')\n\nplt.figure(figsize=(12,8))\nsns.heatmap(grouped_df)\nplt.title(\"Frequency of Artist.Name Vs Genre\")\nplt.show()","35917dd2":"grouped_df = df.groupby([\"Artist.Name\", \"Genre\"])[\"Track.Name\"].aggregate(\"count\").reset_index()\n\nfig, ax = plt.subplots(figsize=(12,20))\nax.scatter(grouped_df['Track.Name'].values, grouped_df[\"Artist.Name\"].values)\nfor i, txt in enumerate(grouped_df.Genre.values):\n    ax.annotate(txt, (grouped_df['Track.Name'].values[i], grouped_df[\"Artist.Name\"].values[i]), rotation=45, ha='center', va='center', color='green')\nplt.xlabel('Reorder Ratio')\nplt.ylabel('department_id')\nplt.title(\"Reorder ratio of different aisles\", fontsize=15)\nplt.show()","78ee347a":"from wordcloud import WordCloud\nplt.style.use('seaborn')\nwrds1 = df[\"Artist.Name\"].str.split(\"(\").str[0].value_counts().keys()\n\nwc1 = WordCloud(scale=5,max_words=1000,colormap=\"rainbow\",background_color=\"white\").generate(\" \".join(wrds1))\nplt.figure(figsize=(12,18))\nplt.imshow(wc1,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Artist Name with more songs in data \",color='b')\nplt.show()","aad55504":"plt.figure(figsize=(12,8))\nsns.countplot(x=\"Beats.Per.Minute\", data=df, color=color[3])\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Beats.Per.Minute', fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title(\"Frequency distribution by Beats.Per.Minute order\", fontsize=15)\nplt.show()","5e3220ec":"skew=df.skew()\nprint(skew)","12353af0":"plt.figure(figsize=(12,12))\nsns.jointplot(x=df[\"Beats.Per.Minute\"].values, y=df['Popularity'].values, size=10, kind=\"kde\",color=color[4])\nplt.ylabel('Popularity', fontsize=12)\nplt.xlabel(\"Beats.Per.Minute\", fontsize=12)\nplt.title(\"Beats.Per.Minute Vs Popularity\", fontsize=15)\nplt.show()","9e3ec3f1":"plt.figure(figsize=(12,8))\nsns.countplot(x=df.Energy.values,data=df,color=color[5])\nplt.xlabel('Energy label',fontsize=12)\nplt.ylabel('count')\nplt.xticks(rotation='vertical')\nplt.title('Energy label count',fontsize=12)\nplt.show()","7f45ddb9":"plt.figure(figsize=(12,8))\nsns.jointplot(x=df[\"Energy\"], y=df['Popularity'], size=10,kind=\"kde\",color=color[6])\nplt.ylabel('Popularity', fontsize=12)\nplt.xlabel(\"Energy\", fontsize=12)\nplt.title(\"Energy Vs Popularity\", fontsize=15)\nplt.show()","6cf9155c":"df['Loudness..dB..'].value_counts()","b9873f6e":"grouped_df = df.groupby([\"Loudness..dB..\"])[\"Popularity\"].aggregate(\"count\").reset_index()\n\nplt.figure(figsize=(12,8))\nsns.pointplot(grouped_df['Loudness..dB..'].values, grouped_df['Popularity'].values, alpha=0.8, color=color[2])\nplt.ylabel('Reorder ratio', fontsize=12)\nplt.xlabel('Department', fontsize=12)\nplt.title(\"Department wise reorder ratio\", fontsize=15)\nplt.xticks(rotation='vertical')\nplt.show()","79f227ac":"plt.figure(figsize=(12,8))\nsns.violinplot(x='Loudness..dB..', y='Popularity', data=df)\nplt.xlabel('Loudness..dB..', fontsize=12)\nplt.ylabel('Popularity', fontsize=12)\nplt.show()","112b92bc":"plt.figure(figsize=(12,8))\nsns.countplot(x='Danceability',data=df,color=color[8])\nplt.xlabel('Danceability count',fontsize=12)\nplt.ylabel('count',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.show()","bb306d58":"plt.figure(figsize=(12,8))\nsns.jointplot(x=df[\"Danceability\"], y=df['Popularity'], size=10,kind=\"kde\",color=color[6])\nplt.ylabel('Popularity', fontsize=12)\nplt.xlabel(\"Danceability\", fontsize=12)\nplt.title(\"Danceability Vs Popularity\", fontsize=15)\nplt.show()","5b118535":"grouped_df = df.groupby(['Energy','Danceability'])['Popularity'].aggregate('mean').reset_index()\n\ngrouped_df = grouped_df.pivot('Energy', 'Danceability', 'Popularity')\n\nplt.figure(figsize=(12,8))\nsns.heatmap(grouped_df)\nplt.title(\"Frequency of Energy Vs Danceability\")\nplt.show()","60f24bcc":"plt.figure(figsize=(12,8))\nsns.countplot(x=df.Liveness.values,data=df,color=color[5])\nplt.xlabel('Liveness label',fontsize=12)\nplt.ylabel('count')\nplt.xticks(rotation='vertical')\nplt.title('Liveness label count',fontsize=12)\nplt.show()","1850446b":"#skew change \ntransform=np.asarray(df[['Liveness']].values)\ndf_transform = stats.boxcox(transform)[0]","4d0c9eb3":"fig=plt.subplots(figsize=(10,10))\nplt.title('Dependence between Liveness and popularity',fontsize=12)\nsns.regplot(x='Liveness', y='Popularity',\n            ci=None, data=df)\nsns.kdeplot(df.Liveness,df.Popularity)\nplt.show()","65bda7d8":"plt.figure(figsize=(12,8))\nsns.countplot(x=df['Acousticness..'].values,data=df,color=color[5])\nplt.xlabel('Acousticness label',fontsize=12)\nplt.ylabel('count')\nplt.xticks(rotation='vertical')\nplt.title('Acousticness label count',fontsize=12)\nplt.show()","f98b7c75":"fig=plt.subplots(figsize=(10,10))\nplt.title('Dependence between Acousticness and popularity',fontsize=12)\nsns.regplot(x='Acousticness..', y='Popularity',\n            ci=None, data=df)\nsns.kdeplot(df.Liveness,df.Popularity)\nplt.show()","a1f0f07d":"print(df.dtypes)","75be5f9e":"xcol = [col for col in df.columns if col not in['Popularity'] if df[col].dtypes=='int64']\n\nlabel = []\nvales = []\n\nfor col in xcol:\n    label.append(col)\n    vales.append(np.corrcoef(df[col].values,df.Popularity.values)[0,1])\n    \ncorr_df = pd.DataFrame({'col_label':label,'col_values':vales})\ncorr_df =corr_df.sort_values(by = 'col_values')\n\n\nind = np.arange(len(label))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(12,40))\nrects = ax.barh(ind, np.array(corr_df.col_values.values), color='y')\nax.set_yticks(ind)\nax.set_yticklabels(corr_df.col_label.values, rotation='horizontal')\nax.set_xlabel(\"Correlation coefficient\")\nax.set_title(\"Correlation coefficient of the variables\")\nplt.show()","724816c3":"corr_df_sel = corr_df.ix[(corr_df['col_values']>0.1) | (corr_df['col_values'] < -0.3)]\ncorr_df_sel","68703879":"train_y = df['Popularity'].values\nnum_df = df[xcol].drop(['Unnamed: 0'],axis=1)\nfeat_name = num_df.columns.values\n\nfrom sklearn import ensemble \nmodel = ensemble.ExtraTreesRegressor(n_estimators=25,max_depth=30,max_features=0.3, n_jobs=-1, random_state=0) \nmodel.fit(num_df,train_y)\n\nimportances = model.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in model.estimators_],axis=0)\nindi = np.argsort(importances)[::-1][:20]\n\nplt.figure(figsize=(12,12))\nplt.title(\"Feature importances\")\nplt.bar(range(len(indi)), importances[indi], color=color[4], yerr=std[indi], align=\"center\")\nplt.xticks(range(len(indi)), feat_name[indi], rotation='vertical')\nplt.xlim([-1, len(indi)])\nplt.show()","9eb4bf5a":"import xgboost as xgb\nxgb_params = {\n    'eta': 0.05,\n    'max_depth': 8,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:linear',\n    'silent': 1,\n    'seed' : 0\n}\ndtrain = xgb.DMatrix(num_df, train_y, feature_names=num_df.columns.values)\nmodel = xgb.train(dict(xgb_params, silent=0), dtrain, num_boost_round=50)\n\n# plot the important features #\nfig, ax = plt.subplots(figsize=(12,18))\nxgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nplt.show()","adf115ec":"def runXGB(train_X, train_y, test_X, test_y=None, feature_names=None, seed_val=0, num_rounds=1000):\n    param = {}\n    param['objective'] = 'multi:softprob'\n    param['eta'] = 0.1\n    param['max_depth'] = 6\n    param['silent'] = 1\n    param['num_class'] = 3\n    param['eval_metric'] = \"mlogloss\"\n    param['min_child_weight'] = 1\n    param['subsample'] = 0.7\n    param['colsample_bytree'] = 0.7\n    param['seed'] = seed_val\n    num_rounds = num_rounds\n\n    plst = list(param.items())\n    xgtrain = xgb.DMatrix(train_X, label=train_y)\n\n    if test_y is not None:\n        xgtest = xgb.DMatrix(test_X, label=test_y)\n        watchlist = [ (xgtrain,'train'), (xgtest, 'test') ]\n        model = xgb.train(plst, xgtrain, num_rounds, watchlist, early_stopping_rounds=20)\n    else:\n        xgtest = xgb.DMatrix(test_X)\n        model = xgb.train(plst, xgtrain, num_rounds)\n\n    pred_test_y = model.predict(xgtest)\n    return pred_test_y, model","49e51460":"we will check each Attribute and its distribution and its dependance with the target and check for the importance of the each Attribute with the target ....   :)","1e064035":"**5.Danceability**","fb5218ea":"**6.Liveness **","93ed0700":"yes we have Liveness with +ve skew and Popularity with -ve skew() but as Popularity is our target we cant change anything \nand we will change Liveness while deling with that ","62355c50":"lets once check the skew() ","f3b78e9f":"first we check the target **'Popularity'**","70e84f9b":"more to come , will soon update with the modeling part ....\n\n*your one upvote can more me to work more*  :)","6a43877c":"seems like 'Valence','Energy' are more imporant variable and lets check with the XGB","39519f04":"**pleace upvote if you liked it thank you **","d28943b2":"seems most of the songs are from Dance_pop genre ","4984c4a3":"Using xgboost, the important variables are 'Valence' followed by 'Acousticness' and 'Beats.Per.Minute'","0a0de7ea":"so this are the more highly correlated with the target ","bf22d52d":"**3.Beats.Per.Minute**","7ea4c3a1":"seems like according to the Loudness they rated the songs ","9e23c22e":"**4.Energy**","f9769c9c":"## **Acknowledgements**\n#### This kernel uses such good kernels:\n   - https:\/\/www.kaggle.com\/deepakdeepu8978\/how-popular-a-song-is-according-to-spotify","ba8b9e87":"now, Since there are so many variables, let us first take the 'int' variables alone and then get the correlation with the target variable to see how they are related.","91b1d31a":"**1.Genre**","37e9982d":"***univariate analysis***  :","c9d81024":"seems majority of the songs are by  Ed Sheeran now let combine the both and check ...! ","d5c5f635":"i thing songs should be with more energetic to Dance ","6b87f46c":"We had an understanding of important variables from the univariate analysis. But this is on a stand alone basis and also we have linearity assumption. Now let us build a non-linear model to get the important variables by building Extra Trees model.","c3a48ee9":"seems like with good beats.per.Minute are more getting good  popularity ","d29bcae1":"less songs with -9 ","ffe86e8c":"**2.Artist.Name**"}}