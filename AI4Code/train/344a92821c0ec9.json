{"cell_type":{"7f119ba3":"code","96086d80":"code","09e0afd0":"code","0ba7ecc3":"code","d19988b4":"code","d8a78c0d":"code","21fc3bd8":"code","83e06c35":"code","706dd6df":"code","b62c557f":"code","f7991fa8":"code","d43eadbf":"code","7d004e74":"code","0b50a9b0":"code","d7cce90f":"code","82093d56":"code","524fca6c":"code","393bc4b5":"code","028064d6":"code","780ae7cf":"code","39d85d72":"code","a52fdafe":"code","fa2136f2":"code","24c78414":"code","961d7f11":"code","ea8672fd":"code","30b22eaa":"code","4e6bcec9":"code","268ae246":"code","c336288d":"code","512d0ca1":"code","40eb91f7":"markdown","1d8203a0":"markdown","b25e758b":"markdown","1e067f84":"markdown","9d2a660d":"markdown","3c36ae2b":"markdown","40a10b1c":"markdown","f6342af1":"markdown","ef4e136b":"markdown","2bf401cf":"markdown","6ed9b79d":"markdown","2ce34f2b":"markdown"},"source":{"7f119ba3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","96086d80":"%matplotlib inline\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt","09e0afd0":"train = np.loadtxt('\/kaggle\/input\/digit-recognizer\/train.csv', delimiter=',', skiprows=1)\ntest = np.loadtxt('\/kaggle\/input\/digit-recognizer\/test.csv', delimiter=',', skiprows=1)","0ba7ecc3":"# \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\ntrain_label = train[:, 0]\n# \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043a \u0443\u0434\u043e\u0431\u043d\u043e\u043c\u0443 \u0434\u043b\u044f \u043e\u0431\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0438\u0434\u0443\ntrain_img = np.resize(train[:, 1:], (train.shape[0], 28, 28))\ntest_img = np.resize(test, (test.shape[0], 28, 28))","d19988b4":"fig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(train_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % train_label[i - 1]);","d8a78c0d":"train_sobel_x = np.zeros_like(train_img)\ntrain_sobel_y = np.zeros_like(train_img)\nfor i in range(len(train_img)):\n    train_sobel_x[i] = cv2.Sobel(train_img[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n    train_sobel_y[i] = cv2.Sobel(train_img[i], cv2.CV_64F, dx=0, dy=1, ksize=3)","21fc3bd8":"test_sobel_x = np.zeros_like(test_img)\ntest_sobel_y = np.zeros_like(test_img)\nfor i in range(len(test_img)):\n    test_sobel_x[i] = cv2.Sobel(test_img[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n    test_sobel_y[i] = cv2.Sobel(test_img[i], cv2.CV_64F, dx=0, dy=1, ksize=3)","83e06c35":"train_g, train_theta = cv2.cartToPolar(train_sobel_x, train_sobel_y)\ntest_g, test_theta = cv2.cartToPolar(test_sobel_x, test_sobel_y)","706dd6df":"fig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(train_g[:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % train_label[i - 1]);\n    subplot = fig.add_subplot(3, 7, i)\n    plt.hist(train_theta[i - 1].flatten(),\n             bins=16, weights=train_g[i - 1].flatten())","b62c557f":"# \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0434\u043b\u0438\u043d\u044b \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430\ntrain_hist = np.zeros((len(train_img), 16))\nfor i in range(len(train_img)):\n    hist, borders = np.histogram(train_theta[i],\n                                 bins=16,\n                                 range=(0., 2. * np.pi),\n                                 weights=train_g[i])\n    train_hist[i] = hist","f7991fa8":"test_hist = np.zeros((len(test_img), 16))\nfor i in range(len(test_img)):\n    hist, borders = np.histogram(test_theta[i],\n                                 bins=16,\n                                 range=(0., 2. * np.pi),\n                                 weights=test_g[i])\n    test_hist[i] = hist","d43eadbf":"train_hist = train_hist \/ np.linalg.norm(train_hist, axis=1)[:, None]","7d004e74":"test_hist = test_hist \/ np.linalg.norm(test_hist, axis=1)[:, None]","0b50a9b0":"from sklearn.model_selection import train_test_split\ny_train, y_val, x_train, x_val = train_test_split(\n    train_label, train_hist, test_size=0.2,\n    random_state=42)","d7cce90f":"centroids = np.zeros((10, train_hist.shape[1]), dtype=np.float32)\nfor i in range(10):\n    centroids[i] = np.mean(x_train[y_train == i], axis=0)","82093d56":"pred_val = np.zeros_like(y_val)\nfor i in range(len(y_val)):\n    distances = np.linalg.norm(centroids - x_val[i], axis=1)\n    pred_val[i] = np.argmin(distances)","524fca6c":"from sklearn.metrics import accuracy_score\nprint('Accuracy: %s' % accuracy_score(y_val, pred_val))","393bc4b5":"from sklearn.metrics import classification_report\nprint(classification_report(y_val, pred_val))","028064d6":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_val, pred_val))","780ae7cf":"pred_test = np.zeros(len(test_img), np.uint8)\nfor i in range(len(test_img)):\n    distances = np.linalg.norm(centroids - test_hist[i], axis=1)\n    pred_test[i] = np.argmin(distances)","39d85d72":"fig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(test_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % pred_test[i - 1]);","a52fdafe":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\npred_val = model.predict(x_val)\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy: %s' % accuracy_score(y_val, pred_val))","fa2136f2":"pred_test = model.predict(test_hist)\nfig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(test_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % pred_test[i - 1]);","24c78414":"from sklearn.ensemble import RandomForestClassifier\nclf_rf = RandomForestClassifier(n_estimators=100, n_jobs=-1)\nclf_rf.fit(x_train, y_train)\npred_val = clf_rf.predict(x_val)\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy: %s' % accuracy_score(y_val, pred_val))","961d7f11":"pred_test = model.predict(test_hist)\nfig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(test_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % pred_test[i - 1]);","ea8672fd":"from catboost import CatBoostClassifier\nmodel = CatBoostClassifier(iterations=10000,\n                           task_type=\"GPU\",\n                           devices='0:0')\nmodel.fit(x_train, y_train, verbose = False)\npred_val = model.predict(x_val)\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy: %s' % accuracy_score(y_val, pred_val))","30b22eaa":"from sklearn.metrics import classification_report\nprint(classification_report(y_val, pred_val))","4e6bcec9":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_val, pred_val))","268ae246":"pred_test = model.predict(test_hist)\nfig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(test_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % pred_test[i - 1]);","c336288d":"with open('submit.txt', 'w') as dst:\n    dst.write('ImageId,Label\\n')\n    for i, p in enumerate(pred_test, 1):\n        dst.write('%s,%s\\n' % (i, int(p)))","512d0ca1":"!head submit.txt","40eb91f7":"Evaluate model on test-dataset","1d8203a0":"# 1. Baseline solution","b25e758b":"# 2. Linear model' solution","1e067f84":"# Visualize data","9d2a660d":"Calc hist of grad","3c36ae2b":"# 3. RF' solution","40a10b1c":"Visualize predictions","f6342af1":"# 4. Catboost' solution","ef4e136b":"Calc grad","2bf401cf":"Calc X, Y with Sobel","6ed9b79d":"## Test dataset evaluation","2ce34f2b":"Normalize vector of hist"}}