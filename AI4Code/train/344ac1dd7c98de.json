{"cell_type":{"7ddba62f":"code","7493dbcc":"code","5e41be42":"code","b0a0ecb6":"code","1c4516a0":"code","c8cc78e9":"code","0249d120":"code","67fbfedb":"code","4a18a57d":"code","a36a66b8":"code","905f92b1":"code","b121758c":"code","5875a0ac":"code","938d8294":"code","1c18151a":"code","625f4283":"code","7da327d1":"markdown","59dcda69":"markdown","ce8e4965":"markdown","6d1ae8ee":"markdown","528ab03f":"markdown","6eac9f60":"markdown","a0035cc7":"markdown","ec226766":"markdown","e9b759fc":"markdown","fd15f6ea":"markdown","4ba8a844":"markdown"},"source":{"7ddba62f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport math\nimport os","7493dbcc":"submission = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv')\ncsv1 = pd.read_csv('..\/input\/train-infer-catalyst-pytorch-rnn-baseline\/submission.csv')\ncsv2 = pd.read_csv('..\/input\/neural-covid-vaccine\/submission.csv')\ncsv3 = pd.read_csv('..\/input\/openvaccine-gru-lstm\/submission.csv')\ncsv4 = pd.read_csv('..\/input\/openvaccine-simple-gru-model\/submission.csv')","5e41be42":"files = [csv1, csv2, csv3, csv4]\ntotal = pd.concat(files, axis=1)","b0a0ecb6":"submission.head()","1c4516a0":"total.head()","c8cc78e9":"col = list(submission.columns)[1:]\nprint(col)","0249d120":"submission1 = submission\nfor c in col:\n    submission1[c] = total[c].mean(axis=1)\nsubmission1.head()","67fbfedb":"submission1.to_csv('submission1.csv', index=False)","4a18a57d":"submission2 = submission\nfor c in col:\n    submission2[c] = total[c].median(axis=1)\nsubmission2.head()","a36a66b8":"submission2.to_csv('submission2.csv', index=False)","905f92b1":"submission3 = submission\nfor c in col:\n    submission3[c] = total[c].mode(axis=1)\nsubmission3.head()","b121758c":"submission3.to_csv('submission3.csv', index=False)","5875a0ac":"submission4 = submission\n\ncutoff_lo = 0.73\ncutoff_hi = 0.33\n    \nfor c in col:\n    total[c+'_is_iceberg_max'] = total[c].max(axis=1)\n    total[c+'_is_iceberg_min'] = total[c].min(axis=1)\n    total[c+'_is_iceberg_mean'] = total[c].mean(axis=1)\n    total[c+'_is_iceberg_median'] = total[c].median(axis=1)\n\n    total[c+'_is_iceberg_base'] = csv3[c] #best score\n    submission4[c] = np.where(np.all(total[c] > cutoff_lo, axis=1),\n                                        total[c+'_is_iceberg_max'],\n                                        np.where(np.all(total[c] < cutoff_hi, axis=1),\n                                                 total[c+'_is_iceberg_min'],\n                                                 total[c+'_is_iceberg_base']))\nsubmission4.head()","938d8294":"submission4.to_csv('submission4.csv', index=False)","1c18151a":"submission5 = submission\nfor c in col:\n    submission5[c] = csv3[c] * 0.8 + csv4[c] * 0.1 + csv1[c] * 0.05 + csv2[c] *0.05\nsubmission5.head()","625f4283":"submission5.to_csv('submission5.csv', index=False)","7da327d1":"Here I will use different ensemble methods on several public models that perform successfully to see how they perform.  ALL CREDIT FOR EACH MODEL GOES TO THE ORIGINAL OWNER.","59dcda69":"## Mean\n\nScore: 0.29375\n","ce8e4965":"This one still needs to find the optimal cutoffs... more room to improve!","6d1ae8ee":"## Blend (by percentage)\n\nThese percenages will be tuned more soon.\n\nScore: 0.27049","528ab03f":"* Mean: 0.29375\n* Median:  0.28293\n* Mode:  0.44178\n* MinMaxBestBaseStacking: 0.27184\n* Blend: 0.27049","6eac9f60":"## MinMaxBestBaseStacking\n\nCredit goes to @solomon with his notebook https:\/\/www.kaggle.com\/solomonk\/minmax-ensemble-0-9526-lb\/, which I adapted to use here.  He wrote the original which can be found at https:\/\/github.com\/QuantScientist\/Deep-Learning-Boot-Camp\/blob\/master\/Kaggle-PyTorch\/PyTorch-Ensembler\/utils.py .\n\nScore: 0.27184","a0035cc7":"## Mode\n\nScore: 0.44178","ec226766":"Models:\n\nhttps:\/\/www.kaggle.com\/nxrprime\/train-infer-catalyst-pytorch-rnn-baseline\nhttps:\/\/www.kaggle.com\/xhlulu\/openvaccine-simple-gru-model\nhttps:\/\/www.kaggle.com\/parmarsuraj99\/neural-covid-vaccine\nhttps:\/\/www.kaggle.com\/tuckerarrants\/openvaccine-gru-lstm","e9b759fc":"## Median\n\nScore: 0.28293","fd15f6ea":"The blended one by percentage did the best.  The score for the best submissions I used was 0.27184, and the score with the blended one was 0.27049.\n\nInterestingly, the score from the MinMaxBestBaseStacking was the same as the one for the GRU & LSTM model.\n\nI will continue to update this kernel with improvements\/different methods.\n\nPlease upvote\/comment if you enjoyed!","4ba8a844":"## Summary"}}