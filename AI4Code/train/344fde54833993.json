{"cell_type":{"3a70eb2d":"code","387aca93":"code","9d0db42f":"code","c51b0e6d":"code","b9def41b":"code","2246be88":"code","04ab8fd2":"code","e5ff09fc":"code","733a7944":"markdown","d2b5f575":"markdown"},"source":{"3a70eb2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","387aca93":"import nltk\nimport random\n#from nltk.corpus import movie_reviews\nfrom nltk.classify.scikitlearn import SklearnClassifier\nimport pickle\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom nltk.classify import ClassifierI\nfrom statistics import mode\nfrom nltk.tokenize import word_tokenize\n\npos_fname = \"\/kaggle\/input\/shortreviews\/sr_positive.txt\"\nneg_fname = \"\/kaggle\/input\/shortreviews\/sr_negative.txt\"\n\nclass VoteClassifier(ClassifierI):\n    def __init__(self, *classifiers):\n        self._classifiers = classifiers\n\n    def classify(self, features):\n        votes = []\n        for c in self._classifiers:\n            v = c.classify(features)\n            votes.append(v)\n        return mode(votes)\n\n    def confidence(self, features):\n        votes = []\n        for c in self._classifiers:\n            v = c.classify(features)\n            votes.append(v)\n\n        choice_votes = votes.count(mode(votes))\n        conf = choice_votes \/ len(votes)\n        return conf\n    \nshort_pos = open('\/kaggle\/input\/shortreviews\/sr_positive.txt','r').read()\nshort_neg = open('\/kaggle\/input\/shortreviews\/sr_negative.txt','r').read()\n\nall_words = []\ndocuments = []\n\n\n#  j is adject, r is adverb, and v is verb\n#allowed_word_types = [\"J\",\"R\",\"V\"]\nallowed_word_types = [\"J\"]\n\nfor p in short_pos.split('\\n'):\n    documents.append( (p, \"pos\") )\n    words = word_tokenize(p)\n    pos = nltk.pos_tag(words)\n    for w in pos:\n        if w[1][0] in allowed_word_types:\n            all_words.append(w[0].lower())\n\n    \nfor p in short_neg.split('\\n'):\n    documents.append( (p, \"neg\") )\n    words = word_tokenize(p)\n    pos = nltk.pos_tag(words)\n    for w in pos:\n        if w[1][0] in allowed_word_types:\n            all_words.append(w[0].lower())\n\n\n\nsave_documents = open(\"pickled_algos\/documents.pickle\",\"wb\")\npickle.dump(documents, save_documents)\nsave_documents.close()\n\n\nall_words = nltk.FreqDist(all_words)\n\"\"\"\nFreqDist({'good': 369, 'more': 331, 'little': 265, ...})\n\"\"\"\n\nword_features = list(all_words.keys())[:5000]\n\"\"\"\n['21st', 'new', 'conan', 'greater', 'jean-claud',...]\n\"\"\"\n\nsave_word_features = open(\"pickled_algos\/word_features5k.pickle\",\"wb\")\npickle.dump(word_features, save_word_features)\nsave_word_features.close()\n\n\ndef find_features(document):\n    words = word_tokenize(document)\n    features = {}\n    for w in word_features:\n        features[w] = (w in words)\n\n    return features\n\nfeaturesets = [(find_features(rev), category) for (rev, category) in documents]\n\nsave_featuresets = open(\"pickled_algos\/featuresets.pickle\", \"wb\")\npickle.dump(featuresets, save_featuresets)\nsave_featuresets.close()\n\nrandom.shuffle(featuresets)\nprint(len(featuresets))\n\ntesting_set = featuresets[10000:]\ntraining_set = featuresets[:10000]\n\n#####\nclassifier = nltk.NaiveBayesClassifier.train(training_set)\nprint(\"Original Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set))*100)\nclassifier.show_most_informative_features(15)\n\nsave_classifier = open(\"pickled_algos\/originalnaivebayes5k.pickle\",\"wb\")\npickle.dump(classifier, save_classifier)\nsave_classifier.close()\n\n#####\nMNB_classifier = SklearnClassifier(MultinomialNB())\nMNB_classifier.train(training_set)\nprint(\"MNB_classifier accuracy percent:\", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)\n\nsave_classifier = open(\"pickled_algos\/MNB_classifier5k.pickle\",\"wb\")\npickle.dump(MNB_classifier, save_classifier)\nsave_classifier.close()\n\n#####\nBernoulliNB_classifier = SklearnClassifier(BernoulliNB())\nBernoulliNB_classifier.train(training_set)\nprint(\"BernoulliNB_classifier accuracy percent:\", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)\n\nsave_classifier = open(\"pickled_algos\/BernoulliNB_classifier5k.pickle\",\"wb\")\npickle.dump(BernoulliNB_classifier, save_classifier)\nsave_classifier.close()\n\n#####\nLogisticRegression_classifier = SklearnClassifier(LogisticRegression())\nLogisticRegression_classifier.train(training_set)\nprint(\"LogisticRegression_classifier accuracy percent:\", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)\n\nsave_classifier = open(\"pickled_algos\/LogisticRegression_classifier5k.pickle\",\"wb\")\npickle.dump(LogisticRegression_classifier, save_classifier)\nsave_classifier.close()\n\n#####\nLinearSVC_classifier = SklearnClassifier(LinearSVC())\nLinearSVC_classifier.train(training_set)\nprint(\"LinearSVC_classifier accuracy percent:\", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)\n\nsave_classifier = open(\"pickled_algos\/LinearSVC_classifier5k.pickle\",\"wb\")\npickle.dump(LinearSVC_classifier, save_classifier)\nsave_classifier.close()\n\n\n##NuSVC_classifier = SklearnClassifier(NuSVC())\n##NuSVC_classifier.train(training_set)\n##print(\"NuSVC_classifier accuracy percent:\", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)\n\n\nSGDC_classifier = SklearnClassifier(SGDClassifier())\nSGDC_classifier.train(training_set)\nprint(\"SGDClassifier accuracy percent:\",nltk.classify.accuracy(SGDC_classifier, testing_set)*100)\n\nsave_classifier = open(\"pickled_algos\/SGDC_classifier5k.pickle\",\"wb\")\npickle.dump(SGDC_classifier, save_classifier)\nsave_classifier.close()\n","9d0db42f":"import nltk\nimport random\nfrom nltk.classify.scikitlearn import SklearnClassifier\nimport pickle\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom nltk.classify import ClassifierI\nfrom statistics import mode\nfrom nltk.tokenize import word_tokenize\n\n\n\nclass VoteClassifier(ClassifierI):\n    def __init__(self, *classifiers):\n        self._classifiers = classifiers\n\n    def classify(self, features):\n        votes = []\n        for c in self._classifiers:\n            v = c.classify(features)\n            votes.append(v)\n        return mode(votes)\n\n    def confidence(self, features):\n        votes = []\n        for c in self._classifiers:\n            v = c.classify(features)\n            votes.append(v)\n        print('confidence :',votes)\n        choice_votes = votes.count(mode(votes))\n        conf = choice_votes \/ len(votes)\n        return conf\n\n\ndocuments_f = open(\"\/kaggle\/input\/pickled-algos\/documents.pickle\", \"rb\")\ndocuments = pickle.load(documents_f)\ndocuments_f.close()\n\nword_features5k_f = open(\"\/kaggle\/input\/pickled-algos\/word_features5k.pickle\", \"rb\")\nword_features = pickle.load(word_features5k_f)\nword_features5k_f.close()\n\n\ndef find_features(document):\n    words = word_tokenize(document)\n    features = {}\n    for w in word_features:\n        features[w] = (w in words)\n\n    return features\n\n\n\nfeaturesets_f = open(\"\/kaggle\/input\/pickled-algos\/featuresets.pickle\", \"rb\")\nfeaturesets = pickle.load(featuresets_f)\nfeaturesets_f.close()\n\nrandom.shuffle(featuresets)\nprint(len(featuresets))\n\ntesting_set = featuresets[10000:]\ntraining_set = featuresets[:10000]\n\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/originalnaivebayes5k.pickle\", \"rb\")\nclassifier = pickle.load(open_file)\nopen_file.close()\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/MNB_classifier5k.pickle\", \"rb\")\nMNB_classifier = pickle.load(open_file)\nopen_file.close()\n\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/BernoulliNB_classifier5k.pickle\", \"rb\")\nBernoulliNB_classifier = pickle.load(open_file)\nopen_file.close()\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/LogisticRegression_classifier5k.pickle\", \"rb\")\nLogisticRegression_classifier = pickle.load(open_file)\nopen_file.close()\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/LinearSVC_classifier5k.pickle\", \"rb\")\nLinearSVC_classifier = pickle.load(open_file)\nopen_file.close()\n\n\nopen_file = open(\"\/kaggle\/input\/pickled-algos\/SGDC_classifier5k.pickle\", \"rb\")\nSGDC_classifier = pickle.load(open_file)\nopen_file.close()\n\n\n\n\nvoted_classifier = VoteClassifier(\n                                  classifier,\n                                  LinearSVC_classifier,\n                                  MNB_classifier,\n                                  BernoulliNB_classifier,\n                                  LogisticRegression_classifier)\n\n\n\n\ndef sentiment(text):\n    feats = find_features(text)\n    return voted_classifier.classify(feats),voted_classifier.confidence(feats)\n","c51b0e6d":"print(sentiment(\"The jeans are awesome\"))\nprint(sentiment(\"I won't recommend anyone to purchase from this seller\"))\nprint(sentiment(\"I don't like this product\"))\nprint(sentiment(\"amazing job by director\"))","b9def41b":"nRowsRead = 15 # specify 'None' if want to read whole file\n# Womens Clothing E-Commerce Reviews.csv has 23486 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/review_ecommerce\/Womens Clothing E-Commerce Reviews.csv', delimiter=',', nrows = nRowsRead, usecols = ['Review Text'])\ndf1.dataframeName = 'Womens Clothing E-Commerce Reviews.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","2246be88":"df1","04ab8fd2":"df1.__dir__","e5ff09fc":"df1['Sentiment'] = df1.apply(lambda row : sentiment(str(row['Review Text'])), axis = 1)     \nprint(df1)","733a7944":"**Model containing multiple classfiers [To be run only once]**\n* Input: Training Datasets\n* Output: Pickle files ","d2b5f575":"**Load respective classifier pickles**"}}