{"cell_type":{"fcb32912":"code","182e866b":"code","c8b50410":"code","d22aa2d2":"code","b70226b0":"code","d2a9bcba":"code","472f5e74":"code","78cec376":"code","786d0b05":"code","04aac4df":"code","0f8e90d6":"code","8f67bf25":"code","4cffb6fa":"code","6a966b42":"code","dbdfe64f":"code","721db416":"code","36d3f7b8":"code","0260934e":"code","8c7f81ba":"code","8b90ffe6":"code","99488441":"code","4b8b9757":"code","1c456979":"code","7732e69d":"code","14ddad0f":"code","caaf7589":"code","0d4cd353":"code","4c8e4a92":"markdown","ef1d2ad0":"markdown","b3b72569":"markdown","2152c87d":"markdown","8fb60011":"markdown","de49cddb":"markdown","2fcee01e":"markdown","c2244d18":"markdown","a5d0a174":"markdown","fc2da68c":"markdown","dd4d529e":"markdown","bee86dd9":"markdown"},"source":{"fcb32912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-dark-palette\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\") #uyar\u0131lar\u0131 g\u00f6sterme\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","182e866b":"# plt.style.available","c8b50410":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassangerId=test_df[\"PassengerId\"]","d22aa2d2":"train_df.columns","b70226b0":"train_df.head()","d2a9bcba":"train_df.describe()","472f5e74":"train_df.info()","78cec376":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot + & value count\n    \"\"\"\n    \n    # get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue=var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n","786d0b05":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","04aac4df":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}\\n\" .format(train_df[c].value_counts()))","0f8e90d6":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))","8f67bf25":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","4cffb6fa":"# Pclass vs Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","6a966b42":"# Sex vs Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","dbdfe64f":"# SibSp vs Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","721db416":"# Parch vs Survived\n\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","36d3f7b8":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)        \n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier Step\n        outlier_step=IQR*1.5\n        #Detect Outlier & Their Indices\n        outlier_list_col=df[(df[c]<Q1 - outlier_step) | (df[c]>Q3+outlier_step)].index\n        #Keep Ourlier Indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices)\n    multipler_outlier=list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multipler_outlier\n","0260934e":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]\n","8c7f81ba":"#drop outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)\ntrain_df","8b90ffe6":"\ntrain_df_len=len(train_df)\n\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","99488441":"train_df.columns[train_df.isnull().any()]","4b8b9757":"train_df.isnull().sum()","1c456979":"#embarked nan's detect\ntrain_df[train_df[\"Embarked\"].isnull()]","7732e69d":"#analysis of where embarked from by Fare\ntrain_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","14ddad0f":"#fill miisng data with C \"embarked\"\ntrain_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"c\")\ntrain_df[train_df[\"Embarked\"].isnull()] #check","caaf7589":"#fare nan's detect\ntrain_df[train_df[\"Fare\"].isnull()]","0d4cd353":"#fill\ntrain_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\n#check\ntrain_df[train_df[\"Fare\"].isnull()]","4c8e4a92":"<a id = \"4\"><\/a><br>\n## Categorical Variable Analysis:","ef1d2ad0":"<a id = \"1\"><\/a><br>\n# Load and Check Data","b3b72569":"* float64(2) :  Fare & Age\n* int64(5) : Pclass & sbisp & parch & passangerId & survived\n* object(5) : Cabin & embarked & Name & Sex & Ticket","2152c87d":"# INTRODUCTION\n\nThe unsinkable Titanic's shipwreck occured in 1912. During its voyage, it sinked after hit the iceberg. 1592 passangers & crew out of 2224 are dead. \n\n<font color = 'blue'>\nContent:\n  1. [Load & Check Data](#1)\n  1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n  1. [Basic Data Analysis](#6)\n  1. [Outlier Detection](#7)\n  1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","8fb60011":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable Analysis: Consists of two or more options\n\nEx. Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp, Parch\n\nQuestion is : How many sub-categories have they?\n\n* Numerical Variable Analysis: Consists of Numerical Values\n\nEx. Fare, Age & PassangerId\n\nQuestion may be the distribution of numerical data.   ","de49cddb":"<a id = \"9\"><\/a><br>\n## Find Missing Value","2fcee01e":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","c2244d18":"<a id = \"5\"><\/a><br>\n## Numerical Variable Analysis:\n","a5d0a174":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1","fc2da68c":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId: Unique identifier to each passanger\n1. Survived: Passenger survived(1) or died (0)\n1. Pclass: passanger voyage class \n1. Name: passanger name\n1. Sex: gender of passanger\n1. Age: age of passanger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parent\/childs\n1. Ticket: ticket number \n1. Fare: cost of ticket\n1. Cabin: Location category\n1. Embarked: ports where passangers embarked (C = Cherbourg, Q = Queenstown, S = Southampthon)  \n\n\n\n","dd4d529e":"<a id = \"8\"><\/a><br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","bee86dd9":"<a id = \"7\"><\/a><br>\n# Outlier Detection"}}