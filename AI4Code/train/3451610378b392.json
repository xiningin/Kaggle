{"cell_type":{"20af72c1":"code","e85e7d28":"code","ec416ba0":"code","73388cc6":"code","e0db21d2":"code","e9f5bd7d":"code","5a082c40":"code","22710feb":"code","5689c66a":"code","02c04943":"code","bc09aa32":"code","1f40bc18":"code","7083c2e7":"code","3d963974":"markdown","34447bfc":"markdown","30375ed7":"markdown","a4382191":"markdown","b0573cf5":"markdown","7243e794":"markdown"},"source":{"20af72c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e85e7d28":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport datetime\nimport matplotlib.pyplot as plt\n\npassengers = pd.read_csv(\"..\/input\/air-passengers-forecast-dataset\/AirPassengers.csv\")\n\nimport warnings \nwarnings.filterwarnings('ignore')","ec416ba0":"passengers.head(3)","73388cc6":"# Creating Lagged Predictors\n#passengers_1 - autoregressive\n#passengers_12 - seasonal adjustment","e0db21d2":"passengers['passengers_1'] = passengers['#Passengers'].shift(1)\npassengers['passengers_12'] = passengers['#Passengers'].shift(12)","e9f5bd7d":"passengers.head(3)","5a082c40":"y = passengers['#Passengers'][12:] #dropiing first 12 values to remove NaN records","22710feb":"x = passengers.drop(['Month', '#Passengers'], 1)[12:] #dropping all non-predictors","5689c66a":"#leaving the last 12 months for test\/validation\ny_t = y[:-11]\nx_t = x[:-11]\n\ny_v = y[-11:]\nx_v = x[-11:]","02c04943":"model = LinearRegression().fit(x_t, y_t)\n\ncoef = model.coef_.tolist()\ncoef.insert(0, model.intercept_)\nvar = x_t.columns.tolist()\nvar.insert(0, 'Intercept')\nout = pd.DataFrame({'Variable': var, 'Coefficient': coef})\nout\n# out.to_excel(\"result.xlsx\")","bc09aa32":"#using R2\ny_t_pred = model.predict(x_t)\nprint('R2: %.4f' % r2_score(y_t, y_t_pred))","1f40bc18":"x_t_a = range(1, 122) \nplt.figure(figsize=(10,6))\nplt.plot(x_t_a, y_t, label = 'real')\nplt.plot(x_t_a, y_t_pred, label = 'predicted')\nplt.xlabel(\"Time\")\nplt.ylabel(\"No of passengers\")\nplt.legend()\nplt.show()","7083c2e7":"y_v_pred = model.predict(x_v)\nprint('ME: %.4f' % np.mean(y_v - y_v_pred))\nprint('RMSE: %.4f' % np.sqrt(mean_squared_error(y_v, y_v_pred)))\n\nx_v_a = range(121, 132)\nplt.plot(x_v_a, y_v, label = 'real')\nplt.plot(x_v_a, y_v_pred, label = 'predicted')\nplt.xlabel(\"Time\")\nplt.ylabel(\"No of passengers\")\nplt.legend()\nplt.show()","3d963974":"### Linear Regression","34447bfc":"### Model Calibration","30375ed7":"#### It can be referred that 98% of the changeability of the dependent output attribute can be explained by the model. \n#### A High value of R2 indicates better results.","a4382191":"### Prediction on validation set","b0573cf5":"## Forcasting Future Air Passengers","7243e794":"### Model fit on training set"}}