{"cell_type":{"0d6db2ea":"code","84e74ae4":"code","2c16468d":"code","519c54b7":"code","97117c74":"code","a5ba47a9":"code","e9461259":"code","92cec03c":"code","89251fa2":"code","f300cc82":"code","69490fc5":"code","0fb9fc2c":"code","80a57deb":"code","6d9a28f5":"code","2a79d8f2":"code","1ff5a4f1":"code","d5c1d08b":"code","1abf0d62":"code","9b7c2e75":"code","6ac9864a":"code","d09f729b":"code","35eaad30":"code","f87f2e63":"code","3074df2e":"code","cc559f97":"code","36d115a5":"code","b1983b77":"code","5ef2e399":"markdown","987ade27":"markdown","f6c26588":"markdown","bd008370":"markdown","e9d4baf2":"markdown"},"source":{"0d6db2ea":"import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))","84e74ae4":"!pip install -U --pre efficientnet","2c16468d":"import math, re, os\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nfrom tensorflow.keras.applications import DenseNet201\nprint(\"Tensorflow version \" + tf.__version__)\n","519c54b7":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n\nGCS_DS_PATH = 'gs:\/\/kds-a44744780cb28b908f65e7fa3b4a473ef199bb9ffe8048dbbf29ffeb'#'gs:\/\/flowers-public' \n#GCS_DS_PATH = KaggleDatasets().get_gcs_path() # \n\n\n# Configuration\nIMAGE_SIZE = [512, 512]\nEPOCHS1=25\nEPOCHS2=25\nBATCH_SIZE = 1 * 16 * strategy.num_replicas_in_sync","97117c74":"LR_START = 0.0001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 5\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = np.random.random_sample() * LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)","a5ba47a9":"def count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","e9461259":"GCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[IMAGE_SIZE[0]]\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\n\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\n\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\n# watch out for overfitting!\nSKIP_VALIDATION = False\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES","92cec03c":"VALIDATION_FILENAMES_1 = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')[:int(len(VALIDATION_FILENAMES)\/2)]\nVALIDATION_FILENAMES_2 = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')[int(len(VALIDATION_FILENAMES)\/2):]\n\nTRAINING_FILENAMES_1 = TRAINING_FILENAMES + VALIDATION_FILENAMES_1\nTRAINING_FILENAMES_2 = TRAINING_FILENAMES + VALIDATION_FILENAMES_2\n\nNUM_TRAINING_IMAGES_1 = count_data_items(TRAINING_FILENAMES_1)\nNUM_TRAINING_IMAGES_2 = count_data_items(TRAINING_FILENAMES_2)\n\nNUM_VALIDATION_IMAGES = (1 - SKIP_VALIDATION) * count_data_items(VALIDATION_FILENAMES)\nNUM_VALIDATION_IMAGES_1 = (1 - SKIP_VALIDATION) * count_data_items(VALIDATION_FILENAMES_1)\nNUM_VALIDATION_IMAGES_2 = (1 - SKIP_VALIDATION) * count_data_items(VALIDATION_FILENAMES_2)\n\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\n\nSTEPS_PER_EPOCH_1 = NUM_TRAINING_IMAGES_1 \/\/ BATCH_SIZE\nSTEPS_PER_EPOCH_2 = NUM_TRAINING_IMAGES_2 \/\/ BATCH_SIZE\n\nprint('Dataset: {} training_1 images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES_1, NUM_VALIDATION_IMAGES_1, NUM_TEST_IMAGES))\nprint('Dataset: {} training_2 images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES_2, NUM_VALIDATION_IMAGES_2, NUM_TEST_IMAGES))","89251fa2":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","f300cc82":"img_size=512\ndef random_blockout(img, sl=0.1, sh=0.2, rl=0.4):\n\n    h, w, c = img_size, img_size, 3\n    origin_area = tf.cast(h*w, tf.float32)\n\n    e_size_l = tf.cast(tf.round(tf.sqrt(origin_area * sl * rl)), tf.int32)\n    e_size_h = tf.cast(tf.round(tf.sqrt(origin_area * sh \/ rl)), tf.int32)\n\n    e_height_h = tf.minimum(e_size_h, h)\n    e_width_h = tf.minimum(e_size_h, w)\n\n    erase_height = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_height_h, dtype=tf.int32)\n    erase_width = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_width_h, dtype=tf.int32)\n\n    erase_area = tf.zeros(shape=[erase_height, erase_width, c])\n    erase_area = tf.cast(erase_area, tf.uint8)\n\n    pad_h = h - erase_height\n    pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n    pad_bottom = pad_h - pad_top\n\n    pad_w = w - erase_width\n    pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n    pad_right = pad_w - pad_left\n\n    erase_mask = tf.pad([erase_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n    erase_mask = tf.squeeze(erase_mask, axis=0)\n    erased_img = tf.multiply(tf.cast(img,tf.float32), tf.cast(erase_mask, tf.float32))\n\n    return tf.cast(erased_img, img.dtype)","69490fc5":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    #image = tf.io.decode_image(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    #label = tf.one_hot(label, len(CLASSES))\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    image= random_blockout(image)\n    return image, label   \n\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    #dataset = dataset.map(data_augment, num_parallel_calls=AUTO)    \n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2345)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_training_dataset1():\n    dataset = load_dataset(TRAINING_FILENAMES_1, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)    \n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2345)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_training_dataset2():\n    dataset = load_dataset(TRAINING_FILENAMES_2, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)    \n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2345)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset1(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES_1, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset2(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES_2, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef data_augment2(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    #image= random_blockout(image)\n    return image, label   \n\ndef get_test_dataset2(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.map(data_augment2, num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset1a(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES_1, labeled=True, ordered=ordered)\n    dataset = dataset.map(data_augment2, num_parallel_calls=AUTO)        \n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset2a(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES_2, labeled=True, ordered=ordered)\n    dataset = dataset.map(data_augment2, num_parallel_calls=AUTO)    \n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset","0fb9fc2c":"# Need this line so Google will recite some incantations\n# for Turing to magically load the model onto the TPU\nwith strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights=None,#'noisy-student',\n        include_top=False\n    )\n\n    model1 = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n\n    \n    \nmodel1.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel1.load_weights('\/kaggle\/input\/flower-class-tpu-efficientnet-training-v2\/EfficientNetB7_validation2_35.h5')\n","80a57deb":"with strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights=None,#'noisy-student',\n        include_top=False\n    )\n\n    model1b = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n\n    \n    \nmodel1b.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel1b.load_weights('\/kaggle\/input\/flower-class-tpu-efficientnet-training-v3\/EfficientNetB7_validation2_40.h5')","6d9a28f5":"with strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights=None,#'noisy-student',\n        include_top=False\n    )\n\n    model11 = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n\n    \n    \nmodel11.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel11.load_weights('\/kaggle\/input\/flower-class-tpu-efficientnet-training-v2\/EfficientNetB7_validation1_35.h5')","2a79d8f2":"with strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights=None,#'noisy-student',\n        include_top=False\n    )\n\n    model11b = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n\n    \n    \nmodel11b.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel11b.load_weights('\/kaggle\/input\/flower-class-tpu-efficientnet-training-v3\/EfficientNetB7_validation1_40.h5')","1ff5a4f1":"# Need this line so Google will recite some incantations\n# for Turing to magically load the model onto the TPU\nwith strategy.scope():\n    rnet = DenseNet201(\n        input_shape=(512, 512, 3),\n        weights=None,#'imagenet',\n        include_top=False\n    )\n\n    model2 = tf.keras.Sequential([\n        rnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel2.load_weights('\/kaggle\/input\/flower-class-tpu-densenet-training-v2\/DenseNet201_validation2_35.h5')\n","d5c1d08b":"with strategy.scope():\n    rnet = DenseNet201(\n        input_shape=(512, 512, 3),\n        weights=None,#'imagenet',\n        include_top=False\n    )\n\n    model2b = tf.keras.Sequential([\n        rnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2b.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel2b.load_weights('\/kaggle\/input\/flower-class-tpu-densenet-training-v3\/DenseNet201_validation2_50.h5')","1abf0d62":"with strategy.scope():\n    rnet = DenseNet201(\n        input_shape=(512, 512, 3),\n        weights=None,#'imagenet',\n        include_top=False\n    )\n\n    model22 = tf.keras.Sequential([\n        rnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel22.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel22.load_weights('\/kaggle\/input\/flower-class-tpu-densenet-training-v2\/DenseNet201_validation1_35.h5')","9b7c2e75":"with strategy.scope():\n    rnet = DenseNet201(\n        input_shape=(512, 512, 3),\n        weights=None,#'imagenet',\n        include_top=False\n    )\n\n    model22b = tf.keras.Sequential([\n        rnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel22b.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=[]\n)\n\nmodel22b.load_weights('\/kaggle\/input\/flower-class-tpu-densenet-training-v3\/DenseNet201_validation1_50.h5')","6ac9864a":"from scipy.special import logit, expit\nimport pandas as pd","d09f729b":"SKIP_VALIDATION = False\n\nif not SKIP_VALIDATION:\n    cmdataset1a = get_validation_dataset1a(ordered=True)\n    cmdataset2a = get_validation_dataset2a(ordered=True)\n    images_ds1a = cmdataset1a.map(lambda image, label: image)\n    images_ds2a = cmdataset2a.map(lambda image, label: image)\n    \n    cmdataset1 = get_validation_dataset1(ordered=True)\n    cmdataset2 = get_validation_dataset2(ordered=True)\n    images_ds1 = cmdataset1.map(lambda image, label: image)\n    images_ds2 = cmdataset2.map(lambda image, label: image)\n    labels_ds1 = cmdataset1.map(lambda image, label: label).unbatch()\n    labels_ds2 = cmdataset2.map(lambda image, label: label).unbatch()\n    \n    cm_correct_labels1 = next(iter(labels_ds1.batch(NUM_VALIDATION_IMAGES))).numpy()\n    cm_correct_labels2 = next(iter(labels_ds2.batch(NUM_VALIDATION_IMAGES))).numpy()    \n    cm_correct_labels = np.concatenate((cm_correct_labels1,cm_correct_labels2),axis=0)\n    \n    valid_1 = model11.predict(images_ds1)  \n    valid_2 = model1.predict(images_ds2)    \n    m = np.concatenate((valid_1,valid_2),axis=0) \n    \n    valid_1 = model11.predict(images_ds1a)  \n    valid_2 = model1.predict(images_ds2a)    \n    m2 = np.concatenate((valid_1,valid_2),axis=0)\n    \n    for i in range(104):\n        m[:,i] = np.nan_to_num(logit(m[:,i]))\n        m2[:,i] = np.nan_to_num(logit(m2[:,i]))\n        \n    valid_1 = model11b.predict(images_ds1)  \n    valid_2 = model1b.predict(images_ds2)    \n    mb = np.concatenate((valid_1,valid_2),axis=0)\n    \n    valid_1 = model11b.predict(images_ds1a)  \n    valid_2 = model1b.predict(images_ds2a)    \n    m2b = np.concatenate((valid_1,valid_2),axis=0)\n\n    for i in range(104):\n        mb[:,i] = np.nan_to_num(logit(mb[:,i]))\n        m2b[:,i] = np.nan_to_num(logit(m2b[:,i]))\n        \n        \n    m = 0.5*m+0.5*mb        \n    m2 = 0.5*m2+0.5*m2b \n    del mb,m2b    \n    \n    alpha_best = 0\n    score_best = 0\n    for alpha in np.linspace(0,1,101):\n        alpha = np.round(alpha,2)\n        cm_probabilities = alpha*m+(1-alpha)*m2\n        if alpha == 0:\n            probabilities = cm_probabilities\n        cm_predictions = np.argmax(cm_probabilities, axis=-1)\n        auxi = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n        print('alpha:',alpha,'--- f1_score:',auxi)\n        if auxi > score_best:\n            score_best = auxi\n            alpha_best = alpha\n            probabilities = cm_probabilities\n    best_score1 = score_best        \n    best_alpha1 = alpha_best\n    cm_probabilities1 = probabilities\nelse:\n    best_alpha1 = 0.50","35eaad30":"print(best_score1)      \nprint(best_alpha1)","f87f2e63":"if not SKIP_VALIDATION:   \n    valid_1 = model22.predict(images_ds1)  \n    valid_2 = model2.predict(images_ds2)    \n    mm = np.concatenate((valid_1,valid_2),axis=0)\n    \n    valid_1 = model22.predict(images_ds1a)  \n    valid_2 = model2.predict(images_ds2a)    \n    mm2 = np.concatenate((valid_1,valid_2),axis=0)\n\n    for i in range(104):\n        mm[:,i] = np.nan_to_num(logit(mm[:,i]))\n        mm2[:,i] = np.nan_to_num(logit(mm2[:,i]))\n        \n        \n    valid_1 = model22b.predict(images_ds1)  \n    valid_2 = model2b.predict(images_ds2)    \n    mmb = np.concatenate((valid_1,valid_2),axis=0)\n    \n    valid_1 = model22b.predict(images_ds1a)  \n    valid_2 = model2b.predict(images_ds2a)    \n    mm2b = np.concatenate((valid_1,valid_2),axis=0)\n    \n    for i in range(104):\n        mmb[:,i] = np.nan_to_num(logit(mmb[:,i]))\n        mm2b[:,i] = np.nan_to_num(logit(mm2b[:,i]))\n        \n        \n    mm = 0.5*mm+0.5*mmb        \n    mm2 = 0.5*mm2+0.5*mm2b \n    del mmb,mm2b    \n    \n    alpha_best = 0\n    score_best = 0\n    for alpha in np.linspace(0,1,101):\n        alpha = np.round(alpha,2)\n        cm_probabilities = alpha*mm+(1-alpha)*mm2\n        if alpha == 0:\n            probabilities = cm_probabilities\n        cm_predictions = np.argmax(cm_probabilities, axis=-1)\n        auxi = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n        print('alpha:',alpha,'--- f1_score:',auxi)\n        if auxi > score_best:\n            score_best = auxi\n            alpha_best = alpha\n            probabilities = cm_probabilities\n    best_score2 = score_best        \n    best_alpha2 = alpha_best\n    cm_probabilities2 = probabilities\nelse:\n    best_alpha2 = 0.50","3074df2e":"print(best_score2)      \nprint(best_alpha2)","cc559f97":"if not SKIP_VALIDATION:\n    \n    #for i in range(104):\n    #    cm_probabilities1[:,i] = expit(cm_probabilities1[:,i])\n    #    cm_probabilities2[:,i] = expit(cm_probabilities2[:,i])\n    \n    alpha_best = 0\n    score_best = 0\n    for alpha in np.linspace(0,1,101):\n        alpha = np.round(alpha,2)\n        cm_probabilities = alpha*cm_probabilities1+(1-alpha)*cm_probabilities2\n        if alpha == 0:\n            probabilities = cm_probabilities\n        cm_predictions = np.argmax(cm_probabilities, axis=-1)\n        auxi = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n        print('alpha:',alpha,'--- f1_score:',auxi)\n        if auxi > score_best:\n            score_best = auxi\n            alpha_best = alpha\n            probabilities = cm_probabilities\n    best_score3 = score_best        \n    best_alpha3 = alpha_best\n    cm_probabilities3 = probabilities\nelse:\n    best_alpha3 = 0.5","36d115a5":"print(best_score3)      \nprint(best_alpha3)","b1983b77":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\ntest_ds2 = get_test_dataset2(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\ntest_images_ds2 = test_ds2.map(lambda image, idnum: image)\n\n#############\n\nm1 = model1.predict(test_images_ds) \nm11 = model11.predict(test_images_ds)\n\nm1b = model1.predict(test_images_ds2) \nm11b = model11.predict(test_images_ds2)\n\nm2 = model1b.predict(test_images_ds) \nm22 = model11b.predict(test_images_ds)\n\nm2b = model1b.predict(test_images_ds2) \nm22b = model11b.predict(test_images_ds2)\n\n\nfor i in range(104):\n    m1[:,i] = np.nan_to_num(logit(m1[:,i]))\n    m11[:,i] = np.nan_to_num(logit(m11[:,i]))\n    m1b[:,i] = np.nan_to_num(logit(m1b[:,i]))\n    m11b[:,i] = np.nan_to_num(logit(m11b[:,i]))\n    m2[:,i] = np.nan_to_num(logit(m2[:,i]))\n    m22[:,i] = np.nan_to_num(logit(m22[:,i]))\n    m2b[:,i] = np.nan_to_num(logit(m2b[:,i]))\n    m22b[:,i] = np.nan_to_num(logit(m22b[:,i]))    \n    \n\n\nm1 = 0.25*m1+0.25*m11+0.25*m1b+0.25*m11b\nm2 = 0.25*m2+0.25*m22+0.25*m2b+0.25*m22b\ndel m11,m22,m1b,m2b,m11b,m22b\n    \ncm_probabilities1 = best_alpha1*m1+(1-best_alpha1)*m2\n\n\n#############\n\nm1 = model2.predict(test_images_ds) \nm11 = model22.predict(test_images_ds)\n\nm1b = model2.predict(test_images_ds2) \nm11b = model22.predict(test_images_ds2)\n\nm2 = model2b.predict(test_images_ds) \nm22 = model22b.predict(test_images_ds)\n\nm2b = model2b.predict(test_images_ds2) \nm22b = model22b.predict(test_images_ds2)\n\n\nfor i in range(104):\n    m1[:,i] = np.nan_to_num(logit(m1[:,i]))\n    m11[:,i] = np.nan_to_num(logit(m11[:,i]))\n    m1b[:,i] = np.nan_to_num(logit(m1b[:,i]))\n    m11b[:,i] = np.nan_to_num(logit(m11b[:,i]))\n    m2[:,i] = np.nan_to_num(logit(m2[:,i]))\n    m22[:,i] = np.nan_to_num(logit(m22[:,i]))\n    m2b[:,i] = np.nan_to_num(logit(m2b[:,i]))\n    m22b[:,i] = np.nan_to_num(logit(m22b[:,i]))    \n    \n\n\nm1 = 0.25*m1+0.25*m11+0.25*m1b+0.25*m11b\nm2 = 0.25*m2+0.25*m22+0.25*m2b+0.25*m22b\ndel m11,m22,m1b,m2b,m11b,m22b\n\n    \ncm_probabilities2 = best_alpha2*m1+(1-best_alpha2)*m2\n\n#############\n\ncm_probabilities3 = best_alpha3*cm_probabilities1+(1-best_alpha3)*cm_probabilities2\n\npredictions = np.argmax(cm_probabilities3, axis=-1)\nprint(predictions)\n\nfor i in range(104):\n    cm_probabilities3[:,i] = expit(cm_probabilities3[:,i])\n    #cm_probabilities2[:,i] = expit(cm_probabilities2[:,i])\n    #cm_probabilities1[:,i] = expit(cm_probabilities1[:,i])    \n    \n    \npd.DataFrame(cm_probabilities3).to_csv('probabilities.csv', index=False)\n#pd.DataFrame(cm_probabilities2).to_csv('probabilities2.csv', index=False)\n#pd.DataFrame(cm_probabilities2).to_csv('probabilities1.csv', index=False)\n\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","5ef2e399":"# Custom LR schedule","987ade27":"## Load Model into TPU","f6c26588":"# Configurations","bd008370":"# Training Model","e9d4baf2":"## Datasets Functions"}}