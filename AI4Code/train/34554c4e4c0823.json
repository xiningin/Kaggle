{"cell_type":{"908e5242":"code","1e4730eb":"code","f1930f08":"code","a07fd250":"code","3df8dcef":"code","73f94499":"code","91ef3b02":"code","5a1283b1":"code","f5da4bed":"code","82ac04da":"code","c900a6c4":"code","7fc1a1ff":"code","dd73efc8":"code","f4c796aa":"code","836ef036":"code","07c8b2db":"code","87713ad5":"code","e9a453e9":"code","aff5069b":"code","2b6e2836":"code","1a2e504b":"markdown","03bfe0d2":"markdown","0319f777":"markdown","40a555c9":"markdown","f0dd458d":"markdown","3818a7d4":"markdown","254a5af1":"markdown","9a56ee9f":"markdown","905da4d2":"markdown","393132d6":"markdown","896ad347":"markdown"},"source":{"908e5242":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nimport tensorflow as tf\nimport keras\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n%matplotlib inline","1e4730eb":"df = pd.read_csv('..\/input\/traffic\/DataSet\/train27303.csv')\ndf.head()","f1930f08":"df1 = df.reset_index()['hourly_traffic_count']\ndf1.head()","a07fd250":"df1 = df1.iloc[:9792,]\ndf1.tail()","3df8dcef":"plt.figure(figsize=(20,10))\nplt.plot(df1)\nplt.show()","73f94499":"def create_dataset(dataset, window=1):\n    dataX, dataY= [], []\n    for i in range(len(dataset)-window-1):\n        a = dataset[i:(i+window),0]\n        dataX.append(a)\n        dataY.append(dataset[i+window,0])\n    return np.array(dataX), np.array(dataY)","91ef3b02":"scaler = MinMaxScaler(feature_range=(0,1))\ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","5a1283b1":"training_size = int(len(df1)*0.80)\ntest_size = len(df1)-training_size\ntrain_data, test_data = df1[0:training_size,:], df1[training_size:len(df1),:1]","f5da4bed":"window = 288\nX_train,y_train = create_dataset(train_data,window)\nX_test, y_test = create_dataset(test_data,window)","82ac04da":"model = Sequential()\nmodel.add(Dense(40, input_dim=window, activation='relu'))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(40, activation='relu'))\nmodel.add(Dense(1))","c900a6c4":"opt  = keras.optimizers.Adagrad(learning_rate = 0.05)","7fc1a1ff":"model.compile(optimizer=opt ,loss='mean_squared_error')","dd73efc8":"model.summary()","f4c796aa":"model.fit(X_train, y_train, epochs=100, batch_size=10, verbose=1)","836ef036":"train_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)","07c8b2db":"train_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\ny_train = scaler.inverse_transform(y_train.reshape(-1, 1))\ny_test = scaler.inverse_transform(y_test.reshape(-1, 1))","87713ad5":"train_predict = train_predict.astype(int)\ntest_predict = test_predict.astype(int)\ny_train = y_train.astype(int)\ny_test = y_test.astype(int)","e9a453e9":"from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score\nprint('RMSE-train:',math.sqrt(mean_squared_error(y_train,train_predict)))\nprint('MAE-train:',mean_absolute_error(y_train,train_predict))\nprint('R_2-train:',r2_score(y_train,train_predict))","aff5069b":"print('RMSE-test:',math.sqrt(mean_squared_error(y_test,test_predict)))\nprint('MAE-test:',mean_absolute_error(y_test,test_predict))\nprint('R_2-train:',r2_score(y_test,test_predict))","2b6e2836":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[window:len(train_predict)+window, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(window*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.figure(figsize=(20,10))\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","1a2e504b":"# Visualization\n\nBlue line is the actual dataset, orange is the training and green is the test results\n","03bfe0d2":"# Traffic Prediction With Multilayer Perceptron","0319f777":"In this notebook, we are going to see the implementation of Multilayer Perceptron (or you may call it as ANN) for forecasting the traffic number\/count of a certain area. \n\nThe inspiration behind applying multilayer perceptron on traffic forecasting is the paper [**Deep Neural Networks for Traffic Flow Prediction**](https:\/\/ieeexplore.ieee.org\/abstract\/document\/7881687\/)\n\nThough the paper is based on diiferent dataset and their research was on a classification problem, but that gave me inspiration to implement their model with the same hyperparameters to predict traffic count(regression problem). \nBefore starting, I would like to give credits to [this blog](https:\/\/machinelearningmastery.com\/time-series-prediction-with-deep-learning-in-python-with-keras\/) and also [this video of Mr. Kris Naik](https:\/\/www.youtube.com\/watch?v=H6du_pfuznE&t=1677s). These were really helpful. \n\nSo, I hope you will enjoy this notebook. Lets get started","40a555c9":"# Accuracy Measures\n","f0dd458d":"# Multilayer perceptron Model\n\nThis is the exact model used in the Research Paper mentioned above. Just to avoid overfitting, I have changed the number of epochs from 2000 to 100. I tried with 2000 epochs, it causes overfitting, hence, providing a bad test score.","3818a7d4":"# Reshaping dataset with Window size=288 ","254a5af1":"# Feature Scaling for easier computaion","9a56ee9f":"# Predicting the Future Traffic Count","905da4d2":"# Train test split (80% train, 20% test)","393132d6":"# Conclusion\n\nHere with a simple Multilayer perceptron we got a R-squared score of 85% test accuracy. This result can be improved with proper Hyper Paramenter Tuning. But if the dataset has long term dependency, then RNN like LSTM, GRU, ConvLSTM can perform much better. As the traffic data is seasonal at each day, so the Long Term Dependency is less, hence Multilayer Perceptrons(or simple ANN) performed well in this notebook.\n","896ad347":"# Importing Dataset & Visualize"}}