{"cell_type":{"ac556ff7":"code","b4670a5f":"code","f5d524f9":"code","68a60acf":"code","4ef0bcd0":"code","0d390488":"code","e908aec2":"code","86589684":"code","f8c4f59e":"code","375448cf":"code","ee07e7fa":"code","09b21de5":"code","1ac1baf8":"code","c4f3cde6":"code","76c20351":"code","ea0874e8":"code","037a1b84":"code","273d3aed":"code","82d8d0d1":"code","f46c6b75":"code","59186b7c":"code","d536687e":"code","bd976e3b":"code","ba4fcc08":"code","3a247ea4":"code","5055afe4":"code","dc3be467":"code","0ee88446":"code","59eab7d8":"code","e456436f":"code","cca19ade":"code","b3a346b6":"code","325c432f":"code","db80a0f9":"code","086a718e":"code","2238d7e0":"code","bf6f2327":"code","e54d24b3":"code","930b1fe9":"code","08a45980":"code","5a44a8e8":"code","aaade859":"code","7958652b":"code","31fac9d8":"markdown","c2b9782f":"markdown","359340e9":"markdown","33b4076a":"markdown","36808d44":"markdown","808c0213":"markdown","f87b246f":"markdown","1c12b471":"markdown","fbf68822":"markdown","75bcd62a":"markdown","1d6474b2":"markdown","917325e9":"markdown","6c750bbf":"markdown","843e2c8c":"markdown","ebd72ff5":"markdown"},"source":{"ac556ff7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b4670a5f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom time import time\nimport warnings\nwarnings.filterwarnings('ignore')","f5d524f9":"%%time\ntrain_df=pd.read_csv('..\/input\/train.csv')\ntest_df=pd.read_csv('..\/input\/test.csv')","68a60acf":"train_df.head()","4ef0bcd0":"train_df.shape","0d390488":"test_df.shape","e908aec2":"#checking for missing values\ntrain_df.isnull().sum()","86589684":"train_df['groupId'].nunique()","f8c4f59e":"train_df.matchId.nunique()","375448cf":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.winPlacePerc,kde=True)\nplt.title('Winning % Dist.')","ee07e7fa":"print (\"The average winning percentage is %0.2f \"%train_df.winPlacePerc.mean())\nprint (\"%0.2f people have not won so far.\"%(len(train_df[train_df.winPlacePerc==0])\/train_df.shape[0]*100))\nprint (\"%0.2f people have won every time.\"%(len(train_df[train_df.winPlacePerc==1])\/train_df.shape[0]*100))","09b21de5":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.winPoints)\nplt.title('Points Distribution')","1ac1baf8":"print (\"Maximum points won: %d\"%max(train_df.winPoints))\nprint (\"Min points won: %d\"%min(train_df.winPoints))\nprint (\"Average points won: %0.2f\"%(train_df.winPoints.mean()))","c4f3cde6":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.walkDistance)\nplt.title('Walking Distance Distribution')","76c20351":"print (\"Maximum distance walked: %d\"%max(train_df.walkDistance))\nprint (\"Min distance walked: %d\"%min(train_df.walkDistance))\nprint (\"Average distance walked: %0.2f\"%(train_df.walkDistance.mean()))","ea0874e8":"df=train_df.walkDistance[train_df.winPlacePerc==0.9].sort_values(ascending=False)","037a1b84":"print (\"Teams with a winning % of more than 0.9 walk an average of: 2137.13m\")\nprint (\"No. of such teams are: %d\"%len(df))","273d3aed":"plt.figure(figsize=(15,7))\nsns.jointplot(x='walkDistance',y='winPlacePerc',data=train_df,color='green',height=15,ratio=2)\nplt.show()","82d8d0d1":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='kills',orient='h')\nplt.title('Kills Count plot')","f46c6b75":"plt.figure(figsize=(15,7))\nsns.jointplot(x='kills',y='winPlacePerc',data=train_df,color='red',height=10,ratio=2)\nplt.show()","59186b7c":"print (\"max kills: %d\"%max(train_df.kills))","d536687e":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='boosts',orient='h')\nplt.title('Boosts  Used')","bd976e3b":"plt.figure(figsize=(15,7))\nsns.jointplot(x='boosts',y='winPlacePerc',data=train_df,color='orange',height=10,ratio=2)\nplt.show()","ba4fcc08":"sum(train_df.boosts==18)","3a247ea4":"plt.figure(figsize=(15,7))\ntrain_df.revives.value_counts().plot(kind='bar')\nplt.title('Times Revived')","5055afe4":"plt.figure(figsize=(15,7))\nsns.jointplot(x='revives',y='winPlacePerc',data=train_df,color='green',height=10,ratio=2)\nplt.show()","dc3be467":"train_df.columns","0ee88446":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='headshotKills',orient='h')\n","59eab7d8":"plt.figure(figsize=(15,7))\nsns.jointplot(x='headshotKills',y='walkDistance',data=train_df,color='green',height=10,ratio=2)\nplt.show()","e456436f":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='killPlace')\n","cca19ade":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.damageDealt)\nplt.title('Damage Dealt')\n","b3a346b6":"plt.figure(figsize=(15,7))\nsns.jointplot(x='heals',y='winPlacePerc',data=train_df,color='green',height=10,ratio=2)\nplt.show()","325c432f":"plt.figure(figsize=(15,7))\nsns.violinplot(data=train_df,x='killStreaks')\nplt.show()","db80a0f9":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='roadKills')\nplt.show()","086a718e":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.rideDistance)\nplt.title('Ride Distance')\n","2238d7e0":"plt.figure(figsize=(15,7))\nsns.distplot(train_df.swimDistance)\nplt.title('Swim Distance')\n","bf6f2327":"plt.figure(figsize=(15,7))\nsns.violinplot(data=train_df,x='numGroups')\nplt.show()\n#train_df.numGroups","e54d24b3":"plt.figure(figsize=(15,7))\nsns.pointplot(data=train_df,x='numGroups',y='winPlacePerc')","930b1fe9":"plt.figure(figsize=(15,7))\nsns.countplot(data=train_df,x='numGroups')\nplt.show()\n#train_df.numGroups","08a45980":"plt.figure(figsize=(15,7))\nsns.pointplot(data=train_df,x='vehicleDestroys',y='winPlacePerc')","5a44a8e8":"solos = train_df[train_df['numGroups']>50]\nduos = train_df[(train_df['numGroups']>25) & (train_df['numGroups']<=50)]\nsquads = train_df[train_df['numGroups']<=25]\nprint(\"There are {} ({:.2f}%) solo games, {} ({:.2f}%) duo games and {} ({:.2f}%) squad games.\".format(len(solos), 100*len(solos)\/len(train_df), len(duos), 100*len(duos)\/len(train_df), len(squads), 100*len(squads)\/len(train_df),))","aaade859":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='kills',y='winPlacePerc',data=solos,color='black',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\nplt.text(37,0.6,'Solos',color='black',fontsize = 17,style = 'italic')\nplt.text(37,0.55,'Duos',color='#CC0000',fontsize = 17,style = 'italic')\nplt.text(37,0.5,'Squads',color='#3399FF',fontsize = 17,style = 'italic')\nplt.xlabel('Number of kills',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Solo vs Duo vs Squad Kills',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","7958652b":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='DBNOs',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\nsns.pointplot(x='DBNOs',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\nsns.pointplot(x='assists',y='winPlacePerc',data=duos,color='#FF6666',alpha=0.8)\nsns.pointplot(x='assists',y='winPlacePerc',data=squads,color='#CCE5FF',alpha=0.8)\nsns.pointplot(x='revives',y='winPlacePerc',data=duos,color='#660000',alpha=0.8)\nsns.pointplot(x='revives',y='winPlacePerc',data=squads,color='#000066',alpha=0.8)\nplt.text(14,0.5,'Duos - Assists',color='#FF6666',fontsize = 17,style = 'italic')\nplt.text(14,0.45,'Duos - DBNOs',color='#CC0000',fontsize = 17,style = 'italic')\nplt.text(14,0.4,'Duos - Revives',color='#660000',fontsize = 17,style = 'italic')\nplt.text(14,0.35,'Squads - Assists',color='#CCE5FF',fontsize = 17,style = 'italic')\nplt.text(14,0.3,'Squads - DBNOs',color='#3399FF',fontsize = 17,style = 'italic')\nplt.text(14,0.25,'Squads - Revives',color='#000066',fontsize = 17,style = 'italic')\nplt.xlabel('Number of DBNOs\/Assits\/Revives',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Duo vs Squad DBNOs, Assists, and Revives',fontsize = 20,color='blue')\nplt.grid()\nplt.show()\n","31fac9d8":"### great no missing data","c2b9782f":"Well, undoubtably, more you kill, more you win!","359340e9":"## Load the files","33b4076a":"And, we have a champion wilth around 60 kills, WoW!","36808d44":"People have used more than 40 heals, to maintain a **winning percentage of greater than 0.8**","808c0213":"Well, I have not played PubG before, but this dataset is really nice to help me understand.<br>\nNow, some of the plots have been borrowed from @deffro","f87b246f":"Less kills happen at `Place 100`","1c12b471":"- So, There are 1888732 unique teams.\n- and, 47734 unique matches that have been played.","fbf68822":"People with average wins, are revived more as compared to the people who has 100% win!","75bcd62a":"Less road kills have happened.","1d6474b2":"People walk alot to kill and win.","917325e9":"People swim very very less for travelling.","6c750bbf":"## Let's take a peek at the data in hand","843e2c8c":"As expected, people with more `headshot kills` walk less. ","ebd72ff5":"> 3 People have used boosts around 18 times to win."}}