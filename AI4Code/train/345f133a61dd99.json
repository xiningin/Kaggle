{"cell_type":{"01e3aed4":"code","52c921bb":"code","07fa9c1d":"code","a12d1acf":"code","a9b74600":"code","0bd0baae":"code","40a30946":"code","bde02b84":"code","4d0e3fbc":"code","7a5fcd31":"code","92732afe":"code","7d3eb636":"markdown","01735ffd":"markdown","d4f69e72":"markdown","97d57ae0":"markdown","0525163b":"markdown","c055841b":"markdown","7260b565":"markdown","7f16469e":"markdown","8ef61409":"markdown","e23ed239":"markdown","c568d6c3":"markdown","fb0c1d56":"markdown","4a003d78":"markdown","cf0a2ccd":"markdown","ffba0e3d":"markdown","6b1f75fa":"markdown"},"source":{"01e3aed4":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import ParameterGrid\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier\nimport optuna\n        \ninput_path = Path('\/kaggle\/input\/tabular-playground-series-mar-2021\/')","52c921bb":"train = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ntest = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ntarget = train.pop('target')\nsubmission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')","07fa9c1d":"cat_cols = [col for col in train.columns if 'cat' in col]\n\ntrain[cat_cols] = train[cat_cols].astype('category')\ntest[cat_cols] = test[cat_cols].astype('category')","a12d1acf":"X_train, X_valid, y_train, y_valid = train_test_split(train, target, test_size=0.1, random_state=0)","a9b74600":"%%time\nmodel = LGBMClassifier(random_state=0, metric='auc')\nmodel.fit(X_train, y_train)\ny_pred = model.predict_proba(X_valid)[:,1]\nauc = roc_auc_score(y_valid, y_pred)\nprint('AUC =', f'{auc:0.5f}')","0bd0baae":"def objective(trial):\n    params = {\n        'metric': 'auc',\n        'random_state': 0,\n        'n_estimators': trial.suggest_categorical('n_estimators', [1000]),\n        'learning_rate': trial.suggest_float('learning_rate', 0.001, 0.1),\n        'reg_lambda': trial.suggest_float('reg_lambda', 0.001, 10.0),\n        'reg_alpha': trial.suggest_float('reg_alpha', 0.001, 10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.1, 0.2, 0.3, 0.4, 0.5]),\n        'min_child_samples': trial.suggest_int('min_child_samples', 1, 300),\n        'max_depth': trial.suggest_int('max_depth', 6, 127),\n        'num_leaves': trial.suggest_int('num_leaves', 31, 128),\n        'cat_smooth': trial.suggest_int('cat_smooth', 10, 100),\n        'cat_l2': trial.suggest_int('cat_l2', 1, 20),\n    }\n    model = LGBMClassifier(**params) \n    model.fit(X_train, y_train, eval_set=[(X_valid,y_valid)], early_stopping_rounds=100, verbose=0)\n    y_pred = model.predict_proba(X_valid)[:,1]\n    auc = roc_auc_score(y_valid, y_pred)\n    \n    return auc","40a30946":"%%time\nstudy = optuna.create_study(direction='maximize', sampler=optuna.samplers.TPESampler(seed=0))\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best parameters:', study.best_trial.params)\nprint('Best AUC:', study.best_trial.value)","bde02b84":"optuna.visualization.plot_optimization_history(study)","4d0e3fbc":"params = study.best_params\nparams['random_state'] = 0\nparams['metric'] = 'auc'\nparams['n_estimators'] = 20000","7a5fcd31":"n_folds = 10\nkf = KFold(n_splits=n_folds, shuffle=True, random_state=0)\ny_pred = np.zeros(test.shape[0])\n\nfor fold, (train_index, valid_index) in enumerate(kf.split(train, target)):\n    print(\"Running Fold {}\".format(fold + 1))\n    X_train, X_valid = pd.DataFrame(train.iloc[train_index]), pd.DataFrame(train.iloc[valid_index])\n    y_train, y_valid = target.iloc[train_index], target.iloc[valid_index]\n    model = LGBMClassifier(**params)\n    model.fit(X_train, y_train, eval_set=[(X_valid, y_valid)], early_stopping_rounds=1000, verbose=0)\n    print(\"  AUC: {}\".format(roc_auc_score(y_valid, model.predict_proba(X_valid)[:, 1])))\n    y_pred += model.predict_proba(test)[:,1]    \n\ny_pred \/= n_folds\n\nprint(\"\")\nprint(\"Done!\")","92732afe":"submission['target'] = y_pred\nsubmission.to_csv('lgbm_optuna_enc.csv')","7d3eb636":"# Data split and base model","01735ffd":"# Set objective function for Optuna with parameters and their ranges","d4f69e72":"# Visualize optimization history","97d57ae0":"# Recover best parameters found and build final predictions","0525163b":"Last month we had a regression problem and now we have a classification one. So I'm using `LGBMClassifier` instead of `LGBMRegressor`. For the base model, we need only set our metric to `auc`.","c055841b":"If you found this notebook helpful, please upvote \ud83d\udc4d and also feel free to leave comments and suggestions below. Thanks!","7260b565":"# Encode categorical variables","7f16469e":"# LightGBM with parameter tunning using Optuna","8ef61409":"I am using the same parameters and ranges I did last time, but of course you can try to find more suitable ones.","e23ed239":"In last month's competition, the metric used was the RMSE (root mean squared error), but this month it is the AUC (area under curve). So this time we want to **maximize** it. In [this notebook](https:\/\/www.kaggle.com\/ekozyreff\/tps-2021-03-roc-and-auc-tutorial) I wrote a brief tutorial about ROC and AUC.","c568d6c3":"This notebook is based on the one I used in February. It can help you get started with LGBM and Optuna, in case you have not used these technologies before. I believe there is a lot of room for improvement and I will work on it throughout the competition.","fb0c1d56":"The AUC is 0.89125, which is a little better than the score obtained with the [Getting Started Notebook](https:\/\/www.kaggle.com\/inversion\/get-started-mar-tabular-playground-competition) random forest model (0.87176).","4a003d78":"**VERSION 7**: I tried standardizing the continuous variables, but the results were a little worse.\n\n**VERSION 8**: The continuous variables are not standardized anymore. The categorical variables are now label encoded independntly in each column, since an \"A\" in column `cat0` does not necessarily mean the same thing as an \"A\" in the column `cat1`.\n\n**VERSION 10**: Added `cat_l2` to list of parameters being optimized.\n\n**VERSION 11**: Now Using LGBM to recognize categorical features by changing the variable type to \"category\". Parameter `cat_feature` removed from list.","cf0a2ccd":"Finally, let us split the training data in 10 folds and build our final model.","ffba0e3d":"Let's recover the best parameters for our model according to the optimization performed by Optuna. \n\nTo perform the final predictions, I increased the number of estimators to 20000, since this worked well in previous tests.","6b1f75fa":"# Load libraries and data"}}