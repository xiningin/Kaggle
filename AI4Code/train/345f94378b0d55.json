{"cell_type":{"8d891db2":"code","c7246c18":"code","96204d6a":"code","0c91c426":"code","9646698c":"code","e173161a":"code","372d0534":"code","6531f7df":"code","5d185573":"code","03028718":"code","79b81c49":"code","1ce87f78":"code","d2a34a38":"code","1ddcf7c2":"code","37213dda":"code","9540700c":"code","96b30389":"code","fdfe6b8d":"code","34217744":"code","ac224313":"code","e127c66a":"code","a5ef9442":"code","d57632c7":"code","676c95f7":"code","d13a8f32":"code","ddb89534":"code","71f818f0":"code","9920245f":"code","951fef59":"code","199e7523":"code","a35d3aa1":"code","c6c9bebe":"markdown","824c7540":"markdown","e230f33e":"markdown","5ee8a981":"markdown","eebacd8e":"markdown","ac1c9ba6":"markdown","1337cf00":"markdown","a894ceab":"markdown","23581a8f":"markdown","39cd3263":"markdown","d8624906":"markdown"},"source":{"8d891db2":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n#importing ploting libraries\nimport matplotlib.pyplot as plt   \n\n#importing seaborn for statistical plots\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nfrom sklearn import metrics","c7246c18":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-prediction\/heart.csv\")\ndf.head()","96204d6a":"df.shape","0c91c426":"df.info()","9646698c":"df.describe()","e173161a":"df.isnull().sum()","372d0534":"df.duplicated().sum()","6531f7df":"sns.countplot(x = \"HeartDisease\", data = df)\ndf.loc[:, 'HeartDisease'].value_counts()","5d185573":"df[\"ChestPainType\"].value_counts().plot(kind=\"bar\")","03028718":"df[\"RestingECG\"].value_counts().plot(kind=\"bar\")","79b81c49":"df[\"ST_Slope\"].value_counts().plot(kind=\"bar\")","1ce87f78":"df['HeartDisease'] = df['HeartDisease'].astype('category')","d2a34a38":"df=pd.get_dummies(df,columns=[\"Sex\",\"ChestPainType\",\"RestingECG\",\"ExerciseAngina\",\"ST_Slope\"],drop_first=True)","1ddcf7c2":"df.head()","37213dda":"df[\"Age\"]=df[\"Age\"]\/10\ndf[\"RestingBP\"]=df[\"RestingBP\"]\/100\ndf[\"Cholesterol\"]=df[\"Cholesterol\"]\/100\ndf[\"MaxHR\"]=df[\"MaxHR\"]\/100\n","9540700c":"df.head()","96b30389":"sns.heatmap(df.iloc[:,0:7].corr(),annot=True)\nplt.show()","fdfe6b8d":"count=df.dtypes[(df.dtypes==\"float64\") & (df.dtypes!=\"int\")].index\nplt.figure(figsize=(10,10))\ndf[count].boxplot(vert=0)\nplt.title('with outliers',fontsize=16)\nplt.show()","34217744":"import numpy as np","ac224313":"def remove_outlier(col):\n    sorted(col)\n    Q1,Q3=np.percentile(col,[25,75])\n    IQR=Q3-Q1\n    lower_range= Q1-(1.5 * IQR)\n    upper_range= Q3+(1.5 * IQR)\n    return lower_range, upper_range","e127c66a":"for column in df[count].columns:\n    lr,ur=remove_outlier(df[column])\n    df[column]=np.where(df[column]>ur,ur,df[column])\n    df[column]=np.where(df[column]<lr,lr,df[column])","a5ef9442":"count=df.dtypes[(df.dtypes==\"float64\") & (df.dtypes!=\"bool\")].index\nplt.figure(figsize=(15,15))\ndf[count].boxplot(vert=0)\nplt.title(\"with outlier\",fontsize=10)\nplt.show()","d57632c7":"x = df.drop(\"HeartDisease\", axis = 1)\ny = df['HeartDisease']","676c95f7":"X_train, X_test, y_train, y_test = train_test_split(x, y, random_state =100 ,stratify=y, test_size = 0.3)\nprint(y_train.value_counts())","d13a8f32":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import train_test_split\n  \n    \nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25,random_state=100)\n    \nlogreg = LogisticRegression()\n \nlogreg.fit(X_train, y_train)\n  \npred_test = logreg.predict(X_test)\n   \npred_train = logreg.predict(X_train)\n  \nprint('train_accuracy',accuracy_score(y_train, pred_train))\nprint('test_accuracy',accuracy_score(y_test, pred_test))\nprint('F1 Score: %.3f' % f1_score(y_test, pred_test))\n   ","ddb89534":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nknn = KNeighborsClassifier(n_neighbors=15)\n    \n    # fitting the model\nknn.fit(X_train, y_train)\n    \n    # predict the response\\n\",\ny_pred = knn.predict(X_test)\n\n    # evaluate accuracy\\n\",\nprint(accuracy_score(y_test, y_pred))","71f818f0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x, y,test_size=0.3,random_state=0)\n\nclf=RandomForestClassifier(n_estimators=100,max_depth =8) \nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)\n \nprint('Train_accuracy',clf.score(X_train, y_train))\nprint('Test_accuracy',clf.score(X_test, y_test))\nprint('F1 Score: %.3f' % f1_score(y_test, y_pred))","9920245f":"from sklearn.ensemble import AdaBoostClassifier\nabcl = AdaBoostClassifier( n_estimators=100, learning_rate=0.2, random_state=29)\nabcl = abcl.fit(X_train, y_train)\npred_AB =abcl.predict(X_test)\nacc_AB = accuracy_score(y_test, pred_AB)\n\nacc_AB","951fef59":"from sklearn.svm import SVC\nsvc_model = SVC(C= .7, kernel='linear', gamma=2)\nsvc_model.fit(X_train, y_train)\n \nprediction = svc_model .predict(X_test)\n\n    # Random search Cross VAlidation\\n\",\n    # Grid Search Cross Validation\\n\",\nprint(svc_model.score(X_train, y_train))\nprint(svc_model.score(X_test, y_test))\n","199e7523":"svc_model = SVC(C=.1, kernel='rbf', gamma= .01)\nsvc_model.fit(X_train, y_train)\n \nprediction = svc_model .predict(X_test)\nprint(svc_model.score(X_train, y_train))\nprint(svc_model.score(X_test, y_test))\n","a35d3aa1":"from sklearn.ensemble import BaggingClassifier\n\nbgcl = BaggingClassifier(n_estimators=50, max_samples= .2, bootstrap=True, oob_score=True, random_state=20)\nbgcl = bgcl.fit(X_train, y_train)\npred_BG =bgcl.predict(X_test)\nacc_BG = accuracy_score(y_test, pred_BG)\n   \nacc_BG ","c6c9bebe":"outlier detection","824c7540":"TO KNOW MORE ABOUT DATA","e230f33e":"### --------------------------------------------------------------------","5ee8a981":"DATA IMPORTING","eebacd8e":"TO KNOW NULL VALUES","ac1c9ba6":"# Train Test Split & Normalization","1337cf00":"CHANGING FEATURE \"HeartDisease\" to a categerical variable","a894ceab":"create box plot to know co-relation","23581a8f":"run logistic algorithm","39cd3263":"label encode ","d8624906":"# Preprocessing"}}