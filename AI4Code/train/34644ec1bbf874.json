{"cell_type":{"e57158c5":"code","1506d50b":"code","a5e3f730":"code","a51bc7a1":"code","fb305832":"code","1d9dec4e":"code","460e421a":"code","97eacb66":"code","221620a1":"code","53720f60":"code","6c1319a8":"code","6b31cc46":"code","a75012c3":"code","e83faa17":"code","67f3bf40":"code","8d3780c7":"code","2b92ed6e":"code","396cb54b":"code","eec489e8":"code","b3b1b56b":"code","516aa3bd":"code","a5082b28":"code","cf25a14a":"code","e774c8b3":"code","9254dc80":"code","cf55ae2a":"code","7a2952bd":"code","8ed95d13":"code","7fce1b02":"code","346a999c":"code","5b9d7426":"code","c00f1b09":"markdown","b50d351a":"markdown","1b07de25":"markdown","954af48c":"markdown","cec49936":"markdown","4ab6a552":"markdown","d4a934b1":"markdown","28e6537d":"markdown","ad8bb4fd":"markdown","2f95ac6b":"markdown","fd2a86a0":"markdown","635cc4ac":"markdown","bdcd3164":"markdown","d1a8c080":"markdown","299647bc":"markdown","fbb01bbe":"markdown","a17a3a02":"markdown","f506817f":"markdown","0b29d7fe":"markdown","9536c91e":"markdown","6baa004a":"markdown","05fd5faf":"markdown","37d8b18c":"markdown","8113cb60":"markdown","a3f1e487":"markdown","6c8fdde1":"markdown","5f550bf6":"markdown","e8ea4912":"markdown","2c6504f2":"markdown","6e98b18c":"markdown","32e9d48b":"markdown","0c4bee0e":"markdown","c286c6f6":"markdown","b798beff":"markdown","92364c82":"markdown","711cb0c9":"markdown"},"source":{"e57158c5":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nfrom termcolor import colored\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1506d50b":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","a5e3f730":"print(colored(\"There are {} rows and {} columns in the dataset.\".format(df.shape[0],df.shape[1]),attrs=['bold']))","a51bc7a1":"plt.figure(figsize=(10,5))\nsns.heatmap(df.isnull())\nplt.show()\n\nfor i in df.columns:\n    null_rate = df[i].isna().sum() \/ len(df) * 100 \n    if null_rate > 0 :\n        print(\"{}'s null rate :{}%\".format(i,round(null_rate,2)))","fb305832":"#df.drop(['director','cast'],axis = 1,inplace = True)\ndf.drop(['director'],axis = 1,inplace = True)\ndf.head()","1d9dec4e":"df['country'].replace(np.nan, 'United States',inplace  = True)\n\ndf['cast'].replace(np.nan, 'No Data',inplace  = True)\n\nprint(colored(\n\"I will drop the missing rows from the columns 'date_added' and 'rating' since these have only {} missing rows in total.\".\n    format(df.isnull().sum().sum()),attrs=['bold']))","460e421a":"df.dropna(inplace=True)\n\nprint(colored(\"There are {} rows and {} columns after handling the missing records in the dataset.\".format(\n    df.shape[0],df.shape[1]),attrs=['bold']))","97eacb66":"# Checking the Dtype of the column\ndf.info()","221620a1":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\n\ndf['month_added']=df['date_added'].dt.month\ndf['month_name_added']=df['date_added'].dt.month_name()\ndf['year_added'] = df['date_added'].dt.year\n\n# Droping the column 'date_added' as it we have seperate columns for 'year_added' and 'month_added'\n\ndf.drop('date_added',axis=1,inplace=True)","53720f60":"df.head()","6c1319a8":"plt.figure(figsize=(10,5))\nplt.pie(df['type'].value_counts().sort_values(),labels=df['type'].value_counts().index,explode=[0.05,0],\n        autopct='%1.2f%%',colors=['Green','grey'])\nplt.show()","6b31cc46":"from collections import Counter\ncountry_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)","a75012c3":"top20country = country_count.head(20)","e83faa17":"from matplotlib import gridspec\n\nfig = plt.figure(figsize=(20, 7))\ngs = gridspec.GridSpec(nrows=1, ncols=2, height_ratios=[6], width_ratios=[10, 5])\n\nax = plt.subplot(gs[0])\nsns.barplot(top20country.index, top20country, ax=ax, palette=\"RdGy\")\nax.set_xticklabels(top20country.index, rotation='90')\nax.set_title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\n\nax2 = plt.subplot(gs[1])\nax2.pie(top20country, labels=top20country.index, shadow=True, startangle=0, colors=sns.color_palette(\"RdGy\", n_colors=20),\n       autopct='%1.2f%%')\nax2.axis('equal') \n\nplt.show()","67f3bf40":"df_tv = df[df[\"type\"] == \"TV Show\"]\ndf_movies = df[df[\"type\"] == \"Movie\"]","8d3780c7":"df_content = df['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv1 = df_tv['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_tv1['percent'] = df_tv1['count'].apply(lambda x : 100*x\/sum(df_tv1['count']))\n\n\ndf_movies1 = df_movies['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_movies1['percent'] = df_movies1['count'].apply(lambda x : 100*x\/sum(df_movies1['count']))\n\nt1 = go.Scatter(x=df_movies1['year_added'], y=df_movies1[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv1['year_added'], y=df_tv1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['year_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"brown\"))\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","2b92ed6e":"df_content = df[['month_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month_added').drop('month_added',axis=1)\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv2 = df_tv[['month_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month_added').drop('month_added',axis=1)\ndf_tv2['percent'] = df_tv2['count'].apply(lambda x : 100*x\/sum(df_tv2['count']))\n\n\ndf_movies2 = df_movies[['month_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('month_added').drop('month_added',axis=1)\ndf_movies2['percent'] = df_movies2['count'].apply(lambda x : 100*x\/sum(df_movies2['count']))\n\nt1 = go.Scatter(x=df_movies2['month_name_added'], y=df_movies2[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv2['month_name_added'], y=df_tv2[\"count\"], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['month_name_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"Brown\"))\n\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","396cb54b":"from sklearn.preprocessing import MultiLabelBinarizer \n\ndef relation_heatmap(df, title):\n    df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \n    Types = []\n    for i in df['genre']: Types += i\n    Types = set(Types)\n    print(\"There are {} types in the Netflix {} Dataset\".format(len(Types),title))    \n    test = df['genre']\n    mlb = MultiLabelBinarizer()\n    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)\n    corr = res.corr()\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(10, 7))\n    pl = sns.heatmap(corr, mask=mask, cmap= \"coolwarm\", vmax=.5, vmin=-.5, center=0, square=True, linewidths=.7,\n                     cbar_kws={\"shrink\": 0.6})\n    \n    plt.show()","eec489e8":"relation_heatmap(df_movies, 'Movie')","b3b1b56b":"relation_heatmap(df_tv, 'TV Show')","516aa3bd":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  ['G', 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']","a5082b28":"movie_rating = df_movies['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)","cf25a14a":"def rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","e774c8b3":"rating_barplot(movie_rating,'Movie', 1200)","9254dc80":"rating_barplot(tv_rating,'TV Show' , 700, 800)","cf55ae2a":"from scipy.stats import norm\n\nplt.figure(figsize=(15,7))\nsns.distplot(df_movies['duration'].str.extract('(\\d+)'),fit=norm,kde=False,color=['red'])\nplt.title('Distplot with Normal distribution for Movies',fontweight=\"bold\")\nplt.show()","7a2952bd":"plt.figure(figsize=(15,7))\nax = sns.countplot(df_tv['duration'],order = df_tv['duration'].value_counts().index,palette=\"RdGy\")\nplt.title('Countplot for Seasons in TV_Shows',fontweight=\"bold\")\nplt.xticks(rotation=90)\nfor p in ax.patches:\n        ax.annotate(str(p.get_height()), (p.get_x() * 1.005, (p.get_height() * 1.005)))\n\nplt.figure(figsize=(15,7))\nax = sns.barplot(x=((df_tv['duration'].value_counts()\/df_tv.shape[0])*100).index,\n                 y=round(((df_tv['duration'].value_counts()\/df_tv.shape[0])*100),2).values,\n                 palette=\"RdGy\")\nplt.title('Percentage of Seasons in TV_Shows',fontweight=\"bold\")\nplt.xticks(rotation=90)\nfor p in ax.patches:\n        ax.annotate(str(p.get_height()), (p.get_x() * 1.005, (p.get_height() * 1.005)))\nplt.show()","8ed95d13":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_movies[\"listed_in\"].value_counts().head(10).index,\n            y = df_movies[\"listed_in\"].value_counts().head(10).values,palette=\"RdGy\")\nplt.xticks(rotation=80)\nplt.title(\"Top10 Genre in Movies\",fontweight=\"bold\")\nplt.show()","7fce1b02":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_tv[\"listed_in\"].value_counts().head(10).index,\n            y = df_tv[\"listed_in\"].value_counts().head(10).values,palette=\"RdGy\")\nplt.xticks(rotation=80)\nplt.title(\"Top10 Genre in TV Shows\",fontweight=\"bold\")\nplt.show()","346a999c":"df['cast_name'] = df['cast'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ncast_count = []\nfor i in df['cast_name']: cast_count += i\n    \ncast_dict = dict((i, cast_count.count(i)) for i in cast_count)\n\ndf_cast_count = pd.DataFrame(cast_dict.values(),cast_dict.keys()).reset_index().sort_values(0,ascending=False).rename(\n    columns = {'index' : 'cast_name', 0 : 'count'}).iloc[1:21]","5b9d7426":"plt.figure(figsize=(15,5))\nsns.barplot(x='cast_name',y='count',data=df_cast_count,palette=\"RdGy\")\nplt.title(\"Top20 Artist on Netflix\",fontweight=\"bold\")\nplt.xticks(rotation=90)\nplt.show()","c00f1b09":"- TV shows are more clearly correlated than movies.\n- The **negative** relationship between **kid's TV** and **International Tv Shows** is remarkable.\n- There is a **strong positive** corelation between **Science & Natural** and **Docuseries**.","b50d351a":"# Rating distribution:","1b07de25":"## 1. Movies Genre:","954af48c":"## 2. TV Rating:","cec49936":"# Happy learning!!!","4ab6a552":"- The growth in number of **movies** on netflix is much **higher** than that of **TV shows**\n- About **1200** new movies were added in both 2018 and 2019\n- The **growth** in content **started from 2013**","d4a934b1":"- The growth in contents are **higher** in the **first three months and the last three months** of the year.\n- **Least* number of  contents are added in the month of **February**.","28e6537d":"# Handling missing values:","ad8bb4fd":"- From the plots we can say that the TV Show are more for young children.","2f95ac6b":"We can see that **US**, **India**, **United Kingdom**, **Canada** and **France** contribute **75%** of the top20 countries.","fd2a86a0":"- Form the above plot we can say that **majority** of the movies have **duration** ranging from **85 min** to **120 min**. ","635cc4ac":"In the above data:\n- I choose to drop the 'director' and 'cast' columns completely as they have high volume of missing values and dropping these columns will not effect my visualization.","bdcd3164":"- Filling all the missing values in the 'country' column with United States as Netflix was created in the USA and every show is aired on Netflix US.","d1a8c080":"## 2. TV_shows genre:","299647bc":"- From the above plots we can say that 90% of the TV_Shows end by at most Season 3.","fbb01bbe":"# Importing Basic Libraries:","a17a3a02":"The Dtype of the column 'date_added' is object, converting it into datetime format.","f506817f":"- Nearly 2\/3rd of the content on netflix are movies and remaining 1\/3rd of them are TV Show","0b29d7fe":"- Lets findout the what type of contents are present in the dataset.","9536c91e":"# <h1><center><span style='color:Red'> Data Analysis and Visualization: Netflix Data  <\/span><\/center><\/h1>","6baa004a":"Since there are contents that are produced in different countries sp we have to consider those too. So we have to split those rows and get the indivisual country.","05fd5faf":"- The **negative** relationship between **drama** and **documentary** is remarkable. \n- We can see that there are many **dramas for independent and international films**.\n- And also **Sci-Fi & Fantasy for action & Adventure**.","37d8b18c":"# Distribution of Movie duration:","8113cb60":"# Top20 artist present on Netflix:","a3f1e487":"- The columns 'director', 'cast' , 'country', 'date_added' and 'rating' have missing values. ","6c8fdde1":"# Content type on Netflix:","5f550bf6":"## 1. Movie Rating:","e8ea4912":"# Top10 Genre in Movies and TV Shows:","2c6504f2":"# Genre Relationship:","6e98b18c":"- **Top five** artist's are from **India**","32e9d48b":"# Loading and Reading the dataset:","0c4bee0e":"![Netflix-ok.jpg](attachment:Netflix-ok.jpg)","c286c6f6":"# Contents added over the year:","b798beff":"# Contents over the months:","92364c82":"# Distribution for TV_shows:","711cb0c9":"# Top-20 countries producing most contents:"}}