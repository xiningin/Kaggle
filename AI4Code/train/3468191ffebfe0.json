{"cell_type":{"6ed9194c":"code","1db5b373":"code","575e4768":"code","3b724829":"code","7dba38c7":"code","6a13c0ea":"code","df0fe642":"code","77f9a3b2":"code","664f7891":"code","f625a2a8":"code","c8c36f35":"code","1c9967d4":"code","9a071f6f":"code","6655a17e":"code","702a6e13":"code","96bc465a":"code","81ea1b91":"code","6a86ae38":"code","5953ea66":"code","51605814":"markdown","b947e1ef":"markdown","80e8b4ae":"markdown","7694301c":"markdown","78b3036a":"markdown","9fc5e0e8":"markdown","f706686d":"markdown","0f637a9a":"markdown","2853f4c4":"markdown","107b3a91":"markdown","13ac0842":"markdown","9d4bb6d1":"markdown","b2ad994c":"markdown","b84b49b7":"markdown","8261ce15":"markdown","4290bc0a":"markdown","f99f16bb":"markdown","8b78bdd2":"markdown","0bcc81ab":"markdown","b564d99c":"markdown","df7ad377":"markdown"},"source":{"6ed9194c":"import numpy as np \nimport pandas as pd \nimport os\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom scipy.ndimage import gaussian_gradient_magnitude\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1db5b373":"df = pd.read_csv('..\/input\/baby-names\/baby_names.csv')\ndf.head()","575e4768":"import pandas_profiling\nreport = pandas_profiling.ProfileReport(df)\nfrom IPython.display import display\ndisplay(report)","3b724829":"# Groupby by country\ngender = df.groupby(\"Sex\")","7dba38c7":"plt.figure(figsize=(15,10))\ngender.max().sort_values(by=\"Count\",ascending=False)[\"Count\"].plot.bar()\nplt.xticks(rotation=30)\nplt.xlabel(\"Number of Names\")\nplt.ylabel(\"Gender\")\nplt.show()","6a13c0ea":"?WordCloud","df0fe642":"text = \" \".join(review for review in df.Name)\nprint (\"There are {} names in this dataset.\".format(len(text)))","77f9a3b2":"# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","664f7891":"# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\n# lower max_font_size, change the maximum number of word and lighten the background:\nwordcloud = WordCloud(max_font_size=50000, max_words=1000000, background_color=\"white\").generate(text)\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","f625a2a8":"bottle_mask = np.array(Image.open(\"..\/input\/word-cloud-images\/bottle.png\"))\nbottle_mask","c8c36f35":"def transform_format(val):\n    if val == 0:\n        return 255\n    else:\n        return val","1c9967d4":"transformed_bottle_mask = np.ndarray((bottle_mask.shape[0],bottle_mask.shape[1]), np.int32)\nfor i in range(len(bottle_mask)):\n    transformed_bottle_mask[i] = list(map(transform_format, bottle_mask[i]))\n    \n# Check the expected result of your mask\ntransformed_bottle_mask","9a071f6f":"# Create a word cloud image\nwc = WordCloud(background_color=\"white\", max_words=100000, mask=transformed_bottle_mask,\n                contour_width=1.5 , contour_color='dodgerblue')\n\n# Generate a wordcloud\nwc.generate(text)\n\n# show\nplt.figure(figsize=[20,11])\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6655a17e":"bib = \" \".join(review for review in df[df[\"Sex\"]==\"M\"].Name)\nbear = \" \".join(review for review in df[df[\"Sex\"]==\"F\"].Name)\nblocks = \" \".join(review for review in df[df[\"Sex\"]==\"M\"].Name)\nduck = \" \".join(review for review in df[df[\"Sex\"]==\"M\"].Name)\nstroller = \" \".join(review for review in df[df[\"Sex\"]==\"F\"].Name)\n#bear = ' '.join(df['Name'].tolist())\ndf.head()","702a6e13":"# Generate a word cloud image\nmask = np.array(Image.open(\"..\/input\/word-cloud-images\/bear.png\"))\nwordcloud_bear = WordCloud(background_color=\"white\", mode=\"RGBA\", max_words=1000, mask=mask).generate(bear)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[7,7])\nplt.imshow(wordcloud_bear.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\n\n# store to file\nplt.savefig(\"bear\", dpi=125)\n\nplt.show()","96bc465a":"# Generate a word cloud image\nmask = np.array(Image.open(\"..\/input\/word-cloud-images\/duck.jpg\"))\nwordcloud_duck = WordCloud(background_color=\"white\", mode=\"RGBA\", max_words=1000, mask=mask).generate(duck)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[7,7])\nplt.imshow(wordcloud_duck.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\n\n# store to file\nplt.savefig(\"duck.png\", dpi=125)\n\nplt.show()","81ea1b91":"# Generate a word cloud image\nmask = np.array(Image.open(\"..\/input\/word-cloud-images\/blocks.jpg\"))\nwordcloud_blocks = WordCloud(background_color=\"white\", mode=\"RGBA\", max_words=1000, mask=mask).generate(blocks)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[7,7])\nplt.imshow(wordcloud_blocks.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\n\n# store to file\nplt.savefig(\"blocks.png\", dpi=125)\n\nplt.show()","6a86ae38":"# Generate a word cloud image\nmask = np.array(Image.open(\"..\/input\/word-cloud-images\/stroller.jfif\"))\nwordcloud_stroller = WordCloud(background_color=\"black\", mode=\"RGBA\", max_words=1000, mask=mask).generate(stroller)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[10,7])\nplt.imshow(wordcloud_stroller.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\n\n# store to file\nplt.savefig(\"stroller.png\", dpi=125)\n\nplt.show()","5953ea66":"# Generate a word cloud image\nmask = np.array(Image.open(\"..\/input\/word-cloud-images\/bib.jfif\"))\nwordcloud_bib = WordCloud(background_color=\"white\", mode=\"RGBA\", max_words=1000, mask=mask).generate(bib)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[7,7])\nplt.imshow(wordcloud_bib.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\n\n# store to file\nplt.savefig(\"bib.png\", dpi=125)\n\nplt.show()","51605814":"![image.png](attachment:b64c6989-6238-48c0-a7ad-3c6a99a96450.png)","b947e1ef":"This shows us there are more male names than female names.","80e8b4ae":"![image.png](attachment:af489fa6-688a-4c2a-b040-800699c59f09.png)","7694301c":"This code takes images and takes text from the dataset and changes the colors to the image. The results of the shape might vary base on the image, but will have the color. ","78b3036a":"This created a word cloud that is the color brown because of the picture above.","9fc5e0e8":"This takes the image from above with the color and shape.","f706686d":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting Started with Manifold Learning - Isomap](https:\/\/www.kaggle.com\/brendan45774\/getting-started-with-manifold-learning-isomap)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [Guide to Matplotlib Image](https:\/\/www.kaggle.com\/brendan45774\/guide-to-matplotlib-image)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Topic Modeling (LDA)](https:\/\/www.kaggle.com\/brendan45774\/topic-modeling-lda)\n* [Wine quality - Regression prediction](https:\/\/www.kaggle.com\/brendan45774\/wine-quality-regression-prediction)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","0f637a9a":"# Word Cloud Reference","2853f4c4":"Please to check out my dataset [Word Cloud Images](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-images) that I used for my images in this notebook!","107b3a91":"\nFinding what name is used the most. Jessie and Leslie looks like they are the most used names.","13ac0842":"# Finding the most popular name","9d4bb6d1":"# Creating Word Cloud following a Color Pattern","b2ad994c":"# Creating Images with Word Cloud","b84b49b7":"You can concatenate all of the reviews using the \" \".join(list) syntax, which joins all elements in a list separating them by whitespace. Bear has all the names for females and duck has names for males. And so on.","8261ce15":"![image.png](attachment:201cbb43-2913-4fc3-9f8b-a61feeecf5f9.png)","4290bc0a":"![image.png](attachment:14ebe391-33b6-4d31-9e05-6c180e4627b1.png)","f99f16bb":"# Comparing Number of Gender Names","8b78bdd2":"![image.png](attachment:67843722-7301-442b-b649-0e4b435dc6ca.png)","0bcc81ab":"You need a black image to mask or it will look weird. I used a black baby bottle to create this.","b564d99c":"# Importing Libraries","df7ad377":"# Loading Data"}}