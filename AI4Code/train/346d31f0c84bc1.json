{"cell_type":{"46e53944":"code","83363b52":"code","b6ddacf6":"code","6b523b2c":"code","a64760e7":"code","3cfdea67":"code","df6e7482":"code","5237c1fd":"code","bd6f0d1a":"code","091fc11b":"code","08bdfd56":"code","5f8c55de":"markdown"},"source":{"46e53944":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport os\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.display import clear_output\nimport warnings\nwarnings.filterwarnings('ignore')","83363b52":"train_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\ntest_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"\nvalid_dir = \"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"\n\nSEED = 12\nIMG_HEIGHT = 160\nIMG_WIDTH = 160\nBATCH_SIZE = 32\nEPOCHS = 100\nLR =  0.0005\nNUM_CLASSES = 2\nCLASS_LABELS = ['NORMAL','PNEUMONIA']","b6ddacf6":"train_normal = pd.DataFrame({\"path\": os.listdir(train_dir + \"\/NORMAL\"), \"label\": \"NORMAL\"})\ntrain_normal[\"path\"] = train_normal[\"path\"].apply(lambda x: train_dir + \"\/NORMAL\/\" + x)\ntrain_pneumonia = pd.DataFrame({\"path\": os.listdir(train_dir + \"\/PNEUMONIA\"), \"label\": \"PNEUMONIA\"})\ntrain_pneumonia[\"path\"] = train_pneumonia[\"path\"].apply(lambda x: train_dir + \"\/PNEUMONIA\/\" + x)\n\ntrain_df = pd.concat([train_normal, train_pneumonia])\n\nval_normal = pd.DataFrame({\"path\": os.listdir(valid_dir + \"\/NORMAL\"), \"label\": \"NORMAL\"})\nval_normal[\"path\"] = val_normal[\"path\"].apply(lambda x: valid_dir + \"\/NORMAL\/\" + x)\nval_pneumonia = pd.DataFrame({\"path\": os.listdir(valid_dir + \"\/PNEUMONIA\"), \"label\": \"PNEUMONIA\"})\nval_pneumonia[\"path\"] = val_pneumonia[\"path\"].apply(lambda x: valid_dir + \"\/PNEUMONIA\/\" + x)\n\nval_df = pd.concat([val_normal, val_pneumonia])","6b523b2c":"train_data, val_data = train_test_split(train_df, \n                                        test_size = 0.1, \n                                        random_state = SEED, \n                                        stratify = train_df[\"label\"], \n                                        shuffle = True)\n\nval_data = pd.concat([val_df, val_data])\n\nprint(f\"Training set size after re-splitting training data: {len(train_data)}\")\nprint(f\"Validation set size after re-splitting training data: {len(val_data)}\")","a64760e7":"preprocess_fun = tf.keras.applications.densenet.preprocess_input\n\ntrain_datagen = ImageDataGenerator(horizontal_flip=True,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.05,\n                                   rescale = 1.\/255,\n                                   preprocessing_function=preprocess_fun\n                                  )\nvalid_datagen= ImageDataGenerator(horizontal_flip=True,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.05,\n                                   rescale = 1.\/255,\n                                   preprocessing_function=preprocess_fun\n                                  )\ntest_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                  preprocessing_function=preprocess_fun\n                                 )","3cfdea67":"train_generator = train_datagen.flow_from_dataframe(dataframe = train_data,\n                                                    x_col = \"path\",\n                                                    y_col = \"label\",\n                                                    target_size = (150, 150),\n                                                    class_mode = \"categorical\",\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle = True,\n                                                    seed = SEED\n                                                   )\nvalid_generator = valid_datagen.flow_from_dataframe(dataframe = val_data,\n                                                    x_col = \"path\",\n                                                    y_col = \"label\",\n                                                    target_size = (150, 150),\n                                                    class_mode = \"categorical\",\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle = True,\n                                                    seed = SEED\n                                                   )\ntest_generator = test_datagen.flow_from_directory(directory = test_dir,\n                                                   target_size = (IMG_HEIGHT ,IMG_WIDTH),\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle  = False , \n                                                    class_mode = \"categorical\",\n                                                    seed = SEED\n                                                  )","df6e7482":"def feature_extractor(inputs):\n    feature_extractor = tf.keras.applications.DenseNet201(input_shape=(IMG_HEIGHT,IMG_WIDTH, 3),\n                                               include_top=False,\n                                               weights=\"imagenet\")(inputs)\n    \n    return feature_extractor\n\ndef classifier(inputs):\n    x = tf.keras.layers.GlobalAveragePooling2D()(inputs)\n    x = tf.keras.layers.Dense(256, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.3)(x)\n    x = tf.keras.layers.Dense(1024, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.5)(x)\n    x = tf.keras.layers.Dense(512, activation=\"relu\")(x)\n    x = tf.keras.layers.Dropout(0.4) (x)\n    x = tf.keras.layers.Dense(NUM_CLASSES, activation=\"softmax\", name=\"classification\")(x)\n    \n    return x\n\ndef final_model(inputs):\n    densenet_feature_extractor = feature_extractor(inputs)\n    classification_output = classifier(densenet_feature_extractor)\n    \n    return classification_output\n\ndef define_compile_model():\n    \n    inputs = tf.keras.layers.Input(shape=(IMG_HEIGHT ,IMG_WIDTH,3))\n    classification_output = final_model(inputs) \n    model = tf.keras.Model(inputs=inputs, outputs = classification_output)\n     \n    model.compile(optimizer=tf.keras.optimizers.SGD(LR), \n                loss='categorical_crossentropy',\n                metrics = [tf.keras.metrics.BinaryAccuracy()])\n  \n    return model\n\nmodel = define_compile_model()\nclear_output()\nmodel.summary()","5237c1fd":"history = model.fit(x = train_generator,validation_data=valid_generator,epochs = EPOCHS)","bd6f0d1a":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot()","091fc11b":"test_ds = test_datagen.flow_from_directory(\n    test_dir,\n    target_size = (160,160),\n    shuffle = False\n)","08bdfd56":"scores = model.evaluate(test_ds)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","5f8c55de":"I refered to the notebook (https:\/\/www.kaggle.com\/mustafacicek\/chest-x-rays-densenet121-transfer-learning\/notebook ) to increase valid data from train data."}}