{"cell_type":{"f9bd8bcc":"code","c4ef7a7d":"code","be351035":"code","f1bbac79":"code","282af060":"code","0453c83d":"code","ad4d9383":"code","4f735c9c":"code","cf4c7f3a":"code","20704c62":"code","e8cec4dd":"code","b4e2ee9f":"code","16a07eb1":"markdown"},"source":{"f9bd8bcc":"import os\nimport ast\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nimport datetime\n \n\npd.options.display.max_rows = 20\nsns.set(style=\"darkgrid\")\n%matplotlib inline","c4ef7a7d":"train_sample = pd.DataFrame()\nfiles_directory = os.listdir(\"..\/input\/train_simplified\")\nfiles_directory[:10], len(files_directory) # count labels","be351035":"for file in files_directory:\n    train_sample = train_sample.append(pd.read_csv('..\/input\/train_simplified\/' + file, index_col='key_id', nrows=10))\n# Shuffle data\ntrain_sample = shuffle(train_sample, random_state=123)","f1bbac79":"print(train_sample.shape)\ntrain_sample.head(n=30)","282af060":"# because of momory and speed problem, limit the numbers of each label data 10000 rows\ntrain = pd.DataFrame()\nfor i, file in enumerate(files_directory):\n    train = train.append(pd.read_csv('..\/input\/train_simplified\/' + file, index_col='key_id', usecols=[1, 2, 3, 5], nrows=10000))\n    if i % 20 == 0:\n        print(i, \"[Done]\", datetime.datetime.now(), file)\n\n# Shuffle data\nprint(\"[Start] Shuffle!\")\ntrain = shuffle(train, random_state=123)\nprint(train.shape) # tooooooooooooooooooooooooooooooooooooooooooooooooo large, and this just have only 184 label files\ntrain.head()","0453c83d":"print('Train number of rows: ', train.shape[0])\nprint('Train number of columns: ', train_sample.shape[1])\nprint('Train set features: %s' % train_sample.columns.values)\nprint('Train number of label categories: %s' % len(files_directory))","ad4d9383":"sns.countplot(x=\"recognized\", data=train)\nplt.show()","4f735c9c":"rec_gp = train.groupby(['word', 'recognized']).size().reset_index(name='count')\nrec_true = rec_gp[(rec_gp['recognized'] == True)].rename(index=str, columns={\"recognized\": \"recognized_true\", \"count\": \"count_true\"})\nrec_false = rec_gp[(rec_gp['recognized'] == False)].rename(index=str, columns={\"recognized\": \"recognized_false\", \"count\": \"count_false\"})\nrec_gp = rec_true.set_index('word').join(rec_false.set_index('word'), on='word')\nrec_gp","cf4c7f3a":"words = train['word'].tolist()\ndrawings = [ast.literal_eval(pts) for pts in train[:9]['drawing'].values]\nwords[:10], drawings[-1]","20704c62":"len(words)","e8cec4dd":"plt.figure(figsize=(10, 10))\nfor i, drawing in enumerate(drawings):\n    plt.subplot(330 + (i+1))\n    for x,y in drawing:\n        plt.plot(x, y, marker='.')\n        plt.tight_layout()\n        plt.title(words[i]);\n        plt.axis('off')","b4e2ee9f":"print(eval(owls_recognized['drawing'][0])) # drawing is string, so using eval function to convert list types","16a07eb1":"## References\n1. [kernel: simple eda](https:\/\/www.kaggle.com\/dimitreoliveira\/quick-draw-simple-eda)\n"}}