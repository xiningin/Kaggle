{"cell_type":{"40b229ac":"code","d1ee4cfc":"code","4c7467aa":"code","310aaa00":"code","7310fe15":"code","71ebf1a7":"code","49be8ab4":"code","c708ab1c":"code","bad8be1f":"code","9de69130":"code","a85b977b":"code","2f4cf26f":"code","cdc5ee89":"code","7af6e553":"code","7c7ea5df":"code","c6b8f739":"code","f5f0bd8a":"code","b27525ef":"code","5fcdfdb1":"code","60441cfa":"code","6db5ec84":"code","83c53c81":"code","e0e07276":"code","a9347fb1":"code","da6c62c3":"code","072b47dc":"code","8a42a9f3":"code","8dc94564":"code","c9053c47":"code","1340008e":"code","2ff9a1dc":"code","91b8b6d5":"code","8de30067":"code","f1390727":"code","51af0a13":"code","70b22380":"code","22cac79d":"code","181951f6":"code","577cb47c":"code","60cc20a9":"code","3ae3b48a":"code","af2923cf":"code","5979062f":"code","1f5c622e":"code","df38a51b":"code","f8d16f59":"code","2d244a6a":"code","cec5312e":"code","b89897f7":"markdown","4f704b2d":"markdown","2bf6c3dc":"markdown","7f5a5c85":"markdown","d6d9e005":"markdown","03acb4e5":"markdown","37c8ed04":"markdown","8f5cf83c":"markdown","2d50905f":"markdown","2331a527":"markdown","2b70bc54":"markdown","b44331e2":"markdown","19c2e9e7":"markdown","fe645d12":"markdown","1f5d3719":"markdown","d45ebdd5":"markdown","4e9d388c":"markdown","8338a8ab":"markdown","c1e003f2":"markdown","6fdf2a10":"markdown","e25b266b":"markdown","8a9f3935":"markdown"},"source":{"40b229ac":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nimport math\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d1ee4cfc":"test = pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","4c7467aa":"new_test  = test.copy()\nnew_train  = train.copy()","310aaa00":"new_train.head()","7310fe15":"new_test.head()","71ebf1a7":"sns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(8, 7))\n#Check the new distribution \nsns.distplot(new_train['SalePrice'], color=\"r\");\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"SalePrice\")\nax.set(title=\"SalePrice distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","49be8ab4":"corr = new_train.corr()\nplt.subplots(figsize=(15,12))\nsns.heatmap(corr, vmax=0.9, cmap=\"Blues\", square=True)","c708ab1c":"new_train['train']  = 1\nnew_test['train']  = 0\nnew_data=pd.concat([new_train, new_test], axis=0,sort=False)","bad8be1f":"def percentage_missing(df):\n    data = pd.DataFrame(df)\n    df_cols = list(pd.DataFrame(data))\n    dict_x = {}\n    for i in range(0, len(df_cols)):\n        dict_x.update({df_cols[i]: round(data[df_cols[i]].isnull().mean()*100,2)})\n    \n    return dict_x\n\nmissing = percentage_missing(new_data)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percentage of missing data')\ndf_miss[0:10]","9de69130":"new_data = new_data.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)","a85b977b":"object_columns=new_data.select_dtypes(include=['object'])\nnumerical_columns=new_data.select_dtypes(exclude=['object'])","2f4cf26f":"#Categorical Features\nobject_columns.dtypes","cdc5ee89":"#Numerical columns\nnumerical_columns.dtypes","7af6e553":"#Null values in each categorical feature\nnull_values = object_columns.isnull().sum()\nprint(\"Null values for each categorical feature:\\n{}\".format(null_values))","7c7ea5df":"columns_None = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageType','GarageFinish','GarageQual','FireplaceQu','GarageCond']\nobject_columns[columns_None]= object_columns[columns_None].fillna('None')","c6b8f739":"columns_with_low_null_values = ['MSZoning','Utilities','Exterior1st','Exterior2nd','MasVnrType','Electrical','KitchenQual','Functional','SaleType']\n\nobject_columns[columns_with_low_null_values] = object_columns[columns_with_low_null_values].fillna(object_columns.mode().iloc[0])\n","f5f0bd8a":"object_columns.describe()","b27525ef":"#Number of null values in each numeric feature\nnull_values = numerical_columns.isnull().sum()\nprint(\"Null values of each numeric values:\\n{}\".format(null_values))","5fcdfdb1":"print((numerical_columns['YrSold']-numerical_columns['YearBuilt']).median())\nprint(numerical_columns[\"LotFrontage\"].median())","60441cfa":"numerical_columns['GarageYrBlt'] = numerical_columns['GarageYrBlt'].fillna(numerical_columns['YrSold']-35)\nnumerical_columns['LotFrontage'] = numerical_columns['LotFrontage'].fillna(68)","6db5ec84":"numerical_columns= numerical_columns.fillna(0)","83c53c81":"numerical_columns.describe()","e0e07276":"object_columns['Street'].value_counts().plot(kind='bar',figsize=[12,8])\nobject_columns['Street'].value_counts() ","a9347fb1":"object_columns['Heating'].value_counts().plot(kind='bar',figsize=[12,8])\nobject_columns['Heating'].value_counts()","da6c62c3":"object_columns['RoofMatl'].value_counts().plot(kind='bar',figsize=[12,8])\nobject_columns['RoofMatl'].value_counts() ","072b47dc":"object_columns['Utilities'].value_counts().plot(kind='bar',figsize=[12,8])\nobject_columns['Utilities'].value_counts() ","8a42a9f3":"object_columns['Condition2'].value_counts().plot(kind='bar',figsize=[12,8])\nobject_columns['Condition2'].value_counts()","8dc94564":"object_columns = object_columns.drop(['Heating','RoofMatl','Condition2','Street','Utilities'],axis=1)","c9053c47":"numerical_columns['Age_of_House']= (numerical_columns['YrSold']-numerical_columns['YearBuilt'])\nnumerical_columns['Age_of_House'].describe()","1340008e":"negative_age_of_house=numerical_columns[numerical_columns['Age_of_House'] < 0]\nnegative_age_of_house","2ff9a1dc":"numerical_columns.loc[numerical_columns['YrSold'] < numerical_columns['YearBuilt'],'YrSold' ] = 2010","91b8b6d5":"numerical_columns['Age_of_House']= (numerical_columns['YrSold']-numerical_columns['YearBuilt'])\nnumerical_columns['Age_of_House'].describe()","8de30067":"numerical_columns['TotalBsmtBath'] = numerical_columns['BsmtFullBath'] + numerical_columns['BsmtFullBath']*0.5\nnumerical_columns['TotalBath'] = numerical_columns['FullBath'] + numerical_columns['HalfBath']*0.5 \nnumerical_columns['TotalSA']=numerical_columns['TotalBsmtSF'] + numerical_columns['1stFlrSF'] + numerical_columns['2ndFlrSF']","f1390727":"numerical_columns.head()","51af0a13":"object_columns.head()","70b22380":"mapping  = {'TA':1,'Gd':3, 'Fa':2,'Ex':5,'Po':7,'None':0,'Y':1,'N':1,'Reg':3,'IR1':2,\n            'IR2':1,'IR3':0,\"None\" : 0,\"No\" : 5, \"Mn\" : 4, \"Av\": 3,\n            \"Gd\" : 4,\"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3,\"BLQ\" : 2, \"ALQ\" : 3, \"GLQ\" : 6 }\nPaveddrive_mapping =   {\"N\" : 1, \"P\" : 2, \"Y\" : 3}\nobject_columns['ExterQual'] = object_columns['ExterQual'].map(mapping)\nobject_columns['ExterCond'] = object_columns['ExterCond'].map(mapping)\nobject_columns['BsmtCond'] = object_columns['BsmtCond'].map(mapping)\nobject_columns['BsmtQual'] = object_columns['BsmtQual'].map(mapping)\nobject_columns['HeatingQC'] = object_columns['HeatingQC'].map(mapping)\nobject_columns['KitchenQual'] = object_columns['KitchenQual'].map(mapping)\nobject_columns['FireplaceQu'] = object_columns['FireplaceQu'].map(mapping)\nobject_columns['GarageQual'] = object_columns['GarageQual'].map(mapping)\nobject_columns['GarageCond'] = object_columns['GarageCond'].map(mapping)\nobject_columns['CentralAir'] = object_columns['CentralAir'].map(mapping)\nobject_columns['LotShape'] = object_columns['LotShape'].map(mapping)\nobject_columns['BsmtExposure'] = object_columns['BsmtExposure'].map(mapping)\nobject_columns['BsmtFinType1'] = object_columns['BsmtFinType1'].map(mapping)\nobject_columns['BsmtFinType2'] = object_columns['BsmtFinType2'].map(mapping)\nobject_columns['PavedDrive'] = object_columns['PavedDrive'].map(Paveddrive_mapping)","22cac79d":"remaining_columns = object_columns.select_dtypes(include=['object'])\n\nobject_columns = pd.get_dummies(object_columns, columns=remaining_columns.columns) ","181951f6":"data = pd.concat([object_columns, numerical_columns], axis=1,sort=False)\ndata.head()","577cb47c":"data = data.drop(['Id',],axis=1)\ntrain_data = data[data['train'] == 1]\ntrain_data = train_data.drop(['train',],axis=1)\n\ntest_data = data[data['train'] == 0]\ntest_data = test_data.drop(['SalePrice'],axis=1)\ntest_data = test_data.drop(['train',],axis=1)","60cc20a9":"y= train_data['SalePrice']\nx = train_data.drop(['SalePrice'],axis=1)","3ae3b48a":"#TRAIN AND TEST SPLITTING\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.33,random_state=0)","af2923cf":"xgb =XGBRegressor( booster='gbtree', colsample_bylevel=1,colsample_bynode=1, colsample_bytree=0.6, gamma=0,importance_type='gain',\n                  learning_rate=0.02, max_delta_step=0,max_depth=4, min_child_weight=1.5, n_estimators=2000,n_jobs=1, nthread=None,\n                  objective='reg:linear',reg_alpha=0.6, reg_lambda=0.6, scale_pos_weight=1, silent=None,subsample=0.8, verbosity=1)\n\n\nlgbm = LGBMRegressor(objective='regression',num_leaves=4,learning_rate=0.01, n_estimators=12000, max_bin=200, bagging_fraction=0.75,\n                                       bagging_freq=5, bagging_seed=7,feature_fraction=0.4)  ","5979062f":"xgb.fit(x_train, y_train)\nlgbm.fit(x_train, y_train,eval_metric='rmse')","1f5c622e":"predict_xgb = xgb.predict(x_test)\npredict_lgbm = lgbm.predict(x_test)","df38a51b":"import sklearn.metrics as metrics\nprint('RMSE test XGB = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict_xgb))))\nprint('RMSE test LGBM = ' + str(math.sqrt(metrics.mean_squared_error(y_test, predict_lgbm))))","f8d16f59":"#Model fitting on whole dataset\nxgb.fit(x, y)\nlgbm.fit(x,y,eval_metric='rmse')","2d244a6a":"new_predict_xgb = xgb.predict(test_data)\nnew_predict_lgbm = lgbm.predict(test_data)\npredict = ( new_predict_xgb*0.45 + new_predict_lgbm * 0.55)","cec5312e":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": predict})\nsubmission.to_csv('submission.csv', index=False)","b89897f7":"Lets' deal with numeric null values now","4f704b2d":"# Handling Missing Values","2bf6c3dc":"Correlation of each feature with our target variable","7f5a5c85":"Lets' have a look to our new cleaned data (categorical)","d6d9e005":"Ordinal categories features - Mapping from 0 to N  ","03acb4e5":"From the above table we can see that PoolQC, MiscFeature, Alley and Fence features have more than 80% of missing values so we can drop them.","37c8ed04":"Lets' plot some columns to find ones with low variance so that we can delete them.","8f5cf83c":"Categorical features are now encoded and we will concat categorical and numerical features and make final clean prepared dataset.","2d50905f":"# Different Models","2331a527":"**Lets' concat Train and Test datasets**","2b70bc54":"# **Please upvote my notebook if you find this notebook helpful. Thank You!!**","b44331e2":"Lets' have a look to our new cleaned data (numeric)","19c2e9e7":"# Create some new features","fe645d12":"One hot encoding will be done to encode the rest of categorical features","1f5d3719":"We can see there is a minimum value of -1 so lets' see that particular row","d45ebdd5":"Seperate numerical and categorical features","4e9d388c":"We can see that the year when the house was built is 2008 and year sold is 2007 which is wrong so we will change the year 2007 to 2010 which will be meaningful.","8338a8ab":"Uploading train and test dataset","c1e003f2":"So our numerical columns are set now its' time to encode the categorical features","6fdf2a10":"Lets' fill the missing values","e25b266b":"# Import Libraries","8a9f3935":"# Exploratory Data Analysis"}}