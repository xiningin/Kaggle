{"cell_type":{"7e1b6eab":"code","363ae236":"code","d6306eaa":"code","cbdb16bb":"markdown","2da3ac35":"markdown","bf4ff788":"markdown","535b6b93":"markdown","bb01d324":"markdown"},"source":{"7e1b6eab":"import numpy as np\nimport os\n\nfrom PIL import Image\nfrom torch.utils.data import Dataset\n\n\nclass ChecksDataset(Dataset):\n    \"\"\"Bank checks dataset.\"\"\"\n    def __init__(self, root, imsize=(512,512), transform=None):\n        self.root = root\n        self.clases = np.array(['bg', 'sign'])\n        self.imsize = imsize\n        self.transform = transform\n\n        self.files = []\n        Xs = sorted(os.listdir(self.root + 'X'))\n        ys = sorted(os.listdir(self.root + 'y'))\n        for im in Xs:\n            im = im[2:]\n            if ('y_'+im) in ys:\n                self.files.append({\n                    'image': os.path.join(root, 'X\/%s' % ('X_'+im)),\n                    'label': os.path.join(root, 'y\/%s' % ('y_'+im)),\n                })\n\n    def __len__(self):\n        return len(self.files)\n\n    def __getitem__(self, index):\n        data_file = self.files[index]\n\n        # Load image\n        image = Image.open(data_file['image']).convert('RGB')\n        image = image.resize(self.imsize)\n        image = np.array(image, dtype=np.uint8)\n\n        # Load label\n        label = Image.open(data_file['label']).convert('1')\n        label = label.resize(self.imsize)\n        label = np.array(label, dtype=np.int32)\n        w, h = label.shape\n        label = label.reshape((w,h,1))\n\n        \n        if self.transform:\n            image = self.transform(image)\n\n        return image, label","363ae236":"import torch\n\nfrom torch.utils.data import DataLoader\n\n\ncuda = torch.cuda.is_available()\nprint('cuda:', cuda)\n\n# Specify dataset input paths and create datasets\ndata_dir = '\/kaggle\/input\/' \ntrain_data = ChecksDataset(data_dir + 'TrainSet\/')  # training set\nvalid_data = ChecksDataset(data_dir + 'TestSet\/')    # validation set\n\n# Create dataloader\nkwargs = {'num_workers': 4, 'pin_memory': True} if cuda else {}\ntrain_loader = DataLoader(train_data, batch_size=1, shuffle=True, **kwargs)\nvalid_loader = DataLoader(valid_data, batch_size=1, shuffle=False, **kwargs)\n\n# Print dataset statistics\nprint('The dataset contains %d training and %d test samples'\n      % (len(train_loader), len(valid_loader)))","d6306eaa":"from matplotlib import pyplot as plt\nfrom torchvision.utils import make_grid\n\n\ndef apply_mask(im, mask=None):\n    im = im.numpy()\n    if mask is not None:\n        mask = mask.numpy()[:,:,0]\n        im[:,:,0][mask != 0] = 255\n        im[:,:,1][mask != 0] = 0\n        im[:,:,2][mask != 0] = 0\n\n    return im\n\n\nim, mask = iter(train_loader).next()\n\nax = plt.subplot(2, 1, 1)\nplt.imshow(make_grid(im))\n\nax = plt.subplot(2, 1, 2)\nplt.imshow(apply_mask(make_grid(im), make_grid(mask)))","cbdb16bb":"## Introduction\nGreetings! This is starter code demonstrating how to read in the data using PyTorch. Click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","2da3ac35":"## Load the Dataset\nNow that we have defined our custom dataset class, we are ready to start using it. We load in the training and test datasets separately using PyTorch's builtin dataloaders.","bf4ff788":"## Conclusion\nThis concludes the starter code! To go forward from here, click the blue \"Fork Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","535b6b93":"### Validate Loaded Data\nWe visualize one sample from the loaded data to see the segmentation mask on top of the image. An original image from the training dataset is shown side-by-side with the same image with the segmentation mask overlay superimposed on it.","bb01d324":"## Create Custom Dataset\nWe will start by implementing `torch`'s Dataset interface to represent our data in a format which is recognizable by PyTorch models."}}