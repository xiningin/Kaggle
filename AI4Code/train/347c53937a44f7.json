{"cell_type":{"255d8c61":"code","c723d5f2":"code","2df60ce3":"code","f3a654e9":"code","49e3c4fa":"code","36a51a98":"code","583cf360":"code","26d02e94":"code","7befef59":"code","195aa80a":"code","6311f4d0":"code","2dce8122":"code","1ccb4a12":"code","449c5f0a":"code","45f67438":"code","eedb38f0":"code","886fd9e9":"code","46e199b0":"code","bd93830c":"code","79941262":"code","0392d786":"code","d54c48db":"code","20461e89":"code","51f865ff":"code","ed8359cd":"code","54afa6a4":"code","260cfa19":"code","705fc506":"code","fdd82dd3":"code","47a348d6":"code","e4e14eaf":"code","632f1b14":"code","f9698949":"code","d0fcfb69":"code","12b2a161":"code","518830ef":"code","ce18348a":"code","70eb5d9a":"code","956eea40":"code","c006e95a":"code","e3d7e725":"code","88ac4b98":"code","2bda6fd8":"code","80183bc8":"code","1fd06176":"code","311c9e7d":"code","624b7a25":"code","023541a5":"code","a2ec26c7":"code","fbb8d2f1":"code","66cc9299":"code","103337e7":"code","4e6370da":"code","cecf6dac":"code","2a2fce9c":"code","b119db63":"code","3d414620":"code","e85f6555":"markdown","96da2b4d":"markdown","4a243631":"markdown","d8e86581":"markdown","067db9a3":"markdown","cfa845da":"markdown","5094f2d2":"markdown","a0abcf36":"markdown","9ff39a51":"markdown","94c518a0":"markdown","4d9709d0":"markdown","d65e2d18":"markdown","021eda0b":"markdown","080e98b9":"markdown","1dcf6139":"markdown","b6068066":"markdown","33179c4d":"markdown","f49d8fab":"markdown"},"source":{"255d8c61":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nimport numpy as np\n\n# allow plots to appear directly in the notebook\n%matplotlib inline\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\nimport os\n\nfrom sklearn.model_selection import RandomizedSearchCV","c723d5f2":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2df60ce3":"base_path='\/kaggle\/input\/house-prices-advanced-regression-techniques\/'","f3a654e9":"train = pd.read_csv(base_path + 'train.csv')\ntest = pd.read_csv(base_path + 'test.csv')","49e3c4fa":"print(\"Original Shape of Train and Test before starting EDA\")\nprint(train.shape)\nprint(test.shape)","36a51a98":"train.head(5)","583cf360":"test.head(5)","26d02e94":"sns.distplot(train.SalePrice, kde=True)","7befef59":"train.SalePrice = np.log(train.SalePrice)","195aa80a":"sns.distplot(train.SalePrice, kde=True)","6311f4d0":"test_Id = test.Id\ntrain_Id = train.Id\ntrain.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","2dce8122":"train_index = train.shape[0]\ntest_index = test.shape[0]\ndataset = pd.concat((train, test)).reset_index(drop=True)\nprint(\"all_data size is : {}\".format(dataset.shape))","1ccb4a12":"dataset_na = (dataset.isnull().sum() \/ len(dataset)) * 100\ndataset_na = dataset_na.drop(dataset_na[dataset_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :dataset_na})\nmissing_data.head(20)","449c5f0a":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=dataset_na.index, y=dataset_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","45f67438":"sns.heatmap(dataset.isnull(),yticklabels=False,cbar=False)\n","eedb38f0":"dataset.drop(['PoolQC','Fence','MiscFeature', 'Alley'],axis=1,inplace=True)\ndataset.drop(['GarageYrBlt'],axis=1,inplace=True)","886fd9e9":"def missing_imputation(x, stats = 'mean'):\n    if (x.dtypes == 'float64') | (x.dtypes == 'int64'):\n        x = x.fillna(x.mean()) if stats == 'mean' else x.fillna(x.median())\n    else:\n        x = x.fillna(x.mode())\n    return x","46e199b0":"# all_data = all_data.apply(missing_imputation)","bd93830c":"dataset['LotFrontage']=dataset['LotFrontage'].fillna(dataset['LotFrontage'].mean())\ndataset['BsmtHalfBath']= dataset['BsmtHalfBath'].fillna(dataset['BsmtHalfBath'].mean())\ndataset['BsmtFullBath'] = dataset['BsmtFullBath'].fillna(dataset['BsmtFullBath'].mean())\ndataset['TotalBsmtSF'] = dataset['TotalBsmtSF'].fillna(dataset['TotalBsmtSF'].mean())\ndataset['GarageCars'] = dataset['GarageCars'].fillna(dataset['GarageCars'].mean())\ndataset['GarageArea'] = dataset['GarageArea'].fillna(dataset['GarageArea'].mean())","79941262":"dataset['BsmtUnfSF'] = dataset['BsmtUnfSF'].fillna(dataset['BsmtUnfSF'].mean())\ndataset['BsmtFinSF1'] = dataset['BsmtFinSF1'].fillna(dataset['BsmtFinSF1'].mean())\ndataset['BsmtFinSF2'] = dataset['BsmtFinSF2'].fillna(dataset['BsmtFinSF2'].mean())","0392d786":"dataset['BsmtCond']=dataset['BsmtCond'].fillna(dataset['BsmtCond'].mode()[0])\ndataset['BsmtQual']=dataset['BsmtQual'].fillna(dataset['BsmtQual'].mode()[0])","d54c48db":"dataset['GarageFinish']=dataset['GarageFinish'].fillna(dataset['GarageFinish'].mode()[0])\ndataset['GarageQual']=dataset['GarageQual'].fillna(dataset['GarageQual'].mode()[0])\ndataset['GarageCond']=dataset['GarageCond'].fillna(dataset['GarageCond'].mode()[0])","20461e89":"dataset['MasVnrType']=dataset['MasVnrType'].fillna(dataset['MasVnrType'].mode()[0])\ndataset['MasVnrArea']=dataset['MasVnrArea'].fillna(dataset['MasVnrArea'].mode()[0])","51f865ff":"dataset['BsmtExposure']=dataset['BsmtExposure'].fillna(dataset['BsmtExposure'].mode()[0])\ndataset['BsmtFinType2']=dataset['BsmtFinType2'].fillna(dataset['BsmtFinType2'].mode()[0])\ndataset['BsmtFinType1'] = dataset['BsmtFinType1'].fillna(dataset['BsmtFinType1'].mode()[0])\ndataset['MSZoning'] = dataset['MSZoning'].fillna(dataset['MSZoning'].mode()[0])\ndataset['Utilities'] = dataset['Utilities'].fillna(dataset['Utilities'].mode()[0])","ed8359cd":"dataset['Functional'] = dataset['Functional'].fillna(dataset['Functional'].mode()[0])\ndataset['SaleType'] = dataset['SaleType'].fillna(dataset['SaleType'].mode()[0])\ndataset['KitchenQual'] = dataset['KitchenQual'].fillna(dataset['KitchenQual'].mode()[0])\ndataset['Exterior2nd'] = dataset['Exterior2nd'].fillna(dataset['Exterior2nd'].mode()[0])\ndataset['Exterior1st'] = dataset['Exterior1st'].fillna(dataset['Exterior1st'].mode()[0])\ndataset['Electrical'] = dataset['Electrical'].fillna(dataset['Electrical'].mode()[0])","54afa6a4":"dataset['FireplaceQu']=dataset['FireplaceQu'].fillna(dataset['FireplaceQu'].mode()[0])\ndataset['GarageType']=dataset['GarageType'].fillna(dataset['GarageType'].mode()[0])","260cfa19":"sns.heatmap(dataset.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')","705fc506":"plt.figure(figsize=[30,15])\nsns.heatmap(dataset.corr(), annot=True)\nplt.ylim(40,0)","fdd82dd3":"dataset.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd'], axis=1, inplace=True)\n","47a348d6":"dataset_cat = dataset.loc[:, (dataset.dtypes == 'object')]","e4e14eaf":"dataset_cat.columns","632f1b14":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","f9698949":"final_df=dataset","d0fcfb69":"final_df.shape","12b2a161":"dataset = category_onehot_multcols(dataset_cat.columns)","518830ef":"dataset.shape","ce18348a":"dataset =dataset.loc[:,~dataset.columns.duplicated()]\n","70eb5d9a":"dataset.head(2)","956eea40":"train = dataset[:train_index]\ntest = dataset[train_index:]","c006e95a":"test.drop('SalePrice', axis=1, inplace=True)","e3d7e725":"print(train.shape)\nprint(test.shape)","88ac4b98":"train.head()","2bda6fd8":"X_train = train.drop('SalePrice', axis=1)\ny_train = train.SalePrice","80183bc8":"print(X_train.shape)\nprint(test.shape)","1fd06176":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\ntest=sc.transform(test)","311c9e7d":"import xgboost\nregressor=xgboost.XGBRegressor()","624b7a25":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]","023541a5":"## Hyper Parameter Optimization\n\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","a2ec26c7":"# Set up the random search with 4-fold cross validation\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","fbb8d2f1":"random_cv.fit(X_train,y_train)","66cc9299":"random_cv.best_estimator_","103337e7":"regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n             max_depth=2, min_child_weight=1, missing=None, n_estimators=900,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)","4e6370da":"regressor.fit(X_train,y_train)","cecf6dac":"import pickle\nfilename = 'finalized_model.pkl'\npickle.dump(regressor, open(filename, 'wb'))\n","2a2fce9c":"test_SalePrice = regressor.predict(test)\ntest_SalePrice_pred=np.exp(test_SalePrice)","b119db63":"sub = pd.DataFrame()\nsub['Id'] = test_Id\nsub['SalePrice'] = test_SalePrice_pred\nsub.to_csv('submission.csv',index=False)","3d414620":"sub.head()","e85f6555":"- As can be seen from distribution plot, Sale price is positive skewed and hence we need to make it normally distributed","96da2b4d":"# Modeling","4a243631":"- Removing Id column","d8e86581":"### Missing values in Categorical features","067db9a3":"## Analysing Target Variable(Sale Price)","cfa845da":"Looking at the Missing value plots, there are too many missing values in columns like PoolQC, MiscFeature, Alley, Fence. It make sense to drop these columns from the dataset","5094f2d2":"# hyper-parameter tuning","a0abcf36":"# Saving the model","9ff39a51":"# Correlation between Independent features","94c518a0":"# Missing Values treatment","4d9709d0":"# Load the datasets","d65e2d18":"# Joining train and test datasets","021eda0b":"# Handling Categorical features","080e98b9":"### Missing values in Numerical features","1dcf6139":"# submissions","b6068066":"# Preparing X and y for the model","33179c4d":"- GarageArea has strong correlation with GarageCars, so dropping it\n- 1stFlrSF has strong correlation with TotalBsmtSF, so dropping it\n- TotRmsAbvGrd has strong correlation with GrLivArea, so dropping it\n","f49d8fab":"# EDA"}}