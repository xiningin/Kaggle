{"cell_type":{"66a698f5":"code","8db9b63f":"code","74b4b10a":"code","f699446e":"code","ba2441a4":"code","42d76a7f":"code","4ac0fa49":"code","b8a9bb37":"code","5825d95f":"code","1aa1883f":"code","013e9f9e":"code","687c76bb":"code","d4258b92":"code","e9250e10":"code","6dd60807":"code","d57656b1":"code","103321d0":"code","7c704c11":"code","490caab7":"code","5d9711b3":"code","06e03260":"code","a50bf2ea":"code","5164b904":"code","556d1bfe":"code","8ed96a6c":"code","901b9c39":"code","947f2173":"code","f76f4dd8":"code","f90ddbc6":"code","eaffc81f":"code","e54500d9":"code","d9ee1367":"code","6d6c4736":"code","db3ef981":"code","63c3c6c0":"code","79adb3f8":"code","a2746b13":"code","69fb68be":"code","cb3b8f6f":"code","23ca67eb":"code","8311ad62":"code","3df331bd":"code","659c2de1":"code","6aed5c37":"code","ce7072d6":"code","bceabd8f":"code","d62964e9":"code","51c91ed6":"code","cc1ffa43":"code","953481dd":"code","d23c5e18":"code","45d0464b":"code","729374f6":"code","f62ad773":"code","7ce2fe5e":"code","c663d663":"code","eb7e9bd1":"code","3a127f08":"code","34764c20":"code","4a004f92":"code","f4c1b100":"code","0071aae0":"code","9e15af1a":"code","1ba6e483":"code","54e1b784":"code","33383c5d":"code","304846b9":"code","d7341780":"code","b875700e":"code","828e995d":"code","26ce0ab3":"code","68536d8a":"code","713ce7b7":"code","b177527d":"code","358deff9":"code","77f1a3e2":"code","726caf25":"code","c0a875e1":"code","0ca25ba2":"code","eef0c59a":"code","66f39640":"code","a62e338c":"code","a3225f57":"code","133e5c2d":"code","bf45f85f":"code","1511e8d8":"code","025c415f":"code","958bf282":"code","c16d7d34":"code","a6b4aee8":"code","1df3c4df":"code","e3d091f0":"code","ba93ce27":"code","912a9b7c":"code","86936e53":"code","67c675ab":"code","88ba0ffb":"code","788f9bd0":"code","2b059f59":"code","2a8a701b":"code","bbac3c49":"code","9a8b8fd4":"code","43dff272":"code","68086edb":"code","13755c36":"code","241d72fc":"code","ad110d09":"code","a1fdb3bb":"code","16580677":"code","bf6af135":"code","9837c1d0":"code","fc624298":"code","d7599065":"code","beb830ca":"code","242dce20":"code","9854c93d":"code","040fe87b":"code","43d58e2a":"code","6742d776":"code","206e3465":"code","69dea0e5":"code","d348dc73":"code","9b5911b6":"code","8e258c23":"markdown","700363d5":"markdown","04e1ea10":"markdown","53f955ad":"markdown","b5ce5960":"markdown","cffe2724":"markdown","e79ecfb2":"markdown","67ef666a":"markdown","ea4efd3e":"markdown","50d8e3ab":"markdown","9b8a309f":"markdown","49c34ae2":"markdown","262b3257":"markdown","f010449d":"markdown","d525e8f9":"markdown","eac28680":"markdown","bfee6fc7":"markdown"},"source":{"66a698f5":"# Data Analysis Libraries;\nimport numpy as np\nimport pandas as pd\n\n# Data Visualization Libraries;\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# To Ignore Warnings;\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# To Display All Columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","8db9b63f":"from sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\n\n# Model Selection\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler,minmax_scale","74b4b10a":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f699446e":"# Copy data in order to avoid any change in the original:\ntrain = train_data.copy()\ntest = test_data.copy()","ba2441a4":"import missingno as msno","42d76a7f":"msno.bar(train);","4ac0fa49":"train.head()","b8a9bb37":"train.tail()","5825d95f":"train.info()","1aa1883f":"test.head()","013e9f9e":"test.tail()","687c76bb":"test.info()","d4258b92":"train.describe().T","e9250e10":"test.describe().T","6dd60807":"train['Pclass'].value_counts()","d57656b1":"train['Sex'].value_counts()","103321d0":"train['SibSp'].value_counts()","7c704c11":"train['Parch'].value_counts()","490caab7":"train['Ticket'].value_counts()","5d9711b3":"train['Cabin'].value_counts()","06e03260":"train['Embarked'].value_counts()","a50bf2ea":"sns.barplot(x='Pclass', y ='Survived',data = train);","5164b904":"SibSp vs survived:","556d1bfe":"sns.barplot(x = 'SibSp', y = 'Survived', data = train);","8ed96a6c":"Parch vs survived:\u00b6","901b9c39":"sns.barplot(x = 'Parch', y = 'Survived', data = train);","947f2173":"Sex vs survived:","f76f4dd8":"sns.barplot(x = 'Sex', y = 'Survived', data = train);","f90ddbc6":"train.head()","eaffc81f":"test.head()","e54500d9":"# We can drop the Ticket feature since it is unlikely to have useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)\n\ntrain.head()","d9ee1367":"train.describe([0.10,0.25,0.50,0.75,0.90,0.99]).T","6d6c4736":"# It looks like there is a problem in Fare max data.Visualize with boxplot.\nsns.boxplot(x = train['Fare']);","db3ef981":"Q1 = train['Fare'].quantile(0.25)\nQ3 = train['Fare'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_limit = Q1-1.5*IQR\nlower_limit\n\nupper_limit = Q3 + 1.5*IQR\nupper_limit","63c3c6c0":"# Observations with Fare data higher than the upper limit.\n\ntrain['Fare'] > (upper_limit)","79adb3f8":"train.sort_values(\"Fare\",ascending = False).head()","a2746b13":"train.sort_values(\"Fare\",ascending = False).tail()","69fb68be":"# In boxplot, there are too many data higher than upper limit; we can not change all. Just repress the highest value -512-\ntrain['Fare'] = train['Fare'].replace(512.3292, 312)","cb3b8f6f":"train.sort_values(\"Fare\", ascending = False).head()","23ca67eb":"train.sort_values(\"Fare\", ascending = False).tail()","8311ad62":"test.sort_values(\"Fare\", ascending = False)","3df331bd":"test['Fare'] = test['Fare'].replace(512.3292, 312)","659c2de1":"test.sort_values(\"Fare\", ascending = False)","6aed5c37":"train.isnull().values.any()","ce7072d6":"train.isnull().sum()","bceabd8f":"train[\"Age\"].fillna(0, inplace = True)","d62964e9":"train.isnull().sum()","51c91ed6":"train[\"Cabin\"].fillna(0, inplace = True)","cc1ffa43":"train.isnull().sum()","953481dd":"100 * train.isnull().sum() \/ len(train)","d23c5e18":"train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].mean())","45d0464b":"test[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].mean())","729374f6":"train.isnull().values.any()","f62ad773":"test.isnull().values.any()","7ce2fe5e":"train.isnull().sum()","c663d663":"test.isnull().sum()","eb7e9bd1":"train.isnull().sum()","3a127f08":"test.isnull().sum()","34764c20":"train[\"Embarked\"].value_counts()","4a004f92":"# Fill NA with the most frequent value:\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")","f4c1b100":"test[\"Embarked\"] = test[\"Embarked\"].fillna(\"S\")","0071aae0":"train.isnull().sum()","9e15af1a":"test.isnull().sum()","1ba6e483":"test[test[\"Fare\"].isnull()]","54e1b784":"test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","33383c5d":"test[\"Fare\"] = test[\"Fare\"].fillna(12)","304846b9":"test[\"Fare\"].isnull().sum()","d7341780":"# Create CabinBool variable which states if someone has a Cabin data or not:\n\ntrain[\"CabinBool\"] = train[\"Cabin\"].isnull().astype('int')\ntest[\"CabinBool\"] = test[\"Cabin\"].isnull().astype('int')\n\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain.head()","b875700e":"train.isnull().sum()","828e995d":"test.isnull().sum()","26ce0ab3":"# Map each Embarked value to a numerical value:\n\nembarked_mapping = {\"S\": 1, \"C\":2, \"Q\":3}\n\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)","68536d8a":"train.head()","713ce7b7":"# Convert Sex values into 1-0:\n\nfrom sklearn import preprocessing\n\nlbe = preprocessing.LabelEncoder()\n\ntrain[\"Sex\"] = lbe.fit_transform(train[\"Sex\"])\ntest[\"Sex\"] = lbe.fit_transform(test[\"Sex\"])","b177527d":"train.head()","358deff9":"train[\"Title\"] = train[\"Name\"].str.extract('([A-Za-z]+)\\.', expand = False)\n\ntest[\"Title\"] = test[\"Name\"].str.extract('([A-Za-z]+)\\.', expand = False)","77f1a3e2":"train.head()","726caf25":"train['Title'].value_counts()","c0a875e1":"train['Title'] = train['Title'].replace(['Lady','Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'], 'Rare')\n\ntrain['Title'] = train['Title'].replace(['Countess','Lady','Sir'], 'Royal')\n\ntrain['Title'] = train['Title'].replace('Mlle','Miss')\n\ntrain['Title'] = train['Title'].replace('Ms','Miss')\n\ntrain['Title'] = train['Title'].replace('Mme','Mrs')","0ca25ba2":"test['Title'] = test['Title'].replace(['Lady','Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'], 'Rare')\n\ntest['Title'] = test['Title'].replace(['Countess','Lady','Sir'], 'Royal')\n\ntest['Title'] = test['Title'].replace('Mlle','Miss')\n\ntest['Title'] = test['Title'].replace('Ms','Miss')\n\ntest['Title'] = test['Title'].replace('Mme','Mrs')","eef0c59a":"train.head()","66f39640":"test.head()","a62e338c":"train[[\"Title\",\"PassengerId\"]].groupby(\"Title\").count()","a3225f57":"train[['Title','Survived']].groupby(['Title'], as_index = False).agg({\"count\",\"mean\"})","133e5c2d":"# Map each of the title groups to a numerical value\n\ntitle_mapping = {\"Mr\":1, \"Miss\":2, \"Mrs\":3, \"Master\":4, \"Royal\":5, \"Rare\":5}\n\ntrain['Title'] = train['Title'].map(title_mapping)","bf45f85f":"train.isnull().sum()","1511e8d8":"test['Title'] = test['Title'].map(title_mapping)","025c415f":"test.head()","958bf282":"train = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","c16d7d34":"train.head()","a6b4aee8":"bins = [0, 5, 12, 18, 24, 35, 60, np.inf]\nmylabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = mylabels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins,labels = mylabels)","1df3c4df":"# Map each Age value to a numerical value:\nage_mapping = {'Baby':1, 'Child':2, 'Teenager':3, 'Student':4, 'Young Adult':5, 'Adult':6, 'Senior':7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest ['AgeGroup'] = test['AgeGroup'].map(age_mapping)","e3d091f0":"train.head()","ba93ce27":"# Dropping the Age feature for now, might change:\ntrain = train.drop(['Age'], axis = 1)\ntest = test.drop(['Age'], axis = 1)","912a9b7c":"train.head()","86936e53":"# Map Fare values into groups of numerical values:\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1,2,3,4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1,2,3,4])","67c675ab":"# Drop Fare values:\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","88ba0ffb":"train.head()","788f9bd0":"train.head()","2b059f59":"train[\"FamilySize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1","2a8a701b":"test[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1","bbac3c49":"# Create new feature of family size:\n\ntrain['Single'] = train['FamilySize'].map(lambda s:1 if s == 1 else 0)\ntrain['SmallFam'] = train['FamilySize'].map(lambda s:1 if s == 2 else 0)\ntrain['MedFam'] = train['FamilySize'].map(lambda s:1 if 3 <= s <= 4 else 0)\ntrain['LargeFam'] = train['FamilySize'].map(lambda s:1 if s>=5 else 0)","9a8b8fd4":"train.head()","43dff272":"# Create new feature of family size:\n\ntest['Single'] = test['FamilySize'].map(lambda s:1 if s == 1 else 0)\ntest['SmallFam'] = test['FamilySize'].map(lambda s:1 if s == 2 else 0)\ntest['MedFam'] = test['FamilySize'].map(lambda s:1 if 3 <= s <= 4 else 0)\ntest['LargeFam'] = test['FamilySize'].map(lambda s:1 if s >= 5 else 0)","68086edb":"test.head()","13755c36":"# Convert Title and Embarked into dummy variables:\n\ntrain = pd.get_dummies(train, columns = [\"Title\"])\ntrain = pd.get_dummies(train, columns = [\"Embarked\"], prefix = \"Em\")","241d72fc":"train.head()","ad110d09":"test = pd.get_dummies(test, columns = [\"Title\"])\ntest = pd.get_dummies(test, columns = [\"Embarked\"], prefix = \"Em\")","a1fdb3bb":"test.head()","16580677":"train.groupby(\"Pclass\")[\"Survived\"].mean()","bf6af135":"# Creat categorical values for Pclass:\ntrain[\"Pclass\"] = train[\"Pclass\"].astype(\"category\")\ntrain = pd.get_dummies(train, columns = [\"Pclass\"], prefix = \"Pc\")","9837c1d0":"test[\"Pclass\"] = test[\"Pclass\"].astype(\"category\")\ntest = pd.get_dummies(test, columns = [\"Pclass\"], prefix = \"Pc\")","fc624298":"train.head()","d7599065":"test.head()","beb830ca":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = train.drop(['Survived', 'PassengerId'], axis = 1)\nY = train[\"Survived\"]","242dce20":"x_train, x_val, y_train, y_val = train_test_split(X, Y, test_size = 0.20, random_state = 17)","9854c93d":"x_train.shape","040fe87b":"x_train.head()","43d58e2a":"x_val.shape","6742d776":"x_val.head()","206e3465":"y_train.shape","69dea0e5":"y_train.head()","d348dc73":"y_val.shape","9b5911b6":"y_val.head()","8e258c23":"Outlier Treatment","700363d5":"# Embarked","04e1ea10":"## Embarked & Title","53f955ad":"## Pclass","b5ce5960":"# Feature Engineering\n## Family Size","cffe2724":"# Veriable Transformation\n## Embarked","e79ecfb2":"# Name - Title","67ef666a":"Age","ea4efd3e":"## Cabin ","50d8e3ab":"Missing Value Treatment","9b8a309f":"# Fare","49c34ae2":"# Age Group","262b3257":"# Fare ","f010449d":"***Pclass vs survived:***","d525e8f9":"# Modeling, Evaluation and Model Tuning\u00b6\n## Spliting the train data","eac28680":"# Sex","bfee6fc7":"### Data Preparation\nDeleting Unnecessary Variables:"}}