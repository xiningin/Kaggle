{"cell_type":{"d74a7141":"code","15dad105":"code","be3c00d0":"code","5192f476":"code","32385c39":"code","a486903d":"code","f3dfcacb":"code","6e165f10":"code","14b60c18":"code","464355f7":"code","0d102d39":"code","732965c8":"code","890774e6":"code","ad85a0a7":"code","e240c44e":"code","d2eb763d":"code","f9b7bc68":"code","33da3e58":"code","0db9a1cd":"code","87b05499":"code","059bfc96":"markdown","11a2d454":"markdown","4f43aade":"markdown","f20e9bf6":"markdown","744e2757":"markdown","b649e5b3":"markdown","1d18890e":"markdown","72150b14":"markdown","250b5a2b":"markdown","22c72753":"markdown"},"source":{"d74a7141":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport keras\nimport seaborn as sns","15dad105":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","be3c00d0":"print(f'Image shape from DataFrame: {train.iloc[0].shape}')","5192f476":"X_train = np.array(train.drop('label',axis=1)).reshape(-1,28,28,1)\ny_train = np.array(train['label'])\n\nX_test = np.array(test).reshape(-1,28,28,1)\n\nprint(f'Reshaped image for covnet: {X_train[0].shape}')","32385c39":"from keras.utils.np_utils import to_categorical\ny_train_cat = to_categorical(y_train,10)","a486903d":"X_train = X_train\/X_train.max()\nX_test = X_test\/X_test.max()","f3dfcacb":"# y_train_cat = y_train_cat.reshape(len(y_train_cat),10)\nX_train.shape","6e165f10":"# Creating a model \nfrom keras.models import Sequential\nmodel = Sequential()\n\n# Adding Convolution, Pooling layers and Flatten\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Flatten\nmodel.add(Conv2D(input_shape=(28,28,1),kernel_size=(4,4),filters=32,activation='relu',kernel_initializer=keras.initializers.he_uniform))\n\n# Adding a dropout layer to prevent overfitting\nmodel.add(keras.layers.Dropout(0.2))\n\n\n# Adding Pooling Layer\nmodel.add(MaxPool2D(pool_size=(2,2),strides=2))\n\n# Adding a network of neurons\nmodel.add(Dense(128,activation='relu'))\n\n\n# Adding a dropout layer to prevent overfitting\nmodel.add(keras.layers.Dropout(0.5))\n\n# Adding a network of neurons\nmodel.add(Dense(64,activation='relu'))\n\n\n# Adding a dropout layer to prevent overfitting\nmodel.add(keras.layers.Dropout(0.5))\n\n# Adding a network of neurons\nmodel.add(Dense(32,activation='relu'))\n\n\n# Adding a dropout layer to prevent overfitting\nmodel.add(keras.layers.Dropout(0.5))\n\n# Flattening the data from 2D to a single dimension array to be used by the algorithm\nmodel.add(Flatten())\n\n# Adding softmax classifer for multilabel classifier\nmodel.add(Dense(10,activation='softmax'))\n\n# Compiling the model to decide upon the loss function for error measurement, optimizer for correcting weights attached with input in the back propogation method and an accuracy parameter\nmodel.compile(loss='categorical_crossentropy',optimizer='rmsprop', metrics = ['accuracy'])","14b60c18":"# Training model with 10 epochs \nmodel.fit(X_train,y_train_cat,epochs=10)","464355f7":"# Storing the results of the test set in a variable\npredictions = model.predict_classes(X_test)\n\n# # Saving the results in a file and final submission\n# submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),pd.Series(predictions,name='Label')],axis = 1)\n# submission.to_csv(\"output.csv\",index=False)","0d102d39":"from kerastuner import HyperModel\n\nfrom keras.models import Sequential\n\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten","732965c8":"def build_model(hp):\n    model = Sequential([\n        keras.layers.Conv2D(\n        filters=hp.Int('conv1filter',min_value=32, max_value=128, step=16),\n        kernel_size=hp.Choice('kernelsize1', values = [3,4,5]),\n        activation=hp.Choice('convactchoice1', values = ['relu','sigmoid']),\n        input_shape=(28,28,1)),\n        \n        keras.layers.Conv2D(\n        filters=hp.Int('conv2filter',min_value=32, max_value=128, step=16),\n        kernel_size=hp.Choice('kernelsize2', values = [3,4]),\n        activation=hp.Choice('convactchoice2', values = ['relu','sigmoid'])),\n            \n        keras.layers.Flatten(),\n        \n        keras.layers.Dense(\n        units=hp.Int('dense_1_units',min_value=32, max_value=128, step=16),\n        activation=hp.Choice('activationchoice1', values = ['relu','sigmoid'])),\n        \n        keras.layers.Dense(\n        units=hp.Int('dense_2_units',min_value=32, max_value=128, step=16),\n        activation=hp.Choice('activationchoice2', values = ['relu','sigmoid'])),\n        \n        keras.layers.Dense(10,activation = 'softmax')\n    ])\n    \n    model.compile(loss='categorical_crossentropy',optimizer='adam', metrics = ['accuracy'])\n    \n    return model","890774e6":"from kerastuner import RandomSearch\nfrom kerastuner.engine.hyperparameters import HyperParameters\n\ntuner_search = RandomSearch(build_model, objective = 'val_accuracy', max_trials = 5)","ad85a0a7":"tuner_search.search(X_train,y_train_cat,epochs=3,validation_split=0.1)","e240c44e":"best_params_model = tuner_search.get_best_models(num_models=1)[0]\nbest_params_model.summary()","d2eb763d":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n                                 rotation_range=10,\n                                 width_shift_range=0.10,\n                                 height_shift_range=0.10,\n                                 zoom_range=0.10)\n\n# datagen.fit(X_train)","f9b7bc68":"result = best_params_model.fit_generator(datagen.flow(X_train,y_train_cat,batch_size=32),epochs=10)","33da3e58":"# best_params_model.fit(X_train,y_train_cat,epochs=10,validation_split=0.1, initial_epoch=3)","0db9a1cd":"sns.set_style('dark')\nfig, ax = plt.subplots(1,1, figsize=(20,10))\nax.set_title('Accuracy per Epochs')\nax.plot(result.epoch, result.history['accuracy'])\nplt.show()","87b05499":"# Storing the results of the test set in a variable\npredictions = best_params_model.predict_classes(X_test)\n\n# Saving the results in a file and final submission\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),pd.Series(predictions,name='Label')],axis = 1)\nsubmission.to_csv(\"kerastuner.csv\",index=False)","059bfc96":"# *### In the next version we will work on improving the model accuracy a bit more by working with different Optimizers.*","11a2d454":"# Hyperparameter tuning using keras - tuner","4f43aade":"### Loading train and test data","f20e9bf6":"## Creating more custom images by using Data Augmentation","744e2757":"#### One hot encoding of y_train\n#### Since the output classes are numerical and each digit is having eqqual weight we need to one hot encode it so that algorithm do not mis-interpret them.","b649e5b3":"#### Rescaling features to bring it down between 0 and 1.","1d18890e":"## Plotting model accuracy ","72150b14":"#### Reshaping the data so that it fits in the algorithm\n#### Most of the CNN algorithms assume date to be of the format (n,w,h,c) i.e. a 4D format where \n#### n = no. of images, w = width of the image in pixels, h = height of image in pixels and c = color channels ( 1 for gray or binary and 3 for RGG or colored pictures)","250b5a2b":"# Creating a simple model without any hyperparameter tuning","22c72753":"## Importing important libraries"}}