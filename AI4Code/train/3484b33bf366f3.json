{"cell_type":{"21e756cb":"code","26d07a44":"code","67be47fa":"code","f1755ee4":"code","64e7604d":"code","096967bd":"code","6b230dae":"code","1681f91b":"code","5e4f666a":"code","19b27b32":"markdown","9d46e87d":"markdown"},"source":{"21e756cb":"import os\nimport cv2\nimport skimage.io\nfrom tqdm.notebook import tqdm\nimport zipfile\nimport numpy as np\nimport pandas as pd","26d07a44":"get_user = os.environ.get('USER', 'KAGGLE')\n\nif get_user == 'KAGGLE':\n    my_env = 'KAGGLE'\nelif get_user == 'jupyter':\n    my_env = 'GCP'\nelif get_user == 'user':\n    my_env = 'LOCAL'\nelse:\n    my_env = None\n    \nassert my_env is not None    \n\nenv_input_fn = {\n    'KAGGLE': '..\/input\/prostate-cancer-grade-assessment\/',\n    'LOCAL':  '..\/data\/',\n    'GCP':    '..\/..\/',\n}\n\ninput_fn = env_input_fn[my_env]","67be47fa":"train_df = pd.read_csv(input_fn + 'train.csv')","f1755ee4":"TRAIN = input_fn + 'train_images\/'\nMASKS = input_fn + 'train_label_masks\/'\nOUT_TRAIN = 'train.zip'\nOUT_MASKS = 'masks.zip'\nsz = 128\nN = 16","64e7604d":"def tile(img, mask):\n    result = []\n    shape = img.shape\n    pad0,pad1 = (sz - shape[0]%sz)%sz, (sz - shape[1]%sz)%sz\n    img = np.pad(img,[[pad0\/\/2,pad0-pad0\/\/2],[pad1\/\/2,pad1-pad1\/\/2],[0,0]],\n                constant_values=255)\n    mask = np.pad(mask,[[pad0\/\/2,pad0-pad0\/\/2],[pad1\/\/2,pad1-pad1\/\/2],[0,0]],\n                constant_values=0)\n    img = img.reshape(img.shape[0]\/\/sz,sz,img.shape[1]\/\/sz,sz,3)\n    img = img.transpose(0,2,1,3,4).reshape(-1,sz,sz,3)\n    mask = mask.reshape(mask.shape[0]\/\/sz,sz,mask.shape[1]\/\/sz,sz,3)\n    mask = mask.transpose(0,2,1,3,4).reshape(-1,sz,sz,3)\n    if len(img) < N:\n        mask = np.pad(mask,[[0,N-len(img)],[0,0],[0,0],[0,0]],constant_values=0)\n        img = np.pad(img,[[0,N-len(img)],[0,0],[0,0],[0,0]],constant_values=255)\n    idxs = np.argsort(img.reshape(img.shape[0],-1).sum(-1))[:N]\n    img = img[idxs]\n    mask = mask[idxs]\n    for i in range(len(img)):\n        result.append({'img':img[i], 'mask':mask[i], 'idx':i})\n    return result","096967bd":"x_tot,x2_tot = [],[]\nnames = [name[:-10] for name in os.listdir(MASKS)]\n\nimg_fns = os.listdir(TRAIN)\n\nimg_fn = img_fns[0]\nmask_fn = img_fn.split('.')[0] +'_mask.tiff'\n\nimg_fn, mask_fn","6b230dae":"img = skimage.io.MultiImage(TRAIN + img_fn)\nmask = skimage.io.MultiImage(MASKS + mask_fn)","1681f91b":"img2 = img[-1]\nmask2 = mask[-1]","5e4f666a":"ret = tile(img, mask)","19b27b32":"### Tiling Code","9d46e87d":"##### The problem section:\n\n```python\n-> 2486             raise ValueError(\"cannot decompress %s\" % self.compression)\n   2487         if 'sample_format' in self.tags:\n   2488             tag = self.tags['sample_format']\n\nValueError: cannot decompress jpeg\n\n```"}}