{"cell_type":{"46fe1a8a":"code","8c15c0a0":"code","5a5b98d6":"code","72a1a338":"code","a279ffb0":"code","99c29f88":"code","e74b13f2":"code","84fbf8cc":"code","f825401d":"code","65ce7c8c":"code","210cc118":"code","d5ff37b7":"code","2fabd727":"code","2ff69f72":"code","9552416a":"code","05140517":"code","17a70dcc":"code","6c500b60":"code","2089b3d8":"code","a2cb6dc1":"code","fb23fad9":"code","811a94a0":"code","9f0aa254":"code","d7e0b006":"code","d34d1396":"code","e00b4a15":"code","7415964a":"code","1e86dca5":"code","d6471580":"code","72e5ac19":"code","46873a1b":"code","f0e824d3":"code","b9cfefe5":"code","c0ac92eb":"code","74bf1185":"code","51eaecb3":"code","74e6de6a":"code","30198dcf":"code","ccdfa6b5":"code","49311666":"code","62f935b1":"code","52ddf149":"code","df935cb7":"code","ab79a29c":"code","3c376bbb":"code","d2160f9e":"code","af4c3b5f":"code","bd27e20b":"code","ced0d529":"code","2e5dfd6b":"code","556527dd":"code","342af058":"markdown","d36839e8":"markdown","34ac888d":"markdown","3342d05e":"markdown","2f758ccf":"markdown"},"source":{"46fe1a8a":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt","8c15c0a0":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n","5a5b98d6":"df=pd.read_csv(os.path.join(dirname,'covid_19_data.csv'))","72a1a338":"df","a279ffb0":"df['Country\/Region'].unique()","99c29f88":"x=df[df['Country\/Region']=='India']","e74b13f2":"x","84fbf8cc":"x['Last Update'] = pd.to_datetime(x['Last Update'])","f825401d":"x.head()","65ce7c8c":"#x.groupby(x['Last Update'])","210cc118":"preprocessed_x=x.groupby(x['Last Update'].dt.date)['Confirmed','Deaths','Recovered'].agg(['sum'])","d5ff37b7":"preprocessed_x","2fabd727":"preprocessed_x.iloc[:,0]","2ff69f72":"preprocessed_x.index","9552416a":"xplot=preprocessed_x.index\ny_confirmed=preprocessed_x.iloc[:,0].values\ny_deaths=preprocessed_x.iloc[:,1].values\ny_recovered=preprocessed_x.iloc[:,2].values","05140517":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(xplot,y_confirmed)\n\nplt.show()","17a70dcc":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(xplot,y_recovered)\nplt.show()","6c500b60":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(xplot,y_deaths)\nplt.show()","2089b3d8":"import math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom tensorflow.python.keras.callbacks import EarlyStopping\nfrom tensorflow.python.keras.callbacks import ModelCheckpoint\nfrom tensorflow.python.keras.models import load_model","a2cb6dc1":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back)]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back])\n    return np.array(dataX), np.array(dataY)\n# fix random seed for reproducibility\nnp.random.seed(7)\n# load the dataset","fb23fad9":"X=[]\nfor i in range(len(xplot)):\n  X.append(i)","811a94a0":"# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\ny_confirmed = scaler.fit_transform(y_confirmed.reshape(-1,1))\n# split into train and test sets\ntrain_size = int(len(y_confirmed) * 0.67)\ntest_size = len(y_confirmed) - train_size\ntrainX,testX,trainY,testY=X[0:train_size],X[train_size:],y_confirmed[0:train_size],y_confirmed[train_size:0]","9f0aa254":"look_back = 20\ntrainX, trainY = create_dataset(trainX, look_back)\ntestX, testY = create_dataset(testX, look_back)","d7e0b006":"print(trainX.shape,trainY.shape,testX.shape)","d34d1396":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))","e00b4a15":"model = Sequential()\nmodel.add(LSTM(20, input_shape=(look_back, 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nhistory=model.fit(trainX, trainY, epochs=1000, batch_size=1)\n","7415964a":"'''es = EarlyStopping(monitor='loss', mode='min', verbose=1,patience=64)\nmc = ModelCheckpoint(r'Covid_19_TimeSeries_Confirmed.h5', monitor='accuracy',mode='max', verbose=1, save_best_only=True) \n # fit mode'''\n","1e86dca5":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy vs loss')\nplt.ylabel('accuracy')\nplt.plot(history.history['loss'])\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.show()\nplt.show() ","d6471580":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform(trainY.reshape(-1,1))\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform(testY.reshape(-1,1))","72e5ac19":"# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY, trainPredict))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY, testPredict))\nprint('Test Score: %.2f RMSE' % (testScore))","46873a1b":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(y_confirmed)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict","f0e824d3":"testPredictPlot = np.empty_like(y_confirmed)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(y_confirmed)-1, :] = testPredict","b9cfefe5":"plt.figure(figsize=(10,10))\nplt.plot(scaler.inverse_transform(y_confirmed))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.legend(['Actual','Train prediction','Test prediction'])\nplt.show()","c0ac92eb":"# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\ny_deaths = scaler.fit_transform(y_deaths.reshape(-1,1))\n# split into train and test sets\ntrain_size = int(len(y_deaths) * 0.67)\ntest_size = len(y_deaths) - train_size\ntrainX,testX,trainY,testY=X[0:train_size],X[train_size:],y_deaths[0:train_size],y_deaths[train_size:0]","74bf1185":"look_back = 20\ntrainX, trainY = create_dataset(trainX, look_back)\ntestX, testY = create_dataset(testX, look_back)","51eaecb3":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))","74e6de6a":"model = Sequential()\nmodel.add(LSTM(20, input_shape=(look_back, 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam',metrics=['accuracy'])\n","30198dcf":"es = EarlyStopping(monitor='loss', mode='min', verbose=1,patience=64)\nmc = ModelCheckpoint(r'Covid_19_TimeSeries_Deaths.h5', monitor='accuracy',mode='max', verbose=1, save_best_only=True) \n # fit mode\nhistory=model.fit(trainX, trainY, epochs=1000, batch_size=1, verbose=1,callbacks=[es,mc])","ccdfa6b5":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy vs loss')\nplt.ylabel('accuracy')\nplt.plot(history.history['loss'])\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.show()\nplt.show() ","49311666":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform(trainY.reshape(-1,1))\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform(testY.reshape(-1,1))\n# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY, trainPredict))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY, testPredict))\nprint('Test Score: %.2f RMSE' % (testScore))","62f935b1":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(y_deaths)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\ntestPredictPlot = np.empty_like(y_deaths)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(y_deaths)-1, :] = testPredict","52ddf149":"plt.figure(figsize=(10,10))\nplt.plot(scaler.inverse_transform(y_deaths))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.legend(['Actual','Train prediction','Test prediction'])\nplt.show()","df935cb7":"# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\ny_recovered= scaler.fit_transform(y_recovered.reshape(-1,1))\n# split into train and test sets\ntrain_size = int(len(y_recovered) * 0.67)\ntest_size = len(y_recovered) - train_size\ntrainX,testX,trainY,testY=X[0:train_size],X[train_size:],y_recovered[0:train_size],y_recovered[train_size:0]","ab79a29c":"look_back = 20\ntrainX, trainY = create_dataset(trainX, look_back)\ntestX, testY = create_dataset(testX, look_back)","3c376bbb":"trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))","d2160f9e":"model = Sequential()\nmodel.add(LSTM(20, input_shape=(look_back, 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam',metrics=['accuracy'])\n","af4c3b5f":"es = EarlyStopping(monitor='loss', mode='min', verbose=1,patience=64)\nmc = ModelCheckpoint(r'Covid_19_TimeSeries_recovered.h5', monitor='accuracy',mode='max', verbose=1, save_best_only=True) \n # fit mode\nhistory=model.fit(trainX, trainY, epochs=1000, batch_size=1, verbose=1,callbacks=[es,mc])","bd27e20b":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy vs loss')\nplt.ylabel('accuracy')\nplt.plot(history.history['loss'])\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.show()\nplt.show() ","ced0d529":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform(trainY.reshape(-1,1))\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform(testY.reshape(-1,1))\n# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY, trainPredict))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY, testPredict))\nprint('Test Score: %.2f RMSE' % (testScore))","2e5dfd6b":"# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(y_recovered)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\ntestPredictPlot = np.empty_like(y_recovered)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(y_recovered)-1, :] = testPredict","556527dd":"plt.figure(figsize=(10,10))\nplt.plot(scaler.inverse_transform(y_recovered))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.legend(['Actual','Train prediction','Test prediction'])\nplt.show()","342af058":"Deaths Time Series Analaysis india","d36839e8":"Confirmed-Recovered -Deaths Plot","34ac888d":"Recovered TimeSeries Analysis India","3342d05e":"CONFIRMED TIME SERIES ANALYSIS\nINDIA\n","2f758ccf":"Using the historical day Predicting the deaths ,confirmed cases and recovered on that day"}}