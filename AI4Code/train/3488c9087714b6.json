{"cell_type":{"6c5b5942":"code","f8f9f727":"code","92ce4828":"code","ce7fa8c3":"code","4e6962f7":"code","b9e8edcf":"code","9ff84d8d":"code","2e021a65":"markdown"},"source":{"6c5b5942":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom xgboost import XGBClassifier","f8f9f727":"df = pd.read_csv(\"..\/input\/d\/pasadenian\/titanic\/train_5folds.csv\") # use your own splitted data (5 folds)\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\nuseful_features = [c for c in df.columns if c not in ('PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin', 'kfold')]\nobject_cols = ['Pclass', 'Sex', 'Embarked']\nobject_cols_to_impute = ['Embarked']\nnumerical_cols_to_impute = ['Age', 'Fare']\ndf_test = df_test[useful_features]\n\nfor col in object_cols:\n    temp_df = []\n    temp_test_feat = None\n    for fold in range(5):\n        xtrain =  df[df.kfold != fold].reset_index(drop=True)\n        xvalid = df[df.kfold == fold].reset_index(drop=True)\n        xtest = df_test.copy()\n        \n        feat = xtrain.groupby(col)[\"Survived\"].agg(\"mean\")\n        feat = feat.to_dict()\n        \n        imputer1 = SimpleImputer(strategy='median')\n        xtrain[numerical_cols_to_impute] = imputer1.fit_transform(xtrain[numerical_cols_to_impute])\n        xvalid[numerical_cols_to_impute] = imputer1.transform(xvalid[numerical_cols_to_impute])\n        xtest[numerical_cols_to_impute] = imputer1.transform(xtest[numerical_cols_to_impute])\n            \n        imputer2 = SimpleImputer(strategy='most_frequent')\n        xtrain[object_cols_to_impute] = imputer2.fit_transform(xtrain[object_cols_to_impute])\n        xvalid[object_cols_to_impute] = imputer2.transform(xvalid[object_cols_to_impute])\n        xtest[object_cols_to_impute] = imputer2.transform(xtest[object_cols_to_impute])\n    \n        xvalid.loc[:, f\"tar_enc_{col}\"] = xvalid[col].map(feat)\n        temp_df.append(xvalid)\n        if temp_test_feat is None:\n            temp_test_feat = df_test[col].map(feat)\n        else:\n            temp_test_feat += df_test[col].map(feat)\n    \n    temp_test_feat \/= 5\n    df_test.loc[:, f\"tar_enc_{col}\"] = temp_test_feat\n    df = pd.concat(temp_df)","92ce4828":"useful_features = [c for c in df.columns if c not in ('PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin', 'kfold')]\nobject_cols = ['Pclass', 'Sex', 'Embarked']\nobject_cols_to_impute = ['Embarked']\nnumerical_cols_to_impute = ['Age', 'Fare']\ndf_test = df_test[useful_features]","ce7fa8c3":"final_predictions = []; scores = []; acc_scores=[]\nfor fold in range(5):\n    \n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.Survived\n    yvalid = xvalid.Survived\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = preprocessing.OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    model = XGBClassifier(random_state=fold, objective='binary:logistic', eval_metric='logloss', use_label_encoder=False)\n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    loss = log_loss(yvalid, preds_valid)\n    accuracy = accuracy_score(yvalid, preds_valid)\n    print(fold, loss)\n    scores.append(loss)\n    acc_scores.append(accuracy)\n    \nprint(np.mean(scores), np.std(scores))\nprint(f\"CV score (accuracy): {np.mean(acc_scores):.3f}\")","4e6962f7":"preds = np.column_stack(final_predictions)\npreds = [*map(lambda x:np.argmax(np.bincount(x)), preds)]","b9e8edcf":"sample_submission.Survived = preds\nsample_submission.to_csv(\"submission.csv\", index=False)","9ff84d8d":"sample_submission","2e021a65":"Inherited from https:\/\/www.kaggle.com\/abhishek\/competition-part-3-target-encoding"}}