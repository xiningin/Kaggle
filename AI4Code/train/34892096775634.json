{"cell_type":{"dc8cbeb3":"code","bbcac518":"code","14bc8f3a":"code","62515c15":"code","0f7d7f85":"code","4481a272":"code","3c2f1dd9":"code","452332cd":"code","c1754ccb":"code","1a8a2748":"code","bf68cd96":"code","29fecd9a":"code","709f9f35":"code","a4eae270":"code","e17ac9ff":"code","73a50988":"code","8f77ace5":"code","4955c36a":"code","6a93ed88":"code","ba2a3592":"code","829ebb92":"code","7855efa5":"code","07858292":"code","dd891f36":"code","344e90f8":"code","30307e47":"code","0ad30142":"code","2a5d8513":"code","ad67d0c0":"code","b4785df1":"code","bc6614e7":"code","b59fdf90":"code","611d5b1c":"code","2e1f522b":"code","530403dc":"code","67f5dce6":"code","d93a8eaf":"code","01d7bad0":"code","8ada0248":"code","5f031ef8":"code","39b18bf4":"code","a293e8cc":"code","d010d224":"code","02837084":"code","47b2a422":"code","3dc5747b":"markdown","cd0f635d":"markdown","b94e1341":"markdown","02526080":"markdown","8763c717":"markdown","a4676acd":"markdown","fe30cc1c":"markdown","9260f1bf":"markdown","ac7f33ff":"markdown"},"source":{"dc8cbeb3":"#install fastai v2\n\n!pip install git+https:\/\/github.com\/fastai\/fastai_dev","bbcac518":"%matplotlib inline\n\nimport PIL\nimport pydicom\nimport numpy as np\nfrom pathlib import Path\nfrom matplotlib import pyplot as plt\nimport os\nimport torch\nimport seaborn as sns\nplt.style.use(\"seaborn\")\n\n#checking the input files\nprint(os.listdir(\"..\/input\/rsna-intracranial-hemorrhage-detection\/\"))","14bc8f3a":"#set input data path\n\ndir_csv = '..\/input\/rsna-intracranial-hemorrhage-detection'\ndir_train_img = '..\/input\/rsna-train-stage-1-images-png-224x\/stage_1_train_png_224x'\ndir_test_img = '..\/input\/rsna-test-stage-1-images-png-224x\/stage_1_test_png_224x'\ndir_train_csv = \"..\/input\/rsnsa-intracranial-hemorrahage-detection\/stage_1_train.csv\"\ndir_sample_submission_csv = \"..\/input\/rsnsa-intracranial-hemorrahage-detection\/stage_1_sample_submission.csv\"","62515c15":"#fastai libs\n\nfrom fastai2.torch_basics import *\nfrom fastai2.test import *\nfrom fastai2.layers import *\nfrom fastai2.data.all import *\nfrom fastai2.optimizer import *\nfrom fastai2.learner import *\nfrom fastai2.metrics import *\nfrom fastai2.vision.all import *\nfrom fastai2.vision.learner import *\nfrom fastai2.vision.models import *\nfrom fastai2.callback.all import *","0f7d7f85":"#get items\n\nitems = get_image_files(dir_train_img)\nitems = [i for i in items if '(copy)' not in i.name]","4481a272":"!mkdir -p data\n\n#read the train csv\ndf_train = pd.read_csv(f'{dir_csv}\/stage_1_train.csv')\ndf_train.head()","3c2f1dd9":"#check for any missing values in label\ndf_train.Label.isna().sum()","452332cd":"#refactor the csv file\n\ndf_train['fn'] = df_train.ID.apply(lambda x: '_'.join(x.split('_')[:2]) + '.png')\ndf_train.columns = ['ID', 'probability', 'fn']\ndf_train['label'] = df_train.ID.apply(lambda x: x.split('_')[-1])\ndf_train.drop_duplicates('ID', inplace=True)","c1754ccb":"pivot = df_train.pivot(index='fn', columns='label', values='probability')\npivot.reset_index(inplace=True)\npivot.to_csv('data\/train_pivot.csv', index=False)\npivot.head()","1a8a2748":"from collections import defaultdict\n\nd = defaultdict(list)\n\nfor fn in df_train.fn.unique(): \n    d[fn]\n    \nfor tup in df_train.itertuples():\n    if tup.probability:\n        d[tup.fn].append(tup.label)","bf68cd96":"#iterate through the items in 'd'\n\nks, vs = [], []\n\nfor k, v in d.items():\n    ks.append(k), vs.append(' '.join(v))\n    \n#save the dataframe\npd.DataFrame(data = {'fn': ks, \"labels\": vs}).to_csv('data\/train_labels_as_string.csv', index = False)","29fecd9a":"#define a class labeller\n\nclass Labeller():\n    \"\"\"path to label\"\"\"\n    def __init__(self):\n        self.df = pd.read_csv(\"data\/train_labels_as_string.csv\")\n        self.df.set_index(\"fn\", inplace = True)\n        \n    def __call__(self, path):\n        fn = path.name\n        labels_txt = self.df.loc[fn].labels\n        if isinstance(labels_txt, float) or labels_txt == ' ': return []\n        return labels_txt.split(' ')","709f9f35":"#create an object of the class\n\nlabeler = Labeller()","a4eae270":"classes = L(pd.read_csv(\"data\/train_pivot.csv\").columns.tolist()[1:])\nclasses","e17ac9ff":"mcat = MultiCategorize(vocab = classes)\nmcat.o2i = classes.val2idx()","73a50988":"mcat.o2i #mapping dictionary","8f77ace5":"tfms = [PILImage.create, [Labeller(), mcat, OneHotEncode()]]\nds_img_tfms = [ToTensor()]\ndsrc = DataSource(items, tfms, splits = RandomSplitter()(items))","4955c36a":"test_paths = get_image_files(dir_test_img)\ntest_tfms = [PILImage.create, [lambda x: np.array([0,0,0,0,0,0])]]\ndsrc_test = DataSource([test_paths[0]] + test_paths, test_tfms, splits=[[0], L(range(len(test_paths))).map(lambda x: x + 1)])","6a93ed88":"dsrc_test[0]","ba2a3592":"means = [0.1627, 0.1348, 0.1373]\nst_devs = [0.2961, 0.2605, 0.1889]\n\ndataset_stats = (means, st_devs)\ndataset_stats = broadcast_vec(1, 4, *dataset_stats)","829ebb92":"#create train and test data bunch\n\nds_img_tfms = [ToTensor()]\ndl_tfms = [Cuda(), IntToFloatTensor(), Normalize(*dataset_stats)]\n\n#train data bunch\ndbch = dsrc.databunch(after_item = ds_img_tfms, after_batch = dl_tfms, bs = 128, num_workers = 4)\n\n#test data bunch\ndbch_test = dsrc_test.databunch(after_item = ds_img_tfms, after_batch = dl_tfms, bs = 128, num_workers = 4)","7855efa5":"model = create_cnn_model(resnet18, 6, -2, True)","07858292":"model_segments = model[0][:6], model[0][6:], model[1]","dd891f36":"def trainable_params_mod(model): return L(trainable_params(segment) for segment in model_segments)\n\n#define optimization function.\nopt_func = partial(Adam, wd=0.01, eps=1e-3)","344e90f8":"#create a learner\n\nlearn = Learner(\n    dbch,\n    model,\n    loss_func=BCEWithLogitsLossFlat(),\n    metrics=[accuracy_multi],\n    opt_func=opt_func,\n    splitter=trainable_params_mod\n)","30307e47":"#freeze\n\nlearn.freeze_to(-1)","0ad30142":"#find learning rate\n\nlearn.lr_find()","2a5d8513":"#fit one cycle\n\nlearn.fit_one_cycle(2, 2e-2)","ad67d0c0":"#save the model\nlearn.save('phase-1')","b4785df1":"#load the model again\nlearn.load('phase-1');","bc6614e7":"#freeze\nlearn.freeze_to(-2)","b59fdf90":"learn.lr_find(start_lr=1e-8, end_lr=1e-1)","611d5b1c":"learn.fit_one_cycle(2, [1e-3, 1e-4, 1e-5]) #fit another cycle","2e1f522b":"learn.recorder.plot_loss() #plot the loss","530403dc":"learn.save('phase-2')\n\nlearn.load('phase-2');","67f5dce6":"learn.unfreeze()","d93a8eaf":"learn.fit_one_cycle(5, [1e-4, 5e-4, 1e-3])","01d7bad0":"learn.save('phase-3')","8ada0248":"learn.load('phase-3')","5f031ef8":"learn.metrics = [PrecisionMulti(), RecallMulti()]","39b18bf4":"learn.validate()","a293e8cc":"learn.dbunch = dbch_test","d010d224":"preds, targs = learn.get_preds()","02837084":"#create a pred labels and probability\nids = []\nlabels = []\n\nfor path, pred in zip(test_paths, preds):\n    for i, label in enumerate(classes):\n        ids.append(f\"{path.name.split('.')[0]}_{label}\")\n        predicted_probability = '{0:1.10f}'.format(pred[i].item())\n        labels.append(predicted_probability)","47b2a422":"#make submission file\npd.DataFrame({'ID': ids, 'Label': labels}).to_csv(f'submission.csv', index=False)","3dc5747b":"- define how I want to split the model for applying differential learing rates","cd0f635d":"![Types of Hemorrahages](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F603584%2F56162e47358efd77010336a373beb0d2%2Fsubtypes-of-hemorrhage.png?generation=1568657910458946&alt=media)","b94e1341":"# RSNA Intracranial Hemorrhage Detection\n- Identify acute intracranial hemorrhage and its subtypes","02526080":"Processing the `stage_1_train.csv` into something more parsable.","8763c717":"# Import Libraries\n- For this challenge we will use the latest version of [fastai v2 library](https:\/\/github.com\/fastai\/fastai_dev). The library is under active development so we will install it from source using 'pip'.","a4676acd":"> We need to refactor the pivot data since are using Data blocks API from fastai lib","fe30cc1c":"# Create Model","9260f1bf":"- Intracranial hemorrhage, bleeding that occurs inside the cranium, is a serious health problem requiring rapid and often intensive medical treatment. For example, intracranial hemorrhages account for approximately 10% of strokes in the U.S., where stroke is the fifth-leading cause of death. Identifying the location and type of any hemorrhage present is a critical step in treating the patient.\n\n- Diagnosis requires an urgent procedure. When a patient shows acute neurological symptoms such as severe headache or loss of consciousness, highly trained specialists review medical images of the patient\u2019s cranium to look for the presence, location and type of hemorrhage. The process is complicated and often time consuming.\n\n- In this competition, we will build an algorithm to detect acute intracranial hemorrhage and its subtypes.","ac7f33ff":"- **This kernel is based on the starter pack created by Radek. check out his** [github page](https:\/\/github.com\/radekosmulski\/rsna-intracranial) **and** [kaggle kernel](https:\/\/www.kaggle.com\/radek1\/fastai-starter-pack-train-basic-model-and-submit).\n\n- The code to generate images to 224x224 is from [here](https:\/\/www.kaggle.com\/taindow\/generate-images-train)"}}