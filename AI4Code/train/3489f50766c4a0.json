{"cell_type":{"b5658abf":"code","572058dd":"code","a5cbc9c1":"code","7a308f71":"code","5bed8528":"code","4cbab46c":"code","0cf361dc":"code","affb39e9":"code","c128d636":"code","ac842cdf":"code","a3908a4c":"code","7c48b4d8":"code","68bfd6c7":"code","a9b768af":"code","94ff42c0":"code","eb4ee6ca":"code","2a817f3c":"code","d876b20f":"code","fdf45fb5":"code","7ae5c9c9":"code","fe837ee9":"code","27763e0b":"code","3c2f3ff1":"code","a3b03665":"code","85241689":"code","b7cc3ec1":"code","acc51461":"code","c17d91c3":"code","cce4e27a":"code","720d062e":"code","7b2b6b89":"code","9f668f74":"code","c06c3f6c":"code","2efc80e6":"code","908a522a":"code","d6d3d2e5":"code","57df546b":"code","eac85c2e":"code","650604c7":"code","2c0f9014":"code","c5177fad":"code","ad425a97":"code","2b070f16":"code","8e6ce275":"code","0ce88177":"code","5f7dd0ef":"code","59cb68ef":"code","725bd671":"code","2dbcf1c1":"code","aec9e563":"code","85f004a9":"code","e5ad63ee":"code","eb97674b":"code","15a25986":"code","265866a2":"code","c3c3f9fe":"code","d5915911":"code","2ba0ffac":"code","d4112127":"code","4c3dac34":"code","9eae6ea7":"code","57ff8e7f":"code","88e122bb":"code","72e9ea9c":"code","756b88f5":"code","dd3f1bf4":"code","6de84752":"code","01721ae3":"code","05266a70":"code","3312fa99":"code","6ad6c0cb":"code","2948621e":"code","9ad3f862":"code","92a651c6":"code","dab897f9":"markdown","24e48141":"markdown","3570dcd8":"markdown","ad85bfca":"markdown","1f0748c1":"markdown","708f92f8":"markdown","fc0a3bec":"markdown","2124679e":"markdown","b5dc07ac":"markdown","8e333de4":"markdown","bb796859":"markdown","68a99b9c":"markdown","23da83b0":"markdown","bf5a4a18":"markdown","219488f1":"markdown","da6140c3":"markdown","7e3c167b":"markdown","6844f031":"markdown","ba222de9":"markdown","76fc9b55":"markdown","6f4bef34":"markdown","f3c5a76f":"markdown","3cc5cdf3":"markdown","ad5e3151":"markdown","fb2bbcc4":"markdown","e2bd602f":"markdown","a88fa31e":"markdown","197cca01":"markdown","3713257e":"markdown","4b4efc8e":"markdown","40c48cc6":"markdown","4f09df9c":"markdown","8f1d4457":"markdown","79152640":"markdown","01024e0e":"markdown","ad0b62bd":"markdown","49c62fb9":"markdown","c39e695b":"markdown","73a4cb33":"markdown","783a3e3b":"markdown","ad4fc69c":"markdown","45b2b9e1":"markdown","b70eedee":"markdown","d925abbe":"markdown"},"source":{"b5658abf":"#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.","572058dd":"#!pip install -q tfds-nightly\n\n# Pin matplotlib version to 3.2.2 since in the latest version\n# transformer.ipynb fails with the following error:\n# https:\/\/stackoverflow.com\/questions\/62953704\/valueerror-the-number-of-fixedlocator-locations-5-usually-from-a-call-to-set\n#!pip install matplotlib==3.2.2","a5cbc9c1":"#import tensorflow_datasets as tfds\nimport tensorflow as tf\nimport random \n\nimport time\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport IPython.display as ipd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport librosa.display","7a308f71":"!pip install pyunpack\n!pip install patool","5bed8528":"from pyunpack import Archive\nimport shutil\nif not os.path.exists('\/kaggle\/working\/train\/'):\n    os.makedirs('\/kaggle\/working\/train\/')\nArchive('\/kaggle\/input\/tensorflow-speech-recognition-challenge\/train.7z').extractall('\/kaggle\/working\/train\/')\n\"\"\"for dirname, _, filenames in os.walk('\/kaggle\/working\/train\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\"\"\"\nprint(\"done\")","4cbab46c":"#shutil.make_archive('train\/', 'zip', 'train')\ntrain_audio_path = \"\/kaggle\/working\/train\/train\/audio\"\n","0cf361dc":"filename = \"\/kaggle\/working\/train\/train\/audio\/house\/3dfd6c23_nohash_0.wav\"\nipd.Audio(filename)","affb39e9":"plt.figure(figsize=(14, 5))\n#plt.title(\"label : {}\".format(y))\nsample, rate = librosa.load(filename) \nprint('rate : ',rate)\nlibrosa.display.waveplot(sample)","c128d636":"!pip install speechpy","ac842cdf":"processing.power_spectrum?","a3908a4c":"import sys,os\nfrom random import shuffle\nfrom tqdm import tqdm\nimport numpy as np\nsys.path.append(\"..\")\nfrom speechpy import processing\nfrom speechpy import feature\nimport scipy.io.wavfile as wav\n\nsignal_preemphasized = processing.preemphasis(sample, cof=0.98)\n# Stacking frames\nframes = processing.stack_frames(signal_preemphasized, sampling_frequency=rate,\n                                 frame_length=0.025,\n                                 frame_stride=0.010,\n                                 zero_padding=True,)\n\n\n# Extracting power spectrum\npower_spectrum = processing.power_spectrum(frames, fft_points=512) # num_frames x fft_length\n\nprint('power spectrum shape=', power_spectrum.shape)\n\n############# Extract fbanks features #############\nlog_fbank = feature.lmfe(signal_preemphasized,sampling_frequency=rate,frame_length=0.025,\n                    frame_stride=0.010,num_filters=80,\n                     fft_length=512, low_frequency=0,high_frequency=None) # num_frames x num_filters\nprint('filter bank shape : ',log_fbank.shape)\n\n#log_fbank = feature.extract_derivative_feature(log_fbank)\n\nprint('filter bank shape : ',log_fbank.shape)","7c48b4d8":"X = librosa.stft(sample)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=rate, x_axis='time', y_axis='hz')","68bfd6c7":"def compute_fbank(file,debug=True):\n    apply_cmvn = True\n    sr, signal = wav.read(file)\n    if debug:\n        print('signal shape: ',signal.shape)\n    # Pre-emphasizing.\n    signal_preemphasized = processing.preemphasis(signal, cof=0.98)\n    # Stacking frames\n    frames = processing.stack_frames(signal_preemphasized, sampling_frequency=sr,\n                                     frame_length=0.025,\n                                     frame_stride=0.010,\n                                     zero_padding=True)\n\n    # Extracting power spectrum\n    power_spectrum = processing.power_spectrum(frames, fft_points=512) # num_frames x fft_length\n    if debug:\n        print('power spectrum shape=', power_spectrum.shape)\n\n    ############# Extract fbanks features #############\n    log_fbank = feature.lmfe(signal_preemphasized,sampling_frequency=sr,frame_length=0.025,\n                        frame_stride=0.010,num_filters=80,\n                         fft_length=512, low_frequency=0,high_frequency=None) # num_frames x num_filters\n\n\n    if apply_cmvn:\n        # Cepstral mean variance normalization.\n        log_fbank_cmvn = processing.cmvn(log_fbank, variance_normalization=True)\n        if debug:\n            print('fbank(mean + variance normalized) feature shape=', log_fbank_cmvn.shape)\n        log_fbank = log_fbank_cmvn # num_frames x num_filters\n\n    # Extracting derivative features\n    #log_fbank = feature.extract_derivative_feature(log_fbank)\n    # print('log fbank feature cube shape=', log_fbank_feature_cube.shape) # num_frames x num_filters x 3\n\n    # frameSlice and dowmSampling\n    # concat_mat = concat_frame(log_fbank)\n    # log_fbank = subsampling(concat_mat)\n    # log_fbank = build_LFR_features(log_fbank, data_config.LFR_m, data_config.LFR_n)\n    if debug:\n        print('concat & subsample shape=', log_fbank.shape)\n\n    return log_fbank\n","a9b768af":"lfbank = compute_fbank(filename)","94ff42c0":"from glob import glob\nimport re\ndef list_wavs_fname(dirpath, ext='wav'):\n    print(dirpath)\n    fpaths = glob(os.path.join(dirpath, r'*\/*' + ext))\n    pat = r'.+\/(\\w+)\/\\w+\\.' + ext + '$'\n    labels = []\n    for fpath in fpaths:\n        r = re.match(pat, fpath)\n        \n        if r:\n            labels.append(r.group(1))\n    pat = r'.+\/(\\w+\\.' + ext + ')$'\n    fnames = []\n    for fpath in fpaths:\n        r = re.match(pat, fpath)\n        if r:\n            fnames.append(r.group(1))\n    return labels, fnames\n\n\nlabels, fnames = list_wavs_fname(train_audio_path)\nprint(len(labels), len(fnames))","eb4ee6ca":"uniq_labels = set(labels)\nuniq_labels = list(uniq_labels)\nprint(len(uniq_labels))","2a817f3c":"PAD = -1\nUNK = 0\nBOS = 1\nEOS = 2\nPAD_FLAG = '<PAD>'\nUNK_FLAG = '<UNK>'\nBOS_FLAG = '<SOS>'\nEOS_FLAG = '<EOS>'\nchars = ['<UNK>','<SOS>','<EOS>','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q',\n         'r','s','t','u','v','w','x','y','z','_','\\'']\nnum_mels = 80\nleft_context_width = 0\n\ntrain_audio_path = \"\/kaggle\/working\/train\/train\/audio\"\n\nmapIndexPosition = list(zip(labels, fnames))\nrandom.shuffle(mapIndexPosition)\nr_labels, r_fnames = zip(*mapIndexPosition)\n\ndef mk_vocab():\n    vocab = chars\n    return vocab\n\nvocab = mk_vocab()\n\ndef wav_padding(wav_data_lst):\n    feature_dim = num_mels *  (left_context_width+1)# 80 mels * 4 stack\n    wav_lens = np.array([len(data) for data in wav_data_lst])  # len(data)\u5b9e\u9645\u4e0a\u5c31\u662f\u6c42\u8bed\u8c31\u56fe\u7684\u7b2c\u4e00\u7ef4\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662fn_frames\n    # \u53d6\u4e00\u4e2abatch\u4e2d\u7684\u6700\u957f\n    wav_max_len = max(wav_lens)\n    # TODO: 1-D conv\u662f \u4e09\u7ef4 \uff0c2-D conv\u662f\u56db\u7ef4 \uff0cnp.zeros \u9ed8\u8ba4\u662ffloat32\n    new_wav_data_lst = np.zeros(\n        (len(wav_data_lst), wav_max_len, feature_dim),dtype=np.float32) # \u5982\u679c\u589e\u52a0\u4e86\u4e00\u9636\u548c\u4e8c\u9636\u5bfc\u6570\u5219\u662f\u4e09\u4e2achannel\uff0c\u5206\u522b\u662fstatic, first and second derivative features\n    for i in range(len(wav_data_lst)):\n        new_wav_data_lst[i, :wav_data_lst[i].shape[0], :] = wav_data_lst[i]\n    # print('new_wav_data_lst',new_wav_data_lst.shape,wav_lens.shape)\n    return new_wav_data_lst, wav_lens\n\n\ndef label_padding(label_data_lst,pad_idx):\n    label_lens = np.array([len(label) for label in label_data_lst])\n    max_label_len = max(label_lens)\n    new_label_data_lst = np.zeros((len(label_data_lst), max_label_len),dtype=np.int32)\n    new_label_data_lst += pad_idx\n    for i in range(len(label_data_lst)):\n        #print(label_data_lst[i])\n        new_label_data_lst[i][:len(label_data_lst[i])] = label_data_lst[i]\n    return new_label_data_lst, label_lens\n\n\ndef char2id(label, vocab):\n    ids = []\n    for char in label:\n        if char in vocab:\n            ids.append(vocab.index(char))\n        else:\n            ids.append(vocab.index('<UNK>'))\n    return ids\n\ndef id2char(seq, vocab):\n    \"\"\" Use a index map and convert int to a text sequence\n        >>> from utils import int_to_text_sequence\n        >>> a = [2,22,10,11,21,2,13,11,6,1,21,2,8,20,17]\n        >>> b = int_to_text_sequence(a)\n    \"\"\"\n    text_sequence = []\n    for c in seq:\n        if c == 30: #ctc\/pad char\n            ch = ''\n        else:\n            ch = vocab[c]\n        text_sequence.append(ch)\n    return text_sequence\n\n\ndef get_batch(batch_size, files, labels):\n    # shuffle\u53ea\u662f\u5bf9index\u6253\u4e71\uff0c\u6ca1\u6709\u5bf9\u539f\u59cb\u6570\u636e\u6253\u4e71\uff0c\u6240\u4ee5wav_lst[i]\u548cpny_lst[i]\u8fd8\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\n    shuffle_list = [i for i in range(len(files))]\n    while 1:\n        # len(self.wav_lst) \/\/ self.batch_size\u7684\u503c \u8868\u793a\u4e00\u4e2aepoch\u91cc\u6709\u591a\u5c11step\u624d\u80fd\u628a\u6240\u6709\u6570\u636e\u8fc7\u4e00\u904d\n        for i in range(len(files) \/\/ batch_size):\n            wav_data_lst = []  # wav_data_lst\u91cc\u653e\u7684\u662fbatch_size\u4e2a\u9891\u8c31\u56fe wav_lst\u91cc\u653e\u7684\u662f\u97f3\u9891\u6587\u4ef6\u5730\u5740\n            label_data_lst = []\n            ground_truth_lst = []\n            begin = i * batch_size\n            end = begin + batch_size\n            sub_list = shuffle_list[begin:end]\n            for index in sub_list:\n                # TODO\uff1a\u8ba1\u7b97\u9891\u8c31\u56fe\n                #print(labels[index], files[index])\n                fbank = compute_fbank(os.path.join(train_audio_path, labels[index], files[index]),False) # T,D,3\n\n                pad_fbank = fbank\n                label = char2id([BOS_FLAG], vocab)+char2id( labels[index], vocab)\n                g_truth = char2id(labels[index], vocab)+char2id([EOS_FLAG], vocab)\n                # print(label)\n                wav_data_lst.append(pad_fbank)\n                label_data_lst.append(label)\n                ground_truth_lst.append(g_truth)\n\n            # TODO\uff1a\u5bf9\u9891\u8c31\u56fe\u65f6\u95f4\u7ef4\u5ea6\u8fdb\u884c\u7b2c\u4e8c\u6b21pad\uff0cpad\u6210\u672c\u6b21batch\u4e2d\u6700\u957f\u7684\u957f\u5ea6\n            # TODO: label\u662fdecoder\u8f93\u5165 g_truth\u662fdecoder\u7684target\n            pad_wav_data, input_length = wav_padding(wav_data_lst)\n            pad_label_data, label_length = label_padding(label_data_lst,EOS)\n            pad_ground_truth, _ = label_padding(ground_truth_lst,PAD)\n\n            inputs = {'the_inputs': pad_wav_data,\n                      'the_labels': pad_label_data,\n                      'input_length': input_length.reshape(-1,),\n                      'label_length': label_length.reshape(-1,),  # batch\u4e2d\u7684\u6bcf\u4e2autt\u7684\u771f\u5b9e\u957f\u5ea6\n                      'ground_truth': pad_ground_truth\n                      }\n            print('genarate one batch mel data')\n            \n            yield inputs","d876b20f":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(r_fnames, r_labels, test_size=0.3, random_state=42)\nX_train, X_test, Y_train, Y_test = train_test_split(r_fnames, r_labels, test_size=0.1, random_state=42)\nprint(len(Y_train), len(X_train), len(X_val), len(X_test), len(Y_test))\n","fdf45fb5":"train_generator = get_batch(batch_size=32, files = X_train, labels = Y_train)\nvalidation_generator = get_batch(batch_size=32, files = X_val, labels = Y_val)","7ae5c9c9":"for ((inp, tar)) in enumerate(train_generator):\n    (inp, tar)\n    ","fe837ee9":"inp","27763e0b":"text_sequence = []\nseq = [5, 3, 22, 2]\nfor c in seq:\n    if c == 28: #ctc\/pad char\n        ch = ''\n    else:\n        ch = vocab[c]\n    text_sequence.append(ch)\ntext_sequence","3c2f3ff1":"BUFFER_SIZE = 20000\nBATCH_SIZE = 64","a3b03665":"def get_angles(pos, i, d_model):\n    angle_rates = 1 \/ np.power(10000, (2 * (i\/\/2)) \/ np.float32(d_model))\n    return pos * angle_rates","85241689":"def positional_encoding(position, d_model):\n    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n                          np.arange(d_model)[np.newaxis, :],\n                          d_model)\n\n    # apply sin to even indices in the array; 2i\n    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n\n    # apply cos to odd indices in the array; 2i+1\n    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n\n    pos_encoding = angle_rads[np.newaxis, ...]\n\n    return tf.cast(pos_encoding, dtype=tf.float32)","b7cc3ec1":"pos_encoding = positional_encoding(50, 512)\nprint (pos_encoding.shape)\n\nplt.pcolormesh(pos_encoding[0], cmap='RdBu')\nplt.xlabel('Depth')\nplt.xlim((0, 512))\nplt.ylabel('Position')\nplt.colorbar()\nplt.show()","acc51461":"def create_padding_mask(seq):\n    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n\n    # add extra dimensions to add the padding\n    # to the attention logits.\n    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)","c17d91c3":"x = tf.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])\ncreate_padding_mask(x)","cce4e27a":"def create_look_ahead_mask(size):\n    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n    return mask  # (seq_len, seq_len)","720d062e":"x = tf.random.uniform((1, 3))\nprint(x)\ntemp = create_look_ahead_mask(x.shape[1])\ntemp","7b2b6b89":"def scaled_dot_product_attention(q, k, v, mask):\n    \"\"\"Calculate the attention weights.\n    q, k, v must have matching leading dimensions.\n    k, v must have matching penultimate dimension, i.e.: seq_len_k = seq_len_v.\n    The mask has different shapes depending on its type(padding or look ahead) \n    but it must be broadcastable for addition.\n\n    Args:\n    q: query shape == (..., seq_len_q, depth)\n    k: key shape == (..., seq_len_k, depth)\n    v: value shape == (..., seq_len_v, depth_v)\n    mask: Float tensor with shape broadcastable \n          to (..., seq_len_q, seq_len_k). Defaults to None.\n\n    Returns:\n    output, attention_weights\n    \"\"\"\n\n    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n\n    # scale matmul_qk\n    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n    scaled_attention_logits = matmul_qk \/ tf.math.sqrt(dk)\n\n    # add the mask to the scaled tensor.\n    if mask is not None:\n        scaled_attention_logits += (mask * -1e9)  \n\n    # softmax is normalized on the last axis (seq_len_k) so that the scores\n    # add up to 1.\n    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n\n    output = tf.matmul(attention_weights, v)  # (..., seq_len_q, depth_v)\n\n    return output, attention_weights","9f668f74":"def print_out(q, k, v):\n    temp_out, temp_attn = scaled_dot_product_attention(\n      q, k, v, None)\n    print ('Attention weights are:')\n    print (temp_attn)\n    print ('Output is:')\n    print (temp_out)","c06c3f6c":"np.set_printoptions(suppress=True)\n\ntemp_k = tf.constant([[10,0,0],\n                      [0,10,0],\n                      [0,0,10],\n                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n\ntemp_v = tf.constant([[   1,0],\n                      [  10,0],\n                      [ 100,5],\n                      [1000,6]], dtype=tf.float32)  # (4, 2)\n\n# This `query` aligns with the second `key`,\n# so the second `value` is returned.\ntemp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\nprint_out(temp_q, temp_k, temp_v)","2efc80e6":"# This query aligns with a repeated key (third and fourth), \n# so all associated values get averaged.\ntemp_q = tf.constant([[0, 0, 10]], dtype=tf.float32)  # (1, 3)\nprint_out(temp_q, temp_k, temp_v)","908a522a":"# This query aligns equally with the first and second key, \n# so their values get averaged.\ntemp_q = tf.constant([[10, 10, 0]], dtype=tf.float32)  # (1, 3)\nprint_out(temp_q, temp_k, temp_v)","d6d3d2e5":"temp_q = tf.constant([[0, 0, 10], [0, 10, 0], [10, 10, 0]], dtype=tf.float32)  # (3, 3)\nprint_out(temp_q, temp_k, temp_v)","57df546b":"class MultiHeadAttention(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads):\n        super(MultiHeadAttention, self).__init__()\n        self.num_heads = num_heads\n        self.d_model = d_model\n\n        assert d_model % self.num_heads == 0\n\n        self.depth = d_model \/\/ self.num_heads\n\n        self.wq = tf.keras.layers.Dense(d_model)\n        self.wk = tf.keras.layers.Dense(d_model)\n        self.wv = tf.keras.layers.Dense(d_model)\n\n        self.dense = tf.keras.layers.Dense(d_model)\n\n    def split_heads(self, x, batch_size):\n        \"\"\"Split the last dimension into (num_heads, depth).\n        Transpose the result such that the shape is (batch_size, num_heads, seq_len, depth)\n        \"\"\"\n        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n        return tf.transpose(x, perm=[0, 2, 1, 3])\n\n    def call(self, v, k, q, mask):\n        batch_size = tf.shape(q)[0]\n\n        q = self.wq(q)  # (batch_size, seq_len, d_model)\n        k = self.wk(k)  # (batch_size, seq_len, d_model)\n        v = self.wv(v)  # (batch_size, seq_len, d_model)\n\n        q = self.split_heads(q, batch_size)  # (batch_size, num_heads, seq_len_q, depth)\n        k = self.split_heads(k, batch_size)  # (batch_size, num_heads, seq_len_k, depth)\n        v = self.split_heads(v, batch_size)  # (batch_size, num_heads, seq_len_v, depth)\n\n        # scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)\n        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n        scaled_attention, attention_weights = scaled_dot_product_attention(\n            q, k, v, mask)\n\n        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  # (batch_size, seq_len_q, num_heads, depth)\n\n        concat_attention = tf.reshape(scaled_attention, \n                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_q, d_model)\n\n        output = self.dense(concat_attention)  # (batch_size, seq_len_q, d_model)\n\n        return output, attention_weights","eac85c2e":"temp_mha = MultiHeadAttention(d_model=512, num_heads=8)\ny = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\nout, attn = temp_mha(y, k=y, q=y, mask=None)\nout.shape, attn.shape","650604c7":"def point_wise_feed_forward_network(d_model, dff):\n    return tf.keras.Sequential([\n      tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n      tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n    ])","2c0f9014":"sample_ffn = point_wise_feed_forward_network(512, 2048)\nsample_ffn(tf.random.uniform((64, 50, 512))).shape","c5177fad":"class EncoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        super(EncoderLayer, self).__init__()\n\n        self.mha = MultiHeadAttention(d_model, num_heads)\n        self.ffn = point_wise_feed_forward_network(d_model, dff)\n\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n\n    def call(self, x, training, mask):\n\n        attn_output, attn_weights_encoder = self.mha(x, x, x, mask)  # (batch_size, input_seq_len, d_model)\n        attn_output = self.dropout1(attn_output, training=training)\n        out1 = self.layernorm1(x + attn_output)  # (batch_size, input_seq_len, d_model)\n\n        ffn_output = self.ffn(out1)  # (batch_size, input_seq_len, d_model)\n        ffn_output = self.dropout2(ffn_output, training=training)\n        out2 = self.layernorm2(out1 + ffn_output)  # (batch_size, input_seq_len, d_model)\n\n        return out2, attn_weights_encoder","ad425a97":"sample_encoder_layer = EncoderLayer(512, 8, 2048)\n\nsample_encoder_layer_output, atten = sample_encoder_layer(\n    tf.random.uniform((64, 43, 512)), False, None)\n\nsample_encoder_layer_output.shape, atten.shape  # (batch_size, input_seq_len, d_model)","2b070f16":"class DecoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        super(DecoderLayer, self).__init__()\n\n        self.mha1 = MultiHeadAttention(d_model, num_heads)\n        self.mha2 = MultiHeadAttention(d_model, num_heads)\n\n        self.ffn = point_wise_feed_forward_network(d_model, dff)\n\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n        self.dropout3 = tf.keras.layers.Dropout(rate)\n\n\n    def call(self, x, enc_output, training, \n           look_ahead_mask, padding_mask):\n        # enc_output.shape == (batch_size, input_seq_len, d_model)\n\n        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)  # (batch_size, target_seq_len, d_model)\n        attn1 = self.dropout1(attn1, training=training)\n        out1 = self.layernorm1(attn1 + x)\n\n        attn2, attn_weights_block2 = self.mha2(\n            enc_output, enc_output, out1, padding_mask)  # (batch_size, target_seq_len, d_model)\n        attn2 = self.dropout2(attn2, training=training)\n        out2 = self.layernorm2(attn2 + out1)  # (batch_size, target_seq_len, d_model)\n\n        ffn_output = self.ffn(out2)  # (batch_size, target_seq_len, d_model)\n        ffn_output = self.dropout3(ffn_output, training=training)\n        out3 = self.layernorm3(ffn_output + out2)  # (batch_size, target_seq_len, d_model)\n\n        return out3, attn_weights_block1, attn_weights_block2","8e6ce275":"sample_decoder_layer = DecoderLayer(512, 8, 2048)\n\nsample_decoder_layer_output, _, _ = sample_decoder_layer(\n    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n    False, None, None)\n\nsample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)","0ce88177":"class Encoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n               maximum_position_encoding, rate=0.1):\n        super(Encoder, self).__init__()\n\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)\n        self.pos_encoding = positional_encoding(maximum_position_encoding, \n                                                self.d_model)\n\n\n        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) \n                           for _ in range(num_layers)]\n\n        self.dropout = tf.keras.layers.Dropout(rate)\n        \n    def call(self, x, training, mask):\n\n        seq_len = tf.shape(x)[1]\n        attention_weights_encoder = {}\n\n        # adding embedding and position encoding.\n        x = self.embedding(x)  # (batch_size, input_seq_len, d_model)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n        x += self.pos_encoding[:, :seq_len, :]\n\n        x = self.dropout(x, training=training)\n\n        for i in range(self.num_layers):\n            x, block = self.enc_layers[i](x, training, mask)\n            attention_weights_encoder['encoder_layer{}_block'.format(i+1)] = block\n\n        return x, attention_weights_encoder  # (batch_size, input_seq_len, d_model)","5f7dd0ef":"sample_encoder = Encoder(num_layers=2, d_model=512, num_heads=8, \n                         dff=2048, input_vocab_size=10000,\n                         maximum_position_encoding=10000)\ntemp_input = tf.random.uniform((64, 62), dtype=tf.int64, minval=0, maxval=200)\n\nsample_encoder_output, atten = sample_encoder(temp_input, training=False, mask=None)\n\nprint (sample_encoder_output.shape, atten['encoder_layer1_block'].shape)  # (batch_size, input_seq_len, d_model)","59cb68ef":"class Decoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, target_vocab_size,\n               maximum_position_encoding, rate=0.1):\n        super(Decoder, self).__init__()\n\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)\n        self.pos_encoding = positional_encoding(maximum_position_encoding, d_model)\n\n        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) \n                           for _ in range(num_layers)]\n        self.dropout = tf.keras.layers.Dropout(rate)\n\n    def call(self, x, enc_output, training, \n           look_ahead_mask, padding_mask):\n\n        seq_len = tf.shape(x)[1]\n        attention_weights = {}\n\n        x = self.embedding(x)  # (batch_size, target_seq_len, d_model)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n        x += self.pos_encoding[:, :seq_len, :]\n\n        x = self.dropout(x, training=training)\n\n        for i in range(self.num_layers):\n            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n                                                 look_ahead_mask, padding_mask)\n\n            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n\n        # x.shape == (batch_size, target_seq_len, d_model)\n        return x, attention_weights","725bd671":"sample_decoder = Decoder(num_layers=2, d_model=512, num_heads=8, \n                         dff=2048, target_vocab_size=8000,\n                         maximum_position_encoding=5000)\ntemp_input = tf.random.uniform((64, 26), dtype=tf.int64, minval=0, maxval=200)\n\noutput, attn = sample_decoder(temp_input, \n                              enc_output=sample_encoder_output, \n                              training=False,\n                              look_ahead_mask=None, \n                              padding_mask=None)\n\noutput.shape, attn['decoder_layer2_block2'].shape","2dbcf1c1":"class Transformer(tf.keras.Model):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size, \n               target_vocab_size, pe_input, pe_target, rate=0.1):\n        super(Transformer, self).__init__()\n\n        self.encoder = Encoder(num_layers, d_model, num_heads, dff, \n                               input_vocab_size, pe_input, rate)\n\n        self.decoder = Decoder(num_layers, d_model, num_heads, dff, \n                               target_vocab_size, pe_target, rate)\n\n        self.final_layer = tf.keras.layers.Dense(target_vocab_size)\n\n    def call(self, inp, tar, training, enc_padding_mask, \n           look_ahead_mask, dec_padding_mask):\n\n        enc_output, attention_weights_encoder = self.encoder(inp, training, enc_padding_mask)  # (batch_size, inp_seq_len, d_model)\n\n        # dec_output.shape == (batch_size, tar_seq_len, d_model)\n        dec_output, attention_weights = self.decoder(\n            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n\n        final_output = self.final_layer(dec_output)  # (batch_size, tar_seq_len, target_vocab_size)\n\n        return final_output, attention_weights, attention_weights_encoder","aec9e563":"sample_transformer = Transformer(\n    num_layers=2, d_model=512, num_heads=8, dff=2048, \n    input_vocab_size=10000, target_vocab_size=8000, \n    pe_input=10000, pe_target=6000)\n\ntemp_input = tf.random.uniform((64, 38), dtype=tf.int64, minval=0, maxval=200)\ntemp_target = tf.random.uniform((64, 36), dtype=tf.int64, minval=0, maxval=200)\n\nfn_out, _, _ = sample_transformer(temp_input, temp_target, training=False, \n                               enc_padding_mask=None, \n                               look_ahead_mask=None,\n                               dec_padding_mask=None)\n\nfn_out.shape  # (batch_size, tar_seq_len, target_vocab_size)","85f004a9":"num_layers = 4\nd_model = 128\ndff = 512\nnum_heads = 8\n\ninput_vocab_size = 100000\ntarget_vocab_size = 8000\ndropout_rate = 0.1","e5ad63ee":"class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n    def __init__(self, d_model, warmup_steps=4000):\n        super(CustomSchedule, self).__init__()\n\n        self.d_model = d_model\n        self.d_model = tf.cast(self.d_model, tf.float32)\n\n        self.warmup_steps = warmup_steps\n\n    def __call__(self, step):\n        arg1 = tf.math.rsqrt(step)\n        arg2 = step * (self.warmup_steps ** -1.5)\n\n        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)","eb97674b":"learning_rate = CustomSchedule(d_model)\n\noptimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, \n                                     epsilon=1e-9)","15a25986":"temp_learning_rate_schedule = CustomSchedule(d_model)\n\nplt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Train Step\")","265866a2":"loss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n    from_logits=True, reduction='none')","c3c3f9fe":"def loss_function(real, pred):\n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    loss_ = loss_object(real, pred)\n\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    loss_ *= mask\n\n    return tf.reduce_sum(loss_)\/tf.reduce_sum(mask)\n\n\ndef accuracy_function(real, pred):\n    accuracies = tf.equal(real, tf.argmax(pred, axis=2))\n\n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    accuracies = tf.math.logical_and(mask, accuracies)\n\n    accuracies = tf.cast(accuracies, dtype=tf.float32)\n    mask = tf.cast(mask, dtype=tf.float32)\n    return tf.reduce_sum(accuracies)\/tf.reduce_sum(mask)","d5915911":"train_loss = tf.keras.metrics.Mean(name='train_loss')\ntrain_accuracy = tf.keras.metrics.Mean(name='train_accuracy')","2ba0ffac":"transformer = Transformer(num_layers, d_model, num_heads, dff,\n                          input_vocab_size, target_vocab_size, \n                          pe_input=input_vocab_size, \n                          pe_target=target_vocab_size,\n                          rate=dropout_rate)","d4112127":"def create_masks(inp, tar):\n    # Encoder padding mask\n    enc_padding_mask = create_padding_mask(inp)\n\n    # Used in the 2nd attention block in the decoder.\n    # This padding mask is used to mask the encoder outputs.\n    dec_padding_mask = create_padding_mask(inp)\n\n    # Used in the 1st attention block in the decoder.\n    # It is used to pad and mask future tokens in the input received by \n    # the decoder.\n    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n    dec_target_padding_mask = create_padding_mask(tar)\n    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n\n    return enc_padding_mask, combined_mask, dec_padding_mask","4c3dac34":"checkpoint_path = \".\/checkpoints\/train\"\n\nckpt = tf.train.Checkpoint(transformer=transformer,\n                           optimizer=optimizer)\n\nckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n\n# if a checkpoint exists, restore the latest checkpoint.\nif ckpt_manager.latest_checkpoint:\n    ckpt.restore(ckpt_manager.latest_checkpoint)\n    print ('Latest checkpoint restored!!')","9eae6ea7":"EPOCHS = 20 #20","57ff8e7f":"# The @tf.function trace-compiles train_step into a TF graph for faster\n# execution. The function specializes to the precise shape of the argument\n# tensors. To avoid re-tracing due to the variable sequence lengths or variable\n# batch sizes (the last batch is smaller), use input_signature to specify\n# more generic shapes.\n\ntrain_step_signature = [\n    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n]\n\n@tf.function(input_signature=train_step_signature)\ndef train_step(inp, tar):\n    tar_inp = tar[:, :-1]\n    tar_real = tar[:, 1:]\n\n    enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n\n    with tf.GradientTape() as tape:\n        predictions, _, _ = transformer(inp, tar_inp, \n                                     True, \n                                     enc_padding_mask, \n                                     combined_mask, \n                                     dec_padding_mask)\n        loss = loss_function(tar_real, predictions)\n\n    gradients = tape.gradient(loss, transformer.trainable_variables)    \n    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n\n    train_loss(loss)\n    train_accuracy(accuracy_function(tar_real, predictions))","88e122bb":"for epoch in range(EPOCHS):\n    start = time.time()\n\n    train_loss.reset_states()\n    train_accuracy.reset_states()\n    # inp -> portuguese, tar -> english\n    for  (batch, inputs) in enumerate(train_generator):\n        inp = inputs['the_inputs'] # batch*time*feature\n        tar = inputs['the_labels'] # batch*time\n        # inp_len = batch_data['input_length']\n        # tar_len = batch_data['label_length']\n        gtruth = batch_data['ground_truth']\n        tar_inp = tar\n        tar_real = gtruth\n        train_step(inp, tar)\n\n        if batch % 50 == 0:\n            print ('Epoch {} Batch {} Loss {:.4f} Accuracy {:.4f}'.format(\n              epoch + 1, batch, train_loss.result(), train_accuracy.result()))\n      \n    if (epoch + 1) % 5 == 0:\n        ckpt_save_path = ckpt_manager.save()\n        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,\n                                                         ckpt_save_path))\n    \n    print ('Epoch {} Loss {:.4f} Accuracy {:.4f}'.format(epoch + 1, \n                                                train_loss.result(), \n                                                train_accuracy.result()))\n\n    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))","72e9ea9c":"index = 0\nfbank = compute_fbank(os.path.join(train_audio_path, Y_test[index], X_test[index]),False) # T,D,3\n\npad_fbank = fbank\nlabel = char2id([BOS_FLAG], vocab)+char2id( labels[index], vocab)\ng_truth = char2id(labels[index], vocab)+char2id([EOS_FLAG], vocab)\nprint(label, g_truth, id2char(label, vocab), fbank.shape)\n","756b88f5":"MAX_LENGTH = 40\ndef evaluate(file, truth):\n    fbank = compute_fbank(os.path.join(train_audio_path, truth, file),False) # T,D,3\n    fbank = np.absolute(fbank)\n    \n    label = char2id([BOS_FLAG], vocab)+char2id( truth, vocab)\n    g_truth = char2id(truth, vocab)+char2id([EOS_FLAG], vocab)\n    #print(label, id2char(label, vocab))\n    # inp sentence is portuguese, hence adding the start and end token\n    #inp_sentence = start_token + tokenizer_pt.encode(inp_sentence) + end_token\n    encoder_input = tf.expand_dims(fbank, 0)\n\n    # as the target is english, the first word to the transformer should be the\n    # english start token.\n    decoder_input = []\n    output = tf.expand_dims(decoder_input, 0)\n\n    print(encoder_input, output)\n    \n    for i in range(MAX_LENGTH):\n        enc_padding_mask, combined_mask, dec_padding_mask = create_masks(\n            encoder_input, output)\n\n        # predictions.shape == (batch_size, seq_len, vocab_size)\n        predictions, attention_weights, attention_weights_encoder = transformer(encoder_input, \n                                                                    output,\n                                                                    False,\n                                                                    None,\n                                                                    None,\n                                                                    None)\n\n        # select the last word from the seq_len dimension\n        predictions = predictions[: ,-1:, :]  # (batch_size, 1, vocab_size)\n\n        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)\n\n        # return the result if the predicted_id is equal to the end token\n        #if predicted_id == tokenizer_en.vocab_size+1:\n        #    return tf.squeeze(output, axis=0), attention_weights, attention_weights_encoder\n\n        # concatentate the predicted_id to the output which is given to the decoder\n        # as its input.\n        output = tf.concat([output, predicted_id], axis=-1)\n\n    return tf.squeeze(output, axis=0), attention_weights, attention_weights_encoder","dd3f1bf4":"evaluate(X_test[0], Y_test[0])","6de84752":"np.absolute(fbank[93][28])","01721ae3":"def evaluate(inp_sentence):\n    start_token = [tokenizer_pt.vocab_size]\n    end_token = [tokenizer_pt.vocab_size + 1]\n\n    # inp sentence is portuguese, hence adding the start and end token\n    inp_sentence = start_token + tokenizer_pt.encode(inp_sentence) + end_token\n    encoder_input = tf.expand_dims(inp_sentence, 0)\n\n    # as the target is english, the first word to the transformer should be the\n    # english start token.\n    decoder_input = [tokenizer_en.vocab_size]\n    output = tf.expand_dims(decoder_input, 0)\n\n    for i in range(MAX_LENGTH):\n        enc_padding_mask, combined_mask, dec_padding_mask = create_masks(\n            encoder_input, output)\n\n        # predictions.shape == (batch_size, seq_len, vocab_size)\n        predictions, attention_weights, attention_weights_encoder = transformer(encoder_input, \n                                                                    output,\n                                                                    False,\n                                                                    enc_padding_mask,\n                                                                    combined_mask,\n                                                                    dec_padding_mask)\n\n        # select the last word from the seq_len dimension\n        predictions = predictions[: ,-1:, :]  # (batch_size, 1, vocab_size)\n\n        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)\n\n        # return the result if the predicted_id is equal to the end token\n        if predicted_id == tokenizer_en.vocab_size+1:\n            return tf.squeeze(output, axis=0), attention_weights, attention_weights_encoder\n\n        # concatentate the predicted_id to the output which is given to the decoder\n        # as its input.\n        output = tf.concat([output, predicted_id], axis=-1)\n\n    return tf.squeeze(output, axis=0), attention_weights, attention_weights_encoder","05266a70":"def plot_attention_weights(attention, sentence, result, layer):\n    fig = plt.figure(figsize=(16, 8))\n\n    sentence = tokenizer_pt.encode(sentence)\n\n    attention = tf.squeeze(attention[layer], axis=0)\n  \n    for head in range(attention.shape[0]):\n        ax = fig.add_subplot(2, 4, head+1)\n\n        # plot the attention weights\n        ax.matshow(attention[head][:-1, :], cmap='viridis')\n\n        fontdict = {'fontsize': 10}\n\n        ax.set_xticks(range(len(sentence)+2))\n        ax.set_yticks(range(len(result)))\n\n        ax.set_ylim(len(result)-1.5, -0.5)\n\n        ax.set_xticklabels(\n            ['<start>']+[tokenizer_pt.decode([i]) for i in sentence]+['<end>'], \n            fontdict=fontdict, rotation=90)\n\n        ax.set_yticklabels([tokenizer_en.decode([i]) for i in result \n                            if i < tokenizer_en.vocab_size], \n                           fontdict=fontdict)\n\n        ax.set_xlabel('Head {}'.format(head+1))\n\n    plt.tight_layout()\n    plt.show()\n\ndef plot_attention_weights_encoder(attention, sentence, result, layer):\n    fig = plt.figure(figsize=(16, 8))\n\n    sentence = tokenizer_pt.encode(sentence)\n\n    attention = tf.squeeze(attention[layer], axis=0)\n  \n    for head in range(attention.shape[0]):\n        ax = fig.add_subplot(2, 4, head+1)\n\n        # plot the attention weights\n        ax.matshow(attention[head][:-1, :], cmap='viridis')\n\n        fontdict = {'fontsize': 10}\n\n        ax.set_xticks(range(len(sentence)+2))\n        ax.set_yticks(range(len(sentence)+2))\n\n        ax.set_ylim(len(sentence)-1.5, -0.5)\n\n        ax.set_xticklabels(\n            ['<start>']+[tokenizer_pt.decode([i]) for i in sentence]+['<end>'], \n            fontdict=fontdict, rotation=90)\n\n        ax.set_yticklabels(\n            ['<start>']+[tokenizer_pt.decode([i]) for i in sentence]+['<end>'], \n            fontdict=fontdict)\n\n        ax.set_xlabel('Head {}'.format(head+1))\n  \n    plt.tight_layout()\n    plt.show()","3312fa99":"def translate(sentence, plot_enc='', plot_dec=''):\n    result, attention_weights, attention_weights_encoder = evaluate(sentence)\n\n    predicted_sentence = tokenizer_en.decode([i for i in result \n                                            if i < tokenizer_en.vocab_size])  \n\n    print('Input: {}'.format(sentence))\n    print('Predicted translation: {}'.format(predicted_sentence))\n\n    if plot_enc:\n        plot_attention_weights_encoder(attention_weights_encoder, sentence, sentence, plot_enc)\n    if plot_dec:\n        plot_attention_weights(attention_weights, sentence, result, plot_dec)","6ad6c0cb":"translate(\"este \u00e9 um problema que temos que resolver.\", plot_enc='encoder_layer1_block')\nprint (\"Real translation: this is a problem we have to solve .\")","2948621e":"translate(\"os meus vizinhos ouviram sobre esta ideia.\", plot_dec='decoder_layer1_block2')\nprint (\"Real translation: and my neighboring homes heard about this idea .\")","9ad3f862":"translate(\"vou ent\u00e3o muito rapidamente partilhar convosco algumas hist\u00f3rias de algumas coisas m\u00e1gicas que aconteceram.\")\nprint (\"Real translation: so i 'll just share with you some stories very quickly of some magical things that have happened .\")","92a651c6":"translate(\"este \u00e9 o primeiro livro que eu fiz.\", plot='decoder_layer4_block2')\nprint (\"Real translation: this is the first book i've ever done.\")","dab897f9":"<img src=\"https:\/\/www.tensorflow.org\/images\/tutorials\/transformer\/transformer.png\" width=\"600\" alt=\"transformer\">","24e48141":"## Scaled dot product attention","3570dcd8":"### Decoder layer\n\nEach decoder layer consists of sublayers:\n\n1.   Masked multi-head attention (with look ahead mask and padding mask)\n2.   Multi-head attention (with padding mask). V (value) and K (key) receive the *encoder output* as inputs. Q (query) receives the *output from the masked multi-head attention sublayer.*\n3.   Point wise feed forward networks\n\nEach of these sublayers has a residual connection around it followed by a layer normalization. The output of each sublayer is `LayerNorm(x + Sublayer(x))`. The normalization is done on the `d_model` (last) axis.\n\nThere are N decoder layers in the transformer.\n\nAs Q receives the output from decoder's first attention block, and K receives the encoder output, the attention weights represent the importance given to the decoder's input based on the encoder's output. In other words, the decoder predicts the next word by looking at the encoder output and self-attending to its own output. See the demonstration above in the scaled dot product attention section.","ad85bfca":"## Create the Transformer","1f0748c1":"## Evaluate","708f92f8":"Since the target sequences are padded, it is important to apply a padding mask when calculating the loss.","fc0a3bec":"The target is divided into tar_inp and tar_real. tar_inp is passed as an input to the decoder. `tar_real` is that same input shifted by 1: At each location in `tar_input`, `tar_real` contains the  next token that should be predicted.\n\nFor example, `sentence` = \"SOS A lion in the jungle is sleeping EOS\"\n\n`tar_inp` =  \"SOS A lion in the jungle is sleeping\"\n\n`tar_real` = \"A lion in the jungle is sleeping EOS\"\n\nThe transformer is an auto-regressive model: it makes predictions one part at a time, and uses its output so far to decide what to do next. \n\nDuring training this example uses teacher-forcing (like in the [text generation tutorial](.\/text_generation.ipynb)). Teacher forcing is passing the true output to the next time step regardless of what the model predicts at the current time step.\n\nAs the transformer predicts each word, *self-attention* allows it to look at the previous words in the input sequence to better predict the next word.\n\nTo prevent the model from peeking at the expected output the model uses a look-ahead mask.","2124679e":"Mask all the pad tokens in the batch of sequence. It ensures that the model does not treat padding as the input. The mask indicates where pad value `0` is present: it outputs a `1` at those locations, and a `0` otherwise.","b5dc07ac":"## Training and checkpointing","8e333de4":"Pass all the queries together.","bb796859":"<table class=\"tfo-notebook-buttons\" align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.tensorflow.org\/tutorials\/text\/transformer\">\n    <img src=\"https:\/\/www.tensorflow.org\/images\/tf_logo_32px.png\" \/>\n    View on TensorFlow.org<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/colab.research.google.com\/github\/tensorflow\/docs\/blob\/master\/site\/en\/tutorials\/text\/transformer.ipynb\">\n    <img src=\"https:\/\/www.tensorflow.org\/images\/colab_logo_32px.png\" \/>\n    Run in Google Colab<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/github.com\/tensorflow\/docs\/blob\/master\/site\/en\/tutorials\/text\/transformer.ipynb\">\n    <img src=\"https:\/\/www.tensorflow.org\/images\/GitHub-Mark-32px.png\" \/>\n    View source on GitHub<\/a>\n  <\/td>\n  <td>\n    <a href=\"https:\/\/storage.googleapis.com\/tensorflow_docs\/docs\/site\/en\/tutorials\/text\/transformer.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/download_logo_32px.png\" \/>Download notebook<\/a>\n  <\/td>\n<\/table>","68a99b9c":"### Encoder layer\n\nEach encoder layer consists of sublayers:\n\n1.   Multi-head attention (with padding mask) \n2.    Point wise feed forward networks. \n\nEach of these sublayers has a residual connection around it followed by a layer normalization. Residual connections help in avoiding the vanishing gradient problem in deep networks.\n\nThe output of each sublayer is `LayerNorm(x + Sublayer(x))`. The normalization is done on the `d_model` (last) axis. There are N encoder layers in the transformer.","23da83b0":"<img src=\"https:\/\/www.tensorflow.org\/images\/tutorials\/transformer\/scaled_attention.png\" width=\"500\" alt=\"scaled_dot_product_attention\">\n\nThe attention function used by the transformer takes three inputs: Q (query), K (key), V (value). The equation used to calculate the attention weights is:\n\n$$\\Large{Attention(Q, K, V) = softmax_k(\\frac{QK^T}{\\sqrt{d_k}}) V} $$\n\nThe dot-product attention is scaled by a factor of square root of the depth. This is done because for large values of depth, the dot product grows large in magnitude pushing the softmax function where it has small gradients resulting in a very hard softmax. \n\nFor example, consider that `Q` and `K` have a mean of 0 and variance of 1. Their matrix multiplication will have a mean of 0 and variance of `dk`. Hence, *square root of `dk`* is used for scaling (and not any other number) because the matmul of `Q` and `K` should have a mean of 0 and variance of 1, and you get a gentler softmax.\n\nThe mask is multiplied with -1e9 (close to negative infinity). This is done because the mask is summed with the scaled matrix multiplication of Q and K and is applied immediately before a softmax. The goal is to zero out these cells, and large negative inputs to softmax are near zero in the output.","bf5a4a18":"Create a custom subwords tokenizer from the training dataset. ","219488f1":"You want to use `Dataset.map` to apply this function to each element of the dataset.  `Dataset.map` runs in graph mode.\n\n* Graph tensors do not have a value. \n* In graph mode you can only use TensorFlow Ops and functions. \n\nSo you can't `.map` this function directly: You need to wrap it in a `tf.py_function`. The `tf.py_function` will pass regular tensors (with a value and a `.numpy()` method to access it), to the wrapped python function.","da6140c3":"## Summary\n\nIn this tutorial, you learned about positional encoding, multi-head attention, the importance of masking and how to create a transformer.\n\nTry using a different dataset to train the transformer. You can also create the base transformer or transformer XL by changing the hyperparameters above. You can also use the layers defined here to create [BERT](https:\/\/arxiv.org\/abs\/1810.04805) and train state of the art models. Futhermore, you can implement beam search to get better predictions.","7e3c167b":"Each multi-head attention block gets three inputs; Q (query), K (key), V (value). These are put through linear (Dense) layers and split up into multiple heads. \n\nThe `scaled_dot_product_attention` defined above is applied to each head (broadcasted for efficiency). An appropriate mask must be used in the attention step.  The attention output for each head is then concatenated (using `tf.transpose`, and `tf.reshape`) and put through a final `Dense` layer.\n\nInstead of one single attention head, Q, K, and V are split into multiple heads because it allows the model to jointly attend to information at different positions from different representational spaces. After the split each head has a reduced dimensionality, so the total computation cost is the same as a single head attention with full dimensionality.","6844f031":"## Multi-head attention","ba222de9":" The `Decoder` consists of:\n1.   Output Embedding\n2.   Positional Encoding\n3.   N decoder layers\n\nThe target is put through an embedding which is summed with the positional encoding. The output of this summation is the input to the decoder layers. The output of the decoder is the input to the final linear layer.","76fc9b55":"<img src=\"https:\/\/www.tensorflow.org\/images\/tutorials\/transformer\/multi_head_attention.png\" width=\"500\" alt=\"multi-head attention\">\n\n\nMulti-head attention consists of four parts:\n*    Linear layers and split into heads.\n*    Scaled dot-product attention.\n*    Concatenation of heads.\n*    Final linear layer.","6f4bef34":"Point wise feed forward network consists of two fully-connected layers with a ReLU activation in between.","f3c5a76f":"You can pass different layers and attention blocks of the decoder to the `plot` parameter.","3cc5cdf3":"## Encoder and decoder","ad5e3151":"The transformer model follows the same general pattern as a standard [sequence to sequence with attention model](nmt_with_attention.ipynb). \n\n* The input sentence is passed through `N` encoder layers that generates an output for each word\/token in the sequence.\n* The decoder attends on the encoder's output and its own input (self-attention) to predict the next word. ","fb2bbcc4":"As the softmax normalization is done on K, its values decide the amount of importance given to Q.\n\nThe output represents the multiplication of the attention weights and the V (value) vector. This ensures that the words you want to focus on are kept as-is and the irrelevant words are flushed out.","e2bd602f":"## Set hyperparameters","a88fa31e":"# Transformer model for language understanding","197cca01":"### Decoder","3713257e":"Use the Adam optimizer with a custom learning rate scheduler according to the formula in the [paper](https:\/\/arxiv.org\/abs\/1706.03762).\n\n$$\\Large{lrate = d_{model}^{-0.5} * min(step{\\_}num^{-0.5}, step{\\_}num * warmup{\\_}steps^{-1.5})}$$\n","4b4efc8e":"## Optimizer","40c48cc6":"## Positional encoding\n\nSince this model doesn't contain any recurrence or convolution, positional encoding is added to give the model some information about the relative position of the words in the sentence. \n\nThe positional encoding vector is added to the embedding vector. Embeddings represent a token in a d-dimensional space where tokens with similar meaning will be closer to each other. But the embeddings do not encode the relative position of words in a sentence. So after adding the positional encoding, words will be closer to each other based on the *similarity of their meaning and their position in the sentence*, in the d-dimensional space.\n\nSee the notebook on [positional encoding](https:\/\/github.com\/tensorflow\/examples\/blob\/master\/community\/en\/position_encoding.ipynb) to learn more about it. The formula for calculating the positional encoding is as follows:\n\n$$\\Large{PE_{(pos, 2i)} = sin(pos \/ 10000^{2i \/ d_{model}})} $$\n$$\\Large{PE_{(pos, 2i+1)} = cos(pos \/ 10000^{2i \/ d_{model}})} $$","4f09df9c":"Transformer consists of the encoder, decoder and a final linear layer. The output of the decoder is the input to the linear layer and its output is returned.","8f1d4457":"##### Copyright 2019 The TensorFlow Authors.","79152640":"The look-ahead mask is used to mask the future tokens in a sequence. In other words, the mask indicates which entries should not be used.\n\nThis means that to predict the third word, only the first and second word will be used. Similarly to predict the fourth word, only the first, second and the third word will be used and so on.","01024e0e":"filterBank is used as the input labels is the target.","ad0b62bd":"To keep this example small and relatively fast, the values for *num_layers, d_model, and dff* have been reduced. \n\nThe values used in the base model of transformer were; *num_layers=6*, *d_model = 512*, *dff = 2048*. See the [paper](https:\/\/arxiv.org\/abs\/1706.03762) for all the other versions of the transformer.\n\nNote: By changing the values below, you can get the model that achieved state of the art on many tasks.","49c62fb9":"The following steps are used for evaluation:\n\n* Encode the input sentence using the Portuguese tokenizer (`tokenizer_pt`). Moreover, add the start and end token so the input is equivalent to what the model is trained with. This is the encoder input.\n* The decoder input is the `start token == tokenizer_en.vocab_size`.\n* Calculate the padding masks and the look ahead masks.\n* The `decoder` then outputs the predictions by looking at the `encoder output` and its own output (self-attention).\n* Select the last word and calculate the argmax of that.\n* Concatentate the predicted word to the decoder input as pass it to the decoder.\n* In this approach, the decoder predicts the next word based on the previous words it predicted.\n\nNote: The model used here has less capacity to keep the example relatively faster so the predictions maybe less right. To reproduce the results in the paper, use the entire dataset and base transformer model or transformer XL, by changing the hyperparameters above.","c39e695b":"Create a `MultiHeadAttention` layer to try out. At each location in the sequence, `y`, the `MultiHeadAttention` runs all 8 attention heads across all other locations in the sequence, returning a new vector of the same length at each location.","73a4cb33":"## Loss and metrics","783a3e3b":"### Encoder\n\nThe `Encoder` consists of:\n1.   Input Embedding\n2.   Positional Encoding\n3.   N encoder layers\n\nThe input is put through an embedding which is summed with the positional encoding. The output of this summation is the input to the encoder layers. The output of the encoder is the input to the decoder.","ad4fc69c":"## Masking","45b2b9e1":"## Point wise feed forward network","b70eedee":"Create the checkpoint path and the checkpoint manager. This will be used to save checkpoints every `n` epochs.","d925abbe":"This tutorial trains a <a href=\"https:\/\/arxiv.org\/abs\/1706.03762\" class=\"external\">Transformer model<\/a> to translate Portuguese to English. This is an advanced example that assumes knowledge of [text generation](text_generation.ipynb) and [attention](nmt_with_attention.ipynb).\n\nThe core idea behind the Transformer model is *self-attention*\u2014the ability to attend to different positions of the input sequence to compute a representation of that sequence. Transformer creates stacks of self-attention layers and is explained below in the sections *Scaled dot product attention* and *Multi-head attention*.\n\nA transformer model handles variable-sized input using stacks of self-attention layers instead of [RNNs](text_classification_rnn.ipynb) or [CNNs](..\/images\/intro_to_cnns.ipynb). This general architecture has a number of advantages:\n\n* It make no assumptions about the temporal\/spatial relationships across the data. This is ideal for processing a set of objects (for example, [StarCraft units](https:\/\/deepmind.com\/blog\/alphastar-mastering-real-time-strategy-game-starcraft-ii\/#block-8)).\n* Layer outputs can be calculated in parallel, instead of a series like an RNN.\n* Distant items can affect each other's output without passing through many RNN-steps, or convolution layers (see [Scene Memory Transformer](https:\/\/arxiv.org\/pdf\/1903.03878.pdf) for example).\n* It can learn long-range dependencies. This is a challenge in many sequence tasks.\n\nThe downsides of this architecture are:\n\n* For a time-series, the output for a time-step is calculated from the *entire history* instead of only the inputs and current hidden-state. This _may_ be less efficient.   \n* If the input *does* have a  temporal\/spatial relationship, like text, some positional encoding must be added or the model will effectively see a bag of words. \n\nAfter training the model in this notebook, you will be able to input a Portuguese sentence and return the English translation.\n\n<img src=\"https:\/\/www.tensorflow.org\/images\/tutorials\/transformer\/attention_map_portuguese.png\" width=\"800\" alt=\"Attention heatmap\">"}}