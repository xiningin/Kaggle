{"cell_type":{"3b6c2d6c":"code","89184106":"code","52da00e0":"code","41f2c794":"code","d82d5408":"code","7690310a":"code","c292b207":"code","00a98d6a":"code","f66105d4":"code","a00eba11":"code","0f1d1639":"code","7a5cbb93":"code","fa3d7ed3":"code","9c9f4dc7":"code","939aae04":"code","0dc2ded9":"code","42368de0":"code","00b0354e":"code","3aed6b3d":"code","13847a2b":"code","2f8b0332":"code","3b312fb9":"code","52937e62":"code","13352f59":"code","891c893e":"markdown","f54a23a2":"markdown","c57e982f":"markdown","f673117a":"markdown","d4d8c767":"markdown","4e172642":"markdown","5e73a760":"markdown","cf8cfea1":"markdown","beef9021":"markdown"},"source":{"3b6c2d6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89184106":"data = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')","52da00e0":"data.shape","41f2c794":"data.head(10)","d82d5408":"data.info()","7690310a":"data.describe()","c292b207":"data.dropna(inplace =True)","00a98d6a":"data.shape","f66105d4":"data_tr.describe()","a00eba11":"data_tr.head()","0f1d1639":"corr_matrix = data_tr.corr()","7a5cbb93":"corr_matrix","fa3d7ed3":"plt.figure(figsize=(12, 6))\nsns.countplot(x=\"Potability\", data=data, palette='husl');","9c9f4dc7":"import seaborn as sns\nsns.pairplot(data_tr, hue=\"Potability\", palette=\"magma\")","939aae04":"%matplotlib inline\nimport matplotlib.pyplot as plt","0dc2ded9":"corrmat=data_tr.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,20))\n\n# plot heat map\ng=sns.heatmap(data_tr[top_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","42368de0":"from sklearn.model_selection import train_test_split\nX = data_tr.iloc[:,:-1].values\ny = data_tr.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","00b0354e":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()","3aed6b3d":"model.fit(X_train,y_train) #fitting the model \ny_pred = model.predict(X_test) #prediction\ny_train_pred = model.predict(X_train)","13847a2b":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","2f8b0332":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_test, y_pred)","3b312fb9":"recall_score(y_test, y_pred)","52937e62":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","13352f59":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","891c893e":"## Precision and Recall","f54a23a2":"## F-Score","c57e982f":"## Missing Attributes Handling","f673117a":"## Accuracy","d4d8c767":"## Plot Visualizations","4e172642":"## Train-Test Splitting","5e73a760":"## Confusion Matrix","cf8cfea1":"## Correlations","beef9021":"## Model"}}