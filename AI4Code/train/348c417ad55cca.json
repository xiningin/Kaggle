{"cell_type":{"42ae910c":"code","fb2ff7c3":"code","ec1e1edc":"code","c1c6fcc8":"code","7af238ec":"code","dda2ac85":"code","44fd04f7":"code","d973d82d":"code","f4540c69":"code","734aa725":"code","b44e2015":"code","5fa5a4d4":"code","5c0808b3":"code","7912dd70":"code","891a4bb8":"code","bd5acbd3":"code","7c080e5e":"code","1d38fa52":"code","3aed46dc":"markdown","f4d88d32":"markdown","62590040":"markdown","760e3d06":"markdown","f0e086d3":"markdown","aa6bf010":"markdown","750f91ac":"markdown","3b5a5d8d":"markdown","0a33defe":"markdown","3faa35d2":"markdown","764ca1ba":"markdown","da19ed7e":"markdown","3a5261db":"markdown"},"source":{"42ae910c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fb2ff7c3":"df = pd.read_csv(\"..\/input\/train_labels.csv\")\ndf.head()","ec1e1edc":"from PIL import Image\nimport matplotlib.pyplot as plt\n\nexample_image = Image.open(\"..\/input\/train\/\" + df['id'][0] + \".tif\")\nexample_image_numpy = np.array(example_image.getdata())\n\n#Finding the dimensions of the image\nprint(example_image_numpy.shape)","c1c6fcc8":"print(np.sqrt(example_image_numpy.shape[0]))","7af238ec":"example_image_numpy = np.array(example_image.getdata()).reshape(96, 96, 3)\n\nplt.imshow(example_image_numpy)\nplt.show()","dda2ac85":"example_images_numpy = []\nexample_labels = []\nimage_num = np.random.choice(df.shape[0] - 21)\n\n# We will view around 20 consecutive examples\n\nfor i in range(image_num, image_num + 20):\n    example_image = Image.open(\"..\/input\/train\/\" + df['id'][i] + \".tif\")\n    example_images_numpy.append(np.array(example_image.getdata()).reshape(96, 96, 3))\n    example_labels.append(str(df['label'][i]))\n\n# Setting up matplotlib\nfig, ax = plt.subplots(4, 5, figsize = (25, 20))\n\nk = 0\n# Setting up the axes objects\nfor i in range(4):\n    for j in range(5):\n        ax[i, j].imshow(example_images_numpy[k])\n        ax[i, j].axis('off')\n        ax[i, j].set_title(example_labels[k])\n        k += 1\n# Viewing the plots\nplt.show()","44fd04f7":"import torch\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nfrom torch import optim, save\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.utils.data.sampler import Sampler\nfrom torch.autograd import Variable\nprint(torch.__version__)","d973d82d":"class HS_Dataset(Dataset):\n    \n    def __init__(self, csv_file, root_dir, transform = None):\n        self.df = pd.read_csv(csv_file)\n        self.dir = root_dir\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, i):\n        \"\"\"This function should return the ith example from the training set.\n        The example should be returned in the form of a dictionary: \n        {'image': image_data, 'label': label_data}\"\"\"\n        \n        file = df['id'][i]\n        \n        label = np.array(df['label'][i])\n        if label == 0:\n            label == 0.0\n        else:\n            label == 1.0\n            \n        \"\"\"Reshape needed to make the output of shape [1]\"\"\"\n        label = label.reshape((1))\n                \n        image = Image.open(\"..\/input\/train\/\" + file + \".tif\")\n        image = np.array(image.getdata()).reshape(96, 96, 3)\n        \n        sample = {'image': image, 'label': label}\n        \n        if self.transform:\n            sample = self.transform(sample)\n            \n        return sample\n        \n        \nclass ToTensor(object):\n    \n    def __call__(self, sample):\n        image, label = sample['image'], sample['label']\n        \"\"\"This transposition is very important as PyTorch take in the image data in the current shape:\n        Number of Channels, Height, Width; So the third axis(channels) in the original image has to \n        be made the first axis.\"\"\"\n        image = image.transpose(2, 0, 1)        \n        image = torch.from_numpy(image)\n        image = image.type(torch.FloatTensor)\n        \n        label = torch.from_numpy(label)\n        label = label.type(torch.FloatTensor)\n        \"\"\"The optimizer takes in FloatTensor type data. Hence the data has to be converted from any other format\n        to FloatTensor type\"\"\"\n        return {'image': image, 'label': label}","f4540c69":"from torch.utils.data import random_split\n\nhs_dataset = HS_Dataset(\"..\/input\/train_labels.csv\", \"..\/input\/train\/\", transform = transforms.Compose([ToTensor()]))\n\ntrain_size = int(0.995 * len(hs_dataset))\nval_size = int((len(hs_dataset) - train_size) \/ 8)\ntest_size = int(val_size * 7 \/ 8)\ntest_size += len(hs_dataset) - train_size - val_size - test_size\n\nprint(\"train size: \", train_size)\nprint(\"val size: \", val_size)\nprint(\"test size: \", test_size)\n\ntrain_data, val_data, test_data = random_split(hs_dataset, [train_size, val_size, test_size])","734aa725":"print(\"training\")\nfor i in range(len(train_data)):\n    sample = train_data[i]\n    print(i, sample['image'].size(), sample['label'].size())\n    if i == 5:\n        break\n\nprint(\"validation\")\nfor i in range(len(val_data)):\n    sample = val_data[i]\n    print(i, sample['image'].size(), sample['label'].size())\n    if i == 5:\n        break\n        \nprint(\"testing\")\nfor i in range(len(test_data)):\n    sample = test_data[i]\n    print(i, sample['image'].size(), sample['label'].size())\n    if i == 5:\n        break","b44e2015":"train_loader = DataLoader(dataset = train_data, batch_size = 128, shuffle=True, num_workers=0)\nval_loader = DataLoader(dataset= val_data, batch_size = val_size, num_workers=0)\ntest_loader = DataLoader(dataset= test_data, batch_size = 128, num_workers=0)","5fa5a4d4":"print(len(train_loader))\nprint(len(val_loader))\nprint(len(test_loader))","5c0808b3":"class SkipConvNet(nn.Module):\n    def __init__(self, num_channels, num_classes):\n        super(SkipConvNet, self).__init__()\n        \n        self.conv1 = nn.Sequential(nn.Conv2d(num_channels, 8, kernel_size=3, padding = 1),\n                                  nn.BatchNorm2d(8),\n                                  nn.ReLU(),\n                                  nn.MaxPool2d(kernel_size=2, stride=2))\n        \n        self.skip1_1 = nn.Sequential(nn.Conv2d(8, 8, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(8),\n                                    nn.ReLU(),\n                                    nn.Conv2d(8, 8, kernel_size=3, padding = 1))\n        \n        self.skip1_2 = nn.Sequential(nn.Conv2d(8, 8, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(8),\n                                    nn.ReLU(),\n                                    nn.Conv2d(8, 8, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(8),\n                                    nn.ReLU(),\n                                    nn.Conv2d(8, 8, kernel_size=3, padding = 1))\n        \n        self.conv2 = nn.Sequential(nn.Conv2d(8, 16, kernel_size=3, padding = 1),\n                                  nn.BatchNorm2d(16),\n                                  nn.ReLU(),\n                                  nn.MaxPool2d(kernel_size=2, stride=2))\n        \n        self.skip2_1 = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(16),\n                                    nn.ReLU(),\n                                    nn.Conv2d(16, 16, kernel_size=3, padding = 1))\n        \n        self.skip2_2 = nn.Sequential(nn.Conv2d(16, 16, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(16),\n                                    nn.ReLU(),\n                                    nn.Conv2d(16, 16, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(16),\n                                    nn.ReLU(),\n                                    nn.Conv2d(16, 16, kernel_size=3, padding = 1))\n        \n        self.conv3 = nn.Sequential(nn.Conv2d(16, 32, kernel_size=3, padding=1),\n                                  nn.BatchNorm2d(32),\n                                  nn.ReLU(),\n                                  nn.MaxPool2d(kernel_size=2, stride=2))\n        \n        self.skip3_1 = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(32),\n                                    nn.ReLU(),\n                                    nn.Conv2d(32, 32, kernel_size=3, padding = 1))\n        \n        self.skip3_2 = nn.Sequential(nn.Conv2d(32, 32, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(32),\n                                    nn.ReLU(),\n                                    nn.Conv2d(32, 32, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(32),\n                                    nn.ReLU(),\n                                    nn.Conv2d(32, 32, kernel_size=3, padding = 1))\n        \n        self.conv4 = nn.Sequential(nn.Conv2d(32, 64, kernel_size=3, padding = 1),\n                                  nn.BatchNorm2d(64),\n                                  nn.ReLU(),\n                                  nn.MaxPool2d(kernel_size=2, stride=2))\n        \n        self.skip4_1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(64),\n                                    nn.ReLU(),\n                                    nn.Conv2d(64, 64, kernel_size=3, padding = 1))\n        \n        self.skip4_2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(64),\n                                    nn.ReLU(),\n                                    nn.Conv2d(64, 64, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(64),\n                                    nn.ReLU(),\n                                    nn.Conv2d(64, 64, kernel_size=3, padding = 1))\n        \n        self.conv5 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, padding=1),\n                                  nn.BatchNorm2d(128),\n                                  nn.ReLU(),\n                                  nn.MaxPool2d(kernel_size=2, stride=2))\n        \n        self.skip5_1 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(128),\n                                    nn.ReLU(),\n                                    nn.Conv2d(128, 128, kernel_size=3, padding = 1))\n        \n        self.skip5_2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(128),\n                                    nn.ReLU(),\n                                    nn.Conv2d(128, 128, kernel_size=3, padding = 1),\n                                    nn.BatchNorm2d(128),\n                                    nn.ReLU(),\n                                    nn.Conv2d(128, 128, kernel_size=3, padding = 1))\n        \n         \n        self.ff1 = nn.Linear(3 * 3 * 128, 128)\n        self.ff2 = nn.Linear(128, 32)\n        \n        self.output = nn.Linear(32, num_classes)\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = out + self.skip1_1(out) + self.skip1_2(out)\n        out = self.conv2(out)\n        out = out + self.skip2_1(out) + self.skip2_2(out)\n        out = self.conv3(out)\n        out = out + self.skip3_1(out) + self.skip3_2(out)\n        out = self.conv4(out)\n        out = out + self.skip4_1(out) + self.skip4_2(out)\n        out = self.conv5(out)\n        out = out + self.skip5_1(out) + self.skip5_2(out)\n        out = out.reshape(-1, 3 * 3 * 128)\n        out = self.ff1(out)\n        out = self.ff2(out)\n        out = self.output(out)\n        return out","7912dd70":"model = SkipConvNet(3, 1)\nmodel = model.cuda()\n\noptimizer = torch.optim.Adam(model.parameters())\ncriterion = torch.nn.BCEWithLogitsLoss()","891a4bb8":"def sigmoid(x):\n    return 1.0\/(1.0 + np.exp(-x))\n\ndef accuracy_mini_batch(predicted, true, i, acc, tpr, tnr):\n    \n    predicted = predicted.cpu()\n    true = true.cpu()\n    \n    predicted = (sigmoid(predicted.data.numpy()) > 0.5)\n    true = true.data.numpy()\n    \n    accuracy = np.sum(predicted == true) \/ true.shape[0]\n    true_positive_rate = np.sum((predicted == 1) * (true == 1)) \/ np.sum(true == 1)\n    true_negative_rate = np.sum((predicted == 0) * (true == 0)) \/ np.sum(true == 0)\n    \n    acc = acc * (i) \/ (i + 1)  + accuracy \/ (i + 1)\n    tpr = tpr * (i) \/ (i + 1)  + true_positive_rate \/ (i + 1)\n    tnr = tnr * (i) \/ (i + 1) + true_negative_rate \/ (i + 1)\n    \n    return acc, tpr, tnr\n\n\ndef accuracy(predicted, true):\n    predicted = predicted.cpu()\n    true = true.cpu()\n    \n    predicted = (sigmoid(predicted.data.numpy()) > 0.5)\n    true = true.data.numpy()\n    \n    accuracy = np.sum(predicted == true) \/ true.shape[0]\n    true_positive_rate = np.sum((predicted == 1) * (true == 1)) \/ np.sum(true == 1)\n    true_negative_rate = np.sum((predicted == 0) * (true == 0)) \/ np.sum(true == 0)\n\n    return accuracy, true_positive_rate, true_negative_rate","bd5acbd3":"import time\nimport matplotlib.pyplot as plt\n\nepochs = 10\n\naccuracy_array = []\ntpr_array = []\ntnr_array = []\nloss_array = []\n\nval_loss_array = []\nval_acc_array = []\nval_tpr_array = []\nval_tnr_array = []\n\nuse_cuda = torch.cuda.is_available()\ndevice = \"cuda:0\"\n\nfor epoch in range(epochs):\n    start_time = time.time() \n    \n    loss_temp = []\n    \n    acc, tpr, tnr = 0., 0., 0.\n    \n    for mini_batch_num, data in enumerate(train_loader):\n        images, labels = data['image'], data['label']\n        images, labels = images.to(device), labels.to(device)\n        \n        preds = model(images)\n        \n        loss = criterion(preds, labels)\n        acc, tpr, tnr = accuracy_mini_batch(preds, labels, i, acc, tpr, tnr)\n        \n        optimizer.zero_grad()\n        loss.backward()\n        loss_temp.append(loss.item())\n        \n        optimizer.step()\n        if (mini_batch_num) % 4 == 0:\n            print ('Epoch {}\/{}; Iter {}\/{}; Loss: {:.4f}; Acc: {:.3f}; True Pos: {:.3f}; True Neg: {:.3f}'\n                   .format(epoch+1, epochs, mini_batch_num + 1, len(train_loader), loss.item(), acc, tpr, tnr), end = \"\\r\", flush = True)\n    \n    end_time = time.time()\n    \n    with torch.no_grad():\n        for i, data in enumerate(test_loader):\n            images, labels = data['image'], data['label']\n            images, labels = images.to(device), labels.to(device)\n            preds = model(images)\n            loss_test = criterion(preds, labels)\n            t_acc, t_tpr, t_tnr = accuracy(preds, labels)\n    \n    val_loss_array.append(loss_test)\n    val_acc_array.append(t_acc)\n    val_tpr_array.append(t_tpr)\n    val_tnr_array.append(t_tnr)\n    \n    print ('Epoch {}\/{}; Loss: {:.4f}; Train Acc: {:.3f}; Train TPR: {:.3f}; Train TNR: {:.3f}; Epoch Time: {} mins; \\nTest Loss: {:.4f}; Test Acc: {:.3f}; Test TPR: {:.3f}; Test TNR: {:.3f}\\n'\n           .format(epoch+1, epochs, loss.item(),acc, tpr, tnr, round((end_time - start_time)\/ 60., 2), loss_test, t_acc, t_tpr, t_tnr))\n    \n    loss_array.append(np.mean(np.array(loss_temp)))\n    accuracy_array.append(acc)\n    tpr_array.append(tpr)\n    tnr_array.append(tnr)","7c080e5e":"plt.plot(loss_array, color=\"red\")\nplt.plot(accuracy_array, color=\"blue\")\nplt.plot(tpr_array, color=\"green\")\nplt.plot(tnr_array, color=\"orange\")\nplt.show()","1d38fa52":"plt.plot(val_loss_array, color=\"red\")\nplt.plot(val_acc_array, color=\"blue\")\nplt.plot(val_tpr_array, color=\"green\")\nplt.plot(val_tnr_array, color=\"orange\")\nplt.show()","3aed46dc":"## Reading in the training data table","f4d88d32":"### Image Dimension determination","62590040":"### Making the dataset and dataloader objects\nPyTorch has its own dataset and dataloader objects which makes it very easy to load in the data from a hard drive and run the models. This is specially useful if the training data are huge in size and cannot fit in computer memory","760e3d06":"## Making the model architecture","f0e086d3":"## Viewing few more examples","aa6bf010":"## Viewing an example image","750f91ac":"### The testing measures plot","3b5a5d8d":"### The training measures plot","0a33defe":"## Viewing the resultant measures plots","3faa35d2":"### Making the dataloader object","764ca1ba":"### Testing the dataset object","da19ed7e":"## Making the model","3a5261db":"### Importing all the necasarry pytorch functions and packages"}}