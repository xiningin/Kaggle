{"cell_type":{"c81beb67":"code","b1bed680":"code","a5094a82":"code","5e51ae19":"code","342bdb31":"code","5d37f65d":"code","f48493e6":"code","3b285e90":"code","ea8d555a":"code","30806a80":"code","8908845b":"code","e00eb25b":"code","41678967":"code","478a7fb6":"code","682d1e48":"code","94c96dd2":"code","9adc4b45":"code","a6f199db":"code","bddba7ec":"code","b2bdf17d":"code","f3ef617b":"code","f780d7eb":"code","49703482":"code","547cacc6":"code","24ce50aa":"code","e29e017b":"code","ca4e04c3":"code","f224549e":"code","6bfa8461":"code","3269a650":"code","b788ee1e":"code","cb2ac1a4":"code","949a7799":"code","06785d4c":"code","3419a972":"code","ec4d59ac":"code","8c4fcfd6":"markdown","2af83c50":"markdown","01734f41":"markdown","94c6862b":"markdown","92a552f3":"markdown","810db6f6":"markdown","6e838de8":"markdown"},"source":{"c81beb67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename)) # otherwise too long\n        continue\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1bed680":"import os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a5094a82":"data_path = Path('\/kaggle\/input\/siim-isic-melanoma-classification\/')\ntrain_path = data_path \/ 'train'\ntest_path = data_path \/ 'test'\nprint(\"training_path\", train_path)\nprint(\"test_path\", test_path)","5e51ae19":"!ls \/kaggle\/input\/siim-isic-melanoma-classification\/","342bdb31":"#!ls \/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train","5d37f65d":"#!ls \/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test","f48493e6":"data_path = Path('\/kaggle\/input\/siim-isic-melanoma-classification\/')\nim_train_path = data_path \/ 'jpeg' \/ 'train'\nim_test_path = data_path \/ 'jpeg' \/ 'test'\nprint(\"train_path: \", im_train_path)\nprint(\"test_path:  \", im_test_path)","3b285e90":"import tensorflow as tf\nfrom tensorflow.python.keras.preprocessing.image import load_img, img_to_array\n\nfrom keras import models, regularizers, layers, optimizers, losses, metrics\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import np_utils, to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image","ea8d555a":"def image_show(im_num,im_folder,im_size):\n    \"\"\"\n    MO: Show melanoma images.\n    \"\"\"\n    im_ind = 'ISIC'\n    im_name = '{}_{}'.format(im_ind,im_num)\n    if im_folder=='train':\n        im_dir = im_train_path\n    elif im_folder=='test':\n        im_dir = im_test_path\n    im_path = str(im_dir)+'\/'+str(im_name)+'.jpg'\n    im_path\n    \n    #from tf.keras.preprocessing.image.load_img\n    img = image.load_img(im_path, target_size=(im_size, im_size)) #target_size=(224, 224)\n    imgplot = plt.imshow(img)\n    print(im_ind,\"Image Number:\", im_num)\n    plt.show()","30806a80":"plt.figure(figsize = (10,10))\nimage_show(5225336,'train',224)","8908845b":"plt.figure(figsize = (10,10))\nimage_show(5224960,'test',224)","e00eb25b":"!ls \/kaggle\/input\/siim-isic-melanoma-classification\/test\/ISIC_5224960.dcm","41678967":"#import dicom\n\nimport pydicom\nfrom pydicom.data import get_testdata_files\n\nprint(__doc__)\n\nPathDicom = '\/kaggle\/input\/siim-isic-melanoma-classification\/'\nlstFilesDCM = []  # create an empty list\nfor dirName, subdirList, fileList in os.walk(PathDicom):\n    for filename in fileList:\n        if \".dcm\" in filename.lower():  # check whether the file's DICOM\n            lstFilesDCM.append(os.path.join(dirName,filename))","478a7fb6":"print(lstFilesDCM[0])","682d1e48":"RefDs = pydicom.dcmread(lstFilesDCM[0])\nRefDs","94c96dd2":"# Get ref file\nRefDs = pydicom.dcmread(lstFilesDCM[0])\n\n# Load dimensions based on the number of rows, columns, and slices (along the Z axis)\nConstPixelDims = (int(RefDs.Rows), int(RefDs.Columns), len(lstFilesDCM))\nprint(ConstPixelDims)","9adc4b45":"pat_name = RefDs.PatientName\ndisplay_name = pat_name.family_name + \", \" + pat_name.given_name\nprint(\"Patient's name...:\", display_name)\nprint(\"Patient id.......:\", RefDs.PatientID)\nprint(\"Modality.........:\", RefDs.Modality)\nprint(\"Study Date.......:\", RefDs.StudyDate)","a6f199db":"if 'PixelData' in RefDs:\n    rows = int(RefDs.Rows)\n    cols = int(RefDs.Columns)\n    print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(rows=rows, cols=cols, size=len(RefDs.PixelData)))\n    if 'PixelSpacing' in RefDs:\n        print(\"Pixel spacing....:\", RefDs.PixelSpacing) \n\n        \n# use .get() if not sure the item exists, and want a default value if missing\nprint(\"Slice location...:\", RefDs.get('SliceLocation', \"(missing)\"))\n\n# plot the image using matplotlib\nplt.figure(figsize = (10,10))\nplt.imshow(RefDs.pixel_array, cmap=plt.cm.bone)\nplt.show()","bddba7ec":"train = pd.read_csv(data_path \/ 'train.csv')\ntest  = pd.read_csv(data_path \/ 'test.csv')\nsub   = pd.read_csv(data_path \/ 'sample_submission.csv')\n\ntrain.shape, test.shape, sub.shape","b2bdf17d":"train.isna().sum()","f3ef617b":"train['sex'] = train['sex'].fillna('na')\ntrain['age_approx'] = train['age_approx'].fillna(0)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna('na')","f780d7eb":"train.isna().sum()","49703482":"train.head(10)","547cacc6":"test.isna().sum()","24ce50aa":"test['anatom_site_general_challenge'] = test['anatom_site_general_challenge'].fillna('na')","e29e017b":"test.isna().sum()","ca4e04c3":"test.head(10)","f224549e":"train['sex'].value_counts().plot(kind='bar')","6bfa8461":"test['sex'].value_counts().plot(kind='bar')","3269a650":"train['sex'].isna().sum()","b788ee1e":"train['age_approx'].value_counts().plot(kind='bar')","cb2ac1a4":"test['age_approx'].value_counts().plot(kind='bar')","949a7799":"train['diagnosis'].value_counts().plot(kind='bar')","06785d4c":"train['diagnosis'].value_counts()","3419a972":"print('Diagnosis                             Percent\\n-----------------------------------------------')\nprint((train['diagnosis'].value_counts() \/ train['diagnosis'].value_counts().sum() ) *100)","ec4d59ac":"fig, axs = plt.subplots(4,2, figsize=(13,20))\n\n# left train, right test\n\ntrain['sex'].value_counts().plot(kind='bar', legend=True, ax=axs[0,0])\ntest['sex'].value_counts().plot(kind='bar', legend=True, ax=axs[0,1])\n\ntrain['age_approx'].value_counts().plot(kind='bar', legend=True, ax=axs[1,0])\ntest['age_approx'].value_counts().plot(kind='bar', legend=True, ax=axs[1,1])\n\ntrain['age_approx'].hist(bins=90, ax=axs[2,0])\ntest['age_approx'].hist(bins=90, ax=axs[2,1])\naxs[2,0].set_xlabel('Age')\naxs[2,1].set_xlabel('Age')\n\ntrain['anatom_site_general_challenge'].value_counts().plot(kind='bar', legend=True, ax=axs[3,0])\ntest['anatom_site_general_challenge'].value_counts().plot(kind='bar', legend=True, ax=axs[3,1])\n\n\nplt.savefig('data_sex_age_anatom.png',dpi=100)\n\nplt.show()","8c4fcfd6":"<img align=\"left\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-siim-isic-melanoma-classification\/master\/materials\/melanoma.png\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-siim-isic-melanoma-classification\/master\/materials\/melanoma.png\" width=\"1200\" height=\"450\" \/>\n","2af83c50":"## Explore tables","01734f41":"<img align=\"left\" src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-siim-isic-melanoma-classification\/master\/materials\/logo.png\" data-canonical-src=\"https:\/\/raw.githubusercontent.com\/kabartay\/kaggle-siim-isic-melanoma-classification\/master\/materials\/logo.png\" width=\"280\" height=\"280\" \/>\n\nSkin cancer is the most prevalent type of cancer. **Melanoma**, specifically, is responsible for **75%** of skin cancer deaths, despite being the least common skin cancer. The American Cancer Society estimates over 100,000 new melanoma cases will be diagnosed in 2020. It's also expected that almost 7,000 people will die from the disease. As with other cancers, early and accurate detection\u2014potentially aided by data science\u2014can make treatment more effective.\n\nCurrently, dermatologists evaluate every one of a patient's moles to identify outlier lesions or \u201cugly ducklings\u201d that are most likely to be melanoma. Existing AI approaches have not adequately considered this clinical frame of reference. Dermatologists could enhance their diagnostic accuracy if detection algorithms take into account \u201ccontextual\u201d images within the same patient to determine which images represent a melanoma. If successful, classifiers would be more accurate and could better support dermatological clinic work.\n\nAs the leading healthcare organization for informatics in medical imaging, the [Society for Imaging Informatics in Medicine (SIIM)](https:\/\/siim.org\/)'s mission is to advance medical imaging informatics through education, research, and innovation in a multi-disciplinary community. SIIM is joined by the [International Skin Imaging Collaboration (ISIC)](https:\/\/www.isic-archive.com\/), an international effort to improve melanoma diagnosis. The ISIC Archive contains the largest publicly available collection of quality-controlled dermoscopic images of skin lesions.\n\nIn this competition, you\u2019ll identify melanoma in images of skin lesions. In particular, you\u2019ll use images within the same patient and determine which are likely to represent a melanoma. Using patient-level contextual information may help the development of image analysis tools, which could better support clinical dermatologists.\n\nMelanoma is a deadly disease, but if caught early, most melanomas can be cured with minor surgery. Image analysis tools that automate the diagnosis of melanoma will improve dermatologists' diagnostic accuracy. Better detection of melanoma has the opportunity to positively impact millions of people.","94c6862b":"## In one plot and save","92a552f3":"## Melanoma is rare, <2%","810db6f6":"## Images","6e838de8":"<div align=\"center\">\n<font size=\"6\"> SIIM-ISIC Melanoma Classification  <\/font>  \n<\/div> \n\n\n<div align=\"center\">\n<font size=\"4\"> Identify melanoma in lesion images  <\/font>  \n<\/div> "}}