{"cell_type":{"9b8935fe":"code","80ff5465":"code","1334466f":"code","724fdfea":"code","b14b77ce":"code","b050c154":"code","37e6cf45":"code","6fb0c5cb":"code","ad864579":"code","34908882":"code","23b68c86":"code","2ddb8b69":"code","b4c7b8f6":"code","ec7e161b":"code","6cae3124":"code","f5bd5fe0":"code","2b333d40":"code","6d85660b":"code","79d7a690":"code","23bd4a1a":"code","bf60bb61":"code","30f8b927":"code","781058c1":"code","07759015":"code","e5f9c5b9":"code","b5a148fb":"code","af5212b4":"code","c1e5e22c":"code","f4458642":"code","2fbef594":"code","20f38eaf":"code","7a2ed216":"code","07f934c8":"code","1650842e":"code","60958f32":"code","5b5cdcae":"code","e5705edd":"code","27633055":"code","c81761a9":"code","5f7d1db2":"code","fbb86456":"code","56e289f7":"code","4c6b1948":"code","34bd7124":"code","54e7df4a":"code","07aa3e94":"code","997065ca":"code","f2c919ca":"code","8d1b4b13":"code","21231b94":"code","95c25453":"code","25c9a560":"code","07d02044":"code","f39889d3":"code","8eea9ca4":"code","05586295":"code","77d31854":"code","455fa986":"code","f182c1e7":"code","bb47fd27":"code","534ae8df":"code","4d0564da":"code","923e02d0":"code","ed9464de":"code","d9907763":"markdown","d26ba145":"markdown","cfbe10e2":"markdown","584aae7e":"markdown","9fd3f7d1":"markdown","c4f23d95":"markdown","3a4dc488":"markdown","83ecf143":"markdown","b446db1e":"markdown","bbdbde3f":"markdown","caa48a0d":"markdown"},"source":{"9b8935fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80ff5465":"train = pd.read_csv('\/kaggle\/input\/data-science-nigeria-bank-campaign-subscriptions\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/data-science-nigeria-bank-campaign-subscriptions\/test.csv')","1334466f":"train.shape","724fdfea":"test.shape","b14b77ce":"all_data = train\nall_data.shape","b050c154":"all_data.info()","37e6cf45":"all_data.describe()","6fb0c5cb":"all_data.head()","ad864579":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas_profiling import ProfileReport\n","34908882":"ProfileReport(all_data.iloc[:28831])","23b68c86":"all_data.head()","2ddb8b69":"all_data['job'].unique()","b4c7b8f6":"sns.countplot('job', hue  = 'subscribed', data = all_data)\nplt.xticks(rotation ='vertical')\nplt.show()","ec7e161b":"sns.countplot('marital', hue  = 'subscribed', data = all_data)\nplt.xticks(rotation ='vertical')\nplt.show()","6cae3124":"sns.countplot('education', hue  = 'subscribed', data = all_data)\nplt.xticks(rotation ='vertical')\nplt.show()","f5bd5fe0":"sns.countplot('month', hue  = 'subscribed', data = all_data)\nplt.xticks(rotation ='vertical')\nplt.show()","2b333d40":"sns.countplot('poutcome', hue  = 'subscribed', data = all_data)\nplt.xticks(rotation ='vertical')\nplt.show()","6d85660b":"all_data.info()","79d7a690":"sns.boxplot(x = 'subscribed', y = 'duration',  data = all_data)","23bd4a1a":"#so more timewas sent psend with people that subscribed more","bf60bb61":"sns.boxplot(x = 'subscribed', y = 'campaign',  data = all_data)","30f8b927":"sns.boxplot(x = 'subscribed', y = 'pdays',  data = all_data)","781058c1":"sns.boxplot(x = 'subscribed', y = 'campaign',  data = all_data.iloc[:28831])","07759015":"  \nsns.boxplot(x = 'subscribed', y = 'previous',  data = all_data)","e5f9c5b9":"all_data.iloc[:28831][['previous', 'subscribed']][all_data.iloc[:28831]['previous'] > 2]","b5a148fb":"all_data.describe()","af5212b4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nall_data['age'] = scaler.fit_transform(all_data['age'].values.reshape(-1,1))\nall_data['pdays'] = scaler.fit_transform(all_data['pdays'].values.reshape(-1,1))\nall_data['duration'] = scaler.fit_transform(all_data['duration'].values.reshape(-1,1))\nall_data['nr_employed'] = scaler.fit_transform(all_data['nr_employed'].values.reshape(-1,1))\n","c1e5e22c":"all_data['campaign'] = scaler.fit_transform(all_data['campaign'].values.reshape(-1,1))\nall_data['cons_price_idx'] = scaler.fit_transform(all_data['cons_price_idx'].values.reshape(-1,1))\n","f4458642":"all_data.describe()","2fbef594":"plt.figure(figsize=(15,10))\ncor = all_data.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","20f38eaf":"all_data.drop(['euribor3m', 'nr_employed'], axis = 1, inplace = True)","7a2ed216":"plt.figure(figsize=(15,10))\ncor = all_data.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","07f934c8":"all_data.iloc[:28831].head()","1650842e":"x = pd.get_dummies(all_data.drop('customer_id', axis =1))","60958f32":"x.head()","5b5cdcae":"pd.set_option('display.max_columns', 100)","e5705edd":"all_data.head()","27633055":"x.head()","c81761a9":"x.columns","5f7d1db2":"new_data = x.drop(['job_unknown', 'marital_unknown','education_unknown',  'default_unknown','housing_unknown', 'loan_unknown', 'contact_telephone', 'month_sep', 'day_of_week_wed', 'poutcome_nonexistent'], axis = 1)","fbb86456":"new_data.head()","56e289f7":"new_train =new_data.iloc[:28831]\nnew_test = new_data.iloc[28831:].drop('subscribed', axis =1)","4c6b1948":"print(train.shape, new_train.shape,  '\\n', test.shape,new_test.shape)\n","34bd7124":"from sklearn.model_selection import train_test_split\n\n#spliting my data\nX_train, X_test, y_train, y_test = train_test_split(new_data.drop('subscribed', axis = 1), new_data['subscribed'], test_size = .3, random_state = 42,)","54e7df4a":"X_train.shape","07aa3e94":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier","997065ca":"#creating my model\nlog_reg = LogisticRegression()\nforest = RandomForestClassifier()\nboost = XGBClassifier()\nnaivemodel = GaussianNB()\nKNN = KNeighborsClassifier()\nsupportvm = SVC()\n","f2c919ca":"for x in [log_reg, forest, boost, naivemodel, KNN, supportvm]:\n  x.fit(X_train, y_train)\n  y_pred = x.predict(X_test)\n  report = classification_report(y_test, y_pred)\n  f1 = f1_score(y_test, y_pred)\n  print(report, f1)","8d1b4b13":"# optimising xgbosst\nparam = {'eda': np.arange(1),\n         'gbtree': np.arange(1, 10),\n         'gamma': np.arange(1,10),\n         'max_delta_step': np.arange(-5, 5),\n         'subsample': np.arange(0.5, 1),\n         'gamma ': np.arange(0.5, 1),\n         \n    \n}","21231b94":"test.head()","95c25453":"test['age'] = scaler.fit_transform(test['age'].values.reshape(-1,1))\ntest['pdays'] = scaler.fit_transform(test['pdays'].values.reshape(-1,1))\ntest['duration'] = scaler.fit_transform(test['duration'].values.reshape(-1,1))\ntest['nr_employed'] = scaler.fit_transform(test['nr_employed'].values.reshape(-1,1))\n","25c9a560":"test['campaign'] = scaler.fit_transform(test['campaign'].values.reshape(-1,1))\ntest['cons_price_idx'] = scaler.fit_transform(test['cons_price_idx'].values.reshape(-1,1))","07d02044":"test.drop(['euribor3m', 'nr_employed'], axis = 1, inplace = True)","f39889d3":"x = pd.get_dummies(test.drop('customer_id', axis =1))","8eea9ca4":"new_test = x.drop(['job_unknown', 'marital_unknown','education_unknown',  'default_unknown','housing_unknown', 'loan_unknown', 'contact_telephone', 'month_sep', 'day_of_week_wed', 'poutcome_nonexistent'], axis = 1)","05586295":"new_test.head()","77d31854":"new_test.columns","455fa986":"X_train.columns","f182c1e7":"print(new_test.shape, X_train.shape)","bb47fd27":"submission = pd.DataFrame()\ntest_pred = log_reg.predict(new_test)","534ae8df":"submission['customer_id'] = test['customer_id']\nsubmission ['subscribed'] = test_pred","4d0564da":"submission.shape","923e02d0":"submission.to_csv('submission.csv', index = False)","ed9464de":"submission = pd.read_csv('.\/submission.csv')\nsubmission.head(50)","d9907763":"so I will have to drop nr_employed and euribor3m since it is highyly corr to emp_var_rate","d26ba145":"people having hgh school, university and professional degree tend to subscirbe more","cfbe10e2":"# .... *shape confirmed*\n......*modeling mode enabled*.","584aae7e":"#EDA","9fd3f7d1":"dropping the extras from the dummies","c4f23d95":"Looking good now","3a4dc488":"No misssing values, nan","83ecf143":"people that subcribed had lower campaign done on them","b446db1e":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test= scaler.fit_transform(X_test)\n","bbdbde3f":"#EDA","caa48a0d":"Vey few of them are greater than  2 "}}