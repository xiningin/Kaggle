{"cell_type":{"ce4fb964":"code","a38467dd":"code","eef377a6":"code","4e2489c4":"code","fd54e2ab":"code","a3e7d29b":"code","6fbaa9ec":"code","e4f3f0ae":"code","501f09f1":"code","f25460a5":"code","14b6d354":"code","a7454752":"code","88354335":"code","e7c9d9cc":"code","db9fb37e":"code","1f600a61":"code","bcaeb8c5":"code","729a8789":"code","77ce63b0":"code","415fb79d":"code","1478cbe6":"code","ba70a2f2":"markdown","ab3017ff":"markdown","34799280":"markdown","9f0b163d":"markdown","afc40425":"markdown","f2a256a0":"markdown","47388937":"markdown","17ea523a":"markdown","b78bba69":"markdown","7e671c72":"markdown","a34db1e5":"markdown","f7eba2df":"markdown","b7e0b044":"markdown","87f08d06":"markdown","e2370cce":"markdown","986cf6ac":"markdown","c5855250":"markdown","f4dbaa12":"markdown","3ddc4667":"markdown","a880221a":"markdown","66c8365d":"markdown","1aff8b1b":"markdown","5cc4bf36":"markdown","087b3082":"markdown","f1ce6537":"markdown","d3a59e49":"markdown","a67af499":"markdown","8835fef3":"markdown"},"source":{"ce4fb964":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","a38467dd":"df = pd.read_csv(\"..\/input\/UCI_Credit_Card.csv\")","eef377a6":"df.shape","4e2489c4":"df.head(1)","fd54e2ab":"df.isnull().sum()","a3e7d29b":"df = df.rename(columns={'default.payment.next.month': 'IS_DEFAULT', \n                        'PAY_0': 'PAY_1'})\ndf.head(1)","6fbaa9ec":"list_of_cols = list(df)\nfor col in list_of_cols:\n    if col.startswith('LIMIT') or col.startswith('BILL') or col.startswith('PAY_A'):\n        pass\n    else:\n        print(str(col) + \": \"+ str(df[col].unique()))","e4f3f0ae":"df.loc[df.EDUCATION >= 4, 'EDUCATION'] = 0\ndf.loc[df.MARRIAGE == 3, 'MARRIAGE'] = 0","501f09f1":"fig = sns.countplot(x = 'IS_DEFAULT', data = df)\nfig.set_xticklabels([\"No Default\", \"Default\"])","f25460a5":"number_of_defaulters = len(df[df.IS_DEFAULT == 1]) \nnumber_of_non_defaulters = len(df) - number_of_defaulters\npercentage_of_defaulters = number_of_defaulters\/number_of_non_defaulters * 100\nround(percentage_of_defaulters, 2) #28.4%\n","14b6d354":"df['LIMIT_BAL'].describe()","a7454752":"bins = [0, 200000, 400000, 600000, 800000, 1000000]\ndf['LIMIT_GROUP'] = pd.cut(df['LIMIT_BAL'], bins,include_lowest=True)","88354335":"# df_2 = df.LIMIT_GROUP.groupby(df.IS_DEFAULT)\n# df_2.IS_DEFAULT\n# # axis = df_2.LIMIT_GROUP.value_counts(sort = False).plot.bar(rot=0, color=\"r\", figsize=(6,4))","e7c9d9cc":"#Computing percentage\nnumber_of_male_card_holders = (df.SEX == 1).sum() #11,888\nnumber_of_female_card_holders = (df.SEX == 2).sum() #18,112\n\nnumber_of_male_defaulters = (df[df.SEX == 1].IS_DEFAULT == 1).sum() #2,873\nnumber_of_female_defaulters = (df[df.SEX == 2].IS_DEFAULT == 1).sum() #3,763\n\npercentage_of_male_def = round((number_of_male_defaulters\/number_of_male_card_holders) * 100,2) #24.17%\npercentage_of_female_def = round((number_of_female_defaulters\/number_of_female_card_holders) * 100,2) #20.78%\ntemp_df = pd.DataFrame({\"non-defaulters\":{\"male\":100 - percentage_of_male_def, \"female\":100 - percentage_of_female_def},\"defaulters\":{\"male\":percentage_of_male_def, \"female\":percentage_of_female_def}})\n\n#Plotting chart\nfig = temp_df.plot(kind = 'bar')\nfig.set_title(\"Percentage of male and female non-defaulters vs defaulters\")\nfig.set_ylabel(\"Percentage\")","db9fb37e":"#Computing percentage\nnumber_of_unknown_edu_card_holders = (df.EDUCATION == 0).sum() #468\nnumber_of_grad_edu_card_holders = (df.EDUCATION == 1).sum() #10,585\nnumber_of_uni_card_holders = (df.EDUCATION == 2).sum() #14,030\nnumber_of_high_school_card_holders = (df.EDUCATION == 3).sum() #4,917\n\nnumber_of_unknown_edu_defaulters = (df[(df.EDUCATION == 0)].IS_DEFAULT == 1).sum() #33\nnumber_of_grad_defaulters = (df[(df.EDUCATION == 1)].IS_DEFAULT == 1).sum() #2036\nnumber_of_uni_defaulters = (df[(df.EDUCATION == 2)].IS_DEFAULT == 1).sum() #3330\nnumber_of_high_school_defaulters = (df[(df.EDUCATION == 3)].IS_DEFAULT == 1).sum() #1237\n\npercentage_of_unknown_def = round((number_of_unknown_edu_defaulters\/number_of_unknown_edu_card_holders) * 100,2) #7.05\npercentage_of_grad_def = round((number_of_grad_defaulters\/number_of_grad_edu_card_holders) * 100,2) #19.23\npercentage_of_uni_def = round((number_of_uni_defaulters\/number_of_uni_card_holders) * 100,2) #23.73\npercentage_of_high_school_def = round((number_of_high_school_defaulters\/number_of_high_school_card_holders) * 100,2) #25.16\ntemp_df = pd.DataFrame({\"non-defaulters\":{\"Unknown\":100 - percentage_of_unknown_def, \"Graduates\":100 - percentage_of_grad_def, \"University\":100 - percentage_of_uni_def, \"High school\":100 - percentage_of_high_school_def},\"defaulters\":{\"Unknown\": percentage_of_unknown_def, \"Graduates\": percentage_of_grad_def, \"University\": percentage_of_uni_def, \"High school\":percentage_of_high_school_def}})\n\n#Plotting chart\nfig = temp_df.plot(kind = 'bar')\nfig.set_title(\"Percentage of non-defaulters & defaulters based on education level\")\nfig.set_ylabel(\"Percentage\")","1f600a61":"number_of_others_card_holders = (df.MARRIAGE == 0).sum() #377\nnumber_of_married_card_holders = (df.MARRIAGE == 1).sum() #13,659\nnumber_of_unmarried_card_holders = (df.MARRIAGE == 2).sum() #15,964\n\nnumber_of_others_def = (df[(df.MARRIAGE == 0)].IS_DEFAULT == 1).sum() #89\nnumber_of_married_def = (df[(df.MARRIAGE == 1)].IS_DEFAULT == 1).sum() #3,206\nnumber_of_ummarried_def = (df[(df.MARRIAGE == 2)].IS_DEFAULT == 1).sum() #3,341\n\npercentage_of_others_def = round(number_of_others_def\/number_of_others_card_holders * 100,2) #23.61\npercentage_of_married_def = round(number_of_married_def\/number_of_married_card_holders * 100,2) #23.47\npercentage_of_ummarried_def = round(number_of_ummarried_def\/number_of_unmarried_card_holders * 100,2) #20.93\n\n\ntemp_df = pd.DataFrame({\"non-defaulters\":{\"Unknown\":100 - percentage_of_others_def, \"Married\":100 - percentage_of_married_def, \"Unmarried\":100 - percentage_of_ummarried_def},\n                        \"defaulters\":{\"Unknown\":percentage_of_others_def, \"Married\":percentage_of_married_def, \"Unmarried\": percentage_of_ummarried_def}})\nfig = temp_df.plot(kind = 'barh')\nfig.set_title(\"Percentage of non-defaulters & defaulters based on education level\")\nfig.set_xlabel(\"Percentage\")","bcaeb8c5":"sns.set(rc={'figure.figsize':(12,5)})\nfig = sns.countplot(x = 'AGE', data = df, hue = 'IS_DEFAULT')\nfig.legend(title='Is Default?', loc='upper right', labels=[\"Not Default\", \"Default\"])\nfig.set_title(\"Defaulters based on education level\")","729a8789":"sns.set(rc={'figure.figsize':(25,8)})\nsns.set_context(\"talk\", font_scale=0.7)\nsns.heatmap(df.iloc[:,1:].corr(), cmap='Greens', annot=True)","77ce63b0":"X_train = df.iloc[:,[0,2,5,6,7,8,9,10]]\nY_train = df.iloc[:,[23]]","415fb79d":"from sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier","1478cbe6":"clf = tree.DecisionTreeClassifier()\nmodel = clf.fit(X_train, Y_train)\nacc = round(model.score(X_train, Y_train) * 100, 2)\ntrain_pred = model_selection.cross_val_predict(clf, X_train, Y_train, cv=5, n_jobs = -1)\nc_acc = round(metrics.accuracy_score(Y_train, train_pred) * 100, 2)\nprint(acc)\nprint(c_acc)","ba70a2f2":"#### 4.4 EDUCATION","ab3017ff":"**Decision Tree**","34799280":"Two things stand out. \n\n1. Education can have a value 0 which was not known before. Grouping 0,4,5,6 as unknowns. Replacing any education greater than or equal to four with 0\n\n\n\n2. Only two marital statuses are known (1 and 2). If the marital status is 0 or 3, we group them as unknown. Replacing any marital status with 3 as its value is assigned value 0.","9f0b163d":"# 1. Importing libraries#\n\n1. Pandas \n2. Seaborn - visualisations","afc40425":"#### 3.4 Checking for unique values#### \n\nChecking distinct values of some columns. Skipping id, Limit, Bill amount, pay amount","f2a256a0":"# 4. Exploratory Data Analysis###\n\n#### 4.1 Let us start by having a look at the distribution of defaulters and non-defaulters.","47388937":"#### 4.7 Correlation ","17ea523a":"We have 30,000 rows and 25 columns. ","b78bba69":"### Summarising data preprocessing\n\nHere is a quick recap of preprocessing manipulations we did.\n\n1. Renamed default.payment.next.month to IS_DEFAULT\n2. Renamed PAY_0 to Pay_1 \n3. Grouped unknown education categories (0,4,5,6) and re-assigned them 0\n4. Grouped unknown marital categories (0,3) and re-assigned them 0","7e671c72":"#### 4.5 MARRIAGE","a34db1e5":"The data does not contain any missing value.","f7eba2df":"There are **25** variables:\n\nID: ID of each client\n\nLIMIT_BAL: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n\nSEX: Gender (1=male, 2=female)\n\nEDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n\nMARRIAGE: Marital status (1=married, 2=single, 3=others)\n\nAGE: Age in years\n\nPAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment \ndelay for two months, ... 8=payment delay for eight months, 9=payment delay for nine months and above)\n\nPAY_2: Repayment status in August, 2005 (scale same as above)\n\nPAY_3: Repayment status in July, 2005 (scale same as above)\n\nPAY_4: Repayment status in June, 2005 (scale same as above)\n\nPAY_5: Repayment status in May, 2005 (scale same as above)\n\nPAY_6: Repayment status in April, 2005 (scale same as above)\n\nBILL_AMT1: Amount of bill statement in September, 2005 (NT dollar)\n\nBILL_AMT2: Amount of bill statement in August, 2005 (NT dollar)\n\nBILL_AMT3: Amount of bill statement in July, 2005 (NT dollar)\n\nBILL_AMT4: Amount of bill statement in June, 2005 (NT dollar)\n\nBILL_AMT5: Amount of bill statement in May, 2005 (NT dollar)\n\nBILL_AMT6: Amount of bill statement in April, 2005 (NT dollar)\n\nPAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)\n\nPAY_AMT2: Amount of previous payment in August, 2005 (NT dollar)\n\nPAY_AMT3: Amount of previous payment in July, 2005 (NT dollar)\n\nPAY_AMT4: Amount of previous payment in June, 2005 (NT dollar)\n\nPAY_AMT5: Amount of previous payment in May, 2005 (NT dollar)\n\nPAY_AMT6: Amount of previous payment in April, 2005 (NT dollar)\n\ndefault.payment.next.month: Default payment (1=yes, 0=no)","b7e0b044":"#### 3.3 Renaming where necessary\n\nWe will rename two columns. \n\n\n1. The **BILL_AMT** & **PAY_AMT** range from 1 to 6 for the six given months. However, a different column **PAY** ranges starts from 0 and then continues from 2 to 6. To introduce uniformity in the data, we will rename PAY_0 to PAY_1.\n\n\n2. The column '**default.payment.next.month**' is a little too long. Let us change it to something simpler like **IS_DEFAULT**. It can take two values. 1 denotes true and 0 denotes false.","87f08d06":"# 5. Prediction","e2370cce":"Importing machine learning libraries","986cf6ac":"#### 3.2 Checking for null values","c5855250":"Limit shows a healthy negative correlation with IS_DEFAULT. Similarly, there is a significant","f4dbaa12":"# 2. Reading file###","3ddc4667":"There isn't a major difference in the distribution of default corresponding to gender. 24.17% of male card holders are defaulters compared to 20.78% of female card holders.","a880221a":"People with high school education and people with university education had the largest portion of defaulters. (23.73% and 25.16% respectively.)","66c8365d":"The chart and data above show that the number of non-defaulters is significantly greater than the number of defaulters.There","1aff8b1b":"# Default of Credit Card - Kaggle\n\nKaggle task: https:\/\/www.kaggle.com\/gpreda\/default-of-credit-card-clients-predictive-models\n","5cc4bf36":"Selecting Useful features","087b3082":"#### 4.3 Sex\n\n","f1ce6537":"#### 4.2 Limit balance","d3a59e49":"#### 4.6 Age","a67af499":"# 3. Preprocessing ###\n\n#### 3.1 Checking for number of rows and columns in the dataframe for a general overview.\n","8835fef3":"As the max value of LIMIT_BAL is 10,00,000. We group the limit values in to 5 groups. We assign the LIMIT_VAL to these groups"}}