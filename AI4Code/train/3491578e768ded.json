{"cell_type":{"b3b53243":"code","695b2043":"code","1cd6a842":"code","1ea227b7":"code","b90f288f":"code","e4cf0901":"code","dcfae8ff":"code","fc4897df":"code","7270b11e":"code","c5a61f67":"code","50d8e699":"code","98d0cd44":"code","165ae5ce":"code","c5a82b5c":"code","a374e214":"code","4a6715a9":"code","7642b8cf":"code","bd774e0c":"code","5b670113":"code","e01449ba":"code","0ec2167b":"code","3b8fe698":"code","c2474f74":"code","ce187338":"code","c72e0ccf":"code","62e96666":"code","c51bb0ae":"code","9a7ca3a7":"code","6cc8fa70":"code","f44edddb":"code","572ce681":"code","437519db":"code","27544c49":"code","89c24f89":"code","e7e85045":"code","7979b7f9":"code","ac075918":"code","16bfbfe4":"code","49a49743":"code","c2af456a":"code","6aae61b3":"code","4e3d6260":"code","1ce95e66":"code","5c28b601":"code","e48974fd":"markdown","872138be":"markdown","58a76e27":"markdown","78b97f48":"markdown","70339259":"markdown","04125631":"markdown","aa9a0a90":"markdown","06d4224d":"markdown","b125515d":"markdown","7761c2e1":"markdown","80952de2":"markdown","214d6498":"markdown","d44e6dcb":"markdown","6caac1d4":"markdown","d4ce7f51":"markdown","ae4edb05":"markdown","a3f022ca":"markdown","05c3ec41":"markdown","3aaf83b7":"markdown","086e2769":"markdown","acf9232c":"markdown"},"source":{"b3b53243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","695b2043":"import seaborn as sns\n","1cd6a842":"tips = sns.load_dataset('tips')","1ea227b7":"tips","b90f288f":"sns.distplot(tips['total_bill']);","e4cf0901":"sns.distplot(tips['total_bill'],kde=False,bins=30); #removing the kde layer and just having histogram use.","dcfae8ff":"sns.jointplot(x='total_bill',y='tip',data = tips,kind = 'scatter');","fc4897df":"sns.jointplot(x='total_bill',y='tip',data = tips,kind = 'reg');","7270b11e":"sns.jointplot(x='total_bill',y='tip',data = tips,kind = 'resid');","c5a61f67":"sns.jointplot(x='total_bill',y='tip',data = tips,kind = 'hex');","50d8e699":"sns.pairplot(tips);","98d0cd44":"sns.pairplot(tips,hue='sex',palette='coolwarm');","165ae5ce":"sns.kdeplot(tips['total_bill'])\nsns.rugplot(tips['total_bill']);","c5a82b5c":"sns.kdeplot(tips['tip'])\nsns.rugplot(tips['tip']);","a374e214":"import seaborn as sns","4a6715a9":"tips = sns.load_dataset('tips')\ntips.head()","7642b8cf":"tips.describe()","bd774e0c":"sns.barplot(x='sex',y='total_bill',data=tips);","5b670113":"import numpy as np","e01449ba":"sns.barplot(x = 'sex',y = 'total_bill',data=tips,estimator=np.std);","0ec2167b":"sns.boxplot(x= 'day',y = 'total_bill',data=tips,palette = 'rainbow');","3b8fe698":"sns.boxplot(data = tips,palette = 'rainbow',orient = 'h'); #orient = h can do the plot for whole dataset","c2474f74":"sns.boxplot(x = 'day',y = 'total_bill',hue = 'smoker',data = tips,palette = 'coolwarm');","ce187338":"sns.violinplot(x = 'day',y = 'total_bill',data=tips);","c72e0ccf":"sns.violinplot(x = 'day',y = 'total_bill',hue = 'sex',data=tips,palette = 'Set1');","62e96666":"sns.violinplot(x = 'day',y = 'tip',hue='sex',data = tips,split = True,palette = 'Set1');","c51bb0ae":"sns.stripplot(x = 'day',y = 'total_bill',data = tips);","9a7ca3a7":"sns.stripplot(x = 'day', y = 'total_bill' , hue = 'sex' , palette='Set1',data = tips);","6cc8fa70":"sns.stripplot(x=\"day\", y=\"total_bill\", data=tips,jitter=True,hue='sex',palette='Set1',split=True);","f44edddb":"sns.swarmplot(x = 'day' ,y = 'tip' , data  =tips);","572ce681":"sns.swarmplot(x=\"day\", y=\"total_bill\",hue='sex',data=tips, palette=\"Set1\", split=True);","437519db":"sns.violinplot(x=\"tip\", y=\"day\", data=tips,palette='rainbow')\nsns.swarmplot(x=\"tip\", y=\"day\", data=tips,color='black',size=3);","27544c49":"flights = sns.load_dataset('flights')","89c24f89":"tips = sns.load_dataset('tips')","e7e85045":"flights.head()","7979b7f9":"tips.head()","ac075918":"tips.corr()","16bfbfe4":"sns.heatmap(tips.corr());","49a49743":"sns.heatmap(tips.corr(),cmap='coolwarm',annot=True);","c2af456a":"flights.pivot_table(values = 'passengers',index = 'month',columns = 'year')","6aae61b3":"pvflights = flights.pivot_table(values = 'passengers',index = 'month',columns = 'year')\nsns.heatmap(pvflights);","4e3d6260":"sns.heatmap(pvflights,cmap='magma',linecolor='white',linewidths=1)","1ce95e66":"sns.clustermap(pvflights)","5c28b601":"# More options to get the information a little clearer like normalization\nsns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)","e48974fd":"## barplot and countplot\n\nThese very similar plots allow you to get aggregate data off a categorical feature in your data. **barplot** is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:","872138be":"# Part 1","58a76e27":"## pairplot\n\npairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns). ","78b97f48":"# Matrix Plots\n\nMatrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data.\nLet's begin by exploring seaborn's heatmap and clutermap:","70339259":"## clustermap\n\nThe clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example:","04125631":"## rugplot\n\nrugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:","aa9a0a90":"## boxplot and violinplot\n\nboxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the inter-quartile range.","06d4224d":"# Part 2 Coming up!","b125515d":"## jointplot\n\njointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: \n* \u201cscatter\u201d \n* \u201creg\u201d \n* \u201cresid\u201d \n* \u201ckde\u201d \n* \u201chex\u201d","7761c2e1":"You can change the estimator object to your own function, that converts a vector to a scalar:","80952de2":"## stripplot and swarmplot\nThe stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.\n\nThe swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them).","214d6498":"# Distribution Plots\n\nLet's discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n\n* distplot\n* jointplot\n* pairplot\n* rugplot\n* kdeplot","d44e6dcb":"![image.png](attachment:image.png)","6caac1d4":"## kdeplot\n\nkdeplots are [Kernel Density Estimation plots](http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:","d4ce7f51":"## distplot\n\nThe distplot shows the distribution of a univariate set of observations.","ae4edb05":"# Data","a3f022ca":"### Combining Categorical Plots","05c3ec41":"# Kindly upvote if you found this notebook useful :)","3aaf83b7":"## Heatmap\n\nIn order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example:","086e2769":"### violinplot\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.","acf9232c":"# Categorical Data Plots\n\nNow let's discuss using seaborn to plot categorical data! There are a few main plot types for this:\n\n* factorplot\n* boxplot\n* violinplot\n* stripplot\n* swarmplot\n* barplot\n* countplot\n\nLet's go through examples of each!"}}