{"cell_type":{"e54e7899":"code","eaf912f6":"code","16fb1d65":"code","b8cfee7c":"code","8b1bc7ad":"code","45a8bb98":"code","47f212a5":"code","3a7e58b8":"code","591c04a6":"code","b4d86fe9":"code","7e131b5d":"code","b5b2ad03":"code","1017201d":"code","a785d2d9":"code","d3c490eb":"code","c52416e8":"code","e9ceb5e2":"code","da44e78c":"code","3c60fa40":"code","263b189a":"code","21469f40":"code","6000f7bd":"code","d0e32dc4":"code","453a5ef6":"code","f5a02e04":"code","48ab2730":"code","688fb26c":"code","0a0fa569":"code","a94e70ea":"code","8c6be9dc":"code","2c11888e":"markdown","34706d1c":"markdown","cd9b5df8":"markdown","ad827ad1":"markdown","30b43422":"markdown","efdbb089":"markdown","8bb6c760":"markdown","71712ae6":"markdown","9bb27520":"markdown","06c31241":"markdown","fbb0969e":"markdown","7a26cfa0":"markdown","583221c3":"markdown","bee5923f":"markdown"},"source":{"e54e7899":"import os\nimport torch\nimport torchvision\nimport tarfile\nimport torch.nn as nn\nimport numpy as np\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as tt\nfrom torch.utils.data import random_split\nfrom torchvision.utils import make_grid\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nmatplotlib.rcParams['figure.facecolor'] = '#ffffff'","eaf912f6":"project_name='05b-image_classification-resnet'","16fb1d65":"data_dir = '..\/input\/satellite-image-classification\/data'\nprint(os.listdir(data_dir))","b8cfee7c":"# Data transforms (normalization & data augmentation)\nstats = ((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\ntrain_tfms = tt.Compose([tt.RandomCrop(64, padding=4, padding_mode='reflect'), \n                         tt.RandomHorizontalFlip(), \n                         tt.ToTensor(), \n                         tt.Normalize(*stats,inplace=True)])\nvalid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])","8b1bc7ad":"from torchvision import datasets, transforms, models","45a8bb98":"train_transforms = transforms.Compose([transforms.Resize(64),\n                                       transforms.ToTensor(),\n                                       ])\ntest_transforms = transforms.Compose([transforms.Resize(64),\n                                      transforms.ToTensor(),\n                                      ])\ntrain_data = datasets.ImageFolder(data_dir,       \n                    transform=train_transforms)\ntest_data = datasets.ImageFolder(data_dir,\n                    transform=test_transforms)","47f212a5":"batch_size = 8","3a7e58b8":"# PyTorch data loaders\ntrain_dl = DataLoader(train_data, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nvalid_dl = DataLoader(test_data, batch_size*2, num_workers=2, pin_memory=True)","591c04a6":"def denormalize(images, means, stds):\n    means = torch.tensor(means).reshape(1, 3, 1, 1)\n    stds = torch.tensor(stds).reshape(1, 3, 1, 1)\n    return images * stds + means\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        denorm_images = denormalize(images, *stats)\n        ax.imshow(make_grid(denorm_images[:64], nrow=8).permute(1, 2, 0).clamp(0,1))\n        break","b4d86fe9":"show_batch(train_dl)","7e131b5d":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","b5b2ad03":"device = get_default_device()\ndevice","1017201d":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)","a785d2d9":"class SimpleResidualBlock(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu2 = nn.ReLU()\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.relu1(out)\n        out = self.conv2(out)\n        return self.relu2(out) + x # ReLU can be applied before or after adding the input","d3c490eb":"simple_resnet = to_device(SimpleResidualBlock(), device)\n\nfor images, labels in train_dl:\n    out = simple_resnet(images)\n    print(out.shape)\n    break\n    \ndel simple_resnet, images, labels\ntorch.cuda.empty_cache()","c52416e8":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","e9ceb5e2":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels), \n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        \n        self.conv1 = conv_block(in_channels, 64)\n        self.conv2 = conv_block(64, 128, pool=True)\n        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128))\n        \n        self.conv3 = conv_block(128, 256, pool=True)\n        self.conv4 = conv_block(256, 512, pool=True)\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        self.classifier = nn.Sequential(nn.AdaptiveMaxPool2d(1), \n                                        nn.Flatten(), \n                                        nn.Dropout(0.2),\n                                        nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out","da44e78c":"model = to_device(ResNet9(3, 4), device)\nmodel","3c60fa40":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","263b189a":"history = [evaluate(model, valid_dl)]\nhistory","21469f40":"epochs = 10\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","6000f7bd":"%%time\nhistory = fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","d0e32dc4":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","453a5ef6":"plot_accuracies(history)","f5a02e04":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","48ab2730":"plot_losses(history)","688fb26c":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","0a0fa569":"plot_lrs(history)","a94e70ea":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return train_data.classes[preds[0].item()]","8c6be9dc":"img, label = test_data[0]\nplt.imshow(img.permute(1, 2, 0).clamp(0, 1))\nprint('Label:', train_data.classes[label], ', Predicted:', predict_image(img, model))","2c11888e":"# Evaluating the model","34706d1c":"# Visualizing th loss","cd9b5df8":"# An accuracy of 93.57%!","ad827ad1":"**A big thank-you and credits to [Mihir](http:\/\/kaggle.com\/mihirpaghdal) and [Siddharth](http:\/\/kaggle.com\/sid3945) for helping out with some key errors!**","30b43422":"# Training the model","efdbb089":"# Using a GPU","8bb6c760":"# Importing the required librairies","71712ae6":"## Testing with individual images\n\n","9bb27520":"# Model!","06c31241":"# Loading the data intp data loaders!","fbb0969e":"# Importing and splitting the data into train and test\n\n**I've used the test data for validation!**","7a26cfa0":"We can now wrap our training and validation data loaders using `DeviceDataLoader` for automatically transferring batches of data to the GPU (if available).","583221c3":"# Simple Residual block!","bee5923f":"# Intro to the project:\n\nUsing **CNN along with ResNets**, this model classifies the images taken by a satellite into 4 different classes, namely, ***cloudy; desert; green area; and water***"}}