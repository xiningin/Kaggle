{"cell_type":{"16d542f9":"code","67a0e3d1":"code","bafc4c46":"code","037d9dcd":"code","fb7d99c9":"code","1850be2b":"code","9579f08f":"code","fbae4b65":"code","09de5da9":"code","4f637b9c":"code","9bcd0e95":"code","2054c64f":"code","bdf194b2":"code","8bc4d0cc":"code","8499eab5":"code","ef84963f":"code","abc8a487":"code","209402e8":"code","bfce3c82":"code","20cffe37":"code","3a689da4":"code","19af4910":"code","0d8fb213":"code","95b9719e":"code","0b0d88e4":"code","1204880f":"code","81e270a7":"code","eb3f0525":"code","41b9db78":"code","fbced41e":"code","bf270ec9":"code","bfba36b4":"code","d2a69f74":"code","43a6aedc":"code","20cb6b6a":"code","1a4d3111":"code","d6eac5ba":"code","05359077":"code","660bbb83":"code","ec6c0dbf":"code","e11409e4":"code","b29908d6":"code","8f70b7cb":"code","ff403b9f":"code","60a901cf":"code","4d475bc7":"code","74d24311":"code","fadbdac7":"code","650fd194":"code","8ffaf300":"code","83d9e490":"code","15038aaa":"code","a0730c3a":"code","cc8cc009":"code","d00127e8":"code","873f610d":"code","a741c962":"code","76858985":"code","3c7046cf":"code","4500afc5":"code","a5761ae7":"code","9d7d8c8f":"code","cbffc16d":"code","1e92b7bf":"code","0b8cb970":"code","f76c94ef":"code","575475b9":"markdown","71f6b02e":"markdown","0984ab6c":"markdown","3240690a":"markdown","c05a168e":"markdown"},"source":{"16d542f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67a0e3d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","bafc4c46":"df=pd.read_csv(\"\/kaggle\/input\/loan-approval-prediction\/Training Dataset.csv\")\ndf","037d9dcd":" df.head()","fb7d99c9":"df.shape","1850be2b":"df.info()","9579f08f":"df.describe()","fbae4b65":"df.isnull().sum()","09de5da9":"df.LoanAmount=df.LoanAmount.fillna(df.LoanAmount.mean())\n\ndf.Credit_History=df.Credit_History.fillna(df.Credit_History.mean())\n\ndf.Loan_Amount_Term=df.Loan_Amount_Term.fillna(df.Loan_Amount_Term.mean())\n\ndf['Gender'].fillna(df['Gender'].value_counts().idxmax(), inplace=True)\n\ndf['Married'].fillna(df['Married'].value_counts().idxmax(), inplace=True)\n\ndf.Dependents.fillna(df.Dependents.value_counts().idxmax(), inplace=True)\n\ndf.Self_Employed.fillna(df.Self_Employed.value_counts().idxmax(), inplace=True)","4f637b9c":"df.isnull().sum()","9bcd0e95":"df.duplicated().sum()","2054c64f":"df.drop(['Loan_ID'],axis=1)","bdf194b2":"df.skew()","8bc4d0cc":"df.ApplicantIncome=df.ApplicantIncome.clip(lower=df.ApplicantIncome.quantile(0.05),upper=df.ApplicantIncome.quantile(0.95))\n\ndf.CoapplicantIncome=df.CoapplicantIncome.clip(lower=df.CoapplicantIncome.quantile(0.05),upper=df.CoapplicantIncome.quantile(0.95))\n\ndf.Loan_Amount_Term=df.Loan_Amount_Term.clip(lower=df.Loan_Amount_Term.quantile(0.14),upper=df.Loan_Amount_Term.quantile(0.86))\n\ndf.LoanAmount=df.LoanAmount.clip(lower=df.LoanAmount.quantile(0.05),upper=df.LoanAmount.quantile(0.95))\n\ndf.Credit_History=df.Credit_History.clip(lower=df.Credit_History.quantile(0.05),upper=df.Credit_History.quantile(0.95))\n\ndf.ApplicantIncome=df.ApplicantIncome.clip(lower=df.ApplicantIncome.quantile(0.10),upper=df.ApplicantIncome.quantile(0.90))","8499eab5":"df.skew()","ef84963f":"df.info()","abc8a487":"plt.figure(figsize=(8,4))\nsns.countplot(df.Gender)\nplt.show()","209402e8":"plt.figure(figsize=(8,4))\nsns.countplot(df.Married)\nplt.show()","bfce3c82":"plt.figure(figsize=(8,4))\nsns.countplot(df.Dependents)\nplt.show()","20cffe37":"plt.figure(figsize=(8,4))\nsns.countplot(df.Education)\nplt.show()","3a689da4":"plt.figure(figsize=(8,4))\nsns.countplot(df.Self_Employed)\nplt.show()","19af4910":"plt.figure(figsize=(8,4))\nsns.countplot(df.Property_Area)\nplt.show()","0d8fb213":"plt.figure(figsize=(8,4))\nsns.countplot(df.Credit_History)\nplt.show()","95b9719e":"num=['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n       'Loan_Amount_Term']\nfor column in num:\n    plt.figure(figsize=(8,4))\n    plt.hist(df[column])\n    plt.title(column)\n    plt.show()","0b0d88e4":"df.Loan_Status.replace('N',0,inplace=True)\ndf.Loan_Status.replace('Y',1,inplace=True)","1204880f":"df.head()","81e270a7":"plt.figure(figsize=(12,5))\nsns.distplot(df['ApplicantIncome'][df.Loan_Status==0])\nsns.distplot(df['ApplicantIncome'][df.Loan_Status==1])\nplt.legend(['Loan_Status=0','Loan_Status=1'])\nplt.show()","eb3f0525":"plt.figure(figsize=(12,5))\nsns.distplot(df['LoanAmount'][df.Loan_Status==0])\nsns.distplot(df['LoanAmount'][df.Loan_Status==1])\nplt.legend(['Loan_Status=0','Loan_Status=1'])\nplt.show()","41b9db78":"pivot = pd.crosstab(df.Married,df.Loan_Status,margins=True)\npivot","fbced41e":"ratio = pivot[1]\/pivot['All']\nratio","bf270ec9":"ratio.plot(kind='bar')","bfba36b4":"pivot1 = pd.crosstab(df.Gender,df.Loan_Status,margins=True)\npivot1","d2a69f74":"ratio1 = pivot1[1]\/pivot1['All']\nratio1","43a6aedc":"ratio1.plot(kind='bar')","20cb6b6a":"pivot2 = pd.crosstab(df.Dependents,df.Loan_Status,margins=True)\npivot2","1a4d3111":"ratio2 = pivot2[1]\/pivot2['All']\nratio2","d6eac5ba":"ratio2.plot(kind='bar')","05359077":"pivot3 = pd.crosstab(df.Education,df.Loan_Status,margins=True)\npivot3","660bbb83":"ratio3 = pivot3[1]\/pivot3['All']\nratio3","ec6c0dbf":"ratio3.plot(kind='bar')","e11409e4":"pivot4 = pd.crosstab(df.Self_Employed,df.Loan_Status,margins=True)\npivot4","b29908d6":"ratio4 = pivot4[1]\/pivot4['All']\nratio4","8f70b7cb":"ratio4.plot(kind='bar')","ff403b9f":"pivot5= pd.crosstab(df.Credit_History,df.Loan_Status,margins=True)\npivot5","60a901cf":"ratio5= pivot5[1]\/pivot5['All']\nratio5","4d475bc7":"ratio5.plot(kind='bar')","74d24311":"pivot6= pd.crosstab(df.Property_Area,df.Loan_Status,margins=True)\npivot6","fadbdac7":"ratio6= pivot6[1]\/pivot6['All']\nratio6","650fd194":"ratio6.plot(kind='bar')","8ffaf300":"from sklearn.preprocessing import LabelEncoder\ndf['Education']=LabelEncoder().fit_transform(df['Education'])\ndf['Dependents']=LabelEncoder().fit_transform(df['Dependents'])\ndf['Self_Employed']=LabelEncoder().fit_transform(df['Self_Employed'])\ndf['Gender']=LabelEncoder().fit_transform(df['Gender'])\ndf['Married']=LabelEncoder().fit_transform(df['Married'])\ndf['Property_Area']=LabelEncoder().fit_transform(df['Property_Area'])","83d9e490":"cor=df.corr()\nplt.figure(figsize=(20,12))\nsns.heatmap(cor,annot=True,cmap='coolwarm')\nplt.show()","15038aaa":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae,median_absolute_error as mee,classification_report as cr,accuracy_score as ac","a0730c3a":"df2=df\ndf2.head()","cc8cc009":"col=['Loan_ID','Gender','Married','CoapplicantIncome','Loan_Amount_Term','Property_Area']\ndf2=df2.drop(columns=col,axis=1)\ndf2","d00127e8":"x=df2[['Dependents','Education','Self_Employed','ApplicantIncome','LoanAmount','Credit_History']]\ny=df2[['Loan_Status']]","873f610d":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=40)","a741c962":"from sklearn.tree import DecisionTreeClassifier \nmodel=DecisionTreeClassifier()","76858985":"model.fit(x_train,y_train)","3c7046cf":"y_pre1 = model.predict(x_test)\ny_pre1","4500afc5":"from sklearn.model_selection import cross_val_score\nprint(ac(y_test,y_pre1)*100)\nsco1=(cross_val_score(model,x,y,cv=5))\nprint(np.mean(sco1)*100)","a5761ae7":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pre1)\nplt.figure(figsize=(8,6))\nfg=sns.heatmap(cm,annot=True,cmap=\"Reds\")\nfigure=fg.get_figure()\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title(\"Output Confusion Matrix\")","9d7d8c8f":"newinput=[[0,0,0,5849.0,146.412162,1.0]]\noutput1=model.predict(newinput)\noutput1","cbffc16d":"from sklearn.naive_bayes import GaussianNB  \nclassifier1 = GaussianNB()  \nclassifier1.fit(x_train, y_train) ","1e92b7bf":"y_pred3= classifier1.predict(x_test) ","0b8cb970":"print(ac(y_test,y_pred3)*100)\nsco3=(cross_val_score(classifier1,x,y,cv=5))\nprint(np.mean(sco3)*100)","f76c94ef":"newinput1=[[0,0,0,5849.0,146.412162,1.0]]\noutput11=classifier1.predict(newinput1)\noutput11","575475b9":"# Peak at the Data","71f6b02e":"# Importing Libraries","0984ab6c":"# Dimensions of Dataset","3240690a":"# Information of the dataset","c05a168e":"# Load Dataset"}}