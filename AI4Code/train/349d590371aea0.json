{"cell_type":{"2d5791d8":"code","02d7f857":"code","e7c77416":"code","f4791a74":"code","deaee9d4":"code","e46d9d0e":"code","463b02d2":"code","823d50a1":"code","5f8ee172":"code","0a217d64":"code","f34caa80":"code","3aeed683":"code","59adbfae":"code","aea2dae3":"code","23a55970":"code","728fdb4e":"code","66bd8b3e":"code","6bde6271":"code","f67b2ab5":"code","7d30328b":"code","8a1fecd3":"code","a66c8dea":"code","aa37cf72":"code","22d223b7":"code","80734417":"code","550b9d91":"code","eb54317d":"code","d39ed4fd":"code","89cf7702":"code","b74c3110":"code","b87ada11":"code","9c3fd6f1":"code","e13e1d1f":"code","94db5f13":"code","1da2f7ec":"code","8376f1d3":"code","e8d14666":"code","7216bd69":"code","d68fcf54":"code","d2282fb5":"code","882a222a":"code","787f3fbc":"code","44a8e0c8":"code","9e210a65":"code","6c4aefe2":"code","51a84a2b":"code","5d9edc25":"code","7a0e3b04":"code","6607739a":"code","a6dd6353":"code","b1901599":"code","ba890382":"code","34f02f11":"code","c6ed240a":"code","2f85ec76":"code","f1e7237d":"code","a6d6cee1":"code","d858591e":"code","c57f7f11":"code","31024068":"code","54e9bbdf":"code","61c68f7e":"code","01609e63":"code","793e2c28":"code","53219f87":"code","f4e97a61":"code","c594fd4d":"code","2529afe3":"code","b391c9f4":"code","9593920d":"code","7a8bfd3a":"code","fb36718e":"code","8507d69a":"markdown","635591e4":"markdown","e45d562f":"markdown","6713889c":"markdown","1da72de2":"markdown","f3b09b1d":"markdown","e40456be":"markdown","106bcf39":"markdown","abaf18b7":"markdown","2df6971b":"markdown","be183e1d":"markdown","a6492110":"markdown"},"source":{"2d5791d8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks as cf","02d7f857":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","e7c77416":"df.head()","f4791a74":"df.isna().sum()","deaee9d4":"df.info()","e46d9d0e":"df.describe()","463b02d2":"plt.figure(figsize = (50,10))\nsns.countplot(data=df, x = 'age')","823d50a1":"len(df[df['age'] <= 1])","5f8ee172":"def childage(col):\n    for i in col:\n        \n        if i <= 1:\n            return 1\n        else:\n            return i","0a217d64":"df['age'] = df[['age']].apply(childage,axis=1)","f34caa80":"df.describe()","3aeed683":"df.isna().sum()","59adbfae":"df.corr()['bmi'].sort_values()[1:-1]","aea2dae3":"sns.heatmap(data=df.corr() , cmap = 'plasma' , annot=True)","23a55970":"df.head()","728fdb4e":"df2 = pd.get_dummies(df ,columns = ['gender' , 'ever_married' , 'work_type' , 'Residence_type' , 'smoking_status'] , drop_first= True)","66bd8b3e":"df2.head()","6bde6271":"df = df2","f67b2ab5":"df2.drop('id',axis=1,inplace=True)","7d30328b":"df2.info()","8a1fecd3":"df2['smoking_status_never smoked'] =  df2['smoking_status_never smoked'].astype(np.int64)\ndf2['smoking_status_smokes'] =  df2['smoking_status_smokes'].astype(np.int64)","a66c8dea":"df2['smoking_status_formerly smoked'] =  df2['smoking_status_formerly smoked'].astype(np.int64)","aa37cf72":"df2.info()","22d223b7":"df.head()","80734417":"df2['gender_Male'] =  df2['gender_Male'].astype(np.int64)\ndf2['gender_Other'] =  df2['gender_Other'].astype(np.int64)\ndf2['ever_married_Yes'] =  df2['ever_married_Yes'].astype(np.int64)\ndf2['work_type_Never_worked'] =  df2['work_type_Never_worked'].astype(np.int64)\ndf2['work_type_Private'] =  df2['work_type_Private'].astype(np.int64)\ndf2['work_type_Self-employed'] =  df2['work_type_Self-employed'].astype(np.int64)\ndf2['work_type_children'] =  df2['work_type_children'].astype(np.int64)\ndf2['Residence_type_Urban'] =  df2['Residence_type_Urban'].astype(np.int64)","550b9d91":"df2.info()","eb54317d":"data = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n# just to keep referencing from point to point","d39ed4fd":"df2.describe()","89cf7702":"df2.drop('stroke',axis=1,inplace=True)\ndf2['stroke'] = data['stroke']\ndf2.head()","b74c3110":"df2.isna().sum()","b87ada11":"df2.corr()['bmi'].sort_values()[:-1]","9c3fd6f1":"201 \/ len(df2)","e13e1d1f":"data.head()","94db5f13":"sns.pairplot(data=data)","1da2f7ec":"sns.boxplot(data=data , x = 'hypertension',y='bmi' , hue = 'heart_disease')","8376f1d3":"df2['age'].describe()","e8d14666":"def impute_age(age):\n    if age in range(0,5):\n        return 1\n    elif age in range(5,10):\n        return 2\n    elif age in range(10,15):\n        return 3\n    elif age in range(15,20):\n        return 4\n    elif age in range(20,25):\n        return 5\n    elif age in range(25,30):\n        return 6\n    elif age in range(30,35):\n        return 7\n    elif age in range(35,40):\n        return 8\n    elif age in range(40,45):\n        return 9\n    elif age in range(45,50):\n        return 10\n    elif age in range(50,55):\n        return 11\n    elif age in range(55,60):\n        return 12\n    elif age in range(60,65):\n        return 13\n    elif age in range(65,70):\n        return 14\n    elif age in range(70,75):\n        return 15\n    elif age in range(75,80):\n        return 16\n    elif age in range(80,85):\n        return 17\n    ","7216bd69":"df2['age_category'] = df['age'].apply(impute_age)","d68fcf54":"df2.corr()['bmi'][:-1].sort_values()","d2282fb5":"plt.figure(figsize=(20,10))\nsns.boxplot(data=df2, x = 'age_category',y='bmi' , hue = 'hypertension')","882a222a":"for i in range(1,18):\n    print(f'for category {i} , if married YES, the median bmi is : ')\n    print(df2[(df2['age_category']==i) & (df2['ever_married_Yes'] == 1)]['bmi'].median())\n    print(f'for category {i} , if married NO, the median bmi is : ')\n    print(df2[(df2['age_category']==i) & (df2['ever_married_Yes'] == 0)]['bmi'].median())\n    i += 1\n# GOOD ANALYSIS...but not that useful as the difference between bmi of married and unmarried is not that high..max is only 4\n# Hence , we'll resort to excluding the marital condition ","787f3fbc":"for i in range(1,18):\n    print(f'for category {i} , if HYPERTENSION YES, the median bmi is : ')\n    print(df2[(df2['age_category']==i) & (df2['hypertension'] == 1)]['bmi'].median())\n    print(f'for category {i} , if HYPER TENSION NO, the median bmi is : ')\n    print(df2[(df2['age_category']==i) & (df2['hypertension'] == 0)]['bmi'].median())\n    i += 1    \n# IMPORTANT!!!!!!!","44a8e0c8":"def bmi_imputer(cols):\n    bmi = cols[0]\n    age_cat = cols[1]\n    ht = cols[2]\n    if pd.isnull(bmi):\n        if age_cat == 1:\n            return 18\n        elif age_cat == 2:\n            return 18.3\n        elif age_cat == 3:\n            return 21.8\n        elif ((age_cat == 4) & (ht == 1)):\n            return 63.3\n        elif ((age_cat == 4) & (ht == 0)):\n            return 24.2\n        elif ((age_cat == 5) & (ht == 1)):\n            return 37.65\n        elif ((age_cat == 5) & (ht == 0)):\n            return 26.2\n        elif ((age_cat == 6) & (ht == 1)):\n            return 37.5\n        elif ((age_cat == 6) & (ht == 0)):\n            return 27\n        elif ((age_cat == 7) & (ht == 1)):\n            return 45.1\n        elif ((age_cat == 7) & (ht == 0)):\n            return 29.5\n        elif ((age_cat == 8) & (ht == 1)):\n            return 37.2\n        elif ((age_cat == 8) & (ht == 0)):\n            return 29.25\n        elif ((age_cat == 9) & (ht == 1)):\n            return 37.65\n        elif ((age_cat == 9) & (ht == 0)):\n            return 30\n        elif ((age_cat == 10) & (ht == 1)):\n            return 35.5\n        elif ((age_cat == 10) & (ht == 0)):\n            return 29.6\n        elif ((age_cat == 11) & (ht == 1)):\n            return 32.05\n        elif ((age_cat == 11) & (ht == 0)):\n            return 30.2\n        elif ((age_cat == 12) & (ht == 1)):\n            return 33.2\n        elif ((age_cat == 12) & (ht == 0)):\n            return 30\n        elif ((age_cat == 13) & (ht == 1)):\n            return 33.75\n        elif ((age_cat == 13) & (ht == 0)):\n            return 30.1\n        elif ((age_cat == 14) & (ht == 1)):\n            return 31.1\n        elif ((age_cat == 14) & (ht == 0)):\n            return 29\n        elif ((age_cat == 15) & (ht == 1)):\n            return 31.1\n        elif ((age_cat == 15) & (ht == 0)):\n            return 29.25\n        elif ((age_cat == 16) & (ht == 1)):\n            return 29\n        elif ((age_cat == 16) & (ht == 0)):\n            return 27.85\n        elif ((age_cat == 17) & (ht == 1)):\n            return 28.55\n        elif ((age_cat == 17) & (ht == 0)):\n            return 27.35\n    else:\n        return bmi\n            ","9e210a65":"df2['bmi'] = df2[['bmi' , 'age_category' , 'hypertension']].apply(bmi_imputer , axis=1)","6c4aefe2":"df2.isna().sum()","51a84a2b":"df2.info()","5d9edc25":"df = df2.copy()","7a0e3b04":"df.info()","6607739a":"df.drop('age_category' , axis=1 , inplace=True)","a6dd6353":"df.info()","b1901599":"df.dropna(inplace=True)","ba890382":"df.info()","34f02f11":"df.tail(10)","c6ed240a":"sns.histplot(data=df, x = 'bmi', kde=True)\n# Left skewed ...not normal distribution","2f85ec76":"sns.histplot(data=df, x = 'age', kde=True)\n# definitely not normal distribution","f1e7237d":"sns.histplot(data=df, x = 'avg_glucose_level', kde=True)\n# not a normal distribution","a6d6cee1":"X = df.iloc[: , :-1]\ny = df.iloc[: , -1]","d858591e":"from sklearn.model_selection import train_test_split","c57f7f11":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","31024068":"len(df[df['stroke']==0])","54e9bbdf":"df_0 = df[df['stroke']==0]\ndf_1 = df[df['stroke']==1]","61c68f7e":"df_0 = df_0.sample(1250 , random_state=42)","01609e63":"df_new = pd.concat([df_0,df_1] , axis=0)","793e2c28":"df_new.reset_index(inplace=True)","53219f87":"df_new.drop('index',axis=1,inplace=True)","f4e97a61":"df_new.head()","c594fd4d":"A = df_new.drop('stroke',axis=1)\nB = df_new['stroke']\nA_train,A_test,B_train,B_test = train_test_split(A,B,test_size=0.2,random_state=42)\nA_train = scaler.fit_transform(A_train)\nA_test = scaler.transform(A_test)","2529afe3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix,f1_score","b391c9f4":"rf_f1 = []\nfor i in range(1,101):\n    rf_new = RandomForestClassifier(n_estimators=i ,random_state=42)\n    rf_new.fit(A_train,B_train)\n    rf_new_pred = rf_new.predict(scaler.transform(X))\n    rf_f1.append(f1_score(y,rf_new_pred))","9593920d":"rf_df = pd.DataFrame({'Trees': np.arange(1,101) , 'f1':rf_f1})\nrf_df[rf_df['f1']==rf_df['f1'].max()]","7a8bfd3a":"rf_new = RandomForestClassifier(n_estimators=76 , random_state=42)\nrf_new.fit(A_train,B_train)\nrf_new_pred = rf_new.predict(scaler.transform(X))\nf1_score(y,rf_new_pred)","fb36718e":"print(confusion_matrix(y,rf_new_pred))\nprint('\\n')\nprint(classification_report(y,rf_new_pred))","8507d69a":"# Some age are less than 1...let's change that to 1 as we can't have age less than one","635591e4":"# SINCE DATA IS HIGHLY UNBALANCED, (ONLY 5% VALUES HAVE STROKE=1), WE'LL DO A BIT OF DATA MANIPULATION","e45d562f":"# NONE OF OUR CONTINOUS VARIABLE ARE NORMALLY DISTRIBUTED; HENCE, WE'LL APPLY STANDARD SCALAR","6713889c":"# LET'S GET BACK TO MISSING DATA IN BMI COLUMN","1da72de2":"# Only hypertension seems out to  be a good metric...tried others as well but none had \"significant\" variations in the category","f3b09b1d":"# SEEMS LIKE DATASET HAS BEEN MORE OR LESS CLEANED!!","e40456be":" F1- Score : 69% (rounded to nearest integer value)\n Accuracy (a wrong evaluating metric in this case though) : 96% (rounded to nearest integer value)","106bcf39":"#  RANDOM FOREST","abaf18b7":"# LET'S CHECK WHETHER THE DATA DISTRIBUTION OF THE DEPENDENT VARIABLE IS NORMAL OR NOT, DEPENDING ON THAT WE'LL CHOOSE STANDARDIZATION METHOD","2df6971b":"# LET's dive into bmi as some of its data are missing","be183e1d":"# Okay we'll keep this for later, let's now focus on all the object categorical columns and make dummy variables","a6492110":"# LET'S TRY REMAKING A DATASET OUT OF df WHICH FOLLOWS A TREND SIMILAR TO df BUT HAS LESS VALUES OF STROKE=0 AND THE RETAINING THE ROWNS WITH STROKE=1"}}