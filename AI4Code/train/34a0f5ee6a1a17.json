{"cell_type":{"e6745a6b":"code","f0708db7":"code","cc9ab4c9":"code","b286f8ab":"code","6feec070":"code","33d75ed0":"code","8a09d5a8":"code","7c7a283e":"code","f365329b":"code","27036697":"code","edee6a35":"code","9fbff7ec":"code","0289a337":"code","7e09cace":"code","e3c0a3f2":"code","2f9401ca":"code","971c125c":"code","3391461c":"code","909d4d0b":"code","9ab8b58f":"code","d9d0600c":"code","970889c5":"code","9b884e3c":"code","411d4037":"markdown","fd295107":"markdown","e5476f17":"markdown"},"source":{"e6745a6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0708db7":"data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')","cc9ab4c9":"data['temp_humidity_combined'] = data['deg_C'] \/ data['relative_humidity']\n\ndata['date_parsed'] = pd.to_datetime(data['date_time'], infer_datetime_format=True)\ndata['time'] = data['date_time'].astype('datetime64[ns]').astype(np.int64)\/\/10**9\ndata['hour'] = data['date_parsed'].dt.hour\ndata['month_of_year'] = data['date_parsed'].dt.month\ndata['year'] = data['date_parsed'].dt.year\ndata['quarter'] = data['date_parsed'].dt.quarter\ndata['total_months_since_2010_start'] = ((data['year'] - 2010) * 12) + data['month_of_year'] #Gets the total amounts of months since start of 2010, to avoid months being 0 in a different year.\ndata[\"dt-6\"] = data[\"deg_C\"] - data[\"deg_C\"].shift(periods=6, fill_value=0)\ndata[\"dt-3\"] = data[\"deg_C\"] - data[\"deg_C\"].shift(periods=3, fill_value=0)\n\ntotal_features = ['temp_humidity_combined', 'absolute_humidity', 'relative_humidity', 'deg_C', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'hour', 'month_of_year', 'quarter', 'total_months_since_2010_start', 'dt-6', 'dt-3', 'time']\n\nlabels = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'] #Not used","b286f8ab":"data.head()","6feec070":"from sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y):\n    mi_scores = mutual_info_regression(X, y)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\nprint(make_mi_scores(data[total_features], data['target_carbon_monoxide']), \"\\n\\n\")  # show a few features with their MI scores\nprint(make_mi_scores(data[total_features], data['target_benzene']), \"\\n\\n\")  # show a few features with their MI scores\nprint(make_mi_scores(data[total_features], data['target_nitrogen_oxides']), \"\\n\\n\")  # show a few features with their MI scores","33d75ed0":"best_features = ['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'hour', 'time'] #Features used to train the model -- high mutual information scores","8a09d5a8":"X = data[best_features]\ny = data[labels]","7c7a283e":"X.tail() #Last row has total months as 13 -- because it's January in 2011. 13 months since start of 2010. ","f365329b":"y.head()","27036697":"X.describe()","edee6a35":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.8)","9fbff7ec":"len(X_train)","0289a337":"len(y_train)","7e09cace":"len(X_valid)","e3c0a3f2":"len(y_valid)","2f9401ca":"len(X)","971c125c":"from xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\ncarbon_monoxide_model = XGBRegressor(n_estimators=500, learning_rate=0.01)\ncarbon_monoxide_model.fit(X_train, y_train['target_carbon_monoxide'],early_stopping_rounds=10, eval_set=[(X_valid, y_valid['target_carbon_monoxide'])])\nprint(\"done\")\n\ntarget_benzene_model = XGBRegressor(n_estimators=500, learning_rate=0.01)\ntarget_benzene_model.fit(X_train, y_train['target_benzene'], early_stopping_rounds=10, eval_set=[(X_valid, y_valid['target_benzene'])])\nprint(\"done\")\n\ntarget_nitrogen_model = XGBRegressor(n_estimators=1000, learning_rate=0.01)\ntarget_nitrogen_model.fit(X_train, y_train['target_nitrogen_oxides'], early_stopping_rounds=10, eval_set=[(X_valid, y_valid['target_nitrogen_oxides'])])\nprint(\"done\")","3391461c":"from sklearn.metrics import mean_absolute_error\n\nvalid_predictions = carbon_monoxide_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(valid_predictions, y_valid['target_carbon_monoxide'])))\n\nvalid_predictions = target_benzene_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(valid_predictions, y_valid['target_benzene'])))\n\nvalid_predictions = target_nitrogen_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(valid_predictions, y_valid['target_nitrogen_oxides'])))","909d4d0b":"test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\n\ntest['date_parsed'] = pd.to_datetime(test['date_time'], infer_datetime_format=True)\ntest['time'] = test['date_time'].astype('datetime64[ns]').astype(np.int64)\/\/10**9\ntest[\"dt-6\"] = test[\"deg_C\"] - test[\"deg_C\"].shift(periods=6, fill_value=0)\ntest['hour'] = test['date_parsed'].dt.hour\ntest['month_of_year'] = test['date_parsed'].dt.month\ntest['year'] = test['date_parsed'].dt.year\ntest['total_months_since_2010_start'] = ((test['year'] - 2010) * 12) + test['month_of_year'] #Gets the total amounts of months since start of 2010, to avoid months being 0 in a different year.\n\nnitrogen_test_X = test[best_features]\nbenzene_test_X = test[best_features]\ncarbon_monoxide_test_X = test[best_features]\n\ntarget_carbon_monoxide = carbon_monoxide_model.predict(carbon_monoxide_test_X)\ntarget_benzene = target_benzene_model.predict(benzene_test_X)\ntarget_nitrogen_oxides = target_nitrogen_model.predict(nitrogen_test_X)","9ab8b58f":"test.head()","d9d0600c":"output = pd.DataFrame({'date_time': test.date_time, \n                        'target_carbon_monoxide': target_carbon_monoxide,\n                        'target_benzene' : target_benzene,\n                        'target_nitrogen_oxides' : target_nitrogen_oxides})","970889c5":"output.head()","9b884e3c":"output.to_csv('submission.csv', index=False)","411d4037":"This is my code for the July 2021 Tabular Playground Series. I got a public score of ~0.23 and a private score of about ~0.18","fd295107":"XGBoost Implementation","e5476f17":"Split into train and validation"}}