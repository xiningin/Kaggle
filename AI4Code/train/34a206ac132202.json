{"cell_type":{"0e3673bc":"code","d7f6b887":"code","2f6c376c":"code","77fb09b9":"code","e4d636ef":"code","a653982a":"code","2087754d":"code","e7505783":"code","d83ee74d":"code","a258a30e":"code","5424b917":"code","0cc0799d":"code","091ad273":"code","6a9d4383":"code","a5da13db":"code","dbc7bc0f":"code","b45d4ded":"code","310648f7":"code","8b9c80d5":"code","1aae4242":"code","a3760b58":"code","4c8847e0":"code","25f6c267":"code","702f2e17":"code","8c71905c":"code","275d8b60":"code","cb5b7372":"code","b3b4b98e":"markdown","7dbff5b9":"markdown","cdb807ad":"markdown","d2730335":"markdown","e26caee8":"markdown","9a59c035":"markdown","f80e0894":"markdown"},"source":{"0e3673bc":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","d7f6b887":"data0 = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndata0","2f6c376c":"data0.columns","77fb09b9":"print(list(data0.columns))","e4d636ef":"n=len(data0)\nprint(n)","a653982a":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","2087754d":"datay0=data0['DEATH_EVENT']\ndatax0=data0.drop(['DEATH_EVENT'],axis=1)\ndatax0[0:5].T","e7505783":"datax2=np.array(datax0)\ndatay2=np.array(datay0)","d83ee74d":"m=len(datax2)\nM=[]\nfor i in range(m):\n    M+=[i]\nrandom.shuffle(M)","a258a30e":"train=datax2[M[0:(n\/\/10)*8]]\ntest=datax2[M[(n\/\/10)*8:]]\ntrainy=datay2[M[0:(n\/\/10)*8]]\ntesty=datay2[M[(n\/\/10)*8:]]","5424b917":"df_columns = list(datax0.columns)","0cc0799d":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","091ad273":"train_df.columns=df_columns\ntest_df.columns=df_columns","6a9d4383":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","a5da13db":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","dbc7bc0f":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","b45d4ded":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","310648f7":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","8b9c80d5":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves':62\n}","1aae4242":"y = trainy","a3760b58":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","4c8847e0":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","25f6c267":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\nfig, ax = visualize_importance(models, train_feat_df)","702f2e17":"def revert_to_real(preda):\n    predb = np.where(preda<0.5,0,1)\n    return predb","8c71905c":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\npred2 = revert_to_real(pred1)\npred2","275d8b60":"from sklearn.metrics import classification_report, log_loss, accuracy_score\naccuracy=accuracy_score(testy,pred2)\nprint(accuracy)","cb5b7372":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(pred1, label='Test Predict', ax=ax, color='black')\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1')\nax.legend()\nax.grid()","b3b4b98e":"# Train and test setting","7dbff5b9":"# Model","cdb807ad":"# Visualize Importance","d2730335":"# Data preparation","e26caee8":"# Target setting","9a59c035":"### 'time'(follow-up period) is the most imprtant factor for heart failure death event.","f80e0894":"# Predict"}}