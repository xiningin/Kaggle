{"cell_type":{"4856c000":"code","2e84143a":"code","84c4afb9":"code","51ec449b":"code","11b342f1":"code","0a425e00":"code","a1eee0a3":"code","4bb4414a":"code","c01133ff":"code","807699be":"code","0483fc39":"code","20b90ac3":"code","9ff0389f":"code","60c911a6":"code","a7e16005":"code","7ebc7785":"code","fed9ac04":"code","efc2f02f":"code","cd32ec6d":"code","8cd5889a":"code","c0874565":"code","99ef8988":"code","16ba1793":"code","6363983a":"code","9dbf2a29":"code","90d2d5f0":"code","8f6b038b":"markdown"},"source":{"4856c000":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e84143a":"dataset = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv', usecols=['text','target'])\ndataset.head(20)","84c4afb9":"test_data = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv', usecols=['text'])\n","51ec449b":"dataset.groupby(['target']).count().plot.bar()","11b342f1":"dataset.describe()","0a425e00":"dataset.describe(include='O')","a1eee0a3":"dataset.drop_duplicates(subset =\"text\", \n                     keep = 'first', inplace = True)","4bb4414a":"import string\nimport nltk\nfrom nltk.corpus import stopwords","c01133ff":"stopword = stopwords.words('english')","807699be":"def text_preprocessing(texts):\n    tex=texts.strip()\n    texts_word=[word for word in tex.split() if \"@\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"#\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"www.\" not in word]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if \"http\" not in word]\n    tex=\" \".join(texts_word)\n    \n    texts_word=[word for word in tex if word not in string.punctuation]\n    tex=\"\".join(texts_word)\n    texts_word=[word for word in tex.split() if word not in stopword]\n    tex=\" \".join(texts_word)\n    texts_word=[word for word in tex.split() if word.isalpha()]\n    tex=\" \".join(texts_word)\n    texts_word=[word.lower() for word in tex.split()]\n    tex=\" \".join(texts_word)\n    tex=tex.strip()\n    return tex.split()","0483fc39":"from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer","20b90ac3":"dataset['text'] = dataset['text'].astype('str')\ntest_data['text'] = test_data['text'].astype('str')","9ff0389f":"cv=CountVectorizer(analyzer=text_preprocessing).fit(dataset.text)\ntest_cv=CountVectorizer(analyzer=text_preprocessing).fit(test_data.text)","60c911a6":"cv_trans=cv.transform(dataset.text)\ncv_trans\ntest_cv_trans=cv.transform(test_data.text)\ntest_cv_trans","a7e16005":"tfidf=TfidfTransformer().fit(cv_trans)\ntfidf_trans=tfidf.transform(cv_trans)\ntest_tfidf=TfidfTransformer().fit(test_cv_trans)\ntest_tfidf_trans=test_tfidf.transform(test_cv_trans)","7ebc7785":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score","fed9ac04":"X_train,X_test,y_train,y_test=train_test_split(tfidf_trans,dataset.target,test_size=0.15,random_state=42)","efc2f02f":"# from sklearn.model_selection import GridSearchCV\n# C=[0.05,0.1,0.2,0.3,0.25,0.4,0.5,0.6,0.7,0.8,0.9,1]\n# gamma=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]\n# kernel=['rbf','linear']\n# hyper={'kernel':kernel,'C':C,'gamma':gamma}\n\n\n# gd=GridSearchCV(estimator=SVC(),param_grid=hyper,verbose=1000)\n# gd.fit(X_train,y_train)\n# print(gd.best_score_)\n# print(gd.best_estimator_)","cd32ec6d":"sv_model = SVC(C=0.9, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma=0.1, kernel='linear',\n    max_iter=-1, probability=False, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)\n\n\n\n\n\n","8cd5889a":"sv_model.fit(X_train, y_train)","c0874565":"confusion_matrix(y_test,sv_model.predict(X_test))","99ef8988":"from sklearn.metrics import f1_score,average_precision_score,roc_auc_score\n\nprint(roc_auc_score(y_test, sv_model.predict(X_test)))\nprint(f1_score(y_test, sv_model.predict(X_test)))\nprint(average_precision_score(y_test, sv_model.predict(X_test)))","16ba1793":"test_data","6363983a":"predicted_prices = sv_model.predict(test_tfidf_trans)","9dbf2a29":"# for i in predicted_prices:\n#     print(i)","90d2d5f0":"# my_submission = pd.DataFrame({'Id': test.Id, 'SalePrice': predicted_prices})\n# # you could use any filename. We choose submission here\n# my_submission.to_csv('submission.csv', index=False)","8f6b038b":"C=0.2, gamma=0.9, kernel=linear, score=0.75\nC=0.3, gamma=0.7, kernel=linear, score=0.792\n 0.8  8  \n\n0.8  0.5"}}