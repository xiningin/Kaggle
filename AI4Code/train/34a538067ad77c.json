{"cell_type":{"e6102d17":"code","54277825":"code","2aae5715":"code","41a2bf23":"code","f70648d6":"code","4df36f7b":"code","b0b0c40c":"code","bc738107":"code","4c5d089a":"code","44bd2bf7":"code","1d3f4cf3":"markdown","d5b065e2":"markdown","0a11942b":"markdown","af42866f":"markdown","25b1f382":"markdown","824fb103":"markdown","a835f53d":"markdown","a5e8d576":"markdown","3043df87":"markdown","5c4fa49b":"markdown","fa413be5":"markdown","df5e05d0":"markdown","a72bfb73":"markdown","4d0a31a2":"markdown"},"source":{"e6102d17":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option(\"max_info_columns\", 300)","54277825":"train = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\n\ntrain.head(10)","2aae5715":"train.info()","41a2bf23":"train.describe()","f70648d6":"train.isnull().sum().sum()","4df36f7b":"target = \"target\"\n\ncat_cols = [col for col in train.columns if (col not in [\"id\", target]) & (train[col].nunique() <= 10)]\nnum_cols = [col for col in train.columns if (col not in [\"id\", target]) & (train[col].nunique() > 10)]\npredictors = [col for col in train.columns if col not in [\"id\", target]]\n\nprint(f\"Number of Categorical columns: {len(cat_cols)}\")\nprint(f\"Number of Numerical columns: {len(num_cols)}\")\nprint(f\"Number of Predictors: {len(predictors)}\")\n\n\nlen(cat_cols) + len(num_cols) == len(predictors)","b0b0c40c":"fig, ax = plt.subplots(figsize = (6, 6))\n\nlabels = train[target].value_counts().index.tolist()\npalette = [\"#0EB8F1\", \"#F1480F\"]\n\n\nax.pie(train[target].value_counts(), labels = labels, autopct = '%1.2f%%', \n       startangle = 180, colors = palette)\n\nax.set_title(target)\nplt.show()","bc738107":"position = range(1, len(num_cols) + 1)\n\nplt.rcParams[\"font.family\"] = \"Times New Roman\"\nfig = plt.figure(1, figsize=(40, 30), facecolor = \"#E5E5E5\")\n\nfor col, pos in zip(num_cols, range(len(num_cols))):\n    \n    skewness = np.round(train[col].skew(), 3)\n    kurtosis = np.round(train[col].kurtosis(), 3)\n    \n    ax = fig.add_subplot(15, 16, position[pos])\n    sns.kdeplot(data = train, x = col, ax = ax, color = \"#101820\")\n    \n    ax.set_title(r\"$\\bf{\" + col  + \"}$\" + \"\\nSkewness: \" + str(skewness) + \"\\nKurtosis: \" + str(kurtosis))\n    ax.set_facecolor(\"#E5E5E5\")\n    ax.set_xlabel(\"\")\n\nplt.tight_layout()\nplt.show()","4c5d089a":"position = range(1, len(num_cols) + 1)\n\nfig = plt.figure(1, figsize=(40, 30), facecolor = \"#E5E5E5\")\n\norder = sorted(train[target].unique())\npalette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n\nfor col, pos in zip(num_cols, range(len(num_cols))):\n    \n    ax = fig.add_subplot(15, 16, position[pos])\n    sns.boxplot(data = train, y = col, hue = target, \n                ax = ax, x = [\"\"] * len(train), \n                palette = palette[:len(order)], linewidth = 0.5, \n                flierprops = dict(marker = \"x\", markersize = 3.5))\n    \n    ax.set_title(r\"$\\bf{\" + col + \"}$\")\n    ax.set_facecolor(\"#E5E5E5\")\n    ax.set_ylabel(\"\")\n    \n    ax.get_legend().remove()\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc = \"upper center\")\n\nplt.tight_layout()\nplt.show()","44bd2bf7":"fig = plt.figure(1, figsize=(40, 30), facecolor = \"#E5E5E5\")\n\norder = sorted(train[target].unique())\n\nfor col, pos in zip(cat_cols, list(np.arange(1, 90, 2))):\n    \n    ax1 = fig.add_subplot(9, 10, pos)\n    sns.countplot(x = col, data = train, hue = target, ax = ax1, order = order, palette = palette, alpha = 1)\n    ax1.set_title(\"Counts For Feature:\\n\" + col)\n    \n    ax2 = fig.add_subplot(9, 10, pos + 1)\n    \n    temp = train.groupby(col)[target].value_counts(normalize = True).\\\n    rename(\"percentage\").\\\n    reset_index()\n    \n    sns.barplot(x = col, y = \"percentage\", hue = target, data = temp, \n                ax = ax2, order = order, palette = palette)\n    \n    ax2.set_title(\"Percentages For Feature: \\n\" + col)\n    \n    ax2.set_ylim(0,1)\n    \n    for p in ax2.patches:\n        \n        txt = \"{:.1f}%\".format(p.get_height() * 100)\n        ax2.text(p.get_x(), p.get_height() + 0.02, txt, fontsize = 10)\n\n    for ax in [ax1, ax2]:\n        ax.get_legend().remove()\n        ax.set_facecolor(\"#E5E5E5\")\n        ax.set_ylabel(\" \")\n        ax.tick_params(labelsize = 8)\n        \n    handles, labels = ax1.get_legend_handles_labels()\n    fig.legend(handles, labels, loc = \"upper center\")\n\nplt.tight_layout()\nplt.show()    ","1d3f4cf3":"We don't have missing value, nice.","d5b065e2":"[take me to the top](#section-top)","0a11942b":"<a id=\"section-two\"><\/a>\n\n# 2. Numerical Features - Distribution","af42866f":"<a id=\"section-four\"><\/a>\n\n# 4. Categorical Features - Distribution & Target","25b1f382":"<a id=\"section-zero\"><\/a>\n\n# 0. Introduction","824fb103":"Balanced dataset, good.","a835f53d":"<a id=\"section-one\"><\/a>\n\n# 1. Target Distribution","a5e8d576":"[take me to the top](#section-top)","3043df87":"[take me to the top](#section-top)","5c4fa49b":"[take me to the top](#section-top)","fa413be5":"<a id=\"section-top\"><\/a>\n\n# Table of Contents\n\n**0)** [Introduction](#section-zero)\n\n**1)** [Target Distribution](#section-one)\n\n**2)** [Numerical Features - Distribution](#section-two)\n\n**3)** [Numerical Features - Target](#section-three)\n\n**4)** [Categorical Features - Distribution & Target](#section-four)\n","df5e05d0":"You have to adjust max_info_columns option from pandas for showing infos.\n> pd.set_option(\"max_info_columns\", 300)","a72bfb73":"[take me to the top](#section-top)","4d0a31a2":"<a id=\"section-three\"><\/a>\n\n# 3. Numerical Features - Target"}}