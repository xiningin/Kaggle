{"cell_type":{"0965df1f":"code","ec791748":"code","8e84fa04":"code","38134d87":"code","c4a8ad4a":"code","8e73906a":"code","12fc85cd":"code","139aac4d":"code","ab9f8bbb":"code","c0064760":"code","e1247a41":"code","577886f7":"code","fb8fd329":"code","d5ad5de1":"code","8222951f":"code","8c701cb1":"code","b56ec60a":"code","def6e339":"code","6621aa83":"code","b5b2a444":"code","d2a6cc36":"code","23b13a84":"code","64e4b741":"code","7b16daa5":"code","a8b0cf9b":"code","9ed306a5":"code","f0f8441b":"code","27326a81":"code","4e3d0cf9":"code","1cf9ba34":"code","8bfba7c3":"code","122199df":"code","b2821b93":"markdown","bf19c8f9":"markdown","fa9492fd":"markdown"},"source":{"0965df1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec791748":"#Import libraries\nfrom bs4 import BeautifulSoup as bs\nimport re\nimport nltk.data\nfrom nltk.corpus import stopwords\nimport logging\nfrom gensim.models import word2vec, Word2Vec\nfrom sklearn.cluster import KMeans\nimport time","8e84fa04":"# Read data from files \ntrain = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv.zip\", header=0, delimiter=\"\\t\", quoting=3 )\ntest = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/testData.tsv.zip\", header=0, delimiter=\"\\t\", quoting=3 )\nunlabeled_train = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/unlabeledTrainData.tsv.zip\", header=0, delimiter=\"\\t\", quoting=3 )","38134d87":"# Verify the number of reviews that were read (100,000 in total)\nprint(f\"Read {train['review'].size} labeled train reviews, {test['review'].size} labeled test reviews and {unlabeled_train['review'].size} unlabeled reviews\")","c4a8ad4a":"def review_to_wordlist(review, remove_stopwords=False):\n    '''Function to convert a document to a sequence of words,\n    optionally removing stop words.  Returns a list of words.\n    '''\n    # 1. Remove HTML\n    review_text = bs(review).get_text()\n      \n    # 2. Remove non-letters\n    review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)\n    \n    # 3. Convert words to lower case and split them\n    words = review_text.lower().split()\n    \n    # 4. Optionally remove stop words (false by default)\n    if remove_stopwords:\n        stops = set(stopwords.words(\"english\"))\n        words = [w for w in words if not w in stops]\n    \n    # 5. Return a list of words\n    return(words)","8e73906a":"# Download the punkt tokenizer for sentence splitting\n\n#nltk.download()","12fc85cd":"# Load the punkt tokenizer\ntokenizer = nltk.data.load('tokenizers\/punkt\/english.pickle')","139aac4d":"# Define a function to split a review into parsed sentences\ndef review_to_sentences(review, tokenizer, remove_stopwords=False):\n    '''Function to split a review into parsed sentences. Returns a \n    list of sentences, where each sentence is a list of words\n    '''\n    # 1. Use the NLTK tokenizer to split the paragraph into sentences\n    raw_sentences = tokenizer.tokenize(review.strip())\n    \n    # 2. Loop over each sentence\n    sentences = []\n    for raw_sentence in raw_sentences:\n        # If a sentence is empty, skip it\n        if len(raw_sentence) > 0:\n            # Otherwise, call review_to_wordlist to get a list of words\n            sentences.append(review_to_wordlist(raw_sentence, remove_stopwords))\n    \n    # Return the list of sentences (each sentence is a list of words,\n    # so this returns a list of lists\n    return sentences","ab9f8bbb":"sentences = []  # Initialize an empty list of sentences\n\nprint(\"Parsing sentences from training set\")\nfor review in train[\"review\"]:\n    sentences += review_to_sentences(review, tokenizer)\nprint(\"Finished parsing sentences from training set\")\n\nprint(\"Parsing sentences from unlabeled set\")\nfor review in unlabeled_train[\"review\"]:\n    sentences += review_to_sentences(review, tokenizer)\nprint(\"Finished parsing sentences from unlabeled set\")","c0064760":"# Import the built-in logging module and configure it so that Word2Vec \n# creates nice output messages\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)","e1247a41":"# Set values for various parameters\nnum_features = 300    # Word vector dimensionality                      \nmin_word_count = 40   # Minimum word count                        \nnum_workers = 4       # Number of threads to run in parallel\ncontext = 10          # Context window size                                                                                    \ndownsampling = 1e-3   # Downsample setting for frequent words","577886f7":"# Initialize and train the model (this will take some time)\nprint(\"Training model...\")\nmodel = word2vec.Word2Vec(sentences,\n                          workers=num_workers,\n                          size=num_features,\n                          min_count = min_word_count,\n                          window = context,\n                          sample = downsampling)\nprint(\"Finished training model.\")","fb8fd329":"# If you don't plan to train the model any further, calling \n# init_sims will make the model much more memory-efficient.\nmodel.init_sims(replace=True)","d5ad5de1":"# It can be helpful to create a meaningful model name and \n# save the model for later use. You can load it later using Word2Vec.load()\nmodel_name = \"300features_40minwords_10context\"\nmodel.save(model_name)","8222951f":"# Load the model that we created in Part 2\nmodel = Word2Vec.load(\"..\/input\/part2-model\/300features_40minwords_10context\")","8c701cb1":"type(model)","b56ec60a":"model.wv.vectors","def6e339":"model.wv.vectors.shape","6621aa83":"model.wv[\"flower\"]","b5b2a444":"type(model.wv[\"flower\"])","d2a6cc36":"model.wv[\"flower\"].shape","23b13a84":"model.wv.most_similar(\"man\")","64e4b741":"def makeFeatureVec(words, model, num_features):\n    '''Function to average all of the word vectors in a given\n    paragraph'''\n    \n    # Pre-initialize an empty numpy array (for speed)\n    featureVec = np.zeros((num_features,),dtype=\"float32\")\n    nwords = 0.\n     \n    # Index2word is a list that contains the names of the words in \n    # the model's vocabulary. Convert it to a set, for speed \n    index2word_set = set(model.wv.index2word)\n    \n    # Loop over each word in the review and, if it is in the model's\n    # vocaublary, add its feature vector to the total\n    for word in words:\n        if word in index2word_set: \n            nwords = nwords + 1.\n            featureVec = np.add(featureVec,model[word])\n     \n    # Divide the result by the number of words to get the average\n    featureVec = np.divide(featureVec,nwords)\n    return featureVec","7b16daa5":"def getAvgFeatureVecs(reviews, model, num_features):\n    '''Given a set of reviews (each one a list of words), calculate \n    the average feature vector for each one and return a 2D numpy array '''\n     \n    # Initialize a counter\n    counter = 0\n    \n    # Preallocate a 2D numpy array, for speed\n    reviewFeatureVecs = np.zeros((len(reviews),num_features),dtype=\"float32\")\n    \n    # Loop through the reviews\n    for review in reviews:\n       # Print a status message every 1000th review\n       if counter%1000 == 0:\n            print(f\"Review {counter} of {len(reviews)}\")\n            \n       # Call the function (defined above) that makes average feature vectors\n       reviewFeatureVecs[counter] = makeFeatureVec(review, model, num_features)\n        \n       # Increment the counter\n       counter = counter + 1\n        \n    return reviewFeatureVecs","a8b0cf9b":"# Calculate average feature vectors for training and testing sets,\n# using the functions we defined above. Notice that we now use stop word\n# removal.\n\nclean_train_reviews = []\nfor review in train[\"review\"]:\n    clean_train_reviews.append(review_to_wordlist(review, remove_stopwords=True))\n\ntrainDataVecs = getAvgFeatureVecs(clean_train_reviews, model, num_features)\n\nprint(\"Creating average feature vecs for test reviews\")\nclean_test_reviews = []\nfor review in test[\"review\"]:\n    clean_test_reviews.append( review_to_wordlist(review,remove_stopwords=True))\nprint(\"Finished creating average feature vecs for test reviews\")\n\ntestDataVecs = getAvgFeatureVecs(clean_test_reviews, model, num_features)","9ed306a5":"# Fit a random forest to the training data, using 100 trees\nfrom sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators = 100)\n\nprint(\"Fitting a random forest to labeled training data...\")\nforest = forest.fit(trainDataVecs, train[\"sentiment\"])\nprint(\"Finished fitting a random forest to labeled training data...\")\n\n# Test & extract results \nresult = forest.predict(testDataVecs)\n\n# Write the test results \noutput = pd.DataFrame(data={\"id\":test[\"id\"], \"sentiment\":result})\noutput.to_csv(\"Word2Vec_AverageVectors.csv\", index=False, quoting=3)","f0f8441b":"start = time.time() # Start time\n\n# Set \"k\" (num_clusters) to be 1\/5th of the vocabulary size, or an\n# average of 5 words per cluster\nword_vectors = model.wv.vectors\nnum_clusters = int(word_vectors.shape[0] \/ 5)\n\n# Initalize a k-means object and use it to extract centroids\nkmeans_clustering = KMeans(n_clusters = num_clusters)\nidx = kmeans_clustering.fit_predict(word_vectors)\n\n# Get the end time and print how long the process took\nend = time.time()\nelapsed = end - start\nprint(\"Time taken for K Means clustering: \", elapsed, \"seconds.\")","27326a81":"# Create a Word \/ Index dictionary, mapping each vocabulary word to\n# a cluster number                                                                                            \nword_centroid_map = dict(zip(model.wv.index2word, idx))\nword_centroid_map","4e3d0cf9":"# For the first 10 clusters\nfor cluster in range(0,10):\n    \n    # Print the cluster number  \n    print(f\"\\nCluster {cluster}\")\n    \n    # Find all of the words for that cluster number, and print them out\n    words = []\n    for i in range(0,len(word_centroid_map.values())):\n        if(list(word_centroid_map.values())[i] == cluster):\n            words.append(list(word_centroid_map.keys())[i])\n    print(words)","1cf9ba34":"def create_bag_of_centroids( wordlist, word_centroid_map ):\n    \n    # The number of clusters is equal to the highest cluster index\n    # in the word \/ centroid map\n    num_centroids = max(word_centroid_map.values())+1\n    \n    # Pre-allocate the bag of centroids vector (for speed)\n    bag_of_centroids = np.zeros(num_centroids, dtype=\"float32\")\n    \n    # Loop over the words in the review. If the word is in the vocabulary,\n    # find which cluster it belongs to, and increment that cluster count \n    # by one\n    for word in wordlist:\n        if word in word_centroid_map:\n            index = word_centroid_map[word]\n            bag_of_centroids[index] += 1\n    \n    # Return the \"bag of centroids\"\n    return bag_of_centroids","8bfba7c3":"# Pre-allocate an array for the training set bags of centroids (for speed)\ntrain_centroids = np.zeros((train[\"review\"].size, num_clusters),dtype=\"float32\")\n\n# Transform the training set reviews into bags of centroids\ncounter = 0\nfor review in clean_train_reviews:\n    train_centroids[counter] = create_bag_of_centroids(review, word_centroid_map)\n    counter += 1\n\n# Repeat for test reviews \ntest_centroids = np.zeros((test[\"review\"].size, num_clusters), dtype=\"float32\")\n\ncounter = 0\nfor review in clean_test_reviews:\n    test_centroids[counter] = create_bag_of_centroids(review, word_centroid_map)\n    counter += 1","122199df":"# Fit a random forest and extract predictions \nforest = RandomForestClassifier(n_estimators = 100)\n\n# Fitting the forest may take a few minutes\nprint(\"Fitting a random forest to labeled training data...\")\nforest = forest.fit(train_centroids,train[\"sentiment\"])\nresult = forest.predict(test_centroids)\nprint(\"Finished fitting a random forest to labeled training data.\")\n\n# Write the test results \noutput = pd.DataFrame(data={\"id\":test[\"id\"], \"sentiment\":result})\noutput.to_csv( \"BagOfCentroids.csv\", index=False, quoting=3 )","b2821b93":"https:\/\/stackoverflow.com\/questions\/32101795\/error-while-loading-word2vec-model-in-gensim","bf19c8f9":"If you are on a Mac or Linux system, you can use the \"top\" command from within Terminal (not from within Python) to see if your system is successfully parallelizing while the model is training. Type:\n> top -o cpu ","fa9492fd":"### Part 3"}}