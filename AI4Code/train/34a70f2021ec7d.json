{"cell_type":{"1b3715f9":"code","4c3ac792":"code","d1b48401":"code","231f1d68":"code","ad89eca5":"code","7a7834f9":"code","d3a3ea7f":"code","77e4fa9d":"code","bb61055c":"code","70672b59":"code","e0abfa6b":"code","dc26ca73":"code","f73e04fd":"code","eedd8be2":"code","12f51c1f":"code","faaadef2":"code","280c8d7f":"code","adf6feef":"code","1589f0ea":"code","ba131099":"code","9fa1c8cf":"code","54fd6039":"code","d7e96380":"code","5bee9d71":"code","ccda84d7":"code","d38a9af1":"code","07b923fe":"markdown","a6ba9557":"markdown"},"source":{"1b3715f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c3ac792":"import os\nimport numpy as np","d1b48401":"labels=os.listdir(\"..\/input\/natural-images\/natural_images\")\nlabels","231f1d68":"x_data =[]\ny_data = []\nimport cv2\nfor label in labels:\n    path = '..\/input\/natural-images\/data\/natural_images\/{0}\/'.format(label)\n    folder_data = os.listdir(path)\n    for image_path in folder_data:\n        image = cv2.imread(path+image_path)\n        image_resized = cv2.resize(image, (56,56)).flatten()\n        x_data.append(np.array(image_resized))\n        y_data.append(label)","ad89eca5":"x_data = np.array(x_data)\ny_data = np.array(y_data)\nx_data = x_data\/255","7a7834f9":"from sklearn.preprocessing import LabelEncoder\ny_encoded = LabelEncoder().fit_transform(y_data)","d3a3ea7f":"r = np.arange(x_data.shape[0])\nnp.random.seed(42)\nnp.random.shuffle(r)\nX = x_data[r]\nY = y_encoded[r]","77e4fa9d":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.30)","bb61055c":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import LeakyReLU","70672b59":"  import matplotlib.pyplot as plt\n    # create accuracy sublpot\n  def plot_history(history):\n    \"\"\"Plots accuracy\/loss for training\/validation set as a function of the epochs\n        :param history: Training history of model\n        :return:\n    \"\"\"\n    plt.figure(figsize=(20, 15))\n    fig, axs = plt.subplots(2) \n    fig.tight_layout(pad=3.0)\n    axs[0].plot(history.history[\"accuracy\"], label=\"train accuracy\",color=\"green\")\n    axs[0].plot(history.history[\"val_accuracy\"], label=\"test accuracy\",color='blue')\n    axs[0].set_ylabel(\"Accuracy\")\n    axs[0].legend(loc=\"lower right\")\n    axs[0].set_title(\"Accuracy eval\")\n\n    # create error sublpot\n    axs[1].plot(history.history[\"loss\"], label=\"train error\",color=\"red\")\n    axs[1].plot(history.history[\"val_loss\"], label=\"test error\",color='orange')\n    axs[1].set_ylabel(\"Error\")\n    axs[1].set_xlabel(\"Epoch\")\n    axs[1].legend(loc=\"upper right\")\n    axs[1].set_title(\"Error eval\")\n    plt.show()","e0abfa6b":"model=keras.Sequential([keras.layers.Dense(8, input_shape=(9408,)),\n                        keras.layers.Dense(8, input_shape=(9408,),activation='sigmoid')])\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","dc26ca73":"history=model.fit(X_train, Y_train, validation_split=0.3, batch_size=5,epochs=25)\nplot_history(history)","f73e04fd":"model.evaluate(X_test, Y_test)\ny_predicted = model.predict(X_test)","eedd8be2":"y_predicted_labels=[np.argmax(i) for i in y_predicted]\ncm=tf.math.confusion_matrix(labels=Y_test,predictions=y_predicted_labels)\nimport seaborn as sn\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","12f51c1f":"labels = os.listdir('..\/input\/natural-images\/data\/natural_images\/')\nprint(labels)","faaadef2":"x_data =[]\ny_data = []\nimport cv2\nfor label in labels:\n    path = '..\/input\/natural-images\/data\/natural_images\/{0}\/'.format(label)\n    folder_data = os.listdir(path)\n    for image_path in folder_data:\n        image = cv2.imread(path+image_path)\n        image_resized = cv2.resize(image, (64,64))\n        x_data.append(np.array(image_resized))\n        y_data.append(label)","280c8d7f":"x_data = np.array(x_data)\ny_data = np.array(y_data)","adf6feef":"x_data = x_data.astype('float32')\/255","1589f0ea":"from sklearn.preprocessing import LabelEncoder\ny_encoded = LabelEncoder().fit_transform(y_data)\nfrom keras.utils import to_categorical\ny_categorical = to_categorical(y_encoded)","ba131099":"#lets shuffle all the data we have:\nr = np.arange(x_data.shape[0])\nnp.random.seed(42)\nnp.random.shuffle(r)\nX = x_data[r]\nY = y_categorical[r]","9fa1c8cf":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.30)","54fd6039":"from tensorflow.keras.layers import LeakyReLU\n","d7e96380":"from keras import models, layers\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(filters=32, padding='same',kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(layers.MaxPool2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(filters=64,kernel_size=(3, 3), activation=LeakyReLU(alpha=0.02)))\nmodel.add(layers.MaxPool2D(pool_size=(2, 2)))\nmodel.add(layers.Dropout(rate=0.25))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256))\nmodel.add(layers.Dropout(rate=0.25))\nmodel.add(layers.Dense(8, activation='softmax'))","5bee9d71":"model.compile(\n    loss='categorical_crossentropy', \n    optimizer='adam', \n    metrics=['accuracy'])","ccda84d7":"history=model.fit(X_train, Y_train, epochs=16, validation_split=0.25,batch_size=5 )\nplot_history(history)","d38a9af1":"model.evaluate(X_test, Y_test)","07b923fe":"CNN","a6ba9557":"**ANN**"}}