{"cell_type":{"26024c22":"code","86d8e36b":"code","f7b55b9c":"code","09bf275c":"code","a97b946d":"code","19a091e9":"code","21c4613d":"code","87a63795":"code","ce23da94":"code","b590b8dc":"code","aa86600d":"code","058d2823":"code","efe2deb6":"code","929fc441":"code","d1e577a5":"code","cb537268":"code","8f75bd38":"code","a37a49e6":"code","8c9a38d4":"code","bf8cdc19":"code","88674826":"code","0994b28e":"code","5e98aaa7":"code","84e4a600":"code","af3aa058":"markdown","efe7b513":"markdown","1e0af1b3":"markdown"},"source":{"26024c22":"!pip uninstall covidSumm --y\n!pip install easydict","86d8e36b":"!pip install -i https:\/\/test.pypi.org\/simple\/ covidSumm==0.1.3","f7b55b9c":"!pip install fairseq","09bf275c":"import covidSumm","a97b946d":"import requests\nimport json\nimport os\nimport argparse","19a091e9":"from covidSumm.abstractive_utils import get_ir_result, result_to_json, get_qa_result","21c4613d":"from covidSumm.abstractive_model import abstractive_summary_model\nfrom covidSumm.abstractive_config import set_config\nfrom covidSumm.abstractive_bart_model import *","87a63795":"args = set_config()\nargs['model_path'] = '\/kaggle\/input\/carieabssummmodel\/'","ce23da94":"def get_summary_list(article_list, abstractive_model):\n    summary_list = []\n    for i in range(len(article_list)):\n        article = article_list[i]\n        summary_results = abstractive_model.generate_summary(article)\n        result = \"\"\n        for item in summary_results:\n            result += item.replace('\\n', ' ')\n        summary_list.append(result)\n    return summary_list\n\ndef get_answer_summary(query, abstractive_model):\n    paragraphs_list = get_qa_result(query, topk = 3)\n    answer_summary_list = abstractive_model.generate_summary(paragraphs_list)\n    answer_summary = \"\"\n    for item in answer_summary_list:\n        answer_summary += item.replace('\\n', ' ')\n    answer_summary_json = {}\n    answer_summary_json['summary'] = answer_summary\n    answer_summary_json['question'] = query\n    return answer_summary_json\n\ndef get_article_summary(query, abstractive_summary_model):\n    article_list, meta_info_list = get_ir_result(query, topk = 10)  \n    summary_list = get_summary_list(article_list, abstractive_summary_model)\n    summary_list_json = []\n    \n    for i in range(len(summary_list)):\n        json_summary = {}\n        json_summary = result_to_json(meta_info_list[i], summary_list[i])\n        summary_list_json.append(json_summary)\n\n    return summary_list_json","b590b8dc":"from IPython.core.display import display, HTML\nimport pandas as pd\n\ndef display_summary(ans_summary_json, model_type):\n    question = ans_summary_json['question']\n    text = ans_summary_json['summary']\n    question_HTML = '<div style=\"font-family: Times New Roman; font-size: 28px; padding-bottom:28px\"><b>Query<\/b>: '+question+'<\/div>'\n    display(HTML(question_HTML))\n\n    execSum_HTML = '<div style=\"font-family: Times New Roman; font-size: 18px; margin-bottom:1pt\"><b>' + model_type + ' Abstractive Summary:<\/b>: '+text+'<\/div>'\n    display(HTML(execSum_HTML))\n\ndef display_article_summary(result, query):\n    question_HTML = '<div style=\"font-family: Times New Roman; font-size: 28px; padding-bottom:28px\"><b>Query<\/b>: '+query+'<\/div>'\n    pdata = []\n    abstract = \"\"\n    summary = \"\"\n    for i in range(len(result)):\n        if 'abstract' in result[i].keys():\n            line = []\n            context_2 = '<a href= \"https:\/\/doi.org\/'\n            context_2 += result[i]['doi']\n            context_2 += ' target=\"_blank\">'\n            context_2 += result[i]['title']\n            context_2 += '<\/a>'\n            line.append(context_2)\n            \n            abstract = \"<div> \" \n            abstract += result[i]['abstract']\n            abstract += \" <\/div>\"\n            line.append(abstract)\n            summary = \"<div> \" + result[i]['summary'] + \" <\/div>\"\n            line.append(summary)\n\n\n            pdata.append(line)\n    display(HTML(question_HTML))\n    df = pd.DataFrame(pdata, columns = ['Title','Abstract','Summary'])\n    HTML(df.to_html(render_links=True, escape=False))\n#     display(HTML(df.to_html(render_links=True, escape=False)))\n    df = df.style.set_properties(**{'text-align': 'left'})\n    display(df)","aa86600d":"query = 'What is the range of incubation periods for COVID-19 in humans'","058d2823":"args = set_config()\nargs['model_path'] = '\/kaggle\/input\/carieabssummmodel\/'\nsummary_model_1 = abstractive_summary_model(config = args)","efe2deb6":"model_path = \"\/kaggle\/input\/bartsumm\/bart.large.cnn\"\nsummary_model_2 = Bart_model(model_path)","929fc441":"answer_summary_1 = get_answer_summary(query, summary_model_1)","d1e577a5":"display_summary(answer_summary_1, 'UniLM')","cb537268":"answer_summary_2 = get_bart_answer_summary(query, summary_model_2)","8f75bd38":"display_summary(answer_summary_2, 'BART')","a37a49e6":"article_summary_1 = get_article_summary(query, summary_model_1)","8c9a38d4":"display_article_summary(article_summary_1, query)","bf8cdc19":"article_summary_2 = get_bart_article_summary(query, summary_model_2)","88674826":"display_article_summary(article_summary_2, query)","0994b28e":"from covidSumm.abstractive_api import *\nanswer_summary_1 = abstractive_api_uni_para(query)\nanswer_summary_1","5e98aaa7":"from covidSumm.abstractive_utils import *\ntest_answer = abstractive_api(query, 'unilm_para')\ntest_answer","84e4a600":"test_answer = abstractive_api(query, 'bart_article')\ntest_answer","af3aa058":"Automatic text summarization is a common problem in machine learning and natural language processing (NLP). Basically there are two main types of how to summarize text in NLP:\n* Extraction-based summarization, which involves pulling key phrases from the source document and combining them to make a summary, and;\n* Abstraction-based summarization, which creates new phrases and sentences that relay the most useful information from the original text \u2014 just like humans do. \n \nIn general, the abstractive method is a much harder task but performs better than an extractive method.\n \nIn our project, considering the requirements that people may still want to further read each paragraph containing the predicted QA answer spans, we summarize the top-k  (top-3) paragraphs that QA module passes, to generate a paragraph-level abstractive summary. \nOur model is based on two different abstractive summarization models: [Unilm](https:\/\/github.com\/microsoft\/unilm\/tree\/master\/s2s-ft) and [BART](https:\/\/github.com\/pytorch\/fairseq\/tree\/master\/examples\/bart), both of which have obtained SOTA results on the summarization tasks ([CNN\/DM datasets](https:\/\/cs.nyu.edu\/~kcho\/DMQA\/), and [XSUM](https:\/\/github.com\/EdinburghNLP\/XSum\/tree\/master\/XSum-Dataset) data). UniLM model is a unified pre-trained model for language understanding and generation. BART is a sequence-to-sequence model trained with denoising as a pre-training objective for language generation, translation, and comprehension.\n\nWe fine-tuned the UniLM model using [SumOnGraph](https:\/\/github.com\/coshiang\/SumOnGraph) biology dataset which includes literature for 5 types of diseases including Cancer, Cardiovascular Disease, Diabetes, Allergy, and Obesity. Original data is from PubMed which is a free resource supporting the search and retrieval of biomedical and life sciences literature with the aim of improving health\u2013both globally and personally. We used the BART model fine-tuned on CNN\/DailMail dataset. \n \nWe generate a summary for each answer-related paragraph from the QA module, then concatenate them directly to form our final **paragraph-level answer summary**.\n \nAs for our **article-level summary**, even though it is not shown on this kaggle tasks. It takes the whole article as input, and generate a summary for each sections (eg. Introductions section, Methodologies section)  of the articles, and then concatenate them together as a more fine-grained article-level summary, as complementary to the abstracts. ","efe7b513":"* Now we initiate our **Summerization model 1**","1e0af1b3":"* We initiate our Summerization model 2"}}