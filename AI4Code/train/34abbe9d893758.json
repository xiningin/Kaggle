{"cell_type":{"504d9d23":"code","33d947df":"code","64153128":"code","ba3cbe97":"code","ace31f09":"code","471f0d8d":"code","366dafb0":"markdown","e8db7b2b":"markdown","0c7f0d2b":"markdown","b18fe71d":"markdown","0f6cf68b":"markdown"},"source":{"504d9d23":"!pip install imageai","33d947df":"!pip install keras==2.1.2","64153128":"!pip install tensorflow==2.1.2","ba3cbe97":"# import keras\n# import tensorflow\nfrom imageai.Detection import ObjectDetection","ace31f09":"#Copying current content to new editable directory\n\n!cp -r \"..\/input\/objectdetectionwithpython\/\" \"\/kaggle\/working\/\"\n\n!ls \"\/kaggle\/working\/\"","471f0d8d":"detector = ObjectDetection()\n\nmodel_path = \"\/kaggle\/working\/objectdetectionwithpython\/yolo-tiny.h5\"\ninput_path = \"\/kaggle\/working\/objectdetectionwithpython\/fifthavenue.jpg\"\noutput_path = \"\/kaggle\/working\/objectdetectionwithpython\/fifthavenue_with_detection.jpg\"\n\ndetector.setModelTypeAsTinyYOLOv3()\ndetector.setModelPath(model_path)\ndetector.loadModel()\ndetection = detector.detectObjectsFromImage(input_image=input_path, output_image_path=output_path)\n\nfor eachItem in detection:\n    print(eachItem[\"name\"] , \": \", eachItem[\"percentage_probability\"])","366dafb0":"# 4. Deep Learning Algorithm Implementation & Assessment","e8db7b2b":"# 2. Importing Basic Libraries","0c7f0d2b":"# 5. Conclusions\n\nAfter installing the specific libraries versions for the exercise we were able to detect people and cars in a random Fifth Avenue picture.\n\n![fifthavenue_with_detection.jpg](attachment:fifthavenue_with_detection.jpg)","b18fe71d":"# 3. Data Collection","0f6cf68b":"# 1. Introduction: Business Goal & Problem Definition\n\nIF YOU LIKE IT OR IF IT HELPS YOU SOMEHOW, COULD YOU PLEASE UPVOTE? THANK YOU VERY MUCH!!!\n\nThis project\u00b4s goal is developing a deep learning model able to identify people and cars in pictures. I\u00b4m using a pre-trained model in Tiny Yolo.\n\nYOLO is a clever convolutional neural network (CNN) for doing object detection in real-time. The algorithm applies a single neural network to the full image, and then divides the image into regions and predicts bounding boxes and probabilities for each region. These bounding boxes are weighted by the predicted probabilities.\nTo help make YOLO even faster, Redmon et al. (the creators of YOLO), defined a variation of the YOLO architecture called Tiny-YOLO."}}