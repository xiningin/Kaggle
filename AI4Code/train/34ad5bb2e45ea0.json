{"cell_type":{"6f707b92":"code","7e3f308d":"code","f3289c9f":"code","e0a3c4b9":"code","81e50616":"code","92488366":"code","21fad56f":"code","5df9ad39":"code","4b335635":"code","b1afdb00":"code","99ccf2cb":"code","b2f8462d":"code","aee43340":"code","958c6cb3":"code","c1ed4526":"code","5da4931c":"code","7a1faecb":"code","66b3ed8c":"code","f82e2abc":"code","2c6be71c":"code","acdc19b4":"code","ba766b62":"code","7550b077":"code","21511b1e":"markdown","99cc373e":"markdown","dd8d22d5":"markdown","e2ec5433":"markdown","21a91633":"markdown","4a3fd2ea":"markdown","6ce0fdd7":"markdown","a5e36362":"markdown","ccc5b446":"markdown"},"source":{"6f707b92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e3f308d":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline ","f3289c9f":"pd.set_option('display.max_columns', None)","e0a3c4b9":"path = '..\/input\/bankchurners-set2\/BankChurners.csv'\ndf = pd.read_csv(path)\ndf.head()","81e50616":"df.info()","92488366":"# dropping the last two columns\ndf.drop(df.columns[-2:], axis = 1, inplace = True)","21fad56f":"df.head()","5df9ad39":"df.describe()","4b335635":"df.isnull().sum()","b1afdb00":"df.columns","99ccf2cb":"# dropping the clientnum column\ndf.drop('CLIENTNUM', axis = 1, inplace = True)","b2f8462d":"target_col = pd.get_dummies(df['Attrition_Flag'], drop_first = True)\n\ndf['target'] = target_col\n\ndf.drop('Attrition_Flag', axis = 1, inplace = True)","aee43340":"df['Gender'].unique()\nd = {\n    'M': 0,\n    'F': 1\n}\ndf['Gender'] = df['Gender'].map(d)","958c6cb3":"d = {\n    'Unknown': 0,\n    'Single': 1,\n    'Married': 2,\n    'Divorced': 3\n}\ndf['Marital_Status'] = df['Marital_Status'].map(d)","c1ed4526":"df['Education_Level'].value_counts().index\nd = {\n    'Unknown': 0,\n    'Uneducated': 1,\n    'High School': 2,\n    'College': 3,\n    'Graduate': 4,\n    'Post-Graduate': 5,\n    'Doctorate': 6\n}\ndf['Education_Level'] = df['Education_Level'].map(d)","5da4931c":"d = {\n    'Unknown': 0,\n    'Less than $40K': 1,\n    '$40K - $60K': 2,\n    '$60K - $80K': 3,\n    '$80K - $120K': 4,\n    '$120K +': 5\n}\ndf['Income_Category'] = df['Income_Category'].map(d)","7a1faecb":"df['Card_Category'].value_counts().index\nd = {\n    'Blue': 0,\n    'Silver': 1,\n    'Gold': 2,\n    'Platinum': 3\n}\ndf['Card_Category'] = df['Card_Category'].map(d)","66b3ed8c":"from sklearn.model_selection import train_test_split\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","f82e2abc":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","2c6be71c":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\ndec = DecisionTreeClassifier()\nrandom = RandomForestClassifier()\nnaive_bayes = GaussianNB()\nadaboost = AdaBoostClassifier() \ngradboost = GradientBoostingClassifier()\nmodels = [\n    dec, \n    random, \n    naive_bayes,\n    adaboost,\n    gradboost\n]\n\nfor model in models:\n    print(model)\n    crossval = cross_val_score(model, X, y, cv = 5)\n    print(crossval)\n    print('mean is {}'.format(crossval.mean()))\n    print(\"The standard deviation is {}\".format(crossval.std()))\n    print()","acdc19b4":"random.fit(X_train, y_train)","ba766b62":"from sklearn.metrics import accuracy_score ","7550b077":"accuracy_score(y_test, random.predict(X_test))","21511b1e":"#### Card_Category","99cc373e":"#### Education_Level","dd8d22d5":"**There are no null values in the dataset**","e2ec5433":"#### Gender","21a91633":"#### Marital_Status","4a3fd2ea":"#### Target column","6ce0fdd7":"## Data Preparation for model building","a5e36362":"### Models","ccc5b446":"#### Income_Category"}}