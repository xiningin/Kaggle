{"cell_type":{"ef7d5028":"code","f01a5213":"code","a1faa042":"code","07434fbe":"code","62e1c91f":"code","328723ad":"code","02c80e8c":"code","803a023b":"code","b7f19607":"code","0e0fd026":"code","0efaf75e":"code","3ff4c423":"code","f9abd027":"code","26faa561":"code","02a2313b":"code","842a72e7":"code","6bc8223d":"code","30f9a6d0":"code","68564d4a":"code","7938bfaf":"code","3b87c95e":"code","f15e9690":"code","94e3fdc7":"code","70554f21":"code","a96aaf5e":"code","8bfefe83":"code","27358fb4":"code","dd5c6e37":"code","375f752f":"code","0d2563db":"code","525382fc":"code","3b590787":"code","473b9c2a":"code","20e13304":"code","2d9fbc50":"code","f065e0f4":"code","da9e751d":"code","2e52fe7e":"code","dee2355b":"code","90cf3086":"code","362d5458":"code","174b03db":"code","3bf82892":"code","2a1df977":"code","11a10edf":"code","b680c474":"code","4b5d9b6b":"code","981e8856":"code","1ae6da1b":"code","07e5e1c7":"code","c26c6dc7":"code","d132d26b":"code","5a85615d":"code","27ba762c":"code","b285d1a4":"code","37f56e7d":"code","79750e8e":"code","e7ece9c7":"markdown","22ff0c2d":"markdown","b23a83cf":"markdown","abf84734":"markdown","739f5932":"markdown","ec1a6b56":"markdown","035ad3ff":"markdown","ceb9bea2":"markdown","ad10d1ee":"markdown","a4889034":"markdown","f0cdba9e":"markdown","a29bfc86":"markdown","85466959":"markdown","727ee739":"markdown","8fcda176":"markdown","665ac12b":"markdown","ac0e483c":"markdown","40118473":"markdown","76cb4f7c":"markdown","0f2169d2":"markdown","a63ee1b9":"markdown"},"source":{"ef7d5028":"import re\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split # \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f01a5213":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","a1faa042":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')  # 40.000 \u0441\u0442\u0440\u043e\u043a\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')  # 10.000 \u0441\u0442\u0440\u043e\u043a \nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv') # 10.000 \u0441\u0442\u0440\u043e\u043a \n\n# \u0432\u043e\u0437\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0445 \u0441\u043b\u043e\u0432:\npositive_words = pd.read_csv('\/kaggle\/input\/lists-of-emotion-words\/positive_words.csv', names=['word'])\nnegative_words = pd.read_csv('\/kaggle\/input\/lists-of-emotion-words\/neg_words.csv', names=['word'])","07434fbe":"sample_submission.head(3)","62e1c91f":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","328723ad":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435, - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c.\nplt.figure(figsize=(16, 8))\nsns.heatmap(df.isnull())","02c80e8c":"# \u0412\u0438\u0434\u0438\u043c \u0437\u0430\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443:\ndf.ID_TA.nunique(), df[df['sample'] == 1].ID_TA.nunique()","803a023b":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a ID_TA \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0432\u0438\u0434:\ndf.ID_TA = df.ID_TA.apply(lambda x: int(x[1:]))\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0437\u0430\u0434\u0432\u043e\u0435\u043d\u043d\u044b\u043c ID_TA:\ndf['ID_TA_num'] = df.ID_TA.map(dict(df.ID_TA.value_counts() - 1))","b7f19607":"df.ID_TA.describe()","0e0fd026":"df.Restaurant_id.value_counts().hist(bins=38)","0efaf75e":"df.Restaurant_id.value_counts()","3ff4c423":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u043e-\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f id: id_227\ndf[df.Restaurant_id == 'id_227'].head(8)","f9abd027":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\ndf.groupby('City')['Number of Reviews'].sum().sort_values(ascending=False).plot(kind='bar')","26faa561":"df.groupby('City')['Number of Reviews'].mean().sort_values(ascending=False).plot(kind='bar')","02a2313b":"df['Number of Reviews'].plot()","842a72e7":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\nrewiews_city_dict = dict(df.groupby('City')['Number of Reviews'].sum())\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435:\ndf['relative_rank_reviews'] = df['Ranking'] \/ df.City.map(rewiews_city_dict)\n\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u044e:\ndict_null = {True: 1, False: 0}\ndf['null_review'] = df['Number of Reviews'].isna().map(dict_null)\n\n# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430:\ndf['Number of Reviews'][df['Number of Reviews'].isna()] = df.City.map(dict(df.groupby('City')['Number of Reviews'].mean()))","6bc8223d":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u0437\u0430\u0446\u0438\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430:\ndf['Number of Reviews'] = np.sqrt(df['Number of Reviews'])","30f9a6d0":"sns.jointplot(x='Number of Reviews', y='Ranking', data=df)","68564d4a":"df[df['sample'] == 1].Ranking.max(), df[df['sample'] == 0].Ranking.max()","7938bfaf":"sns.boxplot(y='Ranking', x='Rating', data=df[df['sample'] == 1])","3b87c95e":"# \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u0432\u044b\u0448\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u0437\u0443\u0435\u043c Ranking \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438:\ndict_max_rank_city = df.groupby(['City'])['Ranking'].max().to_dict()\ndf['Ranking'] = df.Ranking\/df.City.map(dict_max_rank_city)\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\nsns.boxplot(y='Ranking', x='City', data=df)","f15e9690":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \"Cuisine Style\" \u0432 list:\ndf['Cuisine Style'] = df['Cuisine Style'].apply(lambda x: x[2:-2].split(\"', '\") if type(x) == str else [])\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c ('Cuisin_sum') \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 1 (\u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043e\u0434\u0438\u043d \u0432\u0438\u0434 \u043a\u0443\u0445\u043d\u0438 \u0435\u0441\u0442\u044c \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u044f):\ndf['cuisine_sum'] = df['Cuisine Style'].apply(lambda x: len(x) if x != [] else 1)","94e3fdc7":"df['cuisine_sum'].value_counts()","70554f21":"# \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u044f\u0432\u043d\u043e \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0432 \u0432\u044b\u0431\u0440\u043e\u0441 (\u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438):\ndf['cuisine_sum'][df['cuisine_sum'] > 9] = 9\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u0443\u0445\u043d\u044f\u043c:\nnational_cuisines = {'Paris': 'French', 'Stockholm': 'Swedish', 'London': 'British', 'Berlin': 'German', 'Munich': 'German',\n               'Oporto': 'Portuguese', 'Milan': 'Italian', 'Bratislava': 'Slovakia', 'Vienna': 'Austrian', 'Rome': 'Italian',\n               'Barcelona': 'Spanish', 'Madrid': 'Spanish', 'Dublin': 'Irish', 'Brussels': 'Belgian', 'Zurich': 'Swiss',\n               'Warsaw': 'Polish', 'Budapest': 'Hungarian', 'Copenhagen': 'Danish', 'Amsterdam': 'Dutch',\n               'Lyon': 'French', 'Hamburg': 'German', 'Lisbon': 'Portuguese', 'Prague': 'Czech', 'Oslo': 'Norwegian',\n               'Helsinki': 'Scandinavian', 'Edinburgh': 'Scottish', 'Geneva': 'Swiss', 'Ljubljana': 'Slovenian',\n               'Athens': 'Greek', 'Luxembourg': 'European', 'Krakow': 'Polish'}\n\ndef national_cuisines_replace(row):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 df \u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 'Cuisine Style' \u043d\u0430\n    \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u0443\u0445\u043d\u044e \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n    '''\n    if len(row[2]) == 0:\n        res = [national_cuisines[row[1]]]\n    else:\n        res = row[2]\n    return res\n\ndf['Cuisine Style'] = df.apply(lambda row: national_cuisines_replace(row), axis=1)","a96aaf5e":"# \u043e\u0431\u0440\u0430\u0442\u0438\u043c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u043b\u044f \u0411\u0440\u0430\u0442\u0438\u0441\u043b\u0430\u0432\u044b \u043d\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0438\u0434 \u043a\u0443\u0445\u043d\u0438 'Slovakia',\n# \u0437\u0430\u0442\u043e \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f 'Slovenian', - \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430:\ndef Slovakia(list_cuisines):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0437\u0430\u043c\u0435\u043d\u0443 'Slovenian' \u043d\u0430 'Slovakia' (\u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0411\u0440\u0430\u0442\u0438\u0441\u043b\u0430\u0432\u044b)\n    '''\n    if 'Slovenian' in list_cuisines:\n        list_cuisines.remove('Slovenian')\n        list_cuisines.append('Slovakia')\n    return list_cuisines\n\ndf['Cuisine Style'][df.City == 'Bratislava'] = df['Cuisine Style'][df.City == 'Bratislava'].apply(Slovakia)","8bfefe83":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0441 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043b-\u0432\u0430 \u0440\u0430\u0437 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445:\ndict_cuisines = {}\nfor cuisines in df['Cuisine Style']:\n    for cuisine in cuisines:\n        dict_cuisines[cuisine] = dict_cuisines.get(cuisine, 0) + 1\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0431\u043e\u043b\u0435\u0435 100 \u0440\u0430\u0437:\nlist_top_cuisines = []\nfor cuisine, numbers in dict_cuisines.items():\n    if numbers > 100:\n        list_top_cuisines.append(cuisine)\nprint('\u041a\u043e\u043b-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0431\u043e\u043b\u0435\u0435 100 \u0440\u0430\u0437: ', len(list_top_cuisines), sorted(list_top_cuisines))","27358fb4":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0442\u0440\u0438 \u0432\u0438\u0434\u0430 \u043a\u0443\u0445\u043d\u0438 \u0443\u0445\u0443\u0434\u0448\u0430\u044e\u0449\u0438\u0445 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 (\u0432\u044b\u044f\u0432\u0438\u043b \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 MAE \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c):\nlist_top_cuisines.remove('Vegetarian Friendly')\nlist_top_cuisines.remove('Mediterranean')\nlist_top_cuisines.remove('Cafe')\nlen(list_top_cuisines)","dd5c6e37":"def top_cuisine(list_cuis):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0434\u043e \u0442\u043e\u043f-\u0441\u043f\u0438\u0441\u043a\u0430 (\u043e\u0442 100 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439) \u043f\u0443\u0442\u0451\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e 'other'.\n    '''\n    if len(set(list_cuis) - set(list_top_cuisines)) > 0:\n        res = set(list_top_cuisines) & set(list_cuis)\n        res.add('other')\n    else:\n        res = set(list_top_cuisines) & set(list_cuis)\n    return list(res)\n\ndf['Cuisine Style'] = df['Cuisine Style'].apply(top_cuisine)","375f752f":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c ['City']:\n\n# \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u0441\u0442\u0430\u0442\u0443\u0441 \u0433\u043e\u0440\u043e\u0434\u0430: [1-\u0441\u0442\u043e\u043b\u0438\u0446\u0430, 0-\u043f\u0440\u043e\u0432\u0438\u043d\u0446\u0438\u044f]:\ncapital = {'Paris': 1, 'Stockholm': 1, 'London': 1, 'Berlin': 1, 'Munich': 0, 'Oporto': 0, 'Milan': 0,\n           'Bratislava': 1, 'Vienna': 1, 'Rome': 1, 'Barcelona': 0, 'Madrid': 0, 'Dublin': 1,\n           'Brussels': 1, 'Zurich': 1, 'Warsaw': 1, 'Budapest': 1, 'Copenhagen': 1, 'Amsterdam': 1,\n           'Lyon': 0, 'Hamburg': 0, 'Lisbon': 1, 'Prague': 1, 'Oslo': 1, 'Helsinki': 1, 'Edinburgh': 0,\n           'Geneva': 1, 'Ljubljana': 1, 'Athens': 1, 'Luxembourg': 1, 'Krakow': 0}\ndf['capital'] = df['City'].map(capital)\n\n# \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f, \u0433\u0434\u0435: [5 - \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0438\u0439, 1 - \u043e\u0447\u0435\u043d\u044c \u043d\u0438\u0437\u043a\u0438\u0439]:\nincome_person = {'Paris': 3, 'Stockholm': 4, 'London': 4, 'Berlin': 4, 'Munich': 3, 'Oporto': 2, 'Milan': 3,\n                'Bratislava': 1, 'Vienna': 4, 'Rome': 3, 'Barcelona': 2, 'Madrid': 3, 'Dublin': 3,\n                'Brussels': 5, 'Zurich': 5, 'Warsaw': 3, 'Budapest': 3, 'Copenhagen': 4, 'Amsterdam': 4,\n                'Lyon': 2, 'Hamburg': 3, 'Lisbon': 3, 'Prague': 3, 'Oslo': 4, 'Helsinki': 3, 'Edinburgh': 3,\n                'Geneva': 5, 'Ljubljana': 1, 'Athens': 2, 'Luxembourg': 5, 'Krakow': 2}\ndf['income_person'] = df['City'].map(income_person)\n\n# \u0442\u0440\u0435\u0442\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f:\npopulation_norm = {'Paris': 0.2190, 'Stockholm': 0.0845, 'London': 1, 'Berlin': 0.3933, 'Munich': 0.14334,\n               'Oporto': 0, 'Milan': 0.1332, 'Bratislava': 0.0229, 'Vienna': 0.1929, 'Rome': 0.2926,\n               'Barcelona': 0.16351, 'Madrid': 0.35499, 'Dublin': 0.1072, 'Brussels': 0.11172, 'Zurich': 0.02190,\n               'Warsaw': 0.17834, 'Budapest': 0.17337, 'Copenhagen': 0.06377, 'Amsterdam': 0.07280,\n               'Lyon': 0.03192, 'Hamburg': 0.18426, 'Lisbon': 0.03084, 'Prague': 0.12579, 'Oslo': 0.05265,\n               'Helsinki': 0.04798, 'Edinburgh': 0.03089, 'Geneva': 0.02967, 'Ljubljana': 0.03106,\n               'Athens': 0.04793, 'Luxembourg': 0.0445, 'Krakow': 0.0620}\ndf['population_norm'] = df['City'].map(population_norm)\n\n# \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u0430\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430:\naver_temperature = {'Paris': 12.3, 'Stockholm': 6.6, 'London': 10.3, 'Berlin': 10.3, 'Munich': 10,\n               'Oporto': 17, 'Milan': 15, 'Bratislava': 10.5, 'Vienna': 10.4, 'Rome': 15.2,\n               'Barcelona': 18.2, 'Madrid': 18, 'Dublin': 9.8, 'Brussels': 10.5, 'Zurich': 9.3,\n               'Warsaw': 8.5, 'Budapest': 11.3, 'Copenhagen': 9.1, 'Amsterdam': 10.2,\n               'Lyon': 12, 'Hamburg': 10, 'Lisbon': 17.5, 'Prague': 8.4, 'Oslo': 4.3,\n               'Helsinki': 5.9, 'Edinburgh': 9, 'Geneva': 9, 'Ljubljana': 10.5,\n               'Athens': 15, 'Luxembourg': 9, 'Krakow': 8.5}\ndf['aver_temperature'] = df['City'].map(aver_temperature)\n\n# \u043f\u044f\u0442\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043a\u043e\u043b-\u0432\u043e \u0432\u0435\u0433\u0430\u043d\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 1\u043c\u043b\u043d \u0436\u0438\u0442\u0435\u043b\u0435\u0439:\nvegan_koef = {'Paris': 4.9, 'Stockholm': 8.7, 'London': 17, 'Berlin': 12.5, 'Munich': 12.5,\n               'Oporto': 10.5, 'Milan': 9.4, 'Bratislava': 4.8, 'Vienna': 16.9, 'Rome': 9.4,\n               'Barcelona': 10.1, 'Madrid': 10.1, 'Dublin': 23.3, 'Brussels': 7.4, 'Zurich': 15.5,\n               'Warsaw': 3.6, 'Budapest': 6.4, 'Copenhagen': 8.9, 'Amsterdam': 13.9,\n               'Lyon': 4.9, 'Hamburg': 12.5, 'Lisbon': 10.5, 'Prague': 11.1, 'Oslo': 9.7,\n               'Helsinki': 12.5, 'Edinburgh': 17, 'Geneva': 15.5, 'Ljubljana': 18,\n               'Athens': 3.6, 'Luxembourg': 31.3, 'Krakow': 3.6}\ndf['vegan_koef'] = df['City'].map(vegan_koef)","0d2563db":"def str_to_list(Review):\n    '''\n    \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 Review, -\n    \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437: 1) \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438;\n                 2) \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438.\n    '''\n    if Review == '[[], []]':\n        new_list = [['', ''], ['', '']]\n    else:\n        list_1 = Review[3:-3].split('], [\\'')\n        if '\\', ' not in list_1[0]:\n            new_list = [[list_1[0][:-1], ''], [list_1[1][-10:], '']]\n        else:\n            list_1_0 = list_1[0].split('\\', ')\n            list_1_1 = list_1[1].split('\\', \\'')\n            new_list = [[list_1_0[0], list_1_0[1][1:-1]], [list_1_1[0][-10:], list_1_1[1][-10:]]]\n    return new_list\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Review \u0432 \u0441\u043f\u0438\u0441\u043e\u043a:\ndf.Reviews.fillna('[[], []]', inplace=True)\ndf.Reviews = df.Reviews.apply(str_to_list)\n\n# \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u044b \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 'datetime':\ndf['date_1'] = df.Reviews.apply(lambda x: x[1][0])\ndf['date_2'] = df.Reviews.apply(lambda x: x[1][1])\ndf.date_1 = df.date_1.apply(pd.to_datetime)\ndf.date_2 = df.date_2.apply(pd.to_datetime)\n\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u0442\u0440\u0430\u0438\u044f:\nlast_date = max(df.date_1.max(), df.date_2.max())\nlast_date","525382fc":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0432 \u0434\u043d\u044f\u0445, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f) \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442:\ndf['Review_1_days'] = last_date - df['date_1']\ndf['Review_1_days'] = df.Review_1_days.apply(lambda x: str(x)[:-14])\ndf['Review_1_days'] = df.Review_1_days.apply(lambda x: int(x) if x != '' else np.nan)\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0432 \u0434\u043d\u044f\u0445, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f) \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442:\ndf['Review_2_days'] = last_date - df['date_2']\ndf['Review_2_days'] = df.Review_2_days.apply(lambda x: str(x)[:-14])\ndf['Review_2_days'] = df.Review_2_days.apply(lambda x: int(x) if x != '' else np.nan)\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438:\ndf['review_delta'] = abs(df['Review_2_days'] - df['Review_1_days'])\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c:\ndf.review_delta.fillna(df['review_delta'].mean(), inplace=True)\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043a\u0430\u043a \u0434\u0430\u0432\u043d\u043e (\u0432 \u0434\u043d\u044f\u0445) \u0431\u044b\u043b \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439:\ndf['review_days'] = df[['Review_1_days', 'Review_2_days']].min(axis=1)\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c:\ndf.review_days.fillna(df['review_days'].mean(), inplace=True)\n\ndf.drop(['date_1'], axis=1, inplace=True)\ndf.drop(['date_2'], axis=1, inplace=True)\ndf.drop(['Review_1_days'], axis=1, inplace=True)\ndf.drop(['Review_2_days'], axis=1, inplace=True)","3b590787":"# \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0434\u0432\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430:\ndf['Review_1'] = df.Reviews.apply(lambda x: x[0][0])\ndf['Review_2'] = df.Reviews.apply(lambda x: x[0][1])\ndf.drop(['Reviews'], axis=1, inplace=True)","473b9c2a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043b\u043e\u0432:\npositive_words.shape, negative_words.shape","20e13304":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0441\u0435\u043c \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u043a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442 '+1':\npositive_words['koef'] = 1\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0441\u0435\u043c \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u043a\u043e\u044d\u0444\u0438\u0446\u0438\u0435\u043d\u0442 '-1':\nnegative_words['koef'] = -1\n# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u0434\u0432\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u044d\u0442\u0430 \u0432 \u043e\u0434\u0438\u043d:\nwords_emotion = pd.concat([positive_words, negative_words], ignore_index=True)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u044d\u043c\u043e\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0432:\ndict_emotion_words = dict(words_emotion.values)\nwords_emotion.sample(10)","2d9fbc50":"def split_words(review):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 (\u0441 \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u043d\u044b\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043c \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b)\n    '''\n    return re.split('[^a-z]', review.lower())\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0431\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441\u043b\u043e\u0432:\ndf['Review_1'] = df['Review_1'].apply(split_words)\ndf['Review_2'] = df['Review_2'].apply(split_words)","f065e0f4":"# \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u043e\u043a \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f - \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e MAE\n# df['Review_1_days'].fillna(1, inplace=True)\n# df['Review_1_days'][df['Review_1_days'] < 100] = 1\n# df['Review_1_days'][df['Review_1_days'].between(100, 365)] = 2\n# df['Review_1_days'][df['Review_1_days'].between(366, 1000)] = 4\n# df['Review_1_days'][df['Review_1_days'] > 1000] = 10\n# df['Review_1_days'].plot(kind='hist')\n\n# df['Review_2_days'].fillna(1, inplace=True)\n# df['Review_2_days'][df['Review_2_days'] == 0] = 1\n# df['Review_2_days'][df['Review_2_days'] < 100] = 1\n# df['Review_2_days'][df['Review_2_days'].between(100, 365)] = 2\n# df['Review_2_days'][df['Review_2_days'].between(366, 1000)] = 3\n# df['Review_2_days'][df['Review_2_days'] > 1000] = 4\n# df['Review_2_days'].plot(kind='hist')","da9e751d":"def review_score(review):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 (\u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0443\u044e \u0438\u043b\u0438 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0443\u044e)\n    '''\n    x = 0\n    for word in review:\n        x += dict_emotion_words.get(word, 0)\n    return x\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u0440\u0435\u0436\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b:\ndf['Review_1'] = df['Review_1'].map(review_score)\ndf['Review_1'][df['Review_1'] < -3] = -3\ndf['Review_1'][df['Review_1'] > 4] = 4\n\n# \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 - \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e MAE\ndf.drop(['Review_2'], axis=1, inplace=True)\n\ndf.Review_1.value_counts()","2e52fe7e":"df.Review_1.plot(kind='hist', bins=7)","dee2355b":"# \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430:\ndf.rename({'Price Range': 'Price'}, axis=1, inplace=True)\nprice = {'$': 1, '$$ - $$$': 2, '$$$$': 3}\ndf['Price'] = df['Price'].map(price)\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\ndf['Price_nan'] = df['Price'].isna().astype('uint8')\n\n# df['Price'][df['Price'].isna()] = 0\ndf.Price.value_counts()","90cf3086":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\ndf.groupby(['City'])['Price'].median()","362d5458":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u041c\u041e\u0414\u0415\u041b\u042c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f Price.\n# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 'Price_nan'.\ntrain_price = df.query('Price_nan == 0').drop(['Price_nan'], axis=1)\ntest_price = df.query('Price_nan == 1').drop(['Price_nan'], axis=1)\n\ny = train_price.Price.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_price.drop(['Price', 'Rating', 'City', 'sample', 'Restaurant_id', 'Cuisine Style', 'URL_TA'], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=RANDOM_SEED)\n\nprint('train_price.shape: ', train_price.shape)\nprint('---------')\nprint('X.shape: ', X.shape)\nprint('X_train.shape: ', X_train.shape)\nprint('X_test.shape: ', X_test.shape)\nprint('---------')\nprint('y.shape: ', y.shape)\nprint('y_train.shape: ', y_train.shape)\nprint('y_test.shape: ', y_test.shape)\nprint('---------')\nprint('test_price.shape: ', test_price.shape)","174b03db":"model_price = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\nmodel_price.fit(X_train, y_train)\ny_pred = model_price.predict(X_test)\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","3bf82892":"Z = test_price.drop(['Price', 'Rating', 'City', 'sample', 'Restaurant_id', 'Cuisine Style', 'URL_TA'], axis=1)  \ny_res = model_price.predict(Z)\ndf.Price[df['Price'].isna()] = y_res","2a1df977":"plt.rcParams['figure.figsize'] = (16,12)\nsns.heatmap(df[df['sample'] == 1].drop(['sample'], axis=1).corr(), cmap='coolwarm', annot=True)","11a10edf":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u043d\u0433 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0439\u0441\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b:\nnp.linalg.matrix_rank(df.drop(['Restaurant_id', 'URL_TA', 'City', 'Cuisine Style'], axis=1))","b680c474":"df.info()","4b5d9b6b":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c dummy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\ndf = pd.get_dummies(df, columns=['City'], dummy_na=True)\n# df.drop(['City'], axis=1, inplace=True)\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 'Cuisine Style' \u0432 Dummy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\ndf = pd.concat([df, pd.get_dummies(df['Cuisine Style'].apply(pd.Series).stack()).groupby(level=0).sum()], axis=1)\ndf.drop(['Cuisine Style'], axis=1, inplace=True)\ndf.drop(['City_nan'], axis=1, inplace=True)","981e8856":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating', 'Restaurant_id', 'URL_TA'], axis=1)\n\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\nprint('train_data.shape: ', train_data.shape)\nprint('---------')\nprint('X.shape: ', X.shape)\nprint('X_train.shape: ', X_train.shape)\nprint('X_test.shape: ', X_test.shape)\nprint('---------')\nprint('y.shape: ', y.shape)\nprint('y_train.shape: ', y_train.shape)\nprint('y_test.shape: ', y_test.shape)\nprint('---------')\nprint('test_data.shape: ', test_data.shape)","1ae6da1b":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0447\u0435\u0439-\u0442\u043e \u0433\u0435\u043d\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u044b\u0441\u043b\u044c\u044e \u0438 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e 0,5!\ny_pred = np.round(model.predict(X_test)*2) \/ 2","07e5e1c7":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","c26c6dc7":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')","d132d26b":"test_data.sample(5)","5a85615d":"test_data = test_data.drop(['Rating', 'Restaurant_id', 'URL_TA'], axis=1)","27ba762c":"sample_submission","b285d1a4":"predict_submission = np.round(model.predict(test_data)*2) \/ 2","37f56e7d":"predict_submission","79750e8e":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","e7ece9c7":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","22ff0c2d":"# 'Price Range'  -->  'Price'","b23a83cf":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","abf84734":"# DATA","739f5932":"# 'Number of Reviews'","ec1a6b56":"# 'Restaurant_id'","035ad3ff":"# Model ","ceb9bea2":"# \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438","ad10d1ee":"# 'Ranking'","a4889034":"\u041c\u0438\u043d\u041c\u0430\u043a\u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e MAE.","f0cdba9e":"# Dummy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","a29bfc86":"# 'City'","85466959":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 id_227 - \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0430\u043d\u0433 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432: Ranking=228 (sample=1), \u043a\u0440\u043e\u043c\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b (Ranking=3208, sample=0).\n\u041e\u0442 \u0441\u044e\u0434\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u043e\u0434 id_227 - \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u044b \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0435 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (\u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c), \u0430 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0435 Ranking=228 \u043f\u043e \u0441\u0432\u043e\u0435\u043c\u0443 \u0433\u043e\u0440\u043e\u0434\u0443.\n\u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Ranking - \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","727ee739":"# 'Reviews'","8fcda176":"# 'Cuisine Style'","665ac12b":"# import","ac0e483c":"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 Ranking \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - 16444, \u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 - 16443. \u0427\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u043e\u043d \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043d\u0435 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0433\u043e\u0440\u043e\u0434\u0443, - \u0430 \u0432\u0438\u0434\u0438\u043c\u043e \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0430\u043a\u0440\u043e\u0440\u0435\u0433\u0438\u043e\u043d\u0443 (\u0415\u0432\u0440\u043e\u043f\u0430).","40118473":"# **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","76cb4f7c":"# 'ID_TA'","0f2169d2":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","a63ee1b9":"\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u0435\u043c \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043d\u043c\u0435\u043d\u043d\u0443\u044e (\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043e\u043a\u043e\u043b\u043e \u043d\u0443\u043b\u044f) \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0435\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 ('income_person', 'vegan_koef', 'ID_TA_num') - \u043d\u0435 \u043f\u0440\u0438\u0432\u0438\u043b\u0430 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e MAE."}}