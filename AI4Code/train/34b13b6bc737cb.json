{"cell_type":{"8e7ba1d1":"code","8b67afc0":"code","3888df85":"code","5cf05bb6":"code","d4d311fc":"code","4f356b12":"code","0c21203e":"code","4f75926a":"code","bcf320a5":"code","c43d74cf":"code","02568e06":"code","f7fbff1d":"code","7de01a20":"code","cd8293b5":"code","ae845191":"code","9188e8c5":"code","7dadf25c":"code","185f8b02":"code","d14983e5":"code","26e561b5":"code","e377c6b2":"code","6917a765":"code","d931815f":"code","28d138c6":"code","00ee55bf":"code","6ecda1d1":"code","9c482128":"code","a2603187":"markdown","6a8bfc87":"markdown","2b811f66":"markdown","0c662c56":"markdown","80d1b8b2":"markdown","ae6ca222":"markdown","fab84b89":"markdown","3ff3aa9b":"markdown","e5165027":"markdown","d13f7ca3":"markdown","e7a6713d":"markdown","8a11e7c4":"markdown","4da4cecd":"markdown"},"source":{"8e7ba1d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting library\nimport seaborn as sns # better looking graphs\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%matplotlib inline\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b67afc0":"# Reading the data\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_train.head()","3888df85":"df_train.columns","5cf05bb6":"plt.figure(figsize=(20,8))\nsns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","d4d311fc":"df_train['Alley'].fillna(value='No alley access',inplace=True)\ndf_train['BsmtQual'].fillna(value='No Basement',inplace=True)\ndf_train['BsmtCond'].fillna(value='No Basement',inplace=True)\ndf_train['BsmtExposure'].fillna(value='No Basement',inplace=True)\ndf_train['BsmtFinType1'].fillna(value='No Basement',inplace=True)\ndf_train['BsmtFinType2'].fillna(value='No Basement',inplace=True)\ndf_train['FireplaceQu'].fillna(value='No Fireplace',inplace=True)\ndf_train['GarageType'].fillna(value='No Garage',inplace=True)\ndf_train['GarageYrBlt'].fillna(value=0,inplace=True)\ndf_train['GarageFinish'].fillna(value='No Garage',inplace=True)\ndf_train['GarageQual'].fillna(value='No Garage',inplace=True)\ndf_train['GarageCond'].fillna(value='No Garage',inplace=True)\ndf_train['MasVnrType'].fillna(value='None',inplace=True)\ndf_train['MasVnrArea'].fillna(value=0.0,inplace=True)\ndf_train['PoolQC'].fillna(value='No Pool',inplace=True)\ndf_train['Fence'].fillna(value='No Fence',inplace=True)\ndf_train['MiscFeature'].fillna(value='None',inplace=True)\n\nplt.figure(figsize=(20,8))\nsns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","4f356b12":"plt.figure(figsize=(20,8))\nsns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","0c21203e":"df_test['Alley'].fillna(value='No alley access',inplace=True)\ndf_test['BsmtQual'].fillna(value='No Basement',inplace=True)\ndf_test['BsmtCond'].fillna(value='No Basement',inplace=True)\ndf_test['BsmtExposure'].fillna(value='No Basement',inplace=True)\ndf_test['BsmtFinType1'].fillna(value='No Basement',inplace=True)\ndf_test['BsmtFinType2'].fillna(value='No Basement',inplace=True)\ndf_test['FireplaceQu'].fillna(value='No Fireplace',inplace=True)\ndf_test['GarageType'].fillna(value='No Garage',inplace=True)\ndf_test['GarageYrBlt'].fillna(value=0,inplace=True)\ndf_test['GarageFinish'].fillna(value='No Garage',inplace=True)\ndf_test['GarageQual'].fillna(value='No Garage',inplace=True)\ndf_test['GarageCond'].fillna(value='No Garage',inplace=True)\ndf_test['MasVnrType'].fillna(value='None',inplace=True)\ndf_test['MasVnrArea'].fillna(value=0.0,inplace=True)\ndf_test['PoolQC'].fillna(value='No Pool',inplace=True)\ndf_test['Fence'].fillna(value='No Fence',inplace=True)\ndf_test['MiscFeature'].fillna(value='None',inplace=True)\ndf_test['GarageCars'].fillna(value=0,inplace=True)\ndf_test['GarageArea'].fillna(value=0,inplace=True)\ndf_test['TotalBsmtSF'].fillna(value=0,inplace=True)\ndf_test['BsmtFinSF1'].fillna(value=0,inplace=True)\n\nplt.figure(figsize=(20,8))\nsns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","4f75926a":"df_test.isnull().sum().sort_values(ascending=False).head(15)","bcf320a5":"Categorical_features = df_train.select_dtypes(include=['object'])\nNumerical_features = df_train.select_dtypes(exclude=['object'])","c43d74cf":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)\nplt.show()","02568e06":"corr = df_train.corr()\ncorr[corr['SalePrice']>0.3].index","f7fbff1d":"#scatterplot\nsns.set()\ncols=['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n       'WoodDeckSF', 'OpenPorchSF', 'SalePrice']\n#cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\n#cols=['SalePrice','MSSubClass','LotArea','YearBuilt','YrSold','1stFlrSF','2ndFlrSF','PoolArea','FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nsns.pairplot(df_train[cols])\nplt.show()","7de01a20":"f,ax=plt.subplots(3,6,figsize=(20,10))\nk=0\nfor i in range(3):\n    for j in range(6):\n        sns.scatterplot(df_train[cols[k]],df_train['SalePrice'],ax=ax[i,j])\n        plt.xlabel(cols[k])\n        k=k+1\nf.tight_layout()\nplt.show()","cd8293b5":"cols=['LotFrontage', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n       'WoodDeckSF', 'OpenPorchSF']\n\nf,ax=plt.subplots(8,2,figsize=(20,30))\nk=0\nfor i in range(8):\n    for j in range(2):\n        sns.scatterplot(df_train[cols[k]],df_train['SalePrice'],hue=df_train['OverallQual'],ax=ax[i,j])\n        plt.legend(loc='best')\n        k=k+1\n\nf.tight_layout()\nplt.show()","ae845191":"from sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\n\nfeature=['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n       'WoodDeckSF', 'OpenPorchSF']\n\ny=df_train['SalePrice']\nX=df_train[feature]\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8,random_state=42)","9188e8c5":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression()\nLR.fit(X_train,y_train)\npreds = LR.predict(X_valid)\n\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_valid, preds)))","7dadf25c":"plt.figure(figsize=(15,8))\nplt.scatter(y_valid,preds)\nplt.xlabel('Y_valid sales price')\nplt.ylabel('Predicted Y sales price')\nplt.show()","185f8b02":"# Fit the model to the training data\nLR.fit(X, y)\n\n# Generate test predictions\npreds_test = LR.predict(df_test[feature])","d14983e5":"output_csv = pd.DataFrame({'Id': df_test.Id, 'SalePrice': preds_test})\noutput_csv.to_csv('linearRe.csv', index=False)\nprint(\"Your submission was successfully saved!\")","26e561b5":"from sklearn.ensemble import RandomForestRegressor\n\n# Define the models\nmodel_1 = RandomForestRegressor(n_estimators=100,random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100,criterion='mae',random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=200,min_samples_split=20,random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=100,max_depth=7,random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4]","e377c6b2":"# Function for comparing different models\ndef score_model(model, X_t=X_train, X_v=X_valid, y_t=y_train, y_v=y_valid):\n    model.fit(X_t, y_t)\n    preds = model.predict(X_v)\n    print(\"Model %d:\" % (i+1))\n    print('RMSE:', np.sqrt(metrics.mean_squared_error(y_v, preds)))\n    return\n\nfor i in range(0, len(models)):\n    mae = score_model(models[i])","6917a765":"model_2.fit(X_train,y_train)\n\n# Generate test predictions\npreds = model_2.predict(X_valid[feature])\n\nplt.figure(figsize=(15,8))\nplt.scatter(y_valid,preds)\nplt.xlabel('Y_valid sales price')\nplt.ylabel('Predicted Y sales price')\nplt.show()","d931815f":"# Fit the model to the training data\nmodel_2.fit(X, y)\n\n# Generate test predictions\npreds_test = model_2.predict(df_test[feature])","28d138c6":"output_csv = pd.DataFrame({'Id': df_test.Id, 'SalePrice': preds_test})\noutput_csv.to_csv('randomforest.csv', index=False)\nprint(\"Your submission was successfully saved!\")","00ee55bf":"from sklearn.ensemble import GradientBoostingRegressor\n\nGBR = GradientBoostingRegressor(n_estimators=100, learning_rate=0.01,max_depth=4, random_state=0, loss='ls')\nGBR.fit(X_train,y_train)\npreds = GBR.predict(X_valid)\n\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_valid, preds)))","6ecda1d1":"plt.figure(figsize=(15,8))\nplt.scatter(y_valid,preds)\nplt.xlabel('Y_valid sales price')\nplt.ylabel('Predicted Y sales price')\nplt.show()","9c482128":"# Fit the model to the training data\nGBR.fit(X, y)\n\n# Generate test predictions\npreds_test = GBR.predict(df_test[feature])\n\noutput_csv = pd.DataFrame({'Id': df_test.Id, 'SalePrice': preds_test})\noutput_csv.to_csv('GBR.csv', index=False)\nprint(\"Your submission was successfully saved!\")","a2603187":"# **Trying to fill in the missing data**","6a8bfc87":"# **Gradient Tree Boosting**","2b811f66":"# **Using Linear Regression**\n\nLets see if using linear regression on these relationships can give accurate predictions ","0c662c56":"# **The Test train split**\n\nThis test train split of the training data will be used to validate all the models","80d1b8b2":"The pair plot is a bit overwhelming so lets narrow it down and just look at the Sale price relation to the other data.","ae6ca222":"# **Using Random Forest**\n\nWe will compare different settings in the Random forest model to see which works the best","fab84b89":"There seems to some clear relationship between overall quality of the property, sale price other variables","3ff3aa9b":"Overall quality of the property have a big impact on the sale price so lets see if there is a relationship.","e5165027":"# **Looking at house sale information to predict house prices**\n\nWe look at the housing prices dataset and see if we can predict house prices","d13f7ca3":"# **Looking at the data distribution**\n\nLets look if there is any clear correlation in the data","e7a6713d":"As predicting sale price of the houses is our aim lets look at areas where we see clear correlation","8a11e7c4":"Pretty linear relation so we have headed in the right direction.","4da4cecd":"Not that linear of a relation but its a good start"}}