{"cell_type":{"bf1a5b8b":"code","06df867d":"code","a6613154":"code","676ba3f8":"code","7280021e":"code","cdbec0c4":"code","57db1435":"code","6c93624e":"code","4cfc1df0":"code","d19f262e":"code","70258100":"code","f6eb4bd7":"code","b354f8e1":"code","0fe9b782":"code","168c6a91":"code","e4b5d9b7":"code","5994b359":"code","7e4245c6":"code","8ff788e6":"code","069701c1":"code","3b522fa8":"code","1ffe1115":"code","85e662c5":"code","865ab03d":"code","5a37d360":"code","b7d3e610":"code","a574f3dc":"code","3ee70175":"code","23e988e5":"code","c62d0cad":"code","8c4961b9":"code","bbaad05d":"markdown","968c0766":"markdown","5fdabfdb":"markdown","05b375e0":"markdown","4aa25e80":"markdown"},"source":{"bf1a5b8b":"FROM_BLOCK_TIMESTAMP = \"'2018-11-02 00:00:00'\" # deploy\n# FROM_BLOCK_TIMESTAMP = \"'2019-08-25 23:59:59'\" # test\nTO_BLOCK_TIMESTAMP = \"'2020-03-20 23:59:59'\" \n# TO_BLOCK_TIMESTAMP = \"'2018-12-30 00:00:00'\" #test\nMY_TIMEOUT = 300\n\n# relevant Events signatures\n\nevents_signatures = {\n    'TokenPurchase': 'TokenPurchase(address,uint256,uint256)', #event({buyer: indexed(address), eth_sold: indexed(uint256(wei)), tokens_bought: indexed(uint256)})\n    'EthPurchase': 'EthPurchase(address,uint256,uint256',#,event({buyer: indexed(address), tokens_sold: indexed(uint256), eth_bought: indexed(uint256(wei))})\n    'AddLiquidity': 'AddLiquidity(address,uint256,uint256)',#,event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\n    'RemoveLiquidity': 'RemoveLiquidity(address,uint256,uint256)',#,event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\n    'Transfer': 'Transfer(address,address,uint256)',#,event({_from: indexed(address), _to: indexed(address), _value: uint256})\n    'Approval': 'Approval(address,address,uint256)'#,event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\n}\nevents_hashes = {\n    'cd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f': 'TokenPurchase',\n    '7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b353984238705': 'EthPurchase',\n    '06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca': 'AddLiquidity',\n    '0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8': 'RemoveLiquidity',\n    'ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': 'Transfer',\n    '8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': 'Approval'\n}\ncontracts = {\n    '0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14'.lower(): 'SAI'\n}\ncontracts","06df867d":"from google.cloud import bigquery\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('max_colwidth', 70)","a6613154":"#events = pd.read_pickle('ck-data\/events_4605167-to-5374870.pickle.gz')\nclient = bigquery.Client()\nquery = \"\"\"\nSELECT \n  events.transaction_hash AS transactionHash,\n  events.transaction_index,\n  txns.from_address AS transaction_sender, \n  events.address,\n  events.data,\n  events.topics,\n  events.block_timestamp,\n  events.block_number AS blockNumber_dec\nFROM\n  `bigquery-public-data.crypto_ethereum.logs` AS events\nINNER JOIN\n  `bigquery-public-data.crypto_ethereum.transactions` AS txns\nON\n  events.transaction_hash = txns.hash\nWHERE TRUE\n  AND events.block_timestamp >= {from_block_ts} \n  AND events.block_timestamp <= {to_block_ts}\n  AND txns.block_timestamp >= {from_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND txns.block_timestamp <= {to_block_ts} --might seem redundant, but because of partitioning this reduces cost\n  AND events.address IN ({contract_list})\n\"\"\".format(\n    from_block_ts=FROM_BLOCK_TIMESTAMP, \n    to_block_ts=TO_BLOCK_TIMESTAMP, \n    contract_list=(','.join([\"'{}'\".format(k) for k in list(contracts.keys())])))\nprint(query)\nquery_job = client.query(query)\niterator = query_job.result(timeout=MY_TIMEOUT)\nrows = list(iterator)\nevents = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nevents['contract'] = events['address'].apply(lambda x: contracts[x])\nevents['event'] = events['topics'].apply(lambda x: events_hashes[x[0][2:]])\nevents = events.sort_values(['blockNumber_dec','transaction_index']).reset_index(drop=True)\nevents.head(10)","676ba3f8":"print('Block range: ' + str(events.blockNumber_dec.min()) + ' to ' + str(events.blockNumber_dec.max()))","7280021e":"events.groupby(['contract','event']).transactionHash.count()","cdbec0c4":"event_counts = events.groupby(['contract','event']).transactionHash.count()\nevent_counts.sort_values().plot(kind='barh', figsize=(8, 6))","57db1435":"event_counts_df = event_counts.reset_index()\nevent_counts_df.columns = ['contract', 'event', 'count']\nevent_counts_df","6c93624e":"events['contract_event'] = events['contract'] + events['event']\nevents['block_group'] = events['blockNumber_dec'].apply(lambda x: int(x\/10000))","4cfc1df0":"areaplot = events.groupby(['block_group','contract_event']).transactionHash.count().reset_index().pivot(index='block_group', columns='contract_event', values='transactionHash')#.plot.area()\nareaplot.plot.area()\nplt.legend(loc=1)","d19f262e":"areaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","70258100":"# events = events[~events.event.isin(['Transfer','Approval'])]\n# events = events.drop('data', axis='columns')","f6eb4bd7":"events['agent'] = '0x' + events['topics'].apply(lambda x: x[1][26:66])","b354f8e1":"def getEthDeltaFromTopics(topics):\n    event_hash = topics[0][2:]\n    if events_hashes[event_hash] == 'TokenPurchase':\n        return int(topics[2],16)\n    if events_hashes[event_hash] == 'EthPurchase':\n        return -int(topics[3],16)\n    if events_hashes[event_hash] == 'AddLiquidity':\n        return int(topics[2],16)\n    if events_hashes[event_hash] == 'RemoveLiquidity':\n        return -int(topics[2],16)\n    return 0\n    \ndef getTokenDeltaFromTopics(topics):\n    event_hash = topics[0][2:]\n    if events_hashes[event_hash] == 'TokenPurchase':\n        return -int(topics[3],16)\n    if events_hashes[event_hash] == 'EthPurchase':\n        return int(topics[2],16)\n    if events_hashes[event_hash] == 'AddLiquidity':\n        return int(topics[3],16)\n    if events_hashes[event_hash] == 'RemoveLiquidity':\n        return -int(topics[3],16)\n    return 0\n    \ndef getUNIDeltaFromTopics(topics):\n    event_hash = topics[0][2:]\n    if events_hashes[event_hash] == 'Transfer':\n        if topics[1] == '0x0000000000000000000000000000000000000000000000000000000000000000':\n            return 1\n        if topics[2] == '0x0000000000000000000000000000000000000000000000000000000000000000':\n            return -1\n    return 0\n    \ndef getTradingVolumeFromTopics(topics):\n    event_hash = topics[0][2:]\n    if events_hashes[event_hash] == 'TokenPurchase':\n        return int(topics[2],16)\n    if events_hashes[event_hash] == 'EthPurchase':\n        return int(topics[3],16)\n    return 0\n    \nevents['eth_delta'] = events['topics'].apply(getEthDeltaFromTopics)\nevents['token_delta'] = events['topics'].apply(getTokenDeltaFromTopics)\n\nevents['uni_delta'] = events['data'].apply(lambda x: 0 if x == '0x' else int(x,16))\nevents['uni_delta'] = events['uni_delta'] * events['topics'].apply(getUNIDeltaFromTopics)\n\nevents['eth_balance'] = events['eth_delta'].cumsum()\nevents['token_balance'] = events['token_delta'].cumsum()\nevents['UNI_supply'] = events['uni_delta'].cumsum()\nevents['invariant'] = events['eth_balance']*events['token_balance']\nevents.to_pickle('uniswap_events.pickle')\nevents.head()","0fe9b782":"trades = events[events.event.isin(['TokenPurchase','EthPurchase'])].copy()\ntrades['trading_volume'] = abs(trades['eth_delta'])","168c6a91":"trades.groupby(['agent']).size().to_frame().rename(columns={0:'n_trades'}).hist(bins=300)","e4b5d9b7":"trades = trades.join(trades.groupby(['agent']).size().to_frame().rename(columns={0:'n_trades'}), on='agent')","5994b359":"volume_frequency = trades.groupby(['n_trades']).trading_volume.sum()#.sort_values(ascending=False)\nvolume_frequency = volume_frequency.reset_index()\nvolume_frequency['trading_volume'] = volume_frequency['trading_volume'].astype(float)\nvolume_frequency.plot.scatter(x='n_trades', y='trading_volume')","7e4245c6":"topVolTraders = trades.groupby(['agent']).trading_volume.sum().sort_values(ascending=False)\ntopVolTraders = set(topVolTraders.head(20).index.values)","8ff788e6":"trades['agent_class_vol'] = trades['agent'].apply(lambda x: '1- Top Volume Trader' \\\n                                                if x in topVolTraders \\\n                                                else '2- Other')\ntrades['agent_class_freq'] = trades['n_trades'].apply(lambda x: '1- 200+' \\\n                                                if x>=200 \\\n                                                else '2- 10-199' if x>=10 \\\n                                                else '3- <10')","069701c1":"areaplot = trades.groupby(['block_group','agent_class_vol']).trading_volume.sum().reset_index().pivot(index='block_group', columns='agent_class_vol', values='trading_volume')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","3b522fa8":"areaplot = trades.groupby(['block_group','agent_class_freq']).trading_volume.sum().reset_index().pivot(index='block_group', columns='agent_class_freq', values='trading_volume')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","1ffe1115":"trades['isRound'] = (((trades['eth_delta']%1e15)==0) | ((trades['token_delta']%1e15)==0))\ntrades['isRound'] = trades['isRound'].apply(lambda x: 'Round Trade' if x else 'Not Round')","85e662c5":"areaplot = trades.groupby(['block_group','isRound']).trading_volume.sum().reset_index().pivot(index='block_group', columns='isRound', values='trading_volume')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","865ab03d":"trades['isDirect'] = trades['transaction_sender']==trades['agent']\ntrades['isDirect'] = trades['isDirect'].apply(lambda x: '2- Traded directly' if x else '1- Traded via proxy')","5a37d360":"areaplot = trades.groupby(['block_group','isDirect']).trading_volume.sum().reset_index().pivot(index='block_group', columns='isDirect', values='trading_volume')\nareaplot.divide(areaplot.sum(axis=1), axis=0).plot.area(figsize=(16, 9))\nplt.legend(loc=1)","b7d3e610":"real_history = events.iloc[1:][['block_timestamp','token_balance','eth_balance','UNI_supply']].reset_index(drop=True)\nreal_history.columns = ['timestamp','real_DAI_balance', 'real_ETH_balance', 'real_UNI_supply']\nfreq = 'D'\nplot_data = real_history.copy()\nplot_data.columns = ['timestamp','DAI_balance','ETH_balance','UNI_supply']\nplot_data[['DAI_balance','ETH_balance','UNI_supply']] = plot_data[['DAI_balance','ETH_balance','UNI_supply']]*1E-18\nplot_data['ts_minute'] = plot_data['timestamp'].apply(lambda x: x.floor(freq))\nplot_data = plot_data.drop_duplicates('ts_minute', keep='last')\nplot_data.index = plot_data.ts_minute#,format='%Y-%m')\nplot_data = plot_data.resample(freq).pad()\nplot_data['ts_minute'] = plot_data.index\n# plot_data['ts_minute'] = plot_data['ts_minute'].apply(lambda x: x.date())\nplot_data = plot_data.drop('timestamp', axis='columns')\nplot_data = plot_data.reset_index(drop=True)\nplot_data['ETH_price_DAI'] = plot_data['DAI_balance'] \/ plot_data['ETH_balance']\nplot_data['UNI_price_DAI'] = 2 * plot_data['DAI_balance'] \/ plot_data['UNI_supply']\nplot_data['50_50_hodler_value'] = 0.5 * plot_data['ETH_price_DAI'][0] + 0.5 * plot_data['ETH_price_DAI']\nplot_data['50_50_hodler_return'] = plot_data['50_50_hodler_value']\/plot_data['50_50_hodler_value'][0] - 1\nplot_data['UNI_hodler_return'] = plot_data['UNI_price_DAI']\/plot_data['UNI_price_DAI'][0] - 1\nplot_data['ETH_hodler_return'] = plot_data['ETH_price_DAI']\/plot_data['ETH_price_DAI'][0] - 1\nplot_data","a574f3dc":"# %%capture --no-display cell_capture\n#avoid warnings in cell output\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom IPython.display import HTML\nfrom matplotlib import animation, rc\nrc('animation', html='jshtml', embed_limit=50)\nfrom matplotlib import cm\nimport matplotlib.ticker as ticker\n\n\n\nfig, axs = plt.subplots(ncols=4, nrows=3,\n                       figsize=(15,9),\n                       gridspec_kw = {'hspace':0.4})\n\n#grid setup\ngs = axs[0, 0].get_gridspec()\n# remove the underlying axes\nfor ax in axs[0:, 0:-1]:\n    for i in ax:\n        i.remove()\naxbig = fig.add_subplot(gs[0:, 0:-1])\nax1 =  axs[0][3]\nax2 =  axs[1][3]\nax3 =  axs[2][3]\n\nplt.close()\naxbig_colors=cm.Paired.colors\n\nxlim = float(max(plot_data['DAI_balance'])*1.3)\nylim = float(max(plot_data['ETH_balance'])*1.3)\n\nax1_ylim = max(plot_data['UNI_supply'])*1.1\nax2_ylim_t = max(max(plot_data['ETH_hodler_return']),max(plot_data['UNI_hodler_return']),max(plot_data['50_50_hodler_return']))*1.1\nax2_ylim_b = min(min(plot_data['ETH_hodler_return']),min(plot_data['UNI_hodler_return']),min(plot_data['50_50_hodler_return']))*1.1\nax3_ylim_t = 0\nax3_ylim_b = 0\nfor i in range(len(plot_data)):\n    y1 = plot_data.iloc[i]['UNI_price_DAI'] \/ plot_data.iloc[:i+1]['UNI_price_DAI'].astype(float)\n    y2 = plot_data.iloc[i]['50_50_hodler_value'] \/ plot_data.iloc[:i+1]['50_50_hodler_value'].astype(float)\n#     y1 = y1 ** (365\/(i+1)) #for annualized returns\n#     y2 = y2 ** (365\/(i+1))\n    y = y1\/y2-1\n    ax3_ylim_t = max(ax3_ylim_t,max(y))\n    ax3_ylim_b = min(ax3_ylim_b,min(y))\nax3_ylim_t = ax3_ylim_t * 1.1\nax3_ylim_b = ax3_ylim_b * 1.1\n\ndef animate(i):\n    axbig.clear()\n    ax1.clear()\n    ax2.clear()\n    ax3.clear()\n    a = plot_data.iloc[i]['DAI_balance']\n    b = plot_data.iloc[i]['ETH_balance']\n    k = a * b\n    x = np.arange(a*0.05, xlim+a*0.05, a*0.05)\n    y = k \/ x\n    axbig.plot(x,y,color=axbig_colors[0])\n    axbig.plot(float(a),float(b),color=axbig_colors[1],marker='o')\n    axbig.fill([0,0,float(a),float(a)],\n            [0,float(b),float(b),0],\n            color=axbig_colors[2])\n    axbig.plot([0,float(a)],[0,float(b)],color=axbig_colors[3])\n    axbig.set_xlim(left=0, right=xlim)\n    axbig.set_ylim(bottom=0, top=ylim)\n    axbig.set_xticks(ticks=[float(a), xlim])\n    axbig.set_yticks(ticks=[float(b), ylim])\n    axbig.set_xlabel('SAI')\n    axbig.set_ylabel('ETH', labelpad=-12)\n    axbig.set_title('ETH and SAI balances')\n    axbig.legend(['bonding curve', \n               'current balance', \n               'A*B = k = {:.2E}'.format(k)],\n             loc=2)\n    labels = axbig.xaxis.get_ticklabels()\n    labels[1].set_horizontalalignment('right')\n    \n    plot_data.iloc[:i+1]['UNI_supply'].astype(float).plot(ax=ax1)\n    ax1.set_xlim(left=0, right=len(plot_data))\n    ax1.set_ylim(bottom=0, top=ax1_ylim)\n    ax1.set_xticks(ticks=[])\n#     ax1.set_xticklabels([plot_data['ts_minute'][i].strftime('%m\/%d\/%Y')])\n    ax1.set_yticks(ticks=[float(plot_data.iloc[i]['UNI_supply']), ax1_ylim])\n    ax1.set_title('UNI supply')\n    ax1.yaxis.tick_right()\n\n    ax2.axhline(0, color='gainsboro')\n    plot_data.iloc[:i+1]['UNI_hodler_return'].astype(float).plot(ax=ax2, label='Liq. Provider')\n    plot_data.iloc[:i+1]['50_50_hodler_return'].astype(float).plot(ax=ax2, label='50\/50 hodler')\n    plot_data.iloc[:i+1]['ETH_hodler_return'].astype(float).plot(ax=ax2, label='ETH hodler')\n    ax2.set_xticks(ticks=[i])\n    ax2.set_xticklabels([plot_data['ts_minute'][i].strftime('%b-%d')])\n    ax2.set_xlim(left=0, right=len(plot_data))\n    ax2.set_ylim(ax2_ylim_b,ax2_ylim_t)\n    ax2.set_yticks([float(plot_data.iloc[i]['50_50_hodler_return']), \n                   float(plot_data.iloc[i]['UNI_hodler_return']),\n                   float(plot_data.iloc[i]['ETH_hodler_return'])])\n    ax2.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1))\n    ax2.yaxis.tick_right()\n    ax2.legend(loc='upper left')\n    ax2.set_title('Strategy Returns')\n\n\n    y1 = plot_data.iloc[i]['UNI_price_DAI'] \/ plot_data.iloc[:i+1]['UNI_price_DAI'].astype(float)\n    y2 = plot_data.iloc[i]['50_50_hodler_value'] \/ plot_data.iloc[:i+1]['50_50_hodler_value'].astype(float)\n#     y1 = y1 ** (365\/(i+1)) ## for annualized returns\n#     y2 = y2 ** (365\/(i+1))\n    y = y1\/y2-1\n    x = plot_data.iloc[:i+1]['ts_minute'].apply(lambda x: x.strftime('%b-%d'))\n    ax3.bar(x=x, height=y)\n    ax3.set_xlim(left=0, right=len(plot_data))\n    ax3.set_ylim(ax3_ylim_b,ax3_ylim_t)\n    ax3.yaxis.tick_right()\n    ax3.xaxis.set_major_locator(plt.MaxNLocator(5))\n    ax3.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1))\n    ax3.set_title('Liq. Provider vs. 50\/50 hodler \\n from Day-0 to {}'.format(\n        plot_data['ts_minute'][i].strftime('%b-%d')\n    ))\n    ax3.xaxis.set_label_text('Day-0')\n    ax3.grid()\n\n\n\n    fig.suptitle('Uniswap ETH-DAI, {}'.format(\n        plot_data['ts_minute'][i].strftime('%Y-%b-%d')\n    ))    ","3ee70175":"# anim = animation.FuncAnimation(fig, animate, np.arange(0, 500), interval=1)\nanim = animation.FuncAnimation(fig, animate, np.arange(0, len(plot_data)), interval=10)","23e988e5":"HTML(anim.to_jshtml())","c62d0cad":"# anim.save('uniswap.gif', writer='imagemagick')","8c4961b9":"# from web3 import Web3\n\n# true = True\n# false = False\n# # copy-pasted ABI from etherscan\n# abi = [{\"name\": \"TokenPurchase\", \"inputs\": [{\"type\": \"address\", \"name\": \"buyer\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"eth_sold\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"tokens_bought\", \"indexed\": true}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"EthPurchase\", \"inputs\": [{\"type\": \"address\", \"name\": \"buyer\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"tokens_sold\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"eth_bought\", \"indexed\": true}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"AddLiquidity\", \"inputs\": [{\"type\": \"address\", \"name\": \"provider\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"eth_amount\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"token_amount\", \"indexed\": true}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"RemoveLiquidity\", \"inputs\": [{\"type\": \"address\", \"name\": \"provider\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"eth_amount\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"token_amount\", \"indexed\": true}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"Transfer\", \"inputs\": [{\"type\": \"address\", \"name\": \"_from\", \"indexed\": true}, {\"type\": \"address\", \"name\": \"_to\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"_value\", \"indexed\": false}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"Approval\", \"inputs\": [{\"type\": \"address\", \"name\": \"_owner\", \"indexed\": true}, {\"type\": \"address\", \"name\": \"_spender\", \"indexed\": true}, {\"type\": \"uint256\", \"name\": \"_value\", \"indexed\": false}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"setup\", \"outputs\": [], \"inputs\": [{\"type\": \"address\", \"name\": \"token_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 175875}, {\"name\": \"addLiquidity\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"min_liquidity\"}, {\"type\": \"uint256\", \"name\": \"max_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 82616}, {\"name\": \"removeLiquidity\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}, {\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"amount\"}, {\"type\": \"uint256\", \"name\": \"min_eth\"}, {\"type\": \"uint256\", \"name\": \"min_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 116814}, {\"name\": \"__default__\", \"outputs\": [], \"inputs\": [], \"constant\": false, \"payable\": true, \"type\": \"function\"}, {\"name\": \"ethToTokenSwapInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"min_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 12757}, {\"name\": \"ethToTokenTransferInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"min_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 12965}, {\"name\": \"ethToTokenSwapOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 50463}, {\"name\": \"ethToTokenTransferOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 50671}, {\"name\": \"tokenToEthSwapInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_eth\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 47503}, {\"name\": \"tokenToEthTransferInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_eth\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 47712}, {\"name\": \"tokenToEthSwapOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"eth_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 50175}, {\"name\": \"tokenToEthTransferOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"eth_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 50384}, {\"name\": \"tokenToTokenSwapInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"min_eth_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"token_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 51007}, {\"name\": \"tokenToTokenTransferInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"min_eth_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}, {\"type\": \"address\", \"name\": \"token_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 51098}, {\"name\": \"tokenToTokenSwapOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"max_eth_sold\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"token_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 54928}, {\"name\": \"tokenToTokenTransferOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"max_eth_sold\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}, {\"type\": \"address\", \"name\": \"token_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 55019}, {\"name\": \"tokenToExchangeSwapInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"min_eth_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"exchange_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 49342}, {\"name\": \"tokenToExchangeTransferInput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"min_tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"min_eth_bought\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}, {\"type\": \"address\", \"name\": \"exchange_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 49532}, {\"name\": \"tokenToExchangeSwapOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"max_eth_sold\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"exchange_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 53233}, {\"name\": \"tokenToExchangeTransferOutput\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}, {\"type\": \"uint256\", \"name\": \"max_tokens_sold\"}, {\"type\": \"uint256\", \"name\": \"max_eth_sold\"}, {\"type\": \"uint256\", \"name\": \"deadline\"}, {\"type\": \"address\", \"name\": \"recipient\"}, {\"type\": \"address\", \"name\": \"exchange_addr\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 53423}, {\"name\": \"getEthToTokenInputPrice\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"eth_sold\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 5542}, {\"name\": \"getEthToTokenOutputPrice\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_bought\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 6872}, {\"name\": \"getTokenToEthInputPrice\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"tokens_sold\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 5637}, {\"name\": \"getTokenToEthOutputPrice\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"uint256\", \"name\": \"eth_bought\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 6897}, {\"name\": \"tokenAddress\", \"outputs\": [{\"type\": \"address\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1413}, {\"name\": \"factoryAddress\", \"outputs\": [{\"type\": \"address\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1443}, {\"name\": \"balanceOf\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"address\", \"name\": \"_owner\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1645}, {\"name\": \"transfer\", \"outputs\": [{\"type\": \"bool\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"address\", \"name\": \"_to\"}, {\"type\": \"uint256\", \"name\": \"_value\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 75034}, {\"name\": \"transferFrom\", \"outputs\": [{\"type\": \"bool\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"address\", \"name\": \"_from\"}, {\"type\": \"address\", \"name\": \"_to\"}, {\"type\": \"uint256\", \"name\": \"_value\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 110907}, {\"name\": \"approve\", \"outputs\": [{\"type\": \"bool\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"address\", \"name\": \"_spender\"}, {\"type\": \"uint256\", \"name\": \"_value\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 38769}, {\"name\": \"allowance\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [{\"type\": \"address\", \"name\": \"_owner\"}, {\"type\": \"address\", \"name\": \"_spender\"}], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1925}, {\"name\": \"name\", \"outputs\": [{\"type\": \"bytes32\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1623}, {\"name\": \"symbol\", \"outputs\": [{\"type\": \"bytes32\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1653}, {\"name\": \"decimals\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1683}, {\"name\": \"totalSupply\", \"outputs\": [{\"type\": \"uint256\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 1713}]\n\n\n# functions = {}\n\n# #print functions signatures and hashes\n# for i in abi:\n#     if (i['type']=='function'):\n#         f_name = i['name']\n#         args = [in_['name'] for in_ in i['inputs']]\n#         funcs = i['name']+\"(\"+','.join(args)+\")\"\n# #         print(\"'{}'\".format(funcs))\n#         inputs = [in_['type'] for in_ in i['inputs']]\n#         signature = i['name']+\"(\"+','.join(inputs)+\")\"\n# #         print(\"'{}'\".format(signature))\n# #         print(\"'{}'\".format(Web3.sha3(text=signature).hex()))\n# #         print(\"'{}'\".format(Web3.sha3(text=signature).hex()[:10]))\n# #         print(\"\")\n#         functions[Web3.sha3(text=signature).hex()[:10]] = signature\n\n# #events = pd.read_pickle('ck-data\/events_4605167-to-5374870.pickle.gz')\n# client = bigquery.Client()\n# query = \"\"\"\n# SELECT \n#   transaction_hash AS transactionHash,\n#   transaction_index,\n#   to_address,\n#   value,\n#   input,\n#   output,\n#   gas,\n#   error,\n#   status,\n#   block_timestamp,\n#   block_number AS blockNumber_dec\n# FROM\n#   `bigquery-public-data.ethereum_blockchain.traces`\n# WHERE TRUE\n#   AND to_address IN ({contract_list})\n#   AND block_timestamp >= {from_block_ts} \n#   AND block_timestamp <= {to_block_ts}\n#   AND SUBSTR(input, 1, 10) IN ({functions_list})\n# \"\"\".format(\n#     from_block_ts=FROM_BLOCK_TIMESTAMP, \n#     to_block_ts=TO_BLOCK_TIMESTAMP, \n#     functions_list=(','.join([\"'{}'\".format(k) for k in list(functions.keys())])),\n#     contract_list=(','.join([\"'{}'\".format(k) for k in list(contracts.keys())]))\n# )\n# print(query)\n# query_job = client.query(query)\n# iterator = query_job.result(timeout=MY_TIMEOUT)\n# rows = list(iterator)\n# calls = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n# calls = calls.sort_values(['blockNumber_dec','transaction_index', 'gas'], ascending=[True,True,False]).reset_index(drop=True)\n# calls.to_pickle('uniswap_calls.pickle')","bbaad05d":"## Get calls to the smartcontract","968c0766":"Copyright 2019, BlockScience Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","5fdabfdb":"^ As expected, most events refer to trades (EthPurchase and TokenPurchase)","05b375e0":"> # Uniswap ETHSAI Analysis","4aa25e80":"Remove Transfers and Approvals, as we won't need them going further"}}