{"cell_type":{"601fd32c":"code","3b9738dd":"code","763ec7de":"code","cac8cbd3":"code","b5d40aff":"code","55663e93":"code","66f980b7":"code","201411cf":"code","04439267":"code","e21e1a41":"code","64f1faad":"code","53ffe17b":"code","97e0d029":"code","b1f481d1":"code","266b3a8f":"code","3c2a33ab":"code","1cecd101":"code","78dbc983":"code","90c2172f":"code","7a7affc6":"code","e16474ae":"code","a23e73fa":"code","36fb9262":"markdown","817cca46":"markdown","1bb92b5e":"markdown","8b95cd9e":"markdown","236c19e8":"markdown","a356ce62":"markdown","9f4e836b":"markdown","81eca5fd":"markdown","ee5c571a":"markdown","c6734719":"markdown","e735ec31":"markdown"},"source":{"601fd32c":"import os\nimport numpy\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport statsmodels.api as sm \nfrom scipy.interpolate import interp1d\nimport datetime as dt\n\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","3b9738dd":"osj = os.path.join\nINPUT_DIR = '..\/input\/m5-forecasting-accuracy\/'\ntv = pd.read_csv(osj(INPUT_DIR, 'sales_train_validation.csv'))\nte = pd.read_csv(osj(INPUT_DIR, 'sales_train_evaluation.csv'))\nprice = pd.read_csv(osj(INPUT_DIR, 'sell_prices.csv'))\ncalender = pd.read_csv(osj(INPUT_DIR, 'calendar.csv'))\n\nsample_submit = pd.read_csv(osj(INPUT_DIR, 'sample_submission.csv'))","763ec7de":"calender['date'] = pd.to_datetime(calender['date'])","cac8cbd3":"dv_cols = [c for c in tv.columns if 'd_' in c] # d_\u3067\u59cb\u307e\u308b\u65e5\u4ed8\u5217\u306e\u30ea\u30b9\u30c8\nde_cols = [c for c in te.columns if 'd_' in c] # d_\u3067\u59cb\u307e\u308b\u65e5\u4ed8\u5217\u306e\u30ea\u30b9\u30c8","b5d40aff":"calender[calender['d'] == dv_cols[-1]]","55663e93":"# \u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\uff08\u500b\u6570\u3001random_state\u306f\u4efb\u610f\uff09\nexamples = te.sample(4, random_state=5050)\n# calender\u3068\u30de\u30fc\u30b8\nexamples = examples.set_index('id')[de_cols].T.merge(calender.set_index('d')['date'],left_index=True, right_index=True, validate='1:1').set_index('date')\nfor item in examples.columns:\n    examples[item].plot(title=item, figsize=(15, 2),  color=next(color_cycle))\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","66f980b7":"past_e_sales = te.set_index('id')[de_cols].T.merge(calender.set_index('d')['date'],\n                                                   left_index=True,\n                                                   right_index=True,\n                                                   validate='1:1').set_index('date')\npast_e_sales.sum(axis=1).plot(figsize=(15, 5), alpha=0.8, title='Total Sales')\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()","201411cf":"state_list = te['state_id'].unique()","04439267":"for i in state_list:\n    items_col = [c for c in past_e_sales.columns if i in c]\n    past_e_sales[items_col] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales by State')\nplt.legend(te['state_id'].unique())\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()","e21e1a41":"for i in te['cat_id'].unique():\n    items_col = [c for c in past_e_sales.columns if i in c]\n    past_e_sales[items_col] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales by Category')\nplt.legend(te['cat_id'].unique())\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()","64f1faad":"store_list = price['store_id'].unique()\nstore_list_ca = [s for s in store_list if 'CA' in s]\nstore_list_tx = [s for s in store_list if 'TX' in s]\nstore_list_wi = [s for s in store_list if 'WI' in s]","53ffe17b":"for s in store_list_ca:\n    store_items = [c for c in past_e_sales.columns if s in c]\n    past_e_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              alpha=0.8,\n            color=next(color_cycle),\n              title='Rolling 30 Day Average Total Sales (CA)')\nplt.legend(store_list_ca)\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()\n\nfor s in store_list_tx:\n    store_items = [c for c in past_e_sales.columns if s in c]\n    past_e_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              color=next(color_cycle),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales (TX)')\nplt.legend(store_list_tx)\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()\n\nfor s in store_list_wi:\n    store_items = [c for c in past_e_sales.columns if s in c]\n    past_e_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(30).mean() \\\n        .plot(figsize=(15, 5),\n              ylim=[0,8000],\n              color=next(color_cycle),\n              alpha=0.8,\n              title='Rolling 30 Day Average Total Sales (WI)')\nplt.legend(store_list_wi)\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()","97e0d029":"d_list = te['dept_id'].unique()\nd_list_foods     = [d for d in d_list if 'FOODS' in d]\nd_list_hobbies   = [d for d in d_list if 'HOBBIES' in d]\nd_list_household = [d for d in d_list if 'HOUSEHOLD' in d]\nd_list_h_h = d_list_hobbies + d_list_household","b1f481d1":"l = d_list_foods\nfor st in state_list:\n    for d in l:\n        store_items = [c for c in past_e_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_e_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,10000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average FOODS Sales ({st})')\n    plt.legend(l)\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","266b3a8f":"l = d_list_h_h\nfor st in state_list:\n    for d in l:\n        store_items = [c for c in past_e_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_e_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,10000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average HOBBIES & HOUSEHOLD Sales ({st})')\n    plt.legend(l)\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","3c2a33ab":"l = d_list_foods\nfor st in store_list:\n    for d in l:\n        store_items = [c for c in past_e_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_e_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,4000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average FOODS Sales ({st})')\n    plt.legend(l)\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","1cecd101":"l = d_list_h_h\nfor st in store_list:\n    for d in l:\n        store_items = [c for c in past_e_sales.columns if st in c]\n        store_d_items = [s for s in store_items if d in s]\n        past_e_sales[store_d_items] \\\n            .sum(axis=1) \\\n            .rolling(30).mean() \\\n            .plot(figsize=(15, 5),\n                  ylim=[0,4000],\n                  alpha=0.8,\n                  title=f'Rolling 30 Day Average HOBBIES & HOUSEHOLD Sales ({st})')\n    plt.legend(l)\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","78dbc983":"def make_total_sales_lowess( p ):\n    total_sales = pd.DataFrame(p.sum(axis=1), columns=['total sales'])\n    \n    # \u30af\u30ea\u30b9\u30de\u30b9\u524a\u9664\n    total_sales_noXmas = total_sales.drop(index=[dt.datetime(2011,12,25), \n                                                   dt.datetime(2012,12,25), \n                                                   dt.datetime(2013,12,25), \n                                                   dt.datetime(2014,12,25), \n                                                   dt.datetime(2015,12,25)])\n\n    df = total_sales_noXmas\n    lowess = sm.nonparametric.lowess(df['total sales'], df.index, frac=.3) \n    lowess_x = list(zip(*lowess))[0] \n    lowess_y = list(zip(*lowess))[1] \n    \n    f = interp1d(lowess_x, lowess_y, bounds_error=False)\n    new_lowess_x = df.index\n    new_lowess_y = f(new_lowess_x)\n    \n    total_sales_lowess = total_sales_noXmas\n    total_sales_lowess['lowess'] = new_lowess_y\n    total_sales_lowess['total sales-lowess'] = total_sales_lowess['total sales'] - total_sales_lowess['lowess']\n    \n    return total_sales_lowess","90c2172f":"total_sales_lowess = make_total_sales_lowess( past_e_sales )","7a7affc6":"total_sales_lowess.plot(figsize=(15, 5), alpha=0.8)\nplt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\nplt.show()","e16474ae":"store_list","a23e73fa":"for store in store_list :\n    total_sales_lowess_tmp = make_total_sales_lowess( past_e_sales.loc[:, past_e_sales.columns.str.contains(store)] )\n    total_sales_lowess_tmp.plot(figsize=(15, 5), alpha=0.8, ylim=[-5000, 10000],title=store)\n    plt.axvline(x=dt.datetime(2016,4,24), color='red', linestyle=\"dashed\", alpha=0.5)\n    plt.show()","36fb9262":"# Total Sales","817cca46":"## HOBBIES & HOUSEHOLD","1bb92b5e":"## FOODS","8b95cd9e":"# By State, By department","236c19e8":"# Random Samples","a356ce62":"# By Store, By department","9f4e836b":"# By Store","81eca5fd":"# By Store, total sales with lowess","ee5c571a":"Simple chart viewer by store for evaluation data.\n\noriginal is [here](https:\/\/www.kaggle.com\/marutama\/charts-by-stores)\n\nI made this notebook from \u3010\u65e5\u672c\u8a9e\u3011Back to (predict) the future - M5 EDA.\n\n\u30b7\u30f3\u30d7\u30eb\u306astore\u3054\u3068\u306eChart viewer \u306e evaluation data \u5bfe\u5fdc\u7248\u3067\u3059\u3002\n\n\u3010\u65e5\u672c\u8a9e\u3011Back to (predict) the future - M5 EDA\u304b\u3089\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u7248\u306f[\u3053\u3061\u3089](https:\/\/www.kaggle.com\/marutama\/charts-by-stores)","c6734719":"# By State","e735ec31":"# By Category"}}