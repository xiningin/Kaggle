{"cell_type":{"08cc1a0d":"code","ea8f7927":"code","46846154":"code","9c3e2eee":"code","2c14d939":"code","89209413":"code","fcbeb198":"code","d132b409":"code","aeadd606":"code","f0590202":"code","afa2d7b1":"code","5dc61ca5":"code","286a2c28":"code","afa49345":"code","e242124d":"code","08957581":"code","d421ea4a":"code","64073f81":"code","91d7b231":"code","01daf8d5":"code","1ac82b08":"code","6c05ccea":"code","d51038df":"code","9288a170":"code","38325dba":"code","72def03b":"code","a35a7e2c":"code","d484f569":"code","fbf3102e":"code","9cc4d6ff":"code","b2a3d68c":"code","050ac7e3":"code","80201f38":"code","9d1b629b":"code","98194434":"code","26de1823":"code","a67bf8a4":"markdown","cc78567b":"markdown","744223a6":"markdown"},"source":{"08cc1a0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea8f7927":"median_house_hold_in_come = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv')\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv')\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv')\nshare_race_city = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv')\nkill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv')","46846154":"percentage_people_below_poverty_level.head()","9c3e2eee":"percentage_people_below_poverty_level.info()","2c14d939":"percentage_people_below_poverty_level.poverty_rate.value_counts()","89209413":"percentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0, inplace = True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)   #poverty rate object verilmi\u015f. \u0130\u015fimize yaramaz, float a \u00e7eviriyoruz.\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())   #eyaletler listesi\narea_poverty_ratio = []   #datay\u0131 s\u0131ralamak i\u00e7in olu\u015ftutuldu\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area'] == i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list, 'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending = False)).index.values\nsorted_data = data.reindex(new_index)\n\n#visualization\nplt.figure(figsize = (15,10))\nsns.barplot(x=sorted_data['area_list'], y = sorted_data['area_poverty_ratio'])\nplt.xticks(rotation = 90) #eyaletlerin isimlerinin a\u00e7\u0131s\u0131\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","fcbeb198":"# \u00d6ld\u00fcr\u00fclen insanlar\u0131n isim ve soyisimlerinden en \u00e7ok kullan\u0131lan 15 ini bul\nkill.head()\nkill.name.value_counts()   #TK TK olan isimler anlams\u0131z\nseparate = kill.name[kill.name != 'TK TK'].str.split()\na,b = zip(*separate)\nname_list = a + b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x=x,y=y,palette = sns.cubehelix_palette(len(x)))  #palette ile uzunluk say\u0131s\u0131na g\u00f6re farkl\u0131 ve uyumlu renk veriyor\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')\n\n\n","d132b409":"# 25 ya\u015f\u0131ndan b\u00fcy\u00fcklerin lise mezunu olma oranlar\u0131 dataset i incelenecek\npercent_over_25_completed_highSchool.head()","aeadd606":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","f0590202":"percent_over_25_completed_highSchool.percent_completed_hs.replace(['-'], 0.0, inplace = True)","afa2d7b1":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","5dc61ca5":"percent_over_25_completed_highSchool.info()","286a2c28":"# percent_completed_hs i\u00e7i object ile dolu\n# object ler floata d\u00f6n\u00fc\u015ft\u00fcr\u00fclecek\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)","afa49345":"percent_over_25_completed_highSchool.info()","e242124d":"area_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_list","08957581":"area_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area'] == i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\narea_highschool","d421ea4a":"# sorting\ndata = pd.DataFrame({'area_list':area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending = True)).index.values   #artana g\u00f6re s\u0131rala\nsorted_data2 = data.reindex(new_index)\n# visualization\nplt.figure(figsize = (15,10))\nsns.barplot(x = sorted_data2['area_list'], y = sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation = 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that has Graduated High School\")","64073f81":"# yatay barplot\n# Percentage of state's population accordinf to races that are black, white, native american, asian and hispanic\nshare_race_city.head()","91d7b231":"share_race_city.info()","01daf8d5":"share_race_city.replace(['-'], 0.0, inplace = True)\nshare_race_city.replace(['(X)'], 0.0, inplace = True)\nshare_race_city.loc[:,['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']] =share_race_city.loc[:,['share_white', 'share_black', 'share_native_american', 'share_asian', 'share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area' ] == i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n# visualization\nf, ax = plt.subplots(figsize = (9,15))\nsns.barplot(x = share_white, y= area_list, color = 'blue', alpha = 0.5, label = 'White')\nsns.barplot(x = share_black, y= area_list, color = 'pink', alpha = 0.5, label = 'African American')\nsns.barplot(x = share_native_american, y= area_list, color = 'yellow', alpha = 0.5, label = 'Native American')\nsns.barplot(x = share_asian, y= area_list, color = 'cyan', alpha = 0.5, label = 'Asian')\nsns.barplot(x = share_hispanic, y= area_list, color = 'green', alpha = 0.5, label = 'Hispanic')\n\nax.legend(loc = 'lower right', frameon = True)   #frameon = g\u00f6r\u00fcn\u00fcrl\u00fck\nax.set(xlabel = 'Percentage of Races', ylabel = 'States', title = \"Percentage of State's Population According to Races\")\n","1ac82b08":"# high school graduation rate vs Poverty rate of each state\n# sorted data daha \u00f6nce tan\u0131mland\u0131 (6. kod blo\u011funda)\n\n\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max(sorted_data['area_poverty_ratio'])   # normalization\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max(sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data, sorted_data2['area_highschool_ratio']], axis = 1)\ndata.sort_values('area_poverty_ratio', inplace = True)\n\n\n# visualize\nf, ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x = 'area_list', y = 'area_poverty_ratio', data = data, color = 'pink', alpha = 0.8)\nsns.pointplot(x = 'area_list', y = 'area_highschool_ratio', data = data, color = 'blue', alpha = 0.8)\nplt.text(40, 0.6, 'high school graduate ratio', color = \"blue\", fontsize = 17, style = 'italic')\nplt.text(40, 0.55, 'poverty ratio', color = 'pink', fontsize = 17, style = 'italic')\nplt.xlabel('States', fontsize = 15, color = 'red')\nplt.ylabel('Values', fontsize = 15, color = 'red')\nplt.title('High School Graduate VS Poverty Rate', fontsize = 20, color = 'red')\nplt.grid()\n\n","6c05ccea":"# Joint Plot\ndata.head()","d51038df":"# another joint plot\ng = sns.jointplot(\"area_poverty_ratio\",\"area_highschool_ratio\", data = data, size = 5, ratio = 3, color = \"pink\")\n                  # string halinde yazabilmek i\u00e7in data=data yazmak zorunday\u0131z    ","9288a170":"# Pie Charts    Matplotlib k\u00fct\u00fcphanesinde\n# race rates according in kill data\n\nkill.head()","38325dba":"kill.race.head(15)","72def03b":"kill.race.value_counts()","a35a7e2c":"kill.race.dropna(inplace = True)   # data'da de\u011fer girilmemi\u015f kill leri \u00e7\u0131kar\nlabels = kill.race.value_counts().index\ncolors = [\"pink\", \"blue\",\"green\",\"red\", \"grey\", \"brown\"]\nexplode = [0, 0, 0, 0, 0, 0]\nsizes = kill.race.value_counts().values\n\n#visualization\nplt.figure(figsize = (7, 7))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color = 'pink', fontsize = 15)","d484f569":"# LM Plot\n# rate vs Poverty\n# linear regression (machine learning)\nsns.lmplot(x=\"area_poverty_ratio\", y =\"area_highschool_ratio\", data = data)\nplt.show()","fbf3102e":"# kde plot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade = True, cut = 5)\nplt.show()","9cc4d6ff":"# violinplot\n# area_poverty_ratio vs area_highschool_ratio\npal = sns.cubehelix_palette(2,rot =- .5, dark = .3)   # palette (renkleri setliyot)\nsns.violinplot(data = data, palette = pal, inner = \"points\")\nplt.show()","b2a3d68c":"# Heatmap\n# data i\u00e7indeki correlation i\u00e7in kullan\u0131l\u0131r Sadece say\u0131sal de\u011ferler aras\u0131nda yap\u0131l\u0131r\nf, ax = plt.subplots(figsize = (5,5))\nsns.heatmap(data.corr(), annot = True, linewidth= .5, fmt = '.1f', ax = ax) # annot say\u0131lar\u0131n g\u00f6r\u00fcnmesi\nplt.show()","050ac7e3":"kill.head()","80201f38":"# box plot\n# manner of death(\u00f6l\u00fcm \u015fekli) : shot OR shot and tasered\n# gender, age\nsns.boxplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = kill, palette = \"PRGn\")\nplt.show()","9d1b629b":"# swarm plot\n# data \u00e7oksa \u00e7izdirmek zorlar, bilgisayar \u00e7izdiremez\nsns.swarmplot(x=\"gender\", y = \"age\", hue = \"manner_of_death\", data = kill)\nplt.show()","98194434":"# pair plot\nsns.pairplot(data)\nplt.show()","26de1823":"# count plot\n# manner of death\nsns.countplot(kill.gender)\nplt.title(\"gender\")\nplt.show()","a67bf8a4":"-=>201 adet var. Bu anlams\u0131z, g\u00f6rmezden gelmemiz gerekiyor, 0'a e\u015fitleyelim.","cc78567b":"Sorular belirle","744223a6":"### g = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind = \"kde\", height = 7)\n# kde = kernet destiny estimation\nplt.show()"}}