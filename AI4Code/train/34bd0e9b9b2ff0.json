{"cell_type":{"be696d59":"code","f2650b58":"code","0115c8d1":"code","624b485f":"code","4ac1be76":"code","1b9d8dc9":"code","c4832566":"code","9e48ee42":"code","91656ec4":"code","1b75ee3d":"code","fae2a187":"code","22569e93":"code","c6fc99ee":"code","50041f5b":"code","5017583c":"code","8998bf2d":"markdown","4bcfdc78":"markdown","a9c332c5":"markdown","83af05c8":"markdown","340439f7":"markdown","720c7069":"markdown","50b43856":"markdown"},"source":{"be696d59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2650b58":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data","0115c8d1":"print (train_data.info())","624b485f":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data","4ac1be76":"train_data.isnull().sum()","1b9d8dc9":"train_data.describe()","c4832566":"mpl.style.use('default')\nsns.barplot(x=train_data['Sex'].unique(), y=train_data['Sex'].value_counts(), color='blue')\nsns.barplot(x=train_data['Sex'].unique(), y=train_data.groupby(['Sex'])['Survived'].sum().sort_index(ascending=False), color='red')\nplt.title('Survival to all')\nplt.show()\n\nprint('Survived man %s'%(train_data.groupby(['Sex'])['Survived'].sum()['male']\/train_data['Sex'].value_counts()['male']))\nprint('Survived woman %s'%(train_data.groupby(['Sex'])['Survived'].sum()['female']\/train_data['Sex'].value_counts()['female']))","9e48ee42":"mpl.style.use('default')\nsns.barplot(x=[1, 2, 3], y=train_data['Pclass'].value_counts().sort_index(), color='blue')\nsns.barplot(x=[1, 2, 3], y=train_data.groupby(['Pclass'])['Survived'].sum().sort_index(), color='yellow')\nplt.title('Pclass')","91656ec4":"survived_embarked = train_data.loc[train_data.Survived==1, \"Embarked\"].value_counts() \/ train_data.Embarked.value_counts()\nmpl.style.use('default')\nsns.barplot(x=test_data.Embarked.value_counts().index, y=train_data['Embarked'].value_counts(), color='blue')\nsns.barplot(x=test_data.Embarked.value_counts().index, y=train_data.loc[train_data.Survived==1, \"Embarked\"].value_counts(), color='yellow')\nplt.title('Survival to all')\nprint(survived_embarked)","1b75ee3d":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","fae2a187":"#test code cell\n\nprint(train_data.columns)\nprint('-'*10)\nprint(test_data.columns)","22569e93":"for dataset in [train_data, test_data]:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].fillna(\"S\")\n    dataset['Embarked'] = dataset['Embarked'].map( {'C': 0, 'Q': 1, 'S': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset['Fare'] = dataset['Fare'].fillna(train_data['Fare'].median())\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4\n\n# Feature Selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp',\\\n                 'Parch']\ntrain_data = train_data.drop(drop_elements, axis = 1)\ntest_data  = test_data.drop(drop_elements, axis = 1)\n\nprint (train_data.head(10))\n\ntrain_data = train_data.values\ntest_data  = test_data.values","c6fc99ee":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog      = pd.DataFrame(columns=log_cols)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\nX = train_data[0::, 1::]\ny = train_data[0::, 0]\n\nacc_dict = {}\n\n# saving the best classificator\nbest_classifier = LogisticRegression()\nbest_measure = 0.0\n\nfor train_index, test_index in sss.split(X, y):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    for clf in classifiers:\n        name = clf.__class__.__name__\n        clf.fit(X_train, y_train)\n        train_predictions = clf.predict(X_test)\n        acc = accuracy_score(y_test, train_predictions)\n        if acc > best_measure:\n            print(acc, clf.__class__.__name__)\n            best_measure = acc\n            best_classifier = clf\n        if name in acc_dict:\n            acc_dict[name] += acc\n        else:\n            acc_dict[name] = acc\n\nfor clf in acc_dict:\n    acc_dict[clf] = acc_dict[clf] \/ 10.0\n    log_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n    log = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")\n","50041f5b":"print(test_data)","5017583c":"predictions = best_classifier.predict(test_data)\n\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8998bf2d":"# Embarked","4bcfdc78":"No comments, just left it in the dataset. May be useful in PCA with SibS or Parch.","a9c332c5":"# Age\n\nIn first versions not necessary to include this to futures.","83af05c8":"# TRAIN MODELS","340439f7":"# Sex","720c7069":"# Summary\n\nNeeds to create a model that predicts which passengers survived the Titanic shipwreck.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.","50b43856":"# Pclass\n\nlooks really useful. We need to decide which way to encode."}}