{"cell_type":{"d924c231":"code","bb3023dc":"code","45a2db4a":"code","b5293121":"code","984aef80":"code","01a8799e":"code","f7174128":"code","24c8693a":"code","58087f48":"code","0375f937":"code","1a06a97f":"code","9b048f71":"code","53dab0a5":"code","d4c060a9":"code","f4457d5d":"code","5a9eafe4":"code","386a61c7":"code","a66c39f5":"code","1c24fb3e":"code","30812202":"code","503b0553":"code","b318d89e":"code","b407268a":"code","a8348e47":"code","9c0930cd":"code","d4580035":"code","45e42c31":"code","ccd0ce43":"code","c0b886a2":"code","5747bf34":"code","75b3dc0f":"code","6a992e89":"code","dc86d0ba":"code","7900986c":"code","1523b99e":"code","4f25f956":"code","627e4321":"code","5ee656f9":"code","616a2ff5":"code","47cf2d7b":"code","017b337d":"code","ec8f98a0":"code","1ba3488e":"code","882501d0":"code","eb5c180a":"code","ffa580e6":"code","ee055fe2":"code","d706aedd":"code","9e37bdd4":"code","e3dacc79":"code","02731e9b":"code","f5de36db":"code","e9882a29":"code","e6b9534b":"code","93a834f6":"markdown","abc9b1da":"markdown","da4e85d3":"markdown","448fa0de":"markdown","4d6efffb":"markdown","ae59afdd":"markdown","d04a389d":"markdown","d9870e4e":"markdown","5f94e729":"markdown","db0707d8":"markdown","f0f990de":"markdown","58624adf":"markdown","0f8946ce":"markdown","2b3982d0":"markdown"},"source":{"d924c231":"# Importing all required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","bb3023dc":"media1 = pd.read_csv('..\/input\/mediacompany.csv')\nmedia1.head()","45a2db4a":"#Importing dataset\nmedia = pd.read_csv('..\/input\/mediacompany.csv')\nmedia = media.drop('Unnamed: 7',axis = 1)","b5293121":"#Let's explore the top 5 rows\nmedia.head()","984aef80":"# Converting date to Pandas datetime format\nmedia['Date'] = pd.to_datetime(media['Date']).dt.date","01a8799e":"media.head()","f7174128":"#https:\/\/stackoverflow.com\/questions\/52278464\/convert-datetimeindex-to-datetime-date-in-pandas\/52278785\n# Deriving \"days since the show started\"\nfrom datetime import date\n\nd0 = date(2017, 2, 28)\nd1 = media.Date\ndelta = (d1 - d0).dt.days\nmedia['day']= delta","24c8693a":"media.head()","58087f48":"# Cleaning days\nmedia['day'] = media['day'].astype(str)\nmedia['day'] = media['day'].map(lambda x: x[0:2])\nmedia['day'] = media['day'].astype(int)","0375f937":"media.head()\nmedia.info()","1a06a97f":"# days vs Views_show\nmedia.plot.line(x='day', y='Views_show')","9b048f71":"# plot for days vs Views_show and days vs Ad_impressions\n\nfig = plt.figure()\nhost = fig.add_subplot(111)\n\npar1 = host.twinx()\npar2 = host.twinx()\n\nhost.set_xlabel(\"Day\")\nhost.set_ylabel(\"View_Show\")\npar1.set_ylabel(\"Ad_impression\")\n\ncolor1 = plt.cm.viridis(0)\ncolor2 = plt.cm.viridis(0.5)\ncolor3 = plt.cm.viridis(.9)\n\np1, = host.plot(media.day,media.Views_show, color=color1,label=\"View_Show\")\np2, = par1.plot(media.day,media.Ad_impression,color=color2, label=\"Ad_impression\")\n\nlns = [p1, p2]\nhost.legend(handles=lns, loc='best')\n\n# right, left, top, bottom\npar2.spines['right'].set_position(('outward', 60))      \n# no x-ticks                 \npar2.xaxis.set_ticks([])\n# Sometimes handy, same for xaxis\n#par2.yaxis.set_ticks_position('right')\n\nhost.yaxis.label.set_color(p1.get_color())\npar1.yaxis.label.set_color(p2.get_color())\n\nplt.savefig(\"pyplot_multiple_y-axis.png\", bbox_inches='tight')","53dab0a5":"# Scatter Plot (days vs Views_show)\ncolors = (0,0,0)\narea = np.pi*3\nplt.scatter(media.day, media.Views_show, s=area, c=colors, alpha=0.5)\nplt.title('Scatter plot pythonspot.com')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()","d4c060a9":"colors = (0,0,0)\nplt.scatter(media.day, media.Views_show,s= np.pi*3, alpha=0.5)\nplt.title('Scatter plot pythonspot.com')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n","f4457d5d":"# Derived Metrics\n# Weekdays are taken such that 1 corresponds to Sunday and 7 to Saturday\n# Generate the weekday variable\nmedia['weekday'] = (media['day']+3)%7\nmedia.weekday.replace(0,7, inplace=True)\nmedia['weekday'] = media['weekday'].astype(int)\nmedia.head()","5a9eafe4":"# Putting feature variable to X\nX = media[['Visitors','weekday']]\n\n# Putting response variable to y\ny = media['Views_show']","386a61c7":"from sklearn.linear_model import LinearRegression","a66c39f5":"# Representing LinearRegression as lr(Creating LinearRegression Object)\nlm = LinearRegression()","1c24fb3e":"# fit the model to the training data\nlm.fit(X,y)","30812202":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_1 = sm.OLS(y,X).fit()\nprint(lm_1.summary())","503b0553":"# create Weekend variable, with value 1 at weekends and 0 at weekdays\ndef cond(i):\n    if i % 7 == 5: return 1\n    elif i % 7 == 4: return 1\n    else :return 0\n    return i\n\nmedia['weekend']=[cond(i) for i in media['day']]","b318d89e":"media.head()\n","b407268a":"# Putting feature variable to X\nX = media[['Visitors','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","a8348e47":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_2 = sm.OLS(y,X).fit()\nprint(lm_2.summary())","9c0930cd":"# Putting feature variable to X\nX = media[['Visitors','weekend','Character_A']]\n\n# Putting response variable to y\ny = media['Views_show']","d4580035":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_3 = sm.OLS(y,X).fit()\nprint(lm_3.summary())","45e42c31":"# Create lag variable #https:\/\/www.geeksforgeeks.org\/numpy-roll-python\/\nmedia['Lag_Views'] = np.roll(media['Views_show'], 1)\nmedia.Lag_Views.replace(108961,0, inplace=True)","ccd0ce43":"media.head(10)\n","c0b886a2":"# Putting feature variable to X\nX = media[['Visitors','Character_A','Lag_Views','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","5747bf34":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_4 = sm.OLS(y,X).fit()\nprint(lm_4.summary())","75b3dc0f":"plt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(media.corr(),annot = True)","6a992e89":"# Putting feature variable to X\nX = media[['weekend','Character_A','Views_platform']]\n\n# Putting response variable to y\ny = media['Views_show']","dc86d0ba":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_5 = sm.OLS(y,X).fit()\nprint(lm_5.summary())","7900986c":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors']]\n\n# Putting response variable to y\ny = media['Views_show']","1523b99e":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_6 = sm.OLS(y,X).fit()\nprint(lm_6.summary())","4f25f956":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","627e4321":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_7 = sm.OLS(y,X).fit()\nprint(lm_7.summary())","5ee656f9":"# Putting feature variable to X\nX = media[['weekend','Character_A','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","616a2ff5":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_8 = sm.OLS(y,X).fit()\nprint(lm_8.summary())","47cf2d7b":"#Ad impression in million\nmedia['ad_impression_million'] = media['Ad_impression']\/1000000","017b337d":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million','Cricket_match_india']]\n\n# Putting response variable to y\ny = media['Views_show']","ec8f98a0":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_9 = sm.OLS(y,X).fit()\nprint(lm_9.summary())","1ba3488e":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million']]\n\n# Putting response variable to y\ny = media['Views_show']","882501d0":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_10 = sm.OLS(y,X).fit()\nprint(lm_10.summary())","eb5c180a":"# Making predictions using the model\nX = media[['weekend','Character_A','ad_impression_million']]\nX = sm.add_constant(X)\nPredicted_views = lm_10.predict(X)","ffa580e6":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","ee055fe2":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","d706aedd":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Views', fontsize=16)                               # Y-label","9e37bdd4":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=16)                # Y-label","e3dacc79":"# Making predictions using the model\nX = media[['weekend','Character_A','Visitors']]\nX = sm.add_constant(X)\nPredicted_views = lm_6.predict(X)","02731e9b":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","f5de36db":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","e9882a29":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Views', fontsize=16)                               # Y-label","e6b9534b":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=16)                # Y-label","93a834f6":"#### Running fourth model (lm4) visitors, Character_A, Lag_views & weekend","abc9b1da":"## Media Company Case Study","da4e85d3":"Problem Statement: A digital media company (similar to Voot, Hotstar, Netflix, etc.) had launched a show. Initially, the show got a good response, but then witnessed a decline in viewership. The company wants to figure out what went wrong.","448fa0de":"#### Running seventh model (lm7) Character_A, weekend & ad_impressions_million","4d6efffb":"#### Running sixth model (lm6) Character_A, weekend & Visitors","ae59afdd":"#### Running seventh model (lm7) Character_A, weekend, Visitors, ad_impressions_million & Cricket_match_india","d04a389d":"#### Running fifth model (lm5) Character_A, weekend & Views_platform","d9870e4e":"#### Running seventh model (lm7) Character_A, weekend, Visitors & Ad_impressions","5f94e729":"#### Running first model (lm1) Weekday & visitors ","db0707d8":"#### Running third model (lm3) visitors, weekend & Character_A","f0f990de":"#### Running eight model (lm8) Character_A, weekend & Ad_impressions","58624adf":"#### Making predictions using lm6","0f8946ce":"#### Running second model (lm2) visitors & weekend","2b3982d0":"#### Making predictions using lm10"}}