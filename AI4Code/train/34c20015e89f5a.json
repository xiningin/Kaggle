{"cell_type":{"28f8e099":"code","1fa231d6":"code","fb91bbe7":"code","72acb232":"code","05599243":"code","a2618be7":"code","8f8a843c":"code","be7b8ba2":"code","50d2f692":"code","9c008806":"code","c20f23b7":"code","bcdc4970":"code","2e12c87c":"code","461e0436":"code","bc259c6a":"code","ad5bbdca":"code","520b4d1c":"code","bbbd7f8b":"code","4fc79c33":"code","2879e00b":"code","30fb00ce":"code","805b9fa7":"code","90a0d7b6":"code","2d664f73":"code","c922d8ea":"code","e4f90cd5":"code","17986590":"code","34ccbdff":"code","e018dfdd":"code","06be6ad8":"code","95292a21":"code","12c6b4c9":"code","540c85d5":"code","823226db":"code","00baf9c0":"code","ca193c24":"code","30681f81":"code","5ec2cb5f":"code","06ed884a":"code","529d28d9":"code","81267418":"code","c0bed62d":"code","9dde0b50":"code","4f7636cc":"code","0f54eac6":"code","8e4be990":"code","7d981ae9":"markdown","4298af3b":"markdown","220468c7":"markdown","55c92c70":"markdown","d41a3b14":"markdown","f0dce89e":"markdown","33af6a6c":"markdown","309b1e8b":"markdown","5bbe750c":"markdown","761ceddf":"markdown","37fbb824":"markdown","23be77e8":"markdown","d5d601cd":"markdown","2c63be10":"markdown","9399dd9c":"markdown","585e5a55":"markdown","36911156":"markdown","1b60f3d9":"markdown","7acaac36":"markdown","3f1b48d7":"markdown","324befba":"markdown","3e5f79ac":"markdown","1c9234fa":"markdown","8e11fce0":"markdown","8e17aceb":"markdown","f18aee89":"markdown","da692138":"markdown","893b5c91":"markdown","42626d00":"markdown","17b75d37":"markdown","d71e5ca5":"markdown","0c15c8d7":"markdown","a3d8b0e6":"markdown","3c056d00":"markdown","0db930a4":"markdown","36aafaea":"markdown","44ed567d":"markdown","c4c21fc6":"markdown","9e5f1857":"markdown","73b4afb6":"markdown","34be046d":"markdown","80d0c8f6":"markdown","66d1c6aa":"markdown","9a2f5e04":"markdown","f6c6614f":"markdown","ce62c54b":"markdown"},"source":{"28f8e099":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport math\nimport optuna\n%matplotlib inline","1fa231d6":"final_data = pd.read_csv('..\/input\/football-data-top-5-leagues\/combined_data.csv')\nfinal_data.drop(final_data.columns[[0, 1, ]], axis=1, inplace=True) \ndf1 = final_data","fb91bbe7":"final_data.columns","72acb232":"X = final_data[['Home Team Possession %', 'Away Team Possession %',\n       'Home Team Off Target Shots', 'Home Team On Target Shots',\n       'Home Team Total Shots', 'Home Team Blocked Shots', 'Home Team Corners',\n       'Home Team Throw Ins', 'Home Team Pass Success %',\n       'Home Team Aerials Won', 'Home Team Clearances', 'Home Team Fouls',\n       'Home Team Yellow Cards', 'Home Team Second Yellow Cards',\n       'Home Team Red Cards', 'Away Team Off Target Shots',\n       'Away Team On Target Shots', 'Away Team Total Shots',\n       'Away Team Blocked Shots', 'Away Team Corners', 'Away Team Throw Ins',\n       'Away Team Pass Success %', 'Away Team Aerials Won',\n       'Away Team Clearances', 'Away Team Fouls', 'Away Team Yellow Cards',\n       'Away Team Second Yellow Cards', 'Away Team Red Cards',\n       'Home Team Goals Scored', 'Away Team Goals Scored',\n       'Home Team Goals Conceeded', 'Away Team Goals Conceeded', 'year']]\n# y = final_data[['Home Team Rating', 'Away Team Rating']]\ny = final_data['Home Team Rating']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)","05599243":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)","a2618be7":"predictions = model.predict(X_test)\n# for i in range(len(predictions)):\n#     predictions","8f8a843c":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","be7b8ba2":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","50d2f692":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","9c008806":"accuracy = round(model.score(X_test,y_test)*100, 2)\nprint(str(accuracy)+'%')","c20f23b7":"import xgboost as xg\nmodel1 = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 100, seed = 123)","bcdc4970":"model1.fit(X_train, y_train)","2e12c87c":"predictions = model.predict(X_test)","461e0436":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","bc259c6a":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","ad5bbdca":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","520b4d1c":"accuracy = round(model1.score(X_test,y_test)*100, 5)\nprint(str(accuracy)+'%')","bbbd7f8b":"import optuna\nimport sklearn\ndef objective(trial):\n    data = X\n    target = y\n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.15,random_state=42)\n    n_estimators = trial.suggest_int('n_estimators', 10, 800)\n    max_depth = int(trial.suggest_loguniform('max_depth', 1, 32))\n    learning_rate = trial.suggest_categorical('learning_rate', [0.01,0.005,0.001,0.05,0.03])\n    clf = xg.XGBRegressor( n_estimators=n_estimators, max_depth = max_depth)\n    clf.fit(train_x, train_y)\n    pred = clf.predict(test_x)\n    mse = mean_squared_error(pred, test_y, squared=False)\n    accuracy = round(model.score(X_test,y_test)*100, 5)\n    return accuracy","4fc79c33":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","2879e00b":"from sklearn.linear_model import Lasso\nfrom sklearn.metrics import r2_score\nbestr2 = -2\nbestaplha = 0\n# for i in range(1,10000,1):\n#     best_alpha = i*0.0001\n#     regr = Lasso(alpha=best_alpha, max_iter=50000)\n#     regr.fit(X_train, y_train)\n#     predictions = regr.predict(X_test)\n#     r2score = r2_score(predictions,y_test)\n#     if(r2score>= bestr2):\n#         bestr2 = r2score\n#         bestaplha = best_alpha\nbest_alpha = 0.005\nregr = Lasso(alpha=best_alpha, max_iter=5000)\nregr.fit(X_train, y_train)\npredictions = regr.predict(X_test)","30fb00ce":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","805b9fa7":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","90a0d7b6":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","2d664f73":"accuracy = round(regr.score(X_test,y_test)*100, 6)\nprint(str(accuracy)+'%')","c922d8ea":"X = final_data[['Home Team Possession %', 'Away Team Possession %',\n       'Home Team Off Target Shots', 'Home Team On Target Shots',\n       'Home Team Total Shots', 'Home Team Blocked Shots', 'Home Team Corners',\n       'Home Team Throw Ins', 'Home Team Pass Success %',\n       'Home Team Aerials Won', 'Home Team Clearances', 'Home Team Fouls',\n       'Home Team Yellow Cards', 'Home Team Second Yellow Cards',\n       'Home Team Red Cards', 'Away Team Off Target Shots',\n       'Away Team On Target Shots', 'Away Team Total Shots',\n       'Away Team Blocked Shots', 'Away Team Corners', 'Away Team Throw Ins',\n       'Away Team Pass Success %', 'Away Team Aerials Won',\n       'Away Team Clearances', 'Away Team Fouls', 'Away Team Yellow Cards',\n       'Away Team Second Yellow Cards', 'Away Team Red Cards',\n       'Home Team Goals Scored', 'Away Team Goals Scored',\n       'Home Team Goals Conceeded', 'Away Team Goals Conceeded', 'year']]\n# y = final_data[['Home Team Rating', 'Away Team Rating']]\ny = final_data['Away Team Rating']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)","e4f90cd5":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=200)\nmodel.fit(X_train, y_train)\nRandomForestRegressor()\npredictions = model.predict(X_test)","17986590":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","34ccbdff":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","e018dfdd":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","06be6ad8":"accuracy = round(model.score(X_test,y_test)*100, 2)\nprint(str(accuracy)+'%')","95292a21":"import xgboost as xg\nmodel2 = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 100, seed = 123)","12c6b4c9":"model2.fit(X_train, y_train)\npredictions = model.predict(X_test)","540c85d5":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","823226db":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","00baf9c0":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","ca193c24":"accuracy = round(model2.score(X_test,y_test)*100, 2)\nprint(str(accuracy)+'%')","30681f81":"import optuna\nimport sklearn\ndef objective(trial):\n    data = X\n    target = y\n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.15,random_state=42)\n    n_estimators = trial.suggest_int('n_estimators', 10, 800)\n    max_depth = int(trial.suggest_loguniform('max_depth', 1, 32))\n    learning_rate = trial.suggest_categorical('learning_rate', [0.01,0.005,0.001,0.05,0.03])\n    clf = xg.XGBRegressor( n_estimators=n_estimators, max_depth = max_depth)\n    clf.fit(train_x, train_y)\n    pred = clf.predict(test_x)\n    mse = mean_squared_error(pred, test_y, squared=False)\n    accuracy = round(model.score(X_test,y_test)*100, 5)\n    return accuracy","5ec2cb5f":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","06ed884a":"from sklearn.linear_model import Ridge\nmodel = Ridge(alpha=0.05)\nmodel.fit(X_train, y_train)","529d28d9":"predictions = model.predict(X_test)","81267418":"from sklearn.metrics import mean_squared_error\nerrors = mean_squared_error(y_test, predictions, squared=False)\nprint(errors)","c0bed62d":"from sklearn.metrics import mean_absolute_error\nerrors = mean_absolute_error(y_test, predictions)\nprint(errors)","9dde0b50":"from sklearn.metrics import r2_score\nprint(r2_score(predictions,y_test))","4f7636cc":"accuracy = round(model.score(X_test,y_test)*100, 2)\nprint(str(accuracy)+'%')","0f54eac6":"# For Home Team\nfig = px.scatter(x = X.columns, y = model1.feature_importances_)\nfig.show()","8e4be990":"#For Away Team\nfig = px.scatter(x = X.columns, y = model2.feature_importances_)\nfig.show()","7d981ae9":"# Lasso Regression","4298af3b":" The following cells will claculate the goals scored by the home team in the match","220468c7":"### R2 Score","55c92c70":"### MSE","d41a3b14":"## Optuna Hyperparameter Tuning","f0dce89e":"### RMSE","33af6a6c":"### R2 Score","309b1e8b":"Looking at the features that most affect the team rating scores for home team and away team respectively","5bbe750c":"### MSE","761ceddf":"### Accuracy","37fbb824":"### Accuracy","23be77e8":"### R2 Score","d5d601cd":"### MSE","2c63be10":"# Pediction Metrics","9399dd9c":"### RMSE","585e5a55":"### Accuracy","36911156":"# Feature Selection","1b60f3d9":"# Random Forest Regressor","7acaac36":"# Pediction Metrics","3f1b48d7":"### Accuracy","324befba":"### MSE","3e5f79ac":"# Conclusion","1c9234fa":"# Prediction Metrics","8e11fce0":"### RMSE","8e17aceb":"### Accuracy","f18aee89":"### RMSE","da692138":"### R2 Score","893b5c91":"# Loading CSV Files","42626d00":"### RMSE","17b75d37":"# Optuna Hyperparameter Tuning","d71e5ca5":"### MSE","0c15c8d7":"# Prediction Metrics","a3d8b0e6":"# XG Boost Regressor","3c056d00":"# Ridge Regressor","0db930a4":"### R2 Score","36aafaea":"### RMSE","44ed567d":"# Away Team Rating","c4c21fc6":"# Import Statements","9e5f1857":"### MSE","73b4afb6":"# Preparing Data\n","34be046d":"### Accuracy","80d0c8f6":"# Prediction Metrics","66d1c6aa":"# Random Forest Regressor","9a2f5e04":"# XGBoost Regressor","f6c6614f":"## Majority of the rating is depended upon the goals scored by the two sides","ce62c54b":"### R2 Score"}}