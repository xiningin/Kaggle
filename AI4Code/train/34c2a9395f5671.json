{"cell_type":{"40a591a9":"code","bb1ee24b":"code","2f218613":"code","4b9cf0aa":"code","3a18d1e9":"code","acf48a24":"code","a9462024":"code","2b98f93c":"code","84a39625":"code","eb309ff7":"code","de35873e":"code","2ae3b244":"code","1ddc11b9":"code","d3d51ecb":"code","4e13db32":"code","7764c323":"code","05a0e88d":"code","31d8c012":"code","ce964a87":"code","38c0fad7":"code","0cb4292f":"code","74898272":"code","2ad4eb37":"code","dfaec731":"code","3eaf2d6e":"code","726b0109":"code","ed38c3f5":"code","ecf74cfe":"code","ddb5b20e":"code","5d4f9b54":"code","458fd7ec":"code","d53b2e54":"code","c904703d":"code","83f42895":"code","584a2505":"code","03614afc":"code","44c80316":"code","e55de43f":"code","054a78af":"code","a9572f18":"code","bc7d7321":"code","5241f3c6":"code","8c91e3e6":"code","e84bcd9a":"code","8cd64bd2":"code","49bcb4f4":"code","2ddabcb6":"code","f33ce10f":"code","f2f059bc":"code","0970d93e":"code","5b0c6df5":"code","cb12dfff":"code","2ffdd325":"code","27496108":"code","3b7a710c":"code","64f08582":"code","44fd3315":"code","a1dd62a6":"code","16fa3126":"code","266095e3":"code","6d0d9d6d":"code","f6c9cd67":"code","851c2ff9":"code","ca19ed2f":"code","f9baea14":"code","fe20aa22":"code","97b59888":"code","0bf09b9f":"code","e018a053":"code","97b263cd":"code","8fe41071":"code","aab4a029":"code","ea505453":"code","3e7e04ed":"code","d871cf27":"code","07af77c4":"code","215d0cb2":"code","be743b44":"code","ac851078":"code","1d1b01fc":"code","45cd0203":"code","88cd4272":"code","4cfe63f9":"code","43e4d1cc":"code","7b9688c1":"code","10cf3930":"code","a2652e3e":"code","d6fbc041":"code","5f5c36f4":"code","fd2b0a21":"code","1e7df7bc":"code","98fd1a1b":"code","ccce0cd1":"code","9902c98e":"code","9f049566":"code","7cdbcf70":"code","f0e65938":"code","2eb4036c":"markdown","bc760f3d":"markdown","b160342f":"markdown","db9a0ece":"markdown","f9b55773":"markdown","bcac9cf8":"markdown","a2c72594":"markdown","76c9fe05":"markdown","27c217de":"markdown"},"source":{"40a591a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bb1ee24b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')","2f218613":"train_data_1 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data_1 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","4b9cf0aa":"train_data = train_data_1.copy()\ntest_data = test_data_1.copy()","3a18d1e9":"train_data.head()","acf48a24":"train_data.describe()","a9462024":"train_data.shape","2b98f93c":"train_data.columns","84a39625":"train_data.rename(str.lower, axis='columns',inplace=True)\ntest_data.rename(str.lower, axis='columns',inplace=True)","eb309ff7":"train_data.columns","de35873e":"pd.set_option('display.max_columns',None)\ntrain_data.head()","2ae3b244":"train_data.shape","1ddc11b9":"import missingno as mnso\nmnso.bar(train_data,labels=True,sort='ascending') #data in each column","d3d51ecb":"# more then 40% of data is missing\ntrain_data.drop(['alley','fireplacequ','poolqc','fence', 'miscfeature'],axis=1,inplace=True)\ntest_data.drop(['alley','fireplacequ','poolqc','fence', 'miscfeature'],axis=1,inplace=True)","4e13db32":"train_data.shape","7764c323":"sns.kdeplot(train_data['saleprice'].values).set_title(\"Distribution of saleprice\")\nplt.xlabel('saleprice')\nplt.show()","05a0e88d":"row_ind = train_data[train_data['saleprice'] > 450000].index.tolist()\nrow_ind","31d8c012":"train_data.drop(row_ind,inplace=True)","ce964a87":"train_data.columns","38c0fad7":"from datetime import date ","0cb4292f":"today = date.today()","74898272":"current_year=today.year\ncurrent_year","2ad4eb37":"# extracting the house age\ntrain_data['building_age']=current_year - train_data.yearbuilt\ntest_data['building_age']=current_year - test_data.yearbuilt","dfaec731":"# extracting the garagr age\ntrain_data['garage_age']=current_year - train_data.garageyrblt\ntest_data['garage_age']=current_year - test_data.garageyrblt","3eaf2d6e":"# creating the categorial column of wheather the house was remodelled or not\nremodelled=[]","726b0109":"for i in list(range(len(train_data)+14)):\n    try:\n        if train_data.yearremodadd[i] > train_data.yearbuilt[i]:\n            remodelled.append(1)\n        else:\n            remodelled.append(0)\n    except:\n        pass","ed38c3f5":"train_data.insert(loc=77,column='remodelled', value=remodelled)","ecf74cfe":"remodelled=[]\n\nfor i in list(range(len(test_data))):\n    if test_data.yearremodadd[i] > test_data.yearbuilt[i]:\n        remodelled.append(1)\n    else:\n        remodelled.append(0)\n\ntest_data.insert(loc=77,column='remodelled', value=remodelled)","ddb5b20e":"train_data.head(5)","5d4f9b54":"train_data.drop(['lotfrontage', 'lotarea','lotshape','lotconfig','condition2','exterior1st','exterior2nd'],axis=1,inplace=True)\ntest_data.drop(['lotfrontage', 'lotarea','lotshape','lotconfig','condition2','exterior1st','exterior2nd'],axis=1,inplace=True)","458fd7ec":"train_data['sold_date']=pd.DataFrame(train_data[['mosold','yrsold']].apply(lambda x : '{}-{}'.format(x[0],x[1]), axis=1))\ntest_data['sold_date']=pd.DataFrame(test_data[['mosold','yrsold']].apply(lambda x : '{}-{}'.format(x[0],x[1]), axis=1))","d53b2e54":"train_data.drop(['yearbuilt', 'yearremodadd','mosold','yrsold','garageyrblt'],axis=1,inplace=True)\ntest_data.drop(['yearbuilt', 'yearremodadd','mosold','yrsold','garageyrblt'],axis=1,inplace=True)","c904703d":"train_data.head(5)","83f42895":"train_data.drop('id',axis=1,inplace=True)\ntest_data.drop('id',axis=1,inplace=True)","584a2505":"from sklearn.model_selection import train_test_split","03614afc":"Y = train_data['saleprice']\nX = train_data.copy().drop('saleprice',axis=1)","44c80316":"trainx,valx,trainy,valy=train_test_split(X,Y,test_size=0.30,random_state=123)","e55de43f":"trainx.columns","054a78af":"import datetime","a9572f18":"trainx['sold_date']=pd.to_datetime(trainx['sold_date'],format='%m-%Y')","bc7d7321":"test_data['sold_date']=pd.to_datetime(test_data['sold_date'],format='%m-%Y')","5241f3c6":"trainx.drop(['garage_age','garagearea'],axis=1,inplace=True)","8c91e3e6":"test_data.drop(['garage_age','garagearea'],axis=1,inplace=True)","e84bcd9a":"cat_cols=['mssubclass', 'mszoning', 'street','landcontour', 'utilities','landslope','neighborhood', 'condition1','bldgtype',\n          'housestyle','overallqual', 'overallcond','roofstyle','roofmatl','masvnrtype','exterqual','extercond','foundation',\n          'bsmtqual', 'bsmtcond','bsmtexposure', 'bsmtfintype1', 'bsmtfintype2','heating', 'heatingqc','centralair', 'electrical',\n          'kitchenqual','functional','garagetype','garagefinish','garagequal', 'garagecond', 'paveddrive','saletype',\n          'salecondition','remodelled']\nnum_cols=['1stflrsf', '2ndflrsf', '3ssnporch', 'bedroomabvgr', 'bsmtfinsf1','bsmtfinsf2', 'bsmtfullbath', 'bsmthalfbath', \n          'bsmtunfsf','building_age', 'enclosedporch', 'fireplaces', 'fullbath','garagecars','grlivarea', 'halfbath','kitchenabvgr', 'lowqualfinsf', 'masvnrarea', 'miscval', 'openporchsf','poolarea', \n          'screenporch', 'totalbsmtsf', 'totrmsabvgrd','wooddecksf']","8cd64bd2":"test_cat_cols=['mssubclass', 'mszoning', 'street','landcontour', 'utilities','landslope','neighborhood', 'condition1','bldgtype',\n          'housestyle','overallqual', 'overallcond','roofstyle','roofmatl','masvnrtype','exterqual','extercond','foundation',\n          'bsmtqual', 'bsmtcond','bsmtexposure', 'bsmtfintype1', 'bsmtfintype2','heating', 'heatingqc','centralair', 'electrical',\n          'kitchenqual','functional','garagetype','garagefinish','garagequal', 'garagecond', 'paveddrive','saletype',\n          'salecondition','remodelled']\ntest_num_cols=['1stflrsf', '2ndflrsf', '3ssnporch', 'bedroomabvgr', 'bsmtfinsf1','bsmtfinsf2', 'bsmtfullbath', 'bsmthalfbath', \n          'bsmtunfsf','building_age', 'enclosedporch', 'fireplaces', 'fullbath','garagecars','grlivarea', 'halfbath','kitchenabvgr', 'lowqualfinsf', 'masvnrarea', 'miscval', 'openporchsf','poolarea', \n          'screenporch', 'totalbsmtsf', 'totrmsabvgrd','wooddecksf']","49bcb4f4":"trainx[cat_cols]=trainx[cat_cols].apply(lambda x : x.astype('category'))\ntrainx[num_cols]=trainx[num_cols].apply(lambda x : x.astype('float64'))","2ddabcb6":"test_data[test_cat_cols]=test_data[test_cat_cols].apply(lambda x : x.astype('category'))\ntest_data[test_num_cols]=test_data[test_num_cols].apply(lambda x : x.astype('float64'))","f33ce10f":"cormat = trainx.corr()\nf , ax = plt.subplots(figsize=(30,30))\nsns.heatmap(cormat,ax=ax,cmap=\"YlGnBu\" ,linewidths=0.5,annot=True)","f2f059bc":"cat_data=trainx.loc[:,cat_cols]\nnum_data=trainx.loc[:,num_cols]","0970d93e":"test_cat_data=test_data.loc[:,test_cat_cols]\ntest_num_data=test_data.loc[:,test_num_cols]","5b0c6df5":"from sklearn.impute import SimpleImputer","cb12dfff":"imp_cat = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimp_cat.fit(cat_data)\ncat_data=pd.DataFrame(imp_cat.transform(cat_data),columns=cat_cols)\nimp_num = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_num.fit(num_data)\nnum_data=pd.DataFrame(imp_num.transform(num_data),columns=num_cols)","2ffdd325":"from sklearn.preprocessing import StandardScaler","27496108":"#Coverting train data int Z-Scores\nstandardizer = StandardScaler()\nstandardizer.fit(num_data)\nnum_data = pd.DataFrame(standardizer.transform(num_data),index=num_data.index,columns=num_cols)\ntrainx = pd.merge(num_data,cat_data,left_on=num_data.index,right_on=cat_data.index,how='inner',left_index=True)\n#Dropping extra column which has come after the joins\ntrainx.drop('key_0',axis=1,inplace=True)","3b7a710c":"trainx=pd.get_dummies(trainx,columns=['remodelled','centralair'],drop_first=True)","64f08582":"import category_encoders as ce","44fd3315":"encoder = ce.BinaryEncoder(cols=['mssubclass','neighborhood','saletype', 'salecondition','condition1','masvnrtype','heating',\n                             'electrical','garagetype'])\ntemp1=encoder.fit(trainx)\ntrainx=temp1.transform(trainx)","a1dd62a6":"trainx.head(1)","16fa3126":"mszoning_dict={'A':1,'C (all)':2,'FV':3,'I':4,'RH':5,'RL':6,'RP':7,'RM':8}\nstreet_dict={'Grvl':1,'Pave':2}\nlandcontour_dict={'Low':1,'HLS':2,'Bnk':3,'Lvl':4}\nutilities_dict={'NoSeWa':1,'AllPub':2}\ngaragefinish_dict={'nan':1,'Unf':2,'RFn':3,'Fin':4}\ngaragequal_dict={'nan':1,'Po':2,'Fa':3,'TA':4,'Gd':5,'Ex':6}\ngaragecond_dict={'nan':1,'Po':2,'Fa':3,'TA':4,'Gd':5,'Ex':6}\npaveddrive_dict={'N':1,'P':2,'Y':3}\nlandslope_dict={'Sev':1,'Mod':2,'Gtl':3}\nbldgtype_dict={'Twnhs':1,'TwnhsE':2,'Duplex':3,'2fmCon':4,'1Fam':5}\nhousestyle_dict={'SLvl':1,'SFoyer':2,'2.5Unf':3,'2.5Fin':4,'2Story':5,'1.5Unf':6,'1.5Fin':7,'1Story':8}\nkitchenqual_dict={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}\nfunctional_dict={'Sal':1,'Sev':2,'Maj2':3,'Maj1':4,'Mod':5,'Min2':6,'Min1':7,'Typ':8}\nroofstyle_dict={'Shed':1,'Mansard':2,'Hip':3,'Gambrel':4,'Gable':5,'Flat':6}\nroofmatl_dict={'WdShngl':1,'WdShake':2,'Tar&Grv':3,'Roll':4,'Metal':5,'Membran':6,'CompShg':7,'ClyTile':8}\nexterqual_dict={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}\nextercond_dict={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}\nfoundation_dict={'Wood':1,'Stone':2,'Slab':3,'PConc':4,'CBlock':5,'BrkTil':6}\nbsmtqual_dict={'nan':1,'Po':2,'Fa':3,'TA':4,'Gd':5,'Ex':6}\nbsmtcond_dict={'nan':1,'Po':2,'Fa':3,'TA':4,'Gd':5,'Ex':6}\nbsmtexposure_dict={'nan':1,'No':2,'Mn':3,'Av':4,'Gd':5}\nbsmtfintype1_dict={'nan':1,'Unf':2,'LwQ':3,'Rec':4,'BLQ':5,'ALQ':6,'GLQ':7}\nbsmtfintype2_dict={'nan':1,'Unf':2,'LwQ':3,'Rec':4,'BLQ':5,'ALQ':6,'GLQ':7}\nheatingqc_dict={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5}\noverallqual_dict={1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10}\noverallcond_dict={1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10}","266095e3":"trainx['mszoning'] = trainx.mszoning.map(mszoning_dict)\ntrainx['street'] = trainx.street.map(street_dict)\ntrainx['landcontour'] = trainx.landcontour.map(landcontour_dict)\ntrainx['utilities'] = trainx.utilities.map(utilities_dict)\ntrainx['garagefinish'] = trainx.garagefinish.map(garagefinish_dict)\ntrainx['garagequal'] = trainx.garagequal.map(garagequal_dict)\ntrainx['garagecond'] = trainx.garagecond.map(garagecond_dict)\ntrainx['paveddrive'] = trainx.paveddrive.map(paveddrive_dict)\ntrainx['landslope'] = trainx.landslope.map(landslope_dict)\ntrainx['bldgtype'] = trainx.bldgtype.map(bldgtype_dict)\ntrainx['housestyle'] = trainx.housestyle.map(housestyle_dict)\ntrainx['kitchenqual'] = trainx.kitchenqual.map(kitchenqual_dict)\ntrainx['functional'] = trainx.functional.map(functional_dict)\ntrainx['roofstyle'] = trainx.roofstyle.map(roofstyle_dict)\ntrainx['roofmatl'] = trainx.roofmatl.map(roofmatl_dict)\ntrainx['exterqual'] = trainx.exterqual.map(exterqual_dict)\ntrainx['extercond'] = trainx.extercond.map(extercond_dict)\ntrainx['foundation'] = trainx.foundation.map(foundation_dict)\ntrainx['bsmtqual'] = trainx.bsmtqual.map(bsmtqual_dict)\ntrainx['bsmtcond'] = trainx.bsmtcond.map(bsmtcond_dict)\ntrainx['bsmtexposure'] = trainx.bsmtexposure.map(bsmtexposure_dict)\ntrainx['bsmtfintype1'] = trainx.bsmtfintype1.map(bsmtfintype1_dict)\ntrainx['bsmtfintype2'] = trainx.bsmtfintype2.map(bsmtfintype2_dict)\ntrainx['heatingqc'] = trainx.heatingqc.map(heatingqc_dict)\ntrainx['overallqual'] = trainx.overallqual.map(overallqual_dict)\ntrainx['overallcond'] = trainx.overallcond.map(overallcond_dict)","6d0d9d6d":"trainx.shape","f6c9cd67":"valx['sold_date']=pd.to_datetime(valx['sold_date'],format='%m-%Y')","851c2ff9":"valx.drop(['garage_age','garagearea'],axis=1,inplace=True)","ca19ed2f":"val_cat_cols=['mssubclass', 'mszoning', 'street','landcontour', 'utilities','landslope','neighborhood', 'condition1','bldgtype',\n          'housestyle','overallqual', 'overallcond','roofstyle','roofmatl','masvnrtype','exterqual','extercond','foundation',\n          'bsmtqual', 'bsmtcond','bsmtexposure', 'bsmtfintype1', 'bsmtfintype2','heating', 'heatingqc','centralair', 'electrical',\n          'kitchenqual','functional','garagetype','garagefinish','garagequal', 'garagecond', 'paveddrive','saletype',\n          'salecondition','remodelled']\nval_num_cols=['1stflrsf', '2ndflrsf', '3ssnporch', 'bedroomabvgr', 'bsmtfinsf1','bsmtfinsf2', 'bsmtfullbath', 'bsmthalfbath', \n          'bsmtunfsf','building_age', 'enclosedporch', 'fireplaces', 'fullbath','garagecars','grlivarea', 'halfbath','kitchenabvgr', 'lowqualfinsf', 'masvnrarea', 'miscval', 'openporchsf','poolarea', \n          'screenporch', 'totalbsmtsf', 'totrmsabvgrd','wooddecksf']\n","f9baea14":"valx[val_cat_cols]=valx[val_cat_cols].apply(lambda x : x.astype('category'))\nvalx[val_num_cols]=valx[val_num_cols].apply(lambda x : x.astype('float64'))","fe20aa22":"val_cat_data=valx.loc[:,val_cat_cols]\nval_num_data=valx.loc[:,val_num_cols]","97b59888":"val_cat_data=pd.DataFrame(imp_cat.transform(val_cat_data),columns=val_cat_cols)\nval_num_data=pd.DataFrame(imp_num.transform(val_num_data),columns=val_num_cols)","0bf09b9f":"val_num_data = pd.DataFrame(standardizer.transform(val_num_data),index=val_num_data.index,columns=val_num_cols)","e018a053":"valx = pd.merge(val_num_data,val_cat_data,left_on=val_num_data.index,right_on=val_cat_data.index,how='inner',left_index=True)\nvalx.drop('key_0',axis=1,inplace=True)","97b263cd":"valx=pd.get_dummies(valx,columns=['remodelled','centralair'],drop_first=True)","8fe41071":"valx=temp1.transform(valx)","aab4a029":"valx['mszoning'] = valx.mszoning.map(mszoning_dict)\nvalx['street'] = valx.street.map(street_dict)\nvalx['landcontour'] = valx.landcontour.map(landcontour_dict)\nvalx['utilities'] = valx.utilities.map(utilities_dict)\nvalx['garagefinish'] = valx.garagefinish.map(garagefinish_dict)\nvalx['garagequal'] = valx.garagequal.map(garagequal_dict)\nvalx['garagecond'] = valx.garagecond.map(garagecond_dict)\nvalx['paveddrive'] = valx.paveddrive.map(paveddrive_dict)\nvalx['landslope'] = valx.landslope.map(landslope_dict)\nvalx['bldgtype'] = valx.bldgtype.map(bldgtype_dict)\nvalx['housestyle'] = valx.housestyle.map(housestyle_dict)\nvalx['kitchenqual'] = valx.kitchenqual.map(kitchenqual_dict)\nvalx['functional'] = valx.functional.map(functional_dict)\nvalx['roofstyle'] = valx.roofstyle.map(roofstyle_dict)\nvalx['roofmatl'] = valx.roofmatl.map(roofmatl_dict)\nvalx['exterqual'] = valx.exterqual.map(exterqual_dict)\nvalx['extercond'] = valx.extercond.map(extercond_dict)\nvalx['foundation'] = valx.foundation.map(foundation_dict)\nvalx['bsmtqual'] = valx.bsmtqual.map(bsmtqual_dict)\nvalx['bsmtcond'] = valx.bsmtcond.map(bsmtcond_dict)\nvalx['bsmtexposure'] = valx.bsmtexposure.map(bsmtexposure_dict)\nvalx['bsmtfintype1'] = valx.bsmtfintype1.map(bsmtfintype1_dict)\nvalx['bsmtfintype2'] = valx.bsmtfintype2.map(bsmtfintype2_dict)\nvalx['heatingqc'] = valx.heatingqc.map(heatingqc_dict)\nvalx['overallqual'] = valx.overallqual.map(overallqual_dict)\nvalx['overallcond'] = valx.overallcond.map(overallcond_dict)","ea505453":"valx.shape","3e7e04ed":"trainx.columns","d871cf27":"trainx.shape\ntest_data.shape","07af77c4":"test_cat_data=pd.DataFrame(imp_cat.transform(test_cat_data),columns=test_cat_cols)\ntest_num_data=pd.DataFrame(imp_num.transform(test_num_data),columns=test_num_cols)","215d0cb2":"test_num_data = pd.DataFrame(standardizer.transform(test_num_data),index=test_num_data.index,columns=test_num_cols)","be743b44":"test_data = pd.merge(test_num_data,test_cat_data,left_on=test_num_data.index,right_on=test_cat_data.index,how='inner',left_index=True)\ntest_data.drop('key_0',axis=1,inplace=True)","ac851078":"test_data.columns","1d1b01fc":"test_data.head(1)","45cd0203":"test_data=pd.get_dummies(test_data,columns=['remodelled','centralair'],drop_first=True)","88cd4272":"test_data.columns","4cfe63f9":"test_data.head(2)","43e4d1cc":"test_data=temp1.transform(test_data)","7b9688c1":"test_data['mszoning'] = test_data.mszoning.map(mszoning_dict)\ntest_data['street'] = test_data.street.map(street_dict)\ntest_data['landcontour'] = test_data.landcontour.map(landcontour_dict)\ntest_data['utilities'] = test_data.utilities.map(utilities_dict)\ntest_data['garagefinish'] = test_data.garagefinish.map(garagefinish_dict)\ntest_data['garagequal'] = test_data.garagequal.map(garagequal_dict)\ntest_data['garagecond'] = test_data.garagecond.map(garagecond_dict)\ntest_data['paveddrive'] = test_data.paveddrive.map(paveddrive_dict)\ntest_data['landslope'] = test_data.landslope.map(landslope_dict)\ntest_data['bldgtype'] = test_data.bldgtype.map(bldgtype_dict)\ntest_data['housestyle'] = test_data.housestyle.map(housestyle_dict)\ntest_data['kitchenqual'] = test_data.kitchenqual.map(kitchenqual_dict)\ntest_data['functional'] = test_data.functional.map(functional_dict)\ntest_data['roofstyle'] = test_data.roofstyle.map(roofstyle_dict)\ntest_data['roofmatl'] = test_data.roofmatl.map(roofmatl_dict)\ntest_data['exterqual'] = test_data.exterqual.map(exterqual_dict)\ntest_data['extercond'] = test_data.extercond.map(extercond_dict)\ntest_data['foundation'] = test_data.foundation.map(foundation_dict)\ntest_data['bsmtqual'] = test_data.bsmtqual.map(bsmtqual_dict)\ntest_data['bsmtcond'] = test_data.bsmtcond.map(bsmtcond_dict)\ntest_data['bsmtexposure'] = test_data.bsmtexposure.map(bsmtexposure_dict)\ntest_data['bsmtfintype1'] = test_data.bsmtfintype1.map(bsmtfintype1_dict)\ntest_data['bsmtfintype2'] = test_data.bsmtfintype2.map(bsmtfintype2_dict)\ntest_data['heatingqc'] = test_data.heatingqc.map(heatingqc_dict)\ntest_data['overallqual'] = test_data.overallqual.map(overallqual_dict)\ntest_data['overallcond'] = test_data.overallcond.map(overallcond_dict)","10cf3930":"from sklearn import metrics\ndef rmse(train_actual,train_prediction,test_actual,test_prediction):\n    print('train')\n    print('rmse: ',np.sqrt(metrics.mean_squared_error(train_actual, train_prediction)))\n    print('Validation')\n    print('rmse: ',np.sqrt(metrics.mean_squared_error(test_actual, test_prediction)))","a2652e3e":"from xgboost import XGBRegressor","d6fbc041":"%%time\nxgb = XGBRegressor()\nxgb.fit(trainx,trainy)","5f5c36f4":"predictions_train_xgb = xgb.predict(trainx)\npredictions_val_xgb = xgb.predict(valx)","fd2b0a21":"rmse(trainy,predictions_train_xgb,valy,predictions_val_xgb)","1e7df7bc":"predictions_test_xgb2 = xgb.predict(test_data)","98fd1a1b":"# GridSearch","ccce0cd1":"param_grid_xgb = {\"criterion\": [\"mse\", \"mae\"],\n              \"min_samples_split\": [10, 20, 40],\n              \"max_depth\": [2, 6, 8],\n              \"min_samples_leaf\": [20, 40, 100],\n              \"max_leaf_nodes\": [5, 20, 100],\n              }","9902c98e":"%%time\ngrid_xgb = GridSearchCV(xgb,param_grid=param_grid_xgb,cv=10,n_jobs=-1)\ngrid_xgb.fit(trainx,trainy)","9f049566":"print(grid_xgb.best_estimator_)","7cdbcf70":"predictions_train_grid_xgb = grid_xgb.predict(trainx)\npredictions_val_grid_xgb = grid_xgb.predict(valx)","f0e65938":"rmse(trainy,predictions_train_grid_xgb,valy,predictions_val_grid_xgb)","2eb4036c":"# ordinal","bc760f3d":"# train - test split","b160342f":"# MOdels","db9a0ece":"# Data Type conversion","f9b55773":"# Binary","bcac9cf8":"# Preprocessing validation Data","a2c72594":"removing outliers","76c9fe05":"# XG BOOST","27c217de":"# Dummy"}}