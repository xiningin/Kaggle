{"cell_type":{"e54613b0":"code","2dd11102":"code","49b2b15e":"code","323b4020":"code","f9853862":"code","89d836a8":"code","f849dc37":"code","25286b17":"code","f6fd5cf0":"code","e09c0f72":"code","1f08bc00":"code","5e3f03ac":"code","89de6b6b":"code","1c62f0d0":"code","db9e43bb":"code","1b553e28":"code","5f6412f5":"code","b7e3cd4f":"code","4610b339":"code","f5585d26":"code","db9ec451":"code","006f60fb":"code","7851bec1":"code","9c58bc48":"code","7806c26b":"code","7f9737a2":"code","956ed4a7":"markdown"},"source":{"e54613b0":"!pip install pmdarima","2dd11102":"import pandas as pd \nimport numpy as np\n\nimport os \nimport glob\n\nimport matplotlib.pyplot as plt \nfrom matplotlib import style\nstyle.use('seaborn')\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.offline as pyo\nimport plotly.express as px \nimport seaborn as sb\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 8\npyo.init_notebook_mode()\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pmdarima.arima import auto_arima\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport math\n\nimport warnings \n\nwarnings.filterwarnings(\"ignore\")","49b2b15e":"DATA_FOLDER = '\/kaggle\/input\/stock-market-wide-datasets\/'","323b4020":"Q_DATA = glob.glob(DATA_FOLDER+'*Q')\nAM_DATA = DATA_FOLDER+'AM'\nEVENT = DATA_FOLDER+'event'\nNEWS = DATA_FOLDER+'news'","f9853862":"df= pd.DataFrame()\nfor e,i in enumerate(Q_DATA):    \n    data = pd.read_csv(i)\n    data = data.query(\"ticker == 'FANG'\")\n    if data.shape[0] == 0:\n        continue\n    elif e!=0:\n       df= pd.concat([df,data])\n    else:\n        df = data","89d836a8":"df.head()","f849dc37":"print(df['time'].max())\nprint(df['time'].min())","25286b17":"am_df = pd.read_csv(AM_DATA)\nam_df = am_df.query(\"symbol=='FANG'\")\nam_df['time'] = pd.to_datetime(am_df['time'].str[:-3])\nam_df = am_df.sort_values(['time']).reset_index(drop=True)\nam_df.set_index('time', inplace=True)\nam_df.head()","f6fd5cf0":"df['time'] = df['time'].str[:-3]\ndf['time'] = pd.to_datetime(df['time'])\ndf = df.sort_values(['time']).reset_index(drop=True)\ndf.set_index('time', inplace=True)\ndf.head()","e09c0f72":"df_int = df.resample('15min').mean().dropna()","1f08bc00":"\nfig = go.Figure(go.Scatter(x = df_int.index.to_series().dt.strftime('%Y-%m-%d, %H'), y=df_int['ask_price'], name='ask_price'))\nfig.add_trace(go.Scatter(x = df_int.index.to_series().dt.strftime('%Y-%m-%d, %H'), y=df_int['bid_price'], name='bid_price'))\nfig.update_layout(title='Ask and Bid price of FANG from 4 Aug 2020 - 18 Aug 2020', yaxis_title='Price')\nfig.show()","5e3f03ac":"am_df_int = am_df.resample('15min').mean().dropna()\nfig = go.Figure(go.Scatter(x = am_df_int.index.to_series().dt.strftime('%Y-%m-%d, %H'), y=am_df_int['close_price'], name='FANG'))\nfig.update_layout(title='FANG stock price thorughout August 2020')\nfig.show()","89de6b6b":"df_interval = am_df_int['2020-08-10':'2020-08-15']\ndf_interval = df_interval.join(df_int)\ndf_interval.head()","1c62f0d0":"\nfig = make_subplots(\n    shared_xaxes=True,\n    rows=10, cols=1,\n    specs=[[{\"rowspan\":6}],\n           [{}],\n           [{}],\n           [{}],\n           [{}],\n           [{}],\n           [{\"rowspan\": 2}],\n          [{}],\n          [{\"rowspan\":2}],\n          [{}]],\n    subplot_titles=(\"Movement of FANG Stock thorugh out a week in 15 min time interval\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"))\n\nfig.append_trace(go.Scatter(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'), y=df_interval['ask_price'], name='ask_price'),row=1,col=1)\nfig.append_trace(go.Scatter(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['bid_price'], name='bid_price'),row=1,col=1)\nfig.append_trace(go.Scatter(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'), y=df_interval['close_price'], name='close_price'),row=1,col=1)\nfig.append_trace(go.Bar(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'), y=df_interval['bid_size'], name='bid_size'),row=7,col=1)\nfig.append_trace(go.Bar(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'), y=df_interval['ask_size'], name='ask_size'),row=9,col=1)\n\nfig.update_layout( yaxis_title='Price')\nfig.show()","db9e43bb":"mu = df_interval['close_price'].mean()\nvar = df_interval['close_price'].var()\nmedian = df_interval['close_price'].median()\nstddev = df_interval['close_price'].std()\nprice_max = df_interval['close_price'].max()\nprice_low = df_interval['close_price'].min()\nprint(\"mean: \",mu)\nprint(\"Var: \",var)\nprint(\"median: \",median)\nprint(\"stddev: \",stddev)\nprint(\"Max: \",price_max)\nprint(\"Min: \",price_low)","1b553e28":"#Bolinger bands\n\nwindow = 15\ndf_interval['MA15'] = df_interval['close_price'].rolling(window=window).mean()\ndf_interval['STD15'] = df_interval['close_price'].rolling(window=window).std()\ndf_interval['upper'] = df_interval['MA15'] + df_interval['STD15'] * 2\ndf_interval['lower'] = df_interval['MA15'] - df_interval['STD15'] * 2","5f6412f5":"fig = make_subplots(\n    shared_xaxes=True,\n    rows=4,cols=1,\n    specs = [\n        [{'rowspan':3}],\n        [{'rowspan':1}],\n        [{}],\n        [{}]\n    ],\n    subplot_titles= (\"\",\"\",\"\",\"Volume\"))\nfig.add_trace(go.Scatter(x= df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['upper'], name='UPPER BOUND'),row=1,col=1)\nfig.add_trace(go.Scatter(x= df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['lower'], name='LOWER BOUND'),row=1,col=1)\nfig.add_trace(go.Scatter(x= df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['close_price'], name='Price'),row=1,col=1)\nfig.add_trace(go.Scatter(x= df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['MA15'], name='Price'),row=1,col=1)\nfig.add_trace(go.Bar(x= df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['volume'], name='Volume'),row=4,col=1)\n\nfig.update_layout(title='Bolinger Bands')\nfig.show()","b7e3cd4f":"df_interval['pct_change'] = df_interval['close_price'].pct_change()\ndf_interval['lag'] = df_interval['close_price'].shift(12)\ndf_interval['lag_returns'] = (df_interval['close_price'] - df_interval['lag'])\/df_interval['close_price']\n","4610b339":"fig = make_subplots(\n    shared_xaxes=True,\n    rows=2, cols=1,\n    specs=[[{\"rowspan\":1}],\n           [{\"rowspan\": 1}],],\n    subplot_titles=(\"% change \/ simple returns\",\"Same day returns\"))\n\nfig.append_trace(go.Scatter(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'), y=df_interval['pct_change'], name='% change'),row=1,col=1)\nfig.append_trace(go.Scatter(x = df_interval.index.to_series().dt.strftime('%Y-%m-%d, %H-%M'),y=df_interval['lag_returns'], name='lag returns'),row=2,col=1)\nfig.show()","f5585d26":"fig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"rowspan\":1},{\"colspan\":1}],\n           [{\"rowspan\": 1},{\"colspan\":1}],],\n    subplot_titles=(\"% change \/ simple returns\",\"Same day Returns\",\"close price histogram\",\"Volume\"))\n\nfig.add_trace(go.Histogram(x=df_interval['pct_change']),row=1,col=1)\nfig.append_trace(go.Histogram(x=df_interval['lag_returns']),row=1,col=2)\nfig.add_trace(go.Histogram(x=df_interval['close_price']),row=2,col=1)\nfig.add_trace(go.Histogram(x=df_interval['volume']),row=2,col=2)\n\nfig.show()","db9ec451":"px.scatter(df_interval, x='ask_price',y='bid_price',color='lag_returns', title='Ask Price vs Bid price')","006f60fb":"df_interval['diff_ask_bid'] = df_interval['ask_price']-df_interval['bid_price']","7851bec1":"model = np.polyfit(df_interval.dropna()['diff_ask_bid'],y=df_interval.dropna()['lag_returns'],deg=1)\nm,c =model","9c58bc48":"fig = go.Figure(px.scatter(df_interval.dropna(), x ='diff_ask_bid', y='lag_returns', title='Linear relationship between difference in ask and bid price vs Same day returns'))\nfig.add_trace(go.Scatter(x=df_interval.dropna()['diff_ask_bid'], y=(m*df_interval.dropna()['diff_ask_bid'])+c, name='Linear Fit'))\nfig.show()","7806c26b":"#Test for staionarity\ndef test_stationarity(timeseries):\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n    #Plot rolling statistics:\n    \n    plt.plot(timeseries, color='blue',label='Original')\n    plt.plot(rolmean, color='red', label='Rolling Mean')\n    plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best') \n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n \n    print(\"Results of dickey fuller test\")\n    adft = adfuller(timeseries,autolag='AIC')\n\n    output = pd.Series(adft[0:4],index=['Test Statistics','p-value','No. of lags used','Number of observations used'])\n    for key,values in adft[4].items():\n        output['critical value (%s)'%key] =  values\n    print(output)\n    \ntest_stationarity(df_interval['close_price'])","7f9737a2":"result = seasonal_decompose(df_interval['close_price'], model='multiplicative', freq = 15);\nfig = plt.figure();\nfig = result.plot() ;\nfig.set_size_inches(16, 9);","956ed4a7":"# Modeling"}}