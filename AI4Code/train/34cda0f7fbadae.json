{"cell_type":{"6eb9409a":"code","9574a9e2":"code","9d2ecb9d":"code","57e620bf":"code","2a5ea6cc":"code","ed58f17d":"code","b1c8af91":"code","4f4f9b62":"code","e383453b":"code","13a24fbc":"code","f0a08a60":"code","ecbdc552":"code","37ae7b8b":"code","15637397":"code","876cbfa1":"code","5097a84f":"code","80a7eb35":"code","644b1d5b":"code","1703c464":"code","74c42ce4":"markdown","1ba696e7":"markdown","ac8de85d":"markdown","db81ebe6":"markdown","43c824b8":"markdown","f87dc8be":"markdown","0618111b":"markdown","4a52958f":"markdown","a721686a":"markdown","1db9936a":"markdown","79716a2f":"markdown","ee8897f8":"markdown","618cf8a9":"markdown"},"source":{"6eb9409a":"!pip install -q quick-ml","9574a9e2":"import tensorflow as tf\nimport quick_ml","9d2ecb9d":"from quick_ml.begin_tpu import define_tpu_strategy\n\nstrategy, tpu = define_tpu_strategy()","57e620bf":"from quick_ml.begin_tpu import get_training_dataset, get_validation_dataset, get_test_dataset","2a5ea6cc":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cats-dogs-tfrecords-192x192')\nprint(\"GCS_DS_PATH  -> \", GCS_DS_PATH)\n\ntrain_tfrec_path = '\/train.tfrecords'\nval_tfrec_path = '\/val.tfrecords'\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nEPOCHS = 11\nprint(\"Epochs -> \", EPOCHS)\nSTEPS_PER_EPOCH = 14961 \/\/ BATCH_SIZE\nprint(\"STEPS PER EPOCH -> \", STEPS_PER_EPOCH)\n\ndictionary_labeled = \"{'image_raw' : tf.io.FixedLenFeature([], tf.string), 'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\nfrom quick_ml.begin_tpu import get_labeled_tfrecord_format\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","ed58f17d":"train_dataset = get_training_dataset(GCS_DS_PATH, train_tfrec_path, BATCH_SIZE)","b1c8af91":"val_dataset = get_validation_dataset(GCS_DS_PATH, val_tfrec_path, BATCH_SIZE)","4f4f9b62":"from quick_ml.load_models_quick import create_model\n\nwith strategy.scope():\n    model = create_model(1, model_name = 'VGG16', classification_model = 'default', freeze = True, input_shape = [192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = 'accuracy')","e383453b":"from quick_ml.callbacks import get_callbacks","13a24fbc":"callbacks = get_callbacks(lr_scheduler = 'rampup', early_stopping = None)\ncallbacks","f0a08a60":"model.fit(train_dataset, \n         epochs = EPOCHS, \n         steps_per_epoch =STEPS_PER_EPOCH,\n         validation_data = val_dataset, batch_size = BATCH_SIZE, callbacks = callbacks)","ecbdc552":"# Obtain the GCS Path\n\nfrom kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('test-tfrecords-cats-dogs-192x192')\nprint(\"GCS_DS_PATH    ->   \", GCS_DS_PATH)\n","37ae7b8b":"# Define TFRecord Format for Unlabeled Data\n\nfrom quick_ml.begin_tpu import get_unlabeled_tfrecord_format\ndictionary_unlabeled = \"{ 'image' : tf.io.FixedLenFeature([], tf.string), 'idnum' : tf.io.FixedLenFeature([], tf.string) }\"\nIMAGE_SIZE = \"192,192\"\nget_unlabeled_tfrecord_format(dictionary_unlabeled, IMAGE_SIZE)","15637397":"# Get the test dataset\n\ntest_tfrec_path = '\/test_cats_dogs_192x192.tfrecords'\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\ntest_dataset = get_test_dataset(GCS_DS_PATH, test_tfrec_path, BATCH_SIZE)","876cbfa1":"from quick_ml.predictions import get_predictions\nfrom quick_ml.predictions import get_predictions_tfrec","5097a84f":"# method 1 to obtain predictions\n\n# obtain predictions directly without preloading the test dataset\n\nget_predictions_tfrec(GCS_DS_PATH, test_tfrec_path, BATCH_SIZE, model, 'output1.csv')","80a7eb35":"# method 2 to obtain predictions\n\n# obtain predictions after loading the test dataset\n\nget_predictions(test_dataset, model, 'output2.csv')","644b1d5b":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/working\/output1.csv')","1703c464":"df","74c42ce4":"## Necessary Imports","1ba696e7":"## Initiate TPU & Strategy","ac8de85d":"#### Loading Test Dataset","db81ebe6":"Parameters Definition","43c824b8":"Viewing the Outputs Obtained","f87dc8be":"### Load the Datasets","0618111b":"## This notebook shows how to obtain predictions for a Binary Clasification TFRecords Dataset.","4a52958f":"##### Obtaining Model Predictions","a721686a":"## Predictions","1db9936a":"## Installation","79716a2f":"### Model Training","ee8897f8":"## Offical Website -> [quick-ml](http:\/\/www.antoreepjana.wixsite.com\/quick-ml)","618cf8a9":"Test Dataset is a different dataset."}}