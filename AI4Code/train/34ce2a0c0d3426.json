{"cell_type":{"cc89e317":"code","2064d731":"code","d78f6e4a":"code","6e8bd974":"code","1b02fbf2":"code","60a930a3":"code","7a1d31bd":"code","fb1985c9":"code","e8c5dbff":"code","21faa8af":"code","5ce63434":"code","e82a5e26":"code","7fdf378c":"markdown","ea0307ad":"markdown","52df198d":"markdown","f61d971e":"markdown","8bdf76c3":"markdown","690c9317":"markdown","a4dae95a":"markdown"},"source":{"cc89e317":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import classification_report\nfrom xgboost import plot_tree\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport matplotlib.pylab as plt\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier\n# Any results you write to the current directory are saved as output.","2064d731":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test_data.csv\")\ntest_id=test['id']\ntest=test.drop(\"id\",axis=1)\ntrain=train.drop(\"id\",axis=1)\n\ntrain.describe()","d78f6e4a":"perempuan=train[train['gender']=='putri'].copy()\nlaki=train[train['gender']=='putra'].copy()\ncampur=train[train['gender']=='campur'].copy()\n\nfor column in ['fac_1','fac_2','fac_3','fac_4','fac_5','fac_6','fac_7','fac_8']:\n  perempuan[column].fillna(perempuan[column].mode().iloc[0], inplace = True)\n  laki[column].fillna(laki[column].mode().iloc[0], inplace=True)\n  campur[column].fillna(campur[column].mode().iloc[0], inplace=True)\n\nperempuan.iloc[:,8:15] = perempuan.iloc[:,8:15].fillna(perempuan.iloc[:,8:15].median())\nlaki.iloc[:,8:15] = laki.iloc[:,8:15].fillna(laki.iloc[:,8:15].median())\ncampur.iloc[:,8:15] = campur.iloc[:,8:15].fillna(campur.iloc[:,8:15].median())\n\ntrain_baru = pd.concat([perempuan,laki,campur],axis=0)\ntrain_baru.describe()","6e8bd974":"train_baru.describe()","1b02fbf2":"for column in [x for x in train_baru.columns if x not in ['gender','size']]:\n    train_baru[column]=train_baru[column].astype('int64')\ntrain_baru.dtypes","60a930a3":"le=LabelEncoder()\nle.fit(train_baru['gender'])\nlabel=le.transform(train_baru['gender'])\nlabel2=le.inverse_transform(label)\nlabel","7a1d31bd":"predictors = [x for x in train_baru.columns if x not in ['gender']]\npredictors","fb1985c9":"def modelfit(alg, train, predictors,labels,cv_folds=5, early_stopping_rounds=50):\n    \n    xgb_param = alg.get_xgb_params()\n    xgtrain = xgb.DMatrix(train[predictors].values, label=labels)\n    cvresult = xgb.cv(xgb_param, xgtrain, num_boost_round=alg.get_params()['n_estimators'], metrics='merror',nfold=cv_folds,early_stopping_rounds=early_stopping_rounds)\n    alg.set_params(n_estimators=cvresult.shape[0])\n    \n    #Fit the algorithm on the data\n    alg.fit(train[predictors], train['gender'],eval_metric='merror')\n        \n    #Predict training set:\n    train_predictions = alg.predict(train[predictors])\n    train_predprob = alg.predict_proba(train[predictors])[:,1]\n        \n    #Print model report:\n    print (\"\\nModel Report\")\n    print (\"Accuracy : %.4g\" % metrics.accuracy_score(train['gender'].values, train_predictions))\n    \n    feat_imp = pd.Series(alg.feature_importances_,predictors).sort_values(ascending=False)\n    feat_imp.plot(kind='bar', title='Feature Importances')\n    plt.ylabel('Feature Importance Score')","e8c5dbff":"xgb1 = XGBClassifier(\n learning_rate =0.05,\n n_estimators=1000,\n num_class=3,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'multi:softmax',\n nthread=4,\n scale_pos_weight=1,\n seed=27)\nmodelfit(xgb1, train_baru, predictors,label)","21faa8af":"y_pred = xgb1.predict(test)\ny_pred","5ce63434":"from collections import Counter\nprint(Counter(y_pred))","e82a5e26":"submit = pd.concat([test_id,pd.Series(y_pred)], axis=1)\nsubmit.columns = [\"id\", \"gender\"]\nsubmit.to_csv(index=False)","7fdf378c":"Isi Missing Value Sesuai Kelas","ea0307ad":"Label Encoding kelas untuk XGBCLassifier","52df198d":"Import Library","f61d971e":"Menyamakan tipe data dengan tipe data pada test","8bdf76c3":"Ambil Predictor","690c9317":"Fit model + Cross Validation","a4dae95a":"Buat Model "}}