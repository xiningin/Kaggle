{"cell_type":{"2a446f95":"code","fac55767":"code","2a64b255":"code","028b33a0":"code","13fe0102":"code","cd25cd7c":"code","6cff4d12":"code","fd9b08a0":"code","bd9c4c0f":"code","845ce938":"code","2e3822e1":"code","08dc061f":"code","ec60cf0c":"code","dcdc7b9d":"code","72b4ddaf":"code","3814c401":"code","a1779265":"code","ff52101c":"code","3382b928":"code","fe65325d":"code","493bd865":"code","ad94da79":"code","e021c364":"code","81a7e42d":"code","b538130c":"code","deacaf7e":"code","1ea3bba4":"markdown","a7dbfc0f":"markdown","0f59b35e":"markdown","1a734b4f":"markdown","dd1a85ea":"markdown","12fda7cf":"markdown","68419ab4":"markdown","b2474e55":"markdown","a6970353":"markdown","c05ca45c":"markdown","3af5d0f2":"markdown","09a25e73":"markdown","2d2475bc":"markdown","8ed16799":"markdown","df1ae6e2":"markdown","30335723":"markdown"},"source":{"2a446f95":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n#grafs\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Import Dependencies\n%matplotlib inline\n\n# Start Python Imports\nimport math, time, random, datetime\n\n# Data Manipulation\nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n# Machine learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\n\n# Let's be rebels and ignore warnings for now\nimport warnings\nwarnings.filterwarnings('ignore')","fac55767":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2a64b255":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/cat-in-the-dat-ii\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/cat-in-the-dat-ii\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/cat-in-the-dat-ii\/train.csv\")","028b33a0":"train.head()","13fe0102":"train.head()","cd25cd7c":"test.describe()\n","6cff4d12":"test.head()","fd9b08a0":"import missingno as msno\nmsno.matrix(train)\nmsno.matrix(test)","bd9c4c0f":"train.isnull().sum()\n","845ce938":"test.isnull().sum()","2e3822e1":"plt.figure(figsize=(6,6))\nax = sns.countplot(train.target)\n\nheight = sum([p.get_height() for p in ax.patches])\nfor p in ax.patches:\n        ax.annotate(f'{100*p.get_height()\/height:.2f} %', (p.get_x()+0.3, p.get_height()+5000),animated=True)","08dc061f":"train.columns","ec60cf0c":"test.columns","dcdc7b9d":"train.rename(columns={'nom_0':'color', 'nom_1':'objects', 'nom_3':'country', 'ord_1':'rank', 'ord_2':'temperatur'}, inplace=True)\ntest.rename(columns={'nom_0':'color', 'nom_1':'objects', 'nom_3':'country', 'ord_1':'rank', 'ord_2':'temperatur'}, inplace=True)\n\n","72b4ddaf":"train.isnull().sum()","3814c401":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nFeatures=['id', 'bin_0', 'bin_1', 'bin_2', 'bin_3', 'bin_4', 'color', 'objects',\n       'nom_2', 'country', 'nom_4', 'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9',\n       'ord_0', 'rank', 'temperatur', 'ord_3', 'ord_4', 'ord_5', 'day', 'month']\nX = train[Features].copy()\nX_test_full = test[Features].copy()\n\n# Remove rows with missing target, separate target from predictors\n#X.dropna(axis=0, subset=['target'], inplace=True)\ny = train.target              \n\n\n\n    # Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\nlow_cardinality_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and \n                        X_train_full[cname].dtype == \"object\"]\n# Low cardinality means that the column contains a lot of \u201crepeats\u201d in its data range.\n# Examples of categorical variables are race, sex, age group, and educational level. \n# While the latter two variables may also be considered in a numerical manner by using exact values for age \n# and highest grade completed\n# nunique() function to find the number of unique values over the column axis. So when it finds over 10 uniqe \n# values and the cname is a \n# dtype 'object' which means Data type objects are useful for creating structured arrays. \n# A structured array is the one which contains different types of data.\n\n### one line meaning of above####\n## for cname in a dataframes column shall return a value to 'low_cardinality_cols' if there are more then 10 uniqe values\n## and the dtype shall be a object which is a structured array that can have different types of data (lik; int, float string ect.)\n\n\n# Select numeric columns\nnumeric_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['int64', 'float64']]\n### for cname (every value, one at the time) in dataframe for columns return a value to 'numeric_cols' if the \n### dtype= int64 or float64. \n\n\n\n# Keep selected columns only\nmy_cols = low_cardinality_cols + numeric_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\n\n# One-hot encode the data (to shorten the code, we use pandas)\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nX_test = pd.get_dummies(X_test)\nX_train, X_valid = X_train.align(X_valid, join='left', axis=1)\nX_train, X_test = X_train.align(X_test, join='left', axis=1)","a1779265":"#we have to remove Nan values, we do it after in this chase just to make the model run. But it whould be more optimal\n# to change eihter drop these columns or simple remove the Nan values which in our chase is strings, so you\n# have to use a different approsh then the code below. \n\nX_train['bin_0'].fillna(X_train['bin_0'].median(), inplace = True)\nX_valid['bin_0'].fillna(X_valid['bin_0'].median(), inplace = True)\nX_test['bin_0'].fillna(X_test['bin_0'].median(), inplace = True)\n\nX_train['bin_1'].fillna(X_train['bin_1'].median(), inplace = True)\nX_valid['bin_1'].fillna(X_valid['bin_1'].median(), inplace = True)\nX_test['bin_1'].fillna(X_test['bin_1'].median(), inplace = True)\n\nX_train['bin_2'].fillna(X_train['bin_2'].median(), inplace = True)\nX_valid['bin_2'].fillna(X_valid['bin_2'].median(), inplace = True)\nX_test['bin_2'].fillna(X_test['bin_2'].median(), inplace = True)\n\nX_train['ord_0'].fillna(X_train['ord_0'].median(), inplace = True)\nX_valid['ord_0'].fillna(X_valid['ord_0'].median(), inplace = True)\nX_test['ord_0'].fillna(X_test['ord_0'].median(), inplace = True)\n\nX_train['day'].fillna(X_train['day'].median(), inplace = True)\nX_valid['day'].fillna(X_valid['day'].median(), inplace = True)\nX_test['day'].fillna(X_test['day'].median(), inplace = True)\n\nX_train['month'].fillna(X_train['month'].median(), inplace = True)\nX_valid['month'].fillna(X_valid['month'].median(), inplace = True)\nX_test['month'].fillna(X_test['month'].median(), inplace = True)","ff52101c":"X_train.isnull().sum()","3382b928":"X_valid.isnull().sum()","fe65325d":"y.head()","493bd865":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n#from xgboost import XGBRegressor\n\n\nmodel2 = RandomForestClassifier(n_estimators=150, max_depth=4, random_state=1)\nmodel = GradientBoostingClassifier(random_state=1)\nmodel3 = DecisionTreeClassifier(max_depth=3, random_state=1)\n#model=SGDClassifier(random_state=1)\n#model=ExtraTreesClassifier(random_state=1)\n#model = XGBRegressor()\n# Define the models\nmodel_1 = RandomForestClassifier(n_estimators=50, random_state=0)\nmodel_2 = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel_3 = RandomForestClassifier(n_estimators=200, min_samples_split=20, random_state=0)\n#model_4 = RandomForestClassifier(n_estimators=300, max_depth=6, random_state=1)\n\n\n\nmodel.fit(X_train, y_train)\n\n\nprint('model accuracy score',model.score(X_valid,y_valid))","ad94da79":"model2.fit(X_train,y_train)\nprint(f'Model test accuracy: {model2.score(X_valid, y_valid)*100:.3f}%')\nmodel3.fit(X_train,y_train)\nprint(f'Model test accuracy: {model3.score(X_valid, y_valid)*100:.3f}%')","e021c364":"model_1.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_1.score(X_valid, y_valid)*100:.3f}%')\nmodel_2.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_2.score(X_valid, y_valid)*100:.3f}%')\nmodel_3.fit(X_train,y_train)\nprint(f'Model test accuracy: {model_3.score(X_valid, y_valid)*100:.3f}%')","81a7e42d":"y_predictions = model_3.predict(X_test)","b538130c":"output = pd.DataFrame({'id': test.id, 'target': y_predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","deacaf7e":"if len(output) == len(test):\n    print(\"Submission dataframe is the same length as test ({} rows).\".format(len(output)))\nelse:\n    print(\"Dataframes mismatched, won't be able to submit to Kaggle.\")","1ea3bba4":"# Model prep","a7dbfc0f":"# Submission","0f59b35e":"Target","1a734b4f":"# Importing data","dd1a85ea":"# Features","12fda7cf":"Take the best model for prediction on the test dataset","68419ab4":"# Model \/ predictions","b2474e55":"# Disclaimer! This kernel is only for educational purposes and made for fun therefor the content of the kernel should not be taken to seriously","a6970353":"Check if all nan-values are gone","c05ca45c":"# Viewing data","3af5d0f2":"You can remove Nan-values with string, when you have to use code lik: train['color'] = train['color'].fillna('unknow')\nBut we will here use onehot encoding and then fill nan-values with the mean-value of the given column\n","09a25e73":"![image.png](attachment:image.png)","2d2475bc":"# Rename some columns ","8ed16799":"## Remove nan-values ","df1ae6e2":"Check if it worked","30335723":"# More predictions"}}