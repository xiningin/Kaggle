{"cell_type":{"8275f152":"code","e4c86a9f":"code","a962b2ef":"code","f1cec38b":"code","9f267c84":"code","2c078cfd":"code","1f2c0449":"code","bc6ef551":"code","4b19f6c6":"code","79d83044":"code","058235dc":"code","c856f266":"code","c37d1e0e":"markdown","89cc8298":"markdown","948ea4a2":"markdown","53c0235e":"markdown","54f34b8f":"markdown","f9fbb495":"markdown","9231a03f":"markdown"},"source":{"8275f152":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e4c86a9f":"telcom = pd.read_csv(r\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ntelcom.head()","a962b2ef":"print (\"Rows     : \" ,telcom.shape[0])\nprint (\"Columns  : \" ,telcom.shape[1])\nprint (\"\\nMissing values :  \", telcom.isnull().sum().sum())\nprint (\"\\nUnique values :  \\n\",telcom.nunique())","f1cec38b":"import math\ntelcom['MonthlyCharges'] = telcom['MonthlyCharges'].apply(lambda x: math.floor(x\/20))\ntelcom['tenure'] = telcom['tenure'].apply(lambda x: math.floor(x\/10))\n\ntelcom['TotalCharges'] = pd.to_numeric(telcom['TotalCharges'], errors='coerce')\ntelcom['TotalCharges'] = telcom['TotalCharges'].fillna(np.mean(telcom['TotalCharges']))\ntelcom['TotalCharges'] = telcom['TotalCharges'].apply(lambda x: math.floor(x\/1000))","9f267c84":"telcom.head()","2c078cfd":"import matplotlib.pyplot as plt\nx = np.arange(1,7)\ny = telcom.groupby('MonthlyCharges')['customerID'].nunique()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y)\nplt.show()","1f2c0449":"x = np.arange(1,9)\ny = telcom.groupby('tenure')['customerID'].nunique()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y)\nplt.show()","bc6ef551":"x = np.arange(telcom.TotalCharges.nunique())\ny = telcom.groupby('TotalCharges')['customerID'].nunique()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x, y)\nplt.show()","4b19f6c6":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntelcom = telcom.apply(lambda col: le.fit_transform(col))\ntelcom.head(3)","79d83044":"telcom = telcom.drop(\"customerID\", axis=1)\ny = telcom['Churn']\ntelcom = telcom.drop(\"Churn\", axis=1)","058235dc":"onehotencoder = OneHotEncoder(categories = 'auto')\ntelcom = onehotencoder.fit_transform(telcom).toarray()\nX = pd.DataFrame(telcom)\nX.head(3)","c856f266":"from keras.models import Sequential\nfrom keras.layers import Dense\n\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=66, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X, y, epochs=100, batch_size=10)\n","c37d1e0e":"<h3>Checking the nature of the data<\/h3>\n17 out of 21 columns seem **categorical** <br><br>\n4 columns seem **non-categorical**: \n* customerID\n* tenure\n* MonthlyCharges\n* TotalCharges\n\n(As seen from the Unique Values below)","89cc8298":"However, there's a problem with simple label encoding. The algorithm can assign a ranking to these numericals.<br><br>\nexample:<br>\n2 > 1 > 0 <br><br>\n\nThis would imply Electronic > Mail > Bank, which is not the case. There is not supposed to be a sense of hierarchy in the data. <br><br>\n\nTo counter this, we use **One Hot Encoding**.<br>\nThis would divide Electronic, Mail and Bank into 3 separate columns, with a simple [1,0] to indicate true or false.<br>\nThis would eliminate the possibility of hierarchy.\n","948ea4a2":"Plotting a frequency distribution graph of the 3 columns - **tenure**, **MonthlyCharges** and **TotalCharges**\n<br><br>\nThe reason of doing so is to check if the new \"categories\" are divided evenly *enough*","53c0235e":"<h2>A simple **Deep Neural Network** approach to get 94% accuracy on **customer attrition**<\/h2>","54f34b8f":"Build a **Deep Neural Network** Model. <br><br>\nAfter using **One Hot Encoding**, we have **66 columns**<br>\nTherefore, we set the input_dim to 66, and feed the data into our Deep Neural Network.","f9fbb495":"Going to change these columns to categorical by **dividing** them and **rounding down**.<br><br>\nExample: <br>\n[150, 200, 250, 370]**\/100** = [1.5, 2.0, 2.5, 3.7] <br>\n**math.floor**[1.5, 2.0, 2.5, 2.7] = [1, 2, 2, 3]","9231a03f":"Used a **label encoder** to change all the categories into **numerical** categories. <br><br>\n\nexample:<br>\n[yes, no] becomes [1, 0] <br>\n[Electronic, Mail, Bank] becomes [2, 1, 0] <br><br>\n\nNumerical Categories are easier for the machines to compute and train algorithms. <br><br>"}}