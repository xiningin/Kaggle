{"cell_type":{"63b83143":"code","e490878d":"code","9f6ac838":"code","a1171a4e":"code","2b90fdf8":"code","41ddbb45":"code","6190d5b0":"code","87d8af06":"code","a83b7e31":"code","2288c3fb":"code","fcb1e3a4":"code","260822ae":"code","6e932eb8":"code","2bca4b24":"code","2a24092c":"code","36ee6aa4":"code","171ce761":"code","460bff1b":"code","adc91045":"code","be631cf1":"code","623ca959":"code","f78a245b":"code","97e2d4a0":"code","f095872e":"markdown","0a50238d":"markdown"},"source":{"63b83143":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e490878d":"## Loading the necessary library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras import losses\nfrom keras import optimizers\nfrom keras.layers import Dropout, MaxPooling2D, Dense, BatchNormalization, Flatten, Conv2D\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split","9f6ac838":"## Reading the train dataset\ndf= pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndf.head()","a1171a4e":"# checking the shape of the data\nprint('Shape of the dataset {}'.format(df.shape))","2b90fdf8":"# Checking the unique label\nprint('Unique labels of the dataset: {}'.format(df['label'].unique()))\nprint('Number of unique classes: {}'.format(len(df['label'].unique())))","41ddbb45":"# seperating the dependent and independent features\nx = df.drop('label', axis=1)\ny = df['label']\nx","6190d5b0":"# display the label\ny","87d8af06":"# spliting the data into test and train\nx_train, x_val, y_train, y_val = train_test_split(x,y,test_size=0.2, random_state=0)\n","a83b7e31":"print('Shape of the x_train set: {}'.format(x_train.shape))\nprint('Shape of the y_train set: {}'.format(y_train.shape))\nprint('Shape of the x_test set: {}'.format(x_val.shape))\nprint('Shape of the y_test set: {}'.format(y_val.shape))","2288c3fb":"# reshaping the data\nx_train = x_train.values.reshape(-1,28,28,1)\nx_val = x_val.values.reshape(-1,28,28,1)\nprint('Shape of the x_trian image: {}'.format(x_train.shape[1:]))\nprint('Shape of the x_test image: {}'.format(x_val.shape[1:]))","fcb1e3a4":"# Displaying the 10 handwritten digit\nfor i in range(5):\n    plt.imshow(x_train[i])\n    plt.show()","260822ae":"# normalize the pixel\nx_train = x_train.astype('float32')\/255.0\nx_val = x_val.astype('float32')\/255.0","6e932eb8":"def model_creation(shape_input):\n    model = Sequential([\n        \n        Dense(300,activation='relu',input_shape = shape_input),\n        Dropout(0.20),\n        Dense(100,activation='relu'),\n        Dropout(0.20),\n        Dense(64,activation='relu'),\n        Dropout(0.20),\n        Flatten(),\n        Dense(256,activation='relu'),\n        Dropout(0.20),\n        Dense(10,activation='softmax')\n    ])\n    sgd = optimizers.Adam(lr=1e-3)\n    model.compile(optimizer = sgd, loss=losses.sparse_categorical_crossentropy, metrics=['accuracy'])\n    return model","2bca4b24":"# build a model\nshape_input = x_train.shape[1:]\nmodel = model_creation(shape_input)","2a24092c":"# print the model summary\nmodel.summary()","36ee6aa4":"# fti the model\nhistory = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=100, batch_size=50, verbose=2)","171ce761":"## plot function\ndef plot_model_evaluation(history,materics,title):\n    plt.plot(history.history[materics])\n    plt.plot(history.history['val_'+materics])\n    plt.title(title)\n    plt.legend(['train','val'])\n    plt.xlabel('Epochs')\n    plt.ylabel(materics)\n    plt.show()","460bff1b":"# ploting the accuracy\nplot_model_evaluation(history,'accuracy', 'Model Accuracy')","adc91045":"# ploting the model loss\nplot_model_evaluation(history, 'loss', 'Model Loss')","be631cf1":"x_test = test.copy()\nx_test = x_test.values.reshape(-1,28,28,1)\nx_test = x_test.astype('float32')\/255.0","623ca959":" y_pred = model.predict(x_test)","f78a245b":"my_submition = pd.DataFrame({'ImageId':test.index.values + 1, 'Label':np.argmax(y_pred, axis=1)})","97e2d4a0":"my_submition.to_csv('digit.csv', index=False)","f095872e":"# **Problem Statement**\nIn mnist dataset contains thousands of handwritten digit images. Our goal is predicat the handwritten image to digit.\n","0a50238d":"## **Model Evaluation**"}}