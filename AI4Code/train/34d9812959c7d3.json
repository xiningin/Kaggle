{"cell_type":{"896b4862":"code","f88ded74":"code","81291a4b":"code","4ca1142d":"code","b92e43a3":"code","f605eee6":"code","ba610f9e":"code","21f4165b":"code","07c4c040":"code","f85aae9b":"code","d4d714cf":"code","fe8bde29":"code","1d5dcc5a":"code","dbe9e15d":"code","608776bf":"code","89e84f19":"code","f72ce98a":"code","008c1c3c":"code","d3cf9628":"markdown","391820d0":"markdown","244ca6bc":"markdown","22e9ed1e":"markdown","742a34f3":"markdown","d843243f":"markdown","a88a4843":"markdown","6452f63f":"markdown","fe418076":"markdown","50065324":"markdown","2468df0a":"markdown","61f8f4cf":"markdown"},"source":{"896b4862":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f88ded74":"df = pd.read_excel(\"\/kaggle\/input\/productos-consumo-masivo\/output - Kaggle.xlsx\")\ndf.head()","81291a4b":"df.shape","4ca1142d":"df.dtypes","b92e43a3":"for col in df:\n    print(\">>Columna: {}\".format(col))\n    print(df[col].value_counts(dropna=False))\n    print(\"______________\")","f605eee6":"columnas_interes = [\"date\", \"prod_name\", \"prod_name_long\", \"prod_brand\", \"subcategory\", \"tags\", \"prod_unit_price\", \"prod_units\", \"prod_source\"]\ndf = df[columnas_interes]\ndf.head()","ba610f9e":"# df.prod_unit_price.astype(float)\n# Error: could not convert string to float: '70386,95' df[\"prod_unit_price\"] = \ndf[df[\"prod_unit_price\"] == \"70386,95\"] # index=15821","21f4165b":"df[\"prod_unit_price_float\"] = df[\"prod_unit_price\"].apply(lambda x: float(str(x).replace(',', '.')))","07c4c040":"df.loc[15821,\"prod_unit_price_float\"]","f85aae9b":"type(df.loc[15821,\"prod_unit_price_float\"])","d4d714cf":"print(\"Mean: {}\".format(df.prod_unit_price_float.mean()))\nprint(\"Var: {}\".format(df.prod_unit_price_float.var()))\nprint(\"Min: {}\".format(df.prod_unit_price_float.min()))\nprint(\"Max: {}\".format(df.prod_unit_price_float.max()))","fe8bde29":"df.prod_unit_price_float.plot.box()","1d5dcc5a":"df['prod_unit_price_float'].plot.hist()","dbe9e15d":"df['prod_unit_price_float'].plot.kde()","608776bf":"outliers = df[df['prod_unit_price_float'] >= 3*df['prod_unit_price_float'].std()]\noutliers.shape","89e84f19":"outliers = outliers.sort_values(by='prod_unit_price_float', ascending=False)\noutliers","f72ce98a":"outliers.head(50)","008c1c3c":"prods_err_prec = outliers[outliers['prod_unit_price_float'] > 499999]\nprods_err_prec.shape","d3cf9628":"No tiene sentido que una Gelatina colanta uva de 120 gramos, cueste 990 mil. Sin embargo, los licores al final de la lista s\u00ed pueden llegar a tener esos precios (asumiendo moneda COP). Revisamos los primeros 50 productos m\u00e1s costosos.","391820d0":"Se observa que a partir de 500.000, podr\u00eda existir problemas con la calidad de los datos.","244ca6bc":"# An\u00e1lisis unidimensional\n\nSe contabilizan las ocurrencias de cada categor\u00eda por cada feature","22e9ed1e":"Veamos los 20 valores m\u00e1s altos. Podr\u00eda existir problema en la calidad de los datos","742a34f3":"El dataset cuenta con 13 columnas y 25638 observaciones (filas).","d843243f":"# Conclusiones\n\n- El rango de fechas de las observaciones va desde el 9 de Junio de 2019 hasta el 20 de Febrero de 2020\n- La fecha que tiene m\u00e1s observaciones es el 7 de Julio de 2019 y la que menos tiene es el 20 de Febrero de 2020\n- La columna prod_id NO es un identificador \u00fanico de cada producto puesto que hay solo 6679 ocurrencias\n- Existen 132 productos sin informaci\u00f3n en prod_name. Hay un total de 6677 prod_name distintos.\n- Los cuatro productos m\u00e1s comunes son Queso Parmesano Bolsa, Yogurt slight, Jugo Hit Pet y Detergente Dersa multiusos vinagre lim\u00f3n.\n- Existe m\u00e1s datos en el nombre del producto extenso, que en el nombre de producto\n- Las 5 marcas m\u00e1s comunes son: VOGUE, ALPINA, COLANTA, JUMBO y ETERNA.\n- Hay un total de 14 subcategorias\n- Las 4 subcategorias m\u00e1s comunes son: \"L\u00e1cteos, huevos y refrigerados\", \"Despensa\", \"Vinos y Licores\" y \"Cuidado Personal\"\n- Hay 117 tags distintos\n- Hay dos categor\u00edas de \"unidad\": Unidades (m\u00e1s observaciones) y Botella. Con un total de 407 observaciones sin valor\n- Hay dos fuentes: VERDE (m\u00e1s observaciones) y AMARILLO\n- Las columnas source_type, category, product_id y prod_icon no se tendr\u00e1n en cuenta","a88a4843":"El valor de la varianza es bastante grande. Podemos intentar visualizar los outliers, rango intercuartil, mediana con un boxplot","6452f63f":"Podemos ver cu\u00e1l es el precio medio, la varianza, el precio m\u00ednimo y el m\u00e1ximo.","fe418076":"## Conclusiones precio\n\n- Se observ\u00f3 que posiblemente existan 32 productos con problemas de calidad de el precio unitario (aquellos cuyo valor es superior a 499999.0)\n- El conjunto de datos tiene sesgo positivo\n- El valor m\u00ednimo observado es 0.0\n- El valor m\u00e1ximo es 990000.0\n- La desviaci\u00f3n est\u00e1ndar es 16180.033484960792\n- Varianza 1588988862.5397732","50065324":"Se observa que los outliers tienen gran magnitud. Podemos tratar de analizarlos, dividiendo el dataset en 2; separando aquellos que esten fuera del rango intercuart\u00edl","2468df0a":"## Precio unitario del producto\n\nEsta columna requiere un procesamiento particular, puesto que pandas la est\u00e1 tomando como texto en lugar de un valor num\u00e9rico. Al intentar convertir directamente a float, aparece un error con el separador decimal. Reemplazamos el separador decimal por un '.'.","61f8f4cf":"Tambi\u00e9n podemos visualizar la distribuci\u00f3n de los datos mediante un histograma o un kde"}}