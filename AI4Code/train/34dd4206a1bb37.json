{"cell_type":{"59da6d81":"code","f38b7cee":"code","5d7daf3a":"code","061b3cec":"code","9c2eb38e":"code","544410f4":"code","7ae27a14":"code","0eab51f5":"code","09c12173":"code","24f32b1d":"code","9417f52c":"code","c34db478":"markdown"},"source":{"59da6d81":"# DATA_PATH = '..\/input\/'\nDATA_PATH = '..\/input\/shopee-product-matching\/'","f38b7cee":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2, matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nimport gc","5d7daf3a":"COMPUTE_CV = True\n\ntest = pd.read_csv(DATA_PATH + 'test.csv')\nif len(test)>3: COMPUTE_CV = False\nelse: print('this submission notebook will compute CV score, but commit notebook will not')\n\n# COMPUTE_CV = False\n\nif COMPUTE_CV:\n    train = pd.read_csv(DATA_PATH + 'train.csv')\n    train['image'] = DATA_PATH + 'train_images\/' + train['image']\n    tmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\n    train['target'] = train.label_group.map(tmp)\n#     train_gf = cudf.read_csv(DATA_PATH + 'train.csv')\nelse:\n    train = pd.read_csv(DATA_PATH + 'test.csv')\n    train['image'] = DATA_PATH + 'test_images\/' + train['image']\n#     train_gf = cudf.read_csv(DATA_PATH + 'test.csv')\n    \nprint('train shape is', train.shape )\ntrain.head()","061b3cec":"# cpu\u5355\u6838\ndef orb_det(path):\n    orb = cv2.ORB_create(300)\n    img = cv2.imread(path, 0)\n    return orb.detectAndCompute(img, None)[1]\n\nfrom joblib import Parallel, delayed, dump","9c2eb38e":"img_orbs = Parallel(n_jobs=2)(delayed(orb_det)(path) \n                for path in tqdm_notebook(train['image'].values[:1000]))","544410f4":"img_orbs_feat = np.vstack(img_orbs)\nimg_orbs_feat.shape","7ae27a14":"from sklearn.cluster import MiniBatchKMeans\n\n# \u5185\u5b58\u9650\u5236\uff0c\nkmeans = MiniBatchKMeans(n_clusters=5000, random_state=0, batch_size=600)\nkmeans = kmeans.fit(img_orbs_feat[:100000])","0eab51f5":"from scipy.cluster.vq import vq","09c12173":"img_orb_code_list = []\n# \u5bf9\u6bcf\u5f20\u56fe\u50cf\uff0c\u8ba1\u7b97\u5173\u952e\u70b9\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\nfor img_orb in tqdm_notebook(img_orbs):\n    img_orb_code = np.zeros(5000)\n    idx = vq(img_orb, kmeans.cluster_centers_)[0]\n    img_orb_code[idx] += 1\n    \n    img_orb_code_list.append(img_orb_code)","24f32b1d":"img_orb_code_list = np.vstack(img_orb_code_list)","9417f52c":"# Perform Tf-Idf vectorization\nnbr_occurences = np.sum( (img_orb_code_list > 0) * 1, axis = 0)\nidf = np.array(np.log((1.0*len(img_orb_code_list)+1) \/ (1.0*nbr_occurences + 1)), 'float32')\n\n# Perform L2 normalization\nim_features = img_orb_code_list*idf\n\nfrom sklearn.preprocessing import normalize\nim_features = normalize(im_features, norm='l2')","c34db478":"BoF is one of the popular visual descriptors used for visual data classification. BoF is inspired by a concept called Bag of Words that is used in document classification. A bag of words is a sparse vector of occurrence counts of words; that is, a sparse histogram over the vocabulary. In computer vision, a bag of visual words of features is a sparse vector of occurrence counts of a vocabulary of local image features.\n\nBoF typically involves in two main steps. First step is obtaining the set of bags of features. This step is actually an offline process. We can obtain set of bags for particular features and then use them for creating BoF descriptor. The second step is we cluster the set of given features into the set of bags that we created in first step and then create the histogram taking the bags as the bins. This histogram can be used to classify the image or video frame.\n\n![image.png](attachment:image.png)\n\n\nYou can check my other notebooks:\n\n- [Shopee Products Matching: Image Part [English+\u4e2d\u6587]](https:\/\/www.kaggle.com\/finlay\/shopee-products-matching-image-part-english)\n- [Shopee Products Matching: Text Part [English+\u4e2d\u6587]](https:\/\/www.kaggle.com\/finlay\/shopee-products-matching-text-part-english)\n- [Shopee Products Matching: BoF Part [English+\u4e2d\u6587]](https:\/\/www.kaggle.com\/finlay\/shopee-products-matching-bof-part-english)\n- [Shopee Products Matching: Augment Part [English\u4e2d\u6587]](https:\/\/www.kaggle.com\/finlay\/shopee-products-matching-augment-part-english)\n- [[Unsupervised] Image + Text Baseline in 20min](https:\/\/www.kaggle.com\/finlay\/unsupervised-image-text-baseline-in-20min)"}}