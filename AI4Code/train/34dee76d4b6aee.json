{"cell_type":{"bc5d84dd":"code","132e36be":"code","c7276026":"code","c1db1c55":"code","5bcaf438":"code","54228738":"code","d40b572e":"code","269f791c":"code","4a35c45a":"code","7fc47f4a":"code","dec8bc42":"code","598e6b97":"code","7dda9df7":"code","affd349e":"markdown","48eb3481":"markdown","efa0a773":"markdown","1b71ebed":"markdown","f6f1add6":"markdown","f93d6dcb":"markdown","76c81a96":"markdown","b82c32e6":"markdown","14649cc4":"markdown","f420b8fe":"markdown"},"source":{"bc5d84dd":"import tensorflow as tf\nimport keras\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os\nimport glob\nimport pickle","132e36be":"import random \nfrom tensorflow.keras.layers import Conv2D,Dense,MaxPooling2D,Dropout,Flatten,Activation,MaxPool2D,BatchNormalization\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nfrom keras.utils import plot_model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\nprint(\"Tensorflow version \" + tf.__version__)  ","c7276026":"CATAGORIES=['Bishop','King','Knight','Pawn','Queen','Rook'] ## define the list of number of classes we are going to use.\n#DATADIR='..\/input\/chessman-image-dataset\/Chessman-image-dataset\/Chess'\nIMG_SIZE=300  ## mention size of image you wanted","c1db1c55":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                    validation_split=0.35,\n                                    rotation_range=20,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                   shear_range=3, \n                                    zoom_range=50,\n                                    horizontal_flip=True,\n                                   vertical_flip=True)","5bcaf438":"batch_size=32\nIMG_HEIGHT=300\ntrain_dir='\/kaggle\/input\/chessman-image-dataset\/Chessman-image-dataset\/Chess'\nos.listdir(train_dir)","54228738":"X_train_datagen=train_datagen.flow_from_directory(batch_size=batch_size,\n                                                   directory=train_dir,\n                                                   shuffle=True,\n                                                   target_size=(IMG_HEIGHT, IMG_HEIGHT),\n                                                   subset='training',\n                                                   class_mode='categorical',\n                                                   color_mode='grayscale',\n                                                   seed=42)\n                                                  \n                                                  \nvalidation_generator = train_datagen.flow_from_directory(\n                                                        directory=train_dir,\n                                                        target_size=(IMG_HEIGHT, IMG_HEIGHT),\n                                                        color_mode='grayscale',\n                                                        batch_size=batch_size,\n                                                        class_mode='categorical',\n                                                        subset='validation',\n                                                        shuffle=True,\n                                                        seed=42)","d40b572e":"input_shape=(32, 300, 300, 1)","269f791c":"model = Sequential([\n    Conv2D(16, (3,3), input_shape=input_shape[1:], padding='same', activation='relu'),\n    MaxPooling2D(pool_size=(2,2)),\n    Conv2D(32, (3,3), padding='same', activation='relu'),\n    MaxPooling2D(pool_size=(2,2)),\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dropout(0.5),\n    Dense(6, activation='softmax')\n])\n","4a35c45a":"model.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","7fc47f4a":"Early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)#to prevent overffiting of dataset","dec8bc42":"history = model.fit_generator(X_train_datagen,\n                              validation_data=validation_generator,\n                              epochs=250,\n                              verbose=0)","598e6b97":"plt.figure(1)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model_Accuracy')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'validation'], loc='upper left')","7dda9df7":"def prepare(file):\n    img_array = cv2.imread(file, cv2.IMREAD_GRAYSCALE)\n    new_array = cv2.resize(img_array, (IMG_HEIGHT, IMG_HEIGHT))\n    plt.imshow(new_array)\n    return new_array.reshape(-1, IMG_HEIGHT, IMG_HEIGHT, 1)\nimage='..\/input\/chessman-image-dataset\/Chessman-image-dataset\/Chess\/Bishop\/00000000.JPG'\nprediction = model.predict([prepare(image)])\nprediction = list(prediction[0])\ntemp=CATAGORIES[prediction.index(max(prediction))]\nplt.title(temp)\nplt.show()","affd349e":"### Compile the model","48eb3481":"# Conclusion\n### The accuracy of this model is about 22% which is far from perfect, but the data has 6 different classes and the amount of pictures is quite small. So it's acceptable, I may use a better pretrained model next time.","efa0a773":"# Divide the data into the training data and validation data\n### Using function flow_from_directory to get the data divided manually","1b71ebed":"# Fitting the model\n### Using function fit_generator with high number of epoch","f6f1add6":"# Building a model by Con2D\n### Using maxpooling to smooth the features","f93d6dcb":"# Imports","76c81a96":"### Presenting how the model works","b82c32e6":"### Plotting the result","14649cc4":"### Checking the tensorflow version","f420b8fe":"# Preparing the data\n### The categories of data: Bishop, King, Kinght, Pawn, Queen, Rook"}}