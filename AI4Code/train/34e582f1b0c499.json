{"cell_type":{"18717b92":"code","97357552":"code","5493e303":"code","1dfe1355":"code","2fd21098":"code","b56ba7e7":"code","4295eb9c":"code","cbb8c93c":"code","893dd19f":"code","e8a2eaa4":"code","6b3f0dfb":"code","4ddabf4a":"code","dc107af5":"code","8b9e405d":"code","20bdca1b":"code","c155e477":"code","c0eb6f65":"code","f1df2a53":"code","02ab25f6":"code","b8a827d7":"code","a8f7c7e8":"code","bcbb21d4":"code","211e2f3d":"code","e3afbe9a":"code","94f136fd":"code","a5b3f036":"code","15322f01":"code","13a36995":"code","f562a57d":"code","55b56a90":"code","f4114624":"code","6a035fb3":"code","1e87fe18":"code","93c5211d":"code","720ac26d":"code","2381272c":"code","5e5559f9":"code","e8f3f1af":"code","f207b835":"code","cb9ac337":"code","f74f24f9":"code","edebb058":"code","04159947":"code","d25603c6":"code","2614b542":"code","73635743":"code","6db310b4":"code","282dbac2":"code","ea44d675":"code","c6245ef1":"code","46ccbf7d":"code","fc92c0ea":"code","b1e8f2db":"code","aa659467":"code","2746a15e":"code","1d24da88":"code","083815eb":"code","a42fcc0a":"code","65d8e5d5":"code","fafa6b70":"code","01ba3313":"code","702ba0f3":"code","53f9eedf":"code","7f8b856c":"code","3fab3833":"code","7e876890":"code","cdc8160d":"code","27a559ad":"code","739ef136":"code","74a58ed9":"code","1a60102f":"code","c10e3784":"code","1cce1d92":"code","bcde21f1":"code","3279ac59":"code","3f362a92":"code","a56fb5cd":"code","f87e8350":"code","f0f3af18":"code","4b9798b7":"code","06fa21e5":"code","a42b3b5b":"code","c1893364":"code","d0b7c54c":"code","28e06761":"code","2850c16d":"code","e904e9cc":"code","6cd05160":"code","f566ed9e":"code","18ed4e4a":"code","46c57a16":"code","48d9defc":"markdown","8319804a":"markdown","aed44600":"markdown","93ab69b1":"markdown","a9609d00":"markdown","5f3774d6":"markdown","918fee8c":"markdown","a427d21a":"markdown","c6a3552b":"markdown","515e157e":"markdown","f3e28e9d":"markdown","94450ae1":"markdown","8f60b063":"markdown","d5cd0ba8":"markdown","5bfbf7ad":"markdown","5b736153":"markdown","7d04045f":"markdown","781cfc64":"markdown","88c8a814":"markdown","7fdc0b55":"markdown"},"source":{"18717b92":"import gc","97357552":"import tensorflow as tf","5493e303":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier","1dfe1355":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndf_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0)#, skiprows=lambda x: x%20!=0)\n#df_test = #test\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3092train\u3092\u53c2\u8003\u306b\u66f8\u3044\u3066\u898b\u307e\u3057\u3087\u3046\uff01\ndf_test = pd.read_csv('..\/input\/homework-for-students2\/test.csv', index_col=0)#, skiprows=lambda x: x%20!=0)","2fd21098":"# DataFrame\u306eshape\u3067\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ndf_train.shape, df_test.shape","b56ba7e7":"# \u5148\u982d5\u884c\u3092\u307f\u3066\u307f\u307e\u3059\u3002\n#df_train.head()","4295eb9c":"#df_test.head()","cbb8c93c":"#df_train[(df_train.loan_amnt>1000)&&(df_train.grade =='A')]","893dd19f":"#df_train[df_train.loan_condition==1]","e8a2eaa4":"#df_train[df_train.loan_condition==1].loan_amnt.mean()","6b3f0dfb":"# \u4e0a\u306e\u8cb8\u3057\u5012\u308c\u305f\u30ed\u30fc\u30f3\u306b\u5bfe\u3059\u308b\u3082\u306e\u3092\u53c2\u8003\u306b\u3001\u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d\u3092\u7b97\u51fa\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n#df_train[df_train.loan_condition==0].loan_amnt.mean()","4ddabf4a":"y_train = df_train.loan_condition\n#loan_condition\u524a\u9664\nX_train = df_train.drop(['loan_condition'], axis =1)\n\nX_test = df_test","dc107af5":"##\u7279\u5fb4\u91cf\u8ffd\u52a0","8b9e405d":"#\u8fd4\u6e08\u56de\u6570\nX_train[\"payment_count\"]=X_train[\"loan_amnt\"]\/X_train[\"installment\"]\nX_test[\"payment_count\"]=X_test[\"loan_amnt\"]\/X_test[\"installment\"]","20bdca1b":"# \u30af\u30ec\u30b8\u30c3\u30c8\u5229\u7528\u958b\u59cb\u5e74\u6708\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001Issue_d\u3092\u3067\u88dc\u5b8c\nX_train['earliest_cr_line'].fillna(X_train[\"issue_d\"],inplace=True)\nX_test['earliest_cr_line'].fillna(X_test[\"issue_d\"],inplace=True)\n\n#\u6700\u521d\u306b\u5229\u7528\u3057\u3066\u304b\u3089\u306e\u65e5\u6570\nX_train[\"credit_hist_days\"]=(pd.to_datetime(X_train[\"issue_d\"])-pd.to_datetime(X_train['earliest_cr_line'])).apply(lambda x: x.days)\nX_test[\"credit_hist_days\"]=(pd.to_datetime(X_test[\"issue_d\"])-pd.to_datetime(X_test['earliest_cr_line'])).apply(lambda x: x.days)","c155e477":"#tot_cur_bal_avg\u7d71\u8a08\u91cf\u8ffd\u52a0\nX_train[\"tot_cur_bal_avg_ratio\"]=X_train[\"tot_cur_bal\"]\/X_train[\"tot_cur_bal\"].mean()\nX_test[\"tot_cur_bal_avg_ratio\"]=X_train[\"tot_cur_bal\"]\/X_test[\"tot_cur_bal\"].mean()","c0eb6f65":"X_train","f1df2a53":"from sklearn.preprocessing import StandardScaler , MinMaxScaler","02ab25f6":"#scaler = StandardScaler()\nscaler = MinMaxScaler()","b8a827d7":"##\u5225\u3005\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\n#X_train['loan_amnt'] = scaler.fit_transform(X_train[['loan_amnt']])\n#X_test['loan_amnt'] = scaler.transform(X_test[['loan_amnt']])\n\n##Train \u3068\u3000Test\u3092\u4e00\u7dd2\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b \nscaler.fit(pd.concat([X_train['annual_inc'],X_test['annual_inc']]).to_frame())\nX_train['annual_inc']  = scaler.transform(X_train[['annual_inc']])\nX_test['annual_inc']  = scaler.transform(X_test[['annual_inc']])     ","a8f7c7e8":"##Train \u3068\u3000Test\u3092\u4e00\u7dd2\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b \nscaler.fit(pd.concat([X_train['installment'],X_test['installment']]).to_frame())\nX_train['installment']  = scaler.transform(X_train[['installment']])\nX_test['installment']  = scaler.transform(X_test[['installment']])     ","bcbb21d4":"#plt.figure(figsize=[7,7])\n#X_train.annual_inc.hist(bins=100)\n#X_test.annual_inc.hist(bins=20)\n#plt.show","211e2f3d":"#plt.figure(figsize=[7,7])\n#np.log1p(X_train.annual_inc).hist(bins=100)\n#np.log1p(X_test.annual_inc).hist(bins=10)\n#plt.show","e3afbe9a":"#plt.figure(figsize=[7,7])\n#X_train.annual_inc.apply(np.log).hist(bins=100)\n#np.log1p(X_train.annual_inc).hist(bins=100)\n#X_train.annual_inc.apply(np.log).hist(bins=100)\n#plt.show","94f136fd":"##\u7d66\u4e0e\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307e\u3059\n#scaler.fit(pd.concat([X_train['annual_inc'],X_test['annual_inc']]).to_frame())\n#X_train['annual_inc']  = scaler.transform(X_train[['annual_inc']])\n#X_test['annual_inc']  = scaler.transform(X_test[['annual_inc']])     \nX_train['annual_inc'] = X_train['annual_inc'].apply(np.log1p)\nX_test['annual_inc'] = X_test['annual_inc'].apply(np.log1p)","a5b3f036":"# dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","15322f01":"X_train['emp_title'].head(10) # \u30ab\u30c6\u30b4\u30ea\u3088\u308a\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u6271\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044","13a36995":"cats","f562a57d":"#col = 'purpose'\n\n#encoder = OneHotEncoder()\n#enc_train = encoder.fit_transform(X_train[col].values)\n#enc_test = encoder.transform(X_test[col].values)","55b56a90":"#enc_train.head()","f4114624":"#enc_test.head()","6a035fb3":"#X_train.head()","1e87fe18":"#X_train =pd.concat([X_train, enc_train], axis=1)","93c5211d":"#X_train.head()","720ac26d":"# Onehot\u306e\u4f8b\u3092\u53c2\u8003\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n# https:\/\/contrib.scikit-learn.org\/categorical-encoding\/ordinal.html\n#encoder = OrdinalEncoder()\n#enc_train = encoder.fit_transform(X_train[col].values)\n#enc_test = encoder.transform(X_test[col].values)\n","2381272c":"#col = 'purpose'\n#value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\n#summary = X_train[col].value_counts()\n#summary","5e5559f9":"# map\u3059\u308b\u3002\n#enc_train = X_train[col].map(summary)\n#enc_test = X_test[col].map(summary)","e8f3f1af":"#Purpose\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'purpose'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","f207b835":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","cb9ac337":"X_train = X_train.rename(columns={0: 'purpose2'})\nX_test = X_test.rename(columns={'purpose': 'purpose2'})","f74f24f9":"X_test.head()","edebb058":"#Grade\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'grade'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","04159947":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","d25603c6":"X_train = X_train.rename(columns={0: 'grade2'})\nX_test = X_test.rename(columns={0: 'grade2'})","2614b542":"#Sub Grade\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'sub_grade'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","73635743":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","6db310b4":"X_train = X_train.rename(columns={0: 'sub_grade2'})\nX_test = X_test.rename(columns={'sub_grade': 'sub_grade2'})","282dbac2":"##title\u306e\u5185\u5bb9\u4fee\u6b63  \uff12\u3001\uff13\u3001\uff14\u3001\uff15\u3001\uff16\u3092\u8a66\u3057\u305f\u304c\u3001\uff13\u9805\u76ee\u5909\u66f4\u304c\u3082\u3063\u3068\u3082AUC\u9ad8\u3044\nX_train.loc[X_train['title'] =='Debt Consolidation','title'] = 'Debt consolidation'\nX_train.loc[X_train['title'] == 'consolidation', 'title'] = 'Debt consolidation'\nX_train.loc[X_train['title'] == 'debt consolidation', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'Consolidation', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'Debt Consolidation Loan', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'Consolidation Loan', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'Consolidate', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'consolidate', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'DEBT CONSOLIDATION', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'debt consolidation loan', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'Debt consolidation loan', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'consolidation loan', 'title'] = 'Debt consolidation'\n#X_train.loc[X_train['title'] == 'debt_consolidation', 'title'] = 'Debt consolidation'\n\n\n\nX_test.loc[X_test['title'] =='Debt Consolidation','title'] = 'Debt consolidation'\nX_test.loc[X_test['title'] == 'consolidation', 'title'] = 'Debt consolidation'\nX_test.loc[X_test['title'] == 'debt consolidation', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'Consolidation', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'Debt Consolidation Loan', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'Consolidation Loan', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'Consolidate', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'consolidate', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'DEBT CONSOLIDATION', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'debt consolidation loan', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'Debt consolidation loan', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'consolidation loan', 'title'] = 'Debt consolidation'\n#X_test.loc[X_test['title'] == 'debt_consolidation', 'title'] = 'Debt consolidation'","ea44d675":"u = X_train['emp_length'].unique()\nprint(u)\nprint(type(u))","c6245ef1":"col = 'emp_length'\n# value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\nsummary = X_train[col].value_counts()\nsummary","46ccbf7d":"#\u52e4\u7d9a\u5e74\u6570\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\nemp_leng_transfer = pd.DataFrame({'emp_length' : u,\n                                                                  'emp_years' : [10,2,1,3,0,7,5,6,8,0.5,4,9]})","fc92c0ea":"X_train = X_train.merge(emp_leng_transfer, on='emp_length', how ='left')\nX_train = X_train.drop(['emp_length'], axis =1)\nX_test = X_test.merge(emp_leng_transfer, on='emp_length', how ='left')\nX_test = X_test.drop(['emp_length'], axis =1)","b1e8f2db":"col = 'emp_years'\n# value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\nsummary = X_train[col].value_counts()\nsummary","aa659467":"df_statelatlong = pd.read_csv('..\/input\/homework-for-students2\/statelatlong.csv')\ndf_US_GDP_by_State = pd.read_csv('..\/input\/homework-for-students2\/US_GDP_by_State.csv')\n#\u540d\u524d\u5909\u66f4\ndf_statelatlong = df_statelatlong.rename(columns={'State': 'addr_state'})\n#\u540d\u524d\u5909\u66f4\ndf_US_GDP_by_State = df_US_GDP_by_State.rename(columns={'State': 'City'})","2746a15e":"#\u30de\u30b9\u30bf\u306e\u7d50\u5408\ndf_statelatlong = pd.concat([df_statelatlong.drop(['City'], axis=1), df_US_GDP_by_State], axis = 1,join='inner')","1d24da88":"#statelatlong\u3092\u7d50\u5408\n#X_train = pd.concat([X_train.drop(['addr_state'], axis=1), df_statelatlong], axis = 1,join='inner')\n#X_test = pd.concat([X_test.drop(['addr_state'], axis=1), df_statelatlong], axis = 1,join='inner')\n\nX_train=pd.merge(X_train, df_statelatlong, on = 'addr_state', how ='left')\nX_test=pd.merge(X_test, df_statelatlong, on = 'addr_state', how ='left')\n\nX_train = X_train.drop(['City'], axis=1)\nX_train = X_train.drop(['year'], axis=1)\nX_train = X_train.drop(['addr_state'], axis=1)\n\nX_test = X_test.drop(['City'], axis=1)\nX_test = X_test.drop(['year'], axis=1)\nX_test = X_test.drop(['addr_state'], axis=1)\n","083815eb":"TXT_train = X_train.emp_title.copy()\nTXT_test = X_test.emp_title.copy()\n\ncats.remove('emp_title')","a42fcc0a":"#\u4e0d\u8981\u5217\u306e\u524a\u9664\u3000\n#title\u306fPurpose\u3068\u304a\u306a\u3058\u306a\u306e\u3067\u3001\u524a\u9664\n#X_train = X_train.drop(['title'],axis=1)\n#X_test = X_test.drop(['title'],axis=1)\n#zip_code\u3082\u524a\u9664\n#X_train = X_train.drop(['zip_code'],axis=1)\n#X_test = X_test.drop(['zip_code'],axis=1)\n\n#\u30ed\u30fc\u30f3\u958b\u59cb\u6642\u671f\u306f\u30c6\u30b9\u30c8\u3068\u9055\u3046\u306e\u3067\u524a\u9664\n#X_train = X_train.drop(['issue_d'],axis=1)\n#X_test = X_test.drop(['issue_d'],axis=1)\n\n#cats.remove('issue_d')\ncats.remove('purpose')\ncats.remove('emp_length')\ncats.remove('addr_state')\ncats.remove('grade')\ncats.remove('sub_grade')\n#cats.remove('zip_code')\n#cats.remove('title')\n","65d8e5d5":"cats","fafa6b70":" # \u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\nencoder = OrdinalEncoder(cols=cats)","01ba3313":"X_train[cats]=encoder.fit_transform(X_train[cats])\nX_test[cats]=encoder.transform(X_test[cats])","702ba0f3":"#X_train['titlenull_flg']=X_train.emp_title.isnull().astype(int)\n#X_test['titlenull_flg']=X_test.emp_title.isnull().astype(int)","53f9eedf":"#X_train['titlenull_flg'].value_counts()","7f8b856c":"##\u52e4\u7d9a\u5e74\u6570\nX_train['titlenull_flg']=X_train['emp_years'].apply(lambda x : 1 if x == 0 else 0)\nX_test['titlenull_flg']=X_test['emp_years'].apply(lambda x : 1 if x == 0 else 0)","3fab3833":"X_train['titlenull_flg'].value_counts()","7e876890":"# \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046 \nX_train.drop(['emp_title'],axis = 1, inplace=True)\nX_test.drop(['emp_title'],axis = 1, inplace=True)\n\nX_train.fillna(-9999,inplace=True)\nX_test.fillna(-9999,inplace=True)\n\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","cdc8160d":"TXT_train.fillna('#', inplace=True) #inplace\u306f\u4e0a\u66f8\u304d\nTXT_test.fillna('#', inplace=True)","27a559ad":"tfidf = TfidfVectorizer(max_features=1000, use_idf=True) #\u30ab\u30e9\u30e0\u65b9\u5411\u306b\u6b63\u898f\u5316\u3059\u308b","739ef136":"tfidf","74a58ed9":"TXT_train = tfidf.fit_transform(TXT_train)\nTXT_test = tfidf.transform(TXT_test)","1a60102f":"#\u758e\u884c\u5217\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\nTXT_train","c10e3784":"TXT_train.shape","1cce1d92":"# todense\u3067\u5bc6\u884c\u5217\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u304c\u3001\u307b\u3069\u3093\u3069\u30bc\u30ed\u3067\u3042\u308b\u3053\u3068\u304c\u307f\u3066\u53d6\u308c\u307e\u3059\u3002\nTXT_train.todense()","bcde21f1":"TXT_train","3279ac59":"# Return a Coordinate (coo) representation of the Compresses-Sparse-Column (csc) matrix.\ncoo_train = TXT_train.tocoo(copy=False)\ncoo_test = TXT_test.tocoo(copy=False)","3f362a92":"coo_train","a56fb5cd":"#DataFrame\u5f62\u5f0f\u306b\u5024\u3092\u53d6\u308a\u51fa\u3057\ndf_txt_train=pd.DataFrame({'index': coo_train.row, 'col': coo_train.col, 'data': coo_train.data}\n                 )[['index', 'col', 'data']].sort_values(['index', 'col']\n                 ).reset_index(drop=True)\ndf_txt_test=pd.DataFrame({'index': coo_test.row, 'col': coo_test.col, 'data': coo_test.data}\n                 )[['index', 'col', 'data']].sort_values(['index', 'col']\n                 ).reset_index(drop=True)","f87e8350":"#df_txt_train.info()","f0f3af18":"#df_txt_test.info()","4b9798b7":"#Merge\u306e\u969b\u306b\u30ad\u30fc\u3068\u306a\u308bndex\u304c\u8907\u6570\u3042\u308b\u306e\u3067\u3001Group\u3000by\u3000\u305d\u308c\u4ee5\u5916\u306e\u5024\u306f\u6700\u5c0f\u5024\u3092\u3068\u308b\u3002\u3002\u3002\u3002\u3002\u3053\u308c\u3067\u3044\u3044\u306e\u304b\uff01\uff1f\ndf_txt_train=df_txt_train.groupby(['index'], as_index=False)['col','data'].min()\ndf_txt_test=df_txt_test.groupby(['index'], as_index=False)['col','data'].min()","06fa21e5":"#index\u5217\u306e\u8ffd\u52a0\nX_train['index'] = X_train.index\nX_test['index'] = X_test.index","a42b3b5b":"##X_train = pd.concat([X_train, df_txt_train], axis = 1)\nX_train = pd.merge(X_train, df_txt_train, on = 'index', how ='outer')\nX_test = pd.merge(X_test, df_txt_test, on = 'index', how ='outer')","c1893364":"#index\u306f\u524a\u9664\nX_train = X_train.drop(['index'],axis=1)\nX_test = X_test.drop(['index'],axis=1)","d0b7c54c":"X_train.fillna(-9999,inplace=True)\nX_test.fillna(-9999,inplace=True)","28e06761":"X_train","2850c16d":"import lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n# CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores = []\n\nskf = StratifiedKFold(n_splits=6, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    \n#clf = GradientBoostingClassifier()\n    #\u30c7\u30d5\u30a9\u30eb\u30c8\u3000LGBM\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                               importance_type='split', learning_rate=0.05, max_depth=-1,\n                              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                               n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                               random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n    \n    #clf.fit(X_train_, y_train_)\n    clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n    \n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    \n    print('CV Score of Fold_%d is %f' % (i, score))","e904e9cc":"# \nprint(np.mean(scores))\nprint(scores)","6cd05160":"# Scaller issue_d\nprint(np.mean(scores))\nprint(scores)","f566ed9e":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict_proba(X_test)[:,1]","18ed4e4a":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# \u3053\u3061\u3089\u3082\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b20\u5206\u306e\uff11\u306b\u9593\u5f15\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u756a\u3067\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u7528\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)#, skiprows=lambda x: x%20!=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","46c57a16":"submission.head()","48d9defc":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf","8319804a":"## X\u3068y\u306b\u5206\u5272\u3057\u307e\u3059","aed44600":"## emp_title\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u898b\u3048\u308b\u306e\u3067\u4e00\u65e6\u5206\u96e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002","93ab69b1":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092\u9664\u3044\u3066\u3001\u6b20\u640d\u5024\uff08\u7a7a\u6b04\uff09\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","a9609d00":"## Count\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","5f3774d6":"## addr_state\u306e\u7d50\u5408","918fee8c":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","a427d21a":"## \u30e2\u30c7\u30ea\u30f3\u30b0","c6a3552b":"##dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u3092\u5168\u3066Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304a\u304d\u307e\u3059\u3002","515e157e":"# \u8fd4\u6e08\u984d\u3092\u6b63\u898f\u5316\u3000installment","f3e28e9d":"# \u30ed\u30fc\u30f3\u984d\u3092\u6b63\u898f\u5316","94450ae1":"# AI Academy FE\u8ab2\u984c\u63d0\u51fa 11\/20 07:00","8f60b063":"## \u7121\u8077\u30d5\u30e9\u30b0\u8ffd\u52a0","d5cd0ba8":"## \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8272\u3005\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046","5bfbf7ad":"## Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","5b736153":"##  One-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","7d04045f":"### \u307e\u305a\u306f\u6b20\u640d\u5024\u3092\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","781cfc64":"## Target\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","88c8a814":"### tfidf\u3067\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u306a\u304a\u3001idf\u306fTree\u7cfb\u3067\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u3084NN\u3067\u306f\u6709\u7528\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u9069\u7528\u3057\u3066\u304a\u304d\u307e\u3059\u3002","7fdc0b55":"## \u7d66\u4e0e\u984d\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306ftree\u7cfb\u306b\u5bfe\u3057\u3066\u306f\u307b\u307c\u52b9\u679c\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3069\u306e\u3088\u3046\u306a\u5909\u63db\u304c\u52b9\u679c\u7684\u304b\u3001\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u3080\u4e2d\u3067\u8272\u3005\u8003\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002"}}