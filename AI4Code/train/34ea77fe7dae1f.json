{"cell_type":{"38c9a6fc":"code","3a5d8e67":"code","a7bad304":"code","87e01c58":"code","c34aa829":"code","e9f95e87":"code","87ebd4c4":"code","ce3a53e1":"code","dbd54982":"code","151997c2":"code","60139cf2":"code","9a4d931b":"code","a08db02d":"code","d79ba005":"code","3bae2a96":"code","7dacf740":"code","cfeafd8c":"code","dd4500ad":"code","8d69e5c7":"code","b757fbf6":"code","09dfb99f":"code","d17bb899":"code","d7f15be2":"code","a77f89fd":"code","db885dfd":"code","3269b630":"code","e1c477db":"code","c0a70f3b":"markdown"},"source":{"38c9a6fc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as  tf\nimport keras\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Flatten, Dense, Dropout, Lambda\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.python.keras.utils.vis_utils import plot_model\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import layers\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image, ImageFont, ImageDraw\nimport random\nimport sklearn\nfrom sklearn.model_selection import train_test_split","3a5d8e67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7bad304":"test= pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')","87e01c58":"train_data = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest_data =pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\nsample = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')\npd.set_option('display.max_columns', None)","c34aa829":"train_data.head()","e9f95e87":"test_data.head()","87ebd4c4":"train_data.info()\n","ce3a53e1":"test_data.info()","dbd54982":"sample.head()","151997c2":"train_data.isnull().sum()","60139cf2":"train_data.corr()","9a4d931b":"train_data['target'].unique()","a08db02d":"labels=['Class_1', 'Class_2', 'Class_3', 'Class_4']\ncolors=['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)\n\nplt.figure(figsize=(8,8))\nplt.pie(train_data['target'].value_counts(), explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.show()","d79ba005":"train_data.describe()","3bae2a96":"test_data= test_data.drop(['id'], axis=1)\ntrain_data= train_data.drop(['id'], axis=1)\ntrain= train_data.drop(['target'], axis=1)\nnum_features = train.shape[1]\nnum_features","7dacf740":"for i in range(num_features):\n    mean, std = train_data[f'feature_{i}'].mean(), train_data[f'feature_{i}'].std()\n    train_data[f'feature_{i}'] = train_data[f'feature_{i}'].apply(lambda x : (x-mean)\/std)\n    test_data[f'feature_{i}'] = test_data[f'feature_{i}'].apply(lambda x : (x-mean)\/std)","cfeafd8c":"label_dict = {val:idx for idx, val in enumerate(sorted(train_data['target'].unique()))}\ntrain_data['target'] = train_data['target'].map(label_dict)\n\ntarget = train_data['target']\ntrain_data.drop(['target'], inplace=True, axis=1)","dd4500ad":"train_data = train_data.values\ntarget = target.values\ntarget =  to_categorical(target)","8d69e5c7":"x_train, x_test, y_train, y_test = train_test_split(train_data,target, test_size=0.18, random_state=220, stratify=target)","b757fbf6":"num_classes = 4","09dfb99f":"def dnn_model():\n    input_layer =Input(shape=(num_features,))\n    #layer_1\n    dense_1=  Dense(512, activation='relu')(input_layer)\n    batch_norm_1 = layers.BatchNormalization()(dense_1)\n    \n    dense_2 = Dense(256, activation='relu')(batch_norm_1)\n    batch_norm_2 = layers.BatchNormalization()(dense_2)\n    drop_1= layers.Dropout(0.2)(batch_norm_2)\n    \n    dense_3 = Dense(256, activation='relu')(drop_1)\n    batch_norm_3 = layers.BatchNormalization()(dense_3)\n    drop_2 = layers.Dropout(0.2)(batch_norm_3)\n    \n    \n    dense_4 = Dense(128, activation='relu')(drop_2)\n    batch_norm_4 = layers.BatchNormalization()(dense_4)\n    drop_3 = layers.Dropout(0.2)(batch_norm_4)\n    \n    \n    #layer_2\n    dense_1_2=  Dense(1024, activation='relu')(input_layer)\n    batch_norm_1_2 = layers.BatchNormalization()(dense_1_2)\n    \n    dense_2_2 = Dense(512, activation='relu')(batch_norm_1_2)\n    batch_norm_2_2 = layers.BatchNormalization()(dense_2_2)\n    drop_1_2= layers.Dropout(0.2)(batch_norm_2_2)\n    \n    dense_3_2 = Dense(512, activation='relu')(drop_1_2)\n    batch_norm_3_2 = layers.BatchNormalization()(dense_3_2)\n    drop_2_2 = layers.Dropout(0.2)(batch_norm_3_2)\n    \n    \n    dense_4_2 = Dense(256, activation='relu')(drop_2_2)\n    batch_norm_4_2 = layers.BatchNormalization()(dense_4_2)\n    drop_3_2 = layers.Dropout(0.2)(batch_norm_4_2)\n    \n    \n    dense_5_2 = Dense(256, activation='relu')(drop_3_2)\n    batch_norm_5_2 = layers.BatchNormalization()(dense_5_2)\n    drop_4_2 = layers.Dropout(0.2)(batch_norm_5_2)\n    \n    \n    dense_6_2 = Dense(256, activation='relu')(drop_4_2)\n    batch_norm_6_2 = layers.BatchNormalization()(dense_6_2)\n    drop_5_2 = layers.Dropout(0.2)(batch_norm_6_2)\n    \n    \n    concat = layers.concatenate([drop_3, drop_5_2, input_layer])\n    \n    \n    x= Dense(64, activation='relu')(concat)\n    y= Dense(128, activation='relu')(concat)\n    \n    batchnorm_x1=layers.BatchNormalization()(x)\n    drop_x1 = layers.Dropout(0.3)(batchnorm_x1)\n    \n    dense_x2 = Dense(32, activation='relu')(drop_x1)\n    batchnorm_x2=layers.BatchNormalization()(dense_x2)\n    drop_x2 = layers.Dropout(0.3)(batchnorm_x2)\n    \n    \n    dense_x3 = Dense(32, activation='relu')(drop_x2)\n    batchnorm_x3=layers.BatchNormalization()(dense_x3)\n    drop_x3 = layers.Dropout(0.2)(batchnorm_x3)\n    \n    \n    \n    \n    batchnorm_y1=layers.BatchNormalization()(y)\n    drop_y1 = layers.Dropout(0.3)(batchnorm_y1)\n    \n    dense_y2 = Dense(128, activation='relu')(drop_y1)\n    batchnorm_y2=layers.BatchNormalization()(dense_y2)\n    drop_y2 = layers.Dropout(0.3)(batchnorm_y2)\n    \n    \n    dense_y3 = Dense(64, activation='relu')(drop_y2)\n    batchnorm_y3=layers.BatchNormalization()(dense_y3)\n    drop_y3 = layers.Dropout(0.2)(batchnorm_y3)\n    \n    \n    \n    concat_2 = layers.concatenate([drop_x3, drop_y3, input_layer])\n    \n    \n    dense_final = Dense(16, activation= 'relu')(concat_2)\n    batch = layers.BatchNormalization()(dense_final)\n    \n    final = Dense(num_classes, activation='softmax')(batch)\n    \n    model = Model(inputs = input_layer, outputs=final)\n    return model\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ","d17bb899":"model = dnn_model()\nmodel.summary()","d7f15be2":"plot_model(model, to_file='model.png', show_shapes=True, show_dtype=False,\n    show_layer_names=True, rankdir='TB', expand_nested=False, dpi=96\n)","a77f89fd":"model.compile(loss=['categorical_crossentropy','mse'], optimizer='adam', metrics='accuracy')","db885dfd":"history=  model.fit(x_train, y_train, batch_size=500, epochs=30, verbose =1, validation_data = (x_test, y_test))","3269b630":"\n\nfig, ax = plt.subplots(figsize=(20,8))\nsns.lineplot(x = history.epoch, y = history.history['loss'])\nsns.lineplot(x = history.epoch, y = history.history['val_loss'])\nax.set_title('Learning Curve (Loss)')\nax.set_ylabel('Loss')\nax.set_xlabel('Epoch')\nax.legend(['train', 'test'], loc='best')\nplt.show()\n\n","e1c477db":"predictions = pd.DataFrame(model.predict(test_data))\npredictions.columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4']\npredictions['id'] = test['id']\npredictions = predictions[['id', 'Class_1', 'Class_2', 'Class_3', 'Class_4']]\n\npredictions.to_csv(\"\/kaggle\/working\/TSP_May_sub.csv\", index=False)\npredictions","c0a70f3b":"# **Normalize the data**"}}