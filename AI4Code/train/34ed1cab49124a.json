{"cell_type":{"2e25ed0d":"code","1e89b882":"code","bbcc4bb6":"code","77302229":"code","0ba0b8a5":"code","88bb8ebd":"code","0ad84d29":"code","4c4c28b2":"code","b26adf6b":"code","f9a4b1b1":"code","0b3163a4":"code","e20d29ff":"code","3cbe4ead":"code","5f60d2aa":"code","e487deb4":"code","c37c7ece":"markdown","ca87ac2d":"markdown","d6c9a844":"markdown"},"source":{"2e25ed0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1e89b882":"df=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.describe()\nprint(df.dtypes)\n#df=df.head()\npd.set_option(\"display.max_rows\",30)\ndf[\"date_added\"]=df.date_added.str.split(\",\").str[1]\nprint(df[\"date_added\"])\ndf.dropna(subset=[\"date_added\",\"release_year\"],axis=0,inplace=True)\nprint(\"dataset is \")\nprint(df)\ndf[\"date_added\"]=df[\"date_added\"].astype(int)\n#dfNT.reset_index(inplace=True,drop=True)\n#print(dfNT)\n\n","bbcc4bb6":"import matplotlib.pyplot as plt\nx=df[\"release_year\"]\ny=df[\"date_added\"]\n\nplt.scatter(x,y)\nplt.title(\"time between theatre and netflix release\")\nplt.xlabel(\"Release Year\")\nplt.ylabel(\"Year added\")","77302229":"df.head()","0ba0b8a5":"df_1=df.groupby([\"date_added\"],as_index=False)[\"show_id\"].count()\n#print(df_1)\ndf_1.pivot_table(index=\"date_added\",values=[\"show_id\"])\ndf_1=df_1.rename(columns={\"date_added\":\"year_added\",\"show_id\":\"Number_shows\/movies_added\"},inplace=False)\nprint(\"\\nYear wise- number of contents added by netflix\\n\")\nprint(df_1)","88bb8ebd":"x=df_1[\"year_added\"]\ny=df_1[\"Number_shows\/movies_added\"]\nplt.scatter(x,y)\nplt.title(\"Increase in number of contents added by netflix each year\")\nplt.xlabel(\"---year---\",color=\"Black\")\nplt.ylabel(\"--number of contents added--\")\nplt.show()","0ad84d29":"print(df[\"listed_in\"].head(2))\ndft=df[\"type\"].value_counts()\nprint(\"Types of contents in Netflix\\n\",dft)\na=df[\"listed_in\"].tolist()\nb=max(a,key=len)\nprint(\"longest string in the list is :\",b)\n\ndf[\"listed_in1\"]=df.listed_in.str.split(\",\").str[0]\ndf[\"listed_in2\"]=df.listed_in.str.split(\",\").str[1]\ndf[\"listed_in3\"]=df.listed_in.str.split(\",\").str[2]\n\n#print(df.head())\nprint(\"\\nCategories of movies added\")\ndfa=df[\"listed_in1\"].value_counts()\nprint(dfa)\nprint(\"\\nCategories of movies added 2\")\ndfb=df[\"listed_in2\"].value_counts()\nprint(dfb)\nprint(\"\\nCategories of movies added 3\")\ndfc=df[\"listed_in3\"].value_counts()\nprint(dfc)\ndfb=dfb.reset_index(inplace=False,drop=False)\ndfa=dfa.reset_index(inplace=False,drop=False)\ndfc=dfc.reset_index(inplace=False,drop=False)\n#print(\"\\n1st category\\n\",dfa,\"\\n2nd category\\n\",dfb,\"\\n3rd category\\n\",dfc)\ndfa[\"index\"]=dfa[\"index\"].str.strip()\ndfb[\"index\"]=dfb[\"index\"].str.strip()\ndfc[\"index\"]=dfc[\"index\"].str.strip()\n\n\n#combining the 2(all 3) dataframe using outer join\nmergedDf=pd.merge(left=dfa,right=dfb,how=\"outer\",left_on=\"index\",right_on=\"index\")\nmergedDf=pd.merge(left=mergedDf,right=dfc,how=\"outer\",left_on=\"index\",right_on=\"index\")\nmergedDf[\"listed_in1\"].replace(np.nan,0,inplace=True)\nmergedDf[\"listed_in2\"].replace(np.nan,0,inplace=True)\nmergedDf[\"listed_in3\"].replace(np.nan,0,inplace=True)\n\nmergedDf[\"total\"]=mergedDf[\"listed_in1\"]+mergedDf[\"listed_in2\"]+mergedDf[\"listed_in3\"]\npd.set_option(\"display.max_rows\",None)\nprint(\"different categories and number of releases are :\")\nmergedDf.sort_values(\"total\",inplace=True,ascending=False)\nprint(mergedDf)\n\n\n","4c4c28b2":"#visulaization using bar graph\nimport matplotlib.pyplot as plt\nx=mergedDf[\"index\"]\ny=mergedDf[\"total\"]\nplt.bar(x,y)\nplt.xticks(mergedDf[\"index\"],fontsize=5,rotation=90)\nplt.xlabel(\"categories\")\nplt.ylabel(\"number of movies\/shows\")\nplt.show()","b26adf6b":"print(df[\"country\"].isnull().sum())\ndf2=df[[\"country\",\"show_id\"]]\ndf2.dropna(subset=[\"country\"],axis=0,inplace=True)\n#df2=df2.drop(columns=[\"show_id\"])\ndf2=pd.DataFrame(df2[\"country\"].str.split(\",\").tolist(),index=df2.show_id).stack()\nprint(df2.index)\ndf2=pd.DataFrame(df2.reset_index(drop=False,inplace=False))\ndf2=df2.drop(columns=[\"level_1\"])\ndf2.rename(columns={0:\"countries\"},inplace=True)\nprint(df2[\"countries\"].isnull().sum())\n#df2=pd.DataFrame(df.country.str.split(\",\").tolist())\n#df1=pd.DataFrame(df1.str.split(\",\").tolist())\n#df1=pd.DataFrame(df1).stack()\ndf2.head(10)\n","f9a4b1b1":"df2[\"countries\"]=df2.countries.str.strip()\ndfv=df2[\"countries\"].value_counts()\ndfv=dfv.reset_index(drop=False,inplace=False)\ndfv.rename(columns={\"index\":\"countries\",\"countries\":\"releases\"},inplace=True)\nprint(dfv[\"countries\"].isnull().sum())\ndfv[\"countries\"].replace(\"\",np.nan,inplace=True)\ndfv\n","0b3163a4":"country_codes = {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}\n\n#converting Dicionary into a dataframe\ndfcoun=pd.DataFrame(country_codes.items(),columns=[\"countries\",\"country_code\"])\n\n","e20d29ff":"#joining the dfcoun and dfv\ndfv[\"countries\"]=dfv.countries.str.lower()\ndfcoun[\"countries\"]=dfcoun.countries.str.lower()\nmergedDf=pd.merge(left=dfv,right=dfcoun,how=\"left\",left_on=\"countries\",right_on=\"countries\")\nmergedDf.head()","3cbe4ead":"import geopandas as gpd\nloc=\"..\/input\/shapefiles\/ne_110m_admin_0_countries.shp\"\ngdf=gpd.read_file(loc)[['ADMIN', 'ADM0_A3', 'geometry']]\ngdf.rename(columns={'ADMIN':\"country\", 'ADM0_A3':\"country_code\"},inplace=True)\ngdf.head()\nmergedGdf=pd.merge(left=mergedDf,right=gdf,how=\"left\",left_on=\"country_code\",right_on=\"country_code\")\nprint(mergedGdf.dtypes)\nmergedGdf.dropna(subset=[\"countries\",\"releases\",\"country_code\",\"country\",\"geometry\"],axis=0,inplace=True)\nprint(mergedGdf.count())\nmergedGdf\n","5f60d2aa":"import json\nmerged_json=json.loads(mergedGdf.to_json(default_handler=str))\njson_data=json.dumps(merged_json)\nfrom bokeh.io import output_notebook,show, output_file\nfrom bokeh.plotting import figure,output_file,show\nfrom bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar\nfrom bokeh.palettes import brewer\nfrom bokeh.models import Slider, HoverTool\nfrom bokeh.sampledata.sample_geojson import geojson ###\nfrom bokeh.io import curdoc, output_notebook\n#from bokeh.models import Slider, HoverTool\nfrom bokeh.layouts import widgetbox, row, column\n#geojson is used for plotting using xs and ys cordinates\ngeosource=GeoJSONDataSource(geojson=json_data)\n\npalette=brewer['YlGnBu'][8] #defining the color for visuals\npalette=palette[::-1] #reversing the color order so the most obese is blue\n\n#linear color mapper is useful in mapping the values linearrly to colors\ncolor_mapper=LinearColorMapper(palette=palette,low=0,high=2600)\nhover = HoverTool(tooltips = [('Country\/region','@country'),('Releases', '@releases')])\n\n#Create color bar. \ncolor_bar = ColorBar(color_mapper=color_mapper, label_standoff=8,width = 500, height = 20,\nborder_line_color=None,location = (0,0), orientation = 'horizontal')","e487deb4":"#Create figure object.\np = figure(title = 'country wise release numbers', plot_height = 600 , plot_width = 950, toolbar_location = None, tools=[hover])\np.xgrid.grid_line_color = None \np.ygrid.grid_line_color = None \n#Add patch renderer to figure. \np.patches('xs','ys', source = geosource,fill_color = {'field' : 'releases', 'transform' : color_mapper},\n          line_color = 'black', line_width = 0.25, fill_alpha = 1)\n#Specify figure layout.\np.add_layout(color_bar, 'below')\n#Display figure inline in Jupyter Notebook.\noutput_notebook()\n#Display figure.\nshow(p)","c37c7ece":"Year wise number of contents added by netflix\n","ca87ac2d":"Number of releases for different categories of movies or shows","d6c9a844":"Time gap between Theatre release and Netflix release"}}