{"cell_type":{"8c42cea5":"code","f2eff6d7":"code","8ffad544":"code","d73a96b8":"code","15273393":"code","19912339":"code","15352265":"code","7abc428b":"code","087c9369":"code","59794062":"code","7db38a86":"code","c7c768d3":"code","7c755627":"code","a6781086":"code","749fd029":"code","65a5a3ba":"code","a9cce599":"code","3774f6c0":"code","56800167":"code","6b4e9b8e":"code","5715dd12":"code","a7d1901d":"code","66604c59":"code","e07d22bf":"code","c399dae1":"code","8513f713":"code","3562e0a3":"code","3a4d2054":"code","7e4c4428":"code","c257f2bf":"code","9f3ecc94":"code","43fa1fe5":"code","6d99172f":"code","b9598337":"code","8ad0878f":"code","8201e565":"code","5c2d868d":"code","9c4f2f62":"code","a05842e4":"code","f7663a9f":"code","ed3bf912":"code","25548ff9":"code","a39d6a27":"code","3eeafebf":"code","9beede7d":"code","f3e41a4d":"code","6783fecd":"code","0f537326":"code","10a82b08":"code","49cbaef2":"code","b9912a0c":"code","6a456402":"code","81f3c3e6":"code","0a95be1b":"code","c65113e5":"code","a2383331":"code","3ad18020":"code","e0133bea":"code","334ac011":"code","15daa782":"code","c4e34b44":"code","10482c6a":"code","9d24c9ab":"code","8d89aff3":"code","3e1420fe":"code","713c30d4":"code","babec355":"code","efa8951f":"code","a3e4c1e7":"code","c71e506e":"code","78ac488e":"code","b743cfb9":"code","57e21532":"code","88223719":"code","61ca0c6e":"code","32b20fe6":"code","6ecdb220":"code","ebaabb25":"code","146994c8":"code","0d8f59cb":"code","f5ef79a6":"code","d44763de":"code","74d79ffb":"markdown","496dcccd":"markdown","49ad505c":"markdown","3f608ec2":"markdown","89b1e1f1":"markdown","dcae8853":"markdown","da3f2d85":"markdown","3723c136":"markdown","a11bac32":"markdown","618fbcbe":"markdown"},"source":{"8c42cea5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsRegressor\nimport seaborn as sns\nfrom sklearn.svm import SVC\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.compose import ColumnTransformer\n\n%matplotlib inline","f2eff6d7":"df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","8ffad544":"df.head(5)","d73a96b8":"#df = df.drop('date', axis='columns')","15273393":"df.isnull().sum()","19912339":"df.info()","15352265":"df.describe()","7abc428b":"plt.figure(figsize=(12,10))\np=sns.heatmap(df.corr(), annot=True,cmap ='RdYlGn')","087c9369":"df.columns","59794062":"columns = ['id','date', 'price', 'bedrooms', 'bathrooms', 'sqft_living',\n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',\n       'lat', 'long', 'sqft_living15', 'sqft_lot15']","7db38a86":"df = df[columns]\ndf.head()","c7c768d3":"plt.scatter(df['bedrooms'],df['price'])","7c755627":"plt.scatter(df['floors'],df['price'])","a6781086":"plt.scatter(df['bathrooms'],df['price'])","749fd029":"plt.scatter(df['sqft_living'],df['price'])","65a5a3ba":"plt.scatter(df['view'],df['price'])","a9cce599":"plt.scatter(df['grade'],df['price'])","3774f6c0":"plt.scatter(df['sqft_basement'],df['price'])","56800167":"plt.scatter(df['sqft_lot'],df['price'])","6b4e9b8e":"plt.scatter(df['sqft_basement'],df['price'])","5715dd12":"plt.scatter(df['sqft_above'],df['price'])","a7d1901d":"plt.scatter(df['lat'],df['price'])","66604c59":"sns.distplot(df['sqft_above'])","e07d22bf":"sns.distplot(df['sqft_basement'])","c399dae1":"sns.distplot(df['sqft_lot'])","8513f713":"sns.distplot(df['view'])","3562e0a3":"sns.distplot(df['sqft_living'])","3a4d2054":"sns.distplot(df['bedrooms'])","7e4c4428":"sns.distplot(df['bathrooms'])","c257f2bf":"sns.distplot(df['sqft_living'])","9f3ecc94":"sns.distplot(df['floors'])","43fa1fe5":"sns.distplot(df['price'])","6d99172f":"sns.lineplot('price', 'floors', data=df)","b9598337":"sns.countplot(df['grade'])","8ad0878f":"sns.countplot(df['view'])","8201e565":"df.isnull().sum()\nsns.heatmap(df.isnull(),cmap='viridis',cbar=False,yticklabels=False)\n\nplt.title('missing data')\nplt.show()","5c2d868d":"df.isnull().sum()\nsns.heatmap(df.corr(),cmap='viridis',cbar=True,yticklabels=False)\n\nplt.title('missing data')\nplt.show()","9c4f2f62":"df.corr()","a05842e4":"\nplt.figure(figsize=(10,8))\nsns.boxplot(x='bedrooms', y='price', data=df)","f7663a9f":"plt.figure(figsize=(10,8))\nsns.boxplot(x='bathrooms', y='price', data=df)","ed3bf912":"plt.figure(figsize=(10,8))\nsns.boxplot(x='grade', y='price', data=df)","25548ff9":"plt.figure(figsize=(10,8))\nsns.boxplot(x='view', y='price', data=df)","a39d6a27":"plt.figure(figsize=(10,8))\nsns.boxplot(x='waterfront', y='price', data=df)","3eeafebf":"plt.figure(figsize=(10,8))\nsns.boxplot(x='floors', y='price', data=df)","9beede7d":"df['date'] = pd.to_datetime(df['date'])\n\ndf['month'] = df['date'].apply(lambda date:date.month)\ndf['year'] = df['date'].apply(lambda date:date.year)\n\ndf = df.drop('date',axis=1)\n","f3e41a4d":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x='year',y='price',data=df, ax=axes[0])\nsns.boxplot(x='month',y='price',data=df, ax=axes[1])\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Year', ylabel='Price', title='Price by Year Box Plot')\naxes[1].set(xlabel='Month', ylabel='Price', title='Price by Month Box Plot')\n\nf, axe = plt.subplots(1, 1,figsize=(10,5))\ndf.groupby('month').mean()['price'].plot()\nsns.despine(left=True, bottom=True)\naxe.set(xlabel='Month', ylabel='Price', title='Price Trends')","6783fecd":"les = {}\nfor i in (['sqft_living']) :\n    les[i] = LabelEncoder()\n    df[i] = les[i].fit_transform(df[i]) \ndf","0f537326":"X = df.drop('price', axis='columns')\ny = df.price","10a82b08":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","49cbaef2":"from sklearn.linear_model import LinearRegression","b9912a0c":"lm = LinearRegression()\nlm.fit(X_train, y_train)","6a456402":"yhat_test = lm.predict(X_test)\nyhat_test_df = pd.DataFrame(yhat_test, columns=['predicted_price'])","81f3c3e6":"print(yhat_test)\nprint(yhat_test_df)","0a95be1b":"plt.figure(figsize=(12,10))\nax = sns.kdeplot(y_test)\nax = sns.kdeplot(yhat_test_df['predicted_price'], ax=ax)\nax.legend(['y', 'y_hat'], fontsize=13);\n","c65113e5":"lm.score(X_test, y_test)","a2383331":"df.describe().transpose()","3ad18020":"df.sort_values('price',ascending=False).head(20)","e0133bea":"non_top_1_perc = df.sort_values('price',ascending=False).iloc[216:]","334ac011":"plt.figure(figsize=(12,8))\nsns.scatterplot(x='long',y='lat',\n                data=non_top_1_perc,hue='price',\n                palette='RdYlGn',edgecolor=None,alpha=0.2)","15daa782":"df['sqft_living'] = pd.to_datetime(df['sqft_living'])\ndf['bathrooms'] = df['sqft_living'].apply(lambda date:date.month)\ndf['bedrooms'] = df['sqft_living'].apply(lambda date:date.year)","c4e34b44":"plt.figure(figsize=(12,10))\n\nplt.subplot(2, 2, 1)\nsns.boxplot(x='bedrooms',y='price',data=df)\n\nplt.subplot(2, 2, 2)\nsns.boxplot(x='bathrooms',y='price',data=df)","10482c6a":"df['yr_renovated'].value_counts()","9d24c9ab":"df['sqft_basement'].value_counts()","8d89aff3":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\nX_train= scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nprint(X_train.shape)\nprint(X_test.shape)","3e1420fe":"from sklearn import metrics\n\ndef print_evaluate(true, predicted, train=True):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    if train:\n        print(\"========Training Result=======\")\n        print('MAE: ', mae)\n        print('MSE: ', mse)\n        print('RMSE: ', rmse)\n        print('R2 Square: ', r2_square)\n    elif not train:\n        print(\"=========Testing Result=======\")\n        print('MAE: ', mae)\n        print('MSE: ', mse)\n        print('RMSE: ', rmse)\n        print('R2 Square: ', r2_square)","713c30d4":"y_train_pred = model.predict(X_train)\ny_test_pred  = model.predict(X_test)\n\nprint_evaluate(y_train, y_train_pred, train=True)\nprint_evaluate(y_test, y_test_pred, train=False)","babec355":"myTable = pd.crosstab(df.price,df.sqft_lot)\nmyTable","efa8951f":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\n# Define preprocessing for numeric columns (scale them)\nnumeric_features = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n    ])\n\n# Create preprocessing and training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('regressor', GradientBoostingRegressor())])\n\n\n# fit the pipeline to train a linear regression model on the training set\nmodel_gb = pipeline.fit(X_train, (y_train))\nprint (model_gb)\n\n# Evaluate the model using the test data\npredictions = model_gb.predict(X_test)\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\nplt.title('Predictions vs Actuals')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='magenta')\nplt.show()","a3e4c1e7":"pipe_info = [('Normalize', StandardScaler()), ('Polynomial Features', PolynomialFeatures(include_bias=False)), ('Linear Model', LinearRegression())]\npipe = Pipeline(pipe_info)","c71e506e":"pipe.fit(X_train, y_train)","78ac488e":"yhat_test_pipe = pipe.predict(X_test)\nyhat_test_pipe_df = pd.DataFrame(yhat_test_pipe, columns=['predicted_price'])","b743cfb9":"plt.figure(figsize=(12,10))\nax = sns.kdeplot(y_test)\nax = sns.kdeplot(yhat_test_pipe_df['predicted_price'], ax=ax)\nax.legend(['y', 'y_hat'], fontsize=13);","57e21532":"pipe.score(X_test, y_test)","88223719":"pipe_info_ridge = [('Normalize', StandardScaler()), ('Polynomial Features', PolynomialFeatures(include_bias=False)), ('Regression', Ridge())]\nridge_pipe = Pipeline(pipe_info_ridge)","61ca0c6e":"ridge_pipe.get_params().keys()","32b20fe6":"hyper_params_dict = {'Regression__alpha': [0.0001, 0.001, 0.01, 0.1, 0, 1, 10, 100, 1000, 10000]}","6ecdb220":"grid = GridSearchCV(estimator=ridge_pipe, param_grid=hyper_params_dict, scoring='r2', n_jobs=-1, cv=4)","ebaabb25":"grid.fit(X_train, y_train)","146994c8":"grid.best_params_","0d8f59cb":"best_ridge = grid.best_estimator_\nbest_ridge","f5ef79a6":"yhat_ridge = best_ridge.predict(X_test)\nyhat_ridge_df = pd.DataFrame(yhat_ridge, columns=['predicted_price'])\nplt.figure(figsize=(12,10))\nax = sns.kdeplot(y_test)\nax = sns.kdeplot(yhat_test_pipe_df['predicted_price'], ax=ax)\nax.legend(['y', 'y_hat'], fontsize=13);","d44763de":"grid.best_score_","74d79ffb":"Model builiding","496dcccd":"Feature Engineering from Date","49ad505c":"handling outliers","3f608ec2":"### Polynomial Regression and Normalization","89b1e1f1":"Lable Encoding","dcae8853":"GradientBoostingRegressor","da3f2d85":"### Ridge Regression","3723c136":"linear regression","a11bac32":"### Multiple Linear Regression Model","618fbcbe":"visulazation"}}