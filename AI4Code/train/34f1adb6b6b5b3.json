{"cell_type":{"a9b08f50":"code","a796e8a9":"code","0548a795":"code","8bf9a410":"code","39195d32":"code","8f05afc6":"code","dece1b5d":"code","31ca7b37":"code","07fdda6a":"code","c0be8819":"code","6d85c81e":"code","a61bd706":"code","c35fc167":"code","8cac4ee7":"code","4de626b9":"code","55ebaa14":"code","4f20c421":"code","3df54d3e":"code","3e7d3a53":"code","d634342b":"code","4606a20f":"code","0826bdd5":"code","45b6d7d7":"markdown","400f43bd":"markdown","dbe06463":"markdown","f9f08c10":"markdown","e582e831":"markdown","ebd5e758":"markdown","e488a586":"markdown"},"source":{"a9b08f50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#Import the Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # For Data Visualision\nimport seaborn as sns # For Data Visualision\nimport scipy as sp # For Staitical Calcultaion\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a796e8a9":"#Import the Dataset\ndf = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","0548a795":"#Let look our dataset\ndf.info()","8bf9a410":"#Lets check if there are any missing value or not\ndf.isnull().sum() ","39195d32":"#Lets look the statistical inference of the dataset\ndf.describe()","8f05afc6":"#Now lets check our target varibale first\nsns.countplot(x = 'Class', data = df)\nplt.show()","dece1b5d":"#Lets look the distribution of Amount \nsns.distplot(df['Amount'], color = 'red')\nprint('Skewness: %f', df['Amount'].skew())\nprint(\"Kurtosis: %f\" % df['Amount'].kurt())\n","31ca7b37":"df['Amount_skew'] = df['Amount'] + 1e-9 \ndf['Amount_skew'], maxlog, (min_ci, max_ci) = sp.stats.boxcox(df['Amount_skew'], alpha=0.01)","07fdda6a":"#Lets see the distribution of Amount_skew\nplt.figure(figsize=(10,4), dpi=80)\nsns.distplot(df['Amount_skew'], color = 'red')\nplt.xlabel('Transformed Amount')\nplt.ylabel('Count')\nplt.title('Transactions of Amount (Box-Cox Transformed)')\nprint('Skewness: %f', df['Amount_skew'].skew())\nprint(\"Kurtosis: %f\" % df['Amount_skew'].kurt())","c0be8819":"#Now drop the Amount Column\ndf.drop('Amount', axis = 1, inplace = True)","6d85c81e":"#Lets look the distribution of Time\n#First we convert the time from seconds to hours\n#to ease the interpretation.\ndf['Time'] = df['Time']\/3600\ndf['Time'].max() \/ 24 #How many transactions in a days?\n","a61bd706":"#Next plot a histogram of transaction times, with one bin per hour:\nplt.figure(figsize=(10,4), dpi=80)\nsns.distplot(df['Time'], color = 'green')\nplt.xlim([0,48])\nplt.xticks(np.arange(0,54,6))\nplt.xlabel('Time After First Transaction (hr)')\nplt.ylabel('Count')\nplt.title('Transaction Times')\n","c35fc167":"#Now lets see the correlation by plotting heatmap\ncorr = df.corr()\ncolormap = sns.diverging_palette(220, 10, as_cmap = True)\nplt.figure(figsize = (16,14))\nsns.heatmap(corr,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,\n            annot=True,fmt='.2f',linewidths=0.30,\n            cmap = colormap, linecolor='white')\nplt.title('Correlation of df Features', y = 1.05, size=10)\n","8cac4ee7":"#Lets look the correlation score\nprint (corr['Class'].sort_values(ascending=False), '\\n')","4de626b9":"#lets Take our dependent and independant variable\ny_trial = df['Class']\nx_trail = df.drop('Class', axis = 1, inplace = True)","55ebaa14":"##lets Take our matrices of features\ny = y_trial[:].values\nx = df.iloc[:,:].values","4f20c421":"#Spliting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state =0)\n","3df54d3e":"#Feature Scaling the data\nfrom sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nx_train = sc_x.fit_transform(x_train)\nx_test = sc_x.fit_transform(x_test)","3e7d3a53":"#Fitting Logistic Regression to the traning set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0, class_weight='balanced', solver='newton-cg')\nclassifier.fit(x_train, y_train)\n","d634342b":"#Predicting the test set result\ny_pred = classifier.predict(x_test)","4606a20f":"#Making the Confusion Matrix, Accuracy score, Classification report\nfrom sklearn.metrics import confusion_matrix, accuracy_score,classification_report\ncm = confusion_matrix(y_test, y_pred)\naccuracy = accuracy_score(y_test, y_pred)\ncr = classification_report(y_test, y_pred)\nprint(cm)\nprint(accuracy)\nprint(cr)","0826bdd5":"#Let see the ROC curve\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nauc = roc_auc_score(y_test, y_pred)\nprint('AUC: %.3f' % auc)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.plot(fpr, tpr, marker='.')\nplt.show()","45b6d7d7":"We use Logistic Regression to find whether transactions are fraud or not. As we previously note our data is imbalanced, so take class_weight is 'balanced'.","400f43bd":"So the transactions indeed occur over a two-day period. ","dbe06463":"Now We build Machine Learning Model to find the whether transactions are fraud or not.\n","f9f08c10":"Now we can see the amount distributed proplerly.","e582e831":"clearly we see data is imblanced","ebd5e758":"We can see the distribution of amount is right skewed. We need to boxcox transform so Shift all amounts by 1e-9","e488a586":" Clearly there are no missing value"}}