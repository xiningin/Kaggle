{"cell_type":{"e7695c9f":"code","aeae039d":"code","e87ad8be":"code","557784dd":"code","6ff25cfe":"code","0ff07a8e":"code","0eacfce1":"code","fe23009f":"code","311e51d0":"code","76917e91":"code","a49c4702":"code","4b520a74":"code","a225651c":"code","a3375603":"code","59d7bf44":"code","900107fb":"code","0b138a36":"code","30af5cd3":"code","dd19dd44":"code","4191371e":"code","23feba89":"code","8cf1e488":"code","e34c1d43":"code","5ea82d94":"code","0bce0602":"code","e514ec3c":"code","a71f294c":"code","51c996f6":"markdown","60c475e6":"markdown"},"source":{"e7695c9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","aeae039d":"# importing libraries\n\n# Importing libraries and magic functions\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%config InlineBackend.figure_format ='retina'\n%matplotlib inline","e87ad8be":"# read data\n\ndf = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","557784dd":"# check types\ndf.dtypes\n\n# summary statistics on numeric features\ndf.describe()\n\n# check for null values \ndf.isna().sum()","6ff25cfe":"# check for duplicates\n\ndf_duplicates = df[df.duplicated()]\ndf_duplicates","0ff07a8e":"# check distribution\n\n#histogram of whole ds\nfig = plt.figure(figsize = (10,10))\nax = fig.gca()\n#plt.axis('off')\ndf.hist(ax = ax)","0eacfce1":"# check for outliers\nf, axes = plt.subplots(1, 3,figsize=(15,15))\nsns.boxplot(df['Annual Income (k$)'],  orient='v' , ax=axes[0])\nsns.boxplot(df.Age,  orient='v' , ax=axes[1])\nsns.boxplot(df['Spending Score (1-100)'],  orient='v' , ax=axes[2])","fe23009f":"# check outlier in annual income\n\noutl = df[df['Annual Income (k$)'] > 130]\noutl","311e51d0":"# pairplot\n\nsns.pairplot(df)","76917e91":"# check correlation\n\n# correlation plot\ncorr = df.corr()\n#plt.figure(figsize = (12,8))\nsns.heatmap(corr, cmap = 'Wistia', annot= True)#, linewidths=.5)","a49c4702":"# dropping CustID\n\ndf_dropped = df.drop(['CustomerID'], axis=1)\ndf_dropped.head()","4b520a74":"# create dummies\n\ndf_dropped = pd.get_dummies(df_dropped, prefix=['Gender'])","a225651c":"# correlation check\n\ndf_dropped_corr = df_dropped.corr()\n\nsns.heatmap(df_dropped_corr, cmap=\"YlGnBu\")","a3375603":"# feature scaling\nfrom sklearn.preprocessing import StandardScaler\n# subtracts mean and then divides by standard deviation\n\n# Your code here:\nscaler = StandardScaler()\ndf_scaled = pd.DataFrame(scaler.fit_transform(df_dropped), columns = df_dropped.columns)\ndf_scaled.head()\ndf_scaled.describe()\ndf_dropped.describe()","59d7bf44":"# Clustering\n# Load library\nfrom sklearn.cluster import KMeans\n\n# Create k-mean object\ncluster = KMeans(n_clusters=7, random_state=0, n_jobs=-1)\n\n# Train model\nmodel = cluster.fit(df_scaled)\n\n# adding cluster labels - Show cluster membership\ndf_scaled['labels'] = model.labels_","900107fb":"df_scaled.head()\ndf_scaled['labels'].value_counts()","0b138a36":"# visualize clusters\n\n# Your code here:\nfrom matplotlib import pyplot\nfrom mpl_toolkits.mplot3d import Axes3D\nimport random\n\nfig = pyplot.figure()\nax = Axes3D(fig)\n\nx = df_scaled.Age\ny = df_scaled['Annual Income (k$)']\nz = df_scaled['labels']\n\nax.scatter(x,y,z)\n\npyplot.show()","30af5cd3":"# Elbow & Silhouette\nfrom yellowbrick.cluster import KElbowVisualizer\n\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(3,12), metric ='silhouette')\nvisualizer.fit(df_scaled)\nvisualizer.poof()","dd19dd44":"# Elbow metric distortion\nfrom yellowbrick.cluster import KElbowVisualizer\n\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(3,17))\nvisualizer.fit(df_scaled)\nvisualizer.poof()","4191371e":"# Elbow metric 'calinski_harabasz'\/hierarchical\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(3,17), metric ='calinski_harabasz')\nvisualizer.fit(df_scaled)\nvisualizer.poof()","23feba89":"# Silhouette Score\nfrom sklearn.metrics import silhouette_score\n\npreds = cluster.fit_predict(df_scaled)\ncenters = cluster.cluster_centers_\n\nscore = silhouette_score (df_scaled, preds, metric='euclidean')\nscore","8cf1e488":"# DBSCAN Clustering\n\nfrom sklearn.cluster import DBSCAN\n\n# Create meanshift object\ncluster2 = DBSCAN(eps=0.7, min_samples=6)\n\n# Train model\nmodel2 = cluster2.fit(df_scaled)\n\n# Show cluster membership\ndf_scaled['labels_DBSCAN'] = model2.labels_\n\n# value counts\ndf_scaled['labels_DBSCAN'].value_counts()","e34c1d43":"# Silhouette Score\nfrom sklearn.metrics import silhouette_score\n\nscore2 = silhouette_score (df_scaled, df_scaled['labels_DBSCAN'])\nscore2","5ea82d94":"# Hierarchical Clustering\n\nfrom sklearn.cluster import AgglomerativeClustering\n\n# Create meanshift object\ncluster3 = AgglomerativeClustering(n_clusters=10)\n\n# Train model\nmodel3 = cluster3.fit(df_scaled)\n\n# Show cluster membership\ndf_scaled['labels_agglo'] = model3.labels_\n","0bce0602":"# Silhouette Score\n\nscore3 = silhouette_score (df_scaled, df_scaled['labels_agglo'])\nscore3","e514ec3c":"# Elbow metric 'calinski_harabasz'\/hierarchical\nvisualizer = KElbowVisualizer(model3, k=(3,17), metric ='calinski_harabasz')\nvisualizer.fit(df_scaled)\nvisualizer.poof()","a71f294c":"f, axes = plt.subplots(1,3, figsize=(15,5))\n\nsns.scatterplot(  y=\"Age\", x= \"Spending Score (1-100)\", hue='labels', data=df_scaled,  ax=axes[0])\nsns.scatterplot(  y=\"Age\", x= \"Spending Score (1-100)\", hue='labels_DBSCAN', data=df_scaled, ax=axes[1])\nsns.scatterplot(  y=\"Age\", x= \"Spending Score (1-100)\", hue='labels_agglo', data=df_scaled, ax=axes[2])\n","51c996f6":"### Clustering","60c475e6":"### Exploratory Data Analysis"}}