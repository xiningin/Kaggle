{"cell_type":{"1d61e989":"code","952f49a3":"code","f098f9b3":"code","eeceffba":"code","85a4f861":"code","42463512":"code","39d2c946":"code","a989cc49":"code","97a1bd06":"code","36a67d1f":"code","894fab17":"code","d0f4268d":"markdown","99596ace":"markdown"},"source":{"1d61e989":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.layers import Dense, BatchNormalization, Dropout, Input\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, Imputer\nimport os","952f49a3":"#reading the files\ndata_dir = \"..\/input\/\"\nmerchants = pd.read_csv(os.path.join(data_dir, \"merchants.csv\"))\nhistorical = pd.read_csv(os.path.join(data_dir, \"historical_transactions.csv\"), )","f098f9b3":"train_df = pd.read_csv(os.path.join(data_dir, \"train.csv\"),  parse_dates=[\"first_active_month\"])\ntest_df = pd.read_csv(os.path.join(data_dir, \"test.csv\"),  parse_dates=[\"first_active_month\"])\nnew_trans_df = pd.read_csv(os.path.join(data_dir, \"new_merchant_transactions.csv\"))\n\ngdf = historical.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].agg(['sum', 'mean', 'std', 'min', 'max']).reset_index()\ngdf.columns = [\"card_id\", \"sum_hist_trans\", \"mean_hist_trans\", \"std_hist_trans\", \"min_hist_trans\", \"max_hist_trans\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")\n\ngdf = new_trans_df.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].size().reset_index()\ngdf.columns = [\"card_id\", \"num_merch_transactions\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")","eeceffba":"gdf = new_trans_df.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].agg(['sum', 'mean', 'std', 'min', 'max']).reset_index()\ngdf.columns = [\"card_id\", \"sum_merch_trans\", \"mean_merch_trans\", \"std_merch_trans\", \"min_merch_trans\", \"max_merch_trans\"]\ntrain_df = pd.merge(train_df, gdf, on=\"card_id\", how=\"left\")\ntest_df = pd.merge(test_df, gdf, on=\"card_id\", how=\"left\")\n\ntrain_df[\"year\"] = train_df[\"first_active_month\"].dt.year\ntest_df[\"year\"] = test_df[\"first_active_month\"].dt.year\ntrain_df[\"month\"] = train_df[\"first_active_month\"].dt.month\ntest_df[\"month\"] = test_df[\"first_active_month\"].dt.month\n\ncols_to_use = [\"feature_1\", \"feature_2\", \"feature_3\", \n               \"sum_hist_trans\", \"mean_hist_trans\", \"std_hist_trans\", \n               \"min_hist_trans\", \"max_hist_trans\",\n               \"year\", \"month\",\"num_merch_transactions\", \n                \"sum_merch_trans\", \"mean_merch_trans\", \"std_merch_trans\",\n                \"min_merch_trans\", \"max_merch_trans\",\n              ]\n\n#get train and test dataframes\ntrain_X = train_df[cols_to_use]\ntest_X = test_df[cols_to_use]\ntrain_y = train_df['target'].values","85a4f861":"#scale the data and impute the null values \n#note: apparently, GPU environment doesn't have an updated version of sklearn,\n#so we cannot use sklearn.impute.SimpleImputer. In CPU environement this is possible\nsc = StandardScaler()\ntrain_X = train_X.fillna(0)\ntrain_X = sc.fit_transform(train_X)\nx_train, x_val, y_train, y_val = train_test_split(train_X, train_y, test_size = .1, random_state = 42)","42463512":"#building the network\nimport keras.backend as K\n#definind the rmse metric\ndef rmse(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true), axis=-1))\n\nfh_neurons = 1024 #first hidden layer\ndrop_rate = 0.7\n\n#the model is just a sequence of fully connected layers, batch normalization and dropout using ELUs as activation functions\nmodel = Sequential()\nmodel.add(Dense(fh_neurons, input_dim=x_train.shape[1], activation='elu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(drop_rate))\nmodel.add(Dense(fh_neurons*2, activation='elu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(drop_rate))\nmodel.add(Dense(fh_neurons*2, activation='elu'))\nmodel.add(Dense(fh_neurons, activation='elu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(optimizer='adam',loss=rmse)\nearly_stopping = EarlyStopping(monitor = 'val_loss', patience = 5)\ncheckpointer = ModelCheckpoint(filepath='weights.hdf5', \n                               verbose=1, save_best_only=True)\n\nmodel.fit(x_train, y_train, validation_data = (x_val, y_val), epochs=15, batch_size=256, callbacks = [early_stopping, checkpointer])","39d2c946":"import matplotlib.pyplot as plt\n#plotting training and validations losses\nplt.plot(model.history.history['val_loss'], label = \"val_loss\")\nplt.plot(model.history.history['loss'], label = \"loss\")\nplt.legend()","a989cc49":"#saving the card_ids\nids = test_df['card_id'].values\nsubmission = pd.DataFrame(ids, columns=['card_id'])","97a1bd06":"#making the predictions\ntest_df = test_df[cols_to_use]\ntest_df = test_df.fillna(0)\ntest_df = sc.transform(test_df)\npredictions = model.predict(test_df)","36a67d1f":"submission['target'] = predictions.flatten()\nsubmission.head()","894fab17":"submission.to_csv(\"submission_neuralnet.csv\", index = False, header = True)","d0f4268d":"Here is a basic guide to use if someone wants to use neural networks in this competition. Although LGB is by far the most used algorithm for this kind of competition in Kaggle, it is fun to try different routes and see where they lead.\n\nNote: the feature engineering steps were borrowed from [SRK's kernel](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-elo).","99596ace":"One issue that I find here is that both training and validation loss values are way lower than the LB values, which seems to indicate that this particular model is overfitting the training data, but since the validation loss is in agreement with the training loss, I'm a bit confused about it. If anyone knows what may be going on, feel free to comment :)"}}