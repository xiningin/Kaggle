{"cell_type":{"d4ac192d":"code","3eec9366":"code","b32c7ca0":"code","75817c6f":"code","4eaa1f19":"code","d9169fcf":"code","c7cfd01d":"code","e67615cf":"code","092cafc2":"code","002217ef":"code","57016609":"code","a9af3fb2":"code","452bf691":"code","077e5388":"code","e5e5b036":"code","c206f213":"code","e6ef977b":"markdown","904d3972":"markdown","dc6a9807":"markdown","67612cd9":"markdown","35e64ed8":"markdown"},"source":{"d4ac192d":"!pip install BeautifulSoup4\n!pip install pytrends","3eec9366":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ncf.set_config_file(offline=True)\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom pytrends.request import TrendReq\n\nimport datetime as dt\nfrom dateutil.relativedelta import relativedelta\n\nfrom sklearn.linear_model import LinearRegression\n\nimport os\nimport time","b32c7ca0":"def get_weatherHistory_data(command, station, stname, datepicker, station_name):\n    payload = {'command': command,\n               'station': station,\n               'stname': stname,\n               'datepicker': datepicker}\n\n    r = requests.get('http:\/\/e-service.cwb.gov.tw\/HistoryDataQuery\/MonthDataController.do', params = payload)\n    tables = pd.read_html(r.text)\n    df_temp = tables[1]\n    df_temp.columns=df_temp.columns.droplevel(level=[0,1])\n\n    df_temp['ObsTime'] = pd.to_datetime(datepicker + '-' + df_temp['ObsTime'].astype('str'))\n    df_temp.set_index('ObsTime',inplace=True)\n\n    df_temp = df_temp.apply(pd.to_numeric, errors='coerce')\n    df_temp.dropna(how='all', inplace=True)\n\n    df_temp['station'] = station_name\n    return df_temp","75817c6f":"df_weather = pd.DataFrame()\n\nstarttime = '2019-01'\nendtime = '2020-12'\ndelta_month = 1\n\ntimePeriod_temp = starttime\n\nwhile timePeriod_temp <= endtime:\n    try:\n        df_temp = get_weatherHistory_data(command='viewMain',\n                                          station='466920',\n                                          stname='%E8%87%BA%E5%8C%97',\n                                          datepicker=timePeriod_temp, \n                                          station_name='466920_\u81fa\u5317')\n        df_weather = pd.concat([df_weather, df_temp], axis=0)\n        \n        df_temp = get_weatherHistory_data(command='viewMain',\n                                          station='467490',\n                                          stname='%E8%87%BA%E4%B8%AD',\n                                          datepicker=timePeriod_temp, \n                                          station_name='467490_\u81fa\u4e2d')\n        df_weather = pd.concat([df_weather, df_temp], axis=0)        \n        \n        df_temp = get_weatherHistory_data(command='viewMain',\n                                          station='467410',\n                                          stname='%E8%87%BA%E5%8D%97',\n                                          datepicker=timePeriod_temp, \n                                          station_name='467410_\u81fa\u5357')\n        df_weather = pd.concat([df_weather, df_temp], axis=0)\n        \n        timePeriod_temp = (pd.to_datetime(timePeriod_temp) + relativedelta(months=delta_month)).strftime('%Y-%m')\n        \n    except:\n        print('error')\n        \ndf_weather","4eaa1f19":"df_weather.pivot_table(index='ObsTime', columns='station', values=['Temperature']).iplot()","d9169fcf":"r = None\n\nwhile r is None:\n    try:\n        url = 'https:\/\/www.taipower.com.tw\/d006\/loadGraph\/loadGraph\/data\/sys_dem_sup.csv'\n        r = requests.get(url)\n        open('sys_dem_sup.csv', 'wb').write(r.content)\n        time.sleep(1)\n    except:\n         pass","c7cfd01d":"name_columns = ['Date','\u6de8\u5c16\u5cf0\u4f9b\u96fb\u80fd\u529b(\u842c\u74e9)','\u77ac\u6642\u5c16\u5cf0\u8ca0\u8f09(\u842c\u74e9)','\u5099\u8f49\u5bb9\u91cf(\u842c\u74e9)','\u5099\u8f49\u5bb9\u91cf\u7387(%)',\n                '\u7528\u96fb\u91cf_\u5de5\u696d\u7528\u96fb(\u767e\u842c\u5ea6)','\u7528\u96fb\u91cf_\u6c11\u751f\u7528\u96fb(\u767e\u842c\u5ea6)',\n                'Unknown1','Unknown2',\n                '\u6838\u80fd(Nuclear)\u6838\u4e8c#1','\u6838\u80fd(Nuclear)\u6838\u4e8c#2',\n                '\u6838\u80fd(Nuclear)\u6838\u4e09#1','\u6838\u80fd(Nuclear)\u6838\u4e09#2',\n                '\u71c3\u7164(Coal)\u6797\u53e3#1','\u71c3\u7164(Coal)\u6797\u53e3#2','\u71c3\u7164(Coal)\u6797\u53e3#3',\n                '\u71c3\u7164(Coal)\u53f0\u4e2d#1','\u71c3\u7164(Coal)\u53f0\u4e2d#2','\u71c3\u7164(Coal)\u53f0\u4e2d#3','\u71c3\u7164(Coal)\u53f0\u4e2d#4',\n                '\u71c3\u7164(Coal)\u53f0\u4e2d#5','\u71c3\u7164(Coal)\u53f0\u4e2d#6','\u71c3\u7164(Coal)\u53f0\u4e2d#7','\u71c3\u7164(Coal)\u53f0\u4e2d#8','\u71c3\u7164(Coal)\u53f0\u4e2d#9','\u71c3\u7164(Coal)\u53f0\u4e2d#10',\n                '\u71c3\u7164(Coal)\u8208\u9054#1','\u71c3\u7164(Coal)\u8208\u9054#2','\u71c3\u7164(Coal)\u8208\u9054#3','\u71c3\u7164(Coal)\u8208\u9054#4',\n                '\u71c3\u7164(Coal)\u5927\u6797#1','\u71c3\u7164(Coal)\u5927\u6797#2',\n                '\u6c11\u71df\u96fb\u5ee0-\u71c3\u7164(IPP Coal)\u548c\u5e73#1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u7164(IPP Coal)\u548c\u5e73#2',\n                '\u6c11\u71df\u96fb\u5ee0-\u71c3\u7164(IPP Coal)\u9ea5\u5bee#1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u7164(IPP Coal)\u9ea5\u5bee#2','\u6c11\u71df\u96fb\u5ee0-\u71c3\u7164(IPP Coal)\u9ea5\u5bee#3',\n                '\u6c7d\u96fb\u5171\u751f(Co-Gen)\u6c7d\u96fb\u5171\u751f',\n                '\u71c3\u6c23(LNG)\u5927\u6f6d (#1~#7)','\u71c3\u6c23(LNG)\u901a\u9704 (#1~#6)','\u71c3\u6c23(LNG)\u8208\u9054 (#1~#5)','\u71c3\u6c23(LNG)\u5357\u90e8 (#1~#4)','\u71c3\u6c23(LNG)\u5927\u6797(#5\u3001#6)',\n                '\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u6d77\u6e56 (#1\u3001#2)','\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u570b\u5149 #1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u65b0\u6843#1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u661f\u5f70#1',\n                '\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u661f\u5143#1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u5609\u60e0#1','\u6c11\u71df\u96fb\u5ee0-\u71c3\u6c23(IPP-LNG)\u8c50\u5fb7(#1\u3001#2)',\n                '\u71c3\u6cb9(Oil)\u5354\u548c(#1~#4)',\n                '\u8f15\u6cb9(Diesel)\u6c23\u6e26\u8f2a','\u8f15\u6cb9(Diesel)\u96e2\u5cf6',\n                '\u6c34\u529b(Hydro)\u5fb7\u57fa','\u6c34\u529b(Hydro)\u9752\u5c71','\u6c34\u529b(Hydro)\u8c37\u95dc','\u6c34\u529b(Hydro)\u5929\u8f2a','\u6c34\u529b(Hydro)\u99ac\u978d','\u6c34\u529b(Hydro)\u842c\u5927','\u6c34\u529b(Hydro)\u5927\u89c0',\n                '\u6c34\u529b(Hydro)\u9245\u5de5','\u6c34\u529b(Hydro)\u78a7\u6d77','\u6c34\u529b(Hydro)\u7acb\u9727','\u6c34\u529b(Hydro)\u9f8d\u6f97','\u6c34\u529b(Hydro)\u5353\u862d','\u6c34\u529b(Hydro)\u6c34\u91cc','\u6c34\u529b(Hydro)\u5176\u4ed6\u5c0f\u6c34\u529b',\n                '\u62bd\u84c4\u6c34\u529b(Pumping Gen)\u5927\u89c0\u4e8c','\u62bd\u84c4\u6c34\u529b(Pumping Gen)\u660e\u6f6d',\n                '\u98a8\u529b(Wind)\u98a8\u529b\u767c\u96fb',\n                '\u592a\u967d\u80fd(Solar)\u592a\u967d\u80fd\u767c\u96fb']","e67615cf":"df_demand = pd.read_csv('.\/sys_dem_sup.csv',header=None)\ndf_demand.columns = name_columns\ndf_demand['Date'] = pd.to_datetime(df_demand['Date'], format='%Y%m%d')\ndf_demand = df_demand.set_index('Date')\n\ndf_demand[['\u6de8\u5c16\u5cf0\u4f9b\u96fb\u80fd\u529b(\u842c\u74e9)','\u77ac\u6642\u5c16\u5cf0\u8ca0\u8f09(\u842c\u74e9)','\u5099\u8f49\u5bb9\u91cf(\u842c\u74e9)']] = df_demand[['\u6de8\u5c16\u5cf0\u4f9b\u96fb\u80fd\u529b(\u842c\u74e9)','\u77ac\u6642\u5c16\u5cf0\u8ca0\u8f09(\u842c\u74e9)','\u5099\u8f49\u5bb9\u91cf(\u842c\u74e9)']]\/10\n\ndf_demand","092cafc2":"df_demand[['\u7528\u96fb\u91cf_\u5de5\u696d\u7528\u96fb(\u767e\u842c\u5ea6)','\u7528\u96fb\u91cf_\u6c11\u751f\u7528\u96fb(\u767e\u842c\u5ea6)']].iplot(title='\u7528\u96fb\u91cf_\u5de5\u696d\u7528\u96fb(\u767e\u842c\u5ea6), \u7528\u96fb\u91cf_\u6c11\u751f\u7528\u96fb(\u767e\u842c\u5ea6)')\ndf_demand[['\u6de8\u5c16\u5cf0\u4f9b\u96fb\u80fd\u529b(\u842c\u74e9)']].iplot(title='\u6de8\u5c16\u5cf0\u4f9b\u96fb\u80fd\u529b(\u842c\u74e9)')\ndf_demand[['\u98a8\u529b(Wind)\u98a8\u529b\u767c\u96fb','\u592a\u967d\u80fd(Solar)\u592a\u967d\u80fd\u767c\u96fb']].iplot(title='\u98a8\u529b(Wind)\u98a8\u529b\u767c\u96fb, \u592a\u967d\u80fd(Solar)\u592a\u967d\u80fd\u767c\u96fb')","002217ef":"title = 'Microsoft Excel'\ntitle_type = 'Programming language'\nmid = '\/m\/052tr'\ngeo_id = 'TW'","57016609":"df_trend = pd.DataFrame()\n\nfor year in ['2019','2020']:\n    pytrends = TrendReq(hl='en-US', tz=360)\n    pytrends.build_payload([mid], timeframe= year +'-01-01 ' + year + '-07-01',geo=geo_id,gprop='')\n    df_trend_half1 = pytrends.interest_over_time()\n    time.sleep(1)\n\n    pytrends = TrendReq(hl='en-US', tz=360)\n    pytrends.build_payload([mid], timeframe= year +'-06-01 ' + year + '-12-31',geo=geo_id,gprop='')\n    df_trend_half2 = pytrends.interest_over_time()\n    time.sleep(1)\n\n    dataset = pd.concat([df_trend_half1.loc[year +'-06-01 ':year +'-07-01 ', mid].rename('X'),\n                         df_trend_half2.loc[year +'-06-01 ':year +'-07-01 ', mid].rename('y')], axis=1).dropna()\n\n    reg_lr = LinearRegression().fit(dataset[['X']], dataset[['y']])\n\n    df_trend_half1[mid] = reg_lr.predict(df_trend_half1[[mid]])\n\n    df_trend_temp = pd.concat([df_trend_half1.loc[year +'-01-01 ':year +'-06-30 '],\n                               df_trend_half2.loc[year +'-07-01 ':year +'-12-31 ']], axis=0)\n    df_trend_temp = df_trend_temp[mid].rename('value')\n    df_trend_temp = df_trend_temp.reset_index()\n\n    df_trend_temp['geo_id'] = geo_id\n    df_trend_temp['title'] = title\n    df_trend_temp['type'] = title_type\n    df_trend_temp['year'] = year\n\n    df_trend_temp['value'] = (df_trend_temp['value']-df_trend_temp['value'].mean())\/df_trend_temp['value'].std()\n\n    df_trend = pd.concat([df_trend, df_trend_temp], axis=0, ignore_index=True)\n\ndf_trend.set_index('date')['value'].iplot()\ndf_trend","a9af3fb2":"url = 'https:\/\/www.timeanddate.com\/holidays\/taiwan\/2019'\nr = requests.get(url)\ndf_holiday_2019 = pd.read_html(r.text)[0]\ndf_holiday_2019.columns = df_holiday_2019.columns.get_level_values(0)\ndf_holiday_2019 = df_holiday_2019.dropna(how='all')\ndf_holiday_2019 = df_holiday_2019[['Date', 'Name', 'Type']]\ndf_holiday_2019['Date'] = '2019 ' + df_holiday_2019['Date']\ndf_holiday_2019['Date'] = pd.to_datetime(df_holiday_2019['Date'], errors='coerce')\ndf_holiday_2019 = df_holiday_2019[~df_holiday_2019['Date'].isna()]\n\nurl = 'https:\/\/www.timeanddate.com\/holidays\/taiwan\/2020'\nr = requests.get(url)\ndf_holiday_2020 = pd.read_html(r.text)[0]\ndf_holiday_2020.columns = df_holiday_2020.columns.get_level_values(0)\ndf_holiday_2020 = df_holiday_2020.dropna(how='all')\ndf_holiday_2020 = df_holiday_2020[['Date', 'Name', 'Type']]\ndf_holiday_2020['Date'] = '2020 ' + df_holiday_2020['Date']\ndf_holiday_2020['Date'] = pd.to_datetime(df_holiday_2020['Date'], errors='coerce')\ndf_holiday_2020 = df_holiday_2020[~df_holiday_2020['Date'].isna()]\n\nurl = 'https:\/\/www.timeanddate.com\/holidays\/taiwan\/2021'\nr = requests.get(url)\ndf_holiday_2021 = pd.read_html(r.text)[0]\ndf_holiday_2021.columns = df_holiday_2021.columns.get_level_values(0)\ndf_holiday_2021 = df_holiday_2021.dropna(how='all')\ndf_holiday_2021 = df_holiday_2021[['Date', 'Name', 'Type']]\ndf_holiday_2021['Date'] = '2021 ' + df_holiday_2021['Date']\ndf_holiday_2021['Date'] = pd.to_datetime(df_holiday_2021['Date'], errors='coerce')\ndf_holiday_2021 = df_holiday_2021[~df_holiday_2021['Date'].isna()]\n\ndf_holiday = pd.concat([df_holiday_2019, df_holiday_2020, df_holiday_2021], axis=0, ignore_index=True)\ndf_holiday = df_holiday[df_holiday['Type']=='National holiday']\ndf_holiday = df_holiday.drop_duplicates(subset=['Date'])\ndf_holiday = df_holiday.set_index('Date')\ndf_holiday.loc['2021-12-31', ['Name','Type']]=np.nan\ndf_holiday = df_holiday.asfreq('D')\ndf_holiday.loc[df_holiday.index.weekday>=5, 'Name'] = 'weekend'\ndf_holiday.loc[df_holiday.index.weekday>=5, 'Type'] = 'weekend'\ndf_holiday.columns = 'holiday_' + df_holiday.columns\n\ndf_holiday = df_holiday.reset_index()\ndf_holiday = df_holiday.rename(columns={'Date':'date'}) \n\ndf_holiday","452bf691":"df_holiday.loc[df_holiday['holiday_Name'].str.contains('Tomb Sweeping').fillna(False), 'holiday_Name'] = 'Tomb Sweeping Day'\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"Children's Day\").fillna(False), 'holiday_Name'] = \"Children's Day\"\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"Chinese New Year\").fillna(False), 'holiday_Name'] = \"Chinese New Year Holiday\"\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"Dragon Boat\").fillna(False), 'holiday_Name'] = \"Dragon Boat Festival\"\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"Mid-Autumn\").fillna(False), 'holiday_Name'] = \"Mid-Autumn Festival\"\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"National Day\").fillna(False), 'holiday_Name'] = \"National Day\"\ndf_holiday.loc[df_holiday['holiday_Name'].str.contains(\"Peace Memorial\").fillna(False), 'holiday_Name'] = \"Peace Memorial Day\"","077e5388":"from sklearn.preprocessing import LabelEncoder\ndf_holiday_encode = df_holiday.copy()\ndf_holiday_encode[['holiday_Name', 'holiday_Type']] = df_holiday_encode[['holiday_Name', 'holiday_Type']].astype('str').apply(LabelEncoder().fit_transform)\ndf_holiday_encode","e5e5b036":"df_holiday_encode.set_index('date').iplot()","c206f213":"df_weather.reset_index().to_csv('weather.csv', index=False, encoding='utf8') \ndf_demand.reset_index().to_csv('demand.csv', index=False, encoding='utf8') \ndf_trend.to_csv('GoogleTrend.csv', index=False) \ndf_holiday.to_csv('holiday.csv', index=False) \ndf_holiday_encode.to_csv('holiday_encode.csv', index=False) ","e6ef977b":"# Energy data from TaiPower (Demand and Supply)","904d3972":"# Output Dataset","dc6a9807":"# Google trend data","67612cd9":"# Holiday data","35e64ed8":"# Weather data"}}