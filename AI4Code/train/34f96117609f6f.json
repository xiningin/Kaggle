{"cell_type":{"303854b8":"code","ef847214":"code","7dee6419":"code","dc175ee6":"code","432595ac":"code","c082d959":"markdown","c70dd668":"markdown","3b494bcc":"markdown","e866b2fd":"markdown","3e99ac46":"markdown","7a80a988":"markdown"},"source":{"303854b8":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport warnings \nwarnings.filterwarnings('ignore')\n\ndef plot_eleven_columns_using_plotly_regular(dataframe,\n                                             column_one,\n                                             column_two,\n                                             column_three,\n                                             column_four,\n                                             column_five,\n                                             column_six,\n                                             column_seven,\n                                             column_eight,\n                                             column_nine,\n                                             column_ten,\n                                             column_eleven,\n                                             title):    \n    '''\n    This function plots four numerical columns against a date column.\n    It using the regular plotly library instead of plotly express.\n    '''\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_one],\n                        mode='lines+markers',name=column_one))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_two],\n                        mode='lines+markers',name=column_two))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_three],\n                        mode='lines+markers',name=column_three))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_four],\n                        mode='lines+markers',name=column_four))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_five],\n                        mode='lines+markers',name=column_five))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_six],\n                        mode='lines+markers',name=column_six))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_seven],\n                        mode='lines+markers',name=column_seven))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_eight],\n                        mode='lines+markers',name=column_eight))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_nine],\n                        mode='lines+markers',name=column_nine))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_ten],\n                        mode='lines+markers',name=column_ten))\n    fig.add_trace(go.Scatter(x=dataframe.date, y=dataframe[column_eleven],\n                        mode='lines+markers',name=column_eleven))\n    fig.update_layout(title={'text':title},\n                      xaxis_title='Date',yaxis_title='Average of upper and lower predictions',\n                      legend_orientation=\"h\",showlegend=True)\n    #fig.update_layout(xaxis=dict(range=[lower_axis_limit,upper_axis_limit]))\n    fig.show()    \n    \ndef plot_eleven_columns_using_plotly_express(dataframe,\n                                             column_one,\n                                             column_two,\n                                             column_three,\n                                             column_four,\n                                             column_five,\n                                             column_six,\n                                             column_seven,\n                                             column_eight,\n                                             column_nine,\n                                             column_ten,\n                                             column_eleven,\n                                             title):\n    '''\n    This function plots four numerical columns against a date column.\n    It using the plotly express library instead of the normal plotly library.\n    '''\n    df_melt = dataframe.melt(id_vars='date', value_vars=[column_one,\n                                                         column_two,\n                                                         column_three,\n                                                         column_four,\n                                                         column_five,\n                                                         column_six,\n                                                         column_seven,\n                                                         column_eight,\n                                                         column_nine,\n                                                         column_ten,\n                                                         column_eleven])\n    fig = px.line(df_melt, x=\"date\", y=\"value\", color=\"variable\",title=title).update(layout=dict(xaxis_title='date',yaxis_title='Average of upper and lower predictions',legend_orientation=\"h\",showlegend=True))\n    #fig.update_xaxes(range=[lower_axis_limit,upper_axis_limit])\n    fig.show()\n    \n","ef847214":"todays_date = '4\/09\/2020' # Update this line every time that you rerun the notebook\ndf = pd.read_csv('\/kaggle\/input\/ihmes-covid19-projections\/2020_04_09.04\/Hospitalization_all_locs.csv')\ndf_washington = df[df.location_name=='Washington']\ndf_washington = df_washington[['date', \n                           'allbed_mean',\n                           'ICUbed_mean', \n                           'InvVen_mean',  \n                           'deaths_mean',\n                           'admis_mean', \n                           'newICU_mean', \n                           'newICU_lower', \n                           'newICU_upper',\n                           'totdea_mean', \n                           'bedover_mean',\n                           'icuover_mean']]\ndf_washington[40:50].head()","7dee6419":"title = 'Mean of Upper and Lower Predictions from IHME for Washington as of '+todays_date\ndf_washington.plot(title=title,figsize=(12,9), grid=True)","dc175ee6":"plot_eleven_columns_using_plotly_regular(dataframe=df_washington,\n                                        column_one='allbed_mean',\n                                        column_two='ICUbed_mean',\n                                        column_three='InvVen_mean',\n                                        column_four='deaths_mean',\n                                        column_five='admis_mean',\n                                        column_six='newICU_mean',\n                                        column_seven='newICU_lower',\n                                        column_eight='newICU_upper',\n                                        column_nine='totdea_mean',\n                                        column_ten='bedover_mean',\n                                        column_eleven='bedover_mean',\n                                        title='Mean of Upper and Lower Predictions from IHME for Washington as of '+todays_date)","432595ac":"plot_eleven_columns_using_plotly_express(dataframe=df_washington,\n                                        column_one='allbed_mean',\n                                        column_two='ICUbed_mean',\n                                        column_three='InvVen_mean',\n                                        column_four='deaths_mean',\n                                        column_five='admis_mean',\n                                        column_six='newICU_mean',\n                                        column_seven='newICU_lower',\n                                        column_eight='newICU_upper',\n                                        column_nine='totdea_mean',\n                                        column_ten='bedover_mean',\n                                        column_eleven='bedover_mean',\n                                        title='Mean of Upper and Lower Predictions from IHME for Washington as of '+todays_date)","c082d959":"*Step 1: Import Python Packages and Define Helper Functions*","c70dd668":"# COVID-19 Projections for Washington, USA\n* Using data from http:\/\/www.healthdata.org\/covid","3b494bcc":"*Step 4: Plot using Plotly Express*","e866b2fd":"*Step 4: Plot using Plotly*","3e99ac46":"*Step 2: Load the Data*","7a80a988":"*Step 3: Plot using Pandas*"}}