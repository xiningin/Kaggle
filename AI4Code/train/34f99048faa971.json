{"cell_type":{"f72c2d41":"code","f0dfcf11":"code","a65141d6":"code","a7ce9cde":"code","a74cdd4c":"code","8df59562":"code","22d6a3e4":"code","d3fcb61a":"code","8cd791f3":"code","86bd98e9":"code","e92f3c19":"code","0947aa3f":"code","bdaf2aea":"code","011c6071":"code","d1c60f7e":"code","8fd70688":"code","94378aa8":"code","f1453416":"code","78a9e754":"code","15e89972":"code","f5c733c9":"code","85a93916":"code","f925e815":"code","509b10c1":"code","67a59ed8":"code","e6cdde74":"code","a7da25ce":"code","1de92f09":"code","a373f3d5":"code","b5895511":"code","92366c9b":"code","e7b082ca":"code","fe75ca47":"code","f8d9f7d0":"code","1ed86812":"code","e2265d44":"code","6cf8a5ce":"code","fc6c25e0":"code","16fd4fc9":"code","40489649":"code","55c1d221":"code","0e374bdd":"code","f2853602":"code","ee085448":"code","6c11c2d5":"code","dc36fab6":"code","cb9338a0":"code","e4ee8739":"code","8a126b17":"code","48ddc2f6":"markdown","52d2da50":"markdown","b20d0c7c":"markdown","9b22afa2":"markdown","ab8a60e5":"markdown","0e33a709":"markdown","a36c8c0d":"markdown","d257ba51":"markdown","cb10e67b":"markdown","da38f8b8":"markdown","7fcda6a7":"markdown","b962871b":"markdown","1de4f5b8":"markdown","0598809f":"markdown","3099051a":"markdown","b5b27b1c":"markdown","21f8af29":"markdown","f4616b62":"markdown","bd1ec790":"markdown","a9f01ff4":"markdown","4cf4d0a5":"markdown","3b552b9f":"markdown","54376839":"markdown","319bcbdf":"markdown","15391a89":"markdown","7d6cc1ac":"markdown","1d317eee":"markdown","307e4e80":"markdown","95a380ea":"markdown","690da9d8":"markdown","fe15546d":"markdown","5c067f6f":"markdown","f30c6198":"markdown","7d9001ef":"markdown","fd6386df":"markdown","86a98fcc":"markdown","788b3a86":"markdown"},"source":{"f72c2d41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0dfcf11":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd","a65141d6":"df=pd.read_csv('\/kaggle\/input\/personal-loan-modeling\/Bank_Personal_Loan_Modelling.csv')\ndf.head()","a7ce9cde":"df.shape","a74cdd4c":"df.info()","8df59562":"df.isnull().any()","22d6a3e4":"df.drop(['ID', 'ZIP Code'], axis = 1, inplace = True)","d3fcb61a":"cols = set(df.columns)\ncols_numeric = set(['Age', 'Experience', 'Income', 'CCAvg', 'Mortgage'])\ncols_categorical = list(cols - cols_numeric)\ncols_categorical","8cd791f3":"for x in cols_categorical:\n    df[x] = df[x].astype('category')\n\ndf.info()","86bd98e9":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","e92f3c19":"def summary_non_category(x):\n    x_min = df[x].min()\n    x_max = df[x].max()\n    Q1 = df[x].quantile(0.25)\n    Q2 = df[x].quantile(0.50)\n    Q3 = df[x].quantile(0.75)\n    print(f'Summary of {x.capitalize()} Attribute:\\n'\n          f'{x.capitalize()}(min) : {x_min}\\n'\n          f'Q1                    : {Q1}\\n'\n          f'Q2(Median)            : {Q2}\\n'\n          f'Q3                    : {Q3}\\n'\n          f'{x.capitalize()}(max) : {x_max}')\n# Plotting Graph\n    sns.distplot(df[x])\n    plt.title(f'{x.capitalize()} Density Distribution')\n    plt.show()","0947aa3f":"for column in cols_numeric:\n    summary_non_category(column)","bdaf2aea":"def summary_category(category_column):\n    count_category= []\n    value_category = []\n    category_loan = []\n    category_no_loan =[]\n    category = df[category_column].unique()\n    for x in category:\n        value_category.append(x)\n        count_category.append(df[category_column][df[category_column] ==x].count())\n    value_category = np.array(value_category)  \n    for x in np.nditer(value_category):\n        category_loan.append(df[category_column][df[category_column]==x][df[\"Personal Loan\"] ==1].count())\n        category_no_loan.append(df[category_column][df[category_column]==x][df[\"Personal Loan\"] ==0].count())\n# Plotting Graph\n    fig, (ax1,ax2) = plt.subplots(1,2)\n    ax1.pie(count_category,labels=value_category, autopct='%1.1f%%')\n    ax2.bar(value_category-0.2,category_loan, width=0.4, label=\"Loan\")\n    ax2.bar(value_category+0.2,category_no_loan, width=0.4,label=\"No Loan\")\n    plt.title(category_column)\n    plt.legend()\n    plt.show()","011c6071":"for category_column in cols_categorical:\n    summary_category(category_column)","d1c60f7e":"X = df.drop('Personal Loan', axis = 1)\ny = df['Personal Loan']\ndata_num = df.select_dtypes(include='number')\nsns.pairplot(X ,diag_kind = 'kde', vars = list(data_num.columns))","8fd70688":"X = df.drop('Personal Loan', axis = 1)\ny = df['Personal Loan']","94378aa8":"# thanks to Anirban Datta\ncorr = X.corr()\nplt.figure(figsize=(10, 8))\ng = sns.heatmap(corr, annot=True, cmap = 'summer_r', square=True, linewidth=1, cbar_kws={'fraction' : 0.02})\ng.set_yticklabels(g.get_yticklabels(), rotation=0, horizontalalignment='right')\nbottom, top = g.get_ylim()\ng.set_ylim(bottom + 0.5, top - 0.5)\nplt.show()","f1453416":"df.Experience.unique()","78a9e754":"df[\"Experience\"][df[\"Experience\"]<0].count()","15e89972":"df[\"Experience\"][df[\"Experience\"]>=0].count()","f5c733c9":"df2 = df[df[\"Experience\"]>=0]\ndf2.head()","85a93916":"df2.describe().transpose()","f925e815":"df2[\"Mortgage\"][df2[\"Mortgage\"]==0].count()","509b10c1":"mortgage = {}\nmortgage[\"Personal_loan_and_no_mortagage\"]    = df2[\"Mortgage\"][df2[\"Mortgage\"]==0][df2[\"Personal Loan\"]==1].count()\nmortgage[\"no_Personal_loan_and_no_mortagage\"] = df2[\"Mortgage\"][df2[\"Mortgage\"]==0][df2[\"Personal Loan\"]==0].count()\nmortgage[\"no_Personal_loan_and_mortagage\"]    = df2[\"Mortgage\"][df2[\"Mortgage\"]>0][df2[\"Personal Loan\"]==0].count()\nmortgage[\"Personal_loan_and_mortagage\"]       = df2[\"Mortgage\"][df2[\"Mortgage\"]>0][df2[\"Personal Loan\"]==1].count()\nmortgage","67a59ed8":"xpos = np.arange(len(mortgage))\nvalue = [x for x in mortgage.values()]\nkeys = [x for x in mortgage.keys()]\nplt.bar(xpos,value)\nplt.xticks(xpos)\nplt.ylabel(\"Count\")\nplt.title('Mortgage')\nplt.show()","e6cdde74":"from sklearn.preprocessing import MinMaxScaler","a7da25ce":"df2.columns\n","1de92f09":"scale = MinMaxScaler()","a373f3d5":"X = df2[['Income', 'CCAvg',\"Mortgage\",\"Age\",\"Experience\"]]\nscaledX = scale.fit_transform(X)\ndf2['Income']     = (scaledX[:,0])\ndf2[\"CCAvg\"]      = (scaledX[:,1])\ndf2[\"Mortgage\"]   = (scaledX[:,2])\ndf2[\"Age\"]        = (scaledX[:,3])\ndf2[\"Experience\"] = (scaledX[:,4])\ndf2.head()","b5895511":"sns.distplot(df2[\"Income\"])","92366c9b":"sns.distplot(df2[\"CCAvg\"])","e7b082ca":"upper_limit_income = df2[\"Income\"].mean() + 3*df2[\"Income\"].std()\nupper_limit_income","fe75ca47":"upper_limit_ccavg = df2[\"CCAvg\"].mean() + 2*df2[\"CCAvg\"].std()\nupper_limit_ccavg","f8d9f7d0":"df2.shape","1ed86812":"df3 = df2[df2[\"Income\"]<upper_limit_income][df2[\"CCAvg\"]<upper_limit_ccavg]\ndf3.shape","e2265d44":"sns.distplot(df3[\"Income\"])","6cf8a5ce":"sns.distplot(df3[\"CCAvg\"])","fc6c25e0":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n","16fd4fc9":"X = df3.drop(['Personal Loan'],axis='columns')\nX.head(3)","40489649":"y = df3[\"Personal Loan\"]\ny.head()","55c1d221":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)","0e374bdd":"from sklearn.model_selection import ShuffleSplit          # for random suffle rather than in order\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\ncross_val_score(RandomForestClassifier(), X, y, cv=cv)","f2853602":"from sklearn.model_selection import ShuffleSplit          # for random suffle rather than in order\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(DecisionTreeClassifier(), X, y, cv=cv)","ee085448":"model_params = {\n    'svm': {\n        'model': svm.SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20],\n            'kernel': ['rbf','linear']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear',multi_class='auto'),\n        'params': {\n            'C': [1,5,10]\n        }\n    },\n    'DecisionTree': {\n        'model' : DecisionTreeClassifier(),\n        'params' : {\n            'criterion' : [\"gini\", \"entropy\"]\n        }\n    },\n    'GaussianNB' : {\n        'model' : GaussianNB(),\n        'params' : {}\n          \n },\n    'MultinomialNB' : {\n        'model' : MultinomialNB(),\n        'params' : {}\n            \n            \n        \n    }\n}","6c11c2d5":"from sklearn.model_selection import GridSearchCV\nscores = []\nbest_estimators = {}\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=cv, return_train_score=False)\n    clf.fit(X_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    best_estimators[model_name] = clf.best_estimator_\ndf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf","dc36fab6":"best_clf = best_estimators[\"DecisionTree\"]","cb9338a0":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, best_clf.predict(X_test))\ncm","e4ee8739":"import seaborn as sn\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","8a126b17":"# Thanks to Anirban Datta\nbest_clf.fit(X_train, y_train)\n\nfeatures = list(X_train.columns)\nimportances = best_clf.feature_importances_\nindices = np.argsort(importances)\n\nfig, ax = plt.subplots(figsize=(10, 7))\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nax.tick_params(axis=\"x\", labelsize=12)\nax.tick_params(axis=\"y\", labelsize=14)\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance', fontsize = 18)\nplt.show()","48ddc2f6":"# Plotting graph for analysis different columns","52d2da50":"# Univariate Analysis","b20d0c7c":"**Creating function to show Density distribution for non-category column**","9b22afa2":"****Now Creating function to show Density distribution for category column****","ab8a60e5":"As we see earlier Mortgage,income and CCavg contains outlier","0e33a709":"Above info shows that some of the categorical feature treated as integer, we need to change type to category","a36c8c0d":"We see there is a very strong positive correlation between Age and Work Experience, which is expected. There is also a positive correlation between Income and Credit Card spending.","d257ba51":"Feature variable X","cb10e67b":"Target Variable y","da38f8b8":"# Exploratory Data Analysis","7fcda6a7":"****Thus we conclude Income is the main key feature then comes education,CCavg,Family. Seems logical too. and best fit model for our case comes out to be Decision Tree****","b962871b":"**dropping ID and ZIP code column as it's not relevant for our analysis**","1de4f5b8":"# Data Pre-processing","0598809f":"Now we have prepared the good data..Let's build the model","3099051a":"We see that count is very less for negative experience as compare to positive,so we gonna drop negative value as experience negative value doesn't make sense to me","b5b27b1c":"Let's look form mortgage first","21f8af29":"# Bivariate Analysis","f4616b62":"As we can see above we can't neglect any value as it might affect our target variable \"Personal loan,so we can't treat it as category.","bd1ec790":"**Testing Random forest**","a9f01ff4":"**Loading file...**","4cf4d0a5":"**CONFUSION Matrix**","3b552b9f":"****From above plot Income,Ccavg,Mortgage doesn't seeems good,need to alter the outlier,which we will do in later process***","54376839":"# Building model","319bcbdf":"We see some negative value, let's count it","15391a89":"As the count of not having Mortagage is very large, we might think to treat mortgage as category variable. Let's see whether it will be a good choice or not","7d6cc1ac":"**Train-test data split**","1d317eee":"**Dividing the columns in the dataset in to numeric and categorical attributes**","307e4e80":"Now we have category type for categorical feature variable","95a380ea":"****The distribution of 'CD Account' and 'Securities Account' are not in proper ratio.Ideally we should have more data for these columns for good analysis****","690da9d8":"# Multivariate Analysis","fe15546d":"now SCALING the non-category column","5c067f6f":"**Testing Decision Tree**","f30c6198":"As income and CCAvg graph is skewed left ,we will remove outlier","7d9001ef":"above graph looks better than previous","fd6386df":"from above we can see Decision Tree comes out to be best for our case","86a98fcc":"**Parameter tuning using GridSearhCv**","788b3a86":"**Relative importance of feature variable**"}}