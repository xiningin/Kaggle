{"cell_type":{"9a258bc8":"code","568772e5":"code","bdd3e2be":"code","562c2b1b":"code","a7eeb100":"code","8a3b3569":"code","74ce47fc":"code","f79138d6":"code","0f5d5ee0":"code","a1091baf":"code","9368d9b7":"code","7d3a02d6":"code","17f4740c":"code","045a64b7":"code","b5c27316":"code","b5950a09":"code","a9f7c346":"code","56635e67":"code","ca9a63db":"markdown"},"source":{"9a258bc8":"from copy import deepcopy\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","568772e5":"x = [[1],[2],[3],[4]]\ny = [[3],[6],[9],[12]]","bdd3e2be":"def feed_forward(inputs, outputs, weights):\n    out = np.dot(inputs,weights[0])+ weights[1]\n    mean_squared_error = np.mean(np.square(out - outputs))\n    return mean_squared_error","562c2b1b":"def update_weights(inputs, outputs, weights, lr):\n    original_weights = deepcopy(weights)\n    org_loss = feed_forward(inputs, outputs, original_weights)\n    updated_weights = deepcopy(weights)\n    for i, layer in enumerate(original_weights):\n        for index, weight in np.ndenumerate(layer):\n            temp_weights = deepcopy(weights)\n            temp_weights[i][index] += 0.0001\n            _loss_plus = feed_forward(inputs, outputs, temp_weights)\n            grad = (_loss_plus - org_loss)\/(0.0001)\n            updated_weights[i][index] -= grad*lr\n    return updated_weights","a7eeb100":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]","8a3b3569":"weight_value = []\nfor epx in range(1000):\n    W = update_weights(x,y,W,0.01)\n    weight_value.append(W[0][0][0])","74ce47fc":"plt.plot(weight_value)\nplt.title('Weight value over increasing epochs')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","f79138d6":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]\nweight_value = []\nfor epx in range(1000):\n    W = update_weights(x,y,W,0.1)\n    weight_value.append(W[0][0][0])","0f5d5ee0":"plt.plot(weight_value)\nplt.title('Weight value over increasing epochs with learning rate of 0.1')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","a1091baf":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]\nweight_value = []\nfor epx in range(1000):\n    W = update_weights(x,y,W,1)\n    weight_value.append(W[0][0][0])","9368d9b7":"plt.plot(weight_value)\nplt.title('Weight value over increasing epochs with learning rate of 1')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","7d3a02d6":"def update_weights(inputs, outputs, weights, lr):\n    original_weights = deepcopy(weights)\n    org_loss = feed_forward(inputs, outputs, original_weights)\n    updated_weights = deepcopy(weights)\n    for i, layer in enumerate(original_weights):\n        for index, weight in np.ndenumerate(layer):\n            temp_weights = deepcopy(weights)\n            temp_weights[i][index] += 0.0001\n            _loss_plus = feed_forward(inputs, outputs, temp_weights)\n            grad = (_loss_plus - org_loss)\/(0.0001)\n            updated_weights[i][index] -= grad*lr\n            if(i % 2 == 0):\n                print('weight value:', np.round(original_weights[i][index],2), \n                      'original loss:', np.round(org_loss,2), \n                      'loss_plus:', np.round(_loss_plus,2), \n                      'gradient:', np.round(grad,2), \n                      'updated_weights:', np.round(updated_weights[i][index],2))\n    return updated_weights","17f4740c":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]\nweight_value = []\nfor epx in range(10):\n    W = update_weights(x,y,W,0.01)\n    weight_value.append(W[0][0][0])\nprint(W)","045a64b7":"plt.plot(weight_value[:100])\nplt.title('Weight value over increasing epochs when learning rate is 0.01')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","b5c27316":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]\nweight_value = []\nfor epx in range(10):\n    W = update_weights(x,y,W,0.1)\n    weight_value.append(W[0][0][0])\nprint(W)","b5950a09":"plt.plot(weight_value[:100])\nplt.title('Weight value over increasing epochs when learning rate is 0.1')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","a9f7c346":"W = [np.array([[0]], dtype=np.float32), np.array([[0]], dtype=np.float32)]\nweight_value = []\nfor epx in range(10):\n    W = update_weights(x,y,W,1)\n    weight_value.append(W[0][0][0])\nprint(W)","56635e67":"plt.plot(weight_value[:100])\nplt.title('Weight value over increasing epochs when learning rate is 1')\nplt.xlabel('Epochs')\nplt.ylabel('Weight value')","ca9a63db":"# Improving"}}