{"cell_type":{"d9efad60":"code","43381df0":"code","2db006a8":"code","55c7c2e1":"code","be82ae22":"code","3409191e":"code","8932a879":"code","aa12a583":"code","b2e4cbd0":"code","acb6c0fb":"code","5a7cd497":"code","0b7e568f":"code","ed360c03":"code","d53142b2":"code","81877534":"code","0f456181":"code","619c00e5":"code","46097b64":"code","f9715586":"code","6889dd1f":"code","fa34eb90":"code","0a011580":"code","96a1e9fe":"code","feda00ca":"code","12a863f3":"code","2192f07f":"code","2e7b80b5":"code","900ea008":"code","d17b9a85":"code","2c35c950":"code","1260f6f8":"code","eb88834d":"code","42d2f282":"code","91db7837":"code","2798fea4":"code","cdc5202d":"code","17abca64":"code","824a1956":"markdown","273ba2ff":"markdown","dd5ee68e":"markdown","b4f29e51":"markdown","9618dae4":"markdown","91ccd92b":"markdown","423aa2d2":"markdown","ea2ec4d8":"markdown","14f378f0":"markdown","bc47e0a5":"markdown","c7d0ad4c":"markdown","19045164":"markdown","b4a15177":"markdown","2599bd26":"markdown","1887e000":"markdown","3d552246":"markdown","c3c4f61c":"markdown","37a733f1":"markdown","fae59e09":"markdown","87b2e841":"markdown","74254c64":"markdown"},"source":{"d9efad60":"%%HTML\n<style>\n.gold { background-color:#ffcc55; font-weight:bold; }\n.silver { background-color:#99ccee; font-weight:bold; }\n.bronze { background-color:#bbaabb; font-weight:bold; }\n.bagel { background-color:#ffffff; color: #dddddd; }\n<\/style>","43381df0":"target_word = 'fork'\nhighlights = {\n    r'(\\w*vote|\\w*voting)' : '#ffff99',\n    r'(notebook|kernel|script)' : '#99ffff',\n}\n\nreplacements = [\n    # example usage:\n    #dict(pat='(shake)[\\s-]+(up)', repl=r'\\1\\2', case=False)\n]\n\n# Number of characters to show either side of the central search column\nn_context_chars = 40\n\n# Must specify these in the <pre> tag.\n# (Without it you get white text on white background.)\nbackground = 'white'\ncolor = 'black'","2db006a8":"import re\nimport html\nimport calendar\nimport unidecode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom bs4 import BeautifulSoup\nfrom collections import Counter\nfrom IPython.display import HTML, display\n\nMK = Path(f'..\/input\/meta-kaggle')\nNROWS = None\n\npd.options.display.max_rows = 200","55c7c2e1":"digits = '\u24ea\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246a\u246b\u246c\u246d\u246e\u246f\u2470\u2471\u2472\u2473\u3251\u3252\u3253\u3254\u3255\u3256\u3257\u3258\u3259\u325a\u325b\u325c\u325d\u325e\u325f\u32b1\u32b2\u32b3\u32b4\u32b5\u32b6\u32b7\u32b8\u32b9\u32ba\u32bb\u32bc\u32bd\u32be\u32bf\ud83c\udf1f'\ndigit_codes = np.asarray(list(digits))\nmedal_classes = np.asarray([ 'bagel', 'gold', 'silver', 'bronze' ])\npad = n_context_chars * ' '\npre_style = f'background:{background}; color:{color}; white-space: pre;'\nmedal_mark_tags = np.asarray([f'<mark class=\"{c}\">' for c in medal_classes])","be82ae22":"# Highlight words that appear in series\n# Using <mark> instead of <font> ruins the text alignment in Firefox.\ndef highlight(series):\n    for term, highlight_color in highlights.items():\n        pattern = r'(\\b%s\\w*)' % (term,)\n        frep = lambda m: f'<font style=\"background-color:{highlight_color};\">{m.group(1)}<\/font>'\n        series = series.str.replace(pattern, frep, case=False)\n    return series\n\n\n# clean for use in html attr=\"text\" using double quotes\ndef clean_for_html_attr(txt):\n    return html.escape(txt, quote=True)\n\n\n# replace unicode, remove quotes and normalise spaces\ndef clean_for_line_display(txt):\n    txt = unidecode.unidecode(txt)\n    txt = re.sub(r'\\[quote.*\\[\/quote\\]', ' ', txt, flags=re.S)\n    txt = re.sub(r'\\s+', ' ', txt)\n    return txt\n\n\ndef parse_html(r):\n    txt = BeautifulSoup(r, 'html').text\n    return clean_for_html_attr(txt), clean_for_line_display(txt)\n\n\ndef read_csv(csv, **kwargs):\n    return pd.read_csv(MK \/ csv, **kwargs)","3409191e":"comps = read_csv('Competitions.csv')\ncomps = comps.dropna(subset=['ForumId'])\ncomps = comps.drop_duplicates(subset=['ForumId'], keep='last')\ncomps['ForumId'] = comps['ForumId'].astype(int)\ncomps = comps.set_index('ForumId')\n\nkdf = read_csv('Kernels.csv').set_index('Id')\n\nusers = read_csv('Users.csv').set_index('Id')\nkdf = kdf.join(users[['UserName']].add_prefix('Kernel'), on='AuthorUserId')\n\nforums = read_csv('Forums.csv').set_index('Id')\n\ntopics = read_csv('ForumTopics.csv').set_index('Id')\n\nmsgs = read_csv('ForumMessages.csv', nrows=NROWS)\nmsgs = msgs.dropna(subset=['Message'])\nmsgs = msgs.set_index('Id')\nmsgs = msgs.sort_index()","8932a879":"for opt in replacements:\n    msgs['Message'] = msgs.Message.str.replace(**opt)","aa12a583":"votes = read_csv('ForumMessageVotes.csv')\nvotes = votes.drop_duplicates(subset=['Id'])\nvotes = votes.set_index('Id')\n\nmsgs['Votes'] = votes.ForumMessageId.value_counts()\nmsgs['Medal'] = msgs['Medal'].fillna(0).astype(int)\nmsgs['Votes'] = msgs['Votes'].fillna(0).astype(int)\nmsgs['VoteIcon'] = msgs['Votes'].clip(0, 50) # use 51 for the \ud83c\udf1f icon","b2e4cbd0":"idx = msgs.Message.str.contains(target_word, case=False)\nidx.sum()","acb6c0fb":"%%time\nparsed = msgs.loc[idx, 'Message'].apply(parse_html)\nmsgs.loc[idx, 'Preview'] = parsed.str[0]\nmsgs.loc[idx, 'Clean'] = parsed.str[1]","5a7cd497":"term = '(.{,%d})(%s)(.{,%d})' % (n_context_chars, target_word, n_context_chars)\nterm","0b7e568f":"res = msgs.Clean.str.extractall(term, re.IGNORECASE)\nres = res.fillna('').reset_index()\nres.shape","ed360c03":"# Sneak preview\nres.head()","d53142b2":"res[0] = (pad + res[0]).str[-n_context_chars:]\nres[2] = (res[2] + pad).str[:n_context_chars]","81877534":"res[[0, 2]] = res[[0, 2]].applymap(html.escape)","0f456181":"res = res.join(msgs, on='Id')","619c00e5":"res = res.join(users, on='PostUserId')","46097b64":"res = res.join(topics, on='ForumTopicId')","f9715586":"res = res.join(comps.rename(columns={'Title': 'CompetitionTitle', 'Id': 'CompetitionId'}), on='ForumId')","6889dd1f":"res = res.join(kdf[['KernelUserName', 'CurrentUrlSlug']], on='KernelId')","fa34eb90":"res.Title = res.Title.fillna('<missing>').apply(clean_for_html_attr)","0a011580":"res.PostDate = pd.to_datetime(res.PostDate)","96a1e9fe":"general_forums = {\n    15: 'general',\n    208: 'getting-started',\n    809: 'product-feedback',\n    2239: 'questions-and-answers',\n    2241: 'data',\n    17686: 'learn-forum',\n}\n\nres['Forum'] = res.ForumId.map(general_forums)","feda00ca":"res['Url'] = (res.ForumId.map(general_forums).fillna('data') + '\/' +\n              res.ForumTopicId.map(str))","12a863f3":"idx = res.ForumId.isin(comps.index)\nidx.sum()","2192f07f":"res.loc[idx, 'Url'] = ('c\/' + res.loc[idx, 'Slug'] + '\/discussion\/' +\n                       res.ForumTopicId.map(str))","2e7b80b5":"idx = ~res.KernelId.isnull()\nidx.sum()","900ea008":"res.loc[idx, 'Url'] = (res.loc[idx, 'KernelUserName'] + '\/' +\n                       res.loc[idx, 'CurrentUrlSlug'] + '\/comments')","d17b9a85":"color_key_list = [f'<mark class={c}>{c}<\/mark>' for c in medal_classes]\nHTML('Medal Colors: ' + ' '.join(color_key_list))","2c35c950":"def prep(series):\n    return (series + '\\n').fillna('')\n\n\n# Make a list of arrays and pd.Series; each entry is part of a line.\n# Some fields are optional e.g. res.CompetitionTitle will be N\/A for some rows.\n# So add prefix and newline and do fillna('') separately - N\/A values result in no line\nparts = [\n    # First entry has to be a series\n    pd.Series(medal_mark_tags[res.Medal]),\n    pd.Series(digit_codes[res.VoteIcon]),\n    '<\/mark> ',\n    highlight(res[0]),  # context: left\n    '<a title=\"',\n    prep('Topic: ' + res.Title),\n    prep('Forum: ' + res.Forum),\n    prep('Competition: ' + res.CompetitionTitle),\n    prep('Kernel: ' + res.CurrentUrlSlug + ' by ' + res.KernelUserName),\n    prep('User: ' + res.DisplayName + ' [' + res.UserName + ']'),\n    prep('Date: ' + res.PostDate.dt.strftime('%c')),\n    '\\n',\n    prep('Message:\\n' + res.Preview),\n    '\" href=\"https:\/\/www.kaggle.com\/',\n    prep(res['Url'] + '#' + res.Id.map(str)),  # message Id for link anchor\n    '\">',\n    res[1],  # middle: search term\n    '<\/a>',\n    highlight(res[2]),  # context: right\n]\n\n# This joins the series & arrays into one series.\nlines = np.add.reduce(parts)\nlines = lines.to_frame('Text')\nlines['Date'] = res.PostDate\nlines['Year'] = res.PostDate.dt.year\nlines['Month'] = res.PostDate.dt.month","1260f6f8":"markup = ''\nfor year, year_df in lines.groupby('Year'):\n    markup += f'<h1 id=\"{year}\">{year}<\/h1>'\n    if len(year_df) >= 20:\n        # separate month headings\n        for month, month_df in year_df.groupby('Month'):\n            contents = '\\n'.join(month_df['Text'])\n            markup += f'<h1 id=\"{year}-{month}\">{year} &mdash; {calendar.month_name[month]}<\/h1>'\n            markup += f'<pre style=\"{pre_style}\">{contents}<\/pre>'\n    else:\n        # year as one block\n        contents = '\\n'.join(year_df['Text'])\n        markup += f'<pre style=\"{pre_style}\">{contents}<\/pre>'\nHTML(markup)","eb88834d":"plt.rc('figure', figsize=(12, 9))\nplt.rc('font', size=14)","42d2f282":"uniq = res.drop_duplicates(subset=['Id'])","91db7837":"uniq.PostDate.dt.year.value_counts().sort_index()","2798fea4":"uniq.PostDate.hist(bins=50)\nplt.title(f'Mentions of \"{target_word}\" on Kaggle Forums');","cdc5202d":"gb = uniq.groupby('PostDate')\nvotes = gb.Votes.sum().cumsum()\nposts = gb.size().cumsum().rename('Posts')\n\nfig, axl = plt.subplots()\naxr = axl.twinx()\nvotes.plot(title=f'Cumulative Mentions of \"{target_word}\" on Kaggle Forums', ax=axl)\nposts.plot(ax=axl)\n(votes\/posts).rolling(20).mean().plot(label='Votes per post', ax=axr, c='g')\naxl.grid()\naxl.set_ylabel('Counts')\naxr.set_ylabel('Vote rate')\naxl.legend(loc='lower left')\naxr.legend(loc='lower right');","17abca64":"_ = \"\"\"\nRe-run to include recently completed competitions:\n\n\tSlug:rsna-miccai-brain-tumor-radiogenomic-classification\n\tSlug:nfl-health-and-safety-helmet-assignment\n\tSlug:ventilator-pressure-prediction\n\tSlug:chaii-hindi-and-tamil-question-answering\n\tSlug:tabular-playground-series-oct-2021\n\tSlug:tabular-playground-series-nov-2021\n\n\"\"\"","824a1956":"# Stats","273ba2ff":"# Settings\n\nYou can alter","dd5ee68e":"# Search\n\nFirst: a fast scan","b4f29e51":"Key for the medal colors:\n","9618dae4":"Add fields into results","91ccd92b":"# Results\n\nMouse over the central word for a preview of the full message.","423aa2d2":"Replace special chars with html entities, which will render as one character","ea2ec4d8":"# Read","14f378f0":"# Tend\n\nFix widths of context","bc47e0a5":"\"[The Garden of Forking Paths](https:\/\/en.wikipedia.org\/wiki\/The_Garden_of_Forking_Paths)\" (original Spanish title: \"El jard\u00edn de senderos que se bifurcan\") is a 1941 short story by Argentine writer and poet Jorge Luis Borges with a theme that has been said to foreshadow the many worlds interpretation of quantum mechanics.\nBorges's vision of \"forking paths\" has also been cited as inspiration by numerous new media scholars, in particular within the field of hypertext fiction.\n\nThe story describes a book in which different versions of reality play out with people swapping roles between them.\nIn a weird way this reminded me of the Kaggle forums where an increasing number of users write about how it seems unfair that Notebook forks often outnumber votes.\nBecause the [general forums](https:\/\/www.kaggle.com\/general) have many topics and an infinite scroll mechanism with slow loading times, people don't tend to see the <mark>past<\/mark> messages on this subject, so they write their own, resulting in this flow of messages all rephrasing the same thing!\n\nOf course \"forks\" are mentioned in a lot of other contexts too: here they are, **all** mentions of the word \"fork\" on the Kaggle forums, a hypertext adventure where you can inspect the <mark>past<\/mark>, click around and jump into old threads, upvote the sentiments you agree with, or add new points of view from a 2021 perspective!\n\nFeel free to fork it to try other search terms e.g. [shake-up](https:\/\/www.kaggle.com\/jtrotman\/shakeup-the-story-so-far) :-)\n\nAnd feel free to mention this notebook on the forums, if you do then your comment will appear below, in <mark>future<\/mark> runs of this notebook itself.\n\n________\n\n#### Alternative Titles\n\n- Fast Forum Search\n\n- What Do We Say When We Talk About Forking?\n\n- Fork Talk\n\n- How To Generate an Index of Past Discussions That Took Place on the Online Forums of the Kaggle Data Science Platform on the Subject of Copying and Editing Notebooks, Scripts or Kernels, using the Generously Provided [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) Dataset\n\n [1]: https:\/\/www.kaggle.com\/kaggle\/meta-kaggle\n","c7d0ad4c":"parse_html only for messages that contain our key search word","19045164":"# Link\n\nMaking links to actual contents:\n\nIf KernelId set - Author\/CurrentSlug\n\nIf ForumId in comps - \/c\/Slug\/discussion\/[topicID]\n\nIf ParentForumId==9 custom url for each: below are de facto parts of URL for discussions in *general* forums.","b4a15177":"Do the search - `res` has one row per hit","2599bd26":"# Import","1887e000":"Settings you can try to alter but perhaps best as they are","3d552246":"### Competition URLs","c3c4f61c":"Regex for actual text search","37a733f1":"See [Issue: ForumMessageVotes contents duplicated](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle\/discussion\/181883) - must use drop_duplicates","fae59e09":"# Format\n\nDisplay all matches with a link to the actual post and verbose \"title\" attribute that summarises it:\n\n- Topic Title\n- Competition | Kernel | Dataset\n- User\n- Date\n- Message itself!\n","87b2e841":"So there you have it, a literal pathway of \"forks\" through the Kaggle forums.\n\n(Now that the Fork button has the label \"Copy and Edit\" we might miss some of these discussions in the future!)\n\n________\n\n#### See Also\n\nFirst Fork!\n\nhttps:\/\/www.kaggle.com\/jtrotman\/shakeup-the-story-so-far\n","74254c64":"### Kernel URLs"}}