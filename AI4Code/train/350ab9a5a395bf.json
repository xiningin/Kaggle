{"cell_type":{"cf1b083f":"code","893afb08":"code","0de7d024":"code","892716d8":"code","c9332f5b":"code","bea60299":"code","f52197ed":"code","cbbbab45":"code","e7b1fc32":"code","c2e20ab9":"code","45d85ca0":"code","feb53989":"code","100c61e4":"code","329aab5f":"code","8eaa27d1":"code","ef2994b6":"code","b520a5b9":"code","63b447b6":"code","e3dd6a4a":"markdown"},"source":{"cf1b083f":"# !pip install pandarallel \n\n# import gc\n\n# import numpy as np\n# import pandas as pd\n# from pathlib import Path\n\n# from pandarallel import pandarallel\n# pandarallel.initialize()\n\n# BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\n# train = pd.read_csv(BASE_DIR \/ 'train.csv')\n\n# null = np.nan\n# true = True\n# false = False\n\n# for col in train.columns:\n\n#     if col == 'date': continue\n\n#     _index = train[col].notnull()\n#     train.loc[_index, col] = train.loc[_index, col].parallel_apply(lambda x: eval(x))\n\n#     outputs = []\n#     for index, date, record in train.loc[_index, ['date', col]].itertuples():\n#         _df = pd.DataFrame(record)\n#         _df['index'] = index\n#         _df['date'] = date\n#         outputs.append(_df)\n\n#     outputs = pd.concat(outputs).reset_index(drop=True)\n\n#     outputs.to_csv(f'{col}_train.csv', index=False)\n#     outputs.to_pickle(f'{col}_train.pkl')\n\n#     del outputs\n#     del train[col]\n#     gc.collect()\n","893afb08":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom tqdm import tqdm\nimport mlb\nimport gc","0de7d024":"players = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/players.csv\")\nplayers_stats = pd.read_csv(\"..\/input\/extradata\/players_stats.csv\")\nrosters = pd.read_pickle('..\/input\/mlb-pdef-train-dataset\/rosters_train.pkl')","892716d8":"FECOLS = ['t1_mean', 't2_mean', 't3_mean', 't4_mean',\n       't1_max', 't2_max', 't3_max', 't4_max', 't1_min', 't2_min', 't3_min',\n       't4_min', 't1_std', 't2_std', 't3_std', 't4_std']\nTGTCOLS = ['target1', 'target2', 'target3', 'target4']","c9332f5b":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping","bea60299":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    nh = 128\n    x = L.Dense(nh, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(nh, activation=\"relu\", name=\"d2\")(x)\n    x = L.Dense(nh, activation=\"relu\", name=\"d3\")(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN_XST\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model","f52197ed":"XST = make_model(16)\nprint(XST.summary())","cbbbab45":"XST.load_weights(\"..\/input\/trainingxst\/model_XST.cpkt\")","e7b1fc32":"# #to debug submission process\n# sample_pred_temp = pd.DataFrame(columns=['date_playerId', 'target1', 'target2', 'target3', 'target4'])\n# test_temp = pd.DataFrame(columns=['date_playerId', 'playerId', 'gameDate', 'teamId', 'statusCode',\n#        'status', 'bmi', 'DOB', 'age', 'is_played', 'Unnamed: 0', 't1_m',\n#        't2_m', 't3_m', 't4_m'])","c2e20ab9":"env = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set","45d85ca0":"null = np.nan\ntrue = True\nfalse = False\n\nfor (test_df, sample_prediction_df) in iter_test: # make predictions here\n    \n    sample_prediction_df = sample_prediction_df.reset_index(drop=True)\n    \n    # creat dataset\n    sample_prediction_df['playerId'] = sample_prediction_df['date_playerId']\\\n                                        .map(lambda x: int(x.split('_')[1]))\n    # Dealing with missing values\n    if test_df['rosters'].iloc[0] == test_df['rosters'].iloc[0]:\n        test_rosters = pd.DataFrame(eval(test_df['rosters'].iloc[0]))\n    else:\n        test_rosters = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in rosters.columns:\n            if col == 'playerId': continue\n            test_rosters[col] = np.nan\n            \n    sub_df = sample_prediction_df[['playerId']].copy()\n    sub_df = sub_df.merge(players_stats,on='playerId',how='left')\n    \n    X_fe = sub_df[FECOLS].fillna(0.).values\n    preds = XST.predict(X_fe)\n    preds = np.clip(preds, 0, 100)\n    \n    # merge submission\n    sample_prediction_df[TGTCOLS] =  preds\n    sample_prediction_df = sample_prediction_df.fillna(0.)\n    \n    final_headers = [\"date_playerId\", \"target1\", \"target2\", \"target3\", \"target4\"]\n    sample_prediction_df = sample_prediction_df[final_headers].copy()\n    #del sample_prediction_df['playerId']\n    \n#      #to debug\n#     sample_pred_temp = sample_pred_temp.append(sample_prediction_df)#,ignore_index=True)\n#     #test_temp = test_temp.append(test) #ignore_index=True)\n#     #\n    \n    env.predict(sample_prediction_df)","feb53989":"sample_prediction_df","100c61e4":"# # to reset env.predict() to work\n# example_sample_submission = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_sample_submission.csv\")\n# example_sample_submission\n# #env.predict(example_sample_submission) ","329aab5f":"# # to check if any date_playerId is missing in submission\n# list(example_sample_submission.date_playerId)==list(sample_pred_temp.date_playerId)\n","8eaa27d1":"# # to trace mismatch\n# for id in zip(sample_pred_temp.date_playerId,example_sample_submission.date_playerId):\n#     if id[0]==id[1]:\n#         pass\n#     else:\n#         print(\"EXCEPTION\")","ef2994b6":"# sample_pred_temp.info()","b520a5b9":"# example_sample_submission.info()","63b447b6":"# sample_pred_temp","e3dd6a4a":"# Submission"}}