{"cell_type":{"d6a13900":"code","04143743":"code","f3e3fcb4":"code","77a5b8c1":"code","64c2150a":"code","857467a5":"code","a2e96215":"code","72046758":"code","cc5cd17a":"code","40b4f08b":"code","d976f930":"code","5dab87f5":"code","0626c7c7":"code","6e6873f5":"code","f134e705":"code","f04076cf":"code","92bd94af":"code","f9f282ea":"code","6d5836f2":"code","160beac7":"code","675ba1c0":"code","7b4fc8c4":"code","a9824a13":"code","8597b8aa":"code","c25a14d7":"code","91f67e36":"code","9efd0413":"code","d8428f27":"code","dd247199":"code","93a0d54e":"code","efb6dd0a":"code","54a9a5cd":"code","6f886a75":"code","28ad15bd":"markdown"},"source":{"d6a13900":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04143743":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","f3e3fcb4":"vid = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/video_review.csv')\nvid.head(10)","77a5b8c1":"game = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/game_data.csv')\ngame.head(10)","64c2150a":"game['concussion'] = np.isin(game['GameKey'], vid['GameKey'])\ngame.head(10)","857467a5":"prole = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/play_player_role_data.csv')\nprole.head(10)","a2e96215":"prole['concussion'] = prole['concussion'] = np.isin(prole['GameKey'], vid['GameKey'])\nprole.head(10)","72046758":"pinfo = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/play_information.csv')\npinfo.head(10)","cc5cd17a":"pinfo['concussion'] = np.isin(pinfo['GameKey'], vid['GameKey'])\npinfo.head(10)","40b4f08b":"dist = pinfo['PlayDescription'].str.split(pat='punts', n=1, expand=True)\npinfo['punt_dist'] = dist[1].str.extract('(\\d+)')\npinfo['punt_dist'] = pinfo['punt_dist'].fillna(0)\npinfo['punt_dist'] = pd.to_numeric(pinfo['punt_dist'])\npinfo.head(10)","d976f930":"ngs_reg_2017_1_6 = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/NGS-2016-reg-wk1-6.csv')\nngs_reg_2017_7_12 = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/NGS-2016-reg-wk7-12.csv')\nngs_reg_2017_13_17 = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/NGS-2016-reg-wk13-17.csv')\n\nngs_reg_2017 = pd.concat([ngs_reg_2017_1_6,ngs_reg_2017_7_12,ngs_reg_2017_13_17])\nngs_reg_2017.head()\n","5dab87f5":"ngs_reg_2017['concussion'] = np.isin(ngs_reg_2017['GameKey'], vid['GameKey'])\nngs_reg_2017.head()","0626c7c7":"from matplotlib import figure\nfig = figure.Figure(figsize=(10, 7.5))\nsns.countplot(x='Quarter', data=pinfo[pinfo['concussion'] == True], color='blue')","6e6873f5":"game['Game_Start_Hour'] = game['Start_Time'].str.split(':').map(lambda x: x[0])\ngame.head()","f134e705":"fig = figure.Figure(figsize=(10, 7.5))\nsns.countplot(x='Game_Start_Hour', data=game[game['concussion'] == True], color='blue')","f04076cf":"f, x = plt.subplots(1,2, figsize=(16, 7.6))\nsns.countplot(x='Primary_Impact_Type', data=vid, color='orange', ax=x[0])\nsns.countplot(x='Player_Activity_Derived', data=vid, color='blue', ax=x[1])","92bd94af":"f = figure.Figure(figsize=(16, 7.5))\nsns.boxplot(x=ngs_reg_2017[ngs_reg_2017['concussion'] == True]['x'])","f9f282ea":"sns.violinplot(x=ngs_reg_2017[ngs_reg_2017['concussion'] == True]['x'])","6d5836f2":"set(game['Turf'].values)","160beac7":"rep = {\n    'Nat': 'Grass',\n    'Grass': 'Grass',\n    'gras': 'Grass',\n    'Arti': 'Artificial',\n    'Turf': 'Turf',\n    'turf': 'Turf',\n    'UBU': 'Ubu Speed',\n    'Synthetic': 'Synthetic'\n}\n\nclean_turf = np.array([], str)\n\nfor value in game['Turf'].values:\n    for k in list(rep.keys()):\n        if isinstance(value, str) and k in value:\n            clean_turf = np.append(clean_turf, rep[k])\n            break\n        elif value is np.nan:\n            clean_turf = np.append(clean_turf, np.nan)\n            break\n            \nlen(clean_turf)","675ba1c0":"game['clean_turf'] = clean_turf","7b4fc8c4":"sns.countplot(x='clean_turf', data=game[game['concussion'] == True], color='blue')","a9824a13":"prole['concussion'] = prole['concussion'].replace([True, False], [1, 0])\npr = prole.groupby(['Role'], as_index=False).agg({'concussion': 'sum'})\npr.sort_values(by=['concussion'], inplace=True, ascending=False)\npr","8597b8aa":"import squarify\ncmap = matplotlib.cm.Blues\nmy_values = pr[pr['concussion'] != 0]['concussion']\nmini=min(my_values)\nmaxi=max(my_values)\nnorm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\ncolors = [cmap(norm(value)) for value in my_values]\n\nplt.figure(figsize=(10, 10))\nsquarify.plot(sizes=pr[pr['concussion'] != 0]['concussion'], label=pr['Role'], alpha=0.5, color=colors)\nplt.axis('off')\nplt.show()","c25a14d7":"sns.countplot(x='Quarter', hue='concussion', data=pinfo)","91f67e36":"ax = sns.countplot(x='Player_Activity_Derived', hue='Friendly_Fire', data=vid)","9efd0413":"sns.countplot(x='Game_Start_Hour', data=game, hue='concussion')","d8428f27":"sns.countplot(x='clean_turf', data=game, hue='concussion')","dd247199":"surface_proportion = game.groupby(['clean_turf', 'concussion']).agg({'GameKey': 'count'})\nsurface_proportion","93a0d54e":"surface_proportion.groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))","efb6dd0a":"set(ngs_reg_2017[ngs_reg_2017['concussion'] == True]['GameKey'])","54a9a5cd":"hm = ngs_reg_2017[ngs_reg_2017['GameKey'] == 473]\nhm = hm[['x', 'y', 'concussion']]\nhm['x'] = hm['x'].astype(int).astype('category')\nhm['y'] = hm['y'].astype(int).astype('category')\nhm.head()","6f886a75":"hm['concussion'] = hm['concussion'].replace([True, False], [1, 0])\nhm.head()","28ad15bd":"**Univariant Analysis**"}}