{"cell_type":{"e8a91bab":"code","3ab317e3":"code","bc1b9f2b":"code","a28a3421":"code","f50bc1d6":"code","997c8c18":"code","fe99e36f":"code","5b172850":"code","3178773f":"code","2fdfdf0f":"code","9e3ffcff":"code","02d9b9b1":"code","a8c3f1b6":"code","445bd48e":"code","6206b6b5":"code","66b2f432":"code","020cd467":"code","58541507":"code","9457ee13":"code","e5bad294":"code","295aa4e6":"code","26153c5d":"code","93af9e73":"code","40a52631":"code","b0e566d7":"code","856a9f4b":"code","f7162ec6":"code","84909550":"code","a035617e":"code","352fb361":"code","21708e03":"code","ed3ec7c8":"code","7dbd3913":"code","e9954477":"code","c6ef7a4e":"code","a1a48e3f":"code","20d9c85d":"code","0b325194":"code","fbcb368a":"markdown","9902f189":"markdown","eaeefff9":"markdown","8fe08567":"markdown","c05f82df":"markdown"},"source":{"e8a91bab":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","3ab317e3":"data0 = pd.read_csv(\"..\/input\/used-cars-dataset-from-cardekhocom\/cardekho_updated.csv\")\ndata0[0:2].T","bc1b9f2b":"data0.columns","a28a3421":"data0.info()","f50bc1d6":"data0=data0.fillna('0')","997c8c18":"data0['max_power']","fe99e36f":"power=[]\nfor item in data0['max_power']:\n    item2=item.replace('Max Power','').replace(' bhp','')\n    power+=[float(item2)]\ndata0['max_power']=power\ndata0['max_power']","5b172850":"data0['km_driven']","3178773f":"driven=[]\nfor item in data0['km_driven']:\n    driven+=[item[0:-4].replace(',','')]\ndata0['km_driven']=pd.Series(driven).astype(int)\ndata0['km_driven']","2fdfdf0f":"data0['selling_price']","9e3ffcff":"selling_price=[]\nfor item in data0['selling_price']:\n    selling_price+=[float(item[0:-6])]\ndata0['selling_price']=selling_price\ndata0['selling_price']","02d9b9b1":"data0['engine']","a8c3f1b6":"engine=[]\nfor item in data0['engine']:\n    engine+=[int(str(item).replace('Engine','').replace(' CC',''))]\ndata0['engine']=engine\ndata0['engine']","445bd48e":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","6206b6b5":"data1=df\ndata1[0:2].T","66b2f432":"data1.info()","020cd467":"data1.columns","58541507":"target=['selling_price']\ndatay=data1[target]\ndatax=data1.drop([target[0]],axis=1)","9457ee13":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","e5bad294":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","295aa4e6":"df_columns = list(datax.columns)\nprint(df_columns)","26153c5d":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","93af9e73":"train_df.columns=df_columns\n#test_df.columns=df_columns","40a52631":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","b0e566d7":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","856a9f4b":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","f7162ec6":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","84909550":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","a035617e":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","352fb361":"y = trainy\nprint(y.shape)\nprint(y[0:3])","21708e03":"ydf=pd.DataFrame(y)\nydf","ed3ec7c8":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","7dbd3913":"print(target)","e9954477":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","c6ef7a4e":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","a1a48e3f":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('selling_price vs max_power',fontsize=20)\nax.set_xlabel('max_power',fontsize=12)\nax.set_ylabel('selling_price',fontsize=12)\nax.scatter(data0['max_power'],data0['selling_price'])","20d9c85d":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('selling_price vs engine',fontsize=20)\nax.set_xlabel('engine',fontsize=12)\nax.set_ylabel('selling_price',fontsize=12)\nax.scatter(data0['engine'],data0['selling_price'])","0b325194":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('selling_price vs year',fontsize=20)\nax.set_xlabel('year',fontsize=12)\nax.set_ylabel('selling_price',fontsize=12)\nax.scatter(data0['year'],data0['selling_price'])","fbcb368a":"# Target setting","9902f189":"# Visualize Importance","eaeefff9":"### For 'selling_price', 1.'max_power',2.'engine' and 3.'year' are the top 3 important factors. ","8fe08567":"# Model","c05f82df":"# Data preparation"}}