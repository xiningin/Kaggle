{"cell_type":{"2e374446":"code","991232f4":"code","effd711b":"code","06c535ab":"code","24c30a58":"code","4caf7b75":"code","90266f4d":"code","4fbbbd2b":"code","7ff70dbd":"code","a2162691":"code","73076a48":"code","7b5d9250":"code","a844064e":"code","5fcce3cf":"code","fa03c1a4":"code","6c237a11":"code","2a1752c0":"code","7e20481e":"code","2e40ed52":"code","3e10ce95":"code","a47b52a2":"code","f945b9c5":"code","bb0a805c":"code","c0017efb":"code","52775996":"code","db597732":"code","cac8ffb1":"code","ee398dc3":"code","1e04611b":"code","76bf26d0":"code","2d5852c1":"code","96ad4ccd":"code","6dab6edc":"code","31559347":"code","439ca5aa":"code","d04018a1":"code","07c52bca":"code","86fde7bb":"code","189f67fe":"code","44659b47":"code","7b7217dc":"code","5165cf1e":"code","b57f1942":"code","5d6444ca":"code","f956a630":"code","befd13cf":"code","3ecf156b":"code","79bbf39f":"code","ef2d9b9d":"code","00d8dff3":"code","8ce24179":"code","d3a8b90c":"code","d3b92dde":"code","2f0ed05d":"code","3751eccd":"code","83281040":"code","a6d59f05":"code","749a1073":"code","9d0271c1":"code","6dfefeb9":"code","ab961bf5":"code","70158e29":"code","bc1781b6":"code","77a76c9e":"code","42790615":"code","e0f018a2":"code","123dd15e":"code","33be47a0":"code","962ba15f":"code","09fcee68":"code","76fba323":"code","ad481d6a":"code","0234de8d":"code","0f54ba87":"code","5ab22126":"code","73d3e524":"code","c59327ef":"code","a817cf23":"code","69bf7ea4":"code","54b50258":"code","2530f34d":"code","3a7dcb89":"code","14caf9c7":"code","4146ab9c":"code","23444e64":"code","498ba168":"code","6f802c71":"code","96eebb37":"code","92d40dfe":"code","e0a2d241":"code","09d55d40":"code","fc1f65af":"code","d68a4888":"code","ac869742":"code","4fe6429c":"code","e21c51d9":"code","d90f917e":"code","724e42a9":"code","5de583e9":"code","b7e67999":"code","837e115b":"code","ce3bca97":"code","296388ed":"code","6a746d0f":"code","a50eb75c":"code","111a03be":"code","77fe262d":"code","e892d3ad":"code","1e1d807b":"code","839d5981":"code","b7816622":"code","d648ff6a":"code","c50cbbe6":"code","a33ce23e":"code","db19bc06":"code","636e0b23":"code","1bdb3c6e":"code","a7f8eb56":"code","15e2bbe5":"code","4ac57a18":"code","d000d6e5":"code","185dc482":"code","06043822":"code","16e52a25":"code","8a374f32":"code","d3b47678":"code","094c6070":"code","642aa351":"code","fd98bcdc":"code","6b37a919":"code","03fac328":"code","25ed7f6a":"code","c729c3df":"code","c7ee6df5":"code","ce2eebfe":"code","858b38dd":"code","7eb0f2b2":"code","f48cef99":"code","e0c43ee0":"code","252230ba":"code","4caab33c":"code","dcbcd4de":"code","09043aec":"code","b367c616":"code","8ccb97d9":"code","564b2e10":"code","8941a145":"code","d3f48f0d":"code","9681deea":"code","a59c580b":"code","cdc2b6f9":"code","87fe49df":"code","7137c67d":"code","faf12213":"code","29d4c198":"code","ef9b17b0":"code","cb6abc21":"code","09d136ce":"code","6a644748":"code","a001f121":"code","e2e688b1":"code","5a0e056e":"markdown","ece00c7e":"markdown","5daee674":"markdown","f9f25952":"markdown","c781e3fd":"markdown","ded0aa9d":"markdown","db11a904":"markdown","debe8d0d":"markdown","0ea7ee07":"markdown","54173ba4":"markdown","1240596b":"markdown","173af813":"markdown","76fcaa00":"markdown","fe00b6d8":"markdown","549054d5":"markdown","2506d126":"markdown","5a5149d0":"markdown","accaef1a":"markdown","3251f5ba":"markdown","0b154160":"markdown","d083c71b":"markdown","22020ef1":"markdown","bd864aa5":"markdown","0da3e8b6":"markdown","087df898":"markdown","391e8d14":"markdown","8447d8b3":"markdown","ddf58632":"markdown","d48407c8":"markdown","ffd5ba31":"markdown","db6dd117":"markdown","d1684900":"markdown","640301d7":"markdown","93e36994":"markdown","b6182baa":"markdown","a39aa04c":"markdown","f48becb4":"markdown"},"source":{"2e374446":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","991232f4":"protein = pd.read_csv(\"..\/input\/protein-data-set\/pdb_data_no_dups.csv\")","effd711b":"df = protein.copy()\ndf.head()","06c535ab":"df.info()","24c30a58":"df.dtypes","4caf7b75":"df.isnull().sum()","90266f4d":"df.columns","4fbbbd2b":"dfkat = df.select_dtypes(include = [\"object\"])\ndfkat","7ff70dbd":"dfkat.columns","a2162691":"dfkat[\"structureId\"].value_counts()","73076a48":"dfkat[\"classification\"].value_counts()","7b5d9250":"dfkat[\"experimentalTechnique\"].value_counts()","a844064e":"dfkat[\"macromoleculeType\"].value_counts()","5fcce3cf":"dfkat[\"crystallizationMethod\"].value_counts()","fa03c1a4":"dfkat[\"pdbxDetails\"].value_counts()","6c237a11":"dfkat.isnull().sum()","2a1752c0":"def eksik_deger_tablosu(df): \n    eksik_deger = df.isnull().sum()\n    eksik_deger_yuzde = 100 * df.isnull().sum()\/len(df)\n    eksik_deger_tablo = pd.concat([eksik_deger, eksik_deger_yuzde], axis=1)\n    eksik_deger_tablo_son = eksik_deger_tablo.rename(\n    columns = {0 : 'Eksik De\u011ferler', 1 : '% De\u011feri'})\n    return eksik_deger_tablo_son","7e20481e":"eksik_deger_tablosu(dfkat)","2e40ed52":"dfkat.isin([\"?\", \"-\", \",\", \"*\", \"\/\"]).sum()","3e10ce95":"dfnum = df.select_dtypes(include = [\"int64\", \"float64\"])\ndfnum","a47b52a2":"dfnum[\"phValue\"].isnull().sum()","f945b9c5":"dfnum.columns","bb0a805c":"dfnum.describe().T","c0017efb":"dfnum.count()","52775996":"dfnum.isnull().sum()","db597732":"dfnum.isin([\"?\", \"-\", \",\", \"*\", \"\/\"]).sum()","cac8ffb1":"eksik_deger_tablosu(dfnum)","ee398dc3":"df[\"publicationYear\"] = df['publicationYear'].astype('datetime64[ns]')","1e04611b":"df.info()","76bf26d0":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport missingno as msno","2d5852c1":"df1 = pd.read_csv(\"..\/input\/protein-data-set\/pdb_data_no_dups.csv\")","96ad4ccd":"df2 =  df1[(df1['classification'] == \"HYDROLASE\") | (df1['classification'] == \"TRANSFERASE\")\n           | (df1['classification'] == \"OXIDOREDUCTASE\") | (df1['classification'] == \"LYASE\") \n           | (df1['classification'] == \"IMMUNE SYSTEM\") | (df1['classification'] == \"TRANSCRIPTION\") | (df1['classification'] == \"TRANSPORT PROTEIN\")]","6dab6edc":"df2[\"classification\"].value_counts().plot.barh()\n\n# Bagimli degisken olarak gordugumuz Classification degiskeni ile gorsellestirmeye basliyoruz","31559347":"sns.barplot( x = \"classification\", y = df2.classification.index, data = df2 )","439ca5aa":"df2.groupby([\"classification\"])[\"structureMolecularWeight\",].std()\n\n# Bu group by isleminin amaci ise bir sonraki grafikte gorecegimiz barplot grafigindeki ince sapmalari belirten cubuklarin daha net anlasilmasi icindir.","d04018a1":"plt.figure(figsize=(12,8))\nax = sns.barplot( x = \"classification\", y = \"structureMolecularWeight\", data = df2 )\n\n# Classification degiskenine ait siniflarin Molekul agirligina gore sirlamasini gorebiliyoruz\n# Yani en fazla molekul agirlina sahip olan sinif OXIDOREDUCTASE olarak gozukmekte\n# Bu dagilimda en fazla standart sapmaya sahip sinif ise TRANSPORT PROTEIN olarak gozlenmekte ","07c52bca":"df2.groupby([\"classification\",\"macromoleculeType\"])[\"structureMolecularWeight\"].mean()","86fde7bb":"plt.figure(figsize=(15,9))\nax = sns.barplot( x = \"classification\", y = \"structureMolecularWeight\",hue=\"macromoleculeType\", data = df2 )\n\n# Bir onceki grafikten farkli olarak bu grafikte ele olay ikinci bir kirilimi eklemis olmak\n# Protein siniflari X eksinin de iken Y eksenin de proteinlerin molekuler agirliklari var\n# Ve ayni zaman da bu siniflarin kendi icerisinde dagilimlari var ve  bu proteinlerin molekul tiplerine gore gozlenmekte\n# Simdi Yukari daki GROUP BY islemine baktimiz da aslinda bu dagilimlarin saglamasi da gozukmekte ","189f67fe":"(sns\n .FacetGrid(df2,\n            hue= \"classification\",\n           height= 7.5,\n           xlim= (0, 300000))\n .map(sns.kdeplot, \"structureMolecularWeight\",shade = True)\n .add_legend())\n\n# Proteinlerin ait olduklari siniflara da molekul tipine gore frekanslarini gorebiliyoruz\n# Molekul agirliginin siniflara gore frekanslarinin daha farkli oldugunu anlayabiliyoruz\n# Ornegin sinif TRANSCRIPTION olan proteinlerin molekul agirliklari 0-5000 arasinda iken frekans yogunlugu tavan yapmis durumda\n# Daha sonra 5000-10000 molekul agirliginda ise IMMUNE SYSTEM sinifina ait proteinler frekans sikligi olarak en fazla olan duruyor\n# Bir yerden sonra molekul agirli artan bir trende burundugunde artik tum siniflarin her molekul agirliginda neredeyse ayni frekans\n## yogunluguna sahip oldugunu gorebiliyoruz. ","44659b47":"sns.pairplot(df2,kind=\"reg\")\n\n# Bu gorsel ile suna deginmis olduk Scatter Plot bilindigi uzere sacilim ve bize korelasyon hakkinda bilgi vermekte.\n# Ayni zamanda degiskenlerin birbiri ile olan iliskisini de gostermek acisindan bir regresyon egrisi ciziyoruz. \n# Ortaya cikan grafikte cok fazla detay oldugu icin bu grafiksel sonuclarin birde istatistiksel kismini yani korelasyon kismini ele alip yorum yapalim.","7b7217dc":"df2.corr()\n\n# Olayin istatistiksel kismina gecildiginde iki sonuc goze carpmakta 0.349965 ve 0.990821\n# Iste bu iki sonuc residueCount - resolution arasinda pozitife yakin bir iliski oldugunu gostermekte.\n# Kalintilar ile cozulme arasinda artan bir iliski gorulmekte ama fazla denemez\n\n# Daha sonra structureMolecularWeight - residueCount arasinda yuksek pozitif yonlu bir iiski oldugu gozlenmekte\n# Yani molekul agirligi artarken cozulme degeri de artmakta.  ","5165cf1e":"plt.figure(figsize=(12,6))\nax = sns.scatterplot(x = \"structureMolecularWeight\", y = \"residueCount\" ,hue=\"classification\",data=df2)\n\n# Bu 0,99 iliskiye bakarken bir de fazladan bilgi almak adina HUE ile Classification yani siniflari da ekliyoruz.\n# Molekul siniflarina gore molekul agirli ve kalinti(tortular) arasindaki iliskinin neye gore arttigi hakkinda biraz daha bilgi sahibi olmus olduk.","b57f1942":"plt.figure(figsize=(12,6))\nax = sns.scatterplot(x = \"resolution\", y = \"residueCount\" ,hue=\"classification\",data=df2)\n\n# Ikinci yuksek sayilabilecek 0,34 iliski incelendigin de ise bunlarin hangi siniflar bazli oldugu ve yayilimda yine hangilerinin etkili oldugunu anlayabiliriz.\n# Genel olarak bir yere kadar iki degisken arasindaki iliski birlikte artarken ardindan bu trend durmus.\n# Bunun arkasindaki detaylar ise biraz da is bilgisine dayanmaktadir. \n","5d6444ca":"df.isnull().sum()","f956a630":"msno.bar(df) \n#Grafikteki barlar\u0131n y\u00fcksekli\u011fi total veriye oranla orada olan say\u0131y\u0131 veriyor. \u00d6rne\u011fin structerId de bo\u015f de\u011fer yok diyebiliriz.","befd13cf":"msno.heatmap(df) ","3ecf156b":"baz = df1[df1[\"phValue\"]  > 7 ][\"phValue\"]","79bbf39f":"notr = df1[df1[\"phValue\"]  == 7 ][\"phValue\"]","ef2d9b9d":"asit = df1[df1[\"phValue\"]  < 7 ][\"phValue\"]","00d8dff3":"sozluk = {\"Asit\": asit,\n          \"Notr\": notr,\n          \"Baz\": baz\n         }","8ce24179":"phtablo = pd.DataFrame(sozluk)","d3a8b90c":"phtablo[\"Notr\"].value_counts()","d3b92dde":"phtablo.count()","2f0ed05d":"phtablo.count().plot.barh()","3751eccd":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns","83281040":"data = pd.read_csv(\"..\/input\/protein-data-set\/pdb_data_no_dups.csv\")\ndata.head(2)","a6d59f05":"y = data[[\"classification\"]]\ny","749a1073":"x = data.drop(\"classification\", axis = 1)\nx.head(2)","9d0271c1":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","6dfefeb9":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","ab961bf5":"columns = x_train.select_dtypes([\"int64\", \"float64\"])\ncolumns","70158e29":"del columns[\"phValue\"]\ndel columns[\"publicationYear\"]\ncolumns","bc1781b6":"columns.columns","77a76c9e":"lower_and_upper = {}\nx_train_copy = x_train.copy()\nfor col in columns.columns:\n    q1 = x_train[col].describe()[4]\n    q3 = x_train[col].describe()[6]\n    iqr = q3 - q1\n    lowerbound = q1 - (1.5*iqr)\n    upperbound = q3 + (1.5*iqr)\n    lower_and_upper[col] = (lowerbound, upperbound)\n    x_train_copy.loc[(x_train_copy.loc[:,col] < lowerbound), col] = lowerbound * 0.75\n    x_train_copy.loc[(x_train_copy.loc[:,col] > upperbound), col] = upperbound * 1.25","42790615":"lower_and_upper","e0f018a2":"x_test_copy = x_test.copy()\nfor col in columns.columns:\n    x_test_copy.loc[(x_test_copy.loc[:,col] < lower_and_upper[col][0]), col] = lower_and_upper[col][0] * 0.75\n    x_test_copy.loc[(x_test_copy.loc[:,col] > lower_and_upper[col][1]), col] = lower_and_upper[col][1] * 1.25","123dd15e":"sns.boxplot(x_test_copy.residueCount)","33be47a0":"sns.boxplot(x_train_copy.residueCount)","962ba15f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\npd.options.mode.chained_assignment = None","09fcee68":"df = pd.read_csv(\"..\/input\/protein-data-set\/pdb_data_no_dups.csv\")","76fba323":"df.info()","ad481d6a":"df.describe().T","0234de8d":"dfnum = df.select_dtypes(include = [\"int64\", \"float64\"])\n#dfnum = dfnum.dropna()","0f54ba87":"y = dfnum.densityMatthews\nX = dfnum.drop('densityMatthews',axis=1)","5ab22126":"y","73d3e524":"X","c59327ef":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 123)","a817cf23":"sns.boxplot(x = \"crystallizationTempK\",data = X_train)\n","69bf7ea4":"sns.boxplot(x =\"structureMolecularWeight\",data = X_train)","54b50258":"sns.boxplot(x =\"residueCount\",data = X_train)","2530f34d":"Q1 = X_train.quantile(0.25)\nQ3 = X_train.quantile(0.75)\nIQR = Q3 - Q1 ","3a7dcb89":"Q1","14caf9c7":"Q3","4146ab9c":"IQR","23444e64":"alt_sinir = Q1 - 1.5 * IQR\nust_sinir = Q3 + 1.5 * IQR\n","498ba168":"alt_sinir","6f802c71":"ust_sinir","96eebb37":"residueCount = X_train[\"residueCount\"]","92d40dfe":"(residueCount < alt_sinir.residueCount) | (residueCount > ust_sinir.residueCount)","e0a2d241":"RCount_upper = (residueCount > ust_sinir.residueCount)","09d55d40":"RCount_lower = (residueCount < alt_sinir.residueCount)","fc1f65af":"# Ust siniri dolduruyoruz\n\nX_train[\"residueCount\"][RCount_upper] = ust_sinir.residueCount\nX_train[\"residueCount\"][RCount_upper]\n\n# Yeni \"residueCount\" degiskenimiz de ust sinirdaki tum degerleri doldurduk ","d68a4888":"# Ayni sekilde ust siniri da baskilama yontemi ile dolduruyoruz\n\nX_train[\"residueCount\"][RCount_lower] = alt_sinir.residueCount\nX_train[\"residueCount\"][RCount_lower]\n\n# Alt sinirin altinda deger olmadigi icin bos bir seri goruyoruz ","ac869742":"sns.boxplot(x =\"residueCount\",data = X_train)","4fe6429c":"# Bir diger degiskene geciyoruz \"crystallizationTempK\"\n\ncrystallizationKelvin = X_train[\"crystallizationTempK\"]","e21c51d9":"(crystallizationKelvin < alt_sinir.crystallizationTempK) | (crystallizationKelvin > ust_sinir.crystallizationTempK)","d90f917e":"upper = (crystallizationKelvin > ust_sinir.crystallizationTempK)\nlower = (crystallizationKelvin < alt_sinir.crystallizationTempK)","724e42a9":"X_train[\"crystallizationTempK\"][upper] = ust_sinir.crystallizationTempK\nX_train[\"crystallizationTempK\"][upper]","5de583e9":"X_train[\"crystallizationTempK\"][lower] = alt_sinir.crystallizationTempK\nX_train[\"crystallizationTempK\"][lower]","b7e67999":"sns.boxplot(x = \"crystallizationTempK\",data = X_train)","837e115b":"MolekularWeight = X_train[\"structureMolecularWeight\"]\nMolekularWeight","ce3bca97":"(MolekularWeight < alt_sinir.structureMolecularWeight) | (MolekularWeight > ust_sinir.structureMolecularWeight)","296388ed":"upper = (MolekularWeight > ust_sinir.structureMolecularWeight)\nlower = (MolekularWeight < alt_sinir.structureMolecularWeight)","6a746d0f":"X_train[\"structureMolecularWeight\"][upper] = ust_sinir.structureMolecularWeight\nX_train[\"structureMolecularWeight\"][upper]","a50eb75c":"X_train[\"structureMolecularWeight\"][upper] = alt_sinir.structureMolecularWeight\nX_train[\"structureMolecularWeight\"][upper]","111a03be":"sns.boxplot(x = \"structureMolecularWeight\",data = X_train)","77fe262d":"alt_sinir","e892d3ad":"ust_sinir","1e1d807b":"# Test kismindaki degsikenler icinde TRAIN de gecerli olan ALT ve UST sinir degerlerini kullanarak 3 adet degiskenin OUTLIER degerlerini dolduralim\n\nX_test","839d5981":"sns.boxplot(x = \"crystallizationTempK\",data = X_test)","b7816622":"sns.boxplot(x = \"structureMolecularWeight\",data = X_test)","d648ff6a":"sns.boxplot(x = \"residueCount\",data = X_test)","c50cbbe6":"crystallizationKelvin = X_test[\"crystallizationTempK\"]","a33ce23e":"(crystallizationKelvin < alt_sinir.crystallizationTempK) | (crystallizationKelvin > ust_sinir.crystallizationTempK)","db19bc06":"upper = (crystallizationKelvin > ust_sinir.crystallizationTempK)\nlower = (crystallizationKelvin < alt_sinir.crystallizationTempK)","636e0b23":"X_test[\"crystallizationTempK\"][upper] = ust_sinir.crystallizationTempK\nX_test[\"crystallizationTempK\"][upper]","1bdb3c6e":"X_test[\"crystallizationTempK\"][lower] = alt_sinir.crystallizationTempK\nX_test[\"crystallizationTempK\"][lower]","a7f8eb56":"sns.boxplot(x = \"crystallizationTempK\",data = X_test)\n","15e2bbe5":"MolekulAgirligi = X_test[\"structureMolecularWeight\"]","4ac57a18":"(MolekulAgirligi < alt_sinir.structureMolecularWeight) | (MolekulAgirligi > ust_sinir.structureMolecularWeight)","d000d6e5":"upper = (MolekulAgirligi > ust_sinir.structureMolecularWeight)\nlower = (MolekulAgirligi < alt_sinir.structureMolecularWeight)","185dc482":"X_test[\"structureMolecularWeight\"][upper] = ust_sinir.structureMolecularWeight\nX_test[\"structureMolecularWeight\"][upper]","06043822":"X_test[\"structureMolecularWeight\"][upper] = alt_sinir.structureMolecularWeight\nX_test[\"structureMolecularWeight\"][upper]","16e52a25":"sns.boxplot(x = \"structureMolecularWeight\",data = X_test)","8a374f32":"residueCount = X_test[\"residueCount\"]","d3b47678":"(residueCount < alt_sinir.residueCount) | (residueCount > ust_sinir.residueCount)","094c6070":"upper = (residueCount > ust_sinir.residueCount)\nlower = (residueCount < alt_sinir.residueCount)","642aa351":"X_test[\"residueCount\"][upper] = ust_sinir.residueCount\nX_test[\"residueCount\"][upper]","fd98bcdc":"X_test[\"residueCount\"][lower] = alt_sinir.residueCount\nX_test[\"residueCount\"][lower]","6b37a919":"sns.boxplot(x = \"residueCount\",data = X_test)","03fac328":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\npd.options.mode.chained_assignment = None","25ed7f6a":"data = pd.read_csv(\"..\/input\/protein-data-set\/pdb_data_no_dups.csv\")\ndata.head(2)","c729c3df":"df = data.select_dtypes([\"int64\", \"float64\"])","c7ee6df5":"df.drop(columns=['publicationYear', 'phValue'], inplace = True)","ce2eebfe":"df.isnull().sum()","858b38dd":"(df.isnull().sum(axis = 1) > 3).sum()","7eb0f2b2":"df.loc[df.isnull().sum(axis = 1) > 3]","f48cef99":"df = df.loc[df.isnull().sum(axis = 1) <= 3]","e0c43ee0":"df","252230ba":"df.isnull().sum()","4caab33c":"df[\"resolution\"].isnull().sum()","dcbcd4de":"df[\"resolution\"].describe()","09043aec":"df['resolution'].fillna(df.resolution.mean(), inplace = True)","b367c616":"df[\"resolution\"].isnull().sum()","8ccb97d9":"df[\"resolution\"].describe()","564b2e10":"df[\"crystallizationTempK\"].isnull().sum()","8941a145":"df[\"crystallizationTempK\"].describe()","d3f48f0d":"df['crystallizationTempK'].fillna(df.crystallizationTempK.mean(), inplace = True)","9681deea":"df[\"crystallizationTempK\"].isnull().sum()","a59c580b":"df[\"crystallizationTempK\"].describe()","cdc2b6f9":"df[\"densityMatthews\"].isnull().sum()","87fe49df":"df[\"densityMatthews\"].describe()","7137c67d":"df['densityMatthews'].fillna(df.densityMatthews.mean(), inplace = True)","faf12213":"df[\"densityMatthews\"].isnull().sum()","29d4c198":"df[\"densityMatthews\"].describe()","ef9b17b0":"df[\"densityPercentSol\"].isnull().sum()","cb6abc21":"df[\"densityPercentSol\"].describe()","09d136ce":"df['densityPercentSol'].fillna(df.densityPercentSol.mean(), inplace = True)","6a644748":"df[\"densityPercentSol\"].isnull().sum()","a001f121":"df[\"densityPercentSol\"].describe()","e2e688b1":"df.isnull().sum()","5a0e056e":"* **Train deki birkac degiskeni gorsellestirelim boxplot ile**","ece00c7e":"* **Simdi sirada en sik kullanilan yontemlerden biri olan Quantiller a gore alt ve ust sinir belirleyecegiz**","5daee674":"## 2) Verinin G\u00f6rselle\u015ftirilmesi (Data visualization)","f9f25952":"* **structureId:** Yapisal ID.\n* **classification:** Belirtilen kumeler, siniflar .\n* **experimentalTechnique:** Arastirmada kullanilan teknikler, yontemler.\n* **macromolecule Type:** Makromolek\u00fcl Tipi. \n* **residueCount:** Tortu Sayisi.\n* **resolution:** Bir bile\u015fi\u011fin, kendisini olu\u015fturan unsurlara ayr\u0131lmas\u0131; erime; \u00e7\u00f6z\u00fcnme; ayr\u0131\u015fma.\n* **structureMolecularWeight:** Yapinin molekul agirligidir.\n* **crystallizationMethod:** Kristallestirme icin kullanilan metod. \n* **crystallizationTempK:** Kristallestirme sicakligi Kelvin cinsinden.\n* **densityMatthews:** Kristale ait yogunluk.\n* **densityPercentSol:** Yogunluk yuzdesi.\n* **pdbxDetails:** pH degerine ait detaylar.\n* **phValue:** pH degeri \n* **publicationYear:** Verinin yayinlanma yili.","c781e3fd":"* **T\u00fcm Eksikler giderilmi\u015f oldu**","ded0aa9d":"* **3 Adet degisken gorsellestirmistik oncesinde sirasiyla hepsinin outlier degerlerini temizleyip tekrardan ortaya cikan gorsellere bakalim.**","db11a904":"* Say\u0131sal de\u011fi\u015fkenleri se\u00e7tik. phValue ve publicationYear kolonlar\u0131n\u0131 kald\u0131rd\u0131k.","debe8d0d":"* **Outlier temizlenecegi zaman kategorik degiskenler disarida birakilarak numeric degiskenler uzerinden gidip ona gore Upper ve Lower degerler belirlenir.**","0ea7ee07":"## 4) Eksik Veri Doldurma","54173ba4":"### densityMatthews","1240596b":"## 1) Verinin Ke\u015ffi (EDA)","173af813":"# Protein Veri Seti","76fcaa00":"### 1.1) Kategorik De\u011fi\u015fkenler","fe00b6d8":"* **Bu nokta da bagimli degisken olarak bildiklerimiz kadariyla ele alacagimiz degisken DensityMatthews yani yogunluk olacaktir. Protenin molekul yogunlugu. Bu su demek degildir kesin olarak bagimli degisken DensityMatthews'dir diyemeyiz malum veri setinin is bilgisine pek hakim degiliz. Biz bildiklerimiz kadariyla bir baglanti kurup bunun uzerinden bir cikarim yapiyoruz.**","549054d5":"* Yayinlanma yili, int olarak gelmi\u015fti. datetime olarak de\u011fi\u015ftirdik.","2506d126":"### 2.2) phValue G\u00f6rselle\u015ftirmesi","5a5149d0":"* **Iki adet sonucumuz vardi 0,99 ve 0,34 sirasiyla bunlari grafik uzerinde de inceleyelim** ","accaef1a":"* **Veri seti Proteinlerin yap\u0131sal dizinleri ile alakalidir.**\n\n* **Veriler Protein Data Bank alinmistir.**\n\n* **Yapisal biyologlar atomlarin molekuldeki yerlerini belirlemek icin \"X-ray crystallography, NMR spectroscopy, and cryo-electron microscopy\" bu uc yontemi kullanmistir ki bu yontemler bizim  degiskenlerimizin icerisinde barinmaktadir.**","3251f5ba":"* **Ilk degisken bitti simdi sirayla diger Test setindeki 2 degiskene de Traindaki alt ve ust sinirlari uygulayarak devam ediyoruz.**","0b154160":"* Bir sat\u0131rda, 6 kolonda 3ten fazla bos deger var ise o sat\u0131r\u0131 sildik. O verileri doldursakda bizim veri setimize uygun \u015fekilde dolduramay\u0131z diye d\u00fc\u015f\u00fcnd\u00fcm","d083c71b":"### 1.2) S\u00fcrekli De\u011fi\u015fkenler","22020ef1":"# -------------------------------------","bd864aa5":"* **Bir group by islemi yaparak barplot yapmadan once siniflarin molekul tipine gore agirliklarinin ortalamasini gorelim**\n* **Boylece gorseldeki dagilimin da matematiksel kismini net bir sekilde gormus olacagiz**","0da3e8b6":"## 3) Ayk\u0131r\u0131 De\u011fer Temizleme(Outlier Cleaning)","087df898":"### resolution","391e8d14":"*  **Son olarak da diger degiskene geciyoruz MolekulAgirligi**","8447d8b3":"**resolution**, **phValue**, **densityMatthews** \u00fc\u00e7\u00fcnden biri target de\u011fi\u015fken olarak kullan\u0131labilir.","ddf58632":"* **Belirledigimiz alt ve ust sinirlara gore outlier degerlerini bulup onlari farkli metodlar ile isleyecegiz.**","d48407c8":"### 2.1) Missing Value G\u00f6rselle\u015ftirme","ffd5ba31":"### densityPercentSol","db6dd117":"* **Ayni Alt ve Ust sinirlari Y_train kisminda da birkac degisken icin kullaniyoruz**","d1684900":"* **Toplu sekilde aykiri deger doldurma ve degisken degisken aykiri deger doldurma yontemleri vardir. Biz bu adimda degiskenleri tek tek ele alip aykiri degerleri dolduracagiz.**","640301d7":"### 3.1) Bask\u0131lama Y\u00f6ntemi","93e36994":"* **Gorsellestirme yapilacagi zaman degiskenlerin siniflarinin 10'dan az olmamasi onemlidir.Cunku bu durumun aksi gorsellestirmeyi zorlastirmakta ve gerekli bilgiyi elde ederken engel teskil etmektedir. Ayni zamanda kirilmalari gostermek adina dusuk siniflarin olmasi da onemlidir.**\n\n* **Bu sebepten oturu Classification degiskenin en cok sikliga sahip 7 sinifini alarak devam ediyoruz.**","b6182baa":"* **Bu kisimda Train icin veri setinin %80 degerini Test icin ise %20 degerini parcaladik.**","a39aa04c":"* **Alt ust sinirlari belirledik simdi baskilama yontemi(alt sinir altini alt sinira esitle, ust sinirin ustunu de ust sinira esitle) ile bu aykiri degerleri dolduralim.** ","f48becb4":"### crystallizationTempK"}}