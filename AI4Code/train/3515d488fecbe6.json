{"cell_type":{"3591d2ae":"code","9f150d2c":"code","d3887a0c":"code","38006b94":"code","0f0e5ad8":"code","4f986e5b":"code","6d8897a0":"code","fca80f62":"code","8fc1cbdf":"code","f757abd7":"code","716002ff":"code","6a6d7f8c":"code","27e523be":"code","c5e448ea":"code","ae00281c":"code","31123dda":"code","98440f24":"code","f6856987":"code","ddb96c0b":"code","84304c18":"code","2c3c44a1":"code","fb3bc9f3":"code","3891e786":"code","4c2f4945":"code","e42dbb2b":"code","9e737da8":"markdown","cc213689":"markdown"},"source":{"3591d2ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f150d2c":"from sklearn.datasets import fetch_openml\nfrom sklearn import metrics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d3887a0c":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","38006b94":"train.head()","0f0e5ad8":"test.head()","4f986e5b":"y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ny_train.value_counts()","6d8897a0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nmodel = RandomForestClassifier()","fca80f62":"# number of trees used\nprint('Number of Trees used : ', model.n_estimators)","8fc1cbdf":"\nmodel.fit(X_train,y_train)\n","f757abd7":"predict= model.predict(X_train)\npredict","716002ff":"cm= metrics.confusion_matrix(y_train,model.predict(X_train))\ncm","6a6d7f8c":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","27e523be":"from sklearn.metrics import accuracy_score\ntrainaccuracy= accuracy_score(y_train,model.predict(X_train))\ntrainaccuracy\nprint(\"Train Data Accuracy    :{} %\".format(round((trainaccuracy*100),2)))","c5e448ea":"from sklearn.model_selection import GridSearchCV","ae00281c":"classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1)","31123dda":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [1, 2, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'max_features': [2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","98440f24":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=classifier_rf, param_grid=params, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","f6856987":"%%time\ngrid_search.fit(X_train,y_train)","ddb96c0b":"rf_best = grid_search.best_estimator_","84304c18":"rf_best","2c3c44a1":"cm= metrics.confusion_matrix(y_train,rf_best.predict(X_train))\ncm","fb3bc9f3":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","3891e786":"trainaccuracy= accuracy_score(y_train,rf_best.predict(X_train))\ntrainaccuracy\nprint(\"Train Data Accuracy    :{} %\".format(round((trainaccuracy*100),2)))","4c2f4945":"# predict result\nresult = model.predict(test)\n\n\nresult = pd.Series(result,name=\"Label\")","e42dbb2b":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\n\n","9e737da8":"Looks overfitted ","cc213689":"Hyper-parameter tuning"}}