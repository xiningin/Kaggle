{"cell_type":{"9330cb33":"code","65a09335":"code","386192e8":"code","409f14b6":"code","1a822fd1":"code","e0a1ed20":"code","e1125ab7":"code","ed87ffeb":"code","343a0309":"code","2f9e5e9f":"code","c2c8aa1f":"code","259d64a6":"code","8ae9afdd":"code","bdd20939":"code","edbd267d":"code","5266d330":"code","456f2591":"code","f50efd4d":"code","dc6658f0":"code","28999dbd":"code","596894ab":"code","2d5bb46a":"code","9554ab4c":"code","b5a53e3f":"code","f1797e74":"code","35c65da4":"code","9a0aa667":"code","bc239ac5":"code","d26d8c92":"code","8cca9592":"markdown","315188fe":"markdown","3fdfe2c7":"markdown","e9f7509d":"markdown","7279e0e0":"markdown","68f3d430":"markdown","2523d208":"markdown","ace2b427":"markdown","86a64712":"markdown","1bc65311":"markdown","b16beb5d":"markdown"},"source":{"9330cb33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65a09335":"df_review = pd.read_csv('\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ndf_review","386192e8":"df_review.describe()","409f14b6":"df_review.info()","1a822fd1":"df_positive = df_review[df_review['sentiment']=='positive'][:9000]\ndf_negative = df_review[df_review['sentiment']=='negative'][:1000]\ndf_review_imb = pd.concat([df_positive, df_negative])","e0a1ed20":"df_review_imb.info()","e1125ab7":"import matplotlib.pyplot as plt\ndf_review_imb['sentiment'].value_counts().plot(kind='bar')","ed87ffeb":"df_review['sentiment'].value_counts().plot(kind='bar')","343a0309":"from imblearn.under_sampling import  RandomUnderSampler\n\nrus = RandomUnderSampler(random_state=0)\ndf_review_bal, df_review_bal['sentiment']=rus.fit_resample(df_review_imb[['review']],\n                                                           df_review_imb['sentiment'])\ndf_review_bal\n","2f9e5e9f":"df_review_bal['sentiment'].value_counts().plot(kind='bar')","c2c8aa1f":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(df_review_bal, test_size=0.33, random_state=42)","259d64a6":"train_x, train_y = train['review'], train['sentiment']\ntest_x, test_y = test['review'], test['sentiment']\n","8ae9afdd":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(stop_words='english')\ntrain_x_vector = tfidf.fit_transform(train_x)\ntrain_x_vector","bdd20939":"pd.DataFrame.sparse.from_spmatrix(train_x_vector,\n                                  index=train_x.index,\n                                  columns=tfidf.get_feature_names())","edbd267d":"test_x_vector = tfidf.transform(test_x)\ntest_x_vector\n","5266d330":"from sklearn.svm import SVC\nsvc = SVC(kernel=\"linear\")\nsvc.fit(train_x_vector, train_y)","456f2591":"from sklearn.tree import DecisionTreeClassifier\ndec_tree = DecisionTreeClassifier()\ndec_tree.fit(train_x_vector, train_y)","f50efd4d":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(train_x_vector.toarray(), train_y)","dc6658f0":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression()\nlog_reg.fit(train_x_vector, train_y)","28999dbd":"print(svc.predict(tfidf.transform(['A good movie'])))\nprint(svc.predict(tfidf.transform(['An excellent movie'])))\nprint(svc.predict(tfidf.transform(['I did not like this movie at all'])))\n","596894ab":"print(dec_tree.predict(tfidf.transform(['A good movie'])))\nprint(dec_tree.predict(tfidf.transform(['An excellent movie'])))\nprint(dec_tree.predict(tfidf.transform(['I did not like this movie at all'])))","2d5bb46a":"svc.score(test_x_vector, test_y)","9554ab4c":"dec_tree.score(test_x_vector, test_y)","b5a53e3f":"log_reg.score(test_x_vector, test_y)\n","f1797e74":"from sklearn.metrics import classification_report\nprint(classification_report(test_y, \n                            svc.predict(test_x_vector),\n                            labels=['positive', 'negative']))","35c65da4":"from sklearn.metrics import confusion_matrix\nconf_mat = confusion_matrix(test_y, \n                            svc.predict(test_x_vector), \n                            labels=['positive', 'negative'])","9a0aa667":"conf_mat","bc239ac5":"from sklearn.model_selection import GridSearchCV\n#set the parameters\nparameters = {\"C\": [1,4,8,16,32] ,\"kernel\":[\"linear\", \"rbf\"]}\nsvc = SVC()\nsvc_grid = GridSearchCV(svc,parameters, cv=5)\n\nsvc_grid.fit(train_x_vector, train_y)","d26d8c92":"print(svc_grid.best_params_)\nprint(svc_grid.best_estimator_)","8cca9592":"# **Prediction**","315188fe":"* **Decision Tree**","3fdfe2c7":"# **Model Evaluation**\n**Mean Accuracy**","e9f7509d":"# **MODEL SELECTION**","7279e0e0":"# **Classification report**","68f3d430":"* **Logistic Regression**","2523d208":"# **Tuning the Model**","ace2b427":"* **Support Vector Machines (SVM)**","86a64712":"# **Confusion Matrix**","1bc65311":"* **Decision Tree**","b16beb5d":"* **Support Vector Machines (SVM)**"}}