{"cell_type":{"50564d73":"code","992f373f":"code","8a10c2b3":"code","fe0428c5":"code","ecac8aab":"code","d8be9c02":"code","74986994":"code","a84fea8d":"code","98bebd25":"code","f5ae12f8":"code","31bf7d83":"code","95854180":"code","f5367cce":"code","b8c092fb":"code","dccfd5ed":"code","79b1fb79":"code","93fdcfcc":"code","550832c6":"code","380ffab1":"code","7a30da0d":"code","583bfde8":"code","0401bcd7":"code","7bc8afc7":"code","44bedf40":"markdown","4b64ebd2":"markdown","cdcd2e6f":"markdown","be45916f":"markdown","c53560ab":"markdown","b04c12f5":"markdown","aada2f27":"markdown","aa51caf5":"markdown","ecbdd5a7":"markdown","785bb5b5":"markdown","a37b4efa":"markdown","9afe8e59":"markdown","cc234f82":"markdown","9de18aee":"markdown","286c3838":"markdown","e41a27c4":"markdown"},"source":{"50564d73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","992f373f":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8a10c2b3":"train.head()","fe0428c5":"train.info()","ecac8aab":"train.isnull().sum()","d8be9c02":"def tit(x):\n    tl = x.split(',')[-1].split('.')[0]\n    return tl\n\ntrain['Title'] = train['Name'].apply(tit)\ntest['Title'] = test['Name'].apply(tit)\n\n","74986994":"train['Title'].value_counts()","a84fea8d":"def renam(x):\n    ren = x.split(',')[0]\n    return ren\n\ntrain['Name'] = train['Name'].apply(renam)\ntest['Name'] = test['Name'].apply(renam)","98bebd25":"train['Name']","f5ae12f8":"train[\"Age\"] = (train[\"Age\"] - train[\"Age\"].mean()) \/ train[\"Age\"].std()\ntrain[\"Age\"] = train[\"Age\"].fillna(-999)\n\ntest[\"Age\"] = (test[\"Age\"] - test[\"Age\"].mean()) \/ test[\"Age\"].std()\ntest[\"Age\"] = test[\"Age\"].fillna(-999)","31bf7d83":"train[\"Fare\"] = (train[\"Fare\"] - train[\"Fare\"].min()) \/ (train[\"Fare\"].max() - train[\"Fare\"].min())\ntrain['Fare'] = train['Fare'].fillna(-999)\n\ntest[\"Fare\"] = (test[\"Fare\"] - test[\"Fare\"].min()) \/ (test[\"Fare\"].max() - test[\"Fare\"].min())\ntest['Fare'] = test['Fare'].fillna(-999)","95854180":"train[\"Cabin\"] = train[\"Cabin\"].factorize()[0]\ntest[\"Cabin\"] = test[\"Cabin\"].factorize()[0]\n\ntrain[\"Sex\"] = train[\"Sex\"].factorize()[0]\ntest[\"Sex\"] = test[\"Sex\"].factorize()[0]\n\ntrain['Name'] = train['Name'].factorize()[0]\ntest['Name'] = test['Name'].factorize()[0]\n\ntrain[\"Embarked\"] = train[\"Embarked\"].factorize()[0]\ntest[\"Embarked\"] = test[\"Embarked\"].factorize()[0]\n\ntrain['Title'] = train['Title'].factorize()[0]\ntest['Title'] = test['Title'].factorize()[0]","f5367cce":"train = train.drop(columns = 'Ticket')\ntest = test.drop(columns = 'Ticket')","b8c092fb":"train.isnull().sum()","dccfd5ed":"import sklearn\nfrom sklearn.ensemble import RandomForestClassifier","79b1fb79":"X = train.drop(['Survived'],axis=1)\ny = train['Survived']","93fdcfcc":"model = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\n\nmodel.fit(X,y)","550832c6":"pred = model.predict(test)","380ffab1":"pred","7a30da0d":"model.score(X,y)","583bfde8":"final = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':pred})","0401bcd7":"final","7bc8afc7":"final.to_csv('sub3.csv',index=False)","44bedf40":"### Splitting X & y","4b64ebd2":"### Normalizing Fare and Filling Null values","cdcd2e6f":"# Modelling\n#### We will be using Randome Forest Model for ML","be45916f":"### Importing Libraries","c53560ab":"## Checking Null-values","b04c12f5":"### Dropping Columns","aada2f27":"### Again checking if still there's some null values","aa51caf5":"## Getting information about our Data","ecbdd5a7":"## Load Data","785bb5b5":"## Pre-processing","a37b4efa":"### Checking Model accuracy","9afe8e59":"### Getting Title","cc234f82":"### Mapping Other Categories into integers","9de18aee":"### Standardizing Age and Filling Null values","286c3838":"# Introduction\n\n* The Notebook is created for famous Titanic Survival Prediction.\n* This Notebook gives you one of the easiest methods to solve Titanic Machine Learning Problem.","e41a27c4":"## Getting Names"}}