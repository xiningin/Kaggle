{"cell_type":{"aeb998b0":"code","9fa041d7":"code","74462a43":"code","ad7857de":"code","a81f21ca":"code","c1e33f3a":"code","769118f6":"code","6d667d1a":"code","d1c33ed7":"code","8d79bf2c":"code","7a47904e":"markdown","c0bf4d8b":"markdown","a52a9a12":"markdown","de1d937e":"markdown","95b77c97":"markdown"},"source":{"aeb998b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fa041d7":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ndf","74462a43":"\n\npd.get_dummies(df) # Notice that we can eliminate one column of each since this information is contained in the others\n\npd.get_dummies(df, drop_first=True)","ad7857de":"df.sort_values(\"App\")\n\ndf.groupby(\"Category\")[\"App\"].last().to_frame()","a81f21ca":"df.sample(frac = 0.5, random_state = 2)","c1e33f3a":"df.sample(frac = 0.5, random_state = 2).reset_index(drop = True) ","769118f6":"app = \"Rating\"\n\n# allows us to iterate fast over columns\ndf[f'{app}'].to_frame()","6d667d1a":"# first let's use applymap to convert to standarize the text\ndf = df.applymap(lambda x: x.lower() if type(x) == str else x)\n\nmapping = {\"App\":0, \"Category\":1}\n\nprint(\"PROBLEM: Applies to the whole df but retruns None\")\ndf.applymap(mapping.get)\n\n","d1c33ed7":"print(\"Get the correct result but you have to specify the colums. If you don't want to do this, check the next result\")\ndf[[\"App\", \"Category\"]].applymap(mapping.get)\n\n","8d79bf2c":"print(\"Condtional apply map: if can map --> map else return the same value\")\ndf = df.applymap(lambda x: mapping[x] if x in mapping.keys() else x)\ndf","7a47904e":"# **5. MAPPING FUNCTIONS**","c0bf4d8b":"# **4. SELECTING A COLUMN USING F-STRING**","a52a9a12":"# **3. SHUFFLING OF ROWS**","de1d937e":"# **2. AGGREGATION FUNCTION**","95b77c97":"# **1. ONE HOT ENCODING**"}}