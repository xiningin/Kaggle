{"cell_type":{"3145eade":"code","5f4ba41c":"code","1a204bdb":"code","aa0a70b0":"code","8da9d364":"code","2cd101b3":"code","7e367c3a":"code","6e5de3bb":"code","397220f8":"code","90281c8a":"code","38c35061":"code","f197aaa6":"code","9adb8b66":"code","f73f9ad5":"code","daadb2f6":"code","6a6d2786":"code","ce4d9116":"code","5e417d34":"code","cebbbf8d":"markdown","6e735a55":"markdown","90178641":"markdown","3f4f4194":"markdown","9454deee":"markdown","1441ad0c":"markdown","529b37b3":"markdown"},"source":{"3145eade":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns \n\nfrom datetime import datetime\n\n# display video of bar chart for all data\nfrom IPython.display import Video\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f4ba41c":"import warnings\nwarnings.filterwarnings(\"ignore\")","1a204bdb":"! pip install bar_chart_race","aa0a70b0":"# ! pip install ffmpeg","8da9d364":"# ! conda install -c conda-forge ffmpeg ","2cd101b3":"# import bar chart race package that will need to visualization.\nimport bar_chart_race as bcr","7e367c3a":"# read dataset by pandas and diaplay 5 frist 5 rows.\ncovid_df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\", index_col=\"SNo\")\ncovid_df.head()","6e5de3bb":"# from this line below sure that some of countries not have data in same interval\ncovid_df.ObservationDate.value_counts()","397220f8":"# group data by country and date then sum cases at same date for all countries.\n# then create new data to store change.\ndata = covid_df.groupby(by=[\"Country\/Region\", \"ObservationDate\"]).agg({'Confirmed' : ['sum'],\n                                                                       'Deaths':['sum'],\n                                                                       'Recovered': ['sum']})\n# need the index columns, so reset index for data .\ndata =data.reset_index()\n# convert ObservationDate to datetime type.\ndata.ObservationDate = pd.to_datetime(data.ObservationDate)\n# sort data based on ObservationDate columns (date).\ndata = data.sort_values(\"ObservationDate\")\n# rename columns of data.\ndata.columns = [\"Country\/Region\", \"ObservationDate\", \"Confirmed\", \"Deaths\", \"Recovered\"]","90281c8a":"# Slicing data to get confirmed columns in all days for Egypt Country.\ndata.loc[data[\"Country\/Region\"]==\"Egypt\",[\"ObservationDate\", \"Confirmed\"]]","38c35061":"# create new DataFrame to display ObservationDate as index and Countries as Columns.\ndf_covid = pd.DataFrame(data.ObservationDate.unique())\n\n# rename df_covid data column\ndf_covid.columns = [\"ObservationDate\"]\n\n# iterate on all countries to splite every country data and merge it as a column with df_covid data.\nfor country in [*data[\"Country\/Region\"].unique()]:\n#  get data for country and split only two columns data and cases.\n    test_data = data.loc[data[\"Country\/Region\"]==country,[\"ObservationDate\", \"Confirmed\"]]\n# rename columns for temporiery data.\n    test_data.columns = [\"ObservationDate\", country]\n# left merge on temporiery data with df_covid data based on ObservationDate columns in two datasets.\n    df_covid = df_covid.merge(test_data, how='left', left_on='ObservationDate', right_on=\"ObservationDate\")\n\n# replace nan values by zero.\ndf_covid = df_covid.fillna(0)\n\n# set date column as index.\ndf_covid.set_index(\"ObservationDate\", inplace=True)\n\n# convert index column type to datetime column.\ndf_covid.index = pd.to_datetime(df_covid.index)\n\n# there is Others column in data that not need it, so i will drop it. \ndf_covid.drop(\"Others\",axis=1, inplace=True)\n\n# display last 5 rows from data.\ndf_covid.tail()","f197aaa6":"# this function calulate cumulative sum for all cases in the world for every day.\ndef summary(values, ranks):\n    total_deaths = int(round(values.sum(), -2))\n    s = f'Total Cases - {total_deaths:,.0f}'\n    return {'x': .99, 'y': .05, 's': s, 'ha': 'right',\n            'size': 10,'color':'#733f6e'}","9adb8b66":"# funcion use to create bar chart race need two parameters pandas data and file name.\ndef create_sub_bar_chart_race(data,file_name):\n# start to create bar chart race.\n    plt.style.use(\"seaborn\")\n    fig, ax = plt.subplots(figsize=(10,7), dpi=120)\n    ax.set_facecolor(\"#f2f0f0\")\n    ax.set_title('COVID-19 Cases Race by Country', \n                 fontdict={'family': 'Helvetica', 'size': '20', 'color': '#148585'})\n    \n    _ = bcr.bar_chart_race(df=data,\n            filename=file_name,\n            n_bars=10, fig=fig,\n            orientation='h',\n            fixed_order=False,\n            bar_size=.85,\n            shared_fontdict={'family': 'Helvetica', 'weight': 'normal', 'color': '#213030'},\n            period_label={'x': .97, 'y': .15, 'ha': 'right', 'va': 'center',\n                          'color':\"#b01296\", \"size\":14, \"weight\":\"semibold\"},\n            period_fmt='%b %d, %Y',\n            figsize=(10,7),\n            dpi=120,\n            period_summary_func=summary,\n#             cmap='Paired',\n            bar_label_size=8,\n            tick_label_size=5,\n            steps_per_period=20,\n            period_length=400,\n            interpolate_period=True,\n            filter_column_colors=True,\n            bar_kwargs={'alpha': .8, \"lw\":0})\n    plt.close()","f73f9ad5":"# create a gif for bar chart race for sub of data.\ncreate_sub_bar_chart_race(df_covid.iloc[50:80],\"\/kaggle\/working\/COVID_Sub.gif\")","daadb2f6":"# print Start Time of Processing ffmpeg video.\ncurrent_time = datetime.now().strftime(\"%H:%M:%S\")\nprint(\"Start Time of Processing =\", current_time)","6a6d2786":"# create a mp4 video for bar chart race for all of data.\ncreate_sub_bar_chart_race(df_covid,\"\/kaggle\/working\/COVID_Full.mp4\")","ce4d9116":"# print end time of processing\ncurrent_time = datetime.now().strftime(\"%H:%M:%S\")\nprint(\"End Time of Processing =\", current_time)","5e417d34":"# display the output video covid-19 of bar chart race.\nVideo(\".\/COVID_Full.mp4\",width=600)","cebbbf8d":"### \ud83d\udc89 COVID-19 Cases \ud83e\udda0 Visualization using Bar Chart Race","6e735a55":"## Visualiztion","90178641":"## EDA","3f4f4194":"### This notebook divided into 2 main parts:\n\n> EDA\n\n> Visualiztion","9454deee":"### Install bar_chart_race and ffmpeg that need in Visualization","1441ad0c":"### COVID-19 sub bar_chart_race animator gif display:\n![](.\/COVID_Sub.gif \"COVID.gif\")","529b37b3":"### Final result of this notebook: \nVideo that diaplay the most 10 countries have cases in the world over interval 01-2020 to 05-2021.\n\n![](https:\/\/github.com\/MhmdSyd\/Bar_Chart_Race_Gif\/blob\/main\/COVID_Sub.gif?raw=true)"}}