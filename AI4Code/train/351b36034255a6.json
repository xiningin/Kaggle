{"cell_type":{"948cf535":"code","96278317":"code","0829d99c":"code","270c5968":"code","de7eb531":"code","f3991f56":"code","86a2ea71":"code","430b3d24":"code","bf44739f":"code","6b2f3362":"code","134b5229":"code","462b56ac":"code","31dfaf25":"code","2f50f919":"code","9115dd2f":"code","e3239704":"code","ab565942":"code","ebe0144c":"code","51cdb4c3":"code","3d939afb":"code","8dfc69b8":"code","de2cd26f":"code","acf0795c":"code","621dbd82":"code","cdfd7ad1":"code","903adc59":"code","833e842b":"code","3de1393a":"code","17d9b0e2":"code","38108eeb":"markdown","80380367":"markdown","51dd6cdc":"markdown","8223579e":"markdown","f75b8c06":"markdown","7936fbdf":"markdown","2a1a176b":"markdown","906f171e":"markdown","a466aded":"markdown","9adf44a6":"markdown","427de38e":"markdown","93690a0f":"markdown","97c2dd01":"markdown","bdfc3b94":"markdown"},"source":{"948cf535":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96278317":"import tensorflow as tf\nfrom keras.callbacks import ReduceLROnPlateau\nfrom imblearn.over_sampling import RandomOverSampler \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix , classification_report\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns","0829d99c":"FilePath = \"..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv\"\ndataSet = pd.read_csv(FilePath)","270c5968":"Label = dataSet[\"label\"]\nData = dataSet.drop(columns=[\"label\"]) ","de7eb531":"plt.figure(figsize = (10,10))\nsns.set_style(\"darkgrid\")\nsns.countplot(Label)","f3991f56":"oversample = RandomOverSampler()\nData,Label  = oversample.fit_resample(Data,Label)\nData = np.array(Data).reshape(-1,28,28,3)\nprint('Shape of Data :',Data.shape)","86a2ea71":"plt.figure(figsize = (10,10))\nsns.set_style(\"darkgrid\")\nsns.countplot(Label)","430b3d24":"Label = np.array(Label)\nLabel","bf44739f":"classes = {4: ('nv', ' melanocytic nevi'),\n           6: ('mel', 'melanoma'),\n           2 :('bkl', 'benign keratosis-like lesions'), \n           1:('bcc' , ' basal cell carcinoma'),\n           5: ('vasc', ' pyogenic granulomas and hemorrhage'),\n           0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),\n           3: ('df', 'dermatofibroma')}","6b2f3362":"X_train , X_test , y_train , y_test = train_test_split(Data , Label , test_size = 0.25 , random_state = 49)","134b5229":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","462b56ac":"f , ax = plt.subplots(2,5)\nf.set_size_inches(10, 10)\nk = 0 \nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(X_train[k].reshape(28,28,3))\n        k = k + 1\n    plt.tight_layout()","31dfaf25":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","2f50f919":"print(y_train)","9115dd2f":"datagen = ImageDataGenerator(rescale=(1.\/255)\n                             ,rotation_range=10\n                             ,zoom_range = 0.1\n                             ,width_shift_range=0.1\n                             ,height_shift_range=0.1)\ntestgen = ImageDataGenerator(rescale=(1.\/255))","e3239704":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy'\n                                            , patience = 2\n                                            , verbose=1\n                                            ,factor=0.5\n                                            , min_lr=0.00001)","ab565942":"def My_Model():\n  input_ = keras.layers.Input(shape = [28,28,3])\n  x = keras.layers.Conv2D(32 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(input_)\n  x = keras.layers.MaxPooling2D()(x)\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(64 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(64 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(128 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(128 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(256 , (3,3) , activation='relu' ,padding='same', kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(256 , (3,3) , activation='relu' ,padding='same', kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n  flatten  = keras.layers.Flatten()(x)\n  classifier = keras.layers.Dropout(rate = 0.2)(flatten)\n  classifier = keras.layers.Dense(units = 256 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier)\n  classifier = keras.layers.Dense(units = 128 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier)\n  classifier = keras.layers.Dense(units = 64 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier) \n  classifier = keras.layers.Dense(units = 32 , activation = 'relu' , kernel_initializer = 'he_normal' , kernel_regularizer=keras.regularizers.L1L2())(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier) \n  classifier = keras.layers.Dense(units = 7 , activation='softmax' ,kernel_initializer=\"glorot_uniform\" , name = 'classifier')(classifier)\n\n  return keras.models.Model(inputs = input_  ,outputs =  classifier  )\n  ","ebe0144c":"model = My_Model()","51cdb4c3":"model.summary()","3d939afb":"keras.utils.plot_model(model)","8dfc69b8":"model.compile(optimizer='adam' , loss = keras.losses.CategoricalCrossentropy() ,metrics = ['accuracy'])","de2cd26f":"history = model.fit(X_train ,\n                    y_train ,\n                    epochs=25 ,\n                    batch_size=128,\n                    validation_data=(X_test , y_test) ,\n                    callbacks=[learning_rate_reduction])","acf0795c":"model.evaluate(X_test , y_test)","621dbd82":"plt.plot(history.history[\"accuracy\"] , 'ro-' , label = \"Training Accuracy\")\nplt.plot(history.history[\"val_accuracy\"] , 'go-' , label = \"Testing Accuracy\")\nplt.legend()\nplt.show()\n","cdfd7ad1":"plt.plot(history.history[\"loss\"] , 'ro-' , label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"] , 'go-' , label = \"Testing Loss\")\nplt.legend()\nplt.show()","903adc59":"y_pred  = model.predict(X_test).round()","833e842b":"target_names = [f\"{classes[i]}\" for i in range(7)]\nprint(classification_report(y_test , y_pred , target_names =target_names ))","3de1393a":"cm = confusion_matrix(y_test.argmax(axis = 1) , y_pred.argmax(axis = 1))\ncm = pd.DataFrame(cm , index = [i for i in range(7)] , columns = [i for i in range(7)])\nplt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')","17d9b0e2":"correct = np.nonzero(y_pred == y_test)[0]\n\nk = 0 \nfor c in correct[:10]:\n            plt.subplot(2,5,k+1)\n            plt.imshow(X_test[k].reshape(28,28,3) , interpolation='none')\n            plt.title(f\"pred : {y_pred[k].argmax(axis = 0)},Actual :{y_test[k].argmax(axis = 0)} \")\n            plt.tight_layout()\n            k += 1","38108eeb":"**Learing Rate Decay**","80380367":"# Analysis after Training","51dd6cdc":"**SPLIT DATA INTO TRAIN AND TEST DATA**","8223579e":"**Count labels using countlabel() method**","f75b8c06":"# **Build Our Model**","7936fbdf":"**Plot Test Images**","2a1a176b":"# **Loading the Dataset**","906f171e":"**Plot images**","a466aded":"**plot model to see connected layers**","9adf44a6":"**Training step**","427de38e":"***","93690a0f":"**use Data Augmentation to avoid Overfitting , using by ImageDataGenerator method**","97c2dd01":"**As you see the data is imbalanced , so let's make it balanced**","bdfc3b94":"**Convert lables into One-hot encoding**"}}