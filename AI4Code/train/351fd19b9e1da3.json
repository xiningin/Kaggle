{"cell_type":{"90307e66":"code","be508612":"code","0a5485c6":"code","d0b0ebc4":"code","58d169f6":"code","378424fa":"code","a68b9fe8":"code","3b731d40":"code","b2947af1":"code","e31552b8":"code","ad1d0980":"code","827c28ac":"code","2f55bfcf":"code","d51a0547":"code","a5614069":"code","ed98f639":"markdown","177daacd":"markdown","0ac0c662":"markdown","667c2fde":"markdown"},"source":{"90307e66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be508612":"data=pd.read_csv('\/kaggle\/input\/top50spotify2019\/top50.csv',encoding='ISO-8859-1')\ndata.head()","0a5485c6":"s_songs = data.drop('Unnamed: 0',1)\ns_songs.head()","d0b0ebc4":"x= s_songs.sort_values(by='Popularity',ascending=False)\ntop_10_data = x.head(10)\ntop_10_data","58d169f6":"top_10_data.Genre","378424fa":"top_10_data['Artist.Name']","a68b9fe8":"import seaborn as sns\nsns.set(rc={'figure.figsize':(10,10)})\ngrid  = sns.pairplot(top_10_data, x_vars=['Genre','Artist.Name'], y_vars=(['Popularity']),height=5)\nfor ax in grid.axes.flat[:2]: ## for rotating x labels\n    ax.tick_params(axis='x', labelrotation=90)\n#plt.xticks(rotation='vertical')","3b731d40":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12,8))\nsns.countplot(x='Artist.Name',data=s_songs,color='c')\nplt.xlabel('Artist.Name in given data',fontsize=12)\nplt.ylabel('count of song sung',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title('Artist.Name and no.of song count',fontsize=12)\nplt.show()","b2947af1":"plt.figure(figsize=(12,8))\nsns.countplot(x='Genre',data=s_songs,color='c')\nplt.xlabel('Genre in given data',fontsize=12)\nplt.ylabel('count of song under gener',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title('Genre and no.of song count',fontsize=12)\nplt.show()","e31552b8":"Genre_counts = top_10_data[\"Genre\"].value_counts()\nGenre_counts_index = Genre_counts.index\nGenre_counts, Genre_counts_index = zip(*sorted(zip(Genre_counts, Genre_counts_index)))","ad1d0980":"%matplotlib inline\nimport plotly\nimport plotly.graph_objects as go\nplotly.offline.init_notebook_mode(connected=True)\nfig = go.Figure(\n    go.Treemap(\n        labels = [\"Number of Tracks by Genre of the Spotify Top 10 Music List\"] + list(Genre_counts_index),\n        parents = [\"\"] + [\"Number of Tracks by Genre of the Spotify Top 10 Music List\"] * len(Genre_counts_index),\n        values = [0] + list(Genre_counts),\n        textposition='middle center', # center the text\n        textinfo = \"label+percent parent\", # show label and its percentage among the whole treemap\n        textfont=dict(\n            size=15 # adjust small text to larger text\n        )\n    )\n)\nfig.show()\n","827c28ac":"data[data.Popularity > 90].groupby(by=['Genre','Artist.Name']).agg('count')['Track.Name'].sort_values(ascending=False)[:10]","2f55bfcf":"#plot data\nfig, ax = plt.subplots(figsize=(15,7))\ndata[data.Popularity > 90].groupby(by=['Genre','Artist.Name']).agg('count')['Track.Name'].sort_values(ascending=False)[:10].plot(ax=ax)","d51a0547":"# plot data\nfig, ax = plt.subplots(figsize=(15,7))\n# use unstack()\ndata[data.Popularity > 90].groupby(by=['Genre','Artist.Name']).agg('count')['Track.Name'].sort_values(ascending=False)[:10].unstack().plot(ax=ax)","a5614069":"sns.set(rc={'figure.figsize':(8,5)})\nsns.heatmap(pd.crosstab(top_10_data.Genre, top_10_data['Artist.Name']))","ed98f639":"***visualization showing the correlation between the top 10 artists and the genres.***","177daacd":"** **Treemap for visualizing proportion**s**","0ac0c662":"**which top artists actually belong to the top genres** **and**\n              **Relationship between the top 10 artists and the top 10 genres.***","667c2fde":"**TOP 10 Artist and Genre pair Plot**"}}