{"cell_type":{"18cd9f66":"code","8fbbdd88":"code","be820ebf":"code","b16fa4f5":"code","e2fec22a":"code","b75b3bc4":"code","c1b5d0f8":"code","567bfff3":"code","eef2e409":"code","85df1096":"code","9493071b":"code","ed8471f1":"code","1a390b98":"code","be90631b":"code","eaa627bd":"code","a6fac8fb":"code","1426bf15":"code","902f3ab3":"code","b56d0a32":"code","f3d4573e":"code","7a8d7a14":"code","bf641449":"code","22e74f9a":"code","78b4811c":"code","ec73a163":"code","dc8adda1":"code","7f3c17ad":"code","1e9d86e0":"code","ebd3f0fb":"code","01ef3c37":"code","0e19f4fe":"code","4a561343":"code","c0c73d13":"code","0b597e26":"code","709199a7":"markdown","326f7a87":"markdown","1653f0b4":"markdown","4a069066":"markdown","5f69cd1a":"markdown","1f1d1322":"markdown","a08836c0":"markdown","441688d8":"markdown","a0d72557":"markdown","045c3e74":"markdown","c4e103dc":"markdown","979f2b7d":"markdown","881af98d":"markdown","44214772":"markdown","228ad7dc":"markdown","37b78bdf":"markdown","d7cd8b0f":"markdown","b1e975eb":"markdown","ea0477b3":"markdown","79a707f6":"markdown","7fb3ce18":"markdown","bde960c4":"markdown","ecbec700":"markdown","1b2207e1":"markdown","fcdf38a0":"markdown","a6f2de80":"markdown","c5526b6c":"markdown","f680b38d":"markdown","ecdf08e9":"markdown","fd103b26":"markdown","de571f8b":"markdown","99684bb9":"markdown"},"source":{"18cd9f66":"#download data\n!wget https:\/\/github.com\/cstorm125\/viztech\/raw\/master\/data\/taladrod.csv\n!wget https:\/\/github.com\/cstorm125\/viztech\/raw\/master\/utils.py\n!ls","8fbbdd88":"import pandas as pd\nimport numpy as np\nimport scipy.stats as st\n\n#ggplot equivalent: plotnine\nfrom plotnine import *\n\n#scales package equivalent: mizani\nfrom mizani.breaks import *\nfrom mizani.formatters import *\n\n#widgets\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\n#utility\nimport utils\ndef clean_comma(x): return float(str(x).replace(',',''))\n\n#suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","be820ebf":"'''\nSnippet for plotnine with thai font by @korakot\nhttps:\/\/gist.github.com\/korakot\/01d181229b21411b0a20784e0ca20d3d\n'''\nimport matplotlib\n!wget https:\/\/github.com\/Phonbopit\/sarabun-webfont\/raw\/master\/fonts\/thsarabunnew-webfont.ttf -q\n!cp thsarabunnew-webfont.ttf \/usr\/share\/fonts\/truetype\/\nmatplotlib.font_manager._rebuild()\nmatplotlib.rc('font', family='TH Sarabun New')\ntheme_set(theme_minimal(11, 'TH Sarabun New'));","b16fa4f5":"df = pd.read_csv('taladrod.csv')\ndf['sales_price'] = df.sales_price.map(clean_comma)\ndf['market_price'] = df.market_price.map(clean_comma)\ndf.head()","e2fec22a":"missing = utils.check_missing(df)\nmissing['over90'] = missing.per_missing.map(lambda x: True if x>0.9 else False)\nmissing.head()","b75b3bc4":"g = (ggplot(missing,aes(x='rnk',y='per_missing',fill='over90')) + #base plot\n     geom_col() + #type of plot \n     geom_text(aes(x='rnk',y='per_missing+0.1',label='round(100*per_missing,2)')) +#annotate\n     scale_y_continuous(labels=percent_format()) + #y-axis tick\n     theme_minimal() + coord_flip()#theme and flipping plot\n    )\ng","c1b5d0f8":"#drop columns with too many missing values\ndf.drop(missing[missing.over90==True].col_name,1,inplace=True)\ndf.head()","567bfff3":"cat_vars = ['brand','series','gen','color','gear','contact_location']\ncat_df = df[cat_vars].copy()\ncat_df.head()","eef2e409":"#otherify popular values; you can (should?) also have a mapping dict\nfor col in cat_vars: cat_df = utils.otherify(cat_df,col,th=0.03)","85df1096":"interact(utils.value_dist, df =fixed(cat_df),\n         col = widgets.Dropdown(options=list(cat_df.columns),value='brand'))","9493071b":"def cat_plot(df,col):\n    return utils.cat_plot(df,col) \n#input dataframe and column\n#output histogram plot of value distribution\n\ninteract(cat_plot, df=fixed(cat_df),\n         col = widgets.Dropdown(options=list(cat_df.columns),value='brand'))","ed8471f1":"#excluding others\ndef cat_plot_noothers(df,col):\n    x = df.copy()\n    x = x[x[col]!='others']\n    return utils.cat_plot(x,col) + utils.thai_text(8)\n\ninteract(cat_plot_noothers, df=fixed(cat_df),\n         col = widgets.Dropdown(options=list(cat_df.columns),value='gen'))","1a390b98":"#relationship between dependent variable and categorical variable\ncat_df['sales_price'] = utils.boxcox(df['sales_price'])\ncat_df.head()","be90631b":"#relationship between sales price and color\ncat_df.groupby('color').sales_price.describe()","eaa627bd":"def numcat_plot(df,num,cat, no_outliers=True, geom=geom_boxplot()):\n    return utils.numcat_plot(df,num,cat, no_outliers, geom) \n#plot the summary above","a6fac8fb":"interact(numcat_plot, \n         df=fixed(cat_df),\n         num=fixed('sales_price'),\n         no_outliers = widgets.Checkbox(value=True),\n         geom=fixed(geom_boxplot()), #geom_violin, geom_jitter\n         cat= widgets.Dropdown(options=list(cat_df.columns)[:-1],value='brand'))","1426bf15":"def numdist_plot(df, num,cat, geom=geom_density(alpha=0.5), no_outliers=True):\n    return utils.numdist_plot(df, num, cat, geom, no_outliers)\n\n#either\n#density: geom_density(alpha=0.5)\n#histogram: geom_histogram(binwidth=0.5, position='identity',alpha=0.5) \n#position: identity or dodge\nnumdist_plot(cat_df,'sales_price','gear')","902f3ab3":"numdist_plot(cat_df,'sales_price','gear',\n             geom=geom_histogram(binwidth=0.5, position='dodge',alpha=0.5))","b56d0a32":"def catcat_plot(df, dep_cat, ind_cat):\n    return utils.catcat_plot(df,dep_cat,ind_cat)","f3d4573e":"interact(catcat_plot, \n         df=fixed(cat_df),\n         dep_cat=widgets.Dropdown(options=list(cat_df.columns)[:-1],value='gear'),\n         ind_cat= widgets.Dropdown(options=list(cat_df.columns)[:-1],value='color'))","7a8d7a14":"#getting fancy; not necessarily the best idea\nnew_df = utils.remove_outliers(cat_df,'sales_price')\ng = (ggplot(new_df, aes(x='gen',y='sales_price')) +\n     geom_boxplot() + theme_minimal() +\n     facet_grid('contact_location~color') +\n     theme(axis_text_x = element_text(angle = 90, hjust = 1))\n    ) + utils.thai_text()\ng","bf641449":"import datetime\nnow = datetime.datetime.now()\ndf['nb_year'] = now.year - df['year']\nnum_vars = ['nb_year','sales_price','market_price','subscribers']\nnum_df = df[num_vars].dropna() #this is why you need to deal with missing values BEFORE exploration\nnum_df.describe()","22e74f9a":"import seaborn as sns\nsns.pairplot(num_df) #non-normal data is a problem!","78b4811c":"interact(utils.qq_plot, df=fixed(num_df),\n         col=widgets.Dropdown(options=list(num_df.columns),value='market_price'))","ec73a163":"def boxcox(ser,lamb=0):\n    pass\n#input a column from pandas dataframe\n#output transformed column","dc8adda1":"#see transformation results\ndef what_lamb(df,col,lamb):\n    sample_df = df.copy()\n    former_g = utils.qq_plot(sample_df,col)\n    sample_df[col] = utils.boxcox(sample_df[col],lamb)\n    print(utils.qq_plot(sample_df,col),former_g)\n    \ninteract(what_lamb, df=fixed(num_df),\n         col=widgets.Dropdown(options=list(num_df.columns),value='sales_price'),\n         lamb=widgets.FloatSlider(min=-3,max=3,step=0.5,value=0)\n         )","7f3c17ad":"lamb_df = utils.boxcox_lamb_df(num_df.subscribers)\ninteract(utils.boxcox_plot, df=fixed(num_df),\n         col=widgets.Dropdown(options=list(num_df.columns),value='sales_price'),\n         ls=fixed([i\/10 for i in range(-30,31,5)])\n         )","1e9d86e0":"#transform sales and market prices\nfor col in ['sales_price','market_price']:\n    num_df['new_'+col] = utils.boxcox(num_df[col], utils.boxcox_lamb(num_df[col]))","ebd3f0fb":"sns.pairplot(num_df[['nb_year','new_sales_price','new_market_price','subscribers']]) #a little better!","01ef3c37":"num_m = num_df.melt()\nnum_m.head()","0e19f4fe":"def value_dist_plot(df,bins=30):\n    return utils.value_dist_plot(df,bins)\n#input dataframe with only numerical variables\n#output distribution plot for each variable\nvalue_dist_plot(num_df)","4a561343":"interact(utils.jointplot, df=fixed(num_df),\n         col_x= widgets.Dropdown(options=list(num_df.columns),value='sales_price'),\n         col_y=widgets.Dropdown(options=list(num_df.columns),value='market_price'),\n         kind=widgets.Dropdown(options=['scatter','resid','reg','hex','kde','point'],value='hex'))","c0c73d13":"#correlation plot if you must; but it's just ONE number for the relationship\nnum_df.corr(method='pearson').style.background_gradient(cmap='coolwarm') ","0b597e26":"def pearson_corr(x,y):\n    sub_x = x - x.mean()\n    sub_y = y - y.mean()\n    return (sub_x * sub_y).sum() \/ np.sqrt((sub_x**2).sum() * (sub_y**2).sum())\n\n#spearman and kendall: pearson with rank variables\npearson_corr(df.nb_year,df.sales_price)","709199a7":"## Warming Up: Missing Values","326f7a87":"**Exercise** We can cross-tabulate categorical variables to see their relationship by using `facet_wrap`; for instance, if our dependent variable is `gear` and indpendent variable of interest is `color`.","1653f0b4":"Sometimes we want to see the numerical distribution filled with categories. This is especially useful plotting the results of a binary classification.","4a069066":"**Exercise** Implement `cat_plot` function that plots value distribution for each categorical variable.","5f69cd1a":"# Data Visualization for Exploration","1f1d1322":"However, the famous Anscombe plots show us that it is always better to look at distribution rather than a summary number.\n\n![Anscombe's Quartet](https:\/\/cdn-images-1.medium.com\/max\/800\/1*wPNVidT3st1CTqtdFME0iw.png)\n\nSource: [A Comprehensive Guide to the Grammar of Graphics for Effective Visualization of Multi-dimensional Data](https:\/\/towardsdatascience.com\/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149)","a08836c0":"## Numerical Variables","441688d8":"We want to know primarily two things about our categorical variables:\n1. How each variable is distributed\n2. How each variable relate to the dependent variable\n    * 2.1 when dependent variable is numerical\n    * 2.2 when dependent variable is categorical","a0d72557":"### Numerical and Categorical Variables","045c3e74":"You can see that post transformation, we can see the (lack of) relationships between variables clearer.","c4e103dc":"### Categorical and Categorical Variables","979f2b7d":"**Exercise** Implement `numcat_plot` function that plots the relationship between a dependent numerical variable and an independent categorical as displayed above. Useful geoms are `geom_boxplot`, `geom_violin` and `geom_jitter`. Optionally remove outliers before plotting.","881af98d":"### Multiple Ways of Relationships","44214772":"### Value Distribution","228ad7dc":"**Exercise** Create a function that plots distribution of a numerical variable, filled by another categorical variable.","37b78bdf":"This notebook details data visualization for exploring a dataset. The goal is to understand more about the data as a human, not to make beautiful graphs, communicate, or feature engineering input into models. Kaggle kernel needs Internet.\n\nGithub repository: https:\/\/github.com\/cstorm125\/viztech","d7cd8b0f":"We use grammar of graphics implementation `ggplot` (ported to Python as `plotnine`) to explore the `taladrod` dataset. Grammar of graphics is an especially useful tool since we do not know exactly what kind of plots we want to see and want to be able to add them up as we go.\n\n![Grammar of Graphics](https:\/\/cdn-images-1.medium.com\/max\/1200\/1*mcLnnVdHNg-ikDbHJfHDNA.png)\nSource: [A Comprehensive Guide to the Grammar of Graphics for Effective Visualization of Multi-dimensional Data](https:\/\/towardsdatascience.com\/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149)","b1e975eb":"Even without plotting them out, we can see the value distribution in each variable using `ipywidgets`.","ea0477b3":"Likewise in case there are too many pairs of relationships, you might plot the relationships pair-by-pair with `ipywidget` and `seaborn`'s `jointplot` function.","79a707f6":"## Categorical Variables","7fb3ce18":"For our example, we have only four numerical variables; but imagine when you have ten or more. You may want to plot their distributions separately from relationships.","bde960c4":"This can also be automated by plotting a slope for each arbitary $\\lambda$; for instance from -3 to 3.","ecbec700":"To simplify the data cleaning step, we \"otherify\" values that appear less than 3% of the time in all categorical columns.","1b2207e1":"**Exercise** Implement `boxcox` transformation according to the equation above.","fcdf38a0":"**Exercise** Implement `value_dist_plot` to plot value distribution of all variables.","a6f2de80":"In a lot of cases, a variable with normally distributed values have more variations and easier for us to see their relationships with other variables. We will try to transform our skewed variables to more \"normal\" ones to see if that helps.\n\n**Q-Q plot** compares two probability distributions by plotting their quantiles against each other. We can use this to determine the normality of a variable by plotting the sample quantiles (from the data we have) against its theoretical quantiles (where the quantiles would be if the variable is normally distributed).","c5526b6c":"One way of choosing the hyperparameter $\\lambda$ is to look at the Q-Q plot and choose transformation which makes the slope closest to 1.","f680b38d":"`seaborn` has an excellent `pairplot` implementation which not only shows the distribution of values but also their relathionships. It seems like we can get what we want easily; however, as we can see `sales_price` and `market_price` are a little skewed, making it more difficult to see their relationships with other more spread out variables.","ecdf08e9":"We want to know two things about numerical variables:\n1. Their distributions\n2. Their relationships with one another; possibly this involves transforming variables to make them less skewed aka more difficult to see variations","fd103b26":"You can use `facet_grid` to display multiple ways of relationships; but keep in mind that this is probably what your model is doing anyways so it might not be most human-readable plot to explore.","de571f8b":"As you might have noticed, we have not used any statistical concept to describe the relationship, and that is by design. We can also see correlation table with a simple `pandas` function:","99684bb9":"**Box-Cox transformation** is a statistical technique used to make data look like more normally distributed.\n\n\\begin{align}\ng_\\lambda(y) = \\left\\{\n\\begin{array}{lr}\\displaystyle\\frac{y^\\lambda - 1}{\\lambda} &  \\lambda \\neq 0\\\\\n        & \\\\\n       \\log(y) &  \\lambda = 0\n     \\end{array}\n   \\right.\n\\end{align}"}}