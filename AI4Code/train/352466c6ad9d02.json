{"cell_type":{"3595b89e":"code","4b926613":"code","d531aabd":"code","5ad4ec3d":"code","7306f590":"code","1a8eec19":"code","6adf88e8":"code","e994e7f3":"code","d38fc3cf":"code","3b1a2b50":"markdown"},"source":{"3595b89e":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\nfrom plotly import tools\n\ncolor = sns.color_palette()\n%matplotlib inline\npy.init_notebook_mode(connected=True)\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999","4b926613":"train_df = pd.read_csv('..\/input\/train.csv')\nstructure_df = pd.read_csv('..\/input\/structures.csv')","d531aabd":"def show_molecule(mdata, mstruct):\n    mdata = mdata.merge(right=mstruct, how='left',\n                        left_on=['molecule_name', 'atom_index_0'],\n                        right_on=['molecule_name', 'atom_index'])\n    mdata.rename(index=str, columns={\"x\": \"x0\", \"y\": \"y0\", \"z\": \"z0\", \"atom\": \"atom0\"}, inplace=True)\n    mdata.drop(['atom_index'], axis=1, inplace=True)\n\n    mdata = mdata.merge(right=mstruct, how='left',\n                  left_on=['molecule_name', 'atom_index_1'],\n                  right_on=['molecule_name', 'atom_index']\n                 )\n    mdata.rename(index=str, columns={\"x\": \"x1\", \"y\": \"y1\", \"z\": \"z1\", \"atom\": \"atom1\"}, inplace=True)\n    mdata.drop(['atom_index'], axis=1, inplace=True)    \n    \n    data = []\n  \n    atoms = mstruct['atom'].unique()\n    types = mdata['type'].unique()\n    \n    atom_cfg = {\n        'H': {\"name\": \"Hydrogen\", \"color\": \"#757575\", \"size\": 4},\n        'C': {\"name\": \"Carbon\", \"color\": \"#f44336\", \"size\": 12},\n        'O': {\"name\": \"Oxygen\", \"color\": \"#03a9f4\", \"size\": 12},\n        'N': {\"name\": \"Nitrogen\", \"color\": \"#ff9800\", \"size\": 12},\n        'F': {\"name\": \"Fluorine\", \"color\": \"#673ab7\", \"size\": 12},\n    }\n    \n    type_cfg = {\n        '2JHH': {\"color\": \"#757575\", \"width\": 2},\n        '3JHH': {\"color\": \"#757575\", \"width\": 3},\n\n        '1JHC': {\"color\": \"#f44336\", \"width\": 1},\n        '2JHC': {\"color\": \"#f44336\", \"width\": 2},\n        '3JHC': {\"color\": \"#f44336\", \"width\": 3},\n\n        '1JHN': {\"color\": \"#ff9800\", \"width\": 2},\n        '2JHN': {\"color\": \"#ff9800\", \"width\": 2},\n        '3JHN': {\"color\": \"#ff9800\", \"width\": 3},\n    }\n\n    for atom, config in atom_cfg.items(): \n        if atom in atoms:\n            data.append(\n                go.Scatter3d(\n                    x=mstruct[mstruct['atom'] == atom]['x'].values,\n                    y=mstruct[mstruct['atom'] == atom]['y'].values,\n                    z=mstruct[mstruct['atom'] == atom]['z'].values,\n                    mode='markers',\n                    marker=dict(\n                        color=config['color'],\n                        size=config['size'],\n                        opacity=0.8\n                    ),\n                    name=config['name']\n                )\n            )\n\n    for ctype, config in type_cfg.items():\n        if ctype in types:\n            eX = []; eY = []; eZ = []\n            for row in mdata[mdata['type'] == ctype].iterrows():\n                rd = row[1]\n                eX += [rd['x0'], rd['x1']]\n                eY += [rd['y0'], rd['y1']]\n                eZ += [rd['z0'], rd['z1']]            \n            \n            data.append(\n                go.Scatter3d(\n                    x=eX,\n                    y=eY,\n                    z=eZ,\n                    mode='lines',\n                    line=dict(color=config['color'], width=config['width']),\n                    name=ctype\n                )\n            )            \n\n    axis=dict(showbackground=False, showline=False, zeroline=False, showgrid=False, showticklabels=False, title='')\n    layout = go.Layout(\n        margin=dict(l=50, r=50, b=50, t=50),\n        width=720,\n        height=640,\n        showlegend=True,\n        scene=dict(\n            xaxis=dict(axis),\n            yaxis=dict(axis),\n            zaxis=dict(axis),\n        )\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='molecule')","5ad4ec3d":"molecule = 'dsgdb9nsd_000001'\nshow_molecule(train_df[train_df['molecule_name'] == molecule], structure_df[structure_df['molecule_name'] == molecule])","7306f590":"molecule = 'dsgdb9nsd_128739'\nshow_molecule(train_df[train_df['molecule_name'] == molecule], structure_df[structure_df['molecule_name'] == molecule])","1a8eec19":"molecule = 'dsgdb9nsd_000037'","6adf88e8":"mstructure = structure_df[structure_df['molecule_name'] == molecule]\nmstructure.head(20)","e994e7f3":"mdata = train_df[train_df['molecule_name'] == molecule]\nmdata.head(20)","d38fc3cf":"show_molecule(mdata, mstructure)","3b1a2b50":"# Visualize molecule structure\n\nThe plots are interactive, you can rotate, zoom in\/out, etc."}}