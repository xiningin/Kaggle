{"cell_type":{"f77373e5":"code","15e0e222":"code","21971727":"code","db7a7645":"code","a084a1db":"code","4a85032b":"code","01ffd064":"code","d58620bc":"markdown","4bafaa6d":"markdown","8e835c55":"markdown","b26d55c9":"markdown"},"source":{"f77373e5":"import numpy as np\nimport pandas as pd\nfrom functools import reduce\n\ndef intersect(*args):\n    return reduce(np.intersect1d, args)\n\ndef concat(*args):\n    return np.unique(np.concatenate(args))\n\ndef higher(f,*args):\n    res = {}\n    keys = np.unique(np.concatenate(args))\n    for k in keys: \n        res[k] = np.count_nonzero(np.concatenate(args) == k)\n    output_dict = dict(filter(lambda item: item[1] >= f, res.items()))\n    \n    return np.array(list(output_dict.keys()))\n\ndef count(*args):\n    res = {}\n    keys = np.unique(np.concatenate(args))\n    for k in keys: \n        res[k] = np.count_nonzero(np.concatenate(args) == k)\n    return res","15e0e222":"p1 = np.array(['A','B']) # eff b0\np2 = np.array(['A','C']) # bert\np3 = np.array(['A','D']) # tfidf\np4 = np.array(['A','B','C']) # word2vec\n\ncount(p1,p2,p3,p4)","21971727":"concat(p1,p2,p3,p4)","db7a7645":"intersect(p1,p2,p3,p4)","a084a1db":"higher(3,p1,p2,p3,p4) # count >=3","4a85032b":"higher(2,p1,p2,p3,p4) # count >=2","01ffd064":"higher(1,p1,p2,p3,p4) # count >=1","d58620bc":"## How to get the intersection","4bafaa6d":"## How to combine everything","8e835c55":"# For example, there are four prediction results","b26d55c9":"## How to get N or more"}}