{"cell_type":{"87ca5417":"code","d100fae7":"code","be293e2f":"code","2e78fd44":"code","31f87183":"code","f5a71e31":"code","a36430ea":"code","0ef28e80":"code","d5cd8a70":"code","64708c9a":"code","0a4c4eca":"code","d6a2d706":"code","364dad2e":"code","bac8032e":"code","503daa53":"code","c4a12a2f":"code","75edae77":"code","efa61e70":"code","52ab56e9":"code","080b4edc":"code","ce981d43":"code","02b08dba":"code","2842c797":"code","eda0a620":"code","a9acf534":"code","c21a3598":"code","8ce5bc04":"code","a97f92cc":"code","a7bc10e5":"code","beab119d":"code","ff56109d":"code","49193a83":"code","36300d92":"code","fe5b8b14":"code","09a77ed3":"code","a1e80fbc":"code","a019e848":"code","ab432f72":"code","e42e0b8a":"code","0878c9a2":"code","ce7cb53f":"code","cc494ebe":"code","123af757":"code","e4e52a7a":"code","d1e7f1f0":"code","b990ad1f":"code","28450f9d":"code","b398e1b5":"markdown","f44f884d":"markdown","f8ea5473":"markdown","1033538c":"markdown","fe7177c2":"markdown","6d79281c":"markdown","faac9eab":"markdown","224f1815":"markdown","1142dc76":"markdown","1a3b06a9":"markdown","937c23ba":"markdown","0c71546b":"markdown","d1130262":"markdown","1b3846de":"markdown","05606fc0":"markdown","cc293810":"markdown"},"source":{"87ca5417":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom dateutil import parser","d100fae7":"dataset = pd.read_csv('..\/input\/appdata10.csv')","be293e2f":"dataset.head()","2e78fd44":"dataset.describe()","31f87183":"dataset['hour'] = dataset.hour.str.slice(1, 3).astype(int)","f5a71e31":"dataset2 = dataset.copy().drop(columns = ['user', 'screen_list', 'enrolled_date', 'first_open', 'enrolled'])\ndataset2.head()","a36430ea":"plt.figure(figsize = (20, 20))\nplt.suptitle('Histogram of Numerical Columns', fontsize = 20)\nfor i in range(1, dataset2.shape[1] + 1):\n    plt.subplot(3, 3, i)\n    f = plt.gca()\n    f.set_title(dataset2.columns.values[i - 1])\n    \n    vals = np.size(dataset2.iloc[:, i - 1].unique())\n    \n    plt.hist(dataset2.iloc[:, i - 1], bins = vals, color = '#3F5D7D')","0ef28e80":"dataset2.corrwith(dataset.enrolled).plot.bar(figsize = (20, 10), \n                                             title = 'Coorelation with Response Variable', \n                                             fontsize = 15, rot = 45,\n                                             grid = True)","d5cd8a70":"sns.set(style=\"white\", font_scale=2)\n\ncorr = dataset2.corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nf, ax = plt.subplots(figsize=(18, 15))\nf.suptitle(\"Correlation Matrix\", fontsize = 40)\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","64708c9a":"dataset.dtypes","0a4c4eca":"dataset[\"first_open\"] = [parser.parse(row_date) for row_date in dataset[\"first_open\"]]","d6a2d706":"dataset[\"enrolled_date\"] = [parser.parse(row_date) if isinstance(row_date, str) else row_date for row_date in dataset[\"enrolled_date\"]]","364dad2e":"dataset.dtypes","bac8032e":"dataset['difference'] = (dataset.enrolled_date - dataset.first_open).astype('timedelta64[h]')","503daa53":"plt.figure(figsize = (20, 20))\nplt.hist(dataset['difference'].dropna(), color = '#3F5D7D')\nplt.title(\"Distribution of Time-Since-Enrolled\")\nplt.show()","c4a12a2f":"plt.figure(figsize = (20, 20))\nplt.hist(dataset['difference'].dropna(), color = '#3F5D7D', range = [0, 100])\nplt.title(\"Distribution of Time-Since-Enrolled\")\nplt.show()","75edae77":"dataset.loc[dataset.difference > 48, 'enrolled'] = 0","efa61e70":"dataset = dataset.drop(columns = ['difference', 'enrolled_date', 'first_open'])","52ab56e9":"top_screens = pd.read_csv('CS3_Data\/top_screens.csv').top_screens.values\ntop_screens","080b4edc":"dataset['screen_list'] = dataset.screen_list.astype(str) + ','\n\nfor sc in top_screens:\n    dataset[sc] = dataset.screen_list.str.contains(sc).astype(int)\n    dataset['screen_list'] = dataset.screen_list.str.replace(sc+',','')","ce981d43":"dataset['Other'] = dataset.screen_list.str.count(',')\ndataset = dataset.drop(columns = ['screen_list'])","02b08dba":"savings_screens = [\"Saving1\",\n                    \"Saving2\",\n                    \"Saving2Amount\",\n                    \"Saving4\",\n                    \"Saving5\",\n                    \"Saving6\",\n                    \"Saving7\",\n                    \"Saving8\",\n                    \"Saving9\",\n                    \"Saving10\"]\ndataset[\"SavingCount\"] = dataset[savings_screens].sum(axis=1)\ndataset = dataset.drop(columns=savings_screens)","2842c797":"cm_screens = [\"Credit1\",\n               \"Credit2\",\n               \"Credit3\",\n               \"Credit3Container\",\n               \"Credit3Dashboard\"]\ndataset[\"CMCount\"] = dataset[cm_screens].sum(axis=1)\ndataset = dataset.drop(columns=cm_screens)","eda0a620":"cc_screens = [\"CC1\",\n                \"CC1Category\",\n                \"CC3\"]\ndataset[\"CCCount\"] = dataset[cc_screens].sum(axis=1)\ndataset = dataset.drop(columns=cc_screens)","a9acf534":"loan_screens = [\"Loan\",\n               \"Loan2\",\n               \"Loan3\",\n               \"Loan4\"]\ndataset[\"LoansCount\"] = dataset[loan_screens].sum(axis=1)\ndataset = dataset.drop(columns=loan_screens)","c21a3598":"dataset.head()","8ce5bc04":"dataset.columns","a97f92cc":"dataset.to_csv('..\/input\/new_appdata10.csv', index = False)","a7bc10e5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport time","beab119d":"dataset = pd.read_csv('..\/input\/new_appdata10.csv')","ff56109d":"response = dataset['enrolled']\ndataset = dataset.drop(columns = 'enrolled')","49193a83":"from sklearn.model_selection import train_test_split","36300d92":"X_train, X_test, y_train, y_test = train_test_split(dataset, response, \n                                                    test_size = 0.2, \n                                                    random_state = 0)","fe5b8b14":"train_identifier = X_train['user']\nX_train = X_train.drop(columns = 'user')\ntest_identifier = X_test['user']\nX_test = X_test.drop(columns = 'user')","09a77ed3":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train2 = pd.DataFrame(sc_X.fit_transform(X_train))\nX_test2 = pd.DataFrame(sc_X.transform(X_test))\nX_train2.columns = X_train.columns.values\nX_test2.columns = X_test.columns.values\nX_train2.index = X_train.index.values\nX_test2.index = X_test.index.values\nX_train = X_train2\nX_test = X_test2","a1e80fbc":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0, penalty = 'l1')\nclassifier.fit(X_train, y_train)","a019e848":"y_pred = classifier.predict(X_test)\n","ab432f72":"from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score","e42e0b8a":"cm = confusion_matrix(y_test, y_pred)\naccuracy_score(y_test, y_pred)","0878c9a2":"precision_score(y_test, y_pred)","ce7cb53f":"recall_score(y_test, y_pred)","cc494ebe":"f1_score(y_test, y_pred)","123af757":"df_cm = pd.DataFrame(cm, index = (0, 1), columns = (0, 1))\nplt.figure(figsize = (10, 7))\nsns.set(font_scale = 1.4)\nsns.heatmap(df_cm, annot = True, fmt = 'g')\nprint(\"Test Data Accuracy: %0.4f\" % accuracy_score(y_test, y_pred))","e4e52a7a":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Logestic Accuracy: %0.3f (+\/- %0.3f)\" % (accuracies.mean(), accuracies.std() *2))","d1e7f1f0":"final_results = pd.concat([y_test, test_identifier], axis = 1).dropna()","b990ad1f":"final_results['predicted_results'] = y_pred","28450f9d":"final_results[['user', 'enrolled', 'predicted_results']].reset_index(drop = True)","b398e1b5":"## Importing the Libraries","f44f884d":"## Feature Engineering","f8ea5473":"#### Funnels","1033538c":"### Data Cleaning","fe7177c2":"### Plotting","6d79281c":"### Histograms","faac9eab":"### Correlation Matrix","224f1815":"### Formating the Final Results","1142dc76":"## EDA","1a3b06a9":"## Data Preprocessing","937c23ba":"## Data","0c71546b":"### Screens","d1130262":"### Response","1b3846de":"## MODEL","05606fc0":"## Model Building","cc293810":"### Coorelation with Response"}}