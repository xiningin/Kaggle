{"cell_type":{"fe064cd2":"code","555a78e0":"code","289e8650":"code","12dd62ad":"code","0a86a196":"code","271a3b08":"code","877f2d85":"code","b87ba405":"code","09d6f821":"code","241c0ac7":"code","63dc3ddd":"code","f0c87c66":"code","42b33ac0":"code","ebc841d6":"code","b7182d08":"code","cf3291fa":"code","8ecfa7ee":"code","b9ad0688":"code","6fc8d1c2":"code","ae4b731c":"code","98296354":"code","d3288706":"code","1e464c43":"code","737a4e77":"code","9b6d43f2":"code","70495806":"code","fde39733":"code","51c8ac23":"code","f9ce751a":"code","aacaf972":"code","bfd39572":"markdown","d5c9739b":"markdown","9db4dac3":"markdown","7b5402a7":"markdown","b7b1f8f9":"markdown","9276a177":"markdown"},"source":{"fe064cd2":"!pip install tensorflow","555a78e0":"\"\"\"from google.colab import drive\ndrive.mount('\/content\/drive')\"\"\"","289e8650":"import os\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.layers import Bidirectional, Dropout, Activation, Dense, LSTM\nfrom tensorflow.python.keras.layers import CuDNNLSTM\nfrom tensorflow.keras.models import Sequential\n\n%matplotlib inline\n\nsns.set(style='whitegrid', palette='muted', font_scale=1.5)\n\nrcParams['figure.figsize'] = 14, 8\n\nRANDOM_SEED = 42\n\nnp.random.seed(RANDOM_SEED)","12dd62ad":"# Data comes from:\n# https:\/\/finance.yahoo.com\/quote\/BTC-USD\/history?period1=1279314000&period2=1556053200&interval=1d&filter=history&frequency=1d\n\ncsv_path = \"..\/input\/claims\/claims_copy.xlsx\"\n# csv_path = \"https:\/\/raw.githubusercontent.com\/curiousily\/Deep-Learning-For-Hackers\/master\/data\/3.stock-prediction\/AAPL.csv\"","0a86a196":"!pip install xlrd \n!pip install openpyxl","271a3b08":"df = pd.read_excel(csv_path, parse_dates=['acc_month'])","877f2d85":"df = pd.read_excel(csv_path, parse_dates=['acc_month'])\ndf = df.sort_values('acc_month')\n\ndel df['country']\ndel df['insurance_group']\ndel df['rep_date']\ndel df['paid']\ndel df['reserved']\ndel df['s2model']\ndel df['claim_count']\ndel df['state']\ndel df['gwp_from']","b87ba405":"df.head()","09d6f821":"df.shape","241c0ac7":"ax = df.plot(x='acc_month', y='incurred');\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"claims\")","63dc3ddd":"scaler = MinMaxScaler()\n\nclose_price = df.incurred.values.reshape(-1, 1)\n\nscaled_close = scaler.fit_transform(close_price)","f0c87c66":"scaled_close.shape","42b33ac0":"np.isnan(scaled_close).any()","ebc841d6":"scaled_close = scaled_close[~np.isnan(scaled_close)]","b7182d08":"scaled_close = scaled_close.reshape(-1, 1)","cf3291fa":"np.isnan(scaled_close).any()","8ecfa7ee":"SEQ_LEN = 50\n\ndef to_sequences(data, seq_len):\n    d = []\n\n    for index in range(len(data) - seq_len):\n        d.append(data[index: index + seq_len])\n\n    return np.array(d)\n\ndef preprocess(data_raw, seq_len, train_split):\n\n    data = to_sequences(data_raw, seq_len)\n\n    num_train = int(train_split * data.shape[0])\n\n    X_train = data[:num_train, :-1, :]\n    y_train = data[:num_train, -1, :]\n\n    X_test = data[num_train:, :-1, :]\n    y_test = data[num_train:, -1, :]\n\n    return X_train, y_train, X_test, y_test\n\n\nX_train, y_train, X_test, y_test = preprocess(scaled_close, SEQ_LEN, train_split = 0.95)","b9ad0688":"X_train.shape","6fc8d1c2":"X_test.shape","ae4b731c":"DROPOUT = 0.3\nWINDOW_SIZE = SEQ_LEN - 1\n\nmodel = keras.Sequential()\n\nmodel.add(Bidirectional(LSTM(WINDOW_SIZE, return_sequences=True),\n                        input_shape=(WINDOW_SIZE, X_train.shape[-1])))\nmodel.add(Dropout(rate=DROPOUT))\n\nmodel.add(Bidirectional(LSTM((WINDOW_SIZE * 2), return_sequences=True)))\nmodel.add(Dropout(rate=DROPOUT))\n\nmodel.add(Bidirectional(LSTM(WINDOW_SIZE, return_sequences=False)))\n\nmodel.add(Dense(units=1))\n\nmodel.add(Activation('linear'))","98296354":"model.compile(\n    loss='mean_squared_error', \n    optimizer='adam'\n)","d3288706":"BATCH_SIZE = 64\n\nhistory = model.fit(\n    X_train, \n    y_train,\n    epochs=10, \n    batch_size=BATCH_SIZE, \n    shuffle=False,\n    validation_split=0.1\n)","1e464c43":"model.evaluate(X_test, y_test)","737a4e77":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","9b6d43f2":"y_hat = model.predict(X_test)\n\ny_test_inverse = scaler.inverse_transform(y_test)\ny_hat_inverse = scaler.inverse_transform(y_hat)\n \nplt.plot(y_test_inverse, label=\"Actual claim\", color='green')\nplt.plot(y_hat_inverse, label=\"Predicted claim\", color='red')\n \nplt.title('Claims predictions')\nplt.xlabel('Time [days]')\nplt.ylabel('claims')\nplt.legend(loc='best')\n \nplt.show();","70495806":"import numpy as np\nimport pandas as pd\nfrom pandas.tseries.offsets import DateOffset\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dropout\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport plotly.plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\npyoff.init_notebook_mode(connected=True)","fde39733":"df.index[-1]","51c8ac23":"# make a one-step forecast\ndef forecast_lstm(model, batch_size, X):\n\tX = X.reshape(1, 1, len(X))\n\tyhat = model.predict(X, batch_size=batch_size)\n\treturn yhat[0,0]\n# walk-forward validation on the test data\npredictions = list()\nfor i in range(len(X_test)):\n\t# make one-step forecast\n\tX, y = X_test[i, 0:-1], X_test[i, -1]\n\tyhat = forecast_lstm(model, 1, X)\n\t# invert scaling\n\tyhat = invert_scale(scaler, X, yhat)\n\t# invert differencing\n\tyhat = inverse_difference(raw_values, yhat, len(X_test)+1-i)\n\t# store forecast\n\tpredictions.append(yhat)\n\texpected = raw_values[len(train) + i + 1]\n\tprint('Month=%d, Predicted=%f, Expected=%f' % (i+1, yhat, expected))\n \n# report performance\nrmse = sqrt(mean_squared_error(raw_values[-12:], predictions))\nprint('Test RMSE: %.3f' % rmse)\n# line plot of observed vs predicted\npyplot.plot(raw_values[-12:])\npyplot.plot(predictions)\npyplot.show()\n","f9ce751a":"[DateOffset(months=x) for x in range(0,13)]","aacaf972":"add_dates = [df.index[-1] + DateOffset(months=x) for x in range(0,13) ]\nfuture_dates = pd.DataFrame(index=add_dates[1:],columns=df.columns)","bfd39572":"# Model","d5c9739b":"# Normalization","9db4dac3":"# Prediction","7b5402a7":"# Preprocessing","b7b1f8f9":"# Training","9276a177":"1- first combination = 0.0039 \n\nBATCH_SIZE = 64 \/ seq_length = 100. \n\nhistory = model.fit(\n    X_train, \n    y_train, \n    epochs=50, \n    batch_size=BATCH_SIZE, \n    shuffle=False,\n    validation_split=0.1\n)"}}