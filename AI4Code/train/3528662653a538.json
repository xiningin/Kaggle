{"cell_type":{"e7584d25":"code","e0ce5188":"code","5bc6416f":"code","cb60dbdc":"code","27a4713d":"code","7b96efc3":"code","41773165":"code","9a4301c9":"code","589f32f4":"code","a7b81c89":"code","5f998d18":"code","898fd1c9":"code","2e5c9e8d":"code","c9590dee":"code","f29c4e57":"code","54026079":"markdown","c5e2badf":"markdown","a087b3b2":"markdown"},"source":{"e7584d25":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statistics import mean\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom pandas.plotting import scatter_matrix\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nroot = '\/kaggle\/input\/fifa-20-complete-player-dataset\/'\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0ce5188":"df = pd.read_csv(\n    os.path.join(root, 'players_20.csv'))\ndf.isnull().any()[df.isnull().any()>0]\ndf = df.fillna(df.mean)\ndf.describe()","5bc6416f":"df.columns.tolist()","cb60dbdc":"#Top 5 country with most per capital income\n#Conisdering ony countries where players count is more than 100\nnation = df.groupby('nationality')['wage_eur'].agg(['mean', 'count'])\nnation = nation[nation['count'] > 100]\nnation = nation.sort_values(by = 'mean', ascending = False)\nnation[0:10]","27a4713d":"#Top 20 country with most potential\n#Conisdering ony countries where players count is more than 100\nnation = df.groupby('nationality')['potential'].agg(['mean', 'count'])\nnation = nation[nation['count'] > 100]\nnation = nation.sort_values(by = 'mean', ascending = False)\n\nfig = px.bar(nation[0:20], x= nation.index[0:20], y='mean')\nfig.update_layout(title_text='Mean wages')\nfig.update_xaxes(title_text=\"<b> Countries <\/b>\")\nfig.show()","7b96efc3":"#Top 5 country with most overall\n#Conisdering ony countries where players count is more than 100\nnation = df.groupby('nationality')['overall'].agg(['mean', 'count'])\nnation = nation[nation['count'] > 100]\nnation = nation.sort_values(by = 'mean', ascending = False)\nnation[0:10]","41773165":"#Top 5 positions to earm money\n#Conisdering ony positions where count is more than 100\n\nposition = df.groupby('player_positions')['wage_eur'].agg(['mean', 'count'])\nposition = position[position['count'] > 100]\nposition = position.sort_values(by = 'mean', ascending = False)\n\nfig = px.bar(position[0:20], x= position.index[0:20], y='mean')\nfig.update_layout(title_text='Best position to earn money')\nfig.update_xaxes(title_text=\"<b> Positions <\/b>\")\nfig.show()","9a4301c9":"#Popular positions\n#Couting products at various sectors\npos_dict = {'RW':0,'CF':0, 'ST':0, 'LW':0, 'RB':0, 'CB':0, 'CDM':0, 'CAM':0, 'LM':0,  'CB':0, 'CM':0, 'LB':0,  \n           'RM':0, 'RWB':0, 'LWB':0}\nfor pos in pos_dict.keys():\n    val = df['player_positions'].str.contains(pos).sum()\n    pos_dict.update({pos:val})\nfig = px.pie(values= pos_dict.values(), names= pos_dict.keys(), title='Position distribution')\nfig.show()","589f32f4":"#Are there any correlation between physique and potential to EUR?\nnewdf =df[['weight_kg', 'potential', 'overall',  'height_cm', 'age', 'wage_eur',]]\ncorrelation = newdf.corr()\nsns.heatmap(correlation, cmap=\"Reds\", annot = True) ","a7b81c89":"#Who can be a good defender?\ndefender = df[['defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle', 'mentality_aggression', 'mentality_interceptions'\n                       ,'age', 'height_cm', 'weight_kg', 'body_type', 'body_type', 'wage_eur']]\ncorrdf = defender.corr()\nsns.heatmap(corrdf , cmap=\"Reds\", annot = True) ","5f998d18":"#Who can attack well?\ndefender = df[['attacking_volleys','attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy','attacking_short_passing',  'mentality_aggression', 'mentality_interceptions'\n                       ,'age', 'height_cm', 'weight_kg', 'body_type', 'body_type', 'wage_eur']]\ncorrdf = defender.corr()\nsns.heatmap(corrdf , cmap=\"Reds\", annot = True) ","898fd1c9":"#Can attack get players more money?\nfig = px.scatter(df, x=\"attacking_crossing\", y=\"wage_eur\" );\n\nfig.update_layout(title_text='Attacks vs Wage')\nfig.update_xaxes(title_text=\"<b> Attacking ability <\/b>\")\nfig.update_yaxes(title_text=\"<b> wage <\/b>\")\nfig.show()","2e5c9e8d":"#Can height earn players more money?\nfig = px.scatter(df, x=\"height_cm\", y=\"wage_eur\" );\n\nfig.update_layout(title_text='height_cm vs Wage')\nfig.update_xaxes(title_text=\"<b> Attacking ability <\/b>\")\nfig.update_yaxes(title_text=\"<b> height <\/b>\")\nfig.show()","c9590dee":"#Highest earning players\n#Which are players earn the the highest?\ndf = df.sort_values(by = ['wage_eur'], ascending = False)\ndf[['short_name', 'overall']][0:5]","f29c4e57":"#Highest overall players\ndf = df.sort_values(by = ['overall'], ascending = False)\ndf[['short_name', 'overall']][0:5]","54026079":"***Players Ability Analysis***","c5e2badf":"***Analysis by Nation***","a087b3b2":"***Position Analysis***"}}