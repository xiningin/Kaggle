{"cell_type":{"b53b42a5":"code","095d0e49":"code","f8d4c6df":"code","6421020c":"code","71eba21b":"code","d618986c":"code","5c04fac0":"code","d7b59df6":"code","1499cdc4":"code","8bb5c706":"code","09eb6846":"markdown","e5fd8601":"markdown","5325359d":"markdown","43db8b5e":"markdown","9cd8d05e":"markdown","db82d7ab":"markdown","45d55e94":"markdown"},"source":{"b53b42a5":"import numpy as np \nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.rcParams['figure.figsize'] = (8,8) \nplt.rcParams[\"figure.dpi\"] = 80 \n\nsns.set(style=\"ticks\")\nsns.set_context(\"poster\", font_scale = .5, rc={\"grid.linewidth\": 5})\n\nDIR = '\/kaggle\/input\/kaggle-survey-2017\/'\ndf_17 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, encoding='latin-1')\n\nDIR = '\/kaggle\/input\/kaggle-survey-2018\/'\ndf_18 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1])\ndf_18.columns = ['_'.join(col) for col in df_18.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2019\/'\ndf_19 = pd.read_csv(DIR + 'multiple_choice_responses.csv', low_memory=False, encoding='latin-1', header=[0,1])\ndf_19.columns = ['_'.join(col) for col in df_19.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2020\/'\ndf_20 = pd.read_csv(DIR + 'kaggle_survey_2020_responses.csv', low_memory=False, header=[0,1])\ndf_20.columns = ['_'.join(col) for col in df_20.columns]\n\n\ndf_17.rename(columns = {\n    'Country':'country',\n    'GenderSelect': 'gender',\n    'Age': 'age',\n    'FormalEducation': 'education',\n    'CurrentJobTitleSelect': 'job_title',\n    'Tenure': 'years_experience',\n    'CompensationAmount': 'salary'\n}, inplace = True)\n\ndf_18.rename(columns = {\n    'Q3_In which country do you currently reside?':'country',\n    'Q1_What is your gender? - Selected Choice': 'gender',\n    'Q2_What is your age (# years)?': 'age',\n    'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'education',\n    'Q6_Select the title most similar to your current role (or most recent title if retired): - Selected Choice': 'job_title',\n    'Q8_How many years of experience do you have in your current role?': 'years_experience',\n    'Q9_What is your current yearly compensation (approximate $USD)?': 'salary'\n}, inplace = True)\n\ndf_19.rename(columns = {\n    'Q3_In which country do you currently reside?':'country',\n    'Q2_What is your gender? - Selected Choice': 'gender',\n    'Q1_What is your age (# years)?': 'age',\n    'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'education',\n    'Q5_Select the title most similar to your current role (or most recent title if retired): - Selected Choice': 'job_title',\n    'Q15_How long have you been writing code to analyze data (at work or at school)?': 'years_experience',\n    'Q10_What is your current yearly compensation (approximate $USD)?': 'salary'\n}, inplace = True)\n\ndf_20.rename(columns = {\n    'Q3_In which country do you currently reside?':'country',\n    'Q2_What is your gender? - Selected Choice': 'gender',\n    'Q1_What is your age (# years)?': 'age',\n    'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'education',\n    'Q5_Select the title most similar to your current role (or most recent title if retired): - Selected Choice': 'job_title',\n    'Q6_For how many years have you been writing code and\/or programming?': 'years_experience',\n    'Q24_What is your current yearly compensation (approximate $USD)?': 'salary'\n}, inplace = True)\n\ncols = ['country', 'gender', 'age', 'education', 'job_title', 'years_experience', 'salary']\n\ndf_17 = df_17[cols].copy()\ndf_18 = df_18[cols].copy()\ndf_19 = df_19[cols].copy()\ndf_20 = df_20[cols].copy()\n\ndf_17['year'] = 2017\ndf_18['year'] = 2018\ndf_19['year'] = 2019\ndf_20['year'] = 2020\n\ndf = pd.concat([df_17, df_18, df_19, df_20], ignore_index=True)\n\ndf = df[(df[\"country\"] == \"Germany\")].copy()","095d0e49":"adict= {\n    'Male': 'Man', \n    'Man': 'Man', \n    'Female': \"Woman\", \n    'Woman': 'Woman'\n}\ndf['gender'] = df[\"gender\"].map(adict)\n\nadict= {\n    10.0: '18-21',\n    17.0: '18-21',\n    '18-21': '18-21',\n    19.0: '18-21',\n    20.0: '18-21',\n    21.0: '18-21',\n    \n    '22-24': '22-24',\n    22.0: '22-24',\n    23.0: '22-24',\n    24.0: '22-24',\n    \n    '25-29': '25-29',\n    25.0: '25-29',\n    26.0: '25-29',\n    27.0: '25-29',\n    28.0: '25-29',\n    29.0: '25-29',\n    \n    '30-34': '30-34',\n    30.0: '30-34',\n    31.0: '30-34',\n    32.0: '30-34',\n    33.0: '30-34',\n    34.0: '30-34',\n    \n    '35-39': '35-39',\n    35.0: '35-39',\n    36.0: '35-39',\n    37.0: '35-39',\n    38.0: '35-39',\n    39.0: '35-39',\n    \n    '40-44': '40-44',\n    40.0: '40-44',\n    41.0: '40-44',\n    42.0: '40-44',\n    43.0: '40-44',\n    44.0: '40-44',\n    \n    '45-49': '45-49',\n    45.0: '45-49',\n    46.0: '45-49',\n    47.0: '45-49',\n    48.0: '45-49',\n    49.0: '45-49',\n    \n    '50-54': '50-54',\n    50.0: '50-54',\n    51.0: '50-54',\n    52.0: '50-54',\n    53.0: '50-54',\n    \n    '55-59': '55-59',\n    55.0: '55-59',\n    56.0: '55-59',\n    57.0: '55-59',\n    58.0: '55-59',\n    59.0: '55-59',\n    \n    '60-69': '60+',\n    61.0: '60+',\n    65.0: '60+',\n    66.0: '60+',\n    67.0: '60+',\n    69.0: '60+',\n    '70+': '60+',\n    '70-79': '60+',\n    '80+': '60+',\n}\ndf['age'] = df[\"age\"].map(adict)\n\nadict = {\n    \"Some college\/university study without earning a bachelor's degree\": 'Some college\/university study without earning a bachelor\u2019s degree',\n    'Some college\/university study without earning a bachelor\u00e2\\x80\\x99s degree': 'Some college\/university study without earning a bachelor\u2019s degree',\n    'Some college\/university study without earning a bachelor\u2019s degree': 'Some college\/university study without earning a bachelor\u2019s degree',\n    \n    \"Bachelor's degree\": 'Bachelor\u2019s degree',\n    'Bachelor\u00e2\\x80\\x99s degree': 'Bachelor\u2019s degree',\n    'Bachelor\u2019s degree': 'Bachelor\u2019s degree',\n    \n    \"Master's degree\": 'Master\u2019s degree',\n    'Master\u00e2\\x80\\x99s degree': 'Master\u2019s degree',\n    'Master\u2019s degree': 'Master\u2019s degree',\n    'Professional degree': 'Master\u2019s degree',\n    \n    'Doctoral degree': 'Doctoral degree',\n}\ndf['education'] = df[\"education\"].map(adict)\n\nadict = {\n    'Business Analyst': 'Analyst',\n    'Data Analyst': 'Analyst',\n    'Marketing Analyst': 'Analyst',\n    'Consultant': 'Analyst',\n    \n    'DBA\/Database Engineer': 'Data Engineer',\n    'Data Miner': 'Data Engineer',\n    'Data Engineer': 'Data Engineer',\n    \n    'Machine Learning Engineer': 'Data Scientist',\n    'Statistician': 'Data Scientist',\n    'Data Scientist': 'Data Scientist',\n    \n    'Currently not employed': 'Not employed',\n    'Not employed': 'Not employed',\n    \n    'Developer Advocate': 'Other',\n    'Predictive Modeler': 'Other',\n    'Principal Investigator': 'Other',\n    'Salesperson': 'Other',\n    'Other': 'Other',\n    \n    'Product\/Project Manager': 'Manager',\n    'Chief Officer': 'Manager',    \n    'Manager': 'Manager',    \n    \n    'Scientist\/Researcher': 'Researcher',\n    'Research Assistant': 'Researcher',\n    'Research Scientist': 'Researcher',\n    'Computer Scientist': 'Researcher',\n    'Researcher': 'Researcher',\n    \n    'Programmer': 'Software Engineer',\n    'Software Developer\/Software Engineer': 'Software Engineer',\n    'Engineer': 'Software Engineer',\n    'Software Engineer': 'Software Engineer',\n    \n    'Student': 'Student',\n}\ndf['job_title'] = df[\"job_title\"].map(adict)\ndf['job_title'].fillna(value='Other', inplace=True)\n\nadict = {\n    '0-1': '0-1',\n    '< 1 years': '0-1',\n    \"I don't write code to analyze data\": '0-1',\n    'I have never written code': '0-1',\n    'Less than a year': '0-1',\n    \n    '1-2': '1-2',\n    '1 to 2 years': '1-2',\n    '1-2 years': '1-2',\n    \n    \n    '2-3': '3-5',\n    '3-4': '3-5',\n    '4-5': '3-5',\n    '3 to 5 years': '3-5',\n    '3-5 years': '3-5',\n    \n    '5-10': '5-10',\n    '5-10 years': '5-10',\n    '6 to 10 years': '5-10',\n    \n    '10-15': '10+',\n    '10-20 years': '10+',\n    '15-20': '10+',\n    '20+ years': '10+',\n    '20-25': '10+',\n    '25-30': '10+',\n    '30 +': '10+',\n    'More than 10 years': '10+',\n}\ndf['years_experience'] = df[\"years_experience\"].map(adict)\n\n# 60,000-69,999 \nadict = {\n    # 0-30k\n    '$0-999': '0-29,999',\n    '0': '0-29,999',\n    '0-10,000': '0-29,999',\n    '1,000-1,999': '0-29,999',\n    '2,000-2,999': '0-29,999',\n    '10,000': '0-29,999',\n    '10,000-14,999': '0-29,999',\n    '10-20,000': '0-29,999',\n    '15,000-19,999': '0-29,999',\n    '20000': '0-29,999',\n    '20,000-24,999': '0-29,999',\n    '20-30,000': '0-29,999',\n    '24000': '0-29,999',\n    '25,000-29,999': '0-29,999',\n    '25000': '0-29,999',\n    '28000': '0-29,999',\n    '3,000-3,999': '0-29,999',\n    '4,000-4,999': '0-29,999',\n    '480': '0-29,999',\n    '5,000-7,499': '0-29,999',\n    '5,400': '0-29,999',\n    '5000': '0-29,999',\n    '7,500-9,999': '0-29,999',\n    '11000': '0-29,999',\n    '12000': '0-29,999',\n    '15000': '0-29,999',\n    '15600': '0-29,999',\n    '18800': '0-29,999',\n    '19200': '0-29,999',\n    \n    # 30-50k\n    '30,000': '30,000-49,999',\n    '30,000-39,999': '30,000-49,999',\n    '30-40,000': '30,000-49,999',\n    '30000': '30,000-49,999',\n    '33000': '30,000-49,999',\n    '35,000': '30,000-49,999',\n    '35000': '30,000-49,999',\n    '36,000': '30,000-49,999',\n    '36000': '30,000-49,999',\n    '40,000': '30,000-49,999',\n    '40,000-49,999': '30,000-49,999',\n    '40-50,000': '30,000-49,999',\n    '40000': '30,000-49,999',\n    '42000': '30,000-49,999',\n    '43000': '30,000-49,999',\n    '44,000': '30,000-49,999',\n    '44000': '30,000-49,999',\n    '45000': '30,000-49,999',\n    '46,000': '30,000-49,999',\n    '46000': '30,000-49,999',\n    '47,000': '30,000-49,999',\n    '48,000': '30,000-49,999',\n    \n    #50-60k\n    '50,000-59,999': '50,000-59,999',\n    '50-60,000': '50,000-59,999',\n    '50000': '50,000-59,999',\n    '51000': '50,000-59,999',\n    '53000': '50,000-59,999',\n    '54,000': '50,000-59,999',\n    '55000': '50,000-59,999',\n    '55500': '50,000-59,999',\n    '56500': '50,000-59,999',\n    '57,000': '50,000-59,999',\n    '58000': '50,000-59,999',\n    \n    #60-70k\n    '60,000-69,999': '60,000-69,999',\n    '60-70,000': '60,000-69,999',\n    '60,000':'60,000-69,999',\n    '60000': '60,000-69,999',\n    '62000': '60,000-69,999',\n    '65000': '60,000-69,999',\n    '67000': '60,000-69,999',\n    '68000': '60,000-69,999',\n    \n    #70-80k\n    '70000': '70,000-79,999',\n    '70,000-79,999': '70,000-79,999',\n    '70-80,000': '70,000-79,999',\n    '72000': '70,000-79,999',\n    '75000': '70,000-79,999',\n    '76000': '70,000-79,999',\n    '78000': '70,000-79,999',\n    \n    #80-90\n    '80000': '80,000-89,999',\n    '80,000-89,999': '80,000-89,999',\n    '80-90,000': '80,000-89,999',\n    '83000': '80,000-89,999',\n    '84000': '80,000-89,999',\n    '85000': '80,000-89,999',\n    '89,000': '80,000-89,999',\n    \n    #90-100k\n    '90,000': '90,000-99,999',\n    '90,000-99,999': '90,000-99,999',\n    '90-100,000': '90,000-99,999',\n    '90000': '90,000-99,999',\n    '93000': '90,000-99,999',\n    '95000': '90,000-99,999',\n    '98000': '90,000-99,999',\n    \n    # 100-125k\n    '100,000-124,999': '100,000-124,999',\n    '100-125,000': '100,000-124,999',\n    '100000': '100,000-124,999',\n    '106000': '100,000-124,999',\n    '110000': '100,000-124,999',\n    '120000': '100,000-124,999',\n    \n    # 125-150k\n    '125,000-149,999': '125,000-149,999',\n    '125-150,000': '125,000-149,999',\n    '125000': '125,000-149,999',\n    \n    # 150-200k\n    '150,000-199,999': '150,000-199,999',\n    '150-200,000': '150,000-199,999',\n    '150000': '150,000-199,999',\n    '170000': '150,000-199,999',\n    \n    # 200-250k\n    '200,000-249,999': '200,000+',\n    '200-250,000': '200,000+',\n    '200000': '200,000+',\n    '220000': '200,000+',\n    \n    # 250-300k\n    '250,000-299,999': '200,000+',\n    '250-300,000': '200,000+',\n    \n    # 300k+\n    '300,000-500,000': '200,000+',\n    '500,000+': '200,000+',\n    '850,000': '200,000+',\n    '> $500,000': '200,000+',\n}\ndf['salary'] = df[\"salary\"].map(adict)","f8d4c6df":"print(\"Number of respondents:\",len(df))\n# df.sample(5)","6421020c":"col = \"gender\"\nquestion = \"What's your gender?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=4,\n    order = [\"Man\", \"Woman\"],\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","71eba21b":"col = \"age\"\nquestion = \"What's your age?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=6,\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","d618986c":"col = \"education\"\nquestion = \"What's your highest level of formal education?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=4,\n    order = ['Some college\/university study without earning a bachelor\u2019s degree',\n       'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree', ],\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","5c04fac0":"col = \"job_title\"\nquestion = \"What's your current job role?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=6,\n    order = ['Data Scientist', \n             'Data Engineer', \n             'Software Engineer',\n             'Analyst', \n             'Manager', \n             'Other', \n             'Researcher', \n             'Student',\n             'Not employed'\n            ],\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","d7b59df6":"col = \"years_experience\"\nquestion = \"How many years of experience do you have?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=4,\n    order = ['0-1', '1-2', '3-5', '5-10', '10+'],\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","1499cdc4":"col = \"salary\"\nquestion = \"Whats your current yearly compensation (USD)?\"\n\ngr = pd.DataFrame(df.groupby([col, \"year\"]).size()).reset_index()\ngr[\"size\"] = gr.groupby(\"year\")[0].transform(np.sum)\ngr.columns = [col, \"year\", \"percent\", \"size\"]\n\ngr[\"percent\"] = np.round(100*gr[\"percent\"]\/gr[\"size\"])\ngr = gr[gr.percent > 0]\n\nax = sns.catplot(\n    x='percent', y=col, data=gr, kind=\"bar\", hue=\"year\", height=6,\n    order = [\n        '0-29,999', \n        '30,000-49,999', \n        '50,000-59,999', \n        '60,000-69,999', \n        '70,000-79,999',\n        '80,000-89,999', \n        '90,000-99,999', \n        '100,000-124,999', \n        '125,000-149,999', \n        '150,000-199,999', \n        '200,000+',\n    ],\n    palette=np.array(['#f0f0f0', '#bdbdbd', '#636363', '#2DA5EA']),\n    legend=None,\n)\n\nax.set(xlabel='Percentage', ylabel='', title=question)\nplt.legend(bbox_to_anchor=(1.01, 1), loc=2, borderaxespad=0.)\nsns.despine()\nplt.tight_layout()\nplt.show()","8bb5c706":"df.to_csv(\"germany_survey_results.csv\", sep=\";\", index=False)","09eb6846":"## With over **2000** responses lets look at what do people in Germany have to say \ud83c\udde9\ud83c\uddea","e5fd8601":"## \ud83e\uddbe\ud83d\udcaa As application of Machine Learning is increasing more and more people are becoming veterans","5325359d":"## \ud83d\udc68\ud83d\udc69 Men still dominate the field but the ratio in Women is steadily increasing","43db8b5e":"## One does need atleast a Master's degree \ud83c\udf93\ud83c\udf93","9cd8d05e":"## In conclusion\nA typical data scientist in Germany is a millennial male with a master's degree and over 2 years of work experience who earns around 80,000 USD.\n\n\ud83d\udc68\u200d\ud83d\udcbb","db82d7ab":"## Because this is a rather new field millennials dominate the market \ud83c\udf55","45d55e94":"## Compensation may be on the rise again \nAs per [official](https:\/\/con.arbeitsagentur.de\/prod\/entgeltatlas\/tabelle?region=1&geschlecht=1&branche=1&dkz=129987&mode=3&gruppe=1) numbers the median salary on a data scientist in Germany is around 80,000 USD (68,000 EUR)"}}