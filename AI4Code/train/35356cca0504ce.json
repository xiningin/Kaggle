{"cell_type":{"ef0b7fe3":"code","1903e39b":"code","a1bcd55e":"code","309234a3":"code","afa730fe":"code","c104ab15":"code","c540406e":"code","2b06315e":"code","a08a9703":"code","c4717435":"code","76767a25":"code","57134fa1":"code","71ef2f9c":"code","37794b69":"code","aea65d26":"markdown","0bcb24d9":"markdown","db4abf25":"markdown","ee45f537":"markdown","2b63c702":"markdown","74d66a59":"markdown","8d74a3c6":"markdown","2c7d24f9":"markdown","0c559941":"markdown","dfe87f48":"markdown","6f20737e":"markdown","2822f7ca":"markdown"},"source":{"ef0b7fe3":"# ! pip install textblob\nfrom textblob import TextBlob\nimport nltk\nnltk.download('vader_lexicon')\nimport numpy as np \nimport pandas as pd ","1903e39b":"feedback = \"So I've been going to chili's since it opened but today the food was so bad , it had zero taste , the mushroom sauce chicken didn't have any mushrooms or sauce , the baked potatoes were without any seasoning and the beans were soggy , the burger's bun was weird tasting so was the patty and the onion rings in it . One star is for the chips and salsa , thankfully it's still the same\"\ntestimonial = TextBlob(feedback)\ntestimonial.sentiment\n","a1bcd55e":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nsid = SentimentIntensityAnalyzer()\ndef get_vader_score(sent):\n    # Polarity score returns dictionary\n    ss = sid.polarity_scores(sent)\n    return ss\nget_vader_score(feedback)        ","309234a3":"# !ls ..\/input\/sentimentanalysis\/amazon_cells_labelled.txt\ndf = pd.read_csv('..\/input\/sentimentanalysis\/amazon_cells_labelled.txt',sep='\\t', header=None, names=['Text', 'Sentiment'])\ndf.head()","afa730fe":"def get_tb_sentiment(text, param):\n#     print(text,param)\n    textblob = TextBlob(text)\n    if param =='polarity':\n        return textblob.sentiment.polarity\n    elif param == 'subjectivity':\n        return textblob.sentiment.subjectivity\n    else:\n        return None\n\ndef get_vader_sentiment(text, param):\n    vader = get_vader_score(text)\n    if param =='pos':\n        return vader['pos']\n    elif param == 'neg':\n        return vader['neg']\n    elif param == 'neu':\n        return vader['neu']\n    elif param == 'compound':\n        return vader['compound']\n    return None\n\n\ndf['tb_polarity'] = df['Text'].apply(get_tb_sentiment, args=('polarity',))\ndf['tb_subjectivity'] = df['Text'].apply(get_tb_sentiment, args=('subjectivity',))\ndf['vader_pos'] = df['Text'].apply(get_vader_sentiment, args=('pos',))\ndf['vader_neg'] = df['Text'].apply(get_vader_sentiment, args=('neg',))\ndf['vader_neu'] = df['Text'].apply(get_vader_sentiment, args=('neu',))\ndf['vader_compound'] = df['Text'].apply(get_vader_sentiment, args=('compound',))\n\ndf.head()\n","c104ab15":"import seaborn as sns\nimport matplotlib.pyplot as plt","c540406e":"fig = plt.figure(1, figsize=(20,20))\n\nrow = 2\ncol = 2\n\nplt.subplot(row, col, 1)\nsns.scatterplot(x='vader_compound', y='tb_polarity',data=df, hue='Sentiment')\nplt.subplot(row, col, 2)\nsns.scatterplot(x='vader_pos', y='tb_polarity',data=df, hue='Sentiment')\nplt.subplot(row, col, 3)\nsns.scatterplot(x='vader_neg', y='tb_polarity',data=df, hue='Sentiment')\nplt.subplot(row, col, 4)\nsns.scatterplot(x='vader_compound', y='tb_subjectivity',data=df, hue='Sentiment')\n\n","2b06315e":"from sklearn import tree\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n","a08a9703":"X = df[['tb_polarity', 'tb_subjectivity', 'vader_pos', 'vader_neg', 'vader_neu', 'vader_compound']]\ny = df['Sentiment']","c4717435":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\nclf = tree.DecisionTreeClassifier(min_samples_split=200)\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint('Model Classification Score:' , score)","76767a25":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\nclf = SVC(gamma='auto')\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint('Model Classification Score:' , score)","57134fa1":"feedback_test = pd.read_csv(\"..\/input\/feedback-test1csv\/feedback_test.csv\")\nlen(feedback_test)","71ef2f9c":"feedback_test['tb_polarity'] = feedback_test['Feedback'].apply(get_tb_sentiment, args=('polarity',))\nfeedback_test['tb_subjectivity'] = feedback_test['Feedback'].apply(get_tb_sentiment, args=('subjectivity',))\nfeedback_test['vader_pos'] = feedback_test['Feedback'].apply(get_vader_sentiment, args=('pos',))\nfeedback_test['vader_neg'] = feedback_test['Feedback'].apply(get_vader_sentiment, args=('neg',))\nfeedback_test['vader_neu'] = feedback_test['Feedback'].apply(get_vader_sentiment, args=('neu',))\nfeedback_test['vader_compound'] = feedback_test['Feedback'].apply(get_vader_sentiment, args=('compound',))\n\nfeedback_test.tail()\n","37794b69":"feedback_test1 = feedback_test[['tb_polarity', 'tb_subjectivity', 'vader_pos', 'vader_neg', 'vader_neu', 'vader_compound']]\npredictions = clf.predict(feedback_test1)\npredictions","aea65d26":"## Decision Tree Classifier","0bcb24d9":"Let us import libraries needed","db4abf25":"# Data processing\nUse TexBlob and Vader library to get the attributes like Polarity, Subjectivity, Positive, Negative etc to create dataframe which can then be used to model the sentiment engine","ee45f537":"# Using TextBlob Library","2b63c702":"Polarity negative means negative sentiment. It ranges from -1 to 1\nSubjectivity tells how much subjective is the text. 0 is objective, 1 subjective. Ranges from 0 to 1","74d66a59":"# Merge TextBlob and Vader\nBuild a classifer to use both TextBlob and Vader attributes to find the correct polarity","8d74a3c6":"# SVC Classifier","2c7d24f9":"# Predicting sentiment using above mode\nLet us try to predict the sentiment polarity with above mode","0c559941":"# Sentiment Analysis v1\nCreating a Sentiment Analysis using TextBlob and Vader libraries\n\n","dfe87f48":"# Using Vader Library","6f20737e":"# Visualization","2822f7ca":"# Data Load\nThe data is from UCI website. https:\/\/archive.ics.uci.edu\/ml\/datasets\/Sentiment+Labelled+Sentences#\n\nThis dataset was created for the Paper 'From Group to Individual Labels using Deep Features', Kotzias et. al,. KDD 2015\n\nIt contains sentences labelled with positive or negative sentiment.\n\n\n** Format: ** \n\n\n\n|sentence |  score |\n|-- | --|\n|Feedback Text | 0 or 1 |\n\n\n** Details: **\n\nScore is either 1 (for positive) or 0 (for negative)\nThe sentences come from three different websites\/fields:\n\n- imdb.com\n- amazon.com\n- yelp.com\n\nFor each website, there exist 500 positive and 500 negative sentences. Those were selected randomly for larger datasets of reviews.\nWe attempted to select sentences that have a clearly positive or negative connotaton, the goal was for no neutral sentences to be selected.\n\n\n\n"}}