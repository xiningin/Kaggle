{"cell_type":{"379b28ee":"code","e7642fa4":"code","42ee83b5":"code","4a75d50e":"code","7188944c":"code","1ac8fb04":"code","411704fc":"code","d2cde57f":"code","70d939df":"code","efda8757":"code","ec7e800a":"code","0ce67739":"code","ee3955a0":"markdown"},"source":{"379b28ee":"import numpy as np # Storing our data as numpy array\nimport os # For handling directories\nimport matplotlib.pyplot as plt \nfrom PIL import Image # For handling images","e7642fa4":"lookup  = dict()\nreverselookup = dict()\ncount = 0\nfor j in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/00\/'):\n    if not j.startswith('.'):\n        lookup [j] = count\n        reverselookup [count] = j\n        count = count + 1\nlookup ","42ee83b5":"x_data = []\ny_data = []\ndatacount = 0 \nfor i in range(0, 10): \n    for j in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/0' + str(i) + '\/'):\n        if not j.startswith('.'): \n            count = 0 \n            for k in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/0' + str(i) + '\/' + j + '\/'):\n                img = Image.open('..\/input\/leapgestrecog\/leapGestRecog\/0' + str(i) + '\/' + j + '\/' + k).convert('L')\n                img = img.resize((320, 120))\n                arr = np.array(img)\n                x_data.append(arr) \n                count = count + 1\n            y_values = np.full((count, 1), lookup[j]) \n            y_data.append(y_values)\n            datacount = datacount + count\nx_data = np.array(x_data, dtype = 'float32')\ny_data = np.array(y_data)\ny_data = y_data.reshape(datacount, 1)","4a75d50e":"from random import randint\nfor i in range(0, 10):\n    plt.imshow(x_data[i*200, :, :])\n    plt.title(reverselookup[y_data[i*200, 0]])\n    plt.show()","7188944c":"import keras\nfrom keras.utils import to_categorical\ny_data = to_categorical(y_data)","1ac8fb04":"x_data = x_data.reshape((datacount, 120, 320, 1))\nx_data \/= 255","411704fc":"from sklearn.model_selection import train_test_split\nx_train, x_further, y_train, y_further = train_test_split(x_data, y_data, test_size=0.2, random_state=0)\nx_val, x_test, y_val, y_test = train_test_split(x_further, y_further, test_size=0.5)","d2cde57f":"from keras import layers\nfrom keras import models","70d939df":"model = models.Sequential()\n\ninput_shape=(120, 320, 1)\n\nmodel.add(layers.Conv2D(filters=32, kernel_size=5, strides=(2, 2), activation='relu', input_shape=input_shape))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(filters=64, kernel_size=3, strides=(2, 2), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(filters=64, kernel_size=3, strides=(2, 2), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))","efda8757":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = model.fit(x_train, y_train, epochs=10, batch_size=64, verbose=1, validation_data=(x_val, y_val))","ec7e800a":"final_loss, final_acc = model.evaluate(x_val, y_val, verbose=0)\nprint(\"Final loss: {0:.4f}, final accuracy: {1:.4}\".format(final_loss, final_acc))","0ce67739":"plt.plot(history.history['loss'], color='b')\nplt.plot(history.history['val_loss'], color='r')\nplt.show()\nplt.plot(history.history['accuracy'], color='b')\nplt.plot(history.history['val_accuracy'], color='r')\nplt.show()","ee3955a0":"# Import Necessary Libraries"}}