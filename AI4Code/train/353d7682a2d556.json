{"cell_type":{"90a78f0f":"code","7e1db1bd":"code","eeb27592":"code","7d4ebf84":"code","59f80fe4":"code","dc4bee58":"code","16f31a6b":"code","bdbc2200":"code","44cdf98c":"code","fbf729b1":"code","3271dc49":"code","832c992e":"code","b971bfcf":"code","d02da9b9":"code","4840e8ab":"markdown","79cdc868":"markdown","d385b20a":"markdown","dad64a01":"markdown","227a2d4e":"markdown"},"source":{"90a78f0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e1db1bd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","eeb27592":"#Read the data\ndf = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ndf.head()","7d4ebf84":"#Missing value check\ndf.info()","59f80fe4":"df.describe()","dc4bee58":"df.dtypes","16f31a6b":"#Gender Grouping\ngender_group = df['Gender'].value_counts().to_frame()\ngender_group = gender_group.reset_index()\ngender_group = gender_group.rename(columns = {'index': 'gender', 'Gender': 'total'}, inplace = False)\n\n\n#plot\nfig = px.pie(gender_group, values='total', names='gender', title='Gender Ratio',hole=.3)\nfig.show()","bdbc2200":"fig, axes = plt.subplots(1, 3, figsize=(18, 5), sharey=False)\nsns.set_style(\"white\")\n\nsns.regplot(ax=axes[0], x=\"Age\", y=\"Annual Income (k$)\", data=df)\nsns.regplot(ax=axes[1], x=\"Age\", y=\"Spending Score (1-100)\", data=df)\nsns.regplot(ax=axes[2], x=\"Spending Score (1-100)\", y=\"Annual Income (k$)\", data=df)","44cdf98c":"from sklearn.cluster import KMeans\n\n# Age - Spending Score (1-100)\nX= df.iloc[:, [2,4]].values\n\nwcss=[]\nK = range(1,9)\n\nfor k in K: \n    kmeans = KMeans(n_clusters=k, init ='k-means++', random_state=0)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)","fbf729b1":"#Choosing the right number of clusters\n\nplt.figure(figsize=(12, 6))\nsns.set_style(\"whitegrid\")\nax = sns.lineplot(x=K,y=wcss)\nax.set(xlabel=\"cluster\",ylabel=\"value\", title=\"Elbow Graph\")","3271dc49":"# Cluster number: 4\n\nkmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)\npred_y = kmeans.fit_predict(X)\n\nsns.set_style(\"white\")\nplt.figure(figsize=(12, 6))\nsns.scatterplot(x=X[:,0], y=X[:,1], s=200, alpha=.7)\nsns.scatterplot(x=kmeans.cluster_centers_[:, 0], y=kmeans.cluster_centers_[:, 1], s=600)","832c992e":"from sklearn.cluster import KMeans\n\n# Annual Income (k$) - Spending Score (1-100)\nX= df.iloc[:, [3,4]].values\n\nwcss=[]\nK = range(1,9)\n\nfor k in K: \n    kmeans = KMeans(n_clusters=k, init ='k-means++', random_state=0)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)","b971bfcf":"#Choosing the right number of clusters\n\nplt.figure(figsize=(12, 6))\nsns.set_style(\"whitegrid\")\nax = sns.lineplot(x=K,y=wcss)\nax.set(xlabel=\"cluster\",ylabel=\"value\", title=\"Elbow Graph\")","d02da9b9":"# Cluster number: 5\n\nkmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10, random_state=0)\npred_y = kmeans.fit_predict(X)\n\nsns.set_style(\"white\")\nplt.figure(figsize=(12, 6))\nsns.scatterplot(x=X[:,0], y=X[:,1], s=200, alpha=.7)\nsns.scatterplot(x=kmeans.cluster_centers_[:, 0], y=kmeans.cluster_centers_[:, 1], s=600)","4840e8ab":"# Exploration","79cdc868":"### Selected Features: Annual Income (k$) - Spending Score (1-100)","d385b20a":"# K-means Clustering","dad64a01":"### Selected Features: Age - Spending Score (1-100)","227a2d4e":"# Visualization"}}