{"cell_type":{"94965420":"code","c02230d0":"code","e7650c78":"code","c3e166d9":"code","64420f25":"code","9a806e85":"code","cefbe451":"code","0420b7e0":"code","92883118":"code","fbb6e505":"code","32f4fd8e":"code","105bfdfc":"code","d6c1a110":"code","63115acc":"code","5b3568db":"code","7b1263d3":"code","b05ade07":"code","b6c0b098":"code","17583780":"code","1ed3cee0":"code","0165ce06":"code","7518865d":"code","2cbc51de":"code","7937cd9a":"code","4a7a2fd2":"code","a8987ba2":"code","4069fcc6":"code","b0fac2bd":"markdown","0647b96e":"markdown","84b0e4c0":"markdown","87b5bae7":"markdown","30eb79eb":"markdown","a89c7e8d":"markdown","9ea79589":"markdown","a0b57613":"markdown","12e06b92":"markdown","09174b4f":"markdown","6577429d":"markdown","78102f3d":"markdown","a090d110":"markdown","509326a2":"markdown","f95e885d":"markdown","7464c43a":"markdown","d841976b":"markdown","056953f6":"markdown","b178f52e":"markdown","3b5ea535":"markdown","e859db0a":"markdown","c1009445":"markdown","91b3a7b6":"markdown","f67b3400":"markdown","d5338fbb":"markdown","2ef783b8":"markdown","80b9cf44":"markdown","987671b6":"markdown"},"source":{"94965420":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c02230d0":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","e7650c78":"df.head()","c3e166d9":"df.info()","64420f25":"df.describe()","9a806e85":"for column in df.select_dtypes(include = [\"float64\", \"int64\"]):\n  sns.distplot(df[column], color = \"#b96f99\")\n  plt.grid(True)\n  plt.show()","cefbe451":"df[\"age\"].value_counts(normalize = True).head()","0420b7e0":"(df[\"charges\"] < 15000).value_counts(normalize = True).head()","92883118":"correlation = df.corr()\ncorrelation","fbb6e505":"sns.heatmap(df.corr())\nplt.show()","32f4fd8e":"correlation[\"charges\"].sort_values(ascending = False)","105bfdfc":"sns.pairplot(df)\nplt.show()","d6c1a110":"for column in df.select_dtypes(include= [\"float64\", \"int64\"]).columns:\n  plt.figure(figsize= (5,2))\n  sns.boxplot(x= df[column], color = \"#b96f99\")\n  plt.grid(True)\n  plt.show()","63115acc":"df.notnull().all()","5b3568db":"from sklearn.impute import SimpleImputer\n\n# Take numerical features, drop dependent variable.\ndf_num = df.select_dtypes(include= [\"float64\", \"int64\"])\ndf_num_features = df_num.drop(\"charges\", axis = 1)\ndf_num_features_columns = list(df_num_features.columns)\n\n#Use imputer with strategy median.\nimputer = SimpleImputer(strategy = \"median\")\ndf_num_features = imputer.fit_transform(df_num_features)\n\n#Add features back to our first DataFrame\ndf_num_features = pd.DataFrame(df_num_features, columns = df_num_features_columns)\ndf.drop(df_num_features.columns, axis = 1, inplace=True)\ndf = pd.concat([df, df_num_features], axis = 1)","7b1263d3":"# take categorical features from our first DataFrame\ndf_cat = df.select_dtypes(include=\"object\")\n\n# See categories in each column.\nfor column in df_cat.columns:\n  print(df_cat[column].value_counts())","b05ade07":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\nencoder = OneHotEncoder()\nct = ColumnTransformer([(\"encoder\", OneHotEncoder(), df_cat.columns)])\nX = encoder.fit_transform(df.drop(columns = [\"charges\"], axis = 1, inplace = False))","b6c0b098":"# dependent variable\ny = df[\"charges\"].values","17583780":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","1ed3cee0":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train.todense())\nX_test = sc.transform(X_test.todense())","0165ce06":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = [{'n_estimators':[40, 50, 100, 200, 300], 'max_features':[6, 8, 10, 15]}, \n              {'bootstrap':[False], 'n_estimators': [3, 10], 'max_features': [2, 3,  4]}]\n\nrf_reg = RandomForestRegressor()\n\ngrid_search = GridSearchCV(rf_reg, param_grid, cv= 5, scoring = 'neg_mean_squared_error', return_train_score = True)\n\ngrid_search.fit(X_train, y_train)","7518865d":"#Parameters of best result\nprint(grid_search.best_params_)\n\n#Best Estimator\nrf_reg = grid_search.best_estimator_","2cbc51de":"cvres = grid_search.cv_results_\n\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n  #Since I used neg_mean_squared_error, we need to add minus before mean_score.\n  print(np.sqrt(-mean_score), params)","7937cd9a":"rf_reg.fit(X_train, y_train)\ny_pred = rf_reg.predict(X_test)","4a7a2fd2":"from sklearn.metrics import mean_squared_error\n\nrf_mse = mean_squared_error(y_test, y_pred)\nrf_rmse = np.sqrt(rf_mse)\nrf_rmse","a8987ba2":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(rf_reg, X_train, y_train, scoring = \"neg_mean_squared_error\", cv = 10)\nrf_rmse_scores = np.sqrt(-scores)\nprint(rf_rmse_scores)\n\nprint(\"Mean:\" , rf_rmse_scores.mean())\nprint(\"Standard Deviation:\", rf_rmse_scores.std())","4069fcc6":"from sklearn.metrics import r2_score\n\nr2_score(y_test, y_pred)","b0fac2bd":"<a id = 8><\/a>\n# Random Forest Regression\nIn random forest regression, I will use grid search to tune hyperparameters.  \nGridSearchCV will evaluate all the possible combinations of hyperparameters using cross-validation. That's why it requires utility function to score.  \nThe utility function is neg_mean_squared_error here.","0647b96e":"<a id = 7><\/a>\n# Feature Scaling","84b0e4c0":"## Statistical Analysis","87b5bae7":"For categorical feature called smoke, no is the majority.","30eb79eb":"### R2 score\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAWYAAACiCAYAAAByKGcAAAAgAElEQVR4nO2dfXBTVfrHz387v5Gk\/LE6UpHVQSgF3dI2LbKjgLMKFAQX2gIykjSF3QGatsysuqu87ArujhTcl0GH0gqILNA2lUVXHWwpwgwsI8UisIrSNyl9S5q+pC\/pS9J8f3+UnN7XNOlLuMDzmblDuDn33HNuJ5+cPPfc8zAQBEEQmoLd6QYQBEEQYkjMBEEQGoPETBAEoTFIzARBEBqDxEwQBKExSMwEQRAag8RMEAShMUjMBEEQGoPETBAEoTFIzARBEBqDxEwQBKExSMwEQRAag8RMEAShMUjMBBEi2tvbYbfbFbempiY4HA40NzfD5XINq\/6amhrk5uZi06ZNyMnJQWlpKTweDwCgsbERb7\/9Ntxut986nE4niouLkZWVhV27dqGoqAi3bt3i7+\/evRsOh2NY7SMCh8RMECGgubkZCxYsgMFgQFxcnGiLjY1FbGwsDAYDYmNjMWfOHGRmZuLy5csB1d3e3o6MjAyEh4eDMYbo6GhMnjwZjDEsXLgQDocDixcvRmJiIhe1Eh9\/\/DFiY2PBGMOECRMQHR0NnU6HyMhIfPLJJ8jNzQVjDDdv3hyty0KoQGImiBDQ09MDi8UCs9mMmTNngjHGxbl27VqsW7cO69atg9FoxJQpU8AYw7hx4\/CnP\/3Jb70ejweLFy8GYwxr1qzBrVu34HQ60dTUhC+++ALTpk3DhAkTwBhDVlaWaj3vvfcewsLCEBcXh6+++gqNjY1obW3F\/\/73P6xYsQI6nQ7jx49HbGwsWlpaRvnqEFJIzAQRQvr7+5GYmMjFXFZWJnrf6\/WitbUVJpOJlzl58qRiXW63G8uWLQNjDK+\/\/rpimZycHF5PaWmpYpmPP\/4Yer0eERERqKqqkr3f1tYGg8EAxhiMRmOQPSaGA4mZIEKIw+HA1KlTwRjD1KlTVeO1+\/fv50JNSEhAX1+frExeXh4YY5gyZQqcTqdiPY2NjZgwYQKmTp0Km80me7+5uZlL9\/jx46rtXrt2LRhj2LdvX4A9JUYCiZkgQkh5eTkX7vLly9Hf369YTjjSjYmJQXt7u+h9l8uFRYsWgTGGlJQUeL1exXpaWloQGxuLpKQkxRt\/BQUF\/DzCm3xS9u3bB8YYKisrg+gtMVxIzAQRQrKzs7kId+\/erVpOGO6wWCyy9x0OB79Rl5ycrHpTz+Fw4KmnnsLOnTsV39+yZQs\/z7Vr11Tbk5qaimeffRZtbW1D9JAYDUjMBBEivF6vKHYsjS\/7KC8v5zMsHnjgAVy9elVWRihmvV6P9957D3a7XVHQR44cQU9Pj+K5tm7dytuzZMkS3Lx5E52dnbJyFRUVOHPmTJA9JoYLiZkgQkRzczOXaUxMDJqbm2Vl7HY7XnrpJTDG8PDDD6OkpESxrr6+PiQlJXGpMsYQERGB5ORk7Nq1C2VlZX6nxvn48ssvRXXo9XrMnTsXmzZtQnFxsWIbibGHxEwQIaKiooIL8IUXXkBubi4OHDiA3NxcZGdnIzExEQ8\/\/DDGjRsHo9GI77\/\/3m99V65cwbhx40Ri9W06nQ6pqalDytnj8WDhwoWKdTDGEBcXhwsXLozmZSACgMRMECHCdwONMYbJkycjKiqKb779jz\/+eMAPlgBAcXExnnnmGVWxBjK9zePxwGQy+ZV8RUXFSLpOBAmJmSBCQH9\/P4xGI5fd5cuX0dTUhKamJtjtdnz77beIjIzkD50M9ei0EKfTiW+++QZZWVlISkriD5T4QhPl5eVD1uH1elFXVwer1Yq0tDTExMSI5Kx0A5IYO0jMBBECHA4HIiIiwBhDbGys4vzl1157bciHQYCBB0vUptn19fXhxo0bfG4yYwwffPCBalk1nE4n3njjDV7HokWL0N3dPUQvidGCxHwP0tDQgGPHjuHzzz9HY2PjnW4OAaCsrIxLLjExUVGswql0e\/fuVazH7Xbj9ddfR25urt\/z7dmzx6+Yz507h9dffx0dHR2qddhsNv5lMnfuXHR1dQ3RS2K0IDHfY+zduxdPPPEEYmJiMGHCBOj1erz99tuqDyAQoSErK2vI+ctr1qzhZXJychTL1NXV4aGHHhpSzIWFhbwupfjwxo0bERMT41fMTqeTzyJJT0\/3ez5idCEx30OcO3cO0dHR+O677+B2u9Hc3Iznn38ejDG89957d7p59y0ej0f0wMg333wjK9Pa2iqK6x48eFCxLt\/0NrXwhI\/NmzeDMYY5c+bI5Nve3o65c+ciJibG7yi4trYWer0ejDHVaXvE2EBivodYv349GGNYv349nyb12WefgTGG+Ph42WO9RGiw2+08JDBlyhTFucE1NTWim203btwAMHDTMCcnh6\/R7BOuvxFsQ0MDP19hYaHs\/Vu3bkGv1+ORRx7xG+pKT08HYwwrVqxAb29vsN0mRgCJ+R7i97\/\/PRhjWLp0Kb+r39DQwD\/sdrv9Drfw\/qKtrQ1NTU04c+YM\/xssXboUjY2Nskebq6urRdPVfOGHkydP4mc\/+xkqKyvhcrmQkJDAp7B99tlnslh1S0sLL6M2kyI\/P5+fJz09XfaF7fV6ceDAAYSFhWHatGm4fv36KF4VIhBIzBqip6cHbW1tss3pdMLpdKK9vR0dHR2qd9M9Hg+OHj0qev\/8+fNgjCEyMpLWOQgh3333HaKiohAbG8vDAYwNrLEcGxuLp556CvX19bx8V1cXVq5cycsdPnwYFy9eRGRkJFJSUgAA9fX1CA8PR0REBKKiojBu3DgkJycjJycHBw4cwJtvvsljwmlpaapt842ETSYTdDodDAYDtm3bhv379yMnJwcrVqzgq9\/Rovh3BhKzRnC5XEhNTeVZLKRZLXyvY2JisGLFCmzbti2gD82GDRvAGMOePXtC0Iuxoby8HIWFhapTxLRIZWUljEYj1q1bh7Vr12Lt2rUwm80wm81ISUnBH\/\/4R9lcZbfbjVdeeYWHIR566CEkJSXxG7dffPEFJk2ahB9++AFdXV145513EB0djf\/7v\/\/j62osWrQIRUVFqu1yOp145plnsGPHDgDAV199hRdffJEvReqbzrdlyxY0NTWN3QUi\/EJi1gjd3d144403kJKSgnnz5ok+JCkpKTCbzUhNTUVCQgJf4Eav1+Pvf\/+7ap0nT57EuHHjsHTp0rtqVobb7UZnZyfq6uqQk5ODqVOnIioqSnXN4XuNhoYG3Lx5E3V1daIvI4\/HI\/vV09LSgrq6OlRVVeHWrVsB5QsUjtQBoKOjAzabDT\/99BN++uknylCiAUjMGkO6AlleXp5Iqj09PbDb7UhOTuZlrFarrJ6KigpERETgtddeu6ukfO7cORiNRsTExOCBBx7gfYyJiblvxEwQJGaN0dnZiblz54IxhvDwcNTW1iqWO378OJfWiy++KJr2VFNTgylTpuCvf\/0rgIE7+\/\/+97\/9PumlFf7zn\/\/gl7\/8JcxmM\/7whz\/wpKIkZuJ+gsSsMXxTmXyPwar9NP3www9FK4D54oEulwvz5s3DO++8w8s2NTVh8uTJaG1tDUkfRoLX60VXVxc8Hg+6uroQHR1NYibuO0jMGsNqtXLhbtmyRbWcMPPE4sWL0d3djb6+PixbtgxRUVFIS0vDxo0bsXHjRrz88sswGAyKC6BrGRIzcb9CYtYYmZmZXLhqd9eFCTT1ej1OnToFAHj11VdVl3985ZVXglqxTAuQmIn7FRKzhujq6sKcOXN4fFl69xwYeJzWbDbzhwxOnDgBYCAEcObMGXz00Uey7dChQzh\/\/nyouzNiSMzE\/QqJWUMI1yZYsGABrl69ihs3bqCoqAgHDx7E1q1b+Uh58eLFY56DraGhAfv27RvxVlVVNazzk5iJ+xUSs4b4+OOPVUMRvm3y5Mk4depUSNbGPXLkCKKiohAdHa26xcTEYObMmapbVFQU3nrrrWFN2SMxE\/crJGYN4XtU1rf4TG1tLd\/Onj2LGTNmgDGGhISEgBJtjgZ2u51n2lDaHA6HbGtubhZtw31iTyrm4TxS7vF40NHRMeztbphiSNx7kJg1Qmdn55Dx5R07dnBxFxcX34FWhpaRitntdmPLli2IiYkZ9mYymYKSc0pKCn7+85\/f89tTTz0V7J+TCAISs0aoq6uDTqfzO39ZOHd569atd6CVoWWkYu7v78ehQ4eQmpo67E1tXWQ1srKysHz58nt+++1vfxvUdSGCg8SsEQKZv\/zmm2\/yMjt37hzzNnk8Hvzwww\/48ccfR7QNNyWRVMx3wwMyBDEakJg1gsVi8Tt\/2eVyYdGiRUMm2BxNhCP0kWzr168flZt\/JGbifoHErAF8qX588eW6ujpZGZvNhmnTpnHZHTp0iL939OhRxZj0SPF6vaiqqkJ1dfWItuHOICExE\/crJOY7iMvlQnt7O3744QfR\/OWGhgbZ49O1tbV45JFHuJg\/\/PBDAMCVK1eg0+n8rsF7t9HZ2YmOjg7Y7XZERUWBMYaZM2eipqYG7e3t6OzsvKtWzCOIYCEx3yFaW1vx7LPPwmAwIDIykgv3F7\/4BQwGA2bOnImGhgZevru7G6tWreLldu3ahZqaGrz44otYtWpVQOvw3g00NDQgKioKBoOBj5aFS3\/GxMQgKiqKMmso0N7ejrq6OthsNllcP9B8j319fWhsbERtbS3a2tpEM1Lcbjd6enpGtc2EMiTmO0RzczOMRiPPaJGSkgKj0QiTyQSTyQSLxSIbNff29sJoNPLZG75EmfeKlAHA4XBg9erV\/HoYjUbRa5PJhNWrV49J6GasOH78OPbv3x\/wduDAAdHrixcv+q3f4XBg27ZtmDdvHnQ6HaZOnYq5c+ciKysLAHD16lU8\/PDDiiEyIUVFRVi5ciUiIiKg0+kQHR2NTZs2oby8HH19fUhISLirM+HcTZCY7yBqP8e9Xq\/qQxn9\/f24desWbty4gcrKyntyBDPUAyl3Uxijurpa9EU6nM1oNKr2+fvvv0dcXBwYY0hOTuaPwZtMJuj1eqSlpWHGjBmYO3cuOjo6FOvo7+\/n66\/40kodPHgQf\/7zn2EwGDBt2jS8\/PLLYIyhpKRkLC8XcRsSM0GMIVlZWTyx6e7du3H69Gn8+OOPqKiowPbt27l8LRYLqqqqUFVVhcrKSuTn5\/ObvWpTI6uqqhAREQG9Xo+PPvpI9v6RI0dE9SvR39+PpKQkMMaQkpIiC3nU1tZy8YeHh4vCa8TYQWImiDGio6MDc+bMQXx8PG7duiV6z+12cyEyxvjSrUL27dunmjqsvb2d54bcv3+\/4vmFs32U6gCAnJwcMMYwZ84c1dkzu3fv5gtn3Yu\/0LQIiZkgxojLly+ritPhcPARcXh4OGw2m6yMbx650up8J0+e9Du9EhgYDaekpECn0yneLG1paeGrFe7du1e1HyUlJUMmbiBGFxIzQYwR27Ztw5QpU3jaLyGXLl3io+WEhAT09vbKyuTm5mLChAlobGyUvedL2GswGFRX3evv78fatWsxd+5cxVkZN27cUJwXL+X06dMUXw4xJGaCGANcLhfmz5+vGtv1hQd8Ux+VsFgseOaZZxRn56xbt44f\/\/XXXyse73a78cYbb6jWf+DAAV7H2rVrVTPcnD9\/Hi+88ILqzUNi9CExE8QYceLECcUwgzS+XFpaqnj8pUuX8N\/\/\/lfxPeG6KY8++igyMzNhtVpRW1srmj7pdrtVZ7lUVVWJZn8sXLgQubm5qKyslD1lOdz1TojhQWImiBBjt9t5fDkiIkIxvjwUp06d4k+LCreJEydiyZIlAa2l0tbWhiVLlihO0TMYDNiyZYtiGIYYe0jMBBFiysrKuACTk5OHvRj\/4cOHMW7cONX5z9u2bRuyjurqakyZMkW1joiICJoidwcgMRNEiNm5c+eoLd966dIlpKen86lz0u306dND1tHe3o53330XixYtQnh4uKwOk8l0Vz3Ucy9AYiaIENLX14fk5OQh48vB4nQ6UV1djX\/+85+itVfS09MDrqO3txf19fUoKioSLTFrMBgopBFiSMwEEUKEy7cOJ75cU1OD8+fP+y3zySefcKmazWbFm39Wq9XvKNjpdCImJobXI31AhhhbSMwEEUJKS0u57JKSkoKOL69evVp13rMPm83GQxKZmZmy90+dOgXGGCorK\/2eKzU1FYwxTJs2DQ6HI6h2EiODxEwQIWQk8eWWlhbExsYiJSXFb7nKykq\/j3pv2bIFjDG\/N\/V6e3t5yGXFihXDznRODA8SM0GEiL6+PqxcuZJL85tvvgnq+Orqai5KtYdBAOBvf\/sbXylO+lBIb28vjx\/7W9PabrfzxAz0xF\/oITETRIiw2WxcdhEREbDb7UEd71twSK\/Xo6ysTLHMhQsXMHHiROj1esUZGY2NjTzGrZZp3e12w2g08hXniNBDYiaIMaKvrw\/vv\/8+srOzkZWVhcTERNGDIOvWrcPOnTuxd+9eVFRUDFmfb81knU6H6dOno7CwEDabDW1tbWhoaMCJEycwffp06HQ6xWVAgcE1OnQ6HcaPH4\/NmzejpqYGzc3NaGlpwc2bN3kIY+HChbSa3B2CxEwQY4TvJpsvrBAXFyfahHOG1Zbl9NHa2orY2FgkJCSgvLwcCQkJfHU5g8HAR+IxMTE4fvy4aj07d+5EeHg4rly5gjfffBN6vR56vR4Gg4GvNKfX65GZmen3BiMxtpCYCWKM8Hq9qKurQ319Perr69HQ0IDGxkbZv0OlfAIG1nbeuHEjPB4PgIEckFarFVlZWTCbzXytjLa2Nr\/tef\/990Ux42+\/\/RY5OTlIT0+H2WzGrl27KJ+iBiAxEwRBaAwSM0EQhMYgMRMEQWgMEjNBEITGIDETBEFoDBIzQRCExiAxEwRBaAwSM0EQhMYgMRMEQWgMEjNBEITGIDETBEFoDBIzQRCExiAxEwRBaAwSM0EQhMYgMRMEQWgMEjNBEITGIDETBEFojDETc21tLbKzs3H69GlKfU4QBBEEYyLmmpoarFy5EmfOnEFiYiJSU1Ph9XrH4lQEQRD3HGMiZqvVigcffBAdHR04e\/YsGGNob28fi1MRBEHccwQlZo\/Hg2PHjiE\/Px95eXk4duwYjh49ivz8fBQXF8PlcgEYSPp47do1AMChQ4fw4IMPorOzc\/RbTxAEcQ8SlJjdbjf27t2L+Ph4MMawYcMG7Ny5ExaLBbNmzcLs2bNRX1\/Py\/f19SEuLg7nzp0b9YaHnLIdeOzxJ\/DY42ZYTw++3v3HJ2C02tWPsxfC+PgOlA3ztHarGY9tvxzkQYUwPv4EHnv8Cbzl78RlO\/DYkG27jLceN8NfF4ePHVbTEG30e7jg2o7wOhOElgg6lNHT04MFCxZgxowZ6Ojo4Pt\/\/PFHMMZgNpvR398Pr9eLNWvW4OzZs7h27Rr6+vpGteGhxm41cwELX4fivEGLuWxHYMfccTGPEJIxcY8StJhbWloQFhaGlJQU0WyLkpISLmaPxwOj0Yjdu3fjk08+wUsvvXTHQhl2q\/n26FY4sh0YqT2mNKrkI+Mn8JipEHZJHY+tSRp8vf0yyraLR8xl2yX1SuQhfJ8fd7vMW9JjhW1REq1gZMwFq9B+tWPe2i4Ws7xtwuvkk7PKtSvbgcdM5oG6TYUo2f4EjNZCvCVo\/+B1FNfF+2ragbdk5wMGvhyekFwL4b4dKJNKWvE63D7f9iGuK0HcYYIWc1FRERhjyMnJ4fu6u7sxf\/586HQ6XLlyBVarFbNnz8bs2bPx9NNPIzU1Fb29vaPUZLEY\/EqobIdg\/+DIr2y7oHzZjkEJ2AthlAro9gdXOHIVvhaKWTS69YlCIAy71Tx43tuCHJT3YD3C9qmPmAfEpHSMuN9DHDNU2yQj5rLtApkJr53wtaRu\/mUguGYDryVi5ucUXvuB1+IvMeHfSyGUIWq\/vC7Fvz1BaIigxbxlyxYwxrB69WqkpaUhIyMD8+bNQ2ZmJm7dugVg4CZhd3c330ZPysEhHc0OII1rDn7wRXICRIIbWswq8VIuDIlghMeKvhDUz6tcr\/D\/AkmqjpalxwzRNpGYB8QuvXaDYpWMvnm7xXIf7JP68f6\/kIYQs7T\/vG5pPzUcpiHua4ISs29kPH36dBw5cgRWqxVbt27F+PHjcfbs2bFq4zCRy2YAqVwGJSQKWUhCBEOLWV7vQGGx\/GT1b78sF2YgYpbFhwWSUROz9JhA2qYgZmk5o9UuO6f4SzFAMQuOF\/VbGJYQhjlUxCz7gpX0c\/BvRGImtElQYm5ubkZYWBhMJhN\/YKSzsxOTJk3CsmXL4PF4xqSRYgIPZQxrxKwScxytEbPiDIThiHkMRszKsyOkYlYR2ZiJWfqFN\/IRM4mZ0DpBibmgoACMMeTm5vJ9FRUVopt+WkI8chr8gAcWY1aP9arFmEU\/3311XVcbyQnivcMR87BizOJfEaoxZlHdfmLMwlhuiMQ88KtmZDFmEjOhdQIWc39\/PywWCxhjqKys5PutVisYY0hPT4fX68U777xzx2LKSijOggh0VoZKzFNNzIr1+pmVIbtRKGyD6IsjiFkZ0uP9HDMwa2KItvE+Kc\/K4H0fw1CGeGbNZYFcfaGVIGdlkJgJjROQmK1WKzZs2IDx48dDr9cjLS0NFy5cAABcvHgRer0ey5cvR05ODoxGIy1aRBAEMQICErPL5YLdbofNZoPNZkN9fT2ampr4+1evXsXmzZuxZ88eWqyIIAhihNB6zARBEBqDxEwQBKExSMwEQRAag8RMEAShMUjMBEEQGoPETBAEoTFIzARBEBojZGJ2uVzo7OyE2+0GANWHUKTlaF40QRD3G0GvLrdhwwZkZGQgIyMDGzZsQFpaGiwWC6xWq+Kj2F6vF\/v27cNzzz2H1atXw2KxoLKyEn\/5y1+4fP2VO3z48Mh7SRAEcRcRlJi9Xi8KCgowa9YsTJo0CceOHcPx48eRn5+PyMhIzJ49G93d3aLyKSkpWL58OX766Sd0dXXhiy++AGMMu3btCqjckSNHRq+3BEEQdwFBhzI6Ojrw5JNPIjExUZTHLy8vD4wx5OXl8X1FRUXQ6XRoa2vj+1wuF2bNmoXS0tKAyl2\/fj3oThEEQdzNBC3mGzduyEa8AJCeng7GGL788ku+LyMjAzNmzEB7ezvf53K5sHTpUtE+f+VcLlewTdQOF0sQrrMiXPcpTjTe6caMHZfetQ70c9UF2Ea5XrPi0m\/XsUdnxZ6Lw6z4Ysmot5UgRpOgxZyTkwPGGC5evIj+\/n709fXhxo0bmDRpEpYvXy66qedLQ7Vw4ULk5uaiqqoKXq8XPT09ojoDLXe3YbN+qiKWewk7TqwK9RcPiZm4twlKzP39\/TCbzWCM4Xe\/+x3Wr1+PxMREGAwGWK1W2UyLhoYGREZGgjHGt4yMDNlMi0DLBU3jBZh1Vsmo1Y4Tq4Qf6uvY43vv9gf2hG8EqCvBJUEdqpLlI+PBUaPN+ungvnel4ZiBNoTL6hXsv90Os9V+ux8luCQ8HxeLuC6+v\/ECzLpPYV51ux+y6yGpT2m\/BD4y5m0Wn1sqykvvWmFe9WkA5ZWvh3jELCjzbsmgmCWStVk\/FVzvAYHL\/g7CYwLsO0GEkqDE3N7ejhkzZmDZsmVobGyEw+HA1q1bERYWhmvXrike093djeLiYmzevBmTJk0CYwynTp0adrnAU0tJBHyx5PYHcwgxc2H4RHD7w3qxRPmDe1t2omNuC0AsiUHk8hio12b9VCLWocV86V2rTER7LkrbJXnPd9yqC7AJ+w\/1Uf7AF41Y8MI+K41eB88h+L9QjrfPq3Y9hGIW1SX8O6mKeaBdvC+3v6iEX8CB9p0gQk1QYlaKL1dXV4MxhqysLFHZ999\/XzRDAwCfaVFQUOC33Oeffy4rFzxqwhhKzIMCFI3YpHL0If1ZLKgjMDGL2yUUAz+\/3xGzSt+EIpK0S9wfsZzUkMZ7ByU7hJiVvjQkbVW7ToPnlJ5D8H+\/I2Yh8l9GUjEThFYISsy++LJwRkVubi4YY8jPz+f7urq6EBERIbqZBwCnTp0CYwxVVVV+yxUXF4vKDR\/hT1mflIYOZQhHeEOJWTTKlZRTl4Q4LKA28gxIzKLwhKA+pWMk5Xh4R1iHH+ELxSwdmaqJefAYSVhBIWwhDXEMHq8udb9ilvVZ4e88ZN8JIvQEJGav14uOjg4sX74cjz76KOx2O4\/\/ZmZm8tFtfX09PvroI5SXl8tmaLhcLsyfPx8ZGRl8ny+R61DlxASeJVsE\/zBKRKL4E3eAsRoxi\/F9MQQ+Yh78MpAeIx0xBzLKFjP06HXw\/8GLOZDR6WC54YyYB9sllbn6F\/BQfSeIUBOQmHNychAXF4ewsDDo9XrEx8ejrGwgo2VhYSEYY8jMzMTq1atRXFyM\/Px8PP\/884iPj0daWho2bdqEX\/\/61zCZTKIbemrlUlJSRuFRbIkIJDFmURx4JGIeRoxZLiyByCVx3EExS86hJGZh7FXWXrGo+LkUpD+aMWZlmYvrULsewv2iXybSGDP\/O98elSuIWfHvHGDfCSLUBCTmnp4etLa2oqWlBS0tLWhubha9f\/nyZRw5cgRXrlwBAD6VrqOjA4WFhcjLy0Npaals1kag5YaN2h130UyLCyMKZcjOE3C8U3k2w+BP+hLskYrJ93PcqjKr4N3r6uEPSb\/DJTe9lNovRT4rAwhGzOqzUZSvh+qsjNszVkQ3Mm9fsxOCay7sl9l6XXGUHWjfCSKU0OpyGkb9AQuCIO5lSMwahsRMEPcnJGaCIAiNQWImCILQGCRmgiAIjUFiJgiC0BgkZoIgCI1BYiYIgtAYJGaCIAiNERIxe71edHZ2yvIBKuFyudDV1cWf\/qMs2QRB3G8ELOaCggJkZmYiPT0d6enpyMzMlP0\/IyNDlgrq5s2bsFgs+M1vfoN58+YhOzsbBQUFOHr0qKhcb28vdu\/ejXnz5mHJkiVIT09HZWUlDh06NDo9JQiCuEsISMydnZ148sknsWzZMuTk5ODo0aOIjIyEXq\/H4cOHkZ+fz8falu4AAATpSURBVHP+ORwOfpwvM8nevXvR0dEBp9MJk8mEsLAw0dKhbrcbiYmJMJlMcDqd6OzsxL59+xAWFoZ\/\/etfo99rgiAIDROQmEtLS\/HSSy\/xrNitra3Q6\/VITEyE2+0GMJA9Oy4uDh0dHQAGRsDJyclISUkR1VVRUYHw8HDRGsy7du3C9OnTRaGOrq4uREZGUpZsgiDuOwIS86uvvipK8+RbyF6YyaSlpQXPPfccT6Da0tICxhi2bdsmqstms2Hx4sU8htzT04Onn34aTz\/9NHp7e3m5rq6uEWfJDnR93YDWpPC3utydRLBi3LCTkxIEoSkCEnNxcbFoKc7NmzfLMpl4PB7R\/51OJyZOnIjx48fDaDSisLAQra2tACDKfu3xeJCYmAjGGJKSkvDBBx+gsrJSVm443Bdi5utMEwRxrxD0rIyenh7Mnz8fEydOhNPp9Fv2H\/\/4B8LCwnjm67CwMHz11VeycteuXcPEiRNFWbKFo\/FhIVmnWLZPYT1epUzO4hRESmIOPMOzcAH7E8L1lRsF6xGrSVYpw7XKOtA+hOsnC+tVXtvZT8otyXWSZhz3ZcIWJ7ENLBM2QRByghZzS0uLLL7sj8rKSuTm5sJsNoMxhhkzZvA4tBDfYvkWiwV6vR6MMVy8qPTbPPDUUqIRs59MI7JszKpZp1Vy\/g2R4VkuZmmuO2HuPaX0SwPtUM0YrbTAu2i\/HSdWKZ1Dng0l0CS1StlgZNcvgEzYBEHICVrMRUVFQ45oGxoaZLMp+vv7YTQawRhDW1sbgIHZGIcPH4bH4xGVzc7OBmMMhYWFwTZPhCwxp0puPvVQhp8cekrnEOBfzJKRqEhYCmKWnttPnkKOv7x20usQwIhZuc\/SnIPBZ8ImCEJO0GL2TYu7dEl9vJOdnQ2LxSLa5\/V6kZGRgfnz5\/PYscPhgMFg4LM9fBQUFCAsLAwtLS3BNk+ETZpmSCWbtTyFVABZpwX4z\/AM+BN8QGKWjFgDSSzK65aEDmSCDEjMkvCOTjxiFh8TXCZsgiDkBJwlu6enB21tbZg9ezamT58Om80mmkUhLGsymbBgwQLRjIrvv\/8eYWFhotkd+fn5CAsLQ0VFBd\/X1taGX\/3qV9i6datKa4YZyghoxBxE1mlFlDI8+\/aPQMzDGTFLrplo5BrIiFlwDukx0hFzIKNstetEEIScgMRcVFSE+Ph4xMXF8Zt4cXFxWLNmjWjuMTDwMMqsWbNgsVgQHx\/Pnwx85JFHcPDgQVHZjIwMZGRkID4+HhaLBZmZmYiLi0N6evqoPIodfIw5mKzTkBwLSGPMilmdhyPmYcSYxfVKY8zqGbeVsoeLxSzMRC1PxBpsJmyCIOQEJGa3280zZAu3zs5OWdmenh4e5igtLUVeXh4KCgpkYYn+\/n58\/fXXAIDq6mpYrVbk5eWhvLx8pH0axDdrwc+sDGDwJ7\/Zag8u6zQA9YzXwpkWF0YWygCUZ2X4+qQ4YvYzC0LQxz3vlkhmnihkDxf1sQSXVMMf\/s6rnhmcIAgxtLrc\/U5AoRCCIEIJifl+h8RMEJqDxEwQBKExSMwEQRAag8RMEAShMUjMBEEQGoPETBAEoTFIzARBEBqDxEwQBKExSMwEQRAag8RMEAShMUjMBEEQGoPETBAEoTFIzARBEBqDxEwQBKExSMwEQRAag8RMEAShMf4fNlGaC7TilQMAAAAASUVORK5CYII=)","a89c7e8d":"## Bivariate Analysis","9ea79589":"### K-fold cross validation","a0b57613":"### Mean Squared Error\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAXEAAADMCAYAAACFpJO7AAAgAElEQVR4nO3de1hUdf4H8O+f\/ZIZ9q9EoWerNUHdnnAATcuycstLpSK4kcUAZZaCuutmmmQrrJWhPWtFKpJumqKMWppWXrOsMC+gRjcVFQKEAYbLCDPM7f37g87hnJkz9zPAoc\/rec6jMDPnfGeA93zne77n+2EghBCiWKy3G0AIISRwFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKEEKJgFOKk3zKZTKirq4PZbAYAdHZ2oqmpCXq9HjabrZdbR4g8KMRJv2S1WvH4449j4MCBeOaZZ1BZWYmnnnoK48aNQ1hYGGbNmgWr1drbzSQkaBTipF96\/fXX8eyzz2LLli1gjGHgwIHYs2cP2trasGnTJjDGsG3btt5uJiFBoxAnIdNbPV2TyYSxY8eipKQEixcvBmMM27dv52\/\/6KOPwBjDRx991CvtI0ROFOIkJBoaGjBv3jw0Njb2yvHr6+vR0dGBhx9+GJGRkWhubuZvmzNnDhhjKC8v75W2ESInCnEii9bWVtTW1uL06dNYtmwZhg4d2utBqdfroVKpMHXqVFgsFr6dw4cPR3R0NG7cuAGHw9Fr7SNEDhTiJGhtbW2YOnUqbr75ZjDG+H8ZY\/jpp596rV0HDhwAYwxvvPEG\/71vvvkGjDEsXrwYZrMZ2dnZ6Ozs7LU2EhIsCnESNLPZjCVLlmDVqlXQ6XRYvXp1nwhxbjz8u+++47\/38ssvgzGGkydP4v3338dzzz3Xa+0jRA4U4kR269ev7\/UQN5lMeOihhzBo0CC0tLTw31+0aBEYYygoKMCUKVNw6dKlXmkfIXKhECey6wsh7nA4kJOTg4KCAtH37XY7Fi9ejIyMDFRXV\/dK2wiRE4U4kV1fCHEAHk9a0glN0l9QiBPZ9ZUQJ+SPgEKcyE4Y4r\/88ktvN4eQfo1CnMiOeuLEV7QQWfAoxIns5A5xs9mMyspKXL16FVeuXOH\/raio8Gnz577uNrvdLsMrQ5zl5+ejtbW1x49rNBrx448\/4sSJE6irq+vx48uJQpzITu4Qf\/fdd\/n99daWl5cnwytDhF555RUwxvDYY4+JlkUItfPnz0Oj0SA2NhZ33nknVCoV5syZo9g3agpxIjthiO\/evTvo\/R07dgwqlcolWBctWoT169dLbgUFBSgoKOC\/3rBhA9avX49169Zhw4YNyM\/Px8KFC5GWloa0tDSMGzcO8fHxbkM8Li6uV3qM\/dXSpUvBGMOzzz4LlUqF8ePHo7a2NuTHbW5uRmxsLHQ6HcxmM1pbW\/H444+DMYbnn38+5McPBQpxIjthiG\/evFmWfa5atcolWOPj49HU1CTL\/js6OtDY2IiKigoUFhZi4sSJLm8chw4dkuVYf3RLlizBzTffzH+6OX\/+PKKjozFkyBBUVlaG9Nj79+8HYwwPPfQQ2tvbAQCXL1\/mf8ZKHFqhECeyC0WId3Z2Ijk52SXIU1NTZdm\/M4vFgvLycmi1Wv5YkyZN4hfSIoGxWCxITk7Grl27RN\/\/9ddfkZycjB9\/\/DGkc\/g\/\/fRTMMYwaNAgvgNgNBoxatQoMMZQVFQUsmOHCoU4kV0oQhzo+kOPjo52CfKNGzfKdgxndrsdOp0OarUaarUa586d8\/mxXFk4Isb1gJ11dHQEvE+Hw+Hz671v3z7Rz7G5uRlRUVFgjKGkpCTgNvQWCnEii+bmZly\/fh11dXX4z3\/+wwfse++9h5qaGtTU1ODGjRtBH2f37t1Qq9WiEI+KisIPP\/wgw7Nwb9u2bVCr1ViyZIlP9z9w4ACeffZZ0botJHR0Oh2efPLJgAqRbNu2DYwxTJs2TZErWiouxC0WC+rq6lBXV4f6+nrU1dVBr9e7fXd3R6\/Xo76+nt9HXV2d2zPkZ86cQUFBARYuXIjCwkLRokn79u3D8ePH+a9v3LgBg8EQ0GY0GgN7UXqZ2WxGSkqK1xkeKSkpshwvKyvLZd8PPPBAyF+\/VatWYfDgwaivr\/d4v927d2PQoEH45JNP+O+ZTCbo9Xo0NTXBYDCgqamJ3\/R6veR+HA4H9Ho9Ghsb+cc1Njb26EwOf924cQN6vZ7\/neaeY2NjIwwGg+RjrFYr\/zy5xzU0NPj18zQajXjggQcwceJEv7Kgra0Nw4YNw9ChQ3H9+nWfH9eXKC7Et2\/fjpEjRyIhIQGjRo3i\/01OTobJZPJpH19\/\/TXi4uKQkJDAb\/Hx8XjiiSfQ1tbG389isSAzMxOMMYSFhSEuLg4RERFQqVSYP38+ysrKMHjwYLz33nsAusJs2rRpiI+PD2ibPn16UB8pe4vdbsfevXvx\/vvvi2aHCGeG5Ofn4\/PPP5fleEajEffff79LkGdlZcmyf3c6Ojowe\/Zsj8\/j448\/hlqtxj\/+8Q\/+ezabDZmZmaLfNW5LSEhAXFwcKioqXPZVXFzM30d4\/\/vuuw8NDQ0heY7BMBqN+Pvf\/+72eWo0GtTU1Lg8bunSpfzfsvD+M2bM8OvT2w8\/\/IDIyEikpqb6NK5utVoxbdo0xMTE4OrVq\/481T5FcSF+4sQJpKWl4bnnnnMZHz169KjXx1ssFiQmJmLQoEH845KSkpCRkYGlS5fyH6esVitmzJgBxhjmzp2L2tpatLW1Qa\/XY\/fu3VCpVIiMjARjDO+\/\/z7\/mJdffhnp6elISkpyOQGXlpYGrVaLtLQ0pKenIyMjA3Fxcfx9EhIS3PbKiBj3Byt8jcPDw2WZ0uiJp3BoaGjgQ1k4HdFms+G\/\/\/0vZs+ejZkzZ4ranJSUhPnz50uO55aXlyMxMZG\/b3R0NGbMmIEPPvigTy7gZbFYkJeXh9mzZ2PcuHF8u9VqNbRaLV599VXJdu\/du1d0f41GA61Wi48\/\/tjvNnBFsFetWuX1vosXL8b06dPx22+\/AQBOnTqlyJUtFRfiQs888wxuu+02DBgwwOeeWFVVFQYMGIBJkybxvzRXrlxxud\/GjRvBGMP9998v2TsWjs1yIS7022+\/if5YpX457HY7jEYjiouL+X1VVVX5+OwJ9zMSbjExMfj11197pT3Lli0DYwybNm1ye5\/Gxka+dB1jDMXFxR73+e9\/\/xuMMbz44otobm5WzAUplZWVoimapaWlHu+fkZGB8PBwvP7660HNx29qakJcXBwiIyM9Do+sXLkSjz\/+OP\/p3Ww2495778WJEycCPnZvUXSIa7Va3H333ZgwYQIYY4iMjPQ6zzM7OxsTJkxAamqq2xAXTmfLzs52u69Zs2a5DfGamhqvIS7EBcDly5c93o+ICacAcltycnKPn6CqqalBZGQkhg4d6nbsl8MN0XE9cXfrh+zZswdqtdrj72BfZTabRR2lV155xe19V69eDZVKhZ07d8py7FdffdXj325+fj6GDBmCTZs2YevWrdi6dSvWrFmDsLAwmife07RaLWJjY7F27VqfejZtbW2477778OabbyI9Pd1tiDc2NvJX77366qtu96fT6QIOcbvdLupxnD9\/Howx6HQ6X58+QXfPyznI33rrrR5tx\/Lly73+vnCOHj3KtzMyMlJynPj8+fOIiooK2Tz4nrBmzRrRiWepmTq7du2CWq326XXzVW1tLQYPHozIyEiX4cmvv\/6a\/+TuvA0bNqxPnzR2p1+E+MWLFzF48GD+ggx380WPHj2KiIgIVFZWegxxYTDExcW5nSZWX1+PgQMHYu3atS63eQvxTz75BCNGjEBjYyOArvFUjUbjUomGeHf8+HGXqyvVarVo1lAocTMjGPPtqs7m5mb+\/owxFBYWim6\/ePEiYmJiMGnSJEWe6OZUV1fzf5eMMZw9e1Z0+7lz56BWqzFv3jxZjys88X3kyBHRbd9++y1eeOEFvPjiiy5bbm6uYoarhPpFiLe1tfHDI2q12u2Z5nnz5iE1NRWdnZ0eQ7yzsxOTJ0\/mb588eTLKysr4wBXas2cPrl275vJ9byG+bt06MMb4XpjZbEZiYiJef\/31AF+NPzZhcWZuk\/OyfE+qq6uhUqmgUql8nqbGLf7EdTy44Z8bN27gsccew9ChQyV\/35TEZrOJTvBnZmbyt126dIl\/owrFRVHz5s3zOhzaX\/SLEDcajTh06BD\/yyL10ayurg4RERE4dOgQLBYLMjIyPJ7YPHz4sGQoZGRkoLCwUDK4hZxD\/MqVKzCbzWhvb0dTUxN\/Nl74UdpsNgd0sQJxf1l+WlpayI\/N\/e7FxcX5\/HH87Nmzok8N3JohaWlpiImJwY8\/\/hjKJveYnTt3imbXNDU1wWg04vHHH\/fp\/EGgPvjgA5c3yP6q34S4wWDwOASyY8cOxMbGwmAweO2JA11TybKzsyXHzrg\/vMzMTLdTvZxDXKvV4sknn4RGo0FMTAz\/fanxUF\/YbDa89957yM\/PD2rrT2Pw3DCE888qlJflA8CGDRu8DuU5c57rvnr1aixfvhwqlUp0kZDS1dXViYZUDh06hOTkZMTExIS0YMj333\/Pd7z64px6OSk+xEeOHMlf2SX8iCocCzObzXj00Uf5M+SdnZ1ee+Kc1atXi34JnbeJEydKzi5wDvG7774bGo0GGo1GNL890BBvbm7G2LFjMXLkSI9bbGysx02r1farNT64E2XC1z4yMhLl5eUhOyZ3BalWq\/XrccJOwp133unzG45er1fUJzbhTLCRI0dCpVJh7969Ae3L1+GqS5cu8T\/7nljitjf1qxA\/d+4cf4JLeFb\/6tWriIiIQFlZGQD41BMXqq+vx5EjR\/Daa69hypQpLqG+YcMGl8c4h\/jly5dhMpnQ0dGBpqYm\/vjOIa7X630uWdXS0oLW1laft7a2NtFmNBr7VYBzpC7LHz9+vN9LM\/iKCyl\/Q\/zq1auiE7LLli3z+piysjL+ZKC\/QW4wGNDc3BzQFswaMMKhTsZYwFMJ33vvPTDGcODAAa\/3vXr1Kn+8UC9v29v6RYhzl8qbTCZ+bqpwsv+yZcvw6KOP8mf6fQlxd0uOms1m1NXVieb6Pvjggy5je95ObHJjdsIQr62txV\/\/+lecOnUq8BelBwwcONDtJxN\/t9zcXNnb5+6y\/Lfeekv22QcOh4P\/XcrIyPDrsXq9nh\/+iYuL82mtkM8++wxqtVqy4+DJhx9+iLvuuov\/NOjvNnbs2ICD\/Nq1a\/zPYObMmQHV1bTb7cjMzERUVBQuXLjg9f7Cv7\/+fu1FvwpxACgoKOB\/eAUFBWhubsZ9990n+qX3FuLt7e345z\/\/ie+++87tse12O38iTa1Wu1xp6S3EP\/74Y4wYMUI0Xrd7924w1vev2ly0aBFmz54ty7Z\/\/\/6QtLG8vFx0Wb5KpcL58+dDcizugiN\/T6KePn1adM7EV94W4JLy008\/4d1338W6desC2rZv3x7wpf7Cv8lg5u9brVafT4RWVVVRiCuBVIjX19eL5owfOHAAERERonExbyFeX18PjUbjMn\/X2ebNm\/l9CFc2BFxD3HnYxGazufRsli9fjri4OJ9PxOzZswf\/+9\/\/gto8vVEp3fvvv8+\/ye7Zsydkx+F+l\/y9MOett97ifz+8\/a4BXZ0LJS5tK7yq9syZMwHto7W11a9VDSsqKvhjeptJpnT9LsSB7jmiarUaEydOdOnleAvxuro6xMfHIykpyePxjx07BsYYBg8e7HLCxd\/L7k0mE6ZMmYL777\/fp7Hb+vp6\/N\/\/\/V\/QwxljxoyRZZ3vvqa1tRXjx493e85CTtyc\/4yMDJ+HaywWi2gOtbdV9GprazF+\/Hg8\/PDDsl2e3hOam5v5WWPR0dEBLfB26NAhaDQaTJgwwed143\/99Vf+b5NObPZh7kL8yJEjoqA6fPiw6HZfQ1ytVnus9PH222+Dsa5q3c5B6K0n7mzr1q1+9+Z+++23oLdQzdPtTRaLhT834mnNDrkUFxeDsa7F0nx9Q6yvr+fHwzUajccedltbGx544AF8+umnmDVrFkaMGKGYy8OFPeKkpCS\/T8aeOnUK8fHxKC0thUqlQmZmpk9j6lwGxMfH98vfcSHFhbjNZoPBYEBFRQXGjx8PtVqNzz\/\/HPX19fxMi9bWVv6yZuEFGBaLBS0tLairqxNNe\/rhhx9ERRmuX7\/Or50yfPhwnDt3zqWHdeXKFYwePRqMiacztre3w2Aw4OLFi6IQ\/\/HHH12KQDQ0NKCyshJvv\/02wsPDwRjDm2++2UOvZP+1ZMkSMNa1EFZP4E7c+TIU1tbWBoPBwNd6ZIxh1qxZaGxsdLt630cffYSUlBS0trYiKioKEyZMCNlMG7lwz\/ONN97gn2dOTg6ampp8brvdbkdKSgq2b9+OkpISMMawdOlSnx7LFdZOTk5W1HTMQCguxHfu3InY2FiXtTLuvPNOLF68mL8ft5KZcNrWli1b+LPtwscOHToUGo0G06ZNg9Fo5EM8JiYGd9xxB1QqFZKTk7Fx40Zs3rwZeXl5\/HKiy5Yt40\/4mM1mTJ8+HfHx8S5rnQ8dOlSyEITz8MYHH3zQ469pf8L93CdPntxj6460tLTwvw9SxR04P\/\/8M0aMGIG4uDi+piN30jU+Ph533XWX5DIBZ8+eRU1NDV+pva8vzbBv3z7Ex8cjLi6O75ww1lVGLz4+HsnJyT59YnE4HDhw4AAcDgdeeOEFMMZw8uRJr4+z2WyYOHEiGKPL7vukL7\/8Ek8\/\/TTS0tL44gpcsYX8\/Hz+fu3t7UhJSRG963\/22Wd45pln+MdmZGTw\/09LS8NLL70Es9kMvV6P4cOH4+OPP4Zer0d2drZoytqAAQMwcuRIl7FJq9WKxYsXIzU1NaDtySefVMzH5L6ouLgY4eHhGDp0aI+smSKUlpbmdfy9pKQEqampfEGQjIwMaLVavlDI0qVL3fYabTYbpk6dirCwsF5bL91Xe\/fuFf1dZWRkID09HVqtFunp6Vi9erVfM10MBgNuvfVWnz+BNDU18ZMbvK1j3h8oLsT9EcycYK7aB6e1tRXXrl3DpUuXUF1drdh6mP3V3r17oVarQ345tzvc8rKJiYkBzYP2Rq\/XIywsDFOnToXZbIZOp3N7LUN\/s337djDG8MYbb6C6uhrHjx\/3+Cawb98+MNa1\/G1\/PGnvrF+HOPljKC8vx7Bhw6BSqXps+VlnZrMZEydOxODBgwNeSsGT\/Px8MMawbds2fPvtt5g4cWK\/X9gJ6Pp0O336dKjVajQ0NCA3N9fjBWIOh4OfnfZHGZqkECeKdvnyZURHR0OlUmHXrl0hPZbD4UBxcTF++eUXydu5y8tDMSNm5cqVYIzh559\/xr333uvTuuX9AbdEc0JCAo4dO4b4+HiP5dsuXLgAtVqNKVOm9PmTv3KhECeKZTQaMWXKFDDGkJeXF\/LjcUMmngJ07ty5GDBggOxXh1qtVqSkpGDs2LH44osvZN13X3fhwgU8+OCDeOKJJzxeb+FwODBu3DioVCp89dVXPdjC3kUhThRJWHDA12lnwbhx4wYeeOAB3H\/\/\/S7XJQhx6\/eEYjzWZrMputJPMEwmk9fho7y8PDAW+qWH+xoKcRK0xsZGVFVVuYRbe3s7amtrUVtbK3v4cHPBExMTA17Tw1cGg4G\/eMiXtT\/a29sRGxuLWbNmKbLclxKdOXMGarUaK1eu7O2m9DgKcRKUa9euQaPRYMCAAXjsscf4j7sFBQWYNGkSBg4ciEGDBuHRRx\/1emm5r7geV6hrUDocDly4cIG\/fD8sLMxl1pI7RqMRu3fvDvkbDOly7do1fP75573djF5BIU4CVldXhzvuuAOJiYn8jICxY8ciJSUFERERmDt3Lr788kv+6liNRhP0\/G2dTsfPBQ\/F5dRWqxX19fU4evQotFqt6KKySZMm\/WGm9RHloBAnAVuzZg1uueUW1NTUoLCwUHT17Llz5\/j7lZaW8rddvHgx4OMdP34carUaQ4YMwdGjR1FVVYWqqip+HZjq6mrU1NTw\/+f+ra6uRm1tLf+9qqoqXLt2DRUVFbh48SJ0Oh0KCwuRlZWFmTNnulxty207duyQ42UjRFYU4iQgJpMJkydPxrRp0wB0zcrghhycZwYcPHiQD0LnJXt99dNPP2HYsGFBr9oY6DZo0KCA1vEmJNQoxElALBYLlixZgu+\/\/x5tbW38sgRSqzByY9hhYWFel+SV0tjY6LZ33FPbvHnz5HjZCJEdhTgJWmVlJcLCwsAYw\/r160W3dXR08DM7Jk6c6HdNT4fDgYMHDyI1NZVfZ4RbL0e4cWtzcOuQCDep7wlv87alpKT4tPASIb2BQpwEbceOHXyP1XkVv6qqKj7ggynNZbfbYbPZ+M1qtYo2qe9ZrVZYLBb+X+7\/njbhMYQbIX0VhTgJGlc0WqPRuMwYEQ6lcGWyduzYQcFIiEwoxElQhOPhzzzzjOg2blEobnqeyWTC2bNnwRjD6dOne6nFhPQvFOIkKMLhEue1tK9fv45BgwaBMYbVq1cD6Fp3e9y4cbSULyEyoRAnQdHpdPx4uHNV8draWkRERIAxhk8\/\/RRbtmxBRESEbKsNOhwObN68OaAZL56YTCa88847ornuhPRVFOIkKNw618nJyZK96zVr1mDAgAG45ZZbMHDgQOzfv1+2Yy9atAiMMcyePTvoNUosFgu2bNmCJUuW4KGHHuLX7iakr6MQJ0Hbv3+\/x6mDly9fhk6n83ndEV8dO3YMs2fPhl6vD3pfbW1tSEtLw5w5c\/jlbYuKimRoJSGhRSFOFE3OSubcvriivBTiRAkoxIkiffPNNzhw4EBIlnqlECdKQiFOFGflypW49957ERERgcWLF4uWe21ra\/Nrk0IhTpSEQpwoSklJCe677z40NDRg6NChSEhI4CvofP3114iNjUVcXJzLptFoXLbY2Fjs27fP5RgU4kRJKMSJYjgcDjz33HMoKipCSUkJGGNYvHix6Ha9Xu\/z1tDQIFm0gUKcKAmFOFEUrs7iSy+9BMYYSkpKZD8GF+Lbt2+Xfd+EyI1CnChOc3MzIiMjMWrUKLS3t\/PBbrVa+UIRvmxXrlyRnN1CIU6UhEKcKM7+\/fvBGMMbb7yBq1evYubMmTCZTPj2228RGxsrOf4ttY0cOVKyJ08hTpSEQpwoisPh4KsI6fV6vPTSS\/jPf\/7D397Z2enXJmQymWAymfDcc8+BMYbNmzejo6OD6mqSPo1CnCjOO++8g5tuuglLlizBU0895RLGgTAajUhKSsLIkSNx0003gTGG6OhojBw5EtnZ2SGZj06IHCjEiSLt27cPhYWF6OjokGV\/drsdn3\/+OcrLy1FVVYXq6mpUVVXhu+++o2VzSZ9GIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQpGIU4IIQrW4yFuNptx48YNWK1WAKACtIQQEgS\/Qnzz5s3IzMzEggULsGDBAlgsFsn7rV+\/HvPnz0dWVhZee+01vhr5rl27kJCQgLlz5+KJJ57A6dOnkZWVBYvFgg8\/\/BCZmZmYP38+5s+fj7lz52Lu3Lmi7xUXFwf\/jAkhpB\/xK8RLS0tRVFSEsLAwMMZw6NAhl\/s0NzfjL3\/5CxhjyM7OxpEjR2C323H48GFERkbil19+QXt7O44dOwaVSoXRo0fDbDbjzJkz2L59OxhjGD58OIqKiqDT6VBcXIy3334bt956K7KysmR74oQQ0h\/4PZxiMBgQGxuLwYMHY8aMGfywCOf111\/HggULwBjje84WiwV\/+9vfMH\/+fNF98\/PzMWrUKJjNZgBAS0sLGGO45557YDKZAAAOhwMA8N1332H69Omw2Wz+P0tCCOmnAgpxjUaDl19+GeHh4bhy5Qp\/m8lkwpNPPonNmzeLQryjowP33HMPxowZw4cz0NVrj4uL478nDHEu2Lds2YJTp06hra0Njz32GD80Q+Smh047BKk6fW83hBDih4BCPC4uDuXl5WCMIS8vj7\/t9OnT+Ne\/\/oWdO3eKQhwA5s+fD8YYxowZg1dffRVHjhxBR0eHKNS5EB81ahSamprQ1taGWbNmQafTAQBOnjzJ98yJ3CjECVGigEO8paUFjzzyCMaMGYOOjg4AwJw5c3D27FnJELfZbJgxYwYYY\/x2zz334Pr16\/x9uBBXq9VISEhATEwMGGN8iAerNGcIUnW7sOL2Ibjt9iG4LacMel161\/9vT0d3fnUF2m2\/329Fafc+uu8vfEzX\/Vfk5HbfllPmtg1S9xG1Q5eL27S7oOf2yx+\/DCsE7fTUllRtenfb9buQyt8vF6VS7dHmYoXbEHfzepTm4jZtete+tbugd\/7a6fny+9bvQurt6UjVuraHEOKfgEPcZDJh48aNYIzh1KlTaG1tRUpKCsxmM3bs2OES4gBgtVpx5swZrFmzBklJSXzPnHsTEPbE9Xo9Wlpa8PDDD\/Mhfu7cOdTX1zu1SBww\/PZ7iAh1BcrvocEF2+9BWpoj\/X+U5nYHZGmuKHS67\/d7G7hjCh8jakCuoF166LS\/3+f3UBOGsNcQ99YW\/g2iDCsEwVua093OrjcB8eshFeKeXw\/B83T6Wmr\/wjeVFZTehAQtqBBvbm6GWq2GVqvFRx99hPz8fABwCXGr1YqtW7eKToJarVZkZ2eDMQa9vuuvngtxbsYKAKxcuRIHDx4E0NXTP3nyZMBPVhRGUr3anDI4hx5cgrRb92OchyLE++5uQK7km4tely7+fqlvPXGf2uIU9l0B2vV11yeT7p05f919TDevh\/O+Jd5YnPd\/W06Z05sWISQYQYW4w+GAVqtFVFQUkpKS0NLSAsA1xDs6OvDggw\/yt3OOHTsGxhguXboEQDrEbTYbHA4HOjs7MX78eLS2tgb8ZMWh4jnEnXv2XY+T6PULgtPnsHUaXug+NtdQX5RDCA0AAAzOSURBVELcx7aU5rp+Srk9HTq96xi4pxCXfD2c35RcPmmI98c\/T8EbCSEkOH6FuNVqxfXr1xEdHY2WlhbY7XacOnUKjDFotVo4HA6YzWZs27YNjDEUFRWhs7OTn52SnZ0tukBo3bp1GDVqFH8Fp16v50O8tbUVJpOJv8KzoKAAw4cPR3t7u1Or\/BtO8S3EPQSwYL\/OvV9fQty53StK\/eiJC3qwPrfFTe\/f9fXwFOJunovHEPfWE6cQJ0QOfoX4ihUrEBUVBcYYoqOjsW\/fPnR0dCAhIQFnz55Fe3s74uLi+BOSMTExSElJQVNTE0aPHo3p06cjISEBWVlZWLJkCYYPH44TJ07w+05ISABjDOHh4UhISEBCQgJGjRrF7++hhx5ye5WoL3wLcadhF8H4rTg4f++h+hHi4h6385g493jXMXHuMV29eKkQ99aW7q9F49TC4Q9fx8SFbfUS4p7HxCnECZGDXyHe0dGB5uZmfuMCVdg7bm1thcFgQHNzMwwGA1pbW2G321FSUgIAqKiowM6dO7Fz504YDAbRvpuamjxurr1w\/\/ga4s69e\/FjBLM8\/B67drdfiIY9VuQIwlAws6RrZg23X1\/bIt6H8wnX7tkjudDp0n2anSIab\/cQ4uL9O89OoRAnRA60imFf5GEIhBBChCjE+yIKcUKIjyjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwSjECSFEwfwOcZvNBqPRyH\/Nrff9x+a++k+ojuWpjmcX54o80qTXEJeZj6sW9khbCOln\/Apxu92OefPmYcaMGdi9ezd27NiBp556CtOmTcMrr7zyB65E35MhXoYVPi3j2odC3Ed9qS2EKIVfIb5q1SqsXLkS8+bNw5\/+9Cfk5uaipaWFL8d2+vTpULVTFqU5Q5Cak9u9trZozW6nWpGCau1d63h3935FlemF1e51wrW\/pdcKdylfJqxKLyJVYV64hriX9cpzciWKQYgf61oqzqlKkuRKigE8V+HrW5qL27S5WKH10hYPa6ATQrr5FeL5+flobm7GmDFjkJaWxve8CwsLwRhDQ0NDSBrpWXDV7iUrzTiFuPNjXCsAcW0Q3s9DJXvJqvQSbeWeg6iKvPtyaa6PkS5oLKzUI+z9uhaS9vTm4u65OlUoci7HJmyX02vQ3RaJEnMeh44I+ePyK8QdDgcuX74MxhgKCgoAdNXdTEpKwiOPPAKTyRSSRspFHFKCoPAW4qJgk6oG5L7osLf6mZ4q6ThXmO+6r+eqQZJV6Z3v6VSKzrc2SLVF\/FwlK\/3cnotSlxDvfq2l29KTw1OEKJvfJzYLCgrAGENFRQUAoKmpCeHh4cjLy0NZWRm++uor2RspF3Fg+R7i3ku6uYaOKMRdqsXnotRjULn2grvb4S7EnR8j3L\/EpxWpEBcNYQiHcYS8PFdhiHOvq8twilSBZ6nXWvh6EUKk+H1iMz09Hffccw86OjoAAMXFxWCM4ddff8UTTzyBqqqqkDTUvUCr3bsPcWEY+RPizvvmg01yKMBTiMvbE3cOV0+9X8nXR+I4Us\/V5564TyEuQJWOCHHLrxA3m82YMWMGNm7cyH\/v+vXrmDBhAiZPnowvv\/xS7vbJynOIS1Wb9y\/ExSfypMbEhePWnocMAhkTF4W1YOxZHOK\/93C9hbho7Fp0FC\/P1Ycxca8h7vQcaUycELf8Hk4xmUwuUwnb29tFc8f7KrchDohnnOgCHE4RzNgQhZ9wxgbf4\/c27is1O8W1DW4fo90FXY7UrJZclAqClHvefE9aMNwi3TP+vd05udJDLj7NTpEOcbdtoeEUQtyiKzaJn+ikIyF9CYU48ROFOCF9CYU4IYQoGIU4IYQoGIU4IYQoGIU4IYQoGIU4IYQoGIU4IYQoGIU4IYQomF8hfvjwYSxYsAALFy7EggULkJWVJVq5cMOGDVi4cCEWLlyIzMxMdHZ2yt5gQggh3fwK8dLSUhQUFECtViM8PBxbt26FzWbjb\/\/ss8\/AGENiYiLWr1\/\/B670QwghPcPv4RSLxYLExEQwxnDq1CnRbcuWLcOqVasovAkhpIcENCbOrSm+bNky\/nt5eXl4+umnKcAJIaQHBRTiBoMBarUaI0aMgNFoxJEjRzBt2jSYzWa529czfKzG3iucKuEErC8\/R0JIwAIKcZvNxg+pfPjhh0hISMBvv\/0md9t6Tl8OOApxQogHAU8x\/OKLL8AYg1qt5ku1CW3ZsqVPlmrrKnzsVKX994DTuVSxB9xXXXez3ndpLm7Tpnc9RrsZm9yUMnPbFqdjdq3b7Ry+7kukua1YLwhxT+uqi5+v4LhUfZ6QPingED9z5gwYY8jLy5O8fe3atSgpKQm4Yb7zvTxbV9EBd9Xuh4iLE0hV3xFUmBEVUBZW3hFV4YFTebbugg6iajuiijhdBRzEQe\/ag3a3X7cV630KcXGdTrdViKjSDiF9RsAhnpeXJzlDBQCMRiPa29uDalgoOFeq4QPPqYRadyi6WzvbQ1Fi5+EP4dceKt3zbXMe9nA3DCK5X2fSdUTdhrhz2\/nH0BrihPRVAYW41WpFYmIioqKi0NLSIrrt+vXrmDt3rqiYct\/gGpx8b9YlKIUl0KSqrgu\/5zQk4hKo4l6y5JCHsAK92yB1JrVfwG3Fep9D3Lldnl4HQkhv8zvES0tLUVRUhD\/\/+c8YPnw4ioqK0NDQwN9eWFiIy5cvIzIyUnQ1Z+gEWu3eQ0\/cpWfOPYALaA91LiV6xV3HLYNOyz3GQ8\/W1564h\/26LwYtFeKCTxW+VpWn6vOE9Bl+hbjdbsebb76JuXPnYv78+cjKysILL7wgmlrocDiQk5ODRYsWwW63y97gYHgbE+eCrXu82n3VddHYs3BfUgHH9XCdCwQ7VaCXqjrvbkxcer8eKtY7hTj\/GFFVe\/EwUffrRdXnCemrZF8Ay2w2Y8SIEThz5gw2bNgg9+6D5tvsFOcxbalhBPEnAFFwuvRSxScrpdoiCkXBkEiqbhdWuB2+kNivu4r1oh69YGgkZ5eH2SlOwU3DKYT0ObKHeGdnJ4YNG4bU1FTU1dXJvXtCCCECIVmKtrOzs0\/OTiGEkP6G1hMnhBAFoxAnhBAFoxAnhBAFoxAnhBAFoxAnhBAFkzXEqSAEIYT0LNlC\/Nq1a\/jiiy\/k2h0hhBAfyBLilZWViI6ORkxMDA4fPizHLgkhhPgg6BBvb2+HRqPBwYMHUVVVhQcffBAnT56koRVCCOkBQYe43W4XVfZpbW2lACeEkB7iV4hfuHABO3fuhE6nQ3FxMXbs2IGamhr+9pqaGhQXF0On00Gn06G0lJZJIoSQUPIrxIuLizFv3jyEh4eDMYbnn38e5eXl\/O3ff\/89hg0bBrVajaeffhpHjhyRvcF9i39rcTuvZ+4TKpRMCPHA7+EUYaX7gwcPim6rqKjA6NGj8dNPP8Fms8nWyL7LuUybZxTihBC5BTQmzlW6T0xM5MO6srISCQkJuHz5sqwNlFNXiO4SrKUtLOqQjlStYK1s4frZoh62YB3xnFy3PXE9vzZ5V3A7f821h6rdE0KCEVCIt7S0ICoqCuHh4TAYDOjo6MCECRN6aXqhf+XZnGtGCiv7iINMXPJMVNFHqiqOMMRFgS5dC5Oq3RNC5BDw7JTU1FQwxrBu3TpMnz4dBQUFcrYrJMQB51woubt3KS6dBpcq9W6r3P\/+GHfDJs69Zap2TwgJVsAhfvLkSTDGEB4ejjfffNPjfR0OBzZt2tTrUw+dw9VdtXvh0Ie4JJnzGLhUiLsGtOvxqdo9IUQeAYd4S0uLy7i4OydOnMDzzz8fopOdfg6nCHri4mr3TiEuOVwgb0+cqt0TQoIVcIgfPHgQjDGsWrXK633b29v7xGwV8fiy9HgxAJfhFeE4uGioxc2YuFQl+xWlHsbEqdo9ISRAAYf4K6+8AsYYvv\/+e4\/3++CDD5CYmIh9+\/YFeijZlOYMQWpOrqCSvLjavSgofalyr90FXY50L1Zq5gk3TCM1O4Wq3RNCAuF3iJvNZtTU1GDs2LEIDw\/HtWvX0NnZKXnfsrIyrF69GjNnzsQ777wTdGODFdA8bUII6cP8DvHc3FzEx8dj9OjRGD16NBISElBUVCR5X4fDgba2NkRFRaG6ujroxgaLQpwQ0t\/4HeJ2ux1WqxUWi4XfPFm7di1mzpyJgoICmEymgBtKCCHEVcjLsy1fvhzLly9HdnZ2qA9FCCF\/OCEPcbvdjqNHj8Jut4f6UIQQ8odDhZIJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTBKMQJIUTB\/h98GJk1o8\/P3AAAAABJRU5ErkJggg==)","12e06b92":"## Univariate Analysis","09174b4f":"## Outliers Detection","6577429d":"## Categorical Features","78102f3d":"Firstly, let's check if there is null value or not.","a090d110":"## Correlation (Pearson)\nThis will show us linear correlation.","509326a2":"Let's see which features are correlated with charges:","f95e885d":"<a id = 3><\/a>\n# Load the dataset","7464c43a":"### Encoding\nI will use One Hot Encoder for categorical data.","d841976b":"<a id = 1><\/a>\n# Variable Description\n\nage: age of primary beneficiary (numerical)  \nsex: gender(binary: female - male)  \nbmi: body mass index  (numerical)\nchildren: number of children covered by health insurance \/ number of dependents(numerical)\nsmoker: smoking  (binary: yes - no)\nregion: the beneficiary's residential area in the US (nominal: northeast - southeast - southwest - northwest)  \ncharges: Individual medical costs billed by health insurance (numerical)\n\nCharges is the target, dependent variable.","056953f6":"<a id = 2><\/a>\n# Import Libraries","b178f52e":"## Numerical Features","3b5ea535":"There is no null value.","e859db0a":"Age and  children are discrete variables.  \nbmi and charges are continuous variables. \n\nAbove we can see that data is not evenly distributed. \n  * People with 0 children are more than others. So because of this, maybe model won't be good at predicting people with 4-5 children.\n  * People who are 18 and 19 years old, are the majority.\n  * In this dataset, charges are mostly between 1121 and 15000(%73 of our dataset)\n","c1009445":"# Introduction\n\n## Content:\n1. [Variable Description](#1)\n2. [Import Libraries](#2)\n3. [Load the Dataset](#3)\n4. [Exploratory Data Analysis](#4)\n5. [Data Preprocessing](#5)\n6. [Train Test Split](#6)\n7. [Feature Scaling](#7)\n8. [Random Forest Regression](#8)\n","91b3a7b6":"As you can see above, in our target variable(charges), there are lots of outliers.","f67b3400":"In this part, I will do imputing.\nEven though there is no null value in this dataset, I will use imputer as if there is.","d5338fbb":"<a id = 4><\/a>\n# Exploratory Data Analysis","2ef783b8":"<a id = 5><\/a>\n# Data Preprocessing","80b9cf44":"<a id = 6><\/a>\n# Train Test Split","987671b6":"See result of each combination:"}}