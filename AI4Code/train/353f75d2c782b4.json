{"cell_type":{"dd406041":"code","fef06b36":"code","a2f23b9e":"code","b4c34cdc":"code","917aec8b":"code","75b88d18":"code","28b4024e":"code","669cfdb7":"code","88c1ebc1":"code","7420b98c":"code","4dc14efd":"code","6410ef7e":"code","d5a92b6d":"code","ff05da79":"code","2177f3d7":"code","6c041f4e":"code","209acddb":"code","1a7d49d1":"code","357cf684":"code","cb81a54c":"markdown","809943d0":"markdown","2fc2db80":"markdown","086b51cb":"markdown","f8e2a52b":"markdown","350f7699":"markdown","35fa1d44":"markdown","fa9a6ae1":"markdown","e3a7ed5c":"markdown","7cdbd750":"markdown","bbed22e9":"markdown"},"source":{"dd406041":"# importing required packages\nimport os\nimport numpy as np\nimport random as rnd\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfrom PIL import Image","fef06b36":"os.listdir('..\/input\/pokemon-images-and-types')","a2f23b9e":"os.listdir('..\/input\/pokemon-images-and-types\/images\/images')[:20]","b4c34cdc":"len(os.listdir('..\/input\/pokemon-images-and-types\/images\/images'))","917aec8b":"pokemons = pd.read_csv('..\/input\/pokemon-images-and-types\/pokemon.csv')\npokemons.head(10)","75b88d18":"pokemons.nunique()","28b4024e":"def createType(row):\n    if row['Type2']=='None':\n        return row['Type1']\n    return '-'.join([row['Type1'], row['Type2'] ])","669cfdb7":"pokemons['Type2'].fillna('None', inplace=True)\npokemons['Type'] = pokemons.apply(lambda row: createType(row), axis=1)\npokemons.head(10)","88c1ebc1":"pokemons.nunique()","7420b98c":"labels = ['One type pokemons', 'Two types pokemons']\nsizes = [pokemons['Type2'].value_counts()['None'], \n         pokemons['Type2'].count() - pokemons['Type2'].value_counts()['None']]\ncolors = ['lightskyblue', 'lightcoral']\n\npatches, texts, _ = plt.pie(sizes, colors=colors, startangle=90, autopct='%1.1f%%')\nplt.legend(patches, labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","4dc14efd":"def createBarChart(data, name=''):\n    colors = {'Water': 'blue', 'Normal': 'orange', 'Grass': 'green', 'Bug': 'pink', 'Fire': 'red',\n              'Psychic': 'purple', 'Rock': 'gray', 'Electric': 'yellow', 'Poison': 'lightgreen', 'Ground': 'brown',\n              'Dark':  'darkblue', 'Fighting': 'crimson', 'Dragon': 'salmon', 'Ghost': 'orchid', \n              'Steel': 'silver', 'Ice': 'lightblue', 'Fairy': 'darkgreen', 'Flying': 'orangered', 'None': 'black'}\n    labels = [name for name in data.keys()]\n    values = [data[name] for name in data.keys()]\n    bar_colors = [colors[t.split('-')[0]] for t in labels]\n    \n    plt.bar(labels, values, color=bar_colors)\n    plt.xticks(rotation = 90)\n    plt.ylabel('Counts')\n    plt.title(name)\n    \n    plt.tight_layout()","6410ef7e":"plt.figure(2, figsize=(13, 6), edgecolor = 'k')\n\nplt.subplot(121)\ncreateBarChart(pokemons['Type1'].value_counts(), name='First type of pokemons')\n\nplt.subplot(122)\ncreateBarChart(pokemons['Type2'].value_counts().drop(['None']), name='Second type of pokemons')\n\nplt.show()","d5a92b6d":"plt.figure(18, figsize=(18, 36))\n\nfor i, key in enumerate(pokemons['Type1'].value_counts().keys()):\n    subtypes = pokemons.loc[pokemons['Type1']==key]['Type'].value_counts()\n    plt.subplot(6, 3, i + 1)\n    createBarChart(subtypes, name='{} pokemon\\'s subtypes distribution'.format(key))\n\nplt.tight_layout()\nplt.show()","ff05da79":"counts = pokemons['Type'].value_counts()\npokemons['Counts'] = [counts[x] for x in pokemons['Type']]\ndata = pd.pivot_table(data=pokemons, index='Type1', columns='Type2', values='Counts')\n\nsns.set(rc={'figure.figsize':(8,14)})\nsns.heatmap(data, cmap='coolwarm', annot=True, cbar=False, square=True, linewidths=.5)","2177f3d7":"fig = plt.figure(16, figsize=(18, 18))\n\nfor i, pic in enumerate(rnd.sample(os.listdir('..\/input\/pokemon-images-and-types\/images\/images'), 16)):\n    a = fig.add_subplot(4, 4, i + 1)\n    img = plt.imshow(mpimg.imread('..\/input\/pokemon-images-and-types\/images\/images\/{}'.format(pic)))\n    a.set_title(pic)\n    plt.grid(None)\n\nplt.show()","6c041f4e":"img = mpimg.imread('..\/input\/pokemon-images-and-types\/images\/images\/psyduck.png')\nprint(img.shape)","209acddb":"img = mpimg.imread('..\/input\/pokemon-images-and-types\/images\/images\/lurantis.jpg')\nprint(img.shape)","1a7d49d1":"images = []\n\nfill_color = (255,255,255)\n\nfor img in os.listdir('..\/input\/pokemon-images-and-types\/images\/images'):\n    im = Image.open('..\/input\/pokemon-images-and-types\/images\/images\/{}'.format(img))\n    if img.split('.')[1] == 'png':\n        im = im.convert(\"RGBA\")\n        if im.mode in ('RGBA', 'LA'):\n            bg = Image.new(im.mode[:-1], im.size, fill_color)\n            bg.paste(im, im.split()[-1]) # omit transparency\n            im = bg \n    images.append(np.array(im))","357cf684":"fig = plt.figure(16, figsize=(18, 18))\n\nfor i, pic in enumerate(rnd.sample(images, 16)):\n    a = fig.add_subplot(4, 4, i + 1)\n    img = plt.imshow(Image.fromarray(pic))\n    plt.grid(None)\n\nplt.show()","cb81a54c":"Pokemon Image Dataset contains images of 809 pokemons and one CSV-file describing them. \n\nFirst, I'm going to work with CSV-file: fill NaNs, add new column and count unique values.","809943d0":"About 50% of pokemons in this dataset do have subtype. So I can assume that our data represents quite good diversity of pokemons because subtype of the pokemon can influence its appearance. However, each pokemon has some evolutions in this dataset and this fact makes my assumption weaker.","2fc2db80":"Heatmap lets us see the whole picture of pokemons' types and subtypes distribution.\n\nSo now we can finish with CSV-file exploration and go straight to pictures of the pokemons.","086b51cb":"Thank you for your attention, I hope you liked this little data analysis!\n\nNext, I'm going to implement DCGAN for this dataset though I still have no idea about how they really work C:\n\nUpvote if you liked this kernel. See you soon!\n","f8e2a52b":"Whoops, it seems like there are PNG and JPG formats in the dataset. Before implementing DCGAN in the next kernel we shoud convert PNG-images to JPG-images because JPG-images have fewer channels.","350f7699":"With a quick look at these bars I found out at least 2 facts:\n* Two types are represented with more than 100 pokemons: Water and Normal pokemons\n* Flying subtypes can be found in each type\n\nHeatmap of types would also be useful for our exploration.","35fa1d44":"**Dataset Overview**\n\nLet's try to explore our dataset.","fa9a6ae1":"What do we have here:\n* 809 pokemons in total\n* 18 types of pokemons\n* 18 subtypes of pokemons + extra \"None\" tag for pokemons without subtype\n* 159 combinations of types and subtypes\n\nNot bad! \n\nLet's answer the next question: how many pokemons with subtype are in this dataset?","e3a7ed5c":"Now let's plot distributions of different types and subtypes.","7cdbd750":"Now we should check if conversion was correct (while expiremnting, I made lots of random samples to check it).","bbed22e9":"I'm going to submit 2 kernels on this dataset:\n1. Pokemon Image Dataset exploration with pandas, matplotlib and seaborn\n2. DCGAN implementation to create even more pokemons\n\nThis kernel is the frist one."}}