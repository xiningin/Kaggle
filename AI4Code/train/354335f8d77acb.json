{"cell_type":{"d1393629":"code","81564a02":"code","7b86cd89":"code","f71ed7b1":"code","06c07f3f":"code","f9d4cb3c":"code","b16d6472":"code","dde45b47":"code","93dd4f4b":"code","53583419":"code","052be437":"code","4c76d16f":"code","226627e5":"markdown"},"source":{"d1393629":"import numpy as np\nimport pandas as pd\nimport os","81564a02":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7b86cd89":"trainData = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\")\ntestData = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\ntrainData.head()","f71ed7b1":"print(trainData['text'].isnull().sum())\ntrainData = trainData.dropna()\n#trainData[trainData['selected_text'].isnull()] #print row with nan","06c07f3f":"trainData.shape","f9d4cb3c":"myDict = {} #store all the value\nmyDictWordCount = {} #storing all the occurences of the word\nfor _,row in trainData.iterrows():\n    text = row['text']\n    sentiment = row['sentiment']\n    wt = 0 #weight penalty ! 0 for neutral\n    if(sentiment == \"negative\"):\n        wt = -1 #weight penalty -1 for negative\n    elif(sentiment == \"positive\"):\n        wt = 1 #weight penalty +1 for negative\n    for word in text.split(\" \"):\n        key = word.lower()\n        if key not in myDict:\n            myDict[key] = wt\n            myDictWordCount[key] = 1\n        else:\n            myDict[key] = myDict[key] + wt\n            myDictWordCount[key] = myDictWordCount[key] + 1","b16d6472":"#checking the sentiment on test data\n#calculatin the score\n#plot the score for all three sentiments\n\ntestData['neutral'] = 0\ntestData['positive'] = 0\ntestData['negative'] = 0\nfor idx,row in testData.iterrows():\n    text = row['text']\n    sentiment = row['sentiment']\n    score = 0\n    for word in text.split(\" \"):\n        key = word.lower()\n        if key in myDict:\n            score = score + myDict[key]\/myDictWordCount[key]\n    testData.loc[idx,sentiment] = score","dde45b47":"testData.head()","93dd4f4b":"positiveCount = 0\nnegativeCount = 0\nneutralCount = 0\nright = 0\nfor idx,row in testData.iterrows():\n    text = row['text']\n    sentiment = row['sentiment']\n    score = 0\n    for word in text.split(\" \"):\n        key = word.lower()\n        if key in myDict:\n            score = score + myDict[key]\/myDictWordCount[key]\n    if((score > -0.5 and score < 0.5)):\n        neutralCount = neutralCount + 1\n        if(sentiment == 'neutral'):\n            right = right + 1\n    elif(score >= 0.5):\n        positiveCount = positiveCount + 1\n        if(sentiment == 'positive'):\n            right = right + 1\n    else:\n        negativeCount = negativeCount + 1\n        if(sentiment == 'negative'):\n            right = right + 1\nprint(\"+: \"+str(positiveCount) +\" -: \"+ str(negativeCount) + \" *: \"+str(neutralCount))\nprint(\"right: \"+ str(right)+ \" Score: \"+ str(right*100\/testData.shape[0]))","53583419":"for idx,row in testData.iterrows():\n    text = row['text']\n    sentiment = row['sentiment']\n    score = 0\n    for word in text.split(\" \"):\n        key = word.lower()\n        if key in myDict:\n            score = score + myDict[key]\/myDictWordCount[key]\n    if(sentiment == \"neutral\"):\n        print(\"Weight: \"+ str(score) + \"Actual: \"+ sentiment)","052be437":"testData['selected_text'] = \"\"\nfor idx,row in testData.iterrows():\n    text = row['text']\n    keysdata = {}\n    for key in text.split(\" \"):\n        if key.lower() in myDict and key != ' ':\n            keysdata[key.lower()] = abs(myDict[key.lower()]\/myDictWordCount[key.lower()])\n    ans = []\n    for v,k in keysdata.items():\n        if(k > 0.1):\n            ans.append(v)\n    testData.loc[idx,'selected_text'] = (\" \".join(ans))","4c76d16f":"testData[['textID','selected_text']].to_csv(\"submission.csv\",index=False)","226627e5":"## Ploting the score coresponding to neutral positive and negative sentiments"}}