{"cell_type":{"774b4b5c":"code","162c4718":"code","08f3244b":"code","c08c1f58":"code","d2790c91":"code","bc73fbc5":"code","7dcb295a":"code","17e959b1":"code","6db3bf13":"code","d0665217":"code","f6d88403":"code","10c152fa":"code","0092a3af":"code","1d5864a2":"code","5c777d38":"code","44126744":"code","1e949a39":"code","4e214206":"code","fe49202d":"markdown","8b4bd201":"markdown","9318ed90":"markdown","95c344e6":"markdown","21f49af8":"markdown","4904549a":"markdown"},"source":{"774b4b5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","162c4718":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","08f3244b":"import csv\nemotion_data = pd.read_csv(\"\/kaggle\/input\/eeg-brainwave-dataset-feeling-emotions\/emotions.csv\")","c08c1f58":"emotion_data","d2790c91":"sample = emotion_data.loc[0, 'fft_0_b':'fft_749_b']\n\nplt.figure(figsize=(16, 10))\nplt.plot(range(len(sample)), sample)\nplt.title(\"Features fft_0_b through fft_749_b\")\nplt.show()","bc73fbc5":"maps = dict({\"NEGATIVE\":2,\"POSITIVE\":1,\"NEUTRAL\":0})\n","7dcb295a":"y = pd.get_dummies(y)","17e959b1":"from sklearn.preprocessing import OneHotEncoder\ny = pd.get_dummies(emotion_data['label'].copy().apply(lambda x: maps[x]))\nX = emotion_data.drop('label', axis=1).copy()\n# enc = OneHotEncoder(handle_unknown='ignore')\n# y = tf.one_hot(y,3)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","6db3bf13":"import pandas as pd\nfrom sklearn import preprocessing\n\nx = X_train #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf = pd.DataFrame(x_scaled)","d0665217":"# Doesn't work when one hot encoding\nimport sklearn\nfrom sklearn.svm import SVC\nclf = SVC()\nclf.fit(df,y_train)","f6d88403":"clf.score(X_test,y_test)","10c152fa":"y_pred = clf.predict(X_test)\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred))\n# print(classification_report(y_test,y_pred))\n\n#\n       #Happy Sad Neutral\n#Happy  200    10   230\n#Sad\n#Neutral","0092a3af":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nimport keras\n\n\nmodel = models.Sequential()\nmodel.add(tf.keras.Input(shape=(X_train.shape[1],)))\nmodel.add(tf.keras.layers.Dense(2000, activation='relu'))\nmodel.add(tf.keras.layers.Dense(100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(3, activation=\"softmax\"))\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\nprint(model.summary())","1d5864a2":"model.fit(df,y_train,epochs=30,batch_size=32)","5c777d38":"import pandas as pd\nfrom sklearn import preprocessing\n\nx = X_test #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf = pd.DataFrame(x_scaled)\n\nmodel.evaluate(df,y_test)","44126744":"print(X_train.shape)\ntemp_X = tf.expand_dims(df,2)\nprint(temp_X.shape)","1e949a39":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\n\n\nmodel = models.Sequential()\nmodel.add(layers.Conv1D(16, 10, activation='relu',input_shape=(2548,1)))\nmodel.add(layers.Conv1D(16, 3, activation='relu'))\nmodel.add(layers.MaxPool1D(2))\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(100,activation=\"relu\"))\nmodel.add(layers.Dense(3,activation=\"softmax\"))\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nprint(model.summary())","4e214206":"model.fit(temp_X,y_train,epochs=32,batch_size=32)","fe49202d":"# SVM","8b4bd201":"# Neural Network","9318ed90":"Imports","95c344e6":"# Split data into training and testing","21f49af8":"# CNN","4904549a":"# Load the data"}}