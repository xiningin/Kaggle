{"cell_type":{"a7e6265f":"code","042ee46e":"code","34d5d172":"code","c72e143f":"code","1a1eb41d":"code","5d6b461a":"code","0f2f9527":"code","d24861a7":"code","faa834b8":"code","d1808e02":"code","dcd27827":"code","0672a45d":"markdown","0fed774f":"markdown","b3178e38":"markdown","1268e5b2":"markdown","25695df8":"markdown","ec90d6d8":"markdown","556de89a":"markdown","39695819":"markdown"},"source":{"a7e6265f":"import os\nimport sys\nimport zipfile\n\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image","042ee46e":"!git clone https:\/\/github.com\/recursionpharma\/rxrx1-utils\nsys.path.append('rxrx1-utils')\nimport rxrx.io as rio","34d5d172":"for folder in ['train', 'test']:\n    os.makedirs(folder)\n\n!ls","c72e143f":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)\ntrain_df.head()","1a1eb41d":"train_df.tail()","5d6b461a":"def convert_to_rgb(df, split, resize=True, new_size=400, extension='jpeg'):\n    N = df.shape[0]\n\n    for i in tqdm(range(N)):\n        code = df['id_code'][i]\n        experiment = df['experiment'][i]\n        plate = df['plate'][i]\n        well = df['well'][i]\n\n        for site in [1, 2]:\n            save_path = f'{split}\/{code}_s{site}.{extension}'\n\n            im = rio.load_site_as_rgb(\n                split, experiment, plate, well, site, \n                base_path='..\/input\/'\n            )\n            im = im.astype(np.uint8)\n            im = Image.fromarray(im)\n            \n            if resize:\n                im = im.resize((new_size, new_size), resample=Image.BILINEAR)\n            \n            im.save(save_path)","0f2f9527":"convert_to_rgb(train_df, 'train')\nconvert_to_rgb(test_df, 'test')","d24861a7":"def zip_and_remove(path):\n    ziph = zipfile.ZipFile(f'{path}.zip', 'w', zipfile.ZIP_DEFLATED)\n    \n    for root, dirs, files in os.walk(path):\n        for file in tqdm(files):\n            file_path = os.path.join(root, file)\n            ziph.write(file_path)\n            os.remove(file_path)\n    \n    ziph.close()","faa834b8":"zip_and_remove('train')\nzip_and_remove('test')","d1808e02":"def build_new_df(df, extension='jpeg'):\n    new_df = pd.concat([df, df])\n    new_df['filename'] = pd.concat([\n        df['id_code'].apply(lambda string: string + f'_s1.{extension}'),\n        df['id_code'].apply(lambda string: string + f'_s2.{extension}')\n    ])\n    \n    return new_df\n\n\nnew_train = build_new_df(train_df)\nnew_test = build_new_df(test_df)\n\nnew_train.to_csv('new_train.csv', index=False)\nnew_test.to_csv('new_test.csv', index=False)","dcd27827":"!rm -r rxrx1-utils","0672a45d":"# Preliminary","0fed774f":"Will need those folders later for storing our jpegs.","b3178e38":"# Remove the rxrx1 utils\n\nNeed to remove those, otherwise we will have an error when saving.","1268e5b2":"# Intro\n\n* This kernel lets you efficiently convert all images from their tensor format into RGB images, then save them as 400x400 JPEGs inside two zip files (`train` and `test`).\n* Feel free to customize this kernel as you wish. You can change the shape and extension of the final output image by changing the input arguments to `convert_to_rgb` and `build_new_df`.\n\n### Notes\n\n* In a previous version (V11) of the kernel, I claimed that the `rxrx.io.load_site_as_rgb` function was inefficient, and tried to provide a faster solution. It turns out I did not input the correct argument, so it was instead fetching the images directly from Google Storage; with the correct argument, the speed was comparable. **My sincere apologies for misleading everyone.**\n\n\n### Updates\n\n* V13: Changed output image size to 400 px instead of 224.\n\n### Sources\n\n* Found out about the loading functions from this kernel: https:\/\/www.kaggle.com\/jesucristo\/quick-visualization-eda","25695df8":"# Create new labels\n\nSince our data is now \"duplicated\" (as in, we have separated the sites), we have to also duplicate our labels.","ec90d6d8":"We need to also import rxrx in order to convert the tensors into images.","556de89a":"# Saving as JPEG","39695819":"# Zip everything"}}