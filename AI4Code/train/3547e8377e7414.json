{"cell_type":{"bc9667f6":"code","1f479ec5":"code","ce44e695":"code","f3ac3a1e":"code","73660ebb":"code","48684477":"code","e8ebb8e0":"code","d4534706":"code","05e537b7":"code","71ed67de":"code","3c266a25":"code","2975c9d6":"code","217b6f1a":"code","fddc8500":"code","251515c0":"code","920ef956":"code","753d6164":"code","26af2dca":"code","43ee72e4":"code","dca26c76":"code","7677a98a":"code","887e5b91":"code","ef913176":"code","c3499c43":"code","3eae734e":"code","cd1ee7d5":"code","e8861d22":"code","4d1aaad6":"code","ed9f5fcd":"code","668f38d1":"code","d77fce20":"markdown","ae4bd74c":"markdown","63f0ce89":"markdown","3abbcaf1":"markdown","38521a18":"markdown","dc12cac2":"markdown","9032307e":"markdown","55d867b2":"markdown","4bd56a73":"markdown","93e04c0c":"markdown","196f8499":"markdown","9dbe8be3":"markdown","c19cab26":"markdown","8aecfc47":"markdown","1286ea9f":"markdown","580c334d":"markdown","9417b1ae":"markdown","891c551b":"markdown","9e319a3d":"markdown","562ff96a":"markdown","db779cf8":"markdown","2fd6120a":"markdown","902ffb6e":"markdown","5f8416f0":"markdown","0241c28c":"markdown","14e27a33":"markdown","59f4c914":"markdown","5bf921df":"markdown","259ddd7f":"markdown","7fcbeb2c":"markdown","a9dedbaa":"markdown"},"source":{"bc9667f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(25, 10)})\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f479ec5":"df = pd.read_csv('\/kaggle\/input\/online-news-popularity-dataset\/OnlineNewsPopularityReduced.csv', sep=',')\ndf.head()","ce44e695":"target = df['shares']\nprint(target)","f3ac3a1e":"df[\"shares\"].hist(bins = 100)","73660ebb":"df['shares_log'] = np.log(df['shares'])\ndf['shares_log'].hist(bins = 100)","48684477":"df.info()","e8ebb8e0":"df1 = df.drop('url', axis=1)\ndf1","d4534706":"df2 = df1.drop('shares', axis=1)\ndf2","05e537b7":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\nfrom sklearn.model_selection import train_test_split\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 X, y\n# X --- \u0432\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0435\u0437 \u0442\u0430\u0440\u0433\u0435\u0442\u0430\n# y --- \u0442\u0430\u0440\u0433\u0435\u0442 (\u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f)\ny = df2[\"shares_log\"]\ndf2 = df2.drop(\"shares_log\", axis=1) \nX = df2\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=19)\nprint(X_train.head())","71ed67de":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_valid = scaler.transform(X_valid)","3c266a25":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_valid)","2975c9d6":"from sklearn.metrics import mean_squared_error, mean_absolute_error, median_absolute_error, r2_score\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","217b6f1a":"g = sns.pointplot(x=y_valid.index[:20], y=y_valid[:20], color='blue', label='True')\ng = sns.pointplot(x=y_valid.index[:20], y=y_pred[:20], color='red', label='Prediction')\ng.set_xticklabels(np.arange(20))\nplt.legend()\nplt.show()","fddc8500":"from sklearn.linear_model import Ridge\nridge = Ridge() # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e alpha=1\nridge.fit(X_train, y_train)\ny_pred = ridge.predict(X_valid)\n\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","251515c0":"from sklearn.model_selection import GridSearchCV\n\nalpha_grid = {'alpha': np.logspace(-4, 4, 20)} # 20 \u0442\u043e\u0447\u0435\u043a \u043e\u0442 10^(-4) \u0434\u043e 10^4\nridge_grid = GridSearchCV(ridge, alpha_grid, cv=5, scoring='r2') \nridge_grid.fit(X_train, y_train);\nridge_best = ridge_grid.best_estimator_\ny_pred = ridge_best.predict(X_valid)\nprint('R2:', r2_score(y_valid, y_pred))","920ef956":"# \u041f\u043e \u043e\u0441\u0438 \u0445 --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \n# \u041f\u043e \u043e\u0441\u0438 y --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \n\nresults_df = pd.DataFrame(ridge_grid.cv_results_)\nfig, ax = plt.subplots()\nax.plot(results_df['param_alpha'], results_df['mean_test_score'])\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.xlabel('alpha')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","753d6164":"from sklearn.linear_model import Lasso\nlasso = Lasso() # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e alpha=1\nlasso.fit(X_train, y_train)\ny_pred = lasso.predict(X_valid)\n\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","26af2dca":"alpha_grid = {'alpha': np.linspace(0, 1, 100)} \nlasso_grid = GridSearchCV(lasso, alpha_grid, cv=5, scoring='r2') \nlasso_grid.fit(X_train, y_train);\nlasso_best = lasso_grid.best_estimator_\ny_pred = lasso_best.predict(X_valid)\nprint('R2:', r2_score(y_valid, y_pred))","43ee72e4":"# \u041f\u043e \u043e\u0441\u0438 \u0445 --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \n# \u041f\u043e \u043e\u0441\u0438 y --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \n\nresults_df = pd.DataFrame(lasso_grid.cv_results_)\nfig, ax = plt.subplots()\nax.plot(results_df['param_alpha'], results_df['mean_test_score'])\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.xlabel('alpha')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","dca26c76":"# ElasticNet\nfrom sklearn.linear_model import ElasticNet\nenet = ElasticNet() # \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e alpha=1 l1_ratio=0.5\nenet.fit(X_train, y_train)\ny_pred = enet.predict(X_valid)\n\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","7677a98a":"grid = {'alpha': np.logspace(-3, 3, 10), \"l1_ratio\": np.linspace(0, 1, 100)} \nenet_grid = GridSearchCV(enet, grid, cv=5, scoring='r2', n_jobs=-1) \nenet_grid.fit(X_train, y_train);\nenet_best = enet_grid.best_estimator_\ny_pred = enet_best.predict(X_valid)\nprint('R2:', r2_score(y_valid, y_pred))","887e5b91":"# \u041f\u043e \u043e\u0441\u0438 \u0445 --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \n# \u041f\u043e \u043e\u0441\u0438 y --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \n\nresults_df = pd.DataFrame(enet_grid.cv_results_)\nfig, ax = plt.subplots(ncols=2, sharey=True)\nax[0].plot(grid['alpha'], results_df.groupby('param_alpha')['mean_test_score'].max())\nax[1].plot(grid['l1_ratio'], results_df.groupby('param_l1_ratio')['mean_test_score'].max())\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","ef913176":"from sklearn.neural_network import MLPRegressor\nmlp = MLPRegressor(solver='adam')\nmlp.fit(X_train, y_train)\ny_pred = mlp.predict(X_valid)\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","c3499c43":"mlp2 = MLPRegressor(solver='adam', hidden_layer_sizes=(200,), max_iter=400, alpha=0.1)\nmlp2.fit(X_train, y_train)\ny_pred = mlp2.predict(X_valid)\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","3eae734e":"mlp2.n_iter_","cd1ee7d5":"mlp3 = MLPRegressor(solver='adam', hidden_layer_sizes=(100,50,20), max_iter=400, alpha=0.1)\nmlp3.fit(X_train, y_train)\ny_pred = mlp3.predict(X_valid)\nprint('MSE:', mean_squared_error(y_valid, y_pred))\nprint('MAE:', mean_absolute_error(y_valid, y_pred))\nprint('MedAE:', median_absolute_error(y_valid, y_pred))\nprint('R2:', r2_score(y_valid, y_pred))","e8861d22":"mlp3.n_iter_","4d1aaad6":"mlp = MLPRegressor(solver='adam', max_iter=500)\nhidden = [(100,), (100, 50), (100, 50, 20), (50, 50), (50, 50, 50), (50, 30, 30, 20)]\ngrid = {'hidden_layer_sizes': hidden, \"alpha\": np.logspace(-4, 2, 10)}\nmlp_grid = GridSearchCV(mlp, grid, cv=5, scoring='r2', n_jobs=-1) \nmlp_grid.fit(X_train, y_train);\nmlp_best = mlp_grid.best_estimator_\ny_pred = mlp_best.predict(X_valid)","ed9f5fcd":"print('R2:', r2_score(y_valid, y_pred))\nprint(\"Best params:\", mlp_grid.best_params_)","668f38d1":"# \u041f\u043e \u043e\u0441\u0438 \u0445 --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \n# \u041f\u043e \u043e\u0441\u0438 y --- \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \n\nresults_df = pd.DataFrame(mlp_grid.cv_results_)\nfig, ax = plt.subplots(ncols=2, sharey=True)\nax[0].plot(grid['alpha'], results_df.groupby('param_alpha')['mean_test_score'].max())\nax[1].plot(np.array_str(np.array(hidden)).split(sep=\") (\"), results_df.groupby('param_hidden_layer_sizes')['mean_test_score'].max())\n# \u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","d77fce20":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u0441\u044c \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Kaggle. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d \u0432\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438 \u043a\u0430\u043a\u043e\u0432\u0430 \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.**","ae4bd74c":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f $L_1$ -\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.","63f0ce89":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0441\u044b\u043b\u043a\u0438 ('url'), \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043d\u0435 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0438 \u0432\u043e\u0432\u0441\u0435 \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u0440\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u044c\u0438.","3abbcaf1":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u0440\u0438\u0432\u044b\u0435","38521a18":"\u041c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c.","dc12cac2":"# \u21161","9032307e":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043c\u044f\u0433\u043a\u043e \u0433\u043e\u0432\u043e\u0440\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c, \u043d\u043e \u044d\u0442\u043e \u0437\u0430\u0439\u043c\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0443\u0441\u043f\u0435\u0445\u043e\u0432. \u0422\u0430\u043a \u0438\u043b\u0438 \u0438\u043d\u0430\u0447\u0435 \u0441 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439 \u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043f\u0440\u0430\u0432\u043b\u0438\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0438 knn, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0445.","55d867b2":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f $L_2$ -\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.","4bd56a73":"\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0440\u0433\u0435\u0440-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c. ","93e04c0c":"\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c hidden_layer_sizes \u0438 alpha","196f8499":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f StandardScaler:","9dbe8be3":"\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c alpha \u0438 l1_ratio","c19cab26":"\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u03b1","8aecfc47":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043a\u0440\u0438\u0432\u0443\u044e","1286ea9f":"\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u03b1","580c334d":"\u0422\u0430\u043a \u043a\u0430\u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u0435\u043d, \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.\n","9417b1ae":"\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 'shares', \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u043d\u0435\u0435 \u043c\u044b \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0442\u0430\u0440\u0433\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u0441\u043a\u043e\u0448\u0435\u043d\u043e \u0432\u043b\u0435\u0432\u043e.","891c551b":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","9e319a3d":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043a\u0440\u0438\u0432\u0443\u044e","562ff96a":"\u0418\u043c\u0435\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u0445 \u043e\u043d\u043b\u0430\u0439\u043d-\u0441\u0442\u0430\u0442\u0435\u0439. \u0426\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \"Shares\". \u0426\u0435\u043b\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438.","db779cf8":"\u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.","2fd6120a":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","902ffb6e":"# \u21162","5f8416f0":"**\u041f\u0440\u043e\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 (preprocessing). \u0414\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430\u043c\u0438.**","0241c28c":"**\u041a\u0430\u043a\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 target-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439? \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.**","14e27a33":"**\u0418\u0437\u0432\u043b\u0435\u043a\u0438\u0442\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (target). \u041a\u0430\u043a\u0430\u044f \u0438\u0437 \u0437\u0430\u0434\u0430\u0447 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u2013\u2013 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f?**","59f4c914":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.","5bf921df":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445","259ddd7f":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u0440\u0438\u0432\u044b\u0435","7fcbeb2c":"\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 train \u0438 validation","a9dedbaa":"\u041e\u0446\u0435\u043d\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c."}}