{"cell_type":{"c99209f7":"code","c580da84":"code","a3314bb3":"code","f5bf8d5d":"code","e9cad62c":"code","57535ece":"code","e28fc028":"code","48f87f86":"code","cad8ec6c":"code","cd067b1a":"code","c2026d97":"code","8ae8aef1":"code","e24c578a":"code","0b608690":"code","9ed0758e":"code","cf83c35a":"code","4a3cf1d0":"code","af44a6ef":"code","f20af926":"markdown","f5305e70":"markdown","ccb8c539":"markdown","986ff86d":"markdown","bff3342d":"markdown","05243245":"markdown","a87ee0ab":"markdown","f40d16c7":"markdown","ceafa294":"markdown","8dae6296":"markdown","8251905a":"markdown","0044634e":"markdown","2b540369":"markdown"},"source":{"c99209f7":"import numpy as np\nimport pandas as pd\nfrom keras import Model\nfrom keras.applications.mobilenet import MobileNet, preprocess_input\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, Callback\nfrom keras.layers import Conv2D, Reshape\nfrom keras.utils import Sequence\nfrom keras.backend import epsilon\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\n\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dropout, Dense, BatchNormalization\n\nfrom tqdm.notebook import tqdm_notebook as tqdm\n\nimport os","c580da84":"data = {}\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n    \n        if dirname == \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\" and filename != \"_DS_Store\":\n            data.update({filename:0})\n        elif dirname == \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\" and filename != \"_DS_Store\":\n            data.update({filename:1})\n            \ndata = pd.DataFrame(data.items(), columns=[\"Filename\",\"Class\"])","a3314bb3":"data.head()","f5bf8d5d":"data.tail()","e9cad62c":"print(\"The shape of the data:\",data.shape)\nprint(\"\\nThe number of different classes: \\n\\n\",data.groupby('Class').count())","57535ece":"data['Class'].value_counts().plot.bar(color=[\"blue\",\"orange\"])\n\nplt.title(\"Total count of cat and dog\")\nplt.ylabel('Number')\nplt.xlabel('Class')\nplt.show()","e28fc028":"image = load_img(\"..\/input\/cat-and-dog\/training_set\/training_set\/cats\/cat.1018.jpg\")\nplt.imshow(image)\nplt.show()","48f87f86":"images = []\n\nfor dirname, _, filenames in os.walk('..\/input\/cat-and-dog\/training_set\/training_set'):\n    for filename in filenames:\n        if filename != \"_DS_Store\":\n            images.append(os.path.join(dirname, filename))\n            \nprint(\"Total number of images:\",len(images))","cad8ec6c":"IMAGE_SIZE = 128\n\nfrom PIL import Image\nbatch_images = np.zeros((len(data[\"Class\"]), IMAGE_SIZE, IMAGE_SIZE,3), dtype=np.float32)\n\nfor i, f in tqdm(enumerate(images)):\n  #print(f)\n  img = Image.open(f)\n  img = img.resize((IMAGE_SIZE, IMAGE_SIZE))\n  img = img.convert('RGB')\n  batch_images[i] = preprocess_input(np.array(img, dtype=np.float32))\n\ny = data[\"Class\"]\ny = np.array(y)","cd067b1a":"Xtrain, Xtest, ytrain, ytest = train_test_split(batch_images, y, test_size = 0.20)","c2026d97":"mnet = MobileNetV2(include_top = False, pooling=\"max\", weights = \"imagenet\" ,input_shape=(128,128,3))\n\ndef create_model():\n  tf.keras.backend.clear_session()\n  model = Sequential([mnet,\n                      Dropout(0.5),\n                      #Dense(128, activation = \"relu\"),\n                      Dense(1, activation = \"sigmoid\")])\n  \n  model.layers[0].trainable = False\n  model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=\"accuracy\")\n\n  return model\n\nmodel = create_model()","8ae8aef1":"model.summary()","e24c578a":"#We will reduce the learning rate when then accuracy not increase for 2 steps\n\nreduce_lr = ReduceLROnPlateau(monitor='val_iou',factor=0.2,patience=2, min_lr=1e-7, verbose=1, mode=\"max\" )","0b608690":"#To prevent over fitting we will stop the learning after 3 epochs and val_loss value not decreased\n\nstop = EarlyStopping(monitor='val_iou', patience=3, mode=\"max\" )","9ed0758e":"history = model.fit(Xtrain, ytrain, epochs=10,callbacks=[stop,reduce_lr], verbose = 2, validation_data=(Xtest,ytest))","cf83c35a":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, 10, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, 10, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","4a3cf1d0":"#Creating an array of predicted test images\n\npredictions = model.predict(Xtest)","af44a6ef":"plt.figure(figsize=(12,12))\n\nstart_index = 50\n\nfor i in range(25):\n  plt.subplot(5, 5, i+1)\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  \n  preds = np.round(np.squeeze([predictions[start_index+i]]))\n  gt = ytest[start_index+i]\n\n  col = \"g\"\n  if preds != gt:\n    col =\"r\"\n\n  plt.xlabel('i={}, pred={}, gt={}'.format(start_index+i,preds,gt),color=col)\n  plt.imshow(Xtest[start_index+i], cmap=\"binary\")\n  plt.tight_layout()\n\nplt.show()","f20af926":"## Sample image","f5305e70":"### Visualising the predicted images","ccb8c539":"## Callbacks","986ff86d":"## Building and compiling of the Model","bff3342d":"## Visulazing the training","05243245":"This Kernel is for someone who wants to deep dive into Computer Vision. I have used MobileNet (transfer learning) model for classification of the images. \n\nIf you found this Kernel helpful please up vote it. If you have some feedback and question donot forget to comment below. \n\n##### Happy_Learning","a87ee0ab":"## Visualization","f40d16c7":"## Preparing training data","ceafa294":"## Import Library","8dae6296":"## Converting the images into array","8251905a":"### Predicting the test images","0044634e":"### Training the model","2b540369":"## Splitting the data into Train and Test"}}