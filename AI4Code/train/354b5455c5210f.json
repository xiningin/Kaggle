{"cell_type":{"a7aa6b93":"code","d64e389b":"code","f9c1e8a4":"code","9e7e4b8b":"code","5300e299":"code","0c444cac":"code","e2ae69cf":"code","351eaba0":"code","71454470":"code","d75c75c4":"code","2acf0306":"code","da759354":"code","53b2a195":"code","4cd133b5":"code","97097512":"code","cb770161":"code","6349d16d":"code","f76932a3":"code","8a8532d1":"code","2847910b":"code","12fb8d14":"code","4e05f07d":"code","38fdda35":"code","b460d834":"code","2e237f93":"code","a4df10ee":"code","30473d12":"code","1c5ae568":"code","da51563b":"code","0ee2b462":"code","5ce0f125":"code","3b217fe2":"code","8b88bf6c":"code","1f1863f6":"code","311c696c":"code","e539bafb":"code","dff629f3":"code","32703750":"code","e1b73ea4":"code","de9456dd":"code","e4e308a9":"code","af238b57":"code","c78b0890":"code","0c198635":"code","f1336468":"code","7698b91b":"code","277dc0cc":"code","e58899d1":"code","83bd16fb":"code","12de761e":"markdown","39c4ef3a":"markdown","05e38e41":"markdown","a564523a":"markdown","3a8659ac":"markdown","d3d8c632":"markdown","5de55075":"markdown","17009cc9":"markdown","52dae740":"markdown","6d23bfe0":"markdown","4fb104ba":"markdown"},"source":{"a7aa6b93":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly as py\n%matplotlib inline","d64e389b":"match=pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/matches.csv')","f9c1e8a4":"match","9e7e4b8b":"delivery=pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/deliveries.csv')\nnewdelivery=match.merge(delivery,left_on='id', right_on='match_id')\nnewdelivery","5300e299":"newdelivery.shape","0c444cac":"newdelivery.columns","e2ae69cf":"delivery = delivery.rename(columns = {\"match_id\" : \"id\"})","351eaba0":"delivery[['id','batsman','over','ball','batsman_runs']]","71454470":"match[['id','season']]","d75c75c4":"mergedbats=pd.merge(delivery[['id','batsman','over','ball','batsman_runs']],match[['id','season']],on='id')","2acf0306":"mergedbats=mergedbats.groupby(['batsman','season']).sum()\nmergedbats","da759354":"mergedbowl=pd.merge(delivery[['id','bowler','over','ball','player_dismissed']],match[['id','season']],on='id')\nmergedbowl = mergedbowl.groupby(['bowler', 'season']).count()\nmergedbowl","53b2a195":"#runsum is the groupby of the batsman and batsman runs, in which the runs are summed\n#ballplayed is the groupby of the batsman and batsman runs, in which the number of balls are counted\nrunsum = newdelivery.groupby('batsman')['batsman_runs'].sum().reset_index()\nballsplayed = newdelivery.groupby('batsman')['batsman_runs'].count().reset_index()","4cd133b5":"#merging the two dataframes above to a new dataframe called runsballs\nrunsballs = runsum.merge(ballsplayed, on ='batsman')\nrunsballs.rename(columns = {'batsman_runs_y':'balls_played', 'batsman_runs_x':'runs'}, inplace = True)","97097512":"#calculating strike rates\nrunsballs['strike_rate']=(runsballs['runs']\/runsballs['balls_played'])*100\nrunsballs","cb770161":"#Keeping only those players that have played over 200 balls\nrunsballs = runsballs[runsballs['balls_played']>=200]","6349d16d":"#For Z Score, calculating Mean and Standard Deviation of the strike rate\nmeanrunsballs=runsballs['strike_rate'].mean()\nstdrunsballs=runsballs['strike_rate'].std()\nrunsballs['Z Score']=(runsballs['strike_rate']-meanrunsballs)\/stdrunsballs","f76932a3":"runsballs.sort_values('strike_rate', ascending=False).head()","8a8532d1":"#Creating a copy of newdeliveries and storing it in a dataframe called bowlers\nbowlers = newdelivery.copy()","2847910b":"#Separating the bowlers that have out the batsmen by choosing dismissal kinds\nouttype = ['caught','bowled','lbw','stumped','caught and bowled','hit wicket']\nouttotal = bowlers[bowlers['dismissal_kind'].isin(outtype)] ","12fb8d14":"#Grouping the bowlers with the player dismissed and counting the numbers\nouttotal = outtotal.groupby('bowler')['player_dismissed'].count().sort_values(ascending = False).reset_index()\nouttotal.rename(columns = {'player_dismissed':'wasout'}, inplace = True)","4e05f07d":"#Calculating the runs provided by the bowlers\nrunsgiven=bowlers.groupby('bowler')['total_runs'].sum().reset_index()\nrunsgiven.rename(columns={'total_runs':'runs'}, inplace = True)","38fdda35":"runsgiven","b460d834":"ballsthrown=bowlers.groupby('bowler')['total_runs'].count().reset_index()\nballsthrown.rename(columns={'total_runs':'ballsthrown'}, inplace = True)","2e237f93":"#Now we will calculate the economy rate of the bowler\nbowlerperf= outtotal.merge(runsgiven, on ='bowler')","a4df10ee":"bowlerperf=bowlerperf.merge(ballsthrown, on = 'bowler')\nbowlerperf.head()","30473d12":"bowlerperf['economyrate']=100-(bowlerperf['runs']\/(bowlerperf['ballsthrown']\/6))\nbowlerperf=bowlerperf[bowlerperf['ballsthrown']>=200]                               ","1c5ae568":"bowlerperf.head()","da51563b":"avgbowlerperf=bowlerperf['economyrate'].mean()","0ee2b462":"stdbowlerperf=bowlerperf['economyrate'].std()\nbowlerperf['Z Score']=(bowlerperf['economyrate']-avgbowlerperf)\/stdbowlerperf","5ce0f125":"bowlerperf.sort_values('economyrate', ascending = False)","3b217fe2":"bowlerperf","8b88bf6c":"plusfif=delivery['over']>15\nlastfour=delivery[plusfif]\nlastfour.head()","1f1863f6":"lfruns=lastfour.groupby('batsman')['batsman_runs'].sum().reset_index()\nlfruns.rename(columns={'batsman_runs':'runs'},inplace=True)\nlfballs=lastfour.groupby('batsman')['batsman_runs'].count().reset_index()\nlfballs.rename(columns={'batsman_runs':'balls'}, inplace = True)\nlfbatsmanperf=lfruns.merge(lfballs, on = 'batsman')\nlfbatsmanperf=lfbatsmanperf[lfbatsmanperf['balls']>=200]\nlfbatsmanperf['strike_rate']=(lfbatsmanperf['runs']\/lfbatsmanperf['balls'])*100\navglfbatsmanperf=lfbatsmanperf['strike_rate'].mean()\nstdlfbatsmanperf=lfbatsmanperf['strike_rate'].std()\nlfbatsmanperf['Prob_Dist']= (1\/(stdlfbatsmanperf * np.sqrt(2 * np.pi)) *\n                            np.exp( - (lfbatsmanperf['strike_rate'] - avglfbatsmanperf)**2 \/(2 * stdlfbatsmanperf**2)))\nlfbatsmanperf['Z Score']=(lfbatsmanperf['strike_rate']-avglfbatsmanperf)\/stdlfbatsmanperf\nlfbatsmanperf=lfbatsmanperf.sort_values('Z Score', ascending = False).head(50)","311c696c":"lfbatsmanperf","e539bafb":"lfrunsgiven=lastfour.groupby('bowler')['total_runs'].sum().reset_index()\nlfrunsgiven.rename(columns={'total_runs':'runs'}, inplace=True)\nlfballs=lastfour.groupby('bowler')['total_runs'].count().reset_index()\nlfballs.rename(columns={'total_runs':'balls'}, inplace = True)\nlfbowlerperf=lfrunsgiven.merge(lfballs, on ='bowler')\nlfbowlerperf=lfbowlerperf[lfbowlerperf['balls']>=200]\nlfbowlerperf['economyrate']=100-(lfbowlerperf['runs']\/(lfbowlerperf['balls']\/6))\navglfbowlerperf=lfbowlerperf['economyrate'].mean()\nstdlfbowlerperf=lfbowlerperf['economyrate'].std()\nlfbowlerperf['Prob_Dist']= (1\/(stdlfbowlerperf * np.sqrt(2 * np.pi)) *\n                            np.exp( - (lfbowlerperf['economyrate'] - avglfbowlerperf)**2 \/(2 * stdlfbowlerperf**2)))\nlfbowlerperf['Z Score']=(lfbowlerperf['economyrate']-avglfbowlerperf)\/stdlfbowlerperf\nlfbowlerperf=lfbowlerperf.sort_values(\"Z Score\", ascending = False).head(50)\nlfbowlerperf\n","dff629f3":"def check(batsman_name, bowler_name): #function to check if the players are present in the list or not\n    batsmanyes=False\n    bowleryes=False\n    if batsman_name in list(runsballs['batsman'].unique()) and bowler_name in list(bowlerperf['bowler'].unique()):\n        return True","32703750":"def senddata(batsman_name, bowler_name): #function to send the respective datafrane of the player to the function\n    allbats=runsballs[runsballs['batsman']==batsman_name]\n    lfbats=lfbatsmanperf[lfbatsmanperf['batsman']==batsman_name]\n    allbowl=bowlerperf[bowlerperf['bowler']==bowler_name]\n    lfbowl=lfbowlerperf[lfbowlerperf['bowler']==bowler_name]\n    return(allbats, lfbats, allbowl, lfbowl)","e1b73ea4":"def compare(batsman_name, bowler_name):\n    if check(batsman_name, bowler_name):\n        allbats, lfbats, allbowl, lfbowl = senddata(batsman_name, bowler_name)\n        #We will check if the given player is in top 10 or not using len function\n        lenbats=len(lfbats)\n        lenbowl=len(lfbowl)\n        \n        #The variables for batsman and bowler\n        \n        varbat=0\n        varbowl=0\n        \n        #Checking in all overs\n        if allbats['Z Score'].values[0] > allbowl['Z Score'].values[0]:\n            varbat = varbat + 1\n        elif allbats['Z Score'].values[0] < allbowl['Z Score'].values[0]:\n            varbowl = varbowl + 1\n        elif allbats['Z Score'].values[0] == allbowl['Z Score'].values[0]:\n            varbat = varbat + 1\n            varbowl = varbowl + 1\n            \n        #Checkiing for last 4 overs\n        if lenbats > 0 and lenbowl > 0:\n            if allbats['Z Score'].values[0] > allbowl['Z Score'].values[0]:\n                varbat = varbat + 1\n            elif allbats['Z Score'].values[0] < allbowl['Z Score'].values[0]:\n                varbowl = varbowl + 1\n            elif allbats['Z Score'].values[0] == allbowl['Z Score'].values[0]:\n                varbat = varbat + 1\n                varbowl = varbowl + 1\n                \n        #When one player isn't in the list of top 10\n        if lenbats == 0 and lenbowl > 0:\n            varbowl = varbowl + 2\n        if lenbats > 0 and lenbowl == 0:\n            varbat = varbat + 2\n            \n        #Actual and Final Comparision\n        if varbat > varbowl:\n            print(batsman_name, 'is a better player than', bowler_name, 'in T20')\n        elif varbat < varbowl:\n            print(bowler_name, 'is a better player than', batsman_name, 'in T20')\n        elif varbat == varbowl:\n            print(batsman_name, 'and', bowler_name, 'are players of same grade.')\n    else:\n        print('Incorrect player name or one or both players have not played over 200 balls and thys cannot be compared.')\n        ","de9456dd":"compare('MS Dhoni', 'SL Malinga')","e4e308a9":"compare('V Kohli', 'SP Narine')","af238b57":"import plotly.offline as pyo\nimport plotly.graph_objs as go\ntrace = go.Scatter(x=lfbatsmanperf['strike_rate'], y = lfbatsmanperf['Prob_Dist'], mode = 'markers',\n                  text = lfbatsmanperf['batsman'], marker = {'color':'#00a65a', 'size':16})\ndata = [trace]\nlayout = go.Layout(title = 'Strike Rate vs Prob Distribution', xaxis = {'title':'Batsman Strike Rate'},\n                              yaxis = {'title':'Probability of similar batsmen'})\nfig = go.Figure(data = data, layout = layout)\nbatsmancomp = pyo.plot(fig, filename='myfile.html')\nprint(batsmancomp)","c78b0890":"trace = go.Scatter(x=lfbowlerperf['economyrate'], y = lfbowlerperf['Prob_Dist'], mode = 'markers',\n                  text = lfbowlerperf['bowler'], marker = {'color':'#00a65a', 'size':16})\ndata = [trace]\nlayout = go.Layout(title = 'Economy Rate vs Prob Distribution', xaxis = {'title':'Bowler Economy Rate'},\n                              yaxis = {'title':'Probability of similar bowlers'})\nfig = go.Figure(data = data, layout = layout)\nbowlercomp = pyo.plot(fig, filename='myfile.html')\nbowlercomp","0c198635":"def batsmansearch(batsman_name):\n    for i in range(0,len(mergedbats)):\n        if(np.array(mergedbats.iloc[i].name)[0]== batsman_name):\n            print(mergedbats.iloc[i])","f1336468":"def bowlersearch(bowler_name):\n    for i in range(0, len(mergedbowl)):\n        if(np.array(mergedbowl.iloc[i].name)[0] == bowler_name):\n            print(mergedbowl.iloc[i])","7698b91b":"def batsmanstats(batsman_name):\n    print(\"HERE IS A REPORT OF OVERALL PERFORMANCE OF: \", batsman_name)\n    print(\"******************************************\")\n    srate1 = runsballs[runsballs['batsman']==batsman_name]['strike_rate'].item()\n    srate2 = lfbatsmanperf[lfbatsmanperf['batsman']==batsman_name]['strike_rate'].item()\n    print(\"The Overall Strike Rate is: \",srate1)\n    print(\"The Overall Strike Rate in dangerous overs is: \", srate2)\n    runs2= lfbatsmanperf[lfbatsmanperf['batsman']==batsman_name]['runs'].item()\n    runs1 = runsballs[runsballs['batsman']==batsman_name]['runs'].item()\n    print(\"Total runs scored: \", runs1)\n    print(\"Total runs scored in dangerous overs: \", runs2)\n    balls1 = lfbatsmanperf[lfbatsmanperf['batsman']==batsman_name]['balls'].item()\n    balls2 = runsballs[runsballs['batsman']==batsman_name]['balls_played'].item()\n    print(\"Total balls played: \", balls2)\n    print(\"Total balls played in dangerous overs: \", balls1)\n    print(\"*******************************************\")\n    print(\"Results year wise: \")\n    batsmansearch(batsman_name)","277dc0cc":"batsmanstats('V Kohli')\n#lfbatsmanperf[lfbatsmanperf['batsman']=='V Kohli']['strike_rate'].item()","e58899d1":"def bowlerstats(bowler_name):\n    print(\"HERE IS A REPORT OF OVERALL PERFORMANCE OF: \", bowler_name)\n    print(\"******************************************\")\n    erate1 = bowlerperf[bowlerperf['bowler']==bowler_name]['economyrate'].item()\n    erate2 = lfbowlerperf[lfbowlerperf['bowler']==bowler_name]['economyrate'].item()\n    print(\"The Overall Economy Rate is: \",erate1)\n    print(\"The Overall Economy Rate in dangerous overs is: \", erate2)\n    runs2= lfbowlerperf[lfbowlerperf['bowler']==bowler_name]['runs'].item()\n    runs1 = bowlerperf[bowlerperf['bowler']==bowler_name]['runs'].item()\n    print(\"Total runs given: \", runs1)\n    print(\"Total runs given in dangerous overs: \", runs2)\n    balls1 = lfbowlerperf[lfbowlerperf['bowler']==bowler_name]['balls'].item()\n    balls2 = bowlerperf[bowlerperf['bowler']==bowler_name]['ballsthrown'].item()\n    print(\"Total overs bowled: \", balls2\/6)\n    print(\"Total overs bowled in dangerous overs: \", balls1\/6)\n    print(\"*******************************************\")\n    print(\"Results year wise: \")\n    bowlersearch(bowler_name)","83bd16fb":"bowlerstats('SL Malinga')","12de761e":"# Top Bowlers in 20 Overs","39c4ef3a":"Now, we will formulate the best batsmen and bowlers in the first 20 overs","05e38e41":"# Top Batsmen in 20 overs","a564523a":"# Comparing the palyers and Displaying  their statistics\n## The function is supposed to print a repprt card for a player by displaying their overall performance in their career and also showing year wise results","3a8659ac":"## For Bowlers","d3d8c632":"# Best 50 Bowlers in Last 4 Overs","5de55075":"# Comparision Function","17009cc9":"# Plotting the best batsmen and bowlers on Bell Curve","52dae740":"We have been successfully been able to calculate the best batsmen and bowlers in all 20 overs and also in the last 4 overs that have played over 200 balss each by using strike rates and economy rates respectively. Also, we have been able to calculate their Z Score.\n\nNow, we will aim on comparing the Z Scores of the batsmen and bowlers to check which is a better T20 player.\n\n# Idea\n* Comapring the Z Score of batsman and bowler in all 20 overs and the one who has a greater value is a better. We will increment a variable accordingly to distinguish.\n* We will apply the same rule as above to the players in last 4 overs and ddo the same thing.\n* If one of the players isn't present in the last 4 overs table then we wull increment the variable of the player in the table with 2 to give him an extra advantage.\n","6d23bfe0":"# Best 50 Batsmen in Last 4 Overs","4fb104ba":"## For Batsmen"}}