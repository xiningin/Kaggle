{"cell_type":{"e9a9f7e3":"code","768ac363":"code","b49e431f":"code","02e10ce1":"code","9512015a":"code","2eb97d09":"code","4868247d":"code","c28bb2e4":"code","46695525":"code","29e2080e":"code","bb836705":"code","9b2ad81b":"code","6e2feb60":"code","76f5c38d":"code","77e38111":"code","cddf708b":"code","95cc11a4":"code","781a8f91":"code","07325e23":"code","23b76564":"code","87ecc3b9":"code","85e17cf8":"code","9fcec1d5":"code","8c6d78f2":"code","2d494f52":"code","320f6bad":"code","58e794fa":"code","258ad590":"markdown","1e3fd995":"markdown","4072a855":"markdown","627104ce":"markdown","85acabc1":"markdown","bdc0307f":"markdown","22c0ea0a":"markdown","c06e94cf":"markdown","d049053c":"markdown","48d7f78f":"markdown","e86ebe49":"markdown","309c9cab":"markdown","f1e12857":"markdown","f9781c96":"markdown","e12420ee":"markdown","d6da9afb":"markdown"},"source":{"e9a9f7e3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n!pip install seaborn==0.11.0\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","768ac363":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf.head()","b49e431f":"df.isnull().sum()","02e10ce1":"df.shape","9512015a":"df.dtypes","2eb97d09":"df['class'].value_counts()","4868247d":"colors= ['#003f5c','#2f4b7c','#6de309','#f5b507','#a05195','#d45087','#f95d6a','#ff7c43','#ffa600','#fcca46','#a1c181','#619b8a','#15e8aa']\nfor i in df.columns:\n    plt.figure()\n    df[i].value_counts().plot.pie(textprops={'color':\"w\"},pctdistance=0.7,autopct='%.2f%%',colors=colors, figsize=(5,5),labels=None,subplots=True)\n    plt.title(\"Mushroom {} Distribution \".format(i),fontsize=17,ha='right')\n    plt.legend(labels=df[i].value_counts().index, loc=\"best\",bbox_to_anchor=(1, 0.25, 0.5, 0.5))\n    plt.show()","c28bb2e4":"for i in df.columns:\n    sns.countplot(x=i, hue=\"class\", data=df, palette =['#2f4b7c','#6de309'])\n    plt.show()\n","46695525":"sns.catplot(x=\"cap-shape\", hue=\"class\", col=\"class\",\n                data=df, kind=\"count\",\n                height=4, aspect=.7,palette =['#2f4b7c','#6de309']);","29e2080e":"df['class'] = df['class'].replace({'e':1,'p':0})","bb836705":"df.head(2)","9b2ad81b":"X = df.iloc[:,1:]\nX=pd.get_dummies(X,columns=X.columns,drop_first=True)\nX.head(2)","6e2feb60":"plt.subplots(figsize=(20,15))\ncorr = X.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\n\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);  #);","76f5c38d":"y = df['class'].values\ny","77e38111":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=52)","cddf708b":"from sklearn.linear_model import LogisticRegression\nlrg = LogisticRegression()\nlrg.fit(X_train, y_train)\ny_pred = lrg.predict(X_test)\nprint('Logistic Regression Accuracy' , accuracy_score(y_test, y_pred))","95cc11a4":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(max_depth=2, random_state=0)\nrfc.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = rfc.predict(X_test)\nprint('Random Forest Classifier Accuracy' , accuracy_score(y_test, y_pred))","781a8f91":"#sample prediction for csv file\nDecision_Tree=pd.DataFrame({'y_test':y_test,'prediction':y_pred})#df for camparison\nDecision_Tree.to_csv(\"Decision Tree.csv\")#export to csv ","07325e23":"from xgboost import XGBClassifier\nxgb=XGBClassifier()\nxgb.fit(X_train,y_train)\ny_xgb=xgb.predict(X_test)\nprint('XGBoost Accuracy' , accuracy_score(y_test,y_xgb))","23b76564":"#sample prediction for csv file\nXG_Boost=pd.DataFrame({'y_test':y_test,'prediction':y_pred})#df for camparison\nXG_Boost.to_csv(\"XGBoost.csv\") #export to csv ","87ecc3b9":"from keras.models import Sequential\nfrom keras import layers\n\ninput_dim = X_train.shape[1]\n\nmodel = Sequential()\nmodel.add(layers.Dense(10, input_dim=input_dim, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","85e17cf8":"model.compile(loss='binary_crossentropy', \n               optimizer='adam', \n               metrics=['accuracy'])\nmodel.summary()","9fcec1d5":"history = model.fit(X_train, y_train,\n                     epochs= 30,\n                     verbose=False,\n                     validation_data=(X_test, y_test),\n                     batch_size=10)","8c6d78f2":"loss, accuracy = model.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Accuracy: {:.4f}\".format(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))","2d494f52":"plt.style.use('ggplot')\n\ndef plot_history(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    x = range(1, len(acc) + 1)\n\n    plt.figure(figsize=(14, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training acc')\n    plt.plot(x, val_acc, 'r', label='Validation acc')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()","320f6bad":"plot_history(history)","58e794fa":"#sample prediction for csv file\nKeras=pd.DataFrame({'y_test':y_test,'prediction':y_pred})#df for camparison\nKeras.to_csv(\"Keras.csv\") #export to csv ","258ad590":"**About this file** :\n\n**Attribute Information**: (classes: edible=e, poisonous=p)\n\n**cap-shape**: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\n**cap-surface**: fibrous=f,grooves=g,scaly=y,smooth=s\n\n**cap-color**: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\n**bruises**: bruises=t,no=f\n\n**odor**: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\n**gill-attachment**: attached=a,descending=d,free=f,notched=n\n\n**gill-spacing**: close=c,crowded=w,distant=d\n\n**gill-size**: broad=b,narrow=n\n\n**gill-color**: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\n**stalk-shape**: enlarging=e,tapering=t\n\n**stalk-root**: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\n**stalk-surface-above-ring**: fibrous=f,scaly=y,silky=k,smooth=s\n\n**stalk-surface-below-ring**: fibrous=f,scaly=y,silky=k,smooth=s\n\n**stalk-color-above-ring**: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n**stalk-color-below-ring**: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n**veil-type**: partial=p,universal=u\n\n**veil-color**: brown=n,orange=o,white=w,yellow=y\n\n**ring-number**: none=n,one=o,two=t\n\n**ring-type**: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\n**spore-print-color**: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\n**population**: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\n**habitat**: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","1e3fd995":"![](https:\/\/wallpaperaccess.com\/full\/365722.jpg)","4072a855":"**2. Random Forest Classifier**","627104ce":"Check missing data","85acabc1":"# Mushroom Classification using Random Forest Classifier","bdc0307f":"Our data contain 8124 rows and 23 columns.","22c0ea0a":"**Load the data**","c06e94cf":"**Import the libraries**","d049053c":"We will consider that :\n\n\ne  -->  1\n           \np  -->  0","48d7f78f":"# Machine Learning Models","e86ebe49":"# Mushroom Classification By Xgboost","309c9cab":"# Mushroom Classification using keras","f1e12857":"**Understand the data**","f9781c96":"# Perform Mushroom Classification using Random Forest Classification","e12420ee":"**Split the data into train dataset and test data set**","d6da9afb":"**1. Logistic Regression**"}}