{"cell_type":{"3e8e92fa":"code","a6c53d2e":"code","140ebff4":"code","371c1488":"code","645adfc5":"code","545ff886":"code","40fa6e7f":"code","7e8c7221":"code","380d8c48":"code","47f0eabb":"code","f42d55d1":"code","15252aa2":"code","8c6cc544":"code","b89cf119":"code","df4cc07e":"code","e8d52d74":"markdown","cc106bfd":"markdown","b6769666":"markdown"},"source":{"3e8e92fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6c53d2e":"import os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import StratifiedKFold","140ebff4":"NOM_DIR = '\/kaggle\/input\/eye-disease-dataset\/normals-20210529T070049Z-001\/normals\/'\nCAT_DIR = '\/kaggle\/input\/eye-disease-dataset\/cataracts-20210529T195148Z-001\/cataracts\/'\nCSC_DIR = '\/kaggle\/input\/eye-disease-dataset\/corneal scar-20210529T070101Z-001\/corneal scar\/'","371c1488":"normal_ids = os.listdir(NOM_DIR)\ncat_ids = os.listdir(CAT_DIR)\ncsc_ids = os.listdir(CSC_DIR)","645adfc5":"normal_paths = [ os.path.join(NOM_DIR,normal_id) for normal_id in normal_ids]\ncat_paths = [ os.path.join(CAT_DIR,cat_id) for cat_id in cat_ids]\ncsc_paths = [ os.path.join(CSC_DIR,csc_id) for csc_id in csc_ids]","545ff886":"# 0 - Normal\n# 1 - cataracts\n# 2 - corneal scar\nnormal_labels = [0]*len(normal_ids)\ncat_labels = [1]*len(cat_ids)\ncsc_labels = [2]*len(csc_ids)","40fa6e7f":"image_path = normal_paths + cat_paths + csc_paths\nlabel = normal_labels + cat_labels + csc_labels","7e8c7221":"train = pd.DataFrame(list(zip(image_path, label)),columns =['image_path', 'label'])","380d8c48":"train","47f0eabb":"class CFG:\n    debug=False\n    size=64\n    epochs=10\n    batch_size=64\n    val_batch_size=128\n    seed=42\n    target_size=5\n    target_col='label'\n    n_fold=5\n    trn_fold=[0, 1, 2, 3, 4]","f42d55d1":"train['label'] = train['label'].astype(str)\nfolds = train.copy()\nFold = StratifiedKFold(n_splits=CFG.n_fold, shuffle=True, random_state=CFG.seed)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[CFG.target_col])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.groupby(['fold', CFG.target_col]).size())","15252aa2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","8c6cc544":"train_datagen = ImageDataGenerator(rescale=1.\/225,\n                                   rotation_range=20,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.1,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\nval_datagen = ImageDataGenerator(rescale=1.\/255)","b89cf119":"generator = train_datagen.flow_from_dataframe(dataframe = train,\n                                              x_col = 'image_path',\n                                              y_col = 'label',\n                                              target_size = (CFG.size, CFG.size),\n                                              color_mode = \"rgb\",\n                                              class_mode = \"categorical\",\n                                              batch_size = 1,\n                                              shuffle = True,\n                                              subset = 'training')","df4cc07e":"plt.figure(figsize=(10, 5))\nfor i in range(8):\n    batches = next(generator)  # (NumBatches, Height, Width, Channels)\n    gen_img = batches[0][0]\n\n    plt.subplot(2, 4, i + 1)\n    plt.imshow(gen_img)\n    plt.axis('off')\nplt.tight_layout()\nplt.show()","e8d52d74":"### Create training dataset","cc106bfd":"### Image Preprocessing","b6769666":"### Create Cross Validation Dataset"}}