{"cell_type":{"962165dc":"code","683162fe":"code","4871871a":"code","fbb9cbd1":"code","3e032353":"code","1a2dad9e":"code","eb99c928":"code","662525c8":"code","043d5367":"code","bb9015e6":"code","15e84152":"code","510e0041":"code","173efb66":"code","5c0a26f1":"code","99cf4661":"code","29d94f02":"code","97279a73":"code","cfd693b4":"code","8236ac79":"code","43a17827":"code","2367856c":"code","547cd9f6":"code","9695fad2":"code","58fef49b":"code","d270f44b":"code","4f6f8181":"code","3f893bd4":"code","bb7f325b":"code","54a12d28":"code","8b43e68c":"code","7b21e466":"code","0792e717":"code","2c1ff3f2":"code","d3c1f115":"code","74ec4b97":"code","7e11da25":"code","02288469":"code","7fb46e20":"code","00464e3d":"code","2406afb8":"code","ceaae63b":"code","f8a0b74e":"code","d28bff1b":"code","ecfff39a":"markdown","004f3752":"markdown","777d8ff4":"markdown","d78e0fcd":"markdown","247aadf2":"markdown","9ff8b403":"markdown","82ebdbe0":"markdown","dfa31762":"markdown","b788e33d":"markdown","f5aef02e":"markdown","51a12b9a":"markdown","8dac1b9a":"markdown","18dae529":"markdown","e47b9520":"markdown","8b800cf2":"markdown","392c1976":"markdown","1c5198fc":"markdown","d532db6c":"markdown","f173bdb7":"markdown","021c138c":"markdown","bc5fadd6":"markdown","bd67941a":"markdown"},"source":{"962165dc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","683162fe":"import chardet\nwith open(\"\/kaggle\/input\/diabetes-dataset\/diabetes2.csv\", 'rb') as rawdata:\n    result = chardet.detect(rawdata.read(2000))\n\n# check what the character encoding might be\nprint(result)","4871871a":"df = pd.read_csv('\/kaggle\/input\/diabetes-dataset\/diabetes2.csv', encoding =  'ascii')\ndf.head(11)","fbb9cbd1":"df.isnull().sum()","3e032353":"df.info()","1a2dad9e":"df.shape","eb99c928":"df.drop_duplicates(subset=None, keep='first', inplace=True)","662525c8":"df.shape # No duplicates","043d5367":"df.describe()","bb9015e6":"df.Outcome.value_counts().plot(kind='bar')\nplt.show()","15e84152":"df.groupby('Outcome').mean() # to check the average values under each column for diabetic and non diabetic","510e0041":"df[df.Outcome == 1]","173efb66":"plt.boxplot(df[df.Outcome == 1].Glucose)\nplt.show()\ndf[((df.Outcome == 1) & (df.Glucose == 0))]","5c0a26f1":"df = df[~((df.Outcome == 1) & (df.Glucose == 0))]\n\nplt.boxplot(df[df.Outcome == 1].Glucose)\nplt.show()\ndf.shape","99cf4661":"df[(df.Outcome == 0) ]","29d94f02":"plt.boxplot(df[df.Outcome == 0].Glucose)\nplt.show()","97279a73":"df[df.Outcome == 0].Glucose.describe()","cfd693b4":"Q1 = df[df.Outcome == 0].Glucose.quantile(0.25)\nQ2 = df[df.Outcome == 0].Glucose.quantile(0.75)\nIQR = Q2 - Q1\n\ndf = df[~(((df.Glucose < (Q1 - 1.5 * IQR)) |(df.Glucose > (Q2 + 1.5 * IQR))) & (df.Outcome == 0))]\n","8236ac79":"plt.boxplot(df[df.Outcome == 0].Glucose)\nplt.show()\n\ndf[df.Outcome == 0].Glucose.describe()","43a17827":"df[df.Outcome == 1].BloodPressure.describe()","2367856c":"plt.boxplot(df[df.Outcome == 1].BloodPressure)\nplt.show()","547cd9f6":"Q1 = df[df.Outcome == 1].BloodPressure.quantile(0.25)\nQ2 = df[df.Outcome == 1].BloodPressure.quantile(0.75)\nIQR = Q2 - Q1\n\ndf = df[~(((df.BloodPressure < (Q1 - 1.5 * IQR)) |(df.BloodPressure > (Q2 + 1.5 * IQR))) & (df.Outcome == 1))]\n","9695fad2":"plt.boxplot(df[df.Outcome == 1].BloodPressure)\nplt.show()","58fef49b":"print(df[df.Outcome == 1].BloodPressure.describe())\nprint(df.shape)","d270f44b":"df[df.Outcome == 0].BloodPressure.describe()","4f6f8181":"plt.boxplot(df[df.Outcome == 0].BloodPressure)\nplt.show()","3f893bd4":"Q1 = df[df.Outcome == 0].BloodPressure.quantile(0.25)\nQ2 = df[df.Outcome == 0].BloodPressure.quantile(0.75)\nIQR = Q2 - Q1\n\ndf = df[~(((df.BloodPressure < (Q1 - 1.5 * IQR)) |(df.BloodPressure > (Q2 + 1.5 * IQR))) & (df.Outcome == 0))]\n","bb7f325b":"plt.boxplot(df[df.Outcome == 0].BloodPressure)\nplt.show()","54a12d28":"df[df.Outcome == 0].BloodPressure.describe()","8b43e68c":"df.head(10)","7b21e466":"X = df.drop(columns = 'Outcome', axis = 1)\nY = df.Outcome\n\nprint(X,Y)\n","0792e717":"scaler = StandardScaler()\nStandard_data  = scaler.fit_transform(X)","2c1ff3f2":"X = Standard_data\nprint(X)\nprint(Y)","d3c1f115":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2,stratify = Y, random_state = 1)\n","74ec4b97":"print(X.shape, X_train.shape, X_test.shape)","7e11da25":"classifier1 = svm.SVC(kernel='linear')\nclassifier1.fit(X_train, Y_train)","02288469":"X_train_predict = classifier1.predict(X_train)\ntraining_data_accuracy = accuracy_score(X_train_predict, Y_train)\ntraining_data_accuracy","7fb46e20":"X_test_predict = classifier1.predict(X_test)\n\ntest_data_accuracy = accuracy_score(X_test_predict, Y_test)\n\ntest_data_accuracy","00464e3d":"input_data1 = (6,148,72,35,0,33.6,0.627,50)\ninput_data2 = (1,85,66,29,0,26.6,0.351,31)\n\n#Changing Input Data As Numpy Array\ninput_data_array = np.asarray(input_data1)\n\n# Reshape the data as we are predicting for only one instance\ninput_data_reshape = input_data_array.reshape(1,-1)\n\n# Standardize the data\nstd_data = scaler.transform(input_data_reshape)\n\n# Prediction\nprediction = classifier1.predict(std_data)\n#print(prediction)\n\nif prediction == 0:\n    print('Person is Not Diabetic')\nelse:\n    print('Person is Diabetic')","2406afb8":"classifier2 = LogisticRegression()\n\n\nclassifier2.fit(X_train, Y_train)","ceaae63b":"X_train_predict = classifier2.predict(X_train)\n\ntraining_data_accuracy = accuracy_score(X_train_predict, Y_train)\n\nprint(training_data_accuracy)","f8a0b74e":"X_test_predict = classifier2.predict(X_test)\n\ntest_data_accuracy = accuracy_score(X_test_predict, Y_test)\n\nprint(test_data_accuracy)","d28bff1b":"input_data1 = (6,148,72,35,0,33.6,0.627,50)\ninput_data2 = (1,85,66,29,0,26.6,0.351,31)\n\n#Changing Input Data As Numpy Array\ninput_data_array = np.asarray(input_data2)\n\n# Reshape the data as we are predicting for only one instance\ninput_data_reshape = input_data_array.reshape(1,-1)\n\n# Standardize the data\nstd_data = scaler.transform(input_data_reshape)\n\n# Prediction\nprediction = classifier2.predict(std_data)\n#print(prediction)\n\nif prediction == 0:\n    print('Person is Not Diabetic')\nelse:\n    print('Person is Diabetic')","ecfff39a":"***Train Test Split***","004f3752":"**Predicting Model**","777d8ff4":"**Model Evaluation**","d78e0fcd":"**Test Model**","247aadf2":"**Determining Accuracy Score**","9ff8b403":"**Model Evaluation**","82ebdbe0":"**Check out for non-diabatic person**","dfa31762":"**(1) SVM Classifier**","b788e33d":"**(2) Logistic Regression**","f5aef02e":"**Check out for non-diabatic women**","51a12b9a":"**Check out the data in Glucose Column**","8dac1b9a":"**Determining Accuracy Score**","18dae529":"**Predicting Model**","e47b9520":"**Check out for diabatic women**","8b800cf2":"**Separating the dataset**","392c1976":"**Train the Model**","1c5198fc":"To remove any duplicates in the dataset","d532db6c":"**We have to remove the Outliers else it would affect the output, As it is observed that women who are diabatic have an mean glucose of 140+ this indicates that the glucose is high for diabitic patients and hence it cannot be 0. And this data should be removed**","f173bdb7":"****Check out for diabatic person****","021c138c":"**Train the Model**","bc5fadd6":"**Check out the data in BloodPressure Column**\n","bd67941a":"**Data Standardization**"}}