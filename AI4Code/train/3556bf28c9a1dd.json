{"cell_type":{"b8c337f6":"code","f5f2d627":"code","d4e724dc":"code","f5971a53":"code","5534545e":"code","6a200eaf":"code","f5e037e0":"code","1d507695":"code","cd442571":"code","892c05d9":"code","c311be3a":"code","70c841de":"code","df7ea94f":"code","db3baa8f":"code","28bcd1cf":"code","c5b15f6f":"code","8c7d8c1b":"code","b1b53148":"code","8794a68d":"code","8f2be76c":"code","abb56e84":"code","10b45ed1":"code","a303c280":"code","8ba2533d":"code","175842a9":"code","43e18c98":"code","a9bd1c53":"code","a7e4d5a7":"code","92829e13":"code","5a8d7bea":"markdown","c91523fe":"markdown","b977cec2":"markdown","8fd9ac8d":"markdown","8a1560f1":"markdown","a877329c":"markdown","d3bf52fd":"markdown","d29fe907":"markdown"},"source":{"b8c337f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5f2d627":"df_train=pd.read_csv(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv\")","d4e724dc":"df_train_text=df_train.copy()","f5971a53":"os.mkdir(\"\/kaggle\/working\/train_img\")\n","5534545e":"labels=[0,1,2,3,4]\nfor i in range(len(labels)):\n    k=str(i)\n    os.mkdir(\"\/kaggle\/working\/train_img\/\"+k)","6a200eaf":"import shutil\nfrom tqdm import tqdm\n\nfor j in tqdm(range(len(df_train[\"image_id\"]))):\n    img=df_train[\"image_id\"].iloc[j]\n    if(df_train[\"label\"].iloc[j]==0):\n        shutil.copy(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"+img,\"\/kaggle\/working\/train_img\/0\/\")\n    elif(df_train[\"label\"].iloc[j]==1):\n        shutil.copy(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"+img,\"\/kaggle\/working\/train_img\/1\/\")\n    elif(df_train[\"label\"].iloc[j]==2):\n        shutil.copy(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"+img,\"\/kaggle\/working\/train_img\/2\/\")\n    elif(df_train[\"label\"].iloc[j]==3):\n        shutil.copy(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"+img,\"\/kaggle\/working\/train_img\/3\/\")\n    elif(df_train[\"label\"].iloc[j]==4):\n        shutil.copy(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"+img,\"\/kaggle\/working\/train_img\/4\/\")\nprint(\"Copying Files Done!\")\n","f5e037e0":"numeric_to_class_name = {0:\"Cassava Bacterial Blight (CBB)\",\n                         1:\"Cassava Brown Streak Disease (CBSD)\",\n                         2:\"Cassava Green Mottle (CGM)\",\n                         3:\"Cassava Mosaic Disease (CMD)\",\n                         4:\"Healthy\"}\n\ndf_train_text['label'].replace(numeric_to_class_name, inplace=True)","1d507695":"df_train_text.label.unique()","cd442571":"import seaborn as sns\nsns.set(rc={'figure.figsize':(24,12)})\nsns.countplot(data=df_train_text,x=\"label\")\n","892c05d9":"label_count=df_train_text[[\"label\"]].value_counts().reset_index()\nlabel_count.columns=[\"Label\",\"Number of Observations\"]","c311be3a":"label_count.head()","70c841de":"import plotly.express as px\nfig=px.pie(label_count,values=\"Number of Observations\",names=\"Label\")\nfig.show()","df7ea94f":"import os\nfrom PIL import Image\nimport random \nimport matplotlib.pyplot as plt\n\n","db3baa8f":"def show_images(label_name):\n    plt.figure(figsize=((10,8)))\n    for i in range(0,6):\n        plt.subplot(3,2,i+1)\n        path=\"\/kaggle\/working\/train_img\/\"+str(label_name)+\"\/\"\n        files=os.listdir(path)\n        k=random.choice(files)\n        img=plt.imread(path+k)\n        plt.imshow(img)\n        plt.axis(\"off\")\n    plt.tight_layout()\n        \n            \n    ","28bcd1cf":"show_images(0)","c5b15f6f":"show_images(1)","8c7d8c1b":"show_images(2)","b1b53148":"show_images(3)","8794a68d":"show_images(4)","8f2be76c":"import tensorflow as tf","abb56e84":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","10b45ed1":"img_0.size","a303c280":"ImgDataGen=ImageDataGenerator(\n    rotation_range=0.5, width_shift_range=0.3,\n    height_shift_range=0.3,horizontal_flip=True, vertical_flip=True,\n    validation_split=0.2\n)\nDataGenDir=ImgDataGen.flow_from_directory(\"\/kaggle\/working\/train_img\/\",\n                                         target_size=(224,224),\n                                         batch_size=64,\n                                         class_mode=\"categorical\")","8ba2533d":"!pip install -q efficientnet","175842a9":"import efficientnet.tfkeras as efn","43e18c98":"# instantiating the model in the startegy scope creating the model on the TPU\nmodel=tf.keras.Sequential([efn.EfficientNetB0(input_shape=(224,224,3),\n                                             weights=\"imagenet\",\n                                             include_top=False),\n                           tf.keras.layers.Flatten(),\n                           tf.keras.layers.Dropout(0.2),\n                           tf.keras.layers.Dense(5,activation=\"softmax\")\n                                             \n])\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),loss=\"categorical_crossentropy\",metrics=[\"acc\"])","a9bd1c53":"model.summary()","a7e4d5a7":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n","92829e13":"if tf.test.gpu_device_name(): \n\n    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\n\nelse:\n\n   print(\"Please install GPU version of TF\")","5a8d7bea":"### There are 5 classes for prediction in this dataset :\n\n* Healthy -> The Leaf is healthy\n* Cassava Bacterial Blight (CBB)\n* Cassava Brown Streak Disease (CBSD)\n* Cassava Green Mottle (CGM)\n* Cassava Mosaic Disease (CMD)","c91523fe":"## Examples of leaves having disease Cassava Mosaic Disease (CMD)","b977cec2":"## Model Building and Training","8fd9ac8d":"## Examples of leaves which are Healthy","8a1560f1":"## Examples of leaves having disease Cassava Brown Streak Disease (CBSD)","a877329c":"## Examples of leaves having disease Cassava Bacterial Blight (CBB)","d3bf52fd":"## Examples of leaves having disease Cassava Brown Streak Disease (CBSD)","d29fe907":"### To be continued....."}}