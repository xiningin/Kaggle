{"cell_type":{"c94f1ce8":"code","381f6c09":"code","505e82e7":"code","10308671":"code","d2a55ef5":"code","36020693":"code","bc003efa":"code","6d4cc890":"code","9be99d21":"markdown","c34ab1e3":"markdown","213c071f":"markdown"},"source":{"c94f1ce8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost.sklearn import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport seaborn as sns","381f6c09":"train_data_path = '\/kaggle\/input\/house-price-prediction-challenge\/train.csv'\ntrain_data = pd.read_csv(train_data_path)\ntrain_data = train_data.drop(['ADDRESS'], axis=1) #We have no use of this column\n\nprint(train_data.isna().sum()) #Check if there are null values","505e82e7":"sns.countplot(x=train_data['POSTED_BY'], data=train_data)","10308671":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(x='POSTED_BY',y='TARGET(PRICE_IN_LACS)',data=train_data)\nfig=sns.stripplot(x='POSTED_BY',y='TARGET(PRICE_IN_LACS)',data=train_data,jitter=True,edgecolor='gray')","d2a55ef5":"#Strip plot\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.stripplot(x='UNDER_CONSTRUCTION',y='TARGET(PRICE_IN_LACS)',data=train_data,jitter=True,edgecolor='gray',size=8,palette='winter',orient='v')","36020693":"train_data.corr(method='pearson').sort_values('TARGET(PRICE_IN_LACS)', ascending=False)","bc003efa":"categorical_val = []\ncontinous_val = []\nfor column in train_data.columns:\n\tif len(train_data[column].unique()) < 10:\n\t\tcategorical_val.append(column)\n\telse:\n\t\tcontinous_val.append(column)\n        \ntrain_data[categorical_val].apply(lambda x: x.nunique())\nle = LabelEncoder()\n\nclass MultiColumnLabelEncoder:\n    def __init__(self,columns = None):\n        self.columns = columns # array of column names to encode\n\n    def fit(self,X,y=None):\n        return self # not relevant here\n\n    def transform(self,X):\n        '''\n        Transforms columns of X specified in self.columns using\n        LabelEncoder(). If no columns specified, transforms all\n        columns in X.\n        '''\n        output = X.copy()\n        if self.columns is not None:\n            for col in self.columns:\n                output[col] = LabelEncoder().fit_transform(output[col])\n        else:\n            for colname,col in output.iteritems():\n                output[colname] = LabelEncoder().fit_transform(col)\n        return output\n\n    def fit_transform(self,X,y=None):\n        return self.fit(X,y).transform(X)\n\ntrain_data = MultiColumnLabelEncoder(columns = categorical_val).fit_transform(train_data)\n\n#TODO: STANDARDIZE THE CONTINUOS_VALUES\n\nscaler = StandardScaler()\ntrain_data[continous_val] = scaler.fit_transform(train_data[continous_val])","6d4cc890":"X = train_data.iloc[:, :-1]\ny = train_data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)\n\nmodels = []\nmodels.append((\"Lasso\", linear_model.Lasso(alpha=0.1)))\nmodels.append((\"RandomForest\", RandomForestRegressor()))\nmodels.append((\"XGB\", XGBRegressor()))\nmodels.append((\"GradientBoosting\", GradientBoostingRegressor()))\nmodels.append((\"LGBM\", LGBMRegressor()))\n\nestimators = [\n              ('rfr', RandomForestRegressor()),\n              ('gb', GradientBoostingRegressor()),\n              ('lgbm', LGBMRegressor())\n              #('cb', CatBoostRegressor())\n]\n\nmodels.append((\"StackingRegressor\", StackingRegressor(estimators=estimators, final_estimator=XGBRegressor())))\n\nresults = []\nnames = []\nfor name,model in models:\n  model.fit(X_train, y_train)\n  y_pred = model.predict(X_test)\n  result = mean_squared_error(y_test, y_pred)\n  names.append(name)\n  results.append(result)\n\nfor i in range(len(names)):\n    print(names[i],results[i].mean())","9be99d21":"Create train and test data\nCreate a list of models, which will all be tested separately.\nWe also add StackingClassifier, but as it uses multiple models, we need to define estimators","c34ab1e3":"For loop for separating categorical and continous values.\nMultiColumbLaberEncoder class that does just that: applies LabelEncoder to multiple columns(taken from stackoverflow)","213c071f":"The only column that somewhat correlates to our target variable is SQUARE_FT, understandably so, as bigger apartments usually cost more."}}