{"cell_type":{"f814e437":"code","0141bb03":"code","0fe57047":"code","4a8d025c":"code","2ef91244":"code","0ea9b217":"code","13ba3fbb":"code","b468e1c2":"code","7e8ac442":"code","862c23e9":"code","e898ddba":"code","24415600":"code","6481ad24":"code","e188d823":"code","73d615c8":"code","5baa4be9":"code","d135ef81":"code","0a96f915":"code","b5812e89":"code","a880ce09":"code","48c14600":"code","7aefacf0":"code","89067304":"code","9bdf6ba7":"code","4cae8f90":"code","00de1d12":"code","95aec92c":"code","085649ea":"code","eaacd9be":"code","c5db177d":"code","526be748":"code","3b4c8676":"code","1ed8e561":"code","d686133c":"code","529b6a91":"markdown","af060014":"markdown","342ddc27":"markdown","976b3916":"markdown","0d0ede7a":"markdown"},"source":{"f814e437":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0141bb03":"data0 = pd.read_csv(\"..\/input\/us-hate-crime-dataset-20102019-multiple-sources\/New_York_Hate_Crimes_by_County_and_Bias_Type_2010-2019.csv\")\ndata0[0:2].T","0fe57047":"data0.info()","4a8d025c":"data0['County'].value_counts()","2ef91244":"data_county0=data0.groupby('County').sum()\ndata_county0","0ea9b217":"data_county0.columns","13ba3fbb":"data_county1=data_county0.drop(['Year','Total Incidents','Total Victims','Total Offenders'],axis=1)\ndata_county1","b468e1c2":"data_county1.shape","7e8ac442":"# anti total\nanti_total=[]\nfor i in range(61):\n    anti_total+=[data_county1.iloc[i,0:38].sum()]\ndata_county1['anti_total']=anti_total\ndata_county1","862c23e9":"data_county1.shape","e898ddba":"# anti ratio\ndata_county2=data_county1\nfor i in range(61):\n    for j in range(38):\n        data_county2.iloc[i,j]=data_county1.iloc[i,j]\/data_county1.iloc[i,38]\ndata_county2","24415600":"plt.figure(figsize=(40,20))\ncorr = data_county2.corr()\nsns.heatmap(corr,annot=True,cmap='RdYlGn')","6481ad24":"plt.figure(figsize=(40,20))\ncorr = (data_county2.T).corr()\nsns.heatmap(corr,annot=True,cmap='RdYlGn')","e188d823":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","73d615c8":"data1=df\ndata1[0:2].T","5baa4be9":"data1.columns","d135ef81":"target=['Anti-Asian']\ndatay=data1[target]\ndatax=data1.drop(target,axis=1)","0a96f915":"print(datay[0:2].T)\nprint(datax[0:2].T)","b5812e89":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","a880ce09":"df_columns = list(datax.columns)\nprint(df_columns)","48c14600":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","7aefacf0":"train_df.columns=df_columns\n#test_df.columns=df_columns","89067304":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","9bdf6ba7":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","4cae8f90":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","00de1d12":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","95aec92c":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","085649ea":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","eaacd9be":"y = trainy\nprint(y.shape)","c5db177d":"ydf=pd.DataFrame(y)\nydf","526be748":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","3b4c8676":"print(target)","1ed8e561":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","d686133c":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","529b6a91":"# Data preparation","af060014":"# Model","342ddc27":"### 'Anti-Asian' is the most related with 'Anti-Gay Male'.","976b3916":"# Visualize Importance","0d0ede7a":"# Target setting (example)"}}