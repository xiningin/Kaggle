{"cell_type":{"bddbb052":"code","5f482920":"code","70af7328":"code","e8039109":"code","0cb8d4e9":"code","bb8244c3":"code","eb86c4ee":"code","98a5f524":"code","ea8512e9":"code","f22bde2f":"code","d4757c91":"code","10b22426":"code","07dc59ed":"code","813d1ad2":"code","222481a3":"code","6da4c4fc":"code","a08613ea":"code","9d206ecf":"code","abf29926":"code","931ff4ec":"code","868b8a18":"code","8f006d31":"code","0e50862a":"code","9000d291":"code","9a874f21":"code","3fd70e7e":"code","44a36c59":"code","86837a32":"code","183cec55":"code","6231eab4":"markdown","5d8c2b58":"markdown","9b10e9b6":"markdown","dbc04b6b":"markdown","ccdd3e5f":"markdown","ddec9fe2":"markdown","321be571":"markdown","08ecda7a":"markdown","aa94a713":"markdown","40ed2a73":"markdown","f19c10ee":"markdown","5f83dbc6":"markdown","e35943f3":"markdown","13316249":"markdown","96610e95":"markdown","30b1c717":"markdown","cac4ca19":"markdown","02c1df78":"markdown","cbc7d881":"markdown","f43d9197":"markdown","624af9c9":"markdown","c22bf683":"markdown","d06a008e":"markdown","d71d6265":"markdown","277cb806":"markdown","b891fa9f":"markdown","f1443680":"markdown","a596f725":"markdown","873d4281":"markdown","d7e1cbb4":"markdown"},"source":{"bddbb052":"import numpy as np\nimport pandas as pd\n\n# For Visualizations\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom mpl_toolkits.basemap import Basemap\nfrom mpl_toolkits.mplot3d import axes3d\nplt.style.use('seaborn-dark')\n\nfrom scipy.optimize import curve_fit\n\nimport os\nimport time\nimport gc\nfrom operator import itemgetter as ig\nfrom tqdm import tqdm_notebook\nfrom collections import Counter\nfrom collections import OrderedDict","5f482920":"def check_nulls(data,to_return=False):\n    print(\"Total no. of players in dataset - \",data.shape[0])\n    missing=list(pd.isnull(data).sum().items())\n    missing=[x for x in missing if x[1]!=0]\n    print(\"No. of columns containing missing values - \",len(missing))\n    if(len(missing)==0):\n        return\n    missing=sorted(missing,key=lambda x:x[1],reverse=True)\n    missing_20=missing[:20]\n    missing_vals=list(map(ig(1),missing_20))\n    missing_cols=list(map(ig(0),missing_20))\n    sns.barplot(x=missing_vals,y=missing_cols)\n    plt.title(\"Top Columns with missing values\")\n    plt.xlabel(\"No. of missing values\")\n    plt.ylabel(\"Columns\")\n    plt.show()\n    if(to_return==True):\n        return missing","70af7328":"player_data=pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\nprint(\"Data Sample : \")\nplayer_data.head()","e8039109":"check_nulls(player_data)","0cb8d4e9":"def convert_value(sample):\n    m_or_k=None\n    if(sample.startswith('\u20ac')):\n        sample=sample[1:]\n    if(sample.endswith('M')):\n        m_or_k='m'\n    elif(sample.endswith('K')):\n        m_or_k='k'\n    if(m_or_k!=None):\n        sample=sample[:-1]\n    sample=float(sample)\n    if(m_or_k=='k'):\n        sample\/=1000\n    return sample\n\ndef convert_wage(sample):\n    if(sample.endswith('K')):\n        sample=sample[:-1]\n    if(sample.startswith('\u20ac')):\n        sample=sample[1:]\n    sample=float(sample)\n    return sample","bb8244c3":"positional_rating_cols=['LS','ST','RS','LW','LF','CF','RF','RW','LAM',\n                        'CAM','RAM','LM','LCM','CM','RCM','RM','LWB','LDM',\n                        'CDM','RDM','RWB','LB','LCB','CB','RCB','RB']\n\nplayer_data['Value']=player_data['Value'].apply(convert_value)\nplayer_data['Wage']=player_data['Wage'].apply(convert_wage)\nplayer_data['Loaned From']=player_data['Loaned From'].fillna('Not on Loan')\nplayer_data=player_data.drop(['Release Clause','Joined'],axis=1)\n\ngk_data=player_data[player_data['Position']=='GK'].reset_index(drop=True)\ngk_data=gk_data.drop(positional_rating_cols,axis=1)\ndata=player_data[player_data['Position']!='GK'].reset_index(drop=True)\n\nmissing=pd.isnull(data)\nmissing_vals=pd.Series(missing.sum(axis=1).values)\ndata=data.loc[missing_vals==0].reset_index(drop=True)\n\nmissing=pd.isnull(gk_data)\nmissing_vals=pd.Series(missing.sum(axis=1).values)\ngk_data=gk_data.loc[missing_vals==0].reset_index(drop=True)\n\ntotal_data=pd.concat([data,gk_data],sort=False,axis=0)\ntotal_data=total_data[total_data['Value']!=0].reset_index(drop=True)","eb86c4ee":"print(\"After preprocessing the data :\\n\\n\")\nprint(\"Player Data :\\n\")\ncheck_nulls(data)\nprint(\"\\nGoalkeeper Data :\\n\")\ncheck_nulls(gk_data)","98a5f524":"from iso3166 import countries\n\nworld_filename='\/kaggle\/input\/world-shapefiles\/ne_10m_admin_0_countries'\neurope_filename='\/kaggle\/input\/europe-shapefiles\/european-union-countries'\nsouthamerica_filename='\/kaggle\/input\/south-america-shapefiles\/South_America'\n\ndef plot_world_map(country_dict,filename,title=\"\",alpha=3,dict_key='ADM0_A3',\n                   num_bins=10,return_iso=False,not_iso=False,neg_vals=False,\n                   x_scale1=0,x_scale2=1,y_scale1=0,y_scale2=1,min_zero=False):\n    country_iso={}\n    country_iso2={}\n    for c in countries:\n        country_iso[c.name]=c.alpha3\n        country_iso2[c.name]=c.alpha2\n    \n    input_iso={}\n    for c in country_dict:\n        if(alpha==2):\n            if(c in country_iso2):\n                input_iso[country_iso2[c]]=country_dict[c]\n        else:\n            if(c in country_iso):\n                input_iso[country_iso[c]]=country_dict[c]\n    \n    fig=plt.figure(figsize=(22, 12))\n    ax=fig.add_subplot(111,facecolor='w',frame_on=False)\n    ax.set_title(title,fontsize=30)\n    m=Basemap(lon_0=0, projection='robin')\n    m.drawmapboundary(color='gray')\n    m.readshapefile(filename,'units')\n    \n    countries_used=set()\n    for info,shape in zip(m.units_info,m.units):\n        iso3=info[dict_key]\n        if(not_iso==True):\n            if(iso3 in country_map):\n                iso3=country_map[iso3]\n            if(iso3 in country_iso):\n                iso3=country_iso[iso3]\n        countries_used.add(iso3)\n    \n    iso_used=OrderedDict()\n    for c in input_iso:\n        if(c in countries_used):\n            iso_used[c]=input_iso[c]\n    data_vals=list(iso_used.values())\n    iso_vals=list(iso_used.keys())\n    \n    cm=plt.get_cmap('plasma')\n    scheme=[cm(i\/num_bins) for i in range(num_bins)]\n    if(neg_vals==False):\n        bins=np.linspace(0,max(data_vals),num_bins)\n    else:\n        bins=np.linspace(min(data_vals),max(data_vals),num_bins)\n    bin_list=np.digitize(data_vals,bins)-1\n    iso_bins=OrderedDict(zip(iso_vals,bin_list))\n    \n    for info,shape in zip(m.units_info,m.units):\n        iso3=info[dict_key]\n        if(not_iso==True):\n            if(iso3 in country_map):\n                iso3=country_map[iso3]\n            if(iso3 in country_iso):\n                iso3=country_iso[iso3]\n        if iso3 not in iso_bins:\n            if(min_zero==True):\n                color=scheme[0]\n            else:\n                color='w'\n        else:\n            color=scheme[iso_bins[iso3]]\n        patches=[Polygon(np.array(shape),True)]\n        pc=PatchCollection(patches)\n        pc.set_facecolor(color)\n        ax.add_collection(pc)\n    \n    ax.axhspan(0,1000*1800,facecolor='w',edgecolor='w',zorder=2)\n    ax_legend=fig.add_axes([0.35,0.14,0.3,0.03],zorder=3)\n    cmap=mpl.colors.ListedColormap(scheme)\n    cb=mpl.colorbar.ColorbarBase(ax_legend,cmap=cmap,ticks=bins,boundaries=bins,orientation='horizontal')\n    cb.ax.set_xticklabels([str(int(round(i,0))) for i in bins],rotation=45)\n    x_lims=ax.get_xlim()\n    ax.set_xlim(x_lims[1]*x_scale1,x_lims[1]*x_scale2)\n    y_lims=ax.get_ylim()\n    ax.set_ylim(y_lims[1]*y_scale1,y_lims[1]*y_scale2)\n    plt.show()","ea8512e9":"country_map={\n    'Antigua & Barbuda':'Antigua and Barbuda',\n    'Bolivia':'Bolivia, Plurinational State of',\n    'Bosnia Herzegovina':'Bosnia and Herzegovina',\n    'Cape Verde':'Cabo Verde',\n    'Central African Rep.':'Central African Republic',\n    'China PR':'China',\n    'Curacao':'Cura\u00e7ao',\n    'Czech Republic':'Czechia',\n    'DR Congo':'Congo, Democratic Republic of the',\n    'England':'United Kingdom of Great Britain and Northern Ireland',\n    'FYR Macedonia':'North Macedonia',\n    'Guinea Bissau':'Guinea-Bissau',\n    'Iran':'Iran, Islamic Republic of',\n    'Ivory Coast':\"C\u00f4te d'Ivoire\",\n    'Korea DPR':\"Korea, Democratic People's Republic of\",\n    'Korea Republic':'Korea, Republic of',\n    'Moldova':'Moldova, Republic of',\n    'Northern Ireland':'United Kingdom of Great Britain and Northern Ireland',\n    'Palestine':'Palestine, State of',\n    'Republic of Ireland':'Ireland',\n    'Russia':'Russian Federation',\n    'Scotland':'United Kingdom of Great Britain and Northern Ireland',\n    'St Kitts Nevis':'Saint Kitts and Nevis',\n    'St Lucia':'Saint Lucia',\n    'Syria':'Syrian Arab Republic',\n    'S\u00e3o Tom\u00e9 & Pr\u00edncipe':'Sao Tome and Principe',\n    'Tanzania':'Tanzania, United Republic of',\n    'Trinidad & Tobago':'Trinidad and Tobago',\n    'United States':'United States of America',\n    'Venezuela':'Venezuela, Bolivarian Republic of',\n    'Wales':'United Kingdom of Great Britain and Northern Ireland',\n    'Gibraltar (UK)':'United Kingdom of Great Britain and Northern Ireland',\n    'Guernsey (UK)':'United Kingdom of Great Britain and Northern Ireland',\n    'Isle of Man (UK)':'United Kingdom of Great Britain and Northern Ireland',\n    'Jersey (UK)':'United Kingdom of Great Britain and Northern Ireland',\n    'Macedonia':'North Macedonia',\n    'United Kingdom':'United Kingdom of Great Britain and Northern Ireland',\n    'Faeroe Islands (Denmark)':'Denmark',\n    'Jan Mayen (Norway)':'Norway',\n    'Svalbard (Norway)':'Norway'\n}\ntotal_data['Nationality']=pd.Series([x if x not in country_map else country_map[x] for x in total_data['Nationality']])","f22bde2f":"total_nationality=total_data.groupby('Nationality')['Name'].aggregate('count')\ntotal_nationality=total_nationality.to_dict()","d4757c91":"plot_world_map(total_nationality,world_filename,\n               title=\"Worldwide Distribution of Players\",\n               alpha=3,num_bins=10)","10b22426":"avg_player_per_country=int(np.round(np.mean(list(total_nationality.values()))))\nprint(\"Average No. of Players Representing a Country = \",avg_player_per_country)\nprint(\"\\nCountries having representation lesser than {thresh} will not be considered for average overall rating...\".format(thresh=avg_player_per_country))","07dc59ed":"def get_avg_country_val(col,total_val):\n    sum_val_countries=total_data.groupby('Nationality')[col].aggregate('sum')\n    total_sum_val_countries=sum_val_countries.to_dict()\n    \n    avg_val_nationality={}\n    for c in total_sum_val_countries:\n        if(c in total_nationality):\n            if(total_nationality[c]>=avg_player_per_country):\n                avg_val_nationality[c]=total_sum_val_countries[c]\/total_nationality[c]\n            else:\n                avg_val_nationality[c]=0\n    return avg_val_nationality","813d1ad2":"avg_rating_nationality=get_avg_country_val('Overall',total_data)\n\nplot_world_map(avg_rating_nationality,world_filename,\n               title=\"Country-Wise Average Overall Rating\",\n               alpha=3,num_bins=20)\n\ntop_avg_ratings=sorted(avg_rating_nationality.items(),key=lambda x:x[1],reverse=True)[:20]\ntop_avg_ratings_countries=list(map(ig(0),top_avg_ratings))\ntop_avg_ratings_vals=list(map(ig(1),top_avg_ratings))\nsns.barplot(x=top_avg_ratings_vals,y=top_avg_ratings_countries)\nplt.title(\"20 Countries with Top Average Overall Ratings\")\nplt.xlabel(\"Average Overall Rating\")\nplt.ylabel(\"Countries\")\nplt.xlim(min(top_avg_ratings_vals)-2,max(top_avg_ratings_vals)+2)\nplt.show()","222481a3":"avg_value_nationality=get_avg_country_val('Value',total_data)\n\nplot_world_map(avg_value_nationality,world_filename,\n               title=\"Country-Wise Average Player Value\",\n               alpha=3,num_bins=20)\n\ntop_avg_value=sorted(avg_value_nationality.items(),key=lambda x:x[1],reverse=True)[:20]\ntop_avg_value_countries=list(map(ig(0),top_avg_value))\ntop_avg_value_vals=list(map(ig(1),top_avg_value))\nsns.barplot(x=top_avg_value_vals,y=top_avg_value_countries)\nplt.title(\"20 Countries with Top Average Player Value\")\nplt.xlabel(\"Average Player Value (in Million \u20ac)\")\nplt.ylabel(\"Countries\")\nplt.show()","6da4c4fc":"e=np.e\ndef func(x,a,b,c,d):\n    return a*e**(b*(x-c))-d\n\n# Curve Fitting\nopt,cov=curve_fit(f=func,xdata=total_data['Overall'],ydata=total_data['Value'], maxfev = 5000)\n\nfig,ax=plt.subplots(1,1,figsize=(5,4))\nsns.scatterplot(x=total_data['Overall'],y=total_data['Value'],ax=ax,label='Actual Data')\nx=np.arange(0,100,0.25)\nax.plot(x,[func(val,a=opt[0],b=opt[1],c=opt[2],d=opt[3]) for val in x],color='red',label='Curve')\nax.set_title(\"Curve to Approximate Relation between Ratings and Value\")\nax.legend(loc='best')\nplt.show()","a08613ea":"value_for_money=[]\nfor ind,row in total_data.iterrows():\n    value=row['Value']\n    ideal_value=func(row['Overall'],a=opt[0],b=opt[1],c=opt[2],d=opt[3])\n    error=(ideal_value-value)*1000 # Error in k\u20ac\n    value_for_money.append(error)\ntotal_data=total_data.assign(Value_for_Money=value_for_money)","9d206ecf":"avg_vfm_nationality=get_avg_country_val('Value_for_Money',total_data)\n\nplot_world_map(avg_vfm_nationality,world_filename,\n               title=\"Country-Wise Average Value for Money\",\n               alpha=3,num_bins=20,neg_vals=True,min_zero=False)\n\ntop_avg_vfm=sorted(avg_vfm_nationality.items(),key=lambda x:x[1],reverse=True)[:20]\ntop_avg_vfm_countries=list(map(ig(0),top_avg_vfm))\ntop_avg_vfm_vals=list(map(ig(1),top_avg_vfm))\nsns.barplot(x=top_avg_vfm_vals,y=top_avg_vfm_countries)\nplt.title(\"20 Countries with Top Average Value for Money\")\nplt.xlabel(\"Average Value for Money\")\nplt.ylabel(\"Countries\")\nplt.show()","abf29926":"print(\"No. of Clubs - \",total_data['Club'].nunique())","931ff4ec":"def plot_club_stats(col,title,total_data=total_data,space=4,main_col='Club'):\n    club_val=total_data.groupby([main_col])[col].aggregate('mean')\n    low_club_val=club_val.sort_values()[:10]\n    high_club_val=club_val.sort_values(ascending=False)[:10]\n\n    avg_club_val=np.mean(total_data[col])\n    q1_club_val=np.quantile(total_data[col],0.25)\n    q3_club_val=np.quantile(total_data[col],0.75)\n\n    fig,ax=plt.subplots(1,1,figsize=(16,8))\n    x1_labels=list(low_club_val.keys())\n    x1=np.arange(len(x1_labels))\n    y1=list(low_club_val.values)\n    x2_labels=list(high_club_val.keys())\n    x2=np.arange(len(x2_labels))\n    y2=list(high_club_val.values)\n\n    sns.pointplot(x=x1,y=y1,ax=ax,color='red')\n    for ind,(x,y) in enumerate(zip(x1,y1)):\n        ax.annotate(\n            x1_labels[ind],(x,y),(x,y),rotation=45,\n            bbox=dict(boxstyle=\"round\",fc='w'),va='center',ha='center',fontsize=15)\n    sns.pointplot(x=x2,y=y2,ax=ax,color='blue')\n    for ind,(x,y) in enumerate(zip(x2,y2)):\n        ax.annotate(\n            x2_labels[ind],(x,y),(x,y),rotation=45,\n            bbox=dict(boxstyle=\"round\",fc='w'),va='center',ha='center',fontsize=15)\n\n    ax.axhline(avg_club_val)\n    ax.annotate(\"Mean\",(-1,avg_club_val),fontsize=15,va='bottom',ha='center')\n    ax.axhline(q1_club_val)\n    ax.annotate(\"25% Percentile\",(-1,q1_club_val),fontsize=15,va='bottom',ha='center')\n    ax.axhline(q3_club_val)\n    ax.annotate(\"75% Percentile\",(-1,q3_club_val),fontsize=15,va='bottom',ha='center')\n\n    plt.title(\"Teams with Highest & Lowest Average \"+title,fontsize=20)\n    plt.ylabel(\"Average \"+title,fontsize=15)\n    plt.ylim(min(y1)-space,max(y2)+space)\n    plt.xlim(-2,len(x1)-0.5)\n    ax.set_xticklabels('')\n    plt.show()","868b8a18":"plot_club_stats('Age','Player Age')","8f006d31":"plot_club_stats('Overall','Player Ratings')\nplot_club_stats('Potential','Potential')\nplot_club_stats('Value_for_Money','Value for Money',space=500)","0e50862a":"total_data['Growth']=total_data['Potential']-total_data['Overall']\n\nfig,ax=plt.subplots(2,2,figsize=(15,10))\nfig.suptitle(\"Growth Statistics\",fontsize=25)\nsns.scatterplot(total_data['Age'],total_data['Growth'],ax=ax[0,0])\nax[0,0].set_title(\"Growth vs. Age\",fontsize=15)\nsns.scatterplot(total_data['Overall'],total_data['Growth'],ax=ax[0,1])\nax[0,1].set_title(\"Growth vs. Overall Rating\",fontsize=15)\nsns.scatterplot(total_data['Overall'],total_data['Potential'],ax=ax[1,0])\nax[1,0].set_title(\"Potential vs. Overall Rating\",fontsize=15)\nsns.scatterplot(total_data['Value_for_Money'],total_data['Growth'],ax=ax[1,1])\nax[1,1].set_title(\"Growth vs. Value For Money\",fontsize=15)\nplt.show()","9000d291":"top_growers=total_data.sort_values('Growth',ascending=False)[['Name','Club','Age','Overall','Growth','Value','Position','Nationality']].reset_index(drop=True).head(10)\nfig,ax=plt.subplots(2,1,sharex=True,figsize=(18,11))\nax[0].set_title(\"Statistics of the players with most expected Growth\",fontsize=30)\nfig.subplots_adjust(hspace=0)\nx=np.arange(top_growers.shape[0])\nsns.barplot(x=x,y=top_growers['Value'],ax=ax[0])\nax[0].axhline(0)\nax[0].set_ylabel(\"Value\",fontsize=15)\nax[1].axhline(100)\nfor index,player in top_growers.iterrows():\n    ax[1].arrow(index,player['Overall'],0,player['Growth'],color='blue',\n              width=0.03,head_width=0.15,head_length=3.5)\n    ax[1].annotate(player['Name']+'\\n'+player['Club'],(index,30),ha='center',va='center',rotation=45,\n               bbox=dict(boxstyle='round',fc='white'),fontsize=15)\n    ax[1].annotate('Age '+str(player['Age'])+'\\n'+player['Position'],(index,5),ha='center',va='center',rotation=45,\n               bbox=dict(boxstyle='round',fc='white'),fontsize=15)\n    ax[1].axvline(index+0.5)\nax[1].set_ylim(-10,100)\nax[1].set_ylabel(\"Overall Rating & Potential Rating\",fontsize=15)\nplt.xticks(x,\"\")\nplt.show()","9a874f21":"position_map={\n    'RF':'RF',\n    'ST':'CF',\n    'LW':'LF',\n    'RCM':'RM',\n    'LF':'LF',\n    'RS':'RF',\n    'RCB':'CB',\n    'LCM':'LM',\n    'CB':'CB',\n    'LDM':'DM',\n    'CAM':'CM',\n    'CDM':'DM',\n    'LS':'LF',\n    'LCB':'CB',\n    'RM':'RM',\n    'LAM':'LM',\n    'LM':'LM',\n    'LB':'LB',\n    'RDM':'DM',\n    'RW':'RF',\n    'CM':'CM',\n    'RB':'RB',\n    'RAM':'RM',\n    'CF':'CF',\n    'RWB':'RB',\n    'LWB':'LB',\n    'GK':'GK'\n}\ntotal_data=total_data.assign(General_Positions=total_data['Position'].map(position_map))\npositions=['GK','CB','LB','RB','DM','CM','LM','RM','CF','LF','RF']","3fd70e7e":"foot_count=total_data.groupby('Preferred Foot')['Name'].aggregate('count')\nright=foot_count['Right']\nleft=foot_count['Left']\nratio=right\/left\nprint(\"Preferred Foot Count:\\n\")\nprint(\"Right - \",right)\nprint(\"Left - \",left)\nprint(\"\\nNatural Right-Footed to Left-Footed Ratio :\\nR:L = {r}:{l} = {ratio:.2f}\".format(r=right,l=left,ratio=ratio))","44a36c59":"position_best_foot={}\nposition_foot=total_data.groupby(['General_Positions','Preferred Foot'])['Name'].aggregate('count')\nfor pos in positions:\n    position_best_foot[pos]={}\n    l=position_foot[pos]['Left']*ratio\n    r=position_foot[pos]['Right']\n    if(r>=l):\n        position_best_foot[pos]['Best']='Right'\n        position_best_foot[pos]['Perc']=r*100\/(l+r)\n    else:\n        position_best_foot[pos]['Best']='Left'\n        position_best_foot[pos]['Perc']=l*100\/(l+r)\n        \nposition_rating=total_data.groupby('General_Positions')['Overall'].aggregate('mean')\nposition_rating=position_rating.to_dict()\n\nposition_age=total_data.groupby('General_Positions')['Age'].aggregate('mean')\nposition_age=position_age.to_dict()\n\nposition_value=total_data.groupby('General_Positions')['Value'].aggregate('mean')\nposition_value=position_value.to_dict()\n\nmid_x=530\nmid_y=800\nposition_loc={\n    'GK':[[mid_x,mid_y*12\/7],'yellow'],\n    'RB':[[mid_x*6\/4,mid_y*10\/7],'cyan'],\n    'LB':[[mid_x*2\/4,mid_y*10\/7],'cyan'],\n    'CB':[[mid_x,mid_y*10\/7],'cyan'],\n    'DM':[[mid_x,mid_y*8\/7],'lime'],\n    'RM':[[mid_x*6\/4,mid_y*6\/7],'lime'],\n    'LM':[[mid_x*2\/4,mid_y*6\/7],'lime'],\n    'CM':[[mid_x,mid_y*4\/7],'lime'],\n    'RF':[[mid_x*6\/4,mid_y*2\/7],'tomato'],\n    'LF':[[mid_x*2\/4,mid_y*2\/7],'tomato'],\n    'CF':[[mid_x,mid_y*2\/7],'tomato']\n}","86837a32":"fig,ax=plt.subplots(1,1, figsize = (10, 15))\npitch_img=plt.imread('\/kaggle\/input\/football-pitch\/football_pitch.jpg')\nax.imshow(pitch_img)\nfor pos in positions:\n    loc=position_loc[pos][0]\n    color=position_loc[pos][1]\n    ax.plot(loc[0],loc[1],'o',color=color,markersize=25)\n    rating=position_rating[pos]\n    age=position_age[pos]\n    value=position_value[pos]\n    foot=position_best_foot[pos]['Best']\n    foot_perc=position_best_foot[pos]['Perc']\n    ax.annotate(pos,(loc[0],loc[1]-30),fontsize=20,va='center',ha='center',\n                bbox=dict(boxstyle='round',fc=color))\n    info='Avg Rating - {rat:.2f}\\nAvg Value - \u20ac{val:.2f}M\\nPreferred Foot - {ft} ({ft_perc:.1f}%)'.format(\n    rat=rating,val=value,ft=foot,ft_perc=foot_perc)\n    ax.annotate(info,(loc[0],loc[1]+35),fontsize=10,va='center',ha='center',bbox=dict(boxstyle='round',fc='w'))\nplt.axis('off')\nax.set_ylim(2*mid_y,15)\nplt.show()","183cec55":"data['GK_skills']=(data['GKDiving']+data['GKHandling']+data['GKKicking']+data['GKPositioning']+data['GKReflexes'])\/5\nbest_gk=data.sort_values('GK_skills',ascending=False).head(5)[['Name','Club','GK_skills']].reset_index(drop=True)\n\nnames=best_gk['Name']+['\\n(']*best_gk.shape[0]+best_gk['Club']+[')']*best_gk.shape[0]\nsns.barplot(y=names,x=best_gk['GK_skills'])\nplt.title(\"Best 'Non-Goalkeeper' Goalkeepers\")\nplt.show()","6231eab4":"### Let us analyze average player age of the clubs...","5d8c2b58":"We see some really interesting observations here. Asian countries and Australia seem to have lesser average overall ratings. African countries, though poorly represented, have a good average overall rating with 3 African countries among the Top 20 countries.\n\nPortugal and Brazil emerge as close winners. It is also interesting to observe that many of the top 20 countries do not have a very good representation (eg. Portugal, Uruguay etc.) while the United Kingdom, which has maximum representation, does not even appear in the top 20 countries. This might be happening because the lower-tier leagues in UK might be bringing the overall average rating down. On the other hand, most other countries have only their top football league in FIFA 19.\n\nFor example, if FIFA 19 would include Portugal's second tier league along with Liga NOS (the top-tier Portuguese league), then the average overall rating of Portugal would probably go down, while if FIFA 19 considered 'only' the Premier League in UK and not the lower-tier leagues, then the average overall rating of UK would be significantly higher.","9b10e9b6":"## Best 'Non-Goalkeeper' Goalkeeper","dbc04b6b":"## Position Analysis <a id=\"5\"><\/a>\n\n### To simplify our analysis, we'll categorize all footballing positions to 11 general positions - \n* GK (GoalKeeper)\n* CB, LB, RB (Defenders)\n* CM, DM, LM, RM (Midfielders)\n* CF, LF, RF (Forwards)","ccdd3e5f":"Suarez is the third best non-GK goalkeeper! I'm sure Ghanians wouldn't be as surprised as me...","ddec9fe2":"We notice some nice observations. Firstly, looking at average rating, we realize how relatively poor goalkeeper ratings really are. Also, it is a bit surprising to see a huge rating gap between Central Forwards and Side Forwards.\n\nFor average value, Side Forwards are much more expensive than others. On the other hand, defenders and goalkeepers are much cheaper.\n\nFor the feet preference analysis, we have taken the natural ratio of right-footed to left-footed footballers into account. Thus, none of these results are hampered by the fact that there are naturally almost three times as many right-footed players than there are left-footed.\n\nIt is interesting to look at the feet preference of different positions. The only positions where feet preference is one-sided are the side-back positions. This might be to effectively deliver those crosses. Side Midfielders and specially Side Forwards do not have that one-sided feet preference, indicating lot of flexibility in these positions. It is also a bit surprising to see almost 72% goalkeepers being right-footed, though it is a position where use of both feet are equally important.","321be571":"Brazillians steal the show with an incredibly high value for money. Again, the players in Brazillian clubs are made-up. However, the good thing about these players is that they have a high average player rating and terrific value for money. So you might not hesitate spending big bucks in FIFA 19 for a Brazillian player, for there is a high chance he'll be worth the money.\n\nAlso, there are only a handful of countries offering positive value for money, while the others offer negative value for money. So there is obviously severe over-pricing going on...","08ecda7a":"Important Observations :\n* We see here that there is no player below 25 who is expected to have zero growth while no player above 30 is expected to have any kind of growth\n* Players with lower overall rating can expect to have higher growth, though the trend is not definite and reliable\n* No player has potential rating lower than overall rating, indicating no expected loss of quality for any player\n* Players with high growth expectancy are having either moderate value for money or negative value for money. Thus, players with good growth are often valued close to or above their ideal value. But if the player does indeed fulfill his potential, it'll be a good investment in the long run","aa94a713":"## Worldwide Distribution of Players\n\n### Let us analyze the distribution of football players across the world in FIFA 19...","40ed2a73":"There doesn't seem to be much of a change between country-wise average overall rating and player value. Most of the top 20 countries with best average player values are also in the top 20 countries with best average overall rating. This represents justified value for money!","f19c10ee":"The players with highest expected growth are actually not very famous. These players are extremely young, do not have a good overall rating, but are predicted to reach potential ratings of around 75-80. This is great, but any club that buys any of these players must have patience while the player progresses. As shown previously, the rating that a player possesses once he is 25 gives you a good idea of the maximum rating he can ever possess, while if a player crosses 30, it is improbable that the player will develop further.","5f83dbc6":"# Player Analysis <a id=\"4\"><\/a>","e35943f3":"# FIFA 19 Stats - Amazing Facts!\n\n## - By Sakshat Rao\n\n### Enjoy little interesting aspects of this FIFA 19 dataset through these wonderful visualizations...\n\n#### This analysis is only for FIFA 19 and is not very suitable for real-world football. The reason being that there are many generated players and corresponding stats in this dataset...","13316249":"### Position Stats","96610e95":"Juventus has a supreme average player rating over other teams. It is also surprising to see 5 Italian teams out of the top 10 teams with highest average ratings. Also all 10 teams with lowest average player rating are either from Ireland or UK, with as many as 7 out of them being Irish. Disappointing stats for Irish Football...\n\nTeams like Manchester City, Chelsea and Bayern Munich, which were surprise absentees for teams with highest average player ratings, seem to have a very good potential moving forward. Juventus still remains first, but this time with a narrower lead. Also, some of the Irish teams have moved out of the list of teams with lowest potential to make space for some Asian teams...\n\nThe Top 10 teams with highest average value for money consist of almost 5 Brazillian teams, again showcasing how worthwhile it might be to buy players from Brazil. Juventus seems to be the only European Giant with a great positive value for money. Football powerhouses like Liverpool, Manchester City, Manchester United and Athletico Madrid find themselves with many overpriced players, again indicating the crazy level of over-pricing that happens among big teams...","30b1c717":"# Club Analysis <a id=\"3\"><\/a>","cac4ca19":"# Country-Wise Analysis <a id=\"2\"><\/a>","02c1df78":"# Data <a id=\"1\"><\/a>\n## Let us load and preprocess our data for further applications...","cbc7d881":"# Thank You!\n### Hope You Enjoyed!","f43d9197":"It is interesting to observe that 9 out of the top 10 teams that have highest average player age are from Brazil. Coincidence?\n\nActually, as mentioned, Brazillian clubs have made-up players in FIFA 19. So it just might be that made-up players innately have a higher average age. So if you are indeed interested in purchasing a player from a Brazillian club in FIFA 19, be aware that the player is made-up and that there is low chance of him being young.","624af9c9":"Our analysis will therefore be based on around 18000 players, including around 2000 goalkeepers...","c22bf683":"## Table of Content:\n1. [Data](#1)\n2. [Country-Wise Analysis](#2)\n3. [Club Analysis](#3)\n4. [Player Analysis](#4)\n5. [Position Analysis](#5)","d06a008e":"We see only one speck of yellow in the world map - the United Kingdom. The reason United Kingdom has been represented by so many players is that FIFA 19 has 4 English leagues and 1 Scottish league, which obviously will result in many English players being present in the FIFA 19 dataset.\n\nThe presence of football leagues  in FIFA 19 of countries like China, Saudi Arabia, Japan, Colombia, Poland, Chile, Sweden, Norway and Turkey ensures decent representation of the mentioned countries as well.","d71d6265":"## Average Overall Rating - Country-Wise\n\n### We shall now move onto analyzing which countries have players with high average overall rating. We shall use 'Player Overall Rating' and 'Player Rating' interchangeably...","277cb806":"Therefore, using this curve as our 'Actual Player Value', we can find out by how much more or less money has a player been valued. This represents value for money; a player with value less than actual value represents good value for money, while a player with value more than actual value represents bad value for money...","b891fa9f":"## Growth\n\n### We have defined Growth as the difference between his Potential Rating & Overall Rating. Growth of a player might also be affected by his age, right? Let us check this dependency and also others...","f1443680":"### Value For Money\n\nWe know try to figure out a pattern between player ratings and player value. We can, indeed, approximate the relation between ratings and values through an exponential curve. Using curve fitting, we find out the exact parameters and compare the available data and resulting curve...","a596f725":"### Players with Highest Expected Growth","873d4281":"## Country-Wise Average Player Value\n\n### Let us check would there be any significant difference between average overall rating and average player value of countries...","d7e1cbb4":"### Let us now analyze average player rating, player potential and value for money of the clubs..."}}