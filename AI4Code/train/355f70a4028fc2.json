{"cell_type":{"c8a2b364":"code","409f3ade":"code","19823390":"code","0888aaf1":"code","18da4e01":"code","7967e4aa":"code","2f704e06":"code","770f4a09":"code","b200a3ac":"code","d147019e":"code","b297a148":"code","dc9e1de5":"code","3c169a6d":"code","12285441":"code","f5dc434c":"code","81c1bcd9":"code","95bf2dce":"code","60c696fe":"code","1793282d":"code","d8e2427c":"code","4443ef1d":"code","e5480899":"code","57c821de":"code","0dfbd8ae":"code","183eb136":"code","60d4d404":"code","d26c34d8":"code","085188b8":"code","c3027ef1":"markdown","8d4cb2bd":"markdown","cd2d4fa6":"markdown","4885c598":"markdown","de4cf7c9":"markdown","8753f869":"markdown","92a663eb":"markdown","3991acee":"markdown","f08c4ad7":"markdown","35eed4fd":"markdown","329bccdb":"markdown","be72487e":"markdown"},"source":{"c8a2b364":"import pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","409f3ade":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_copy = df","19823390":"df.head()","0888aaf1":"df.isnull().sum()[df.isnull().sum() > 0]","18da4e01":"df['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","7967e4aa":"df_cat = df.select_dtypes(include = 'object')\ndf_num = df.select_dtypes(exclude = 'object')\n\ndf.update(df[df_cat.columns].fillna('na'))\ndf.update(df[df_num.columns].fillna(0))","2f704e06":"#for categorical variables:\n\ndef correlation_ratio(categories, measurements):\n    fcat, _ = pd.factorize(categories)\n    cat_num = np.max(fcat)+1\n    y_avg_array = np.zeros(cat_num)\n    n_array = np.zeros(cat_num)\n    for i in range(0,cat_num):\n        cat_measures = measurements[np.argwhere(fcat == i).flatten()]\n        n_array[i] = len(cat_measures)\n        y_avg_array[i] = np.average(cat_measures)\n    y_total_avg = np.sum(np.multiply(y_avg_array,n_array))\/np.sum(n_array)\n    numerator = np.sum(np.multiply(n_array,np.power(np.subtract(y_avg_array,y_total_avg),2)))\n    denominator = np.sum(np.power(np.subtract(measurements,y_total_avg),2))\n    if numerator == 0:\n        eta = 0.0\n    else:\n        eta = np.sqrt(numerator\/denominator)\n    return eta","770f4a09":"df.MSSubClass = df.MSSubClass.apply(str)\ndf_cat = df.select_dtypes(include = 'object')\n\nfor i in df_cat.columns:\n    data = df[i]\n    if (correlation_ratio(data, df.SalePrice) > 0):\n        print(i,':', correlation_ratio(data, df.SalePrice))","b200a3ac":"#for numerical variables\n\ncorr = df.corr()\ncorr_list = corr['SalePrice'].sort_values(ascending = False)\ncorr_list","d147019e":"plt.figure(figsize = (10,6))\nsns.heatmap(corr)","b297a148":"df.drop(['Id', 'Street', 'Utilities'], axis = 1, inplace = True)\ndf_cat = df.select_dtypes(include = 'object')\ndf_num = df.select_dtypes(exclude = 'object')","dc9e1de5":"sns.lmplot(data = df, x = 'GrLivArea', y = 'SalePrice')","3c169a6d":"fig, ax = plt.subplots(1,2, figsize = (20,5))\nsns.boxplot(data = df, x = 'Neighborhood', y = 'SalePrice', ax = ax[0])\nsns.boxplot(data = df, x = 'MSSubClass', y = 'SalePrice', ax = ax[1])","12285441":"fig, ax = plt.subplots(1,2, figsize = (20,5))\nsns.boxplot(data = df, x = 'CentralAir', y = 'SalePrice', ax = ax[0])\nsns.boxplot(data = df, x = 'PavedDrive',y = 'SalePrice', ax = ax[1])","f5dc434c":"def crossval(X, y, reg):\n    result = []\n    for i in range(10):\n        result.append(cross_val_score(reg, X, y).mean())\n    return np.mean(result)","81c1bcd9":"df = pd.get_dummies(df)","95bf2dce":"X = df.drop('SalePrice', axis = 1)\ny = df.SalePrice\nreg = RandomForestRegressor()\ncrossval(X, y,reg)","60c696fe":"#outliers\nsns.lmplot(data = df, x = 'GrLivArea', y = 'SalePrice')","1793282d":"df[df.GrLivArea > 4000]['SalePrice']","d8e2427c":"df.drop(1298, inplace = True)\ndf.drop(523, inplace = True)","4443ef1d":"X = df.drop('SalePrice', axis = 1)\ny = df.SalePrice\nreg = RandomForestRegressor()\ncrossval(X, y, reg)","e5480899":"sns.distplot(df.SalePrice)","57c821de":"for i in df_num.columns:\n    df[i] = np.log1p(df[i])\n    df.reset_index(drop=True, inplace=True)\nsns.distplot(df.SalePrice)","0dfbd8ae":"result = []\nfor i in np.arange(1,10):\n    X_treino, X_teste, Y_treino, Y_teste = train_test_split(X, y, test_size = 0.33, random_state = i)\n    xgb = XGBRegressor(learning_rate = 0.08)\n    xgb.fit(X_treino, Y_treino, verbose=False)\n    score = xgb.score(X_teste,Y_teste)\n    result.append(score)\nnp.mean(result)","183eb136":"df_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_copy['test'] = 0\ndf_test['test'] = 1\nfeat = pd.concat([df_copy, df_test])\n\n\n\n#df_num.drop('SalePrice', axis = 1, inplace = True)\nfor i in df_num.columns:\n    feat[i] = np.log1p(feat[i])\n    feat.reset_index(drop=True, inplace=True)\nfeat.drop(['Id', 'Street', 'Utilities'], axis = 1, inplace = True)\n\nfeat.MSSubClass = feat.MSSubClass.apply(str)\nfeat.update(feat[df_cat.columns].fillna('na'))\nfeat.update(feat[df_num.columns].fillna(0))\nfeat['LotFrontage'] = feat.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\nfeat = pd.get_dummies(feat)","60d4d404":"test = feat[feat.test == 1]\ntrain = feat[feat.test == 0]\n\ntest.drop('SalePrice', axis = 1, inplace = True)","d26c34d8":"xgb = XGBRegressor(learning_rate = 0.08)\nX = train.drop('SalePrice', axis = 1)\ny = train.SalePrice\nxgb.fit(X, y, verbose=False)\nresp = xgb.predict(test)","085188b8":"resp = np.expm1(resp)\n\nsubmit = pd.Series(resp, index=df_test['Id'], name='SalePrice')\nsubmit.to_csv(\"model.csv\", header=True)","c3027ef1":"# Missing Values:","8d4cb2bd":"# df_test transformation and submit:","cd2d4fa6":"# EDA:","4885c598":"# Transforming categorical features:","de4cf7c9":"# Normalization:","8753f869":"# RFR after outliers treatment:","92a663eb":"# Correlation:","3991acee":"# Random Forest Regressor:","f08c4ad7":"Correlation function from: https:\/\/towardsdatascience.com\/the-search-for-categorical-correlation-a1cf7f1888c9","35eed4fd":"# XGB Regressor","329bccdb":"# Cross Validation function:","be72487e":"# Outliers:"}}