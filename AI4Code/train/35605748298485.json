{"cell_type":{"e0e335b1":"code","88920675":"code","84960a68":"code","5bd09e00":"code","9da4fd07":"code","ec4145f8":"code","0b11d4fd":"code","dfd96a0c":"code","aaea705f":"code","ef8c9794":"code","14b951c1":"code","68b3c188":"code","81222bd8":"code","1adfcae6":"code","2bc095df":"code","ec4c6643":"code","7776b8ea":"code","b5103b59":"code","d29ce41b":"code","0ca71ca7":"code","3e15de5a":"code","047ff618":"code","51907736":"code","7c7e442b":"code","62108fe9":"code","2242a76d":"code","8d8890f5":"code","0897775e":"code","53863820":"code","5c5f6077":"code","5e391113":"code","606080a0":"code","44e281c7":"code","486c22dc":"code","88b68502":"code","33adf47e":"code","c8f352d3":"code","b6ca9d7a":"code","1fa96724":"code","f0616a52":"code","e5a7b83f":"code","7349ae86":"code","8f88d93f":"code","fdb97db8":"code","8e719569":"code","9377c6c4":"code","df7744bd":"code","3204df2d":"code","c3ffe75a":"code","c41c9306":"code","c1d4205a":"markdown","cecd3adb":"markdown","824324e5":"markdown","e6df6377":"markdown","69004b8a":"markdown","891c4fae":"markdown","96415ffd":"markdown","87e1f75c":"markdown","f8d48012":"markdown","3b7e78cf":"markdown","aa9d5796":"markdown"},"source":{"e0e335b1":"#import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score \n\n%matplotlib inline","88920675":"#import dataset\ndata = pd.read_csv(\"..\/input\/customer-personality-analysis\/marketing_campaign.csv\"\n                   , sep = \"\\t\")\nprint(f\"Dataset Shape: {data.shape}\")","84960a68":"#inspect dataset\ndata.head()","5bd09e00":"#check number of missing data\nprint(data.isna().sum())\nprint(f\"Income column has missing data\")","9da4fd07":"#repalce 'Income' missing data with mean() of 'Income'\ndata['Income'].fillna(data['Income'].mean(), inplace = True)","ec4145f8":"#check for duplicated values\ndata[data.duplicated()]","0b11d4fd":"#check the datatypes of each columns\nprint(data.dtypes)\nprint(f\"['Dt_Customer'] column is not parsed as datetime datetype\")","dfd96a0c":"#convert 'Dt_Customer' to datetime type\ndata[\"Dt_Customer\"] = pd.to_datetime(data[\"Dt_Customer\"])","aaea705f":"print(data.dtypes)","ef8c9794":"#check the total count of each unqiue value in 'Marital_Status'\nprint(data[\"Marital_Status\"].value_counts())","14b951c1":"#replace data of 'Marital_Status' with alternative values\ndata[\"Marital_Status\"] = data[\"Marital_Status\"].replace({\n    \"Married\":\"Relationship\", \n    \"Together\":\"Relationship\", \n    \"Single\":\"Single\",\n    \"Divorced\":\"Single\", \n    \"Widow\":\"Single\", \n    \"Absurd\":\"Single\", \n    \"Alone\": \"Single\",\n    \"YOLO\":\"Single\", \n})\nprint(data[\"Marital_Status\"].value_counts())","68b3c188":"#check the total count of each unqiue value in 'Education'\nprint(data[\"Education\"].value_counts())","81222bd8":"#replace data of 'Education' with alternative values\ndata[\"Education\"] = data[\"Education\"].replace({\n    \"Graduation\":\"Graduate\", \n    \"PhD\":\"Postgraduate\", \n    \"Master\":\"Postgraduate\",\n    \"2n Cycle\":\"Postgraduate\", \n    \"Basic\":\"Undergraduate\", \n})\nprint(data[\"Education\"].value_counts())","1adfcae6":"#GRoup several features together into simpler, more useful features\ndata[\"Total_Expense\"] = data[\"MntWines\"] + data[\"MntFruits\"] + data[\"MntMeatProducts\"] + data[\"MntFishProducts\"] + data[\"MntSweetProducts\"] + data[\"MntGoldProds\"]\ndata['Total_Children'] = data['Kidhome'] + data['Teenhome']\ndata['Total_Accepted_Campaign'] = data['AcceptedCmp1'] + data['AcceptedCmp2'] + data['AcceptedCmp3'] + data['AcceptedCmp4'] + data['AcceptedCmp5'] + data['Response']\ndata[\"Total_Purchases\"] = data[\"NumWebPurchases\"] + data[\"NumCatalogPurchases\"] + data[\"NumStorePurchases\"] + data[\"NumDealsPurchases\"]","2bc095df":"#calculate age of each customers\ndata['Age'] = 2015 - data[\"Year_Birth\"]","ec4c6643":"#calculate the number of days that customers has enrolled into the company\ndates = []\nfor i in data[\"Dt_Customer\"]:\n    i = i.date()\n    dates.append(i)  \n#Dates of the newest and oldest recorded customer\nprint(\"The newest customer's enrolment date in therecords:\",max(dates))\n\ndata['max_date'] = max(dates)\ndata['max_date'] = pd.to_datetime(data.max_date)\ndata['day_engaged'] = (data['max_date'] - data['Dt_Customer']).dt.days","7776b8ea":"data.head()","b5103b59":"#Calculate the income mean of each education group \neducation_group = data.groupby(\"Education\")\nprint(\"Mean income of the postgraduate customer segment is\",education_group.get_group(\"Postgraduate\")[\"Income\"].mean())\n\nprint(\"Mean income of the undergraduate customer segment is\",education_group.get_group(\"Undergraduate\")[\"Income\"].mean())\n\nprint(\"Mean income of the graduate customer segment is\",education_group.get_group(\"Graduate\")[\"Income\"].mean())","d29ce41b":"#Calculate the income mean of each ,marital status group\nstatus_group = data.groupby(\"Marital_Status\")\nprint(\"Mean income of the customer segment in a relationship status is\",status_group.get_group(\"Relationship\")[\"Income\"].mean())\n\nprint(\"Mean income of the customer segment in a single status is\",status_group.get_group(\"Single\")[\"Income\"].mean())","0ca71ca7":"#plot bar chart of 'Total_Expense' against 'Education'\nplt.figure(figsize=(16,5))\nsns.barplot(x = data['Total_Expense'], y = data['Education'])\nplt.title('Total_Spent based on the Education Level')\nplt.show()","3e15de5a":"#plot bar chart of 'Total_Expense' against 'Marital_Status'\nplt.figure(figsize=(16,5))\nsns.barplot(x = data['Total_Expense'], y = data['Marital_Status'])\nplt.title('Total Expense based on the Marital Status')\nplt.show()","047ff618":"#plot histogram of 'Income'\nfig = px.histogram (data, x = \"Income\", template = 'seaborn')\nfig.update_layout(bargap = 0.2)\nfig.show()","51907736":"#plot histogram of 'Income'\nfig = px.histogram (data, x = \"NumWebVisitsMonth\", template = 'seaborn')\nfig.update_layout(bargap = 0.2)\nfig.show ()","7c7e442b":"#preparing data\nlisted = [\"MntWines\",\"MntFruits\",\"MntMeatProducts\",\"MntFishProducts\",\"MntSweetProducts\",\"MntGoldProds\"]\ngp = data.groupby([\"Marital_Status\"])[listed].sum().reset_index()\ngp.rename(columns={\"Marital_Status\":\"Marital Status\",\"MntWines\":\"Wines\",\"MntFruits\":\"Fruits\",\"MntMeatProducts\":\"Meat\", \"MntFishProducts\":\"Fish\" , \"MntSweetProducts\":\"Sweat\", \"MntGoldProds\":\"Gold\"}, inplace=True)\n\n# plot grouped bar chart\nax1=gp.plot(x = \"Marital Status\",\n        kind = 'bar',\n        stacked = False,\n        figsize = (16, 5),\n        title = 'Total Amount Spent by Customer on Each Category Of Product based on Marital Status')\n\nax1.set_ylabel(\"Total Amount Spent\")\nplt.show()","62108fe9":"#Preparing data\ntotal_spent_on_wines = data[\"MntWines\"].sum()\ntotal_spent_on_fruits = data[\"MntFruits\"].sum()\ntotal_spent_on_meat = data[\"MntMeatProducts\"].sum()\ntotal_spent_on_fish = data[\"MntFishProducts\"].sum()\ntotal_spent_on_sweet = data[\"MntSweetProducts\"].sum()\ntotal_spent_on_gold = data[\"MntGoldProds\"].sum()\n\nlabelling = [\"Wines\", \"Fruit\", \"Meat\", \"Fish\", \"Sweat\", \"Gold\"]\nlist_of_total_spent = [total_spent_on_wines, total_spent_on_fruits, total_spent_on_meat, total_spent_on_fish, total_spent_on_sweet, total_spent_on_gold]\n\ncolors = (\"orange\", \"cyan\", \"green\", \"grey\", \"yellow\", \"red\")\n\n\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}% \\n ({v:d})'.format(p = pct,v = val)\n    return my_autopct\n\n# Creating pie chart\nfig, ax = plt.subplots(figsize = (12, 10))\nwedges, texts, autotexts = ax.pie(list_of_total_spent,\n                                      autopct = make_autopct(list_of_total_spent),\n                                      labels = labelling,\n                                      colors = colors,\n                                      startangle = 90,\n                                      textprops = dict(color = \"black\"))\n\n\n# Adding legend\nax.legend(wedges, labelling,\n          title = \"Type of Products\",\n          loc = \"center left\",\n          bbox_to_anchor = (1, 0, 0.5, 1))\n \n# plt.setp(autotexts, size = 8, weight =\"bold\")\nplt.setp(autotexts, size = 10)\nax.set_title(\"Type of Products that Customers Spend On\")\n \n# show plot\nplt.show()","2242a76d":"# Preparing Data\ntotal_web = data[\"NumWebPurchases\"].sum()\ntotal_catalog = data[\"NumCatalogPurchases\"].sum()\ntotal_store_purchase = data[\"NumStorePurchases\"].sum()\n\n\nx = [\"Web Purchases\", \"Catalog Purchases\", \"In Store Purchases\"]\ny = [total_web, total_catalog, total_store_purchase]\n\nc = ['orange', 'green', 'grey']\n\n#plot bar chart of the count of each purchase type\nfig, axes = plt.subplots()\naxes.bar(x, y, color = c, align = \"center\", width = 0.8, alpha = 0.5)\n\nfor i in range(len(x)):\n    plt.text(i,y[i],y[i], ha=\"center\",va=\"bottom\")\n\n\naxes.set_xlabel(\"Purchase Type\", fontsize = 10)\naxes.set_ylabel(\"Number of Purchase\", fontsize = 10)\naxes.set_title(\"Number of Purchase Based on Purchase Type\")\nplt.ylim(0,14000)\nplt.show()","8d8890f5":"# Correlation between webvisitmonth and webpurchase\ndf4 = data[['NumWebVisitsMonth', 'NumWebPurchases']].copy()\ndf4\n\ncorrelation_mat = df4.corr()\n\nsns.heatmap(correlation_mat, annot = True)\n\nplt.title('Correlation Heat Map')\nplt.show()","0897775e":"#drop unnecessary columns which already have better features\ncolumns_to_drop = [\"Year_Birth\", \"Dt_Customer\", \"max_date\", \"Kidhome\", \"Teenhome\", \"MntWines\", \"MntFruits\", \n                   \"MntMeatProducts\", \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\", \"NumWebPurchases\", \n                   \"NumCatalogPurchases\", \"NumStorePurchases\", \"NumDealsPurchases\", \"AcceptedCmp1\", \n                  \"AcceptedCmp2\", \"AcceptedCmp3\", \"AcceptedCmp4\", \"AcceptedCmp5\", \"Response\"]\n\ndata.drop(columns = columns_to_drop, axis = 1, inplace = True)","53863820":"#drop columns which don't have clear column description\nother_columns_to_drop = [\"ID\", \"Z_CostContact\", \"Z_Revenue\"]\ndata.drop(columns = other_columns_to_drop, axis = 1, inplace = True)","5c5f6077":"data.describe()","5e391113":"#correlation heatmap between each features\nplt.figure(figsize = (15,15))\nsns.heatmap(data.corr(), annot = True)\nplt.show()","606080a0":"#Apply label encoding to categorical variable\nlabel_encoder = LabelEncoder()\ndata[[\"Education\", \"Marital_Status\"]] = data[[\"Education\", \"Marital_Status\"]].apply(label_encoder.fit_transform)","44e281c7":"data.head()","486c22dc":"#Apply feature normalisation to every numerical features\nscaled_features = StandardScaler().fit_transform(data.values)\nscaled_data = pd.DataFrame(scaled_features, index = data.index, columns = data.columns)","88b68502":"scaled_data.head()","33adf47e":"#Use loops to record down the WCSS Points of different number of clusters\nwcss_points =[]\nfor i in range (1, 20):\n model = KMeans(n_clusters = i,init = 'k-means++',random_state = 1)\n model.fit(scaled_data)\n wcss_points.append(model.inertia_)","c8f352d3":"#We use elbow method to determine optimum cluster points\nplt.figure(figsize = (16, 8))\nplt.plot(range(1, 20), wcss_points, 'bx-')\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","b6ca9d7a":"#silhouette scoring is alternative method of elbow method\nsilhouette_scores = []\nfor i in range(2, 10):\n    model2 = KMeans(n_clusters = i, random_state = 1)\n    c = model2.fit_predict(scaled_data)\n    silhouette_scores.append(silhouette_score(scaled_data, model2.fit_predict(scaled_data))) ","1fa96724":"#USe the highest bar chart to determine the optimum clusters points\nplt.bar(range(2, 10), silhouette_scores) \nplt.xlabel('Number of clusters', fontsize = 20) \nplt.ylabel('Silhouette Scores', fontsize = 20) \nplt.show()","f0616a52":"#optimum cluster point is 2\nnumber_of_clusters = 2","e5a7b83f":"#Create final KMeans models using optimum cluster points\nfinal_model = KMeans(n_clusters=number_of_clusters, random_state=1).fit(scaled_data)","7349ae86":"#Make predictions using the final KMeans model\nprediction = final_model.predict(scaled_data)","8f88d93f":"#Append the result to original dataset (not yet undergone feature normalisation)\ndata[\"result_cluster\"] = prediction + 1\ndata.head()","fdb97db8":"#scatter plot of 'Total_Expense' against 'result_cluster'\npl = sns.scatterplot(data = data, \n                     x = data[\"Total_Expense\"], y = data[\"Income\"], \n                     hue = data[\"result_cluster\"], palette= [\"#d21262\", \"#26bde2\"])\n\npl.set_title(\"Cluster's Profile Based On Income And Total_Spent\")\npl.set(ylim=(0, 200000))\nplt.legend()\nplt.show()","8e719569":"pl = sns.countplot(x = data[\"result_cluster\"])\npl.set_title(\"Distribution Of The Clusters\")\nplt.show()","9377c6c4":"#Swarmplot of \"result_cluster\" vs \"Total_Expense\"\nplt.figure()\npl=sns.swarmplot(x=data[\"result_cluster\"], y=data[\"Total_Expense\"], color= \"#CBEDDD\", alpha=0.5 )\npl=sns.boxenplot(x=data[\"result_cluster\"], y=data[\"Total_Expense\"], palette=[\"#d21262\", \"#26bde2\"])\nplt.show()","df7744bd":"#barplot of counts of number of campaings accepted by each clusters\nplt.figure()\npl = sns.countplot(x = data[\"Total_Accepted_Campaign\"], hue = data[\"result_cluster\"], palette = [\"#d21262\", \"#26bde2\"])\npl.set_title(\"Number of Campaigns Accepted\")\npl.set_xlabel(\"Number Of Accepted Campaigns\")\nplt.show()","3204df2d":"#barplot of counts of number of engaged days by each clusters\nplt.figure()\npl=sns.boxenplot(y = data[\"day_engaged\"],x = data[\"result_cluster\"], palette = [\"#d21262\", \"#26bde2\"])\npl.set_title(\"Number of Days Engaged\")\nplt.show()","c3ffe75a":"data.columns","c41c9306":"#KDEplots of \"Age\", \"Education\", \"Marital_Status\", \"NumWebVisitsMonth\", \"Total_Children\" to determine the characteristic of each clusters\nPersonal = [\"Age\", \"Education\", \"Marital_Status\", \"NumWebVisitsMonth\", \"Total_Children\"]\n\nfor i in Personal:\n    plt.figure()\n    sns.jointplot(x = data[i], y = data[\"Total_Expense\"], hue = data[\"result_cluster\"], \n                  kind = \"kde\", palette = [\"#d21262\", \"#26bde2\"])\n    plt.show()","c1d4205a":"# Data Visualisation","cecd3adb":"# Importing libraries to use","824324e5":"## Prepared by\n1. LEE SZE YUAN \t\t\t(A19EC0068)\n2. LOH YEW CHONG \t\t(A19EC0076)\n3. ALVIN HEE JUN SHEUNG \t(A19EC0015) ","e6df6377":"# Data Grouping and Aggregation Operation","69004b8a":"## Replace data to make data more sensible","891c4fae":"## Drop unnecessary columns for Machine Learning","96415ffd":"### Handling incorrect formatted data","87e1f75c":"### Check for duplicates","f8d48012":"### Handling Missing Data ","3b7e78cf":"# Data Cleaning and Preparation","aa9d5796":"# Machine Learning (Clustering)"}}