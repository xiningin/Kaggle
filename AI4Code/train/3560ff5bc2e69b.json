{"cell_type":{"5b49b3a4":"code","582f7ec1":"code","52d93127":"code","f6456d15":"code","d583dbab":"code","d84ebdec":"code","698c2425":"code","54b1b517":"code","80ff255e":"code","4747669e":"code","a3806c5a":"code","16c20c4e":"code","47e9b9da":"code","1f027ac1":"code","8911a56b":"code","269b08ab":"code","f9a43df3":"code","f47282ee":"code","682df1a4":"code","516190a4":"markdown"},"source":{"5b49b3a4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout   \nfrom keras import optimizers\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","582f7ec1":"\n\ndf1=pd.read_csv('..\/input\/carsensorsdata\/Opel1.csv')\ndf2=pd.read_csv('..\/input\/carsensorsdata\/Opel2.csv')\ndf3=pd.read_csv('..\/input\/carsensorsdata\/Peugeot1.csv')\ndf4=pd.read_csv('..\/input\/carsensorsdata\/Peugeot2.csv')\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n#df1[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']] = sc.fit_transform(df1[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']])\n#df2[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']] = sc.fit_transform(df2[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']])\n#df3[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']] = sc.fit_transform(df3[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']])\n#df4[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']] = sc.fit_transform(df4[['AltitudeVariation', 'VehicleSpeedInstantaneous', 'VehicleSpeedAverage', 'VehicleSpeedVariance','VehicleSpeedVariation', 'LongitudinalAcceleration', 'EngineLoad', 'EngineCoolantTemperature', 'ManifoldAbsolutePressure', 'EngineRPM','MassAirFlow','IntakeAirTemperature','VerticalAcceleration','FuelConsumptionAverage']])\n\ndf_Dataset=pd.concat([df1,df2,df3,df4],axis=0)","52d93127":"df_Dataset.head(400)","f6456d15":"if (df_Dataset.isnull().sum().sum()!=0):\n    df_Dataset.dropna(axis=0, how='any', thresh=None, subset=None, inplace=True)","d583dbab":"df_Dataset.head()","d84ebdec":"y = df_Dataset['drivingStyle']\nX = df_Dataset.drop(['drivingStyle','traffic','roadSurface'], axis=1)\n\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=0)","698c2425":"X\n","54b1b517":"test_X","80ff255e":"from sklearn.preprocessing import MinMaxScaler\n\nfeature_scaler = MinMaxScaler()\ntrain_X = feature_scaler.fit_transform(train_X)\ntest_X = feature_scaler.transform(test_X)","4747669e":"Xtrain, Xval, Ytrain, Yval = train_test_split(train_X, train_y, test_size=0.2, random_state=5) #","a3806c5a":"model = Sequential()\n\nmodel.add(Dense(train_X.shape[1] * 128, input_dim=train_X.shape[1], activation='relu'))   \n\nmodel.add(Dense(1, activation='sigmoid'))\n#model.add(Dense(1, activation='softmax'))\n\nmodel.summary()","16c20c4e":"opt = optimizers.SGD(learning_rate=0.1)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n\nhistory = model.fit(train_X, train_y, epochs=10000, validation_data=(Xval, Yval), batch_size=10)","47e9b9da":"test_loss, test_acc = model.evaluate(test_X,  test_y, verbose=2)\n\nprint('\\nAccuracy on test data:', test_acc)","1f027ac1":"plt.plot(history.history['accuracy'], label='acc')\nplt.plot(history.history['val_accuracy'], label='val_acc')\nplt.ylim((0, 1))\nplt.legend()","8911a56b":"plt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss')\nplt.ylim((0, 1))\nplt.legend()","269b08ab":"prediction=model.predict(test_X)","f9a43df3":"np.around(prediction, decimals=4, out=None)","f47282ee":"df = pd.DataFrame(data=prediction,  columns=[\"DrivingRating\"])\nnp.around(df, decimals=3, out=None)\n\n","682df1a4":"prediction = model.predict(test_X) > 0.5\nprediction = (prediction > 0.5) * 1\naccuracy_nn = metrics.accuracy_score(test_y, prediction) * 100\nprint(accuracy_nn)","516190a4":"X.index"}}