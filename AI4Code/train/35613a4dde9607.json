{"cell_type":{"70b5b044":"code","4ef2a986":"code","d33f48b1":"code","12d2e6b1":"code","01853553":"code","7d21a206":"code","0e40868c":"code","46d6b931":"code","d7fdd08a":"code","63012fab":"code","0b78639f":"code","4473bc77":"code","f3e96b2b":"code","6b81e8af":"code","29fb15dd":"code","45417afb":"code","9912baad":"code","fdab4428":"code","1ce4a77e":"code","633a7e82":"code","d3e67079":"code","f1ca2283":"code","acb8aec2":"code","a4614a77":"code","9d23bed5":"code","c423b750":"code","068f7742":"code","e72ae132":"code","da8a050f":"code","89e0510d":"code","9a088b78":"code","2e9ba661":"code","52f82363":"markdown"},"source":{"70b5b044":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ef2a986":"sample_sub_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nshops_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nsales_train_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nitem_cat_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nitems_df = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')","d33f48b1":"sales_train_df.head()","12d2e6b1":"shops_df.head()","01853553":"item_cat_df.head()","7d21a206":"items_df.head()","0e40868c":"test_df.head()","46d6b931":"sample_sub_df.head()","d7fdd08a":"print(sales_train_df.shape)\nprint(shops_df.shape)\nprint(item_cat_df.shape)\nprint(items_df.shape)","63012fab":"# Merge all the given dataframe to a single dataframe\ntrain_df = pd.merge(sales_train_df, shops_df, on='shop_id')\ntrain_df = pd.merge(train_df, items_df, on='item_id')\ntrain_df = pd.merge(train_df, item_cat_df, on='item_category_id')\n# train_df.head()","0b78639f":"# train_df[(train_df['item_id'] == 22154) & (train_df['item_category_id'] == 37) & (train_df['shop_id'] == 25)]","4473bc77":"train_df.groupby('item_id').mean()['item_price']","f3e96b2b":"train_df.shape","6b81e8af":"# Merge dataframes to get test data features\ntest_df = pd.merge(test_df, items_df, on='item_id')\ntest_df = pd.merge(test_df, item_cat_df, on='item_category_id')\n# test_df = pd.merge(test_df, train_df.groupby('item_id').mean()['item_price'], how='left', on=['item_id'])\ntest_df.head()","29fb15dd":"test_df.shape","45417afb":"train_df.isna().sum()","9912baad":"test_df.isna().sum()","fdab4428":"print(f'Shape of training data: {train_df.shape}')\nprint(f'Shape of test data: {test_df.shape}')","1ce4a77e":"train_df = train_df.drop(['shop_name', 'item_name', 'item_category_name'], axis=1)\ntest_df = test_df.drop(['item_name', 'item_category_name'], axis=1)","633a7e82":"train_df.head()","d3e67079":"test_df.sort_values('ID').head()","f1ca2283":"X_train = train_df.drop(['item_cnt_day'], axis=1)\nY_train = train_df['item_cnt_day']","acb8aec2":"test_df['date_block_num'] = np.uint8(34)\ntest_df['month'] = np.uint8(11)\ntest_df['year'] = np.uint8(223)","a4614a77":"X_train['date'] = pd.to_datetime(X_train['date'])\nX_train['month'] = np.uint8(X_train['date'].dt.month)\nX_train['year'] = np.uint8(X_train['date'].dt.year)","9d23bed5":"X_train.head()","c423b750":"test_df.head()","068f7742":"# TODO\ncategoricals = ['item_category_id', 'item_id', 'shop_id', 'date_block_num', 'month', 'year']\nnon_cat = ['item_price']","e72ae132":"params = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': {'rmse'},\n            'subsample': 0.4,\n            'subsample_freq': 1,\n            'learning_rate': 0.2,\n            'num_leaves': 25,\n            'feature_fraction': 0.8,\n            'lambda_l1': 1,\n            'lambda_l2': 1\n        }\n\nfolds = 10\nseed = 666\n\nkf = StratifiedKFold(n_splits=folds, shuffle=False, random_state=seed)\n\nmodels = []\nfor train_index, val_index in kf.split(X_train, Y_train):\n    x_train = X_train[categoricals].iloc[train_index]\n    x_val = X_train[categoricals].iloc[val_index]\n    y_train = Y_train.iloc[train_index]\n    y_val = Y_train.iloc[val_index]\n    \n    lgb_train = lgb.Dataset(x_train, y_train, categorical_feature=categoricals)\n    lgb_eval = lgb.Dataset(x_val, y_val, categorical_feature=categoricals)\n    gbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=500,\n                valid_sets=(lgb_train, lgb_eval),\n                early_stopping_rounds=100,\n                verbose_eval = 100)\n    models.append(gbm)","da8a050f":"sum([model.predict(test_df.sort_values('ID').drop('ID', axis=1)) for model in models])\/folds","89e0510d":"sample_sub_df['item_cnt_month'] = sum([model.predict(test_df.sort_values('ID').drop('ID', axis=1)) for model in models])\/folds","9a088b78":"sample_sub_df['item_cnt_month'] = np.clip(sample_sub_df['item_cnt_month'], 0 ,20)","2e9ba661":"sample_sub_df.to_csv('submission.csv', index=False)\nsample_sub_df","52f82363":"Check of NaNs"}}