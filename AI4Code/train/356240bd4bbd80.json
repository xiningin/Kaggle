{"cell_type":{"5045e82a":"code","cbc8a462":"code","e9c94448":"code","e13d553c":"code","7df4aec6":"code","097c4d1d":"code","80afd9c7":"code","c729d100":"code","32dd9eb5":"code","d06967c7":"code","2587b550":"code","a1453592":"code","3ef7e383":"code","995bd145":"code","9dbf13e3":"code","d0d41e5a":"markdown","cca517d4":"markdown","88c63703":"markdown","eac4b03b":"markdown","31df9f98":"markdown","dc5fa096":"markdown"},"source":{"5045e82a":"import numpy as np \nimport pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport os","cbc8a462":"TRAIN = \"\/kaggle\/input\/rice-leaf-diseases\/rice_leaf_diseases\/\"\nTEST = \"\/kaggle\/input\/rice-leaf-diseases\/rice_leaf_diseases\/\"\nSIZE = (64, 64)\nBATCH = 16\nEPOCHS = 10\n\nclass_names = os.listdir(TRAIN)","e9c94448":"class_names","e13d553c":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    TRAIN,\n    validation_split=0.1,\n    subset=\"training\",\n    seed=1337,\n    image_size=SIZE,\n    batch_size=BATCH,\n    label_mode=\"int\",\n    class_names=class_names\n)\n\n","7df4aec6":"validation_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    TEST,\n    validation_split=0.1,\n    subset=\"validation\",\n    seed=1337,\n    image_size=SIZE,\n    batch_size=BATCH,\n    label_mode=\"int\",\n    class_names=class_names\n)","097c4d1d":"plt.figure(figsize=(20, 10))\nfor images, targets in train_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(class_names[np.argmax(targets[i])])\n        plt.axis(\"off\")\nplt.show()","80afd9c7":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(random_state=1, max_iter=300)","c729d100":"train_samples = sum([BATCH for [x, _] in train_ds])\ntrain_samples","32dd9eb5":"class_ids = [x for x in range(len(class_names))]\nclass_ids","d06967c7":"for epoch in range(EPOCHS):\n    print(f\"Epoch {epoch+1}\/{EPOCHS}\")\n    for images, classes in train_ds.take(train_samples \/\/ BATCH):\n        images = images.numpy().reshape((images.shape[0], images.shape[1]*images.shape[2]*images.shape[3]))\n        classes = classes.numpy()\n        \n        clf.partial_fit(images, classes, classes=class_ids)\n        partial_score = clf.score(images, classes)\n        print(f\"...partial score: {partial_score}\")","2587b550":"val_samples = sum([BATCH for [x, _] in validation_ds])\nval_samples","a1453592":"y_validation = []\ny_validation_pred = []\n\n\nfor images, targets in validation_ds.take(val_samples \/\/ BATCH):\n    for i in range (12):\n        image = images[i].numpy().reshape((images[i].shape[0]*images[i].shape[1]*images[i].shape[2]))\n        label = int(targets[i])\n        prediction = clf.predict([image])\n        y_validation_pred.append(prediction[0])\n        y_validation.append(label)","3ef7e383":"y_validation","995bd145":"y_validation_pred","9dbf13e3":"from sklearn.metrics import confusion_matrix\nimport plotly.express as px\ncm = confusion_matrix(y_validation, y_validation_pred)\nfig = px.imshow(cm, x=class_names, y=class_names, title=\"Validation\")\nfig.update_xaxes(side=\"top\")\nfig.show()","d0d41e5a":"## Matriz de confusion","cca517d4":"# [Ir a Parte A](https:\/\/www.kaggle.com\/acuamarco\/ia02-mrodriguez-2-a)","88c63703":"## 1. Implemente y Ajuste un Multi Layers Perceptron con Scikitlearn (3 pts)","eac4b03b":"## Model","31df9f98":"# [Ir a Parte A](https:\/\/www.kaggle.com\/acuamarco\/ia02-mrodriguez-2-a)","dc5fa096":"### Load data"}}