{"cell_type":{"f1dece08":"code","6d00eee5":"code","40c6c459":"code","a3a8259f":"code","9e87c4a8":"code","62768e75":"code","8cb92bcb":"code","04b3c9ae":"code","9aa9d83d":"code","cf0d3810":"code","21331bc5":"code","e5933e9b":"code","2fb76c0f":"code","5ec2cbcd":"code","7c8baef2":"code","7a2c21f2":"code","33232027":"code","48a08569":"code","8e2b3405":"code","97832ed5":"code","1eef3ca6":"code","80860aa5":"code","86933591":"code","6ad4dfe5":"code","6cfa8dd1":"code","f4a4d866":"code","aa5b1cf8":"code","105787fa":"code","80415818":"code","0af7bf67":"code","0a064ad2":"code","48382c44":"code","c30d381e":"code","1238f7b5":"code","39fe720e":"code","9839b649":"code","dd24b2f7":"code","f33e1d3d":"code","40207cb0":"code","eac8425d":"code","5df8bd19":"code","da895574":"code","b3b4244d":"code","6ebf285b":"code","47f39381":"code","a1f8a8b0":"code","9cb46f36":"code","0fb9d155":"code","1fcc0d32":"code","7fab9058":"code","24f276df":"code","e8c51ab2":"code","0986ba81":"code","85bdacfd":"code","70cef33c":"code","e93a6bfa":"code","53a92914":"code","a0d306e0":"code","946a7e3f":"code","3195f7bb":"code","7979a7ca":"code","48f7a038":"code","68b94294":"code","a78a184f":"code","5fb1fffe":"code","d6c3667a":"code","e9644b03":"code","6a4f4253":"code","6c53e584":"code","c7458242":"code","e882e9a8":"code","1407ca1b":"code","5fc3db16":"code","9133bb83":"code","8b6d17a0":"code","079450c9":"code","188fd676":"code","e1add525":"code","9600f517":"code","ef801262":"code","8d903e0a":"code","ca5d5b65":"code","3b412750":"code","55fc4a94":"code","964e6241":"code","78000067":"code","94a1beb7":"code","6bb74750":"code","a50e292c":"code","c3e41237":"code","36c54674":"code","997fb765":"code","75946ecb":"code","a5a4f637":"code","2271c72d":"code","d088a271":"code","f636b11a":"code","e4c8f0b1":"code","f7ba5960":"code","a238858f":"code","e71ab45d":"code","712ce312":"code","f6f39344":"code","09a3050a":"code","488ec775":"code","1b3fd989":"code","699c1ffb":"code","195cdd41":"code","018bc04c":"code","b99c6a45":"code","cb0190ff":"code","22e37c48":"code","d824abc9":"code","1ba1474f":"code","45e4f096":"code","49562462":"code","58077242":"code","f4687e61":"code","092742cf":"code","7e17e1c7":"code","17557ec5":"code","6335eea5":"code","27d6a827":"code","82ad67be":"code","321fee7d":"code","611838b0":"code","4dbbee3b":"code","84042950":"code","6859aea4":"code","021ff4cf":"code","45eba8f6":"code","dd49c245":"code","5abb3d90":"code","860ec9bf":"code","105b153b":"code","f6f8d6ed":"code","161fb61d":"code","04cdd40f":"code","3ec6e40b":"code","ba261ec8":"code","244c464c":"code","31a1f96c":"code","f81c1101":"code","701e4a0c":"code","b293d531":"code","3f175908":"code","6ba04a5b":"code","0ad01738":"code","e71beb40":"code","3f56ada6":"code","c35ca547":"code","724b09bc":"code","bdf5eefa":"code","764e1972":"code","0c09d974":"markdown","ae364924":"markdown","dc0498ed":"markdown","8ed69373":"markdown","a1422a60":"markdown","55fd7e47":"markdown","db36a2ec":"markdown","d82503ed":"markdown","f0b33324":"markdown","62f87fff":"markdown","481317d5":"markdown","0c274f37":"markdown","13621d36":"markdown","bb905c92":"markdown","76137d90":"markdown","cb6f718e":"markdown","65ad3efb":"markdown","1a9636a3":"markdown","898434aa":"markdown","dccedb8b":"markdown","0b046337":"markdown","c42dfce6":"markdown","b85b0770":"markdown","445229cb":"markdown","f8a40fcb":"markdown","1401045a":"markdown","bd12d563":"markdown","7fd265ee":"markdown","4332cd8a":"markdown","67fab28c":"markdown","88c7cdb8":"markdown","64461336":"markdown","30cad5a4":"markdown","862b41c0":"markdown","5de06650":"markdown","dba8080d":"markdown","cb4d9199":"markdown","7600239f":"markdown","d7537113":"markdown","fc0c0513":"markdown","50540871":"markdown","0c32e14d":"markdown","084f0867":"markdown","2a353fb5":"markdown","2df2428c":"markdown","3675df8f":"markdown","accf560e":"markdown","27391d5c":"markdown","c0febe25":"markdown","fc51cc1c":"markdown","18884f2b":"markdown","70533042":"markdown"},"source":{"f1dece08":"# regular libraries\nimport numpy as np\nimport pandas as pd\nimport scipy.stats\nimport json\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n# sklearn.preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n# sklearn.ensemble\nfrom sklearn.ensemble import RandomForestClassifier\n\n# sklearn.model_selection\nfrom sklearn.model_selection import train_test_split as tts, GridSearchCV\n\n# sklearn.metrics\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix, roc_auc_score, roc_curve, plot_roc_curve, classification_report\n\n# sklearn.neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# sklearn.tree\nfrom sklearn.tree import DecisionTreeClassifier\n\n# sklearn.svm\nfrom sklearn.svm import SVC\n\n# sklearn.linear_models\nfrom sklearn.linear_model import LogisticRegression\n\n# sklearn.utils\nfrom sklearn.utils import resample\n\n# pandas future warning\nimport warnings\n\n# sweetviz for autoeda test\nimport sweetviz as sv","6d00eee5":"warnings.simplefilter(action='ignore', category=FutureWarning)","40c6c459":"sns.set_style('darkgrid')\nsns.set_palette('muted')","a3a8259f":"data_path = \"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\"","9e87c4a8":"df = pd.read_csv(data_path)","62768e75":"print(\"Dataframe has {} rows and {} columns.\".format(df.shape[0], df.shape[1]))","8cb92bcb":"df.head(10)","04b3c9ae":"df.target.value_counts()","9aa9d83d":"df.info()","cf0d3810":"df.describe()","21331bc5":"def column_info(dataframe_col, countplot=True, value_counts=True, missing=True, statistical_info=True):\n    \"\"\"\n    dataframe_col -> pandas.DataFrame.column_name\n    Prints out the information about given column.\n    \"\"\"\n    if countplot:\n        sns.countplot(dataframe_col)\n        plt.title('Value counts of given column')\n    if value_counts:\n        print(\"Value counts\")\n        print(\"-------------\")\n        print(dataframe_col.value_counts())\n        print(\"-------------\")\n    if missing:\n        print(\"Missing values\")\n        print(\"---------------\")\n        print(\"The percent of missing values: %0.1f%%\" % (dataframe_col.isnull().sum() * 100 \/ len(dataframe_col)))\n        print(\"Total missing values:\", dataframe_col.isnull().sum())\n        print(\"-------------\")\n    if statistical_info:\n        print(\"Statistical info\")\n        print(\"----------------\")\n        print(dataframe_col.describe())\n        print(\"----------------\")","e5933e9b":"def vis_missing(dataframe, bar=True, dendrogram=True, matrix=True, heatmap=True):\n    \"\"\"\n    Title says all.\n    \"\"\"\n    if bar:\n        msno.bar(dataframe)\n        plt.title(\"Missing values (bar)\")\n    if dendrogram:\n        msno.dendrogram(dataframe)\n        plt.title(\"Missing values (dendrogram)\")\n    if matrix:\n        msno.matrix(dataframe)\n        plt.title(\"Missing values (matrix)\")\n    if heatmap:\n        msno.heatmap(dataframe)\n        plt.title(\"Missing values (heatmap)\")","2fb76c0f":"def missing_by_row(dataframe, threshold=4, drop=False, info=True):\n    \"\"\"\n    dataframe -> pandas DataFrame object\n    threshold -> integer\n    drop, info -> boolean\n\n    If info equals to true, prints out the missing values in one row.\n    If drop equals to true, drops the rows that has more null values than threshold.\n\n    \"\"\"\n    arr = []\n    for row_idx in range(len(dataframe)):\n        arr.append(dataframe.iloc[row_idx, :].isnull().sum())\n\n\n    if info:\n        print('Max missing values in row:', max(arr))\n        print('Min missing values in row', min(arr))\n        print('Mean of missing values in all rows:', sum(arr)\/len(arr))\n\n    if drop:\n        sumRow = 0\n        dropRows = []\n        for row_idx in range(len(dataframe)):\n            if dataframe.iloc[row_idx, :].isnull().sum() >= threshold:\n                dropRows.append(row_idx)\n                sumRow += 1\n\n        dataframe.drop(dataframe.index[dropRows], inplace=True)\n\n        print(\"{} rows dropped.\".format(sumRow))\n        print(\"Shape after dropping rows: \", dataframe.shape)","5ec2cbcd":"def null_info(dataframe, dataframe_col, target_col):\n    \"\"\"\n    dataframe -> pandas DataFrame object\n    dataframe_col -> string\n    target_col -> string\n\n    Prints out target values of missing datas.\n    \"\"\"\n    arr = []\n    temp_df = dataframe[[dataframe_col, target_col]]\n    condition = dataframe[dataframe_col].isna()\n    temp_df = temp_df[condition]\n    tvc = temp_df[target_col].value_counts()\n    print(tvc)","7c8baef2":"report = sv.analyze(df)\nreport.show_notebook(layout='widescreen', scale=0.8)","7a2c21f2":"sns.countplot(df.target, hue=df.gender)","33232027":"sns.countplot(df.gender)","48a08569":"g = sns.countplot(df.education_level, hue=df.gender)\ng.set_xticklabels(g.get_xticklabels(), rotation=60)","8e2b3405":"g = sns.countplot(df.major_discipline, hue=df.gender)\ng.set_xticklabels(g.get_xticklabels(), rotation=60)","97832ed5":"g = sns.countplot(data=df,\n              x='education_level',\n              hue='major_discipline')\ng.set_xticklabels(g.get_xticklabels(), rotation=60)\nplt.legend(loc='upper right')","1eef3ca6":"sns.catplot(data=df, x='city_development_index', y='gender', hue='target')","80860aa5":"sns.countplot(data=df, \n              x='last_new_job',\n              hue='education_level')","86933591":"g = sns.countplot(data=df, \n              x='company_type',\n              hue='company_size')\ng.set_xticklabels(g.get_xticklabels(), rotation=60)","6ad4dfe5":"sns.boxplot(x=df.city_development_index)","6cfa8dd1":"sns.violinplot(data=df, x='target', y='city_development_index')","f4a4d866":"vis_missing(df)","aa5b1cf8":"tvc = df.target.value_counts()\nprint(tvc)\nprint(tvc[0]-tvc[1])","105787fa":"DROP_THRESHOLD = 4\ndf.shape","80415818":"missing_by_row(df, threshold=DROP_THRESHOLD, drop=False, info=True)","0af7bf67":"missing_by_row(df, threshold=DROP_THRESHOLD, drop=True, info=False)","0a064ad2":"tvc = df.target.value_counts()\nprint(tvc)\nprint(tvc[0]-tvc[1])","48382c44":"vis_missing(df)","c30d381e":"def categorize_gender(dataframe):\n    map = {\n      'Male': 0,\n      'Other': 1,\n      'Female': 2\n    }\n    \n    dataframe.gender.replace(map, inplace=True)\n    dataframe['gender'] = dataframe.gender.astype('category')","1238f7b5":"def impute_gender(dataframe):\n    # Filling with most frequent value\n    dataframe['gender'] = dataframe['gender'].fillna(dataframe.gender.describe().top)\n    print(\"Missing values after filling:\", dataframe.gender.isnull().sum())","39fe720e":"column_info(df.gender)","9839b649":"categorize_gender(df)\ndf.info()","dd24b2f7":"impute_gender(df)","f33e1d3d":"df.gender.isnull().sum()","40207cb0":"def categorize_last_new_job(dataframe):\n    map = {\n      'never': 0,\n      '1': 1,\n      '2': 2,\n      '3': 3,\n      '4': 4,\n      '>4': 5,\n    }\n    dataframe.last_new_job.replace(map, inplace=True)\n    dataframe['last_new_job'] = dataframe.last_new_job.astype('category')","eac8425d":"def impute_last_new_job(dataframe, method):\n    if method == 'mode':\n        dataframe['last_new_job'] = dataframe['last_new_job'].fillna(dataframe.last_new_job.describe().top)\n    elif method == 'drop':\n        dataframe.dropna(subset=['last_new_job'], inplace=True)\n    else:\n        print('Please enter a valid method.')\n        print(\"Missing values after filling:\", dataframe.last_new_job.isnull().sum())","5df8bd19":"column_info(df.last_new_job)","da895574":"null_info(df, 'last_new_job', 'target')","b3b4244d":"categorize_last_new_job(df)","6ebf285b":"impute_last_new_job(df, method='mode')","47f39381":"def categorize_relevent_experience(dataframe):\n    map = {'Has relevent experience': 1,\n           'No relevent experience': 0\n          }\n    \n    dataframe.relevent_experience.replace(map, inplace=True)\n    dataframe['relevent_experience'] = dataframe.relevent_experience.astype('category')","a1f8a8b0":"df.relevent_experience","9cb46f36":"categorize_relevent_experience(df)\ndf.info()","0fb9d155":"df.info()","1fcc0d32":"null_info(df, 'relevent_experience', 'target')","7fab9058":"def impute_experience(dataframe, le=False):\n    dataframe.dropna(subset=['experience'], inplace=True)\n    print(\"Missing values after dropping:\", dataframe.experience.isnull().sum())\n    if le:\n        le = LabelEncoder()\n        dataframe.experience = le.fit_transform(dataframe.experience.astype(str))","24f276df":"column_info(df.experience)","e8c51ab2":"null_info(df, 'experience', 'target')","0986ba81":"impute_experience(df, le=True)","85bdacfd":"df.experience","70cef33c":"df.info()","e93a6bfa":"def categorize_enrolled_university(dataframe):\n    map = {\n      'no_enrollment': 0,\n      'Full time course': 1,\n      'Part time course': 2\n      }\n    dataframe.enrolled_university.replace(map, inplace=True)\n    dataframe['enrolled_university'] = dataframe.enrolled_university.astype('category')","53a92914":"def impute_enrolled_university(dataframe, method):\n    if method == 'mode':\n        dataframe['enrolled_university'] = dataframe['enrolled_university'].fillna(dataframe.enrolled_university.describe().top)  \n    elif method == 'drop':\n        dataframe.dropna(subset=['enrolled_university'], inplace=True)\n    else:\n        print('Please enter a valid method.')\n        print(\"Missing values after filling:\", dataframe.enrolled_university.isnull().sum())\n","a0d306e0":"column_info(df.enrolled_university)","946a7e3f":"null_info(df, 'enrolled_university', 'target')","3195f7bb":"categorize_enrolled_university(df)","7979a7ca":"impute_enrolled_university(df, method='drop')","48f7a038":"df.head()","68b94294":"column_info(df.education_level)","a78a184f":"trio_df = df[['education_level', 'major_discipline', 'enrolled_university', 'target']]\nprint(trio_df[trio_df['education_level'] == 'High School'].isnull().sum())\nprint(trio_df[trio_df['education_level'] == 'High School'])","5fb1fffe":"print(trio_df[trio_df['education_level'] == 'Primary School'].isnull().sum())\nprint(trio_df[trio_df['education_level'] == 'Primary School'])\ntrio_primary = trio_df[trio_df['education_level'] == 'Primary School']\nprint(trio_primary[trio_primary['enrolled_university'] != 0].target.value_counts())","d6c3667a":"null_info(df, 'education_level', 'target')","e9644b03":"def impute_education_level(dataframe, method):\n    if method == 'mode':\n        dataframe['education_level'] = dataframe['education_level'].fillna(dataframe.education_level.describe().top)\n    elif method == 'drop':\n        dataframe.dropna(subset=['education_level'], inplace=True)","6a4f4253":"def categorize_education_level(dataframe):\n    map = {\n      'Do not have one': 0,\n      'Other': 1,\n      'Primary School': 2,\n      'High School': 3,\n      'Graduate': 4,\n      'Masters': 5,\n      'Phd': 6\n    }\n    dataframe.education_level.replace(map, inplace=True)\n    dataframe['education_level'] = dataframe.education_level.astype('category')","6c53e584":"## use groupby's","c7458242":"def impute_major_discipline(dataframe):\n    print('Before imputing:')\n    print(dataframe.major_discipline.value_counts())\n    # High school\n    dataframe.major_discipline[(dataframe.education_level == 'High school') & (dataframe.enrolled_university == 0)] = 'No Major'\n    dataframe.major_discipline[(dataframe.education_level == 'High School') & (dataframe.enrolled_university == 0)] = 'No Major'\n    dataframe.major_discipline[(dataframe.education_level == 'High school') & (dataframe.enrolled_university != 0)] = 'Other'\n    dataframe.major_discipline[(dataframe.education_level == 'High School') & (dataframe.enrolled_university != 0)] = 'Other'\n    \n    # Primary School\n    dataframe.major_discipline[(dataframe.education_level == 'Primary school') & (dataframe.enrolled_university == 0)] = 'No Major'\n    dataframe.major_discipline[(dataframe.education_level == 'Primary School') & (dataframe.enrolled_university == 0)] = 'No Major'\n    dataframe.major_discipline[(dataframe.education_level == 'Primary school') & (dataframe.enrolled_university != 0)] = 'Other'\n    dataframe.major_discipline[(dataframe.education_level == 'Primary School') & (dataframe.enrolled_university != 0)] = 'Other'\n    \n    # Drop NaN\n    dataframe.dropna(subset=['major_discipline'], inplace=True)\n    \n    # Categorize\n    map = {\n        'STEM': 0,\n        'Other': 1,\n        'No Major': 2,\n        'Humanities': 3,\n        'Business Degree': 4,\n        'Arts': 5\n    }\n    \n    dataframe.major_discipline.replace(map, inplace=True)\n    \n    print(\"-------\")\n    print('After imputing:')\n    print(dataframe.major_discipline.value_counts())","e882e9a8":"impute_major_discipline(df)\ncategorize_education_level(df)","1407ca1b":"df.education_level.isnull().sum()","5fc3db16":"df.target.value_counts()","9133bb83":"impute_education_level(df, method='drop')","8b6d17a0":"df.education_level.isnull().sum()","079450c9":"df.target.value_counts()","188fd676":"df.info()","e1add525":"def categorize_company_type(dataframe):\n    map = {\n        'Pvt Ltd': 0,\n        'Funded Startup': 1,\n        'Public Sector': 2,\n        'Early Stage Startup': 3,\n        'NGO': 4,\n        'Other': 5\n    }\n    \n    dataframe.company_type.replace(map, inplace=True)","9600f517":"column_info(df.company_type)","ef801262":"df[df.company_type.isnull()].target.value_counts()","8d903e0a":"features_ctype = list(df.columns)\nctype_remove = ['company_size', 'company_type', 'city', 'target', 'enrollee_id']\nfor feature in ctype_remove:\n  features_ctype.remove(feature)\nfeatures_ctype","ca5d5b65":"def predict_company_type(dataframe, feature_list, classifier, fill = False):\n    mask = dataframe.company_type.isnull()\n    y = dataframe[~mask].company_type\n    X = dataframe[~mask][feature_list]\n    \n    X_train, X_test, y_train, y_test = tts(X, y, random_state=42, stratify=y, test_size=0.3)\n    \n    X_real = dataframe[mask][feature_list]\n    \n    classifier.fit(X_train, y_train)\n    y_pred_test = classifier.predict(X_test)\n    print(accuracy_score(y_test, y_pred_test))\n    \n    if fill:\n        y_pred_real = classifier.predict(X_real)\n        dataframe.loc[mask, 'company_type'] = y_pred_real\n        categorize_company_type(df)","3b412750":"knn_company_type = KNeighborsClassifier(n_neighbors=20)\nknn_company_type_grid = GridSearchCV(knn_company_type, {'n_neighbors': [20, 25],\n                                              'leaf_size': [30, 60]})","55fc4a94":"predict_company_type(df, features_ctype, knn_company_type_grid, fill=True)","964e6241":"knn_company_type_grid.best_params_","78000067":"df.company_type","94a1beb7":"def predict_company_size(dataframe, feature_list, classifier, fill = False):\n    mask = dataframe.company_size.isnull()\n    y = dataframe[~mask].company_size\n    X = dataframe[~mask][feature_list]\n    \n    X_train, X_test, y_train, y_test = tts(X, y, random_state=42, stratify=y, test_size=0.3)\n    \n    X_real = dataframe[mask][feature_list]\n    \n    classifier.fit(X_train, y_train)\n    y_pred_test = classifier.predict(X_test)\n    print(accuracy_score(y_test, y_pred_test))\n    \n    if fill:\n        y_pred_real = classifier.predict(X_real)\n        dataframe.loc[mask, 'company_size'] = y_pred_real","6bb74750":"features_csize = list(df.columns)\ncsize_remove = ['company_size', 'company_type', 'city', 'target', 'enrollee_id']\nfor feature in csize_remove:\n  features_csize.remove(feature)\n  \nfeatures_csize","a50e292c":"knn_company_size = KNeighborsClassifier()\nknn_company_size_grid = GridSearchCV(knn_company_size, {'n_neighbors': [20, 25],\n                                              'leaf_size': [30, 60]})","c3e41237":"predict_company_size(df, features_csize, knn_company_size_grid, fill=False)","36c54674":"df.info()","997fb765":"sns.heatmap(df.corr())","75946ecb":"df.corr()","a5a4f637":"# Select minority and majority\ndf_majority = df[df.target==0]\ndf_minority = df[df.target==1]\n\ndf_minority_upsampled = resample(df_minority,\n                                   replace=True,\n                                   n_samples = df.target.value_counts()[0],\n                                   random_state=46)\n\ndf_majority_downsampled = resample(df_majority,\n                                   replace=False,\n                                   n_samples = df.target.value_counts()[1],\n                                   random_state=46)\n\nassert df_minority.shape == df_majority_downsampled.shape\nassert df_majority.shape == df_minority_upsampled.shape\n\ndf_balanced_ds = pd.concat([df_minority, df_majority_downsampled])\ndf_balanced_us = pd.concat([df_majority, df_minority_upsampled])","2271c72d":"# Select features for the X\nfeature_list = list(df.columns)\nremove_list = ['target', 'city', 'company_size', 'company_type','enrollee_id']  # Company type?!\nfor feature in remove_list:\n  feature_list.remove(feature)\n\n# Downsampled\nX_ds = df_balanced_ds[feature_list]\ny_ds = df_balanced_ds['target']\n\nX_ds_train, X_ds_test, y_ds_train, y_ds_test = tts(X_ds, y_ds, random_state=42, test_size=0.3, stratify=y_ds)\n\n\n# Upsampled\nX_us = df_balanced_us[feature_list]\ny_us = df_balanced_us['target']\n\nX_us_train, X_us_test, y_us_train, y_us_test = tts(X_us, y_us, random_state=42, test_size=0.3, stratify=y_us)\nfeatures = {'feature_list': feature_list,\n            'target': 'target'}\n\nwith open('features.json', 'w+') as outfile:\n  json.dump(features, outfile)","d088a271":"KNN = KNeighborsClassifier()\n\nKNN_grid = {\n    'n_neighbors': [x for x in range(1, 50, 3)],\n    'leaf_size': [1, 15, 30]  \n}\n\nKNN_CV = GridSearchCV(KNN, KNN_grid)","f636b11a":"KNN_CV.fit(X_ds_train, y_ds_train)\ny_ds_pred_KNN = KNN_CV.predict(X_ds_test)","e4c8f0b1":"acc_ds_KNN = accuracy_score(y_ds_test, y_ds_pred_KNN) * 100\nprint('Accuracy of KNN: {}%'.format(acc_ds_KNN))","f7ba5960":"KNN_CV.best_params_","a238858f":"plot_confusion_matrix(KNN_CV, X_ds_test, y_ds_test, values_format='.7g')","e71ab45d":"roc_auc_score(y_ds_test, y_ds_pred_KNN) * 100","712ce312":"plot_roc_curve(KNN_CV, X_ds_test, y_ds_test)","f6f39344":"KNN_CV.fit(X_us_train, y_us_train)\ny_us_pred_KNN = KNN_CV.predict(X_us_test)","09a3050a":"acc_us_KNN = accuracy_score(y_us_test, y_us_pred_KNN) * 100\nprint('Accuracy of KNN: {}%'.format(acc_us_KNN))","488ec775":"KNN_CV.best_params_","1b3fd989":"plot_confusion_matrix(KNN_CV, X_us_test, y_us_test, values_format='.7g')","699c1ffb":"roc_auc_score(y_us_test, y_us_pred_KNN) * 100","195cdd41":"plot_roc_curve(KNN_CV, X_us_test, y_us_test)","018bc04c":"LogReg = LogisticRegression(C=1, solver='liblinear')","b99c6a45":"LogReg.fit(X_ds_train, y_ds_train)\ny_ds_pred_LogReg = LogReg.predict(X_ds_test)","cb0190ff":"acc_ds_LogReg = accuracy_score(y_ds_test, y_ds_pred_LogReg) * 100\nprint('Accuracy of Logistic Regression: {}%'.format(acc_ds_LogReg))","22e37c48":"plot_confusion_matrix(LogReg, X_ds_test, y_ds_test, values_format='0.7g')","d824abc9":"roc_auc_score(y_ds_test, y_ds_pred_LogReg) * 100","1ba1474f":"plot_roc_curve(LogReg, X_ds_test, y_ds_test)","45e4f096":"LogReg.fit(X_us_train, y_us_train)\ny_us_pred_LogReg = LogReg.predict(X_us_test)","49562462":"acc_us_LogReg = accuracy_score(y_us_test, y_us_pred_LogReg) * 100\nprint('Accuracy of Logistic Regression: {}%'.format(acc_us_LogReg))","58077242":"plot_confusion_matrix(LogReg, X_us_test, y_us_test, values_format='0.7g')","f4687e61":"roc_auc_score(y_us_test, y_us_pred_LogReg) * 100","092742cf":"plot_roc_curve(LogReg, X_us_test, y_us_test)","7e17e1c7":"SVM = SVC(kernel='rbf')\nSVM_grid = {'C': [c for c in range(1, 20, 5)]}\nSVM_CV = GridSearchCV(SVM, SVM_grid)\nbest_parameters = []","17557ec5":"SVM_CV.fit(X_ds_train, y_ds_train)\ny_ds_pred_SVM = SVM_CV.predict(X_ds_test)","6335eea5":"acc_ds_SVM = accuracy_score(y_ds_test, y_ds_pred_SVM) * 100\nprint('Accuracy of Support Vector Classifier: {}%'.format(acc_ds_SVM))","27d6a827":"plot_confusion_matrix(SVM_CV, X_ds_test, y_ds_test, values_format='0.7g')","82ad67be":"roc_auc_score(y_ds_test, y_ds_pred_SVM) * 100","321fee7d":"plot_roc_curve(SVM_CV, X_ds_test, y_ds_test)","611838b0":"SVM_CV.fit(X_us_train, y_us_train)\ny_us_pred_SVM = SVM_CV.predict(X_us_test)","4dbbee3b":"acc_us_SVM = accuracy_score(y_us_test, y_us_pred_SVM) * 100\nprint('Accuracy of Support Vector Classifier: {}%'.format(acc_us_SVM))","84042950":"plot_confusion_matrix(SVM_CV, X_us_test, y_us_test, values_format='0.7g')","6859aea4":"roc_auc_score(y_us_test, y_us_pred_SVM) * 100","021ff4cf":"plot_roc_curve(SVM_CV, X_us_test, y_us_test)","45eba8f6":"dtc = DecisionTreeClassifier()\ndtc_grid = {'criterion': ['gini', 'entropy'],\n            'max_depth': [x for x in range(1, 25)] + [None],\n            'min_samples_split': [2,3,4,5,6,7]}\ndtc_CV = GridSearchCV(dtc, dtc_grid)","dd49c245":"dtc_CV.fit(X_ds_train, y_ds_train)\ny_ds_pred_DT = dtc_CV.predict(X_ds_test)","5abb3d90":"acc_ds_DT = accuracy_score(y_ds_test, y_ds_pred_DT) * 100\nprint('Accuracy of Decision Tree Classifier: {}%'.format(acc_ds_DT))","860ec9bf":"plot_confusion_matrix(dtc_CV, X_ds_test, y_ds_test, values_format='0.7g')","105b153b":"roc_auc_score(y_ds_test, y_ds_pred_DT) * 100","f6f8d6ed":"plot_roc_curve(dtc_CV, X_ds_test, y_ds_test)","161fb61d":"dtc_CV.fit(X_us_train, y_us_train)\ny_us_pred_DT = dtc_CV.predict(X_us_test)","04cdd40f":"acc_us_DT = accuracy_score(y_us_test, y_us_pred_DT) * 100\nprint('Accuracy of Decision Tree Classifier: {}%'.format(acc_us_DT))","3ec6e40b":"plot_confusion_matrix(dtc_CV, X_us_test, y_us_test, values_format='0.7g')","ba261ec8":"roc_auc_score(y_us_test, y_us_pred_DT) * 100","244c464c":"plot_roc_curve(dtc_CV, X_us_test, y_us_test)","31a1f96c":"rfc = RandomForestClassifier()\nrfc_grid = {'n_estimators': [100, 125, 150, 175, 200, 225, 250], \n              'criterion': ['gini', 'entropy']}\nrfc_CV = GridSearchCV(rfc, rfc_grid)","f81c1101":"rfc_CV.fit(X_ds_train, y_ds_train)\ny_ds_pred_RF = rfc_CV.predict(X_ds_test)","701e4a0c":"acc_ds_RF = accuracy_score(y_ds_test, y_ds_pred_RF) * 100\nprint('Accuracy of Random Forest Classifier: {}%'.format(acc_ds_RF))","b293d531":"plot_confusion_matrix(rfc_CV, X_ds_test, y_ds_test, values_format='0.7g')","3f175908":"roc_auc_score(y_ds_test, y_ds_pred_RF) * 100","6ba04a5b":"plot_roc_curve(rfc_CV, X_ds_test, y_ds_test)","0ad01738":"rfc_CV.fit(X_us_train, y_us_train)\ny_us_pred_RF = rfc_CV.predict(X_us_test)","e71beb40":"# to json\nbest_params_rf_us = rfc_CV.best_params_\nwith open('best_params.json', 'w+') as outfile:\n  json.dump(best_params_rf_us, outfile)","3f56ada6":"acc_us_RF = accuracy_score(y_us_test, y_us_pred_RF) * 100\nprint('Accuracy of Random Forest Classifier: {}%'.format(acc_us_RF))","c35ca547":"plot_confusion_matrix(rfc_CV, X_us_test, y_us_test, values_format='0.7g')","724b09bc":"roc_auc_score(y_us_test, y_us_pred_RF) * 100","bdf5eefa":"plot_roc_curve(rfc_CV, X_us_test, y_us_test)","764e1972":"print(classification_report(y_us_test, y_us_pred_RF))","0c09d974":"### Relevant Experience Column\n","ae364924":"##### Classification Report","dc0498ed":"### Experience Column -- Needs encoding","8ed69373":"#### Upsampled","a1422a60":"### Company Size Column\nWe tried to predict the company types but that was not the feasible solution for that case","55fd7e47":"##### Majors by education level","db36a2ec":"# Importing data","d82503ed":"#### Downsampled","f0b33324":"## Correlation between columns","62f87fff":"### Last New Job Column","481317d5":"##### Upsampled","0c274f37":"### Logistic Regression","13621d36":"### Hypothesis: \n###### ->If a person's education_level equals to Primary School degree, that person can not have major_discipline\n###### ->If education_level == Primary School and enrolled_university == 0 then major_discipline == No major\n###### ->If education == Primary School and enrolled_university != 0 then major_discipline == other","bb905c92":"##### Company types by company sizes","76137d90":"### SVC","cb6f718e":"###### Sweetviz AutoEDA","65ad3efb":"#### Seaborn settings","1a9636a3":"##### Target vs Gender","898434aa":"# Dealing with missing values","dccedb8b":"##### Downsampled","0b046337":"# Statistics and informations about data","c42dfce6":"### TTS","b85b0770":"# Observing Missing Values","445229cb":"##### Downsampled","f8a40fcb":"### Education Level and Major Columns","1401045a":"##### Education Level of Genders","bd12d563":"##### Upsampled","7fd265ee":"##### Majors by Gender","4332cd8a":"### Gender Column","67fab28c":"### Enrolled University Column","88c7cdb8":"# Utility Functions","64461336":"### Random Forest","30cad5a4":"##### Time after last job change by education level","862b41c0":"### Drop rows that has more missing values than threshold","5de06650":"##### Gender count","dba8080d":"### Decision Tree","cb4d9199":"#### Upsampled","7600239f":"#### Downsampled","d7537113":"### Company Type Column\nWe tried to predict the company types but that was not the feasible solution for that case","fc0c0513":"##### City development index of target","50540871":"### KNN","0c32e14d":"#### Project created for \"Introduction to Data Mining\" by:\n##### Eren Dar\u0131c\u0131\n##### Hilal Sena Tun\u00e7\n##### Berkay Kaya\n##### @ 2020-2021 Spring Semester, Eskisehir Technical University","084f0867":"### Hypothesis: \n###### ->If a person's education_level equals to High School degree, that person can not have major_discipline\n###### ->if education_level == High School and enrolled_university == 0 then major_discipline == No Major\n###### ->if education == High School and enrolled_university != 0 then major_discipline == other","2a353fb5":"# MODELS","2df2428c":"# Basic visualizations in order to gain first insight","3675df8f":"##### Upsampled","accf560e":"##### City development index of genders by target","27391d5c":"#### Suppress Warnings","c0febe25":"### Sampling","fc51cc1c":"# Imports","18884f2b":"##### Downsampled","70533042":"##### City development index boxplot"}}