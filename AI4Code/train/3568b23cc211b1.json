{"cell_type":{"566089be":"code","0f2673ec":"code","ad872b4e":"code","de373f0f":"code","dea1db3b":"code","5d6bfcff":"code","f2543283":"code","35d90aa6":"code","aa026dc9":"code","e4c7de67":"code","1a23ce13":"code","fd7c3e4a":"code","7f3b7aea":"code","11c24c32":"code","d664ccd4":"code","9cc293b2":"code","c89b943f":"code","42d4b92b":"code","836160aa":"code","3a0ed703":"code","dec50e72":"code","62169e1f":"code","6325bf87":"code","dff64518":"markdown","b96df677":"markdown","1bfda346":"markdown"},"source":{"566089be":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy import signal\nimport cv2\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.optimizers import SGD\nfrom keras.utils import np_utils\n\nimport tensorflow as tf\nfrom keras.backend.tensorflow_backend import set_session\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=1) \nconfig = tf.ConfigProto(gpu_options=gpu_options)\nset_session(tf.Session(config=config))","0f2673ec":"train_df = pd.read_csv('..\/input\/mnist_train.csv')\ntest_df = pd.read_csv('..\/input\/mnist_test.csv')","ad872b4e":"print(train_df.shape)\nprint(test_df.shape)","de373f0f":"train_df.head()","dea1db3b":"train_df['label'].value_counts().plot(kind='bar')","5d6bfcff":"feat_cols = train_df.columns.tolist()[1:]","f2543283":"X_train = train_df[feat_cols].values.reshape(-1,28,28,1)\/255\ny_train = train_df['label'].values\nX_test = test_df[feat_cols].values.reshape(-1,28,28,1)\/255\ny_test = test_df['label'].values","35d90aa6":"plt.imshow(X_test[234][:,:,0], cmap='Greys')","aa026dc9":"plt.gray()\nplt.imshow([[1,-1]])\nplt.show()\nplt.imshow([[1],[-1]])\nplt.show()\nplt.imshow(X_train[12345][:,:,0])\nplt.show()\nplt.imshow(signal.convolve(X_test[234][:,:,0],[[1,-1]]))\nplt.show()\nplt.imshow(signal.convolve(X_test[234][:,:,0],[[1],[-1]]))\nplt.show()","e4c7de67":"print(X_test.dtype, X_test.shape)\nprint(y_test.dtype, y_test.shape)","1a23ce13":"num_pixels = X_test.shape[1] * X_test.shape[2] # 28*28=784\nX_train = X_train.reshape(-1, num_pixels).astype('float32')\nX_test = X_test.reshape(-1, num_pixels).astype('float32')","fd7c3e4a":"print(X_train.dtype, X_train.shape)\nprint(X_test.dtype, X_test.shape)","7f3b7aea":"y_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","11c24c32":"print(y_train.dtype)\nprint(y_train[0])","d664ccd4":"num_classes = len(set(train_df['label'].values)) # already one-hot encoded for labels, so cant use y_train\nnum_classes","9cc293b2":"model = Sequential()\nmodel.add(Dense(num_pixels, input_dim=num_pixels, activation='relu')) # in=out hidde layer\nmodel.add(Dense(num_classes, activation='softmax')) #output layer\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","c89b943f":"history = model.fit(X_train,y_train, validation_data=(X_test,y_test), batch_size=128, epochs=10, verbose=1)\n# verbos=True = print training process","42d4b92b":"model.summary()","836160aa":"print(X_test.shape, type(X_test), X_test.dtype)\nprint(y_test.shape, type(y_test), y_test.dtype)","3a0ed703":"X_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)\ny_train = y_train.astype('float32')\ny_test = y_test.astype('float32')\nprint(X_test.shape, type(X_test), X_test.dtype)\nprint(y_test.shape, type(y_test), y_test.dtype)","dec50e72":"model = Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=3,input_shape=(28,28,1), activation='relu'))\nmodel.add(Conv2D(32, 3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(64, 3, activation='relu'))\nmodel.add(Conv2D(64, 3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","62169e1f":"history = model.fit(X_train,y_train, validation_data=(X_test,y_test), batch_size=128, epochs=10, verbose=1)","6325bf87":"model.summary()","dff64518":"because CNN need to read a image dim, that's why we need to reshape image dataset to (60000,28,28,1)","b96df677":"# 2. Convolution Neural Network","1bfda346":"# 1. Simple Deep Neural Network"}}