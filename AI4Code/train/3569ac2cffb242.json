{"cell_type":{"11d2ae69":"code","8203c661":"code","acf7eb1e":"code","04a2a5e7":"code","917683fa":"code","25af2ae7":"code","f82223e3":"code","fec7c40c":"code","daa972ba":"code","8eea82c2":"code","f4340c6d":"code","2ec84cc8":"code","da630b5e":"code","b5e0e308":"code","2a7e503f":"code","5df78a2b":"code","90a088d4":"code","f64bfe89":"code","4999341a":"code","2af25770":"code","81583aa2":"code","5f9a4a99":"code","d0e1ff40":"code","79723a75":"code","bc5aef61":"code","4354e232":"code","5199cbe1":"code","e22bc889":"code","353c6c3c":"code","04dbff95":"code","12a44c68":"code","74fdc548":"code","8dcb481a":"code","fbdc4afe":"code","de17151b":"markdown","4bcd2e05":"markdown","2b64c668":"markdown","99503fc9":"markdown","01cd5b6b":"markdown","6937a200":"markdown","2a563a2a":"markdown","20a5f5c8":"markdown","faf35706":"markdown","fe5518d9":"markdown","47c8185d":"markdown"},"source":{"11d2ae69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8203c661":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","acf7eb1e":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","04a2a5e7":"train_data.info()","917683fa":"train_data[\"Sex\"].value_counts()","25af2ae7":"train_data[\"Ticket\"].value_counts()","f82223e3":"train_data[\"Cabin\"].value_counts()","fec7c40c":"train_data[\"Embarked\"].value_counts()","daa972ba":"train_data.describe()","8eea82c2":"import matplotlib.pyplot as plt\ntrain_data.hist(bins=50, figsize=(20,15))\nplt.show()","f4340c6d":"from sklearn.model_selection import train_test_split\n\ntrain_set, val_set = train_test_split(train_data, stratify=train_data['Sex'])","2ec84cc8":"train_set['Sex'].value_counts()","da630b5e":"val_set['Sex'].value_counts()","b5e0e308":"corr_matrix = train_set.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","2a7e503f":"from pandas.plotting import scatter_matrix\nattributes = ['Survived', 'Fare', 'Parch', 'Pclass']\nscatter_matrix(train_set[attributes], figsize=(12, 8))","5df78a2b":"import seaborn as sns\nsns.countplot(x='Survived', hue='Pclass', data=train_set)","90a088d4":"sns.countplot(x='Survived', hue='Embarked', data=train_set)","f64bfe89":"train_set.info()","4999341a":"train_set = train_set.drop(\"Cabin\", axis=1)\ntrain_set = train_set.drop(\"Age\", axis=1)\ntrain_set = train_set.drop(\"Name\", axis=1)\ntrain_set = train_set.drop(\"Ticket\", axis=1)\ntrain_set = train_set.drop(\"PassengerId\", axis=1)\ntrain_set.info()","2af25770":"train_set[\"Embarked\"].fillna(\"X\", inplace=True)\ntrain_set[\"Embarked\"].value_counts()","81583aa2":"train_set_cat = train_set[[\"Pclass\", \"Sex\", \"Embarked\"]]","5f9a4a99":"from sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\ncat_attribs = [\"Pclass\", \"Sex\", \"Embarked\"]\npipeline = ColumnTransformer([\n    (\"onehot\", OneHotEncoder(), cat_attribs)\n], remainder=\"passthrough\")\n\nX_temp = train_set.drop(\"Survived\", axis=1)\ny = train_set[\"Survived\"]\n\nX = pipeline.fit_transform(X_temp)","d0e1ff40":"from sklearn.linear_model import LinearRegression\nmodel1 = LinearRegression()\nmodel1.fit(X, y)","79723a75":"from sklearn.neighbors import KNeighborsClassifier\nmodel2 = KNeighborsClassifier()\nmodel2.fit(X, y)","bc5aef61":"from sklearn.tree import DecisionTreeRegressor\nmodel3 = DecisionTreeRegressor()\nmodel3.fit(X, y)","4354e232":"from sklearn.linear_model import SGDClassifier\nmodel4 = SGDClassifier()\nmodel4.fit(X, y)","5199cbe1":"X_val = val_set.drop(\"Survived\", axis=1)\nX_val = X_val.drop(\"Cabin\", axis=1)\nX_val = X_val.drop(\"Age\", axis=1)\nX_val = X_val.drop(\"Name\", axis=1)\nX_val = X_val.drop(\"Ticket\", axis=1)\nX_val = X_val.drop(\"PassengerId\", axis=1)\nX_val[\"Embarked\"].fillna(\"X\", inplace=True)\nX_val = pipeline.transform(X_val)\ny_val = val_set[\"Survived\"]","e22bc889":"from sklearn.metrics import accuracy_score","353c6c3c":"model1_preds = model1.predict(X_val).round()\nprint(\"Model 1 score:\", accuracy_score(model1_preds, y_val))","04dbff95":"model2_preds = model2.predict(X_val)\nprint(\"Model 2 score:\", accuracy_score(model2_preds, y_val))","12a44c68":"model3_preds = model3.predict(X_val).round()\nprint(\"Model 3 score:\", accuracy_score(model3_preds, y_val))","74fdc548":"model4_preds = model4.predict(X_val)\nprint(\"Model 4 score:\", accuracy_score(model4_preds, y_val))","8dcb481a":"test_data.info()","fbdc4afe":"test_X = test_data.drop(\"Cabin\", axis=1)\ntest_X = test_X.drop(\"Age\", axis=1)\ntest_X = test_X.drop(\"Name\", axis=1)\ntest_X = test_X.drop(\"Ticket\", axis=1)\ntest_X = test_X.drop(\"PassengerId\", axis=1)\ntest_X[\"Embarked\"].fillna(\"X\", inplace=True)\ntest_X[\"Fare\"].fillna(test_X[\"Fare\"].median(), inplace=True)\ntest_X = pipeline.transform(test_X)\n\nfinal_predictions = model3.predict(test_X).round().astype(int)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': final_predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Submission successfully saved!\")","de17151b":"# Model Building\n**Model 1: Linear Regression**","4bcd2e05":"**Model 2: Nearest Neighbors**","2b64c668":"# Model Evalutation","99503fc9":"**Model 3: Decision Trees**","01cd5b6b":"# Data Preparation","6937a200":"# Further Exploratory Data Analysis","2a563a2a":"# Generate Submission Using Best Model (Model 3)","20a5f5c8":"**Model 4: SGDClassifier**","faf35706":"# Split the Training Data","fe5518d9":"# Data Loading","47c8185d":"# Exploratory Data Analysis"}}