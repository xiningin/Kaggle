{"cell_type":{"80a70f1a":"code","bd388bb3":"code","fa14b55d":"code","2936df88":"code","16c7fd98":"code","88d34131":"code","8b39b963":"code","c904dd8f":"code","d0b90962":"code","95861328":"code","734e2896":"code","1d4f36df":"code","d8b1828d":"code","e11a8e48":"code","e0094193":"code","99c461a2":"code","7b5006fd":"code","fb4a5f95":"code","ec01dd82":"code","7fb4d89f":"code","9627181f":"code","13c0a392":"code","fe4c6ea4":"code","340c55aa":"code","2199a426":"code","b403d2f6":"code","d265063a":"code","78905262":"code","d1f4799a":"markdown","27e477ed":"markdown","4e622e13":"markdown","e8d93929":"markdown","dd395785":"markdown","1299de99":"markdown","10881da4":"markdown","0755e490":"markdown","a1b04abd":"markdown","df9ba33d":"markdown"},"source":{"80a70f1a":"# Essential libraries\nimport numpy as np\nimport pandas as pd\n\n# Data visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport squarify\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.options.display.float_format","bd388bb3":"# Reading dataset","fa14b55d":"# importing dataset\ngithublink='https:\/\/raw.githubusercontent.com\/ms4hafiz\/COVID19\/master\/covid_19_complete.csv'\ncovid_tbl_original = pd.read_csv(githublink, parse_dates=['Date'])\n\ncovid_tbl_original.tail()","2936df88":"# Remove lat and lon since they will create duplicate for some countries\ncovid_tbl_original.drop(['Lat','Long'],axis=1,inplace=True)\ncovid_tbl_original.shape","16c7fd98":"# Cleaning country names","88d34131":"# Cleaning country names\n# cases columns\ncases= ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Generate new column Active\n# Active Case = confirmed - (deaths + recovered)\ncovid_tbl_original['Active'] = covid_tbl_original['Confirmed'] - covid_tbl_original['Deaths'] - covid_tbl_original['Recovered']\n\n# Cleaning data\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Mainland China', 'China')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Iran (Islamic Republic of)', 'Iran')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Dominican Republic', 'Dominica')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Timor-Leste', 'East Timor')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Russian Federation', 'Russia')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Viet Nam', 'Vietnam')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('Congo (Kinshasa)', 'Republic of the Congo')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('occupied Palestinian territory', 'Palestine')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('United Kingdom', 'UK')\ncovid_tbl_original['Country\/Region'] = covid_tbl_original['Country\/Region'].replace('West Bank and Gaza', 'Palestine')\n\n\n# Rename Country\/Region\ncovid_tbl_original.rename({\"Country\/Region\":'Country'},axis=1,inplace=True)\n\n# imputing missing values with 0s\ncovid_tbl_original[cases] = covid_tbl_original[cases].fillna(0)\ncovid_tbl_original['Closed']=covid_tbl_original.Deaths+covid_tbl_original.Recovered\ncovid_tbl_original.head()","8b39b963":"# latest\nworld_latest = covid_tbl_original[covid_tbl_original['Date'] == max(covid_tbl_original['Date'])].reset_index()\n\n# latest cumulative\nworld_latest_grouped = world_latest.groupby('Country')['Confirmed', 'Deaths', 'Recovered', 'Active','Closed'].sum().reset_index()\n\n# latest cumulative\nworld_country_date_grouped = covid_tbl_original.groupby(['Country','Date'])['Confirmed', 'Deaths', 'Recovered', 'Active','Closed'].sum().reset_index()","c904dd8f":"world_latest=world_latest_grouped","d0b90962":"# latest Date of reporting\nmax_date=pd.to_datetime(max(covid_tbl_original.Date))\nmax_date=max_date.strftime(\"%d-%b-%Y\")\nsummary=pd.DataFrame({\"Item\":\"Last Date Of Reporting\",\"Number\/Cases\/Date\":[max_date]})\n\n# of countries\nnumber_of_countries=len(world_latest_grouped.Country.drop_duplicates())\nsummryTemp=pd.DataFrame({\"Item\":\"Total countries reported cases\",\"Number\/Cases\/Date\":[number_of_countries]})\nsummary=pd.concat([summary,summryTemp])\n\n# total confirmed cases\ntotal_confirmed=world_latest_grouped['Confirmed'].sum()\nsummryTemp=pd.DataFrame({\"Item\":\"Total confirmed cases\",\"Number\/Cases\/Date\":[str(int(total_confirmed))]})\nsummary=pd.concat([summary,summryTemp])\n\n# total recoveries\ntotal_recoveries=world_latest_grouped['Recovered'].sum()\nsummryTemp=pd.DataFrame({\"Item\":\"Total recovered cases\",\"Number\/Cases\/Date\":[total_recoveries]})\nsummary=pd.concat([summary,summryTemp])\n\n# total deaths\ntotal_deaths=world_latest_grouped['Deaths'].sum()\nsummryTemp=pd.DataFrame({\"Item\":\"Total deaths\",\"Number\/Cases\/Date\":[total_deaths]})\nsummary=pd.concat([summary,summryTemp])\n\n# total active cases\ntotal_active=world_latest_grouped['Active'].sum()\nsummryTemp=pd.DataFrame({\"Item\":\"Total active cases\",\"Number\/Cases\/Date\":[str(int(total_active))]})\nsummary=pd.concat([summary,summryTemp])\n\n# total closed cases\ntotal_closed=world_latest_grouped['Closed'].sum()\nsummryTemp=pd.DataFrame({\"Item\":\"Total closed cases\",\"Number\/Cases\/Date\":[str(int(total_closed))]})\nsummary=pd.concat([summary,summryTemp])\n\n# percentage of closed cases\npercent_closed=100*total_closed\/total_confirmed\nsummryTemp=pd.DataFrame({\"Item\":\"Percentage of closed cases\",\"Number\/Cases\/Date\":[str(round(percent_closed,2))]})\nsummary=pd.concat([summary,summryTemp])\n\n# percentage of deaths out of confirmed cases\npercent_deaths=100*total_deaths\/total_confirmed\nsummryTemp=pd.DataFrame({\"Item\":\"Percentage of deaths out of confirmed cases\",\"Number\/Cases\/Date\":[str(round(percent_deaths,2))]})\nsummary=pd.concat([summary,summryTemp])\n\n# percentage of deaths out of closed cases\npercent_deaths_closed=100*total_deaths\/total_closed\nsummryTemp=pd.DataFrame({\"Item\":\"Percentage of deaths out of closed cases\",\"Number\/Cases\/Date\":[str(round(percent_deaths_closed,2))]})\nsummary=pd.concat([summary,summryTemp])\n\n# percentage of recovered cases\npercent_recovered=100*total_recoveries\/total_confirmed\nsummryTemp=pd.DataFrame({\"Item\":\"Percentage of recovered cases\",\"Number\/Cases\/Date\":[str(round(percent_recovered,2))]})\nsummary=pd.concat([summary,summryTemp])\n\n# percentage of active cases\npercent_active=100*total_active\/total_confirmed\nsummryTemp=pd.DataFrame({\"Item\":\"Percentage of active cases\",\"Number\/Cases\/Date\":[str(round(percent_active,2))]})\nsummary=pd.concat([summary,summryTemp])\n\nsummary=summary.set_index('Item')\nsummary.style.background_gradient(cmap='coolwarm')\n","95861328":"world='World'\nconfirmed=world_latest_grouped['Confirmed'].sum()\ndeaths=world_latest_grouped['Deaths'].sum()\nrecovered=world_latest_grouped['Recovered'].sum()\nactive=world_latest_grouped['Active'].sum()\nclosed=world_latest_grouped['Closed'].sum()\n\nworld_latest_grouped_total=pd.DataFrame({\"Country\":[world],'Confirmed':[confirmed],'Deaths':[deaths],'Recovered':[recovered],'Active':[active],'Closed':[closed]})\nworld_latest_grouped1 = world_latest_grouped[['Country','Confirmed', 'Deaths', 'Recovered', 'Active','Closed']]\nworld_latest_grouped1=pd.concat([world_latest_grouped_total,world_latest_grouped1])[['Country','Confirmed', 'Deaths', 'Recovered', 'Closed','Active']]\nworld_latest_grouped1.set_index('Country',inplace=True)\nworld_latest_grouped1.sort_values([\"Deaths\"],ascending=False).style.background_gradient(cmap='coolwarm')","734e2896":"# New data from \n\nworld_date_grouped = covid_tbl_original.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active','Closed'].sum().reset_index()\n\n# Confirmed cases\nworld_date_grouped['DailyConfirmed']=world_date_grouped['Confirmed'].sub(world_date_grouped['Confirmed'].shift())\n# First day total confirmed cases \n\nworld_date_grouped.iloc[0,6]=555\nworld_date_grouped['DailyConfirmed']=world_date_grouped['DailyConfirmed'].astype(int)\n\n\n# Deaths dailay\nworld_date_grouped['DailyDeaths']=world_date_grouped['Deaths'].sub(world_date_grouped['Deaths'].shift())\n\n# First day total deaths  \nworld_date_grouped.iloc[0,7]=17\nworld_date_grouped['DailyDeaths']=world_date_grouped['DailyDeaths'].astype(int)\n\n# Recovered dailay\nworld_date_grouped['DailyRecovered']=world_date_grouped['Recovered'].sub(world_date_grouped['Recovered'].shift())\n# First day total deaths  \nworld_date_grouped.iloc[0,8]=28\nworld_date_grouped['DailyRecovered']=world_date_grouped['DailyRecovered'].astype(int)\n\n# Active dailay\nworld_date_grouped['DailyActive']=world_date_grouped['Active'].sub(world_date_grouped['Active'].shift())\n# First day total deaths  \nworld_date_grouped.iloc[0,9]=510\nworld_date_grouped['DailyActive']=world_date_grouped['DailyActive'].astype(int)\n\n# Calculating daily Case Fatality Rate\nworld_date_grouped['CFR']=world_date_grouped['Deaths']\/world_date_grouped['Confirmed']\n\n# Calculating daily Case Recovery Rate\nworld_date_grouped['CRR']=world_date_grouped['Recovered']\/world_date_grouped['Confirmed']\n\n# Calculating daily Case Active Rate\nworld_date_grouped['CAR']=world_date_grouped['Active']\/world_date_grouped['Confirmed']\n\n# Calculating case fatality rate from closed cases\nworld_date_grouped['CCFR']=world_date_grouped['Deaths']\/world_date_grouped['Closed']\n\n\n# convert Date to Date\nworld_date_grouped['Date']=world_date_grouped['Date'].dt.date\ncovid_daily=world_date_grouped","1d4f36df":"fig = plt.figure(figsize=(20,7),dpi=100)\nax1 = fig.add_subplot(111)\nchart=sns.barplot(x = covid_daily.Date, y = covid_daily.DailyConfirmed,color=\"grey\")\nchart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='large'\n\n)\n\nplt.title(\"Figure 1: Daily reported confimed cases\",fontsize=18, fontweight='bold')\nplt.show()","d8b1828d":"fig = plt.figure(figsize=(20,7),dpi=100)\nax1 = fig.add_subplot(111)\nchart=sns.barplot(x = covid_daily.Date, y = covid_daily.DailyDeaths,color=\"r\")\nchart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='large'\n\n)\nax2 = ax1.twinx()\nplt.plot(covid_daily.CFR, color='r')\n# ax3 = ax1.twinx()\n# plt.plot(covid_daily.CRR, color='b')\nax2.grid(False)\nplt.title(\"Figure 2: Daily reported deaths and case fatality rate (CFR) out of confirmed cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)","e11a8e48":"fig = plt.figure(figsize=(20,7),dpi=100)\nax1 = fig.add_subplot(111)\nchart=sns.barplot(x = covid_daily.Date, y = covid_daily.DailyDeaths,color=\"y\")\nchart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='large'\n\n)\nax2 = ax1.twinx()\nplt.plot(covid_daily.CCFR, color='r')\n# ax3 = ax1.twinx()\n# plt.plot(covid_daily.CRR, color='b')\nax2.grid(False)\n\nplt.title(\"Figure 3: Daily reported deaths and case fatality rate (CFR) out of closed cases\",fontsize=18, fontweight='bold')\nplt.show()","e0094193":"fig = plt.figure(figsize=(20,7),dpi=100)\nax1 = fig.add_subplot(111)\nchart=sns.barplot(x = covid_daily.Date, y = covid_daily.DailyRecovered,color=\"g\")\nchart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n)\n\nplt.title(\"Figure 4: Daily reported recoveries and recovery rate\",fontsize=18, fontweight='bold')\nax2 = ax1.twinx()\nplt.plot(covid_daily.CRR, color='r')\nax2.grid(False)\nplt.show()","99c461a2":"# Top 30 countries with highest confirmed cases\nworld_latest=world_latest.sort_values(by='Confirmed',ascending=False)\ncountries_order_by_highest_confirmed_cases=world_latest\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['Confirmed'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 5: Top 30 countries with highest confirmed cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n","7b5006fd":"# Top 30 countries with highest deaths\nworld_latest=world_latest.sort_values(by='Deaths',ascending=False)\n\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['Deaths'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 6: Top 30 countries with highest deaths report\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n","fb4a5f95":"# Top 30 countries with highest active cases\nworld_latest=world_latest.sort_values(by='Active',ascending=False)\n\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['Active'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 7: Top 30 countries with highest active cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n","ec01dd82":"# Top 30 countries with highest cloased cases\n\nworld_latest=world_latest.sort_values(by='Closed',ascending=False)\n\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['Closed'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 8: Top 30 countries with highest closed cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n","7fb4d89f":"# Top 30 countries with highest cloased cases\n\nworld_latest['percent_of_active_cases']=100*world_latest['Active'].divide(world_latest['Confirmed'])\nworld_latest=world_latest.sort_values(by='percent_of_active_cases',ascending=True)\nworld_latest1=world_latest[['Country','percent_of_active_cases']].head(30)\nworld_latest1.sort_values([\"percent_of_active_cases\"],ascending=True).style.background_gradient(cmap='coolwarm')","9627181f":"# Top 30 countries with highest fatality rate out of confirmed cases\n\n# world_latest['percent_of_deaths']=100*world_latest['Deaths']\/world_latest['Confirmed']\nworld_latest['percent_of_deaths']=100*world_latest['Deaths'].divide(world_latest['Confirmed'])\n\nworld_latest=world_latest.sort_values(by='percent_of_deaths',ascending=False)\n\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['percent_of_deaths'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 10: Top 30 countries with case fatality rate out of confirmed cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n                                                         ","13c0a392":"# Top 30 countries with highest fatality rate out of closed cases\n\nworld_latest['percent_of_deaths_cls']=100*world_latest['Deaths']\/world_latest['Closed']\nworld_latest=world_latest.sort_values(by='percent_of_deaths_cls',ascending=False)\n\nplt.figure(figsize=(15,8))\nsquarify.plot(sizes=world_latest['percent_of_deaths_cls'].head(30), label=world_latest['Country'].head(30))\nplt.axis('off')\nplt.title(\"Figure 11: Top 30 countries with case fatality rate out of closed cases\",fontsize=18, fontweight='bold')\nplt.show(block=False)\n                                                         ","fe4c6ea4":"country_level=world_country_date_grouped[world_country_date_grouped['Deaths']>=0]\ncountry_level['CFR']=world_country_date_grouped['Deaths']\/world_country_date_grouped['Confirmed']\ncountry_level['CRR']=world_country_date_grouped['Recovered']\/world_country_date_grouped['Confirmed']\ncountry_level['CAR']=world_country_date_grouped['Active']\/world_country_date_grouped['Confirmed']\ncountry_level['CCFR']=world_country_date_grouped['Deaths']\/world_country_date_grouped['Closed']\ncountry_level['Date']=country_level['Date'].dt.date\n\n# fill name with 0 \ncountry_level.fillna(0)\n\n# converting column to rows for easy charting and processing\n\n# Deaths\ncountry_level_deaths= country_level[['Country','Date','Deaths']]\ncountry_level_deaths['Type']='Numer of deaths'\ncountry_level_deaths=country_level_deaths.rename({'Deaths':'Cases'},axis=1)\n\n# # Confirmed cases\n# country_level_confirmed= country_level[['Country','Date','Confirmed']]\n# country_level_confirmed['Type']='Confirmed'\n# country_level_confirmed=country_level_confirmed.rename({'Confirmed':'Cases'},axis=1)\n\n\n# Recovered cases\ncountry_level_recovered= country_level[['Country','Date','Recovered']]\ncountry_level_recovered['Type']='Number of recoveries'\ncountry_level_recovered=country_level_recovered.rename({'Recovered':'Cases'},axis=1)\n\n\n# Active cases\ncountry_level_Active= country_level[['Country','Date','Active']]\ncountry_level_Active['Type']='Number of active cases'\ncountry_level_Active=country_level_Active.rename({'Active':'Cases'},axis=1)\n\n# converting column to rows for easy charting and processing (for percentage)\n\n# Case Fatality Rate from confirmed\ncountry_level_CFR= country_level[['Country','Date','CFR']]\ncountry_level_CFR['Type']='Case Fatality Rate\/Confirmed'\ncountry_level_CFR=country_level_CFR.rename({'CFR':'Percentage'},axis=1)\n\n# Case Fatality Rate from closed\ncountry_level_CCFR= country_level[['Country','Date','CCFR']]\ncountry_level_CCFR['Type']='Case Fatality Rate\/Closed'\ncountry_level_CCFR=country_level_CCFR.rename({'CCFR':'Percentage'},axis=1)\n\n\n# Recovered cases rate\ncountry_level_CRR= country_level[['Country','Date','CRR']]\ncountry_level_CRR['Type']='Recovered Cases Rate'\ncountry_level_CRR=country_level_CRR.rename({'CRR':'Percentage'},axis=1)\n\n\n# Active cases rate\ncountry_level_CAR= country_level[['Country','Date','CAR']]\ncountry_level_CAR['Type']='Active Cases Rate'\ncountry_level_CAR=country_level_CAR.rename({'CAR':'Percentage'},axis=1)\n\ncountry_level_cases=pd.concat([country_level_deaths,country_level_Active,country_level_recovered])\n\ncountry_level_percent=pd.concat([country_level_CFR,country_level_CCFR,country_level_CRR,country_level_CAR])\n\n# Impute null values to zero for countries where percentage is null\ncountry_level_percent=country_level_percent.fillna(0)\n","340c55aa":"# Getting list of countries\ncountries_list = list(countries_order_by_highest_confirmed_cases.Country.values)[:60]\n\n# Setting subplosts\nf, axes = plt.subplots(len(countries_list),2,figsize=(22,len(countries_list)*5),dpi=100) \n\n\nfor i,j in zip(countries_list,range(0,len(countries_list))):\n    # Charts for column 1\n    palette = sns.color_palette(\"magma\", 3)\n    chart = sns.lineplot(x=\"Date\", y=\"Cases\",\n                  hue=\"Type\",style='Type',\n                  palette=palette, data=country_level_cases[country_level_cases['Country']==i],ax=axes[j][0])\n    chart.set_xticklabels(\n        chart.get_xticklabels(90), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart.set_title(\"Covid-19 reporte cases in \"+i,fontsize=14,fontweight='bold')\n    \n    # Charts for column 1\n    palette2 = sns.color_palette(\"magma\", 4)\n    chart2 = sns.lineplot(x=\"Date\", y=\"Percentage\",\n                  hue=\"Type\",style='Type',\n                  palette=palette2, data=country_level_percent[country_level_percent['Country']==i],ax=axes[j][1])\n    chart2.set_xticklabels(\n        chart.get_xticklabels(), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart2.set_title(\"Covid-19 percentages of cases in \"+i,fontsize=14,fontweight='bold')\n\nplt.tight_layout()\nplt.legend(loc='best')\nplt.show(block=False)","2199a426":"# Getting list of countries\ncountries_list = list(countries_order_by_highest_confirmed_cases.Country.values)[60:120]\n\n# Setting subplosts\nf, axes = plt.subplots(len(countries_list),2,figsize=(22,len(countries_list)*5),dpi=200) \n\n\nfor i,j in zip(countries_list,range(0,len(countries_list))):\n    # Charts for column 1\n    palette = sns.color_palette(\"magma\", 3)\n    chart = sns.lineplot(x=\"Date\", y=\"Cases\",\n                  hue=\"Type\",style='Type',\n                  palette=palette, data=country_level_cases[country_level_cases['Country']==i],ax=axes[j][0])\n    chart.set_xticklabels(\n        chart.get_xticklabels(90), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart.set_title(\"Covid-19 reporte cases in \"+i,fontsize=14,fontweight='bold')\n    \n    # Charts for column 1\n    palette2 = sns.color_palette(\"magma\", 4)\n    chart2 = sns.lineplot(x=\"Date\", y=\"Percentage\",\n                  hue=\"Type\",style='Type',\n                  palette=palette2, data=country_level_percent[country_level_percent['Country']==i],ax=axes[j][1])\n    chart2.set_xticklabels(\n        chart.get_xticklabels(), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart2.set_title(\"Covid-19 percentages of cases in \"+i,fontsize=14,fontweight='bold')\n\nplt.tight_layout()\nplt.legend(loc='best')\nplt.show(block=False)","b403d2f6":"# Getting list of countries\ncountries_list = list(countries_order_by_highest_confirmed_cases.Country.values)[120:180]\n\n# Setting subplosts\nf, axes = plt.subplots(len(countries_list),2,figsize=(22,len(countries_list)*5),dpi=200) \n\n\nfor i,j in zip(countries_list,range(0,len(countries_list))):\n    # Charts for column 1\n    palette = sns.color_palette(\"magma\", 3)\n    chart = sns.lineplot(x=\"Date\", y=\"Cases\",\n                  hue=\"Type\",style='Type',\n                  palette=palette, data=country_level_cases[country_level_cases['Country']==i],ax=axes[j][0])\n    chart.set_xticklabels(\n        chart.get_xticklabels(90), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart.set_title(\"Covid-19 reporte cases in \"+i,fontsize=14,fontweight='bold')\n    \n    # Charts for column 1\n    palette2 = sns.color_palette(\"magma\", 4)\n    chart2 = sns.lineplot(x=\"Date\", y=\"Percentage\",\n                  hue=\"Type\",style='Type',\n                  palette=palette2, data=country_level_percent[country_level_percent['Country']==i],ax=axes[j][1])\n    chart2.set_xticklabels(\n        chart.get_xticklabels(), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart2.set_title(\"Covid-19 percentages of cases in \"+i,fontsize=14,fontweight='bold')\n\nplt.tight_layout()\nplt.legend(loc='best')\nplt.show(block=False)","d265063a":"# countries_order_by_highest_confirmed_cases.shape","78905262":"# Getting list of countries\ncountries_list = list(countries_order_by_highest_confirmed_cases.Country.values)[180:]\n\n# Setting subplosts\nf, axes = plt.subplots(len(countries_list),2,figsize=(22,len(countries_list)*5),dpi=200) \n\n\nfor i,j in zip(countries_list,range(0,len(countries_list))):\n    # Charts for column 1\n    palette = sns.color_palette(\"magma\", 3)\n    chart = sns.lineplot(x=\"Date\", y=\"Cases\",\n                  hue=\"Type\",style='Type',\n                  palette=palette, data=country_level_cases[country_level_cases['Country']==i],ax=axes[j][0])\n    chart.set_xticklabels(\n        chart.get_xticklabels(90), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart.set_title(\"Covid-19 reporte cases in \"+i,fontsize=14,fontweight='bold')\n    \n    # Charts for column 1\n    palette2 = sns.color_palette(\"magma\", 4)\n    chart2 = sns.lineplot(x=\"Date\", y=\"Percentage\",\n                  hue=\"Type\",style='Type',\n                  palette=palette2, data=country_level_percent[country_level_percent['Country']==i],ax=axes[j][1])\n    chart2.set_xticklabels(\n        chart.get_xticklabels(), \n        rotation=90, \n        minor=True,\n        verticalalignment=True,\n        horizontalalignment='right',\n        fontweight='light',\n        fontsize='large'\n    )\n    chart2.set_title(\"Covid-19 percentages of cases in \"+i,fontsize=14,fontweight='bold')\n\nplt.tight_layout()\nplt.legend(loc='best')\nplt.show(block=False)","d1f4799a":"https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_time_series\n\ncopy of the same here, uploaded after some preprocesssing to save memory.It will be automatically scrapped and saved in this repository every day.\n\nhttps:\/\/raw.githubusercontent.com\/ms4hafiz\/COVID19\/master\/covid_19_complete.csv","27e477ed":"# 1-COVID-19 SUMMARY (latest date)","4e622e13":"# So far known about COVID-19","e8d93929":"1. https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\n2. https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/index.html\n3. https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019","dd395785":"# 5-Country-wise cases and fatality","1299de99":"## Figure 9: Top 30 countries with lowest percentage of active cases","10881da4":"# 2- COVID-19 Country-wise cases (latest date)","0755e490":"# Data Source","a1b04abd":"# 4-Top 30 Countries","df9ba33d":"# 3-Daily trend and cases"}}