{"cell_type":{"a250b417":"code","d9eabf35":"code","2b6ca930":"code","634cb879":"code","0f8de447":"code","e423d435":"code","1c983434":"code","c6ce31c6":"code","937109c4":"code","8c2844a2":"code","c72c5594":"code","42c4f0cb":"code","04902264":"code","a483daa7":"code","23a1540b":"code","908e8258":"code","3b679ad1":"code","b19c9a34":"code","ee71a1a5":"code","f87e601d":"code","77ca9ae1":"code","32c293b8":"code","bf588fb1":"code","33ef4928":"code","35eaec56":"code","cd3351c1":"code","b7f484d7":"code","f7fbce83":"code","2dc6018b":"code","af6707f1":"code","9888a801":"code","112b270e":"code","d6f9fffb":"code","7c578b0f":"code","50b8bd0b":"code","617d7f92":"code","b78a1f2b":"code","2be4e609":"code","d3f844c9":"code","c0c2e110":"code","611a7f31":"code","c1bc37bb":"code","9fab19ab":"code","7a2090a3":"code","995ace26":"code","e78df9f5":"code","343e4ef3":"code","635a6291":"code","e260d14d":"code","21bb492f":"code","11d15880":"code","0c8f0e71":"code","b12b962f":"code","dff526c9":"code","e18b7c12":"code","7cf9f131":"markdown","82f30725":"markdown","9da0ea98":"markdown","a9547892":"markdown","45920c2c":"markdown","6a8f7ce9":"markdown","6c3f65c6":"markdown","bbff03b0":"markdown","cc4bfd62":"markdown","30cb5aa1":"markdown","4bd5c6a3":"markdown","565b40ed":"markdown","63cfb001":"markdown","18a34041":"markdown","f3d9c8e6":"markdown","1e1fbdf5":"markdown","2be46bb1":"markdown","2d43e535":"markdown","f86f7fe6":"markdown","7d5d90b5":"markdown","36311766":"markdown","1a2545e8":"markdown","2072e8e8":"markdown","2fedac35":"markdown","2864d7fa":"markdown","139535c0":"markdown","e4ea2b9d":"markdown","c4ce1969":"markdown","9619f04c":"markdown","82a1ecbc":"markdown","a2b664e8":"markdown","426dd25b":"markdown","e4d1e10a":"markdown","92e76504":"markdown","c69f957e":"markdown","8157c7bf":"markdown","3d2a6a5c":"markdown","98c695ae":"markdown","9cebac6c":"markdown","f9cb29ec":"markdown","f49fe6b9":"markdown"},"source":{"a250b417":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","d9eabf35":"treino = pd.read_csv(\"..\/input\/ta192\/train.csv\")    # Dataset que ser\u00e1 utilizado, futuramente, para treinar o modelo.\ntreino.set_index(\"ID\", inplace=True) # Define a coluna ID como \u00edndice (evita que essa interfira na predi\u00e7\u00e3o).","2b6ca930":"pd.set_option('display.max_columns', 25) # Permitir a visualiza\u00e7\u00e3o de todas as 25 colunas.","634cb879":"treino.rename({\"PAY_0\":\"PAY_1\"}, axis=\"columns\", inplace=True) # Altera o nome da coluna PAY_0 para PAY_1","0f8de447":"treino.info()","e423d435":"print(\"SEX:\", treino.SEX.unique())\nprint(\"EDUCATION:\", treino.EDUCATION.unique())\nprint(\"MARRIAGE:\", treino.MARRIAGE.unique())","1c983434":"# Substitui \"male\" e \"m\" por 1.\ntreino[\"SEX\"].replace(to_replace=\"male\", value=1, inplace=True)\ntreino[\"SEX\"].replace(to_replace=\"m\", value=1, inplace=True)\n\n# Substitui \"female\" e \"f\" por 2.\ntreino[\"SEX\"].replace(to_replace=\"female\", value=2, inplace=True)\ntreino[\"SEX\"].replace(to_replace=\"f\", value=2, inplace=True)","c6ce31c6":"# Substitui \"graduate school\", \"university\", \"high school\" e \"others\" respectivamente por 1, 2, 3 e 4.\ntreino[\"EDUCATION\"].replace(to_replace=\"graduate school\", value=1, inplace=True)\ntreino[\"EDUCATION\"].replace(to_replace=\"university\", value=2, inplace=True)\ntreino[\"EDUCATION\"].replace(to_replace=\"high school\", value=3, inplace=True)\ntreino[\"EDUCATION\"].replace(to_replace=\"others\", value=4, inplace=True)","937109c4":"# Substitui \"married\" e \"MARRIED\" por 1.\ntreino[\"MARRIAGE\"].replace(to_replace=\"married\", value=1, inplace=True)\ntreino[\"MARRIAGE\"].replace(to_replace=\"MARRIED\", value=1, inplace=True)\n\n# Substitui \"single\" e \"SINGLE\" por 2.\ntreino[\"MARRIAGE\"].replace(to_replace=\"single\", value=2, inplace=True)\ntreino[\"MARRIAGE\"].replace(to_replace=\"SINGLE\", value=2, inplace=True)\n\n# Substitui \"others\" e \"OTHERS\" por 3.\ntreino[\"MARRIAGE\"].replace(to_replace=\"others\", value=3, inplace=True)\ntreino[\"MARRIAGE\"].replace(to_replace=\"OTHERS\", value=3, inplace=True)","8c2844a2":"treino.describe()","c72c5594":"print(\"N\u00famero de valores faltantes:\", treino.shape[0]*treino.shape[1] - treino.count().sum(), end=\" \")\nprint(\"(\", \"{0:.2f}\".format((treino.shape[0]*treino.shape[1] - treino.count().sum())*100\/(treino.shape[0]*treino.shape[1])), \"%)\", sep=\"\")","42c4f0cb":"print(\"N\u00famero de linhas com valores faltantes:\", (treino.shape[0] - treino.dropna().shape[0]), end=\" \")\nprint(\"(\", \"{0:.2f}\".format((treino.shape[0] - treino.dropna().shape[0])*100\/treino.shape[0]), \"%)\", sep=\"\")","04902264":"treino[\"AGE\"].value_counts()","a483daa7":"treino[\"AGE\"].values[treino['AGE'] >= 90] = 77 # Trasnforma idades maiores ou iguais a 90 anos para 77 anos.\ntreino[\"AGE\"].values[treino['AGE'] < 20] = 20  # Trasnforma idades menores do que 20 anos para 20 anos.","23a1540b":"sns.distplot(treino[\"AGE\"].dropna())","908e8258":"# Importa a biblioteca utilizada para criar os valores aleat\u00f3rios.\nimport random\n\n# Garante a reprodutibilidade dos resultados.\nrandom.seed(101)\n\n# Substitui os valores faltantes.\ntreino[\"AGE\"].fillna(treino[\"AGE\"].apply(lambda v: random.randint(20,80)), inplace=True)","3b679ad1":"sns.distplot(treino[\"AGE\"])","b19c9a34":"treino[\"SEX\"].fillna(1.5, inplace=True)","ee71a1a5":"treino[\"MARRIAGE\"].fillna(3, inplace=True)","f87e601d":"treino[\"EDUCATION\"].fillna(4, inplace=True)","77ca9ae1":"treino[[\"PAY_6\", \"PAY_5\", \"PAY_4\", \"PAY_3\", \"PAY_2\", \"PAY_1\"]].head(20)","32c293b8":"# Substitui os valores faltantes da coluna PAY_1 pela moda dessa.\ntreino[\"PAY_1\"].fillna(int(treino[\"PAY_1\"].mode()), inplace=True)\n\n# Itera por cada linha das colunas de PAY_2 at\u00e9 PAY_6 aplicando a transforma\u00e7\u00e3o descrita.\nfor x in range(2, 7):    \n    treino[\"PAY_\" + str(x)] = treino.apply(lambda linha: linha[\"PAY_\" + str(x-1)] if np.isnan(linha[\"PAY_\" + str(x)]) else linha[\"PAY_\" + str(x)], axis=1)","bf588fb1":"treino[[\"BILL_AMT6\", \"BILL_AMT5\", \"BILL_AMT4\", \"BILL_AMT3\", \"BILL_AMT2\", \"BILL_AMT1\"]].head(30)","33ef4928":"# Itera por cada linha das colunas de BILL_AMT1 at\u00e9 BILL_AMT6 aplicando a transforma\u00e7\u00e3o descrita.\nfor x in range(1, 7):\n    treino[\"BILL_AMT\" + str(x)] = treino.apply(\n        lambda linha: int(linha[[\"BILL_AMT6\", \"BILL_AMT5\", \"BILL_AMT4\", \"BILL_AMT3\", \"BILL_AMT2\", \"BILL_AMT1\"]].mean(axis=0)) \n        if np.isnan(linha[\"BILL_AMT\" + str(x)]) \n        else linha[\"BILL_AMT\" + str(x)], axis=1)","35eaec56":"treino[[\"PAY_AMT6\", \"PAY_AMT5\", \"PAY_AMT4\", \"PAY_AMT3\", \"PAY_AMT2\", \"PAY_AMT1\"]].head(30)","cd3351c1":"# Itera por cada linha das colunas de PAY_AMT1 at\u00e9 PAY_AMT6 aplicando a transforma\u00e7\u00e3o descrita.\nfor x in range(1, 7):\n    treino[\"PAY_AMT\" + str(x)] = treino.apply(\n        lambda linha: int(linha[[\"PAY_AMT6\", \"PAY_AMT5\", \"PAY_AMT4\", \"PAY_AMT3\", \"PAY_AMT2\", \"PAY_AMT1\"]].mean(axis=0)) \n        if np.isnan(linha[\"PAY_AMT\" + str(x)]) \n        else linha[\"PAY_AMT\" + str(x)], axis=1)","b7f484d7":"print(\"LIMIT_BAL:\", sorted(treino.LIMIT_BAL.unique()))","f7fbce83":"plt.figure(figsize=(8, 6))\n\nsns.distplot(treino[\"LIMIT_BAL\"].dropna())","2dc6018b":"plt.figure(figsize=(8, 6))\n\nsns.boxplot(treino[\"LIMIT_BAL\"].dropna())","af6707f1":"# Garante a reprodutibilidade dos resultados.\nrandom.seed(101)\n\n# Substitui os valores faltantes.\ntreino[\"LIMIT_BAL\"].fillna(treino[\"LIMIT_BAL\"].apply(lambda x: random.randrange(10000, 500001, 10000)), inplace=True)","9888a801":"plt.figure(figsize=(8, 6))\n\nsns.distplot(treino[\"LIMIT_BAL\"])","112b270e":"plt.figure(figsize=(8,6))\n\nsns.boxplot(treino[\"LIMIT_BAL\"])","d6f9fffb":"treino.info()","7c578b0f":"treino.describe()","50b8bd0b":"teste_ID = pd.read_csv(\"..\/input\/ta192\/test.csv\")  # Dataset de teste com ID, ser\u00e1 usado somente no final para extrair o ID.\nteste = teste_ID.drop(\"ID\", axis=1) # Dataset de teste sem ID, ser\u00e1 tratado e utilizado \"de fato\" (para predi\u00e7\u00f5es e etc.).","617d7f92":"teste.rename({\"PAY_0\":\"PAY_1\"}, axis=\"columns\", inplace=True) # Altera o nome da coluna PAY_0 para PAY_1.","b78a1f2b":"teste.info()","2be4e609":"teste.describe()","d3f844c9":"# Substitui \"male\" e \"m\" por 1.\nteste[\"SEX\"].replace(to_replace=\"male\", value=1, inplace=True)\nteste[\"SEX\"].replace(to_replace=\"m\", value=1, inplace=True)\n\n# Substitui \"female\" e \"f\" por 2.\nteste[\"SEX\"].replace(to_replace=\"female\", value=2, inplace=True)\nteste[\"SEX\"].replace(to_replace=\"f\", value=2, inplace=True)","c0c2e110":"# Substitui \"graduate school\", \"university\", \"high school\" e \"others\" respectivamente por 1, 2, 3 e 4.\nteste[\"EDUCATION\"].replace(to_replace=\"graduate school\", value=1, inplace=True)\nteste[\"EDUCATION\"].replace(to_replace=\"university\", value=2, inplace=True)\nteste[\"EDUCATION\"].replace(to_replace=\"high school\", value=3, inplace=True)\nteste[\"EDUCATION\"].replace(to_replace=\"others\", value=4, inplace=True)","611a7f31":"# Substitui \"married\" e \"MARRIED\" por 1.\nteste[\"MARRIAGE\"].replace(to_replace=\"married\", value=1, inplace=True)\nteste[\"MARRIAGE\"].replace(to_replace=\"MARRIED\", value=1, inplace=True)\n\n# Substitui \"single\" e \"SINGLE\" por 2.\nteste[\"MARRIAGE\"].replace(to_replace=\"single\", value=2, inplace=True)\nteste[\"MARRIAGE\"].replace(to_replace=\"SINGLE\", value=2, inplace=True)\n\n# Substitui \"others\" e \"OTHERS\" por 3.\nteste[\"MARRIAGE\"].replace(to_replace=\"others\", value=3, inplace=True)\nteste[\"MARRIAGE\"].replace(to_replace=\"OTHERS\", value=3, inplace=True)","c1bc37bb":"teste[\"AGE\"].values[teste_ID['AGE'] >= 90] = 77\nteste[\"AGE\"].values[teste_ID['AGE'] < 20] = 20","9fab19ab":"# Importa a biblioteca utilizada para criar os valores aleat\u00f3rios.\nimport random\n\n# Garante a reprodutibilidade dos resultados.\nrandom.seed(101)\n\n# Substitui os valores faltantes de AGE.\nteste[\"AGE\"].fillna(teste[\"AGE\"].apply(lambda v: random.randint(20, 80)), inplace=True)","7a2090a3":"# Preenche valores faltantes de SEX, MARRIAGE e EDUCATION.\nteste[\"SEX\"].fillna(1.5, inplace=True)\nteste[\"MARRIAGE\"].fillna(3, inplace=True)\nteste[\"EDUCATION\"].fillna(4, inplace=True)","995ace26":"# Substitui os valores faltantes da coluna PAY_1 pela moda dessa.\nteste[\"PAY_1\"].fillna(int(teste[\"PAY_1\"].mode()), inplace=True)\n\n# Itera por cada linha das colunas de PAY_2 at\u00e9 PAY_6 aplicando a transforma\u00e7\u00e3o descrita anteriormente.\nfor x in range(2, 7):    \n    teste[\"PAY_\" + str(x)] = teste.apply(lambda linha: linha[\"PAY_\" + str(x-1)] if np.isnan(linha[\"PAY_\" + str(x)]) else linha[\"PAY_\" + str(x)], axis=1)","e78df9f5":"# Itera por cada linha das colunas de BILL_AMT1 at\u00e9 BILL_AMT6 aplicando a transforma\u00e7\u00e3o descrita anteriormente.\nfor x in range(1, 7):\n    teste[\"BILL_AMT\" + str(x)] = teste.apply(\n        lambda linha: int(linha[[\"BILL_AMT6\", \"BILL_AMT5\", \"BILL_AMT4\", \"BILL_AMT3\", \"BILL_AMT2\", \"BILL_AMT1\"]].mean(axis=0)) \n        if np.isnan(linha[\"BILL_AMT\" + str(x)]) \n        else linha[\"BILL_AMT\" + str(x)], axis=1)","343e4ef3":"# Itera por cada linha das colunas de PAY_AMT1 at\u00e9 PAY_AMT6 aplicando a transforma\u00e7\u00e3o descrita anteriormente.\nfor x in range(1, 7):\n    teste[\"PAY_AMT\" + str(x)] = teste.apply(\n        lambda linha: int(linha[[\"PAY_AMT6\", \"PAY_AMT5\", \"PAY_AMT4\", \"PAY_AMT3\", \"PAY_AMT2\", \"PAY_AMT1\"]].mean(axis=0)) \n        if np.isnan(linha[\"PAY_AMT\" + str(x)]) \n        else linha[\"PAY_AMT\" + str(x)], axis=1)","635a6291":"# Garante a reprodutibilidade dos resultados.\nrandom.seed(101)\n\n# Substitui os valores faltantes de LIMIT_BAL.\nteste[\"LIMIT_BAL\"].fillna(teste[\"LIMIT_BAL\"].apply(lambda x: random.randrange(10000, 500001, 10000)), inplace=True)","e260d14d":"teste.info()","21bb492f":"teste.describe()","11d15880":"from sklearn.ensemble import GradientBoostingClassifier","0c8f0e71":"X = treino.drop(\"default.payment.next.month\", axis=1) # Features.\ny = treino[\"default.payment.next.month\"]              # Target.","b12b962f":"gbc = GradientBoostingClassifier()\ngbc.fit(X, y) # Treina o modelo.","dff526c9":"y_pred = gbc.predict(teste) # Predi\u00e7\u00e3o do target.","e18b7c12":"saida = pd.DataFrame({\"ID\": teste_ID[\"ID\"], \"default.payment.next.month\": y_pred}) # Cria o dataframe de sa\u00edda (i.e., a ser exportado).\nsaida.to_csv(\"1.csv\", index=False) # Exporta o dataframe criado no passo anterior.","7cf9f131":"### 2.11. Pagamentos","82f30725":"Transformar as features categ\u00f3ricas em num\u00e9ricas, primeiro, visualizar quais s\u00e3o os seus valores.","9da0ea98":"Transformando os valores de `SEX`:","a9547892":"### 2.9. Status de pagamento (PAY_x)","45920c2c":"## 3. Dataset final","6a8f7ce9":"### 2.3. Segundo Panorama","6c3f65c6":"**Exemplo:** se para a linha 42 e a coluna `BILL_AMT1` tem-se um dado faltante, ser\u00e1 nessa posi\u00e7\u00e3o inserida a m\u00e9dia aritm\u00e9tica dos valores (n\u00e3o faltantes) de `BILL_AMT2` at\u00e9 `BILL_AMT6` da linha 42.","bbff03b0":"O que poderia ser feito:\n* no tratamento dos dados, relacionar pagamentos, faturas e status de pagamentos (possivelmente, limite de cr\u00e9dito tamb\u00e9m) para permitir que o preenchimento dos dados faltantes fosse mais consistente;\n* na elabora\u00e7\u00e3o do modelo, refino dos par\u00e2metros.\n> * **OBS:** na verdade, foram utilizadas como base duas refer\u00eancias ([essa](https:\/\/towardsdatascience.com\/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74) \u2014 agradecimentos ao **Ariel**; e [essa](https:\/\/rcarneva.github.io\/understanding-gradient-boosting-part-1.html)) para implementa\u00e7\u00e3o de um `RandomizedSearchCV()`, que consumiu aproximadamente 85 minutos e obteve um resultado abaixo do esperado (*erro meu*).","cc4bfd62":"**Importante:**\n\n* valores an\u00f4malos para idade (`AGE`), negativos e outros at\u00edpicos;\n* valores an\u00f4malos (**-2** e **0**) para `PAY_x`.","30cb5aa1":"Os valores faltantes ser\u00e3o preenchidos por n\u00fameros \"aleat\u00f3rios\" entre o intervalo definido pela idade m\u00e1xima e pela idade m\u00ednima.","4bd5c6a3":"Os dados faltantes ser\u00e3o preenchidos com valores \"aleat\u00f3rios\" pertencentes ao intervalo definido pelo limite de cr\u00e9dito m\u00ednimo e um valor pr\u00f3ximo ao limite superior. Al\u00e9m disso, iram seguir a l\u00f3gica j\u00e1 estabelecida: os limites de cr\u00e9dito crescem de 10.000 em 10.000 d\u00f3lares.","565b40ed":"### 4.2. Gradient Boosting","63cfb001":"Chechando o dataset de teste ap\u00f3s as transforma\u00e7\u00f5es:","18a34041":"### 4.1. Tratamento do dataset de teste","f3d9c8e6":"### 2.12. Limite de Cr\u00e9dito","1e1fbdf5":"### 2.1. Primeiro panorama","2be46bb1":"Para preencher os valores faltantes, ser\u00e1 utilizado o valor 3, correspondente a \"outro\".","2d43e535":"Transformando os valores de `MARRIAGE`:","f86f7fe6":"Transformando os valores de `EDUCATION`:","7d5d90b5":"Para preencher os valores faltantes, ser\u00e1 utilizado um novo valor, um intermedi\u00e1rio entre masculino (1) e feminino (2), isto \u00e9, 1.5.","36311766":"### 2.2. Convers\u00e3o","1a2545e8":"Agora, dever\u00e1 ser feito com o dataset de teste tudo aquilo feito com o dataset de treino.","2072e8e8":"## 1. Introdu\u00e7\u00e3o","2fedac35":"### 2.6. Sexo","2864d7fa":"Agora, visualizar as caracter\u00edsticas do dataset.","139535c0":"## 4. Criando um modelo","e4ea2b9d":"### 2.10. Faturas","c4ce1969":"Os valores faltantes de uma coluna dessas ser\u00e1 substitu\u00eddo pela m\u00e9dia aritm\u00e9tica dos valores das demais colunas, sempre se considerando uma mesma linha. ","9619f04c":"## 2. Tratamento e visualiza\u00e7\u00e3o de dados","82a1ecbc":"### 2.8. Grau de escolaridade","a2b664e8":"Para preencher os valores faltantes, ser\u00e1 utilizado o valor 4, correspondente a \"outros\".","426dd25b":"## 5. Considera\u00e7\u00f5es finais","e4d1e10a":"Para remover os valores faltantes dessas colunas, a l\u00f3gica utilizada ser\u00e1:\n* preenchimento dos valores faltantes de `PAY_1` com a moda dessa coluna;\n* \"propaga\u00e7\u00e3o da observa\u00e7\u00e3o anterior\", por outros termos, o valor faltante de uma linha da coluna **PAY_n** (n = 2, 3, 4, 5, 6) receber\u00e1 o valor (da mesma linha) da coluna anterior (**PAY_n-1**).","92e76504":"As observa\u00e7\u00f5es do dataset foram feitas com base em habitantes de Taiwan, que possuiam, em 2005, uma expectativa de vida de aproximadamente 77 anos. Considerando 90 ou mais anos valores aberrantes, esses ser\u00e3o transformados em 77. Al\u00e9m disso, idades inferiores aos 20 anos ser\u00e3o trasformadas em 20.","c69f957e":"Verificar, percentualmente, a quantidade de observa\u00e7\u00f5es ausentes (dimensionar melhor o problema).","8157c7bf":"### 2.4. Valores faltantes","3d2a6a5c":"### 2.7. Estado Civil","98c695ae":"**Importante:** \n* tr\u00eas features categ\u00f3ricas, ser\u00e1 necess\u00e1rio convert\u00ea-las para o tipo `float64`; \n* aparentemente, grande n\u00famero de dados faltantes.","9cebac6c":"Tal qual na etapa anterior (*2.10. Faturas*), os valores faltantes de uma coluna dessas ser\u00e1 substitu\u00eddo pela m\u00e9dia aritm\u00e9tica dos valores das demais colunas, sempre se considerando uma mesma linha.","f9cb29ec":"### 2.5. Idades","f49fe6b9":"# Default of Credit Card Clients\n## Competi\u00e7\u00e3o TA 2019.2\n\nDescri\u00e7\u00e3o do dataset utilizado:\n\n**Features:**\n\n* **ID:** identifica\u00e7\u00e3o do cliente.\n* **LIMIT_BAL:** limite de cr\u00e9dito em d\u00f3lares.\n* **SEX:** sexo.\n* **EDUCATION:** grau de escolaridade.\n* **MARRIAGE:** estado civil.\n* **AGE:** idade em anos.\n* **PAY_0, PAY_2-6:** status de pagamento dos \u00faltimos 6 meses.\n\n> * **-1:** pago completamente.\n> * **1:** um m\u00eas de atraso.\n> * **2:** dois meses de atraso.\n> * Sucessivamente at\u00e9:\n> * **9:** nove meses ou mais de atraso.\n\n* **BILL_AMT1-6:** valor em d\u00f3lares das faturas nos \u00faltimos 6 meses.\n* **PAY_AMT1-6:** valor em d\u00f3lares pago nos \u00faltimos 6 meses.\n\n**Target:**\n\n* **default.payment.next.month:** indica se a fatura do pr\u00f3ximo m\u00eas ser\u00e1 ou n\u00e3o paga.\n\n**Obs:** \"\u00faltimos seis meses\" representa o per\u00edodo de abril de 2005 at\u00e9 setembro de 2005.\n\nLink do dataset: https:\/\/archive.ics.uci.edu\/ml\/datasets\/default+of+credit+card+clients"}}