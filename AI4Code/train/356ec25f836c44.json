{"cell_type":{"dfc375a4":"code","c8408a3d":"code","e5d365a0":"code","98527b8e":"code","a2ff7848":"code","84e77bb9":"code","47b67047":"code","9c6eea59":"code","4fe6c19d":"code","7499d842":"code","05fd32c9":"code","d74c3d48":"code","9213655f":"code","a9e051d7":"code","03cfe9eb":"code","3456c42f":"code","72dece14":"code","bb59f185":"code","4ea5d432":"code","8044b50f":"code","3c80ee7b":"code","80efc64b":"code","48851045":"code","b6251de2":"code","9fc7771a":"code","62dd582f":"code","49d7be30":"code","ffa61775":"code","b3e20975":"code","8f93da7e":"code","9be02573":"code","a90d339d":"code","2beb0c35":"code","72958ead":"code","9e69f68a":"code","827c73dd":"code","cbb7a7f3":"code","de59158d":"code","4171f72e":"code","df8dae0f":"code","79418d80":"code","437e57ef":"code","7818ef61":"code","c2542758":"code","9e14f58b":"code","37d661eb":"code","b00fe3c9":"code","7031f428":"code","4dfef64f":"code","0f989735":"code","c04d7ea9":"code","2f56f86c":"code","3a006610":"markdown","d2c00956":"markdown","6a148b9c":"markdown","ee17ccec":"markdown","94e2cff5":"markdown","4de01d57":"markdown","a912b25e":"markdown","3c7af5dd":"markdown","69f3afb1":"markdown","07017fcd":"markdown","5d87a441":"markdown","d9e4a5dc":"markdown","a7f904f0":"markdown","3c3be86f":"markdown","c34c9f0b":"markdown","4e9f6cb6":"markdown","27044126":"markdown","fec41de4":"markdown","d8b0438c":"markdown","03917977":"markdown","7136b996":"markdown","b83d31a7":"markdown","d244c06a":"markdown","ee5ae114":"markdown"},"source":{"dfc375a4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px","c8408a3d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e5d365a0":"%matplotlib inline\ninit_notebook_mode(connected=True)\nsns.set_style('whitegrid')","98527b8e":"pokemon = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')","a2ff7848":"pokemon.head()","84e77bb9":"pokemon.info()","47b67047":"pokemon['Legendary'].value_counts()","9c6eea59":"pokemon.groupby(['Generation','Legendary']).count()['Name']","4fe6c19d":"pokemon[pokemon['Legendary']]['Type 2'].isnull().value_counts()","7499d842":"Legend = pd.get_dummies(pokemon['Legendary'],drop_first=True)","05fd32c9":"pokemon.drop(['#','Legendary'],axis=1,inplace=True)","d74c3d48":"pokemon = pd.concat([pokemon,Legend],axis=1)\npokemon.rename({True:'Legend'},axis=1, inplace=True)","9213655f":"pokemon.head()","a9e051d7":"g=sns.pairplot(pokemon[['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','Legend']],hue='Legend')","03cfe9eb":"corr = pokemon[['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']].corr()\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize=(12,6))\nsns.heatmap(corr,mask=mask,cmap='magma',annot=True)","3456c42f":"plt.figure(figsize=(12,6))\nsns.barplot(y='Name',x='Total', \n            data=pokemon.iloc[pokemon['Total'].sort_values(ascending=False)[:10].index], \n            palette=\"rainbow\")","72dece14":"df = pokemon.iloc[pokemon['Sp. Atk'].sort_values(ascending=False)[:10].index]\nfig = px.bar(df, x='Sp. Atk', y='Name', orientation='h',color='Legend',\n            category_orders={'Name': df['Name'].tolist()})\nfig.show()","bb59f185":"df = pokemon.iloc[pokemon['Attack'].sort_values(ascending=False)[:10].index]\nfig = px.bar(df, x='Attack', y='Name', orientation='h',color='Generation',\n            category_orders={'Name': df['Name'].tolist()})\nfig.show()","4ea5d432":"def pokeplot(pokemon1,pokemon2,stat1,stat2):\n    f = sns.FacetGrid(pokemon[(pokemon['Generation'].apply(lambda x: x in [1,2,3,4,5,6]))], hue='Legend', size=8) \\\n       .map(plt.scatter, stat1, stat2, alpha=0.5) \\\n       .add_legend()\n    plt.subplots_adjust(top=0.9)\n    f.fig.suptitle('{} vs. {}'.format(stat1, stat2))\n    f.ax.set_xlim(0,)\n    f.ax.set_ylim(0,)\n    \n    pkm1 = pokemon[pokemon['Name'] == pokemon1]\n    pkm2 = pokemon[pokemon['Name'] == pokemon2]\n    \n    plt.scatter(pkm1[stat1],pkm1[stat2],s=100,marker='x', c='#d400ff')\n    plt.text(pkm1[stat1]+3,pkm1[stat2]-6, pokemon1, \n             fontsize=13, weight='bold', color='#d400ff')\n    \n    plt.scatter(pkm2[stat1],pkm2[stat2],s=100,marker='x', c='#ff0000')\n    plt.text(pkm2[stat1]+3,pkm2[stat2]-6, pokemon2, \n             fontsize=13, weight='bold', color='#ff0000')","8044b50f":"pokeplot('Mewtwo','Rayquaza','Attack','Defense')","3c80ee7b":"pokeplot('Mewtwo','Rayquaza','Speed','HP')","80efc64b":"def type_numbering(string) : \n    if string == 'Normal' :\n        return 1\n    elif string== 'Fire' :\n        return 2\n    elif string == 'Fighting' :\n        return 3\n    elif string == 'Water' :\n        return 4\n    elif string == 'Flying' :\n        return 5\n    elif string == 'Grass' :\n        return 6\n    elif string == 'Poison' :\n        return 7\n    elif string == 'Electric' :\n        return 8\n    elif string == 'Ground' :\n        return 9\n    elif string == 'Psychic' :\n        return 10\n    elif string == 'Rock' :\n        return 11\n    elif string == 'Ice' :\n        return 12\n    elif string == 'Bug' :\n        return 13\n    elif string == 'Dragon' :\n        return 14\n    elif string == 'Ghost' :\n        return 15\n    elif string == 'Dark' :\n        return 16\n    elif string == 'Steel' :\n        return 17\n    elif string == 'Fairy' :\n        return 18\n    else :\n        return 0","48851045":"pokemon['Type 1'] = pokemon['Type 1'].apply(type_numbering)\npokemon['Type 2'] = pokemon['Type 2'].apply(type_numbering)","b6251de2":"pokemon.drop('Name',axis=1,inplace=True)","9fc7771a":"from sklearn.model_selection import train_test_split","62dd582f":"X= pokemon.drop('Legend',axis=1)\ny= pokemon['Legend']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=90)","49d7be30":"from sklearn.metrics import confusion_matrix,classification_report","ffa61775":"from sklearn.linear_model import LogisticRegression","b3e20975":"logmode = LogisticRegression()","8f93da7e":"logmode.fit(X_train,y_train)","9be02573":"y_pred = logmode.predict(X_test)","a90d339d":"cm = pd.DataFrame(confusion_matrix(y_test,y_pred), \n                  index = ['Non-Legendary', 'Legendary'], columns = ['Non-Legendary', 'Legendary'])\ncm.index.name = 'Actual'\ncm.columns.name = 'Predict'\nprint(cm)","2beb0c35":"print(classification_report(y_test,y_pred))","72958ead":"from sklearn.tree import DecisionTreeClassifier","9e69f68a":"dtc = DecisionTreeClassifier(max_depth=5)","827c73dd":"dtc.fit(X_train,y_train)","cbb7a7f3":"y_pred2 = dtc.predict(X_test)","de59158d":"cm = pd.DataFrame(confusion_matrix(y_test,y_pred2), \n                  index = ['Non-Legendary', 'Legendary'], columns = ['Non-Legendary', 'Legendary'])\ncm.index.name = 'Actual'\ncm.columns.name = 'Predict'\nprint(cm)","4171f72e":"print(classification_report(y_test,y_pred2))","df8dae0f":"from sklearn.ensemble import RandomForestClassifier","79418d80":"rfc= RandomForestClassifier(max_depth=5)","437e57ef":"rfc.fit(X_train,y_train)","7818ef61":"y_pred3 = rfc.predict(X_test)","c2542758":"cm = pd.DataFrame(confusion_matrix(y_test,y_pred3), \n                  index = ['Non-Legendary', 'Legendary'], columns = ['Non-Legendary', 'Legendary'])\ncm.index.name = 'Actual'\ncm.columns.name = 'Predict'\nprint(cm)","9e14f58b":"print(classification_report(y_test,y_pred3))","37d661eb":"from sklearn.svm import SVC","b00fe3c9":"svc= SVC()","7031f428":"from sklearn.model_selection import GridSearchCV\nparams = {'C':[0.1, 1, 10, 100, 1000],'gamma':[1, 0.1, .01, .001, .0001]}\ngrid = GridSearchCV(estimator=svc, param_grid=params,refit=True,verbose=2)\ngrid.fit(X_train, y_train)","4dfef64f":"print(grid.best_score_)\nprint(grid.best_params_)","0f989735":"pred_g = grid.predict(X_test)","c04d7ea9":"cm = pd.DataFrame(confusion_matrix(y_test,pred_g), \n                  index = ['Non-Legendary', 'Legendary'], columns = ['Non-Legendary', 'Legendary'])\ncm.index.name = 'Actual'\ncm.columns.name = 'Predict'\nprint(cm)","2f56f86c":"print(classification_report(y_test,pred_g))","3a006610":"Wow, Mewtwo is really strong, maybe the strongest Pkm so far. And you can clearly see that with Megaevolution, Nintendo boosted the total stats of Pokemon","d2c00956":"There are 65 Legendary Pokemon from Gen 1 to Gen 6.\nOMG, I thought the number is only about 20. The last pokemon game I play was gen 3. I have no Idea about Gen 4 5 6","6a148b9c":"# Predict whether a pokemon is legendary base on stats (Basic ML)\n","ee17ccec":"Top 10 Pokemon have biggest Attack","94e2cff5":"Legendary Pokemons often have 2 Types (yess, they are Legends)","4de01d57":"2. Create data for training and testing by using Train Test Split","a912b25e":"Thank you so much","3c7af5dd":"Top 10 Pokemon have biggest Special Attack","69f3afb1":"1. Go to check the data and clean it","07017fcd":"**Logistic Regression**","5d87a441":"Let transform the data of Legendary column to number so that we can visualize it.","d9e4a5dc":"Generation 3 have outstanding pokemons the most. Imbalance generation  ","a7f904f0":"Let see top 10 strongest pokemon","3c3be86f":"**Support Vecter Machines**","c34c9f0b":"OK, Let go to compare 2 pokemons based on Attack Defense and HP Speed.","4e9f6cb6":"3. Using model","27044126":"**Random Forest**","fec41de4":"Mewtwo again. Most of strong pkms are Legendary","d8b0438c":"* Special Defence is related to Defense and Special Attack!! \n* Attack and Deffence also have correlation","03917977":"Okay, Gen 3 has the most legendary pokemon, and in gen 4 5 6, total legend pokemon dramatically increase (Why the heck did you do that Nintendo?)","7136b996":"First, use pairplot to view the correlation","b83d31a7":"**Decision Tree**","d244c06a":"First, we need to convert Type to number, and if Type= null make it to 0","ee5ae114":"Type 2 is having null data. If you are a Pokemon fan, you know that not every pokemon have 2 types, so it's normal"}}