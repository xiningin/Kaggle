{"cell_type":{"ce35730a":"code","05f3e9a5":"code","029b4e15":"code","49f9da73":"code","4ad8819d":"code","33ddd46a":"code","cc1c8e94":"code","e7cba85f":"code","a5caed32":"code","5ef51f9a":"code","aa373130":"code","be3f9501":"code","129eabb2":"code","d4a88309":"code","4c4461a9":"code","82f98d65":"markdown","2c0a75d5":"markdown","232f8354":"markdown","beb32fc6":"markdown","d7a035ae":"markdown","18b921a7":"markdown","36c990df":"markdown","89d8eee3":"markdown","bfc3fd15":"markdown","d9e6edf0":"markdown"},"source":{"ce35730a":"import pandas as pd\nimport requests","05f3e9a5":"final_df = pd.DataFrame()\nfor i in range(1,501):\n    response = requests.get(f'https:\/\/api.themoviedb.org\/3\/movie\/popular?api_key=de0ce2956064588ee289cb8da1cc9a77&language=en-US&page={i}')\n    temp = pd.DataFrame(response.json()['results'])\n    temp = temp[[ 'genre_ids' , 'id' , 'original_language' , 'original_title' , 'popularity' , 'release_date' , 'vote_average' , 'vote_count']]\n    final_df = final_df.append(temp,ignore_index=True)","029b4e15":"final_df.head()","49f9da73":"response = requests.get('https:\/\/api.themoviedb.org\/3\/genre\/movie\/list?api_key=de0ce2956064588ee289cb8da1cc9a77&language=en-US')","4ad8819d":"genre = pd.DataFrame(response.json())","33ddd46a":"genre","cc1c8e94":"genre_dict = {28 : 'Action' , 12 : 'Adventure', 16 : 'Animation', 35 : 'Comedy' , 80 : 'Crime' , 99 : 'Documentary' , 18 : 'Drama' , 10751 : 'Family' , 14 : 'Fantasy' , 36 : 'History' , 27 : 'Horror' , 10402 : 'Music' , 9648 : 'Mystery' , 10749 : 'Romance' , 878 : 'Science Fiction' , 10770 : 'TV Movie' , 53 : 'Thriller' , 10752 : 'War' , 37 : 'Western'}","e7cba85f":"final_df['final_genre'] = ''\nfor j in range (10000):\n    temp=[]\n    for i in final_df['genre_ids'][j]:\n        temp.append(genre_dict[i])\n    final_df['final_genre'][j] = temp\n    ","a5caed32":"final_df.drop(columns = ['genre_ids'], inplace=True)","5ef51f9a":"final_df.rename(columns = {'final_genre' : 'genre'},inplace=True)","aa373130":"final_df.head()","be3f9501":"ids = final_df.id.to_list()","129eabb2":"new_df = pd.DataFrame()\nfor i in ids:\n  response = requests.get(f'https:\/\/api.themoviedb.org\/3\/movie\/{i}?api_key=de0ce2956064588ee289cb8da1cc9a77')\n  temp1 = pd.DataFrame.from_dict(response.json(),orient='index')\n  new_df = new_df.append(temp1.T[['overview','revenue','runtime' , 'tagline','id']], ignore_index=True)\n","d4a88309":"perfect_df = pd.merge(final_df,new_df,on='id')","4c4461a9":"perfect_df.to_csv('Top_10000_Movies.csv')","82f98d65":"# Goal- Gathering Data for 10000 movies and creating CSV file out of it.\n\nIn this Notebook , we will be using Pandas and requests modules to gather details of 10000 popular movies based on [TMDB](https:\/\/www.themoviedb.org\/) ratings.\n\nWe will use TMDB API for data gathering.\n\nLink for TMDB API -[TMDB_API](https:\/\/www.themoviedb.org\/settings\/api)\n\nIn order to fetch data from API , you will require an API key. You can get your API key created for free from site mentioned above.\n\nFor time being, i have provided my API key in given code, but it is good practice to use unique API key, as limited number of requests can be made by one API key in one day.","2c0a75d5":"**Creating genre column**\n\ncreating new column call final_genre containg actuall genre values of movie.","232f8354":"**Creating Output CSV File**","beb32fc6":"As we have all the Genres corresponding to all the Numbers. Creating Dictionary containing genre_ids as key and corresponding Genre as value.","d7a035ae":"**Fetching Genres**\n\nFrom above cell we can see that genres for each movie in the dataset are nothing but numbers. As per the TMDB API each genre_id corresponds to specific genre.\n\nIn order to get Genres corresponding to each number , we have to send request to API as we have done before.","18b921a7":"As we don't require genre_ids column, so dropping it.","36c990df":"If you find this helpul please consider leaving a comment :)\n\nPlease let me know in case of any feedback or suggetion.\n\nThanks for reading ! Happy Coding !","89d8eee3":"Renaming the column","bfc3fd15":"As done before , converting returned data into JSON file and then converting it to DataFrame.","d9e6edf0":"**Sending request**\n\nThere are total 500 pages returned by the request (each page containing details of several movies), so we can use for loop to iterate 500 times.\n\nfor each iteration i.e for each page i have converted that page into JSON file and that JSON file is converted into DataFrame.\n\nOut of all the columns , we need to select useful columns.\n\nWe need to append dataframe of each page to final dataframe. so that, final data frame contains all the data fetched from that request in the form of dataframe.\n"}}