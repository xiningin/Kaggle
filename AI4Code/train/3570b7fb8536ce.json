{"cell_type":{"cfc60b78":"code","50ca7d7b":"code","d3f6fc56":"code","c65cf5c3":"code","55f61ec5":"code","2a0c676c":"code","718be911":"code","34bda385":"code","7d8af63a":"code","159ac221":"code","6d6667ce":"code","3453d17e":"code","0244d862":"code","dc2fb06c":"code","39b3d857":"code","be7447b8":"code","9e0f176b":"code","7f98f274":"code","43176afb":"code","5b91faaa":"code","98e8ce85":"markdown"},"source":{"cfc60b78":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.metrics import classification_report, confusion_matrix","50ca7d7b":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","d3f6fc56":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","c65cf5c3":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","55f61ec5":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","2a0c676c":"# one hot encoding\nY_train = to_categorical(Y_train, num_classes = 10)","718be911":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.3, random_state=2)","34bda385":"plt.imshow(X_train[0][:,:,0])","7d8af63a":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\n# model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n#                  activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\n# model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n#                  activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","159ac221":"optimizer = RMSprop(lr=0.001)","6d6667ce":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","3453d17e":"epochs = 2\nbatch_size = 64","0244d862":"history = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, \n         validation_data = (X_val, Y_val), verbose = 2)","dc2fb06c":"\n# taken from kaggle docs !\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","39b3d857":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size) # due to generator","be7447b8":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","9e0f176b":"Y_pred = model.predict(X_val)","7f98f274":"Y_pred = [np.argmax(x) for x in Y_pred]","43176afb":"Y_val = [np.argmax(x) for x in Y_val]","5b91faaa":"cm = confusion_matrix(Y_val, Y_pred)\nprint(\"Confusion Matrix\",cm)\nax = sns.heatmap(confusion_matrix(Y_val, Y_pred))\n","98e8ce85":"\n   - Randomly rotate some training images by 10 degrees\n   - Randomly  Zoom by 10% some training images\n   - Randomly shift images horizontally by 10% of the width\n   - Randomly shift images vertically by 10% of the height\n   \n"}}