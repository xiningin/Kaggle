{"cell_type":{"def1c48a":"code","2efb21ab":"code","461b15ca":"code","8455c7c8":"code","b13fe5e3":"code","7215d7ca":"code","318f8e9e":"code","b3c8bf74":"code","3a8cb6ba":"code","81187a6f":"code","41af40e4":"code","1f26c97b":"code","588a142f":"code","48dc43ad":"code","6624f553":"code","fbbe7020":"code","54ddffea":"code","ded8f193":"code","72fae79c":"code","523a2c1a":"code","37dcb2fb":"code","66089248":"code","1cc7d311":"code","f971ed0b":"code","7a82d604":"code","201df88c":"code","a70fe955":"code","e8954d58":"code","5443a9d3":"code","ce5a010f":"code","2277aead":"markdown"},"source":{"def1c48a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport sklearn\nimport pickle\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation,Dense\nfrom sklearn.metrics import mean_squared_error, r2_score \n%matplotlib inline","2efb21ab":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsample = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","461b15ca":"# copy train & test data\ntrain_df = train\ntest_df = test","8455c7c8":"sample.head()","b13fe5e3":"train.head()","7215d7ca":"print(train.shape)\nprint(test.shape)","318f8e9e":"test.head()","b3c8bf74":"print(train.isnull().sum())\nprint(test.isnull().sum())","3a8cb6ba":"train.describe()","81187a6f":"print(train.shape)\nprint(train.columns)","41af40e4":"train = train.drop(['id','breath_id'], axis = 1)\ntest = test.drop(['id','breath_id'], axis = 1)\nX=train.drop('pressure',axis=1)\ny = train['pressure']","1f26c97b":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X,y, random_state=101, test_size=0.1)","588a142f":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()","48dc43ad":"X_train_std= sc.fit_transform(X_train)\ntest_std= sc.transform(test)\nX_val_std= sc.transform(X_val)","6624f553":"X_train_std","fbbe7020":"X_val_std","54ddffea":"test_std","ded8f193":"y_train","72fae79c":"from sklearn.linear_model import LinearRegression\nlr= LinearRegression()","523a2c1a":"lr.fit(X_train_std,y_train)","37dcb2fb":"Y_pred_lr=lr.predict(X_val_std)","66089248":"from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nprint(r2_score(y_val,Y_pred_lr))\nprint(mean_absolute_error(y_val,Y_pred_lr))\nprint(np.sqrt(mean_squared_error(y_val,Y_pred_lr)))","1cc7d311":"# Initialising the ANN\nmodel= Sequential()\n\n# Adding the input layer\nmodel.add(Dense(units=64,activation='relu',input_shape=[5]))\n# model.add(Dense(units=64,activation='relu',input_shape=[len(X_train.keys())]))\n\n# Adding the second hidden layer\nmodel.add(Dense(units=64,activation='relu'))\n\n# Adding the 3rd hidden layer\nmodel.add(Dense(units=64,activation='relu'))\n\n# Adding the output layer\nmodel.add(Dense(units=1))","f971ed0b":"model.compile(loss='mean_squared_error',optimizer='Adam',metrics=['mean_squared_error','mean_absolute_error'])","7a82d604":"model.summary()","201df88c":"model.fit(X_train_std,y_train,batch_size=100,epochs=10)","a70fe955":"mae=model.evaluate(X_train_std,y_train)","e8954d58":"prediction=model.predict(test_std)","5443a9d3":"prediction = pd.DataFrame(prediction)","ce5a010f":"prediction","2277aead":"Neural Network"}}