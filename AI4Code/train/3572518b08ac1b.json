{"cell_type":{"ea740bdb":"code","3c20b38f":"code","4b7ea5c0":"code","ce634ad4":"code","38af8d18":"code","90d83a5f":"code","65c6fbf5":"code","e96d3239":"code","fca08ce0":"code","ffecf9b2":"code","b3496382":"code","5fffc68a":"code","fc6f0ca1":"code","655ff833":"code","3aaff7f1":"code","a037c1a9":"code","5e275e6e":"code","a069cb0e":"code","c0acb207":"code","6e3b2bae":"code","4c4e4cf3":"code","940547c3":"code","98296b82":"code","203a79a0":"code","f72667f7":"code","630fb942":"code","de239735":"code","c962135f":"code","3daa3ccd":"code","ce3dfe0a":"code","77e8f895":"code","a9fd1c7e":"code","6540fa3b":"code","f85d42fb":"code","efaa8ca4":"code","fff27a14":"code","9220d9d3":"code","83e5f10c":"code","c31e3756":"code","653f058f":"code","bc0547c6":"code","a0f84a40":"code","b7da43c5":"code","e7bef649":"code","6f22ec9a":"code","dd2fec14":"code","edbb6651":"code","ace6990d":"code","94f4fa6e":"code","47bc6126":"code","71365a3a":"code","1905b1d3":"code","e57a64cc":"code","662e46e8":"code","1b0cadf5":"code","7d9f48ed":"code","5f074163":"code","6edbf225":"code","01e8f3b1":"code","95d55bfc":"code","d0a077ba":"code","e1e92ef8":"code","24b1a8d8":"code","ba629d73":"code","c75fa263":"code","c9a9fe9b":"code","f34ddf05":"code","c42f2fcf":"code","9dda160d":"code","4f6dc4cb":"code","e6f37a6d":"code","dd125807":"code","906e4f90":"code","a4fef875":"code","0f5ee643":"code","8750bbbe":"code","7e562eec":"code","66292cd7":"code","b3e0ab88":"code","b04d1269":"code","6afec21a":"code","7e983328":"code","a12b46ed":"code","7e28ead2":"code","eb5c25c8":"code","77f24c69":"code","4a49db13":"code","7e457f67":"code","c9321b9e":"code","f5104b6d":"code","75d78770":"code","d577a273":"code","b9025610":"code","ddafd0d4":"code","31b3352a":"code","fe08fad5":"code","a591076e":"code","4ad90bdd":"code","739557dc":"code","f287aeeb":"code","e53972bf":"code","c0d60aee":"code","f9a417c5":"code","adcb6abb":"code","43951728":"code","86585da8":"code","5a428922":"code","e6414258":"code","20bf9d64":"code","4855576b":"code","ccd2f0f7":"code","a3a4a222":"code","79f3099d":"code","e117602b":"code","7da9a3f0":"code","89a8fdec":"code","bc500cde":"code","5b57a07a":"code","fc4e8b83":"code","d71d9fbd":"code","3f6ca2a8":"code","f0427d03":"code","26f701c7":"code","3aa3a0b3":"code","6861c50d":"code","6ef515a0":"code","e823c8b8":"code","be60a9ed":"code","a0155184":"code","959a9c67":"code","136ec20d":"code","66b42175":"code","bba05aff":"code","c877397f":"code","4bf7ca71":"code","bceb33cb":"code","cef05191":"code","46580188":"code","8f622bb5":"code","3147906e":"code","22485b5a":"code","997b3e54":"markdown","d09b0bee":"markdown","56780c3d":"markdown","197378f8":"markdown","5c963543":"markdown","3c8d55e5":"markdown","dad489c6":"markdown","410b3cd8":"markdown","be859b10":"markdown","1a10e7c8":"markdown","770c2ab0":"markdown","c424551e":"markdown","c69f46e3":"markdown","15cf2723":"markdown","3998c147":"markdown","fcd7634c":"markdown","cfa29759":"markdown","cea1c95b":"markdown","94ad29b8":"markdown","ee8150b0":"markdown","15dfacc2":"markdown","bc495137":"markdown","353098be":"markdown","0dea533b":"markdown","19786401":"markdown","9428fb1e":"markdown","f186566e":"markdown","481708ae":"markdown","188d52ce":"markdown","18477637":"markdown","dacdf5e8":"markdown","32a09c8c":"markdown","e1622caa":"markdown","5cb77186":"markdown","44d85543":"markdown","ed3a8d13":"markdown","364c8a53":"markdown","29e0f56f":"markdown","e2905fb8":"markdown","6671a58b":"markdown","ff8325af":"markdown","c0dd0780":"markdown","6d639444":"markdown","b550290a":"markdown","82ce6e44":"markdown","80268c79":"markdown","b37688df":"markdown","632097f8":"markdown","5534fa8f":"markdown","f9a8c387":"markdown","3950a4a2":"markdown","e9fa0e0a":"markdown","fe45d205":"markdown","b737b54a":"markdown","b605ca60":"markdown","26ebb0ed":"markdown","259c2b9d":"markdown","339d927f":"markdown","0b3fbe85":"markdown","66736716":"markdown","c75159c6":"markdown","a97fab30":"markdown","4a26e176":"markdown","18da0154":"markdown","4e854a2f":"markdown","e196f6d0":"markdown","3ac67a17":"markdown","e435829b":"markdown","2ec74901":"markdown","8ac0a152":"markdown","dace1589":"markdown","e3ed90c9":"markdown","7f38f161":"markdown","db580803":"markdown","56c21b1c":"markdown","80844bdb":"markdown","51693fb6":"markdown"},"source":{"ea740bdb":"# Suppress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","3c20b38f":"# Importing required libraries for now\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')","4b7ea5c0":"# Import BoomBikes dataset\ndf = pd.read_csv('..\/input\/bike-sharing-system\/day.csv')","ce634ad4":"# Checking the shape of the dataset\ndf.shape","38af8d18":"# Checking the column names\ndf.columns","90d83a5f":"# Checking the info about dataset\ndf.info()","65c6fbf5":"# Checking the summary statistics of numeric variables\ndf.describe()","e96d3239":"df.drop('instant',axis=1,inplace=True)","fca08ce0":"df.drop('dteday',axis=1,inplace=True)","ffecf9b2":"df.season.value_counts()","b3496382":"def fn_season(col):\n    if col == 1:\n        return 'spring'\n    elif col == 2:\n        return 'summer'\n    elif col == 3:\n        return 'fall'\n    elif col == 4:\n        return 'winter'","5fffc68a":"df.season.apply(fn_season).value_counts()","fc6f0ca1":"df.season = df.season.apply(fn_season)","655ff833":"# Check season column value\ndf.head()","3aaff7f1":"df.yr.value_counts()","a037c1a9":"def fn_yr(col):\n    if col == 0:\n        return '2018'\n    elif col == 1:\n        return '2019'","5e275e6e":"df.yr.apply(fn_yr).value_counts()","a069cb0e":"df.yr = df.yr.apply(fn_yr)","c0acb207":"# Check season column value\ndf.head()","6e3b2bae":"df.mnth.value_counts()","4c4e4cf3":"month_map = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nmonth_map","940547c3":"df.mnth.map(month_map).value_counts()","98296b82":"df.mnth = df.mnth.map(month_map)","203a79a0":"# Check season column value\ndf.head()","f72667f7":"df.holiday.value_counts()","630fb942":"def fn_holiday(col):\n    if col == 0:\n        return 'no'\n    elif col == 1:\n        return 'yes'","de239735":"df.holiday.apply(fn_holiday).value_counts()","c962135f":"df.holiday = df.holiday.apply(fn_holiday)","3daa3ccd":"# Check season column value\ndf.head()","ce3dfe0a":"df.weekday.value_counts()","77e8f895":"week_map = {0:'Sun',1:'Mon',2:'Tue',3:'Wed',4:'Thu',5:'Fri',6:'Sat'}\nweek_map","a9fd1c7e":"df.weekday.map(week_map).value_counts()","6540fa3b":"df.weekday = df.weekday.map(week_map)","f85d42fb":"# Check season column value\ndf.head()","efaa8ca4":"df.workingday.value_counts()","fff27a14":"def fn_workingday(col):\n    if col == 0:\n        return 'no'\n    elif col == 1:\n        return 'yes'","9220d9d3":"df.workingday.apply(fn_workingday).value_counts()","83e5f10c":"df.workingday = df.workingday.apply(fn_workingday)","c31e3756":"# Check season column value\ndf.head()","653f058f":"df.weathersit.value_counts()","bc0547c6":"def fn_weathersit(col):\n    if col == 1:\n        return 'Clear'\n    elif col == 2:\n        return 'Mist'\n    elif col == 3:\n        return 'LightSnow'\n    elif col == 4:\n        return 'HeavyRain'","a0f84a40":"df.weathersit.apply(fn_weathersit).value_counts()","b7da43c5":"df.weathersit = df.weathersit.apply(fn_weathersit)","e7bef649":"# Check season column value\ndf.head()","6f22ec9a":"df.select_dtypes(include=['int','float']).columns","dd2fec14":"plt.figure(figsize=[10,6])\nsns.distplot(df.temp)\nplt.title(\"Distribution of temperature\")\nplt.show()","edbb6651":"plt.figure(figsize=[10,6])\nsns.distplot(df.atemp)\nplt.title(\"Distribution of Feeling temperature\")\nplt.show()","ace6990d":"plt.figure(figsize=[10,6])\nsns.distplot(df.hum)\nplt.title(\"Distribution of Humidity\")\nplt.show()","94f4fa6e":"plt.figure(figsize=[10,6])\nsns.distplot(df.windspeed)\nplt.title(\"Distribution of Windspeed\")\nplt.show()","47bc6126":"plt.figure(figsize=[10,6])\nsns.distplot(df.casual)\nplt.title(\"Distribution of Casual users of bike\")\nplt.show()","71365a3a":"plt.figure(figsize=[10,6])\nsns.distplot(df.registered)\nplt.title(\"Distribution of registered users of bike\")\nplt.show()","1905b1d3":"plt.figure(figsize=[10,6])\nsns.distplot(df.cnt)\nplt.title(\"Distribution of total rented bikes\")\nplt.show()","e57a64cc":"# Find all the categorical columns in the dataset\ndf_categorical = df.select_dtypes(exclude=['float64','int64'])\ndf_categorical.columns","662e46e8":"# Total number of categorical columns\nlen(df_categorical.columns)","1b0cadf5":"plt.figure(figsize=(20,20))\nplt.subplot(3,3,1)\nsns.countplot(df.season)\nplt.subplot(3,3,2)\nsns.countplot(df.yr)\nplt.subplot(3,3,3)\nsns.countplot(df.mnth)\nplt.subplot(3,3,4)\nsns.countplot(df.holiday)\nplt.subplot(3,3,5)\nsns.countplot(df.weekday)\nplt.subplot(3,3,6)\nsns.countplot(df.workingday)\nplt.subplot(3,3,7)\nsns.countplot(df.weathersit)\nplt.show()","7d9f48ed":"plt.figure(figsize=(20,10))\nplt.subplot(3,3,1)\nsns.boxplot(x='season', y='cnt', data=df)\nplt.subplot(3,3,2)\nsns.boxplot(x='yr', y='cnt', data=df)\nplt.subplot(3,3,3)\nsns.boxplot(x='mnth', y='cnt', data=df)\nplt.subplot(3,3,4)\nsns.boxplot(x='holiday', y='cnt', data=df)\nplt.subplot(3,3,5)\nsns.boxplot(x='weekday', y='cnt', data=df)\nplt.subplot(3,3,6)\nsns.boxplot(x='workingday', y='cnt', data=df)\nplt.subplot(3,3,7)\nsns.boxplot(x='weathersit', y='cnt', data=df)\nplt.show()","5f074163":"numerical_col = df.describe().columns","6edbf225":"df[numerical_col].head()","01e8f3b1":"# Check datatype of numerical columns\ndf[numerical_col].info()","95d55bfc":"sns.pairplot(df[numerical_col])","d0a077ba":"cor = df[numerical_col].corr()\ncor","e1e92ef8":"plt.figure(figsize=[10,6])\nsns.heatmap(cor, cmap='RdYlGn', annot=True)\nplt.show()","24b1a8d8":"mask = np.array(cor)\nmask","ba629d73":"# Plotting heatmap with masked data\nplt.figure(figsize=[10,6])\nmask[np.tril_indices_from(mask)] = False\nsns.heatmap(cor, cmap='RdYlGn', annot=True, square=True, mask=mask)\nplt.show()","c75fa263":"df.drop(['temp','casual','registered'],axis=1,inplace=True)","c9a9fe9b":"# Checking the dataframe after dropping multi-collinear columns\ndf.head()","f34ddf05":"# Getting list of categorical columns\ndf_categorical = df.select_dtypes(include='object')","c42f2fcf":"df_categorical.columns","9dda160d":"# OHE on categorical columns\ndf_dummies = pd.get_dummies(df_categorical,drop_first=True)","4f6dc4cb":"df_dummies.head()","e6f37a6d":"df.drop(list(df_categorical.columns),axis=1,inplace=True)","dd125807":"df.head()","906e4f90":"df = pd.concat([df,df_dummies],axis=1)","a4fef875":"df.head()","0f5ee643":"df.shape","8750bbbe":"X = df.drop('cnt',axis=1)\ny = df.cnt","7e562eec":"X.head()","66292cd7":"y.head()","b3e0ab88":"# Import sklearn library for train_test_split\nfrom sklearn.model_selection import train_test_split","b04d1269":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)","6afec21a":"print(X_train.shape)\nprint(X_test.shape)","7e983328":"print(y_train.shape)\nprint(y_test.shape)","a12b46ed":"# Getting the list of numerical features from X_train\nnum_feat = list(X_train.describe().columns)\nprint(num_feat)\nprint(len(num_feat))","7e28ead2":"# Import sklearn library for StandardScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# Instantiate an object of StandardScaler\nsc = StandardScaler()\n\n# Perform fit and transform on the X_train dataset\nX_train[num_feat] = sc.fit_transform(X_train[num_feat])\n\n# Perform only transform on the X_test dataset\nX_test[num_feat] = sc.transform(X_test[num_feat])","eb5c25c8":"X_train.info()","77f24c69":"X_train.head()","4a49db13":"# From sklearn library import LinearRegression\nfrom sklearn.linear_model import LinearRegression","7e457f67":"# Base model\nregressor = LinearRegression()\nregressor.fit(X_train,y_train)","c9321b9e":"# Checking Coefficients for all features\ncoeff = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficients'])\ncoeff","f5104b6d":"# Checking the Intercept\nprint(regressor.intercept_)","75d78770":"# Making predictions on X_test using the model\ny_pred = regressor.predict(X_test)","d577a273":"# Showing the actual and predicted values side-by-side\ndf_result = pd.DataFrame( {'Actual': y_test,'Predicted':y_pred} )\n\ndf_result","b9025610":"# From sklearn library import r2_score (To get r-squared value)\nfrom sklearn.metrics import r2_score","ddafd0d4":"r2_score(y_test,y_pred)","31b3352a":"# From sklearn library importing RFE\nfrom sklearn.feature_selection import RFE","fe08fad5":"len(X_train.columns)","a591076e":"# Out of 28 features, we will choose 20 features to start with initially","4ad90bdd":"# Instantiating a LinearRegression object\nlm = LinearRegression()\nlm.fit(X_train,y_train)\n\n# RFE\nrfe = RFE(lm,20)\n# Running RFE\nrfe = rfe.fit(X_train,y_train)","739557dc":"# Checking list of selections and ranking of each variable by RFE\nlist(zip(X_train.columns, rfe.support_, rfe.ranking_))","f287aeeb":"# Looking at only the 20 variables selected by RFE\ncol = X_train.columns[rfe.support_]\ncol","e53972bf":"# Looking at the variables  which were NOT selected by RFE\nX_train.columns[~rfe.support_]","c0d60aee":"# Creating a dataframe \"X_train_rfe\" with variables selected by RFE\nX_train_rfe = X_train[col]","f9a417c5":"X_train_rfe.shape","adcb6abb":"# Importing required statsmodels library\nimport statsmodels.api as sm\n# From statsmodels importing variance_inflation_factor\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","43951728":"# Functions to build model using statsmodels and check VIF\ndef build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","86585da8":"X_train_new = build_model(X_train_rfe,y_train)","5a428922":"X_train_rfe = X_train_rfe.drop('weekday_Sun',axis=1)","e6414258":"X_train_new = build_model(X_train_rfe,y_train)","20bf9d64":"X_train_rfe = X_train_rfe.drop('weekday_Sat',axis=1)","4855576b":"X_train_new = build_model(X_train_rfe,y_train)","ccd2f0f7":"X_train_rfe = X_train_rfe.drop('weekday_Mon',axis=1)","a3a4a222":"X_train_new = build_model(X_train_rfe,y_train)","79f3099d":"checkVIF(X_train_new)","e117602b":"names = X_train_rfe.columns\nnames","7da9a3f0":"for i in range(0, len(names)):\n    y = X_train_rfe.loc[:, X_train_rfe.columns == names[i]]\n    x = X_train_rfe.loc[:, X_train_rfe.columns != names[i]]\n    model = sm.OLS(y, x)\n    results = model.fit()\n    rsq = results.rsquared\n    vif = round(1 \/ (1 - rsq), 2)\n    print(\n        \"R Square value of {} column is {} keeping all other columns as features\".format(\n            names[i], (round(rsq, 2))\n        )\n    )\n    print(\n        \"Variance Inflation Factor of {} column is {} \\n\".format(\n            names[i], vif)\n        )","89a8fdec":"# 1. Add a constant\nX_train_lm = sm.add_constant(X_train_rfe)\n\n# 2. Create model\nlr = sm.OLS(y_train,X_train_lm)\n\n# 3. Fit the model\nlm = lr.fit()\n\n# 4. View the parameters\nlm.params","bc500cde":"lm.summary()","5b57a07a":"y_train_pred = lm.predict(X_train_lm)","fc4e8b83":"y_train_pred.shape","d71d9fbd":"res = y_train - y_train_pred","3f6ca2a8":"fig = plt.figure()\nsns.distplot(res,bins=20)\nfig.suptitle('Error Terms',fontsize=20)\nplt.xlabel('Errors',fontsize=15)\nplt.show()","f0427d03":"# Checking the test and latest train dataset to understand the columns which have to be dropped\nprint(X_test.shape)\nprint(X_train_rfe.shape)","26f701c7":"X_train_rfe.columns","3aa3a0b3":"# We will create a new dataframe \"X_test_new\" by removing the columns dropped by the train data set\nX_test_new = X_test[names]","6861c50d":"print(X_test_new.shape)","6ef515a0":"X_test_new.head()","e823c8b8":"# Add a constant\nX_test_new = sm.add_constant(X_test_new)","be60a9ed":"# Making Predictions based on test data\ny_test_pred = lm.predict(X_test_new)","a0155184":"y_test_pred.head()","959a9c67":"# Evaluating the model on the test\nr2 = r2_score(y_true=y_test,y_pred=y_test_pred)\nr2","136ec20d":"n = X_test_new.shape[0]\np = len(names)\n\nprint(n,p)","66b42175":"# Calculating Adjusted R-squared on the test data\n# Formula: (1-R2)*(n-1)\/(n-p-1)\n# n -> Sample size = 146\n# p -> number of predictor variables = 1\nAdj_r2 = 1-((1 - r2)*(n - 1))\/(n - p -1)\nprint(Adj_r2)","bba05aff":"# Evaluating the model on the train\nr2 = r2_score(y_true=y_train,y_pred=y_train_pred)\nr2","c877397f":"n = X_train_rfe.shape[0]\np = len(names)\n\nprint(n,p)","4bf7ca71":"# Calculating Adjusted R-squared on the train data\n# Formula: (1-R2)*(n-1)\/(n-p-1)\n# n -> Sample size = 584\n# p -> number of predictor variables = 17\nAdj_r2 = 1-((1 - r2)*(n - 1))\/(n - p -1)\nprint(Adj_r2)","bceb33cb":"# Plotting graph b\/w actual and predicted values with train data\n\nfig = plt.figure()\n# sns.scatterplot(y_test,y_test_pred)\nsns.regplot(x=y_train,y=y_train_pred, scatter_kws = {\"color\": 'blue',\"s\": 20}, line_kws = {\"color\": 'green', \"lw\": 3}, marker='*')\nfig.suptitle('y_train vs y_train_pred', fontsize = 20)              \nplt.xlabel('y_train', fontsize = 18)                          \nplt.ylabel('y_train_pred', fontsize = 16)\nplt.show()","cef05191":"# Plotting graph b\/w actual and predicted values with test data\n\nfig = plt.figure()\n# sns.scatterplot(y_test,y_test_pred)\nsns.regplot(x=y_test,y=y_test_pred, scatter_kws = {\"color\": 'blue',\"s\": 50}, line_kws = {\"color\": 'green', \"lw\": 3}, marker='+')\nfig.suptitle('y_test vs y_test_pred', fontsize = 20)              \nplt.xlabel('y_test', fontsize = 18)                          \nplt.ylabel('y_test_pred', fontsize = 16)\nplt.show()","46580188":"# from sklearn import mean_squared_error\nfrom sklearn.metrics import mean_squared_error","8f622bb5":"rmse = mean_squared_error(y_test, y_test_pred,squared=False)\nrmse","3147906e":"from sklearn.metrics import mean_squared_log_error\nrmsle = np.sqrt(mean_squared_log_error( y_test, y_test_pred ))\nrmsle","22485b5a":"lm.params","997b3e54":"### Countplot\n- 'season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday','weathersit'","d09b0bee":"### Drop the original categorical columns from the dataframe","56780c3d":"**Observations**\n- Most of the bike rentals have been on weekdays and workingdays\n- Most bike rentals have been on `Clear` weather","197378f8":"### mnth","5c963543":"**Observations**\n- We can see that most bike rentals in the Windspeed range ~8 to ~13","3c8d55e5":"### Merge `df` and `df_dummies` dataframe","dad489c6":"#### weekday_Sat (p-value = 0.613) and building third model","410b3cd8":"## Heatmap to check correlation","be859b10":"### temp","1a10e7c8":"# First Model","770c2ab0":"### 'temp','casual','registered'","c424551e":"### Drop the columns which have high VIF (VIF > 10)","c69f46e3":"### hum","15cf2723":"**Observations**\n- We can see that most bike rentals are in the range between ~4000 to ~5000","3998c147":"**Observations**\n- Initial model has a good R2 score of 87.13%\n- However there could be many columns which are either\n    - multi-collinear\n    - have high p-value\n    - have high VIF\n- To find the right model, we will have to only use those features which don't have any of the above and influence the model independently\n- For this, we will use RFE (Recursive feature elimination) approach","fcd7634c":"**Observations**\n- We can see that there is increase in bike rentals from temperatures (10 - 15) and (~25 - 30)\n- There is a dip in bike rentals from temperatures (~15 - ~25)","cfa29759":"# Building base model","cea1c95b":"# Bivariate analysis","94ad29b8":"### registered","ee8150b0":"### Drop the columns which have p-value > 0.05 and building second model","15dfacc2":"### workingday","bc495137":"**Observations**\n- We can see that most registered users of bike rentals range between ~3500 to ~4000","353098be":"**Note**\n- As explicit mapping for weekday is not provided, I am considering `0` as Sunday upto `6` as Saturday in that order","0dea533b":"**Observations**\n- Most of the median bike rentals were on `fall` and `summer`\n- Median bike rentals are around 6000 in `2019` compared to ~4000 in `2018`. The count of rentals have also increased in `2019`\n- Median bike rentals has increased in `Clear` weather\n- Median bike rentals count have increased in May,June,Jul,Aug,Sep and Oct","19786401":"**Calculate Root Mean Squared Logarithmic Error**","9428fb1e":"### weekday","f186566e":"# Model Summary","481708ae":"## Pairplot to check pair-wise relationships","188d52ce":"# Univariate Analysis","18477637":"## Applying Standard Scaling on the numerical features","dacdf5e8":"**Remarks**\n- R2 on test set is 86.8% and on the training set is 83.4%\n- Adjusted R2 on test set is 85.05% and on the training set is 82.87%\n- This means that the model has generalized well on the test set and is our best fit model","32a09c8c":"**Observations**\n- R2 on test set is 86.8% and on the training set is 83.4%\n- Adjusted R2 on test set is 83.65% and on the training set is 82.87%\n- This means that the model has generalized well on the test set","e1622caa":"- season : season (1:spring, 2:summer, 3:fall, 4:winter)\n- yr : year (0: 2018, 1:2019)\n- mnth : month ( 1 to 12)\n- holiday : weather day is a holiday or not (extracted from http:\/\/dchr.dc.gov\/page\/holiday-schedule)\n- weekday : day of the week\n- workingday : if day is neither weekend nor holiday is 1, otherwise is 0.\n+ weathersit : \n    - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n    - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n    - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n    - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog","5cb77186":"### weathersit","44d85543":"\nHence the equation of our best fitted line is:\n\n$ cnt = 4492.518836  \\times  const + 805.193246  \\times  atemp + -259.477283 \\times hum + -220.454617 \\times windspeed + -342.039939 \\times season_spring + 282.452248 \\times season_winter + 978.090487 \\times yr_2019 + -165.377860 \\times mnth_Dec + -111.697569 \\times mnth_Feb + -156.237538 \\times mnth_Jan + -139.770478 \\times mnth_Jul + 80.987907 \\times mnth_May + -184.891752 \\times mnth_Nov + 134.864617 \\times mnth_Sep + -103.977863 \\times holiday_yes + -118.752782 \\times workingday_yes + -253.531620 \\times weathersit_LightSnow + -198.151595 \\times weathersit_Mist $","ed3a8d13":"### cnt","364c8a53":"### instant\n\nThis is an index column and not required","29e0f56f":"## Numerical columns","e2905fb8":"# Data Preparation","6671a58b":"### atemp","ff8325af":"**Below are the list of significant variables in predicting the demand for shared bikes along with their coefficients**","c0dd0780":"# Dropping unnecessary columns","6d639444":"## Handling categorical columns","b550290a":"### Distplot\n- 'season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday','weathersit'","82ce6e44":"**Observations**\n- There are no nullable columns in the dataset","80268c79":"\nBelow are the list of categorical columns that we need to convert to numeric. There are two steps\n- Convert categorical to numeric columns\n- Do OHE (One Hot Encoding) to handle these columns","b37688df":"**Calculate Root Mean Square Error**","632097f8":"**Observations**\n- We can see that most casual users of bike rentals are less than 1000","5534fa8f":"### yr","f9a8c387":"## Split data into `train` and `test` sets","3950a4a2":"To analyze the data better, we will mask the bottom\/top triangle of the heatmap as it is redundant\n- To hide top part, use mask[np.tril_indices_from(mask)] = False\n- To hide bottom part, use mask[np.triu_indices_from(mask)] = False","e9fa0e0a":"**Best practices**\n- Scaling order:\n    1. StandardScaler (Converts to Normal Distribution)\n    2. MinMaxScaler (Converts values from 0 to 1)\n    3. RobustScaling","fe45d205":"### season","b737b54a":"**Observations**\n- There is a positive linear correlation between `temp` and `atemp`. We should look at dropping one of these columns later on\n- There is a positive linear correlation between `cnt` and `registered`. We should look at dropping `registered` later on","b605ca60":"# Final Model","26ebb0ed":"### holiday","259c2b9d":"## Importing and Understanding Data","339d927f":"**Observations**\n- We can see that there is increase in demand for bike rentals in the humidity range ~50 to ~70","0b3fbe85":"## Divide data into `X` and `y` for building the model","66736716":"# Bike Sharing Assignment","c75159c6":"## Residual analysis of the train data","a97fab30":"## Data check","4a26e176":"### casual","18da0154":"**Note**\n\nAll the columns have VIF < 10. So, we will not drop any of them and proceed further","4e854a2f":"#### weekday_Mon (p-value = 0.114) and building fourth model","e196f6d0":"## Building using statsmodels for the detailed statistics","3ac67a17":"### dteday\n\nWe already have year and month columns. So we can remove this","e435829b":"**Columns to be removed**\nAs a general rule, to avoid Multi-Collinearity, we will remove the columns which have correlation between -0.7 to +0.7. Looking at the heatmap above, the following columns will be removed\n1. `temp`\n2. `casual` (though correlation is 0.67, it's ~0.7 and we will remove this column)\n3. `registered`","2ec74901":"## Categorical columns","8ac0a152":"**Observations**\n- There is a positive correlation between `temp` and `atemp`. We should look at dropping one of these columns later on\n- There is a positive correlation between `cnt` and `registered`. We should look at dropping `registered` later on\n- There is a positive correlation between `cnt` and `casual`. We should look at dropping `casual` later on\n- There is a negative correlation between `temp`,`atemp`,`hum` and `windspeed`\n- There is a slight negative correlation between `hum` and `casual`,`registered` and `cnt`. This means that if the humidity increases, it reduces bike rentals\n- There is a negative correlation between `windspeed` and `casual`,`registered` and `cnt`. This means that if the windspeed increases, it reduces bike rentals","dace1589":"## Building first model using RFE","e3ed90c9":"#### weekday_Sun (p-value = 0.462)","7f38f161":"# Model Evaluation","db580803":"# Dropping multi-collinear columns","56c21b1c":"**Observations**\n- We can see that there is increase in bike rentals from feeling temperature (~25 - 32)","80844bdb":"### windspeed","51693fb6":"## Create OHE (One Hot Encoding) on categorical columns"}}