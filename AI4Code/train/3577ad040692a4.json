{"cell_type":{"2907d8cd":"code","62492e1b":"code","2f4d5205":"code","73927ed0":"code","c60763c9":"code","53b30d95":"code","e77180e8":"code","539ceb71":"code","3c9c3269":"code","18aa45d2":"code","cc6e53d2":"code","2b427471":"code","8369c335":"code","d6f9a3de":"code","22dc61c0":"code","83ebac09":"code","e9bd05bb":"code","29ffe360":"code","ffe79150":"code","321e40ab":"code","4c1da839":"code","ecbb198c":"code","c83f372c":"code","a41de137":"markdown","acfde127":"markdown","17e01bc5":"markdown","bb87b008":"markdown","394631a6":"markdown","8c4ce0a4":"markdown","bcf5c6e5":"markdown","43ae7eb1":"markdown","6cdf4f62":"markdown","e2921eed":"markdown","89e7772a":"markdown","062cca8d":"markdown","5d083b76":"markdown"},"source":{"2907d8cd":"import re\nimport string\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential, Model\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, GlobalAveragePooling2D\nfrom tensorflow.keras.layers import Dense, Flatten, BatchNormalization, Activation, Dropout\nfrom tensorflow.keras.layers import Conv1D, Embedding, GlobalAveragePooling1D \nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.preprocessing import image\n\nfrom PIL import ImageFile, ImageOps\nImageFile.LOAD_TRUNCATED_IMAGES = True","62492e1b":"df = pd.read_csv('..\/input\/memotion-dataset-7k\/memotion_dataset_7k\/labels.csv')\ndf.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\ndf = df.drop(columns = ['text_ocr'])\ndf.head()","2f4d5205":"df = df.replace({'humour': {'not_funny': 0, 'funny': 1, 'very_funny': 2, 'hilarious':3},\n            'sarcasm': {'not_sarcastic': 0, 'general': 1, 'twisted_meaning': 2, 'very_twisted': 3},\n            'offensive': {'not_offensive': 0, 'slight': 1, 'very_offensive': 2, 'hateful_offensive': 3},\n            'motivational': {'not_motivational': 0, 'motivational': 1},\n            'overall_sentiment': {'very_negative': 0, 'negative': 1, 'neutral': 2, 'positive': 3, 'very_positive': 4}})","73927ed0":"cleaned = df.copy()\ncleaned.dropna(inplace=True)\ncleaned.isnull().any()","c60763c9":"width = 100\nheight = 100\nX = []\nfor i in tqdm(range(cleaned.shape[0])):\n    if i in [119, 4799, 6781, 6784, 6786]:\n        pass\n    else:\n        path = '..\/input\/memotion-dataset-7k\/memotion_dataset_7k\/images\/'+cleaned['image_name'][i]\n        img = image.load_img(path,target_size=(width,height,3))\n        img = image.img_to_array(img)\n        img = img\/255.0\n        X.append(img)\n        \nX = np.array(X)","53b30d95":"X.shape","e77180e8":"rows_to_drop = ['image_120.jpg',\n              'image_4800.jpg',\n              'image_6782.jpg',\n              'image_6785.jpg',\n              'image_6787.jpg',\n              'image_6988.jpg',\n              'image_6989.jpg',\n              'image_6990.png',\n              'image_6991.jpg',\n              'image_6992.jpg']","539ceb71":"for images in rows_to_drop:\n    cleaned.drop(cleaned[cleaned['image_name'] == images].index, inplace=True)","3c9c3269":"Y = cleaned.iloc[:,2:]\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2)","18aa45d2":"Y = cleaned.iloc[:,2:]","cc6e53d2":"y_train","2b427471":"data_augmentation = tf.keras.Sequential([\n  tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal'),\n  tf.keras.layers.experimental.preprocessing.RandomRotation(0.2),\n])\n\npreprocess_input = tf.keras.applications.resnet_v2.preprocess_input\n\nrescale = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/127.5, offset= -1)","8369c335":"base_model_1 = tf.keras.applications.ResNet50(input_shape=X[0].shape,\n                                               include_top=False,\n                                               weights='imagenet')\nbase_model_2 = tf.keras.applications.VGG16(input_shape=X[0].shape,\n                                               include_top=False,\n                                               weights='imagenet')","d6f9a3de":"base_model_1.trainable = False\nbase_model_2.trainable = False","22dc61c0":"image_input = tf.keras.Input(shape=(100, 100, 3), name = 'image_input')\nimage_layers = data_augmentation(image_input)\nimage_layers = preprocess_input(image_layers)\nlayer_bm_1 = base_model_1(image_input, training=False)\nlayer_bm_1 = Conv2D(2048, kernel_size=2,padding='valid')(layer_bm_1)\nlayer_bm_1 = Dense(512)(layer_bm_1)\nlayer_bm_2 = base_model_2(image_input, training=False)\nlayer_bm_2 = Dense(512)(layer_bm_2)\nlayers = tf.keras.layers.concatenate([layer_bm_1, layer_bm_2])\nimage_layers = GlobalAveragePooling2D()(layers)\nimage_layers = Dropout(0.2, name = 'dropout_layer')(image_layers)","83ebac09":"def standardization(data):\n    data = data.apply(lambda x: x.lower())\n    data = data.apply(lambda x: re.sub(r'\\d+', '', x))\n    data = data.apply(lambda x: re.sub(r'.com', '', x, flags=re.MULTILINE))\n    data = data.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\n    return data\n\ncleaned['text_corrected'] = standardization(cleaned.text_corrected)","e9bd05bb":"from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\nvocab_size = 100000\nsequence_length = 50\n\nvectorize_layer = TextVectorization(\n    max_tokens=vocab_size,\n    output_mode='int',\n    output_sequence_length=sequence_length)\n\ntext_ds = np.asarray(cleaned['text_corrected'])\nvectorize_layer.adapt(tf.convert_to_tensor(text_ds))","29ffe360":"X_text_train, X_text_test, y_text_train, y_text_test = train_test_split(cleaned.text_corrected, Y, test_size = 0.2)","ffe79150":"embedding_dim=32\n\ntext_input = tf.keras.Input(shape=(None,), dtype=tf.string, name='text')\ntext_layers = vectorize_layer(text_input)\ntext_layers = tf.keras.layers.Embedding(vocab_size, embedding_dim, name=\"embedding\")(text_layers)\ntext_layers = tf.keras.layers.Dropout(0.5)(text_layers)\n\ntext_layers = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256, activation='relu', return_sequences=True))(text_layers)\ntext_layers = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256, activation='relu', return_sequences=True))(text_layers)\n\ntext_layers = tf.keras.layers.Conv1D(128, 7, padding=\"valid\", activation=\"relu\", strides=3)(text_layers)\ntext_layers = tf.keras.layers.Conv1D(128, 7, padding=\"valid\", activation=\"relu\", strides=3)(text_layers)\ntext_layers = tf.keras.layers.GlobalMaxPooling1D()(text_layers)\n\ntext_layers = tf.keras.layers.Dense(2048, activation=\"relu\")(text_layers)\ntext_layers = tf.keras.layers.Dropout(0.5)(text_layers)","321e40ab":"concatenate = tf.keras.layers.concatenate([image_layers, text_layers], axis=1)\nsemi_final_layer = tf.keras.layers.Dense(2048, activation='softmax')(concatenate)\n\nprediction_layer_1 = tf.keras.layers.Dense(4, activation='softmax', name = 'sarcasm')\nprediction_layer_2 = tf.keras.layers.Dense(4, activation='softmax', name = 'humuor')\nprediction_layer_3 = tf.keras.layers.Dense(4, activation='softmax', name = 'offensive')\nprediction_layer_4 = tf.keras.layers.Dense(1, activation='sigmoid', name = 'motivational')\nprediction_layer_5 = tf.keras.layers.Dense(5, activation='softmax', name = 'overall')\n\noutput_1 = prediction_layer_1(semi_final_layer)\noutput_2 = prediction_layer_2(semi_final_layer)\noutput_3 = prediction_layer_3(semi_final_layer)\noutput_4 = prediction_layer_4(semi_final_layer)\noutput_5 = prediction_layer_5(semi_final_layer)\n\nmodel = tf.keras.Model(inputs = [image_input, text_input] , \n                       outputs = [output_1, output_2, output_3, output_4, output_5])","4c1da839":"base_learning_rate = 0.001\nlosses = {\n      \"humuor\": tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), \n      \"sarcasm\": tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), \n      \"offensive\": tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), \n      \"motivational\": tf.keras.losses.BinaryCrossentropy(from_logits=False),\n      \"overall\": tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n}\nlossWeights = {\n      \"humuor\": 1.0, \n      \"sarcasm\": 1.0, \n      \"offensive\": 1.0, \n      \"motivational\": 1.0,\n      \"overall\": 1.0\n}\nmetric = {\n    \"humuor\": ['sparse_categorical_accuracy'],\n    \"sarcasm\": ['sparse_categorical_accuracy'],\n    \"offensive\": ['sparse_categorical_accuracy'],\n    \"motivational\": ['binary_accuracy'],\n    \"overall\": ['sparse_categorical_accuracy']\n}\n\nmodel.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),\n              loss = losses,\n              loss_weights= lossWeights,\n              metrics=metric)","ecbb198c":"history = model.fit(x = {\"image_input\": X_train, \"text_input\": X_text_train},\n                    y = {\"sarcasm\": y_train.sarcasm, \n                         \"humuor\": y_train.humour, \n                         \"offensive\": y_train.offensive, \n                         \"motivational\": y_train.motivational, \n                         \"overall\": y_train.overall_sentiment},\n                    batch_size=32,\n                    epochs=1,\n                    verbose=1\n                   )","c83f372c":"history = model.evaluate(x = {\"image_input\": X_test, \"text_input\": X_text_test},\n                    y = {\"sarcasm\": y_test.sarcasm, \n                         \"humuor\": y_test.humour, \n                         \"offensive\": y_test.offensive, \n                         \"motivational\": y_test.motivational, \n                         \"overall\": y_test.overall_sentiment},\n                    batch_size=32,\n                    verbose=1\n                   )","a41de137":"# Image Modelling","acfde127":"### Model for Image","17e01bc5":"### Image Preprocessing","bb87b008":"### Vectorizing Layers","394631a6":"### Dropping few rows to make shape consistent","8c4ce0a4":"### Loading Images","bcf5c6e5":"# Combining and Evaluating","43ae7eb1":"### Loaing Necessary Libraries","6cdf4f62":"### Standardization and Cleaning","e2921eed":"### Reading Image Info from CSV and Cleaning","89e7772a":"### Base Model","062cca8d":"### Concatenating Layers","5d083b76":"# Text Modelling"}}