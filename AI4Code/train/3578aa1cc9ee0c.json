{"cell_type":{"0d884e2e":"code","50307284":"code","b52b1ba8":"code","032ee50b":"code","ee917f8a":"code","815ddfe5":"code","e5a74123":"code","0015333c":"code","515f38e4":"code","918afe0c":"code","86bee7db":"code","ecf88d23":"code","d16d82bf":"code","2f7ef8a4":"code","0caaf836":"code","73568bd6":"code","4cab01e1":"code","1dd453c0":"code","b1af02dd":"code","fd790d65":"code","d33977ab":"code","10cf7c0d":"code","b0025c83":"code","0237a0fa":"code","6d453756":"code","15e24cf5":"code","50434e80":"code","28c59d84":"code","e22be6ee":"code","dec35734":"code","0f07e357":"code","9df80e14":"code","fbae3c29":"code","1a357505":"code","208a437d":"code","3e7b77cd":"code","5d43e7de":"code","47a1bb55":"code","89a9c237":"code","5e7c99ce":"code","f6820c33":"code","ad1cd4a8":"code","00d40099":"code","5a637931":"code","8430f513":"code","ae2a5e76":"code","2c30217d":"code","67a4106f":"code","29adaaea":"code","240d7c76":"code","e78e5d96":"code","960ecaf7":"code","35bf3e8f":"code","4cb54bbe":"code","a8ae4748":"code","cd17666d":"code","ada3bce7":"code","6930f4fd":"code","1407e4d8":"code","932aeb44":"code","d8215ce7":"code","91b91259":"code","c3a31b8d":"code","3f6a593c":"code","7dea4b46":"code","0fb27ba8":"code","3874f27a":"code","bac63838":"code","7a973d50":"code","00aceaf1":"code","1d77cb81":"code","20644db1":"code","78b1a333":"code","4a949f5f":"code","dc3586b0":"code","05fccaa5":"code","9c21bfd8":"code","f3d9e0d7":"code","0b678a51":"code","1988bcae":"code","808033f7":"code","73dfd5d1":"code","aea53cc4":"code","4fc3d7b0":"code","0db9c295":"markdown","4e93df62":"markdown","6591e82c":"markdown","5898ec8a":"markdown","db29526a":"markdown","1b9a1a64":"markdown","20368c61":"markdown","16fe52f8":"markdown","89171e69":"markdown","d893262a":"markdown","2dda0669":"markdown","cacbb7a9":"markdown","eb8113d9":"markdown","a490d573":"markdown","4f570ee1":"markdown","67238160":"markdown","055c5b7e":"markdown","dc01842b":"markdown","f8540b25":"markdown","460f27c0":"markdown","d24a457e":"markdown","695c077a":"markdown","f2612c34":"markdown","b64bce94":"markdown","fa65155a":"markdown","4b31c957":"markdown","17a63a52":"markdown","03779f54":"markdown","d8aaeffd":"markdown","fd2f6bcf":"markdown"},"source":{"0d884e2e":"import pandas as pd\nimport numpy as np\nimport warnings\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport plotly.express as px\nimport plotly.offline as py#visualization\nimport cufflinks\nfrom scipy.stats import chi2_contingency\n\npy.init_notebook_mode(connected=True)#visualization\n\n\nwarnings.filterwarnings(action=\"ignore\")","50307284":"Data_Path=\"https:\/\/raw.githubusercontent.com\/bhagatsajan0073\/Community-of-Practice\/master\/Hands%20on%20Session\/Telecom_Churn_Dataset.csv\"\ntelecomData=pd.read_csv(Data_Path)","b52b1ba8":"telecomData.head()","032ee50b":"print(\"No. of Records Present in Data : \",telecomData.shape[0])\nprint(\"No. of Attributes Present in Data : \",telecomData.shape[1])","ee917f8a":"telecomData.columns","815ddfe5":"\"\"\"   Unique Identifier in Data  \"\"\" \nuniqueIdentifier=\"phone number\"\n\n\n\"\"\"   Target Variable \"\"\"\ntargetVariable=\"churn\"\n\n\n\"\"\"   Categorical Varibles \/Qualitative variables\"\"\"\ncategoricalVariables=[\n    \"state\",\"area code\",\"international plan\",'voice mail plan'\n]\n\n\"\"\"   Numerical Variables \/ Quantative Variables\"\"\"\nnumericalVariables =[\n    i for i in telecomData.columns if((i not in [uniqueIdentifier,targetVariable]) & (i not in categoricalVariables))\n]","e5a74123":"print(\"Numerical Variables : {0}\".format(\", \".join(numericalVariables)))","0015333c":"churn_stats=(telecomData[targetVariable].value_counts()*100\/telecomData.shape[0]).reset_index()\nchurn_stats.columns=['Churn Flag','Churn Percentage']\n\nchurn_stats\n\npx.pie(churn_stats,\n  names=\"Churn Flag\", \n  values=\"Churn Percentage\",title=\"Customer Attrition Rate\"\n)","515f38e4":"catgorialDropDown=widgets.Dropdown(\n    options=categoricalVariables,\n    value=categoricalVariables[0],\n    description='Select Attribute :',\n    disabled=False,\n)\n\ncategoricalOutput=widgets.Output()\n\nfor col in categoricalVariables:\n    telecomData[col]=telecomData[col].apply(str)\n\ndef summary_dropdown_eventhandler(change):\n    \n    \"\"\"Event Handler for Cateorical Variable Distribution Analysis\"\"\"\n    \n    categoricalOutput.clear_output()\n    \n    with categoricalOutput:\n        temp_df=telecomData.pivot_table(index=change.new,\n                                columns=[targetVariable],\n                                values=uniqueIdentifier,aggfunc=len)\n        temp_df.columns=['False','True']\n        temp_df['sum']=temp_df.sum(axis=1)\n        temp_df['churn_percentage']=temp_df['True']*100\/temp_df['sum']\n        temp_df.sort_values(\"churn_percentage\",ascending=False,inplace=True)\n        display(temp_df[['churn_percentage']].iplot(asFigure=True,\n            kind=\"bar\",\n            xTitle=change.new,\n            yTitle=\"Churn Percentage\",\n            title=\"Churn Percentage by {0}\".format(change.new.capitalize())\n        ))\n        display(temp_df[temp_df['churn_percentage']>15].index)\n\n        \ncatgorialDropDown.observe(summary_dropdown_eventhandler,names=\"value\")\n\ndisplay(catgorialDropDown)\ndisplay(categoricalOutput)","918afe0c":"df=telecomData.pivot_table(index='area code',\n                   columns=targetVariable,\n                   values=uniqueIdentifier,aggfunc=len)\ndf.columns=['False','True']\nchi, pval, dof, exp = chi2_contingency(df)\n\nprint(\"Orignal Vales (O) : \")\ndf","86bee7db":"print(\"Columns Total :\")\ndf.sum(axis=0) ## columns sum","ecf88d23":"print(\"Row Total\")\ndf.sum(axis=1) ## row sum","d16d82bf":"print(\"Grand Total\")\ndf.sum().sum() ### Grand Total","2f7ef8a4":"contigency_table=[\n    [(838*2850)\/3333,(838*483)\/3333],\n    [(1655*2850)\/3333,(1655*483)\/3333],\n    [(840*2850)\/3333,(840*483)\/3333],\n]\n\nprint(contigency_table)\n\nassert((contigency_table==exp).sum())","0caaf836":"chi_value_calculated=np.divide(np.power(df.to_numpy()-contigency_table,2),exp).sum()","73568bd6":"chi_value_calculated,pval","4cab01e1":"assert(chi_value_calculated==chi)","1dd453c0":"nrow=df.shape[0]\nncol=df.shape[1]\nprint(\"Degree of freedom : \",(nrow-1)*(ncol-1))","b1af02dd":"catgorialDropDown=widgets.Dropdown(\n    options=categoricalVariables,\n    value=categoricalVariables[0],\n    description='Select Attribute :',\n    disabled=False,\n)\n\n# categoricalOutput=widgets.Output()\n\ndef chi2_dropdown_eventhandler(selection):\n    \n    \"\"\"Event Handler for Cateorical Variable Distribution Analysis\"\"\"\n    \n#     categoricalOutput.clear_output()\n    \n#     with categoricalOutput:\n    df=telecomData.pivot_table(index=selection,\n                       columns=targetVariable,\n                       values=uniqueIdentifier,aggfunc=len)\n    df.columns=['False','True']\n    chi, pval, dof, exp = chi2_contingency(df)\n    significance = 0.05\n    \n    print('p-value=%.6f, significance=%.2f\\n' % (pval, significance))\n    if pval < significance:\n        print(\"\"\"At %.2f level of significance, we reject the null hypotheses and accept H1.\\n%s and %s are not independent.\"\"\" % (significance,targetVariable,selection))\n    else:\n        print(\"\"\"At %.2f level of significance, we accept the null hypotheses.\\n%s and %s are independent.\"\"\" % (significance,targetVariable,selection)\n               )\n    print()\n    \n    \n# catgorialDropDown.observe(chi2_dropdown_eventhandler,names=\"value\")\nout = widgets.interactive_output(chi2_dropdown_eventhandler, {'selection': catgorialDropDown})\n\ndisplay(catgorialDropDown)\ndisplay(out)\n\n","fd790d65":"numericalDropDown=widgets.Dropdown(\n    options=numericalVariables,\n    value=numericalVariables[0],\n    description='Select Attribute :',\n    disabled=False,\n)\n\nnumericalOutput=widgets.Output()\n\ndef numerical_dropdown_eventhandler(change):\n    \"\"\"Event Handler for Numerical Variables Distribution Analysis\"\"\"\n    numericalOutput.clear_output()\n    \n    with numericalOutput:\n        \n        figHistSingle=px.histogram(telecomData[telecomData[change.new]>0],\n                   x=change.new)\n        \n        figHist = px.histogram(telecomData[telecomData[change.new]>0],\n                   x=change.new, color=targetVariable)\n       \n        figBoxSingle=px.box(telecomData[telecomData[change.new]>0], \n                        y=change.new,\n                       )\n        \n        figBox = px.box(telecomData[telecomData[change.new]>0], \n                        x=targetVariable, y=change.new,\n                       )\n        \n        \n        figHistSingle.update_layout(height=400, width=600).show()\n        figHist.update_layout(height=400, width=600).show()\n        figBoxSingle.update_layout(height=400, width=600).show()\n        figBox.update_layout(height=400, width=600).show()\n        \n        \nnumericalDropDown.observe(numerical_dropdown_eventhandler,names=\"value\")\n\ndisplay(numericalDropDown)\ndisplay(numericalOutput)","d33977ab":"# figBox = px.box(telecomData, \n#                 y=\"total night calls\")\n# figBox.show()","10cf7c0d":"telecomData[(telecomData['total night calls']>=155)|\n            (telecomData['total night calls']<=46)].shape[0]","b0025c83":"# Custom Correlation Function\ndef correlation(x,y):\n    x_mean=np.mean(x)\n    y_mean=np.mean(y)\n    return np.round(np.sum(np.multiply((x-x_mean),\n                              (y-y_mean)))\/np.sqrt(np.sum((x-x_mean)**2\n                                                         )*np.sum((y-y_mean)**2)),3)","0237a0fa":"correlation(telecomData['customer service calls'],telecomData[targetVariable])","6d453756":"import random\nrandomlist = random.sample(range(0, telecomData.shape[0]), telecomData.shape[0])\nrandomlist=np.array(randomlist)\/10\n\nvar1=telecomData['total day charge']\nvar2=telecomData['total day charge']*-np.random.randint(10)+randomlist\n\nprint(\"Correlation : \",correlation(var1,var2))\n\ndf=pd.DataFrame({\n    \"Var 1\":var1,\n    \"Var 2\":var2\n})\n\ndf.iplot(asFigure=True, kind ='scatter', x ='Var 1', y ='Var 2', mode ='markers')","15e24cf5":"var1=telecomData['total day charge']\nvar2=telecomData['total day charge']*np.random.randint(10)+randomlist\n\nprint(\"Correlation : \",correlation(var1,var2))\n\ndf=pd.DataFrame({\n    \"Var 1\":var1,\n    \"Var 2\":var2\n})\n\ndf.iplot(asFigure=True, kind ='scatter', x ='Var 1', y ='Var 2', mode ='markers')","50434e80":"added_cols=numericalVariables.copy()\nadded_cols.append(targetVariable)\ncorrelationData=telecomData[added_cols].corr()","28c59d84":"import plotly.figure_factory as ff\n\nx = list(correlationData.columns)\ny = list(correlationData.index)\n\nfig = ff.create_annotated_heatmap(\n    np.round(correlationData.to_numpy(),2), x=x, y=y\n)\n\nfig.show()","e22be6ee":"DropDown1=widgets.Dropdown(\n    options=added_cols,\n    value=\"total day charge\",\n    description='Select Tenure :',\n    disabled=False,\n)\n\nDropDown2=widgets.Dropdown(\n    options=added_cols,\n    value=\"total day minutes\",\n    description='Select Question :',\n    disabled=False,\n)\n\nui = widgets.VBox([DropDown1, DropDown2])\n\ndef getCorrelation(var1,var2):\n    df=telecomData[[var1,var2]]\n    display(df.iplot(asFigure=True,\n                     kind ='scatter',\n                     x =var1,\n                     y =var2, \n                     mode ='markers',\n                     xTitle=var1,\n                     yTitle=var2,\n                     title=\"Scatter Plot for {0} vs {1}\".format(var1,var2)\n                    ))\n\nout = widgets.interactive_output(getCorrelation, {'var1': DropDown1,\n                                                  'var2': DropDown2})\n\ndisplay(ui,out)","dec35734":"# !pip install ExploriPy","0f07e357":"# from ExploriPy import EDA\n# CategoricalFeatures = ['state','area code','phone number','international plan','voice mail plan','churn']\n# eda = EDA(telecomData,CategoricalFeatures,OtherFeatures=['phone number'],title='Automated Exploratory Data Analysis for Churn Prediction')\n# eda.TargetAnalysis('churn')","9df80e14":"def find_correlation(df, thresh=0.9):\n    \"\"\"\n    Given a numeric pd.DataFrame, this will find highly correlated features,\n    and return a list of features to remove\n    params:\n    - df : pd.DataFrame\n    - thresh : correlation threshold, will remove one of pairs of features with\n               a correlation greater than this value\n    \"\"\"\n    \n    corrMatrix = np.abs(df.corr())\n    corrMatrix.loc[:,:] =  np.tril(corrMatrix, k=-1)\n\n    already_in = set()\n    result = []\n\n    for col in corrMatrix:\n        perfect_corr = corrMatrix[col][corrMatrix[col] > thresh].index.tolist()\n        if perfect_corr and col not in already_in:\n            already_in.update(set(perfect_corr))\n            perfect_corr.append(col)\n            result.append(perfect_corr)\n\n\n    select_nested = [f[1:] for f in result]\n    select_flat = [i for j in select_nested for i in j]\n    return select_flat","fbae3c29":"telecomData[\"avg day call duration\"]=telecomData['total day minutes']\/telecomData['total day calls']\ntelecomData[\"avg eve call duration\"]=telecomData['total eve minutes']\/telecomData['total eve calls']\ntelecomData[\"avg night call duration\"]=telecomData['total night minutes']\/telecomData['total night calls']\ntelecomData[\"avg int call duration\"]=telecomData['total intl minutes']\/telecomData['total intl calls']\n\ntelecomData['Avg spent per call local']=telecomData[['total day charge','total night charge','total eve charge']].sum(axis=1)\/telecomData[['total day calls','total night calls','total eve calls']].sum(axis=1)\ntelecomData['Avg spent per call intl']=telecomData['total intl charge']\/telecomData['total intl calls']","1a357505":"feature_engineered_variables=telecomData.columns[-6:]\nprint(\"Engineered Features : \",\", \".join(feature_engineered_variables))","208a437d":"telecomData[feature_engineered_variables].corr()","3e7b77cd":"correlated_features=find_correlation(telecomData[feature_engineered_variables],thresh=0.90)\nprint(correlated_features)","5d43e7de":"numericalVariables.extend(feature_engineered_variables)","47a1bb55":"cols=[i for i in numericalVariables if i not in ['total day charge','total eve charge',\n                                                'total night charge','total eve charge',\n                                                 'avg int call duration'\n                                                ]]","89a9c237":"telecomData[cols].isnull().sum()[telecomData[cols].isnull().sum()>0]","5e7c99ce":"telecomData.fillna(0,inplace=True)","f6820c33":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\n\nrfe = RFE(logreg)\nrfe = rfe.fit(telecomData[cols], telecomData[targetVariable])\n\nreduced_features=[cols[ix] for ix,i in enumerate(rfe.support_) if i==True]\n\nprint(reduced_features)","ad1cd4a8":"reduced_features.append(targetVariable)","00d40099":"# from dominance_analysis import Dominance\n\n# dominance_classification=Dominance(data=telecomData[reduced_features],\n#                     target=targetVariable,objective=0,pseudo_r2=\"mcfadden\",top_k=len(reduced_features)-1)","5a637931":"# incr_variable_rsquare=dominance_classification.incremental_rsquare()","8430f513":"# dominance_classification.plot_incremental_rsquare()","ae2a5e76":"# dominance_classification.dominance_stats()","2c30217d":"# telecomData[targetVariable].astype(float)","67a4106f":"reduced_features.remove(targetVariable)","29adaaea":"import statsmodels.api as sm\nlogit_model=sm.Logit(telecomData[targetVariable].astype(float),telecomData[reduced_features].astype(float))\nresult=logit_model.fit()\nprint(result.summary())","240d7c76":"print(categoricalVariables)\n# international_map=(telecomData['international plan'].value_counts()\/telecomData.shape[0]).to_dict()\n# voice_mail_map=(telecomData['voice mail plan'].value_counts()\/telecomData.shape[0]).to_dict()\n# state_map=(telecomData['state'].value_counts()\/telecomData.shape[0]).to_dict()\n# internation_map,voice_mail_map,state_map","e78e5d96":"temp_df=telecomData.pivot_table(index='international plan',\n                                columns=[targetVariable],\n                                values=uniqueIdentifier,aggfunc=len)\ntemp_df.columns=['False','True']\ntemp_df['sum']=temp_df.sum(axis=1)\ntemp_df['churn_percentage']=temp_df['True']*100\/temp_df['sum']\ninternational_map=temp_df['churn_percentage'].to_dict()\n\ninternational_map","960ecaf7":"temp_df=telecomData.pivot_table(index='state',\n                                columns=[targetVariable],\n                                values=uniqueIdentifier,aggfunc=len)\ntemp_df.columns=['False','True']\ntemp_df['sum']=temp_df.sum(axis=1)\ntemp_df['churn_percentage']=temp_df['True']*100\/temp_df['sum']\nstate_map=temp_df['churn_percentage'].to_dict()\n\n# state_map","35bf3e8f":"temp_df=telecomData.pivot_table(index='voice mail plan',\n                                columns=[targetVariable],\n                                values=uniqueIdentifier,aggfunc=len)\ntemp_df.columns=['False','True']\ntemp_df['sum']=temp_df.sum(axis=1)\ntemp_df['churn_percentage']=temp_df['True']*100\/temp_df['sum']\nvoice_mail_map=temp_df['churn_percentage'].to_dict()\n\nvoice_mail_map","4cb54bbe":"def stateWiseChurnBucket(churn_rate):\n    \"\"\"\n    * churn_rate <14.5 => 'normal'\n    * churn_rate > 14.5 and  chrun_rate <= 17  => 'Medium'\n    * churn_rate > 17  and churn_rate <= 19    =>  'High'\n    * churn_rate > 19 and churn_rate <= 23     => 'Very-High'\n    * churn_rate > 23 => 'Extremely-High'\n    \"\"\"\n    if(churn_rate<=14.5):\n        return 'Normal'\n    elif((churn_rate>14.5) and (churn_rate<=17)):\n        return \"Medium\"\n    elif((churn_rate>17) and (churn_rate<=19)):\n        return \"High\"\n    elif((churn_rate>19) and (churn_rate<=23)):\n        return \"Very-High\"\n    else:\n        return \"Extremely-High\"\n    \n    \nstateWiseChurnBucket(14.5)","a8ae4748":"telecomData[telecomData['state'].isnull()]","cd17666d":"# state_map","ada3bce7":"telecomData['state_map']=telecomData['state'].map(state_map)\ntelecomData['international_map']=telecomData['international plan'].map(international_map)\ntelecomData['voice_mail_map']=telecomData['voice mail plan'].map(voice_mail_map)","6930f4fd":"telecomData.head()","1407e4d8":"reduced_features.extend(telecomData.columns[-3:])","932aeb44":"reduced_features","d8215ce7":"# stateWiseChurnBucket(14.5)","91b91259":"# telecomData['state_map'].max()","c3a31b8d":"telecomData['state_bucket']=telecomData['state_map'].apply(stateWiseChurnBucket)\ntelecomData['state_bucket'].value_counts()\n\n\ndf=pd.get_dummies(telecomData['state_bucket'])\ntelecomData=pd.concat([telecomData,df],axis=1)\n\nreduced_features.extend(telecomData.columns[-5:])","3f6a593c":"# temp_df=telecomData.pivot_table(index='state',\n#                                 columns=[targetVariable],\n#                                 values=uniqueIdentifier,aggfunc=len)\n# temp_df.columns=['False','True']\n# temp_df['sum']=temp_df.sum(axis=1)\n# temp_df['churn_percentage']=temp_df['True']*100\/temp_df['sum']\n# temp_df['churn_percentage'].to_dict()","7dea4b46":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nTrain_x,Valid_x,train_y,valid_y=train_test_split(telecomData[reduced_features],\n                                                 telecomData[targetVariable],\n                                                 stratify=telecomData[targetVariable],\n                                                 random_state=2020,test_size=0.3)\n","0fb27ba8":"lgClf=LogisticRegressionCV(random_state=2020)\n\nlgClf.fit(Train_x,train_y)","3874f27a":"print(classification_report(train_y,lgClf.predict(Train_x)))","bac63838":"print(classification_report(valid_y,lgClf.predict(Valid_x)))","7a973d50":"treeClf=DecisionTreeClassifier(\n    random_state=42,\n    min_impurity_decrease=10e-6,\n    max_depth=3,\n    class_weight={0:0.58473684, 1:3.45031056},\n)\n\ntreeClf.fit(Train_x,train_y)","00aceaf1":"# treeClf.predict(Train_x)","1d77cb81":"print(classification_report(train_y,treeClf.predict(Train_x)))","20644db1":"print(classification_report(valid_y,treeClf.predict(Valid_x)))","78b1a333":"# telecomData.shape[0] \/ (2 * np.bincount(telecomData[targetVariable]))","4a949f5f":"# telecomData[targetVariable].unique()","dc3586b0":"from sklearn import tree\n\n# tree.plot_tree(treeClf)\n\ntree.export_graphviz(treeClf,\n                     out_file=\"tree.dot\",\n                     feature_names = reduced_features, \n                     class_names=['False','True'])\n\n!dot -Tpng tree.dot -o tree.png","05fccaa5":"import os\nos.listdir()","9c21bfd8":"rfClf=RandomForestClassifier(random_state=2020,\n                             n_estimators=500,\n                             min_impurity_decrease=10e-5,max_depth=3\n                             ,oob_score=True,\n                             class_weight={0:0.58473684, 1:3.45031056},\n                            )\n\nrfClf.fit(Train_x,train_y)","f3d9e0d7":"print(classification_report(train_y,rfClf.predict(Train_x)))","0b678a51":"print(classification_report(valid_y,rfClf.predict(Valid_x)))","1988bcae":"gbClf=GradientBoostingClassifier(random_state=42,\n     n_estimators=2500,\n     learning_rate=0.01,\n     min_impurity_decrease=10e-4,\n     max_depth=3,\n    min_samples_split=20\n)\n\ngbClf.fit(Train_x,train_y)","808033f7":"print(classification_report(train_y,gbClf.predict(Train_x)))","73dfd5d1":"print(classification_report(valid_y,gbClf.predict(Valid_x)))","aea53cc4":"from imblearn.over_sampling import SMOTE\nfrom collections import Counter\nsm = SMOTE(random_state=42)\nX_res, y_res = sm.fit_resample(Train_x, train_y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n\n\nrfClf=RandomForestClassifier(random_state=42,\n                             n_estimators=500,\n                             min_impurity_decrease=10e-3\n                             ,oob_score=True,\n#                              class_weight={0:0.58473684, 1:3.45031056},\n                            )\n\nrfClf.fit(X_res,y_res)\n\nprint(classification_report(train_y,rfClf.predict(Train_x)))\nprint(classification_report(valid_y,rfClf.predict(Valid_x)))","4fc3d7b0":"from sklearn.metrics import roc_curve, roc_auc_score\nimport matplotlib.pyplot as plt\n\ny_score = rfClf.predict_proba(Valid_x)[:,1]\n\ndef plot_roc_curve(true_labels,predicted_probs):\n    false_positive_rate, true_positive_rate, threshold = roc_curve(valid_y, y_score)\n    print('roc_auc_score for Model : ', roc_auc_score(valid_y, y_score))\n\n    plt.subplots(1, figsize=(10,10))\n    plt.title('Receiver Operating Characteristic - Model ')\n    plt.plot(false_positive_rate, true_positive_rate)\n    plt.plot([0, 1], ls=\"--\")\n    plt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()\n    \nplot_roc_curve(valid_y,y_score)","0db9c295":"### Inference \n\n* Except Area Code percentage distribution of churn is varying in other qualitative varibles like State, Voice mail plan and International Plan\n\n### Hypothesis \n\n* Churn is independent of Area Code any customer is living \n* Churn is dependent of State, Voice mail plan and International Plan","4e93df62":"<h1 style=\"color:#29b6f6;text-align:center\"> Customer Churn Prediction Model - Telecom Analytics<\/h1>\n<br>\n<img src=\"https:\/\/www.pointillist.com\/wp-content\/uploads\/2017\/11\/Running-4-the-Exit-2-844x422.png\" style=\"width: 40%;border-radius: 125px;\">\n<br>\n\n### Churn prediction consists of detecting which customers are likely to cancel a subscription to a service based on how they use the service.","6591e82c":"## RandomForestClassifier","5898ec8a":"## Gradient Boosting Classifier","db29526a":"### Inference \n\n***Avg spent per call internationally*** is strongly correlated to ***Avg international call duration*** becuase of the fact that ***total intl minutes*** are strogly correlated to ***total intl charge*** as we seen earlier ","1b9a1a64":"### Chi-square test for independence\n\n\\begin{equation}\n\\chi^2=\\Sigma\\frac{(O-E)^2}{E} \\\\\n\\text{where O is the actual value and E is the expected value.}\n\\end{equation}\n\n***Example :***\n<img src=\"https:\/\/miro.medium.com\/max\/405\/1*ORRbJ8IXaPY2tSRbapMMQg.png\">\n\n***Expected value calculation***\n\n<img src=\"https:\/\/miro.medium.com\/max\/1400\/1*-cmU46KrZ9afSgwQWQNU_w.png\" style=\"width:50%\">\n\n<img src=\"https:\/\/miro.medium.com\/max\/572\/1*CvCfzM1VHmZbZQ09_NrTyg.png\">","20368c61":"### Logistic Regression","16fe52f8":"## Feature Engineering with Categorical Features","89171e69":"<img src=\"https:\/\/raw.githubusercontent.com\/bhagatsajan0073\/Community-of-Practice\/master\/Hands%20on%20Session\/EDA.JPG\" style=\"width:85%\">","d893262a":"## 1. Load Python Libraries needed to build model","2dda0669":"## TreeClassifier\n\n\n* Entropy\n<img src=\"https:\/\/miro.medium.com\/max\/587\/1*nNY_7_aWRwp8E2DyGduEPg.png\" style=\"width:30%\">\n\n* Infomation Gain\n<img src=\"https:\/\/miro.medium.com\/max\/1050\/0*08CaHVjPCgs_fZyp\" style=\"width:30%\">","cacbb7a9":"### Inferences \n\n1. Total day charge and Total day minutes are Perfectly Correlated \n2. Total eve charge and Total eve minutes are Perfectly Correlated \n3. Total intl charge and Total intl minutes are Perfectly Correlated \n4. Total night charge and Total night minutes are Perfectly Correlated ","eb8113d9":"### Numerical Variable Analysis or Quantative Variable Analysis","a490d573":"### Correlation Plot\n\n***Correlation between two variables X and Y is defined as degree to which a pair of variables are linearly related to each other***\n\n\\begin{equation}\nr = \\frac{{}\\sum_{i=1}^{n} (x_i - \\overline{x})(y_i - \\overline{y})}\n{\\sqrt{\\sum_{i=1}^{n} (x_i - \\overline{x})^2 \\sum_{i=1}^{n} (y_i - \\overline{y})^2}}\n\\end{equation}","4f570ee1":"<img src=\".\/tree.png\">","67238160":"### Dominance Analysis","055c5b7e":"### Recursive Feature Elimination\n\nRecursive Feature Elimination (RFE) is based on the idea to repeatedly construct a model and choose either the best performing feature","dc01842b":"### Confusion Matrix\n\n<img src=\"https:\/\/miro.medium.com\/max\/534\/1*Z54JgbS4DUwWSknhDCvNTQ.png\" style=\"width:50%\">\n\n***Let\u2019s understand TP, FP, FN, TN in terms of pregnancy analogy.***\n\n<img src=\"https:\/\/miro.medium.com\/max\/693\/1*7EYylA6XlXSGBCF77j_rOA.png\" style=\"width:50%\">","f8540b25":"### Calculate Chi-Square Value\n\n<a href=\"https:\/\/people.smp.uq.edu.au\/YoniNazarathy\/stat_models_B_course_spring_07\/distributions\/chisqtab.pdf\"> chi2table link <\/a>","460f27c0":"#### Outlier Detection","d24a457e":"## ROC Curve \n\n<img src=\"https:\/\/miro.medium.com\/max\/542\/1*pk05QGzoWhCgRiiFbz-oKQ.png\" style=\"width:30%\">\n\n* ***TPR\/Recall\/Sensitivity***\n<img src=\"https:\/\/miro.medium.com\/max\/533\/1*HgxNKuUwXk9JHYBCt_KZNw.png\">\n\n* ***Specificity***\n<img src=\"https:\/\/miro.medium.com\/max\/369\/1*f7NmMcQtfes1ng7jtjNtHQ.png\">\n\n* ***False Positive Rate*** \n<img src=\"https:\/\/miro.medium.com\/max\/368\/1*3GhDfiuhvINF5-9eL8g6Pw.png\">\n\n* for in-depth understanding please follow the blog https:\/\/towardsdatascience.com\/understanding-auc-roc-curve-68b2303cc9c5","695c077a":"<img src=\"https:\/\/storage.ning.com\/topology\/rest\/1.0\/file\/get\/2408482975?profile=original\">","f2612c34":"### Exploripy","b64bce94":"### Feature Engineering\n\n1. Average day call duration\n2. Average evening call duration\n3. Average night call duration\n4. Average Intl call duration\n5. Average Spent per call Locally\n6. Average Spent per call Internationally","fa65155a":"## 2. Loading Churn Dataset","4b31c957":"### Data Modeling Steps or Pipeline\n\n<img src='https:\/\/raw.githubusercontent.com\/bhagatsajan0073\/Community-of-Practice\/master\/Hands%20on%20Session\/Data%20Modeling%20Steps.JPG' style=\"width:65%\"> ","17a63a52":"### Attributes Present in the Data","03779f54":"### Derrive Contigency table or Expected Values(E)","d8aaeffd":"## 3. Exploratory Analysis","fd2f6bcf":"### LogisticRegression\n\n* Logit Function\n\\begin{equation}\n\\text{logistic}(\\eta)=\\frac{1}{1+exp(-\\eta)}\n\\end{equation}\n\n* Plot for Logit Function\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6d\/Exam_pass_logistic_curve.jpeg\" style='width:50%'>\n\n* Loss Function (Error in prediction associated with single data points)\n<img src=\"http:\/\/wiki.fast.ai\/images\/math\/a\/4\/6\/a4651d4ad311666c617d57c1dde37b28.png\">\n\n\n* Cost Function (Error in prediction associated with all data points in the data)\n"}}