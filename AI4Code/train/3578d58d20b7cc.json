{"cell_type":{"5b2fe5ee":"code","8e04c827":"code","8a825008":"code","85f493ff":"code","f365b3ac":"code","335a6f11":"code","f86bcf19":"code","77421afc":"code","a43a7530":"code","1764f6fe":"code","fee0deb1":"code","c4b41207":"code","991912fb":"code","9c46f1a0":"code","ed3fbc0f":"code","9dcc84bb":"code","3ee88ac3":"code","3682af52":"code","4c38f8bb":"code","32204c4f":"code","2b22b45a":"code","0ccfc812":"code","f1deb96c":"code","43fd7c57":"code","9074b13e":"code","24103f03":"code","202c824d":"code","e3f929c1":"code","8fcb24e0":"code","d35c871e":"code","b160c13b":"code","0841a875":"code","c0738928":"code","ea580830":"code","fd1fbf0f":"code","7fa83cb3":"code","67a746ae":"code","f1e140ab":"code","92e19c64":"code","1bd830ff":"code","37e58826":"code","f0122c10":"code","37bac5ad":"code","5e6ff26d":"code","f3b3b684":"code","741eb822":"code","ae7d9063":"code","3d762e40":"code","4b594cf7":"code","a455d22e":"code","de78f8ef":"code","a0a244df":"code","ccc7bf40":"code","470bad56":"code","444d1f26":"code","b646b90e":"code","5feedcde":"code","893277e5":"code","4545319d":"code","370aafd7":"code","cf2597f6":"code","e96a92b0":"code","8df1a4dc":"code","1739af70":"code","d76b6b52":"code","e03eff15":"code","aec7e960":"code","2d044896":"code","f3728311":"code","72461d5f":"code","75be4741":"code","5f0ea57a":"code","394d82da":"code","9c79b392":"code","7ecab5ad":"code","938bb28a":"code","81e8014f":"code","c4d69a73":"markdown","e9387be4":"markdown","820b7286":"markdown","abd1a8b6":"markdown","57551d6c":"markdown","2362af30":"markdown","f1feb125":"markdown","3f5f6f28":"markdown","b95408e4":"markdown","78380de3":"markdown","9afebe14":"markdown","3be3f104":"markdown","230b4fb4":"markdown","99894b68":"markdown","61409ba7":"markdown","1f9b4c24":"markdown","b45d6bb0":"markdown","355fbd4d":"markdown","08d90799":"markdown","a9c67fb0":"markdown","d0beeed9":"markdown","a88a5923":"markdown","82e8718d":"markdown","4771accc":"markdown","a79a682a":"markdown","1822bd7b":"markdown"},"source":{"5b2fe5ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e04c827":"file = open('\/kaggle\/input\/ense3-ict-lession\/files\/adult.data', 'r')","8a825008":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","85f493ff":"print (data[1:2])","f365b3ac":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","335a6f11":"df.tail()","f86bcf19":"df.shape","77421afc":"counts = df.groupby('country').size()\n\nprint (counts) ","a43a7530":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","1764f6fe":"counts.sort_values(axis=0,ascending=False, inplace=True)\ncounts.head()","fee0deb1":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","c4b41207":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","991912fb":"fm =df[(df.sex == 'Female')]\nfm.shape","9c46f1a0":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","ed3fbc0f":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","9dcc84bb":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","3ee88ac3":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","3682af52":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","4c38f8bb":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","32204c4f":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","2b22b45a":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","0ccfc812":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","f1deb96c":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","43fd7c57":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(histtype='stepfilled', bins=20)\n","9074b13e":"fm_age=fm['age']\nfm_age.hist(histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","24103f03":"import seaborn as sns\nfm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","202c824d":"fm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","e3f929c1":"ml_age.hist(histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","8fcb24e0":"fm_age.hist(histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","d35c871e":"ml_age.hist(histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","b160c13b":"fm_age.hist(histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","0841a875":"ml_age.hist(bins=10, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","c0738928":"ml_age.hist(histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","ea580830":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","fd1fbf0f":"df['age'].median()","7fa83cb3":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","67a746ae":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","f1e140ab":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","92e19c64":"ml1_age=ml1['age']\nfm1_age=fm1['age']\n\nml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])\n\n\nmu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","1bd830ff":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","37e58826":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","f0122c10":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","37bac5ad":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","5e6ff26d":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","f3b3b684":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)\n","741eb822":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","ae7d9063":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","3d762e40":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","4b594cf7":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","a455d22e":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","de78f8ef":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","a0a244df":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","ccc7bf40":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","470bad56":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","444d1f26":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","b646b90e":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","5feedcde":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","893277e5":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","4545319d":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","370aafd7":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","cf2597f6":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28)\nplt.plot(xgrid, density(xgrid), 'r-')","e96a92b0":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18)","8df1a4dc":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18)\nplt.plot(xgrid, density(xgrid), 'r-')","1739af70":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50)","d76b6b52":"print ('The empirical mean of the sample is ', x.mean())","e03eff15":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","aec7e960":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","2d044896":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","f3728311":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","72461d5f":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","75be4741":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","5f0ea57a":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","394d82da":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","9c79b392":"import statistics \n\nprint('Mean value of x1',X[:,0].mean())\nprint('Mean value of y1',X[:,1].mean())\n\nprint('Variance of x1',statistics.variance(X[:,0]))\nprint('Variance of y1',statistics.variance(X[:,1]))\n\nprint (\"Cov(x1, y1) = %.5f\" % Cov(X[:,0], X[:,1]))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,0], X[:,1]))\n#print (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,0], X[:,1])\n\n","7ecab5ad":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","938bb28a":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","81e8014f":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","c4d69a73":"**1. What is the obtained result? What did you ask for in the previous command? Explain.**\nWe obtained the data in dataframe forme with titles. I did a command for turning the raw data into a dataframe forme.","e9387be4":"**8. Describe an explain the result.**\nIn order to calculate the mean value, we use the \"mean\" function in Pandas, which is easy to apply.\nWe can conclude that the men with high income are a little bit older than women with high income.","820b7286":"**20. Explain the result.**\nHere we calculated the sample difference by calculating the difference between male's and female's average age, which is around 2,57. ","abd1a8b6":"**15. Show the graphics and an explain the result.**\nSame for female's age.","57551d6c":"**10. Describe an explain the result.**\nIn order to find out the median numbers of the age and working hours for both men and women, we used the function \"median\". We can see that men with high-income are older than women in high income, but their working hours are the same.","2362af30":"**5. How many items are there for USA? and for Mexico?**\nThere are 29170 items for USA and 634 items for Mexico.","f1feb125":"**16. Show the graphics and an explain the result.**\nHere is the CDF of male's ages in step function. It describes the probability of a real-valued random variable X with a given probability distribution that will be found to have a value less than or equal to x (F=P(X<=x)). People in advanced age have higher probability, and the probability is cumulated. Also, ages between 30 to 40 has a greater part, which means that the majority concentrates in this inteval.","3f5f6f28":"**12. Show the graphics and an explain the result.**\nThe graphic is combined with men's and women's age distribution in two different numbers of bins.","b95408e4":"**14. Show the graphics and an explain the result.**\nHere is the histogram of male's age. The y label represents the probability of each age interval.  ","78380de3":"**22. What does the figure shows?**\nKernels provides an estimation of contineous function when we want to approximate the density of the distribution. The black ones are kernel estimation and the red one is the sum of all the kernel. ","9afebe14":"**10. Show the graphics and an explain the result.**\nWe plot the men's age graphic in histogramme thanks to matplotlib. We can see the age distribution above, and the majority are in age between 30 and 40 years old.","3be3f104":"**18. Show the graphics and an explain the result.**\nIt shows the probability of different age for both male and female. We can see that female has less sample than male in all ages. Also, the distribution of male and female is different.","230b4fb4":"**9. Describe an explain the result.**\nWe have calculated some characteristic of the distribution (mean, variance, standard deviation) of age and working hours of men and women. We can see that women in the samples are younger than men with less variation. And women's worjing hours are less than men's as well, with less variation.","99894b68":"4.2.6 Kernel Density","61409ba7":"**Summary**\n    In this lab work, I learnt a lot of indicators and functions to analyse data. It is a very rich lab work and it needs much time to understand the mathematical meanings as well as pratical meanings on the data.","1f9b4c24":"**23. What do you obtained as result?**\nThe mean square error (MSE) is 0,0011. In a normal distribution without outliers, the error is very little.","b45d6bb0":"**19. Show the graphics and an explain the result.**\nHere is the CDF for both male and female. Same as what we found above, the number of samples of males is more important than female's, which is nearly two times more. In CDF graphic, the difference on numbers of samples is more visible.","355fbd4d":"**6. What is the age of the most represented people?**\n36 years old.","08d90799":"**21. Explain the result**\nBoth skewness for male and female are positive, which means that both distributions \"skews right\"(it extends further to the right than to the left). Besides, the female's distribution is less symetric than the male's, as the female one is greater than the male's. ","a9c67fb0":"**3. Describe and explain the result. Compare with the previous one.**\nThe dataframe contains 32561 row and 15 columns, which is much more larger than the one in exo1.","d0beeed9":"**7. Describe and explain the result.**\nHere we calculate the percentage by using the length of each group as the number of persons. And we should also be careful about conversing the length into integer or decimal.\n\nWe can see that there is only 24% of people in all the samples that has a high income, including 30% of men with high income among all the men samples and only 10% of women among all the women samples.","a88a5923":"**2. Describe an explain the result.**\nIt shows the last 5 rows of the dataframe.","82e8718d":"**11. Show the graphics and an explain the result.**\nWe plot the same graphic for women. The majority of women are in age between 20 and 40 years old.","4771accc":"**4. Describe an explain the result.**\nThe data is regrouped by countries and counts the numbers of samples of each country.","a79a682a":"**17. Show the graphics and an explain the result.**\nSame CDF for female's age. We can see that age 20 has the most important share among all other ages. We can easily find out the share in a CDF graphic. ","1822bd7b":"**13. Show the graphics and an explain the result.**\n"}}