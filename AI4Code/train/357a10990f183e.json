{"cell_type":{"92105dcf":"code","a23de9a1":"code","aa352ed5":"code","8f98fb24":"code","7bd6b1cc":"code","dbc9d94a":"code","182f9f19":"code","87b198b9":"code","1862a546":"code","5abe4abc":"code","7acb2a6c":"code","cbfd773f":"code","e06fe758":"code","6b5c6363":"code","f14f14f9":"code","a16a69a9":"code","3161476b":"code","37c7ac09":"code","be7103cd":"code","337d08aa":"code","5744f947":"code","fb1d0261":"code","46005132":"code","accb1da2":"code","52ed3d53":"code","3f16b374":"code","9aca7506":"code","82a68dd5":"code","af498546":"code","326388ef":"code","001a0411":"code","d4c7a80a":"code","a4fdc5e9":"code","091fd402":"code","fd5a3dcb":"code","ace598d8":"code","8952c98f":"code","90858091":"code","ab09cd6d":"code","7798c9fb":"code","6339d274":"code","e3face79":"code","16bc6d47":"code","ad905d59":"code","be66507f":"code","f1909580":"code","533ce410":"code","7fb771f4":"code","67ff7eec":"code","a91ea65b":"code","6c35d8cd":"code","b863360d":"code","a77fc4e6":"code","a8634683":"code","d85065a2":"markdown","8f2a3809":"markdown","ab90539f":"markdown","ba60e343":"markdown","d62e1f81":"markdown","5a4b8025":"markdown","15ec4bed":"markdown","e7a06b56":"markdown","4778f031":"markdown","a7bebc77":"markdown","99aed200":"markdown"},"source":{"92105dcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a23de9a1":"import os\nimport csv\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","aa352ed5":"from IPython.display import Markdown, display\ndef printmd(string):\n    display(Markdown(string))\n#printmd('**bold**')","8f98fb24":"data_path = \"..\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv\"\ntest_data_path = \"..\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv\"","7bd6b1cc":"data_raw = pd.read_csv(data_path)","dbc9d94a":"data_raw.head()","182f9f19":"print(\"Number of rows in data =\",data_raw.shape[0])\nprint(\"Number of columns in data =\",data_raw.shape[1])\nprint(\"\\n\")\nprintmd(\"**Sample data:**\")\ndata_raw.head()","87b198b9":"missing_values_check = data_raw.isnull().sum()\nprint(missing_values_check)","1862a546":"# Comments with no label are considered to be clean comments.\n# Creating seperate column in dataframe to identify clean comments.\n\n# We use axis=1 to count row-wise and axis=0 to count column wise\n\nrowSums = data_raw.iloc[:,3:].sum(axis=1)\nclean_comments_count = (rowSums==0).sum(axis=0)\n\nprint(\"Total number of comments = \",len(data_raw))\nprint(\"Number of clean comments = \",clean_comments_count)\nprint(\"Number of comments with labels =\",(len(data_raw)-clean_comments_count))","5abe4abc":"categories = list(data_raw.columns.values)\ncategories = categories[3:]\nprint(categories)","7acb2a6c":"counts = []\nfor category in categories:\n    counts.append((category, data_raw[category].sum()))\ndf_stats = pd.DataFrame(counts, columns=['category', 'number of comments'])\ndf_stats","cbfd773f":"df_stats.category.tolist()","e06fe758":"import textwrap\n\nsns.set(font_scale = 2)\nplt.figure(figsize=(15,8))\n\nax= sns.barplot(categories, data_raw.iloc[:,3:].sum().values)\n\nplt.title(\"Comments in each category\", fontsize=24)\nplt.ylabel('Number of comments', fontsize=18)\nplt.xlabel('Comment Type ', fontsize=18)\n\n#adding the text labels\nrects = ax.patches\nlabels = data_raw.iloc[:,3:].sum().values\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 5, label, ha='center', va='bottom', fontsize=18)\n\nlabels = df_stats.category.tolist()\n# labels.sort()\nlabels=[textwrap.fill(text,12) for text in labels]\npos = np.arange(len(labels)) \nplt.xticks(pos, labels)\n\nplt.show()","6b5c6363":"data_raw.iloc[:,3:]","f14f14f9":"rowSums = data_raw.iloc[:,3:].sum(axis=1)\nmultiLabel_counts = rowSums.value_counts()\nmultiLabel_counts = multiLabel_counts.iloc[:]\n\nsns.set(font_scale = 2)\nplt.figure(figsize=(15,8))\n\nax = sns.barplot(multiLabel_counts.index, multiLabel_counts.values)\n\nplt.title(\"Comments having multiple labels \")\nplt.ylabel('Number of comments', fontsize=18)\nplt.xlabel('Number of labels', fontsize=18)\n\n#adding the text labels\nrects = ax.patches\nlabels = multiLabel_counts.values\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 5, label, ha='center', va='bottom')\n\nplt.show()","a16a69a9":"data_raw.head()","3161476b":"# Combine the Title and Abstract data\ndata_raw['TEXT'] = data_raw['TITLE'].map(str) + data_raw['ABSTRACT'].map(str)","37c7ac09":"from wordcloud import WordCloud,STOPWORDS\n\nplt.figure(figsize=(40,25))\n\n# Computer Science\nsubset = data_raw[data_raw['Computer Science']==1]\ntext = subset.TEXT.values\ncloud_toxic = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 1)\nplt.axis('off')\nplt.title(\"Computer Science\",fontsize=40)\nplt.imshow(cloud_toxic)\n\n\n# Physics\nsubset = data_raw[data_raw.Physics==1]\ntext = subset.TEXT.values\ncloud_severe_toxic = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 2)\nplt.axis('off')\nplt.title(\"Physics\",fontsize=40)\nplt.imshow(cloud_severe_toxic)\n\n\n# Mathematics\nsubset = data_raw[data_raw.Mathematics==1]\ntext = subset.TEXT.values\ncloud_obscene = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 3)\nplt.axis('off')\nplt.title(\"Mathematics\",fontsize=40)\nplt.imshow(cloud_obscene)\n\n\n# Statistics\t\t\nsubset = data_raw[data_raw.Statistics==1]\ntext = subset.TEXT.values\ncloud_threat = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 4)\nplt.axis('off')\nplt.title(\"Statistics\",fontsize=40)\nplt.imshow(cloud_threat)\n\n\n# Quantitative Biology\nsubset = data_raw[data_raw['Quantitative Biology']==1]\ntext = subset.TEXT.values\ncloud_insult = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 5)\nplt.axis('off')\nplt.title(\"Quantitative Biology\",fontsize=40)\nplt.imshow(cloud_insult)\n\n\n# Quantitative Finance\nsubset = data_raw[data_raw['Quantitative Finance']==1]\ntext = subset.TEXT.values\ncloud_identity_hate = WordCloud(\n                          stopwords=STOPWORDS,\n                          background_color='black',\n                          collocations=False,\n                          width=2500,\n                          height=1800\n                         ).generate(\" \".join(text))\n\nplt.subplot(2, 3, 6)\nplt.axis('off')\nplt.title(\"Quantitative Finance\",fontsize=40)\nplt.imshow(cloud_identity_hate)\n\nplt.show()","be7103cd":"data_raw.head()","337d08aa":"test = pd.read_csv(test_data_path)","5744f947":"# Combine the Title and Abstract data\ntest['TEXT'] = test['TITLE'].map(str) + test['ABSTRACT'].map(str)","fb1d0261":"print(test.shape)\nprint(\"\\n\")\ntest.head()","46005132":"data_raw['split']= 1\ntest['split']=0","accb1da2":"data = pd.concat([data_raw,test])","52ed3d53":"data.info()","3f16b374":"# data = data_raw","9aca7506":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.snowball import SnowballStemmer\nimport re\n\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","82a68dd5":"def cleanHtml(sentence):\n    cleanr = re.compile('<.*?>')\n    cleantext = re.sub(cleanr, ' ', str(sentence))\n    return cleantext\n\n\ndef cleanPunc(sentence): #function to clean the word of any punctuation or special characters\n    cleaned = re.sub(r'[?|!|\\'|\"|#]',r'',sentence)\n    cleaned = re.sub(r'[.|,|)|(|\\|\/]',r' ',cleaned)\n    cleaned = cleaned.strip()\n    cleaned = cleaned.replace(\"\\n\",\" \")\n    return cleaned\n\n\ndef keepAlpha(sentence):\n    alpha_sent = \"\"\n    for word in sentence.split():\n        alpha_word = re.sub('[^a-z A-Z]+', ' ', word)\n        alpha_sent += alpha_word\n        alpha_sent += \" \"\n    alpha_sent = alpha_sent.strip()\n    return alpha_sent","af498546":"data['TEXT'] = data['TEXT'].str.lower()\ndata['TEXT'] = data['TEXT'].apply(cleanHtml)\ndata['TEXT'] = data['TEXT'].apply(cleanPunc)\ndata['TEXT'] = data['TEXT'].apply(keepAlpha)\ndata.head()","326388ef":"stop_words = set(stopwords.words('english'))\nstop_words.update(['zero','one','two','three','four','five','six','seven','eight','nine','ten','may','also','across','among','beside','however','yet','within'])\nre_stop_words = re.compile(r\"\\b(\" + \"|\".join(stop_words) + \")\\\\W\", re.I)\ndef removeStopWords(sentence):\n    global re_stop_words\n    return re_stop_words.sub(\" \", sentence)\n\ndata['text'] = data['TEXT'].apply(removeStopWords)\ndata.head()","001a0411":"stemmer = SnowballStemmer(\"english\")\ndef stemming(sentence):\n    stemSentence = \"\"\n    for word in sentence.split():\n        stem = stemmer.stem(word)\n        stemSentence += stem\n        stemSentence += \" \"\n    stemSentence = stemSentence.strip()\n    return stemSentence\n\ndata['text'] = data['text'].apply(stemming)\ndata.head()","d4c7a80a":"test_data = data[data['split']==0]","a4fdc5e9":"test_data.shape","091fd402":"train_df = data[data['split']==1]","fd5a3dcb":"train_df.columns","ace598d8":"train_df['Computer Science']=train_df['Computer Science'].astype(int)\ntrain_df['Physics']=train_df['Physics'].astype(int)\ntrain_df['Mathematics']=train_df['Mathematics'].astype(int)\ntrain_df['Statistics']=train_df['Statistics'].astype(int)\ntrain_df['Quantitative Biology']=train_df['Quantitative Biology'].astype(int)\ntrain_df['Quantitative Finance']=train_df['Quantitative Finance'].astype(int)","8952c98f":"train_df.head()","90858091":"train_df.shape","ab09cd6d":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(train_df, random_state=42, test_size=0.30, shuffle=True)\n\nprint(train.shape)\nprint(test.shape)","7798c9fb":"train_text = train['text']\ntest_text = test['text']  #test data from the train as validation \ntest_df = test_data['text'] # test data to predict ","6339d274":"train_text.head()","e3face79":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(strip_accents='unicode', analyzer='word', ngram_range=(1,3), norm='l2')\nvectorizer.fit(train_text)\nvectorizer.fit(test_text)\nvectorizer.fit(test_df)","16bc6d47":"x_train = vectorizer.transform(train_text)\ny_train = train.drop(labels = ['ID','TITLE','ABSTRACT','TEXT','text'], axis=1)\n\nx_test = vectorizer.transform(test_text)\ny_test = test.drop(labels = ['ID','TITLE','ABSTRACT','TEXT','text'], axis=1)\n\ntest_to_predict  = vectorizer.transform(test_df)","ad905d59":"print(x_train.shape)\nprint(\"=\"*20)\nprint(x_test.shape)\nprint(\"=\"*20)\nprint(test_to_predict.shape)","be66507f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.multiclass import OneVsRestClassifier","f1909580":"%%time\n\n# Using pipeline for applying logistic regression and one vs rest classifier\nLogReg_pipeline = Pipeline([\n                ('clf', OneVsRestClassifier(LogisticRegression(solver='sag'), n_jobs=-1)),\n            ])\n\n\npredictions = []\naccuracy_list = []\nfor category in categories:\n    printmd('**Processing {} comments...**'.format(category))\n    \n    # Training logistic regression model on train data\n    LogReg_pipeline.fit(x_train, train[category])\n    \n    # calculating test accuracy\n    prediction = LogReg_pipeline.predict(x_test)\n    accuracy = accuracy_score(test[category], prediction)\n    predictions.append(prediction)\n    accuracy_list.append(accuracy)\n    print('Test accuracy is {}'.format(accuracy_score(test[category], prediction)))\n    print(\"\\n\")","533ce410":"predictions","7fb771f4":"sample = pd.read_csv('..\/input\/janatahack-independence-day-2020-ml-hackathon\/sample_submission_UVKGLZE.csv')","67ff7eec":"sample.shape","a91ea65b":"%%time\n\n# Using pipeline for applying logistic regression and one vs rest classifier\nLogReg_pipeline = Pipeline([\n                ('clf', OneVsRestClassifier(LogisticRegression(solver='sag'), n_jobs=-1)),\n            ])\n\n\npredictions = []\n# accuracy_list = []\nfor category in categories:\n    printmd('**Processing {} comments...**'.format(category))\n    \n    # Training logistic regression model on train data\n    LogReg_pipeline.fit(x_train, train[category])\n    \n    # calculating test accuracy\n    prediction = LogReg_pipeline.predict(test_to_predict)\n#     accuracy = accuracy_score(test[category], prediction)\n    predictions.append(prediction)\n#     accuracy_list.append(accuracy)\n#     print('Test accuracy is {}'.format(accuracy_score(test[category], prediction)))\n    print(\"Complete....\")\n    print(\"\\n\")","6c35d8cd":"predictions","b863360d":"sample['Computer Science']=predictions[0]\nsample['Physics']=predictions[1]\nsample['Mathematics']=predictions[2]\nsample['Statistics']=predictions[3]\nsample['Quantitative Biology']=predictions[4]\nsample['Quantitative Finance']=predictions[5]","a77fc4e6":"sample.head()","a8634683":"sample.to_csv(\"submission.csv\",index=False)","d85065a2":"## Multi-Label Classification\n- Multiple Binary Classifications - (One Vs Rest Classifier)\n","8f2a3809":"## Cleaning the Data","ab90539f":"## Checking for missing values","ba60e343":"## Calculating number of comments having multiple labels","d62e1f81":"## WordCloud representation of most used words in each category of comments","5a4b8025":"## TF- IDF","15ec4bed":"## Loading the Library","e7a06b56":"# Train Test Split","4778f031":"##  Calculating number of comments in each category","a7bebc77":"## Stemming","99aed200":"## Calculating number of comments under each label"}}