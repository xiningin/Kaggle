{"cell_type":{"deecc06d":"code","4d2ba5a0":"code","e64b930b":"code","88e50ffb":"code","ade194d0":"code","32a4016f":"code","8ea8f630":"code","a9d6de23":"code","9c36e8d7":"code","b2270df5":"code","ae727b82":"code","79ae4b83":"code","c8de0911":"code","766c0226":"code","c6f7a43e":"code","236ea8c4":"code","7511c20f":"code","1bd14141":"code","8006c261":"code","d8b22b49":"code","fe634c6d":"code","6fc2ad71":"code","5101dcc2":"code","c90e244a":"code","2ed1c4fa":"code","5dcadf7b":"code","52b45337":"code","98844238":"code","c71f9445":"code","e254f65e":"code","6dc8014b":"code","f0005d09":"code","91700951":"code","5c29896f":"code","356c115c":"code","67d4c065":"code","b8ccb6c2":"code","b4837fb0":"code","4d2b5aea":"code","48a6e427":"code","33d73c23":"code","d171a214":"code","c618684f":"code","1902d65c":"code","a7c035f1":"code","49b27a4d":"code","a251a9ab":"code","c3fd8275":"code","86886693":"code","4d3e0ff3":"code","7475fe15":"code","e53deaf3":"code","0c0c4a51":"code","1c8779fb":"code","394a8168":"code","d3658574":"code","69fea0f3":"code","df4fd6a1":"code","dbb926bb":"code","17f6bc54":"code","731b6586":"code","dc2fb7c3":"code","1957573a":"code","630c3037":"code","0863fc4f":"code","f3367642":"code","2a13e36e":"code","dbc15ecb":"code","0ce5a671":"code","586fe207":"code","5aea3cf5":"code","a6671596":"code","b9f91070":"code","8b10729b":"code","49f53719":"code","ea26e9f4":"code","788c06c4":"code","e57644ec":"code","264ac300":"code","f23a17df":"code","92b2f1a6":"code","9269829c":"code","7cb9a8c1":"code","21827e6a":"code","217e2f2f":"code","2cc37584":"code","6cefe9a7":"code","6e58d052":"code","a7e296e7":"code","608bfcb2":"code","b051f910":"code","7b14ed66":"code","5e399e09":"code","78f66f01":"code","c56fc018":"code","559e1624":"code","caf0d566":"code","03d5944f":"code","050b5da4":"code","8bd47a0d":"code","ed9f29dd":"code","247e6fb6":"code","8d48a51c":"code","99772da6":"code","436097d0":"code","fb5fd9ea":"code","084955d4":"code","efa0f9fd":"code","74b9509e":"code","6b825dcb":"code","7876d671":"code","fd15b67f":"code","1b9e55f4":"code","dfb1bd45":"code","845f63eb":"code","4b1cf0ad":"code","52de546a":"code","357f37d1":"code","4b8bead2":"code","7c4151c5":"code","f58ab0e3":"code","63537f68":"code","d4ff8955":"code","043f14a6":"code","710c57ed":"code","f994877d":"code","dd0fb003":"code","95cbd5b1":"code","1aa36c82":"code","ab9fbfb6":"code","39bb4872":"code","670c7046":"code","0a9d5d59":"code","0c16f24e":"code","d2cbe316":"code","52f063e1":"code","057ccb14":"code","69ed4b8a":"code","af079d5d":"code","6905fffb":"code","215aece1":"code","7b0731ea":"code","ef11a0d9":"code","5587589c":"code","bbd95207":"code","b9650142":"code","53f3dd47":"code","a9bc2702":"code","58c52128":"code","79a2860b":"code","090889dd":"code","e473ed74":"markdown","1965817f":"markdown","8fc3f6ac":"markdown","7bd113a3":"markdown","0b0a0b5d":"markdown","059e07e8":"markdown","f5dfaf66":"markdown","8962f468":"markdown","fa728a08":"markdown","5476878f":"markdown","7b06c4b0":"markdown","134844d0":"markdown","c20991c2":"markdown","79a1a007":"markdown","227afe6e":"markdown","7c6065c0":"markdown","5796c3ce":"markdown","f50563ce":"markdown","d9fa0d37":"markdown","ef2ea6e9":"markdown","16343fa4":"markdown","e30ca687":"markdown","0705faf6":"markdown","06fa06da":"markdown","f0c1dda6":"markdown","a0ca18b3":"markdown","05d58362":"markdown","45289360":"markdown","dfb5fa39":"markdown","0d74836b":"markdown","20a66019":"markdown","297fab48":"markdown","0d0794fe":"markdown","567f242e":"markdown","22ba9960":"markdown","358ecbda":"markdown","2b93f856":"markdown","361f73ec":"markdown","0f9aca98":"markdown","98fd390a":"markdown","4b05feb0":"markdown"},"source":{"deecc06d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d2ba5a0":"import numpy as np \nimport pandas as pd\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e64b930b":"co2_vehicles= pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\ndf=co2_vehicles.copy()\ndf.head(5)","88e50ffb":"df.info()","ade194d0":"df.shape","32a4016f":"df.columns","8ea8f630":"df.isnull().values.any()","a9d6de23":"df.isnull().sum()","9c36e8d7":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(df)","b2270df5":"# Duplicated data\ndf_duplicated=df[df.duplicated() == True]\ndf_duplicated","ae727b82":"sum(df_duplicated.groupby(by =['Make','Model','Vehicle Class','Engine Size(L)','Cylinders','Transmission','Fuel Type'])['Fuel Consumption City (L\/100 km)'].nunique())","79ae4b83":"#indexs=df_duplicated.index\n# Kick Outliers\n#for i in indexs:\n#    df.drop(i, axis = 0,inplace = True)","c8de0911":"df.describe().T","766c0226":"df[\"Make\"].unique()","c6f7a43e":"df_Make=df['Make'].value_counts().reset_index().rename(columns={'index':'Make','Make':'Count'})[0:25]\ndf_Make\nfig = go.Figure(go.Bar(\n    x=df_Make['Make'],y=df_Make['Count'],\n    marker={'color': df_Make['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Make['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 25 Company',xaxis_title=\"Company \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","236ea8c4":"df_ford=df[df[\"Make\"]==\"FORD\"]\ndf_ford_model=df_ford[\"Model\"].value_counts().reset_index().rename(columns={'index':'Model','Model':'Count'})[0:10]\nfig = go.Figure(go.Bar(\n    x=df_ford_model['Model'],y=df_ford_model['Count'],\n    marker={'color': df_ford_model['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_ford_model['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 10 Ford Model',xaxis_title=\"Model \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","7511c20f":"df_Model=df['Model'].value_counts().reset_index().rename(columns={'index':'Model','Model':'Count'})[0:20]\n\nfig = go.Figure(go.Bar(\n    x=df_Model['Model'],y=df_Model['Count'],\n    marker={'color': df_Model['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Model['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 20 Model',xaxis_title=\"Model \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","1bd14141":"df_Vehicle_Class=df['Vehicle Class'].value_counts().reset_index().rename(columns={'index':'Vehicle_Class','Vehicle Class':'Count'})\nfig = go.Figure(go.Bar(\n    x=df_Vehicle_Class['Vehicle_Class'],y=df_Vehicle_Class['Count'],\n    marker={'color': df_Vehicle_Class['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Vehicle_Class['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text=' Vehicle Class',xaxis_title=\"Vehicle Class\",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","8006c261":"fig = px.histogram(df, x=\"Engine Size(L)\", marginal=\"rug\", # can be `box`, `violin`\n                         hover_data=df.columns)\nfig.show()","d8b22b49":"fig = go.Figure(data=[go.Histogram(x=df[\"Engine Size(L)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Distribution Of Engine Size ',xaxis_title=\" Engine Size (L)\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","fe634c6d":"sns.set_style(style=\"whitegrid\")\nax = sns.swarmplot(x=df[\"Engine Size(L)\"][0:250])","6fc2ad71":"fig = px.scatter(df, x=\"Engine Size(L)\", y=\"Cylinders\")\nfig.update_layout(title_text='Cylinders vs Engine Size ',xaxis_title=\" Engine Size (L)\",yaxis_title=\"Cylinders\",title_x=0.5)\nfig.show()","5101dcc2":"fig = px.histogram(df, x=\"Cylinders\")\nfig.update_layout(title_text='Distribution Of Cylinders  ',xaxis_title=\" Cylinders \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","c90e244a":"sns.set_style(style=\"whitegrid\")\nax = sns.swarmplot(x=df[\"Cylinders\"][0:250])","2ed1c4fa":"fig = go.Figure(data=[go.Histogram(x=df[\"Cylinders\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Distribution Of Cylinders  ',xaxis_title=\" Cylinders \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","5dcadf7b":"df[\"Gears\"]= df['Transmission'].str[-1]\n\ndf['Transmission']=df['Transmission'].str[0:-1]\ndf.head()","52b45337":"df_Transmission=df['Transmission'].value_counts().reset_index().rename(columns={'index':'Transmission','Transmission':'Count'})\ndf_Transmission\nfig = px.pie(df_Transmission, values='Count', names='Transmission')\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\nfig.update_layout(title=\"Transmission Distribution\",title_x=0.5)\nfig.show()","98844238":"df_Transmission=df['Transmission'].value_counts().reset_index().rename(columns={'index':'Transmission','Transmission':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_Transmission['Transmission'],y=df_Transmission['Count'],\n    marker={'color': df_Transmission['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Transmission['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Transmission Distribution ',xaxis_title=\"Transmission \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","c71f9445":"df_Gears=df['Gears'].value_counts().reset_index().rename(columns={'index':'Gears','Gears':'Count'})\ndf_Gears\nfig = px.pie(df_Gears, values='Count', names='Gears')\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\nfig.update_layout(title=\"Gears Distribution\",title_x=0.5)\nfig.show()","e254f65e":"df_Fuel_Type=df['Fuel Type'].value_counts().reset_index().rename(columns={'index':'Fuel_Type','Fuel Type':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_Fuel_Type['Fuel_Type'],y=df_Fuel_Type['Count'],\n    marker={'color': df_Fuel_Type['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_Fuel_Type['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Fuel Type Distribution ',xaxis_title=\"Fuel Type  \",yaxis_title=\"Number Of Vehicles \",title_x=0.5)\nfig.show()","6dc8014b":"fig = go.Figure(data=[go.Histogram(x=df[\"Fuel Consumption City (L\/100 km)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Fuel Consumption City  ',xaxis_title=\"Fuel Consumption\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","f0005d09":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"Fuel Consumption City (L\/100 km)\"],\n    name='Fuel Consumption City',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title_text='Fuel Consumption City',yaxis_title=\" L \/ 100 km \",title_x=0.5)\nfig.show()","91700951":"fig = go.Figure(data=go.Violin(y=df[\"Fuel Consumption City (L\/100 km)\"],\n                               box_visible=True,\n                               line_color='black',\n                               meanline_visible=True,\n                               fillcolor='lightseagreen', opacity=0.6,\n                               x0='Fuel Consumption City'))\n\nfig.update_layout(yaxis_zeroline=False)\nfig.show()","5c29896f":"fig = go.Figure(data=[go.Histogram(x=df[\"Fuel Consumption Hwy (L\/100 km)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Fuel Consumption Highways  ',xaxis_title=\"Fuel Consumption\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","356c115c":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"Fuel Consumption Hwy (L\/100 km)\"],\n    name='Fuel Consumption Hwy',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title_text='Fuel Consumption Highways ',yaxis_title=\" L \/ 100 km \",title_x=0.5)\nfig.show()","67d4c065":"fig = go.Figure(data=go.Violin(y=df[\"Fuel Consumption Hwy (L\/100 km)\"],\n                               box_visible=True,\n                               line_color='black',\n                               meanline_visible=True,\n                               fillcolor='lightseagreen', opacity=0.6,\n                               x0='Fuel Consumption Highways '))\n\nfig.update_layout(yaxis_zeroline=False)\nfig.show()","b8ccb6c2":"fig = go.Figure(data=[go.Histogram(x=df[\"Fuel Consumption Comb (L\/100 km)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Fuel Consumption Combined  ',xaxis_title=\"Fuel Consumption\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","b4837fb0":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"Fuel Consumption Comb (L\/100 km)\"],\n    name='Fuel Consumption Comb ',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title_text='The Combined Fuel Consumption',yaxis_title=\" L \/ 100 km \",title_x=0.5)\nfig.show()","4d2b5aea":"fig = go.Figure(data=go.Violin(y=df[\"Fuel Consumption Comb (L\/100 km)\"],\n                               box_visible=True,\n                               line_color='black',\n                               meanline_visible=True,\n                               fillcolor='lightseagreen', opacity=0.6,\n                               x0='Fuel Combined Fuel Consumption'))\n\nfig.update_layout(yaxis_zeroline=False)\nfig.show()","48a6e427":"fig = go.Figure(data=[go.Histogram(x=df[\"Fuel Consumption Comb (mpg)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Fuel Consumption Combined  Mile Per Gallon ',xaxis_title=\"Fuel Consumption\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","33d73c23":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"Fuel Consumption Comb (mpg)\"],\n    name='Fuel Consumption Comb ',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title_text='The Combined Fuel Mile Per Gallon',yaxis_title=\"Mpg\",title_x=0.5)\nfig.show()","d171a214":"fig = go.Figure(data=go.Violin(y=df[\"Fuel Consumption Comb (mpg)\"],\n                               box_visible=True,\n                               line_color='black',\n                               meanline_visible=True,\n                               fillcolor='lightseagreen', opacity=0.6,\n                               x0='Fuel Combined Fuel mile per gallon'))\n\nfig.update_layout(yaxis_zeroline=False,yaxis_title=\"Mpg\",title_x=0.5)\nfig.show()","c618684f":"fig = go.Figure(data=[go.Histogram(x=df[\"CO2 Emissions(g\/km)\"], histnorm='probability')])\nfig.update_layout(title_text='Normalized Fuel Consumption Combined  Mile Per Gallon ',xaxis_title=\"Fuel Consumption\",yaxis_title=\"Ratio\",title_x=0.5)\nfig.show()","1902d65c":"fig = go.Figure()\nfig.add_trace(go.Box(\n    y=df[\"CO2 Emissions(g\/km)\"],\n    name='CO2 Emissions ',\n    marker_color='royalblue',\n    boxmean='sd' # represent mean and standard deviation\n))\nfig.update_layout(title_text='CO2 Emissions',yaxis_title=\"Quantity\",title_x=0.5)\nfig.show()","a7c035f1":"fig = go.Figure(data=go.Violin(y=df[\"CO2 Emissions(g\/km)\"],\n                               box_visible=True,\n                               line_color='black',\n                               meanline_visible=True,\n                               fillcolor='lightseagreen', opacity=0.6,\n                               x0='CO2 Emissions'))\n\nfig.update_layout(yaxis_zeroline=False,yaxis_title=\"Quantity\",title_x=0.5)\nfig.show()","49b27a4d":"print(\"Correlation Matrix\")\nplt.rcParams['figure.figsize']=(8,6)\nsns.heatmap(df.corr(),cmap='coolwarm',linewidths=.5,fmt=\".2f\",annot = True);","a251a9ab":"df.drop(['Make','Model','Vehicle Class','Fuel Consumption City (L\/100 km)','Fuel Consumption Hwy (L\/100 km)','Transmission','Gears','Fuel Consumption Comb (mpg)'],inplace=True,axis=1)","c3fd8275":"df.head()","86886693":"df_N=df[df[\"Fuel Type\"]==\"N\"]\nindexs=df_N.index\ndf_N","4d3e0ff3":"# Kick Fuel Type N\nfor i in indexs:\n    df.drop(i, axis = 0,inplace = True)","7475fe15":"df[df[\"Fuel Type\"]==\"N\"]","e53deaf3":"dums = pd.get_dummies(df['Fuel Type'],prefix=\"Fuel_Type\",drop_first=True)\ndums[0:15]","0c0c4a51":"frames = [df, dums]\nresult = pd.concat(frames,axis=1)\nresult","1c8779fb":"result.drop(['Fuel Type'],inplace=True,axis=1)\nresult.head()","394a8168":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)","d3658574":"df_out=result.copy()\nclf.fit_predict(df_out)\ndf_scores = clf.negative_outlier_factor_","69fea0f3":"np.sort(df_scores)[0:25]\n","df4fd6a1":"threshold_value = np.sort(df_scores)[24]\nthreshold_value","dbb926bb":"Outlier_df= df_out[df_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","17f6bc54":"# Kick Outliers\nfor i in indexs:\n    result.drop(i, axis = 0,inplace = True)","731b6586":"result.info()","dc2fb7c3":"sample_df=result.sample(n=200,random_state=35)\nsample_df","1957573a":"indexs=sample_df.index\nindexs","630c3037":"# Kick Sample DataFrame\nfor i in indexs:\n    result.drop(i, axis = 0,inplace = True)","0863fc4f":"sample_df_Xtest=sample_df.drop(['CO2 Emissions(g\/km)'],axis=1)\nsample_df_ytest=sample_df[\"CO2 Emissions(g\/km)\"]","f3367642":"sample_df_Xtest = (sample_df_Xtest - np.min(sample_df_Xtest)) \/ (np.max(sample_df_Xtest) - np.min(sample_df_Xtest)).values\nsample_df_Xtest[\"Engine Size(L)\"]=sample_df_Xtest[\"Engine Size(L)\"].map(lambda x:round(x,2))\nsample_df_Xtest[\"Cylinders\"]=sample_df_Xtest[\"Cylinders\"].map(lambda x:round(x,2))\nsample_df_Xtest[\"Fuel Consumption Comb (L\/100 km)\"]=sample_df_Xtest[\"Fuel Consumption Comb (L\/100 km)\"].map(lambda x:round(x,2))\nsample_df_Xtest","2a13e36e":"X = result.drop(['CO2 Emissions(g\/km)'], axis= 1)\ny = result[\"CO2 Emissions(g\/km)\"]","dbc15ecb":"# Normalize\nX = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\n","0ce5a671":"X","586fe207":"X[\"Engine Size(L)\"]=X[\"Engine Size(L)\"].map(lambda x:round(x,2))\nX[\"Cylinders\"]=X[\"Cylinders\"].map(lambda x:round(x,2))\nX[\"Fuel Consumption Comb (L\/100 km)\"]=X[\"Fuel Consumption Comb (L\/100 km)\"].map(lambda x:round(x,2))\nX","5aea3cf5":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=42)\n\nprint(\"X_train\", X_train.shape)\n\nprint(\"y_train\",y_train.shape)\n\nprint(\"X_test\",X_test.shape)\n\nprint(\"y_test\",y_test.shape)","a6671596":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nmodel = lm.fit(X_train, y_train)","b9f91070":"model.intercept_","8b10729b":"model.coef_","49f53719":"from sklearn.metrics import mean_squared_error, r2_score\nnp.sqrt(mean_squared_error(y_train, model.predict(X_train)))","ea26e9f4":"np.sqrt(mean_squared_error(y_test, model.predict(X_test)))","788c06c4":"model.score(X_train, y_train)","e57644ec":"cross_val_score(model, X_train, y_train, cv = 10, scoring = \"r2\").mean()","264ac300":"pred=model.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Lin=result_pred.rename(columns={0:'Pred_Linear',1:'Real_Value'})\nresult_pred_Lin[\"Pred_Linear\"]=result_pred_Lin[\"Pred_Linear\"].map(lambda x:round(x,2))\nresult_pred_Lin[\"Diff\"]=result_pred_Lin[\"Pred_Linear\"]-result_pred_Lin[\"Real_Value\"]\nresult_pred_Lin[\"Diff\"]=result_pred_Lin[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Lin[\"Diff\"]).mean())\nresult_pred_Lin.head(20)\n","f23a17df":"model.score(sample_df_Xtest, sample_df_ytest)","92b2f1a6":"from sklearn.linear_model import Ridge","9269829c":"ridge_model = Ridge(alpha = 0.1).fit(X_train, y_train)","7cb9a8c1":"ridge_model.coef_","21827e6a":"y_pred = ridge_model.predict(X_test)","217e2f2f":"np.sqrt(mean_squared_error(y_test, y_pred))","2cc37584":"lambdalar = 10**np.linspace(10,-2,100)*0.5 ","6cefe9a7":"from sklearn.linear_model import RidgeCV\nridge_cv = RidgeCV(alphas = lambdalar, \n                   scoring = \"neg_mean_squared_error\",\n                   normalize = True)","6e58d052":"ridge_cv.fit(X_train, y_train)","a7e296e7":"ridge_cv.alpha_","608bfcb2":"ridge_tuned = Ridge(alpha = ridge_cv.alpha_, \n                   normalize = True).fit(X_train,y_train)","b051f910":"np.sqrt(mean_squared_error(y_test, ridge_tuned.predict(X_test)))","7b14ed66":"ridge_tuned.score(sample_df_Xtest, sample_df_ytest)","5e399e09":"pred=ridge_tuned.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Rid=result_pred.rename(columns={0:'Pred_Ridge',1:'Real'})\nresult_pred_Rid[\"Pred_Ridge\"]=result_pred_Rid[\"Pred_Ridge\"].map(lambda x:round(x,2))\nresult_pred_Rid[\"Diff\"]=result_pred_Rid[\"Pred_Ridge\"]-result_pred_Rid[\"Real\"]\nresult_pred_Rid[\"Diff\"]=result_pred_Rid[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Rid[\"Diff\"]).mean())\nresult_pred_Rid.head(20)","78f66f01":"from sklearn.linear_model import Lasso\nlasso_model = Lasso(alpha = 0.1).fit(X_train, y_train)","c56fc018":"lasso_model.coef_","559e1624":"y_pred = lasso_model.predict(X_test)","caf0d566":"np.sqrt(mean_squared_error(y_test, y_pred))","03d5944f":"from sklearn.linear_model import LassoCV\nlasso_cv_model = LassoCV(alphas = None, \n                         cv = 10, \n                         max_iter = 10000, \n                         normalize = True)","050b5da4":"lasso_cv_model.fit(X_train,y_train)","8bd47a0d":"lasso_tuned = Lasso(alpha = lasso_cv_model.alpha_)","ed9f29dd":"lasso_tuned.fit(X_train, y_train)","247e6fb6":"y_pred = lasso_tuned.predict(X_test)","8d48a51c":"np.sqrt(mean_squared_error(y_test, y_pred))","99772da6":"lasso_tuned.score(sample_df_Xtest, sample_df_ytest)","436097d0":"pred=lasso_tuned.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Las=result_pred.rename(columns={0:'Pred_Lasso',1:'Real'})\nresult_pred_Las[\"Pred_Lasso\"]=result_pred_Las[\"Pred_Lasso\"].map(lambda x:round(x,2))\nresult_pred_Las[\"Diff\"]=result_pred_Las[\"Pred_Lasso\"]-result_pred_Las[\"Real\"]\nresult_pred_Las[\"Diff\"]=result_pred_Las[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Las[\"Diff\"]).mean())\nresult_pred_Las.head(20)","fb5fd9ea":"from sklearn.neighbors import KNeighborsRegressor","084955d4":"knn_model = KNeighborsRegressor().fit(X_train, y_train)","efa0f9fd":"knn_model","74b9509e":"y_pred = knn_model.predict(X_test)","6b825dcb":"np.sqrt(mean_squared_error(y_test, y_pred))","7876d671":"knn_model.score(X_train, y_train)","fd15b67f":"knn_model.score(sample_df_Xtest, sample_df_ytest)","1b9e55f4":"from sklearn.model_selection import GridSearchCV\nknn_params = {'n_neighbors': np.arange(1,30,1)}\nknn = KNeighborsRegressor()\nknn_cv_model = GridSearchCV(knn, knn_params, cv = 10)","dfb1bd45":"knn_cv_model.fit(X_train, y_train)","845f63eb":"knn_cv_model.best_params_[\"n_neighbors\"]","4b1cf0ad":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"])","52de546a":"knn_tuned.fit(X_train, y_train)","357f37d1":"np.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test)))","4b8bead2":"knn_tuned.score(sample_df_Xtest, sample_df_ytest)","7c4151c5":"pred=knn_tuned.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Knn=result_pred.rename(columns={0:'Pred_KNN',1:'Real'})\nresult_pred_Knn[\"Pred_KNN\"]=result_pred_Knn[\"Pred_KNN\"].map(lambda x:round(x,2))\nresult_pred_Knn[\"Diff\"]=result_pred_Knn[\"Pred_KNN\"]-result_pred_Knn[\"Real\"]\nresult_pred_Knn[\"Diff\"]=result_pred_Knn[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Knn[\"Diff\"]).mean())\nresult_pred_Knn.head(20)","f58ab0e3":"from sklearn.svm import SVR","63537f68":"svr_model = SVR(\"rbf\").fit(X_train, y_train)","d4ff8955":"y_pred = svr_model.predict(X_test)","043f14a6":"np.sqrt(mean_squared_error(y_test, y_pred))","710c57ed":"svr_params = {\"C\": [0.01, 0.1,0.4,5,10,20,30,40,50]}\nsvr_cv_model = GridSearchCV(svr_model,svr_params, cv = 10)\nsvr_cv_model.fit(X_train, y_train)","f994877d":"pd.Series(svr_cv_model.best_params_)[0]","dd0fb003":"svr_tuned = SVR(\"rbf\", C = pd.Series(svr_cv_model.best_params_)[0]).fit(X_train, \n                                                                        y_train)","95cbd5b1":"y_pred = svr_tuned.predict(X_test)","1aa36c82":"np.sqrt(mean_squared_error(y_test, y_pred))","ab9fbfb6":"svr_tuned.score(sample_df_Xtest, sample_df_ytest)","39bb4872":"pred=svr_tuned.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Svr=result_pred.rename(columns={0:'Pred_SVR',1:'Real'})\nresult_pred_Svr[\"Pred_SVR\"]=result_pred_Svr[\"Pred_SVR\"].map(lambda x:round(x,2))\nresult_pred_Svr[\"Diff\"]=result_pred_Svr[\"Pred_SVR\"]-result_pred_Svr[\"Real\"]\nresult_pred_Svr[\"Diff\"]=result_pred_Svr[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Svr[\"Diff\"]).mean())\nresult_pred_Svr.head(20)","670c7046":"from sklearn.ensemble import RandomForestRegressor","0a9d5d59":"rf_model = RandomForestRegressor(random_state = 42)","0c16f24e":"rf_model.fit(X_train, y_train)","d2cbe316":"y_pred = rf_model.predict(X_test)","52f063e1":"np.sqrt(mean_squared_error(y_test, y_pred))","057ccb14":"rf_params = {'max_depth': list(range(1,10)),\n            'max_features': [3,5,10,15],\n            'n_estimators' : [100, 200, 500, 750]}","69ed4b8a":"rf_model = RandomForestRegressor(random_state = 42)","af079d5d":"rf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                            n_jobs = -1,\n                          verbose = 2)","6905fffb":"rf_cv_model.fit(X_train, y_train)","215aece1":"rf_cv_model.best_params_","7b0731ea":"rf_tuned = RandomForestRegressor(max_depth  = 9, \n                                 max_features = 5, \n                                 n_estimators =750)","ef11a0d9":"rf_tuned.fit(X_train, y_train)","5587589c":"y_pred = rf_tuned.predict(X_test)","bbd95207":"np.sqrt(mean_squared_error(y_test, y_pred))","b9650142":"Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                         index = X_train.columns)","53f3dd47":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","a9bc2702":"rf_tuned.score(sample_df_Xtest, sample_df_ytest)","58c52128":"pred=rf_tuned.predict(sample_df_Xtest)\nframes = [pred, sample_df_ytest.values]\nresult_pred = pd.DataFrame(data=frames)\nresult_pred=result_pred.T\n\nresult_pred_Rf=result_pred.rename(columns={0:'Pred_RF',1:'Real'})\nresult_pred_Rf[\"Pred_RF\"]=result_pred_Rf[\"Pred_RF\"].map(lambda x:round(x,2))\nresult_pred_Rf[\"Diff\"]=result_pred_Rf[\"Pred_RF\"]-result_pred_Rf[\"Real\"]\nresult_pred_Rf[\"Diff\"]=result_pred_Rf[\"Diff\"]\nprint(\"Mean Diff: \",abs(result_pred_Rf[\"Diff\"]).mean())\nresult_pred_Rf.head(20)","79a2860b":"result = pd.concat([result_pred_Lin,result_pred_Rid, result_pred_Las,\n                    result_pred_Knn, result_pred_Svr, result_pred_Rf,\n                    ],\n                   axis=1,\n                   sort=False)\nfinal_result=result[\"Real_Value\"]\nfinal_result=pd.DataFrame(final_result)\nresult.drop(['Diff',\"Real\"],inplace=True,axis=1)\nfinal_result=pd.concat([final_result,result],axis=1)","090889dd":"colors=['lightblue','lightpink','lightgreen','yellow',\n        'DarkSalmon','Khaki','LightCoral']\n        \nfig = go.Figure(data=[go.Table(header=dict(values=['Real Value', 'Pred Linear','Pred Ridge',\n'Pred Lasso','Pred KNN','Pred SVR','Pred RF'],\n\nline_color='white', fill_color='LightSlateGray',\nalign='center',font=dict(color='white', size=12)\n                           ),\n                               \n cells=dict( values=[final_result['Real_Value'],\n     final_result['Pred_Linear'],\n      final_result['Pred_Ridge'],\n      final_result['Pred_Lasso'],\n    final_result['Pred_KNN'],\n       final_result['Pred_SVR'],\n      final_result['Pred_RF'],\n        ],\n      line_color=colors, fill_color=colors,\n     align='center', font=dict(color='#660033', size=11))\n                  )])\n                      \nfig.show()","e473ed74":" # <a id='3'> 3.Exploratory Data Analysis<\/a>","1965817f":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/loan-data-visualisation-eda-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Loan Data Visualisation & EDA & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/book-review-ratings-data-analysis-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Book Review Ratings Analysis & Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/cs-books-eda-visualization-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">CS Books EDA & Visualization & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/insurance-prediction-lgbm-gbm-xgboost-eda\" class=\"btn btn-primary\" style=\"color:white;\">Insurance Prediction- LGBM,GBM,XGBoost EDA<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/direct-marketing-eda-visualization-ml\" class=\"btn btn-primary\" style=\"color:white;\">Direct Marketing EDA & Visualization & ML<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/basketball-players-stats-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Basketball Players Stats Data Visualisation<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/lego-transfer-cnn-classification\" class=\"btn btn-primary\" style=\"color:white;\">Lego Transfer-CNN Classification<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/face-image-classification\" class=\"btn btn-primary\" style=\"color:white;\">Face Image Classification<\/a>\n\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/fish-market-data-visualisation-machine-learning\" class=\"btn btn-primary\" style=\"color:white;\">Fish Market Data Visualisation & Machine Learning<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/seabron-plotly-for-beginners\" class=\"btn btn-primary\" style=\"color:white;\">Seabron & Plotly For Beginners<\/a>\n\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/women-s-football-results-visualization\" class=\"btn btn-primary\" style=\"color:white;\">Women's Football Results Visualization<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>","8fc3f6ac":"## <a id='25'> 23.Random Forest <\/a>","7bd113a3":"## <a id='10'> 10.Transmission <\/a>","0b0a0b5d":"## <a id='55'> <font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>Reference<\/b><\/font><br>\n* https:\/\/plotly.com\/python\/\n* https:\/\/www.displayr.com\/what-is-a-correlation-matrix\/ <br>\n    \n* https:\/\/towardsdatascience.com\/exploratory-data-analysis-8fc1cb20fd15 <br>\n* https:\/\/r4ds.had.co.nz\/exploratory-data-analysis.html#introduction-3  <br>  ","059e07e8":"![](https:\/\/media.giphy.com\/media\/3o7aD3LftJ423GBsVG\/giphy.gif)\n\nThis dataset captures the details of how CO2 emissions by a vehicle can vary with the different features. The dataset has been taken from Canada Government official open data website. This is a compiled version. This contains data over a period of 7 years.\nThere are total 7385 rows and 12 columns. There are few abbreviations that has been used to describe the features. I am listing them out here. The same can be found in the Data Description sheet.\n\nModel \n4WD\/4X4 = Four-wheel drive <br>\nAWD = All-wheel drive <br>\nFFV = Flexible-fuel vehicle <br>\nSWB = Short wheelbase <br> \nLWB = Long wheelbase <br>\nEWB = Extended wheelbase  <br>\n\nTransmission\nA = Automatic <br>\nAM = Automated manual <br>\nAS = Automatic with select shift <br>\nAV = Continuously variable <br>\nM = Manual<br>\n3 - 10 = Number of gears <br>\n\nFuel type\nX = Regular gasoline <br>\nZ = Premium gasoline <br>\nD = Diesel <br>\nE = Ethanol (E85) <br>\nN = Natural gas <br>\n\nMake= Company of the vehicle <br>\nModel= Car model <br>\nVehicle Class= Class of vehicle depending on their utility, capacity and weight <br>\nEngine Size = Size of engine used in Litre <br>\nCylinders= Number of cylinders <br>\nTransmission = Transmission type with number of gears <br>\nFuel type =Type of Fuel used <br>\nFuel Consumption City=Fuel consumption in city roads (L\/100 km) <br>\nFuel Consumption Hwy=Fuel consumption in Hwy roads (L\/100 km) <br>\nFuel Consumption Comb=The combined fuel consumption (55% city, 45% highway) is shown in L\/100 km <br>\nFuel Consumption Comb mpg =The combined fuel consumption in both city and highway is shown in mile per gallon(mpg)<br> ","f5dfaf66":"## <a id='15'> 15.CO2 Emissions(g\/km) <\/a>","8962f468":"## <a id='14'> 14.Fuel Consumption Comb (mpg) <\/a>","fa728a08":"## <a id='11'> 11.Gears <\/a>","5476878f":"* Dataset comprises of 7385 observations and 12 characteristics.<br>\n","7b06c4b0":"## <a id='7'> 7.Vehicle Class <\/a>","134844d0":"* Data has only float,object and integer values.<br>\n","c20991c2":"## <a id='16'> 16.Machine Learning <\/a>\n![](https:\/\/miro.medium.com\/max\/700\/1*1NNRxaTDtmZFF51JZOd-Cw.jpeg)\n\n* Applications range from datamining programs that discover general rules in large data sets, to information filtering systems that automatically learn users' interests.","79a1a007":"## Describe Function\n* Generate descriptive statistics.<br>\n* Descriptive statistics include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values.<br>\n* The **describe**() function in pandas is very handy\nin getting various **summary statistics**.<br>\n* This function returns the **count**, **mean**, **standard deviation**,\n**minimum** and **maximum** **values** and the **quantiles of the data**.<br>","227afe6e":"* Exploratory Data Analysis refers to the critical process of performing \ninitial investigations on data so as to discover patterns,to spot anomalies, \nto test hypothesis and to check assumptions with\nthe help of summary statistics and graphical representations. <br>\n\n* Your goal during EDA is to develop an understanding of your data. The easiest way to do this is to use questions as tools to guide your investigation. When you ask a question, the question focuses your attention on a specific part of your dataset and helps you decide which graphs, models, or transformations to make.<br>\n\n* Generate questions about your data.<br>\n\n* Search for answers by visualising, transforming, and modelling your data. <br>\n\n* Use what you learn to refine your questions and\/or generate new questions. <br>\n\n* EDA is not a formal process with a strict set of rules.<br> \n* More than anything, EDA  is a state of mind.<br> \n* During the initial phases of EDA you should feel free to investigate every idea that occurs to you.<br> \n* Some of these ideas will pan out, and some will be dead ends.<br>\n* As your exploration continues, you will home in on a few particularly productive areas that you\u2019ll eventually write up and communicate to others.<br>\n\n* Let's start exploring our data","7c6065c0":"## Tuning","5796c3ce":"## <a id='21'> 19.Ridge Regression <\/a>","f50563ce":"# <a id='1'> 1. Importing Libraries <\/a>","d9fa0d37":"## <a id='27'>25.Conclusion <\/a>\n\n* As you can see our models are overfeeding.<br>\n* Learning is less.<br>\n* We can create new data columns. <br>\n* We can drop the columns that are not important. <br>\n* We need do feature engineering.<br>\n\n\n**Models**\n\n![ ](https:\/\/media.giphy.com\/media\/l22ysLe54hZP0wubek\/giphy.gif) ","ef2ea6e9":"## <a id='24'> 22.SVR <\/a>","16343fa4":"# Table of contents\n\n<a href='#1'>1. Importing Libraries and Dataset <\/a> <br>\n<a href='#2'>2. Dataset <\/a> <br>\n<a href='#3'>3. Exploratory Data Analysis <\/a> <br>\n<a href='#4'>4. Make<\/a> <br>\n<a href='#5'>5. Ford Model <\/a> <br>\n<a href='#6'>6. Model<\/a> <br>\n<a href='#7'>7. Vehicle Class <\/a> <br>\n<a href='#8'>8. Engine Size <\/a> <br>\n<a href='#9'>9. Cylinders <\/a> <br>\n<a href='#10'>10. Transmission <\/a> <br>\n<a href='#11'>11. Gears <\/a> <br>\n<a href='#12'>12. Fuel Type <\/a> <br>\n<a href='#13'>13. Fuel Consumption <\/a> <br>\n<a href='#14'>14. Fuel Consumption Comb (mpg) <\/a> <br>\n<a href='#15'>15. CO2 Emissions(g\/km) <\/a> <br>\n<a href='#16'>16. Machine Learning <\/a> <br>\n<a href='#17'>16.1 Data Preprocessing <\/a> <br>\n<a href='#18'>16.2 Local Outlier Factor <\/a> <br>\n<a href='#19'>17. Sample DataFrame <\/a> <br>\n<a href='#20'>18. Linear Regression <\/a> <br>\n<a href='#21'>19. Ridge  Regression <\/a> <br>\n<a href='#22'>20. Lasso Regression <\/a> <br>\n<a href='#23'>21. SVR <\/a> <br>\n<a href='#24'>22. KNN <\/a> <br>\n<a href='#25'>23. Random Forest<\/a> <br>\n<a href='#26'>24. Model Comparison  <\/a> <br>\n<a href='#27'>25. Conclusion <\/a> <br>\n<a href='#28'>26. End Note <\/a> <br>","e30ca687":"## <a id='8'> 8.Engine Size <\/a>","0705faf6":"## <a id='6'> 6.Model <\/a>","06fa06da":"## <a id='26'>24.Model Comparison  <\/a>","f0c1dda6":"* Variable column has null\/missing values. <br>","a0ca18b3":"## <a id='5'> 5.Ford Model <\/a>","05d58362":"## <a id='4'> 4.Make <\/a>\n\n* How is the make distribution? <br>","45289360":"## <a id='22'> 20.Lasso Regression <\/a>","dfb5fa39":"## <a id='20'> 18.Linear Regression <\/a>","0d74836b":"## <a id='17'> 16.1 Data Preprocessing<\/a>","20a66019":"## <a id='19'> 17.Sample DataFrame<\/a>","297fab48":"## <a id='23'> 21.KNN <\/a>","0d0794fe":" ## <a id='18'> 16.2 Local Outlier Factor<\/a>\n\n![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/LOF-idea.svg)\n*  The local outlier factor is based on a concept of a local density, where locality is given by k nearest neighbors, whose distance is used to estimate the density. By comparing the local density of an object to the local densities of its neighbors, one can identify regions of similar density, and points that have a substantially lower density than their neighbors. These are considered to be outliers.","567f242e":"## <a id='9'> 9.Cylinders <\/a>","22ba9960":"##  Normalize","358ecbda":"* Fuel type\n* X = Regular gasoline\n* Z = Premium gasoline\n* D = Diesel\n* E = Ethanol (E85)\n* N = Natural gas (none)","2b93f856":"## <a id='13'> 13.Fuel Consumption <\/a>","361f73ec":"## <a id='12'> 12.Fuel Type <\/a>","0f9aca98":" # <a id='2'> 2. Data Set<\/a>","98fd390a":"## <a id='28'><font color=\"LIGHTSEAGREEN\" size=+2.5><b>26.End Note<\/b><\/font> <\/a>\n\nI hope you enjoyed my kernel.If you like this notebook, an <font color=\"DARKCYAN\"><b>Upvote<\/b><\/font> would be great ! :)\n\nI am new with data science. Please <font color=\"GREEN\"><b>comments<\/b><\/font> me your <font color=\"GREEN\"><b>feedbacks<\/b><\/font> to help me improve myself. \n![](https:\/\/media.giphy.com\/media\/3oEdva9BUHPIs2SkGk\/giphy.gif)    \n","4b05feb0":"* We have some duplicated data.\n* If u want u can drop all duplicate data\n* I dont drop data"}}