{"cell_type":{"58f0433e":"code","734a6ad5":"code","bc7e51fd":"code","760099e8":"code","b6bcdd21":"code","aa5f018c":"code","56810c3d":"code","2f83b3bd":"code","d87ffdb1":"code","5c83803e":"code","04371fd2":"code","f07a13db":"markdown"},"source":{"58f0433e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_error\n","734a6ad5":"!pip install autoviz\n!pip install xlrd","bc7e51fd":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","760099e8":"ff = AV.AutoViz('..\/input\/30-days-of-ml\/train.csv')","b6bcdd21":"df_train = pd.read_csv('..\/input\/5-folds\/train_5_folds.csv')\ndf_test = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')\nsample_submission = pd.read_csv('..\/input\/30-days-of-ml\/sample_submission.csv')\n\n","aa5f018c":"features = [col for col in df_train.columns if col not in (\"id\", 'target', 'kfold')]","56810c3d":"object_cols = [col for col in features if 'cat' in col]","2f83b3bd":"df_test = df_test[features]","d87ffdb1":"from xgboost import XGBRegressor\nfrom xgboost import plot_tree\nxgb_params = {\n    'n_estimators': 1000,\n    'learning_rate': 0.15,\n    'subsample': 0.95,\n    'colsample_bytree': 0.10,\n    'max_depth': 3,\n    'booster': 'gbtree',\n    'reg_lambda': 66.1,\n    'reg_alpha': 15.9,\n    'random_state': 42\n}","5c83803e":"final_predictions = []\nfor fold in range(5):\n    xtrain =  df_train[df_train.kfold != fold].reset_index(drop=True)\n    xvalid = df_train[df_train.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[features]\n    xvalid = xvalid[features]\n    \n    ordinal_encoder = OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    model = XGBRegressor(**xgb_params)\n    model.fit(xtrain, ytrain)\n    \n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    print(f\"fold: {fold}, rmse: {mean_squared_error(yvalid, preds_valid, squared=False)}\")","04371fd2":"preds = np.mean(np.column_stack(final_predictions), axis=1)\nsample_submission.target = preds\nsample_submission.to_csv(\"submission.csv\", index=False)","f07a13db":"# KFold\ncreated same as abhiske takur"}}