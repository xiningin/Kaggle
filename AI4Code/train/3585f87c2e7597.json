{"cell_type":{"6a063e1b":"code","ac5db080":"code","093a6fbd":"code","8f786b2b":"code","21bf4b29":"code","3a01759d":"code","f70d7c2f":"code","b8829c18":"code","db30f407":"code","e6303273":"code","aeefab03":"code","8a6a380f":"code","ecc1260c":"code","281d1b16":"code","55eae800":"code","7faa7c90":"code","2c7eaa60":"code","8cb8e60b":"code","b44bfdb7":"code","68ceac97":"code","051de326":"code","df735d64":"code","c815428d":"code","1a786775":"code","6613fb30":"code","aedfafda":"code","12209bdc":"code","1eadb852":"code","72bc680f":"code","e450603c":"code","84f016ef":"code","43c1dbcc":"code","086a8926":"code","6e29fc52":"code","7d863b7f":"code","2df775dc":"code","7c903eb3":"code","235dd1f1":"code","a7671190":"code","7b6be2d3":"code","9da3b996":"markdown","29133a22":"markdown","94ed6d2d":"markdown","4659b84f":"markdown","b292cda7":"markdown","29bcfc8e":"markdown","596c1e8a":"markdown","661b4ef7":"markdown","c122edc3":"markdown","a00320d8":"markdown","6a449c1f":"markdown","d393832b":"markdown","ec005fe7":"markdown","46d658dc":"markdown","eec4bc68":"markdown","4f2908c3":"markdown","e6366cf7":"markdown","0dd0890a":"markdown","63dba424":"markdown","1c1760a1":"markdown","9b444696":"markdown","e2db7833":"markdown","ea14dde0":"markdown","94d10c4a":"markdown","183374e7":"markdown","0086172e":"markdown","02cf0208":"markdown","13e855cc":"markdown"},"source":{"6a063e1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ac5db080":"titanic_train = pd.read_csv(\"..\/input\/train.csv\")\ntitanic_test = pd.read_csv(\"..\/input\/test.csv\")","093a6fbd":"titanic_train.info()","8f786b2b":"titanic_test.info()","21bf4b29":"#Let's set the survived to -1 and then we combine both datasets\ntitanic_test[\"Survived\"] = -1\ntitanic = titanic_train.append(titanic_test)","3a01759d":"#let's check it now\ntitanic.Survived.value_counts()","f70d7c2f":"titanic.sample(3)","b8829c18":"titanic[[\"Age\",\"Fare\"]].boxplot()","db30f407":"titanic[titanic.Fare > 500]","e6303273":"temp = titanic_train.groupby(\"Sex\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"Sex\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"GENDER _ SURVIVAL\")","aeefab03":"temp = titanic[(titanic.Survived!=-1)].groupby(\"SibSp\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"SibSp\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"SibSp - Survival rate\")\n","8a6a380f":"temp = titanic[(titanic.Survived!=-1)].groupby(\"Parch\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"Parch\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"Parch vs Survival Rate\")","ecc1260c":"titanic.sample()","281d1b16":"titanic.drop(columns=[\"Ticket\",\"PassengerId\",\"Cabin\"], inplace = True)","55eae800":"titanic.isna().sum()","7faa7c90":"titanic[titanic.Age.isna()].head(3)","2c7eaa60":"\"\"\"\nStoring the titles of passengers in title list and then adding it to titanic dataframe\n\"\"\"\ntitle = []\nfor item in titanic.Name:\n    title.append(item.split(',')[1].split('.')[0].strip())\nprint (title[:3])\nprint (titanic.Name[:3])\ntitanic[\"title\"] = title\n","8cb8e60b":"titanic.title.value_counts()","b44bfdb7":"using = dict(titanic.groupby(\"title\").mean()[\"Age\"])\nsns.barplot(x = list(using.keys()), y = list(using.values()))\nplt.xticks(rotation = 90)","68ceac97":"final_age = []\nfor i in range(len(titanic)):\n    age = titanic.iloc[i,0]\n    if np.isnan(age):\n        age = using[titanic.iloc[i,-1]]\n    final_age.append(age)\ntitanic[\"Age\"] = final_age","051de326":"titanic.isna().sum()","df735d64":"sns.countplot(x=\"Embarked\", data = titanic)","c815428d":"titanic.Embarked.fillna(\"S\",inplace=True)","1a786775":"titanic.isna().sum()","6613fb30":"sns.barplot(x=\"Embarked\",y=\"Fare\",hue = \"Pclass\",data = titanic)","aedfafda":"titanic[titanic.Fare.isna()]","12209bdc":"titanic.Fare.fillna(18,inplace=True)\ntitanic.isna().sum()","1eadb852":"temp = titanic[(titanic.Survived!=-1)].groupby(\"Parch\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"Parch\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"Parch vs Survival Rate\")","72bc680f":"Parch = titanic.Parch.tolist()\nis_par = [0 if item == 0 else 1 for item in Parch ]\ntitanic[\"is_par\"] = is_par","e450603c":"temp = titanic[(titanic.Survived!=-1)].groupby(\"SibSp\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"SibSp\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"SibSp - Survival rate\")","84f016ef":"SibSp = titanic.SibSp.tolist()\nhas_sib = [0 if item == 0 else 1 for item in SibSp ]\ntitanic[\"has_sib\"] = has_sib","43c1dbcc":"sns.countplot(x = \"Embarked\", hue = \"Survived\",data = titanic[titanic.Survived != -1])","086a8926":"temp = titanic[(titanic.Survived!=-1)].groupby(\"Pclass\")[\"Survived\"].value_counts(normalize = True).mul(100).reset_index(name = \"percentage\")\nsns.barplot(x=\"Pclass\",y = \"percentage\",hue = \"Survived\",data = temp).set_title(\"SibSp - Survival rate\")","6e29fc52":"titanic.sample(4)","7d863b7f":"titanic[titanic.Survived!=-1].groupby(\"Survived\").mean()[[\"Age\",\"Fare\"]]","2df775dc":"titanic.drop(columns=[\"Name\",\"Parch\",\"SibSp\",\"title\"], inplace=True)\ntitanic.sample()","7c903eb3":"titanic = pd.get_dummies(titanic, columns=[\"Embarked\",\"Pclass\"])\ntitanic.Sex = titanic.Sex.map({\"male\":1,\"female\":0})\ntitanic.sample()","235dd1f1":"titanic_training_y = titanic[titanic.Survived!=-1].Survived\ntitanic_training_x = titanic[titanic.Survived!=-1].drop(columns = [\"Survived\"])\nfrom sklearn.model_selection import train_test_split\nfor random in range(15):\n    train_x, test_x, train_y, test_y = train_test_split(titanic_training_x, titanic_training_y, test_size = 0.1)\n    from xgboost import XGBClassifier\n    from sklearn.metrics import accuracy_score\n    scores = []\n    for i in range(5,15):\n        model = XGBClassifier(max_depth = i)\n        model.fit(train_x, train_y)\n        target = model.predict(test_x)\n        score = accuracy_score(test_y, target)\n        scores.append(score)\n    print(\"best scores: \",max(scores), \" at depth : \",scores.index(max(scores))+5)","a7671190":"titanic_training_y = titanic[titanic.Survived!=-1].Survived\ntitanic_training_x = titanic[titanic.Survived!=-1].drop(columns = [\"Survived\"])\ntest_x = titanic[titanic.Survived==-1].drop(columns = [\"Survived\"])\nmodel = XGBClassifier(max_depth = i)\nmodel.fit(titanic_training_x, titanic_training_y)\ntarget = model.predict(test_x)\nprint (target[:4])\nprint (test_x[:4])","7b6be2d3":"titanic_test = pd.read_csv(\"..\/input\/test.csv\")\ntitanic_test = pd.DataFrame(titanic_test[\"PassengerId\"])\ntitanic_test[\"Survived\"] = target\ntitanic_test.head()\ntitanic_test.to_csv(\"predictions.csv\")","9da3b996":"Let's drop the columns that are not necessary ","29133a22":"So now, the data is clean. Let's see the analysis","94ed6d2d":"Pclass \n* 1 -> 60% have survived\n* 2 -> 45% have survived\n* 3 -> 23% have survived","4659b84f":"Let's apply the same for sibling also","b292cda7":"As we can see, there are null values in both train adn test datasets","29bcfc8e":"Let's understand Parch,SibsP more clearly","596c1e8a":"So, we consider Age and Fare attributes also for modeling.","661b4ef7":"***Embarked***","c122edc3":"As we see, **80%** of **dead** passengers are **male** and around **75%** of **alive** passengers are **female**","a00320d8":"let's check some details","6a449c1f":"So now, \nAge,Fare are continuous variables and remaining are categorical. So let's plot boxplot for continuos variables and see whether there are any outliers","d393832b":"Is there any better approach to improve the accuracy?\nCan anyone guide me in building which model gonna give the better accuracy?? Also regarding the XGBoost, how to select the best parameters for building the model??","ec005fe7":"***AGE***\n* So, we have to fill the Nan values of Age column. We can do this by \n1. mean\/median\/mode imputing where we can generalize the values and just fill them.\n2. Either by using Interpolation. Here we can't interpolate data since there's no order to follow.\n3. There may be some other methods to fill AGE attribute, like, Averaging the age based on Embark and Fare and Gender.\n4. Here, I'm considering to fill the Nan Values of AGE using the **Title** of Name. For Example, Moran, **Mr**. James, here \"Mr\" is the title name and we can allocate him the Average of all passengers bearing this Title. ","46d658dc":"Process :\nData Cleaning, Feature Engineering and then building the model.","eec4bc68":"Let's create is_par column, where if Parch!=0, is_par = 1, else is_par = 0","4f2908c3":"Passengers whose fare is above 500, have survived the Titanic Disaster.","e6366cf7":"Different Passengers have different Age based on title. So, our assumption of filling Nan values is correct. Let's update Age accordingly","0dd0890a":"Everything is fine. These outliers can be understood. The Fare > 500 is outlier. They might bought the ticket lately.\n\n**NOTE **: np.nan values are removed by defalut when we plot boxplot. I will fill those nan values in coming lines","63dba424":"**ANALYSIS FOR CONTINUOUS VARIABLES**","1c1760a1":"***Fare***","9b444696":"For building the model, let's finalize the features.","e2db7833":"So based on the above plot, \n*  Thomas Embarked at S and Pclass ticket is of type 3, So let's assign Fare value as 18","ea14dde0":"**CATEGORICAL DATA ANALYSIS**","94d10c4a":"As you expected, filling with \"S\" for nan values is correct.","183374e7":"I would like to take depth as 6, and find the predictions","0086172e":"From above plots we can understand that,\n1. SibSp - (1,2) have good chances of survival\n2. Parch - (1,2,3) have better chances of survival","02cf0208":"So now, The data is ready for modeling","13e855cc":"Let's fill null values and refine our data"}}