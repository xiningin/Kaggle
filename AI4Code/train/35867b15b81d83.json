{"cell_type":{"6664ab16":"code","842df413":"code","36bea889":"code","8b1f7eed":"code","41a35286":"code","4d922a1b":"code","ae30335f":"code","0f8b2c05":"code","185e8448":"code","ad3f7327":"code","fbcf7aef":"code","0e74a3f5":"code","c9def521":"code","e92cbc70":"code","162f50ce":"code","d7508551":"code","5934692d":"code","6fab11fd":"code","e9730ffe":"code","496f2d29":"code","3544816c":"code","ecaafc14":"code","61a641b2":"code","7de86d39":"code","d84f11cc":"code","3faad5c3":"code","3909b08d":"code","8b993e27":"markdown","e1a1dff8":"markdown","b45b8736":"markdown","238900f0":"markdown","15621e73":"markdown","80a4e36d":"markdown","71a6d42a":"markdown","fa1bdde9":"markdown","94ffd7c4":"markdown"},"source":{"6664ab16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docke r image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","842df413":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","36bea889":"df = pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_train.csv\")","8b1f7eed":"df.head()","41a35286":"labels = \"ABCDEFGHIKLMNOPQRSTUVWXY\"\ncounts = [0,1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nmapping = dict(zip(counts, labels))","4d922a1b":"df['label'] = df['label'].map(mapping)","ae30335f":"df['label']","0f8b2c05":"\ndf['label'].value_counts().plot.bar()","185e8448":"sample = df.drop(\"label\",axis=1).values[0]\nlabel = df['label'].values[0]\n\nprint(\"Sample has a label of: \",label)","ad3f7327":"sample.reshape(28,28).shape","fbcf7aef":"plt.title(f\"Label is: {label}\")\nplt.imshow(sample.reshape(28,28),cmap='binary')\nplt.show()","0e74a3f5":"## function for plotting the images from the data\n\ndef plot_images(df,n,label):\n    for i in range(n**2):\n        random_value = np.random.randint(len(df[label]))\n        if random_value not in [9, 25]:\n            plt.subplot(n, n, i+1)\n            X = df.loc[random_value].drop('label').values.astype(\"int\").reshape(28,28)\n            plt.imshow(X, cmap='binary')\n            plt.title(str(df[label][random_value]),color=\"green\", fontsize=28)\n            plt.axis(\"off\")\n            plt.subplots_adjust(left=1, right=4.5, bottom=.5, top=2.5)\n    plt.figure(figsize=(5,5))\n    plt.show()","c9def521":"plot_images(df,4,'label')","e92cbc70":"df.info()","162f50ce":"df.describe()","d7508551":"df.isnull().sum()","5934692d":"from sklearn.model_selection import train_test_split\n\nX = df.drop('label',axis=1).values\ny = df['label'].values\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=48,test_size=0.25)","6fab11fd":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\nclf.fit(X_train,y_train)","e9730ffe":"sample = X_test[0]","496f2d29":"clf.predict([sample])","3544816c":"y_test[0]","ecaafc14":"def plot_image(data,label):\n    image =  data.reshape(28,28)\n    plt.imshow(image,cmap='binary')\n    plt.title(f\"{label}\")\n    plt.show()","61a641b2":"plot_image(sample,y_test[0])","7de86d39":"clf.score(X_train,y_train)","d84f11cc":"clf.score(X_test,y_test)","3faad5c3":"plot_image(X_test[12],y_test[12])","3909b08d":"plot_image(X_test[44],y_test[44])","8b993e27":"# Sample plotting ","e1a1dff8":"# Importing libraries","b45b8736":"# Modeling","238900f0":"# Predicting","15621e73":"# Mapping the Alphabets\n","80a4e36d":"# Finding the null values","71a6d42a":"# Train Test split","fa1bdde9":"The data here is balanced","94ffd7c4":"There is no null values"}}