{"cell_type":{"99c10a57":"code","e0df9a39":"code","0b50cf53":"code","c3fa7dfd":"code","f76384f8":"code","8e40aa3d":"code","c2a8fe31":"code","b5e98295":"markdown"},"source":{"99c10a57":"import geopandas as gpd\nimport numpy as np \nimport pandas as pd \nimport datetime as dt\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.figure_factory as ff","e0df9a39":"def covid_plot(df, abs = True, Today=True, date=None):\n    '''\n    World plot of covid-19 confirmed cases and death. \n    df = string, need to be 'confirmed_cases' or 'deaths'\n    abs= Boolean, default is True. Does the data must be reported in absolute or relative value? Relative value is calculated based on the  country population devided by one milion.\n    Today= Boolean, default is True. It is a parameter to specify if the data, are the today data, if set equal to false, a specific date must be specified\n    date= dt.datetime, in case Today=False, it is possible to specify a specific date for the plot. It needs to be in dt.datetime format, so be sure \n          to inser date = dt.datetime(YYYY,M,DD) format. The data starts from 2020,1,23, so be sure to select a date after this one.\n    '''\n    \n    if df != 'deaths' and df != 'confirmed_cases':\n        print('available option for df are: \"deaths\" or \"confirmed_cases\"')\n    if df == 'deaths' or df == 'confirmed_cases':\n        initial_data=dt.datetime(2020,1,23)\n\n        us = pd.read_csv('..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_us_{}.csv'.format(df),low_memory=False).iloc[1:,1:]\n        us = np.sum(us.astype(float),axis=1)\n        us = us.rename('United States of America')\n        \n        data = dt.date.today().strftime(\"%d\/%m\/%Y\")\n\n        death = pd.read_csv('..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_{}.csv'.format(df))\n        world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n        \n        df_new=pd.DataFrame()\n        states=['Australia','Canada','China','Denmark','France','Netherlands','United Kingdom']\n        \n        for i in states:\n            colonna = ([col for col in death.columns if i in col])\n            df_new =  pd.concat([df_new,(np.sum(death[colonna].iloc[1:].astype(float),axis=1))],axis=1)\n            death = death.drop(columns=colonna)\n        df_new.columns = states\n    \n        death = death.drop(columns=['Country\/Region'])\n        death = pd.concat([death,df_new],axis=1)\n        death = death.T \n        death = death.drop(columns=[0])\n\n        death = death.append(us)\n        state = death.index\n        death.index = range(0,len(death))\n        death['name']= state\n\n        ########################\n        \n        if Today==True and date==None:\n            test = pd.merge(world,death.iloc[:,-2:],on=['name'],how='left')\n            test.iloc[:,-1] = test.iloc[:,-1].apply(lambda x: float(x))\n            \n            if abs==False:\n                population = test.iloc[:,0]\n                population_mil=population\/\/1000000\n                test.iloc[:,-1] = test.iloc[:,-1] \/\/population_mil\n\n        if Today==True and date!=None:\n            print('Choose only a date!')\n\n        if Today==False:\n            if date==None:\n                 print('Either specifying a date or select Today = True to set date for today.')\n        \n        if date!=None:\n            if type(date) != dt.datetime:\n                print('be sure that date format is: \"dt.datetime(YYYY,M,DD)\"')\n\n            if type(date) == dt.datetime:\n                data = date\n                index=((data-initial_data).days)\n                if index < 0:\n                    print('data are recorded starting from 2020,1,23; be sure to select a value after this date')\n                if index >= 0:\n                    data = (data.strftime(\"%d\/%m\/%Y\"))\n                    test = pd.merge(world,death[[index,'name']],on=['name'],how='left')\n                    test.iloc[:,-1] = test.iloc[:,-1].apply(lambda x: float(x))\n                \n            if abs==False:\n                population = test.iloc[:,0]\n                population_mil=population\/\/1000000\n                test.iloc[:,-1] = test.iloc[:,-1] \/\/population_mil\n\n\n        ab = 'Absolute'\n        if abs==False:\n            ab= 'Relative'\n        \n        ######################## Using pyplot\n    ranges = [0,np.max(test.iloc[:,-1])]\n    \n    if df == 'confirmed_cases' and abs==True:\n        ranges= [0,200000]\n    if df == 'confirmed_cases' and abs==False:\n        ranges = [0,1000]\n    if df == 'deaths' and abs==False:\n        ranges = [0,35]\n    if df == 'deaths' and abs==True:\n        ranges=[0,3000]\n        \n        \n    fig = px.choropleth(test, locations=test.iloc[:,2],\n                    color_continuous_scale=\"Viridis\",\n                    locationmode='country names',\n                    color=test.iloc[:,-1].values,\n                    #color_continuous_scale=px.colors.sequential.OrRd,\n                    labels={'test.iloc[:,-1].values':'unemployment rate'},\n                    width = 1050,\n                    height= 600,\n                    range_color=ranges\n                       )\n    fig.update_layout(title=\"{} world covid-19 {} in {}\".format(ab,df,data))\n    fig.show()\n    \n        ######################## Using geopandas\n        \n#         if  df ==  'confirmed_cases':\n#             maxs=200000\n#             if abs==False:\n#                 maxs=1000\n#         if  df == 'deaths':\n#             maxs=3500\n#             if abs==False:\n#                 maxs=35        \n        \n#         fig,ax=plt.subplots(figsize=(25,25))\n#         test.plot(column=test.iloc[:,-1],vmin=0,vmax=maxs,legend=True, \n#               legend_kwds={\n#         'label': \"number of {}\".format(df),\n#         'orientation': \"horizontal\"},\n#               missing_kwds={\n#                 'color':'lightgrey',\n#                 'label':'Missing values'\n#               } , ax=ax\n#              )\n#         ax.set_title(\"{} world covid-19 {} in {}\".format(ab,df,data), fontsize=25)\n","0b50cf53":"help(covid_plot)","c3fa7dfd":"covid_plot('deaths')","f76384f8":"covid_plot('deaths',abs=False)","8e40aa3d":"covid_plot('confirmed_cases')","c2a8fe31":"covid_plot('confirmed_cases',abs=False)","b5e98295":"Expoiting the John Hopkins data related to covid-19 deaths and confermed new cases I tried to implement a basic but easy to read world plot in which is it possible to specify the desired day. "}}