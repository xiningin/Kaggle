{"cell_type":{"9612555a":"code","96c8a28f":"code","4a1da4c4":"code","9ed46f5f":"code","0befe7d1":"code","1d89fcba":"code","2200316d":"code","ec864214":"code","764bc35f":"code","89fb103f":"code","254f7851":"code","d771c1dd":"code","69a11c93":"code","4d90af06":"code","ebb49845":"markdown","0ba29efd":"markdown","59c515c5":"markdown","467bf03e":"markdown","ed22b9b7":"markdown","3a899cc9":"markdown","539f3780":"markdown","2f7568e2":"markdown"},"source":{"9612555a":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sn","96c8a28f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        data_path = os.path.join(dirname, filename)","4a1da4c4":"df = pd.read_csv(data_path)\ndf.head(10)","9ed46f5f":"df.loc[df['name'].duplicated()] # there are no duplicate name entries","0befe7d1":"print('Checking the categories : {} \\n'.format(df['status'].unique()))\n\nplt.figure(figsize=(16,8))\nplt.pie(df['status'].value_counts(), labels=df['status'].value_counts().index ,autopct='%1.1f%%')\nplt.title('Gender Category')\nplt.show()","1d89fcba":"# Dropping the Name column as it is not important\ndf = df.drop(['name'],axis=1)\nprint('Column Names : \\n', df.columns)\nprint('\\n The shape of our data :', df.shape)","2200316d":"# Lets look at our data once again\ndf.head(10)","ec864214":"df.isnull().sum() # checking for null values","764bc35f":"#Getting our features and target variables\nx = df.drop(['status'],axis=1)\ny = df['status']\n\nprint('x before applying standard scaler : \\n', x)\nprint('\\ny or our target variable\\n', y)\n\n# standardizing the data\nstdscaler = StandardScaler()\nx = np.array(stdscaler.fit_transform(x))\nprint('\\nx after applying standard scaler : \\n',x)","89fb103f":"X_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size=0.2,random_state=10)\n\nprint('X_train shape : ', X_train.shape)\nprint('X_test shape : ', X_test.shape)\nprint('Y_train shape : ', Y_train.shape)\nprint('Y_test shape : ', Y_test.shape)\n\n#Converting to arrays\nX_train, X_test, Y_train, Y_test = map(np.array,[X_train, X_test, Y_train, Y_test])","254f7851":"# Predict function for linear regression\n\ndef linear_regression_predict(X_test):\n  Y_pred = model.predict(X_test)\n  for i,j in enumerate(Y_pred):\n      if(j<0.5):\n          Y_pred[i]=0\n      else:\n          Y_pred[i]=1\n  print('Predicted Values : ',Y_pred)\n  print('\\nShape of Y_pred : {} , Shape of Y_test : {} \\n'.format(Y_pred.shape,Y_test.shape))\n  return Y_pred\n  \n\n# Data Processing function which will fit, predict and score the model\n\ndef data_processor(model, model_name, X_train, Y_train, X_test, Y_test):\n  model.fit(X_train, Y_train)\n  score.append(round(model.score(X_test, Y_test)*100,2))\n  if model_name == 'Linear Regression':\n    Y_pred = linear_regression_predict(X_test)\n  else:\n    Y_pred = model.predict(X_test)\n  conf_matrix(Y_test,Y_pred)\n  print('{} model Accuracy is : {:.2f}%\\n'.format(model_name,model.score(X_test, Y_test)*100))\n\n# creating a function to plot the confusion matrix\n\ndef conf_matrix(Y_test, Y_pred_mod):\n  cm = confusion_matrix(Y_test,Y_pred_mod)\n  plt.figure(figsize=(8,6))\n  fg = sn.heatmap(cm,annot=True,cmap='Blues')\n  plt.xlabel('Predicted')\n  plt.ylabel('Truth')\n  return plt.show()","d771c1dd":"model_list = {'Logistic Regression' : LogisticRegression(), 'Decision Tree' : DecisionTreeClassifier(),'SVC': SVC(C=8), \n              'Random Forest Classifier' : RandomForestClassifier(), 'Linear Regression' : LinearRegression()}\nscore = []\n\nfor model_name,model in model_list.items():\n  print('{} model is running \\n'.format(model_name))\n  data_processor(model, model_name, X_train, Y_train, X_test, Y_test)","69a11c93":"model_accuracy_scores = pd.DataFrame({'Models': list(model_list.keys()),\n                                      'Accuracy %': score})\n\nprint(model_accuracy_scores)","4d90af06":"model_accuracy_scores.to_csv('submission.csv', index=False)","ebb49845":"# Exploring the data","0ba29efd":"# Importing the required libraries","59c515c5":"# Creating functions for plotting and processing data with various models","467bf03e":"# Creating Models and Running them with our data","ed22b9b7":"## Getting the data","3a899cc9":"# Model Accuracy of all the Models","539f3780":"# Preprocessing","2f7568e2":"## Splitting data into train and test sets"}}