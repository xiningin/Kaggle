{"cell_type":{"17fa7751":"code","4cff4eb0":"code","349b9ef5":"code","ce12d96f":"code","0bb6c063":"code","fcc6812c":"code","21991aa2":"code","ed0846af":"code","a55d8df8":"code","8218fb2b":"code","150638f0":"code","056617cd":"markdown","ca30c94e":"markdown"},"source":{"17fa7751":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cff4eb0":"import random\nfrom tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom random import choices\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgbm\nimport pickle","349b9ef5":"def load_pickle(fich):\n    with open(fich,\"rb\") as f :\n        contenu = pickle.load(f)\n    return contenu","ce12d96f":"path = \"..\/input\/eda-missing-values-tsne-clustering-class-imb\"","0bb6c063":"SEED = 1111","fcc6812c":"random.seed(SEED)\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)","21991aa2":"print('load train start')\ntry:\n    train = pd.read_parquet('train.parquet')\nexcept:\n    train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv', index_col='ts_id')\n    train.to_parquet('train.parquet')\nprint('load train end')","ed0846af":"# train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train[train['weight'] != 0]\n\ntrain.fillna(train.mean(),inplace=True)\n\ntrain['action'] = ((train['resp'].values) > 0).astype(int)\n\n\n#features = [c for c in train.columns if \"feature\" in c]\nfeatures = load_pickle(os.path.join(path,\"features_names\"))\n\n#f_mean = np.mean(train[features[1:]].values,axis=0)\nf_mean = load_pickle(os.path.join(path,\"features_imputation\"))\n\nwith open(\"imputation\",\"wb\") as f :\n    pickle.dump(f_mean,f)\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\n\nX_train = train.loc[:, features]\n#y_train = (train.loc[:, 'action'])\n\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","a55d8df8":"# modeling step \nparams={\"num_leaves\":300,\n       \"max_bin\":450,\n       \"feature_fraction\":0.52,\n       \"bagging_fraction\":0.52,\n       \"objective\":\"binary\",\n       \"learning_rate\":0.05,\n       \"boosting_type\":\"gbdt\",\n       \"metric\":\"auc\"\n       }\nmodels = [] # list of model , we will train \nfor i in tqdm(range(y_train.shape[1])):\n    xtr,xval,ytr,yval = train_test_split(X_train ,y_train[:,i],test_size=0.2,stratify=y_train[:,i])\n   \n    d_train = lgbm.Dataset(xtr,label=ytr)\n    d_eval = lgbm.Dataset(xval,label=yval,reference=d_train)\n    clf = lgbm.train(params,d_train,valid_sets=[d_train,d_eval],num_boost_round=1500,\\\n                    early_stopping_rounds=50,verbose_eval=50)\n    nom_fich = \"weights_target_\" + resp_cols[i]\n    clf.save_model(nom_fich)\n    models.append(clf)","8218fb2b":"params={\"num_leaves\":300,\n       \"max_bin\":450,\n       \"feature_fraction\":0.52,\n       \"bagging_fraction\":0.52,\n       \"objective\":\"binary\",\n       \"learning_rate\":0.05,\n       \"boosting_type\":\"gbdt\",\n       \"metric\":\"auc\"\n       }\nsing_model = []\nfor i in range(3):\n  \n    clf = lgbm.Booster(model_file=os.path.join(path,\"weights_{}\".format(i)))\n    sing_model.append(clf)","150638f0":"f = np.median\nth = 0.5000\nimport janestreet\nenv = janestreet.make_env()\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt.sum()):\n            x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * f_mean\n        # multimodel\n        pred1 = np.mean(np.stack([model.predict(x_tt) for model in models]),axis=0).T\n        # single_model\n        pred2 = np.mean(np.stack([model.predict(x_tt) for model in sing_model]),axis=0)\n        \n        pred = 0.5 * pred1 + 0.5 * pred2\n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","056617cd":"# multimodel","ca30c94e":"# single_model"}}