{"cell_type":{"9b05371b":"code","46cc66ab":"code","17c78899":"code","f4beee9a":"code","2bc7a010":"code","105320f0":"code","e6f4395c":"code","33a5204e":"code","d9f7df72":"code","2f1c6d08":"code","29665536":"code","89420450":"code","3cd1a4ce":"code","59af5d45":"code","feeb3e45":"code","4b1f8ed5":"code","699549b7":"code","72e3b01d":"code","0b520cca":"code","c1a287ae":"code","1b75df00":"code","20286f04":"code","adbfa43a":"code","a90234bc":"code","8b17dc84":"code","53b67ee0":"code","05acea4f":"code","a906ace9":"code","7fc78f73":"code","e2ae4bbd":"code","0f0fe96a":"code","581bdee9":"markdown","94c9f79e":"markdown","46e41e95":"markdown","3bbee8c3":"markdown","5733038c":"markdown","5666d4ed":"markdown","067217c4":"markdown","8b767d94":"markdown","0a70cb4d":"markdown"},"source":{"9b05371b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","46cc66ab":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","17c78899":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","f4beee9a":"train.info()","2bc7a010":"test.info()","105320f0":"all = pd.concat([train, test], sort = False)\nall.info()","e6f4395c":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","33a5204e":"all.info()","d9f7df72":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","2f1c6d08":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","29665536":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","89420450":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","3cd1a4ce":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","59af5d45":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","feeb3e45":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","4b1f8ed5":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","699549b7":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","72e3b01d":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","0b520cca":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","c1a287ae":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","1b75df00":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","20286f04":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","adbfa43a":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","a90234bc":"predictions = ada.predict(X_test)","8b17dc84":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","53b67ee0":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","05acea4f":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","a906ace9":"t_pred = ada.predict(TestForPred).astype(int)","7fc78f73":"PassengerId = all_test['PassengerId']","e2ae4bbd":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","0f0fe96a":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","581bdee9":"****Check Accuracy","94c9f79e":"## Combine train and test","46e41e95":"****Final Predictions","3bbee8c3":"# Import Data","5733038c":"# Import Libraries","5666d4ed":"****Build AdaBoost","067217c4":"****Extra Features:","8b767d94":"****Train\/Test Split","0a70cb4d":"****Check Accuracy"}}