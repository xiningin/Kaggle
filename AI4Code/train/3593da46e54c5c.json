{"cell_type":{"a8a2bf1b":"code","5dbea17b":"code","2c6da21c":"code","16a2030e":"code","c190b21b":"code","e627ae17":"code","b966a20c":"code","301375e0":"code","724c6674":"code","02166945":"code","31587947":"code","b1bbcc22":"code","4f60a31c":"code","66ab5899":"code","0a91f3c5":"code","19470976":"code","87574005":"code","03e51523":"code","89a289f0":"code","ceb2ae67":"code","2502fe05":"code","263da7ca":"code","cf906ead":"code","3fec72ab":"code","17e835c4":"code","c299753b":"code","dd39e806":"code","757e8879":"code","fc83dd17":"code","573abb05":"code","c9f20820":"code","3aaf2a9e":"code","67d88156":"code","7009831c":"code","b6c767f7":"code","29d5ea9a":"code","bbbe5dae":"code","208aa7d5":"code","ac57759b":"code","27d5fadf":"code","f8f265aa":"code","73984009":"code","49898a76":"code","5c5725ca":"code","a7c898ef":"code","a7b84f4f":"code","454b5330":"code","42ee84a1":"code","fd0ecb8d":"code","6663c764":"code","364feb42":"code","8e32159e":"code","4963943e":"code","33163c17":"code","2d79fc85":"code","e209cac8":"code","e2859865":"code","dd4f8301":"code","73d66bd3":"code","a455c6a3":"code","d67513a9":"code","175a29b7":"code","40ec9122":"code","22f4867a":"code","6e3b4cc8":"code","70c6140b":"code","f2c2492f":"code","e5e3ec1e":"code","411452db":"code","b5a1be47":"code","b3ca0921":"code","ad3bad6f":"code","b251e5c8":"code","3bf0f210":"code","aea6903f":"code","86c7b3b5":"code","86837802":"code","a163f591":"code","a4d93ee5":"code","1904f401":"code","6f18a85d":"code","d5ace175":"code","25aaae44":"code","43b852e6":"code","99afd4f2":"code","9bc749e9":"code","af12552d":"code","855d0cb3":"code","6ee4fbe9":"code","41d35539":"code","86305fe2":"code","7bca3237":"code","b781d8bc":"code","e26c9f31":"code","e0aa20bb":"code","f3ca3fbf":"markdown","dd95efe0":"markdown","b2820b09":"markdown","09a9d275":"markdown","7b44f7d7":"markdown","2b3cbe95":"markdown","adbb9bb5":"markdown","d5033447":"markdown","a8950c78":"markdown","1d701cee":"markdown","3b062743":"markdown","7e33cb24":"markdown","c8b0cd69":"markdown","1efd6c51":"markdown","ba738db8":"markdown","57e452da":"markdown","8a970412":"markdown","0d1b65a4":"markdown","922cc436":"markdown","efdbe0b9":"markdown","b0510e56":"markdown","d52c0b65":"markdown","d3ddf52a":"markdown","c21b4fd8":"markdown","e673b8b9":"markdown","63d119b9":"markdown","b73e492f":"markdown","d73e104b":"markdown","83a5c9fc":"markdown","e1101139":"markdown","9b6e879c":"markdown","9d4be58c":"markdown","b964a7d7":"markdown","01f684d2":"markdown","9979a082":"markdown","d7649681":"markdown","00495fc9":"markdown"},"source":{"a8a2bf1b":"# Machine Learning\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import LinearSVC\n\nimport catboost\nfrom catboost import CatBoostClassifier, Pool, cv\n\n# Data Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno\n\n# Data Manipulation\nimport pandas as pd\nimport numpy as np\n\n# Basic Module\nimport datetime\nimport random\nimport time\nimport math\n\n# Remove Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('seaborn-whitegrid')","5dbea17b":"gender_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2c6da21c":"print(\"Train shape:\", df_train.shape)\nprint(\"Test_shape:\", df_test.shape)","16a2030e":"df_train.head()","c190b21b":"df_train.describe()","e627ae17":"df_train.Age.plot.hist()","b966a20c":"data = df_train","301375e0":"data.head()","724c6674":"data['Died'] = 1 - data['Survived']","02166945":"data.head()","31587947":"data.groupby(\"Sex\").agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True)","b1bbcc22":"sns.violinplot(x='Sex', y='Age', hue='Survived', data=data, split=True)","4f60a31c":"figure = plt.figure(figsize=(12,8))\nplt.hist([data[data['Survived'] == 1]['Fare'], data[data['Survived'] == 0]['Fare']],\n         stacked = True,\n         bins = 25, \n         label = ['Survived', 'Deda'])\n\nplt.xlabel('Fare')\nplt.ylabel('Number of Passengers')\nplt.legend()","66ab5899":"# Combining age, fare and survivor\n\nplt.figure(figsize=(16, 8))\nax = plt.subplot()\n\nax.scatter(data[data['Survived'] == 1]['Age'], data[data['Survived'] == 1]['Fare'],\n           c = 'blue', s = data[data['Survived'] == 1]['Fare'])\nax.scatter(data[data['Survived'] == 0]['Age'], data[data['Survived'] == 0]['Fare'],\n           c = 'red', s = data[data['Survived'] == 0]['Fare'])","0a91f3c5":"# Ticket fare versus class\n\nax = plt.subplot()\nax.set_ylabel('Average fare')\ndata.groupby('Pclass').mean()['Fare'].plot(kind='bar', ax=ax)","19470976":"gender_submission.head()","87574005":"missingno.matrix(df_train, figsize=(30,10))","03e51523":"# alternative way\ndf_train.isnull().sum()","89a289f0":"df_new = pd.DataFrame()","ceb2ae67":"df_train.dtypes","2502fe05":"df_train.head()","263da7ca":"# How many survived?\nfig = plt.figure(figsize=(12, 2))\nsns.countplot(y='Survived', data=df_train)\nprint(df_train.Survived.value_counts())","cf906ead":"df_new['Survived'] = df_train['Survived']\ndf_new.head()","3fec72ab":"sns.distplot(df_train.Pclass)","17e835c4":"df_train.Pclass.isnull().sum()","c299753b":"df_new['Pclass'] = df_train['Pclass']","dd39e806":"df_train.Name.value_counts()","757e8879":"plt.figure(figsize=(12,2))\nsns.countplot(y='Sex', data=df_train)","fc83dd17":"df_train.Sex.isnull().sum()","573abb05":"df_new['Sex'] = df_train['Sex']\ndf_new.head()","c9f20820":"df_new['Sex'] = LabelEncoder().fit_transform(df_new['Sex'])\ndf_new.head()","3aaf2a9e":"fig = plt.figure(figsize=(12,10))\nsns.distplot(df_new.loc[df_new['Survived'] == 1]['Sex'], kde_kws={'bw_method': 0.1, \"label\":\"Survived\"})\nsns.distplot(df_new.loc[df_new['Survived'] == 0]['Sex'], kde_kws={'bw_method': 0.1, \"label\":\"Died\"})","67d88156":"df_train.Age.isnull().sum()","7009831c":"# Function to make easier distploting the graph\ndef plot_count_dist(data, label_column, target_column, figsize=(12, 4)):\n    fig = plt.figure(figsize=figsize)\n    plt.subplot(1, 2, 1)\n    sns.countplot(y=target_column, data=data)\n    plt.subplot(1, 2, 2)\n    sns.distplot(data.loc[data[label_column] == 1][target_column],\n                kde_kws={'bw_method':0.2, \"label\":\"Survived\"})\n    sns.distplot(data.loc[data[label_column] == 0][target_column],\n                kde_kws={'bw_method':0.2, \"label\":\"Died\"})","b6c767f7":"df_train.SibSp.isnull().sum()","29d5ea9a":"df_train.SibSp.value_counts()","bbbe5dae":"plot_count_dist(df_train, label_column='Survived', target_column='SibSp', figsize=(20,10))","208aa7d5":"df_new['SibSp'] = df_train['SibSp']","ac57759b":"df_train.Parch.isnull().sum()","27d5fadf":"df_train.Parch.value_counts()","f8f265aa":"plot_count_dist(df_train, label_column='Survived', target_column='Parch', figsize=(20,10))","73984009":"df_new['Parch'] = df_train['Parch']","49898a76":"df_train.Ticket.isnull().sum()","5c5725ca":"df_train.Ticket.value_counts()","a7c898ef":"df_train.Fare.isnull().sum()\ndf_train.Fare.dtype","a7b84f4f":"df_train.Fare.value_counts()","454b5330":"df_new['Fare'] = df_train['Fare']","42ee84a1":"df_train.Cabin.isnull().sum()","fd0ecb8d":"df_train.Embarked.isnull().sum()","6663c764":"df_train.Embarked.value_counts()","364feb42":"sns.countplot(y='Embarked', data=df_train)","8e32159e":"df_new['Embarked'] = df_train['Embarked']","4963943e":"len(df_new)","33163c17":"df_new = df_new.dropna(subset=['Embarked'])","2d79fc85":"len(df_new)","e209cac8":"df_new.head()","e2859865":"# One hot encode the categorical columns\ndf_embarked_one_hot = pd.get_dummies(df_new['Embarked'],\n                                     prefix='embarked')\n\ndf_sex_one_hot = pd.get_dummies(df_new['Sex'],\n                                prefix='sex')\n\ndf_pclass_one_hot = pd.get_dummies(df_new['Pclass'],\n                                   prefix='pclass')","dd4f8301":"# Combine the one hot encoded columns with df_con_enc\ndf_new_enc = pd.concat([df_new,\n                        df_embarked_one_hot,\n                        df_sex_one_hot,\n                        df_pclass_one_hot], axis = 1)\n\n# Drop the original columns\ndf_new_enc = df_new_enc.drop(['Pclass', 'Sex', 'Embarked'], axis=1)","73d66bd3":"df_new_enc","a455c6a3":"selected_df = df_new_enc\nselected_df.head()","d67513a9":"# Split the dataframe into data and labels\nX_train = selected_df.drop('Survived', axis=1)\ny_train = selected_df.Survived","175a29b7":"# Function that runs the requested algorithm and returns the accuracy metrics\ndef fit_ml_model(algo, X_train, y_train, cv):\n    \n    # One Pass\n    model = algo.fit(X_train, y_train)\n    acc = round(model.score(X_train, y_train) * 100, 2)\n    \n    # Cross Validation\n    train_predict = model_selection.cross_val_predict(algo, X_train,\n                                                      y_train, cv=cv,\n                                                      n_jobs=-1)\n    \n    # Cross-validation accuracy metric\n    acc_cv = round(metrics.accuracy_score(y_train, train_predict) * 100, 2)\n    return train_predict, acc, acc_cv","40ec9122":"start_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = fit_ml_model(KNeighborsClassifier(),\n                                                   X_train, y_train, 10)\n\nknn_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_knn)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_knn)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=knn_time))","22f4867a":"start_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = fit_ml_model(GaussianNB(),\n                                                                  X_train, y_train, 10)\n\ngaussian_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gaussian)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gaussian)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gaussian_time))","6e3b4cc8":"start_time = time.time()\ntrain_pred_svc, acc_svc, acc_cv_svc = fit_ml_model(LinearSVC(),\n                                                   X_train, y_train, 10)\n\nsvc_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_svc)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_svc)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=svc_time))","70c6140b":"start_time = time.time()\ntrain_pred_sgd, acc_sgd, acc_cv_sgd = fit_ml_model(SGDClassifier(),\n                                                   X_train, y_train, 10)\n\nsgd_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_sgd)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_sgd)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=sgd_time))","f2c2492f":"start_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = fit_ml_model(tree.DecisionTreeClassifier(),\n                                                X_train, y_train, 10)\n\ndt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_dt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_dt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=dt_time))","e5e3ec1e":"start_time = time.time()\ntrain_pred_gbt, acc_gbt, acc_cv_gbt = fit_ml_model(GradientBoostingClassifier(),\n                                                   X_train, y_train, 10)\n\ngbt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gbt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gbt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gbt_time))","411452db":"X_train.head()","b5a1be47":"y_train.head()","b3ca0921":"cat_features = np.where(X_train.dtypes != np.float)[0]\ncat_features","ad3bad6f":"train_pool = Pool(X_train,\n                  y_train,\n                  cat_features)","b251e5c8":"# CatBoost model definition\ncatboost_model = CatBoostClassifier(iterations=1000,\n                                    custom_loss=['Accuracy'],\n                                    loss_function='Logloss')\n\n# Fit CatBoost model\ncatboost_model.fit(train_pool, plot=True)\n\n# CatBoost accuracy\nacc_catboost = round(catboost_model.score(X_train, y_train) * 100, 2)","3bf0f210":"start_time = time.time()\n\n# Set params for cross-validation\ncv_params = catboost_model.get_params()\n\ncv_data = cv(train_pool, cv_params,\n             fold_count=10, plot=True)\n\ncatboost_time = (time.time() - start_time)\n\n# CatBoost CV results save into a dataframe (cv_date)\nacc_cv_catboost = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","aea6903f":"# Print CatBoost model metrics\nprint(\"CatBoost Metrics\")\nprint(\"Accuracy: {}\".format(acc_catboost))\nprint(\"Accuracy cross-validatin 10-Fold: {}\".format(acc_cv_catboost))\nprint(\"Running Time: {}\".format(datetime.timedelta(seconds=catboost_time)))","86c7b3b5":"models = pd.DataFrame({\n    'Model' : ['KNN', 'Naive Bayes', 'Stochastic Gradient Decent',\n               'Linear SVC', 'Decision Tree', 'Gradient Boosting Trees',\n               'CatBoost'],\n    'Score' : [\n        acc_knn, acc_gaussian, acc_sgd,\n        acc_svc, acc_dt, acc_gbt,\n        acc_catboost\n    ]\n})","86837802":"print(\"Regular Accuracy Scores\")\nmodels.sort_values(by='Score', ascending=False)","a163f591":"cv_models = pd.DataFrame({\n    'Model' : ['KNN', 'Naive Bayes', 'Stochastic Gradient Decent',\n               'Linear SVC', 'Decision Tree', 'Gradient Boosting Trees',\n               'CatBoost'],\n    'Score' : [\n        acc_cv_knn, acc_cv_gaussian, acc_cv_sgd,\n        acc_cv_svc, acc_cv_dt, acc_cv_gbt,\n        acc_cv_catboost\n    ]\n})","a4d93ee5":"print(\"Cross Validation Accuracy Scores\")\ncv_models.sort_values(by='Score', ascending=False)","1904f401":"X_train.head()","6f18a85d":"df_test.head()","d5ace175":"test_embarked_one_hot = pd.get_dummies(df_test['Embarked'],\n                                       prefix='embarked')\n\ntest_sex_one_hot = pd.get_dummies(df_test['Sex'],\n                                  prefix='sex')\n\ntest_pclass_one_hot = pd.get_dummies(df_test['Pclass'],\n                                     prefix='pclass')","25aaae44":"df_test = pd.concat([df_test,\n                     test_embarked_one_hot,\n                     test_sex_one_hot,\n                     test_pclass_one_hot], axis=1)","43b852e6":"df_test.head()","99afd4f2":"df_test.columns","9bc749e9":"X_train.columns","af12552d":"df_test.rename(columns={\"sex_female\":\"sex_0\", \"sex_male\":\"sex_1\"}, inplace=True)","855d0cb3":"wanted_test_columns = X_train.columns","6ee4fbe9":"wanted_test_columns","41d35539":"predictions = catboost_model.predict(df_test[wanted_test_columns])","86305fe2":"predictions[:20]","7bca3237":"submission = pd.DataFrame()\nsubmission['PassengerId'] = df_test['PassengerId']\nsubmission['Survived'] = predictions\nsubmission.head()","b781d8bc":"gender_submission.head()","e26c9f31":"if len(submission) == len(df_test):\n    print(\"Submission dataframe is same length as test ({} rows).\".format(len(submission)))\nelse:\n    print(\"Dataframe is mismatched, won't be able to be submitted\")","e0aa20bb":"submission.to_csv(\"titanic_catboost_submission.csv\", index=False)\nprint(\"Submission saved\")","f3ca3fbf":"## Load Train and Test Data","dd95efe0":"### Feature: SibSp","b2820b09":"### Gaussian Naive Bayes","09a9d275":"### K-Nearest Neighbours","7b44f7d7":"Thre is 687 null items, so let's skip this","2b3cbe95":"### Make Prediction using CatBoost","adbb9bb5":"### Decision Tree Classifier","d5033447":"### Feature: Sex","a8950c78":"## Explore data individually","1d701cee":"### Gradient Boost Trees","3b062743":"### Feature: Name","7e33cb24":"## Building Machine Leanring Models","c8b0cd69":"## Cross Validation Accuracy Score","1efd6c51":"Because only two, let's added into the dataframe and then remove it","ba738db8":"### Feature: Survived","57e452da":"### CatBoost","8a970412":"### Linear Support Vector Machines (SVC)","0d1b65a4":"### Feature: Embarked","922cc436":"## Titanic Kaggle Challenge (My Second Submission)\n\nThis method was following two tutorial\n\n1. [Sanjay](https:\/\/github.com\/Msanjayds)\n2. [Asha Gaire](https:\/\/medium.com\/backprop-labs\/kaggle-submission-for-titanic-dataset-fd7950a0d65)\n\nWhy there are two tutorial, because in Sanjay using fastai and there is a deprecated things\n\nAnd Asha Gaire tell really clear with example using CatBoost, but there one failed model, that is Logstic Regression, but all is fine\n\nThis rebuild model make me up from about 69k into 6.9k in leaderboard position!!!\n\n> July, 17$^{th}$ 2021","efdbe0b9":"### Feature: Age","b0510e56":"## Exploratory Data Analysis","d52c0b65":"### Feature: Cabin","d3ddf52a":"## Submission","c21b4fd8":"## Feature Encoding\nApplied technique to features convert into numerical form","e673b8b9":"## Accuracy Score","63d119b9":"Because the length of name is 891 (same like the row of data) - We can't uses this","b73e492f":"## Check Missing Values","d73e104b":"There about 177 missing values, it better to skip it first","83a5c9fc":"There are two missing values, let's see","e1101139":"There about 681 different values, so let's skip it","9b6e879c":"### Feature: Parch","9d4be58c":"### Feature: Fare","b964a7d7":"### Feature: Pclass","01f684d2":"### Stochastic Gradient Descent","9979a082":"### Make Submission","d7649681":"### Feature: Ticket","00495fc9":"There are 248 different vlaues, but it's a numerical continious variable, so let include it into data frame"}}