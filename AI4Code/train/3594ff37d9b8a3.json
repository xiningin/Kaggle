{"cell_type":{"fda2d563":"code","91fe7543":"code","3d74c6ee":"code","4305f9e9":"code","0dbda143":"code","db88618b":"code","b0a034f6":"code","9b1891d1":"code","6407bb74":"code","615907af":"code","f3ea41ab":"markdown","a4c3d079":"markdown","0167dad7":"markdown","8adbb3f8":"markdown","46aaa53b":"markdown","66889221":"markdown","88993ed2":"markdown","3f7fd68f":"markdown","528345c0":"markdown","56d451e9":"markdown","96e209f0":"markdown","17fcd6a4":"markdown","20a165ba":"markdown"},"source":{"fda2d563":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error\nimport lightgbm as lgb\nfrom tqdm.notebook import tqdm\n\n# \u8868\u793a\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u5217\u6570\u3092\u8abf\u6574\npd.set_option('display.max_columns', 50)\n\n# \u914d\u5e03\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ntrain_df = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/train.csv\", index_col=0)\ntest_df = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/test.csv\", index_col=0)\ndescription_df = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/description.csv\", index_col=0)\nsample_df = pd.read_csv(\"..\/input\/the-datascience-cup-beta\/sample.csv\", index_col=0)\n\n# train \u3068 test \u3092\u304f\u3063\u3064\u3051\u3066\u304a\u304f\ndata = pd.concat([train_df, test_df], sort=False)\ndata.head()","91fe7543":"from datetime import timedelta\n\n# datetime \u578b\u306b\u3057\u3066\u304a\u304d\u307e\u3059\ncols_dttm = ['host_since', 'first_review', 'last_review']\nfor c in cols_dttm:\n    data[c] = pd.to_datetime(data[c])\n\n# first_review \u304b\u3089 last_review\u307e\u3067\u306e\u65e5\u6570\u306a\u3069\n#  \/ timedelta(days=1) \u306f\u65e5\u6570\u3092\u6570\u5024\u578b\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\ndata['num_days_to_first_review'] = (data['first_review'] - data['host_since']) \/ timedelta(days=1)\ndata['num_days_to_last_review'] = (data['last_review'] - data['host_since']) \/ timedelta(days=1)\ndata['num_days_from_first_to_last_review'] = (data['last_review'] - data['first_review']) \/ timedelta(days=1)\n\n# \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u305f\u5e74\u3068\u6708 (\u3042\u307e\u308a\u52b9\u304f\u6c17\u306f\u3057\u307e\u305b\u3093\u304c\u3001\u53c2\u8003\u7a0b\u5ea6\u306b..)\ndata['host_since_year'] = data['host_since'].dt.year\ndata['host_since_month'] = data['host_since'].dt.month\n\n# \u9010\u4e00\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\ndata.head()","3d74c6ee":"# \u5143\u306e\u30c7\u30fc\u30bf (0.5\u523b\u307f\u306f half bath = \u6d17\u9762\u6240\u3068\u4fbf\u5668\u306e\u307f\u3092\u8868\u3059\u306e\u3067\u3057\u3087\u3046\u304b\uff1f)\nprint(data['bathrooms_text'].unique())\n\n# \u6d74\u5ba4\/\u6d17\u9762\u6240\u306e\u6570\u3001private\u304b\u5426\u304b\ndata['num_baths'] = data['bathrooms_text'].str.extract(r'([0-9]+\\.?[0-9]*)').astype('float', errors='ignore')\ndata['private_bath'] = data['bathrooms_text'].str.contains(r'private|Private') * 1\ndata['shared_bath'] = data['bathrooms_text'].str.contains(r'shared|Shared') * 1\n\n# \u4e00\u4eba\u3042\u305f\u308a\u306e\u6d74\u5ba4\/\u6d17\u9762\u6240\u306e\u6570\u3001\u30d9\u30c3\u30c9\u306e\u6570 (\u6700\u5927\u4eba\u6570\u6642)\ndata['beds_per_person'] = data['beds'].values \/ data['accommodates'].values\ndata['bedrooms_per_person'] = data['bedrooms'].values \/ data['accommodates'].values\ndata['baths_per_person'] = data['num_baths'].values \/ data['accommodates'].values","4305f9e9":"from sklearn.preprocessing import LabelEncoder\n\ndef label_encoding(df, cols):\n    for c in cols:\n        if df[c].dtype == 'object':\n            lbl = LabelEncoder()\n            df[c] = lbl.fit_transform(df[c].fillna('NA').astype(str))\n    return df\n\ncols = ['host_response_time', 'host_is_superhost', 'host_neighbourhood',\n        'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed',\n        'property_type', 'room_type', 'bathrooms_text', 'review_scores_rating', 'instant_bookable']\n\ndata = label_encoding(data, cols)\n\n# \u9010\u4e00\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\ndata.head()","0dbda143":"# %\u304c\u3064\u3044\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u76f4\u3059\ndata['host_response_rate'] = data['host_response_rate'].replace('%', '', regex=True).astype('int', errors='ignore')\ndata['host_acceptance_rate'] = data['host_acceptance_rate'].replace('%', '', regex=True).astype('int', errors='ignore')\n\n# \u9010\u4e00\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\ndata.head()","db88618b":"# \u6c42\u3081\u305f\u3044\u5217\ntarget = [\"price\"]\n\n# \u6b21\u306e\u5b66\u7fd2\u3067\u4f7f\u3046\u4e0a\u3067\u90fd\u5408\u304c\u826f\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\nx_train_df = data[:len(train_df)].copy() # train.csv \u306e\u7279\u5fb4\u91cf\nx_test_df = data[len(train_df):].copy()  # test.csv  \u306e\u7279\u5fb4\u91cf\ny_train_df = x_train_df[target].values   # train.csv \u306e\u76ee\u7684\u5909\u6570 (price)\n\n# \u8aac\u660e\u5909\u6570\u304b\u3089\u76ee\u7684\u5909\u6570\u3092\u53d6\u308a\u9664\u3044\u3066\u304a\u304d\u307e\u3059\nx_train_df.drop(target, axis=1, inplace=True)\nx_test_df.drop(target, axis=1, inplace=True)\n\n# \u65e5\u4ed8\u306e\u5217\u306f\u3082\u3046\u4f7f\u308f\u306a\u3044\u306e\u3067\u53d6\u308a\u9664\u3044\u3066\u304a\u304d\u307e\u3059\ndrop_cols = ['host_since', 'first_review', 'last_review']\nx_train_df.drop(drop_cols, axis=1, inplace=True)\nx_test_df.drop(drop_cols, axis=1, inplace=True)\n\nfeatures = x_train_df.columns.values\nx_train_df = x_train_df.values\nx_test_df = x_test_df.values\nprint('x_train_df: {} samples, {} columns'.format(x_train_df.shape[0], x_train_df.shape[1]))\nprint('x_test_df: {} samples, {} columns'.format(x_test_df.shape[0], x_test_df.shape[1]))","b0a034f6":"# \u5165\u308c\u7269\ny_preds = [] # \u4e88\u6e2c\u7d50\u679c\u5165\u308c\u5834\nmodels = []  # \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u5165\u308c\u5834\nscores = []  # \u4e88\u6e2c\u7d50\u679c\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1\u7f6e\u304d\u5834\n\n# CrossValidation\u306e\u305f\u3081\u3001\u30c7\u30fc\u30bf\u5206\u5272\u306e\u6e96\u5099\nFolds = 5\ncv = KFold(n_splits=Folds, random_state=71, shuffle=True)\n\n# LightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6e96\u5099\nparams = {\n    \"objective\": \"regression_l1\", # MAE\n    \"eta\": 0.05\n}\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(x_train_df, y_train_df))):\n    # \u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\n    X_train_, y_train_ = x_train_df[train_ix], y_train_df[train_ix]\n    X_val, y_val = x_train_df[val_ix], y_train_df[val_ix]    \n    train_dataset=lgb.Dataset(X_train_, y_train_)\n    val_dataset=lgb.Dataset(X_val, y_val, reference=train_dataset)\n    evals_result = {} # \u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u8f9e\u66f8\n    # \u5b66\u7fd2\uff01\n    model=lgb.train(params,\n                  train_dataset,\n                  valid_sets = [train_dataset, val_dataset],\n                  valid_names = ['train', 'valid'],\n                  num_boost_round=5000,\n                  early_stopping_rounds = 100,\n                  verbose_eval = 100,\n                  evals_result = evals_result)\n    print(f\"========================{i+1}\/{Folds} done!========================\")\n\n    \n    # \u6027\u80fd\u8a55\u4fa1\u306e\u305f\u3081\u4e88\u6e2c\n    y_pred = model.predict(X_val)\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u3082\u3068\u306b\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n    score = mean_absolute_error(y_val, y_pred)\n    # \u7d50\u679c\u3092\u5165\u308c\u7269\u306b\u8ffd\u52a0\n    y_preds.append(y_pred)\n    scores.append(score)\n    models.append(model)\n    # \u5b66\u7fd2\u66f2\u7dda\u306e\u53ef\u8996\u5316\n    train_metric = evals_result['train']['l1']\n    eval_metric = evals_result['valid']['l1']\n    plt.plot(train_metric, label='train')\n    plt.plot(eval_metric, label='valid')\n    plt.grid()\n    plt.legend()\n    plt.xlabel('rounds')\n    plt.ylabel('score')\n    plt.show()\n\nprint(\"===========================\u5b66\u7fd2\u5b8c\u4e86!===============================\")\nprint(f'**********************CV Score is {np.array(scores).mean()}**********************')\n","9b1891d1":"import seaborn as sns\n\ndef plot_importance(model, cols, topn=None, fname=None):\n    \n    if 'lightgbm' in str(type(model)):\n        importance = model.feature_importance(importance_type='gain')\n    \n    # calculate importance\n    cols = [str(x) for x in cols]\n    df_importance = pd.DataFrame(sorted(zip(importance, cols)), columns=['Value','Feature'])\n    df_importance.sort_values(by=\"Value\", ascending=False, inplace=True)\n    if topn is not None:\n        df_importance = df_importance.head(topn)\n    \n    # plot\n    plt.figure(figsize=(20, 10))\n    sns.barplot(x=\"Value\", y=\"Feature\", data=df_importance)\n    plt.title('Feature importance')\n    plt.tight_layout()\n    \n    # save\n    if fname is not None:\n        plt.savefig(fname)\n    else:\n        plt.show()\n\nplot_importance(model, features)","6407bb74":"y_preds=[]\nfor model in models:\n    y_pred = model.predict(x_test_df)#\u4e88\u6e2c\n    y_preds.append(y_pred)\ny_sub = np.mean(y_preds, axis=0)\ny_sub","615907af":"sub_df=pd.DataFrame({\"index\":test_df.index,\"price\":y_sub})\nsub_df.to_csv(\"submission.csv\",index=False)\nsub_df","f3ea41ab":"\u4e88\u6e2c\u5024\u3067\u3042\u308bprice\u4fa1\u683c\u304c\u3067\u3066\u304d\u307e\u3057\u305f\u3002index\u3092\u3064\u3051\u3066csv\u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046","a4c3d079":"```{note}\n(\u4ee5\u964d\u306f\u5143\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3068\u540c\u3058\u3067\u3059)\n```","0167dad7":"## \u30e2\u30c7\u30ea\u30f3\u30b0\u306b\u5411\u3051\u305f\u6e96\u5099\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u3051\u307e\u3059","8adbb3f8":"## \u305d\u306e\u4ed6\u306e\u7279\u5fb4\u91cf\u306e\u4f8b\n\n\u6d17\u9762\u6240\u30fb\u6d74\u5ba4\u306e\u6570\u3067\u3042\u308b `bathrooms_text` \u304b\u3089\u6570\u5b57\u306a\u3069\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002  \n\u307e\u305f\u3001\u6700\u5927\u53ce\u5bb9\u4eba\u6570\u3042\u305f\u308a\u306e\u30d9\u30c3\u30c9\u306e\u6570\u3001\u30d9\u30c3\u30c9\u30eb\u30fc\u30e0\u306e\u6570\u3001\u6d17\u9762\u6240\u306e\u6570\u306a\u3069\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002","46aaa53b":"\u3067\u306f\u3001\u4fdd\u5b58\u3067\u304d\u3066\u3044\u305f\u3089\u53f3\u306e\u30bf\u30d6\u304b\u3089  \nCompetitions > Submit  \n\u3092\u9078\u3093\u3067\u63d0\u51fa\u3057\u307e\u3057\u3087\u3046\uff01","66889221":"## \u65e5\u4ed8\u306e\u30ab\u30e9\u30e0\u306e\u52a0\u5de5\n\n`host_since`, `first_review`, `last_review` \u3092\u6d3b\u7528\u3057\u307e\u3059\u3002  \n\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u304b\u3089\u521d\u3081\u3066\u30ec\u30d3\u30e5\u30fc\u3055\u308c\u308b\u307e\u3067\u306e\u65e5\u6570\u3084\u3001  \n\u521d\u3081\u3066\u30ec\u30d3\u30e5\u30fc\u3055\u308c\u3066\u304b\u3089\u76f4\u8fd1\u3067\u30ec\u30d3\u30e5\u30fc\u3055\u308c\u305f\u65e5\u307e\u3067\u306e\u65e5\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002","88993ed2":"\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001[[\u904b\u55b6]\u3010Starter #2\u3011\u6a5f\u68b0\u5b66\u7fd2\u306e\u6d41\u308c](https:\/\/www.kaggle.com\/wakepon\/starter-2) \u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u5c11\u3057\u7279\u5fb4\u91cf\u52a0\u5de5\u3092\u884c\u3044\u307e\u3059\u3002  \n\u4e3b\u306b\n- \u65e5\u4ed8\u306e\u60c5\u5831\u3092\u5229\u7528\n- \u305d\u306e\u4ed6\u306e\u7279\u5fb4\u91cf (\u6d17\u9762\u6240\u306e\u6570\u306a\u3069)\n- \u6587\u5b57\u5217\u306e\u30ab\u30e9\u30e0\u3092\u6570\u91cf\u5316\n- (\u53c2\u8003: LightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u82e5\u5e72\u5909\u66f4)\n- (\u53c2\u8003: \u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9)\n\n\u3092\u884c\u3044\u307e\u3057\u305f\u3002","3f7fd68f":"# \u4e88\u6e2c\n\u3055\u3066\u3001\u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3053\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3057\u307e\u3057\u3087\u3046\u3002  \n\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306btest.csv\u306e\u7279\u5fb4\u91cf\u3067\u3042\u308bx_test_df\u3092\u8aad\u8fbc\u307e\u305b\u3066\u4e88\u6e2c\u3057\u307e\u3059","528345c0":"## host_response_rate \u3068 host_acceptance_rate \u3092\u6570\u5024\u306b\n\n\u3053\u308c\u3089\u3082 Label Encoding \u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002","56d451e9":"# \u5b66\u7fd2\n\n```{note}\n\u203b \u3053\u3053\u306f [\u904b\u55b6]\u3010Starter #2\u3011\u6a5f\u68b0\u5b66\u7fd2\u306e\u6d41\u308c\u3068\u306e\u5909\u66f4\u70b9\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u4ee5\u5916\u3042\u308a\u307e\u305b\u3093\u3002  \n\u3000\u3000\u3000\u3000\u3000\u3000num_boost_round (\u6728\u306e\u6570\u306e\u6700\u5927\u6570) \u3001early_stopping_rounds (\u904e\u5b66\u7fd2\u9632\u6b62\u306e\u3001\u65e9\u671f\u7d42\u4e86\u306e\u30d1\u30e9\u30e1\u30fc\u30bf) \u3092\u5c11\u3057\u5897\u3084\u3057\u3001\n   \u5b66\u7fd2\u7387\u3067\u3042\u308b eta\u3000\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e 0.1 \u304b\u3089 0.05 \u306b\u6e1b\u3089\u3057\u307e\u3057\u305f\u3002\n\u5143\u3005 CV: 14579.3359491307 \u3067\u3059\u306e\u3067\u3001(CV\u4e0a\u306f) \u591a\u5c11\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\n```\n\n\u3067\u306f\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002  \n\u307e\u305atrain.csv\u306e\u4e2d\u8eab\u3067\u3042\u308bx_train_df\u3068y_train_df\u3060\u3051\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\n\u4eca\u56de\u306f\u4f7f\u3044\u52dd\u624b\u306e\u826f\u3055\u3067\u6709\u540d\u306a**LightGBM**\u3068\u8a00\u3046\u30e2\u30c7\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002  \n\u4e00\u5ea6\u3067\u5168\u3066\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u305b\u305a\u3001\u305d\u308c\u305e\u308c\u5927\u304d\u304f\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046  \n[\u300c\u521d\u624bLightGBM\u300d\u3092\u3059\u308b7\u3064\u306e\u7406\u7531](https:\/\/upura.hatenablog.com\/entry\/2019\/10\/29\/184617)\n\n\u307e\u305f\u3001\u3053\u306enotebook\u306f\u81ea\u5206\u306e\u30e2\u30c7\u30eb\u306e\u5b9f\u529b\u3092\u56f3\u308b\u305f\u3081\u306b\u3001**CrossValidation**\u3068\u3044\u3046\u624b\u6cd5\u3092\u53d6\u308a\u5165\u308c\u3066\u3044\u307e\u3059\u3002  \n[Cross Validation\u3063\u3066\u4f55\uff1f](https:\/\/qiita.com\/LicaOka\/items\/c6725aa8961df9332cc7)  \n[Cross Validation\u306f\u306a\u305c\u91cd\u8981\u306a\u306e\u304b](https:\/\/upura.hatenablog.com\/entry\/2018\/12\/04\/205200)  ","96e209f0":"## \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316\n\n```{note}\n\u203b \u91cd\u8981\u5ea6\u3092\u63cf\u753b\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\n```\n\nLightGBM\u3092\u4f7f\u3046\u7279\u5178\u306e\u4e00\u3064\u3067\u3059\u3002  \n\u5404\u7279\u5fb4\u91cf\u304c\u5bbf\u6cca\u4fa1\u683c\u306b\u3069\u308c\u304f\u3089\u3044\u5f71\u97ff\u4e0e\u3048\u3066\u3044\u308b\u304b\u3001\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6 (feature importance) \u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u898b\u308b\u3053\u3068\u3067\n* \u3069\u306e\u7279\u5fb4\u91cf\u304c\u5927\u4e8b\u306a\u306e\u304b\n* \u3069\u306e\u7279\u5fb4\u91cf\u306f\u3042\u307e\u308a\u5927\u4e8b\u3067\u306f\u306a\u3044\u304b\n\u3068\u3044\u3063\u305f\u7279\u5fb4\u91cf\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002  \n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u4f8b\u3048\u3070\u91cd\u8981\u3068\u306a\u3063\u305f\u7279\u5fb4\u91cf\u306e\u524d\u51e6\u7406\u3092\u5de5\u592b\u3057\u305f\u308a\u3001\u5225\u306e\u7279\u5fb4\u91cf\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u8003\u3048\u305f\u308a\u3068\u3044\u3063\u305f\u30a4\u30f3\u30b5\u30a4\u30c8\u3092\u5f97\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n","17fcd6a4":"\u5b66\u7fd2\u304c\u3067\u304d\u307e\u3057\u305f\u3002  \n\u3069\u3046\u3084\u3089\u8a55\u4fa1\u6307\u6a19\u3092MAE\u3068\u3057\u305f\u3068\u304d\u306b14579.3359491307\u304f\u3089\u3044\u306e\u6027\u80fd\u306e\u3088\u3046\u3067\u3059\u306d\uff01  \n\u4eca\u56de\u306f\u300c\u4e88\u60f3\u4fa1\u683c\u3068\u5b9f\u969b\u306e\u4fa1\u683c\u306e\u5dee\u300d\u3092\u6c42\u3081\u3066\u3044\u308b\u306e\u3067\u3001\u5c0f\u3055\u3051\u308c\u3070\u5c0f\u3055\u3044\u307b\u3069\u5b09\u3057\u3044\u6307\u6a19\u3067\u3059\u3002\n\u30b0\u30e9\u30d5\u3067\u306f\u5b66\u7fd2\u304c\u9032\u3080\u306b\u3064\u308c\u5024\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u304f\u69d8\u5b50\u304c\u5206\u304b\u308a\u307e\u3059\u3002","20a165ba":"## \u6587\u5b57\u5217\u306a\u3069\u306e\u6570\u91cf\u5316: Label Encoding\n\n`host_neighbourhood` \u306a\u3069\u6570\u5024\u3067\u306f\u306a\u3044\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u3053\u3053\u3067\u306f Label Encoding \u3092\u9069\u7528\u3057\u307e\u3059\u3002  \nLabel Encoding \u306f\u6975\u3081\u3066\u5358\u7d14\u3067\u3001\u4f8b\u3048\u3070 `['\u3042', '\u3044', '\u3046']` \u3068\u3044\u3046\u30c7\u30fc\u30bf\u304c\u3042\u3063\u305f\u5834\u5408\u3001  \n`[0, 1, 2]` \u3068\u3044\u3046\u3088\u3046\u306b\u6587\u5b57\u5217\u3068\u3057\u3066\u306e\u8f9e\u66f8\u9806\u306b\u6570\u5b57\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002  \n\n\u4e00\u898b Label Encoding \u306b\u3088\u308a\u30c7\u30fc\u30bf\u306b\u9806\u5e8f\u95a2\u4fc2\u304c\u751f\u307e\u308c\u3066\u3057\u307e\u3044\u3001\u826f\u304f\u306a\u3055\u305d\u3046\u3067\u3059\u3002  \n\u305f\u3060\u4eca\u56de\u306f\u5f8c\u3005 LightGBM \u3068\u3044\u3046\u6728\u30d9\u30fc\u30b9\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u307e\u3059\u306e\u3067\u3001\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093 (\u4efb\u610f\u306e\u56de\u6570\u5206\u5272\u3059\u308c\u3070\u3001\u4efb\u610f\u306e\u70b9\u306b\u8fbf\u308a\u7740\u3051\u308b)\u3002  \n\u3082\u3057\u7dda\u578b\u30e2\u30c7\u30eb (LASSO\u56de\u5e30\u306a\u3069) \u3092\u884c\u3046\u5834\u5408\u306f One Hot Encoding \u306a\u3069\u306e\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002"}}