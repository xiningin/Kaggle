{"cell_type":{"3f6d476d":"code","2f7fdb5e":"code","ba57f5da":"code","5032c852":"code","75c78d2d":"code","e9dc4a16":"code","fb3c6fdb":"code","56ad573a":"code","d87f0dea":"code","437de76e":"code","8dc3c670":"code","f068a4de":"code","49d29328":"code","82993c78":"code","2eb25269":"code","04fa6b3e":"code","1abedeb3":"code","657f0b36":"code","0f2be3dd":"code","f155180d":"code","dc28b814":"code","f77e2464":"code","874d4771":"code","b57d8773":"code","35b7ceca":"code","2493ffd2":"code","b67e4277":"code","ee68f1b7":"code","e369e2a3":"code","2a323e7d":"code","62ea0afc":"code","80eaf027":"code","8370521e":"code","2456d7d4":"code","923eb881":"code","b64a871b":"markdown","9d4e5f87":"markdown","d34e7530":"markdown","f2287c54":"markdown","dd042f51":"markdown","5cfc47aa":"markdown","a63934eb":"markdown","9d731389":"markdown","12332e74":"markdown","b56f89d5":"markdown","68cc8d40":"markdown","d2d1bcb7":"markdown","4e342195":"markdown","3b2ec135":"markdown","4a3fc83b":"markdown","24f50f6b":"markdown","a2344ccd":"markdown","a5406fbb":"markdown","8f823473":"markdown","b677dc41":"markdown","2e016836":"markdown","01168f41":"markdown","4074d4bf":"markdown","c4693b79":"markdown","b2b0ba8d":"markdown","95def761":"markdown","cb805777":"markdown","983db869":"markdown","de56c337":"markdown","558d6df8":"markdown","d012e467":"markdown","d3aa2d2e":"markdown","3f2698c8":"markdown","b1e4126e":"markdown","46f98183":"markdown","bf0731f1":"markdown","2f36c6ea":"markdown","b59b9c22":"markdown","ed95dd2b":"markdown","73c03b43":"markdown","38f97020":"markdown","12a5e405":"markdown","30ba76d6":"markdown","7ed990cb":"markdown","196550f2":"markdown","58534356":"markdown","b4b31db7":"markdown","279585f6":"markdown","e68e3a6e":"markdown","ff6f0ee9":"markdown","6d1993f8":"markdown","3fcdc933":"markdown","9aa71826":"markdown","46b465ce":"markdown","a9438209":"markdown"},"source":{"3f6d476d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MultipleLocator\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f7fdb5e":"file = pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')\n\nfile.info()\n\ndata = file.copy()\ndata = data.drop(['reservation_status','reservation_status_date'], axis = 1)\ndata['agent'] = data['agent'].fillna(0)\ndata['children'] = data['children'].fillna(0) # fill up children value\ndata = data.dropna(subset=['country']) # drop country rows\ndata = data.reset_index(drop=True)\n","ba57f5da":"data['new_month'] = data['arrival_date_month'].map({'July':'07', 'August':'08', 'September':'09', 'October':'10', 'November':'11', 'December':'12',\n       'January':'01', 'February':'02', 'March':'03', 'April':'04', 'May':'05', 'June':'06'})\ndata['total_stay_night'] = data['stays_in_weekend_nights']+data['stays_in_week_nights']\ndata['total_transactions'] = data['adr']*data['total_stay_night']\ndata['time'] = data['arrival_date_year'].apply(str)+data['new_month']\n\ndef HotelSituation(dfvalue):\n    temp_df1 = dfvalue.groupby(['time'])['is_canceled'].value_counts().unstack()\n    temp_df1['total'] = temp_df1[0]+temp_df1[1] # the total number of booking\n    temp_df1['cancelation'] = temp_df1[1]\/temp_df1['total'] # the ratio of booking's cancelation\n    temp_df2 = dfvalue.groupby(['time'])[['total_transactions']].sum() #the sum of all lodging transactions\n    temp_df = pd.concat([temp_df1,temp_df2],axis=1)\n    return temp_df\n\ncity_hotel_data = data[data['hotel']=='City Hotel']\nresort_hotel_data = data[data['hotel']=='Resort Hotel']\ncity_hotel_data_df = HotelSituation(city_hotel_data)\nresort_hotel_data_df = HotelSituation(resort_hotel_data)\n\n# plot\nk = 1\nfor column in ('total','total_transactions','cancelation'):\n    y1 = [z for z in city_hotel_data_df[column].values]\n    y2 = [z for z in resort_hotel_data_df[column].values]\n    x = [str(z) for z in city_hotel_data_df.index.values]\n    ax = plt.subplot(3,1,k)\n    rects1 = ax.plot(x, y1, label='City Hotel')\n    rects1 = ax.plot(x, y2, label='Resort Hotel')\n    ax.set_ylabel(column)\n    ax.set_title(column+' variable changes as time goes by', fontdict={'weight': 'normal', 'size': 8})\n    plt.xticks(fontsize='x-small',rotation=30)\n    plt.subplots_adjust(hspace=1,right=0.8)\n    plt.legend(loc=(1.02,0))\n    k = k+1\n\nplt.show()","5032c852":"# canceled_ratio by assigned_room_type and hotel\ntemp_df = data.groupby(['hotel','assigned_room_type'])['is_canceled'].value_counts().unstack().unstack(level=0)\ntemp_df['city_total'] = temp_df[0]['City Hotel'].fillna(0)+ temp_df[1]['City Hotel'].fillna(0)\ntemp_df['city_cancelation'] = temp_df[1]['City Hotel'].fillna(0)\/temp_df['city_total']\ntemp_df['resort_total'] = temp_df[0]['Resort Hotel'].fillna(0)+ temp_df[1]['Resort Hotel'].fillna(0)\ntemp_df['resort_cancelation'] = temp_df[1]['Resort Hotel'].fillna(0)\/temp_df['resort_total']\ny1 = [z for z in temp_df['city_cancelation']]\ny2 = [z for z in temp_df['city_total']]\ny3 = [z for z in temp_df['resort_cancelation']]\ny4 = [z for z in temp_df['resort_total']]\nlabels = [z for z in temp_df.index.values]\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\nax = plt.subplot(2,1,1)\nrects1 = ax.bar(x - width\/2, y1, width, label='City Hotel')\nrects2 = ax.bar(x + width\/2, y3, width, label='Resort Hotel')\nax.set_ylabel('canceled_ratio')\nax.set_xlabel('assigned_room_type')\nax.set_title('canceled_ratio by assigned_room_type and hotel', fontdict={'weight': 'normal', 'size': 8})\nax.set_xticks(x)\nax.set_xticklabels(labels)\nplt.legend(loc=(1.02,0))\nplt.subplots_adjust(right=0.8,hspace=0.5)\n\n# total_transactions by assigned_room_type and hotel\ntemp_df = data.groupby(['hotel','assigned_room_type'])['total_transactions'].mean().unstack(level=0)\ny1 = [z for z in temp_df['City Hotel']]\ny2 = [z for z in temp_df['Resort Hotel']]\nlabels = [z for z in temp_df.index.values]\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\nax = plt.subplot(2,1,2)\nrects1 = ax.bar(x - width\/2, y1, width, label='City Hotel')\nrects2 = ax.bar(x + width\/2, y2, width, label='Resort Hotel')\nax.set_ylabel('canceled_ratio')\nax.set_xlabel('assigned_room_type')\nax.set_title('total_transactions by assigned_room_type and hotel', fontdict={'weight': 'normal', 'size': 8})\nax.set_xticks(x)\nax.set_xticklabels(labels)\nplt.legend(loc=(1.02,0))\nplt.subplots_adjust(right=0.8)\nplt.show()\n\n\n# heatmap of change details\ntemp_df11 = data[data['hotel']=='City Hotel'].groupby('assigned_room_type')['reserved_room_type'].value_counts().unstack().fillna(0)\ntemp_df21 = data[data['hotel']=='Resort Hotel'].groupby('assigned_room_type')['reserved_room_type'].value_counts().unstack().fillna(0)\n\ntemp_df12 = data[(data['is_canceled']==1)&(data['hotel']=='City Hotel')].groupby('assigned_room_type')['reserved_room_type'].value_counts().unstack().fillna(0)\ntemp_df22 = data[(data['is_canceled']==1)&(data['hotel']=='Resort Hotel')].groupby('assigned_room_type')['reserved_room_type'].value_counts().unstack().fillna(0)\n\ntemp_df13 = temp_df12\/temp_df11 # cancelation\ntemp_df23 = temp_df22\/temp_df21 # cancelation\n\nk = 1\nfor df_t in (temp_df11, temp_df21, temp_df13, temp_df23):\n    ax = plt.subplot(2,2,k)\n    cmap = sns.cubehelix_palette(start = 1.5, rot = 3, gamma=0.8, as_cmap = True)\n    sns.heatmap(df_t, linewidths = 0.05, ax = ax, vmax=df_t.values.max(), vmin=df_t.values.min(), cmap=cmap, robust=True) \n    if k==1:\n        ax.set_title('The total by room type in City Hotel', fontdict={'weight': 'normal', 'size': 8})\n    elif k==2:\n        ax.set_title('The total by room type in Resort Hotel', fontdict={'weight': 'normal', 'size': 8})\n    elif k==3:\n        ax.set_title('The canceled ratio by room type in City Hotel', fontdict={'weight': 'normal', 'size': 8})\n    else:\n        ax.set_title('The canceled ratio by room type in Resort Hotel', fontdict={'weight': 'normal', 'size': 8})\n    plt.subplots_adjust(hspace=0.5,wspace=0.5)\n    k = k+1\n\nplt.show()\n","75c78d2d":"### room_change\ndf1 = data[(data['reserved_room_type']==data['assigned_room_type'])]\ndf1['room_change'] = 'unchanged'\ndf2 = data[(data['reserved_room_type']!=data['assigned_room_type'])]\ndf2['room_change'] = 'changed'\ndata = pd.concat([df1,df2])\ndata = data.reset_index(drop=True)","e9dc4a16":"### days_in_waiting_list_new\n\ndef fun1(value):\n    if value == 0:\n        return 0 \n    else:\n        return 1\n\ndata['days_in_waiting_list_new'] = data['days_in_waiting_list'].apply(fun1)\n\n\ntemp_df = data.groupby('days_in_waiting_list_new')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0]+temp_df[1]\ntemp_df['cancelation'] = temp_df[1]\/temp_df['total']\n\ntemp_df","fb3c6fdb":"temp_df = data.groupby(['distribution_channel','hotel'])['is_canceled'].value_counts().unstack().unstack()\ntemp_df['city_total'] = temp_df[0]['City Hotel'].fillna(0)+temp_df[1]['City Hotel'].fillna(0)\ntemp_df['resort_total'] = temp_df[0]['Resort Hotel'].fillna(0)+temp_df[1]['Resort Hotel'].fillna(0)\ntemp_df['city_cancelation'] = temp_df[1]['City Hotel'].fillna(0)\/temp_df['city_total']\ntemp_df['resort_cancelation'] = temp_df[1]['Resort Hotel'].fillna(0)\/temp_df['resort_total']\n\ny = [z for z in temp_df['city_total'].values]\nx = [z for z in temp_df.index]\nplt.subplot(2,2,1)\nplt.pie(y,startangle=90)\nplt.axis('equal')\nplt.title('The booking percentage in\\n City Hotel', fontdict={'weight': 'normal', 'size': 8})\nplt.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\n\ny = [z for z in temp_df['resort_total'].values]\nx = [z for z in temp_df.index]\nplt.subplot(2,2,2)\nplt.pie(y,startangle=90)\nplt.axis('equal')\nplt.title('The booking percentage in\\n Resort Hotel', fontdict={'weight': 'normal', 'size': 8})\nplt.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\n\ny1 = [z for z in temp_df['city_cancelation'].values]\ny2 = [z for z in temp_df['resort_cancelation'].values]\nlabels = [z for z in temp_df.index.values]\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\nax = plt.subplot(2,1,2)\nrects1 = ax.bar(x - width\/2, y1, width, label='City Hotel')\nrects2 = ax.bar(x + width\/2, y2, width, label='Resort Hotel')\nax.set_ylabel('canceled_ratio')\nax.set_xlabel('distribution_channel')\nax.set_title('canceled_ratio by distribution_channel and hotel', fontdict={'weight': 'normal', 'size': 8})\nax.set_xticks(x)\nax.set_xticklabels(labels)\nplt.legend(loc=(1.02,0))\nplt.subplots_adjust(right=0.8)\n\nplt.show()","56ad573a":"# unreasonable records\ndf1 = data[(data['adults']==0)&(data['children']==0)&(data['babies']==0)]\ndf2 = data[(data['adults']==0)&(data['children']>0)&(data['babies']>0)]\ndf3 = data[((data['babies']+ data['children'])\/data['adults']>4)&(data['adults']>0)]\ntemp_df = pd.concat([df1,df2,df3])\ndata = data.drop(temp_df.index)\ndata = data.reset_index(drop=True)\n\ndata['total_customer'] = data['adults']+data['children']+data['babies']\n","d87f0dea":"k = 1\nfor column in ['adults','children','babies']:\n    temp_df = data.groupby(column)['is_canceled'].value_counts().unstack()\n    temp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\n    temp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n    y1 = [z for z in temp_df['cancelation']]\n    y2 = [z for z in temp_df['total']]\n    x = [int(z) for z in temp_df.index.values]\n    ax = plt.subplot(2,3,k)\n    plt.plot(x,y1,linestyle='--',alpha=0.5,color='r')\n    plt.title(column)\n    plt.ylabel('canceled_tatio')\n    plt.subplots_adjust(wspace=0.5)\n    if k == 1:\n        xmajorLocator = MultipleLocator(10)\n    else:\n        xmajorLocator = MultipleLocator(1)\n    ax.xaxis.set_major_locator(xmajorLocator)\n    plt.subplot(2,3,k+3)\n    plt.pie(y2)\n    plt.axis('equal')\n    plt.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\n    k = k+1\n\nplt.show()\n","437de76e":"## family ##\ndf1 = data[data['babies']>0]\ndf1['family'] = 0\ndf2 = data[(data['adults']==0)&(data['babies']==0)]\ndf2['family'] = 1\ndf3 = data[(data['adults']==1)&(data['children']==0)&(data['babies']==0)]\ndf3['family'] = 2\ndf4 = data[(data['adults']==2)&(data['children']==0)&(data['babies']==0)]\ndf4['family'] = 3\ndf5 = data[(data['adults']>2)&(data['children']==0)&(data['babies']==0)]\ndf5['family'] = 4\ndf6 = data[((data['adults']==2)|(data['adults']==1))&(data['children']>0)&(data['babies']==0)]\ndf6['family'] = 5\ndf7 = data[(data['adults']>2)&(data['children']>0)&(data['babies']==0)]\ndf7['family'] = 6\ndata = pd.concat([df1,df2,df3,df4,df5,df6,df7])\ndata = data.reset_index(drop=True)","8dc3c670":"## figure of family ##\ntemp_df = data.groupby('family')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nplt.bar(x,y1,alpha=0.4, color='b')\nplt.ylabel('canceled_ratio')\nplt.subplots_adjust(wspace=0.4)\nplt.title('family')\nxmajorLocator = MultipleLocator(1)\nax.xaxis.set_major_locator(xmajorLocator)\nplt.subplot(2,1,2)\nplt.pie(y2)\nplt.axis('equal')\nplt.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\nplt.show()","f068a4de":"temp_df = data.groupby(['country'])['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+temp_df[1].fillna(0)\ntemp_df['percentage'] = temp_df['total']\/temp_df['total'].sum()\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ntemp_df = temp_df.sort_values('total',ascending=False)\n\ntemp_df","49d29328":"temp_df = data.groupby('country')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n\ntemp_df1 = temp_df[(temp_df['total']<=100)]\nclass1 = [z for z in temp_df1.index.values]\ntemp_df2 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']<=0.1)]\nclass2 = [z for z in temp_df2.index.values]\ntemp_df3 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.1)&(temp_df['cancelation']<=0.3)]\nclass3 = [z for z in temp_df3.index.values]\ntemp_df4 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.3)&(temp_df['cancelation']<=0.5)]\nclass4 = [z for z in temp_df4.index.values]\ntemp_df5 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.5)]\nclass5 = [z for z in temp_df5.index.values]\n\n\ndef fun3(values):\n    if values in class1:\n        return 0\n    elif values in class2:\n        return 1\n    elif values in class3:\n        return 2\n    elif values in class4:\n        return 3\n    elif values in class5:\n        return 4\n    else:\n        return 0\n\ndata['country_new'] = data['country'].apply(fun3)","82993c78":"temp_df = data.groupby('country_new')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nlabels = ['class1','class2','class3','class4','class5']\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.set_title('canceled_ratio by country_new')\nplt.subplots_adjust(hspace=0.5)\n\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in country_new variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=labels)\nplt.show()\n","2eb25269":"temp_df = data.groupby(['customer_type'])['market_segment'].value_counts().unstack().fillna(0)\n\ntemp_df11 = data.groupby(['customer_type'])['market_segment'].value_counts().unstack().fillna(0)\ntemp_df12 = data[data['is_canceled']==1].groupby('customer_type')['market_segment'].value_counts().unstack().fillna(0)\ntemp_df1 = temp_df12\/temp_df11\n\ntemp_df1","04fa6b3e":"df1 = data[(data['market_segment']=='Groups')&((data['customer_type']=='Contract')|(data['customer_type']=='Transient'))]\ndf1['customer_type_new'] = 0\ndf2 = data[(data['market_segment']=='Groups')&(data['customer_type']=='Transient-Party')]\ndf2['customer_type_new'] = 1\ndf3 = data[(data['market_segment']=='Complementary')|(data['market_segment']=='Corporate')|(data['market_segment']=='Direct')]\ndf3['customer_type_new'] = 2\ndf4 = data[((data['market_segment']=='Online TA')|(data['market_segment']=='Offline TA\/TO'))&(data['customer_type']=='Transient')]\ndf4['customer_type_new'] = 3\ndf5 = data[(data['market_segment']=='Online TA')&(data['customer_type']=='Transient-Party')]\ndf5['customer_type_new'] = 4\n\ntemp_df = pd.concat([df1,df2,df3,df4,df5])\ndf6 = data.drop(temp_df.index)\ndf6['customer_type_new'] = 5\n\ndata = pd.concat([temp_df,df6])\ndata = data.reset_index(drop=True)\n","1abedeb3":"#### figure\n\ntemp_df = data.groupby('customer_type_new')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nlabels = ['class1','class2','class3','class4','class5','class6']\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.set_title('canceled_ratio by customer_type_new')\nplt.subplots_adjust(hspace=0.5)\n\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in customer_type_new variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=labels)\nplt.show()\n","657f0b36":"def fun2(values):\n    if values == 0:\n        return 0\n    else:\n        return 1\n\ndata['company_new'] = data['company'].fillna(0).apply(fun2)\n\n## agent_new\ntemp_df = data[data['agent']>0].groupby('agent')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n\ntemp_df1 = temp_df[(temp_df['total']<=100)]\nclass1 = [z for z in temp_df1.index.values]\ntemp_df2 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']<=0.1)]\nclass2 = [z for z in temp_df2.index.values]\ntemp_df3 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.1)&(temp_df['cancelation']<=0.3)]\nclass3 = [z for z in temp_df3.index.values]\ntemp_df4 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.3)&(temp_df['cancelation']<=0.5)]\nclass4 = [z for z in temp_df4.index.values]\ntemp_df5 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.5)&(temp_df['cancelation']<=0.8)]\nclass5 = [z for z in temp_df5.index.values]\ntemp_df6 = temp_df[(temp_df['total']>100)&(temp_df['cancelation']>0.8)]\nclass6 = [z for z in temp_df6.index.values]\n\ndef fun3(values):\n    if values == 0:\n        return 0\n    elif values in class1:\n        return 1\n    elif values in class2:\n        return 2\n    elif values in class3:\n        return 3\n    elif values in class4:\n        return 4\n    elif values in class5:\n        return 5\n    elif values in class6:\n        return 6\n    else:\n        return 1\n\ndata['agent_new'] = data['agent'].apply(fun3)\n","0f2be3dd":"k = 1\nfor column in ['company_new','agent_new']:\n    temp_df = data.groupby(column)['is_canceled'].value_counts().unstack()\n    temp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\n    temp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n    y1 = [z for z in temp_df['cancelation']]\n    y2 = [z for z in temp_df['total']]\n    if k == 1:\n        labels = ['c1','c2']\n    else:\n        labels = ['c1','c2','c3','c4','c5','c6','c7']\n    x = [z for z in temp_df.index.values]\n    ax = plt.subplot(2,2,k)\n    ax.bar(x,y1,alpha=0.4, color='b')\n    ax.set_ylabel('canceled_ratio', fontdict={'weight': 'normal', 'size': 8})\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels, fontdict={'weight': 'normal', 'size': 8})\n    ax.set_title('canceled_ratio by '+column, fontdict={'weight': 'normal', 'size': 8})\n    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n    ax = plt.subplot(2,2,k+2)\n    ax.pie(y2, startangle=90)\n    ax.axis('equal')\n    ax.set_title('The percentage of different classes in\\n '+column+' variable', fontdict={'weight': 'normal', 'size': 8})\n    ax.legend(loc='best',ncol=2,fontsize='xx-small',labels=labels)\n    k = k+1\n\nplt.show()\n","f155180d":"######### is_repeated_guest\ntemp_df = data.groupby('is_repeated_guest')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,3,1)\nplt.bar(x,y1,alpha=0.4, color='b')\nplt.ylabel('canceled_ratio')\nplt.subplots_adjust(wspace=0.5)\nplt.title('is_repeated_guest', fontdict={'weight': 'normal', 'size': 8})\nxmajorLocator = MultipleLocator(1)\nax.xaxis.set_major_locator(xmajorLocator)\nplt.subplot(2,3,4)\nplt.bar(x,y2)\nplt.ylabel('total_num')\n\n######### previous_cancellations + previous_bookings_not_canceled\nk = 2\nfor column in ['previous_cancellations','previous_bookings_not_canceled']:\n    temp_df = data.groupby(column)['is_canceled'].value_counts().unstack()\n    temp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\n    temp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n    y1 = [z for z in temp_df['cancelation']]\n    y2 = [z for z in temp_df['total']]\n    x = [z for z in temp_df.index.values]\n    ax = plt.subplot(2,3,k)\n    plt.plot(x,y1,alpha=0.4, color='b')\n    plt.subplots_adjust(wspace=0.5)\n    plt.title(column, fontdict={'weight': 'normal', 'size': 8})\n    xmajorLocator = MultipleLocator(10)\n    ax.xaxis.set_major_locator(xmajorLocator)\n    plt.subplot(2,3,k+3)\n    plt.bar(x,y2)\n    k = k+1\n\nplt.show()\n","dc28b814":"df1 = data[(data['previous_bookings_not_canceled']==0)&(data['previous_cancellations']==0)]\ndf1['new_previous_cancellations'] = 0\ndf2 = data[(data['previous_bookings_not_canceled']==0)&(data['previous_cancellations']>0)]\ndf2['new_previous_cancellations'] = 1\ndf3 = data[(data['previous_bookings_not_canceled']>0)&(data['previous_cancellations']==0)]\ndf3['new_previous_cancellations'] = 2\ndf4 = data[(data['previous_bookings_not_canceled']>0)&(data['previous_cancellations']>0)]\ndf4['new_previous_cancellations'] = 3\ndata = pd.concat([df1,df2,df3,df4])\n","f77e2464":"temp_df = data.groupby('new_previous_cancellations')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nlabels = ['class1','class2','class3','class4']\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.set_title('canceled_ratio by new_previous_cancellations')\nplt.subplots_adjust(hspace=0.5)\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in new_previous_cancellations variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=labels)\n\nplt.show()\n","874d4771":"def fun4(value):\n    if value=='Undefined':\n        return 'SC'\n    else:\n        return value\n\ndata['meal'] = data['meal'].apply(fun4)\n\n\n#### figure\ntemp_df = data.groupby('meal')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(x)\nax.set_title('canceled_ratio by new_previous_cancellations')\nplt.subplots_adjust(hspace=0.5)\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in new_previous_cancellations variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\n\nplt.show()\n","b57d8773":"temp_df = data.groupby('deposit_type')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(x)\nax.set_title('canceled_ratio by deposit_type')\nplt.subplots_adjust(hspace=0.5)\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in deposit_type variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=x)\n\nplt.show()","35b7ceca":"k = 1\nfor column in ['booking_changes','required_car_parking_spaces','total_of_special_requests']:\n    temp_df = data.groupby(column)['is_canceled'].value_counts().unstack()\n    temp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\n    temp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n    y1 = [z for z in temp_df['cancelation']]\n    y2 = [z for z in temp_df['total']]\n    x = [z for z in temp_df.index.values]\n    ax = plt.subplot(2,3,k)\n    ax.plot(x,y1,alpha=0.4, color='b')\n    xmajorLocator = MultipleLocator(2)\n    ax.xaxis.set_major_locator(xmajorLocator)\n    plt.subplots_adjust(wspace=0.5)\n    plt.title(column, fontdict={'weight': 'normal', 'size': 8})\n    plt.subplot(2,3,k+3)\n    plt.bar(x,y2)\n    k = k+1\n\nplt.show()\n","2493ffd2":"### new_required_car_parking_spaces\ndef fun51(value):\n    if value > 0:\n        return 1\n    else: \n        return 0\n\ndata['new_required_car_parking_spaces'] = data['required_car_parking_spaces'].apply(fun51)\n\n### booking_changes_class\ndef fun52(value):\n    if value == 0:\n        return 0\n    elif value > 0 and value <= 5:\n        return 1\n    elif value > 5:\n        return 2\n\ndata['booking_changes_class'] = data['booking_changes'].apply(fun52)\n","b67e4277":"temp_df = data.groupby('booking_changes_class')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nax = plt.subplot()\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(x)\nax.set_title('canceled_ratio by booking_changes_class')\n\nplt.show()\n","ee68f1b7":"temp_df = data.groupby('lead_time')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nx = [z for z in temp_df.index.values]\nfig = plt.figure()\nax = plt.subplot(2,1,1)\nrects1 = ax.scatter(x, y1)\nax.set_ylabel('cancel_ratio')\nax.set_xlabel('lead_time')\nplt.subplots_adjust(wspace=0.4,hspace=0.6)\nax = plt.subplot(2,1,2)\nrects1 = ax.bar(x, y2)\nax.set_ylabel('total')\nax.set_xlabel(column)\nplt.subplots_adjust(wspace=0.4)\n\nplt.show()","e369e2a3":"def fun6(value):\n    if value == 0:\n        return 0\n    elif value > 0 and value <= 7:\n        return 1\n    elif value > 7 and value <= 14:\n        return 2\n    elif value > 14 and value <= 30:\n        return 3\n    elif value > 30 and value <= 60:\n        return 4\n    elif value > 60 and value <= 90:\n        return 5\n    elif value > 90 and value <= 220:\n        return 6\n    else:\n        return 7\n         \n\ndata['new_lead_time'] = data['lead_time'].apply(fun6)\n","2a323e7d":"temp_df = data.groupby('new_lead_time')['is_canceled'].value_counts().unstack()\ntemp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\ntemp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\ny1 = [z for z in temp_df['cancelation']]\ny2 = [z for z in temp_df['total']]\nlabels = ['class1','class2','class3','class4','class5','class6','class7','class8']\nx = [z for z in temp_df.index.values]\nax = plt.subplot(2,1,1)\nax.bar(x,y1,alpha=0.4, color='b')\nax.set_ylabel('canceled_ratio')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.set_title('canceled_ratio by new_lead_time')\nplt.subplots_adjust(hspace=0.5)\nax = plt.subplot(2,1,2)\nax.pie(y2, startangle=90)\nax.axis('equal')\nax.set_title('The percentage of different classes in new_lead_time variable')\nax.legend(loc='best',ncol=2,fontsize='xx-small',labels=labels)\n\nplt.show()\n","62ea0afc":"\nk = 1\nfor column in ['total_stay_night','stays_in_weekend_nights','stays_in_week_nights']:\n    temp_df = data.groupby(column)['is_canceled'].value_counts().unstack()\n    temp_df['total'] = temp_df[0].fillna(0)+ temp_df[1].fillna(0)\n    temp_df['cancelation'] = temp_df[1].fillna(0)\/temp_df['total']\n    y1 = [z for z in temp_df['cancelation']]\n    y2 = [z for z in temp_df['total']]\n    x = [z for z in temp_df.index.values]\n    ax = plt.subplot(2,3,k)\n    ax.plot(x,y1,alpha=0.4, color='b')\n    xmajorLocator = MultipleLocator(5)\n    ax.xaxis.set_major_locator(xmajorLocator)\n    plt.subplots_adjust(wspace=0.6)\n    plt.title(column, fontdict={'weight': 'normal', 'size': 8})\n    plt.subplot(2,3,k+3)\n    plt.bar(x,y2)\n    k = k+1\n\nplt.show()\n\n","80eaf027":"qualitative_data = pd.DataFrame()\nqualitative_data['is_canceled'] = data['is_canceled']\nqualitative_data['hotel'] = data['hotel'].map({'Resort Hotel':1, 'City Hotel':0})\nqualitative_data['arrival_date_month_new'] = data['arrival_date_month'].map({'July':6, 'August':7, 'September':8, 'October':9, 'November':10, 'December':11,\n       'January':0, 'February':1, 'March':2, 'April':3, 'May':4, 'June':5})\nqualitative_data['arrival_date_week_number'] = data['arrival_date_week_number']\nqualitative_data['arrival_date_day_of_month'] = data['arrival_date_day_of_month']\nqualitative_data['market_segment'] = data['market_segment'].map({'Direct':0, 'Corporate':1, 'Online TA':2, 'Offline TA\/TO':3,\n       'Complementary':4, 'Groups':5, 'Undefined':6, 'Aviation':7})\nqualitative_data['distribution_channel'] = data['distribution_channel'].map({'Direct':0, 'Corporate':1, 'TA\/TO':2, 'Undefined':3, 'GDS':4})\nqualitative_data['is_repeated_guest'] = data['is_repeated_guest']\nqualitative_data['assigned_room_type'] = data['assigned_room_type'].map({'C':0, 'A':1, 'D':2, 'E':3, 'G':4, 'F':5, 'I':10, 'B':8, 'H':6, 'L':7, 'K':11, 'P':9})\nqualitative_data['deposit_type'] = data['deposit_type'].map({'No Deposit':0, 'Refundable':1, 'Non Refund':2})\nqualitative_data['customer_type'] = data['customer_type'].map({'Transient':0, 'Contract':1, 'Transient-Party':2, 'Group':3})\n\nquantitative_data = pd.DataFrame()\nquantitative_data['lead_time'] = data['lead_time']\nquantitative_data['stays_in_weekend_nights'] = data['stays_in_weekend_nights']\nquantitative_data['stays_in_week_nights'] = data['stays_in_week_nights']\nquantitative_data['adults'] = data['adults']\nquantitative_data['children'] = data['children']\nquantitative_data['babies'] = data['babies']\nquantitative_data['previous_cancellations'] = data['previous_cancellations']\nquantitative_data['previous_bookings_not_canceled'] = data['previous_bookings_not_canceled']\nquantitative_data['booking_changes'] = data['booking_changes']\nquantitative_data['days_in_waiting_list'] = data['days_in_waiting_list']\nquantitative_data['adr'] = data['adr']\nquantitative_data['required_car_parking_spaces'] = data['required_car_parking_spaces']\nquantitative_data['total_of_special_requests'] = data['total_of_special_requests']\n\nfrom sklearn.preprocessing import MinMaxScaler\nquantitative_data_minmaxscaler = pd.DataFrame(MinMaxScaler().fit_transform(quantitative_data))\nquantitative_data_minmaxscaler.columns = quantitative_data.columns\n\n\nnew_data1 = pd.concat([qualitative_data, quantitative_data_minmaxscaler],axis=1)\n","8370521e":"#######################   DataModel  #######################\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\ny = new_data1['is_canceled'].values\nX = new_data1.drop(['is_canceled'], axis = 1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n#########  DecisionTree  ########\nclf_tree = tree.DecisionTreeClassifier()\nclf_tree = clf_tree.fit(X_train, y_train)\nclf_tree_predict = clf_tree.predict(X_test)\n\n#########  RandomForest  ########\nclf_randomtree = RandomForestClassifier(n_estimators=100)\nclf_randomtree = clf_randomtree.fit(X_train, y_train)\nclf_randomtree_predict = clf_randomtree.predict(X_test)\n\n#########  GradientBoosting  ########\nclf_GradientBoosting = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,max_depth=1, random_state=0)\nclf_GradientBoosting = clf_GradientBoosting.fit(X_train, y_train)\nclf_GradientBoosting_predict = clf_GradientBoosting.predict(X_test)\n\n\nfor clf, label in zip([clf_tree, clf_randomtree, clf_GradientBoosting], ['Decision Tree', 'Random Forest', 'Gradient Boosting']):\n    scores = cross_val_score(clf, X_test, y_test, cv=5, scoring='accuracy')\n    print(\"Accuracy: %0.4f (+\/- %0.4f) [%s]\" % (scores.mean(), scores.std(), label))\n","2456d7d4":"new_variable_data = pd.DataFrame()\nnew_variable_data['room_change'] = data['room_change'].map({'changed':1,'unchanged':0})\nnew_variable_data['days_in_waiting_list_new'] = data['days_in_waiting_list_new']\nnew_variable_data['family'] = data['family']\nnew_variable_data['country_new'] = data['country_new']\nnew_variable_data['customer_type_new'] = data['customer_type_new']\nnew_variable_data['company_new'] = data['company_new']\nnew_variable_data['agent_new'] = data['agent_new']\nnew_variable_data['new_previous_cancellations'] = data['new_previous_cancellations']\nnew_variable_data['booking_changes_class'] = data['booking_changes_class']\nnew_variable_data['new_required_car_parking_spaces'] = data['new_required_car_parking_spaces']\nnew_variable_data['new_lead_time'] = data['new_lead_time']\n\nnew_data2 = pd.concat([qualitative_data, quantitative_data_minmaxscaler, new_variable_data],axis=1)\n","923eb881":"y = new_data2['is_canceled'].values\nX = new_data2.drop(['is_canceled'], axis = 1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n#########  DecisionTree  ########\nclf_tree = tree.DecisionTreeClassifier()\nclf_tree = clf_tree.fit(X_train, y_train)\nclf_tree_predict = clf_tree.predict(X_test)\n\n#########  RandomForest  ########\nclf_randomtree = RandomForestClassifier(n_estimators=100)\nclf_randomtree = clf_randomtree.fit(X_train, y_train)\nclf_randomtree_predict = clf_randomtree.predict(X_test)\n\n#########  GradientBoosting  ########\nclf_GradientBoosting = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,max_depth=1, random_state=0)\nclf_GradientBoosting = clf_GradientBoosting.fit(X_train, y_train)\nclf_GradientBoosting_predict = clf_GradientBoosting.predict(X_test)\n\n\nfor clf, label in zip([clf_tree, clf_randomtree, clf_GradientBoosting], ['Decision Tree', 'Random Forest', 'Gradient Boosting']):\n    scores = cross_val_score(clf, X_test, y_test, cv=5, scoring='accuracy')\n    print(\"Accuracy: %0.4f (+\/- %0.4f) [%s]\" % (scores.mean(), scores.std(), label))\n","b64a871b":"It can be found that Non Refund has the highest ratio of cancelation.","9d4e5f87":"#### 2.2.2.5 number of days that booking in advance","d34e7530":"### 2.1.2 Booking Response","f2287c54":"**For hotels, the increase of total number of booking and sum of all lodging transactions is good, but the high ratio of booking's cancelation is the problem.**\n\nNext, I'll analyze variables related to the cancelation.","dd042f51":"#### 2.2.1.3 customers' type","5cfc47aa":"### 2.1.3 Distribution Channel ","a63934eb":"For customers, the variables can be sorted into 2 parts:\n* Basic information. It contains the number of customers, country information and customers' type.\n* The behavior. It contains customers' previous booking, the need for meal, their deposit type, special requests, number of days that booking in advance and number of stay nights.","9d731389":"### 2.2.2 The behavior","12332e74":"#### 2.2.1.1 the number of customers","b56f89d5":"For agent and company variables, their values ranges are large. And their number of booking and ratio of cancelation vary from values. I conctruct two new variable named agent_new and company_new.","68cc8d40":"I find many unreasonable records and delete them.\n","d2d1bcb7":"#### 2.2.2.1 customers' previous booking","4e342195":"For hotels, the variables can be sorted into 3 sides:\n* room type. According to the definations, I think assigned_room_type is more close to customers' actual situation then reserved_room_type. Also, based on adr variable and assigned_room_type variable, average transation per room type can be calculated (average transation per room type = adr*total_stay_night\/the number of room type).\n* booking response. The days_in_waiting_list can indicate hotels' booking response speed.\n* distribution channel. It is the distribution_channel variable in the dataset.","3b2ec135":"Based on these conclusions, I construct a new variable named customer_type_new.","4a3fc83b":"It can be concluded that:\n* Usually, the number of adults varies from 1 to 3, and the number of adults varies from 0 to 2. The number of babies varies from 0 to 1.\n* When the number of adults is higher than a particular value, the ratio of cancelation is 1.\n* The booking with babies has a lower ratio of cancelation than booking without a baby.","24f50f6b":"It can be found that the best model is RandomForest model. Its accuracy is 0.84.","a2344ccd":"In this part, I'll analyze the state of resort hotel and city hotel from 3 ways:\n* the total number of booking. \n* the sum of all lodging transactions. It can be calculated by the defination of adr variable.\n* the ratio of booking's cancelation.","a5406fbb":"The dataset has 32 variables. And the task is to predict the possibility of a booking for a hotel, which means that the variables should have been obtained before customers check in or cancel the booking, **so I drop the variables reservation_status and reservation_status_date.**","8f823473":"Based on the analysis of variables, I choose original variables and the new constructed variables to model.","b677dc41":"## 3.1 Model with original variables","2e016836":"#### 2.2.2.6 number of stay nights","01168f41":"# 1. State of hotels","4074d4bf":"### 2.1.1 Room Type","c4693b79":"In the dataset, is_repeated_guest, previous_cancellations and previous_bookings_not_canceled can be used to describe customers' previous booking. It can be concluded that:\n* Most bookings come from new customer, and new customers' ratio of cancelation is much higher than repeated customers.\n* If the previous_cancellations variable is equal to 0, the ratio of cancelation is low. While if the previous_cancellations_not_canceled is equal to 0, the ratio of cancelation is high.","b2b0ba8d":"The value range of days_in_waiting_list is large, and most values are 0. I'll construct a new variable named days_in_waiting_list_new.","95def761":"When assigned_room_type differs from reserved_room_type, the ratio of cancelation is low. Thus, I'll construct a new variable named room_change.","cb805777":"According to the defination, the value of meal variable as SC and Undefined should be combined into the same class. And it can be concluded that:\n* FB has the highest ratio of cancelation, but it also has the low number of booking. **So meal variable has little relation to the ratio of cancelation.** ","983db869":"# 2. Analysis of different variables","de56c337":"For customer_type and market_segment, it can be concluded that:\n* The Transient's and the Transient-Party's number of booking is much higher than the Group's and the Contract's. The top 3 markets in terms of number of booking are TA\/TO(Online TA and Offline TA\/TO included), Direct and Groups.\n* When it refers to the ratio of cancelation, there are some conclusions: (1) the ratio of cancelation of the Transient and Contract from Groups market has exceeded 95%. (2)the ratio of cancelation of customers from Complementary, Corporate and Direct market is low.\n","558d6df8":"As the ratio of cancelation varies from different countries, I consturct a new variable named country_new.","d012e467":"There are 4 variables with missing values. \n\n* For children, agent, company variables, the missing values means there is no child, agent or company related to the booking. So their missing values can be filled with 0.\n* For country variable, the number of missing values is small. So its missing values can be deleted.","d3aa2d2e":"# 3. Modelling Details","3f2698c8":"#### 2.2.2.3 deposit type","b1e4126e":"It can be concluded that \n* The ratio of booking's cancelation and transation of different room types in the same hotel are obviously different. And the ratio of booking's cancelation and transation of different hotels in the same room type are also obviously different. **I think F room type in the City Hotel and G room type in the Resort Hotel have high price and high number of booking, but they also have high ratio of booking's cancelation.**\n* The A room type in both hotels has the highest number of booking and the highest number of changing room types. **I think it's because the A room type is a special offer to attract customers.** And the D room type has low ratio of booking's cancelation, high price and high number of booking, **so it might be the most profitable room type for the City Hotel.**","46f98183":"#### 2.2.1.2 country information","bf0731f1":"I'd like to construction a new variable named new_lead_time.","2f36c6ea":"## 2.1 Variables about hotels","b59b9c22":"#### 2.2.2.4 special requests","ed95dd2b":"So I construct a new variable named new_previous_cancellations.","73c03b43":"The country variable has 177 values, and the sum of the top 20 booking accounts for 94.21% of all booking. ","38f97020":"The number of stay nights can be calculated with the formula: total_stay_night = stays_in_weekend_nights + stays_in_week_nights.","12a5e405":"The lead_time variable can be used to describe number of days that booking in advance. It can be found that there is a positive correlation. ","30ba76d6":"### 2.2.1 Basic information","7ed990cb":"It can be found that models with new variable have a greater performance than the above ones. \n\n**For RandomForest model, it increase accuracy from 0.84 to 0.89.**\n\nGood!","196550f2":"From the figures, it can be concluded that:\n* Overall, the City Hotel's total number of booking is higher than the Resort Hotel's, and its inverted U shape is more obvious. What's more, it has increased compared with the same period last year.\n* The Resort Hotel's sum of all lodging transactions is obviously a inverted V shaped line. I guess there is a big price difference between busy and idle time in the Resort Hotel, and the price in the City Hotel is stable.\n* The City Hotel's ratio of booking's cancelation is higher than the Resort Hotel's. Also, it has increased compared with the same period last year.\n","58534356":"## 2.2 Variables about customers","b4b31db7":"It can be concluded that \n* The distribution channel with the highest number of booking is TA\/TO, which also has the highest ratio of booking cancelation.\n* For GDS, the City Hotel's ratio of cancelation is much higher than the Resort Hotel's. But GDS's number of booking is low.","279585f6":"## 3.2 Model with new variables","e68e3a6e":"I sort the original variables into qualitative variables and quantitative variables. For quantitative variables, I make the MinMaxScaler.","ff6f0ee9":"Thus, I construct a new variable named family.","6d1993f8":"In this dataset, 4 variables can be used to describe customers' type. They are customer_type, market_segment, agent and company.","3fcdc933":"Thus, I construct two new variables named new_required_car_parking_spaces and booking_changes_class.","9aa71826":"This notebook contains three parts:\n* the state of hotels\n* the analysis of variables related to cancelation\n* modelling details","46b465ce":"#### 2.2.2.2 the need for meal","a9438209":"In this dataset, booking_changes, required_car_parking_spaces and total_of_special_requests can be used to describe customers' special requests. It can be found that:\n* Most bookings have no sepcial requests and haven't been changed. Once the bookings have sepcial requests or are changed, their ratio of cancelation are low.\n* The ratio of cancelation of bookings which require car parking spaces is 0.\n"}}