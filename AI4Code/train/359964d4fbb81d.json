{"cell_type":{"f32e882c":"code","b4e989e1":"code","56831df4":"code","7a6d721b":"code","2d1f193b":"code","f424e767":"markdown","4ebca6f1":"markdown","4041b403":"markdown","980dc443":"markdown"},"source":{"f32e882c":"from random import choice","b4e989e1":"# defining a class, and adding the methods\n\nclass RandomWalk():\n    \"\"\"a class to generate random walks\"\"\"\n\n    def __init__(self, num_points = 5000):\n        \"\"\"starting sttributes of the walk, default are 500 data points\"\"\"\n        self.num_points = num_points\n\n        # list, defining the starting point (default is (0,0))\n        self.x_values = [0]\n        self.y_values = [0]\n\n\n    def fill_walk(self):\n        \"\"\"method to calculate all walk points\"\"\"\n\n        # loop: taking steps until desired end point reached\n        while len(self.x_values) < self.num_points:\n\n            # decide which direction to go and how far with `random.choice()`\n\n            # x axis\n            x_direction = choice([1, -1]) # 1 = right, -1 = left ...\n            x_distance = choice([0, 1, 2, 3, 4])\n            x_step = x_direction * x_distance\n\n            # y axis\n            y_direction = choice([1, -1]) # 1 = up, -1 = down ...\n            y_distance = choice([0, 1, 2, 3, 4])\n            y_step = y_direction * y_distance\n\n\n            # reject movements that go nowhere with loop condition\n            if x_step == 0 and y_step == 0:\n                continue\n\n            # calc next values for x & y\n            next_x = self.x_values[-1] + x_step\n            next_y = self.y_values[-1] + y_step\n\n            # appending the starting point list, because new location (not 0,0 anymore)\n            self.x_values.append(next_x)\n            self.y_values.append(next_y)","56831df4":"import matplotlib.pyplot as plt","7a6d721b":"# using the created class to plot the randomwalk\n\n# make a randomwalk, then plot the points...\nrw = RandomWalk()\nRandomWalk.fill_walk(rw)\n\n# data point formatting (color)\npoint_numbers = list(range(rw.num_points)) # amount datapoints = rw.numpoints ...\n\n\n# plot\nplt.scatter(rw.x_values, rw.y_values,\n            c=point_numbers, cmap=plt.cm.plasma,\n            edgecolor=None, alpha=0.6, s=1)\n\n\nplt.show()","2d1f193b":"rw = RandomWalk()\nRandomWalk.fill_walk(rw)\n\n# data point formatting (color)\npoint_numbers = list(range(rw.num_points)) # amount datapoints = rw.numpoints ...\n\n\n# plot\n# fig\nfig, ax = plt.subplots(figsize=(14,10))\nfig.suptitle(\"Randomwalk with 5000 Datapoints\", fontsize=16)\n\n# ax\nax.scatter(rw.x_values, rw.y_values,\n            c=point_numbers, cmap=plt.cm.plasma,\n            edgecolor=None, alpha=0.4, s=10)\n\n# ax labels\nax.axes.xaxis.set_ticks([])\nax.axes.yaxis.set_ticks([])\n\nfig.show()","f424e767":"## another format for plotting","4ebca6f1":"## Plot the Randomwalk","4041b403":"## Creating a Class with methods for the randomwalk","980dc443":"# Randomwalk Exercise"}}