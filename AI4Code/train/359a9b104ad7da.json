{"cell_type":{"7f3d63ac":"code","1f944c53":"code","9055e059":"code","db89c21b":"code","466d270a":"code","88aefc98":"code","d542a06c":"code","2bc5b390":"code","05fdc5ed":"code","4c772a9c":"markdown","3a0d6ff4":"markdown","30f5b66d":"markdown","0f3b714f":"markdown","985a0ebd":"markdown","77e5b522":"markdown","7268c8b6":"markdown","2a7bd9d3":"markdown","8110ad39":"markdown","a6526a72":"markdown","83ce162f":"markdown","f05bb309":"markdown","a0251f22":"markdown","ac207210":"markdown","f810d310":"markdown","b1872b19":"markdown"},"source":{"7f3d63ac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression","1f944c53":"# Read data in from text file\n\n# You will need to run this command on your computer\n# data = pd.read_csv('house-prices-advanced-regression-techniques\/train.csv')\n\n# This one works on the live Kaggle notebook\ndata = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\n# We can now look at the data in the notebook\ndisplay(data.head)","9055e059":"y = data['SalePrice']\n\nX = data['LotArea']","db89c21b":"plt.scatter(y, X)\nplt.title(\"Sale Price vs Lot Area\")\nplt.xlabel(\"Lot Area\")\nplt.ylabel(\"Sale Price\")\nplt.show()","466d270a":"# Find the best straight line through those points\nregressor = LinearRegression()  \nregressor.fit(X.values.reshape(-1, 1), y)\n\n# And visualize that line on our training data\ntraining_predictions = regressor.predict(X.values.reshape(-1, 1))\n\nplt.scatter(y, X)\nplt.plot(training_predictions, X, color='red')\nplt.title(\"Sale Price vs Lot Area\")\nplt.xlabel(\"Lot Area\")\nplt.ylabel(\"Sale Price\")\nplt.show()","88aefc98":"# Load test data\n\n# Run this one on your own computer\n# data_test = pd.read_csv('house-prices-advanced-regression-techniques\/test.csv')\n\n# This one works on the live Kaggle Notebook\ndata_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n# Extract Square Footage Feature\nX_test = data_test['LotArea']\n\n# Predict!\npredictions = regressor.predict(X_test.values.reshape(-1, 1))","d542a06c":"print(predictions[0:5])","2bc5b390":"# Create pandas dataframe in correct format\npredictions_df = pd.DataFrame({'Id': data_test['Id'], 'SalePrice': predictions})\n\n# Output your predictions as a csv\npredictions_df.to_csv('predictions.csv',index=False)","05fdc5ed":"# Double brackets are needed to extract multiple features\nX = data[['LotArea','OverallQual']]\n\n# Now reshape is not required becayse X is like a matrix\nregressor.fit(X, y)\n\n# Same for predict\nX_test = data_test[['LotArea','OverallQual']]\npredictions = regressor.predict(X_test)","4c772a9c":"## Loading Data\n\nThe data for the files are [here](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data), download them, move them to a directory (folder) you want to keep files for this project, unzip them by double ckicking, and in this same directory open a Jupyter Notebook with Python.\n\n","3a0d6ff4":"You may notice that the features which aren't numeric don't work. Linear regression relies on numbers as inputs, so we'd have to find some way of converting these to numeric. Perhaps something for the next notebook!\n\nGetting the data into the correct format for the model we are trying to fit is a very important part of the workflow and can be frustrating at first. The reshape (which I glossed over) could take a while to figure out if you're unfamiliar with sklearn, which is why I favor adding one feature first, then adding others (imagine 100+ variables each have individual weird problems).\n\nIf you got to here please add a comment and like, and congrats for being promoted to Contributor! :)\n\nHappy with feedback both good and bad, ideas for future posts and clarifying questions!","30f5b66d":"You should now have a file called `predictions.csv` in the directory you're working in. Go to [the submission page](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/submit) and drag the csv into the upload rectangle.","0f3b714f":"## What now?\n\nCongrats, you just fit a model and made some predictions. You won't be top of the leaderboard, but the point is you're *on the leaderboard*. You now have what's known as a baseline, which is an initial starting point to be improved upon. Any ideas you want to test to make your submission better you can explore one at a time rather than trying everything at once.\n\nI'm a big fan of getting a baseline as soon as possible because at that point you're moving forward already and you can make thoughtful, incremental decisions of what to try next, without getting overwhelmed.\n\nSo try some other stuff! Maybe use a different feature, maybe use two or even more at a time like this:","985a0ebd":"Apart from a few extreme values it does look like there is a slight linear trend.","77e5b522":"## Big Picture\n\nThe house prices competition asks you to predict the prices of a set of houses from various attributes (or 'features'). We are given a set of houses and their features for which we know the prices (called the 'training set'), and the idea is to use what we can learn about this set in our predictions.\n\nThe model we will use is called linear regression, which fits the straight line through the training set as close as possible to the actual prices. Graphically, we find the line that goes in the middle of a set of points, like this:\n\n![linear_regression_example.png](attachment:linear_regression_example.png)","7268c8b6":"## Data visualization\n\nDoes it look like you can fit a straight line here?","2a7bd9d3":"## Model Fitting\n\nNow we find the best straight line through these points using python's machine learning packages scikit-learn.\n\nThe reshape is so the input is in the right form for that function.","8110ad39":"If you're suspicious if this is a good model, you're on the right lines. We ignored all the information in other features we were given, plus some of these points far from the others, called 'outliers', may skew the line and we'd be better off ignoring them.\n\nBut this tutorial is about getting a baseline model to make predicitons, which we can now do...","a6526a72":"##\u00a0Submitting your Predictions to Kaggle\n\nAs you can see from `sample_submission.csv` we need to submit a csv with an 'ID' column, relating to the ID of the house in the test set, and a 'SalePrice' prediction.","83ce162f":"That's a lot of information! \n\nLet's start by deciding which feature we want to fit a line through. From the file `data_description.txt` there is a feature with the following description:\n\nLotArea: Lot size in square feet\n\nIt seems intutitive that the price of a house should increase with the square footage, so we'll use this. Typically we call the entries we are trying to predict Y and the feature(s) we are using to predict X, so let's do so:","f05bb309":"## Importing Packages\n\nThere are a few packages with functionality we need so we need to import these.","a0251f22":"See what the first five house price predictions are","ac207210":"## Making Predictions\n\nWe now use the data for which we are asked to predict the house prices, the 'test set'.\n\nNow that we have a line, given a value for Lot Area, we can see where on the line the Sale Price should be.","f810d310":"# Novice to Contributor Tutorial: an Absolute Beginner's Guide to Making Your First Competition Submission","b1872b19":"## Introduction\n\nI noticed that a lot of people never progress from Novice, even though checklist item \"Make 1 competition submission\" can be from a very basic workflow. There are some great tutorials on here, and I highly recommend Kaggle for those getting started in Machine Learning, but to someone looking at all this for the first time they can be overwhelming. Concepts like missing data, hyperparameters, and regularization are all important, but not necessary to have down to train a simple model and make some predictions on a dataset.\n\nI find that in a new task, often the first step is the most difficult. This notebook is for absolute beginners who want to take a step forward, and get that first submission in so you can advance to Contributor. The approach taken is as simple as possible.\n\nThis assumes you have python installed along with Jupyter Notebooks, and packages numpy, pandas, matplotlib, and sklearn."}}