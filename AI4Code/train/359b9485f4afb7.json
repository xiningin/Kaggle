{"cell_type":{"77acb5b9":"code","c7ff779e":"code","0d8e5e33":"code","14015033":"code","4086124b":"code","f5d059a9":"code","a67c068c":"code","ac00f140":"code","f0ba3b2b":"code","e36b5b6c":"code","790de8d3":"code","ed973ef8":"code","d6b84377":"code","63272353":"code","09828b7b":"code","bca2c64a":"code","ee66f0d4":"code","d492d46f":"code","e018f10b":"code","4cec0543":"code","f1300a5d":"code","cad9cdb0":"code","7ec12342":"code","dda4e914":"code","874c2eda":"code","09e02736":"code","c485c0bd":"code","7179feb5":"code","0db75bea":"code","4e3405d1":"code","9bbd3a6e":"code","e3f4254a":"code","088b8a97":"code","51aadbed":"code","d7a324ed":"code","092c5516":"code","c65da9a2":"code","f1fb1d9e":"code","2095556c":"code","fd876e35":"code","1cde0cc1":"code","715a6a57":"code","5e6fae3a":"code","c3548d9a":"code","d1b03f6e":"code","58e6f6cd":"code","fc3163d7":"code","387555c4":"code","e65c81f2":"code","eed65cf9":"code","0479f5ff":"code","48a5ea8b":"code","39dec35a":"code","b35d0c6c":"code","c515de50":"code","586d1bf6":"code","14170dd1":"code","036746a7":"code","ffa5fcf2":"code","f91a8403":"code","e610f300":"code","2a493e47":"code","7090519d":"code","31a49a75":"code","b418ff38":"code","3d8af81c":"code","abeb880d":"code","1cd3f95c":"code","575742ff":"markdown","2ab05dce":"markdown","dfb26a43":"markdown","34b69e65":"markdown","da1012f6":"markdown","7ffaa471":"markdown","b1726d0b":"markdown","4cd22654":"markdown","593ba724":"markdown","350908b6":"markdown","42ff7f3f":"markdown","58c83fff":"markdown","3bb38fe8":"markdown","0aa51da4":"markdown","8ce3edc9":"markdown","1575c70c":"markdown","eaab03c5":"markdown","c2efca2a":"markdown","c2ed5416":"markdown","853bc941":"markdown","7822c69d":"markdown","aadd7eda":"markdown","2126ccce":"markdown","0c25804d":"markdown","fc785069":"markdown","3c791381":"markdown","4766bf91":"markdown","715193eb":"markdown","c5924ff8":"markdown","d789d1cf":"markdown","ae28ddf1":"markdown","84718534":"markdown","e85594b0":"markdown","088dabc1":"markdown","55a2a99d":"markdown","dbb17e6a":"markdown","ccb6016c":"markdown"},"source":{"77acb5b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c7ff779e":"df=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","0d8e5e33":"df.head()","14015033":"df.describe()","4086124b":"# Passenger id,Name and Ticket are unique value columns and can be dropped\n\ndf.drop(columns=['PassengerId','Name','Ticket'],axis=1,inplace=True)\nPassengerId=df_test['PassengerId']\ndf_test.drop(columns=['PassengerId','Name','Ticket'],axis=1,inplace=True)","f5d059a9":"df.isnull().sum()","a67c068c":"df['Survived'].astype('category').replace({0:'Dead',1:'Survived'}).value_counts(normalize=True).plot.bar()\nplt.title('Death V\/s Survival Rate')\nplt.show()","ac00f140":"plt.figure(figsize=(10,10))\n\nplt.subplot(1,2,1)\nsns.countplot(x=df['Embarked'])\nplt.title('Countplot For Embarked')\n\nplt.subplot(1,2,2)\ngraph=sns.barplot(x=df['Embarked'],y=df['Survived'])\ngraph.axhline(0.389)\nplt.title('Survival Rate For Different Embarkments')\n\nplt.show()","f0ba3b2b":"plt.figure(figsize=(10,10))\n\nplt.subplot(1,2,1)\nsns.countplot(x=df['Sex'])\nplt.title('Countplot For Gender')\n\nplt.subplot(1,2,2)\ngraph=sns.barplot(x=df['Sex'],y=df['Survived'])\ngraph.axhline(0.389)\nplt.title('Gender Wise Survival Rate')\n\nplt.show()","e36b5b6c":"plt.figure(figsize=(10,10))\n\nplt.subplot(1,2,1)\nsns.countplot(x=df['Pclass'])\nplt.title('Countplot For Pclass')\n\nplt.subplot(1,2,2)\ngraph=sns.barplot(x=df['Pclass'],y=df['Survived'])\ngraph.axhline(0.389)\nplt.title('Class Wise Survival Rate')\n\nplt.show()","790de8d3":"graph=sns.barplot(x=df['Pclass'],y=df['Survived'],hue=df['Sex'])\ngraph.axhline(0.389)","ed973ef8":"plt.figure(figsize=(10,10))\n\nplt.subplot(1,2,1)\nsns.countplot(x=df['Parch'])\nplt.title('Countplot For Parch')\n\nplt.subplot(1,2,2)\ngraph=sns.barplot(x=df['Parch'],y=df['Survived'])\ngraph.axhline(0.389)\nplt.title('Parch Wise Survival Rate')\n\nplt.show()","d6b84377":"graph=sns.barplot(x=df['Parch'],y=df['Survived'],hue=df['Pclass'])\ngraph.axhline(0.389)","63272353":"df['Family_Size']=df['SibSp']+df['Parch']\ndf_test['Family_Size']=df_test['SibSp']+df_test['Parch']","09828b7b":"plt.figure(figsize=(10,10))\n\nplt.subplot(1,2,1)\nsns.countplot(x=df['Family_Size'])\nplt.title('Countplot For Family_Size')\n\nplt.subplot(1,2,2)\ngraph=sns.barplot(x=df['Family_Size'],y=df['Survived'])\ngraph.axhline(0.389)\nplt.title('Family_Size Wise Survival Rate')\n\nplt.show()","bca2c64a":"graph=sns.barplot(x=df['Family_Size'],y=df['Survived'],hue=df['Pclass'])\ngraph.axhline(0.389)","ee66f0d4":"df['Fare_Per_Person']=df['Fare']\/(df['Family_Size']+1)\ndf_test['Fare_Per_Person']=df_test['Fare']\/(df_test['Family_Size']+1)","d492d46f":"graph=sns.barplot(x=df['Pclass'],y=df['Fare_Per_Person'])\n","e018f10b":"df['Survived']=df['Survived'].astype('category')","4cec0543":"graph=sns.barplot(x=df['Survived'],y=df['Fare_Per_Person'])","f1300a5d":"df['Survived']=df['Survived'].astype(int)","cad9cdb0":"df.Cabin=df.Cabin.replace({np.nan:'M'})","7ec12342":"df.Cabin=df.Cabin.apply(lambda x:x[0])","dda4e914":"df.Cabin=df.Cabin.astype('str')","874c2eda":"df.Cabin.unique()","09e02736":"df.Cabin.value_counts().plot.bar()","c485c0bd":"graph=sns.barplot(y=df['Survived'],x=df['Cabin'])\ngraph.axhline(0.389)","7179feb5":"df.Cabin=df.Cabin.replace({'M':np.nan})","0db75bea":"sns.distplot(df['Age'])\nplt.show()","4e3405d1":"sns.boxplot(x='Pclass',y='Age',data=df)","9bbd3a6e":"sns.boxplot(x='Sex',y='Age',data=df)","e3f4254a":"df.isnull().sum()\/len(df)*100","088b8a97":"df.drop('Cabin',inplace=True,axis=1)\ndf_test.drop('Cabin',inplace=True,axis=1)","51aadbed":"df.Embarked.value_counts()","d7a324ed":"df['Embarked']=df['Embarked'].replace({np.nan:'S'})","092c5516":"## For iterative imputer to work we need all columns to be in numeric form \n","c65da9a2":"# Using One Hot Encoding for categoric features\ndf=pd.get_dummies(df)\n\ndf.drop(['Sex_male','Embarked_Q'],inplace=True,axis=1)\n\n\n\ndf_test=pd.get_dummies(df_test)\n\ndf_test.drop(['Sex_male','Embarked_Q'],inplace=True,axis=1)","f1fb1d9e":"from sklearn.experimental import enable_iterative_imputer \nfrom sklearn.impute import IterativeImputer\n\n# create the imputer\nimputer = IterativeImputer(random_state=22)\n\n# fit the imputer to the df set\nimputer.fit(df)\n\n# transform the data\ndf_t = imputer.transform(df)\n#test_t = imputer.transform(test)","2095556c":"df_t=pd.DataFrame(df_t,columns=df.columns)","fd876e35":"df_t.isnull().sum()","1cde0cc1":" df_t","715a6a57":"## Scaling\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaled = MinMaxScaler()\nX_train=scaled.fit_transform(df_t.iloc[:,1:])\nX_train=pd.DataFrame(df_t,columns=df_t.columns[1:])\n\nX_test=scaled.transform(df_test)\nX_test=pd.DataFrame(df_test,columns=df_test.columns)\n","5e6fae3a":"X_train","c3548d9a":"X_test","d1b03f6e":"y_train=df['Survived']","58e6f6cd":"#### MODEL BUILDING FUNCTIONS ","fc3163d7":"def build_model(X_train):\n\n    import statsmodels.api as sm\n\n    logm1=sm.GLM(y_train,sm.add_constant(X_train),family=sm.families.Binomial()).fit()\n    return logm1.summary()","387555c4":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    vif = pd.DataFrame()\n\n    #to avoid const\n    a=X_train\n    vif['Features'] =a.columns\n    vif['VIF'] = [variance_inflation_factor(a.values, i) for i in range(a.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n\n    return(vif)","e65c81f2":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True)","eed65cf9":"# To avoid multicolinearity dropping some highly correlated features\nX_train.drop(['SibSp','Parch','Fare_Per_Person','Embarked_C'],axis=1,inplace=True)","0479f5ff":"build_model(X_train)","48a5ea8b":"calc_vif(X_train)","39dec35a":"\nX_train.drop('Fare',axis=1,inplace=True)\nX_test.drop('Fare',axis=1,inplace=True)","b35d0c6c":"import statsmodels.api as sm\nlogm=sm.GLM(y_train,sm.add_constant(X_train),family=sm.families.Binomial()).fit()\nlogm.summary()","c515de50":"calc_vif(X_train)","586d1bf6":"### probablities\ny_train_pred=logm.predict(sm.add_constant(X_train))","14170dd1":"Prob_Survive=pd.DataFrame()","036746a7":"\nProb_Survive['Survived']=df['Survived']\nProb_Survive['Pred_Prob']=y_train_pred\nProb_Survive['Prediction']=Prob_Survive['Pred_Prob'].apply(lambda x:1 if x>0.5 else 0)","ffa5fcf2":"Prob_Survive","f91a8403":"from sklearn import metrics\nconfusion=metrics.confusion_matrix(Prob_Survive['Survived'],Prob_Survive['Prediction'])\nprint(confusion)","e610f300":"print(metrics.accuracy_score(Prob_Survive['Survived'],Prob_Survive['Prediction']))","2a493e47":"cutoff_df = pd.DataFrame(columns = ['prob','accuracy','sensi','speci','precision'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    Prob_Survive['Prediction']=Prob_Survive['Pred_Prob'].apply(lambda x:1 if x>i else 0)\n    cm1 = metrics.confusion_matrix(Prob_Survive.Survived,Prob_Survive['Prediction'])\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    precision = cm1[1,1]\/(cm1[1,1]+cm1[0,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci,precision]\nprint(cutoff_df)","7090519d":"X_test=X_test[X_train.columns]","31a49a75":"X_test_pred=logm.predict(sm.add_constant(X_test))","b418ff38":"GenderSubmission=pd.DataFrame()","3d8af81c":"GenderSubmission['PassengerId']=PassengerId\nGenderSubmission['Survived']=X_test_pred\nGenderSubmission['Survived']=GenderSubmission['Survived'].apply(lambda x:1 if x>0.5 else 0)","abeb880d":"filename= 'titanic predictions.csv'\nGenderSubmission.to_csv(filename, index=False)\n ","1cd3f95c":"pd.read_csv('titanic predictions.csv')","575742ff":"### ANALYZING PCLASS COLUMN","2ab05dce":"### ANALYZING PARCH COLUMN","dfb26a43":"- Since there are only 2 mv in embarked we can replace them with mode","34b69e65":"*COLUMNS*\n\n-  Survival - Survival (0 = No; 1 = Yes)\n-  class - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n-  name - Name\n-  sex - Sex\n-  age - Age\n-  sibsp - Number of Siblings\/Spouses Aboard\n-  parch - Number of Parents\/Children Aboard\n-  ticket - Ticket Number\n-  fare - Passenger Fare\n-  cabin - Cabin\n-  embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n","da1012f6":"-  Clearly one can observe class distinction , as those with kids belonging to first and second class have higher chance of survival.","7ffaa471":"- Chances of female surviving is higher in each class","b1726d0b":"### ANALYZING THE SEX COLUMN","4cd22654":"### ANALYZING THE FARE COLUMN","593ba724":"#### MISSING VALUES IN EMBARKED COLUMN","350908b6":"### BUILDING MODEL WITHOUT FARE ","42ff7f3f":"### ANALYSING AGE COLUMN","58c83fff":"-  Those who survived paid a higher fare.","3bb38fe8":"-  Only 38% of the people survived.\n-  We shall use this as a bench mark for further analysis.","0aa51da4":"-  Using iterative Imputer to get null values in age","8ce3edc9":"### BUILDING MODEL WITH ALL FEATURES ","1575c70c":"### TEST DATA SET\n","eaab03c5":"### ANALYZING FAMILY SIZE","c2efca2a":"-  females seem to be younger.","c2ed5416":"-  Clearly During the era of titanic there was a lot of class bias as 1st class ..the chances of surving are higher.","853bc941":"`inference :`\n-  Though men dominated in terms of population .Probablity of female surviving was higher","7822c69d":"#### MISSING VALUES IN CABIN COLUMN","aadd7eda":"The p val and Vif are significant hence this is our final model","2126ccce":"-  Since 77 percent values are missing we shall drop this column","0c25804d":"#### MISSING VALUES IN AGE COLUMN","fc785069":"-  Most Cabin Values are missing","3c791381":"-  No parents\/children chances of surviing were lesser\n-  Lets have a look at why people with 5 children did not survive. ","4766bf91":"### Performing Logistic Regression ","715193eb":"## ANALYZING THE EMBARKED COLUMN","c5924ff8":"### Since accuracy is the basis of model evaluation 0.5 seems an optimal cut off","d789d1cf":"-  Higher fare for higher class ","ae28ddf1":"    -  First Class has Older people.\n   ","84718534":"### ANALYZING THE CABIN COLUMN","e85594b0":"-  Since Fare has a high vif and pvalue we first drop fare","088dabc1":"### MISSING VALUES ","55a2a99d":"-  if we undertake target mean encoding we can impute missing as cabin A","dbb17e6a":"### PERFORMING EDA TO UNDERSTAND THE DATA BETTER","ccb6016c":"`inference :`\n- Most People Embarked in Southampton.\n-  Cherbourg shows survival rates more than avg."}}