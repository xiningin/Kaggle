{"cell_type":{"24b7d522":"code","0679c113":"code","57045de4":"code","596ec0c3":"code","089f9941":"code","92e0d700":"code","543a1951":"code","46997fa0":"code","f77f9e1f":"code","00d7378c":"code","f5a2ed9a":"code","c646bc3c":"code","8393a234":"code","879a44b9":"code","d7b0184b":"code","4cdf0479":"code","a6ef9974":"code","4e2bab18":"code","63c86700":"code","36422617":"code","52971ef1":"code","e94f9fa9":"code","600f16d6":"code","05eb4a39":"code","51f2d78e":"code","64d00fc7":"code","15f34441":"code","0805c6ad":"code","d1058dc4":"code","b396a4aa":"code","3175b89a":"code","8f0826a7":"code","42019483":"code","473e0224":"markdown","58bea0d4":"markdown","510e7cf9":"markdown","b27c21eb":"markdown","5f3cd8eb":"markdown","afc1b7e5":"markdown","45a75216":"markdown","1c9be864":"markdown","80aa30be":"markdown","23dafb76":"markdown","8624f23c":"markdown","2161cf11":"markdown","b9a4d793":"markdown","48c4bf23":"markdown","dfd4673a":"markdown","612adbba":"markdown","a9130f9c":"markdown","28c2aa6e":"markdown"},"source":{"24b7d522":"import pandas as pd \nimport datetime as datetime \nfrom datetime  import timedelta\nfrom dateutil.relativedelta import relativedelta\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline\nsns.set()\nprint('Setup completed ^_____^')","0679c113":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv')\ndf.head()","57045de4":"df.tail()","596ec0c3":"df.nunique() # Get the number of unique value on each column:","089f9941":"df.dtypes # take a look of the data types that we dealing with; precisely the date column ","92e0d700":"df['date'] = pd.to_datetime(df['date'], format=\"%Y-%m-%d\") # to_datetime is a pandas method which helps to convert datetime string into pandas datetime object to make it easy when works with TimseSeries data","543a1951":"df.dtypes # check our new data types after converting date(column) into datetime64[ns] by using pd.to_datetime()","46997fa0":"# Check the missing values: \nmissing_values = df.isnull().sum()\nmissing_values[:]","f77f9e1f":"df.columns","00d7378c":"df.dtypes","f5a2ed9a":"variables = ['date', 'vaccine', 'total_vaccinations']\ngroup_variables = variables[:2]\noutcome_variable = variables[2]\ndata = df.groupby(group_variables)[outcome_variable].sum().reset_index()","c646bc3c":"data.head()","8393a234":"data.tail()","879a44b9":"sns.barplot(x=data['total_vaccinations'], y=data['vaccine'])","d7b0184b":"data.set_index('date', inplace=True)","4cdf0479":"data.head()","a6ef9974":"print(data.index)","4e2bab18":"# Get the observations of 2020:- \nprint(data['2020'].head())\nprint(data['2020'].tail())","63c86700":"print('Day:', data.index.day, '\\n')\nprint('Week:', data.index.week, '\\n')\ndata['dayofweek'] = data.index.dayofweek # Day of Week: Monday=0, Sunday=6\nprint(data.head())\nprint(data.tail())\ndel(data['dayofweek'])","36422617":"data.head()","52971ef1":"data.reset_index(inplace=True)\n\ndata_pivot= data.pivot(index='date', columns='vaccine', values='total_vaccinations')\ndata_pivot.head()","e94f9fa9":"data_pivot.tail()","600f16d6":"# Convert NaN values with 0: \ndata_pivot.fillna(0, axis=0, inplace=True)","05eb4a39":"data_pivot.head()","51f2d78e":"vaccination_amount = data.set_index(['date', 'vaccine']).unstack('vaccine').fillna(0)\n\nvaccination_amount.columns = vaccination_amount.columns.levels[1].rename(None)\n\nvaccination_amount.head()","64d00fc7":"print(vaccination_amount.index)\nprint('\\nUnique dates in our data: ', len(vaccination_amount.index.unique()), 'Days')","15f34441":"print('\\nUnique dates in our data: ', len(vaccination_amount.index.unique()), 'Days')\ndate_ranges = vaccination_amount.index.max() - vaccination_amount.index.min()\n\n# Calculate number of days in date range: \nprint('Total days in our date range: ', date_ranges.days, 'Days')","0805c6ad":"new_index = pd.date_range(vaccination_amount.index.min(), vaccination_amount.index.max())\nprint(new_index)","d1058dc4":"new_vaccinations_amount = vaccination_amount.reindex(new_index, fill_value=0)","b396a4aa":"new_vaccinations_amount.index","3175b89a":"weekly_vaccinations = new_vaccinations_amount.resample('W').sum()\nprint('Weekly vaccinations')\nprint(weekly_vaccinations.head(), '\\n')\nmonthly_vacinations = new_vaccinations_amount.resample('M').sum()\nprint('Monthly Vaccinations')\nprint(monthly_vacinations.head(), '\\n')\n\nquaterly_vaccinations = new_vaccinations_amount.resample('Q').sum()\nprint('Quarterly Vaccinations')\nprint(quaterly_vaccinations.head(), '\\n')\nannual_vaccinations = new_vaccinations_amount.resample('Y').sum()\nprint('Annual Vaccinations')\nprint(annual_vaccinations.head(), '\\n')","8f0826a7":"# Variable First Difference \nprint('Monthly Vaccination, First Difference \\n', monthly_vacinations.diff().head())\n# Variable Percentage Change: \nprint('Monthly Vaccinations % Change \\n', monthly_vacinations.pct_change().head())\n\n# Add % change to original data: \nmonthly_vacinations.join(monthly_vacinations.pct_change().add_suffix('_%_Change')).head()\n\n","42019483":"plotsize = (13, 5)\nquaterly_vaccinations.plot(figsize=plotsize, title='Quarterly Vaccinations')\nmonthly_vacinations.plot(figsize=plotsize, title='Monthly Vaccinations')\nweekly_vaccinations.plot(figsize=plotsize, title='Weekly Vaccinations')","473e0224":"# #**Overview:-**\n\n**This notebook will be an exploratory Data analysis Techniques for TimeSeries realted functionality in numpy, pandas and matplotlib, \nwe will explore the basic datatypes and summraize pandas dataframe with DataFrame index, we will also explore basic plotting and TimeSeries Visulaztion tools.\nOur Dataset is about Covid19 World Vaccinations Race that was established all over the globe during last year, the data composed of vaccines brands like Medorna, pfizer biontech, ..etc, so the main goal is to represent different types of plots inorder to show the amount of people(per million) got vaccinated and which \ntype of vaccins has got the high rate amoung the others during last year from December 2020 till December 2021.**\n\n\n\n\n","58bea0d4":"# **Variable Transformations:-**\n\nFor Time Series models, we may want to use transformed variables (log, difference, growth rate, etc). The example below illustrates how we might generate these variables in Pandas, using the Monthly Vaccinations dataset.\n\n**Stationarity Transformations:-**\n\nConcerns about Stationarity often lead to considering variable transformations. Some commonly-used transformation methods (Variable Differencing, Percentage Change, and Log) are implemented below. Because of Index has several levels here, these transformations can be done for each outcome variable with one line (the results could be joined together using the Pandas concat method).\n\n","510e7cf9":"#**Explorotary Data Analysis:-**","b27c21eb":"#**Importing:**","5f3cd8eb":"# Setting Index Using Existing Variable:-\n\n\nWe often want to set an Index explicitly, or manipulate an Index, for working with Time Series data. The Pandas DateTime Index is useful here, although it is often useful to standardize the index by ensuring all relevant time periods are included only once. Our data violate this condition for two reasons: (1) Multiple values for a given period (due to multiple categories) and (2) Missing days (for daily data). We will fix both of these issues below, and explore some useful Datetime functionality.\n\n\n","afc1b7e5":"Starting with simplifying the input data to explore data, we will look at **total of vaccincations** by **date** and the **type of vaccine**, this is allow us to look at time series dataset with mulitible time series.","45a75216":"We can see the result now has a **daily frequency**. While some Time Series models will work without an explicit frequency, many will not. It is also helps to ensure we aren't missing important dates when summarizing and plotting the data.","1c9be864":"# **Generating a complete index and setting Frequency:-**\n\nSince we are using daily data, we would like to set a **daily frequency**. We see our data has a length of 374 days. By subtracting the smallest date from the largest date, we can tell there are some days missing:","80aa30be":"# **Standardizing the DatetimeIndex:-**\n\n\nWhile data from existing variables may be sufficient, some Time Series applications require that data contain all periods and have a Frequency assigned. We can see above that our data do not have a frequency (freq=None). While the data seem daily, there are many types of possible frequencies (business days, weekdays, etc.). If the input data are already standardized, Pandas will infer a Frequency and assign it. Otherwise, we need to ensure there are:\n\n * **No duplicate index values**\n * **No missing index values**\n\n \nSetting a Frequency helps ensure the data are standardized and will work in applications, and is also required for functionality like resampling.\n","23dafb76":"# **Resampling:-**\n\n\nWe can now easily Resample our data at any desired frequency, using either the asfreq method or the resample method. The asfreq method assumes a default fill approach (which can be dangerous). The resample method allows this to be specified directly. which generates a resampler object. To get to values, we need to specify an aggregation function if upsampling (moving to a lower frequency), or fill function if downsampling (moving to a higher frequency). This typically the sum or mean for upsampling, or interpolate for downsampling. We generate results for some common frequencies below:","8624f23c":"**We can generate a complete index using Pandas' date_range function:**","2161cf11":"# **Pivoting Data:-**\n\n\n**Because there are multiple categories(Vaccine producers), we have multiple Time Series to analyze. As a result, our DatetimeIndex does not uniquely identify an observation. To uniquely identify observations, we can either add categorical variables to the Index, or set a Pandas DateTimeIndex with separate columns for each series. There are several ways to accomplish this. The first appraoch uses Pandas' built-in pivot method:**","b9a4d793":"**Datetime Components:-**\nPandas Datetime variables have a number of useful components. Using the DatetimeIndex, we can extract items like month, year, day of week, quarter, etc.","48c4bf23":"**Upsampling(Moving to longer period):-**","dfd4673a":"# **Stacking & Unstacking Method:-**\n\nTo achieve the same result in Pandas, it is often easier to use the Index and unstack \/ (stack) methods. The unstack method transforms long data into wide data by creating columns by category for levels of the index, while stack does the reverse.\n\nHere, we can tell Pandas that the Date and vaccine values are part of the Index and use the unstack function to generate separate columns (this also removes the vaccine column from the Index):","612adbba":"**Create a barchart that shows the total amount of people per million gotten vaccinted by a certin type of vaccine**","a9130f9c":"# **Visualization:-**","28c2aa6e":"#**Simplify Time Series Data Using pandas:-**"}}