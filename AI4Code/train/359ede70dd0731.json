{"cell_type":{"d21517e1":"code","b35a6ffa":"code","f50d7b1f":"code","4c588831":"code","ced171a9":"code","4a8eeb41":"code","c569b255":"code","8c00b4e3":"code","96541068":"code","e6e44308":"code","cd203bb6":"code","b5019d46":"code","8831dbc0":"code","4bc959c9":"code","3cf21d89":"code","6c11d2c7":"code","ff4a645b":"code","9d84770a":"code","b35980dd":"code","bcddf8a8":"code","971f220d":"code","d8bfe2c7":"code","b9fdb419":"code","5d988a7d":"code","2be10112":"code","9b366217":"code","acf93c80":"code","ad7629d6":"code","e6f383f5":"markdown","d75a0e5d":"markdown","41e39419":"markdown","b66c49fd":"markdown","720c2bf2":"markdown","f836e210":"markdown","22ec8865":"markdown","25a6dcf3":"markdown","bdc72a90":"markdown","8980a0b0":"markdown","6acff53e":"markdown","cdf5bab1":"markdown","6f1f5b7b":"markdown"},"source":{"d21517e1":"# !pip -qq install pandas==1.1.3\n# !pip -qq install numpy==1.18.5\n# !pip -qq install holidays==0.10.3\n# !pip -qq install fbprophet==0.7.1\n# !pip -qq install matplotlib==3.2.1\n# !pip -qq install ipython==7.13.0\n!pip -qq install pmdarima==1.8.0","b35a6ffa":"import holidays\nimport numpy as np\nimport pandas as pd\nfrom fbprophet import Prophet\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nfrom pmdarima.arima import auto_arima\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_rows', 500)","f50d7b1f":"df = pd.read_csv('..\/input\/bitgrit-2\/train_2.csv').drop(columns='Unnamed: 0')\n\ndf['send_timestamp'] = df.send_timestamp.apply(pd.to_datetime)\ndf['date'] = df.send_timestamp.apply(lambda x: x.date())\ndf = df.groupby(['shipping_company', 'date']).shipment_id.nunique().reset_index().sort_values(by=['shipping_company', 'date']).copy()\ndf['ds'] = df.date.apply(pd.to_datetime)\n\n## Give zero value to the missing dates\nmin_date = df.ds.min()\nmax_date = df.ds.max()\n\nidx = pd.date_range(min_date, max_date)\n\ndf1 = df[df.shipping_company=='SC1'].set_index('ds', drop=True).reindex(idx).fillna(0).reset_index().copy() ## time-series shiiping company 1\ndf2 = df[df.shipping_company=='SC2'].set_index('ds', drop=True).reindex(idx).fillna(0).reset_index().copy() ## time-series shiiping company 2\ndf3 = df[df.shipping_company=='SC3'].set_index('ds', drop=True).reindex(idx).fillna(0).reset_index().copy() ## time-series shiiping company 3","4c588831":"val1 = pd.DataFrame()\nval1['ds'] = pd.date_range('2020-06-14', '2020-08-13')\nval1['SC'] = 1\nval2 = pd.DataFrame()\nval2['ds'] = pd.date_range('2020-06-14', '2020-08-13')\nval2['SC'] = 2\nval3 = pd.DataFrame()\nval3['ds'] = pd.date_range('2020-06-14', '2020-08-13')\nval3['SC'] = 3","ced171a9":"uk_holidays = set(holidays.UnitedKingdom(years = [2019,2020]).keys())\n\ndef seasonalities(dd):\n    train = 'ds' not in dd.columns\n    if train:\n        dd['ds'] = dd['index']\n        dd['y'] = dd.shipment_id\n    dd['dow'] = dd.ds.apply(lambda x: x.dayofweek) ## day of week\n    dd['dom'] = dd.ds.apply(lambda x: x.day)       ## day of month\n    dd['weekend'] = dd.dow.isin([5,6])*1.0         ## is weekend\n    dd['wom'] = (dd.dom-1)\/\/7                      ## week of month\n    dd['holiday'] = dd.ds.isin(uk_holidays)        ## is a UK holiday\n    dd['year'] = dd.ds.apply(lambda x: x.year)     ## year\n    dd['month'] = dd.ds.apply(lambda x: x.month)   ## month\n    dd['week'] = dd.ds.apply(lambda x: x.week)     ## week of the year\n    dd['half'] = (dd.dom-1)\/\/15                    ## first half or second half of the month\n    \n    return dd","4a8eeb41":"df1 = seasonalities(df1).dropna()\ndf2 = seasonalities(df2).dropna()\ndf3 = seasonalities(df3).dropna()","c569b255":"val1 = seasonalities(val1).dropna()\nval2 = seasonalities(val2).dropna()\nval3 = seasonalities(val3).dropna()","8c00b4e3":"## mean of item count in first half and second half values\n\nh1 = df1.groupby(['year', 'half' , 'month']).y.mean().reset_index()\nh1['ds'] = h1.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)\nh2 = df2.groupby(['year', 'half' , 'month']).y.mean().reset_index()\nh2['ds'] = h2.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)\nh3 = df3.groupby(['year', 'half' , 'month']).y.mean().reset_index()\nh3['ds'] = h3.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)","96541068":"vh1 = val1.groupby(['year', 'half' , 'month']).dow.count().reset_index().drop(columns='dow')\nvh1['ds'] = vh1.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)\nvh2 = val2.groupby(['year', 'half' , 'month']).dow.count().reset_index().drop(columns='dow')\nvh2['ds'] = vh2.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)\nvh3 = val3.groupby(['year', 'half' , 'month']).dow.count().reset_index().drop(columns='dow')\nvh3['ds'] = vh3.apply(lambda x: pd.to_datetime(str(int(x.year))+'-'+str(int(x.month))+'-'+str(int(x.half*15+1))), axis=1)","e6e44308":"def model0(features,m='prophet', ys=True, ws=True):\n    pred = []\n    date = []\n    sc = []\n\n    a = 0\n    for train0, val0 in zip([h1, h2, h3], [vh1, vh2, vh3]):\n        train = train0.copy()\n        val = val0.copy()\n        \n        if m=='prophet':\n            model = Prophet(yearly_seasonality=ys, weekly_seasonality=ws)\n            for feat in features:\n                model.add_regressor(feat)\n            model.fit(train)\n            pred += list(model.predict(val)['yhat'].apply(lambda x: int(max(x,0))).values)\n            \n        if m=='arima':\n            model = auto_arima(y=train.y, exogenous=train[features])\n            pred += list(pd.DataFrame({'yhat':model.predict(n_periods=len(val), exogenous=val[features])}).yhat.apply(lambda x: int(max(x,0))).values)\n            \n        date += list(val.ds.values)\n        a += 1\n        sc += [a]*len(val)\n\n    h_ = pd.DataFrame()\n    h_['pred'] = pred\n    h_['date'] = date\n    h_['SC'] = sc\n    h_ = h_.sort_values(by=['date', 'SC']).reset_index(drop=True)\n    return h_.pred.values, h_.date.values, h_.SC.values","cd203bb6":"h = pd.DataFrame()\nh['pred_prophet1'], h['date'], h['SC'] = model0([\"month\"], 'prophet', False, False)\nh['pred_prophet2'], _, _ = model0([\"month\"], 'prophet', True, False)\nh['pred_prophet3'], _, _ = model0([], 'prophet', True, False)\nh['pred_arima1'], _, _ = model0([\"month\"], 'arima')","b5019d46":"def d_15_pred(x):\n    if x.SC==1:\n        return 1.64 + x.pred_prophet1 * (-0.67) + x.pred_prophet2 * (-0.47) + x.pred_prophet3 * (-0.5) + x.pred_arima1 * (0.0)\n    if x.SC==2:\n        return 5.01 + x.pred_prophet1 * (0.0) + x.pred_prophet2 * (-0.37) + x.pred_prophet3 * (-0.37) + x.pred_arima1 * (0.0)\n    if x.SC==3:\n        return 5.29 + x.pred_prophet1 * (0.0) + x.pred_prophet2 * (-0.19) + x.pred_prophet3 * (-0.19) + x.pred_arima1 * (-0.58)","8831dbc0":"h['pred'] = h.apply(d_15_pred, axis=1)","4bc959c9":"## Total in week\n\ndef seasonalities2(dd):\n    dd['dom'] = dd.ds.apply(lambda x: x.day)\n    dd['wom'] = (dd.dom-1)\/\/7\n    dd['year'] = dd.ds.apply(lambda x: x.year)\n    dd['month'] = dd.ds.apply(lambda x: x.month)\n    return dd\n\nw1 = df1.groupby(['year', 'week']).y.sum().reset_index()\nw1['ds'] = pd.to_datetime(w1.week.astype(str)+w1.year.astype(str).add('-1') ,format='%V%G-%u')\nw2 = df2.groupby(['year', 'week']).y.sum().reset_index()\nw2['ds'] = pd.to_datetime(w2.week.astype(str)+w2.year.astype(str).add('-1') ,format='%V%G-%u')\nw3 = df3.groupby(['year', 'week']).y.sum().reset_index()\nw3['ds'] = pd.to_datetime(w3.week.astype(str)+w3.year.astype(str).add('-1') ,format='%V%G-%u')","3cf21d89":"vw1 = val1.groupby(['year', 'week']).dow.count().reset_index().drop(columns='dow')\nvw1['ds'] = pd.to_datetime(vw1.week.astype(str)+vw1.year.astype(str).add('-1') ,format='%V%G-%u')\nvw2 = val2.groupby(['year', 'week']).dow.count().reset_index().drop(columns='dow')\nvw2['ds'] = pd.to_datetime(vw2.week.astype(str)+vw2.year.astype(str).add('-1') ,format='%V%G-%u')\nvw3 = val3.groupby(['year', 'week']).dow.count().reset_index().drop(columns='dow')\nvw3['ds'] = pd.to_datetime(vw3.week.astype(str)+vw3.year.astype(str).add('-1') ,format='%V%G-%u')","6c11d2c7":"w1, w2, w3, vw1, vw2, vw3 = seasonalities2(w1), seasonalities2(w2), seasonalities2(w3), seasonalities2(vw1), seasonalities2(vw2), seasonalities2(vw3)","ff4a645b":"def model1(features,m='prophet', ys=True, ws=True):\n    pred = []\n    date = []\n    sc = []\n    a = 0\n    for c,(train0, val0) in enumerate(zip([w1, w2, w3], [vw1, vw2, vw3])):\n        c = c+1\n        train = train0.copy()\n        val = val0.copy()\n        if m=='prophet':\n            model = Prophet(yearly_seasonality=ys, weekly_seasonality=ws)\n            for feat in features:\n                model.add_regressor(feat)\n            model.fit(train)\n            pred += list(model.predict(val)['yhat'].apply(lambda x: int(max(x,0))).values)\n        if m=='arima':\n            if len(features)!=0:\n                model = auto_arima(y=train.y, exogenous=train[features])\n                pred += list(pd.DataFrame({'yhat':model.predict(n_periods=len(val), exogenous=val[features])}).yhat.apply(lambda x: int(max(x,0))).values)\n            if len(features)==0:\n                model = auto_arima(y=train.y)\n                pred += list(pd.DataFrame({'yhat':model.predict(n_periods=len(val))}).yhat.apply(lambda x: int(max(x,0))).values)\n        date += list(val.ds.values)\n        a += 1\n        sc += [a]*len(val)\n    \n    w_ = pd.DataFrame()\n    w_['pred'] = pred\n    w_['date'] = date\n    w_['SC'] = sc\n    w_ = w_.sort_values(by=['date', 'SC']).reset_index(drop=True)\n    \n    return w_.pred.values, w_.date.values, w_.SC.values","9d84770a":"def model2(features, ys=True, ws=True):\n    pred = []\n    date = []\n    sc = []\n    a = 0\n    for train0, val0 in zip([w1, w2, w3], [vw1, vw2, vw3]):\n        a += 1\n        for i in train0.wom.unique():\n            train = train0[train0.wom==i].copy()\n            val = val0[val0.wom==i].copy()\n            model = Prophet(yearly_seasonality=ys, weekly_seasonality=ws)\n            for feat in features:\n                model.add_regressor(feat)\n            model.fit(train)\n            pred += list(model.predict(val)['yhat'].apply(lambda x: int(max(x,0))).values)\n            date += list(val.ds.values)\n            sc += [a]*len(val)\n    w_ = pd.DataFrame()\n    w_['pred'] = pred\n    w_['date'] = date\n    w_['SC'] = sc\n    w_ = w_.sort_values(by=['date', 'SC']).reset_index(drop=True)\n    \n    return w_.pred.values, w_.date.values, w_.SC.values","b35980dd":"w = pd.DataFrame()\nw['pred_prophet1'], w['date'], w['SC'] = model1([\"wom\"], 'prophet', False, False)\nw['pred_prophet2'], _, _ = model2([\"wom\"], False, False)\nw['pred_prophet3'], _, _ = model2([], False, False)\nw['pred_prophet4'], _, _ = model1([], 'prophet', False, False)\nw['pred_arima1'], _, _ = model1([\"wom\", \"month\"], 'arima')\nw['pred_arima2'], _, _ = model1([], 'arima')\nw['pred_arima3'], _, _ = model1([\"wom\"], 'arima')\nw['pred_arima4'], _, _ = model1([\"wom\", 'year'], 'arima')\nw['pred_arima5'], _, _ = model1([\"wom\", 'year', 'dom'], 'arima')","bcddf8a8":"def fn(x):\n    if x.SC==1:\n        return x.pred_prophet1*1.802 + x.pred_prophet2*6.768 - x.pred_prophet3*6.403 + x.pred_prophet4*4.591 - x.pred_arima1*10.309 + x.pred_arima2*19.540 - x.pred_arima3*10.589 + x.pred_arima4*2.998 + x.pred_arima5*3.046 - 113.197\n    if x.SC==2:\n        return x.pred_prophet1*(-6.532) - x.pred_prophet2*0.101 - x.pred_prophet3*0.101 + x.pred_prophet4*0.0 + x.pred_arima1*9.825 + x.pred_arima2*7.980 + x.pred_arima3*3.217 - x.pred_arima4*8.368 - x.pred_arima5*2.045 - 62.273\n    if x.SC==3:\n        return x.pred_prophet1*0.613 + x.pred_prophet2*0.884 + x.pred_prophet3*0.884 - x.pred_prophet4*4.629 - x.pred_arima1*2.439 - x.pred_arima2*8.145 + x.pred_arima3*9.024 - x.pred_arima4*9.512 - x.pred_arima5*1.408 + 397.067\n\nw['pred'] = w.apply(fn, axis=1)","971f220d":"h['year'] = h.date.apply(lambda x: pd.to_datetime(x).year)\nh['month'] = h.date.apply(lambda x: pd.to_datetime(x).month)\nh['half'] = h.date.apply(lambda x: (pd.to_datetime(x).day-1)\/\/15)\n\nh1['avg_15'] = h1.y\nh2['avg_15'] = h2.y\nh3['avg_15'] = h3.y\n\ndf1 = df1.merge(h1[['year', 'month', 'half', 'avg_15']], on=['year', 'month', 'half'], how='left').dropna()\ndf2 = df2.merge(h2[['year', 'month', 'half', 'avg_15']], on=['year', 'month', 'half'], how='left').dropna()\ndf3 = df3.merge(h3[['year', 'month', 'half', 'avg_15']], on=['year', 'month', 'half'], how='left').dropna()\n\nh['avg_15'] = h.pred\n\nval1 = val1.merge(h[['SC', 'year', 'month', 'half', 'avg_15']], on=['SC', 'year', 'month', 'half'])\nval2 = val2.merge(h[['SC', 'year', 'month', 'half', 'avg_15']], on=['SC', 'year', 'month', 'half'])\nval3 = val3.merge(h[['SC', 'year', 'month', 'half', 'avg_15']], on=['SC', 'year', 'month', 'half'])","d8bfe2c7":"w['year'] = w.date.apply(lambda x: pd.to_datetime(x).year)\nw['week'] = w.date.apply(lambda x: pd.to_datetime(x).week)\n\nw1['wk_sum'] = w1.y\nw2['wk_sum'] = w2.y\nw3['wk_sum'] = w3.y\n\ndf1 = df1.merge(w1[['year', 'week', 'wk_sum']], on=['year', 'week'], how='left').dropna()\ndf2 = df2.merge(w2[['year', 'week', 'wk_sum']], on=['year', 'week'], how='left').dropna()\ndf3 = df3.merge(w3[['year', 'week', 'wk_sum']], on=['year', 'week'], how='left').dropna()\n\nw['wk_sum'] = w.pred\n\nval1 = val1.merge(w[['SC', 'year', 'week', 'wk_sum']], on=['SC', 'year', 'week'])\nval2 = val2.merge(w[['SC', 'year', 'week', 'wk_sum']], on=['SC', 'year', 'week'])\nval3 = val3.merge(w[['SC', 'year', 'week', 'wk_sum']], on=['SC', 'year', 'week'])","b9fdb419":"def model_p1(features, b1=True, b2=True):\n    pred=[]\n    date=[]\n    sc=[]\n    for c, (train0, val0) in enumerate(zip([df1, df2, df3], [val1, val2, val3])):\n        c = c+1\n        for i in train0.dow.unique():\n            train = train0[(train0.dow==i)].copy()\n            val = val0[val0.dow==i].copy()\n            model = Prophet(yearly_seasonality=b1, weekly_seasonality=b2)\n            for feat in features:\n                model.add_regressor(feat)\n            model.fit(train)\n            pred += list(model.predict(val)['yhat'].apply(lambda x: int(max(x,0))).values)\n            date += list(val.ds.values)\n            sc += list(val.SC.values)\n            \n    d1 = pd.DataFrame()\n    d1['pred'] = pred\n    d1['date'] = date\n    d1['SC'] = sc\n    d1 = d1.sort_values(by=['date', 'SC']).reset_index(drop=True)\n    \n    return list(d1.pred.values)\n    \ndef model_p2(features, b1=True, b2=True):\n    pred=[]\n    date=[]\n    sc=[]\n    for c, (train0, val0) in enumerate(zip([df1, df2, df3], [val1, val2, val3])):\n        c = c+1\n        train = train0.copy()\n        val = val0.copy()\n        model = Prophet(yearly_seasonality=b1, weekly_seasonality=b2)\n        for feat in features:\n            model.add_regressor(feat)\n        model.fit(train)\n        pred += list(model.predict(val)['yhat'].apply(lambda x: int(max(x,0))).values)\n        date += list(val.ds.values)\n        sc += list(val.SC.values)\n        \n    d1 = pd.DataFrame()\n    d1['pred'] = pred\n    d1['date'] = date\n    d1['SC'] = sc\n    d1 = d1.sort_values(by=['date', 'SC']).reset_index(drop=True)\n    \n    return list(d1.pred.values)","5d988a7d":"d = pd.DataFrame()\nd['date'] = list(val1.ds.values)+list(val2.ds.values)+list(val3.ds.values)\nd['SC'] = list(val1.SC.values)+list(val2.SC.values)+list(val3.SC.values) \nd = d.sort_values(by=['date', 'SC']).reset_index(drop=True)","2be10112":"d['pred_p_0'] = model_p1(['avg_15', 'wk_sum'], True, True)\nd['pred_p_1'] = model_p1(['avg_15', 'wk_sum'], True, False)\nd['pred_p_2'] = model_p1(['avg_15', 'wk_sum'], False, True)\nd['pred_p_3'] = model_p1(['avg_15', 'wk_sum'], False, False)\nd['pred_p_4'] = model_p2(['avg_15', 'wk_sum'], True, True)\nd['pred_p_5'] = model_p2(['avg_15', 'wk_sum'], True, False)","9b366217":"def fn(x):\n    if x.SC==1:\n        return x.pred_p_0 * (0.062) + x.pred_p_1 * (0.062) + x.pred_p_2 * (0.138) + x.pred_p_3 * (0.138) + x.pred_p_4 * (0.21) + x.pred_p_5 * (0.455) + 0.27\n    if x.SC==2:\n        return x.pred_p_0 * (2.177) + x.pred_p_1 * (-1.712) + x.pred_p_2 * (0.04) + x.pred_p_3 * (0.04) + x.pred_p_4 * (-0.487) + x.pred_p_5 * (0.97) + 0.61\n    if x.SC==3:\n        return x.pred_p_0 * (0.05) + x.pred_p_1 * (0.05) + x.pred_p_2 * (-3.638) + x.pred_p_3 * (3.781) + x.pred_p_4 * (0.438) + x.pred_p_5 * (0.142) + 0.85","acf93c80":"d['pred']=d.apply(fn, axis=1)\nd.pred.to_csv('submission_2.csv', header=False, index=False)","ad7629d6":"pd.read_csv('submission_2.csv', header=None)","e6f383f5":"# Step 5: Predicting weekly statistics","d75a0e5d":"### Models for predicting 15 day mean","41e39419":"### Models for day level predictions","b66c49fd":"### Models for predicting weekly total","720c2bf2":"# Step 3: Add seasonalities and other features","f836e210":"# Step 2: Dummy Test file to add date regressors","22ec8865":"### Combining Predictions","25a6dcf3":"# Step 1: Generate the required time series","bdc72a90":"# Day level Predictions","8980a0b0":"# Initialize Environment","6acff53e":"### Combining Predictions","cdf5bab1":"# Step 4: Predicting 15 day Statistics","6f1f5b7b":"## Adding new features to dataframe"}}