{"cell_type":{"c35eab7f":"code","9a69f017":"code","7a28fd7b":"code","230c24b5":"code","d53cd249":"code","2df84150":"code","e6b67be1":"code","9a58f06f":"code","c5e42cf5":"code","ee1e0f15":"code","a46cf087":"code","07fb2113":"code","303c5c23":"code","308cd7ec":"code","2818e1f3":"code","69ba7d4e":"code","d5f3ef2a":"code","d45f89e3":"code","94131a0e":"code","65891f71":"code","35f41d17":"code","79a34052":"code","98f69703":"code","298e6d6f":"code","89e5e692":"code","a95a077e":"code","24e80dae":"code","43f5c338":"code","d7de07aa":"code","abc155f9":"code","dcecb95c":"code","d5d76a5e":"code","fe3adca5":"code","2d705a63":"code","65d8ebff":"code","02115ca0":"code","7e2e9b18":"code","50ee84ee":"code","3043171c":"code","069e9f55":"code","5235e945":"code","4ecdaae2":"code","50faaac3":"code","7fdab2b2":"code","a7b984ff":"code","c5412676":"code","2416423f":"code","a961253a":"code","9a81c432":"code","befd1b43":"code","6a076e3e":"code","d03b26b6":"code","e756db94":"code","99da945e":"code","a2f68e07":"code","f5dab52d":"code","5c3b31b2":"code","561d64ed":"code","b8581a4c":"code","b194a97e":"code","42c13217":"code","8bf22090":"code","55f21bf1":"code","f9b6cf75":"code","c4578f88":"code","9aa9f663":"code","a9109bb8":"code","77e9110d":"code","56e13c18":"code","5dcd2121":"code","39150795":"code","0577aad7":"code","dc278463":"code","63906e96":"code","ea030f60":"code","cc43b0a8":"code","44ad7347":"code","ca80a3d4":"code","a0b2443a":"code","703e2b33":"code","e3939886":"code","c0b78cea":"code","77d5472b":"code","b2a782ea":"code","a001586c":"code","b18f29f3":"code","bd49792a":"code","9a1e641e":"code","42f26472":"code","9fb00133":"code","fe239e71":"markdown","21957fff":"markdown","442c8420":"markdown","408893d1":"markdown","12a8c453":"markdown","9d311598":"markdown"},"source":{"c35eab7f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n%matplotlib inline","9a69f017":"! pip install openpyxl","7a28fd7b":"df = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx')\ndf.drop(['Rank by Total'],inplace = True,axis = 1)\ndf","230c24b5":"df.head()","d53cd249":"df.tail()","2df84150":"df.shape","e6b67be1":"df.size","9a58f06f":"df.dtypes","c5e42cf5":"df.columns","ee1e0f15":"df.info()","a46cf087":"df.describe()","07fb2113":"df.isnull().sum()","303c5c23":"df.duplicated().sum()","308cd7ec":"df.skew()","2818e1f3":"df.corr()","69ba7d4e":"df['Team\/NOC'].value_counts()# all are unique","d5f3ef2a":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()","d45f89e3":"sns.pairplot(df)\nplt.show()","94131a0e":"fig = px.histogram(df, 'Gold',             \n                   color=\"Team\/NOC\",\n                   title=\"<b>Average cases per state<\/b>\")\n\nfig.add_vline(x=df['Gold'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","65891f71":"df[df['Gold'] > 5]['Team\/NOC']\n# countries with morethan 5 medals","35f41d17":"df[df['Gold'] > 5]['Team\/NOC'].count()\n# count of them","79a34052":"x = df[df['Gold'] > 5]['Team\/NOC']\ny = df[df['Gold'] > 5]['Gold']\ndata = go.Bar(x= x,y= y)\nlayout = go.Layout(title = 'Simple Bar Chart')\nfig = go.Figure(data=data,layout=layout)\nfig.show()\n# Estado uniods has got many gold medals followed by china","98f69703":"df[df['Gold'] < 5]['Team\/NOC']\n# countries with lessthan 5 medals","298e6d6f":"df[df['Gold'] < 5]['Team\/NOC'].count()\n# count of them","89e5e692":"y = df[df['Gold'] < 5]['Team\/NOC']\nx = df[df['Gold'] < 5]['Gold']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","a95a077e":"df1 = df[['Team\/NOC','Gold']].sort_values('Gold')\ndf1","24e80dae":"y = df1['Team\/NOC']\nx = df1['Gold']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='red')\nfig.show()","43f5c338":"fig = px.histogram(df, 'Silver',             \n                   color=\"Team\/NOC\",\n                   title=\"<b>Average cases per state<\/b>\")\n\nfig.add_vline(x=df['Silver'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","d7de07aa":"df[df['Silver']>5]['Team\/NOC']\n# Countries with silver medals greaher than 5","abc155f9":"df[df['Silver']>5]['Team\/NOC'].count()\n# count of them","dcecb95c":"x = df[df['Silver'] > 5]['Team\/NOC']\ny = df[df['Silver'] > 5]['Silver']\ndata = go.Bar(x= x,y= y)\nlayout = go.Layout(title = 'Simple Bar Chart')\nfig = go.Figure(data=data,layout=layout)\nfig.show()\n# Estado uniods has got many silver medals followed by china","d5d76a5e":"df[df['Silver']<5]['Team\/NOC']\n# Countries with silver medals less than 5","fe3adca5":"df[df['Silver']<5]['Team\/NOC'].count()\n# count of them","2d705a63":"y = df[df['Silver'] < 5]['Team\/NOC']\nx = df[df['Silver'] < 5]['Silver']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","65d8ebff":"df2 = df[['Team\/NOC','Silver']].sort_values('Silver')\ndf2","02115ca0":"y = df2['Team\/NOC']\nx = df2['Silver']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='magenta')\nfig.show()","7e2e9b18":"fig = px.histogram(df, 'Bronze',             \n                   color=\"Team\/NOC\",\n                   title=\"<b>Average cases per state<\/b>\")\n\nfig.add_vline(x=df['Bronze'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","50ee84ee":"df[df['Bronze'] > 5]['Team\/NOC']\n# countries with bronze medals greather than 5","3043171c":"df[df['Bronze'] > 5]['Team\/NOC'].count()\n# count of them","069e9f55":"x = df[df['Bronze'] > 5]['Team\/NOC']\ny = df[df['Bronze'] > 5]['Bronze']\ndata = go.Bar(x= x,y= y)\nlayout = go.Layout(title = 'Simple Bar Chart')\nfig = go.Figure(data=data,layout=layout)\nfig.show()\n# Estado uniods has got many silver medals followed by china","5235e945":"df[df['Bronze'] < 5]['Team\/NOC']\n# countries with bronze medals less than 5","4ecdaae2":"df[df['Bronze'] < 5]['Team\/NOC'].count()\n# count of them","50faaac3":"y = df[df['Bronze'] < 5]['Team\/NOC']\nx = df[df['Bronze'] < 5]['Bronze']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","7fdab2b2":"df3 = df[['Team\/NOC','Bronze']].sort_values('Bronze')\ndf3","a7b984ff":"y = df3['Team\/NOC']\nx = df3['Bronze']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='yellowgreen')\nfig.show()","c5412676":"fig = px.histogram(df, 'Total',             \n                   color=\"Team\/NOC\",\n                   title=\"<b>Average cases per state<\/b>\")\n\nfig.add_vline(x=df['Total'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","2416423f":"df[df['Total']  > 10]['Team\/NOC']\n# countries with total medals greather than 10","a961253a":"df[df['Total']  > 10]['Team\/NOC'].count()\n# count of them","9a81c432":"x = df[df['Total'] > 10]['Team\/NOC']\ny = df[df['Total'] > 10]['Total']\ndata = go.Bar(x= x,y= y)\nlayout = go.Layout(title = 'Simple Bar Chart')\nfig = go.Figure(data=data,layout=layout)\nfig.show()\n# Estado uniods has got many silver medals followed by china","befd1b43":"df[df['Total']  < 10]['Team\/NOC']\n# countries with total medals less than 10","6a076e3e":"df[df['Total']  < 10]['Team\/NOC'].count()\n# count of them","d03b26b6":"y = df[df['Total'] < 10]['Team\/NOC']\nx = df[df['Total'] < 10]['Total']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","e756db94":"df4 = df[['Team\/NOC','Total']].sort_values('Total')\ndf4","99da945e":"y = df4['Team\/NOC']\nx = df4['Total']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='orange')\nfig.show()","a2f68e07":"a = []\nfor i in df1['Team\/NOC'].tail(5):\n    a.append(i)\ndf1.tail()","f5dab52d":"for i in df2['Team\/NOC'].tail(5):\n    a.append(i)\ndf2.tail()","5c3b31b2":"for i in df3['Team\/NOC'].tail(5):\n    a.append(i)\ndf3.tail()","561d64ed":"for i in df4['Team\/NOC'].tail(5):\n    a.append(i)\ndf4.tail()","b8581a4c":"len(a)","b194a97e":"c = []\nfor i in a:\n    if i not in c:\n        c.append(i)\nc\n# removing repeated countries","42c13217":"v = df['Team\/NOC'].index.values\nv","8bf22090":"m = []\nfor i in range(len(v)):\n    if df['Team\/NOC'][i] in c:\n        m.append(v[i])\nm","55f21bf1":"df8 = df.loc[m]\ndf8\n\n# consists of states which are top 5 respective column","f9b6cf75":"x = df8['Team\/NOC']\ny1 = df8['Gold']\ny2 = df8['Silver']\ny3 = df8['Bronze']\ny4 = df8['Total']\ntrace1 = go.Bar(x= x,y= y1,marker={'color' : '#FFB300'},name = 'Gold')    \ntrace2 = go.Bar(x= x,y= y2,marker={'color' : '#F7DC6F'},name = 'Silver') \ntrace3 = go.Bar(x= x,y= y3,marker={'color' : '#FF9800'},name = 'Bronze')\ntrace4 = go.Bar(x= x,y= y4,marker={'color' : '#7CB342'},name = 'Total')\nlayout = go.Layout(title= 'Grouped Bar Chart' , width=980,height=800)\ndata = [trace1,trace2,trace3,trace4]\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n# over all visualisation of countries\n# usa is most consistent team","c4578f88":"plt.figure(figsize=(6,8))\nx = df.drop(['Team\/NOC'],axis = 1)\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","9aa9f663":"plt.figure(figsize=(6,8))\nx = df.drop(['Team\/NOC'],axis = 1)\nfor i in x.columns:\n    sns.scatterplot(x= 'Gold',y=x[i],data=df)\n    plt.show()","a9109bb8":"plt.figure(figsize=(6,8))\nx = df.drop(['Team\/NOC'],axis = 1)\nfor i in x.columns:\n    sns.scatterplot(x= 'Silver',y=x[i],data=df)\n    plt.show()","77e9110d":"plt.figure(figsize=(6,8))\nx = df.drop(['Team\/NOC'],axis = 1)\nfor i in x.columns:\n    sns.scatterplot(x= 'Bronze',y=x[i],data=df)\n    plt.show()","56e13c18":"plt.figure(figsize=(6,8))\nx = df.drop(['Team\/NOC'],axis = 1)\nfor i in x.columns:\n    sns.scatterplot(x= 'Total',y=x[i],data=df)\n    plt.show()","5dcd2121":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df8.corr(),annot = True, cmap = 'viridis')\nplt.show()\n# data frame contains top countries","39150795":"sns.pairplot(df8)","0577aad7":"x = df.drop('Team\/NOC',axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","dc278463":"x = df.drop('Team\/NOC',axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","63906e96":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df)","ea030f60":"# Displaying Label , Value & percent in Pie Chart using \"textinfo\" parameter\nfor i in range(len(df['Team\/NOC'][:10])):\n    tickets = df.iloc[i]\n    status = ['Gold' , 'Bronze' , 'Silver' , 'Total']\n    colors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\n    data = go.Pie(\n                  values= tickets,\n                  labels= status,\n                  marker=dict(colors=colors),\n                  textinfo='label+value+percent'\n                  )\n\n\n    layout = go.Layout(\n                       title=dict(text = df['Team\/NOC'][i],x=0.46,y=0.95,font_size=20),\n                       width=800,\n                       height=650\n                      )\n\n    fig = go.Figure(data=data,layout=layout)\n\n    fig.show()","cc43b0a8":"! pip install chart-studio","44ad7347":"import chart_studio.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","ca80a3d4":"init_notebook_mode(connected=True) ","a0b2443a":"data = dict(\n        type = 'choropleth',\n        locations = df['Team\/NOC'],\n    locationmode = 'country names',\n        z = df['Gold'],\n        text = df['Team\/NOC'],\n        colorbar = {'title' : 'country wise gold medals'},\n      ) ","703e2b33":"layout = dict(\n    title = '2020 olympic gold',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'hammer'}\n    )\n)","e3939886":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","c0b78cea":"data = dict(\n        type = 'choropleth',\n        locations = df['Team\/NOC'],\n    locationmode = 'country names',\n        z = df['Silver'],\n        text = df['Team\/NOC'],\n        colorbar = {'title' : 'country wise Silver medals'},\n      ) ","77d5472b":"layout = dict(\n    title = '2020 olympic Silver Medaals',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth'}\n    )\n)","b2a782ea":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","a001586c":"data = dict(\n        type = 'choropleth',\n        locations = df['Team\/NOC'],\n    locationmode = 'country names',\n        z = df['Bronze'],\n        text = df['Team\/NOC'],\n        colorbar = {'title' : 'country wise Bronze medals'},\n      ) ","b18f29f3":"layout = dict(\n    title = '2020 olympic Bronze Medals',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth2'}\n    )\n)","bd49792a":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","9a1e641e":"data = dict(\n        type = 'choropleth',\n        locations = df['Team\/NOC'],\n    locationmode = 'country names',\n        z = df['Total'],\n        text = df['Team\/NOC'],\n        colorbar = {'title' : 'country wise Bronze medals'},\n      ) ","42f26472":"layout = dict(\n    title = '2020 olympic Total Medals',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'cylindrical stereographic'}\n    )\n)","9fb00133":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","fe239e71":"# Exploratory Data Analysis","21957fff":"# Data Visualisation","442c8420":"# Visual Analysis with world Map","408893d1":"# Importing Libraries","12a8c453":"# Loading Dataset","9d311598":"## Choropleth Map "}}