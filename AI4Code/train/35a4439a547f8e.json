{"cell_type":{"2c86f314":"code","05a48ba4":"code","c3b30ae9":"code","21b4fead":"code","f8efcacb":"code","dc56df7f":"code","fd6513ba":"code","664d2b5b":"code","8e660cfa":"code","586679dc":"code","7b746876":"code","9e0e7be9":"code","c033cb4e":"code","2dff14d5":"code","8786153c":"code","38d7700e":"code","0d1128f9":"code","1d8190dd":"code","af050ff3":"code","fb598a9c":"code","0300b9b2":"code","256948c4":"code","b6fb6957":"code","5ff4b7f1":"code","6da2775b":"code","74e43ba2":"code","8c93bab9":"code","26aa8653":"code","92de7165":"code","82447ed6":"code","681363f1":"code","d7ea21d5":"code","cc50131e":"code","c511983a":"code","2e90f3ec":"code","8aa3b929":"code","a60cd250":"code","342b984d":"code","80fbe974":"code","becae1fd":"code","d8b35bb5":"code","9d9c0baa":"code","257123c7":"code","72561c2b":"code","1146528c":"code","894c41ba":"code","e5e9c3db":"code","14e5319e":"code","dc1cbb58":"code","e33e64c2":"code","d778973c":"code","b0637d76":"code","398964b8":"code","3fb6bd84":"code","98527892":"code","fe6cfbec":"code","5750f52a":"code","c36423f2":"markdown","a4bff18b":"markdown","e1a3e6a8":"markdown","98d27d33":"markdown","e953e43e":"markdown","c91b8036":"markdown","dd2e1ea7":"markdown","32e7dd3b":"markdown","b3d4e649":"markdown","778bafab":"markdown","18a5ba31":"markdown","f8553c8c":"markdown","d25a27b9":"markdown","87240b9f":"markdown","ab5c2c38":"markdown","0dcb2506":"markdown","6d86a8ec":"markdown","a7f9eca0":"markdown","24543299":"markdown","837a9671":"markdown","629ee535":"markdown","2bd9c4fc":"markdown","29f88b0a":"markdown","f57f35e2":"markdown","4299d887":"markdown","739e2adc":"markdown","1d481c6c":"markdown","80e2bca9":"markdown","e0f50b0a":"markdown","009d6137":"markdown"},"source":{"2c86f314":"!pip install -U pip\n!pip install -U dill\n!pip install -U nltk==3.4","05a48ba4":"from nltk.util import pad_sequence\nfrom nltk.util import bigrams\nfrom nltk.util import ngrams\nfrom nltk.util import everygrams\nfrom nltk.lm.preprocessing import pad_both_ends\nfrom nltk.lm.preprocessing import flatten","c3b30ae9":"text = [['a', 'b', 'c'], ['a', 'c', 'd', 'c', 'e', 'f']]","21b4fead":"list(bigrams(text[0]))","f8efcacb":"list(ngrams(text[1], n=3))","dc56df7f":"from nltk.util import pad_sequence\nlist(pad_sequence(text[0],\n                  pad_left=True, left_pad_symbol=\"<s>\",\n                  pad_right=True, right_pad_symbol=\"<\/s>\",\n                  n=2)) # The n order of n-grams, if it's 2-grams, you pad once, 3-grams pad twice, etc. ","fd6513ba":"padded_sent = list(pad_sequence(text[0], pad_left=True, left_pad_symbol=\"<s>\", \n                                pad_right=True, right_pad_symbol=\"<\/s>\", n=2))\nlist(ngrams(padded_sent, n=2))","664d2b5b":"list(pad_sequence(text[0],\n                  pad_left=True, left_pad_symbol=\"<s>\",\n                  pad_right=True, right_pad_symbol=\"<\/s>\",\n                  n=3)) # The n order of n-grams, if it's 2-grams, you pad once, 3-grams pad twice, etc. ","8e660cfa":"padded_sent = list(pad_sequence(text[0], pad_left=True, left_pad_symbol=\"<s>\", \n                                pad_right=True, right_pad_symbol=\"<\/s>\", n=3))\nlist(ngrams(padded_sent, n=3))","586679dc":"from nltk.lm.preprocessing import pad_both_ends\nlist(pad_both_ends(text[0], n=2))\n","7b746876":"list(bigrams(pad_both_ends(text[0], n=2)))","9e0e7be9":"from nltk.util import everygrams\npadded_bigrams = list(pad_both_ends(text[0], n=2))\nlist(everygrams(padded_bigrams, max_len=2))","c033cb4e":"from nltk.lm.preprocessing import flatten\nlist(flatten(pad_both_ends(sent, n=2) for sent in text))","2dff14d5":"from nltk.lm.preprocessing import padded_everygram_pipeline\ntrain, vocab = padded_everygram_pipeline(2, text)","8786153c":"training_ngrams, padded_sentences = padded_everygram_pipeline(2, text)\nfor ngramlize_sent in training_ngrams:\n    print(list(ngramlize_sent))\n    print()\nprint('#############')\nlist(padded_sentences)","38d7700e":"try: # Use the default NLTK tokenizer.\n    from nltk import word_tokenize, sent_tokenize \n    # Testing whether it works. \n    # Sometimes it doesn't work on some machines because of setup issues.\n    word_tokenize(sent_tokenize(\"This is a foobar sentence. Yes it is.\")[0])\nexcept: # Use a naive sentence tokenizer and toktok.\n    import re\n    from nltk.tokenize import ToktokTokenizer\n    # See https:\/\/stackoverflow.com\/a\/25736515\/610569\n    sent_tokenize = lambda x: re.split(r'(?<=[^A-Z].[.?]) +(?=[A-Z])', x)\n    # Use the toktok tokenizer that requires no dependencies.\n    toktok = ToktokTokenizer()\n    word_tokenize = word_tokenize = toktok.tokenize","0d1128f9":"import os\nimport requests\nimport io #codecs\n\n\n# Text version of https:\/\/kilgarriff.co.uk\/Publications\/2005-K-lineer.pdf\nif os.path.isfile('language-never-random.txt'):\n    with io.open('language-never-random.txt', encoding='utf8') as fin:\n        text = fin.read()\nelse:\n    url = \"https:\/\/gist.githubusercontent.com\/alvations\/53b01e4076573fea47c6057120bb017a\/raw\/b01ff96a5f76848450e648f35da6497ca9454e4a\/language-never-random.txt\"\n    text = requests.get(url).content.decode('utf8')\n    with io.open('language-never-random.txt', 'w', encoding='utf8') as fout:\n        fout.write(text)","1d8190dd":"# Tokenize the text.\ntokenized_text = [list(map(str.lower, word_tokenize(sent))) \n                  for sent in sent_tokenize(text)]","af050ff3":"tokenized_text[0]","fb598a9c":"print(text[:500])","0300b9b2":"# Preprocess the tokenized text for 3-grams language modelling\nn = 3\ntrain_data, padded_sents = padded_everygram_pipeline(n, tokenized_text)","256948c4":"from nltk.lm import MLE\nmodel = MLE(n) # Lets train a 3-grams model, previously we set n=3","b6fb6957":"len(model.vocab)","5ff4b7f1":"model.fit(train_data, padded_sents)\nprint(model.vocab)","6da2775b":"len(model.vocab)","74e43ba2":"print(model.vocab.lookup(tokenized_text[0]))","8c93bab9":"# If we lookup the vocab on unseen sentences not from the training data, \n# it automatically replace words not in the vocabulary with `<UNK>`.\nprint(model.vocab.lookup('language is never random lah .'.split()))","26aa8653":"print(model.counts)","92de7165":"model.counts['language'] # i.e. Count('language')","82447ed6":"model.counts[['language']]['is'] # i.e. Count('is'|'language')","681363f1":"model.counts[['language', 'is']]['never'] # i.e. Count('never'|'language is')","d7ea21d5":"model.score('language') # P('language')","cc50131e":"model.score('is', 'language'.split())  # P('is'|'language')","c511983a":"model.score('never', 'language is'.split())  # P('never'|'language is')","2e90f3ec":"model.score(\"<UNK>\") == model.score(\"lah\")","8aa3b929":"model.score(\"<UNK>\") == model.score(\"leh\")","a60cd250":"model.score(\"<UNK>\") == model.score(\"lor\")","342b984d":"model.logscore(\"never\", \"language is\".split())","80fbe974":"print(model.generate(20, random_seed=7))","becae1fd":"from nltk.tokenize.treebank import TreebankWordDetokenizer\n\ndetokenize = TreebankWordDetokenizer().detokenize\n\ndef generate_sent(model, num_words, random_seed=42):\n    \"\"\"\n    :param model: An ngram language model from `nltk.lm.model`.\n    :param num_words: Max no. of words to generate.\n    :param random_seed: Seed value for random.\n    \"\"\"\n    content = []\n    for token in model.generate(num_words, random_seed=random_seed):\n        if token == '<s>':\n            continue\n        if token == '<\/s>':\n            break\n        content.append(token)\n    return detokenize(content)","d8b35bb5":"generate_sent(model, 20, random_seed=7)","9d9c0baa":"print(model.generate(28, random_seed=0))","257123c7":"generate_sent(model, 28, random_seed=0)","72561c2b":"generate_sent(model, 20, random_seed=1)","1146528c":"generate_sent(model, 20, random_seed=30)","894c41ba":"generate_sent(model, 20, random_seed=42)","e5e9c3db":"import dill as pickle \n\nwith open('kilgariff_ngram_model.pkl', 'wb') as fout:\n    pickle.dump(model, fout)","14e5319e":"with open('kilgariff_ngram_model.pkl', 'rb') as fin:\n    model_loaded = pickle.load(fin)","dc1cbb58":"generate_sent(model_loaded, 20, random_seed=42)","e33e64c2":"import pandas as pd\ndf = pd.read_csv('..\/input\/Donald-Tweets!.csv')\ndf.head()","d778973c":"trump_corpus = list(df['Tweet_Text'].apply(word_tokenize))","b0637d76":"# Preprocess the tokenized text for 3-grams language modelling\nn = 3\ntrain_data, padded_sents = padded_everygram_pipeline(n, trump_corpus)","398964b8":"from nltk.lm import MLE\ntrump_model = MLE(n) # Lets train a 3-grams model, previously we set n=3\ntrump_model.fit(train_data, padded_sents)","3fb6bd84":"generate_sent(trump_model, num_words=20, random_seed=42)","98527892":"generate_sent(trump_model, num_words=10, random_seed=0)","fe6cfbec":"generate_sent(trump_model, num_words=50, random_seed=10)","5750f52a":"print(generate_sent(trump_model, num_words=100, random_seed=52))","c36423f2":"Note the `n` argument, that tells the function we need padding for bigrams.\n\nNow, passing all these parameters every time is tedious and in most cases they can be safely assumed as defaults anyway.\n\nThus the `nltk.lm` module provides a convenience function that has all these arguments already set while the other arguments remain the same as for `pad_sequence`.","a4bff18b":"# Training an N-gram Model","e1a3e6a8":"... which gets filled as we fit the model.","98d27d33":"# Generation using N-gram Language Model","e953e43e":"We are almost ready to start counting ngrams, just one more step left.\n\nDuring training and evaluation our model will rely on a vocabulary that defines which words are \"known\" to the model.\n\nTo create this vocabulary we need to pad our sentences (just like for counting ngrams) and then combine the sentences into one flat stream of words.\n","c91b8036":"# Using the N-gram Language Model","dd2e1ea7":"...and bigrams for the phrase \"language is\"","32e7dd3b":"# Lets try some generating with Donald Trump data!!!\n\n\n**Dataset:** https:\/\/www.kaggle.com\/kingburrito666\/better-donald-trump-tweets#Donald-Tweets!.csv\n\n\nIn this part, I'll be munging that data as how I would be doing it at work. \nI've really no seen the data before but I hope this session would be helpful for you to see how to approach new datasets with the skills you have.","b3d4e649":"# Saving the model \n\nThe native Python's pickle may not save the lambda functions in the  model, so we can use the `dill` library in place of pickle to save and load the language model.\n","778bafab":"So as to avoid re-creating the text in memory, both `train` and `vocab` are lazy iterators. They are evaluated on demand at training time.\n\nFor the sake of understanding the output of `padded_everygram_pipeline`, we'll \"materialize\" the lazy iterators by casting them into a list.","18a5ba31":"Notice how \"b\" occurs both as the first and second member of different bigrams but \"a\" and \"c\" don't? \n\nWouldn't it be nice to somehow indicate how often sentences start with \"a\" and end with \"c\"?\n\n\nA standard way to deal with this is to add special \"padding\" symbols to the sentence before splitting it into ngrams. Fortunately, NLTK also has a function for that, let's see what it does to the first sentence.\n","f8553c8c":"And so on. However, the real purpose of training a language model is to have it score how probable words are in certain contexts.\n\nThis being MLE, the model returns the item's relative frequency as its score.","d25a27b9":"Moreover, in some cases we want to ignore words that we did see during training but that didn't occur frequently enough, to provide us useful information. \n\nYou can tell the vocabulary to ignore such words using the `unk_cutoff` argument for the vocabulary lookup, To find out how that works, check out the docs for the [`nltk.lm.vocabulary.Vocabulary` class](https:\/\/github.com\/nltk\/nltk\/blob\/develop\/nltk\/lm\/vocabulary.py)","87240b9f":"This provides a convenient interface to access counts for unigrams...","ab5c2c38":"To avoid underflow when working with many small score values it makes sense to take their logarithm. \n\nFor convenience this can be done with the `logscore` method.\n","0dcb2506":"## Lets get some real data and tokenize it","6d86a8ec":"The vocabulary helps us handle words that have not occurred during training.","a7f9eca0":"One cool feature of ngram models is that they can be used to generate text.","24543299":"Initializing the MLE model, creates an empty vocabulary","837a9671":"If we want to train a bigram model, we need to turn this text into bigrams. Here's what the first sentence of our text would look like if we use the `ngrams` function from NLTK for this.","629ee535":"# N-grams Language Models (N-grams LM)\n\nNowadays, everything seems to be going neural... \n\nTraditionally, we can use n-grams to generate language models to predict which word comes next given a history of words. \n\nWe'll use the `lm` module in `nltk` to get a sense of how non-neural language modelling is done.\n\n(**Source:** The content in this notebook is largely based on [language model tutorial in NLTK documentation by Ilia Kurenkov](https:\/\/github.com\/nltk\/nltk\/blob\/develop\/nltk\/lm\/__init__.py))","2bd9c4fc":"... and trigrams for the phrase \"language is never\"","29f88b0a":"In most cases we want to use the same text as the source for both vocabulary and ngram counts.\n\nNow that we understand what this means for our preprocessing, we can simply import a function that does everything for us.","f57f35e2":"Items that are not seen during training are mapped to the vocabulary's \"unknown label\" token.  This is \"<UNK>\" by default.\n","4299d887":"Combining the two parts discussed so far we get the following preparation steps for one sentence.","739e2adc":"Having prepared our data we are ready to start training a model. As a simple example, let us train a Maximum Likelihood Estimator (MLE).\n\nWe only need to specify the highest ngram order to instantiate it.","1d481c6c":"**Note:** For more sophisticated ngram models, take a look at [these objects from `nltk.lm.models`](https:\/\/github.com\/nltk\/nltk\/blob\/develop\/nltk\/lm\/models.py):\n\n - `Lidstone`: Provides Lidstone-smoothed scores.\n - `Laplace`: Implements Laplace (add one) smoothing.\n - `InterpolatedLanguageModel`: Logic common to all interpolated language models (Chen & Goodman 1995).\n - `WittenBellInterpolated`: Interpolated version of Witten-Bell smoothing.","80e2bca9":"When it comes to ngram models the training boils down to counting up the ngrams from the training corpus.","e0f50b0a":"To make our model more robust we could also train it on unigrams (single words) as well as bigrams, its main source of information.\nNLTK once again helpfully provides a function called `everygrams`.\n\nWhile not the most efficient, it is conceptually simple.","009d6137":"We can do some cleaning to the generated tokens to make it human-like."}}