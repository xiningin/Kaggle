{"cell_type":{"00839db4":"code","b1451d38":"code","5d6eb425":"code","f408e22e":"code","7014fb2f":"code","23622215":"code","32643c06":"code","4221a604":"code","46fc93cb":"code","83de0b86":"markdown","3b728664":"markdown","16a01a96":"markdown"},"source":{"00839db4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b1451d38":"def plot_and_predict(more_days, country):    \n    def avg_err(pcov):\n        return np.round(np.sqrt(np.diag(pcov)).mean(), 2)\n    \n    cmd = data[data[\"country\"]==country].iloc[: , [0, 2, 3 ,4, 5]].copy() \n    cmd_grp = cmd.groupby(\"date\")[['confirm', 'death', 'recover']].sum().reset_index()\n    y = cmd_grp[\"confirm\"]\n    x = np.arange(len(y))\n    \n    print(np.array(y).astype(int))\n\n    def f_lin(x, a, b):\n        return a * x + b\n\n    def f_poly(x, a, b, c, d, e):\n        return a * x**4 + b*x**3 + c*x**2 + d*x**1 + e\n\n    def f_pow(x, a, b, c):\n        return b*(x)**a + c\n        \n    def f_exp(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    \n    def f_sigmoid(x, a, b, c, d):\n        return c \/ (1 + np.exp(-b*(x-a)))+d\n\n\n    \n    # popt_lin, pcov_lin = curve_fit(f_lin, x, y)\n    # popt_poly, pcov_poly = curve_fit(f_poly, x, y)\n    popt_pow, pcov_pow = curve_fit(f_pow, x, y,maxfev=100000)\n    popt_exp, pcov_exp = curve_fit(f_exp, x, y, p0=(1, 1e-6, 1), maxfev=100000)\n    popt_sig, pcov_sig = curve_fit(f_sigmoid,x, y, method='dogbox', bounds=([10., 0.001, y.mean(), 10],[100, 1., 10*y.mean(), 100]), maxfev=200000)\n\n    ## Prediction\n    plt.figure(figsize=(18,12))\n    x_m = np.arange(len(y)+more_days)\n    \n    # y_m = f_lin(x_m, *popt_lin)\n    # plt.plot(x_m, y_m, c='k', marker=\"*\", label=\"linear | error: \"+str(avg_err(pcov_lin))) \n    # plt.text(x_m[-1]+.5, y_m[-1], str(int(y_m[-1])), size = 10)\n    \n    # y_m = f_poly(x_m, *popt_poly)    \n    # plt.plot(x_m, y_m, c='m', marker=\"+\", label=\"polynomial | error: \"+str(avg_err(pcov_poly))) \n    # plt.text(x_m[-1]+.5, y_m[-1], str(int(y_m[-1])), size = 10)\n    \n    y_m = f_exp(x_m, *popt_exp)\n    plt.plot(x_m, y_m, c='r', marker=\"p\", label=\"UGLY (exponential) | error: \"+str(avg_err(pcov_exp))) \n    plt.text(x_m[-1]+.5, y_m[-1], str(int(y_m[-1])), size = 15, color=\"r\")\n\n    y_m = f_pow(x_m, *popt_pow)\n    plt.plot(x_m, y_m, c='y', marker=\"s\", label=\"BAD (power law) | error: \"+str(avg_err(pcov_pow))) \n    plt.text(x_m[-1]+.5, y_m[-1], str(int(y_m[-1])), size = 15, color=\"y\")\n       \n    \n    y_m = f_sigmoid(x_m, *popt_sig)\n    plt.plot(x_m, y_m, c='g', marker=\"x\", label=\"GOOD (sigmoid) | error: \"+str(avg_err(pcov_sig))) \n    plt.text(x_m[-1]+.5, y_m[-1], str(int(y_m[-1])), size = 15, color=\"g\")\n    \n    y = y.values\n    plt.plot(x, y, c='b', marker=\"o\", label = \"Official Data\")\n    plt.text(x[-1]-2.5, y[-1], str(int(y[-1])), size = 15, color=\"b\")\n\n    plt.xlabel(\"Days\", size=14)\n    plt.xticks(np.arange(1,len(x_m),2),size=14)\n    plt.ylabel(\"Total Infected\", size=14)\n    plt.yticks(size=14)\n    plt.legend(prop={'size': 15})\n    plt.title(country+\"'s Data\", size=15)\n    plt.axvline(x[-1], color=\"b\")\n    plt.text(x[-1]-1, 1, \"today\", color=\"b\", size = 20, rotation=90)\n    plt.axvline(x[-1]+1, color=\"k\")\n    plt.text(x[-1]+1, 1000, \"tomorrow\", color=\"k\", size = 20, rotation=90)\n\n    plt.show()","5d6eb425":"data=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata=data.drop('Last Update', axis=1)\ndata=data.drop(\"SNo\",axis=1)\ndata=data.rename(columns={\"ObservationDate\": \"date\", \"Country\/Region\": \"country\", \"Province\/State\": \"state\",\"Confirmed\":\"confirm\",\"Deaths\": \"death\",\"Recovered\":\"recover\"})\ndata.head()","f408e22e":"next_days = 1","7014fb2f":"country = \"UK\"\nplot_and_predict(next_days, country)","23622215":"country = \"US\"\nplot_and_predict(next_days, country)","32643c06":"country = \"South Korea\"\nplot_and_predict(next_days, country)","4221a604":"country = \"Italy\"\nplot_and_predict(next_days, country)","46fc93cb":"country = \"Iran\"\nplot_and_predict(next_days, country)","83de0b86":"### End","3b728664":"### A simple code for curve-fitting on daily COVID19 data.","16a01a96":"#### days to predict"}}