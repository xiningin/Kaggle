{"cell_type":{"4cb97144":"code","9927e890":"code","834f6cd9":"code","e37eadb6":"code","059e6915":"code","8023769f":"code","71814000":"code","8e6a2aac":"code","41b2cf52":"code","09989b4f":"code","80736f0f":"code","fe193a4f":"code","68625543":"code","00bacfea":"code","293dcdcc":"code","42eac735":"markdown","48c4c559":"markdown","11ea49c3":"markdown"},"source":{"4cb97144":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom fastai.vision import *\nfrom fastai.metrics import *\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\npath = '..\/input'\nprint(os.listdir(path))\n\n# Any results you write to the current directory are saved as output.","9927e890":"class CustomImageList(ImageList):\n    def open(self, fn):\n        img = fn.reshape(28,28)\n        img = np.stack((img,)*3, axis=-1)\n        return Image(pil2tensor(img, dtype=np.float32))\n    \n    @classmethod\n    def from_csv_custom(cls, path:PathOrStr, csv_name:str, imgIdx:int=1, header:str='infer', **kwargs)->'ItemList': \n        df = pd.read_csv(Path(path)\/csv_name, header=header)\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        \n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        \n        return res","834f6cd9":"test = CustomImageList.from_csv_custom(path=path, csv_name='test.csv', imgIdx=0)","e37eadb6":"tfms = get_transforms(do_flip=False)\ndata = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                .split_by_rand_pct(.2)\n                .label_from_df(cols='label')\n                .add_test(test, label=0)\n                .transform(tfms)\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))","059e6915":"data.show_batch(rows=3, figsize=(5,5))","8023769f":"learn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir='\/kaggle\/working\/models')","71814000":"learn.lr_find()","8e6a2aac":"learn.recorder.plot()","41b2cf52":"lr = 1e-2\nlearn.fit_one_cycle(10, lr)","09989b4f":"learn.save('stage1-resnet50')","80736f0f":"learn.load('stage1-resnet50')\nlearn.validate()","fe193a4f":"learn.lr_find()\nlearn.recorder.plot()","68625543":"learn.unfreeze()\nlearn.fit_one_cycle(5, max_lr=slice(1e-6, 2.5e-4))","00bacfea":"learn.validate()","293dcdcc":"# get the predictions\npredictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n# output to a file\nsubmission_df = pd.DataFrame({'ImageId': list(range(1,len(labels)+1)), 'Label': labels})\nsubmission_df.to_csv(f'submission.csv', index=False)","42eac735":"## Submit","48c4c559":"## Train Model","11ea49c3":"## Load data"}}