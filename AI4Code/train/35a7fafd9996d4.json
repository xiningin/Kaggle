{"cell_type":{"8e3e8fad":"code","42978edd":"code","13416d55":"code","ba62f6cb":"code","4e92eded":"code","452ff55e":"code","b731ab8e":"code","8dc115b2":"code","5e9ea34d":"code","da24290f":"code","b000a35e":"code","c351aa53":"code","534aea78":"code","75c5040b":"markdown","e2d7de82":"markdown","5f3fa7bd":"markdown"},"source":{"8e3e8fad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42978edd":"df_sale = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\ndf_sale_eval = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv')\ndf_calendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\ndf_price = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')","13416d55":"date_columns = df_sale.columns[df_sale.columns.str.contains(\"d_\")]\ndates_s = [pd.to_datetime(df_calendar.loc[df_calendar['d'] == str_date,'date'].values[0]) for str_date in date_columns]\n\ndf_ev_1 = pd.DataFrame({'holiday': 'Event 1', 'ds': df_calendar[~df_calendar['event_name_1'].isna()]['date']})\ndf_ev_2 = pd.DataFrame({'holiday': 'Event 2', 'ds': df_calendar[~df_calendar['event_name_2'].isna()]['date']})\ndf_ev_3 = pd.DataFrame({'holiday': 'snap_CA', 'ds': df_calendar[df_calendar['snap_CA'] == 1]['date']})\ndf_ev_4 = pd.DataFrame({'holiday': 'snap_TX', 'ds': df_calendar[df_calendar['snap_TX'] == 1]['date']})\ndf_ev_5 = pd.DataFrame({'holiday': 'snap_WI', 'ds': df_calendar[df_calendar['snap_WI'] == 1]['date']})\nholidays = pd.concat((df_ev_1, df_ev_2, df_ev_3, df_ev_4, df_ev_5))\n\ndf_sale_group_item = df_sale[np.hstack([['dept_id','store_id'],date_columns])].groupby(['dept_id','store_id']).sum()\ndf_sale_group_item = df_sale_group_item.reset_index()","ba62f6cb":"%%time\n\nfrom fbprophet import Prophet\nfrom multiprocessing import Pool, cpu_count\n\ndef CreateTimeSeries(dept_id, store_id):\n    item_series =  df_sale_group_item[(df_sale_group_item.dept_id == dept_id) & (df_sale_group_item.store_id == store_id)]\n    dates = pd.DataFrame({'ds': dates_s}, index=range(len(dates_s)))\n    dates['y'] = item_series[date_columns].values[0].transpose()     \n    return dates\n\ndef run_prophet(dept_id, store_id):\n    timeserie = CreateTimeSeries(dept_id, store_id)\n    # Tunned by one id\n    #model = Prophet(holidays = holidays, uncertainty_samples = False, n_changepoints = 50, changepoint_range = 0.8, changepoint_prior_scale = 0.7)\n    # Tunned by level 9    \n    model = Prophet(holidays = holidays, uncertainty_samples = False, n_changepoints = 50, changepoint_range = 0.8, changepoint_prior_scale = 0.7, seasonality_mode = 'multiplicative')\n    model.fit(timeserie)\n    forecast = model.make_future_dataframe(periods=28, include_history=False)\n    forecast = model.predict(forecast)\n    return np.append(np.array([dept_id,store_id]),forecast['yhat'].values.transpose())\n\n# create list param\nids = []\nfor i in range(0,df_sale_group_item.shape[0]):\n    ids = ids + [(df_sale_group_item[i:i+1]['dept_id'].values[0],df_sale_group_item[i:i+1]['store_id'].values[0])]\n\nprint(f'Parallelism on {cpu_count()} CPU')\nwith Pool(cpu_count()) as p:\n    predictions  = list(p.starmap(run_prophet, ids))","4e92eded":"#!pip install pmdarima","452ff55e":"'''\n%%time\n\nimport pmdarima as pm\ndef run_arima(dept_id, store_id):\n    timeserie = CreateTimeSeries(dept_id, store_id)\n    model = pm.auto_arima(timeserie['y'], suppress_warnings=True, seasonal=True, error_action=\"ignore\")\n    y_hat = model.predict(n_periods=28)\n    return np.append(np.array([dept_id,store_id]),y_hat)\n\nprint(f'Parallelism on {cpu_count()} CPU')\nwith Pool(cpu_count()) as p:\n    predictions  = list(p.starmap(run_arima, ids))\n'''","b731ab8e":"#Submission\n\ndf_sub_val = pd.DataFrame()\nfor k in range(0, len(predictions)):\n    dept_id = predictions[k][0]\n    store_id = predictions[k][1]\n\n    df_item = df_sale.loc[(df_sale.dept_id == dept_id) & (df_sale.store_id == store_id)][['id']]\n    df_item['val'] = df_sale[(df_sale.dept_id == dept_id) & (df_sale.store_id == store_id)].iloc[:, np.r_[0,-28:0]].sum(axis = 1)\n    for i in range(1,29):\n        df_item[f'F{i}'] = (df_item['val'] * float(predictions[k][i+1]) \/ df_item['val'].sum())\n    df_sub_val = pd.concat([df_sub_val, df_item])\n\ndf_sub_val = df_sub_val.drop('val',axis=1)","8dc115b2":"df_sale = df_sale_eval\ndate_columns = df_sale.columns[df_sale.columns.str.contains(\"d_\")]\ndates_s = [pd.to_datetime(df_calendar.loc[df_calendar['d'] == str_date,'date'].values[0]) for str_date in date_columns]\n\ndf_ev_1 = pd.DataFrame({'holiday': 'Event 1', 'ds': df_calendar[~df_calendar['event_name_1'].isna()]['date']})\ndf_ev_2 = pd.DataFrame({'holiday': 'Event 2', 'ds': df_calendar[~df_calendar['event_name_2'].isna()]['date']})\ndf_ev_3 = pd.DataFrame({'holiday': 'snap_CA', 'ds': df_calendar[df_calendar['snap_CA'] == 1]['date']})\ndf_ev_4 = pd.DataFrame({'holiday': 'snap_TX', 'ds': df_calendar[df_calendar['snap_TX'] == 1]['date']})\ndf_ev_5 = pd.DataFrame({'holiday': 'snap_WI', 'ds': df_calendar[df_calendar['snap_WI'] == 1]['date']})\nholidays = pd.concat((df_ev_1, df_ev_2, df_ev_3, df_ev_4, df_ev_5))\n\ndf_sale_group_item = df_sale[np.hstack([['dept_id','store_id'],date_columns])].groupby(['dept_id','store_id']).sum()\ndf_sale_group_item = df_sale_group_item.reset_index()","5e9ea34d":"ids = []\nfor i in range(0,df_sale_group_item.shape[0]):\n    ids = ids + [(df_sale_group_item[i:i+1]['dept_id'].values[0],df_sale_group_item[i:i+1]['store_id'].values[0])]\n\nprint(f'Parallelism on {cpu_count()} CPU')\nwith Pool(cpu_count()) as p:\n    predictions  = list(p.starmap(run_prophet, ids))","da24290f":"df_sub_eval = pd.DataFrame()\nfor k in range(0, len(predictions)):\n    dept_id = predictions[k][0]\n    store_id = predictions[k][1]\n\n    df_item = df_sale.loc[(df_sale.dept_id == dept_id) & (df_sale.store_id == store_id)][['id']]\n    df_item['val'] = df_sale[(df_sale.dept_id == dept_id) & (df_sale.store_id == store_id)].iloc[:, np.r_[0,-28:0]].sum(axis = 1)\n    for i in range(1,29):\n        df_item[f'F{i}'] = (df_item['val'] * float(predictions[k][i+1]) \/ df_item['val'].sum())\n    df_sub_eval = pd.concat([df_sub_eval, df_item])\n\ndf_sub_eval = df_sub_eval.drop('val',axis=1)","b000a35e":"df_sub = pd.concat([df_sub_val,df_sub_eval], sort=False)\ndf_sub = df_sub.sort_values('id').reset_index(drop = True)\n\ndf_sub.to_csv('submission.csv', index=False)\ndf_sub","c351aa53":"#Random check\n\nimport matplotlib.pyplot as plt\nimport random\n%matplotlib inline\npd.plotting.register_matplotlib_converters()\ndef plotForecast(item_id):\n    his_step = 100\n    plt.plot(dates_s[-his_step:] + [dates_s[-1:][0] + pd.DateOffset(days=x) for x in range(28)], np.append(df_sale[df_sale['id'] == item_id][date_columns].values[0][-his_step:],df_sub[df_sub['id'] == item_id].values[0][1:]))\n    plt.plot(dates_s[-his_step:], df_sale[df_sale['id'] == item_id][date_columns].values[0][-his_step:])\n    plt.title(f' Prophet top down forecast: {item_id}')\n    plt.gcf().autofmt_xdate()\n\nitem_id = df_sale['id'][random.randint(0, len(df_sale['id']) - 1)]\n#item_id = 'FOODS_3_090_CA_3_validation'\nplotForecast(item_id)","534aea78":"ids = df_sale.loc[df_sale.iloc[:,-14:].mean(axis=1).sort_values(ascending = False)[0:10].index,'id'].values\nitem_id = ids[random.randint(0, len(ids) - 1)]\nplotForecast(item_id)","75c5040b":"Very fast solution (score: 0.75). 2 minutes to complete without turning. Score: 0.63, 4 minutes with some parameter tuning\nThis kernel use Top - Down approach:\n- Predict 70 time series group by Department, Category, Store and State (aggregation level 9)\n- Predict each of item on time series by weight (total sale in last 28 days)\n\nTo do:\n- Try Auto ARIMA with exogenous variables\n\nMy other approach:\n- Prophet bu  (score 0.71): https:\/\/www.kaggle.com\/binhlc\/forecasting-multiple-time-series-using-prophet\n- Simple Exp  (score >1.0): https:\/\/www.kaggle.com\/binhlc\/m5-forecasting-accuracy-simple-exp-smoothing\n- Tensorflow  (score >2.0): https:\/\/www.kaggle.com\/binhlc\/high-dimensional-time-series-forecasting-with-tf2\n- Prophet parametertunning: https:\/\/www.kaggle.com\/binhlc\/prophet-hyperparameter-tuning\n\nReference:\n- https:\/\/otexts.com\/fpp2\/forecasting-regression.html\n\nChange log:\n- Verison 3: Change seasonality_mode = 'multiplicative' \n- Verison 2: Rollback Prophet with new parameter\n- Verison 1: Auto Arima without event (score: 0.78, 1 hours)\n- Version 0: Prophet with event (score: 0.75, 2.5 minutes)\n","e2d7de82":"# Evaluation","5f3fa7bd":"# Validation"}}