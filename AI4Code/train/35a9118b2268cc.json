{"cell_type":{"a9e1ab9f":"code","f5a3fecb":"code","6be38d04":"code","37320b46":"code","09af44f0":"code","78ec8ac4":"code","9c15625b":"code","2f67ce84":"code","d5d52792":"code","cfa9bd48":"code","a98b1219":"code","91951d45":"code","1afe920f":"code","6bc4f638":"code","5922c466":"code","238e71f5":"code","74516369":"code","02ff9b75":"code","30b8539d":"code","3af2229b":"code","cbe4f3d1":"code","5508ed93":"code","de064342":"code","404beba1":"code","1b5a892d":"code","f28ca55e":"code","843640c6":"code","377174e8":"code","63ffb1ec":"code","ade2f65a":"code","28dbe3f8":"code","7ed1b5ff":"code","d4c098d5":"code","669b167f":"code","cffac219":"code","8e852def":"code","61b27bb3":"code","f51044e7":"code","d7a4fe6b":"code","0317401e":"code","5f400926":"code","63031e38":"code","81c387fa":"code","80022721":"code","02176d96":"code","5b3e2d00":"code","2022b26a":"code","39a2d6fe":"code","dc3d518a":"code","bd3917b7":"code","6c51d0d1":"code","07013b43":"code","41760149":"code","dfcc33dd":"code","1df30962":"code","a24ce284":"code","a2c2a790":"code","bf9d1b7a":"code","ac87c8ee":"markdown","b81a16ca":"markdown","84c1b104":"markdown","a4609423":"markdown","9bd8ca44":"markdown","23fbef1b":"markdown","6d847b05":"markdown","a4c09df3":"markdown","388722bb":"markdown","cc706351":"markdown","04820f54":"markdown","4364b0e3":"markdown","8f506407":"markdown","0f9cb38e":"markdown","87a6f9cc":"markdown","b2106367":"markdown","a73c2cc6":"markdown","b0335426":"markdown","4c571a4c":"markdown","2757aa96":"markdown"},"source":{"a9e1ab9f":"#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n","f5a3fecb":"'''\nVersion Notes:\nV14. Have valid loss, use B3 with 15 epochs \nV10. B5 w\/ Noisy-Student weights 25 epochs -- pretty good on valid set, but not on test set (flickr)\nV9. B5 w\/ Noisy-Student weights 20 epochs\nV8. B5 w\/ imagenet weights\nV6. InceptionV3 w\/ imagenet weights\n'''\n\n## Try efficientnet in addition to InceptionV3 of the original example.\n# !pip install -q tensorflow==2.2-rc1 # fix TPU memory issue\n!pip install -q efficientnet\n\n","6be38d04":"import tensorflow as tf\n\n# You'll generate plots of attention in order to see which parts of an image\n# our model focuses on during captioning\nimport matplotlib.pyplot as plt\n\n# Scikit-learn includes many helpful utilities\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\n\nimport re\nimport numpy as np\nimport os\nimport time\nimport json\nfrom glob import glob\nfrom PIL import Image\nimport pickle","37320b46":"from kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn ","09af44f0":"try:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","78ec8ac4":"annotation_file = '..\/input\/coco2014\/captions\/annotations\/captions_train2014.json'\nPATH = '..\/input\/coco2014\/train2014\/train2014\/'\n!ls {PATH} | wc","9c15625b":"# # Download caption annotation files\n# annotation_folder = '\/annotations\/'\n# if not os.path.exists(os.path.abspath('.') + annotation_folder):\n#   annotation_zip = tf.keras.utils.get_file('captions.zip',\n#                                           cache_subdir=os.path.abspath('.'),\n#                                           origin = 'http:\/\/images.cocodataset.org\/annotations\/annotations_trainval2014.zip',\n#                                           extract = True)\n#   annotation_file = os.path.dirname(annotation_zip)+'\/annotations\/captions_train2014.json'\n#   os.remove(annotation_zip)\n\n# # Download image files\n# image_folder = '\/train2014\/'\n# if not os.path.exists(os.path.abspath('.') + image_folder):\n#   image_zip = tf.keras.utils.get_file('train2014.zip',\n#                                       cache_subdir=os.path.abspath('.'),\n#                                       origin = 'http:\/\/images.cocodataset.org\/zips\/train2014.zip',\n#                                       extract = True)\n#   PATH = os.path.dirname(image_zip) + image_folder\n#   os.remove(image_zip)\n# else:\n#   PATH = os.path.abspath('.') + image_folder","2f67ce84":"%%time\n\nif strategy.num_replicas_in_sync == 8:\n#     GCS_DS_PATH_FLICKR = KaggleDatasets().get_gcs_path('flickr8k-sau') # 2gb # Less than 5 min\n    GCS_DS_PATH = KaggleDatasets().get_gcs_path('coco2014') # 19gb # 20 min ?\n    print('yeah')","d5d52792":"if strategy.num_replicas_in_sync == 8:\n    # print(GCS_DS_PATH_FLICKR)\n    # !gsutil ls $GCS_DS_PATH_FLICKR\n\n    print(GCS_DS_PATH)\n    !gsutil ls $GCS_DS_PATH","cfa9bd48":"# Read the json file\nwith open(annotation_file, 'r') as f:\n    annotations = json.load(f)\n\n# Store captions and image names in vectors\nall_captions = []\nall_img_name_vector = []\n\nfor annot in annotations['annotations']:\n    caption = '<start> ' + annot['caption'] + ' <end>'\n    image_id = annot['image_id']\n    full_coco_image_path = PATH + 'COCO_train2014_' + '%012d.jpg' % (image_id)\n\n    all_img_name_vector.append(full_coco_image_path)\n    all_captions.append(caption)\n\n# Shuffle captions and image_names together\n# Set a random state\ntrain_captions, img_name_vector = shuffle(all_captions,\n                                          all_img_name_vector,\n                                          random_state=1)\n\n# Select the first 10000 captions from the shuffled set\nnum_examples = 10000\ntrain_captions = train_captions[:num_examples]\nimg_name_vector = img_name_vector[:num_examples]","a98b1219":"len(train_captions), len(all_captions)","91951d45":"target_size = (299, 299,3)\ndef load_image(image_path):\n    img = tf.io.read_file(image_path)\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, (target_size[0],target_size[1])) \n    \n    # choose the suitable preprocessing for CNN\n#     img = tf.keras.applications.inception_v3.preprocess_input(img) \n    img = efn.preprocess_input(img)\n    \n    return img, image_path","1afe920f":"# with strategy.scope():\n# image_model = tf.keras.applications.InceptionV3(include_top=False,\n#                                                 weights='imagenet')\n\nimage_model = efn.EfficientNetB3(\n        weights='noisy-student', # Choose between imagenet and 'noisy-student'\n#         weights='imagenet', \n        input_shape=target_size, include_top=False)\n\nnew_input = image_model.input\nhidden_layer = image_model.layers[-1].output\n\nimage_features_extract_model = tf.keras.Model(new_input, hidden_layer)","6bc4f638":"# image_model.summary()\nimage_model.layers[-1], image_model.layers[-1].output.shape # see the information of the CNN output","5922c466":"from tqdm import tqdm_notebook as tqdm\n# Get unique images\nencode_train = sorted(set(img_name_vector))\n\nfeature_dict = {}\n\n# Feel free to change batch_size according to your system configuration\nimage_dataset = tf.data.Dataset.from_tensor_slices(encode_train)\nimage_dataset = image_dataset.map(\n  load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE).batch(16)\n\nfor img, path in tqdm(image_dataset):\n  batch_features = image_features_extract_model(img)\n  batch_features = tf.reshape(batch_features,\n                              (batch_features.shape[0], -1, batch_features.shape[3]))\n\n  for bf, p in zip(batch_features, path):\n    path_of_feature = p.numpy().decode(\"utf-8\")\n    feature_dict[path_of_feature] =  bf.numpy()","238e71f5":"import gc\ngc.collect()\nlen(feature_dict)","74516369":"from gensim.models import KeyedVectors\ndef build_matrix(word_index, embedding_index, vec_dim):\n    emb_mean, emb_std = -0.0033470048, 0.109855264\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (len(word_index) + 1,vec_dim))\n#     embedding_matrix = np.zeros((len(word_index) + 1, vec_dim))\n    for word, i in word_index.items():\n        for candidate in [word, word.lower(), word.upper(), word.capitalize(), \n                          ps.stem(word), lc.stem(word), sb.stem(word), correction(word) ]:\n            if candidate in embedding_index:\n                embedding_matrix[i] = embedding_index[candidate]\n                break\n    return embedding_matrix","02ff9b75":"# EMBEDDING_FILES = [\n#     '..\/input\/gensim-embeddings-dataset\/crawl-300d-2M.gensim',\n#     '..\/input\/gensim-embeddings-dataset\/glove.840B.300d.gensim'\n# ]\n# spell_model = gensim.models.KeyedVectors.load(EMBEDDING_FILES[0], mmap='r')","30b8539d":"# Find the maximum length of any caption in our dataset\ndef calc_max_length(tensor):\n    return max(len(t) for t in tensor)","3af2229b":"# Choose the top 5000 words from the vocabulary\ntop_k = 5000\ntokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=top_k,\n                                                  oov_token=\"<unk>\",\n                                                  filters='!\"#$%&()*+.,-\/:;=?@[\\]^_`{|}~ ')\ntokenizer.fit_on_texts(train_captions)\ntrain_seqs = tokenizer.texts_to_sequences(train_captions)","cbe4f3d1":"tokenizer.word_index['<pad>'] = 0\ntokenizer.index_word[0] = '<pad>'","5508ed93":"# make list from dict\ntokenizer.index2word = [tokenizer.index_word[ii] for ii in range(len(tokenizer.word_index)) ] \ntokenizer.index2word[:20] # see top-20 most frequent words","de064342":"# Create the tokenized vectors\ntrain_seqs = tokenizer.texts_to_sequences(train_captions)","404beba1":"# Pad each vector to the max_length of the captions\n# If you do not provide a max_length value, pad_sequences calculates it automatically\ncap_vector = tf.keras.preprocessing.sequence.pad_sequences(train_seqs, padding='post')","1b5a892d":"# Calculates the max_length, which is used to store the attention weights\nmax_length = calc_max_length(train_seqs)","f28ca55e":"lenx = np.array([len(x) for x in cap_vector])\nprint(lenx.min(), lenx.mean())","843640c6":"# Create training and validation sets using an 80-20 split\nimg_name_train, img_name_val, cap_train, cap_val = train_test_split(img_name_vector,\n                                                                    cap_vector,\n                                                                    test_size=0.2,\n                                                                    random_state=0)","377174e8":"len(img_name_train), len(cap_train), len(img_name_val), len(cap_val)","63ffb1ec":"# Feel free to change these parameters according to your system's configuration\n\nBATCH_SIZE = 64\nBUFFER_SIZE = 1000\nembedding_dim = 256\nunits = 512\nvocab_size = top_k + 1\nnum_steps = len(img_name_train) \/\/ BATCH_SIZE\n# Shape of the vector extracted from InceptionV3 is (64, 2048)\n# These two variables represent that vector shape\nfeatures_shape = 2048\n","ade2f65a":"attention_features_shape = bf.shape[0] # 64 for InceptionV3, 100 for B1\n","28dbe3f8":"# Load the numpy files\ndef map_func(img_name, cap):\n  img_tensor = feature_dict[img_name.decode('utf-8')] # np.load(img_name.decode('utf-8')+'.npy')\n  return img_tensor, cap","7ed1b5ff":"img_name_train[:5]","d4c098d5":"dataset = tf.data.Dataset.from_tensor_slices((img_name_train, cap_train))\n\n# Use map to load the numpy files in parallel\ndataset = dataset.map(lambda item1, item2: tf.numpy_function(\n          map_func, [item1, item2], [tf.float32, tf.int32]),\n          num_parallel_calls=tf.data.experimental.AUTOTUNE)\n\n# Shuffle and batch\ndataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE)\ndataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)","669b167f":"val_dataset = tf.data.Dataset.from_tensor_slices((img_name_val, cap_val))\n\n# Use map to load the numpy files in parallel\nval_dataset = val_dataset.map(lambda item1, item2: tf.numpy_function(\n          map_func, [item1, item2], [tf.float32, tf.int32]),\n          num_parallel_calls=tf.data.experimental.AUTOTUNE)\n\n# No Shuffle for Val and batch\n# val_dataset = val_dataset.shuffle(BUFFER_SIZE)\nval_dataset = val_dataset.batch(BATCH_SIZE).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)","cffac219":"class BahdanauAttention(tf.keras.Model):\n  def __init__(self, units):\n    super(BahdanauAttention, self).__init__()\n    self.W1 = tf.keras.layers.Dense(units)\n    self.W2 = tf.keras.layers.Dense(units)\n    self.V = tf.keras.layers.Dense(1)\n\n  def call(self, features, hidden):\n    # features(CNN_encoder output) shape == (batch_size, 64, embedding_dim)\n\n    # hidden shape == (batch_size, hidden_size)\n    # hidden_with_time_axis shape == (batch_size, 1, hidden_size)\n    hidden_with_time_axis = tf.expand_dims(hidden, 1)\n\n    # score shape == (batch_size, 64, hidden_size)\n    score = tf.nn.tanh(self.W1(features) + self.W2(hidden_with_time_axis))\n\n    # attention_weights shape == (batch_size, 64, 1)\n    # you get 1 at the last axis because you are applying score to self.V\n    attention_weights = tf.nn.softmax(self.V(score), axis=1)\n\n    # context_vector shape after sum == (batch_size, hidden_size)\n    context_vector = attention_weights * features\n    context_vector = tf.reduce_sum(context_vector, axis=1)\n\n    return context_vector, attention_weights","8e852def":"class CNN_Encoder(tf.keras.Model):\n    # Since you have already extracted the features and dumped it using pickle\n    # This encoder passes those features through a Fully connected layer\n    def __init__(self, embedding_dim):\n        super(CNN_Encoder, self).__init__()\n        # shape after fc == (batch_size, 64, embedding_dim)\n        self.fc = tf.keras.layers.Dense(embedding_dim)\n\n    def call(self, x):\n        x = self.fc(x)\n        x = tf.nn.relu(x)\n        return x","61b27bb3":"class RNN_Decoder(tf.keras.Model):\n  def __init__(self, embedding_dim, units, vocab_size):\n    super(RNN_Decoder, self).__init__()\n    self.units = units\n\n    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim, mask_zero=True)\n    self.gru = tf.keras.layers.GRU(self.units,\n                                   return_sequences=True,\n                                   return_state=True,\n                                   recurrent_initializer='glorot_uniform')\n    self.fc1 = tf.keras.layers.Dense(self.units)\n    self.fc2 = tf.keras.layers.Dense(vocab_size)\n\n    self.attention = BahdanauAttention(self.units)\n\n  def call(self, x, features, hidden):\n    # defining attention as a separate model\n    context_vector, attention_weights = self.attention(features, hidden)\n\n    # x shape after passing through embedding == (batch_size, 1, embedding_dim)\n    x = self.embedding(x)\n\n    # x shape after concatenation == (batch_size, 1, embedding_dim + hidden_size)\n    x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)\n\n    # passing the concatenated vector to the GRU\n    output, state = self.gru(x)\n\n    # shape == (batch_size, max_length, hidden_size)\n    x = self.fc1(output)\n\n    # x shape == (batch_size * max_length, hidden_size)\n    x = tf.reshape(x, (-1, x.shape[2]))\n\n    # output shape == (batch_size * max_length, vocab)\n    x = self.fc2(x)\n\n    return x, state, attention_weights\n\n  def reset_state(self, batch_size):\n    return tf.zeros((batch_size, self.units))","f51044e7":"# with strategy.scope():\n# tf.keras.backend.clear_session()\nencoder = CNN_Encoder(embedding_dim)\ndecoder = RNN_Decoder(embedding_dim, units, vocab_size)","d7a4fe6b":"optimizer = tf.keras.optimizers.Adam()\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n    from_logits=True, reduction='none')\n\ndef loss_function(real, pred):\n  mask = tf.math.logical_not(tf.math.equal(real, 0))\n  loss_ = loss_object(real, pred)\n\n  mask = tf.cast(mask, dtype=loss_.dtype)\n  loss_ *= mask\n\n  return tf.reduce_mean(loss_)","0317401e":"checkpoint_path = \".\/checkpoints\/train\"\nckpt = tf.train.Checkpoint(encoder=encoder,\n                           decoder=decoder,\n                           optimizer = optimizer)\nckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)","5f400926":"start_epoch = 0\n# if ckpt_manager.latest_checkpoint:\n#   start_epoch = int(ckpt_manager.latest_checkpoint.split('-')[-1])\n#   # restoring the latest checkpoint in checkpoint_path\n#   ckpt.restore(ckpt_manager.latest_checkpoint)","63031e38":"@tf.function\ndef train_step(img_tensor, target):\n  loss = 0\n\n  # initializing the hidden state for each batch\n  # because the captions are not related from image to image\n  hidden = decoder.reset_state(batch_size=target.shape[0])\n\n  dec_input = tf.expand_dims([tokenizer.word_index['<start>']] * target.shape[0], 1)\n\n  with tf.GradientTape() as tape:\n      features = encoder(img_tensor)\n\n      for i in range(1, target.shape[1]):\n          # passing the features through the decoder\n          predictions, hidden, _ = decoder(dec_input, features, hidden)\n\n          loss += loss_function(target[:, i], predictions)\n\n          # using teacher forcing\n          dec_input = tf.expand_dims(target[:, i], 1)\n\n  total_loss = (loss \/ int(target.shape[1]))\n\n  trainable_variables = encoder.trainable_variables + decoder.trainable_variables\n\n  gradients = tape.gradient(loss, trainable_variables)\n\n  optimizer.apply_gradients(zip(gradients, trainable_variables))\n\n  return loss, total_loss","81c387fa":"@tf.function # Non-teacher-forcing val_loss is too complicated at the moment\ndef val_step(img_tensor, target, teacher_forcing=True):\n  loss = 0\n  hidden = decoder.reset_state(batch_size=target.shape[0])\n\n  dec_input = tf.expand_dims([tokenizer.word_index['<start>']] * target.shape[0], 1)\n#   print(dec_input.shape) # (BATCH_SIZE, 1)\n  features = encoder(img_tensor)\n#   print(features.shape) # (BATCH_SIZE, IMG_FEAT_LEN, ENCODER_HID) = 64 100 256\n  for i in range(1, target.shape[1]):\n    predictions, hidden, _ = decoder(dec_input, features, hidden)\n    loss += loss_function(target[:, i], predictions)\n\n    # using teacher forcing\n    dec_input = tf.expand_dims(target[:, i], 1)\n\n  avg_loss = (loss \/ int(target.shape[1]))\n  return loss, avg_loss\n\ndef cal_val_loss(val_dataset):\n  # target.shape = (64,49) = (BATCH_SIZE, SEQ_LEN)\n  val_num_steps = len(img_name_val) \/\/ BATCH_SIZE\n\n  total_loss = 0\n  for (batch, (img_tensor, target)) in enumerate(val_dataset):\n    batch_loss, t_loss = val_step(img_tensor, target)\n    \n    total_loss += t_loss\n  print ('Valid Loss {:.6f}'.format(total_loss\/val_num_steps))\n  return total_loss\/val_num_steps","80022721":"# adding this in a separate cell because if you run the training cell\n# many times, the loss_plot array will be reset\nloss_plot = []\nval_loss_plot = []\ngc.collect()","02176d96":"EPOCHS = 15\n\nbest_val_loss = 100\nfor epoch in tqdm(range(start_epoch, EPOCHS)):\n    start = time.time()\n    total_loss = 0\n\n    for (batch, (img_tensor, target)) in enumerate(dataset):\n        batch_loss, t_loss = train_step(img_tensor, target)\n        total_loss += t_loss\n\n    loss_plot.append(total_loss \/ num_steps)    \n    val_loss = cal_val_loss(val_dataset)\n    val_loss_plot.append(val_loss)\n    \n    print ('Epoch {} Loss {:.6f}'.format(epoch + 1,\n                                         total_loss\/num_steps))\n    print ('Time taken for 1 epoch {} sec\\n'.format(time.time() - start))\n    \n    if val_loss < best_val_loss:\n      print('update best val loss from %.4f to %.4f' % (best_val_loss, val_loss))\n      best_val_loss = val_loss\n      ckpt_manager.save()\n\n    ","5b3e2d00":"plt.plot(loss_plot)\nplt.plot(val_loss_plot)\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Loss Plot')\nplt.show()","2022b26a":"encoder.save_weights('encoder.h5')\ndecoder.save_weights('decoder.h5')\n!ls -sh","39a2d6fe":"# usually val_loss is best too early and got poor result due to imperfect metric of word-by-word\n# ckpt.restore(ckpt_manager.latest_checkpoint)\n# cal_val_loss(val_dataset)","dc3d518a":"def evaluate(image):\n    attention_plot = np.zeros((max_length, attention_features_shape))\n\n    hidden = decoder.reset_state(batch_size=1)\n\n    temp_input = tf.expand_dims(load_image(image)[0], 0)\n    img_tensor_val = image_features_extract_model(temp_input)\n    print(img_tensor_val.shape)\n    img_tensor_val = tf.reshape(img_tensor_val, (img_tensor_val.shape[0], -1, img_tensor_val.shape[3]))\n\n    features = encoder(img_tensor_val)\n\n    dec_input = tf.expand_dims([tokenizer.word_index['<start>']], 0)\n    result = []\n\n    for i in range(max_length):\n        predictions, hidden, attention_weights = decoder(dec_input, features, hidden)\n\n        attention_plot[i] = tf.reshape(attention_weights, (-1, )).numpy()\n\n        predicted_id = tf.random.categorical(predictions, 1)[0][0].numpy()\n        result.append(tokenizer.index_word[predicted_id])\n\n        if tokenizer.index_word[predicted_id] == '<end>':\n            return result, attention_plot\n\n        dec_input = tf.expand_dims([predicted_id], 0)\n\n    attention_plot = attention_plot[:len(result), :]\n    return result, attention_plot","bd3917b7":"def plot_attention(image, result, attention_plot):\n    temp_image = np.array(Image.open(image))\n\n    fig = plt.figure(figsize=(10, 10))\n\n    len_result = len(result)\n    for l in range(len_result):\n        temp_att = np.resize(attention_plot[l], (8, 8))\n        ax = fig.add_subplot(len_result\/\/2, len_result\/\/2, l+1)\n        ax.set_title(result[l])\n        img = ax.imshow(temp_image)\n        ax.imshow(temp_att, cmap='gray', alpha=0.6, extent=img.get_extent())\n\n    plt.tight_layout()\n    plt.show()","6c51d0d1":"# captions on the train set\nrid = np.random.randint(0, len(img_name_train))\nimage = img_name_train[rid]\nreal_caption = ' '.join([tokenizer.index_word[i] for i in cap_train[rid] if i not in [0]])\nresult, attention_plot = evaluate(image)\n\nprint ('Real Caption:', real_caption)\nprint ('Prediction Caption:', ' '.join(result))\nplot_attention(image, result, attention_plot)\n","07013b43":"# captions on the validation set\nfor ii in range(10):\n    rid = np.random.randint(0, len(img_name_val))\n    image = img_name_val[rid]\n    real_caption = ' '.join([tokenizer.index_word[i] for i in cap_val[rid] if i not in [0]])\n    result, attention_plot = evaluate(image)\n\n    print ('Real Caption:', real_caption)\n    print ('Prediction Caption:', ' '.join(result))\n    plot_attention(image, result, attention_plot)\n","41760149":"# import gc\n# del dataset\ngc.collect()","dfcc33dd":"!ls ..\/input\/flickr8k-sau\/Flickr_Data\/Images | head","1df30962":"image_url = 'https:\/\/tensorflow.org\/images\/surf.jpg'\n\nimage_extension = image_url[-4:]\nimage_path = tf.keras.utils.get_file('image'+image_extension,\n                                     origin=image_url)\n\nresult, attention_plot = evaluate(image_path)\nprint ('Prediction Caption:', ' '.join(result))\nplot_attention(image_path, result, attention_plot)\n# opening the image\nImage.open(image_path)","a24ce284":"flickr_path = '..\/input\/flickr8k-sau\/Flickr_Data\/Images\/'\npaths2 = sorted(os.listdir(flickr_path))\nprint(len(paths2))","a2c2a790":"# image_path2 ='..\/input\/flickr8k-sau\/Flickr_Data\/Images\/1000268201_693b08cb0e.jpg'\nfor ii in range(0,10):\n    image_path2 = flickr_path + paths2[ii]\n    result, attention_plot = evaluate(image_path2)\n    print ('Prediction Caption:', ' '.join(result))\n    plot_attention(image_path2, result, attention_plot)\n    # opening the image\n    Image.open(image_path2)","bf9d1b7a":"'''\nObservations from kernel's author\n=================================\n\n0. InceptionV3 and B5 is better than B1, EfficientNet imagenet weights seem inferior to 'noisy-student' weights\n1, poor performance on valid, especially for B1\n2. poor attention visualization even on training data (focus wrong features)\n3.[FIXED in V.12] cannot use best checkpoints based on val_loss \n4. cannot use model.fit directly\n\nWe cannot use model.fit directly on this implementation since each attention on a sequence requires \na hidden state of the previous time-step\n\nIf we want implementation of Attention with model.fit, take a look at Andrew Ng's, see : \nhttps:\/\/github.com\/Kulbear\/deep-learning-coursera\/blob\/master\/Sequence%20Models\/Neural%20machine%20translation%20with%20attention%20-%20v2.ipynb\n\nSo in this case, all Keras.Callbacks can become handy together with model.fit\n'''\n\n'''\nFuture works, in order to futher improve the performance, we can \n\nA. word2vec instead of random embedding\nOR\nB. finetuning GPT-2 as decoder (Huggingface's implementation)\n\nC.1 Use all captions\nC.2 more training data ... either Flickr 30K or COCO ... Use DataGenerator to mitigate space problem (although make the process slower)\n\nD. Removing stopping\/stemming words (though we will have a bit worse grammar)\n\nE. use SOTA sampling .. See HuggingFace blog\n\nF. selecting best checkpoint based on BLEU score : see https:\/\/www.kaggle.com\/anunay999\/image-captioning-using-vgg16\n\nG. try to use TPU\n'''","ac87c8ee":"Given an image like the example below, our goal is to generate a caption such as \"a surfer riding on a wave\".\n\n![Man Surfing](https:\/\/tensorflow.org\/images\/surf.jpg)\n\n*[Image Source](https:\/\/commons.wikimedia.org\/wiki\/Surfing#\/media\/File:Surfing_in_Hawaii.jpg); License: Public Domain*\n\nTo accomplish this, you'll use an attention-based model, which enables us to see what parts of the image the model focuses on as it generates a caption.\n\n![Prediction](https:\/\/tensorflow.org\/images\/imcap_prediction.png)\n\nThe model architecture is similar to [Show, Attend and Tell: Neural Image Caption Generation with Visual Attention](https:\/\/arxiv.org\/abs\/1502.03044).\n\nThis notebook is an end-to-end example. In the original Colab notebook, it downloads the [MS-COCO](http:\/\/cocodataset.org\/#home) dataset, preprocesses and caches a subset of images using Inception V3, trains an encoder-decoder model, and generates captions on new images using the trained model. In Kaggle environment, we already haave COCO 2014 stored locally. So great! no download is needed, and time is saved. :D\n\nHere, due to limitation of RAM and space, you will train a model on a relatively small amount of data\u2014the first 10,000 captions  for about 6,000-7,000 images (because there are multiple captions per image in the dataset). In the original Colab example, we have a lot more free space, so we can do 30,000 captions.","b81a16ca":"## Caption!\n\n* The evaluate function is similar to the training loop, except you don't use teacher forcing here. The input to the decoder at each time step is its previous predictions along with the hidden state and the encoder output.\n* Stop predicting when the model predicts the end token.\n* And store the attention weights for every time step.","84c1b104":" Our images and captions are ready! Next, let's create a tf.data dataset to use for training our model.","a4609423":"## Split the data into training and testing","9bd8ca44":"# Image captioning with visual attention\n\nNote that almost explanations and codes are from https:\/\/www.tensorflow.org\/tutorials\/text\/image_captioning . The author of the kernel just \n\n - adjust some minor modification for suiting Kaggle kernel environment.\n - made a validation calculation\n - import and predict on Out-of-distribution Flickr test set\n \nIn the next kernel, I plan to break the limit of Kaggle by implementing my own DataGenerator which will allow : \n - Use full dataset (100K instead of 10K, or 30K by using Flickr30K dataset, due to limit of KaggleDatasets network)\n - Use 5 captions for all images\n - Use pretrained word vectors (Here, we could not do that due to limited RAM)\n - Use TPU to remedy the slowness of online-image-loading DataGenerator --> but have to use Flickr30k instead of COCO-100k\n \nNote that I will not go to Colab to increase RAM, since in Colab we will have other problems of downloading again all datasets","23fbef1b":"## Model\n\nFun fact: the decoder below is identical to the one in the example for [Neural Machine Translation with Attention](..\/sequences\/nmt_with_attention.ipynb).\n\nThe model architecture is inspired by the [Show, Attend and Tell](https:\/\/arxiv.org\/pdf\/1502.03044.pdf) paper.\n\n* In this example, you extract the features from the lower convolutional layer of InceptionV3 giving us a vector of shape (8, 8, 2048).\n* You squash that to a shape of (64, 2048).\n* This vector is then passed through the CNN Encoder (which consists of a single Fully connected layer).\n* The RNN (here GRU) attends over the image to predict the next word.","6d847b05":"## Try it on your own images\nFor fun, below we've provided a method you can use to caption your own images with the model we've just trained. Keep in mind, it was trained on a relatively small amount of data, and your images may be different from the training data (so be prepared for weird results!)\n","a4c09df3":"## Initialize CNN and load the pretrained Imagenet weights\n\nNow you'll create a tf.keras model where the output layer is the last convolutional layer in the CNN architecture. The shape of the output of this layer is ```8x8x2048``` for InceptionV3 or ```10x10x1280``` for EfficientNetB1 (or other shapes if using other-Bs). You use the last convolutional layer because you are using attention in this example. You don't perform this initialization during training because it could become a bottleneck.\n\n* You forward each image through the network and store the resulting vector in a dictionary (image_name --> feature_vector).\n* After all the images are passed through the network, you pickle the dictionary and save it to disk.\n","388722bb":"# Next steps\n\nCongrats! You've just trained an image captioning model with attention.","cc706351":"##### Copyright 2018 The TensorFlow Authors.\n","04820f54":"## Download and prepare the MS-COCO dataset [Colab only]\n\nYou will use the [MS-COCO dataset](http:\/\/cocodataset.org\/#home) to train our model. Originally, the dataset contains over 82,000 images, each of which has at least 5 different caption annotations. \n\n**Note: **. In Kaggle, we don't need to download, we can use existing dataset. Therefore, I comment out the code below which downloading and extracting the dataset automatically.","4364b0e3":"# Load Pretrained Word Vectors\nUnfortunately, we don't have enough RAM ... See preface","8f506407":"## Training\n\n* You extract the features stored in the respective `.npy` files and then pass those features through the encoder.\n* The encoder output, hidden state(initialized to 0) and the decoder input (which is the start token) is passed to the decoder.\n* The decoder returns the predictions and the decoder hidden state.\n* The decoder hidden state is then passed back into the model and the predictions are used to calculate the loss.\n* Use teacher forcing to decide the next input to the decoder.\n* Teacher forcing is the technique where the target word is passed as the next input to the decoder.\n* The final step is to calculate the gradients and apply it to the optimizer and backpropagate.\n","0f9cb38e":"## Create a tf.data dataset for training\n","87a6f9cc":"I post TPU initializer here just in case, but I have not yet successfully make it work on this example. Below code works for both TPU and GPU.","b2106367":"## Optional: limit the size of the training set \nTo speed up training for this tutorial and due to memory-space limitation, you'll use a subset of 10,000 captions and their corresponding images to train our model. Choosing to use more data would result in improved captioning quality. We cannot do this in Kaggle environment, but you can do it locally.","a73c2cc6":"## Checkpoint","b0335426":"## Preprocess and tokenize the captions\n\n* First, you'll tokenize the captions (for example, by splitting on spaces). This gives us a  vocabulary of all of the unique words in the data (for example, \"surfing\", \"football\", and so on).\n* Next, you'll limit the vocabulary size to the top 5,000 words (to save memory). You'll replace all other words with the token \"UNK\" (unknown).\n* You then create word-to-index and index-to-word mappings.\n* Finally, you pad all sequences to be the same length as the longest one.","4c571a4c":"## Caching the features extracted from CNN\n\nYou will pre-process each image with InceptionV3 and cache the output to disk. Caching the output in RAM would be faster but also memory intensive, requiring 8 \\* 8 \\* 2048 (or 10 \\* 10 \\* 1280 for B1, 10 \\* 10 \\* 2048 for B5 etc.) floats per image. At the time of writing, this exceeds the memory limitations of Colab (currently 12GB of memory).\n\nPerformance could be improved with a more sophisticated caching strategy (for example, by sharding the images to reduce random access disk I\/O), but that would require more code.\n","2757aa96":"## Preprocess the images using EfficientNet \/ InceptionV3\nNext, you will use either EfficientNet or InceptionV3 (which is pretrained on Imagenet) to classify each image. You will extract features from the last convolutional layer.\n\nFirst, you will convert the images into InceptionV3's expected format by:\n* Resizing the image to 299px by 299px\n* [Preprocess the images](https:\/\/cloud.google.com\/tpu\/docs\/inception-v3-advanced#preprocessing_stage) using the [preprocess_input](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/inception_v3\/preprocess_input) method to normalize the image so that it contains pixels in the range of -1 to 1, which matches the format of the images used to train InceptionV3. EfficienetNet also has its own preprocessing_input function as shown in the code."}}