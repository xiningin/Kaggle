{"cell_type":{"ae41672c":"code","37e05b0d":"code","3afd146e":"code","e0d7fc05":"code","27b0df51":"code","2b613d1c":"code","644731b0":"code","279fe125":"code","ca00c309":"code","68490363":"code","5f8925ec":"code","f54c102c":"code","a799f61b":"code","27afba6e":"code","e9b7534e":"code","19d2133b":"code","27bdf1f1":"code","fd4d3105":"code","d97df4b5":"code","9abab0f6":"code","a40848b5":"code","f07fb373":"code","d9f7bbe7":"code","ef819378":"code","26e36258":"code","67d9fa39":"code","e805fd57":"markdown","da5ad0bb":"markdown","1e470e8f":"markdown","9e921df2":"markdown","ccfdb7d8":"markdown","c3a27a7f":"markdown"},"source":{"ae41672c":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport datetime\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\nfrom collections import Counter\nfrom sklearn.preprocessing import StandardScaler\nimport os\nimport xgboost as xgb\nfrom sklearn import model_selection\nimport ast\nfrom sklearn.preprocessing import LabelEncoder\nimport time\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model","37e05b0d":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')","3afd146e":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nprint(train.shape)\nprint(test.shape)\ntrain.head()","e0d7fc05":"train.info()\ntest.info()","27b0df51":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043a\u0430\u043a \u043e\u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430\nfeatures = ['budget', 'popularity', 'runtime', 'revenue']\nsns.pairplot(train[features])","2b613d1c":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\nsns.heatmap(train[features].corr(), linewidths=.5, cmap=\"Reds\")","644731b0":"#\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\ntrain['log_budget'] = np.log1p(train['budget'])\ntest['log_budget'] = np.log1p(test['budget'])\n\ntrain['log_revenue'] = np.log1p(train['revenue'])\n\nfig, ax = plt.subplots(figsize = (15, 5))\nplt.subplot(1, 3, 1)\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u044d\u0434\u0436\u0435\u0442\u0430')\nsns.distplot(train['log_budget'], color='Green');\nplt.subplot(1, 3, 2)\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u0430')\nsns.distplot(train['log_revenue'], color='Orange');\nplt.subplot(1, 3, 3)\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u043e\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u0430')\nplt.scatter(train['log_budget'], train['log_revenue'])\n","279fe125":"#\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nfig = plt.figure(figsize=(10, 8))\ntrain.isna().sum().sort_values(ascending=True).plot(kind='barh',colors='LightGreen')","ca00c309":"train.head()","68490363":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 json \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435\n\n#\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442, \u0442.\u043a. \u0443 \u0432\u0441\u0435\u0445 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0446\u0438\u0444\u0440\u044b\ndef fix_date(x):\n    year = x.split('\/')[2]\n    if int(year) <= 19:\n        return x[:-2] + '20' + year\n    else:\n        return x[:-2] + '19' + year\n\ndf = pd.concat([train, test]).reset_index(drop = True)\nprint('All data shape')\nprint(df.shape)\n\njson_features=[\"belongs_to_collection\", \"genres\", \"production_companies\", \"production_countries\", \"spoken_languages\"]\n\nfor feature in json_features:\n    df.loc[df[feature].notnull(),feature]=df.loc[df[feature].notnull(),feature].apply(lambda x : ast.literal_eval(x)).apply(lambda x : [y[\"name\"] for y in x])\n\ndf[\"in_collection\"]=1\ndf.loc[df[\"belongs_to_collection\"].isnull(),\"in_collection\"]=0\ndf[\"genres_len\"]=df.loc[df[\"genres\"].notnull(),\"genres\"].apply(lambda x : len(x))\ndf[\"production_companies_len\"]=df.loc[df[\"production_companies\"].notnull(),\"production_companies\"].apply(lambda x : len(x))\ndf[\"production_countries_len\"]=df.loc[df[\"production_countries\"].notnull(),\"production_countries\"].apply(lambda x : len(x))\ndf[\"spoken_languages_len\"]=df.loc[df[\"spoken_languages\"].notnull(),\"spoken_languages\"].apply(lambda x : len(x))\n\ndf.loc[df[\"cast\"].notnull(),\"cast\"]=df.loc[df[\"cast\"].notnull(),\"cast\"].apply(lambda x : ast.literal_eval(x))\ndf.loc[df[\"crew\"].notnull(),\"crew\"]=df.loc[df[\"crew\"].notnull(),\"crew\"].apply(lambda x : ast.literal_eval(x))\ndf[\"cast_len\"] = df.loc[df[\"cast\"].notnull(),\"cast\"].apply(lambda x : len(x))\ndf[\"crew_len\"] = df.loc[df[\"crew\"].notnull(),\"crew\"].apply(lambda x : len(x))\n\ndf.loc[df[\"homepage\"].notnull(),\"homepage\"]=1\ndf[\"homepage\"]=df[\"homepage\"].fillna(0)\n\ndf[\"has_tagline\"]=1\ndf.loc[df[\"tagline\"].isnull(),\"has_tagline\"]=0\n\ndf[\"title_different\"]=1\ndf.loc[df[\"title\"]==df[\"original_title\"],\"title_different\"]=0\n\ndf.loc[df[\"release_date\"].notnull(),\"release_date\"]=df.loc[df[\"release_date\"].notnull(),\"release_date\"].apply(lambda x : fix_date(x))\nrelease_date=pd.to_datetime(df[\"release_date\"])\ndf[\"release_year\"]=release_date.dt.year\ndf[\"release_month\"]=release_date.dt.month\ndf[\"release_day\"]=release_date.dt.day\ndf[\"release_wd\"]=release_date.dt.dayofweek\ndf[\"release_quarter\"]=release_date.dt.quarter\n\n#\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e\nencoder = LabelEncoder()\nencoder.fit(list(df['original_language'].fillna('')))\ndf['original_language'] = encoder.transform(df['original_language'].fillna('').astype(str))\n\ndf['log_popularity']=np.log1p(df['popularity'])\n\n#\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndf.fillna(value=0.0, inplace = True)\n\ntrain = df.loc[:train.shape[0] - 1,:]\ntest = df.loc[train.shape[0]:,:]\nprint(train.shape)\nprint(test.shape)","5f8925ec":"train.head()","f54c102c":"#\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0433\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0443\u0441\u0442\u0430\u044f \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0445\n#\u0422\u0430\u043a\u0436\u0435 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u0430\u043a \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 imdb_id \u0438\u043b\u0438 status\nuseless_features = ['belongs_to_collection', 'homepage', 'tagline', \n                    'Keywords', 'id', 'imdb_id', 'status', 'poster_path', \n                    'title', 'original_title', 'genres', 'production_companies', \n                    'production_countries', 'spoken_languages', 'cast', \n                    'crew', 'release_date', 'overview', 'budget', 'popularity']\ntrain = train.drop(useless_features, axis=1)\ntrain = train.drop('revenue', axis=1)\ntest = test.drop(useless_features + ['revenue', 'log_revenue'], axis=1)\nprint(train.shape)\nprint(test.shape)","a799f61b":"train.head()","27afba6e":"test.head()","e9b7534e":"#\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nX = train.drop(['log_revenue'], axis=1)\ny = train['log_revenue']","19d2133b":"print(X.shape)\nprint(y.shape)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=12, shuffle=False)\nprint('Train data shape')\nprint(X_train.shape)\nprint('Test data shape')\nprint(X_test.shape)","27bdf1f1":"def rmsle(y_test, y_pred):\n    return np.sqrt(mean_squared_error(y_test, y_pred))\n\ndef predict(model):\n    model.fit(X_train.values, y_train)\n    y_pred = model.predict(X_test.values)\n    print(rmsle(y_test, y_pred))\n    return y_pred\n    \nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X_train.values)\n    rmse = np.sqrt(-cross_val_score(model, X_train.values, y_train, scoring=\"neg_mean_squared_error\", cv=kf))\n    return(rmse)\n\ndef eval_model(model, name):\n    start_time = time.time()\n    score = rmsle_cv(model)\n    print(\"{} score: {:.4f} ({:.4f}),     execution time: {:.1f}\".format(name, score.mean(), score.std(), time.time()-start_time))","fd4d3105":"mod_xgb = xgb.XGBRegressor(objective  = 'reg:linear', \n          eta = 0.01, \n          max_depth = 6,\n          min_child_weight = 3,\n          subsample = 0.8, \n          colsample_bytree = 0.8,\n          colsample_bylevel = 0.50, \n          gamma = 0.1, \n          eval_metric = 'rmse',\n          seed = 12, n_estimators = 2000)\neval_model(mod_xgb, \"xgb\")","d97df4b5":"train_pred = predict(mod_xgb)","9abab0f6":"plt.figure(figsize=(30,10))\nplt.plot(np.array(y_test[:100]),label=\"\u0420\u0435\u0430\u043b\u044c\u043d\u0430\u044f\")\nplt.plot(train_pred[:100],label=\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f\")\nplt.legend(fontsize=15)\nplt.title(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438\",fontsize=24)\nplt.show()","a40848b5":"#\u041f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u0435\u0449\u0435 \u0440\u0430\u0437 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c XGBoost \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0432\u0440\u0430\u043f\u043f\u0435\u0440\u0430\nparams = {'objective': 'reg:linear', \n          'eta': 0.01, \n          'max_depth': 6, \n          'min_child_weight': 3,\n          'subsample': 0.8,\n          'colsample_bytree': 0.8,\n          'colsample_bylevel': 0.50, \n          'gamma': 0.1, \n          'eval_metric': 'rmse', \n          'seed': 12, \n          'silent': True    \n}\nxgb_data = [(xgb.DMatrix(X_train, y_train), 'train'), (xgb.DMatrix(X_test, y_test), 'valid')]\nmod_xgb_base = xgb.train(params, \n                  xgb.DMatrix(X_train, y_train),\n                  5000,  \n                  xgb_data, \n                  verbose_eval=200,\n                  early_stopping_rounds=200)","f07fb373":"train_pred = mod_xgb_base.predict(xgb.DMatrix(X_test), ntree_limit=mod_xgb_base.best_ntree_limit)\nplt.figure(figsize=(30,10))\nplt.plot(np.array(y_test[:100]),label=\"\u0420\u0435\u0430\u043b\u044c\u043d\u0430\u044f\")\nplt.plot(train_pred[:100],label=\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f\")\nplt.legend(fontsize=15)\nplt.title(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438\",fontsize=24)\nplt.show()","d9f7bbe7":"fig, ax = plt.subplots(figsize=(20,12))\nxgb.plot_importance(mod_xgb_base, max_num_features=40, height = 0.5, ax = ax)\nplt.title('XGBOOST \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u0444\u0438\u0447')\nplt.show()","ef819378":"nr_cv = 5\nlinreg = LinearRegression()\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\ngrid_linear = GridSearchCV(linreg, parameters, cv=nr_cv, verbose=1 , scoring = \"neg_mean_squared_error\")\ngrid_linear.fit(X, y)\n\nprint(grid_linear.best_params_)\nprint(grid_linear.best_estimator_)\n\nlinreg = LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=True)\neval_model(linreg, 'Linear Regression')","26e36258":"train_pred = predict(linreg)","67d9fa39":"plt.figure(figsize=(30,10))\nplt.plot(np.array(y_test[:100]),label=\"\u0420\u0435\u0430\u043b\u044c\u043d\u0430\u044f\")\nplt.plot(train_pred[:100],label=\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f\")\nplt.legend(fontsize=15)\nplt.title(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438\",fontsize=24)\nplt.show()","e805fd57":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","da5ad0bb":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","1e470e8f":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","9e921df2":"## \u041a\u0443\u0440\u0441 DS-75. \u041f\u0430\u0432\u043b\u043e\u0432 \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447. \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043f\u043e \u0431\u0430\u0437\u0435 TMDB (\u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 kaggle https:\/\/www.kaggle.com\/c\/tmdb-box-office-prediction\/overview\/evaluation) \n\n\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u044b\u0440\u0443\u0447\u043a\u0443 \u043e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u0430\u0437\u044b TMDB.\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n\n\u041c\u0435\u0442\u0440\u0438\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f - RMSLE - \u043a\u043e\u0440\u0435\u043d\u044c \u0438\u0437 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0440\u0442\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f. \n","ccfdb7d8":"\u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u0438 score \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 \u0434\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443, \u043d\u043e \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043e\u043b\u044c\u0448\u0435","c3a27a7f":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432"}}