{"cell_type":{"163e141c":"code","6c7a5371":"code","8e12a33d":"code","d8a9cbda":"code","aa7044f6":"code","e406dabc":"code","44aff7aa":"code","8bed8e46":"code","b61164d8":"code","0b4ec2e9":"code","3d4fd24d":"code","ea9a7717":"code","a7ae2a14":"code","c8e375aa":"code","91bc66df":"code","02c787c1":"code","11c36403":"code","00c2c1ba":"code","ee262a94":"code","aab5cda2":"code","189a1807":"code","45b32375":"code","f7cac726":"code","bb0a189b":"code","d569e16d":"code","128019cd":"code","b5286f90":"code","9bed2278":"code","69b0f9c5":"code","5a897f8a":"code","d80fb44d":"code","273d2a1c":"markdown","672c4f83":"markdown","f71a55d5":"markdown","b3bd7845":"markdown","b58eddb1":"markdown","814fbcc8":"markdown","09b26bca":"markdown","52ceab2e":"markdown","ce32b338":"markdown","65ca8f0d":"markdown","988225ea":"markdown"},"source":{"163e141c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c7a5371":"#Libraries\n#Plotly <3\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport plotly.io as pio\n\npio.templates.default = \"seaborn\"\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport numpy as np","8e12a33d":"#Reading the data\n\ntop250_data = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Top250.csv')\nfuture50_data = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Future50.csv')\nindependence100_data = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Independence100.csv')","d8a9cbda":"independence100_data['id'] = 'ind100'\ntop250_data['id'] = 'top250'\nfuture50_data['id']='fut50'\n\n#Transforming the string YOY data to numbers\ntop250_data['YOY_Sales_numbers'] = [float(i[:-1]) for i in top250_data['YOY_Sales']]\ntop250_data['YOY_Units_numbers'] = [float(i[:-1]) for i in top250_data['YOY_Units']]\ntop250_data['Sales_per_units'] = top250_data['Sales']\/top250_data['Units']\ntop250_data['Segment'] = [x.split('&')[0] if len(x.split('&')) >= 2 else 'Undefined' for x in top250_data['Segment_Category']]\ntop250_data['Category'] = [x.split('&')[1].replace(' ', '') if len(x.split('&')) >= 2 else x.replace(' ', '') for x in top250_data['Segment_Category']]\n\ntop250_data = top250_data.drop(['Content','YOY_Sales','Headquarters','YOY_Units'],axis=1).copy()\n\nindependence100_data['Sales Divided'] = round(independence100_data['Sales']\/10**6,2)\n\n#Let's Check the values from clusters E and then clusters D,C,B,A,S\nlower200 = top250_data[top250_data['Rank'] > 50].copy()\ntop50 = top250_data[top250_data['Rank'] <= 50].copy()\n\nsub = {\n'Asian\/Noodle':'Asian',\n'Italian\/Pizza':'Pizza',\n'CoffeeCafe':'Cafe',\n'BakeryCafe':'Cafe',\n'FamilyCasual':'Family',\n'FamilyStyle':'Family',\n'Burger':'Sandwich',\n'FrozenDesserts':'Frozen Desserts',\n'VariedMenu':'Varied Menu'\n}\ntop250_data['Category'] = top250_data['Category'].replace(sub)\n\n\n#Features that will be appended\nfeat = ['Restaurant','Sales','id']\n\n#Auxiliar dataframe\nmy_data = independence100_data[['Restaurant','Sales Divided','id']].copy()\nmy_data['Sales'] = independence100_data['Sales Divided']\n\n#Setting a table with all restaurants with the name of the restaurant and the sales\n#\n# And a feature that tells from which data it came from\nall_restaurants = my_data[feat].copy().append(future50_data[feat].copy()).append(top250_data[feat].copy())","aa7044f6":"#This is how the new data looks like after changing some formatting\ntop250_data.head()","e406dabc":"top250_data.describe(include='all')","44aff7aa":"fig = px.histogram(top250_data, x = 'Sales',labels = {\n    'count':'Count',\n    'Sales':'Sales ($000,000)'\n})\n\nfig.update_layout(\ntitle = dict(\n    text = 'Sales distribution',\n    xref = 'paper',\n    font_family = \"Arial Black\",\n    x = 0.0))\nfig.update_yaxes(title='Count', visible=True)\nfig.show()","8bed8e46":"#Let's check the distribution of sales by unity\n\nsales_mean = top250_data['Sales_per_units'].mean()\nfig = px.box(top250_data,y='Sales_per_units',\n                   labels = {\n                      'Sales_per_units':'Sales (in millions) per Units',\n                  },title = 'Boxplot of the sales per units from the top 250 restaurants')\n\nfig.update_layout(\n    title = dict(\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n    hovermode='y unified',\n    yaxis_title=\"Count\",\n    legend_title=\"Segment\"\n)\n\n# fig.add_shape( # add a horizontal \"target\" line\n#     type=\"line\", line_color=\"salmon\", line_width=3, opacity=1, line_dash=\"dot\",\n#     x0=0, x1=1, xref=\"paper\", y0=sales_mean, y1=sales_mean, yref=\"y\"\n# )\n\nfig.update_yaxes(\n    title = \"Sales (in millions) per units\",\n    tickprefix = 'U$',\n    ticksuffix = ' M'\n)\n\n\nfig.show()","b61164d8":"#Let's check the distribution of sales by unity\nfig = make_subplots(4, 1,subplot_titles=['Top 50 and B200','Top 50 Restaurants', 'B200'],\n                    specs = [[{\"rowspan\": 2}],\n                            [None],\n                            [{}],\n                            [{}]]\n)\n\nfig.add_trace(go.Box(x = top50['Sales'], name='Top 50'), row = 1, col = 1)\nfig.add_trace(go.Box(x = lower200['Sales'], name='B200'), row = 1, col = 1)\nfig.add_trace(go.Box(x = top250_data['Sales'], name='Top 250'), row = 1, col = 1)\n\nfig.add_trace(go.Box(x = top50['Sales'], name='Top 50'), row = 3, col = 1)\nfig.add_trace(go.Box(x = lower200['Sales'], name='B200'), row = 4, col = 1)\n\n\nfig.update_layout(\n    title = dict(\n    font_family = \"Arial Black\",\n    text = 'Sales in millions grouped by ranks',\n    xref = 'paper',\n    x = 0),\n    hovermode='x unified',\n    legend_title=\"Slice\",\n)\n\n\nfig.show()","0b4ec2e9":"labels = top250_data['Segment'].unique()\n\nfig = make_subplots(1, 3,subplot_titles=['B200', 'Top 50 Restaurants','Top 250 Restaurants'], specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(labels=labels, values= list(lower200['Segment'].value_counts())), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values= list(top50['Segment'].value_counts())), 1, 2)\nfig.add_trace(go.Pie(labels=labels, values= list(top250_data['Segment'].value_counts())), 1, 3)\n\nfig.update_layout(\n    title = dict(\n        font_family = \"Arial Black\",\n        xref = 'paper',\n        x = 0\n    ),\n    title_text='Restaurants Count grouped by Segment')\nfig.show()","3d4fd24d":"labels = top250_data['Category'].unique()\n\nfig = make_subplots(1, 3,subplot_titles=['B200', 'Top 50','Top 250 Restaurants'], specs=[[{\"type\": \"domain\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(labels=labels, values= list(lower200['Category'].value_counts())), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values= list(top50['Category'].value_counts())), 1, 2)\nfig.add_trace(go.Pie(labels=labels, values= list(top250_data['Category'].value_counts())), 1, 3)\nfig.update_layout(\n    title = dict(\n        font_family = \"Arial Black\",\n        xref = 'paper',\n        x = 0\n    ),\n    title_text='Restaurants Count grouped by by Category')\nfig.show()","ea9a7717":"future50_data['YOY_Sales_numbers'] = [float(i[:-1]) for i in future50_data['YOY_Sales']]\nfuture50_data['YOY_Units_numbers'] = [float(i[:-1]) for i in future50_data['YOY_Units']]","a7ae2a14":"future50_data.head()","c8e375aa":"future50_data.describe(include = 'all')","91bc66df":"\n# fig = px.pie(future50_data, names = 'Franchising',title= \")\n\nfig = go.Figure(go.Pie(\n    labels = future50_data['Franchising'],\n    hovertemplate = '%{label}<extra><\/extra>'\n))\n\nfig.update_layout(\n    title = dict(\n    text = 'Is the restaurant franchised?',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x=0),\n    \n)\n\n\nfig.show()","02c787c1":"fig = px.histogram(future50_data,x = 'Sales', marginal=\"box\")\n\nfig.update_layout(\n    title = dict(\n    text = 'Sales Distribution',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n    hovermode='x unified'\n)\n                   \nfig.update_xaxes(\n    tickprefix = \"U$\",\n    ticksuffix = ' M'\n)\n\nfig.show()","11c36403":"#Let's check the distribution of sales by unity\nfig = make_subplots(4, 1,subplot_titles=['Future 50 Restaurants and B200', 'Future 50 Restaurants','B200'],\n                    specs = [[{\"rowspan\": 2}],\n                            [None],\n                            [{}],\n                            [{}]], vertical_spacing = 0.2)\n\nfig.add_trace(go.Box(x = future50_data['Sales'], name='Future 50 Restaurants'), row = 1, col = 1)\nfig.add_trace(go.Box(x = lower200['Sales'], name='Bottom 200'), row = 1, col = 1)\n\nfig.add_trace(go.Box(x = future50_data['Sales'], name='Future 50 Restaurants'), row = 3, col = 1)\n\nfig.add_trace(go.Box(x = lower200['Sales'], name='B200'), row = 4, col = 1)\nfig.update_layout(\n    title = dict(\n        text = 'Comparisson between the future 50 restaurants and the bottom 200',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n    hovermode='x unified',\n    legend_title=\"Segment\",\n)\n\nfig.update_xaxes(\ntickprefix = 'U$',\nticksuffix = ' M')\n\nfig.show()\n","00c2c1ba":"future50_data['Sales_after_10_years'] = future50_data['Sales']*(future50_data['YOY_Sales_numbers']*10**(-2) + 1)**10\nlower200['Sales_after_10_years'] = lower200['Sales']*(lower200['YOY_Sales_numbers']*10**(-2) + 1)**10\nlower200['id'] = 'low200'\n\nfeat = ['Restaurant','Sales_after_10_years','id','YOY_Sales_numbers','Sales']\ndf_joined = pd.concat([lower200[feat], future50_data[feat]])\n\ndf_joined.sort_values(by = 'Sales_after_10_years', ascending = False).head(10).reset_index()","ee262a94":"fig = px.bar(df_joined.sort_values(by = 'Sales_after_10_years', ascending = False).head(10), color = 'id',x='Restaurant', y = 'Sales_after_10_years')\n\nfig.update_layout(\n    title = dict(\n        text = 'Top 10 Restaurants after 10 years',\n        font_family = 'Arial Black',\n        xref = 'paper',\n        x = 0),     \n    legend = dict(\n        title = 'Original dataset'\n  ))\n\nfig.update_xaxes(categoryorder = 'total descending')\n\nfig.update_yaxes(title = 'Sales prediction after 10 years')\n\nfig.for_each_trace(lambda trace: trace.update(name=\"B200\") if trace.name == \"low200\" else (trace.update(name=\"Future 50\")),)\nfig.show()","aab5cda2":"top10_after_10 = df_joined.sort_values(by = 'Sales_after_10_years', ascending = False).head(10).reset_index().copy()\n\n\nfig = go.Figure()\n\nx = np.arange(2020,2030,1)\ny = np.zeros(10)\n\nfor i in range(10):\n    y[0] = top10_after_10['Sales'][i]\n    for j in range(9):\n        y[j+1] = y[0]*((top10_after_10['YOY_Sales_numbers'][i]*(10**(-2)) + 1)**(j+1))\n    if  top10_after_10['id'][i] == 'fut50':\n        fig.add_trace(go.Scatter(\n                x=x, y=y,name = top10_after_10['Restaurant'][i], line_color = '#4287f5',legendgroup=\"Fut50\",\n            ))\n    else:\n        fig.add_trace(go.Scatter(\n                x=x, y=y,name = top10_after_10['Restaurant'][i], line_color = '#64b564',legendgroup=\"Bott200\"\n            ))\n        \nfig.update_layout(\n    title = dict(\n    text = 'Increase in sales given constant YOY sales',\n    font_family = 'Arial Black',\n    xref = 'paper',\n    x = 0),\n    legend_title = 'Restaurants \\n(Blue: Future 50 | Green:B200)'\n)\n\nfig.update_xaxes(\ntitle = 'Years',\ndtick = 1)\n\nfig.update_yaxes(\ntitle = 'Sales in millions',\n    tickprefix = \"U$\")\n\n\nfig.show()","189a1807":"top10_after_10 = df_joined.sort_values(by = 'Sales_after_10_years', ascending = False).reset_index().copy()\n\nn_restaurants = 20\nfig = go.Figure()\n\nx = np.arange(2020,2030,1)\ny = np.zeros(n_restaurants)\n\nfor i in range(n_restaurants):\n    y[0] = top10_after_10['Sales'][i]\n    for j in range(n_restaurants-1):\n        y[j+1] = y[0]*((np.random.normal(top10_after_10['YOY_Sales_numbers'][i],scale=1)*(10**(-2)) + 1)**(j+1))\n    if  top10_after_10['id'][i] == 'fut50':\n        fig.add_trace(go.Scatter(\n                x=x, y=y,name = top10_after_10['Restaurant'][i], line_color = '#4287f5',legendgroup=\"Fut50\",\n            ))\n    else:\n        fig.add_trace(go.Scatter(\n                x=x, y=y,name = top10_after_10['Restaurant'][i], line_color = '#64b564',legendgroup=\"Bott200\"\n            ))\n        \nfig.update_layout(\n    title = dict(\n    text = 'Increase in sales given random YOY sales',\n    font_family = 'Arial Black',\n    xref = 'paper',\n    x = 0),\n    legend_title = 'Restaurants \\n(Blue: Future 50 | Green:B200)'\n)\n\nfig.update_xaxes(\ntitle = 'Years',\ndtick = 1)\n\nfig.update_yaxes(\ntitle = 'Sales in millions',\n    tickprefix = \"U$\")\n\n\nfig.show()","45b32375":"independence100_data['State'].unique()\n\nindependence100_data['State'] = independence100_data['State'].replace({\n    'N.Y.':'NY',\n    'Fla.':'FL',\n    'D.C.':'DC',\n    'Ill.':'IL',\n    'Nev.':'NV',\n    'N.C.':'NC',\n    'Ind.':'IN',\n    'Texas':'TX',\n    'Pa.':'PA',\n    'Calif.':'CA',\n    'Ga.':'GA',\n    'Mich.':'MI',\n    'Mass.':'MA',\n    'Ore.':'OR',\n    'N.J.':'NJ',\n    'Fla. ':'FL',\n    'Tenn.':'TN',\n    'Colo.':'CO',\n    'Va.':'VA'\n})","f7cac726":"independence100_data.head()","bb0a189b":"independence100_data.describe(include = 'all')","d569e16d":"fig = px.box(independence100_data, y='Sales Divided', x='State')\n\nfig.update_layout(\ntitle = dict(\ntext = 'Sales per States',\nfont_family = 'Arial Black',\nxref = 'paper',\nx = 0))\n\nfig.update_yaxes(\ntitle = \"Sales\",\n    tickprefix = \"U$\",\n    ticksuffix = ' M')\n\nfig.show()","128019cd":"fig = px.box(independence100_data, y='Sales Divided', x='City')\n\nfig.update_layout(\ntitle = dict(\ntext = 'Sales per City',\nfont_family = 'Arial Black',\nxref = 'paper',\nx = 0))\n\nfig.update_yaxes(\ntitle = \"Sales\",\n    tickprefix = \"U$\",\n    ticksuffix = ' M')\nfig.update_xaxes(\ntitle = 'Cities')\nfig.show()","b5286f90":"fig = px.histogram(independence100_data,y = 'Average Check', marginal=\"box\")\n\nfig.update_layout(\n    title = dict(\n    text = 'Avarage Check Distribution',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n)\n\nfig.update_yaxes(\n    tickprefix = \"U$\",\n    ticksuffix = ' M'\n)\nfig.show()","9bed2278":"#Let's check the distribution of sales by unity\nfig = make_subplots(4, 1,subplot_titles=['Independent 100 Restaurants and B200', 'Independent 100 Restaurants','B200'],\n                            specs = [[{\"rowspan\": 2}],\n                            [None],\n                            [{}],\n                            [{}]], vertical_spacing = 0.2)\n\nfig.add_trace(go.Box(x = independence100_data['Sales Divided'], name='Independent 100 Restaurants'), row = 1, col = 1)\nfig.add_trace(go.Box(x = lower200['Sales'], name='B200'), row = 1, col = 1)\n\nfig.add_trace(go.Box(x = independence100_data['Sales Divided'], name='Independent 100 Restaurants'), row = 3, col = 1)\n\nfig.add_trace(go.Box(x = lower200['Sales'], name='B200 '), row = 4, col = 1)\nfig.update_layout(\n    title = dict(\n    text =  'Comparisson of sales between the independet 100 restaurants and the B200',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n    hovermode='x unified',\n    yaxis_title=\"Count\",\n    legend_title=\"Segment\"\n)\n\nfig.update_yaxes(\n    title = \"Sales\"\n)\n\nfig.show()","69b0f9c5":"#Let's check the distribution of sales by unity\nfig = make_subplots(3, 1,subplot_titles=['Independent 100 Restaurants and 50 Future', 'Independent 100 Restaurants','50 Future'])\n\nfig.add_trace(go.Box(x = independence100_data['Sales Divided'], name='Independent 100 Restaurants'), row = 1, col = 1)\nfig.add_trace(go.Box(x = future50_data['Sales'], name='50 Future'), row = 1, col = 1)\n\nfig.add_trace(go.Box(x = independence100_data['Sales Divided'], name='Independent 100 Restaurants'), row = 2, col = 1)\n\nfig.add_trace(go.Box(x = future50_data['Sales'], name='50 Future'), row = 3, col = 1)\nfig.update_layout(\n    title = dict(\n    text =  'Comparisson of sales between the independet 100 restaurants and B200',\n    font_family = \"Arial Black\",\n    xref = 'paper',\n    x = 0),\n    hovermode='x unified',\n    legend_title=\"Segment\"\n)\n\nfig.update_xaxes(\n    tickprefix = 'U$',\n    ticksuffix = ' M'\n)\n\nfig.show()","5a897f8a":"fig = px.choropleth(independence100_data,\n                   locations='State',\n                   locationmode = 'USA-states',\n                   scope = 'usa',\n                   color = 'Sales Divided',\n                   color_continuous_scale = \"Viridis\",\n                   title = 'Sales in millions of the independent 100 Restaurants over the USA')\nfig.update_layout(title = dict(\nfont_family='Arial Black',\nxref = 'paper',\nx = 0\n))\nfig.show()","d80fb44d":"fig = px.choropleth(independence100_data,\n                   locations='State',\n                   locationmode = 'USA-states',\n                   scope = 'usa',\n                   color = 'Average Check',\n                   color_continuous_scale = \"Viridis\",\n                   title = 'Average Check in millions of the independent 100 Restaurants over the USA')\nfig.update_layout(title = dict(\nfont_family='Arial Black',\nxref = 'paper',\nx = 0\n))\nfig.show()","273d2a1c":"##","672c4f83":"## Top 250 Restaurants\n****","f71a55d5":"# Introduction\n\nData sources from: [the future 50 from 2020](https:\/\/www.restaurantbusinessonline.com\/future-50-2020):\n\n![jonathan-borba-8l8Yl2ruUsg-unsplash (1).jpg](attachment:a3d3676e-708e-4fe2-8d7f-a06102d21ec7.jpg)","b3bd7845":"### Expected sales of the restaurants over 10 years (Given that the YOY is constant)\n\nThe formula used to get those results are:\n\n$$\n\\text{Sales after 10 years} = \\text{Sales}(1 + \\text{YOYSales})^{10} \\quad \\quad 0 \\leq \\text{YOYSales}\\leq 1\n$$\n\nGiven $S=$ Sales, $i=$ YOYSales, $n=$ number of years \n\nAnd the formula I used to get results by year is:\n\n$$\n\\begin{aligned} \n    S_0 &= \\text{Inicial Sales}\\\\\n    S_n &= S_{n-1} (1 + i)\n\\end{aligned}\n$$\n\nThe results below are very innacurate, given the depth of the data we have in hands and the overall chaotic nature of economy. However, it is still very cool to see how the data would look like in those hypothetical scenarios.\n\n(Any help in improving this part of the notebook is very welcomed)","b58eddb1":"### Random YOY (Normal)\n\nThe YOY of each restaurant was set as a random variable normally distributed with mean equal to the inicial YOY and the variation equal to 1.\n\nIn the code bellow you can change the number of restaurants analised. (currently n_restaurants = 20)","814fbcc8":"## Independent 100 Restaurants\n****","09b26bca":"### Some notations that will be used along this notebook\n\nAs we can see, most of the restaurants have sales lower than 100k million dollars, so I think it is convinient that we cluster this data according to this huge difference.\nFor that, I am going to be refering the bottom 200 from the top 250 restaurants as **B200** and the top 50 Restaurants as **Top 50**","52ceab2e":"As we can see, the sales from the top 250 restaurants have a lot of outliers and maybe clustering it might help with understanding it.","ce32b338":"## Future 50\n****","65ca8f0d":"# Exploration Data Analysis\n****\n\nFirst, let's understand a little bit about each dataset.\n1. Top 250 restaurants\n2. Future 50 restaurants\n3. Independent 100 restaurants","988225ea":"## Thanks\n\n![Thanks.gif](attachment:b3a4aa4f-abdf-4162-aa1e-74450a93aab8.gif)\n\nAny comments and suggestions to improve my notebook are very welcomed, and also feel free to talk to me <3"}}