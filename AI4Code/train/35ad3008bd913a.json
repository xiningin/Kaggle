{"cell_type":{"b3775b4b":"code","27a909d4":"code","e7367401":"code","0cdf95fc":"code","70a17b82":"code","74460d12":"code","a0fd70c2":"code","c7c6f9db":"code","db77ea93":"code","3b986dc0":"code","c79ee577":"code","3aa8dc00":"code","37a58cd4":"code","4a1c1fe7":"code","efdf3637":"code","9fba042e":"markdown","b62ad91c":"markdown","902682ac":"markdown","35faa735":"markdown","aed82721":"markdown","f3a66424":"markdown","e4a30ed7":"markdown","96b3db43":"markdown","9b431798":"markdown","5fe40e4d":"markdown","9fba144b":"markdown"},"source":{"b3775b4b":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndb = pd.read_csv('\/kaggle\/input\/glass\/glass.csv')\ndb.head()","27a909d4":"db.info()","e7367401":"corr_matrix = db.corr(method = 'pearson')\ncorr_matrix ","0cdf95fc":"correlation = db.corr(method = 'pearson')\nax = sns.heatmap(correlation)","70a17b82":"db1 = db.iloc[:,0:9]\ndb_target = db[[\"Type\"]]\nprint(db1.head())\nprint(db_target.head())","74460d12":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\ndb_pca = pca.fit_transform(db1)","a0fd70c2":"pca.components_ ","c7c6f9db":"df = pd.DataFrame(pca.components_, columns=list(db1.columns))\ndf.head()\n","db77ea93":"pca.explained_variance_ratio_ ","3b986dc0":"main_db = pd.DataFrame(data = db_pca\n             , columns = ['principal component 1', 'principal component 2'])","c79ee577":"final_db = pd.concat([main_db, db_target], axis = 1)\nfinal_db.head()","3aa8dc00":"\nplt.figure(figsize=(8,6))\nplt.scatter(db_pca[:,0],db_pca[:,1], c = final_db['Type'])\n\n\nplt.xlabel('First principal component')\nplt.ylabel('Second Principal Component')\n\nplt.legend(numpoints = 6)\n\nplt.show()","37a58cd4":"#======== TEST WITH FUNCTION REPLICATING BIPLOT FUNCTION FROM R =========#\n\nxvector = pca.components_[0] \nyvector = pca.components_[1]\nxs = pca.transform(db1)[:,0] # see 'prcomp(my_data)$x' in R\nys = pca.transform(db1)[:,1]","4a1c1fe7":"for i in range(len(xvector)):\n\n    plt.arrow(0, 0, xvector[i]*max(xs), yvector[i]*max(ys),\n              color='r', width=0.0005, head_width=0.0025)\n    plt.text(xvector[i]*max(xs)*1.2, yvector[i]*max(ys)*1.2,\n             list(db1.columns.values)[i], color='r')\n\nfor i in range(len(xs)):\n\n    plt.plot(xs[i], ys[i], 'bo')\n    plt.text(xs[i]*1.2, ys[i]*1.2, list(db1.index)[i], color='b')\n\n\nplt.show()","efdf3637":"#plt.close(fig) \n#fig.show('YourPathHere')","9fba042e":"And the most important part, how much variance are these two components explaining:","b62ad91c":"Firstly, let's import the data and have a quick look at it:","902682ac":"Let's have a look at the eigen vectors:","35faa735":"Checking correlations between the types of glass components: ","aed82721":"Now let's have a look at the graphic representation:","f3a66424":"For someone interested more in the visual explanation of PCA, I believe it would be great to see what are the elements in each of the two components; I couldn't find yet something similar to R's biplot so I used a function found on github that helps make it (https:\/\/github.com\/teddyroland\/python-biplot). I will replicate this analysis in R and hopefully it will look even better!","e4a30ed7":"47% explained by the first one, 26% by the second, so 71,3%; for a Machine Learning project I would go further and try to add more components, but right now I'm more interested to see how to represent this visually, in the next steps.","96b3db43":"Now I'll run PCA with two components at first:","9b431798":"Now let's see what each of the two components contain:","5fe40e4d":"Now I'll be splitting the variables that will be grouped in components and the type of glass that can be considered the target:","9fba144b":"**In this notebook I'm doing a demonstration of Principal Component Analysis on the types of glass; although PCA is extensively used in Machine Learning as a way to simplify the data by reducing dimensionality, I believe it can be very useful from a visual point of view for simpler analysis, especially in the field of consumer behaviour. **"}}