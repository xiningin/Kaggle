{"cell_type":{"1004b667":"code","3c822033":"code","9cddfff2":"code","49f1d6dd":"code","b1e9771d":"code","3ccce49c":"code","08429677":"code","0d629796":"code","9f8bb6cb":"code","4465adc4":"code","b77e77d5":"code","915cea8e":"code","78d916fb":"code","323f8aaf":"code","ff3079fc":"code","24f128c9":"code","250f3989":"code","7d495015":"code","f8efed60":"code","3a4972cc":"markdown","84d2a552":"markdown","e46d5159":"markdown","d861ed8a":"markdown","1d2f981c":"markdown","a4da41ff":"markdown","6463a825":"markdown","621630d1":"markdown","d3828ec1":"markdown","6703cf75":"markdown","1209b181":"markdown","084db128":"markdown","7381ceea":"markdown","6bad226c":"markdown","d6481e92":"markdown","89eaadcc":"markdown","ce7199bd":"markdown","3bd08b04":"markdown","2eb4321d":"markdown","0a2726aa":"markdown"},"source":{"1004b667":"import numpy as np\nimport cv2\nimport os\nimport tqdm\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches","3c822033":"def load_images(images_folder, img_size = (128,128), scale=False):\n\n    # Store paths to images\n    image_path = []\n    for dirname, _, filenames in os.walk(images_folder):\n        for filename in filenames:\n            image_path.append(os.path.join(dirname, filename))\n\n    print(\"There are {} images in {}\".format(len(image_path), images_folder))\n    \n    # Load images and associated labels\n    images = []\n\n    for path in tqdm.tqdm(image_path):\n\n        img = cv2.imread(path)    \n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n#         img = cv2.resize(img, img_size) # Resize the images\n\n        img = np.array(img)\n\n        images.append(img)\n\n    images = np.array(images)  \n#     images = images.astype(np.int64)\n    \n    if scale:\n        images = images\/255 # scale\n        \n    return image_path, images","9cddfff2":"images_folder = \"..\/input\/people-images-for-face-detection\"\npaths, images = load_images(images_folder)","49f1d6dd":"plt.figure(figsize=(10,10))\nrandom_inds = np.random.choice(len(paths),36)\nfor i in range(36):\n    plt.subplot(6,6,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    image_ind = random_inds[i]\n    plt.imshow(np.squeeze(images[image_ind]), cmap=plt.cm.binary)","b1e9771d":"face_classifier = cv2.CascadeClassifier('..\/input\/haarcascade-frontalface-default\/haarcascade_frontalface_default.xml')","3ccce49c":"img = images[4]\nplt.imshow(img)","08429677":"# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nfaces = face_classifier.detectMultiScale(img, 1.1596258, 6)\nlen(faces)","0d629796":"faces","9f8bb6cb":"if faces is ():\n    print(\"No faces found\")\n    \n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(img)\n\n# Plot the boxes\nfor (x,y,w,h) in faces:\n\n    # Create a rectangle patch\n    rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')\n\n    # Add the patch to the axes\n    ax.add_patch(rect)\n\n# Plot\nplt.show()\n\n","4465adc4":"# Install packages\n!pip install mtcnn\n!pip install opencv-contrib-python","b77e77d5":"import mtcnn\nprint(mtcnn.__version__)","915cea8e":"from mtcnn.mtcnn import MTCNN\n\ndetector = MTCNN()\nimg = images[10]\nfaces = detector.detect_faces(img)\nfaces","78d916fb":"# Create figure and axes\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(img)\n\nfor face in faces:\n    x,y,w,h = face['box']\n\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')\n\n    # Add the patch to the Axes\n    ax.add_patch(rect)\n\nplt.show()","323f8aaf":"rect","ff3079fc":"# Create figure and axes\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(img)\n\nfor face in faces:\n    x,y,w,h = face['box']\n\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')\n\n    # Add the patch to the Axes\n    ax.add_patch(rect)\n    \n    # draw the dots\n    for key, value in face['keypoints'].items():\n        # create and draw dot\n        dot = patches.Circle(value, radius=30, color='blue')\n        ax.add_patch(dot)\n\nplt.show()","24f128c9":"# draw each face separately\ndef draw_faces(img, result_list):\n    # plot each face as a subplot\n    for i in range(len(result_list)):\n        # get coordinates\n        x1, y1, width, height = result_list[i]['box']\n        x2, y2 = x1 + width, y1 + height\n        # define subplot\n        plt.subplot(1, len(result_list), i+1)\n        plt.axis('off')\n        # plot face\n        plt.imshow(img[y1:y2, x1:x2])\n    # show the plot\n    plt.show()","250f3989":"draw_faces(img, faces)","7d495015":"detector = MTCNN()\nimg = images[4]\nfaces = detector.detect_faces(img)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n\nfor face in faces:\n    x,y,w,h = face['box']\n\n    # Create a Rectangle patch\n    rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')\n\n    # Add the patch to the Axes\n    ax.add_patch(rect)\n    \n    roi = img[y:y+h, x:x+w]\n    roi = cv2.blur(roi, (50,50))\n    # impose this blurred image on original image to get final image\n    img[y:y+roi.shape[0], x:x+roi.shape[1]] = roi\n\n# Display the image\nax.imshow(img)\n\nplt.show()\n\ndraw_faces(img, faces)","f8efed60":"plt.imshow(img)","3a4972cc":"We'll plot the result on the image","84d2a552":"## Load images","e46d5159":"# References","d861ed8a":"We will take one of the images to try the detection.","1d2f981c":"**Edit: I made a Flask application for deploying this model. You can find the project [here](https:\/\/github.com\/charbelkindji\/me-myself-and-blurry).**  \n\n**Demo app is available [here](https:\/\/me-myself-and-blurry.herokuapp.com\/).**","a4da41ff":"These are the information about the boxes around the detected faces.","6463a825":"About MTCNN architecture https:\/\/towardsdatascience.com\/face-detection-neural-network-structure-257b8f6f85d1\nHow does MTCNN works https:\/\/towardsdatascience.com\/how-does-a-face-detection-program-work-using-neural-networks-17896df8e6ff","621630d1":"## Build a classifier with cv2","d3828ec1":"Image bluring https:\/\/medium.com\/swlh\/blurring-or-smoothing-out-images-opencv-3005cfc21cd2","6703cf75":"### Blurring the faces","1209b181":"MTCNN source code https:\/\/github.com\/ipazc\/mtcnn\/blob\/master\/mtcnn\/mtcnn.py","084db128":"I downloaded some images from Unsplash to test my model.","7381ceea":"# Face detection and blurring","6bad226c":"### Draw detected faces","d6481e92":"### Plot detected faces with key points (eyes, etc.)","89eaadcc":"## Detection with MTCNN","ce7199bd":"### Plot detected faces","3bd08b04":"All faces were detected but there are many false positives. We can try to tune the parameters of the model a little. ","2eb4321d":"## Plot some images","0a2726aa":"Let's look at the results"}}