{"cell_type":{"0063a7e7":"code","ebeeadaa":"code","96b1a700":"code","1520bf19":"code","d8081d8d":"code","ce47e472":"code","3d91ee31":"code","6bb7685b":"code","d32ca118":"code","3017c7b0":"code","423c0588":"code","f227881a":"code","1b509f7c":"code","227fa376":"code","dbd2e3cc":"code","7576fa2d":"code","9f7d3b8b":"code","cc21edeb":"code","9010cfa6":"code","26710fad":"code","66cc5cd5":"code","7482d89f":"code","1e6317e7":"code","ee9a5b83":"code","8f846981":"code","42b5c1b0":"code","36c538f2":"code","e87fa524":"code","6c1375f3":"code","d092e28b":"code","979588f7":"code","f56ba737":"code","94ce11fa":"code","4bccf58a":"code","98437da2":"code","dfed03a4":"code","14b520db":"code","286d2496":"code","f484ad03":"code","bceb9ea6":"code","b677d61e":"code","6e838173":"code","d6cba8d2":"markdown","1dd6e615":"markdown","5a5e29a9":"markdown","c5016e11":"markdown","a4d2ba40":"markdown"},"source":{"0063a7e7":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","ebeeadaa":"data_x_train = pd.read_csv('..\/input\/hr-data-predict-change-jobscompetition-form\/X_train.csv')\ndata_y_train = pd.read_csv('..\/input\/hr-data-predict-change-jobscompetition-form\/y_train.csv')","96b1a700":"data_x_train.shape","1520bf19":"data_y_train.shape","d8081d8d":"data_x_train.head()","ce47e472":"data_y_train.head()","3d91ee31":"#union of data\njoin = (data_x_train, data_y_train['target'])\ndf = pd.concat(join, axis = True)\ndf.head()","6bb7685b":"#transform target\ndf['target'] = df['target'].astype('int')","d32ca118":"#indexing enrollee ID\ndf = df.set_index('enrollee_id')\ndf.head()","3017c7b0":"df.describe()","423c0588":"df.info()","f227881a":"#handling missing value\ndf.dropna(inplace = True)","1b509f7c":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(df.corr(), annot = True, cmap = 'Blues')\nplt.title(\"Pearson Correlation\")\nplt.show()","227fa376":"#visualize gender of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['gender'])\nplt.title(\"Gender of Employee\")\nplt.xlabel(\"Gender\")\nplt.show()","dbd2e3cc":"#visualize gender of employee ~ training hours\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'gender', y = 'training_hours', palette = 'Set1')\nplt.title(\"Gender of Employee ~ Training Hours\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Training Hours\")\nplt.show()","7576fa2d":"#visualize relevant experience of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['relevent_experience'], palette = 'Set2')\nplt.title(\"Relevant Experience of Employee\")\nplt.xlabel(\"Relevant Experience\")\nplt.show()","9f7d3b8b":"#visualize relevant experience of employee ~ training hours\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'relevent_experience', y = 'training_hours')\nplt.title(\"Relevant Experience of Employee ~ Training Hours\")\nplt.xlabel(\"Relevant Experience\")\nplt.ylabel(\"Training Hours\")\nplt.show()","cc21edeb":"#visualize enrolled university of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['enrolled_university'], palette = 'Set1')\nplt.title(\"Enrolled University of Employee\")\nplt.xlabel(\"Enrolled University\")\nplt.show()","9010cfa6":"#visualize enrolled university of employee ~ training hours\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'enrolled_university', y = 'training_hours', palette = 'Set2')\nplt.title(\"Enrolled University of Employee ~ Training Hours\")\nplt.xlabel(\"Enrolled University\")\nplt.ylabel(\"Training Hours\")\nplt.show()","26710fad":"#visualize education level of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['education_level'])\nplt.title(\"Education Level of Employee\")\nplt.xlabel(\"Education Level\")\nplt.show()","66cc5cd5":"#visualize education level of employee ~ training hours\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'education_level', y = 'training_hours', palette = 'Set1')\nplt.title(\"Education Level of Employee ~ Training Hours\")\nplt.xlabel(\"Education Level\")\nplt.ylabel(\"Training Hours\")\nplt.show()","7482d89f":"#visualize major discipline of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['major_discipline'], palette = 'Set2')\nplt.title(\"Major Discipline of Employee\")\nplt.xlabel(\"Major Discipline\")\nplt.show()","1e6317e7":"#visualize major discipline of employee ~ training hours\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'major_discipline', y = 'training_hours')\nplt.title(\"Major Discipline of Employee ~ Training Hours\")\nplt.xlabel(\"Major Discipline\")\nplt.ylabel(\"Training Hours\")\nplt.show()","ee9a5b83":"#visualize experience of employee\nplt.figure(figsize = (10,6))\ndf['experience'].value_counts().sort_values().plot(kind = 'barh', color = 'lightseagreen')\nplt.title(\"Experience of Employee\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Experience\")\nplt.show()","8f846981":"#visualize experience of employee ~ training hours\nplt.figure(figsize = (15,6))\nsns.boxplot(data = df, x = 'experience', y = 'training_hours', palette = 'Set1')\nplt.title(\"Experience of Employee ~ Training Hours\")\nplt.xlabel(\"Experience\")\nplt.ylabel(\"Training Hours\")\nplt.show()","42b5c1b0":"#visualize company size of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['company_size'], palette = 'Set2')\nplt.title(\"Company Size of Employee\")\nplt.xlabel(\"Company Size\")\nplt.show()","36c538f2":"#visualize company size of employee ~ training hours\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'company_size', y = 'training_hours')\nplt.title(\"Company Size of Employee ~ Training Hours\")\nplt.xlabel(\"Company Size\")\nplt.ylabel(\"Training Hours\")\nplt.show()","e87fa524":"#visualize company type of employee\nplt.figure(figsize = (10,6))\nsns.countplot(df['company_type'], palette = 'Set1')\nplt.title(\"Company Type of Employee\")\nplt.xlabel(\"Company Type\")\nplt.show()","6c1375f3":"#visualize company type of employee ~ training hours\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'company_type', y = 'training_hours', palette = 'Set2')\nplt.title(\"Company Type of Employee ~ Training Hours\")\nplt.xlabel(\"Company Type\")\nplt.ylabel(\"Training Hours\")\nplt.show()","d092e28b":"#visualize last new job of employee\nplt.figure(figsize = (8,6))\nsns.countplot(df['last_new_job'])\nplt.title(\"Last New Job of Employee\")\nplt.xlabel(\"Last New Job\")\nplt.show()","979588f7":"#visualize last new job of employee ~ training hours\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'last_new_job', y = 'training_hours', palette = 'Set1')\nplt.title(\"Last New Job of Employee ~ Training Hours\")\nplt.xlabel(\"Last New Job\")\nplt.ylabel(\"Training Hours\")\nplt.show()","f56ba737":"#handling categorical data\nfor i in df.columns.tolist():\n    df[i] = df[i].astype('category').cat.codes\n\ndf.head()","94ce11fa":"#split data\nX = df.drop('target', axis = 1)\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","4bccf58a":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    LinearSVC(),\n    DecisionTreeClassifier(criterion = 'gini', max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","98437da2":"#report models\nlog_cols = [\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100, ll]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","dfed03a4":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"deepskyblue\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\n\n#visualize log loss models\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"orange\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","14b520db":"#build model\nab = AdaBoostClassifier()\n%time ab.fit(X_train, y_train)\nab.score(X_test, y_test)","286d2496":"#prediction\ny_pred = ab.predict(X_test)\nprint(y_pred)","f484ad03":"#check of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","bceb9ea6":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = '.0f', cmap = 'viridis')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","b677d61e":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","6e838173":"#visualize histogram of each attribute\ndf.hist(figsize = (12,12), color = 'darkblue')\nplt.show()","d6cba8d2":"# Prediction of Changing Jobs of Employee","1dd6e615":"# Data Extraction","5a5e29a9":"# Visualization","c5016e11":"## Adaptive Boosting Model is the best accuracy score result on 86%","a4d2ba40":"# Classification Model"}}