{"cell_type":{"b838c52c":"code","8d2c8a1f":"code","e8a09116":"code","2bd7caaa":"code","80fc7187":"code","e9d136db":"code","fbc8419c":"code","bd363b0b":"code","69cf5af7":"code","f3d2c8ba":"markdown"},"source":{"b838c52c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 150)\npd.set_option('max_rows', 150)","8d2c8a1f":"import matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom scipy import stats\n#To plot figs on jupyter\n%matplotlib inline\n# figure size in inches\nrcParams['figure.figsize'] = 14,6\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls","e8a09116":"\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bd7caaa":"PATH =   r\"\/kaggle\/input\/rawdata\/RAW-METRICS-2014-2015\/2015\/2015-CW-12\/\"\ndf = pd.read_csv(PATH+\"lphost10_global_unix-global_prod-appserver_2015.03.22_00.00.01.csv\")","80fc7187":"df.columns","e9d136db":"df.head()","fbc8419c":"from plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\n\ndef line_plot_check_nan(df1, df2, x, y, title, width, height):\n    \n    trace1 = go.Scatter(\n        x = df1[x],\n        y = df1[y],\n        mode='lines',\n        name='with_nans',\n        marker = dict(\n            color = '#1E90FF', \n        ), \n    )\n    \n    df3 = df2.dropna()\n    trace2 = go.Scatter(\n        x = df3[x],\n        y = df3[y],\n        mode='markers',\n        name='no_nans',\n        marker = dict(\n            color = 'red', \n        ), \n    )\n    \n    layout = go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5\n        ),\n        font = dict(size = 14),\n        width = width,\n        height = height,\n    )\n    \n    data = [trace1, trace2]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig, filename = 'line_plot')","bd363b0b":"line_plot_check_nan(df,df, 'Date', \"\\\\Swap\\\\used\",\" Swap used by date\", 1400, 600)","69cf5af7":"line_plot_check_nan(df,df,  'Date', \"\\\\Swap\\\\free\",\" Swap used by date\", 1400, 600)","f3d2c8ba":"# End Notebook"}}