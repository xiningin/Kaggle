{"cell_type":{"a79fe38a":"code","e475b51d":"code","2fb7aa97":"code","c7f97e37":"code","d222fe85":"code","34807b6c":"code","d202871c":"code","69f5d376":"code","663fea0f":"code","37270d4d":"code","cc8c1f4a":"code","47953d6d":"code","cabb02ea":"code","b87d5d96":"code","882683df":"code","6363d51b":"code","afceaf54":"code","30da7f44":"code","faa8bce2":"code","56a5c69a":"code","ecc81b16":"code","437f3951":"code","b1b1fcec":"code","47403bf7":"code","90583642":"code","bda94213":"markdown","f7f7862c":"markdown","2f3da437":"markdown","9ca37305":"markdown","6fe32714":"markdown","16bbe7e3":"markdown"},"source":{"a79fe38a":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# install portfolio optimizer package (quitely install)\n!pip install -q PyPortfolioOpt\n!pip install -q pandas-datareader","e475b51d":"import pandas as pd\nimport numpy as np\nimport requests\nimport pandas_datareader as pdr\n\nimport matplotlib.pyplot as plt\n\n# optimizer for the portfolio\nfrom pypfopt.efficient_frontier import EfficientFrontier as EF\nfrom pypfopt import risk_models as RM\nfrom pypfopt import expected_returns as ER\nfrom pypfopt import objective_functions\nfrom pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices","2fb7aa97":"# read the data into pandas dataframe\ndf = pd.read_csv('..\/input\/nationalstockexchangeindia-alltickers-data\/all_stock_AdjClose_price.csv', \n                  parse_dates=True, index_col=\"Date\")","c7f97e37":"# dimensions of the data\ndf.shape","d222fe85":"# let's have a look on the data\ndf.head()","34807b6c":"# how many missing values for each 'ticker'\ndf.isna().sum().sort_values(ascending = False)","d202871c":"# df['NIRAJISPAT.NS'][df['NIRAJISPAT.NS'].notnull()]\ndf['PRIVISCL.NS'][df['PRIVISCL.NS'].notnull()]","69f5d376":"# drop the columns where all elements are NaN\ndf = df.dropna(axis=1, how='all', thresh=1400)","663fea0f":"# so how many cols we lost?\ndf.shape","37270d4d":"# how many missing values for each 'ticker'\ndf.isna().sum().sort_values(ascending = False)","cc8c1f4a":"df.head()","47953d6d":"# Annualized 'expected returns'\nmu = ER.mean_historical_return(df)\n\n#'sample covariance matrix'\nscm = RM.sample_cov(df)","cabb02ea":"mu","b87d5d96":"scm","882683df":"# mean-variance optimisation for both long and short positions\nef_ls = EF(mu, scm, weight_bounds=(-1, 1))","6363d51b":"# To generate market neutral portfolios \n# (with weights summing to zero and for a target return of at least 20% from the portfolio)\n# ef_ls.efficient_return(target_return=0.2, market_neutral=True)","afceaf54":"# if you are creating a portfolio for diversification purposes, then...\n# ef_ls.add_objective(objective_functions.L2_reg, gamma=0.1)","30da7f44":"# calculate weights\nweights = ef_ls.max_sharpe()","faa8bce2":"# clean the weights\ncleaned_weights = ef_ls.clean_weights()\n\nprint(cleaned_weights)","56a5c69a":" # saves weights to file\nef_ls.save_weights_to_file(\"weights.csv\") ","ecc81b16":"# check portfolio performance\nef_ls.portfolio_performance(verbose=True)","437f3951":"# get the latest prices\nlatest_prices = get_latest_prices(df)","b1b1fcec":"# get total budget\ndef inputBudget(message):\n  while True:\n    try:\n       userInput = int(input(message))       \n    except ValueError:\n       print(\"This is not an expected number! Try again.\")\n       continue\n    else:\n       return userInput \n       break \n\nbudget = inputBudget('How much is your budget (enter only numbers e.g. 10000):')","47403bf7":"# dynamic discrete allocation\n# da = DiscreteAllocation(weights=weights, latest_prices=latest_prices, total_portfolio_value=budget)","90583642":"## bifurcation over budgeted amount (INR 10000)\n\n# allocation, leftover = da.lp_portfolio()\n# print(\"Discrete allocation:\", allocation)\n# print(\"Funds remaining: INR {:.2f}\".format(leftover))","bda94213":"# Creating a Financial Portfolio","f7f7862c":"## Sarpe Ratio\n\n**Sharpe ratio is the measure of risk-adjusted return of a financial portfolio.**\n\n**A portfolio with a higher Sharpe ratio is considered superior relative to its peers.**","2f3da437":"### **Install and load the necessary packages**","9ca37305":"### Compute the Annualized 'Expected Returns' and 'Sample Covariance Matrix' for the Stocks","6fe32714":"Though, for some of the tickers the data might be null due to the reason:\n\n- the stocks were yet to be listed on the exchange on a particular date\n- trading data is not available for some reasons e.g. technical glitch or other","16bbe7e3":"### Load all stocks' Adjusted Closing Price data"}}