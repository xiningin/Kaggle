{"cell_type":{"4febb0de":"code","f810c495":"code","7a44e2a3":"code","4021157d":"code","a7c2d48a":"code","1b08f332":"code","7bf81127":"code","9bc34135":"code","53bfd6e8":"code","ac1048a6":"code","2e765e5e":"code","c66b7d03":"code","08fd47a3":"code","a5aa8cc6":"code","bfec0fc5":"code","2c39be00":"code","159fcc2c":"code","3de960c9":"code","3b5fcb1d":"code","07f930fa":"code","f1477ef0":"code","2d055523":"code","72fa6c6a":"code","e2160edf":"code","47796668":"code","2bf7e9fa":"code","8cb4ffff":"code","f63f60cc":"code","7ce228e7":"code","f4586d69":"code","269cfc1f":"code","616f190b":"code","9df9e27d":"code","3c1e46cb":"code","cb27c585":"code","12fe6c87":"code","3af4d8bb":"code","45b046e5":"code","1afa6756":"code","617a58f4":"code","ba6282d6":"code","75df68b5":"code","b900108f":"code","f2743fea":"code","2b306059":"code","d8413937":"code","15c0231c":"code","111ae8e3":"code","a7500711":"code","8b18eb73":"code","08203da1":"code","78668b4e":"code","5f392857":"code","d65dfe01":"code","6b5072bd":"code","d2de59f3":"code","0265f1d1":"code","535900f1":"code","007e5a87":"code","6653f570":"code","68a3d5bc":"code","f1baa83d":"code","001ce540":"code","1f20ec76":"code","050a3a28":"code","fdb92a71":"code","4e2b68c1":"code","81c00bd7":"code","e9505cc7":"code","6305fa13":"code","265bda64":"code","75c4b386":"code","fe6015b7":"code","182573d1":"code","21cc7526":"code","9265c889":"code","24fb2f54":"code","dadbcda5":"code","cef8c840":"code","40bbfc36":"code","be6cbf94":"code","358630ec":"code","1cda5fbd":"code","39844f77":"code","8154336e":"code","fd0caf21":"code","00c5a450":"code","2a685b6d":"code","9cc43d58":"code","8ce03c2a":"code","707c4c0e":"code","aeba8c6f":"code","c2ead0af":"code","a080c8a6":"code","3ea45b5f":"code","bf095c47":"code","fd19b6b9":"code","4d486cc5":"code","1c18cefd":"code","ade3ae80":"code","b2e644c9":"code","21f0d43c":"code","f08cb14e":"code","c53d1ce9":"code","21c2e529":"code","43865cda":"markdown","4bb14501":"markdown","2d84bc45":"markdown","bcf45a7b":"markdown","5959b6fe":"markdown","528bdf04":"markdown","49569683":"markdown","ae1674b8":"markdown","0a8366d0":"markdown","16bb6d55":"markdown","6249ec47":"markdown","4b389a70":"markdown","df65035e":"markdown","dbfb54d4":"markdown","dfc42e63":"markdown","1335b210":"markdown","1920b0ca":"markdown"},"source":{"4febb0de":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix","f810c495":"df = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf","7a44e2a3":"\n# Exploratory Data Analysis\ndef libraries():\n    global pd,np\n    import pandas as pd\n    import numpy as np\ndef load():\n    global df\n    df=pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\n    \ndef top_rows(value):\n    print('\\033[1m'+ 'displaying the', value, 'rows from top'+'\\033[0m')\n    a=df.head(value)\n    print(a,'\\n')\n    \ndef bottom_rows(value):\n    print('\\033[1m'+'displaying the', value, 'rows from bottom'+'\\033[0m')\n    b=df.tail(value)\n    print(b,'\\n')\n    \ndef rows_columns():\n    print('\\033[1m'+'Shape of the Data set'+'\\033[0m')\n    c=df.shape\n    print(c,'\\n')\n    \ndef col_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    d=df.columns\n    print(d,'\\n')\n    \ndef information():\n    print('\\033[1m'+'Quick Overview of DataSet(info)'+'\\033[0m')\n    e = df.info()\n    print(e,'\\n')\n\ndef sizee():\n    print('\\033[1m'+'No.of Elements in the DataSet'+'\\033[0m')\n    f = df.size\n    print(f,'\\n')\n\ndef ndimension():\n    print('\\033[1m'+'Dimensions in your dataframe'+'\\033[0m')\n    g = df.ndim\n    print(g,'\\n')\n    \ndef stats_summary():\n    print('\\033[1m'+'Staistical Summary of DataSet'+'\\033[0m')\n    h = df.describe()\n    print(h,'\\n')\n    \ndef null_values():\n    print('\\033[1m'+'Number of Missing values in each column'+'\\033[0m')\n    i = df.isnull().sum()\n    print(i,'\\n')\n    \ndef n_unique():\n    print('\\033[1m'+'Number of unique elements'+'\\033[0m')\n    j = df.nunique()\n    print(j,'\\n')\n    \ndef memory_use():\n    print('\\033[1m'+'Memory used by all colomns in bytes'+'\\033[0m')\n    k = df.memory_usage()\n    print(k,'\\n')\n    \ndef is_na(value):\n    print('\\033[1m'+'Dataframe filled with boolean values with true indicating missing values'+'\\033[0m')\n    l = df.isna().head(value)\n    print(l,'\\n')\n    \ndef duplicate():\n    print('\\033[1m'+'Boolean Series denoting duplicate rows'+'\\033[0m')\n    m = df.duplicated().sum()\n    print(m,'\\n')\n    \ndef valuecounts():\n    print('\\033[1m'+'Series containing count of unique values'+'\\033[0m')\n    n = df.value_counts()\n    print(n,'\\n')\n\ndef datatypes():\n    print('\\033[1m'+'Datatype of each column'+'\\033[0m')\n    o = df.dtypes\n    print(o,'\\n')\n    \ndef correlation():\n    print('\\033[1m'+'Correalation between all columns in DataFrame'+'\\033[0m')\n    p = df.corr()\n    print(p,'\\n')\n    \ndef nonnull_count():\n    print('\\033[1m'+'Count of non-null values'+'\\033[0m')\n    q = df.count()\n    print(q,'\\n')\n    \ndef eda():\n    load()\n    value= 5 \n    datatypes()\n    top_rows(value)\n    bottom_rows(value)\n    rows_columns()\n    col_names()\n    information()\n    sizee()\n    ndimension()\n    stats_summary()\n    null_values()\n    n_unique()\n    memory_use()\n    is_na(value)\n    nonnull_count()\n    duplicate()\n    valuecounts()\n    correlation()\n    \n    \n    \n        \ndef stats_u(data,col):\n    if data[col].dtype == \"float64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        max_value = data[col].max()\n        print('Maximum value of',col,'column',max_value)\n        min_value = data[col].min()\n        print('Minimum value of',col,'column',min_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n            \n    elif data[col].dtype == \"int64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(\"Outliers are:\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n    else:\n        print(col,'has Qualitative Data')\n        z = df[col].mode()\n        print('mode of',col,'column:\\n',z)\n        print('Count of mode is:\\n',df[col].value_counts())\n        print('Unique strings in',col,'are',data[col].nunique())\n        if(data[col].nunique() == 1):\n            print(col,'has same string')\n        elif(data[col].nunique() == 2):\n            print(col,'has binary strings')\n        else:\n            print(col,'has multi stings')\n\n\nlibraries()\neda()\n\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of DataSet'+'\\033[0m')\nprint('\\033[1m'+'DataTypes in the DataSet:\\n'+'\\033[0m',df.dtypes)\nprint('\\033[1m'+'Columns in DataSet:'+'\\033[0m',df.columns)\nprint('\\033[1m'+'Shape of DataSet:'+'\\033[0m',df.shape)\nprint('\\033[1m'+'Size of DataSet:'+'\\033[0m',df.size)\nprint('\\033[1m'+'Dimension of DataSet:'+'\\033[0m',df.ndim)\nprint('\\033[1m'+'Total Memory used in DataSet:'+'\\033[0m',df.memory_usage().sum())\nprint('\\033[1m'+'Total Number of missing values in DataSet:'+'\\033[0m',df.isnull().sum().sum())\nprint('\\033[1m'+'Total Number of Unique values in DataSet:'+'\\033[0m',df.nunique().sum())\nprint('\\033[1m'+'Total Number of non null values in DataSet:'+'\\033[0m',df.count().sum())\nprint('\\033[1m'+'Total Number of duplicate rows in DataSet:'+'\\033[0m',df.duplicated().sum())\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of Each Colomn'+'\\033[0m')\nprint(\"\\n\")\ncols=df.columns\ncols\nfor i in cols:\n    print('\\033[1m'+i+'\\033[0m')\n    stats_u(df,i)\n    print(\"\\n\")\n            ","4021157d":"df.head()","a7c2d48a":"df.tail()","1b08f332":"df.shape","7bf81127":"df.size","9bc34135":"df.dtypes","53bfd6e8":"df.columns","ac1048a6":"df.info()","2e765e5e":"df.describe()","c66b7d03":"df.duplicated().sum()","08fd47a3":"df.isnull().sum()","a5aa8cc6":"df.skew()","bfec0fc5":"df.corr()","2c39be00":"! pip install Autoviz","159fcc2c":"! pip install xlrd","3de960c9":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","3b5fcb1d":"df['quality'].value_counts()","07f930fa":"sns.countplot(x = 'quality',data = df)\nplt.show()\n#unbalanced data","f1477ef0":"fig = px.histogram(df['quality'],             \n                   color=round(df['fixed acidity']),\n                   title=\"<b>Average fixed acidity by quality<\/b>\")\n\nfig.add_vline(x=df['fixed acidity'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\nfig.update_layout(bargap=0.2)\nfig.show()\n\n# In quality ","2d055523":"for i in df.columns[:-1]:\n    data=df.copy()\n    data.groupby('quality')[i].mean().plot.bar()\n    plt.xlabel('quality')\n    plt.ylabel(i)    \n    plt.title('quality')\n    plt.show()","72fa6c6a":"plt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","e2160edf":"# fixed acidity vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[0]:\n        sns.scatterplot(x = x.columns[0],y = i,data = x,color = 'Red')\n        plt.show()","47796668":"#violatile acidity vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[1]:\n        sns.scatterplot(x = x.columns[1],y = i,data = x,color = 'Red')\n        plt.show()","2bf7e9fa":"# critic acid vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[2]:\n        sns.scatterplot(x = x.columns[2],y = i,data = x,color = 'Red')\n        plt.show()","8cb4ffff":"# residual sugar vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[3]:\n        sns.scatterplot(x = x.columns[3],y = i,data = x,color = 'Red')\n        plt.show()","f63f60cc":"# chlorides vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[4]:\n        sns.scatterplot(x = x.columns[4],y = i,data = x,color = 'Red')\n        plt.show()","7ce228e7":"# free sulphur dioxide vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[5]:\n        sns.scatterplot(x = x.columns[5],y = i,data = x,color = 'Red')\n        plt.show()","f4586d69":"# total sulphuric acid vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[6]:\n        sns.scatterplot(x = x.columns[6],y = i,data = x,color = 'Red')\n        plt.show()","269cfc1f":"# density vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[7]:\n        sns.scatterplot(x = x.columns[7],y = i,data = x,color = 'Red')\n        plt.show()","616f190b":"# pH vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[8]:\n        sns.scatterplot(x = x.columns[8],y = i,data = x,color = 'Red')\n        plt.show()","9df9e27d":"# sulphates vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[9]:\n        sns.scatterplot(x = x.columns[9],y = i,data = x,color = 'Red')\n        plt.show()","3c1e46cb":"# alcohol vs other features\nplt.figure(figsize=(6,8))\nx = df.drop('quality',axis = 1)\nfor i in x.columns:\n    if i not in x.columns[10]:\n        sns.scatterplot(x = x.columns[10],y = i,data = x,color = 'Red')\n        plt.show()","cb27c585":"# fixed acidity vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[0]:\n        sns.scatterplot(x = df.columns[0],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","12fe6c87":"# volatile acidity vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[1]:\n        sns.scatterplot(x = df.columns[1],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","3af4d8bb":"# citric acid vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[2]:\n        sns.scatterplot(x = df.columns[2],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","45b046e5":"# residual sugar vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[3]:\n        sns.scatterplot(x = df.columns[3],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","1afa6756":"# free sulfur dioxide vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[5]:\n        sns.scatterplot(x = df.columns[5],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","617a58f4":"# total sulfur dioxide vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[6]:\n        sns.scatterplot(x = df.columns[6],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","ba6282d6":"# density vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[7]:\n        sns.scatterplot(x = df.columns[7],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","75df68b5":"# pH vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[8]:\n        sns.scatterplot(x = df.columns[8],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","b900108f":"# sulphates vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[9]:\n        sns.scatterplot(x = df.columns[9],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","f2743fea":"# alcohol vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[10]:\n        sns.scatterplot(x = df.columns[10],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","2b306059":"# chlorides vs other features\nplt.figure(figsize=(6,8))\nfor i in df.columns:\n    if i not in df.columns[4]:\n        sns.scatterplot(x = df.columns[4],y = i,data = df,hue = 'quality')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n        plt.show()","d8413937":"plt.figure(figsize=(25,16))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()","15c0231c":"sns.pairplot(df)","111ae8e3":"df1 = df.groupby('quality').agg({'fixed acidity':'mean','volatile acidity' : 'mean', 'citric acid':'mean','residual sugar':'mean',\n                                'free sulfur dioxide':'mean', 'total sulfur dioxide':'mean', 'density':'mean',\n       'pH':'mean', 'sulphates':'mean', 'alcohol':'mean'})\ndf1","a7500711":"px.bar(data_frame=df1.drop('total sulfur dioxide',axis = 1), barmode='group',\n       title = \"<b>Quality wise Analyzing<\/b>\",template=\"plotly_dark\")\n# dropping sulfur acid because we cannot see other bars clearly","8b18eb73":"px.bar(data_frame=df1, barmode='group',\n       title = \"<b>Quality wise Analyzing<\/b>\",template=\"plotly_dark\")","08203da1":"# for quality 3\nqual_3 = df[(df['quality'] > 2) & (df['quality'] < 4)]\n\n# not many quality 3 wines","78668b4e":"qual_3.describe()","5f392857":"qual_3.corr()","d65dfe01":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_3.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_3 wines","6b5072bd":"sns.pairplot(qual_3)","d2de59f3":"# for quality 4\nqual_4 = df[(df['quality'] > 3) & (df['quality'] < 5)]\nqual_4","0265f1d1":"qual_4.describe()","535900f1":"qual_4.corr()","007e5a87":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_4.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_4 wines","6653f570":"sns.pairplot(qual_4)","68a3d5bc":"# for quality 5\nqual_5 = df[(df['quality'] > 4) & (df['quality'] < 6)]\nqual_5\n\n# many qual_5 wines","f1baa83d":"qual_5.describe()","001ce540":"qual_5.corr()","1f20ec76":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_5.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_5 wines","050a3a28":"sns.pairplot(qual_5)","fdb92a71":"# for quality 6\nqual_6 = df[(df['quality'] > 5) & (df['quality'] < 7)]\nqual_6","4e2b68c1":"qual_6.describe()","81c00bd7":"qual_6.corr()","e9505cc7":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_6.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_6 wines","6305fa13":"sns.pairplot(qual_6)","265bda64":"# for quality 7\nqual_7 = df[(df['quality'] > 6) & (df['quality'] < 8)]\nqual_7","75c4b386":"qual_7.describe()","fe6015b7":"qual_7.corr()","182573d1":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_7.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_7 wines","21cc7526":"sns.pairplot(qual_7)","9265c889":"# for quality 8\nqual_8 = df[(df['quality'] > 7) & (df['quality'] < 9)]\nqual_8","24fb2f54":"qual_8.describe()","dadbcda5":"qual_8.corr()","cef8c840":"plt.figure(figsize=(25,25))\nax = sns.heatmap(qual_8.corr(),annot = True, cmap = 'viridis')\nplt.show()\n\n# Heatmap for qual_8 wines","40bbfc36":"sns.pairplot(qual_8)","be6cbf94":"x = df.drop('quality',axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","358630ec":"x = df.drop('quality',axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","1cda5fbd":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(df,i)","39844f77":"# checking null values\ndf.isnull().sum()","8154336e":"#Making binary classificaion for the response variable.\n#Dividing wine as good and bad by giving the limit for the quality\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\ndf['quality'] = pd.cut(df['quality'], bins = bins, labels = group_names)","fd0caf21":"#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()","00c5a450":"#Bad becomes 0 and good becomes 1 \ndf['quality'] = label_quality.fit_transform(df['quality'])","2a685b6d":"df['quality'].value_counts()","9cc43d58":"sns.countplot(df['quality'])\nplt.show()","8ce03c2a":"scaler = StandardScaler()","707c4c0e":"scaler.fit(df.drop('quality',axis = 1))","aeba8c6f":"scaled_features = scaler.transform(df.drop('quality',axis = 1))","c2ead0af":"df_feat = pd.DataFrame(scaled_features,columns = df.columns[:-1])\ndf_feat.head()","a080c8a6":"X = df_feat\ny = df['quality']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n","3ea45b5f":"knn = KNeighborsClassifier(n_neighbors = 2)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\npred","bf095c47":"print(confusion_matrix(y_test,pred))","fd19b6b9":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(classification_report(y_test,pred))","4d486cc5":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","1c18cefd":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","ade3ae80":"print(metrics.accuracy_score(y_test, pred))","b2e644c9":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nforest= RandomForestClassifier(n_estimators =40, random_state = 0)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)","21f0d43c":"print(confusion_matrix(y_test,y_pred))","f08cb14e":"print(metrics.accuracy_score(y_test,y_pred))","c53d1ce9":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\npred_svc = svc.predict(X_test)","21c2e529":"print(classification_report(y_test, pred_svc))","43865cda":"# Loading Dataset","4bb14501":"# Data Preprocessing","2d84bc45":"### now I will again plot scatter plot but this time with hue as quality to see how it varies","bcf45a7b":"# Exploratory Data Analysis using buitin function","5959b6fe":"# Importing Libraries","528bdf04":"## Observations from above plots(remember these are all based on average values of that particular column)\n### irrespective of quality fixed acidity is always above 8 except for quality 4(around 8)\n### quality 3 has highest volatile rate but lowest citric rate\n### quality 8 has lowest volatile rate but highest citric rate\n### irrespective of quality residual sugar is over 2.5\n### quality 3 has more chlorides rate\n### quality 5 has more free sulfer dioxide rate\n### quality 5 has more total sulfer dioxide rate\n### irrespecyive of quality density is same for all (1)\n### all qalities have pH value above 3 \n### sulphates are more in quality 8\n### alcohol is more in quality 8","49569683":"## Now we will analyse each category of quality","ae1674b8":"# Prediction of using RandomForest","0a8366d0":"# Data visualisation using Autoviz","16bb6d55":"# Prediction of using SVC","6249ec47":"# Exploratory Data Analysis","4b389a70":"# Feature Selection","df65035e":"# Count of outliers","dbfb54d4":"### Note all values in rows of df1 are mean of that column. So, we can collectively explain the relations between them","dfc42e63":"#  Feature Scaling","1335b210":"# Data visualisation","1920b0ca":"# Prediction of using KNN"}}