{"cell_type":{"2a97781d":"code","0c71669d":"code","e19be2f1":"code","9de97bf7":"code","cfe9886a":"code","f0b92e0e":"code","081b220f":"code","f4b5f459":"code","367d8a29":"code","f6a84136":"code","b956bf78":"code","f22f8b1e":"code","f931d314":"code","164d179b":"code","aebb13cc":"code","24c4f0ae":"code","38deb968":"code","714170a4":"code","7246c2b2":"code","4fdc35b5":"code","3e634b83":"code","ca08c366":"code","84477e00":"code","48b87a4c":"code","295a3b1f":"code","20712896":"markdown","5e45fb89":"markdown"},"source":{"2a97781d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c71669d":"import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.linear_model import LinearRegression, Ridge, LassoCV\nfrom sklearn.model_selection import cross_val_score\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","e19be2f1":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9de97bf7":"train.shape","cfe9886a":"train.head()","f0b92e0e":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'], \n                      test.loc[:,'MSSubClass':'SaleCondition']))\nall_data.head(10)","081b220f":"all_data.columns","f4b5f459":"all_data.dtypes","367d8a29":"new_price = {\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])}\nprices = pd.DataFrame(new_price)\nmpl.rcParams['figure.figsize'] = (20, 10)\nprices.hist()","f6a84136":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) \nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\nskewed_feats","b956bf78":"all_data[skewed_feats] = np.log1p(all_data[skewed_feats])\nall_data = pd.get_dummies(all_data)\nall_data = all_data.fillna(all_data.mean())\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny_train = train.SalePrice","f22f8b1e":"def rmse_cv(modelo):\n    rmse = np.sqrt(-cross_val_score(modelo, \n                                    X_train, \n                                    y_train, \n                                    scoring = \"neg_mean_squared_error\", \n                                    cv = 5))\n    return(rmse)","f931d314":"modelo_lr = LinearRegression(normalize = False, fit_intercept = True)","164d179b":"modelo_lr.fit(X_train, y_train)","aebb13cc":"error1 = (rmse_cv(modelo_lr).mean()) *100\nprint('This is error 1, linear Regression with no regularization: %0.2f' % error1 + '% error rate')","24c4f0ae":"modelo_ridge = Ridge()","38deb968":"cross_val_score(modelo_ridge, \n                X_train, \n                y_train, \n                scoring = \"neg_mean_squared_error\", \n                cv = 5)","714170a4":"rmse_ridge = np.sqrt(-cross_val_score(modelo_ridge, \n                                      X_train, \n                                      y_train, \n                                      scoring = \"neg_mean_squared_error\", \n                                      cv = 5))\nrmse_ridge","7246c2b2":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]","4fdc35b5":"cv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() for alpha in alphas]\ncv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Valida\u00e7\u00e3o\")\nplt.xlabel(\"Alpha\")\nplt.ylabel(\"RMSE\")","3e634b83":"error2 = (cv_ridge.mean()) *100\nprint('This is error 2, linear Regression RIDGE: %0.2f' % error2 + '% error rate')","ca08c366":"modelo_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y_train)","84477e00":"error3 = (rmse_cv(modelo_lasso).mean()) *100\nprint('This is error 3, linear Regression LASSO: %0.2f' % error3 + '% error rate')","48b87a4c":"coef = pd.Series(modelo_lasso.coef_, index = X_train.columns)\ncoef.head()","295a3b1f":"imp_coef = pd.concat([coef.sort_values().head(10), coef.sort_values().tail(10)])\nmpl.rcParams['figure.figsize'] = (20, 10)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coeficientes no Modelo LASSO\")","20712896":"# Data Fields\n### Here's a brief version of what you'll find in the data description file.\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: $Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","5e45fb89":"# Linear Regression - No Regularization"}}