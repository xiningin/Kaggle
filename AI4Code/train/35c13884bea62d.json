{"cell_type":{"ea491d6b":"code","9d9ae9dc":"code","154e5443":"code","e7e39950":"code","b5a08942":"code","d2de0a3b":"code","ecdfa048":"code","db42cd42":"code","57e1901f":"code","ffc1e916":"code","e019ffaa":"code","1236f853":"code","ecefec66":"code","86164de7":"code","4d41bb67":"code","3ff63cb0":"code","206eec98":"code","9366f019":"code","729257b7":"code","2e8de7c3":"code","95d28278":"code","5481d2ac":"code","bab20063":"code","beb17963":"code","b02cabe9":"code","8a8e19b8":"code","3fc10b03":"code","4593d7fb":"code","d4be40de":"code","3d9dec71":"code","86fc598e":"code","f9b2cbf6":"code","8f8708b7":"code","a6c68a5e":"code","9e8423aa":"code","b71337b3":"code","23f693c0":"code","8ebbc202":"code","6107f980":"code","85eb67c2":"code","53d265cc":"code","913e7939":"code","3dce4fba":"code","d955f700":"code","669ec256":"code","2628f399":"code","6cf1b0dd":"code","fe4a43b6":"code","d5807baa":"code","0561e92a":"code","4d358b61":"code","d7b49263":"code","8208b96f":"code","142bea6d":"code","6361c306":"code","50680d04":"code","02670e9a":"code","3b5073bf":"code","4d46ff2b":"code","cb11bd8a":"code","30162234":"code","d36737f8":"code","f1478b46":"code","f61cd526":"code","425ce00e":"code","a8ac4c4b":"code","28a08ab9":"code","e590c1a2":"code","69c54d78":"code","410ec816":"code","e5a02c10":"code","5d8461d2":"code","75d135e8":"code","ae850e94":"code","26ca5bba":"code","ac721cc3":"code","c1cced4b":"code","acf88529":"code","0b5d46db":"code","6802f90e":"code","660de9ad":"code","ea14150e":"code","a2690629":"markdown","0d82d2f9":"markdown","5e965453":"markdown","bf010926":"markdown","4e31482d":"markdown","87657b62":"markdown","143065b6":"markdown","83dab8c8":"markdown","11c9492a":"markdown","9de48fdd":"markdown","66c0c25a":"markdown","0eac8ca7":"markdown","2cbc438d":"markdown","0bf5d485":"markdown","34205085":"markdown","e9cdf65d":"markdown","347aad8c":"markdown","11d1dbf3":"markdown","47e18cdd":"markdown","f2ce6cc7":"markdown","63db8b7a":"markdown","3d58918f":"markdown","d3a949f6":"markdown","a204b5dc":"markdown","aad1e876":"markdown","c297e8aa":"markdown","96db0b7a":"markdown","2e31533e":"markdown","561fd71d":"markdown","aaf67aad":"markdown","134dba7f":"markdown","ccfb5459":"markdown","db9ae3f8":"markdown","02d7d274":"markdown","352bcfa3":"markdown","95ac93a7":"markdown","683b8467":"markdown","232ba29f":"markdown","c72f1a8d":"markdown","4ade1efa":"markdown","ee936582":"markdown","02ea3fbf":"markdown","a4da043f":"markdown","5f044dbf":"markdown","11cb4f4d":"markdown","6300006b":"markdown","d7598a05":"markdown","3d503a9f":"markdown","eeb9a1df":"markdown","1a47ee7d":"markdown","a1566335":"markdown","4878d746":"markdown","c60706fa":"markdown","0593cba4":"markdown","f270b5df":"markdown","5da62440":"markdown","d5803ab3":"markdown","a97a61ef":"markdown","872a4123":"markdown","1563b6cb":"markdown","5509f055":"markdown","38f5804f":"markdown","96577bc4":"markdown","4cdc06ad":"markdown","12335f44":"markdown","7725073b":"markdown","b70b0807":"markdown","166b685b":"markdown","7dc4fa35":"markdown","ec659db9":"markdown"},"source":{"ea491d6b":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","9d9ae9dc":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","154e5443":"# visulaisation\nfrom matplotlib.pyplot import xticks\n%matplotlib inline","e7e39950":"# Data display coustomization\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', -1)","b5a08942":"# To perform Hierarchical clustering\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import KMeans","d2de0a3b":"# import all libraries and dependencies for machine learning\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import IncrementalPCA\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan","ecdfa048":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","db42cd42":"ngo= pd.read_csv(r\"\/kaggle\/input\/help-international\/Country-data.csv\")\nngo.head()","57e1901f":"word=pd.read_csv(r\"\/kaggle\/input\/help-international\/data-dictionary.csv\")\nword.head(len(word))","ffc1e916":"ngo_dub = ngo.copy()\n\n# Checking for duplicates and dropping the entire duplicate row if any\nngo_dub.drop_duplicates(subset=None, inplace=True)\n","e019ffaa":"ngo_dub.shape","1236f853":"ngo.shape","ecefec66":"ngo.shape","86164de7":"ngo.info()","4d41bb67":"ngo.describe()","3ff63cb0":"(ngo.isnull().sum() * 100 \/ len(ngo)).value_counts(ascending=False)","206eec98":"ngo.isnull().sum().value_counts(ascending=False)","9366f019":"(ngo.isnull().sum(axis=1) * 100 \/ len(ngo)).value_counts(ascending=False)","729257b7":"ngo.isnull().sum(axis=1).value_counts(ascending=False)","2e8de7c3":"# Converting exports,imports and health spending percentages to absolute values.\n\nngo['exports'] = ngo['exports'] * ngo['gdpp']\/100\nngo['imports'] = ngo['imports'] * ngo['gdpp']\/100\nngo['health'] = ngo['health'] * ngo['gdpp']\/100","95d28278":"ngo.head()","5481d2ac":"# Child Mortality Rate : Death of children under 5 years of age per 1000 live births\nplt.figure(figsize = (30,5))\nchild_mort = ngo[['country','child_mort']].sort_values('child_mort', ascending = False)\nax = sns.barplot(x='country', y='child_mort', data= child_mort)\nax.set(xlabel = '', ylabel= 'Child Mortality Rate')\nplt.xticks(rotation=90)\nplt.show()","bab20063":"plt.figure(figsize = (10,5))\nchild_mort_top10 = ngo[['country','child_mort']].sort_values('child_mort', ascending = False).head(10)\nax = sns.barplot(x='country', y='child_mort', data= child_mort_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Child Mortality Rate')\nplt.xticks(rotation=90)\nplt.show()","beb17963":"# Fertility Rate: The number of children that would be born to each woman if the current age-fertility rates remain the same\nplt.figure(figsize = (30,5))\ntotal_fer = ngo[['country','total_fer']].sort_values('total_fer', ascending = False)\nax = sns.barplot(x='country', y='total_fer', data= total_fer)\nax.set(xlabel = '', ylabel= 'Fertility Rate')\nplt.xticks(rotation=90)\nplt.show()\n","b02cabe9":"plt.figure(figsize = (10,5))\ntotal_fer_top10 = ngo[['country','total_fer']].sort_values('total_fer', ascending = False).head(10)\nax = sns.barplot(x='country', y='total_fer', data= total_fer_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Fertility Rate')\nplt.xticks(rotation=90)\nplt.show()","8a8e19b8":"# Life Expectancy: The average number of years a new born child would live if the current mortality patterns are to remain same\nplt.figure(figsize = (32,5))\nlife_expec = ngo[['country','life_expec']].sort_values('life_expec', ascending = True)\nax = sns.barplot(x='country', y='life_expec', data= life_expec)\nax.set(xlabel = '', ylabel= 'Life Expectancy')\nplt.xticks(rotation=90)\nplt.show()","3fc10b03":"plt.figure(figsize = (10,5))\nlife_expec_bottom10 = ngo[['country','life_expec']].sort_values('life_expec', ascending = True).head(10)\nax = sns.barplot(x='country', y='life_expec', data= life_expec_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Life Expectancy')\nplt.xticks(rotation=90)\nplt.show()","4593d7fb":"# Health :Total health spending as %age of Total GDP.\nplt.figure(figsize = (32,5))\nhealth = ngo[['country','health']].sort_values('health', ascending = True)\nax = sns.barplot(x='country', y='health', data= health)\nax.set(xlabel = '', ylabel= 'Health')\nplt.xticks(rotation=90)\nplt.show()","d4be40de":"plt.figure(figsize = (10,5))\nhealth_bottom10 = ngo[['country','health']].sort_values('health', ascending = True).head(10)\nax = sns.barplot(x='country', y='health', data= health_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Health')\nplt.xticks(rotation=90)\nplt.show()","3d9dec71":"# The GDP per capita : Calculated as the Total GDP divided by the total population.\nplt.figure(figsize = (32,5))\ngdpp = ngo[['country','gdpp']].sort_values('gdpp', ascending = True)\nax = sns.barplot(x='country', y='gdpp', data= gdpp)\nax.set(xlabel = '', ylabel= 'GDP per capita')\nplt.xticks(rotation=90)\nplt.show()","86fc598e":"plt.figure(figsize = (10,5))\ngdpp_bottom10 = ngo[['country','gdpp']].sort_values('gdpp', ascending = True).head(10)\nax = sns.barplot(x='country', y='gdpp', data= gdpp_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'GDP per capita')\nplt.xticks(rotation=90)\nplt.show()","f9b2cbf6":"# Per capita Income : Net income per person\nplt.figure(figsize = (32,5))\nincome = ngo[['country','income']].sort_values('income', ascending = True)\nax = sns.barplot(x='country', y='income', data=income)\nax.set(xlabel = '', ylabel= 'Per capita Income')\nplt.xticks(rotation=90)\nplt.show()","8f8708b7":"plt.figure(figsize = (10,5))\nincome_bottom10 = ngo[['country','income']].sort_values('income', ascending = True).head(10)\nax = sns.barplot(x='country', y='income', data= income_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Per capita Income')\nplt.xticks(rotation=90)\nplt.show()","a6c68a5e":"# Inflation: The measurement of the annual growth rate of the Total GDP\nplt.figure(figsize = (32,5))\ninflation = ngo[['country','inflation']].sort_values('inflation', ascending = False)\nax = sns.barplot(x='country', y='inflation', data= inflation)\nax.set(xlabel = '', ylabel= 'Inflation')\nplt.xticks(rotation=90)\nplt.show()","9e8423aa":"plt.figure(figsize = (10,5))\ninflation_top10 = ngo[['country','inflation']].sort_values('inflation', ascending = False).head(10)\nax = sns.barplot(x='country', y='inflation', data= inflation_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Inflation')\nplt.xticks(rotation=90)\nplt.show()","b71337b3":"# Exports: Exports of goods and services. Given as %age of the Total GDP\nplt.figure(figsize = (32,5))\nexports = ngo[['country','exports']].sort_values('exports', ascending = True)\nax = sns.barplot(x='country', y='exports', data= exports)\nax.set(xlabel = '', ylabel= 'Exports')\nplt.xticks(rotation=90)\nplt.show()","23f693c0":"plt.figure(figsize = (10,5))\nexports_bottom10 = ngo[['country','exports']].sort_values('exports', ascending = True).head(10)\nax = sns.barplot(x='country', y='exports', data= exports_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exports')\nplt.xticks(rotation=90)\nplt.show()","8ebbc202":"# Imports: Imports of goods and services. Given as %age of the Total GDP\nplt.figure(figsize = (32,5))\nimports = ngo[['country','imports']].sort_values('imports', ascending = True)\nax = sns.barplot(x='country', y='imports', data= imports)\nax.set(xlabel = '', ylabel= 'Imports')\nplt.xticks(rotation=90)\nplt.show()","6107f980":"plt.figure(figsize = (10,5))\nimports_bottom10 = ngo[['country','imports']].sort_values('imports', ascending = True).head(10)\nax = sns.barplot(x='country', y='imports', data= imports_bottom10)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Imports')\nplt.xticks(rotation=90)\nplt.show()","85eb67c2":"fig, axs = plt.subplots(3,3,figsize = (18,18))\n\n# Child Mortality Rate : Death of children under 5 years of age per 1000 live births\n\ntop5_child_mort = ngo[['country','child_mort']].sort_values('child_mort', ascending = False).head()\nax = sns.barplot(x='country', y='child_mort', data= top5_child_mort, ax = axs[0,0])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Child Mortality Rate')\n\n# Fertility Rate: The number of children that would be born to each woman if the current age-fertility rates remain the same\ntop5_total_fer = ngo[['country','total_fer']].sort_values('total_fer', ascending = False).head()\nax = sns.barplot(x='country', y='total_fer', data= top5_total_fer, ax = axs[0,1])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Fertility Rate')\n\n# Life Expectancy: The average number of years a new born child would live if the current mortality patterns are to remain same\n\nbottom5_life_expec = ngo[['country','life_expec']].sort_values('life_expec', ascending = True).head()\nax = sns.barplot(x='country', y='life_expec', data= bottom5_life_expec, ax = axs[0,2])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Life Expectancy')\n\n# Health :Total health spending as %age of Total GDP.\n\nbottom5_health = ngo[['country','health']].sort_values('health', ascending = True).head()\nax = sns.barplot(x='country', y='health', data= bottom5_health, ax = axs[1,0])\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Health')\n\n# The GDP per capita : Calculated as the Total GDP divided by the total population.\n\nbottom5_gdpp = ngo[['country','gdpp']].sort_values('gdpp', ascending = True).head()\nax = sns.barplot(x='country', y='gdpp', data= bottom5_gdpp, ax = axs[1,1])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'GDP per capita')\n\n# Per capita Income : Net income per person\n\nbottom5_income = ngo[['country','income']].sort_values('income', ascending = True).head()\nax = sns.barplot(x='country', y='income', data= bottom5_income, ax = axs[1,2])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Per capita Income')\n\n\n# Inflation: The measurement of the annual growth rate of the Total GDP\n\ntop5_inflation = ngo[['country','inflation']].sort_values('inflation', ascending = False).head()\nax = sns.barplot(x='country', y='inflation', data= top5_inflation, ax = axs[2,0])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Inflation')\n\n\n# Exports: Exports of goods and services. Given as %age of the Total GDP\n\nbottom5_exports = ngo[['country','exports']].sort_values('exports', ascending = True).head()\nax = sns.barplot(x='country', y='exports', data= bottom5_exports, ax = axs[2,1])\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exports')\n\n\n# Imports: Imports of goods and services. Given as %age of the Total GDP\n\nbottom5_imports = ngo[['country','imports']].sort_values('imports', ascending = True).head()\nax = sns.barplot(x='country', y='imports', data= bottom5_imports, ax = axs[2,2])\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Imports')\n\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation = 90)    \nplt.tight_layout()\nplt.savefig('EDA')\nplt.show()","53d265cc":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(ngo.corr(), annot = True, cmap=\"rainbow\")\nplt.savefig('Correlation')\nplt.show()","913e7939":"sns.pairplot(ngo,corner=True,diag_kind=\"kde\")\nplt.show()","3dce4fba":"# Data before Outlier Treatment \nngo.describe()","d955f700":"f, axes = plt.subplots(3, 3, figsize=(20, 15))\ns=sns.violinplot(y=ngo.child_mort,ax=axes[0, 0])\naxes[0, 0].set_title('Child Mortality Rate')\ns=sns.violinplot(y=ngo.exports,ax=axes[0, 1])\naxes[0, 1].set_title('Exports')\ns=sns.violinplot(y=ngo.health,ax=axes[0, 2])\naxes[0, 2].set_title('Health')\n\ns=sns.violinplot(y=ngo.imports,ax=axes[1, 0])\naxes[1, 0].set_title('Imports')\ns=sns.violinplot(y=ngo.income,ax=axes[1, 1])\naxes[1, 1].set_title('Income per Person')\ns=sns.violinplot(y=ngo.inflation,ax=axes[1, 2])\naxes[1, 2].set_title('Inflation')\n\ns=sns.violinplot(y=ngo.life_expec,ax=axes[2, 0])\naxes[2, 0].set_title('Life Expectancy')\ns=sns.violinplot(y=ngo.total_fer,ax=axes[2, 1])\naxes[2, 1].set_title('Total Fertility')\ns=sns.violinplot(y=ngo.gdpp,ax=axes[2, 2])\naxes[2, 2].set_title('GDP per Capita')\ns.get_figure().savefig('boxplot subplots.png')\nplt.show()","669ec256":"plt.figure(figsize = (20,20))\nfeatures=['child_mort', 'exports', 'health', 'imports', 'income','inflation', 'life_expec', 'total_fer', 'gdpp']\nfor i in enumerate(features):\n    plt.subplot(4,3,i[0]+1)\n    sns.distplot(ngo[i[1]])","2628f399":"Q3 = ngo.exports.quantile(0.99)\nQ1 = ngo.exports.quantile(0.01)\nngo['exports'][ngo['exports']<=Q1]=Q1\nngo['exports'][ngo['exports']>=Q3]=Q3","6cf1b0dd":"Q3 = ngo.imports.quantile(0.99)\nQ1 = ngo.imports.quantile(0.01)\nngo['imports'][ngo['imports']<=Q1]=Q1\nngo['imports'][ngo['imports']>=Q3]=Q3","fe4a43b6":"Q3 = ngo.health.quantile(0.99)\nQ1 = ngo.health.quantile(0.01)\nngo['health'][ngo['health']<=Q1]=Q1\nngo['health'][ngo['health']>=Q3]=Q3","d5807baa":"Q3 = ngo.income.quantile(0.99)\nQ1 = ngo.income.quantile(0.01)\nngo['income'][ngo['income']<=Q1]=Q1\nngo['income'][ngo['income']>=Q3]=Q3","0561e92a":"Q3 = ngo.inflation.quantile(0.99)\nQ1 = ngo.inflation.quantile(0.01)\nngo['inflation'][ngo['inflation']<=Q1]=Q1\nngo['inflation'][ngo['inflation']>=Q3]=Q3","4d358b61":"Q3 = ngo.life_expec.quantile(0.99)\nQ1 = ngo.life_expec.quantile(0.01)\nngo['life_expec'][ngo['life_expec']<=Q1]=Q1\nngo['life_expec'][ngo['life_expec']>=Q3]=Q3","d7b49263":"Q3 = ngo.child_mort.quantile(0.99)\nQ1 = ngo.child_mort.quantile(0.01)\nngo['child_mort'][ngo['child_mort']<=Q1]=Q1\nngo['child_mort'][ngo['child_mort']>=Q3]=Q3","8208b96f":"Q3 = ngo.total_fer.quantile(0.99)\nQ1 = ngo.total_fer.quantile(0.01)\nngo['total_fer'][ngo['total_fer']<=Q1]=Q1\nngo['total_fer'][ngo['total_fer']>=Q3]=Q3","142bea6d":"Q3 = ngo.gdpp.quantile(0.99)\nQ1 = ngo.gdpp.quantile(0.01)\nngo['gdpp'][ngo['gdpp']<=Q1]=Q1\nngo['gdpp'][ngo['gdpp']>=Q3]=Q3","6361c306":"# Data sfter Outlier Treatment \nngo.describe()","50680d04":"f, axes = plt.subplots(3, 3, figsize=(20, 15))\ns=sns.violinplot(y=ngo.child_mort,ax=axes[0, 0])\naxes[0, 0].set_title('Child Mortality Rate')\ns=sns.violinplot(y=ngo.exports,ax=axes[0, 1])\naxes[0, 1].set_title('Exports')\ns=sns.violinplot(y=ngo.health,ax=axes[0, 2])\naxes[0, 2].set_title('Health')\n\ns=sns.violinplot(y=ngo.imports,ax=axes[1, 0])\naxes[1, 0].set_title('Imports')\ns=sns.violinplot(y=ngo.income,ax=axes[1, 1])\naxes[1, 1].set_title('Income per Person')\ns=sns.violinplot(y=ngo.inflation,ax=axes[1, 2])\naxes[1, 2].set_title('Inflation')\n\ns=sns.violinplot(y=ngo.life_expec,ax=axes[2, 0])\naxes[2, 0].set_title('Life Expectancy')\ns=sns.violinplot(y=ngo.total_fer,ax=axes[2, 1])\naxes[2, 1].set_title('Total Fertility')\ns=sns.violinplot(y=ngo.gdpp,ax=axes[2, 2])\naxes[2, 2].set_title('GDP per Capita')\ns.get_figure().savefig('boxplot subplots.png')\nplt.show()","02670e9a":"# Dropping Country field as final dataframe will only contain data columns\n\nngo_drop = ngo.copy()\ncountry = ngo_drop.pop('country')","3b5073bf":"ngo_drop.head()","4d46ff2b":"# Calculating Hopkins score to know whether the data is good for clustering or not.\n\ndef hopkins(X):\n    d = X.shape[1]\n    n = len(X)\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    HS = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(HS):\n        print(ujd, wjd)\n        HS = 0\n \n    return HS\n","cb11bd8a":"# Hopkins score\nHopkins_score=round(hopkins(ngo_drop),2)","30162234":"print(\"{} is a good Hopkins score for Clustering.\".format(Hopkins_score))","d36737f8":"# Standarisation technique for scaling\nscaler = StandardScaler()\nngo_scaled = scaler.fit_transform(ngo_drop)","f1478b46":"ngo_scaled","f61cd526":"ngo_df1 = pd.DataFrame(ngo_scaled, columns = ['child_mort', 'exports', 'health', 'imports', 'income',\n       'inflation', 'life_expec', 'total_fer', 'gdpp'])\nngo_df1.head()","425ce00e":"# Elbow curve method to find the ideal number of clusters.\nclusters=list(range(2,8))\nssd = []\nfor num_clusters in clusters:\n    model_clus = KMeans(n_clusters = num_clusters, max_iter=150,random_state= 50)\n    model_clus.fit(ngo_df1)\n    ssd.append(model_clus.inertia_)\n\nplt.plot(clusters,ssd);","a8ac4c4b":"# Silhouette score analysis to find the ideal number of clusters for K-means clustering\n\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50,random_state= 100)\n    kmeans.fit(ngo_df1)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(ngo_df1, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))","28a08ab9":"#K-means with k=3 clusters\n\ncluster = KMeans(n_clusters=3, max_iter=150, random_state= 50)\ncluster.fit(ngo_df1)","e590c1a2":"# Cluster labels\n\ncluster.labels_","69c54d78":"# Assign the label\n\nngo['Cluster_Id'] = cluster.labels_\nngo.head()","410ec816":"## Number of countries in each cluster\nngo.Cluster_Id.value_counts(ascending=True)","e5a02c10":"# Scatter plot on Original attributes to visualize the spread of the data\n\nplt.figure(figsize = (20,15))\nplt.subplot(3,1,1)\nsns.scatterplot(x = 'income', y = 'child_mort',hue='Cluster_Id',data = ngo,legend='full',palette=\"Set1\")\nplt.subplot(3,1,2)\nsns.scatterplot(x = 'gdpp', y = 'income',hue='Cluster_Id', data = ngo,legend='full',palette=\"Set1\")\nplt.subplot(3,1,3)\nsns.scatterplot(x = 'child_mort', y = 'gdpp',hue='Cluster_Id', data=ngo,legend='full',palette=\"Set1\")\nplt.show()","5d8461d2":" #Violin plot on Original attributes to visualize the spread of the data\n\nfig, axes = plt.subplots(2,2, figsize=(15,12))\n\nsns.violinplot(x = 'Cluster_Id', y = 'child_mort', data = ngo,ax=axes[0][0])\nsns.violinplot(x = 'Cluster_Id', y = 'income', data = ngo,ax=axes[0][1])\nsns.violinplot(x = 'Cluster_Id', y = 'inflation', data=ngo,ax=axes[1][0])\nsns.violinplot(x = 'Cluster_Id', y = 'gdpp', data=ngo,ax=axes[1][1])\nplt.show()","75d135e8":"ngo[['gdpp','income','child_mort','Cluster_Id']].groupby('Cluster_Id').mean()","ae850e94":"ax=ngo[['gdpp','child_mort','income','Cluster_Id']].groupby('Cluster_Id').mean().plot(kind = 'bar',figsize = (15,5))\n\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.yscale('log')\nplt.xticks(rotation=0)\nplt.show();","26ca5bba":"ngo[ngo['Cluster_Id']==1].sort_values(by = ['child_mort','income','gdpp',], ascending = [False, True, True]).head()\n# They are Developed countries as per UN & IMF","ac721cc3":"ngo[ngo['Cluster_Id']==2].sort_values(by = ['child_mort','income','gdpp',], ascending = [False, True, True]).head()\n\n# They are Least developed countries as per UN & IMF","c1cced4b":"ngo[ngo['Cluster_Id']==0].sort_values(by = ['child_mort','income','gdpp',], ascending = [False, True, True]).head()\n# They are Developing countries as per UN & IMF\n\n","acf88529":"FinalListbyKMean=ngo[ngo['Cluster_Id']==2].sort_values(by = ['child_mort','income','gdpp',], ascending = [False, True, True])\nFinalListbyKMean['country']\nFinalListbyKMean.reset_index(drop=True).country[:]","0b5d46db":"# BarPlot for Child Mortality of countries which are in need of aid\ndf_list_cm = pd.DataFrame(FinalListbyKMean.groupby(['country'])['child_mort'].mean().sort_values(ascending = False)).head()\nax=df_list_cm.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Country and Child Mortality')\nplt.xlabel(\"Country\",fontweight = 'bold')\nplt.ylabel(\"Child Mortality\", fontsize = 12, fontweight = 'bold')\nplt.show()","6802f90e":"# BarPlot for Per Capita Income of countries which are in need of aid\n\ndf_list_in = pd.DataFrame(FinalListbyKMean.groupby(['country'])['income'].mean().sort_values(ascending = True)).head()\nax=df_list_in.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Country and Per Capita Income')\nplt.xlabel(\"Country\",fontweight = 'bold')\nplt.ylabel(\"Per Capita Income\", fontsize = 12, fontweight = 'bold')\nplt.show()","660de9ad":"# BarPlot for GDP of countries which are in need of aid\n\ndf_list_gdp =pd.DataFrame(FinalListbyKMean.groupby(['country'])['gdpp'].mean().sort_values(ascending = True)).head()\nax=df_list_gdp.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n\nplt.title('Country and GDP per capita')\nplt.xlabel(\"Country\",fontweight = 'bold')\nplt.ylabel(\"GDP per capita\", fontsize = 12, fontweight = 'bold')\nplt.show()","ea14150e":"# Final countries list\nFinalListbyKMean.reset_index(drop=True).country[:5]","a2690629":"Visualization each columns using violinplot","0d82d2f9":"Top 10 Countries having lowest Imports are from mostly from Developed nations who are **Atma-Nirbhar** aka Self-Reliant, who manufacture locally to support own market or the underdeveloped \/ developing countries who are poor to afford imports due to political \/ economical turmoil","5e965453":"This problem is solved using K-means only. Advaced topic like PCA is not used here.\n\nYou can view notebooks where\n\nClustering using K-means + Hierarchical + PCA : https:\/\/www.kaggle.com\/gauravduttakiit\/clustering-using-k-means-hierarchical-pca\nCategorize countries using K-means + PCA : https:\/\/www.kaggle.com\/gauravduttakiit\/categorize-countries-using-k-means-pca\nCategorize countries using Hierarchical + PCA : https:\/\/www.kaggle.com\/gauravduttakiit\/categorize-countries-using-hierarchical-pca","bf010926":"As the IMF and the UN, world is divided into 3 major classification for countries on scale of development.\n- Developed countries\n- Developing countries\n- Least developed countries\n\n","4e31482d":"## Data Preparation","87657b62":"## Univariate Analysis","143065b6":"# Model Building","83dab8c8":"### Plot histogram for each continous variables","11c9492a":"## Data Loading","9de48fdd":"####  We will have a look on the lowest 5 countries for each factor. ","66c0c25a":"## K- means Clustering","0eac8ca7":"Most software packages use SVD to compute the principal components and assume that the data is scaled and centred, so it is important to do standardisation\/normalisation. There are two common ways of rescaling:\n\n- Min-Max scaling\n- Standardisation (mean-0, sigma-1)\n\n\nHere, we will use Standardisation Scaling.","2cbc438d":"## Cluster Profiling","0bf5d485":"**We use Percentile Capping (Winsorization) for outliers handling**\n- Winsorizing or winsorization is the transformation of statistics by limiting extreme values in the statistical data to reduce the effect of possibly spurious outliers.\n- In layman's terms, Winsorization (Winsorizing) at 1st and 99th percentile implies values that are less than the value at 1st percentile are replaced by the value at 1st percentile, and values that are greater than the value at 99th percentile are replaced by the value at 99th percentile. \n","34205085":"silhouette score=(p\u2212q)\/max(p,q)\n \n**p**  is the mean distance to the points in the nearest cluster that the data point is not a part of\n\n**q**  is the mean intra-cluster distance to all the points in its own cluster.\n\nThe value of the silhouette score range lies between -1 to 1.\n\nA score closer to 1 indicates that the data point is very similar to other data points in the cluster,\n\nA score closer to -1 indicates that the data point is not similar to the data points in its cluster.","e9cdf65d":"Top 10 Countries having highest Fertility Rate are places where people are poorest in all.","347aad8c":"We are able to see how Imports is distributed across the all countries. Focus on the objective of the task.","11d1dbf3":"We are able to see how Fertility Rate is distributed across the all countries.","47e18cdd":"We are able to see how Life Expectancy is distributed across the all countries. Focus on the objective of the task.","f2ce6cc7":"# Data Collected \/ Received","63db8b7a":"## Duplicate Check","3d58918f":"# Exploratory Data Analytics","d3a949f6":"### Derived Metrices","a204b5dc":"Top 10 Countries having highest Inflation are from countries where there is social \/ political unrest in progress","aad1e876":"We are able to see how Per capita Income is distributed across the all countries. Focus on the objective of the task.","c297e8aa":"A fundamental step for any unsupervised algorithm is to determine the optimal number of clusters into which the data may be clustered. The Elbow Method is one of the most popular methods to determine this optimal value of k.","96db0b7a":"### Null Percentage: Rows","2e31533e":"My main task is to cluster the countries by the factors mentioned above and then present the solution. The following approach is suggested :\n\n- Start off with the necessary data inspection and EDA tasks suitable for this dataset - data cleaning, univariate analysis, bivariate analysis etc.\n\n\n\n\n- **Outlier Analysis:** We must perform the Outlier Analysis on the dataset. However, We do have the flexibility of not removing the outliers if it suits the business needs or a lot of countries are getting removed. Hence, all we need to do is find the outliers in the dataset, and then choose whether to keep them or remove them depending on the results We get.\n\n\n- Try both K-means on this dataset to create the clusters. \n\n\n- Analyse the clusters and identify the ones which are in dire need of aid. We can analyse the clusters by comparing how these three variables - [**gdpp, child_mort and income**] vary for each cluster of countries to recognise and differentiate the clusters of developed countries from the clusters of under-developed countries.\n\n\n- Also, We need to perform visualisations on the clusters that have been formed.  We can do this by choosing any two of the three variables mentioned above on the X-Y axes and plotting a scatter plot of all the countries and differentiating the clusters. Make sure We create visualisations for all the three pairs. We can also choose other types of plots like boxplots, etc. \n\n\n- K-means should be reported back to the CEO since they depend upon the preceding analysis as well. Here, make sure that We report back at least 5 countries which are in direst need of aid from the analysis work that we perform.","561fd71d":"# Data Preparation","aaf67aad":"Top 10 Countries having highest Child Mortality Rate are present in **Africa** having poor healthcare facilities.","134dba7f":"Top 10 Countries having lowest Life Expectancy are places where healthcare system is not available or efficient.","ccfb5459":"### Null Percentage: Columns","db9ae3f8":"We are able to see how GDP per capita is distributed across the all countries. Focus on the objective of the task.","02d7d274":"## Data Cleaning","352bcfa3":"From the business understanding we have learnt that **Child_Mortality, Income, Gdpp** are some important factors which decides the development of any country. Hence, we will proceed with analyzing these 3 components to build some meaningful clusters.","95ac93a7":"## Silhouette Analysis","683b8467":"There is atleast one outlier in all the features\n- In case of gdpp and health, there are too many outliers.\n- Since we have limited number of countries(167), removing these outliers would shrink the shape of data and the under-developed countries which are in actual dire need may not contribute to the dataset.","232ba29f":"# Introduction ","c72f1a8d":"We are able to see how Total health spending is distributed across the all countries. Focus on the objective of the task.","4ade1efa":"## Data Inspection","ee936582":"There are no missing \/ Null values either in columns or rows","02ea3fbf":"It seems there are good number of countries in each clusters.","a4da043f":"### Elbow Curve to get the right number of Clusters","5f044dbf":"Top 10 Countries having lowest GDP per capita are from East Africa","11cb4f4d":"### Null Count: Columns","6300006b":"We are able to see how Child Mortality Rate is distributed across the all countries. Focus on the objective of the task.","d7598a05":"- child_mortality and life_expentency are highly correlated with correlation of -0.89\n- child_mortality and total_fertility are highly correlated with correlation of 0.85\n- imports and exports are highly correlated with correlation of 0.99\n- life_expentency and total_fertility are highly correlated with correlation of -0.76","3d503a9f":"The datasets containing those socio-economic factors and the corresponding data dictionary are provided.","eeb9a1df":"# Final List of countries which are in need of the aid based on socio-economic factors.","1a47ee7d":"## Rescaling the Features","a1566335":"Top 10 Countries having lowest health spending are mix bag of countries where per Capita income is very high or involved in unrest activities.","4878d746":"# Objectives","c60706fa":"The Hopkins statistic (introduced by Brian Hopkins and John Gordon Skellam) is a way of measuring the cluster tendency of a data set.It acts as a statistical hypothesis test where the null hypothesis is that the data is generated by a Poisson point process and are thus uniformly randomly distributed. A value close to 1 tends to indicate the data is highly clustered, random data will tend to result in values around 0.5, and uniformly distributed data will tend to result in values close to 0.\n\n\u2022\tIf the value is between {0.01, ...,0.3}, the data is regularly spaced.\n\n\u2022\tIf the value is around 0.5, it is random.\n\n\u2022\tIf the value is between {0.7, ..., 0.99}, it has a high tendency to cluster.","0593cba4":"K-means clustering is one of the simplest and popular unsupervised machine learning algorithms.\n\nThe algorithm works as follows:\n\nFirst we initialize k points, called means, randomly. We categorize each item to its closest mean and we update the mean\u2019s coordinates, which are the averages of the items categorized in that mean so far. We repeat the process for a given number of iterations and at the end, we have our clusters.","f270b5df":"## Data Dictionary","5da62440":"We are able to see how Exports is distributed across the all countries. Focus on the objective of the task.","d5803ab3":"# Finding the Optimal Number of Clusters","a97a61ef":"Top 10 Countries having lowest Per capita Income are from East Africa","872a4123":"### Null Count: Rows","1563b6cb":"Deducing imports,exports and health spending from percentage values to actual values of their GDP per capita .Because the percentage values don't give a clear picture of that country. For example few coutries Austria and Belarus have almost same exports % but their gdpp has a huge gap which doesn't give an accurate idea of which country is more developed than the other.","5509f055":"Top 10 Countries having lowest Exports are from mostly from underdeveloped \/ developing countries ","38f5804f":"We are able to see how Inflation is distributed across the all countries. Focus on the objective of the task.","96577bc4":"5 reasons why we used a violin graph over boxplot\n- Violin graph is like box plot, but better\n- Violin graph is like density plot, but much useful\n- Violin graph is visually intuitive and attractive\n- Violin graph is non-parametric\n- There are many ways to use violin graphs","4cdc06ad":"## Hopkins Statistics Test","12335f44":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","7725073b":"## Outlier Analysis","b70b0807":"**HELP International** is an international humanitarian NGO that is committed to fighting poverty and providing the people of backward countries with basic amenities and relief during the time of disasters and natural calamities. It runs a lot of operational projects from time to time along with advocacy drives to raise awareness as well as for funding purposes.\n\n \n\nAfter the recent funding programmes, they have been able to raise around $ 10 million. Now the CEO of the NGO needs to decide how to use this money strategically and effectively. The significant issues that come while making this decision are mostly related to choosing the countries that are in the direst need of aid. \n\n\n\nAnd this is where I come in as a data analyst. My job is to categorise the countries using some socio-economic and health factors that determine the overall development of the country. Then I  need to suggest the countries which the CEO needs to focus on the most. ","166b685b":"We will opt for 3 as cluster = 2 is not making sense in decison making.","7dc4fa35":"Looking at the above elbow curve it looks good to proceed with 3 clusters.","ec659db9":"We need to choose the countries that are in the direst need of aid. Hence, we need to identify those countries with using some socio-economic and health factors that determine the overall development of the country.\n"}}