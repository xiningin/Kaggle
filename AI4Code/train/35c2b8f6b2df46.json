{"cell_type":{"4782ae24":"code","07c38831":"code","85070052":"code","b77fe07e":"code","0a214ee3":"code","82fadcd4":"code","6e962d15":"code","eb4d7233":"code","c6bae4da":"code","6195d4c7":"code","b4d64823":"code","dba5f551":"code","a37ba5e6":"code","54d2f99a":"code","d4d1c4c8":"code","f06d0c5c":"code","231559a9":"code","d2dd7a98":"markdown","d252bc91":"markdown","5a47310c":"markdown","21c7fc79":"markdown","5697a9df":"markdown"},"source":{"4782ae24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","07c38831":"data = pd.read_excel('\/kaggle\/input\/bank-loan-modelling\/Bank_Personal_Loan_Modelling.xlsx','Data')\ndata.columns = [\"ID\",\"Age\",\"Experience\",\"Income\",\"ZIPCode\",\"Family\",\"CCAvg\",\"Education\",\"Mortgage\",\"PersonalLoan\",\"SecuritiesAccount\",\"CDAccount\",\"Online\",\"CreditCard\"]","85070052":"data.head()","b77fe07e":"#Missing Or Null data points\ndata.isnull().sum()\ndata.isna().sum()","0a214ee3":"data.shape","82fadcd4":"data.describe().transpose()","6e962d15":"data.nunique()","eb4d7233":"# there are 52 records with negative experience. Before proceeding any further we need to clean the same\ndata[data['Experience'] < 0]['Experience'].count()","c6bae4da":"#clean the negative variable\ndfExp = data.loc[data['Experience'] >0]\nnegExp = data.Experience < 0\ncolumn_name = 'Experience'\nmylist = data.loc[negExp]['ID'].tolist() # getting the customer ID who has negative experience","6195d4c7":"# there are 52 records with negative experience\nnegExp.value_counts()","b4d64823":"for id in mylist:\n    age = data.loc[np.where(data['ID']==id)][\"Age\"].tolist()[0]\n    education = data.loc[np.where(data['ID']==id)][\"Education\"].tolist()[0]\n    df_filtered = dfExp[(dfExp.Age == age) & (dfExp.Education == education)]\n    exp = df_filtered['Experience'].median()\n    data.loc[data.loc[np.where(data['ID']==id)].index, 'Experience'] = exp","dba5f551":"# checking if there are records with negative experience\ndata[data['Experience'] < 0]['Experience'].count()","a37ba5e6":"data.describe().transpose()","54d2f99a":"x=data.iloc[:,[1,3,4,5,6,7,8,10,11,12,13]].values\ny=data.iloc[:,9].values","d4d1c4c8":"# Divide the data as train and test dataset\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=4)\nx_train.shape","f06d0c5c":"#modelling SVM\nfrom sklearn import svm\nclassifier=svm.SVC(kernel='rbf',gamma='auto',C=1)\nclassifier.fit(x_train,y_train)\ny_predict=classifier.predict(x_test)\n\n#Evaluation \nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predict))\n\n#Accuracy of our model.\nfrom sklearn.metrics import confusion_matrix\nc=confusion_matrix(y_test,y_predict)\nprint(c)\nAccuracy=sum(np.diag(c))\/(np.sum(c))\nAccuracy","231559a9":"from sklearn import svm\nclassifier=svm.SVC(kernel='linear',gamma='auto',C=1)\nclassifier.fit(x_train,y_train)\ny_predict=classifier.predict(x_test)\n\n#Evaluation \nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predict))\n\n#Accuracy of our model.\nfrom sklearn.metrics import confusion_matrix\nc=confusion_matrix(y_test,y_predict)\nprint(c)\nAccuracy=sum(np.diag(c))\/(np.sum(c))\nAccuracy","d2dd7a98":"Information on the features or attributes\n\n\nThe attributes can be divided accordingly :\n\nThe variable ID does not add any interesting information. There is no association between a person's customer ID andloan, also it does not provide any general conclusion for future potential loan customers. We can neglect this information for our model prediction.\n\n\nThe binary category have five variables as below:\nPersonal Loan - Did this customer accept the personal loan offered in the last campaign? This is our target variable\nSecurities Account - Does the customer have a securities account with the bank?\nCD Account - Does the customer have a certificate of deposit (CD) account with the bank?\nOnline - Does the customer use internet banking facilities?\nCredit Card - Does the customer use a credit card issued by UniversalBank?\n\n\nInterval variables are as below:\nAge - Age of the customer\nExperience - Years of experience\nIncome - Annual income in dollars\nCCAvg - Average credit card spending\nMortage - Value of House Mortgage\n\n\nOrdinal Categorical Variables are:\nFamily - Family size of the customer\nEducation - education level of the customer\n\n\nThe nominal variable is :\nID\nZip Code","d252bc91":"Accuracy slightly increased to 92.08%","5a47310c":"> The following code does the below steps:\n\nFor the record with the ID, get the value of Age column\nFor the record with the ID, get the value of Education column\nFilter the records matching the above criteria from the data frame which has records with positive experience and take the median\nApply the median back to the location which had negative experience","21c7fc79":"Lets implement kernal SVM","5697a9df":"Accuracy came out to be 91.2%"}}