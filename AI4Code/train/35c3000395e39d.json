{"cell_type":{"12158ccf":"code","730a360e":"code","c08a56f0":"code","5a70829e":"code","39f5d37f":"code","2191b799":"code","58743b5e":"code","20dbd3dc":"code","52f67466":"code","73482bde":"code","ee0d3480":"code","08a524b1":"code","cb121574":"code","293c3b11":"code","96023812":"code","0f5f5d90":"code","eff0d607":"code","9bae2bc1":"code","9bb35c1f":"code","be68fab7":"code","fbb62db6":"code","c4e6b9b2":"code","7463acfd":"code","2d242fe8":"code","0b995aa3":"code","cdbb8434":"code","53cd09e1":"code","2bf8445c":"code","cf237677":"code","72659156":"code","0820a014":"code","5d755d2c":"code","8c5d30cd":"code","6a21c028":"code","0da648c9":"code","0baff8e0":"code","e02b25c6":"code","ff22cab2":"code","9dac2714":"code","7c945872":"code","4dfd1acc":"code","e43dde4c":"code","4a8e9890":"code","d7a17476":"code","e5e73867":"code","33f4b1ee":"code","be97e421":"code","3087033b":"code","98ade0a3":"code","f83ae57f":"code","3ebeb4b8":"code","7fa1e4b3":"code","a824a41e":"code","5b4548d1":"code","84b27db6":"code","c0cbdf84":"code","2990523d":"code","80138a37":"code","dd1ecf62":"code","c6117e00":"code","deed2b8d":"code","33d9cec6":"code","bcaa1cbb":"code","a6d1d10a":"code","422e8971":"code","3d828ad5":"code","7cffa431":"code","5da54933":"code","f5fdbf22":"code","3e4d3ef0":"code","17a89814":"code","52ebe17a":"code","4bbcb261":"code","9232ee4b":"code","82776fea":"code","b68dcf17":"code","7978b2a1":"code","bcb0bda6":"code","59eb106e":"code","90fd69cb":"code","35232604":"code","cfff2976":"code","29c3a5c1":"code","dad0ca38":"code","adb128e4":"code","71912389":"code","e0cb3b63":"code","2f9351ce":"code","2ce0838f":"code","f5d8a8e4":"code","8d23f68e":"code","d8c17351":"code","4343a846":"code","601654c7":"code","32369482":"code","b4e50d26":"code","bf4421fa":"code","0be4e9b2":"markdown","27f7f543":"markdown","12a8dbdb":"markdown","f9097420":"markdown","c16cf5af":"markdown","447d1c36":"markdown","56aef7ce":"markdown","8e0c5562":"markdown","2316080e":"markdown","336f2c2b":"markdown","b3e034f0":"markdown","36ea5b38":"markdown","42718d36":"markdown","eabca8fe":"markdown","43a66cae":"markdown","67893e7e":"markdown","6e81f79c":"markdown","e64ad813":"markdown","fc46f750":"markdown","c1fadd0f":"markdown","2f0aa068":"markdown","aaed9e6b":"markdown","7fa1303b":"markdown","9bc26562":"markdown","c9a191a6":"markdown","59e371fc":"markdown","abcde906":"markdown","d218c5f0":"markdown","885367f0":"markdown","79351c09":"markdown","caca7f85":"markdown","18b0c3fa":"markdown","28beeaad":"markdown","6351c282":"markdown","42af1c14":"markdown","61e8da58":"markdown","e4298de7":"markdown","9dc1cdd3":"markdown","01b6deae":"markdown","9e623723":"markdown"},"source":{"12158ccf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","730a360e":"data = pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","c08a56f0":"data.head()","5a70829e":"data.shape","39f5d37f":"data.info()                                                  ## data type of each column, missing values, shape of table..","2191b799":"data.TotalCharges=pd.to_numeric(data.TotalCharges,errors='coerce')","58743b5e":"data.describe(include=[np.object])","20dbd3dc":"col_names=list(data.columns)","52f67466":"col_names.remove('customerID')","73482bde":"col_names.remove('tenure')\ncol_names.remove('MonthlyCharges')\ncol_names.remove('TotalCharges')","ee0d3480":"col_names","08a524b1":"for i in col_names:\n    j=data[i].value_counts()\n    print('-----------------------------------')\n    print(j)","cb121574":"for m in col_names:\n    data[m].hist()\n    plt.show()","293c3b11":"data.describe(include=[np.number])","96023812":"data.info()                                     ## Check the Missing Value","0f5f5d90":"data.isnull().sum()                               ## Check the number missing value","eff0d607":"## Calculate the median of the column\n\nq=data.TotalCharges.quantile([0.1,0.5,0.9])","9bae2bc1":"type(q)                                                                                 ## one Dimensional labelled Array","9bb35c1f":"q","be68fab7":"TC_median=q[.5]","fbb62db6":"TC_median","c4e6b9b2":"#data.loc[null_value].index             ## Indexes of the Missing Values","7463acfd":"column_names=list(data.columns)\ncolumn_names","2d242fe8":"column_names[18:20]","0b995aa3":"plt.scatter(data.MonthlyCharges,data.TotalCharges, alpha=0.1)\nplt.xlabel(column_names[18])\nplt.ylabel(column_names[19])","cdbb8434":"plt.scatter(data.tenure,data.TotalCharges, alpha=0.01)\nplt.xlabel(column_names[5])\nplt.ylabel(column_names[19])","53cd09e1":"data.TotalCharges =  data.TotalCharges.fillna(TC_median)           ","2bf8445c":"data.info()","cf237677":"data.boxplot(column=['MonthlyCharges','tenure'])","72659156":"data.boxplot(column='TotalCharges')","0820a014":"sns.kdeplot(data.MonthlyCharges)","5d755d2c":"print(data[['MonthlyCharges','TotalCharges','tenure']].corr())","8c5d30cd":"print(data.corr())","6a21c028":"data_copy=data\ndata_copy=data_copy.drop(columns=['customerID', 'TotalCharges'])","0da648c9":"data_dummy=pd.get_dummies(data_copy,drop_first=True)","0baff8e0":"len(data_dummy.columns)","e02b25c6":"data_dummy.head()","ff22cab2":"X=data_dummy.iloc[:,0:29]","9dac2714":"y=data_dummy.iloc[:,29]","7c945872":"from sklearn.model_selection import train_test_split","4dfd1acc":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)","e43dde4c":"from sklearn.preprocessing import StandardScaler","4a8e9890":"sc=StandardScaler()","d7a17476":"X_train=sc.fit_transform(X_train)","e5e73867":"X_test=sc.transform(X_test)","33f4b1ee":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","be97e421":"logreg = LogisticRegression()","3087033b":"logreg.fit(X_train, y_train)","98ade0a3":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","f83ae57f":"y_pred1 = logreg.predict(X_train)\nprint('Accuracy of logistic regression classifier on train set: {:.2f}'.format(logreg.score(X_train, y_train)))","3ebeb4b8":"from sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nmodelCV = LogisticRegression()\nscoring = 'accuracy'\nresults = model_selection.cross_val_score(modelCV, X_train, y_train, cv=kfold, scoring=scoring)\nprint(\"10-fold cross validation average accuracy: %.3f\" % (results.mean()))","7fa1e4b3":"results.mean()","a824a41e":"results.std()","5b4548d1":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))","84b27db6":"logit_roc_auc","c0cbdf84":"fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","2990523d":"from sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score","80138a37":"print('recall score = ',recall_score(y_test,y_pred))\nprint('precision score = ',precision_score(y_test,y_pred))","dd1ecf62":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","c6117e00":"from sklearn.metrics import classification_report\nprint(classification_report(y_train,y_pred1))","deed2b8d":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","33d9cec6":"from sklearn.model_selection import GridSearchCV","bcaa1cbb":"# Create logistic regression instance\nlogistic = LogisticRegression()","a6d1d10a":"# Regularization penalty space\npenalty = ['l1', 'l2']\n\n# Regularization hyperparameter space\nC = np.logspace(0, 4, 10)","422e8971":"# Create hyperparameter options\nhyperparameters = dict(C=C, penalty=penalty)","3d828ad5":"# Create grid search using 5-fold cross validation\nclf = GridSearchCV(logistic, hyperparameters, cv=5, verbose=0)","7cffa431":"# Fit grid search\nbest_model = clf.fit(X_train, y_train)","5da54933":"print('Best Penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('Best C:', best_model.best_estimator_.get_params()['C'])","f5fdbf22":"y_pred_GCV = best_model.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(best_model.score(X_test, y_test)))","3e4d3ef0":"y_pred_GCV = best_model.predict(X_train)\nprint('Accuracy of logistic regression classifier on train set: {:.2f}'.format(best_model.score(X_train, y_train)))","17a89814":"from sklearn.ensemble import RandomForestClassifier","52ebe17a":"# Create random forest classifer object that uses entropy\nrfc = RandomForestClassifier(criterion='entropy', random_state=0, n_jobs=-1,n_estimators=200,max_depth=11)\n\n# Train model\nrfc_model = rfc.fit(X_train, y_train)\n              \n# Predict    \ny_pred_rfc=rfc_model.predict(X_test)","4bbcb261":"print('Accuracy of random forest classifier on test set: {:.2f}'.format(rfc_model.score(X_test, y_test)))","9232ee4b":"print(classification_report(y_test,y_pred_rfc))","82776fea":"# Create a series with feature importance \n\nrfc_model.feature_importances_","b68dcf17":"rfc_imp=list(rfc_model.feature_importances_)","7978b2a1":"rfc_colname=list(X.columns)","bcb0bda6":"rfc_dict={'Column_Names_rfc':rfc_colname,'feature_imp_rfc':rfc_imp}","59eb106e":"rfc_feature_imp=pd.DataFrame(rfc_dict)","90fd69cb":"rfc_feature_rank=rfc_feature_imp.sort_values(by='feature_imp_rfc',ascending = False)","35232604":"rfc_feature_rank","cfff2976":"from sklearn.feature_selection import RFE","29c3a5c1":"model_rfe=LogisticRegression()","dad0ca38":"rfe=RFE(model_rfe,1)","adb128e4":"rfe_fit=rfe.fit(X_train,y_train)","71912389":"rfe_fit.n_features_","e0cb3b63":"rfe_fit.ranking_","2f9351ce":"rank=list(rfe_fit.ranking_)","2ce0838f":"X.columns","f5d8a8e4":"col_nm=list(X.columns)","8d23f68e":"dict_rank={'Column_Name': col_nm,'Ranking':rank}","d8c17351":"df_rank=pd.DataFrame(dict_rank)","4343a846":"df_rank.sort_values('Ranking')","601654c7":"y_pred_list=list(y_pred)","32369482":"y_prob=logreg.predict_proba(X_test)","b4e50d26":"y_prob_list=list(y_prob)","bf4421fa":"pd.DataFrame(y_prob_list,columns=['No_Churn','Churn']).sort_values(by='Churn', ascending=False).head(20)","0be4e9b2":"# Content Analysis","27f7f543":"## there are no outliers.","12a8dbdb":"#### Confusion Matrix","f9097420":"### Check for Accuracy","c16cf5af":"# Univariate Analysis","447d1c36":"#### Replace \/Impute the Missing Value.","56aef7ce":"## RFE Recursive Feature Elimination","8e0c5562":"## OBJECTIVE: Predict churn to retain customers. \n1. Calculation of Churn Probability and ranking of CustomerIds based on the Prob(Churn)\n2. Ranking of Features","2316080e":"### Feature Scaling","336f2c2b":" \n1. Tenure and Total Charges are highly Correlated therefore I will drop Total Charges and keep Tenure.\n2. MonthlyCharges and TotalCharges were also highly correlated but we have dropped the TotalCharges, thus now only tenure and \n   MonthlyCharges are left as Numeric Variables. Both of the remaining variables are not highly correlated.","b3e034f0":"# Missing Value Treatment","36ea5b38":"### ROC Curve","42718d36":"## Churn Probability","eabca8fe":"## Correlation Analysis","43a66cae":"#### What are the levels and its distribution within each Categorical Column","67893e7e":"# OUTLIER Treatment","6e81f79c":"### Precision and Recall","e64ad813":"#### Where are the missing value??","fc46f750":"# Data Pre-Processing","c1fadd0f":"#### TARGET VARIABLE","2f0aa068":"Column TotalCharges has 11 Missing Values","aaed9e6b":"## Create Dummy Variables","7fa1303b":"### Random Forest","9bc26562":"#### PREDICTORS","c9a191a6":"#                                       Telco Customer Churn\n#                       Focused customer retention programs","59e371fc":"## Feature Selection based on Random Forest and Recursive Feature Elimination","abcde906":"##### Classification Report on Test Set","d218c5f0":"### Test Train Split","885367f0":"### Univariate Analysis of the Numeric type Variables","79351c09":"#### Convert TotalCharges column to numeric","caca7f85":"#### Get the data","18b0c3fa":"### Univariate Analysis for Non-Numeric\/Categorical type Variables","28beeaad":"##### Classification Report on Training Set","6351c282":"SUMMARY:\n\n1. There are total 7043 Rows and 21 Columns.\n\n2. There are 4 Numeric and 17 Non Numeric type variables\/columns.\n\n3. TotalCharges is being treated as Non Numeric. Thus it need be converted into numeric.","42af1c14":"### HyperParameter Tuning using GridSearchCV","61e8da58":"### K Fold Cross Validation","e4298de7":"#### Replace the missing Value with Median","9dc1cdd3":"### Create the model","01b6deae":"# Building a Predictive Model","9e623723":"#### Ranking of Predictor Variables Based on their importance in predicting the Churn"}}