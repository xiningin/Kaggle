{"cell_type":{"00362b56":"code","e923f5d2":"code","cb92d1a4":"code","e3694e57":"code","07616b0e":"code","4e85abcd":"code","e9c96d4d":"code","c5ad7fff":"code","0bc3f060":"code","2c820263":"code","b36fe737":"code","0b4fc1c8":"code","852dadca":"code","8c30bbce":"code","14665e13":"code","1b42febb":"code","850bd438":"code","89184374":"code","757082d2":"code","aa106b04":"code","407f3a21":"code","4e2fae03":"code","f53f7254":"code","4d2a8e2f":"code","82847149":"code","14dda9e0":"code","97587a4c":"code","0763f2e8":"code","9ce91990":"code","36954768":"code","393dc5d3":"code","99964839":"code","87daa85f":"code","bca97368":"code","9d5dbfac":"code","8efa8093":"code","e9b1679b":"code","134a77a7":"code","f9283599":"code","f6ad45e3":"code","394cf092":"code","d47e64cc":"code","97bc90a9":"code","663467e0":"code","95cf35a1":"code","414ad675":"code","aaf93469":"code","a7518e8c":"code","7ead5e72":"code","824db052":"code","bc56903e":"code","d9773a50":"code","8f1459c9":"markdown","91fe61c4":"markdown","27367a30":"markdown","7cde088e":"markdown","de8b978e":"markdown","ad72dfbd":"markdown","cd5572e4":"markdown","a2808a7e":"markdown","e1686f2e":"markdown","1a302734":"markdown","f45e3605":"markdown","10b3769a":"markdown","fc7e17de":"markdown","913c1da2":"markdown","a659be17":"markdown","7e26abee":"markdown","e3adcf7c":"markdown","4d6d922f":"markdown","6d495211":"markdown","287ec604":"markdown","54f4b64a":"markdown","97e972ff":"markdown"},"source":{"00362b56":"\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e923f5d2":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","cb92d1a4":"df.shape","e3694e57":"df.head()","07616b0e":"df.tail()","4e85abcd":"df.info()","e9c96d4d":"df.describe()","c5ad7fff":"plt.figure(figsize=(15,6))\nsns.countplot(x='age',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","0bc3f060":"plt.figure(figsize=(15,6))\nsns.countplot(x='anaemia',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","2c820263":"plt.figure(figsize=(15,6))\nsns.barplot(y='creatinine_phosphokinase',x='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","b36fe737":"plt.figure(figsize=(15,6))\nsns.countplot(x='diabetes',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","0b4fc1c8":"plt.figure(figsize=(15,6))\nsns.countplot(x='ejection_fraction',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","852dadca":"plt.figure(figsize=(15,6))\nsns.countplot(x='high_blood_pressure',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","8c30bbce":"plt.figure(figsize=(15,6))\nsns.barplot(y='platelets',x='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","14665e13":"plt.figure(figsize=(15,6))\nsns.countplot(x='serum_creatinine',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","1b42febb":"plt.figure(figsize=(15,6))\nsns.violinplot(y='serum_sodium',x='sex',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","850bd438":"plt.figure(figsize=(15,6))\nsns.countplot(x='smoking',hue='DEATH_EVENT',data=df)\nplt.xticks(rotation=45)","89184374":"plt.figure(figsize=(15,6))\nsns.barplot(y='time',x='DEATH_EVENT',hue='sex',data=df)\nplt.xticks(rotation=45)","757082d2":"plt.figure(figsize=(15,6))\ncorr = df.corr()\nsns.heatmap(corr,annot=True)","aa106b04":"fig=plt.figure(figsize=(12,18))\nfor i in range (len(df.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.boxplot(y=df.iloc[:,i])\n    \nplt.tight_layout()\nplt.show()\n","407f3a21":"Q1_ejectionfraction=df['ejection_fraction'].quantile(.25)\nQ3_ejectionfraction=df['ejection_fraction'].quantile(.75)\nIQR_ejectionfraction=Q3_ejectionfraction-Q1_ejectionfraction\nUpperLimit=Q3_ejectionfraction + 1.5*IQR_ejectionfraction\nLowerLimit=Q1_ejectionfraction-1.5*IQR_ejectionfraction","4e2fae03":"print('lower',LowerLimit)\nprint('Upper',UpperLimit)\nprint('Q1',Q1_ejectionfraction)\nprint('Q3',Q3_ejectionfraction)","f53f7254":"df['ejection_fraction']=np.where(df['ejection_fraction']>UpperLimit,UpperLimit,df['ejection_fraction'])","4d2a8e2f":"sns.boxplot(x='ejection_fraction',data=df)","82847149":"df[df['serum_creatinine']>8]","14dda9e0":"df.drop(df[df['serum_creatinine']>8].index,inplace=True)","97587a4c":"Q1=df['serum_creatinine'].quantile(.25)\nQ3=df['serum_creatinine'].quantile(.75)\nIQR=Q3-Q1\nUpperLimit=Q3 + 1.5*IQR\nLowerLimit=Q1-1.5*IQR","0763f2e8":"print('lower',LowerLimit)\nprint('Upper',UpperLimit)\nprint('Q1',Q1)\nprint('Q3',Q3)","9ce91990":"df['serum_creatinine']=np.where(df['serum_creatinine']>UpperLimit,UpperLimit,df['serum_creatinine'])","36954768":"sns.boxplot(x='serum_creatinine',data=df)","393dc5d3":"df.shape","99964839":"df[df['serum_sodium']<120]","87daa85f":"df.drop(df[df['serum_sodium']<120].index,inplace=True)","bca97368":"df.shape","9d5dbfac":"Q1=df['serum_sodium'].quantile(.25)\nQ3=df['serum_sodium'].quantile(.75)\nIQR=Q3-Q1\nUpperLimit=Q3 + 1.5*IQR\nLowerLimit=Q1-1.5*IQR","8efa8093":"print('lower',LowerLimit)\nprint('Upper',UpperLimit)\nprint('Q1',Q1)\nprint('Q3',Q3)","e9b1679b":"df['serum_sodium']=np.where(df['serum_sodium']<LowerLimit,LowerLimit,df['serum_sodium'])","134a77a7":"sns.boxplot(x='serum_sodium',data=df)","f9283599":"df_modified = df[['age', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', 'time']]","f6ad45e3":"df_modified","394cf092":"X = df_modified\nY=df['DEATH_EVENT']","d47e64cc":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=.3,random_state=0)","97bc90a9":"X_train.shape","663467e0":"X_test.shape","95cf35a1":"from sklearn.linear_model import LogisticRegression\nmodel1 = LogisticRegression()\nmodel1.fit(X_train,Y_train)\nY_pred = model1.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(Y_test,Y_pred)\nprint('Accuracy is',\"{:.2f}%\".format(100*accuracy))","414ad675":"from sklearn.tree import DecisionTreeClassifier\nmodel2 = DecisionTreeClassifier(criterion='entropy')\nmodel2.fit(X_train,Y_train)\nY_pred = model2.predict(X_test)\naccuracy = accuracy_score(Y_test,Y_pred)\nprint('Accuracy of Decision Tree model is',\"{:.2f}%\".format(100*accuracy))","aaf93469":"from sklearn import *\nmodel3=ensemble.RandomForestClassifier(n_estimators=150,criterion='entropy',\n                                        random_state=0)\nmodel3.fit(X_train,Y_train)\n\nY_pred = model3.predict(X_test)\naccuracy = accuracy_score(Y_test,Y_pred)\n\nprint('Accuracy of Random Forest Model is:',\"{:.2f}%\".format(100*accuracy))","a7518e8c":"model_params = {'n_estimators':[140,145,150,155,160],\n               'max_leaf_nodes':range(10,20),\n               'criterion':['gini','entropy'],\n                'max_depth':range(1,10),\n               'min_impurity_decrease':[0.00005,0.0001,0.0002,0.0005,0.001,0.0015,0.002,0.005,0.01]}\n\nrf_model_improved = ensemble.RandomForestClassifier(random_state=0)\n\nrandom_search_object = model_selection.RandomizedSearchCV(rf_model_improved,model_params,\n                                     n_iter=10,cv=10,random_state=0)\n\nrandom_search_best_model = random_search_object.fit(X_train,Y_train)\n\nY_pred = random_search_best_model.predict(X_test)\n\naccuracy= accuracy_score(Y_test,Y_pred)\n\nprint('Accuracy of Random Forest Model is:',\"{:.2f}%\".format(100*accuracy))\n","7ead5e72":"random_search_best_model.best_params_","824db052":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel4 = KNeighborsClassifier(n_neighbors = 3, metric='euclidean')\n\nmodel4.fit(X_train,Y_train)\n\nY_pred = model4.predict(X_test)\n\naccuracy= accuracy_score(Y_test,Y_pred)\n\nprint('Accuracy of KNN Model is:',\"{:.2f}%\".format(100*accuracy))","bc56903e":"model_params = {'leaf_size':range(1,50),\n               'n_neighbors':range(1,30),\n               'p':[1,2]}\n\nknn_improved = KNeighborsClassifier()\n\ngrid_search_object = model_selection.GridSearchCV(knn_improved, model_params,cv=5)\n\ngrid_search_best_model = grid_search_object.fit(X_train,Y_train)\n\nY_pred = grid_search_best_model.predict(X_test)\n\naccuracy= accuracy_score(Y_test,Y_pred)\n\nprint('Accuracy of KNN improved Model is:',\"{:.2f}%\".format(100*accuracy))\n","d9773a50":"grid_search_best_model.best_params_","8f1459c9":"### Above graph concludes that people having serum creatinine levels from .75 to 1.1 were most likely not survive","91fe61c4":"> ## Vizualization","27367a30":"## To improve the accuracy of Random Forest model we will use RandomSearchCV ","7cde088e":"# Final Results\n\n\n### Logistic Regression :     87.64%\n### Decision Trees:           84.27% \n### Random Forest (improved): 91.01%\n### KNN (improved):           88.76%\n\n\n\n## Any thoughts and suggestions are always welcome. Please do leave a comment and upvote if you liked the solution.\n\n## Thanks","de8b978e":"### Above graph concludes that number of platelets have no major role in the mortality rate of people ","ad72dfbd":"### Variables such as Age,ejection_fraction,serum_creatinine,serum_sodium,time are highly correlated than the other variables in the dataset. So we will focus on them.\n","cd5572e4":"### Above graph concludes that people who were having higher level of creatinine phosphokinase were most likely to survive","a2808a7e":"### Outliers are there but we have very less number of rows and if we remove them then our data will reduce considerably","e1686f2e":"# KNearestNeighbour","1a302734":"# Decision Tree","f45e3605":"### People at the age of 60 were most likely not able to survive. ","10b3769a":"### Above graph concludes that people who were smoking or no smoking had an equal probability of not being able to survive.","fc7e17de":"### Above graph concludes that people who were having High Blood Pressure or no High Blood Pressure had an equal probability of not being able to survive.","913c1da2":"# Random Forest","a659be17":"### Above graph concludes that people who were not anaemic had higher mortality rate than those who were anaemic","7e26abee":"### Above graph concludes that time have no major role in the mortality rate of people ","e3adcf7c":"### Above graph concludes that people of both genders had an equal probability of not being able to survive due to high levels of serum sodium.","4d6d922f":"# Logistics Regression","6d495211":"### Improving the accuracy of KNN by Hyperparameter Tuning using GridSearchCV","287ec604":"### Above graph concludes that people having ejection fraction at 35 were most likely not suvive.","54f4b64a":"# Let's Apply ML algorithms","97e972ff":"### Above graph concludes that people who were having diabetes or no diabetes had an equal probability of not being able to survive."}}