{"cell_type":{"b6e06aa2":"code","0b3b63a0":"code","59d28191":"code","0da4c85b":"code","99c7a7f8":"code","d6e00796":"code","437d2e82":"code","1999a763":"code","104c8e8f":"code","e509a370":"code","03e065ad":"code","60226071":"code","9c960eda":"code","2a320cf3":"code","93446a51":"code","d3d5d9fd":"code","34b07d32":"code","cb894750":"code","22a5f7b1":"code","5887b1b9":"code","73056183":"code","24aa704f":"code","f93b177c":"markdown","4e9a799f":"markdown","5d8a6a42":"markdown","26a40231":"markdown","e4ce4374":"markdown","9a8a56d4":"markdown"},"source":{"b6e06aa2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b3b63a0":"import numpy as np \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\nfrom sklearn.model_selection import cross_validate","59d28191":"hdi=pd.read_csv('\/kaggle\/input\/human-development-index-hdi\/HDI.csv')\nhdi.head()","0da4c85b":"hdi.info()","99c7a7f8":"hdi.info()","d6e00796":"hdi.describe().T","437d2e82":"hdi.isnull().sum()","1999a763":"hdi = hdi.drop(['Country', 'Coverage'], axis=1)","104c8e8f":"for col in hdi.columns:\n    hdi[col] = hdi[col].fillna(hdi[col].mean())","e509a370":"hdi.isnull().sum()","03e065ad":"X = hdi.iloc[:,1:]\ny =hdi.iloc[:,:1]","60226071":"print(f'The shape of X is {X.shape}\\n\\nThe shape of y is {y.shape}')","9c960eda":"X.columns","2a320cf3":"y.columns","93446a51":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4,random_state=1)","d3d5d9fd":"model= LinearRegression().fit(X_train,y_train)","34b07d32":"cv_res=cross_validate(model,X_train,y_train,return_train_score=True)\ncv_res['test_score'].mean()","cb894750":"Pred = model.predict(X_test)\nPred","22a5f7b1":"mean_squared_error(y_test,Pred)","5887b1b9":"mean_absolute_error(y_test,Pred)","73056183":"r2_score(y_test,Pred)","24aa704f":"input_data=(0.256,0.244,0.210,0.200,0.303,0.348,0.398,0.339,0.344,0.348,0.350,0.353,0.384,0.393,0.409,0.418,0.429,0.447,0.447,0.460,0.472,0.477,0.489,0.496,0.500,0.500,0.502,0.50,0.509,0.511)\n## convert into numpy array\ninput_data_as_numpy_array = np.asarray(input_data)\n\n### reshape a data array as we are predict one instance\n\ninput_data_as_numpy_array=input_data_as_numpy_array.reshape(1,-1)\npredictions =model.predict(input_data_as_numpy_array)\n# print(predictions)\nprint(f'The HDI Rank is {float(predictions)}')","f93b177c":"# model fitting","4e9a799f":"# **drop unwanted data**","5d8a6a42":"**split train test data**","26a40231":"# Model prediction","e4ce4374":"**fill the missing values**","9a8a56d4":"**select features and label**"}}