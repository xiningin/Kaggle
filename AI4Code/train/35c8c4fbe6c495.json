{"cell_type":{"81233cd5":"code","756bde00":"code","9929a2b7":"code","de1ecf22":"code","4e2f385c":"code","8914d0ed":"code","7e0a4f65":"code","1cbf8e44":"code","59b36df7":"code","9377eb71":"code","864ed5fb":"code","31893f3b":"code","cd8ee74b":"code","426f4d6a":"code","07227ade":"code","6ba7e567":"code","debf4da3":"code","cc0fdf6d":"code","254125e8":"code","a9be048b":"code","150a47ab":"code","f542003c":"code","43af8195":"code","a4c28626":"markdown","b1e3e335":"markdown","148a5dc7":"markdown","9e050d52":"markdown","4147653e":"markdown","382ee13a":"markdown","d0fd440f":"markdown","1ba500db":"markdown","cea6b4c0":"markdown","c0104fe7":"markdown","96b9a2f2":"markdown","c7021a3b":"markdown","e366890f":"markdown","d3393be8":"markdown","7b9b9ac1":"markdown","a798f05d":"markdown","ad672eeb":"markdown","b1bff007":"markdown","10fd2c67":"markdown","2b44f54a":"markdown","ac9a0bfe":"markdown","f8dc8227":"markdown"},"source":{"81233cd5":"import cv2\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport tensorflow as tf\nfrom keras.utils import plot_model\n\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport matplotlib.pyplot as plt\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\ntf.random.set_seed(0)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","756bde00":"EPOCHS = 20\nSAMPLE_LEN = 100\nIMAGE_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\/\"\nTRAIN_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train.csv\"\n\ndata = pd.read_csv(TRAIN_PATH)\ntrain_data = data.copy()","9929a2b7":"def load_image(image_id):\n    file_path = image_id\n    image = cv2.imread(IMAGE_PATH + file_path)\n    return image\n\ntrain_images = train_data[\"image\"][:SAMPLE_LEN].progress_apply(load_image)","de1ecf22":"plt.figure(figsize=(20,12))\nlabels = sns.barplot(train_data.labels.value_counts().index,train_data.labels.value_counts())\nfor item in labels.get_xticklabels():\n    item.set_rotation(45)","4e2f385c":"train_data['labels'] = train_data['labels'].apply(lambda string: string.split(' '))\ns = list(train_data['labels'])\nmlb = MultiLabelBinarizer()\ntrainx = pd.DataFrame(mlb.fit_transform(s), columns=mlb.classes_, index=train_data.index)\ntrainx","8914d0ed":"labels = pd.concat([train_data['image'], trainx], axis=1)\nlabels.head()\nfig = go.Figure([go.Pie(labels=labels.columns[1:],\n           values=labels.iloc[:, 1:].sum())])\nfig.update_layout(title_text=\"Pie chart of targets\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.show()","7e0a4f65":"def visual(img):\n    fig, ax = plt.subplots(nrows=3, ncols=3, figsize=(30, 20))\n    ax[0][0].imshow(load_image(img[0]))\n    ax[1][0].imshow(load_image(img[1]))\n    ax[2][0].imshow(load_image(img[2]))\n    ax[0][1].imshow(load_image(img[3]))\n    ax[1][1].imshow(load_image(img[4]))\n    ax[2][1].imshow(load_image(img[5]))\n    ax[0][2].imshow(load_image(img[6]))\n    ax[1][2].imshow(load_image(img[7]))\n    ax[2][2].imshow(load_image(img[8]))\n    plt.show()","1cbf8e44":"healthy = data[data['labels']=='healthy']['image'].values[:9]\nvisual(healthy)","59b36df7":"scab = data[data['labels']=='scab']['image'].values[10:19]\nvisual(scab)","9377eb71":"frog_eye_leaf_spot = data[data['labels']=='frog_eye_leaf_spot']['image'].values[0:9]\nvisual(frog_eye_leaf_spot)","864ed5fb":"rust = data[data['labels']=='rust']['image'].values[0:9]\nvisual(rust)","31893f3b":"complex = data[data['labels']=='complex']['image'].values[0:9]\nvisual(complex)","cd8ee74b":"powdery_mildew = data[data['labels']=='powdery_mildew']['image'].values[0:9]\nvisual(powdery_mildew)","426f4d6a":"def visualize_leaves(cond=[0, 0, 0, 0, 0, 0], cond_cols=[\"healthy\"], is_cond=True):\n    if not is_cond:\n        cols, rows = 3, min([3, len(train_images)\/\/3])\n        fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(30, rows*20\/3))\n        for col in range(cols):\n            for row in range(rows):\n                ax[row, col].imshow(train_images.loc[train_images.index[-row*3-col-1]])\n        return None\n        \n    cond_0 = \"complex == {}\".format(cond[0])\n    cond_1 = \"frog_eye_leaf_spot == {}\".format(cond[1])\n    cond_2 = \"healthy == {}\".format(cond[2])\n    cond_3 = \"powdery_mildew == {}\".format(cond[3])\n    cond_4 = \"rust == {}\".format(cond[4])\n    cond_5 = \"scab == {}\".format(cond[5])\n    cond_list = []\n    for col in cond_cols:\n        if col == \"complex\":\n            cond_list.append(cond_0)\n        if col == \"frog_eye_leaf_spot\":\n            cond_list.append(cond_1)\n        if col == \"healthy\":\n            cond_list.append(cond_2)\n        if col == \"powdery_mildew\":\n            cond_list.append(cond_3)\n        if col == \"rust\":\n            cond_list.append(cond_4)\n        if col == \"scab\":\n            cond_list.append(cond_5)\n    \n    data = labels.loc[:100]\n    for cond in cond_list:\n        data = data.query(cond)\n        \n    images = train_images.loc[list(data.index)]\n    cols, rows = 3, min([3, len(images)\/\/3])\n    \n    fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(30, rows*20\/3))\n    for col in range(cols):\n        for row in range(rows):\n            ax[row, col].imshow(images.loc[images.index[row*3+col]])\n    plt.show()","07227ade":"fig = px.parallel_categories(labels[['complex', 'frog_eye_leaf_spot', 'healthy', 'powdery_mildew', 'rust','scab']], color=\"healthy\", color_continuous_scale=\"sunset\",\\\n                             title=\"Parallel categories plot of targets\")\nfig","6ba7e567":"def histogram(img):\n    R, G, B = cv2.split(img)\n\n    output1_R = cv2.equalizeHist(R)\n    output1_G = cv2.equalizeHist(G)\n    output1_B = cv2.equalizeHist(B)\n\n    equ = cv2.merge((output1_R, output1_G, output1_B))\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(30, 20))\n    ax[0].imshow(img)\n    ax[0].set_title('Original Image', fontsize=24)\n    ax[1].imshow(equ)\n    ax[1].set_title('Histogram Equalization Image', fontsize=24)\n    plt.show()","debf4da3":"histogram(train_images[9])\nhistogram(train_images[10])\nhistogram(train_images[11])","cc0fdf6d":"def edge_and_cut(img):\n    emb_img = img.copy()\n    edges = cv2.Canny(img, 100, 200)\n    edge_coors = []\n    for i in range(edges.shape[0]):\n        for j in range(edges.shape[1]):\n            if edges[i][j] != 0:\n                edge_coors.append((i, j))\n    \n    row_min = edge_coors[np.argsort([coor[0] for coor in edge_coors])[0]][0]\n    row_max = edge_coors[np.argsort([coor[0] for coor in edge_coors])[-1]][0]\n    col_min = edge_coors[np.argsort([coor[1] for coor in edge_coors])[0]][1]\n    col_max = edge_coors[np.argsort([coor[1] for coor in edge_coors])[-1]][1]\n    new_img = img[row_min:row_max, col_min:col_max]\n    \n    emb_img[row_min-10:row_min+10, col_min:col_max] = [255, 0, 0]\n    emb_img[row_max-10:row_max+10, col_min:col_max] = [255, 0, 0]\n    emb_img[row_min:row_max, col_min-10:col_min+10] = [255, 0, 0]\n    emb_img[row_min:row_max, col_max-10:col_max+10] = [255, 0, 0]\n    \n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 20))\n    ax[0].imshow(img, cmap='gray')\n    ax[0].set_title('Original Image', fontsize=24)\n    ax[1].imshow(edges, cmap='gray')\n    ax[1].set_title('Canny Edges', fontsize=24)\n    ax[2].imshow(emb_img, cmap='gray')\n    ax[2].set_title('Bounding Box', fontsize=24)\n    plt.show()","254125e8":"edge_and_cut(train_images[3])\nedge_and_cut(train_images[4])\nedge_and_cut(train_images[5])","a9be048b":"def rotate(img):\n    fig, ax = plt.subplots(nrows=1, ncols=4, figsize=(30, 20))\n    ax[0].imshow(img)\n    ax[0].set_title('Original Image', fontsize=24)\n    ax[1].imshow(cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE))\n    ax[1].set_title('90', fontsize=24)\n    ax[2].imshow(cv2.rotate(img, cv2.ROTATE_90_COUNTERCLOCKWISE))\n    ax[2].set_title('180', fontsize=24)\n    ax[3].imshow(cv2.rotate(img, cv2.ROTATE_180))\n    ax[3].set_title('270', fontsize=24)\n    plt.show()","150a47ab":"rotate(train_images[9])\nrotate(train_images[10])","f542003c":"def flip(img):\n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 20))\n    ax[0].imshow(img)\n    ax[0].set_title('Original Image', fontsize=24)\n    ax[1].imshow(cv2.flip(img, 0))\n    ax[1].set_title('Vertical Flip', fontsize=24)\n    ax[2].imshow(cv2.flip(img, 1))\n    ax[2].set_title('Horizontal Flip', fontsize=24)\n    plt.show()","43af8195":"flip(train_images[9])\nflip(train_images[10])\nflip(train_images[11])","a4c28626":"# Visualization","b1e3e335":"V\u00ec \u0111\u1ed1i t\u01b0\u1ee3ng trong \u1ea3nh l\u00e0 l\u00e1, quay chi\u1ec1u n\u00e0o c\u0169ng mang l\u1ea1i h\u00ecnh \u1ea3nh chi\u1ebfc l\u00e1 n\u00ean ta s\u1ebd \u00e1p d\u1ee5ng c\u00e1ch n\u00e0y \u0111\u1ec3 t\u0103ng b\u1ed9 d\u1eef li\u1ec7u.","148a5dc7":"Sau khi c\u00e2n b\u1eb1ng histogram, ta th\u1ea5y c\u00e1c v\u1ecb tr\u00ed b\u1ecb b\u1ec7nh tr\u00ean chi\u1ebfc l\u00e1 s\u1ebd n\u1ed5i b\u1eadt h\u1eb3n tr\u00ean n\u1ec1n c\u1ee7a l\u00e1. N\u00ean ta s\u1ebd th\u00eam l\u01b0\u1ee3ng d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c c\u00e2n b\u1eb1ng histogram n\u00e0y nh\u1eb1m gi\u00fap nh\u1ea5n m\u1ea1nh v\u00f9ng b\u1ecb b\u1ec7nh.","9e050d52":"# Flip","4147653e":"# Histogram Equalization","382ee13a":"# Healthy","d0fd440f":"L\u01b0\u1ee3ng d\u1eef li\u1ec7u ch\u00eanh l\u1ec7ch qu\u00e1 nhi\u1ec1u, \u0111\u1eb7c bi\u1ec7t d\u1eef li\u1ec7u \u0111a nh\u00e3n, c\u00f3 nhi\u1ec1u b\u1ec7nh l\u1ea1i chi\u1ebfm s\u1ed1 l\u01b0\u1ee3ng qu\u00e1 nh\u1ecf. V\u00ec v\u1eady, ch\u00fang em \u0111\u00e3 ngh\u0129 t\u1edbi c\u00e1ch ch\u1ec9 gi\u1eef l\u1ea1i c\u00e1c nh\u00e3n \u0111\u01a1n, nh\u00e3n k\u00e9p s\u1ebd \u0111\u01b0\u1ecdc bi\u1ec3u di\u1ec5n theo nh\u00e3n \u0111\u01a1n d\u01b0\u1edbi d\u1ea1ng one hot encoding.","1ba500db":"# Powdery_mildew","cea6b4c0":"# Scab","c0104fe7":"# One hot encoding","96b9a2f2":"# Rust","c7021a3b":"# Canny Detection, Crop image (T\u00ecm \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e1 trong \u1ea3nh)","e366890f":"# Frog_eye_leaf_spot","d3393be8":"# Augmentation","7b9b9ac1":"Ch\u1ec9 b\u1eb1ng m\u1eaft thu\u1eddng c\u0169ng \u0111\u00e3 th\u1ea5y kh\u00f3 ph\u00e2n bi\u1ec7t gi\u1eefa 2 b\u1ec7nh rust v\u00e0 frog_eye_leaf_spot. \u0110\u00e2y c\u00f3 th\u1ec3 l\u00e0 kh\u00f3 kh\u0103n trong qu\u00e1 tr\u00ecnh \u0111\u00e0o t\u1ea1o.","a798f05d":"scab v\u00e0 healthy nh\u00ecn r\u1ea5t gi\u1ed1ng nhau, \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 1 tr\u1edf ng\u1ea1i r\u1ea5t l\u1edbn.","ad672eeb":"V\u00ec \u0111\u1ed1i t\u01b0\u1ee3ng trong \u1ea3nh l\u00e0 l\u00e1, l\u1eadt chi\u1ec1u n\u00e0o c\u0169ng mang l\u1ea1i h\u00ecnh \u1ea3nh chi\u1ebfc l\u00e1 n\u00ean ta s\u1ebd \u00e1p d\u1ee5ng c\u00e1ch n\u00e0y \u0111\u1ec3 t\u0103ng b\u1ed9 d\u1eef li\u1ec7u.","b1bff007":"D\u1eef li\u1ec7u sau khi \u0111\u01b0\u1ee3c m\u00e3 ho\u00e1 l\u1ea1i \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u00e2n l\u1ea1i \u0111\u1ec1u h\u01a1n, kh\u00f4ng c\u00f2n m\u1ea5t c\u00e2n b\u1eb1ng l\u1edbn nh\u01b0 tr\u01b0\u00f3c.","10fd2c67":"# Rotate","2b44f54a":"\u0110\u1ed3 th\u1ecb tr\u00ean cho ta th\u1ea5y s\u1ef1 li\u00ean quan gi\u1eefa c\u00e1c nh\u00e3n v\u1edbi nhau. V\u00ed d\u1ee5 v\u1edbi c\u00e1c l\u00e1 kh\u1ecfe m\u1ea1nh, \u0111\u01b0\u1eddng m\u00e0u xanh s\u1ebd ch\u1ec9 \u0111i qua \"healthy\" c\u00f3 gi\u00e1 tr\u1ecb = 1 c\u00f2n c\u00e1c nh\u00e3n kh\u00e1c \u0111\u1ec1u \u0111i qua v\u00f9ng c\u00f3 gi\u00e1 tr\u1ecb = 0. \u0110\u1ed9 r\u1ed9ng c\u1ee7a \u0111\u01b0\u1eddng tr\u00ean c\u00e1c kho\u1ea3ng th\u1ec3 hi\u1ec7n t\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a nh\u00e3n \u0111\u00f3 khi k\u1ebft h\u1ee3p v\u1edbi c\u00e1c nh\u00e3n kh\u00e1c.","ac9a0bfe":"# Complex","f8dc8227":"\u00c1p d\u1ee5ng Canny Detection \u0111\u1ec3 t\u00ecm c\u1ea1nh c\u1ee7a l\u00e1, sau \u0111\u00f3 \u1edf t\u1eadp d\u1eef li\u1ec7u c\u1ea1nh, t\u00ecm X_max, Y_max, X_min, Y_min l\u00e0 4 to\u1ea1 \u0111\u1ed9 c\u1ee7a v\u00f9ng ch\u1eef nh\u1eadt ch\u1ee9a chi\u1ebfc l\u00e1. Sau \u0111\u1ea5y ta \u00e1p d\u1ee5ng \u0111\u1ec3 Crop ra v\u00f9ng ch\u1ee9a chi\u1ebfc l\u00e1 \u0111\u00f3 \u0111\u1ec3 t\u1ea1o th\u00eam \u1ea3nh (c\u00f3 \u00edt background) gi\u00fap gia t\u0103ng b\u1ed9 d\u1eef li\u1ec7u. Ta \u00e1p d\u1ee5ng \u0111\u01b0\u1ee3c c\u00e1ch n\u00e0y v\u00ec chi\u1ebfc l\u00e1 l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng ch\u00ednh v\u00e0 r\u00f5 n\u00e9t nh\u1ea5t."}}