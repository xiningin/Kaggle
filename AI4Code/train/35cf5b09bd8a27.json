{"cell_type":{"3b36237f":"code","7d66ddca":"code","5a0e4ec8":"code","24cbd6a9":"code","37a3fea1":"code","660d7c0d":"code","70ed03d5":"code","34f1789a":"code","b0ebd19d":"code","2ea0711e":"code","d2fce399":"code","b1273e5f":"code","d552a5fd":"markdown","a5b5b41c":"markdown","53e08f5b":"markdown","8fdb5907":"markdown","5090f857":"markdown","324b9a07":"markdown","40532f9d":"markdown","baa7dad2":"markdown","40095ee8":"markdown","671c12d2":"markdown","14bc5075":"markdown","6d4fa20d":"markdown","b5981a4c":"markdown","4fce767d":"markdown","438c18b1":"markdown","227edc9f":"markdown","8549c22c":"markdown","6cb0afc7":"markdown","2b4941f6":"markdown"},"source":{"3b36237f":"import networkx as nx\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nfrom sklearn import manifold, datasets\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\nfrom itertools import combinations\n\n# data used to create network from the bottom cells of the notebook\n\nnode_labels = ['Udacity', 'Cloud-cert', 'LinkedIn', 'edX', 'Fast.ai', 'DataCamp',\n       'Kaggle', 'Udemy', 'Coursera', 'University']\n\nall_edges = [(0,1,0.51), (0,2,0.42), (0,3,0.59),(0,4,0.66),(0,5,0.44), (0,6,0.18),\n            (0,7,0.33), (0,8,0.24), (0,9,-0.01), (1,2,0.73),(1,3,0.38), (1,4,0.45),\n            (1,5,0.41), (1,6,0.24), (1,7,0.24), (1,8,0.09), (1,9,0.2), (2,3,0.45),\n            (2,4,0.26), (2,5,0.5), (2,6,0.29), (2,7,0.35), (2,8,0.09), (2,9,0.08),\n            (3,4,0.46), (3,5,0.44), (3,6,0.14), (3,7,0.21), (3,8,0.21), (3,9,-0.04),\n            (4,5,0.15), (4,6,0.32), (4,7,-0.04), (4,8,0.26), (4,9,0.0), (5,6,0.17),\n            (5,7,0.21), (5,8,0.08), (5,9,-0.03), (6,7,0.02), (6,8,0.02), (6,9,-0.15),\n            (7,8,0.03), (7,9,-0.2), (8,9,-0.1)]\n\nnodes = range(0,len(node_labels))\ng = nx.Graph()\ng.add_nodes_from(nodes)\ng.add_weighted_edges_from(all_edges)\npos = nx.spring_layout(g,seed=3)\n\nfig, ax = plt.subplots(1,1,figsize=(10,6))\noptions = {\"node_size\": 700}\ncolorlist = ['tab:pink','tab:olive', 'tab:gray','tab:brown', 'tab:cyan', 'tab:purple',\n             'tab:orange', 'tab:green', 'tab:blue', 'tab:red']\n               \nnx.draw_networkx_nodes(g, pos, nodelist=nodes,node_color=colorlist, **options)\nfor edge in all_edges:\n    sedge = (edge[0],edge[1])\n    style = \"solid\"\n    if edge[2] < 0:\n        style=\"dashed\"\n    else:\n        style=\"solid\"\n    width = (int(abs(edge[2] * 10)))\n    if width < 1:\n        width = 1\n    alpha = abs(edge[2])\n    if alpha < .15:\n        alpha = .15\n    nx.draw_networkx_edges(g, pos, edgelist=[sedge],\n                           width=width, alpha=alpha,edge_color='tab:gray',\n                          style=style)\nlegend_elements = list()\nfor edu in range(0,len(node_labels)):\n    legend_elements.append(Line2D([0], [0], marker='o', color='w', label=node_labels[edu],\n                          markerfacecolor=colorlist[edu], markersize=15))\n\nax.legend(handles=legend_elements, \n             title=\"Educational Platforms\",bbox_to_anchor=(1, 1), ncol=1);\nplt.axis('off');","7d66ddca":"#df = pd.read_csv('data\/kaggle_survey_2020_responses.csv',low_memory=False)\ndf = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False);\ndf[:2]","5a0e4ec8":"# extracting the columns of interest\nkeep = [1,2,4,231,232,233,234,235,236,237,238,239,240,241,242]\neducation = df.iloc[:,keep]\n\n# prepare to rename columns: remove redundant question and shorten for graphing\nnames = education.iloc[0,:].values\nrenamedict = dict()\nfor x in range(0,len(names)):\n    renamedict[education.columns[x]] = names[x].replace('On which platforms have you begun or completed data science courses? (Select all that apply) - Selected Choice - ','') \n\nrenamedict['Q1'] = 'Age'\nrenamedict['Q2'] = 'Gender'\nrenamedict['Q4'] = 'Formal Ed'\nrenamedict['Q37_Part_3'] = 'Kaggle'\nrenamedict['Q37_Part_8'] = 'LinkedIn'\nrenamedict['Q37_Part_9'] = 'Cloud-cert'\nrenamedict['Q37_Part_10'] = 'University'\n\n# drop the first row, rename columns, gather the platforms in a list\neducation = education.drop(index=0,axis=0)\neducation = education.rename(columns=renamedict) \nplatforms = list(education.columns[3:])\n\n# change strings to 1's and Nan's to 0 for Education platforms\neducation[platforms] = education[platforms].replace(to_replace=np.nan, value=0)\neducation[platforms] = education[platforms].replace(to_replace=r'^\\w', value=1, regex=True)\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace=np.nan, value='No Response')\n\n# collapse age category\neducation['Age'] = education['Age'].replace(to_replace='18-21', value='18-24')\neducation['Age'] = education['Age'].replace(to_replace='22-24', value='18-24')\neducation['Age'] = education['Age'].replace(to_replace='30-34', value='30-39')\neducation['Age'] = education['Age'].replace(to_replace='35-39', value='30-39')\neducation['Age'] = education['Age'].replace(to_replace='40-44', value='40+')\neducation['Age'] = education['Age'].replace(to_replace='45-49', value='40+')\neducation['Age'] = education['Age'].replace(to_replace='50-54', value='40+')\neducation['Age'] = education['Age'].replace(to_replace='55-59', value='40+')\neducation['Age'] = education['Age'].replace(to_replace='60-69', value='40+')\neducation['Age'] = education['Age'].replace(to_replace='70+', value='40+')\n\n# collapse gender category\nee = 'Everyone Else'\neducation['Gender'] = education['Gender'].replace(to_replace='Prefer to self-describe', value=ee)\neducation['Gender'] = education['Gender'].replace(to_replace='Nonbinary', value=ee)\neducation['Gender'] = education['Gender'].replace(to_replace='Prefer not to say', value=ee)\n\n# collapse formal education category\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='Doctoral degree', value='Doctoral')\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='Master\u2019s degree', value='Masters')\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='Bachelor\u2019s degree', value='Bachelors')\nother = 'Other'\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='Some college\/university study without earning a bachelor\u2019s degree', value=other)\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='Professional degree', value=other)\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='No formal education past high school', value=other)\neducation['Formal Ed'] = education['Formal Ed'].replace(to_replace='I prefer not to answer', value=other)\n\n# chaeck to see if respondents that selected 'None' did not select other values\nnp.sum(np.logical_and(education['None'] == 1, education[platforms].sum(axis=1) > 1)) == 0\n\n# Remove 'None' column, and drop the name from platforms\nplatforms.pop(10)\neducation = education.drop('None',axis=1)\n\n# remove the 'Other' column and drop the name from the platforms\nplatforms.pop(10)\neducation = education.drop('Other',axis=1)\n\n# remove rows that don't have any educational information\neducation = education[education[platforms].sum(axis=1) > 0]","24cbd6a9":"education.head()","37a3fea1":"print(\"Total number of respondents:\", len(education),\"\\nNumber of education platforms:\",len(platforms))","660d7c0d":"overall_popularity = sorted(education[platforms].columns, key=lambda x: education[x].sum(),reverse=True)\n\n# create a dataframe that I can put the correlations between the demographic variables to be able to use a stripplot\ndef platforms_and_courses(colname):\n    platforms = pd.DataFrame(columns=education[colname].unique())\n    courses = pd.DataFrame(columns=education[colname].unique())\n    for formtype in education[colname].unique():\n        df = education[overall_popularity][education[colname] == formtype]\n        platforms[formtype] = (df.sum()\/len(df)).values\n        courses[formtype] = df.sum(axis=1).value_counts()\n    plat = np.tril(platforms.corr(method='spearman'),k=-1)\n    cour = np.tril(courses.corr(method='spearman'),k=-1)\n    return plat[np.nonzero(plat)], cour[np.nonzero(cour)]\n\n# get lists of correlations between platforms and number of courses\ngender_platforms, gender_courses = platforms_and_courses('Gender')\nformal_platforms, formal_courses = platforms_and_courses('Formal Ed')\nage_platforms, age_courses = platforms_and_courses('Age')\n\n# create lists of the the education type (i.e., platforms or courses), correlation number, and demographic name\ned_type = list(); correlation = list(); demographic = list()\ndef add_to_list(ed,cor,dem):\n    for val in cor:\n        ed_type.append(ed)\n        correlation.append(val)\n        demographic.append(dem)\nadd_to_list('Platforms',gender_platforms,'Gender')\nadd_to_list('Courses',gender_courses,'Gender')\nadd_to_list('Platforms',formal_platforms,'Formal Ed')\nadd_to_list('Courses',formal_courses,'Formal Ed')\nadd_to_list('Platforms',age_platforms,'Age')\nadd_to_list('Courses',age_courses,'Age')\n\n# turn into a dataframe\ndf_corrs = pd.DataFrame.from_dict({'Ed_type':ed_type,'Correlation':correlation,'Demographic':demographic})\n\n# get the popularity and number of courses taken\npct_platform = education[overall_popularity].sum()\/len(education)\nnum_courses = education[platforms].sum(axis=1).value_counts()\n\n# plot the three graphs\nplt.figure(figsize=(16, 4))\nax = plt.subplot(1,3,1)\nsns.barplot(np.arange(len(overall_popularity)),pct_platform);\nax.set_xticklabels(overall_popularity)\nplt.xticks(rotation=90);\nax.set_title('Percent Taken Education Type')\nax.set_ylabel('Percent of Total')\n\nax = plt.subplot(1,3,2)\nsns.barplot(np.arange(len(num_courses)),num_courses,color='tab:gray');\nax.set_ylabel('Number Respondents')\nax.set_xlabel('Total Courses Taken')\nax.set_title('Number of Courses Taken');\nax.set_xticklabels([1,2,3,4,5,6,7,8,9,10]);\n\nax = plt.subplot(1,3,3)\nax = sns.stripplot(x=\"Ed_type\", y=\"Correlation\", hue=\"Demographic\", \n                   data=df_corrs,size=15,jitter=.2,alpha=.6)\nplt.ylim(top=1.01,bottom=.86)\nplt.legend(loc='lower right',markerscale=1.5);\nax.set_title('Correlation within Demographic Subtypes');\n\nplt.subplots_adjust(wspace=.3)","70ed03d5":"g = sns.clustermap(education[platforms],row_cluster=True, method=\"ward\")\ng.cax.set_visible(False)\nax = g.ax_heatmap\nax.set_yticks([]);","34f1789a":"# run the TSNE using the Jaccard similarity with high perplexity and learning rate\ntsne = manifold.TSNE(n_components=2, init='pca',metric='jaccard',perplexity=200,learning_rate=500)\nY = tsne.fit_transform(education[platforms].values)\n\n# save to use later if working on personal computer\n#np.save('tsne-plx200-ln-500.npy',Y)\n#Y = np.load('tsne-plx200-ln-500.npy')\n\n# color the points based on the number of courses taken\nnumcourses = education[platforms].sum(axis=1)\nnums = [1,2,3,4,5,6,7,8,9,10]\ncols = ['k',\n        'c','c',\n        'g','g','g',\n        'r','r','r','r']\ncolnum = (numcourses.replace(to_replace=nums,value=cols)).values\n\nfig,ax = plt.subplots(ncols=2,figsize=(8,4))\nax[0].scatter(Y[:, 0], Y[:, 1],color='tab:gray',s=3)\nax[0].set_xticks([])\nax[0].set_yticks([])\nax[0].set_title('Unlabeled TSNE Output');\n\n\nax[1].scatter(Y[:,0], Y[:,1],color=colnum,s=3)\nax[1].set_xticks([])\nax[1].set_yticks([])\nax[1].set_title('Educational Platforms Reported');\n\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\n\n# create a legend 'by hand' \nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Only 1',\n                          markerfacecolor='k', markersize=10),\n                   Line2D([0], [0], marker='o', color='w', label='2 - 3',\n                          markerfacecolor='c', markersize=10),\n                   Line2D([0], [0], marker='o', color='w', label='4 - 6',\n                          markerfacecolor='g', markersize=10),\n                   Line2D([0], [0], marker='o', color='w', label='7 - 10',\n                          markerfacecolor='r', markersize=10),\n                   ]\n\nax[1].legend(handles=legend_elements, \n             title=\"Number Platforms Reported\",bbox_to_anchor=(1, 1), ncol=1);\n","b0ebd19d":"ncol=5\ntablist = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', \n           'tab:brown', 'tab:pink', 'tab:gray', 'tab:olive', 'tab:cyan']\nfix, ax = plt.subplots(nrows=2,ncols=ncol,figsize=(12,5))\nfor x in range(0,len(platforms)):\n    yes = education[overall_popularity[x]]==1\n    no = education[overall_popularity[x]] == 0\n    xval = x\/\/ncol\n    yval = x%ncol\n    ax[xval,yval].scatter(Y[:, 0][no], Y[:, 1][no],color='lightgray',s=1,alpha=.2)\n    ax[xval,yval].scatter(Y[:, 0][yes], Y[:, 1][yes],color=tablist[x],s=3)\n    ax[xval,yval].set_xticks([])\n    ax[xval,yval].set_yticks([])\n    ax[xval,yval].set_title(overall_popularity[x])\nplt.suptitle('Regions of Educational Platforms within a TSNE Plot');","2ea0711e":"corr = education[overall_popularity].corr()\nbycorr = list(corr.sum().sort_values(ascending=False).index)\n\ncorr = education[bycorr].corr()\ncorr_mask = np.triu(np.ones_like(corr, dtype=bool))\n\nedu = education[overall_popularity].values\ncoocc = edu.T.dot(edu)\ncoocc_mask = np.triu(np.ones_like(coocc, dtype=bool))\n\nplt.figure(figsize=(16,8))\nax=plt.subplot(1,2,1)\nsns.heatmap(coocc.astype(float), xticklabels=overall_popularity, yticklabels=overall_popularity,\n            annot=True, fmt='.0f', cmap=sns.diverging_palette(220, 20, as_cmap=True),mask=coocc_mask,\n           vmax=3070,vmin=100);\nax.set_xlabel('Platforms Ordered by Overall Popularity')\nax.set_title('Co-occurrence Matrix for Education Platforms')\n\nax=plt.subplot(1,2,2)\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, mask=corr_mask,\n            annot=True, cmap=sns.diverging_palette(220, 20, as_cmap=True),\n           vmax=.2, vmin=-.2);\nax.set_xlabel('Platforms Ordered by Average Correlation');\nax.set_title('Correlation Matrix for Education Platforms');\n","d2fce399":"reverse_overall_popularity = sorted(education[platforms].columns, key=lambda x: education[x].sum(),reverse=False)\ncond_prob = np.ones((len(overall_popularity),len(overall_popularity)))\nop = overall_popularity\nfor a in range(0,len(op)):\n    for b in range(0,len(op)):\n        pab = np.sum(np.logical_and(education[op[a]]==1,education[op[b]]==1))\/ len(education)\n        pa = education[op[a]].sum()\/len(education)\n        cond_prob[a,b]= pab\/pa\n        \ncondprob_mask = np.zeros_like(cond_prob, dtype=bool)\nnp.fill_diagonal(condprob_mask,True,wrap=False)\n\ndef enrichment_metric(pop):\n    enrichment = np.ones((len(pop),len(pop)))\n    for a in range(0,len(pop)):\n        for b in range(0,len(pop)):\n            pab = np.sum(np.logical_and(education[pop[a]]==1,education[pop[b]]==1))\/ len(education)\n            pa = education[pop[a]].sum()\/len(education)\n            pb = education[pop[b]].sum()\/len(education)\n            enrichment[a,b]= np.log(pab\/(pa*pb))\n    return enrichment\n\nenrichment = enrichment_metric(overall_popularity)\nnp.fill_diagonal(enrichment, 0, wrap=False)\nenrichment = pd.DataFrame(enrichment,columns=overall_popularity)\nenrichment_popularity = sorted(enrichment.columns, key=lambda x: enrichment[x].sum(),reverse=True)\nenrichment = enrichment_metric(enrichment_popularity)\nenrichment_mask = np.triu(np.ones_like(enrichment, dtype=bool))\n\nplt.figure(figsize=(16,8))\nax=plt.subplot(1,2,1)\nsns.heatmap(cond_prob,xticklabels=op,yticklabels=op, annot=True,\n            cmap=sns.diverging_palette(220, 20, as_cmap=True),mask=condprob_mask,\n           vmax=.8,vmin=0);\nax.set_title('Conditional Probability: P(Row|Column)');\nax.set_xlabel('Ordered by Overall Popularity')\nax=plt.subplot(1,2,2)\nsns.heatmap(enrichment,xticklabels=enrichment_popularity,yticklabels=enrichment_popularity,\n            annot=True, cmap=sns.diverging_palette(220, 20, as_cmap=True),\n           vmin=-0.75,vmax=0.75,mask=enrichment_mask);\nax.set_title(\"Log 'Normalized' Conditional Probability: log(PA&B\/PA*PB)\");\nax.set_xlabel(\"Ordered by 'Normalized' Conditional Probability\")\nplt.suptitle(\"Conditional Probability versus 'Normalized' of Educational Platform Pairs\");","b1273e5f":"enrichment = enrichment_metric(enrichment_popularity)\nnode_labels = enrichment_popularity\nall_edges = list(combinations(nodes, 2))\n\nnodes = range(0,len(node_labels))\ng = nx.Graph()\ng.add_nodes_from(nodes)\nfor edge in all_edges:\n    g.add_edge(edge[0], edge[1], weight=enrichment[edge[0],edge[1]])\npos = nx.spring_layout(g,seed=3)\n\nfig, ax = plt.subplots(1,1,figsize=(10,6))\noptions = {\"node_size\": 700}\ncolorlist = ['tab:pink','tab:olive', 'tab:gray','tab:brown', 'tab:cyan', 'tab:purple',\n             'tab:orange', 'tab:green', 'tab:blue', 'tab:red']\n               \nnx.draw_networkx_nodes(g, pos, nodelist=nodes,node_color=colorlist, **options)\nfor edge in all_edges:\n    sedge = (edge[0],edge[1])\n    style = \"solid\"\n    if enrichment[edge[0],edge[1]] < 0:\n        style=\"dashed\"\n    else:\n        style=\"solid\"\n    width = (int(abs(enrichment[edge[0],edge[1]] * 10)))\n    if width < 1:\n        width = 1\n    alpha = abs(enrichment[edge[0],edge[1]])\n    if alpha < .15:\n        alpha = .15\n    nx.draw_networkx_edges(g, pos, edgelist=[sedge],\n                           width=width, alpha=alpha,edge_color='tab:gray',\n                          style=style)\nlegend_elements = list()\nfor edu in range(0,len(node_labels)):\n    legend_elements.append(Line2D([0], [0], marker='o', color='w', label=node_labels[edu],\n                          markerfacecolor=colorlist[edu], markersize=15))\n\nax.legend(handles=legend_elements, \n             title=\"Educational Platforms\",bbox_to_anchor=(1, 1), ncol=1);\nplt.axis('off');","d552a5fd":"First, I wanted to look at the relative popularity of the Educational Platforms, and how many platforms respondents reported taking. In addition, I examined the popularity and number of Educational Platforms across the demographic variables of Age, Gender, and Formal Education.\n\nWe can see that the lowest for formal education is two points with a correlation of .89, whild the majority of the points are correlated at .96 or greater. \n\n<i>Takeaway: at least within the broad strokes of Percent Taken and Number of Education Platforms, subgroups within the demographic variables of age, formal education and gender are highly correlated. <\/i>","a5b5b41c":"## Education Platform Analysis\n1. Which education platform is most popular, and how many platforms do Kagglers report using?\n    - Does Educational Platform popularity or number reported vary greatly based on gender, age or formal education?\n1. How are pairs of Educationa Platforms related?\n    - Do distinctive cluster appear when using a TSNE plot for dimensionality reduction? \n    - What is the pairwise relationship between education platforms? \n    \nBreifly, I explore the relative popularity of these Educational Platforms, and the degree to which Educational Platforms are more likely to be taken together. I first examine the popularity and numbers of courses taken by the respondents, and examine if those broad quantifications vary based on the demographic variables of gender, overall education and age. Next, I perform an exploratory data analysis using a [TSNE](https:\/\/en.wikipedia.org\/wiki\/T-distributed_stochastic_neighbor_embedding) to see how the courses were related. I found that certain Platforms were in common regions of the plot, and then examined the pairwise relationship between the platforms. \n","53e08f5b":"As a next step, I decided to make a [TSNE](https:\/\/en.wikipedia.org\/wiki\/T-distributed_stochastic_neighbor_embedding) plot of the educational platform data. This will allow me to examine the relationships between the variables. Since the data only cotains yes\/no information per each observation, I chose to use the [Jaccard similarity metric](https:\/\/en.wikipedia.org\/wiki\/Jaccard_index) whe computing the similarity between the respondents. \n\nTo aid in interpreting the TSNE plot, I first color the points by the number of courses taken. By doing this, I found that the center of the plot was the most course overlap, while the edges contained one or two different Educational Platforms. \n\n<i>Take away: The Educational Platforms will separate themselves into distinctive regions and overlap on the TSNE plot.<\/i>","8fdb5907":"# Educational Platforms Pairs: which do Kagglers take together? ","5090f857":"### Exploratory Descriptive Analysis: TSNE","324b9a07":"When cleaning this data, I extracted the columns of interest for the Education Platforms and demographic variables (i.e., age, gender, and formal education). After renaming the column names, I change the coursename\/Nan values in the Educational Platforms to 1's and 0's respectively. To avoid being overly influenced by small categories in my demographic variables, I collapsed age into 18-24, 25-29, 30-39, and 40+, gender into Man, Woman, and Everyone Else, and formal education into Doctoral, Masters, Bachelors, Other. \n\nAfter the initial processing, I made some further decisions on the data I will examine. All of the respondents who selected 'None' did not select any other Educational Platforms, I removed this column. I also removed the 'Other' column because choice is not specific to a particular Educational Platform. \n\nAt the end of processing, I ended up with 11,890 responses with one or more of the 10 educational platforms.\n","40532f9d":"All Kagglers use their Machine Learning and Data Science skills when competing on this site. However, each person's educational journey to arrive here is different. Here, I explore the [2020 Kaggle Machine Learning & Data Science Survey](https:\/\/www.kaggle.com\/c\/kaggle-survey-2020) to examine the 'Educational Platforms' Kagglers have used to learn and augment their skills. In the survey, Kagglers were asked: <b>On which platforms have you begun or completed data science courses? (Select all that apply)<\/b>, and given the following platforms: [Cloud-cert](https:\/\/www.businessnewsdaily.com\/10748-top-5-cloud-certifications.html), [Coursera](https:\/\/www.coursera.org\/), [DataCamp](https:\/\/www.datacamp.com\/), [edX](https:\/\/www.edx.org\/), [Fast.ai](https:\/\/www.fast.ai\/), [Kaggle](https:\/\/www.kaggle.com\/), [LinkedIn](https:\/\/www.linkedin.com\/), [Udacity](https:\/\/www.udacity.com\/), [Udemy](https:\/\/www.udemy.com\/), and finally University courses for credit. \n\nThis notebook will examine both how individuals take these educational platforms, and educational platforms are taken together. \n\n### By the end of the notebook, we'll be able to see that University Courses (in red) are less related to all other types of educational platforms. ","baa7dad2":"# Broad Education Platform Use","40095ee8":"### Clustermap\nIn the first step to finding how the Educational Platforms are related, I plotted a clustermap. Here, we do see some clusters forming within the groups.","671c12d2":"Finally, we return to the network presented at the beginning of the notebook. I liked the information presented in the 'Normalized' Conditional Probability, but I wanted a different way to visualize it. I chose to make a network to see which platforms gravitated towards one another. \n\n<i>Takeaway: The University Courses are less likely to be taken with other courses. Cloud certification and linkedin courses are taken together, and fast.ai and Udacity.<\/i>\n\n#### Graphical representation of the 'Normalized' Conditional Probability. Line thickness represents strength of association, dashed lines represent a negative association (see in thin lines with University.)","14bc5075":"# Exploratory Descriptive Analyses","6d4fa20d":"# Data Cleaning","b5981a4c":"Thanks for looking! My future plans for this kernel include:\n- Determining if the Log 'Normalized' Conditional Probability is statistically significant for pairs of Education Platforms. For example, Fast.ai and Udacity have a value of 0.66, but is this more likely than random chance?\n\nAny other thoughts\/suggestions?","4fce767d":"In the TSNE above, we see that different educational platforms go together. Now, we'll look to quantify this by first finding how many times pairs of platforms go together, and how correlated the patterns of platforms are.\n\n\n<i>Takeaway: Although pairs of educational platforms may go together frequently, the correlation between them may be low. For example, Coursera and Kaggle have the most co-occurrence (left top), but they are only correlated at 0.022.<\/i>\n","438c18b1":"## What classes are most likely to be taken together?","227edc9f":"## What courses pattern together? ","8549c22c":"Next, I colored the points by the specific Educational Platform. The more popular courses have distinct regions within the TSNE, while the less popular courses are more dispersed throughout. ","6cb0afc7":"First, let's look at all the survey contents,","2b4941f6":"In this section, I look at the conditional probability of two courses occurring together, and the likliehood that events co-occurr together. \n\nOn the left side, I have the [conditional probability ](https:\/\/en.wikipedia.org\/wiki\/Conditional_probability) of one course given together. This is typically represented as the probability of P(B|A), or the probability of B given A. In this data, it is the probability of taking one course, given that you've taken another. The formula is P(B|A) = probability of A and B \/ probability of A. \n\nOne thing that pops out to me in this is how these results are still somewhat dependent on the overall popularity of the educational platform. For example, the probability that someone took Fast.ai given they took Coursera is 0.8 (bottom left), but the probability that you took Coursera given you took Fast.ai is 0.12 (upper right). This is influenced by overall popularity, as the probability of Coursera is aout 60%, while the probability of fast.ai is about 10%. \n\nInstead, a more informative measure is to divide the conditional probability by probability of A and the probability of B. This quantity tells us the probability that A and B co-occurr, divided by the probability that they occurr independtly of one another. The log of the quantity is taken so that both an increase, and a decrease in probability are on the same scale. (As a side note, feel free to share if this quantity has a specific name. It is almost the mutual information, but not quite.) Using this quantity, we see that on average, taking university courses for credit is less associated with the education platforms, with the exception of linkedin and cloud certifications. In contrast, we see that fast.ai and Udacity, and Linkedin and Coud Certification are more likely to be taken together. \n\n<i>Take home: by just looking at the conditional probability, all of the courses are popular given that you have taken Coursera. When examining how likely it is that two courses are taken together over the independent probablity, a more complex picture emerges. <\/i>\n"}}