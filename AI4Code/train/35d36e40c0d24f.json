{"cell_type":{"a7e33f23":"code","fa298825":"code","eb683e12":"code","6d8f4a3b":"code","fb6d1d40":"code","83c3dafe":"code","f895a651":"code","8b772b7e":"code","04e3b889":"code","7e2f927e":"code","e0bcb196":"code","e20f7315":"markdown","d965ea42":"markdown","dd86e4ec":"markdown","1618d437":"markdown","edc319a1":"markdown","4fb6449d":"markdown","f33fbfcc":"markdown"},"source":{"a7e33f23":"pip install openpyxl","fa298825":"# Importing necessary libraries, setting display options and running the dataset:\n\nimport numpy as np\nimport datetime as dt\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\ndf_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf = df_.copy()","eb683e12":"# Descriptive statistics of the dataset:\n\ndef check_df(dataframe):\n    print(\"##################### Head #####################\")\n    print(dataframe.head(10))\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Info #####################\")\n    print(dataframe.info())\n    print(\"####################### NA ######################\")\n    print(dataframe.isnull().sum())\n    print(\"################### Quantiles ###################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\ncheck_df(df)","6d8f4a3b":"# Deleting nan values\n\ndf.dropna(inplace=True)\n\n\n# Removing Invoices starting with \"C\" as they represent canceled purchase.\n\ndf = df[~df[\"Invoice\"].str.contains(\"C\",na=False)]","fb6d1d40":"\n# Numerical column descriptive analysis\n\nnum_cols = [\"Quantity\", \"Price\"]\n\ndef num_summary(dataframe, numerical_col, histogram=False, boxplot=False):\n    quantiles = [0.05, 0.10, 0.50, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if histogram:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.ylabel(\"frequency\")\n        plt.title(numerical_col)\n        plt.show()\n\n    if boxplot:\n        sns.boxplot(x=dataframe[numerical_col])\n        plt.xlabel(numerical_col)\n        plt.show()\n\nfor col in num_cols:\n    num_summary(df, col, True, True)","83c3dafe":"# Creating TotalPrice variable as total revenue per quantity bought.\n\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","f895a651":"# Calculating RFM metrics\n\n# Last date registered in InvoiceDate variable\ndf[\"InvoiceDate\"].max()  #2011,12,09 12:50:00 - last registered date\n\ntoday_date = dt.datetime(2011, 12, 11)  # today_date set as 11th of December as 9th December\n#                                         date isn't full date time (meaning 24h)\n\n#RECENCY - Day difference between today_date and customer's last \"purchase\"\n#FREQUENCY - Customer's lifetime purchase frequency\n#MONETARY - Customer's monetary return\n\nrfm = df.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda InvoiceDate: (today_date - InvoiceDate.max()).days,\n                                     \"Invoice\": lambda Invoice: Invoice.nunique(),\n                                     \"TotalPrice\": lambda TotalPrice: TotalPrice.sum()})\n\n\n# Renaming rfm dataframe's columns as follows:\nrfm.columns = [\"recency\", \"frequency\", \"monetary\"]\n\n# Setting monetary variable as higher than 0.\nrfm = rfm[(rfm['monetary'] > 0)]","8b772b7e":"# Creating RFM scores from recency, frequency & monetary variables.\n\nrfm[\"recency_score\"] = pd.qcut(rfm[\"recency\"], 5, labels=[5, 4, 3, 2, 1])\n\nrfm[\"frequency_score\"] = pd.qcut(rfm[\"frequency\"].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"monetary_score\"] = pd.qcut(rfm[\"monetary\"], 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) + rfm['frequency_score'].astype(str))","04e3b889":"# Setting RFM scores as segment with segmentation map\n\nseg_map = {r'[1-2][1-2]': 'hibernating',\n           r'[1-2][3-4]': 'at_Risk',\n           r'[1-2]5': 'cant_loose',\n           r'3[1-2]': 'about_to_sleep',\n           r'33': 'need_attention',\n           r'[3-4][4-5]': 'loyal_customers',\n           r'41': 'promising',\n           r'51': 'new_customers',\n           r'[4-5][2-3]': 'potential_loyalists',\n           r'5[4-5]': 'champions'}\n\nrfm[\"segment\"] = rfm[\"RFM_SCORE\"].replace(seg_map, regex=True)","7e2f927e":"# Creating bar plot for segment variable's monetary mean:\n\ngraph1 = rfm.groupby(\"segment\")[\"monetary\"].mean().sort_values(ascending=False)\ngraph1.plot(kind='barh', color=\"r\")\nplt.tight_layout()\nplt.show()","e0bcb196":"pareto = rfm.groupby(\"segment\")[\"monetary\"].sum().sort_values(ascending=False)\npareto = pareto.to_frame()\npareto[\"monetary_ratio\"] = (pareto[\"monetary\"] \/ pareto[\"monetary\"].sum()) * 100\npareto[\"number\"] = rfm[\"segment\"].value_counts()\npareto[\"number_ratio\"] = (pareto[\"number\"] \/ pareto[\"number\"].sum()) * 100\npareto","e20f7315":"**CUSTOMER SEGMENTATION USING RFM**\n\n\nBUSINESS PROBLEM: An e-commerce company wants to segment its customers and determine marketing strategies according to these segments.\n\nDATASET STORY: There is Online Retail II, 2010-2011 sheet file as dataset.\nProducts sold are mostly souvenirs and most of the customers are corporates.\n\nDATASET VARIABLES:\n\nInvoiceNo - If this starts with \"C\" it means the canceled purchase\n\nStockCode - Unique stock code for each product\n\nDescription - Product name\n\nQuantity - Product quantity in the invoice\n\nInvoiceDate - Date of the invoice record\n\nUnitPrice - Total monetary amount of the invoice (GBP)\n\nCustomerID - Unique customer ID\n\nCountry - Country name\n","d965ea42":"**Thank you for your reading!**\n\n**This work has been done with the support of** [VBO](https:\/\/www.veribilimiokulu.com\/).\n","dd86e4ec":"Now our RFM dataframe is ready to be used. \n\nSegment variable is representing each customer's segmentation status. So we can get the descriptive statistics based on Segment variable.\n\nThis statistics are better understood when graphically showed.","1618d437":"From the quick check of dataframe, we see types of variables, number of NA values of variables and critical quantiles.\n\nIn this scenario we will be removing NA vaues cause, but this depends on analysts decision. NA values may not be removed and can be saved for later use.\n\nNow let's remove NA values and also removing Invoice column values containing C - as they are categorized as canceled purchases.","edc319a1":"Above is the table of segments, monetary sum of the segments, monetary ration in total revenue (monetary), number of customers per segment and the ratio of it.\n\nChampions segment is representing only %14.59 of total customers while generating some %48.71 of the total revenue. So this is why they are called CHAMPIONS!\n\nLoyal_customers segment is following as the second largest segment about revenue. Representing %18.88 of the total customers, loyal_customers segment is generating %26.32 of the total revenue.\n\nSo basically we can assume that %33.47 of the total customers are generating %75.03 of the total revenue.","4fb6449d":"![RFM.png](attachment:27808e30-f30f-4abc-9e28-d99336f8a2cb.png)","f33fbfcc":"As we can see, champions segment is bringing us the largest amount of revenue. Loyal_customers and cant_loose are following champions segment.\n\nBut what about the ratio compared to the total sum of revenue?\n\nAlso what about the number of customers within segments and ratio of them in total customer number?\n\nLet's see below the final statistics:"}}