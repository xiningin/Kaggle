{"cell_type":{"f16456c5":"code","380a68db":"code","76ef1183":"code","52365c17":"code","a60db9be":"code","ce7d3fca":"code","1ff42331":"code","f5d6bd29":"markdown"},"source":{"f16456c5":"%%writefile risk_adverse_greedy_goose.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport numpy as np\n\nlast_step_x,last_step_y = (0,0)\n\ndef get_nearest_cells(x,y):\n    # returns all cells reachable from the current one\n    result = []\n    for i in (-1,+1):\n        result.append(((x+i+7)%7, y))\n        result.append((x, (y+i+11)%11))\n    return result\n\ndef find_closest_food(table):\n    # returns the first step toward the closest food item\n    new_table = table.copy()\n    \n    updated = False\n    for roll, axis, code in [\n        (1, 0, 1),\n        (-1, 0, 2),\n        (1, 1, 3),\n        (-1, 1, 4)\n    ]:\n\n        shifted_table = np.roll(table, roll, axis)\n        \n        if (table == -2).any() and (shifted_table[table == -2] == -3).any(): # we have found some food at the first step\n            return code\n        else:\n            mask = np.logical_and(new_table == 0,shifted_table == -3)\n            if mask.sum() > 0:\n                updated = True\n            new_table += code * mask\n        if (table == -2).any() and shifted_table[table == -2][0] > 0: # we have found some food\n            return shifted_table[table == -2][0]\n        \n        # else - update new reachible cells\n        mask = np.logical_and(new_table == 0,shifted_table > 0)\n        if mask.sum() > 0:\n            updated = True\n        new_table += shifted_table * mask\n\n    # if we updated anything - continue reccurison\n    if updated:\n        return find_closest_food(new_table)\n    # if not - return some step\n    else:\n        return table.max()\n\ndef agent(obs_dict, config_dict):\n    \"\"\"This agent always moves toward observation.food[0] but does not take advantage of board wrapping\"\"\"\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n\n    global last_step_x,last_step_y\n    \n    table = np.zeros((7,11))\n    # 0 - emply cells\n    # -1 - obstacles\n    # -2 - food\n    # -3 - head\n    # 1,2,3,4 - reachable on the current step cell, number is the id of the first step direction\n    \n    legend = {\n        1: 'SOUTH',\n        2: 'NORTH',\n        3: 'EAST',\n        4: 'WEST'\n    }\n    \n    # let's add food to the map\n    for food in observation.food:\n        x,y = row_col(food, configuration.columns)\n        table[x,y] = -2 # food\n        \n    # let's add all cells that are forbidden\n    for i in range(4):\n        opp_goose = observation.geese[i]\n        if len(opp_goose) == 0:\n            continue\n        for n in opp_goose[:-1]:\n            x,y = row_col(n, configuration.columns)\n            table[x,y] = -1 # forbidden cells\n        if i != player_index:\n            x,y = row_col(opp_goose[0], configuration.columns)\n            possible_moves = get_nearest_cells(x,y) # head can move anywhere\n            for x,y in possible_moves:\n                table[x,y] = -1 # forbidden cells\n        \n    # let's add head position\n    x,y = row_col(player_head, configuration.columns)\n    table[x,y] = -3\n    table[last_step_x,last_step_y] = -1\n    last_step_x,last_step_y = x,y\n    \n    # the first step toward the nearest food\n    step = int(find_closest_food(table))\n    \n    # if there is not available steps make random step\n    if step not in [1,2,3,4]:\n        step = np.random.randint(4) + 1\n    \n    return legend[step]","380a68db":"%%writefile submission.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport numpy as np\nimport time\nimport random\nlast_step_x,last_step_y = (0,0)\n\ndef get_player_coordinates(player,configuration):\n    return [row_col(pos, configuration.columns) for pos in player]\n\ndef move_east(x,y):  return x, (y+1)%11\ndef move_west(x,y): return x, (y-1)%11\ndef move_north(x,y): return (x-1)%7,y\ndef move_south(x,y): return (x+1)%7,y\n\nmove_player = {\n    'NORTH':move_north,\n    'SOUTH':move_south,\n    'EAST':move_east,\n    'WEST':move_west\n}\n\nOpposite_Moves = {\n        'NORTH':'SOUTH',\n        'SOUTH':'NORTH',\n        'EAST':'WEST',\n        'WEST':'EAST'\n    }\n\ndef calculate_trajectory(step_danger_matrix,position_queue,moves_queue,steps_queue,traversal_matrix):\n    #BFS TO FIND MINIMUM DISTANCE TO ALL THE CELLS REACHABLE FROM CURRENT MOVE \n    \"\"\"\n    This doesn't take into account the actions of other's player (Improvement: To take action of other player into account)\n    \"\"\"\n    FRONT = 0\n    QUEUE_LENGTH = 1\n    while(QUEUE_LENGTH>0):\n        \n        assert len(moves_queue)<=77, \"Something is wrong\"\n        \n        current_x,current_y = position_queue[FRONT]\n        current_blocked_move = Opposite_Moves[moves_queue[FRONT]]\n        current_step = steps_queue[FRONT] + 1\n        for action in ['SOUTH','NORTH','EAST','WEST']:\n            if action != current_blocked_move: \n                next_x,next_y = move_player[action](current_x,current_y)\n                if (step_danger_matrix[next_x,next_y] < current_step) and (traversal_matrix[next_x,next_y]==0):\n                    traversal_matrix[next_x,next_y] = current_step\n                    position_queue.append((next_x,next_y)) \n                    moves_queue.append(action)\n                    steps_queue.append(current_step)\n                    QUEUE_LENGTH += 1\n        \n        QUEUE_LENGTH -= 1\n        FRONT += 1\n        \n    return traversal_matrix\n\nblocked_move = None\nopponent_blocked_moves = {}\nGAME_STEP = 1\nLogging = True\ndef mat2string(matrix):\n    output = \"\"\n    for row in matrix.astype(int):\n        for cell in row:\n            output += str(cell)+\" \"\n        output += '\\n'\n    return output\n\ndef agent(obs_dict, config_dict, depth=3):\n    \"\"\"This agent always moves toward observation.food[0] but does not take advantage of board wrapping\"\"\"\n    \n    global GAME_STEP,blocked_move, opponent_blocked_moves\n    start_time = time.time()\n\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    self_player_id = observation.index\n    \n    if GAME_STEP==0: mode = 'w+'\n    else: mode = 'a+'\n        \n    if Logging:\n        game_logs = open(f'\/kaggle\/working\/game_{self_player_id}_{depth}.log',mode)\n        game_logs.write(f'GAME STEP:{GAME_STEP}  DEPTH:{depth} \\n')\n    \n    try:\n        Foods = {}\n        # let's add food to the map\n        for food in observation.food:\n            x,y = row_col(food, configuration.columns)\n            Foods[(x,y)] = 1\n            if Logging:\n                game_logs.write(f'Food:{x} {y} \\n')\n\n        board_matrix = np.zeros((7,11))\n        step_danger_matrix = np.zeros((7,11))\n    \n        opponent_heads = []\n        for player_id in range(4):\n            player = observation.geese[player_id]\n            if len(player)==0:\n                continue\n       \n            player_coordinates = get_player_coordinates(player,configuration)\n            head_x,head_y = player_coordinates[0]\n            \n            if (player_id==self_player_id) : \n                self_head_x,self_head_y = head_x,head_y\n            else:\n                opponent_heads.append((head_x,head_y,len(player)))\n                \n            add_tail = 0  \n            \n            for move in ['SOUTH','NORTH','EAST','WEST']:\n                if move_player[move](head_x,head_y) in Foods:\n                    add_tail = 1\n                \n            for i,(x,y) in enumerate(reversed(player_coordinates)):\n                board_matrix[x,y] = player_id+1\n                step_danger_matrix[x,y] = i+1 + add_tail\n                \n        if Logging:\n            game_logs.write(\"Board Matrix \\n\")\n            game_logs.write(mat2string(board_matrix))\n            game_logs.write(\"Step Danger Matrix \\n\")\n            game_logs.write(mat2string(step_danger_matrix))\n            game_logs.write(\"Opponent heads \\n\")\n            game_logs.write(str(opponent_heads)+'\\n')\n\n        blocked_positions = []\n        for opp_x,opp_y,opp_len in opponent_heads:\n            for move in ['SOUTH','NORTH','EAST','WEST']:\n                x,y = move_player[move](opp_x,opp_y)\n                blocked_positions.append((x,y,opp_len))\n                \n        if depth>0:\n            for x,y,opp_len in blocked_positions:\n#                 if step_danger_matrix[x,y] == 0:\n                    step_danger_matrix[x,y] = opp_len + 1\n        \n        if Logging:\n            game_logs.write(\"Board Matrix \\n\")\n            game_logs.write(mat2string(board_matrix))\n            game_logs.write(\"Step Danger Matrix \\n\")\n            game_logs.write(mat2string(step_danger_matrix))\n            \n        # GET ALL THE POSSIBLE MOVES     \n        Possible_Moves = ['SOUTH','NORTH','EAST','WEST']\n        if blocked_move in Possible_Moves: Possible_Moves.remove(blocked_move)\n\n        Traversal_matrices = {}\n\n    #     return random.choice(Possible_Moves)\n\n        for first_move in Possible_Moves:\n            first_x, first_y = move_player[first_move](self_head_x,self_head_y)\n            if step_danger_matrix[first_x,first_y]<=1:\n                for second_move in ['SOUTH','NORTH','EAST','WEST']:\n                    if Opposite_Moves[first_move] != second_move :\n                        second_x,second_y = move_player[second_move](first_x,first_y)\n                        if step_danger_matrix[second_x,second_y]<=2:\n                            traversal_matrix = np.zeros((7,11)).astype(int)\n                            traversal_matrix[first_x,first_y] = 1\n                            traversal_matrix[second_x,second_y] = 2\n                            position_queue = [(second_x,second_y)]\n                            moves_queue = [second_move]\n                            steps_queue = [2]\n                            Traversal_matrices[(first_move,second_move)] = calculate_trajectory(step_danger_matrix,position_queue,moves_queue,\n                                                                                                steps_queue,traversal_matrix)\n                            if Traversal_matrices[(first_move,second_move)].sum()==0: return 'NORTH'\n                            if Logging:\n                                game_logs.write(f\"First Move:{first_move} Second Move:{second_move}\\n\")\n                                game_logs.write(f\"Second x:{second_x} Second y:{second_y}\\n\")\n                                game_logs.write(mat2string(Traversal_matrices[(first_move,second_move)]))\n\n\n        # Find All Safe Positions\n        \"\"\"\n        Heuristics: A Player is safe if there exists a cyclic path to player's current position\n        \"\"\"\n        moves_safety = {move:0 for move in Possible_Moves}\n\n        for first_move,second_move in Traversal_matrices:\n            if Traversal_matrices[(first_move,second_move)][self_head_x,self_head_y]>0:\n                moves_safety[first_move] += 1\n        \n        moves_safety = {k:min(2,moves_safety[k]) for k in moves_safety}\n\n        max_safety = max(moves_safety.values())\n        \n        if Logging:\n            game_logs.write(str(moves_safety)+\"\\n\")\n            game_logs.write(f\"Max Safety: {max_safety}\\n\")\n\n        # Find Positions Closest To Food\n        shortest_step_to_food = None\n        shortest_step = 1000\n        for food_x,food_y in Foods:\n            if Logging:\n                game_logs.write(f\"Shortest Path To Food: {food_x} {food_y}\\n\")\n            for first_move,second_move in Traversal_matrices:\n                if moves_safety[first_move]==max_safety :\n                    safety_condition1 = Traversal_matrices[(first_move,second_move)][self_head_x,self_head_y]>0\n                    safety_condition2 = (Traversal_matrices[(first_move,second_move)]>0).sum()>20\n                    safety_condition3 = (Traversal_matrices[(first_move,second_move)]>0).sum()>10\n                    if depth == 3: safety_condition = safety_condition1 and safety_condition2\n                    elif depth==2 or depth==0: safety_condition = safety_condition1\n                    else: safety_condition = safety_condition2\n                    if safety_condition:\n                        if Logging:\n                            game_logs.write(f\"{first_move} {second_move} : {Traversal_matrices[(first_move,second_move)][food_x,food_y]}\\n\")\n                        if Traversal_matrices[(first_move,second_move)][food_x,food_y]<shortest_step:\n                            shortest_step = Traversal_matrices[(first_move,second_move)][food_x,food_y]\n                            shortest_step_to_food = first_move\n\n\n        best_move = shortest_step_to_food\n\n        if Logging:\n            game_logs.write(f\"Best Move: {best_move} \\n\")\n            game_logs.write(f\"Total Time Taken for the step: {time.time()-start_time}\\n\")\n            game_logs.write(\"\\n\\n\")\n            game_logs.close()\n    except Exception as e:\n        if Logging:\n            game_logs.write(\"Exception Raised: \"+str(e))\n            game_logs.close()\n            assert 1==2\n        best_move=None\n    if best_move==None and depth>0:\n        best_move = agent(obs_dict, config_dict, depth-1)\n    elif best_move==None and depth==0:\n        best_move = random.choice(Possible_Moves)\n        \n    if depth==3: \n        blocked_move = Opposite_Moves[best_move]\n        GAME_STEP += 1\n    return best_move","76ef1183":"!rm game*.log","52365c17":"from kaggle_environments import evaluate, make\nenv = make(\"hungry_geese\")","a60db9be":"env.reset()\nenv.run(['risk_adverse_greedy_goose.py', 'risk_adverse_greedy_goose.py', 'submission.py', 'risk_adverse_greedy_goose.py'])\nenv.render(mode=\"ipython\", width=800, height=700)","ce7d3fca":"!ls","1ff42331":"def read_log(player_id,depth):\n    try:\n        f = open(f'game_{player_id}_{depth}.log','r+')\n        text = f.read()\n        text = {int(x.split(' ',1)[0]):x.split(' ',1)[1].strip() for x in text.split('GAME STEP:') if x != ''}\n        return text\n    except FileNotFoundError:\n        return {0:''}","f5d6bd29":"##### Risk adverse greedy goose is taken from: https:\/\/www.kaggle.com\/ilialar\/risk-averse-greedy-goose\n\n#### Best Version: V28 (Scores 1101-3rd rank in public lb for a week)"}}