{"cell_type":{"2d9419eb":"code","dd522124":"code","acd18fde":"code","6182d865":"code","8053b0d5":"code","cbb10f6a":"code","2a023928":"code","2ee5ed8f":"code","13dcc7fa":"code","5fc3dbda":"code","5b9afc4f":"code","70df7045":"code","47550876":"code","1ef7df40":"markdown","c4fefa34":"markdown","cd46976c":"markdown","621a8854":"markdown","df9ba6fe":"markdown","d577a620":"markdown","7fd9bf48":"markdown","a79a6fe3":"markdown","23d71d90":"markdown","629c37dd":"markdown"},"source":{"2d9419eb":"import pandas as pd\nimport numpy as np\nimport warnings\n\n\nwarnings.simplefilter(\"ignore\")\n\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\ntrain","dd522124":"train.isna().sum()","acd18fde":"train['date'] = pd.to_datetime(train['date'])\ntrain['year'] = train['date'].dt.year\ntrain['month'] = train['date'].dt.month\ntrain['day'] = train['date'].dt.day\ntrain['dayofweek'] = train['date'].dt.dayofweek\ntrain['dayofmonth'] = train['date'].dt.days_in_month\ntrain['dayofyear'] = train['date'].dt.dayofyear\ntrain['weekday'] = train['date'].dt.weekday\ntrain['weekofyear'] = train['date'].dt.weekofyear","6182d865":"train.groupby('country').agg({'num_sold':'sum'})","8053b0d5":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(24, 12))\nsns.distplot(x=train.loc[train['country']=='Finland','num_sold'], label='Finland', ax=ax)\nsns.distplot(x=train.loc[train['country']=='Norway','num_sold'], label='Norway', ax=ax)\nsns.distplot(x=train.loc[train['country']=='Sweden','num_sold'], label='Sweden', ax=ax)\nplt.legend()\nplt.show()","cbb10f6a":"fig, ax = plt.subplots(1, 3, figsize=(24, 12))\nsns.boxplot(data=train, x='country', y='num_sold', ax=ax[0])\nsns.boxplot(data=train, x='store', y='num_sold', ax=ax[1])\nsns.boxplot(data=train, x='product', y='num_sold', ax=ax[2])\nplt.show()","2a023928":"fig, ax = plt.subplots(3, 1, figsize=(24, 12))\nsns.lineplot(data=train, x='date', y='num_sold', hue='country', ax=ax[0])\nax[0].set_xticklabels(train['date'], rotation=90)\nsns.lineplot(data=train, x='date', y='num_sold', hue='store', ax=ax[1])\nax[1].set_xticklabels(train['date'], rotation=90)\nsns.lineplot(data=train, x='date', y='num_sold', hue='product', ax=ax[2])\nax[2].set_xticklabels(train['date'], rotation=90)\nplt.show()","2ee5ed8f":"fig, ax = plt.subplots(3, 1, figsize=(12, 4))\nplt.subplots_adjust(hspace=1)\nfeature_list = ['year', 'month', 'day', 'dayofweek', 'dayofmonth', 'dayofyear', 'weekday', 'weekofyear', 'num_sold']\nsns.heatmap(train.loc[train['product']=='Kaggle Mug', feature_list].corr().iloc[-1:, :], annot=True, vmin=0, vmax=1, ax=ax[0])\nax[0].set_title('Kaggle Mug')\nsns.heatmap(train.loc[train['product']=='Kaggle Hat', feature_list].corr().iloc[-1:, :], annot=True, vmin=0, vmax=1, ax=ax[1])\nax[1].set_title('Kaggle Hat')\nsns.heatmap(train.loc[train['product']=='Kaggle Sticker', feature_list].corr().iloc[-1:, :], annot=True, vmin=0, vmax=1, ax=ax[2])\nax[2].set_title('Kaggle Sticker')\nplt.show()","13dcc7fa":"from scipy.stats import pearsonr\n\np_feature_list = ['year', 'month', 'day', 'dayofweek', 'dayofmonth', 'dayofyear', 'weekday', 'weekofyear']\np_dict = {}\np_mug_list = []\np_hat_list = []\np_sticker_list = []\nfor c in p_feature_list:\n    p = round(pearsonr(train.loc[train['product']=='Kaggle Mug','num_sold'], train.loc[train['product']=='Kaggle Mug',c])[1], 4)\n    p_mug_list.append(p)\n    p = round(pearsonr(train.loc[train['product']=='Kaggle Hat','num_sold'], train.loc[train['product']=='Kaggle Hat',c])[1], 4)\n    p_hat_list.append(p)\n    p = round(pearsonr(train.loc[train['product']=='Kaggle Sticker','num_sold'], train.loc[train['product']=='Kaggle Sticker',c])[1], 4)\n    p_sticker_list.append(p)\np_dict['Kaggle Mug'] = p_mug_list\np_dict['Kaggle Hat'] = p_hat_list\np_dict['Kaggle Sticker'] = p_sticker_list\np_values_df = pd.DataFrame(p_dict, columns=p_dict.keys(), index=p_feature_list)\n\ndef p_value_warning_background(cell_value):\n    highlight = 'background-color: lightcoral;'\n    default = ''\n    if cell_value > 0.05:\n            return highlight\n    return default\n\np_values_df.style.applymap(p_value_warning_background)","5fc3dbda":"pip install pmdarima","5b9afc4f":"from pmdarima import auto_arima\nimport statsmodels.api as sm\n\nmod = sm.tsa.statespace.SARIMAX(train.loc[train['product']=='Kaggle Mug','num_sold'],\n                                order=(1,1,1),\n                                seasonal_order=(1, 1, 1, 7))\nresults = mod.fit(disp=False)\ndisplay(results.summary().tables[1])\n\nsns.set(font_scale=1.5)\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","70df7045":"mod = sm.tsa.statespace.SARIMAX(train.loc[train['product']=='Kaggle Hat','num_sold'],\n                                order=(1,1,1),\n                                seasonal_order=(1, 1, 1, 7))\nresults = mod.fit(disp=False)\ndisplay(results.summary().tables[1])\n\nsns.set(font_scale=1.5)\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","47550876":"mod = sm.tsa.statespace.SARIMAX(train.loc[train['product']=='Kaggle Sticker','num_sold'],\n                                order=(1,1,1),\n                                seasonal_order=(1, 1, 1, 7))\nresults = mod.fit(disp=False)\ndisplay(results.summary().tables[1])\n\nsns.set(font_scale=1.5)\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","1ef7df40":"# Exploratory Data Analysis","c4fefa34":"## P-values","cd46976c":"# Feature Engineering","621a8854":"### Kaggle Sticker","df9ba6fe":"### Kaggle Hat","d577a620":"## Correlations","7fd9bf48":"## Distributions","a79a6fe3":"### Kaggle Mug","23d71d90":"# Introduction\n\nHey, thanks for viewing my Kernel!\n\nIf you like my work, please, leave an upvote: it will be really appreciated and it will motivate me in offering more content to the Kaggle community ! \ud83d\ude0a","629c37dd":"# Data Cleaning"}}