{"cell_type":{"3d6a5d16":"code","60ed53d7":"code","d9a9d320":"code","eb35f983":"code","b890b1ad":"code","9282d579":"code","58952b24":"code","8d287ec5":"code","c6367a9e":"code","ba1a626e":"code","2e42aa97":"code","901e6415":"code","e607231e":"code","18ad2c8e":"code","75920e3e":"markdown","5aa05a2b":"markdown","4adcb098":"markdown","c0e4ebb1":"markdown","32a4552b":"markdown","0d75cd11":"markdown","240b86dd":"markdown","9f39249b":"markdown","68a9d47a":"markdown","0b47623b":"markdown","2399dc90":"markdown","4491013f":"markdown","34da72c3":"markdown","9de7adc2":"markdown","adc6e516":"markdown","cc024c0b":"markdown","74087e4e":"markdown","b6db41b9":"markdown","d5efd9ee":"markdown","7c2a1a25":"markdown","eb5e8dc3":"markdown","d5c9b982":"markdown","24fcd8f9":"markdown","ad87a857":"markdown","e1e6f452":"markdown","4accfdc7":"markdown"},"source":{"3d6a5d16":"# Make sure we have the latest kaggle-environments installed\n!pip install kaggle-environments --upgrade","60ed53d7":"from kaggle_environments import make\nfrom kaggle_environments.envs.halite.helpers import *\n\n# Create a test environment for use later\nboard_size = 5\nenvironment = make(\"halite\", configuration={\"size\": board_size, \"startingHalite\": 1000})\nagent_count = 2\nenvironment.reset(agent_count)\nstate = environment.state[0]","d9a9d320":"board = Board(state.observation, environment.configuration)\nprint(board)","eb35f983":"print(f\"Player Ids: {[player.id for player in board.players.values()]}\")\nprint(f\"Ship Ids: {[ship.id for ship in board.ships.values()]}\")\n# Note there are currently no shipyards because our Board just initialized\nprint(f\"Shiyard Ids: {[shipyard.id for shipyard in board.shipyards.values()]}\")\nassert len(board.cells) == board_size * board_size","b890b1ad":"point = Point(3, -4)\n\n# Points are tuples\nassert isinstance(point, tuple)\n# Points have x and y getters (no setters)\nassert point.x == 3\nassert point.y == -4\n# Points implement several common operators\nassert point == Point(3, -4)\nassert abs(point) == Point(3, 4)\nassert -point == Point(-3, 4)\nassert point + point == (6, -8)\nassert point - point == Point(0, 0)\nassert point * 3 == Point(9, -12)\n# Point supports floordiv but not div since x and y are ints not floats\nassert point \/\/ 2 == Point(1, -2)\nassert point % 3 == Point(0, 2)\n# Prints like a tuple\nprint(point)\nprint(board[point])","9282d579":"print([action.name for action in ShipAction])\nprint([action.name for action in ShipyardAction])\n\n# Grab a ship to test with\nship = next(iter(board.ships.values()))\nprint(f\"Initial action: {ship.next_action}\")\nship.next_action = ShipAction.NORTH\nprint(f\"New action: {ship.next_action}\")","58952b24":"print(board)\nboard = board.next()\nprint(board)\n\n# Let's make sure we moved north!\nnext_ship = board.ships[ship.id]\nassert next_ship.position - ship.position == ShipAction.NORTH.to_point()\n# We'll use this in the next cell\nship = next_ship\n\n# What happens if we call board.next()?\nprint(board.next())","8d287ec5":"ship.next_action = ShipAction.CONVERT\nboard = board.next()\nprint(board)","c6367a9e":"shipyard = board[ship.position].shipyard\nshipyard.next_action = ShipyardAction.SPAWN\nboard = board.next()\nprint(board)","ba1a626e":"for ship in board.ships.values():\n    ship.next_action = ShipAction.SOUTH\nboard = board.next()\nprint(board)","2e42aa97":"current_player = board.current_player\nfor ship in current_player.ships:\n    ship.next_action = ShipAction.SOUTH\nprint(current_player.next_actions)","901e6415":"def move_ships_north_agent(observation, configuration):\n    board = Board(observation, configuration)\n    current_player = board.current_player\n    for ship in current_player.ships:\n        ship.next_action = ShipAction.NORTH\n    return current_player.next_actions\n\nenvironment.reset(agent_count)\nenvironment.run([move_ships_north_agent, \"random\"])\nenvironment.render(mode=\"ipython\", width=500, height=450)","e607231e":"@board_agent\ndef move_ships_north_agent(board):\n    for ship in board.current_player.ships:\n        ship.next_action = ShipAction.NORTH\n\nenvironment.reset(agent_count)\nenvironment.run([move_ships_north_agent, \"random\"])\nenvironment.render(mode=\"ipython\", width=500, height=450)","18ad2c8e":"first_player_actions = {'0-1': 'CONVERT'}\nsecond_player_actions = {'0-2': 'NORTH'}\n\nactions = [first_player_actions, second_player_actions]\nboard = Board(state.observation, environment.configuration, actions)\nprint(board)\nprint(board.next())","75920e3e":"- board\u306e\u7b2c3\u5f15\u6570\u306bagent\u3068\u540c\u69d8\u306bid\u3068action\u306e\u7d44\u3092\u6e21\u3059\u3053\u3068\u3067\u6b21\u306eboard\u72b6\u614b\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3067\u304d\u308b","5aa05a2b":"# Point\nPoints are used to represent positions on the halite board as well as offsets when a ship moves from one position to another. Note that in `Board` the point `(0, 0)` is the lower left corner and the point `(board.configuration.size - 1, board.configuration.size - 1)` is the upper right corner. This differs from the raw Halite observation where the index `0` is the upper left corner and the index `(board.configuration.size * board.configuration.size) - 1` is the lower right corner.","4adcb098":"# Board\nBoard is the top-level entity when working with the Halite SDK and is the main type we'll construct when building a Halite agent. A board represents the Halite simulation state at a particular turn. Boards are constructed with an observation and configuration as defined in [the halite schema](https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/halite\/halite.json).\n\nBoards track all entities in the Halite simulation state including cells, players, ships, and shipyards.","c0e4ebb1":"As we set `Ship.next_action` and `Shipyard.next_action` for each entity in our board, the board tracks all of those actions for each player in the `Player.next_actions` property. `Board.current_player` refers to the player that our agent represents, so we can retrieve all of the queued actions for our ships and shipyards with `Board.current_player.next_actions`. Note that the return type of `Player.next_actions` is `Dict[str, str]` **not** `Dict[Union[ShipId, ShipyardId], Union[ShipAction, ShipyardAction]]`. We'll find out why in the next section.","32a4552b":"- ship\u306e\u4f5c\u6210","0d75cd11":"- next_action\u3078\u6b21\u306eAction\u306e\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3057\u305f\u3089bourd.next()\u3092\u53e9\u3044\u3066\u30bf\u30fc\u30f3\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8","240b86dd":"Cool, we've got a shipyard, now let's make a new ship!","9f39249b":"We can simulate actions for any player in the simulation, not just the current player. Of course our agent won't be able to control opponents during the actual episode evaluation but this technique can be useful for planning our own actions based on the actions we expect our opponents to take.\n\nLet's try moving all ships south.","68a9d47a":"# \u30dc\u30fc\u30c9\u306e\u751f\u6210\n- \u30b5\u30a4\u30ba 5*5\n- \u30d7\u30ec\u30a4\u30e4\u30fc\u6570 2\n- \u521d\u671f\u8cc7\u6e90 1000\n- \u306e\u30dc\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3057\u305f","0b47623b":"We have a complete agent, but wait, there's (slightly) more! This library also vends a `@board_agent` decorator for converting a regular agent into an agent that accepts a `Board` and assigns all `next_actions`. The signature of a `@board_agent` is `agent(board: Board) -> None`, note that there is no return value, we just have to modify the board that's passed to us. Let's convert our `move_ships_north_agent` to a `@board_agent`.","2399dc90":"This technique utilizes the `Board` class just for its lookahead ability and not for its action forming or state browsing constructs.","4491013f":"Notice that the second board looks just like the third board. This is because the call to `board.next()` clears all `next_actions` from ships and shipyards in the new board to prevent actions from automatically repeating from step to step.\n\nWhat if we want to make a shipyard?","34da72c3":"# What's this\n- \u4e3b\u306b\u30c1\u30fc\u30e0\u5185\u3067\u306e\u60c5\u5831\u5171\u6709\u3092\u76ee\u7684\u3068\u3057\u305f\u6587\u66f8\u3067\u3059\u304c\u305b\u3063\u304b\u304f\u306a\u306e\u3067public\u306b\u3057\u3066\u3044\u307e\u3059\n- \u3053\u306eNotebook\u306f Halite SDK Overview \u306e\u7ffb\u8a33\u3068\u89e3\u8aac\u306b\u306a\u308a\u307e\u3059\nhttps:\/\/www.kaggle.com\/sam\/halite-sdk-overview\n- \u30b3\u30f3\u30da\u306e\u8aac\u660e\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\nhttps:\/\/www.kaggle.com\/iicyan\/japanese-halite-introduction","9de7adc2":"# Actions\n- Ship, Shipyard\u306fnext_acitons\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u3044\u307e\u3059\n- next_action\u306b\u3053\u306e\u30bf\u30fc\u30f3\u306eAction\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3067\u6307\u793a\u3092\u51fa\u3057\u307e\u3059","adc6e516":"If you're new to Halite, check out Alexis' [Getting Started With Halite Notebook](https:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-halite)","cc024c0b":"- `@board_agent`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3068\u5f15\u6570\u306eboard\u306b\u526f\u4f5c\u7528\u3092\u8d77\u3053\u3059\u5f62\u3067next_action\u3092\u53cd\u6620\u3067\u304d\u308b","74087e4e":"# Schema Cheat Sheet\n```\nBoard: {\n    __init__(observation: Dict[str, Any], configuration: Dict[str, Any], next_actions: Optional[List[Dict[str, str]]] = None) -> None\n    cells -> Dict[Point, Cell]\n    ships -> Dict[ShipId, Ship]\n    shipyards -> Dict[ShipyardId, Shipyard]\n    players -> Dict[PlayerId, Player]\n    \n    current_player_id -> PlayerId\n    current_player -> Player\n    opponents -> List[Player]\n    \n    configuration -> Configuration\n    observation -> Dict[str, Any]\n    step -> int\n    \n    next() -> Board\n    \n    __deepcopy__(_) -> Board\n    __getitem__(point: Union[Tuple[int, int], Point]) -> Cell\n    __str__() -> str\n}\n\nCell: {\n    position -> Point\n    halite -> float\n    \n    ship_id -> Optional[ShipId]\n    ship -> Optional[Ship]\n    \n    shipyard_id -> Optional[ShipyardId]\n    shipyard -> Optional[Shipyard]\n\n    north -> Cell\n    south -> Cell\n    east -> Cell\n    west -> Cell\n    \n    neighbor(offset: Point) -> Cell\n}\n\nShip: {\n    id -> ShipId\n    halite -> int\n    \n    position -> Point\n    cell -> Cell\n    \n    player_id -> PlayerId\n    player -> Player\n    \n    next_action -> Optional[ShipAction]\n}\n\nShipyard: {\n    id -> ShipyardId\n    \n    position -> Point\n    cell -> Cell\n    \n    player_id -> PlayerId\n    player -> Player\n    \n    next_action -> Optional[ShipyardAct\n}\n\nPlayer: {\n    id -> PlayerId\n    is_current_player -> bool\n    halite -> int\n    next_actions -> Dict[str, str]\n    \n    ship_ids -> List[ShipId]\n    shipys -> List[Ship]\n    \n    shipyard_ids -> List[ShipyardId]\n    shipyards -> List[Shipyard]\n}\n\nPoint: {\n    x -> int\n    y -> int\n    \n    translate(offset: Point, size: int) -> Point\n    to_index(size: int) -> int\n    \n    @staticmethod\n    from_index(index: int, size: int) -> Point\n    \n    __abs__() -> Point\n    __add__(other: Point) -> Point\n    __eq__(other: Point) -> bool\n    __floordiv__(denominator: int) -> Point\n    __hash__() -> int\n    __mod__(mod: int) -> Point\n    __mul__(factor: int) -> Point\n    __neg__() -> Point\n    __str__() -> str\n    __sub__(other: Point) -> Point\n}\n```","b6db41b9":"# Creating an Agent\nNow we're able to plan and simulate changes to the Halite simulation state. The last step is turning this knowledge into a working agent.\nAs a reminder the signature for a Halite agent is \n- agent\u306eMain\u30d7\u30ed\u30bb\u30b9\u3002observation\u3068cofiguration\u304b\u3089id\u3068next_action\u306e\u7d44\u3092\u8fd4\u3059\n```\nagent(observation: Dict[str, Any], configuration: Dict[str, Any]) -> Dict[str, str]\n```\nThe observation and configuration agent parameters can be passed directly to the `Board` constructor to create a board representing the current simulation state.\n\nLastly, we need to generate our return value. The return value of an agent is a dict where the keys are ship or shipyard ids and the values are ship or shipyard actions for the corresponding id to execute.After queueing all actions for our ships and shipyards, we can call `board.current_player.next_actions` to retrieve those actions as an agent response. As noted in the previous section, the return type of `Player.next_actions` is `Dict[str, str]` -- this is to match the return type for agents.","d5efd9ee":"- SDK\u4e0a\u3067\u306f\u4ed6\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306eAction\u3082\u8a2d\u5b9a\u53ef\u80fd","7c2a1a25":"- shipyard\u306e\u751f\u6210","eb5e8dc3":"# Simulating Actions (Lookahead)\nAbove we have set the `next_action` for our ship to NORTH. The `Board.next()` method applies all currently set `next_actions` and steps time forward in the Halite simulation. This method returns a completely new board that will not be affected by subsequent changes to the previous board. Because we've already set `ship.next_action = ShipAction.NORTH` then when we call `board.next()` we should see that our ship has moved north in the next board.","d5c9b982":"- bourd.next\u5b9f\u884c\u5f8cnext_actions\u306f\u3059\u3079\u3066\u30af\u30ea\u30a2\u3055\u308c\u308b\n    ","24fcd8f9":"# Board (Advanced)\nUntil now we've always constructed our boards with just an observation and configuration but `Board` also accepts an optional third parameter:\n```\nBoard.__init__(observation: Dict[str, Any], configuration: Dict[str, Any], next_actions: Optional[List[Dict[str, str]]] = None) -> None\n```\nThis parameter can be used to populate next_actions for the board from an external source like an agent.","ad87a857":"# Final Thoughts\nThat about covers things! Please let me know if you have any questions, comments, or suggestions for the Halite SDK (or this tutorial) in the discussion for this notebook or [on GitHub](https:\/\/github.com\/Kaggle\/kaggle-environments\/).","e1e6f452":"**Board.\\_\\_str__ Legend:**  \n* \u5927\u6587\u5b57 Shipyard \n* \u5c0f\u6587\u5b57 Ship  \n* \u6570\u5b57\u306e0-9\u306f\u30bb\u30eb\u4e0a\u306eHalite\u306e\u91cf \u6700\u5927\u5024\u306e9\u306f `Board.configuration.max_cell_halite` \u3067\u6c7a\u307e\u308a\u307e\u3059  \n* Player 1 is letter a\/A  \n* Player 2 is letter b\/B  \n* Player n is letter x\/X","4accfdc7":"# Halite SDK \u306b\u3064\u3044\u3066\n- \u3053\u306eSDK\u3067\u306f\u30b2\u30fc\u30e0\u306e\u30dc\u30fc\u30c9\u72b6\u614b\u3001\u79fb\u52d5\u3001\u885d\u7a81\u306e\u89e3\u6c7a\u306a\u3069\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3067\u304d\u307e\u3059\n- \u4f5c\u6210\u3057\u305fagent\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u5bfe\u6226\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3082\u53ef\u80fd\u3067\u3059\n- \u691c\u8a3c\u7528\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304f\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\n"}}