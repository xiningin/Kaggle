{"cell_type":{"b3734cca":"code","90368194":"code","a9d4d0dd":"code","79268d41":"code","bc9d9d2d":"code","f6b8e9c5":"code","29a26db2":"code","242436e7":"code","467ae142":"code","05ba7484":"code","8fee75ba":"code","e491130b":"code","887a1b8a":"code","ecff6bfc":"code","b101d0a1":"code","dd244fb1":"code","676a1d90":"code","c0244972":"code","3105455d":"code","d207c65d":"code","6aff9776":"code","e7e25528":"code","1cb32c88":"code","4a01521e":"markdown","144b2268":"markdown","79522917":"markdown","096dfa56":"markdown","05596630":"markdown","7f6742c7":"markdown","b0f5ad5b":"markdown","22417647":"markdown","d23b58c7":"markdown","746eeb02":"markdown","565e3a65":"markdown","da4ae2d8":"markdown","f6e5b4cc":"markdown","1ce815ca":"markdown","162fe83e":"markdown","745e81b1":"markdown","fb92dd56":"markdown","b84f0578":"markdown","3f542a22":"markdown","82bd8468":"markdown","e5f4960f":"markdown","e2addb9b":"markdown","6e7459e1":"markdown"},"source":{"b3734cca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#import biblioth\u00e8que pour DataViz\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.DistanceMetric.html\nfrom sklearn.neighbors import DistanceMetric\nfrom math import radians","90368194":"df_initial=pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndf=df_initial\ndf.head()\n","a9d4d0dd":"# description du set de donn\u00e9es\ndf.info()","79268d41":"# description du set de donn\u00e9es\ndf.describe()","bc9d9d2d":"df_loc=pd.read_csv('..\/input\/aus-town-gps\/aus_town_gps.csv',sep=',')\ndf_loc.head()","f6b8e9c5":"df_loc['Latitude']=np.radians(df_loc['Latitude'])\ndf_loc['Longitude']=np.radians(df_loc['Longitude'])\n\ndist = DistanceMetric.get_metric('haversine')","29a26db2":"df_loc[['Latitude','Longitude']].to_numpy()","242436e7":"df_loc_dist=pd.DataFrame(dist.pairwise(df_loc[['Latitude','Longitude']].to_numpy())*6373,  columns=df_loc.Location.unique(), index=df_loc.Location.unique())\ndf_loc_dist","467ae142":"#Cr\u00e9ation liste des colonnes \u00e0 \u00e9tudier\ndf_evap=df[['Location','Evaporation']]\n#df_evap=df_evap[df['Evaporation']=='NA']\ndf_evap['isna']=(df['Evaporation'].isna()==True)*1\ndf_evap\n#\n#Tracer des Na pour ces quatres colonnes par ordre d\u00e9croissant suivant la ville\nfig,ax1=plt.subplots(figsize=(20,20))\nsns.countplot(y='Location',hue='isna',ax=ax1,data=df_evap,orient='h');","05ba7484":"#Cr\u00e9ation liste des colonnes \u00e0 \u00e9tudier\ndf_sunshine=df[['Location','Sunshine']]\n#df_evap=df_evap[df['Evaporation']=='NA']\ndf_sunshine['isna']=(df['Sunshine'].isna()==True)*1\ndf_sunshine\n#\n#Tracer des Na pour ces quatres colonnes par ordre d\u00e9croissant suivant la ville\nfig,ax1=plt.subplots(figsize=(20,20))\nsns.countplot(y='Location',hue='isna',ax=ax1,data=df_sunshine,orient='h');","8fee75ba":"#Cr\u00e9ation liste des colonnes \u00e0 \u00e9tudier\ndf_cloud9=df[['Location','Cloud9am']]\n#df_evap=df_evap[df['Evaporation']=='NA']\ndf_cloud9['isna']=(df['Cloud9am'].isna()==True)*1\ndf_cloud9\n#\n#Tracer des Na pour ces quatres colonnes par ordre d\u00e9croissant suivant la ville\nfig,ax1=plt.subplots(figsize=(20,20))\nsns.countplot(y='Location',hue='isna',ax=ax1,data=df_cloud9,orient='h');","e491130b":"#Cr\u00e9ation liste des colonnes \u00e0 \u00e9tudier\ndf_cloud3=df[['Location','Cloud3pm']]\n#df_evap=df_evap[df['Evaporation']=='NA']\ndf_cloud3['isna']=(df['Cloud3pm'].isna()==True)*1\ndf_cloud3\n#\n#Tracer des Na pour ces quatres colonnes par ordre d\u00e9croissant suivant la ville\nfig,ax1=plt.subplots(figsize=(20,20))\nsns.countplot(y='Location',hue='isna',ax=ax1,data=df_cloud3,orient='h');","887a1b8a":"#Code de Lionel\n#cr\u00e9ation d'un dictionnaire associant la direction du vent \u00e0 l'angle correspondant (en degr\u00e9s) sur le cercle trigonom\u00e9trique (ie. E=0\u00b0 et rotation dans le sens direct)\nangles = {'E':0, \n          'ENE':22.5, \n          'NE':45, \n          'NNE':67.5, \n          'N':90, \n          'NNW':112.5, \n          'NW':135, \n          'WNW':157.5, \n          'W':180, \n          'WSW':202.5, \n          'SW':225, \n          'SSW':247.5, \n          'S':270, \n          'SSE':292.5, \n          'SE':315, \n          'ESE':337.5}\n#ajout des variables indiquant l'angle du vent au DF\ndf['WindGust_Ang']=df['WindGustDir'].map(angles)\ndf['Wind9am_Ang'] = df['WindDir9am'].map(angles)\ndf['Wind3pm_Ang'] = df['WindDir3pm'].map(angles)\ndf","ecff6bfc":"colInter=['MinTemp','MaxTemp','Rainfall','WindGustSpeed','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Temp9am','Temp3pm','WindGust_Ang','Wind9am_Ang','Wind3pm_Ang']\n\ndf_inter=df[colInter]\ndf_inter\ndf_inter.info()\n\n\n    ","b101d0a1":"df_inter.interpolate(method='linear',inplace=True)\ndf_inter","dd244fb1":"df_inter.info()","676a1d90":"df[colInter]=df_inter[colInter]\ndf.info()\n","c0244972":"df=df.dropna(subset=['RainTomorrow'])\ndf.info()","3105455d":"df['RainToday_Num'] = (df['Rainfall'] >  1)*1\n\n","d207c65d":"df['RainTomorrow_Num'] = (df['RainTomorrow'] =='Yes')*1\ndf","6aff9776":"df.describe()","e7e25528":"df_noNa=df.dropna()\ndf_noNa","1cb32c88":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nplt.figure(figsize=(15,15))\n\nplt.subplot(2,1,1)\n\ncor_Na=df_noNa.corr()\n\nsns.heatmap(cor_Na,annot=True,cmap='coolwarm');\n\nplt.subplot(2,1,2)\n\ncor=df.corr()\n\nsns.heatmap(cor,annot=True,cmap='coolwarm');","4a01521e":"**Chargement des sets de donn\u00e9es**\nChargement du set de donn\u00e9es de notre projet 'weatherAUS.csv': \n* df qui sera le dataframe qui sera modifi\u00e9 dans notre projet\n* df_initial pour conserver le set de donn\u00e9es initial","144b2268":"* Cloud9am","79522917":"Gestion des NA:\nNous travaillons sur des donn\u00e9es temporelles et localis\u00e9es, je propose donc le plan suivant:\n1. Suppression des colonnes sunshine\/evaporation\/cloud 9am & 3pm car trop de NA: plus de 50% ? A d\u00e9battre. Ces colonnes peuvent \u00eatre n\u00e9cessaires tout de m\u00eame \u00e0 des alogorithmes de type random forest \/ k plus proches voisins \/ r\u00e9seau de neurones avec NA=0\n2. Utilisation de la fonction interpolate avec filtrage\n\n","096dfa56":"Cette table de distance pourra \u00eatre exploit\u00e9 si n\u00e9cessaire par la suite","05596630":"Est-ce que la modification du dataframe change la corr\u00e9lation des donn\u00e9es: r\u00e9ponse \/ non","7f6742c7":"* Sunshine","b0f5ad5b":"* conversion direction vent en angles","22417647":"**Chargement des sets de donn\u00e9es**\nChargement d'un set de donn\u00e9es GPS des stations m\u00e9t\u00e9o: \n* df qui sera le dataframe qui sera modifi\u00e9 dans notre projet\n* df_initial pour conserver le set de donn\u00e9es initial","d23b58c7":"suppression des lignes avec raintomorrow = NA","746eeb02":"Transfert des colonnes sans NA dans df","565e3a65":"* Affectation des variables qui seront interpol\u00e9es \u00e0 la liste colInter puis cr\u00e9ation d'un dataframe sp\u00e9cifique pour l'interpolation","da4ae2d8":"* Cloud3pm","f6e5b4cc":"Conversion de la latitude et longitude en radians","1ce815ca":"**Stations non \u00e9quip\u00e9es pour la mesure de la couverture nuageuse \u00e0 9 am:**\nBadgryscreek,NorahHead,Penrith,Tuggeranong,Mountginini,Nhil,Dartmoor,Goldcoast,Adelaide, Witchcliffe,Salmonguns,Walpole","162fe83e":"**Les stations non \u00e9quip\u00e9es pour mesurer la couverture nuageuse \u00e0 9am et \u00e0 3pm sont les m\u00eames**\n\n**De mani\u00e8re g\u00e9n\u00e9rale, les stations suivantes sont moins bien \u00e9quip\u00e9es avec aucune capacit\u00e9 de mesure de l'\u00e9vaporation, l'ensoleillement et de la couverture nuageuse:\n\nBadgryscreek,NorahHead,Penrith,Tuggeranong,Mountginini,Nhil,Goldcoast,Witchcliffe,Salmonguns,Walpole","745e81b1":"**Stations non \u00e9quip\u00e9es pour la mesure de la couverture nuageuse \u00e0 3 pm:**\nBadgryscreek,NorahHead,Penrith,Tuggeranong,Mountginini,Nhil,Dartmoor,Goldcoast,Adelaide, Witchcliffe,Salmonguns,Walpole","fb92dd56":"Heatmap sur dataframe supprimant tous les NA pour voir des corelations (non prises en compte des NA)\n","b84f0578":"* interpolation lin\u00e9aire des Na pour les colonnes s\u00e9lectionn\u00e9es","3f542a22":"**Stations non \u00e9quip\u00e9es pour la mesure de l'\u00e9vaporation:**\nAlbury,Badgryscreek,Newcastle,NorahHead,Penrith,Wollogong,Tuggeranong,Mountginini,Ballarat,Nhil,Goldcoast,Witchcliffe,PearceRAAF,Salmonguns,Walpole, Uluru","82bd8468":"2. Traitements des Na","e5f4960f":"****Calcul des distances entre les villes \u00e0 partir de la formule d'Haversine et cr\u00e9ation une matrice de distance ville \u00e0 ville.\n\n[https:\/\/fr.wikipedia.org\/wiki\/Formule_de_haversine](https:\/\/fr.wikipedia.org\/wiki\/Formule_de_haversine)","e2addb9b":"**Stations non \u00e9quip\u00e9es pour la mesure de l'ensoleillement:**\nAlbury,Badgryscreek,Newcastle,NorahHead,Penrith,Richmond,Wollogong,Tuggeranong,Mountginini,Ballarat,Bendigo,Nhil,Goldcoast,Witchcliffe,Salmonguns,Walpole, Launceston,Katherine, Uluru","6e7459e1":"1.Exploration des Na sur colonnes Evaporation, Sunshine, Cloud9am, Cloud3pm\n\n* Evaporation"}}