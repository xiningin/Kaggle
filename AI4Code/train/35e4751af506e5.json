{"cell_type":{"a76a5b8f":"code","fd57c060":"code","85b57674":"code","d3462eca":"code","dc82c6e2":"code","c9b0fe57":"code","2752f791":"code","d32bb571":"code","27e3780d":"code","48071a76":"code","e3d5b81b":"code","fc6dae89":"code","0df48d22":"code","1e4193c6":"code","d6906e6d":"code","2e85207e":"code","9120789f":"code","8976d19d":"code","18d979da":"code","8473f59c":"code","baa8f573":"code","0c9ea18d":"code","72621b8b":"code","393d8885":"code","242381ad":"code","e8bd7317":"code","d2c5a484":"code","a7a2f752":"code","ff4d7b62":"code","cd6fc08e":"markdown","95c44f1a":"markdown","d236a1fb":"markdown","95d36d47":"markdown","c474a2c8":"markdown","cfe80976":"markdown","52003d21":"markdown","af00719b":"markdown"},"source":{"a76a5b8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom matplotlib import dates\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\n\nimport matplotlib\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd57c060":"# Installing D-tale\n!pip install dtale","85b57674":"df = pd.read_csv('..\/input\/cusersmarildownloadsprojectcsv\/project.csv', delimiter=';', encoding = \"utf8\")\ndf.tail()","d3462eca":"df.isnull().sum()","dc82c6e2":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.variable)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","c9b0fe57":"fig = px.bar(df, \n             x='year', y='unit', color_discrete_sequence=['#DC143C'],\n             title='Units Projections till 2050', text='sector')\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.show()","2752f791":"ax = df['sector'].value_counts()[:20].plot.barh(figsize=(12, 6), color='orange')\nax.set_title('Sectors', size=18, color='green')\nax.set_ylabel('Sector', size=10)\nax.set_xlabel('Count', size=10);","d32bb571":"ax = df['indicator'].value_counts()[:20].plot.barh(figsize=(12, 6), color='green')\nax.set_title('Indicators', size=18, color='orange')\nax.set_ylabel('Indicators', size=10)\nax.set_xlabel('Count', size=10);","27e3780d":"ax = df['variable'].value_counts()[:20].plot.barh(figsize=(12, 6), color='red')\nax.set_title('Variables', size=18, color='red')\nax.set_ylabel('Variables', size=10)\nax.set_xlabel('Count', size=10);","48071a76":"ax = df['unit'].value_counts()[:20].plot.barh(figsize=(12, 6), color='purple')\nax.set_title('Units', size=18, color='red')\nax.set_ylabel('Units', size=10)\nax.set_xlabel('Count', size=10);","e3d5b81b":"# D-Tale\nimport dtale\nimport dtale.app as dtale_app\ndtale_app.USE_NGROK = True\nimport gc  ","fc6dae89":"gc.collect() # For memory optimization","0df48d22":"# DTale EDA\ndtale.show(df).main_url()","1e4193c6":"# To kill the process\ndtale.get_instance(1).kill()","d6906e6d":"gc.collect() # For Memory Optimization","2e85207e":"dtale.show()","9120789f":"d =dtale.show()\nd","8976d19d":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=df,x='year', y=\"indicator\")\nplt.title ('Projected Indicators');\nplt.xticks(rotation=45);","18d979da":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=df,x='year', y=\"sector\", color= 'red')\nplt.title ('Projected Sectors');\nplt.xticks(rotation=45);","8473f59c":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=df,x='year', y=\"variable\", color= 'purple')\nplt.title ('Projected Variables');\nplt.xticks(rotation=45);","baa8f573":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=df,x='year', y=\"variable\", color= 'purple')\nplt.title ('Projected Variables');\nplt.xticks(rotation=45);","0c9ea18d":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=df,x='year', y=\"unit\", color= 'green')\nplt.title ('Projected Units');\nplt.xticks(rotation=45);","72621b8b":"CDioxide = df[(df['unit']=='kg CO2 \/ m2')].reset_index(drop=True)\nCDioxide.head()","393d8885":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=CDioxide,x='year', y=\"value\", color= 'green')\nplt.title ('Projected Carbon Dioxide');\nplt.xticks(rotation=45);","242381ad":"brazil = df[(df['country']=='BR')].reset_index(drop=True)\nbrazil.head()","e8bd7317":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=brazil,x='year', y=\"indicator\", color= 'green')\nplt.title ('Brazilian Projections till 2050 by Indicators');\nplt.xticks(rotation=45);","d2c5a484":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=brazil,x='year', y=\"sector\", color= 'yellow')\nplt.title ('Brazilian Projections till 2050 by Sector');\nplt.xticks(rotation=45);","a7a2f752":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=brazil,x='year', y=\"unit\", color= 'blue')\nplt.title ('Brazilian Projections till 2050 by Units');\nplt.xticks(rotation=45);","ff4d7b62":"#https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html\n\nsns.lineplot(data=brazil,x='year', y=\"variable\", color= 'red')\nplt.title ('Brazilian Projections till 2050 by Variables');\nplt.xticks(rotation=45);","cd6fc08e":"By the way, seems that Spider-Man gained a little bit weight in 2050. Which is absolutely fine. ","95c44f1a":"![](https:\/\/preview.redd.it\/38cwm3bdhfa31.jpg?auto=webp&s=745e47d534f3776f52b2cec00d5a13dcfc28afa0)reddit.com","d236a1fb":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #001f3f;\"><b style=\"color:orange;\">D-Tale<\/b><\/h1><\/center>\n\n\"D-Tale is the combination of a Flask back-end and a React front-end to bring you an easy way to view & analyze Pandas data structures. It integrates seamlessly with ipython notebooks & python\/ipython terminals. Currently this tool supports such Pandas objects as DataFrame, Series, MultiIndex, DatetimeIndex & RangeIndex.\"\n\n\n\"The source code is currently hosted on GitHub at: https:\/\/github.com\/man-group\/dtale\"\n\n\"Binary installers for the latest released version are available at the Python package index and on conda using conda-forge.\"\n\nhttps:\/\/pypi.org\/project\/dtale\/","95d36d47":"#Nothing Again.","c474a2c8":"#This chart is chaotic, though I expect that CO2 (Carbon dioxide) emissions decline till 2050, as shown above.","cfe80976":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcREO1hvaczcEdrtL018unUFKnOEagbW6Qb-5g&usqp=CAU)giga-hamburg.de","52003d21":"#How many of us will be still Kaggling in 2050?\n\n![](https:\/\/i.redd.it\/8lypsg46aaz21.jpg)cataclysmeme.wordpress.com","af00719b":"#Unfortunately, there is NO Show for Dtale in my Kaggle Notebook."}}