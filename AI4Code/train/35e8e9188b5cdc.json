{"cell_type":{"ba070846":"code","3c15ecb2":"code","edd58d22":"code","abbe5381":"code","61352467":"code","7cb2a1c7":"code","d90df59f":"code","caf42018":"code","23a86e01":"markdown","563a30f5":"markdown","824ad9fd":"markdown","e293ce5b":"markdown","501cdc94":"markdown"},"source":{"ba070846":"import os\nimport re\nfrom sklearn.model_selection import StratifiedKFold\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport shutil\nfrom functools import partial\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import class_weight\nfrom kaggle_datasets import KaggleDatasets","3c15ecb2":"# Old Data \n# Making a df of all he images\nos.listdir('..\/input\/cassavaold\/train\/train\/cbb')\n\ndf = pd.DataFrame(columns = ['image_id', 'label'])\n\ndf = pd.concat([pd.DataFrame({'image_id': '..\/input\/cassavaold\/train\/train\/cbb\/'+pd.Series(os.listdir('..\/input\/cassavaold\/train\/train\/cbb')),\n                             'label':0}),\n                pd.DataFrame({'image_id': '..\/input\/cassavaold\/train\/train\/cbsd\/'+pd.Series(os.listdir('..\/input\/cassavaold\/train\/train\/cbsd')),\n                             'label':1}),\n               pd.DataFrame({'image_id': '..\/input\/cassavaold\/train\/train\/cgm\/'+pd.Series(os.listdir('..\/input\/cassavaold\/train\/train\/cgm')),\n                             'label':2}),\n               pd.DataFrame({'image_id': '..\/input\/cassavaold\/train\/train\/cmd\/'+pd.Series(os.listdir('..\/input\/cassavaold\/train\/train\/cmd')),\n                             'label':3}),\n               pd.DataFrame({'image_id': '..\/input\/cassavaold\/train\/train\/healthy\/'+pd.Series(os.listdir('..\/input\/cassavaold\/train\/train\/healthy')),\n                             'label':4})]\n                           , axis=0, ignore_index=True)\ndisplay(df.head())\nprint(df.shape)\n","edd58d22":"df2 = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ndf2['image_id'] = \"..\/input\/cassava-leaf-disease-classification\/train_images\/\"+df2['image_id']\ndf2.shape","abbe5381":"df_merged = pd.concat([df,df2], axis=0, ignore_index=True)\ndf_merged.shape","61352467":"plt.figure(figsize=(10,10), dpi=80)\nfor img, label in zip(df_merged['image_id'], df_merged['label']): \n        display(label)\n        display(tf.keras.preprocessing.image.load_img(img))\n        break","7cb2a1c7":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","d90df59f":"def serialize_example(feature0, feature1, feature2):\n  feature = {\n      'image': _bytes_feature(feature0),\n      'image_name': _bytes_feature(feature1),\n      'label': _int64_feature(feature2)\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","caf42018":"database_base_path = '\/kaggle\/input\/cassava-leaf-disease-classification\/'\nPATH = f'{database_base_path}train_images\/'\nIMGS = df_merged['image_id'].tolist()\nN_FILES = 15\nHEIGHT, WIDTH = (512, 512)\nIMG_QUALITY = 100\nprint('No of Images - ', len(IMGS))\ntrain = df_merged.copy()\ndisplay(train.head())\n\n\nfolds = StratifiedKFold(n_splits=N_FILES, shuffle=True, random_state=123)\ntrain['file'] = -1\n\nfor fold_n, (train_idx, val_idx) in enumerate(folds.split(train, train['label'])):\n    print('File: %s has %s samples' % (fold_n+1, len(val_idx)))\n    train['file'].loc[val_idx] = fold_n\n    \ntrain.to_csv('train.csv', index=False)\n\n# Writing to TFRecords\nfor tfrec_num in range(N_FILES):\n    print('\\nWriting TFRecord %i of %i...'%(tfrec_num, N_FILES))\n    samples = train[train['file'] == tfrec_num]\n    n_samples = len(samples)\n    print(f'{n_samples} samples')\n    \n    with tf.io.TFRecordWriter('Id_train%.2i-%i.tfrec'%(tfrec_num, n_samples)) as writer:\n        for row in samples.itertuples():\n            label = row.label\n            image_name = row.image_id\n            img_path = image_name\n            \n            img = cv2.imread(img_path)\n            img = cv2.resize(img, (HEIGHT, WIDTH))\n            img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, IMG_QUALITY))[1].tostring()\n            \n            example = serialize_example(img, str.encode(image_name), label)\n            writer.write(example)","23a86e01":"# Importing Libraries","563a30f5":"# Reading Old Data","824ad9fd":"# Merging Both","e293ce5b":"# Reading New Cassava Data","501cdc94":"# Code For Writing TFRecord"}}