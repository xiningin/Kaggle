{"cell_type":{"4b56395e":"code","db862bdd":"code","805d7771":"code","ae1a1acc":"code","5bbc03e6":"code","88f43c90":"code","fcca2750":"code","a94651a7":"code","a67373ed":"code","4d5d9c95":"code","626a6025":"code","d1553f7c":"code","7f813e45":"code","21f710fc":"code","73e4b7c3":"markdown","fef8f818":"markdown","c41b969b":"markdown","04d813be":"markdown","e4c7af11":"markdown","03cd1f08":"markdown","1185a3a7":"markdown","68ac172a":"markdown","e28a8038":"markdown","bba7ebc6":"markdown","9d228b3b":"markdown","99f0645d":"markdown"},"source":{"4b56395e":"from IPython.display import Image\nImage(\"..\/input\/covid19\/photo-1584036561566-baf8f5f1b144.jpeg\", width = \"800px\")","db862bdd":"import folium\nimport operator \nimport folium as f\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import HTML","805d7771":"Input_Data1 = pd.read_csv('..\/input\/coronavirusdataset\/TimeGender.csv')\nInput_Data1.head()","ae1a1acc":"Input_Data = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\nInput_Data.head()","5bbc03e6":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')\n","88f43c90":"male = 0\nfemale = 0\nmale_confirmed = []\nmale_deceased = []\nfemale_confirmed = []\nfemale_deceased = []\n\nfor i in range (len(Input_Data1[\"sex\"])):\n    if Input_Data1[\"sex\"][i] == 'male':\n        male = male + 1\n        male_confirmed.append(Input_Data1[\"confirmed\"][i])\n        male_deceased.append(Input_Data1[\"deceased\"][i])\n    else:\n        female = female  + 1\n        female_confirmed.append(Input_Data1[\"confirmed\"][i])\n        female_deceased.append(Input_Data1[\"deceased\"][i])","fcca2750":"df = pd.DataFrame([sum(male_confirmed),sum(male_deceased)], index=['confirmed case', 'Death case'], columns=['Male Data Analysis'])\ndf.plot(kind='bar', subplots=True, figsize=(10, 10))\n","a94651a7":"df = pd.DataFrame([sum(female_confirmed),sum(female_deceased)], index=['confirmed case', 'Death case'], columns=['Female Data Analysis'])\ndf.plot(kind='bar', subplots=True, figsize=(10, 10))","a67373ed":"def people_count(Cloumn_name):\n    _people_count = 0\n    for i in Cloumn_name:\n        _people_count = _people_count + i\n    return _people_count\n\ndef COVID_analysis(Column_name,_Column_name):\n    Local_Country = []\n    Local_List = []\n    for i in range(len(Column_name)):\n        if Column_name[i] > 0 :\n            Local_List.append(Column_name[i])\n            Local_Country.append(_Column_name[i])\n            \n    return Local_List, Local_Country\n\ndef InsertionSort(arr): \n    for i in range(1, len(arr)):\n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key  \n    return arr\ndef Remove_Duplication(_Permanent_List, _Permanent_List_, Date_List_):\n    _Country = []\n    _list = []\n    Confirmed_Count = []\n    for i in range(len(b)): \n        if not (_Permanent_List[i] in _Country):\n            _list.append(_Permanent_List[i])\n            Confirmed_Count.append(Permanent_List_[i])\n    return _Country, Confirmed_Count\nNo_confirmed_case = people_count(Input_Data[\"Confirmed\"])\nNo_Recovered_case = people_count(Input_Data[\"Recovered\"])\nNo_Death_case = people_count(Input_Data[\"Deaths\"])","4d5d9c95":"print(\"Number of People Affected by COVID-19:\"+\" \"+str(No_confirmed_case))\nprint(\"-------------------------------------------------------------------------------------\\n\\n\")\nprint(\"Number of People Recovered From COVID-19:\"+\" \"+str(No_Recovered_case))\nprint(\"-------------------------------------------------------------------------------------\\n\\n\")\nprint(\"Number of People Died for COVID-19:\"+\" \"+str(No_Death_case))\nprint(\"-------------------------------------------------------------------------------------\")","626a6025":"country_confirmed_cases = []\ncountry_death_cases = [] \ncountry_active_cases = []\ncountry_recovery_cases = []\ncountry_mortality_rate = [] \n\nlatest_data = Input_Data\nunique_countries =  list(latest_data['Country\/Region'].unique())\n\nno_cases = []\nfor i in unique_countries:\n    cases = latest_data[latest_data['Country\/Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_data[latest_data['Country\/Region']==unique_countries[i]]['Confirmed'].sum()\n    country_death_cases.append(latest_data[latest_data['Country\/Region']==unique_countries[i]]['Deaths'].sum())\n    country_recovery_cases.append(latest_data[latest_data['Country\/Region']==unique_countries[i]]['Recovered'].sum())\n    country_active_cases.append(country_confirmed_cases[i] - country_death_cases[i] - country_recovery_cases[i])\n    country_mortality_rate.append(country_death_cases[i]\/country_confirmed_cases[i])\n#Data table\n\ncountry_df = pd.DataFrame({'Country Name': unique_countries, 'Number of Confirmed Cases': country_confirmed_cases,\n                          'Number of Deaths': country_death_cases, 'Number of Recoveries' : country_recovery_cases, \n                          'Number of Active Cases' : country_active_cases,\n                          'Mortality Rate': country_mortality_rate})\n\n# number of cases per country\/region\n\ncountry_df.style.background_gradient(cmap='Greens')","d1553f7c":"Confirmed_cases_count, Confirmed_cases_Country = COVID_analysis(Input_Data[\"Confirmed\"],Input_Data[\"Country\/Region\"])\nRecovered_case_count, Date_Cases = COVID_analysis(Input_Data[\"Recovered\"],Input_Data[\"Date\"])\nDeath_case_count, Date_Cases = COVID_analysis(Input_Data[\"Deaths\"],Input_Data[\"Date\"])\n\na_ = InsertionSort(Confirmed_cases_count)\nb_ = InsertionSort(Recovered_case_count)\nc_ = InsertionSort(Death_case_count)\n\n_Confirmed_List = a_[::-1]\n_Recovered_List_ = b_[::-1]\n_Death_List_ = c_[::-1]\n_Country_List = Confirmed_cases_Country[::-1]\nDate_Cases_list = Date_Cases[::-1]\n\n_Confirmed_cases_count = []\n_Confirmed_cases_Country = []\n_Death_case_count = []\n_Date_Cases = []","7f813e45":"names='confirmed', 'Recovered', 'Death',\nsize=[No_confirmed_case,No_Recovered_case,No_Death_case]\n\n\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(size, labels=names, colors=['orange','green','blue'])\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.title(\"Total number of cases\", size = 20)\nplt.show()","21f710fc":"map = folium.Map(location=[20.5937, 78.9629], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, lon,state,Confirmed,Recovered,Deaths in zip(Input_Data['Lat'], Input_Data['Long'],Input_Data['Country\/Region'],Input_Data['Confirmed'],Input_Data['Recovered'],Input_Data['Deaths']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='YlOrRd',\n                      popup =(\n                    'State: ' + str(state) + '<br>'\n                    'Confirmed: ' + str(Confirmed) + '<br>'\n                      'Recovered: ' + str(Recovered) + '<br>'\n                      'Deaths: ' + str(Deaths) + '<br>'),\n\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(map)\nmap","73e4b7c3":"# Folium\n## Folium is a powerful Python library that helps you create several types of Leaflet maps. ... To get an idea, just zoom\/click around on the next map to get an impression. The Folium github contains many other examples. By default, Folium creates a map in a separate HTML file.\n## Documentation Link: https:\/\/python-visualization.github.io\/folium\/","fef8f818":"## What is Novel Coronavirus?\nThe novel coronavirus (provisionally named 2019-nCoV) is a contagious virus that causes respiratory infection. It has been identified as the causative agent of the ongoing 2019\u201320 Wuhan coronavirus outbreak.\n\nAs many early cases were linked to a large seafood and animal market, the virus is thought to have a zoonotic origin, but this has not been confirmed. Comparisons of the genetic sequences of this virus and other virus samples have shown similarities to SARS-CoV (79.5%) and bat coronaviruses (96%), which makes an ultimate origin in bats likely.\n\nThe first known human infection occurred in December 8, 2019. An outbreak of 2019-nCoV was first detected in Wuhan, China, in mid-December 2019.The virus subsequently spread to all other provinces of China and to more than twenty other countries in Asia, Europe, North America, and Oceania. Human-to-human spread of the virus has been confirmed in China, Germany, Thailand, Taiwan, Japan, and the United States.\n\nAs of 1 February 2020, there were 12,024 confirmed cases of infection, of which 11,860 were within mainland China. Cases outside China, to date, were people who have either travelled from Wuhan, or were in direct contact with someone who travelled from the area. The number of deaths was 259 as of 1 February 2020.\n\n**Source:** https:\/\/en.wikipedia.org\/wiki\/Novel_coronavirus_(2019-nCoV)","c41b969b":"# Number of cases per country","04d813be":"# Pandas\n## In computer programming, pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series. It is free software released under the three-clause BSD license.\n## Documentation Link: https:\/\/pandas.pydata.org\/docs\/\n\n","e4c7af11":"# Total Case's","03cd1f08":"# Data Analysis","1185a3a7":"# COVID Case's","68ac172a":"# Map Data","e28a8038":"# Matplotlib\n## Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n## Documentation Link: https:\/\/matplotlib.org\/","bba7ebc6":"# Data Visualisation HTML","9d228b3b":"# Seaborn\n## Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n## Documentation Link: https:\/\/seaborn.pydata.org\/","99f0645d":"# Loading The Dataset"}}