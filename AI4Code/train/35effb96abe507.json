{"cell_type":{"0e39e17d":"code","c04711a5":"code","29cb1f06":"code","5bf80de2":"code","67bb266d":"code","73795128":"code","8ba544cd":"code","17d9719e":"code","683906c3":"code","91feca25":"code","fa35a983":"code","245208a7":"code","d0336bae":"code","cd1197ac":"code","e5670abc":"code","fee18092":"code","254d6f67":"code","a32adcd1":"code","a3a1fd91":"code","3b3d108b":"code","19653878":"code","f36bf576":"code","ec133c85":"code","64d89c70":"code","9ad5d48b":"code","b428416c":"code","5b22a0ac":"code","fa48107d":"code","db8a384d":"code","c095bc80":"markdown","128fbea7":"markdown","be73aa95":"markdown","18e661a7":"markdown","c1d6d0aa":"markdown","84887b36":"markdown","5fd40738":"markdown","4d19c649":"markdown","dc564a62":"markdown","decd6d0a":"markdown","ff7278ef":"markdown","db842d1e":"markdown","1570f3a5":"markdown","664d5e91":"markdown","00bcecee":"markdown","3e3bf6ce":"markdown","44d1d9ba":"markdown","ad5ae32b":"markdown","13b5d5ff":"markdown","44731129":"markdown","65f5597b":"markdown","93b7fee8":"markdown","2b30cee0":"markdown","fefeaae2":"markdown","a58f0194":"markdown","6f48cab6":"markdown","6f91e528":"markdown","a13202e9":"markdown","54910317":"markdown","0a1dcb37":"markdown","f8d050be":"markdown","210a63e5":"markdown","c55decd1":"markdown"},"source":{"0e39e17d":"# TYPE your import steps here\n# <Code begin>\n\n\n\n# <Code end>\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/playing-tennis\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c04711a5":"import warnings\n\nwarnings.filterwarnings('ignore')","29cb1f06":"#Loading the PlayTennis data using read_csv()\n# TYPE your code here. Check the file path from first step\n# <Code begin>\n\nPlayTennis =  # <read into this dataframe variable>\n\n# <Code end>","5bf80de2":"# TYPE your code here to view first few rows\n# <Code begin>\n\n \n\n# <Code end>","67bb266d":"# TYPE your code here to view last few rows\n# <Code begin>\n\n \n\n# <Code end>","73795128":"# TYPE your code here to view the shape\n# <Code begin>\n\n \n\n# <Code end>\n\n#(Observations, attributes)","8ba544cd":"# TYPE your code here to Print a concise summary of a DataFrame using info()\n# <Code begin>\n\n \n\n# <Code end>","17d9719e":"# TYPE your code here to look for duplicate records using duplicated()\n# <Code begin>\n\n \n\n# <Code end>","683906c3":"# TYPE your code here to Generate descriptive statistics to see the #unique, #frequent values for each categorical column using .describe()\n# <Code begin>\n\n\n# <Code end>","91feca25":"# TYPE your code here to view the frequency distribution of each column using value_counts().Hint: use for loop to go over each column\n# Access columns of a dataframe using the command PlayTennis.columns where PlayTennis is the name of the dataframe\n# <Code begin>\n\n\n# <Code end>","fa35a983":"# TYPE your code here to view the frequency distribution in a graphical plot using countplot(). Similar steps as previous cell.\n# <Code begin>\n\n\n# <Code end>","245208a7":"#Analysis on categorical data\n# TYPE your code here to view the frequency distribution for each class label 'play' in a graphical plot using countplot(). \n# Hint: Similar steps as previous cell. Use hue as 'play' and Use appropriate title for the plots\n# <Code begin>\n\n\n# <Code end>","d0336bae":"#Encoding ordinal categorical values using simple replace. This will preserve the order of values as compared to other encoding techniques.\n\ncatg_to_nums = {\"outlook\": {'rainy':0 ,'overcast':1,'sunny':2},\n                \"temp\": {'cool':0,'mild':1,'hot':2},\n                \"humidity\": {'normal': 0,'high': 1},\n                \"windy\": {False: 0,True: 1},\n                \"play\": {'no': 0, 'yes': 1}}\n\nPlayTennis_obj = PlayTennis.replace(catg_to_nums)","cd1197ac":"df_spearmanr = pd.DataFrame(stats.spearmanr(PlayTennis_obj)[0], index = PlayTennis_obj.columns, columns = PlayTennis_obj.columns)\n\nplt.figure(figsize=(7,7))\nax= sns.heatmap(df_spearmanr, vmax=.8, square = True, fmt = '.2f', annot = True, \n                linecolor = 'white', linewidths = 0.01)\nplt.title('Cross correlation between categorical values')","e5670abc":"PlayTennis_obj.head()","fee18092":"# TYPE your code here to assign the X and y variables. Dont convert them to numpy arrays in this step\n# <Code begin>\n\n\n# <Code end>","254d6f67":"from sklearn.model_selection import train_test_split\n\n# TYPE your code here to split the dataset into X_train, X_test, y_train, y_test\n# <Code begin>\n\nX_train, X_test, y_train, y_test = \n\n# <Code end>","a32adcd1":"# TYPE your code here to check the shape of X_train and X_test\n# <Code begin>\n\n\n# <Code end>\n# Is it ((9, 4), (5, 4)) ?","a3a1fd91":"from sklearn.tree import DecisionTreeClassifier\n\n# TYPE your code here to instantiate the DecisionTreeClassifier model with criterion gini index and fit on X_train and y_train\n# <Code begin>\n\n# instantiate the DecisionTreeClassifier model with criterion gini index\nclf =\n\n# fit the model\n\n# <Code end>","3b3d108b":"# TYPE your code here to predict on X_test\n# <Code begin>\n\ny_pred = \n\n# <Code end>","19653878":"from sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","f36bf576":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(clf.score(X_train, y_train)))\nprint('Test set score: {:.4f}'.format(clf.score(X_test, y_test)))","ec133c85":"# We can visualize the tree using tree.plot_tree\nplt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf)","64d89c70":"import graphviz \ndot_data = tree.export_graphviz(clf, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=['no','yes'], \n                              filled=True, rounded=True)\n\ngraph = graphviz.Source(dot_data) \ngraph.render(\"gini\")\ngraph ","9ad5d48b":"from sklearn.metrics import confusion_matrix\n\n\n# TYPE your code here to build confusion matrix between the actual and predicted target class\n# <Code begin>\n\nconfusion_matrix = \n\n# <Code end>\n\n\nfig, ax = plt.subplots(figsize=(3,3))\n\nsns.heatmap(confusion_matrix, annot=True, fmt='d', xticklabels=np.unique(y_pred), \n            yticklabels=np.unique(y_test), linewidths = 0.7, linecolor = 'black', \n            cmap = 'YlGnBu')\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nplt.show()","b428416c":"from sklearn.metrics import classification_report\n\n# TYPE your code here to print classification_report between the actual and predicted target class\n# <Code begin>\n\n\n# <Code end>","5b22a0ac":"#Decoding the ordinal categorical values using simple replace.\nnums_to_catg = {\"outlook\": {0:'rainy' ,1: 'overcast', 2: 'sunny'},\n                \"temp\": {0: 'cool',1:'mild',2:'hot'},\n                \"humidity\": {0:'normal',1:'high'},\n                \"windy\": {0:False,1:True},\n                \"play\": {0:'no', 1:'yes'},\n                \"play_pred\": {0:'no', 1:'yes'}}","fa48107d":"#This step shows the Actual and predicted class for all test observations\nPlayTennis_test = pd.concat([X_test.reset_index(drop=True), y_test.reset_index(drop=True), pd.DataFrame(y_pred, columns=['play_pred'])], axis = 1)\nPlayTennis_test = PlayTennis_test.replace(nums_to_catg)\nPlayTennis_test","db8a384d":"#This step shows all training observations. You will see the train and test observations were different and \n# the model was able to learn based on the patterns it saw\n\nPlayTennis_train = pd.concat([X_train.reset_index(drop=True), y_train.reset_index(drop=True)], axis = 1)\nPlayTennis_train = PlayTennis_train.replace(nums_to_catg)\nPlayTennis_train","c095bc80":"## 2. Load the csv file into a pandas DataFrame","128fbea7":"**Check accuracy score on test set**","be73aa95":"**Visualize the frequency distribution using seaborn's countplot()**","18e661a7":"## 7. Split data into train and test set","c1d6d0aa":"[GraphViz](https:\/\/www.graphviz.org\/) gives a better and clearer Graph.","84887b36":"**Bivariate Analysis**  \nLets look at the correlation between class variable with other features using seaborn's countplot()","5fd40738":"## 10. Analyze the incorrect predictions","4d19c649":"Basic packages like pandas, numpy, matplotlib, seaborn, scipy.stats (for Spearman correlation) and sklearn (scikit-learn) are imported here","dc564a62":"- 0.8 to 1 -> very high positive correlation    \n- 0.5 to 0.8 -> moderate positive correlation  \n- .> 0 to 0.5 -> weak positive correlation  \n- 0 - no correlation  \n- -0.5 to < 0 -> weak negative correlation  \n- -0.8 to -0.5 -> moderate negative correlation  \n- -1 to -0.8 -> very high negative correlation  ","decd6d0a":"# **Implementing Decision Tree using Scikit Learn on PlayTennis dataset**\n\n**About the dataset**  \nThis dataset contains some information on the the local weather such as outlook, temperature, humidity and windy along with a label if the condition permits you to play outdoor tennis.\n\n![image.png](attachment:d423051d-b7a1-4e1c-9643-64fb8712e2c3.png)\n\nWe will build a simple tree based model that can predict if the weather permits to play outdoor tennis. ","ff7278ef":"Are you able to follow through the tree logic to understand how the model learned from the training data?","db842d1e":"## Follow below steps to load your csv file into Kaggle environment.\n1. Click 'Add data' on the right pane besides the 'Data' option.\n2. Click 'Upload a dataset'\n3. Enter Dataset title as 'playing-tennis' and drag and drop the 'PlayTennis.csv' file into the window  \n4. Select 'Skip duplicates' and change to 'include duplicates' and confirm","1570f3a5":"## 6. Declare feature vector and target variable","664d5e91":"**Is the model over-fitting? Try to remove the max_depth and evaluate the model performance. Is it overfitting now?**","00bcecee":"Lets split the data and its coresponding prediction values.\n* X - holds the training data.\n* y - holds all the decisions.","3e3bf6ce":"#### Spearman correlation: Calculate strong relationship between 2 categorical variables using statistical approach\n* What are your observations in correlation?","44d1d9ba":"## 9. Evaluate the model - Confusion Matrix and Classification report","ad5ae32b":"1. Does the dataset have more windy days?\n2. Is there a imbalance in the class labels?\n3. Do you see any correlation between any of the features to the target class (play)?","13b5d5ff":"To build and evaluate a model, we need to create a Train and test set.  \nSplit of dataset into Train:Test ratio as 70:30 with random seed as 23 using sklearn.model_selection.train_test_split()","44731129":"## 5. Exploratory Data analysis","65f5597b":"## 3. Print the dataset that was just loaded to view if it was loaded as expected","93b7fee8":"## 1. First lets start with importing the needed python libraries","2b30cee0":"**Type your Observation here:**\n\n\n\n\n","fefeaae2":"**Univariate analysis**  \nLook at the frequency distribution of each attribute using value_counts()","a58f0194":"**Type your Observation here:**\n\n\n\n\n","6f48cab6":"**macro avg**  - Compute for each label, and returns the average without considering the proportion for each label in the dataset.  \n**weighted avg** - Compute for each label, and returns the average considering the proportion for each label in the dataset.","6f91e528":"**View of what the model learnt**","a13202e9":"**Predict on test set**","54910317":"## 4. Explore the shape, high level summary of the dataset.\n  * How many observations and attributes are in the dataset\n  * Are there any missing information?\n  * What are the data types for each column?\n  * Are there any duplicate records?\n  * Are there any unwanted columns that needs to be removed \/ dropped?","0a1dcb37":"Build a Decision Tree model with below hyper parameters\n   - criterion = gini\n   - random seed = 42\n   - max tree depth = 3","f8d050be":"**Visualize the tree**","210a63e5":"**Type your Observation here:**\n\n\n\n\n","c55decd1":"## 8. Decision Tree modeling"}}