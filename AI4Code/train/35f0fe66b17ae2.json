{"cell_type":{"d63235d2":"code","5c7631ad":"code","b3c3f20b":"code","12fedb27":"code","30eeae59":"code","663c54f6":"code","dfcb64f9":"code","a183e0f1":"code","53ce49ec":"code","055c84e2":"code","eb9347bc":"code","7c59244a":"code","83c23e5c":"code","96d52317":"code","2519114b":"code","ddf14da5":"code","a163e9a7":"code","b6126fec":"code","f007a8d9":"code","b023724b":"code","6948e32a":"code","708e7ef6":"code","2bcb701e":"code","96bc9edb":"code","f00fd5cf":"code","00eb0aba":"code","4f7d9264":"code","7a2bd8b5":"code","b36a1cbd":"code","f7c01e54":"code","8389d9d0":"code","14ed033f":"code","4976d065":"code","79a3fe59":"code","a6eec986":"code","f6f5b43e":"code","4941c516":"code","a511030e":"code","13a7d71f":"code","b16b8b32":"code","6d9a806b":"code","8fb6795d":"code","03687ddb":"code","b4561fe3":"code","b5f7c151":"code","95a07126":"code","94955e8f":"markdown","8e7e70b7":"markdown","98a1de07":"markdown","d9af9f05":"markdown","c7db1be4":"markdown","c3a2e72f":"markdown","850980e3":"markdown","e255ce12":"markdown","26a3e77d":"markdown","11b05cdb":"markdown","ad4ccf63":"markdown","6f594099":"markdown","087512e1":"markdown","ba9f77dd":"markdown","5b9fc4f1":"markdown","01fdef82":"markdown","6b18df37":"markdown","6119f3dc":"markdown","6a0fcaef":"markdown","92a9213d":"markdown","63763602":"markdown","d8c3758b":"markdown","9b1e888b":"markdown","c5fbbe15":"markdown","6f70b5b0":"markdown","d2f9b938":"markdown","45307fcc":"markdown","6334b35c":"markdown","50e34ea1":"markdown","70134223":"markdown","51411aae":"markdown","c95d8407":"markdown","fdc461f9":"markdown","43c2b442":"markdown","bc615435":"markdown","767af1ad":"markdown","a40dedbf":"markdown"},"source":{"d63235d2":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline \nimport cv2 as cv","5c7631ad":"DATA_FOLDER = '..\/input\/deepfake-detection-challenge'\nTRAIN_SAMPLE_FOLDER = 'train_sample_videos'\nTEST_FOLDER = 'test_videos'\n\nprint(f\"Train samples: {len(os.listdir(os.path.join(DATA_FOLDER, TRAIN_SAMPLE_FOLDER)))}\")\nprint(f\"Test samples: {len(os.listdir(os.path.join(DATA_FOLDER, TEST_FOLDER)))}\")","b3c3f20b":"FACE_DETECTION_FOLDER = '..\/input\/haar-cascades-for-face-detection'\nprint(f\"Face detection resources: {os.listdir(FACE_DETECTION_FOLDER)}\")","12fedb27":"train_list = list(os.listdir(os.path.join(DATA_FOLDER, TRAIN_SAMPLE_FOLDER)))\next_dict = []\nfor file in train_list:\n    file_ext = file.split('.')[1]\n    if (file_ext not in ext_dict):\n        ext_dict.append(file_ext)\nprint(f\"Extensions: {ext_dict}\")      ","30eeae59":"for file_ext in ext_dict:\n    print(f\"Files with extension `{file_ext}`: {len([file for file in train_list if  file.endswith(file_ext)])}\")","663c54f6":"test_list = list(os.listdir(os.path.join(DATA_FOLDER, TEST_FOLDER)))\next_dict = []\nfor file in test_list:\n    file_ext = file.split('.')[1]\n    if (file_ext not in ext_dict):\n        ext_dict.append(file_ext)\nprint(f\"Extensions: {ext_dict}\")\nfor file_ext in ext_dict:\n    print(f\"Files with extension `{file_ext}`: {len([file for file in train_list if  file.endswith(file_ext)])}\")","dfcb64f9":"json_file = [file for file in train_list if  file.endswith('json')][0]\nprint(f\"JSON file: {json_file}\")","a183e0f1":"def get_meta_from_json(path):\n    df = pd.read_json(os.path.join(DATA_FOLDER, path, json_file))\n    df = df.T\n    return df\n\nmeta_train_df = get_meta_from_json(TRAIN_SAMPLE_FOLDER)\nmeta_train_df.head()","53ce49ec":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","055c84e2":"missing_data(meta_train_df)","eb9347bc":"missing_data(meta_train_df.loc[meta_train_df.label=='REAL'])","7c59244a":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","83c23e5c":"unique_values(meta_train_df)","96d52317":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","2519114b":"most_frequent_values(meta_train_df)","ddf14da5":"def plot_count(feature, title, df, size=1):\n    '''\n    Plot count of classes \/ feature\n    param: feature - the feature to analyze\n    param: title - title to add to the graph\n    param: df - dataframe from which we plot feature's classes distribution \n    param: size - default 1.\n    '''\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","a163e9a7":"plot_count('split', 'split (train)', meta_train_df)","b6126fec":"plot_count('label', 'label (train)', meta_train_df)","f007a8d9":"meta = np.array(list(meta_train_df.index))\nstorage = np.array([file for file in train_list if  file.endswith('mp4')])\nprint(f\"Metadata: {meta.shape[0]}, Folder: {storage.shape[0]}\")\nprint(f\"Files in metadata and not in folder: {np.setdiff1d(meta,storage,assume_unique=False).shape[0]}\")\nprint(f\"Files in folder and not in metadata: {np.setdiff1d(storage,meta,assume_unique=False).shape[0]}\")","b023724b":"fake_train_sample_video = list(meta_train_df.loc[meta_train_df.label=='FAKE'].sample(3).index)\nfake_train_sample_video","6948e32a":"def display_image_from_video(video_path):\n    '''\n    input: video_path - path for video\n    process:\n    1. perform a video capture from the video\n    2. read the image\n    3. display the image\n    '''\n    capture_image = cv.VideoCapture(video_path) \n    ret, frame = capture_image.read()\n    fig = plt.figure(figsize=(10,10))\n    ax = fig.add_subplot(111)\n    frame = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n    ax.imshow(frame)","708e7ef6":"for video_file in fake_train_sample_video:\n    display_image_from_video(os.path.join(DATA_FOLDER, TRAIN_SAMPLE_FOLDER, video_file))","2bcb701e":"real_train_sample_video = list(meta_train_df.loc[meta_train_df.label=='REAL'].sample(3).index)\nreal_train_sample_video","96bc9edb":"for video_file in real_train_sample_video:\n    display_image_from_video(os.path.join(DATA_FOLDER, TRAIN_SAMPLE_FOLDER, video_file))","f00fd5cf":"meta_train_df['original'].value_counts()[0:5]","00eb0aba":"def display_image_from_video_list(video_path_list, video_folder=TRAIN_SAMPLE_FOLDER):\n    '''\n    input: video_path_list - path for video\n    process:\n    0. for each video in the video path list\n        1. perform a video capture from the video\n        2. read the image\n        3. display the image\n    '''\n    plt.figure()\n    fig, ax = plt.subplots(2,3,figsize=(16,8))\n    # we only show images extracted from the first 6 videos\n    for i, video_file in enumerate(video_path_list[0:6]):\n        video_path = os.path.join(DATA_FOLDER, video_folder,video_file)\n        capture_image = cv.VideoCapture(video_path) \n        ret, frame = capture_image.read()\n        frame = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n        ax[i\/\/3, i%3].imshow(frame)\n        ax[i\/\/3, i%3].set_title(f\"Video: {video_file}\")\n        ax[i\/\/3, i%3].axis('on')","4f7d9264":"same_original_fake_train_sample_video = list(meta_train_df.loc[meta_train_df.original=='meawmsgiti.mp4'].index)\ndisplay_image_from_video_list(same_original_fake_train_sample_video)","7a2bd8b5":"same_original_fake_train_sample_video = list(meta_train_df.loc[meta_train_df.original=='atvmxvwyns.mp4'].index)\ndisplay_image_from_video_list(same_original_fake_train_sample_video)","b36a1cbd":"same_original_fake_train_sample_video = list(meta_train_df.loc[meta_train_df.original=='qeumxirsme.mp4'].index)\ndisplay_image_from_video_list(same_original_fake_train_sample_video)","f7c01e54":"same_original_fake_train_sample_video = list(meta_train_df.loc[meta_train_df.original=='kgbkktcjxf.mp4'].index)\ndisplay_image_from_video_list(same_original_fake_train_sample_video)","8389d9d0":"test_videos = pd.DataFrame(list(os.listdir(os.path.join(DATA_FOLDER, TEST_FOLDER))), columns=['video'])","14ed033f":"test_videos.head()","4976d065":"display_image_from_video(os.path.join(DATA_FOLDER, TEST_FOLDER, test_videos.iloc[0].video))","79a3fe59":"display_image_from_video_list(test_videos.sample(6).video, TEST_FOLDER)","a6eec986":"class ObjectDetector():\n    '''\n    Class for Object Detection\n    '''\n    def __init__(self,object_cascade_path):\n        '''\n        param: object_cascade_path - path for the *.xml defining the parameters for {face, eye, smile, profile}\n        detection algorithm\n        source of the haarcascade resource is: https:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades\n        '''\n\n        self.objectCascade=cv.CascadeClassifier(object_cascade_path)\n\n\n    def detect(self, image, scale_factor=1.3,\n               min_neighbors=5,\n               min_size=(20,20)):\n        '''\n        Function return rectangle coordinates of object for given image\n        param: image - image to process\n        param: scale_factor - scale factor used for object detection\n        param: min_neighbors - minimum number of parameters considered during object detection\n        param: min_size - minimum size of bounding box for object detected\n        '''\n        rects=self.objectCascade.detectMultiScale(image,\n                                                scaleFactor=scale_factor,\n                                                minNeighbors=min_neighbors,\n                                                minSize=min_size)\n        return rects","f6f5b43e":"#Frontal face, profile, eye and smile  haar cascade loaded\nfrontal_cascade_path= os.path.join(FACE_DETECTION_FOLDER,'haarcascade_frontalface_default.xml')\neye_cascade_path= os.path.join(FACE_DETECTION_FOLDER,'haarcascade_eye.xml')\nprofile_cascade_path= os.path.join(FACE_DETECTION_FOLDER,'haarcascade_profileface.xml')\nsmile_cascade_path= os.path.join(FACE_DETECTION_FOLDER,'haarcascade_smile.xml')\n\n#Detector object created\n# frontal face\nfd=ObjectDetector(frontal_cascade_path)\n# eye\ned=ObjectDetector(eye_cascade_path)\n# profile face\npd=ObjectDetector(profile_cascade_path)\n# smile\nsd=ObjectDetector(smile_cascade_path)","4941c516":"def detect_objects(image, scale_factor, min_neighbors, min_size):\n    '''\n    Objects detection function\n    Identify frontal face, eyes, smile and profile face and display the detected objects over the image\n    param: image - the image extracted from the video\n    param: scale_factor - scale factor parameter for `detect` function of ObjectDetector object\n    param: min_neighbors - min neighbors parameter for `detect` function of ObjectDetector object\n    param: min_size - minimum size parameter for f`detect` function of ObjectDetector object\n    '''\n    \n    image_gray=cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n\n\n    eyes=ed.detect(image_gray,\n                   scale_factor=scale_factor,\n                   min_neighbors=min_neighbors,\n                   min_size=(int(min_size[0]\/2), int(min_size[1]\/2)))\n\n    for x, y, w, h in eyes:\n        #detected eyes shown in color image\n        cv.circle(image,(int(x+w\/2),int(y+h\/2)),(int((w + h)\/4)),(0, 0,255),3)\n \n    # deactivated due to many false positive\n    #smiles=sd.detect(image_gray,\n    #               scale_factor=scale_factor,\n    #               min_neighbors=min_neighbors,\n    #               min_size=(int(min_size[0]\/2), int(min_size[1]\/2)))\n\n    #for x, y, w, h in smiles:\n    #    #detected smiles shown in color image\n    #    cv.rectangle(image,(x,y),(x+w, y+h),(0, 0,255),3)\n\n\n    profiles=pd.detect(image_gray,\n                   scale_factor=scale_factor,\n                   min_neighbors=min_neighbors,\n                   min_size=min_size)\n\n    for x, y, w, h in profiles:\n        #detected profiles shown in color image\n        cv.rectangle(image,(x,y),(x+w, y+h),(255, 0,0),3)\n\n    faces=fd.detect(image_gray,\n                   scale_factor=scale_factor,\n                   min_neighbors=min_neighbors,\n                   min_size=min_size)\n\n    for x, y, w, h in faces:\n        #detected faces shown in color image\n        cv.rectangle(image,(x,y),(x+w, y+h),(0, 255,0),3)\n\n    # image\n    fig = plt.figure(figsize=(10,10))\n    ax = fig.add_subplot(111)\n    image = cv.cvtColor(image, cv.COLOR_BGR2RGB)\n    ax.imshow(image)","a511030e":"def extract_image_objects(video_file, video_set_folder=TRAIN_SAMPLE_FOLDER):\n    '''\n    Extract one image from the video and then perform face\/eyes\/smile\/profile detection on the image\n    param: video_file - the video from which to extract the image from which we extract the face\n    '''\n    video_path = os.path.join(DATA_FOLDER, video_set_folder,video_file)\n    capture_image = cv.VideoCapture(video_path) \n    ret, frame = capture_image.read()\n    #frame = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n    detect_objects(image=frame, \n            scale_factor=1.3, \n            min_neighbors=5, \n            min_size=(50, 50))  \n  ","13a7d71f":"same_original_fake_train_sample_video = list(meta_train_df.loc[meta_train_df.original=='kgbkktcjxf.mp4'].index)\nfor video_file in same_original_fake_train_sample_video[1:4]:\n    print(video_file)\n    extract_image_objects(video_file)","b16b8b32":"train_subsample_video = list(meta_train_df.sample(3).index)\nfor video_file in train_subsample_video:\n    print(video_file)\n    extract_image_objects(video_file)","6d9a806b":"subsample_test_videos = list(test_videos.sample(3).video)\nfor video_file in subsample_test_videos:\n    print(video_file)\n    extract_image_objects(video_file, TEST_FOLDER)","8fb6795d":"fake_videos = list(meta_train_df.loc[meta_train_df.label=='FAKE'].index)","03687ddb":"from IPython.display import HTML\nfrom base64 import b64encode\n\ndef play_video(video_file, subset=TRAIN_SAMPLE_FOLDER):\n    '''\n    Display video\n    param: video_file - the name of the video file to display\n    param: subset - the folder where the video file is located (can be TRAIN_SAMPLE_FOLDER or TEST_Folder)\n    '''\n    video_url = open(os.path.join(DATA_FOLDER, subset,video_file),'rb').read()\n    data_url = \"data:video\/mp4;base64,\" + b64encode(video_url).decode()\n    return HTML(\"\"\"<video width=500 controls><source src=\"%s\" type=\"video\/mp4\"><\/video>\"\"\" % data_url)","b4561fe3":"play_video(fake_videos[0])","b5f7c151":"play_video(fake_videos[1])","95a07126":"play_video(fake_videos[18])","94955e8f":"# <a id='1'>Introduction<\/a>\n\n\nDeepFake is composed from Deep Learning and Fake and means taking one person  from an image or video and replacing with someone else\nlikeness using technology such as Deep Artificial Neural Networks [1]. Large companies like Google invest very much in fighting the DeepFake, this including release of large datasets to help training models to counter this threat [2].The phenomen invades rapidly the film industry and threatens to compromise news agencies. Large digital companies, including content providers and social platforms are in the frontrun of fighting Deep Fakes. GANs that generate DeepFakes becomes better every day and, of course, if you include in a new GAN model all the information we collected until now how to combat various existent models, we create a model that cannot be beatten by the existing ones.   \n\nIn the **Data Exploration** section we perform a (partial) Exploratory Data Analysis (EDA) on the training and testing data. After we are checking the files types, we are focusing first on the **metadata** files, which we are exploring in details, after we are importing in dataframes. Then, we move to explore video files, by looking first to a sample of fake videos, then to real videos. After that, we are also exploring few of the videos with the same origin. We are visualizing one frame extracted from the video, for both real and fake videos. Then we are also playing few videos.  \nThen, we move to perform face (and other `objects` from the persons in the videos) extraction. More precisely, we are using OpenCV Haar Cascade resources to identify frontal face, eyes, smile and profile face from still images in the videos.\n\n**Important note**: The data we analyze here is just a very small sample of data. The competition specifies that the train data is provided as archived chunks. Training of models should pe performed offline using the data provided by Kaggle as archives, models should be loaded (max 1GB memory) in a Kernel, where inference should be performed (submission sample file provided) and prediction should be prepared as an output file from the Kernel.\n\n\nIn the **Resources** section I provide a short list of various resources for GAN and DeepFake, with blog posts, Kaggle Kernels and Github repos.   \n\n","8e7e70b7":"Let's do now some data distribution visualizations.","98a1de07":"Let's look to some more videos from test set.","d9af9f05":"## Test video files\n\nLet's also look to few of the test data files.","c7db1be4":"## Play video files  \n\nFrom [Play video and processing](https:\/\/www.kaggle.com\/hamditarek\/play-video-and-processing) Kernel by [@hamditarek](https:\/\/www.kaggle.com\/hamditarek) we learned how to play video files in a Kaggle Kernel.  \nLet's look to few fake videos.","c3a2e72f":"## Load data","850980e3":"Aparently here is a metadata file. Let's explore this JSON file.","e255ce12":"Indeed, all missing `original` data are the one associated with `REAL` label.  \n\n## Unique values\n\nLet's check into more details the unique values.","26a3e77d":"## Videos with same original\n\nLet's look now to set of samples with the same original.","11b05cdb":"We load the resources for frontal face, eye, smile and profile face detection.  \n\nThen we initialize the `ObjectDetector` objects defined above with the respective resources, to use CascadeClassfier for each specific task.","ad4ccf63":"Let's check the `json` file first.","6f594099":"The following function extracts an image from a video and then call the function that extracts the face rectangle from the image and display the rectangle above the image.","087512e1":"Let's look to a small collection of samples from test videos.","ba9f77dd":"Let's visualize now the data.  \n\nWe select first a list of fake videos.\n\n## Few fake videos","5b9fc4f1":"# <a id='5'>Face detection<\/a>  \n\nFrom [5] ([Face Detection using OpenCV](https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv)) by [@serkanpeldek](https:\/\/www.kaggle.com\/serkanpeldek) we got and slightly modified the functions to extract face, profile face, eyes and smile.  \n\nThe class ObjectDetector initialize the cascade classifier (using the imported resource). The function **detect** uses a method of the CascadeClassifier to detect objects into images - in this case the face, eye, smile or profile face.","01fdef82":"<h1>DeepFake Starter Kit<\/h1>\n\n\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Preliminary data exploration<\/a>  \n    * Load the packages  \n    * Load the data  \n    * Check files type  \n- <a href='#3'>Meta data exploration<\/a>  \n     * Missing data   \n     * Unique values  \n     * Most frequent originals  \n- <a href='#4'>Video data exploration<\/a>  \n     * Missing video (or meta) data  \n     * Few fake videos  \n     * Few real videos  \n     * Videos with same original  \n     * Test video files  \n     * Play video files\n- <a href='#5'>Face detection<\/a>  \n- <a href='#7'>References<\/a>     \n\n","6b18df37":"Let's repeat the same process for test videos folder.","6119f3dc":"We can observe that in some cases, when the subject is not looking frontaly or when the luminosity is low, the algorithm for face detection is not detecting the face or eyes correctly. Due to a large amount of false positive, we deactivated for now the smile detector.","6a0fcaef":"## Load packages","92a9213d":"Let's count how many files with each extensions there are.","63763602":"Let's try now the same for few of the images that are real.  \n\n\n## Few real videos","d8c3758b":"We also define a function for detection and display of all these specific objects.  \n\nThe function call the **detect** method of the **ObjectDetector** object. For each object we are using a different shape and color, as following:\n* Frontal face: green rectangle;  \n* Eye: red circle;  \n* Smile: red rectangle;  \n* Profile face: blue rectangle.  \n\nNote: due to a huge amount of false positive, we deactivate for now the smile detector.","9b1e888b":"Let's visualize now one of the videos.","c5fbbe15":"From [4] ([Basic EDA Face Detection, split video, ROI](https:\/\/www.kaggle.com\/marcovasquez\/basic-eda-face-detection-split-video-roi)) we modified a function for displaying a selected image from a video.","6f70b5b0":"# <a id=\"3\">Meta data exploration<\/a>\n\nLet's explore now the meta data in train sample. \n\n## Missing data\n\nWe start by checking for any missing values.  ","d2f9b938":"We pick one of the originals with largest number of samples.   \n\nWe also modify our visualization function to work with multiple images.","45307fcc":"Let's look now to a different selection of videos with the same original. ","6334b35c":"We see that most frequent **label** is `FAKE` (80.75%), `meawmsgiti.mp4` is the most frequent **original** (6 samples).","50e34ea1":"From visual inspection of these fakes videos, in some cases is very easy to spot the anomalies created when engineering the deep fake, in some cases is more difficult.","70134223":"* We observe that `original` label has the same pattern for uniques values. We know that we have 77 missing data (that's why total is only 323) and we observe that we do have 209 unique examples.  \n\n## Most frequent originals\n\nLet's look now to the most frequent originals uniques in train sample data.  ","51411aae":"# <a id=\"6\">References<\/a>\n\n[1] Deepfake, Wikipedia, https:\/\/en.wikipedia.org\/wiki\/Deepfake  \n[2] Google DeepFake Database, Endgadget, https:\/\/www.engadget.com\/2019\/09\/25\/google-deepfake-database\/  \n[3] A quick look at the first frame of each video,  https:\/\/www.kaggle.com\/brassmonkey381\/a-quick-look-at-the-first-frame-of-each-video  \n[4] Basic EDA Face Detection, split video, ROI, https:\/\/www.kaggle.com\/marcovasquez\/basic-eda-face-detection-split-video-roi  \n[5] Face Detection with OpenCV, https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv   \n[6] Play video and processing, https:\/\/www.kaggle.com\/hamditarek\/play-video-and-processing\/\n","c95d8407":"# <a id='2'>Preliminary data exploration<\/a>","fdc461f9":"We apply the function for face detection for a selection of images from train sample videos.","43c2b442":"## Check files type\n\nHere we check the train data files extensions. Most of the files looks to have `mp4` extension, let's check if there is other extension as well.","bc615435":"As we can see, the `REAL` are only 19.25% in train sample videos, with the `FAKE`s acounting for 80.75% of the samples. \n\n\n# <a id=\"4\">Video data exploration<\/a>\n\n\nIn the following we will explore some of the video data. \n\n\n## Missing video (or meta) data\n\nWe check first if the list of files in the meta info and the list from the folder are the same.\n\n","767af1ad":"We also added a face detection resource.","a40dedbf":"There are missing data 19.25% of the samples (or 77). We suspect that actually the real data has missing original (if we generalize from the data we glimpsed). Let's check this hypothesis."}}