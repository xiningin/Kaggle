{"cell_type":{"0b4ffe3f":"code","313f57a7":"code","88893b45":"code","468e4583":"code","7a2571c2":"code","28916c29":"code","42541449":"code","21251c24":"code","0b216a46":"code","36c9838d":"code","60841c6c":"code","9fa546c2":"code","5fe25724":"code","449262f5":"code","ebd28852":"code","06da5cd9":"code","17e00661":"code","b0f9dfa9":"code","1799da32":"code","45de35d0":"code","5ad46f7d":"code","02ecbc50":"code","0d640c10":"code","e7413442":"code","b545589c":"code","9b2aa6a3":"code","f3a5c1c6":"code","98b8c756":"code","21994c62":"code","c57a1cd0":"code","1f600ffb":"code","8e1a7b9d":"code","58c1b848":"code","8a6c27ec":"code","5d0e268d":"markdown","8ef4ea79":"markdown","e7613166":"markdown","982a6664":"markdown","fdc769dc":"markdown","b1184a26":"markdown","ae5c8c79":"markdown","ff1e6c02":"markdown","779e66b4":"markdown","fa57fafe":"markdown","a1b1ca6a":"markdown","15b53bc3":"markdown","e2881c54":"markdown","6123807d":"markdown","f44f0b3c":"markdown","1964912b":"markdown"},"source":{"0b4ffe3f":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nsns.set_style('darkgrid')","313f57a7":"df = pd.read_csv('..\/input\/daily-temperature-of-major-cities\/city_temperature.csv')\ndf.head()","88893b45":"df = df.rename(columns={\n    'Region': 'region',\n    'Country': 'country',\n    'State': 'state',\n    'City': 'city',\n    'Month': 'month',\n    'Day': 'day',\n    'Year': 'year',\n    'AvgTemperature': 'avg_temp'\n})\ndf.head()","468e4583":"df.region.unique()","7a2571c2":"df.country.nunique()","28916c29":"df.country.isna().any()","42541449":"df.state.unique()","21251c24":"df.city.nunique()","0b216a46":"df.city.isna().any()","36c9838d":"df.avg_temp.isna().any()","60841c6c":"df.day.unique()","9fa546c2":"len(df[df.day == 0])","5fe25724":"df = df[df.day != 0]","449262f5":"df.year.unique()","ebd28852":"len(df[df.year.isin([200, 201])])","06da5cd9":"df = df[~df.year.isin([200, 201])]","17e00661":"df.avg_temp.value_counts().nlargest(10)","b0f9dfa9":"grouped_freqs = df.groupby('city').avg_temp.value_counts(normalize=True)\ngrouped_freqs.head()","1799da32":"sorted_freqs_df = grouped_freqs.unstack(level='avg_temp').sort_values(by=-99., ascending=False)\nsorted_freqs_df[-99.].head(15)","45de35d0":"cities_to_remove = sorted_freqs_df[sorted_freqs_df[-99.] > .1][-99.].index.to_list()\nprint(f'We are going to remove the following cities:\\n\\n{\", \".join(cities_to_remove)}.')\ndf = df[~df.city.isin(cities_to_remove)]","5ad46f7d":"df.avg_temp = df.avg_temp.replace(-99., np.nan)","02ecbc50":"# We first compute the counts of the temperatures values...\ngroupby_filter = [df.year, df.month, 'city']\ntemp_counts_df = df.groupby(groupby_filter).avg_temp.value_counts(dropna=False).unstack()\n# Then, we select the rows whose NaN column equals 31.\n# These are the rows corresponding to a missing temperature measurement\n# for the combination of year\/month\/city.\nmissing_series = temp_counts_df.loc[temp_counts_df[np.nan] == 31.][np.nan]\n# Finally, we replace all the 31 values with 1\n# in order to compute the total number of occurrences\n# of missing temperature measurements, for each city.\noutages_series = missing_series.replace(31., 1).unstack('city').sum().nlargest(10)\n# Do some cleanup...\ndel temp_counts_df\n# And the plotting of the cities\n# against the total number of occurrences of this event for the overall dataset.\nfig, ax = plt.subplots(figsize=(12,10))\noutages_series.sort_values().plot(kind='barh', rot=30, ax=ax)\nax.set_title('Cities having the highest no. of missing temperature measurements for 31 days straight.')\nax.set_xlabel('Number of occurrences')\nax.yaxis.label.set_visible(False)","0d640c10":"df.avg_temp = df.avg_temp.fillna(method='ffill')","e7413442":"to_celsius_equation = (df.avg_temp - 32) * 5 \/ 9\ndf = df.assign(avg_temp_c=np.round(to_celsius_equation, 2)).drop(columns='avg_temp')","b545589c":"datetime_series = pd.to_datetime(df[['year', 'month', 'day']])\ndf['date'] = datetime_series\ndf = df.drop(columns=['year', 'month', 'day'])\ndf = df.set_index('date')\ndf.head()","9b2aa6a3":"last_twenty_years_df = df[(df.index.year >= 2000) & (df.index.year <= 2019)]\nregion_year_filter = ['region', pd.Grouper(freq='Y')]\nlast_twenty_years_region_temp = last_twenty_years_df.groupby(region_year_filter).avg_temp_c \\\n                                                    .mean()                                 \\\n                                                    .unstack('region')\nlast_twenty_years_region_temp.head()","f3a5c1c6":"# I had to override the Matplotlib's tick_values method of the YearLocator class\n# because the date interval I'm analyzing (i.e. 2000 to 2019)\n# cannot be drawn correctly using the default YearLocator.\n#\n# The implementation is very similar to the default YearLocator.\n# In fact, the most relevant change is on the following line:\n# ymax = self.base.ge(vmax.year) * self.base.step + self.base.step\n# There, I've added the term self.base.step\n\nclass OddIntervalYearLocator(mdates.YearLocator):\n    def tick_values(self, vmin, vmax):\n        ymin = self.base.le(vmin.year) * self.base.step\n        ymax = self.base.ge(vmax.year) * self.base.step + self.base.step\n        ticks = [vmin.replace(year=ymin, **self.replaced)]\n        while True:\n            dt = ticks[-1]\n            if dt.year >= ymax:\n                return mdates.date2num(ticks)\n            year = dt.year + self.base.step\n            ticks.append(dt.replace(year=year, **self.replaced))","98b8c756":"def plot_yearly_temperature(df, fig_title, fig_size, marker_type=None):\n    fig, ax = plt.subplots(figsize=fig_size)\n    if marker_type is None:\n        sns.lineplot(data=df, markers=True, markersize=10, dashes=False, ax=ax)\n        # Force legend position when there are multiple lines on the plot\n        ax.legend(loc='center left')\n    else:\n        sns.lineplot(data=df, marker='o', markersize=10, ax=ax)\n    ax.set_title(fig_title)\n    ax.set_ylabel('Temperature (Celsius)')\n    ax.xaxis.label.set_visible(False)\n    # Draw a major tick every 2 years\n    ax.xaxis.set_major_locator(OddIntervalYearLocator(base=2, month=12, day=31))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))","21994c62":"plot_yearly_temperature(last_twenty_years_region_temp[['Europe', 'Middle East', 'Africa']],\n                        fig_title='Mean yearly temperature (2000 - 2019) - EMEA',\n                        fig_size=(12, 10))","c57a1cd0":"other_df = last_twenty_years_region_temp[['North America', 'South\/Central America & Carribean',\n                                          'Asia', 'Australia\/South Pacific']]\nplot_yearly_temperature(other_df,\n                        fig_title='Mean yearly temperature (2000 - 2019) - Other regions',\n                        fig_size=(12, 10))","1f600ffb":"plot_yearly_temperature(last_twenty_years_df.groupby(pd.Grouper(freq='Y')).avg_temp_c.mean(),\n                        fig_title='Mean yearly temperature (2000 - 2019) - Earth',\n                        fig_size=(10, 5),\n                        marker_type='o')","8e1a7b9d":"last_twenty_years_df.groupby('city').avg_temp_c.mean().nlargest(10)","58c1b848":"last_twenty_years_df.groupby('city').avg_temp_c.mean().nsmallest(10)","8a6c27ec":"last_twenty_years_df.query('country == \"India\"').groupby('city').avg_temp_c \\\n                    .agg(hottest_day='idxmax', avg_temp_c='max')","5d0e268d":"As expected, the average Earth's temperature is alarmingly increasing and, during the last two decades, it appears that there has been an increase of $\\sim 0.5$ Celsius degree of the average Earth's temperature.\n\n## Top-10 cities having the highest\/lowest mean temperature from 2000 to 2019\n\nWe now shift our attention to the top-10 cities having the highest\/lowest mean temperature from 2000 to 2019.","8ef4ea79":"Replace the missing measurements with something more appropriate.","e7613166":"Now that we have the NaN in place, it would be interesting to determine the **top-10 cities having the highest number of missing temperature measurements for an entire month**.","982a6664":"## Hottest days in India\nFinally, we highlight the hottest days in the major cities of India. As you may know, India has several of the world's hottest places. ","fdc769dc":"We notice how Africa, Middle East and South\/Central America & Carribean are undergoing a bumpy but steady increase of the average temperature per year. On the other hand, Europe and Asia remain somewhat constant.\n\n## Mean yearly Earth's temperature trend from 2000 to 2019\nThe next visualization focuses on the average Earth's temperature trend over the same time period we just saw. ","b1184a26":"We convert Fahrenheit to Celsius, just for fun.","ae5c8c79":"And we finalize the cleaning process by merging `year`, `month` and `day` columns into a new `date` column.","ff1e6c02":"A `day` value equal to `0` looks like an invalid value. Therefore, we drop the rows containing it.","779e66b4":"We notice how the first 5 cities are the ones being the most affected by the missing measurements.\n\nIn light of what we have just discovered, let's only keep the rows corresponding to the cities having a relative frequency of the missing measurements $\\leq 10 \\%$.","fa57fafe":"# Data Cleaning Process\n\nWe start off by renaming all columns to lowercase letters.","a1b1ca6a":"We do the same for the `year` values equal to `200` and `201`.","15b53bc3":"# Data Analysis\n\n## Mean yearly regional temperature trend from 2000 to 2019\nWe begin the analysis by visualizing the mean yearly temperature trend from 2000 to 2019, for each region.","e2881c54":"The `avg_temp` column appears to contain some kind of measurement error, namely a value equal to `-99.0`.\n\nAs a matter of fact, according to [this link](http:\/\/academic.udayton.edu\/kissock\/http\/Weather\/source.htm), it is used to symbolize a missing measurement!\n\nThus, we compute its relative frequency for each city as to determine the **relevance of the error value**.","6123807d":"# Introduction\n\nIn this notebook I lay out my analysis of the [Daily Temperature of Major Cities](https:\/\/www.kaggle.com\/sudalairajkumar\/daily-temperature-of-major-cities) dataset which contains the average daily temperatures (in Fahrenheit degrees) for 157 U.S. and 167 international cities.\n\nFirst, we will go through a simple data cleaning process and, then, we will gather interesting insights by exploring the dataset over a period of 20 years (from 2000 to 2019).\n\nPlease feel free to leave your thoughts and feedbacks in the comment section below. As a beginner, I would love constructive criticism to help me and other newbies grow! :) ","f44f0b3c":"We check the columns characterizing the dataset, while keeping an eye out for any missing values or data artifacts.","1964912b":"Since there are several cities missing entire months' worth of temperature data, I believe that there are two possible ways to proceed:\n\n* Drop all the rows having missing temperature readings, OR;\n* \"Forward\" propagate the last non-null temperature value until the next non-null value. \n\nI decided on the latter."}}