{"cell_type":{"712e400e":"code","be1b2f68":"code","2780c5d2":"code","38c53382":"code","c9bb4388":"code","cb71a17b":"code","17fce3b0":"code","25ef7a5a":"code","8b6c6043":"code","6b10d3a8":"code","c1d143bf":"code","0e23c3e1":"code","dfb30530":"code","f8eda3c8":"code","7a61acfc":"code","f3336dcb":"code","181d1c25":"markdown"},"source":{"712e400e":"import numpy as np\nimport pandas as pd\nimport random\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\nstructures = pd.read_csv('..\/input\/structures.csv')\nmolecule_names = structures.molecule_name.unique()\n\n# initiate the plotly notebook mode\ninit_notebook_mode(connected=True)\n\n\ndef plot_molecule(molecule_name, structures_df):\n    \"\"\"Creates a 3D plot of the molecule\"\"\"\n    \n    atomic_radii = dict(C=0.77, F=0.71, H=0.38, N=0.75, O=0.73)  \n    cpk_colors = dict(C='black', F='green', H='white', N='blue', O='red')\n\n    molecule = structures_df[structures_df.molecule_name == molecule_name]\n    coordinates = molecule[['x', 'y', 'z']].values\n    x_coordinates = coordinates[:, 0]\n    y_coordinates = coordinates[:, 1]\n    z_coordinates = coordinates[:, 2]\n    elements = molecule.atom.tolist()\n    radii = [atomic_radii[element] for element in elements]\n    \n    def get_bonds():\n        \"\"\"Generates a set of bonds from atomic cartesian coordinates\"\"\"\n        ids = np.arange(coordinates.shape[0])\n        bonds = dict()\n        coordinates_compare, radii_compare, ids_compare = coordinates, radii, ids\n        \n        for _ in range(len(ids)):\n            coordinates_compare = np.roll(coordinates_compare, -1, axis=0)\n            radii_compare = np.roll(radii_compare, -1, axis=0)\n            ids_compare = np.roll(ids_compare, -1, axis=0)\n            distances = np.linalg.norm(coordinates - coordinates_compare, axis=1)\n            bond_distances = (radii + radii_compare) * 1.3\n            mask = np.logical_and(distances > 0.1, distances <  bond_distances)\n            distances = distances.round(2)\n            new_bonds = {frozenset([i, j]): dist for i, j, dist in zip(ids[mask], ids_compare[mask], distances[mask])}\n            bonds.update(new_bonds)\n        return bonds            \n            \n    def atom_trace():\n        \"\"\"Creates an atom trace for the plot\"\"\"\n        colors = [cpk_colors[element] for element in elements]\n        markers = dict(color=colors, line=dict(color='lightgray', width=2), size=5, symbol='circle', opacity=0.8)\n        trace = go.Scatter3d(x=x_coordinates, y=y_coordinates, z=z_coordinates, mode='markers', marker=markers,\n                             text=elements, name='')\n        return trace\n\n    def bond_trace():\n        \"\"\"\"Creates a bond trace for the plot\"\"\"\n        trace = go.Scatter3d(x=[], y=[], z=[], hoverinfo='none', mode='lines',\n                             marker=dict(color='grey', size=7, opacity=1))\n        for i, j in bonds.keys():\n            trace['x'] += (x_coordinates[i], x_coordinates[j], None)\n            trace['y'] += (y_coordinates[i], y_coordinates[j], None)\n            trace['z'] += (z_coordinates[i], z_coordinates[j], None)\n        return trace\n    \n    bonds = get_bonds()\n    \n    zipped = zip(range(len(elements)), x_coordinates, y_coordinates, z_coordinates)\n    annotations_id = [dict(text=num, x=x, y=y, z=z, showarrow=False, yshift=15, font = dict(color = \"blue\"))\n                   for num, x, y, z in zipped]\n    \n    annotations_length = []\n    for (i, j), dist in bonds.items():\n        x_middle, y_middle, z_middle = (coordinates[i] + coordinates[j])\/2\n        annotation = dict(text=dist, x=x_middle, y=y_middle, z=z_middle, showarrow=False, yshift=15)\n        annotations_length.append(annotation)   \n    \n    updatemenus = list([\n        dict(buttons=list([\n                 dict(label = 'Atom indices',\n                      method = 'relayout',\n                      args = [{'scene.annotations': annotations_id}]),\n                 dict(label = 'Bond lengths',\n                      method = 'relayout',\n                      args = [{'scene.annotations': annotations_length}]),\n                 dict(label = 'Atom indices & Bond lengths',\n                      method = 'relayout',\n                      args = [{'scene.annotations': annotations_id + annotations_length}]),\n                 dict(label = 'Hide all',\n                      method = 'relayout',\n                      args = [{'scene.annotations': []}])\n                 ]),\n                 direction='down',\n                 xanchor = 'left',\n                 yanchor = 'top'\n            ),        \n    ])\n    \n    data = [atom_trace(), bond_trace()]\n    axis_params = dict(showgrid=False, showbackground=False, showticklabels=False, zeroline=False, titlefont=dict(color='white'))\n    layout = dict(scene=dict(xaxis=axis_params, yaxis=axis_params, zaxis=axis_params, annotations=annotations_id), \n                  margin=dict(r=0, l=0, b=0, t=0), showlegend=False, updatemenus=updatemenus)\n\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)","be1b2f68":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","2780c5d2":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","38c53382":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","c9bb4388":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","cb71a17b":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","17fce3b0":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","25ef7a5a":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","8b6c6043":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","6b10d3a8":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","c1d143bf":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","0e23c3e1":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","dfb30530":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","f8eda3c8":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","7a61acfc":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","f3336dcb":"molecule_name = random.choice(molecule_names)\nplot_molecule(molecule_name, structures)","181d1c25":"# 3D Visualization of Molecules with Plotly"}}