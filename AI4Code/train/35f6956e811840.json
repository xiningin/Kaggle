{"cell_type":{"ca94b2ee":"code","96ec739f":"code","44d4a347":"code","66f86284":"code","68ca86d4":"code","f0fee9a9":"code","3aa8a5c4":"code","9354145b":"code","315dd541":"code","6a8106da":"code","4cb1f492":"code","2408c226":"code","acc5c282":"code","e6f0616a":"code","d85963d9":"code","438bdad3":"code","5cb9fd18":"code","72b925fa":"markdown","4fce0bf0":"markdown","44cff8be":"markdown","1a79d45a":"markdown","4da134c2":"markdown","320cd895":"markdown","a45181de":"markdown","9020441d":"markdown","2a4cde82":"markdown","0228f22a":"markdown","9245e82b":"markdown","143a3528":"markdown","4b09eb28":"markdown","ddc82709":"markdown","600fcca8":"markdown","41b037ff":"markdown","6cc9e21a":"markdown","81264fb6":"markdown","ea6a106a":"markdown","db41f7c1":"markdown","64a8f15e":"markdown","9cb8ce21":"markdown","c1fa7660":"markdown","e6cfccd2":"markdown","2f2d4866":"markdown"},"source":{"ca94b2ee":"# Hector Bonilla Simplified the code for the ca_utils implementation\n# This Library is not included in any Python Module\n# I extracted the library file and made it to load as loading source code without module definition\n# You can use for reference in your challenge\n# the code is up and running","96ec739f":"import os\nimport sys\nimport imp\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","44d4a347":"# Hector Bonilla this is the library load and the program calls in subsequent tasks are prefixed with the correspondent code calls like ca_load.load_data\ndata_dir = \"\/kaggle\/input\"\nprocessed_subdir = \"ca-utils\"\nca_file = os.path.join(data_dir, processed_subdir, \"ca_utils.py\")\nca_display = imp.load_source('display_vid', ca_file)\nca_plot = imp.load_source('plot_task', ca_file)\nca_load = imp.load_source('load_data', ca_file)\nca_vis_automata = imp.load_source('vis_automata_task', ca_file)","66f86284":"#from ca_utils import display_vid, plot_task, load_data","68ca86d4":"task = ca_load.load_data('08ed6ac7.json', phase='training')\nca_plot.plot_task(task)","f0fee9a9":"from moviepy.editor import VideoFileClip\n\nca_display.display_vid(VideoFileClip('..\/input\/ca-videos\/IaANIHh6.mp4'), loop=True, autoplay=True)","3aa8a5c4":"#from ca_utils import vis_automata_task\nimport numpy as np\nfrom itertools import product\n\nnbh = lambda x, i, j: { \n    (ip, jp) : x[i+ip, j+jp] \n        for ip, jp in product([1, -1, 0], repeat=2) \n            if 0 <= i+ip < x.shape[0] and 0 <= j+jp < x.shape[1]\n}\n","9354145b":"import matplotlib.colors as colors\nimport matplotlib.pyplot as plt\n\n_cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=_cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()","315dd541":"task = ca_load.load_data('db3e9e38.json', phase='training')\n\nca_plot.plot_task(task)","6a8106da":"\ndef compute_db3e9e38_part_automata_step(input, hidden_i):\n    #\n    # this function takes as input the input grid and outputs the output grid\n\n    # input, is the input grid\n    # ignore hidden_i for now\n    \n    # for convenience let's name the colors\n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    # let's create the output grid\n    output = np.zeros_like(input, dtype=int)\n    \n    # here we iterate over all the coordinates of cells in the input grid\n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        # current cell and current neighborhood \n        i_c = input[i, j]                \n        i_nbh = nbh(input, i, j)\n        \n        # Here our transition rule starts \n        # R1: if the current call has color\n        if i_c != blk:\n            output[i, j] = i_c # leave it there \n            \n        # R2: if the current cell is black and as it's left neighbor and lower left neighbors are orange cells \n        elif i_c == blk and i_nbh.get((0, -1)) == orn and i_nbh.get((1, -1)) == orn:\n            output[i, j] = azu # paint it in light blue (azure)\n        \n        # R3: if the current cell is black and as it's left neighbor and lower left neighbors are light blue cells  \n        elif i_c == blk and i_nbh.get((0, -1)) == azu and i_nbh.get((1, -1)) == azu:\n            output[i, j] = orn # paint it in orange\n        \n    return output, hidden_i\n            \nca_vis_automata.vis_automata_task(task, compute_db3e9e38_part_automata_step, 16, 0)","4cb1f492":"def compute_db3e9e38_automata_step(input, hidden_i):\n    # ignore hidden_i for now\n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    output = np.zeros_like(input, dtype=int)\n    \n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]                \n        i_nbh = nbh(input, i, j)\n        \n        # R1\n        if i_c != blk:\n            output[i, j] = i_c\n            \n        # R2 and it's symmetrical variant\n        if i_c == blk and i_nbh.get((0, 1)) == orn and i_nbh.get((1, 1)) == orn:\n            output[i, j] = azu\n        elif i_c == blk and i_nbh.get((0, -1)) == orn and i_nbh.get((1, -1)) == orn:\n            output[i, j] = azu\n        \n        # R3 and it's symmetrical variant\n        elif i_nbh.get((0, 1)) == azu and i_nbh.get((1, 1)) == azu:\n            output[i, j] = orn\n        elif i_nbh.get((0, -1)) == azu and i_nbh.get((1, -1)) == azu:\n            output[i, j] = orn\n        \n    return output, hidden_i\n            \n        \nca_vis_automata.vis_automata_task(task, compute_db3e9e38_automata_step, 16, 0)","2408c226":"task = ca_load.load_data('b27ca6d3.json', phase='training')\n\nca_plot.plot_task(task)","acc5c282":"def compute_b27ca6d3_part3_automata_step(input, hidden_i):\n    # ignore hidden_i for now\n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    output = np.zeros_like(input, dtype=int)\n    \n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]       \n        i_nbh = nbh(input, i, j)\n        \n        is_top_b, is_bottom_b = i == 0, i == input.shape[0]-1\n        is_left_b, is_right_b = j == 0, j == input.shape[1]-1\n        is_b = is_top_b or is_bottom_b or is_left_b or is_right_b\n        \n        # clock wise orderd neighboring elements\n        cw_nbh_ixs = [ (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1)]\n\n        # consecutive cell pairs\n        pair_ixs = list(zip(cw_nbh_ixs[:-1], cw_nbh_ixs[1:])) + [(cw_nbh_ixs[-1],cw_nbh_ixs[0])]\n                    \n        # sides of the rectangle formed by the neighboring cells\n        side_ixs = [ \n            cw_nbh_ixs[:3], # top\n            cw_nbh_ixs[2:5], # left\n            cw_nbh_ixs[4:7], # bottom \n            cw_nbh_ixs[6:] + cw_nbh_ixs[:1] # right\n        ]        \n        \n        # tests if all the cells are non border ones\n        all_present = lambda s1, c, s2: all(x in i_nbh for x in [s1, c, s2])\n        # tests if the three cells are colored green, red, green\n        test_side = lambda s1, c, s2: (i_nbh.get(s1, grn),i_nbh.get(c, red),i_nbh.get(s2, grn)) == (grn, red, grn)\n        \n        # corners of the square formed by the neighboring pixels\n        corner_ixs = [ \n            cw_nbh_ixs[1:4], # top right\n            cw_nbh_ixs[3:6], # bottom right\n            cw_nbh_ixs[5:8], # bottom left\n            cw_nbh_ixs[7:] + cw_nbh_ixs[:2] # top left\n        ]\n        \n        # R0 if cell has color \n        if i_c != blk:\n            output[i, j] = i_c # do nothing \n               \n        # R1: if the neighborhood contains two consecutive red cells \n        elif any(i_nbh.get(ix1) == red and i_nbh.get(ix2) == red for ix1, ix2 in pair_ixs):\n            output[i, j] = grn   # color in green\n            \n        # R2: if the neighborhood contains three consecutive cells colored with green red green \n        elif any( test_side(s1, c, s2) for s1, c, s2 in side_ixs if all_present( s1, c, s2)):\n            output[i, j] = grn # color in green \n        \n        # R3: if the neighborhood contains three consecutive cells colored with green red green arranged in a corner\n        elif  any( test_side(s1, c, s2) for s1, c, s2 in corner_ixs if all_present(s1, c, s2)):\n            output[i, j] = grn \n        \n        \n    return output, hidden_i\n\nca_vis_automata.vis_automata_task(task, compute_b27ca6d3_part3_automata_step, 5, 0)","e6f0616a":"def compute_b27ca6d3_automata_step(input, hidden_i):\n    \n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    output = np.zeros_like(input, dtype=int)\n    \n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]       \n        i_nbh = nbh(input, i, j)\n        \n        is_top_b, is_bottom_b = i == 0, i == input.shape[0]-1\n        is_left_b, is_right_b = j == 0, j == input.shape[1]-1\n        is_b = is_top_b or is_bottom_b or is_left_b or is_right_b\n        \n        # clock wise orderd neiborhood elements\n        cw_nbh_ixs = [ (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1)]\n\n        # consecutive cell pairs\n        pair_ixs = list(zip(cw_nbh_ixs[:-1], cw_nbh_ixs[1:])) + [(cw_nbh_ixs[-1],cw_nbh_ixs[0])]\n                    \n        # sides of the rectangle formed by the neighboring cells\n        side_ixs = [ \n            cw_nbh_ixs[:3], # top\n            cw_nbh_ixs[2:5], # left\n            cw_nbh_ixs[4:7], # bottom \n            cw_nbh_ixs[6:] + cw_nbh_ixs[:1] # right\n        ]        \n        \n        # tests if all the cells are non border ones\n        all_present = lambda s1, c, s2: all(x in i_nbh for x in [s1, c, s2])\n        # tests if the three cells are colored green, red, green\n        test_side = lambda s1, c, s2: (i_nbh.get(s1, grn),i_nbh.get(c, red),i_nbh.get(s2, grn)) == (grn, red, grn)\n        # tests if the center cell is present and at least one on the side\n        some_present = lambda s1, c, s2: c in i_nbh and (s1 in i_nbh or s2 in i_nbh)\n        \n        # corners of the square formed by the neighboring pixels\n        corner_ixs = [ \n            cw_nbh_ixs[1:4], # top right\n            cw_nbh_ixs[3:6], # bottom right\n            cw_nbh_ixs[5:8], # bottom left\n            cw_nbh_ixs[7:] + cw_nbh_ixs[:2] # top left\n        ]\n        \n        \n        # R0 if cell has color \n        if i_c != blk:\n            output[i, j] = i_c # do nothing \n        # R1: if the neighborhood contains two consecutive red cells \n        elif any(i_nbh.get(ix1) == red and i_nbh.get(ix2) == red for ix1, ix2 in pair_ixs):\n            output[i, j] = grn   # color in green\n\n        # R2: if the neighborhood contains three consecutive cells colored with green red green \n        elif i_c == blk and any( test_side(s1, c, s2) for s1, c, s2 in side_ixs if all_present( s1, c, s2)):\n            output[i, j] = grn # color in green \n            \n        # R3: if the neighborhood contains three consecutive cells colored with green red green arranged in a corner\n        elif i_c == blk and any( test_side(s1, c, s2) for s1, c, s2 in corner_ixs if all_present(s1, c, s2)):\n            output[i, j] = grn \n            \n        # R4+: if we are near a border and one green and one red consecutive cells are present\n        elif i_c == blk and is_b and any( test_side(s1, c, s2) for s1, c, s2 in side_ixs if some_present( s1, c, s2) ):\n            output[i, j] = grn \n        \n        \n    return output, hidden_i\n\nca_vis_automata.vis_automata_task(task, compute_b27ca6d3_automata_step, 5, 0)","d85963d9":"task = ca_load.load_data('00d62c1b.json', phase='training')\n\nca_plot.plot_task(task)","438bdad3":"\ndef compute_00d62c1b_part_automata_step(input, hidden_i):\n    \n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    output = np.zeros_like(input, dtype=int)\n    \n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]\n        i_nbh = nbh(input, i, j)        \n        # direct neighbors to the current cell\n        i_direct_nbh = { k: v for k, v in i_nbh.items() if k in {(1, 0), (-1, 0), (0, 1), (0, -1)} }\n        \n        is_top_b, is_bottom_b = i == 0, i == input.shape[0]-1\n        is_left_b, is_right_b = j == 0, j == input.shape[1]-1\n        is_b = is_top_b or is_bottom_b or is_left_b or is_right_b\n        \n        \n        if i_c == grn:\n            output[i, j] = grn        \n        # R1: create yellow cells where a lot of green cells are\n        elif sum(1 for v in i_nbh.values() if v == grn) >= 4 and red not in i_direct_nbh.values():\n            output[i, j] = ylw\n            \n        # R3: set fire to cells near the border\n        elif i_c == blk and is_b and ylw in i_direct_nbh.values():\n            output[i, j] = red\n        # R4: make the fire spread - color in red all yellow cells touching red ones\n        elif i_c == ylw and red in i_nbh.values():\n            output[i, j] = red\n        \n        # R2: propagate yellow cells in the empty places\n        elif i_c == blk and ylw in i_direct_nbh.values():\n            output[i, j] = ylw\n        # R5: make the 'fire burn'\n        elif i_c == red and red in i_nbh.values() or ylw not in i_direct_nbh.values():\n            output[i, j] = blk\n        else:\n            #  R0\n            output[i, j] = i_c\n        \n    return output, hidden_i\n\ntask = ca_load.load_data('00d62c1b.json', phase='training')\n\nca_vis_automata.vis_automata_task(task, compute_00d62c1b_part_automata_step, 128, 0)","5cb9fd18":"\ndef compute_00d62c1b_automata_step(input, hidden_i):\n    \n    blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n    \n    output = np.zeros_like(input, dtype=int)\n    hidden_o = np.zeros_like(hidden_i, dtype=int)\n    \n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]\n        i_nbh = nbh(input, i, j)        \n        # cells adagent to the current one \n        i_direct_nbh = { k: v for k, v in i_nbh.items() if k in {(1, 0), (-1, 0), (0, 1), (0, -1)} }\n        \n        i_h0 = hidden_i[0, i, j]\n        \n        is_top_b, is_bottom_b = i == 0, i == input.shape[0]-1\n        is_left_b, is_right_b = j == 0, j == input.shape[1]-1\n        is_b = is_top_b or is_bottom_b or is_left_b or is_right_b\n        \n        if i_h0 != blk:\n            hidden_o[0, i, j] = i_h0\n        \n        if i_c == grn:\n            output[i, j] = grn        \n        \n        # R1*: create yellow cells where a lot of green cells are\n        elif sum(1 for v in i_nbh.values() if v == grn) >= 4 and red not in i_direct_nbh.values() and hidden_i[0, i, j] == 0:\n            output[i, j] = ylw\n        \n            \n        # R3*: set fite to cells near the border\n        elif i_c == blk and is_b and ylw in i_direct_nbh.values():\n            output[i, j] = red\n            hidden_o[0, i, j] = 1\n        # R4*: make the fire spread - color in red all yellow cells touching red ones\n        elif i_c == ylw and red in i_nbh.values():\n            output[i, j] = red\n            hidden_o[0, i, j] = 1\n        \n        # R2: propagate yellow cells in the empty places\n        elif i_c == blk and ylw in i_direct_nbh.values():\n            output[i, j] = ylw\n        \n        elif i_c == red and red in i_nbh.values() or ylw not in i_direct_nbh.values():\n            output[i, j] = blk\n        else:\n            output[i, j] = i_c\n        \n    return output, hidden_o\n\ntask = ca_load.load_data('00d62c1b.json', phase='training')\n\nca_vis_automata.vis_automata_task(task, compute_00d62c1b_automata_step, 50, 1)","72b925fa":"So, with only three rules we nearly solved the task, let's add symmetrical variants of the previous rules.","4fce0bf0":"Well, an interesting phenomena occurs - the fire does not stop! \n\nLets find out what is happening. \n\nIf you look at each frame one-by-one you may notice the following sequence of events:\n  1. yellow cells are created\n  2. the yellow cells propagate, encounter a border and turn to red cells\n  3. after 'burning down' the yellow cells leave empty space\n  4. `goto 1`\n\nWe have a problem - an infinite loop. \n\nThe solution to this problem is quite simple -  before creating a yellow cell we should check if previously a red cell was there. In order to do so we shall add a memory which could take notice of what cells were red. \n\nIn order to have a memory we will expand our CA to have hidden cells. Hidden cells are part of a grid staked atop of the input grid. The hidden grid is not displayed and it's state is not taken into account when checking the solution for correctness. \n\nLet's formlize the new CA definition.\n\n","44cff8be":"Now we just need to deal with the corner case - when cells are near a border. Let's add a rule for that. \n\n      - R1 if the neighborhood contains two consecutive red cells \n          -> color the cell with green\n      - R2 if the neighborhood contains three consecutive cells colored with green red green arranged in straight line corner\n          -> color the cell with green\n      - R3 if the neighborhood contains three consecutive cells colored with green red green arranged in a corner\n          -> color the cell with green\n      - R4 if we are near a border and one green and one red consecutive cells are present\n          -> color the cell with green","1a79d45a":"### New CA formulation\n\nNow as input our transition rules take:\n\n- the value of the `i,j` input cell\n- a neighborhood around the `i, j`-th input the cell in the input grid\n- the value of th `i,j` hidden cell \n- a neighborhood around the `i, j`-th hidden the cell in the hidden grid\n- flags denoting weather the current cell is near a border\n\nAs output the rules give:\n- the value of the `i, j` cell in the output grid\n- the value of the `i, j` hidden cell in the hidden grid\n\n\nSo now when 'setting fire' - turning a yellow cell to a red cell we will set a mark in the memory that will allow us to record if a red cell was ever present at that position. And when creating a yellow cell we will check the memory to record if a red cell was ever present in that position. \n\nThe hidden grid is displayed in the visualization as the rightmost image.\n\n","4da134c2":"![](https:\/\/i.ibb.co\/h8bkyPV\/task-1.png)","320cd895":"# 0. Introduction\n\nFirst of all I want to thank the organizers of this  kaggle competition. This competition is quite unorthodox \nand I believe common methods, will fail to work. For me it is hard to think of a tool from the standard machine\nlearning toolbox that will be applicable \"out of the box\" to this challenge and this is quite exciting! \n\nNot every day you are challenged to create an algorithm capable of reasoning!\n\nI believe this challenge could be solved and part of a successful solution are cellular automata, a somewhat niche area of mathematical science.\nIn this notebook I will try to explain how cellular automata (CA) could be used to tackle this challenge.\n\n\nIn  _part 1_ I will briefly describe what are CA, why people are interested in them and how form very few rules extremely complex systems emerge. Then \nin _part 2_ I will describe how CA are connected to this challenge. More precisely how CA could be \nused as a perfect medium for deriving reasoning rules. I will formally define what a CA is and in _part 3_ I will solve several tasks by implementing transition rules for the defined CA. In _part 4 and 5_ I will analyze the task solutions, find interesting patterns and argue how a successful solution to this challenge would look like.\n\nI have also created a [thread](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/131196) to share CA solutions to complex tasks, you are welocmed to participate !\n\n\n\n# 1. What are Cellular Automata (CA)\n\n[Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Cellular_automaton) does a great job in describing what CA is:\n\n> A **cellular automaton** consists of a regular grid of cells, each in one of a finite number of states [...], such as on and off. The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell. An initial state (time t = 0) is selected by assigning a state for each cell. A new generation is created (advancing t by 1), according to some fixed rule [...] that determines the new state of each cell in terms of the current state of the cell and the states of the cells in its neighborhood. Typically, the rule for updating the state of cells is the same for each cell and does not change over time, and is applied to the whole grid simultaneously.\n\nIn other words CA is a collection of transition rules which specify how to update a set of numbers situated on a grid.\n\nCA are interesting because quite complex behaviours emerge form rather simple rules. \nA great example of such emergence is the, [Game of Life](https:\/\/en.wikipedia.org\/wiki\/Conway%27s_Game_of_Life) (GoL). \nIn it's classical formulation GoL is implemented using an infinite grid with cells having two states - 0 dead, 1 alive.\n\nThere are four transition rules:\n\n1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n2. Any live cell with two or three live neighbours lives on to the next generation.\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\nThese seemingly simple rules give rise to quite interesting phenomena.\n\n- **[osicllators](https:\/\/en.wikipedia.org\/wiki\/Oscillator_(cellular_automaton%29)** - patterns which oscillate from one state to the other indefinitely.\n\n<table>\n    <tr>\n        <th> Pulsar<\/th>\n        <th> Kok's galaxy<\/th>\n        <th> pentadecathlon <\/th>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/07\/Game_of_life_pulsar.gif\"><\/img><\/td>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/2a\/Oscilador8periodos.gif\"><\/img><\/td>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/fb\/I-Column.gif\"><\/img> <\/td>\n    <\/tr>\n<\/table>\n\n- **[spaseships](https:\/\/en.wikipedia.org\/wiki\/Spaceship_(cellular_automaton%29)** - patterns which move across the grid.\n\n<table>\n    <tr>\n        <th> Glider<\/th>\n        <th> Middle-weight spaceship <\/th>\n        <th> Heavy-weight spaceship <\/th>\n    <\/tr>\n    <tr>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f2\/Game_of_life_animated_glider.gif\"><\/img><\/td>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/Animated_Mwss.gif\"><\/img><\/td>\n        <td><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4f\/Animated_Hwss.gif\"><\/img><\/td>\n    <\/tr>\n<\/table>\n\n\nMore complex behaviors could be created: \n\n - Patterns that are able to produce other patterns. For example guns which produce gliders.\n ![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e5\/Gospers_glider_gun.gif)\n - Patterns that interact with other patterns in a prefefined way. For example [reflectors](https:\/\/en.wikipedia.org\/wiki\/Reflector_(cellular_automaton%29) (the pink ones in the picture below) reflect gliders.\n ![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d0\/Color_coded_racetrack_large_channel.gif)\n \n - Patters which take a large number of generations to stabilize. For example the [switch engine](https:\/\/www.conwaylife.com\/wiki\/Switch_engine) - a pattern composed of 8 cells stabilizes only after 3911 iterations becomes a pattern of 842 cells.\n <table>\n    <tr>\n        <th> Switch engine it=0<\/th>\n        <th> Switch engine it=3911<\/th>\n    <\/tr>\n    <tr>       \n        <td><img src=\"https:\/\/i.ibb.co\/Ydg4nKS\/Cropper-Screenshot-2020-02-17-12-20-34.png\"><\/img><\/td>\n        <td><img src=\"https:\/\/www.conwaylife.com\/w\/images\/a\/af\/Switchengine_final.png\"><\/img><\/td>\n    <\/tr>\n<\/table>\n \n \n \nPatterns could be combined together in order to construct more complex patterns. For example the [Noas ark](https:\/\/www.conwaylife.com\/wiki\/Noah%27s_ark) spaceship is created by the combination of two switch engines. The most impressive construction which I have found is a whole [comuter](https:\/\/codegolf.stackexchange.com\/questions\/11880\/build-a-working-game-of-tetris-in-conways-game-of-life). The system was designed to play tetris, but the tetris game is not hard coded. The the game is written in a higher level language and then compiled and loaded to the computer ROM. The computer architecture is shown in the picture below.\n\n![](https:\/\/i.stack.imgur.com\/JXmnf.png)\n\n\nAgain I want to emphasize - **all shown above emerge from a system based on only 4 rules!**","a45181de":"# References    \n    \nMore about CA:\n- https:\/\/www.wolframscience.com\/nks\/ : A new kind of science, a well know book by Steven Wolfram about CA\n- https:\/\/web.archive.org\/web\/20170706093620\/https:\/\/www.irif.fr\/~yunes\/ca\/archives\/bookvivien.pdf : A more formal book about CA\n\nCA & neural networks:\n- https:\/\/arxiv.org\/pdf\/1511.08228.pdf : neural GPU\n- https:\/\/distill.pub\/2020\/growing-ca\/ : disitll article about neural network parametrized CA rules\n\nMore about GoL:\n- https:\/\/www.conwaylife.com\/wiki\/ConwayLife.com : a great wiki\n- https:\/\/copy.sh\/life\/ : an online Gol interpreter\n- https:\/\/codegolf.stackexchange.com\/questions\/11880\/build-a-working-game-of-tetris-in-conways-game-of-life : a computer implemented in Gol\n\nKnowledge Representation:\n- https:\/\/groups.csail.mit.edu\/medg\/ftp\/psz\/k-rep.html : an article by Randall Davis et al. which explores what knowledge representation is\n    \n   ","9020441d":"# How to solve this task with cellular automata ?","2a4cde82":"The code stays the same, we just define a helper function and add `R4` to the end of the if block.\n```python\n\n# ....\n\n# tests if the center cell is present with least one cell present on the side\nsome_present = lambda s1, c, s2: c in i_nbh and (s1 in i_nbh or s2 in i_nbh)\n\n# ...\n\n# R4: if we are near a border and one green and one red consecutive cells are present\nelif i_c == blk and is_b and any( test_side(s1, c, s2) \n                                     for s1, c, s2 in side_ixs \n                                         if some_present( s1, c, s2) ):\n    output[i, j] = grn \n\n```","0228f22a":"And voila! The stable state is the solution and only 5 rules, again !","9245e82b":"# 3. Solving problems with CA\n\nFirst some utility functions ","143a3528":"## Task training\/db3e9e38, continue the pattern\n\nLet's try to design a cellular automata for task `training\/db3e9e38`. \n         \n  ","4b09eb28":"Let's sketch the rules and implement them, for now we will ignore the cells near the borders:\n\n      - R0 if not black -> do nothing\n      - R1 if the neighborhood contains two consecutive red cells \n          -> color the cell with green\n      - R2 if the neighborhood contains three consecutive cells colored green, red, green \n          -> color the cell with green\n      - R3 if the neighborhood contains three consecutive cells colored green, red, green arranged in a corner\n          -> color the cell with green\n       ","ddc82709":"Here is a video of a cellular automata coloring the bars in order of their size. If you want to understand how this works read on ! ","600fcca8":"<img src=\"https:\/\/i.ibb.co\/s5F3Fwz\/task-0.png\" alt=\"task-0\" border=\"0\">","41b037ff":"Solved with only 5 transition rules ! \nLet's do another one!","6cc9e21a":"# 2. How are CA connected to this competition\n\nAs a reminder: in this competition you are given pairs of source-target training images. Your task is to infer the rule which will allow to transition from source image to the target and later apply such rule to an arbitrary number of images. The rules which you should infer are extremely diverse, for example in the first image shown below you should continue the 'stripe' to the right border while in the second you should output the voids formed by the red shapes.\n","81264fb6":"Again, we were able to solve this problem by only formulating 5 transition rules.","ea6a106a":"## Task training\/00d62c1b, fill with yellow the closed areas\n\nThis task is a little bit harder: we need to color with yellow the closed areas created by green cells.\n\nBy using our CA we can easily write transition rules that will fill all the closed areas with yellow - \nwe just create yellow cells in places of high concentration of green cells `R1`. And make the yellow cells \npropagate into the voids, by turning black cells in yellow if at least one direct neighbor is yellow `R2`. By direct \nneighbor I mean a neighbor cell which shares an edge with the center cell.\n\nNext, note that *if a yellow cell touches a border then we are sure the yellow cell is not in a closed area*. \nWe could safety remove the yellow cells touching borders and all the ones that could be reached from the border-touching cell.\n\nIn order to do so we will \"set fire\" to the cells that touch borders - if a yellow cell appears near a border - color it in red `R3`. \nIn order to remove all the cells that could be reached from the border-touching cell let's add two more transition rules. One that will color in red all \nyellow cells touching red ones `R4` and one that will color red cells in black `R5`. So the red cells can only last one iteration.\n\nLet's implement this !\n\n","db41f7c1":"Let's keep things simple and first write CA transition rules for repeating the pattern to the right.\n\n    - R1: if the current call has a color -> do nothing\n    - R2: if the current cell is black and as it's left neighbor and lower left neighbors are orange cells \n        -> output a light blue cell\n    - R3: if the current cell is black and as it's left neighbor and lower left neighbors are light blue cells \n        -> output an orange cell \n\n\nWe can visualize the neighborhood transition rules as:\n    \n\n    light blue  *   *\n    light blue      *   -> orange\n      *         *   * \n      \n    orange  *   *\n    orange      *   -> light blue\n      *     *   *                 * - means  cell of any color\n\n\nLet's try to implement it:","64a8f15e":"## Task training\/b27ca6d3, circle two red cells\n\nThis task is a little bit harder: we need to circle with green cells all the consecutive pairs of red cells. By consecutive cells I mean cells which share a common edge.","9cb8ce21":"### What nbh() does\n\nThe `nbh()` function will be used extensively in the following examples. `nbh()` is a helper function for working with neighborhoods of cells. \nThe example below provides an illustration of what it does by taking neiborhood of the center cell of a 3x3 grid:\n\n\n    grid = np.arange(9).reshape((3,3))\n    # array([[0, 1, 2],\n    #        [3, 4, 5],\n    #        [6, 7, 8]])\n    nbh(grid, 1, 1) # dict: nbh_id -> nbh_value\n    #{\n    #    (-1, -1): 0, (-1, 0): 1, (-1, 1): 2,\n    #    ( 0, -1): 3, ( 0, 0): 4, ( 0, 1): 5,\n    #    (1, -1): 6,  ( 1, 0): 7, (1, 1): 8,\n    #}\n\n\n   ","c1fa7660":"# 4. Analysis of transition rules\n\nLet' take a closer look at the transition rules - although there is quite a lot of python, they actually perform a rather limited set of actions.\n\nNamely, they only:\n- compare the value of the current cell to a predefined value        \n- compare the value of a neighborhood cell to a predefined value        \n- check if the current cell is near the border \n- count the number of occurrences of a specific value in the neighborhood cells (Checking  the presence or absence of a specific value in the neighborhood cells could be thought as a subset of this action.)\n    \nAlso they use simple logical `and`, `or` to combine the tests on the input grid. \n\nNote that the rules for all three tasks are written in one big `if`-statement (the last task uses two ifs to handle the hidden grid).\nSo we can see that all the test preformed on one grid are mutually exclusive.\n\n\n\n# 5. A probable solution approach\n\nThe goal of previous analysis was to show how little is needed to write a solution by using CA transition rules. \nThis is important, because if the task of this challenge is to develop an algorithm which will be able derive \nrules form few examples, then the language in which the rules are derived should permit to express complex \nbehaviors with as little as possible. \n\nSo, a probable solution approach is to create an algorithm which will generate transition rules \nfor CAs which in their turn will solve the given tasks.\n\n\n## Solving challenging tasks\n\n\nObviously some extension to the current CA formulation are required, for example the current formulation \ndoes not handle \"zoom in\" and \"zoom out\" tasks where the size of the input and output grids does not match.\n\nSome tasks require general reasoning, like comparing sizes of object and their relative position, some \nrequire finding non trivial patterns. I think it would be interesting to try to implement as many hard \ntasks as possible with the current formulation of CA in order to find failures in the current formulation.\nTo do this I created a discussion [thread](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/131196), fell free to participate.\n\nCurrently I have completed a solution for task `training\/08ed6ac7`, the one shown in the begining. In `training\/08ed6ac7` \nyou are expected to color the bars according to their size. I plan to write a kernel explaining the solution the until \nthe end of this week.\n\n\n## Other approaches \n\nA good question to ask: is the current CA definition the optimal choice ?\n    \nThere are different ways to define CA for example - in [second order](https:\/\/en.wikipedia.org\/wiki\/Second-order_cellular_automaton) cellular automata the state of a cell is determined by the cell neighborhood at the two previous time steps, in [block automation](https:\/\/en.wikipedia.org\/wiki\/Block_cellular_automaton) a regular lattice is shifted across the grid and the transition rules are applied to the cells in each lattice cell. It is possible to use neural netowrks to create transition rules, like in [neural GPU](https:\/\/arxiv.org\/pdf\/1511.08228.pdf) or this Alexander Mordvintsev [disitll article](https:\/\/distill.pub\/2020\/growing-ca\/). \n\nWell maybe CA is not part of the best solution at all ! \nIt will be great to explore possible approaches to solving this problem.\n\nIf you want to further discuss CA you are welcome to do so in the comment section to this post or this [topic](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/131195).","e6cfccd2":"\nI feel, a somewhat fundamental question should be answered - how such rules should be represented.\n\nIn the general case this is an [excitingly difficult problem](https:\/\/groups.csail.mit.edu\/medg\/ftp\/psz\/k-rep.html), but in case of this competition I think that one could try to exploit the cellular automata ability of creating complex behaviors form simple rules. And use them as a language which could be created by an algorithm in order to represent the challenge tasks rules. \n\nBefore going further I will first define precisely what I mean by cellular automata and what I mean when I say 'language to represent rules'. Then I will illustrate \nhow to apply CA to this challenge by solving three tasks.\n\n## Formulation of CA \n\nWe will use a life like cellular automata. \nOur CA will have two grids - and input and an output grid. The CA transition rules are applied to the input grid, the transition rules outputs are written to the output grid. Once the iteration is completed the output grid becomes the input grid. \n\nAs input our transition rules take:\n- the value of the `i,j` input cell\n- a neighborhood around the `i, j`-th input the cell in the input grid\n- flags denoting weather the current cell is near a border\n\nAs output the transition rules give:\n- the value of the `i, j` cell in the output grid\n\n\nThe iterations of the CA are preformed while a stable state is not reached i.e. the input grid is equal tho the output grid. The stable state is expected to be the solution to the challenge.\n\n\nCA transition rules are a great way to represent the rules you are expected to infer in this challenge. As you can notice they have a rather constrained input, and later I will show that they also make use of a rather constrained set of operations. This makes them a perfect candidate for being the \"language for reason\".\n","2f2d4866":"### Color coding\n\nThrough this challenge in order to visualize the tasks color coding are adopted, here we show what color corresponds to what number. (code taken from [here](https:\/\/www.kaggle.com\/nagiss\/abstraction-and-reasoning-view-all-data))"}}