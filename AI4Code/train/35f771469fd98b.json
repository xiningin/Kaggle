{"cell_type":{"d287fcfa":"code","0f7c6e0c":"code","1c74f27a":"code","5307286d":"code","95d9c53e":"code","381f910d":"code","d406dc54":"code","e927fa3a":"code","43504b63":"code","a775e53e":"markdown","4e936f38":"markdown"},"source":{"d287fcfa":"# install Pycaret\n# PyCaret is an open source, \n# low-code machine learning library in Python \n# that allows you to go from preparing your data\n# to deploying your model within minutes in your\n# choice of notebook environment.\n!pip install pycaret[full]","0f7c6e0c":"# import library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pycaret.classification import *","1c74f27a":"# Load Data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\n\nall_data = pd.concat([train, test])\n","5307286d":"all_data2 = all_data.drop(columns='id')\nall_data2","95d9c53e":"# Distribution\n\nplt.figure(figsize = (12, 6))\nmissing_values = all_data2.isnull().sum()[:-1]\nsns.histplot(missing_values, color='violet');\nplt.show()\n\nprint('\\n')\nprint('-------- Distribution of Missing values --------')\nprint('Min:', missing_values.min())\nprint('Max:', missing_values.max())\nprint('Mean:', missing_values.mean())\nprint('------------------------------------------------')\n","381f910d":"train2 = all_data2[:len(train)]\ntest2 = all_data2[len(train):]\ntest2.drop(columns = 'claim', inplace = True)\n","d406dc54":"from sklearn.metrics import log_loss\n\ndef pycaret_model(train, target, test, fold):\n    \n    print('Setup Your Data....')\n    setup(data=train,\n        target=target,\n        normalize = True,\n        normalize_method = 'robust',\n        silent= True,\n        use_gpu=True,\n        session_id = 42,\n        numeric_imputation = 'mean')\n    \n    add_metric('logloss', 'LogLoss', log_loss, greater_is_better=False, target='pred_proba')\n    \n    print('Creating Models....')\n    \n    model_list = []\n    lgbm = create_model(estimator = 'lightgbm', fold = fold)\n    xgb = create_model(estimator = 'xgboost', fold = fold)\n    cat = create_model(estimator = 'catboost', fold = fold)\n    \n    model_list.append(lgbm)\n    model_list.append(xgb)\n    model_list.append(cat)\n    \n    print('Blending Models....')\n    blended = blend_models(estimator_list= model_list, fold=fold)\n    pred_holdout = predict_model(blended)\n\n    print('Finallizing Models....')\n    final_model = finalize_model(blended)\n\n    print('Done...!!!')\n\n    prep_pipe = get_config('prep_pipe')\n    prep_pipe.steps.append(['trained_model', final_model])\n    pred = prep_pipe.predict_proba(test)\n\n    return pred","e927fa3a":"result = pycaret_model(train2, 'claim', test2, 5)\nresult\n","43504b63":"sub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsub['claim'] = result[:, 1]\nsub.to_csv('sub.csv', index = 0)","a775e53e":"# Modeling\u00b6\n## Blending Ensemble\n- LightGBM\n- Catboost\n- Xgboost","4e936f38":"# Handle missing values\nWe can use mean values to handle missing values.\nOr, we can predict missing values with clean data.\nIn pycaret, we can use imputation function(numeric_imputation) :)"}}