{"cell_type":{"8cd89ffa":"code","16d6ae86":"code","360f422b":"code","7be43bb8":"code","5f52f394":"code","e49881e0":"code","7503abd6":"code","a02a6eb3":"code","1d382b4b":"code","8637f0e1":"code","4988c783":"code","b6d1bae7":"code","5cdca464":"code","8a98171a":"code","38f36985":"code","d8094a75":"markdown","a537e1f1":"markdown","6736dfd1":"markdown","6bcac2be":"markdown","bed619f6":"markdown","f45721b5":"markdown","241770f1":"markdown","0475f5e2":"markdown","cb90b36d":"markdown","606322ce":"markdown","cd53f0b0":"markdown","3e61890b":"markdown","f8833bf8":"markdown","87deb15a":"markdown","d7239060":"markdown"},"source":{"8cd89ffa":"%config InlineBackend.figure_format = 'retina'\n\nfrom operator import itemgetter\nfrom pathlib import Path\nfrom pdb import set_trace\nfrom textwrap import wrap\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np\nimport pandas as pd\n\n\nclass VisualStyle:\n    \"\"\"Convenience wrapper on top of matplotlib config.\"\"\"\n\n    def __init__(self, config, default=None):\n        if default is None:\n            default = plt.rcParams\n        self.default = default.copy()\n        self.config = config\n\n    def replace(self):\n        plt.rcParams = self.config\n\n    def override(self, extra=None):\n        plt.rcParams.update(self.config)\n        if extra is not None:\n            plt.rcParams.update(extra)\n\n    def restore(self):\n        plt.rcParams = self.default\n\n    def __enter__(self):\n        self.override()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.restore()\n\n        \npalette1 = '173f5f 20639b 3caea3 f6d55c ed553b'\npalette2 = '264653 2a9d8f e9c46a f4a261 e76f51'\ntableau = '4e79a7 f28e2b e15759 76b7b2 59a14f edc948 b07aa1 ff9da7 9c755f bab0ac'\n\n\ndef make_cycler(colors):\n    from cycler import cycler\n    colors_str = ', '.join([f\"'{c}'\" for c in colors.split()])\n    return f\"cycler('color', [{colors_str}])\"\n    \n    \nclass NotebookStyle(VisualStyle):\n    def __init__(self):\n        super().__init__({\n            'figure.figsize': (8, 6),\n            'figure.titlesize': 20,\n            'font.family': 'monospace',\n            'font.monospace': 'Liberation Mono',\n            'axes.titlesize': 18,\n            'axes.labelsize': 16,\n            'axes.spines.right': False,\n            'axes.spines.top': False,\n            'xtick.labelsize': 14,\n            'ytick.labelsize': 14,\n            'font.size': 14,\n            'axes.prop_cycle': make_cycler(tableau)\n        })\n\n        \ndef show_all(df):\n    with pd.option_context('display.max_columns', None, 'display.max_rows', None):\n        display(df)\n        \n        \nDATA = Path('\/kaggle\/input\/kaggle-survey-2019\/')\nSCHEMA = DATA\/'survey_schema.csv'\nQUESTIONS = DATA\/'questions_only.csv'\nMULTIPLE = DATA\/'multiple_choice_responses.csv'\nOTHER = DATA\/'other_text_responses.csv'\n\nassert all(p.exists() for p in (SCHEMA, QUESTIONS, MULTIPLE, OTHER))\n\nschema_df = pd.read_csv(SCHEMA)\nquestions_df = pd.read_csv(QUESTIONS)\nmulti_df = pd.read_csv(MULTIPLE)\nother_df = pd.read_csv(OTHER)\n\nstyle = NotebookStyle()\nstyle.override()\n\nquestions = multi_df.iloc[0]\nanswers = multi_df.iloc[1:]\nprint(questions['Q4'])\nanswers['Q4'].value_counts()\ndegree_counts = answers['Q4'].fillna('I prefer not to answer').value_counts().reset_index().rename(columns={'index': 'degree', 'Q4': 'count'})\ndegree_counts['degree'] = degree_counts['degree'].map({\n    'Master\u2019s degree': 'MS',\n    'Bachelor\u2019s degree': 'BS',\n    'Doctoral degree': 'PhD',\n    'Some college\/university study without earning a bachelor\u2019s degree': 'College\/University',\n    'Professional degree': 'Professional',\n    'I prefer not to answer': 'No answer',\n    'No formal education past high school': 'High School'\n})\ndegree_counts['higher_education'] = degree_counts['degree'].isin({'MS', 'BS', 'PhD', 'College\/University'}).map({True: 'yes', False: 'no'})\n# degree_counts","16d6ae86":"def plot_yes_no_chart(df, figsize=(12, 4)):\n    def create_label(value, dataset):\n        return f'{value:2.2f}%'\n    f, ax = plt.subplots(1, 2, figsize=figsize)\n    ax.flat[0].axis('off')\n    ax = ax.flat[-1]\n    ax.set_aspect('equal')\n    higher_education = degree_counts.groupby('higher_education').sum()\n    total = higher_education['count'].sum()\n    y_cnt = higher_education.loc['yes']['count']\n    n_cnt = higher_education.loc['no']['count']\n    _, _, autotexts = ax.pie(\n        [y_cnt, n_cnt], \n        labels=['Yes', 'No'], explode=[0, 0.1],\n        autopct=lambda x: create_label(x, higher_education), \n        wedgeprops=dict(edgecolor='w'),\n        textprops=dict(color=\"black\", size=13, weight='bold'))\n    for autotext in autotexts:\n        autotext.set_color('white')\n    ax.set_title('Higher Education?')\n    ax.set_xlabel(f'among {total} respondents in total')\n    return ax\n\nax = plot_yes_no_chart(degree_counts, figsize=(8, 4));","360f422b":"def hex2rgba(hex_value: str) -> tuple:\n    n = len(hex_value)\n    if n == 6:\n        r, g, b = hex_value[:2], hex_value[2:4], hex_value[4:]\n        a = 'ff'\n    elif n == 8:\n        r, g, b, a = [hex_value[i:i+2] for i in (0, 2, 4, 6)]\n    else:\n        raise ValueError(f'wrong hex string: {hex_value}')\n    rgba = tuple(int(value, 16)\/255. for value in (r, g, b, a))\n    return rgba\n\ndef make_colors(base, size):\n    from itertools import islice, cycle\n    colors = list(islice(cycle([hex2rgba(x) for x in base.split()]), None, size))\n    return colors\n\ndef plot_bars_with_percentage(dataframe, xcol, ycol, ax, \n                              xlabel='Number of Respondents', \n                              ylabel='',\n                              colors=None):\n    \n    colors = colors if colors is not None else make_colors(tableau, len(dataframe))\n\n    def generate_bars(df, ax=None):\n        ax = dataframe.plot.barh(x=xcol, y=ycol, ax=ax, color=colors)\n        ax.set_xlabel(xlabel)\n        ax.set_ylabel(ylabel)\n        ax.set_axisbelow(True)\n        ax.grid(True)\n        ax.get_legend().remove()\n        return ax\n    \n    def generate_percentage_annotations(df, ax):\n        total = df[ycol].sum()\n        for i, count in enumerate(df[ycol]):\n            ax.text(\n                count + 200, i, f'{count\/total:2.2%}', fontsize=12, \n                verticalalignment='center', \n                horizontalalignment='left',\n                bbox=dict(facecolor='white', edgecolor='black'))\n        return ax\n    \n    def adjust_limits(ax):\n        x_min, x_max = ax.get_xlim()\n        x_max *= 1.1\n        ax.set_xlim(x_min, x_max)\n        return ax\n    \n    ax = generate_bars(dataframe, ax=ax)\n    ax = generate_percentage_annotations(dataframe, ax=ax)\n    ax = adjust_limits(ax)\n    return ax\n\ndef plot_pie_chart(df, value_col, label_col, ax, pct=False, colors=None, pctdistance=0.6):\n    def autopct(value): return f'{value:2.2f}%'\n    rel_counts = df[value_col]\/df[value_col].sum()\n    explode = [0.01] * len(rel_counts)\n    params = dict(\n        x=rel_counts, labels=df[label_col], \n        pctdistance=pctdistance,\n        colors=colors, wedgeprops=dict(width=0.5, edgecolor='w'),\n        textprops=dict(size=16))\n    if pct:\n        params['autopct'] = autopct\n    ax.pie(**params)\n    return ax\n\ndef plot_education_level(dataframe, figsize=(10, 8)):\n    f, axes = plt.subplots(1, 2, figsize=figsize)\n    f.suptitle('Survey Participants Education')\n    ax1, ax2 = axes.flat\n    ax1 = plot_bars_with_percentage(dataframe, ax=ax1, xcol='degree', ycol='count')\n    ax2 = plot_pie_chart(dataframe, ax=ax2, value_col='count', label_col='degree')\n    return f\n\nplot_education_level(degree_counts, figsize=(12, 6));","7be43bb8":"# print(questions['Q5'])\n# print(questions['Q5_OTHER_TEXT'])\n\nscientific = ['Statistician', 'Research Scientist', 'Data Scientist']\nengineering = ['DBA\/Database Engineer', 'Data Engineer', 'Software Engineer']\nbusiness = ['Business Analyst', 'Data Analyst', 'Product\/Project Manager']\nother = ['Other', 'Not employed', 'Student']\n\njob_titles = answers['Q5'].fillna('Other').value_counts().reset_index().rename(columns={'Q5': 'count', 'index': 'job_title'})\n\njob_titles['area'] = job_titles['job_title'].map(\n    lambda x:\n    'Science' if x in scientific else \n    'Engineering' if x in engineering else\n    'Business' if x in business else\n    'Other')\n\ncolors_set = [hex2rgba(x) for x in tableau.split()[:4]]\n\nfrom collections import OrderedDict\ncolor_map = OrderedDict(zip(sorted(job_titles['area'].unique()), colors_set))\n\njob_titles = job_titles.sort_values(by='area')\n\nareas = job_titles.groupby('area').sum().reset_index()\n\ncolors = job_titles['area'].map(color_map)\n\nareas = areas.sort_values(by='area')","5f52f394":"f, axes = plt.subplots(1, 2, figsize=(12, 7))\nax1, ax2 = axes.flat\nplot_bars_with_percentage(job_titles, ax=ax1, xcol='job_title', ycol='count', colors=colors)\nplot_pie_chart(areas, ax=ax2, label_col='area', value_col='count', colors=color_map.values(), pctdistance=0.75, pct=True)\nf.suptitle('Job Titles Distribution');","e49881e0":"from collections import defaultdict\nfrom spacy.lang.en import STOP_WORDS\nfrom wordcloud import WordCloud\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport numpy as np\n\ndef truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):\n    new_cmap = colors.LinearSegmentedColormap.from_list(\n        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),\n        cmap(np.linspace(minval, maxval, n)))\n    return new_cmap\n\nq5_texts = other_df['Q5_OTHER_TEXT'].iloc[1:]\nq5_texts = q5_texts[~q5_texts.isna()]\ntitles = [word.strip().lower() for text in q5_texts.unique() for word in text.split()]\n\ncmap = truncate_colormap(plt.get_cmap('Blues'), 0.4, 0.9)\ncloud = WordCloud(stopwords=STOP_WORDS, \n                  width=1400, height=800, \n                  colormap=cmap,\n                  background_color='white')\nimage = cloud.generate(' '.join(titles))\nf, ax = plt.subplots(1, 1, figsize=(14, 8))\nax.imshow(image)\nax.axis('off');","7503abd6":"import textwrap\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib.font_manager as font_manager\nfrom matplotlib.pyplot import get_cmap\n\ndef create_axes_if_needed(ax, **fig_kwargs):\n    if ax is None:\n        f = plt.figure(**fig_kwargs)\n        ax = f.add_subplot(111)\n    else:\n        f = ax.figure\n    return f, ax\n\ndef plot_heatmap(data, xticks=None, yticks=None, cm='Reds', \n                 annots=None, font_size=20, tick_font_size=14,\n                 ticks_wrap=15, annot_threshold=0.5,\n                 fmt='{:.2f}', background_colors=None,\n                 annot_light='#ffffff', annot_dark='#000000',\n                 tight_layout=True, ax=None, **fig_kwargs):\n    \n    f, ax = create_axes_if_needed(ax, **fig_kwargs)\n    n, m = data.shape\n    w = h = 1\n    ax.set_xlim(left=0, right=m)\n    ax.set_ylim(bottom=0, top=n)\n    cmap = get_cmap(cm) if isinstance(cm, str) else cm\n    values_font = font_manager.FontProperties(size=font_size)\n    \n    for i in range(m):\n        for j in range(n):\n            x, y = i*w, j*h\n            value = data[n - j - 1, i]\n            if background_colors is None:\n                color = cmap(value)\n            else:\n                color = background_colors[n - j - 1, i]\n            rect = patches.Rectangle((x, y), w, h, color=color)\n            ax.add_patch(rect)\n            if annots is not None:\n                annot = annots[n - j - 1, i]\n            else:\n                annot = fmt.format(value)\n            annot_color = annot_light if value >= annot_threshold else annot_dark\n            ax.annotate(annot, xy=(x + w\/2, y + h\/2), \n                        va='center', ha='center',\n                        color=annot_color, fontproperties=values_font)\n            \n    xtick_offset, ytick_offset = w\/2, w\/2\n    ax.set_xticks([xtick_offset + i * w for i in range(m)])\n    ax.set_yticks([ytick_offset + i * h for i in range(n)])\n    ax.xaxis.tick_top()\n    \n    if xticks is None and yticks is None:\n        ax.set_xticks([])\n        ax.set_yticks([])\n    else:\n        fontsize = tick_font_size\n        if xticks is not None:            \n            if ticks_wrap is not None:\n                xticks = [\n                    '\\n'.join(textwrap.wrap(name, width=ticks_wrap))\n                    for name in xticks]\n            ax.set_xticklabels(xticks, fontsize=fontsize, rotation=45)\n        if yticks is not None:\n            if ticks_wrap is not None:\n                yticks = [\n                    '\\n'.join(textwrap.wrap(name, width=ticks_wrap))\n                    for name in yticks]\n            ax.set_yticklabels(reversed(yticks), fontsize=fontsize)\n                    \n    if tight_layout:\n        ax.figure.tight_layout()\n    \n    for name in ('left', 'top', 'right', 'bottom'):\n        ax.spines[name].set_visible(True)\n    return ax\n\ndef truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):\n    new_cmap = colors.LinearSegmentedColormap.from_list(\n        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),\n        cmap(np.linspace(minval, maxval, n)))\n    return new_cmap\n\nscientific = ['Statistician', 'Research Scientist', 'Data Scientist']\nengineering = ['DBA\/Database Engineer', 'Data Engineer', 'Software Engineer']\nbusiness = ['Business Analyst', 'Data Analyst', 'Product\/Project Manager']\nother = ['Other', 'Not employed', 'Student']\nlabels = ['No answer', 'High School', 'Professional', 'College\/University', 'BS', 'MS', 'PhD']\ndf = answers[['Q4', 'Q5']].copy().rename(columns={'Q4': 'degree', 'Q5': 'occupation'})\ndf['degree'] = df['degree'].fillna('I prefer not to answer').map({\n    'Master\u2019s degree': 'MS',\n    'Bachelor\u2019s degree': 'BS',\n    'Doctoral degree': 'PhD',\n    'Some college\/university study without earning a bachelor\u2019s degree': 'College\/University',\n    'Professional degree': 'Professional',\n    'I prefer not to answer': 'No answer',\n    'No formal education past high school': 'High School'\n})\ndf['degree'] = pd.Categorical(df['degree'], categories=labels, ordered=True)\ndf['higher_education'] = df['degree'].isin({'MS', 'BS', 'PhD', 'College\/University'}).map({True: 'yes', False: 'no'})\ndf['occupation'] = df['occupation'].fillna('Other')\ndf['area'] = df['occupation'].map(\n    lambda x:\n    'Science' if x in scientific else \n    'Engineering' if x in engineering else\n    'Business' if x in business else\n    'Other'\n)\n\nct = pd.crosstab(df['degree'], df['occupation'])\n\ncolor_map = truncate_colormap(get_cmap('Reds'), minval=0.1, maxval=0.9)\n\nvalues = np.interp(ct.values.ravel(), (ct.min().min(), ct.max().max()), (0, 1)).ravel()\nbackgrounds = np.array([color_map(v) for v in values])\nvalues = values.reshape(ct.shape)\nbackgrounds = backgrounds.reshape(ct.shape + (4,))\n\nplot_heatmap(ct.values, cm=color_map, background_colors=backgrounds,\n             xticks=ct.columns.tolist(), yticks=ct.index.tolist(), \n             fmt='{:d}', annot_threshold=600, figsize=(12, 8), ticks_wrap=12);","a02a6eb3":"import seaborn as sns\ndegree_area = df.groupby(['degree', 'area']).count().occupation.reset_index().rename(columns={'occupation': 'count'})\ng = sns.catplot(\n    x=\"count\", y=\"degree\", col=\"area\",\n    data=degree_area, kind=\"bar\", height=5, aspect=0.8)\ng.fig.suptitle('Frequency Histograms of Degrees Depending on Area', y=1.1)\nfor ax in g.axes.flat:\n    ax.grid(True, linestyle='--')\n    ax.set_axisbelow(True)\n    ax.set_xlabel('')\n    ax.set_ylabel('')","1d382b4b":"def parse_salary_range(x):\n    if x != 'n\/a':\n        if '>' in x:\n            start = int(x.strip('>').strip().strip('$').replace(',', ''))\n            end = float('inf')\n        elif '<' in x:\n            start = 0\n            end = int(x.strip('<').strip().strip('$').replace(',', ''))\n        else:\n            start, end = [int(part.strip('$').replace(',', '')) for part in x.split('-')]\n        return start, end\n    return -1, -1\n    \ndf['salary'] = answers['Q10'].fillna('n\/a')\ndf['has_salary_range'] = df['salary'].map(lambda x: 'yes' if x != 'n\/a' else 'no')\ndf = pd.concat([df, df['salary'].map(parse_salary_range).apply(pd.Series).rename(columns={0: 'salary_from', 1: 'salary_to'})], axis=1)\n\nsalary_df = df.query('occupation not in (\"Student\", \"Not employed\")').groupby(['occupation', 'has_salary_range']).count().salary.reset_index()\ng = sns.catplot(\n    x=\"salary\", y=\"occupation\", col=\"has_salary_range\",\n    data=salary_df, kind=\"bar\", height=5, aspect=1.4)\ng.fig.suptitle('Occupation: Has a Respondent Reported The Salary Level?', y=1.1)\nax1, ax2 = g.axes.flat\nfor ax in (ax1, ax2):\n    ax.grid(True, linestyle='--')\n    ax.set_axisbelow(True)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\nax1.set_title('No')\nax2.set_title('Yes')\nn_total = salary_df.query(\"has_salary_range == 'no'\").salary.sum()\ny_total = salary_df.query(\"has_salary_range == 'yes'\").salary.sum()\nax1.set_xlabel(f'Total: {n_total}');\nax2.set_xlabel(f'Total: {y_total}');","8637f0e1":"salary_df = df.query('occupation not in (\"Student\", \"Not employed\")').groupby(['degree', 'has_salary_range']).count().salary.reset_index()\ng = sns.catplot(\n    x=\"salary\", y=\"degree\", col=\"has_salary_range\",\n    data=salary_df, kind=\"bar\", height=5, aspect=1.3)\ng.fig.suptitle('Education Level: Has a Respondent Reported The Salary Level?', y=1.1)\nax1, ax2 = g.axes.flat\nfor ax in (ax1, ax2):\n    ax.grid(True, linestyle='--')\n    ax.set_axisbelow(True)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\nax1.set_title('No')\nax2.set_title('Yes')\nn_total = salary_df.query(\"has_salary_range == 'no'\").salary.sum()\ny_total = salary_df.query(\"has_salary_range == 'yes'\").salary.sum()\nax1.set_xlabel(f'Total: {n_total}');\nax2.set_xlabel(f'Total: {y_total}');","4988c783":"from functools import partial\ndef q1(x): return np.quantile(x, q=.25)\ndef q2(x): return np.quantile(x, q=.50)\ndef q3(x): return np.quantile(x, q=.75)\n\ndef iqr_filter(data, group_col, salary_from='salary_from', salary_to='salary_to', var_name='Bound'):\n    data = data[[group_col, salary_from, salary_to]].copy()\n    data = data[~data[salary_to].map(np.isinf)]\n    data = pd.melt(data, id_vars=[group_col], value_vars=[salary_from, salary_to], var_name=var_name)\n    data[var_name] = data[var_name].map({salary_from: 'Lower', salary_to: 'Upper'})\n    iqr = data.groupby([group_col, var_name]).aggregate(\n        Q1=('value', q1),\n        Q2=('value', q2),\n        Q3=('value', q3),\n    ).assign(\n        IQR=lambda dataset: dataset['Q3'] - dataset['Q1'],\n        IQR_lower=lambda dataset: dataset['Q1'] - 1.5*dataset['IQR'],\n        IQR_upper=lambda dataset: dataset['Q3'] + 1.5*dataset['IQR']\n    ).reset_index()\n    joined = pd.merge(data, iqr, on=[group_col, var_name])\n    return joined.query('IQR_lower <= value <= IQR_upper').reset_index()\n\ndef boxplot(data, group_col, var_name='Bound', title='Boxplot', figsize=(12, 8), text_wrap=None, ax=None):\n    f, ax = create_axes_if_needed(ax, figsize=figsize)\n    data = iqr_filter(data, group_col, var_name=var_name)[[group_col, var_name, 'value']]\n    sns.boxplot(x='value', y=group_col, hue=var_name, data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel('Amount in USD')\n    ax.grid(True, linestyle='dotted')\n    ax.set_axisbelow(True)\n    ax.set_title(title)\n    if text_wrap is not None:\n        ax.set_yticklabels([\n            '\\n'.join(textwrap.wrap(t.get_text(), width=text_wrap))\n            for t in ax.get_yticklabels()])\n    return ax\n\nsalary_data = df.query('has_salary_range == \"yes\"')\n\nboxplot(data=salary_data, group_col='degree', title='Salary vs. Education', figsize=(10, 6));","b6d1bae7":"boxplot(data=salary_data, group_col='occupation', title='Salary vs. Occupation', text_wrap=18, figsize=(10, 8));","5cdca464":"table = salary_data.groupby(['degree', 'occupation']).aggregate(\n    salary_from_median=('salary_from', 'median'),\n    salary_to_median=('salary_to', 'median')\n).reset_index()\ntable_from = table.drop(columns=['salary_to_median']).pivot(index='degree', columns='occupation')\nxticks = [x for _, x in table_from.columns.tolist()]\nyticks = table_from.index.tolist()\ncolor_map = truncate_colormap(get_cmap('Blues'), minval=0.1, maxval=0.9)\nvalues = table_from.values.astype(float)\nvalues_norm = values \/ values.max().max()\nannots = np.array(['${:d}k'.format(int(v\/1000)) for v in values.ravel()]).reshape(values_norm.shape)\nbackgrounds = np.array([color_map(v) for v in values_norm.ravel()]).reshape(values_norm.shape + (4,))\nplot_heatmap(values, cm=color_map, background_colors=backgrounds,\n             annots=annots, xticks=xticks, yticks=yticks, fmt='{:.2f}', \n             annot_threshold=30000, annot_light='#ffffff', \n             annot_dark='#000000', figsize=(12, 8), ticks_wrap=12);","8a98171a":"table = salary_data.groupby(['degree', 'occupation']).aggregate(\n    salary_from_median=('salary_from', 'median'),\n    salary_to_median=('salary_to', 'median')\n).reset_index()\ntable_from = table.drop(columns=['salary_from_median']).pivot(index='degree', columns='occupation')\nxticks = [x for _, x in table_from.columns.tolist()]\nyticks = table_from.index.tolist()\ncolor_map = truncate_colormap(get_cmap('Reds'), minval=0.1, maxval=0.9)\nvalues = table_from.values.astype(float)\nvalues_norm = values \/ values.max().max()\nannots = np.array(['${:d}k'.format(int(v\/1000)) for v in values.ravel()]).reshape(values_norm.shape)\nbackgrounds = np.array([color_map(v) for v in values_norm.ravel()]).reshape(values_norm.shape + (4,))\nplot_heatmap(values, cm=color_map, background_colors=backgrounds,\n             annots=annots, xticks=xticks, yticks=yticks, fmt='{:.2f}', \n             annot_threshold=30000, annot_light='#ffffff', \n             annot_dark='#000000', figsize=(12, 8), ticks_wrap=12);","38f36985":"import matplotlib.ticker as ticker\nstats = iqr_filter(salary_data, group_col='degree')\nstats_long = pd.melt(stats, value_vars=['Q1', 'Q2', 'Q3'], id_vars=['degree'], var_name='Quantile')\nf, ax = plt.subplots(1, 1, figsize=(12, 6))\nsns.pointplot(x='degree', y='value', hue='Quantile', data=stats_long, ax=ax)\nax.set_xticklabels(ax.get_xticklabels(), rotation=15)\nformatter = ticker.StrMethodFormatter('${x:,.0f}')\nax.yaxis.set_major_formatter(formatter)\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_axisbelow(True)\nax.grid(True, linestyle='dotted')\nax.set_title('Salary Quantiles For Degree Levels');","d8094a75":"As the diagram shows, Bachelor's and Master's degrees are well represented in all areas. The only exception is the `Science` area where, as we've seen before, Ph.D. holders are the second most frequent group. Also, the `Other` group shows the biggest number of respondents who have or pursue some kind of university degree. Obviously, it follows from the fact that we've included people who denoted themselves as students into this category. \n\n### Salary Levels\n\nEventually, we are ready to investigate how the levels of education and titles correlate with the salary levels. It is important to note that some respondents didn't put their salary ranges when answered the survey questions even when they hadn't reported themselves as `Not employed` or `Student`. For the purposes of our analysis, we drop all answers that don't include the salary range. \n\nBut before we do this, it would be a good idea to check if some groups of respondents declined to put their salaries more ofter than others. ","a537e1f1":"### Higher Education\n\nThe first thing we would like to see, is how many participants have taken part in the survey? How many of them have some kind of higher education? Let's consider the following levels of education as Higher Education:\n1. Doctoral degree\n2. Master's degree\n3. Bachelor's degree\n4. College\/University study\n\nNow, let's see how many respondents have one of these degrees.","6736dfd1":"As the pie chart shows, approximately `30%` of respondents are involved in (data) scientific or mathematical work, and around `33%` (_Engineering_ plus _Business_) represent the industry. Also, around `20%` of Kaggle's survey participants are students. And I would say, not surprisingly. Kaggle is a great place to learn about cutting edge Machine Learning models and algorithms.\n\nIn addition to the diagrams shown above, let's try to analyze the answers from the `Other` section where the respondents put arbitrary strings. For this purpose, we create a quick sketch using a word cloud diagram like the following picture shows. Some of the respondents who clarified their occupation are on management and architect positions, while others are executives, directors, and of course - engineers.","6bcac2be":"## Education, Title, Salary: How Are They Related?\n\nSooner or later, many of us asked themselves some of the following questions: _What is the median salary for a title X?_ _How well a certain level of education is compensated?_ _Do I need a Ph.D. to become a Data Scientist?_\nThe answers to these questions help us to properly plan the advancement (or complete change) of our carrier, ask for higher wages, or stimulate to pursue a new education degree. In this notebook, we'll try to analyze Kaggle Survey's answers to understand how the education level, job title, and salary are related to each other.\n\n![Imgur](https:\/\/i.imgur.com\/uCi9iEW.jpg)","bed619f6":"As we have already mentioned above, the increase in education level tends to most strongly correlate with the median and highest salaries. Well, a good reason to educate yourself!\n\n### Conclusion\n\nI hope this little analysis was enjoyable for you. The AI is definitely a hot topic these days with outstanding compensation but also demanding in terms of skills required from an employee. Level up your education, practice here on Kaggle, and you'll always find a way to earn some money :)","f45721b5":"Again, we see how many students pursuing their Bachelor's and Master's degrees are practicing their skills on Kaggle. Many respondents who occupy the positions of `Data Scientist` and `Software Engineer` also have one of these degrees. Finally, survey participants with Ph.D. mostly occupy the position of `Research Scientist`, which seems to be aligned with our intuitive expectations. The Ph.D. holders occupy this position almost twice more often than the respondents with MS diploma.\n\nIn order to see how the degrees are represented in various areas, let's create the bar plots showing a number of respondents holding a specific degree and working at the specific field.","241770f1":"### How Title and Degree are Related to Each Other?\n\nIn the previous sections, we've seen which degrees and job titles are represented in the survey. So the next reasonable thing to ask about is how these two things are related to each other. How does one's degree relate to their occupation?","0475f5e2":"We see how the median salary tends to increase alongside with education level. Moreover, the spread between the lowest and highest salaries is also growing. We could assume that not all higher education degrees are equal. Especially, if we talk about Ph.D. Could it be that degrees achieved at some universities are considered to be more \"valuable\" than in others? Or maybe this spread comes from the difference in salary levels of scientific workers in different countries? Do the thesis theme and research area have an effect? We don't try to address these questions in this notebook, but it is definitely an interesting topic for further analysis.\n\nNext, we're going to create a similar plot but for job titles.","cb90b36d":"The upper bounds chart looks similar to the previous one: `Product Managers`, `Database Engineers`, and `Data Scientists` have the highest upper bounds of compensations. Also, Kagglers with Ph.D. degrees have the highest salary upper bounds among `Data Scientists`, `Statisticians`, and `Data Analysts` with other education levels.\n\nFinally, let's represent the salary quantiles and degrees as a point plot, as the next graph shows.","606322ce":"The diagrams show us that the distribution of job occupations for the groups of Kagglers who put their salary levels, and who didn't are close to each other. Except for the `Other` group where the number of missing answers seems to be higher. \n\nNow let's check how the same diagram looks like for education levels.","cd53f0b0":"Look at the table above, we can see that the `Product Manager` and `Database Engineer` titles start with the highest levels of compensation. It seems that Kagglers with Ph.D. also tend to start with a higher salary. Makes sense! Taking into account how much time and effort is required to get a Ph.D. degree.\n\nWhat about upper boundaries?","3e61890b":"So our first (and pretty simple) diagram shows that the majority of survey participants have (or will get) some form of higher education degree. Now, let's see a more fine-grained picture. \n\n### Education Levels\n\nIn order o get a more precise picture, let's plot some charts that will reflect how the education levels are represented among survey participants.","f8833bf8":"Our diagrams show that Master's and Bachelor's degrees are the most widely adopted ones among the Kaggle survey participants. Also, there is a significant number of Ph.D. holders. Impressive! Sure enough, the Kaggle community gathers highly professional and very motivated people.\n\n### Job Titles\n\nNext, we're going to understand which occupations are represented in the dataset. For this purpose, we create the same diagrams as it was done in the previous section, but this time let's also group the entries into more general categories.","87deb15a":"Kagglers with `Data Scientist` and `Product\/Project Manager` titles tend to have the highest median salaries, as well as the widest spreads between lowest and highest compensations. While people with the `Data Analyst` title seem to have lower compensations.\n\nHow do the median lower and upper bound salaries change alongside these two dimensions, i.e., occupation and education? At first, let's check it for the lower boundaries. In order to create a chart that will reflect the dependency we're looking for, we compute a cross-tabulation table between education levels and titles.","d7239060":"Regarding education levels, we see a similar picture. So we could suppose that dropping records with missing responses shouldn't change our job titles and education distribution too much.\n\nNow we can start analyzing the relationships between salary, job title, and education. First of all, let's see how salary range changes depending on education."}}