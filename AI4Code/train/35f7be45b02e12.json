{"cell_type":{"44552f3c":"code","8353d67b":"code","f5616ade":"code","5cf85321":"code","6476143e":"code","4c3d9286":"code","66526556":"code","aabccfc9":"code","13b8846b":"code","3b156654":"code","c1512ebf":"code","e87927c1":"code","2b59f76a":"code","faed1fdd":"code","6429a8e0":"code","a8009c06":"code","ef97b03d":"code","70632bcd":"code","0f28cb94":"code","4e2cb84c":"code","b5f34189":"code","7b8a1955":"code","c5144d5d":"code","40cf4208":"code","4e511394":"code","e0dabf79":"code","e0f7ef33":"code","d7277589":"code","2206ea00":"code","a9ce4c84":"code","183db243":"code","c031b9f1":"code","556f36ae":"code","d07b1c77":"code","e39ed14e":"code","53637829":"code","1823df96":"code","ffe0843a":"code","976e5796":"code","9e8cf0ba":"code","df9c4f28":"code","556e3056":"code","56291d6e":"code","c319db43":"code","353d4ab9":"code","b1e9f80c":"code","93bd5d25":"code","d9bf4e38":"code","22aa11a3":"code","6bb3b6bf":"code","4ef27f59":"code","d1342205":"code","423512dc":"code","0e781977":"code","bb22e51c":"code","db37c53e":"code","8a4c2d6e":"code","904b61a5":"markdown","0b51bf4e":"markdown","24605009":"markdown","0fa58211":"markdown","a86f1d89":"markdown","f31c4cad":"markdown","113bcd82":"markdown","26a55fd3":"markdown","c776a021":"markdown"},"source":{"44552f3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8353d67b":"import numpy as np\nimport pandas as pd","f5616ade":"train_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/test.csv')\ncityinfo_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/city_info.csv')\nstation_df = pd.read_csv('\/kaggle\/input\/ml-exam-20201006\/station_info.csv')","5cf85321":"cityinfo_df.head()","6476143e":"cityinfo_df = cityinfo_df.rename(columns={'Latitude': 'cityLatitude','Longitude': 'cityLongitude'})\ncityinfo_df.drop(['Municipality'], axis=1,inplace=True)\n\ncityinfo_df.head()","4c3d9286":"station_df.head()","66526556":"station_df = station_df.rename(columns={'Latitude': 'stationLatitude','Longitude': 'stationLongitude'})\n\nstation_df.head()","aabccfc9":"train_df['DistrictName'].isnull().sum()","13b8846b":"test_df['DistrictName'].isnull().sum()","3b156654":"train_df['NearestStation'].isnull().sum()","c1512ebf":"test_df['NearestStation'].isnull().sum()","e87927c1":"# \u5909\u6570\u6307\u5b9a\ntarget = 'TradePrice' #\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\n\nidcol = 'id' #id\u30ab\u30e9\u30e0","2b59f76a":"print(train_df.shape, test_df.shape)","faed1fdd":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30ec\u30b3\u30fc\u30c9\u884c\u6570\u3092\u4fdd\u7ba1\nxshape = train_df.shape[0] \nprint('\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u884c\u6570\uff1a\u3000', xshape)","6429a8e0":"train_df.head()","a8009c06":"test_df.head()","ef97b03d":"y_train = train_df[target]\nX_train = train_df.drop(target, axis=1)\nX_test = test_df","70632bcd":"y_train","0f28cb94":"X = X_train.append(X_test)","4e2cb84c":"X.shape","b5f34189":"X.columns","7b8a1955":"print(X_train['AreaIsGreaterFlag'].count(),\n     X_test['AreaIsGreaterFlag'].count())","c5144d5d":"print(X_train['Remarks'].nunique(),\n      X_test['Remarks'].nunique())","40cf4208":"X_train['Remarks'].unique()","4e511394":"X_test['Remarks'].unique()","e0dabf79":"#X = pd.merge(X, station_df, left_on='NearestStation', right_on='Station')\n#X = pd.merge(X, cityinfo_df, left_on='Prefecture', right_on='Prefecture')","e0f7ef33":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",train_df[ocol].dtype)","d7277589":"# Object\u30ab\u30e9\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u6570\u3092\u30c1\u30a7\u30c3\u30af\nfor obcol in ['Type', 'Region', 'Prefecture', 'Municipality', 'DistrictName',\n       'NearestStation', 'TimeToNearestStation',  'LandShape',\n       'Use', 'Purpose', 'Direction', 'Classification',\n       'CityPlanning', 'Renovation', 'Remarks']:\n    print(obcol,\" : \",train_df[obcol].nunique())","2206ea00":"\nX_cust = X[['MinTimeToNearestStation', 'Area',\n            'Frontage', 'TotalFloorArea',\n            'BuildingYear', \n            'Breadth', 'CoverageRatio', 'FloorAreaRatio', 'Year', 'Quarter',\n           ]]\n\n","a9ce4c84":"#boolean\u7cfb\n## importance\u306e\u5024\u304c\u4f4e\u3044\u306e\u3067\u524a\u9664\n\n#X_cust = pd.concat([X_cust, X[['FrontageIsGreaterFlag']]], axis=1)","183db243":"naive_cat_cols = ['Type' , 'Region' , 'Purpose' , 'LandShape',\n                 'Structure', 'Renovation', 'Classification', 'CityPlanning', 'FloorPlan','Remarks']  #\u3053\u306e\u884c\u306f\u5f8c\u3067\u898b\u76f4\u3057\n\nfor naive_cat_col in naive_cat_cols:\n    X[naive_cat_col] = X[naive_cat_col].astype('category')\n    \n\nX_cust = pd.concat([X_cust, X[naive_cat_cols]], axis=1)\n","c031b9f1":"### DirectionNS ###\nf = 'Direction'\nuniqparams = ['North','Northwest','Northeast',\n'East','West',\n'South','Southwest','Southeast']\n\nnums = [0,0,0,\n1,1,\n2,2,2]\n\nfillnaparam = -9999\n\nfor i,col in zip(nums, uniqparams):\n    X.loc[X[f] == col, 'DirectionNS'] = i\n\nX_cust = pd.concat([X_cust, X['DirectionNS']], axis=1)\nX_cust['DirectionNS'] = X['DirectionNS'].astype('category')\n\n### DirectionWE ###\nf = 'Direction'\nuniqparams = ['West','Northwest','Southwest',\n'North','South',\n'East','Southeast''Northeast',]\n\nnums = [0,0,0,\n1,1,\n2,2,2]\n\nfillnaparam = -9999\n\nfor i,col in zip(nums, uniqparams):\n    X.loc[X[f] == col, 'DirectionWE'] = i\n\nX_cust = pd.concat([X_cust, X['DirectionWE']], axis=1)\nX_cust['DirectionWE'] = X['DirectionWE'].astype('category')\n","556f36ae":"X.FloorPlan","d07b1c77":"# \u69cb\u9020\u7279\u5fb4\u91cf\u306e\u7d30\u5206\u5316\nStructures = ['LDK', 'DK', 'R', '\\+S']\n\nfor i, structure in enumerate(Structures):\n    structure_name = 'Structure_'+str(i)\n\n    X[structure_name] = X['Structure'].str.contains(structure)\n    X_cust = pd.concat([X_cust, X[structure_name]], axis=1)\n","e39ed14e":"# \u9593\u53d6\u308a\u7279\u5fb4\u91cf\u306e\u7d30\u5206\u5316\n\nFloors = ['RC', 'W', 'LS', 'B', 'SRC']\n\nfor i, floor in enumerate(Floors):\n    floor_name = 'FloorPlan_'+str(i)\n#    print(floor_name, i, floor)\n#    print(X['FloorPlan'].str.contains(floor))\n    X[floor_name] = X['FloorPlan'].str.contains(floor)\n    X_cust = pd.concat([X_cust, X[floor_name]], axis=1)\n\n\n\n","53637829":"X['FloorPlan'].head()","1823df96":"\n\n#numb = ['0','1','2','3','4','5','6']\nX['NofRooms'] = X['FloorPlan'].apply(lambda x: str(x)[0] )\n\nX_cust = pd.concat([X_cust, X['NofRooms']], axis=1)","ffe0843a":"X_cust.columns","976e5796":"X_cust['FloorPlan_3'].unique()","9e8cf0ba":"#np.where(X['NearestStation'].isnull().values = True, 1, 0)","df9c4f28":"# \u6700\u5bc4\u308a\u99c5\u306a\u3057\u30d5\u30e9\u30b0\n#X_cust['NearestStationFlag'] = X[]\n\n# \u5730\u533a\u540d\u5165\u3063\u3066\u3044\u306a\u3044\u30d5\u30e9\u30b0","556e3056":"X_cust.head()","56291d6e":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X_cust.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X_cust.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",X_cust[ocol].dtype)","c319db43":"naive_cat_cols2 = X_cust.select_dtypes(include='object').columns\n\nfor naive_cat_col2 in naive_cat_cols2:\n    X_cust[naive_cat_col2] = X_cust[naive_cat_col2].astype('category')\n\n","353d4ab9":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X_cust.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X_cust.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",X_cust[ocol].dtype)","b1e9f80c":"X_cust.drop(['FloorPlan','Structure'],axis=1,inplace=True)","93bd5d25":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\n\n#\u3053\u3053\u306b\u5206\u985e\u3057\u305f\u3044\u30c7\u30fc\u30bf\u65b9\u3092\u914d\u5217\u3067\u8a18\u8f09\ndatachkcols = ['number','bool','object']\n\nfor dck in datachkcols:\n    print(dck,\" \u30ab\u30e9\u30e0\uff1a\")\n    print(X_cust.select_dtypes(include=dck).columns)\n    print(\" \")\n\nprint(\"\u305d\u306e\u4ed6\u3000\u30ab\u30e9\u30e0\uff1a\")\n\notherCols = X_cust.select_dtypes(exclude=datachkcols).columns\nfor ocol in otherCols:\n    print(ocol,\" : \",X_cust[ocol].dtype)","d9bf4e38":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u306b\u518d\u5206\u5272\nX_train = X_cust[:xshape]\nX_test = X_cust[xshape:]","22aa11a3":"X_train.head()","6bb3b6bf":"X_train.columns","4ef27f59":"# RMSLE\u5bfe\u7b56\u3002\u5b66\u7fd2\u524d\u306by_train\u306b\u3001log(y+1)\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001RMSE\u305d\u306e\u307e\u307e\u4f7f\u3046\ny_train = np.log(y_train + 1) ","d1342205":"#\u4e00\u6642\u7684\u306bcat_cols\u3092\u6307\u5b9a\ncat_cols = []","423512dc":"#### \u524d\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u4f5c\u6210\u3057\u305f\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\nbest_params = {'objective': 'regression', \n               'metric': 'rmse', \n               'learning_rate': 0.05, \n               'lambda_l1': 1.126163140145177e-08, \n               'lambda_l2': 1.0601146730505965e-08, \n               'num_leaves': 237, \n               'feature_fraction': 0.7, \n               'bagging_fraction': 0.9998621842775085, \n               'bagging_freq': 1, \n               'min_child_samples': 100}","0e781977":"import lightgbm as lgb2\nfrom tqdm import tqdm\nimport time\n\nfrom sklearn.model_selection import KFold\n\n\nfold = 5\ncvrepeat = 1 # cv\u5168\u4f53\u3092\u4f55\u56de\u7e70\u308a\u8fd4\u3059\u304b\uff1f\n\n\n\ny_pred_finals = []\n\nskf = KFold(n_splits=fold, shuffle=True)\n\nfor j in range(cvrepeat):\n    \n    y_preds = [] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n    \n    for i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n\n        X_train_, y_train_ = X_train.iloc[train_ix], y_train.values[train_ix]\n        X_valid, y_valid = X_train.iloc[test_ix], y_train.values[test_ix]\n\n        evaluation_results = {}\n\n        lgb_train = lgb2.Dataset(X_train_, y_train_) \n        lgb_eval = lgb2.Dataset(X_valid, y_valid, reference=lgb_train)\n\n        model = lgb2.train(best_params, lgb_train, valid_sets=[lgb_train, lgb_eval], \n                           valid_names=['train', 'valid'], evals_result=evaluation_results, \n                           verbose_eval=-1, num_boost_round=1000, early_stopping_rounds=10,\n                          categorical_feature=cat_cols)\n\n        print(i,'\u56de\u76ee\u306e\u4e88\u6e2c')\n        y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n        y_pred = np.exp(y_pred) - 1  #RMSLE\u5bfe\u7b56\u3002\u9006\u95a2\u6570\u3067\u3082\u3068\u306b\u623b\u3059\n        y_preds.append(y_pred)\n        \n    y_pred_final = sum(y_preds) \/ fold\n    y_pred_finals.append(y_pred_final)\n\n\ny_pred_final = sum(y_pred_finals) \/ cvrepeat","bb22e51c":"y_pred_final = model.predict(X_test, num_iteration=model.best_iteration)\ny_pred_final = np.exp(y_pred_final) - 1 ","db37c53e":"# \u6295\u7a3f\u7528CSV\u4f5c\u6210\nsubmit_df = pd.read_csv('..\/input\/ml-exam-20201006\/sample_submission.csv' , index_col=0)","8a4c2d6e":"#\u8ca0\u306e\u5024\u306f0\u306b\u3059\u308b\ny_pred_final = np.where(y_pred_final<0,0,y_pred_final)\n\nsubmit_df[target] = y_pred_final\nsubmit_df.to_csv('.\/submission2_7_2.csv')","904b61a5":"### \u8abf\u67fb","0b51bf4e":"#### \u5916\u90e8\u30c7\u30fc\u30bf\u30de\u30fc\u30b8","24605009":"> # LightGBM\u30d1\u30e9\u30e1\u30fc\u30bf(CV)\n> # optuna\u306b\u3088\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\u7528\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\u3092\u6700\u4f4e\u9650\u306b\u5909\u66f4\n> from sklearn.model_selection import KFold\n> \n> import optuna\n> import optuna.integration.lightgbm as lgb\n> #from sklearn.metrics import log_loss\n> \n> # optuna\u306e\u30ed\u30b0\u3092\u6b62\u3081\u308b\uff08\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u304c\u3070\u3089\u3070\u3089\u306b\u306a\u308b\u306e\u3067\uff09\n> optuna.logging.set_verbosity(optuna.logging.WARNING)\n> \n> # rmse\u4f7f\u3046\u306a\u3089mse\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u30e9\u30b9\u30c8\u306bsqrt(\u30eb\u30fc\u30c8)\u3057\u3066\u304f\u3060\u3055\u3044\n> from sklearn.metrics import mean_squared_error\n> from math import sqrt\n> \n> \n> \n> \n> params = {\n>         'objective': 'regression',\n>         'metric': 'rmse',\n>         'learning_rate': 0.05,\n> }\n> \n> \n> dtrain = lgb.Dataset(X_train, label=y_train, categorical_feature = cat_cols, free_raw_data=False)\n> \n> tuner = lgb.LightGBMTunerCV(\n>         params, dtrain, verbose_eval=100, early_stopping_rounds=5, folds=KFold(n_splits=5)\n>     \n> #\u4e00\u6642\u7684\u306b\u5b66\u7fd2\u671f\u9593\u306e\u77ed\u7e2e\u3092\u56f3\u308a\u307e\u3059\n> #        params, dtrain, verbose_eval=100, early_stopping_rounds=2, folds=KFold(n_splits=2)\n> )\n> \n> tuner.run()","0fa58211":"#### \u30ab\u30b9\u30bf\u30e0\u30ab\u30c6\u30b4\u30ea","a86f1d89":"#### \u6570\u5024\u7cfb","f31c4cad":"### \u7279\u5fb4\u91cf\u751f\u6210","113bcd82":"### \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u958b\u59cb","26a55fd3":"#### \u30d5\u30e9\u30b0\u751f\u6210","c776a021":"#### \u5358\u7d14\u30ab\u30c6\u30b4\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"}}