{"cell_type":{"acf0b54c":"code","f5c926d6":"code","34ea864f":"code","38584914":"code","ebb38a46":"code","96611c22":"code","42231324":"code","8472b89f":"code","b6543b90":"code","60138501":"code","49d0bd6b":"code","a8feeb80":"code","f4ffcfb6":"code","ebc5c6d1":"code","dca7ddcc":"code","de178249":"code","0b97bee5":"code","ae88cffe":"code","6ec296b7":"code","9de53f4f":"code","335f5ea4":"code","0b9abb2c":"code","c765a974":"code","92cf71e7":"code","9d1c28ab":"code","8e711acb":"code","d1f34b85":"code","1afd8b36":"code","7f48de1f":"code","5b0d95bb":"code","5f0ea8ed":"markdown","35ee4433":"markdown","0f028631":"markdown","ae6f91a2":"markdown","7a479d60":"markdown"},"source":{"acf0b54c":"import warnings\nwarnings.filterwarnings('ignore')","f5c926d6":"# Importing required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","34ea864f":"google_stock_data = pd.read_csv('..\/input\/google-stock-prediction\/GOOG.csv')\ngoogle_stock_data.head()","38584914":"google_stock_data.info()","ebb38a46":"google_stock_data = google_stock_data[['date','open','close']] # Extracting required columns\ngoogle_stock_data['date'] = pd.to_datetime(google_stock_data['date'].apply(lambda x: x.split()[0])) # Selecting only date\ngoogle_stock_data.set_index('date',drop=True,inplace=True) # Setting date column as index\ngoogle_stock_data.head()","96611c22":"fg, ax =plt.subplots(1,2,figsize=(20,7))\nax[0].plot(google_stock_data['open'],label='Open',color='green')\nax[0].set_xlabel('Date',size=15)\nax[0].set_ylabel('Price',size=15)\nax[0].legend()\n\nax[1].plot(google_stock_data['close'],label='Close',color='red')\nax[1].set_xlabel('Date',size=15)\nax[1].set_ylabel('Price',size=15)\nax[1].legend()\n\nfg.show()","42231324":"from sklearn.preprocessing import MinMaxScaler\nMMS = MinMaxScaler()\ngoogle_stock_data[google_stock_data.columns] = MMS.fit_transform(google_stock_data)","8472b89f":"google_stock_data.shape","b6543b90":"training_size = round(len(google_stock_data) * 0.80) # Selecting 80 % for training and 20 % for testing\ntraining_size","60138501":"train_data = google_stock_data[:training_size]\ntest_data  = google_stock_data[training_size:]\n\ntrain_data.shape, test_data.shape","49d0bd6b":"# Function to create sequence of data for training and testing\n\ndef create_sequence(dataset):\n  sequences = []\n  labels = []\n\n  start_idx = 0\n\n  for stop_idx in range(50,len(dataset)): # Selecting 50 rows at a time\n    sequences.append(dataset.iloc[start_idx:stop_idx])\n    labels.append(dataset.iloc[stop_idx])\n    start_idx += 1\n  return (np.array(sequences),np.array(labels))\n","a8feeb80":"train_seq, train_label = create_sequence(train_data)\ntest_seq, test_label = create_sequence(test_data)","f4ffcfb6":"train_seq.shape, train_label.shape, test_seq.shape, test_label.shape","ebc5c6d1":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM, Bidirectional","dca7ddcc":"model = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape = (train_seq.shape[1], train_seq.shape[2])))\n\nmodel.add(Dropout(0.1)) \nmodel.add(LSTM(units=50))\n\nmodel.add(Dense(2))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])\n\nmodel.summary()","de178249":"model.fit(train_seq, train_label, epochs=80,validation_data=(test_seq, test_label), verbose=1)","0b97bee5":"test_predicted = model.predict(test_seq)\ntest_predicted[:5]","ae88cffe":"test_inverse_predicted = MMS.inverse_transform(test_predicted) # Inversing scaling on predicted data\ntest_inverse_predicted[:5]","6ec296b7":"# Merging actual and predicted data for better visualization\n\ngs_slic_data = pd.concat([google_stock_data.iloc[-202:].copy(),pd.DataFrame(test_inverse_predicted,columns=['open_predicted','close_predicted'],index=google_stock_data.iloc[-202:].index)], axis=1)","9de53f4f":"gs_slic_data[['open','close']] = MMS.inverse_transform(gs_slic_data[['open','close']]) # Inverse scaling","335f5ea4":"gs_slic_data.head()","0b9abb2c":"gs_slic_data[['open','open_predicted']].plot(figsize=(10,6))\nplt.xticks(rotation=45)\nplt.xlabel('Date',size=15)\nplt.ylabel('Stock Price',size=15)\nplt.title('Actual vs Predicted for open price',size=15)\nplt.show()","c765a974":"gs_slic_data[['close','close_predicted']].plot(figsize=(10,6))\nplt.xticks(rotation=45)\nplt.xlabel('Date',size=15)\nplt.ylabel('Stock Price',size=15)\nplt.title('Actual vs Predicted for close price',size=15)\nplt.show()","92cf71e7":"# Creating a dataframe and adding 10 days to existing index \n\ngs_slic_data = gs_slic_data.append(pd.DataFrame(columns=gs_slic_data.columns,index=pd.date_range(start=gs_slic_data.index[-1], periods=11, freq='D', closed='right')))\n","9d1c28ab":"gs_slic_data['2021-06-09\t':'2021-06-16']","8e711acb":"upcoming_prediction = pd.DataFrame(columns=['open','close'],index=gs_slic_data.index)\nupcoming_prediction.index=pd.to_datetime(upcoming_prediction.index)","d1f34b85":"curr_seq = test_seq[-1:]\n\nfor i in range(-10,0):\n  up_pred = model.predict(curr_seq)\n  upcoming_prediction.iloc[i] = up_pred\n  curr_seq = np.append(curr_seq[0][1:],up_pred,axis=0)\n  curr_seq = curr_seq.reshape(test_seq[-1:].shape)\n","1afd8b36":"upcoming_prediction[['open','close']] = MMS.inverse_transform(upcoming_prediction[['open','close']])","7f48de1f":"fg,ax=plt.subplots(figsize=(10,5))\nax.plot(gs_slic_data.loc['2021-04-01':,'open'],label='Current Open Price')\nax.plot(upcoming_prediction.loc['2021-04-01':,'open'],label='Upcoming Open Price')\nplt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\nax.set_xlabel('Date',size=15)\nax.set_ylabel('Stock Price',size=15)\nax.set_title('Upcoming Open price prediction',size=15)\nax.legend()\nfg.show()","5b0d95bb":"fg,ax=plt.subplots(figsize=(10,5))\nax.plot(gs_slic_data.loc['2021-04-01':,'close'],label='Current close Price')\nax.plot(upcoming_prediction.loc['2021-04-01':,'close'],label='Upcoming close Price')\nplt.setp(ax.xaxis.get_majorticklabels(), rotation=45)\nax.set_xlabel('Date',size=15)\nax.set_ylabel('Stock Price',size=15)\nax.set_title('Upcoming close price prediction',size=15)\nax.legend()\nfg.show()","5f0ea8ed":"<img src='https:\/\/drive.google.com\/uc?export=view&id=1i_XBoCPReEtySdjypk36ux3qIAwufet5' height=400 >\n","35ee4433":"# Creating LSTM model","0f028631":"# Predicting upcoming 10 days","ae6f91a2":"# Data Pre-Processing","7a479d60":"# Visualizing predicted and actual data"}}