{"cell_type":{"e40b07f5":"code","ccb22ad1":"code","2fd681d9":"code","9913d068":"code","18b075e6":"code","8292b9bc":"code","efc1e9cc":"code","25dafac1":"code","d0713440":"code","c39cae3c":"code","a746f24a":"code","e7c4ada1":"code","4429c193":"code","9c7dd055":"code","ba50577e":"code","f95f067e":"code","f8728b11":"code","938ae5ef":"code","4bbd0f14":"code","42f28de5":"code","3bec9fdf":"code","10a6351f":"code","086b5fd7":"code","8eed8ee0":"code","aee75b23":"code","143fc7d8":"code","5a77322c":"code","ce4305d1":"code","e59c9568":"code","22baf319":"code","8bcedc2f":"code","41ed63b1":"code","dd963e18":"code","c3f2616a":"code","c5b1503e":"code","2fc02814":"code","ece7c419":"code","48dff46a":"code","6cfae614":"code","b8e3d9a3":"code","8e5929b4":"code","bad7af2f":"code","fa5e2991":"code","7e6fe31e":"markdown","e241eb04":"markdown","ad2de118":"markdown","24787359":"markdown","9ad1d8d4":"markdown","5f4a960c":"markdown"},"source":{"e40b07f5":"#Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\nimport re\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer","ccb22ad1":"#reading the dataset\nzomato_real=pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")\nzomato_real.head() # prints the first N rows of a DataFrame","2fd681d9":"zomato_real.info()","9913d068":"#Deleting Unnnecessary Columns\nzomato=zomato_real.drop(['url','dish_liked','phone'],axis=1) #Dropping the column \"dish_liked\", \"phone\", \"url\" and saving the new dataset as \"zomato\"","18b075e6":"#Removing the Duplicates\nzomato.duplicated().sum()\nzomato.drop_duplicates(inplace=True)","8292b9bc":"#Remove the NaN values from the dataset\nzomato.isnull().sum()\nzomato.dropna(how='any',inplace=True)\nzomato.info() #.info() function is used to get a concise summary of the dataframe","efc1e9cc":"#Reading Column Names\nzomato.columns","25dafac1":"#Changing the column names\nzomato = zomato.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',\n                                  'listed_in(city)':'city'})\nzomato.columns","d0713440":"#Some Transformations\nzomato['cost'] = zomato['cost'].astype(str) #Changing the cost to string\nzomato['cost'] = zomato['cost'].apply(lambda x: x.replace(',','.')) #Using lambda function to replace ',' from cost\nzomato['cost'] = zomato['cost'].astype(float) # Changing the cost to Float\nzomato.info()","c39cae3c":"#Reading Rate of dataset\nzomato['rate'].unique()","a746f24a":"#Removing '\/5' from Rates\nzomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')\nzomato['rate'].head()","e7c4ada1":"# Adjust the column names\nzomato.name = zomato.name.apply(lambda x:x.title())\nzomato.online_order.replace(('Yes','No'),(True, False),inplace=True)\nzomato.book_table.replace(('Yes','No'),(True, False),inplace=True)\nzomato.cost.unique()","4429c193":"zomato.head()","9c7dd055":"zomato['city'].unique()","ba50577e":"zomato.head()","f95f067e":"## Checking Null values\nzomato.isnull().sum()","f8728b11":"## Computing Mean Rating\nrestaurants = list(zomato['name'].unique())\nzomato['Mean Rating'] = 0\n\nfor i in range(len(restaurants)):\n    zomato['Mean Rating'][zomato['name'] == restaurants[i]] = zomato['rate'][zomato['name'] == restaurants[i]].mean()","938ae5ef":"zomato.head()","4bbd0f14":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (1,5))\n\nzomato[['Mean Rating']] = scaler.fit_transform(zomato[['Mean Rating']]).round(2)\n\nzomato.sample(3)","42f28de5":"zomato.head()","3bec9fdf":"## Text Preprocessing","10a6351f":"# 5 examples of these columns before text processing:\nzomato[['reviews_list', 'cuisines']].sample(5)","086b5fd7":"## Lower Casing\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].str.lower()\nzomato[['reviews_list', 'cuisines']].sample(5)","8eed8ee0":"## Removal of Puctuations\nimport string\nPUNCT_TO_REMOVE = string.punctuation\ndef remove_punctuation(text):\n    \"\"\"custom function to remove the punctuation\"\"\"\n    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_punctuation(text))\nzomato[['reviews_list', 'cuisines']].sample(5)","aee75b23":"## Removal of Stopwords\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef remove_stopwords(text):\n    \"\"\"custom function to remove the stopwords\"\"\"\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_stopwords(text))","143fc7d8":"## Removal of URLS\ndef remove_urls(text):\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_urls(text))","5a77322c":"zomato[['reviews_list', 'cuisines']].sample(5)","ce4305d1":"# RESTAURANT NAMES:\nrestaurant_names = list(zomato['name'].unique())\nrestaurant_names","e59c9568":"def get_top_words(column, top_nu_of_words, nu_of_word):\n    \n    vec = CountVectorizer(ngram_range= nu_of_word, stop_words='english')\n    \n    bag_of_words = vec.fit_transform(column)\n    \n    sum_words = bag_of_words.sum(axis=0)\n    \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    \n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    \n    return words_freq[:top_nu_of_words]","22baf319":"zomato.head()","8bcedc2f":"zomato.sample(5)","41ed63b1":"zomato.shape","dd963e18":"zomato.columns","c3f2616a":"zomato=zomato.drop(['address','rest_type', 'type', 'menu_item', 'votes'],axis=1)","c5b1503e":"import pandas\n\n# Randomly sample 60% of your dataframe\ndf_percent = zomato.sample(frac=0.5)","2fc02814":"df_percent.shape","ece7c419":"df_percent.set_index('name', inplace=True)","48dff46a":"indices = pd.Series(df_percent.index)","6cfae614":"# Creating tf-idf matrix\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df_percent['reviews_list'])","b8e3d9a3":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","8e5929b4":"def recommend(name, cosine_similarities = cosine_similarities):\n    \n    # Create a list to put top restaurants\n    recommend_restaurant = []\n    \n    # Find the index of the hotel entered\n    idx = indices[indices == name].index[0]\n    \n    # Find the restaurants with a similar cosine-sim value and order them from bigges number\n    score_series = pd.Series(cosine_similarities[idx]).sort_values(ascending=False)\n    \n    # Extract top 30 restaurant indexes with a similar cosine-sim value\n    top30_indexes = list(score_series.iloc[0:31].index)\n    \n    # Names of the top 30 restaurants\n    for each in top30_indexes:\n        recommend_restaurant.append(list(df_percent.index)[each])\n    \n    # Creating the new data set to show similar restaurants\n    df_new = pd.DataFrame(columns=['cuisines', 'Mean Rating', 'cost'])\n    \n    # Create the top 30 similar restaurants with some of their columns\n    for each in recommend_restaurant:\n        df_new = df_new.append(pd.DataFrame(df_percent[['cuisines','Mean Rating', 'cost']][df_percent.index == each].sample()))\n    \n    # Drop the same named restaurants and sort only the top 10 by the highest rating\n    df_new = df_new.drop_duplicates(subset=['cuisines','Mean Rating', 'cost'], keep=False)\n    df_new = df_new.sort_values(by='Mean Rating', ascending=False).head(10)\n    \n    print('TOP %s RESTAURANTS LIKE %s WITH SIMILAR REVIEWS: ' % (str(len(df_new)), name))\n    \n    return df_new","bad7af2f":"# HERE IS A RANDOM RESTAURANT. LET'S SEE THE DETAILS ABOUT THIS RESTAURANT:\ndf_percent[df_percent.index == 'Slice Of Spice'].head()","fa5e2991":"recommend('Slice Of Spice')","7e6fe31e":"### Term Frequency-Inverse Document Frequency\nTerm Frequency-Inverse Document Frequency (TF-IDF) vectors for each document. This will give you a matrix where each column represents a word in the overview vocabulary (all the words that appear in at least one document) and each column represents a restaurant, as before.\n\nTF-IDF is the statistical method of evaluating the significance of a word in a given document.\n\nTF \u2014 Term frequency(tf) refers to how many times a given term appears in a document.\n\nIDF \u2014 Inverse document frequency(idf) measures the weight of the word in the document, i.e if the word is common or rare in the entire document.\nThe TF-IDF intuition follows that the terms that appear frequently in a document are less important than terms that rarely appear.\nFortunately, scikit-learn gives you a built-in TfIdfVectorizer class that produces the TF-IDF matrix quite easily.","e241eb04":"### Data Cleaning and Feature Engineering","ad2de118":"### Loading the dataset","24787359":"# Breakdown of this notebook:\n1. **Loading the dataset:** Load the data and import the libraries. <br>\n2. **Data Cleaning:** <br>\n - Deleting redundant columns.\n - Renaming the columns.\n - Dropping duplicates.\n - Cleaning individual columns.\n - Remove the NaN values from the dataset\n - #Some Transformations\n3. **Text Preprocessing**\n - Cleaning unnecessary words in the reviews\n - Removing links and other unncessary items\n - Removing Symbols\n4. **Recommendation System**","9ad1d8d4":"Some of the common text preprocessing \/ cleaning steps are:\n\n - Lower casing\n - Removal of Punctuations\n - Removal of Stopwords\n - Removal of URLs\n - Spelling correction","5f4a960c":"### Importing Libraries"}}