{"cell_type":{"431fdd95":"code","fc23c544":"code","a2850f7b":"code","c02a8e86":"code","22c074cd":"code","fcf94e1f":"code","706ee35c":"code","af2574f5":"code","ff31390c":"code","824f9fe7":"code","889ae7dc":"code","a2998da6":"code","92f4412f":"code","b8174b9b":"code","6154e142":"code","53600318":"markdown","bee9489b":"markdown","ce65eb42":"markdown","c70df244":"markdown","58b4b8c9":"markdown","4124e5bf":"markdown","64b45633":"markdown","3c67b7f3":"markdown"},"source":{"431fdd95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc23c544":"df_train = pd.read_csv('..\/input\/housepriceprediction\/train_data.csv',na_values=True)\ndf_test =  pd.read_csv('..\/input\/housepriceprediction\/test_data.csv',na_values=True)\n","a2850f7b":"df_train.shape ","c02a8e86":"df_test.shape","22c074cd":"print('Train miss\\n\\n',df_train.isna().sum())\nprint('\\n\\nTest miss\\n\\n',df_test.isna().sum())\n","fcf94e1f":"total= np.sum(df_train.isna()).sort_values(ascending =False)\npersent = np.sum(df_train.isna())\/(df_train.isna()).count()\ndf_train_missdata =pd.concat([total ,persent],axis = 1 , keys = ['total','persent'] )\nnan_train = df_train_missdata\nprint('nan_train\\n\\n',nan_train)\nprint('----------------------------------------------')\ntotal= np.sum(df_test.isna()).sort_values(ascending =False)\npersent = np.sum(df_test.isna())\/(df_test.isna()).count()\ndf_test_missdata =pd.concat([total ,persent],axis = 1 , keys = ['total','persent'] )\nnan_test = df_test_missdata\nprint('nan_test\\n\\n',nan_test)\n","706ee35c":"def cat_exploration(column):\n    return df_train[column].value_counts()\n\ndef cat_imputation(column, value):\n    df_train.loc[df_train[column].isnull(),column] = value","af2574f5":"list1 =nan_train.index\n\nfor i in list1 :\n    cat_exploration(i)\n    cat_imputation(i,'NA') \n    ","ff31390c":"df_train.isna().sum()","824f9fe7":"total= np.sum(df_train.isna()).sort_values(ascending =False)\npersent = np.sum(df_train.isna())\/(df_train.isna()).count()\ndf_train_missdata =pd.concat([total ,persent],axis = 1 , keys = ['total','persent'] )\nnan_train = df_train_missdata\ndf_train.isna().sum()","889ae7dc":"def cat_test_exploration(column):\n    return df_test[column].value_counts()\n\ndef cat_test_imputation(column, value):\n    df_test.loc[df_test[column].isnull(),column] = value","a2998da6":"list2 =nan_test.index\n\nfor i in list2 :\n    cat_test_exploration(i)\n    cat_test_imputation(i,'NA') \n   ","92f4412f":"df_test.isna().sum()","b8174b9b":"total= np.sum(df_test.isna()).sort_values(ascending =False)\npersent = np.sum(df_test.isna())\/(df_test.isna()).count()\ndf_test_missdata =pd.concat([total ,persent],axis = 1 , keys = ['total','persent'] )\nnan_test = df_test_missdata\nnan_test.isna().sum()","6154e142":"df_train.to_csv('out_put_train.csv')\ndf_test.to_csv('out_put_test.csv')","53600318":"# Dataset have nan values","bee9489b":"# Missing Values","ce65eb42":"\u0647\u06cc\u0686 \u062f\u0627\u062f\u0647 \u062e\u0627\u0644\u06cc \u0646\u062f\u0627\u0631\u06cc\u0645","c70df244":"# Find Missing Values and insert NAN for test data","58b4b8c9":"\u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u0645\u06cc\u0633 \u0631\u0648 \u067e\u06cc\u062f\u0627 \u06a9\u0631\u062f\u0645 \u0648 \u0628\u0627 nan \u067e\u0631 \u06a9\u0631\u062f\u0645","4124e5bf":"# Write to csv","64b45633":"Find Missing Values","3c67b7f3":"Find Missing Values and insert NAN for train data"}}