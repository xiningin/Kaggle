{"cell_type":{"db3d1757":"code","81ceaa67":"code","a436870b":"code","41b4c99e":"code","ad8f4a06":"code","c2f8ed28":"code","6cca3b54":"code","428effdf":"code","e3305317":"code","f127654c":"code","f3457a76":"code","33df4b41":"code","758b4d4f":"code","fdb7a1a7":"code","fd6f41cd":"code","d94bde5f":"code","ac437481":"code","cf86c494":"code","fa819a89":"code","79780ca5":"code","648cc5fa":"code","717e86eb":"code","d18a4185":"code","7fdb1a6f":"code","ab537c35":"code","612631ca":"code","ac33855f":"code","5e9ef1b0":"markdown","0d818cfc":"markdown","c0a2fbfa":"markdown","a682015d":"markdown","05cc0a0f":"markdown","1def2c42":"markdown","2b062bec":"markdown","440dbc73":"markdown","99bd70f8":"markdown","13df9b51":"markdown","f02d035f":"markdown","9d26382d":"markdown","cba003d5":"markdown","978baa92":"markdown","34729596":"markdown","c571b7ba":"markdown","f673a8fe":"markdown","2d87c9b0":"markdown","88cbd766":"markdown","2b1bc144":"markdown","c1e10803":"markdown","7c838b0d":"markdown","ab1a0aad":"markdown"},"source":{"db3d1757":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81ceaa67":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error as mse","a436870b":"df = pd.read_csv('\/kaggle\/input\/dummy-advertising-and-sales-data\/Dummy Data HSS.csv')\ndf.head()","41b4c99e":"df.info()","ad8f4a06":"df = df.fillna(df.mean()) # updates the df\n\n# see the updated df info\n\ndf.info()","c2f8ed28":"df = pd.get_dummies(df) # updates the df again\n\n# see the updated df\n\ndf","6cca3b54":"df.columns # getting the column names","428effdf":"df = df[['TV', 'Radio', 'Social Media', 'Influencer_Macro',\n       'Influencer_Mega', 'Influencer_Micro', 'Influencer_Nano', 'Sales']]\n\n# see the updated df\n\ndf.head()","e3305317":"df.corr()","f127654c":"x = df.iloc[:,0:-1].values\ny = df.iloc[:,-1:].values","f3457a76":"print(x)\nprint(y)","33df4b41":"x_train, x_test, y_train, y_test = train_test_split(x, y)","758b4d4f":"print(x_train)\nprint(y_train)","fdb7a1a7":"print(len(x_train),len(x_test))","fd6f41cd":"lr_regressor = LinearRegression() # instantiate the Linear Regression module\nlr_regressor.fit(x_train, y_train) # training the data\n\n# after training the data, perform prediction:\n\ny_pred_lr = lr_regressor.predict(x_test) # this is the prediction \n\n# evaluate the r2_score and RMSE between prediction and real data\n\nprint(r2_score(y_test, y_pred_lr))\nprint(mse(y_test, y_pred_lr)**0.5)","d94bde5f":"print(lr_regressor.coef_, lr_regressor.intercept_)","ac437481":"df.columns","cf86c494":"rf_regressor = RandomForestRegressor() # instantiate the Random Forest Regression module\nrf_regressor.fit(x_train, y_train) # training the data\n\n# after training the data, perform prediction:\n\ny_pred_rf = rf_regressor.predict(x_test) # prediction data\n\n# evaluate the r2_score and RMSE between prediction and real data\n\nprint(r2_score(y_test, y_pred_rf))\nprint(mse(y_test, y_pred_rf)**0.5)","fa819a89":"# Similar processes with the above two examples\n\ndt_regressor = DecisionTreeRegressor()\ndt_regressor.fit(x_train, y_train)\n\ny_pred_dt = dt_regressor.predict(x_test)\n\nprint(r2_score(y_test, y_pred_dt))\nprint(mse(y_test, y_pred_dt)**0.5)","79780ca5":"a = df.iloc[:,0:-1].values\nb = df.iloc[:,-1:].values\n\n# reshape b\n\nb = b.reshape(len(b), 1)","648cc5fa":"# now we split to train and test\n\na_train, a_test, b_train, b_test = train_test_split(a, b)","717e86eb":"# now perform scaling\n\nscala = StandardScaler()\nscalb = StandardScaler()\n\na_train = scala.fit_transform(a_train)\nb_train = scalb.fit_transform(b_train)","d18a4185":"# training the SVR \n\nsv_regressor = SVR()\nsv_regressor.fit(a_train, b_train)","7fdb1a6f":"# create the prediction\n\nb_pred = scalb.inverse_transform(sv_regressor.predict(scala.transform(a_test)))","ab537c35":"# evaluate the model\n\nprint(r2_score(b_test, b_pred))\nprint(mse(b_test, b_pred)**0.5)","612631ca":"poly = PolynomialFeatures()\npo_regressor = LinearRegression()\n\n# training the data\n\npo_regressor.fit(poly.fit_transform(x_train), y_train)","ac33855f":"# prediction training\n\ny_pred_po = po_regressor.predict(poly.fit_transform(x_test))\n\n# evaluate the model\n\nprint(r2_score(y_test, y_pred_po))\nprint(mse(y_test, y_pred_po)**0.5)","5e9ef1b0":"We can see there are mising data in several columns. Thus, we want to fill the missing data with its average, as follows:","0d818cfc":"Linear Regression model shows that:\n\n**Sales = 3.50 TV + 0.14 Radio + 0.03 Social Media - 0.43 Macro + 0.13 Mega + 0.07 Micro + 0.22 Nano**","c0a2fbfa":"## Support Vector Regression\n\nFor SVR, we need to perform feature scaling. In short, this is required because of some mathematical assumptions. So first we will perform feature scaling:","a682015d":"# Concluding Remarks\n\n* I want this notebook to be as understandable as possible so students or people like me who are not from math\/data science\/computer science background can infer easily what is happening in each line of code. \n* I understand there will be several math\/ML\/any other assumptions that I might have skipped in this notebook (e.g. assumptions for Linear Regression, feature scaling, parameter tuning). Please let me know in the comments to improve it.\n* Overall, this is part of my learning journey as well as a business management scholar. So, I will just focus on the 'broad overview' of the algorithms, and shed a light more on *making sense* of how data can be used for better decision making\n\nYou can upvote if you like this notebook. Happy (machine) learning!","05cc0a0f":"## Linear Regression","1def2c42":"# Analysis\n\nNow we will train and predict the data based on several regression models:\n* Linear\n* Random Forest\n* Decision Tree\n* Support Vector\n* Polynomial\n\nFor each regression model, we will evaluate its r2_score and root mean squared error (RMSE). The higher r2_score the better; the lower RMSE, the better.","2b062bec":"We want to know the number of data used for training and testing, as follows:","440dbc73":"Out of curiosity, we just want to explore whether there is any correlation of Sales with its predictors:","99bd70f8":"## Model Evaluation\n\n* Based on our analysis, it can be inferred that Support Vector Regression yields the highest R2 score and lowest RMSE. Thus, SVR will be the chosen model. We can use SVR model to predict the sales based on the input strategy.\n* Based on linear regression, we can infer that we can focus on TV, Radio, and Nano Influencer. We can cut budget related to other factors.","13df9b51":"# Importing the Libraries\nFirst we import the required libraries:","f02d035f":"We want to look if there's any missing data, as follows:","9d26382d":"Let's see some previews:","cba003d5":"Now we have a dataframe that has no missing values. Now, we want to encode the categorical variable to dummy variables, as follows:","978baa92":"## Random Forest Regression","34729596":"## Decision Tree Regression","c571b7ba":"Let's see some preview of x and y:","f673a8fe":"Looks good. Now, let's split our data for training and testing:","2d87c9b0":"# Reading the Data","88cbd766":"### Feature Scaling for Support Vector Regression\n\nTo avoid confusion of variable names, we will create new independent and dependent variable names: a and b","2b1bc144":"Now we have a clean data. Now, we will create the independent and dependent variables (x and y), as follows:","c1e10803":"Now for the purpose of simplicity, we shift the column 'Sales' to the end of the table, as follows:","7c838b0d":"### Polynomial Regression\n\nFor Polynomial Regression, we also have to perform polynomial feature scaling. ","ab1a0aad":"# Business Problems\n\nFor example:\n* How should we allocate our limited marketing budget for next year?\n* What type on influencers should we focus on?\n* Can we cut budget from TV, as it is too expensive?\n* Finally, set your assumptions of the marketing budget and influencer (if any). Can you try to predict the expected sales based on the best ML model? "}}