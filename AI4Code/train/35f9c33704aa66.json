{"cell_type":{"8343f22a":"code","42963a6f":"code","a31d1890":"code","75ad3fb1":"code","53e8868a":"code","b8aecee9":"code","bfd6af30":"markdown","a388563c":"markdown","332ddcad":"markdown","699aa34a":"markdown","d921bd16":"markdown","6a611f98":"markdown","584dadc3":"markdown","7546c72b":"markdown"},"source":{"8343f22a":"import glob\n\n# \u4e86\u89e3\u6570\u636e\u96c6\u7684\u7ec4\u6210\n\ntrain_files = glob.glob('\/kaggle\/input\/dogs-vs-cats\/train\/train\/*')\ntest_files = glob.glob('\/kaggle\/input\/dogs-vs-cats\/test1\/test1\/*')\n\ntrain_cat_files = [file_name for file_name in train_files if 'cat' in file_name]\ntrain_dog_files = [file_name for file_name in train_files if 'dog' in file_name]\n\nprint('train samples of cat:', len(train_cat_files))\nprint('train samples of dog:', len(train_dog_files))\nprint( train_dog_files[0])\n","42963a6f":"import numpy as np\nfrom random import shuffle\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom sklearn.preprocessing import LabelEncoder\n\n# \u4ece\u732b\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d61500\u5f20\u8bad\u7ec3\u6837\u672c\ncat_train = list(np.random.choice(train_cat_files, size=1500, replace=False))\n\n# \u4ece\u72d7\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d61500\u5f20\u8bad\u7ec3\u6837\u672c\ndog_train = list(np.random.choice(train_dog_files, size=1500, replace=False))\n\n# \u4ece\u732b\u8bad\u7ec3\u6570\u636e\u4e2d\u5254\u9664\u5df2\u7ecf\u62bd\u53d6\u7684\u8bad\u7ec3\u6837\u672c\ntrain_cat_files = list(set(train_cat_files) - set(cat_train))\n\n# \u4ece\u72d7\u8bad\u7ec3\u6570\u636e\u4e2d\u5254\u9664\u5df2\u7ecf\u62bd\u53d6\u7684\u8bad\u7ec3\u6837\u672c\ntrain_dog_files = list(set(train_dog_files) - set(dog_train))\n\n# \u4ece\u732b\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d6500\u5f20\u6821\u9a8c\u6837\u672c\ncat_val = list(np.random.choice(train_cat_files, size=500, replace=False))\n\n# \u4ece\u72d7\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d6500\u5f20\u6821\u9a8c\u6837\u672c\ndog_val = list(np.random.choice(train_dog_files, size=500, replace=False))\n\n# \u4ece\u732b\u8bad\u7ec3\u6570\u636e\u4e2d\u5254\u9664\u5df2\u7ecf\u62bd\u53d6\u7684\u6821\u9a8c\u6837\u672c\ntrain_cat_files = list(set(train_cat_files) - set(cat_val))\n\n# \u4ece\u72d7\u8bad\u7ec3\u6570\u636e\u4e2d\u5254\u9664\u5df2\u7ecf\u62bd\u53d6\u7684\u6821\u9a8c\u6837\u672c\ntrain_dog_files = list(set(train_dog_files) - set(dog_val))\n\n# \u4ece\u732b\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d6500\u5f20\u6d4b\u8bd5\u6837\u672c\ncat_test = list(np.random.choice(train_cat_files, size=500, replace=False))\n\n# \u4ece\u72d7\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u62bd\u53d6500\u5f20\u6d4b\u8bd5\u6837\u672c\ndog_test = list(np.random.choice(train_dog_files, size=500, replace=False))\n\n# \u5408\u5e76\u732b\u72d7\u8bad\u7ec3\u96c6\ntrain_files = cat_train + dog_train\n# \u5408\u5e76\u732b\u72d7\u6821\u9a8c\u96c6\nval_files = cat_val + dog_val\n# \u5408\u5e76\u732b\u72d7\u6d4b\u8bd5\u96c6\ntest_files = cat_test + dog_test\n\n# \u968f\u673a\u5316\u732b\u72d7\u8bad\u7ec3\u96c6\nshuffle(train_files)\n\n# \u6837\u672c\u5c3a\u5bf8\nIMG_DIM = (150, 150)\n# \u4ece\u78c1\u76d8\u52a0\u8f7d\u8bad\u7ec3\u96c6\nx_train = np.array([img_to_array(load_img(image_file, target_size=IMG_DIM)) for image_file in train_files])\n# \u4ece\u78c1\u76d8\u52a0\u8f7d\u6821\u9a8c\u96c6\nx_val = np.array([img_to_array(load_img(image_file, target_size=IMG_DIM)) for image_file in val_files])\n# \u4ece\u78c1\u76d8\u52a0\u8f7d\u6d4b\u8bd5\u96c6\nx_test = np.array([img_to_array(load_img(image_file, target_size=IMG_DIM)) for image_file in test_files])\n\n# \u5c06\u8bad\u7ec3\u96c6\u5217\u8868\u8f6c\u6362\u4e3anumpy\u77e9\u9635\nx_train = np.array(x_train)\n# \u5c06\u6821\u9a8c\u96c6\u5217\u8868\u8f6c\u6362\u4e3anumpy\u77e9\u9635\nx_val = np.array(x_val)\n# \u5c06\u6d4b\u8bd5\u96c6\u5217\u8868\u8f6c\u6362\u4e3anumpy\u77e9\u9635\nx_test = np.array(x_test)\n\n# \u5f52\u4e00\u5316\nx_train.astype('float32')\nx_train \/= 255.0\nx_val.astype('float32')\nx_val \/= 255.0\nx_test.astype('float32')\nx_test \/= 255.0\n\n# \u6807\u7b7e\u7f16\u7801\ntrain_labels = [fn.split('\/')[-1].split('.')[0].strip() for fn in train_files]\nval_labels = [fn.split('\/')[-1].split('.')[0].strip() for fn in val_files]\ntest_labels = [fn.split('\/')[-1].split('.')[0].strip() for fn in test_files]\nle = LabelEncoder()\nle.fit(train_labels)\ny_train = le.transform(train_labels)\ny_val = le.transform(val_labels)\ny_test = le.transform(test_labels)\n\n\nprint('x_train shape:', x_train.shape)\nprint('y_train shape:', y_train.shape)\nprint('x_validate shape:', x_val.shape)\nprint('y_validate shape:', y_val.shape)\nprint('x_test shape:', x_test.shape)\nprint('y_test shape:', y_test.shape)","a31d1890":"from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.models import Sequential\nfrom keras import optimizers\n\nbatch_size = 30\nnum_classes = 2\nepochs = 30\ninput_shape = (150, 150, 3)\n\nmodel = Sequential(name='Basic cnn model')\n\n# \u7b2c\u4e00\u5377\u79ef\u5c42\nmodel.add(Conv2D(16, kernel_size=(3, 3), activation='relu', input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n# \u7b2c\u4e8c\u5377\u79ef\u5c42\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n# \u7b2c\u4e09\u5377\u79ef\u5c42\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n# \u6241\u5e73\u5316\u5c42\nmodel.add(Flatten())\n\n# \u7b2c\u4e00\u5168\u8fde\u63a5\u5c42\nmodel.add(Dense(512, activation='relu'))\n\n# \u7b2c\u4e8c\u5168\u8fde\u63a5\u5c42\nmodel.add(Dense(1, activation='sigmoid'))\n\n# \u7f16\u8bd1\u6a21\u578b\uff0c\u6307\u5b9a\u635f\u5931\u8ba1\u7b97\u4f7f\u7528binary_crossentropy\uff0c\u4f18\u5316\u5668\u4f7f\u7528RMSprop\uff0c\u6a21\u578b\u6027\u80fd\u5ea6\u91cf\u4f7f\u7528accuracy\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(), metrics=['accuracy'])\n\nmodel.summary()\n","75ad3fb1":"history = model.fit(x=x_train, y=y_train,\n                    validation_data=(x_val, y_val),\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1)","53e8868a":"import matplotlib.pyplot as plt\n\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nt = f.suptitle('Basic CNN Performance', fontsize=12)\nf.subplots_adjust(top=0.85, wspace=0.3)\n\nepoch_list = list(range(1,31))\nax1.plot(epoch_list, history.history['accuracy'], label='Train Accuracy')\nax1.plot(epoch_list, history.history['val_accuracy'], label='Validation Accuracy')\nax1.set_xticks(np.arange(0, 31, 5))\nax1.set_ylabel('Accuracy Value')\nax1.set_xlabel('Epoch #')\nax1.set_title('Accuracy')\nl1 = ax1.legend(loc=\"best\")\n\nax2.plot(epoch_list, history.history['loss'], label='Train Loss')\nax2.plot(epoch_list, history.history['val_loss'], label='Validation Loss')\nax2.set_xticks(np.arange(0, 31, 5))\nax2.set_ylabel('Loss Value')\nax2.set_xlabel('Epoch #')\nax2.set_title('Loss')\nl2 = ax2.legend(loc=\"best\")","b8aecee9":"model.save('cats_dogs_basic_cnn.h5')","bfd6af30":"### \u4e09\u3001\u6784\u5efa\u57fa\u7840\u6027\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\n\n\u3000\u3000\u6211\u4eec\u5148\u6784\u5efa\u4e00\u4e2a\u5305\u542b3\u5c42\u5377\u79ef\u64cd\u4f5c\uff08\u6bcf\u5c42\u7d27\u63a5\u4e00\u4e2a\u6700\u5927\u5316\u6c60\u64cd\u4f5c\uff09\u7684\u57fa\u7840\u6027\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u3002\u5176\u4e2d\u5377\u79ef\u548c\u6c60\u5316\u64cd\u4f5c\u7528\u6765\u81ea\u52a8\u63d0\u53d6\u8bad\u7ec3\u6837\u672c\u56fe\u50cf\u7684\u7279\u5f81\u5e76\u9010\u7ea7\u964d\u91c7\u6837\u751f\u6210\u5377\u79ef\u7279\u5f81\u56fe\u3002\u7b2c\u4e09\u5377\u79ef\u5c42\u7ecf\u8fc7\u6c60\u5316\u64cd\u4f5c\u540e\u7684\u8f93\u51fa\u4e3a128\u901a\u905317 x 17\u7279\u5f81\u56fe\uff0c\u6241\u5e73\u5316\u5c42\u5c06\u8be5\u7279\u5f81\u56fe\u6241\u5e73\u5316\u4e3a1\u901a\u905336992\u7ef4\u7279\u5f81\u5411\u91cf\uff0c\u7d27\u63a5\u7740\u7684\u5168\u8fde\u63a5\u5c42\u5c0636992\u7ef4\u7279\u5f81\u5411\u91cf\u964d\u7ef4\u4e3a\u4e00\u901a\u9053512\u7ef4\u7279\u5f81\u5411\u91cf\uff0c\u6700\u540e\u4e00\u4e2a\u8fde\u63a5\u5c42\u8f93\u51fa\u9884\u6d4b\u5411\u91cf\uff08\u4e00\u901a\u90531\u7ef4\u7279\u5f81\u5411\u91cf\uff09\uff0c\u5373\u4e00\u5f20\u56fe\u7247\u5c5e\u4e8edog (1)\u6216cat (0)\u7684\u6982\u7387\u3002","a388563c":"### \u4e00\u3001\u4e86\u89e3\u6570\u636e\u96c6\n\n\u3000\u3000\u8be5\u6570\u636e\u96c6\u4e3a\u732b\u72d7\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u8bad\u7ec3\u96c6\u753150000\u5f20\u7167\u7247\uff08\u5176\u4e2d\u732b25000\u5f20\uff0c\u72d725000\u5f20\uff09\uff0c\u6d4b\u8bd5\u96c625000\u5f20\u7167\u7247\uff08\u5176\u4e2d\u5176\u4e2d\u732b12500\u5f20\uff0c\u72d712500\u5f20\uff09\u3002","332ddcad":"### \u4e8c\u3001\u6784\u5efa\u5c0f\u6570\u636e\u96c6\n\n\u3000\u3000\u73b0\u5728\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5c0f\u578b\u6570\u636e\u96c6\uff0c\u5373\u8bad\u7ec3\u56fe\u50cf\u5305\u542b3000\u5f20\u56fe\u7247\uff0c\u6821\u9a8c\u56fe\u50cf\u5305\u542b1000\u5f20\u56fe\u7247\uff0c\u6d4b\u8bd5\u56fe\u50cf\u5305\u542b1000\u5f20\u56fe\u7247\uff08\u6bcf\u7c7b\u4e2d\u732b\u72d7\u56fe\u7247\u6570\u91cf\u76f8\u540c\uff09\u3002","699aa34a":"# \u8fc1\u79fb\u5b66\u4e60\u6848\u4f8b\u7814\u7a76\n# \u4e00\u3001\u57fa\u7840\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\n## \u6570\u636e\u96c6\u6837\u672c\u6570\u91cf\u53d7\u9650\u7684\u8fc1\u79fb\u5b66\u4e60\uff08\u4f7f\u7528kaggle Dogs vs. Cats\u6570\u636e\u96c6\uff09\n","d921bd16":"### \u516d\u3001\u4fdd\u5b58\u6a21\u578b\n\u3000\u3000\u4fdd\u5b58\u6a21\u578b\u4ee5\u4fbf\u540e\u9762\u6211\u4eec\u7528\u6d4b\u8bd5\u96c6\u5bf9\u8be5\u6a21\u578b\u7684\u6027\u80fd\u8fdb\u884c\u8bc4\u4f30\u3002","6a611f98":"### \u56db\u3001\u8bad\u7ec3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\n\u3000\u3000\u6307\u5b9a\u8bad\u7ec3\u6570\u636e\u3001\u6821\u9a8c\u6570\u636e\uff0c\u6bcf\u6279\u6837\u672c\u6570\u91cf\u3001\u8bad\u7ec3\u8d9f\u6570\u3001\u56de\u663e\u7ea7\u522b\u3002 ","584dadc3":"\u3000\u3000\u4f60\u53ef\u4ee5\u6e05\u695a\u5730\u89c2\u5bdf\u52302\u20133\u8d9f\u8bad\u7ec3\u540e\u6a21\u578b\u5f00\u59cb\u5728\u8bad\u7ec3\u6570\u636e\u4e0a\u51fa\u73b0\u62df\u5408\u3002\u8be5\u6a21\u578b\u5728\u6821\u9a8c\u96c6\u7684\u5206\u7c7b\u51c6\u786e\u7387\u5927\u7ea6\u4e3a72%\uff0c\u867d\u7136\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u4e07\u4e8b\u5f00\u5934\u96be\uff01\u6211\u4eec\u80fd\u591f\u6539\u8fdb\u8be5\u6a21\u578b\u5417\uff1f","7546c72b":"### \u4e94\u3001\u7ed8\u5236\u6a21\u578b\u8bad\u7ec3\u7684\u51c6\u786e\u5ea6\u548c\u635f\u5931\u56fe\n\u3000\u3000\u901a\u8fc7\u89c2\u5bdf\u8bad\u7ec3\u548c\u6821\u9a8c\u7684\u51c6\u786e\u5ea6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u8be5\u6a21\u578b\u53ef\u80fd\u5b58\u5728\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u6a21\u578b\u8bad\u7ec3\u7684\u51c6\u786e\u5ea6\u548c\u635f\u5931\u56fe\u6765\u76f4\u89c2\u53d1\u73b0\u62df\u5408\u95ee\u9898\u3002"}}