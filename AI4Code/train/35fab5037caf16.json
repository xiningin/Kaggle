{"cell_type":{"2ff2d9fa":"code","794372d1":"code","d82bec12":"code","35c3273c":"code","cfccdfb6":"code","0041e08f":"code","f64481b2":"code","261fd708":"code","7c15d928":"code","a737df8a":"code","01bf4e86":"code","c8f1a851":"code","428cad09":"code","29f55550":"code","0eb89b21":"code","b219642f":"code","591e8494":"code","18c00f2d":"code","227ea603":"markdown","417143e7":"markdown","6508a2c2":"markdown","ae85dbf7":"markdown"},"source":{"2ff2d9fa":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","794372d1":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')\n\ntrain_df.head()","d82bec12":"train_df.info()","35c3273c":"plt.figure(figsize=(8,8))\nsns.distplot(a=train_df['Age'], kde=True)\nplt.show","cfccdfb6":"plt.figure(figsize=(8,8))\nsns.stripplot(x=\"Survived\", y=\"Age\", data=train_df)\nplt.show","0041e08f":"plt.figure(figsize=(8,8))\nsns.stripplot(x=\"Survived\", y=\"Fare\", data=train_df)\nplt.show","f64481b2":"train_df.groupby(\"Embarked\").Survived.count().plot.bar()","261fd708":"train_df.groupby('Survived').Pclass.count().plot.bar()","7c15d928":"train_df.groupby('SibSp').Survived.count().plot.bar()","a737df8a":"df2 = train_df.drop(['Name','Ticket','Cabin'], axis=1)\n\ndf2.head()","01bf4e86":"df2.isnull().sum()","c8f1a851":"df2.Age.fillna(df2.Age.mean(), inplace=True)\ndf2.Embarked.fillna(\"S\", inplace=True)\ndf2.isnull().sum()","428cad09":"y = df2.Survived\nX  = df2.drop('Survived', axis=1)\n\nfor col in X.columns:\n    if X[col].dtype == 'object':\n        X[col],_= X[col].factorize()\n        \n        \nmi_score = mutual_info_classif(X,y, random_state=1)\n\nmiscore = pd.Series(mi_score*100 , name=\"MI_score\" , index=X.columns)\n\nprint(miscore) ","29f55550":"# splitting dataset into training and validation\nX_train, X_valid, y_train, y_valid = train_test_split(X,y, train_size=0.80, test_size=0.20,random_state=0)\n\n# model object\nmodel = RandomForestClassifier(n_estimators=500, random_state=0)\n\n# fitting model to data\nmodel.fit(X_train,y_train)\n\n# predicting values\n\npreds = model.predict(X_valid)\n\n# accuracy and confusion matrix\n\nacc = accuracy_score(y_valid,preds)\n\nprint(\"accuracy score for classification: \",acc)\n\nconf = confusion_matrix(y_valid,preds)\n\nprint(conf)\n\n# precision score\n\nscore = precision_score(y_valid,preds)\n\nprint(score)\n\n# roc and auc score\n\nrocauc = roc_auc_score(y_valid,preds)\n\nprint(\"ROC and AUC score: \", rocauc)\n\n# roc curve\n\ncurve = roc_curve(y_valid,preds)\nprint(curve)","0eb89b21":"# prediction on test data\n\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col = 'PassengerId')\n\ntest_df.info()","b219642f":"testdf2 = test_df.drop(['Name','Ticket','Cabin'], axis=1)\n\ntestdf2.isnull().sum()\n\ntestdf2.Age.fillna(testdf2.Age.mean(), inplace=True)\ntestdf2.Fare.fillna(testdf2.Fare.mean(), inplace=True)\n\n# factorize object columns\n\nfor col in testdf2.columns:\n    if testdf2[col].dtype == 'object':\n        testdf2[col],_= testdf2[col].factorize()\n\n# prediction on survival\n\nprediction = model.predict(testdf2)\n\n# submission csv\n\nmysub = pd.DataFrame({'PassengerId':testdf2.index,\n                       'Survived': prediction})\n\nmysub.to_csv('mysubmission.csv', index=False)","591e8494":"clf = GradientBoostingClassifier(n_estimators=500,\n                                 learning_rate=0.01, \n                                 max_leaf_nodes=150,\n                                 random_state=1,\n                                 max_depth=4)\n\n\nclf.fit(X_train,y_train)\n\nprediction = clf.predict(X_valid)\n\n# accuracy score\n\naccu = accuracy_score(y_valid, prediction)\n\nprint(\"accuracy score of GBC:\", accu)\n\n# confusion metrix\n\ncon = confusion_matrix(y_valid,prediction)\n\nprint(con)","18c00f2d":"test_pred = clf.predict(testdf2)\n\nsub = pd.DataFrame({'PassengerId':testdf2.index,\n                    'Survived':test_pred})\n\nsub.to_csv('submission.csv', index=False)","227ea603":"# Prediciton on test data","417143e7":"# Gradient Boosting classifier model training","6508a2c2":"# Model training","ae85dbf7":"# Prediction on testing data"}}