{"cell_type":{"4932413d":"code","c214d802":"code","5e86f389":"code","837fc9ec":"code","52a44263":"code","9fd7a4ea":"code","c773ea99":"code","0e4105fa":"code","6172161e":"code","b38c0196":"code","e9e8e81e":"code","9ef9a9f3":"code","f8e72b8a":"code","2cf53dcd":"code","06d38940":"code","8c892458":"code","09c611c2":"code","411a3ab1":"code","ad66093a":"code","16c2aece":"code","2d661bfc":"code","a587b323":"code","979ea359":"code","a0caaa86":"code","2327da6b":"code","dbd870c0":"code","55784367":"code","d53be2fd":"code","bfa95ac2":"code","06070d35":"code","66b84ad8":"code","2e74ce8e":"code","1c51bf3b":"code","7fd84342":"code","3edd2dec":"code","94e80232":"markdown","07d2834c":"markdown","283fc662":"markdown","b45d66a1":"markdown","f5dec1b7":"markdown","5d93b303":"markdown","1d75f953":"markdown","ad26e82d":"markdown","0fdec6e7":"markdown","4bb5e534":"markdown","b4b755c0":"markdown","7580ac2f":"markdown","3bb73ea8":"markdown","7535ce96":"markdown","6a07c4cb":"markdown","162fa52f":"markdown","110c916e":"markdown","2c344fe3":"markdown","70164a1d":"markdown"},"source":{"4932413d":"# https:\/\/en.wikipedia.org\/wiki\/Histone_deacetylase#cite_note-Milazzo_2020-2\n# Names of HDAC genes\nl = []\nfor i in range(1,12):\n    l.append('HDAC'+str(i))\nprint(l)\nl = []\nfor i in range(1,8):\n    l.append('SIRT'+str(i))\nprint(l)\n\n#['HDAC1', 'HDAC2', 'HDAC3', 'HDAC4', 'HDAC5', 'HDAC6', 'HDAC7', 'HDAC8', 'HDAC9', 'HDAC10', 'HDAC11']\n#['SIRT1', 'SIRT2', 'SIRT3', 'SIRT4', 'SIRT5', 'SIRT6', 'SIRT7']","c214d802":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e86f389":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","837fc9ec":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","52a44263":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","9fd7a4ea":"m.shape\nm = m.transpose()\nm.shape","c773ea99":"pData.head(2)","0e4105fa":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","6172161e":"df.describe()","b38c0196":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","e9e8e81e":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","9ef9a9f3":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","f8e72b8a":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","2cf53dcd":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","06d38940":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values\nlen(cell_cycle_genes_reactome_extended)","8c892458":"from scipy.stats import chi2_contingency\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","09c611c2":"list_selected_genes = ['HDAC1', 'HDAC2', 'HDAC3', 'HDAC4', 'HDAC5', 'HDAC6', 'HDAC7', 'HDAC8', \n                       'HDAC9', 'HDAC10', 'HDAC11'] + ['SIRT1', 'SIRT2', 'SIRT3', 'SIRT4', 'SIRT5', 'SIRT6', 'SIRT7']\n#[ 'CCNE1', 'CCNE2', 'CDK2'] +  ['CCNB1','CCNB2','CCNB3'] + ['CCNA1', 'CCNA2','CCNF', 'CDK1'] + ['CCND1', 'CCND2', 'CCND3']\n    \nl = list_selected_genes\nt = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    \ndisplay( t.corr() )\n\nst = pd.DataFrame()\nfor g in l : # [ 'CCNE1', 'CCNE2']: #  list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    v = m[:,IX1].toarray().ravel()\n\n    st.loc[g,'Expression sum'] = v.sum()\n    st.loc[g,'Count Expressed cells'] = (v != 0 ).sum()\n    v = m2[:,IX1].toarray().ravel()\n    st.loc[g,'Expression sum normed'] = (v ).sum()\n    st.loc[g,'In cc reactome'] = g in cell_cycle_genes_reactome_extended\n    \n\nst.sort_values('Expression sum', ascending = False, inplace = True)\nst.head(20)\n\nt0 = time.time()\n\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    ensembl_id = genes[0].iat[IX1].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    st.loc[g,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    st.loc[g,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    if 0:\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])\n        print()\n\nprint( time.time() - t0, 'seconds passed')\nst.head(20)","411a3ab1":"t = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ndisplay( t.corr() )\n\nimport time\nt0 = time.time()\n\nc = pd.DataFrame()\nfor g1 in l:\n    for g2 in l:\n        p = get_independence_pvalue_chi2(t[g1].values,t[g2].values)\n        c.loc[g1,g2] = p\n        #print(g1,g2, p , time.time()-t0,'seconds passed')\n        \nnp.round(c,3)\n","ad66093a":"g = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\ndef get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 3):\n    import time\n\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n\n    s = np.asarray( m.sum(axis = 0)).ravel()\n    IX = np.argsort(s)[::-1][:n_top_expressed2look] # indices for top expressed\n    v2 = m2[:,IX].toarray() # convert top expressed to numpy array from sparse \n\n    #t0 = time.time()\n    d = pd.DataFrame()\n    d['gene'] = genes[1].values[IX]\n    if (np.abs(v1).sum() != 0):\n        cr = np.corrcoef(v1,v2.T)[0,:][1:] # some strange reindex to extract correlation vector from matrix ( I do not know why matrix her)\n        #print(time.time()-t0,'seconds passed')\n    else:\n        cr = np.ones(len(d)) * np.nan\n    d['correlation'] = cr\n    d['Abs correlation'] = np.abs(cr)\n\n    d = d.sort_values('Abs correlation', ascending = False)\n\n    str_result = ''\n    cc = 0\n    for i in range(n_correlations2return+1):\n        if d['gene'].iat[i] != g:\n            str_result += d['gene'].iat[i]\n            str_result += ' '\n            str_result += str(np.round(d['correlation'].iat[i] ,2) )\n            str_result += ' '\n            cc += 1\n        if cc >= n_correlations2return:\n            break\n    df_corr_stat = d \n    return str_result, df_corr_stat\nimport time\nt0 = time.time()\nstr_result, df_corr_stat = get_top_correlated_genes(g)\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n\nprint()\nstr_result, df_corr_stat = get_top_correlated_genes(g , n_top_expressed2look = 10000 )\nprint(time.time() - t0,'seconds passed')\nprint( str_result )","16c2aece":"t0 = time.time()\n\nfor g in list_selected_genes: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    #i = np.where(st['gene'].values == g)\n    #IX = st.index[i]\n    \n    str_corr_info, df_corr_info = get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 5)\n    \n    st.loc[g,'Top Correlated'] = str_corr_info\n    \nprint(time.time()-t0,'seconds passed')    \nst.sort_values('Expression sum', ascending = False, inplace = True)\nst  ","2d661bfc":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ncm = t.corr()\ndisplay( np.round(cm,3) )\nv = np.triu(cm,1).ravel()\nv= v[ v!= 0 ]\nplt.plot(np.sort(v))\nplt.show()","a587b323":"from scipy.stats import chi2_contingency\n\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","979ea359":"a,b = np.where( np.triu(cm,1) > 0.1 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","a0caaa86":"a,b = np.where( np.triu(cm,1) < -.005 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","2327da6b":"\nfor i,g in enumerate(st.index[:3]) : #list_selected_genes:\n    name = st.loc[st.index[i], 'Name']\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        continue\n    IX1 = IX1[0]\n\n    fig = plt.figure(figsize = (20,4) )\n\n    fig.add_subplot(1,2,1)\n    v = m[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n\n    fig.add_subplot(1,2,2)\n    v = m2[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n    plt.show()\n","dbd870c0":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')    ","55784367":"try:\n    list_selected_genes_ordered = list(st.index)\nexcept:\n    list_selected_genes_ordered = list_selected_genes\n    print('use all selected genes')\n    \nfor g in list_selected_genes_ordered: # [ 'CCNE1', 'CCNE2', 'CDK2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","d53be2fd":"\ng = 'SIRT1'\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nprint(g,'internal number:',IX1, 'Expression', m[:,IX1].sum(), 'Count cells expressed:', (m[:,IX1]!=0 ).sum() )\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(40):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n    IX = np.where( genes[1] == t)[0][0]\n    d.loc[d.index[i],'Expression sum'] = m[:,IX].sum()\n    d.loc[d.index[i],'Count cells expressed'] = (m[:,IX] !=0).sum()\n    \n    if flag_use_mygene:\n        ensembl_id = genes[0].iat[IX].split('.')[0]\n        g_inf = mg.getgene(ensembl_id )\n        d.loc[d.index[i],'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n        d.loc[d.index[i],'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n        d.loc[d.index[i],'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n        d.loc[d.index[i],'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n\n\nd.head(40)","bfa95ac2":"# KIF11","06070d35":"\ng = 'SIRT1'\n\ng = 'KIF11' \n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nprint(g,'internal number:',IX1, 'Expression', m[:,IX1].sum(), 'Count cells expressed:', (m[:,IX1]!=0 ).sum() )\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(40):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n    IX = np.where( genes[1] == t)[0][0]\n    d.loc[d.index[i],'Expression sum'] = m[:,IX].sum()\n    d.loc[d.index[i],'Count cells expressed'] = (m[:,IX] !=0).sum()\n    \n    if flag_use_mygene:\n        ensembl_id = genes[0].iat[IX].split('.')[0]\n        g_inf = mg.getgene(ensembl_id )\n        if isinstance(g_inf,dict):\n            d.loc[d.index[i],'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n\nprint(time.time()-t0,'seconds passed')\n\nd.head(40)","66b84ad8":"    \nfor g in ['KIF11','SIRT1','TP53']: # list_selected_genes_ordered: # [ 'CCNE1', 'CCNE2', 'CDK2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n\n    plt.show()  ","2e74ce8e":"g = 'SIRT1'\ng1 = g\nIX1 = np.where( genes[1] == g)[0][0]\nprint(g,'internal number:',IX1, 'Expression', m[:,IX1].sum(), 'Count cells expressed:', (m[:,IX1]!=0 ).sum() )\nv1 = m2[:,IX1].toarray().ravel()\nv1int= m[:,IX1].toarray().ravel()\n\ng = 'TP53'\ng2 = g\nIX1 = np.where( genes[1] == g)[0][0]\nprint(g,'internal number:',IX1, 'Expression', m[:,IX1].sum(), 'Count cells expressed:', (m[:,IX1]!=0 ).sum() )\nv2 = m2[:,IX1].toarray().ravel()\nv2int= m[:,IX1].toarray().ravel()\n\nc = np.corrcoef(v1,v2)[0][1]\nprint('Correlation Logged and Normed:', c )\n\nc = np.corrcoef(v1 !=0 ,v2 != 0 )[0][1]\nprint('Correlation binarized to zero\/non-zero:', c )\n\nc = np.corrcoef(v1int ,v2int )[0][1]\nprint('Correlation Original counts:', c )\n","1c51bf3b":"plt.figure(figsize = (20,6))\nplt.plot((v1int)+0.2,'*',label = g1)\nplt.plot((v2int),'*',label = g2)\nplt.legend()\nplt.show()","7fd84342":"plt.figure(figsize = (20,6))\nplt.plot(np.sort(v1int),'*-',label = g1)\nplt.plot(np.sort(v2int),'*-',label = g2)\nplt.legend()\n\nplt.show()","3edd2dec":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","94e80232":"# Further analysis\n\n# Color by KIF1 - top correlated - but get completely different localization ","07d2834c":"# Statistics on top correlated","283fc662":"# Normalization and log ","b45d66a1":"# Histone genes info","f5dec1b7":"# UMAP visualization","5d93b303":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at HDAC genes.\nhttps:\/\/en.wikipedia.org\/wiki\/Histone_deacetylase\n\n\n\n['HDAC1', 'HDAC2', 'HDAC3', 'HDAC4', 'HDAC5', 'HDAC6', 'HDAC7', 'HDAC8', 'HDAC9', 'HDAC10', 'HDAC11']\n['SIRT1', 'SIRT2', 'SIRT3', 'SIRT4', 'SIRT5', 'SIRT6', 'SIRT7']\n\n\n\n## Conclusions\/Findings.\n\n### 1\n\nSIRT1 is quite evidently more expressed in SAHA-drugged cells (SAHA - is HDACi). \n(It is second top expressed gene about 6K cells and total 13K expressed). \n\n### 2\n\nIt is quite strange that top correlated genes with it are almost all NEGATIVELY CORRELATED,\nalthough correlations are quite low and it changes from using logged and normalization or not \n\nThe exception includes KIF11 gene - which is marker of G2\/M phase.\n\n\n### 3\n\nIn mammals, **SIRT1 has been shown to deacetylate and thereby deactivate the p53 protein**.[17]\n\nWe do not see ANTI correlation of SIRT1 and P53\n\n------------------\n\n\n\n## Further info on genes\n\n\n### SIRT11\n\nhttps:\/\/en.wikipedia.org\/wiki\/Sirtuin_1\n\nSirtuin 1, also known as NAD-dependent deacetylase sirtuin-1, is a protein that in humans is encoded by the SIRT1 gene.[5][6][7]\n\nSIRT1 stands for sirtuin (silent mating type information regulation 2 homolog) 1 (S. cerevisiae), referring to the fact that its sirtuin homolog (biological equivalent across species) in yeast (S. cerevisiae) is Sir2. SIRT1 is an enzyme located primarily in the cell nucleus that deacetylates transcription factors that contribute to cellular regulation (reaction to stressors, longevity).[\n\nIn mammals, **SIRT1 has been shown to deacetylate and thereby deactivate the p53 protein**.[17] SIRT1 also stimulates autophagy by preventing acetylation of proteins (via deacetylation) required for autophagy as demonstrated in cultured cells and embryonic and neonatal tissues.[18] This function provides a link between sirtuin expression and the cellular response to limited nutrients due to caloric restriction.[19]\n\nSIRT1 plays a role in activating T helper 17 cells, which contribute to autoimmune disease; efforts to activate SIRT1 therapeutically may trigger or exacerbate autoimmune disease.[20]\n\nSIRT1, along with HDAC1 and the AP-1 promoter complex within D1-type dopaminergic medium spiny neurons, appears to be closely involved in the pathogenesis of addiction.\n\n### KIF11 - motor protein essential in mitosis\n\nKinesin-5 is a molecular motor protein that is essential in mitosis.[4] Kinesin-5 proteins are members of kinesin superfamily, which are nanomotors that move along microtubule tracks in the cell. Named from studies in the early days of discovery, it is also known as kinesin family member 11, encoded by the KIF11 gene,[5] or as BimC, Eg5 or N-2, based on the founding members of this kinesin family. The term kinesin-5 has been recommended based on a standardized nomenclature adopted by the scientific community.\n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","1d75f953":"# Plot expressions of top selected genes ","ad26e82d":"# Look at duplicates","0fdec6e7":"# Create columns with information on each cell (drug, dose, etc)","4bb5e534":"# Color by genes\n","b4b755c0":"# Info on genes","7580ac2f":"# Correlation analysis","3bb73ea8":"# Preliminaries","7535ce96":"# Top correlated with selected genes ","6a07c4cb":"# get_independence_pvalue_chi2","162fa52f":"# Load count matrix and convert it to sparse matrix csr_matrix","110c916e":"# SIRT1 and TP53 ","2c344fe3":"# get_top_correlated_genes","70164a1d":"# Load information files: genes annotations, cells info etc..."}}