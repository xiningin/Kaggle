{"cell_type":{"41671b43":"code","6d782384":"code","17489ef9":"code","7db63ca9":"code","f2ce738c":"code","fd9cb585":"code","23a22bdf":"code","bbe7f737":"code","077e79d8":"code","ce99a470":"code","f234adcd":"code","5d255f1d":"code","463ad562":"code","43ea2c19":"code","4c4b6875":"code","87b861d3":"code","25accc6a":"code","443e2f5c":"code","041b2993":"markdown","27acfa8b":"markdown","1451592b":"markdown","a68515c3":"markdown","185aaaee":"markdown","1d05018d":"markdown","4608058c":"markdown","be3f703e":"markdown","18700c0d":"markdown","3edc4d2b":"markdown","36d6976f":"markdown","29ca42df":"markdown","5f6e7622":"markdown","6a0130f6":"markdown"},"source":{"41671b43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d782384":"data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndata.head()","17489ef9":"X = data.drop([\"label\"], axis = 1).values\ny = data[\"label\"]","7db63ca9":"X.shape","f2ce738c":"y.shape","fd9cb585":"from keras.utils.np_utils import to_categorical\ny = to_categorical(y,10)","23a22bdf":"y[:5]","bbe7f737":"plt.imshow(X[100].reshape(28,28))\nplt.title(y[100])\nplt.show()","077e79d8":"plt.imshow(X[2100].reshape(28,28))\nplt.title(y[2100])\nplt.show()","ce99a470":"X = X.reshape(-1,28,28,1)\nX.shape","f234adcd":"y.shape","5d255f1d":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Activation, Dropout","463ad562":"model = Sequential()\nmodel.add(Conv2D(128, 5, padding=\"Same\", activation=\"relu\", input_shape=(28,28,1)))\nmodel.add(Conv2D(128, 5, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Conv2D(64, 3, padding=\"Same\", activation=\"relu\"))\nmodel.add(Conv2D(64, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Conv2D(32, 3, padding=\"Same\", activation=\"relu\"))\nmodel.add(Conv2D(16, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1000, activation=\"relu\"))\nmodel.add(Dense(500, activation=\"relu\"))\nmodel.add(Dense(100, activation=\"relu\"))\nmodel.add(Dense(10, activation=\"softmax\"))\n\nmodel.summary()","43ea2c19":"model.compile(optimizer = \"SGD\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","4c4b6875":"hist = model.fit(X,y, batch_size = 32, epochs = 50, validation_split=0.20)","87b861d3":"plt.plot(hist.history[\"val_accuracy\"])\nplt.xlabel(\"Num of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.show()","25accc6a":"img_num = 1895\nplt.imshow(X[img_num].reshape(28,28))\nplt.title(y[img_num])\nplt.show()\nprint(\"My model's pred is : \",model.predict_classes(X[img_num].reshape(1,28,28,1)))","443e2f5c":"img_num = 2540\nplt.imshow(X[img_num].reshape(28,28))\nplt.title(y[img_num])\nplt.show()\nprint(\"My model's pred is : \",model.predict_classes(X[img_num].reshape(1,28,28,1)))","041b2993":"<a id=3><\/a>\n# Data Reshape","27acfa8b":"# Introduction\nHello friends. In this notebook, I will try to train Mnist dataset. \nMy steps are:\n* [Load Daatset](#1)\n* [Some sample data visualizations](#2)\n* [Data reshape](#3)\n* [Import modules](#4)\n* [Create model](#5)\n* [Fit model](#6)\n* [Predict some sample data](#7)","1451592b":"Before fitting the model, I would like to point out that I reserved 20% of the yield as test data. Now we can train our data.","a68515c3":"<a id=6><\/a>\n# Fit the model","185aaaee":"<a id=1> <\/a>\n# Load Dataset","1d05018d":"It's nicer now.","4608058c":"We will use CNN in this application. Therefore, we have to convert the data to the format CNN wants.","be3f703e":"<a id=5><\/a>\n# Create model","18700c0d":"<a id=2><\/a>\n# Some sample data visualizations","3edc4d2b":"When the data is carefully examined, it will be seen that the data consists of 785 features. The first of this 785 feature, the one with the label label, shows the label of the sample, and the others show the pixels. Therefore, I will separate the label as y and the others as X and create a training yield.","36d6976f":"<a id=4><\/a>\n# Import modules","29ca42df":"Now we have one more problem here. Our Y data consists of numbers such as 1 , 2 , 3 . But we have to make it categorical. For this, we will use the utils method in keras.","5f6e7622":"<a id=7><\/a>\n# Predict some sample data","6a0130f6":"Now y has turned into what we want."}}