{"cell_type":{"29f77d34":"code","540c2189":"code","613cb002":"code","5975e129":"code","cf327722":"code","2646ae5e":"code","28171775":"code","e78feb62":"code","cb6260d5":"code","0da673a7":"code","2b5660b6":"code","4340a16a":"code","409e2d92":"code","809f216d":"code","759b8223":"code","31c68da0":"code","37bc085b":"code","68af6a3b":"code","ccf1fe9a":"code","9e437d7e":"code","f83d92d6":"code","51b88d01":"code","749d9ab3":"code","61874f88":"code","648aa0fd":"code","79eb93ea":"markdown","6c444923":"markdown","995855ce":"markdown","26ce6542":"markdown","f420fc55":"markdown","4aaeebdc":"markdown","ce927734":"markdown","5a0343db":"markdown","e253aa64":"markdown","c88b69d6":"markdown","74fedc50":"markdown"},"source":{"29f77d34":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom missingno import missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,FunctionTransformer,MinMaxScaler\nfrom sklearn.metrics import roc_auc_score\n","540c2189":"df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv',index_col = 'id')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv',index_col = 'id')","613cb002":"df.head()","5975e129":"df.shape","cf327722":"df_test.shape","2646ae5e":"df.describe()","28171775":"df_miss  = pd.DataFrame(df.isna().sum())\ndf_miss.columns = ['# Missing Values']\ndf_miss['% Missing Values'] = 100*df_miss['# Missing Values']\/df.shape[0]\ndf_miss","e78feb62":"df_miss_test  = pd.DataFrame(df_test.isna().sum())\ndf_miss_test.columns = ['# Missing Values']\ndf_miss_test['% Missing Values'] = 100*df_miss_test['# Missing Values']\/df_test.shape[0]\ndf_miss_test","cb6260d5":"sns.set_style('darkgrid')\nsns.countplot(df['claim'],palette = 'viridis');","0da673a7":"missingno.matrix(df)\nplt.show()","2b5660b6":"L = len(df.columns[0:60])\nnrow= int(np.ceil(L\/6))\nncol= 6\n\nremove_last= (nrow * ncol) - L\n\nfig, ax = plt.subplots(nrow, ncol,figsize=(24, 30))\nfig.subplots_adjust(top=0.95)\ni = 1\nfor feature in df.columns[0:60]:\n    plt.subplot(nrow, ncol, i)\n    ax = sns.kdeplot(df[feature], shade=True, palette='viridis',  alpha=0.5, hue= df['claim'], multiple=\"stack\")\n    plt.xlabel(feature, fontsize=9)\n    i += 1\nplt.suptitle('DistPlot: train features vs w.r.t claim', fontsize=20)\nplt.show()","4340a16a":"# skf = StratifiedKFold(n_splits = 10 , shuffle = True,random_state = 1)\n# df['kfold'] = -1","409e2d92":"# for folds,(train_indices,valid_indices) in enumerate(skf.split(df.iloc[:,:-1],df.iloc[:,-1])):\n#     df.loc[valid_indices,'kfold'] = folds\n# df.head()","809f216d":"\n# df.to_csv('Tabular Sept Stratified Folds-10.csv')","759b8223":"df = pd.read_csv('..\/input\/tabular-sept-stratified-folds-10\/Tabular Sept Stratified Folds-10.csv',index_col = 'id')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv',index_col = 'id')\nsub = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","31c68da0":"sc = StandardScaler()\nmx = MinMaxScaler()\ntransformer = FunctionTransformer(np.log1p, validate=True)\nimputer = SimpleImputer(missing_values = np.nan,strategy = 'mean')","37bc085b":"\ndf.iloc[:,:-2] = imputer.fit_transform(df.iloc[:,:-2])\ndf_test.iloc[:,:] = imputer.transform(df_test.iloc[:,:])","68af6a3b":"cols_log = [col for col in df.columns if df[col].mean()>1000]","ccf1fe9a":"sc_cols = [col for col in df.columns if col not in cols_log]\nsc_cols = [col for col in sc_cols if col not in ['kfold','claim']]\n","9e437d7e":"df.loc[:,sc_cols]  = sc.fit_transform(df.loc[:,sc_cols])\ndf_test.loc[:,sc_cols] = sc.transform(df_test.loc[:,sc_cols])\n","f83d92d6":"df.loc[:,cols_log] = transformer.transform(df.loc[:,cols_log])\ndf_test.loc[:,cols_log] = transformer.transform(df_test.loc[:,cols_log])\n","51b88d01":"useful_cols = df_test.columns","749d9ab3":"final_test_preds = []\nfinal_valid_preds = {}\nscores = []\n\n\nfor fold in range(10):\n    x_train = df[df.kfold!=fold].reset_index(drop=True)\n    x_valid = df[df.kfold==fold].reset_index(drop=True)\n    \n    x_test = df_test.copy()\n    \n    valid_ids = x_valid.index.values.tolist()\n    \n    y_train = x_train.claim\n    y_valid = x_valid.claim\n    \n    \n    x_train  = x_train[useful_cols]\n    x_valid = x_valid[useful_cols]\n    \n    \n    \n    \n    model = XGBClassifier(random_state = fold,tree_method='gpu_hist') \n\n#     \n\n    model.fit(x_train, y_train, early_stopping_rounds=300, eval_metric='auc', eval_set=[(x_valid, y_valid)], verbose=1000)\n    preds_valid = model.predict_proba(x_valid)[:,1]\n    test_preds = model.predict_proba(x_test)[:,1]\n    final_test_preds.append(test_preds)\n    final_valid_preds.update(dict(zip(valid_ids, preds_valid)))\n    auc = roc_auc_score(y_valid, preds_valid)\n    scores.append(auc)\n    \n    print('***********************************************************')\n    print(fold,auc)\n    print('***********************************************************')\n    \n    \n    \n\nprint(\"Mean of scores is {} and std is {}\".format(np.mean(scores) , np.std(scores)))","61874f88":"sub.claim = np.mean(np.column_stack(final_test_preds), axis=1)","648aa0fd":"sub.to_csv('submission.csv',index=False)","79eb93ea":"# Importing Libraries","6c444923":"The distribution of target variable is balanced","995855ce":"**I will create 10 Stratified Folds . The dataset will be public. So if you wanna create your own folds use this codes**\n<br><br>\nLink to dataset  - https:\/\/www.kaggle.com\/prikshitsingla\/tabular-sept-stratified-folds-10","26ce6542":"This is a code from the notebook by des : -\nhttps:\/\/www.kaggle.com\/desalegngeb\/sept-2021-tps-eda-model<br><br>\nCheck out his visualizations he has done pretty neat work!<br>","f420fc55":"# Submission","4aaeebdc":"# Modelling ","ce927734":"There seem to be almost equal amount of missing values between all cols","5a0343db":"# Create Folds","e253aa64":"<b><center>This is my first ever Public Notebook!<br>\nIf you Like it please Upvote!  <br>\n    Please Share your thoughts in comments!\n    \n    \n","c88b69d6":"# Loading Data","74fedc50":"As we can see from this plot values missing from the data are from different rows\nand it seem like if we remove all missing values we will be just left with less than half datapoints"}}