{"cell_type":{"02f521e4":"code","a8bc1727":"code","73408302":"code","45d29b7e":"code","781fe656":"code","b59b1140":"code","5b9c15fc":"code","f1ca4c09":"code","35c4da1b":"code","c29a2f9f":"code","353ec025":"code","453cc6c3":"code","1ee29738":"code","64d73312":"code","597f4d50":"code","9c6b00a9":"code","e752682c":"code","3f111593":"code","dea4f53d":"code","b05a2f6d":"code","5bce1472":"code","5ea17a9d":"code","1d616aa7":"markdown","b4066dbd":"markdown","89a2acbf":"markdown","e674fe9c":"markdown","9a8b563d":"markdown","b2ab2d01":"markdown","f50b70e9":"markdown","a6c56ca3":"markdown","febb9ff0":"markdown","f47bb1e4":"markdown","79e7dc3d":"markdown","0d8f9392":"markdown","59f6f24a":"markdown","258602bb":"markdown","be98d311":"markdown","0a095543":"markdown","a73e3513":"markdown","bf4cf867":"markdown","0c0a8f1a":"markdown","6e63e7bf":"markdown","1e34bb83":"markdown"},"source":{"02f521e4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\nfrom keras.optimizers import Adam,RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.datasets import mnist\n\n\nsns.set(style='white', context='notebook', palette='deep')","a8bc1727":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","73408302":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels='label',axis=1) \n\n# free some space\ndel train \n\nsns.countplot(Y_train)\n\nY_train.value_counts()","45d29b7e":"X_train.isnull().any().sum()","781fe656":"test.isnull().any().describe()","b59b1140":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","5b9c15fc":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","f1ca4c09":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","35c4da1b":"# Set the random seed\nrandom_seed = 2","c29a2f9f":"X_train,X_val,Y_train,Y_val=train_test_split(X_train,Y_train,test_size=0.1,random_state=random_seed)\nprint(X_val.shape)\nprint(Y_val.shape)\nprint(X_train.shape)\nprint(Y_train.shape)","353ec025":"# Some examples\nplt.imshow(X_train[200][:,:,0])","453cc6c3":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","1ee29738":"# Define the optimizer\noptimizer =RMSprop(lr=0.001,rho=0.9, epsilon=1e-08, decay=0.0)","64d73312":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","597f4d50":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5,\n                                            mode='auto',\n                                            min_lr=0.00001)","9c6b00a9":"epochs = 30 \nbatch_size = 128","e752682c":"# Without data augmentation i obtained an accuracy of 0.98114\nhistory = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, \n                    validation_data = (X_val, Y_val), verbose = 2,steps_per_epoch=X_train.shape[0]\/\/batch_size,\n                   callbacks=[learning_rate_reduction])","3f111593":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\n'''datagen = ImageDataGenerator(\n        featurewise_center=True,  # set input mean to 0 over the dataset\n        samplewise_center=True,  # set each sample mean to 0\n        featurewise_std_normalization=True,  # divide inputs by std of the dataset\n        samplewise_std_normalization=True,  # divide each input by its std\n        zca_whitening=True,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True\n        )  # randomly flip images\n\n\ndatagen.fit(X_train)'''","dea4f53d":"# Fit the model\n'''history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = 30, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              ,callbacks=[learning_rate_reduction])'''","b05a2f6d":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\n\n\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","5bce1472":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","5ea17a9d":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_submission.csv\",index=False)","1d616aa7":"The code below is for plotting loss and accuracy curves for training and validation. Since, i set epochs = 2 on this notebook .\nI'll show you the training and validation curves i obtained from the model i build with 30 epochs (2h30)","b4066dbd":"I choosed to split the train set in two parts : a small fraction (10%) became the validation set which the model is evaluated and the rest (90%) is used to train the model.\n\nSince we have 42 000 training images of balanced labels (see 2.1 Load data), a random split of the train set doesn't cause some labels to be over represented in the validation set. Be carefull with some unbalanced dataset a simple random split could cause inaccurate evaluation during the validation. \n\nTo avoid that, you could use stratify = True option in train_test_split function (**Only for >=0.17 sklearn versions**).","89a2acbf":"I check for corrupted images (missing values inside).\n\nThere is no missing values in the train and test dataset. So we can safely go ahead.","e674fe9c":"We perform a grayscale normalization to reduce the effect of illumination's differences. \n\nMoreover the CNN converg faster on [0..1] data than on [0..255].","9a8b563d":"# 2. Data preparation\n## 2.1 Load data","b2ab2d01":"<img src=\"http:\/\/img1.imagilive.com\/0717\/learningrates.jpg\"> <\/img>","f50b70e9":"For the data augmentation, i choosed to :\n   - Randomly rotate some training images by 10 degrees\n   - Randomly  Zoom by 10% some training images\n   - Randomly shift images horizontally by 10% of the width\n   - Randomly shift images vertically by 10% of the height\n   \nI did not apply a vertical_flip nor horizontal_flip since it could have lead to misclassify symetrical numbers such as 6 and 9.\n\nOnce our model is ready, we fit the training dataset .","a6c56ca3":"## 2.6 Split training and valdiation set ","febb9ff0":"Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices. \n\nKeras requires an extra dimension in the end which correspond to channels. MNIST images are gray scaled so it use only one channel. For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices. ","f47bb1e4":"## 2.2 Check for null and missing values","79e7dc3d":"Labels are 10 digits numbers from 0 to 9. We need to encode these lables to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0]).","0d8f9392":"We have similar counts for the 10 digits.","59f6f24a":"\n\n** you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated :)**\n","258602bb":"## 2.3 Reshape","be98d311":"## 2.3 Normalization","0a095543":"## 3.3 Data augmentation ","a73e3513":"## 2.5 Label encoding","bf4cf867":"We can get a better sense for one of these examples by visualising the image and looking at the label.","0c0a8f1a":"# 4. Evaluate the model\n## 4.1 Training and validation curves","6e63e7bf":"<img src=\"http:\/\/img1.imagilive.com\/0717\/mnist_099671_train_val_loss_acc.png\"><\/img>\n\nThe model reaches almost 99% (98.7+%) accuracy on the validation dataset after 2 epochs. The validation accuracy is greater than the training accuracy almost evry time during the training. That means that our model dosen't not overfit the training set.\n\nOur model is very well trained  !!! \n\n<img src=\"http:\/\/img1.imagilive.com\/0717\/accuracies1de.jpg\"\/>","1e34bb83":"# 3. CNN\n## 3.1 Define the model"}}