{"cell_type":{"76db881d":"code","fcf17d35":"code","c5de3810":"code","9bd56e67":"code","f419e878":"code","060551ed":"code","bfaf3f10":"code","fb2ee730":"code","22616e60":"code","52c7fe72":"code","beec8814":"code","e5937272":"code","a5631167":"code","b01fe39e":"code","cf905c2c":"code","d9e17908":"code","7b5ee81f":"code","4ae994b7":"code","67b52690":"code","e955b510":"code","e9d92ccc":"code","73da638e":"code","f1d02a97":"code","d73086d9":"code","96ee1298":"code","ff9da3f8":"code","de5fb4c2":"markdown","9ca9c84e":"markdown","34242995":"markdown","a708438f":"markdown","a4fce89f":"markdown","dffff9d9":"markdown","e1c13522":"markdown","a3d445c8":"markdown","3fa07e04":"markdown","e4b84282":"markdown","190b608b":"markdown","c2f02512":"markdown","2d25bf4a":"markdown","acabccc8":"markdown","59307780":"markdown","3782f249":"markdown","b6ad7046":"markdown","66efa4a9":"markdown","ee77c2f5":"markdown","80ba5a90":"markdown","90790026":"markdown","962a76c7":"markdown","eaa4f58f":"markdown","46ceec07":"markdown","d8cb1dd9":"markdown"},"source":{"76db881d":"from keras.preprocessing.image import ImageDataGenerator, load_img\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom matplotlib import pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Dropout, Dense, MaxPooling2D, BatchNormalization, Flatten\nimport random\nimport os\nfrom zipfile import ZipFile\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom PIL import Image\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau","fcf17d35":"ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\").extractall()\nZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\", \"r\").extractall()","c5de3810":"train_dir = \".\/train\/\"\ntest_dir = \".\/test1\/\"\nIMG_HEIGHT = 128\nIMG_WIDTH = 128\nIMG_CHANNEL = 3\nIMG_SIZE = (IMG_WIDTH, IMG_HEIGHT)\nbatch_size = 64\nepochs = 50","9bd56e67":"Dtrain = os.listdir(train_dir)\ncategories = []\nfor filename in Dtrain:\n    category = filename.split(\".\")[0]\n    if category == \"dog\":\n        categories.append(\"dog\")\n    else:\n        categories.append(\"cat\")\ndf = pd.DataFrame({\n    \"filename\" : Dtrain,\n    \"category\" : categories\n})","f419e878":"print(df.head())\nprint(df.tail())","060551ed":"df.category.value_counts().plot.bar()\nplt.title(str(len(df[df['category'] == 'cat']))+\" cats\" + \" | \" +str(len(df[df['category'] == 'dog']))+\" dogs\", fontsize=18)\nplt.ylabel(len(df), fontsize = 14)\nplt.show()","bfaf3f10":"model=Sequential()\n\nmodel.add(Conv2D(32, (3,3), input_shape=(IMG_WIDTH, IMG_HEIGHT, IMG_CHANNEL), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3,3), activation=\"relu\"))\nmodel.add((MaxPooling2D(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation=\"relu\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(2, activation=\"sigmoid\"))\n\nmodel.compile(loss='binary_crossentropy',optimizer=Adam(lr=0.0001, decay=1e-6),metrics=['accuracy'])\n\nmodel.summary()","fb2ee730":"sampel = random.choice(df.filename)\nimg = load_img(train_dir+sampel)\nplt.imshow(img)","22616e60":"train_df, validate_df = train_test_split(df, test_size = 0.2, random_state = 42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","52c7fe72":"train_df.category.value_counts().plot.bar()\nplt.ylabel(len(train_df), fontsize = 14)\nplt.title(str(len(train_df[train_df['category'] == 'dog']))+\" Dogs  |  \"+str((len(train_df[train_df['category'] == 'cat'])))+\" Cats\", fontsize=18)\nplt.show()","beec8814":"validate_df.category.value_counts().plot.bar()\nplt.ylabel(len(train_df), fontsize = 14)\nplt.title(str(len(validate_df[validate_df['category'] == 'cat']))+\" Cats  |  \"+str((len(validate_df[validate_df['category'] == 'dog'])))+\" Dogs\", fontsize=18)\nplt.show()","e5937272":"earlystop = EarlyStopping(patience=10)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\ncallbacks = [earlystop, learning_rate_reduction]","a5631167":"train_datagen = ImageDataGenerator(\n    rotation_range=20,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size,\n    color_mode=\"rgb\",\n    shuffle=True\n)","b01fe39e":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size,\n    color_mode=\"rgb\",\n    shuffle=True\n)\n","cf905c2c":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMG_SIZE,\n    class_mode='categorical',\n    color_mode=\"rgb\",\n    shuffle=True\n)","d9e17908":"plt.figure(figsize=(12,12))\nfor i in range(0,8):\n    plt.subplot(2, 4, i+1)\n    for x_batch, y_batch in example_generator:\n        img = x_batch[0]\n        plt.imshow(img)\n        break\nplt.tight_layout()\nplt.show()","7b5ee81f":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_df)\/\/64,\n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=len(validate_df)\/\/64,\n    callbacks=callbacks\n)","4ae994b7":"model.save_weights(\"CatsVsDogs.h5\")","67b52690":"fig,(ax1, ax2) = plt.subplots(2, 1, figsize = (12,12))\nax1.plot(history.history[\"loss\"], color= \"red\", label = \"Training loss\")\nax1.plot(history.history[\"val_loss\"], color= \"b\", label = \"Validation loss\")\n\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history[\"accuracy\"], color = \"red\", label = \"Training accuracy\")\nax2.plot(history.history[\"val_accuracy\"], color = \"b\", label = \"Validation accuracy\")\n\nax2.set_xticks(np.arange(1,epochs, 1))\nax2.set_yticks(np.arange(0, 1, 0.1))\n\nlegend = plt.legend(loc = \"best\", shadow = True)\nplt.tight_layout()\nplt.show()","e955b510":"Dtest = os.listdir(test_dir)\ndf_test = pd.DataFrame({\n    \"filename\" : Dtest\n})","e9d92ccc":"test_dataGen = ImageDataGenerator(1.\/255)\n\ntest_gen = test_dataGen.flow_from_dataframe(\n    df_test,\n    test_dir,\n    target_size = IMG_SIZE,\n    x_col = \"filename\",\n    y_col = None,\n    batch_size = batch_size,\n    class_mode = None,\n    shuffle = True,\n    color_mode=\"rgb\",\n\n)","73da638e":"predicted = model.predict(test_gen)\ndf_test[\"category\"] = np.argmax(predicted, axis=-1)","f1d02a97":"print(\"Train Accuracy:{:.3f}\".format(history.history['accuracy'][-1]))\nprint(\"Test Accuracy:{:.3f}\".format(history.history['val_accuracy'][-1]))","d73086d9":"df_test[\"category\"] = df_test[\"category\"].replace({1 : \"cat\", 0 : \"dog\"})\ndf_test['category'].value_counts().plot.bar()\nplt.ylabel(len(df_test), fontsize = 14)\nplt.title(str(len(df_test[df_test['category'] == 'dog']))+\" Dogs  |  \"+str((len(df_test[df_test['category'] == 'cat'])))+\" Cats\", fontsize=18)\nplt.show()","96ee1298":"sample_test = df_test.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(test_dir+filename, target_size=IMG_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(\"{}\".format(category))\nplt.tight_layout()\nplt.show()","ff9da3f8":"submission_df = df_test.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","de5fb4c2":"# Get Data from Zipfile","9ca9c84e":"# Callbacks","34242995":"# Save model's weights","a708438f":"# Test Generator","a4fce89f":"# Plot Data","dffff9d9":"# Predict Model","e1c13522":"# Show the result","a3d445c8":"# Prepare Test set","3fa07e04":"# Fit Model","e4b84282":"# Split Data to Train and Validation set","190b608b":"# Plot Train and Validation","c2f02512":"# Best articl for this problem\n\nhttps:\/\/gsurma.medium.com\/image-classifier-cats-vs-dogs-with-convolutional-neural-networks-cnns-and-google-colabs-4e9af21ae7a8","2d25bf4a":"# Prepare Data","acabccc8":"# Validation Generator","59307780":"# Show sample","3782f249":"# Traning Generator","b6ad7046":"# Build Model","66efa4a9":"# Submission","ee77c2f5":"# Import Libraries","80ba5a90":"# Define Constants","90790026":"# Example Generator","962a76c7":"# Plot Test Data","eaa4f58f":"# Virtualize Training","46ceec07":"# Show model accuracy","d8cb1dd9":"# Show how Generator works"}}