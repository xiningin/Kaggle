{"cell_type":{"928e5c58":"code","58627158":"code","3d59627b":"code","4d7c9b99":"code","15de8f63":"code","5f5616f8":"code","a5c94414":"code","d0bad271":"code","9e113674":"code","613dade0":"code","42abb57c":"code","c0a0797c":"code","20edf8f2":"code","cd9650f7":"code","71ba23e9":"code","1b36c2d6":"code","5c84f825":"code","4b27dec6":"code","afe06c7e":"code","ac971d7e":"code","f2acb410":"code","67b8e274":"code","28efadda":"code","be0c6a33":"code","872764a9":"code","e35c6491":"code","a2fac52a":"code","771b3138":"code","95249123":"code","5e368f98":"code","13d2746b":"code","2e809dbf":"code","f482924e":"code","e211192e":"code","ad56ee17":"code","34581674":"code","70739fd8":"code","f6818ef9":"code","efc5e2b6":"code","22fe98ed":"code","8bee927e":"code","c1bcbc38":"code","5932d0e4":"code","27539044":"code","906a7697":"code","fd139169":"code","7d66559b":"code","a55e3014":"markdown","a25d94ef":"markdown"},"source":{"928e5c58":"import pandas as pd","58627158":"df = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')","3d59627b":"df.head()","4d7c9b99":"df.shape","15de8f63":"# checking unique values of the categorical features\nprint(df['Seller_Type'].unique())\nprint(df['Transmission'].unique())\nprint(df['Fuel_Type'].unique())\nprint(df['Owner'].unique())","5f5616f8":"# checking null values or missing data\ndf.isnull().sum()","a5c94414":"df.describe()","d0bad271":"df['current year'] = 2020","9e113674":"df.head()","613dade0":"df.columns","42abb57c":"final_dataset = df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner', 'current year']]","c0a0797c":"final_dataset.head()","20edf8f2":"final_dataset['no of year'] = final_dataset['current year'] - final_dataset['Year']","cd9650f7":"final_dataset.head()","71ba23e9":"final_dataset.drop(['Year'], axis=1, inplace=True)","1b36c2d6":"final_dataset.drop(['current year'], axis=1, inplace=True)","5c84f825":"final_dataset.head()","4b27dec6":"final_dataset=pd.get_dummies(final_dataset, drop_first=True)","afe06c7e":"final_dataset.head()","ac971d7e":"final_dataset.corr()","f2acb410":"import seaborn as sns","67b8e274":"sns.pairplot(final_dataset)","28efadda":"import matplotlib.pyplot as plt\n%matplotlib inline","be0c6a33":"corrmat = final_dataset.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n# plot heatmap\ng = sns.heatmap(final_dataset[top_corr_features].corr(), annot=True, cmap = 'RdYlGn')","872764a9":"final_dataset.head()","e35c6491":"# independent feature\nX = final_dataset.iloc[:, 1:]\n\n# dependent feature\ny = final_dataset.iloc[:, 0]","a2fac52a":"X.head()","771b3138":"y.head()","95249123":"## Feature Importance\nfrom sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(X,y)","5e368f98":"print(model.feature_importances_)","13d2746b":"# plotting the feature importances\nfeature_importance = pd.Series(model.feature_importances_, index=X.columns)\nfeature_importance.plot(kind='barh')\nplt.show()","2e809dbf":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","f482924e":"X_train.shape\n","e211192e":"from sklearn.ensemble import RandomForestRegressor\nrf_random = RandomForestRegressor()","ad56ee17":"import numpy as np","34581674":"## Hyperparameters\nn_estimators = [int(x) for x in np.linspace(start=100 ,stop=1200, num=12)]\nprint(n_estimators)","70739fd8":"# Randomized search CV\n\n# no of trees in random forest \nn_estimators = [int(x) for x in np.linspace(start=100 ,stop=1200, num=12)]\n\n# No of features to consider at every split \nmax_features = ['auto', 'sqrt']\n\n# Maximum no of levels in a tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num=6)]\n\n# minimum number of samples required to split a node \nmin_samples_split = [2, 5, 10, 15, 100]\n\n# minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","f6818ef9":"from sklearn.model_selection import RandomizedSearchCV","efc5e2b6":"# create a random grid \n\nrandom_grid = { 'n_estimators':n_estimators,\n                'max_features': max_features,\n                'max_depth': max_depth,\n                'min_samples_split': min_samples_split,\n                'min_samples_leaf': min_samples_leaf}\nprint(random_grid)","22fe98ed":"# Use the random grid to search for the best hyer parameter \n# First create the base model to tune\nrf = RandomForestRegressor()","8bee927e":"rf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, scoring='neg_mean_squared_error', n_iter=10, cv=5, verbose=2, random_state=42, n_jobs=1)","c1bcbc38":"rf_random.fit(X_train, y_train)","5932d0e4":"predictions = rf_random.predict(X_test)","27539044":"predictions","906a7697":"sns.distplot(y_test-predictions)","fd139169":"plt.scatter(y_test, predictions)","7d66559b":"import pickle\n\n# open a file where you want to store the data\nfile = open('random_forest_regression_model.pkl', 'wb')\n\n# dump info to that file\npickle.dump(rf_random, file)","a55e3014":"# Car price prediction\n","a25d94ef":"### Fitting the model"}}