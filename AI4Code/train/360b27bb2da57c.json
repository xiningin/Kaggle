{"cell_type":{"0f7e319a":"code","77dc3a23":"code","45f77e63":"code","8e4a8cb2":"code","6e987898":"code","c3111380":"code","34a7cefa":"code","13e87a28":"code","079db196":"code","0cb26d10":"code","e4f7194b":"code","818b2e72":"code","1f888829":"code","2aa9bad7":"code","d0f00c0c":"code","2474e5b8":"code","824aa197":"code","6b6356f5":"code","5fe43b3c":"code","64a2c27c":"code","e1da0de1":"code","d7701fd4":"code","42c19a9d":"code","4b8bb624":"code","83e6a7eb":"code","ddc67b43":"code","3673cd6a":"code","8c0a18c7":"code","0faad12d":"code","79595f36":"code","7ba1d459":"code","ddc94693":"code","f16a6851":"code","8872f8ec":"code","5809a2a7":"code","3dd87a55":"code","caaf1ea0":"code","4ae04db2":"code","1d99866d":"markdown"},"source":{"0f7e319a":"# initiating gpu using tensorflow.\nimport tensorflow as tf\nfrom keras.backend.tensorflow_backend import set_session\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nconfig.log_device_placement = True\nsess = tf.Session(config=config)\nset_session(sess)","77dc3a23":"#importing libraries for the data processing and model.\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Flatten, Activation\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.datasets import cifar10\nfrom keras.utils import np_utils\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.callbacks import EarlyStopping\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import misc\nfrom keras.models import load_model\n%matplotlib inline","45f77e63":"!pip install keras-adabound","8e4a8cb2":"# defining the path and classes.\ndirectory = '..\/input\/state-farm-distracted-driver-detection\/train'\ntest_directory = '..\/input\/state-farm-distracted-driver-detection\/test\/'\nrandom_test = '..\/input\/driver\/'\nclasses = ['c0','c1','c2','c3','c4','c5','c6','c7','c8','c9']","6e987898":"# defining a shape to be used for our models.\nimg_size1 = 240\nimg_size2 = 240","c3111380":"# Train class image for display.\nfor i in classes:\n    path = os.path.join(directory,i)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap='gray')\n        plt.show()\n        break\n    break","34a7cefa":"# Test class image for display.\ntest_array = []\nfor img in os.listdir(test_directory):\n    img_array = cv2.imread(os.path.join(test_directory,img),cv2.IMREAD_GRAYSCALE)\n    test_array = img_array\n    plt.imshow(img_array, cmap='gray')\n    plt.show()\n    break","13e87a28":"# r_img_array = cv2.imread(os.path.join(random_test,'dd.jpg'),cv2.IMREAD_GRAYSCALE)\n# new_img = cv2.resize(r_img_array,(img_size2,img_size1))\n# plt.imshow(r_img_array, cmap='gray')\n# plt.show()","079db196":"# checkking image size using shape.\nprint(img_array.shape)","0cb26d10":"# trying out the resize image functionality\nnew_img = cv2.resize(test_array,(img_size2,img_size1))\nplt.imshow(new_img,cmap='gray')\nplt.show()","e4f7194b":"# creating a training dataset.\ntraining_data = []\ni = 0\ndef create_training_data():\n    for category in classes:\n        path = os.path.join(directory,category)\n        class_num = classes.index(category)\n        \n        for img in os.listdir(path):\n            img_array = cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n            new_img = cv2.resize(img_array,(img_size2,img_size1))\n            training_data.append([\n                new_img,class_num])","818b2e72":"# Creating a test dataset.\ntesting_data = []\ni = 0\ndef create_testing_data():        \n    for img in os.listdir(test_directory):\n        img_array = cv2.imread(os.path.join(test_directory,img),cv2.IMREAD_GRAYSCALE)\n        new_img = cv2.resize(img_array,(img_size2,img_size1))\n        testing_data.append([img,new_img])","1f888829":"create_training_data()","2aa9bad7":"create_testing_data()","d0f00c0c":"print(len(training_data))\nprint(len(testing_data))","2474e5b8":"random.shuffle(training_data)","824aa197":"x = []\ny = []","6b6356f5":"for features, label in training_data:\n    x.append(features)\n    y.append(label)","5fe43b3c":"x[0].shape","64a2c27c":"len(x)","e1da0de1":"X = np.array(x).reshape(-1,img_size2,img_size1,1)\n\nX[0].shape","d7701fd4":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=73)","42c19a9d":"Y_train = np_utils.to_categorical(y_train,num_classes=10)\nY_test = np_utils.to_categorical(y_test,num_classes=10)","4b8bb624":"model = Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(240,240,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(BatchNormalization(axis = 3))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n# model.add(Dropout(0.3))\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(BatchNormalization(axis = 3))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same'))\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(BatchNormalization(axis = 3))\nmodel.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n# model.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(units = 512,activation='relu'))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.5))\nmodel.add(Dense(units = 128,activation='relu'))\n# model.add(Dropout(0.25))\nmodel.add(Dense(10,activation='softmax'))","83e6a7eb":"model.summary()","ddc67b43":"# from keras_adabound import AdaBound\n# optimizer = AdaBound(lr=1e-3, final_lr=0.1);","3673cd6a":"from keras_adabound import AdaBound\n# optim = AdaBound(model.parameters(), lr=1e-3, final_lr=0.1)\noptim = AdaBound(lr=8*1e-04,\n                final_lr=0.1,\n                gamma=1e-03)\nmodel.compile(optim,\"categorical_crossentropy\", ['accuracy'])","8c0a18c7":"# model.compile(loss='categorical_crossentropy',metrics=['accuracy'],optimizer='adam')","0faad12d":"callbacks = [EarlyStopping(monitor='val_acc',patience=5)]","79595f36":"batch_size = 64\nn_epochs = 10","7ba1d459":"results = model.fit(x_train,Y_train,batch_size=batch_size,epochs=n_epochs,verbose=1,validation_data=(x_test,Y_test),callbacks=callbacks)","ddc94693":"# Plot training & validation accuracy values\nplt.plot(results.history['acc'])\nplt.plot(results.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(results.history['loss'])\nplt.plot(results.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","f16a6851":"preds = model.predict(np.array(testing_data[0][1]).reshape(-1,img_size2,img_size1,1))","8872f8ec":"model_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)","5809a2a7":"model.save_weights('.\/driverdistraction_adabound_weights.h5', overwrite=True)","3dd87a55":"model.save('.\/driverdistraction_adabound_weights.h5')","caaf1ea0":"test_data = np.array(testing_data[3000][1]).reshape(-1,img_size2,img_size1,1)","4ae04db2":"print('Predicted: {}'.format(np.argmax(model.predict(test_data))))\nnew_img = cv2.resize(testing_data[3000][1],(img_size2,img_size1))\nplt.imshow(new_img,cmap='gray')\nplt.show()","1d99866d":"\n    c0: safe driving\n    c1: texting - right\n    c2: talking on the phone - right\n    c3: texting - left\n    c4: talking on the phone - left\n    c5: operating the radio\n    c6: drinking\n    c7: reaching behind\n    c8: hair and makeup\n    c9: talking to passenger\n"}}