{"cell_type":{"89ac99fc":"code","0452be40":"code","eeb507fe":"code","17fa2221":"code","9fc5ab8f":"code","9d9c0749":"code","b47b3b0c":"code","318e51ce":"code","35b41f8f":"code","7ce66e6e":"code","77b3a962":"code","6b6e5da7":"code","306559eb":"code","95ecbd2e":"code","43860727":"code","0064a802":"code","206e7603":"code","d726b39f":"code","a1f11164":"code","ebd50bbc":"code","fdedefd9":"code","1b8d796e":"code","9b54afe0":"code","44d68a90":"code","2bd204d6":"code","e7e6b225":"code","9d5ce8ec":"code","203fcee2":"code","2b4d5692":"code","fd42b7b6":"code","864aa756":"code","defa7bf7":"code","b6b4003c":"code","abdcaae4":"code","fb3a355a":"code","31a35e89":"code","094f1af1":"code","c885ab36":"code","ed9de77f":"code","1d865396":"markdown","48811788":"markdown","a1622749":"markdown","6b2b720e":"markdown","6b281a57":"markdown","20b8ca2e":"markdown","41745630":"markdown","9dc2e97a":"markdown","06322e9f":"markdown","1bc00165":"markdown","a9af01dc":"markdown","190da09a":"markdown","9eb6607c":"markdown","7b2438a2":"markdown","c6d99249":"markdown","3f84fa0f":"markdown","ed5e78bf":"markdown","b9482920":"markdown","023e7e23":"markdown","73bbf55e":"markdown","43895f00":"markdown"},"source":{"89ac99fc":"from sklearn.metrics import roc_auc_score\n\ny_true = [\n    0,\n    1,\n    1,\n    0,\n    1\n]\n\ny_predictions = [\n    0.1,\n    0.9,\n    0.4,\n    0.6,\n    0.61\n]\n\nroc_auc_score(y_true, y_predictions)","0452be40":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","eeb507fe":"data = pd.read_csv('..\/input\/advanced-dls-spring-2021\/train.csv')\ntest_data = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\ndata.sample(5) # \u0432\u044b\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 5 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 train data \u0441\u0435\u0442\u0430","17fa2221":"data.isna().sum()","9fc5ab8f":"data.info()","9d9c0749":"data.TotalSpent = pd.to_numeric(data.TotalSpent, errors='coerce')\ntest_data.TotalSpent = pd.to_numeric(data.TotalSpent, errors='coerce')\ndata.isna().sum()","b47b3b0c":"data.TotalSpent.fillna(data.TotalSpent.median(), inplace=True)\ntest_data.TotalSpent.fillna(test_data.TotalSpent.median(), inplace=True)\ndata.isna().sum()","318e51ce":"# \u0414\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'","35b41f8f":"data.hist(column=num_cols, figsize=(14, 8))\nprint()","7ce66e6e":"fig = plt.figure(figsize=(17,17))\nfor i in range(len(cat_cols)):\n    data_i = data[cat_cols[i]].value_counts()\n    plt.subplot(4, 4, i+1)\n    plt.pie(data_i, labels = data_i.index, autopct='%1.1f%%')\n    plt.title(cat_cols[i])\n    plt.legend()","77b3a962":"plt.bar(data[target_col].value_counts().index, data[target_col].value_counts().values)\nplt.xticks(data[target_col].value_counts().index)\nplt.title('Churn')\nplt.show()\n\ndata.value_counts(data['Churn'])","6b6e5da7":"fig = plt.figure(figsize=(17,17))\nfor i in range(len(cat_cols)):\n    test_i = test_data[cat_cols[i]].value_counts()\n    plt.subplot(4, 4, i+1)\n    plt.pie(test_i, labels = test_i.index, autopct='%1.1f%%')\n    plt.title(cat_cols[i])\n    plt.legend()","306559eb":"import seaborn as sns\n\nsns.set_theme(style=\"whitegrid\")\ncategor = len(cat_cols)\nprint(categor)\nfig, axes = plt.subplots(4, 4, figsize=(17, 17), sharey=True)\nfor i in range(len(cat_cols)):\n    sns.countplot(x=cat_cols[i], data=data, ax=axes[i\/\/4, i%4],hue = target_col)","95ecbd2e":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.pipeline import make_pipeline","43860727":"dummy_features = pd.get_dummies(data[cat_cols])\nX_origin = data[feature_cols]\ndummy_features.shape","0064a802":"stan_scaler = StandardScaler()\nlr_cv = LogisticRegressionCV(scoring='roc_auc')","206e7603":"data_scaler_num_cols = stan_scaler.fit_transform(data[num_cols])\nX = pd.DataFrame(data_scaler_num_cols, columns=num_cols).join(dummy_features)\nX.head()","d726b39f":"y = data['Churn']\nX.shape, X_origin.shape, y.shape","a1f11164":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, y_train.shape","ebd50bbc":"grid_cv = GridSearchCV(lr_cv, param_grid={\n                                    'penalty': ['l1', 'l2'],\n                                    'solver': ['lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga']\n                                    },\n                      scoring='roc_auc',\n                      refit=True,\n                      n_jobs=-1,\n                      verbose=0)\ngrid_cv.fit(X_train, y_train)","fdedefd9":"print(f'\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 train: {grid_cv.score(X_train, y_train)} \\n\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u0435: {grid_cv.score(X_test, y_test)}')\nprint(f'\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: {grid_cv.best_params_}')","1b8d796e":"import catboost\nfrom catboost import CatBoostClassifier","9b54afe0":"X_train, X_test, y_train, y_test = train_test_split(data[feature_cols], data[target_col], test_size=0.2,\n                                                    random_state=42)","44d68a90":"cat_class = CatBoostClassifier(cat_features=cat_cols, random_seed=42, verbose=False)","2bd204d6":"cat_class.fit(X_train, y_train, use_best_model=True, eval_set=(X_test, y_test))","e7e6b225":"roc_auc_score(y_train, cat_class.predict_proba(X_train)[:, 1])","9d5ce8ec":"roc_auc_score(y_test, cat_class.predict_proba(X_test)[:, 1])","203fcee2":"cat_class = catboost.CatBoostClassifier(n_estimators=100, \n                                             cat_features=cat_cols)\n\ncat_class.fit(X_train, y_train)\n\ny_train_predicted = cat_class.predict_proba(X_train)[:, 1]\ny_test_predicted = cat_class.predict_proba(X_test)[:, 1]","2b4d5692":"train_auc = roc_auc_score(y_train, y_train_predicted)\ntest_auc = roc_auc_score(y_test, y_test_predicted)\nprint(f'\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 train: {train_auc} \\n\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u0435: {test_auc}')","fd42b7b6":"cat_class_1 = CatBoostClassifier(logging_level='Silent')","864aa756":"X_train, X_test, y_train, y_test = train_test_split(data[feature_cols], data[target_col], test_size=0.2, random_state=1)","defa7bf7":"cat_class_1.fit(X_train, y_train, cat_features=cat_cols)","b6b4003c":"roc_auc_score(y_test, cat_class_1.predict_proba(X_test)[:, 1])","abdcaae4":"parameters = {\n    'iterations':[100, 300, 500, 700, 1000], \n    'depth':[3, 5, 6, 7, 10], \n}\n\ngrid_search_cv = GridSearchCV(cat_class_1, param_grid=parameters, n_jobs=-1)\ngrid_search_cv.fit(X_train, y_train, cat_features=cat_cols)","fb3a355a":"y_train_pred = cat_class_1.predict_proba(X_train)[:, 1]\ny_test_pred = cat_class_1.predict_proba(X_test)[:, 1]","31a35e89":"print(f'\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 train: {roc_auc_score(y_train, y_train_pred)} \\n\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u0435: {roc_auc_score(y_test, y_test_pred)}')\nprint(f'\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: {grid_search_cv.best_params_}')","094f1af1":"best_model = CatBoostClassifier(iterations=500, depth=3, logging_level='Silent')","c885ab36":"best_model.fit(X_train, y_train, cat_features=cat_cols)","ed9de77f":"X_test = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/advanced-dls-spring-2021\/submission.csv')\n\nsubmission['Churn'] = best_model.predict_proba(X_test)[:, 1]\nsubmission.to_csv('my_submission.csv', index=False)","1d865396":"\u041c\u043e\u0436\u0435\u043c \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u0435, \u043d\u043e 4 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 : IsSeniorCitizen, HasChild, HasPhoneService, HasMultiplePhoneNumber. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0422\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u043d\u0430\u0442\u044c \u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043f\u0440\u0438\u0437\u0430\u043a\u043e\u0432.","48811788":"# \u041f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435","a1622749":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0435\u0441\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:","6b2b720e":"# \u041c\u0435\u0442\u0440\u0438\u043a\u0430\n\n\n\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0435\u0435 \u043b\u0435\u0433\u043a\u043e:\n","6b281a57":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n","20b8ca2e":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c StandardScaler \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b","41745630":"\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u0440\u0433\u0435\u0442\u0430.","9dc2e97a":"\u0414\u0435\u043b\u0430\u0435\u043c one-hot-encoding \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 train dataset","06322e9f":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n","1bc00165":"\u0422\u0430\u043a \u0436\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0444\u0430\u0439\u043b \u0441 \u0442\u0435\u0441\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043d\u0430\u0437\u043e\u0432\u0451\u043c \u0435\u0433\u043e test_data","a9af01dc":"\u041c\u043e\u0436\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c, \u0447\u0442\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c. Grid \u043d\u0435 \u043f\u043e\u043c\u043e\u0433","190da09a":"\u0412\u044b\u043f\u0438\u0448\u0435\u043c \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.","9eb6607c":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u043d\u043e\u0439 \u043f\u0443\u0442\u044c. ","7b2438a2":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0432 Grid","c6d99249":"\u041f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c Nan \u0432 TotalSpent. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442 \u043d\u0438\u0445 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f","3f84fa0f":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 train \u0438 test \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438. \u041e\u0442\u043b\u0438\u0447\u043d\u043e.","ed5e78bf":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 GridSearchCV","b9482920":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430","023e7e23":"\u0412\u044b\u043f\u0438\u0448\u0435\u043c \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.","73bbf55e":"\u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439,\u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0435\u0441\u0442\u044c 5282 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \nTotalSpent - \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u043e \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0443 \u043d\u0435\u0433\u043e - \u0441\u0442\u0440\u043e\u043a\u0430(str), \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0432\u0438\u0434. \u0412 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0435\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a IsSeniorCitizen,\u043e\u043d \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435 (0,1). \u0415\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0443\u0442\u0441\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0442\u043e \u0438\u0445 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0432\u0438\u0434 (0,1) \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438.","43895f00":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f"}}