{"cell_type":{"a47987ff":"code","233e2f5a":"code","41a4a965":"code","4a56d2d4":"code","98704e90":"markdown","33be4c6c":"markdown","f223c7ac":"markdown","d8333f7d":"markdown","8f4a5c40":"markdown"},"source":{"a47987ff":"import pandas as pd\nimport numpy as np\nimport string\ndf_S08 = pd.read_csv('..\/input\/S08_question_answer_pairs.txt', sep=\"\\t\", header=0)\ndf_S09 = pd.read_csv('..\/input\/S09_question_answer_pairs.txt', sep=\"\\t\", header=0)\ndf_S10 = pd.read_csv('..\/input\/S10_question_answer_pairs.txt', sep=\"\\t\", header=0, encoding = \"ISO-8859-1\")","233e2f5a":"df_list = ['df_S08','df_S09','df_S10']\nquestions = []\nanswer = []\nfor d in df_list:\n    d = eval(d)\n    d['Question'] = d['ArticleTitle'] + \" \" + d['Question'] # concatena nome artigo em pergunta para melhorar referencia\n    d = d[['Question','Answer']] #remove colunas indesejadas\n    d = d.dropna() # Remove NaN\n    d['Answer'] = d['Answer'].str.lower() # deixa tudo minusculo\n    d['Answer'] = d['Answer'].str.replace('[{}]'.format(string.punctuation), '') # remove pontuacao\n    d['Answer'] = d['Answer'].str.replace(r'\\\\t', '') #remove qualquer \"\\t\" que existir em respostas\n    d['Question'] = d['Question'].str.replace(r'_', ' ') #remove qualquer \"_\" que existir em perguntas\n    d = d.sort_values('Question').drop_duplicates(subset=['Question', 'Answer'], keep='last') #remove dados duplicados\n    questions = np.append(questions, d['Question'].values) #cria np array de questoes\n    answer = np.append(answer, d['Answer'].values) #cria np array de respostas","41a4a965":"perguntas = tuple(questions)\npergunta = [\"Does Arabic language have many words borrowed by European languages?\"]\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(perguntas)\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nquery_vect = tfidf_vectorizer.transform(pergunta)\nsimilariedade = cosine_similarity(query_vect, tfidf_matrix) # calcula e cria um vetor com os valores de similariedade\n\nindice = np.unravel_index(np.argmax(similariedade, axis=None), similariedade.shape) #encontra o indice do valor com maior similariedade\n\nprint(\"RESPOSTA: {}\".format(answer[indice[1]]))\nprint(\"PERGUNTA ORIGINAL: {}\".format(questions[indice[1]]))","4a56d2d4":"display(df_S09.Question[100])\ndisplay(df_S09.Answer[100])","98704e90":"# Importar biblotecas e dados","33be4c6c":"# Encontrando resposta com maior similariedade","f223c7ac":"## Pr\u00e9-processamento de dados","d8333f7d":"# Conferindo","8f4a5c40":"## Atividade da Mat\u00e9ria de aplica\u00e7\u00e3os em NLP \nAluno: Andr\u00e9 de Mari Barros (122599)\n\nAluno: Paulo Sergio dos Santos (144179)\n\n-----------------\n<p><b>Atividade:<\/b> Escreva um chatbot que, dado uma pergunta em Ingl\u00eas, encontre uma pergunta mais parecida no corpus de perguntas e respostas dispon\u00edvel no Kaggle (https:\/\/www.kaggle.com\/rtatman\/questionanswer-dataset#S08_question_answer_pairs.txt) e exiba a resposta.\n"}}