{"cell_type":{"e9e286c6":"code","8d8d5f86":"code","96cdc29b":"code","f10670b4":"code","2b9a7443":"code","3cd70e98":"code","04c62158":"code","3e622196":"code","f26205c4":"code","4a8d1e43":"code","bf3fb4da":"code","76ca8ef0":"code","9de7652a":"code","b4c0e8df":"markdown","ae326e79":"markdown","9f359a78":"markdown","a7595244":"markdown","f40911cb":"markdown","1e521aa4":"markdown","1f0c0988":"markdown","93ec76c8":"markdown","b870e4bb":"markdown","bef6dae7":"markdown","5d93fdba":"markdown"},"source":{"e9e286c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Import library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom sklearn.svm import SVC\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d8d5f86":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","96cdc29b":"df","f10670b4":"df.isnull().sum()","2b9a7443":"plt.figure(figsize=(8,5))\nsns.heatmap(df.corr(),annot=True)","3cd70e98":"X = df.drop(['Outcome'], axis=1)\ny = df['Outcome']","04c62158":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=18) \nscaler = preprocessing.StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)","3e622196":"svc = SVC()\nparams = {'kernel':('linear', 'rbf', 'poly', 'sigmoid'), 'gamma':[1, 0.1, 0.01, 0.001, 0.0001],'C':[1,10]}\nmodel = GridSearchCV(svc, params)\nmodel.fit(X_train, y_train)\nprint(model.best_params_)","f26205c4":"X_test = scaler.transform(X_test)\ny_pred = model.predict(X_test)","4a8d1e43":"accuracy = accuracy_score(y_test, y_pred)\ncon_matrix = confusion_matrix(y_test, y_pred)\n\nprint(f\"Acurracy: {accuracy}\")\nprint(f\"Con_Matrix: {con_matrix}\")","bf3fb4da":"new_data = {'Pregnancies':[1,5,0],\n            'Glucose': [105,100,70],\n            'BloodPressure': [92,80,77],\n            'SkinThickness': [33,40,37],\n            'Insulin': [3,13,50],\n            'BMI': [30,36.1,22.5],\n            'DiabetesPedigreeFunction': [0.268,0.303,0.198],\n            'Age': [30,26,18],\n            }\n\npatient_data = pd.DataFrame(data=new_data)","76ca8ef0":"patient_data","9de7652a":"target = model.predict(patient_data)\nprint(target)","b4c0e8df":"# <h3> Test Model","ae326e79":"# Split the data for tranning and testing","9f359a78":"# Using the model to predict new data","a7595244":"# Exploring Data","f40911cb":"GridSearchCV() is a library function in the sklearn's model_sekection package. It is used to select the optiomal hyperameters for the model. ","1e521aa4":"Result: All of the patients have diabetes","1f0c0988":"# <h3> Checking Correlation Between Each Feature","93ec76c8":"<h3 >Check for Null Value <\/h3> ","b870e4bb":"# SVC Model","bef6dae7":"# Load Dataset","5d93fdba":"# Acurracy and Confusion Matrix of the model"}}