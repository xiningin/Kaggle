{"cell_type":{"fc5eda4c":"code","ef4395b5":"code","edda63d1":"code","8e3d565c":"code","3d5af77d":"code","6b8bf427":"code","912a9022":"code","8265efd1":"code","9a0e9fcf":"code","1bcefd27":"code","18279e2b":"code","a647b0ea":"code","b77977c5":"code","97477ae9":"code","ee8f46fb":"code","335e692b":"code","d73acb1c":"code","96b748da":"code","6a991f5a":"code","eee50e82":"code","69df80e0":"code","e327598d":"code","4c7863fe":"code","0e1816f3":"markdown","688f94e0":"markdown","169b1320":"markdown","8ecd7fc6":"markdown","b9a6517f":"markdown","8177e324":"markdown","04fd4131":"markdown","57df27b3":"markdown","23fa1fda":"markdown","6686f322":"markdown","19ef8928":"markdown","bb1c9ce6":"markdown","5ed2633c":"markdown","9a26f596":"markdown","057e4643":"markdown","90d622f9":"markdown","fb9a815e":"markdown","bfa1670f":"markdown","8ed02a23":"markdown","acb6eca7":"markdown","b51ea8ea":"markdown","35a41603":"markdown","022f3075":"markdown","527c9348":"markdown","c079ed83":"markdown","a9098591":"markdown","9d8be1cd":"markdown","97fb493a":"markdown"},"source":{"fc5eda4c":"%%html\n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/ad\/Iris_persica_%28Sowerby%29.jpg\/800px-Iris_persica_%28Sowerby%29.jpg\"\nstyle=\"width: 400px;\"><\/center>","ef4395b5":"import pandas as pd\n\n#reading the csv\nirisdf=pd.read_csv(r\"..\/input\/iris\/Iris.csv\")\n#checking first top 5 rows\nirisdf.head(5)","edda63d1":"#checking amount of rows and columns\nirisdf.shape","8e3d565c":"#checking data types in each column\nirisdf.dtypes.to_frame()","3d5af77d":"#checking if columns contain any null values\nirisdf.isnull().sum().to_frame()","6b8bf427":"irisdf.Species.unique()","912a9022":"#separating each scpecie in a separate dataframe\nsetosa=irisdf.loc[irisdf[\"Species\"]==\"Iris-setosa\"]\nversicolor=irisdf.loc[irisdf[\"Species\"]==\"Iris-versicolor\"]\nvirginica=irisdf.loc[irisdf[\"Species\"]==\"Iris-virginica\"]\n#printing the distribution of each side-by-side\nprint(len(setosa), len(versicolor), len(virginica))","8265efd1":"#list of column names\nspcols=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']\n#empty lists for calcs\nsetosa_spavg=[\"Setosa\"]\nversicolor_spavg=[\"Versicolor\"]\nvirginica_spavg=[\"Virginica\"]\n#setosa calc\nfor i in spcols:\n    x=round(setosa[i].mean(), 1)\n    setosa_spavg.append(x)\n#versicolor calc\nfor i in spcols:\n    x=round(versicolor[i].mean(), 1)\n    versicolor_spavg.append(x)\n#virginica calc    \nfor i in spcols:\n    x=round(virginica[i].mean(), 1)\n    virginica_spavg.append(x)\n#reviewing calc results\nprint(setosa_spavg, versicolor_spavg, virginica_spavg)","9a0e9fcf":"import plotly.graph_objects as go\n#adding figure for Length\/Width visualization\nfig1=go.Figure()\n#adding traces\nfig1.add_trace(go.Scatter(x=setosa.SepalWidthCm, y=setosa.SepalLengthCm, name='Setosa',\n                        mode='markers', marker_color='rgb(52, 152, 219)',\n                        marker_symbol='star-triangle-up', marker_opacity=0.8,\n                        hovertemplate=\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\"))\nfig1.add_trace(go.Scatter(x=versicolor.SepalWidthCm, y=versicolor.SepalLengthCm, name='Versicolor',\n                        mode='markers', marker_color='rgb(170, 128, 255)',\n                        marker_symbol='hexagram', marker_opacity=0.8,\n                        hovertemplate=\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\"))\nfig1.add_trace(go.Scatter(x=virginica.SepalWidthCm, y=virginica.SepalLengthCm, name='Virginica',\n                        mode='markers', marker_color='rgb(241, 196, 15)',\n                        marker_symbol='star-diamond', marker_opacity=0.8,\n                        hovertemplate=\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\"))\n#customizing figure\nfig1.update_traces(mode='markers', marker_line_width=1.5, marker_size=12)\nfig1.update_layout(template='plotly_white', xaxis=dict(title_text='SepalWidthCm', title_standoff=10),\n                   yaxis=dict(title_text='SepalLengthCm', title_standoff=10),\n                   title_text='Sepal Length\/Width', title_x=0.5)\nfig1.update_xaxes(showline=True, linewidth=3, linecolor='black',\n                  showspikes=True, spikecolor='red', spikethickness=2)\nfig1.update_yaxes(showline=True, linewidth=3, linecolor='black',\n                  showspikes=True, spikecolor='red', spikethickness=2)\n#showing figure\nfig1.show()","1bcefd27":"import plotly.graph_objects as go\n#adding figure for Length\/Width visualization\nfig2=go.Figure()\n#adding traces\nfig2.add_trace(go.Scatter(x=setosa.PetalWidthCm, y=setosa.PetalLengthCm, name='Setosa',\n                        mode='markers', marker_color='rgb(52, 152, 219)',\n                        marker_symbol='star-triangle-up', marker_opacity=0.8,\n                        hovertemplate=\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\"))\nfig2.add_trace(go.Scatter(x=versicolor.PetalWidthCm, y=versicolor.PetalLengthCm, name='Versicolor',\n                        mode='markers', marker_color='rgb(170, 128, 255)',\n                        marker_symbol='hexagram', marker_opacity=0.8,\n                        hovertemplate=\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\"))\nfig2.add_trace(go.Scatter(x=virginica.PetalWidthCm, y=virginica.PetalLengthCm, name='Virginica',\n                        mode='markers', marker_color='rgb(241, 196, 15)',\n                        marker_symbol='star-diamond', marker_opacity=0.8,\n                        hovertemplate=\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\"))\n#customizing figure\nfig2.update_traces(mode='markers', marker_line_width=1.5, marker_size=12)\nfig2.update_layout(template='plotly_white', xaxis=dict(title_text='PetalWidthCm', title_standoff=10),\n                   yaxis=dict(title_text='PetalLengthCm', title_standoff=10),\n                   title_text='Petal Length\/Width', title_x=0.5)\nfig2.update_xaxes(showline=True, linewidth=3, linecolor='black',\n                  showspikes=True, spikecolor='red', spikethickness=2)\nfig2.update_yaxes(showline=True, linewidth=3, linecolor='black',\n                  showspikes=True, spikecolor='red', spikethickness=2)\n#showing figure\nfig2.show()","18279e2b":"from plotly.subplots import make_subplots\n#creating subpltos\nfig3=make_subplots(rows=3, cols=2, subplot_titles=('Petal Length\/Width', 'Sepal Length\/Width'))\n#adding trace for Petals\nfig3.add_trace(go.Scatter(x=setosa.PetalWidthCm, y=setosa.PetalLengthCm, name='Setosa-P', mode='markers',\n                          marker_color='rgb(52, 152, 219)', \n                          marker_symbol='star-triangle-up', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\n                          <br><b>PetalWidthCmAVG:<\/b> 0.2 <br><b>PetalLengthCmAVG:<\/b> 1.5\"\"\"),\n               row=1, col=1)\nfig3.add_trace(go.Scatter(x=versicolor.PetalWidthCm, y=versicolor.PetalLengthCm, name='Versicolor-P', mode='markers',\n                          marker_color='rgb(170, 128, 255)',\n                          marker_symbol='hexagram', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\n                          <br><b>PetalWidthCmAVG:<\/b> 1.3 <br><b>PetalLengthCmAVG:<\/b> 4.3\"\"\"),\n               row=2, col=1)\nfig3.add_trace(go.Scatter(x=virginica.PetalWidthCm, y=virginica.PetalLengthCm, name='Virginica-P', mode='markers',\n                          marker_color='rgb(241, 196, 15)',\n                          marker_symbol='star-diamond', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\n                          <br><b>PetalWidthCmAVG:<\/b> 2.0 <br><b>PetalLengthCmAVG:<\/b> 5.6\"\"\"),\n               row=3, col=1)\n#adding traces for Sepal\nfig3.add_trace(go.Scatter(x=setosa.SepalWidthCm, y=setosa.SepalLengthCm, name='Setosa-S', mode='markers',\n                          marker_color='rgb(52, 152, 219)',\n                          marker_symbol='star-triangle-up-dot', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\n                          <br><b>SepalWidthCmAVG:<\/b> 3.4 <br><b>SepalLengthCmAVG:<\/b> 5.0\"\"\"),\n               row=1, col=2)\nfig3.add_trace(go.Scatter(x=versicolor.SepalWidthCm, y=versicolor.SepalLengthCm, name='Versicolor-S', mode='markers',\n                          marker_color='rgb(170, 128, 255)',\n                          marker_symbol='hexagram-dot', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\n                          <br><b>SepalWidthCmAVG:<\/b> 2.8 <br><b>SepalLengthCmAVG:<\/b> 5.9\"\"\"),\n               row=2, col=2)\nfig3.add_trace(go.Scatter(x=virginica.SepalWidthCm, y=virginica.SepalLengthCm, name='Virginica-S', mode='markers',\n                          marker_color='rgb(241, 196, 15)',\n                          marker_symbol='star-diamond-dot', marker_opacity=0.8,\n                          hovertemplate=\"\"\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\n                          <br><b>SepalWidthCmAVG:<\/b> 3.0 <br><b>SepalLengthCmAVG:<\/b> 6.6\"\"\"),\n               row=3, col=2)\n#customizing figure\nfig3.update_traces(mode='markers', marker_line_width=1.5, marker_size=12)\nfig3.update_layout(template='plotly_white', height=700, title_text='Petal-Sepal Length\/Width', title_x=0.5)\nfig3.update_xaxes(showline=True, linewidth=3, linecolor='black', title_text='WidthCm', title_standoff=3)\nfig3.update_yaxes(showline=True, linewidth=3, linecolor='black', title_text='LengthCm', title_standoff=3)\n#showing figure\nfig3.show()","a647b0ea":"#creating coordinate figure\nfig4=go.Figure(data=go.Parcoords(\n                        #customizing\n                        line=dict(\n                        color=irisdf.Species.astype('category').cat.codes,\n                        colorscale=[[0,'rgb(52, 152, 219)'],[0.33,'rgb(52, 152, 219)'],\n                                    [0.33,'rgb(170, 128, 255)'],[0.66,'rgb(170, 128, 255)'],\n                                    [0.66,'rgb(241, 196, 15)'],[1,'rgb(241, 196, 15)']],\n                        colorbar=dict(title='Species', thickness=45,\n                                  tickvals=[0,1,2], ticktext=['Setosa', 'Versicolor', 'Virginica'],\n                                  lenmode='pixels', len=120, bordercolor='#000', borderwidth=1,\n                                  ticks='outside')),\n                        #setting dimensions represented in the plot\n                        dimensions=list([\n                                    dict(range=[0,8],\n                                    constraintrange=[1.9,4.5],\n                                    label='Sepal Width Cm', values=irisdf.SepalWidthCm),\n                                    dict(range=[0,8],\n                                    constraintrange=[4,8],\n                                    label='Sepal Length Cm', values=irisdf.SepalLengthCm),\n                                    dict(range=[0,8],\n                                    constraintrange=[0,2.7],\n                                    label='Petal Width Cm', values=irisdf.PetalWidthCm),\n                                    dict(range=[0,8],\n                                    constraintrange=[1,7],\n                                    label='Petal Length Cm', values=irisdf.PetalLengthCm)\n                                    ])\n))\n#customizing layout\nfig4.update_layout(template='plotly_white', title_text='Sepal\/Petal Coordinates Plot', title_x=0.5)\n#showing figure\nfig4.show()","b77977c5":"#setosa-S\nsl_25_setosa=round(setosa.SepalLengthCm.quantile(0.25), 1)\nsl_75_setosa=round(setosa.SepalLengthCm.quantile(0.75), 1)\nsw_25_setosa=round(setosa.SepalWidthCm.quantile(0.25), 1)\nsw_75_setosa=round(setosa.SepalWidthCm.quantile(0.75), 1)\n#setosa-P\npl_25_setosa=round(setosa.PetalLengthCm.quantile(0.25), 1)\npl_75_setosa=round(setosa.PetalLengthCm.quantile(0.75), 1)\npw_25_setosa=round(setosa.PetalWidthCm.quantile(0.25), 1)\npw_75_setosa=round(setosa.PetalWidthCm.quantile(0.75), 1)\nprint('Setosa \\nSL25: {} SL75: {}\\nSW25: {} SW75: {}'.format(sl_25_setosa, sl_75_setosa, sw_25_setosa, sw_75_setosa))\nprint('PL25: {} PL75: {}\\nPW25: {} PW75: {}'.format(pl_25_setosa, pl_75_setosa, pw_25_setosa, pw_75_setosa))\n#versicolor-S\nsl_25_versicolor=round(versicolor.SepalLengthCm.quantile(0.25), 1)\nsl_75_versicolor=round(versicolor.SepalLengthCm.quantile(0.75), 1)\nsw_25_versicolor=round(versicolor.SepalWidthCm.quantile(0.25), 1)\nsw_75_versicolor=round(versicolor.SepalWidthCm.quantile(0.75), 1)\n#versicolor-P\npl_25_versicolor=round(versicolor.PetalLengthCm.quantile(0.25), 1)\npl_75_versicolor=round(versicolor.PetalLengthCm.quantile(0.75), 1)\npw_25_versicolor=round(versicolor.PetalWidthCm.quantile(0.25), 1)\npw_75_versicolor=round(versicolor.PetalWidthCm.quantile(0.75), 1)\nprint('Versicolor \\nSL25: {} SL75: {}\\nSW25: {} SW75: {}'.format(sl_25_versicolor, sl_75_versicolor, sw_25_versicolor, sw_75_versicolor))\nprint('PL25: {} PL75: {}\\nPW25: {} PW75: {}'.format(pl_25_versicolor, pl_75_versicolor, pw_25_versicolor, pw_75_versicolor))\n#virginica-S\nsl_25_virginica=round(virginica.SepalLengthCm.quantile(0.25), 1)\nsl_75_virginica=round(virginica.SepalLengthCm.quantile(0.75), 1)\nsw_25_virginica=round(virginica.SepalWidthCm.quantile(0.25), 1)\nsw_75_virginica=round(virginica.SepalWidthCm.quantile(0.75), 1)\n#virginica-P\npl_25_virginica=round(virginica.PetalLengthCm.quantile(0.25), 1)\npl_75_virginica=round(virginica.PetalLengthCm.quantile(0.75), 1)\npw_25_virginica=round(virginica.PetalWidthCm.quantile(0.25), 1)\npw_75_virginica=round(virginica.PetalWidthCm.quantile(0.75), 1)\nprint('Virginica \\nSL25: {} SL75: {}\\nSW25: {} SW75: {}'.format(sl_25_virginica, sl_75_virginica, sw_25_virginica, sw_75_virginica))\nprint('PL25: {} PL75: {}\\nPW25: {} PW75: {}'.format(pl_25_virginica, pl_75_virginica, pw_25_virginica, pw_75_virginica))","97477ae9":"#function to convert numeric values into categorical in IQR ranges\ndef iqr_calc(x,y,z):\n    values=(x>=y)&(x<=z)\n    return values.map(lambda item: \"Interquartile Range\" if item else \"Outlier\")\n#setosa    \nsetosa['SepalLengthCmIQR']=iqr_calc(setosa.SepalLengthCm, sl_25_setosa, sl_75_setosa)\nsetosa['SepalWidthCmIQR']=iqr_calc(setosa.SepalWidthCm, sw_25_setosa, sw_75_setosa )\nsetosa['PetalLengthCmIQR']=iqr_calc(setosa.PetalLengthCm, pl_25_setosa, pl_75_setosa)\nsetosa['PetalWidthCmIQR']=iqr_calc(setosa.PetalWidthCm, pw_25_setosa, pw_75_setosa )\n#versicolor\nversicolor['SepalLengthCmIQR']=iqr_calc(versicolor.SepalLengthCm, sl_25_versicolor, sl_75_versicolor)\nversicolor['SepalWidthCmIQR']=iqr_calc(versicolor.SepalWidthCm, sw_25_versicolor, sw_75_versicolor)\nversicolor['PetalLengthCmIQR']=iqr_calc(versicolor.PetalLengthCm, pl_25_versicolor, pl_75_versicolor)\nversicolor['PetalWidthCmIQR']=iqr_calc(versicolor.PetalWidthCm, pw_25_versicolor, pw_75_versicolor )\n#virginica\nvirginica['SepalLengthCmIQR']=iqr_calc(virginica.SepalLengthCm, sl_25_virginica, sl_75_virginica)\nvirginica['SepalWidthCmIQR']=iqr_calc(virginica.SepalWidthCm, sw_25_virginica, sw_75_virginica)\nvirginica['PetalLengthCmIQR']=iqr_calc(virginica.PetalLengthCm, pl_25_virginica, pl_75_virginica)\nvirginica['PetalWidthCmIQR']=iqr_calc(virginica.PetalWidthCm, pw_25_virginica, pw_75_virginica )","ee8f46fb":"#making list of modified dataframes\niqr_frames=[setosa, versicolor, virginica]\n#merging them together\niqr_result=pd.concat(iqr_frames)\n#selecting only needed columns for the graph into new dedicated dataframe\niqr_svv=iqr_result[['Species', 'SepalLengthCmIQR', 'SepalWidthCmIQR', 'PetalLengthCmIQR', 'PetalWidthCmIQR']]\n#checking results\niqr_svv.head(5)","335e692b":"#setting up dimensions for figure below\nspecies_dim=go.parcats.Dimension(values=iqr_svv.Species, label='Species')\nsepalL_dim=go.parcats.Dimension(values=iqr_svv.SepalLengthCmIQR, label='Sepal Length IQR')\nsepalW_dim=go.parcats.Dimension(values=iqr_svv.SepalWidthCmIQR, label='Sepal Width IQR')\npetalL_dim=go.parcats.Dimension(values=iqr_svv.PetalLengthCmIQR, label='Petal Length IQR')\npetalW_dim=go.parcats.Dimension(values=iqr_svv.PetalWidthCmIQR, label='Petal Width IQR')\n#customizing\ncolor=iqr_svv.Species.astype('category').cat.codes\ncolorscale=[[0,'rgb(52, 152, 219)'],[0.33,'rgb(52, 152, 219)'],\n            [0.33,'rgb(170, 128, 255)'],[0.66,'rgb(170, 128, 255)'],\n            [0.66,'rgb(241, 196, 15)'],[1,'rgb(241, 196, 15)']]\n#creating categorical diagram figure and passing arguments set above\nfig5=go.Figure(data=[go.Parcats(dimensions=[species_dim, sepalL_dim, sepalW_dim, petalL_dim, petalW_dim],\n        line={'color': color, 'colorscale': colorscale},\n        hoveron='dimension', \n        hoverinfo='count',\n        labelfont={'size': 14},\n        tickfont={'size': 12},\n        arrangement='freeform')])\n#customizing layout\nfig5.update_layout(title_text='Sepal\/Petal Categorical Coordinates Plot', title_x=0.5)\n#showing figure\nfig5.show()","d73acb1c":"from sklearn import neighbors\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pylab as pl","96b748da":"#creating X(features) and Y(response)\nxs=irisdf.iloc[:, 1:3]\nXs=xs.to_numpy()\nys=irisdf.Species.astype('category').cat.codes\nYs=ys.to_numpy()\n#decision boundary plot\nh = .02 \nx_min, x_max = Xs[:,0].min()-0.2, Xs[:,0].max()+0.2\ny_min, y_max = Xs[:,1].min()-0.2, Xs[:,1].max()+0.2\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))","6a991f5a":"#knn with n=5\nknn5=neighbors.KNeighborsClassifier(n_neighbors=5)\nknn5.fit(Xs, Ys)\n#knn with n=1\nknn1=neighbors.KNeighborsClassifier(n_neighbors=1)\nknn1.fit(Xs, Ys)","eee50e82":"#putting results into color plot from n=5\nZ5 = knn5.predict(np.c_[xx.ravel(), yy.ravel()])\nZs5 = Z5.reshape(xx.shape)\ny_5=np.arange(y_min, y_max, h)\ny_pred5=knn5.predict(Xs)\n#putting results into color plot from n=1\nZ1 = knn1.predict(np.c_[xx.ravel(), yy.ravel()])\nZs1 = Z1.reshape(xx.shape)\ny_1=np.arange(y_min, y_max, h)\ny_pred1=knn1.predict(Xs)","69df80e0":"#knn plot n=5\nfig6=go.Figure(\n  layout=go.Layout(\n        annotations=[\n            go.layout.Annotation(text='KNN-Sepal Accuracy: {}'.format(round(metrics.accuracy_score(Ys, y_pred5), 2)),\n                align='left', showarrow=False, xref='paper', yref='paper', x=0.9, y=0.9,\n                bordercolor='black', borderwidth=1, bgcolor='white')]))\n#adding contour plot \nfig6.add_trace(go.Contour(x=xx[0], y=y_5, z=Zs5, \n                         showscale=False, \n                         colorscale=[[0,'rgb(52, 152, 219)'],[0.33,'rgb(52, 152, 219)'],\n                                    [0.33,'rgb(170, 128, 255)'],[0.66,'rgb(170, 128, 255)'],\n                                    [0.66,'rgb(241, 196, 15)'],[1,'rgb(241, 196, 15)']]))\n#adding training scatter points plot\nfig6.add_trace(go.Scatter(x=Xs[:, 0], y=Xs[:, 1],\n                          mode='markers', marker_size=10, marker_line_width=2, marker_color=Ys,\n                          hovertemplate=\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\"))\n#customizing Layout\nfig6.update_layout(template='plotly_white', height=600, title_text='K-Nearest-Neighbors (K=5) Plot - Sepal', title_x=0.5)\nfig6.update_xaxes(showline=False, title_text='Sepal WidthCm', title_standoff=5)\nfig6.update_yaxes(showline=False, title_text='Sepal LengthCm', title_standoff=5)\n#knn plot n=1\nfig7=go.Figure(\n  layout=go.Layout(\n        annotations=[\n            go.layout.Annotation(text='KNN-Sepal Accuracy: {}'.format(round(metrics.accuracy_score(Ys, y_pred1), 2)),\n                align='left', showarrow=False, xref='paper', yref='paper', x=0.9, y=0.9,\n                bordercolor='black', borderwidth=1, bgcolor='white')]))\n#adding countor plot\nfig7.add_trace(go.Contour(x=xx[0], y=y_1, z=Zs1, \n                         showscale=False, \n                         colorscale=[[0,'rgb(52, 152, 219)'],[0.33,'rgb(52, 152, 219)'],\n                                    [0.33,'rgb(170, 128, 255)'],[0.66,'rgb(170, 128, 255)'],\n                                    [0.66,'rgb(241, 196, 15)'],[1,'rgb(241, 196, 15)']]))\n#adding training scatter points plot\nfig7.add_trace(go.Scatter(x=Xs[:, 0], y=Xs[:, 1],\n                          mode='markers', marker_size=10, marker_line_width=2, marker_color=Ys,\n                          hovertemplate=\"<b>SepalWidthCm:<\/b> %{x} <br><b>SepalLengthCm:<\/b> %{y}\"))\n#customizing Layout\nfig7.update_layout(template='plotly_white', height=600, title_text='K-Nearest-Neighbors (K=1) Plot - Sepal', title_x=0.5)\nfig7.update_xaxes(showline=False, title_text='Sepal WidthCm', title_standoff=5)\nfig7.update_yaxes(showline=False, title_text='Sepal LengthCm', title_standoff=5)\n#showing figures one below each other for contrast\nfig6.show()\nfig7.show()","e327598d":"xp=irisdf.iloc[:, 3:5]\nXp=xp.to_numpy()\nyp=irisdf.Species.astype('category').cat.codes\nYp=yp.to_numpy()\n#decision boundary plot\nh = .02 \nx_minp, x_maxp = Xp[:,0].min()-0.2, Xp[:,0].max()+0.2\ny_minp, y_maxp = Xp[:,1].min()-0.2, Xp[:,1].max()+0.2\nxxp, yyp = np.meshgrid(np.arange(x_minp, x_max, h), np.arange(y_minp, y_maxp, h))\n\nknn5p=neighbors.KNeighborsClassifier(n_neighbors=5)\nknn5p.fit(Xp, Yp)\n\n#putting results into color plot from n=5\nZp = knn5p.predict(np.c_[xxp.ravel(), yyp.ravel()])\nZp5 = Zp.reshape(xxp.shape)\ny_5p=np.arange(y_minp, y_maxp, h)\ny_pred5p=knn5p.predict(Xp)","4c7863fe":"fig8=go.Figure(\n  layout=go.Layout(\n        annotations=[\n            go.layout.Annotation(text='KNN-Petal Accuracy: {}'.format(round(metrics.accuracy_score(Yp, y_pred5p), 2)),\n                align='left', showarrow=False, xref='paper', yref='paper', x=0.1, y=0.9,\n                bordercolor='black', borderwidth=1, bgcolor='white')]))\n#adding contour plot \nfig8.add_trace(go.Contour(x=xxp[0], y=y_5p, z=Zp5, \n                         showscale=False, \n                         colorscale=[[0,'rgb(52, 152, 219)'],[0.33,'rgb(52, 152, 219)'],\n                                    [0.33,'rgb(170, 128, 255)'],[0.66,'rgb(170, 128, 255)'],\n                                    [0.66,'rgb(241, 196, 15)'],[1,'rgb(241, 196, 15)']]))\n#adding training scatter points plot\nfig8.add_trace(go.Scatter(x=Xp[:, 0], y=Xp[:, 1],\n                          mode='markers', marker_size=10, marker_line_width=2, marker_color=Ys,\n                          hovertemplate=\"<b>PetalWidthCm:<\/b> %{x} <br><b>PetalLengthCm:<\/b> %{y}\"))\n#customizing Layout\nfig8.update_layout(template='plotly_white', height=600, title_text='K-Nearest-Neighbors (K=5) Plot - Petal', title_x=0.5)\nfig8.update_xaxes(showline=False, title_text='Petal WidthCm', title_standoff=5)\nfig8.update_yaxes(showline=False, title_text='Petal LengthCm', title_standoff=5)\n\nfig8.show()","0e1816f3":"## Machine Learning\n_Applying machine learning and visualizing results_","688f94e0":"## Understanding Data\n_Going over features presented in the dataset_","169b1320":"**Hey guys!** I hope you enjoyed this notebook and learned something new about Plotly and power of its dynamic visualizations that you can have full control of. Creating visualizations is a lot of fun - especially, when you make them unique and try to tell the story about your data through simple\/complex techniques. Surely, some visualizations might be an overkill, however it is our job to present the most advanced graph in the most readable way, so that even reader not familiar with topic or low analytical skills can learn something without going into crazy depths... \n\nOn a separate note, I am more than aware I haven't posted in a very long way (I was very busy with work and all changes happening in the world right now); but hey - I am happy to be back and showcase new notebooks to my followers and new readers. For people who are new please check out my other 2 notebooks ([Advanced Fire Analysis](http:\/\/https:\/\/www.kaggle.com\/dgomonov\/advanced-fires-analysis-with-plotly) and [Airbnb Exploration in NYC](http:\/\/https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb)) and one of the top viewed datasets on Kaggle ([New York City Airbnb Open Data](http:\/\/https:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data))\n\nPlease feel free to upvote this notebook if it was useful, leave a comment or leave a suggestion if something can be improved!","8ecd7fc6":"First graph is a very clean representation of scatter plot for *Sepal* lengths and widths, where all 3 Iris species are divided and presented to the user in a very readable way. Each specie is represented with a different marker so that in case of clustering viewer is still able to make a division, which also supported by different colors assigned. Now, in case of data points being the same or extremely close to each other, opacity is brought down to *0.8*, so that in case of stacking you can still see the exact positioning of each one more clearly. Upon hovering, you are able to see the red marker line which helps you to track the x and y measurements. Also, the legend is presented on the top right which allows viewer to click on one in order to examine the distribution of data points for a specific specie. From this graph, we can strongly state that there is already a distinct gap in measurement distributions between *Setosa* and other two species.","b9a6517f":"***","8177e324":"***","04fd4131":"Third graph showcases the combination of multiple graphs represented side by side for the 'ultimate' comparison of *Sepal* and *Petal* measurements of each specie, where left column contains all *Petal* measurements and right column contains all *Sepal* ones. Now, one can argue that this may be the best way to represent this type of data because of a very clear division between each specie indicated by markers and colors, and lack of personal actions viewer needs to take to in order to compare one thing with another. For example, if one wants to compare *Sepal* measurements of *Virginica* specie with *Petal* measurements of *Versicolor* specie - he\/she has all information presented in front of them. From this graph we can collect multiple interesting observations and draw conclusions, where one of them would be that across all species represented *Sepal* shows larger measurements collected in terms of centimeters.","57df27b3":"At this point we know 25%-75% IQR ranges for each measurement collected and have identified normal and outlier observations on data we are given, thus ready to do a categorical plot.","23fa1fda":"***","6686f322":"The final graph in this analysis *Categorical Coordinates Plot* is quite unusual, however holds a lot of useful information for the user\/viewer to get a better understanding on what kind of distribution in measurements we have in data presented to us. With a use of simple descriptive statistics technique, interquartile range we are able to convert numeric data into a simple binary categorical output: normal (Interquartile Range), outlier. After the modification we can track each sample of data for specific specie given and understand better on what number of population is normal or considered to be an outlier. Hovering through line a user\/viewer can see the count and the flow. Surely, from this graph we can conclude a lot of useful observations with one of them being that each specie represented only has 10-15 observations that considered to be normal according to 25%-75% IQR across all four measurements.","19ef8928":"Fourth graph called *Coordinates Plot* is a bit more complicated, however allows viewer to identify each specie based on his\/her own criteria with numeric values presented to us in a dataset. Each line is a data point represented that goes through a specific point in each of four measurement ranges with a pink bar provided to be moved under specific measurement criteria one would want for the analysis. For example, if you want to know which species fall under *Petal Length* measurement of 2.0 centimeters and below, you are able to pull the pink bar down and analyze findings - only *Setosa* species fall under that criteria. Therefore, from this graph we can also conclude multiple interesting observations and showcase unique way for user\/viewer to interact with given numeric data that we have.","bb1c9ce6":"## Exploring and Visualizing Data\n_Exploring the data by analyzing and visualizing the values of features and correlations presented_","5ed2633c":"It is important to note that **go.Figure()** or Graph objects are going to be used for analyzing and visualizing to showcase the full control Plotly gives with modifications, high-level functions and properties accessable via dictionaries or classes. The ability to build complex dynamic graphs and fully customize them allows viewers to experience data on a new level, where they are able to interact with it and make their own findings (which will be showcased bellow). Explanation of each graph is provided under each plot.","9a26f596":"**Iris data set** is widely used as an introductory data set, which is used to explore analytical, visual and machine learning techniques. This notebook focuses on a more _advanced_ approach highlighting customized ways to visualize data with Plotly library. Everyone is welcome to follow along!","057e4643":"# \ud83d\udcdd","90d622f9":"*Please note that for this dataset there are a number of machine learning estimators that can be used, which you can review in other notebooks posted. For the purposes of exploring complex plots, KNN is a very good example that will be showcased in this part.*","fb9a815e":"This two graphs showcase the visual representation of 2D classification with one using standard amount of nearest neighbors and other overfitting. However, unless you are overfitting we can conclude that using *Sepal* features are not too great for predicting, which is supported by 83% accuracy score. Therefore, coming back to the data exploration section we did earlier - we can do the same process but using *Petal* features and expect much better results (in terms of 2D representation and performance).","bfa1670f":"*Please note that for the graph below some preparation is needed as we are changing numeric values into categorical based on statistical method to determine which observations falls under IQR and not; please see the code cells bellow*","8ed02a23":"**Iris** is genus that consists of 260-300 species of flowering plant (angiosperms). In this analysis a data set is presented with 3 species called _Iris Setosa, Iris Versicolor, Iris Virginica_. **Iris flower data set** consists of 150 observation equally divided between 3 species with 4 measurement attributes _sepal length, sepal width, petal length, petal width_.","acb6eca7":"***","b51ea8ea":"# <center>Advanced Iris Analysis with Plotly<\/center>\n***","35a41603":"***","022f3075":"This last graph shows clear performance and better accuracy results as it was mentioned earlier. Now, to elaborate one more time - during the exploration part of this notebook we have determined throughout multiple simple and complex visualizations that *Petal* features are the ones that show the most significant variation between three species, therefore using it here allowed for a succesful output and accuracy of 96%. ","527c9348":"Second graph is the same as the first one but with *Petal* length and width measurements represented. Same techniques and colors are used to keep the UX flow consistent starting from the first graph above. This graph shows larger gaps between 3 species in terms of measurement distributions and clusters represented. From this graph, we can strongly state that contrast of *Petal* measurements allows for best distinction between 3 species.","c079ed83":"***","a9098591":"## Abstract\n_Abstract overview of the analysis_","9d8be1cd":"## Data Source\n _What are Iris species and Iris data set?_","97fb493a":"## Acquiring and Loading Data\n_Presenting the code and methods for acquiring and loading data for upcoming analysis_"}}