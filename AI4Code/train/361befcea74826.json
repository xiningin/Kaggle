{"cell_type":{"577fee99":"code","565acb37":"code","11d8ffc2":"code","c252bc18":"code","5231739f":"code","f983caa0":"code","4e92724a":"code","ea1f44fe":"code","61bd92f7":"code","a6cf6800":"code","e55dc26e":"code","f39c6fe2":"code","8f7bb5d9":"code","98da0f66":"code","9fbd46da":"code","321ee715":"code","0004701b":"code","9f22aea0":"code","80287510":"code","0d57c1eb":"code","4fd246b3":"code","0601a7ec":"code","c09e018b":"code","7d9af923":"code","b92edb6a":"code","0ec0a6d8":"code","a93cb5a4":"code","c3e5a52f":"code","8382b2f6":"markdown","a53930db":"markdown","0a8c0bf6":"markdown","d9dba6a3":"markdown","a74ccf15":"markdown","9a65b652":"markdown","3b2ed8c6":"markdown","6db3eec4":"markdown","db92906a":"markdown","e3ec466c":"markdown","6c1788de":"markdown"},"source":{"577fee99":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")","565acb37":"train_df = pd.read_csv('\/kaggle\/input\/nbme-score-clinical-patient-notes\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/nbme-score-clinical-patient-notes\/test.csv')\nnotes = pd.read_csv('\/kaggle\/input\/nbme-score-clinical-patient-notes\/patient_notes.csv')\nfeatures = pd.read_csv('\/kaggle\/input\/nbme-score-clinical-patient-notes\/features.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/nbme-score-clinical-patient-notes\/sample_submission.csv')","11d8ffc2":"train_df","c252bc18":"train_df.info()","5231739f":"train_df.nunique()","f983caa0":"test_df.head()","4e92724a":"# plot\ntrain_df['case_num'].value_counts(normalize = True).sort_values().plot(kind='bar', figsize=(10,4), color = 'gold', rot=0)\n\nplt.xlabel(\"case_num\", labelpad=10, fontsize=20)\nplt.ylabel(\"Percent of data\", labelpad=10, fontsize=20)\nplt.xticks(size = 12)\nplt.yticks(size = 12)\nplt.title(\"Percent of data belonging to each case_num in the train set\", y=1.02, fontsize=15)","ea1f44fe":"features.head()","61bd92f7":"features.info()","a6cf6800":"features.nunique()","e55dc26e":"# How many unique features per case number?\n\nfeat_count = features.groupby('case_num')['feature_num'].count().reset_index()\nprint(feat_count)\nplt.figure(figsize=(10, 4))\nsns.barplot(x = feat_count['case_num'].astype(str), y= feat_count['feature_num'].astype(int))\nplt.xlabel(\"case number\", labelpad=10, fontsize=12)\nplt.ylabel(\"number of features\", labelpad=10, fontsize=12)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.title(\"total number of features per case number\", y=1.02, fontsize=15)","f39c6fe2":"notes.head()","8f7bb5d9":"notes.info()","98da0f66":"notes.nunique()","9fbd46da":"# How many unique patient notes per case number?\n\nnotes_count = notes.groupby('case_num')['pn_num'].count().reset_index()\nplt.figure(figsize=(10, 4))\nsns.barplot(x = notes_count['case_num'].astype(str), y= notes_count['pn_num'].astype(int))\nplt.xlabel(\"case number\", labelpad=10, fontsize=12)\nplt.ylabel(\"number of patient notes\", labelpad=10, fontsize=12)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"total number of patient notes per case number\", y=1.02, fontsize=15)","321ee715":"# There are many ways to match the patient history with feature text. I will go with our good old pandas merge. \ndf = pd.merge(train_df, notes, on = ['pn_num', 'case_num'])\ndf1 = pd.merge(df, features, on = ['feature_num', 'case_num'])\n\n# check if we have unique values as per the test data or not\ndf1.nunique()","0004701b":"final_df = df1[['id','case_num', 'pn_num', 'pn_history','feature_num', 'feature_text', 'annotation', 'location']].sort_values(by ='id')\nfinal_df.head()","9f22aea0":"# Let's take a look at the pn_history, with feature_text and annotation\nprint(f'**** \ud83d\udcdc patient history*****\\n{final_df.pn_history.iloc[91]}')\n\nprint(f'****\ud83e\uddee feature_text ***** \\n {final_df.feature_text.iloc[91]}')\n\nprint(f'****\ud83d\udccc annotation ***** \\n {final_df.annotation.iloc[91]}')\n\nprint(f'****\ud83d\udccd location ***** \\n {final_df.location.iloc[91]}')\n","80287510":"import spacy\nfrom spacy import displacy\nfrom spacy.matcher import PhraseMatcher\nnlp = spacy.load(\"en_core_web_sm\")\nfrom textblob import TextBlob\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')","0d57c1eb":"# parse the feature text\ndef parse_feature_text(feature_text:str):\n    # remove extra characters and make the text lower\n    text = feature_text.replace(\"-\", \" \").lower()\n    # remove stop words\n    clean_text = [x for x in text.split() if x not in stop]\n    return clean_text","4fd246b3":"parsed_feature = parse_feature_text(final_df.feature_text.iloc[91])\nprint(parsed_feature)","0601a7ec":"# parse the patient notes, with just making the notes lower case. \ndef parse_patient_notes(note_text:str):\n    # just make the text lower\n    text = note_text.lower()\n    return text","c09e018b":"print('******Patient Notes')\nparsed_notes = parse_patient_notes(final_df.pn_history.iloc[91])\ndoc = nlp(final_df.pn_history.iloc[91])\nsentence_spans = list(doc.sents)\ndisplacy.render(sentence_spans, style=\"ent\", jupyter = True)","7d9af923":"print('******Related feature')\ndoc = nlp(final_df.feature_text.iloc[91])\nsentence_spans = list(doc.sents)\ndisplacy.render(sentence_spans, style=\"dep\", jupyter = True)","b92edb6a":"import re\n# Match the keywords\ndef match_kw(parsed_feature, parsed_notes):\n    matcher = PhraseMatcher(nlp.vocab)\n\n    patterns = [nlp.make_doc(text) for text in parsed_feature]\n    \n    matcher.add(\"TerminologyList\", patterns)\n\n    doc = nlp(parsed_notes)\n    matches = matcher(doc)\n    \n    for match_id, start, end in matches:\n        span = doc[start:end]\n        print([span.text], [start, end])\n    ","0ec0a6d8":"match_kw(parsed_feature, parsed_notes)","a93cb5a4":"# pip install git+https:\/\/github.com\/LIAAD\/yake","c3e5a52f":"# # let's extract the keywords from the patient notes and match it with the features.\n# import yake\n# text1 = final_df.pn_history.iloc[0]\n# language = \"en\"\n# max_ngram_size = 5\n# deduplication_thresold = 0.9\n# deduplication_algo = 'leve'\n# windowSize = 3\n# numOfKeywords = 20\n\n# custom_kw_extractor = yake.KeywordExtractor(lan=language, n=max_ngram_size, dedupLim=deduplication_thresold, dedupFunc=deduplication_algo, windowsSize=windowSize, top=numOfKeywords, features=None)\n# keywords = custom_kw_extractor.extract_keywords(text1)\n\n# for kw in keywords:\n#     print(kw)","8382b2f6":"Look at the train data info below, this shows that we have no NA values but as mentioned in the description, only a fraction of the train data is annotated, that means we don't have all annotations data and it is filled with '[]'. Check above","a53930db":"Few annotations and locations need to be filled in the training data. For example,the pn_num 95333 doesn't have a annotation and location for feature number 912 and 913.","0a8c0bf6":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#CCCCFF;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:white;\"><b> 3- EXPLORE THE DATA:<\/b><\/p>\n<\/div>","d9dba6a3":"Trying to find matching phrases and words between the patient notes and the feature text using spaCY's phrasematcher. This will help in getting the location in the patient notes. Let's see how this works. The location doesn't matched though.","a74ccf15":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#CCCCFF;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:white;\"><b> 1- ABOUT THE ANALYSIS:<\/b><\/p>\n<\/div>\n\nThis competition is sponsored by the National Board of Medical Examiners\u00ae (NBME\u00ae). The goal of this competition is to develop an automated way of identifying the relevant features within each patient note, with a special focus on the patient history portions of the notes where the information from the interview with the standardized patient is documented.\n\nI am trying to apply my train of thoughts to explore the data.","9a65b652":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#CCCCFF;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:white;\"><b> 2- ABOUT THE DATA:<\/b><\/p>\n<\/div>\n\n\nThere are some important components in the training data provided, that consists of the following:\n\n1. Training data:\n\n> 1.1- train.csv - Feature annotations for 1000 of the patient notes, 100 for each of ten cases.\n\n> 1.2- patient_notes.csv - A collection of about 40,000 Patient Note history portions. \n\n> 1.3- features.csv - The rubric of features (or key concepts) for each clinical case.\n\n2. Test data: Example instances selected from the training set.\n\n3. sample_submission.csv - A sample submission file in the correct format.\n","3b2ed8c6":"To sum up, there are 10 case numbers, that have different features\/ rubric that needs to be checked for each patient interaction that happens between a USMLE candidate and the standardized patient.\n\nFor example, case number 5(standardized clinical case) has total 18 rubric requirements(the features) and the total number of patient history records(which i think is nothing but the number of students who have interacted with that case) is 7000. We have to find the location in the patient history notes, where the rubric\/features has been identified. ","6db3eec4":"Some annotations and locations in the train data are not present, we have to find the annotation using the patient history. Let's get the history of each pn_num together with the annotations. ","db92906a":"#### Explore the notes data:\n\npatient_notes.csv - A collection of about 40,000 Patient Note history portions. Only a subset of these have features annotated. \n* pn_num - A unique identifier for each patient note.\n* case_num - A unique identifier for the clinical case a patient note represents.\n* pn_history - The text of the encounter as recorded by the test taker.","e3ec466c":"#### Exploring the train data:\n\n(Taken from the project description)\n\nThe train data consists of 6 columns with the folllowing details:\n\n* id - Unique identifier for each patient note \/ feature pair.\n* pn_num - The patient note annotated in this row.\n* feature_num - The feature annotated in this row.\n* case_num - The case to which this patient note belongs.\n* annotation - The text(s) within a patient note indicating a feature. A feature may be indicated multiple times within a single note.\n* location - Character spans indicating the location of each annotation within the note. Multiple spans may be needed to represent an annotation, in which case the spans are delimited by a semicolon ;.","6c1788de":"#### Explore the features data:\n\nfeatures.csv - The rubric of features (or key concepts) for each clinical case.\n* feature_num - A unique identifier for each feature.\n* case_num - A unique identifier for each case.\n* feature_text - A description of the feature.\n"}}