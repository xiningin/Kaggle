{"cell_type":{"5bfb87be":"code","10f54109":"code","52853927":"code","0761667d":"code","54e976e7":"code","526c3c67":"code","cc1ded65":"code","3567943b":"code","8278ae84":"code","6b4098ea":"code","8652f2c5":"code","1fb04d5d":"code","8600c20b":"code","7f2bc2bd":"code","42fe2a75":"code","bde3128b":"code","575b56a5":"code","5d424277":"code","ff3f0d06":"code","28ccbc24":"code","d0f4cc53":"code","6d5c0f4a":"code","92a820cf":"code","04d27c85":"code","66720c7b":"code","7e5b4fd7":"code","fa0cb668":"code","42595aab":"code","258df4cc":"code","1f53de2d":"code","e4259b16":"code","387ad1a1":"code","f3db4070":"code","24c2f29e":"code","df309fa0":"code","389037cd":"code","b6e4c521":"code","324fe8ea":"code","6131467b":"code","9aac0395":"code","97999350":"code","3e236c1a":"code","e2183755":"code","370a8000":"markdown","a531cb5e":"markdown","de0ed2ae":"markdown","d0b450d4":"markdown","9d63fdb9":"markdown","7c13a3da":"markdown","b1976e00":"markdown","93d56a4a":"markdown","db5e774c":"markdown","4b0c641e":"markdown","1eeefe84":"markdown","748d174b":"markdown","fbe600a9":"markdown","d9917487":"markdown","c46f67b5":"markdown","c47432cc":"markdown","96fa4732":"markdown","7546b48f":"markdown","d16fcda2":"markdown","9b1b75ca":"markdown"},"source":{"5bfb87be":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nfrom scipy.optimize import curve_fit\nfrom sympy.solvers import solve\nfrom sympy import Symbol\n\n\npd.set_option('display.max_rows', None)","10f54109":"# Data taken from Johns Hopkins CSSE - https:\/\/github.com\/CSSEGISandData\/COVID-19\n#\n\ndf_confirmed = pd.read_csv('\/kaggle\/input\/covid19-csea\/time_series_covid_19_confirmed.csv')\ndf_deaths = pd.read_csv('\/kaggle\/input\/covid19-csea\/time_series_covid_19_deaths.csv')\ndf_recovered = pd.read_csv('\/kaggle\/input\/covid19-csea\/time_series_covid_19_recovered.csv')","52853927":"df_confirmed.head(n=10)","0761667d":"df_confirmed[df_confirmed['Country\/Region'] == 'Italy']","54e976e7":"# Johns Hopkins changed how they're sorting the data sooo gotta do all this stuff to try to fix it\n# No longer necessary as of 3\/12\/2020. But I'll leave it since it won't affect anything, and in case they change the data structure again\n\n\ndef fix_USA(df_orig):\n    us_state_abbrev = {\n        'Alabama': 'AL',\n        'Alaska': 'AK',\n        'Arizona': 'AZ',\n        'Arkansas': 'AR',\n        'California': 'CA',\n        'Colorado': 'CO',\n        'Connecticut': 'CT',\n        'Delaware': 'DE',\n        'District of Columbia': 'D.C.',\n        'Florida': 'FL',\n        'Georgia': 'GA',\n        'Hawaii': 'HI',\n        'Idaho': 'ID',\n        'Illinois': 'IL',\n        'Indiana': 'IN',\n        'Iowa': 'IA',\n        'Kansas': 'KS',\n        'Kentucky': 'KY',\n        'Louisiana': 'LA',\n        'Maine': 'ME',\n        'Maryland': 'MD',\n        'Massachusetts': 'MA',\n        'Michigan': 'MI',\n        'Minnesota': 'MN',\n        'Mississippi': 'MS',\n        'Missouri': 'MO',\n        'Montana': 'MT',\n        'Nebraska': 'NE',\n        'Nevada': 'NV',\n        'New Hampshire': 'NH',\n        'New Jersey': 'NJ',\n        'New Mexico': 'NM',\n        'New York': 'NY',\n        'North Carolina': 'NC',\n        'North Dakota': 'ND',\n        'Northern Mariana Islands':'MP',\n        'Ohio': 'OH',\n        'Oklahoma': 'OK',\n        'Oregon': 'OR',\n        'Palau': 'PW',\n        'Pennsylvania': 'PA',\n        'Puerto Rico': 'PR',\n        'Rhode Island': 'RI',\n        'South Carolina': 'SC',\n        'South Dakota': 'SD',\n        'Tennessee': 'TN',\n        'Texas': 'TX',\n        'Utah': 'UT',\n        'Vermont': 'VT',\n        'Virgin Islands': 'VI',\n        'Virginia': 'VA',\n        'Washington': 'WA',\n        'West Virginia': 'WV',\n        'Wisconsin': 'WI',\n        'Wyoming': 'WY',\n    }\n\n\n    df_noUS = df_orig[df_orig['Country\/Region'] != 'US']\n\n    df = df_orig[df_orig['Country\/Region'] == 'US']\n    df = df[(df['Country\/Region'] == 'US') & (df['Province\/State'].str.contains(\",\"))]\n    df = df.fillna(0)\n    df['3\/10\/20'] = 0\n    df['3\/11\/20'] = 0\n\n    df2 = df_orig[df_orig['Country\/Region'] == 'US']\n    df2 = df2[(df2['Country\/Region'] == 'US') & (~df2['Province\/State'].str.contains(\",\"))]\n    df2 = df2[(df2['Province\/State'] != 'Diamond Princess') & (df2['Province\/State'] != 'Grand Princess')]\n\n\n\n    df2['Province\/State'] = df2['Province\/State'].map(us_state_abbrev)\n    df2 = df2.groupby(['Province\/State', 'Country\/Region']).sum().reset_index()\n\n    df['Province\/State'] = df['Province\/State'].str[-2:]\n    df.replace(to_replace='R ', value='OR', inplace=True) # One of the counties is formatted incorrectly\n    df.replace(to_replace='C.', value='D.C.', inplace=True)\n    df = df.groupby(['Province\/State', 'Country\/Region']).sum().reset_index()\n\n    df3 = df.append(df2)\n    df3 = df3.groupby(['Province\/State', 'Country\/Region']).sum().reset_index()\n\n\n    df_orig = pd.concat([df_noUS, df3], sort=False)\n    df_orig = df_orig.fillna(method='ffill', axis=1)\n    #df_orig = df_orig.fillna(0)\n\n    return df_orig\n\n\n\n#df_confirmed[df_confirmed['Country\/Region'] == 'Republic of Korea'].fillna(0, inplace=True)\ndf_confirmed.loc[df_confirmed['Country\/Region'] == 'Republic of Korea', '3\/11\/20'] = 0\ndf_confirmed.loc[df_confirmed['Country\/Region'] == 'Iran (Islamic Republic of)', '3\/11\/20'] = 0\ndf_confirmed.loc[df_confirmed['Country\/Region'] == 'Mainland China', '3\/11\/20'] = 0\ndf_confirmed.loc[(df_confirmed['Country\/Region'] == 'France') & (df_confirmed['Province\/State'].isnull()), '3\/11\/20'] = 0\n\n\n\ndf_deaths.loc[df_deaths['Country\/Region'] == 'Republic of Korea', '3\/11\/20'] = 0\ndf_deaths.loc[df_deaths['Country\/Region'] == 'Iran (Islamic Republic of)', '3\/11\/20'] = 0\ndf_deaths.loc[df_deaths['Country\/Region'] == 'Mainland China', '3\/11\/20'] = 0\ndf_deaths.loc[(df_deaths['Country\/Region'] == 'France') & (df_deaths['Province\/State'].isnull()), '3\/11\/20'] = 0\n\n\ndf_recovered.loc[df_recovered['Country\/Region'] == 'Republic of Korea', '3\/11\/20'] = 0\ndf_recovered.loc[df_recovered['Country\/Region'] == 'Iran (Islamic Republic of)', '3\/11\/20'] = 0\ndf_recovered.loc[df_recovered['Country\/Region'] == 'Mainland China', '3\/11\/20'] = 0\ndf_recovered.loc[(df_recovered['Country\/Region'] == 'France') & (df_recovered['Province\/State'].isnull()), '3\/11\/20'] = 0\n\n\ndf_confirmed.loc[df_confirmed['Country\/Region'] == 'Italy', '3\/12\/20'] = 15113\ndf_recovered.loc[df_recovered['Country\/Region'] == 'Italy', '3\/12\/20'] = 1258\ndf_deaths.loc[df_deaths['Country\/Region'] == 'Italy', '3\/12\/20'] = 1016\ndf_confirmed.loc[df_confirmed['Province\/State'] == 'United Kingdom', '3\/12\/20'] = 590\ndf_deaths.loc[df_deaths['Province\/State'] == 'United Kingdom', '3\/12\/20'] = 10\ndf_recovered.loc[df_recovered['Province\/State'] == 'United Kingdom', '3\/12\/20'] = 18\n\n\n\ndf_confirmed = fix_USA(df_confirmed)\ndf_deaths = fix_USA(df_deaths)\ndf_recovered = fix_USA(df_recovered)\n","526c3c67":"df_confirmed = df_confirmed.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                 var_name='Date',\n                                 value_name='Confirmed')\n\ndf_deaths = df_deaths.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                           var_name='Date',\n                           value_name='Deaths')\n\ndf_recovered = df_recovered.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                 var_name='Date',\n                                 value_name='Recovered')\n\ndf_all = df_confirmed.copy()\ndf_all['Deaths'] = df_deaths['Deaths']\ndf_all['Recovered'] = df_recovered['Recovered']\ndf_all.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndf_all['Date'] = pd.to_datetime(df_all['Date'])\ndf_all['Country'] = df_all['Country'].replace('Mainland China', 'China')\ndf_all['Country'] = df_all['Country'].replace('Iran (Islamic Republic of)', 'Iran')\ndf_all['Country'] = df_all['Country'].replace('Republic of Korea', 'South Korea')\ndf_all['Country'] = df_all['Country'].replace('Republic of Moldova', 'Moldova')\ndf_all['Country'] = df_all['Country'].replace('Holy See', 'Vatican City')\n\ndf_all = df_all[df_all['Country'] != 'occupied Palestinian territory']\n\ndf_all['Country'] = df_all['Country'].replace('Korea, South', 'South Korea')\n#df_all.groupby('South Korea').sum()","cc1ded65":"df_all.head(n=10)","3567943b":"print(f'Data current as of {df_all.Date.dt.date.max()}.')","8278ae84":"df_all['Country'].unique()","6b4098ea":"df_all['Province\/State'].unique()","8652f2c5":"df_all[df_all['Country'] == 'US']['Province\/State'].unique()","1fb04d5d":"df_diamondprincess = df_all[df_all['Province\/State'] == 'Diamond Princess']\n\ndf_all = df_all[(df_all['Province\/State'] != 'Omaha, NE (From Diamond Princess)') &\n                (df_all['Province\/State'] != 'Grand Princess') &\n                (df_all['Province\/State'] != 'Diamond Princess') &\n                (df_all['Province\/State'] != 'From Diamond Princess') &\n                (df_all['Province\/State'] != 'Travis, CA (From Diamond Princess)') &\n                (df_all['Province\/State'] != 'Lackland, TX (From Diamond Princess)') &\n                (df_all['Province\/State'] != 'Grand Princess Cruise Ship') &       \n                (df_all['Province\/State'] != 'Unassigned Location (From Diamond Princess)')]\n#df_all = df_all[(df_all['Country'] != 'Others')]\n\n# df_usa2 = (df_all[(df_all['Country'] == 'US') &\n#             (df_all['Province\/State'].str.contains(\",\") == True)].index, axis=0, inplace=True)\n# df_all.drop(df_all[(df_all['Country'] == 'US') &\n#                    (df_all['Province\/State'].str.contains(\",\") == False)].index, axis=0, inplace=True)\n\n#df_usa = df_all[(df_all['Country'] == 'US')]\n# df_usa = df_usa[~df_usa['Province\/State'].str.contains(\",\")]\n# df_usa = df_usa[df_usa['Province\/State'].str.contains(\",\")]\n#df_all = df_all[(df_all['Country'] != 'Others')]\n\n\ndf_usa = df_all[(df_all['Country'] == 'US')]\n# df_usa = df_usa[~df_usa['Province\/State'].str.contains(\",\")]\n\n\n\ndf_china = df_all[df_all['Country'] == 'China']\ndf_nochina = df_all[df_all['Country'] != 'China']\ndf_italy = df_all[df_all['Country'] == 'Italy']\ndf_southkorea = df_all[df_all['Country'] == 'South Korea']\ndf_india = df_all[df_all['Country'] == 'India']\ndf_iran = df_all[df_all['Country'] == 'Iran']\ndf_europe = df_all[(df_all['Country'] == 'France') |\n                   (df_all['Country'] == 'Germany') |\n                   (df_all['Country'] == 'Finland') |\n                   (df_all['Country'] == 'Italy') |\n                   (df_all['Country'] == 'UK') |\n                   (df_all['Country'] == 'Sweden') |\n                   (df_all['Country'] == 'Spain') |\n                   (df_all['Country'] == 'Belgium') |\n                   (df_all['Country'] == 'Croatia') |\n                   (df_all['Country'] == 'Switzerland') |\n                   (df_all['Country'] == 'Austria') |\n                   (df_all['Country'] == 'Greece') |\n                   (df_all['Country'] == 'North Macedonia') |\n                   (df_all['Country'] == 'Norway') |\n                   (df_all['Country'] == 'Denmark') |\n                   (df_all['Country'] == 'Estonia') |\n                   (df_all['Country'] == 'Netherlands') |\n                   (df_all['Country'] == 'San Marino') |\n                   (df_all['Country'] == 'Belarus') |\n                   (df_all['Country'] == 'Lithuania') |\n                   (df_all['Country'] == 'Ireland') |\n                   (df_all['Country'] == 'Luxembourg') |\n                   (df_all['Country'] == 'Monaco') |\n                   (df_all['Country'] == 'Czech Republic') |\n                   (df_all['Country'] == 'Portugal') |\n                   (df_all['Country'] == 'Andorra') |\n                   (df_all['Country'] == 'Latvia') |\n                   (df_all['Country'] == 'Ukraine') |\n                   (df_all['Country'] == 'Hungary') |\n                   (df_all['Country'] == 'Gibraltar') |\n                   (df_all['Country'] == 'Liechtenstein') |\n                   (df_all['Country'] == 'Poland') |\n                   (df_all['Country'] == 'Bosnia and Herzegovina') |\n                   (df_all['Country'] == 'Slovenia') |\n                   (df_all['Country'] == 'Serbia') |\n                   (df_all['Country'] == 'Slovakia') |\n                   (df_all['Country'] == 'Bulgaria') |\n                   (df_all['Country'] == 'Malta') |\n                   (df_all['Country'] == 'Republic of Ireland') |\n                   (df_all['Country'] == 'Moldova') |\n                   (df_all['Country'] == 'Vatican City')]","8600c20b":"df = df_all.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf = df.sort_values('Confirmed', axis=0, ascending=False).reset_index(drop=True)\n#df['Country'].replace(to_replace='Others', value='Diamond Princess', inplace=True)\ndf = df[df.Country != 'Others']\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\n\n# df['cCRR [%]'] = df['Recovered'] \/ df['Confirmed'] * 100\n# df['cCRR [%]'] = round(df['cCRR [%]'], 2)\n\n# print(f'cCFR = Deaths \/ Confirmed')\n#print(f'cCRR = Recovered \/ Confirmed')\n\n#df.head(n=20)\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['Active'], cmap='Greys', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='PuRd', axis=None)","7f2bc2bd":"df = df_all.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='PuRd', axis=None)","42fe2a75":"df = df_diamondprincess.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='PuRd', axis=None)","bde3128b":"# fig = px.bar(df_nochina.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='World (-China) - Total Confirmed Cases')\n# fig.show()\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date', 'Country']).sum().reset_index()\ndf = df.replace(1603, 892) # accounting for how John's Hopkins doubled up the counts for 2020-03-10 when they switched to State reporting for the US\nfig = px.bar(df, x='Date', y='Confirmed', title='World (-China) - Total Confirmed Cases', color='Country', color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()\nprint('Note that you can double-click on one of the countries in the legend to only see it on the chart.')\n\nfig = px.bar(df_nochina.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='World (-China) - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.update_layout(showlegend=False)\nfig.show()\n\n# df = df_nochina.copy()\n# df = df.groupby(['Date', 'Country']).sum().reset_index()\n# fig = px.bar(df, x='Date', y='Deaths', title='World (-China) - Total Deaths', color='Country', color_discrete_sequence=px.colors.sequential.RdPu_r)\n# fig.show()\n\nfig = px.bar(df_nochina.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='World (-China) - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\ndf = df_nochina.groupby(['Date']).sum().reset_index()\nfig = px.bar(df, x='Date', y=(df.Confirmed - df.Deaths - df.Recovered), title='World (-China) - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","575b56a5":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_nochina.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"World (-China) - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\n\n# residuals = df['Confirmed'] - func(df['Date'].index, *popt)\n# ss_res = np.sum(residuals**2)\n# ss_tot = np.sum((df['Confirmed']-np.mean(df['Confirmed']))**2)\n# r_squared = 1 - (ss_res \/ ss_tot)\n# print(f'R^2 = {r_squared:.3}')\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","5d424277":"df = df_nochina.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","ff3f0d06":"df = df_usa.copy()\n# df['Province\/State'] = df['Province\/State'].str[-2:]\n# df.replace(to_replace='R ', value='OR', inplace=True) # One of the counties is formatted incorrectly\n# df.replace(to_replace='C.', value='D.C.', inplace=True)\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Province\/State'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n\nfig = px.choropleth(df,\n                    locations='Province\/State',\n                    locationmode='USA-states',\n                    color='Confirmed',\n                    hover_name='Province\/State',\n                    hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                    scope='usa',\n                    title='USA - Total Confirmed Cases',\n                    color_continuous_scale='Burg')\nfig.show()\n\ndf = df_usa.copy()\n# df['Province\/State'] = df['Province\/State'].str[-2:]\n# df.replace(to_replace='R ', value='OR', inplace=True) # One of the counties is formatted incorrectly\n# df.replace(to_replace='C.', value='D.C.', inplace=True)\ndf = df.groupby(['Date', 'Province\/State']).sum().reset_index()\nfig = px.bar(df, x='Date', y='Confirmed', title='USA - Total Confirmed Cases', color='Province\/State', color_discrete_sequence=px.colors.sequential.Plasma)\nfig.show()\n\nfig = px.bar(df, x='Date', y='Deaths', title='USA - Total Deaths', color='Province\/State', color_discrete_sequence=px.colors.sequential.Reds_r)\n#fig.update_layout(showlegend=False)\nfig.show()\n\nfig = px.bar(df.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='USA - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\ndf = df.groupby(['Date']).sum().reset_index()\nfig = px.bar(df, x='Date', y=(df.Confirmed - df.Deaths - df.Recovered), title='USA - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()\n\ndf = df_usa.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Province\/State'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\nfig = px.treemap(df,\n                 path=['Province\/State'],\n                 values=df['Active'],\n                 title='USA - Active Cases per State',\n                 hover_data=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","28ccbc24":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_usa.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"USA - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","d0f4cc53":"df = df_usa.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","6d5c0f4a":"df = df_usa.copy()\n# df['Province\/State'] = df['Province\/State'].str[-2:]\n# df.replace(to_replace='R ', value='OR', inplace=True) # One of the counties is formatted incorrectly\n# df.replace(to_replace='C.', value='D.C.', inplace=True)\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Province\/State'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf = df.sort_values('Confirmed', axis=0, ascending=False).reset_index(drop=True)\n#df['Country'].replace(to_replace='Others', value='Diamond Princess', inplace=True)\n#df = df[df.Country != 'Others']\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\n\n#print(f'cCFR = Deaths \/ Confirmed')\n\n#df.head(n=20)\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['Active'], cmap='Greys', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='PuRd', axis=None)","92a820cf":"fig = px.bar(df_italy.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='Italy - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df_italy.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='Italy - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.show()\n\nfig = px.bar(df_italy.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='Italy - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\nfig = px.bar(df_italy, x='Date', y=(df_italy.Confirmed - df_italy.Deaths - df_italy.Recovered), title='Italy - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","04d27c85":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_italy.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n# df = df.append({'Date':datetime.datetime(2020, 3, 11), 'Confirmed':np.int64(12462)}, ignore_index=True).reset_index()\n\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"Italy - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","66720c7b":"df = df_italy.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","7e5b4fd7":"fig = px.bar(df_iran.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='Iran - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df_iran.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='Iran - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.show()\n\nfig = px.bar(df_iran.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='Iran - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\nfig = px.bar(df_iran, x='Date', y=(df_iran.Confirmed - df_iran.Deaths - df_iran.Recovered), title='Iran - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","fa0cb668":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\ndf = df_iran.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"Iran - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","42595aab":"df = df_iran.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\n#t_d\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","258df4cc":"fig = px.bar(df_southkorea.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='South Korea - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df_southkorea.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='South Korea - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.show()\n\nfig = px.bar(df_southkorea.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='South Korea - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\nfig = px.bar(df_southkorea, x='Date', y=(df_southkorea.Confirmed - df_southkorea.Deaths - df_southkorea.Recovered), title='South Korea - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","1f53de2d":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_southkorea.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n# df = df.append({'Date':datetime.datetime(2020, 3, 11), 'Confirmed':np.int64(7755)}, ignore_index=True).reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index[:43], df['Confirmed'].values[:43], maxfev=1000)\n# print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"South Korea - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')\nprint(f'Shows how much South Korea has decreased their rate of infection growth.')","e4259b16":"df = df_southkorea.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","387ad1a1":"fig = px.bar(df_europe.groupby(['Date', 'Country']).sum().reset_index(), x='Date', y='Confirmed', title='Europe - Total Confirmed Cases', color='Country', color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()\n\n\nfig = px.bar(df_europe.groupby(['Date', 'Country']).sum().reset_index(), x='Date', y='Deaths', title='Europe - Total Deaths', color='Country', color_discrete_sequence=px.colors.sequential.Reds)\nfig.show()\n\nfig = px.bar(df_europe.groupby(['Date', 'Country']).sum().reset_index(), x='Date', y='Recovered', title='Europe - Total Recovered', color='Country', color_discrete_sequence=px.colors.sequential.Viridis)\nfig.show()\n\nfig = px.bar(df_europe, x='Date', y=(df_europe.Confirmed - df_europe.Deaths - df_europe.Recovered), title='Europe - Number of Active Cases', color='Country', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","f3db4070":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_europe.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"Europe - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","24c2f29e":"df = df_europe.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","df309fa0":"fig = px.bar(df_india.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='India - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df_india.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='India - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.show()\n\nfig = px.bar(df_india.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='India - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\nfig = px.bar(df_india, x='Date', y=(df_india.Confirmed - df_india.Deaths - df_india.Recovered), title='India - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","389037cd":"def func(t, a, b):\n    return a*b**(t)\nguess = [1, 20]\n\n\ndf = df_india.copy()\ndf = df.groupby(['Date']).sum().reset_index()\n\npopt, pconv = curve_fit(func, df['Date'].index, df['Confirmed'].values, maxfev=1000)\n#print(popt)\n\ndf['Model'] = func(df['Date'].index, *popt)\n\ntrace1 = go.Scatter(x=df['Date'], y=df['Confirmed'], mode='markers', name='Confirmed')\ntrace2 = go.Scatter(x=df['Date'], y=df['Model'], mode='lines', line={'dash':'dash', 'color':'grey'}, name='Fit')\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data)\nfig.update_layout(title=\"India - Model Fitting\", yaxis_title=\"Confirmed\")\nfig.show()\n\nprint(f'Daily growth rate (model): +{(popt[1] - 1) * 100 : 0.3}%')","b6e4c521":"df = df_india.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\nx = Symbol('x')\nt_d = solve((1 + growth)**x - 2 , x)\nprint(f'Confirmed cases double every: {t_d[0]:0.3} days.')","324fe8ea":"fig = px.bar(df_china.groupby(['Date']).sum().reset_index(), x='Date', y='Confirmed', title='China - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df_china.groupby(['Date']).sum().reset_index(), x='Date', y='Deaths', title='China - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.update_layout(showlegend=False)\nfig.show()\n\nfig = px.bar(df_china.groupby(['Date']).sum().reset_index(), x='Date', y='Recovered', title='China - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\ndf = df_china.groupby(['Date']).sum().reset_index()\nfig = px.bar(df, x='Date', y=(df.Confirmed - df.Deaths - df.Recovered), title='China - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","6131467b":"df = df_china.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","9aac0395":"df = df_china.copy()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Province\/State'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf = df.sort_values('Confirmed', axis=0, ascending=False).reset_index(drop=True)\n#df['Country'].replace(to_replace='Others', value='Diamond Princess', inplace=True)\n#df = df[df.Country != 'Others']\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\ndf['cCFR [%]'] = df['Deaths'] \/ df['Confirmed'] * 100\ndf['cCFR [%]'] = round(df['cCFR [%]'], 2)\n\n#print(f'cCFR = Deaths \/ Confirmed')\n\n#df.head(n=20)\ndf.style.background_gradient(subset=['Confirmed'], cmap='Blues', axis=None)\\\n        .background_gradient(subset=['Deaths'], cmap='Reds', axis=None)\\\n        .background_gradient(subset=['Recovered'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['Active'], cmap='Greys', axis=None)\\\n        .background_gradient(subset=['cCFR [%]'], cmap='PuRd', axis=None)","97999350":"df = df_all.copy()\n# df[(df['Country'] == 'US') & (df['Province\/State'].str.contains(\",\"))].fillna(0)\n# df = df.groupby(['Date', 'Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n# df = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index()\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n\nfig = px.choropleth(df,\n                    locations='Country',\n                    locationmode='country names',\n                    color='Confirmed',\n                    hover_name='Country',\n                    hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                    #color_continuous_scale='Burg')\n                    color_continuous_scale=px.colors.sequential.thermal_r)\nfig.show()\n\ndf = df_all.copy()\n\nfig = px.bar(df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index(), x='Date', y='Confirmed', title='World - Total Confirmed Cases')\nfig.show()\n\nfig = px.bar(df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index(), x='Date', y='Deaths', title='World - Total Deaths', color_discrete_sequence=px.colors.diverging.Picnic_r)\nfig.update_layout(showlegend=False)\nfig.show()\n\nfig = px.bar(df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index(), x='Date', y='Recovered', title='World - Total Recovered', color_discrete_sequence=px.colors.diverging.Tropic)\nfig.show()\n\ndf = df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nfig = px.bar(df, x='Date', y=(df.Confirmed - df.Deaths - df.Recovered), title='World - Number of Active Cases', color_discrete_sequence=px.colors.sequential.thermal)\nfig.update_layout(yaxis_title='Active Cases')\nfig.show()","3e236c1a":"df = df_all.copy()\n\ndf = df[df['Date'] == max(df['Date'])].reset_index()\ndf = df.groupby(['Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\n\nfig = px.treemap(df,\n                 path=['Country'],\n                 values=df['Active'],\n                 title='World - Active Cases per Country',\n                 hover_data=['Confirmed', 'Deaths', 'Recovered', 'Active'],\n                 color_discrete_sequence=px.colors.qualitative.Prism)\nfig.show()","e2183755":"df = df_all.copy()\ndf = df.groupby(['Date']).sum().reset_index()\ngrowth = np.mean(df.Confirmed.diff()[-5:] \/ df.Confirmed[-5:])\nprint(f'Average daily growth rate of confirmed cases over the last 5 days: +{growth * 100 : 0.3}%')\n\n# x = Symbol('x')\n# t_d = solve((1 + growth)**x - 2 , x)\n# print(f'Confirmed cases double every: {t_d[0]:0.3} days.')","370a8000":"## Global - Case Fatality Rate for Confirmed Cases","a531cb5e":"Note that you can double-click on one of the countries in the legend to only see it on the chart.","de0ed2ae":"## Data Import and Preparation","d0b450d4":"# Europe","9d63fdb9":"## Case Fatality Rate for Confirmed Cases","7c13a3da":"# South Korea","b1976e00":"### Let's separate the data into different regions","93d56a4a":"# USA","db5e774c":"# China","4b0c641e":"Obviously these aren't meant to represent the true CFR. South Korea's 0.6% seems like a pretty solid lower bound for now, though, given the amount of testing they've done and that very few of their cases are resolved.\n\ncCFR = Deaths \/ Confirmed","1eeefe84":"# India","748d174b":"# World (-China)","fbe600a9":"#### Numbers declining in China... for now!","d9917487":"# Table: Case Fatality Rates","c46f67b5":"I figured I'd put together some visualizations for the COVID-19 pandemic, specifically for the things I wanted to track (especially growth rate and active cases per region).","c47432cc":"# Iran","96fa4732":"# World","7546b48f":"## Diamond Princess Cruise Ship - Case Fatality Rate for Confirmed Cases","d16fcda2":"Note that you can double-click on one of the states in the legend to only see it on the chart.","9b1b75ca":"# Italy"}}