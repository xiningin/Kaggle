{"cell_type":{"bfbbc3a2":"code","f2b5cd0f":"code","093f52fb":"code","f57f3a25":"code","78ffe672":"code","6f12b122":"code","44b8de82":"code","02612d93":"code","be450481":"code","f54f1a06":"code","1fd8508d":"code","10f6fdb6":"code","8f18da57":"code","11441cd6":"code","1a4aac79":"code","fcb7b506":"code","e50f8f89":"code","f1725246":"code","82b68e85":"code","9909ba00":"code","b9a472cf":"code","bf9cf7bb":"code","f3f5ba22":"code","0ffc195e":"code","65f843f2":"code","2be20177":"code","baed0686":"code","2f551778":"code","08cc1c0d":"code","faf07c20":"code","d468e13e":"code","37da5694":"code","affff1c0":"code","133f251f":"code","18cf6587":"code","3032deb3":"code","34f2f60b":"code","b1a27142":"code","7f29a305":"code","ed2ce789":"code","c044afd2":"code","155779f2":"code","41dde555":"code","94d4d25b":"code","117fdb5c":"code","32f49820":"code","d1c99c79":"code","e273307e":"code","302f7efa":"code","1b070017":"code","6a7d3ad5":"code","14f2e967":"code","55a7433f":"code","a1a03f49":"code","9122e341":"code","4af13a66":"code","ff9c25e7":"code","608fb41c":"markdown","f6faaf53":"markdown","eb489652":"markdown","06ca60e5":"markdown","469763e0":"markdown","2d0956cb":"markdown","e6b21de2":"markdown","7f3112fa":"markdown","459e4d78":"markdown","6511e5f2":"markdown","ca2b56c2":"markdown","a6fae05f":"markdown","14055cc9":"markdown","8f8f666f":"markdown","befe4388":"markdown","dc44219e":"markdown","d7608c3b":"markdown","89275fde":"markdown","5e4036d8":"markdown","5046fff9":"markdown","70f0a0ad":"markdown","3bb3819b":"markdown"},"source":{"bfbbc3a2":"import pandas as pd\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport os\nprint(os.listdir(\"..\/input\"))","f2b5cd0f":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","093f52fb":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","f57f3a25":"# Combine train and test data\nntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.Survived.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['Survived'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","78ffe672":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:50]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})","6f12b122":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","44b8de82":"all_data['Cabin'] = all_data['Cabin'].fillna(\"Undefined\")","02612d93":"def get_cabin_num(cabin):\n    if cabin == \"Undefined\":\n        return np.nan\n    else:\n        cabins = cabin.split(\" \")\n        count = len(cabins)\n        return count\nall_data['CabinCount'] = all_data['Cabin'].apply(get_cabin_num)","be450481":"all_data[\"CabinCount\"].max()","f54f1a06":"def split_cabin(cabin, num):\n    if cabin == \"Undefined\":\n        return \"Undefined\"\n    else:\n        cabins = cabin.split(\" \")\n        if len(cabins) >= num:\n            return cabins[num - 1]\n        else:\n            return \"Undefined\"\nall_data['Cabin1'] = all_data['Cabin'].apply(split_cabin, num=1)\nall_data['Cabin2'] = all_data['Cabin'].apply(split_cabin, num=2)\nall_data['Cabin3'] = all_data['Cabin'].apply(split_cabin, num=3)\nall_data['Cabin4'] = all_data['Cabin'].apply(split_cabin, num=4)","1fd8508d":"def get_cabin_type(cabin):\n    return cabin[0]\nall_data['CabinType1'] = all_data['Cabin1'].apply(get_cabin_type)\nall_data['CabinType2'] = all_data['Cabin2'].apply(get_cabin_type)\nall_data['CabinType3'] = all_data['Cabin3'].apply(get_cabin_type)\nall_data['CabinType4'] = all_data['Cabin4'].apply(get_cabin_type)","10f6fdb6":"# CabinType\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType1',hue='Survived',data=train_ch)","8f18da57":"# CabinType2\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinType2').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('CabinType2',hue='Survived',data=train_ch)","11441cd6":"def get_cabin_num(cabin):\n    if cabin == \"Undefined\":\n        return \"Undefined\"\n    else:\n        return \"c_\" + cabin[1:]\nall_data['CabinNum1'] = all_data['Cabin1'].apply(get_cabin_num)\nall_data['CabinNum2'] = all_data['Cabin2'].apply(get_cabin_num)\nall_data['CabinNum3'] = all_data['Cabin3'].apply(get_cabin_num)\nall_data['CabinNum4'] = all_data['Cabin4'].apply(get_cabin_num)","1a4aac79":"# CabinNum1\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('CabinNum1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))","fcb7b506":"all_data = all_data.drop('Cabin', axis=1)\nall_data = all_data.drop('CabinCount', axis=1)\nall_data = all_data.drop('Cabin1', axis=1)\nall_data = all_data.drop('Cabin2', axis=1)\nall_data = all_data.drop('Cabin3', axis=1)\nall_data = all_data.drop('Cabin4', axis=1)\n# all_data = all_data.drop('CabinType1', axis=1)\nall_data = all_data.drop('CabinType2', axis=1)\nall_data = all_data.drop('CabinType3', axis=1)\nall_data = all_data.drop('CabinType4', axis=1)\nall_data = all_data.drop('CabinNum1', axis=1)\nall_data = all_data.drop('CabinNum2', axis=1)\nall_data = all_data.drop('CabinNum3', axis=1)\nall_data = all_data.drop('CabinNum4', axis=1)","e50f8f89":"def get_type_from_name(name):\n    array_name = name.split(\",\")\n    family_name = array_name[0]\n    name_with_type = array_name[1].split(\".\")\n    type = name_with_type[0].replace(\" \",\"\")\n    return type\nall_data['Type'] = all_data['Name'].apply(get_type_from_name)","f1725246":"all_data['Type'].unique()","82b68e85":"# Miss,Master,Mr,Mrs,Ms\u304f\u3089\u3044\u3057\u304b\u3044\u3089\u306a\u3044\u3002\u3042\u3068\u306fOther\u306b\u3059\u308b\nall_data['Type'] = all_data['Type'].replace('Mlle', 'Miss')\nall_data['Type'] = all_data['Type'].replace('Ms', 'Miss')\nall_data['Type'] = all_data['Type'].replace('Mme', 'Mrs')\nall_data['Type'] = [val if val in ['Mr', 'Mrs', 'Miss', 'Ms', 'Master'] else 'Others' for val in all_data['Type']]","9909ba00":"# Type\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Type').sum()\nprint(grouped_ch)\nsns.countplot('Type',hue='Survived',data=train_ch)","b9a472cf":"all_data[\"Age\"] = all_data.groupby([\"Type\", \"Pclass\"])[\"Age\"].transform(\n    lambda x: x.fillna(x.median()))","bf9cf7bb":"all_data[\"Embarked\"] = all_data.groupby(\"Pclass\")[\"Embarked\"].transform(\n    lambda x: x.fillna(x.mode()))","f3f5ba22":"same_ticket_count_gp = all_data.groupby('Ticket', as_index=False).size().reset_index()\nsame_ticket_count_gp = same_ticket_count_gp.rename(columns={0: 'TicketCount'})\nsame_ticket_count_gp.head()\nall_data = pd.merge(all_data, same_ticket_count_gp, on='Ticket', how='left')\nall_data['Fare'] = all_data['Fare'] \/ all_data['TicketCount']\nall_data.head()","0ffc195e":"all_data = all_data.drop('TicketCount', axis=1)","65f843f2":"all_data[\"Fare\"] = all_data.groupby(\"Pclass\")[\"Fare\"].transform(\n    lambda x: x.fillna(x.median()))","2be20177":"all_data['FamilyNum'] = all_data['SibSp'] + all_data['Parch'] + 1","baed0686":"# FamilyNum\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('FamilyNum').sum()\nprint(grouped_ch)\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('FamilyNum',hue='Survived',data=train_ch)","2f551778":"all_data['Is_Alone'] = all_data['FamilyNum'] == 1","08cc1c0d":"# Is_Alone\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Is_Alone').sum()\nprint(grouped_ch)\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Is_Alone',hue='Survived',data=train_ch)","faf07c20":"def get_ticket_sign_1(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 1:\n        sign = array_name[0]\n        array_sign = sign.split(\"\/\")\n        if len(array_sign) > 1:\n            return array_sign[0]\n        else:\n            return array_sign[0]\n    else:\n        return \"Undefined\"\n    \ndef get_ticket_sign_2(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 1:\n        sign = array_name[0]\n        array_sign = sign.split(\"\/\")\n        if len(array_sign) > 1:\n            return array_sign[1]\n        else:\n            return \"Undefined\"\n    else:\n        return \"Undefined\"\n\ndef get_ticket_no(ticket):\n    array_name = ticket.split(\" \")\n    if len(array_name) > 2:\n        return array_name[2]\n    elif len(array_name) == 2:\n        return array_name[1]\n    else:\n        return array_name[0]\n    \nall_data['Ticket_Sign1'] = all_data['Ticket'].apply(get_ticket_sign_1)\nall_data['Ticket_Sign2'] = all_data['Ticket'].apply(get_ticket_sign_2)\nall_data['Ticket_No'] = all_data['Ticket'].apply(get_ticket_no)","d468e13e":"print(all_data['Ticket_Sign1'].unique())\nprint(all_data['Ticket_Sign2'].unique())\nprint(all_data['Ticket_No'].unique())","37da5694":"all_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].replace('STON', 'SOTON')\nall_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].str.replace('.', '')\nprint(all_data['Ticket_Sign1'].unique())","affff1c0":"# Ticket_Sign1\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_Sign1').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Ticket_Sign1',hue='Survived',data=train_ch)","133f251f":"# Ticket_Sign2\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_Sign2').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\nsns.countplot('Ticket_Sign2',hue='Survived',data=train_ch)","18cf6587":"# Ticket_No\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('Ticket_No').sum()\nprint(grouped_ch.sort_values(\"Survived\", ascending=False).head(30))\n# plt.bar(grouped_ch.index, grouped_ch.Survived.values)\n# sns.countplot('Ticket_No',hue='Survived',data=train_ch)","3032deb3":"all_data = all_data.drop('Ticket_No', axis=1)\nall_data = all_data.drop('Ticket_Sign2', axis=1)\nall_data = all_data.drop(\"Ticket\", axis=1)","34f2f60b":"all_data['FareBin'] = pd.cut(all_data.Fare, 10, labels=False)\nall_data['AgeBin'] = pd.cut(all_data.Age, 10, labels=False)","b1a27142":"# FareBin\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('FareBin').sum()\nprint(grouped_ch)\nsns.countplot('FareBin',hue='Survived',data=train_ch)","7f29a305":"# AgeBin\u5225\u306e\u751f\u5b58\u8005\u6570\u3092\u898b\u3066\u307f\u308b\ntrain_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\ngrouped_ch = train_ch.groupby('AgeBin').sum()\nprint(grouped_ch)\nsns.countplot('AgeBin',hue='Survived',data=train_ch)","ed2ce789":"all_data = all_data.drop(['Fare', 'Age'], axis=1)","c044afd2":"all_data.dtypes","155779f2":"all_data['Pclass'] = ['c_' + str(x) for x in all_data.Pclass]","41dde555":"# \u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u70ba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.preprocessing import LabelEncoder\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u304cobject\u306e\u5217\u306e\u5024\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\nlbl = LabelEncoder()\nlbl.fit(list(all_data['CabinType1'].values))\nall_data['CabinType1'] = lbl.transform(list(all_data['CabinType1'].values))\nlbl.fit(list(all_data['Ticket_Sign1'].values))\nall_data['Ticket_Sign1'] = lbl.transform(list(all_data['Ticket_Sign1'].values))","94d4d25b":"all_data_PassengerId = all_data['PassengerId']\nall_data_Name = all_data['Name']\nall_data = all_data.drop('PassengerId', axis=1)\nall_data = all_data.drop('Name', axis=1)","117fdb5c":"all_data = pd.get_dummies(all_data)","32f49820":"train_ch = all_data[:ntrain]\ntrain_ch['Survived'] = y_train\n# Find correlations with the target and sort\ncorrelations = train_ch.corr()['Survived'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(30))","d1c99c79":"all_data = all_data.drop('FamilyNum', axis=1)","e273307e":"all_data.head()","302f7efa":"X_train = all_data.iloc[:train.shape[0],:]\nX_test = all_data.iloc[train.shape[0]:,:]\nX_test_PassengerId = all_data_PassengerId.iloc[train.shape[0]:]","1b070017":"import lightgbm as lgb\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold, train_test_split","6a7d3ad5":"X = X_train\nY = y_train\nX_train, X_val, y_train, y_val = train_test_split(\n    X, Y, test_size=0.3, random_state=0\n)","14f2e967":"lgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train)","55a7433f":"# LightGBM parameters\nparams = {\n    'boosting_type': 'gbdt',\n    'num_boost_round': 100,\n    'objective': 'binary',\n    'eval_metric': 'logloss',\n    'max_depth': 8,\n    'learning_rate': 0.003,\n    'num_iteration':5000,\n    'feature_fraction': 0.50,\n    'bagging_fraction': 0.80,\n    'early_stopping_rounds': 1000,\n    'bagging_freq': 30,\n    'verbose': 0,\n    'subsample': 0.8\n}\n\n# train\ngbm = lgb.train(params,\n                   lgb_train,\n                   valid_sets=lgb_eval)","a1a03f49":"y_pred_val = gbm.predict(X_val, num_iteration=gbm.best_iteration)\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nbest_threadhold = 0\nbest_accuracy = 0\nfor i in range(1, 100, 1):\n    i = i \/ 100\n    print(\"thredhold:%f\" %(i))\n    \n    y_pred_val_check = [1  if val >= i else 0 for val in y_pred_val]\n    #Confusion matrix\n    cm = confusion_matrix(y_val, y_pred_val_check)\n    print(cm)\n\n    #Accuracy\n    from sklearn.metrics import accuracy_score\n    accuracy=accuracy_score(y_pred_val_check,y_val)\n    print(accuracy)\n    \n    if accuracy > best_accuracy:\n        best_accuracy = accuracy\n        best_threadhold = i\n\nprint(\"best threadhold %f\" %(best_threadhold))\nprint(\"best accuracy %f\" %(best_accuracy))","9122e341":"y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)\ny_pred","4af13a66":"# result_mean = (LassoMd.predict(X_test.values) + ENetMd.predict(X_test.values) + KRRMd.predict(X_test.values) + GBoostMd.predict(X_test.values)  + XGBMd.predict(X_test.values)  + LGBMd.predict(X_test.values) ) \/ 6\n# finalMd = [1  if val > 0.5 else 0 for val in result_mean]\n# finalMd\ny_test_pred = [1  if val >= best_threadhold else 0 for val in y_pred]\ny_test_pred","ff9c25e7":"submission = pd.DataFrame({\n    \"PassengerId\": X_test_PassengerId,\n    \"Survived\": y_test_pred\n})\nsubmission.to_csv('submission.csv', index=False)","608fb41c":"# Dummy Encoding","f6faaf53":"Ticket_No,Ticket_Sign2 doesn't seem to be feature.","eb489652":"# Change Datatype","06ca60e5":"## Cabin","469763e0":"CabinNum1 doesn't seem to be feature.","2d0956cb":"# LabelEncoding","e6b21de2":"## Check Columns which have null","7f3112fa":"### Max Cabin count is 4. So the column is splited into 4","459e4d78":"# Create Feature","6511e5f2":"## Ticket Sign","ca2b56c2":"## Is Alone","a6fae05f":"## Embarked","14055cc9":"# Fare","8f8f666f":"# Check Corelation","befe4388":"## FareBin, AgeBin","dc44219e":"## Age","d7608c3b":"The number of passengers who have Cabin3, Cabin4 is few. So Ignore them.","89275fde":"# EDA","5e4036d8":"### Check Survived Count in each Cabin Type","5046fff9":"### Check survived numbers in each CabinNum","70f0a0ad":"## Some passengers fare is too expensive. It seems like someone buy tickets for others at one time.","3bb3819b":"# Create Model"}}