{"cell_type":{"39bcc103":"code","ef6aefc8":"code","ee66e459":"code","c10da31a":"code","6a321004":"code","2723d02e":"code","e5edd277":"code","f988a72e":"markdown","93173868":"markdown","ca0fa012":"markdown","e4c72976":"markdown","f834c820":"markdown","c6cc8a1f":"markdown","6dee87a8":"markdown","d06555e2":"markdown","2d3f2591":"markdown","7516670d":"markdown","833ea765":"markdown"},"source":{"39bcc103":"import numpy as np\nimport os\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import make_moons\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.neighbors import KNeighborsClassifier","ef6aefc8":"SEED = 42\nSAMPLE_NUM = 1000\nNOISE = 0.05\nEPS1 = 0.05\nEPS2 = 0.02\nMIN_SAMPLES = 5\n\nnp.random.seed(SEED)\n\nROOT_DIR = \".\"\nFOLDER_NAME = \"unsupervised_learning\"\nIMAGES_PATH = os.path.join(ROOT_DIR, \"images\", FOLDER_NAME)\nos.makedirs(IMAGES_PATH, exist_ok=True)\n\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)","ee66e459":"def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)\n    \ndef showDBSCANData(eps):\n    dbscan = DBSCAN(eps=eps, min_samples=MIN_SAMPLES)\n    dbscan.fit(X)\n    print(\"[1.unique labels]\")\n    print(\"len = \",len(np.unique(dbscan.labels_)))\n    print(\"label = \",np.unique(dbscan.labels_))\n    \n    print(\"\")\n    print(\"[2.core sample index]\")\n    print(\"len = \",len(dbscan.core_sample_indices_))\n    print(\"indices = \",dbscan.core_sample_indices_[:3])\n    \n    print(\"\")\n    print(\"[3.dbscan components]\")\n    print(\"len = \",len(dbscan.components_))\n    print(\"components = \")\n    print(dbscan.components_[:3])\n    \n    return dbscan\n    \n    \ndef plot_dbscan(dbscan, X, size, show_xlabels=True, show_ylabels=True):\n    core_mask = np.zeros_like(dbscan.labels_, dtype=bool)\n    core_mask[dbscan.core_sample_indices_] = True\n    anomalies_mask = dbscan.labels_ == -1\n    non_core_mask = ~(core_mask | anomalies_mask)\n\n    cores = dbscan.components_\n    anomalies = X[anomalies_mask]\n    non_cores = X[non_core_mask]\n    \n    plt.scatter(cores[:, 0], cores[:, 1],\n                c=dbscan.labels_[core_mask], marker='o', s=size, cmap=\"Paired\")\n    plt.scatter(cores[:, 0], cores[:, 1], marker='*', s=20, c=dbscan.labels_[core_mask])\n    plt.scatter(anomalies[:, 0], anomalies[:, 1],\n                c=\"r\", marker=\"x\", s=100)\n    plt.scatter(non_cores[:, 0], non_cores[:, 1], c=dbscan.labels_[non_core_mask], marker=\".\")\n    if show_xlabels:\n        plt.xlabel(\"$x_1$\", fontsize=14)\n    else:\n        plt.tick_params(labelbottom=False)\n    if show_ylabels:\n        plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n    else:\n        plt.tick_params(labelleft=False)\n    plt.title(\"eps={:.2f}, min_samples={}\".format(dbscan.eps, dbscan.min_samples), fontsize=14)","c10da31a":"X, y = make_moons(n_samples=SAMPLE_NUM, noise=NOISE, random_state=SEED)\nprint(X.shape)","6a321004":"dbscan = showDBSCANData(EPS1)","2723d02e":"dbscan2 = showDBSCANData(EPS2)","e5edd277":"plt.figure(figsize=(9, 3.2))\n\nplt.subplot(121)\nplot_dbscan(dbscan, X, size=100)\n\nplt.subplot(122)\nplot_dbscan(dbscan2, X, size=600, show_ylabels=False)\n\nsave_fig(\"dbscan_plot\")\nplt.show()","f988a72e":"# make data","93173868":"Perform DBSCAN clustering from vector array or distance matrix.\n\nDBSCAN - Density-Based Spatial Clustering of Applications with Noise. Finds core samples of high density and expands clusters from them. **Good for data which contains clusters of similar density**.","ca0fa012":"**label count** : 17\n\n**component count** : 34","e4c72976":"## eps == 0.05","f834c820":"# DB SCAN Plot \n## (eps = 0.05) vs (eps = 0.02)","c6cc8a1f":"# common functions","6dee87a8":"# global variables","d06555e2":"# DB SCAN","2d3f2591":"## eps == 0.02","7516670d":"**label count** : 8\n\n**component count** : 808","833ea765":"## eps\n\ntype : float\n\ndefault=0.5\n\n**The maximum distance between two samples** for one to be considered as in the neighborhood of the other. \n\nThis is not a maximum bound on the distances of points within a cluster. \n\nThis is the most important DBSCAN parameter to choose appropriately for your data set and distance function."}}