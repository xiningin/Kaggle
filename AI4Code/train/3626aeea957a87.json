{"cell_type":{"eedddee1":"code","40f5d794":"code","1dd1cfe6":"code","428d68f7":"code","b31b36ed":"code","1a218431":"code","d72301fd":"code","1c154cd7":"code","92fc7fe6":"code","63747aa5":"code","284e4bc0":"code","9153bbbe":"code","6630c194":"code","71635062":"code","096184ed":"code","9b886f9a":"code","230f17ef":"code","26c55162":"code","67812d38":"code","89e403ae":"code","78261442":"code","140c4bf6":"code","7367602a":"code","e6368d20":"code","7b9c6197":"code","0ea52942":"code","771ce7d6":"code","1856f263":"code","306ce60d":"code","da7e8326":"code","851d055f":"code","c6c4cca4":"code","dc93da30":"code","4a5e92f4":"code","73c887b2":"code","d179a82a":"code","e6f84eeb":"code","a211a062":"code","21487c60":"code","cd163538":"code","5772abf9":"code","4bb6b7e9":"code","634f4ef4":"code","3cd5378d":"code","86ac7936":"code","8768022d":"code","a1125208":"code","657a05a6":"code","86beab0e":"code","7ac40158":"markdown","e929f419":"markdown","0f91ef5e":"markdown","39794b24":"markdown","e4550f74":"markdown","965dce02":"markdown","fc73f8a7":"markdown","34c38a64":"markdown","30fd1543":"markdown","5c94720f":"markdown","966ff96b":"markdown","5fd7c9be":"markdown","94a896f7":"markdown","72ea821a":"markdown","a8520c59":"markdown","86edd54c":"markdown","54a9dcc9":"markdown","43f664dc":"markdown","a3eaddd4":"markdown","492e0821":"markdown","da0b3771":"markdown","1fcbf2ba":"markdown","e131c6c6":"markdown","86c27306":"markdown","0ea42e23":"markdown","8360eaec":"markdown","bb2eda8e":"markdown","f7cdbf15":"markdown","300f2fa9":"markdown","512db665":"markdown","c4e177c5":"markdown","bad67606":"markdown","620e3f89":"markdown","e2b9a79b":"markdown","bda01ef1":"markdown","c05fc6b2":"markdown","8dcc9e77":"markdown","5e76c98e":"markdown","adc42fe9":"markdown","34fee1d8":"markdown","5c4ec300":"markdown","3c584224":"markdown","49a0dad8":"markdown","e534fd70":"markdown","f08f5719":"markdown","57c63a36":"markdown","fadea78a":"markdown"},"source":{"eedddee1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","40f5d794":"\"\"\"\u5bfc\u5165\u57fa\u672c\u5e93\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1dd1cfe6":"\"\"\"\u5bfc\u5165\u6570\u636e\"\"\"\nchurn_raw = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","428d68f7":"\"\"\"\u67e5\u770b\u6570\u636e\u5c5e\u6027\"\"\"\nchurn_raw.info()  # TotalCharges \u542b\u6709\u7f3a\u5931\u503c","b31b36ed":"churn_raw.shape","1a218431":"\"\"\" \u7edf\u8ba1\u6bcf\u4e2a\u7279\u5f81\u6709\u591a\u5c11\u4e2a\u7c7b\u522b \"\"\"\nfor i,name in enumerate(churn_raw.columns):\n    \n    name_sum = churn_raw[name].value_counts().shape[0] \n    print(\"{}\u3001{}      \u7279\u5f81\u7c7b\u522b\u4e2a\u6570\u662f\uff1a{}\".format(i + 1, name, name_sum))","d72301fd":"\"\"\" \u6570\u636e\u7edf\u8ba1 \"\"\"\nchurn_raw.describe()","1c154cd7":"\"\"\"\u5220\u9664\u5bf9\u5206\u6790\u65e0\u5173\u7684 \u7528\u6237ID\"\"\"\nchurn_raw = churn_raw.drop('customerID', axis=1)","92fc7fe6":"\"\"\"\u67e5\u627e TotalCharges \u4e2d\u7684\u5f02\u5e38\u6570\u636e:\u53d1\u73b0\u5f02\u5e38\u503c\u4e3a\u7a7a\u683c,\u7f3a\u5931\u6837\u672c\u5360\u6bd4\u4e3a0.16%, \u5220\u9664\u542b\u6709\u7a7a\u503c\u7684\u6837\u672c\"\"\"\nchurn_raw['TotalCharges'] = churn_raw['TotalCharges'].replace(' ', np.nan).astype('float64')\nchurn_raw = churn_raw.dropna(how='any', axis=0)","63747aa5":"\"\"\"\u518d\u6b21\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\"\"\"\nchurn_raw.describe()","284e4bc0":"replace_cols = ['gender', 'Partner', 'Dependents', 'OnlineSecurity', 'PhoneService', 'MultipleLines', 'OnlineBackup', 'DeviceProtection',\n                'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling','Churn']\nfor i in replace_cols:\n    churn_raw[i] = churn_raw[i].replace({'No internet service': 0})\n    churn_raw[i] = churn_raw[i].replace({'No phone service': 0})\n\n    churn_raw[i] = churn_raw[i].replace({'No': 0})\n    churn_raw[i] = churn_raw[i].replace({'Yes': 1})\n\nchurn_raw['gender'] = churn_raw['gender'].replace({'Female': 1, 'Male': 0})","9153bbbe":"# \u5c06\u8981\u8fdb\u884cget_dummies\u7684\u6570\u636e\u4fdd\u5b58\u4e00\u4efd\nchurn_mulcats = churn_raw[['InternetService','Contract','PaymentMethod']]\n# \u5bf9\u591a\u79cd\u5206\u7c7b\u60c5\u51b5\u7684\u5206\u7c7b\u7279\u5f81\u8fdb\u884c one-hot\nchurn = pd.get_dummies(churn_raw)","6630c194":"\"\"\"\u6839\u636e tenure \u7684\u5206\u5e03\u60c5\u51b5, \u4ee512\u4e2a\u6708\u4e3a\u4e00\u6bb5,\u5c06\u5ba2\u6237\u5206\u7bb1\u5206\u6876\"\"\"\n\nbins = [0, 12, 24, 36, 48, 60, 100]  \nlabels = ['one_year', 'two_years','three_years','four_years','five_years','over_5_years']\n\n# \u6309\u7167\u7ed9\u5b9a\u533a\u95f4 \u4f7f\u7528 pd.cut \u5c06\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\nchurn['tenure_label'] = pd.cut(churn['tenure'], bins=bins, labels=labels)","71635062":"\"\"\"\u518d\u6b21\u786e\u8ba4\u6ca1\u6709\u7f3a\u5931\u503c\"\"\"\nchurn.isna().any().sum()\nchurn.shape","096184ed":"churn.Churn.value_counts()","9b886f9a":"churn_rate = churn.Churn.value_counts(1)\nlabels = ['Churn: No','Churn: Yes']\ncolors = ['c', 'r']\nplt.pie(churn_rate, labels=labels, colors=colors, autopct='%3.1f%%')","230f17ef":"corrmat=churn.corr()\nf,ax=plt.subplots(figsize=(20,20))\n\n# cmap='RdBu' \u8bbe\u7f6e\u989c\u8272\n# \u8bbe\u7f6ecenter\u6570\u636e\u65f6\uff0c\u5982\u679c\u6709\u6570\u636e\u6ea2\u51fa\uff0c\u5219\u624b\u52a8\u8bbe\u7f6e\u7684vmax\u3001vmin\u4f1a\u81ea\u52a8\u6539\u53d8 vmax=1\nsns.heatmap(corrmat,cmap='RdBu',square=True)\n\n# \u8bbe\u7f6e\u5750\u6807\u8f74\u6807\u7b7e\u5b57\u4f53\u5927\u5c0f\nax.tick_params(labelsize=18)\nplt.title('Important Variables correlation map',fontsize=18)","26c55162":"# \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u7279\u5f81\u548c\u76ee\u6807\uff08\u6d41\u5931\uff09\u7684\u76f8\u5173\u7cfb\u6570\uff0c\u6392\u5e8f\u753b\u56fe\uff0c\u8bd5\u56fe\u4ece\u7279\u5f81\u76f8\u5173\u6027\u8fd9\u4e2a\u7ef4\u5ea6\u627e\u5230\u91cd\u8981\u7279\u5f81\nchurn_corr = churn.corr()[['Churn']].sort_values(by='Churn').drop(['Churn']).reset_index()\nchurn_corr= churn_corr.rename(columns={'index':'col_labels','Churn':'corr_values'})\n\nfig,ax=plt.subplots(figsize=(12,12))\nind = np.arange(churn_corr.shape[0])\nrects=ax.barh(ind,churn_corr.corr_values.values,color='c', height=0.4)\n\nax.set_yticks(ind)  # y \u8f74\u523b\u5ea6\nax.set_yticklabels(churn_corr.col_labels.values,rotation='horizontal',fontsize=12)  # y \u8f74\u7684\u6807\u7b7e\nax.set_xlabel('Correlation coefficient',fontsize=12)\nax.set_title('Correlation coefficient of the variables',fontsize=12)\nplt.grid(linestyle='--', alpha=0.5)","67812d38":"# \u8ba2\u8d2d\u7684\u670d\u52a1\norder_info = ['PhoneService', 'MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n              'TechSupport', 'StreamingTV', 'StreamingMovies', 'InternetService_DSL',\n              'InternetService_Fiber optic', 'InternetService_No']\n\n# \u5e10\u6237\u4fe1\u606f\naccount_info = ['tenure', 'PaperlessBilling', 'MonthlyCharges', 'TotalCharges', 'Contract_Month-to-month',\n                'Contract_One year', 'Contract_Two year', 'PaymentMethod_Bank transfer (automatic)',\n                'PaymentMethod_Credit card (automatic)', 'PaymentMethod_Electronic check',\n                'PaymentMethod_Mailed check']\n\n# \u4e2a\u4eba\u4fe1\u606f\nper_info = ['gender', 'SeniorCitizen', 'Partner', 'Dependents']\n\nprint('order_info \u5b57\u6bb5\u4e2a\u6570:', len(order_info))\nprint('account_info \u5b57\u6bb5\u4e2a\u6570:', len(account_info))\nprint('per_info \u5b57\u6bb5\u4e2a\u6570:', len(per_info))","89e403ae":"for i, name in enumerate(order_info):\n    sns.countplot(data=churn, y=name, hue='Churn')\n    plt.tick_params(labelsize=14)\n    plt.xlabel('count', size=14)\n    plt.ylabel(name, size=14)  # \u611f\u89c9\u8fd9\u65b9\u6cd5\u597d\u7b28,sns\u5e94\u8be5\u80fd\u4e00\u5e76\u8bbe\u7f6e\u5427,\u600e\u6837\u81ea\u5b9a\u4e49\u56fe\u4f8b\u663e\u793a\u5185\u5bb9\u5462???\n\n    length = churn.groupby(name)['Churn'].value_counts().shape[0]\n    \n    for p in range(length):\n#         churn_num = \n        rate = churn.groupby(name)['Churn'].value_counts(1)[p]\n        print(rate)\n\n#         plt.text(p,100, str(rate),fontsize=12)  # \u788d\u4e8e\u6280\u672f\u4e0a\u7684\u96be\u9898,\u8fd8\u6ca1\u6807\u5230\u56fe\u4e0a...\n    plt.show()","78261442":"\"\"\"\u8fde\u7eed\u578b\u53d8\u91cf\"\"\"\naccount_con = ['tenure','MonthlyCharges','TotalCharges']\n\n\"\"\"\u5206\u7c7b\u578b\u53d8\u91cf\"\"\"\naccount_cat = ['PaperlessBilling','Contract_Month-to-month','Contract_One year','Contract_Two year',\n               'PaymentMethod_Bank transfer (automatic)','PaymentMethod_Credit card (automatic)',\n               'PaymentMethod_Electronic check','PaymentMethod_Mailed check']","140c4bf6":"\"\"\"\u6838\u5bc6\u5ea6\u4f30\u8ba1\"\"\"\n# \u5728\u6ca1\u6709\u5df2\u6d4b\u5f97\u7684\u6837\u672c\u5206\u5e03\u7684\u60c5\u51b5\u4e0b\uff0c\u4f30\u8ba1\u5728\u53d6\u503c\u70b9\u5904\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\n\ndef kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n    ax0 = sns.kdeplot(churn[churn['Churn'] == 0][feature].dropna(), color= 'c', label= 'Churn: No')\n    ax1 = sns.kdeplot(churn[churn['Churn'] == 1][feature].dropna(), color= 'r', label= 'Churn: Yes')\n\nfor i in account_con:\n    kdeplot(i)","7367602a":"g = sns.PairGrid(churn, y_vars=account_con, x_vars=account_con, height=3, hue=\"Churn\", aspect=1.1)\nax = g.map(plt.scatter, alpha=0.6, s = 10)","e6368d20":"for i, name in enumerate(account_cat):\n    sns.countplot(data=churn, y=name, hue='Churn')\n    plt.tick_params(labelsize=14)\n    plt.xlabel('count', size=14)\n    plt.ylabel(name, size=14)  # \u611f\u89c9\u8fd9\u65b9\u6cd5\u597d\u7b28,sns\u5e94\u8be5\u80fd\u4e00\u5e76\u8bbe\u7f6e\u5427,\u600e\u6837\u81ea\u5b9a\u4e49\u56fe\u4f8b\u663e\u793a\u5185\u5bb9\u5462???\n\n    length = churn.groupby(name)['Churn'].value_counts().shape[0]\n    \n    for p in range(length):\n#         churn_num = \n        rate = churn.groupby(name)['Churn'].value_counts(1)[p]\n        print(rate)\n\n#         plt.text(p,100, str(rate),fontsize=12)  # \u788d\u4e8e\u6280\u672f\u4e0a\u7684\u96be\u9898,\u8fd8\u6ca1\u6807\u5230\u56fe\u4e0a\n    plt.show()","7b9c6197":"per_info = ['gender', 'SeniorCitizen', 'Partner', 'Dependents']\nfor i, name in enumerate(per_info):\n    sns.countplot(data=churn, y=name, hue='Churn')\n    plt.tick_params(labelsize=14)\n    plt.xlabel('count', size=14)\n    plt.ylabel(name, size=14)  # \u611f\u89c9\u8fd9\u65b9\u6cd5\u597d\u7b28,sns\u5e94\u8be5\u80fd\u4e00\u5e76\u8bbe\u7f6e\u5427,\u600e\u6837\u81ea\u5b9a\u4e49\u56fe\u4f8b\u663e\u793a\u5185\u5bb9\u5462???\n\n    length = churn.groupby(name)['Churn'].value_counts().shape[0]\n    \n    for p in range(length):\n#         churn_num = \n        rate = churn.groupby(name)['Churn'].value_counts(1)[p]\n        print(rate)\n\n#         plt.text(p,100, str(rate),fontsize=12)  # \u788d\u4e8e\u6280\u672f\u4e0a\u7684\u96be\u9898,\u8fd8\u6ca1\u6807\u5230\u56fe\u4e0a\n    plt.show()","0ea52942":"\"\"\"\u8ba2\u8d2d\u4e0d\u540c\u670d\u52a1\u7684\u4e0d\u540c\u5e74\u9f84\u6bb5\u7684\u7528\u6237\u7684\u6d41\u5931\u60c5\u51b5\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nservices = ['MultipleLines','PhoneService','OnlineSecurity','OnlineBackup',\n                   'DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\n# services = ['MultipleLines','OnlineSecurity','OnlineBackup',\n#                    'DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\nsenior_stats = list()\nsenior_churn_stats = list()\njunior_stats = list()\njunior_churn_stats = list()\n\nfor name in services:\n    \n    # \u8001\u5e74\u4eba\u7684\u6d41\u5931\u60c5\u51b5\n    senior = (churn.groupby([name])['SeniorCitizen'].value_counts()[3])\/churn.shape[0]\n    senior_churn = (churn.groupby([name,'SeniorCitizen'])['Churn'].value_counts()[7])\/churn.shape[0]\n    \n    # \u975e\u8001\u5e74\u4eba\u7684\u6d41\u5931\u60c5\u51b5\n    junior = (churn.groupby([name])['SeniorCitizen'].value_counts()[2])\/churn.shape[0]\n    junior_churn = (churn.groupby([name,'SeniorCitizen'])['Churn'].value_counts()[5])\/churn.shape[0]\n\n    senior_stats.append(senior)    \n    senior_churn_stats.append(senior_churn)\n    junior_stats.append(junior)    \n    junior_churn_stats.append(junior_churn)\n    \nlabels = np.array(services)\n\n# \u7ed8\u5236\u96f7\u8fbe\u7f51\u683c\nangles = np.linspace(0, 2*np.pi, len(labels), endpoint=False)  # \u521b\u5efa\u7b49\u5dee\u6570\u5217\nangles = np.concatenate((angles, [angles[0]]))\n\nsenior_stats = np.concatenate((senior_stats, [senior_stats[0]]))\nsenior_churn_stats = np.concatenate((senior_churn_stats, [senior_churn_stats[0]]))\n\njunior_stats = np.concatenate((junior_stats, [junior_stats[0]]))\njunior_churn_stats = np.concatenate((junior_churn_stats, [junior_churn_stats[0]]))\n\n\nfig = plt.figure(figsize=(6,6),dpi=100)\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, senior_stats, '-', linewidth=1,color='blue', alpha=0.01)\nax.fill(angles, senior_stats, color='blue',alpha=0.5)  # alpha \u900f\u660e\u5ea6\n\nax.plot(angles, senior_churn_stats, '-', linewidth=1,color='gold', alpha=0.01)\nax.fill(angles, senior_churn_stats, color='gold',alpha=0.5)\n\nax.plot(angles, junior_stats, '-', linewidth=1,color='green')\n\nax.plot(angles, junior_churn_stats, '-', linewidth=1,color='red')\n\n# \u8bbe\u7f6e\u4e2d\u6587\u5b57\u4f53\n# font = FontProperties(fname=r\"C:\\Windows\\Fonts\\simhei.ttf\", size=14)\nax.set_thetagrids(angles * 180\/np.pi, labels)  # , FontProperties=font\nplt.show()","771ce7d6":"\"\"\"\u4e0d\u540c\u652f\u4ed8\u65b9\u5f0f \u4e0d\u540c\u5e74\u9f84\u6bb5\u7684\u7528\u6237\u7684\u6d88\u8d39\u60c5\u51b5\"\"\"\n\nsns.catplot(x=\"SeniorCitizen\", y=\"MonthlyCharges\", hue=\"Churn\",\n            kind=\"violin\", split=True, data=churn)\n\nsns.catplot(x=\"SeniorCitizen\", y=\"TotalCharges\", hue=\"Churn\",\n            kind=\"violin\", split=True, data=churn)","1856f263":"\"\"\"\u6709\u65e0\u914d\u5076\u53ca\u5b50\u5973\u7684\u5ba2\u6237\u7684\u6d88\u8d39\u80fd\u60c5\u51b5\"\"\"\n\n\nsns.boxplot(x=\"Partner\", y=\"MonthlyCharges\",\n            hue=\"Churn\", data=churn)  # palette=[\"m\", \"g\"],  \u8272\u8c03\n# sns.despine(offset=10, trim=True)  # \u8fb9\u6846\u8bbe\u7f6e\nplt.show()\n\nsns.boxplot(x=\"Partner\", y=\"TotalCharges\",\n            hue=\"Churn\", data=churn)","306ce60d":"sns.boxplot(x=\"Partner\", y=\"tenure\",\n            hue=\"Churn\", data=churn)","da7e8326":"customer_cat = ['gender','SeniorCitizen','Partner','Dependents', 'tenure_label']\nchurn_all = pd.concat([churn_mulcats, churn],axis=1)\nfor i in customer_cat:\n    sns.countplot(data=churn_all, x=\"Contract\", hue=i)\n    plt.show()","851d055f":"\"\"\"\u53bb\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\"\"\"\nchurn = churn.dropna(how='any', axis=0)\n\"\"\"\u67e5\u770b\u6837\u672c\u662f\u5426\u5747\u8861\"\"\"\nchurn.groupby(['Churn']).count()  # \u76f8\u5dee\u4e24\u500d\uff0c\u4e0d\u9700\u8981\u505a\u6837\u672c\u5747\u8861\u5904\u7406","c6c4cca4":"\"\"\"\u9009\u62e9\u7279\u5f81\u503c\u548c\u76ee\u6807\u503c\"\"\"\nx = churn.drop(['tenure_label','Churn'], axis=1)\ny = churn.Churn","dc93da30":"# \u5212\u5206\u8bad\u7ec3\u96c6 \u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=11)","4a5e92f4":"from sklearn.linear_model import LogisticRegression\nlr_model = LogisticRegression()\nresult = lr_model.fit(x_train, y_train)","73c887b2":"# \u56de\u5f52\u7cfb\u6570\nprint(lr_model.coef_)\n# \u622a\u8ddd\nprint(lr_model.intercept_)","d179a82a":"# \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\ny_pred_train = lr_model.predict(x_train)\ny_pred_test = lr_model.predict(x_test)\n\n# # \u67e5\u770b\u5f97\u5206\n# from sklearn.metrics import accuracy_score\n# train_score = accuracy_score(y_train, y_pred_train)\n# test_score = accuracy_score(y_test, y_pred_test)\n# # \u5f97\u5206\u5c31\u662f\u51c6\u786e\u7387\n# print('\u8bad\u7ec3\u96c6\u9884\u6d4b\u5f97\u5206\uff1a{}'.format(train_score))\n# print('\u6d4b\u8bd5\u96c6\u9884\u6d4b\u5f97\u5206\uff1a{}'.format(test_score))\n\n# # \u67e5\u770b\u53ec\u56de\u7387\n# from sklearn.metrics import auc, roc_curve\n# fpr, tpr, _ = roc_curve(y_train, y_pred_train)\n# roc_auc = auc(fpr,tpr)\n# print('\u53ec\u56de\u7387\u4e3a\uff1a{}'.format(roc_auc))\n\nfrom sklearn.metrics import classification_report\nret = classification_report(y_test, y_pred_test, labels=(0,1), target_names=('\u5fe0\u8bda', '\u6d41\u5931'))\nprint(ret)","e6f84eeb":"from sklearn.preprocessing import StandardScaler\nz_scaler = StandardScaler()\nz_x = pd.DataFrame(z_scaler.fit_transform(x),columns=x.columns)\n\nzx_train, zx_test, zy_train, zy_test = train_test_split(z_x, y, test_size=0.3, random_state=11)\n\nzlr_model = LogisticRegression()\nz_result = zlr_model.fit(zx_train, zy_train)","a211a062":"# \u56de\u5f52\u7cfb\u6570\nprint(zlr_model.coef_)\n# \u622a\u8ddd\nprint(zlr_model.intercept_)","21487c60":"# \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\nzy_pred_train = zlr_model.predict(zx_train)\nzy_pred_test = zlr_model.predict(zx_test)\n\nfrom sklearn.metrics import classification_report\nret = classification_report(zy_test, zy_pred_test, labels=(0,1), target_names=('\u5fe0\u8bda', '\u6d41\u5931'))\nprint(ret)","cd163538":"from sklearn.preprocessing import MinMaxScaler\nm_scaler = MinMaxScaler()\nm_x = pd.DataFrame(m_scaler.fit_transform(x), columns=x.columns)","5772abf9":"# \u5212\u5206\u6d4b\u8bd5\u96c6\u3001\u8bad\u7ec3\u96c6\nmx_train, mx_test, my_train, my_test = train_test_split(m_x, y, test_size=0.3, random_state=11)\n# \u6784\u5efa\u903b\u8f91\u56de\u5f52\u6a21\u578b\nmlr_model = LogisticRegression()\nm_result = mlr_model.fit(mx_train, my_train)\n# \u56de\u5f52\u7cfb\u6570\nprint(mlr_model.coef_)\n# \u622a\u8ddd\nprint(mlr_model.intercept_)","4bb6b7e9":"# \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\nmy_pred_train = mlr_model.predict(mx_train)\nmy_pred_test = mlr_model.predict(mx_test)\n\nfrom sklearn.metrics import classification_report\nret = classification_report(my_test, my_pred_test, labels=(0,1), target_names=('\u5fe0\u8bda', '\u6d41\u5931'))\nprint(ret)","634f4ef4":"\"\"\" \u7ecf\u903b\u8f91\u56de\u5f52\u5f97\u5230\u7684\u5404\u53d8\u91cf\u503c\u7684\u76f8\u5173\u7cfb\u6570(\u8fd9\u600e\u4e48\u89e3\u91ca\u554a,\u5c31\u662f\u5f97\u5230\u4e86\u8fd9\u4e48\u4e2a\u516c\u5f0f\u554a...\u62ff\u53bb\u7528\u597d\u4e86,\u53cd\u6b63\u4e5f\u4e0d\u51c6\u54c8\u54c8\u54c8\u54c8)\"\"\"\nz_coef = pd.DataFrame(zlr_model.coef_,columns=z_x.columns).T.sort_values(by=0)\nz_coef = z_coef.rename(columns={ 0: 'coef_values'})","3cd5378d":"z_coef.plot(kind='bar')","86ac7936":"from sklearn.ensemble import RandomForestClassifier\nrx_train, rx_test, ry_train, ry_test = train_test_split(z_x, y, test_size=0.3, random_state=11)\nrf_model = RandomForestClassifier(n_estimators=1000 , oob_score = True,\n                                  random_state =11, max_features = \"auto\",\n                                  max_leaf_nodes = 30)\nrf_model.fit(rx_train, ry_train)","8768022d":"# \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\nfrom sklearn.metrics import accuracy_score\n\nry_pred_train = rf_model.predict(rx_train)\nry_pred_test = rf_model.predict(rx_test)\n\n# \u67e5\u770b\u5f97\u5206\nprint('\u8bad\u7ec3\u96c6\u9884\u6d4b\u5f97\u5206\uff1a{}'.format(accuracy_score(ry_train, ry_pred_train)))\nprint('\u6d4b\u8bd5\u96c6\u9884\u6d4b\u5f97\u5206\uff1a{}'.format(accuracy_score(ry_test, ry_pred_test)))\n\n# \u67e5\u770bimportances\nimportances = rf_model.feature_importances_\nprint('importances\uff1a{}'.format(importances))","a1125208":"from sklearn.metrics import classification_report\n# ret = classification_report(ry_test, ry_pred_test, labels=(0,1), target_names=('\u5fe0\u8bda', '\u6d41\u5931'))\nret = classification_report(ry_test, ry_pred_test)\n\nprint(ret)  # \u8fd9\u4e2a\u53ec\u56de\u7387\u6709\u70b9\u4e11... \u7ed3\u8bba\u540c \u7b2c\u56db\u7ae0","657a05a6":"\"\"\"\u6a21\u578b\u5f97\u5230\u7684\u6307\u6807\"\"\"\nz_importances = pd.DataFrame([importances],columns=z_x.columns).T.sort_values(by=0)\nz_importances = z_importances.rename(columns={ 0: 'importances'})\nz_importances","86beab0e":"z_importances.plot(kind='bar')","7ac40158":"**\u6b64\u65f6**  \n7032 \u4e2a\u6837\u672c, 28 \u4e2a\u7279\u5f81,\u6ca1\u6709\u7f3a\u5931\u503c,\u9664\u4e86 tenure_label \u5747\u4e3a\u6570\u503c\u578b\u6570\u636e","e929f419":"**\u7ed3\u8bba**\n* \u7f34\u8d39\u5468\u671f\u5728\u4e0d\u540c\u6027\u522b\u95f4\u6ca1\u6709\u5206\u5316\n* \u8001\u5e74\u4eba\u66f4\u504f\u5411\u4e8e\u77ed\u5468\u671f\u7684\u7f34\u8d39\u65b9\u5f0f\n* \u6709\u4f34\u4fa3\u7684\u987e\u5ba2\u504f\u5411\u957f\u5468\u671f\u7684\u7f34\u8d39\u65b9\u5f0f,\u7a33\u5b9a\u6027\u66f4\u9ad8\n* \u6ca1\u6709\u5b50\u5973\u7684\u987e\u5ba2\u66f4\u504f\u5411\u4e8e\u6708\u7f34\u8d39.\n* \u5728\u7f51\u65f6\u95f4\u8d8a\u957f,\u5ba2\u6237\u8d8a\u504f\u5411\u4e24\u5e74\u7f34\u8d39\u7684\u65b9\u5f0f\n* \u7efc\u4e0a: \u6709\u914d\u5076\u548c\u5b50\u5973\u7684\u987e\u5ba2\u5728\u7f34\u8d39\u65b9\u5f0f\u4e0a\u504f\u5411\u957f\u5468\u671f,\u66f4\u4e3a\u7a33\u5b9a,\u8001\u5e74\u4eba\u7684\u9009\u62e9\u77ed\u5468\u671f\u5bb9\u6613\u7406\u89e3; \u5e74\u8f7b\u4eba\u53ef\u80fd\u66f4\u52a0\u6d3b\u8dc3\u5728,\u504f\u5411\u6708\u7f34\u8d39,\u800c\u8fd9\u90e8\u5206\u4eba\u4e5f\u5b58\u5728\u8d70\u5411\u7a33\u5b9a\u5bb6\u5ead\u751f\u6d3b\u7684\u8d8b\u52bf,\u957f\u8fdc\u6253\u7b97: \u6293\u4f4f\u8fd9\u90e8\u5206\u4eba,\u5c31\u66f4\u53ef\u80fd\u62e5\u6709\u4e00\u6279\u7a33\u5b9a\u5ba2\u6237,\u867d\u7136\u8fd9\u90e8\u5206\u4eba\u73b0\u9636\u6bb5\u6d88\u8d39\u80fd\u529b\u53ef\u80fd\u4e0d\u9ad8.","0f91ef5e":"**\u4e0e\u6d41\u5931\u6210\u6b63\u76f8\u5173\u7684\u524d\u4e94\u4e2a\u7684\u7279\u5f81**\n* Contract_Month-to-month\n* InternetService_Fiber optic\n* PaymentMethod_Electronic check\n* MonthlyCharges\u3010\u6708\u6d88\u8d39\u8d8a\u9ad8, \u5bb9\u6613\u6d41\u5931?\u3011\n* PaperlessBilling  \n\n**\u4e0e\u6d41\u5931\u6210\u8d1f\u76f8\u5173\u7684\u524d\u4e94\u4e2a\u7684\u7279\u5f81**\n* tenure\n* Contract_Two year\n* InternetService_No\n* TotalCharges\n* Contract_One year\n\n**\u7ed3\u8bba**\n* \u6b63\u8d1f\u76f8\u5173\u7684\u7279\u5f81\u5e76\u4e0d\u5c40\u9650\u4e8e\u8ba2\u8d2d\u7684\u670d\u52a1\u3001\u5e10\u6237\u4fe1\u606f\u548c\u4e2a\u4eba\u4fe1\u606f\u4e2d\u7684\u67d0\u7c7b,\u800c\u662f\u4ea4\u53c9\u51fa\u73b0,\u6240\u4ee5\u540e\u7eed\u5c06\u5bf9\u7528\u6237\u7684\u8fd9\u4e09\u5927\u7c7b\u7279\u5f81\u5206\u522b\u8fdb\u884c\u7814\u7a76","39794b24":"### \u6a21\u578b\u8bc4\u4f30","e4550f74":"\u5982\u56fe\u6240\u793a  \n\u6b63\u76f8\u5173\u5173\u7cfb  \n* TotalCharges\/ Contract_Two year \u5747\u4e0e tenure\n* MonthlyCharges \u4e0e \u6d88\u8d39\u4ea7\u54c1\u6307\u6807 \u5927\u591a\u5448\u6b63\u76f8\u5173  \n\n\u8d1f\u76f8\u5173\u5173\u7cfb\n* Churn \u4e0e tenure\n* Contract_Month-to-month \u4e0e tenure\n* InternetService_No \u4e0e\u5927\u90e8\u5206\u7279\u5f81\u6210\u8d1f\u76f8\u5173,\u5c24\u5176\u662f MonthlyCharges\n\n**\u7ed3\u8bba**  \n* tenure \u53ef\u80fd\u662f\u4e00\u4e2a\u5173\u952e\u6307\u793a\u6307\u6807: \u5728\u7f51\u65f6\u95f4\u8d8a\u957f,\u5ba2\u6237\u6d88\u8d39\u76f8\u5e94\u589e\u52a0,\u8d8a\u503e\u5411\u4e0e\u7b7e\u8ba2\u4e24\u5e74\u671f\u5408\u540c.\u8d8a\u4e0d\u6613\u6d41\u5931\n* \u6309\u6708\u7f34\u8d39\u7528\u6237\u666e\u904d\u670d\u52a1\u671f\u8f83\u77ed,\u53ef\u80fd\u65b0\u7528\u6237\u5c45\u591a,\u4e5f\u66f4\u6613\u6d41\u5931","965dce02":"## \u7528\u6237\u670d\u52a1\u8ba2\u8d2d\u60c5\u51b5\u4e0e\u6d41\u5931\u4e0e\u5426\u7684\u76f8\u5173\u6027\u7814\u7a76","fc73f8a7":"* \u968f\u5728\u7f51\u65f6\u957f\u7684\u589e\u52a0, \u7528\u6237\u6d88\u8d39\u91d1\u989d\u603b\u8ba1\u5347\u9ad8, \u4f46\u6708\u8d44\u8d39\u8f83\u9ad8\u7fa4\u4f53\u4e3b\u8981\u96c6\u4e2d\u5728\u65b0\u5165\u7f51\u7528\u6237. (\u4e3a\u4ec0\u4e48\u65b0\u5165\u7f51\u7684\u4eba\u4f1a\u9009\u62e9\u9ad8\u8d44\u8d39? \u8fd9\u7fa4\u4eba\u662f\u4ec0\u4e48\u4eba?)\n* \u56e0\u4e3a\u65b0\u5165\u7f51\u4e0d\u4e45,\u6240\u4ee5\u6708\u8d44\u8d39\u8f83\u9ad8\u7684\u4eba\u5728\u6d88\u8d39\u91d1\u989d\u603b\u8ba1\u8f83\u4f4e\u7684\u6c34\u5e73\u5206\u5e03\u8f83\u9ad8,\u4f46\u6d88\u8d39\u91d1\u989d\u603b\u8ba1\u8f83\u9ad8\u7684\u7528\u6237\u4e2d,\u4e5f\u5206\u5e03\u6709\u8f83\u591a\u7684\u6708\u8d44\u8d39\u8f83\u9ad8\u7684\u7528\u6237. \u6708\u8d44\u8d39\u5c45\u4e2d\u7684\u7528\u6237, \u76f8\u6bd4\u5176\u4ed6\u7528\u6237,\u5728\u9ad8\u6d88\u8d39\u603b\u91d1\u989d\u4e2d\u5bc6\u5ea6\u8f83\u4f4e","34c38a64":"* \u6d41\u5931\u5ba2\u6237\u5728\u6027\u522b\u4e0a\u6ca1\u6709\u4f53\u73b0\u51fa\u5dee\u5f02\u6027\n* \u8001\u5e74\u4eba\u6d41\u5931\u7387\u6781\u9ad8\n* \u6ca1\u6709\u914d\u5076\u7684\u5ba2\u6237\u6d41\u5931\u7387\u8f83\u9ad8(\u5e74\u8f7b\u4eba?)\n* \u6ca1\u6709\u5b50\u5973\u7684\u5ba2\u6237\u6d41\u5931\u7387\u8f83\u9ad8(\u5e94\u8be5\u8fd8\u662f\u5e74\u8f7b\u4eba\u5427)","30fd1543":"## \u65e0\u5173\u7279\u5f81\u53bb\u9664 \u5f02\u5e38\u6570\u636e\u5904\u7406","5c94720f":"## \u539f\u6570\u636e\u96c6\u76f4\u63a5\u5efa\u6a21","966ff96b":"\u7814\u7a76\u76ee\u7684\uff1a\n\n1 \u4e86\u89e3\u5ba2\u6237\u6d41\u5931\u7684\u5927\u4f53\u72b6\u51b5   \n2 \u63a2\u7a76\u662f\u4ec0\u4e48\u539f\u56e0\u9020\u6210\u4e86\u7528\u6237\u6d41\u5931\u3002\u5982\uff1a\u6d41\u5931\u7684\u5ba2\u6237\u6709\u54ea\u4e9b\u5171\u540c\u70b9\uff1b\u4f7f\u7528\u54ea\u4e9b\u670d\u52a1\u7684\u7528\u6237\u6d41\u5931\u8f83\u4e3a\u4e25\u91cd","5fd7c9be":"## \u6807\u51c6\u5316\u540e\u8fdb\u884c\u903b\u8f91\u56de\u5f52","94a896f7":"**\u7ed3\u8bba**\n* \u5f00\u901a\u5404\u9879\u670d\u52a1\u7684\u987e\u5ba2,\u57fa\u672c\u53ea\u5360\u4f7f\u7528\u7535\u8bdd\u670d\u52a1\u7684\u4e00\u534a \n* \u975e\u8001\u5e74\u4eba\u5728\u7528\u6237\u4e2d\u5360\u4e3b\u4f53\u5730\u4f4d,\u5404\u9879\u670d\u52a1\u6d41\u5931\u4eba\u6570\u57fa\u672c\u4e0e\u8001\u5e74\u7528\u6237\u603b\u6570\u6301\u5e73.\n* [\u611f\u89c9\u8fd9\u56fe\u5927\u90e8\u5206\u7a7a\u95f4\u90fd\u6d6a\u8d39\u4e86]","72ea821a":"# \u5ba2\u6237\u6d41\u5931\u7387\u521d\u6b65\u7edf\u8ba1\u5206\u6790","a8520c59":"# \u7ed3\u8bba\n* \u5171\u6709\u5ba2\u62377043\u4eba, \u6d41\u5931\u5ba2\u6237\u4e3a 1869 \u4eba, \u5360\u603b\u6570\u7684 26.6%, \u8d85\u8fc71\/4\n\n**\u6613\u6d41\u5931\u4eba\u7fa4**\n* \u7528\u6237\u7ef4\u5ea6: \u8001\u4eba, \u5355\u8eab, \u65e0\u5b50\u5973, \u5728\u7f51\u65f6\u957f\u5c0f\u4e8e\u4e00\u5e74\u7684\u7528\u6237\u5bb9\u6613\u6d41\u5931.\n* \u4ea7\u54c1\u7ef4\u5ea6: \u4e0d\u5f00\u901a\u6280\u672f\u6027\u589e\u503c\u670d\u52a1; \u5f00\u901a\u591a\u7ebf\u670d\u52a1\/\u5149\u7ea4\u7f51\u7edc\/\u5a31\u4e50\u6027\u670d\u52a1\u7684\u5ba2\u6237\n* \u6d88\u8d39\u7ef4\u5ea6: \u6708\u6d88\u8d3980-100\u5143, \u9009\u62e9\u6708\u7f34\u8d39, \u4f7f\u7528Electronic check\u652f\u4ed8[\u53ef\u4ee5\u7ee7\u7eed\u5206\u6790\u4e00\u4e0b\u4ec0\u4e48\u4eba\u5728\u7528\u8fd9\u79cd\u5361]\n    \n**\u5efa\u8bae**\n* \u5bf9\u5e74\u8f7b\u4eba: \u79ef\u6781\u63a8\u51fa\u6d3b\u52a8,\u7a33\u4f4f\u65b0\u4eba\u548c\u6b21\u65b0\u4eba, \u8bf1\u5bfc\u5176\u9009\u62e9\u957f\u671f\u5408\u540c\n* \u5bf9\u6709\u914d\u5076\u548c\u5b50\u5973\u53ca\u8001\u5e74\u5ba2\u6237\u6025\u9700\u4fdd\u6301, (\u8001\u5e74\u4eba\u662f\u4e0d\u5bb9\u6613\u7b7e\u957f\u5408\u540c\u4e86)\n* \u8c03\u67e5\u5149\u7ea4(InternetService_Fiber optic)\u7528\u6237\u6d41\u5931\u7387\u9ad8\u7684\u539f\u56e0\n* \u5728\u5a31\u4e50\u8d44\u6e90 (StreamingTV, StreamingMovies) \u4e0a\u52a0\u5927\u6295\u5165\u548c\u670d\u52a1,\u63a8\u5e7f\u6280\u672f\u6027\u589e\u503c\u670d\u52a1, \u7559\u4f4f\u66f4\u591a\u5ba2\u6237.\n* \u63a8\u5e7f InternetService_DSL \u7684\u4f7f\u7528\n\n**\u9884\u6d4b\u6a21\u578b\u6784\u5efa**\n* \u7528\u6237\u6d41\u5931\u9884\u6d4b\u6a21\u578b\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5b8c\u5584...","86edd54c":"### \u8fde\u7eed\u578b\u53d8\u91cf\u7684\u5904\u7406","54a9dcc9":"## \u5404\u53d8\u91cf\u548c\u5ba2\u6237\u6d41\u5931\u7684\u76f8\u5173\u6027","43f664dc":"# \u903b\u8f91\u56de\u5f52\u5206\u6790","a3eaddd4":"### \u6240\u6709\u7279\u5f81\u7684\u76f8\u5173\u6027\u603b\u89c8","492e0821":"\u6570\u636e\u8bf4\u660e\uff1a\n\n\u8fd9\u4e2a\u6570\u636e\u96c6\u5305\u542b\u7535\u4fe1\u5ba2\u6237\u7684\u591a\u79cd\u4fe1\u606f\uff0c\u4ee5\u53ca\u4ed6\u4eec\u662f\u5426\u5728\u4e0a\u4e2a\u6708\u6d41\u5931\u4e86\u3002\u6570\u636e\u4e2d\uff0c\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u5ba2\u6237\uff0c\u6bcf\u4e00\u5217\u4e3a\u8be5\u5ba2\u6237\u7684\u4e0d\u540c\u5c5e\u6027\u3002\u8fd9\u4e9b\u5c5e\u6027\u4e3b\u8981\u5305\u62ec\u5ba2\u6237\u8ba2\u8d2d\u7684\u670d\u52a1\u3001\u5e10\u6237\u4fe1\u606f\u548c\u4e2a\u4eba\u4fe1\u606f\u3002\u6211\u4eec\u5c06\u4f7f\u7528Python\u548cSeaborn\u5e93\u7ed3\u5408\u7279\u5f81\u5de5\u7a0b\u3001\u903b\u8f91\u56de\u5f52\u3001\u968f\u673a\u68ee\u6797\u6765\u8fdb\u884c\u6570\u636e\u5206\u6790\u3002","da0b3771":"* \u6bcf\u4e2a\u7279\u5f81\u90fd\u6709\u8f83\u4e3a\u660e\u663e\u7684\u533a\u5206\u5ea6,\u5176\u4e2d\u5ba2\u6237\u6d41\u5931\u8f83\u4e3a\u4e25\u91cd\u7fa4\u4f53\u4e3a\u5f00\u901a\u7535\u5b50\u8d26\u5355(PaperlessBilling),\u6309\u6708\u7f34\u8d39(Contract_Month-to-month),\u4f7f\u7528\u7535\u5b50\u652f\u7968(PaymentMethod_Electronic check)\u7684\u7528\u6237\n* \u6d41\u5931\u7387\u8f83\u4f4e\u7684\u7fa4\u4f53,\u4e3b\u8981\u4e3a \u6309\u5e74\u7f34\u8d39\u6216\u4e24\u5e74\u671f\u7f34\u8d39, \u4f7f\u7528\u94f6\u884c\u5361\u8f6c\u8d26\u53ca\u4fe1\u7528\u5361\u6216\u90ae\u5bc4\u652f\u7968\u7684\u5ba2\u6237\n* \u516c\u53f8\u53ef\u4ee5\u901a\u8fc7\u4fc3\u4f7f\u7528\u6237\u6309\u5e74\u6216\u4e24\u5e74\u7f34\u8d39\u6765\u63d0\u9ad8\u7528\u6237\u7c98\u6027(\u4e0d\u540c\u7684\u652f\u4ed8\u65b9\u5f0f\u662f\u4e0d\u662f\u6807\u5fd7\u7740\u4e0d\u540c\u7684\u4eba\u7fa4?\u5e74\u8f7b\u4eba\u4f7f\u7528\u94f6\u884c\u5361?\u8001\u4eba\u7528\u7535\u5b50\u652f\u4ed8\u7b49?\u778e\u731c)","1fcbf2ba":"\u5b57\u6bb5\u8bf4\u660e\uff1a \n\n* customerID\uff1a      \u7528\u6237ID\n* gender\uff1a     \u7528\u6237\u6027\u522b (Female, Male)\n* SeniorCitizen\uff1a      \u662f\u5426\u4e3a\u8001\u5e74\u7528\u6237 (1: \u662f\uff0c0: \u4e0d\u662f)\n* Partner\uff1a      \u662f\u5426\u6709\u914d\u5076 (Yes, No)\n* Dependents \uff1a      \u662f\u5426\u6709\u88ab\u6276\u517b\u4eba (Yes, No)\n* tenure\uff1a      \u5728\u7f51\u65f6\u957f (0-72\u4e2a\u6708)\n* PhoneService\uff1a      \u662f\u5426\u8ba2\u8d2d\u7535\u8bdd\u670d\u52a1 (Yes, No)\n* MultipleLines \uff1a     \u662f\u5426\u6709\u591a\u91cd\u7ebf\u8def(Yes, No, No phoneservice)\n* InternetService \uff1a     \u5ba2\u6237\u7684\u4e92\u8054\u7f51\u670d\u52a1\u63d0\u4f9b\u5546 (No, DSL\uff0cfiber optic)\n* OnlineSecurity  \uff1a    \u662f\u5426\u8ba2\u8d2d\u7f51\u7edc\u5b89\u5168\u670d\u52a1 (Yes\uff0cNo\uff0cNo internetserive)\n* OnlineBackup  \uff1a    \u662f\u5426\u8ba2\u8d2d\u5728\u7ebf\u5907\u4efd\u670d\u52a1 (Yes\uff0cNo\uff0cNo internetserive)\n* DeviceProtection  \uff1a    \u662f\u5426\u6709\u8bbe\u5907\u4fdd\u62a4\u529f\u80fd (Yes\uff0cNo\uff0cNo internetserive)\n* TechSupport \uff1a     \u662f\u5426\u8ba2\u8d2d\u6280\u672f\u652f\u6301 (Yes\uff0cNo\uff0cNo internetserive)\n* StreamingTV  \uff1a    \u662f\u5426\u4f7f\u7528\u5728\u7ebf\u89c6\u9891 (Yes\uff0cNo\uff0cNo internetserive)\n* StreamingMovies  \uff1a    \u662f\u5426\u4f7f\u7528\u5728\u7ebf\u7535\u5f71 (Yes\uff0cNo\uff0cNo internetserive)\n* Contract    \uff1a  \u7f34\u8d39\u5468\u671f (\u6708, \u5e74,\u4e24\u5e74)\n* PaperlessBilling \uff1a     \u662f\u5426\u5f00\u901a\u7535\u5b50\u8d26\u5355 (Yes, No)\n* PaymentMethod   \uff1a   \u4ed8\u6b3e\u65b9\u5f0f (bank transfer\uff0ccredit card\uff0celectronic check\uff0cmailed check)\n* MonthlyCharges  \uff1a    \u6bcf\u6708\u6d88\u8d39\u91d1\u989d\n* TotalCharges \uff1a     \u6d88\u8d39\u603b\u91d1\u989d\n* Churn  \uff1a    [\u6807\u7b7e]\u662f\u5426\u4e3a\u6d41\u5931\u5ba2\u6237 (Yes, No)","e131c6c6":"### \u6a21\u578b\u8bc4\u4f30","86c27306":"**\u7ed3\u8bba**\n* \u8ba2\u8d2d MultipleLines, StreamingTV, StreamingMovies, \u4ee5\u53ca\u4f7f\u7528\u5149\u7ea4(InternetService_Fiber optic)\u7684\u7528\u6237**\u6d41\u5931\u7387\u6bd4\u5e73\u5747\u6d41\u5931\u6c34\u5e73\u9ad8**,\u9700\u8981\u68c0\u67e5\u662f\u4e0d\u662f\u5149\u7ea4\u901f\u5ea6\u8f83\u6162,\u5728\u7ebf\u7535\u89c6\u7535\u5f71\u662f\u5426\u5361\u987f\u6216\u8d44\u6e90\u4e0d\u8db3\u5bfc\u81f4\u5ba2\u6237\u6d41\u5931.\u5bf9\u4e8e StreamingTV, StreamingMovies \u8fd9\u4e9b\u5a31\u4e50\u9879\u76ee,\u7528\u6237\u7ecf\u5e38\u662f\u54ea\u4e2a\u8fd0\u8425\u5546\u6709\u60f3\u770b\u7684\u5185\u5bb9\u5c31\u5728\u4f7f\u7528\u54ea\u4e2a\u8fd0\u8425\u5546,\u6240\u4ee5\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c\u7684\u65b9\u5f0f\u9664\u4e86\u6d41\u7545\u5ea6,\u8fd8\u8981\u52a0\u5927\u8d2d\u4e70\u8d44\u6e90\u7684\u529b\u5ea6\n* \u8ba2\u8d2d OnlineSecurity, TechSupport, \u4f7f\u7528 InternetService_DSL \u53ca\u4e0d\u4f7f\u7528\u4e92\u8054\u7f51\u7684\u7528\u6237\u6d41\u5931\u7387 \u660e\u663e**\u4f4e\u4e8e\u5e73\u5747\u6d41\u5931\u6c34\u5e73**, \u63a8\u8fdbOnlineSecurity, TechSupport\u5728\u5ba2\u6237\u4e2d\u7684\u666e\u53ca\u7387(\u4e5f\u4e0d\u80fd\u4e00\u5473\u63a8\u8fdb\u628a,\u662f\u4e0d\u662f\u6709\u8fd9\u7c7b\u9700\u6c42\u7684\u5ba2\u6237\u662f\u54ea\u4e00\u7c7b\u4eba? \u52aa\u529b\u62db\u52df\u8fd9\u79cd\u7c7b\u578b\u7684\u4eba),\u7ee7\u7eed\u5b8c\u5584 DSL \u7f51\u7edc\u670d\u52a1,\u591a\u5411\u5ba2\u6237\u63a8\u8350\u6b64\u7f51\u7edc\n* \u8ba2\u8d2d OnlineBackup, DeviceProtection \u7684\u7528\u6237\u6d41\u5931\u7387\u76f8\u5bf9\u5e73\u5747\u6d41\u5931\u6c34\u5e73\u7565\u4f4e. \u53ef\u4ee5\u63a8\u6d4b \u4f7f\u7528 OnlineSecurity,TechSupport,OnlineBackup \u8fd9\u4e9b\u5ba2\u6237\u672c\u6765\u5c31\u662f\u8f83\u4e3a\u7a33\u5b9a\u7684\u5ba2\u6237,\u9664\u975e\u4e0e\u5176\u4ed6\u7535\u7535\u4fe1\u516c\u53f8\u670d\u52a1\u5dee\u8ddd\u6bd4\u8f83\u5927,\u5426\u5219\u4ece\u81ea\u8eab\u7ecf\u9a8c\u6765\u770b,\u8fd9\u4e9b\u670d\u52a1\u5185\u5bb9,\u5e76\u4e0d\u662f\u7ecf\u5e38\u5728\u4e0d\u540c\u7684\u8fd0\u8425\u5546\u4e4b\u95f4\u8fc1\u79fb.\u6240\u4ee5\u8981\u89c2\u5bdf\u540c\u884c\u7684\u52a8\u6001,\u907f\u514d\u51fa\u73b0\u5dee\u8ddd.","0ea42e23":"# \u6570\u636e\u9884\u5904\u7406\n\u603b\u4f53\u6309\u7167\u8fde\u7eed\u3001\u79bb\u6563\u7279\u5f81\u987a\u5e8f\u6765\u8fdb\u884c\u7279\u5f81\u63a2\u7d22","8360eaec":"# \u968f\u673a\u68ee\u6797","bb2eda8e":"## \u5f52\u4e00\u5316\u540e\u8fdb\u884c\u903b\u8f91\u56de\u5f52","f7cdbf15":"**\u80cc\u666f\u8bf4\u660e\uff1a**\n\n\u5ba2\u6237\u6d41\u5931\u662f\u7535\u4fe1\u884c\u4e1a\u6700\u5927\u7684\u95ee\u9898\u4e4b\u4e00\u3002\u5ba2\u6237\u6d41\u5931\u7387\u901a\u5e38\u4f5c\u4e3a\u516c\u53f8\u7684\u4e00\u4e2a\u5173\u952e\u4e1a\u52a1\u6307\u6807\uff0c\u56e0\u4e3a\u7559\u4f4f\u4e00\u4e2a\u73b0\u6709\u5ba2\u6237\u7684\u6210\u672c\u8fdc\u8fdc\u4f4e\u4e8e\u83b7\u5f97\u4e00\u4e2a\u65b0\u5ba2\u6237\u7684\u6210\u672c\u3002\u6240\u4ee5\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\uff0c\u6062\u590d\u7684\u957f\u671f\u5ba2\u6237\u6bd4\u65b0\u62db\u52df\u7684\u5ba2\u6237\u66f4\u6709\u4ef7\u503c\u3002\u7535\u4fe1\u5ba2\u6237\u6d41\u5931\u9884\u6d4b\u6709\u52a9\u4e8e\u516c\u53f8\u53d1\u73b0\u6f5c\u5728\u7684\u6d41\u5931\u5ba2\u6237\uff0c\u5e76\u53ca\u65f6\u91c7\u53d6\u76f8\u5e94\u63aa\u65bd\uff0c\u5bf9\u5176\u8fdb\u884c\u8d62\u56de\u3002\u6b64\u5904\u7684\u2018\u6d41\u5931\u2019\u4e3b\u8981\u9488\u5bf9\u81ea\u613f\u6d41\u5931\u5ba2\u6237\uff0c\u5373\u81ea\u4e3b\u505c\u6b62\u670d\u52a1\u6216\u5207\u6362\u5230\u5176\u4ed6\u516c\u53f8\u3002","300f2fa9":"## \u672c\u7ae0\u7ed3\u8bba\n- \u7ecf\u8fc7\u6807\u51c6\u5316\u5904\u7406\u7684\u6570\u636e,\u5728\u53ec\u56de\u7387\u4e0e f1 \u5f97\u5206 \u7565\u6709\u4e9b\u4f18\u52bf,\u4f46\u6a21\u578b\u603b\u4f53\u7684\u7a33\u5065\u6027\u4e0d\u9ad8,\u5728\u9884\u6d4b\u6d41\u5931\u5ba2\u6237\u4e0a\u6709\u76f8\u5f53\u5927\u7684\u504f\u5dee\n- \u53ef\u4ee5\u5c1d\u8bd5\u4e0d\u540c\u6bd4\u4f8b\u5212\u5206\u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6\/\u5747\u8861\u5904\u7406\u7b49\u65b9\u6cd5\u7ee7\u7eed\u5c1d\u8bd5 [\u6211\u5728\u8fd9\u6682\u65f6\u4e0d\u60f3\u5c1d\u8bd5\u4e86....]\n- \u4e5f\u53ef\u80fd\u662f\u6570\u636e\u96c6\u6837\u672c\u91cf\u4e0d\u8db3\u5bfc\u81f4\u8bad\u7ec3\u6548\u679c\u4e0d\u4f73\n- [\u67e5\u4e0b\u522b\u4eba\u90fd\u662f\u600e\u4e48\u8c03\u6574\u7684]","512db665":"## \u6a21\u578b\u8bc4\u4f30","c4e177c5":"* \u65b0\u5165\u7f51\u7684\u7528\u6237 \u6d41\u5931\u7387\u6700\u9ad8,\u6d41\u5931\u6bd4\u4f8b\u51e0\u4e4e\u662f\u672a\u6d41\u5931\u7684\u4e24\u500d,\u4f46\u968f\u7740\u5728\u7f51\u65f6\u957f\u7684\u589e\u52a0,\u672a\u6d41\u5931\u7528\u6237\u8d8b\u4e8e\u5e73\u7a33,\u6d41\u5931\u6bd4\u7387\u660e\u663e\u964d\u4f4e.\n* \u6d41\u5931\u5ba2\u6237\u5728\u6708\u8d44\u8d39\u5904\u4e8e80-100\u533a\u95f4\u5185\u6bd4\u4f8b\u6700\u9ad8,\u672a\u6d41\u5931\u5ba2\u6237\u4e3b\u8981\u5904\u4e8e\u4f4e\u6708\u8d44\u8d39\u4e0e\u9ad8\u6708\u8d44\u8d39,\u4e2d\u95f4\u8d44\u8d39\u4eba\u6570\u6bd4\u8f83\u5c11,\u8981\u7559\u610f\u4f4e\u6708\u8d44\u8d39\u533a\u95f4\u7684\u5ba2\u6237\u662f\u5426\u4e3a\"\u50f5\u5c38\"\u5ba2\u6237,\u6d3b\u8dc3\u5ea6\u8f83\u4f4e.\n* \u603b\u6d88\u8d39\u8d8a\u9ad8\u7684\u533a\u95f4,\u672a\u6d41\u5931\u5ba2\u6237\u5360\u6bd4\u8f83\u9ad8.\u800c\u603b\u6d88\u8d39\u8f83\u4f4e\u7684\u533a\u95f4,\u6d41\u5931\u5ba2\u6237\u5360\u6bd4\u76f8\u5bf9\u8f83\u9ad8.\n* \u7efc\u4e0a: \u8981\u7b3c\u7edc\u597d\u5728\u7f51\u65f6\u95f4\u957f,\u7d2f\u8ba1\u6d88\u8d39\u989d\u8f83\u9ad8\u7684\u7528\u6237, \u5e76\u4f7f\u7528\u53d1\u653e\u95ee\u5377\u7b49\u5f62\u5f0f\u4e86\u89e3\u6708\u6d88\u8d39\u989d\u8f83\u9ad8\u7684\u7528\u6237\u7684\u4e0d\u540c\u9700\u6c42, \u63a8\u51fa\u76f8\u5e94\u7684\u6d3b\u52a8.\u4e89\u53d6\u964d\u4f4e \u9ad8\u6708\u8d44\u8d39\u7528\u6237\u7684\u6d41\u5931\u7387.","bad67606":"**\u7ed3\u8bba**  \n    1 customerID \u4e3a 7043 \u4e2a,\u8868\u793a\u6ca1\u6709\u91cd\u590d\u6837\u672c.  \n    2 TotalCharges \u4e3a object \u7c7b\u578b\u6570\u636e,\u6b64\u5904 \u8fdb\u884c\u6570\u636e\u7edf\u8ba1\u65f6\u5e76\u672a\u7eb3\u5165.  \n    3 \u5ba2\u6237\u4e3b\u8981\u7fa4\u4f53\u4e3a \u975e\u8001\u5e74\u7528\u6237  \n    4 tenure \u548c MonthlyCharges \u5206\u5e03\u8f83\u4e3a\u5747\u5300,\u672a\u53d1\u73b0\u5f02\u5e38\u503c  ","620e3f89":"## \u5e10\u6237\u4fe1\u606f\u4e0e\u6d41\u5931\u4e0e\u5426\u7684\u76f8\u5173\u6027\n\u8fde\u7eed\u578b\u53d8\u91cf\u548c\u5206\u7c7b\u578b\u53d8\u91cf\u5206\u522b\u5904\u7406","e2b9a79b":"### \u5206\u7c7b\u578b\u53d8\u91cf\u7684\u5904\u7406","bda01ef1":"\u7ed3\u8bba:  \n1 \u6570\u636e\u96c6\u6709 7043 \u4e2a\u6837\u672c,21 \u4e2a\u7279\u5f81,\u6ca1\u6709\u7f3a\u5931\u503c.  \n2 TotalCharges \u4e3a object \u7c7b\u578b\u7684\u6570\u636e(\u672c\u5e94\u4e3a float64),\u8bf4\u660e\u8be5\u7279\u5f81\u7684\u6570\u636e\u4e2d\u542b\u6709\u5f02\u5e38.  \n3 \u6807\u7b7e\u4e3a Churn  ","c05fc6b2":"## \u67e5\u770b\u603b\u6d41\u5931\u7387","8dcc9e77":"* \u9664\u4e86\u5165\u7f51\u65f6\u957f tenure \u6570\u503c\u76f8\u5bf9\u8f83\u5206\u6563,\u5176\u4ed6\u7279\u5f81\u5747\u4e3a 0,1 \u53d6\u503c,\u4e3a\u4e86\u8bc4\u4f30 tenure \u5bf9\u6a21\u578b\u7684\u5f71\u54cd,\u5206\u522b\u5c1d\u8bd5\u539f\u6570\u636e\u96c6\u76f4\u63a5\u5efa\u6a21\u3001\u6570\u636e\u6807\u51c6\u5316\u540e\u5efa\u6a21\u3001\u6570\u636e\u5f52\u4e00\u5316\u540e\u5efa\u6a21 \u4e09\u79cd\u65b9\u5f0f","5e76c98e":"**\u7ed3\u8bba**\n* \u6708\u8d44\u8d39\u89d2\u5ea6: \u975e\u8001\u5e74\u4eba\u5728\u4f4e\u6708\u8d44\u8d39\u672a\u6d41\u5931\u5ba2\u6237\u5360\u6bd4\u8f83\u9ad8,\u800c\u9ad8\u6708\u8d44\u8d39\u5904,\u6d41\u5931\u5ba2\u6237\u76f8\u5bf9\u8f83\u9ad8; \u8001\u5e74\u4eba\u5728\u9ad8\u6708\u8d44\u8d39\u5904\u5206\u5e03\u8f83\u9ad8,\u6d41\u5931\u4e0e\u672a\u6d41\u5931\u6bd4\u7387\u76f8\u5f53\n* \u603b\u6d88\u8d39\u91d1\u989d\u89d2\u5ea6: \u8001\u5e74\u4eba\u5728\u603b\u6d88\u8d39\u91d1\u989d\u8f83\u9ad8\u7684\u533a\u95f4,\u5fe0\u8bda\u5ba2\u6237\u5360\u6bd4\u6bd4\u8f83\u9ad8\n* \u7efc\u4e0a:\u5373\u4f7f\u8001\u5e74\u5ba2\u6237\u5728\u5ba2\u6237\u603b\u6570\u4e2d\u5360\u6bd4\u4e0d\u4e0d\u9ad8,\u4f46\u6d88\u8d39\u80fd\u529b\u8f83\u5f3a,\u8981\u79ef\u6781\u633d\u56de","adc42fe9":"## \u8fde\u7eed\u7279\u5f81\u79bb\u6563\u5316\u5904\u7406\n\u5c06 tenure \u7279\u5f81\u505a\u79bb\u6563\u5316\u5904\u7406. \u4fbf\u4e8e\u89c2\u5bdf\u4e0d\u540c\u5728\u7f51\u5e74\u9650\u7684\u5ba2\u6237\u7684\u6d41\u5931\u60c5\u51b5","34fee1d8":"**\u7ed3\u8bba**\n* \u6708\u8d44\u8d39\u89d2\u5ea6: \u6709\u914d\u5076\u7684\u5ba2\u6237\u5728\u9ad8\u6708\u8d44\u8d39\u533a\u95f4\u4eba\u6570\u7565\u591a,\u4f46\u540c\u65f6\u6d41\u5931\u987e\u5ba2\u4e5f\u4e3b\u8981\u5206\u5e03\u5728\u9ad8\u6708\u8d44\u8d39\u533a\u95f4\n* \u603b\u6d88\u8d39\u989d\u89d2\u5ea6: \u5ba2\u6237\u4e2d\u6709\u914d\u5076\u7684\u4eba\u6570\u8f83\u591a. \u6ca1\u6709\u914d\u5076\u7684\u7684\u5ba2\u6237\u5728\u603b\u6d88\u8d39\u91d1\u989d\u8f83\u4f4e\u7684\u533a\u95f4\u6bd4\u8f83\u96c6\u4e2d\u6709\u914d\u5076\u7684\u987e\u5ba2\u603b\u6d88\u8d39\u8f83\u4f4e\u7684\u4eba\u66f4\u6613\u6d41\u5931.\n* \u5728\u7f51\u65f6\u957f: \u65e0\u8bba\u6709\u65e0\u914d\u5076,\u4f4e\u5728\u7f51\u65f6\u957f\u7684\u5ba2\u6237\u90fd\u66f4\u6613\u6d41\u5931. \u6ca1\u6709\u914d\u5076\u7684\u4eba,\u65e0\u8bba\u662f\u6d41\u5931\u5ba2\u6237\u8fd8\u662f\u5fe0\u8bda\u5ba2\u6237,\u5728\u7f51\u65f6\u957f\u90fd\u76f8\u5bf9\u8f83\u4f4e, \u53ef\u80fd\u662f\u8f83\u4e3a\u5e74\u8f7b\u7684\u4eba\u521a\u5165\u7f51\u7684\u539f\u56e0? \u8fd9\u4e5f\u5bfc\u81f4\u4e86\u6ca1\u6709\u914d\u5076\u7684\u4eba\u603b\u6d88\u8d39\u91d1\u989d\u8f83\u4f4e. \u4f46\u8fd9\u90e8\u5206\u4eba\u6210\u957f\u7a7a\u95f4\u8f83\u5927,\u9002\u5b9c\u957f\u671f\u53d1\u5c55. \u7ed3\u5408\u5b9e\u9645,\u521a\u521a\u5165\u7f51\u7684\u4eba\u53ef\u80fd\u7a33\u5b9a\u6027\u8f83\u4f4e,\u53ef\u4ee5\u63d0\u4f9b\u65b0\u4eba\u7eed\u8d39\u4f18\u60e0\u7b49\u6d3b\u52a8,\u633d\u7559\u4f4f\u6b21\u65b0\u5ba2\u6237; \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6709\u914d\u5076\u5ba2\u6237\u6d41\u5931\u4eba\u6570\u51e0\u4e4e\u548c\u5fe0\u8bda\u5ba2\u6237\u5360\u6bd4\u76f8\u5f53,\u5e94\u5f15\u8d77\u6ce8\u610f,\u67e5\u627e\u539f\u56e0. ","5c4ec300":"**\u603b\u6d41\u5931\u7387**  \n\u6d41\u5931\u5ba2\u6237\u4e3a 1869 \u4eba, \u5360\u603b\u6570\u7684 26.6%, \u8d85\u8fc71\/4 ","3c584224":"### \u6d41\u5931\u6807\u7b7e\u4e0e\u5404\u4e2a\u7279\u5f81\u7684\u76f8\u5173\u6027","49a0dad8":"**\u7ed3\u8bba**  \n1 \u6b64\u65f6\u6570\u636e\u542b\u6709 7032 \u4e2a\u6837\u672c, 20 \u4e2a\u7279\u5f81  \n2 TotalCharges \u5206\u5e03\u7565\u6709\u4e0d\u5747, \u540e\u7eed\u5206\u6790\u5206\u5e03\u60c5\u51b5","e534fd70":"## \u7528\u6237\u4e2a\u4eba\u72b6\u51b5\u4e0e\u6d41\u5931\u7684\u76f8\u5173\u6027\u53ca\u5ba2\u6237\u4ef7\u503c\u63a2\u7d22\n\u8fd9\u91cc\u76f4\u63a5\u8bf4\u76f8\u5173\u6027\u662f\u4e0d\u662f\u4e0d\u592a\u4e25\u8c28??","f08f5719":"### \u6a21\u578b\u8bc4\u4f30","57c63a36":"# \u6570\u636e\u603b\u89c8\n\u62ff\u5230\u6570\u636e\u8fdb\u884c\u5206\u6790\u89c2\u5bdf\uff0c\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u5927\u81f4\u4e86\u89e3\u3002\u4e0b\u9762\u5f00\u59cb\u6570\u636e\u6574\u4f53\u63a2\u7d22\u3002","fadea78a":"## \u5206\u7c7b\u7279\u5f81\u8f6c\u5316\u4e3a\u6570\u503c\u5206\u7d22\u5f15\n\u4fbf\u4e8e\u540e\u7eed \u903b\u8f91\u56de\u5f52\u5efa\u6a21\u7b49\u64cd\u4f5c,\u4f7f\u7528\u6570\u503c\u7d22\u5f15\u8868\u793a\u5206\u7c7b\u7279\u5f81"}}