{"cell_type":{"4afc3aeb":"code","43587ad7":"code","34a3df87":"code","aea596b5":"code","22971577":"code","f0ef0333":"code","2f138b2b":"code","f7f7618f":"code","2d134843":"code","e70a8035":"code","f80ea98e":"code","8fab0ea5":"code","1a06c585":"code","f5442c3d":"markdown","cd05746a":"markdown","f5436efc":"markdown","487e9f8c":"markdown","9efc18c4":"markdown","c509dc4c":"markdown","ec046e69":"markdown"},"source":{"4afc3aeb":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport zipfile\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","43587ad7":"train_path = '..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip'\nwith zipfile.ZipFile(train_path,\"r\") as z:\n    z.extractall()\ndf = pd.read_csv('.\/train.csv')\n\ntest_path = '..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip'\nwith zipfile.ZipFile(test_path,\"r\") as z:\n    z.extractall()\nreal_test_df = pd.read_csv('.\/test.csv')","34a3df87":"##Splitting dataset\nsplit_test_df = df.iloc[-1000:,:]\ndf = df.iloc[:-1000,:]\n\nprint('Percentage of comments that are not labelled:')\nprint(len(df[(df['toxic']==0) &\n             (df['severe_toxic']==0) & \n             (df['obscene']==0) &\n             (df['threat']== 0) & \n             (df['insult']==0) & \n             (df['identity_hate']==0)])\/len(df))","aea596b5":"## min max and average length of texts\n\nlens = df.comment_text.str.len()\nlens.mean(), lens.std(), lens.max()\n\n## found no empty text\ndf['is_empty'] = np.where(len(df['comment_text'])<1, 1,0)\ndf[df['is_empty']==1]","22971577":"pip install contractions","f0ef0333":"## removing those two turkish words\ndef text_refining(text):\n    new_text = []\n    for word in text.split():\n        try:\n            new_word = contractions.fix(word)  \n        except:\n            new_word = word\n            \n        finally:\n            new_text.append(new_word)\n    \n    return \" \".join(new_text)\n\ndf['comment_text'] = df.comment_text.apply(lambda text: text_refining(text))\nsplit_test_df['comment_text'] = split_test_df.comment_text.apply(lambda text: text_refining(text))\n","2f138b2b":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\ntfidf_vectorizer = TfidfVectorizer(ngram_range=(1,1), max_features=10000)\n\nX = tfidf_vectorizer.fit_transform(df.comment_text.values)\nX_test = tfidf_vectorizer.transform(split_test_df.comment_text.values)\n\nreal_test_df['comment_text'] = real_test_df.comment_text.apply(lambda text: text_refining(text))\nreal_X_test = tfidf_vectorizer.transform(real_test_df.comment_text.values)","f7f7618f":"import math\nfrom wordcloud import WordCloud\nlabel_columns = ['toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']\ncount_label = {}\n\nfig, axes = plt.subplots(math.ceil(len(label_columns)\/3),3,figsize = (25,15))\nfor n,col in enumerate(label_columns):\n    check_df = df[df[col]>0]\n    words = ' '.join(check_df.comment_text.values)\n    count_label[col] = len(check_df)\n    wordcloud = WordCloud(\n                      background_color='white',\n                      width=2500,\n                      height=2000\n                     ).generate(words)\n    \n    axes[n\/\/3,n%3].imshow(wordcloud)\n    axes[n\/\/3,n%3].axis('off')\n    axes[n\/\/3,n%3].set_title(col)\n\n    \n","2d134843":"#imbalance Data labels\npd.DataFrame.from_dict(count_label, orient = 'index',columns = ['count'] ).count","e70a8035":"import numpy as np\nresult = real_test_df.id.values.reshape(-1,1)\nclf = Pipeline([('ovr',LogisticRegression(solver='sag', n_jobs=-1))])\nfor label in label_columns:\n    print(\"-----------------{0}---------------\".format(label))\n    clf.fit(X,df[label].values)\n    pred = clf.predict(real_X_test).reshape(-1,1)\n    result = np.concatenate((result,pred), axis = 1)\n    print(pred.shape,type(pred))\n    #print(\"accuracy : \", accuracy_score(split_test_df[label].values,pred))\n    \npd.DataFrame(result,columns = ['id','toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']).to_csv('.\/submission.csv', index=False)","f80ea98e":"from sklearn.multiclass import OneVsRestClassifier\nclf = Pipeline([('ovr',OneVsRestClassifier(LogisticRegression(solver='sag', n_jobs=-1)))])\nclf.fit(X,df[label_columns].values)","8fab0ea5":"clf_pred = clf.predict(real_X_test)","1a06c585":"pd.DataFrame(np.concatenate((real_test_df.id.values.reshape(-1,1),clf_pred), axis = 1),columns = ['id','toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']).to_csv('.\/submission.csv', index=False)","f5442c3d":"## 5. Wordcloud","cd05746a":"## 2.Minor Analysis","f5436efc":"## 1. Files Unzipping","487e9f8c":"## 6. logistic model per label","9efc18c4":"## 3. Text Refinement","c509dc4c":"## 4. Tfidf Vectorizer 1-gram","ec046e69":"## One Vs Rest"}}