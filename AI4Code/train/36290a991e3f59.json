{"cell_type":{"95b113f3":"code","54d131e5":"code","79863eae":"code","5f396a33":"code","f0ede3e8":"code","e2086f97":"code","cffa0494":"code","18319069":"code","2b10d546":"code","f62f0587":"code","ca3688d5":"code","dc2bd1d1":"code","5fba0a13":"code","036225c8":"code","b96f9a32":"code","b52f7d07":"code","b0e9a79e":"code","d03480e2":"markdown","f205e756":"markdown","2dd61f20":"markdown","cb32e668":"markdown","1e44e294":"markdown","98015746":"markdown","dfe962d4":"markdown","66d72a90":"markdown","840c7166":"markdown","7eddb333":"markdown","6bd4e75d":"markdown","a8e31fac":"markdown","0ec6a50c":"markdown","8f7202e1":"markdown","65d6fa36":"markdown","1d017bf4":"markdown","ee9d89a4":"markdown","b405a036":"markdown","3552e13b":"markdown","6edc3bf1":"markdown","6a56e05b":"markdown","e45171c2":"markdown","e27be62d":"markdown","03929b8f":"markdown","d0462556":"markdown","591a6f84":"markdown","d17fcb8d":"markdown"},"source":{"95b113f3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\nsns.set_style('whitegrid')","54d131e5":"df = pd.read_csv('..\/input\/googleplaystore.csv')\ndf.sample(5)","79863eae":"#Keeping apps with type as either free or paid\ndf = df[(df['Type'] == 'Free') | (df['Type'] == 'Paid')]\n\n#Removing null values\ndf = df[(df['Android Ver'] != np.nan) & (df['Android Ver'] != 'NaN')]\n\n#Remove anomalies where rating is less than 0 and greater than 5\ndf = df[df['Rating'] < 5]\ndf = df[df['Rating'] > 0]\n\n#Convert all sizes to MB and removing 'M' and 'k'\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', ''))\/1000 if 'k' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(x))\n\n#Remove ' and up' to get the minimum android version\ndf['Android Ver'] = df['Android Ver'].apply(lambda x: str(x).replace(' and up', '') if ' and up' in str(x) else x)\n\n#Remove '$' from the price to convert it to float\ndf['Price'] = df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else x)\ndf['Price'] = df['Price'].apply(lambda x: float(x))\n\n#Convert number of reviews to int\ndf['Reviews'] = df['Reviews'].apply(lambda x: int(x))","5f396a33":"print('Number of apps in the dataset: ', len(df))","f0ede3e8":"trace = [go.Pie(\n    values = df['Category'].value_counts(),\n    labels = df['Category'].value_counts().index)]\n\nlayout = go.Layout(title = 'Distribution of app categories in the market')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","e2086f97":"print('The average rating of the apps in the dataset is: ',np.mean(df['Rating']))\n\ntrace = [go.Histogram(\n    x = df['Rating'],\n    xbins=dict(start = 0.0, end = 5.0, size = 0.1))]\n\nlayout = go.Layout(title = 'Distribution of the ratings of apps in the dataset')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","cffa0494":"most_reviewed = df.sort_values('Reviews', ascending=False).head(100)\n\nprint('Average rating of top 100 most reviewed apps: ',np.mean(most_reviewed['Rating']))\n\ntrace = [go.Scatter(\n    x = most_reviewed['Reviews'],\n    y = most_reviewed['Rating'],\n    mode = 'markers')]\n\nlayout = go.Layout(title = 'Ratings of top 100 most reviewed apps')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","18319069":"print('The average rating of the apps in the dataset is: ',np.mean(df['Size']))\n\ntrace = [go.Histogram(x = df['Size'])]\n\nlayout = go.Layout(title = 'Distribution of the size of apps in the dataset')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","2b10d546":"sns.jointplot('Size', 'Rating', data=df)\nplt.show()","f62f0587":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (16,6))\n\nax1.hist(df[df['Type'] == 'Free']['Rating'], bins = 50)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.set_title('Free apps rating')\n\nax2.hist(df[df['Type'] == 'Paid']['Rating'], bins = 50)\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.set_title('Paid apps rating')\n\nplt.show()","ca3688d5":"trace = [go.Scatter(\n    x = df[df['Type'] == 'Paid']['Price'],\n    y = df[df['Type'] == 'Paid']['Rating'],\n    mode = 'markers')]\n\nlayout = go.Layout(title = 'Rating based on price')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","dc2bd1d1":"trace = [go.Scatter(\n    x = df[(df['Type'] == 'Paid') & (df['Price'] < 50)]['Price'],\n    y = df[df['Type'] == 'Paid']['Rating'],\n    mode = 'markers')]\n\nlayout = go.Layout(title = 'Rating based on price')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","5fba0a13":"df[df['Price'] > 250][['App', 'Category', 'Price']]","036225c8":"top_categories = df['Category'].value_counts()[:6].index\ntop_apps = df[df['Category'].isin(top_categories)]\ntop_apps = top_apps[top_apps['Price'] < 50]\n\ntrace = [go.Scatter(\n    x = top_apps['Price'],\n    y = top_apps['Category'],\n    mode = 'markers')]\n\nlayout = go.Layout(title = 'Pricing in top 6 categories')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","b96f9a32":"trace = [go.Pie(\n    values = df[df['Type'] == 'Free']['Installs'].value_counts(),\n    labels = df[df['Type'] == 'Free']['Installs'].value_counts().index)]\n\nlayout = go.Layout(title = 'Installs of free apps')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","b52f7d07":"trace = [go.Pie(\n    values = df[df['Type'] == 'Paid']['Installs'].value_counts(),\n    labels = df[df['Type'] == 'Paid']['Installs'].value_counts().index)]\n\nlayout = go.Layout(title = 'Installs of paid apps')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","b0e9a79e":"x = df[['Content Rating', 'Installs', 'Type']].copy()\nx.dropna(inplace = True)\nx = pd.DataFrame(x.groupby(['Content Rating', 'Installs'])['Type'].count())\nx.reset_index(inplace=True)\nx = x.pivot('Installs', 'Content Rating', 'Type')\n\nfor y in x:\n    x[y] = x[y].apply(lambda z: int(str(z).replace('nan', '0')) if 'nan' in str(z) else z)\n\nfig, ax = plt.subplots(figsize=(12,12))\nax = sns.heatmap(x, annot=True, cmap=sns.light_palette(\"green\"), fmt='.0f')\nax.set_title('Number of installs by content rating')\n\nplt.show()","d03480e2":"A large segment of market is owned by family and game apps.\n<br\/>\nInterestingly, medical and business apps are at 4th and 5th positions in the most installed apps category.","f205e756":"Most paid apps have prices between 0.99 and $20","2dd61f20":"## Free and Paid apps","cb32e668":"Free apps have significantly more installs than paid apps.\n<br\/>\nOnly 3 paid apps have 10M+ installs","1e44e294":"## Data Cleaning","98015746":"- Categories containing the most number of apps on the play store are Family and games. Interestingly, medicine and business are catching up.\n<br\/><br\/>\n- Most apps recieve a good rating, typically between 4.1 and 4.6\n<br\/><br\/>\n- Most apps from the top 100 most reviewed apps have a very good rating.\n<br\/><br\/>\n- Most apps with good rating have sizes less than 40 MB. Hence, users prefer apps with sizes less than 40MB\n<br\/><br\/>\n- Paid apps don't have better rating than free apps. There are many paid apps that have rating less than 4.0\n<br\/><br\/>\n- Most paid apps cost less than \\\\$20. There are a few spam paid apps that cost more than \\\\$300\n<br\/><br\/>\n- Medical apps cost more than other categories.\n<br\/><br\/>\n- Unsurprisingly, paid apps have fewer installations than free ones. There are very few paid apps that have very high number of installs.\n<br\/><br\/>\n- Most apps on the play store are rated for Everyone.","dfe962d4":"- Removing duplicate and null values.\n<br\/>\n- Converting sizes to MB\n<br\/>\n- Remove certain characters from the string and convert it into usable format.","66d72a90":"## Summary","840c7166":"Medical apps are generally priced higher than other apps","7eddb333":"## Installs","6bd4e75d":"The most reviewed apps generally have a rating around 4.3","a8e31fac":"**Pricing in top 6 categories**","0ec6a50c":"Most apps have sizes less than 40 MB\n<br\/>\n<br\/>\n**Let's check out the effect of size on ratings**","8f7202e1":"Let's look at the apps with price more than $250!","65d6fa36":"## Content Rating\nNumber of installs by content rating","1d017bf4":"Most apps have fairly good rating, between 4.1 and 4.6","ee9d89a4":"- Installs of free apps","b405a036":"Majority of the top rated apps have sizes less than 40 MB","3552e13b":"# Dataset\n<br\/>\nThe dataset contains information about apps on the Play store. It provides verious information about the apps like their category, price, size, etc.\n<br\/>\nThis dataset can be used to get information about the present android market to understand the behaviour of the customer on certain apps.\n<br\/>","6edc3bf1":"## Size\nLet's check out the sizes of the apps in the dataset","6a56e05b":"These are the spam apps intended just to earn money","e45171c2":"## App categories","e27be62d":"## Ratings\nLet's check out the ratings of the apps in the dataset","03929b8f":"## Reviews\nLet's check the ratings of the top 100 most reviewed apps","d0462556":"There are a few apps with prices more than $250! Let's remove them to get a better look at the chart","591a6f84":"- Installs of paid apps","d17fcb8d":"Paid apps don't really have better rating than free apps"}}