{"cell_type":{"915c6bfc":"code","39163cfc":"code","c8b92f91":"code","5c01a374":"code","69d24ed9":"code","5324798a":"code","0123089a":"code","466ff180":"code","8682e9f2":"code","0aa91f22":"code","f4e560f9":"code","056d2094":"code","3720dd5e":"code","c8fbd744":"code","70c58ab5":"code","394affb4":"code","0cbd3a2d":"code","9e614234":"code","dfcb316c":"code","5d5a5c5e":"code","783457ac":"code","5ec9c6d0":"code","63a90826":"code","b4086741":"code","cb0764a2":"code","f92907e8":"code","bb979939":"code","089007a0":"code","23d8124e":"code","aaf9da53":"code","82b7a8ce":"code","930b3c87":"code","5a500a82":"code","ca386024":"code","1e4a79ed":"code","e42b0789":"code","63766fff":"code","65175e8d":"code","954163f5":"code","c64b14eb":"code","0fcfe06a":"code","80e9b315":"code","7a479f83":"code","c7e6f06b":"code","279ece48":"markdown","031f1d6f":"markdown","84702073":"markdown","55480d49":"markdown","b5c9d6ad":"markdown","41d560f5":"markdown","49338852":"markdown","2cdbeff6":"markdown","1ccf3e73":"markdown","5846c597":"markdown","6b9b877c":"markdown","d5824154":"markdown","fb76188f":"markdown","cb16b87e":"markdown"},"source":{"915c6bfc":"import os\nimport gc\nimport re\n\nimport glob\nimport cv2\nimport math\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nimport hashlib\nfrom PIL import Image\n\nimport tensorflow as tf\nfrom IPython.display import SVG\n#import efficientnet.tfkeras as efn\nfrom keras.utils import plot_model\nimport tensorflow.keras.layers as L\nfrom keras.utils import model_to_dot\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.applications import DenseNet121\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.cm as cm\nimport matplotlib.image as mpimg\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\ntf.random.set_seed(0)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","39163cfc":"image_path = \"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/\"\ntrain = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\")","c8b92f91":"train.head()","5c01a374":"train.columns","69d24ed9":"train[['healthy', 'multiple_diseases', 'rust', 'scab']].sum()\n      \n      ","5324798a":"test.head()","0123089a":"submission.head()","466ff180":"print(\"Shape of Train is {}\".format(train.shape))\nprint(\"Shape of test is {}\".format(test.shape))\nprint(\"Shape of submission file| is {}\".format(submission.shape))","8682e9f2":"def load_images(image_id):\n    file_path = image_id + '.jpg'\n    images = cv2.imread(image_path + file_path)\n    return cv2.cvtColor(images, cv2.COLOR_BGR2RGB)\ntrain_image = train['image_id'][:100].progress_apply(load_images)     ","0aa91f22":"# We can plot images from pyplot, however  there are less functionalities in pyplot as compared to plotly.xpress\nimg = plt.imread(\"\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Train_0.jpg\")\nprint(img.shape)\nplt.imshow(img)","f4e560f9":"# There are more functionalities in Plotly Express, we can just hover over the images and see the pixel values\n\nfig = px.imshow(train_image[1])\nfig.show()","056d2094":"gc.collect()","3720dd5e":"temp = train[train['healthy'] ==1]\nimg_ids = ['..\/input\/plant-pathology-2020-fgvc7\/images\/'+i+'.jpg' for i in temp['image_id']]\n\n\n# Plotting the healthy images\nplt.figure(figsize = (24,5))\nfor ind, img in enumerate(img_ids[:4]):\n    plt.subplot(1,4,ind+1)\n    image = mpimg.imread(img)\n    plt.imshow(image)","c8fbd744":"temp = train[train['multiple_diseases'] == 1]\n\nimg_ids = ['..\/input\/plant-pathology-2020-fgvc7\/images\/'+i+'.jpg' for i in temp['image_id']]\n\n## Plotting the multiple disease images\nplt.figure(figsize = (24,5))\n\nfor ind,img in enumerate(img_ids[:4]):\n    plt.subplot(1,4, ind+1)\n    image = mpimg.imread(img)\n    plt.imshow(image)","70c58ab5":"temp = train[train['rust']== 1]\nimg_ids = ['..\/input\/plant-pathology-2020-fgvc7\/images\/'+i+'.jpg' for i in temp['image_id']]\n\nplt.figure(figsize= (24,5))\nfor ind, img in enumerate(img_ids[:4]):\n    plt.subplot(1,4, ind+1)\n    images = mpimg.imread(img)\n    plt.imshow(images)","394affb4":"temp = train[train['scab']==1]\nimg_id = ['..\/input\/plant-pathology-2020-fgvc7\/images\/'+i+'.jpg' for i in temp['image_id']]\n\nplt.figure(figsize = (24,5))\nfor ind, img in enumerate(img_id[:4]):\n    plt.subplot(1,4, ind+1)\n    images = mpimg.imread(img)\n    plt.imshow(images)","0cbd3a2d":"## No of entries in each category\n\nfig = px.parallel_categories(train[[\"healthy\", \"scab\", \"rust\", \"multiple_diseases\"]], color=\"healthy\", color_continuous_scale=\"sunset\",\\\n                             title=\"Parallel categories plot of targets\")\nfig.show()","9e614234":"def calculate_hash(im):\n    md5 = hashlib.md5()\n    md5.update(np.array(im).tostring())\n    \n    return md5.hexdigest()\n    \ndef get_image_meta(image_id, image_src, dataset='train'):\n    im = Image.open(image_src)\n    extrema = im.getextrema()\n\n    meta = {\n        'image_id': image_id,\n        'dataset': dataset,\n        'hash': calculate_hash(im),\n        'r_min': extrema[0][0],\n        'r_max': extrema[0][1],\n        'g_min': extrema[1][0],\n        'g_max': extrema[1][1],\n        'b_min': extrema[2][0],\n        'b_max': extrema[2][1],\n        'height': im.size[0],\n        'width': im.size[1],\n        'format': im.format,\n        'mode': im.mode\n    }\n    return meta","dfcb316c":"data = []\n\nDIR_INPUT = '\/kaggle\/input\/plant-pathology-2020-fgvc7'\n\n\nfor i, image_id in enumerate(tqdm(train['image_id'].values, total=train.shape[0])):\n    data.append(get_image_meta(image_id, DIR_INPUT + '\/images\/{}.jpg'.format(image_id)))","5d5a5c5e":"for i, image_id in enumerate(tqdm(test['image_id'].values, total=test.shape[0])):\n    data.append(get_image_meta(image_id, DIR_INPUT + '\/images\/{}.jpg'.format(image_id),'test'))","783457ac":"meta_df = pd.DataFrame(data)\n\nmeta_df.head()","5ec9c6d0":"meta_df.shape","63a90826":"duplicates = meta_df.groupby(by='hash')[['image_id']].count().reset_index()\nduplicates = duplicates[duplicates['image_id'] > 1]\nduplicates.reset_index(drop=True, inplace=True)\n\nduplicates = duplicates.merge(meta_df[['image_id', 'hash']], on='hash')\n\nduplicates.shape","b4086741":"duplicates.head(10)","cb0764a2":"# Drop the duplicate images \n# train = train['image_id'!=[]]","f92907e8":"fig = px.pie(labels=train.columns[1:],values=train.iloc[:, 1:].sum().values, \n             title=\"Pie Chart of Targets\",\n             names= train.columns[1:])\nfig.show()","bb979939":"print(tf.__version__)\nprint(tf.keras.__version__)","089007a0":"!pip install pyyaml h5py   # to save model checkpoint","23d8124e":"!pip install efficientnet\nimport efficientnet.tfkeras as efn","aaf9da53":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()","82b7a8ce":"nb_classes = 4\nBATCH_SIZE = 8 * strategy.num_replicas_in_sync\nimg_size = 768\nEPOCHS = 40","930b3c87":"path='..\/input\/plant-pathology-2020-fgvc7\/'\ntrain = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsub = pd.read_csv(path + 'sample_submission.csv')\n\ntrain_paths = train.image_id.apply(lambda x: GCS_DS_PATH + '\/images\/' + x + '.jpg').values\ntest_paths = test.image_id.apply(lambda x: GCS_DS_PATH + '\/images\/' + x + '.jpg').values\n\ntrain_labels = train.loc[:, 'healthy':].values","5a500a82":"def decode_image(filename, label=None, image_size=(img_size, img_size)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    if label is None:\n        return image\n    else:\n        return image, label\n    \ndef data_augment(image, label=None, seed=2020):\n    image = tf.image.random_flip_left_right(image, seed=seed)\n    image = tf.image.random_flip_up_down(image, seed=seed)\n           \n    if label is None:\n        return image\n    else:\n        return image, label","ca386024":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n    )","1e4a79ed":"test_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","e42b0789":"LR_START = 0.00001\nLR_MAX = 0.0001 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 15\nLR_SUSTAIN_EPOCHS = 3\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","63766fff":"def get_model():\n    base_model =  efn.EfficientNetB7(weights='imagenet', include_top=False, pooling='avg', input_shape=(img_size, img_size, 3))\n    x = base_model.output\n    predictions = Dense(nb_classes, activation=\"softmax\")(x)\n    return Model(inputs=base_model.input, outputs=predictions)","65175e8d":"with strategy.scope():\n    model = get_model()\n    \nmodel.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])","954163f5":"%%time\nmodel.fit(\n    train_dataset, \n    steps_per_epoch=train_labels.shape[0] \/\/ BATCH_SIZE,\n    callbacks=[lr_callback],\n    epochs=EPOCHS\n)","c64b14eb":"SVG(tf.keras.utils.model_to_dot(\n    model, show_shapes=False, show_layer_names=True, rankdir='TB',\n    expand_nested=False, dpi=72, subgraph=False).create(prog='dot', format='svg'))","0fcfe06a":"model.save('\/kaggle\/working\/efficientnet_model.hdf5')","80e9b315":"%%time\nprobs = model.predict(test_dataset)","7a479f83":"sub.loc[:, 'healthy':] = probs\nsub.to_csv('efnetsubmission.csv', index=False)\nsub.head()","c7e6f06b":"\"\"\"from tensorflow.keras.models import load_model\n#from tf.keras.models import load_model\nmodel= load_model('\/kaggle\/input\/efficientnetmodel\/efficientnet_model.hdf5')\n\n\"\"\"","279ece48":"# EDA ","031f1d6f":"It can be clearely seen that healthy leaves have any","84702073":"### TPU","55480d49":"# Visualizing the images \n\n## Healthy Images\n\n\n","b5c9d6ad":"## I will try modelling first and then it would be better to use augmentation to see the results improve or not.\n\n","41d560f5":"# References\n\nI have learnt immensely from these kernels. Upvote them as well if you like my work\n\nhttps:\/\/www.kaggle.com\/tarunpaparaju\/plant-pathology-2020-eda-models\n\nhttps:\/\/www.kaggle.com\/ateplyuk\/fork-of-plant-2020-tpu-915e9c\/data\n\n\n","49338852":"SAMPLE_LEN =100\n\ndef load_images(image_id):\n    file_path =image_id +'.jpg'\n    images = cv2.imread(image_path + file_path )\n    return cv2.cvtColor(images, cv2.COLOR_BGR2RGB)\ntrain_image = train['image_id'][:100].progress_apply(load_images) ","2cdbeff6":"## Lets check the duplicate images, for that we would need to find features of metadata","1ccf3e73":"## Loading images and converting them in suitable format","5846c597":"## Rust images","6b9b877c":" ## Multiple_disease images","d5824154":"## Scab Images","fb76188f":"####  There are 5 duplicate images out of 3642 images, i.e = 0.135 % of data. Also there is one duplicate image in train data, so we can ignore it.","cb16b87e":"## Checking Duplicates"}}