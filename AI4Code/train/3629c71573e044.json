{"cell_type":{"3b4c4f40":"code","11f2fabe":"code","2f84c778":"code","0385c182":"code","ac765587":"code","2f345cc6":"code","a16c0c25":"code","8a5beccf":"code","9a848c41":"code","dc9f280e":"code","cc973d02":"code","9ed0d1ff":"code","ae56c5d7":"code","ff00c8a2":"code","66fbde9f":"code","242104f6":"code","696df249":"code","780f7fc1":"code","fb0426c7":"code","60139720":"code","e1689b99":"markdown","305d0c93":"markdown","c7356ad5":"markdown","ec9b81aa":"markdown","ce26a179":"markdown","d3322f68":"markdown","2180fca2":"markdown","d80e0db6":"markdown","2577cdd4":"markdown","592a44fb":"markdown","cf8812b8":"markdown"},"source":{"3b4c4f40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11f2fabe":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","2f84c778":"file_name = \"\/kaggle\/input\/fruits-with-colors-dataset\/fruit_data_with_colors.txt\"","0385c182":"df = pd.read_csv(file_name, sep='\\t')","ac765587":"df.head()","2f345cc6":"print(df.fruit_label.unique())\nprint(df.fruit_name.unique())","a16c0c25":"name_pred = dict(zip(df.fruit_label.unique(),df.fruit_name.unique()))\n\nprint(name_pred[1],name_pred[2],name_pred[3],name_pred[4])\n","8a5beccf":"sns.pairplot(df, x_vars=['mass','width','height','color_score'], y_vars=['mass','width','height','color_score'])","9a848c41":"df = df.drop('fruit_subtype',axis=1)","dc9f280e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(df.drop(['fruit_label','fruit_name'], axis=1))\ndf_scd = scaler.transform(df.drop(['fruit_label','fruit_name'],axis=1))\n\ndf_scaled = pd.DataFrame(df_scd,columns=df.columns[2:])\ndf_scaled.head()","cc973d02":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(df_scaled, df.fruit_label,test_size=0.3)","9ed0d1ff":"print(df_scaled.shape)\nprint(x_train.shape)\nprint(x_test.shape)","ae56c5d7":"from sklearn.neighbors import KNeighborsClassifier\n\nKNN = KNeighborsClassifier(n_neighbors=1)\nKNN.fit(x_train,y_train)\npreds = KNN.predict(x_test)","ff00c8a2":"from sklearn.metrics import confusion_matrix,classification_report \n\nprint(confusion_matrix(y_test,preds))\nprint(classification_report(y_test,preds))","66fbde9f":"from sklearn.metrics import accuracy_score\n\nprint(\"AccuracyScore: \",accuracy_score(y_test, preds))","242104f6":"error_rate = []\nfor i in range(1,10):\n  knn1 = KNeighborsClassifier(n_neighbors=i)\n  knn1.fit(x_train,y_train)\n  preds1 = knn1.predict(x_test)\n  error_rate.append(np.mean(preds1 != y_test))","696df249":"plt.figure(figsize=(10,6))\nplt.plot(range(1,10),error_rate,color='blue',linestyle='dashed',marker='o',markerfacecolor='red',markersize=10)","780f7fc1":"KNN = KNeighborsClassifier(n_neighbors=4)\nKNN.fit(x_train,y_train)\npreds = KNN.predict(x_test)","fb0426c7":"print(confusion_matrix(y_test,preds))\nprint(classification_report(y_test,preds))\nprint(\"AccuracyScore: \",accuracy_score(y_test, preds))","60139720":"#prediction \nmassp = input(\"enter the mass:\")\nwidthp = input(\"enter the width:\")\nheightp = input(\"enter the height:\")\ncolor_scorep = input(\"enter the color_score:\")\narr = [[massp, widthp, heightp, color_scorep]]\narr_s = scaler.transform(arr)\npredp = KNN.predict(arr_s)\nprint(name_pred[predp[0]])","e1689b99":"# For K=3,4,5 the error is LOW.","305d0c93":"# Predict by running the below code","c7356ad5":"Split the data","ec9b81aa":"Now, scale the data using standard scaler.","ce26a179":"# Create KNN classifier with K = 1 for test purposes","d3322f68":"# ****Label to Name converter","2180fca2":"# Loading the Dataset","d80e0db6":"# Plotting the error vs K value graph to find best fit","2577cdd4":"# *The Accuracy is 100%*","592a44fb":"The fruit_subtype is of no use. So, drop it.","cf8812b8":"# Visualizing the Data"}}