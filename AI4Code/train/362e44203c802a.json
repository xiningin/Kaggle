{"cell_type":{"830ec4a1":"code","e34cdbd6":"code","ec90d8b7":"code","0eded284":"code","3591b91d":"code","f981cb2f":"code","d8486d25":"code","05dbb0b9":"code","6632de52":"code","68a4bebf":"code","02603955":"code","9e7f6975":"code","c8cc3427":"code","98c43cd8":"markdown","5ed37bfe":"markdown","ed12d258":"markdown","c28dd842":"markdown","8986eec7":"markdown","f85f8c6a":"markdown"},"source":{"830ec4a1":"import numpy as np \nimport pandas as pd \nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e34cdbd6":"'''data = pd.read_csv(\"..\/input\/Kerkar Initial Hard Model (UlterraTeratek).csv\")\ndata.head(3)'''\n'''data = pd.read_csv(\"..\/input\/snl2015swg\/SNL 2015 SWG data.csv\")\ndata.head(20)'''\ndata = pd.read_csv(\"..\/input\/data222\/SNL 2015 SWG data2.csv\")\ndata.head(20)","ec90d8b7":"def Plot_data_seaborn():\n    sns.set()\n    columns = ['UCS (psi)','WOB (lbf)','RPM','Db (inch)','BR','SR','Blade Count','ROP (ft\/hr)']\n    sns.pairplot(data[columns], size = 1.5 , kind ='scatter')\n    plt.show()\n    \ndef Turn_data_to_seperate_lists():\n    UCS = data['UCS (psi)']\n    WOB = data['WOB (lbf)']\n    RPM = data['RPM']\n    Db = data['Db (inch)']\n    BR = data['BR']\n    SR = data['SR']\n    Nb = data['Blade Count']\n    ROP_Data  = data['ROP (ft\/hr)']\n    \n    return UCS, WOB, RPM, Db, BR, SR, Nb, ROP_Data\n    \n\ndef Kerkar_Model(UCS, WOB, RPM, Db, BR, SR, Nb, w):\n    bx = (RPM**(1.02 - 0.02*Nb)) \/ (RPM**0.92)\n    CCS = UCS\n    \n    \n    \n    #ROP = (w[0]*WOB**w[1]*RPM**w[2]*math.cos(math.radians(SR))*bx) \/ (CCS**w[3]*Db*math.tan(math.radians(BR)))\n    ROP = ((w[0]*(WOB**w[1])*(RPM**w[2])*math.cos(math.radians(SR))) \/ ((CCS**w[3])*Db*math.tan(math.radians(BR))))*(60\/12)\n    return ROP\n\n\n'''    BR = 15 + 41\n    SR = 1\n    WOB = WOB \/ 10\n    CCS = 28000'''\n\ndef Objective_Function(w):\n    \n    Error = 0\n    ROP_pred_list = []\n    ROP_pred_list = [Kerkar_Model(UCS, WOB, RPM, Db, BR, SR, Nb, w) for UCS, WOB, RPM, Db, BR, SR, Nb in zip(UCS, WOB, RPM, Db, BR, SR, Nb)]\n    Error = [((abs(ROP_Data - ROP_pred))\/ROP_Data) for ROP_Data, ROP_pred in zip(ROP_Data, ROP_pred_list)] \n    Ave_Error = sum(Error) \/ len(ROP_Data)\n    return Ave_Error\n\ndef De_Algorithm(fobj, bounds, mut=0.8, crossp=0.7, popsize=100, its=1000):\n    dimensions = len(bounds)\n    pop = np.random.rand(popsize, dimensions)\n    min_b, max_b = np.asarray(bounds).T\n    diff = np.fabs(min_b - max_b)\n    pop_denorm = min_b + pop * diff\n    fitness = np.asarray([fobj(ind) for ind in pop_denorm])\n    best_idx = np.argmin(fitness)\n    best = pop_denorm[best_idx]\n    for i in range(its):\n        for j in range(popsize):\n            idxs = [idx for idx in range(popsize) if idx != j]\n            a, b, c = pop[np.random.choice(idxs, 3, replace = False)]\n            mutant = np.clip(a + mut * (b - c), 0, 1)\n            cross_points = np.random.rand(dimensions) < crossp\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, dimensions)] = True\n            trial = np.where(cross_points, mutant, pop[j])\n            trial_denorm = min_b + trial * diff\n            f = fobj(trial_denorm)\n            if f < fitness[j]:\n                fitness[j] = f\n                pop[j] = trial\n                if f < fitness[best_idx]:\n                    best_idx = j\n                    best = trial_denorm\n                    \n                    \n        #print(\"Iteration number= %s\" % (i))\n        #print(\"Best Fitness= %s\" % (fitness[best_idx]))\n        #print(\"Best values= %s\" % (best))\n        yield best, fitness[best_idx]\n\ndef Run_DEA(ite):\n    results = []\n    result = list(De_Algorithm(Objective_Function, \n                 [(0.001, 0.1),    \n                  (0, 2),\n                  (0, 2),\n                  (0, 2)], \n                  mut=0.7, crossp=0.8, popsize=15, its=ite))\n    \n    df = pd.DataFrame(result)\n    return results, df\n\n\ndef Best_coffs(df):\n    \n    df['w1'], df['w2'], df['w3'], df['w4']  = zip(*df[0]) # Unzip\n    cols = [0] # Drop the first column\n    df.drop(df.columns[cols],axis = 1,inplace = True) # Drop the first column\n    df.columns.values[0] = \"Fitness\" # name the first column as Fitness\n    best_coff = df.iloc[len(df)-1,1:] # insert the best coefficients into the best_coff\n    \n    return best_coff\n\ndef Plot_DEA_Evolution(df):\n    \n    data_ncol=len(df.columns) # number of paramters \n    fig = plt.figure(figsize=(15,15)) # you may change these to change the distance between plots.\n\n    for i in range(1,(data_ncol+1)):\n        if i<data_ncol:\n            plt.subplot(3, 3, i)\n            plt.plot(df['w{}'.format(i)],'bo', markersize=4)\n            plt.xlabel('Iteration')\n            plt.ylabel('w{}'.format(i))\n            plt.grid(True)\n        else:       \n            plt.subplot(3, 3, data_ncol)\n            plt.plot(df['Fitness'],'red', markersize=4)\n            plt.xlabel('Iteration')\n            plt.ylabel('Fitness')\n            plt.grid(True)\n    plt.show()\n\ndef Plot_variables(x, y, xlab, ylab, xmin, xmax, ymin, ymax):\n    \n    fig = plt.figure(figsize=(7,7))\n    plt.scatter(x, y)\n    plt.xlim(xmin,xmax)\n    plt.ylim(ymin,ymax)\n    plt.xlabel(xlab)\n    plt.ylabel(ylab)","0eded284":"#Plot_data_seaborn()","3591b91d":"UCS, WOB, RPM, Db, BR, SR, Nb, ROP_Data = Turn_data_to_seperate_lists()\nresults, df = Run_DEA(300)\nbest_coff = Best_coffs(df)","f981cb2f":"print(best_coff)","d8486d25":"Plot_DEA_Evolution(df)","05dbb0b9":"Est_ROP_Model = [Kerkar_Model(UCS, WOB, RPM, Db, BR, SR, Nb, best_coff) for UCS, WOB, RPM, Db, BR, SR, Nb in zip(UCS, WOB, RPM, Db, BR, SR, Nb)]\nEst_ROP_Model = pd.DataFrame(Est_ROP_Model)\nROP_Data = pd.DataFrame(ROP_Data)","6632de52":"Plot_variables(ROP_Data, Est_ROP_Model, 'ROP Data ft\/hr', 'ROP Model ft\/hr', 0, 60, 0, 60)","68a4bebf":"fig = plt.figure(figsize=(7,7))\nplt.scatter(WOB[0:9], ROP_Data[0:9])\nplt.plot(WOB[0:9], Est_ROP_Model[0:9])\n\nplt.scatter(WOB[9:18], ROP_Data[9:18])\nplt.plot(WOB[9:18], Est_ROP_Model[9:18])\n\nplt.scatter(WOB[19:27], ROP_Data[19:27])\nplt.plot(WOB[19:27], Est_ROP_Model[19:27])\n\nplt.scatter(WOB[27:33], ROP_Data[27:33])\nplt.plot(WOB[27:33], Est_ROP_Model[27:33])\n\nplt.scatter(WOB[33:39], ROP_Data[33:39])\nplt.plot(WOB[33:39], Est_ROP_Model[33:39])\n\nplt.xlabel(\"WOB lbf\")\nplt.ylabel(\"ROP ft\/hr\")","02603955":"Est_ROP_Model.to_csv('Est_ROP_Model_csv_to_submit.csv', index = False)","9e7f6975":"def Kerkar_Model(UCS, WOB, RPM, Db, BR, SR, Nb, w):\n    bx = (RPM**(1.02 - 0.02*Nb)) \/ (RPM**0.92)\n    CCS = UCS\n\n    \n    #ROP = (w[0]*WOB**w[1]*RPM**w[2]*math.cos(math.radians(SR))*bx) \/ (CCS**w[3]*Db*math.tan(math.radians(BR)))\n    ROP = ((w[0]*(WOB**w[1])*(RPM**w[2])*math.cos(math.radians(SR))) \/ ((CCS**w[3])*Db*math.tan(math.radians(BR))))*(60\/12)\n    return ROP\n\n\nUCS = 28000\nWOB = 230\nRPM = 100\nDb = 3.75\nBR = 15 + 41\nSR = 1\nNb = 4\nw = [0.005804, 2.61, 0.7, 0.97]\n\nKerkar_Model(UCS, WOB, RPM, Db, BR, SR, Nb, w)","c8cc3427":"import pandas as pd\nSNL 2015 SWG data2 = pd.read_csv(\"..\/input\/SNL 2015 SWG data2.csv\")","98c43cd8":"### DEA agents visualization","5ed37bfe":"### Run program","ed12d258":"### Data","c28dd842":"### Import libraries","8986eec7":"### Define Functions and Models","f85f8c6a":"### Data visualization"}}