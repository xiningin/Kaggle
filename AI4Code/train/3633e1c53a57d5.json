{"cell_type":{"829ad174":"code","2067ee24":"code","6ed10398":"code","f8008a51":"code","d4d56009":"code","41dda85b":"code","4ecd9a49":"code","7cad672b":"code","b001c801":"code","fca192b7":"code","2ef1ef63":"code","e658d9c7":"code","54be6d94":"code","f49bdacb":"code","2ccfeec8":"code","33abd4bc":"code","684e282f":"code","d1478ee2":"code","8b25c4b9":"code","6311f5c6":"code","016c602d":"code","b58932cf":"code","e7f770dc":"code","e31a562e":"code","ca515610":"code","494ced15":"code","b50b4c81":"code","681638bc":"code","34a95fef":"code","6ad2dfa2":"code","a12faa2a":"code","5bcd6d9c":"code","8cda885f":"code","e0416313":"code","0cb3bede":"code","7fbc2666":"code","524a629f":"code","5eec7ca5":"code","b43f00f5":"code","19ed72e8":"code","59b22963":"code","97aeefd8":"code","1b3dd706":"code","e596961e":"code","d944652a":"code","9f9262ba":"code","b2afe70d":"code","db6e3c2f":"code","65a564d1":"code","b07cd775":"code","5e5fe11c":"code","046a28c7":"code","64b47350":"code","61f92cc5":"code","973300bc":"code","439adf47":"markdown","9245b85b":"markdown","3542e988":"markdown","39958ece":"markdown","0658e09a":"markdown","b782dd1e":"markdown","fefc19fe":"markdown","55b18d13":"markdown","31e012fe":"markdown","15222883":"markdown","890d232d":"markdown","00d4373b":"markdown","598bae0d":"markdown","eed9d69f":"markdown","ffb1dee5":"markdown","35ef36db":"markdown","509f9605":"markdown","d2d20884":"markdown","85403833":"markdown","221ed0af":"markdown","569880cd":"markdown","7c37545b":"markdown","65e081b3":"markdown","c32de627":"markdown"},"source":{"829ad174":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly as py\nimport plotly.graph_objs as go\nimport seaborn as sns\nsns.set(style = 'dark')\nimport random\nfrom collections import Counter as counter\nfrom IPython.display import HTML\nimport os\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected = True)","2067ee24":"HTML('''\n<script>\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"><\/form>''')","6ed10398":"fifa_df = pd.read_csv('..\/input\/bpl-players\/bpl_players.csv')","f8008a51":"pd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)","d4d56009":"useful_features = ['Name',\n                   'Age',\n                   'Photo', \n                   'Nationality', \n                   'Flag',\n                   'Overall',\n                   'Potential', \n                   'Club', \n                   'Club Logo', \n                   'Value',\n                   'Wage',\n                   'Preferred Foot',\n                   'International Reputation',\n                   'Weak Foot',\n                   'Skill Moves',\n                   'Work Rate',\n                   'Body Type',\n                   'Position',\n                   'Joined', \n                   'Contract Valid Until',\n                   'Height',\n                   'Weight',\n                   'Crossing', \n                   'Finishing',\n                   'HeadingAccuracy',\n                   'ShortPassing', \n                   'Volleys', \n                   'Dribbling',\n                   'Curve',\n                   'FKAccuracy',\n                   'LongPassing',\n                   'BallControl',\n                   'Acceleration',\n                   'SprintSpeed',\n                   'Agility',\n                   'Reactions', \n                   'Balance',\n                   'ShotPower', \n                   'Jumping',\n                   'Stamina', \n                   'Strength',\n                   'LongShots',\n                   'Aggression',\n                   'Interceptions',\n                   'Positioning', \n                   'Vision', \n                   'Penalties',\n                   'Composure',\n                   'Marking',\n                   'StandingTackle', \n                   'SlidingTackle',\n                   'GKDiving',\n                   'GKHandling',\n                   'GKKicking',\n                   'GKPositioning',\n                   'GKReflexes']","41dda85b":"df = pd.DataFrame(fifa_df , columns = useful_features)","4ecd9a49":"class fast_plot():\n    def __init__(self):\n        c = ['r' , 'g' , 'b' , 'y' , 'orange' , 'grey' , 'lightcoral' , 'crimson' , \n            'springgreen' , 'teal' , 'c' , 'm' , 'gold' , 'skyblue' , 'darkolivegreen',\n            'tomato']\n        self.color = c\n        \n    \n    def regplot_one_vs_many(self , x  , y  , data , rows , cols):\n        color_used = []\n        \n        n = 0\n        for feature in y:\n            \n            for i in range(1000):\n                colour = random.choice(self.color)\n                if colour not in color_used:\n                    color_used.append(colour)\n                    break\n                    \n            n += 1 \n            plt.subplot(rows , cols , n)\n            plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n            sns.regplot(x  = x , y = feature , data = data , \n                        color = colour)\n    \n    def bar_plot(self , x = None, y = None, data = None ,x_tick_rotation = None ,xlabel = None , ylabel = None , title = ''):\n        ax = sns.barplot(x = x , y = y , data = data , palette = 'rocket')\n        rects = ax.patches\n        for rect , label in zip(rects , data[y]):\n            height = rect.get_height()\n            ax.text(rect.get_x() + rect.get_width() \/ 2, height + (height * 0.1 \/100), round(label,1),\n                    ha='center', va='bottom')\n        if not xlabel == None and not ylabel == None:\n            plt.xlabel(xlabel)\n            plt.ylabel(ylabel)\n        if not x_tick_rotation == None:\n            plt.xticks(rotation = x_tick_rotation)\n        plt.title(title)\n        \n        \nplots = (fast_plot())","7cad672b":"plt.figure(1 , figsize = (15 , 6))\ndf['Age'].plot(kind = 'hist' , bins = 50)\nplt.title('Histogram of Age of players')\nplt.show()","b001c801":"df.sort_values(by = 'Age' , ascending = False)[['Name','Club','Nationality'\n                                               ,'Overall', 'Age' ]].head(5)","fca192b7":"df.sort_values(by = 'Age' , ascending = True)[['Name','Age','Club','Nationality'\n                                               ,'Overall' ]].head(5)","2ef1ef63":"vals = ['Stamina' , 'Strength' , 'Acceleration','SprintSpeed' , 'Agility' , 'Jumping' ,\n       'Vision','Reactions']\nplt.figure(1 , figsize = (15 , 10))\nplots.regplot_one_vs_many(x = 'Age' , y = vals , data = df , rows = 2 , cols = 4 )\nplt.show()","e658d9c7":"plt.figure(1 , figsize = (15 , 6))\nsns.regplot(df['Age'] , df['Overall'])\nplt.title('Scatter Plot of Age vs Overall rating')\nplt.show()","54be6d94":"vals = ['Tottenham Hotspur' , 'Juventus' , 'Paris Sain-Germain' ,'FC Bayern M\u00fcnchen',\n       'Real Madrid' , 'FC Barcelona' , 'Borussia Dortmund' , 'Manchester United' , \n       'FC Porto' , 'As Monaco' , 'BSC Young Boys']\ndf_club_age = df.loc[df['Club'].isin(vals) & df['Age']]\nplt.figure(1 , figsize = (15 ,7))\nsns.violinplot(x = 'Club' , y = 'Age' , data = df_club_age)\nplt.title('Age Distribution in some clubs')\nplt.xticks(rotation = 50)\nplt.show()","f49bdacb":"vals = ['England' , 'Brazil' , 'Portugal' ,'Argentina',\n       'Italy' , 'Spain' , 'Germany' , 'Russia' , \n       'Chile' , 'Japan' , 'India']\ndf_club_age = df.loc[df['Nationality'].isin(vals) & df['Age']]\nplt.figure(1 , figsize = (15 ,7))\nsns.violinplot(x = 'Nationality' , y = 'Age' , data = df_club_age)\nplt.title('Age Distribution in some of the Nations')\nplt.xticks(rotation = 50)\nplt.show()","2ccfeec8":"plt.figure(1 , figsize = (15 , 7))\ncountries = []\nc = counter(df['Nationality']).most_common()[:11]\nfor n in range(11):\n    countries.append(c[n][0])\n\nsns.countplot(x  = 'Nationality' ,\n              data = df[df['Nationality'].isin(countries)] ,\n              order  = df[df['Nationality'].isin(countries)]['Nationality'].value_counts().index , \n             palette = 'rocket') \nplt.xticks(rotation = 90)\nplt.title('Maximum number footballers belong to which country' )\nplt.show()\n","33abd4bc":"plt.figure(1 , figsize = (15 , 7))\ndf['Overall'].plot(kind = 'hist' , bins = 50 )\nplt.title('Histogram of Overall players ratings out of 100')\nplt.show()","684e282f":"df_best_players = pd.DataFrame.copy(df.sort_values(by = 'Overall' , \n                                                   ascending = False ).head(20))\n\nplt.figure(1 , figsize = (15 , 5))\nplots.bar_plot(x ='Name' , y = 'Overall' , data = df_best_players , \n              x_tick_rotation = 50 , xlabel = 'Name of Players' , \n              ylabel = 'Overall Rating out of 100' ,\n               title = 'Top 20 players according to Overall Rating out of 100')\nplt.ylim(80 , 95)\nplt.show()","d1478ee2":"player_features = ['Crossing', 'Finishing', 'HeadingAccuracy',\n       'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n       'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n       'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n       'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n       'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n       'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']","8b25c4b9":"best_dict = {}\nfor club in df['Club'].unique():\n    overall_rating = df['Overall'][df['Club'] == club].sum()\n    best_dict[club] = overall_rating\ndf_bcp = pd.DataFrame.from_dict(best_dict , orient = 'index' , \n                                                 columns = ['overall'])\ndf_bcp['club'] = df_bcp.index\ndf_bcp = df_bcp.sort_values(by = 'overall' , ascending =  False)\n\nplt.figure(1 , figsize = (15 , 6))\nplots.bar_plot(x = 'club' , y  = 'overall' , data = df_bcp.head(20) , \n              x_tick_rotation = 70 , xlabel = 'Club' , \n              ylabel = 'Sum of OverAll Rating of players in club',\n              title = 'Clubs with best Players (sum of overall ratings of players per club)')\nplt.ylim(1900 , 2600)\nplt.show()","6311f5c6":"df[df[\"Club\"] == \"Manchester United\"][['Name' , 'Position' , 'Overall' , 'Age']]","016c602d":"best_dict = {}\nfor nation in df['Nationality'].unique():\n    overall_rating = df['Overall'][df['Nationality'] == nation].sum()\n    best_dict[nation] = overall_rating\ndf_bnp = pd.DataFrame.from_dict(best_dict , orient = 'index' , \n                                                 columns = ['overall'])\ndf_bnp['nation'] = df_bnp.index\ndf_bnp = df_bnp.sort_values(by = 'overall' , ascending =  False)\n\nplt.figure(1 , figsize = (15 , 6))\nplots.bar_plot(x = 'nation' , y = 'overall' , data = df_bnp.head(10) , \n              x_tick_rotation = 50 , xlabel = 'Countries' , \n              ylabel = 'Sum of Overall Rating of players w.r.t Nationality',\n              title = 'Countries with best Players (sum of overall ratings of players per club)')\nplt.show()","b58932cf":"plt.figure(1 , figsize = (15 , 6))\ndf['Potential'].plot(kind = 'hist' , bins = 50)\nplt.title('Histogram of Potential of players (out of 100)')\nplt.show()","e7f770dc":"def cleaning_value(x):\n    if '\u20ac' in str(x) and 'M' in str(x):\n        c = str(x).replace('\u20ac' , '')\n        c = str(c).replace('M' , '')\n        c = float(c) * 1000000\n        \n    else:\n        c = str(x).replace('\u20ac' , '')\n        c = str(c).replace('K' , '')\n        c = float(c) * 1000\n            \n    return c\n\nfn = lambda x : cleaning_value(x)\n\ndf['Value_num'] = df['Value'].apply(fn)","e31a562e":"df.sort_values(by = 'Value_num' , ascending = False)[['Name' , 'Club' , 'Nationality' , \n                                                     'Overall' , 'Value' , 'Wage']].head(5)","ca515610":"df.sort_values(by = 'ShotPower' , ascending = False)[['Name' , 'Club' , 'Nationality' , \n                                                     'ShotPower' ]].head(5)","494ced15":"df.sort_values(by = 'LongPassing' , ascending = False)[['Name' , 'Club' , 'Nationality' , \n                                                     'LongPassing']].head(5)","b50b4c81":"df.sort_values(by = 'Vision' , ascending = False)[['Name' , 'Club' , 'Nationality' , \n                                                     'Vision' ]].head(5)","681638bc":"plt.figure(1 , figsize = (25 , 16))\nn = 0\nfor feat in player_features:\n    n += 1\n    plt.subplot(6 , 6 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    df[feat].plot(kind = 'hist' , bins = 50)\n    plt.ylabel('')\n    plt.xlabel(feat)\n\nplt.show()","34a95fef":"vals = ['ShortPassing' , 'LongPassing' , 'Crossing']\nplt.figure(1 , figsize = (15 , 9))\nplots.regplot_one_vs_many(x = 'ShotPower' , y = vals , data = df , \n                         rows = 1 , cols = 3)\nplt.show()","6ad2dfa2":"vals = ['Dribbling' , 'Acceleration' , 'SprintSpeed']\nplt.figure(1 , figsize = (15 , 6))\nplots.regplot_one_vs_many(x = 'BallControl' , y = vals , data = df , \n                         rows = 1 , cols = 3)\nplt.show()","a12faa2a":"vals = ['HeadingAccuracy' , 'FKAccuracy' , 'Volleys' , 'Penalties' , 'LongShots']\nplt.figure(1 , figsize = (15 , 9))\nplots.regplot_one_vs_many(x = 'Finishing', y = vals , data = df , \n                         rows = 2 , cols = 3)\nplt.show()","5bcd6d9c":"def scatter3D(x , y , z , txt , xlabel , ylabel , zlabel , title):\n    camera = dict(\n        up=dict(x=0, y=0, z=1),\n        center=dict(x=0, y=0, z=0),\n        eye=dict(x=2, y=2, z=0.1))\n    trace0 = go.Scatter3d(\n        x = x,\n        y = y,\n        z = z,\n        mode = 'markers',\n        text  = txt,\n        marker = dict(\n            size = 12,\n            color = z,\n            colorscale = 'Viridis',\n            showscale = True,\n            line = dict(\n                color = 'rgba(217 , 217 , 217 , 0.14)',\n                width = 0.5\n            ),\n            opacity = 0.8\n        )\n    )\n    \n    layout = go.Layout(\n        title = title,\n        scene = dict(\n            camera = camera,\n            xaxis = dict(title  = xlabel),\n            yaxis = dict(title  = ylabel),\n            zaxis = dict(title  = zlabel)\n        )\n    )\n    data = [trace0]\n    fig = go.Figure(data = data , layout = layout)\n    py.offline.iplot(fig)","8cda885f":"scatter3D(df['Acceleration'].where(df['Acceleration'] > 80) ,\n         df['Composure'].where(df['Composure'] > 80),\n         df['Finishing'].where(df['Finishing'] > 80), \n         df['Name'],\n         'Acceleration' , \n         'Composure',\n         'Finishing',\n         'Best Finishers')","e0416313":"scatter3D(df['LongPassing'].where(df['LongPassing'] > 85) ,\n         df['ShortPassing'].where(df['ShortPassing'] > 85) , \n         df['Vision'].where(df['Vision'] > 85) , \n         df['Name'],\n         'Long passing' , 'Short passing' , 'Vision' , \n         'Players who can give amazing assits or passes')","0cb3bede":"scatter3D(df['Volleys'].where(df['Volleys'] > 80) ,\n         df['Curve'].where(df['Curve'] > 80),\n         df['ShotPower'].where(df['ShotPower'] > 80),\n         df['Name'],\n         'Volleys','Curve' , 'Shot Power',\n         'Players who can score lightning fast Volley goals')","7fbc2666":"scatter3D(df['Finishing'].where(df['Finishing'] > 80) ,\n         df['Vision'].where(df['Vision'] > 80),\n         df['Penalties'].where(df['Penalties'] > 80),\n         df['Name'],\n         'Finishing','Vision' , 'Penalties',\n         'Players who can take perfect penalties')","524a629f":"scatter3D(df['Dribbling'].where(df['Dribbling'] > 85) ,\n         df['SprintSpeed'].where(df['SprintSpeed'] > 85),\n         df['Finishing'].where(df['Finishing'] > 85),\n         df['Name'],\n         'Dribbling','Sprint Speed' , 'Finishing',\n         'Players who can score amazing solo goals.')","5eec7ca5":"scatter3D(df['Skill Moves'].where(df['Skill Moves'] >= 0.4) ,\n         df['BallControl'].where(df['BallControl'] > 85),\n         df['Reactions'].where(df['Reactions'] > 85),\n         df['Name'],\n         'Skill Moves', 'Ball Control' , 'Reactions',\n         'Players with amazing footwork. ')","b43f00f5":"scatter3D(df['HeadingAccuracy'].where(df['HeadingAccuracy'] > 85) ,\n         df['Jumping'].where(df['Jumping'] > 85),\n         df['Finishing'].where(df['Finishing'] > 85),\n         df['Name'],\n         'Heading Acc', 'Jumping' , 'Finishing',\n         'Players who can score header goal from a corner at crucial time')","19ed72e8":"scatter3D(df['Vision'].where(df['Vision'] > 80) ,\n         df['FKAccuracy'].where(df['FKAccuracy'] > 80),\n         df['LongPassing'].where(df['LongPassing'] > 80),\n         df['Name'],\n         'Vision', 'Free kick Acc' , 'Long passing',\n         'Freekick specialists')","59b22963":"scatter3D(df['LongShots'].where(df['LongShots'] > 82) ,\n         df['ShotPower'].where(df['ShotPower'] > 82),\n         df['Finishing'].where(df['Finishing'] > 82),\n         df['Name'],\n         'LongShots','Shot Power' , 'Finishing',\n         'Players who can score from long distance.')","97aeefd8":"scatter3D(df['SlidingTackle'].where(df['SlidingTackle'] > 80) ,\n         df['Strength'].where(df['Strength'] > 80),\n         df['Aggression'].where(df['Aggression'] > 80),\n         df['Name'],\n         'Sliding Tackle','Strenght' , 'Aggression',\n         'Badass Defenders.')","1b3dd706":"scatter3D(df['Marking'].where(df['Marking'] > 85) ,\n         df['Strength'].where(df['Strength'] > 85),\n         df['StandingTackle'].where(df['StandingTackle'] > 85),\n         df['Name'],\n         'Marking','Strength' , 'Standing Tackle',\n         'Best Defenders')","e596961e":"scatter3D(df['GKDiving'].where(df['GKDiving'] > 85) ,\n         df['GKReflexes'].where(df['GKReflexes'] > 85),\n         df['GKPositioning'].where(df['GKPositioning'] > 85),\n         df['Name'],\n         'Diving','Reflexes' , 'Positioning',\n         'Best Goal Keepers')","d944652a":"scatter3D(df['Potential'].where(df['Potential'] > 85) ,\n         df['Value_num'].where(df['Value_num'] > 85),\n         df['Finishing'].where(df['Finishing'] > 85),\n         df['Name'],\n         'Potential','Value' , 'Finishing',\n         'Attackers who are worth for their value.')","9f9262ba":"scatter3D(df['Age'].where(df['Age'] < 22) ,\n         df['Finishing'].where(df['Finishing'] > 80),\n         df['Potential'].where(df['Potential'] > 80),\n         df['Name'],\n         'Volleys','Curve' , 'Shot Power',\n         'Best attackers with age less than 22')","b2afe70d":"plt.figure(1 , figsize = (15 , 6))\nsns.countplot(x = 'Position' , data = df , palette = 'inferno_r' )\nplt.title('Count Plot of Postions of player')\nplt.show()","db6e3c2f":"for i, val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(3).index)))","65a564d1":"idx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","b07cd775":"df_postion  = pd.DataFrame()\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    df_postion[position_name] = tuple(top_features)\ndf_postion.head()","5e5fe11c":"posi = []\nplayer = []\nclub_l = []\nfor col in df_postion.columns:\n    tmp_df = pd.DataFrame()\n    #print(col)\n    l = [df_postion[col].values]\n    l = l[0]\n    l = list(l)\n    l.append('Name')\n    tmp_df = pd.DataFrame.copy(df[df['Position'] == col][l])\n    tmp_df['mean'] = np.mean(tmp_df.iloc[: , :-1] , axis = 1)\n    name = tmp_df['Name'][tmp_df['mean'] == tmp_df['mean'].max()].values[0]\n    club = df['Club'][df['Name'] == str(name)].values[0]\n    posi.append(col)\n    player.append(name)\n    club_l.append(club)\n    #print('{0} \\nClub : {1}'.format(name ,club ) )\ngk = ['GK']\nforward = ['LS', 'ST', 'RS','LF', 'CF', 'RF']\nmidfeilder = ['LW','RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM',\n              'RCM', 'RM', 'LDM', 'CDM', 'RDM' ]\ndefenders = ['LWB','RWB', 'LB', 'LCB', 'CB',]\n\nprint('GoalKeeper : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in gk:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nFORWARD : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in forward:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nMIDFEILDER : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in midfeilder:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nDEFENDER : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in defenders:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))","046a28c7":"CAM = 'H. Nakagawa'\nCB = 'D. God\u00edn'\nCDM = 'Casemiro'\nCF = 'S. Giovinco'\nCM = 'N. Ke\u00efta'\nGK = 'De Gea'\nLAM = 'Paulo Daineiro'\nLB = 'Jordi Alba'\nLCB = 'G. Chiellini'\nLCM = 'David Silva'\nLDM = 'N. Kant\u00e9' \nLF = 'E. Hazard' \nLM = 'Douglas Costa' \nLS = 'J. Mart\u00ednez' \nLW = 'Neymar Jr' \nLWB = 'M. Pedersen' \nRAM = 'J. Cuadrado' \nRB = 'N\u00e9lson Semedo' \nRCB = 'Sergio Ramos' \nRCM = 'L. Modri\u0107' \nRDM = 'P. Pogba' \nRF = 'L. Messi' \nRM = 'Gelson Martins' \nRS = 'A. Saint-Maximin' \nRW = 'R. Sterling' \nRWB = 'M. Millar' \nST = 'Cristiano Ronaldo' ","64b47350":"def create_football_formation(formation = [] , label_1 = None ,\n                              label_2 = None , label_3 = None ,\n                              label_4 = None,label_4W = None ,\n                              label_5 = None , label_3W = None):\n    \n    plt.scatter(x = [1] , y = [6] , s = 300 , color = 'blue')\n    plt.annotate('De Gea \\n(Manchester United)' , (1 - 0.5 , 6 + 0.5))\n    plt.plot(np.ones((11 , ))*1.5 , np.arange(1 , 12) , 'w-')\n    plt.plot(np.ones((5 , ))*0.5 , np.arange(4 , 9) , 'w-')\n    \n    n = 0\n    for posi in formation:\n        if posi ==  1:\n            n += 3\n            dot = plt.scatter(x = [n]  , y = [6] , s = 400 , color = 'white')\n            plt.scatter(x = [n]  , y = [6] , s = 300 , color = 'red')\n            for i, txt in enumerate(label_1):\n                txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                plt.annotate(txt, ( n-0.5 , 6+0.5))\n            \n        elif posi == 2:\n            n += 3\n            y = [5 , 7.5]\n            x = [ n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_2):\n                txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')') \n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n        elif posi == 3:\n            n+=3\n            y = [3.333 , 6.666 , 9.999]\n            x = [n , n  , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_3):\n                txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n            if not label_3W == None:\n                n+=3\n                y = [3.333 , 6.666 , 9.999]\n                x = [n , n  , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_3W):\n                    txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n        elif posi == 4 and not label_4 == None:\n            n+=3\n            y = [2.5 , 5 , 7.5 , 10]\n            x = [n , n  , n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_4):\n                txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n            if not label_4W == None:\n                n+=3\n                y = [2.5 , 5 , 7.5 , 10]\n                x = [n , n  , n , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_4W):\n                    txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n                \n        elif posi == 5:\n            n+=3\n            y = [2 , 4 , 6 , 8 , 10]\n            x = [n , n , n  , n  , n]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_5):\n                txt = str(txt+'\\n('+df['Club'][df['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n    plt.plot(np.ones((5 , ))*(n+0.5) , np.arange(4 , 9) , 'w-')\n    plt.plot(np.ones((11 , ))*(n\/2) , np.arange(1 , 12) , 'w-')\n    plt.yticks([])\n    plt.xticks([])\n    ax = plt.gca()\n    ax.set_facecolor('tab:green')            ","61f92cc5":"plt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('Best Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LAM , LDM , RDM , RAM],\n                         label_2 = [LS , RS],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LDM , RDM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LCM , RCM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LF , CAM , RF],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LB , RB , RWB],\n                         label_2 = [LAM , RAM],\n                         label_3 = [LW , CF , RW],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))\ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , CB , RCB , RWB],\n                         label_2 = [CM , CAM],\n                         label_3 = [LF , CM , RF],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\n\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LDM , CAM , RDM],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 5, 4 , 1 ] , \n                         label_5 = [LWB , LCB , CB , RCB , RWB],\n                         label_4 = [LW, LDM , RDM , RW],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 5-4-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_3 = [LW, CAM , RW],\n                         label_3W = [LF , ST , RF])\nplt.title('Best Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CM , RAM],\n                         label_3W = [LS , CF , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LB , LCB , RCB , RB],\n                         label_3 = [LDM, CDM , RDM],\n                         label_3W = [LF , CF , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CAM , RAM],\n                         label_3W = [LS , ST , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LCM, CAM , RCM],\n                         label_3W = [LF , ST , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n","973300bc":"df_young = pd.DataFrame.copy(df[df['Age'] <=22])\ndf_position_y = pd.DataFrame.copy(df_postion)\ndel df_position_y['RAM']\ndf_young.head()\nposi = []\nplayer = []\nclub_l = []\nfor col in df_position_y.columns:\n    tmp_df = pd.DataFrame()\n    #print(col)\n    l = [df_postion[col].values]\n    l = l[0]\n    l = list(l)\n    l.append('Name')\n    tmp_df = pd.DataFrame.copy(df_young[df_young['Position'] == col][l])\n    tmp_df['mean'] = np.mean(tmp_df.iloc[: , :-1] , axis = 1)\n    name = tmp_df['Name'][tmp_df['mean'] == tmp_df['mean'].max()].values[0]\n    club = df_young['Club'][df_young['Name'] == str(name)].values[0]\n    \n    posi.append(col)\n    player.append(name)\n    club_l.append(club)\n    \nprint('GoalKeeper : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in gk:\n        print('{} [Club : {} , Position : {} , Age : {}]'.format(n , c , p ,\n                                                                df['Age'][df['Name'] == n].values[0]))\n\nprint('\\nFORWARD : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in forward:\n        print('{} [Club : {} , Position : {} , Age : {}]'.format(n , c , p , \n                                                                df['Age'][df['Name'] == n].values[0]))\nprint('\\nMIDFEILDER : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in midfeilder:\n        print('{} [Club : {} , Position : {} , Age : {}]'.format(n , c , p , \n                                                                df['Age'][df['Name'] == n].values[0]))\nprint('\\nDefender : ')\nfor p , n , c in zip(posi , player , club_l):\n    if p in defenders:\n        print('{} [Club : {} , Position : {} , Age : {}]'.format(n , c , p , \n                                                                df['Age'][df['Name'] == n].values[0]))","439adf47":" ## Ball Control while dribbling , acceleration and sprint    ","9245b85b":"## Top 10 Countries with best player","3542e988":"### Does Age affect overall rating?","39958ece":"## Age distribution in few of the famous clubs","0658e09a":"## Shot power used while passing","b782dd1e":"<center><h1>Premier League Players Analysis<\/h1><\/center>\n","fefc19fe":"## 5 eldest players","55b18d13":"## Top 5 player who have great shot power","31e012fe":"## Top 3 important features per position","15222883":"## Top 20 players","890d232d":"## Top 5 players who have best vision","00d4373b":"## Age distribution in few countries","598bae0d":"### Maximum number of players belong to which country?","eed9d69f":"## 5 youngest players","ffb1dee5":"## Top 20 clubs with best players.","35ef36db":"## Top Five important features plot per postion\nthis plot was taken from : [Daria Czerniawko](https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis)","509f9605":"## Top 5 players who can give best long passes","d2d20884":"## Dream team in different formations ","85403833":"## Finishing at 5 scenarios ","221ed0af":"## Top 5 expensive players to buy.","569880cd":" # Analysis","7c37545b":"# Young Dream team according to stats","65e081b3":"## Histograms of player features.","c32de627":"# Dream Team According to stats"}}