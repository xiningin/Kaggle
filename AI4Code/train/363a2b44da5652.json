{"cell_type":{"663b6ead":"code","e56c78cc":"code","8befe061":"code","fcebf898":"code","afb26cd0":"code","e7cd8fc9":"code","bc745e8c":"code","627363c2":"code","5ac4811e":"code","6299638e":"code","7ea08dc7":"code","47959223":"code","94615bfd":"code","2543d240":"code","497077e4":"code","2b586e13":"code","ab854b15":"code","1b73644d":"code","11dddd59":"code","ed2fb192":"code","93644584":"code","78e95ffa":"code","1699a391":"code","6eb64dca":"code","0117e8a7":"code","24de4078":"code","c94e3d84":"code","2c576ac9":"code","45ee186e":"code","fd88d7a4":"code","26d62bf3":"code","43cec24f":"markdown","b8f43432":"markdown","4bbd8b49":"markdown","f5123b29":"markdown","87dee9a4":"markdown","40d00ecd":"markdown","6ee283b2":"markdown","ada08016":"markdown","1dad8a7a":"markdown","44e5ad17":"markdown","711a239d":"markdown","a2afa9a9":"markdown","02230abe":"markdown","f50da068":"markdown","5215bbcc":"markdown","5b68cb44":"markdown","39aa6234":"markdown","6aa9a1ea":"markdown","5ab440b1":"markdown","861271e8":"markdown","ddd089fc":"markdown","00126286":"markdown","8e7ef32d":"markdown","dcafe3e1":"markdown","1f88f942":"markdown","e06a7a65":"markdown","06f09b34":"markdown","3d7d8b14":"markdown","c792979c":"markdown","406bbae7":"markdown","8ce2ff87":"markdown","6276c58a":"markdown","95b49d5e":"markdown","a5b3cc6a":"markdown","edbb003e":"markdown","2f984ac2":"markdown","b1481c42":"markdown","f0cfcf2b":"markdown","a75514cf":"markdown","35714e06":"markdown"},"source":{"663b6ead":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\n\nimport warnings  \nwarnings.filterwarnings('ignore')\n\ntags_df = pd.read_csv('..\/input\/tags.csv', index_col='tags_tag_id')\n#comments_df = pd.read_csv('..\/input\/comments.csv', index_col='comments_id', parse_dates=['comments_date_added'])\n\n\ncountry_to_code_dic = {'Afghanistan': 'AFG', 'Albania': 'ALB', 'Algeria': 'DZA', 'American Samoa': 'ASM', 'Andorra': 'AND', 'Angola': 'AGO', 'Anguilla': 'AIA', 'Antigua and Barbuda': 'ATG', 'Argentina': 'ARG', 'Armenia': 'ARM', 'Aruba': 'ABW', 'Ascension and Tristan da Cunha': 'SHN', 'Australia': 'AUS', 'Austria': 'AUT', 'Azerbaijan': 'AZE', 'The Bahamas': 'BHM', 'Bahrain': 'BHR', 'Bangladesh': 'BGD', 'Barbados': 'BRB', 'Belarus': 'BLR', 'Belgium': 'BEL', 'Belize': 'BLZ', 'Benin': 'BEN', 'Bermuda': 'BMU', 'Bhutan': 'BTN', 'Bolivia': 'BOL', 'Bosnia and Herzegovina': 'BIH', 'Botswana': 'BWA', 'Brazil': 'BRA', 'British Virgin Islands': 'VGB', 'Brunei': 'BRN', 'Bulgaria': 'BGR', 'Burkina Faso': 'BFA', 'Burma': 'MMR', 'Burundi': 'BDI', 'Cabo Verde': 'CPV', 'Cambodia': 'KHM', 'Cameroon': 'CMR', 'Canada': 'CAN', 'Cayman Islands': 'CYM', 'Central African Republic': 'CAF', 'Chad': 'TCD', 'Chile': 'CHL', 'China': 'CHN', 'Colombia': 'COL', 'Comoros': 'COM', 'Democratic Republic of the Congo': 'COD', 'Republic of the Congo': 'COG', 'Cook Islands': 'COK', 'Costa Rica': 'CRI', \"Cote d'Ivoire\": 'CIV', 'Croatia': 'HRV', 'Cuba': 'CUB', 'Curacao': 'CUW', 'Cyprus': 'CYP', 'Czech Republic': 'CZE', 'Denmark': 'DNK', 'Djibouti': 'DJI', 'Dominica': 'DMA', 'Dominican Republic': 'DOM', 'Ecuador': 'ECU', 'Egypt': 'EGY', 'El Salvador': 'SLV', 'Equatorial Guinea': 'GNQ', 'Eritrea': 'ERI', 'Estonia': 'EST', 'Ethiopia': 'ETH', 'Falkland Islands (Islas Malvinas)': 'FLK', 'Faroe Islands': 'FRO', 'Fiji': 'FJI', 'Finland': 'FIN', 'France': 'FRA', 'French Polynesia': 'PYF', 'Gabon': 'GAB', 'The Gambia': 'GMB', 'Georgia': 'GEO', 'Germany': 'DEU', 'Ghana': 'GHA', 'Gibraltar': 'GIB', 'Greece': 'GRC', 'Greenland': 'GRL', 'Grenada': 'GRD', 'Guam': 'GUM', 'Guatemala': 'GTM', 'Guernsey': 'GGY', 'Guinea': 'GIN', 'Guinea-Bissau': 'GNB', 'Guyana': 'GUY', 'Haiti': 'HTI', 'Honduras': 'HND', 'Hong Kong': 'HKG', 'Hungary': 'HUN', 'Iceland': 'ISL', 'India': 'IND', 'Indonesia': 'IDN', 'Iran': 'IRN', 'Iraq': 'IRQ', 'Ireland': 'IRL', 'Isle of Man': 'IMN', 'Israel': 'ISR', 'Palestine': 'PSE', 'Italy': 'ITA', 'Jamaica': 'JAM', 'Japan': 'JPN', 'Jersey': 'JEY', 'Jordan': 'JOR', 'Kazakhstan': 'KAZ', 'Kenya': 'KEN', 'Kiribati': 'KIR', 'North Korea': 'PRK', 'South Korea': 'KOR', 'Kosovo': 'KSV', 'Kuwait': 'KWT', 'Kyrgyzstan': 'KGZ', 'Laos': 'LAO', 'Latvia': 'LVA', 'Lebanon': 'LBN', 'Lesotho': 'LSO', 'Liberia': 'LBR', 'Libya': 'LBY', 'Liechtenstein': 'LIE', 'Lithuania': 'LTU', 'Luxembourg': 'LUX', 'Macau': 'MAC', 'Macedonia': 'MKD', 'Madagascar': 'MDG', 'Malawi': 'MWI', 'Malaysia': 'MYS', 'Maldives': 'MDV', 'Mali': 'MLI', 'Malta': 'MLT', 'Marshall Islands': 'MHL', 'Mauritania': 'MRT', 'Mauritius': 'MUS', 'Mexico': 'MEX', 'Federated States of Micronesia': 'FSM', 'Moldova': 'MDA', 'Monaco': 'MCO', 'Mongolia': 'MNG', 'Montenegro': 'MNE', 'Morocco': 'MAR', 'Mozambique': 'MOZ', 'Namibia': 'NAM', 'Nepal': 'NPL', 'Netherlands': 'NLD', 'New Caledonia': 'NCL', 'New Zealand': 'NZL', 'Nicaragua': 'NIC', 'Niger': 'NER', 'Nigeria': 'NGA', 'Niue': 'NIU', 'Northern Mariana Islands': 'MNP', 'Norway': 'NOR', 'Oman': 'OMN', 'Pakistan': 'PAK', 'Palau': 'PLW', 'Panama': 'PAN', 'Papua New Guinea': 'PNG', 'Paraguay': 'PRY', 'Peru': 'PER', 'Philippines': 'PHL', 'Poland': 'POL', 'Portugal': 'PRT', 'Puerto Rico': 'PRI', 'Qatar': 'QAT', 'Romania': 'ROU', 'Russia': 'RUS', 'Rwanda': 'RWA', 'Saint Kitts and Nevis': 'KNA', 'Saint Lucia': 'LCA', 'Saint Martin': 'MAF', 'Saint Pierre and Miquelon': 'SPM', 'Saint Vincent and the Grenadines': 'VCT', 'Samoa': 'WSM', 'San Marino': 'SMR', 'Sao Tome and Principe': 'STP', 'Saudi Arabia': 'SAU', 'Senegal': 'SEN', 'Serbia': 'SRB', 'Seychelles': 'SYC', 'Sierra Leone': 'SLE', 'Singapore': 'SGP', 'Sint Maarten': 'SXM', 'Slovakia': 'SVK', 'Slovenia': 'SVN', 'Solomon Islands': 'SLB', 'Somalia': 'SOM', 'South Africa': 'ZAF', 'South Sudan': 'SSD', 'Spain': 'ESP', 'Sri Lanka': 'LKA', 'Sudan': 'SDN', 'Suriname': 'SUR', 'Swaziland': 'SWZ', 'Sweden': 'SWE', 'Switzerland': 'CHE', 'Syria': 'SYR', 'Taiwan': 'TWN', 'Tajikistan': 'TJK', 'Tanzania': 'TZA', 'Thailand': 'THA', 'Timor-Leste': 'TLS', 'Togo': 'TGO', 'Tonga': 'TON', 'Trinidad and Tobago': 'TTO', 'Tunisia': 'TUN', 'Turkey': 'TUR', 'Turkmenistan': 'TKM', 'Tuvalu': 'TUV', 'Uganda': 'UGA', 'Ukraine': 'UKR', 'United Arab Emirates': 'ARE', 'United Kingdom': 'GBR', 'USA': 'USA', 'Uruguay': 'URY', 'Uzbekistan': 'UZB', 'Vanuatu': 'VUT', 'Venezuela': 'VEN', 'Vietnam': 'VNM', 'Virgin Islands': 'VGB', 'West Bank': 'WBG', 'Yemen': 'YEM', 'Zambia': 'ZMB', 'Zimbabwe': 'ZWE', 'None': 'Unknown', '': 'Unknown', 'Unknown': 'Unknown'} \ncode_to_country_dic = {v: k for k, v in country_to_code_dic.items()}\ncountries_per_continent_dic = {'Africa': ['Morocco', 'Algeria', 'Angola', 'Burkina Faso', 'Central African Republic', 'Chad', 'Comoros', 'Democratic Republic of the Congo', 'Djibouti', 'Ascension and Tristan da Cunha', 'Sudan', 'Cabo Verde', 'Mauritius', 'Eritrea', 'Jersey', 'Equatorial Guinea', 'Guinea-Bissau', 'Gabon', 'Mali', 'Sao Tome and Principe', 'Swaziland', 'Seychelles', 'Madagascar', 'Guinea', 'Libya', 'Mauritania', 'Mozambique', 'Togo', 'Niger', 'Tunisia', 'Senegal', 'The Gambia', 'Sierra Leone', 'Liberia', \"Cote d'Ivoire\", 'Ghana', 'Benin', 'Nigeria', 'Cameroon', 'Republic of the Congo', 'Namibia', 'South Africa', 'Botswana', 'Zimbabwe', 'Zambia', 'Malawi', 'Tanzania', 'Burundi', 'Rwanda', 'Uganda', 'Kenya', 'Somalia', 'Ethiopia', 'South Sudan', 'Egypt'], 'Europe': ['Spain', 'Portugal', 'France', 'Italy', 'Switzerland', 'Albania', 'Belgium', 'Andorra', 'Germany', 'Iceland', 'Luxembourg', 'Lithuania', 'Moldova', 'Montenegro', 'Belarus', 'Cyprus', 'Isle of Man', 'Bosnia and Herzegovina', 'Gibraltar', 'Faroe Islands', 'Liechtenstein', 'Malta', 'San Marino', 'Greece', 'Guernsey', 'Netherlands', 'Austria', 'Croatia', 'Monaco', 'Slovenia', 'Czech Republic', 'Denmark', 'Finland', 'Poland', 'Slovakia', 'Romania', 'Hungary', 'Serbia', 'Macedonia', 'Bulgaria', 'Ukraine', 'Estonia', 'Sweden', 'Norway', 'United Kingdom', 'Ireland'], 'Asia': ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Burma', 'Cambodia', 'China', 'Georgia', 'Hong Kong', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Palestine', 'Japan', 'Jordan', 'Kazakhstan', 'Kiribati', 'North Korea', 'South Korea', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Macau', 'Malaysia', 'Maldives', 'Mongolia', 'Nepal', 'Oman', 'Pakistan', 'Philippines', 'Qatar', 'Russia', 'Saudi Arabia', 'Singapore', 'Sri Lanka', 'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Timor-Leste', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'West Bank', 'Yemen',], 'North America': ['USA', 'Canada', 'Mexico', 'Cuba', 'Jamaica', 'Curacao', 'Dominican Republic', 'Bermuda', 'Puerto Rico', 'Honduras', 'Anguilla', 'Aruba', 'Panama', 'Guatemala', 'Haiti', 'Saint Kitts and Nevis', 'Saint Lucia', 'Dominica', 'Saint Martin', 'British Virgin Islands', 'Saint Pierre and Miquelon', 'Greenland', 'Saint Vincent and the Grenadines', 'Virgin Islands', 'Sint Maarten', 'Barbados', 'Belize', 'Antigua and Barbuda', 'Costa Rica', 'The Bahamas', 'Cayman Islands', 'Nicaragua', 'Grenada', 'El Salvador'], 'South America': ['Colombia', 'Trinidad and Tobago', 'Ecuador', 'Peru', 'Brazil', 'Bolivia', 'Chile', 'Argentina', 'Uruguay', 'Venezuela', 'Paraguay', 'Suriname', 'Guyana', 'Falkland Island', 'Falkland Islands (Islas Malvinas)'], 'Oceania': ['Australia', 'New Zealand', 'Papua New Guinea', 'American Samoa', 'New Caledonia', 'Northern Mariana Islands', 'Niue', 'Palau', 'Samoa', 'Solomon Islands', 'Tonga', 'Tuvalu', 'Vanuatu', 'Guam', 'French Polynesia', 'Fiji', 'Cook Islands', 'Marshall Islands', 'Federated States of Micronesia']} \nus_states_areas = \"Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|Omaha|Bowling Green|Cincinnati|Chandler|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|Boston|New York|Philadelphia|Cleveland|Atlanta|Chicago|Minneapolis|Kansas|Dallas|San Francisco|Los Angeles|Boca Raton|Miami|Denver|Detroit|New Orleans|Orangevale|Lenexa|Merritt Island|Vacaville|Citrus Heights|Nashville|Cedar Rapids|West Hartford|Pittsburgh|Laguna Hills|Salt Lake City|Kennewick|Memphis|United States|Milwaukee|San Diego|St. Louis|Seattle|Lancaster\"\ncontinents = ['Africa', 'Europe', 'North America', 'South America', 'Asia', 'Oceania']\ncountries = list(country_to_code_dic.keys())\ncountries.remove('None')\ncountries.remove('Unknown')\ncountries.remove('')\ncountries = '|'.join(countries)\n\nLINE_COLOR = '#9250B0'\nBAR_COLOR = '#906FA8'\nHIGHLIGHT_BAR_COLOR = '#db2d43'","e56c78cc":"students_df = pd.read_csv('..\/input\/students.csv', index_col='students_id', parse_dates=['students_date_joined'])\ntag_users_df = pd.read_csv('..\/input\/tag_users.csv')\n\nyears = students_df['students_date_joined'].dt.year.unique()\nyears.sort()\nmin_date = students_df['students_date_joined'].min()\nmin_date = min_date.strftime(\"%B %Y\")\nmax_date = students_df['students_date_joined'].max()\nmax_date = max_date.strftime(\"%B %Y\")\n#print(years)\nvals = [len(students_df[students_df['students_date_joined'].dt.year == y]) for y in years] \nfor i in range(len(vals)):\n    if i > 0:\n        vals[i] += vals[i-1]\n#print(vals)\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR},\n        'fill': 'tonexty'\n    }],\n    'layout': {\n        'title': f'Evolution of Number of registered students ({min_date} ~ {max_date})',\n        'yaxis': {'title': 'Number of Students'},\n        'xaxis': {'title': 'Years'}\n    }\n}\niplot(fig)","8befe061":"def process_location(df, type_user):\n    # Add Country Column\n    df[f'{type_user}_location'] = df[f'{type_user}_location'].fillna('Unknown')\n    df[f'{type_user}_country_name'] = ''\n    df[f'{type_user}_country_name'] = df[f'{type_user}_location'].str.extract(f'({countries})')[0]\n    df.loc[df[f'{type_user}_location'] == 'Unknown', f'{type_user}_country_name'] = 'Unknown'\n    df.loc[df[f'{type_user}_country_name'] == '', f'{type_user}_country_name'] = 'Unknown'\n    df[f'{type_user}_country_name'] = df[f'{type_user}_country_name'].fillna('Unknown')\n    df.loc[df[f'{type_user}_location'].str.contains(us_states_areas), f'{type_user}_country_name'] = 'USA'\n\n    #indexes = df[ (df[f'{type_user}_location'].str.match('[A-z ]*, [A-z ]*')) & (df[f'{type_user}_country'] != 'USA')].index.values\n    #countries = df[ (df[f'{type_user}_location'].str.match('[A-z ]*, [A-z ]*')) & (df[f'{type_user}_country'] != 'USA')][f'{type_user}_location'].str.extract(', ([A-z ]*)$')\n    #df.loc[df.index.isin(indexes), f'{type_user}_country'] = countries.values\n\n    # Deal with some exceptions\n    df.loc[df[f'{type_user}_location'].str.contains('Czechia'), f'{type_user}_country_name'] = 'Czech Republic'\n    df.loc[df[f'{type_user}_location'].str.contains('County Dublin'), f'{type_user}_country_name'] = 'Ireland'\n    df.loc[df[f'{type_user}_location'].str.contains('County Tipperary'), f'{type_user}_country_name'] = 'Ireland'\n    df.loc[df[f'{type_user}_location'].str.contains('Birmingham'), f'{type_user}_country_name'] = 'Ireland'\n    df.loc[df[f'{type_user}_location'].str.contains('Limerick'), f'{type_user}_country_name'] = 'Ireland'\n    df.loc[df[f'{type_user}_location'].str.contains('Cape Verde'), f'{type_user}_country_name'] = 'Cabo Verde'\n    df.loc[df[f'{type_user}_location'].str.contains('Bethlehem'), f'{type_user}_country_name'] = 'Palestine'\n    df.loc[df[f'{type_user}_location'].str.contains('Palestinian Territory'), f'{type_user}_country_name'] = 'Palestine'\n    df.loc[df[f'{type_user}_location'].str.contains('Brasilia'), f'{type_user}_country_name'] = 'Brazil'\n    df.loc[df[f'{type_user}_location'].str.contains('Ivoire'), f'{type_user}_country_name'] = \"Cote d'Ivoire\"\n    df.loc[df[f'{type_user}_location'].str.contains('Slovak'), f'{type_user}_country_name'] = \"Slovakia\"\n\n    #df.loc[df[f'{type_user}_location'].str.contains('Burma'), f'{type_user}_country_name'] = 'Burma'\n    #df.loc[df[f'{type_user}_location'].str.contains('Ivoire'), f'{type_user}_country_name'] = 'Cote d\\'Ivoire'\n    \n    # Add Code Column\n    df[f'{type_user}_country_code'] = df[f'{type_user}_country_name'].apply(lambda x: country_to_code_dic[x])\n    return df\n\ndef get_continent(country_name):\n    for cont in continents:\n        if country_name in countries_per_continent_dic[cont]:\n            return cont\n    return 'Unknown'\n#get_continent('China')\n\nstudents_df = process_location(students_df, 'students')\n\ncount_students_per_country = students_df.groupby('students_country_code').count()[['students_country_name']].rename(columns={'students_country_name': 'Count Students'}).sort_values('Count Students', ascending=False)\ncount_students_per_country['Country Name'] = [code_to_country_dic[c] for c in count_students_per_country.index.values]\nfig = {\n    'data': [{\n        'type': 'choropleth',\n        'z': count_students_per_country['Count Students'],\n        'locations': count_students_per_country.index.values, \n        'text': count_students_per_country['Country Name'],\n        'colorscale': [\n            [0, \"rgb(5, 10, 172)\"],\n            [0.3, \"rgb(70, 100, 245)\"],\n            [0.6, \"rgb(90, 120, 245)\"],\n            [0.7, \"rgb(106, 137, 247)\"],\n            [1, \"rgb(220, 220, 220)\"]\n        ],\n        'reversescale':  True,\n    }],\n    'layout': {\n        'title': 'Number of Students per Country'\n    }\n}\niplot(fig)","fcebf898":"count_students_per_country['Country Continent'] = count_students_per_country['Country Name'].apply(get_continent)\ncount_students_per_continent = count_students_per_country.groupby('Country Continent').sum().sort_values('Count Students', ascending=False)\n#count_students_per_continent\n\nfig = {\n    'data': [{\n        'type': 'bar',\n        'x': count_students_per_continent['Count Students'],\n        'y': count_students_per_continent.index.values,\n        'orientation': 'h',\n        'marker': {'color': [BAR_COLOR if count_students_per_continent.index.values[i] != 'Unknown' else 'grey' for i in range(len(count_students_per_continent))]}\n    }],\n    'layout': {\n        'title': 'Number of Students per Continent',\n        'xaxis': {'title': 'Number of Students'},\n        'yaxis': {'autorange': 'reversed'},\n        'margin': {'l': 130}\n    }\n}\niplot(fig)","afb26cd0":"charts = []\nfor c in continents:\n    gp = count_students_per_country[count_students_per_country['Country Continent'] == c]\n    labels = list(gp.head(3)['Country Name'])\n    values = list(gp.head(3)['Count Students'])\n    labels.append('Other')\n    values.append(gp.tail(len(gp) - 3)['Count Students'].sum())\n    charts.append({\n        'type': 'pie',\n        'title': { 'text': c, 'font': {'size': 20}},\n        'name': c,\n        'labels': labels,\n        'values': values,\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3\n    })\n    #print(labels)\n    #print(values)\n\nfor i in range(len(charts)):\n        charts[i]['domain'] = {'x': [0, .4] if i%2 == 0 else [.6, 1] , 'y': [0, 1]}\n\nfig = {\n    'data': charts[:2],\n    'layout': {\n        'title': 'Where are most Students based ?'\n    }\n}\niplot(fig)\nfig = {\n    'data': charts[2:4]\n}\niplot(fig)\nfig = {\n    'data': charts[4:6]\n}\niplot(fig)","e7cd8fc9":"tag_counts = tag_users_df[tag_users_df['tag_users_user_id'].isin(students_df.index.values)].groupby('tag_users_tag_id').count().sort_values('tag_users_user_id', ascending=False)\nnew_index = []\nfor i in tag_counts.index.values:\n    new_index.append(tags_df.loc[i][0])\n#new_index\ntag_counts = tag_counts.set_index(pd.Series(new_index))\ntag_counts = tag_counts.rename(columns={'tag_users_user_id': 'Number of Students'})\nn = 10\nfig = {\n    'data': [{\n        'type': 'bar',\n        'x': tag_counts.head(n)['Number of Students'],\n        'y': tag_counts.head(n).index.values,\n        'orientation': 'h',\n        'marker': {'color': [HIGHLIGHT_BAR_COLOR if i == 0 else BAR_COLOR for i in range(n)]},\n    }],\n    'layout': {\n        'title': f'Top {n} Followed Hashtags by Students', \n        'yaxis': {'autorange': 'reversed'},\n        'xaxis': {'title': 'Number of Followers'}\n    }\n}\niplot(fig)","bc745e8c":"professionals_df = pd.read_csv('..\/input\/professionals.csv', index_col='professionals_id', parse_dates=['professionals_date_joined'])\n\nyears = professionals_df['professionals_date_joined'].dt.year.unique()\nyears.sort()\nmin_date = professionals_df['professionals_date_joined'].min()\nmin_date = min_date.strftime(\"%B %Y\")\nmax_date = professionals_df['professionals_date_joined'].max()\nmax_date = max_date.strftime(\"%B %Y\")\n#print(years)\nvals = [len(professionals_df[professionals_df['professionals_date_joined'].dt.year == y]) for y in years]\nfor i in range(len(vals)):\n    if i > 0:\n        vals[i] += vals[i-1]\n#print(vals)\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR},\n        'fill': 'tonexty'\n    }],\n    'layout': {\n        'title': f'Evolution of Number of Professionals ({min_date} ~ {max_date})',\n        'yaxis': {'title': 'Number of Professionals'},\n        'xaxis': {'title': 'Years'}\n    }\n}\niplot(fig)","627363c2":"professionals_df = process_location(professionals_df, 'professionals')\ncount_professionals_per_country = professionals_df.groupby('professionals_country_code').count()[['professionals_country_name']].rename(columns={'professionals_country_name': 'Count Professionals'}).sort_values('Count Professionals', ascending=False)\ncount_professionals_per_country['Country Name'] = [code_to_country_dic[c] for c in count_professionals_per_country.index.values]\n\nfig = {\n    'data': [{\n        'type': 'choropleth',\n        'z': count_professionals_per_country['Count Professionals'],\n        'locations': count_professionals_per_country.index.values, \n        'text': count_professionals_per_country['Country Name'],\n        'colorscale': [\n            [0, \"rgb(5, 10, 172)\"],\n            [0.3, \"rgb(70, 100, 245)\"],\n            [0.6, \"rgb(90, 120, 245)\"],\n            [0.7, \"rgb(106, 137, 247)\"],\n            [1, \"rgb(220, 220, 220)\"]\n        ],\n        'reversescale':  True,\n    }],\n    'layout': {\n        'title': 'Number of Professionals per Country'\n    }\n}\niplot(fig)","5ac4811e":"count_professionals_per_country['Country Continent'] = count_professionals_per_country['Country Name'].apply(get_continent)\ncount_professionals_per_continent = count_professionals_per_country.groupby('Country Continent').sum().sort_values('Count Professionals', ascending=False)\n#count_professionals_per_continent\n\nfig = {\n    'data': [{\n        'type': 'bar',\n        'x': count_professionals_per_continent['Count Professionals'],\n        'y': count_professionals_per_continent.index.values,\n        'orientation': 'h',\n        'marker': {'color': [BAR_COLOR if count_professionals_per_continent.index.values[i] != 'Unknown' else 'grey' for i in range(len(count_professionals_per_continent))]}\n    }],\n    'layout': {\n        'title': 'Number of Professionals per Continent',\n        'xaxis': {'title': 'Number of Professionals'},\n        'yaxis': {'autorange': 'reversed'},\n        'margin': {'l': 130}\n    }\n}\niplot(fig)","6299638e":"charts = []\nfor c in continents:\n    gp = count_professionals_per_country[count_professionals_per_country['Country Continent'] == c]\n    labels = list(gp.head(3)['Country Name'])\n    values = list(gp.head(3)['Count Professionals'])\n    labels.append('Other')\n    values.append(gp.tail(len(gp) - 3)['Count Professionals'].sum())\n    charts.append({\n        'type': 'pie',\n        'title': { 'text': c, 'font': {'size': 20}},\n        'name': c,\n        'labels': labels,\n        'values': values,\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3\n    })\n    #print(labels)\n    #print(values)\n\nfor i in range(len(charts)):\n        charts[i]['domain'] = {'x': [0, .4] if i%2 == 0 else [.6, 1] , 'y': [0, 1]}\n\nfig = {\n    'data': charts[:2],\n    'layout': {\n        'title': 'Where are most Professionals based ?'\n    }\n}\niplot(fig)\nfig = {\n    'data': charts[2:4]\n}\niplot(fig)\nfig = {\n    'data': charts[4:6]\n}\niplot(fig)","7ea08dc7":"professionals_df['professionals_industry'] = professionals_df['professionals_industry'].fillna('unknown')\nprofessionals_df['professionals_industry'] = professionals_df['professionals_industry'].str.lower()\n\ncount_industries = professionals_df.groupby('professionals_industry').count()[['professionals_location']].rename(columns={'professionals_location': 'Count Professionals'}).sort_values('Count Professionals', ascending=False)\nn = 10\ncolors = []\nfor i in range(n):\n    if count_industries.index.values[i] == 'unknown':\n        colors.append('grey')\n    elif i < 4:\n        colors.append(HIGHLIGHT_BAR_COLOR)\n    else:\n        colors.append(BAR_COLOR)\n\nfig = {\n    'data': [{\n        'type': 'bar', \n        'y': count_industries.head(n).index.values,\n        'x': count_industries.head(n)['Count Professionals'].values,\n        'marker': {'color': colors},\n        'orientation': 'h',\n    }],\n    'layout': {\n        'title': f'Top {n} Professionals Industries',\n        'xaxis': {'title': 'Number of Professionals'},\n        'yaxis': {'autorange': 'reversed'},\n        'margin': {'l': 250}\n    }\n}\niplot(fig)","47959223":"professionals_df['professionals_headline'] = professionals_df['professionals_headline'].fillna('unknown')\nprofessionals_df['professionals_headline'] = professionals_df['professionals_headline'].str.lower()\nprofessionals_df['professionals_headline'] = professionals_df['professionals_headline'].str.replace('--|hello|hello!|hellofresh', 'unknown')\n\nwords = ' '.join(list(professionals_df[professionals_df['professionals_headline'] != 'unknown']['professionals_headline'].values))\nwc=WordCloud(width=800, height=400).generate(words)\nplt.clf()\nplt.figure( figsize=(16,9) )\nplt.title('Most common words in professionals headlines', fontsize=20)\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","94615bfd":"professionals_df['professionals_occupation'] = 'unknown'\n\nres = professionals_df[professionals_df['professionals_headline'].str.contains(' at ')]['professionals_headline'].str.extract('([A-z ]*) at [A-z ]*')\nprofessionals_df.loc[res.index.values, 'professionals_occupation'] = res[0]\n\n\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?student|estudiant|master[ ]?'), 'professionals_occupation'] = 'student'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?intern[ ]?'), 'professionals_occupation'] = 'intern'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?engineer|developer|data scientist|database|technical specialist|technical support|technician[ ]?'), 'professionals_occupation'] = 'engineer'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?technical specialist|technical support|technician[ ]?'), 'professionals_occupation'] = 'technician'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?business|marketing|marketer|sales[ ]?'), 'professionals_occupation'] = 'business'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?marketing|marketer[ ]?'), 'professionals_occupation'] = 'marketer'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?sales[ ]?'), 'professionals_occupation'] = 'sales'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?ux|user experience|graphic|illustrator[ ]?'), 'professionals_occupation'] = 'designer'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?recuiter[ ]?'), 'professionals_occupation'] = 'recruiter'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?teacher|professor[ ]?'), 'professionals_occupation'] = 'teaching'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?accountant[ ]?'), 'professionals_occupation'] = 'accountant'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?financial [a-z ]?(profess|analyst)?'), 'professionals_occupation'] = 'financial_professional'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?medical doctor|physician[ ]?'), 'professionals_occupation'] = 'physician'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?therapist[ ]?'), 'professionals_occupation'] = 'therapist'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?nurse[ ]?'), 'professionals_occupation'] = 'nurse'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?manager|mgr[ ]?'), 'professionals_occupation'] = 'manager'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?ceo|chief operating officer[ ]?'), 'professionals_occupation'] = 'CEO'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?director[ ]?'), 'professionals_occupation'] = 'director'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?consultant[ ]?'), 'professionals_occupation'] = 'consultant'\nprofessionals_df.loc[professionals_df['professionals_headline'].str.contains('[ ]?seeking|looking|unemployed[ ]?'), 'professionals_occupation'] = 'seeking_new_opportunity'\n\n\nres = professionals_df.loc[(professionals_df['professionals_headline'].str.contains('[ ]?[a-z][e|o]r[ ]?$')) & (professionals_df['professionals_occupation'] == 'unknown')]['professionals_headline'].str.extract('[ ]?([a-z]*[e|o]r)[ ]?$')\nprofessionals_df.loc[res.index.values, 'professionals_occupation'] = res[0]\n\n\ncount_professionals_per_occupation = professionals_df.groupby('professionals_occupation').count()[['professionals_headline']].rename(columns={'professionals_headline': 'Count Professionals'}).sort_values('Count Professionals', ascending=False)\n#count_professionals_per_occupation.head(100)\nn = 30\ncolors = []\nfor i in range(n):\n    if count_professionals_per_occupation.index.values[i] == 'unknown':\n        colors.append('grey')\n    elif i < 4:\n        colors.append(HIGHLIGHT_BAR_COLOR)\n    else:\n        colors.append(BAR_COLOR)\n\nfig = {\n    'data': [{\n        'type': 'bar', \n        'y': count_professionals_per_occupation.head(n).index.values,\n        'x': count_professionals_per_occupation.head(n)['Count Professionals'].values,\n        'marker': {'color': colors},\n        'orientation': 'h',\n    }],\n    'layout': {\n        'title': f'Top {n} Professionals Occupations',\n        'xaxis': {'title': 'Number of Professionals'},\n        'yaxis': {'autorange': 'reversed'},\n        'margin': {'l': 180},\n        'height': 800\n    }\n}\niplot(fig)","2543d240":"tag_counts = tag_users_df[tag_users_df['tag_users_user_id'].isin(professionals_df.index.values)].groupby('tag_users_tag_id').count().sort_values('tag_users_user_id', ascending=False)\nnew_index = []\nfor i in tag_counts.index.values:\n    new_index.append(tags_df.loc[i][0])\n#new_index\ntag_counts = tag_counts.set_index(pd.Series(new_index))\ntag_counts = tag_counts.rename(columns={'tag_users_user_id': 'Number of Professionals'})\nn = 10\nfig = {\n    'data': [{\n        'type': 'bar',\n        'x': tag_counts.head(n)['Number of Professionals'],\n        'y': tag_counts.head(n).index.values,\n        'orientation': 'h',\n        'marker': {'color': [HIGHLIGHT_BAR_COLOR if i < 3 else BAR_COLOR for i in range(n)]}\n    }],\n    'layout': {\n        'title': f'Top {n} Followed Hashtags by Professionals', \n        'yaxis': {'autorange': 'reversed'},\n        'xaxis': {'title': 'Number of Followers'},\n        'margin': {'l': 150}\n    }\n}\niplot(fig)","497077e4":"answers_df = pd.read_csv('..\/input\/answers.csv', index_col='answers_id', parse_dates=['answers_date_added'])\n\ncount_answers = answers_df[answers_df['answers_author_id'].isin(professionals_df.index.values)].groupby('answers_author_id').count()[['answers_question_id']].rename(columns={'answers_question_id': 'Count Answers'}).sort_values('Count Answers', ascending=False)\nprofessionals_df['professionals_total_answers'] = 0\nprofessionals_df.loc[count_answers.index, 'professionals_total_answers'] = count_answers['Count Answers']\n\nn = 10\nfig = {\n    'data': [{\n        'type': 'bar',\n        'x': count_answers.head(n)['Count Answers'].values,\n        'y': count_answers.head(n).index.values,\n        'orientation': 'h',\n        'marker': {'color': BAR_COLOR}\n    }],\n    'layout': {\n        'title': f'Top {n} Professionals with most answers',\n        'yaxis': {'autorange': 'reversed'},\n        'margin': {'l': 250}\n    }\n}\niplot(fig)","2b586e13":"professionals_df['professionals_total_answers'] = 0\nprofessionals_df.loc[count_answers.index, 'professionals_total_answers'] = count_answers.values\n\nfig = {\n    'data': [{\n        'type': 'pie',\n        'labels': ['Zero answers', '> 0 answers'],\n        'values': [len(professionals_df[professionals_df['professionals_total_answers'] == 0]), len(professionals_df[professionals_df['professionals_total_answers'] > 0])],\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'marker': {'colors': [ '#00FF66', '#D9BCDB',], 'line': {'width': 3, 'color': 'white'}},\n    }],\n    'layout': {\n        'title': 'Professionals who didn\\'t contribute with answers'\n    }\n}\niplot(fig)","ab854b15":"questions_df = pd.read_csv('..\/input\/questions.csv', index_col='questions_id', parse_dates=['questions_date_added'])\ntag_questions_df = pd.read_csv('..\/input\/tag_questions.csv')\n\nyears = questions_df['questions_date_added'].dt.year.unique()\nyears.sort()\nmin_date = questions_df['questions_date_added'].min()\nmin_date = min_date.strftime(\"%B %Y\")\nmax_date = questions_df['questions_date_added'].max()\nmax_date = max_date.strftime(\"%B %Y\")\n#print(years)\nvals = [len(questions_df[questions_df['questions_date_added'].dt.year == y]) for y in years] \n#print(vals)\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR}\n    }],\n    'layout': {\n        'title': f'Number of Questions asked per year ({min_date} ~ {max_date})',\n        'yaxis': {'title': 'Number of Questions'},\n        'xaxis': {'title': 'Years'}\n    }\n}\niplot(fig)","1b73644d":"count_answers = answers_df.groupby('answers_question_id').count().rename(columns={'answers_author_id': 'Count Answers'})[['Count Answers']].join(questions_df[['questions_body', 'questions_date_added']]).sort_values('Count Answers', ascending=False)\ncount_answers = count_answers[['questions_body', 'Count Answers', 'questions_date_added']]\ncount_answers[\"questions_date_added\"] = count_answers[\"questions_date_added\"].dt.strftime('%m-%d-%Y')\ncount_answers[\"questions_date_added\"] = '[' + count_answers[\"questions_date_added\"] + ']'\ncount_answers[\"questions_body\"] =  count_answers[\"questions_date_added\"] + ' ' + count_answers[\"questions_body\"]\n#count_answers.head()\nn = 7\nfig = {\n    'data': [{\n        'type': 'table',\n        'header': {\n            'values': ['Question', 'Number of Answers Received'],\n            'fill': {'color': '#774181'},\n            'font': {'color': '#f6e5e5', 'size': 14}},\n        'cells': {'values': [count_answers.head(n)['questions_body'], count_answers.head(n)['Count Answers']],\n                 'fill': {'color': '#e3e7f1'},\n                'font': {'color': 'black', 'size': 14}, \n                 'align': 'left',\n                 'height': 50},\n    }],\n    'layout': {\n        'title': 'Questions that got most Answers',\n        'height': 950\n    }\n}\niplot(fig)","11dddd59":"vals = [len(set(questions_df.index.values) - set(answers_df['answers_question_id'])), len(set(answers_df['answers_question_id'])), ]\nfig = {\n    'data': [{\n        'type': 'pie',\n        'labels': ['Not Answered', 'Answered'],\n        'values': vals,\n        'marker': {'colors': [  '#8186d5', '#c6cbef', ]},\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3\n    }],\n    'layout': {\n        'title': 'Questions: Answered vs Not Answered',\n    }\n}\niplot(fig)","ed2fb192":"years = answers_df['answers_date_added'].dt.year.unique()\nyears.sort()\nmin_date = answers_df['answers_date_added'].min()\nmin_date = min_date.strftime(\"%B %Y\")\nmax_date = answers_df['answers_date_added'].max()\nmax_date = max_date.strftime(\"%B %Y\")\n#print(years)\nvals = [len(answers_df[answers_df['answers_date_added'].dt.year == y]) for y in years] \n#print(vals)\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR}\n    }],\n    'layout': {\n        'title': f'Number of Answers added per year ({min_date} ~ {max_date})',\n        'yaxis': {'title': 'Number of Answers'},\n        'xaxis': {'title': 'Years'}\n    }\n}\niplot(fig)","93644584":"answers_df = answers_df.join(questions_df[['questions_date_added']], on='answers_question_id')\nanswers_df['diff_days'] = (answers_df['answers_date_added'] - answers_df['questions_date_added'])\/np.timedelta64(1,'D')\nvals = [answers_df[answers_df['questions_date_added'].dt.year == y]['diff_days'].mean() for y in years]\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR}\n    }],\n    'layout': {\n        'title': 'Evolution of Mean Response Time per year',\n        'xaxis': {'title': 'Years'},\n        'yaxis': {'title': 'Mean Response Time in days'}\n    }\n}\niplot(fig)","78e95ffa":"# Answers after email ?\nemails_df = pd.read_csv('..\/input\/emails.csv', index_col='emails_id', parse_dates=['emails_date_sent'], infer_datetime_format=True)\n\nmatches_df = pd.read_csv('..\/input\/matches.csv')\nmatches_df = matches_df.join(emails_df[['emails_recipient_id', 'emails_date_sent']], on='matches_email_id')\n\nanswers_df = answers_df.rename(columns={'answers_question_id': 'question_id', 'answers_author_id': 'author_id'})\nmatches_df = matches_df.rename(columns={'matches_question_id': 'question_id', 'emails_recipient_id': 'author_id'})\nm = answers_df.reset_index().merge(matches_df, on=['question_id', 'author_id']).set_index('answers_id')\nm = m.drop(m[m['answers_date_added'] < m['emails_date_sent']].index) # drop answers that were posted before the email was sent\nanswers_df['answers_after_email'] = False\nanswers_df.loc[answers_df.index.isin(m.index.values), 'answers_after_email'] = True\nanswers_df = answers_df.rename(columns={'question_id': 'answers_question_id' , 'author_id': 'answers_author_id'})\nmatches_df = matches_df.rename(columns={'question_id': 'matches_question_id', 'author_id': 'emails_recipient_id'})\n\nfig = {\n    'data': [\n        {\n        'type': 'pie',\n        'labels': ['Answers to questions that were included into the emails ( after the email was sent )', 'Answers which were not affected by the email recommendation system'],\n        'values': [ len(answers_df[answers_df['answers_after_email'] == True]), len(answers_df[answers_df['answers_after_email'] == False]) ],\n        'marker': {'colors': [ '#00FF66', '#D9BCDB',], 'line': {'width': 3, 'color': 'white'}},\n        }\n    ],\n    'layout': {\n        'title': 'How many answers were posted after the email was sent ?',\n        'legend': {'orientation': 'h'}\n    }\n}\niplot(fig)","1699a391":"#matches_df = pd.read_csv('..\/input\/matches.csv', index_col='matches_email_id')\n\n\nyears = emails_df['emails_date_sent'].dt.year.unique()\nyears.sort()\nmin_date = emails_df['emails_date_sent'].min()\nmin_date = min_date.strftime(\"%B %Y\")\nmax_date = emails_df['emails_date_sent'].max()\nmax_date = max_date.strftime(\"%B %Y\")\n#print(years)\nvals = [len(emails_df[emails_df['emails_date_sent'].dt.year == y]) for y in years] \n#print(vals)\n\nfig = {\n    'data': [{\n        'type': 'scatter',\n        'x': years,\n        'y': vals,\n        'line': {'color': LINE_COLOR}\n    }],\n    'layout': {\n        'title': f'Number of Emails sent per year ({min_date} ~ {max_date})',\n        'yaxis': {'title': 'Number of Emails'},\n        'xaxis': {'title': 'Years'}\n    }\n}\niplot(fig)","6eb64dca":"count_emails = emails_df.groupby('emails_frequency_level').count()[['emails_recipient_id']].rename(columns={'emails_recipient_id': 'Count Emails'})\nvals = [count_emails.loc['email_notification_daily']['Count Emails'], count_emails.loc['email_notification_weekly']['Count Emails'], count_emails.loc['email_notification_immediate']['Count Emails']]\n\nfig = {\n    'data': [{\n        'type': 'pie',\n        'labels': ['Daily', 'Weekly', 'Immediate'],\n        'values': vals,\n        'marker': {'colors': ['#D9BCDB', '#906FA8', '#AAC3DF']},\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3\n    \n    }],\n    'layout': {\n        'title': 'Number of Emails per Frequency Level',\n    }\n}\niplot(fig)","0117e8a7":"count_questions = matches_df.groupby('matches_email_id').count().rename(columns={'matches_question_id': 'Count Questions'}).sort_values('Count Questions', ascending=False)\nemails_df['emails_nbr_questions'] = 0\nemails_df.loc[count_questions.index, 'emails_nbr_questions'] = count_questions['Count Questions']\n\nemails_numbers = emails_df['emails_nbr_questions'].value_counts()\nemails_numbers[emails_numbers.index.values == 0]\nvals = []\nvals.append(emails_numbers.loc[0])\nvals.append(emails_numbers.loc[1])\nvals.append(emails_numbers.loc[2])\nvals.append(emails_numbers.loc[3])\nvals.append(emails_numbers[(emails_numbers.index > 3) & (emails_numbers.index <= 6) ].sum())\nvals.append(emails_numbers[(emails_numbers.index > 6) & (emails_numbers.index <= 10) ].sum())\nvals.append(emails_numbers[emails_numbers.index > 10].sum())\nfig= {\n    'data': [{\n        'type': 'bar',\n        'x': ['no questions', 'one question', 'two questions', 'three questions', '4 ~ 6 questions', '6 ~ 10 questions', 'more than 10 questions'],\n        'y': vals,\n    }],\n    'layout': {\n        'title': 'How many questions are contained in each email ?',\n        'xaxis': {'title': 'Nbr of questions'},\n        'yaxis': {'title': 'Nbr of emails'},\n    }\n}\n\niplot(fig)","24de4078":"answers_df = answers_df.rename(columns={'answers_question_id': 'question_id', 'answers_author_id': 'author_id'})\nmatches_df = matches_df.rename(columns={'matches_question_id': 'question_id', 'emails_recipient_id': 'author_id'})\nm = answers_df.reset_index().merge(matches_df, on=['question_id', 'author_id']).set_index('answers_id')\nemails_with_questions_answered = len(m)\nemails_with_questions_non_answered = len(emails_df) - emails_with_questions_answered\n\nfig = {\n    'data': [{\n        'type': 'pie',\n        'labels': ['Emails with questions answered by recipient', 'Emails without questions answered by recipient'],\n        'values': [emails_with_questions_answered, emails_with_questions_non_answered],\n        'marker': {'colors': [ '#906FA8', '#D9BCDB',], 'line': {'color': 'white'}},\n        'hole': .5\n    }],\n    'layout': {\n        'title': 'Accurate Email Recommendations',\n        'legend': {'orientation': 'h'}\n    }\n}\n\niplot(fig)","c94e3d84":"school_memberships_df = pd.read_csv('..\/input\/school_memberships.csv')\ngroups_df = pd.read_csv('..\/input\/groups.csv', index_col='groups_id')\ngroup_memberships_df = pd.read_csv('..\/input\/group_memberships.csv')\n\nvals = [len(group_memberships_df), len(school_memberships_df)]\nfig = {\n    'data': [\n        {\n            'type': 'pie',\n            'labels': ['Groups', 'Schools'],\n            'values': vals,\n            'marker': {'colors': ['#a06ee1', '#cbbcf6']},\n            'textinfo': 'percent+label',\n            'hole': .3,\n            'showlegend': False\n        }\n    ],\n    'layout': {\n        'title': 'Group vs Schools Memberships'\n    }\n}\niplot(fig)","2c576ac9":"# Schools\n\nschool_memberships_df['UserType'] = school_memberships_df['school_memberships_user_id'].apply(lambda x: 'Professional' if x in professionals_df.index.values else 'Student')\nschool_counts = pd.crosstab(school_memberships_df['school_memberships_school_id'], school_memberships_df['UserType'], margins=True).sort_values('All', ascending=False)\n#school_counts.head(15)\n\n# Groups\ngroup_memberships_df = group_memberships_df.join(groups_df, on='group_memberships_group_id')\ngroup_memberships_df['UserType'] = group_memberships_df['group_memberships_user_id'].apply(lambda x: 'Professional' if x in professionals_df.index.values else 'Student')\n#group_memberships_df.sample(5)\ngroup_counts = pd.crosstab(group_memberships_df['group_memberships_group_id'], [group_memberships_df['UserType'],group_memberships_df['groups_group_type'] ], margins=True).sort_values('All', ascending=False).loc['All']\n#group_counts\n\nSTUDENTS_COLOR = '#e6b2c6'\nPROFESSIONALS_COLOR = '#774181'","45ee186e":"fig = {\n    'data': [\n        {\n        'type': 'pie',\n        'title': { 'text': 'Schools', 'font': {'size': 20} },\n        'labels': ['Professionals', 'Students'],\n        'values': [school_counts.loc['All', 'Professional'], school_counts.loc['All', 'Student']],\n        'marker': {'colors': [PROFESSIONALS_COLOR, STUDENTS_COLOR]},\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3,\n        'domain': {'x': [0, 0.4], 'y': [0, 1]}\n        },\n        {\n        'type': 'pie',\n        'title': { 'text': 'Groups', 'font': {'size': 20} },\n        'labels': ['Professionals', 'Students'],\n        'values': [group_counts['Professional'].sum(), group_counts['Student'].sum()],\n        'marker': {'colors': [PROFESSIONALS_COLOR, STUDENTS_COLOR]},\n        'textinfo': 'label+percent',\n        'showlegend': False,\n        'hole': .3,\n        'domain': {'x': [0.6, 1], 'y': [0, 1]}\n        }\n    ],\n    'layout': {\n        'title': 'Proportion of Professionals & Students Memberships',\n    }\n}\niplot(fig)","fd88d7a4":"# Top Groups Number of Members per Type\n\nprofessionals = group_counts['Professional'].values\nstudents = group_counts['Student'].values\ngroups_str = list(group_counts['Professional'].index.values)\n\nfig = {\n    'data': [\n        {\n            'type': 'bar',\n            'name': 'Professionals',\n            'x': groups_str,\n            'y': professionals,\n            'marker': {'color': PROFESSIONALS_COLOR},\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        },\n        {\n            'type': 'bar',\n            'name': 'Students',\n            'x': groups_str,\n            'y': students,\n            'marker': {'color': STUDENTS_COLOR},\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        },\n    ],\n    'layout': {\n        'title': f'Number of Members by Group Type',\n        'xaxis': {'title': 'Group Types'},\n        'yaxis': {'title': 'Number of Members', 'dtick': 50},\n        'barmode': 'stack',\n        'legend': {'orientation': 'h'},\n    }\n}\niplot(fig)\n","26d62bf3":"# Top Schools Number of Members per Type\nn = 10\ntop_school_ids = list(school_counts.drop('All', axis=0).head(n).index.values)\n\nprofessionals = [school_counts.loc[i, 'Professional'] for i in top_school_ids]\nstudents = [school_counts.loc[i, 'Student'] for i in top_school_ids]\nschools_str = ['School '+str(i) for i in top_school_ids]\nfig = {\n    'data': [\n        {\n            'type': 'bar',\n            'name': 'Professionals',\n            'x': schools_str,\n            'y': professionals,\n            'marker': {'color': PROFESSIONALS_COLOR},\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        },\n        {\n            'type': 'bar',\n            'name': 'Students',\n            'x': schools_str,\n            'y': students,\n            'marker': {'color': STUDENTS_COLOR},\n            'xaxis': 'x1',\n            'yaxis': 'y1'\n        },\n    ],\n    'layout': {\n        'title': f'Top {n} Popular Schools',\n        'xaxis': {'title': 'School IDs'},\n        'yaxis': {'title': 'Number of Members'},\n        'barmode': 'stack',\n        'legend': {'orientation': 'h'},\n        \n    }\n}\niplot(fig)\n","43cec24f":"### **<span style=\"color: red\">Observation: <\/span>** The chart shows the Top Tags followed by professionals. Since most professionals work in IT ( as shown in the previous chart ), the most followed Tags are also related to IT.","b8f43432":"![Emails](https:\/\/i.imgur.com\/TjvBNfG.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/business-communication-computer-connection-261706\/\">Source<\/a><\/span>\n","4bbd8b49":"### **<span style=\"color: red\">Observation: <\/span>** \n### - Each Professional can provide the industry he works in. We notice first that there are **2576 entries** where the industry field is missing.\n### - One other important thing to note, is that the Top 3 Industries professionals work in, are all related to IT ( **~ 6500**  professionals in total work in IT-related companies ) !","f5123b29":"<h1 style='text-align: center; '>\ud83c\udfe0 An Extensive EDA for <a href=\"https:\/\/www.careervillage.org\/about\/\">CareerVillage.org<\/a> \ud83c\udfe0<\/h1>","87dee9a4":"![question](https:\/\/i.imgur.com\/HupP118.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/ask-blackboard-chalk-board-chalkboard-356079\/\">Source<\/a><\/span>","40d00ecd":"### **<span style=\"color: red\">Observation: <\/span>** The mean number of questions per email is **2.33**.","6ee283b2":"# 4. Professionals <a class=\"anchor\" id=\"professionals\"><\/a> [\u2191](#outline)","ada08016":"### **<span style=\"color: red\">Observation: <\/span>** Out of the **1,850,101** emails sent, only **17576 **contained questions that were answered by professionals.","1dad8a7a":"### **<span style=\"color: red\">Observation: <\/span>** This chart is **<span style=\"color: red;\">VERY IMPORTANT<\/span> **! It is hard to know if a professional has answered a question because he read it in the email, but if he answered the question before the email was sent, or answered a question that wasn't in any email sent to him, we can conclude with confidence that it was not a direct consequence of the recommendations engine ! From this chart,  we can see that most of the answers were not posted after the recommendation email was sent. Hence, the **need for a better recommendation system** !","44e5ad17":"# 6. Answers <a class=\"anchor\" id=\"answers\"><\/a> [\u2191](#outline)","711a239d":"# 3. Students <a class=\"anchor\" id=\"students\"><\/a> [\u2191](#outline)","a2afa9a9":"![Answers](https:\/\/i.imgur.com\/czATdXq.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/people-taking-group-photo-1374360\/\">Source<\/a><\/span>\n","02230abe":"### **<span style=\"color: red\">Observation: <\/span>** Again, **~ 3143** (out of 28152) Professionals have unknown locations ( ~11% ), the others are distibuted as shown above.","f50da068":"# 7. Emails <a class=\"anchor\" id=\"emails\"><\/a> [\u2191](#outline)","5215bbcc":"![Group](https:\/\/i.imgur.com\/lR2dcZH.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/group-hand-fist-bump-1068523\/\">Source<\/a><\/span>\n","5b68cb44":"# 8. School \/ Group Memberships <a class=\"anchor\" id=\"memberships\"><\/a> [\u2191](#outline)","39aa6234":"### **<span style=\"color: red\">Observation: <\/span>** There are ~ 1.85 Million Emails in the Database, most of them are ones sent daily.","6aa9a1ea":"*Last update: April 2nd, 2019 ( Minor changes to the Number of Students & Number of Professionals plots )*","5ab440b1":"![CareerVillage](https:\/\/d1qb2nb5cznatu.cloudfront.net\/startups\/i\/268652-4a6237df3aace773e5b27615b67ec290-medium_jpg.jpg?buster=1493150813)\n<h3 style='text-align: center;color: purple;' >\"The world needs a cloud-based solution for career advice - CareerVillage is that solution.\"<\/h3>\n*<h4 style='text-align: center;' >Hamza El Bouatmani - March 14th, 2019<\/h4>*","861271e8":"### **<span style=\"color: red\">Observation: <\/span>** There are **over 18000** professionals who didn't post any answer ! ( thus the need for a good **recommendation engine** )\n","ddd089fc":"# 1. Introduction <a class=\"anchor\" id=\"intro\"><\/a> [\u2191](#outline)\n\n### CareerVillage.org is a **nonprofit** that **crowdsources** career advice for underserved youth (*founded in 2011*).\n### The platform matches the **career questions** students ask to a volunteer corp of over **10,000 working professionals** with relevant expertise.\n\n### This Kernel attempts to provide an extensive **Exploratory Data Analysis** of the data provided by CareerVillage to Kagglers for [this competition](https:\/\/www.kaggle.com\/c\/data-science-for-good-careervillage). Most visualizations are done using Plotly library.","00126286":"# Outline <a class=\"anchor\" id=\"outline\"><\/a>\n\n1. [Introduction](#intro)\n2. [Class Diagram](#diagram)\n3. [Students](#students)\n4. [Professionals](#professionals)\n5. [Questions](#questions)\n6. [Answers](#answers)\n7. [Emails](#emails)\n8. [School \/ Group Memberships](#memberships)\n","8e7ef32d":"![class_diagram](https:\/\/i.imgur.com\/oBeYEM0.png)","dcafe3e1":"# 2. Class Diagram <a class=\"anchor\" id=\"diagram\"><\/a>  [\u2191](#outline)\n\n### Before we start playing with the data, let's have a quick look at its overall architecture using a [Class Diagram](https:\/\/en.wikipedia.org\/wiki\/Class_diagram).\n\n### Description :\n* There are two types of users: **Students** & **Professionals**.  They both share many attributes, but in some cases, each one can interact with specific other classes ( they inherit from the abstract class User ).\n* Any **User** can :\n    - follow a **Tag**\n    - be member of a **Group**\n    - be member of a **School**\n    - write **Comments** on any **Content** ( both **Questions** & **Answers** are considered Content, therefore they also inherit from the abstract class Content)\n* A student can:\n    - ask **Questions**\n* A Professional can:\n    - post **Answers** to Questions\n    - receive **Emails** containing questions that he can potentially answer\n","1f88f942":"### **<span style=\"color: red\">Observation: <\/span>**  Professionals are the ones who make the majority of members of both Schools & Groups (~ 70%)","e06a7a65":"\n## I hope that this Kernel was useful, and see you in the [next one](https:\/\/www.kaggle.com\/hamzael1\/kernels) !\n\n*PS: **upvotes** & **constructive feedback** are always welcome !*","06f09b34":"### **<span style=\"color: red\">Observation: <\/span>** The number of answers follows the same pattern as the number of Students Registrations and yearly question numbers.","3d7d8b14":"### **<span style=\"color: red\">Observation: <\/span>** \n* North America comes naturally first in terms of number of students, but from it's pie chart, we can see that **97%** of the students from this continent are based in the **U.S.A**\n* Asia comes next, with most of its students from India: **~ 85%**\n* 2163 students have unknown locations, which is **~ 7%** of the total number of students\n* African students number amount to 424, **~ 60%** of it come from 3 main countries: **Egypt**, **Niger** , and **South Africa**\n* Students from Europe come mostly from **UK** (~50%)\n* Most of South American students are **argentinians** ( ~40% ), **brazialians** (~21%) and **uruguayans** (~13%)\n* Lastly, students from Oceanian continent come of course mostly from **Australia** (~72%) and **New Zealand **(~21%)","c792979c":"### **<span style=\"color: red\">Observation: <\/span>** It is clear that most of the students registered are based on the U.S (** over 24k !** ). The second country with most students is India ( **~ 2500 students** ). In the nexts charts, we'll take a closer look at each continent.\n#### **<span style=\"color: blue\">Note: <\/span>** *The Map is interactive. Feel free to hover over the countries to see the numbers.*","406bbae7":"### **<span style=\"color: red\">Observation: <\/span>** The Mean Response Time is an important metric, which shows **how quickly people post answers to a question in average** ( this metric is not related to emails ). In this chart, we clearly see that it's decreasing each year ( except in 2016 ), going from ~ 800 days in 2011 to only ~ 62 days in 2018.\n\n#### **<span style=\"color: blue\">Important: <\/span>** To compute this metric, I averaged number of days elapsed between each answer's post date and  the corresponding question's post date for all questions of each year.","8ce2ff87":"### **<span style=\"color: red\">Observation: <\/span>** There are some *HERO* professionals who answered more than a 1000 questions each ! In total, the Top 10 professionals are responsible for **12%** of the total answers in the platform (6344 answers !)\n\n#### **<span style=\"color: blue\">Note: <\/span>** : *For understandable privacy reasons, CareerVillage didn't provide the names of Professionals & Students. So we'll have to deal with the *ugly-looking* IDs :)*","6276c58a":"\n![students](https:\/\/i.imgur.com\/CX2XelQ.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/accomplishment-ceremony-education-graduation-267885\/\">Source<\/a><\/span>","95b49d5e":"# 5. Questions <a class=\"anchor\" id=\"questions\"><\/a> [\u2191](#outline)","a5b3cc6a":"### **<span style=\"color: red\">Observation: <\/span>** Applying some regex on the headlines, I was able to extract and categorize the occupations of many professional .","edbb003e":"### **<span style=\"color: red\">Observation: <\/span>**  Most memberships go in to schools, its normal because there are only **49 Groups** compared to **2706 Schools**.","2f984ac2":"### **<span style=\"color: red\">Observation: <\/span>**  Out of the Seven Group Types, 'Youth Program' Groups are the ones with the majority of members","b1481c42":"### **<span style=\"color: red\">Observation: <\/span>** Most Students follow **'college**' related topics, followed by '**business**' and '**engineering**'","f0cfcf2b":"![professionals](https:\/\/i.imgur.com\/G9F3KHF.jpg)\n<span style=\"float: right;\"><a href=\"https:\/\/www.pexels.com\/photo\/people-taking-group-photo-1374360\/\">Source<\/a><\/span>","a75514cf":"### **<span style=\"color: red\">Observation: <\/span>** The number of questions asked follows the same pattern as the number of Students Registrations, it reached its peak in 2016, slipped back in 2017 and started increasing again in 2018. **The Total number of questions in the Database is : 23931 questions**","35714e06":"### **<span style=\"color: red\">Observation: <\/span>** Again, for understandable privacy reasons, we'll have to deal with the *ugly-looking* School IDs :)"}}