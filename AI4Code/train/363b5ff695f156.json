{"cell_type":{"faaf6356":"code","fe77e940":"code","62fa4c30":"code","65f18945":"code","33808d3c":"code","cb8f31d4":"code","cb2667ee":"code","72f08ddc":"code","f679c44e":"code","ff6eff3e":"code","77fff642":"code","ee137bfe":"code","7a0bffcf":"code","9b1e9b3c":"code","8a478ce3":"code","28424757":"code","870594ca":"code","f8158c77":"code","debf3913":"code","d4491403":"code","3afd936f":"code","8fff372c":"code","e0545c53":"code","fee682be":"code","6e4a7aef":"markdown","7e179a14":"markdown","ee8c5aec":"markdown","c505e6af":"markdown","875a2f99":"markdown"},"source":{"faaf6356":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe77e940":"import pandas as pd\npd.set_option('display.max_columns', 30)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n# pd.set_option('display.width', 200)","62fa4c30":"import pandas as pd\npd.set_option('display.max_columns', 20)\n\nmovie = pd.read_csv('..\/input\/moviee-rating\/movie.csv')\nrating = pd.read_csv('..\/input\/moviee-rating\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf = df.iloc[:10000000, :]","65f18945":"df.head()","33808d3c":"df['year_movie'] = df.title.str.extract('(\\(\\d\\d\\d\\d\\))', expand=False)\ndf['year_movie'] = df.year_movie.str.extract('(\\d\\d\\d\\d)', expand=False)\ndf['title'] = df.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\ndf['title'] = df['title'].apply(lambda x: x.strip())\n\n#################\n# genres\n#################\n\ndf[\"genre\"] = df[\"genres\"].apply(lambda x: x.split(\"|\")[0])\ndf.drop(\"genres\", inplace=True, axis=1)\n\n#################\n# timestamp\n#################\n\ndf[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"], format='%Y-%m-%d')\ndf.info()\n\ndf[\"year\"] = df[\"timestamp\"].dt.year\ndf[\"month\"] = df[\"timestamp\"].dt.month\ndf[\"day\"] = df[\"timestamp\"].dt.day","cb8f31d4":"df.head()","cb2667ee":"df.shape","72f08ddc":"# rare movies\n\nrare_movies = df['title'].value_counts() < 1000\nrare_movies = rare_movies.index\nprint(rare_movies)","f679c44e":"a = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = a[a[\"title\"] <= 1000].index","ff6eff3e":"# Before creating matrix rare movies have been removed from data set\n\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\ncommon_movies = common_movies.iloc[:1000000, :]\nprint(common_movies)","77fff642":"# According to people who voted last 10 years\n\na = df['year'].max() - 10\ndf[df['year'] > a].head()","ee137bfe":"# Creating matrix with pivot table\n\nuser_movie_df = common_movies.pivot_table(index = ['userId'], columns = ['title'], values = 'rating')","7a0bffcf":"user_movie_df.head()","9b1e9b3c":"movie = user_movie_df['Babe']","8a478ce3":"user_movie_df.corrwith(movie).sort_values(ascending=False).head(10)","28424757":"genre_df = df[df['genre'] == 'Children']\nprint(genre_df)","870594ca":"user_movie_df = genre_df.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")","f8158c77":"movie = user_movie_df['Babe']","debf3913":"user_movie_df.corrwith(movie).sort_values(ascending = False).head()","d4491403":"genre_df = genre_df.copy()\ngenre_df.loc[genre_df[\"title\"] == 'Babe', \"genre\"] = \"new_children\"\nprint(genre_df)","3afd936f":"genre_df[genre_df['title'] =='Babe'].head()","8fff372c":"user_movie_df = genre_df.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")","e0545c53":"movie = user_movie_df['Babe']","fee682be":"user_movie_df.corrwith(movie).sort_values(ascending = False).head(10)","6e4a7aef":"# Preparing Data\n","7e179a14":"# Creating User_movie Matrix (user_movie_df)","ee8c5aec":"## 3. Examining movies similar to our movie through categories other than the Action category","c505e6af":"# MOVIE RECOMMENDATION SYSTEMS \n## 1. BASED ON USER VOTES IN THE LAST 10 YEARS","875a2f99":"# THE BASIC ASSUMPTION HERE IS THAT \"RECOMMENDATIONS SHOULD CHANGE AFTER THE USER ENTERS THE CATEGORY.\n## 2. Analysis is made only for the category of movie 'Babe' , would recommendation change ?"}}