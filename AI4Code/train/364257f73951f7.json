{"cell_type":{"d8baa332":"code","fad15613":"code","320a838b":"code","b2c7dbfe":"code","ca186406":"code","92d4073e":"code","e3ed7d48":"code","9179676e":"code","e4aed073":"code","d3586848":"code","e49c7798":"code","62ba0278":"code","ff884260":"code","6dad81a5":"code","8d5886cf":"code","953c9fe4":"code","3455b682":"code","79dead1b":"code","5afa184a":"markdown","9443d3b2":"markdown","52c47e22":"markdown","206124d0":"markdown","18093b69":"markdown","7b5be97c":"markdown","4dfe2ab0":"markdown","43e6ca52":"markdown","a11b7784":"markdown","a60afd72":"markdown","c8f36f91":"markdown","bb2d3c10":"markdown","3a28e075":"markdown","60a3a848":"markdown"},"source":{"d8baa332":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fad15613":"df = pd.read_csv('\/kaggle\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv', engine='python')\nprint(df.shape)\ndf.head()","320a838b":"df[\"Author\"] = df[\"Author\"].str.replace(' ','')\ndf[\"Author\"]","b2c7dbfe":"df.loc[df[\"Name\"] == \"Wonder\"]","ca186406":"# Delete duplication\ndf = df.drop_duplicates(subset=[\"Name\"])\ndf.loc[df[\"Name\"] == \"Wonder\"]","92d4073e":"def get_weighted_rate(dataframe):\n    R = np.array(dataframe[\"User Rating\"])\n    C = np.mean(R)\n    v = np.array(dataframe[\"Reviews\"])\n    m = np.min(v)\n\n    return (v*R)\/(v+m) + (m*C)\/(v+m)","e3ed7d48":"fiction_books = df.loc[df[\"Genre\"] == \"Fiction\"]\nnon_fiction_books = df.loc[df[\"Genre\"] == \"Non Fiction\"]","9179676e":"df[\"Weighted Rating\"] = get_weighted_rate(df)\nfiction_books[\"Weighted Rating\"] = get_weighted_rate(fiction_books)\nnon_fiction_books[\"Weighted Rating\"] = get_weighted_rate(non_fiction_books)","e4aed073":"plt.boxplot(\n    x=[fiction_books[\"User Rating\"], fiction_books[\"Weighted Rating\"], non_fiction_books[\"User Rating\"], non_fiction_books[\"Weighted Rating\"]],\n    labels=[\"Fiction\", \"(Weighted)Fiction\", \"Non fiction\", \"(Weighted)Non fiction\"]\n);\n\nplt.title(\"User rate by genre\")\nplt.xlabel(\"Genre\")\nplt.ylabel(\"Rate\")\nplt.tight_layout()","d3586848":"print(fiction_books[\"Reviews\"].std())\nprint(non_fiction_books[\"Reviews\"].std())","e49c7798":"fiction_rate_by_year = fiction_books.groupby(\"Year\")[\"User Rating\"].mean()\nfiction_weighted_rate_by_year = fiction_books.groupby(\"Year\")[\"Weighted Rating\"].mean()\n\nnon_fiction_rate_by_year = non_fiction_books.groupby(\"Year\")[\"User Rating\"].mean()\nnon_fiction_weighted_rate_by_year = non_fiction_books.groupby(\"Year\")[\"Weighted Rating\"].mean()\n\ndf_rate_by_year = df.groupby(\"Year\")[\"User Rating\"].mean()\ndf_weighted_rate_by_year = df.groupby(\"Year\")[\"Weighted Rating\"].mean()","62ba0278":"plt.figure(figsize=(10, 10))\nplt.plot(fiction_rate_by_year, label=\"Fiction\")\nplt.plot(fiction_weighted_rate_by_year, label=\"Fiction(weight)\")\n\nplt.plot(non_fiction_rate_by_year, label=\"Non fiction\")\nplt.plot(non_fiction_weighted_rate_by_year, label=\"Non fiction(weight)\")\n\nplt.plot(df_rate_by_year, label=\"total\")\nplt.plot(df_weighted_rate_by_year, label=\"total(weight)\")\n\nplt.title(\"Average rate by year\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Averate rate\")\nplt.legend(loc=\"upper left\")\n","ff884260":"# Filter out authors who only published 1 book.\nbooks_per_fiction_author = fiction_books.groupby(\"Author\").count()\nbooks_per_non_fiction_author = non_fiction_books.groupby(\"Author\").count()\n\nat_least_two_fiction = books_per_fiction_author.loc[books_per_fiction_author[\"Name\"] > 1]\nat_least_two_non_fiction = books_per_non_fiction_author.loc[books_per_non_fiction_author[\"Name\"] > 1]\n\nauthors_at_least_two_fiction_books = fiction_books.loc[fiction_books[\"Author\"].isin(at_least_two_fiction.index)]\nauthors_at_least_two_non_fiction_books = non_fiction_books.loc[non_fiction_books[\"Author\"].isin(at_least_two_non_fiction.index)]","6dad81a5":"high_rate_fiction_author = authors_at_least_two_fiction_books.groupby(\"Author\")[[\"User Rating\", \"Weighted Rating\", \"Reviews\"]].mean()\nhigh_rate_non_fiction_author = authors_at_least_two_non_fiction_books.groupby(\"Author\")[[\"User Rating\", \"Weighted Rating\", \"Reviews\"]].mean()\n\nhigh_rate_fiction_author = high_rate_fiction_author.sort_values(by=[\"Weighted Rating\"])\nhigh_rate_non_fiction_author = high_rate_non_fiction_author.sort_values(by=[\"Weighted Rating\"])","8d5886cf":"plt.figure(figsize=(10, 10))\nplt.scatter(high_rate_fiction_author.index, high_rate_fiction_author[\"User Rating\"], label=\"Rate\")\nplt.scatter(high_rate_fiction_author.index, high_rate_fiction_author[\"Weighted Rating\"], label=\"Weighted rate\")\n\nplt.xticks(rotation=45);\nplt.legend(loc=\"upper left\")","953c9fe4":"high_rate_fiction_author.loc[high_rate_fiction_author.index.isin([\"DavPilkey\", \"DanBrown\"])]","3455b682":"plt.figure(figsize=(10, 10))\nplt.scatter(high_rate_non_fiction_author.index, high_rate_non_fiction_author[\"User Rating\"], label=\"Rate\")\nplt.scatter(high_rate_non_fiction_author.index, high_rate_non_fiction_author[\"Weighted Rating\"], label=\"Weighted rate\")\n\nplt.xticks(rotation=45);\nplt.legend(loc=\"upper left\")","79dead1b":"high_rate_non_fiction_author.loc[high_rate_non_fiction_author.index.isin([\"TheCollegeBoard\", \"MarkR.Levin\"])]","5afa184a":"### Cleansing \"Author\" column\n- There exists duplicate author name (e.g., J.K. Rowling, J. K. Rowling)  ","9443d3b2":"# Amazon Top 50 Bestselling Books 2009 - 2019\nKaggle : https:\/\/www.kaggle.com\/sootersaalu\/amazon-top-50-bestselling-books-2009-2019\/metadata","52c47e22":"We will make a new feature \"Weighted Rating\".  \n- It gives a weight to book's rate(R) when there exist enough reviews.  \n- When there is not enough reviews, it gives a weight to average rate(C) rather than book's rate(R).","206124d0":"# High rated book authors\n\n- Only consider authors who have published more than 2 books","18093b69":"## Delete duplicated \"Name\"\n- There exist duplication in \"Name\" column\n- For example, \"Wonder\" exists during 5 years","7b5be97c":"To consider about genre, split data based on genre","4dfe2ab0":"Standard deviation of fiction's review is larger than non fiction's one","43e6ca52":"## Rate of genres by year visualization","a11b7784":"## 2. EDA","a60afd72":"1. Data cleansing\n2. EDA","c8f36f91":"### Distribution of genre visualization","bb2d3c10":"In fiction books, there is tendency that high rated books have the lower number of reviews than others.  \n","3a28e075":"## 1. Data cleansing","60a3a848":"\nWeighted rating : \n$$\nWeightedRating(WR) = \\frac{v}{v+m}R + \\frac{m}{v+m}C\n$$\nwhere   \n- R = average rate for the book  \n- C = the mean rate across the whole data  \n- v = number of reviews for the book  \n- m = minimum reviews required to be listed in the best seller list  \n\n"}}