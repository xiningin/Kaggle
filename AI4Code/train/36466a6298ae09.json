{"cell_type":{"1e31d706":"code","a19d70a4":"code","806c012b":"code","bd8f13a7":"code","6b459a94":"code","6c9bfb96":"code","441c62d8":"code","3a5efcac":"code","46a37bd3":"code","e433a275":"code","17b51ad9":"code","c6708951":"code","2ac7cb5b":"code","d2c8dcc2":"code","55c30828":"code","9e685345":"code","2990a976":"code","09e475ff":"code","d41c0ad7":"code","f0e4f0cf":"code","a315fd3c":"code","a99475fd":"code","46290772":"code","63ab936e":"code","e4702247":"code","7867205e":"code","4178c7ca":"code","c2c9af25":"code","712c7b6a":"code","d658e443":"markdown","e8fa9b2d":"markdown","cce1b066":"markdown","80d14fb3":"markdown","42479f0a":"markdown","db3e87de":"markdown","b03f7a5c":"markdown","fda1eb3c":"markdown","69991829":"markdown","1fe6b043":"markdown","932c49f4":"markdown","9671755c":"markdown","9fbe80bf":"markdown"},"source":{"1e31d706":"#No need of running this,lol\nNotebook details:\n  * created on:6.5.2020\n  * created by:Ashwani Rathee\n  * last updated:6.5.2020\n  * suggestions and constructive feedbacks are appreciated.","a19d70a4":"!pip install bokeh","806c012b":"import numpy as np                                   #our math guy\nfrom bokeh.io import output_notebook                 #to keep it and make it work inside the notebook\nfrom bokeh.plotting import figure, output_file, show #let's import the basic stuff\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import *\nfrom bokeh.models import ColumnDataSource\n\nimport bokeh.sampledata\nbokeh.sampledata.download()\nfrom bokeh.sampledata.stocks import AAPL  #just this won't work we need above two too\n\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.transform import factor_cmap\n\nfrom bokeh.transform import dodge\n\nfrom bokeh.sampledata.sprint import sprint \n\nfrom bokeh.models import FactorRange","bd8f13a7":"p = figure()\np.circle([-3,-2,-1,0,1, 2, 3], [9,4,1,0,1, 4, 9], color=\"black\")\n\noutput_file(\"foo.html\")\n\nshow(p)","6b459a94":"\n# prepare some data\nx = [1, 2, 3, 4, 5]  #array x\ny = [6, 7, 8, 9, 10]  #array y\n\n# # output to static HTML file\n#output_file(\"lines.html\")  #for static html but here we want it work inside the work \noutput_notebook()           #similiar to %matplotlib inline\n\n# create a new plot with a title and axis labels\np = figure(title=\"Getting Started\", x_axis_label='Hello', y_axis_label='Bokeh')\n\n# add a line renderer with legend and line thickness\np.line(x, y, legend_label=\"Line\", line_width=3)\n\n# show the results\nshow(p)                 #similiar to plot show\n","6c9bfb96":"# prepare some data\nx = [0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny0 = [i**2 for i in x]\ny1 = [10**i for i in x]\ny2 = [10**(i**2) for i in x]\n\n# create a new plot\np = figure(\n   tools=\"pan,box_zoom,reset,save\",\n   y_axis_type=\"log\", y_range=[0.001, 10**11], title=\"log axis example\",\n   x_axis_label='sections', y_axis_label='particles'\n)\n\n# add some renderers\np.line(x, x, legend_label=\"y=x\")\np.circle(x, x, legend_label=\"y=x\", fill_color=\"white\", size=8)\np.line(x, y0, legend_label=\"y=x^2\", line_width=3)\np.line(x, y1, legend_label=\"y=10^x\", line_color=\"red\")\np.circle(x, y1, legend_label=\"y=10^x\", fill_color=\"red\", line_color=\"red\", size=6)\np.line(x, y2, legend_label=\"y=10^x^2\", line_color=\"orange\", line_dash=\"4 4\")\n\n# show the results\nshow(p)","441c62d8":"# prepare some data\nN = 4000\nx = np.random.random(size=N) * 100\ny = np.random.random(size=N) * 100\nradii = np.random.random(size=N) * 1.5\ncolors = [\n    \"#%02x%02x%02x\" % (int(r), int(g), 150) for r, g in zip(50+2*x, 30+2*y)\n]\n\nTOOLS = \"crosshair,pan,wheel_zoom,box_zoom,reset,box_select,lasso_select\"\n\n# create a new plot with the tools above, and explicit ranges\np = figure(tools=TOOLS, x_range=(0, 100), y_range=(0, 100))\n\n# add a circle renderer with vectorized colors and sizes\np.circle(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None)\n\n# show the results\nshow(p)","3a5efcac":"# prepare some data\nN = 100\nx = np.linspace(0, 4*np.pi, N)\ny0 = np.sin(x)\ny1 = np.cos(x)\ny2 = np.sin(x) + np.cos(x)\n\n# create a new plot\ns1 = figure(width=250, plot_height=250, title=None)\ns1.circle(x, y0, size=10, color=\"navy\", alpha=0.5)\n\n# NEW: create a new plot and share both ranges\ns2 = figure(width=250, height=250, x_range=s1.x_range, y_range=s1.y_range, title=None)\ns2.triangle(x, y1, size=10, color=\"firebrick\", alpha=0.5)\n\n# NEW: create a new plot and share only one range\ns3 = figure(width=250, height=250, x_range=s1.x_range, title=None)\ns3.square(x, y2, size=10, color=\"olive\", alpha=0.5)\n\n# NEW: put the subplots in a gridplot\np = gridplot([[s1, s2, s3]], toolbar_location=None)\n\n# show the results\nshow(p)\n","46a37bd3":"# prepare some date\nN = 300\nx = np.linspace(0, 4*np.pi, N)\ny0 = np.sin(x)\ny1 = np.cos(x)\n\n# NEW: create a column data source for the plots to share\nsource = ColumnDataSource(data=dict(x=x, y0=y0, y1=y1))\n\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save,box_select,lasso_select\"\n\n# create a new plot and add a renderer\nleft = figure(tools=TOOLS, width=350, height=350, title=None)\nleft.circle('x', 'y0', source=source)\n\n# create another new plot and add a renderer\nright = figure(tools=TOOLS, width=350, height=350, title=None)\nright.circle('x', 'y1', source=source)\n\n# put the subplots in a gridplot\np = gridplot([[left, right]])\n\n# show the results\nshow(p)\n","e433a275":"# prepare some data\naapl = np.array(AAPL['adj_close'])\naapl_dates = np.array(AAPL['date'], dtype=np.datetime64)\n\nwindow_size = 30\nwindow = np.ones(window_size)\/float(window_size)\naapl_avg = np.convolve(aapl, window, 'same')\n\n# create a new plot with a datetime axis type\np = figure(plot_width=800, plot_height=350, x_axis_type=\"datetime\")\n\n# add renderers\np.circle(aapl_dates, aapl, size=4, color='darkgrey', alpha=0.2, legend_label='close')\np.line(aapl_dates, aapl_avg, color='navy', legend_label='avg')\n\n# NEW: customize by setting attributes\np.title.text = \"AAPL One-Month Average\"\np.legend.location = \"top_left\"\np.grid.grid_line_alpha = 0\np.xaxis.axis_label = 'Date'\np.yaxis.axis_label = 'Price'\np.ygrid.band_fill_color = \"olive\"\np.ygrid.band_fill_alpha = 0.1\n\n# show the results\nshow(p)","17b51ad9":"movies = ['The Shawshank Redemption', 'The Godfather', 'The Dark Night', \"Schindler's List\", 'Pulp Fiction', 'Fight Club']\nimdb_rating = [9.2, 9.1, 9.0,8.9, 8.8,8.8]\n\np = figure(x_range=movies, plot_height=350, title=\"Top Movies as Rated by IMDb\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=movies, top=imdb_rating, width=0.9)#set it to less than or they will mix into each other\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","c6708951":"fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts))\n\np = figure(x_range=fruits, plot_height=350, toolbar_location=None, title=\"Fruit Counts\")\np.vbar(x='fruits', top='counts', width=0.9, source=source, legend_field=\"fruits\",\n       line_color='white', fill_color=factor_cmap('fruits', palette=Spectral6, factors=fruits))\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.y_range.end = 9\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","2ac7cb5b":"\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts, color=Spectral6))\n\np = figure(x_range=fruits, y_range=(0,9), plot_height=350, title=\"Fruit Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='fruits', top='counts', width=0.9, color='color', legend_field=\"fruits\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","d2c8dcc2":"fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\nsource = ColumnDataSource(data=data)\n\np = figure(x_range=fruits, y_range=(0, 10), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=dodge('fruits', -0.25, range=p.x_range), top='2015', width=0.2, source=source,\n       color=\"#c9d9d3\", legend_label=\"2015\")\n\np.vbar(x=dodge('fruits',  0.0,  range=p.x_range), top='2016', width=0.2, source=source,\n       color=\"#718dbf\", legend_label=\"2016\")\n\np.vbar(x=dodge('fruits',  0.25, range=p.x_range), top='2017', width=0.2, source=source,\n       color=\"#e84d60\", legend_label=\"2017\")\n\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.legend.location = \"top_left\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","55c30828":"sprint.Year = sprint.Year.astype(str)\ngroup = sprint.groupby('Year')\nsource = ColumnDataSource(group)\n\np = figure(y_range=group, x_range=(9.5,12.7), plot_width=400, plot_height=550, toolbar_location=None,\n           title=\"Time Spreads for Sprint Medalists (by Year)\")\np.hbar(y=\"Year\", left='Time_min', right='Time_max', height=0.4, source=source)\n\np.ygrid.grid_line_color = None\np.xaxis.axis_label = \"Time (seconds)\"\np.outline_line_color = None\n\nshow(p)","9e685345":"factors = [\n    (\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n    (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n    (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n    (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\"),\n\n]\n\np = figure(x_range=FactorRange(*factors), plot_height=350,\n           toolbar_location=None, tools=\"\")\n\nx = [ 10, 12, 16, 9, 10, 8, 12, 13, 14, 14, 12, 16 ]\np.vbar(x=factors, top=x, width=0.9, alpha=0.5)\n\np.line(x=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"], y=[12, 9, 13, 14], color=\"red\", line_width=2)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","2990a976":"\nfrom bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_nested.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\n# this creates [ (\"Apples\", \"2015\"), (\"Apples\", \"2016\"), (\"Apples\", \"2017\"), (\"Pears\", \"2015), ... ]\nx = [ (fruit, year) for fruit in fruits for year in years ]\ncounts = sum(zip(data['2015'], data['2016'], data['2017']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='x', top='counts', width=0.9, source=source)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","09e475ff":"bar_nested_colormapped.py","d41c0ad7":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_nested_colormapped.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\npalette = [\"#c9d9d3\", \"#718dbf\", \"#e84d60\"]\n\n# this creates [ (\"Apples\", \"2015\"), (\"Apples\", \"2016\"), (\"Apples\", \"2017\"), (\"Pears\", \"2015), ... ]\nx = [ (fruit, year) for fruit in fruits for year in years ]\ncounts = sum(zip(data['2015'], data['2016'], data['2017']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='x', top='counts', width=0.9, source=source, line_color=\"white\",\n       fill_color=factor_cmap('x', palette=palette, factors=years, start=1, end=2))\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","f0e4f0cf":"from bokeh.io import output_file, show\nfrom bokeh.palettes import Spectral5\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg as df\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_pandas_groupby_colormapped.html\")\n\ndf.cyl = df.cyl.astype(str)\ngroup = df.groupby('cyl')\n\ncyl_cmap = factor_cmap('cyl', palette=Spectral5, factors=sorted(df.cyl.unique()))\n\np = figure(plot_height=350, x_range=group, title=\"MPG by # Cylinders\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='cyl', top='mpg_mean', width=1, source=group,\n       line_color=cyl_cmap, fill_color=cyl_cmap)\n\np.y_range.start = 0\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"some stuff\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","a315fd3c":"from bokeh.io import output_file, show\nfrom bokeh.palettes import Spectral5\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg_clean as df\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_pandas_groupby_nested.html\")\n\ndf.cyl = df.cyl.astype(str)\ndf.yr = df.yr.astype(str)\n\ngroup = df.groupby(['cyl', 'mfr'])\n\nindex_cmap = factor_cmap('cyl_mfr', palette=Spectral5, factors=sorted(df.cyl.unique()), end=1)\n\np = figure(plot_width=800, plot_height=300, title=\"Mean MPG by # Cylinders and Manufacturer\",\n           x_range=group, toolbar_location=None, tooltips=[(\"MPG\", \"@mpg_mean\"), (\"Cyl, Mfr\", \"@cyl_mfr\")])\n\np.vbar(x='cyl_mfr', top='mpg_mean', width=1, source=group,\n       line_color=\"white\", fill_color=index_cmap, )\n\np.y_range.start = 0\np.x_range.range_padding = 0.05\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Manufacturer grouped by # Cylinders\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","a99475fd":"\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_sorted.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\n# sorting the bars means sorting the range factors\nsorted_fruits = sorted(fruits, key=lambda x: counts[fruits.index(x)])\n\np = figure(x_range=sorted_fruits, plot_height=350, title=\"Fruit Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=fruits, top=counts, width=0.9)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","46290772":"hex_tile.py","63ab936e":"from bokeh.transform import linear_cmap\nfrom bokeh.util.hex import hexbin\n\nn = 20000\nx = np.random.standard_normal(n)\ny = np.random.standard_normal(n)\n\nbins = hexbin(x, y, 0.1)\n\np = figure(title=\"Manual hex bin for 20000 points\", tools=\"wheel_zoom,pan,reset\",\n           match_aspect=True, background_fill_color='#440154')\np.grid.visible = False\n\np.hex_tile(q=\"q\", r=\"r\", size=0.1, line_color=None, source=bins,\n           fill_color=linear_cmap('counts', 'Viridis256', 0, max(bins.counts)))\n\n\nshow(p)","e4702247":"\nimport numpy as np\nimport scipy.special\n\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, output_file, show\n\n\ndef make_plot(title, hist, edges, x, pdf, cdf):\n    p = figure(title=title, tools='', background_fill_color=\"#fafafa\")\n    p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:],\n           fill_color=\"navy\", line_color=\"white\", alpha=0.5)\n    p.line(x, pdf, line_color=\"#ff8888\", line_width=4, alpha=0.7, legend_label=\"PDF\")\n    p.line(x, cdf, line_color=\"orange\", line_width=2, alpha=0.7, legend_label=\"CDF\")\n\n    p.y_range.start = 0\n    p.legend.location = \"center_right\"\n    p.legend.background_fill_color = \"#fefefe\"\n    p.xaxis.axis_label = 'x'\n    p.yaxis.axis_label = 'Pr(x)'\n    p.grid.grid_line_color=\"white\"\n    return p\n\n# Normal Distribution\n\nmu, sigma = 0, 0.5\n\nmeasured = np.random.normal(mu, sigma, 1000)\nhist, edges = np.histogram(measured, density=True, bins=50)\n\nx = np.linspace(-2, 2, 1000)\npdf = 1\/(sigma * np.sqrt(2*np.pi)) * np.exp(-(x-mu)**2 \/ (2*sigma**2))\ncdf = (1+scipy.special.erf((x-mu)\/np.sqrt(2*sigma**2)))\/2\n\np1 = make_plot(\"Normal Distribution (\u03bc=0, \u03c3=0.5)\", hist, edges, x, pdf, cdf)\n\n# Log-Normal Distribution\n\nmu, sigma = 0, 0.5\n\nmeasured = np.random.lognormal(mu, sigma, 1000)\nhist, edges = np.histogram(measured, density=True, bins=50)\n\nx = np.linspace(0.0001, 8.0, 1000)\npdf = 1\/(x* sigma * np.sqrt(2*np.pi)) * np.exp(-(np.log(x)-mu)**2 \/ (2*sigma**2))\ncdf = (1+scipy.special.erf((np.log(x)-mu)\/(np.sqrt(2)*sigma)))\/2\n\np2 = make_plot(\"Log Normal Distribution (\u03bc=0, \u03c3=0.5)\", hist, edges, x, pdf, cdf)\n\n# Gamma Distribution\n\nk, theta = 7.5, 1.0\n\nmeasured = np.random.gamma(k, theta, 1000)\nhist, edges = np.histogram(measured, density=True, bins=50)\n\nx = np.linspace(0.0001, 20.0, 1000)\npdf = x**(k-1) * np.exp(-x\/theta) \/ (theta**k * scipy.special.gamma(k))\ncdf = scipy.special.gammainc(k, x\/theta)\n\np3 = make_plot(\"Gamma Distribution (k=7.5, \u03b8=1)\", hist, edges, x, pdf, cdf)\n\n# Weibull Distribution\n\nlam, k = 1, 1.25\nmeasured = lam*(-np.log(np.random.uniform(0, 1, 1000)))**(1\/k)\nhist, edges = np.histogram(measured, density=True, bins=50)\n\nx = np.linspace(0.0001, 8, 1000)\npdf = (k\/lam)*(x\/lam)**(k-1) * np.exp(-(x\/lam)**k)\ncdf = 1 - np.exp(-(x\/lam)**k)\n\np4 = make_plot(\"Weibull Distribution (\u03bb=1, k=1.25)\", hist, edges, x, pdf, cdf)\n\noutput_file('histogram.html', title=\"histogram.py example\")\n\nshow(gridplot([p1,p2,p3,p4], ncols=2, plot_width=400, plot_height=400, toolbar_location=None))","7867205e":"\nimport numpy as np\n\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.stocks import AAPL, GOOG, IBM, MSFT\n\n\ndef datetime(x):\n    return np.array(x, dtype=np.datetime64)\n\np1 = figure(x_axis_type=\"datetime\", title=\"Stock Closing Prices\")\np1.grid.grid_line_alpha=0.3\np1.xaxis.axis_label = 'Date'\np1.yaxis.axis_label = 'Price'\n\np1.line(datetime(AAPL['date']), AAPL['adj_close'], color='#A6CEE3', legend_label='AAPL')\np1.line(datetime(GOOG['date']), GOOG['adj_close'], color='#B2DF8A', legend_label='GOOG')\np1.line(datetime(IBM['date']), IBM['adj_close'], color='#33A02C', legend_label='IBM')\np1.line(datetime(MSFT['date']), MSFT['adj_close'], color='#FB9A99', legend_label='MSFT')\np1.legend.location = \"top_left\"\n\naapl = np.array(AAPL['adj_close'])\naapl_dates = np.array(AAPL['date'], dtype=np.datetime64)\n\nwindow_size = 30\nwindow = np.ones(window_size)\/float(window_size)\naapl_avg = np.convolve(aapl, window, 'same')\n\np2 = figure(x_axis_type=\"datetime\", title=\"AAPL One-Month Average\")\np2.grid.grid_line_alpha = 0\np2.xaxis.axis_label = 'Date'\np2.yaxis.axis_label = 'Price'\np2.ygrid.band_fill_color = \"olive\"\np2.ygrid.band_fill_alpha = 0.1\n\np2.circle(aapl_dates, aapl, size=4, legend_label='close',\n          color='darkgrey', alpha=0.2)\n\np2.line(aapl_dates, aapl_avg, legend_label='avg', color='navy')\np2.legend.location = \"top_left\"\n\noutput_file(\"stocks.html\", title=\"stocks.py example\")\n\nshow(gridplot([[p1,p2]], plot_width=400, plot_height=400))  # open a browser","4178c7ca":"\nfrom bokeh.models import ColumnDataSource, NumeralTickFormatter, SingleIntervalTicker\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.us_marriages_divorces import data\n\noutput_file('us_marriages_divorces_hover.html',\n            title='144 years of marriage and divorce in the U.S.A.')\n\n# Fill in missing data with a simple linear interpolation\ndata = data.interpolate(method='linear', axis=0).ffill().bfill()\n\n# Set up the data sources for the lines we'll be plotting.\nsource = ColumnDataSource(data=dict(\n    year=data.Year.values,\n    marriages=data.Marriages_per_1000.values,\n    divorces=data.Divorces_per_1000.values,\n))\n\n# Select the tools that will be available to the chart\nTOOLS = 'pan,wheel_zoom,box_zoom,reset,save'\n\np = figure(tools=TOOLS, plot_width=800, plot_height=500,\n           tooltips='<font face=\"Arial\" size=\"3\">@$name{0.0} $name per 1,000 people in @year<\/font>')\n\n# Customize the chart\np.hover.mode = 'vline'\np.xaxis.ticker = SingleIntervalTicker(interval=10, num_minor_ticks=0)\np.yaxis.formatter = NumeralTickFormatter(format='0.0a')\np.yaxis.axis_label = '# per 1,000 people'\np.title.text = '144 years of marriage and divorce in the U.S.'\n\n# Plot the data\np.line('year', 'marriages', color='#1f77b4', line_width=3, source=source, name=\"marriages\")\np.line('year', 'divorces', color='#ff7f0e', line_width=3, source=source, name=\"divorces\")\n\nshow(p)","c2c9af25":"from typing import Any, List, Tuple\n\nimport numpy as np\n\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, output_file, show\n\n\ndef streamlines(x: np.ndarray, y, u, v, density: float = 1) -> Tuple[List[Any], List[Any]]:\n    ''' Return streamlines of a vector flow.\n    * x and y are 1d arrays defining an *evenly spaced* grid.\n    * u and v are 2d arrays (shape [y,x]) giving velocities.\n    * density controls the closeness of the streamlines.\n    '''\n\n    ## Set up some constants - size of the grid used.\n    NGX = len(x)\n    NGY = len(y)\n\n    ## Constants used to convert between grid index coords and user coords.\n    DX = x[1]-x[0]\n    DY = y[1]-y[0]\n    XOFF = x[0]\n    YOFF = y[0]\n\n    ## Now rescale velocity onto axes-coordinates\n    u = u \/ (x[-1]-x[0])\n    v = v \/ (y[-1]-y[0])\n    speed = np.sqrt(u*u+v*v)\n    ## s (path length) will now be in axes-coordinates, but we must\n    ## rescale u for integrations.\n    u *= NGX\n    v *= NGY\n    ## Now u and v in grid-coordinates.\n\n    NBX = int(30*density)\n    NBY = int(30*density)\n\n    blank = np.zeros((NBY,NBX))\n\n    bx_spacing = NGX\/float(NBX-1)\n    by_spacing = NGY\/float(NBY-1)\n\n    def blank_pos(xi, yi):\n        return int((xi \/ bx_spacing) + 0.5), \\\n               int((yi \/ by_spacing) + 0.5)\n\n    def value_at(a, xi, yi):\n        if type(xi) == np.ndarray:\n            x = xi.astype(np.int)\n            y = yi.astype(np.int)\n        else:\n            x = np.int(xi)\n            y = np.int(yi)\n        a00 = a[y,x]\n        a01 = a[y,x+1]\n        a10 = a[y+1,x]\n        a11 = a[y+1,x+1]\n        xt = xi - x\n        yt = yi - y\n        a0 = a00*(1-xt) + a01*xt\n        a1 = a10*(1-xt) + a11*xt\n        return a0*(1-yt) + a1*yt\n\n    def rk4_integrate(x0, y0):\n        ## This function does RK4 forward and back trajectories from\n        ## the initial conditions, with the odd 'blank array'\n        ## termination conditions. TODO tidy the integration loops.\n\n        def f(xi, yi):\n            dt_ds = 1.\/value_at(speed, xi, yi)\n            ui = value_at(u, xi, yi)\n            vi = value_at(v, xi, yi)\n            return ui*dt_ds, vi*dt_ds\n\n        def g(xi, yi):\n            dt_ds = 1.\/value_at(speed, xi, yi)\n            ui = value_at(u, xi, yi)\n            vi = value_at(v, xi, yi)\n            return -ui*dt_ds, -vi*dt_ds\n\n        check = lambda xi, yi: xi>=0 and xi<NGX-1 and yi>=0 and yi<NGY-1\n\n        bx_changes = []\n        by_changes = []\n\n        ## Integrator function\n        def rk4(x0, y0, f):\n            ds = 0.01 #min(1.\/NGX, 1.\/NGY, 0.01)\n            stotal = 0\n            xi = x0\n            yi = y0\n            xb, yb = blank_pos(xi, yi)\n            xf_traj = []\n            yf_traj = []\n            while check(xi, yi):\n                # Time step. First save the point.\n                xf_traj.append(xi)\n                yf_traj.append(yi)\n                # Next, advance one using RK4\n                try:\n                    k1x, k1y = f(xi, yi)\n                    k2x, k2y = f(xi + .5*ds*k1x, yi + .5*ds*k1y)\n                    k3x, k3y = f(xi + .5*ds*k2x, yi + .5*ds*k2y)\n                    k4x, k4y = f(xi + ds*k3x, yi + ds*k3y)\n                except IndexError:\n                    # Out of the domain on one of the intermediate steps\n                    break\n                xi += ds*(k1x+2*k2x+2*k3x+k4x) \/ 6.\n                yi += ds*(k1y+2*k2y+2*k3y+k4y) \/ 6.\n                # Final position might be out of the domain\n                if not check(xi, yi): break\n                stotal += ds\n                # Next, if s gets to thres, check blank.\n                new_xb, new_yb = blank_pos(xi, yi)\n                if new_xb != xb or new_yb != yb:\n                    # New square, so check and colour. Quit if required.\n                    if blank[new_yb,new_xb] == 0:\n                        blank[new_yb,new_xb] = 1\n                        bx_changes.append(new_xb)\n                        by_changes.append(new_yb)\n                        xb = new_xb\n                        yb = new_yb\n                    else:\n                        break\n                if stotal > 2:\n                    break\n            return stotal, xf_traj, yf_traj\n\n        integrator = rk4\n\n        sf, xf_traj, yf_traj = integrator(x0, y0, f)\n        sb, xb_traj, yb_traj = integrator(x0, y0, g)\n        stotal = sf + sb\n        x_traj = xb_traj[::-1] + xf_traj[1:]\n        y_traj = yb_traj[::-1] + yf_traj[1:]\n\n        ## Tests to check length of traj. Remember, s in units of axes.\n        if len(x_traj) < 1: return None\n        if stotal > .2:\n            initxb, inityb = blank_pos(x0, y0)\n            blank[inityb, initxb] = 1\n            return x_traj, y_traj\n        else:\n            for xb, yb in zip(bx_changes, by_changes):\n                blank[yb, xb] = 0\n            return None\n\n    ## A quick function for integrating trajectories if blank==0.\n    trajectories = []\n    def traj(xb, yb):\n        if xb < 0 or xb >= NBX or yb < 0 or yb >= NBY:\n            return\n        if blank[yb, xb] == 0:\n            t = rk4_integrate(xb*bx_spacing, yb*by_spacing)\n            if t is not None:\n                trajectories.append(t)\n\n    ## Now we build up the trajectory set. I've found it best to look\n    ## for blank==0 along the edges first, and work inwards.\n    for indent in range((max(NBX,NBY))\/\/2):\n        for xi in range(max(NBX,NBY)-2*indent):\n            traj(xi+indent, indent)\n            traj(xi+indent, NBY-1-indent)\n            traj(indent, xi+indent)\n            traj(NBX-1-indent, xi+indent)\n\n    xs = [np.array(t[0])*DX+XOFF for t in trajectories]\n    ys = [np.array(t[1])*DY+YOFF for t in trajectories]\n\n    return xs, ys\n\nxx = np.linspace(-3, 3, 100)\nyy = np.linspace(-3, 3, 100)\n\nY, X = np.meshgrid(xx, yy)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nspeed = np.sqrt(U*U + V*V)\ntheta = np.arctan(V\/U)\n\nx0 = X[::2, ::2].flatten()\ny0 = Y[::2, ::2].flatten()\nlength = speed[::2, ::2].flatten()\/40\nangle = theta[::2, ::2].flatten()\nx1 = x0 + length * np.cos(angle)\ny1 = y0 + length * np.sin(angle)\n\nxs, ys = streamlines(xx, yy, U.T, V.T, density=2)\n\ncm = np.array([\"#C7E9B4\", \"#7FCDBB\", \"#41B6C4\", \"#1D91C0\", \"#225EA8\", \"#0C2C84\"])\nix = ((length-length.min())\/(length.max()-length.min())*5).astype('int')\ncolors = cm[ix]\n\np1 = figure(x_range=(-3,3 ), y_range=(-3, 3))\np1.segment(x0, y0, x1, y1, color=colors, line_width=2)\n\np2 = figure(x_range=p1.x_range, y_range=p1.y_range)\np2.multi_line(xs, ys, color=\"#ee6666\", line_width=2, line_alpha=0.8)\n\noutput_file(\"vector.html\", title=\"vector.py example\")\n\nshow(gridplot([[p1,p2]], plot_width=400, plot_height=400))  # open a browser","712c7b6a":"import numpy as np\n\nfrom bokeh.models import (ColumnDataSource, HoverTool, NodesAndLinkedEdges,\n                          StaticLayoutProvider, TapTool,)\nfrom bokeh.palettes import Set3_12\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.airport_routes import airports, routes\nfrom bokeh.sampledata.us_states import data as us_states\n\noutput_file(\"graphs.html\")\n\nairports.set_index(\"AirportID\", inplace=True)\nairports.index.rename(\"index\", inplace=True)\nroutes.rename(columns={\"SourceID\": \"start\", \"DestinationID\": \"end\"}, inplace=True)\n\nlats, lons = [], []\nfor k, v in us_states.items():\n    lats.append(np.array(v['lats']))\n    lons.append(np.array(v['lons']))\n\nsource = ColumnDataSource(data=dict(lats=lats, lons=lons))\n\ngraph_layout = dict(zip(airports.index.astype(str), zip(airports.Longitude, airports.Latitude)))\nlayout_provider = StaticLayoutProvider(graph_layout=graph_layout)\n\nfig = figure(x_range=(-180, -60), y_range=(15,75),\n              x_axis_label=\"Longitude\", y_axis_label=\"Latitude\",\n              plot_width=800, plot_height=600, background_fill_color=Set3_12[4],\n              background_fill_alpha=0.2, tools='box_zoom,reset')\n\nfig.patches(xs=\"lons\", ys=\"lats\", line_color='grey', line_width=1.0,\n             fill_color=Set3_12[10], source=source)\n\nr = fig.graph(airports, routes, layout_provider,\n              ## node style props\n              node_fill_color=Set3_12[3], node_fill_alpha=0.4, node_line_color=\"black\", node_line_alpha=0.3,\n              node_nonselection_fill_color=Set3_12[3], node_nonselection_fill_alpha=0.2, node_nonselection_line_alpha=0.1,\n              node_selection_fill_color=Set3_12[3], node_selection_fill_alpha=0.8, node_selection_line_alpha=0.3,\n              ## edge style props\n              edge_line_color=\"black\", edge_line_alpha=0.04,\n              edge_hover_line_alpha=0.6, edge_hover_line_color=Set3_12[1],\n              edge_nonselection_line_color=\"black\", edge_nonselection_line_alpha=0.01,\n              edge_selection_line_alpha=0.6, edge_selection_line_color=Set3_12[1],\n              ## graph policies\n              inspection_policy=NodesAndLinkedEdges(), selection_policy=NodesAndLinkedEdges())\n\nhover = HoverTool(tooltips=[(\"Airport\", \"@Name (@IATA), @City \")], renderers=[r])\ntap = TapTool(renderers=[r])\nfig.add_tools(hover, tap)\n\nshow(fig)","d658e443":"bar_intervals.py","e8fa9b2d":"bar_sorted.py","cce1b066":"bars_pandas_groupby_colormapped.py","80d14fb3":"bar_mixed.py","42479f0a":"**Bokeh** is a data visualization library in Python that provides high-performance interactive charts and plots.\nBokeh output can be obtained in various mediums like notebook, html and server. It is possible to embed bokeh plots in Django and flask apps.\n* **bokeh.models **: A low level interface that provides high flexibility to application developers.\n* **bokeh.plotting** : A high level interface for creating visual glyphs.","db3e87de":"bar_colors.py","b03f7a5c":"us_marriages_divorce_hover.py","fda1eb3c":"bar_dodged.py","69991829":"vector.py","1fe6b043":"bar_colormapped.py","932c49f4":"bar_nested.py","9671755c":"Basic Bar Plot:bar_basic.py","9fbe80bf":"bar_pandas_groupby_nested.py"}}