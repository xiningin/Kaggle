{"cell_type":{"d269d8fc":"code","0b900430":"code","a05672a8":"code","0e9d578d":"code","5b25832f":"code","9dff690b":"code","6a9f5f02":"code","fccf09e0":"code","f6d1ea22":"code","d0362817":"code","cfa88d09":"code","6b016a13":"code","43ab7c03":"code","bbe54f62":"code","b2fed1d7":"code","78fb8fe7":"code","b004494d":"code","4ad6e606":"code","2301ca93":"code","e7bdc2e5":"code","58af476c":"code","0ab476b1":"code","471f5fca":"code","269ccede":"code","c72f4b15":"code","d11a1b19":"code","af05ac31":"code","d9fd957a":"code","e1a173a4":"code","f377cad2":"code","1ba3660d":"code","b894c722":"code","53d7140f":"code","c8dfefdf":"code","e6a069cc":"code","1af5b776":"code","1549e441":"code","4c561199":"code","c04eb861":"code","1aee9575":"code","ab39a7d1":"code","f862131e":"code","edc1ec46":"code","582d9da3":"code","c265b165":"code","61e3a15b":"code","f0704efd":"code","2503a9de":"code","3ea468b4":"code","63e83c31":"code","23d9ddae":"code","b98e1c86":"code","efb163ff":"code","6ab15d9f":"code","e2ae8778":"code","23e196e2":"code","4ad3272c":"code","ab733ffe":"markdown"},"source":{"d269d8fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b900430":"df = pd.read_csv('\/kaggle\/input\/stellar-classification-dataset-sdss17\/star_classification.csv')\ndf.head()","a05672a8":"df.shape","0e9d578d":"df.describe()","5b25832f":"df.isna().sum()","9dff690b":"df.dtypes","6a9f5f02":"df['class'].unique()","fccf09e0":"df['class'].value_counts()","f6d1ea22":"odd = df.loc[df['u'] == -9999]\nodd","d0362817":"odd2 = df.loc[df['g'] == -9999]\nodd2","cfa88d09":"odd3 = df.loc[df['z'] == -9999]\nodd3","6b016a13":"df = df.drop(df.index[79543], axis=0)\ndf.shape","43ab7c03":"df.loc[df['u'] == -9999]","bbe54f62":"df = df.reset_index(drop=True)","b2fed1d7":"df['rerun_ID'].unique()","78fb8fe7":"df = df.drop(columns = ['rerun_ID'],axis=1)","b004494d":"df_else = df.sample(frac=0.9, random_state=25)\ndf_test = df.drop(df_else.index)","4ad6e606":"print(df_else.shape)\nprint(df_test.shape)","2301ca93":"df_train = df_else.sample(frac=0.8, random_state = 20)\ndf_val = df_else.drop(df_train.index)","e7bdc2e5":"print(df_train.shape)\nprint(df_val.shape)","58af476c":"t = {'GALAXY':0,'QSO':1,'STAR':2}","0ab476b1":"df_train['class_enc'] = df_train['class'].map(t)\ndf_val['class_enc'] = df_val['class'].map(t)\ndf_train.head()","471f5fca":"df_train = df_train.drop(['class'],axis=1)\ndf_val = df_val.drop(['class'], axis=1)\ndf_train = df_train.reset_index(drop=True)\ndf_val = df_val.reset_index(drop=True)","269ccede":"df_val.head()","c72f4b15":"df.describe()","d11a1b19":"# Feature Selection\n# Numerical input and Classification output\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\n\nX = df_train.drop(['class_enc'],axis=1)\ny = df_train[['class_enc']]\n\nfs = f_classif(X,y)","af05ac31":"fs","d9fd957a":"fs[0][1]","e1a173a4":"fs_df = pd.DataFrame(columns=['f_score','p_value'])\n\ncol = []\nf_score = []\np_value = []\nfor i in range(len(df_train.columns)-1):\n    col.append(df_train.columns[i])\n    f_score.append(fs[0][i])\n    p_value.append(fs[1][i])\n    \nfs_df['col'] = col\nfs_df['f_score'] = f_score\nfs_df['p_value'] = p_value\n    ","f377cad2":"fs_df","1ba3660d":"fs_df = fs_df.sort_values(by=['f_score'], ascending=False)\nfs_df = fs_df.reset_index(drop=True)\nfs_df","b894c722":"fs_df.loc[fs_df['p_value'] <= 0.05]","53d7140f":"from matplotlib import pyplot as plt\nplt.figure(figsize=(15,5))\nplt.bar(fs_df['col'],fs_df['f_score'])\nplt.xlabel('columns')\nplt.ylabel('f_score')\nplt.show()","c8dfefdf":"plt.figure(figsize=(15,5))\nplt.bar(fs_df.loc[fs_df['f_score'] <10000]['col'], fs_df.loc[fs_df['f_score'] < 10000]['f_score'])\nplt.xlabel('columns')\nplt.ylabel('f_score')\nplt.show()","e6a069cc":"fs_sel = []\nfor i in range(len(fs_df.loc[fs_df['f_score'] > 2000])):\n    fs_sel.append(fs_df['col'][i])\n\nfs_sel","1af5b776":"fs_sel.append('class_enc')","1549e441":"df_test['class_enc'] = df_test['class'].map(t)\ndf_test = df_test.drop(columns=['class'],axis=1)","4c561199":"df_train = df_train[fs_sel]\ndf_test = df_test[fs_sel]\ndf_val = df_val[fs_sel]","c04eb861":"df_val.shape","1aee9575":"df_train['class_enc'].value_counts()","ab39a7d1":"# since we are using cross val score and kfold, lets combine train and val datasets.\ndf_com = pd.concat([df_train,df_val])\ndf_com.shape","f862131e":"# Imbalanced dataset\nfrom numpy import mean\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.ensemble import BalancedRandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_roc_curve\n\nX = df_com.drop(['class_enc'],axis=1)\ny = df_com['class_enc']\n\n#X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=25)\n\ndef rrf(X,y):\n    model = RandomForestClassifier(n_estimators=10)\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)\n    scores = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)\n\n    m = mean(scores)\n\n    return m\n\ndef brf(X,y):\n    model = BalancedRandomForestClassifier(n_estimators=10)\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state = 25)\n    scores  = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)\n    \n    m = mean(scores)\n    \n    return m\n\ndef nb(X,y):\n    model = GaussianNB()\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)\n    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)\n    \n    m = mean(scores)\n    \n    return m\n\ndef knc(X,y):\n    model = KNeighborsClassifier()\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)\n    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)\n    \n    m = mean(scores)\n    \n    return m\n\ndef svc(X,y):\n    model = SVC()\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)\n    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)\n    \n    m = mean(scores)\n    \n    return m","edc1ec46":"#print(rrf(X,y))","582d9da3":"#print(brf(X,y))","c265b165":"#print(nb(X,y))","61e3a15b":"#print(knc(X,y))","f0704efd":"# Running forever\n#print(svc(X,y))","2503a9de":"from sklearn.model_selection import RandomizedSearchCV\n\nmodel = BalancedRandomForestClassifier()\n\nparam_grid = {\n    'n_estimators': [3,10,30],\n    'max_features': [3,6,9],\n}\n\n#cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state = 25)\n\nrnd_search_cv = RandomizedSearchCV(model, param_grid, n_iter=10, cv=3,return_train_score=True)\nrnd_search_cv.fit(X,y)\n\n#scores  = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)\n    \n#m = mean(scores)","3ea468b4":"rnd_search_cv.best_params_","63e83c31":"rnd_search_cv.best_estimator_","23d9ddae":"final_model = rnd_search_cv.best_estimator_","b98e1c86":"t1 = {0:'GALAXY',1:'QSO',2:'STAR'}\ndf_test = df_test.reset_index(drop=True)\ndf_test.head()","efb163ff":"test_X = df_test.drop(columns=['class_enc'],axis=1)\ntest_y = df_test['class_enc']\n\n#model.fit(X,y)\npred = final_model.predict(test_X)\npred","6ab15d9f":"df_test['pred'] = pred\ndf_test.head()","e2ae8778":"accuracy_score(df_test['class_enc'],df_test['pred'])","23e196e2":"from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay\n\ncm = confusion_matrix(df_test['class_enc'],df_test['pred'],labels=final_model.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=final_model.classes_)\ndisp.plot()\nplt.show()","4ad3272c":"df_test['class_enc'] = df_test['class_enc'].map(t1)\ndf_test['pred'] = df_test['pred'].map(t1)\ndf_test.head()","ab733ffe":"#### Since each row is not an event of occurence but an observational fact, lets not handle outilers using statistical methods. By the way we removed the obvious outlier where u,g and z are -9999."}}