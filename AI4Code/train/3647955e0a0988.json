{"cell_type":{"d4230b65":"code","908e360b":"code","e4a35071":"code","2873383a":"code","c99a6c8d":"code","253dc118":"code","54817cfd":"code","c384c926":"code","047f3573":"code","1e786224":"code","2b1a2bca":"code","38fb0768":"code","6663b743":"code","4db33b22":"code","5202e895":"code","8fc8e983":"code","2aaa5057":"code","06e84b76":"markdown","a31c6a78":"markdown","4c3d2df6":"markdown","ff3c5b0a":"markdown","6f84a7d6":"markdown","eab3e6f4":"markdown","d69f2211":"markdown"},"source":{"d4230b65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","908e360b":"import matplotlib.pyplot as plt\nimport seaborn as sns","e4a35071":"data = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv',index_col=0)","2873383a":"data.head(10)","c99a6c8d":"data.shape","253dc118":"data.describe()","54817cfd":"data.isna().sum()","c384c926":"data = data.drop(columns = data.columns[-1])","047f3573":"print(data.dtypes)","1e786224":"data.diagnosis.value_counts()","2b1a2bca":"plt.rcdefaults()\nplt.figure()\nbenign = len(data[data['diagnosis'] == 'B'])\nmalignant = len(data[data['diagnosis'] == 'M'])\nfig, ax = plt.subplots()\ny = ('Benign', 'Malignant')\ny_pos = np.arange(len(y))\nx = (benign, malignant)\nax.barh(y_pos, x, align='center')\nax.set_xticks(np.arange(0,401,50))\nax.set_yticks(y_pos)\nax.set_yticklabels(y)\nax.invert_yaxis() # labels read top-to-bottom\nax.set_xlabel('Count')\nax.set_title('Diagnosis')\nfor i, v in enumerate(x):\n    ax.text(v + 10, i, str(v), color='black', va='center', fontweight='normal')\nplt.show()","38fb0768":"columns = data.columns\nX = data[columns[1:]]\ny = data[columns[0]]","6663b743":"X = data.drop('diagnosis',1)\ny = data['diagnosis']\nprint(\"Shape of X and Y:\",X.shape,y.shape)","4db33b22":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\nprint('shape of X and y respectively (train) :', X_train.shape, y_train.shape)\nprint('shape of X and y respectively (test) :', X_test.shape, y_test.shape)","5202e895":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nmodel = LogisticRegression(max_iter=4550)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\nscore = model.score(X_train,y_train)\nprint(\"Score for training data: \", score)\nscore = model.score(X_test,y_test)\nprint(\"Score for testing data: \", score)\nscore_log_reg = score\nprint(\"\")\nprint(\"Classification Report:\")\nprint(classification_report(y_test,y_pred))","8fc8e983":"from sklearn.metrics import confusion_matrix\nconfusion_mat = confusion_matrix(y_test,y_pred)\nclass_names = y_pred\ntick_marks = np.arange(len(class_names))\nfig, ax = plt.subplots()\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\nsns.heatmap(pd.DataFrame(confusion_mat), annot=True, cmap='Reds' , fmt='g')\nplt.tight_layout()\nplt.title('Confusion matrix (0 = benign and 1 = malignant)')\nplt.ylabel('Actual Value')\nplt.xlabel('Predicted Value')\nplt.show()","2aaa5057":"from sklearn.metrics import roc_auc_score,roc_curve\ny_probabilities = model.predict_proba(X_test)[:,1]\nfalse_positive_rate, true_positive_rate, threshold = roc_curve(y_test.replace('B',0).replace('M',1),y_probabilities)\nplt.figure(figsize = (10,6))\nplt.title('OCR Curve')\nplt.plot(false_positive_rate, true_positive_rate, linewidth = 4, color = \"green\")\nplt.plot([0,1], ls='--', linewidth=4)\nplt.plot([0,0], [1,0], c='.5')\nplt.plot([1,1], c='.5')\nplt.text(0.2, 0.6, 'AUC: {:.2f}'.format(roc_auc_score(y_test,y_probabilities)), size = 16)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()","06e84b76":"#### Attribute Information:\n\n(1) ID number\n\n(2) Diagnosis (M = malignant, B = benign)\n\n(3-32)Ten real-valued features are computed for each cell nucleus:\n\n    a) radius (mean of distances from center to points on the perimeter)\n    b) texture (standard deviation of gray-scale values)\n    c) perimeter\n    d) area\n    e) smoothness (local variation in radius lengths)\n    f) compactness (perimeter^2 \/ area - 1.0)\n    g) concavity (severity of concave portions of the contour)\n    h) concave points (number of concave portions of the contour)\n    i) symmetry\n    j) fractal dimension (\"coastline approximation\" - 1)","a31c6a78":"<h4><b>OCR Curve<\/b><\/h4>","4c3d2df6":"<h3><b>Handling the missing data in the dataset<\/b><\/h3>","ff3c5b0a":"<h4><b>Confusion Matrix<\/b><\/h4>","6f84a7d6":"<h3><b>Splitting the data into training and testing dataset<\/b><\/h3>","eab3e6f4":"<h2><b>Logistic Regression Model<\/b><\/h2>","d69f2211":"**Reading the file**"}}