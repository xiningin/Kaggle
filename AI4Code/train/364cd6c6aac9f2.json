{"cell_type":{"57bb97be":"code","6697691d":"code","6e6b5179":"code","cebccb3e":"code","9a240835":"code","1ed0b4e4":"code","d9f47744":"code","acbbadb2":"code","5c6c2bca":"code","a96ed030":"code","a6dcedc4":"markdown","9ffdf756":"markdown","b2d619db":"markdown","b2060713":"markdown","df1cdfaf":"markdown","2895c57a":"markdown"},"source":{"57bb97be":"import os\nimport random\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import LGBMRegressor","6697691d":"N_SPLITS = 10\nSEED = 0\nEARLY_STOPPING_ROUNDS = 300\nVERBOSE = 1000\nPARAMS = {'n_estimators': 1000, 'num_leaves': 10, 'min_child_samples': 120}","6e6b5179":"def set_seed(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nset_seed(SEED)","cebccb3e":"INPUT = \"..\/input\/petfinder-pawpularity-score\/\"\ntrain = pd.read_csv(INPUT + \"train.csv\")\ntest = pd.read_csv(INPUT + \"test.csv\")\nsample_submission = pd.read_csv(INPUT + \"sample_submission.csv\")\ntrain.shape","9a240835":"train.head()","1ed0b4e4":"train['collage_and_info'] = train['Collage'] * train['Info']\ntrain['collage_or_info'] = train['Collage'] + train['Info']\ntrain['occlusion_and_human'] = train['Occlusion'] * train['Human']\ntrain['not_blur_and_eyes'] = (1-train['Blur']) * train['Eyes']\ntrain['not_collage_and_info_or_not_blur_or_group_or_accessory'] = (1-train['Collage']*train['Info']) + (1-train['Blur']) + train['Group'] + train['Accessory']\n\ntest['collage_and_info'] = test['Collage'] * test['Info']\ntest['collage_or_info'] = test['Collage'] + test['Info']\ntest['occlusion_and_human'] = test['Occlusion'] * test['Human']\ntest['not_blur_and_eyes'] = (1-test['Blur']) * test['Eyes']\ntest['not_collage_and_info_or_not_blur_or_group_or_accessory'] = (1-test['Collage']*test['Info']) + (1-test['Blur']) + test['Group'] + test['Accessory']","d9f47744":"train.head()","acbbadb2":"X_train, X_test = train.drop(['Pawpularity','Id'], axis=1), test.drop(['Id'], axis=1)\ny_train = train['Pawpularity']","5c6c2bca":"cv = KFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\noof_df = pd.DataFrame({'Id': train['Id'], 'pred': np.zeros(train.shape[0]), 'Pawpularity': train['Pawpularity']})\ntest_preds = np.zeros(X_test.shape[0])\nfor fold, (trn_idx, val_idx) in enumerate(cv.split(X_train, y_train)):\n    X_trn, X_val = X_train.loc[trn_idx,:], X_train.loc[val_idx,:]\n    y_trn, y_val = y_train[trn_idx], y_train[val_idx]\n    \n    clf = LGBMRegressor(**PARAMS)\n    clf.fit(X_trn,\n            y_trn,\n            eval_set=[(X_val, y_val)],\n            eval_metric='rmse',\n            early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n            verbose=VERBOSE)\n    \n    trn_preds = clf.predict(X_trn)\n    val_preds = clf.predict(X_val)\n    oof_df.loc[val_idx,'pred'] = val_preds\n    \n    test_preds += clf.predict(X_test)\/N_SPLITS\n    \n    print(f\"==== Fold {fold} ====\")\n    print(f\"Trn AUC: {mean_squared_error(y_trn, trn_preds, squared=False):.4f}\")\n    print(f\"Val AUC: {mean_squared_error(y_val, val_preds, squared=False):.4f}\")\n    \nprint(\"==== Results ====\")\nprint(f\"OOF AUC: {mean_squared_error(oof_df['Pawpularity'], oof_df['pred'], squared=False):.4f}\")\noof_df.to_csv('oof.csv', index=False)","a96ed030":"submission = pd.DataFrame({'Id': test['Id'], 'Pawpularity': test_preds})\nsubmission.to_csv('submission.csv', index=False)","a6dcedc4":"## Libraries","9ffdf756":"## Datasets","b2d619db":"## Submission","b2060713":"## Model","df1cdfaf":"## Feature engineering","2895c57a":"## Parameters"}}