{"cell_type":{"dba0369a":"code","d4438e73":"code","9cdbef7b":"code","1df13d5e":"code","42764fbc":"code","47fee9a2":"code","706fecfd":"code","8c90a4f1":"code","480c8cda":"code","67e73326":"code","8aa673ea":"code","8ea257c1":"code","dcf95977":"code","d1d27120":"code","b7bb0114":"code","30b4aaa0":"markdown","5418727f":"markdown","42dc3776":"markdown","ed209335":"markdown","5ba81889":"markdown","81080ce7":"markdown","7fa897b7":"markdown","93568967":"markdown","f0ad17fc":"markdown","7b708d0e":"markdown","53c14f33":"markdown","23d5ce93":"markdown","c30371b0":"markdown","d75f5e80":"markdown","9a4a7695":"markdown"},"source":{"dba0369a":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Here are some of the packages that were not installed. but we can install it just like that.  \n# !pip install pandas_flavor\n\n# here's several helpful packages to load in \nimport os\nimport numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\n# import pandas_flavor as pf # for pipelining functions together. \n# scraping info from webpage\nimport requests\nimport lxml.html as lh\nimport missingno as msno # this package checks for missing values in data. \n\n# plotly\nimport plotly.express as px \nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will \n# list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.\n\n## Datasets\ndata = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nconfirmed = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nrecovered = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndeaths = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n\n## Do some cleaning and prepare the data as I like to do usually\ndata['Country\/Region'].replace('Mainland China', 'China', inplace = True)\ndata['Country\/Region'].replace('Ivory Coast', \"Cote d'Ivoire\", inplace = True)\ndata['Country\/Region'].replace(' Azerbaijan','Azerbaijan', inplace = True)\ndata['Country\/Region'].replace(\"('St. Martin',)\", \"St. Martin\", inplace=True)\ndata['Country\/Region'].replace(\"Cape Verde\", \"Cabo Verde\", inplace=True)\ndata['Country\/Region'].replace('Others', 'Cruise Ship', inplace = True)\ndata['Country\/Region'].replace('Diamond Princess', 'Cruise Ship', inplace = True)\ndata['Country\/Region'].replace('MS Zaandam', 'Cruise Ship', inplace = True)\ndata.rename(columns={'Country\/Region':'Country'}, inplace = True)\nus_counties = pd.read_csv('..\/input\/us-counties-covid-19-dataset\/us-counties.csv')","d4438e73":"url = 'http:\/\/statisticstimes.com\/geography\/countries-by-continents.php'\n#Create a handle, page, to handle the contents of the website\npage = requests.get(url)\n#Store the contents of the website under doc\ndoc = lh.fromstring(page.content)\n#Parse data that are stored between <tr>..<\/tr> of HTML\ntr_elements = doc.xpath('\/\/tr')\n\n#Create empty list\ncountry_iso_continent = {}\nfor i in range(36, 285):\n    row = []\n    for t in tr_elements[i]:\n        row.append(t.text_content())\n    country_iso_continent[row[1]] = (row[2], row[6])\n    \n\ncountry_iso_continent['East Timor'] =('TLS', 'Asia')\ncountry_iso_continent['Niger'] =('NER', 'Africa')\ncountry_iso_continent[\"Gambia, The\"] =('GMB', 'Africa')\ncountry_iso_continent['Gambia'] = ('GMB', 'Africa')\ncountry_iso_continent['The Gambia'] =('GMB', 'Africa')\ncountry_iso_continent['Bahamas, The'] =('BHS', 'North America')\ncountry_iso_continent['The Bahamas'] =('BHS', 'North America')\ncountry_iso_continent['Bahamas'] =('BHS', 'North America')\ncountry_iso_continent['Syria'] = ('SYR', 'Asia')\ncountry_iso_continent['Tanzania'] = ('TZA','Africa')\ncountry_iso_continent['Central African Republic']=('CAF', 'Africa')\ncountry_iso_continent['Kosovo'] =('SRB', 'Europe')\ncountry_iso_continent['Curacao']=('CUW', 'South America')\ncountry_iso_continent['Venezuela'] =('VEN', 'South America')\ncountry_iso_continent['Sudan']=('SDN','Africa')\ncountry_iso_continent['Reunion'] = ('REU', 'Africa')\ncountry_iso_continent['Channel Islands'] = ('USA', 'North America')\ncountry_iso_continent['Congo (Kinshasa)'] =('COD', 'Africa')\ncountry_iso_continent[\"Congo (Brazzaville)\"] = ('COD', 'Africa')\ncountry_iso_continent[\"Republic of the Congo\"]=('COD', 'Africa')\ncountry_iso_continent['Cayman Islands'] =('CYM', 'North America')\ncountry_iso_continent['Bolivia'] = ('BOL', 'South America')\ncountry_iso_continent['Holy See'] = ('VAT', 'Europe')\ncountry_iso_continent['occupied Palestinian territory'] = ('PSE', 'Asia')\ncountry_iso_continent['Brunei'] =('BRN', 'Asia')\ncountry_iso_continent['St. Martin'] =('MAF', 'North America')\ncountry_iso_continent['Republic of Ireland']=('IRL', 'Europe')\ncountry_iso_continent['Moldova']=('MDA', 'Europe')\ncountry_iso_continent['Vatican City'] = ('VAT', 'Europe')\ncountry_iso_continent['West Bank and Gaza'] = ('PSE', 'Asia')\ncountry_iso_continent['Palestine'] = ('PSE', 'Asia')\ncountry_iso_continent['Faroe Islands'] = ('FRO', 'Europe')\ncountry_iso_continent['Saint Barthelemy'] = ('BLM', 'North America')\ncountry_iso_continent['United Arab Emirates'] = ('ARE', 'Asia')\ncountry_iso_continent['Macau'] = ('MAC','Asia')\ncountry_iso_continent['Taiwan'] = ('TWN', 'Asia')\ncountry_iso_continent['US'] = ('USA', 'North America')\ncountry_iso_continent['Philippines'] = ('PHL', 'Asia')\ncountry_iso_continent['South Korea'] = ('PRK', 'Asia')\ncountry_iso_continent['Vietnam'] = ('VNM', 'Asia')\ncountry_iso_continent[\"Cote d'Ivoire\"] = ('CIV', 'Africa')\ncountry_iso_continent['North Macedonia'] = ('MKD', 'Europe')\ncountry_iso_continent['UK'] = ('GBR', 'Europe')\ncountry_iso_continent['Russia'] = ('RUS', 'Asia')\ncountry_iso_continent['Others'] = ('TEMP', 'NA')\ncountry_iso_continent['Netherlands'] = ('NLD', 'Europe')\ncountry_iso_continent['Iran'] = ('IRN', 'Asia')\ncountry_iso_continent['Hong Kong'] = ('HKG', 'Asia')\ncountry_iso_continent['Macau'] = ('MAC', 'Asia')\ncountry_iso_continent['United Arab Emirates'] = ('ARE', 'Asia')\ncountry_iso_continent['Georgia'] = ('DEU', 'Asia')\ncountry_iso_continent['Estonia'] = ('EST', 'Europe')\ncountry_iso_continent['San Marino'] = ('SMR', 'Europe')\ncountry_iso_continent['Azerbaijan'] = ('AZE', 'Asia')\ncountry_iso_continent['Belarus'] = ('BLR', 'Europe')\ncountry_iso_continent['North Ireland'] = ('GBR', 'Europe')\ncountry_iso_continent['Luxembourg'] = ('LUX', 'Europe')\ncountry_iso_continent['Lithuania'] = ('LTU', 'Europe')\ncountry_iso_continent['Czech Republic'] = ('CZE','Europe')\ncountry_iso_continent['Dominican Republic'] =('DOM', 'North America')\ncountry_iso_continent['Laos'] = ('LAO', 'Asia')\ncountry_iso_continent['Cruise Ship'] = ('NA', 'NA')\ncountry_iso_continent['Burma'] = ('MMR', 'Asia')\n\n\ndef checker(df, string, dic_cont):\n    \"\"\"\n    This function checks if there are any new countries or same countries with slightly different spelled names. \n    \"\"\"\n    temp = []\n\n    for i in df.loc[:,string].unique():\n        if i not in dic_cont:\n            temp.append(i)\n\n    return temp\n\n\n## Set the data\nviz = data[['Country', 'ObservationDate', 'Confirmed', 'Deaths', 'Recovered']]\nviz = viz.groupby(['Country', 'ObservationDate']).sum().reset_index()\nviz.sort_values('ObservationDate', ascending=True, inplace=True)\n# checker(viz, 'Country\/Region', country_iso_continent)\n\nviz['iso_alpha'] = viz['Country'].apply(lambda x: country_iso_continent[x][0])\nviz['Continent'] = viz['Country'].apply(lambda x: country_iso_continent[x][1])\n# checker(viz, 'Country\/Region', dic_cont)","9cdbef7b":"fig = px.choropleth(\n    viz, \n    locations=\"iso_alpha\",\n    labels='Country',\n    color=\"Confirmed\", \n    hover_name=\"Country\", \n    animation_frame=\"ObservationDate\", \n    range_color=[0,viz['Confirmed'].max()], \n#     height=800,\n    color_continuous_scale='Reds',\n)\nfig.update_layout(\n    paper_bgcolor='rgb(243, 243, 200)', \n    plot_bgcolor='rgb(243, 243, 200)',\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16,\n        font_family=\"Rockwell\"\n    )\n)\nconfig = {\n    'displaylogo': False,\n    'displayModeBar': False\n}\nfig.update_traces(hovertemplate=None)\nfig.show(config = config)","1df13d5e":"\n## Visualize the data\nfig = px.scatter(\n    viz,\n    x=\"Confirmed\",\n    y=\"Deaths\", \n    animation_frame=\"ObservationDate\", \n    animation_group=\"Country\", \n#     height = 800,\n    size=\"Confirmed\", \n    color=\"Recovered\", \n    hover_name=\"Country\", \n    color_continuous_scale='Greens',\n    title = 'COVID-19 Situation So Far',\n    range_color=[0,viz.Recovered.max()],\n    log_x=True,    \n#     text ='iso_alpha',\n#     marker = dict(width=2, color = 'black'),\n#     line = dict(width = 4),\n    size_max=100, \n    range_x=[100,viz.Confirmed.max()+100000], \n    range_y=[-9000,viz.Deaths.max()+10000])\n\nfig.update_layout(\n    paper_bgcolor='rgb(243, 243, 200)', \n    plot_bgcolor='rgb(243, 243, 200)',\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.update_xaxes(showspikes=False)\nfig.update_yaxes(showspikes=False)\nfig.show()","42764fbc":"%%HTML\n<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1835578\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1835578\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>","47fee9a2":"top_confirmend_country = viz[viz['ObservationDate'] == viz['ObservationDate'].max()].sort_values('Confirmed', ascending = False)['Country'].head(10)\n\nfig = go.Figure()\n\nfor i in top_confirmend_country:\n    temp = viz[viz['Country'] == i]\n    fig.add_trace(\n        go.Scatter(\n            x=temp.ObservationDate, \n            y= temp.Confirmed, \n            name=i, \n            line = dict(width=5)\n        )\n    )\n    \nfor i in top_confirmend_country:\n    temp = viz[viz['Country'] == i]\n    fig.add_trace(\n        go.Scatter(\n            x=temp.ObservationDate, \n            y= temp.Recovered, \n            name=i, \n            line = dict(width=5)\n        )\n    )\n    \nfor i in top_confirmend_country:\n    temp = viz[viz['Country'] == i]\n    fig.add_trace(\n        go.Scatter(\n            x=temp.ObservationDate, \n            y= temp.Deaths, \n            name=i, \n            line = dict(width=5)\n        )\n    )\n    \n\n\n# # Add Annotations and Buttons\n# high_annotations = [dict(x=\"01\/25\/2020\",\n#                          y=df.High.mean()x,\n#                          xref=\"x\", yref=\"y\",\n#                          text=\"High Average:<br> %.2f\" % df.High.mean(),\n#                          ax=0, ay=-40),\n#                     dict(x=df.High.idxmax(),\n#                          y=df.High.max(),\n#                          xref=\"x\", yref=\"y\",\n#                          text=\"High Max:<br> %.2f\" % df.High.max(),\n#                          ax=0, ay=-40)]\n# low_annotations = [dict(x=\"2015-05-01\",\n#                         y=df.Low.mean(),\n#                         xref=\"x\", yref=\"y\",\n#                         text=\"Low Average:<br> %.2f\" % df.Low.mean(),\n#                         ax=-40, ay=40),\n#                    dict(x=df.High.idxmin(),\n#                         y=df.Low.min(),\n#                         xref=\"x\", yref=\"y\",\n#                         text=\"Low Min:<br> %.2f\" % df.Low.min(),\n#                         ax=0, ay=40)]\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.57,\n            y=1.2,\n            buttons=list(\n                [\n                dict(label=\"Confirmed\",\n                     method=\"update\",\n                     args=[{\"visible\": [True]*10 + [False]*10 + [False]*10},\n                           {\"title\": \"Confirmed:\",\n                            \"annotations\": []}]),\n                dict(label=\"Recovered\",\n                     method=\"update\",\n                     args=[{\"visible\": [False]*10 + [True]*10+[False]*10},\n                           {\"title\": \"Recovered:\",\n                            \"annotations\": []}]),\n                dict(label=\"Deaths\",\n                     method=\"update\",\n                     args=[{\"visible\": [False]*10 + [False]*10 + [True]*10},\n                           {\"title\": \"Fatalities:\",\n                            \"annotations\": []}]),\n\n            ]),\n        )\n    ])\n\n# Set title\nfig.update_layout(\n    title_text=\"COVID-19 So Far\",\n    paper_bgcolor='rgb(243, 243, 200)', \n    plot_bgcolor='rgb(243, 243, 200)',\n#     height = 800,\n    xaxis_domain=[0.05, 1.0],\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.update_xaxes(showspikes=True)\nfig.update_yaxes(showspikes=True)\nfig.update_traces(hovertemplate=\"None\")\nfig.show()","706fecfd":"latest_day = data[data.ObservationDate == data.ObservationDate.max()]\nlatest_day['World'] = 'World'\nlatest_day['Continent'] = latest_day['Country'].apply(lambda x: country_iso_continent[x][1])\nlatest_day['iso_alpha'] = latest_day['Country'].apply(lambda x: country_iso_continent[x][0])\nlatest_day['Province\/State'].fillna('', inplace = True);","8c90a4f1":"fig = px.treemap(latest_day, \n                 path=['World', 'Continent', 'Country', 'Province\/State'], \n                 values='Confirmed',\n                 color='Confirmed',\n                 color_continuous_scale='Reds')\n\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n\n)\nfig.update_traces(hovertemplate='<b>%{label}<\/b><br>Confirmed: %{color:.0f}')\nfig.show()","480c8cda":"fig = px.treemap(latest_day, \n                 path=['World', 'Continent', 'Country', 'Province\/State'],\n                 values='Recovered',\n                 color='Recovered',\n                 branchvalues='total',\n                 color_continuous_scale='Greens')\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.update_traces(hovertemplate = '<b>%{label}<\/b><br>Recovered: %{color:.0f}')\nfig.show()","67e73326":"fig = px.treemap(latest_day, \n                 path=['World', 'Continent', 'Country', 'Province\/State'],\n                 values='Deaths',\n                 labels = 'Country',\n                 color='Deaths', \n                 color_continuous_scale='Reds')\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.update_traces(hovertemplate = '<b>%{label}<\/b><br>Deaths: %{color:.0f}')\nfig.show()","8aa673ea":"df = latest_day[['Continent', 'Country','Province\/State', 'Deaths','Confirmed']]\nlevels = [ 'Country', 'Continent']\ncolor_columns = ['Deaths','Confirmed']\nvalue_column = 'Deaths'\n\ndef build_hierarchical_dataframe(df, levels, value_column, color_columns=None, middle_circle_name=None):\n    \"\"\"\n    Build a hierarchy of levels for Sunburst or Treemap charts.\n\n    Levels are given starting from the bottom to the top of the hierarchy,\n    ie the last level corresponds to the root.\n    \"\"\"\n    df_all_trees = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n    for i, level in enumerate(levels):\n        df_tree = pd.DataFrame(columns=['id', 'parent', 'value', 'color'])\n        dfg = df.groupby(levels[i:]).sum()\n        dfg = dfg.reset_index()\n        df_tree['id'] = dfg[level].copy()\n        if i < len(levels) - 1:\n            df_tree['parent'] = dfg[levels[i+1]].copy()\n        else:\n            df_tree['parent'] = middle_circle_name\n        df_tree['value'] = dfg[value_column]\n        df_tree['color'] = dfg[color_columns[0]] \/ dfg[color_columns[1]]\n        df_all_trees = df_all_trees.append(df_tree, ignore_index=True)\n    total = pd.Series(dict(id=middle_circle_name, parent='',\n                              value=df[value_column].sum(),\n                              color=df[color_columns[0]].sum() \/ df[color_columns[1]].sum()))\n    df_all_trees = df_all_trees.append(total, ignore_index=True)\n    return df_all_trees\n\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns, 'World')\naverage_score = df['Deaths'].sum() \/ df['Confirmed'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='OrRd',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Fatalities: %{value}<br> Fatality rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='OrRd',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Fatalities: %{value}<br> Fatality rate: %{color:.2f}',\n    name='',\n    maxdepth=2\n    ), 1, 2)\n\nfig.update_layout(\n    margin=dict(t=10, b=10, r=10, l=10),\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.show()\n","8ea257c1":"df = latest_day[['Continent', 'Country','Province\/State', 'Recovered','Confirmed']]\n\nlevels = [ 'Country', 'Continent']## levels should be placed in hierarchical order(example: [state, country, continent], [grandson, son, father, grandfather])\ncolor_columns = ['Recovered','Confirmed']\nvalue_column = 'Confirmed'\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns, 'World')\naverage_score = df['Recovered'].sum() \/ df['Confirmed'].sum()\n\nfig = make_subplots(1, 2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]],)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Confirmed: %{value}<br> Recovery Rate: %{color:.2f}',\n    name=''\n    ), 1, 1)\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Confirmed: %{value}<br> Recovery Rate: %{color:.2f}', \n    name='',\n    maxdepth = 2\n    ), 1, 2)\n\nfig.update_layout(\n    margin=dict(t=10, b=10, r=10, l=10), \n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.show()\n","dcf95977":"df = latest_day[['Continent', 'Country','Province\/State', 'Recovered','Confirmed']]\ndf = df[df['Continent'] =='North America']\nlevels = [ 'Province\/State','Country'] ## levels should be placed in hierarchical order(example: [state, country, continent], [grandson, son, father, grandfather])\ncolor_columns = ['Recovered','Confirmed']\nvalue_column = 'Confirmed'\n\ndf_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns, 'North America')\naverage_score = df['Recovered'].sum() \/ df['Confirmed'].sum()\n\nfig = make_subplots(2, 1, specs=[[{\"type\": \"domain\"}], [{\"type\": \"domain\"}]],)\n\n\nfig.add_trace(go.Sunburst(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Confirmed: %{value}<br> Recoverey Rate: %{color:.4f}',\n    name=''\n    ), 1, 1)\n\n\nfig.add_trace(go.Treemap(\n    labels=df_all_trees['id'],\n    parents=df_all_trees['parent'],\n    values=df_all_trees['value'],\n    branchvalues='total',\n    marker=dict(\n        colors=df_all_trees['color'],\n        colorscale='RdBu',\n        cmid=average_score),\n    hovertemplate='<b>%{label} <\/b> <br> Confirmed: %{value}<br> Recovery Rate: %{color:.2f}',\n    name=''\n    ), 2,1)\n\nfig.update_layout(\n    margin=dict(t=10, b=10, r=10, l=10), \n    height = 1200,\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.show()","d1d27120":"df = us_counties[us_counties.date == us_counties.date.max()]\ndf['United States'] = 'United States'\n\nfig = px.treemap(df, \n                 path=['United States', 'state', 'county'],\n                 values='cases',\n                 labels = 'state',\n                 color='cases', \n                 color_continuous_scale='Reds')\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\", \n        font_size=16, \n        font_family=\"Rockwell\"\n    )\n)\nfig.update_traces(hovertemplate = '<b>%{label}<\/b><br>Total Cases: %{color:.0f}')\nfig.show();","b7bb0114":"# df = latest_day[['Continent', 'Country','Province\/State', 'Recovered','Confirmed', 'Deaths']]\n# levels = ['Country', 'Continent'] ## levels should be placed in hierarchical order(example: [state, country, continent], [grandson, son, father, grandfather])\n# color_columns = ['Recovered','Confirmed']\n# value_column = 'Confirmed'\n\n# df_all_trees = build_hierarchical_dataframe(df, levels, value_column, color_columns, 'World')\n# average_score = df['Recovered'].sum() \/ df['Confirmed'].sum()\n\n\n# fig = go.Figure()\n# fig.add_trace(go.Treemap(\n#     labels=df_all_trees['id'],\n#     parents=df_all_trees['parent'],\n#     values=df_all_trees['value'],\n#     branchvalues='total',\n#     marker=dict(\n#         colors=df_all_trees['color'],\n#         colorscale='RdBu',\n#         cmid=average_score),\n#     hovertemplate='<b>%{label} <\/b> <br> Confirmed: %{value}<br> Recovery Rate: %{color:.2f}',\n#     name=''\n#     ))\n# fig.show()","30b4aaa0":"This animated map shows all the confirmed cases of COVID-19 spreads all over the world. ","5418727f":"Let's take a look at how the COVID-19 disease is spreading around the world. ","42dc3776":"# Total Confirmed (United States and their Counties):","ed209335":"The **color** in this chart represents the **recovered rate** of all the confirmed cases. As you can see China has a recovered rate of 94% giving it a dark blue color while US has a recovery rate of 0.05% which is below the average recovery rate so far; hence the reddish color. In the next few days hopefully this rate will improve. Let's look at the mortality rate now","5ba81889":"The following part is a work in progress. \n\nResources:\n* How to write better codes\n    * [Six steps to more professional data science code](https:\/\/www.kaggle.com\/rtatman\/six-steps-to-more-professional-data-science-code)\n    * [Creating a Good Analytics Report](https:\/\/www.kaggle.com\/jpmiller\/creating-a-good-analytics-report)\n    * [Code Smell](https:\/\/en.wikipedia.org\/wiki\/Code_smell)\n    * [Python style guides](https:\/\/www.python.org\/dev\/peps\/pep-0008\/)\n","81080ce7":"## Fatality Rate: ","7fa897b7":"## Total Recovered:","93568967":"## Recovery Rate:","f0ad17fc":"## Total Confirmed:","7b708d0e":"This is a chart showing total confirmed, recoverd and Deaths. You can use the tabs on top to switch between different charts. Let's dig a little deeper and ","53c14f33":"This is a simple animated bubble chart showing total comfirmed cases for each country on the x-axis, deaths on the y-axis and total recovered using colors. The bubble also expends based on total confirmed cases giving you a slightly better understanding of the situation. There is a couple of things to take note here. \n\n<ul>\n    <li>The x-axis is in log scale, trying to cope with the exponential rate of the spread of the disease.<\/li>\n    <li>China pretty much stayed consistant around ~80K total confirmed cases while swiftly recovering in a massive rate and keeping the fatalities in check. <\/li>\n    <li>Meanwhile Italy, Spain and United States are rapidly passing by China in every possible counts except recovery rate.<\/li>\n<\/ul>\n\nLet's look at a bar race chart to visualize it a bit more. ","23d5ce93":"<h1>Summary<\/h1>\nThis is a detailed analysis report about the current situation in the world with COVID-19. In this notebook I am going to try to explain alot of the terms that you hear a lot in the news. I am going to talk about flattening the curve, influction point and exponential growth to explain the current situation and mathematical models to predict the situation of the recent future. However, lets get started with some of the visualizations to set the ground running. \n","c30371b0":"## Total Fatalities:","d75f5e80":"## Recovery Rate in North America:","9a4a7695":"There were times when I used to find satisfaction while looking at bar race charts. This chart is anything but satisfactory."}}