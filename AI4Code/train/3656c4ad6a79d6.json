{"cell_type":{"311d6dff":"code","b42ed463":"code","29b95f3a":"code","c2bc1952":"code","4780f16b":"code","101b393e":"code","62a205c4":"code","ca8a7654":"code","ddf541e9":"code","0971aa62":"code","fa302981":"code","570e5bff":"code","33eaf59f":"code","bb54900c":"code","e0ec50af":"code","59c4a77f":"code","e5dc7ef8":"markdown","92856509":"markdown","ed81aede":"markdown","63f7c0d7":"markdown","589e7d07":"markdown","9acf29a1":"markdown","71baaca1":"markdown","74db2717":"markdown","ce28a6a3":"markdown"},"source":{"311d6dff":"import re\nimport string\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, SpatialDropout1D\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping","b42ed463":"data = pd.read_csv('..\/input\/windows-store-top-apps-games\/windows_store.csv')\ndata.head()","29b95f3a":"data.info()","c2bc1952":"data.isnull().sum()","4780f16b":"counts = data['Age Rating'].value_counts()\nsns.barplot(x=counts.index, y=counts)\nplt.xlabel('Age Rating')\nplt.ylabel('Count')\nplt.xticks(rotation=60);","101b393e":"def clean_text(text):\n    text = text.lower()                                  # lower-case all characters\n    text =  re.sub(r'@\\S+', '',text)                     # remove twitter handles\n    text =  re.sub(r'http\\S+', '',text)                  # remove urls\n    text =  re.sub(r'pic.\\S+', '',text) \n    text =  re.sub(r\"[^a-zA-Z+']\", ' ',text)             # only keeps characters\n    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text+' ')      # keep words with length>1 only\n    text = \"\".join([i for i in text if i not in string.punctuation])\n    words = nltk.tokenize.word_tokenize(text)\n    stopwords = nltk.corpus.stopwords.words('english')   # remove stopwords\n    text = \" \".join([i for i in words if i not in stopwords and len(i)>2])\n    text= re.sub(\"\\s[\\s]+\", \" \",text).strip()            # remove repeated\/leading\/trailing spaces\n    return text","62a205c4":"data['Text_cleaning'] = data.Description.apply(clean_text)\ndata.head()","ca8a7654":"num_words = 50000\nmax_len = 250\ntokenizer = Tokenizer(num_words=num_words, filters='!\"#$%&()*+,-.\/:;<=>?@[\\]^_`{|}~', lower=True)\ntokenizer.fit_on_texts(data['Text_cleaning'].values)","ddf541e9":"X = tokenizer.texts_to_sequences(data['Text_cleaning'].values)\nX = pad_sequences(X, maxlen=max_len)","0971aa62":"y = pd.get_dummies(data['Age Rating']).values","fa302981":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)","570e5bff":"EMBEDDING_DIM = 100\nmodel = Sequential()\nmodel.add(Embedding(num_words, EMBEDDING_DIM, input_length=X.shape[1]))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(6, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","33eaf59f":"my_callbacks  = [EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=5,\n                              mode='auto')]","bb54900c":"history = model.fit(X_train, y_train, epochs=100, batch_size=32,\n                    validation_data=(X_test,y_test), callbacks=my_callbacks)","e0ec50af":"results = model.evaluate(X_test, y_test, verbose=0)\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","59c4a77f":"# Plotting Accuracy and val_accuracy\nplt.title('Accuracy')\nplt.plot(history.history['accuracy'], label='train')\nplt.plot(history.history['val_accuracy'], label='test')\nplt.legend()\nplt.show();\n\n# Plotting loss and val_loss\nplt.title('Loss')\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show();","e5dc7ef8":"# \ud83d\udcc8 Plotting Accuracy & Loss","92856509":"# \ud83d\udcda Training model","ed81aede":"# \ud83d\udce5 Importing Libraries","63f7c0d7":"# \u2702\ufe0f Train test split","589e7d07":"# \ud83e\uddf9 Text Cleaning","9acf29a1":"# \ud83d\uddc3\ufe0f Load Dataset","71baaca1":"# \ud83e\uddea Test Accuracy","74db2717":"# \u2714\ufe0f Tokenizer","ce28a6a3":"# \ud83d\udd25 EDA & Visualization"}}