{"cell_type":{"637d60b0":"code","402b9d83":"code","f29284fb":"code","cd37786e":"code","21865680":"code","9c730c7a":"code","deb7686c":"code","9cc0ee01":"code","fe96c002":"code","10f1c68f":"code","9b93e74c":"code","1993ccff":"code","6acf7c61":"code","2ab93109":"code","09f84245":"markdown","fd221d9d":"markdown","81d1b2e4":"markdown","1e38ff03":"markdown","f37a3071":"markdown","9c05d1a9":"markdown","c60bc900":"markdown"},"source":{"637d60b0":"import pandas as pd\nimport numpy as np\nimport plotly as py\nimport plotly.graph_objs as go\nfrom ipywidgets import widgets\n\nimport plotly.io as pio\npio.renderers.default = 'kaggle'\n\nimport warnings\nwarnings.filterwarnings('ignore')","402b9d83":"input_filder = '..\/input\/ieee-fraud-detection'\ntrain_transaction = pd.read_csv(f'{input_filder}\/train_transaction.csv')\ntrain_identity = pd.read_csv(f'{input_filder}\/train_identity.csv')\ntest_transaction = pd.read_csv(f'{input_filder}\/test_transaction.csv')\ntest_identity = pd.read_csv(f'{input_filder}\/test_identity.csv')\ntrain = pd.merge(train_transaction, train_identity, on='TransactionID', how='left')\ntest = pd.merge(test_transaction, test_identity, on='TransactionID', how='left')\n\nprint('train_transaction shape: {}'.format(train_transaction.shape))\nprint('test_transaction shape: {}'.format(test_transaction.shape))\nprint('train_identity shape: {}'.format(train_identity.shape))\nprint('test_identity shape: {}'.format(test_identity.shape))\nprint('train shape: {}'.format(train.shape))\nprint('test shape: {}'.format(test.shape))\n\ndel train_transaction, train_identity, test_transaction, test_identity","f29284fb":"c_cols = [c for c in train.columns if c.startswith('C')]\ncard_cols = [c for c in train.columns if c.startswith('card')]\nid_cols = [c for c in train.columns if c.startswith('id_')]\nd_cols = [c for c in train.columns if c.startswith('D') and len(c) < 5]\nm_cols = [c for c in train.columns if c.startswith('M')]\nv_cols = [c for c in train.columns if c.startswith('V')]\nmain_cols = [c for c in train.columns if c not in c_cols + id_cols + d_cols + m_cols + v_cols] \n\ntrain[main_cols].head(14).T","cd37786e":"trace=go.Pie(\n    labels=['NoN Fraud', 'Fraud'],\n    values=train['isFraud'].value_counts(),\n    marker = dict(colors = ['#1499c7',' #f5b041']),\n    textinfo='value+percent',\n    pull=.03\n)\n\npy.offline.iplot([trace])","21865680":"Train_NaN_percent_cells = int(train.isnull().sum().sum() \/ (train.shape[0] * train.shape[1]) * 100)\nTest_NaN_percent_cells = int(test.isnull().sum().sum() \/ (test.shape[0] * test.shape[1]) * 100)\n\ndata = [\n    go.Bar(\n        y=['Train', 'Test'],\n        x=[Train_NaN_percent_cells, Test_NaN_percent_cells],\n        type = 'bar',\n        name = 'Null',\n        orientation='h'\n    ),\n    go.Bar(\n        y=['Train', 'Test'],\n        x=[100 - Train_NaN_percent_cells, 100 - Test_NaN_percent_cells],\n        type = 'bar',\n        name = 'Not Null',\n        orientation='h'\n    )\n]\n\nlayout = {\n    'barmode': 'relative',\n    'title': 'Percenteg Null cells',\n    'xaxis_title_text': 'Percenteg',\n    'height': 300\n}\n\nfig = go.Figure(\n    data=data,\n    layout = layout\n)\n\npy.offline.iplot(fig)","9c730c7a":"Train_NaN_cols_count = (train.isna().sum() > 0).sum()\nTest_NaN_cols_count = (test.isna().sum() > 0).sum()\nTrain_cols_count = len(train.columns)\nTest_cols_count = len(test.columns)\n\ndata = [\n    go.Bar(\n        y=['Train', 'Test'],\n        x=[Train_NaN_cols_count, Test_NaN_cols_count],\n        type = 'bar',\n        name = 'Null',\n        orientation='h'\n    ),\n    go.Bar(\n        y=['Train', 'Test'],\n        x=[Train_cols_count - Train_NaN_cols_count - 1, Test_cols_count - Test_NaN_cols_count],\n        type = 'bar',\n        name = 'Not Null',\n        orientation='h'\n    )\n]\n\nlayout = {\n    'barmode': 'relative',\n    'title': 'Null columns',\n    'xaxis_title_text': 'Count',\n    'height': 300\n}\n\nfig = go.Figure(\n    data=data,\n    layout = layout\n)\n\npy.offline.iplot(fig)","deb7686c":"train_null_hist = (train.isnull().sum() \/ train.shape[0] * 100).astype(int)\ntest_null_hist = (test.isnull().sum() \/ test.shape[0] * 100).astype(int)\n\ndata = [\n    go.Histogram(\n        x=train_null_hist, \n        nbinsx=25,\n        name = 'train',\n        marker_color='#EB89B5'\n    ),\n    go.Histogram(\n        x=test_null_hist, \n        nbinsx=25,\n        name = 'test',\n        marker_color='#330C73'\n    )\n]\n\nlayout = {\n    'title':'Percentage of Null values in columns',\n    'xaxis_title_text':'Percenteg NaN values',\n    'yaxis_title_text':'Columns count'\n}\n\nfig = go.Figure(\n    data=data,\n    layout = layout    \n)\n\npy.offline.iplot(fig)","9cc0ee01":"data = [\n    go.Histogram(\n        x=train['TransactionDT'], \n        nbinsx=100,\n        name = 'train',\n        marker_color='#EB89B5'\n    ),\n    go.Histogram(\n        x=test['TransactionDT'], \n        nbinsx=100,\n        name = 'test',\n        marker_color='#330C73'\n    )\n]\n\nlayout = {\n    'title':'Train\/Test distribution of TransactionDT',\n    'xaxis_title_text':'TransactionDT',\n    'yaxis_title_text':'Count'\n}\n\nfig = go.Figure(\n    data=data,\n    layout = layout    \n)\n\npy.offline.iplot(fig)","fe96c002":"uniq_df = pd.DataFrame(columns=['train','test','max_values','equal_values','test_in_train'])\nuniq_df = uniq_df.astype({'train':'int','test':'int','max_values':'int','equal_values':'bool','test_in_train':'bool'})\n\nfor c in test.columns:\n    train_unique = train[c].unique()\n    test_unique = test[c].unique()\n    max_values = len(pd.Series(list(train_unique) + list(test_unique)).unique())\n    if max_values < 30:\n        row = pd.Series({\n            'train': len(train_unique),\n            'test': len(test_unique),\n            'max_values': max_values,\n            'equal_values': np.array_equal(np.sort(train[c].dropna().unique()), np.sort(test[c].dropna().unique())),\n            'test_in_train': all([i in train[c].dropna().unique() for i in test[c].dropna().unique()])\n        }, name = c)\n        uniq_df = uniq_df.append(row)\n\nfig = go.Figure(\n    data = go.Bar(\n        x=uniq_df.query('test_in_train == True').sort_values(by='max_values').index,\n        y=uniq_df.query('test_in_train == True').sort_values(by='max_values')['max_values'],\n        marker_color='#5b2c6f'\n    ),\n    layout = {\n        'title': 'Categorical features?',\n        'xaxis_title_text': 'Columns',\n        'yaxis_title_text': 'Unique values count',\n        'width': 2300\n    }\n)\n\npy.offline.iplot(fig)","10f1c68f":"cols = uniq_df.query('test_in_train == True').sort_values(by='max_values').index\nid_cols = [c for c in cols if c.startswith('id_')]\nm_cols = [c for c in cols if c.startswith('M')]\nv_cols = [c for c in cols if c.startswith('V')]\no_cols = [c for c in cols if c not in id_cols + m_cols + v_cols]\n\ndef cat_plot(columns, plot_name):\n    mask = [False] * len(columns)\n    mask = mask + mask\n\n    fraud_lbl = {0:'Non Fraud',1:'Fraud'}\n\n    traces = []\n    buttons = [{\n        \"args\": [\"visible\", mask], \n        \"label\": 'Column', \n        \"method\": \"restyle\"\n    }]\n\n    for i, col in enumerate(columns):\n        for f in [0,1]:\n            query = train.query(f'isFraud == {f}')[col].fillna('NaN').value_counts(dropna=False)\n            trace = go.Bar(\n                x=query.index.tolist(),\n                y=query.tolist(),\n                orientation='v', \n                name=fraud_lbl[f],\n                visible=False\n            )\n            traces.append(trace)\n\n        mask_temp = mask.copy()\n        mask_temp[i*2] = True\n        mask_temp[i*2+1] = True\n        button = {\n            \"args\": [\"visible\", mask_temp], \n            \"label\": col, \n            \"method\": \"restyle\"\n        }\n        buttons.append(button)\n\n\n    layout = {\n        \"title\": f\"Fraud by Categorical features ({plot_name})\",\n        'xaxis_type':'category',\n        \"updatemenus\": [{\n            \"buttons\": buttons,\n            \"yanchor\": \"top\",\n            \"y\": 1.12,\n            \"x\": 0.085\n        }]\n    }\n\n    fig = go.Figure(data=traces,layout=layout)\n    fig.show()","9b93e74c":"cat_plot(id_cols, 'id cols')","1993ccff":"cat_plot(m_cols, 'M cols')","6acf7c61":"cat_plot(v_cols, 'V cols')","2ab93109":"cat_plot(o_cols, 'other cols')","09f84245":"### Categories","fd221d9d":"### Fraud imbalance","81d1b2e4":"## 1. Library load","1e38ff03":"## 3. Plots","f37a3071":"### Null's","9c05d1a9":"## 2. Load data","c60bc900":"### Time"}}