{"cell_type":{"fe0a32b0":"code","999346b5":"code","9d409588":"code","0f0d2f3b":"code","b777d984":"code","60200e40":"code","60508112":"code","41486871":"code","0e9d9405":"code","fb7930f8":"code","6b8369b2":"code","5db5d8c5":"code","679672c9":"code","b51d51a6":"code","23051710":"code","cf286dd1":"code","11222a77":"code","276f176f":"code","09fd296a":"code","85b8aca0":"code","191f74cd":"code","01f9230f":"code","3fc2c2a0":"code","a6318431":"code","f9cb0212":"markdown","72b42abd":"markdown","4ec94822":"markdown","39500980":"markdown","2fe96e7a":"markdown","eab5cc07":"markdown","d5e9c415":"markdown","97006015":"markdown","ab1055c7":"markdown","7ce248d5":"markdown"},"source":{"fe0a32b0":"print('\\n'.join([''.join([(' Veri_Bilimi_Okulu_VBO_Veri_'[(x-y) % len('Veri_Bilimi_Okulu_VBO_Veri_')] \n                           if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ') \n                          for x in range(-30, 30)]) for y in range(15, -15, -1)]))","999346b5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport gc\nimport time\nimport matplotlib.pyplot as plt\nfrom contextlib import contextmanager\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom warnings import filterwarnings\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n","9d409588":"df_pos= pd.read_csv(\"..\/input\/home-credit-default-risk\/POS_CASH_balance.csv\")","0f0d2f3b":"df_pos.head()","b777d984":"df_pos.columns","60200e40":"df_pos.shape","60508112":"df_pos.index","41486871":"df_pos.isnull().values.any()","0e9d9405":"df_pos.isnull().sum()","fb7930f8":"def missing_values_table(df_pos):\n        mis_val = df_pos.isnull().sum()\n        mis_val_percent = 100 * df_pos.isnull().sum() \/ len(df_pos)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n     \n        print (\"Your selected dataframe has \" + str(df_pos.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        return mis_val_table_ren_columns","6b8369b2":"missing_values_table(df_pos)","5db5d8c5":"df_pos.info()","679672c9":"# Number of unique classes in each object column\ndf_pos.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","b51d51a6":"cat_cols = [col for col in df_pos.columns if df_pos[col].dtypes == 'O']\ncat_cols","23051710":"def cat_summary(data, categorical_cols, target, number_of_classes=10):\n    var_count = 0  # How many categorical variables will be reported?\n    vars_more_classes = []  # Variables with more than a certain number of classes will be stored.\n    for var in categorical_cols:\n        if len(df_pos[var].value_counts()) <= number_of_classes:  # Choose by number of classes.\n            print(pd.DataFrame({var: data[var].value_counts(),\n                                \"Ratio\": 100 * data[var].value_counts() \/ len(data),\n                                \"TARGET_MEDIAN\": data.groupby(var)[target].median()}), end=\"\\n\\n\\n\")\n            var_count += 1\n        else:\n            vars_more_classes.append(data[var].name)\n    print('%d categorical variables have been described' % var_count, end=\"\\n\\n\")\n    print('There are', len(vars_more_classes), \"variables have more than\", number_of_classes, \"classes\", end=\"\\n\\n\")\n    print('Variable names have more than %d classes:' % number_of_classes, end=\"\\n\\n\")\n    print(vars_more_classes)\n\n\ncat_summary(df_pos, cat_cols, \"SK_ID_CURR\")","cf286dd1":"# NAME_CONTRACT_STATUS: Contract status during the month\ndf_pos[\"NAME_CONTRACT_STATUS\"].value_counts()","11222a77":"# Displaying Categorical Variables with Column Graph\nsns.countplot(x=\"NAME_CONTRACT_STATUS\", data=df_pos)\nplt.show()","276f176f":"df_pos.describe().T","09fd296a":"df_pos.describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","85b8aca0":"# How many numeric variables are in the data set?\nnum_cols = [col for col in df_pos.columns if df_pos[col].dtypes != 'O']\nprint('Number of numerical variables: ', len(num_cols))","191f74cd":"# What are the names of the numeric variables?\nnum_cols","01f9230f":"# Visualization of numeric variables\ndef hist_for_nums(data, numeric_cols):\n    col_counter = 0\n    data = data.copy()\n    for col in numeric_cols:\n        data[col].hist(bins=20)\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        col_counter += 1\nhist_for_nums(df_pos, num_cols)","3fc2c2a0":"# Correlation Matrix\ncorrmat = df_pos.corr()\nfig = plt.figure(figsize = (10,7))\nsns.heatmap(corrmat,vmax = 1,square = True,annot = True,vmin = -1)\nplt.show()","a6318431":"# One hot encoding was applied to NAME_CONTRACT_STATUS categorical variables.\ndf_pos= pd.get_dummies(df_pos, columns=[\"NAME_CONTRACT_STATUS\"], drop_first=True)","f9cb0212":"![image.png](attachment:image.png)","72b42abd":"3. Checking missing value","4ec94822":"![](http:\/\/)![image.png](attachment:image.png)\nSource:https:\/\/programmer.group\/","39500980":"2. UNDERSTANDING THE DATA-SET","2fe96e7a":"3. ANALYSIS of CATEGORICAL VARIABLE","eab5cc07":"1. IMPORT SOME NECESSARY LIBRARIES","d5e9c415":"# POS_CASH_balance","97006015":"* SK_ID_PREV :\"ID of previous credit in Home Credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loans in Home Credit)\",\n* SK_ID_CURR:ID of loan in our sample,\n* MONTHS_BALANCE:\"Month of balance relative to application date (-1 means the information to the freshest monthly snapshot, 0 means the information at application - often it will be the same as -1 as many banks are not updating the information to Credit Bureau regularly )\",time only relative to the application\n* CNT_INSTALMENT:Term of previous credit (can change over time),\n* CNT_INSTALMENT_FUTURE:Installments left to pay on the previous credit,\n* NAME_CONTRACT_STATUS:Contract status during the month,\n* SK_DPD:DPD (days past due) during the month of previous credit,\n* SK_DPD_DEF: DPD during the month with tolerance (debts with low loan amounts are ignored) of the previous credit.","ab1055c7":"5. ANALYSIS of NUMERICAL VARIABLE","7ce248d5":"6. ONE-HOT ENCODING"}}