{"cell_type":{"f7e41e92":"code","83ffb004":"code","a4b7c8b1":"code","f8bb6715":"code","9ff375bc":"code","92bf2bc8":"code","0f686b09":"code","e6c587df":"code","4f1dac8a":"code","7d49737a":"code","d15b1270":"code","0d765a4d":"code","25a0e95f":"code","80463790":"code","9e30a14d":"code","2b253b8e":"code","6ea621da":"code","7813f000":"code","fbc7397e":"code","64806897":"code","551c580f":"code","28e3353e":"code","031274f8":"code","c2ab36bf":"code","e04ef9cc":"code","9e834d95":"code","a8f06217":"code","7d17f2a9":"code","0ca6f3a1":"markdown","196a2f13":"markdown","7d6a8f58":"markdown","b4c015a3":"markdown","512555ba":"markdown","91f14753":"markdown","8b9aae9a":"markdown","3930be04":"markdown","2534f0e9":"markdown","8b941fe4":"markdown","789b937a":"markdown","3f181a92":"markdown","e9ca143a":"markdown"},"source":{"f7e41e92":"import os\nimport pandas as pd\nimport numpy as np\nimport PIL.Image as Image, PIL.ImageDraw as ImageDraw, PIL.ImageFont as ImageFont\n\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt","83ffb004":"HEIGHT = 137\nWIDTH = 236","a4b7c8b1":"def load_as_npa(file):\n    df = pd.read_parquet(file)\n    return df.iloc[:, 0], df.iloc[:, 1:].values.reshape(-1, HEIGHT, WIDTH)\n\ndef image_from_char(char):\n    image = Image.new('RGB', (WIDTH, HEIGHT))\n    draw = ImageDraw.Draw(image)\n    myfont = ImageFont.truetype('\/kaggle\/input\/bengaliai\/hind_siliguri_normal_500.ttf', 120)\n    w, h = draw.textsize(char, font=myfont)\n    draw.text(((WIDTH - w) \/ 2,(HEIGHT - h) \/ 2), char, font=myfont)\n\n    return image","f8bb6715":"image_ids0, images0 = load_as_npa('\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet')","9ff375bc":"f, ax = plt.subplots(5, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(25):\n    ax[i].imshow(images0[i], cmap='Greys')","92bf2bc8":"train_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntrain_df.head()","0f686b09":"train_df.shape","e6c587df":"class_map_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/class_map.csv')\nclass_map_df.head()","4f1dac8a":"print(\"Number of unique grapheme_root: {}\".format(train_df['grapheme_root'].nunique()))","7d49737a":"fig = go.Figure(data=[go.Histogram(x=train_df['grapheme_root'])])\nfig.update_layout(title_text='`grapheme_root` values')\nfig.show()","d15b1270":"x = train_df['grapheme_root'].value_counts().sort_values()[-20:].index\ny = train_df['grapheme_root'].value_counts().sort_values()[-20:].values\nfig = go.Figure(data=[go.Bar(x=x, y=y)])\nfig.update_layout(title_text='Most common `grapheme_root` values')\nfig.show()","0d765a4d":"common_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & (class_map_df['label'].isin(x))]['component']","25a0e95f":"f, ax = plt.subplots(4, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(20):\n    ax[i].imshow(image_from_char(common_gr.values[i]), cmap='Greys')","80463790":"x = train_df['grapheme_root'].value_counts().sort_values()[:20].index\ny = train_df['grapheme_root'].value_counts().sort_values()[:20].values\nfig = go.Figure(data=[go.Bar(x=x, y=y)])\nfig.update_layout(title_text='Least common `grapheme_root` values')\nfig.show()","9e30a14d":"notcommon_gr = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & (class_map_df['label'].isin(x))]['component']","2b253b8e":"f, ax = plt.subplots(4, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(20):\n    ax[i].imshow(image_from_char(notcommon_gr.values[i]), cmap='Greys')","6ea621da":"train_df['vowel_diacritic'].nunique()","7813f000":"x = train_df['vowel_diacritic'].value_counts().sort_values().index\ny = train_df['vowel_diacritic'].value_counts().sort_values().values\nfig = go.Figure(data=[go.Bar(x=x, y=y)])\nfig.update_layout(title_text='`vowel_diacritic` values')\nfig.show()","fbc7397e":"vowels = class_map_df[(class_map_df['component_type'] == 'vowel_diacritic') & (class_map_df['label'].isin(x))]['component']","64806897":"f, ax = plt.subplots(3, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(15):\n    if i < len(vowels):\n        ax[i].imshow(image_from_char(vowels.values[i]), cmap='Greys')","551c580f":"train_df['consonant_diacritic'].nunique()","28e3353e":"x = train_df['consonant_diacritic'].value_counts().sort_values().index\ny = train_df['consonant_diacritic'].value_counts().sort_values().values\nfig = go.Figure(data=[go.Bar(x=x, y=y)])\nfig.update_layout(title_text='`consonant_diacritic` values')\nfig.show()","031274f8":"consonants = class_map_df[(class_map_df['component_type'] == 'consonant_diacritic') & (class_map_df['label'].isin(x))]['component']","c2ab36bf":"f, ax = plt.subplots(1, 7, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(7):\n    ax[i].imshow(image_from_char(consonants.values[i]), cmap='Greys')","e04ef9cc":"train_df = train_df[0:50000]\n\n# Most common grapheme_root\ngr_root_component = class_map_df[(class_map_df['component_type'] == 'grapheme_root') & (class_map_df['label'] == 72)]['component']\nplt.imshow(image_from_char(gr_root_component[72]), cmap='Greys')","9e834d95":"samples = train_df[train_df['grapheme_root'] == 72].sample(n=25)\n# samples.reset_index(drop=True, inplace=True)\n\nf, ax = plt.subplots(5, 5, figsize=(16, 8))\nax = ax.flatten()\nk = 0\nfor i, row in samples.iterrows():\n    ax[k].imshow(image_from_char(row['grapheme']), cmap='Greys')\n    k = k + 1","a8f06217":"f, ax = plt.subplots(5, 5, figsize=(16, 8))\nax = ax.flatten()\nk = 0\nfor i, row in samples.iterrows():\n    ax[k].imshow(images0[i], cmap='Greys')\n    k = k + 1","7d17f2a9":"samples = train_df[\n    (train_df['grapheme_root'] == 72) &\n    (train_df['vowel_diacritic'] == 0) &\n    (train_df['consonant_diacritic'] == 0)\n].sample(n=25)\n\nf, ax = plt.subplots(5, 5, figsize=(16, 8))\nax = ax.flatten()\nk = 0\nfor i, row in samples.iterrows():\n    ax[k].imshow(images0[i], cmap='Greys')\n    k = k + 1","0ca6f3a1":"# Vowel diacritic","196a2f13":"# Similar Graphemes\nThe most common `grapheme_root` is `\u09a6`. Let's check some variants.","7d6a8f58":"It seems that `grapheme_root` is highly imbalanced.","b4c015a3":"## Least common `grapheme_root` values","512555ba":"### Handwritten variants of the most common `grapheme_root`\n\nThe samples below are the handwritten pairs of the digital ones above.","91f14753":"### train.csv\n- **image_id**: the foreign key for the parquet files\n- **grapheme_root**: the first of the three target classes\n- **vowel_diacritic**: the second target class\n- **consonant_diacritic**: the third target class\n- **grapheme**: the complete character. Provided for informational purposes only, you should not need to use this.","8b9aae9a":"### Digital variants of the most common `grapheme_root`","3930be04":"### Examples of grapheme root `\u09a6` without vowel_diacritic and consonant_diacritic components.","2534f0e9":"----------------\n**Thanks for reading. Please vote if you find this notebook useful.**","8b941fe4":"## Most common `grapheme_root` values","789b937a":"# Bengali.AI\n-----\n### Quick data exploration\nIn the next couple of days, I'll continue to explore the BengaliAI dataset, stay tuned.","3f181a92":"# Grapheme root","e9ca143a":"# Consonant diacritic"}}