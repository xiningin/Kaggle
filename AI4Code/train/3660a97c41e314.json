{"cell_type":{"32125ba2":"code","50d29576":"code","fff3ce97":"code","ab51d77d":"code","7f1a9a4c":"code","ef63ce9b":"code","5a6e0df5":"code","d82fac36":"code","a9547de8":"code","d200f2cc":"code","17e553d1":"code","f4911609":"code","d9f2cbb3":"code","08da7117":"code","9eafc1ac":"code","89058526":"code","666fadaf":"markdown"},"source":{"32125ba2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50d29576":"train = pd.read_json('\/kaggle\/input\/recipe-ingredients-dataset\/train.json')\ntest = pd.read_json('\/kaggle\/input\/recipe-ingredients-dataset\/test.json')\ndataset = pd.concat([train,test],axis=0)","fff3ce97":"dataset","ab51d77d":"print(len(train))\nprint(len(test))\nprint(len(dataset))","7f1a9a4c":"countries = dataset.cuisine.unique()\nprint(countries)","ef63ce9b":"ingr_set = set()\nfor index,row in dataset.iterrows():\n    ingr_set.update(set(row.ingredients))","5a6e0df5":"apriori_input = []\nfor i,row in dataset.iterrows():\n    ingr = row.ingredients\n    country = str(row.cuisine)\n    country = \"#\"+country\n    to_append = ingr\n    to_append.insert(0,country)\n    apriori_input.append(to_append)","d82fac36":"apriori_input","a9547de8":"from mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, fpmax, fpgrowth","d200f2cc":"te = TransactionEncoder()\nte_ary = te.fit(apriori_input).transform(apriori_input)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\ndf","17e553d1":"frequent_itemsets = fpgrowth(df, min_support=0.01, use_colnames=True)\n### alternatively:\n#frequent_itemsets = apriori(df, min_support=0.6, use_colnames=True)\n#frequent_itemsets = fpmax(df, min_support=0.6, use_colnames=True)\n\nfrequent_itemsets","f4911609":"from mlxtend.frequent_patterns import association_rules","d9f2cbb3":"rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.5)","08da7117":"rules.head()","9eafc1ac":"rules[\"keep\"] = rules[\"consequents\"].apply(lambda x: True if len(x)==1 and list(x)[0].startswith(\"#\") else False )","89058526":"rules.query(\"keep\")","666fadaf":"## Association rules extraction"}}