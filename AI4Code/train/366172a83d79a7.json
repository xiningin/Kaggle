{"cell_type":{"f3e09366":"code","f6f6cccf":"code","395df88b":"code","511cd66a":"code","27379c48":"code","2602c9fe":"code","b3e4719c":"code","ee777fc6":"code","54c95960":"code","e8e48ddf":"code","c38eba3a":"code","59a70e5f":"code","b6256875":"code","231f9e43":"code","461c634e":"code","9f276701":"code","d4f1fcb8":"code","560757bf":"code","d72e7bea":"code","6e6cbe66":"code","6418d830":"code","431eb957":"code","58479811":"code","38c6fdfc":"code","78562c65":"code","aff16e68":"code","03a892c9":"code","916f2911":"code","74e793dc":"code","91f59f13":"code","b1bee58a":"code","fe2a71ed":"code","f5a4eeef":"code","e3d01bb0":"code","78c3919e":"code","b0684ac0":"code","90a25470":"code","89621db0":"code","546c73ea":"code","73ab3c58":"code","ebdd2a34":"code","61aef558":"code","4749b6aa":"code","9b1aef14":"code","cfef1238":"code","7d621759":"code","fc9a3cdd":"code","e50d2ad9":"code","74235835":"code","887f34d2":"code","9eeda850":"code","ff5f9ee5":"code","9a64e8e7":"markdown","fa1bd221":"markdown","fadc06e0":"markdown","3e023693":"markdown","f5cbe5d1":"markdown","c0e18485":"markdown","cdc500a6":"markdown","73aa6d6e":"markdown","dd19ed3f":"markdown","75909aae":"markdown","f6d0b824":"markdown","90ae3e57":"markdown","0f984059":"markdown","1469d2c3":"markdown","00a346b1":"markdown","935e5d05":"markdown","5b18b20a":"markdown","51ade2b7":"markdown","09809d13":"markdown","eab0e1d4":"markdown","e80aa988":"markdown","1b126bc3":"markdown","11b8f87e":"markdown","5b6a0470":"markdown","cad17921":"markdown","43b7b096":"markdown","67ef7a08":"markdown","71d3463b":"markdown","02537fc2":"markdown","8772824e":"markdown","0c1f7abc":"markdown","55ccd6f8":"markdown"},"source":{"f3e09366":"!pip freeze | grep pandas","f6f6cccf":"import pandas as pd\nimport numpy as np\nimport time\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n%matplotlib inline\nimport seaborn as sns","395df88b":"df = pd.read_csv(\"..\/input\/flight-delays\/flights.csv\")                  # Reading the dataset\ndf.head()","511cd66a":"df.describe()","27379c48":"df.info()","2602c9fe":"df.shape","b3e4719c":"# Selecting important features\n\ndf = df[[\"MONTH\", \"DAY\", \"DAY_OF_WEEK\", \"AIRLINE\", \"FLIGHT_NUMBER\", \"DESTINATION_AIRPORT\", \"ORIGIN_AIRPORT\", \n         \"SCHEDULED_DEPARTURE\", \"DEPARTURE_TIME\", \"DEPARTURE_DELAY\", \n         \"SCHEDULED_ARRIVAL\", \"ARRIVAL_TIME\", \"ARRIVAL_DELAY\", \"AIR_TIME\", \"DISTANCE\"]]","ee777fc6":"df = df.sample(n=10000, random_state= 10, axis=0)\ndf.shape","54c95960":"report = pandas_profiling.ProfileReport(df)\nreport.to_file('flight_df.html')","e8e48ddf":"from IPython.display import display, HTML, IFrame\ndisplay(HTML(open('flight_df.html').read()))","c38eba3a":"# Origin and Destination airport has few values which are numeric\n\n# Making a function to replace all numerical values in origin and destination airport feature with np.nan\ndef Replace(i):\n    try:\n      if str(i).isalpha():\n        return str(i)\n    except:\n      i == np.nan\n      return i\n","59a70e5f":"# Applying function to replace\ndf['DESTINATION_AIRPORT'] = df['DESTINATION_AIRPORT'].apply(func=Replace)\ndf['ORIGIN_AIRPORT'] = df['ORIGIN_AIRPORT'].apply(func=Replace)\ndf.isna().sum()","b6256875":"# Dropping all NAN missing values\ndf.dropna(inplace=True)\ndf.shape","231f9e43":"df.head()","461c634e":"df_delay = df[df.DEPARTURE_DELAY >= 1]\ndep_delayed_flights = df_delay.groupby(['AIRLINE'], as_index=False).agg({'DEPARTURE_DELAY': 'mean'})\n\nf,ax = plt.subplots(figsize=(10, 8))\nsns.barplot('AIRLINE','DEPARTURE_DELAY', data=dep_delayed_flights ,ax=ax)\nax.set_title('Airline Departure Delay Distribution', fontsize=16)\nax.set_ylabel(\"Departure Delay\", fontsize=16)\nax.set_xlabel(\"Airlines\", fontsize=16)\nplt.close(2)\nplt.show()","9f276701":"df_delay1 = df[df.ARRIVAL_DELAY >= 1]\ndep_delayed_flights = df_delay.groupby(['AIRLINE'], as_index=False).agg({'ARRIVAL_DELAY': 'mean'})\n\nf,ax = plt.subplots(figsize=(10, 8))\nsns.barplot('AIRLINE','ARRIVAL_DELAY', data=dep_delayed_flights ,ax=ax)\nax.set_title('Airline Arrival Delay Distribution', fontsize=16)\nax.set_ylabel(\"Arrival Delay\", fontsize=16)\nax.set_xlabel(\"Airlines\", fontsize=16)\nplt.close(2)\nplt.show()","d4f1fcb8":"# To find the max 10th departure delay\ndf.nlargest(10, 'DEPARTURE_DELAY')[9:]","560757bf":"# We see that the 10th larges value for Departure Delay is 429 minutes\n\ndep_delay_airports = df[df['DEPARTURE_DELAY']>427][['ORIGIN_AIRPORT', 'DEPARTURE_DELAY']]\n\ndep_delay_airports['ORIGIN_AIRPORT'] = dep_delay_airports['ORIGIN_AIRPORT'].astype('category')\n\nf, ax= plt.subplots(figsize=(10, 6))\nsns.barplot('ORIGIN_AIRPORT', 'DEPARTURE_DELAY', data=dep_delay_airports, ax=ax)\nax.set_title('Departure Delay Distribution of Origin Airports', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nplt.close(2)\nplt.show()\n","d72e7bea":"# To find the max 10th arrival delay\ndf.nlargest(10, 'ARRIVAL_DELAY')[9:]","6e6cbe66":"# We see that the 10th larges value for Arrival Delay is 434 minutes\n\narr_delay_airports = df[df['ARRIVAL_DELAY']>427][['DESTINATION_AIRPORT', 'ARRIVAL_DELAY']]\narr_delay_airports['DESTINATION_AIRPORT'] = arr_delay_airports['DESTINATION_AIRPORT'].astype('category')\n\n\nf, ax= plt.subplots(figsize=(10, 6))\nsns.barplot('DESTINATION_AIRPORT', 'ARRIVAL_DELAY', data=arr_delay_airports, ax=ax, saturation=.8)\nax.set_title('Arrival Delay Distribution of Destination Airports', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nplt.close(2)\nplt.show()\n","6418d830":"f, ax = plt.subplots(figsize=(10, 8))\nsns.scatterplot('MONTH', \"DEPARTURE_DELAY\", data=df, size='DEPARTURE_DELAY', hue='AIRLINE', sizes=(50, 200))\nplt.legend(bbox_to_anchor=(1.5,1) , loc='upper right')","431eb957":"f, ax = plt.subplots(figsize=(10, 8))\nsns.scatterplot('MONTH', \"ARRIVAL_DELAY\", data=df, size='ARRIVAL_DELAY', hue='AIRLINE', sizes=(50, 200))\nplt.legend(bbox_to_anchor=(1.5,1) , loc='upper right')","58479811":"arr_delay_flightnum = df[df['ARRIVAL_DELAY']>430][['FLIGHT_NUMBER', 'ARRIVAL_DELAY', 'AIRLINE']]\narr_delay_log = np.log(df['ARRIVAL_DELAY'])\nf, ax = plt.subplots(figsize=(14, 8))\nsns.barplot('FLIGHT_NUMBER', 'ARRIVAL_DELAY', data=arr_delay_flightnum, hue='AIRLINE')\n\nax.legend(bbox_to_anchor=(1, 1), loc='upper right')\n","38c6fdfc":"# using labelencoding and give conditions to Arrival delay colum\ndf['ARRIVAL_DELAY'].value_counts()","78562c65":"df[\"ARRIVAL_DELAY\"] = (df[\"ARRIVAL_DELAY\"]>10)*1    # Checking if delay is greater than 10 mins\ndf['ARRIVAL_DELAY'].value_counts()","aff16e68":"# So we see that 2033 fights in our sample data has arrival delay more than 10 minutes","03a892c9":"df.head()","916f2911":"df.info()","74e793dc":"# We have features like AIRLINE, DESTINATION_AIRPORT, ORIGIN_AIRPORT which are categorical data\n# Hence convert them to category","91f59f13":"# Categorical columns\n\ncols = [\"AIRLINE\",\"DESTINATION_AIRPORT\",\"ORIGIN_AIRPORT\"]\nfor item in cols:\n    df[item] = df[item].astype(\"category\")\n\n# Lets check data type again\ndf.info()","b1bee58a":"# Now lets LabelEncode the categorical features for Model building\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncol = ['AIRLINE', 'DESTINATION_AIRPORT', 'ORIGIN_AIRPORT']\nle.fit(df[col].values.flatten())\n\ndf[col] = df[col].apply(le.fit_transform)\ndf.head()","fe2a71ed":"X = df.drop('ARRIVAL_DELAY', 1)\ny = df['ARRIVAL_DELAY']","f5a4eeef":"X.head()","e3d01bb0":"# Normalizing data X\n\nfrom sklearn.preprocessing import StandardScaler\n\n#Lets Use Sandardscaler to normalise the data\nscaler = StandardScaler()\nscaler.fit(X)\n\n# Scale and center the data\nX_norm = scaler.transform(X)\n\n# Create a pandas DataFrame\nX = pd.DataFrame(data=X_norm, index=X.index, columns=X.columns)\n","78c3919e":"# Train test split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=10, test_size=0.3)","b0684ac0":"import xgboost as xgb\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","90a25470":"# Function for model evaluation\n\ndef auc(m, X_train, X_test): \n    return (metrics.roc_auc_score(y_train,m.predict_proba(X_train)[:,1]),\n            metrics.roc_auc_score(y_test,m.predict_proba(X_test)[:,1]))","89621db0":"# XGBoost Model\n%time\nmodel = xgb.XGBClassifier(max_depth=50, min_child_weight=1,  n_estimators=200,\\\n                          n_jobs=-1 , verbose=1, learning_rate=0.2)\nmodel.fit(X_train, y_train)\n\nauc(model, X_train, X_test)","546c73ea":"y_pred = model.predict(X_test)","73ab3c58":"import matplotlib.pyplot as plt                               # Visualization package\n\n%matplotlib inline\nimport seaborn as sns\n\nprint('Accuracy: ', metrics.accuracy_score(y_test,y_pred))\nprint('')\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_pred)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test,y_pred))","ebdd2a34":"import lightgbm as lgb  # ligther version of GBM ","61aef558":"# Function to evaluate LightGBM model\n\ndef auc2(m, X_train, X_test):\n    y_train_pred = m.predict(X_train)\n    y_test_pred = m.predict(X_test)\n\n    return (print('ROC AUC Train Score: ', metrics.roc_auc_score(y_train, y_train_pred)),\n    print('ROC AUC Test Score: ', metrics.roc_auc_score(y_test, y_test_pred)),\n    print('Avg. Precision Score: ', metrics.average_precision_score(y_test, y_test_pred)),\n    print('Confusion Metrics: \\n', metrics.confusion_matrix(y_test, y_test_pred)))","4749b6aa":"def gini(y_test, y_test_pred):\n    fpr, tpr, thr = metrics.roc_curve(y_test, y_pred, pos_label=1)\n    g = 2 * metrics.auc(fpr, tpr) -1\n    return g\n\ndef gini_lgb(preds, dtrain):\n    y = list(dtrain.get_label())\n    score = gini(y_test, y_test_pred,) \/ gini(y_test, y)\n    return 'gini', score, True\n","9b1aef14":"%time\nmodel2 = lgb.LGBMClassifier(n_estimators=90, \n                     silent=False, \n                     random_state =94, \n                     max_depth=5, \n                     num_leaves=30, \n                     objective='binary', \n                     metrics ='auc')\n\nmodel2.fit(X_train, y_train, eval_metric=gini_lgb)","cfef1238":"auc2(model2, X_train, X_test)","7d621759":"import matplotlib.pyplot as plt                               # Visualization package\ny_test_pred = model2.predict(X_test)\n%matplotlib inline\nimport seaborn as sns\nprint(metrics.accuracy_score(y_test,y_test_pred))\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_test_pred)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test,y_test_pred))","fc9a3cdd":"!pip install catboost","e50d2ad9":"import catboost as cb","74235835":"cat_features_index = [0,1,2,3,4,5,6]  # externally defines the category index ","887f34d2":"clf = cb.CatBoostClassifier(eval_metric=\"AUC\", depth=10, iterations= 500, l2_leaf_reg= 9, learning_rate= 0.15)\nclf.fit(X_train,y_train)\n","9eeda850":"auc2(clf, X_train, X_test)","ff5f9ee5":"import matplotlib.pyplot as plt                               # Visualization package\ny_test_p = clf.predict(X_test)\n%matplotlib inline\nimport seaborn as sns\nprint(metrics.accuracy_score(y_test,y_test_p))\nprint('********************************************')\nprint('Confusion matrix')\nlr_cfm=metrics.confusion_matrix(y_test, y_test_p)\n\n\nlbl1=[\"Predicted 1\", \"Predicted 2\"]\nlbl2=[\"Actual 1\", \"Actual 2\"]\n\nsns.heatmap(lr_cfm, annot=True, cmap=\"Blues\", fmt=\"d\", xticklabels=lbl1, yticklabels=lbl2)\nplt.show()\n\nprint('**********************************************')\nprint(metrics.classification_report(y_test, y_test_p))","9a64e8e7":"## Avg. Departure Delay based on AIRLINE","fa1bd221":"### LightGBM","fadc06e0":"## Top 10 Airports with max DEPARTURE_DELAY","3e023693":"### Import necessary packages","f5cbe5d1":"## Converting Data Type","c0e18485":"## Departure Delay on Monthly basis","cdc500a6":"## Data Summary","73aa6d6e":"### Catboost","dd19ed3f":"## Feature Engineering","75909aae":"## Splitting Data in X & y","f6d0b824":"## Data Sample","90ae3e57":"# 2015 Flight Delay & Cancellation","0f984059":"## Missing Values#","1469d2c3":"## Pandas Profiling","00a346b1":"### XGBoost","935e5d05":"**Objectve**:\nTo determine whether the flight will be delayed or not.","5b18b20a":"**Conclusion:-**\n- With the above analysis and the Models used we see that the best Model of 3 Models (XGBoost, LightGBM & Catboost) is XGBoost provideds 93% accuracy.\n- The other two Models show 92% accuracy.","51ade2b7":"**Feature Columns**\n\nMONTH, DAY, DAY_OF_WEEK: data type int <br>\nAIRLINE and FLIGHT_NUMBER: data type int <br>\nORIGIN_AIRPORT and DESTINATION_AIRPORT: data type string <br>\nSCHEDUAL_DEPARTURE, DEPARTURE_TIME, DEPARTURE_DELAY,\nSCHEDUAL_ARRIVAL, ARRIVAL_TIME : data type float <br>\nARRIVAL_DELAY: this will be the target and is transformed into boolean variable indicating delay of more than 10 minutes <br>\nDISTANCE and AIR_TIME: data type float <br>\n\n\nYou can learn more about this dataset from the folowing Kaggle link.\nhttps:\/\/www.kaggle.com\/usdot\/flight-delays\/data?source=post_page---------------------------","09809d13":"## Avg. Arrival Delay based on AIRLINE","eab0e1d4":"### Business Problem\n\nTo classify whether a flight will be delayed or not by more than 10 mins.","e80aa988":"## Selecting Features","1b126bc3":"## Top 10 maximum delay flight numbers","11b8f87e":"# Data Visualization","5b6a0470":"**Observation** - Our sample data does not have data for 10th month","cad17921":"##  Arrival Delay on Monthly basis","43b7b096":"**Observation**\n- From above both the plots we see that maximum delay's are in the month of February, June & December","67ef7a08":"**Observation**\n- Departure Time, Departure Delay, Arrival Time, Arrival Delay and Air Time has missing value. \n- Lets drop all missng values as its less then 2% of the entire data, and filling it with median or mode will not give a real or close to real time of departure or arrival. \n- Airtime missing is for the same data which has arrival and departure time and delay time missing. Hence drop all nan","71d3463b":"## Loading Data","02537fc2":"## Top 10 Airports with max ARRIVAL_DELAY","8772824e":"**Observation:-** As per Pandas Profiling\n- High Correlation between:-\n    - MONTH & df_index, \n    - DEPARTURE_TIME & SCHEDULED_DEPARTURE, \n    - ARRIVAL_DELAY & DEPARTURE_DELAY, \n    - DISTANCE & AIR_TIME. \n- DESTINATION_AIRPORT & ORIGIN_AIRPORT has 3 letter apha values and some have numerical values hence need to work on. \n- DEPARTURE_DELAY has 572 (5.7%) zeros, which means flight on time so ignore\n- ARRIVAL_DELAY has 232 (2.3%) zeros, which means flight on time so ignore\n- DEPARTURE_TIME has 179 (1.8%) missing values\n- DEPARTURE_DELAY has 179 (1.8%) missing values\n- ARRIVAL_TIME has 185 (1.8%) missing values\n- ARRIVAL_DELAY has 207 (2.1%) missing values\t\n- AIR_TIME has 207 (2.1%) missing values","0c1f7abc":"**Now we have 9013 data with 15 features**","55ccd6f8":"- Since the data we have is quite huge nearly 58 lac rows and 31 features, hence we will try to reduce by dropping few unwanted features."}}