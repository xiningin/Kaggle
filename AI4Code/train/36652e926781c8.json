{"cell_type":{"7258de71":"code","2861560f":"code","7d6a5526":"code","d27958bb":"code","49bec198":"code","2084a36f":"code","d891b255":"code","888c4e7b":"code","dea54bb2":"code","30ef3774":"code","c2bb1101":"code","07152ad1":"code","62e9ed3a":"code","cf9c04fe":"code","9ba6fd04":"code","6636b15f":"code","3c32e0a5":"code","8a04a075":"code","81f75353":"code","8cef7eb0":"code","5656ba7f":"code","6724add1":"code","1448116e":"markdown","472384cb":"markdown","69c3195e":"markdown","669ff470":"markdown","838084e7":"markdown","3da2d472":"markdown","1d625420":"markdown","362e3e76":"markdown","f6c0256d":"markdown"},"source":{"7258de71":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2861560f":"import numpy as np \nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, TensorDataset\nimport matplotlib.pyplot as plt","7d6a5526":"df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\ndf.head()","d27958bb":"percent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_values = pd.DataFrame({'percent_missing': percent_missing})\nmissing_values.sort_values(by ='percent_missing' , ascending=False)","49bec198":"df_print = df[['RISK_MM','Location','RainTomorrow']]\ndf_print.head()","2084a36f":"df2 = df[['RISK_MM','Location']]\nX = pd.get_dummies(df2).values\nX = StandardScaler().fit_transform(X)\nY = df['RainTomorrow'].values\nY = LabelEncoder().fit_transform(Y)\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.30, random_state = 101)","d891b255":"# Converting data from Numpy to Torch Tensors\ntrain = TensorDataset(torch.from_numpy(X_Train).float(), torch.from_numpy(Y_Train).float())\ntest = TensorDataset(torch.from_numpy(X_Test).float(), torch.from_numpy(Y_Test).float())\n# Creating data loaders\ntrainloader = DataLoader(train, batch_size=128, shuffle=True)\ntestloader = DataLoader(test, batch_size=128, shuffle=True)","888c4e7b":"class ANN(nn.Module):\n    def __init__(self, input_size, hidden_size, num_classes):\n        super(ANN, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size) \n        self.fc2 = nn.Linear(hidden_size, num_classes)  \n    \n    def forward(self, x):\n        out = self.fc1(x)\n        out = F.relu(out)\n        out = self.fc2(out)\n        if not self.training:\n            out = F.softmax(out, dim=0)\n        return out","dea54bb2":"# Instatiating the model\nmodel = ANN(50, 20, 1)\nprint(model)","30ef3774":"# Defying loss function and optimizer\nloss_function = nn.BCEWithLogitsLoss()\noptimiser = optim.Adam(model.parameters())\n# Training loop for each epoch\nloss_plot, acc_plot = [], []\nfor epoch in range(7):\n    total_loss, correct, total = 0, 0, 0\n    for x, y in trainloader: \n        # Zero the parameter gradients\n        optimiser.zero_grad()\n        # forward + loss + backward + optimise (update weights)\n        output = model(x)\n        outputs = output.squeeze(1)\n        loss = loss_function(outputs, y)\n        loss.backward()\n        optimiser.step()\n        # Keeping track of the loss\n        total_loss += loss.item()\n        output = F.softmax(output, dim=0)\n        count = [1 for i, j in zip(output, y) if i == j]\n        correct += sum(count)\n        total += len(y)\n        acc = ((100.0 * correct) \/ total)\n\n    \n    print(\"Epoch: %d, Loss: %4.2f, Accuracy: %2.2f\" % (epoch, \n                                                         total_loss, \n                                                           acc) + '%')\n    loss_plot.append(total_loss)\n    acc_plot.append(acc)","c2bb1101":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))\n#plt.tight_layout()\nax[0].plot(loss_plot)\nax[0].grid(True)\nax[0].set_title(\"Training Loss\", fontsize=20);\nax[0].set_xlabel(\"Epoch\", fontsize=18);\nax[0].set_ylabel(\"Loss\", fontsize=18);\nax[1].plot(acc_plot)\nax[1].grid(True)\nax[1].set_title(\"Training Accuracy\", fontsize=20);\nax[1].set_xlabel(\"Epoch\", fontsize=18);\nax[1].set_ylabel(\"Accuracy (%)\", fontsize=18);\nplt.savefig(\"Training.png\", format='png', dpi=1200)","07152ad1":"model.eval()\n# Computing the model accuracy on the test set\ncorrect, total = 0, 0\nfor x, y in testloader:\n    output = model(x)\n    count = [1 for i, j in zip(output, y) if i == j]\n    correct += sum(count)\n    total += len(y)\n\nprint('Test Accuracy: %2.2f %%' % ((100.0 * correct) \/ total))","62e9ed3a":"# Instatiating the model\nmodel2 = ANN(50, 20, 2)\n# Definying cross entrophy loss function and optimiser\nloss_function = nn.CrossEntropyLoss()\noptimiser = optim.Adam(model2.parameters())\n\nfor epoch in range(7):\n    running_loss = 0.0\n    for x, y in trainloader: \n        # Zero parameter gradients\n        optimiser.zero_grad()\n        # Forward pass, loss function, backward pass and weights update\n        outputs = model2(x)\n        loss = loss_function(outputs, y.long())\n        loss.backward()\n        optimiser.step()\n        # Keeping track of the loss\n        running_loss += loss.item()\n    print(\"Epoch %d, loss %4.2f\" % (epoch, running_loss))","cf9c04fe":"model2.eval()\n\n# Computing the model accuracy on the test set\ncorrect, total = 0, 0\nfor x, y in testloader:\n    outputs = model2(x)\n    winners = outputs.argmax(dim=1)\n    count = [1 for i, j in zip(winners, y.long()) if i == j]\n    correct += sum(count)\n    total += len(y)\nprint('Test Accuracy: %2.2f %%' % ((100.0 * correct) \/ total))","9ba6fd04":"df2 = df[['RISK_MM','Location']]\nX = pd.get_dummies(df2).values\nX = StandardScaler().fit_transform(X)\nY = df['RainTomorrow'].values\nY = LabelEncoder().fit_transform(Y)\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.30, random_state = 101)\nX_Train, X_Valid, Y_Train, Y_Valid = train_test_split(X_Train, Y_Train, test_size = 0.30, random_state = 101)\n# Converting data from Numpy to Torch Tensors\ntrain = TensorDataset(torch.from_numpy(X_Train).float(), torch.from_numpy(Y_Train).float())\nvalid = TensorDataset(torch.from_numpy(X_Valid).float(), torch.from_numpy(Y_Valid).float())\ntest = TensorDataset(torch.from_numpy(X_Test).float(), torch.from_numpy(Y_Test).float())\n# Creating data loaders\ntrainloader = DataLoader(train, batch_size=128, shuffle=True)\nvalidloader = DataLoader(valid, batch_size=128, shuffle=True)\ntestloader = DataLoader(test, batch_size=128, shuffle=True)","6636b15f":"class ANN2(nn.Module):\n    def __init__(self, input_size, hidden_size, hidden_size2, num_classes):\n        super(ANN2, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size) \n        self.fc2 = nn.Linear(hidden_size, hidden_size2) \n        self.fc3 = nn.Linear(hidden_size2, num_classes)  \n    \n    def forward(self, x):\n        out = self.fc1(x)\n        out = F.relu(out)\n        out = self.fc2(out)\n        out = F.relu(out)\n        out = self.fc3(out)\n        return out","3c32e0a5":"# Instatiating the model\nmodel3 = ANN2(50, 30, 10, 1)\n# Defying loss function and optimizer\nloss_function = nn.BCEWithLogitsLoss()\noptimiser = optim.Adam(model3.parameters())\n# Training loop for each epoch\nloss_plot, acc_plot = [], []\nval_loss_plot, val_acc_plot = [], []\nfor epoch in range(12):\n    total_loss, correct, total = 0, 0, 0\n    model3.train()\n    for x, y in trainloader: \n        # Zero the parameter gradients\n        optimiser.zero_grad()\n        # forward + loss + backward + optimise (update weights)\n        output = model3(x)\n        outputs = output.squeeze(1)\n        loss = loss_function(outputs, y)\n        loss.backward()\n        optimiser.step()\n        # Keeping track of the loss\n        total_loss += loss.item() \n        output = F.softmax(output, dim=0)\n        count = [1 for i, j in zip(output, y) if i == j]\n        correct += sum(count)\n        total += len(y)\n    val_total_loss, val_correct, val_total = 0, 0, 0\n    model3.eval()\n    for x, y in validloader: \n        output = model3(x)\n        outputs = output.squeeze(1)\n        val_loss = loss_function(outputs, y)\n        # Keeping track of the loss\n        val_total_loss += val_loss.item()\n        output = F.softmax(output, dim=0)\n        val_count = [1 for i, j in zip(output, y) if i == j]\n        val_correct += sum(val_count)\n        val_total += len(y)\n\n    acc = ((100.0 * correct) \/ total)\n    val_acc = ((100.0 * val_correct) \/ val_total)\n    epoch_loss = total_loss \/ len(trainloader)\n    val_epoch_loss = val_total_loss \/ len(testloader)\n    print(\"Epoch: %d, Loss: %4.2f, Accuracy: %2.2f\" % (epoch, \n                                                         epoch_loss, \n                                                           acc) + '%')\n    print(\"Validation, Loss: %4.2f, Accuracy: %2.2f\" % (val_epoch_loss, \n                                                           val_acc) + '%')\n    loss_plot.append(total_loss)\n    acc_plot.append(acc)\n    val_loss_plot.append(val_total_loss)\n    val_acc_plot.append(val_acc)","8a04a075":"def train_val_plot(loss_plot, val_loss_plot, acc_plot, val_acc_plot):\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 5))\n    #plt.tight_layout()\n    ax[0].plot(loss_plot, label=\"Training Loss\")\n    ax[0].plot(val_loss_plot, label=\"Validation Loss\")\n    ax[0].legend(fontsize=18)\n    ax[0].grid(True)\n    ax[0].set_title(\"Training Loss\", fontsize=20);\n    ax[0].set_xlabel(\"Epoch\", fontsize=18);\n    ax[0].set_ylabel(\"Loss\", fontsize=18);\n    ax[1].plot(acc_plot, label=\"Training accuracy\")\n    ax[1].plot(val_acc_plot, label=\"Validation accuracy\")\n    ax[1].legend(fontsize=18)\n    ax[1].grid(True)\n    ax[1].set_title(\"Training Accuracy\", fontsize=20);\n    ax[1].set_xlabel(\"Epoch\", fontsize=18);\n    ax[1].set_ylabel(\"Accuracy (%)\", fontsize=18);\n    #plt.savefig(\"Training.png\", format='png', dpi=1200)\n    \ntrain_val_plot(loss_plot, val_loss_plot, acc_plot, val_acc_plot)","81f75353":"def test_model(model, testloader):\n    model.eval()\n    # Computing the model accuracy on the test set\n    correct, total = 0, 0\n    for x, y in testloader:\n        outputs = model(x)\n        winners = outputs.argmax(dim=1)\n        count = [1 for i, j in zip(winners, y.long()) if i == j]\n        correct += sum(count)\n        total += len(y)\n    print('Test Accuracy: %2.2f %%' % ((100.0 * correct) \/ total))\n    \ntest_model(model3, testloader)","8cef7eb0":"def train_model(model, criterion, optimizer, scheduler, num_epochs=5):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    loss_plot, acc_plot = [], []\n    val_loss_plot, val_acc_plot = [], []\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    # Next two lines enable us to use Binary Crossentropy\n                    #outputs = outputs.squeeze(1)\n                    #loss = criterion(outputs, labels)\n                    loss = criterion(outputs, labels.long())\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data.long())\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n            \n            if phase == 'train':\n                loss_plot.append(epoch_loss)\n                acc_plot.append(epoch_acc)\n            else:\n                val_loss_plot.append(epoch_loss)\n                val_acc_plot.append(epoch_acc)\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n\n        print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # loading best model weights\n    model.load_state_dict(best_model_wts)\n    train_val_plot(loss_plot, val_loss_plot, acc_plot, val_acc_plot)\n    return model","5656ba7f":"from torch.optim import lr_scheduler\nimport time\nimport copy\n\ndataloaders = {'train': trainloader, 'val': validloader}\ndataset_sizes = {'train': len(trainloader.dataset), 'val': len(validloader.dataset)}\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel4 = ANN2(50, 30, 10, 2)\ncriterion = nn.CrossEntropyLoss() #nn.BCEWithLogitsLoss()\noptimizer_ft = optim.SGD(model4.parameters(), lr=0.001, momentum=0.9)\n# Decaying learning rate by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\ntrain_model(model4, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=10)","6724add1":"test_model(model4, testloader)","1448116e":"#### Complete Implementation","472384cb":"### Training","69c3195e":"## Modelling","669ff470":"### Adding More Features","838084e7":"## Alternative Implementation (using CrossEntropyLoss)","3da2d472":"# PyTorch Rain Prediction","1d625420":"## Preprocessing","362e3e76":"Considering just the location and RISK_MM (The amount of next day rain in mm. A kind of measure of the \"risk\") as our features.","f6c0256d":"### Evaluation"}}