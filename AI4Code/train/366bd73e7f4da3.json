{"cell_type":{"9c5100f0":"code","fce54b7a":"code","803fa6b0":"code","11e29330":"code","0aeb1b96":"code","b5a8d331":"code","5d1db897":"code","696153a5":"code","07bb39c5":"code","e688f2d9":"code","cd92d1b3":"code","28799495":"code","a232eca8":"code","8adc3633":"code","30380ff9":"code","7232df27":"code","96e22dee":"code","9604bca5":"markdown","fcf9b375":"markdown","7cf204f0":"markdown","8a92ea99":"markdown","ad0ffb9a":"markdown","a19c6bc6":"markdown","353ba5d5":"markdown","6f82272a":"markdown","3217011c":"markdown","520314da":"markdown","6f296633":"markdown","6d08b8b7":"markdown","40b9d1a8":"markdown"},"source":{"9c5100f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fce54b7a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","803fa6b0":"path = \"..\/input\/flight-take-off-data-jfk-airport\/M1_final.csv\"\ndata = pd.read_csv(path)\npd.set_option('display.max_column',None)\ndata.head()","11e29330":"plt.figure(figsize = (15,15))\nsns.heatmap(data.corr('spearman'),cmap='YlGnBu',annot = True)","0aeb1b96":"data.drop(['TAXI_OUT'],axis = 1).corrwith(data['TAXI_OUT']).plot(kind = 'bar', title = 'correlation of features with target(TAXI_OUT)')","b5a8d331":"y = data['TAXI_OUT']\nX = data.drop(['TAXI_OUT'],axis = 1)\n\nX[\"Dew Point\"] = X[\"Dew Point\"].astype(int)\n\nobj_cols = list(X.select_dtypes(include = 'object').columns) #object columns\nnum_cols = list(set(X.columns) - set(obj_cols)) #numerical columns","5d1db897":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nlabelencoder = LabelEncoder()\n\nfor col in obj_cols:\n    X[col] = labelencoder.fit_transform(X[col].astype(str))\n    \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.1, random_state =10)","696153a5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor","07bb39c5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train[num_cols] = scaler.fit_transform(X_train[num_cols])\nX_test[num_cols]= scaler.transform(X_test[num_cols])","e688f2d9":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nimport math\n\nX_MAE = []\nX_RMSE = []\nX_R2 = []\n\ndef Score_diplay(predictions, y_test):\n    print(\"MAE: {}\".format(mean_absolute_error(predictions, y_test)))\n    X_MAE.append(mean_absolute_error(predictions, y_test))\n    print(\"RMSE: {}\".format(math.sqrt(mean_squared_error(predictions, y_test))))\n    X_RMSE.append(math.sqrt(mean_squared_error(predictions, y_test)))\n    print(\"r2_score: {}\".format(r2_score(predictions, y_test)))\n    X_R2.append(r2_score(predictions, y_test))\n    print('\\n\\n')","cd92d1b3":"# Label Encoded \nlreg = LinearRegression()\nlreg.fit(X_train,y_train)\npredictions = lreg.predict(X_test)\n\nprint('Linear Regression:\\n')\nScore_diplay(predictions, y_test)\n\nlasreg=Lasso(alpha=0.05, normalize=True)\nlasreg.fit(X_train,y_train)\npredictions=lasreg.predict(X_test)\n\nprint('Lasso Regression:\\n')\nScore_diplay(predictions, y_test)\n\nridgereg=Ridge(alpha=0.05, normalize=True)\nridgereg.fit(X_train,y_train)\npredictions=ridgereg.predict(X_test)\n\nprint('Ridge Regression:\\n')\nScore_diplay(predictions, y_test)\n\nrfreg = RandomForestRegressor()\nrfreg.fit(X_train,y_train)\npredictions = rfreg.predict(X_test)\n\nprint('Random Forest Regression:\\n')\nScore_diplay(predictions, y_test)\n\nknnreg = KNeighborsRegressor(n_neighbors = 200)\nknnreg.fit(X_train, y_train)\npredictions = knnreg.predict(X_test)\n\nprint('K-Neighbours Regression:\\n')\nScore_diplay(predictions, y_test)\n\nlgbm=LGBMRegressor()\nlgbm.fit(X_train,y_train)\npredictions=lgbm.predict(X_test)\n\nprint('LGBM Regression:\\n')\nScore_diplay(predictions, y_test)\n\nbayreg=BayesianRidge()\nbayreg.fit(X_train,y_train)\npredictions=bayreg.predict(X_test)\n\nprint('Gaussian Naive Bayes:\\n')\nScore_diplay(predictions, y_test)\n\nsvreg = SVR()\nsvreg.fit(X_train, y_train)\npredictions = svreg.predict(X_test)\n\nprint('SVM:\\n')\nScore_diplay(predictions, y_test)\n\nLE_MAE = X_MAE\nLE_RMSE = X_RMSE\nLE_R2 = X_R2\n\nX_MAE = []\nX_RMSE = []\nX_R2 = []","28799495":"X[obj_cols].nunique()","a232eca8":"X_OE = pd.get_dummies(X, columns=['OP_UNIQUE_CARRIER', 'DEST', 'Dew Point', 'Wind', 'Condition'])\n\nX_train, X_test, y_train, y_test = train_test_split(X_OE,y, test_size = 0.1, random_state =10)","8adc3633":"# One Hot Encoded\nlreg = LinearRegression()\nlreg.fit(X_train,y_train)\npredictions = lreg.predict(X_test)\n\nprint('Linear Regression:\\n')\nScore_diplay(predictions, y_test)\n\nlasreg=Lasso(alpha=0.05, normalize=True)\nlasreg.fit(X_train,y_train)\npredictions=lasreg.predict(X_test)\n\nprint('Lasso Regression:\\n')\nScore_diplay(predictions, y_test)\n\nridgereg=Ridge(alpha=0.05, normalize=True)\nridgereg.fit(X_train,y_train)\npredictions=ridgereg.predict(X_test)\n\nprint('Ridge Regression:\\n')\nScore_diplay(predictions, y_test)\n\nrfreg = RandomForestRegressor()\nrfreg.fit(X_train,y_train)\npredictions = rfreg.predict(X_test)\n\nprint('Random Forest Regression:\\n')\nScore_diplay(predictions, y_test)\n\nknnreg = KNeighborsRegressor(n_neighbors = 200)\nknnreg.fit(X_train, y_train)\npredictions = knnreg.predict(X_test)\n\nprint('K-Neighbours Regression:\\n')\nScore_diplay(predictions, y_test)\n\nlgbm=LGBMRegressor()\nlgbm.fit(X_train,y_train)\npredictions=lgbm.predict(X_test)\n\nprint('LGBM Regression:\\n')\nScore_diplay(predictions, y_test)\n\nbayreg=BayesianRidge()\nbayreg.fit(X_train,y_train)\npredictions=bayreg.predict(X_test)\n\nprint('Gaussian Naive Bayes:\\n')\nScore_diplay(predictions, y_test)\n\nsvreg = SVR()\nsvreg.fit(X_train, y_train)\npredictions = svreg.predict(X_test)\n\nprint('SVM:\\n')\nScore_diplay(predictions, y_test)\n\nOHE_MAE = X_MAE\nOHE_RMSE = X_RMSE\nOHE_R2 = X_R2","30380ff9":"array1 = np.array(LE_MAE)\narray2 = np.array(OHE_MAE)\n\nmodel_names = [\"Linear\",\"Lasso\",\"Ridge\",\"Random Forest\",\"KNN\",\"LGBM\",\"Naive Bayes\",\"SVM\"]\n\nplt.plot(model_names,array1)\nplt.plot(model_names,array2)\n\nplt.legend([\"Label Encoding\",\"One Hot Encoding\"])\n\nplt.xlabel(\"models\")\nplt.ylabel(\"MAE\")\nplt.show()","7232df27":"array1 = np.array(LE_RMSE)\narray2 = np.array(OHE_RMSE)\n\nmodel_names = [\"Linear\",\"Lasso\",\"Ridge\",\"Random Forest\",\"KNN\", \"LGBM\",\"Naive Bayes\",\"SVM\"]\n\nplt.plot(model_names,array1)\nplt.plot(model_names,array2)\n\nplt.legend([\"Label Encoding\",\"One Hot Encoding\"])\n\nplt.xlabel(\"models\")\nplt.ylabel(\"RMSE\")\nplt.show()","96e22dee":"array1 = np.array(LE_R2)\narray2 = np.array(OHE_R2)\n\nmodel_names = [\"Linear\",\"Lasso\",\"Ridge\",\"Random Forest\",\"KNN\", \"LGBM\",\"Naive Bayes\",\"SVM\"]\n\nplt.plot(model_names,array1)\nplt.plot(model_names,array2)\n\nplt.legend([\"Label Encoding\",\"One Hot Encoding\"])\n\nplt.xlabel(\"models\")\nplt.ylabel(\"R2_score\")\nplt.show()","9604bca5":"**Scaling Data**","fcf9b375":"# MAE COMPARISON","7cf204f0":"# RMSE COMPARISON","8a92ea99":"# **ERROR FOR ONE HOT ENCODED DATA**","ad0ffb9a":"**Reading Dataset**","a19c6bc6":"# **Label Encoding**","353ba5d5":"# R2 SCORE COMPARISON","6f82272a":"# **ERROR FOR LABEL ENCODED DATA**","3217011c":"**Checking Correlation**","520314da":"**Importing Libraries**","6f296633":"**creating function to display Error\/Score**","6d08b8b7":"**Importing ML Models**","40b9d1a8":"# **One Hot Encoding**"}}