{"cell_type":{"87039dc7":"code","f1f539ee":"code","dd5d59f6":"code","95801549":"code","c600ef3d":"code","5a060871":"code","a0f7f3df":"code","02ad2e3d":"code","2e9e3cf5":"code","a1ae6d1c":"markdown","e46fdf90":"markdown","bf74ed3a":"markdown","409dc6bb":"markdown","ee6c04d4":"markdown","cbbdc7bc":"markdown","f92f2d7b":"markdown","ad4b3cd9":"markdown","55e30268":"markdown"},"source":{"87039dc7":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nimport math\nfrom sklearn.metrics import mean_squared_error","f1f539ee":"#import training data set\ntraining_set=pd.read_csv('..\/input\/gooogle-stock-price\/Google_Stock_Price_Train.csv')\ntraining_set=training_set.iloc[:,1:2]   #we need a matrix instead of vector for future calculations so[:,1:2] and not [:,1]\n\ntest_set=pd.read_csv('..\/input\/gooogle-stock-price\/Google_Stock_Price_Test.csv')\nreal_stock_price=test_set.iloc[:,1:2]   #we need a matrix instead of vector for future calculations so[:,1:2] and not [:,1]\n\n#input and output\nX_train=training_set[:-1,:]\nY_train=training_set[1:,:]\n\n#reshape to make in format for keras function\nX_train = np.reshape(X_train,(1257,1,1))","dd5d59f6":"scale=MinMaxScaler()\ntraining_set=scale.fit_transform(training_set)","95801549":"#initialise RNN\nregressor=Sequential()\n\n#add input layer and LSTM layer\n#by parameter tuning found that 4 memory units and sigmoid activation is better\nregressor.add(LSTM(units=4,activation='sigmoid',input_shape=(None,1)))\n\n#add output layer\nregressor.add(Dense(units=1))   #output dimension is 1\n\n#compile RNN\nregressor.compile(optimizer='adam', loss='mean_squared_error')\n\n#fitting the RNN\n#parameters got by tuning are as below\nregressor.fit(x=X_train,y=Y_train,batch_size=32,epochs=200)\n#loss=2.6031e-04","c600ef3d":"#prediction\ninputs=scale.transform(real_stock_price)\n\ninputs = np.reshape(inputs,(20,1,1))\n\npredicted_stock_price = regressor.predict(inputs)\npredicted_stock_price = scale.inverse_transform(predicted_stock_price)","5a060871":"plt.plot(real_stock_price,color='red',label='Real Google Stock Price')\nplt.plot(predicted_stock_price,color='blue',label='Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Open Price')\nplt.legend()\nplt.show()","a0f7f3df":"real_stock_price_train = pd.read_csv('..\/input\/gooogle-stock-price\/Google_Stock_Price_Train.csv')\nreal_stock_price_train  = real_stock_price_train .iloc[:,1:2]   #we need a matrix instead of vector for future calculations so[:,1:2] and not [:,1]\n\npredicted_stock_price_train = regressor.predict(X_train)\npredicted_stock_price_train  = scale.inverse_transform(predicted_stock_price_train)","02ad2e3d":"plt.plot(real_stock_price_train,color='red',label='Real Google Stock Price')\nplt.plot(predicted_stock_price_train,color='blue',label='Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Open Price')\nplt.legend()\nplt.show()","2e9e3cf5":"rmse = math.sqrt(mean_squared_error(real_stock_price,predicted_stock_price))","a1ae6d1c":"# Evaluating RNN","e46fdf90":"# Visulaizing","bf74ed3a":"# Building RNN","409dc6bb":"# Prediction","ee6c04d4":"# Importing Libraries","cbbdc7bc":"# Feature Scaling","f92f2d7b":"# Visualising","ad4b3cd9":"# Predict 2012-2016 Stocks","55e30268":"# Import Dataset"}}