{"cell_type":{"198c58b7":"code","e6b44364":"code","30352c82":"code","076fe331":"code","12eb5c88":"code","6ac9dab5":"code","aa78aa86":"code","8b00a406":"code","83b6b53e":"code","730728e9":"code","7c96eb47":"code","23f8a6bb":"code","91f6919d":"code","a88b4ce6":"code","e17cbc4b":"code","3ce2761a":"code","e3bc9d05":"code","0693d2f9":"code","c4fa190c":"code","4b3facc1":"code","ed39a8b9":"code","9bb25cde":"markdown","71bf0857":"markdown","b8cad7b5":"markdown","b5b4e915":"markdown","f385550b":"markdown","a61bf401":"markdown","e22811b4":"markdown","0315819b":"markdown","b43174a8":"markdown","76c54b7a":"markdown","4dc556ea":"markdown","ad2224f6":"markdown"},"source":{"198c58b7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e6b44364":"data = pd.read_csv('..\/input\/us-accidents\/US_Accidents_Dec19.csv')","30352c82":"# create df for state accidents\nimport plotly.graph_objects as go\nstate_count_acc = pd.value_counts(data['State'])\n\nfig = go.Figure(data=go.Choropleth(\n    locations=state_count_acc.index,\n    z = state_count_acc.values.astype(float),\n    locationmode = 'USA-states',\n    colorscale = 'Reds',\n    colorbar_title = \"Count Accidents\",\n))\n\nfig.update_layout(\n    title_text = '2016 - 2019 US Traffic Accident Dataset by State',\n    geo_scope='usa',\n)\n\nfig.show()","076fe331":"!pip install plotly-geo","12eb5c88":"df_county = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/laucnty16.csv')\ndf_county.head(3)","6ac9dab5":"df_county['county_full'] = df_county['County Name\/State Abbreviation'].apply(lambda x: x.split(', ')[0])\ndf_county['county_name'] = df_county['county_full'].apply(lambda x: x.split(' County')[0])\n\ncounty_count_acc = pd.value_counts(data['County'])\nfips_county_df = df_county[['county_name', 'County FIPS Code', 'State FIPS Code']].merge(county_count_acc, left_on='county_name', right_index=True)","aa78aa86":"import plotly.figure_factory as ff\n\nfips_county_df['State FIPS Code'] = fips_county_df['State FIPS Code'].apply(lambda x: str(x).zfill(2))\nfips_county_df['County FIPS Code'] = fips_county_df['County FIPS Code'].apply(lambda x: str(x).zfill(3))\nfips_county_df['FIPS'] = fips_county_df['State FIPS Code'] + fips_county_df['County FIPS Code']\n\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\nendpts = list(np.linspace(1,30000, len(colorscale) - 1))\nfips = fips_county_df['FIPS'].tolist()\nvalues = fips_county_df['County'].tolist()\n\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['usa'],\n    binning_endpoints=endpts, colorscale=colorscale,\n    show_state_data=False,\n    show_hover=True,\n    asp = 2.9,\n    title_text = 'USA County accidents count',\n    legend_title = 'Accidents count'\n)\nfig.layout.template = None\nfig.show()","8b00a406":"data_sever = data.sample(n=10000)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Reds',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","83b6b53e":"county_severity_acc = data[['County','Severity']].groupby('County').mean().reset_index()\nfips_county_sev = df_county[['county_name', 'County FIPS Code', 'State FIPS Code']].merge(county_severity_acc, left_on='county_name', right_on='County')\nfips_county_sev['Severity'] = fips_county_sev['Severity'].apply(lambda x: round(x,1))","730728e9":"fips_county_sev['State FIPS Code'] = fips_county_sev['State FIPS Code'].apply(lambda x: str(x).zfill(2))\nfips_county_sev['County FIPS Code'] = fips_county_sev['County FIPS Code'].apply(lambda x: str(x).zfill(3))\nfips_county_sev['FIPS'] = fips_county_sev['State FIPS Code'] + fips_county_sev['County FIPS Code']\n\n\nfips = fips_county_sev['FIPS'].tolist()\nvalues = fips_county_sev['Severity'].tolist()\n\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['usa'],\n#     binning_endpoints=endpts,\n#     show_state_data=False,\n#     show_hover=True,\n#     asp = 2.9,\n    title_text = 'USA accidents severity (mean)',\n    legend_title = 'Accidents severity'\n)\nfig.layout.template = None\nfig.show()","7c96eb47":"data_sever = data.sample(n=10000)[['Start_Lng','Start_Lat','City','Visibility(mi)','Severity']]\ndata_sever.dropna(inplace=True)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = data_sever['Visibility(mi)'],\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity & Visibility of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","23f8a6bb":"data_sever = data.sample(n=15000)[['Start_Lng','Start_Lat','City','Distance(mi)','Severity']]\ndata_sever.dropna(inplace=True)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = data_sever['Distance(mi)'],\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Viridis',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity & Distance of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","91f6919d":"from more_itertools import sliced\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Embedding, SpatialDropout1D\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks.callbacks import EarlyStopping","a88b4ce6":"text_data = data[['Description','Severity']].sample(n=1000, random_state=10)\ntext_data.head()","e17cbc4b":"for i in range(15):\n    print(text_data['Description'].iloc[i])","3ce2761a":"# The maximum number of words to be used. (most frequent)\nMAX_NB_WORDS = 100\n# Max number of words in each complaint.\nMAX_SEQUENCE_LENGTH = 500\n# This is fixed.\nEMBEDDING_DIM = 100\ntokenizer = Tokenizer(num_words=MAX_NB_WORDS, filters='!\"#$%&()*+,-.\/:;<=>?@[\\]^_`{|}~', lower=True)\ntokenizer.fit_on_texts(text_data['Description'].values)\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))","e3bc9d05":"X = tokenizer.texts_to_sequences(text_data['Description'].values)\nX = pad_sequences(X, maxlen=MAX_SEQUENCE_LENGTH)\nprint('Shape of data tensor:', X.shape)\n\nY = pd.get_dummies(text_data['Severity']).values\nprint('Shape of label tensor:', Y.shape)","0693d2f9":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.10, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","c4fa190c":"model = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(3, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n# choose epochs and batch_size\nepochs = 15\nbatch_size = 64\nhistory = model.fit(X_train, Y_train, epochs=epochs, batch_size=batch_size,validation_split=0.1,callbacks=[EarlyStopping(monitor='val_loss', patience=3, min_delta=0.001)])","4b3facc1":"accr = model.evaluate(X_test,Y_test)\nprint('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))","ed39a8b9":"plt.title('Loss')\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show();","9bb25cde":"## Classification accidents severity by text description","71bf0857":"Let's do something strange and try to predict accident severity by it's text description :)","b8cad7b5":"## Severity by county","b5b4e915":"## Distance & Severity","f385550b":"### If you like this kernel, upvote it please.","a61bf401":"For county plots we need install plotly-geo","e22811b4":"## County USA ACCidents","0315819b":"Here I sample only 10000 points to save memory.","b43174a8":"## Accidents count (group by States)","76c54b7a":"## Severity accidents","4dc556ea":"Here I download special dataset to get county codes:","ad2224f6":"## Visibility & Severity"}}