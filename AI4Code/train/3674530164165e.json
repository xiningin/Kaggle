{"cell_type":{"59d329a7":"code","fcf478ab":"code","2b61ea56":"code","678ecf50":"code","97a2f3d4":"code","bb7ba1dd":"code","5863e538":"code","0f0514f7":"code","e54cf972":"code","f9794a83":"code","82eb7c22":"code","261c219c":"markdown","a3dc3004":"markdown","f88d3770":"markdown","98045ac5":"markdown","f9f27cc5":"markdown","c6705b2b":"markdown","aeefd571":"markdown","f702dcb6":"markdown","1c957551":"markdown"},"source":{"59d329a7":"! pip install --upgrade --force-reinstall --no-deps kaggle","fcf478ab":"from google.colab import files ","2b61ea56":"files.upload()","678ecf50":"! mkdir ~\/.kaggle ","97a2f3d4":"! cp kaggle.json ~\/.kaggle\/","bb7ba1dd":"! chmod 600 ~\/.kaggle\/kaggle.json","5863e538":"! kaggle competitions download -c om-ml2-21-ranking","0f0514f7":"! mkdir train","e54cf972":"! unzip om-ml2-21-ranking.zip -d data\/train","f9794a83":"import json\nimport multiprocessing as mp\nimport os\nfrom collections import OrderedDict\nfrom functools import partial\nfrom operator import itemgetter\n\nimport pandas as pd\n\nDISK_PATH = '<enter you disc path>'\n\n# weights_df = pd.read_csv(DISK_PATH + \"data\/train\/site_hash_weights.tsv\", sep='\\t', header=None)\n# weights_df = weights_df.rename(columns={1: 'weights'})\n# types_df = pd.read_csv(DISK_PATH + \"data\/train\/site_hash_types.tsv\", sep='\\t', header=None)\n# types_df = types_df.rename(columns={1: 'cat'})\n# types_df['cat'] = types_df['cat'].astype(\"category\")\n\n\ndef dataframe_from_line(_str):\n    norm_json = json.loads(_str, object_pairs_hook=OrderedDict)\n    first_df = pd.json_normalize(norm_json['user'], record_path='sites_for_user')\n    second_df = pd.json_normalize(norm_json['user'], record_path='theme_events')\n    joined_df = second_df.set_index('site_hash').join(first_df.set_index('site_hash'), on='site_hash')\n\n\n    actions_rank = list(norm_json['actions'].items())\n\n    actions_with_rank = pd.DataFrame.from_dict({'rank': [r[1] for r in actions_rank],\n                                                'site_hash': [r[0] for r in actions_rank]})\n\n    actions_with_rank.loc[:, 'site_hash'] = actions_with_rank['site_hash'].astype('int64')\n\n\n    result = actions_with_rank.set_index('site_hash').join(joined_df)\n\n    result.loc[:, 'clicks'].fillna(-1, inplace=True)\n    result.loc[:, 'clicks'].astype('int32', copy=False)\n    result.loc[:, 'rank'].astype('int32', copy=False)\n    result.loc[:, 'shows'].fillna(-1, inplace=True)\n    result.loc[:, 'shows'].astype('int32', copy=False)\n    result.loc[:, 'last_click_ts'].fillna(-1, inplace=True)\n    result.loc[:, 'last_click_ts'].astype('int32', copy=False)\n    result.loc[:, 'last_show_ts'].fillna(-1, inplace=True)\n    result.loc[:, 'last_show_ts'].astype('int32', copy=False)\n    result.loc[:, 'visits'].fillna(-1, inplace=True)\n    result.loc[:, 'visits'].astype('int32', copy=False)\n    result.loc[:, 'uniq_urls'].fillna(-1, inplace=True)\n    result.loc[:, 'uniq_urls'].astype('int32', copy=False)\n    result.loc[:, 'last_ts'].fillna(-1, inplace=True)\n    result.loc[:, 'last_ts'].astype('int32', copy=False)\n\n    result['session_id'] = norm_json['session_id']\n    result['session_id'].astype(\"string\", copy=False)\n    result['session_ts'] = norm_json['session_ts']\n    result.loc[:, 'session_ts'].astype('int32', copy=False)\n    result['vid'] = norm_json['user']['vid']\n    result['vk_id'] = norm_json['user']['vk_id']\n    result['ok_id'] = norm_json['user']['ok_id']\n    result['email'] = norm_json['user']['email']\n    result['age'] = norm_json['user']['age']\n    result.loc[:, 'age'].astype('int32', copy=False)\n    result['gender'] = norm_json['user']['gender']\n    result.loc[:, 'gender'].astype('int32', copy=False)\n    result['geo'] = norm_json['user']['geo']\n    result.loc[:, 'geo'].astype('int32', copy=False)\n\n    return result\n\n\ndef read_create_and_save(name, prefix, prefix_to_save):\n    with open(prefix + name) as f:\n        content = f.readlines()\n    dfs = []\n    i = 0\n    for _str in content:\n        # if i > 30:\n        #     break\n        i += 1\n        if i % 1000 == 0:\n            print(name + \" i = \" + str(i))\n        try:\n            df = dataframe_from_line(_str)\n        except Exception as e:\n            print(_str)\n            raise e\n        dfs.append(df)\n    res = pd.concat(dfs, axis=0)\n    res.to_pickle(prefix_to_save + name)\n\n\npath_to_json = DISK_PATH + 'data\/train\/train'\njson_files = [pos_json for pos_json in sorted(os.listdir(path_to_json))]\n\na_pool = mp.Pool(3)\nprod_data = partial(read_create_and_save, prefix=DISK_PATH + 'data\/train\/train\/')\nprod_data = partial(prod_data, prefix_to_save=DISK_PATH + 'data\/transformed\/')\na_pool.map(prod_data, json_files)","82eb7c22":"import pandas as pd\nimport os\n\npath_to_files = 'data\/transformed\/'\ndf_files = [path_to_files + pos_ds for pos_ds in sorted(os.listdir(path_to_files))]\n\nres = []\nfor df in df_files:\n    data = pd.read_pickle(df)\n    res.append(data)\n    \nresult_df = pd.concat(res, axis=0)\ndata = result_df.reset_index()\ndata = data.rename(columns={'index' : 'site_hash'})\ndata.to_pickle('data\/transformed\/result')","261c219c":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0439 kaggle.json(\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u0435 kaggle)","a3dc3004":"\u0414\u0430\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u043a\u0430\u0447\u0430\u043d\u043e","f88d3770":"\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f test","98045ac5":"\u041f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043c\u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u0430 \u0441\u0442\u0430\u0442\u044c\u044f:\nhttps:\/\/tamaracucumides.medium.com\/learning-to-rank-with-lightgbm-code-example-in-python-843bd7b44574\n\u0411\u0435\u0437 \u0432\u0441\u044f\u043a\u0438\u0445 \u0432\u044b\u0434\u0443\u043c\u043e\u043a, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0441\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438(\u0445\u0438\u0442\u0440\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u043e\u0442 \u0441\u043b\u043e\u0432\u0430 \u0441\u043e\u0432\u0441\u0435\u043c) \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0431\u044c\u0435\u0442 \u043e\u0431\u0430 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430 \u0440\u0430\u0437\u043e\u043c.","f9f27cc5":"\u041a\u0430\u043a \u0441\u043a\u0430\u0447\u0430\u0442\u044c","c6705b2b":"\u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 colab, \u0442\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u0443\u0441\u043e\u043a","aeefd571":"\u0422\u0435\u043f\u0435\u0440\u044c \u0432 \u043f\u0430\u043f\u043a\u0435 data\/transformed \u0443 \u0432\u0430\u0441 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \"\u0437\u0430\u043f\u0438\u043a\u043b\u0435\u043d\u043d\u044b\u0435\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b. \u041e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0445 \"\u0441\u043a\u043b\u0435\u0438\u0442\u044c\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c","f702dcb6":"\u0421\u043a\u043b\u0435\u0439\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u044e\u043f\u0438\u0442\u0435\u0440\u0435","1c957551":"\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u0443\u0441\u043e\u043a \u043a\u043e\u0434\u0430 \u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435 \u0432 \u044e\u043f\u0438\u0442\u0435\u0440\u0435, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f \u043f\u043e\u043d\u044f\u043b \u044e\u043f\u0438\u0442\u0435\u0440 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0432 \u0441\u0431\u043e\u0440\u043a\u0443 \u043c\u0443\u0441\u043e\u0440\u0430."}}