{"cell_type":{"6668c788":"code","21708476":"code","448b7156":"code","85da2928":"code","7350dc52":"code","575a0860":"code","ed49203c":"code","d9d3ff39":"code","89cf3677":"code","f56fa04c":"code","82e45f0a":"code","fde73fb8":"code","e5ca791f":"code","c1a17f04":"code","6c235c85":"code","32a614c6":"code","c09570ee":"code","0b335916":"code","3ad2e2d9":"code","fed94fa6":"code","3c4a8341":"code","13737596":"code","e2c3c1fe":"code","6ab461aa":"code","f30ff454":"code","b54eacba":"code","583fab91":"markdown","8a4342f3":"markdown","13377dc9":"markdown"},"source":{"6668c788":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21708476":"df = pd.read_csv('..\/input\/decimal-and-thousand-separators-in-every-locale\/windows_python_locale_numberformat.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf.head()","448b7156":"df.isnull().sum()","85da2928":"df[\"currency_symbol\"].value_counts()","7350dc52":"#Code by Gabriel Preda\n\ndef plot_count(feature, title, df, size=1):\n    '''\n    Plot count of classes \/ feature\n    param: feature - the feature to analyze\n    param: title - title to add to the graph\n    param: df - dataframe from which we plot feature's classes distribution \n    param: size - default 1.\n    '''\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:30], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","575a0860":"plot_count(\"decimal_point\", \"decimal_point\", df,2)","ed49203c":"plot_count(\"thousands_sep\", \"thousands_sep\", df,2)","d9d3ff39":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'green',\n                      colormap='PuBu_r',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"currency_symbol\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Currency Symbols\")\nplt.show()","89cf3677":"!pip install dataprep","f56fa04c":"! python -m pip install \"dask[dataframe]\" --upgrade  # or python -m pip install","82e45f0a":"from dataprep.eda import plot, plot_correlation, create_report, plot_missing","fde73fb8":"plot_missing(df)","e5ca791f":"plot(df)","c1a17f04":"plot(df, \"decimal_point\")","6c235c85":"plot_correlation(df)","32a614c6":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","c09570ee":"# Prepare the data\nX = df.drop('decimal_point', axis=1)\ny = df['decimal_point'].copy()\n\nX.head()","0b335916":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nX_train.shape, X_test.shape","3ad2e2d9":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","fed94fa6":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\n# pip users\n!pip install pydotplus\n!pip install six\n\nfrom IPython.display import Image\nfrom six import StringIO\nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\n\ndot_data = StringIO()\n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","3c4a8341":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ny_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nprint(\"Train set performance\")\nprint(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","13737596":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\nprint(\"Test set performance\")\nprint(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","e2c3c1fe":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True, rounded=True, feature_names=X.columns, \n                )\n    \n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    \n    return graph","6ab461aa":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ndef evaluate_model(dt_classifier):\n    y_train_pred = dt_classifier.predict(X_train)\n    y_test_pred = dt_classifier.predict(X_test)\n    \n    print(\"Train set performance\")\n    print(accuracy_score(y_train, y_train_pred))\n    print(confusion_matrix(y_train, y_train_pred))\n    print(\"-\"*50)\n    print(\"Test set performance\")\n    print(accuracy_score(y_test, y_test_pred))\n    print(confusion_matrix(y_test, y_test_pred))\n","f30ff454":"evaluate_model(dt)","b54eacba":"#Code by SIDDHARTH KASHYAP  https:\/\/www.kaggle.com\/sid9300\/heart-cases-decision-tree\n\ngph = get_dt_graph(dt)\nImage(gph.create_png())","583fab91":"#That's all for now.","8a4342f3":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/18\/Common_decimal_separators_-_Decimal_point_and_decimal_comma.png)en.wikipedia.org","13377dc9":"#Above I could only distinguished 2 commas and one dot.  "}}