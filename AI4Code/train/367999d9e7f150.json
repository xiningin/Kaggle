{"cell_type":{"21f21046":"code","fca1ef79":"code","03179198":"code","e5cf91ba":"code","16e7f732":"code","6e994c8a":"code","4409ac1a":"code","1c99438c":"code","7b36bdaf":"code","bffcd148":"code","2cdb809c":"code","9b7dcc20":"code","46aa8cb6":"code","ef89fd87":"code","e9cd45af":"code","ea3e0477":"code","77300449":"code","cfbbdce3":"code","411f3130":"code","e7e5ba5b":"code","e57453ab":"code","eeace5e0":"code","a06c3a48":"code","853488e0":"code","36c54325":"code","87c9b3c8":"code","bda385cd":"code","4b3d125c":"code","4ae93cf4":"code","8f4a3281":"code","1393b798":"code","932c5ca9":"code","0209932a":"code","b9cfe28a":"code","a909dea0":"code","23448442":"code","ef9de148":"code","2be4c94a":"code","71a34dbf":"code","2d71cedb":"code","1d9683fa":"code","72b7545a":"code","dfc3b73d":"markdown","53c91249":"markdown","81195376":"markdown","5484ed03":"markdown","a440825a":"markdown","fc1627e8":"markdown","7876b0b5":"markdown","a9e1c76c":"markdown","7b84999f":"markdown","c649da6b":"markdown","6ccda7cf":"markdown","552b5730":"markdown","663b8837":"markdown","f0b5a874":"markdown","472c1782":"markdown","3783e2f5":"markdown","c13e1119":"markdown","48c2f8d2":"markdown","0dc5be7f":"markdown","10f24e11":"markdown","869e4d40":"markdown","8306fe35":"markdown","b094c06a":"markdown","81a82f65":"markdown","ab197fd5":"markdown","0c97b326":"markdown","ac906f73":"markdown","8d459935":"markdown","93d23901":"markdown","ce6bf286":"markdown","f95f932c":"markdown","d0e54f09":"markdown"},"source":{"21f21046":"# Import libraries\n\nimport pandas as pd\nimport numpy as np \nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom sklearn.metrics import silhouette_samples, silhouette_score","fca1ef79":"# Set notebook options\n\npd.set_option('precision',2)\npd.options.display.max_columns = 30\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","03179198":"print(\"Complete\")","e5cf91ba":"# Import the data as a DataFrame and check first 5 rows\n\ndf = pd.read_csv('..\/input\/nba-players-data\/all_seasons.csv', index_col=0)\ncountry_codes = pd.read_csv(\"..\/input\/country-code\/country_code.csv\", index_col=0)\n\ndf.head()","16e7f732":"# Check data types and if any records are missing\n\ndf.info()","6e994c8a":"df.describe()","4409ac1a":"categoricals = df.select_dtypes(exclude=[np.number])\ncategoricals.describe()","1c99438c":"country_codes = country_codes[['Country_name', 'code_3digit']]\ncountry_codes = country_codes.rename({'Country_name': 'country'}, axis=1) \ncountry_codes['country'] = country_codes['country'].replace({'United States of America': 'USA', 'Russian Federation':'Russia',\n                                                             'Venezuela (Bolivarian Republic)':'Venezuela', 'Korea (South)':'South Korea',\n                                                             'Tanzania, United Republic of':'Tanzania','Macedonia, Republic of':'Macedonia',\n                                                             'Congo, (Kinshasa)':'Democratic Republic of the Congo',\n                                                             'Congo (Brazzaville)':'Congo','Iran, Islamic Republic of':'Iran',\n                                                             'Virgin Islands, US':'US Virgin Islands',\n                                                             })","7b36bdaf":"# Create drafted column wiht boolean logic\n\ndf['drafted'] = np.where(df['draft_year'] != 'Undrafted', 1, 0)","bffcd148":"# Convert draft_year column into a date type\n\n# Replace Undrafted with NaN\ndf['draft_year'] = df['draft_year'].replace(r'Undrafted', np.nan, regex=True)\n\n# Convert the column data type to date\ndf['draft_year'] = pd.to_datetime(df['draft_year'])","2cdb809c":"# Convert season column to an integer type\n\ndf['season'] = pd.to_datetime(df['season'].str[:4])","9b7dcc20":"# Fix country names\n\ndf['country'] = df['country'].replace({'Great Britain':'United Kingdom','England':'United Kingdom','Scotland':'United Kingdom',\n                                       'Bosnia & Herzegovina':'Bosnia and Herzegovina','Bosnia':'Bosnia and Herzegovina',\n                                       'Cabo Verde':'Cape Verde','St. Vincent & Grenadines':'Saint Vincent and Grenadines'})","46aa8cb6":"print('Complete')","ef89fd87":"# Calculate heigh and weight averages\n\nmain_variables = df.groupby('player_name', as_index=False).agg({'player_height': 'mean', 'player_weight':'mean'})","e9cd45af":"# Visualise distribution of height and weight data\n# Source for average US male heigh: https:\/\/en.wikipedia.org\/wiki\/Average_human_height_by_country\n# Source for average US male weight:https:\/\/en.wikipedia.org\/wiki\/Human_body_weight\n\nfig, ax = plt.subplots(1,2,figsize=(16, 8),sharey=True)\nplt.subplots_adjust(wspace=0.05)\n\nsns.distplot(main_variables ['player_height'], ax=ax[0], label='_nolegend_', kde=False)\nsns.distplot(main_variables ['player_weight'], ax=ax[1], label='_nolegend_', kde=False)\nax[0].axvline(main_variables ['player_height'].mean(), color='#c9082a', label='NBA Mean')\nax[1].axvline(main_variables ['player_weight'].mean(), color='#c9082a', label='NBA Mean')\n\n# Add lines for average adults to compare\nax[0].axvline(175.3, color='#17408b', label='Average US Male Adult')\nax[1].axvline(88.8, color='#17408b', label='Average US Male Adult')\n\nax[0].yaxis.set_label_text('Count')\nax[0].xaxis.set_label_text('Height (cm)')\nax[1].xaxis.set_label_text('Weight (kg)')\nplt.suptitle('Distribution of Height and Weight Data', fontsize=22)\nplt.legend(loc='upper right', bbox_to_anchor=(0.98, 1.06), frameon=False)\nsns.despine(ax=ax[1], left=True)\nsns.despine(ax=ax[0])\n\nplt.show()","ea3e0477":"fig = go.Figure(data=go.Scatter(x=main_variables['player_weight'],\n                                y=main_variables['player_height'],\n                                mode='markers',\n                                text=main_variables['player_name'],\n                                marker=dict(color='#17408b')\n                                ))\n\nfig.update_layout(\n    title='NBA Player Height and Weight (for interactive exploration)',\n    xaxis_title='Weight (kg)',\n    yaxis_title='Height (cm)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\nfig.show()","77300449":"plt.figure(figsize=(16, 8))\n\nsns.regplot(x='player_weight', y='player_height', data=main_variables, color='#17408b')\n\nplt.title('Relationship Between Player Height and Weight', fontsize=22)\nplt.ylabel('Height (cm)')\nplt.xlabel('Weight (kg)')\nsns.despine()\n\nplt.show()","cfbbdce3":"corr = stats.pearsonr(main_variables['player_height'], main_variables['player_weight'])\n\nprint(f\"Correlation between player height and weight is: {corr[0]}. The statistical significance of this relationship is {corr[1]}\")","411f3130":"corr_over_seasons = df.groupby('season')[['player_weight','player_height']].corr().unstack().iloc[:,1]\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=corr_over_seasons.index, \n                         y=corr_over_seasons.values,\n                         mode='lines',\n                         name='lines',\n                         line=dict(color='#17408b')\n                        ))\n\nfig.update_layout(\n    title='NBA Player Height and Weight Correlation Each Season',\n    xaxis_title='Season',\n    yaxis_title='Correlation',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.show()","e7e5ba5b":"fig, ax = plt.subplots(figsize=(16, 8))\nax2 = ax.twinx()\n\nsns.lineplot(x=df['season'], y='player_height', data=df, marker=\"o\", ax=ax, ci=None, label='Height', color='#17408b')\nsns.lineplot(x=df['season'], y='player_weight', data=df, marker=\"o\", ax=ax2, ci=None, label='Weight', color='#c9082a')\n\nplt.title('Average Height and Weight Each Season', fontsize=22)\nax.xaxis.set_label_text('Season')\nax.yaxis.set_label_text('Height (cm)')\nax2.yaxis.set_label_text('Weight (kg)')\n\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc=0)\n\nax.spines['top'].set_visible(False)\nax2.spines['top'].set_visible(False)\n\nplt.show()","e57453ab":"df['bmi'] = df['player_weight'].values \/ (df['player_height'].values ** 2) * 10000\n\nplt.figure(figsize=(16, 8))\n\nsns.lineplot(x=df['season'], y='bmi', data=df, marker=\"o\", ci=None, color='#17408b')\n\nplt.title('Average BMI Each Season', fontsize=22)\nplt.ylabel('BMI')\nplt.xlabel('Season')\nsns.despine()\n\nplt.show()","eeace5e0":"bmi_exploration = df[df['season'] == '2019']\nbmi_exploration[['player_name','bmi']].sort_values(by='bmi',ascending=False)[:10]","a06c3a48":"# Height and weight based on draft year\n\nfirst_season_drafted = df.query('season == draft_year')\n\nh_w_by_draft_year = first_season_drafted.groupby('draft_year')['player_height', 'player_weight'].mean()\n\nfig, ax = plt.subplots(figsize=(16, 8))\nax2 = ax.twinx()\n\nsns.lineplot(x=h_w_by_draft_year.index, y='player_height', data=h_w_by_draft_year, marker=\"o\", ax=ax, ci=None, label='Height', color='#17408b')\nsns.lineplot(x=h_w_by_draft_year.index, y='player_weight', data=h_w_by_draft_year, marker=\"o\", ax=ax2, ci=None, label='Weight', color='#c9082a')\n\nplt.title('Average Height and Weight of Draft Class', fontsize=22)\nax.xaxis.set_label_text('Draft Class')\nax.yaxis.set_label_text('Height (cm)')\nax2.yaxis.set_label_text('Weight (kg)')\n\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc=0)\n\nax.spines['top'].set_visible(False)\nax2.spines['top'].set_visible(False)\n\nplt.show()","853488e0":"# BMI based on draft year\n\nbmi_draft = h_w_by_draft_year['player_weight'] \/ (h_w_by_draft_year['player_height'] ** 2) * 10000\nbmi_draft = pd.DataFrame(bmi_draft, columns=['bmi'])\n\nfirst_season_drafted_nz = first_season_drafted[first_season_drafted['player_name'] != 'Zion Williamson']\nh_w_by_draft_year_nz = first_season_drafted_nz.groupby('draft_year')['player_height', 'player_weight'].mean()\nbmi_draft_nz = h_w_by_draft_year_nz['player_weight'] \/ (h_w_by_draft_year_nz['player_height'] ** 2) * 10000\nbmi_draft_nz = pd.DataFrame(bmi_draft_nz, columns=['bmi'])\n\nplt.figure(figsize=(16, 8))\n\nsns.lineplot(x=bmi_draft.index, y=bmi_draft['bmi'], data=bmi_draft, marker=\"o\", color='#17408b')\nsns.lineplot(x=bmi_draft_nz.index, y=bmi_draft_nz['bmi'], data=bmi_draft, marker=\"o\", color='#c9082a')\n\nplt.title('Average BMI of Draft Class', fontsize=22)\nplt.ylabel('BMI')\nplt.xlabel('Draft Class')\nsns.despine()\n\nplt.show()","36c54325":"# Weight and player age\n\nplt.figure(figsize=(16, 8))\n\nw_by_age = df.groupby(['age'])['player_weight'].agg(['mean', 'count'])\nw_by_age['outliers'] = np.where(w_by_age['count']<=100, 1, 0)\nw_by_age = w_by_age.loc[w_by_age['outliers']==0]\n\nsns.lineplot(x=w_by_age.index, y='mean', data=w_by_age, marker='o', color='#17408b')\n\nplt.title('Average Player Weight by Age', fontsize=22)\nplt.ylabel('Average Weight (kg)')\nplt.xlabel('Age')\nsns.despine()\n\nplt.show()","87c9b3c8":"# Select player height and weight when they entered the league\nrelevant_fields = df[['player_name', 'player_height', 'player_weight', 'country', 'season']]\nplayer_first_season = relevant_fields.loc[relevant_fields.groupby(['player_name']).season.idxmin()]\n\n# Group by country and count the number of players for each country\ndf_geography = player_first_season.groupby('country', as_index=False).agg(\n                                                                          {'player_height': 'mean', 'player_weight':'mean', 'player_name':'count'}\n                                                                          ).rename({'player_name': 'count'}, axis=1) \n\n# Select countries that have at least five unique players\ndf_geography = df_geography[df_geography['count'] >= 3]\n\n# Add country codes for Plotly visualisation\ndf_geography = pd.merge(df_geography, country_codes, how='inner', on='country')","bda385cd":"height_map = go.Choropleth(\n    locations = df_geography['code_3digit'],\n    z = df_geography['player_height'],\n    text = df_geography['country'],\n    colorscale = 'Blues',\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_title = 'Player Height (cm)'\n)\n\nweight_map = go.Choropleth(\n    locations = df_geography['code_3digit'],\n    z = df_geography['player_weight'],\n    text = df_geography['country'],\n    colorscale = 'Blues',\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n    colorbar_title = 'Player Weight (kg)',\n    visible=False\n)\n\ndata = [height_map, weight_map]\n\nupdatemenus = list([\n    dict(type=\"buttons\",\n         y=0.7,\n         buttons=list([   \n            dict(label = 'Height Map',\n                 method = 'update',\n                 args = [{'visible': [True, False]},\n                         {'title': 'Average NBA Player Height by Country'}]),\n\n            dict(label = 'Weight Map',\n                 method = 'update',\n                 args = [{'visible': [False, True]},\n                         {'title': 'Average NBA Player Weight by Country'}])\n        ]),\n    )\n])\n\nlayout = dict(updatemenus=updatemenus,\n             title_text='Average NBA Player Height by Country',\n             geo=dict(\n                showframe=False,\n                showcoastlines=False,\n                projection_type='equirectangular'),\n             margin=dict(l=0, r=0, b=0),\n             height=500\n             )\n\nfig = dict(data=data, layout=layout)\n\nplotly.offline.iplot(fig)","4b3d125c":"df_corr = df[df['season'] != '2019-01-01']\ndf_corr = df[['gp','pts','reb','ast','net_rating','usg_pct','player_weight', 'player_height']]\n\n# Compute the correlation matrix\ncorr = df_corr.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(250, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\nplt.show()","4ae93cf4":"g = sns.PairGrid(df_corr, y_vars=['reb','ast'], x_vars=[\"player_height\", \"player_weight\"], height=3, aspect=2)\ng.map(sns.regplot, color='#17408b')\n#g.set(ylim=(-1, 11), yticks=[0, 5, 10])\nplt.show()","8f4a3281":"corr_w_r = df.groupby('season')[['player_weight','reb']].corr().unstack().iloc[:,1]\ncorr_w_a = df.groupby('season')[['player_weight','ast']].corr().unstack().iloc[:,1]\n\ncorr_h_r = df.groupby('season')[['player_height','reb']].corr().unstack().iloc[:,1]\ncorr_h_a = df.groupby('season')[['player_height','ast']].corr().unstack().iloc[:,1]","1393b798":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=corr_w_r.index, y=corr_w_r.values,\n                    mode='lines',\n                    name='Weight and Rebounds'))\n\nfig.add_trace(go.Scatter(x=corr_w_a.index, y=corr_w_a.values,\n                    mode='lines',\n                    name='Weight and Assists'))\n\nfig.add_trace(go.Scatter(x=corr_h_r.index, y=corr_h_r.values,\n                    mode='lines',\n                    name='Height and Rebounds'))\n\nfig.add_trace(go.Scatter(x=corr_h_a.index, y=corr_h_a.values,\n                    mode='lines',\n                    name='Height and Assists'))\n\nfig.update_layout(\n    title='Correlation Coefficient Comparison Over Time',\n    xaxis_title='Season',\n    yaxis_title='Coefficient',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\nfig.show()","932c5ca9":"# Largest body weigth transformations\n\n# Compute weight percentage change values for each player by age\nw_pct_change = df.groupby(['season', 'player_name'], as_index=False)['player_weight'].mean().sort_values(['player_name', 'season'])\nw_pct_change_values = w_pct_change.groupby(['player_name'])['player_weight'].apply(lambda x: x.pct_change())\nw_pct_change = pd.concat([w_pct_change, w_pct_change_values], axis=1).fillna(0)\nw_pct_change.columns = ['season', 'player_name', 'weight', 'pct_change']\n\ncounts = w_pct_change['player_name'].value_counts()\nw_pct_change = w_pct_change[w_pct_change['player_name'].isin(counts.index[counts > 5])]\n\nw_pct_change['sig_cng'] = np.where((w_pct_change.groupby('player_name')['pct_change'].transform('max') > 0.15) | (w_pct_change.groupby('player_name')['pct_change'].transform('min') < -0.15), 1, 0)","0209932a":"a = w_pct_change[w_pct_change['sig_cng'] == 1]","b9cfe28a":"plt.figure(figsize=(16, 8))\n\nsns.lineplot(x=\"season\", y=\"weight\", data=a, units='player_name', estimator=None, hue='player_name')\n\nplt.title('Percentage Change of Players Weight', fontsize=22)\nplt.ylabel('Percentage Change')\nplt.xlabel('Season')\nsns.despine()\n\nplt.show()","a909dea0":"df = df[df['net_rating'] < 40]\ndf = df[df['net_rating'] > -20]\n\ndf['height_bin'] = pd.qcut(df['player_height'], q=6)\ndf['weight_bin'] = pd.qcut(df['player_weight'], q=6)","23448442":"fig = px.box(df.query('season > 2010'), y=\"net_rating\", color=\"height_bin\")\nfig.show()","ef9de148":"fig = px.box(df.query('season < 2000'), y=\"net_rating\", color=\"height_bin\")\nfig.show()","2be4c94a":"df = df.query('season == 2019')\ndf = df.query('gp >= 10')\n\nX = df[['player_height', 'player_weight', 'pts', 'reb', 'ast', 'net_rating']]\n\nscaler = StandardScaler()\nX_std = pd.DataFrame(scaler.fit_transform(X),columns = X.columns)\n\nrow_clusters = linkage(X_std,\n                       method='complete',\n                       metric='euclidean')","71a34dbf":"fig = plt.figure(figsize=(15,15), facecolor='white')\naxd = fig.add_axes([0.01, 0.1, 0.2, 0.6])\nrow_dendr = dendrogram(row_clusters,\n                       orientation='left')\n\ndf_rowclust = X_std.iloc[row_dendr['leaves'][::-1]]\n\naxm = fig.add_axes([0.23, 0.1, 0.6, 0.6])\ncax = axm.matshow(df_rowclust,\n                  interpolation='nearest',\n                  cmap='hot_r',\n                  aspect='auto')\n\naxd.set_xticks([])\naxd.set_yticks([])\nfor i in axd.spines.values():\n    i.set_visible(False)\nfig.colorbar(cax)\naxm.set_xticklabels([''] + list(df_rowclust.columns))\naxm.set_yticklabels([''] + list(df_rowclust.index))\nplt.show()","2d71cedb":"inertia = []\nfor i in range (1,15):\n    km = KMeans(n_clusters=i,\n                init='k-means++',\n                n_init=10,\n                max_iter=300,\n                random_state=42)\n    km.fit(X_std)\n    inertia.append(km.inertia_)\n    \nplt.plot(range(1,15), inertia, marker='o')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.tight_layout()\nplt.show()","1d9683fa":"range_n_clusters = [3, 5, 10]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, ax = plt.subplots()\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax.set_ylim([0, len(X_std) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters,\n                       n_init=100,\n                       max_iter=500,\n                       random_state=42)\n    \n    cluster_labels = clusterer.fit_predict(X_std)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X_std, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X_std, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = plt.cm.nipy_spectral(float(i) \/ n_clusters)\n        ax.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax.set_title(\"The silhouette plot for the various clusters.\")\n    ax.set_xlabel(\"The silhouette coefficient values\")\n    ax.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])","72b7545a":"clusterer = KMeans(n_clusters=10,\n                       n_init=100,\n                       max_iter=500,\n                       random_state=42)\n    \ncluster_labels = clusterer.fit_predict(X_std)\n\nX['cluster'] = cluster_labels\n\nX.groupby('cluster').mean().sort_values(by='player_height')","dfc3b73d":"## **4. Player Clustering** <a id=\"4\"><\/a>","53c91249":"It appears that players gain more weight as they age. This makes sense, as their bodies mature and they build more muscle.","81195376":"### 3.6 Optimal Heights and Weights <a id=\"3.6\"><\/a>","5484ed03":"### **1.1 Table of Contents** <a id=\"1.1\"><\/a>\n* [1. Introduction](#1)\n   * [1.1 Table of Contents](#1.1)\n   * [1.2 Notebook Preparation](#1.2)\n* [2. Data Preparation](#2)\n   * [2.1 Creation of Additional Variables](#2.1)\n* [3. Height and Weight Exploration](#3)\n   * [3.1 Main Variable Analysis](#3.1)\n   * [3.2 Height and Weight over Time](#3.2)\n   * [3.3 Size and Geography](#3.3)\n   * [3.4 Height and Weight Impact on Performance](#3.4)\n   * [3.5 Weight Transformations](#3.5)\n   * [3.6 Optimal Heights and Weights](#3.6)\n* [4. Player Clustering](#4)\n* [5. Conclusion](#5)","a440825a":"Ahh... the 2019 NBA roster has some big bodies with this man leading the charge: \n\n<a><img style=\"\" src=\"https:\/\/cdn.vox-cdn.com\/thumbor\/9U7Bn1ajYJ9ySFczKP9bno1HnIw=\/0x0:1200x800\/1200x800\/filters:focal(348x97:540x289)\/cdn.vox-cdn.com\/uploads\/chorus_image\/image\/60847977\/Di9eY4zX0AApYXt.0.jpg\"\/><\/a>\n","fc1627e8":"Rebound coefficients are stable. However, the negative correlation for assists (the higher or heavier the player is the less assists he makes) has been reducing since 2011. This illustrates how the game is changing and the bigs are becoming a more integral to the overall playmaking of the team.","7876b0b5":"<a><img style=\"float: right;\" src=\"https:\/\/preview.redd.it\/30szuy4xkjhz.jpg?auto=webp&s=012cd6b49ab610c3e37e7f3db9e34cd4f29a988b\" width=\"300\" \/><\/a> This notebook provides data supported evidence on how the bodies of NBA players have changed over time.","a9e1c76c":"This section deals with adjusting existing and creating additional variables.","7b84999f":"Upon first inspection, the following items stand out:\n1. There are only 2235 unique players over the course of 24 seasons. Wow... This illustrates  how competitive it is to make it to the NBA.\n2. There are 36 unique team abbreviations. The league in 2019 consisted of 30, so the extra 6 team will have to be examined.\n   * The extra teams are now defunct: Seattle SuperSonics, Charlotte Bobcats, etc.\n3. The NBA Draft of 2019 has only 2 rounds, so 8 unique rounds number seems interesting.\n   * It turns out that [historically the Draft had way more rounds](https:\/\/en.wikipedia.org\/wiki\/NBA_draft) (going all the way up to 21 actually). Only in 1989 did the NBA settle for the two round system.\n   * The 8th unique value in the ```draft_round``` column is the ```undrafted``` variable.\n4. There are 60 individuals called up in the 2019 NBA Draft format (30 in each of the 2 rounds), however, the data shows that there are 75 unique draft numbers.\n   * This again is a relic of the past NBA Draft format.","c649da6b":"Not surprisingly, height and weight are two closely related variables.","6ccda7cf":"## **1. Introduction** <a id=\"1\"><\/a>","552b5730":"### 3.3 Size and Geography <a id=\"3.3\"><\/a>","663b8837":"This part of the notebook deals with the relevant library import and visual configuration.","f0b5a874":"## **5. Conclusion** <a id=\"5\"><\/a>","472c1782":"The below section provides an initial exploration of the data.","3783e2f5":"### 3.5 Weight Transformations <a id=\"3.5\"><\/a>","c13e1119":"Both, height and weight, are distributed normally in the NBA. However, it is clear that NBA athletes stand out in terms of their height and weight when compared to regular adult males.","48c2f8d2":"## **3. Height and Weight Exploration** <a id=\"3\"><\/a>","0dc5be7f":"No records appear to be missing. However, the following edits will have to be made:\n1. Create ```drafted``` column with boolean 0\/1 logic \n   * Complete\n2. Convert ```draft_year``` column to integer type\n   * Complete\n3. Convert ```season``` column to integer type\n   * Complete","10f24e11":"### 3.1 Main Variable Analysis <a id=\"3.1\"><\/a>","869e4d40":"However, if we break down the correlation by season, we can see that it is steadily decreasing. This is an early indicator of the changing body types of NBA players.","8306fe35":"<a><img style=\"float: right;\" src=\"https:\/\/pbs.twimg.com\/media\/D_SZjUSWkAENmvg.jpg\" width=\"300\" \/><\/a>\nTraditionally, the game of basketball had clearly defined player positions with archetypal body profiles. In simplistic terms, the small players would dribble the ball and pass, slightly taller shooting guards would hit 3 pointers, the medium sized small forwards would attack the basket and the bigs would hustle for rebounds. \n\nHowever, the lines between player positions and roles have increasingly been blurring around the NBA. This change can be attributed to the successful implementation of '[small-ball](https:\/\/en.wikipedia.org\/wiki\/Small_ball_(basketball)' style of play by the Miami Heat and Golden State Warriors in the early and middle '10 respectively.\n\n\nThese changes inevitably meant that players bodies had to adapt. This notebook looks at how the physical profiles of NBA players have changed over two decades between 1996 and 2019.","b094c06a":"The above visualisation showcases average player height and weight (minimum 3 unique players) based on the country they were born in (or have citizenship of).","81a82f65":"### 3.4 Height and Weight Impact on Performance <a id=\"3.4\"><\/a>","ab197fd5":"### 2.1 Creation of Additional Variables <a id=\"2.1\"><\/a>","0c97b326":"## **2. Data Preparation** <a id=\"2\"><\/a>","ac906f73":"This table utalises Plotly visualisation library. One big advatage of a Plotly table is inherent responsiveness without having to write additional lines of code. This allows to hover over the data points and observe:\n* The tallest player ever to step on the NBA floor was Gheorghe Muresan with a hight of 231cm\n* The shortest player is Muggsy Bogues standing at 160cm\n* Sim Bhullar is by far the heaviest player weighting 163kg (he also made history by [being the first NBA player of Indian descent](https:\/\/www.sactownroyalty.com\/2020\/4\/7\/21211433\/sacramento-kings-history-april-7-sim-bhullar-breaks-a-barrier-first-indian-nba-player))","8d459935":"### 1.2 Notebook Preparation <a id=\"1.2\"><\/a>","93d23901":"2019 seems to be an outlier in the BMI decrease trend, so let's explore it in a little more detail by displaying the top 10 players with the highest BMI. ","ce6bf286":"### 3.2 Height and Weight over Time <a id=\"3.2\"><\/a>","f95f932c":"Neither height or weight seem to have significant impact on the total games played and average points scored. However, as expected, height and weight do impact average assist and rebound statistics.","d0e54f09":"Upon first inspection, the following items stand out:\n1. Maximum ```gp``` (games played) number is 85. The NBA season is 82 games, so the extra games will have to be examined\n   * After examining the dataset in detail, we find 14 players who have recorded more than 82 games played. [This Reddit thread](https:\/\/www.reddit.com\/r\/nba\/comments\/a8bsyn\/in_the_200304_season_theo_ratliff_and_shareef\/) suggests the number is higher than 82 because these players have been traded mid-season. For this reason, the records will not be adjusted in any way.\n2. ```net_rating``` values are between -200 and 300. This seems odd and the formula for calculating ```net_rating``` will have to be reviewed\n   * Official ```net_rating``` calculation from the NBA: **NetRtg = 100*((Points)\/(POSS) - 100*((Opp Points)\/(Opp POSS))**\n   * It is still unclear how Bruce Bowen managed to earn himself a net rating of 300, but overall it seems that the outliers are players that had very small statistical contributions and usually played just 1 game. Therefore, these records will be removed."}}