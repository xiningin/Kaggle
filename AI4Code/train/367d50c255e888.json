{"cell_type":{"1976da59":"code","4693bc27":"code","b8ddf2aa":"code","3421471f":"code","39b26ee1":"code","33610a1c":"code","7fa1e9c3":"code","918fd1d7":"code","3fa9edec":"code","49fca33e":"code","c288a20e":"code","8729c2fa":"code","1d81377b":"code","59bf3b20":"code","9dd23710":"code","81aaed7c":"code","ab06c763":"code","84595ab7":"code","ebd8c9cb":"code","7fd3da74":"code","a9080275":"code","19c668ee":"code","19e5a43c":"code","9124fb5d":"code","f0ab4595":"code","472502a0":"code","f8fb6243":"code","e40c8147":"code","ee4484bc":"code","173daf44":"code","6ebf719e":"code","c3866335":"code","730f6017":"code","332f6e67":"code","2d8f1c49":"code","3597118d":"code","a31cbe06":"code","e6ec03c6":"code","82979a59":"code","9a1c1d56":"code","a22fe768":"code","b117fc36":"code","7adb0beb":"code","391a2c74":"code","13dab6a0":"code","ea81e2d8":"code","05a081fa":"code","238d98d9":"code","8f176f96":"code","ad1a5e51":"code","3a437873":"code","80449f28":"code","effeaa08":"code","e95713c8":"code","d25ac772":"code","66f8a1a3":"code","890feb6a":"markdown","52ba6b92":"markdown","77b7e1c8":"markdown","483d32ac":"markdown","58250cce":"markdown","4c181dd7":"markdown","f1622642":"markdown","1ced6012":"markdown","362de948":"markdown","68a24613":"markdown","594f4b53":"markdown","44237879":"markdown","63285a21":"markdown","1fc1d0ff":"markdown","b5ed9fd0":"markdown","47ed3fac":"markdown","4d0f0b66":"markdown"},"source":{"1976da59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import date, datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4693bc27":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000):\n        display(df)","b8ddf2aa":"dateparser = lambda x: pd.to_datetime(x, format='%d\/%m\/%Y', errors='coerce')\n\ndata = pd.read_csv(\"..\/input\/Cluster_fin_csv_ID.csv\", parse_dates = [\"DOB\"], date_parser=dateparser)\ndisplay_all(data.head(10)) ","3421471f":"data.rename(columns = {'ID':'code', 'Pincode':'pin', 'Product':'product', \n                       'Main Product':'main_product', 'Inv.Amt':'inv_amt', 'Revenue Amt':'revenue_amt', 'Year':'year',\n                       'Occupation':'occupation', 'Annual Income':'annual_income', 'Gender':'gender', \n                       'Marital S':'marital_status', 'DOB':'dob', 'Qualificati':'qualification'},inplace=True)","39b26ee1":"# Calculate the age from dob\n\ndef calculate_age(born):\n    today = date.today()\n    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n\ndata['age'] = data['dob'].apply(lambda x : calculate_age(x))","33610a1c":"data = data.loc[~(data.dob > date.today())]","7fa1e9c3":"data.sort_values('year',ascending=False, inplace= True)\ndata['count'] = data.groupby(['code', 'main_product'])['code'].transform('count')","918fd1d7":"fig, axes = plt.subplots(1, 2, figsize = (15,5))\ndata.groupby('year').size().plot(kind='Bar', color='skyblue', title = 'Record Count per Year', ax=axes[0])\naxes[0].set_xlabel = ('Year')\naxes[0].set_ylabel = ('Count')\n\ndata.groupby('year')['revenue_amt'].sum().plot(kind='Bar', color='skyblue', title = 'Total Revenue by Year', ax=axes[1])\naxes[1].set_xlabel = ('Year')\naxes[1].set_ylabel = ('Total Revenue')","3fa9edec":"data = pd.concat([data, pd.get_dummies(data[['year', 'main_product']])],axis=1)\ndisplay_all(data.head(10))","49fca33e":"data.rename(columns = {'main_product_SD Bond':'main_product_SD_Bond'}, inplace=True)","c288a20e":"data.info()","8729c2fa":"data['total_revenue_amt'] = data.groupby(['code'])['revenue_amt'].transform('sum')","1d81377b":"data['year_2012-13'] = data.groupby(['code'])['year_2012-13'].transform('max')\ndata['year_2013-14'] = data.groupby(['code'])['year_2013-14'].transform('max')\ndata['year_2014-15'] = data.groupby(['code'])['year_2014-15'].transform('max')\ndata['year_2015-16'] = data.groupby(['code'])['year_2015-16'].transform('max')\ndata['year_2016-17'] = data.groupby(['code'])['year_2016-17'].transform('max')\ndata['year_2017-18'] = data.groupby(['code'])['year_2017-18'].transform('max')\ndata['year_2018-19'] = data.groupby(['code'])['year_2018-19'].transform('max')","59bf3b20":"data['main_product_Deposit'] = data.groupby(['code'])['main_product_Deposit'].transform('max')\ndata['main_product_GI'] = data.groupby(['code'])['main_product_GI'].transform('max')\ndata['main_product_LI'] = data.groupby(['code'])['main_product_LI'].transform('max')\ndata['main_product_Locker'] = data.groupby(['code'])['main_product_Locker'].transform('max')\ndata['main_product_MF'] = data.groupby(['code'])['main_product_MF'].transform('max')\ndata['main_product_NCD'] = data.groupby(['code'])['main_product_NCD'].transform('max')\ndata['main_product_SD_Bond'] = data.groupby(['code'])['main_product_SD_Bond'].transform('max')","9dd23710":"# Fill null values of age with mean within that group. If still null then fill with mean age for the entire dataset.\ndata['age'] = data.groupby(['code'])['age'].apply(lambda x: x.fillna(x.mean()))\ndata['age'] = data['age'].fillna(data['age'].mean())","81aaed7c":"# Fill null values of dob with 0\ndata['dob'] = data['dob'].fillna(0)","ab06c763":"# Fill na occupation with mode for the column\ndata['occupation'] = data['occupation'].fillna(data['occupation'].value_counts().index[0])","84595ab7":"# Fill null values of qualification with mode within that occupation.\ndata['qualification'] = data.groupby(['occupation'])['qualification'].apply(lambda x : x.fillna(x.value_counts().index[0]))","ebd8c9cb":"# Fill null values of annual income with mode within that occupation.\ndata['annual_income'] = data.groupby(['occupation'])['annual_income'].apply(lambda x : x.fillna(x.value_counts().index[0]))","7fd3da74":"# Check if there are any duplicates\ndata.loc[data.duplicated('code')]","a9080275":"data.drop_duplicates(subset=['code'], keep='first',inplace = True)","19c668ee":"# Check if there are any duplicates\ndata.loc[data.duplicated('code')]","19e5a43c":"((data.isnull() | data.isna()).sum() * 100\/data.index.size).round(2)","9124fb5d":"data.dropna(how='any', inplace=True)\n((data.isnull() | data.isna()).sum() * 100\/data.index.size).round(2)","f0ab4595":"display_all(data.describe(include='all'))","472502a0":"fig, ax = plt.subplots(2,1,figsize=(20,10))\ndata.age.plot(kind='hist', bins=100, color='skyblue', title = 'Histogram of Age', ax=ax[0])\n\ndata.groupby('age')['revenue_amt'].sum().plot(kind='Bar', color='skyblue', title = 'Total Revenue by Age', ax=ax[1])","f8fb6243":"data.groupby('occupation').size().sort_values(ascending=False).plot(kind='Bar', color='skyblue', title = 'Frequency of Occupation')","e40c8147":"data[data.occupation.str.contains('House Wife')].groupby('main_product').size().sort_values(ascending=False).plot(kind='Bar', color='skyblue', title = 'Main Product the house wife invest in')","ee4484bc":"pd.crosstab(data['main_product'],data['occupation']).plot(kind='bar', figsize=(10,5), title = 'Main Product Vs Occupation')","173daf44":"data.groupby('qualification').size().sort_values(ascending=False).plot(kind='Bar', color='skyblue', title = 'Frequency of Qualification')","6ebf719e":"data.loc[data['marital_status'].str.contains('MARRIED'), 'marital_status'] = 'Married'\ndata.loc[data['marital_status'].str.contains('SINGLE'), 'marital_status'] = 'Single'\ndata.loc[data['marital_status'].str.contains('Separated'), 'marital_status'] = 'Divorced'\ndata.groupby('marital_status').size().sort_values(ascending=False).plot(kind='Bar', color = 'skyblue', title = 'Frequency of marital status')","c3866335":"# How many values are 'other\/others\/notanswer' in qualification, occupation and marital_status\ndata.loc[(data['qualification'] == 'Others') | (data['occupation'] == 'Other') | (data['marital_status'] == 'Notanswer')].count()","730f6017":"# Delete rows \ndata = data.loc[~(data['qualification'] == 'Others') & ~(data['occupation'] == 'Other') & ~(data['marital_status'] == 'Notanswer')]\n\ndata.loc[(data['qualification'] == 'Others') | (data['occupation'] == 'Other') | (data['marital_status'] == 'Notanswer')].count()","332f6e67":"data.pin = data.pin.astype(str)\ndata = data.loc[~data.pin.str.contains('TRUE|242 00|238 10|200 02|278558?')]\ndata.pin = data.pin.astype(int)\ndata = data.loc[data.pin > 110000]\n#display_all(data.groupby(['pin']).size())","2d8f1c49":"bins = np.array([100000, 200000, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 300000 \\\n                 , 400000, 500000, 600000 \\\n                 , 700000, 800000, 900000, 1000000])\n\nlabels = pd.cut(data.pin, bins)\n\ngrouped = data.groupby(['pin', labels])\ngrouped.size().unstack(0).T","3597118d":"data['pin_group'] = labels\ndata.groupby(['pin_group']).size().sort_values(ascending=False).plot(kind='Bar', color = 'skyblue', title = 'Pin group frequency')","a31cbe06":"data.annual_income = data.annual_income.astype(str)\n\ndata.loc[data['annual_income'].str.contains('< 100000'), 'annual_income'] = '50000'\ndata.loc[data['annual_income'].str.contains('100000 - 200000'), 'annual_income'] = '150000'\ndata.loc[data['annual_income'].str.contains('200000 - 300000'), 'annual_income'] = '250000'\ndata.loc[data['annual_income'].str.contains('3.5 LAKHS|300000 - 400000'), 'annual_income'] = '350000'\ndata.loc[data['annual_income'].str.contains('3.6'), 'annual_income'] = '360000'\ndata.loc[data['annual_income'].str.contains('100000 - 300000'), 'annual_income'] = '150000'\ndata.loc[data['annual_income'].str.contains('400000 - 500000'), 'annual_income'] = '450000'\ndata.loc[data['annual_income'].str.contains('5'), 'annual_income'] = '500000'\ndata.loc[data['annual_income'].str.contains('5.5|> 500000'), 'annual_income'] = '550000'\ndata = data.loc[~data.annual_income.str.contains('Not Available')]\n\ndata.annual_income = data.annual_income.astype(float)\n\ndata = data.loc[data.annual_income > 0]\ndata.info()","e6ec03c6":"bins = np.array([0, 10000, 100000, 200000, 300000, 400000, 500000, 1000000, 1500000, 10000000])\nlabels = pd.cut(data.annual_income, bins)\n\ngrouped = data.groupby(['main_product', labels])\ngrouped.size().unstack(0)","82979a59":"data['annual_income_group'] = labels","9a1c1d56":"display_all(data.describe(include='all'))","a22fe768":"del data['product']\ndel data['inv_amt']\ndel data['year']","b117fc36":"data_copy = data.copy()","7adb0beb":"# Prepare data to feed to the kproto model\ncolumns = ['annual_income_group', 'occupation', 'qualification', 'pin_group', 'gender', 'marital_status'\\\n          ,'year_2012-13', 'year_2013-14', 'year_2014-15', 'year_2015-16', 'year_2016-17', 'year_2017-18', 'year_2018-19'\\\n          ,'main_product_Deposit', 'main_product_GI', 'main_product_LI', 'main_product_Locker', 'main_product_MF'\\\n          ,'main_product_NCD', 'main_product_SD_Bond']\n\ndata_cat = data[columns].copy()\n\nfor c in columns:\n    data_cat[columns] = data_cat[columns].astype('category')\n\n# normalise the continuous variables\ndata_cat['total_revenue_amt'] = data['total_revenue_amt'].astype(float)\ndata_cat['total_revenue_amt'] = ((data_cat['total_revenue_amt'] - np.mean(data_cat['total_revenue_amt'])) \/ np.std(data_cat['total_revenue_amt']))\n\ndata_cat['age'] = data['age'].astype(float)\ndata_cat['age'] = ((data_cat['age'] - np.mean(data_cat['age'])) \/ np.std(data_cat['age']))\n\n#data_cat['count'] = data['count'].astype(float)\n#data_cat['count'] = ((data_cat['count'] - np.mean(data_cat['count'])) \/ np.std(data_cat['count']))\n\n# Kproto requires input as matrix\ndata_cat_matrix = data_cat.as_matrix()","391a2c74":"data_cat.info()","13dab6a0":"#Kprototype clustering for data with both numeric and categorical columns\nfrom kmodes import kprototypes\n\nkproto = kprototypes.KPrototypes(n_clusters=5,init='Huang',verbose=1)\n\nclusters = kproto.fit_predict(data_cat_matrix, categorical = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\n# Print the cluster centroids\nprint(kproto.cluster_centroids_)\n\n#Add cluster column back to original data\ndata_cl = data.copy()\ndata_cl['clusters'] = kproto.labels_\n\n#Lets analyze the clusters\nprint (data_cl.groupby(['clusters']).size())\n#display_all(data_cl)","ea81e2d8":"data_cl0 = data_cl.loc[data_cl['clusters'] == 0].describe(include='all')\ndisplay_all(data_cl0)","05a081fa":"data_cl1 = data_cl.loc[data_cl['clusters'] == 1].describe(include='all')\ndisplay_all(data_cl1)","238d98d9":"data_cl2 = data_cl.loc[data_cl['clusters'] == 2].describe(include='all')\ndisplay_all(data_cl2)","8f176f96":"data_cl3 = data_cl.loc[data_cl['clusters'] == 3].describe(include='all')\ndisplay_all(data_cl3)","ad1a5e51":"data_cl4 = data_cl.loc[data_cl['clusters'] == 4].describe(include='all')\ndisplay_all(data_cl4)","3a437873":"fig, ax = plt.subplots()\ndata_cl.groupby(['clusters']).size().plot(kind='Bar', color='skyblue', ax=ax, title =\"Cluster Size\", figsize=(7, 5), fontsize=12)\nax.set_xlabel('Clusters')\nax.set_ylabel('Count')\nfig.savefig('img1.png')","80449f28":"fig, ax = plt.subplots()\ndata_cl.groupby(['clusters'])['total_revenue_amt'].sum().plot(kind='Bar', color='skyblue', ax=ax, title =\"Total Revenue per Cluster\", figsize=(7, 5), fontsize=12)\nax.set_xlabel('Clusters')\nax.set_ylabel('Total Revenue')\nfig.savefig('img2.png')","effeaa08":"fig, ax = plt.subplots()\ndata_cl.groupby(['clusters'])['total_revenue_amt'].mean().plot(kind='Bar', color='skyblue', ax=ax, title =\"Mean Revenue per Cluster\", figsize=(7, 5), fontsize=12)\nax.set_xlabel('Clusters')\nax.set_ylabel('Mean Revenue')\nfig.savefig('img3.png')","e95713c8":"fig, ax = plt.subplots()\ndata_cl.groupby(['clusters'])['age'].mean().plot(kind='Bar', color='skyblue', ax=ax, title =\"Mean Age per Cluster\", figsize=(7, 5), fontsize=12)\nax.set_xlabel('Clusters')\nax.set_ylabel('Mean Age')\nfig.savefig('img4.png')","d25ac772":"data_cl.sort_values(['clusters', 'total_revenue_amt'], ascending = [True, False], inplace=True)","66f8a1a3":"writer = pd.ExcelWriter('fin_clusters.xlsx')\ndata_cl.to_excel(writer,'Clusters', index=False)\n\ndata_cl0 = data_cl.loc[data_cl['clusters'] == 0].describe(include='all')\ndata_cl0.to_excel(writer,'Cluster_info', startcol=12,startrow=1)\n\nworkbook  = writer.book\nworksheet = writer.sheets['Cluster_info']\n\nworksheet.write(0, 12, 'Cluster 0 Information')\n\nworksheet.write(14, 12, 'Cluster 1 Information')\ndata_cl1.to_excel(writer, sheet_name = 'Cluster_info', startcol=12,startrow=15)\n\nworksheet.write(29, 12, 'Cluster 2 Information')\ndata_cl2.to_excel(writer, sheet_name = 'Cluster_info', startcol=12,startrow=30)\n\nworksheet.write(44, 12, 'Cluster 3 Information')\ndata_cl3.to_excel(writer, sheet_name = 'Cluster_info', startcol=12,startrow=45)\n\nworksheet.write(59, 12, 'Cluster 4 Information')\ndata_cl4.to_excel(writer, sheet_name = 'Cluster_info', startcol=12,startrow=60)\n\nworksheet.insert_image('A1', 'img1.png')\nworksheet.insert_image('A25', 'img2.png')\nworksheet.insert_image('A50', 'img3.png')\nworksheet.insert_image('A75', 'img4.png')\n\nwriter.save()","890feb6a":"### Plot graphs revenue vs age, occupation, qualification <a class=\"anchor\" id=\"70-bullet\"><\/a>","52ba6b92":"### Explain the clusters by graphs <a class=\"anchor\" id=\"130-bullet\"><\/a>","77b7e1c8":"### Data Cleanup - standardize data in marital_status, qualification, occupation. Remove rows with values 'others\/notanswer' <a class=\"anchor\" id=\"80-bullet\"><\/a>","483d32ac":"## Financial Customer Data - Clustering based on parameters like Age, Gender, Marital Status, Occupation, Location, Investment Product and Revenue Generated\n\n> ## Contents:\n* [Read customer data as input](#10-bullet)\n* [Create new column for age based on date of birth](#20-bullet)\n* [Create new column for count of records per customer](#30-bullet)\n* [Plot revenue vs year](#40-bullet)\n* [One hot encode fields year and main_product](#45-bullet)\n* [Create new column for total revenue per customer, keep only one record per customer](#50-bullet)\n* [Remove records with null data](#60-bullet)\n* [Plot graphs revenue vs age, occupation, qualification](#70-bullet)\n* [Data Cleanup - standardize data in marital_status, qualification, occupation ](#80-bullet)\n* [Data Cleanup - bin customer pin codes](#90-bullet)\n* [Data Cleanup - bin customer annual income](#100-bullet)\n* [Model - Prepare data for kproto](#110-bullet)\n* [Model - Cluster using kroto](#120-bullet)\n* [Explain the clusters by graphs](#130-bullet)\n* [Create Excel Output - Write to excel with cluster information and graphs](#140-bullet)","58250cce":"### Remove null data <a class=\"anchor\" id=\"60-bullet\"><\/a>","4c181dd7":"### Data Cleanup - bin customer pin codes <a class=\"anchor\" id=\"90-bullet\"><\/a>","f1622642":"### Create new column for count of records per customer <a class=\"anchor\" id=\"30-bullet\"><\/a>","1ced6012":"### Create new column for age based on date of birth <a class=\"anchor\" id=\"20-bullet\"><\/a>","362de948":"### Model - Prepare data for kproto <a class=\"anchor\" id=\"110-bullet\"><\/a>","68a24613":"<a href=\"fin_clusters.xlsx\"> Download File <\/a>","594f4b53":"### Create new column for total revenue per customer, impute column values where null, keep only one record per customer <a class=\"anchor\" id=\"50-bullet\"><\/a>","44237879":"### Read Customer Data <a class=\"anchor\" id=\"10-bullet\"><\/a>","63285a21":"### Plot revenue Vs year <a class=\"anchor\" id=\"40-bullet\"><\/a>","1fc1d0ff":"### Create Excel Output - Write to excel with cluster information and graphs <a class=\"anchor\" id=\"140-bullet\"><\/a>","b5ed9fd0":"### Model - Create clusters using kproto <a class=\"anchor\" id=\"120-bullet\"><\/a>","47ed3fac":"### One hot encode fields year and main_product <a class=\"anchor\" id=\"45-bullet\"><\/a>","4d0f0b66":"### Data Cleanup - bin customer annual income <a class=\"anchor\" id=\"100-bullet\"><\/a>"}}