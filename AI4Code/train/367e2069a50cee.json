{"cell_type":{"8d8467c4":"code","f33eefd4":"code","df32810e":"code","9498b070":"code","20611047":"code","f2e3f5c3":"code","73f8ce79":"code","1d89e9d3":"code","6a7a9afd":"code","9f12a33a":"code","2974c453":"code","5595a6c2":"code","c1e7c488":"code","42caefe8":"code","b3e11056":"code","10f36b6f":"code","15f6160e":"code","6818c295":"code","9b810fa1":"markdown","3d89e105":"markdown","2a5e228c":"markdown","fb64b2fb":"markdown","ece6b8d9":"markdown","f95618fc":"markdown","7d940d1f":"markdown","2a61125e":"markdown"},"source":{"8d8467c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nimport missingno as msno\n#from pandas.tools.plotting import parallel_coordinates\nimport plotly.graph_objs as go\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f33eefd4":"data_set = {\"column1\" : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], \"column2\": [1,2,3,4,np.nan,6,7,8,np.nan,10,np.nan,12,13,14,15,16,np.nan,18,np.nan,20 ], \"column3\": [1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}","df32810e":"data_set","9498b070":"data_set = pd.DataFrame(data_set)","20611047":"data_set","f2e3f5c3":"msno.matrix(data_set)\nplt.show()","73f8ce79":"msno.bar(data_set)\nplt.show()","1d89e9d3":"iris = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","6a7a9afd":"iris = iris.drop(\"Id\", axis = 1)","9f12a33a":"iris.head()","2974c453":"iris.Species.unique()","5595a6c2":"import plotly.express as px","c1e7c488":"plt.figure(figsize=(15,10))\npx.parallel_coordinates(iris)\n","42caefe8":"df = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\", labels={\"species_id\": \"Species\",\n                \"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n                \"petal_width\": \"Petal Width\", \"petal_length\": \"Petal Length\", },\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2)\nfig.show()","b3e11056":"from matplotlib_venn import venn2\nsepal_length = iris.iloc[:,0]\nsepal_width = iris.iloc[:,1]\npetal_length = iris.iloc[:,2]\npetal_width = iris.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15, 15), set_labels = ('sepal_length', 'sepal_width'))\nplt.show()","10f36b6f":"feature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"orange\",\"purple\",\"yellow\",\"lime\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","15f6160e":"categories = list(iris)[:4]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = iris.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"setosa\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = iris.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"versicolor\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","6818c295":"df = iris.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1 = iris.Species\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","9b810fa1":"# Parallel Plots(Pandas)","3d89e105":"# Donut","2a5e228c":"# Spider Chart","fb64b2fb":"# Venn","ece6b8d9":"As we understand from the visualization, if we have any missing value they were shown with white color. So, using missingno library we can check our data.","f95618fc":"# Cluster Map","7d940d1f":"For visualizing missing values, we use \"Missingno\" library.","2a61125e":"# Matrix and Box Plots(Missingno)"}}