{"cell_type":{"2e9dae55":"code","b98e7644":"code","3555a9e5":"code","a5764494":"code","8fb29dc3":"code","c9dc6f6c":"code","08b5460a":"code","16084734":"code","d1b10f1d":"code","270c9b25":"code","d917a452":"code","855a4a22":"code","64efa047":"code","bd202d37":"code","fede5f28":"code","fa135e11":"code","5c08cc51":"code","794d010a":"markdown","01dc153d":"markdown","98d3432f":"markdown"},"source":{"2e9dae55":"# we will clone the github repository containing the YOLO V5 and install the requirements via requirements.txt\n!git clone https:\/\/github.com\/ultralytics\/yolov5  # clone repo\n!pip install -U pycocotools\n!pip install -qr yolov5\/requirements.txt  # install dependencies\n!cp yolov5\/requirements.txt .\/","b98e7644":"# let's start by importing important libraries for this task\nimport pandas as pd  # for storing and manupulating data\nimport numpy as np  # for fast calculation and processing of data\nimport cv2          # for image processing\nimport torch        # for using deep learning\nimport os           # to use file system\nimport time         # to record time\nimport random       # to get random numbers\nfrom tqdm.auto import tqdm  #to get progress bar while running script\nimport shutil as sh  # for working with files","3555a9e5":"from IPython.display import Image, clear_output\nimport matplotlib.pyplot as plt        # for visualization purpose","a5764494":"#  import the data and add some column for the center, height and width and rename the image column to image_id\nimg_h, img_w, num_channels = (380, 676, 3)\ndf = pd.read_csv('..\/input\/car-object-detection\/data\/train_solution_bounding_boxes (1).csv')\ndf.rename(columns={'image':'image_id'}, inplace=True)\ndf['image_id'] = df['image_id'].apply(lambda x: x.split('.')[0])\ndf['x_center'] = (df['xmin'] + df['xmax'])\/2\ndf['y_center'] = (df['ymin'] + df['ymax'])\/2\ndf['w'] = df['xmax'] - df['xmin']\ndf['h'] = df['ymax'] - df['ymin']\ndf['classes'] = 0\ndf['x_center'] = df['x_center']\/img_w\ndf['w'] = df['w']\/img_w\ndf['y_center'] = df['y_center']\/img_h\ndf['h'] = df['h']\/img_h\ndf.head()","8fb29dc3":"# we will read a random image from the image_id column\nindex = list(set(df.image_id))\nimage = random.choice(index)\nprint(\"Image ID: %s\"%(image))\nimg = cv2.imread(f'\/kaggle\/input\/car-object-detection\/data\/training_images\/{image}.jpg')\nimg.shape","c9dc6f6c":"# show the random image\nimage = random.choice(index)\nImage(filename=f'\/kaggle\/input\/car-object-detection\/data\/training_images\/{image}.jpg',width=600)","08b5460a":"# we will copy the data to other directory\nsource = 'training_images'\nif True:\n    for fold in [0]:\n        val_index = index[len(index)*fold\/\/5:len(index)*(fold+1)\/\/5]\n        for name,mini in tqdm(df.groupby('image_id')):\n            if name in val_index:\n                path2save = 'val2017\/'\n            else:\n                path2save = 'train2017\/'\n            if not os.path.exists('\/tmp\/convertor\/fold{}\/labels\/'.format(fold)+path2save):\n                os.makedirs('\/tmp\/convertor\/fold{}\/labels\/'.format(fold)+path2save)\n            with open('\/tmp\/convertor\/fold{}\/labels\/'.format(fold)+path2save+name+\".txt\", 'w+') as f:\n                row = mini[['classes','x_center','y_center','w','h']].astype(float).values\n                row = row.astype(str)\n                for j in range(len(row)):\n                    text = ' '.join(row[j])\n                    f.write(text)\n                    f.write(\"\\n\")\n            if not os.path.exists('\/tmp\/convertor\/fold{}\/images\/{}'.format(fold,path2save)):\n                os.makedirs('\/tmp\/convertor\/fold{}\/images\/{}'.format(fold,path2save))\n            sh.copy(\"\/kaggle\/input\/car-object-detection\/data\/{}\/{}.jpg\".format(source,name),'\/tmp\/convertor\/fold{}\/images\/{}\/{}.jpg'.format(fold,path2save,name))","16084734":"!python yolov5\/detect.py --weights yolov5\/yolov5s.pt --img 676 --conf 0.4 --source \/kaggle\/input\/car-object-detection\/data\/testing_images","d1b10f1d":"# we will save the prediction to predicted_files list\npredicted_files = []\nfor (dirpath, dirnames, filenames) in os.walk(\"runs\/detect\/exp\"):\n    predicted_files.extend(filenames)","270c9b25":"# we will randomly see the predicted images with bounding box around the car\nImage(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","d917a452":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","855a4a22":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","64efa047":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","bd202d37":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","fede5f28":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","fa135e11":"Image(filename=f'runs\/detect\/exp\/{random.choice(predicted_files)}')","5c08cc51":"!rm -rf runs yolov5","794d010a":"# **detecting the cars from the images by using the predict file in github repository**","01dc153d":" we will use **yolo V5** model for detecting cars in the image or by using camera.","98d3432f":"# **Object detection with Python**"}}