{"cell_type":{"8ef5a52a":"code","9a32fcae":"code","f2d0be1d":"code","9b560997":"code","4c6ffe8d":"code","387783a9":"code","1c85253e":"code","9c8a5efc":"code","0c9a3e3f":"code","ff03c92d":"code","5264cca2":"code","7fcbc73f":"code","b30b3337":"code","c8d5c04b":"code","30c4d3ec":"code","778f6691":"code","907fc7a0":"code","b14174f0":"code","20dae021":"code","7287ee66":"code","923af70d":"code","d84dca65":"code","00c52d20":"code","bb8c618c":"code","ceb8be96":"code","b430f853":"code","749b7aad":"code","3487929e":"code","0eaea292":"code","b169c3a7":"code","c1a6c63b":"markdown","f36486f1":"markdown","642b8955":"markdown","f237873a":"markdown","f8ec63e1":"markdown","095b1452":"markdown","610cb405":"markdown","441ad0b2":"markdown","56382167":"markdown","7666ffbf":"markdown","5a8c6c9f":"markdown"},"source":{"8ef5a52a":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","9a32fcae":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","f2d0be1d":"print(train_df.columns)","9b560997":"train_df.head()","4c6ffe8d":"test_df.head()","387783a9":"train_df.info()","1c85253e":"train_df.describe(include=['O'])","9c8a5efc":"train_df.describe()","0c9a3e3f":"print(train_df['Name'])","ff03c92d":"women = train_df.loc[train_df.Sex == 'female']['Survived']\nrate_women = sum(women) \/ len(women)\n\nprint('% of women who survived:', rate_women)","5264cca2":"men = train_df.loc[train_df.Sex == 'male']['Survived']\nrate_men = sum(men) \/ len(men)\n\nprint('% of men who survived:', rate_men)","7fcbc73f":"map = {'male': 0, 'female': 1}\n\ntrain_df['Sex'] = train_df['Sex'].map(map).astype(int)\ntest_df['Sex'] = test_df['Sex'].map(map).astype(int)","b30b3337":"mode_value = train_df['Embarked'].dropna().mode()[0]\nmode_value\n\ntrain_df['Embarked'] = train_df['Embarked'].fillna(mode_value)\ntest_df['Embarked'] = test_df['Embarked'].fillna(mode_value)","c8d5c04b":"train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean().sort_values('Survived')","30c4d3ec":"train_df['Embarked'] = train_df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)\ntest_df['Embarked'] = test_df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)","778f6691":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values('Survived')","907fc7a0":"mean_value = train_df['Age'].dropna().mean()\nmean_value","b14174f0":"train_df['Age'] = train_df['Age'].fillna(mean_value)\ntest_df['Age'] = test_df['Age'].fillna(mean_value)","20dae021":"train_df['group_ages'] = pd.cut(train_df['Age'], 6)\ntrain_df[['group_ages', 'Survived']].groupby(['group_ages'], as_index = False).mean().sort_values('Survived')","7287ee66":"train_df.loc[train_df['Age'] < 14, 'Age'] = 0\ntrain_df.loc[(train_df['Age'] >= 14) & (train_df['Age'] < 27), 'Age'] = 1\ntrain_df.loc[(train_df['Age'] >= 27) & (train_df['Age'] < 40), 'Age'] = 2\ntrain_df.loc[(train_df['Age'] >= 40) & (train_df['Age'] < 54), 'Age'] = 3\ntrain_df.loc[(train_df['Age'] >= 54) & (train_df['Age'] < 67), 'Age'] = 4\ntrain_df.loc[(train_df['Age'] >= 67) & (train_df['Age'] <= 80), 'Age'] = 5\n\ntrain_df['Age'] = train_df['Age'].astype(int)\n\ntest_df.loc[test_df['Age'] < 14, 'Age'] = 0\ntest_df.loc[(test_df['Age'] >= 14) & (test_df['Age'] < 27), 'Age'] = 1\ntest_df.loc[(test_df['Age'] >= 27) & (test_df['Age'] < 40), 'Age'] = 2\ntest_df.loc[(test_df['Age'] >= 40) & (test_df['Age'] < 54), 'Age'] = 3\ntest_df.loc[(test_df['Age'] >= 54) & (test_df['Age'] < 67), 'Age'] = 4\ntest_df.loc[(test_df['Age'] >= 67) & (test_df['Age'] <= 80), 'Age'] = 5\n\ntest_df['Age'] = test_df['Age'].astype(int)","923af70d":"train_df['has_family'] = train_df['SibSp'] + train_df['Parch']\ntest_df['has_family'] = test_df['SibSp'] + test_df['Parch']\n\ntrain_df[['PassengerId', 'has_family']]","d84dca65":"train_df.loc[train_df['has_family'] > 0, 'has_family'] = 1\ntest_df.loc[test_df['has_family'] > 0, 'has_family'] = 1\n\ntrain_df[['has_family', 'Survived']].groupby(['has_family'], as_index = False).mean().sort_values('Survived')","00c52d20":"train_df = train_df.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'group_ages'], axis = 1)\ntest_df = test_df.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis = 1)\ntrain_df.info()","bb8c618c":"X_train = train_df.drop('Survived', axis = 1)\ny_train = train_df['Survived']\nX_test = test_df.drop(['PassengerId'], axis = 1)","ceb8be96":"model = RandomForestClassifier(n_estimators = 100, max_depth = 5, random_state = 1)\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\nprint('score: ', model.score(X_train, y_train))","b430f853":"linear_model = LinearRegression()\nlinear_model.fit(X_train, y_train)\npredictions = linear_model.predict(X_test)\n\nprint('Score: ', linear_model.score(X_train, y_train))","749b7aad":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\n\nprint('Score: ', knn.score(X_train, y_train))","3487929e":"sgd = SGDClassifier()\nsgd.fit(X_train, y_train)\npredictions = sgd.predict(X_test)\n\nprint('Score: ', sgd.score(X_train, y_train))","0eaea292":"tree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)\npredictions = tree.predict(X_test)\n\nprint('score: ', tree.score(X_train, y_train))","b169c3a7":"output = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index = False)\nprint('complete')","c1a6c63b":"**MODEL CREATING**  \n- Here I will create my train and test split.  \n- Next i will create several models to see which model will produce the best training score.\n- The best score produce is the model i will use for my final submission.","f36486f1":"**AGE**  \nNext we'll modal age v survival.\nTo do this I will group ages together using the pd.cut method to automatically give me group ranges.","642b8955":"Here I will type change Embarked to int to help with model computation.","f237873a":"**SEX**  \nFirst test will be from the gender submission file. This file states all males died, while all females lived.  \nThis will test to see how accurate that statement is commpared to the training data.  \nI will then transfer the data into an integer to make computations easier for model.","f8ec63e1":"**IMPORT**  \nimporting all methods that will be used later on.","095b1452":"**DELETE**  \n- Here I am cleaning up the dataframe by deleting features I no longer want to use during testing.","610cb405":"categorical: Sex, Embarked, Survived  ----  Ordinal: Pclass\n\nNumerical:  \ncountinous: Age, Fare  ----  Discrete: SibSp, Parch","441ad0b2":"**EMBARKED**  \nThe next test will be to see if embarkment had any effect on survival.  \nHowever, embarked is missing a value inputs. So, I will be using the mode to replace these missing values since embarked is a categorical feature.","56382167":"**Family**  \n- The first thing i will do is combine the SibSp and Parch features into one feature.\n- I want to test whether having a family will increase odds of survival or not.","7666ffbf":"5: ints  \n5: objects  \n2: floats  \nage and cabin missing values","5a8c6c9f":"**SAVING OUTPUT**\n- creating new dataframe of predicted output.\n- saving output into submission.csv file."}}