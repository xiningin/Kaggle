{"cell_type":{"1c4d1c01":"code","033115e0":"code","513dba05":"code","8bb54177":"code","2aeb7124":"code","a2079e10":"code","4fbd63f6":"code","d444256a":"code","85ed0dbb":"code","ea51680c":"code","747b80ea":"code","abefbbdc":"code","a9f9e70a":"code","6e77911d":"code","14bbd1be":"code","f41c0ed5":"code","4dbf3517":"code","4711a484":"code","74881cb9":"code","690515bb":"code","6c0aae06":"code","d10d1129":"code","d01def30":"code","699d76dd":"code","ccf77c3a":"code","a03324da":"code","2cfc2ded":"code","53896c54":"markdown","cf7f9a63":"markdown","ddfce59e":"markdown","9fa98b6c":"markdown","9ad6fac1":"markdown","17918656":"markdown","562f0210":"markdown","b57be9d3":"markdown","db943057":"markdown","b7f36a9c":"markdown","7b04a559":"markdown","e1fa6929":"markdown","2482271c":"markdown","6574f728":"markdown"},"source":{"1c4d1c01":"# Generic Libraries\nimport numpy as np\nimport pandas as pd\n\n# Visualisation Libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport warnings\nfrom matplotlib import cm\n\npd.plotting.register_matplotlib_converters()\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\npd.set_option('display.max_columns', 500)\nwarnings.filterwarnings(\"ignore\")\npd.options.display.float_format = '{:.2f}'.format","033115e0":"url = '..\/input\/churn-model\/Churn_Modelling.csv'\ndata = pd.read_csv(url, header='infer')","513dba05":"data.shape","8bb54177":"data.dtypes","2aeb7124":"#Dropping the Row Number & Customer Id columns\ndata = data.drop(columns=['RowNumber','CustomerId'], axis=1)","a2079e10":"# Changing the data types for certain columns to 'Category'\n\ncols = set(data.columns)\ncols_numeric = set(['CreditScore','Age', 'Tenure','Balance','NumOfProducts','EstimatedSalary'])\ncols_obj = set(['Surname','Geography'])\ncols_category = list(cols - cols_numeric - cols_obj)\n\nfor x in cols_category:\n    data[x] = data[x].astype('category')","4fbd63f6":"data.describe().transpose()","d444256a":"# Let's construct a function that shows the summary and density distribution of a numerical columns\n\ndef summary(x):\n    x_min = data[x].min()\n    x_max = data[x].max()\n    Q1 = data[x].quantile(0.25)\n    Q2 = data[x].quantile(0.50)\n    Q3 = data[x].quantile(0.75)\n    x_mean = data[x].mean()\n    print(f'6 Point Summary of {x.capitalize()} Attribute:\\n'\n          f'{x.capitalize()}(min)   : {x_min}\\n'\n          f'Q1                      : {Q1}\\n'\n          f'Q2(Median)              : {Q2}\\n'\n          f'Q3                      : {Q3}\\n'\n          f'{x.capitalize()}(max)   : {x_max}\\n'\n          f'{x.capitalize()}(mean)  : {round(x_mean)}')\n\n    fig = plt.figure(figsize=(15, 10))\n    plt.subplots_adjust(hspace = 0.6)\n    sns.set_palette('pastel')\n    \n    plt.subplot(221)\n    ax1 = sns.distplot(data[x], color = 'r')\n    plt.title(f'{x.capitalize()} Density Distribution')\n    \n    plt.subplot(222)\n    ax2 = sns.violinplot(x = data[x], palette = 'Accent', split = True)\n    plt.title(f'{x.capitalize()} Violinplot')\n    \n    plt.subplot(223)\n    ax2 = sns.boxplot(x=data[x], palette = 'cool', width=0.7, linewidth=0.6)\n    plt.title(f'{x.capitalize()} Boxplot')\n    \n    plt.subplot(224)\n    ax3 = sns.kdeplot(data[x], cumulative=True)\n    plt.title(f'{x.capitalize()} Cumulative Density Distribution')\n    \n    plt.show()","85ed0dbb":"#Summary Age\nsummary('Age')","ea51680c":"#Summary EstimatedSalary\nsummary('EstimatedSalary')","747b80ea":"# Create a function that returns a Pie chart for the categorical variables:\ndef cat_view(country):\n    \"\"\"\n    Function to create a Bar chart and a Pie chart for categorical variables.\n    \"\"\"\n    from matplotlib import cm\n    color1 = cm.inferno(np.linspace(.4, .8, 30))\n    color2 = cm.viridis(np.linspace(.4, .8, 30))\n    \n    fig, ax = plt.subplots(2, 2, figsize=(15, 7))\n    explode = (0.1, 0)\n    \n    #Creating a country dataframe\n    country_df = data[data['Geography'] == country]\n\n    \"\"\"\n    Draw Gender Pie Chart on first subplot.\n    \"\"\"    \n    gndr = country_df.groupby('Gender').size()\n\n    gndr_mydata_values = gndr.values.tolist()\n    gndr_mydata_index = gndr.index.tolist()\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax[0,0].pie(gndr_mydata_values, autopct=lambda pct: func(pct, gndr_mydata_values), textprops=dict(color=\"w\"), explode=explode)\n    ax[0,0].legend(wedges, gndr_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax[0,0].set_title(f'{country.capitalize()} Gender Distribution')\n    \n    \n    \"\"\"\n    Draw Has Credit Card Pie Chart on second subplot.\n    \"\"\"    \n    cc = country_df.groupby('HasCrCard').size()\n\n    cc_mydata_values = cc.values.tolist()\n    #cc_mydata_index = cc.index.tolist()\n    cc_mydata_index = ['no','yes']\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax[0,1].pie(cc_mydata_values, autopct=lambda pct: func(pct, cc_mydata_values), textprops=dict(color=\"w\"),explode=explode)\n    ax[0,1].legend(wedges, cc_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax[0,1].set_title(f'{country.capitalize()} Credit Card Ownership Distribution')    \n\n    \n    \"\"\"\n    Draw Is Active Member Pie Chart on third subplot.\n    \"\"\"    \n    am = country_df.groupby('IsActiveMember').size()\n\n    am_mydata_values = am.values.tolist()\n    #am_mydata_index = am.index.tolist()\n    am_mydata_index = ['no','yes']\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax[1,0].pie(am_mydata_values, autopct=lambda pct: func(pct, am_mydata_values), textprops=dict(color=\"w\"),explode=explode)\n    ax[1,0].legend(wedges, am_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax[1,0].set_title(f'{country.capitalize()} Active Membership Distribution')    \n    \n\n    \"\"\"\n    Draw Member Exited Pie Chart on fourth subplot.\n    \"\"\"    \n    ex = country_df.groupby('Exited').size()\n\n    ex_mydata_values = ex.values.tolist()\n    #ex_mydata_index = ex.index.tolist()\n    ex_mydata_index = ['no','yes']\n    \n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax[1,1].pie(ex_mydata_values, autopct=lambda pct: func(pct, ex_mydata_values), textprops=dict(color=\"w\"),explode=explode)\n    ax[1,1].legend(wedges, ex_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax[1,1].set_title(f'{country.capitalize()} Member Exited Distribution')    \n    \n    \n\n    fig.tight_layout()\n    plt.show()","abefbbdc":"#Category Column Analysis - France\ncat_view('France')","a9f9e70a":"#Category Column Analysis - Germany\ncat_view('Germany')","6e77911d":"#Category Column Analysis - Spain\ncat_view('Spain')","14bbd1be":"# Create a function to categorize the credit score\ndef CreditScore_Cat(score):\n    if 300 <= score <= 629:\n        return 'bad'\n    elif 630 <= score <= 689:\n        return 'fair'\n    elif 690 <= score <= 719:\n        return 'good'\n    else:\n        return 'excellent'\n\ndata['CreditScore_Cat'] = data['CreditScore'].apply(CreditScore_Cat)\n","f41c0ed5":"def creditScore_Viz():\n    \"\"\"\n    Function to create Pie chart for Credit Score categorical variables.\n    \"\"\"\n    plt.figure(figsize=(14, 9))\n    explode = (0.1,0.1,0.1,0.1)\n    colors = ['#ff9999','#66b3ff','#618739','#ffcc99']\n    \n    # Create 2x2 sub plots\n    gs = gridspec.GridSpec(2, 2)\n    \n    #Creating a country dataframe\n    cs_fr_df = data[data['Geography'] == 'France']\n    cs_gr_df = data[data['Geography'] == 'Germany']\n    cs_sp_df = data[data['Geography'] == 'Spain']\n    \n    \n    \"\"\"\n    Draw France Pie Chart on first subplot.\n    \"\"\"    \n    \n    ax = plt.subplot(gs[0, 0]) # row 0, col 0\n\n    \n    cs_fr = cs_fr_df.groupby('CreditScore_Cat').size()\n\n    cs_fr_mydata_values = cs_fr.values.tolist()\n    cs_fr_mydata_index = cs_fr.index.tolist()\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax.pie(cs_fr_mydata_values, autopct=lambda pct: func(pct, cs_fr_mydata_values), textprops=dict(color=\"w\"),explode=explode, \n                                      colors=colors,shadow=True)\n    ax.legend(wedges, cs_fr_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax.set_title('France Credit Score Distribution', fontsize=14)\n    \n    \n    \"\"\"\n    Draw Germany Pie Chart on first subplot.\n    \"\"\"    \n    ax = plt.subplot(gs[0, 1]) # row 0, col 0\n    \n    cs_gr = cs_gr_df.groupby('CreditScore_Cat').size()\n\n    cs_gr_mydata_values = cs_gr.values.tolist()\n    cs_gr_mydata_index = cs_gr.index.tolist()\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax.pie(cs_gr_mydata_values, autopct=lambda pct: func(pct, cs_gr_mydata_values), textprops=dict(color=\"w\"),explode=explode, \n                                      colors=colors,shadow=True)\n    ax.legend(wedges, cs_gr_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax.set_title('Germany Credit Score Distribution', fontsize=14)  \n        \n    \n    \"\"\"\n    Draw Spain Pie Chart on first subplot.\n    \"\"\"    \n    ax = plt.subplot(gs[1, :])\n    \n    cs_sp = cs_sp_df.groupby('CreditScore_Cat').size()\n\n    cs_sp_mydata_values = cs_sp.values.tolist()\n    cs_sp_mydata_index = cs_sp.index.tolist()\n\n    def func(pct, allvals):\n        absolute = int(pct\/100.*np.sum(allvals))\n        return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n    wedges, texts, autotexts = ax.pie(cs_sp_mydata_values, autopct=lambda pct: func(pct, cs_sp_mydata_values), textprops=dict(color=\"w\"),explode=explode, \n                                      colors=colors,shadow=True)\n    ax.legend(wedges, cs_sp_mydata_index,title=\"Index\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n    plt.setp(autotexts, size=12, weight=\"bold\")\n    ax.set_title('Spain Credit Score Distribution', fontsize=14)       \n       \n    plt.tight_layout()\n    plt.show()","4dbf3517":"#Credit Score Category Visualisation Per Country\ncreditScore_Viz()","4711a484":"#Taking a Backup\ndata_backup = data.copy()","74881cb9":"#add a new Age Group Column\nage_cat = pd.cut(data.Age,bins=[10,31,36,44,60,95],labels=['18-31_Grp','32-36_Grp','37-44_Grp','45-60_Grp','61-95_Grp'])\ndata.insert(13,'Age_Groups',age_cat)","690515bb":"# Create a function that returns a Bar char for the categorical variables:\ndef BivAnalysis1(country):\n    \"\"\"\n    Function to create a Bar chart for numerical variables.\n    \"\"\"\n    color1 = cm.inferno(np.linspace(.4, .8, 30))\n    color2 = cm.viridis(np.linspace(.4, .8, 30))\n    \n    fig, ax = plt.subplots(2, 2, figsize=(20, 12))\n        \n    #Creating a country dataframe\n    country_df = data[data['Geography'] == country]\n\n    \"\"\"\n    Draw Gender vs Age Group vs Tenure Bar Chart on first subplot.\n    \"\"\"    \n    df1 = pd.pivot_table(country_df, index = ['Age_Groups'], columns = ['Gender'], values = ['Tenure'], aggfunc = np.mean)\n    \n    labels1 = df1.index.tolist()\n    female1 = df1.values[:, 0].tolist()\n    male1 = df1.values[:, 1].tolist()\n    \n    l1 = np.arange(len(labels1))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects11 = ax[0,0].bar(l1 - width\/2, female1, width, label='Female', color = color1)\n    rects12 = ax[0,0].bar(l1 + width\/2, male1, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[0,0].set_ylabel('Tenure')\n    ax[0,0].set_title('Age Groups v\/s Avg. Tenure Bar Graph')\n    ax[0,0].set_xticks(l1)\n    ax[0,0].set_xticklabels(labels1)\n    ax[0,0].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[0,0].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects11)\n    autolabel(rects12)\n    \n    \n    \"\"\"\n    Draw Gender vs Age Group vs Num. of Products Bar Chart on second subplot.\n    \"\"\"    \n    df2 = pd.pivot_table(country_df, index = ['Age_Groups'], columns = ['Gender'], values = ['NumOfProducts'], aggfunc = np.mean)\n    \n    labels2 = df2.index.tolist()\n    female2 = df2.values[:, 0].tolist()\n    male2 = df2.values[:, 1].tolist()\n    \n    l2 = np.arange(len(labels2))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects21 = ax[0,1].bar(l2 - width\/2, female2, width, label='Female', color = color1)\n    rects22 = ax[0,1].bar(l2 + width\/2, male2, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[0,1].set_ylabel('Number of Products')\n    ax[0,1].set_title('Age Groups v\/s Avg. Num of Products Bar Graph')\n    ax[0,1].set_xticks(l2)\n    ax[0,1].set_xticklabels(labels2)\n    ax[0,1].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[0,1].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects21)\n    autolabel(rects22)   \n\n    \n    \"\"\"\n    Draw Gender vs Age Group vs Balance Bar Chart on third subplot.\n    \"\"\"    \n    df3 = pd.pivot_table(country_df, index = ['Age_Groups'], columns = ['Gender'], values = ['Balance'], aggfunc = np.mean)\n    \n    labels3 = df3.index.tolist()\n    female3 = df3.values[:, 0].tolist()\n    male3 = df3.values[:, 1].tolist()\n    \n    l3 = np.arange(len(labels3))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects31 = ax[1,0].bar(l3 - width\/2, female3, width, label='Female', color = color1)\n    rects32 = ax[1,0].bar(l3 + width\/2, male3, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[1,0].set_ylabel('Balance')\n    ax[1,0].set_title('Age Groups v\/s Avg. Balance Bar Graph')\n    ax[1,0].set_xticks(l3)\n    ax[1,0].set_xticklabels(labels3)\n    ax[1,0].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[1,0].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects31)\n    autolabel(rects32)  \n    \n    \n\n    \"\"\"\n    Draw Gender vs Age Group vs Estimated Salary Bar Chart on fourth subplot.\n    \"\"\"    \n    df4 = pd.pivot_table(country_df, index = ['Age_Groups'], columns = ['Gender'], values = ['EstimatedSalary'], aggfunc = np.mean)\n    \n    labels4 = df4.index.tolist()\n    female4 = df4.values[:, 0].tolist()\n    male4 = df4.values[:, 1].tolist()\n    \n    l4 = np.arange(len(labels4))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects41 = ax[1,1].bar(l4 - width\/2, female4, width, label='Female', color = color1)\n    rects42 = ax[1,1].bar(l4 + width\/2, male4, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[1,1].set_ylabel('Estimated Salary')\n    ax[1,1].set_title('Age Groups v\/s Avg. Estimated Salary Bar Graph')\n    ax[1,1].set_xticks(l4)\n    ax[1,1].set_xticklabels(labels4)\n    ax[1,1].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[1,1].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset pixels\",fontsize = 'small',\n                           ha='center', va='bottom', color ='white')\n\n    autolabel(rects41)\n    autolabel(rects42)    \n    \n    fig.tight_layout(pad = 2.5)\n    plt.show()","6c0aae06":"#Analysis of French Customers\nBivAnalysis1('France')","d10d1129":"#Analysis of German Customers\nBivAnalysis1('Germany')","d01def30":"#Analysis of Spanish Customers\nBivAnalysis1('Spain')","699d76dd":"# Create a function that returns a Bar char for the categorical variables:\ndef BivAnalysis2(country):\n    \"\"\"\n    Function to create a Bar chart for numerical variables.\n    \"\"\"\n    color1 = cm.inferno(np.linspace(.4, .8, 30))\n    color2 = cm.viridis(np.linspace(.4, .8, 30))\n    \n    fig, ax = plt.subplots(2, 2, figsize=(20, 12))\n        \n    #Creating a country dataframe\n    country_df = data[data['Geography'] == country]\n\n    \"\"\"\n    Draw Gender vs Credit Score vs Tenure Bar Chart on first subplot.\n    \"\"\"    \n    df1 = pd.pivot_table(country_df, index = ['CreditScore_Cat'], columns = ['Gender'], values = ['Tenure'], aggfunc = np.mean)\n    \n    labels1 = df1.index.tolist()\n    female1 = df1.values[:, 0].tolist()\n    male1 = df1.values[:, 1].tolist()\n    \n    l1 = np.arange(len(labels1))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects11 = ax[0,0].bar(l1 - width\/2, female1, width, label='Female', color = color1)\n    rects12 = ax[0,0].bar(l1 + width\/2, male1, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[0,0].set_ylabel('Tenure')\n    ax[0,0].set_title('Credit Scores  v\/s Avg. Tenure Bar Graph')\n    ax[0,0].set_xticks(l1)\n    ax[0,0].set_xticklabels(labels1)\n    ax[0,0].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[0,0].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects11)\n    autolabel(rects12)\n    \n    \n    \"\"\"\n    Draw Gender vs Credit Score vs Num. of Products Bar Chart on second subplot.\n    \"\"\"    \n    df2 = pd.pivot_table(country_df, index = ['CreditScore_Cat'], columns = ['Gender'], values = ['NumOfProducts'], aggfunc = np.mean)\n    \n    labels2 = df2.index.tolist()\n    female2 = df2.values[:, 0].tolist()\n    male2 = df2.values[:, 1].tolist()\n    \n    l2 = np.arange(len(labels2))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects21 = ax[0,1].bar(l2 - width\/2, female2, width, label='Female', color = color1)\n    rects22 = ax[0,1].bar(l2 + width\/2, male2, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[0,1].set_ylabel('Number of Products')\n    ax[0,1].set_title('Credit Score v\/s Avg. Num of Products Bar Graph')\n    ax[0,1].set_xticks(l2)\n    ax[0,1].set_xticklabels(labels2)\n    ax[0,1].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[0,1].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects21)\n    autolabel(rects22)   \n\n    \n    \"\"\"\n    Draw Gender vs Credit Score vs Balance Bar Chart on third subplot.\n    \"\"\"    \n    df3 = pd.pivot_table(country_df, index = ['CreditScore_Cat'], columns = ['Gender'], values = ['Balance'], aggfunc = np.mean)\n    \n    labels3 = df3.index.tolist()\n    female3 = df3.values[:, 0].tolist()\n    male3 = df3.values[:, 1].tolist()\n    \n    l3 = np.arange(len(labels3))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects31 = ax[1,0].bar(l3 - width\/2, female3, width, label='Female', color = color1)\n    rects32 = ax[1,0].bar(l3 + width\/2, male3, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[1,0].set_ylabel('Balance')\n    ax[1,0].set_title('Credit Score v\/s Avg. Balance Bar Graph')\n    ax[1,0].set_xticks(l3)\n    ax[1,0].set_xticklabels(labels3)\n    ax[1,0].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[1,0].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset points\",fontsize = 'small',\n                           ha='center', va='bottom',color ='white')\n\n    autolabel(rects31)\n    autolabel(rects32)  \n    \n    \n\n    \"\"\"\n    Draw Gender vs Credit Score vs Estimated Salary Bar Chart on fourth subplot.\n    \"\"\"    \n    df4 = pd.pivot_table(country_df, index = ['CreditScore_Cat'], columns = ['Gender'], values = ['EstimatedSalary'], aggfunc = np.mean)\n    \n    labels4 = df4.index.tolist()\n    female4 = df4.values[:, 0].tolist()\n    male4 = df4.values[:, 1].tolist()\n    \n    l4 = np.arange(len(labels4))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    rects41 = ax[1,1].bar(l4 - width\/2, female4, width, label='Female', color = color1)\n    rects42 = ax[1,1].bar(l4 + width\/2, male4, width, label='Male', color = color2)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax[1,1].set_ylabel('Estimated Salary')\n    ax[1,1].set_title('Credit Score v\/s Avg. Estimated Salary Bar Graph')\n    ax[1,1].set_xticks(l4)\n    ax[1,1].set_xticklabels(labels4)\n    ax[1,1].legend()\n    \n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax[1,1].annotate('{:.1f}'.format(height),xy=(rect.get_x() + rect.get_width() \/ 2, height),xytext=(0, -50), textcoords=\"offset pixels\",fontsize = 'small',\n                           ha='center', va='bottom', color ='white')\n\n    autolabel(rects41)\n    autolabel(rects42)    \n    \n    fig.tight_layout(pad = 2.5)\n    plt.show()","ccf77c3a":"#Analysis of French Customers\nBivAnalysis2('France')","a03324da":"#Analysis of French Customers\nBivAnalysis2('Germany')","2cfc2ded":"#Analysis of French Customers\nBivAnalysis2('Spain')","53896c54":"**Analysis:**\n* The Estimated Salary is uniformly spread between 12 & 200000","cf7f9a63":"**Analysis:**\n* There are more Male Spanish Customers than female\n* Majority of the Spanish customers own credit card\n* Sightly more than 50% of Spanish customers are active members\n* Majority of the Spanish customers have not exited","ddfce59e":"**Analysis:**\n* Majority of French, German & Spanish customers have BAD credit score\n* 34.7% of French customers have Fair - Good credit scores\n* 33.4% of German customers have Fair - Good credit scores\n* 35.4% of Spanish customers have Fair - Good credit scores","9fa98b6c":"### Credit Score Analysis & Visualisation","9ad6fac1":"### Libraries & Data Load","17918656":"### Data Exploration & Preparation","562f0210":"**Analysis:**\n* There are more French Male customers than Female\n* Majority of the French customers owns a credit card\n* More than 50% of France customers are Active Members\n* Majority of the French customers have not exited","b57be9d3":"### Bivariate Analysis - Numerical Columns [per Country]\n\nThe analysis of Gender - Age & Tenure \/ Num of Products \/ Balance \/ Estimated Salary\n","db943057":"### Univariate Analysis - Numerical Columns","b7f36a9c":"### Bivariate Analysis - Category Columns [per Country]","7b04a559":"### Univariate Analysis - Categorical Columns  [per Country]","e1fa6929":"**Analysis:**\n* Slightly more than 50% of German customers are Male\n* Majority of German customers owns a credit card\n* 50% of German customers are 'not' an active member\n* Majority of German customers have 'not' exited.","2482271c":"**The analysis of Gender - Credit Score & Tenure \/ Num of Products \/ Balance \/ Estimated Salary**","6574f728":"**Analysis:**\n* The Age is slightly skewed to left with majority between 20 - 40 years \n* There are less people over 60 years\n"}}