{"cell_type":{"f319c009":"code","b25b3f6c":"code","8207e748":"code","224ca863":"code","cec231b5":"markdown"},"source":{"f319c009":"import tensorflow as tf\nfrom tensorflow import keras","b25b3f6c":"class LayerNormalization(keras.layers.Layer):\n    def __init__(self, eps=0.001, **kwargs):\n        super().__init__(**kwargs)\n        self.eps = eps\n        \n    \n    def build(self, batch_input_shape):\n        self.alpha = self.add_weight(\n            name=\"alpha\", \n            shape=batch_input_shape[-1:],\n            dtype=tf.float32,\n            initializer=\"ones\")\n        self.beta = self.add_weight(\n            name=\"beta\",\n            shape=batch_input_shape[-1:],\n            dtype=tf.float32,\n            initializer=\"zeros\")\n        super().build(batch_input_shape)\n    \n    def call(self, X):\n        mean, variance = tf.nn.moments(X, axes=[-1], keepdims=True)\n        return self.alpha * (X - mean) \/ (tf.sqrt(variance + self.eps)) + self.beta\n    \n    def compute_output_shape(self, batch_input_shape):\n        return batch_input_shape\n\n    def get_config(self):\n        base_config = super().get_config()\n        return {**base_config, \"eps\": self.eps}","8207e748":"from sklearn.datasets import fetch_california_housing\nfrom sklearn.model_selection import train_test_split\n\nhousing = fetch_california_housing()\nX_train_full, X_test, y_train_full, y_test = train_test_split(\n    housing.data, housing.target.reshape(-1, 1), random_state=42)\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X_train_full, y_train_full, random_state=42)","224ca863":"import numpy as np\n\nX = X_train.astype(np.float32)\n\ncustom_layer_norm = LayerNormalization()\nkeras_layer_norm = keras.layers.LayerNormalization()\n\ntf.reduce_mean(keras.losses.mean_absolute_error(\n    keras_layer_norm(X), custom_layer_norm(X)))","cec231b5":"### How to Build a Layer Normalization using custom layers with Keras subclassing"}}