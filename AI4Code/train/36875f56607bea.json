{"cell_type":{"f0d793a0":"code","5dacbd99":"code","24554dfe":"code","a8aa7cde":"code","340981a6":"code","ca29e830":"code","84b5617f":"markdown"},"source":{"f0d793a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5dacbd99":"test=pd.read_csv('..\/input\/tweet-sentiment-extraction\/test.csv')\nsubmission=pd.read_csv('..\/input\/tweet-sentiment-extraction\/sample_submission.csv')","24554dfe":"import nltk\nimport re\nimport string\nimport heapq\nnltk.download(\"stopwords\")\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom nltk.corpus import stopwords \n\ntest_subset=test['text']\nsentiment= test['sentiment']\n\nsid = SentimentIntensityAnalyzer()\nstop_words = set(stopwords.words('english')) \n\nword_list=[]\nsen_list=[]\nk=0\nno_of_elem=1\nfor word in test_subset:\n    #Removing URL\n    word = re.sub('http[s]?:\/\/\\S+', '', word)\n    split_text= word.split()\n    split_text = [w for w in split_text if not w in stop_words]\n    score_list=[]\n  \n    if sentiment[k]=='positive':\n        for w in split_text:\n            score=sid.polarity_scores(w)['compound']\n            score_list.append(score)\n        for i in [x for x in set(heapq.nlargest(no_of_elem,score_list))]:\n            word_list.append(split_text[score_list.index(i)])\n        sen_list.append((\" \".join(word_list)).strip())\n        word_list.clear()\n                \n    elif sentiment[k]=='negative':\n        for w in split_text:\n            score=sid.polarity_scores(w)['compound']\n            score_list.append(score)\n        for i in [x for x in set(heapq.nsmallest(no_of_elem,score_list))]:\n            word_list.append(split_text[score_list.index(i)])\n        sen_list.append((\" \".join(word_list)).strip())\n        word_list.clear()\n      \n    else:\n        sen_list.append((word).strip())\n    k=k+1","a8aa7cde":"submission['selected_text'] = sen_list","340981a6":"submission.tail(5)","ca29e830":"submission.to_csv('submission.csv', index=False)","84b5617f":"Hello People .....\n\nHonestly this problem statement is quite unique which needs to addressed with much more complexity instead of a rule based lexical approach... but still is just a start and  here is small presentation getting what we can through rules based approach !!!\n\n\nI hope u like it !!\n\n**Up-vote if it helped you :)**"}}