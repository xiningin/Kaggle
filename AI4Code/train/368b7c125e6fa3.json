{"cell_type":{"d29327a1":"code","218d1e24":"code","cef29903":"code","ab7f1d19":"code","fd79f805":"code","4efc9d9c":"code","7c4173aa":"code","d4c7f9a0":"code","9159f1f7":"code","3951717e":"code","a1de523a":"code","0361c882":"code","91d5479d":"code","c4b8dc66":"code","7cf35e38":"code","b473a177":"code","a1389526":"code","40002f70":"code","b4e2ca1a":"code","60ef5a17":"code","e1bfb193":"code","715fc3c6":"code","272a8e2f":"code","3944c0d7":"code","b8aea212":"code","0ddacc54":"code","91ea1c0c":"code","50554fcf":"code","27ef2851":"code","3ddf3ab7":"code","8cbf984f":"code","d1916f14":"code","51d5f9b6":"code","cea78ffa":"code","e1c7e60f":"code","a477c80e":"code","2ede4875":"code","3152f695":"code","b9867f61":"code","a4b4899d":"code","33e0c955":"code","d9237e68":"code","7b48718b":"code","36bef4ff":"code","c3a4e7c6":"code","075d0c08":"code","2ae4a363":"code","85d6cbc6":"code","591f57b1":"code","16c2dcfa":"code","69f09529":"code","8113ece0":"code","f69b9baa":"code","60eb6b7f":"code","73f1ae4c":"code","08f15576":"code","c28b7bc9":"code","455d3067":"code","5cb865c0":"code","9bd476f2":"code","0c772f72":"code","1f62614a":"code","f70d2f63":"code","9b357b1a":"code","5d8c298f":"code","393fc64b":"code","6a760f76":"code","872da52c":"code","332e1143":"markdown","6702ea14":"markdown","0f526e0a":"markdown","b43199dd":"markdown","47180a27":"markdown","fea0c169":"markdown","1ac522c2":"markdown","e2d245c8":"markdown","5170c2d5":"markdown","8f10de72":"markdown","46bb1e13":"markdown","60e24731":"markdown","e09c47d0":"markdown","e482a180":"markdown","f3ba1397":"markdown","a36694f8":"markdown","2a027632":"markdown","691478ef":"markdown","7f0100e4":"markdown","4cba136a":"markdown","aec8f4dd":"markdown","01338b6f":"markdown","ea14719c":"markdown","1bd8378f":"markdown","16bb3820":"markdown","9ca8ea63":"markdown","cecea8ff":"markdown"},"source":{"d29327a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.ent session","218d1e24":"#data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\n#data.head()","cef29903":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","ab7f1d19":"data.info()\n","fd79f805":"data.corr()\n# \n","4efc9d9c":"#correlation map\nf,ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n# correlation = ili\u015fki oran orant\u0131 gibi\n# annot = True demek kutucuklar\u0131n i\u00e7indeki say\u0131lar\u0131n g\u00f6z\u00fckmesi\n\n","7c4173aa":"data.head(10)\n# ilk 10","d4c7f9a0":"data.columns\n\n","9159f1f7":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\n# title = title of plot\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()\n","3951717e":"# scatter plor\n# x = attack y = defense\ndata.plot(kind = \"scatter\",x = \"Attack\",y = \"Defense\",alpha = 0.7,color = \"blue\")\n# plt.scatter(data.Attack,data.Defense) olarak basitcede yazabilirsin\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")","a1de523a":"# histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = \"hist\",bins = 50,figsize = (10,10))\n# bin = cubuk sayisi","0361c882":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = \"hist\",bins = 50)\nplt.clf()","91d5479d":"dictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","c4b8dc66":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","7cf35e38":"# In order to run all code you need to take comment this line\n#del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted\n\n","b473a177":"data = pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")","a1389526":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))\n\n# seriler vektor seklinde uzanan tek boyutlu yap\u0131lard\u0131 ve bunlar\u0131n metodlar\u0131 df metodlar\u0131ndan biraz farkli","40002f70":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","b4e2ca1a":"# filtering\nx = data[\"Defense\"]>200\ndata[x]\n# defans\u0131 200 den buyuk olan pokemonlar\u0131 verdi\n# data[x] ile sadece trulari yazdirdik\n ","60ef5a17":"# 2 - Filtering pandas with logical_and\n# There are only 2 pokemons who have higher defence value than 2oo and higher attack value than 100\ndata[np.logical_and(data['Defense']>200, data['Attack']>100 )] # attacki 100 den defansi 200 den b\u00fcy\u00fck olanlar\u0131 yazidrdi\n","e1bfb193":"# onceki kodun ayn\u0131s\u0131 l. logical_and yerine & kullanabiliriz\ndata[(data['Defense']>200) & (data['Attack']>100)]","715fc3c6":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print(\"i is\",i)\n    i +=1\nprint(i,\"is equal to 5\")   # equal esit demektir","272a8e2f":"# Stay in loop if condition( i is not equal 5) is true\nlis = [\"1,2,3,4,5\"]\nfor i in lis:\n    print(\"i is:\",i) # flow turkde oldugu gibi  degisken atadin\nprint(\"\")    \n\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictiona\ndictionary = {'spain' : 'madrid','usa':'new york'}\nfor key,value in dictionary.items():\n    print(key,\":\",value)\nprint(\"\")\n\n# For pandas we can achieve index and value\nfor index,value in data[[\"Attack\"]][0:1].iterrows():\n    print(index,\" : \",value)\n\n# iterrows attackin indexinide bulup yaz\u0131yor\n# [0:1] ilk eleman demek\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","3944c0d7":"# sayac ornegimmmm\na = 0\nwhile a != 34:\n    print(\"a\",a)\n    a +=1\nprint(a , \" a artik 34\")   \n\n","b8aea212":"# example of what we learn about\ndef tuble_ex():\n    \"\"\" return defined t tuple\"\"\" # ne yapt\u0131\u011f\u0131n\u0131 a\u00e7\u0131klayan str\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","0ddacc54":"# guess print what\nx = 2\ndef  f():\n    x = 3\n    return x\nprint(x)         # x = 2 global scope\nprint(f())       # x = 3 local scope","91ea1c0c":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x            # there is no local scope x\n    return y           \nprint(f())             # it uses global scope x\n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","50554fcf":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)\n# built in scoplar listesi","27ef2851":"# nested function nested = i\u00e7 i\u00e7e\ndef square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"add two local variable\"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","3ddf3ab7":"#DEFAULT and FLEXIBLE ARGUMENTS\n\n#Default argument example:\ndef f(a, b=1):\n  \"\"\" b = 1 is default argument\"\"\"\n\n\n#Flexible argument example:\ndef f(*args):\n \"\"\" *args can be one or more\"\"\"\n\n\ndef f(** kwargs)\n \"\"\" **kwargs is a dictionary\"\"\"","8cbf984f":"# default argument\ndef f(a,b = 1,c = 2):\n    y = a + b + c\n    return y\nprint(f(5))  # 5 in a degeri oldugunu anliyor\n# what if we want to change default arguments\nprint(f(5,4,3))","d1916f14":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\n\ndef f(**kwargs):\n    \"\"\"print key and value of dict\"\"\"\n    for key, value in kwargs.items():\n        print(key,\" \",value)\nf(country = \"spain\",capital = \"madrid\",population = 165895)\n\n# kwarg = dict\n","51d5f9b6":"# user defined function (long way)\ndef square(x):\n    return x**2\nprint(square(4))\n# lambda function (short way)\nsquare = lambda x: x**2 # where is x is name of argument \nprint(square(4))\ntot = lambda x,y,z:x+y+z # where x,y,z are names of arguments # tot = total\nprint(tot(1,2,3))\n# lambda max 3 argument alabilir","cea78ffa":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","e1c7e60f":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","a477c80e":"# zip example \nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z) # listeye \u00e7evirdik\nprint(z_list)\n    ","2ede4875":"un_zip = zip(*z_list) # unlist i\u00e7in ba\u015f\u0131na * koyduk\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list2)))","3152f695":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1] # list comprehension\nprint(num2)","b9867f61":"# Conditionals on iterable\nnum1 = [40,10,7]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1 ]\nprint(num2)","a4b4899d":"num1 = [42,67,89]\nnum2 = [i+20 if i == 42 else i+42 if i > 70 else i - 20 for i in num1]\nprint(num2)","33e0c955":"num1 = [12,3,5,67]\nnum2 = [i**2 if i > 10 else i + 20 if i > 6 else i == 3  for i in num1]\nprint(num2)","d9237e68":"# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","7b48718b":"data.head()  # head shows first 5 rows\n\n","36bef4ff":"# tail shows last 5 rows\ndata.tail()","c3a4e7c6":"# columns gives column names of features\ndata.columns","075d0c08":"# shape gives number of rows and columns in a tuble\ndata.shape","2ae4a363":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","85d6cbc6":"data.describe()","591f57b1":"print(data[\"Type 1\"].value_counts(dropna = False)) # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon\n# 800 pokeman i\u00e7inde --- tane ---- var demek","16c2dcfa":"1,2,3,4,200","69f09529":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","8113ece0":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Green line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')\n","f69b9baa":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head(5) # I only take 5 raws into new data\ndata_new","60eb6b7f":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame = data_new,id_vars = 'Name', value_vars = ['Attack','Defense'] )\nmelted","73f1ae4c":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name',columns = 'variable',values = 'value')\n# eski haline getirdik","08f15576":"# Firstly lest creates 2 data frame\ndata1 = data.head()\ndata2 = data.tail()  # son 5 \ndikey_birlestirilmis_data = pd.concat([data1,data2],axis = 0 , ignore_index = True)# axis = 0 : adds dataframes in row\ndikey_birlestirilmis_data","c28b7bc9":"data1 = data['Attack'].head()\ndata2 = data['Speed'].head()\nconc_data_col = pd.concat([data1,data2],axis = 1) # axis = 1 : adds dataframes in column\nconc_data_col","455d3067":"data.dtypes","5cb865c0":"# lets convert object(str) to categorical and int to float.\ndata['Type 1'] = data['Type 1'].astype('category')  # categorical yaptik\ndata[ \"Speed\" ] = data['Speed'].astype('float')  # speedi float yaptik","9bd476f2":"data.dtypes","0c772f72":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata.info()","1f62614a":"# lets check type 2\ndata['Type 2'].value_counts(dropna = False)\n# As you can see, there are 386 NAN value\n# dropna = False = eger NaN oge varsa onlarida kat\n","f70d2f63":"# Lets drop nan value\ndata1 = data # also we will use data to fill missing value so I assign it to data1 variable\ndata1['Type 2'].dropna(inplace = True )# inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","9b357b1a":"#  Lets check with assert statement\n# Assert statement:\nassert 1 == 1 # return nothing because it is true","5d8c298f":"assert  data['Type 2'].notnull().all() # returns nothing because we drop nan values","393fc64b":"data[\"Type 2\"].fillna('empty',inplace = True)\n","6a760f76":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","872da52c":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","332e1143":"* ANONYMOUS FUNCT\u0130ON\n* Like lambda function but it can take more than one arguments.\n\n* map(func,seq) : applies a function to all the items in a list","6702ea14":"EXPLORATORY DATA ANALYSIS\n* value_counts(): Frequency counts\n* outliers: ayk\u0131r\u0131 \/ the value that is considerably higher or lower from rest of the data\n\n* Lets say value at 75% is Q3 and value at 25% is Q1.\n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n* We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n","0f526e0a":"WHILE and FOR LOOPS\n1. We will learn the most basic while and for loops","b43199dd":"# MISSING DATA and TESTING WITH ASSERT\n* If we encounter with missing data, what we can do:\n\n* leave as is (oylece birak)\n* drop them with dropna() (cikar)\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n* Assert statement: check that you can turn on or turn off when you are done with your testing of the program","47180a27":"* 1.  [i + 1 for i in num1 ]: list of comprehension\n* 1. i +1: list comprehension syntax\n* 1. for i in num1: for loop syntax\n* 1. i: iterator\n* num1: iterable object","fea0c169":"1.  In this part, you learn:\n\n1. how to import csv file\n1. plotting line,scatter and histogram\n1. basic dictionary features\n1.  basic pandas features like filtering that is actually something always used and main for being data scientist\n1. While and for loops","1ac522c2":"* NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","e2d245c8":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","5170c2d5":"2. PYTHON DATA SCIENCE TOOLBOX\n\n\n1. USER DEFINED FUNCTION\n1. What do we need to know about functions:\n\n1. docstrings: documentation for functions. Example:\n1. for f():\n1. \"\"\"This is docstring for documentation of function f\"\"\"\n1. tuple: sequence of immutable python objects.\n1. cant modify values\n1. tuple uses paranthesis like tuble = (1,2,3)\n1. unpack tuple into several variables like a,b,c = tuple\n","8f10de72":"1. 3.CLEANING DATA\n1. \n\n* DIAGNOSE DATA for CLEANING\n* We need to diagnose and clean data before exploring.\n* Unclean data:\n* \n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n* \n* We will use head, tail, columns, shape and info methods to diagnose data","46bb1e13":"# DATA TYPES\n*There are 5 basic data types: object(string),boolean, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:\n\n* make dataframe smaller in memory\n* can be utilized for analysis especially for sklearn(we will learn later)","60e24731":"Before continuing with pandas, we need to learn logic, control flow and filtering.\n1. Comparison operator: ==, <, >, <=\n1. Boolean operators: and, or ,not\n1. Filtering pandas","e09c47d0":"dictler listelrden daha h\u0131zl\u0131","e482a180":"MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and most basic plots are line, scatter and histogram plots.\n\nLine plot is better when x axis is time.\nScatter is better when there is correlation between two variables\nHistogram is better when we need to see distribution of numerical data.\nCustomization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle\n\n","f3ba1397":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON !!!!!!\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","a36694f8":"In this part, you learn:\n\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data (Melting)\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert","2a027632":"DICTIONARY\n* Why do we need dictionary?*\n\n1. It has 'key' and 'value'\n2. Faster than lists\n3. What is key and value. Example:\n4. dictionary = {'spain' : 'madrid'}\n5. Key is spain.\n6. Values is madrid.\n\n**It's that easy.**\nLets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","691478ef":"PANDAS\nWhat do we need to know about pandas?\n\nCSV: comma - separated values\n","7f0100e4":"* > *zip(): zip lists - zip s\u0131k\u0131\u015ft\u0131rmak birle\u015ftirmek gibi","4cba136a":"1. INTRODUCTION TO PYTHON","aec8f4dd":"What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in middle of the sequence. In this case it would be 11. yani ortadaki sayi\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","01338b6f":"VISUAL EXPLORATORY DATA ANALYSIS\n\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","ea14719c":"* LAMBDA FUNCTION\n* Faster way of writing function","1bd8378f":"* SCOPE\n* What we need to know about scope:\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n\n* Lets make some basic examples","16bb3820":"# CONCATENATING DATA\n*  We can concatenate(birlestirme) two dataframe","9ca8ea63":"PIVOTING DATA\n* Reverse of melting.","cecea8ff":"TIDY DATA\n* We tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it."}}