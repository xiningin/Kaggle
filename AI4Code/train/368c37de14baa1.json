{"cell_type":{"a799b384":"code","fd349967":"code","4a6177ba":"code","7eb6fe60":"code","9193d456":"code","74c31731":"code","8ce914ad":"code","61089c40":"code","b799e673":"code","481b598f":"code","ce4604fc":"code","d4b2e7b5":"code","65558aa9":"code","f30dadef":"code","5c7fdf24":"code","b8defe97":"code","167e68b4":"code","f4809845":"code","a7edff15":"code","ebc90c58":"code","01cbfccb":"code","cc2b776b":"code","58752b1a":"code","7a0a878f":"code","651e90b9":"code","896b23c9":"code","bbdb5612":"code","6de51d38":"code","595b42c3":"code","2d95f998":"code","8661655c":"code","50cb9be2":"code","f7f8097e":"code","3fc757bc":"code","99107967":"code","0d998265":"code","ff278b38":"code","3bc2a76a":"code","c3292f76":"code","bd85d2f9":"code","83b100ff":"code","6785d697":"code","97386276":"code","9387a653":"code","88ee1257":"code","f78179bc":"code","aa530134":"code","0bf39d25":"code","296092c9":"code","ee10bb99":"code","e525797d":"code","05309ab7":"code","afbfe55c":"code","bfa0262f":"code","61b985ef":"code","ef82655d":"code","ef2ab82a":"code","4e1e007f":"code","3cc5e317":"code","d692f298":"code","27e7ce4b":"code","c7ac6ae1":"code","cac0d18b":"code","40869562":"code","b9949996":"code","c0e1b616":"code","e64f5965":"code","60f643fa":"code","e4d969e0":"code","a19029da":"code","c26074f7":"code","18b3e214":"code","fcda0b7d":"code","a73aa4bb":"code","0aba94a0":"code","5cf428fc":"code","87931f53":"code","568a8ce8":"code","e0531f5b":"code","26c93641":"code","bdebf049":"code","01067ec2":"code","43fe1628":"code","f50f3189":"code","38cb7ef4":"code","f7c5a63b":"code","3fd2f01e":"code","e3778b2c":"code","77eab746":"code","3aa1353c":"code","b6da4a13":"code","612da1dd":"code","107153bd":"code","b5306171":"code","97e640bc":"code","f40e22f9":"code","c5d60cf7":"code","074664f4":"code","9f170ae9":"code","9158b512":"code","7ae19845":"code","cdcbb6cc":"code","c4edf17a":"code","8e136b6a":"code","da5dfa24":"code","c6ca1882":"code","a6a3d4ee":"code","1771346c":"code","5e8fa184":"code","fb6e46c6":"code","8e62ae3b":"code","4accfdc7":"code","8ff028bd":"code","88264403":"code","e83b4f49":"code","7a3f84f6":"code","9365b17f":"code","b24e41d8":"code","2519a1d0":"code","bad4ef1d":"code","41d53c52":"code","2dbdf970":"code","52ef36cd":"code","8e38fe7a":"code","2d6885a6":"code","f34862d3":"code","e5a79ff8":"code","9c923ca3":"code","65bbf401":"markdown","ba92f349":"markdown","b544f575":"markdown","bce30ff5":"markdown","7b622515":"markdown","817a11bd":"markdown","9e0f01a9":"markdown","6424a53f":"markdown","2db05e3a":"markdown","273ade63":"markdown","b147b068":"markdown","034b4ee2":"markdown","97509952":"markdown","94e607c6":"markdown","f5287faf":"markdown","90c5e7ef":"markdown","5afc5a96":"markdown","4a8183ea":"markdown","5d4fccb6":"markdown","3ec97bf6":"markdown","4fe1f2b2":"markdown","74e043a8":"markdown","d0487353":"markdown","cc3d2ac6":"markdown","0a5d405d":"markdown","fd8de113":"markdown","e21fa79a":"markdown","c64f2034":"markdown","c1d2ec31":"markdown","8230696e":"markdown","d7171900":"markdown","4c85cc02":"markdown","3d170a26":"markdown","44cf064c":"markdown","46adb3a5":"markdown","771dce57":"markdown","4f9a6901":"markdown","48a802b3":"markdown","60b57c17":"markdown","9ae9c9ad":"markdown","c22e9a4c":"markdown","d0fad9e9":"markdown","79e45417":"markdown","d6cf5336":"markdown","c2fba5f5":"markdown","60fb1571":"markdown"},"source":{"a799b384":"import numpy as np\nimport pandas as pd\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fd349967":"from gensim.models.fasttext import FastText\nimport gensim","4a6177ba":"ft_model = FastText.load('\/kaggle\/input\/philosophy-ru-large\/ft_model.model')","7eb6fe60":"len(ft_model.wv.key_to_index)","9193d456":"print('\u0434\u0435\u043d\u044c\u0433\u0438' in ft_model.wv.key_to_index)","74c31731":"print(ft_model.wv['\u0434\u0435\u043d\u044c\u0433\u0438'])","8ce914ad":"print('\u043f\u043e\u0441\u0442\u0431\u044b\u0442\u0438\u0435' in ft_model.wv.key_to_index)","61089c40":"print('\u043f\u043e\u0441' in ft_model.wv.key_to_index)","b799e673":"ft_model.wv.most_similar(positive=['\u043a\u0430\u0440\u043d\u0430\u043f'], topn=20)","481b598f":"ft_model.wv.similarity(\"\u0431\u044b\u0442\u0438\u0435\", '\u0432\u0440\u0435\u043c\u044f')","ce4604fc":"ft_model.wv.n_similarity(['\u043f\u0430\u0440\u043c\u0435\u043d\u0438\u0434', '\u0431\u044b\u0442\u0438\u0435'], ['\u0434\u0435\u043c\u043e\u043a\u0440\u0438\u0442', '\u043d\u0435\u0431\u044b\u0442\u0438\u0435'])","d4b2e7b5":"ft_model.wv.doesnt_match([\"\u0431\u044b\u0442\u0438\u0435\", '\u0432\u0440\u0435\u043c\u044f', '\u0434\u0435\u043d\u044c\u0433\u0438'])","65558aa9":"ft_model.wv.most_similar(positive=['\u0432\u0440\u0435\u043c\u044f', '\u0434\u0435\u043d\u044c\u0433\u0438'], negative=[\"\u0431\u044b\u0442\u0438\u0435\"], topn=20)","f30dadef":"import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline","5c7fdf24":"words = [\n'\u043a\u043e\u043d\u0444\u0443\u0446\u0438\u0439',\n'\u0444\u0430\u043b\u0435\u0441',\n'\u0430\u043d\u0430\u043a\u0441\u0438\u043c\u0430\u043d\u0434\u0440',\n'\u0430\u043d\u0430\u043a\u0441\u0438\u043c\u0435\u043d',\n'\u043f\u0438\u0444\u0430\u0433\u043e\u0440',\n'\u043f\u0430\u0440\u043c\u0435\u043d\u0438\u0434',\n'\u0437\u0435\u043d\u043e\u043d',\n'\u043c\u0435\u043b\u0438\u0441\u0441',\n'\u0433\u0435\u0440\u0430\u043a\u043b\u0438\u0442',\n'\u0430\u043d\u0430\u043a\u0441\u0430\u0433\u043e\u0440',\n'\u043b\u0435\u0432\u043a\u0438\u043f\u043f',\n'\u0434\u0435\u043c\u043e\u043a\u0440\u0438\u0442',\n'\u044d\u043c\u043f\u0435\u0434\u043e\u043a\u043b',\n'\u043f\u0440\u043e\u0442\u0430\u0433\u043e\u0440',\n'\u0433\u043e\u0440\u0433\u0438\u0439',\n'\u043f\u0440\u043e\u0434\u0438\u043a',\n'\u043f\u043b\u0430\u0442\u043e\u043d',\n'\u0430\u0440\u0438\u0441\u0442\u043e\u0442\u0435\u043b\u044c',\n'\u0441\u0435\u043d\u0435\u043a\u0430',\n'\u0430\u0432\u0440\u0435\u043b\u0438\u0439',\n'\u044d\u043f\u0438\u043a\u0443\u0440',\n'\u0433\u0438\u043f\u0430\u0442\u0438\u044f',\n'\u043f\u043b\u043e\u0442\u0438\u043d',\n'\u043f\u043e\u0440\u0444\u0438\u0440\u0438\u0439',\n'\u044f\u043c\u0432\u043b\u0438\u0445',\n'\u043e\u0440\u0438\u0433\u0435\u043d',\n'\u0430\u0432\u0433\u0443\u0441\u0442\u0438\u043d',\n'\u0442\u0435\u0440\u0442\u0443\u043b\u043b\u0438\u0430\u043d',\n'\u043c\u0430\u0439\u043c\u043e\u043d\u0438\u0434',\n'\u0444\u0430\u0440\u0430\u0431\u0438',\n'\u0430\u0432\u0435\u0440\u0440\u043e\u044d\u0441',\n'\u0431\u043e\u044d\u0446\u0438\u0439',\n'\u0430\u0431\u0435\u043b\u044f\u0440',\n'\u0431\u043e\u043d\u0430\u0432\u0435\u043d\u0442\u0443\u0440\u0430',\n'\u0430\u043a\u0432\u0438\u043d\u0441\u043a\u0438\u0439',\n'\u043e\u043a\u043a\u0430\u043c',\n'\u044d\u043a\u0445\u0430\u0440\u0442',\n'\u0441\u043f\u0438\u043d\u043e\u0437\u0430',\n'\u043b\u0435\u0439\u0431\u043d\u0438\u0446',\n'\u0434\u0435\u043a\u0430\u0440\u0442',\n'\u0433\u0435\u0433\u0435\u043b\u044c',\n'\u0431\u044d\u043a\u043e\u043d',\n'\u043b\u043e\u043a\u043a',\n'\u043c\u0438\u043b\u043b\u044c',\n'\u0433\u0430\u043b\u0438\u043b\u0435\u0439',\n'\u0431\u0435\u0440\u043a\u043b\u0438',\n'\u0441\u043f\u0435\u043d\u0441\u0435\u0440',\n'\u0430\u0432\u0435\u043d\u0430\u0440\u0438\u0443\u0441',\n'\u043c\u0430\u0445',\n'\u0433\u0435\u043b\u044c\u0432\u0435\u0446\u0438\u0439',\n'\u0433\u043e\u043b\u044c\u0431\u0430\u0445',\n'\u0434\u0438\u0434\u0440\u043e',\n'\u043b\u0430\u043c\u0435\u0442\u0440\u0438',\n'\u043a\u0430\u043d\u0442',\n'\u0432\u043e\u043b\u044c\u0442\u0435\u0440',\n'\u043c\u043e\u043d\u0442\u0435\u0441\u043a\u044c\u0435',\n'\u0440\u0443\u0441\u0441\u043e',\n'\u043a\u0443\u043f\u0435\u0440',\n'\u044e\u043c',\n'\u0433\u043e\u0431\u0431\u0441',\n'\u0448\u0435\u043b\u043b\u0438\u043d\u0433',\n'\u0434\u0430\u0440\u0432\u0438\u043d',\n'\u0444\u0435\u0439\u0435\u0440\u0431\u0430\u0445',\n'\u0448\u043e\u043f\u0435\u043d\u0433\u0430\u0443\u044d\u0440',\n'\u043a\u043e\u043d\u0442',\n'\u043c\u0430\u0440\u043a\u0441',\n'\u044d\u043d\u0433\u0435\u043b\u044c\u0441',\n'\u043b\u0435\u043d\u0438\u043d',\n'\u0440\u0430\u0441\u0441\u0435\u043b',\n'\u0432\u0438\u0442\u0433\u0435\u043d\u0448\u0442\u0435\u0439\u043d',\n'\u043a\u0430\u0440\u043d\u0430\u043f',\n'\u043f\u043e\u043f\u043f\u0435\u0440',\n'\u043a\u0443\u043d',\n'\u0444\u0435\u0439\u0435\u0440\u0430\u0431\u0435\u043d\u0434',\n'\u043b\u0430\u043a\u0430\u0442\u043e\u0441',\n'\u0433\u0443\u0441\u0441\u0435\u0440\u043b\u044c',\n'\u0445\u0430\u0439\u0434\u0435\u0433\u0433\u0435\u0440',\n'\u0441\u0430\u0440\u0442\u0440',\n'\u043a\u0430\u043c\u044e',\n'\u044f\u0441\u043f\u0435\u0440\u0441',\n'\u043d\u0438\u0446\u0448\u0435',\n'\u0431\u0435\u0440\u0433\u0441\u043e\u043d',\n'\u0434\u0438\u043b\u044c\u0442\u0435\u0439',\n'\u0448\u043f\u0435\u043d\u0433\u043b\u0435\u0440',\n'\u043e\u0440\u0442\u0435\u0433\u0430',\n'\u0438\u043b\u044c\u0435\u043d\u043a\u043e\u0432',\n'\u0437\u0438\u043d\u043e\u0432\u044c\u0435\u0432',\n'\u043c\u0430\u043c\u0430\u0440\u0434\u0430\u0448\u0432\u0438\u043b\u0438',\n'\u0449\u0435\u0434\u0440\u043e\u0432\u0438\u0446\u043a\u0438\u0439',\n'\u043f\u0430\u0441\u043a\u0430\u043b\u044c',\n'\u043a\u044c\u0435\u0440\u043a\u0435\u0433\u043e\u0440',\n'\u0448\u0435\u0441\u0442\u043e\u0432',\n'\u0431\u0435\u0440\u0434\u044f\u0435\u0432',\n'\u0431\u0430\u0440\u0442',\n'\u0444\u0443\u043a\u043e',\n'\u0441\u043e\u0441\u0441\u044e\u0440',\n'\u043b\u0430\u043a\u0430\u043d',\n'\u0436\u0438\u0436\u0435\u043a',\n'\u0434\u0435\u043b\u0435\u0437',\n'\u0434\u0435\u0440\u0440\u0438\u0434\u0430',\n'\u0431\u043e\u0434\u0440\u0438\u0439\u044f\u0440',\n'\u043b\u0438\u043e\u0442\u0430\u0440',\n'\u0430\u0440\u0435\u043d\u0434\u0442',\n'\u0440\u044d\u043d\u0434',\n'\u0434\u0443\u0433\u0438\u043d',\n'\u0445\u0430\u0440\u043c\u0430\u043d',\n'\u043c\u0435\u0439\u044f\u0441\u0443',\n'\u043b\u0430\u0442\u0443\u0440']","b8defe97":"dct_names = dict.fromkeys(words)\nfor key in dct_names.keys():\n    dct_names[key] = dict.fromkeys(words);\n\nfor key1 in dct_names.keys():\n    for key2 in dct_names[key1].keys():\n        if key1 == key2:\n            dct_names[key1][key2] = '-';\n        else:\n            dct_names[key1][key2] = ft_model.wv.similarity(key1, key2)","167e68b4":"import networkx as nx","f4809845":"G_sim = nx.Graph()\nG_sim.add_nodes_from(words)\n\nfor key1 in dct_names.keys():\n    for key2 in dct_names[key1].keys():\n        if key1 != key2:\n            if dct_names[key1][key2] > 0.7:\n                G_sim.add_weighted_edges_from([(key1, key2, dct_names[key1][key2])])\n\ncolors = [i\/len(G_sim.nodes) for i in range(len(G_sim.nodes))]\n\nfig = plt.figure(figsize=(12, 12))\nnx.draw(\n    G_sim,\n    with_labels=True,\n    node_color=colors,\n    edge_color=['silver'] * len(G_sim.edges()),\n    cmap=plt.cm.jet,    \n    node_size=150,\n)","a7edff15":"dct_vls = dict.fromkeys(words)\nfor key in dct_vls.keys():\n    dct_vls[key] = dict.fromkeys(words)\n\nfor key1 in dct_vls.keys():\n    for key2 in dct_vls[key1].keys():\n        if key1 == key2:\n            dct_vls[key1][key2] = '-';\n        else:\n            dct_vls[key1][key2] = ft_model.wv.rank(key1, key2)","ebc90c58":"G_rank = nx.Graph()\nG_rank.add_nodes_from(words)\n\nfor key1 in dct_vls.keys():\n    for key2 in dct_vls[key1].keys():\n        if key1 != key2:\n            if dct_vls[key1][key2] < 50:\n                G_rank.add_weighted_edges_from([(key1, key2, 1\/dct_vls[key1][key2])])\n\ncolors = [i\/len(G_rank.nodes) for i in range(len(G_rank.nodes))]\n\nfig = plt.figure(figsize=(10, 10))\nnodes = nx.draw(\n    G_rank,\n    with_labels=True,\n    node_color=colors,\n    edge_color=['silver'] * len(G_rank.edges()),\n    cmap=plt.cm.jet,    \n    node_size=150,\n)","01cbfccb":"G = G_rank\n#G = G_sim","cc2b776b":"#G.remove_nodes_from(list(nx.isolates(G)))","58752b1a":"#G = G.subgraph(nx.shortest_path(G.to_undirected(),'\u0430\u043d\u0430\u043a\u0441\u0438\u043c\u0435\u043d'))","7a0a878f":"print(nx.info(G))","651e90b9":"nx.is_connected(G)","896b23c9":"nx.number_connected_components(G)","bbdb5612":"cliques = list(nx.find_cliques(G))","6de51d38":"clique_number = len(list(cliques))\nprint(clique_number)","595b42c3":"for clique in cliques:\n    print(clique)","2d95f998":"print(nx.ego_graph(G,'\u043b\u0435\u043d\u0438\u043d',radius=2).nodes())","8661655c":"nx.algorithms.clique.cliques_containing_node(G,\"\u043b\u0435\u043d\u0438\u043d\")","50cb9be2":"sorted_cliques = sorted(list(nx.find_cliques(G)),key=len)","f7f8097e":"max_clique_nodes = set()\n\nfor nodelist in sorted_cliques[-4:-1]:\n    for node in nodelist:\n        max_clique_nodes.add(node)","3fc757bc":"max_clique = G.subgraph(max_clique_nodes)","99107967":"print(nx.info(max_clique))","0d998265":"colors = [i\/len(max_clique.nodes) for i in range(len(max_clique.nodes))]\n\nfig = plt.figure(figsize=(10, 10))\nnodes = nx.draw(\n    max_clique,\n    with_labels=True,\n    node_color=colors,\n    edge_color=['silver'] * len(max_clique.edges()),\n    cmap=plt.cm.jet,    \n    node_size=150,\n)","ff278b38":"!pip install python-louvain","3bc2a76a":"from community import community_louvain\ncommunities =community_louvain.best_partition(G)","c3292f76":"community_id = [communities[node] for node in G.nodes()]\n\nfig = plt.figure(figsize=(10, 10))\nnx.draw(\n    G,\n    with_labels=True,\n    edge_color=['silver'] * len(G.edges()),\n    cmap=plt.cm.tab20,\n    node_color=community_id,\n    node_size=150,\n)","bd85d2f9":"G_sub = G.subgraph(nx.shortest_path(G.to_undirected(),'\u0430\u043d\u0430\u043a\u0441\u0438\u043c\u0435\u043d'))","83b100ff":"def community_layout(G_sub, partition):\n  \n    pos_communities = _position_communities(G_sub, partition, scale=3.)\n\n    pos_nodes = _position_nodes(G_sub, partition, scale=1.)\n\n    pos = dict()\n    for node in G_sub.nodes():\n        pos[node] = pos_communities[node] + pos_nodes[node]\n\n    return pos\n\ndef _position_communities(G_sub, partition, **kwargs):\n\n    between_community_edges = _find_between_community_edges(G_sub, partition)\n\n    communities = set(partition.values())\n    hypergraph = nx.DiGraph()\n    hypergraph.add_nodes_from(communities)\n    for (ci, cj), edges in between_community_edges.items():\n        hypergraph.add_edge(ci, cj, weight=len(edges))\n\n    pos_communities = nx.spring_layout(hypergraph, **kwargs)\n\n    pos = dict()\n    for node, community in partition.items():\n        pos[node] = pos_communities[community]\n\n    return pos\n\ndef _find_between_community_edges(G_sub, partition):\n\n    edges = dict()\n\n    for (ni, nj) in G_sub.edges():\n        ci = partition[ni]\n        cj = partition[nj]\n\n        if ci != cj:\n            try:\n                edges[(ci, cj)] += [(ni, nj)]\n            except KeyError:\n                edges[(ci, cj)] = [(ni, nj)]\n\n    return edges\n\ndef _position_nodes(G_sub, partition, **kwargs):\n    \n    communities = dict()\n    for node, community in partition.items():\n        try:\n            communities[community] += [node]\n        except KeyError:\n            communities[community] = [node]\n\n    pos = dict()\n    for ci, nodes in communities.items():\n        subgraph = G_sub.subgraph(nodes)\n        pos_subgraph = nx.spring_layout(subgraph, **kwargs)\n        pos.update(pos_subgraph)\n\n    return pos\n\ndef output():\n    from community import community_louvain\n\n    partition = community_louvain.best_partition(G_sub)\n    pos = community_layout(G_sub, partition)\n    fig = plt.figure(figsize=(10, 10))\n\n    nx.draw(G_sub, pos, \n    with_labels=True,\n    edge_color=['silver'] * len(G_sub.edges()),\n    cmap=plt.cm.tab20,    \n    node_size=150, node_color=list(partition.values())); plt.show()\n    return","6785d697":"output()","97386276":"community_list = pd.DataFrame(np.column_stack([G.nodes, community_id]), \n                               columns=['node', 'community'])\n\ncommunity_list.community = community_list.community.astype(int)","9387a653":"community_list.head(10)","88ee1257":"def eigenvector(G):\n    ev = nx.eigenvector_centrality(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(ev.keys()),\n        'eigenvector': list(ev.values())\n    })\n    return df.sort_values('eigenvector', ascending=False)","f78179bc":"eigenv = pd.DataFrame(eigenvector(G), columns=['node', 'eigenvector'])","aa530134":"eigenv.head(10)","0bf39d25":"def pr_summary(G):\n    pr = nx.pagerank(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(pr.keys()),\n        'centrality_pr': list(pr.values())\n    })\n    return df.sort_values('centrality_pr', ascending=False)","296092c9":"pr = pd.DataFrame(pr_summary(G), columns=['node', 'centrality_pr'])","ee10bb99":"pr.head()","e525797d":"def cc_summary(G):\n    cc = nx.closeness_centrality(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(cc.keys()),\n        'centrality_\u0441\u0441': list(cc.values())\n    })\n    return df.sort_values('centrality_\u0441\u0441', ascending=False)","05309ab7":"cc = pd.DataFrame(cc_summary(G), columns=['node', 'centrality_\u0441\u0441'])","afbfe55c":"cc.head()","bfa0262f":"def dc_summary(G):\n    dc = nx.degree_centrality(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(dc.keys()),\n        'centrality_dc': list(dc.values())\n    })\n    return df.sort_values('centrality_dc', ascending=False)","61b985ef":"dc = pd.DataFrame(dc_summary(G), columns=['node', 'centrality_dc'])","ef82655d":"dc.head()","ef2ab82a":"def bc_summary(G):\n    bc = nx.betweenness_centrality(G)\n    df = pd.DataFrame.from_dict({\n        'node': list(bc.keys()),\n        'centrality_bc': list(bc.values())\n    })\n    return df.sort_values('centrality_bc', ascending=False)","4e1e007f":"bc = pd.DataFrame(bc_summary(G), columns=['node', 'centrality_bc'])","3cc5e317":"bc.head()","d692f298":"def clustering(G):\n    cl = nx.clustering(G, weight='weight')\n    df = pd.DataFrame.from_dict({\n        'node': list(cl.keys()),\n        'weight_cl': list(cl.values())\n    })\n    return df.sort_values('weight_cl', ascending=False)","27e7ce4b":"cl = pd.DataFrame(clustering(G), columns=['node', 'weight_cl'])","c7ac6ae1":"cl.head()","cac0d18b":"from functools import reduce\n\ndfs = [community_list, eigenvector(G), cc_summary(G), dc_summary(G), bc_summary(G), pr_summary(G), clustering(G)]  \ndf_sum = reduce(lambda left,right: pd.merge(left,right,on='node'), dfs)","40869562":"df_sum.head()","b9949996":"corr = df_sum.corr()\ncorr.style.background_gradient(cmap='coolwarm')","c0e1b616":"e = list(G.edges())\n  \ndef triadic(e):\n    new_edges = []\n  \n    for i in e:\n        a, b = i\n  \n        for j in e:\n            x, y = j\n  \n            if i != j:\n                if a == x and (b, y) not in e and (y, b) not in e:\n                    new_edges.append((b, y))\n                if a == y and (b, x) not in e and (x, b) not in e:\n                    new_edges.append((b, x))\n                if b == x and (a, y) not in e and (y, a) not in e:\n                    new_edges.append((a, y))\n                if b == y and (a, x) not in e and (x, a) not in e:\n                    new_edges.append((a, x))\n  \n    return new_edges\n","e64f5965":"triadic = pd.DataFrame(triadic(e), columns=['node_1', 'node2'])","60f643fa":"triadic.head(10)","e4d969e0":"jaccard_coefficient = pd.DataFrame(nx.jaccard_coefficient(G), columns=['node_1', 'node2', 'jaccard_coefficient'])","a19029da":"jaccard_coefficient.sort_values(by = 'jaccard_coefficient', ascending = False).head(10)","c26074f7":"resource_allocation_index = pd.DataFrame(nx.resource_allocation_index(G), columns=['node_1', 'node2', 'resource_allocation_index'])","18b3e214":"resource_allocation_index.sort_values(by = 'resource_allocation_index', ascending = False).head(10)","fcda0b7d":"adamic_adar_index = pd.DataFrame(nx.adamic_adar_index(G), columns=['node_1', 'node2', 'adamic_adar_index'])","a73aa4bb":"adamic_adar_index.sort_values(by = 'adamic_adar_index', ascending = False).head(10)","0aba94a0":"preferential_attachment = pd.DataFrame(nx.preferential_attachment(G), columns=['node_1', 'node2', 'preferential_attachment'])","5cf428fc":"preferential_attachment.sort_values(by = 'preferential_attachment', ascending = False).head(10)","87931f53":"print(nx.shortest_path(G,source='\u043b\u0430\u043a\u0430\u0442\u043e\u0441',target='\u043a\u0430\u0440\u043d\u0430\u043f'))","568a8ce8":"print(nx.shortest_path(G,source='\u043b\u0430\u043a\u0430\u0442\u043e\u0441',target='\u043a\u0430\u0440\u043d\u0430\u043f', weight='weight'))","e0531f5b":"!pip install node2vec","26c93641":"from node2vec import Node2Vec\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n%matplotlib inline","bdebf049":"node2vec = Node2Vec(G, dimensions=300, walk_length=30, num_walks=200, workers=4)","01067ec2":"n2v_model = node2vec.fit(window=10, min_count=1, batch_words=4)","43fe1628":"n2v_model.wv.most_similar('\u043a\u0430\u0440\u043d\u0430\u043f')","f50f3189":"n2v_output = pd.DataFrame(n2v_model.wv.most_similar(positive=['\u043a\u0430\u0440\u043d\u0430\u043f'], topn=30), columns=['\u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f', '\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442'])","38cb7ef4":"import seaborn as sns\nsns.set_theme(style=\"ticks\", color_codes=True)","f7c5a63b":"g=sns.catplot(x='\u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f', y='\u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442', data=n2v_output)\ng.set_xticklabels(rotation=45)\ng.fig.set_size_inches(15,5)\nplt.title('\u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f, \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441')","3fd2f01e":"from node2vec.edges import HadamardEmbedder","e3778b2c":"edges_embs = HadamardEmbedder(keyed_vectors=n2v_model.wv)","77eab746":"edges_embs[('\u043a\u0430\u0440\u043d\u0430\u043f', '\u043b\u0430\u043a\u0430\u0442\u043e\u0441')]","3aa1353c":"edges_kv = edges_embs.as_keyed_vectors()","b6da4a13":"edges_kv.most_similar(str(('\u043a\u0430\u0440\u043d\u0430\u043f', '\u043b\u0430\u043a\u0430\u0442\u043e\u0441')))","612da1dd":"labels = []\ntokens = []\n\nfor word in n2v_model.wv.key_to_index:\n    tokens.append(n2v_model.wv[word])\n    labels.append(word)","107153bd":"tokens_norm = (tokens - np.mean(tokens))\/np.sqrt(np.var(tokens))","b5306171":"!pip install umap-learn","97e640bc":"import umap.umap_ as umap\n\nreducer = umap.UMAP(n_neighbors=15,\n                    min_dist=0.01,\n                    metric='euclidean',\n                    n_epochs=2000,\n                    random_state=23,\n                    verbose=True)","f40e22f9":"umap_embedding = reducer.fit_transform(tokens_norm)\numap_embedding.shape","c5d60cf7":"x = []\ny = []\nfor value in umap_embedding:\n    x.append(value[0])\n    y.append(value[1])\n    \nplt.figure(figsize=(12, 12)) \nfor i in range(len(x)):\n    plt.scatter(x[i],y[i])\n    #plt.annotate(labels[i],\n                  #xy = (x[i], y[i]),\n                  #xytext = (5, 2),\n                  #textcoords = 'offset points',\n                  #ha = 'right',\n                  #va = 'bottom')\nplt.show()","074664f4":"#!pip install --upgrade --user numpy","9f170ae9":"!pip install hdbscan --no-build-isolation --no-binary :all:","9158b512":"import hdbscan\n\nlabels_hdbscan = hdbscan.HDBSCAN(\nmin_samples=1,\nmin_cluster_size=2,\n).fit_predict(umap_embedding)","7ae19845":"clustered = (labels_hdbscan >= 0)\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 10), dpi=80)\nplt.scatter(umap_embedding[~clustered, 0],\n            umap_embedding[~clustered, 1],\n            c=(0.5, 0.5, 0.5),\n            s=10,\n            alpha=0.5)\nplt.scatter(umap_embedding[clustered, 0],\n            umap_embedding[clustered, 1],\n            c=(labels_hdbscan[clustered]),\n            s=20,\n            cmap='Spectral')","cdcbb6cc":"clustered_list = pd.DataFrame(np.column_stack([G.nodes, labels_hdbscan]), \n                               columns=['node', 'cluster'])","c4edf17a":"clustered_list.head(20)","8e136b6a":"clustered_list['cluster'].value_counts()","da5dfa24":"g = nx.Graph()\ng.add_nodes_from(words)\n\nfor key1 in dct_names.keys():\n    for key2 in dct_names[key1].keys():\n        if key1 != key2:\n            if dct_names[key1][key2] > 0:\n                g.add_weighted_edges_from([(key1, key2, dct_names[key1][key2])])","c6ca1882":"from community import community_louvain\ncommunities =community_louvain.best_partition(g)","a6a3d4ee":"community_id = [communities[node] for node in g.nodes()]\n\nfig = plt.figure(figsize=(10, 10))\nnx.draw(\n    g,\n    with_labels=True,\n    edge_color=['silver'] * len(G.edges()),\n    cmap=plt.cm.tab20,\n    node_color=community_id,\n    node_size=150,\n)","1771346c":"community_list = pd.DataFrame(np.column_stack([g.nodes, community_id]), \n                               columns=['node', 'community'])\n\ncommunity_list.community = community_list.community.astype(int)","5e8fa184":"df_target = community_list.copy()","fb6e46c6":"x = [(ft_model.wv[str(i)]) for i in df_target['node']]","8e62ae3b":"emb_df_untarget = pd.DataFrame(x, index = df_target['node'])","4accfdc7":"df_target.set_index('node', inplace=True)","8ff028bd":"emb_df_target = df_target.join(emb_df_untarget)","88264403":"df_train = emb_df_target","e83b4f49":"data_full = df_train.copy()\nX_data = data_full.drop('community', axis=1)\ny = data_full.community","7a3f84f6":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder","9365b17f":"label_encoder = LabelEncoder()\nlabel_encoder = label_encoder.fit(y)\nlabel_encoded_y = label_encoder.transform(y)\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X_data, label_encoded_y,test_size=test_size, random_state=seed)\nxgb = XGBClassifier(\n    max_depth=2,\n    gamma=2,\n    eta=0.8,\n    reg_alpha=0.5,\n    reg_lambda=0.5\n)\nxgb.fit(X_train, y_train)","b24e41d8":"predictions = xgb.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","2519a1d0":"pred_words = [\n\n    '\u0430\u0440\u0438\u0441\u0442\u043e\u0442\u0435\u043b\u044c',\n    '\u0441\u0442\u0430\u0433\u0438\u0440\u0430',\n    '\u043f\u043b\u0430\u0442\u043e\u043d',\n    '\u043b\u043e\u0433\u0438\u043a\u0430',\n    '\u0434\u0438\u0430\u043b\u043e\u0433\u0438',\n    '\u043d\u0430\u0443\u043a\u0438',\n    '\u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435',\n    '\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435',\n    '\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430',\n    '\u043c\u0435\u0442\u0430\u0444\u0438\u0437\u0438\u043a\u0430',\n    '\u0444\u0438\u0437\u0438\u043a\u0430',\n    '\u044d\u0442\u0438\u043a\u0430',\n    '\u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430',\n    '\u043f\u0440\u0438\u0447\u0438\u043d\u0430',\n    '\u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u043e',\n    '\u043c\u0430\u0442\u0435\u0440\u0438\u044f',\n    '\u043f\u0435\u0440\u0432\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442',\n    '\u0444\u043e\u0440\u043c\u0430',\n    '\u0432\u043e\u0437\u0434\u0443\u0445',\n    '\u0432\u043e\u0434\u0430',\n    '\u043e\u0433\u043e\u043d\u044c',\n    '\u0437\u0435\u043c\u043b\u044f',\n    '\u044d\u0444\u0438\u0440',\n    '\u043f\u0435\u0440\u0432\u043e\u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044c',\n    '\u0443\u043c',\n    '\u0431\u043e\u0433',\n    '\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f',\n    '\u0432\u0435\u0449\u044c',\n    '\u0446\u0435\u043b\u044c',\n    '\u0434\u0443\u0448\u0430',\n    '\u0447\u0435\u043b\u043e\u0432\u0435\u043a',\n    '\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435',\n    '\u0440\u0430\u0441\u0442\u0435\u043d\u0438\u0435',\n    '\u0431\u044b\u0442\u0438\u0435',\n    '\u043c\u044b\u0448\u043b\u0435\u043d\u0438\u0435',\n    '\u043f\u043e\u043d\u044f\u0442\u0438\u0435',\n    '\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435',\n    '\u0443\u043c\u043e\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435',\n    '\u0447\u0443\u0432\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435',\n    '\u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0435',\n    '\u0434\u0438\u0430\u043b\u0435\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435',\n    '\u0430\u043f\u043e\u0434\u0438\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435',\n    '\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435',\n    '\u043e\u043f\u044b\u0442',\n    '\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e\u0441\u0442\u044c',\n    '\u043e\u0449\u0443\u0449\u0435\u043d\u0438\u0435',\n    '\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043e',\n    '\u0444\u043e\u0440\u043c\u0430',\n    '\u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435',\n    '\u0441\u0435\u043c\u044c\u044f',\n    '\u0433\u043e\u0440\u043e\u0434',\n    '\u0441\u0447\u0430\u0441\u0442\u044c\u0435',\n    '\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e',\n    '\u0432\u0440\u0435\u043c\u044f',\n    '\u0441\u0443\u0431\u0441\u0442\u0430\u043d\u0446\u0438\u044f',\n    '\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f',\n    '\u043e\u0431\u044a\u0435\u043a\u0442',\n    '\u0447\u0430\u0441\u0442\u044c',\n    '\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435',\n    '\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435',\n    '\u0446\u0435\u043b\u043e\u0435',\n    '\u0442\u0435\u043f\u0435\u0440\u044c',\n    '\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435',\n    '\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435',\n    '\u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435',\n    '\u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435',\n    '\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435',\n    '\u0441\u0447\u0435\u0442',\n    '\u043f\u043e\u043a\u043e\u0439',\n    '\u043d\u0435\u043f\u043e\u0434\u0432\u0438\u0436\u043d\u043e\u0435',\n    '\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435',\n    '\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c'\n\n]","bad4ef1d":"x1 = [(ft_model.wv[str(i)]) for i in pred_words]","41d53c52":"len(x1)","2dbdf970":"emb_df = pd.DataFrame(x1, index = pred_words)","52ef36cd":"boosted_predictions = xgb.predict(emb_df.values)","8e38fe7a":"node = emb_df.index","2d6885a6":"pred_results = pd.DataFrame({'node': node, 'value_prediction': boosted_predictions})","f34862d3":"pred_results.value_prediction.value_counts()","e5a79ff8":"select_class = pred_results.loc[pred_results['value_prediction'] == 1]","9c923ca3":"select_class","65bbf401":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","ba92f349":"\u0418 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0441\u043b\u043e\u0432\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0435\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432.","b544f575":"\u0415\u0449\u0451 \u043e\u0434\u0438\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a: https:\/\/stackoverflow.com\/questions\/43541376\/how-to-draw-communities-with-networkx).\n\n\u0425\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u0434\u0433\u0440\u0430\u0444\u043e\u043c.","bce30ff5":"\u041a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UMAP \u0438 HDBSCAN.\n\n(\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: https:\/\/github.com\/Huguet57\/Information-Contrast)","7b622515":"\u0410 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043c\u0435\u0440\u0430\u043c\u0438 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438):","817a11bd":"# \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c \u043f\u043e \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0438\u0438","9e0f01a9":"Adamic Adar Index:","6424a53f":"## Centrality","2db05e3a":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","273ade63":"\u0411\u043b\u043e\u043a\u043d\u043e\u0442 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d \u0432 \u0441\u043e\u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u0435 \u0441 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u043c \u041c\u043e\u0440\u043e\u0437\u043e\u0432\u044b\u043c, \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0435\u043c\u0443 \u0441\u043f\u0430\u0441\u0438\u0431\u043e!","b147b068":"\u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0441\u043b\u043e\u0432.","034b4ee2":"\u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u0441\u043b\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432. \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \"positive=\" \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430, \u0430 \"negative=\" \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435.","97509952":"\u0414\u043b\u044f \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0435\u0439\u0434\u0436\u0440\u0430\u043d\u043a\u043e\u043c.","94e607c6":"\n\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u0441\u0435\u043c\u0438\u043d\u0430\u0440\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b - \u044d\u0442\u043e \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0441\u043a\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u044b. \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u0430\u043c\u0438 \u0438\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0445 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438.\n\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c [fasttext](https:\/\/radimrehurek.com\/gensim\/models\/fasttext.html), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0430 \u043d\u0430 `3 407` \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0441\u043a\u0438\u0445 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435. \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 (\u0442\u0435\u0440\u043c\u044b) \u0438\u0437\u0443\u0447\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438.\n\n\n","f5287faf":"## 2. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u0441\u043b\u043e\u0432","90c5e7ef":"\u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b.","5afc5a96":"\u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0430\u0434\u043e, \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u044f\u0442\u043d\u043e. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u0438 \u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0435\u0440\u0448\u0438\u043d, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0449\u0451 \u0442\u043e\u0447\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445. ","4a8183ea":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u043b\u043e\u0432.","5d4fccb6":"\u0422\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0448\u0438\u043d \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443, \u043a\u043e\u0433\u0434\u0430 \u0440\u0430\u043d\u0433 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442 \u0441\u043b\u043e\u0432\u0430 1 \u0434\u043e \u0441\u043b\u043e\u0432\u0430 2 \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c \u0432\u0441\u0435\u0445 \u0441\u043b\u043e\u0432 \u043e\u0442 \u0441\u043b\u043e\u0432\u0430 1. \u0422\u043e \u0435\u0441\u0442\u044c \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435: 1\/rank, \u0442\u0430\u043a \u043a\u0430\u043a \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 rank, \u0442\u0435\u043c \u0445\u0443\u0436\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e. \u0420\u0435\u0431\u0440\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f (rank < n).","3ec97bf6":"**\u041e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e, \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u043b\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e.**","4fe1f2b2":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c.","74e043a8":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445.","d0487353":"\u041c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0437\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0441\u043b\u043e\u0432\u0430, \u0430 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0435\u0441\u0430\u043c\u0438 \u0440\u0451\u0431\u0435\u0440. \u0420\u0435\u0431\u0440\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:","cc3d2ac6":"\u041c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430 \u043d\u0430 \u0432\u0437\u0430\u0438\u043c\u043d\u043e\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e:","0a5d405d":"\u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444.","fd8de113":"Resource Allocation Index:","e21fa79a":"\u0412 \u0446\u0435\u043b\u044f\u0445 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u043c\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438:","c64f2034":"# \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0442\u0435\u0440\u043c\u043e\u0432","c1d2ec31":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0433\u0440\u0430\u0444 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:","8230696e":"\u0415\u0441\u043b\u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043d\u0430 \u043a\u0430\u043a\u0438\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \"\u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\" \u0433\u0440\u0430\u0444 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b-\u043c\u043e\u0434\u0443\u043b\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u0446\u0435\u043b\u0435\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c Louvain.","d7171900":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0433\u0440\u0430\u0444\u0430: \u0447\u0438\u0441\u043b\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0440\u0451\u0431\u0435\u0440, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043b\u0438\u043a\u0438:\n\n(\u043a\u043e\u0434 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u0442\u0441\u044e\u0434\u0430: https:\/\/www.kaggle.com\/mayeesha\/network-analysis-for-dummies-stackoverflow-data)","4c85cc02":"\u0415\u0441\u043b\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0435\u0442 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0441\u043b\u043e\u0432\u0430, \u0442\u043e \u043f\u043e\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u043e n-\u0433\u0440\u0430\u043c\u043c\u0430\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0435\u0441\u0442\u044c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435.","3d170a26":"## Modularity","44cf064c":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c:","46adb3a5":"Triadic Closure:","771dce57":"\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0435\u0440\u0435\u0447\u043d\u0435 \u0441\u043b\u043e\u0432\u0430:\n","4f9a6901":"## 1. \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","48a802b3":"## Link Prediction\n\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: https:\/\/www.geeksforgeeks.org\/link-prediction-predict-edges-in-a-network-using-networkx\/","60b57c17":"Jaccard Coefficient:","9ae9c9ad":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0435 \u043d\u0430\u043c \u0441\u043b\u043e\u0432\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435.","c22e9a4c":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u041b\u0443\u0432\u0435\u043d\u0441\u043a\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c:","d0fad9e9":"\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 (\u043c\u043e\u0434\u0443\u043b\u0438) \u0445\u043e\u0440\u043e\u0448\u043e \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f, \u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0441\u043b\u043e\u0432 \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0444\u0438\u0447\u0438) \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439.","79e45417":"Preferential Attachment:","d6cf5336":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u0445 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430.","c2fba5f5":"\u0421\u043d\u043e\u0432\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0430\u0444 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u043b\u044e\u0431\u044b\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u0445 \u0440\u0451\u0431\u0435\u0440 \u043c\u0435\u0436\u0434\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438. ","60fb1571":"## node2vec\n\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: https:\/\/github.com\/eliorc\/node2vec"}}