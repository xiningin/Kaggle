{"cell_type":{"0f456bc0":"code","7571f8aa":"code","b2922aaf":"code","fe8be9ea":"code","c9ea019a":"code","ccd0a1b3":"code","ee932c65":"code","9ce6f187":"code","42ba962e":"code","884775ee":"code","e1c5a2b6":"code","ee0a8e24":"markdown","22f5a1ce":"markdown","7afc4870":"markdown","30f6f696":"markdown","3f22d0ce":"markdown","d4fbbee7":"markdown","1198bdb0":"markdown","160ac70d":"markdown","003db6c5":"markdown","19b4cfc5":"markdown","b6c1b3f3":"markdown","5d5fc6cc":"markdown","f5538327":"markdown","44e3b7a7":"markdown","febaa099":"markdown","2952bc8f":"markdown","bfa89b78":"markdown","ab86b7de":"markdown","8645576d":"markdown","59734699":"markdown"},"source":{"0f456bc0":"# Importing packages\nimport bq_helper as bqh # Simplifies common read-only tasks in BigQuery by dealing with object references and unpacking result objects into pandas dataframes\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7571f8aa":"traffic_data = bqh.BigQueryHelper('bigquery-public-data','nhtsa_traffic_fatalities')","b2922aaf":"traffic_data.list_tables()","fe8be9ea":"query = '''\nSELECT state_name,\nconsecutive_number as case_id,\nCASE\nWHEN day_of_week = 1 THEN \"Sunday\"\nWHEN day_of_week = 2 THEN \"Monday\"\nWHEN day_of_week = 3 THEN \"Tuesday\"\nWHEN day_of_week = 4 THEN \"Wednesday\"\nWHEN day_of_week = 5 THEN \"Thursday\"\nWHEN day_of_week = 6 THEN \"Friday\"\nWHEN day_of_week = 7 THEN \"Saturday\"\nELSE \"Unknown\"\nEND day_of_week,\nCASE\nWHEN month_of_crash = 1 THEN 'Jan'\nWHEN month_of_crash = 2 THEN 'Feb'\nWHEN month_of_crash = 3 THEN 'Mar'\nWHEN month_of_crash = 4 THEN 'Apr'\nWHEN month_of_crash = 5 THEN 'May'\nWHEN month_of_crash = 6 THEN 'Jun'\nWHEN month_of_crash = 7 THEN 'Jul'\nWHEN month_of_crash = 8 THEN 'Aug'\nWHEN month_of_crash = 9 THEN 'Sep'\nWHEN month_of_crash = 10 THEN 'Oct'\nWHEN month_of_crash = 11 THEN 'Nov'\nWHEN month_of_crash = 12 THEN 'Dec'\nELSE \"Unknown\"\nEND month_of_year,\nCASE\nWHEN hour_of_crash = 0 THEN '12AM'\nWHEN hour_of_crash = 1 THEN '1AM'\nWHEN hour_of_crash = 2 THEN '2AM'\nWHEN hour_of_crash = 3 THEN '3AM'\nWHEN hour_of_crash = 4 THEN '4AM'\nWHEN hour_of_crash = 5 THEN '5AM'\nWHEN hour_of_crash = 6 THEN '6AM'\nWHEN hour_of_crash = 7 THEN '7AM'\nWHEN hour_of_crash = 8 THEN '8AM'\nWHEN hour_of_crash = 9 THEN '9AM'\nWHEN hour_of_crash = 10 THEN '10AM'\nWHEN hour_of_crash = 11 THEN '11AM'\nWHEN hour_of_crash = 12 THEN '12PM'\nWHEN hour_of_crash = 13 THEN '1PM'\nWHEN hour_of_crash = 14 THEN '2PM'\nWHEN hour_of_crash = 15 THEN '3PM'\nWHEN hour_of_crash = 16 THEN '4PM'\nWHEN hour_of_crash = 17 THEN '5PM'\nWHEN hour_of_crash = 18 THEN '6PM'\nWHEN hour_of_crash = 19 THEN '7PM'\nWHEN hour_of_crash = 20 THEN '8PM'\nWHEN hour_of_crash = 21 THEN '9PM'\nWHEN hour_of_crash = 22 THEN '10PM'\nWHEN hour_of_crash = 23 THEN '11PM'\nELSE \"Unknown\"\nEND hour_of_day,\nnumber_of_fatalities as no_of_victims,\nlight_condition_name AS light_condition,\natmospheric_conditions_1_name AS atmospheric_condition,\nfrom \n`bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n'''\n\ntraffic_data.estimate_query_size(query)","c9ea019a":"df = traffic_data.query_to_pandas(query)\ndf.head()","ccd0a1b3":"fatality_per_state = df.loc[:, ['state_name', 'no_of_victims']]\nfatality_per_state = fatality_per_state.groupby(['state_name'])['no_of_victims'].sum().reset_index().sort_values('no_of_victims')\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"state_name\", y = \"no_of_victims\", data = fatality_per_state)\nstate_name_list = pd.Series.tolist(fatality_per_state['state_name'])\ny_pos = np.arange(len(state_name_list))\nplt.xticks(y_pos, state_name_list, rotation='vertical')\nplt.xlabel('State')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per state',fontsize=20)","ee932c65":"fatality_per_week = df.loc[:, ['day_of_week', 'no_of_victims']]\nfatality_per_week = fatality_per_week.groupby(['day_of_week'])['no_of_victims'].sum().reset_index().sort_values(\"no_of_victims\")\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"day_of_week\", y = \"no_of_victims\", data = fatality_per_week)\nweek_name_list = pd.Series.tolist(fatality_per_week['day_of_week'])\ny_pos = np.arange(len(week_name_list))\nplt.xticks(y_pos, week_name_list, rotation='vertical')\nplt.xlabel('Day')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per day of week',fontsize=20)","9ce6f187":"fatality_per_day = df.loc[:, ['hour_of_day', 'no_of_victims']]\nfatality_per_day = fatality_per_day.groupby(['hour_of_day'])['no_of_victims'].sum().reset_index().sort_values(\"no_of_victims\")\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"hour_of_day\", y = \"no_of_victims\", data = fatality_per_day)\nday_name_list = pd.Series.tolist(fatality_per_day['hour_of_day'])\ny_pos = np.arange(len(day_name_list))\nplt.xticks(y_pos, day_name_list, rotation='vertical')\nplt.xlabel('Hour')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per hour of day',fontsize=20)","42ba962e":"fatality_per_year = df.loc[:, ['month_of_year', 'no_of_victims']]\nfatality_per_year = fatality_per_year.groupby(['month_of_year'])['no_of_victims'].sum().reset_index().sort_values(\"no_of_victims\")\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"month_of_year\", y = \"no_of_victims\", data = fatality_per_year)\nyear_name_list = pd.Series.tolist(fatality_per_year['month_of_year'])\ny_pos = np.arange(len(year_name_list))\nplt.xticks(y_pos, year_name_list, rotation='vertical')\nplt.xlabel('Month')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per month of year',fontsize=20)","884775ee":"fatality_light_condition = df.loc[:, ['light_condition', 'no_of_victims']]\nfatality_light_condition = fatality_light_condition.groupby(['light_condition'])['no_of_victims'].sum().reset_index().sort_values(\"no_of_victims\")\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"light_condition\", y = \"no_of_victims\", data = fatality_light_condition)\nlight_cond = pd.Series.tolist(fatality_light_condition['light_condition'])\ny_pos = np.arange(len(light_cond))\nplt.xticks(y_pos, light_cond, rotation='vertical')\nplt.xlabel('Light condition')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per light condition',fontsize=20)","e1c5a2b6":"fatality_atmospheric_condition = df.loc[:, ['atmospheric_condition', 'no_of_victims']]\nfatality_atmospheric_condition = fatality_atmospheric_condition.groupby(['atmospheric_condition'])['no_of_victims'].sum().reset_index().sort_values(\"no_of_victims\")\n\n# Plotting using Seaborn\nplt.figure(figsize=(14,5))\ng = sns.barplot(x= \"atmospheric_condition\", y = \"no_of_victims\", data = fatality_atmospheric_condition)\natmospheric_cond = pd.Series.tolist(fatality_atmospheric_condition['atmospheric_condition'])\ny_pos = np.arange(len(atmospheric_cond))\nplt.xticks(y_pos, atmospheric_cond, rotation='vertical')\nplt.xlabel('Atmospheric condition')\nplt.ylabel('Fatality count')\ng.axes.set_title('Graph showing number of fatality per atmospheric condition',fontsize=20)","ee0a8e24":"# Fatality per month of year","22f5a1ce":"### Let's look at the number of tables.\n","7afc4870":"- Looking good. Looks like we only use up 26 MB of data. Now we will give the data back as a Pandas Dataframe and preview the dataframe.","30f6f696":"### Understanding bq_helper\n- bq_helper uses the creation of one BigQueryHelper object per dataset.\n- Two aguments have to be filled:\n    * The name of the BigQuery project, which on Kaggle should always be bigquery-public-data. As we are using Kaggle, we do not need to deal with configurations. However, if you need to run it on your local machine, you can check out the [Readme](https:\/\/github.com\/SohierDane\/BigQuery_Helper\/blob\/master\/README.md) created by the author.\n    * The name of the dataset, which can be found in the dataset description.","3f22d0ce":"# Amount of fatality per state","d4fbbee7":"# Fatality per hour of day ","1198bdb0":"## What can we see here?\n- Fatality rate seems to increase as the day progress along the week, with Saturday and Sunday being the top 2.\n- As majority of the people do not need to work on weekends, the number of people that travel by car will increase. This leads to a higher possible chance of getting into a traffic accident. ","160ac70d":"## What do we see here?\n- Contrary to what I assumed, the number of fatality seem be the highest during daytime. What I can assume here is that more people tend to drive when there is daylight, hence, there is a higher occurance of accident. ","003db6c5":"# Fatalities per day of the week","19b4cfc5":"# Introduction\n\nRoad traffic accidents are ranked 9th in the leading cause of death, accounting for 2.2% of all deaths globally. According to World Health Organisation(WHO)'s infographic on road safety, approximately 1.25 million people died from road accident each year, amounting to 3287 deaths per day. Additionally, approximately 20 to 50 million people are physically impaired after the accident.\n\n## Objective of analysis\n- Determine the profile for a typical road traffic accidents and identify key variables that resulted in an accident \n- We will be looking into the following variables:\n * state_name\n * day_of_week\n * month_of_crash\n * hour_of_crash\n * consecutive_number (unique case number assigned to each crash, used as count)\n * number_of_fatalities\n","b6c1b3f3":"### What do we see here?\n- In contrary to what was expected, what I can say about this is that some states may have a longer period of sunlight, which is why we have more fatality count in clear condition.","5d5fc6cc":"- We will be specifically working on the table- 'accident_2015'.","f5538327":"## What do we see here?\n- The first quarter of the year seems to have the least amount of fatality. The remaining period shows high fatality counts. \n- There seem to be no particular reason for this to happen as this can differs every year. ","44e3b7a7":"### Before we work on the queries, we will need to check how much memory it will use. Kaggle will only allow up to 5 TB usage of memory per month and before we work on any large datasets, we need to make sure it does not make a huge dent in our resources. ","febaa099":"## What do we see here\n- Texas, California and Florida are the top 3 states that have the highest fatality. \n    * A huge number of retirees stay at Florida and a huge proportion of accidents is attributed to the elderly drivers.\n    * As for the other states, there are no particular reasons that resulted in what was observed.\n    ","2952bc8f":"### Importing required packages","bfa89b78":"# Fatality on atmospheric_condition","ab86b7de":"## What do we see here?\n- The number of fatalities seem to aggregate between 5 PM to 9 PM. This seems to be the peak hour period where majority of the people are going home from work. Also, it is the time where the sun set. The reduced visibility can increase the occurance of accidents.","8645576d":"# Summary\n- We observed high fatality on the last three days of the week and majority of the accident occurs between 5PM to 9PM. The main reason being people has a higher tendency to travel during that period, resulting in a higher occurance of accident. \n- The top 3 states to have the highest fatality are Texas, Califonia and Florida. ","59734699":"# Fatality on light condition "}}