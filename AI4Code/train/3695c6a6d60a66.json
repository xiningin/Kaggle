{"cell_type":{"9baa74e8":"code","766096a5":"code","edd44999":"code","06f7610e":"code","34306657":"code","ac62838b":"code","f8287752":"code","28feeaac":"code","821f6acf":"code","802b3dac":"code","8d620f24":"code","9dc22182":"code","02eae1b9":"code","e24d4d95":"code","35de6502":"code","5a1e34bd":"code","91838088":"code","acb79349":"code","ddb55ca3":"code","792b68f3":"code","87d7266d":"code","9052100c":"code","b6e8e71d":"code","500461ce":"code","fd53148d":"code","11f770f2":"code","90e634e0":"code","af9850ba":"code","a093c5c7":"code","f4460355":"code","5c781ef9":"code","bd8ed66a":"code","32c072d5":"code","1abad928":"code","5d282bf0":"code","720b206a":"code","5b4eac1a":"code","f16c160a":"code","1640513d":"code","1aa837d1":"code","02ec27ae":"code","16820ddf":"code","34f814c8":"code","be9574b4":"code","4e22efd5":"code","5668d1b3":"code","a204fea8":"code","5b89be56":"code","a114a0e5":"code","4680e236":"code","a451694a":"code","4d9893dd":"code","fed4a8a6":"code","b1e892c9":"code","d5034c93":"code","5a44cc9a":"code","a940267c":"code","0d9ed0b4":"code","3b472640":"code","60a39cb9":"code","19ec4db6":"code","f2ba6bb6":"code","715188de":"code","79f9d06e":"code","38062a19":"code","dd27495e":"code","96c7aa59":"code","aa7560d7":"code","f882a280":"code","5a395cca":"code","aaa829bd":"code","2e67400a":"code","11c1ee43":"code","9251b568":"code","98a0db86":"code","029ca00c":"code","b19705e7":"markdown","d2e498c0":"markdown","a3117b6e":"markdown","99cf3a64":"markdown","620d7642":"markdown","d3db6ce9":"markdown","618454cf":"markdown","998c29a8":"markdown","5b4b51e5":"markdown","acc58a52":"markdown","d0c52150":"markdown","af1e11ff":"markdown","af7c8015":"markdown","49c8aa1b":"markdown","df1730d4":"markdown","bd9a7b21":"markdown","63721c95":"markdown","eaa8cea2":"markdown","06b19ccc":"markdown","08ac88bf":"markdown","86cf4a85":"markdown","5bbacc93":"markdown","df6b535c":"markdown","37542fa0":"markdown","8b128bc7":"markdown","3c85376c":"markdown","363ba8c9":"markdown","99139dd3":"markdown","592beec6":"markdown","f2582890":"markdown","420350ee":"markdown","335b6ff0":"markdown","9de6c697":"markdown","e45c564e":"markdown","820c9c50":"markdown","0b68e77f":"markdown","ac9afd83":"markdown","25b71895":"markdown","cb3bb16e":"markdown","06746f27":"markdown","60976124":"markdown","cb64f0ac":"markdown","38a3fc2c":"markdown","f32d127d":"markdown","be7d700c":"markdown","1e74a1ab":"markdown","d5b207ee":"markdown","e3aaed1c":"markdown","e6227d13":"markdown","6c9cccc3":"markdown","c128ffaa":"markdown","dd29c8f3":"markdown","bde91350":"markdown","8736ed30":"markdown","e4164584":"markdown","37348610":"markdown","6fb7b66b":"markdown","f8192176":"markdown","cb41d39a":"markdown","ad630285":"markdown","9a37eef0":"markdown","e75e49b2":"markdown","3a94a1ff":"markdown","cc9c5171":"markdown"},"source":{"9baa74e8":"!pip install imbalanced-learn","766096a5":"# Libraries\nimport os\n\n# Used for EDA, Customer profiling\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom imblearn.over_sampling import SMOTE\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV, learning_curve, train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, roc_curve\nfrom sklearn.inspection import permutation_importance\n\nfrom xgboost import XGBClassifier\n\nfrom scipy import stats\nfrom scipy.stats import randint\nfrom scipy.stats import uniform\n\n\n# Presets\n%matplotlib inline\nsns.set()","edd44999":"data = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\ndata.head(5)","06f7610e":"# Removing the N.B. columns\ndata = data.drop(columns= ['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1','Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'])","34306657":"for column in data.columns:\n    print(\"Column name: \" + column)\n\nprint(\"Column count: \" + str(len(data.columns)))","ac62838b":"# True if duplicates are present\ndata.duplicated().any()","f8287752":"# Change the ID to the ClientNumber\ndata = data.set_index(\"CLIENTNUM\")","28feeaac":"# Describe columns\ndata.isnull().any()","821f6acf":"target = data[\"Attrition_Flag\"].value_counts()\n\nfig1, ax1 = plt.subplots()\n\nax1.pie(target, labels=target.index, autopct='%1.1f%%', shadow=None)\nax1.axis('equal')\nplt.title(\"Amount of churned customers\", fontsize=14)\nplt.show()","802b3dac":"# Some functions\n\nchurned = data[data['Attrition_Flag'] == \"Attrited Customer\"]\nnonchurned = data[data['Attrition_Flag'] == \"Existing Customer\"]\n\ndef plot_pie(column):\n    target = data[column].value_counts()    \n    fig1, ax1 = plt.subplots()    \n    ax1.pie(target, labels=target.index, autopct='%1.1f%%', shadow=None)\n    ax1.axis('equal')\n    plt.title(\"All customers\", fontsize=14)\n    plt.show()\n    \n\ndef plot_compare(column, category_name):\n    NChurned = len(churned[column].unique())\n    NNonChurned = len(nonchurned[column].unique())\n    \n    ChurnedCounts = churned[column].value_counts().sort_index()\n    NonChurnedCounts = nonchurned[column].value_counts().sort_index()\n    \n    indchurned = np.arange(NChurned)    # the x locations for the groups\n    indnonchurned = np.arange(NNonChurned)    \n    width = 1       # the width of the bars: can also be len(x) sequence\n    \n    figs, axs = plt.subplots(1,2, figsize=(12,5))\n    \n    axs[1].bar(indchurned, ChurnedCounts, width, color='#DD8452')\n    axs[1].set_title('Churned ' + category_name, fontsize=20)\n    axs[1].set_xticks(indchurned)\n    axs[1].set_xticklabels(ChurnedCounts.index.tolist(), rotation=45)\n    \n    axs[0].bar(indnonchurned, NonChurnedCounts, width, color='b')\n    axs[0].set_title('Non Churned ' + category_name, fontsize=20)\n    axs[0].set_ylabel('Amount of People')\n    axs[0].set_xticks(indnonchurned)\n    axs[0].set_xticklabels(NonChurnedCounts.index.tolist(), rotation=45)\n    \n    \n    plt.show()","8d620f24":"# Checking the overal distribution\ndata[\"Customer_Age\"].hist()\nplt.xlabel(\"Age\")\nplt.ylabel(\"Amount of customers\")\nplt.title(\"Age distribution\", fontsize=15)\nplt.show()","9dc22182":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Customer_Age\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Age vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","02eae1b9":"churnedtarget = churned[\"Gender\"].value_counts()\nnonchurnedtarget = nonchurned[\"Gender\"].value_counts()\n\nfig1, axs = plt.subplots(1, 2)\n\naxs[0].pie(churnedtarget, labels=churnedtarget.index, autopct='%1.1f%%', shadow=None)\naxs[0].axis('equal')\naxs[0].set_title('Existing customers')\n\naxs[1].pie(nonchurnedtarget, labels=nonchurnedtarget.index, autopct='%1.1f%%', shadow=None)\naxs[1].axis('equal')\naxs[1].set_title('Churning customers')\n\nplt.show()","e24d4d95":"N = 6\nChurnedCounts = churned[\"Dependent_count\"].value_counts().sort_index()\nNonChurnedCounts = nonchurned[\"Dependent_count\"].value_counts().sort_index()\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.3       # the width of the bars: can also be len(x) sequence\n\nfigs, axs = plt.subplots(figsize=(10,7))\n\naxs.bar(ind - width\/2, ChurnedCounts, width, color = \"#DD8452\")\naxs.bar(ind + width\/2, NonChurnedCounts, width)\n\naxs.set_xlabel('Dependent Count')\naxs.set_ylabel('Amount of People')\naxs.set_title('Distribution of the dependent count', fontsize=20)\n# axs.set_xticks(ind, ('0', '1', '2', '3', '4', '5'))\naxs.legend(('Churned Customers','Existing Customers',))\n\nplt.show()","35de6502":"churned['Dependent_count'].describe()","5a1e34bd":"nonchurned['Dependent_count'].describe()","91838088":"plot_pie(\"Education_Level\")","acb79349":"plot_compare(\"Education_Level\", \"Education Level\")","ddb55ca3":"plot_pie(\"Marital_Status\")","792b68f3":"plot_compare(\"Marital_Status\", \"Marital Status\")","87d7266d":"plot_pie(\"Income_Category\")","9052100c":"plot_compare(\"Income_Category\", \"Income Categories\")","b6e8e71d":"plot_pie(\"Card_Category\")","500461ce":"plot_compare(\"Card_Category\", \"Types of cards\")","fd53148d":"column = \"Months_on_book\"\n\nN = len(data[column].unique())\nDataCounts = data[column].value_counts().sort_index()\n\nind = np.arange(N) \nwidth = 1       \n\nfigs, axs = plt.subplots(figsize=(12,5))\n\naxs.bar(ind, DataCounts, width, color='b')\naxs.set_ylabel('Amount of People')\naxs.set_title('Length of relationship with the bank', fontsize=20)\naxs.set_xticks(ind)\naxs.set_xticklabels(DataCounts.index.tolist(), rotation=45)\n\nplt.show()","11f770f2":"plot_compare(\"Months_on_book\", \"Length of relationship\")","90e634e0":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Months_on_book\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Length Of Relationship vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","af9850ba":"plot_pie(\"Total_Relationship_Count\")","a093c5c7":"plot_compare(\"Total_Relationship_Count\", \"Number Of Products\")","f4460355":"plot_pie(\"Months_Inactive_12_mon\")","5c781ef9":"plot_compare(\"Months_Inactive_12_mon\", \"Inactive Months\")","bd8ed66a":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Months_Inactive_12_mon\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Inactive months vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","32c072d5":"plot_pie(\"Contacts_Count_12_mon\")","1abad928":"plot_compare(\"Contacts_Count_12_mon\", \"Number Of Contacts\")","5d282bf0":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Contacts_Count_12_mon\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Number Of Contacts vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","720b206a":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Credit_Limit\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Credit Limit vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","5b4eac1a":"column = \"Credit_Limit\"\ncategory_name = \"Credit Limit\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=['#DD8452','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","f16c160a":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Total_Revolving_Bal\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Credit Limit vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","1640513d":"column = \"Total_Revolving_Bal\"\ncategory_name = \"Revolving Balance\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=['#DD8425', 'b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","1aa837d1":"# Comparing the age distribution vs the target\nsns.boxplot(x=\"Attrition_Flag\", y=\"Avg_Open_To_Buy\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Buy New Credit Line vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","02ec27ae":"column = \"Avg_Open_To_Buy\"\ncategory_name = \"Buy New Credit Line\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=['#DD8425', 'b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","16820ddf":"sns.boxplot(x=\"Attrition_Flag\", y=\"Total_Amt_Chng_Q4_Q1\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Change in Transaction Amount vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","34f814c8":"column = \"Total_Amt_Chng_Q4_Q1\"\ncategory_name = \"Change in Transaction Amount\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=[ '#DD8425','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","be9574b4":"sns.boxplot(x=\"Attrition_Flag\", y=\"Total_Trans_Amt\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Transaction Amount vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","4e22efd5":"column = \"Total_Trans_Amt\"\ncategory_name = \"Transaction Amount\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=[ '#DD8425','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","5668d1b3":"sns.boxplot(x=\"Attrition_Flag\", y=\"Total_Trans_Ct\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Transanction Count vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","a204fea8":"column = \"Total_Trans_Ct\"\ncategory_name = \"Transaction Count\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=[ '#DD8425','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\n\nplt.show()","5b89be56":"sns.boxplot(x=\"Attrition_Flag\", y=\"Total_Ct_Chng_Q4_Q1\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Transanction Count vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","a114a0e5":"column = \"Total_Ct_Chng_Q4_Q1\"\ncategory_name = \"Transaction Count Change\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=['#DD8425','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\nplt.show()","4680e236":"sns.boxplot(x=\"Attrition_Flag\", y=\"Avg_Utilization_Ratio\",\n            hue=\"Attrition_Flag\", palette=[\"b\", \"#DD8452\"],\n            data=data).set_title(\"Card Utilization vs Churn\", fontsize=15)\nsns.despine(offset=10, trim=True)","a451694a":"column = \"Avg_Utilization_Ratio\"\ncategory_name = \"Card Utilization Ratio\" \n\nNChurned = len(churned[column].unique())\nNNonChurned = len(nonchurned[column].unique())\n\nfigs, axs = plt.subplots(figsize=(12,5))\n    \naxs.hist([churned[column], nonchurned[column]] , color=['#DD8425','b'])\n\naxs.set_ylabel('Amount of People')\naxs.set_title('Churned ' + category_name, fontsize=20)\naxs.legend(('Churned Customers', 'Existing Customers'))\n\nplt.show()","4d9893dd":"churned.describe()","fed4a8a6":"nonchurned.describe()","b1e892c9":"encoder = LabelEncoder()\n\ndef make_categorical(data: pd.DataFrame, column: str, categories: list, ordered: bool = False):\n    data[column] = pd.Categorical(data[column], categories=categories, ordered=ordered)","d5034c93":"make_categorical(data, 'Marital_Status', ['Unknown', 'Single', 'Divorced','Married'])\n\nmake_categorical(data, 'Income_Category', ['Unknown','Less than $40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '$120K +'], True)\n\nmake_categorical(data, 'Card_Category', ['Blue', 'Silver', 'Gold', 'Platinum'], True)","5a44cc9a":"data[\"Attrition_Flag\"] = data[\"Attrition_Flag\"].replace({'Attrited Customer':1,'Existing Customer':0})\ndata[\"Gender\"] = data[\"Gender\"].replace({'F':1,'M':0})","a940267c":"ClassesToEncode = ['Education_Level' ,'Marital_Status', 'Income_Category', 'Card_Category']","0d9ed0b4":"for Class in ClassesToEncode:\n    data[Class] = encoder.fit_transform(data[Class])","3b472640":"y_data = data[\"Attrition_Flag\"]\nX_data = data.drop(columns = [\"Attrition_Flag\"])","60a39cb9":"# for testing purposes\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.3, random_state=0)","19ec4db6":"# Transform the dataset (only training data)\noversample = SMOTE()\nX_up, y_up = oversample.fit_resample(X_train, y_train)","f2ba6bb6":"rf = RandomForestClassifier()\nrf.fit(X_up, y_up)","715188de":"xgb = XGBClassifier()\nxgb.fit(X_up, y_up)","79f9d06e":"rfpred = rf.predict(X_test)\nprint(classification_report(y_test, rfpred))","38062a19":"\nypred = rfpred\nmodel = rf\nprint ('Confusion Matrix:')\nprint(confusion_matrix(y_test, ypred))\nprint('\\nAccuracy:', accuracy_score(y_test, ypred))\nprint(\"Overall Precision:\",precision_score(y_test, ypred))\nprint(\"Overall Recall:\",recall_score(y_test, ypred))\nprint(\"Overall f1-score:\", f1_score(y_test, ypred))\nauc = roc_auc_score(y_test,ypred)\nplt.show()","dd27495e":"xgbpred = xgb.predict(X_test)\nprint(classification_report(y_test, xgbpred))","96c7aa59":"\nypred = xgbpred\nmodel = xgb\nprint ('Confusion Matrix:')\nprint(confusion_matrix(y_test, ypred))\nprint('\\nAccuracy:', accuracy_score(y_test, ypred))\nprint(\"Overall Precision:\",precision_score(y_test, ypred))\nprint(\"Overall Recall:\",recall_score(y_test, ypred))\nprint(\"Overall f1-score:\", f1_score(y_test, ypred))\nauc = roc_auc_score(y_test,ypred)\nplt.show()","aa7560d7":"# Tuning hyperparameters with RandomizedSearchCV\n\n#params = {\n#    \"colsample_bytree\": uniform(0.3, 0.7),\n#    \"min_child_weight\": [1,2,3,4],\n#    \"learning_rate\": uniform(0.1, 0.5), # default 0.1 \n#    \"max_depth\": randint(6, 9), # default 3\n#    \"n_estimators\": randint(100, 300), # default 100\n#    \"subsample\": uniform(0.6, 0.4)\n#}\n#xgbnew = XGBClassifier()\n\n#search = RandomizedSearchCV(xgbnew, param_distributions=params, random_state=123, n_iter=100, cv=3, verbose=2, n_jobs=-1)\n\n#search.fit(X_up, y_up)","f882a280":"#search.best_params_","5a395cca":"#myxgb = search.best_estimator_\n#thisypred = myxgb.predict(X_test)\n\n#print(classification_report(y_test, thisypred))","aaa829bd":"# Parameters from RandomizedSearchCV\n#{'colsample_bytree': 0.7025947001725772,\n# 'learning_rate': 0.2612838738188591,\n# 'max_depth': 7,\n# 'min_child_weight': 1,\n# 'n_estimators': 229,\n# 'subsample': 0.8518910536188189}\n\nmyxgb = XGBClassifier(colsample_bytree=0.7025947001725772, learning_rate= 0.2612838738188591,max_depth= 7,min_child_weight=1, n_estimators = 229, subsample = 0.8518910536188189 )\nmyxgb.fit(X_up, y_up)\nthisypred = myxgb.predict(X_test)\n\n\nypred = thisypred\nmodel = myxgb\nprint ('Confusion Matrix:')\nprint(confusion_matrix(y_test, ypred))\nprint('Accuracy:', accuracy_score(y_test, ypred))\nprint(\"Overall Precision:\",precision_score(y_test, ypred))\nprint(\"Overall Recall:\",recall_score(y_test, ypred))\nauc = roc_auc_score(y_test,ypred)\n\nprint(\"AUC:\", auc)\nplt.show()","2e67400a":"# GridSearchCV for finetuning\n\n#params = {\n#    \"colsample_bytree\": [0.670, 0.680, 0.690],\n#    \"min_child_weight\": [1],\n#    \"learning_rate\": [0.275, 0.3, 0.325], # default 0.1 \n#    \"max_depth\": [7,8,9], # default 3\n#    \"n_estimators\": [212, 215, 217], # default 100\n#    \"subsample\": [0.75, 0.80, 0.85]\n#}\n\n#gridxgb = XGBClassifier()\n\n#gridsearch = GridSearchCV(estimator = gridxgb, param_grid = params, cv = 3, n_jobs = -1, verbose = 2)\n\n#gridsearch.fit(X_up, y_up)","11c1ee43":"#gridsearch.best_params_","9251b568":"#mymodel = gridsearch.best_estimator_\n#mymodelpred = mymodel.predict(X_test)\n#recall_score(y_test, mymodelpred)","98a0db86":"# {'colsample_bytree': 0.67,\n# 'learning_rate': 0.3,\n# 'max_depth': 8,\n# 'min_child_weight': 1,\n# 'n_estimators': 215,\n# 'subsample': 0.8}\n\nmymodel = XGBClassifier(colsample_bytree = 0.67, learning_rate=0.3, max_depth=8, min_child_weight=1, n_estimators=215, subsample=0.8)\nmymodel.fit(X_up, y_up)\nmymodelpred = mymodel.predict(X_test)\n\nypred = mymodelpred\nmodel = mymodel\nprint ('Confusion Matrix:')\nprint(confusion_matrix(y_test, ypred))\nprint('Accuracy:', accuracy_score(y_test, ypred))\nprint(\"Overall Precision:\",precision_score(y_test, ypred))\nprint(\"Overall Recall:\",recall_score(y_test, ypred))\nauc = roc_auc_score(y_test,ypred)\n\nprint(\"AUC:\", auc)\nplt.show()","029ca00c":"resultmymodel = permutation_importance(mymodel, X_test, y_test, n_repeats=10,\n                                random_state=42, n_jobs=2)\nsorted_idx = resultmymodel.importances_mean.argsort()\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.boxplot(resultmymodel.importances[sorted_idx].T,\n           vert=False, labels=X_test.columns[sorted_idx])\nax.set_title(\"Permutation Importances (test set)\")\nfig.tight_layout()\nplt.show()","b19705e7":"<a id=\"FeatureImportance\"><\/a>\n## 4.5. Feature Importance\nIn this step we'll have a look at the relative importance of each feature used in the predictions.","d2e498c0":"The \"Education level\" - distribution of the churn\/nonchurned customers shows no difference.","a3117b6e":"### Future improvements\n* Use correlation matrix in EDA to find the most influential features.\n* Use iterative imputer to get rid of the \"Unknown\" values?\n* Use PCA for feature selection.\n* Create a training and inferencing pipeline.\n* Data Upsampling with ADASYN instead of SMOTE\n","99cf3a64":"### Openness To Buy Credit Line vs churn","620d7642":"No distinctive difference.","d3db6ce9":"# Credit Card Customer Churn - EDA & Modelling\n\n## Table of content\n* [1. Introduction](#Introduction)\n    * [1.1. Goals](#Goals)\n    * [1.2. Libraries](#Libraries)\n* [2. The Data](#TheData)\n    * [2.1. Data Sample](#DataSample)\n    * [2.2. Data Preprocessing](#DataPreprocessing)\n* [3. Customer Profiles](#CustomerProfiles)\n    * [3.1. Exploratory Data Analysis](#EDA)\n    * [3.2. Churn and Non Churn Profiles](#Profiles)\n* [4. Customer Churn Prediction](#CustomerChurnPrediction)\n    * [4.1. Data Preperation](#DataPrep)\n    * [4.2. Model Training](#ModelTraining)\n    * [4.3. Model Evaluation](#ModelEvaluation)\n    * [4.4. Hyperparameter tuning](#Hyperparameter)\n    * [4.5. Feature Importance](#FeatureImportance)\n* [5. Conclusion](#Conclusion)\n","618454cf":"### Education level vs churn","998c29a8":"<a id=\"ModelEvaluation\"><\/a>\n## 4.3. Model Evaluation","5b4b51e5":"No null values are found.","acc58a52":"Churned customers are most likely to have more contact then the non churned customers. All though the difference isn't large it's still noticable. ","d0c52150":"### RandomForestClassifier","af1e11ff":"It's clear that the performance XGBoostClassifier is better.\nWith a recall of 92.5 % we clearly reached our goal. ( goal: ... > 0.62 )\n\n<a id=\"Hyperparameter\"><\/a>\n## 4.4. Hyperparameter tuning\n\n### RandomizedSearchCV\n\nFirst we'll use a RandomizedSearchCV to find narrow down on the most optimal parameters. For further finetuning GridSearchCV will be used.\n","af7c8015":"The dependent count shows us a normal distribution. No clear shift is visible when comparing the churned- and non churned distribution.","49c8aa1b":"<a id=\"ModelTraining\"><\/a>\n## 4.2. Model Training\nRandomForest and XGBoost","df1730d4":"It's clear that the average card utilization ratio is higher for the existing customers.","bd9a7b21":"### SMOTE (Synthetic Minority Oversampling Technique)\nWe saw that our dataset was imbalanced. This could gives problems when creating a classification model since it might not learn the decision boundary. This ofcourse an be solved with upsampling.\n\nOne technique used for this is SMOTE, this technique creates new synthetic samples which can be used for training.\n\n> SMOTE first selects a minority class instance a at random and finds its k nearest minority class neighbors. The synthetic instance is then created by choosing one of the k nearest neighbors b at random and connecting a and b to form a line segment in the feature space. The synthetic instances are generated as a convex combination of the two chosen instances a and b.\n[SMOTE Paper](https:\/\/arxiv.org\/abs\/1106.1813)\n\nTo use SMOTE we'll need to encode our categorical features.\n\nNote: It's important to only upsample the training data and so that no synthetic data is present in the validation dataset.","63721c95":"### Average Card Utilization Ratio","eaa8cea2":"### Change in transaction count vs Churn","06b19ccc":"The difference is too small to say that one gender is more eager to churn.","08ac88bf":"There is no clear difference in the credit limit.","86cf4a85":"<a id=\"CustomerProfiles\"><\/a>\n# 3. Customer Profiles\nLet's now explore and understand our data! \n<a id=\"EDA\"><\/a>\n## 3.1. Exploratory Data Analysis (EDA)\n\nEDA tasks:\n\n* Check the target variable:\n    * Amount of attrition.\n\n\n* Check the demographic variables:\n    * Age vs attrition.\n    * Gender vs churn.\n    * Number of dependents vs churn.\n    * Education level vs churn.\n    * Marital status vs churn.\n    * Income category vs churn.\n\n\n* Check the product variables:\n    * Type of card vs churn.\n    * Relationship with the bank vs churn.\n    * Number of products vs churn.\n    * Inactive months vs churn.\n    * Number of contacts vs churn.\n    * Credit Limit vs churn.\n    * Total resolving balance vs churn.\n    * Openness To Buy Credit Line vs churn.\n    * Transaction Amount Change vs churn.\n    * Transaction Count Change vs churn.\n    * Average Card Utilization Ratio vs churn.\n\n--> click [here](#Profiles) to skip forward to the profiling result!\n\n\n## Check the target variable\n### Amount of churned customers\nHow many customers have churned?","5bbacc93":"We notice that the larget amount of our customers earns less then $40k a year. Like the other demographic variables no clear shift in the distributions can be noticed.","df6b535c":"<a id=\"CustomerChurnPrediction\"><\/a>\n# 4. Customer Churn Prediction\nHere we will train an optimized (treebased) model which will predict if a customer will or won't churn. \n\n<a id=\"DataPrep\"><\/a>\n## 4.1. Data Preperation\nBefore we start training a model we must prepare our data. Different steps that we can undertake:\n* Encode all categorical data (watch out with one hot encoding and tree-based models...).\n* Scale data\n* Check correlation matrix to extract the most influential features.\n* Generate new columns from data.\n* Upsample the imbalanced dataset (SMOTE\/ADASYN).\n\nIn this notebook we shall focus on the upsampling method. The data wrangling performed is to make sure that the upsampling is performed in a correct manner.\n\n","37542fa0":"We can clearly see that most of our customers have the \"Blue\" card. The distribution of churned\/not churned is the same.","8b128bc7":"<a id=\"Libraries\"><\/a>\n## 1.2. Libraries\nLibraries used can be found in the code block underneed.","3c85376c":"### Income category vs churn","363ba8c9":"It's clear that the majority of our customers (83.9 %) stays. Since \"attrited\" or \"churned\" label is less then 20% of the total all customers.  We can say that we have an imbalanced data. Upsampling will be required to receive a better results.","99139dd3":"### Null values?","592beec6":"## Checking the demographic variables\n### Age compared to the churn","f2582890":"## Checking the product variables\n### Types of cards vs churn","420350ee":"### Total transaction count vs Churn ","335b6ff0":"### Months inactive vs churn","9de6c697":"### Remove N.B. columns","e45c564e":"### Total transaction amount vs churn","820c9c50":"### Total revolving balance vs churn","0b68e77f":"It's clear that the churned customers have a lower revolving balance then the existing customers.","ac9afd83":"No clear difference.","25b71895":"### Gender vs churn\nAre males of females more eager to churn?","cb3bb16e":"### Number of dependents vs churn","06746f27":"It's clear that the transaction amount is lower for the churned customers compared to the existing customers.","60976124":"### Number of products bought vs churn","cb64f0ac":"\n### Change in Transaction vs Churn","38a3fc2c":"Here we see a shift in the distribution when we compare the churned vs the nonchurned. It's clear that the non churned customers tend to buy more products then the churned customers.","f32d127d":"Like we noticed in the EDA the top 3 most important features are within the product variables, more specifically: \"Total_Trans_Ct\", \"Total_Trans_Amt\", \"Total_Amt_Chng_Q4_Q1\".","be7d700c":"The main part of the population is married. Both churn and non churned have the same distribution.","1e74a1ab":"### Credit limit vs churn","d5b207ee":"### Relationship with bank vs churn","e3aaed1c":"<a id=\"introduction\"><\/a>\n# 1. Introduction\n\n<a id=\"Goals\"><\/a>\n## 1.1. Goals\nThe goal of this notebook is to answer both tasks given for the [\"Credit Card Customers\"](https:\/\/www.kaggle.com\/sakshigoyal7\/credit-card-customers\/tasks) - dataset.\n\nThe first goal of this project is to provide an analysis which shows the **difference** between a **non-churning and churning customer**. This will provide us insight into which customers are eager to churn.\n\nThe top priority of this case is to identify if a customer will churn or won't. It's important that we don't **predict** churning as non-churning customers. That's why the model needs to be evaluated on the **\"Recall\"**- metric (goal > 62%).","e6227d13":"The age is normally distributed. There is no clear difference between the age distribution.","6c9cccc3":"### Marital status vs churn","c128ffaa":"<a id=\"Profiles\"><\/a> \n## 3.2. Non Churn and Churn Profiles\n\nAccording to the EDA above, the profiles underneed can be made. It's clear that the main difference lays in the \"product variables\" of the customers. A churning customers tends to be less active then an existing customer. It's clear that the most influential parameters are features related to the activity of the customer.\n\n\n|            |  Non Churning Customer | Churning Customer | \n|:----------:|:-------------:|:--------:|\n||||\n| ***Demographic variables*** |\n| Age | 47 | 46 | \n| Gender | F\/M | F\/M |\n| Dependents | 2 | 2 |\n| Education Level | Graduate | Graduate |\n| Marital Level | Married\/Single | Married\/Single |\n| Income Category | Less then \\$40K | Less  then \\$40K |\n||||\n| ***Product variables*** |\n| Type Of Card | Blue | Blue |\n| Length Of Relationship | 36 months | 36 months |\n| Products Bought | 4 | 3 |\n| Inactive Months | 2 | 3 |\n| Number Of Contact | 2 | 3 |\n| Credit Limit | \\$8726 | \\$8136 |\n| Revolving Balance | 1256 | 672 |\n| Open To Buy Credit Line | 7470 | 7463 |\n| Transaction Amount Change | 0.77 | 0.69 |\n| Total Transaction Amount | 4650 | 3095 |\n| Total Transaction Count | 69 | 45 |\n| Transaction Count Change | 0.74 | 0.55 |\n| Card Utilization Ratio | 0.3 | 0.16 |","dd29c8f3":"Again there's a clear difference between in the distribution. The average is higher for the existing customers.","bde91350":"It's clear that churned customers mostly have a lower transaction count then the existing customers.","8736ed30":"<a id=TheData><\/a>\n# 2. The Data\n<a id=\"DataSample\"><\/a>\n## 2.1. Data sample\n\nThe building block of any data science project is the data. Underneed you can find one data record which will be used in further analysis. The dataset consist of 10000 samples describing the customers and it's behavior.\n\nThe following columns\/features can be split up in the following groups:\n\n* ***Basic information***:\n    * **CLIENTNUM** : Unique identifier for the customer holding the account.\n\n\n* ***Target\/Label***:\n    * **Attrition_Flag**: Internal event (customer activity) variable - if the account is closed then 1 else 0.\n\n\n* ***Demographic variables***:\n    * **Customer_Age**: Demographic variable - Customer's Age in Years.\n    * **Gender**: Demographic variable - M=Male, F=Female.\n    * **Dependent_count**: Demographic variable - Number of dependents.\n    * **Education_Level**: Demographic variable - Educational Qualification of the account holder (example: high school, college graduate, etc.).\n    * **Marital_Status**: Demographic variable - Married, Single, Divorced, Unknown.\n    * **Income_Category**: Demographic variable - Annual Income Category of the account holder (< $40K, $40K - 60K, $60K - $80K, $80K-$120K, >).\n    \n\n* ***Product variables***:\n    * **Card_Category**: Product Variable - Type of Card (Blue, Silver, Gold, Platinum).\n    * **Months_on_book**: Period of relationship with bank.\n    * **Total_Relationship_Count**: Total no. of products held by the customer.\n    * **Months_Inactive_12_mon**: No. of Months in the last 12 months.\n    * **Contacts_Count_12_mon**: No. of Contacts in the last 12 months.\n    * **Credit_Limit**: Credit Limit on the Credit Card.\n    * **Total_Revolving_Bal**: Total Revolving Balance on the Credit Card.\n    * **Avg_Open_To_Buy**: Open to Buy Credit Line (Average of last 12 months\n    * **Total_Amt_Chng_Q4_Q1**: Change in Transaction Amount (Q4 over Q1).\n    * **Total_Trans_Amt**: Total Transaction Amount (Last 12 months).\n    * **Total_Trans_Ct**: Total Transaction Count (Last 12 months).\n    * **Total_Ct_Chng_Q4_Q1**: Change in Transaction Count (Q4 over Q1).\n    * **Avg_Utilization_Ratio**: Average Card Utilization Ratio.\n\n\n* ***Unimportant variables***:\n    * **Naive_Bayes**: It was mentioned that all columns containing the \"N.B.\"-tag should be disregarded.\n","e4164584":"The majority of people has a graduate education level followed by high school. 15% of the population has an unknown education level.","37348610":"### Check for duplicates and change ID to ClientNumber","6fb7b66b":"### GridSearchCV","f8192176":"### RandomForestClassifier","cb41d39a":"### Number of contacts vs churn","ad630285":"### XGBClassifier","9a37eef0":"<a id=\"Conclusion\"><\/a>\n## 5. Conclusion\n\nWe can conclude that the top 3 most influential features are the product variables: \"Total_Trans_Ct\", \"Total_Trans_Amt\", \"Total_Amt_Chng_Q4_Q1\". Using the existing data we managed to train a model with upsampled data which reaches a recall score of 92%.\n","e75e49b2":"It's clear that the most of the customers show a 3 month inactivity. It can be said that most of the active members (less then 3 months) can be found within the non churning customers.","3a94a1ff":"### XGBClassifier","cc9c5171":"<a id=\"DataPreprocessing\" ><\/a>\n## 2.2. Data Preprocessing\nIn this phase we'll quickly explore the data and remove\/impute incorrect values. So that a cleaned data can be used for further analysis\/modelling.\n\n* Remove unnecessary columns.\n* Check for duplicates.\n* Change ID to client number.\n* Check for null values.\n\n"}}