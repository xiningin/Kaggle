{"cell_type":{"9a85f8b2":"code","9ea83d01":"code","17828196":"code","95918b41":"code","e1ccffbf":"code","3fb6db99":"code","a7ee9e2b":"code","fdcd74ae":"code","5c280416":"code","ed29d87f":"code","0fab8c7e":"code","7c9eb06b":"code","8ed00958":"code","bc386fe1":"code","71011630":"code","3a56c5be":"code","c3b54edb":"code","0f31cc7b":"code","a22ec6ec":"code","e2574ad5":"code","6963b9b2":"code","f791a776":"code","8c75ed07":"code","68a65d1c":"code","1e4adb0a":"code","6c21e380":"code","fe63fee2":"code","bcfe9f0f":"markdown"},"source":{"9a85f8b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ea83d01":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","17828196":"data = pd.read_csv('\/kaggle\/input\/spam or ham.csv', engine= 'python')\ndata.head()","95918b41":"data.info()","e1ccffbf":"sns.countplot(x = 'mail type', data= data)\nplt.show()","3fb6db99":"data['message'][:5]","a7ee9e2b":"data.isna().any()","fdcd74ae":"data['mail type'].value_counts()","5c280416":"import nltk\nnltk.download('stopwords')\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","ed29d87f":"corpus = []\nps = PorterStemmer()\n\nfor i in range(data.shape[0]):\n    text = re.sub(pattern= '[^A-Za-z]', repl= ' ', string = data['message'][i])\n    text = text.lower()\n    text = text.split()\n    words = [words for words in text if words not in set(stopwords.words('english'))]\n    words = [ps.stem(word) for word in words]\n    words = ' '.join(words)\n    corpus.append(words)\n    ","0fab8c7e":"corpus[:10] ","7c9eb06b":"# bag of words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features= 3000)\nX = cv.fit_transform(corpus).toarray()\nX","8ed00958":"# extracting dependent variable \ny = pd.get_dummies(data['mail type'])\ny","bc386fe1":"y = y.iloc[:, 0].values\ny","71011630":"# train and test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10)","3a56c5be":"# model building\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(X_train, y_train)","c3b54edb":"print('training score :{}'.format(nb.score(X_train, y_train)))\nprint('testing score :{}'.format(nb.score(X_test, y_test)))","0f31cc7b":"y_pred = nb.predict(X_test)","a22ec6ec":"# error metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","e2574ad5":"# other way of seeing confusion matrix\npd.crosstab(y_test, y_pred, rownames=['actual values'], colnames=['predicted values'])","6963b9b2":"print(classification_report(y_test, y_pred))","f791a776":"## tfidf approach\n# bag of words model\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(ngram_range= (2,3), max_features= 3000)\nX = cv.fit_transform(corpus).toarray()\nX","8c75ed07":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10)","68a65d1c":"nb = MultinomialNB()\nnb.fit(X_train, y_train)","1e4adb0a":"print('training score :{}'.format(nb.score(X_train, y_train)))\nprint('testing score :{}'.format(nb.score(X_test, y_test)))","6c21e380":"y_pred = nb.predict(X_test)","fe63fee2":"# other way of seeing confusion matrix\npd.crosstab(y_test, y_pred, rownames=['actual values'], colnames=['predicted values'])","bcfe9f0f":"### Preprocessing steps:\n\n-       convert into lowercase\n-       remove numbers\n-       remove special characters\n-       remove stop words\n-       stemming and lematization\n-       remove white spaces\n-       create DTM\/TDM"}}