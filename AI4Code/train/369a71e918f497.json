{"cell_type":{"43b06ce1":"code","918e519e":"code","8edf3a52":"code","2aa60770":"code","fac4d6ba":"code","64d3962b":"code","4d14377f":"code","89a2fdca":"code","f8df3c7e":"code","3488a968":"code","db107981":"code","70c80fc6":"code","a1cc7c0d":"code","8c258ef0":"code","309650f0":"code","90a12d1e":"code","61355e4e":"code","ffb0bfcb":"code","a6cb3104":"markdown","300cdde1":"markdown","6981f855":"markdown","b85951cb":"markdown","f0af87e2":"markdown","6eb747c7":"markdown","b7a1e2bc":"markdown","9429b0b5":"markdown","89825452":"markdown","bdf5a58d":"markdown","394b761f":"markdown","264ec880":"markdown","82085613":"markdown","fd632b56":"markdown","fd213f7e":"markdown","38ff3335":"markdown","c5e28147":"markdown"},"source":{"43b06ce1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)","918e519e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport cv2\n\nfrom sklearn.model_selection import train_test_split","8edf3a52":"data_dir = (r'\/kaggle\/input\/brain-tumor-classification-mri\/Training\/')\ncategories = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']\nfor i in categories:\n    path = os.path.join(data_dir, i)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path,img))       ","2aa60770":"img_size = 128\nimage_array = cv2.resize(img_array, (img_size,img_size))","fac4d6ba":"gt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\/gg (1).jpg')\nmt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\/m (10).jpg')\nnt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\/1.jpg')\npt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\/p (151).jpg')","64d3962b":"plt.rcParams[\"figure.figsize\"] = (5,5)\nplt.imshow(gt1)\nplt.axis('off')","4d14377f":"plt.rcParams[\"figure.figsize\"] = (5,5)\nplt.imshow(mt1)\nplt.axis('off')","89a2fdca":"plt.rcParams[\"figure.figsize\"] = (5,5)\nplt.imshow(nt1)\nplt.axis('off')","f8df3c7e":"plt.rcParams[\"figure.figsize\"] = (5,5)\nplt.imshow(pt1)\nplt.axis('off')","3488a968":"train_data = []\n\nfor i in categories:\n    train_path = os.path.join(data_dir,i)\n    tag = categories.index(i)\n    for img in os.listdir(train_path):\n        try:\n            image_arr = cv2.imread(os.path.join(train_path , img), cv2.IMREAD_GRAYSCALE)\n            new_image_array = cv2.resize(image_arr, (img_size,img_size))\n            train_data.append([new_image_array , tag])\n        except Exception as e:\n            pass","db107981":"X = []\ny = []\nfor i,j in train_data:\n    X.append(i)\n    y.append(j)\nX = np.array(X).reshape(-1,img_size,img_size)\nprint(X.shape)\nX = X\/255.0  \nX = X.reshape(-1,128,128,1)","70c80fc6":"from keras.utils.np_utils import to_categorical   \n\ny_enc = to_categorical(y, num_classes = 4)","a1cc7c0d":"X_train , X_test, y_train, y_test = train_test_split(X , y_enc , test_size = 0.1, random_state = 42)\nX_train , X_val, y_train, y_val = train_test_split(X_train , y_train , test_size = 0.1, random_state = 42)","8c258ef0":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.callbacks import EarlyStopping\n\nmodel = Sequential()\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (128,128,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (2,2),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Conv2D(filters = 256, kernel_size = (2,2),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(4, activation = \"softmax\"))\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nepochs = 20\n\nes = EarlyStopping(\n    monitor='val_acc', \n    mode='max',\n    patience = 3\n)\n\nbatch_size = 16\nimggen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=0,\n        zoom_range = 0,\n        width_shift_range=0,  \n        height_shift_range=0,  \n        horizontal_flip=True,  \n        vertical_flip=False)","309650f0":"imggen.fit(X_train)\nhistory = model.fit_generator(imggen.flow(X_train,y_train,batch_size = batch_size),\n                              epochs = epochs, validation_data = (X_val,y_val),\n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                              callbacks = [es])    ","90a12d1e":"plt.plot(history.history[\"loss\"],c = \"red\")\nplt.plot(history.history[\"val_loss\"],c = \"black\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.rcParams[\"figure.figsize\"] = (10,10)\nplt.show()","61355e4e":"plt.plot(history.history[\"accuracy\"],c = \"blue\")\nplt.plot(history.history[\"val_accuracy\"],c = \"green\")\nplt.title(\"Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.rcParams[\"figure.figsize\"] = (50,50)\nplt.legend([\"train\", \"test\"])","ffb0bfcb":"score = model.evaluate(X_test, y_test, verbose = 0)\nscore[1]","a6cb3104":"# Plot the Loss vs Epochs graph to visualize loss at each epoch","300cdde1":"# Accuracy of Test Dataset","6981f855":"# Example of Meningioma Tumor","b85951cb":"# Store every image in an array","f0af87e2":"# Plot Accuracy vs Epoch to visualize accuracy at each epoch","6eb747c7":"# Example of Pituitary Tumor","b7a1e2bc":"# Convert each image to grayscale and append into an array","9429b0b5":"# Import OS","89825452":"# Example of Glioma Tumor","bdf5a58d":"# One-Hot encode the target column ","394b761f":"# Import libraries","264ec880":"# Fit the model with Train and Validation datatsets","82085613":"# Split the features and target in to X and y","fd632b56":"# Example of No Tumor","fd213f7e":"# Import keras' functions to create CNN model","38ff3335":"# Resize each image to same size for fast processing","c5e28147":"# Split the data into Train, Validation and Test dataset (80%-10%-10%)"}}