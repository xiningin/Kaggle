{"cell_type":{"fd5215e0":"code","c2a53f68":"code","84d69ec0":"code","e21bbca3":"code","dcfb0f73":"code","b5f0c1ce":"code","1b3855dd":"code","38d3e8ca":"code","afe29fbd":"code","206d2448":"code","efb7c6c7":"code","27bf7af5":"code","b1a49263":"code","2e76bc2b":"code","9b8683f8":"code","b54dcb02":"code","cb1f4bd8":"code","fe8bf13a":"code","ec926806":"code","830aaa44":"code","8e4cf280":"code","950e09aa":"code","20fbd29f":"code","2f32469d":"code","3229fd12":"code","cfa6575e":"code","55fb9f2f":"code","ef647dd2":"code","775ab006":"code","d9ce38df":"code","d272f427":"code","1573c0ae":"code","b5a95304":"code","4df7502b":"code","1b0a7377":"code","7e14da4e":"code","f20ff4e5":"code","da374d05":"code","3d334b18":"code","49fd9b6b":"code","e008796e":"code","f4be20c6":"code","e16790f0":"code","3d39b906":"code","afac0b00":"code","3d15369d":"code","750b9d10":"code","53840a82":"code","e7874c04":"code","1ae1b99e":"code","00346b30":"code","a52240f2":"code","022ddf49":"code","0e93d4ee":"code","185b1141":"code","b65861d2":"code","20f7dcce":"code","664cf2d0":"code","12af1559":"code","7089a4ff":"code","ffb88923":"code","c2356d44":"code","f18606c9":"code","a10365f7":"code","60d5abd2":"code","050e4133":"code","73ffcf6f":"code","41492da0":"code","0f2b3ca7":"code","0f388efc":"code","5649ae0a":"code","2fb0a80c":"code","6a949fd3":"code","3a7a8044":"code","5685a91c":"code","e692d133":"code","ff3f9123":"code","65062d26":"code","6d71f9bd":"markdown","047e2894":"markdown","080dfd23":"markdown","eb71df7a":"markdown","0bb97d91":"markdown","165e1604":"markdown","34d44d49":"markdown","18936eb1":"markdown","8066e03d":"markdown","a5c34c1d":"markdown","c329f759":"markdown","16806db6":"markdown","ae12e7c3":"markdown","30ac50ef":"markdown","670fc012":"markdown","6bb9f807":"markdown","2c4e7959":"markdown","66ea2ff1":"markdown","943617d1":"markdown","b944a671":"markdown","9ea3fdf1":"markdown","660dfa94":"markdown","2216e920":"markdown","5d4dbcbb":"markdown","9b5846b4":"markdown","1fc6798d":"markdown","441639f8":"markdown","52eb312c":"markdown","ab230c91":"markdown","3c40e983":"markdown","eb1183a9":"markdown","a7e2bdd2":"markdown","01f49974":"markdown","86662d7d":"markdown"},"source":{"fd5215e0":"import re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c2a53f68":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_df.info()","84d69ec0":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df.info()","e21bbca3":"train_df['dataset'] = 'train'\ntest_df['dataset'] = 'test'\ndf = pd.concat([train_df, test_df])\ndf.info()","dcfb0f73":"df.describe()","b5f0c1ce":"# train dataset\ndf.loc[df.dataset == 'train'].isna().sum()","1b3855dd":"df.loc[df.dataset == 'train'].head()","38d3e8ca":"# sex, value counts\nsex_counts = train_df['Sex'].value_counts()\nsex_counts","afe29fbd":"# survival among sexes\nsns.displot(train_df, x = 'Sex', hue='Survived', multiple='stack');","206d2448":"# Age\nsns.displot(train_df, x = 'Age', hue='Survived', multiple='stack');","efb7c6c7":"# Looking at survival, through age and sex\nsns.displot(train_df, x = 'Age', hue='Sex', col = 'Survived', multiple='stack');","27bf7af5":"# Pclass\nsns.barplot(x = 'Pclass', y = 'Survived', data=train_df);","b1a49263":"grid = sns.FacetGrid(train_df, col = 'Survived', row = 'Pclass')\ngrid.map(plt.hist, 'Age')\ngrid.add_legend();","2e76bc2b":"df['family'] = df['SibSp'] + df['Parch']\ndf.loc[df['family'] > 0, 'Alone'] = 0\ndf.loc[df['family'] == 0, 'Alone'] = 1\ndf['Alone'] = df.Alone.astype(int)\n\ndf['Alone'].value_counts()","9b8683f8":"# in train dataset\ndf.loc[df.dataset == 'train', 'Alone'].value_counts()","b54dcb02":"sns.catplot(x='family', y='Survived', data= df.loc[df.dataset == 'train'],\n            kind='point', aspect=2.5);","cb1f4bd8":"# vorrelation between variables\ncorr = df.loc[df.dataset == 'train'].corr(method='pearson')\ncorr","fe8bf13a":"# visualization correlation\nmask = np.triu(np.ones_like(corr, dtype=bool))\nfig, ax = plt.subplots(figsize=(11, 9))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n           square=True, linewidths=.5, cbar_kws={'shrink': .5});","ec926806":"fg = sns.FacetGrid(df.loc[df.dataset == 'train'], row='Embarked', height=4.5, aspect = 1.6)\nfg.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None, order=None, hue_order=None)\nfg.add_legend();","830aaa44":"df.columns","8e4cf280":"cabins = df['Cabin'].dropna()\ncabins.head(2)","950e09aa":"cabin_dict = {'Cabin': []}\n\nfor cabin in cabins:\n    cabin_dict['Cabin'].append(cabin[0])\n\ncabin_df = pd.DataFrame.from_dict(cabin_dict)\ncabin_df = cabin_df[cabin_df.Cabin != 'T'] # Dropping 'T' as there was no deck called T in titanic\nsns.catplot(x=\"Cabin\", data=cabin_df, kind=\"count\", order=\"ABCDEFG\");","20fbd29f":"deck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndf['Cabin'].fillna(\"U0\", inplace=True)\ndf['Deck'] = df['Cabin'].map(lambda x: x[0])\ndf['Deck'] = df['Deck'].map(deck)\ndf['Deck'].fillna(0, inplace=True)\ndf['Deck'] = df['Deck'].astype(int)\nsns.catplot(x='Deck', data=df, kind='count');","2f32469d":"# dropping cabin for Deck\ndf.drop('Cabin', axis=1, inplace=True)","3229fd12":"# taking mean of age for the group\ncols_age = ['Pclass', 'Sex', 'Embarked', 'Alone']\ndf['Age'] = df['Age'].fillna(df.groupby(cols_age)['Age'].transform('mean'))\ndf['Age'].isna().sum()","cfa6575e":"sns.histplot(x='Age', data=df, bins=70);","55fb9f2f":"df.Age = df.Age.astype(int)","ef647dd2":"df.loc[df.Age <= 10, 'age_group'] = \"child\"\ndf.loc[(df.Age > 10) & (df.Age <= 19), 'age_group'] = \"teen\"\ndf.loc[(df.Age > 19) & (df.Age <= 25), 'age_group'] = \"young\"\ndf.loc[(df.Age > 25) & (df.Age <= 30), 'age_group'] = \"adult\"\ndf.loc[(df.Age > 30) & (df.Age <= 35), 'age_group'] = \"m_adult\"\ndf.loc[(df.Age > 35) & (df.Age <= 40), 'age_group'] = \"s_adult\"\ndf.loc[(df.Age > 40) & (df.Age <= 65), 'age_group'] = \"aging\"\ndf.loc[df.Age > 65, 'age_group'] = \"seniors\"\nle_age = LabelEncoder()\ndf['age_group'] = le_age.fit_transform(df.age_group)\nlist(le_age.classes_)","775ab006":"sns.catplot(x='age_group', data=df, kind='count');","d9ce38df":"# in train data\nsns.catplot(x='age_group', data=df.loc[df.dataset == 'train'], kind='count');","d272f427":"# in test data\nsns.catplot(x='age_group', data=df.loc[df.dataset == 'test'], kind='count');","1573c0ae":"df['Embarked'].describe()","b5a95304":"df['Embarked'].fillna('S', inplace=True)\ndf['Embarked'].isna().sum()","4df7502b":"# Encoding Embarked\nle_embarked = LabelEncoder()\ndf['Embarked'] = le_embarked.fit_transform(df['Embarked'])\nlist(le_embarked.classes_)","1b0a7377":"df.info()","7e14da4e":"df['Fare'].isna().sum()","f20ff4e5":"df['Fare'].describe()","da374d05":"# filling missing value with mean\ndf['Fare'].fillna(np.mean(df.Fare), inplace=True)","3d334b18":"df['Fare'] = df['Fare'].apply(np.rint)\ndf['Fare'] = df.Fare.astype(int)\ndf.Fare.dtype","49fd9b6b":"df['Name'].head()","e008796e":"df['title'] = df.Name.str.extract('([a-zA-Z]+\\.)', expand=False)\ndf['title'].head(10)","f4be20c6":"df['title'].unique()","e16790f0":"df['title'].value_counts()","3d39b906":"df['title'].replace([\"Sir.\", \"Countess.\", \"Jonkheer.\", \"Lady.\", \"Don.\", \"Col.\", \"Major.\", \"Capt.\",\n                     \"Rev.\", \"Dr.\"], \"nobles\", inplace=True)\ndf['title'].replace([\"Ms.\", \"Mlle.\"], \"Miss.\", inplace=True)\ndf['title'].replace([\"Dona.\", \"Mme.\"], \"Mrs.\", inplace=True)\ndf['title'].value_counts()","afac0b00":"# Label encoding\nle = LabelEncoder()\ndf['title'] = le.fit_transform(df['title'])\ndf['title'].value_counts()","3d15369d":"list(le.classes_)","750b9d10":"# drop the 'Name'\ndf.drop('Name', axis=1, inplace=True)\ndf.info()","53840a82":"le_sex = LabelEncoder()\ndf['Sex'] = le_sex.fit_transform(df['Sex'])\nlist(le_sex.classes_)","e7874c04":"df['Ticket'].head(5)","1ae1b99e":"df['Ticket'].nunique()","00346b30":"df.drop('Ticket', axis=1, inplace=True)\ndf.info()","a52240f2":"df.head()","022ddf49":"df['fare_cat'] = pd.qcut(df.Fare, 4, labels=['cheap', 'value', 'high', 'Premium'])\nsns.catplot(x='fare_cat', data=df, kind='count');","0e93d4ee":"sns.displot(x='fare_cat', data=df.loc[df.dataset == 'train'], hue='Survived', multiple='stack');","185b1141":"sns.catplot(x='fare_cat', y='Survived', data= df.loc[df.dataset == 'train'],\n            kind='point', aspect=2.5);","b65861d2":"le_fare = LabelEncoder()\ndf['fare_cat'] = le_fare.fit_transform(df.fare_cat)\nlist(le_fare.classes_)","20f7dcce":"# drop the 'Fare' column\ndf.drop('Fare', axis=1, inplace=True)\ndf.info()","664cf2d0":"# drop 'Passenger Id' from training set\ndf_train = df.loc[df.dataset == 'train'].copy()\ndf_train.drop(['PassengerId', 'dataset'], axis=1, inplace = True)\ndf_train['Survived'] = df_train['Survived'].astype(int)\ndf_train.head(2)","12af1559":"df_test = df.loc[df.dataset == 'test'].copy()\ndf_test.drop(['dataset'], axis=1, inplace = True)\ndf_test.head(2)","7089a4ff":"from sklearn.model_selection import train_test_split as tts\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","ffb88923":"df_train.shape","c2356d44":"X = df_train.iloc[:, 1:]\ny = df_train['Survived']\nprint(f\"X shape: {X.shape}\")\nprint(f\"y shape: {y.shape}\")","f18606c9":"# splitting the train dataset into training and testing\n# 70% training, 30% testing set\nX_train, X_test, y_train, y_test = tts(X, y, test_size=0.3, random_state=57)\nprint(f\"X_train shape: {X_train.shape} | y_train shape: {y_train.shape}\")\nprint(f\"X_test shape: {X_test.shape} | y_test shape: {y_test.shape}\")","a10365f7":"rf = RandomForestClassifier(n_estimators=100)\nrf.fit(X_train, y_train)\ny_pred_rf = rf.predict(X_test)\nrf_score = round(accuracy_score(y_test, y_pred_rf), 2)\nprint(f\"Accuracy Score for Random Forest:\\n{rf_score} %\")","60d5abd2":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\ny_pred_knn = knn.predict(X_test)\nknn_score = round(accuracy_score(y_test, y_pred_knn), 2)\nprint(f\"Accuracy Score for KNN:\\n{knn_score} %\")","050e4133":"lsvc = LinearSVC(tol=1e-5, max_iter=10000, dual=False)\nlsvc.fit(X_train, y_train)\ny_pred_lsvc = lsvc.predict(X_test)\nlsvc_score = round(accuracy_score(y_test, y_pred_lsvc), 2)\nprint(f\"Accuracy Score for Linear Support Vector Machine:\\n{lsvc_score} %\")","73ffcf6f":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred_dt = dt.predict(X_test)\ndt_score = round(accuracy_score(y_test, y_pred_dt), 2)\nprint(f\"Accuracy Score for Decision Tree:\\n{dt_score} %\")","41492da0":"sgd = SGDClassifier()\nsgd.fit(X_train, y_train)\ny_pred_sgd = sgd.predict(X_test)\nsgd_score = round(accuracy_score(y_test, y_pred_sgd), 2)\nprint(f\"Accuracy Score for Stochastic Gradient Descent:\\n{sgd_score} %\")","0f2b3ca7":"results = {'Models': ['Stochastic Gradient Descent', 'Decision Tree', 'Linear Support Vector Machine', 'K Nearest Neighbor',\n                      'Random Forest'],\n           'Score': [sgd_score, dt_score, lsvc_score, knn_score, rf_score]}\nres = pd.DataFrame.from_dict(results)\nres.sort_values('Score', ascending=False, inplace=True)\nres","0f388efc":"feat_importance = pd.DataFrame({'features': X_train.columns,\n                                'importance': np.round(rf.feature_importances_, 3)})\nfeat_importance.sort_values('importance', ascending=False, inplace=True)\nfeat_importance","5649ae0a":"fig, ax = plt.subplots(figsize=(11, 6))\nsns.barplot(x='features', y='importance', data=feat_importance, ax=ax);","2fb0a80c":"df.columns","6a949fd3":"important_cols = ['PassengerId', 'Survived', 'Pclass', 'Sex', 'Age', 'dataset', 'family', 'Deck', 'title', 'fare_cat', 'age_group']\nfinal_df = df.loc[:, important_cols].copy()\nfinal_df.head(2)","3a7a8044":"X_final = final_df.loc[final_df.dataset == 'train', 'Pclass':'fare_cat']\nX_final.drop('dataset', axis=1, inplace=True)\ny_final = final_df.loc[final_df.dataset == 'train', 'Survived']\nX_test_final = final_df.loc[final_df.dataset == 'test', 'Pclass':'fare_cat']\nX_test_final.drop('dataset', axis=1, inplace=True)\nprint(f\"X_final shape: {X_final.shape}\")\nprint(f\"y_final shape: {y_final.shape}\")\nprint(f\"X_test_final shape: {X_test_final.shape}\")\n      ","5685a91c":"X_final.head(2)","e692d133":"X_test_final.head(2)","ff3f9123":"p_id = final_df.loc[final_df['dataset'] == 'test']['PassengerId'].values\nlen(p_id)","65062d26":"dt_final = DecisionTreeClassifier()\ndt_final.fit(X_final, y_final)\ny_pred_dt = dt_final.predict(X_test_final)\noutput = pd.DataFrame({'PassengerId': p_id, 'Survived': y_pred_dt})\noutput['Survived'] = output.Survived.astype(int)\noutput.to_csv('submission_third.csv', index=False)\nprint(\"Submission saved!\")","6d71f9bd":"### Decision Tree","047e2894":"## EDA","080dfd23":"for the time being dropping Ticket...","eb71df7a":"Creating Age groups:\n* Child: 0-10\n* Teen: 11-19\n* Young: 20-25\n* Adult: 26 - 30\n* Middle Adult: 31 - 35\n* Senior Adult: 36 - 40\n* Aging: 41-65\n* Seniors: 65+\n","0bb97d91":"### Pclass","165e1604":"### KNearest Neighbor","34d44d49":"## Using Decison Tree for submission of prediction","18936eb1":"nobles - Sir, Countess, Jonkheer, Lady, Don\nMr\nMiss - Ms., Mlle\nMaster\nMrs - Dona, Mme\nArmy - Col, Major, Capt.\nDr\nRev\n\n\n","8066e03d":"* Age has 177 missing values.\n* Cabin has 687 missing values.\n* Embarked has only 2 missing values.","a5c34c1d":"### Embarked\n\nhas only 2 missing values, filling it with most common value","c329f759":"it seems during rescue gender and age was descisive , childrens and females were given priority.","16806db6":"## Missing Data","ae12e7c3":"depending on the gender point of embarkment seems to be correlated with survival. Females at Point S an Q have a better chance of survival then point C.\nfor male point C had a better chance than point S and Q.","30ac50ef":"### Embarked and Sex","670fc012":"### Encoding Sex","6bb9f807":"That was the hard reality of titanic, survival was dependent on the price you paid for a ticket...","2c4e7959":"## Separating the dataset","66ea2ff1":"Seems being in class 1 had better survival chances...","943617d1":"### Names and titles...","b944a671":"### Feature importance\n\nAs per Random Forest Model","9ea3fdf1":"### Random Forest","660dfa94":"Seems with 1 to 3 family members survival probability was high.","2216e920":"### Linear Support Vector Machine","5d4dbcbb":"## Building Models","9b5846b4":"### Age","1fc6798d":"It seems our assumption about class 1 is true. Class 3 has worst probability of survival.","441639f8":"### Missing data\n#### Cabin\n\nas per observation of others (in the competition) Cabin seems to refer deck, let's see if it helps...","52eb312c":"### SibSp & Parch\n\ncreating a new column 'family' by combiningg both and see if someone was alone or with family.","ab230c91":"### The Best Model","3c40e983":"### Age, Sex and survival","eb1183a9":"It seems gender played a role in survival. survival rate among female was higher than male.","a7e2bdd2":"## Feature Engineering","01f49974":"### Stochastic Gradient Descent","86662d7d":"### Ticket"}}